<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="0b7038b1b8b235127314398d870b6ac8758ec9ad" translate="yes" xml:space="preserve">
          <source>Giving your class a name gives it a name in the debugger, making your life easier later on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a64ed722c416e5cf8425e0085bf4c7820af799" translate="yes" xml:space="preserve">
          <source>Giving your class a name makes it easier to search for in general, and is better for code editors and documentation tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1878e1b88c01c2fec58c06f4aaf91b570f5e3033" translate="yes" xml:space="preserve">
          <source>Glimmer Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4ef84fcaf86a96919235d3336c07ccf7ae675e" translate="yes" xml:space="preserve">
          <source>Glimmer components have some huge benefits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063cfa0c7eed3b63497f8beda101ec25a23addf3" translate="yes" xml:space="preserve">
          <source>Glimmer components, imported from &lt;code&gt;@glimmer/component&lt;/code&gt;, which are the default component's for Ember Octane (3.15) and more recent editions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23e7c6bc9c693ac3b74c7836e37807dcbe2f69d" translate="yes" xml:space="preserve">
          <source>Global acceptance test helpers like &lt;code&gt;find()&lt;/code&gt; or &lt;code&gt;click()&lt;/code&gt;. These can be replaced with the &lt;code&gt;@ember/test-helpers&lt;/code&gt;, which is the default for test helpers now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92f1eef48b7f6e018af6fa6c86f0f289cf85ab1" translate="yes" xml:space="preserve">
          <source>Global helper method to create a new binding. Just pass the root object along with a &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; path to create and connect the binding.</source>
          <target state="translated">새 바인딩을 작성하기위한 글로벌 헬퍼 메소드. 루트 오브젝트를 &lt;code&gt;to&lt;/code&gt; 및 &lt;code&gt;from&lt;/code&gt; 경로 와 함께 전달 하여 바인딩을 작성하고 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="9475c240051332f46be27d81c5999df956eee70c" translate="yes" xml:space="preserve">
          <source>Globals provided by JavaScript assets</source>
          <target state="translated">JavaScript 자산에서 제공하는 글로벌</target>
        </trans-unit>
        <trans-unit id="a0e3e6de22c62882fc935f5fd0ca300105fa5b62" translate="yes" xml:space="preserve">
          <source>Go back to your browser and you should see that the UI looks identical. The only difference is that now we've componentized our list into a version that's more reusable and more maintainable.</source>
          <target state="translated">브라우저로 돌아 가면 UI가 동일하게 보입니다. 유일한 차이점은 이제 우리는 목록을 더 재사용 가능하고 유지 보수가 쉬운 버전으로 구성했다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f16ced98283c68cb88a0172784f9bb24fc274245" translate="yes" xml:space="preserve">
          <source>Good Ember apps take a different approach. Ember Data gives you a single &lt;strong&gt;store&lt;/strong&gt; that is the central repository of models in your application. Components and routes can ask the store for models, and the store is responsible for knowing how to fetch them.</source>
          <target state="translated">Good Ember 앱은 다른 접근 방식을 취합니다. Ember Data는 단일 &lt;strong&gt;매장을&lt;/strong&gt; 제공합니다&lt;strong&gt;&lt;/strong&gt; 애플리케이션에서 모델의 중앙 저장소 인 를 . 구성 요소 및 경로는 상점에 모델을 요청할 수 있으며 상점은 모델을 가져 오는 방법을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="5321516ec86343c75ae1ca44f62709c0941421ba" translate="yes" xml:space="preserve">
          <source>Good Ember apps take a different approach. Ember Data gives you a single &lt;strong&gt;store&lt;/strong&gt; that is the central repository of models in your application. Routes and their corresponding controllers can ask the store for models, and the store is responsible for knowing how to fetch them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e30d6aac813417d581bd798bb4422107881ac34" translate="yes" xml:space="preserve">
          <source>Good luck!</source>
          <target state="translated">행운을 빕니다!</target>
        </trans-unit>
        <trans-unit id="f6bf9c3593354b28043e84f76fcab48400ba8060" translate="yes" xml:space="preserve">
          <source>Google Chrome</source>
          <target state="translated">구글 크롬</target>
        </trans-unit>
        <trans-unit id="e742dfcf2f4ce5f328b8cb4f2912e33ce6046b2e" translate="yes" xml:space="preserve">
          <source>Google Maps requires an API key for deployment. You can &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/get-api-key&quot;&gt;Generate an API key&lt;/a&gt; from Google. Add your new API key to the application by stopping the server and restarting it with the environment variable, &lt;code&gt;GOOGLE_MAPS_API_KEY&lt;/code&gt;.</source>
          <target state="translated">Google지도에는 배포를위한 API 키가 필요합니다. Google에서 &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/get-api-key&quot;&gt;API 키&lt;/a&gt; 를 생성 할 수 있습니다 . 서버를 중지하고 환경 변수 &lt;code&gt;GOOGLE_MAPS_API_KEY&lt;/code&gt; 로 다시 시작하여 새 API 키를 애플리케이션에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="1fd25f4b6fdcd6e03dc556534e357e8e671589f8" translate="yes" xml:space="preserve">
          <source>Guide: Addons and Dependencies</source>
          <target state="translated">안내서 : 애드온 및 종속성</target>
        </trans-unit>
        <trans-unit id="36f75403a8d2f86bf1a47d458f6f3817c59f2864" translate="yes" xml:space="preserve">
          <source>Guide: Application Concerns</source>
          <target state="translated">가이드 : 응용 프로그램 문제</target>
        </trans-unit>
        <trans-unit id="e0feedc00015452b1f83e2f3873bd2b3a5af991a" translate="yes" xml:space="preserve">
          <source>Guide: Components</source>
          <target state="translated">안내서 : 구성 요소</target>
        </trans-unit>
        <trans-unit id="e96ef24505a7db97162ac7b561593565080a3626" translate="yes" xml:space="preserve">
          <source>Guide: Configuring Ember.js</source>
          <target state="translated">안내서 : Ember.js 구성</target>
        </trans-unit>
        <trans-unit id="e6f62ffc557f46990ee7fcd9b7e51f2a23ee27a8" translate="yes" xml:space="preserve">
          <source>Guide: Controllers</source>
          <target state="translated">가이드 : 컨트롤러</target>
        </trans-unit>
        <trans-unit id="5ddef1ff843bc54027e2243e9513e6e816fb3321" translate="yes" xml:space="preserve">
          <source>Guide: Ember Inspector</source>
          <target state="translated">가이드 : Ember Inspector</target>
        </trans-unit>
        <trans-unit id="da421341aba116761a4e1a0403a540126e7cb1e1" translate="yes" xml:space="preserve">
          <source>Guide: Getting Started</source>
          <target state="translated">안내서 : 시작하기</target>
        </trans-unit>
        <trans-unit id="94bfb948c23fb0630e099092d078b3655e25dded" translate="yes" xml:space="preserve">
          <source>Guide: Glossary</source>
          <target state="translated">가이드 : 용어집</target>
        </trans-unit>
        <trans-unit id="4caef054558dea4828946f280fd702f043ba94e6" translate="yes" xml:space="preserve">
          <source>Guide: Models</source>
          <target state="translated">안내서 : 모델</target>
        </trans-unit>
        <trans-unit id="0e28eed94d41629db6069db8363174c2239ae1d7" translate="yes" xml:space="preserve">
          <source>Guide: Routing</source>
          <target state="translated">가이드 : 라우팅</target>
        </trans-unit>
        <trans-unit id="58349b97443d511f52d2bca7dd9698096bb28e42" translate="yes" xml:space="preserve">
          <source>Guide: Templates</source>
          <target state="translated">안내서 : 템플릿</target>
        </trans-unit>
        <trans-unit id="368e90216820cf9a93720780467aab950c2190ca" translate="yes" xml:space="preserve">
          <source>Guide: Testing</source>
          <target state="translated">가이드 : 테스트</target>
        </trans-unit>
        <trans-unit id="40d278bbd5928261f752ed2d1221bf15d4d0d64a" translate="yes" xml:space="preserve">
          <source>Guide: The Object Model</source>
          <target state="translated">안내서 : 객체 모델</target>
        </trans-unit>
        <trans-unit id="0e2c2ebdd60572423288c669f8e6a4bab450c3df" translate="yes" xml:space="preserve">
          <source>Guide: Tutorial</source>
          <target state="translated">가이드 : 튜토리얼</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="1b3a02ba5cc11b1ef4f57a4806126987b263c34a" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;class&lt;/code&gt; Attribute</source>
          <target state="translated">HTML &lt;code&gt;class&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="c83fb96d107f191cb169da811d2b409263026eb9" translate="yes" xml:space="preserve">
          <source>HTML Attributes</source>
          <target state="translated">HTML 속성</target>
        </trans-unit>
        <trans-unit id="ffcf74cf49c99fab8acf3c58dd434addf353ee43" translate="yes" xml:space="preserve">
          <source>HTML Modifiers and Actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad7e678705b81df6846d0e3a88587ec82599320" translate="yes" xml:space="preserve">
          <source>HTML Tag</source>
          <target state="translated">HTML 태그</target>
        </trans-unit>
        <trans-unit id="d65165f830da27e9b3de4e717341f193c2d4f00e" translate="yes" xml:space="preserve">
          <source>HTML attributes passed with angle bracket invocations will take precedence over those specified in &lt;code&gt;attributeBindings&lt;/code&gt;. Therefore, if this component was invoked like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfeb738ddf7728de3df17e425a9bee98a93de35" translate="yes" xml:space="preserve">
          <source>HTML comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7445b81a7a0fb74e83a81664fe6a469c3b93aff4" translate="yes" xml:space="preserve">
          <source>HTML string</source>
          <target state="translated">HTML 문자열</target>
        </trans-unit>
        <trans-unit id="e956ef129c977940c566953aec6bb729dc3305f0" translate="yes" xml:space="preserve">
          <source>HTML5 drag and drop events:</source>
          <target state="translated">HTML5 드래그 앤 드롭 이벤트 :</target>
        </trans-unit>
        <trans-unit id="0b878b29c2ffa01cb115881261f1f471b6419fa0" translate="yes" xml:space="preserve">
          <source>HTMLBars</source>
          <target state="translated">HTMLBars</target>
        </trans-unit>
        <trans-unit id="9e7e8330c132a4390643d48e5b3602a028852f31" translate="yes" xml:space="preserve">
          <source>HTTP Verb</source>
          <target state="translated">HTTP 동사</target>
        </trans-unit>
        <trans-unit id="337ba610aa0d207b04a3d0c4fbe59b410042c4cf" translate="yes" xml:space="preserve">
          <source>HTTP method</source>
          <target state="translated">HTTP 메소드</target>
        </trans-unit>
        <trans-unit id="788e5d8b02313cc4b57601465d18921374311fda" translate="yes" xml:space="preserve">
          <source>Handlebars Basics</source>
          <target state="translated">핸들 바 기본 사항</target>
        </trans-unit>
        <trans-unit id="bb473803f02ab69ee9053ae70c5dcbb1448a770c" translate="yes" xml:space="preserve">
          <source>Handlebars and Ember come with a few helpers that can make developing your templates a bit easier. These helpers make it simple to output variables into your browser's console, or activate the debugger from your templates.</source>
          <target state="translated">핸들 바와 Ember에는 템플릿을 좀 더 쉽게 개발할 수있는 몇 가지 도우미가 있습니다. 이러한 도우미를 사용하면 변수를 브라우저의 콘솔에 간단하게 출력하거나 템플릿에서 디버거를 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7153b5006d4c97a18ab1d0caa6bfd914338849f" translate="yes" xml:space="preserve">
          <source>Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent</source>
          <target state="translated">핸들 키 / 값 쌍 옵션, Ember.LinkComponent의 모든 속성을 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51381d9d7d2e1d4b1028d495dd3200304f3c0250" translate="yes" xml:space="preserve">
          <source>Handlebars templates will automatically be updated to reflect a resolved promise. We can display a list of comments in a blogPost like so:</source>
          <target state="translated">처리 된 약속을 반영하도록 핸들 바 템플릿이 자동으로 업데이트됩니다. 블로그에 댓글 목록을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de07df966c34bdd8ca33d1de21c8a776d6dbcd5a" translate="yes" xml:space="preserve">
          <source>Handlebars.SafeString</source>
          <target state="translated">Handlebars.SafeString</target>
        </trans-unit>
        <trans-unit id="6fd0acd61cec737cb2c75447423e9a7f24a6781b" translate="yes" xml:space="preserve">
          <source>Handles notifying any listeners of an impending URL change.</source>
          <target state="translated">리스너에게 임박한 URL 변경을 알리는 작업을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="ed55e0e23b34deed5eb2b523c7da39ea70b0f4e0" translate="yes" xml:space="preserve">
          <source>Handles updating the paths and notifying any listeners of the URL change.</source>
          <target state="translated">경로 업데이트 및 리스너에게 URL 변경 알림을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="e126f0a342fbcd3b3afcdffb356987d85bb9f2d3" translate="yes" xml:space="preserve">
          <source>Handling &lt;code&gt;href&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; 처리</target>
        </trans-unit>
        <trans-unit id="35428fcfaeb2541bb767a71a58c264899e7d2d9a" translate="yes" xml:space="preserve">
          <source>Handling Action Completion</source>
          <target state="translated">조치 완료 처리</target>
        </trans-unit>
        <trans-unit id="9b845994f53730addb1c09b9f06592b05f193ea1" translate="yes" xml:space="preserve">
          <source>Handling Browser Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fe0bdbe4011b8624ccd6fa38bb3b6eff381dd5" translate="yes" xml:space="preserve">
          <source>Handling Deprecations</source>
          <target state="translated">지원 중단 처리</target>
        </trans-unit>
        <trans-unit id="d425f7e27fe0f057871c46f4c72c4a3bd2b0f136" translate="yes" xml:space="preserve">
          <source>Handling Events</source>
          <target state="translated">이벤트 처리</target>
        </trans-unit>
        <trans-unit id="e918401587af3e65eda8234d3e59f421428130d3" translate="yes" xml:space="preserve">
          <source>Handling Metadata</source>
          <target state="translated">메타 데이터 처리</target>
        </trans-unit>
        <trans-unit id="db937a958b87280f3d6fc18c715cb6254451f8d1" translate="yes" xml:space="preserve">
          <source>Handling Results Coming Back at Different Times</source>
          <target state="translated">다른 시간에 되돌아 오는 결과 처리</target>
        </trans-unit>
        <trans-unit id="4ffd58d57d6bbb28a92f1c026aa165182c6fb42b" translate="yes" xml:space="preserve">
          <source>Handling Validation Errors</source>
          <target state="translated">유효성 검사 오류 처리</target>
        </trans-unit>
        <trans-unit id="aced29647a5cf1540ee7e3807350fee6fd052495" translate="yes" xml:space="preserve">
          <source>Handling current route</source>
          <target state="translated">현재 경로 처리</target>
        </trans-unit>
        <trans-unit id="9e35481745a45cde55c44963a7e362bab3f1b408" translate="yes" xml:space="preserve">
          <source>HasManyReference</source>
          <target state="translated">HasManyReference</target>
        </trans-unit>
        <trans-unit id="873507a022b58de26a88deae87268cbd8d6af5b1" translate="yes" xml:space="preserve">
          <source>Hash</source>
          <target state="translated">Hash</target>
        </trans-unit>
        <trans-unit id="807079595ea5a799de6277c046782afa4e0e5102" translate="yes" xml:space="preserve">
          <source>HashLocation</source>
          <target state="translated">HashLocation</target>
        </trans-unit>
        <trans-unit id="add4322e33633cc4c3ee7eb1c8f2f41576ddbb91" translate="yes" xml:space="preserve">
          <source>Hashes are useful for configuring the behavior of a helper:</source>
          <target state="translated">해시는 도우미의 동작을 구성하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a899d251b5416098f876e50cf427a0d4a1837a0b" translate="yes" xml:space="preserve">
          <source>Having a parent route means that any content on our parent route template will be present as we browse down through our child routes, allowing us to add things like common instructions, navigation, footers or sidebars.</source>
          <target state="translated">부모 경로가 있다는 것은 자식 경로를 탐색 할 때 부모 경로 템플릿의 내용이 표시되므로 일반적인 지침, 탐색, 바닥 글 또는 사이드 바와 같은 항목을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c42302b3ce38d5dac262a7158e03cdf2072de98" translate="yes" xml:space="preserve">
          <source>Headers customization</source>
          <target state="translated">헤더 사용자 정의</target>
        </trans-unit>
        <trans-unit id="1e7eebdb08c9dbf27c7668e2badd51e667707d3c" translate="yes" xml:space="preserve">
          <source>Helper</source>
          <target state="translated">Helper</target>
        </trans-unit>
        <trans-unit id="71bfa60b06c751b549dfa608bed89dce9177c4af" translate="yes" xml:space="preserve">
          <source>Helper Arguments</source>
          <target state="translated">도우미 인수</target>
        </trans-unit>
        <trans-unit id="334c16fc9ac63595f080f7bbcdf324a43ffd5267" translate="yes" xml:space="preserve">
          <source>Helper Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681268974b5ee9db6f5333c725d86800c64141d2" translate="yes" xml:space="preserve">
          <source>Helper Names</source>
          <target state="translated">도우미 이름</target>
        </trans-unit>
        <trans-unit id="7d6773131b0c94c1c79e399530564df6071d0e58" translate="yes" xml:space="preserve">
          <source>Helper functions are JavaScript functions that you can call from your template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689db909d0464dc58ec10ab0be6fb25f318bad73" translate="yes" xml:space="preserve">
          <source>Helper managers must fulfill the following interface (This example uses &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/interfaces.html&quot;&gt;TypeScript interfaces&lt;/a&gt; for precision, you do not need to write helper managers using TypeScript):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e6ec9b9d847d9ac55a685deddc479fa9005991" translate="yes" xml:space="preserve">
          <source>Helper method returns the first object from a collection. This is usually used by bindings and other parts of the framework to extract a single object if the enumerable contains only one item.</source>
          <target state="translated">도우미 메서드는 컬렉션에서 첫 번째 개체를 반환합니다. 열거 형에 항목이 하나만 포함 된 경우 바인딩과 프레임 워크의 다른 부분에서 단일 개체를 추출하는 데 주로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cb868523634137d3ac0cbf44265217f711b041b1" translate="yes" xml:space="preserve">
          <source>Helper method returns the last object from a collection. If your enumerable contains only one object, this method should always return that object. If your enumerable is empty, this method should return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">도우미 메서드는 컬렉션에서 마지막 개체를 반환합니다. 열거 가능 객체에 객체가 하나만 있으면이 메소드는 항상 해당 객체를 반환해야합니다. 열거 형이 비어 있으면이 메소드는 &lt;code&gt;undefined&lt;/code&gt; 를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="78e00ba58068b9405dc568b23c42190de2bc9e3b" translate="yes" xml:space="preserve">
          <source>Helpers allow you to add additional functionality to your templates beyond what is included out-of-the-box in Ember. Helpers are most useful for transforming raw values from models and components into a format more appropriate for your users.</source>
          <target state="translated">도우미를 사용하면 Ember에 기본 제공되는 것 이외의 기능을 템플릿에 추가 할 수 있습니다. 도우미는 모델 및 구성 요소의 원시 값을 사용자에게 더 적합한 형식으로 변환하는 데 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2a801d726cc532008f284d2cd1f598ed7311f982" translate="yes" xml:space="preserve">
          <source>Helpers allow you to pass named arguments as a JavaScript object that contains the name of the argument along with an associated value. The order in which named arguments are supplied does not affect functionality.</source>
          <target state="translated">헬퍼를 사용하면 명명 된 인수를 인수 값과 함께 연관된 값이 포함 된 JavaScript 오브젝트로 전달할 수 있습니다. 명명 된 인수가 제공되는 순서는 기능에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="39f9e2aad73a812a6000b56670fb0385cd164262" translate="yes" xml:space="preserve">
          <source>Helpers are best tested with integration tests, but can also be tested with unit tests. Integration tests will provide better coverage for helpers, as it more closely simulates the lifecycle of a helper than in isolation.</source>
          <target state="translated">도우미는 통합 테스트로 테스트하는 것이 가장 좋지만 단위 테스트로 테스트 할 수도 있습니다. 통합 테스트는 헬퍼의 수명주기를보다 밀접하게 시뮬레이션하기 때문에 헬퍼에게 더 나은 적용 범위를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c49ee45273a9049777c93311626fe7664fee1b2f" translate="yes" xml:space="preserve">
          <source>Helpers are best tested with rendering tests, but can also be tested with unit tests. Rendering tests will provide better coverage for helpers, as it more closely simulates the lifecycle of a helper than in isolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b680112615d456c9c07a20f0e9669ca5d58ef5" translate="yes" xml:space="preserve">
          <source>Helpers are functions, which can be easily tested through &lt;code&gt;module&lt;/code&gt; alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff44fce5d3784f31c67308e313afd11d07fd3fea" translate="yes" xml:space="preserve">
          <source>Helpers can also be defined using class syntax. For instance, we could define the substring helper using classes instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2546987b068c41d7af6e28e45ccd184017ca756d" translate="yes" xml:space="preserve">
          <source>Helpers defined using a class must provide a &lt;code&gt;compute&lt;/code&gt; function. For example:</source>
          <target state="translated">클래스를 사용하여 정의 된 헬퍼는 &lt;code&gt;compute&lt;/code&gt; 함수를 제공해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9dd57ecb503d3b97e09bb660378d70958f39e6eb" translate="yes" xml:space="preserve">
          <source>Helpers have the ability to be nested within other helper invocations and also component invocations.</source>
          <target state="translated">헬퍼는 다른 헬퍼 호출 및 컴포넌트 호출 내에 중첩 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22d64553bfc8432fab751a4437cf2e382597f6b0" translate="yes" xml:space="preserve">
          <source>Here again, we add a new &lt;code&gt;contact&lt;/code&gt; route in &lt;code&gt;app/router.js&lt;/code&gt; and generate a route handler in &lt;code&gt;app/routes/contact.js&lt;/code&gt;.</source>
          <target state="translated">여기서도 &lt;code&gt;app/router.js&lt;/code&gt; 에 새로운 &lt;code&gt;contact&lt;/code&gt; 경로를 추가하고 &lt;code&gt;app/routes/contact.js&lt;/code&gt; 에 경로 핸들러를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="c80c37e1626d9dfdf25d6d961fc9b1d903b1a303" translate="yes" xml:space="preserve">
          <source>Here an entire blog post model is being passed to the component as a single component property. In turn the component is returning values using &lt;code&gt;yield&lt;/code&gt;. In this case the yielded values are pulled from the post being passed in but anything that the component has access to can be yielded, such as an internal property or something from a service.</source>
          <target state="translated">전체 블로그 게시물 모델이 단일 구성 요소 속성으로 구성 요소에 전달됩니다. 결과적으로 구성 요소는 &lt;code&gt;yield&lt;/code&gt; 를 사용하여 값을 반환합니다 . 이 경우 양도 된 값은 전달되는 게시물에서 가져 오지만 내부 속성 또는 서비스의 항목과 같이 컴포넌트가 액세스 할 수있는 모든 항목을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46cb66a5580234e105bd84bbc6c0acae458e5b7b" translate="yes" xml:space="preserve">
          <source>Here are more examples where rendering tests are ideal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0b46d5ea9606c851e7f360977a10e276191c12" translate="yes" xml:space="preserve">
          <source>Here are more examples where unit tests are ideal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e769d5ae2fb8b75a2af44bcef2c4317222ca1c0" translate="yes" xml:space="preserve">
          <source>Here are some examples of accessibility-focused addons created by many people throughout the Ember community:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836b8bd78c9b6e82841a0036549e2a71015427aa" translate="yes" xml:space="preserve">
          <source>Here are some of the core features in Octane:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a12c3837daeb5c29b21e9b245ed5089c46520a" translate="yes" xml:space="preserve">
          <source>Here are some other tips to get you started:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627ff7fb321c1e0baf01939afd95a26025e101b9" translate="yes" xml:space="preserve">
          <source>Here are some top things to know if you are new to making API requests in a front end framework:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008f036db3fb0cae3e9c11478058cd0a7d0d43be" translate="yes" xml:space="preserve">
          <source>Here are the events that we currently support along with the name of the attribute you would need to use on your field. To reiterate, you would use the attribute name like so:</source>
          <target state="translated">필드에서 사용해야 할 속성 이름과 함께 현재 지원되는 이벤트는 다음과 같습니다. 반복해서 속성 이름을 다음과 같이 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d8c749c55f27bb11286f029c9d42a634838e63be" translate="yes" xml:space="preserve">
          <source>Here are the main differences between angle bracket and curly syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6702b2f9fb8ccafe588f2c9571b453ded3ed4228" translate="yes" xml:space="preserve">
          <source>Here is a list of standard JavaScript array methods and their observable enumerable equivalents:</source>
          <target state="translated">다음은 표준 JavaScript 배열 메소드와 이에 해당하는 열거 가능한 등가물의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="05bb273def215460ace633d7315e6d9597d254f5" translate="yes" xml:space="preserve">
          <source>Here is a simple transform that converts values between cents and US dollars.</source>
          <target state="translated">다음은 센트와 미국 달러 사이의 값을 변환하는 간단한 변환입니다.</target>
        </trans-unit>
        <trans-unit id="f7c39ffadbd1a469d166a296b81aeb5eada867cd" translate="yes" xml:space="preserve">
          <source>Here is an example &lt;code&gt;findRecord&lt;/code&gt; implementation:</source>
          <target state="translated">다음은 &lt;code&gt;findRecord&lt;/code&gt; 구현 예입니다 .</target>
        </trans-unit>
        <trans-unit id="a1a53bea5f121f389ec9dba89881d0bc84a3a5fa" translate="yes" xml:space="preserve">
          <source>Here is an example &lt;code&gt;queryRecord&lt;/code&gt; implementation:</source>
          <target state="translated">다음은 &lt;code&gt;queryRecord&lt;/code&gt; 구현 예제입니다 .</target>
        </trans-unit>
        <trans-unit id="be91e0dc88a4bda0f73b7f173d35790d6c237d7d" translate="yes" xml:space="preserve">
          <source>Here is an example action handler on a component:</source>
          <target state="translated">다음은 컴포넌트의 조치 핸들러 예제입니다.</target>
        </trans-unit>
        <trans-unit id="80d420fadedcd0d67addde722215d59163c4e4f6" translate="yes" xml:space="preserve">
          <source>Here is an example of a non-async helper:</source>
          <target state="translated">비동기가 아닌 도우미의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="686f6fbbf2125c61344e0f99406ce1d0e5f15a34" translate="yes" xml:space="preserve">
          <source>Here is an example of an async helper:</source>
          <target state="translated">다음은 비동기 도우미의 예입니다.</target>
        </trans-unit>
        <trans-unit id="8686a53fa2e824c426efc545f221972fb2b38018" translate="yes" xml:space="preserve">
          <source>Here is an example of an error handler that will be invoked for rejected promises from the various hooks on the route, as well as any unhandled errors from child routes:</source>
          <target state="translated">다음은 경로의 다양한 후크에서 거부 된 약속과 자식 경로의 처리되지 않은 오류에 대해 호출되는 오류 처리기의 예입니다.</target>
        </trans-unit>
        <trans-unit id="13beb07fe62835dc25ff3d895ade35ee7595dcff" translate="yes" xml:space="preserve">
          <source>Here is an example of how to unit test this route:</source>
          <target state="translated">이 경로를 단위 테스트하는 방법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9024e05790c35521e679753fb38a96476643d7aa" translate="yes" xml:space="preserve">
          <source>Here is an example of test this route in an isolated test case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db7fda94ba3c04e3fed4d21f04d97c16e5ea7aa" translate="yes" xml:space="preserve">
          <source>Here is an example of the &lt;code&gt;findRecord&lt;/code&gt; implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5879971a17632c4e9f37c545833d4a067091f958" translate="yes" xml:space="preserve">
          <source>Here is some pseudocode to describe what happens using the example above:</source>
          <target state="translated">다음은 위 예제를 사용하여 발생하는 상황을 설명하기위한 의사 코드입니다.</target>
        </trans-unit>
        <trans-unit id="4ed3d154fad32f4d423b0c0d3164c195269919b1" translate="yes" xml:space="preserve">
          <source>Here is some sample code showing the difference between a concatenated property and a normal one:</source>
          <target state="translated">다음은 연결 속성과 일반 속성의 차이점을 보여주는 샘플 코드입니다.</target>
        </trans-unit>
        <trans-unit id="3620fe1abe778a42dfcc17b3f36dff9bfca5419e" translate="yes" xml:space="preserve">
          <source>Here is some sample code showing the difference between a merged property and a normal one:</source>
          <target state="translated">다음은 병합 된 속성과 일반 속성의 차이점을 보여주는 샘플 코드입니다.</target>
        </trans-unit>
        <trans-unit id="e45023c930fcd24340408ccf1517bca11439c457" translate="yes" xml:space="preserve">
          <source>Here is what the component's JavaScript looks like:</source>
          <target state="translated">구성 요소의 JavaScript는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="933b594d8195750ac884fd8ddd015fb1b0de2b83" translate="yes" xml:space="preserve">
          <source>Here is what would be provided by the browser that the developer would otherwise need to provide:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad3fb8e396627deaa121cc5057168aff890dc20" translate="yes" xml:space="preserve">
          <source>Here we have a controller &lt;code&gt;PostsController&lt;/code&gt; with two properties, a method that sets one of those properties, and an action named &lt;code&gt;setProps&lt;/code&gt;.</source>
          <target state="translated">여기 에는 두 가지 속성, 해당 속성 중 하나를 설정하는 메소드 및 &lt;code&gt;setProps&lt;/code&gt; 라는 액션 이있는 &lt;code&gt;PostsController&lt;/code&gt; 컨트롤러가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9e597c0cced43ed0a6b16a465f107efbf22c3f75" translate="yes" xml:space="preserve">
          <source>Here we invoke the &lt;code&gt;rental-listing&lt;/code&gt; component by name, and assign each &lt;code&gt;rentalUnit&lt;/code&gt; as the &lt;code&gt;rental&lt;/code&gt; attribute of the component.</source>
          <target state="translated">여기서는 &lt;code&gt;rental-listing&lt;/code&gt; 구성 요소를 이름별로 호출하고 각 &lt;code&gt;rentalUnit&lt;/code&gt; 을 구성 요소 의 &lt;code&gt;rental&lt;/code&gt; 속성으로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="9caae2e536d1046a13cf1b8d768d567a6c234d2f" translate="yes" xml:space="preserve">
          <source>Here's a brief video showcasing some of the features of the Inspector:</source>
          <target state="translated">다음은 인스펙터의 일부 기능을 보여주는 간단한 비디오입니다.</target>
        </trans-unit>
        <trans-unit id="2ef2f0eed2f1b6edb8828e11c89de4e0f5c2426a" translate="yes" xml:space="preserve">
          <source>Here's a look at what we want to build before we get started.</source>
          <target state="translated">시작하기 전에 우리가 만들고 싶은 것을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="ebfdc0e5e4fe034cdd75ba1c747add61cac51e56" translate="yes" xml:space="preserve">
          <source>Here's an example implementation of a state with a &lt;code&gt;myEvent&lt;/code&gt; event handler:</source>
          <target state="translated">다음은 &lt;code&gt;myEvent&lt;/code&gt; 이벤트 핸들러 를 사용하여 상태를 구현 한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="38cda9d7f3e4792a7596d3c5f4460451291e07c0" translate="yes" xml:space="preserve">
          <source>Here's an example of a deprecation-workflow file after generated from the console:</source>
          <target state="translated">다음은 콘솔에서 생성 된 deprecation-workflow 파일의 예입니다.</target>
        </trans-unit>
        <trans-unit id="67c3ae73e6d479a2f3faadf75e44b4d5664f0b07" translate="yes" xml:space="preserve">
          <source>Here's an example of a one-to-many reflexive relationship:</source>
          <target state="translated">일대 다 반사 관계의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="18541d730bc8ba428e8836f2ea7fff7a47a480ac" translate="yes" xml:space="preserve">
          <source>Here's an example of a one-to-one reflexive relationship:</source>
          <target state="translated">일대일 반사 관계의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2fe022dd3c8c09a191db4256dd032f9e60a052aa" translate="yes" xml:space="preserve">
          <source>Here's an example of using &lt;code&gt;normalizeResponse&lt;/code&gt; manually:</source>
          <target state="translated">다음은 &lt;code&gt;normalizeResponse&lt;/code&gt; 를 수동으로 사용하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="6f7a2280e562c39fbd1f331362a3ffd102c11b9d" translate="yes" xml:space="preserve">
          <source>Here's an example test that asserts that the specified &lt;code&gt;externalAction&lt;/code&gt; function is invoked when the component's internal &lt;code&gt;submitComment&lt;/code&gt; action is triggered by making use of a test double (dummy function). &lt;code&gt;assert.expect(1)&lt;/code&gt; at the top of the test makes sure that the assertion inside the external action is called:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa6d2e7f30e926a749727b799f37d96e4c8f45c" translate="yes" xml:space="preserve">
          <source>Here's an example test that asserts that the specified &lt;code&gt;externalAction&lt;/code&gt; function is invoked when the component's internal &lt;code&gt;submitComment&lt;/code&gt; action is triggered by making use of a test double (dummy function):</source>
          <target state="translated">다음 은 테스트 이중 (더미 함수)을 사용 하여 구성 요소의 내부 &lt;code&gt;submitComment&lt;/code&gt; 조치가 트리거 될 때 지정된 &lt;code&gt;externalAction&lt;/code&gt; 함수가 호출 되도록하는 테스트 예제입니다 .</target>
        </trans-unit>
        <trans-unit id="4f3c92750905535a8ced5339645aeccc22beef47" translate="yes" xml:space="preserve">
          <source>Here's how we could do it:</source>
          <target state="translated">우리가 할 수있는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e9615c02fedaa57b6187cbb2b8f2144552cba8d3" translate="yes" xml:space="preserve">
          <source>Here's how you can change the data:</source>
          <target state="translated">데이터를 변경하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b00dbf8b666cbb27fe6befc5e345eb2e873b89c" translate="yes" xml:space="preserve">
          <source>Here's one way this situation could be handled:</source>
          <target state="translated">이 상황을 처리 할 수있는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="943d258bf4c8c0e96c24ec06ef073a0663dd5468" translate="yes" xml:space="preserve">
          <source>Here's what it looks like to pass the entire &lt;code&gt;photo&lt;/code&gt; record:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794332affe3f2c69b3cdf8b6c3a9d8846f9963d6" translate="yes" xml:space="preserve">
          <source>Here's what our homepage will look like when we're done:</source>
          <target state="translated">다음은 홈페이지가 완성 된 모습입니다.</target>
        </trans-unit>
        <trans-unit id="f27d989f8488534b53f59313b389527af62def71" translate="yes" xml:space="preserve">
          <source>Here's what you see when you click on an object:</source>
          <target state="translated">객체를 클릭하면 다음과 같이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8174a66dd06a7a63d269b775afb5d9235bb327c3" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;indexOfSelectedTodo&lt;/code&gt; depends on &lt;code&gt;todos.[]&lt;/code&gt;, so it will update if we add an item to &lt;code&gt;todos&lt;/code&gt;, but won't update if the value of &lt;code&gt;isDone&lt;/code&gt; on a &lt;code&gt;todo&lt;/code&gt; changes.</source>
          <target state="translated">여기서, &lt;code&gt;indexOfSelectedTodo&lt;/code&gt; 가 에 따라 달라집니다 &lt;code&gt;todos.[]&lt;/code&gt; 우리가에 항목을 추가 할 경우 업데이트됩니다, 그래서 &lt;code&gt;todos&lt;/code&gt; 하지만, 경우에 업데이트되지 않습니다 값 &lt;code&gt;isDone&lt;/code&gt; A의 &lt;code&gt;todo&lt;/code&gt; 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="b49deac1d23b55006a636313fe25b23b637aa3f8" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;{{name}}&lt;/code&gt; is a property provided by the template's context.</source>
          <target state="translated">여기서 &lt;code&gt;{{name}}&lt;/code&gt; 은 템플릿 컨텍스트에서 제공하는 속성입니다.</target>
        </trans-unit>
        <trans-unit id="c4b1aa8e8d41cd284eef6230e5383085a6b7fa05" translate="yes" xml:space="preserve">
          <source>Here, in this list, the &quot;actions&quot; queue has a higher priority than the &quot;render&quot; or &quot;destroy&quot; queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedb4caecf195c602e0f6e9cd5457c7eb1304469" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;photos.photo.comment&lt;/code&gt; route have two dynamic segments: &lt;code&gt;:photo_id&lt;/code&gt; and &lt;code&gt;:comment_id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8964d266349afede44d73cd11b38a64be8aba59" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;posts&lt;/code&gt; route will render the &lt;code&gt;posts.hbs&lt;/code&gt; template, and the &lt;code&gt;posts.new&lt;/code&gt; route will render &lt;code&gt;posts/new.hbs&lt;/code&gt;.</source>
          <target state="translated">여기에서 &lt;code&gt;posts&lt;/code&gt; 라우트는 &lt;code&gt;posts.hbs&lt;/code&gt; 템플릿 을 렌더링 하고 &lt;code&gt;posts.new&lt;/code&gt; 라우트는 &lt;code&gt;posts/new.hbs&lt;/code&gt; 를 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="806448e95a581d9c19ab7981874c395b2aaff922" translate="yes" xml:space="preserve">
          <source>Here, the dependent key &lt;code&gt;todos.@each.isDone&lt;/code&gt; instructs Ember.js to update bindings and fire observers when any of the following events occurs:</source>
          <target state="translated">여기에서 종속 키 &lt;code&gt;todos.@each.isDone&lt;/code&gt; 은 Ember.js에 다음 이벤트 중 하나가 발생할 때 바인딩 및 화재 관찰자를 업데이트하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="8091c2e1cd43e72ba0dde7998f64b7e3ffca89d3" translate="yes" xml:space="preserve">
          <source>Here, we are passing an array of model objects (the photo, then the comment), which is exactly what is needed to populate all the dynamic segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991eebba4ed5397acefdc75a7fa23b48531dffe2" translate="yes" xml:space="preserve">
          <source>Here, we created a basic component class and added a method that accepts a person as an argument and brings up an alert dialog with their name. The &lt;code&gt;@action&lt;/code&gt;&lt;em&gt;decorator&lt;/em&gt; indicates we want to use this method as an &lt;em&gt;action&lt;/em&gt; in our template, in response to user interaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada909ad48df856a56133217fc9f26b5bf45283e" translate="yes" xml:space="preserve">
          <source>Here, we use the &lt;code&gt;each&lt;/code&gt; helper to loop over each item in the array we provided from the &lt;code&gt;model()&lt;/code&gt; hook and print it inside an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">여기서 우리는 &lt;code&gt;each&lt;/code&gt; 도우미를 사용하여 &lt;code&gt;model()&lt;/code&gt; 후크 에서 제공 한 배열의 각 항목을 반복 하여 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소 안에 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="8b7d4a673c342fbd05798bd03c48f7f7519c155b" translate="yes" xml:space="preserve">
          <source>Here, we use the &lt;code&gt;each&lt;/code&gt;&lt;em&gt;helper&lt;/em&gt; to loop over each item in the array we provided from the &lt;code&gt;model()&lt;/code&gt; hook. Ember will render the &lt;em&gt;block&lt;/em&gt; contained inside the &lt;code&gt;{{#each}}...{{/each}}&lt;/code&gt; helper once for each item (each scientist in our case) in the array. The item (the scientist) that is being rendered currently will be made available in the &lt;code&gt;scientist&lt;/code&gt; variable, as denoted by &lt;code&gt;as |scientist|&lt;/code&gt; in the &lt;code&gt;each&lt;/code&gt; helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b0828002906ba7dadba5cdba63511e832e50d8" translate="yes" xml:space="preserve">
          <source>Here, we used the &lt;code&gt;on&lt;/code&gt;&lt;em&gt;modifier&lt;/em&gt; to attach the &lt;code&gt;this.showPerson&lt;/code&gt; action to the button in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8064f510c63cc0add4c6e4ef321484c5b2cd7eaf" translate="yes" xml:space="preserve">
          <source>Here, you need to pass a person object, which could be a complex class. The &lt;code&gt;addJob&lt;/code&gt; method in &lt;code&gt;Person&lt;/code&gt; could be complex as well, perhaps requiring another class. Instead, create a simple object and pass it instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89969f1434459d674a60b551b74c2594a3242b7" translate="yes" xml:space="preserve">
          <source>Hiding and Showing an Image</source>
          <target state="translated">이미지 숨기기 및 표시</target>
        </trans-unit>
        <trans-unit id="f45f34dc307db2bdccec0e73ce3a002073c87c35" translate="yes" xml:space="preserve">
          <source>Highlighting Templates</source>
          <target state="translated">강조 표시 템플릿</target>
        </trans-unit>
        <trans-unit id="2890ed8a01ab8a5f7eaabed4e6f1f28297e928b9" translate="yes" xml:space="preserve">
          <source>HistoryLocation</source>
          <target state="translated">HistoryLocation</target>
        </trans-unit>
        <trans-unit id="6add73e75a0e92e877ef963ef7d0a1799ba74e3d" translate="yes" xml:space="preserve">
          <source>HistoryLocation implements the location API using the browser's history.pushState API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d94912208f7c9156f132fcb4e8058655d1449a" translate="yes" xml:space="preserve">
          <source>Holds validation errors for a given record, organized by attribute names.</source>
          <target state="translated">속성 이름별로 구성된 지정된 레코드에 대한 유효성 검증 오류를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="6f1f6d929f0c543c40d9dc35ab82269d6a509c75" translate="yes" xml:space="preserve">
          <source>Host Customization</source>
          <target state="translated">호스트 사용자 정의</target>
        </trans-unit>
        <trans-unit id="0c27d67c8e38ea6553bbf5e707038fae7466f06b" translate="yes" xml:space="preserve">
          <source>Host customization</source>
          <target state="translated">호스트 사용자 정의</target>
        </trans-unit>
        <trans-unit id="7c8e2aa276f9628e5bfd0935464f0485f6a9fb64" translate="yes" xml:space="preserve">
          <source>Hovering over the Component Tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094df3847851b3b714fd95e0966758c4866dd24a" translate="yes" xml:space="preserve">
          <source>Hovering over the View Tree</source>
          <target state="translated">뷰 트리를 가리키면</target>
        </trans-unit>
        <trans-unit id="b1a23a6216420fd629b1ded01ab720e204d2d034" translate="yes" xml:space="preserve">
          <source>Hovering over the app</source>
          <target state="translated">앱을 가리키면</target>
        </trans-unit>
        <trans-unit id="bcf8dbbbcf1364bfa6370f1e5d31aa72c1cc0a73" translate="yes" xml:space="preserve">
          <source>How Resolving Works</source>
          <target state="translated">해결 방법</target>
        </trans-unit>
        <trans-unit id="8492d2872a65cb358f5216332b687d163a17c1f5" translate="yes" xml:space="preserve">
          <source>How To Use The Guides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed386089f463d3df60b47fd2191dd0ca71e20027" translate="yes" xml:space="preserve">
          <source>How and where to report accessibility bugs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0003a88755810c077e587316c813346910b07f28" translate="yes" xml:space="preserve">
          <source>How do I tell Ember to start a run loop?</source>
          <target state="translated">Ember에게 런 루프를 시작하도록하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="b10777937caad60c563d415c46eec180adf40348" translate="yes" xml:space="preserve">
          <source>How does the Run Loop work in Ember?</source>
          <target state="translated">Ember에서 Run Loop는 어떻게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="a1a031706cbf26cf1aeb5d611b33be7700aba9a5" translate="yes" xml:space="preserve">
          <source>How fast they execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5279944a62d1f1a4d8f7176082e4fb0246e1db2" translate="yes" xml:space="preserve">
          <source>How is run loop behaviour different when testing?</source>
          <target state="translated">테스트시 런 루프 동작은 어떻게 다릅니 까?</target>
        </trans-unit>
        <trans-unit id="a2e93ed6f00caf06af5d7c3ab64b9dc4178cb93d" translate="yes" xml:space="preserve">
          <source>How should we connect clicking the &quot;Play&quot; and &quot;Pause&quot; to calling the audio tag's &lt;code&gt;play&lt;/code&gt; and &lt;code&gt;pause&lt;/code&gt; methods?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b35f102e2e590f481ff27d2f7bde9931feee8e6" translate="yes" xml:space="preserve">
          <source>How the reference will be looked up when it is loaded. Currently this always returns &lt;code&gt;identity&lt;/code&gt; to signify that a record will be loaded by its &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9e67d1769ba9adb0a83151913ed216fae028b3" translate="yes" xml:space="preserve">
          <source>How the reference will be looked up when it is loaded: Currently this always return &lt;code&gt;identity&lt;/code&gt; to signifying that a record will be loaded by the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">참조가로드 될 때 조회가 조회되는 방법 : 현재는 항상 &lt;code&gt;type&lt;/code&gt; 과 &lt;code&gt;id&lt;/code&gt; 로 레코드가로드 될 것임을 나타내는 &lt;code&gt;identity&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="e14b53493347df7644abc2b9f72cef62cb5cc2bc" translate="yes" xml:space="preserve">
          <source>How to Debug Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211fc991fbf2ca28c68aad8964e0096def53235f" translate="yes" xml:space="preserve">
          <source>How to Filter Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba7d69550a5c836b95631b39dda362399f740e6" translate="yes" xml:space="preserve">
          <source>How to Know If You Need a Property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce241e262a864c5e3924c90cd9cceee3f4f454a" translate="yes" xml:space="preserve">
          <source>How to Run Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca575ef86a83eee06aa1334c084ffde8ee812279" translate="yes" xml:space="preserve">
          <source>How to Run Your Tests</source>
          <target state="translated">테스트를 실행하는 방법</target>
        </trans-unit>
        <trans-unit id="087e57db480d426bed3d97b071e5efb3e2d86666" translate="yes" xml:space="preserve">
          <source>How to make API requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b190fd3bc15c74f8509793db108812d7d096aea" translate="yes" xml:space="preserve">
          <source>How to meet WCAG (Quick Reference)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a43ccdf31fa5d710533b7df1086989a80bdeac" translate="yes" xml:space="preserve">
          <source>How to upgrade</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98299d20f2adf4f26f21bc7e4b72cd98804f116c" translate="yes" xml:space="preserve">
          <source>However the expression &lt;code&gt;(action &quot;sendMessage&quot; &quot;info&quot;)&lt;/code&gt; used in passing the action to the component creates a closure, i.e. an object that binds the parameter we've provided to the function specified. So now when the action is invoked, that parameter will automatically be passed as its argument, effectively calling &lt;code&gt;sendMessage(&quot;info&quot;)&lt;/code&gt;, despite the argument not appearing in the calling code.</source>
          <target state="translated">그러나 액션을 컴포넌트에 전달할 때 사용되는 표현식 &lt;code&gt;(action &quot;sendMessage&quot; &quot;info&quot;)&lt;/code&gt; 은 클로저, 즉 우리가 제공 한 매개 변수를 지정된 함수에 바인딩하는 객체를 만듭니다. 따라서 조치가 호출되면 호출 코드에 인수가 표시되지 않아도 해당 매개 변수가 자동으로 인수로 전달되어 &lt;code&gt;sendMessage(&quot;info&quot;)&lt;/code&gt; 를 효과적으로 호출합니다.</target>
        </trans-unit>
        <trans-unit id="00410a8773cd06d5fab03cfc2845c170ac3a2a39" translate="yes" xml:space="preserve">
          <source>However the expression &lt;code&gt;{{fn this.sendMessage &quot;info&quot;}}&lt;/code&gt; used in passing the action to the component creates a closure and partially applies the given parameter to the new function. So now when the action is invoked, that parameter will automatically be passed as its argument, effectively calling &lt;code&gt;sendMessage(&quot;info&quot;)&lt;/code&gt;, despite the argument not appearing in the calling code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f6745bbb21f53e8e247f89184925d34e15c45d" translate="yes" xml:space="preserve">
          <source>However, child classes can use the &lt;code&gt;super&lt;/code&gt; keyword to access the parent, and use its methods and accessors. Class fields are always overwritten on the instance, so the values on the parent class cannot be accessed by the child if they are redefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b51cbd69be6d59ffbee8304349c13356944a6f" translate="yes" xml:space="preserve">
          <source>However, if the setup requires a loading UI, it might be better to use the router for this purpose.</source>
          <target state="translated">그러나 설치에 UI로드가 필요한 경우이 용도로 라우터를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fbb706f0017ef6a6ee10e8c807ecc0d5e6e035aa" translate="yes" xml:space="preserve">
          <source>However, if we display dollar values to our users as &quot;100&amp;cent;&quot; instead of &quot;$1.00&quot;, they may be very confused. We can write a helper to format these values into the appropriate human-readable form.</source>
          <target state="translated">그러나 사용자에게 &quot;$ 1.00&quot;대신 &quot;100 &amp;cent;&quot;로 달러 값을 표시하면 매우 혼란 스러울 수 있습니다. 이러한 값을 적절한 사람이 읽을 수있는 형식으로 형식화하는 도우미를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59d044aa856a235cd31e89c6e4b2c163b621c247" translate="yes" xml:space="preserve">
          <source>However, if we have the run loop in the above code, the browser will only rerender the template once the attributes have all been set.</source>
          <target state="translated">그러나 위 코드에 실행 루프가있는 경우 속성이 모두 설정되면 브라우저는 템플릿을 다시 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="f7686ce93d07304398a3e888f9439ed0f71345e1" translate="yes" xml:space="preserve">
          <source>However, if you need all success parameters, setting &lt;code&gt;denodeify&lt;/code&gt;'s second parameter to &lt;code&gt;true&lt;/code&gt; causes it to return all success parameters as an array:</source>
          <target state="translated">그러나 모든 성공 매개 변수가 필요한 경우 &lt;code&gt;denodeify&lt;/code&gt; 의 두 번째 매개 변수를 &lt;code&gt;true&lt;/code&gt; 로 설정 하면 모든 성공 매개 변수가 배열로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e07f549681e463aa9651b048d0330b89c1640962" translate="yes" xml:space="preserve">
          <source>However, if you provide the entire model context, the model hook for that URL segment will &lt;em&gt;not&lt;/em&gt; be run. For this reason, many Ember developers choose to pass only ids to &lt;code&gt;&amp;lt;LinkTo&amp;gt;&lt;/code&gt; so that the behavior is consistent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d67cac16aca783c25ab7800a8d2e3f4d5d01c3" translate="yes" xml:space="preserve">
          <source>However, note that in the above code we may have inadvertently introduced an XSS vulnerability into our application! By blindly marking the string as safe, a malicious user could get their own HTML into our app, allowing them to do things like access sensitive customer data.</source>
          <target state="translated">그러나 위의 코드에서 우리는 실수로 응용 프로그램에 XSS 취약점을 도입했을 수 있습니다! 악의적 인 사용자는 맹목적으로 문자열을 안전하다고 표시함으로써 자신의 HTML을 앱에 가져와 민감한 고객 데이터에 액세스하는 등의 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1052e8761a0f5c99ba3f609f4e3b2cc865e0da1" translate="yes" xml:space="preserve">
          <source>However, relying on state should generally be avoided in field initializers, since it can make your classes brittle and error prone, especially when refactoring:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c1e2bb08174ae586c47814ff43d53ce4c73537" translate="yes" xml:space="preserve">
          <source>However, sometimes you may have multiple &lt;code&gt;belongsTo&lt;/code&gt;/&lt;code&gt;hasMany&lt;/code&gt; for the same type. You can specify which property on the related model is the inverse using &lt;code&gt;DS.hasMany&lt;/code&gt;'s &lt;code&gt;inverse&lt;/code&gt; option:</source>
          <target state="translated">그러나 때때로 같은 유형에 대해 복수의 &lt;code&gt;belongsTo&lt;/code&gt; / &lt;code&gt;hasMany&lt;/code&gt; 가있을 수 있습니다 . &lt;code&gt;DS.hasMany&lt;/code&gt; 의 &lt;code&gt;inverse&lt;/code&gt; 옵션을 사용하여 관련 모델에서 어떤 속성이 반대인지 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1124e1f04d345d96ab1636f5cb7a37eb6fc647bd" translate="yes" xml:space="preserve">
          <source>However, sometimes you may have multiple &lt;code&gt;belongsTo&lt;/code&gt;/&lt;code&gt;hasMany&lt;/code&gt; for the same type. You can specify which property on the related model is the inverse using &lt;code&gt;hasMany&lt;/code&gt;'s &lt;code&gt;inverse&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b4256fdaad84d9298f4a98df3d357015a24bcb" translate="yes" xml:space="preserve">
          <source>However, sometimes you may have multiple &lt;code&gt;belongsTo&lt;/code&gt;/&lt;code&gt;hasMany&lt;/code&gt;s for the same type. You can specify which property on the related model is the inverse using &lt;code&gt;DS.belongsTo&lt;/code&gt; or &lt;code&gt;DS.hasMany&lt;/code&gt;'s &lt;code&gt;inverse&lt;/code&gt; option. Relationships without an inverse can be indicated as such by including &lt;code&gt;{ inverse: null }&lt;/code&gt;.</source>
          <target state="translated">그러나 때때로 같은 유형에 대해 복수의 &lt;code&gt;belongsTo&lt;/code&gt; / &lt;code&gt;hasMany&lt;/code&gt; 가있을 수 있습니다 . &lt;code&gt;DS.belongsTo&lt;/code&gt; 또는 &lt;code&gt;DS.hasMany&lt;/code&gt; 의 &lt;code&gt;inverse&lt;/code&gt; 옵션을 사용하여 관련 모델에서 어떤 속성이 반대인지 지정할 수 있습니다 . 역이없는 관계는 &lt;code&gt;{ inverse: null }&lt;/code&gt; 을 포함하여 표시 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="87458f0957587d21c995287d5a962cb93c2bd575" translate="yes" xml:space="preserve">
          <source>However, sometimes you may have multiple &lt;code&gt;belongsTo&lt;/code&gt;/&lt;code&gt;hasMany&lt;/code&gt;s for the same type. You can specify which property on the related model is the inverse using &lt;code&gt;belongsTo&lt;/code&gt; or &lt;code&gt;hasMany&lt;/code&gt;'s &lt;code&gt;inverse&lt;/code&gt; option. Relationships without an inverse can be indicated as such by including &lt;code&gt;{ inverse: null }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbbbf283f1c96ed2363f38b532837db992d546c" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; component invoking the action doesn't know or care what type of message it's collecting. In cases like this, the parent template can provide the required parameter when the action is passed to the child. For example, if we want to use the button to send a message of type &lt;code&gt;&quot;info&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfbeaf9c675ae38bf9e1a3d66352c14e80f4905" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;JSONAPISerializer&lt;/code&gt; expects attributes to be dasherized in the document payload returned by your server:</source>
          <target state="translated">그러나 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 는 서버가 리턴 한 문서 페이로드에서 속성 이 대시 될 것으로 예상합니다.</target>
        </trans-unit>
        <trans-unit id="5e9bcaadfbea05d9b00de2f97e0b15a2c27f5e66" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;button-with-confirmation&lt;/code&gt; component invoking the action doesn't know or care what type of message it's collecting. In cases like this, the parent template can provide the required parameter when the action is passed to the child. For example, if we want to use the button to send a message of type &lt;code&gt;&quot;info&quot;&lt;/code&gt;:</source>
          <target state="translated">그러나 동작을 호출하는 &lt;code&gt;button-with-confirmation&lt;/code&gt; 있는 버튼 구성 요소는 어떤 유형의 메시지를 수집하는지 알거나 신경 쓰지 않습니다. 이런 경우 부모 템플릿은 작업이 자식에게 전달 될 때 필요한 매개 변수를 제공 할 수 있습니다. 예를 들어, 버튼을 사용하여 &lt;code&gt;&quot;info&quot;&lt;/code&gt; 유형의 메시지를 보내려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="799fa4a315e137cfd1c054a2e00ae29e93d492cb" translate="yes" xml:space="preserve">
          <source>However, the most common methods for providing accessible names can be reviewed here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ef0142aa8edc1e0761b6c37f3f364c3ef18a21" translate="yes" xml:space="preserve">
          <source>However, the next time your app asks for a &lt;code&gt;person&lt;/code&gt; with ID &lt;code&gt;1&lt;/code&gt;, the store will notice that it had already retrieved and cached that information from the server. Instead of sending another request for the same information, it will give your application the same record it had provided it the first time. This feature&amp;mdash;always returning the same record object, no matter how many times you look it up&amp;mdash;is sometimes called an &lt;em&gt;identity map&lt;/em&gt;.</source>
          <target state="translated">그러나 다음에 앱 이 ID &lt;code&gt;1&lt;/code&gt; &lt;code&gt;person&lt;/code&gt; 을 요청할 때 상점은 해당 정보가 이미 서버에서 검색되어 해당 정보를 캐시했음을 알게됩니다. 동일한 정보에 대한 다른 요청을 보내지 않고 처음으로 제공 한 것과 동일한 레코드를 응용 프로그램에 제공합니다. 이 기능 (항상 여러 번 조회하더라도 상관없이 동일한 레코드 오브젝트를 리턴 함)을 &lt;em&gt;ID 맵&lt;/em&gt; 이라고합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="be0c92254f1736479ff999ccf033ece6091637dd" translate="yes" xml:space="preserve">
          <source>However, there are times when data is &lt;em&gt;too&lt;/em&gt; dynamic. As noted below, proxies are often used for this type of data, but usually they're overkill. Most of the time, all we want is a POJO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8fbfc152d529b88c9fa868ba7c379a5c369bf8" translate="yes" xml:space="preserve">
          <source>However, there still are two cases where you &lt;em&gt;will&lt;/em&gt; need to use them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da33c85b26bd742ab3c8563a481093bdb4eee16" translate="yes" xml:space="preserve">
          <source>However, this option can be a little harder to apply styles to, so both should be tested before determining which approach to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283e157ed8802370be81b6ac4ade55626db1a6fc" translate="yes" xml:space="preserve">
          <source>However, to get the first initial of the string, we'll need to use JavaScript. To do that, we'll write a helper function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c29f1dc98f1a84326f0dd850e99d414243e7f00" translate="yes" xml:space="preserve">
          <source>However, we understand that there are cases where your Ember.js application may be embedded in an environment beyond your control. The most common scenarios are when authoring third-party JavaScript that is embedded directly in other pages, or when transitioning an application piecemeal to a more modern Ember.js architecture.</source>
          <target state="translated">그러나 Ember.js 애플리케이션이 사용자가 통제 할 수없는 환경에 임베드 될 수 있음을 알고 있습니다. 가장 일반적인 시나리오는 다른 페이지에 직접 임베드 된 써드 파티 JavaScript를 작성하거나 애플리케이션 단편을 최신 Ember.js 아키텍처로 전환 할 때입니다.</target>
        </trans-unit>
        <trans-unit id="9833aae2299260e32f1aacc2fea48c9b20f36e8c" translate="yes" xml:space="preserve">
          <source>However, you &lt;em&gt;must&lt;/em&gt; use &lt;code&gt;get&lt;/code&gt; for these properties, since they are not tracked and there is no way to know in advance that they might be changed with &lt;code&gt;set&lt;/code&gt;. For instance, this will not work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ff92b187239abfead5331c4c2852747f077c08" translate="yes" xml:space="preserve">
          <source>However, you can easily set the relationship after the promise has fulfilled:</source>
          <target state="translated">그러나 약속이 이행 된 후 관계를 쉽게 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af1e4399833e7a0e492957e1ba2bcad82ab689b9" translate="yes" xml:space="preserve">
          <source>However, you will often have a route whose model will change depending on user interaction. For example, imagine a photo viewer app. The &lt;code&gt;/photos&lt;/code&gt; route will render the &lt;code&gt;photos&lt;/code&gt; template with the list of photos as the model, which never changes. But when the user clicks on a particular photo, we want to display that model with the &lt;code&gt;photo&lt;/code&gt; template. If the user goes back and clicks on a different photo, we want to display the &lt;code&gt;photo&lt;/code&gt; template again, this time with a different model.</source>
          <target state="translated">그러나 사용자 상호 작용에 따라 모델이 변경되는 경로가 종종 있습니다. 예를 들어 사진 뷰어 앱을 상상해보십시오. &lt;code&gt;/photos&lt;/code&gt; 경로는 렌더링 &lt;code&gt;photos&lt;/code&gt; 절대 변경 모델, 사진과 목록과 템플릿을. 그러나 사용자가 특정 사진을 클릭하면 해당 모델을 &lt;code&gt;photo&lt;/code&gt; 템플릿 과 함께 표시하려고합니다 . 사용자가 돌아가서 다른 사진을 클릭 하면 이번에는 다른 모델로 &lt;code&gt;photo&lt;/code&gt; 템플릿을 다시 표시하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="77f40273d0f2f3abf35ef9860464a1b1e0c2ad1a" translate="yes" xml:space="preserve">
          <source>Hypertext Markup Language (HTML) is a language for specifying the layout of web pages. It is a markup language that defines the structure of your content declaratively, which makes it very powerful. Ember provides a templating language that extends HTML and provides tools for making that structure dynamic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99667b90d567662155aab00455bc8316096a2c82" translate="yes" xml:space="preserve">
          <source>IDs</source>
          <target state="translated">IDs</target>
        </trans-unit>
        <trans-unit id="4daabb4de8eeb1f903c1165ced032fce112b860c" translate="yes" xml:space="preserve">
          <source>IE &amp;amp; JAWS (Windows)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9efc374c86edc2fecee6eff52b628234192f610" translate="yes" xml:space="preserve">
          <source>Ideally we'll see &quot;Type: Standalone - Estate&quot; for our first rental property. Instead, our default template helper is returning back our &lt;code&gt;rental.propertyType&lt;/code&gt; values. Let's update our helper to look if a property exists in an array of &lt;code&gt;communityPropertyTypes&lt;/code&gt;, if so, we'll return either &lt;code&gt;'Community'&lt;/code&gt; or &lt;code&gt;'Standalone'&lt;/code&gt;:</source>
          <target state="translated">이상적으로 우리는 첫 번째 임대 부동산에 대해 &quot;유형 : 독립형-부동산&quot;을 볼 것입니다. 대신 기본 템플릿 도우미가 &lt;code&gt;rental.propertyType&lt;/code&gt; 값을 반환 합니다. 속성이 일련의 &lt;code&gt;communityPropertyTypes&lt;/code&gt; 에 존재하는지 확인하도록 도우미를 업데이트하겠습니다. 그렇다면 &lt;code&gt;'Community'&lt;/code&gt; 또는 &lt;code&gt;'Standalone'&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eb647c972b9636aacfa5b652eb545da2080be4bd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, the view will appear hidden in DOM.</source>
          <target state="translated">경우 &lt;code&gt;false&lt;/code&gt; , 뷰는 DOM에 숨겨진 나타납니다.</target>
        </trans-unit>
        <trans-unit id="c7c22c1ae71f3d538269f61581a0e81e0153f2f4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isAdministrator&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, Handlebars will produce the following:</source>
          <target state="translated">경우 &lt;code&gt;isAdministrator&lt;/code&gt; 이 있다 &lt;code&gt;false&lt;/code&gt; , 핸들 바는 다음을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="fc4a799288ed6a384c8a0b7d5926ddc862236933" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isAdministrator&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, Handlebars will produce the following HTML element:</source>
          <target state="translated">경우 &lt;code&gt;isAdministrator&lt;/code&gt; 이 있다 &lt;code&gt;true&lt;/code&gt; , 핸들 바는 다음과 같은 HTML 요소를 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="386947e9a0ea30e43f8ba5e2fc284fbe653ad06d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isUrgent&lt;/code&gt; is changed to &lt;code&gt;false&lt;/code&gt;, then the &lt;code&gt;is-urgent&lt;/code&gt; class name will be removed.</source>
          <target state="translated">경우 &lt;code&gt;isUrgent&lt;/code&gt; 이 변경됩니다 &lt;code&gt;false&lt;/code&gt; , 다음은 &lt;code&gt;is-urgent&lt;/code&gt; 클래스 이름이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="9cfe1c1705d3b6327e05f56a1bb9454d9878c0db" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;position&lt;/code&gt; is modified and saved, it will pass through the &lt;code&gt;serialize&lt;/code&gt; function in the transform and again be presented as an array in JSON.</source>
          <target state="translated">경우 &lt;code&gt;position&lt;/code&gt; 수정되고 저장된, 상기 통과하게 &lt;code&gt;serialize&lt;/code&gt; (가) 변환 함수 다시 JSON의 어레이로서 제공 될 수있다.</target>
        </trans-unit>
        <trans-unit id="a97d8b325dc113e67c18b13a4e8635b6d617618a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reload&lt;/code&gt; is specified as an option in the request (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) this method will not be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f899b1f5e6fae1002dd83e9fb5e527fab45924" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; the adapter reported that it was unable to save local changes to the backend for any reason other than a server-side validation error.</source>
          <target state="translated">경우 &lt;code&gt;true&lt;/code&gt; 어댑터는 서버 측 유효성 검사 오류가 아닌 다른 이유로 백엔드 로컬 변경 사항을 저장 할 수 없음을보고했다.</target>
        </trans-unit>
        <trans-unit id="b97709a0f3a9bb9bebb5df0b12cb642a9fc0aebb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; the store is attempting to reload the record from the adapter.</source>
          <target state="translated">경우 &lt;code&gt;true&lt;/code&gt; 가게는 어댑터에서 레코드를 다시로드하려고합니다.</target>
        </trans-unit>
        <trans-unit id="32a2a654ae9bfaf07b54904f9af3a5314ace399c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ reload: true }&lt;/code&gt; is passed or &lt;code&gt;adapter.shouldReloadAll&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, then the returned promise resolves once the adapter returns data, regardless if there are already records in the store:</source>
          <target state="translated">만약 &lt;code&gt;{ reload: true }&lt;/code&gt; 전달 또는 &lt;code&gt;adapter.shouldReloadAll&lt;/code&gt; 로 평가 &lt;code&gt;true&lt;/code&gt; 후 반환 약속 결의 어댑터 데이터를 반환 한 번에 관계없이 이미 저장소에이 기록되는 경우 :</target>
        </trans-unit>
        <trans-unit id="16b1fc24da4fa5c28bffdea5d98d452c7c21a1aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ reload: true }&lt;/code&gt; is passed or &lt;code&gt;adapter.shouldReloadRecord&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, then the returned promise resolves once the adapter returns data, regardless if the requested record is already in the store:</source>
          <target state="translated">경우 &lt;code&gt;{ reload: true }&lt;/code&gt; 전달 또는 &lt;code&gt;adapter.shouldReloadRecord&lt;/code&gt; 는 평가 &lt;code&gt;true&lt;/code&gt; , 다음 반환 약속 결의 어댑터 데이터를 반환 한 번에 관계없이 요청 된 레코드 가게에서 이미 켜져있는 경우 :</target>
        </trans-unit>
        <trans-unit id="bb3dbe66e5e6b5b708bc4b95ba1121acdd8defd3" translate="yes" xml:space="preserve">
          <source>If a &quot;-nav&quot; template isn't found, the &lt;code&gt;partial&lt;/code&gt; helper will fall back to a template named &quot;nav&quot;.</source>
          <target state="translated">&quot;-nav&quot;템플릿을 찾지 못하면 &lt;code&gt;partial&lt;/code&gt; 도우미가 &quot;nav&quot;라는 템플릿으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="1070e0b9e18b5dac2493cafd0b569e32dafec96c" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;mousedown&lt;/code&gt; event occurs, Ember will look at the target of the event and start walking up the DOM node tree, finding corresponding views and invoking their &lt;code&gt;mouseDown&lt;/code&gt; method as it goes.</source>
          <target state="translated">경우 &lt;code&gt;mousedown&lt;/code&gt; 이벤트가 발생, 엠버는 이벤트의 대상을보고는 DOM 노드 트리를 걸어 해당 뷰를 발견하고 자신의 호출이 시작됩니다 &lt;code&gt;mouseDown&lt;/code&gt; 잘 지내 방법.</target>
        </trans-unit>
        <trans-unit id="a99aa2a53926d89c8edf39bcf51322e498497874" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;value&lt;/code&gt; option for the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt;&lt;code&gt;{{action}}&lt;/code&gt;&lt;/a&gt; helper is specified, its value will be considered a property path that will be read off of the first parameter of the action. This comes very handy with event listeners and enables to work with one-way bindings.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 에 대한 옵션 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt; &lt;code&gt;{{action}}&lt;/code&gt; &lt;/a&gt; 도우미를 지정, 그 값은 작업의 첫 번째 매개 변수의 오프 읽을 수 있습니다 속성 경로를 간주됩니다. 이것은 이벤트 리스너에 매우 유용하며 단방향 바인딩으로 작업 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f0bdedf61225129877a120f8b46fd3b246b3830" translate="yes" xml:space="preserve">
          <source>If a literal is passed (such as a number or a string), it will be treated as an identifier instead. In this case, the &lt;code&gt;model&lt;/code&gt; hook of the route will be triggered:</source>
          <target state="translated">리터럴이 전달되면 (예 : 숫자 또는 문자열) 대신 식별자로 처리됩니다. 이 경우 경로 의 &lt;code&gt;model&lt;/code&gt; 후크가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="d148132e7c5e3be9866ecc89b474e7ec9f90cbd9" translate="yes" xml:space="preserve">
          <source>If a property name is preceded by a calculator icon, that means it is a &lt;a href=&quot;https://guides.emberjs.com/object-model/computed-properties&quot;&gt;computed property&lt;/a&gt;. If the value of a computed property hasn't yet been computed, you can click on the calculator to compute it.</source>
          <target state="translated">속성 이름 앞에 계산기 아이콘이 있으면 &lt;a href=&quot;https://guides.emberjs.com/object-model/computed-properties&quot;&gt;계산 속성&lt;/a&gt; 이라는 의미 입니다. 계산 된 속성 값이 아직 계산되지 않은 경우 계산기를 클릭하여 계산할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19a008b6e6e4c965eb844c350ca96fd2fde8005b" translate="yes" xml:space="preserve">
          <source>If a response is considered a failure, the JSON payload is expected to include a top-level key &lt;code&gt;errors&lt;/code&gt;, detailing any specific issues. For example:</source>
          <target state="translated">응답이 실패로 간주되면 JSON 페이로드에는 특정 문제를 자세히 설명하는 최상위 키 &lt;code&gt;errors&lt;/code&gt; 가 포함됩니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e84ca18db1ce4528adaff8ebcde0ddc9d1bbbae5" translate="yes" xml:space="preserve">
          <source>If a route you are trying to link to has multiple dynamic segments, like &lt;code&gt;/photos/4/comments/18&lt;/code&gt;, be sure to specify all the necessary information for each segment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98d92b1b4260fddd26076c0785d2615c517ca9" translate="yes" xml:space="preserve">
          <source>If a serializer cannot be found on the adapter, it will fall back to an instance of &lt;code&gt;DS.JSONSerializer&lt;/code&gt;.</source>
          <target state="translated">어댑터에서 직렬 변환기를 찾을 수 없으면 &lt;code&gt;DS.JSONSerializer&lt;/code&gt; 인스턴스로 대체 됩니다.</target>
        </trans-unit>
        <trans-unit id="b082a53739f56f40f705a2c24db23a779bf6f861" translate="yes" xml:space="preserve">
          <source>If a serializer cannot be found on the adapter, it will fall back to an instance of &lt;code&gt;JSONSerializer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad939b5415fefa419b5d3d8f2267a831976cc9b" translate="yes" xml:space="preserve">
          <source>If a value passed to &lt;code&gt;{{#if}}&lt;/code&gt; evaluates to falsy, the &lt;code&gt;{{else}}&lt;/code&gt; block of that invocation is rendered:</source>
          <target state="translated">&lt;code&gt;{{#if}}&lt;/code&gt; 에 전달 된 값 이 거짓으로 평가되면 해당 호출 의 &lt;code&gt;{{else}}&lt;/code&gt; 블록이 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="aa6cac50285e951d3f99088cf661e8791b58c20f" translate="yes" xml:space="preserve">
          <source>If a version number is shown, you're ready to go.</source>
          <target state="translated">버전 번호가 표시되면 준비가 된 것입니다.</target>
        </trans-unit>
        <trans-unit id="c296e08184e9f731149c6dc6c57c4f6cc1c15251" translate="yes" xml:space="preserve">
          <source>If an API you are using will be going away in the next major version of Ember, you will see a deprecation warning in the developer console. Sometimes, they will be deprecation warnings caused by code in your app, and other times, they may be caused by an addon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fb32851b8732feb9f0af5bc888537010a9ce0b" translate="yes" xml:space="preserve">
          <source>If an ID is specified, it adds the ID to the path generated for the type, separated by a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">ID를 지정하면 유형에 대해 생성 된 경로에 ID를 &lt;code&gt;/&lt;/code&gt; 로 구분하여 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="213d8ea40b85d52bb2416c2d079a86eec4494789" translate="yes" xml:space="preserve">
          <source>If an attribute is set to a quoted string (&lt;code&gt;&quot;button-search&quot;&lt;/code&gt; in the prior example), its value will be set directly on the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633fd88520b85a1dc2adb0f96244f107cab12d1b" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.all&lt;/code&gt; are rejected, the first promise that is rejected will be given as an argument to the returned promises's rejection handler. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da1db12d48186676c3c260c4c76cbac447729dc" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.filter&lt;/code&gt; are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</source>
          <target state="translated">의 어떤 경우 &lt;code&gt;promises&lt;/code&gt; 에 주어진 &lt;code&gt;RSVP.filter&lt;/code&gt; 이 거부, 거부되는 첫 번째 약속은 반환 약속의 거부 핸들러에 인수로 주어집니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e188b37924c5dcf8575ed85908333d8a94954bd6" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.hash&lt;/code&gt; are rejected, the first promise that is rejected will be given as the reason to the rejection handler.</source>
          <target state="translated">의 어떤 경우 &lt;code&gt;promises&lt;/code&gt; 에 주어진 &lt;code&gt;RSVP.hash&lt;/code&gt; 이 거부, 거부되는 첫 번째 약속은 거부 핸들러 이유로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="407809c289ea8c382613cdbd3a397a9c01b737d3" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.hash&lt;/code&gt; are rejected, the state will be set to 'rejected' and the reason for rejection provided.</source>
          <target state="translated">의 어떤 경우 &lt;code&gt;promises&lt;/code&gt; 에 주어진 &lt;code&gt;RSVP.hash&lt;/code&gt; 이 거부, 상태는 '거부'로 설정하고 거부 사유가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="1f0e67fd6d131651ced14358111075c4c5fd3c60" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.map&lt;/code&gt; are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</source>
          <target state="translated">의 어떤 경우 &lt;code&gt;promises&lt;/code&gt; 에 주어진 &lt;code&gt;RSVP.map&lt;/code&gt; 이 거부, 거부되는 첫 번째 약속은 반환 약속의 거부 핸들러에 인수로 주어집니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b85247e817125c495d52abebf679c9153eaf0ddf" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;filter&lt;/code&gt; are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9454e02f723f2d4798d3f9636c8201c6ef3d275" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;hash&lt;/code&gt; are rejected, the first promise that is rejected will be given as the reason to the rejection handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e216c6f4cb103c18550c62907c640c7db908e886" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;hash&lt;/code&gt; are rejected, the state will be set to 'rejected' and the reason for rejection provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba60b17c39da1e6539b8e6688fac7091004683c" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;map&lt;/code&gt; are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f46cfe7efa55298b737df2125ea625479d2317" translate="yes" xml:space="preserve">
          <source>If children were added during the rendering process using &lt;code&gt;appendChild&lt;/code&gt;, &lt;code&gt;rerender&lt;/code&gt; will remove them, because they will be added again if needed by the next &lt;code&gt;render&lt;/code&gt;.</source>
          <target state="translated">아이들이 사용하는 렌더링 과정에서 추가 된 경우 &lt;code&gt;appendChild&lt;/code&gt; , &lt;code&gt;rerender&lt;/code&gt; 옆에 의해 필요한 경우 그들이 다시 추가 할 수 있기 때문에,이를 제거 &lt;code&gt;render&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="781f13b7184304ab362b1bb8a0d3946e5f6bb75d" translate="yes" xml:space="preserve">
          <source>If invoked when not within a run loop:</source>
          <target state="translated">실행 루프 내에 있지 않을 때 호출되는 경우 :</target>
        </trans-unit>
        <trans-unit id="1444a15c947e1f71895cd5243b3042b305c558ed" translate="yes" xml:space="preserve">
          <source>If it's any other positive number, will search backwards from that index of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969823b10c5a62c3d56db750b17cc8daa4dbd5d6" translate="yes" xml:space="preserve">
          <source>If it's greater than or equal to the length of the array, the search starts from the last position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c76c00500664f9fe7a431b8d03f2191c879b656" translate="yes" xml:space="preserve">
          <source>If it's negative, it is taken as the offset from the end of the array i.e. &lt;code&gt;startAt + array.length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51d97cf7dbdd6aee9389de6fe8d9224d28bac28" translate="yes" xml:space="preserve">
          <source>If needed these naming conventions can be overwritten by implementing the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_keyForRelationship&quot;&gt;&lt;code&gt;keyForRelationship()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">필요한 경우 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_keyForRelationship&quot;&gt; &lt;code&gt;keyForRelationship()&lt;/code&gt; &lt;/a&gt; 메소드를 구현하여 이러한 이름 지정 규칙을 겹쳐 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e28614c313781dfa97c4f1763bc0bae8ef15e524" translate="yes" xml:space="preserve">
          <source>If needed these naming conventions can be overwritten by implementing the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer/methods#keyForRelationship&quot;&gt;&lt;code&gt;keyForRelationship()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924be6e4deeb2ba4dff6c32f52c1415073eda89d" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;App.ApplicationAdapter&lt;/code&gt; is found, it will return the value of the &lt;code&gt;defaultAdapter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;App.ApplicationAdapter&lt;/code&gt; 가 없으면 &lt;code&gt;defaultAdapter&lt;/code&gt; 값을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="0cdb6804cd0ae265a2a329ac1ccba377bca7a4f2" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;App.PersonAdapter&lt;/code&gt; is found, this method will look for an &lt;code&gt;App.ApplicationAdapter&lt;/code&gt; (the default adapter for your entire application).</source>
          <target state="translated">&lt;code&gt;App.PersonAdapter&lt;/code&gt; 가 없으면 이 메소드는 &lt;code&gt;App.ApplicationAdapter&lt;/code&gt; (전체 응용 프로그램의 기본 어댑터)를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="d822a1951ff3c05ebe110cd1ee5c788590a34103" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;App.PersonSerializer&lt;/code&gt; is found, this method will look for an &lt;code&gt;App.ApplicationSerializer&lt;/code&gt; (the default serializer for your entire application).</source>
          <target state="translated">어떤 경우 &lt;code&gt;App.PersonSerializer&lt;/code&gt; 가 발견되지 않는,이 방법은 찾을 것이다 &lt;code&gt;App.ApplicationSerializer&lt;/code&gt; (전체 응용 프로그램의 기본 시리얼 라이저).</target>
        </trans-unit>
        <trans-unit id="c1767ecf3b0275d6115c127536c23587b0a5c7a6" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;startAt&lt;/code&gt; argument is given, the search starts from the last position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cf920864305c04d1877d466e05a2201ca3cf64" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;type&lt;/code&gt; option is specified, a default of type 'text' is used. Many of the standard HTML attributes may be passed to this helper.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 옵션이 지정 되지 않으면 기본값 인 'text'가 사용됩니다. 많은 표준 HTML 속성이이 헬퍼로 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c64e1c51fd84c0b0ba2114a085f289eed7e10a9" translate="yes" xml:space="preserve">
          <source>If no action is passed to &lt;code&gt;sendAction&lt;/code&gt; a default name of &quot;action&quot; is assumed.</source>
          <target state="translated">&lt;code&gt;sendAction&lt;/code&gt; 에 조치가 전달되지 않으면 기본 이름 인 &quot;action&quot;이 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="5bbe09e37026f845dea2f9c1907f7201be76503d" translate="yes" xml:space="preserve">
          <source>If no adapter is found, an error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88f9275e7a1a177ee08c395e3338103657495ab" translate="yes" xml:space="preserve">
          <source>If no arguments are passed to &lt;code&gt;create&lt;/code&gt;, it will not set values to the new instance during initialization:</source>
          <target state="translated">&lt;code&gt;create&lt;/code&gt; 인수가 전달 되지 않으면 초기화 중에 새 인스턴스에 값을 설정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="af662b6dbfe67a59bf4fde858ceab67ed36955ac" translate="yes" xml:space="preserve">
          <source>If no explicit controller is defined, Ember will automatically create one.</source>
          <target state="translated">명시 적 컨트롤러가 정의되어 있지 않으면 Ember가 자동으로 컨트롤러를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c3e7d767d9c95bb53db3aa86819f3a40fc223f55" translate="yes" xml:space="preserve">
          <source>If no reload is indicated via the above mentioned ways, then the promise immediately resolves with all the records currently loaded in the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb58977999a5f2d6852c2281d33c67d32f8d6b0" translate="yes" xml:space="preserve">
          <source>If no reload is indicated via the above mentioned ways, then the promise immediately resolves with the cached version in the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cd6415acaefb1ff46dd122c8132a0369ced4fe" translate="yes" xml:space="preserve">
          <source>If no reload is indicated via the abovementioned ways, then the promise immediately resolves with all the records currently loaded in the store.</source>
          <target state="translated">위에서 언급 한 방법으로 다시로드가 표시되지 않으면 약속은 현재 상점에로드 된 모든 레코드로 즉시 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="c8a65cf944c886493cd794ea39bbbb2b618c4896" translate="yes" xml:space="preserve">
          <source>If no reload is indicated via the abovementioned ways, then the promise immediately resolves with the cached version in the store.</source>
          <target state="translated">위에서 언급 한 방법으로 다시로드가 표시되지 않으면 약속은 즉시 상점의 캐시 된 버전으로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="4fa0da2ce48ad3591baf25de0028f84aecdc9582" translate="yes" xml:space="preserve">
          <source>If no run-loop is present, it creates a new one. If a run loop is present it will queue itself to run on the existing run-loops action queue.</source>
          <target state="translated">런 루프가 없으면 새로운 루프를 만듭니다. 실행 루프가있는 경우 기존 실행 루프 조치 큐에서 실행되도록 큐를 대기합니다.</target>
        </trans-unit>
        <trans-unit id="177c6efc809bd894c2f98c0fffec4e8f109b5783" translate="yes" xml:space="preserve">
          <source>If no value is specified, then the default value will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd3479f82325bb4b4799241d66b61b2d7c40fc3" translate="yes" xml:space="preserve">
          <source>If no viable error substates can be found, an error message will be logged.</source>
          <target state="translated">실행 가능한 오류 하위 상태를 찾을 수 없으면 오류 메시지가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="319574056b68eb9f79e192960e35e4b24fd3a625" translate="yes" xml:space="preserve">
          <source>If none of the built-in Ember Data Adapters work for your backend, be sure to check out some of the community maintained Ember Data Adapters. Some good places to look for Ember Data Adapters include:</source>
          <target state="translated">내장 된 Ember Data Adapter 중 어느 것도 백엔드에서 작동하지 않으면 커뮤니티에서 유지 관리하는 Ember Data Adapter 중 일부를 확인하십시오. Ember Data Adapter를 찾는 좋은 곳은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="55ead0e39f3de65e7f03d14bc1db4bfafb834d58" translate="yes" xml:space="preserve">
          <source>If none of the built-in Ember Data Serializers work for your backend, be sure to check out some of the community maintained Ember Data Adapters and Serializers. A good place to search for them is &lt;a href=&quot;http://emberobserver.com/categories/data&quot;&gt;Ember Observer&lt;/a&gt;.</source>
          <target state="translated">내장 된 Ember Data Serializer가 백엔드에서 작동하지 않으면 커뮤니티에서 유지 관리하는 Ember Data Adapter 및 Serializer 중 일부를 확인하십시오. 그들을 검색하기에 좋은 곳은 &lt;a href=&quot;http://emberobserver.com/categories/data&quot;&gt;Ember Observer&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="29366ac91b910057d4962981a9b437b2452b2fe9" translate="yes" xml:space="preserve">
          <source>If not implemented, the store does not inform the adapter of destruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385c8e8dd880920fcdc1ae7385ac7d1b51d9fd69" translate="yes" xml:space="preserve">
          <source>If not manually set a default value will be provided by the framework.</source>
          <target state="translated">수동으로 설정하지 않으면 프레임 워크에서 기본값을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="10af7888776e382b6d940ea2456a5aa0b13dfd98" translate="yes" xml:space="preserve">
          <source>If not manually set a default value will be provided by the framework. Once rendered an element's &lt;code&gt;elementId&lt;/code&gt; is considered immutable and you should never change it. If you need to compute a dynamic value for the &lt;code&gt;elementId&lt;/code&gt;, you should do this when the component or element is being instantiated:</source>
          <target state="translated">수동으로 설정하지 않으면 프레임 워크에서 기본값을 제공합니다. 렌더링 된 요소의 &lt;code&gt;elementId&lt;/code&gt; 는 변경할 수없는 것으로 간주되므로 절대 변경해서는 안됩니다. &lt;code&gt;elementId&lt;/code&gt; 에 대한 동적 값을 계산해야하는 경우 컴포넌트 또는 요소가 인스턴스화 될 때이를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="d4dfe57cd55eceea09fa41283febccc080fc1b27" translate="yes" xml:space="preserve">
          <source>If one of the above is found, the router will immediately transition into that substate (without updating the URL). The &quot;reason&quot; for the error (i.e. the exception thrown or the promise reject value) will be passed to that error state as its &lt;code&gt;model&lt;/code&gt;.</source>
          <target state="translated">위 중 하나가 발견되면 라우터는 URL을 업데이트하지 않고 즉시 해당 하위 상태로 전환합니다. 오류에 대한 &quot;이유&quot;(예 : 발생 된 예외 또는 약속 거부 값)는 해당 오류 상태에 &lt;code&gt;model&lt;/code&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="e0c50aaa48c239e57ccc9645db5f0f57bf065cf4" translate="yes" xml:space="preserve">
          <source>If present, overrides the application's &lt;code&gt;rootElement&lt;/code&gt; property on the instance. This is useful for testing environment, where you might want to append the root view to a fixture area.</source>
          <target state="translated">있는 경우 인스턴스 에서 응용 프로그램의 &lt;code&gt;rootElement&lt;/code&gt; 속성을 재정의합니다 . 이는 조명 환경에 루트 뷰를 추가 할 수있는 테스트 환경에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="0b7f3d6406c8a88c0635c79b1f2f384e707f0588" translate="yes" xml:space="preserve">
          <source>If present, overrides the router's &lt;code&gt;location&lt;/code&gt; property with this value. This is useful for environments where trying to modify the URL would be inappropriate.</source>
          <target state="translated">있는 경우이 값으로 라우터의 &lt;code&gt;location&lt;/code&gt; 속성을 재정의합니다 . URL을 수정하려고 시도하는 것이 부적합한 환경에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a0ba623874d5780a1c7aa2f1902d27026170e1f9" translate="yes" xml:space="preserve">
          <source>If present, render into the given &lt;code&gt;Document&lt;/code&gt; object instead of the global &lt;code&gt;window.document&lt;/code&gt; object.</source>
          <target state="translated">있는 경우 전역 &lt;code&gt;window.document&lt;/code&gt; 객체 대신 지정된 &lt;code&gt;Document&lt;/code&gt; 객체 로 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="a4a5231e55fa0848b40bfcabe5e63e6b334a8dee" translate="yes" xml:space="preserve">
          <source>If singletons are not wanted an optional flag can be provided at lookup.</source>
          <target state="translated">싱글 톤이 필요하지 않은 경우 조회시 선택적 플래그를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55b646c48afc814827adf573fedd759dbabc65f6" translate="yes" xml:space="preserve">
          <source>If someone is connecting to a third-party API, such as a service for payment or mapping, and they need that state across many routes, a &lt;a href=&quot;https://guides.emberjs.com/services/&quot;&gt;Service&lt;/a&gt; might be a good place to make requests. Some common use cases include polling for data and managing websocket connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1534b378c0fb416fb2657b1a7e0210fc727f41f7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&amp;lt;Username&amp;gt;&lt;/code&gt; tag doesn't specify a &lt;code&gt;@localTime&lt;/code&gt; argument, we will see an extra, incomplete text, &lt;code&gt;their local time is&lt;/code&gt;, on the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d589e46725553e1f5ab96cc1bb5be3a933ac7e4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ActionHandler&lt;/code&gt; has its &lt;code&gt;target&lt;/code&gt; property set, actions may bubble to the &lt;code&gt;target&lt;/code&gt;. Bubbling happens when an &lt;code&gt;actionName&lt;/code&gt; can not be found in the &lt;code&gt;ActionHandler&lt;/code&gt;'s &lt;code&gt;actions&lt;/code&gt; hash or if the action target function returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ActionHandler&lt;/code&gt; 에 &lt;code&gt;target&lt;/code&gt; 속성이 설정 되어 있으면 액션이 &lt;code&gt;target&lt;/code&gt; 에 버블 링 될 수 있습니다 . 버블 링 은 &lt;code&gt;ActionHandler&lt;/code&gt; 의 &lt;code&gt;actions&lt;/code&gt; 해시 에서 &lt;code&gt;actionName&lt;/code&gt; 을 찾을 수 없거나 조치 대상 함수가 &lt;code&gt;true&lt;/code&gt; 를 리턴하는 경우 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="772840dee3cf8d0910eb07a26d98e70dcf3faa75" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;articles.overview&lt;/code&gt; route's &lt;code&gt;model&lt;/code&gt; hook returns a promise that rejects (for instance the server returned an error, the user isn't logged in, etc.), an &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#event_error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; event will fire from that route and bubble upward. This &lt;code&gt;error&lt;/code&gt; event can be handled and used to display an error message, redirect to a login page, etc.</source>
          <target state="translated">는 IF &lt;code&gt;articles.overview&lt;/code&gt; 의 경로의 &lt;code&gt;model&lt;/code&gt; 후크 거부 (서버가 오류를 반환 예를 들어, 사용자가 등, 로그인하지 않은)하는 약속을 반환 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#event_error&quot;&gt; &lt;code&gt;error&lt;/code&gt; &lt;/a&gt; 이벤트는 위로 그 길 거품에서 실행됩니다. 이 &lt;code&gt;error&lt;/code&gt; 이벤트를 처리하고 사용하여 오류 메시지를 표시하고 로그인 페이지로 리디렉션하는 등의 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="995088ca795d5632f47f454b5522afbd4faee6e7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;articles.overview&lt;/code&gt; route's &lt;code&gt;model&lt;/code&gt; hook returns a promise that rejects (for instance the server returned an error, the user isn't logged in, etc.), an &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/events#error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; event will fire from that route and bubble upward. This &lt;code&gt;error&lt;/code&gt; event can be handled and used to display an error message, redirect to a login page, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faf2465b2a44cca16ce9f1149b0e06af0a0a3dc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;backgroundReload&lt;/code&gt; option is not present, this method will be called to determine whether a backgroundReload should be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9130af308c0198b4b665ac1a3496ca0cbc9e0f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;isEnabled&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, no class name is added:</source>
          <target state="translated">는 IF &lt;code&gt;isEnabled&lt;/code&gt; 속성이 설정되어 &lt;code&gt;true&lt;/code&gt; , 더 클래스 이름이 추가되지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="ab314ef6ed6ac8901d4df1d10fba4bf0a8964b42" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;loading&lt;/code&gt; handler is not defined at the specific route, the event will continue to bubble above a transition's parent route, providing the &lt;code&gt;application&lt;/code&gt; route the opportunity to manage it.</source>
          <target state="translated">는 IF &lt;code&gt;loading&lt;/code&gt; 핸들러가 특정 경로에서 정의되지 않은 이벤트가 제공하는 전환의 부모 경로 위의 거품에 계속 &lt;code&gt;application&lt;/code&gt; 경로를 그것을 관리 할 수있는 기회를.</target>
        </trans-unit>
        <trans-unit id="62525faef0253ea89ed997a16b4543fcaf8392ae" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;part&lt;/code&gt; getter returns &quot;zip&quot;, this will display the result of &lt;code&gt;this.address.zip&lt;/code&gt;. If it returns &quot;city&quot;, you get &lt;code&gt;this.address.city&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6537a81cb8aa571a7b6f86a8e1d8ee28c339c7" translate="yes" xml:space="preserve">
          <source>If the Inspector cannot detect an Ember application, you will see the following message:</source>
          <target state="translated">인스펙터가 Ember 애플리케이션을 감지 할 수 없으면 다음과 같은 메시지가 나타납니다 :</target>
        </trans-unit>
        <trans-unit id="0c51feccb00ebb8b363b6ad461f79ad0773d2572" translate="yes" xml:space="preserve">
          <source>If the JSON for &lt;code&gt;person&lt;/code&gt; has a key of &lt;code&gt;familyNameOfPerson&lt;/code&gt;, and the desired attribute name is simply &lt;code&gt;familyName&lt;/code&gt;, then create a custom Serializer for the model and override the &lt;code&gt;attrs&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ddcdf494c0799cfdfe52920abaeb3bbcf2a536" translate="yes" xml:space="preserve">
          <source>If the JSON for &lt;code&gt;person&lt;/code&gt; has a key of &lt;code&gt;lastNameOfPerson&lt;/code&gt;, and the desired attribute name is simply &lt;code&gt;lastName&lt;/code&gt;, then create a custom Serializer for the model and override the &lt;code&gt;attrs&lt;/code&gt; property.</source>
          <target state="translated">대한 JSON 경우 &lt;code&gt;person&lt;/code&gt; 의 키가 &lt;code&gt;lastNameOfPerson&lt;/code&gt; 을 하고, 원하는 속성의 이름은 단순히 &lt;code&gt;lastName&lt;/code&gt; , 다음 모델에 대한 사용자 정의 시리얼을 생성하고 오버라이드 (override) &lt;code&gt;attrs&lt;/code&gt; 속성을.</target>
        </trans-unit>
        <trans-unit id="a5a799037ae5dbbf342f27f5111bfd1194142893" translate="yes" xml:space="preserve">
          <source>If the Promises tab is working, but there are Promises you can't find, it's probably because these Promises were created before the Inspector was activated. To detect Promises the moment the app boots, click on the &lt;code&gt;Reload&lt;/code&gt; button below:</source>
          <target state="translated">약속 탭이 작동하지만 찾을 수없는 약속이있는 경우 검사기가 활성화되기 전에 이러한 약속이 생성 되었기 때문일 수 있습니다. 앱이 부팅되는 순간을 약속하려면 아래 &lt;code&gt;Reload&lt;/code&gt; 버튼을 클릭하십시오 .</target>
        </trans-unit>
        <trans-unit id="de1f2a2884be1eb73d9e97c2308ac4d95895d6e2" translate="yes" xml:space="preserve">
          <source>If the adapter rejects or errors the record will need to be saved again once the reason for the error is addressed in order to persist the deleted state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a1045b40f3b0ab66eaf93fc1289e61bccbbab6" translate="yes" xml:space="preserve">
          <source>If the adapter rejects or throws an error the record will enter an error state and the attributes that had attempted to be saved will still be considered dirty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f3f500a3b8991f78eb460dc21a188be6d35d0d" translate="yes" xml:space="preserve">
          <source>If the adapter returns no data for the primary data of the payload, then &lt;code&gt;queryRecord&lt;/code&gt; resolves with &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="translated">어댑터가 페이로드의 기본 데이터에 대한 데이터를 리턴하지 않으면 &lt;code&gt;queryRecord&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7638d1179bf0962cf4d4338f47795f6fc62b8321" translate="yes" xml:space="preserve">
          <source>If the aliased property is &quot;falsey&quot;, for example: &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;code&gt;null&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; or an empty array, the block will not be rendered.</source>
          <target state="translated">앨리어싱 된 속성이 &quot;falsey&quot;인 경우 (예 : &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;&quot;&quot;&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;NaN&lt;/code&gt; 또는 빈 배열) 블록이 렌더링되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41945c6b7d63a4ae10870e50bcd86a398b52e66a" translate="yes" xml:space="preserve">
          <source>If the assimliated promise rejects, then the downstream promise will also reject.</source>
          <target state="translated">일치 된 약속이 거부되면 다운 스트림 약속도 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="152ea127565802f064b38cbb1059bddd02b1d5be" translate="yes" xml:space="preserve">
          <source>If the attribute is null, it won't be rendered:</source>
          <target state="translated">속성이 null 인 경우, 렌더링되지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="b443b259d5099327a0563619861d8040ac92d909" translate="yes" xml:space="preserve">
          <source>If the attributes returned by your server use a different convention you can use the serializer's &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_keyForAttribute&quot;&gt;&lt;code&gt;keyForAttribute()&lt;/code&gt;&lt;/a&gt; method to convert an attribute name in your model to a key in your JSON payload. For example, if your backend returned attributes that are &lt;code&gt;under_scored&lt;/code&gt; instead of &lt;code&gt;dash-cased&lt;/code&gt; you could override the &lt;code&gt;keyForAttribute&lt;/code&gt; method like this.</source>
          <target state="translated">서버에서 반환 한 속성이 다른 규칙을 사용하는 경우 serializer의 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_keyForAttribute&quot;&gt; &lt;code&gt;keyForAttribute()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 모델의 속성 이름을 JSON 페이로드의 키로 변환 할 수 있습니다 . 예를 들어, 백엔드 가 &lt;code&gt;dash-cased&lt;/code&gt; &lt;code&gt;under_scored&lt;/code&gt; 대신 밑줄로 표시된 속성을 반환 한 경우 &lt;code&gt;keyForAttribute&lt;/code&gt; 메서드를 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="79d2ea9f989f3044cc6bde9fbfb11d286ad5aba5" translate="yes" xml:space="preserve">
          <source>If the attributes returned by your server use a different convention you can use the serializer's &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer/methods#keyForAttribute&quot;&gt;&lt;code&gt;keyForAttribute()&lt;/code&gt;&lt;/a&gt; method to convert an attribute name in your model to a key in your JSON payload. For example, if your backend returned attributes that are &lt;code&gt;under_scored&lt;/code&gt; instead of &lt;code&gt;dash-cased&lt;/code&gt; you could override the &lt;code&gt;keyForAttribute&lt;/code&gt; method like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3cbf20c649b02a710475ea390c3c5224873ffa" translate="yes" xml:space="preserve">
          <source>If the backend server returns validation errors after trying to save, they will be available on the &lt;code&gt;errors&lt;/code&gt; property of your model. Here's how you might display the errors from saving a blog post in your template:</source>
          <target state="translated">저장을 시도한 후 백엔드 서버가 유효성 검증 오류를 리턴하면 모델 의 &lt;code&gt;errors&lt;/code&gt; 특성 에서 해당 오류를 사용할 수 있습니다 . 템플릿에 블로그 게시물을 저장하면 오류가 표시되는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="184d20c148a6d327935c020acb2ec7964cadbfc4" translate="yes" xml:space="preserve">
          <source>If the bound property's value is a string, that value will be added as a class name without modification:</source>
          <target state="translated">바인딩 된 속성 값이 문자열 인 경우 해당 값은 수정하지 않고 클래스 이름으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="8564aea58116dae8fa901a19cdab1923b5e3f74c" translate="yes" xml:space="preserve">
          <source>If the cache does not have a &lt;code&gt;link&lt;/code&gt; for the relationship but the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; of related resources are known then &lt;code&gt;findRecord&lt;/code&gt; will be used for each individual related resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479cd5b0e20c28d0b0339e3ca34878f1e5aab9ad" translate="yes" xml:space="preserve">
          <source>If the cache does not have a &lt;code&gt;link&lt;/code&gt; for the relationship then &lt;code&gt;findRecord&lt;/code&gt; will be used if a &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; for the related resource is known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b1da3c92afa4debb6a8f255a279272102f2932" translate="yes" xml:space="preserve">
          <source>If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.</source>
          <target state="translated">다운 스트림 약속이 거부 처리기를 지정하지 않으면 거부 이유가 추가 다운 스트림으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="3a55c943ac2e27c54adb00ff70a7d4161ee5ec6b" translate="yes" xml:space="preserve">
          <source>If the entity referred to by the reference is already loaded, it is present as &lt;code&gt;reference.value&lt;/code&gt;. Otherwise the value returned by this function is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">참조가 참조하는 엔티티가 이미 로딩되어 있으면로서 존재 &lt;code&gt;reference.value&lt;/code&gt; . 그렇지 않으면이 함수가 반환하는 값은 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dda61213c658054d5a095f068b839f66a0b06e03" translate="yes" xml:space="preserve">
          <source>If the feature is &lt;em&gt;disabled&lt;/em&gt;, observers run synchronously and will be invoked as soon as their observed properties update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a417452b0f8a59cb5c9ec10cff0c1a7101af4025" translate="yes" xml:space="preserve">
          <source>If the fulfillment value of a Promise is an Ember object or an array, you can click on that object to open it in the Object Inspector.</source>
          <target state="translated">Promise의 이행 값이 Ember 객체 또는 배열 인 경우 해당 객체를 클릭하여 Object Inspector에서 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c694b108172330a074e555aa2e9bd5c8918d004c" translate="yes" xml:space="preserve">
          <source>If the globally unique IDs for your records should be generated on the client, implement the &lt;code&gt;generateIdForRecord()&lt;/code&gt; method. This method will be invoked each time you create a new record, and the value returned from it will be assigned to the record's &lt;code&gt;primaryKey&lt;/code&gt;.</source>
          <target state="translated">클라이언트에서 레코드의 글로벌 고유 ID를 생성해야하는 경우 &lt;code&gt;generateIdForRecord()&lt;/code&gt; 메소드를 구현하십시오 . 이 메소드는 새 레코드를 작성할 때마다 호출되며 해당 레코드에서 리턴 된 값은 레코드의 &lt;code&gt;primaryKey&lt;/code&gt; 에 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="a207108ddbfa6ad5232c33f8aaeb7bb8065f8d9c" translate="yes" xml:space="preserve">
          <source>If the interactive element would be written another way, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383779be8c706d1e3cb5661b12cdefe94dc7660e" translate="yes" xml:space="preserve">
          <source>If the manyArray holds the result of a &lt;code&gt;store.query()&lt;/code&gt; reload will re-run the original query.</source>
          <target state="translated">manyArray가 store.query &lt;code&gt;store.query()&lt;/code&gt; 의 결과를 보유 하면 원래의 쿼리를 다시 실행합니다.</target>
        </trans-unit>
        <trans-unit id="c00ea8d6f5536c4e1ff522e12217f7fb72a05f5f" translate="yes" xml:space="preserve">
          <source>If the method &lt;code&gt;toStringExtension&lt;/code&gt; is defined, its return value will be included in the output.</source>
          <target state="translated">&lt;code&gt;toStringExtension&lt;/code&gt; 메소드 가 정의되면 리턴 값이 출력에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="22b02d6039b6959806b69bf25a4b1e75eb2891e9" translate="yes" xml:space="preserve">
          <source>If the method does not exist on the parent class, it will throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7edb4ccdf3f1d3931412afe88e591bcf879e9c" translate="yes" xml:space="preserve">
          <source>If the method does not exist on the parent class, it will throw an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e6be66dbb320443a753cdc848ffa43778e78f7" translate="yes" xml:space="preserve">
          <source>If the model &lt;code&gt;hasDirtyAttributes&lt;/code&gt; this function will discard any unsaved changes. If the model &lt;code&gt;isNew&lt;/code&gt; it will be removed from the store.</source>
          <target state="translated">모델에 &lt;code&gt;hasDirtyAttributes&lt;/code&gt; 경우이 함수는 저장되지 않은 변경 사항을 모두 버립니다. 모델이 새 모델 &lt;code&gt;isNew&lt;/code&gt; 경우 상점에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="d202e9a309b6b573fff49d6c00cbae0211d6cadd" translate="yes" xml:space="preserve">
          <source>If the model changes to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5bcbc01172106906b2423deb80779f8b363b9a" translate="yes" xml:space="preserve">
          <source>If the model for the &lt;code&gt;photos&lt;/code&gt; template is a list of three photos, the rendered HTML would look something like this:</source>
          <target state="translated">&lt;code&gt;photos&lt;/code&gt; 템플릿 의 모델 이 3 개의 사진 목록 인 경우 렌더링 된 HTML은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ebd366913abd1903a499f1ba35d5fc1ff62f79f8" translate="yes" xml:space="preserve">
          <source>If the new route has dynamic segments, you need to pass either a &lt;em&gt;model&lt;/em&gt; or an &lt;em&gt;identifier&lt;/em&gt; for each segment. Passing a model will skip the route's &lt;code&gt;model()&lt;/code&gt; hook since the model is already loaded.</source>
          <target state="translated">새 경로에 동적 세그먼트가있는 경우 각 세그먼트 의 &lt;em&gt;모델&lt;/em&gt; 또는 &lt;em&gt;식별자&lt;/em&gt; 를 전달해야합니다 . 모델이 이미로드되었으므로 모델을 전달하면 경로의 &lt;code&gt;model()&lt;/code&gt; 후크 가 생략됩니다 .</target>
        </trans-unit>
        <trans-unit id="9dd105583cff6aa2625e44b568d4b7fb52d7d415" translate="yes" xml:space="preserve">
          <source>If the node function has multiple success parameters, then &lt;code&gt;denodeify&lt;/code&gt; just returns the first one:</source>
          <target state="translated">노드 함수에 여러 성공 매개 변수가있는 경우 &lt;code&gt;denodeify&lt;/code&gt; 는 첫 번째 매개 변수 만 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="31b73428030a615dd13f1445e2cf5ccf80c1babe" translate="yes" xml:space="preserve">
          <source>If the object's class is not defined on an Ember namespace, it will indicate it is a subclass of the registered superclass:</source>
          <target state="translated">객체의 클래스가 Ember 네임 스페이스에 정의되어 있지 않으면 등록 된 수퍼 클래스의 서브 클래스임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="98b3154bddbbb6e036caa371f143a6c81c40436d" translate="yes" xml:space="preserve">
          <source>If the passed object implements the &lt;code&gt;Copyable&lt;/code&gt; interface, then this function will delegate to the object's &lt;code&gt;copy()&lt;/code&gt; method and return the result. See &lt;code&gt;Copyable&lt;/code&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e007da1cf968ea0c777f82e45711da7c7b73cc28" translate="yes" xml:space="preserve">
          <source>If the passed object implements the &lt;code&gt;Ember.Copyable&lt;/code&gt; interface, then this function will delegate to the object's &lt;code&gt;copy()&lt;/code&gt; method and return the result. See &lt;code&gt;Ember.Copyable&lt;/code&gt; for further details.</source>
          <target state="translated">전달 된 객체가 &lt;code&gt;Ember.Copyable&lt;/code&gt; 인터페이스를 구현하면 이 함수는 객체의 &lt;code&gt;copy()&lt;/code&gt; 메서드에 위임 하고 결과를 반환합니다. 자세한 내용은 &lt;code&gt;Ember.Copyable&lt;/code&gt; 을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="9563527c88e87e4b25e2a83f4d0a00e3e9423b57" translate="yes" xml:space="preserve">
          <source>If the passed object is of a type not supported by the receiver, then this method should raise an exception.</source>
          <target state="translated">전달 된 객체가 수신자가 지원하지 않는 유형 인 경우이 메소드는 예외를 발생시켜야합니다.</target>
        </trans-unit>
        <trans-unit id="09efeec4d550f6fc26db2216056c72de8e864277" translate="yes" xml:space="preserve">
          <source>If the promise fulfills, the transition will pick up where it left off and begin resolving the next (child) route's model, pausing if it too is a promise, and so on, until all destination route models have been resolved. The values passed to the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_setupController&quot;&gt;&lt;code&gt;setupController()&lt;/code&gt;&lt;/a&gt; hook for each route will be the fulfilled values from the promises.</source>
          <target state="translated">약속이 이행되면, 전환은 중단 된 위치에서 픽업하여 다음 (자식) 경로의 모델을 해결하기 시작하여 약속이있는 경우 일시 중지하는 등의 방식으로 모든 대상 경로 모델이 해결 될 때까지 계속됩니다. 각 경로에 대해 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_setupController&quot;&gt; &lt;code&gt;setupController()&lt;/code&gt; &lt;/a&gt; 후크에 전달 된 값 은 약속의 이행 된 값입니다.</target>
        </trans-unit>
        <trans-unit id="54630692f9e77abb1aa1d347bed5110b3dfa0cc5" translate="yes" xml:space="preserve">
          <source>If the promise fulfills, the transition will pick up where it left off and begin resolving the next (child) route's model, pausing if it too is a promise, and so on, until all destination route models have been resolved. The values passed to the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#setupController&quot;&gt;&lt;code&gt;setupController()&lt;/code&gt;&lt;/a&gt; hook for each route will be the fulfilled values from the promises.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308655b43223f8a7bd0d8bc77a723ca39a8bc7b1" translate="yes" xml:space="preserve">
          <source>If the proxied promise is rejected this will contain the reason provided.</source>
          <target state="translated">프록시 약속이 거부되면 여기에는 제공된 이유가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f880ce55d49d34f056f851b1bbdf0e075988eb0c" translate="yes" xml:space="preserve">
          <source>If the record is in the dirty state this property will report what kind of change has caused it to move into the dirty state. Possible values are:</source>
          <target state="translated">레코드가 더티 상태 인 경우이 특성은 어떤 종류의 변경으로 인해 더티 상태로 이동했는지보고합니다. 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="06a2600553c7efb30b03c1f03320f2de918b3cea" translate="yes" xml:space="preserve">
          <source>If the record is not yet available, the store will ask the adapter's &lt;code&gt;find&lt;/code&gt; method to find the necessary data. If the record is already present in the store, it depends on the reload behavior &lt;em&gt;when&lt;/em&gt; the returned promise resolves.</source>
          <target state="translated">레코드를 아직 사용할 수없는 경우, 상점은 필요한 데이터를 찾기 &lt;code&gt;find&lt;/code&gt; 어댑터의 find 메소드를 요청합니다 . 레코드가 이미 상점에있는 &lt;em&gt;경우&lt;/em&gt; , 리턴 된 약속이 해결 &lt;em&gt;될 때&lt;/em&gt; 다시로드 동작에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="6d0efb50cd9d767cfbc353966c55c63060936cf7" translate="yes" xml:space="preserve">
          <source>If the records in the relationship are not known when the response is serialized it's also possible to represent the relationship as a URL using the &lt;code&gt;links&lt;/code&gt; key in the response. Ember Data will fetch this URL to resolve the relationship when it is accessed for the first time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcad3100c572bcae24a7d17d3068806c3bb758b" translate="yes" xml:space="preserve">
          <source>If the records in the relationship are not known when the response is serialized its also possible to represent the relationship as a url using the &lt;code&gt;links&lt;/code&gt; key in the response. Ember Data will fetch this url to resolve the relationship when it is accessed for the first time.</source>
          <target state="translated">응답이 직렬화 될 때 관계의 레코드를 알 수없는 경우 응답의 &lt;code&gt;links&lt;/code&gt; 키를 사용하여 관계를 URL로 표시 할 수도 있습니다 . Ember Data는이 URL을 가져와 처음 액세스 할 때 관계를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="f8f78f6c26f50d6080783bc5902d985983266d5c" translate="yes" xml:space="preserve">
          <source>If the rejection value is an &lt;code&gt;Error&lt;/code&gt; object, you can send its stack trace to the console.</source>
          <target state="translated">거부 값이 &lt;code&gt;Error&lt;/code&gt; 객체 인 경우 스택 추적을 콘솔로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38c76dedd3c137a7630250599cab68a32db56629" translate="yes" xml:space="preserve">
          <source>If the request was for a &lt;code&gt;createRecord&lt;/code&gt;&lt;code&gt;updateRecord&lt;/code&gt; or &lt;code&gt;deleteRecord&lt;/code&gt; special rules apply to how this error will affect the state of the store and additional properties on the &lt;code&gt;Error&lt;/code&gt; class may be used. See the documentation for these methods in the &lt;code&gt;MinimumAdapterInterface&lt;/code&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa3d1bc6f1ed30d04ddee5b19a6b30c1fdc2d27" translate="yes" xml:space="preserve">
          <source>If the return value of an &lt;code&gt;attributeBindings&lt;/code&gt; monitored property is a boolean the attribute will be present or absent depending on the value:</source>
          <target state="translated">&lt;code&gt;attributeBindings&lt;/code&gt; 모니터링 된 특성 의 리턴 값이 부울 인 경우 값에 따라 속성이 존재하거나 부재합니다.</target>
        </trans-unit>
        <trans-unit id="972fbc628020d016ab99c5230775b405dc6ee5d9" translate="yes" xml:space="preserve">
          <source>If the route is nested, you can supply a model or an identifier for each dynamic segment.</source>
          <target state="translated">경로가 내포 된 경우 각 동적 세그먼트에 대한 모델 또는 식별자를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="abf70b940f532889b87a7667e8d5c8095a83ef39" translate="yes" xml:space="preserve">
          <source>If the tagName is &lt;code&gt;''&lt;/code&gt;, the view will be tagless, with no outer element. Component properties that depend on the presence of an outer element, such as &lt;code&gt;classNameBindings&lt;/code&gt; and &lt;code&gt;attributeBindings&lt;/code&gt;, do not work with tagless components. Tagless components cannot implement methods to handle events, and have no associated jQuery object to return with &lt;code&gt;$()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe4d96d9b887de98732f91a39ae331699076f78" translate="yes" xml:space="preserve">
          <source>If the types of the arguments are not numbers, they will be converted to numbers and the type of the return value will always be &lt;code&gt;Number&lt;/code&gt;. For example, the max of a list of Date objects will be the highest timestamp as a &lt;code&gt;Number&lt;/code&gt;. This behavior is consistent with &lt;code&gt;Math.max&lt;/code&gt;.</source>
          <target state="translated">인수의 유형이 숫자가 아닌 경우 숫자로 변환되고 리턴 값의 유형은 항상 &lt;code&gt;Number&lt;/code&gt; 입니다. 예를 들어 Date 객체 목록의 최대 값은 &lt;code&gt;Number&lt;/code&gt; 로 가장 큰 타임 스탬프 입니다. 이 동작은 &lt;code&gt;Math.max&lt;/code&gt; 와 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="555814d9be41aaf2ec2a83e221fcf638f4305f3e" translate="yes" xml:space="preserve">
          <source>If the types of the arguments are not numbers, they will be converted to numbers and the type of the return value will always be &lt;code&gt;Number&lt;/code&gt;. For example, the min of a list of Date objects will be the lowest timestamp as a &lt;code&gt;Number&lt;/code&gt;. This behavior is consistent with &lt;code&gt;Math.min&lt;/code&gt;.</source>
          <target state="translated">인수의 유형이 숫자가 아닌 경우 숫자로 변환되고 리턴 값의 유형은 항상 &lt;code&gt;Number&lt;/code&gt; 입니다. 예를 들어 Date 객체 목록의 최소값은 &lt;code&gt;Number&lt;/code&gt; 로 가장 낮은 타임 스탬프 입니다. 이 동작은 &lt;code&gt;Math.min&lt;/code&gt; 과 일치 합니다 .</target>
        </trans-unit>
        <trans-unit id="2694df4de2809d30bd370625a56d890f277f6427" translate="yes" xml:space="preserve">
          <source>If the types of the two objects are different precedence occurs in the following order, with types earlier in the list considered &lt;code&gt;&amp;lt;&lt;/code&gt; types later in the list:</source>
          <target state="translated">두 개체의 유형이 다른 경우 우선 순위가 다음 순서로 발생하며, 목록의 이전 유형이 목록에서 &lt;code&gt;&amp;lt;&lt;/code&gt; 유형으로 간주 됩니다.</target>
        </trans-unit>
        <trans-unit id="ce2405640919d1373253f51ee337515a33b2c957" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/articles&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;, so the articles won't be filtered.</source>
          <target state="translated">로 이동했을 경우에 사용자 &lt;code&gt;/articles&lt;/code&gt; , &lt;code&gt;category&lt;/code&gt; 것 &lt;code&gt;null&lt;/code&gt; 문서 여과되지 않도록.</target>
        </trans-unit>
        <trans-unit id="279d9a5b2ba8cd08cea3db56a68648236e5cca17" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/articles?category=recent&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt; will be set to &lt;code&gt;&quot;recent&quot;&lt;/code&gt;, so articles will be filtered.</source>
          <target state="translated">사용자가 &lt;code&gt;/articles?category=recent&lt;/code&gt; 하면 &lt;code&gt;category&lt;/code&gt; 가 &lt;code&gt;&quot;recent&quot;&lt;/code&gt; 로 설정 되어 기사가 필터링됩니다.</target>
        </trans-unit>
        <trans-unit id="02e95e4157d57cfac7a244dda112f646686cb9ba" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/post/5&lt;/code&gt;, the route will then have the &lt;code&gt;post_id&lt;/code&gt; of &lt;code&gt;5&lt;/code&gt; to use to load the correct post. Ember follows the convention of &lt;code&gt;:model-name_id&lt;/code&gt; for two reasons. The first reason is that Routes know how to fetch the right model by default, if you follow the convention. The second is that &lt;code&gt;params&lt;/code&gt; is an object, and can only have one value associated with a key. To put it in code, the following will &lt;em&gt;not&lt;/em&gt; work properly:</source>
          <target state="translated">사용자가 &lt;code&gt;/post/5&lt;/code&gt; 로 이동 하면 경로에 &lt;code&gt;post_id&lt;/code&gt; 가 &lt;code&gt;5&lt;/code&gt; 로 설정되어 올바른 게시물을로드합니다. Ember 는 두 가지 이유로 &lt;code&gt;:model-name_id&lt;/code&gt; 규칙을 따릅니다 . 첫 번째 이유는 규칙을 따르는 경우 Routes가 기본적으로 올바른 모델을 가져 오는 방법을 알고 있기 때문입니다. 두 번째는 &lt;code&gt;params&lt;/code&gt; 가 객체이며 키와 관련된 하나의 값만 가질 수 있다는 것입니다. 코드에 넣으려면 다음이 &lt;em&gt;제대로&lt;/em&gt; 작동하지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="c3a31aae1d637c261ba9fe34ad046f6866aecc72" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/posts&lt;/code&gt;, the current route will be &lt;code&gt;posts.index&lt;/code&gt;, and the &lt;code&gt;posts/index&lt;/code&gt; template will be rendered into the &lt;code&gt;{{outlet}}&lt;/code&gt; in the &lt;code&gt;posts&lt;/code&gt; template.</source>
          <target state="translated">사용자에게 이동했을 경우 &lt;code&gt;/posts&lt;/code&gt; , 전류 경로가 될 것이다 &lt;code&gt;posts.index&lt;/code&gt; 및 &lt;code&gt;posts/index&lt;/code&gt; 템플릿은로 표현 될 것이다 &lt;code&gt;{{outlet}}&lt;/code&gt; 에서 &lt;code&gt;posts&lt;/code&gt; 템플릿.</target>
        </trans-unit>
        <trans-unit id="fdf8d6746bfe9fd95040fa57bf9e3bec00f81028" translate="yes" xml:space="preserve">
          <source>If the user then navigates to &lt;code&gt;/posts/favorites&lt;/code&gt;, Ember will replace the &lt;code&gt;{{outlet}}&lt;/code&gt; in the &lt;code&gt;posts&lt;/code&gt; template with the &lt;code&gt;posts/favorites&lt;/code&gt; template.</source>
          <target state="translated">사용자가 &lt;code&gt;/posts/favorites&lt;/code&gt; 로 이동하면 Ember는 &lt;code&gt;posts&lt;/code&gt; 템플릿 의 &lt;code&gt;{{outlet}}&lt;/code&gt; 을 &lt;code&gt;posts/favorites&lt;/code&gt; 템플릿으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="9d2d06cf9deeba233a6d61e0e5f3da09de509c5e" translate="yes" xml:space="preserve">
          <source>If the value changes, Ember will automatically update the element's property for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f4c035dd9f3213d6018c14a9b7020020fcff15" translate="yes" xml:space="preserve">
          <source>If the value is an object with a &lt;code&gt;size&lt;/code&gt; property of type number, it is used to check emptiness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893b25d26ac630e735aa5ea13aaa149fa275cc33" translate="yes" xml:space="preserve">
          <source>If the value of a class name binding returns a boolean the property name itself will be used as the class name if the property is true. The class name will not be added if the value is &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">클래스 이름 바인딩의 값이 부울을 리턴하면 특성이 true 인 경우 특성 이름 자체가 클래스 이름으로 사용됩니다. 값이 &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 경우 클래스 이름이 추가 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="87ad15db75aac594f2e6e7fd0eeffff25b4cbbb0" translate="yes" xml:space="preserve">
          <source>If the value of a property monitored by &lt;code&gt;attributeBindings&lt;/code&gt; is a boolean, the attribute will be present or absent depending on the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87decebdf525330b6ee877826a40a40335518aa3" translate="yes" xml:space="preserve">
          <source>If the value of the property is a Boolean, the attribute is treated as an HTML Boolean attribute. It will be present if the property is &lt;code&gt;true&lt;/code&gt; and omitted if the property is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">속성 값이 부울 인 경우 특성이 HTML 부울 특성으로 처리됩니다. 속성이 &lt;code&gt;true&lt;/code&gt; 이면 존재하고 속성이 &lt;code&gt;false&lt;/code&gt; 이면 생략됩니다 .</target>
        </trans-unit>
        <trans-unit id="241dca8b9f537c0fa376af717f72e3c257766c10" translate="yes" xml:space="preserve">
          <source>If the value of the property is a Boolean, the name of that property is added as a dasherized class name.</source>
          <target state="translated">속성 값이 부울 인 경우 해당 속성의 이름이 대시 클래스 이름으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="bdd8566ac8c1565ccde6d28b8a4e1e6d3395a910" translate="yes" xml:space="preserve">
          <source>If the various &lt;code&gt;beforeModel&lt;/code&gt;/&lt;code&gt;model&lt;/code&gt;/&lt;code&gt;afterModel&lt;/code&gt; hooks don't immediately resolve, a &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#event_error&quot;&gt;&lt;code&gt;loading&lt;/code&gt;&lt;/a&gt; event will be fired on that route.</source>
          <target state="translated">다양한 &lt;code&gt;beforeModel&lt;/code&gt; / &lt;code&gt;model&lt;/code&gt; / &lt;code&gt;afterModel&lt;/code&gt; 후크가 즉시 해결되지 않으면 해당 경로에서 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#event_error&quot;&gt; &lt;code&gt;loading&lt;/code&gt; &lt;/a&gt; 이벤트가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="c2e4666654b9c1a3ac255e21bc291056e36bce46" translate="yes" xml:space="preserve">
          <source>If the various &lt;code&gt;beforeModel&lt;/code&gt;/&lt;code&gt;model&lt;/code&gt;/&lt;code&gt;afterModel&lt;/code&gt; hooks don't immediately resolve, a &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/events#loading&quot;&gt;&lt;code&gt;loading&lt;/code&gt;&lt;/a&gt; event will be fired on that route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2dc83a6113275844a6385404e0dff7a0770819" translate="yes" xml:space="preserve">
          <source>If there is a bubbling browser event that Ember does not listen for by default, you can specify custom events and their corresponding view method names by setting the application's &lt;code&gt;customEvents&lt;/code&gt; property:</source>
          <target state="translated">Ember가 기본적으로 수신 대기하지 않는 버블 링 브라우저 이벤트가있는 경우 애플리케이션의 &lt;code&gt;customEvents&lt;/code&gt; 특성 을 설정하여 사용자 정의 이벤트 및 해당보기 메소드 이름을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="51fa00b3c379843b741d583f75db12e57e485f0b" translate="yes" xml:space="preserve">
          <source>If there is any setup required before routing begins, you can implement a &lt;code&gt;ready()&lt;/code&gt; method on your app that will be invoked immediately before routing begins.</source>
          <target state="translated">라우팅이 시작되기 전에 설정이 필요한 경우 앱에서 라우팅이 시작되기 직전에 호출 되는 &lt;code&gt;ready()&lt;/code&gt; 메서드를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="39919c65a7e351de94b6d2929934792f839aabb4" translate="yes" xml:space="preserve">
          <source>If there were several facts about a person, the &lt;code&gt;{{get}}&lt;/code&gt; helper can dynamically pick one:</source>
          <target state="translated">한 사람에 대해 몇 가지 사실이 있다면 &lt;code&gt;{{get}}&lt;/code&gt; 도우미는 다음 중 하나를 동적으로 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="040b9c243be042545732fd6f0fed8b432ffc6c11" translate="yes" xml:space="preserve">
          <source>If these attributes are set to a quoted string, their values will be set directly on the element, as in the previous example. However, when left unquoted, these values will be bound to a property on the template's current rendering context. For example:</source>
          <target state="translated">이러한 속성이 따옴표로 묶인 문자열로 설정되면 이전 예제와 같이 해당 값이 요소에 직접 설정됩니다. 그러나 인용 부호가없는 경우이 값은 템플릿의 현재 렌더링 컨텍스트의 속성에 바인딩됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8377e75793b9a6162245bf517b53edfa881f52e9" translate="yes" xml:space="preserve">
          <source>If this feature is enabled in an application with existing template-only components, the removal of the wrapping &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will happen to all uses of those template-only components. This can impact style and logic in a breaking manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3d0ffc6cf8e15d223ef4e84caef5ae9e96c60b" translate="yes" xml:space="preserve">
          <source>If this method is overridden, &lt;code&gt;super&lt;/code&gt; must be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851c0c99f7d099405eb7957af81bb2f64339fdae" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; the store will re-fetch a record from the adapter.</source>
          <target state="translated">이 메소드가 &lt;code&gt;true&lt;/code&gt; 를 리턴 하면 상점은 어댑터에서 레코드를 다시 페치합니다.</target>
        </trans-unit>
        <trans-unit id="d324e3672ef44f6d93fce83bbca4610707dcd5bf" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; the store will re-fetch all records from the adapter.</source>
          <target state="translated">이 메소드가 &lt;code&gt;true&lt;/code&gt; 를 리턴 하면 상점은 어댑터에서 모든 레코드를 다시 페치합니다.</target>
        </trans-unit>
        <trans-unit id="75cc3ace761559e8854e4c7f25c8b37d7a0d1e85" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt;, the store will re-fetch a record from the adapter. If this method returns &lt;code&gt;false&lt;/code&gt;, the store will resolve immediately using the cached record.</source>
          <target state="translated">이 메소드가 &lt;code&gt;true&lt;/code&gt; 를 리턴 하면 저장소는 어댑터에서 레코드를 다시 가져옵니다. 이 메소드가 &lt;code&gt;false&lt;/code&gt; 를 리턴 하면 스토어는 캐시 된 레코드를 사용하여 즉시 해결합니다.</target>
        </trans-unit>
        <trans-unit id="8a94ecc56dd16cd7370ebc544f5bba8000b8d23a" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt;, the store will re-fetch all records from the adapter. If this method returns &lt;code&gt;false&lt;/code&gt;, the store will resolve immediately using the cached records.</source>
          <target state="translated">이 메소드가 &lt;code&gt;true&lt;/code&gt; 를 리턴 하면 저장소는 어댑터에서 모든 레코드를 다시 페치합니다. 이 메소드가 &lt;code&gt;false&lt;/code&gt; 를 리턴 하면 상점은 캐시 된 레코드를 사용하여 즉시 해결합니다.</target>
        </trans-unit>
        <trans-unit id="7fe1de714f566113f9e1095029cd1a55fa8e743b" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;deleted&lt;/code&gt; state and has been marked for deletion. When &lt;code&gt;isDeleted&lt;/code&gt; is true and &lt;code&gt;hasDirtyAttributes&lt;/code&gt; is true, the record is deleted locally but the deletion was not yet persisted. When &lt;code&gt;isSaving&lt;/code&gt; is true, the change is in-flight. When both &lt;code&gt;hasDirtyAttributes&lt;/code&gt; and &lt;code&gt;isSaving&lt;/code&gt; are false, the change has persisted.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;deleted&lt;/code&gt; 상태이며 삭제 표시되었습니다. 시 &lt;code&gt;isDeleted&lt;/code&gt; 사실이고 &lt;code&gt;hasDirtyAttributes&lt;/code&gt; 이 사실 레코드가 로컬로 삭제되지만 삭제는 아직 지속되지 않았다. 때 &lt;code&gt;isSaving&lt;/code&gt; 는 사실, 변화는 기내이다. 두 경우 &lt;code&gt;hasDirtyAttributes&lt;/code&gt; 및 &lt;code&gt;isSaving&lt;/code&gt; 은 거짓, 변화는 지속하고있다.</target>
        </trans-unit>
        <trans-unit id="83291299de1e11fbab47209155b14ee2ab32cca9" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;dirty&lt;/code&gt; state. The record has local changes that have not yet been saved by the adapter. This includes records that have been created (but not yet saved) or deleted.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;dirty&lt;/code&gt; 상태입니다. 레코드에 아직 어댑터가 저장하지 않은 로컬 변경 사항이 있습니다. 여기에는 작성되었지만 아직 저장되지 않은 레코드가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c836c4d37d292fa086a390166fb0151de2ecd304" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;empty&lt;/code&gt; state. Empty is the first state all records enter after they have been created. Most records created by the store will quickly transition to the &lt;code&gt;loading&lt;/code&gt; state if data needs to be fetched from the server or the &lt;code&gt;created&lt;/code&gt; state if the record is created on the client. A record can also enter the empty state if the adapter is unable to locate the record.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;empty&lt;/code&gt; 상태입니다. 비어 있음은 모든 레코드가 작성된 후 처음 입력되는 상태입니다. 상점에서 작성된 대부분의 레코드 는 서버에서 데이터를 가져와야하는 경우 &lt;code&gt;loading&lt;/code&gt; 상태로 빠르게 전환 되거나 클라이언트에서 레코드가 작성된 경우 &lt;code&gt;created&lt;/code&gt; 상태로 전환됩니다. 어댑터가 레코드를 찾을 수없는 경우 레코드가 비어있는 상태가 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fdebdb26297a3d7c706023578d53a29fbab68e1" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;loaded&lt;/code&gt; state. A record enters this state when its data is populated. Most of a record's lifecycle is spent inside substates of the &lt;code&gt;loaded&lt;/code&gt; state.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;loaded&lt;/code&gt; 상태입니다. 데이터가 채워지면 레코드가이 상태가됩니다. 레코드 수명주기의 대부분은 &lt;code&gt;loaded&lt;/code&gt; 상태의 하위 상태 내에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7851a0f9c463d6001a39d2718b4aa90dc349f25f" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;loading&lt;/code&gt; state. A record enters this state when the store asks the adapter for its data. It remains in this state until the adapter provides the requested data.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;loading&lt;/code&gt; 상태입니다. 상점이 어댑터에 데이터를 요청할 때 레코드가이 상태로 들어갑니다. 어댑터가 요청 된 데이터를 제공 할 때까지이 상태를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="e7699a766f7c89c2f92ac81ed83cc84f4e13d238" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;new&lt;/code&gt; state. A record will be in the &lt;code&gt;new&lt;/code&gt; state when it has been created on the client and the adapter has not yet report that it was successfully saved.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;new&lt;/code&gt; 상태입니다. 클라이언트 에서 레코드가 작성되고 어댑터가 레코드 가 성공적으로 저장되었다고보고하지 않으면 레코드가 &lt;code&gt;new&lt;/code&gt; 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="9a4ba5baeab6a21d7653a1dfed3d9b1e76a22ca9" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;saving&lt;/code&gt; state. A record enters the saving state when &lt;code&gt;save&lt;/code&gt; is called, but the adapter has not yet acknowledged that the changes have been persisted to the backend.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;saving&lt;/code&gt; 상태입니다. &lt;code&gt;save&lt;/code&gt; 이 호출 될 때 레코드가 저장 상태로 들어가 지만 어댑터가 변경 사항이 백엔드에 지속되었음을 아직 인식하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="a1fb590446fa7f5b09e0e68845c464750d5c8c3e" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;valid&lt;/code&gt; state.</source>
          <target state="translated">이 특성이 &lt;code&gt;true&lt;/code&gt; 이면 레코드가 &lt;code&gt;valid&lt;/code&gt; 상태입니다.</target>
        </trans-unit>
        <trans-unit id="8730cc7fae55b6eae94385c182c0a926a1323610" translate="yes" xml:space="preserve">
          <source>If true, a deep copy of the object is made.</source>
          <target state="translated">참이면 객체의 깊은 사본이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="f0a1e3dc23a22d99d9d87a7ff13bd41d911a9660" translate="yes" xml:space="preserve">
          <source>If users do want to autotrack some values used during construction, they can either create the instance of the helper in &lt;code&gt;runEffect&lt;/code&gt; or &lt;code&gt;getValue&lt;/code&gt;, or they can use the &lt;code&gt;cache&lt;/code&gt; API to autotrack the &lt;code&gt;createHelper&lt;/code&gt; hook themselves. This provides maximum flexibility and expressiveness to manager authors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da29f09761179fad74ec04924a0228f1feedec60" translate="yes" xml:space="preserve">
          <source>If we are currently in the &lt;code&gt;uncommitted&lt;/code&gt; state, calling &lt;code&gt;transitionTo('inFlight')&lt;/code&gt; would transition to the &lt;code&gt;created.inFlight&lt;/code&gt; state, while calling &lt;code&gt;transitionTo('updated.inFlight')&lt;/code&gt; would transition to the &lt;code&gt;updated.inFlight&lt;/code&gt; state.</source>
          <target state="translated">우리가 현재있는 경우 &lt;code&gt;uncommitted&lt;/code&gt; 호출 상태 &lt;code&gt;transitionTo('inFlight')&lt;/code&gt; 받는 전환 할 &lt;code&gt;created.inFlight&lt;/code&gt; 의 호출하는 동안, 상태 &lt;code&gt;transitionTo('updated.inFlight')&lt;/code&gt; 로 전환 할 &lt;code&gt;updated.inFlight&lt;/code&gt; 의 상태입니다.</target>
        </trans-unit>
        <trans-unit id="d8e2cb1133571d11997b4f71e1fd981031eac0f8" translate="yes" xml:space="preserve">
          <source>If we change the todo's &lt;code&gt;isDone&lt;/code&gt; property, the &lt;code&gt;incomplete&lt;/code&gt; property is updated automatically:</source>
          <target state="translated">todo의 &lt;code&gt;isDone&lt;/code&gt; 속성 을 변경하면 &lt;code&gt;incomplete&lt;/code&gt; 속성이 자동으로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="03a796f4f5221fe61c643f55be75589fd32481e4" translate="yes" xml:space="preserve">
          <source>If we execute the following code without the run loop:</source>
          <target state="translated">실행 루프없이 다음 코드를 실행하면 :</target>
        </trans-unit>
        <trans-unit id="45c08b26c843bbbb1271caf5baaac10e3f19f5bf" translate="yes" xml:space="preserve">
          <source>If we had a more detailed message, though, we could use the block to pass it to the dialog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc313233c2f64df01525eee3945f09f7a71fff7f" translate="yes" xml:space="preserve">
          <source>If we navigate to &lt;a href=&quot;http://localhost:4200&quot;&gt;&lt;code&gt;http://localhost:4200&lt;/code&gt;&lt;/a&gt;, we'll see the default welcome screen. When we edit the &lt;code&gt;app/templates/application.hbs&lt;/code&gt; file, we'll replace that content with our own.</source>
          <target state="translated">&lt;a href=&quot;http://localhost:4200&quot;&gt; &lt;code&gt;http://localhost:4200&lt;/code&gt; 으로&lt;/a&gt; 이동 하면 기본 시작 화면이 표시됩니다. &lt;code&gt;app/templates/application.hbs&lt;/code&gt; 파일 을 편집하면 해당 컨텐츠를 자체 컨텐츠로 대체합니다.</target>
        </trans-unit>
        <trans-unit id="e3567eee617ca22beb4de32fb0433223de4f9a43" translate="yes" xml:space="preserve">
          <source>If we open &lt;code&gt;/app/router.js&lt;/code&gt;, we'll see a new line of code for the &lt;strong&gt;about&lt;/strong&gt; route, calling &lt;code&gt;this.route('about')&lt;/code&gt; in the &lt;code&gt;Router.map&lt;/code&gt; function. That new line of code tells the Ember router to run our &lt;code&gt;/app/routes/about.js&lt;/code&gt; file when a visitor navigates to &lt;code&gt;/about&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/app/router.js&lt;/code&gt; 를 열면 about.route &lt;code&gt;this.route('about')&lt;/code&gt; 을 &lt;code&gt;Router.map&lt;/code&gt; 함수 에서 호출 하여 &lt;strong&gt;about&lt;/strong&gt; 경로에 대한 새로운 코드 줄을 볼 수 있습니다. 이 새로운 코드 줄은 방문자가 &lt;code&gt;/about&lt;/code&gt; 을 탐색 할 때 Ember 라우터가 &lt;code&gt;/app/routes/about.js&lt;/code&gt; 파일 을 실행하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="a6511b4768aefaf504aaf927b33d7a13c2ab8507" translate="yes" xml:space="preserve">
          <source>If we redirect to &lt;code&gt;posts.post&lt;/code&gt; in the &lt;code&gt;afterModel&lt;/code&gt; hook, &lt;code&gt;afterModel&lt;/code&gt; essentially invalidates the current attempt to enter this route. So the &lt;code&gt;posts&lt;/code&gt; route's &lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, and &lt;code&gt;afterModel&lt;/code&gt; hooks will fire again within the new, redirected transition. This is inefficient, since they just fired before the redirect.</source>
          <target state="translated">&lt;code&gt;afterModel&lt;/code&gt; 후크에서 &lt;code&gt;afterModel&lt;/code&gt; 리디렉션하면 &lt;code&gt;posts.post&lt;/code&gt; 은 본질적으로이 경로에 들어 가려는 현재 시도를 무효화합니다. 따라서 &lt;code&gt;posts&lt;/code&gt; 경로의 &lt;code&gt;beforeModel&lt;/code&gt; , &lt;code&gt;model&lt;/code&gt; 및 &lt;code&gt;afterModel&lt;/code&gt; 후크는 새로운 리디렉션 전환 내에서 다시 시작됩니다. 리디렉션 전에 방금 시작 되었기 때문에 비효율적입니다.</target>
        </trans-unit>
        <trans-unit id="d38726979701cf2e7eb64ee3eacbce4a4f16ae05" translate="yes" xml:space="preserve">
          <source>If we tried to use the component like this:</source>
          <target state="translated">다음과 같이 컴포넌트를 사용하려고 시도한 경우 :</target>
        </trans-unit>
        <trans-unit id="e19c29ef5e1720bd4ab43b1669e74971775233ff" translate="yes" xml:space="preserve">
          <source>If we visit &lt;code&gt;/turing/maths?memberQp=member&amp;amp;interestQp=interest&lt;/code&gt; the model for the &lt;code&gt;member.interest&lt;/code&gt; route is a hash with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616062ec77e5fa290a52c7d817433b031fea6ac5" translate="yes" xml:space="preserve">
          <source>If we visit &lt;code&gt;/turing/maths?memberQp=member&amp;amp;interestQp=interest&lt;/code&gt; the model for the &lt;code&gt;member.interest&lt;/code&gt; route is hash with:</source>
          <target state="translated">우리가 방문하면 &lt;code&gt;/turing/maths?memberQp=member&amp;amp;interestQp=interest&lt;/code&gt; 의 모델 &lt;code&gt;member.interest&lt;/code&gt; 경로는 해시 함께 :</target>
        </trans-unit>
        <trans-unit id="c354573f1b6355c1ffef8cf030e75c388b88e508" translate="yes" xml:space="preserve">
          <source>If you add the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt;&lt;code&gt;{{action}}&lt;/code&gt;&lt;/a&gt; helper to any HTML DOM element, when a user clicks the element, the named event will be sent to the template's corresponding component or controller.</source>
          <target state="translated">HTML DOM 요소에 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt; &lt;code&gt;{{action}}&lt;/code&gt; &lt;/a&gt; 도우미를 추가하면 사용자가 요소를 클릭하면 명명 된 이벤트가 템플릿의 해당 구성 요소 또는 컨트롤러로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="6cb6960c260ff4759523f8e75a8ce68a4dc45f3d" translate="yes" xml:space="preserve">
          <source>If you always have to reload your application after you open the Inspector, that may mean the application's booted state is corrupt. This happens if you call &lt;code&gt;advanceReadiness&lt;/code&gt; or &lt;code&gt;deferReadiness&lt;/code&gt; after the application has already booted.</source>
          <target state="translated">인스펙터를 연 후 항상 애플리케이션을 다시로드해야하는 경우 애플리케이션의 부팅 상태가 손상되었을 수 있습니다. 응용 프로그램이 이미 부팅 된 후 &lt;code&gt;advanceReadiness&lt;/code&gt; 또는 &lt;code&gt;deferReadiness&lt;/code&gt; 를 호출하면이 문제가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="94e40cf1340279ec89f7e933c12cb232801e5b36" translate="yes" xml:space="preserve">
          <source>If you are considering splitting up your application into engines just to reduce the amount of data that needs to be initially downloaded and increase the performance, Engines are not the right solution. Please check out the section on tree shaking and code splitting in projects like &lt;a href=&quot;https://github.com/embroider-build/embroider&quot;&gt;Embroider&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f554ff7ef57e30c46e78bde0db99f982cf334c7" translate="yes" xml:space="preserve">
          <source>If you are having trouble getting a model's data to show up in the template, here are some tips:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5110df871ea94b1b5544ea59e71ed727dd204594" translate="yes" xml:space="preserve">
          <source>If you are having trouble getting this running, other Ember developers would be happy to help! Visit &lt;a href=&quot;https://emberjs.com/community/&quot;&gt; The Ember Community Page&lt;/a&gt; to join chat groups or forums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fc04a51830315edd3d40cb31b0b172a3a6bc28" translate="yes" xml:space="preserve">
          <source>If you are implementing an object and want to support this API, just include this mixin in your class and implement the required methods. In your unit tests, be sure to apply the Ember.MutableEnumerableTests to your object.</source>
          <target state="translated">객체를 구현하고이 API를 지원하려면 클래스에이 믹스 인을 포함시키고 필요한 메소드를 구현하십시오. 단위 테스트에서 Ember.MutableEnumerableTests를 객체에 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="5aec0e791f2e470122fb95fd2d7f58a9fd83671d" translate="yes" xml:space="preserve">
          <source>If you are implementing an object that supports &lt;code&gt;Ember.Array&lt;/code&gt;, call this method just after the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</source>
          <target state="translated">&lt;code&gt;Ember.Array&lt;/code&gt; 를 지원하는 객체를 구현하는 경우 배열 내용이 변경된 직후에이 메서드를 호출하여 관찰자에게 알리고 관련 속성을 무효화하십시오. 변화량의 델타뿐만 아니라 변화의 시작 지수를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="a0a65fa4c61541a69d6463b78fcb7b7827736c7f" translate="yes" xml:space="preserve">
          <source>If you are implementing an object that supports &lt;code&gt;Ember.Array&lt;/code&gt;, call this method just before the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</source>
          <target state="translated">&lt;code&gt;Ember.Array&lt;/code&gt; 를 지원하는 객체를 구현하는 경우 배열 내용이 변경되기 직전에이 메서드를 호출하여 관찰자에게 알리고 관련 속성을 무효화하십시오. 변화량의 델타뿐만 아니라 변화의 시작 지수를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="1d0874c3278e35f07428b97e10bff3c1ca0e5bb9" translate="yes" xml:space="preserve">
          <source>If you are implementing an object that supports &lt;code&gt;EmberArray&lt;/code&gt;, call this method just after the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ba0aa8d1f4e729d51c4d4c780e264f4fe69366" translate="yes" xml:space="preserve">
          <source>If you are implementing an object that supports &lt;code&gt;EmberArray&lt;/code&gt;, call this method just before the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d17f81c61e1cc34e0af5f05548440c43b1537a3" translate="yes" xml:space="preserve">
          <source>If you are mixing native and classic class definitions, then class fields from a parent class can override class properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bb949fd3198381a144f6cde6e4157c5d85ff18" translate="yes" xml:space="preserve">
          <source>If you are subclassing a framework class, like &lt;code&gt;Ember.Component&lt;/code&gt;, and you override the &lt;code&gt;init()&lt;/code&gt; method, make sure you call &lt;code&gt;this._super(...arguments)&lt;/code&gt;! If you don't, a parent class may not have an opportunity to do important setup work, and you'll see strange behavior in your application.</source>
          <target state="translated">&lt;code&gt;Ember.Component&lt;/code&gt; 와 같은 프레임 워크 클래스를 서브 클래 싱 하고 &lt;code&gt;init()&lt;/code&gt; 메서드 를 재정의하는 경우 &lt;code&gt;this._super(...arguments)&lt;/code&gt; 를 호출해야합니다 ! 그렇지 않으면 부모 클래스에서 중요한 설정 작업을 수행 할 기회가 없을 수 있으며 응용 프로그램에 이상한 동작이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="9b080b070335ebd39aa6721395984f3ae13b2527" translate="yes" xml:space="preserve">
          <source>If you are updating a classic component to use angle bracket syntax, you can also overwrite the parameter array with a named argument instead. For instance, if &lt;code&gt;my-greeting&lt;/code&gt; had the following implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542d372672fd8b9690caaaae61face58c8607fa5" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;links&lt;/code&gt; with sync relationships, you have to use &lt;code&gt;ref.reload&lt;/code&gt; to fetch the resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b3c08a9e261ed7e51cb9cfbaf14505b3b08c92" translate="yes" xml:space="preserve">
          <source>If you are using Ember CLI and have source maps enabled, you can see a list of sources for each deprecation. If you are using Chrome or Firefox, clicking on the source opens the sources panel and takes you to the code that caused the deprecation message to be displayed.</source>
          <target state="translated">Ember CLI를 사용 중이고 소스 맵이 사용 가능한 경우 각 지원 중단에 대한 소스 목록을 볼 수 있습니다. Chrome 또는 Firefox를 사용하는 경우 소스를 클릭하면 소스 패널이 열리고 사용 중단 메시지가 표시되는 코드가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="2085317bc4faea6a4de712b341bfc17cfdd40d9b" translate="yes" xml:space="preserve">
          <source>If you are using Ember Data, use the &lt;a href=&quot;https://guides.emberjs.com/ember-inspector/&quot;&gt;Ember Inspector&lt;/a&gt; browser plugin to explore the View Tree/Model and Data sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc00002ff5ace41bd5218064ecb9b255c697d38" translate="yes" xml:space="preserve">
          <source>If you are using a browser other than Chrome or Firefox, you can use the bookmarklet option to use the Inspector.</source>
          <target state="translated">Chrome 또는 Firefox 이외의 브라우저를 사용하는 경우 bookmarklet 옵션을 사용하여 Inspector를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0ca8c7d0cb99901d0bdbdf2b1526781e6260804" translate="yes" xml:space="preserve">
          <source>If you are using a screen reader while you go through the Guides, we recommend using Firefox and NVDA or Safari and VoiceOver for the best experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02db993349ec94d69d26823994ef170bdefc244" translate="yes" xml:space="preserve">
          <source>If you are using an adapter that supports JSON API, such as Ember's default &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt;, you can easily add the &lt;code&gt;include&lt;/code&gt; parameter to the server requests created by the &lt;code&gt;findRecord()&lt;/code&gt;, &lt;code&gt;findAll()&lt;/code&gt;, &lt;code&gt;query()&lt;/code&gt; and &lt;code&gt;queryRecord()&lt;/code&gt; methods.</source>
          <target state="translated">Ember의 기본 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt; &lt;code&gt;JSONAPIAdapter&lt;/code&gt; &lt;/a&gt; 와 같은 JSON API를 지원하는 어댑터를 사용하는 경우 &lt;code&gt;findRecord()&lt;/code&gt; , &lt;code&gt;findAll()&lt;/code&gt; , &lt;code&gt;query()&lt;/code&gt; 및 &lt;code&gt;queryRecord()&lt;/code&gt; 메소드로 작성된 서버 요청에 &lt;code&gt;include&lt;/code&gt; 매개 변수를 쉽게 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8aeac181d4eb68e3ad0ffee2491009ad05e95beb" translate="yes" xml:space="preserve">
          <source>If you are using an adapter that supports JSON:API, such as Ember's default &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPIAdapter&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt;, you can easily add the &lt;code&gt;include&lt;/code&gt; parameter to the server requests created by the &lt;code&gt;findRecord()&lt;/code&gt;, &lt;code&gt;findAll()&lt;/code&gt;, &lt;code&gt;query()&lt;/code&gt; and &lt;code&gt;queryRecord()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d764acef7c7bbc5e829c6f95616d78f3284c261" translate="yes" xml:space="preserve">
          <source>If you are using an adapter that supports server requests capable of returning a single model object, Ember Data provides a convenience method &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_queryRecord&quot;&gt;&lt;code&gt;store.queryRecord()&lt;/code&gt;&lt;/a&gt;that will return a promise that resolves with that single record. The request is made via a method &lt;code&gt;queryRecord()&lt;/code&gt; defined by the adapter.</source>
          <target state="translated">단일 모델 객체를 반환 할 수있는 서버 요청을 지원하는 어댑터를 사용하는 경우 Ember Data는 편리한 단일 메서드로 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_queryRecord&quot;&gt; &lt;code&gt;store.queryRecord()&lt;/code&gt; &lt;/a&gt; 메서드를 제공하여 해당 단일 레코드로 해결되는 약속을 반환합니다. 요청은 어댑터에 의해 정의 된 &lt;code&gt;queryRecord()&lt;/code&gt; 메소드를 통해 이루어집니다 .</target>
        </trans-unit>
        <trans-unit id="e96a79cb139a8f649f790794e0bdff9099054f66" translate="yes" xml:space="preserve">
          <source>If you are using an adapter that supports server requests capable of returning a single model object, Ember Data provides a convenience method &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Store/methods#queryRecord&quot;&gt;&lt;code&gt;store.queryRecord()&lt;/code&gt;&lt;/a&gt; that will return a promise that resolves with that single record. The request is made via a method &lt;code&gt;queryRecord()&lt;/code&gt; defined by the adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d8be3159389716b3148f93a62087d43361baca" translate="yes" xml:space="preserve">
          <source>If you are using imports with Ember, be sure to import the console:</source>
          <target state="translated">Ember와 함께 가져 오기를 사용하는 경우 콘솔을 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="bcf03c612d1bb7e2876a9d910b681010340f9625" translate="yes" xml:space="preserve">
          <source>If you are using the deprecation workflow process above, you will likely prefer to gather these warnings during runtime execution instead. The way to hide these warnings during compile is to install the &lt;a href=&quot;http://emberobserver.com/addons/ember-cli-template-lint&quot;&gt;ember-cli-template-lint&lt;/a&gt; addon. It suppresses template deprecation warnings during compile in favor of showing them in the browser console during test suite execution or application usage.</source>
          <target state="translated">위의 지원 중단 워크 플로 프로세스를 사용하는 경우 런타임 실행 중에 이러한 경고를 수집하는 것이 좋습니다. 컴파일 중 이러한 경고를 숨기는 방법은 &lt;a href=&quot;http://emberobserver.com/addons/ember-cli-template-lint&quot;&gt;ember-cli-template-lint&lt;/a&gt; 애드온 을 설치하는 것 입니다. 테스트 스위트 실행 또는 애플리케이션 사용 중 브라우저 콘솔에 표시하기 위해 컴파일 중에 템플리트 폐기 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bf3e91acda2b1ee1e2586a3e169abc823962aa1" translate="yes" xml:space="preserve">
          <source>If you are working on an application that already has jQuery installed, and would like to remove it, follow these steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8668a9bd84a9f875dba373dbe8517a955ffb30f9" translate="yes" xml:space="preserve">
          <source>If you attempt to redirect with the `queryParams` option, make sure that the query params are defined on the controller!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c30fda38e2e251df472575b65702d2eaf2cf3f4" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;this.transitionTo&lt;/code&gt; from inside of this hook, this route will not be entered in favor of the other hook.</source>
          <target state="translated">이 후크 내부에서 &lt;code&gt;this.transitionTo&lt;/code&gt; 를 호출하면 이 후크는 다른 후크를 위해 입력되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6ca62192f0257da8b2557bd088e8870cb2af8340" translate="yes" xml:space="preserve">
          <source>If you call it by saying &lt;code&gt;isCold&lt;/code&gt; is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57075310fd334438fd7903d2d1a9ce752e58e289" translate="yes" xml:space="preserve">
          <source>If you change the &lt;code&gt;rootURL&lt;/code&gt; in your environment configuration like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bae739363801d5e6cc6d0d8792dd88ca5691ec0" translate="yes" xml:space="preserve">
          <source>If you click on a highlighted template or component, the Inspector will select it. You can then click on the backing objects to send them to the object inspector.</source>
          <target state="translated">강조 표시된 템플릿 또는 구성 요소를 클릭하면 검사관이이를 선택합니다. 그런 다음 백업 개체를 클릭하여 개체 관리자로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2287c28f4f5653412b32afbd17129cdb53634b7" translate="yes" xml:space="preserve">
          <source>If you created a new instance of &lt;code&gt;App.Post&lt;/code&gt; and added a &lt;code&gt;App.Comment&lt;/code&gt; record to its &lt;code&gt;comments&lt;/code&gt; has-many relationship, you would expect the comment's &lt;code&gt;post&lt;/code&gt; property to be set to the post that contained the has-many.</source>
          <target state="translated">&lt;code&gt;App.Post&lt;/code&gt; 의 새 인스턴스를 만들고 &lt;code&gt;comments&lt;/code&gt; has-many 관계에 &lt;code&gt;App.Comment&lt;/code&gt; 레코드를 추가 한 경우 주석의 &lt;code&gt;post&lt;/code&gt; 속성이 has-many를 포함하는 게시물로 설정 될 것으로 예상 됩니다.</target>
        </trans-unit>
        <trans-unit id="0e5b9c00b9336b5b8f36146324a24b5c5533ae79" translate="yes" xml:space="preserve">
          <source>If you created a new instance of &lt;code&gt;Post&lt;/code&gt; and added a &lt;code&gt;Comment&lt;/code&gt; record to its &lt;code&gt;comments&lt;/code&gt; has-many relationship, you would expect the comment's &lt;code&gt;post&lt;/code&gt; property to be set to the post that contained the has-many.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f9d3b25c7b4e867bb39382c93fd6d39c4a0db9" translate="yes" xml:space="preserve">
          <source>If you decide to pass the entire model, be sure to cover this behavior in your &lt;a href=&quot;https://guides.emberjs.com/testing/testing-application/&quot;&gt;application tests&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8407756572fa6be908c47e66d5cf479e675cf223" translate="yes" xml:space="preserve">
          <source>If you deploy your application to an Apache web server, first create a new virtual host for the application. To make sure all routes are handled by &lt;code&gt;index.html&lt;/code&gt;, add the following directive to the application's virtual host configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04958099d387cfcf78491b976ac9baf08916790f" translate="yes" xml:space="preserve">
          <source>If you deploy your application to an Apache web server, first create a new virtual host for the application. To make sure all routes are handled by index.html, add the following directive to the application's virtual host configuration:</source>
          <target state="translated">애플리케이션을 Apache 웹 서버에 배치하는 경우 먼저 애플리케이션의 새 가상 호스트를 작성하십시오. index.html에서 모든 경로를 처리하려면 응용 프로그램의 가상 호스트 구성에 다음 지시문을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="7edaadd1ae288e46eaba2dbcf7800139e4992689" translate="yes" xml:space="preserve">
          <source>If you do not define a model hook for a route, it will default to using Ember Data to look up the record, as shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dadd676b7a862d1fe2e987317aacdc37e88d7d" translate="yes" xml:space="preserve">
          <source>If you do not overwrite &lt;code&gt;attrs&lt;/code&gt; for a specific relationship, the &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; will behave in the following way:</source>
          <target state="translated">특정 관계에 대한 &lt;code&gt;attrs&lt;/code&gt; 을 덮어 쓰지 않으면 &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; 은 다음과 같은 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="15be62c0da19e937d77b4fb85f8c12202896f973" translate="yes" xml:space="preserve">
          <source>If you do not set it, ember-testing will default to &lt;code&gt;Ember.Test.QUnitAdapter&lt;/code&gt;.</source>
          <target state="translated">설정하지 않으면 엠버 테스트는 기본적으로 &lt;code&gt;Ember.Test.QUnitAdapter&lt;/code&gt; 가 됩니다.</target>
        </trans-unit>
        <trans-unit id="ed01276bf29ac4e04e7f20c72e9de1b540acd0f4" translate="yes" xml:space="preserve">
          <source>If you do something like this:</source>
          <target state="translated">이런 식으로하면 :</target>
        </trans-unit>
        <trans-unit id="dbf46c736b0f9766976ce68db0371d4fa3c55b36" translate="yes" xml:space="preserve">
          <source>If you don't have a model object available to pass to &lt;code&gt;{{link-to}}&lt;/code&gt;, an optional string or integer argument can be passed for routes whose paths contain dynamic segments. This argument will become the value of the dynamic segment:</source>
          <target state="translated">&lt;code&gt;{{link-to}}&lt;/code&gt; 에 전달할 수있는 모델 객체가없는 경우 경로에 동적 세그먼트가 포함 된 경로에 대해 선택적 문자열 또는 정수 인수를 전달할 수 있습니다. 이 인수는 동적 세그먼트의 값이됩니다.</target>
        </trans-unit>
        <trans-unit id="bfe4c7927bd4d8bebc9503a1e1f59aab5886a891" translate="yes" xml:space="preserve">
          <source>If you ever used the &lt;code&gt;value&lt;/code&gt; parameter of &lt;code&gt;{{action}}&lt;/code&gt;, there is no direct equivalent for &lt;code&gt;{{on}}&lt;/code&gt;. You should instead write an action that gets the value for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4838c9403ab831be09597bd4647e9956236410eb" translate="yes" xml:space="preserve">
          <source>If you find yourself forgetting to add the &lt;code&gt;@&lt;/code&gt; symbol before named arguments, it may be helpful to think of how the child template mirrors argument being passed into a component via angle bracket invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee2ed65923b9483ca2bf93bbf891a4edf0375b9" translate="yes" xml:space="preserve">
          <source>If you find yourself needing to both serialize and deserialize the embedded relationship you can use the shorthand option of &lt;code&gt;{ embedded:
'always' }&lt;/code&gt;. The example above could therefore be expressed as such:</source>
          <target state="translated">임베드 된 관계를 직렬화 및 직렬화 해제해야하는 경우 &lt;code&gt;{ embedded: 'always' }&lt;/code&gt; 의 단축 옵션을 사용할 수 있습니다 . 따라서 위의 예는 다음과 같이 표현 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36d65d3252424dc1d21d1bb0da7fb7f93eae409d" translate="yes" xml:space="preserve">
          <source>If you forget to use &lt;code&gt;this&lt;/code&gt; when you are supposed to, it will fall back to the context of the component or controller context that backs the template. However, the fallback behavior is deprecated and will be removed in future major versions of Ember (4+).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff7f9cbe7e02c19c460eaef7d9eee134d3a876c" translate="yes" xml:space="preserve">
          <source>If you get a &lt;em&gt;&quot;command not found&quot;&lt;/em&gt; error or an outdated version for Node:</source>
          <target state="translated">당신이 얻을 경우 &lt;em&gt;&quot;명령을 찾을 수 없음&quot;&lt;/em&gt; 오류 또는 노드에 대한 오래된 버전 :</target>
        </trans-unit>
        <trans-unit id="050770f697b47af665b7cb7ed21973bc0f3c781b" translate="yes" xml:space="preserve">
          <source>If you get an outdated version of npm, run &lt;code&gt;npm install -g npm&lt;/code&gt;.</source>
          <target state="translated">오래된 버전의 npm을 얻는 경우 &lt;code&gt;npm install -g npm&lt;/code&gt; 을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="3941efad566fd9215dca432754b6a4dd21547e3d" translate="yes" xml:space="preserve">
          <source>If you have Ember Inflector (such as if Ember Data is present), pluralize a word. For example, turn &quot;ox&quot; into &quot;oxen&quot;. Example: {{pluralize count myProperty}} {{pluralize 1 &quot;oxen&quot;}} {{pluralize myProperty}} {{pluralize &quot;ox&quot;}}</source>
          <target state="translated">Ember Inflector가있는 경우 (예 : Ember Data가있는 경우) 단어를 복수화하십시오. 예를 들어 &quot;ox&quot;를 &quot;oxen&quot;으로 바꾸십시오. 예 : {{복수화 myProperty}} {{복수화 1 &quot;oxen&quot;}} {{복수화 myProperty}} {{복수화 &quot;ox&quot;}}</target>
        </trans-unit>
        <trans-unit id="d4524be3b93c61b0a42e1f99b4c2b8733d7b6111" translate="yes" xml:space="preserve">
          <source>If you have Ember Inflector (such as if Ember Data is present), singularize a word. For example, turn &quot;oxen&quot; into &quot;ox&quot;. Example: {{singularize myProperty}} {{singularize &quot;oxen&quot;}}</source>
          <target state="translated">Ember Inflector가있는 경우 (예 : Ember Data가있는 경우) 단어를 한 단어 씩 표시하십시오. 예를 들어 &quot;oxen&quot;을 &quot;ox&quot;로 바꾸십시오. 예 : {{singularize myProperty}} {{singularize &quot;oxen&quot;}}</target>
        </trans-unit>
        <trans-unit id="f0ca6ab578c960ee09756468c6189ad8631fb397" translate="yes" xml:space="preserve">
          <source>If you have a component named &lt;code&gt;index.hbs&lt;/code&gt;, you can refer to it without the &lt;code&gt;::Index&lt;/code&gt;. So we can refactor &lt;code&gt;app/components/received-message.hbs&lt;/code&gt; to &lt;code&gt;app/components/received-message/index.hbs&lt;/code&gt; and continue to use it as &lt;code&gt;&amp;lt;ReceivedMessage&amp;gt;&lt;/code&gt; without changing all the tags that refer to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28c3a1d07079b2e49ec02c67c669cde2afcb3ed" translate="yes" xml:space="preserve">
          <source>If you have access to the post model you can also pass the model itself:</source>
          <target state="translated">포스트 모델에 액세스 할 수있는 경우 모델 자체를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9180a4528e60e9d3c51eec8560de4b65fff3e9e" translate="yes" xml:space="preserve">
          <source>If you have any questions about styling or the contributing process, you can check out our &lt;a href=&quot;https://github.com/ember-learn/guides-source/blob/master/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt;. If your question persists, reach us in the &lt;code&gt;#dev-ember-learning&lt;/code&gt; channel on the &lt;a href=&quot;https://discordapp.com/invite/zT3asNS&quot;&gt;Ember Community Discord&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a672287c8f9f624ce67a11af94f091cecfea799" translate="yes" xml:space="preserve">
          <source>If you have any questions about styling or the contributing process, you can check out our &lt;a href=&quot;https://github.com/emberjs/guides/blob/master/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt;. If your question persists, reach us at &lt;code&gt;#-team-learning&lt;/code&gt; on the &lt;a href=&quot;https://ember-community-slackin.herokuapp.com/&quot;&gt;Slack group&lt;/a&gt;.</source>
          <target state="translated">스타일링 또는 기여 과정에 대해 궁금한 점이 있으면 &lt;a href=&quot;https://github.com/emberjs/guides/blob/master/CONTRIBUTING.md&quot;&gt;기여 가이드를&lt;/a&gt; 확인하십시오 . 질문이 계속되면 &lt;a href=&quot;https://ember-community-slackin.herokuapp.com/&quot;&gt;Slack 그룹의 &lt;/a&gt; &lt;code&gt;#-team-learning&lt;/code&gt; 에서 문의하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab279d6285cffba3506cb605043a0264cf4f78cb" translate="yes" xml:space="preserve">
          <source>If you have defined a file for the post controller, the framework will use it. If it is not defined, a basic &lt;code&gt;Controller&lt;/code&gt; instance would be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca05fcd3765f574749d2c1831b54f9a50540e515" translate="yes" xml:space="preserve">
          <source>If you have implemented your own version of an Ember &lt;code&gt;Enumerable&lt;/code&gt;, or the &lt;code&gt;EmberArray&lt;/code&gt; mixin, in general, you will need to add an additional step to your implementation of &lt;code&gt;objectAt&lt;/code&gt; in order for it to work with tracking:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f4139d009faf041c23317d45d13e294b0b81ba" translate="yes" xml:space="preserve">
          <source>If you have multiple API formats and the per-type strategy is not viable, one strategy is to write an &lt;code&gt;application&lt;/code&gt; adapter and serializer that make use of &lt;code&gt;options&lt;/code&gt; to specify the desired format when making a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa01c6c083495f3e21f32dc8be3ac9be518d0e6e" translate="yes" xml:space="preserve">
          <source>If you have multiple APIs or multiple API versions and the single application adapter and per-type strategy does not suite your needs, one strategy is to write an &lt;code&gt;application&lt;/code&gt; adapter and serializer that make use of &lt;code&gt;options&lt;/code&gt; to specify the desired format when making a request, then forwards to the request to the desired adapter or serializer as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418975615623aacf317cf1ad6029649232e3868a" translate="yes" xml:space="preserve">
          <source>If you have one model that has exceptional rules for communicating with its backend than the others you can create a Model specific Adapter by running the command &lt;code&gt;ember generate adapter adapter-name&lt;/code&gt;. For example, running &lt;code&gt;ember generate adapter post&lt;/code&gt; will create the following file:</source>
          <target state="translated">백엔드와 통신하기위한 예외 규칙이있는 모델이 하나있는 경우 &lt;code&gt;ember generate adapter adapter-name&lt;/code&gt; 명령을 실행하여 모델 특정 어댑터를 작성할 수 있습니다 . 예를 들어, &lt;code&gt;ember generate adapter post&lt;/code&gt; 를 실행 하면 다음 파일이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="de858082122b328390f807e5b817e03786bd061d" translate="yes" xml:space="preserve">
          <source>If you have successfully selected your repo and it is an Ember application, Netlify will automatically generate the deploy settings as shown below. These instructions assume you do not want to change any of the default settings generated by Netlify. So if everything looks good to you, go ahead and click the &quot;Deploy site&quot; button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd2f4b5f660cf934264c9c7691e5f0438a3ae6e" translate="yes" xml:space="preserve">
          <source>If you have the following component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f547e716ee47725e04d5687132f5a1dd4c2adea9" translate="yes" xml:space="preserve">
          <source>If you have written HTML before, you already know how to write a basic Ember template. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89169a936118dbe820b69e202d432c766cd630f6" translate="yes" xml:space="preserve">
          <source>If you implement the &lt;code&gt;setupController&lt;/code&gt; hook in your Route, it will prevent this default behavior. If you want to preserve that behavior when implementing your &lt;code&gt;setupController&lt;/code&gt; function, make sure to call &lt;code&gt;_super&lt;/code&gt;:</source>
          <target state="translated">Route에서 &lt;code&gt;setupController&lt;/code&gt; 훅 을 구현하면 이 기본 동작을 막을 수 있습니다. &lt;code&gt;setupController&lt;/code&gt; 함수를 구현할 때 해당 동작을 유지 하려면 &lt;code&gt;_super&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="57d93c1f46d3bda439c148f0cf16d47a5d95b022" translate="yes" xml:space="preserve">
          <source>If you implement the &lt;code&gt;setupController&lt;/code&gt; hook in your Route, it will prevent this default behavior. If you want to preserve that behavior when implementing your &lt;code&gt;setupController&lt;/code&gt; function, make sure to call &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8f38bbd205394d899a6ad630e4b2daca0b3496" translate="yes" xml:space="preserve">
          <source>If you invoke the component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0fd3924de52e4e7b7bf74c3ab5f298e42d47f8" translate="yes" xml:space="preserve">
          <source>If you just want to do some small tweaks on the default JSON, you can call super first and make the tweaks on the returned JSON.</source>
          <target state="translated">기본 JSON에서 약간의 조정을 원한다면 super를 먼저 호출하고 반환 된 JSON을 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3b3fdea41c8c3a9b5dd7c4c1c6a43381b43fcd4" translate="yes" xml:space="preserve">
          <source>If you left &lt;code&gt;ember test&lt;/code&gt; running, it should have automatically updated to show the three tests related to navigating have now passed.</source>
          <target state="translated">당신이 남아있는 경우 &lt;code&gt;ember test&lt;/code&gt; 실행, 자동으로 현재 통과 한 탐색에 관한 세 가지 테스트를 표시하도록 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="9cd85c21df78070fa9d86a829ab4d497184a7624" translate="yes" xml:space="preserve">
          <source>If you merely want to watch for the array being changed, like an object being replaced, added or removed, use &lt;code&gt;[]&lt;/code&gt; instead of &lt;code&gt;@each&lt;/code&gt;.</source>
          <target state="translated">객체가 교체, 추가 또는 제거되는 것처럼 배열이 변경되는 것을보고 싶다면 &lt;code&gt;@each&lt;/code&gt; 대신 &lt;code&gt;[]&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a62c7754c54f828c8a256db150e534eaf100e57" translate="yes" xml:space="preserve">
          <source>If you navigate to &lt;code&gt;slow-model&lt;/code&gt;, in the &lt;code&gt;model&lt;/code&gt; hook using &lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;Ember Data&lt;/a&gt;, the query may take a long time to complete. During this time, your UI isn't really giving you any feedback as to what's happening. If you're entering this route after a full page refresh, your UI will be entirely blank, as you have not actually finished fully entering any route and haven't yet displayed any templates. If you're navigating to &lt;code&gt;slow-model&lt;/code&gt; from another route, you'll continue to see the templates from the previous route until the model finish loading, and then, boom, suddenly all the templates for &lt;code&gt;slow-model&lt;/code&gt; load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30af49987c2096f5472a3a802250139e17570b68" translate="yes" xml:space="preserve">
          <source>If you navigate to &lt;code&gt;slow-model&lt;/code&gt;, in the &lt;code&gt;model&lt;/code&gt; hook, the query may take a long time to complete. During this time, your UI isn't really giving you any feedback as to what's happening. If you're entering this route after a full page refresh, your UI will be entirely blank, as you have not actually finished fully entering any route and haven't yet displayed any templates. If you're navigating to &lt;code&gt;slow-model&lt;/code&gt; from another route, you'll continue to see the templates from the previous route until the model finish loading, and then, boom, suddenly all the templates for &lt;code&gt;slow-model&lt;/code&gt; load.</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; 후크 에서 &lt;code&gt;slow-model&lt;/code&gt; 로 이동 하면 쿼리를 완료하는 데 시간이 오래 걸릴 수 있습니다. 이 기간 동안 UI는 실제로 무슨 일이 일어나고 있는지에 대한 피드백을 제공하지 않습니다. 전체 페이지를 새로 고친 후이 경로를 입력하면 실제로 경로를 완전히 입력하지 않았으며 아직 템플릿을 표시하지 않았기 때문에 UI가 완전히 비어 있습니다. 다른 경로에서 &lt;code&gt;slow-model&lt;/code&gt; 이동하는 경우 모델이로드를 마칠 때까지 이전 경로의 템플릿이 계속 표시되고 &lt;code&gt;slow-model&lt;/code&gt; 로드를 위한 갑자기 모든 템플릿이 붐이 됩니다.</target>
        </trans-unit>
        <trans-unit id="497c297297a42971d33f52d637d27a21bee31444" translate="yes" xml:space="preserve">
          <source>If you need a link to be 'active' even when it doesn't match the current route, you can use the &lt;code&gt;current-when&lt;/code&gt; argument.</source>
          <target state="translated">현재 경로와 일치하지 않더라도 링크가 '활성'이어야하는 경우 &lt;code&gt;current-when&lt;/code&gt; 인수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ec0d71e422da23306886993e75838bdfc79cd340" translate="yes" xml:space="preserve">
          <source>If you need a query param change to trigger a full transition, and thus the method hooks, you can use the optional &lt;code&gt;queryParams&lt;/code&gt; configuration hash on the &lt;code&gt;Route&lt;/code&gt;. If you have a &lt;code&gt;category&lt;/code&gt; query param and you want it to trigger a model refresh, you can set it as follows:</source>
          <target state="translated">전체 전환을 트리거하기 위해 쿼리 매개 변수 변경이 필요하므로 메소드 후크 가 필요한 경우 &lt;code&gt;Route&lt;/code&gt; 에서 선택적 &lt;code&gt;queryParams&lt;/code&gt; 구성 해시를 사용할 수 있습니다 . 당신이있는 경우 &lt;code&gt;category&lt;/code&gt; 쿼리 PARAM을하고 당신이 모델 새로 고침을 트리거 할, 당신은 같은 다음 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="d724bbe4ae41c1f103065e3b933b2d51b2875afe" translate="yes" xml:space="preserve">
          <source>If you need an observer to fire as part of the initialization process, you cannot rely on the side effect of &lt;code&gt;set&lt;/code&gt;. Instead, specify that the observer should also run after &lt;code&gt;init&lt;/code&gt; by using &lt;a href=&quot;http://emberjs.com/api/classes/Ember.html#method_on&quot;&gt;&lt;code&gt;Ember.on()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">초기화 프로세스의 일부로 발사 할 관찰자가 필요한 경우 &lt;code&gt;set&lt;/code&gt; 의 부작용에 의존 할 수 없습니다 . 대신 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.html#method_on&quot;&gt; &lt;code&gt;Ember.on()&lt;/code&gt; &lt;/a&gt; 을 사용하여 관찰자가 &lt;code&gt;init&lt;/code&gt; 후에도 실행되도록 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8194f56ab51b41e59b58c0ce4a9f3a5e102319b8" translate="yes" xml:space="preserve">
          <source>If you need any help, check out the &lt;a href=&quot;https://emberjs.com/community/&quot;&gt;chat and forums&lt;/a&gt;. If you spot something to improve in this guide, you can help out by &lt;a href=&quot;https://github.com/ember-learn/guides-source&quot;&gt;filing an issue or a PR&lt;/a&gt;. Thank you!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef65177e5991b77bbaadb6f092759d702f98156d" translate="yes" xml:space="preserve">
          <source>If you need better control over normalization or want access to the records being added or updated in the store, we recommended using &lt;code&gt;store.push&lt;/code&gt; over &lt;code&gt;store.pushPayload&lt;/code&gt; after normalizing the payload directly. This can even take advantage of an existing serializer for the format the data is in, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ee5c2474e208e4c0e80a0a8928a7377fd5c3e5" translate="yes" xml:space="preserve">
          <source>If you need help along the way, visit &lt;a href=&quot;https://emberjs.com/community/&quot;&gt;the Ember Community chat and forums&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88834c589ade40c2c8a09cd64ac7b6294d15d58a" translate="yes" xml:space="preserve">
          <source>If you need information about the current model in order to decide about redirection, you can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_afterModel&quot;&gt;&lt;code&gt;afterModel()&lt;/code&gt;&lt;/a&gt; hook. It receives the resolved model as the first parameter and the transition as the second one. For example:</source>
          <target state="translated">리디렉션을 결정하기 위해 현재 모델에 대한 정보가 필요한 경우 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_afterModel&quot;&gt; &lt;code&gt;afterModel()&lt;/code&gt; &lt;/a&gt; 후크를 사용할 수 있습니다 . 해석 된 모델을 첫 번째 매개 변수로 받고 전환을 두 번째 매개 변수로받습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="faae48b4596acc583aff9fc0a6d2a7b53e83e00e" translate="yes" xml:space="preserve">
          <source>If you need information about the current model in order to decide about redirection, you can use the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#afterModel&quot;&gt;&lt;code&gt;afterModel()&lt;/code&gt;&lt;/a&gt; hook. It receives the resolved model as the first parameter and the transition as the second one. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed16466190ebebfa81760066ddffafa13562219" translate="yes" xml:space="preserve">
          <source>If you need the default handler to trigger you should either register your own event handler, or use event methods on your view class. See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Component&quot;&gt;&quot;Responding to Browser Events&quot;&lt;/a&gt; in the documentation for &lt;code&gt;Component&lt;/code&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2efb535289b5ceb3b97d9e008c5567cafd3e85" translate="yes" xml:space="preserve">
          <source>If you need the default handler to trigger you should either register your own event handler, or use event methods on your view class. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component#responding-to-browser-events&quot;&gt;&quot;Responding to Browser Events&quot;&lt;/a&gt; in the documentation for Ember.Component for more information.</source>
          <target state="translated">트리거 할 기본 핸들러가 필요한 경우 고유 한 이벤트 핸들러를 등록하거나보기 클래스에서 이벤트 메소드를 사용해야합니다. 자세한 내용 은 Ember.Component 설명서의 &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component#responding-to-browser-events&quot;&gt;&quot;브라우저 이벤트에 응답&quot;&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8bac10c515e6ab82de956621c8f946ca14bbd822" translate="yes" xml:space="preserve">
          <source>If you need to customize the behavior of the component you'll need to define a subclass of &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html&quot;&gt;&lt;code&gt;Ember.Component&lt;/code&gt;&lt;/a&gt;. For example, you would need a custom subclass if you wanted to change a component's element, respond to actions from the component's template, or manually make changes to the component's element using JavaScript.</source>
          <target state="translated">컴포넌트의 동작을 커스터마이즈하려면 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html&quot;&gt; &lt;code&gt;Ember.Component&lt;/code&gt; &lt;/a&gt; 서브 클래스를 정의해야합니다 . 예를 들어, 구성 요소의 요소를 변경하거나 구성 요소 템플릿의 작업에 응답하거나 JavaScript를 사용하여 구성 요소의 요소를 수동으로 변경하려면 사용자 정의 하위 클래스가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9df4cba3c6b0ffa62125321a7efb00530f8287dc" translate="yes" xml:space="preserve">
          <source>If you need to display all of the keys or values of a JavaScript object in your template, you can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt;&lt;code&gt;{{#each-in}}&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="translated">템플릿에 JavaScript 객체의 모든 키 또는 값을 표시해야하는 경우 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt; &lt;code&gt;{{#each-in}}&lt;/code&gt; &lt;/a&gt; 도우미를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72a96970d77e6ec9eaf2d7a5b387d36f437c4840" translate="yes" xml:space="preserve">
          <source>If you need to examine some application state to figure out where to redirect, you might use a &lt;a href=&quot;https://guides.emberjs.com/applications/services&quot;&gt;service&lt;/a&gt;.</source>
          <target state="translated">리디렉션 할 위치를 파악하기 위해 일부 응용 프로그램 상태를 검사해야하는 경우 &lt;a href=&quot;https://guides.emberjs.com/applications/services&quot;&gt;서비스를&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7d84d6291ee14b7d0aa289a53c86db413adf435d" translate="yes" xml:space="preserve">
          <source>If you need to examine some application state to figure out where to redirect, you might use a &lt;a href=&quot;https://guides.emberjs.com/services/&quot;&gt;service&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6681b4e459475331a528ae5b4e770bf12759151" translate="yes" xml:space="preserve">
          <source>If you need to import an asset in only one environment you can wrap &lt;code&gt;app.import&lt;/code&gt; in an &lt;code&gt;if&lt;/code&gt; statement. For assets needed during testing, you should also use the &lt;code&gt;{type: 'test'}&lt;/code&gt; option to make sure they are available in test mode.</source>
          <target state="translated">하나의 환경에서만 자산을 가져와야 하는 &lt;code&gt;if&lt;/code&gt; 문으로 &lt;code&gt;app.import&lt;/code&gt; 를 래핑 할 수 있습니다 . 테스트 중에 필요한 자산의 경우 &lt;code&gt;{type: 'test'}&lt;/code&gt; 옵션을 사용하여 테스트 모드에서 사용 가능한지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="158c3d5733668e2190fcc1808c4d079b37de7c8b" translate="yes" xml:space="preserve">
          <source>If you need to integrate your Ember.js app with a server that does not have an &lt;a href=&quot;http://emberobserver.com/categories/ember-data-adapters&quot;&gt;adapter&lt;/a&gt; available (for example, you hand-rolled an API server that does not adhere to any JSON specification), Ember Data is designed to &lt;strong&gt;be configurable&lt;/strong&gt; to work with whatever data your server returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c29d1284c4853732d7d5f192b8747da6f20adc" translate="yes" xml:space="preserve">
          <source>If you need to integrate your Ember.js app with a server that does not have an adapter available (for example, you hand-rolled an API server that does not adhere to any JSON specification), Ember Data is designed to be configurable to work with whatever data your server returns.</source>
          <target state="translated">Ember.js 앱을 사용 가능한 어댑터가없는 서버와 통합해야하는 경우 (예 : JSON 사양을 준수하지 않는 API 서버를 수동으로 롤링 한 경우) Ember Data는 작동하도록 구성 가능하도록 설계되었습니다 서버가 반환하는 모든 데이터로.</target>
        </trans-unit>
        <trans-unit id="de7d7122515bf7d06bddb4e38b73ae8ca2a365ba" translate="yes" xml:space="preserve">
          <source>If you need to load certain dependencies before others, you can set the &lt;code&gt;prepend&lt;/code&gt; property equal to &lt;code&gt;true&lt;/code&gt; on the second argument of &lt;code&gt;import()&lt;/code&gt;. This will prepend the dependency to the vendor file instead of appending it, which is the default behavior.</source>
          <target state="translated">특정 종속성을 다른 종속성보다 먼저로드해야하는 경우 &lt;code&gt;import()&lt;/code&gt; 의 두 번째 인수 에서 &lt;code&gt;prepend&lt;/code&gt; 속성을 &lt;code&gt;true&lt;/code&gt; 로 설정할 수 있습니다 . 이는 기본 동작 인 벤더 파일을 추가하는 대신 벤더 파일에 대한 종속성을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f303fe291b7d523c9c33dee9ed5b8dbc10df4926" translate="yes" xml:space="preserve">
          <source>If you need to observe a computed property but aren't currently retrieving it, get it in your &lt;code&gt;init()&lt;/code&gt; method.</source>
          <target state="translated">계산 된 속성을 관찰해야하지만 현재 검색하지 않는 경우 &lt;code&gt;init()&lt;/code&gt; 메소드 에서 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="8fdaf5661fc45e1d9858c16ccde11cb3e1e57f2c" translate="yes" xml:space="preserve">
          <source>If you need to override this behavior specify &lt;code&gt;preventDefault=false&lt;/code&gt; in your template:</source>
          <target state="translated">이 동작을 대체해야하는 경우 템플리트에서 &lt;code&gt;preventDefault=false&lt;/code&gt; 를 지정 하십시오.</target>
        </trans-unit>
        <trans-unit id="c4cc8359429799a1f5a564a7427ed614eae9b9f1" translate="yes" xml:space="preserve">
          <source>If you need to provide a default value, you'll have to do it via a getter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3cad04dcb61c346b39fde375faf60c5fc74556" translate="yes" xml:space="preserve">
          <source>If you need to support multiple API versions for the same type, the per-type strategy for defining adapters might not be adequate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e761d4b8c636b397c5f7b9d1253c1775b42ff269" translate="yes" xml:space="preserve">
          <source>If you need to use different assets in different environments, specify an object as the first parameter. That object's key should be the environment name, and the value should be the asset to use in that environment.</source>
          <target state="translated">다른 환경에서 다른 자산을 사용해야하는 경우 첫 번째 매개 변수로 오브젝트를 지정하십시오. 해당 객체의 키는 환경 이름이어야하고 값은 해당 환경에서 사용할 자산이어야합니다.</target>
        </trans-unit>
        <trans-unit id="a2748d03900395392b183adad53d0f84874404d9" translate="yes" xml:space="preserve">
          <source>If you never &lt;code&gt;get()&lt;/code&gt; a computed property, its observers will not fire even if its dependent keys change. You can think of the value changing from one unknown value to another.</source>
          <target state="translated">당신이 결코 경우 &lt;code&gt;get()&lt;/code&gt; 계산 된 속성을, 옵저버는 종속 키를 변경하는 경우에도 발생하지 않습니다. 값을 알 수없는 값에서 다른 값으로 변경하는 것을 생각할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="290a7c070a7a155947aea4a787111c087279ce1e" translate="yes" xml:space="preserve">
          <source>If you only want to return the first matched value, rather than an Array containing all of the matched values, you can use &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_find&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_findBy&quot;&gt;&lt;code&gt;findBy()&lt;/code&gt;&lt;/a&gt;, which work like &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;filterBy()&lt;/code&gt;, but return only one item.</source>
          <target state="translated">일치하는 모든 값을 포함하는 배열이 아니라 첫 번째 일치하는 값만 반환하려는 경우, &lt;code&gt;filter()&lt;/code&gt; 및 &lt;code&gt;filterBy()&lt;/code&gt; 와 같은 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_find&quot;&gt; &lt;code&gt;find()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_findBy&quot;&gt; &lt;code&gt;findBy()&lt;/code&gt; &lt;/a&gt; 사용할 수 있지만 하나의 항목 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5934dedd9d94074b98416c3f66716aa0a818fcf2" translate="yes" xml:space="preserve">
          <source>If you open &lt;code&gt;config/targets.js&lt;/code&gt;, you will find the following code:</source>
          <target state="translated">&lt;code&gt;config/targets.js&lt;/code&gt; 를 열면 다음 코드가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="7caff3e3aadb7055ccc3d3a2a7f83f3ed69bee63" translate="yes" xml:space="preserve">
          <source>If you open the acceptance test we created (&lt;code&gt;/tests/acceptance/list-rentals-test.js&lt;/code&gt;), you'll see our goals, which include the ability to navigate to an &lt;code&gt;about&lt;/code&gt; page and a &lt;code&gt;contact&lt;/code&gt; page. Let's start there.</source>
          <target state="translated">Google에서 만든 승인 테스트 ( &lt;code&gt;/tests/acceptance/list-rentals-test.js&lt;/code&gt; ) 를 열면 &lt;code&gt;about&lt;/code&gt; 페이지 및 &lt;code&gt;contact&lt;/code&gt; 페이지 로 이동하는 기능이 포함 된 목표가 표시됩니다. 거기서 시작하자.</target>
        </trans-unit>
        <trans-unit id="5b59bb67b3aaea866b51f345ebc86977c5eaa3eb" translate="yes" xml:space="preserve">
          <source>If you open up your Router (&lt;code&gt;app/router.js&lt;/code&gt;) you may notice that the rentals line has changed. This extra &lt;code&gt;function() {}&lt;/code&gt; is required because it needs a child route, the &lt;code&gt;this.route('index', { path: '/'});&lt;/code&gt; is implied.</source>
          <target state="translated">라우터 ( &lt;code&gt;app/router.js&lt;/code&gt; ) 를 열면 렌탈 라인이 변경되었음을 알 수 있습니다. 이 추가 &lt;code&gt;function() {}&lt;/code&gt; 에는 자식 경로, &lt;code&gt;this.route('index', { path: '/'});&lt;/code&gt; 가 필요하기 때문에 필요합니다 . 묵시적입니다.</target>
        </trans-unit>
        <trans-unit id="203ef543a812b95ad545379c5a602a48962c876c" translate="yes" xml:space="preserve">
          <source>If you override this method, you should implement it so that it will always return the same value each time it is called. If your enumerable contains only one object, this method should always return that object. If your enumerable is empty, this method should return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">이 메소드를 대체하는 경우 호출 할 때마다 항상 동일한 값을 리턴하도록 구현해야합니다. 열거 가능 객체에 객체가 하나만 있으면이 메소드는 항상 해당 객체를 반환해야합니다. 열거 형이 비어 있으면이 메소드는 &lt;code&gt;undefined&lt;/code&gt; 를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b26a4133a45f8a4bcb25a8423fcf62070a44fd2e" translate="yes" xml:space="preserve">
          <source>If you pass a function as an argument, it will be used as a getter. A computed property defined in this way might look like this:</source>
          <target state="translated">함수를 인수로 전달하면 getter로 사용됩니다. 이런 식으로 정의 된 계산 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0db351d693a17fad1ccc179037e0ee3a7a168395" translate="yes" xml:space="preserve">
          <source>If you pass a promise to &lt;code&gt;push&lt;/code&gt;, Ember Data will not ask the adapter for the data if another attempt to fetch it is made in the interim. When the promise resolves, the underlying object is updated with the new data, and the promise returned by &lt;em&gt;this function&lt;/em&gt; is resolved with that object.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 약속을 전달하면 Ember Data는 데이터를 가져 오려는 또 다른 시도가 중간에 수행되는지 여부를 어댑터에 묻지 않습니다. 약속이 해결되면 기본 개체가 새 데이터로 업데이트되고이 &lt;em&gt;함수&lt;/em&gt; 가 반환 한 약속 은 해당 개체로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="c32e28cc7e1a747028f8fe3644203a58979ea8ae" translate="yes" xml:space="preserve">
          <source>If you pass a start and length that is beyond the length this method will throw an &lt;code&gt;OUT_OF_RANGE_EXCEPTION&lt;/code&gt;.</source>
          <target state="translated">길이를 초과하는 시작과 길이를 전달하면이 메소드는 &lt;code&gt;OUT_OF_RANGE_EXCEPTION&lt;/code&gt; 을 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="849661ff38c50c4f8caaa8a60b28e2a8361af87c" translate="yes" xml:space="preserve">
          <source>If you pass a start and length that is beyond the length this method will throw an assertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d25adfaed8206771f792034fa41b88029aae0de" translate="yes" xml:space="preserve">
          <source>If you pass an object on the &lt;code&gt;adapterOptions&lt;/code&gt; property of the options argument it will be passed to you adapter via the &lt;code&gt;snapshotRecordArray&lt;/code&gt;</source>
          <target state="translated">options 인수 의 &lt;code&gt;adapterOptions&lt;/code&gt; 속성 에서 객체를 전달하면 &lt;code&gt;snapshotRecordArray&lt;/code&gt; 를 통해 어댑터로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="0c84364f02074f10e08b345a560c55a004ecc054" translate="yes" xml:space="preserve">
          <source>If you pass an object on the &lt;code&gt;adapterOptions&lt;/code&gt; property of the options argument it will be passed to you adapter via the snapshot</source>
          <target state="translated">options 인수 의 &lt;code&gt;adapterOptions&lt;/code&gt; 속성 에서 객체를 전달하면 스냅 샷을 통해 어댑터로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="dc47a23b1e48703a5bf76b84f8654a8e0198e87f" translate="yes" xml:space="preserve">
          <source>If you pass an object on the &lt;code&gt;adapterOptions&lt;/code&gt; property of the options argument it will be passed to your adapter via the snapshot</source>
          <target state="translated">options 인수 의 &lt;code&gt;adapterOptions&lt;/code&gt; 속성 에서 객체를 전달하면 스냅 샷을 통해 어댑터로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="11e7fddfd8190f7492e6e2e7397155227ee1d859" translate="yes" xml:space="preserve">
          <source>If you pass an object using the &lt;code&gt;adapterOptions&lt;/code&gt; property of the options argument it will be passed to your adapter via the snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c756f562b2c0db203890e91afbee2cb6f95d02" translate="yes" xml:space="preserve">
          <source>If you plan to run on IE8 and older browsers then you should use this method anytime you want to retrieve a property on an object that you don't know for sure is private. (Properties beginning with an underscore '_' are considered private.)</source>
          <target state="translated">IE8 및 이전 버전의 브라우저에서 실행하려는 경우 확실하지 않은 개체의 속성을 검색하려면 언제든지이 방법을 사용해야합니다. 밑줄 '_'로 시작하는 속성은 비공개로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="62a361f4cfeb1605136c1e2f03d684e5679cab5e" translate="yes" xml:space="preserve">
          <source>If you previously did something like this in your &lt;code&gt;didReceiveAttrs&lt;/code&gt; or &lt;code&gt;didUpdateAttrs&lt;/code&gt; hooks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3a5683dbdca620d5608fd8ce10038d9f93b257" translate="yes" xml:space="preserve">
          <source>If you return a &lt;code&gt;SafeString&lt;/code&gt; (a string that has been wrapped in a call to &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html#method_htmlSafe&quot;&gt;&lt;code&gt;htmlSafe&lt;/code&gt;&lt;/a&gt;), Ember knows that you have vouched on its behalf that it contains no malicious HTML.</source>
          <target state="translated">당신이 돌아 오면 &lt;code&gt;SafeString&lt;/code&gt; (의 호출에 싸여 된 캐릭터 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html#method_htmlSafe&quot;&gt; &lt;code&gt;htmlSafe&lt;/code&gt; 을&lt;/a&gt; ), 엠버는 당신이 악성 HTML을 포함하지 않는 것을 그 대신에 보증 된 것으로 알고있다.</target>
        </trans-unit>
        <trans-unit id="b5bf5f22e38a7b9d408efa042bc13f452906a0e1" translate="yes" xml:space="preserve">
          <source>If you return a Promise from the model hook, your route will wait for the Promise to resolve before it renders the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f382ae0c61dd6994a9d388d1dd482462635deea" translate="yes" xml:space="preserve">
          <source>If you return a promise from a QUnit test, the test will wait to finish until that promise is resolved. In this case our test completes when the &lt;code&gt;wait&lt;/code&gt; helper decides that processing is finished, and the function we provide that asserts the resulting state is completed.</source>
          <target state="translated">QUnit 테스트에서 약속을 반환하면 해당 약속이 해결 될 때까지 테스트가 완료되기를 기다립니다. 이 경우, &lt;code&gt;wait&lt;/code&gt; 도우미가 처리가 완료되었다고 결정할 때 테스트 가 완료되고 결과 상태를 확인하는 기능이 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="c5e9fc68b7b53523376705da482b30ef38019d31" translate="yes" xml:space="preserve">
          <source>If you return a value from the &lt;code&gt;before&lt;/code&gt; callback, that same value will be passed as a fourth parameter to the &lt;code&gt;after&lt;/code&gt; callback.</source>
          <target state="translated">&lt;code&gt;before&lt;/code&gt; 콜백 에서 값을 반환하면 동일한 값이 네 번째 매개 변수로 전달됩니다. &lt;code&gt;after&lt;/code&gt; 콜백에 .</target>
        </trans-unit>
        <trans-unit id="46c6634c4b9b7bf10ba2af3406cefea4164a13ec" translate="yes" xml:space="preserve">
          <source>If you serve the app and go to &lt;code&gt;localhost:4200&lt;/code&gt; in your web browser, you'll see the HTML rendered. At this point, it will still be unstyled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87732ef1ec5fe1e0b3a917f6a4e23be02afa2336" translate="yes" xml:space="preserve">
          <source>If you set coalesceFindRequests to &lt;code&gt;true&lt;/code&gt; it will instead trigger the following request:</source>
          <target state="translated">coalesceFindRequests를 &lt;code&gt;true&lt;/code&gt; 로 설정 한 경우 하면 대신 다음 요청이 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="441f3c3fd008f367cffb5c9b576b099fe6660096" translate="yes" xml:space="preserve">
          <source>If you specify only one model, it will represent the innermost dynamic segment &lt;code&gt;:comment_id&lt;/code&gt;. The &lt;code&gt;:photo_id&lt;/code&gt; segment will use the current photo.</source>
          <target state="translated">하나의 모델 만 지정하면 가장 안쪽의 동적 세그먼트 인 &lt;code&gt;:comment_id&lt;/code&gt; 를 나타냅니다 . &lt;code&gt;:photo_id&lt;/code&gt; 세그먼트는 현재 사진을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="292c150c28f547582fbd92a1d2c999f982f9aef9" translate="yes" xml:space="preserve">
          <source>If you take a look at &lt;code&gt;app/router.js&lt;/code&gt;, you'll notice some syntax that may be unfamiliar to you.</source>
          <target state="translated">&lt;code&gt;app/router.js&lt;/code&gt; 를 보면 익숙하지 않은 구문을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fa9b8c368629c5d84425190de4514b42126e05e" translate="yes" xml:space="preserve">
          <source>If you try to set a property on a destroyed object, an exception will be raised.</source>
          <target state="translated">파괴 된 객체에 속성을 설정하려고하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="78741f071d4144013b84b4f1ab959dd2d82ae912" translate="yes" xml:space="preserve">
          <source>If you try to set a value on a key that has a computed property handler defined (see the &lt;code&gt;get()&lt;/code&gt; method for an example), then &lt;code&gt;set()&lt;/code&gt; will call that method, passing both the value and key instead of simply changing the value itself. This is useful for those times when you need to implement a property that is composed of one or more member properties.</source>
          <target state="translated">계산 된 속성 핸들러가 정의 된 키에 값을 설정하려고 &lt;code&gt;get()&lt;/code&gt; 예를 들어 get () 메소드 참조 ) &lt;code&gt;set()&lt;/code&gt; 은 단순히 값을 변경하는 대신 값과 키를 모두 전달하여 해당 메소드를 호출합니다. 그 자체. 이는 하나 이상의 멤버 속성으로 구성된 속성을 구현해야하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8b04613f58b1300e32df4339c4129d38099cef75" translate="yes" xml:space="preserve">
          <source>If you try to set a value on a key that is undefined in the target object, then the &lt;code&gt;setUnknownProperty()&lt;/code&gt; handler will be called instead. This gives you an opportunity to implement complex &quot;virtual&quot; properties that are not predefined on the object. If &lt;code&gt;setUnknownProperty()&lt;/code&gt; returns undefined, then &lt;code&gt;set()&lt;/code&gt; will simply set the value on the object.</source>
          <target state="translated">대상 객체에 정의되지 않은 키에 값을 설정하려고하면 대신 &lt;code&gt;setUnknownProperty()&lt;/code&gt; 핸들러가 호출됩니다. 이를 통해 개체에 미리 정의되지 않은 복잡한 &quot;가상&quot;속성을 구현할 수 있습니다. 경우 &lt;code&gt;setUnknownProperty()&lt;/code&gt; 정의되지 않은 반환, 다음 &lt;code&gt;set()&lt;/code&gt; 단순히 개체의 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="1a9bc3e98978d01fe5df8b62780e4e7ff103e866" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;Ember Data&lt;/a&gt; and you are building an &lt;code&gt;RSVP.hash&lt;/code&gt; with the model's relationship, consider instead properly setting up your &lt;a href=&quot;https://guides.emberjs.com/models/relationships&quot;&gt;relationships&lt;/a&gt; and letting Ember Data take care of loading them.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;엠버 데이터&lt;/a&gt; 와 당신이 구축 &lt;code&gt;RSVP.hash&lt;/code&gt; 모델의 관계를, 당신의 설정 대신 제대로 고려 &lt;a href=&quot;https://guides.emberjs.com/models/relationships&quot;&gt;의 관계를&lt;/a&gt; 하고로드의 엠버 데이터 돌봐셔서.</target>
        </trans-unit>
        <trans-unit id="9ba91b0a339b059f7b74dbd2d91ed7bbd146a97a" translate="yes" xml:space="preserve">
          <source>If you use an adapter such as Ember's default &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt; that supports the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API specification&lt;/a&gt; and if your server endpoint supports the use of an &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include' query parameter&lt;/a&gt;, you can use &lt;code&gt;findAll()&lt;/code&gt; to automatically retrieve additional records related to those requested by supplying an &lt;code&gt;include&lt;/code&gt; parameter in the &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="translated">&lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API 사양&lt;/a&gt; 을 지원하는 Ember의 기본 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt; &lt;code&gt;JSONAPIAdapter&lt;/code&gt; &lt;/a&gt; 와 같은 어댑터를 사용하고 서버 엔드 포인트가 &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include'쿼리 매개 변수&lt;/a&gt; 사용을 지원하는 경우 &lt;code&gt;findAll()&lt;/code&gt; 을 사용 하여 요청한 레코드와 관련된 추가 레코드를 자동으로 검색 할 수 있습니다 . &lt;code&gt;options&lt;/code&gt; 개체에 매개 변수를 &lt;code&gt;include&lt;/code&gt; 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="33a4de68894db13da2602a19d403640e1580c3d0" translate="yes" xml:space="preserve">
          <source>If you use an adapter such as Ember's default &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt; that supports the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API specification&lt;/a&gt; and if your server endpoint supports the use of an &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include' query parameter&lt;/a&gt;, you can use &lt;code&gt;findRecord()&lt;/code&gt; to automatically retrieve additional records related to the one you request by supplying an &lt;code&gt;include&lt;/code&gt; parameter in the &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="translated">&lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API 사양&lt;/a&gt; 을 지원하는 Ember의 기본 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt; &lt;code&gt;JSONAPIAdapter&lt;/code&gt; &lt;/a&gt; 와 같은 어댑터를 사용하고 서버 엔드 포인트가 &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include'쿼리 매개 변수&lt;/a&gt; 사용을 지원하는 경우 &lt;code&gt;findRecord()&lt;/code&gt; 를 사용하여 요청한 것과 관련된 추가 레코드를 자동으로 검색 할 수 있습니다 공급하는이 &lt;code&gt;include&lt;/code&gt; 의 파라미터 &lt;code&gt;options&lt;/code&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="e8f04b4bb9bb6c34b2e81543e7d4b0a8c32e9ac3" translate="yes" xml:space="preserve">
          <source>If you use an adapter such as Ember's default &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPIAdapter&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt; that supports the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API specification&lt;/a&gt; and if your server endpoint supports the use of an &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include' query parameter&lt;/a&gt;, you can use &lt;code&gt;findAll()&lt;/code&gt; to automatically retrieve additional records related to those requested by supplying an &lt;code&gt;include&lt;/code&gt; parameter in the &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d53b84f7887d1eca95faadbdc3c63783d6aae3" translate="yes" xml:space="preserve">
          <source>If you use an adapter such as Ember's default &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPIAdapter&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt; that supports the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API specification&lt;/a&gt; and if your server endpoint supports the use of an &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include' query parameter&lt;/a&gt;, you can use &lt;code&gt;findRecord()&lt;/code&gt; or &lt;code&gt;findAll()&lt;/code&gt; to automatically retrieve additional records related to the one you request by supplying an &lt;code&gt;include&lt;/code&gt; parameter in the &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac0be76ef456159036c40f8a7deafbb0cbba438" translate="yes" xml:space="preserve">
          <source>If you use data binding with a Boolean value, it will add or remove the specified attribute. For example, given this template:</source>
          <target state="translated">부울 값으로 데이터 바인딩을 사용하면 지정된 속성이 추가되거나 제거됩니다. 예를 들어 다음과 같은 템플릿이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="764d44ced6a8c8f7a3a4472ba754ecdffb742d7b" translate="yes" xml:space="preserve">
          <source>If you want class names to be determined by properties of the component, you can use class name bindings. If you bind to a Boolean property, the class name will be added or removed depending on the value:</source>
          <target state="translated">구성 요소의 속성에 따라 클래스 이름을 결정하려면 클래스 이름 바인딩을 사용할 수 있습니다. 부울 속성에 바인딩하면 값에 따라 클래스 이름이 추가되거나 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="d7d3524587024ffaa961ce2a5e490e6aef052ab5" translate="yes" xml:space="preserve">
          <source>If you want to add a class name for a property which evaluates to true and and a different class name if it evaluates to false, you can pass a binding like this:</source>
          <target state="translated">true로 평가되는 속성에 클래스 이름을 추가하고 false로 평가되면 다른 클래스 이름을 추가하려면 다음과 같이 바인딩을 전달하면됩니다.</target>
        </trans-unit>
        <trans-unit id="cca754b33b0c0633b1fd529eee9efc4832ac4f5e" translate="yes" xml:space="preserve">
          <source>If you want to add an event handler to an HTML element, you can use the &lt;code&gt;{{on&lt;/code&gt; element modifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f24d2f69fc11c9c2963ea0e0376c304c171124" translate="yes" xml:space="preserve">
          <source>If you want to change the name you can simply rename the file, but if needed you can also specify the name explicitly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6444a0ae403dc959c3b869c4a91406147c40463b" translate="yes" xml:space="preserve">
          <source>If you want to customize the component in order to handle events, transform arguments or maintain internal state, you implement a subclass of &lt;code&gt;Component&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815dc87f2b269206fbb541af0ba1536a667f6282" translate="yes" xml:space="preserve">
          <source>If you want to customize the component, in order to handle events or actions, you implement a subclass of &lt;code&gt;Ember.Component&lt;/code&gt; named after the name of the component.</source>
          <target state="translated">구성 요소를 사용자 정의하려면 이벤트 나 작업을 처리하기 위해 구성 요소 이름을 따서 명명 된 &lt;code&gt;Ember.Component&lt;/code&gt; 하위 클래스를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="9c7fafe0591bb959263727978b0d85daa465c508" translate="yes" xml:space="preserve">
          <source>If you want to define a serializer for your entire application, you'll probably want to use &lt;code&gt;eachAttribute&lt;/code&gt; and &lt;code&gt;eachRelationship&lt;/code&gt; on the record.</source>
          <target state="translated">전체 응용 프로그램에 대해 serializer를 정의 하려면 레코드에서 &lt;code&gt;eachAttribute&lt;/code&gt; 및 &lt;code&gt;eachRelationship&lt;/code&gt; 을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a83e0127ed298b4e0241244350c25e79b0883d42" translate="yes" xml:space="preserve">
          <source>If you want to highlight a component directly within your app, click on the icon to the left of the search bar. As your mouse passes over it, the related component will be highlighted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fb4669b916934c08aeb1d33abe9996ffd9d541" translate="yes" xml:space="preserve">
          <source>If you want to highlight a template or component directly within your app, click on the magnifying glass in the Inspector, then hover over the app. As your our mouse passes over it, the related template or component will be highlighted.</source>
          <target state="translated">앱 내에서 템플릿 또는 구성 요소를 직접 강조 표시하려면 관리자에서 돋보기를 클릭 한 다음 앱 위로 마우스를 가져갑니다. 마우스가 위에 있으면 관련 템플릿 또는 구성 요소가 강조 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="942897515fa20165713d1e45633d39890dca3079" translate="yes" xml:space="preserve">
          <source>If you want to pass additional parameters to the callback function, you must use the &lt;code&gt;{{fn}}&lt;/code&gt; helper. &lt;code&gt;{{on}}&lt;/code&gt; does not receive any additional parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2aa7b23e214b2783f580943b378db24cc0bc2b" translate="yes" xml:space="preserve">
          <source>If you want to render a template other than the default one, set the route's &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#property_templateName&quot;&gt;&lt;code&gt;templateName&lt;/code&gt;&lt;/a&gt; property to the name of the template you want to render instead.</source>
          <target state="translated">기본 템플릿 이외의 템플릿을 렌더링하려면 경로의 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#property_templateName&quot;&gt; &lt;code&gt;templateName&lt;/code&gt; 을&lt;/a&gt; 설정하십시오. 속성을 렌더링하려는 템플릿 이름으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="e69adc82b46306c62f18fccd22416a8cd5463052" translate="yes" xml:space="preserve">
          <source>If you want to run the Inspector on a mobile device, you can use the &lt;a href=&quot;https://github.com/joostdevries/ember-cli-remote-inspector&quot;&gt;Ember CLI Remote Inspector&lt;/a&gt; addon.</source>
          <target state="translated">모바일 장치에서 인스펙터를 실행하려면 &lt;a href=&quot;https://github.com/joostdevries/ember-cli-remote-inspector&quot;&gt;Ember CLI Remote Inspector&lt;/a&gt; 애드온을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9febbf9317a9874bd1e92644bec25a613b201b25" translate="yes" xml:space="preserve">
          <source>If you want to set a property, you can use the &lt;code&gt;prop&lt;/code&gt; element modifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f9afbe5ccf1f209c2f5100c6802a492d2bbe11" translate="yes" xml:space="preserve">
          <source>If you want to specify &lt;code&gt;app/adapters/custom.js&lt;/code&gt; as a string, do:</source>
          <target state="translated">&lt;code&gt;app/adapters/custom.js&lt;/code&gt; 를 문자열로 지정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="33652ca88915ad202df8faa26998e3464ed01218" translate="yes" xml:space="preserve">
          <source>If you want to target all browsers with more than a 4% market share in Canada, you'd have the following options:</source>
          <target state="translated">캐나다에서 4 % 이상의 시장 점유율을 가진 모든 브라우저를 타겟팅하려면 다음과 같은 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ffc3bdb915f72e2d5ffaaab7591d71b0410c393" translate="yes" xml:space="preserve">
          <source>If you want to update the array and get the latest records from the adapter, you can invoke &lt;a href=&quot;#method_update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">배열을 업데이트하고 어댑터에서 최신 레코드를 얻으려면 &lt;a href=&quot;#method_update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt; 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e7d42ad5d6e2f456ef7596a4aa770f238b3c27c" translate="yes" xml:space="preserve">
          <source>If you want to update the array and get the latest records from the adapter, you can invoke &lt;a href=&quot;adapterpopulatedrecordarray/methods#update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e632c2db87c09429428b7f54e2ddff1c168e4fb" translate="yes" xml:space="preserve">
          <source>If you wanted a one way binding between the text area and a div tag somewhere else on your screen, you could use &lt;code&gt;Ember.computed.oneWay&lt;/code&gt;:</source>
          <target state="translated">텍스트 영역과 화면의 다른 곳에서 div 태그 사이의 단방향 바인딩을 원한다면 &lt;code&gt;Ember.computed.oneWay&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="351cf91131e3ba5c854ba7bdc3096b404847b9d8" translate="yes" xml:space="preserve">
          <source>If you were running &lt;code&gt;ember serve&lt;/code&gt; in another shell, restart the server to include Mirage in your build.</source>
          <target state="translated">당신이 &lt;code&gt;ember serve&lt;/code&gt; 를 실행했다면다른 쉘에서 를 서버를 다시 시작하여 빌드에 Mirage를 포함 시키십시오.</target>
        </trans-unit>
        <trans-unit id="72b47debd0468012f6f0930e258a04938b705b3d" translate="yes" xml:space="preserve">
          <source>If you wish to make a more significant contribution be sure to check our &lt;a href=&quot;https://github.com/ember-learn/guides-source/issues&quot;&gt;issue tracker&lt;/a&gt; to see if your issue is already being addressed. If you don't find an active issue, open a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a80711f6e3cb47ccfcae6fa3f203065434d5265" translate="yes" xml:space="preserve">
          <source>If you wish to make a more significant contribution be sure to check our &lt;a href=&quot;https://github.com/emberjs/guides/issues&quot;&gt;issue tracker&lt;/a&gt; to see if your issue is already being addressed. If you don't find an active issue, open a new one.</source>
          <target state="translated">더 큰 기여를하고 싶다면 &lt;a href=&quot;https://github.com/emberjs/guides/issues&quot;&gt;이슈 트래커&lt;/a&gt; 에서 이슈가 이미 해결 되었는지 확인하십시오 . 진행중인 문제를 찾지 못하면 새 문제를여십시오.</target>
        </trans-unit>
        <trans-unit id="6ec6f6263694fb50aab8d1fa081e5e63d2b387e3" translate="yes" xml:space="preserve">
          <source>If you wish to reset a query param, you have two options:</source>
          <target state="translated">쿼리 매개 변수를 재설정하려면 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="70ad80084d2a7c2e4cbe512c409211a82226e39a" translate="yes" xml:space="preserve">
          <source>If you work on a team of developers, it may be useful to have one developer go through the tutorials, try doing a small thing, and then demo that to the rest of the team. After everyone has had a chance for hands-on learning, schedule a meeting to plan how you want to proceed. By design, migrating to Octane can be done in pieces. It doesn't require a big-bang refactor. If you need advice, visit &lt;a href=&quot;https://emberjs.com/community/&quot;&gt;the forums or the Ember Discord&lt;/a&gt; (in Discord you can use the &lt;code&gt;#topic-octane-migration&lt;/code&gt; channel).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e052e0325b9c6e8bd11b211e8a7a73ba4895c12" translate="yes" xml:space="preserve">
          <source>If you would like additional bubbling events to be delegated to your views, set your &lt;code&gt;Application&lt;/code&gt;'s &lt;code&gt;customEvents&lt;/code&gt; property to a hash containing the DOM event name as the key and the corresponding view method name as the value. Setting an event to a value of &lt;code&gt;null&lt;/code&gt; will prevent a default event listener from being added for that event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636ccb0c70995c8ec78b711b2fbaa68458816952" translate="yes" xml:space="preserve">
          <source>If you would like additional bubbling events to be delegated to your views, set your &lt;code&gt;Ember.Application&lt;/code&gt;'s &lt;code&gt;customEvents&lt;/code&gt; property to a hash containing the DOM event name as the key and the corresponding view method name as the value. Setting an event to a value of &lt;code&gt;null&lt;/code&gt; will prevent a default event listener from being added for that event.</source>
          <target state="translated">추가 버블 링 이벤트를 뷰에 위임하려면 &lt;code&gt;Ember.Application&lt;/code&gt; 의 &lt;code&gt;customEvents&lt;/code&gt; 속성을 DOM 이벤트 이름을 키로, 해당 뷰 메서드 이름을 값으로 포함하는 해시로 설정하십시오 . 이벤트를 &lt;code&gt;null&lt;/code&gt; 값으로 설정 기본 이벤트 리스너가 추가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f9c28842b476850cdf188d4a68abd094df008a87" translate="yes" xml:space="preserve">
          <source>If you would like the data to be normalized by the model's default serializer before pushing it into the store, you can use the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_pushPayload&quot;&gt;&lt;code&gt;store.pushPayload()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">데이터를 저장소로 푸시하기 전에 모델의 기본 직렬 변환기로 데이터를 정규화하려면 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_pushPayload&quot;&gt; &lt;code&gt;store.pushPayload()&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다. 메소드를 .</target>
        </trans-unit>
        <trans-unit id="c14dc8058580505ad3924a9a3b2162e3777c785c" translate="yes" xml:space="preserve">
          <source>If you would like the data to be normalized by the model's default serializer before pushing it into the store, you can use the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Store/methods#pushPayload&quot;&gt;&lt;code&gt;store.pushPayload()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865d9a65eb043f609aa030c7dda383387455f93f" translate="yes" xml:space="preserve">
          <source>If you would like to add your own application or library to the list, you can register it using:</source>
          <target state="translated">자신의 응용 프로그램이나 라이브러리를 목록에 추가하려면 다음을 사용하여 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="eacb51fea79f6e5c53ca0ec84c0fe3b4eb1da71b" translate="yes" xml:space="preserve">
          <source>If you would like to create a custom serializer its recommend that you start with the &lt;code&gt;JSONAPISerializer&lt;/code&gt; or &lt;code&gt;JSONSerializer&lt;/code&gt; and extend one of those to match your needs. However, if your payload is extremely different from one of these serializers you can create your own by extending the &lt;code&gt;DS.Serializer&lt;/code&gt; base class.</source>
          <target state="translated">사용자 정의 직렬 변환기를 작성하려면 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 또는 &lt;code&gt;JSONSerializer&lt;/code&gt; 로 시작 하여 필요에 맞게 그 중 하나를 확장 하는 것이 좋습니다 . 그러나 페이로드가 이러한 시리얼 라이저 중 하나와 크게 다른 경우 &lt;code&gt;DS.Serializer&lt;/code&gt; 기본 클래스를 확장하여 직접로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1ce6809dc66f749c11851a7ff9abc2015192a932" translate="yes" xml:space="preserve">
          <source>If you would like to create a custom serializer, it is recommended that you start with the &lt;code&gt;JSONAPISerializer&lt;/code&gt; or &lt;code&gt;JSONSerializer&lt;/code&gt; and extend one of those to match your needs. However, if your payload is extremely different from one of these serializers you can create your own by extending the &lt;code&gt;Serializer&lt;/code&gt; base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3b3e498a148469f0c1085d482741a2910276cc" translate="yes" xml:space="preserve">
          <source>If you would like to force or prevent background reloading, you can set a boolean value for &lt;code&gt;backgroundReload&lt;/code&gt; in the options object for &lt;code&gt;findAll&lt;/code&gt;.</source>
          <target state="translated">백그라운드 재로드를 강제 또는 방지하려면 &lt;code&gt;findAll&lt;/code&gt; 의 옵션 객체에서 &lt;code&gt;backgroundReload&lt;/code&gt; 에 대한 부울 값을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2391e8de828841b835a93d0133d36c57247f2c61" translate="yes" xml:space="preserve">
          <source>If you would like to force or prevent background reloading, you can set a boolean value for &lt;code&gt;backgroundReload&lt;/code&gt; in the options object for &lt;code&gt;findRecord&lt;/code&gt;.</source>
          <target state="translated">백그라운드 재로드를 강제 실행하거나 방지하려면 &lt;code&gt;findRecord&lt;/code&gt; 의 옵션 객체에서 &lt;code&gt;backgroundReload&lt;/code&gt; 에 대한 부울 값을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="529b7739a44d18abecaa6bd065ecf8da0a6b2b16" translate="yes" xml:space="preserve">
          <source>If you would like to include jQuery without the Ember integration APIs, you can install &lt;code&gt;@ember/jquery&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d06646bb77885d39ac634ae0a7650b2f0a83d44" translate="yes" xml:space="preserve">
          <source>If you would like to pass additional arguments to the function you should use the &lt;code&gt;{{fn}}&lt;/code&gt; helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcfbbdb32c89c2922a32057b817e25807f2342d" translate="yes" xml:space="preserve">
          <source>If you would like to specify a class that should only be added when the property is false, you can declare a binding like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5d82f068d754ff6110549f9b0945be0153f6e2" translate="yes" xml:space="preserve">
          <source>If you would like your adapter to use a custom serializer you can set the &lt;code&gt;defaultSerializer&lt;/code&gt; property to be the name of the custom serializer.</source>
          <target state="translated">어댑터가 사용자 정의 직렬 변환기를 사용하도록하려면 &lt;code&gt;defaultSerializer&lt;/code&gt; 특성을 사용자 정의 직렬 변환기의 이름으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3695e95a37faaa025ccc41bbfe2e3e98c24934eb" translate="yes" xml:space="preserve">
          <source>If you would prefer to use a custom value instead of the dasherized property name, you can pass a binding like this:</source>
          <target state="translated">대시 특성 이름 대신 사용자 정의 값을 사용하려는 경우 다음과 같이 바인딩을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7383e3aba09b180a7822830aba0d585c9562e58a" translate="yes" xml:space="preserve">
          <source>If you would prefer to use a custom value instead of the property name, you can create the same markup as the last example with a binding like this:</source>
          <target state="translated">속성 이름 대신 사용자 지정 값을 사용하려는 경우 다음과 같은 바인딩을 사용하여 마지막 예와 동일한 태그를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef951fcf9baa83009dd56e3643da116682c54bc7" translate="yes" xml:space="preserve">
          <source>If you'd like to control the order in which initializers run, you can use the &lt;code&gt;before&lt;/code&gt; and/or &lt;code&gt;after&lt;/code&gt; options:</source>
          <target state="translated">이니셜 라이저 실행 순서를 제어하려면 &lt;code&gt;before&lt;/code&gt; 및 / 또는 &lt;code&gt;after&lt;/code&gt; 를 사용할 수 있습니다 옵션을 있습니다.</target>
        </trans-unit>
        <trans-unit id="45b89a3010d6df4cb0e7dba26234407d7a5f7c7c" translate="yes" xml:space="preserve">
          <source>If you'd like to inject a service with the same name as the property, simply leave off the service name (the dasherized version of the name will be used):</source>
          <target state="translated">속성과 이름이 같은 서비스를 삽입하려면 서비스 이름을 그대로 두십시오 (대칭 된 이름의 이름이 사용됨).</target>
        </trans-unit>
        <trans-unit id="939b88d019a84732f9158e6c111ba853e355c75e" translate="yes" xml:space="preserve">
          <source>If you're looking at a piece of documentation written using HTML syntax, you can use the syntax as-is in your template, and use &lt;code&gt;{{&lt;/code&gt; to insert dynamic content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecef890c46f90631ec33e00e6354051b6179d833" translate="yes" xml:space="preserve">
          <source>If you're new to CSS, we recommend &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps&quot;&gt;the MDN guide for learning it&lt;/a&gt;, as it is fairly comprehensive and up to date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabdc658be96cb43330f57905df4246ea69e9494" translate="yes" xml:space="preserve">
          <source>If you're new to Ember, we recommend starting with the &lt;a href=&quot;https://emberjs.com/learn&quot;&gt;Quick start and Tutorials&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e15ac6c321d6b3b8297ac1d81ea98633ae60a6e" translate="yes" xml:space="preserve">
          <source>If you're new to HTML, we recommend &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics&quot;&gt;Mozilla's HTML Tutorial&lt;/a&gt; is fairly comprehensive, and the MDN site is one of the best resources for learning about web APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7173ef0329136892c0bbdcd05db7d6f43e0903af" translate="yes" xml:space="preserve">
          <source>If you're new to JavaScript, here are some excellent introductory materials:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37b9d02aefb6b34dfafabb6d8dd83ebfcc3ec25" translate="yes" xml:space="preserve">
          <source>If you're not sure whether you have Node.js or the right version, run this on your command line:</source>
          <target state="translated">Node.js 또는 올바른 버전인지 확실하지 않은 경우 명령 행에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="095ad1f97dce1fe97dc5ce65f718dbb870d80c50" translate="yes" xml:space="preserve">
          <source>If you're streaming data or implementing an adapter, make sure that you have converted the incoming data into this form. The store's &lt;a href=&quot;#method_normalize&quot;&gt;normalize&lt;/a&gt; method is a convenience helper for converting a json payload into the form Ember Data expects.</source>
          <target state="translated">데이터를 스트리밍하거나 어댑터를 구현하는 경우 수신 데이터를이 양식으로 변환했는지 확인하십시오. 상점의 &lt;a href=&quot;#method_normalize&quot;&gt;정규화&lt;/a&gt; 방법은 json 페이로드를 Ember Data가 예상하는 형식으로 변환하는 데 편리한 도우미입니다.</target>
        </trans-unit>
        <trans-unit id="4499fbbc3c1257b05e901ef0dd529431f90fba50" translate="yes" xml:space="preserve">
          <source>If you're streaming data or implementing an adapter, make sure that you have converted the incoming data into this form. The store's &lt;a href=&quot;../classes/store/methods#normalize&quot;&gt;normalize&lt;/a&gt; method is a convenience helper for converting a json payload into the form Ember Data expects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a43f033db09904a15426d2b32f26a6795aa6c8" translate="yes" xml:space="preserve">
          <source>If you're unsure whether or not a given object will be a proxy or not, you can still use Ember's &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cb66b4e4103786779634f2b5a26ced432e9239" translate="yes" xml:space="preserve">
          <source>If you're using the &lt;a href=&quot;https://github.com/embersherpa/ember-cli-app-version&quot;&gt;ember-cli-app-version&lt;/a&gt; addon, your application's name and version will be added to the list automatically.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/embersherpa/ember-cli-app-version&quot;&gt;ember-cli-app-version&lt;/a&gt; 애드온을 사용하는 경우 응용 프로그램의 이름과 버전이 목록에 자동으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="251344c7bd4f41e910f469092d20ca8445eb6c13" translate="yes" xml:space="preserve">
          <source>If your Ember application is one of multiple web applications served from the same domain, it may be necessary to indicate to the router what the root URL for your Ember application is. By default, Ember will assume it is served from the root of your domain.</source>
          <target state="translated">Ember 응용 프로그램이 동일한 도메인에서 제공되는 여러 웹 응용 프로그램 중 하나 인 경우, Ember 응용 프로그램의 루트 URL이 라우터에 표시되어야합니다. 기본적으로 Ember는 도메인 루트에서 제공한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="8d27804a2a749eb80e7bf048f25dc0b3bdadc54e" translate="yes" xml:space="preserve">
          <source>If your adapter implements &lt;code&gt;findMany&lt;/code&gt;, setting this to &lt;code&gt;true&lt;/code&gt; will cause &lt;code&gt;findRecord&lt;/code&gt; requests triggered within the same &lt;code&gt;runloop&lt;/code&gt; to be coalesced into one or more calls to &lt;code&gt;adapter.findMany&lt;/code&gt;. The number of calls made and the records contained in each call can be tuned by your adapter's &lt;code&gt;groupRecordsForHasMany&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742e30ce64be00f77f455b32e39444bc8de185c9" translate="yes" xml:space="preserve">
          <source>If your app has resolved all deprecations present in a given version, you may specify that version as your &quot;compatibility&quot; version to remove the code that supported the deprecated behavior from your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0658ce22f6a989ae80d44440ffc4049e3cb38b" translate="yes" xml:space="preserve">
          <source>If your app only reads data but never writes data, it is not necessary to implement the methods for create, update, and delete. This extends to all of the store's find methods with the exception of &lt;code&gt;findRecord&lt;/code&gt; (&lt;code&gt;findAll&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;queryRecord&lt;/code&gt;): if you do not use the store method in your app then your Adapter does not need the method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01adb9a5dbaecbeb2cbacc35aaf248b93c6d044" translate="yes" xml:space="preserve">
          <source>If your app seems slow to load, check if the delay is caused by a slow response from the back end API. Use your browser's developer tools to investigate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4326fc05c59c8511d5fdb9092ce5f660b8db68" translate="yes" xml:space="preserve">
          <source>If your application receives and sends data, you want to show that you can take these actions successfully. You also want to prove that you can handle the error states correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973fc484ea03a53b30102729d4440c63774ce2ed" translate="yes" xml:space="preserve">
          <source>If your application relies on those behaviors it is still recommended that you &lt;em&gt;disable&lt;/em&gt; this feature, and simply add an appropriate element to &lt;code&gt;app/templates/application.hbs&lt;/code&gt; wrapping that template's &lt;code&gt;{{outlet}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25186c61f15c11ab806be5a9286f8dae6f3fe16" translate="yes" xml:space="preserve">
          <source>If your backend has some consistent rules you can define an &lt;code&gt;adapter:application&lt;/code&gt;. The &lt;code&gt;adapter:application&lt;/code&gt; will get priority over the default Adapter, however it will still be superseded by model specific Adapters.</source>
          <target state="translated">백엔드에 일관된 규칙이있는 경우 &lt;code&gt;adapter:application&lt;/code&gt; 을 정의 할 수 있습니다 . &lt;code&gt;adapter:application&lt;/code&gt; , 그러나 그것은 여전히 모델의 특정 어댑터로 대체 될 것이며, 기본 어댑터를 통해 우선 순위를 얻을 것이다.</target>
        </trans-unit>
        <trans-unit id="846ea89f048b79b140e43b6fe9e234481fd9915d" translate="yes" xml:space="preserve">
          <source>If your enumerable is composed of objects, there is a &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_mapBy&quot;&gt;&lt;code&gt;mapBy()&lt;/code&gt;&lt;/a&gt; method that will extract the named property from each of those objects in turn and return a new array:</source>
          <target state="translated">열거 가능 객체가 객체로 구성된 경우 각 객체에서 명명 된 속성을 차례로 추출하여 새 배열을 반환하는 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_mapBy&quot;&gt; &lt;code&gt;mapBy()&lt;/code&gt; &lt;/a&gt; 메서드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b0f2b0bb38cb9adaff193b9dd72e74317a4abb8" translate="yes" xml:space="preserve">
          <source>If your server API or your adapter only provides array responses but you wish to retrieve just a single record, you can alternatively use the &lt;code&gt;query()&lt;/code&gt; method as follows:</source>
          <target state="translated">서버 API 또는 어댑터가 배열 응답 만 제공하지만 단일 레코드 만 검색하려는 경우 다음과 같이 &lt;code&gt;query()&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2794ed79e3c45633ebfef49b1bf16d8dcd5f100" translate="yes" xml:space="preserve">
          <source>If your server endpoint supports the use of a &lt;a href=&quot;https://jsonapi.org/format/#fetching-sparse-fieldsets&quot;&gt;'fields' query parameter&lt;/a&gt;, you can use pass those fields through to your server. At this point in time, this requires a few manual steps on your part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4058c0ce711315ee0b4423e4f1c3a010f93ec5" translate="yes" xml:space="preserve">
          <source>If your state does not set a value for a given flag, the value will be inherited from its parent (or the first place in the state hierarchy where it is defined).</source>
          <target state="translated">상태가 지정된 플래그에 대한 값을 설정하지 않으면 값이 상위 (또는 정의 된 상태 계층의 첫 번째 위치)에서 상속됩니다.</target>
        </trans-unit>
        <trans-unit id="2db4b38bb9f3c04d00f26e64fe62f8e77fdce964" translate="yes" xml:space="preserve">
          <source>Imagine we are writing a web app for a site that lets users list their properties to rent. At any given time, we should be able to answer questions about the current state like &lt;em&gt;What rental are they looking at?&lt;/em&gt; and &lt;em&gt;Are they editing it?&lt;/em&gt; In Ember, the answer to these questions is determined by the URL. The URL can be set in a few ways:</source>
          <target state="translated">사용자가 임대 할 속성을 나열 할 수있는 사이트 용 웹 앱을 작성한다고 상상해보십시오. 언제든 &lt;em&gt;어떤 임대료를보고 있습니까?&lt;/em&gt; 와 같은 현재 상태에 대한 질문에 언제든지 답변 할 수 있어야합니다 &lt;em&gt;. &lt;/em&gt;그리고 &lt;em&gt;그들은 그것을 편집하고 있습니까? &lt;/em&gt;Ember에서 이러한 질문에 대한 답변은 URL에 의해 결정됩니다. 몇 가지 방법으로 URL을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf8439d9c935e45049eff75e911e1ac674191f03" translate="yes" xml:space="preserve">
          <source>Imagine we are writing a web app for managing a blog. At any given time, we should be able to answer questions like &lt;em&gt;What post are they looking at?&lt;/em&gt; and &lt;em&gt;Are they editing it?&lt;/em&gt; In Ember.js, the answer to these questions is determined by the URL.</source>
          <target state="translated">블로그 관리를위한 웹앱을 작성한다고 상상해보십시오. 언제라도 &lt;em&gt;어떤 게시물을보고 있습니까?&lt;/em&gt; 와 같은 질문에 답변 할 수 있어야합니다 &lt;em&gt;. &lt;/em&gt;그리고 &lt;em&gt;그들은 그것을 편집하고 있습니까? &lt;/em&gt;Ember.js에서 이러한 질문에 대한 답변은 URL에 의해 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="cdd8215fd5579fcac349f1f3d66eb2b974247b86" translate="yes" xml:space="preserve">
          <source>Imagine we're building an application where users can have accounts. We need to build the UI for users to delete their account. Because we don't want users to accidentally delete their accounts, we'll build a button that requires the user to confirm in order to trigger some action.</source>
          <target state="translated">사용자가 계정을 가질 수있는 응용 프로그램을 구축한다고 가정합니다. 사용자가 계정을 삭제하려면 UI를 구축해야합니다. 사용자가 실수로 자신의 계정을 삭제하는 것을 방지하기 위해 사용자가 조치를 취하기 위해 확인해야하는 버튼을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5500a79f8100b20c15ba44761eb5ee566dd17036" translate="yes" xml:space="preserve">
          <source>Imagine you have a typeahead component that uses &lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_debounce&quot;&gt;&lt;code&gt;Ember.run.debounce&lt;/code&gt;&lt;/a&gt; to limit requests to the server, and you want to verify that results are displayed after typing a character.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_debounce&quot;&gt; &lt;code&gt;Ember.run.debounce&lt;/code&gt; &lt;/a&gt; 를 사용 하여 서버에 대한 요청을 제한 하는 자동 완성 구성 요소가 있고 문자를 입력 한 후 결과가 표시되는지 확인한다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="d531edafccbe882419652efc4f34d29881ec273b" translate="yes" xml:space="preserve">
          <source>Imagine you have a typeahead component that uses &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Frunloop/methods#debounce&quot;&gt;&lt;code&gt;Ember.run.debounce&lt;/code&gt;&lt;/a&gt; to limit requests to the server, and you want to verify that results are displayed after typing a character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d307e4de142d3aecdd704f2f1113fa3bd42984" translate="yes" xml:space="preserve">
          <source>Imagine you have the following component that changes its title when a button is clicked on:</source>
          <target state="translated">단추를 클릭 할 때 제목을 변경하는 다음 구성 요소가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="6176b6ffa892fddc99b619072a50ff9436c44f6a" translate="yes" xml:space="preserve">
          <source>Imagine you have the following component that uses a location service to display the city and country of your current location:</source>
          <target state="translated">위치 서비스를 사용하여 현재 위치의 도시 및 국가를 표시하는 다음 구성 요소가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="79f5c060ec68d1e4cd89cdcfa7e6e383991271b1" translate="yes" xml:space="preserve">
          <source>Imagine your app is in a route that's displaying a complex form for the user to fill out and the user accidentally navigates backwards. Unless the transition is prevented, the user might lose all of the progress they made on the form, which can make for a pretty frustrating user experience.</source>
          <target state="translated">앱이 복잡한 양식을 표시하는 경로에 있고 사용자가 실수로 뒤로 탐색한다고 상상해보십시오. 전환이 방지되지 않으면 사용자는 양식에서 수행 한 모든 진행 상황을 잃을 수 있으며, 이는 매우 실망스러운 사용자 경험을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="49d9f7f0f7530948a86e88ddfedd6530f0caaf23" translate="yes" xml:space="preserve">
          <source>Immediate allows you to run the function immediately, but debounce other calls for this function until the wait time has elapsed. If &lt;code&gt;debounce&lt;/code&gt; is called again before the specified time has elapsed, the timer is reset and the entire period must pass again before the method can be called again.</source>
          <target state="translated">즉시를 사용하면 함수를 즉시 실행할 수 있지만 대기 시간이 경과 할 때까지이 함수에 대한 다른 호출을 디 바운스 할 수 있습니다. 경우 &lt;code&gt;debounce&lt;/code&gt; 지정된 시간이 경과하기 전에 다시 호출, 타이머가 재설정되고 전체 기간은 메소드가 다시 호출 할 수 있습니다 전에 다시 통과해야합니다.</target>
        </trans-unit>
        <trans-unit id="03e599ee1db55ad6e5963182dcade9bf19ce4f3f" translate="yes" xml:space="preserve">
          <source>Implement &lt;code&gt;buildQuery&lt;/code&gt; in your adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1eee007d228e27ce11b63da7796f4277398eb6f" translate="yes" xml:space="preserve">
          <source>Implement an Ember.onerror hook to log all errors in production</source>
          <target state="translated">프로덕션의 모든 오류를 기록하기 위해 Ember.onerror 훅 구현</target>
        </trans-unit>
        <trans-unit id="d4ded73113c17939544427e051fc4e1b10bdd9e2" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass to handle the creation of new records.</source>
          <target state="translated">새 레코드 작성을 처리하기 위해 서브 클래스에서이 메소드를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="848b4a0426db8242209c99b16a964aa82ef6c7b2" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass to handle the deletion of a record.</source>
          <target state="translated">레코드 삭제를 처리하기 위해 서브 클래스에서이 메소드를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="a8c2c7d66ed7442f6c9d8636a2615c54a24453e2" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass to handle the updating of a record.</source>
          <target state="translated">레코드 업데이트를 처리하기 위해 서브 클래스에서이 메소드를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="59900d07c9905339bce32756f7c459df8b522597" translate="yes" xml:space="preserve">
          <source>Implementations</source>
          <target state="translated">Implementations</target>
        </trans-unit>
        <trans-unit id="73f5c415ef3fb2c03540f0bdab82fe646892d38f" translate="yes" xml:space="preserve">
          <source>Implementing</source>
          <target state="translated">Implementing</target>
        </trans-unit>
        <trans-unit id="5749b6c17deb5f67f01bdaeb1e175622d2081b94" translate="yes" xml:space="preserve">
          <source>Implementing Acceptance Tests</source>
          <target state="translated">수락 테스트 구현</target>
        </trans-unit>
        <trans-unit id="9fc6530e3b3f8ddfeab09f763833df3f225faa7e" translate="yes" xml:space="preserve">
          <source>Implementing In Your Own Code</source>
          <target state="translated">자신의 코드로 구현</target>
        </trans-unit>
        <trans-unit id="6ec10c6db7299bad88219c843b13ad7f2bcef332" translate="yes" xml:space="preserve">
          <source>Implementing a Serializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48e7c887c3e035948d4f434642f33256ee7c414" translate="yes" xml:space="preserve">
          <source>Implementing an Adapter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb9d2676aafbb43ec570668a35ad5e6dbb68374" translate="yes" xml:space="preserve">
          <source>Implementing coalescing using this flag and the associated methods does not always offer the right level of correctness, timing control or granularity. If your application would be better suited coalescing across multiple types, coalescing for longer than a single runloop, or with a more custom request structure, coalescing within your application adapter may prove more effective.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085b4f177ad0073a59d881f34199b37baba61a3b" translate="yes" xml:space="preserve">
          <source>Implementing the Action</source>
          <target state="translated">행동 구현</target>
        </trans-unit>
        <trans-unit id="1af9db788eeb484422c8e1485dd28bfe2aa85747" translate="yes" xml:space="preserve">
          <source>Implements some standard methods for copying an object. Add this mixin to any object you create that can create a copy of itself. This mixin is added automatically to the built-in array.</source>
          <target state="translated">객체 복사를위한 몇 가지 표준 방법을 구현합니다. 자신의 사본을 만들 수있는 모든 객체에이 믹스 인을 추가하십시오. 이 믹스 인은 내장 어레이에 자동으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="686d97d62922d0e28ae5f215f382872f4fc0ace1" translate="yes" xml:space="preserve">
          <source>Import the console</source>
          <target state="translated">콘솔 가져 오기</target>
        </trans-unit>
        <trans-unit id="e1793c94681387a77e7907f945d00e52213d9184" translate="yes" xml:space="preserve">
          <source>Importantly, you do &lt;em&gt;not&lt;/em&gt; have to use &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; when reading or updating computed properties, as was noted in the computed property section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda16eeb69479eb718ce363db7020874beaac45c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Component&lt;/code&gt; the &lt;code&gt;classNames&lt;/code&gt;, &lt;code&gt;classNameBindings&lt;/code&gt; and &lt;code&gt;attributeBindings&lt;/code&gt; properties are concatenated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f669d835da282209b875552f36c9c65a13c0d8e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Ember.Component&lt;/code&gt; the &lt;code&gt;classNames&lt;/code&gt;, &lt;code&gt;classNameBindings&lt;/code&gt; and &lt;code&gt;attributeBindings&lt;/code&gt; properties are concatenated.</source>
          <target state="translated">에서 &lt;code&gt;Ember.Component&lt;/code&gt; &lt;code&gt;classNames&lt;/code&gt; , &lt;code&gt;classNameBindings&lt;/code&gt; 및 &lt;code&gt;attributeBindings&lt;/code&gt; 의 속성이 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="af45ead0e06672506b4213354f87e72e4fa00cc4" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Ember.Route&lt;/code&gt; the &lt;code&gt;queryParams&lt;/code&gt; property is merged.</source>
          <target state="translated">에서 &lt;code&gt;Ember.Route&lt;/code&gt; &lt;code&gt;queryParams&lt;/code&gt; 의 속성이 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="4a8298375728fbf74cd794ad45b08edcaab13acd" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Route&lt;/code&gt; the &lt;code&gt;queryParams&lt;/code&gt; property is merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363556950c4e3e42367fb50a0ce29bf1c0ca49ef" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app/components/list-filter.js&lt;/code&gt;, we have as the top-level element rendered by the component a class called &lt;code&gt;list-filter&lt;/code&gt;. We locate the search input within the component using the selector &lt;code&gt;.list-filter input&lt;/code&gt;, since we know that there is only one input element located in the list-filter component.</source>
          <target state="translated">에서 &lt;code&gt;app/components/list-filter.js&lt;/code&gt; , 우리는 부품 A 클래스라는 렌더링 최상위 요소로이 &lt;code&gt;list-filter&lt;/code&gt; . 선택기 &lt;code&gt;.list-filter input&lt;/code&gt; 을 사용하여 구성 요소 내에서 검색 입력을 찾습니다 . 목록 필터 구성 요소에는 입력 요소가 하나만 있다는 것을 알기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="ad8e5dcf45b31e402466165d21236e5680154868" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app/templates/rentals.hbs&lt;/code&gt;, we wrapped each rental display in an &lt;code&gt;article&lt;/code&gt; element, and gave it a class called &lt;code&gt;listing&lt;/code&gt;. We will use the listing class to find out how many rentals are shown on the page.</source>
          <target state="translated">에서 &lt;code&gt;app/templates/rentals.hbs&lt;/code&gt; , 우리는 각 임대 디스플레이 감싸 &lt;code&gt;article&lt;/code&gt; 요소를, 그리고 그것을라는 클래스 준 &lt;code&gt;listing&lt;/code&gt; . 우리는 리스팅 클래스를 사용하여 페이지에 얼마나 많은 임대가 표시되는지 알아낼 것입니다.</target>
        </trans-unit>
        <trans-unit id="a4b5455ab5e863cb45f23c6155964d959ba4d78e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;tests/helpers/start-app.js&lt;/code&gt; you need to import the helper file: it will be registered then.</source>
          <target state="translated">에서 &lt;code&gt;tests/helpers/start-app.js&lt;/code&gt; 하면 도우미 파일을 가져와야 : 그 다음에 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="b1f4488bf4216cd4bc33d2fd1f75097a5b82ebe6" translate="yes" xml:space="preserve">
          <source>In Ember Data a Serializer is used to serialize and deserialize records when they are transferred in and out of an external source. This process involves normalizing property names, transforming attribute values and serializing relationships.</source>
          <target state="translated">Ember Data에서 Serializer는 레코드가 외부 소스 안팎으로 전송 될 때 레코드를 직렬화 및 직렬화 해제하는 데 사용됩니다. 이 프로세스에는 속성 이름 정규화, 속성 값 변환 및 관계 직렬화가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e8922e3d50ca93e7c84b802b56fd99728ccbe9b7" translate="yes" xml:space="preserve">
          <source>In Ember Data the convention is to camelize attribute names on a model. For example:</source>
          <target state="translated">Ember Data에서 관례는 모델의 속성 이름을 camelize하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2fc8022812cbb05f65f726e0a742da0716429216" translate="yes" xml:space="preserve">
          <source>In Ember Data, an Adapter determines how data is persisted to a backend data store. Things such as the backend host, URL format and headers used to talk to a REST API can all be configured in an adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3423404267da66f099eae4647eaa045a734aa6" translate="yes" xml:space="preserve">
          <source>In Ember Data, each model is represented by a subclass of &lt;code&gt;Model&lt;/code&gt; that defines the attributes, relationships, and behavior of the data that you present to the user.</source>
          <target state="translated">Ember Data에서 각 모델은 사용자에게 제공하는 데이터의 속성, 관계 및 동작을 정의하는 &lt;code&gt;Model&lt;/code&gt; 의 하위 클래스로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="d02d4cfdea4222f52a04195a14c59a11b26e987c" translate="yes" xml:space="preserve">
          <source>In Ember Data, models are objects that represent the underlying data that your application presents to the user. Note that Ember Data models are a different concept than the &lt;a href=&quot;../routing/specifying-a-routes-model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; method on Routes, although they share the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad859597c92ac410ac93e98631ea9d8d33ab905e" translate="yes" xml:space="preserve">
          <source>In Ember Data, models are objects that represent the underlying data that your application presents to the user. Note that Ember Data models are a different concept than the &lt;a href=&quot;https://guides.emberjs.com/routing/specifying-a-routes-model/&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; method on Routes, although they share the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020e90ae09785d28cf10b4def255217593210b22" translate="yes" xml:space="preserve">
          <source>In Ember Data, serializers format the data sent to and received from the backend store. By default, Ember Data serializes data using the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt; format. If your backend uses a different format, Ember Data allows you to customize the serializer or use a different serializer entirely.</source>
          <target state="translated">Ember Data에서 시리얼 라이저는 백엔드 저장소로 보내고받는 데이터를 포맷합니다. 기본적으로 Ember Data는 &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt; 형식을 사용하여 데이터를 직렬화 합니다. 백엔드가 다른 형식을 사용하는 경우 Ember Data를 사용하면 직렬 변환기를 사용자 정의하거나 다른 직렬 변환기를 완전히 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="282e8c9c0135b0dc8b05f0f199c09ac3e636e479" translate="yes" xml:space="preserve">
          <source>In Ember Data, serializers format the data sent to and received from the backend store. By default, Ember Data serializes data using the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON:API&lt;/a&gt; format. If your backend uses a different format, Ember Data allows you to customize the serializer or use a different serializer entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecd6eaaa78b6b77faca6acf56bc4d2b25bc6da4" translate="yes" xml:space="preserve">
          <source>In Ember Data, the Adapter determines how data is persisted to a backend data store, such as the URL format and headers for a REST API. (The format of the data itself is determined by the &lt;a href=&quot;../customizing-serializers&quot;&gt;serializer&lt;/a&gt;.) Ember Data's default Adapter has some built-in assumptions of how a &lt;a href=&quot;http://jsonapi.org/&quot;&gt;REST API should look&lt;/a&gt;. If your backend conventions differ from these assumptions Ember Data makes it easy to change its functionality by swapping out or extending the default Adapter.</source>
          <target state="translated">Ember Data에서 어댑터는 REST API의 URL 형식 및 헤더와 같이 백엔드 데이터 저장소에 데이터가 지속되는 방식을 결정합니다. (데이터 자체의 형식은 &lt;a href=&quot;../customizing-serializers&quot;&gt;serializer에&lt;/a&gt; 의해 결정됩니다 .) Ember Data의 기본 어댑터에는 &lt;a href=&quot;http://jsonapi.org/&quot;&gt;REST API의 모양&lt;/a&gt; 에 대한 몇 가지 기본 가정이 있습니다. 백엔드 규칙이 이러한 가정과 다른 경우 Ember Data를 사용하면 기본 어댑터를 교체하거나 확장하여 기능을 쉽게 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86329399bd3d3c6c60a2c8637b55e931796daf7a" translate="yes" xml:space="preserve">
          <source>In Ember Octane, actions are no longer defined on the &lt;code&gt;actions&lt;/code&gt; object of a component or controller. Instead, they are standard class methods decorated with the &lt;code&gt;@action&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db44b947e78ed42835c3e89cbb1845b2188747cb" translate="yes" xml:space="preserve">
          <source>In Ember, each component can have a property called &lt;code&gt;actions&lt;/code&gt;, where you put functions that can be &lt;a href=&quot;https://guides.emberjs.com/templates/actions/&quot;&gt;invoked by the user interacting with the component itself&lt;/a&gt;, or by child components.</source>
          <target state="translated">Ember에서 각 구성 요소는 &lt;code&gt;actions&lt;/code&gt; 이라는 속성을 가질 수 있으며 &lt;a href=&quot;https://guides.emberjs.com/templates/actions/&quot;&gt;, 사용자가 구성 요소 자체와 상호 작용&lt;/a&gt; 하거나 하위 구성 요소에 의해 호출 될 수있는 함수를 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5c810f1dfecc39ef45b18228f832258388aade70" translate="yes" xml:space="preserve">
          <source>In Ember, functions that automatically run during rendering or setup are commonly referred to as &quot;hooks&quot;. When a user first visits the &lt;code&gt;/favorite-posts&lt;/code&gt; route, the &lt;code&gt;model&lt;/code&gt; hook in &lt;code&gt;app/routes/favorite-posts.js&lt;/code&gt; will automatically run. Here's an example of a model hook in use within a route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ebdf263834b3a8deec07fdd38c511e4b452491" translate="yes" xml:space="preserve">
          <source>In Ember, route handlers are responsible for loading the model with data for the page. It loads the data in a function called &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;model&lt;/code&gt; function acts as a &lt;strong&gt;hook&lt;/strong&gt;, meaning that Ember will call it for us during different times in our app. The model function we've added to our &lt;code&gt;rentals&lt;/code&gt; route handler will be called when a user navigates to the rentals route via root URL &lt;code&gt;http://localhost:4200&lt;/code&gt;, or via &lt;code&gt;http://localhost:4200/rentals&lt;/code&gt;.</source>
          <target state="translated">Ember에서 라우트 핸들러는 페이지에 대한 데이터가있는 모델을로드합니다. &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt; 이라는 함수에 데이터를로드합니다 . &lt;code&gt;model&lt;/code&gt; 함수는 역할을 &lt;strong&gt;훅&lt;/strong&gt; 엠버는 우리의 응용 프로그램에서 다른 시간 동안 우리를 호출합니다 것을 의미한다. &lt;code&gt;rentals&lt;/code&gt; 경로 처리기에 추가 한 모델 함수는 사용자가 루트 URL &lt;code&gt;http://localhost:4200&lt;/code&gt; 또는 &lt;code&gt;http://localhost:4200/rentals&lt;/code&gt; 를 통해 임대 경로를 탐색 할 때 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="f66f0e171cccc0300caf2d08e6c8d06bc62b260f" translate="yes" xml:space="preserve">
          <source>In Ember, this is accomplished by defining routes with &lt;a href=&quot;../defining-your-routes#toc_dynamic-segments&quot;&gt;dynamic segments&lt;/a&gt;.</source>
          <target state="translated">Ember에서는 &lt;a href=&quot;../defining-your-routes#toc_dynamic-segments&quot;&gt;동적 세그먼트로&lt;/a&gt; 경로를 정의하여이 작업을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="319c22e42032038fb4fd19234909a3cb8451c3d4" translate="yes" xml:space="preserve">
          <source>In Ember, those smaller pieces are called &lt;em&gt;components&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d52c5d2be424b7a7b55ef72d7cd326d708e343" translate="yes" xml:space="preserve">
          <source>In Ember, when we want to make a new page that can be visited using a URL, we need to generate a &quot;route&quot; using Ember CLI. For a quick overview of how Ember structures things, see &lt;a href=&quot;https://guides.emberjs.com/getting-started/core-concepts/&quot;&gt;our diagram on the Core Concepts page&lt;/a&gt;.</source>
          <target state="translated">Ember에서 URL을 사용하여 방문 할 수있는 새 페이지를 만들려면 Ember CLI를 사용하여 &quot;라우트&quot;를 생성해야합니다. Ember가 사물을 어떻게 구성하는지에 대한 간단한 개요 &lt;a href=&quot;https://guides.emberjs.com/getting-started/core-concepts/&quot;&gt;는 핵심 개념 페이지의 다이어그램을 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ca956c24b0f6ba6fa8075e34fb2089e115484a51" translate="yes" xml:space="preserve">
          <source>In Ember.js, an enumerable is any object that contains a number of child objects, and which allows you to work with those children using the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable&lt;/a&gt; API. The most common enumerable in the majority of apps is the native JavaScript array, which Ember.js extends to conform to the enumerable interface.</source>
          <target state="translated">Ember.js에서 열거 형은 다수의 자식 개체를 포함하고 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable&lt;/a&gt; API를 사용하여 해당 자식과 작업 할 수있는 개체 입니다. 대다수의 앱에서 가장 일반적인 열거 형은 기본 자바 스크립트 배열이며, Ember.js는 열거 가능한 인터페이스를 준수하도록 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="bcfca2e33f82eda25d972c5b0ed9e2423b86fb65" translate="yes" xml:space="preserve">
          <source>In EmberData a &lt;code&gt;Model&lt;/code&gt; is a class defining the attributes and relationships of a specific resource &lt;code&gt;type&lt;/code&gt; (model name). In this sense it represents a static &quot;schema&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089ce63278589477ad3765987e2c339d8827d372" translate="yes" xml:space="preserve">
          <source>In JavaScript, we refer to it as &lt;code&gt;this.args.multiple&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ea1e88c158ce69803a697c59dbfa5325d83e23" translate="yes" xml:space="preserve">
          <source>In Octane, template-only components have only an &lt;code&gt;hbs&lt;/code&gt; file and no &lt;code&gt;JavaScript&lt;/code&gt; file. Behind the scenes, template-only components inherit from &lt;code&gt;'@glimmer/component'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a2cca731908d50be0c6f2ce42a60dbdecae59f" translate="yes" xml:space="preserve">
          <source>In QUnit, you can exclude tests by adding an exclamation point to the beginning of the filter, e.g. &lt;code&gt;ember test --filter=&quot;!Acceptance&quot;&lt;/code&gt;. In Mocha, &lt;code&gt;ember test --filter=&quot;Acceptance&quot; --invert&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ce4856798aa530d952b1ebe2ecec3f3b250ee7" translate="yes" xml:space="preserve">
          <source>In a nutshell, computed properties let you declare functions as properties. You create one by defining a computed property as a function, which Ember will automatically call when you ask for the property. You can then use it the same way you would any normal, static property.</source>
          <target state="translated">간단히 말해서 계산 된 속성을 통해 함수를 속성으로 선언 할 수 있습니다. 계산 된 속성을 함수로 정의하여 속성을 만들면 속성을 요청할 때 Ember가 자동으로 호출합니다. 그런 다음 일반 정적 속성과 같은 방식으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d191d8024044c3d2bb0916e344bb9d2781826852" translate="yes" xml:space="preserve">
          <source>In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.</source>
          <target state="translated">프로덕션 빌드에서이 메소드는 빈 함수 (NOP)로 정의됩니다. Ember 자체에서이 메소드의 사용은 ember.prod.js 빌드에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="9281e00ac840444526df6694bf8372391ca752a0" translate="yes" xml:space="preserve">
          <source>In a route's &lt;code&gt;model()&lt;/code&gt; method, you return whatever data you want to make available to the template. If you need to fetch data asynchronously, the &lt;code&gt;model()&lt;/code&gt; method supports any library that uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;JavaScript Promises&lt;/a&gt;.</source>
          <target state="translated">라우트의 &lt;code&gt;model()&lt;/code&gt; 메소드에서 템플릿에 제공 할 데이터를 반환합니다. 비동기식으로 데이터를 가져와야하는 경우 &lt;code&gt;model()&lt;/code&gt; 메소드는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;JavaScript Promises&lt;/a&gt; 를 사용하는 모든 라이브러리를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="645718c27192457668e42ce464d88a9c1a25ef06" translate="yes" xml:space="preserve">
          <source>In a template, you can use &lt;code&gt;if&lt;/code&gt; to conditionally render content. There are 2 styles of &lt;code&gt;if&lt;/code&gt;: &lt;strong&gt;block&lt;/strong&gt; and &lt;strong&gt;inline&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6e40d0dc32e6016d395420700270b65bcc25b4" translate="yes" xml:space="preserve">
          <source>In a way, this is like substitution: references to &lt;code&gt;@title&lt;/code&gt; in the component's template are replaced by the value passed in from the outside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8450844a292c3442cc4e0a46efcffc690c49dda0" translate="yes" xml:space="preserve">
          <source>In addition to adding individual links to each route of our app, we'd like to add a common header across the top of our page to display our app's title and its navigation bar.</source>
          <target state="translated">앱의 각 경로에 개별 링크를 추가하는 것 외에도 페이지 상단에 공통 헤더를 추가하여 앱 제목과 탐색 표시 줄을 표시하려고합니다.</target>
        </trans-unit>
        <trans-unit id="7248d7673840d370bb2a00652d49b93067601785" translate="yes" xml:space="preserve">
          <source>In addition to being used as a block expression, the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_link-to&quot;&gt;&lt;code&gt;link-to&lt;/code&gt;&lt;/a&gt; component can also be used in inline form by specifying the link text as the first argument to the component:</source>
          <target state="translated">블록 표현식으로 사용되는 것 외에도 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_link-to&quot;&gt; &lt;code&gt;link-to&lt;/code&gt; &lt;/a&gt; 구성 요소는 링크 텍스트를 구성 요소의 첫 번째 인수로 지정하여 인라인 형식으로 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5953bb9c3faa1e5036e7ae03005755f4e8bd4841" translate="yes" xml:space="preserve">
          <source>In addition to changing the property, &lt;code&gt;set()&lt;/code&gt; will also register a property change with the object. Unless you have placed this call inside of a &lt;code&gt;beginPropertyChanges()&lt;/code&gt; and &lt;code&gt;endPropertyChanges(),&lt;/code&gt; any &quot;local&quot; observers (i.e. observer methods declared on the same object), will be called immediately. Any &quot;remote&quot; observers (i.e. observer methods declared on another object) will be placed in a queue and called at a later time in a coalesced manner.</source>
          <target state="translated">속성을 변경하는 것 외에도 &lt;code&gt;set()&lt;/code&gt; 은 객체에 속성 변경을 등록합니다. &lt;code&gt;beginPropertyChanges()&lt;/code&gt; 및 &lt;code&gt;endPropertyChanges(),&lt;/code&gt; 안에이 호출을 배치하지 않으면 &quot;로컬&quot;옵저버 (예 : 동일한 객체에 선언 된 옵저버 메서드)가 즉시 호출됩니다. &quot;원격&quot;관찰자 (즉, 다른 객체에 선언 된 관찰자 메서드)는 대기열에 배치되고 나중에 통합 된 방식으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="94b19db7074a456639b43a683fd4acf06c9ec937" translate="yes" xml:space="preserve">
          <source>In addition to configuring your app itself, you can also configure Ember CLI. These configurations can be made by adding them to the &lt;code&gt;.ember-cli&lt;/code&gt; file in your application's root. Many can also be made by passing them as arguments to the command line program.</source>
          <target state="translated">앱 자체를 구성하는 것 외에도 Ember CLI를 구성 할 수도 있습니다. 이러한 구성은 응용 프로그램 루트 의 &lt;code&gt;.ember-cli&lt;/code&gt; 파일에 추가하여 만들 수 있습니다 . 명령 줄 프로그램에 인수로 전달하여 많은 것을 만들 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d055bf80ed629dd34b651143615ae11138b04a2d" translate="yes" xml:space="preserve">
          <source>In addition to creating your application's router, &lt;code&gt;Application&lt;/code&gt; is also responsible for telling the router when to start routing. Transitions between routes can be logged with the &lt;code&gt;LOG_TRANSITIONS&lt;/code&gt; flag, and more detailed intra-transition logging can be logged with the &lt;code&gt;LOG_TRANSITIONS_INTERNAL&lt;/code&gt; flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04120f2584ff44f86df756f40d954b030cf830f7" translate="yes" xml:space="preserve">
          <source>In addition to creating your application's router, &lt;code&gt;Ember.Application&lt;/code&gt; is also responsible for telling the router when to start routing. Transitions between routes can be logged with the &lt;code&gt;LOG_TRANSITIONS&lt;/code&gt; flag, and more detailed intra-transition logging can be logged with the &lt;code&gt;LOG_TRANSITIONS_INTERNAL&lt;/code&gt; flag:</source>
          <target state="translated">&lt;code&gt;Ember.Application&lt;/code&gt; 은 애플리케이션의 라우터를 생성 할뿐만 아니라 라우터 에게 라우팅 시작시기를 알려주는 역할도합니다. 라우트 사이의 전환은 &lt;code&gt;LOG_TRANSITIONS&lt;/code&gt; 플래그를 사용하여 기록 할 수 있으며 보다 자세한 전환 내 로깅은 &lt;code&gt;LOG_TRANSITIONS_INTERNAL&lt;/code&gt; 플래그를 사용하여 기록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53b810ca88c49148bf8529cc730957d08ba23a00" translate="yes" xml:space="preserve">
          <source>In addition to inspecting the properties above, you can inspect properties that hold Ember objects or arrays. Click on the property's value to inspect it.</source>
          <target state="translated">위의 속성을 검사하는 것 외에도 Ember 객체 또는 배열을 보유하는 속성을 검사 할 수 있습니다. 속성 값을 클릭하여 검사하십시오.</target>
        </trans-unit>
        <trans-unit id="a8a1acf0607c1bdf78f15fa107ca21a225ab0710" translate="yes" xml:space="preserve">
          <source>In addition to normal HTML syntax, Ember allows you to use self-closing syntax (&lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt;) as a shorthand for an opening and closing tag (&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0d0a4a5b5ef9e676466f88a09f5d5e815adf21" translate="yes" xml:space="preserve">
          <source>In addition to normal text, you may also want to have your templates contain HTML elements whose attributes are bound to the controller.</source>
          <target state="translated">일반 텍스트 외에도 템플릿에 속성이 컨트롤러에 바인딩 된 HTML 요소가 포함되도록 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb71985b0bd4715b94d142d94c6c0f1cc1875107" translate="yes" xml:space="preserve">
          <source>In addition to our &lt;code&gt;about&lt;/code&gt; and &lt;code&gt;contact&lt;/code&gt; pages, we want to show a list of rentals that our visitors can look through. So let's add a third route and call it &lt;code&gt;rentals&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;about&lt;/code&gt; 및 &lt;code&gt;contact&lt;/code&gt; 페이지 외에도 방문자가 살펴볼 수있는 대여 목록을 표시하려고합니다. 세 번째 경로를 추가하고 &lt;code&gt;rentals&lt;/code&gt; 이라고하겠습니다 :</target>
        </trans-unit>
        <trans-unit id="221b9fa6557159911efe423de7834a91511421a1" translate="yes" xml:space="preserve">
          <source>In addition to passing a target, you can also include an options hash which you can use to override the method names that will be invoked on the target.</source>
          <target state="translated">대상을 전달하는 것 외에도 대상에서 호출 할 메소드 이름을 대체하는 데 사용할 수있는 옵션 해시도 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf82e6f4f7f4bfd42ef97a57af6350e73eea3b24" translate="yes" xml:space="preserve">
          <source>In addition to passing parameters in by name, you can pass them in by position. In other words, you can invoke the above component example like this:</source>
          <target state="translated">이름으로 매개 변수를 전달하는 것 외에도 위치별로 매개 변수를 전달할 수 있습니다. 즉, 다음과 같이 위의 구성 요소 예제를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa2c90914eaa26f905da98f8871cb00eda57b01f" translate="yes" xml:space="preserve">
          <source>In addition to static HTML content, Ember uses the syntax of &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt; to describe dynamic user interface elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b17c75d75c7564637ba2340bebe7097b7e90480" translate="yes" xml:space="preserve">
          <source>In addition to taking &lt;em&gt;positional arguments&lt;/em&gt; as an array, helpers take &lt;em&gt;named arguments&lt;/em&gt; as a JavaScript object. Here's what that looks like using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Unpacking_fields_from_objects_passed_as_function_parameter&quot;&gt;destructuring syntax&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5fbbcc31f1d06e473058b4269ca9384c6c9271" translate="yes" xml:space="preserve">
          <source>In addition to the callback you can also pass an &lt;code&gt;initialValue&lt;/code&gt;. An error will be raised if you do not pass an initial value and the enumerator is empty.</source>
          <target state="translated">콜백 외에도 &lt;code&gt;initialValue&lt;/code&gt; 를 전달할 수도 있습니다 . 초기 값을 전달하지 않고 열거자가 비어 있으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c07f561ab6435c37fbe776d0dd4427c73cfa82d8" translate="yes" xml:space="preserve">
          <source>In addition to the simple form you've learned so far, components also support being used in &lt;strong&gt;block form&lt;/strong&gt;. In block form, components can be passed a Handlebars template that is rendered inside the component's template wherever the &lt;code&gt;{{yield}}&lt;/code&gt; expression appears.</source>
          <target state="translated">지금까지 배운 간단한 양식 외에도 구성 요소는 &lt;strong&gt;블록 형태&lt;/strong&gt; 로 사용되도록 지원 &lt;strong&gt;합니다&lt;/strong&gt; . 블록 형태로, 컴포넌트는 &lt;code&gt;{{yield}}&lt;/code&gt; 표현식이 나타날 때마다 컴포넌트의 템플리트 내에서 렌더링되는 핸들 바 템플리트를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf9cf93d3121f0c7bd29b4d440bd7c84392b1c08" translate="yes" xml:space="preserve">
          <source>In addition to the template, a component can also have a JavaScript file for this exact purpose. Go ahead and create a &lt;code&gt;.js&lt;/code&gt; file with the same name and in the same directory as our template (&lt;code&gt;app/components/people-list.js&lt;/code&gt;), and paste in the following content:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c993a770121b9ff6c26bcb5f56aeb240292589b7" translate="yes" xml:space="preserve">
          <source>In addition to what is described in the &lt;a href=&quot;../handling-deprecations&quot;&gt;Handling Deprecations guide&lt;/a&gt;, you can turn on the following settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e238e0e235c5e8d42377c6225baf42dcc8ef87a6" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;setupRenderingTest()&lt;/code&gt; allows Ember's renderer to use helpers for rendering and DOM interaction, such as &lt;code&gt;render&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, and &lt;code&gt;fillIn&lt;/code&gt;. You can also use &lt;code&gt;this.element&lt;/code&gt; to access the DOM element that results from &lt;code&gt;render&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30b274e201e1a88dec1b6277ff73650917489e8" translate="yes" xml:space="preserve">
          <source>In addition, some new framework classes, such as Glimmer components, do &lt;em&gt;not&lt;/em&gt; support Ember mixins at all. In the future, mixins will be removed from the framework, and will not be replaced directly. For apps that use mixins, the recommended path is to refactor the mixins to other patterns, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ae3ce25e79e0119cdd5d349af6c0cee5ecd892" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;class&lt;/code&gt; attribute is special, and will be &lt;em&gt;merged&lt;/em&gt; with any existing classes on the element rather than overwriting them. This allows you to progressively add CSS classes to your components, and makes them more flexible overall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa2ae3bb3f54c6fd68deda9a8b87eb3769c2c57" translate="yes" xml:space="preserve">
          <source>In all other cases, specify the &lt;em&gt;method&lt;/em&gt; you want to call when using &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790211173a6525369afd2c1c1d63f10323fec633" translate="yes" xml:space="preserve">
          <source>In almost every case, this is where your app should load data. You can see examples and more information in &lt;a href=&quot;https://guides.emberjs.com/routing/specifying-a-routes-model/&quot;&gt;Specifying a Route's Model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a2dff726af17914875d675aa37e2809297fe95" translate="yes" xml:space="preserve">
          <source>In an application, it is often easier to specify an &lt;code&gt;serializer:application&lt;/code&gt;. However, if you are the author of a community adapter it is important to remember to set this property to ensure Ember does the right thing in the case a user of your adapter does not specify an &lt;code&gt;serializer:application&lt;/code&gt;.</source>
          <target state="translated">응용 프로그램에서는 종종 &lt;code&gt;serializer:application&lt;/code&gt; 을 지정하는 것이 더 쉽습니다 . 그러나 커뮤니티 어댑터의 작성자 인 경우 어댑터 사용자가 &lt;code&gt;serializer:application&lt;/code&gt; 을 지정하지 않은 경우 Ember가 올바른 작업을 수행하도록이 특성을 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e676e9e199dec652bbdb22bafa7bf210e04f6ce8" translate="yes" xml:space="preserve">
          <source>In both cases, Ember will render the content of the component template we created above. The end result will be something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c77afa69f947e520b0cbca942a8919e2127e88f" translate="yes" xml:space="preserve">
          <source>In both of the examples above, &lt;code&gt;incomplete&lt;/code&gt; is an array containing the single incomplete todo:</source>
          <target state="translated">위의 두 예제에서 &lt;code&gt;incomplete&lt;/code&gt; 는 불완전한 단일 todo를 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="251dc98af512d3fc82ed3f9557100b33857b9baf" translate="yes" xml:space="preserve">
          <source>In case the object's method returns a value, you can simply assert that the return value is calculated correctly. Suppose our object has a &lt;code&gt;calc&lt;/code&gt; method that returns a value based on some internal state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0144d18e6400ef1a25f7cdfc1ad03e526c8b365e" translate="yes" xml:space="preserve">
          <source>In case we want both custom logic and the default behavior for the loading substate, we can implement the &lt;code&gt;loading&lt;/code&gt; action and let it bubble by returning &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e470dc6719bbfe1acfd2c927ccbaf2908229f88e" translate="yes" xml:space="preserve">
          <source>In case we want to run some custom logic and have the default behavior of rendering the error template, we can handle the &lt;code&gt;error&lt;/code&gt; event and let it bubble by returning &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb81a4985c1f1949a783d5976c86e8a62cd78f8" translate="yes" xml:space="preserve">
          <source>In case you want to sort the query parameters with a different criteria, set &lt;code&gt;sortQueryParams&lt;/code&gt; to your custom sort function.</source>
          <target state="translated">다른 기준으로 조회 매개 변수를 정렬하려면 &lt;code&gt;sortQueryParams&lt;/code&gt; 를 사용자 정의 정렬 기능으로 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="007ab8f7c6edaf0f49f780117c3562ef72548a77" translate="yes" xml:space="preserve">
          <source>In cases like this, it's important that we include some information in the URL about not only which template to display, but also which model.</source>
          <target state="translated">이와 같은 경우 표시 할 템플릿뿐만 아니라 모델에 대한 정보를 URL에 포함시키는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="046ce99b990c33a7050362da82e3f46ab8d5074f" translate="yes" xml:space="preserve">
          <source>In cases when you were using the hooks to manipulate the DOM, you can instead update to use &lt;em&gt;modifiers&lt;/em&gt;. For instance, let's say you were adding an event listener to the &lt;code&gt;element&lt;/code&gt; in your component's &lt;code&gt;didInsertElement&lt;/code&gt; hook, and removing it in &lt;code&gt;willDestroyElement&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140bf4c66987841001d1b34fe2e3605f89d02589" translate="yes" xml:space="preserve">
          <source>In cases where components have dependencies on Ember services, it is possible to stub these dependencies for integration tests. You stub Ember services by using the built-in &lt;code&gt;register()&lt;/code&gt; function to register your stub service in place of the default.</source>
          <target state="translated">컴포넌트가 Ember 서비스에 의존하는 경우 통합 테스트를 위해 이러한 의존성을 스텁 할 수 있습니다. 내장 &lt;code&gt;register()&lt;/code&gt; 함수를 사용하여 기본값 대신 스텁 서비스를 등록하여 Ember 서비스를 스텁합니다.</target>
        </trans-unit>
        <trans-unit id="f11345d8738a5017ccd55d343c85df0b1c3b3b63" translate="yes" xml:space="preserve">
          <source>In cases where components have dependencies on Ember services, it is possible to stub these dependencies for rendering tests. You stub Ember services by using the built-in &lt;code&gt;register()&lt;/code&gt; function to register your stub service in place of the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea60124c7e95e893e7721d8b9cbc140fc37b6eb" translate="yes" xml:space="preserve">
          <source>In cases where you have components nested inside other components, the child component will always receive the &lt;code&gt;didInsertElement()&lt;/code&gt; call before its parent does.</source>
          <target state="translated">다른 구성 요소 내에 중첩 된 구성 요소가있는 경우 하위 구성 요소는 항상 상위 구성 요소 보다 먼저 &lt;code&gt;didInsertElement()&lt;/code&gt; 호출을 받습니다 .</target>
        </trans-unit>
        <trans-unit id="efac470050e0447cd220bd2bbe07a00a4499c07f" translate="yes" xml:space="preserve">
          <source>In certain cases, you will want to pass arguments to &lt;code&gt;_super()&lt;/code&gt; before or after overriding.</source>
          <target state="translated">경우에 따라 재정의 전후에 인수를 &lt;code&gt;_super()&lt;/code&gt; 에 전달하려고 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3cbfd3b8feec6f7e648cc5c390e5635fb32a5a3a" translate="yes" xml:space="preserve">
          <source>In certain cases, you will want to pass arguments to the super method before or after overriding. This allows the super class method to continue operating as it normally would.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47ad743d274330132ca71e73f946203dac499bd" translate="yes" xml:space="preserve">
          <source>In class components, arguments are assigned &lt;em&gt;directly&lt;/em&gt; to the class instance. This has caused a lot of issues over the years, from methods and actions being overwritten, to unclear code where the difference between internal class values and arguments is hard to reason about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf68390dd238426f1ab9affee489d3f0eeb9f7e" translate="yes" xml:space="preserve">
          <source>In classic Ember, all property access had to go through these two methods. Over time, these rules have become less strict, and now they have been minimized to just a few cases. In general, in a modern Ember app, you shouldn't need to use them all that much. As long as you are marking your properties as &lt;code&gt;@tracked&lt;/code&gt;, Ember should automatically figure out what needs to change, and when.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52045792f745e23dde9ea86d6790269b942d3505" translate="yes" xml:space="preserve">
          <source>In classic classes, if you wanted to add values to the &lt;em&gt;class&lt;/em&gt; itself, you had to use the &lt;code&gt;reopenClass&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc805a0aed0e1ac236e0a470d23fbf4a97c4a83" translate="yes" xml:space="preserve">
          <source>In constructors, use the keyword by itself (this is required). Generally pass any arguments along as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245fa1188d4d8769bc14e6a9123f2fd6dd8f6d19" translate="yes" xml:space="preserve">
          <source>In contrast to async relationship, accessing a sync relationship will always return a &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/ManyArray&quot;&gt;ManyArray&lt;/a&gt; instance containing the existing local resources. But it will error on access when any of the known related resources have not been loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b574f7da355ce07aa8e74c7a7542bef9b94aedfc" translate="yes" xml:space="preserve">
          <source>In contrast to async relationship, accessing a sync relationship will always return the record (Model instance) for the existing local resource, or null. But it will error on access when a related resource is known to exist and it has not been loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c05f19a64ef3d584c511d0421d6de21ce8c82d1" translate="yes" xml:space="preserve">
          <source>In contrast to computed properties from pre-Octane, tracked properties are not cached. A tracked property can also be recomputed even though its dependencies haven't changed. The following example shows this behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4d2d7d824657fa49897ec312cf47acd2d20585" translate="yes" xml:space="preserve">
          <source>In general, applications should not use this feature, but it's commonly used in addons for historical reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcdc6c173cd3e85b3e8a8c7c233b15abdfdfc0c" translate="yes" xml:space="preserve">
          <source>In general, before reaching for direct DOM manipulation, you should see whether you can model the changes that you want by writing a single template that applies no matter what the input is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379148dec8697afc29af4d37fa65679590a66a46" translate="yes" xml:space="preserve">
          <source>In general, if a value in your application could update, and that update should trigger rerenders, then you should mark that value as &lt;code&gt;@tracked&lt;/code&gt;. This oftentimes may mean taking a POJO and turning it into a class, but this is usually better because it forces us to &lt;em&gt;rationalize&lt;/em&gt; the object - think about what its API is, what values it has, what data it represents, and define that in a single place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bf8f22c794258b2e001fea31db958ba6c95820" translate="yes" xml:space="preserve">
          <source>In general, if the display of your view changes, you should modify the DOM element directly instead of manually calling &lt;code&gt;rerender&lt;/code&gt;, which can be slow.</source>
          <target state="translated">일반적으로 뷰 표시가 변경되면 &lt;code&gt;rerender&lt;/code&gt; 를 수동으로 호출하는 대신 DOM 요소를 직접 수정해야합니다 . 느려질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fe3154e526376ed92c5ac5d9f92658d17616566" translate="yes" xml:space="preserve">
          <source>In general, it's a good idea to pass along any arguments to the parent class in the call to &lt;code&gt;super&lt;/code&gt;, since they'll probably be necessary for setting up the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca8a3ac929c358b4f2a8c6f4444864537d63371" translate="yes" xml:space="preserve">
          <source>In general, only properties which you &lt;em&gt;expect&lt;/em&gt; to be watched by older, untracked clases should be marked as dependency compatible. The decorator is meant as an interop layer for parts of Ember's older classic APIs, and should not be applied to every possible getter/setter in classes. The number of dependency compatible getters should be &lt;em&gt;minimized&lt;/em&gt; wherever possible. New application code should not need to use &lt;code&gt;@dependentKeyCompat&lt;/code&gt;, since it is only for interoperation with older code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cdb46dcafa1b2ff8bf4c03d68ac3cec2620f6c" translate="yes" xml:space="preserve">
          <source>In general, this method will be used by build time tooling and would not be directly written in an application. However, at times it may be useful to use directly to leverage the &quot;outer HTML&quot; semantics mentioned above. For example, if an addon would like to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the &lt;code&gt;template-only-glimmer-components&lt;/code&gt; optional feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ac84322f06e5cc0359a40f03cf2cec4731ea62" translate="yes" xml:space="preserve">
          <source>In general, you should place &lt;code&gt;...attributes&lt;/code&gt; after any attributes you specify to give people using your component an opportunity to override your attribute. If &lt;code&gt;...attributes&lt;/code&gt; appears &lt;em&gt;after&lt;/em&gt; an attribute, it overrides that attribute. If it appears &lt;em&gt;before&lt;/em&gt; an attribute, it does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eadba08dcf842bcd6e05a3d8a08469fe1157820" translate="yes" xml:space="preserve">
          <source>In general, you should prefer using components if you are wrapping content in HTML. However, if you really want to include a mix of HTML and values from models in what you return from the helper, make sure you escape anything that may have come from an untrusted user with the &lt;code&gt;escapeExpression&lt;/code&gt; utility:</source>
          <target state="translated">일반적으로 HTML로 컨텐트를 래핑하는 경우 구성 요소를 사용하는 것이 좋습니다. 그러나 도우미에서 반환 한 HTML에 모델의 HTML과 값을 혼합하여 포함 시키 &lt;code&gt;escapeExpression&lt;/code&gt; 유틸리티를 사용하여 신뢰할 수없는 사용자가 제공 한 모든 것을 이스케이프해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b5e095facb34926d737667cd5199f272d7147fde" translate="yes" xml:space="preserve">
          <source>In its most basic form, a component is just a piece of template that can be referred to by name. Similar to functions in programming languages, they can also take &lt;em&gt;arguments&lt;/em&gt;, allowing them to be customized to the specific context they are being rendered into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533d8a41fd599876ff0516f9ce80b41c1c9e3282" translate="yes" xml:space="preserve">
          <source>In many cases it is not necessary to use the full &lt;code&gt;Helper&lt;/code&gt; class. The &lt;code&gt;helper&lt;/code&gt; method create pure-function helpers without instances. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83972353d37463127261822a6f4e792cba94fc19" translate="yes" xml:space="preserve">
          <source>In many cases, the ceremony of a full &lt;code&gt;Ember.Helper&lt;/code&gt; class is not required. The &lt;code&gt;helper&lt;/code&gt; method create pure-function helpers without instances. For example:</source>
          <target state="translated">많은 경우, 완전한 &lt;code&gt;Ember.Helper&lt;/code&gt; 클래스 의식이 필요하지 않습니다. &lt;code&gt;helper&lt;/code&gt; 방법은 인스턴스없이 순수 기능 헬퍼를 만들 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="278a767e5f09e22ba13a70bd34d39cf70a2f2f97" translate="yes" xml:space="preserve">
          <source>In most cases, the best way to think about your component's output is to assume that it will be re-executed from the top every time anything changes in your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d7fe6b2728af61cd6e8f8f05879e65deb09332" translate="yes" xml:space="preserve">
          <source>In most cases, your application's entire UI will be created by templates that are managed by the router.</source>
          <target state="translated">대부분의 경우 응용 프로그램의 전체 UI는 라우터에서 관리하는 템플릿으로 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="99db7dfd66171d5d107b9026c957e1937dfc45fa" translate="yes" xml:space="preserve">
          <source>In most cases, your component should restrict its behavior to its own elements. However, there are cases where a component needs to do something outside of itself. One simple example of this would be an element that wants to handle clicks outside of its DOM, which requires registering a handler on the whole document, and then hit-testing the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb3f133f65574f1c7e8491a9e46d0fcaf1246bc" translate="yes" xml:space="preserve">
          <source>In native classes this can be done with the &lt;code&gt;static&lt;/code&gt; keyword instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f9b1d7912778b632497835956583fb5a124d56" translate="yes" xml:space="preserve">
          <source>In native classes, there is a dedicated &lt;code&gt;super&lt;/code&gt; keyword that replaces the &lt;code&gt;_super()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9979806abc09c97bad619e26ee37720832229b8b" translate="yes" xml:space="preserve">
          <source>In non-browser mode, because Ember does not have access to jQuery, this options must be specified as a DOM &lt;code&gt;Element&lt;/code&gt; object instead of a selector string.</source>
          <target state="translated">브라우저가 아닌 모드에서 Ember는 jQuery에 액세스 할 수 없으므로이 옵션은 선택기 문자열 대신 DOM &lt;code&gt;Element&lt;/code&gt; 객체 로 지정되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="c08ca441bd16cdb06d31bfc505ab1952ccb60839" translate="yes" xml:space="preserve">
          <source>In non-browser mode, this could be a &quot;&lt;code&gt;Document&lt;/code&gt;-like&quot; object as Ember only interact with a small subset of the DOM API in non- interactive mode. While the exact requirements have not yet been formalized, the &lt;code&gt;SimpleDOM&lt;/code&gt; library's implementation is known to work.</source>
          <target state="translated">브라우저가 아닌 모드에서는 Ember가 대화식이 아닌 모드에서 DOM API의 작은 하위 집합과 만 상호 작용하기 때문에 &quot; &lt;code&gt;Document&lt;/code&gt; 와 유사한&quot;개체 일 수 있습니다 . 정확한 요구 사항은 아직 공식화되지 않았지만 &lt;code&gt;SimpleDOM&lt;/code&gt; 라이브러리의 구현이 작동하는 것으로 알려져 있습니다.</target>
        </trans-unit>
        <trans-unit id="96fa5d3c4e651e995e82ce46635d182ae80b92ed" translate="yes" xml:space="preserve">
          <source>In non-production builds, this function will return the stack that this Transition was aborted within (or &lt;code&gt;undefined&lt;/code&gt; if the Transition has not been aborted yet). In production builds, this function will not be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89d451f0594c89283eb2d1985919b2a07e867ee" translate="yes" xml:space="preserve">
          <source>In non-production builds, this function will return the stack that this Transition was created within. In production builds, this function will not be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a29aa667fe64e765db2e29d8b8144a930abf1be" translate="yes" xml:space="preserve">
          <source>In non-production builds, this property references the Transition that &lt;em&gt;this&lt;/em&gt; Transition was derived from or &lt;code&gt;undefined&lt;/code&gt; if this transition did not derive from another. In production builds, this property will not be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32f151731ef842cca2362270b4a8bb09fc22890" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;confirmValue&lt;/code&gt; to take on the value of the message text, we'll bind the property to the value of a user input field that will appear when the button is clicked. To accomplish this, we'll first modify the component so that it can be used in block form and we will &lt;a href=&quot;../wrapping-content-in-a-component&quot;&gt;yield&lt;/a&gt;&lt;code&gt;confirmValue&lt;/code&gt; to the block within the &lt;code&gt;&quot;confirmDialog&quot;&lt;/code&gt; element:</source>
          <target state="translated">&lt;code&gt;confirmValue&lt;/code&gt; 가 메시지 텍스트의 값 을 갖도록 하기 위해 버튼을 클릭 할 때 표시되는 사용자 입력 필드의 값에 속성을 바인딩합니다. 이 블록 형태로 사용할 수 있으며, 우리가 수 있도록이 작업을 수행하려면 먼저 구성 요소를 수정할 수 있습니다 &lt;a href=&quot;../wrapping-content-in-a-component&quot;&gt;얻을 &lt;/a&gt; &lt;code&gt;confirmValue&lt;/code&gt; 을 내 블록에 &lt;code&gt;&quot;confirmDialog&quot;&lt;/code&gt; 요소 :</target>
        </trans-unit>
        <trans-unit id="5aec37ca9172d1a10827d21002d5c4468f0fc681" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;confirmValue&lt;/code&gt; to take on the value of the message text, we'll bind the property to the value of a user input field that will appear when the button is clicked. To accomplish this, we'll first modify the component so that it can be used in block form and we will pass &lt;code&gt;confirmValue&lt;/code&gt; as a &lt;a href=&quot;https://guides.emberjs.com/components/block-content/&quot;&gt;block parameter&lt;/a&gt; within the confirm dialog element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fbb24fad6ae7ae60b72e40ef4ddb75d5c21e0e" translate="yes" xml:space="preserve">
          <source>In order for Ember to observe when you make a change to an enumerable, you need to use special methods that &lt;code&gt;Ember.Enumerable&lt;/code&gt; provides. For example, if you add an element to an array using the standard JavaScript method &lt;code&gt;push()&lt;/code&gt;, Ember will not be able to observe the change, but if you use the enumerable method &lt;code&gt;pushObject()&lt;/code&gt;, the change will propagate throughout your application.</source>
          <target state="translated">열거 형을 변경할 때 Ember가 관찰하려면 &lt;code&gt;Ember.Enumerable&lt;/code&gt; 이 제공 하는 특수한 방법을 사용해야 합니다. 예를 들어 표준 JavaScript 메서드 &lt;code&gt;push()&lt;/code&gt; 사용하여 배열에 요소를 추가하면 Ember는 변경 사항을 관찰 할 수 없지만 열거 가능한 메서드 &lt;code&gt;pushObject()&lt;/code&gt; 를 사용하면 변경 사항이 응용 프로그램 전체에 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="6d6afe0cb7e4458149917e9aa081f823e6e21d3b" translate="yes" xml:space="preserve">
          <source>In order for rendering tests to work, you must call &lt;a href=&quot;https://github.com/emberjs/ember-qunit#setup-rendering-tests&quot;&gt;&lt;code&gt;setupRenderingTest()&lt;/code&gt;&lt;/a&gt; and pass the &lt;code&gt;hooks&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936cfa8baf9fcf4794eab9ec69dff360d88aa7fc" translate="yes" xml:space="preserve">
          <source>In order for this to work, we need our application to default to making requests to the namespace of &lt;code&gt;/api&lt;/code&gt;. To do this, we want to generate an application adapter. An &lt;a href=&quot;https://guides.emberjs.com/models/customizing-adapters&quot;&gt;Adapter&lt;/a&gt; is an object that &lt;a href=&quot;https://guides.emberjs.com/models&quot;&gt;Ember Data&lt;/a&gt; uses to determine how we communicate with our backend. We will cover Ember Data in more detail later in this tutorial. For now, let's generate an adapter for our application:</source>
          <target state="translated">이것이 작동하기 위해서는 &lt;code&gt;/api&lt;/code&gt; 네임 스페이스에 요청을하도록 기본적으로 응용 프로그램이 필요합니다 . 이를 위해 애플리케이션 어댑터를 생성하려고합니다. &lt;a href=&quot;https://guides.emberjs.com/models/customizing-adapters&quot;&gt;어댑터는&lt;/a&gt; 것을 목적으로한다 &lt;a href=&quot;https://guides.emberjs.com/models&quot;&gt;엠버 데이터는&lt;/a&gt; 우리가 우리의 백엔드와 통신하는 방법을 결정하는 데 사용합니다. 이 자습서의 뒷부분에서 Ember Data에 대해 자세히 설명합니다. 지금은 애플리케이션을위한 어댑터를 생성 해보자.</target>
        </trans-unit>
        <trans-unit id="9ee6874cf19c007eb98370f9ddd7c8bc33406709" translate="yes" xml:space="preserve">
          <source>In order for your application to behave correctly, you will need to manually extend or create the objects that the native objects were creating before.</source>
          <target state="translated">응용 프로그램이 올바르게 작동하려면 이전에 기본 개체가 생성했던 개체를 수동으로 확장하거나 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="1342c5f6a6769bf64e4015aa6508ea15a1d91f76" translate="yes" xml:space="preserve">
          <source>In order to do this, we will need to modify the Mirage &lt;code&gt;config.js&lt;/code&gt; file that we added back in the &lt;a href=&quot;../installing-addons&quot;&gt;Installing Addons section&lt;/a&gt;. We will add a new route handler to return a specific rental:</source>
          <target state="translated">이를 위해 &lt;a href=&quot;../installing-addons&quot;&gt;애드온 설치 섹션&lt;/a&gt; 에서 다시 추가 한 Mirage &lt;code&gt;config.js&lt;/code&gt; 파일 을 수정해야합니다 . 특정 임대를 반환하기 위해 새로운 경로 처리기를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="3dc20618ed655d1ecf2b71ecaacbc4d6b6f5f43a" translate="yes" xml:space="preserve">
          <source>In order to improve rendering speed, Ember will try to reuse the DOM elements where possible. Specifically, if the same item is present in the array both before and after the change, its DOM output will be reused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32aafffe8049443d7fbfd609d0de1ed4fdc3d72c" translate="yes" xml:space="preserve">
          <source>In order to keep track of unique records in the store Ember Data expects every record to have an &lt;code&gt;id&lt;/code&gt; property in the payload. Ids should be unique for every unique record of a specific type. If your backend uses a key other than &lt;code&gt;id&lt;/code&gt; you can use the serializer's &lt;code&gt;primaryKey&lt;/code&gt; property to correctly transform the id property to &lt;code&gt;id&lt;/code&gt; when serializing and deserializing data.</source>
          <target state="translated">상점에서 고유 한 레코드를 추적하기 위해 Ember Data는 모든 레코드에 페이로드에 &lt;code&gt;id&lt;/code&gt; 속성 이있을 것으로 예상합니다 . ID는 특정 유형의 모든 고유 레코드마다 고유해야합니다. 백엔드에서 &lt;code&gt;id&lt;/code&gt; 이외의 키를 사용하는 경우 데이터를 직렬화 및 역 직렬화 할 때 serializer 의 &lt;code&gt;primaryKey&lt;/code&gt; 속성을 사용 하여 id 속성을 &lt;code&gt;id&lt;/code&gt; 로 올바르게 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bcc5b2c4cb20571c816f7c9ebed2212e3ddf27a6" translate="yes" xml:space="preserve">
          <source>In order to make a property available to a component, you must pass it in like this:</source>
          <target state="translated">컴포넌트가 속성을 사용할 수있게하려면 다음과 같이 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="751f013916c3480acab6efa76e385df4ae29d95b" translate="yes" xml:space="preserve">
          <source>In order to properly fetch and update data, EmberData needs to understand how to connect to your API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec6d92245f42ae4c5954aff7d6235e007431aba" translate="yes" xml:space="preserve">
          <source>In order to properly manage and present your data, EmberData needs to understand the structure of data it receives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0d6bbb2b7569f2b4d0d9a4fbbd06b11f26be73" translate="yes" xml:space="preserve">
          <source>In order to tell Ember a value might change, we need to mark it as &lt;em&gt;trackable&lt;/em&gt;. Trackable values are values that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f7f2079118c91e80deed6ef009f2f473c1df29" translate="yes" xml:space="preserve">
          <source>In order to tell Ember a value might change, we need to mark it as trackable. Trackable values are values that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a9efb1c8792f0b1fcf5fd7c6f4efd0669bf530" translate="yes" xml:space="preserve">
          <source>In order to test the &lt;code&gt;doSomething&lt;/code&gt; method we create an instance of &lt;code&gt;SomeThing&lt;/code&gt;, update the observed property (&lt;code&gt;foo&lt;/code&gt;), and assert that the expected effects are present.</source>
          <target state="translated">&lt;code&gt;doSomething&lt;/code&gt; 메소드 를 테스트하기 위해 &lt;code&gt;SomeThing&lt;/code&gt; 의 인스턴스를 작성 하고 관찰 된 특성 ( &lt;code&gt;foo&lt;/code&gt; )을 업데이트 한 후 예상되는 효과가 있다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="3d8dd7f817efbf58fba8261fd92fb0f81d2f4e58" translate="yes" xml:space="preserve">
          <source>In other words, this creates static properties and functions for the class. These are only available on the class and not on any instance of that class.</source>
          <target state="translated">다시 말해 클래스에 대한 정적 속성과 함수를 만듭니다. 클래스에서만 사용할 수 있으며 해당 클래스의 인스턴스에서는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="29ac4be95e046b79744d0f6c9efaf29f1061443a" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; component we want to leave the confirmation modal open until we know that the operation has completed successfully. This is accomplished by expecting a promise to be returned from &lt;code&gt;onConfirm&lt;/code&gt;. Upon resolution of the promise, we set a property used to indicate the visibility of the confirmation modal. We can use an &lt;code&gt;async&lt;/code&gt; function to handle that promise:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5445313fa7bfb3488d6f91f5f8f2b43e93ba0f1" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;app/templates/rentals.hbs&lt;/code&gt; template file, we'll add a reference to our new &lt;code&gt;list-filter&lt;/code&gt; component.</source>
          <target state="translated">우리에서 &lt;code&gt;app/templates/rentals.hbs&lt;/code&gt; 템플릿 파일, 우리는 우리의 새로운에 대한 참조를 추가 할 것입니다 &lt;code&gt;list-filter&lt;/code&gt; 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="2116b9426c29914e268f39162e786a2c0adfa0a2" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;user-profile.hbs&lt;/code&gt; template we change our action to call &lt;code&gt;deleteCurrentUser&lt;/code&gt; as passed above.</source>
          <target state="translated">우리에서 &lt;code&gt;user-profile.hbs&lt;/code&gt; 템플릿을 우리는 호출 할 우리의 행동 변화 &lt;code&gt;deleteCurrentUser&lt;/code&gt; 을 위 통과로합니다.</target>
        </trans-unit>
        <trans-unit id="e743e3e870e7e62c1ea638ae023558320918c553" translate="yes" xml:space="preserve">
          <source>In our case, the explicit argument that we pass to &lt;code&gt;onConfirm&lt;/code&gt; will be the required &lt;code&gt;messageText&lt;/code&gt;. However, remember that internally our &lt;code&gt;ButtonWithConfirmation&lt;/code&gt; component does not know or care that it is being used in a messaging application. Therefore within the component's JavaScript file, we will use a property &lt;code&gt;confirmValue&lt;/code&gt; to represent that argument and pass it to &lt;code&gt;onConfirm&lt;/code&gt; as shown here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9497620e82225ac6f9b3af239194c032f2e45bd" translate="yes" xml:space="preserve">
          <source>In our case, the explicit argument that we pass to &lt;code&gt;onConfirm&lt;/code&gt; will be the required &lt;code&gt;messageText&lt;/code&gt;. However, remember that internally our &lt;code&gt;button-with-confirmation&lt;/code&gt; component does not know or care that it is being used in a messaging application. Therefore within the component's javascript file, we will use a property &lt;code&gt;confirmValue&lt;/code&gt; to represent that argument and pass it to &lt;code&gt;onConfirm&lt;/code&gt; as shown here:</source>
          <target state="translated">우리의 경우, &lt;code&gt;onConfirm&lt;/code&gt; 에 전달하는 명시 적 인수 는 필수 &lt;code&gt;messageText&lt;/code&gt; 가 될 것 입니다. 그러나 내부적 &lt;code&gt;button-with-confirmation&lt;/code&gt; 구성 요소는 메시징 응용 프로그램에서 사용중인 구성 요소를 알거나 신경 쓰지 않습니다. 따라서 컴포넌트의 자바 스크립트 파일 내에서 &lt;code&gt;confirmValue&lt;/code&gt; 속성을 사용하여 해당 인수를 나타내고 &lt;code&gt;onConfirm&lt;/code&gt; 과 같이 onConfirm에 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="02f19c995ec2ef48bcad1cd089c058b458a09565" translate="yes" xml:space="preserve">
          <source>In our case, the parent route had already loaded its songs, so we would be writing unnecessary fetching logic. Let's rewrite the same route, but use &lt;code&gt;modelFor&lt;/code&gt;, which works the same way, but returns the model from the parent route.</source>
          <target state="translated">우리의 경우, 부모 루트는 이미 노래를로드 했으므로 불필요한 페칭 로직을 작성합니다. 동일한 경로를 다시 작성하되 &lt;code&gt;modelFor&lt;/code&gt; 를 사용 하면 같은 방식으로 작동하지만 부모 경로에서 모델을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ab00f79b5b48c8f1f0ea5a0331c23e5730af5d63" translate="yes" xml:space="preserve">
          <source>In our example, you might notice that if you type quickly that the results might get out of sync with the current filter text entered. This is because our data filtering function is &lt;em&gt;asynchronous&lt;/em&gt;, meaning that the code in the function gets scheduled for later, while the code that calls the function continues to execute. Often code that may make network requests is set up to be asynchronous because the server may return its responses at varying times.</source>
          <target state="translated">이 예에서는 빠르게 입력하면 입력 한 현재 필터 텍스트와 결과가 동기화되지 않을 수 있습니다. 데이터 필터링 함수가 &lt;em&gt;비동기&lt;/em&gt; 이기 때문에 함수 의 코드가 나중에 예약되고 함수를 호출하는 코드는 계속 실행되기 때문입니다. 서버가 다양한 시간에 응답을 반환 할 수 있기 때문에 네트워크 요청을 할 수있는 코드는 종종 비동기식으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="6a9d6c5514380d3807c115c8027e9e896e5141b5" translate="yes" xml:space="preserve">
          <source>In our index route handler, we add the &lt;code&gt;replaceWith&lt;/code&gt; invocation to &lt;code&gt;beforeModel&lt;/code&gt;.</source>
          <target state="translated">인덱스 라우트 핸들러에서 &lt;code&gt;replaceWith&lt;/code&gt; 호출을 &lt;code&gt;beforeModel&lt;/code&gt; 에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="425e757fb86358d75ef49ed41315cc99298b82f5" translate="yes" xml:space="preserve">
          <source>In our index route handler, we'll call the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_replaceWith&quot;&gt;&lt;code&gt;replaceWith&lt;/code&gt;&lt;/a&gt; function. The &lt;code&gt;replaceWith&lt;/code&gt; function is similar to the route's &lt;code&gt;transitionTo&lt;/code&gt; function, the difference being that &lt;code&gt;replaceWith&lt;/code&gt; will replace the current URL in the browser's history, while &lt;code&gt;transitionTo&lt;/code&gt; will add to the history. Since we want our &lt;code&gt;rentals&lt;/code&gt; route to serve as our home page, we will use the &lt;code&gt;replaceWith&lt;/code&gt; function.</source>
          <target state="translated">인덱스 라우트 핸들러에서 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_replaceWith&quot;&gt; &lt;code&gt;replaceWith&lt;/code&gt; &lt;/a&gt; 함수를 호출합니다 . &lt;code&gt;replaceWith&lt;/code&gt; 의 기능은 경로의 유사하다 &lt;code&gt;transitionTo&lt;/code&gt; 의 기능을한다는 것을 차이 &lt;code&gt;replaceWith&lt;/code&gt; 가 하면서, 브라우저의 역사에서 현재 URL을 대체 할 &lt;code&gt;transitionTo&lt;/code&gt; 는 역사에 추가됩니다. 우리가 원하기 때문에 &lt;code&gt;rentals&lt;/code&gt; 경로가 우리의 홈 페이지 역할을, 우리는 사용 &lt;code&gt;replaceWith&lt;/code&gt; 의 기능을.</target>
        </trans-unit>
        <trans-unit id="ab231d10ac181b0f4640cd55eb14e158fe262e49" translate="yes" xml:space="preserve">
          <source>In our list filter component JavaScript, we use the &lt;code&gt;query&lt;/code&gt; property to compare to the &lt;code&gt;value&lt;/code&gt; property of the component. The &lt;code&gt;value&lt;/code&gt; property represents the latest state of the input field. Therefore we now check that results match the input field, ensuring that results will stay in sync with the last thing the user has typed.</source>
          <target state="translated">목록 필터 구성 요소 JavaScript에서는 &lt;code&gt;query&lt;/code&gt; 속성을 사용 하여 구성 요소 의 &lt;code&gt;value&lt;/code&gt; 속성과 비교합니다 . &lt;code&gt;value&lt;/code&gt; 속성 입력 필드의 최신 상태를 나타낸다. 따라서 결과가 입력 필드와 일치하는지 확인하여 사용자가 마지막으로 입력 한 것과 결과가 동기화되도록합니다.</target>
        </trans-unit>
        <trans-unit id="a1c6272418f414d77813d791068a58ac0383d2e5" translate="yes" xml:space="preserve">
          <source>In our new setup, the parent component has an action which sets the new value. We pass this action to the child component, and the child component directly assigns it to the click of the button, using the &lt;code&gt;{{on}}&lt;/code&gt; modifier. It also passes the value we want to call the &lt;code&gt;@onClick&lt;/code&gt; using the &lt;code&gt;fn&lt;/code&gt; helper. We don't need any additional logic in the child class itself - in fact, this could become a template-only component at this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d535ca7e3e2be527f15c355940eb17c846d552" translate="yes" xml:space="preserve">
          <source>In our tests, we also call two helpers (&lt;code&gt;visit&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt;) one after another. Although Ember does a number of things when we make those calls, Ember hides those complexities by giving us these &lt;a href=&quot;https://guides.emberjs.com/testing/acceptance/#toc_asynchronous-helpers&quot;&gt;asynchronous test helpers&lt;/a&gt;.</source>
          <target state="translated">테스트에서는 두 명의 도우미 ( &lt;code&gt;visit&lt;/code&gt; 및 &lt;code&gt;click&lt;/code&gt; )를 차례로 호출 합니다. Ember는 이러한 호출을 할 때 여러 가지 작업을 수행하지만 이러한 &lt;a href=&quot;https://guides.emberjs.com/testing/acceptance/#toc_asynchronous-helpers&quot;&gt;비동기 테스트 도우미를&lt;/a&gt; 제공하여 이러한 복잡성을 숨 깁니다 .</target>
        </trans-unit>
        <trans-unit id="b560515f778de07c2ca3c994165438d4d3304fb6" translate="yes" xml:space="preserve">
          <source>In our user &lt;code&gt;button-with-confirmation&lt;/code&gt; component we want to leave the confirmation modal open until we know that the operation has completed successfully. This is accomplished by expecting a promise to be returned from &lt;code&gt;onConfirm&lt;/code&gt;. Upon resolution of the promise, we set a property used to indicate the visibility of the confirmation modal.</source>
          <target state="translated">사용자 &lt;code&gt;button-with-confirmation&lt;/code&gt; 구성 요소에서 작업이 성공적으로 완료되었음을 알 때까지 확인 모달을 열어 둡니다. 이것은 &lt;code&gt;onConfirm&lt;/code&gt; 에서 약속이 반환 될 것으로 기대함으로써 달성됩니다 . 약속이 해결되면 확인 모달의 가시성을 나타내는 데 사용되는 속성을 설정했습니다.</target>
        </trans-unit>
        <trans-unit id="f50690af88ab50f9c9d8d696d223983efb84b8bd" translate="yes" xml:space="preserve">
          <source>In particular, what this means is that if you get an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element's &lt;code&gt;value&lt;/code&gt; attribute and then re-render the template with the same value, it will avoid clobbering the cursor and selection position. Since most attribute sets are idempotent in the browser, you typically can get away with reading attributes using jQuery, but the most reliable way to do so is through this method.</source>
          <target state="translated">특히 이것이 의미하는 것은 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소의 &lt;code&gt;value&lt;/code&gt; 속성을 얻은 다음 같은 값으로 템플릿을 다시 렌더링하면 커서와 선택 위치가 방해받지 않게됩니다. 대부분의 속성 세트는 브라우저에서 dem 등원이므로 일반적으로 jQuery를 사용하여 속성을 읽지 않아도되지만 가장 신뢰할 수있는 방법은이 방법을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1095a2ebbc711d35ded3e6c08d66bc66578a99d6" translate="yes" xml:space="preserve">
          <source>In practice, Ember avoids updating parts of the DOM that haven't changed, which means that the user's selection state, cursor and scroll position, and other state won't change for no reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173d782e0322b7aa8b817bd02bfb67f582bec848" translate="yes" xml:space="preserve">
          <source>In practice, this is only useful in non-browser environment or in non-interactive mode, because Ember's &lt;code&gt;jQuery&lt;/code&gt; dependency is implicitly bound to the current document, causing event delegation to not work properly when the app is rendered into a foreign document object (such as an iframe's &lt;code&gt;contentDocument&lt;/code&gt;).</source>
          <target state="translated">실제로 이것은 브라우저가 아닌 환경 또는 비 대화식 모드에서만 유용합니다. Ember의 &lt;code&gt;jQuery&lt;/code&gt; 종속성은 현재 문서에 암시 적으로 바인딩되어 있기 때문에 앱이 외부 문서 객체로 렌더링 될 때 이벤트 위임이 제대로 작동하지 않기 때문입니다 (예 : iframe의 &lt;code&gt;contentDocument&lt;/code&gt; 로 ).</target>
        </trans-unit>
        <trans-unit id="0a6cf706bc188aa758d6da4e272aa9c65097c3d6" translate="yes" xml:space="preserve">
          <source>In response to &lt;code&gt;queryRecord()&lt;/code&gt; being called, you should always fetch fresh data. Once found, you can asynchronously call the store's &lt;code&gt;push()&lt;/code&gt; method to push the record into the store.</source>
          <target state="translated">에 대한 응답으로 &lt;code&gt;queryRecord()&lt;/code&gt; 호출되고, 당신은 항상 새로운 데이터를 가져해야합니다. 일단 발견되면 상점의 &lt;code&gt;push()&lt;/code&gt; 메소드를 비동기 적으로 호출 하여 레코드를 상점으로 푸시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa32d137f104b735ab84633f3591ddf26cbba0ca" translate="yes" xml:space="preserve">
          <source>In short:</source>
          <target state="translated">한마디로 :</target>
        </trans-unit>
        <trans-unit id="ebec2c949c263672a42bb7da4a5fd65b6941558b" translate="yes" xml:space="preserve">
          <source>In some cases your component needs to define event handlers, perhaps to support various draggable behaviors. For example, a component may need to send an &lt;code&gt;id&lt;/code&gt; when it receives a drop event:</source>
          <target state="translated">경우에 따라 구성 요소는 다양한 드래그 가능한 동작을 지원하기 위해 이벤트 핸들러를 정의해야합니다. 예를 들어, 구성 요소가 drop 이벤트를 수신 하면 &lt;code&gt;id&lt;/code&gt; 를 보내야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7dbb31fc49e2094cd02c964a741427948153b5a3" translate="yes" xml:space="preserve">
          <source>In some cases, if your usage of properties on POJOs is too dynamic, you may not be able to enumerate every single property that could be tracked. There could be a prohibitive number of possible properties, or there could be no way to know them in advance. In this case, it's recommended that you &lt;em&gt;reset&lt;/em&gt; the value wherever it is updated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d0c4d651665d1d4131d9379028d4d27e9ba051" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to annotate computed properties with additional metadata about how they function or what values they operate on. For example, computed property functions may close over variables that are then no longer available for introspection.</source>
          <target state="translated">경우에 따라 계산 된 속성에 작동 방식 또는 작동하는 값에 대한 추가 메타 데이터로 주석을 추가 할 수 있습니다. 예를 들어, 계산 된 속성 함수는 더 이상 검사에 사용할 수없는 변수를 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f2bb026f9f2614af9c4e26f814770bd8edeb331" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to annotate computed properties with additional metadata about how they function or what values they operate on. For example, computed property functions may close over variables that are then no longer available for introspection. You can pass a hash of these values to a computed property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cb9cb7e37a955d210b2dbde6d78cbf98ffd788" translate="yes" xml:space="preserve">
          <source>In some cases, you might not want the sticky query param value to be scoped to the route's model but would rather reuse a query param's value even as a route's model changes. This can be accomplished by setting the &lt;code&gt;scope&lt;/code&gt; option to &lt;code&gt;&quot;controller&quot;&lt;/code&gt; within the controller's &lt;code&gt;queryParams&lt;/code&gt; config hash:</source>
          <target state="translated">경우에 따라 고정 쿼리 매개 변수 값을 경로 모델로 범위 지정하지 않으려는 경우 경로 모델이 변경 되더라도 쿼리 매개 변수 값을 다시 사용하려고 할 수 있습니다. 컨트롤러의 &lt;code&gt;queryParams&lt;/code&gt; 구성 해시 에서 &lt;code&gt;scope&lt;/code&gt; 옵션을 &lt;code&gt;&quot;controller&quot;&lt;/code&gt; 로 설정하면 됩니다 .</target>
        </trans-unit>
        <trans-unit id="366789bd28766b0562cd1391007f9b613a32f0bf" translate="yes" xml:space="preserve">
          <source>In some cases, your dynamic headers may require data from some object outside of Ember's observer system (for example &lt;code&gt;document.cookie&lt;/code&gt;). You can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.ComputedProperty.html#method_volatile&quot;&gt;volatile&lt;/a&gt; function to set the property into a non-cached mode causing the headers to be recomputed with every request.</source>
          <target state="translated">경우에 따라 동적 헤더에 Ember 옵저버 시스템 외부의 일부 객체 (예 : &lt;code&gt;document.cookie&lt;/code&gt; ) 의 데이터가 필요할 수 있습니다 . 당신이 사용할 수있는 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.ComputedProperty.html#method_volatile&quot;&gt;휘발성&lt;/a&gt; 헤더가 모든 요청을 재 계산하는 원인이 아닌 캐시 모드로 속성을 설정하는 기능.</target>
        </trans-unit>
        <trans-unit id="c8439bb43007e42e0e52d77b6d10e0f7713670b1" translate="yes" xml:space="preserve">
          <source>In some cases, your dynamic headers may require data from some object outside of Ember's observer system (for example &lt;code&gt;document.cookie&lt;/code&gt;). You can use the &lt;a href=&quot;https://api.emberjs.com/api/classes/Ember.ComputedProperty.html#volatile&quot;&gt;volatile&lt;/a&gt; function to set the property into a non-cached mode causing the headers to be recomputed with every request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ee070ea25690e7b5aa79d3084e61cad4a33518" translate="yes" xml:space="preserve">
          <source>In some cases, your dynamic headers may require data from some object outside of Ember's observer system (for example &lt;code&gt;document.cookie&lt;/code&gt;). You can use the &lt;a href=&quot;https://emberjs.com/api/classes/Ember.ComputedProperty.html#method_volatile&quot;&gt;volatile&lt;/a&gt; function to set the property into a non-cached mode causing the headers to be recomputed with every request.</source>
          <target state="translated">경우에 따라 동적 헤더에 Ember 옵저버 시스템 외부의 일부 객체 (예 : &lt;code&gt;document.cookie&lt;/code&gt; ) 의 데이터가 필요할 수 있습니다 . 당신이 사용할 수있는 &lt;a href=&quot;https://emberjs.com/api/classes/Ember.ComputedProperty.html#method_volatile&quot;&gt;휘발성&lt;/a&gt; 헤더가 모든 요청을 재 계산하는 원인이 아닌 캐시 모드로 속성을 설정하는 기능.</target>
        </trans-unit>
        <trans-unit id="d41f8e0e035c7439f25ee436f1342763b84a965c" translate="yes" xml:space="preserve">
          <source>In some circumstances, the built-in attribute types of &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, and &lt;code&gt;date&lt;/code&gt; may be inadequate. For example, a server may return a non-standard date format.</source>
          <target state="translated">경우에 따라 &lt;code&gt;string&lt;/code&gt; , &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;boolean&lt;/code&gt; 및 &lt;code&gt;date&lt;/code&gt; 의 내장 속성 유형 이 부적절 할 수 있습니다. 예를 들어, 서버는 비표준 날짜 형식을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fa172d2b2fc1524e5958154f407da7c75cb97e7" translate="yes" xml:space="preserve">
          <source>In some situations the adapter may need to perform cleanup when destroyed, that cleanup can be done in &lt;code&gt;destroy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04384891970233c3962d09d6865cbe4e29b0d010" translate="yes" xml:space="preserve">
          <source>In some situations, however, you may need to write a helper that interacts with the rest of your application. You can create class-based helpers that have access to services in your application, and can optionally save state as well, although this is usually unnecessary and error-prone.</source>
          <target state="translated">그러나 상황에 따라 나머지 응용 프로그램과 상호 작용하는 도우미를 작성해야 할 수도 있습니다. 일반적으로 불필요하고 오류가 발생하기는하지만 응용 프로그램의 서비스에 액세스 할 수있는 클래스 기반 도우미를 만들고 선택적으로 상태를 저장할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="972f9bf507fe0694b8e683b6248ff4d2ef87d91c" translate="yes" xml:space="preserve">
          <source>In sum, arguments are good for passing values:</source>
          <target state="translated">요약하면 인수는 값을 전달하는 데 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f0fa862af1a1dc99ef50d3e806a85a304d9acdcb" translate="yes" xml:space="preserve">
          <source>In summary, when you want to allow elements in a component to communicate, see if you can separate the concerns of &lt;em&gt;managing state&lt;/em&gt; and &lt;em&gt;managing DOM interactions&lt;/em&gt;. The component can manage the state, while a modifier can manage the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e9570fdc7b04bebf31b27e37ccfc9d95ba55ef" translate="yes" xml:space="preserve">
          <source>In summary, when you're trying to update a piece of text or an attribute in your component, think of the Principle of Substitution, and write a template that produces the right HTML when you substitute all of the variables in the template with the current values of the variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5487ba6f01dc9864e3bcb4d77666f8b5b32f889" translate="yes" xml:space="preserve">
          <source>In template-only component templates statements like &lt;code&gt;{{this}}&lt;/code&gt;, &lt;code&gt;{{this.foo}}&lt;/code&gt; and &lt;code&gt;{{foo}}&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;. Accessing arguments as &lt;code&gt;{{@foo}}&lt;/code&gt; will continue to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6406aed63eb52b286b7b732319cda792693c38d" translate="yes" xml:space="preserve">
          <source>In templates, we refer to arguments by prefixing them with the &lt;code&gt;@&lt;/code&gt; sign (in this case &lt;code&gt;@multiple&lt;/code&gt;). In order to compute &lt;code&gt;this.total&lt;/code&gt;, we'll need to refer to the &lt;code&gt;multiple&lt;/code&gt; argument from JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d79e0717ab426614f5fcb1ff8ada0b7ee729a3e" translate="yes" xml:space="preserve">
          <source>In terms of performance, rendering tests sit in the middle, between unit and application tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca500ed8598046d69760ae65911fa122f3d0d3d1" translate="yes" xml:space="preserve">
          <source>In that case, we can use the &lt;code&gt;{{blog-post}}&lt;/code&gt; component in &lt;strong&gt;block form&lt;/strong&gt; and tell Ember where the block content should be rendered using the &lt;code&gt;{{yield}}&lt;/code&gt; helper. To update the example above, we'll first change the component's template:</source>
          <target state="translated">이 경우 &lt;code&gt;{{blog-post}}&lt;/code&gt; 컴포넌트를 &lt;strong&gt;블록 형태로&lt;/strong&gt; 사용하고 &lt;code&gt;{{yield}}&lt;/code&gt; 도우미를 사용하여 블록 컨텐츠를 렌더링해야하는 위치를 Ember에 알릴 수 있습니다 . 위 예제를 업데이트하기 위해 먼저 컴포넌트의 템플릿을 변경합니다 :</target>
        </trans-unit>
        <trans-unit id="4e6054162f1d5a374a22c8f9796936dae869115d" translate="yes" xml:space="preserve">
          <source>In that case, you can implement &lt;code&gt;serialize&lt;/code&gt; yourself and return a JSON hash of your choosing.</source>
          <target state="translated">이 경우 직접 &lt;code&gt;serialize&lt;/code&gt; 를 구현 하고 선택한 JSON 해시를 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="14af234b22343f20e4fe919eaa12464a3257ae14" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;Counter&lt;/code&gt; component, instead of tracking the &lt;code&gt;multiple&lt;/code&gt; internally, we take it as an argument. In the template, we refer to the argument as &lt;code&gt;@multiple&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7da431b2fc85635b63c6fd2ff4f9b950a376545" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;andThen&lt;/code&gt; helper, we finally make our call to &lt;code&gt;assert.equal&lt;/code&gt; which makes an assertion that the text found in the first li of the ul whose class is &quot;posts&quot; is equal to &quot;My new post&quot;.</source>
          <target state="translated">에서 &lt;code&gt;andThen&lt;/code&gt; 의 도우미, 우리는 마침내 우리의 호출 할 &lt;code&gt;assert.equal&lt;/code&gt; 텍스트 클래스입니다 &quot;게시물&quot; &quot;내 새 게시물&quot;로 동일한 UL의 첫 번째 리에서 찾을 수 있다는 주장을한다.</target>
        </trans-unit>
        <trans-unit id="58e1a7001b9c9a1d09b20d044dff01afcd7c8c05" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;beforeEach&lt;/code&gt; function that runs before each test, we use the built-in function &lt;code&gt;this.register&lt;/code&gt; to &lt;a href=&quot;https://guides.emberjs.com/applications/dependency-injection/#toc_factory-registrations&quot;&gt;register&lt;/a&gt; our stub service in place of the maps service. Registration makes an object available to your Ember application for things like loading components from templates and injecting services in this case.</source>
          <target state="translated">각 테스트 전에 실행 되는 &lt;code&gt;beforeEach&lt;/code&gt; 함수에서 내장 함수 &lt;code&gt;this.register&lt;/code&gt; 를 사용 하여 맵 서비스 대신 스텁 서비스 를 &lt;a href=&quot;https://guides.emberjs.com/applications/dependency-injection/#toc_factory-registrations&quot;&gt;등록&lt;/a&gt; 합니다. 등록하면 템플릿에서 컴포넌트를로드하고이 경우 서비스를 주입하는 등 Ember 응용 프로그램에서 객체를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="252fa88395304e7562b89517d29f494bcfff26dc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;filterByCity&lt;/code&gt; function in the rental controller above, we've added a new property called &lt;code&gt;query&lt;/code&gt; to the filter results instead of just returning an array of rentals as before.</source>
          <target state="translated">위의 임대 컨트롤러 의 &lt;code&gt;filterByCity&lt;/code&gt; 함수에서 이전과 같이 임대 배열을 반환하는 대신 &lt;code&gt;query&lt;/code&gt; 라는 새로운 속성 을 필터 결과에 추가했습니다 .</target>
        </trans-unit>
        <trans-unit id="69ec2eed51bacc33dfcdd4448a42bd11fa37e803" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;model&lt;/code&gt; hook for routes with dynamic segments, it's your job to turn the ID (something like &lt;code&gt;47&lt;/code&gt; or &lt;code&gt;post-slug&lt;/code&gt;) into a model that can be rendered by the route's template. In the above example, we use the photo's ID (&lt;code&gt;params.photo_id&lt;/code&gt;) as an argument to Ember Data's &lt;code&gt;findRecord&lt;/code&gt; method.</source>
          <target state="translated">동적 세그먼트가있는 경로 의 &lt;code&gt;model&lt;/code&gt; 후크에서 ID ( &lt;code&gt;47&lt;/code&gt; 또는 &lt;code&gt;post-slug&lt;/code&gt; 와 같은 )를 경로의 템플릿으로 렌더링 할 수있는 모델로 전환하는 작업입니다. 위의 예에서 사진의 ID ( &lt;code&gt;params.photo_id&lt;/code&gt; )를 Ember Data의 &lt;code&gt;findRecord&lt;/code&gt; 메소드에 대한 인수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7ffee30714617467246161c4ad9e3d50da25c4b6" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;model&lt;/code&gt; hook for routes with dynamic segments, it's your job to turn the ID (something like &lt;code&gt;47&lt;/code&gt; or &lt;code&gt;post-slug&lt;/code&gt;) into a model that can be rendered by the route's template. In the above example, we use the post's ID (&lt;code&gt;params.post_id&lt;/code&gt;) as an argument to Ember Data's &lt;code&gt;findRecord&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cf6fcfb9003d844f16d5ca0bdf69f4406f850b" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;songs&lt;/code&gt; template, we can specify both models and use the &lt;code&gt;{{#each}}&lt;/code&gt; helper to display each record in the song model and album model:</source>
          <target state="translated">에서 &lt;code&gt;songs&lt;/code&gt; 템플릿, 우리는 두 모델을 지정하고 사용할 수 있습니다 &lt;code&gt;{{#each}}&lt;/code&gt; 노래 모델 및 앨범 모델에서 각 레코드를 표시하는 도우미 :</target>
        </trans-unit>
        <trans-unit id="ca18914c710cd5a7ce445c84f20480dcd1681b2b" translate="yes" xml:space="preserve">
          <source>In the above component, &lt;code&gt;didDrop&lt;/code&gt; is the &lt;code&gt;action&lt;/code&gt; passed in. This action is called from the &lt;code&gt;drop&lt;/code&gt; event handler and passes one argument to the action - the &lt;code&gt;id&lt;/code&gt; value found through the &lt;code&gt;drop&lt;/code&gt; event object.</source>
          <target state="translated">위의 구성 요소에서 &lt;code&gt;didDrop&lt;/code&gt; 은 전달 된 &lt;code&gt;action&lt;/code&gt; 입니다.이 조치는 &lt;code&gt;drop&lt;/code&gt; 이벤트 핸들러 에서 호출되며 하나의 인수 ( &lt;code&gt;drop&lt;/code&gt; 이벤트 오브젝트를 통해 찾은 &lt;code&gt;id&lt;/code&gt; 값)를 조치에 전달 합니다.</target>
        </trans-unit>
        <trans-unit id="84011bb6979400cdc64045430ee5a1471aeae3d8" translate="yes" xml:space="preserve">
          <source>In the above example we have successfully used a wildcard route to handle all routes not managed by our application so that when a user navigates to &lt;code&gt;/a/non-existent/path&lt;/code&gt; they will be shown a message that says the page they're looking for wasn't found.</source>
          <target state="translated">위의 예에서 우리는 응용 프로그램에서 관리하지 않는 모든 경로를 처리하기 위해 와일드 카드 경로를 성공적으로 사용했습니다. 따라서 사용자가 &lt;code&gt;/a/non-existent/path&lt;/code&gt; 로 이동하면 찾고있는 페이지를 나타내는 메시지가 표시됩니다. 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0ee8746e7bdb361c3d2fffd5349c5c7faaf40e0a" translate="yes" xml:space="preserve">
          <source>In the above example we use the &lt;code&gt;init&lt;/code&gt; hook to seed our initial listings by calling the &lt;code&gt;filter&lt;/code&gt; action with an empty value. Our &lt;code&gt;handleFilterEntry&lt;/code&gt; action calls a function called &lt;code&gt;filter&lt;/code&gt; based on the &lt;code&gt;value&lt;/code&gt; attribute set by the input helper.</source>
          <target state="translated">위의 예에서 &lt;code&gt;init&lt;/code&gt; 후크를 사용하여 빈 값으로 &lt;code&gt;filter&lt;/code&gt; 동작을 호출하여 초기 목록을 시드 합니다. 우리 &lt;code&gt;handleFilterEntry&lt;/code&gt; 의 작업은 함수 호출 호출 &lt;code&gt;filter&lt;/code&gt; 에 기초 &lt;code&gt;value&lt;/code&gt; 입력 도우미에 의해 속성 세트를.</target>
        </trans-unit>
        <trans-unit id="9d7c6bc0ecaa7c7b4083577fdf97a5a93932117c" translate="yes" xml:space="preserve">
          <source>In the above example with the run loop, since the user's attributes end up at the same values as before execution, the template will not even rerender!</source>
          <target state="translated">위의 실행 루프 예제에서 사용자 속성은 실행 전과 동일한 값으로 끝나기 때문에 템플릿은 다시 렌더링되지 않습니다!</target>
        </trans-unit>
        <trans-unit id="36b3bb5c80cc64b8ee7712f5f993105b22dd6d26" translate="yes" xml:space="preserve">
          <source>In the above example, if any of the methods &lt;code&gt;fetchPhotosOfUsers&lt;/code&gt;, &lt;code&gt;applyInstagramFilters&lt;/code&gt;, or &lt;code&gt;uploadTrendyPhotoAlbum&lt;/code&gt; returns a promise that rejects, &lt;code&gt;handleErrors&lt;/code&gt; will be called with the reason for the failure. In this manner, promises approximate an asynchronous form of try-catch statements that prevent the rightward flow of nested callback after nested callback and facilitate a saner approach to managing complex asynchronous logic in your applications.</source>
          <target state="translated">위의 예에서, &lt;code&gt;fetchPhotosOfUsers&lt;/code&gt; , &lt;code&gt;applyInstagramFilters&lt;/code&gt; 또는 &lt;code&gt;uploadTrendyPhotoAlbum&lt;/code&gt; 메소드 중 하나라도 거부하는 약속을 반환 하면 실패 이유와 함께 &lt;code&gt;handleErrors&lt;/code&gt; 가 호출됩니다. 이러한 방식으로, 중첩 콜백 후 중첩 콜백의 올바른 흐름을 막고 애플리케이션에서 복잡한 비동기 논리를 관리하기위한 더 깔끔한 접근을 가능하게하는 비동기 형식의 try-catch 문의 근사치를 약속합니다.</target>
        </trans-unit>
        <trans-unit id="a4d4bdede070cae80deba012d408d8893e437fe7" translate="yes" xml:space="preserve">
          <source>In the above example, the error event would stop right at &lt;code&gt;route:good-for-nothing&lt;/code&gt;'s error handler and not continue to bubble. To make the event continue bubbling up to &lt;code&gt;route:application&lt;/code&gt;, you can &lt;code&gt;return true;&lt;/code&gt; from the error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2daabf4d9b94a3c6d9eebfe03f15ebf2d13606ae" translate="yes" xml:space="preserve">
          <source>In the above example, the error event would stop right at &lt;code&gt;route:good-for-nothing&lt;/code&gt;'s error handler and not continue to bubble. To make the event continue bubbling up to &lt;code&gt;route:application&lt;/code&gt;, you can return true from the error handler.</source>
          <target state="translated">위 예제에서 error 이벤트는 &lt;code&gt;route:good-for-nothing&lt;/code&gt; 의 오류 처리기 에서 바로 중지 되고 계속 버블 링되지 않습니다. 이벤트가 &lt;code&gt;route:application&lt;/code&gt; 으로 계속 버블 링되도록하려면 오류 핸들러에서 true를 리턴 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c13863c238fa0a5e51c22efcf7d517515f9a296" translate="yes" xml:space="preserve">
          <source>In the above example, the event is &lt;code&gt;render.handlebars&lt;/code&gt;, and the subscriber listened for all events beginning with &lt;code&gt;render&lt;/code&gt;. It would receive callbacks for events named &lt;code&gt;render&lt;/code&gt;, &lt;code&gt;render.handlebars&lt;/code&gt;, &lt;code&gt;render.container&lt;/code&gt;, or even &lt;code&gt;render.handlebars.layout&lt;/code&gt;.</source>
          <target state="translated">위의 예제에서 이벤트는 &lt;code&gt;render.handlebars&lt;/code&gt; 이며 가입자는 &lt;code&gt;render&lt;/code&gt; 로 시작하는 모든 이벤트를 수신했습니다 . &lt;code&gt;render&lt;/code&gt; , &lt;code&gt;render.handlebars&lt;/code&gt; , &lt;code&gt;render.container&lt;/code&gt; 또는 심지어 &lt;code&gt;render.handlebars.layout&lt;/code&gt; 이라는 이벤트에 대한 콜백을 수신 합니다.</target>
        </trans-unit>
        <trans-unit id="887acf9d1f48c5f8eb93da27b8bc375ccdfac816" translate="yes" xml:space="preserve">
          <source>In the above example, the model hook for &lt;code&gt;PhotoRoute&lt;/code&gt; will run with &lt;code&gt;params.photo_id = 5&lt;/code&gt;. The &lt;code&gt;model&lt;/code&gt; hook for &lt;code&gt;CommentRoute&lt;/code&gt;&lt;em&gt;won't&lt;/em&gt; run since you supplied a model object for the &lt;code&gt;comment&lt;/code&gt; segment. The comment's id will populate the url according to &lt;code&gt;CommentRoute&lt;/code&gt;'s &lt;code&gt;serialize&lt;/code&gt; hook.</source>
          <target state="translated">위의 예에서 &lt;code&gt;PhotoRoute&lt;/code&gt; 의 모델 후크는 &lt;code&gt;params.photo_id = 5&lt;/code&gt; 실행됩니다 . &lt;code&gt;comment&lt;/code&gt; 세그먼트에 대한 모델 객체를 제공 &lt;code&gt;CommentRoute&lt;/code&gt; 의 &lt;code&gt;model&lt;/code&gt; 후크 &lt;em&gt;가&lt;/em&gt; 실행 &lt;em&gt;되지 않습니다&lt;/em&gt; . 주석의 ID는 &lt;code&gt;CommentRoute&lt;/code&gt; 의 &lt;code&gt;serialize&lt;/code&gt; 후크 에 따라 URL을 채 웁니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5249e3e3ca6ca64b1b4e40e527e5e6d7c81ad18c" translate="yes" xml:space="preserve">
          <source>In the above examples, &lt;code&gt;direction&lt;/code&gt; is presumably a query param property on the &lt;code&gt;posts&lt;/code&gt; controller, but it could also refer to a &lt;code&gt;direction&lt;/code&gt; property on any of the controllers associated with the &lt;code&gt;posts&lt;/code&gt; route hierarchy, matching the leaf-most controller with the supplied property name.</source>
          <target state="translated">위의 예에서 &lt;code&gt;direction&lt;/code&gt; 은 아마도 &lt;code&gt;posts&lt;/code&gt; 컨트롤러 의 query param 속성 이지만 &lt;code&gt;posts&lt;/code&gt; route 계층 구조 와 연결된 컨트롤러 의 &lt;code&gt;direction&lt;/code&gt; 속성을 참조 하여 leaf-most 컨트롤러를 제공된 속성 이름과 일치시킬 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bfea77791ac3c655072d72ffec1b1267fa4553e" translate="yes" xml:space="preserve">
          <source>In the above snippet, we have referenced &lt;code&gt;myBlogPost&lt;/code&gt; while creating the record. This will let Ember know that the newly created comment belongs to &lt;code&gt;myBlogPost&lt;/code&gt;. This will create a new &lt;code&gt;comment&lt;/code&gt; record and save it to the server. Ember Data will also update &lt;code&gt;myBlogPost&lt;/code&gt; to include our newly created comment in its &lt;code&gt;comments&lt;/code&gt; relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e506d89863cd166b3912ada6024e3e490fb98a9" translate="yes" xml:space="preserve">
          <source>In the case above, the parent route looked something like this:</source>
          <target state="translated">위의 경우 상위 경로는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="478d1d20aa2b757e8e0a695fb76aab0ddf784f90" translate="yes" xml:space="preserve">
          <source>In the case where embedded JSON is expected while extracting a payload (reading) the setting is &lt;code&gt;deserialize: 'records'&lt;/code&gt;, there is no need to use &lt;code&gt;ids&lt;/code&gt; when extracting as that is the default behavior without this mixin if you are using the vanilla &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt;. Likewise, to embed JSON in the payload while serializing &lt;code&gt;serialize: 'records'&lt;/code&gt; is the setting to use. There is an option of not embedding JSON in the serialized payload by using &lt;code&gt;serialize: 'ids'&lt;/code&gt;. If you do not want the relationship sent at all, you can use &lt;code&gt;serialize: false&lt;/code&gt;.</source>
          <target state="translated">페이로드 (읽기)를 추출하는 동안 임베드 된 JSON이 예상되는 경우 설정은 &lt;code&gt;deserialize: 'records'&lt;/code&gt; , 추출 할 때 &lt;code&gt;ids&lt;/code&gt; 를 사용할 필요가 없습니다 . 바닐라 &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; 을 사용하는 경우이 믹스 인이없는 기본 동작 입니다. 마찬가지로 직렬화를 &lt;code&gt;serialize: 'records'&lt;/code&gt; 하는 동안 페이로드에 JSON을 포함하려면 'records' 가 사용하는 설정입니다. &lt;code&gt;serialize: 'ids'&lt;/code&gt; 사용하여 직렬화 된 페이로드에 JSON을 포함하지 않는 옵션이 있습니다 . 관계를 전혀 보내지 않으려면 &lt;code&gt;serialize: false&lt;/code&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="94b835eb8d79c04d2b211e3e97f6f2d9f5103261" translate="yes" xml:space="preserve">
          <source>In the component or controller, you can then define what the action does within the &lt;code&gt;actions&lt;/code&gt; hook:</source>
          <target state="translated">그런 다음 컴포넌트 또는 컨트롤러에서 &lt;code&gt;actions&lt;/code&gt; 후크 내에서 조치가 수행 하는 작업을 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c5a020f031a5e1fdb7041f9471eddab8491fa00" translate="yes" xml:space="preserve">
          <source>In the component's template, you can then use the &lt;code&gt;people&lt;/code&gt; argument as an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fc9d809ddbb2f2866e2bf957b3da1e8e0faeb5" translate="yes" xml:space="preserve">
          <source>In the component's template, you can then use the &lt;code&gt;person&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed672cd4df18afd90bc50fad77a8980c0d9e3d6" translate="yes" xml:space="preserve">
          <source>In the component, determine when something has happened, and when to tell the outside world. Here, we want to trigger the outside action (deleting the account or sending the message) after the user clicks the button and then confirms.</source>
          <target state="translated">구성 요소에서 어떤 일이 언제 발생했는지, 언제 외부 세계에 말할 것인지 결정하십시오. 여기서 사용자가 버튼을 클릭 한 후 확인한 후 외부 작업 (계정 삭제 또는 메시지 전송)을 트리거하려고합니다.</target>
        </trans-unit>
        <trans-unit id="c29bf44532a0de6efe83c3ffd2229a5dd807f40a" translate="yes" xml:space="preserve">
          <source>In the end, your deprecations can be fully turned on as &quot;throw&quot; and you should be able to use your application without error. At this point, you can go ahead and update your Ember version! When you upgrade, be sure you remove the deprecations you've fixed from the deprecation workflow file, so that you can start the process over for the next release.</source>
          <target state="translated">결국, 지원 중단은 &quot;투척&quot;으로 완전히 설정 될 수 있으며 오류없이 애플리케이션을 사용할 수 있어야합니다. 이제 Ember 버전을 업데이트 할 수 있습니다! 업그레이드 할 때 다음 릴리스에서 프로세스를 다시 시작할 수 있도록 지원 중단 워크 플로 파일에서 수정 된 지원 중단을 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="29f0010bc55ec6034535665427b5f700b4578cc6" translate="yes" xml:space="preserve">
          <source>In the event the object's method returns a value, you can simply assert that the return value is calculated correctly. Suppose our object has a &lt;code&gt;calc&lt;/code&gt; method that returns a value based on some internal state.</source>
          <target state="translated">객체의 메서드가 값을 반환하는 경우 반환 값이 올바르게 계산되도록 간단히 지정할 수 있습니다. 객체 에 내부 상태에 따라 값을 반환 하는 &lt;code&gt;calc&lt;/code&gt; 메소드 가 있다고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="2e15a183e5d6f6d354c9231666eb3edd234ebfa3" translate="yes" xml:space="preserve">
          <source>In the example above, we used &lt;code&gt;@action&lt;/code&gt; to ensure that &lt;code&gt;handleSelected&lt;/code&gt; is properly bound to the &lt;code&gt;items-list&lt;/code&gt;, but let's explore what happens if we left out &lt;code&gt;@action&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e2131194fa1faaff2ac71950e3bce704789238" translate="yes" xml:space="preserve">
          <source>In the example above, we used &lt;code&gt;@action&lt;/code&gt; to ensure that &lt;code&gt;likePost&lt;/code&gt; is properly bound to the &lt;code&gt;items-list&lt;/code&gt;, but let's explore what happens if we left out &lt;code&gt;@action&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c790f7225499bb124a8b160d3f46b82b7b9a258b" translate="yes" xml:space="preserve">
          <source>In the example below, we can see how the template is using the model properties to display some data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7b29afdf482f494a733b6b2218b0273a4d761a" translate="yes" xml:space="preserve">
          <source>In the example scenario above, some acceptance tests one might write are:</source>
          <target state="translated">위의 예제 시나리오에서 작성할 수있는 일부 승인 테스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b26b3792bb869c179a0fa525bac35080d3ca7f04" translate="yes" xml:space="preserve">
          <source>In the examples above, we showed a route that will always return the same data, a collection of favorite posts. Even when the user leaves and re-enters the &lt;code&gt;/posts&lt;/code&gt; route, they will see the same thing. But what if you need to request different data after user interaction? What if a specific post should load based on the URL that the user visited, like &lt;code&gt;posts/42&lt;/code&gt;? In Ember, this can be accomplished by defining routes with &lt;a href=&quot;../defining-your-routes#toc_dynamic-segments&quot;&gt;dynamic segments&lt;/a&gt;, or by using &lt;a href=&quot;../query-params&quot;&gt;query parameters&lt;/a&gt;, and then using the dynamic data to make requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa85e52dee2cc281f98f5dd120d218c5fb1ef18" translate="yes" xml:space="preserve">
          <source>In the first form, the callback method you provide should have the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c0e4d39cfc8941cdfd8e26962fcac38112a81f" translate="yes" xml:space="preserve">
          <source>In the first test, we just want to verify the output of the component, so we just assert that the title and owner text match what we provided in the fake &lt;code&gt;rental&lt;/code&gt;.</source>
          <target state="translated">첫 번째 테스트에서는 구성 요소의 출력을 확인하고 싶기 때문에 제목과 소유자 텍스트가 가짜 &lt;code&gt;rental&lt;/code&gt; 에서 제공 한 것과 일치한다고 주장했습니다 .</target>
        </trans-unit>
        <trans-unit id="6f57bd369b7c5a682c17d48fafc684dc8fc9ae5b" translate="yes" xml:space="preserve">
          <source>In the following example &lt;code&gt;recognize&lt;/code&gt; is used to verify if a path belongs to our application before transitioning to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5e52098bca64fd822170daa993d5a78f45fbec" translate="yes" xml:space="preserve">
          <source>In the following example we declare a computed property - &lt;code&gt;fullName&lt;/code&gt; - by calling &lt;code&gt;.Ember.computed()&lt;/code&gt; with property dependencies (&lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;) as leading arguments and getter accessor function. The &lt;code&gt;fullName&lt;/code&gt; getter function will be called once (regardless of how many times it is accessed) as long as its dependencies have not changed. Once &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; are updated any future calls (or anything bound) to &lt;code&gt;fullName&lt;/code&gt; will incorporate the new values.</source>
          <target state="translated">다음 예제에서는 속성 종속성 ( &lt;code&gt;firstName&lt;/code&gt; 및 &lt;code&gt;lastName&lt;/code&gt; )을 선행 인수 및 getter 접근 자 함수로 하여 &lt;code&gt;.Ember.computed()&lt;/code&gt; 를 호출 하여 계산 된 속성 &lt;code&gt;fullName&lt;/code&gt; 을 선언 합니다. &lt;code&gt;fullName&lt;/code&gt; 의의 getter 함수는 종속성이 변경되지 않은 한 등 (에 관계없이 액세스 횟수의) 한 번 호출됩니다. &lt;code&gt;firstName&lt;/code&gt; 또는 &lt;code&gt;lastName&lt;/code&gt; 이 업데이트 되면 &lt;code&gt;fullName&lt;/code&gt; 에 대한 향후 호출 (또는 바인딩 된 것)에 새 값이 통합됩니다.</target>
        </trans-unit>
        <trans-unit id="eef40a7baa69b422b2dd0566b57907617b44c6aa" translate="yes" xml:space="preserve">
          <source>In the following example we decorate a getter - &lt;code&gt;fullName&lt;/code&gt; - by calling &lt;code&gt;computed&lt;/code&gt; with the property dependencies (&lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;) as arguments. The &lt;code&gt;fullName&lt;/code&gt; getter will be called once (regardless of how many times it is accessed) as long as its dependencies do not change. Once &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; are updated any future calls to &lt;code&gt;fullName&lt;/code&gt; will incorporate the new values, and any watchers of the value such as templates will be updated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b743c900c97efc8ad3db27fd77a428a82e1aa30c" translate="yes" xml:space="preserve">
          <source>In the following example we define that &lt;code&gt;verified&lt;/code&gt; has a default value of &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;createdAt&lt;/code&gt; defaults to the current date at the time of the model's creation:</source>
          <target state="translated">다음의 예에서 우리는되도록 정의 &lt;code&gt;verified&lt;/code&gt; 의 기본 값이 &lt;code&gt;false&lt;/code&gt; 과 &lt;code&gt;createdAt&lt;/code&gt; 모델의 창조의 시간에 현재 날짜 기본값 :</target>
        </trans-unit>
        <trans-unit id="24a3fe752ab5bc2e775f9a3786930d5b1765d8be" translate="yes" xml:space="preserve">
          <source>In the following example we use the Router service to navigate to a route with a specific model from a Component in the first action, and in the second we trigger a query-params only transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013d8fe2714ac8c83e2128ab28f9ee67ea4ee975" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;isActive&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; if the current route is &lt;code&gt;/posts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df8790cb651cbefeff26f77eaa7ca0c47f047c9" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;Message&lt;/code&gt; class is registered as a non-singleton:</source>
          <target state="translated">다음 예제에서 &lt;code&gt;Message&lt;/code&gt; 클래스는 비 싱글 톤으로 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="233bbe607bc2c2d21456c625e11d59925fc79517" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;logger&lt;/code&gt; is a plain JavaScript object that should be returned &quot;as is&quot; when it's looked up:</source>
          <target state="translated">다음 예제에서 &lt;code&gt;logger&lt;/code&gt; 는 일반 JavaScript 객체이며 조회 할 때 &quot;있는 그대로&quot;반환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="5b6ece95eecdd3d1a5c898572f49b2da1f797953" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;writtenWords&lt;/code&gt; property on &lt;code&gt;App.ApplicationController&lt;/code&gt; will be updated live as the user types 'Lots of text that IS bound' into the text area of their browser's window.</source>
          <target state="translated">다음 예에서 &lt;code&gt;writtenWords&lt;/code&gt; 의 에 재산 &lt;code&gt;App.ApplicationController&lt;/code&gt; 는 브라우저의 윈도우의 텍스트 영역에 사용자 유형 '바인딩 텍스트의 많은'라이브 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="d90e53fc7f038f4cb394d0bcfaae08b23273b5e2" translate="yes" xml:space="preserve">
          <source>In the following example, the controller query param property &lt;code&gt;page&lt;/code&gt; is considered to have a default value of &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">다음 예에서 제어기 조회 매개 변수 특성 &lt;code&gt;page&lt;/code&gt; 의 기본값은 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c0cd9294f08764c05cedc4a72f4e0e203087329e" translate="yes" xml:space="preserve">
          <source>In the following example, the controller's &lt;code&gt;page&lt;/code&gt; query param is reset to 1, &lt;em&gt;while still scoped to the pre-transition &lt;code&gt;ArticlesRoute&lt;/code&gt; model&lt;/em&gt;. The result of this is that all links pointing back into the exited route will use the newly reset value &lt;code&gt;1&lt;/code&gt; as the value for the &lt;code&gt;page&lt;/code&gt; query param.</source>
          <target state="translated">다음 예제에서 컨트롤러의 &lt;code&gt;page&lt;/code&gt; 쿼리 매개 변수는 1로 재설정 &lt;em&gt;되지만 여전히 전환 전 &lt;code&gt;ArticlesRoute&lt;/code&gt; 모델 범위로&lt;/em&gt; 설정됩니다 . 결과적으로 종료 된 경로를 다시 가리키는 모든 링크는 새로 재설정 된 값 &lt;code&gt;1&lt;/code&gt; 을 &lt;code&gt;page&lt;/code&gt; 쿼리 매개 변수 의 값으로 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d9493f7f6dbac27a6bbf6f81be4cc1bd615d7b22" translate="yes" xml:space="preserve">
          <source>In the future this method may become asynchronous.</source>
          <target state="translated">앞으로이 방법은 비동기식이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="863bfcf825dfadfc2811ff6f4bd89086790dd5cf" translate="yes" xml:space="preserve">
          <source>In the getter, call the function with &lt;code&gt;getValue&lt;/code&gt; and return its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7763016ae3874e734aaff49da1caf0af62b9ec2c" translate="yes" xml:space="preserve">
          <source>In the last section it was discussed that helpers can be nested. This can be combined with these sorts of dynamic helpers. For example, the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_concat&quot;&gt;&lt;code&gt;{{concat}}&lt;/code&gt;&lt;/a&gt; helper makes it easy to dynamically send a number of parameters to a component or helper as a single parameter in the format of a concatenated string.</source>
          <target state="translated">마지막 섹션에서는 도우미를 중첩 할 수 있다고 논의했습니다. 이것은 이런 종류의 동적 헬퍼와 결합 될 수 있습니다. 예를 들어, &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_concat&quot;&gt; &lt;code&gt;{{concat}}&lt;/code&gt; &lt;/a&gt; 도우미를 사용하면 연결된 문자열 형식의 단일 매개 변수로 여러 매개 변수를 구성 요소 나 도우미에 동적으로 쉽게 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b214df3a911e95c5faa8abdfc7455c4bb7bc392" translate="yes" xml:space="preserve">
          <source>In the last section you learned how to write a helper. A helper is usually a simple function that can be used in any template. Ember comes with a few helpers that can make developing your templates a bit easier. These helpers can allow you to be more dynamic in passing data to another helper or component.</source>
          <target state="translated">마지막 섹션에서는 도우미 작성 방법을 배웠습니다. 도우미는 일반적으로 모든 템플릿에서 사용할 수있는 간단한 함수입니다. Ember에는 템플릿 개발을 좀 더 쉽게 해주는 몇 가지 도우미가 있습니다. 이러한 도우미를 사용하면 다른 도우미 또는 구성 요소에 데이터를 전달할 때보다 역동적으로 행동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa44080e0fbc6502e95ff1793ce1365dcc77c43a" translate="yes" xml:space="preserve">
          <source>In the next example, we'll add another test that validates that the display changes when we modify the values on the service.</source>
          <target state="translated">다음 예에서는 서비스의 값을 수정할 때 디스플레이가 변경되는지 확인하는 다른 테스트를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0c6940786aa8b86cdd87c15a75e09b023f37cd0e" translate="yes" xml:space="preserve">
          <source>In the next section, &lt;a href=&quot;../specifying-a-routes-model&quot;&gt;Specifying a Route's Model&lt;/a&gt;, you will learn more about how to load a model.</source>
          <target state="translated">다음 섹션 인 &lt;a href=&quot;../specifying-a-routes-model&quot;&gt;라우트 모델 지정에서 모델&lt;/a&gt; 로드 방법에 대해 자세히 알아 봅니다.</target>
        </trans-unit>
        <trans-unit id="5b3225b90ebee0970e72480b63600650d742c3b9" translate="yes" xml:space="preserve">
          <source>In the next section, we will study 3 types of tests that Ember supports&amp;mdash;unit, rendering, and application tests. We will look at each type and when you might use one over another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fb6c182d1e1d1b3ff42808f106bd10346acee4" translate="yes" xml:space="preserve">
          <source>In the next section, we will take a look at best practices for writing tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f227fda6517c338c8f0755e380dce74ab30bcf" translate="yes" xml:space="preserve">
          <source>In the parent component, decide how you want to react to the action. Here, we want to have the action delete the user's account when it's used in one place, and send a message when used in another place.</source>
          <target state="translated">상위 컴포넌트에서 조치에 대한 대응 방법을 결정하십시오. 여기서는 사용자가 한 장소에서 사용될 때 사용자 계정을 삭제하고 다른 곳에서 사용될 때 메시지를 보내도록합니다.</target>
        </trans-unit>
        <trans-unit id="3313b9f50f45c5962f8742cc4398d29a196f8cf9" translate="yes" xml:space="preserve">
          <source>In the parent component, let's first define what we want to happen when the user clicks the button and then confirms. In the first case, we'll find the user's account and delete it.</source>
          <target state="translated">상위 컴포넌트에서 먼저 사용자가 버튼을 클릭 한 후 확인했을 때 수행 할 작업을 정의하겠습니다. 첫 번째 경우 사용자 계정을 찾아서 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="ef1ad9585c971f09074f6ec7df95f060115bbba6" translate="yes" xml:space="preserve">
          <source>In the previous Guides topic, we showed making a dynamic segment in the app's &lt;code&gt;router.js&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37bbd2dbe24f753a19698ec2897d367ba4e42f8" translate="yes" xml:space="preserve">
          <source>In the previous example, the &lt;code&gt;fullName&lt;/code&gt; computed property depends on two other properties:</source>
          <target state="translated">이전 예제에서 &lt;code&gt;fullName&lt;/code&gt; 계산 특성은 두 가지 다른 특성에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="6bd421e4151bfe7046f0243f413ff18a5b4146ae" translate="yes" xml:space="preserve">
          <source>In the rest of the code examples in this tutorial, whenever we add or remove code, we will show a &quot;diff.&quot; The lines you need to remove have a minus sign in front of them, and the lines you should add have a plus sign. If you are using a screen reader while you go through the Guides, we recommend using Firefox and NVDA or Safari and VoiceOver for the best experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf66bc363e2d2d179030f65e4b2fd6a15e764ca" translate="yes" xml:space="preserve">
          <source>In the rest of this guide, we'll explore some of the most common enumerable conveniences. For the full list, please see the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable API reference documentation.&lt;/a&gt;</source>
          <target state="translated">이 가이드의 나머지 부분에서는 가장 일반적인 열거 가능한 편의를 살펴 보겠습니다. 전체 목록은 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable API 참조 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3626ecb2f5cd34b98ca0d7192ad49e872f224b58" translate="yes" xml:space="preserve">
          <source>In the route template &lt;code&gt;/app/templates/contact.hbs&lt;/code&gt;, let's add our contact details:</source>
          <target state="translated">경로 템플릿 &lt;code&gt;/app/templates/contact.hbs&lt;/code&gt; 에서 연락처 세부 정보를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="668783723e5ac5676bc988cb4ae5331af970bd5c" translate="yes" xml:space="preserve">
          <source>In the router example above, entering &lt;code&gt;/#/posts/new&lt;/code&gt; will take you to the &lt;code&gt;posts.new&lt;/code&gt; route.</source>
          <target state="translated">위의 라우터 예에서 &lt;code&gt;/#/posts/new&lt;/code&gt; 를 입력 하면 &lt;code&gt;posts.new&lt;/code&gt; 경로로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="9c50826bece7aef7c56c72cb820458df889a2f3c" translate="yes" xml:space="preserve">
          <source>In the screen recording below, we run the tests, deselect &quot;Hide passed tests&quot;, and set the module to our acceptance test, revealing the 3 tests we got passing.</source>
          <target state="translated">아래의 화면 녹화에서 테스트를 실행하고 &quot;Pass pass tests&quot;를 선택 해제하고 모듈을 승인 테스트로 설정하여 통과 한 3 개의 테스트를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="757d4eaaf4fcacd33748d5ba1755b484699bd593" translate="yes" xml:space="preserve">
          <source>In the second form, you should provide the key of the array of sort values as the second parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d8101c2f83153723232cf86f5364cb7b9dd72c" translate="yes" xml:space="preserve">
          <source>In the second test, only one assert is expected (line 26), since the map element is fetched from cache and does not use the utility.</source>
          <target state="translated">두 번째 테스트에서는 맵 요소가 캐시에서 페치되고 유틸리티를 사용하지 않기 때문에 단 하나의 어설 션 만 예상됩니다 (26 행).</target>
        </trans-unit>
        <trans-unit id="1d510ca47cdbc1037a37b0a8df8550c2f230b705" translate="yes" xml:space="preserve">
          <source>In the second test, we verify that clicking on the image toggles the size. We will assert that the component is initially rendered without the &lt;code&gt;wide&lt;/code&gt; class name. Clicking the image will add the class &lt;code&gt;wide&lt;/code&gt; to our element, and clicking it a second time will take the &lt;code&gt;wide&lt;/code&gt; class away. Note that we find the image element using the CSS selector &lt;code&gt;.image&lt;/code&gt;.</source>
          <target state="translated">두 번째 테스트에서는 이미지를 클릭하면 크기가 전환되는지 확인합니다. 컴포넌트는 처음에 &lt;code&gt;wide&lt;/code&gt; 클래스 이름 없이 렌더링된다고 주장합니다 . 이미지를 클릭하면 요소에 클래스 &lt;code&gt;wide&lt;/code&gt; 가 추가되고 두 번째로 클릭하면 &lt;code&gt;wide&lt;/code&gt; 클래스가 사라집니다. CSS 선택기 &lt;code&gt;.image&lt;/code&gt; 를 사용하여 이미지 요소를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="ec8a8c0979d60d242dc91aa3938dee728238dc02" translate="yes" xml:space="preserve">
          <source>In the section on &lt;a href=&quot;../ember-data#toc_updating-the-model-hook&quot;&gt;using Ember Data&lt;/a&gt;, we added a call to fetch all rentals. Let's implement our newly generated &lt;code&gt;rentals/index&lt;/code&gt; route by moving this &lt;code&gt;findAll&lt;/code&gt; call from the parent &lt;code&gt;rentals&lt;/code&gt; route to our new sub-route.</source>
          <target state="translated">&lt;a href=&quot;../ember-data#toc_updating-the-model-hook&quot;&gt;Ember Data 사용&lt;/a&gt; 섹션에서 모든 렌탈을 가져 오기위한 호출을 추가했습니다. 이 &lt;code&gt;findAll&lt;/code&gt; 호출을 상위 &lt;code&gt;rentals&lt;/code&gt; 경로에서 새로운 하위 경로로 이동하여 새로 생성 된 &lt;code&gt;rentals/index&lt;/code&gt; 경로를 구현해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="2c75e9e9ff5ae595c7677f979b46395e2cc4263b" translate="yes" xml:space="preserve">
          <source>In the tests above, we're using &lt;a href=&quot;https://api.qunitjs.com/assert/equal&quot;&gt;&lt;code&gt;assert.equal()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;assert.equal()&lt;/code&gt; checks to see if two items (our first and second arguments) equal each other. If they don't, our test will fail. The third optional argument allows us to provide a nicer message which we'll be shown if this test fails.</source>
          <target state="translated">위의 테스트에서는 &lt;a href=&quot;https://api.qunitjs.com/assert/equal&quot;&gt; &lt;code&gt;assert.equal()&lt;/code&gt; &lt;/a&gt; 있습니다. &lt;code&gt;assert.equal()&lt;/code&gt; 은 두 항목 (첫 번째 및 두 번째 인수)이 서로 같은지 확인합니다. 그렇지 않으면 테스트가 실패합니다. 세 번째 선택적 인수를 통해이 테스트가 실패하면 더 좋은 메시지를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="699021456e02b0a02fefc8a8a7b9c9b63413abb7" translate="yes" xml:space="preserve">
          <source>In these cases, make sure to declare &lt;em&gt;all&lt;/em&gt; of the relevant values in the correct order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6e40cf44bcbf93efe5143664ba428bdef9ed0e" translate="yes" xml:space="preserve">
          <source>In these cases, you can use nested routes to display one template inside of another.</source>
          <target state="translated">이 경우 중첩 된 경로를 사용하여 한 템플릿을 다른 템플릿 안에 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="277d1ed1f9dffb2d6cb7f7d8d7e8e3b1c14c3fa5" translate="yes" xml:space="preserve">
          <source>In these contexts, the helper is called a &quot;closure action&quot; helper. Its behavior is simple: If passed a function name, read that function off the &lt;code&gt;actions&lt;/code&gt; property of the current context. Once that function is read (or if a function was passed), create a closure over that function and any arguments. The resulting value of an action helper used this way is simply a function.</source>
          <target state="translated">이러한 상황에서 도우미를 &quot;폐쇄 작업&quot;도우미라고합니다. 동작은 간단합니다. 함수 이름을 전달 하면 현재 컨텍스트 의 &lt;code&gt;actions&lt;/code&gt; 속성에서 해당 함수를 읽습니다 . 해당 함수를 읽은 후 (또는 함수가 전달 된 경우) 해당 함수와 인수에 대해 클로저를 작성하십시오. 이런 식으로 사용 된 액션 헬퍼의 결과 값은 단순히 함수입니다.</target>
        </trans-unit>
        <trans-unit id="7b40f2616211274eedc138c16712bb3e490db358" translate="yes" xml:space="preserve">
          <source>In these contexts, the helper is called a &quot;closure action&quot; helper. Its behavior is simple: If passed a function name, read that function off the &lt;code&gt;actions&lt;/code&gt; property of the current context. Once that function is read, or immediately if a function was passed, create a closure over that function and any arguments. The resulting value of an action helper used this way is simply a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f097e3a4a018fab97639f3a2a4cad00cf18f7bb3" translate="yes" xml:space="preserve">
          <source>In this above case, the new comment's &lt;code&gt;belongsTo&lt;/code&gt; relationship will be automatically set to the parent blogPost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342f8dbcd0d3f421e8ad569b6a2dec1023c30989" translate="yes" xml:space="preserve">
          <source>In this case the &lt;code&gt;display-item&lt;/code&gt; component will receive a normal function that it can invoke. When it invokes the function, the &lt;code&gt;handleSelected&lt;/code&gt; function will receive the &lt;code&gt;item&lt;/code&gt; and any arguments passed, thanks to the &lt;code&gt;fn&lt;/code&gt; helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed254713d8a384178635a4f0159717fca4422f8" translate="yes" xml:space="preserve">
          <source>In this case the new comment's &lt;code&gt;belongsTo&lt;/code&gt; relationship will be set to the parent blogPost.</source>
          <target state="translated">이 경우 새 댓글의 &lt;code&gt;belongsTo&lt;/code&gt; 관계는 부모 블로그 게시물로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="199ccadf938b7b77e98d7c392830ac4292b84798" translate="yes" xml:space="preserve">
          <source>In this case we are passing, or &quot;yielding&quot;, our filter data to the inner markup as a variable called &lt;code&gt;rentals&lt;/code&gt; (line 14).</source>
          <target state="translated">이 경우 필터 데이터를 &lt;code&gt;rentals&lt;/code&gt; 라고하는 변수 (14 행) 로 내부 마크 업에 전달하거나 &quot;수확&quot; 합니다.</target>
        </trans-unit>
        <trans-unit id="702b52a12ed04e5c7a6456f4e79607df4353a3e8" translate="yes" xml:space="preserve">
          <source>In this case we want a helper function that takes three arguments: a string, a starting position, and a length. The function will return a substring of the original string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a71c7a780b2d1d5cfac2270df871c02621afe3" translate="yes" xml:space="preserve">
          <source>In this case, because the store already knew about the record, it returns a promise that it resolves with the record immediately. It does not need to ask the adapter (and, therefore, the server) for a copy since it already has it saved locally.</source>
          <target state="translated">이 경우, 상점은 이미 레코드에 대해 알고 있었으므로 레코드로 즉시 해결하겠다는 약속을 리턴합니다. 이미 로컬에 저장되었으므로 어댑터 (및 서버)에 사본을 요청할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2b4e6a4d0a04cf700c0709867999184ac9542b3f" translate="yes" xml:space="preserve">
          <source>In this case, each time the &lt;code&gt;people&lt;/code&gt; array is &lt;code&gt;map&lt;/code&gt;-ed over, it will produce an new array with completely different objects between renders. In these cases, you can help Ember determine how these objects related to each other with the &lt;code&gt;key&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a472d46b229efeb213c4172d4b722f17169718f" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;saveLike&lt;/code&gt; function will receive two arguments: the click event and the value of &lt;code&gt;@post&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1d87a15a3c605526aa32dda158f7d4b73ddaab" translate="yes" xml:space="preserve">
          <source>In this case, the content we wanted to display came from the model. But what if we want the developer using our component to be able to provide custom HTML content?</source>
          <target state="translated">이 경우 표시하려는 컨텐츠는 모델에서 가져 왔습니다. 그러나 컴포넌트를 사용하는 개발자가 사용자 정의 HTML 컨텐츠를 제공 할 수있게하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="2046680a815290cb64f7bc7924424fc5389744c4" translate="yes" xml:space="preserve">
          <source>In this case, the logger will only be injected on the index route.</source>
          <target state="translated">이 경우 로거는 인덱스 라우트에만 주입됩니다.</target>
        </trans-unit>
        <trans-unit id="e9c5869730a01e8966a0da64c64cbd5600227613" translate="yes" xml:space="preserve">
          <source>In this case, the post's comments would then be available in your template as &lt;code&gt;model.comments&lt;/code&gt;.</source>
          <target state="translated">이 경우 게시물의 댓글은 템플릿에서 &lt;code&gt;model.comments&lt;/code&gt; 로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3f476dfd13b461823b64be7683af84202948a1ab" translate="yes" xml:space="preserve">
          <source>In this case, the provided &lt;code&gt;id&lt;/code&gt; will be used to populate the URL's dynamic segment directly, bypassing the &lt;code&gt;serialize&lt;/code&gt; hook entirely:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dc04af7405d68be38e9a11700632d49b9ac8e0" translate="yes" xml:space="preserve">
          <source>In this case, we told Ember to build for the production environment via the &lt;code&gt;--env&lt;/code&gt; flag. This creates an optimized bundle that's ready to upload to your web host. Once the build finishes, you'll find all of the concatenated and minified assets in your application's &lt;code&gt;dist/&lt;/code&gt; directory.</source>
          <target state="translated">이 경우 Ember에게 &lt;code&gt;--env&lt;/code&gt; 플래그 를 통해 프로덕션 환경을 구축하도록 지시했습니다 . 그러면 웹 호스트에 업로드 할 수있는 최적화 된 번들이 생성됩니다. 빌드가 완료되면 응용 프로그램의 &lt;code&gt;dist/&lt;/code&gt; 디렉토리 에서 모든 연결 및 축소 된 자산을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="669c7b150b8832cd317cde01bc84166c816df31f" translate="yes" xml:space="preserve">
          <source>In this case, we told Ember to build for the production environment via the &lt;code&gt;--environment&lt;/code&gt; flag. This creates an optimized bundle that's ready to upload to your web host. Once the build finishes, you'll find all of the concatenated and minified assets in your application's &lt;code&gt;dist/&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eede79d6dafa887aef94f30b1ece8ed419ec25c" translate="yes" xml:space="preserve">
          <source>In this case, we use it to be notified when an Ember Data user defines a belongs-to relationship. In that case, we need to set up observers for each one, allowing us to track relationship changes and automatically reflect changes in the inverse has-many array.</source>
          <target state="translated">이 경우 Ember Data 사용자가 소속 관계를 정의 할 때이를 알리기 위해 사용합니다. 이 경우, 각각에 대해 옵저버를 설정해야 관계 변경을 추적하고 역 has-many 배열의 변경 사항을 자동으로 반영 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="461fa1325f68686ad7a43aef88f48e81b585fe1d" translate="yes" xml:space="preserve">
          <source>In this case, we're telling the &lt;code&gt;{{link-to}}&lt;/code&gt; helper the name of the route we want to link to: &lt;code&gt;contact&lt;/code&gt;. When we look at our about page at &lt;a href=&quot;http://localhost:4200/about&quot;&gt;&lt;code&gt;http://localhost:4200/about&lt;/code&gt;&lt;/a&gt;, we now have a working link to our contact page:</source>
          <target state="translated">이 경우 &lt;code&gt;{{link-to}}&lt;/code&gt; 도우미에게 연결하려는 경로 이름 인 &lt;code&gt;contact&lt;/code&gt; 을 알려줍니다 . 정보 페이지 &lt;a href=&quot;http://localhost:4200/about&quot;&gt; &lt;code&gt;http://localhost:4200/about&lt;/code&gt; &lt;/a&gt; 을 보면 연락처 페이지에 대한 링크가 작동합니다.</target>
        </trans-unit>
        <trans-unit id="dc32e934f649a7cf009df72c87782315b612f602" translate="yes" xml:space="preserve">
          <source>In this case, when the first component is clicked on, Ember will invoke the &lt;code&gt;firstWidgetClicked&lt;/code&gt; action. When the second component is clicked on, Ember will invoke the &lt;code&gt;secondWidgetClicked&lt;/code&gt; action instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73ca24be13f11ba0f5221ab51f23a9605b99495" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;div&lt;/code&gt; within the Tooltip component will get the &lt;code&gt;did-insert&lt;/code&gt; modifier applied to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78362467d2beea9a5306a4cec029f74ef9aa51c4" translate="yes" xml:space="preserve">
          <source>In this example, the Router service is injected into a component to initiate a transition to a dedicated route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d0561a9ead5edcac660e0b3bb91aa9374122d7" translate="yes" xml:space="preserve">
          <source>In this example, the URL for the &lt;code&gt;author.books&lt;/code&gt; route for a given author is copied to the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5880253b9626a727ceaac0543aeb8364c3b6af22" translate="yes" xml:space="preserve">
          <source>In this example, the function receives a dollar amount in cents as the first parameter (&lt;code&gt;value&lt;/code&gt;). We then use regular JavaScript to turn the count of cents into a formatted string, like &lt;code&gt;&quot;$5.00&quot;&lt;/code&gt;.</source>
          <target state="translated">이 예제에서 함수는 첫 번째 매개 변수 ( &lt;code&gt;value&lt;/code&gt; ) 로 센트 단위의 센트 금액을받습니다 . 그런 다음 일반 JavaScript를 사용하여 센트 수를 &lt;code&gt;&quot;$5.00&quot;&lt;/code&gt; 와 같은 형식화 된 문자열로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="6158ae94c3896cf85b79adc98237afb3cf841842" translate="yes" xml:space="preserve">
          <source>In this example, the initial value in the &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; will be set to the value of &lt;code&gt;searchWord&lt;/code&gt;. If the user changes the text, the value of &lt;code&gt;searchWord&lt;/code&gt; will also be updated.</source>
          <target state="translated">이 예에서 &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; 의 초기 값은 &lt;code&gt;searchWord&lt;/code&gt; 값으로 설정됩니다 . 사용자가 텍스트를 변경하면 &lt;code&gt;searchWord&lt;/code&gt; 의 값 도 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="5aede71aa871782486d3a5891c86a7ef3fcfd95a" translate="yes" xml:space="preserve">
          <source>In this example, the sequence of code forced the browser to recalculate style, and relayout after each step. However, if we were able to batch similar jobs together, the browser would have only needed to recalculate the style and layout once.</source>
          <target state="translated">이 예에서, 일련의 코드는 브라우저가 스타일을 다시 계산하고 각 단계 후에 릴레이 아웃하도록 강제했습니다. 그러나 유사한 작업을 함께 배치 할 수 있다면 브라우저는 스타일과 레이아웃을 한 번만 다시 계산하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="20237293cf816390a6366bd495a7d8e7744d22d2" translate="yes" xml:space="preserve">
          <source>In this example, the two computed properties are equivalent:</source>
          <target state="translated">이 예제에서 계산 된 두 속성은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ff878382b6e37c236c3de0808d9b1bd675159463" translate="yes" xml:space="preserve">
          <source>In this example, there is a list component that needs to scroll to a selected item when rendered. Since scrolling to a specific spot is based on positions within the DOM, we need to ensure that the list has been rendered before scrolling. We can first render this list, and then set the scroll.</source>
          <target state="translated">이 예제에는 렌더링 할 때 선택한 항목으로 스크롤해야하는 목록 구성 요소가 있습니다. 특정 지점으로 스크롤하는 것은 DOM 내의 위치를 ​​기반으로하기 때문에 스크롤하기 전에 목록이 렌더링되었는지 확인해야합니다. 먼저이 목록을 렌더링 한 다음 스크롤을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b35e1bea28a8c67a3355806b7603a59e103b7b51" translate="yes" xml:space="preserve">
          <source>In this example, we are using a helper to multiply &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; passing the value into &lt;code&gt;{{sum}}&lt;/code&gt;.</source>
          <target state="translated">이 예에서는 값을 &lt;code&gt;{{sum}}&lt;/code&gt; 에 전달 &lt;em&gt;하기 전에&lt;/em&gt; 도우미를 사용하여 &lt;code&gt;2&lt;/code&gt; 와 &lt;code&gt;4&lt;/code&gt; 를 곱 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1492c259605af50da4db4a47d8e5e22b694e5081" translate="yes" xml:space="preserve">
          <source>In this example, we can pass a &lt;code&gt;sign&lt;/code&gt; argument to our &lt;code&gt;format-currency&lt;/code&gt; helper:</source>
          <target state="translated">이 예제에서 우리는 &lt;code&gt;format-currency&lt;/code&gt; 도우미에 &lt;code&gt;sign&lt;/code&gt; 인수를 전달할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5767c5cb905f0664fc9f95094c3e0f1c979ba7de" translate="yes" xml:space="preserve">
          <source>In this example, we use &lt;code&gt;bind&lt;/code&gt; to bind the setupEditor method to the context of the RichTextEditor component and to have the invocation of that method be safely handled and executed by the Ember run loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8ca5686ff09717fb49801687a768d5feaf0fa7" translate="yes" xml:space="preserve">
          <source>In this example, we use Ember.run.bind to bind the setupEditor method to the context of the App.RichTextEditorComponent and to have the invocation of that method be safely handled and executed by the Ember run loop.</source>
          <target state="translated">이 예제에서는 Ember.run.bind를 사용하여 setupEditor 메서드를 App.RichTextEditorComponent의 컨텍스트에 바인딩하고 해당 메서드의 호출을 Ember 실행 루프에서 안전하게 처리하고 실행하도록합니다.</target>
        </trans-unit>
        <trans-unit id="9df69a02a508c73bcaebff148172387c68b680c7" translate="yes" xml:space="preserve">
          <source>In this example, when &lt;code&gt;handleSelected&lt;/code&gt; is invoked inside the &lt;code&gt;display-item&lt;/code&gt; component, it will &lt;strong&gt;not&lt;/strong&gt; have access to the component instance. In other words, it will have no &lt;code&gt;this&lt;/code&gt; context, so please make sure your functions are bound (via &lt;code&gt;@action&lt;/code&gt; or other means) before passing into &lt;code&gt;fn&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020ca6936c01fad3ab78384589ded10445d38689" translate="yes" xml:space="preserve">
          <source>In this example, when the button is clicked &lt;code&gt;saveLike&lt;/code&gt; will be invoked, it will &lt;strong&gt;not&lt;/strong&gt; have access to the component instance. In other words, it will have no &lt;code&gt;this&lt;/code&gt; context, so please make sure your functions are bound (via &lt;code&gt;@action&lt;/code&gt; or other means) before passing into &lt;code&gt;on&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c9f75521a4694639919f03ae33a4a4769ee609" translate="yes" xml:space="preserve">
          <source>In this example, whenever the user clicked anywhere inside the component, it will log a message to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f871c6dadd71fe1de4d3a786cddada8b88f621f" translate="yes" xml:space="preserve">
          <source>In this form, the &lt;code&gt;if&lt;/code&gt; helper receives three arguments, the conditional value, the value to render when truthy, and the value to render when falsey.</source>
          <target state="translated">이 형식에서 &lt;code&gt;if&lt;/code&gt; 도우미는 조건부 값, 사실 일 때 렌더링 할 값 및 거짓 일 때 렌더링 할 값의 세 가지 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="85676c9a2156ae5ac01732fcc6113fa9b9311590" translate="yes" xml:space="preserve">
          <source>In this route we've &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separated our concerns&lt;/a&gt;: The action &lt;code&gt;displayAlert&lt;/code&gt; contains the code that is called when the action is received, and the private function &lt;code&gt;_displayAlert&lt;/code&gt; performs the work. While not necessarily obvious here because of the small size of the functions, separating code into smaller chunks (or &quot;concerns&quot;), allows it to be more readily isolated for testing, which in turn allows you to catch bugs more easily.</source>
          <target state="translated">이 라우트에서 우리는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;우리의 관심사를 분리했습니다&lt;/a&gt; : action &lt;code&gt;displayAlert&lt;/code&gt; 는 조치가 수신 될 때 호출되는 코드를 포함하고 개인 함수 &lt;code&gt;_displayAlert&lt;/code&gt; 가 작업을 수행합니다. 함수의 크기가 작기 때문에 여기에서 반드시 분명하지는 않지만 코드를 더 작은 청크 (또는 &quot;우려&quot;)로 분리하면 테스트를 위해 코드를보다 쉽게 ​​분리 할 수있어 버그를보다 쉽게 ​​잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c80e4b42bff243ceab0e73d39f5dfb01720a6cf2" translate="yes" xml:space="preserve">
          <source>In this route we've &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separated our concerns&lt;/a&gt;: The action &lt;code&gt;displayAlert&lt;/code&gt; contains the code that is called when the action is received, and the private function &lt;code&gt;_displayAlert&lt;/code&gt; performs the work. While not necessarily obvious here because of the small size of the functions, separating code into smaller chunks (or &quot;concerns&quot;) allows it to be more readily isolated for testing, which in turn allows you to catch bugs more easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b022151b9652026cd7c8427da425bc7366703cd1" translate="yes" xml:space="preserve">
          <source>In this scenario, because Ember does not have access to a global &lt;code&gt;document&lt;/code&gt; object in the Node.js environment, you must provide one explicitly. In practice, in the non-browser environment, the stand-in &lt;code&gt;document&lt;/code&gt; object only need to implement a limited subset of the full DOM API. The &lt;code&gt;SimpleDOM&lt;/code&gt; library is known to work.</source>
          <target state="translated">이 시나리오에서 Ember는 Node.js 환경에서 글로벌 &lt;code&gt;document&lt;/code&gt; 오브젝트에 액세스 할 수 없으므로 명시 적으로 제공해야합니다. 실제로는 브라우저가 아닌 환경에서 독립형 &lt;code&gt;document&lt;/code&gt; 개체는 전체 DOM API의 제한된 하위 집합 만 구현하면됩니다. &lt;code&gt;SimpleDOM&lt;/code&gt; 의 라이브러리는 작업에 알려져있다.</target>
        </trans-unit>
        <trans-unit id="57164e03cab54092ebb12b4e1cf1df57e2e7b071" translate="yes" xml:space="preserve">
          <source>In this scenario, because Ember does not have access to a global &lt;code&gt;document&lt;/code&gt; object in the Node.js environment, you must provide one explicitly. In practice, in the non-browser environment, the stand-in &lt;code&gt;document&lt;/code&gt; object only needs to implement a limited subset of the full DOM API. The &lt;code&gt;SimpleDOM&lt;/code&gt; library is known to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65ee4cafac9946869503f8cbc68e6f462324d26" translate="yes" xml:space="preserve">
          <source>In this scenario, you can use the &lt;code&gt;paramsFor&lt;/code&gt; method to get the parameters of a parent route.</source>
          <target state="translated">이 시나리오에서는 &lt;code&gt;paramsFor&lt;/code&gt; 메소드를 사용하여 상위 라우트의 매개 변수를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e5af0f0cd0596abf60ade257c1529f5943cf96db" translate="yes" xml:space="preserve">
          <source>In this section, we will cover why testing is important, what tools can help you with testing, and how to run and debug your tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72192f66aec1fb2570c763025790700612711804" translate="yes" xml:space="preserve">
          <source>In this section, you will learn about the configurations and libraries that affect an entire application's accessibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4dbeb08773a5cb1638ce3b022da9beaf53c12bc" translate="yes" xml:space="preserve">
          <source>In this setup, when we click the child component's button, it'll update the value in both the child component &lt;em&gt;and&lt;/em&gt; the parent component. This feature led to many problematic data patterns in classic components, where mutations would occur seemingly randomly. It was hard to figure out what was causing changes, and to debug them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81560c534e4433982f4c3df51a4462ac667ae44d" translate="yes" xml:space="preserve">
          <source>In this simple example, we don't have any display-specific properties or actions just yet. For now, our controller's &lt;code&gt;model&lt;/code&gt; property acts as a pass-through (or &quot;proxy&quot;) for the model properties. (Remember that a controller gets the model it represents from its route handler.)</source>
          <target state="translated">이 간단한 예에서는 아직 디스플레이 관련 속성이나 작업이 없습니다. 현재 컨트롤러의 &lt;code&gt;model&lt;/code&gt; 속성은 모델 속성에 대한 통과 (또는 &quot;프록시&quot;) 역할을합니다. (컨트롤러는 자신의 라우트 핸들러에서 나타내는 모델을 얻습니다.)</target>
        </trans-unit>
        <trans-unit id="b0756f46ca544553b008afacdbcc6b9b4cef1187" translate="yes" xml:space="preserve">
          <source>In this template, we loop through each object. On each iteration, the current object gets stored in a variable called &lt;code&gt;rental&lt;/code&gt;. From the rental variable in each step, we create a listing with information about the property.</source>
          <target state="translated">이 템플릿에서는 각 객체를 반복합니다. 각 반복에서 현재 오브젝트는 &lt;code&gt;rental&lt;/code&gt; 이라는 변수에 저장됩니다 . 각 단계의 임대 변수에서 속성에 대한 정보가 포함 된 리스팅을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bb1245f29d80607633d75644d47932fff9d63a52" translate="yes" xml:space="preserve">
          <source>In those cases, where you can't or don't want to modify native prototypes, Ember.js allows you to completely disable the extensions described above.</source>
          <target state="translated">기본 프로토 타입을 수정할 수 없거나 수정하지 않으려는 경우 Ember.js를 사용하면 위에서 설명한 확장을 완전히 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81efe7ebe18a05dd1b3c3254dfb1143943c026da" translate="yes" xml:space="preserve">
          <source>In those cases, you can still use &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; to read and update state from POJOs within your getters, and these will track automatically and trigger updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa3eef579971126af92229cfe86ba023e5c223f" translate="yes" xml:space="preserve">
          <source>In web development, query parameters are used within a URL as described above but can also be used in API requests that retrieve data. Ember treats these as &lt;em&gt;two&lt;/em&gt; different concepts. This section describes how routing query parameters are used in Ember. See &lt;a href=&quot;https://guides.emberjs.com/models/finding-records/#toc_querying-for-multiple-records&quot;&gt;finding records&lt;/a&gt; to see how query parameters are applied to API requests in Ember Data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd46774c381c00d09e29f00fa227bec7c7d940cc" translate="yes" xml:space="preserve">
          <source>In what order are jobs executed on the queues?</source>
          <target state="translated">대기열에서 작업이 어떤 순서로 실행됩니까?</target>
        </trans-unit>
        <trans-unit id="c7aceac0f5ac3bfa7079511870522e9827cd7fbe" translate="yes" xml:space="preserve">
          <source>In your browser, open &lt;a href=&quot;http://localhost:4200/scientists&quot;&gt;&lt;code&gt;http://localhost:4200/scientists&lt;/code&gt;&lt;/a&gt;. You should see the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; we put in the &lt;code&gt;scientists.hbs&lt;/code&gt; template right below the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; from our &lt;code&gt;application.hbs&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f2b38d81eeabfd2bc7ef6b0fd39d869c6e5d1b" translate="yes" xml:space="preserve">
          <source>In your browser, open &lt;a href=&quot;http://localhost:4200/scientists&quot;&gt;&lt;code&gt;http://localhost:4200/scientists&lt;/code&gt;&lt;/a&gt;. You should see the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; you put in the &lt;code&gt;scientists.hbs&lt;/code&gt; template, right below the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; from our &lt;code&gt;application.hbs&lt;/code&gt; template.</source>
          <target state="translated">브라우저에서 &lt;a href=&quot;http://localhost:4200/scientists&quot;&gt; &lt;code&gt;http://localhost:4200/scientists&lt;/code&gt; 를여십시오&lt;/a&gt; . 당신은 표시되어야 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 당신이에 넣어 &lt;code&gt;scientists.hbs&lt;/code&gt; 의 바로 아래에, 템플릿 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 우리에서 &lt;code&gt;application.hbs&lt;/code&gt; 의 템플릿입니다.</target>
        </trans-unit>
        <trans-unit id="f14e7e7921e753c5ab85465a14bce8af05d18537" translate="yes" xml:space="preserve">
          <source>In your integration test, use the &lt;code&gt;wait&lt;/code&gt; function to wait until your debounce timer is up and then assert that the page is rendered appropriately.</source>
          <target state="translated">통합 테스트에서 &lt;code&gt;wait&lt;/code&gt; 기능을 사용 하여 디 바운스 타이머가 작동 할 때까지 기다린 다음 페이지가 적절하게 렌더링되도록합니다.</target>
        </trans-unit>
        <trans-unit id="4120c3ad66daf24de1f6245ad5c1b4020268016a" translate="yes" xml:space="preserve">
          <source>In your test, use the &lt;code&gt;settled&lt;/code&gt; helper to wait until your debounce timer is up and then assert that the page is rendered appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0088eaa395b20ae6efa31c5287ba25b2ad7bf5" translate="yes" xml:space="preserve">
          <source>Including jQuery with integration APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660c85ded4228d28ec3896fd97747ebf5f9f5e78" translate="yes" xml:space="preserve">
          <source>Including jQuery without integration APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f39e75ae8721f349f4f7a1d287a6800970f1027" translate="yes" xml:space="preserve">
          <source>Index Routes</source>
          <target state="translated">색인 경로</target>
        </trans-unit>
        <trans-unit id="5a6bdab0c6db458e90545a059bae821391f2bc1c" translate="yes" xml:space="preserve">
          <source>Inflector</source>
          <target state="translated">Inflector</target>
        </trans-unit>
        <trans-unit id="4f1335a34172db79b3bbf3af91a45dba45bda360" translate="yes" xml:space="preserve">
          <source>Inflector.Ember provides a mechanism for supplying inflection rules for your application. Ember includes a default set of inflection rules, and provides an API for providing additional rules.</source>
          <target state="translated">Inflector.Ember는 애플리케이션에 활용 규칙을 제공하기위한 메커니즘을 제공합니다. Ember는 기본 변곡 규칙을 포함하고 추가 규칙을 제공하기위한 API를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="917f6528d25b634c59b7214df4542ce21c466dcf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L110&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:110 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L110&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : (110)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8af38017a0e4b4a67cbca318a828a847945fae7e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L137&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:137 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L137&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 137&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="275e9366146489daa2ae55ad27e435a7b48c6668" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L161&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:161 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L161&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 161&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="04449e818c6a9276d4c445011df9e6919966cd24" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L191&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:191 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L191&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 191&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e15487780dc85d4846cae12b282078401bfeac3d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L216&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:216 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L216&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 216&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa690db7efe3617dad4adaf1817f8691090aeb70" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L244&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:244 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L244&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 244&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9993875454e213980296f893b0ec7a48ecf6904b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L271&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:271 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L271&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 271&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e9383ec47eab4378dbd7ae5330fcd80607917fc" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L298&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:298 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L298&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 298&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c1ca27743f38a06ce9d0c7b136db63e78cd7aa52" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L323&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:323 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L323&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 323&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="169f2df807678932156445038d7552c48a8248f7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L33&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:33 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L33&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 33&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cad300a565ca32992d0287cacd1a596863896094" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L348&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:348 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L348&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : 348&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="10725a12c6d5ede44b34d68abea25b184d3ffc91" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L410&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:410 &lt;/a&gt;</source>
          <target state="translated">에서 상 속됨 &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L410&quot;&gt;DS.BuildURLMixin 부가 기능 / - 개인 / 어댑터 / 빌드 - URL-mixin.js : (410)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4de67514525517a90c3e04b0ab9fa8d3fa65d119" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L112&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:112 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L112&quot;&gt;DS.RecordArray&lt;/a&gt; 에서 상 속됨 addon / -private / system / record-arrays / record-array.js : 112</target>
        </trans-unit>
        <trans-unit id="8c7e7a55b41883ec0076fcb2affa419dcf6e5996" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L180&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:180 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L180&quot;&gt;DS.RecordArray&lt;/a&gt; 에서 상 속됨 addon / -private / system / record-arrays / record-array.js : 180</target>
        </trans-unit>
        <trans-unit id="2f853db6114f0ea5984f7bae2b6757b0cf1cd7ca" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L40&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:40 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L40&quot;&gt;DS.RecordArray&lt;/a&gt; 에서 상 속됨 addon / -private / system / record-arrays / record-array.js : 40</target>
        </trans-unit>
        <trans-unit id="b34b906633a1f734cc5778bd33b6997baad28984" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L54&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:54 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L54&quot;&gt;DS.RecordArray&lt;/a&gt; 에서 상 속됨 addon / -private / system / record-arrays / record-array.js : 54</target>
        </trans-unit>
        <trans-unit id="48be307f17a4fd3c8afac7232c8acaa693feac88" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L86&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:86 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L86&quot;&gt;DS.RecordArray&lt;/a&gt; 에서 상 속됨 addon / -private / system / record-arrays / record-array.js : 86</target>
        </trans-unit>
        <trans-unit id="f9b9813b71a1a30355f0a8f15e79deee6d7c6c4b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L223&quot;&gt; DS.Adapter addon/adapter.js:223 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L223&quot;&gt;DS.Adapter addon / adapter.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="719207b473e2a6e9d32d7423d4bb057f8b60ff8d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L257&quot;&gt; DS.Adapter addon/adapter.js:257 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L257&quot;&gt;DS.Adapter addon / adapter.js : 257&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="ec839b1cb1ddad3b9dffe4c0d982c6d69cd1bf16" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L417&quot;&gt; DS.Adapter addon/adapter.js:417 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L417&quot;&gt;DS.Adapter addon / adapter.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="32ee7137b0084532e7a7b79bbc7e0a3a05321ab1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L485&quot;&gt; DS.Adapter addon/adapter.js:485 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L485&quot;&gt;DS.Adapter addon / adapter.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="ed7ca6251b9a91cddc15739a0f57bfa3e208ca4d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L535&quot;&gt; DS.Adapter addon/adapter.js:535 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L535&quot;&gt;DS.Adapter addon / adapter.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="ecdfd3bf26d9c18e7005fcd4c61290c301d26ab7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L590&quot;&gt; DS.Adapter addon/adapter.js:590 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L590&quot;&gt;DS.Adapter addon / adapter.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="af262bc7cae5def7694aecd77a1b9ad33259a06b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L630&quot;&gt; DS.Adapter addon/adapter.js:630 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L630&quot;&gt;DS.Adapter addon / adapter.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="cfdac2c425f716850e207364b9744042fc88c957" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L65&quot;&gt; DS.Adapter addon/adapter.js:65 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L65&quot;&gt;DS.Adapter addon / adapter.js : 65&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="11ff2f1b4c28926f8d7a8ea0bffbebcce237b251" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1007&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1007 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1007&quot;&gt;DS.RESTAdapter addon / adapters / rest.js : 1007&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="23a5de1b7eed4883f02cf4f23da9302f08fbe98f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1243&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1243 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1243&quot;&gt;DS.RESTAdapter addon / adapters / rest.js : 1243&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="01d97869873f6d54c3c60da5743df12bec42402b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1301&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1301 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1301&quot;&gt;DS.RESTAdapter addon / adapters / rest.js : 1301&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="44121039bcb7900811192e43b5c06279774a5c92" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1321&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1321 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1321&quot;&gt;DS.RESTAdapter addon / adapters / rest.js : 1321&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="4cbcefe1ca9c089e18f378d97dde846a51c19f57" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1358&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1358 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1358&quot;&gt;DS.RESTAdapter addon / adapters / rest.js : 1358&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="8556b90bb6b31e8386159cee01252f8f6889f7d4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L289&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:289 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L289&quot;&gt;DS.RESTAdapter addon / adapters / rest.js : 289&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="3a67e9c1db45c3bf8f363c33d78e4f6ac0f716a1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L395&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:395 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L395&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="2357c1b1d1d2cac5a37c391ed79f7d82a004982c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L413&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:413 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L413&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="cd04b16f1a38322b973a4673f8ad7d2ae3578f4e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L430&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:430 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L430&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="8a41eaa1e24a2e484101ca0160b5c88459ab7bda" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L452&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:452 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L452&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="5f336cc122fae293e3aaaa55af3dd3cdec0d060f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L485&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:485 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L485&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="99c8e92083a384eed18d2da63db34979b2c1bc72" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L521&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:521 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L521&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="ebc176d8991bff939d7e44e3b94c358e89278459" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L557&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:557 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L557&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="24724d184c7ebfcb2014503ed3dcdfff40a1850f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L594&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:594 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L594&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="a945ee640fe756dd1205c0bf6a779f039f02012a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L641&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:641 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L641&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="d22921a58342f30c31e09bc57b853f91ff073a14" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L695&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:695 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L695&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="46c0d2cc03174e1f1cf5b21026fac823bbf76da2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L747&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:747 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L747&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="b8523283ef449bd6f9165f76f188369ed0698962" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L782&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:782 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L782&quot;&gt;DS.RESTAdapter addon / adapters / rest.js : 782&lt;/a&gt; 에서 상 속됨</target>
        </trans-unit>
        <trans-unit id="34c21fa905a0cde4e22d95be7910eb2ea45fb4a1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L819&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:819 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L819&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="70f6c823e8a21e471bbf58d212b5db1a436b571d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L869&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:869 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L869&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="a678e0e08061c6a8842ad2fba7b9aafc3e1bcebf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L933&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:933 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L933&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="567641d73878b8e3185539ba68d218d19814ed3a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L992&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:992 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L992&quot;&gt;DS.RESTAdapter addon / adapters / rest.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="7b8a7d52de2ae7100e3ee906b9e9cc54349be2a1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L129&quot;&gt; DS.Serializer addon/serializer.js:129 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L129&quot;&gt;DS.Serializer addon / serializer.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="2f24d0861763921df7a604a19c922db4e2055b76" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L29&quot;&gt; DS.Serializer addon/serializer.js:29 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L29&quot;&gt;DS.Serializer addon / serializer.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="cf2b2961b775d7a9873085a1a46e9ae20acb6d44" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L87&quot;&gt; DS.Serializer addon/serializer.js:87 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L87&quot;&gt;DS.Serializer addon / serializer.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="08a97c7407bcd5972ff5aa5497035f65e4109fcf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1059&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1059 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1059&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1059</target>
        </trans-unit>
        <trans-unit id="7e294d569041d7846b2343ea8b98c0a3db063ef3" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L109&quot;&gt; DS.JSONSerializer addon/serializers/json.js:109 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L109&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 109</target>
        </trans-unit>
        <trans-unit id="c308cb3dd8618862f397b175f6700b070ceca2d8" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1090&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1090 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1090&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1090</target>
        </trans-unit>
        <trans-unit id="82d106775aebc802dcf3f6529d0ea35e19e20b0a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1137&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1137 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1137&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1137</target>
        </trans-unit>
        <trans-unit id="671c7920dcf2b6a8a8f5a8a40f5f7764df4a8482" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1189&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1189 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1189&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1189</target>
        </trans-unit>
        <trans-unit id="8a9128336454243724d412f2aa85c2bf341d938a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1238&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1238 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1238&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1238</target>
        </trans-unit>
        <trans-unit id="5dda906cc8b5218b35970e394a749fdcdd16a0d4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1272&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1272 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1272&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1272</target>
        </trans-unit>
        <trans-unit id="f30f95b17810d21731966ade92cf742564e4e1e6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1306&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1306 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1306&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1306</target>
        </trans-unit>
        <trans-unit id="994a8f911ac1650e158fa4325f66f053e2bbf31f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1417&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1417 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1417&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1417</target>
        </trans-unit>
        <trans-unit id="5f65ba8ac7231be9fde46c0fea17cadfad33775c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1442&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1442 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1442&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1442</target>
        </trans-unit>
        <trans-unit id="32fc8d932a64b77a154c2a26ec7cf29a3e5d5d51" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1469&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1469 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1469&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1469</target>
        </trans-unit>
        <trans-unit id="c67dd9a07916dad70e6c054c22d7f2a99c8fa916" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1526&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1526 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1526&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 1526</target>
        </trans-unit>
        <trans-unit id="1363c2175a352732672ab04d6d784a9711765582" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L200&quot;&gt; DS.JSONSerializer addon/serializers/json.js:200 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L200&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 200</target>
        </trans-unit>
        <trans-unit id="4b79ffd6186366f6029650dedc16e747a20be195" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L260&quot;&gt; DS.JSONSerializer addon/serializers/json.js:260 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L260&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 260</target>
        </trans-unit>
        <trans-unit id="beb5629b8ad9699317bf95b5454fa6fee8ec8c45" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L274&quot;&gt; DS.JSONSerializer addon/serializers/json.js:274 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L274&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 274</target>
        </trans-unit>
        <trans-unit id="854a42700ba3f950adcdf80c239498e6afea70c7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L288&quot;&gt; DS.JSONSerializer addon/serializers/json.js:288 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L288&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 288</target>
        </trans-unit>
        <trans-unit id="1e277be7f21f4adc99f8b37379575bacd53edd1b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L302&quot;&gt; DS.JSONSerializer addon/serializers/json.js:302 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L302&quot;&gt;DS.JSONSerializer addon / serializers / json.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="2bca61e2974353b8aeee2ec63ed635478bb5ff31" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L316&quot;&gt; DS.JSONSerializer addon/serializers/json.js:316 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L316&quot;&gt;DS.JSONSerializer addon / serializers / json.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="8d24a45fd2b2ccf2fbc331f69957c1386ba38806" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L330&quot;&gt; DS.JSONSerializer addon/serializers/json.js:330 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L330&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 330</target>
        </trans-unit>
        <trans-unit id="b67a80706efe019bba498f181b3d08725dddd205" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L344&quot;&gt; DS.JSONSerializer addon/serializers/json.js:344 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L344&quot;&gt;DS.JSONSerializer addon / serializers / json.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="70bd930c372be35c32638663d32662fdb5abf4b1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L358&quot;&gt; DS.JSONSerializer addon/serializers/json.js:358 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L358&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 358</target>
        </trans-unit>
        <trans-unit id="da7c8bc671c52ee46062d769938729ce48901003" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L372&quot;&gt; DS.JSONSerializer addon/serializers/json.js:372 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L372&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 372</target>
        </trans-unit>
        <trans-unit id="52fcc7cb798757fbaa3b3436fc4dea31521fa732" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L386&quot;&gt; DS.JSONSerializer addon/serializers/json.js:386 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L386&quot;&gt;DS.JSONSerializer addon / serializers / json.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="02bb87432f3add4d0c1dd5ecee7830879e873441" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L400&quot;&gt; DS.JSONSerializer addon/serializers/json.js:400 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L400&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 400</target>
        </trans-unit>
        <trans-unit id="a3a9eb8111cbd96b4d6b60ddab9a2fe90142bfc1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L414&quot;&gt; DS.JSONSerializer addon/serializers/json.js:414 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L414&quot;&gt;DS.JSONSerializer addon / serializers / json.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="1fabe01ef0ecfd7f571faf8dffe2afb39f51ad0d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L428&quot;&gt; DS.JSONSerializer addon/serializers/json.js:428 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L428&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 428</target>
        </trans-unit>
        <trans-unit id="16c881a0e367933bbb0f37284b7a53fae612bb65" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L489&quot;&gt; DS.JSONSerializer addon/serializers/json.js:489 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L489&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 489</target>
        </trans-unit>
        <trans-unit id="8d3c9438bb26adbb134d9122799f213e3b85f0c6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L550&quot;&gt; DS.JSONSerializer addon/serializers/json.js:550 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L550&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 550</target>
        </trans-unit>
        <trans-unit id="ed7b8c739f447ebcc53994d8bac495c82640fd94" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L564&quot;&gt; DS.JSONSerializer addon/serializers/json.js:564 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L564&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 564</target>
        </trans-unit>
        <trans-unit id="d91ddf0a41f7ff51a8173f2ec002d43c9cbda3e6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L588&quot;&gt; DS.JSONSerializer addon/serializers/json.js:588 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L588&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 588</target>
        </trans-unit>
        <trans-unit id="b914cfcf2857ee1b98c23f8089b9096f7b84327b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L637&quot;&gt; DS.JSONSerializer addon/serializers/json.js:637 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L637&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 637</target>
        </trans-unit>
        <trans-unit id="99789ff3c49a3cbfb398977aeea4827794e1d77b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L660&quot;&gt; DS.JSONSerializer addon/serializers/json.js:660 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L660&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 660</target>
        </trans-unit>
        <trans-unit id="9a381f67f429e62a0fe7875e1149da5be1dde145" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L838&quot;&gt; DS.JSONSerializer addon/serializers/json.js:838 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L838&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 838</target>
        </trans-unit>
        <trans-unit id="e2a8be874b6f2e2389ca575fd139e70767bb9b10" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L85&quot;&gt; DS.JSONSerializer addon/serializers/json.js:85 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L85&quot;&gt;DS.JSONSerializer addon / serializers / json.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="e8468b7f9d631ecd5eca870b9d9234c37a7f5c50" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L879&quot;&gt; DS.JSONSerializer addon/serializers/json.js:879 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L879&quot;&gt;DS.JSON&lt;/a&gt; 에서 상 속됨 Serializer addon / serializers / json.js : 879</target>
        </trans-unit>
        <trans-unit id="4ecf8dce048c5e5e235dd500e4d0a884b9a1254f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/transforms/transform.js#L71&quot;&gt; DS.Transform addon/transforms/transform.js:71 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/transforms/transform.js#L71&quot;&gt;DS.Transform addon / transforms / transform.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="6d8d8eda80ddc83b2d1eb4e5ed5c54addf79ae94" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/transforms/transform.js#L90&quot;&gt; DS.Transform addon/transforms/transform.js:90 &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/transforms/transform.js#L90&quot;&gt;DS.Transform addon / transforms / transform.js&lt;/a&gt; 에서 상 속됨 :</target>
        </trans-unit>
        <trans-unit id="e4fbd02a45a4237944cb477c19dd50d1dfc39419" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L120&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:120 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ad722557faca23cd71c64066c575fb3a9decb8" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L147&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:147 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224998a124d4889bdcab7b13929a9e9673d94c63" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L172&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:172 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab53c1fe2755688ba3e324cea657f317639ce5a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L202&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:202 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381fa73758ac8b5770d307bc09d0a516ed5fb73c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L227&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:227 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65b80255c2fb600000c48b52f1dca66a1be9bd7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L255&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:255 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41d8dbe6bb44253b8bc10b9118ddc723b676782" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L282&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:282 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cd5560670800a3700994b10f3c905fca594729" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L309&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:309 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13510905b336ddb9bebf8d08d3e22e2f33951d64" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L334&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:334 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf01da84c1fb6d201dec61acf4da2283e2a2c60b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L359&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:359 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30151f7478c5746102a6c828174a931636b644da" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L37&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:37 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f86c63112d49bb9ac622b060cee169bec328398" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/-private/build-url-mixin.js#L425&quot;&gt; BuildURLMixin ../adapter/addon/-private/build-url-mixin.js:425 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21dae4549772b83cf05e642d7b1d079b4298a484" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/index.js#L218&quot;&gt; Adapter ../adapter/addon/index.js:218 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d61868c1a84731917b3db39fa0a079e8484305" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/index.js#L251&quot;&gt; Adapter ../adapter/addon/index.js:251 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ed8d3b17404c00724e1ecb9199db75df468f28" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/index.js#L414&quot;&gt; Adapter ../adapter/addon/index.js:414 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d313773824f4a81964b7fb147a0621e401cd24a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/index.js#L482&quot;&gt; Adapter ../adapter/addon/index.js:482 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209f8c63517f9e7e985c79d70a9e54de78105039" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/index.js#L532&quot;&gt; Adapter ../adapter/addon/index.js:532 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e174aad9e79c5069cd7dbf48506eb955ff894e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/index.js#L587&quot;&gt; Adapter ../adapter/addon/index.js:587 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304a758ce14aca7c82b1d4901dd4dc1319c07814" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/index.js#L623&quot;&gt; Adapter ../adapter/addon/index.js:623 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306a06294b9ccbce645b5bded0645effcd58916d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L1202&quot;&gt; RESTAdapter ../adapter/addon/rest.js:1202 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf09fb14bbb257c36a2e147ebf00f4912f196384" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L315&quot;&gt; RESTAdapter ../adapter/addon/rest.js:315 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a230e4939fbab12bab61185e3fe4c29f45d1a9" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L321&quot;&gt; RESTAdapter ../adapter/addon/rest.js:321 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f551a92b6e73bbf14dc795e9ab94920b263527b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L427&quot;&gt; RESTAdapter ../adapter/addon/rest.js:427 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a6b30cec0243756e1063bf8fa215d2df995428" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L445&quot;&gt; RESTAdapter ../adapter/addon/rest.js:445 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c124bd01367852936f1c2cf4a4927835f1c625cf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L462&quot;&gt; RESTAdapter ../adapter/addon/rest.js:462 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923e74002b8d6e7f55fa65d4ade721ef57f90fcf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L487&quot;&gt; RESTAdapter ../adapter/addon/rest.js:487 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f2abb1cc3b2de10dccb29d97547251c1a034b4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L511&quot;&gt; RESTAdapter ../adapter/addon/rest.js:511 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15f937b12ac6fb312bcfed46960aea117782016" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L536&quot;&gt; RESTAdapter ../adapter/addon/rest.js:536 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e034fa3dcfc8a2ac839e5db3e8b51ade8192ec26" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L563&quot;&gt; RESTAdapter ../adapter/addon/rest.js:563 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4873e373ff024a51d3d9eab80fea781f7d4f6895" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L591&quot;&gt; RESTAdapter ../adapter/addon/rest.js:591 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5396b16071f8d2649e732ad95de8731bd448e4b0" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L629&quot;&gt; RESTAdapter ../adapter/addon/rest.js:629 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bff4ce1582535f7c07fa0be16c4f50f7772f09" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L674&quot;&gt; RESTAdapter ../adapter/addon/rest.js:674 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4863c9c48451f3c2904b2e30fa868d030cb9a008" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L718&quot;&gt; RESTAdapter ../adapter/addon/rest.js:718 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64dec43d25a20d946786fa6c7a4d89bbb7c25006" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L742&quot;&gt; RESTAdapter ../adapter/addon/rest.js:742 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df320d57f88bc05dacbe3b92b3b2e44d0d13146e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L767&quot;&gt; RESTAdapter ../adapter/addon/rest.js:767 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1a2b98bab12797b45061b3c26c6a8665d76afc" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L808&quot;&gt; RESTAdapter ../adapter/addon/rest.js:808 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73050d4bc6dfc1d013932e0d5136e837bbd9009" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L876&quot;&gt; RESTAdapter ../adapter/addon/rest.js:876 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8c722d3414a9218644fd087dce60b3cce25677" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L933&quot;&gt; RESTAdapter ../adapter/addon/rest.js:933 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2a81e7cccc8a5a7b6ac99e1e70db35a30de5ac" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../adapter/addon/rest.js#L948&quot;&gt; RESTAdapter ../adapter/addon/rest.js:948 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9b1d66213262502f8f38a24da65448542dfc6c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/-private/transforms/transform.js#L100&quot;&gt; Transform ../serializer/addon/-private/transforms/transform.js:100 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7cbd7f3815140f465ef61b39c1b66d3529665b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/-private/transforms/transform.js#L79&quot;&gt; Transform ../serializer/addon/-private/transforms/transform.js:79 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600460c6f8c3e52242bc1ac60ad2b309165c128f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/index.js#L127&quot;&gt; Serializer ../serializer/addon/index.js:127 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4019b832ad38139aada9253185d5f7f4d972ae" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/index.js#L27&quot;&gt; Serializer ../serializer/addon/index.js:27 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47887d5142b7d5275ac27351f1b7b1122488e7cd" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/index.js#L85&quot;&gt; Serializer ../serializer/addon/index.js:85 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b37fcb11a0392e2ed51d5b404133968d1f4184" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1058&quot;&gt; JSONSerializer ../serializer/addon/json.js:1058 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2be1836915d4d5184733df86a8002b178e2c90" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L107&quot;&gt; JSONSerializer ../serializer/addon/json.js:107 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd0920ce12940db1287800eb033b8393389f256" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1090&quot;&gt; JSONSerializer ../serializer/addon/json.js:1090 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f98cef9c6b474c086f1e78e8a4007a17eab97ea" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1136&quot;&gt; JSONSerializer ../serializer/addon/json.js:1136 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69de6b556e4842ed109f217cc40108e1bae7cfae" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1189&quot;&gt; JSONSerializer ../serializer/addon/json.js:1189 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f49e83687657d4db0dc4240d00a8bf41b94096" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1234&quot;&gt; JSONSerializer ../serializer/addon/json.js:1234 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db91397d8716d7d6650d14d01c6679b1090bffb" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1269&quot;&gt; JSONSerializer ../serializer/addon/json.js:1269 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00b871324c927561b9fe63e90402e7d212e9120" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1303&quot;&gt; JSONSerializer ../serializer/addon/json.js:1303 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b11de0d46edc3658fb526e962b3339e069aed2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1414&quot;&gt; JSONSerializer ../serializer/addon/json.js:1414 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd41f6b517a95d71ee2b898a839649711f52b81" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1440&quot;&gt; JSONSerializer ../serializer/addon/json.js:1440 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c039fdf1ccfe8bbe4d024224900dcaa122088c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L1468&quot;&gt; JSONSerializer ../serializer/addon/json.js:1468 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c1ebca0890e6622bc1bb739b536675cf03ef0c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L204&quot;&gt; JSONSerializer ../serializer/addon/json.js:204 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0fa5713374317d30027f79af628d07bb7aa0b8" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L264&quot;&gt; JSONSerializer ../serializer/addon/json.js:264 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cdc09581f38d8483b4fb9a84a321ba9422ea2e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L278&quot;&gt; JSONSerializer ../serializer/addon/json.js:278 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6014180ea1a022c28fd20edbaa21c3b690c05f1f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L292&quot;&gt; JSONSerializer ../serializer/addon/json.js:292 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd79ca5796159d2476c1d2bea640c04dc01588c7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L306&quot;&gt; JSONSerializer ../serializer/addon/json.js:306 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba764e3b9a3649043f4c13b2b761ad07f36bf5f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L320&quot;&gt; JSONSerializer ../serializer/addon/json.js:320 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c3a1b50dcb0d1d03a43a33bcdc74525d282d10" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L334&quot;&gt; JSONSerializer ../serializer/addon/json.js:334 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b26aeab4cab8446cd5d90a9092302ee85407847" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v3.25.0/packages/-ember-data/../serializer/addon/json.js#L348&quot;&gt; JSONSerializer ../serializer/addon/json.js:348 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
