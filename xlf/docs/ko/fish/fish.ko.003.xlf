<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="d27b4fd727666f53e797902bf47550ba0a21184a" translate="yes" xml:space="preserve">
          <source>Syntax Highlighting</source>
          <target state="translated">구문 강조</target>
        </trans-unit>
        <trans-unit id="037fceb004812e2c76fd4ee125e5787960e7ee91" translate="yes" xml:space="preserve">
          <source>Syntax highlighting</source>
          <target state="translated">구문 강조</target>
        </trans-unit>
        <trans-unit id="418e9ee62ad6b7ba7264fdf5d0ee995e2e351045" translate="yes" xml:space="preserve">
          <source>Syntax overview</source>
          <target state="translated">구문 개요</target>
        </trans-unit>
        <trans-unit id="648056b93fe4233586db207ccd2bb7c37a24ed26" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">관리자가 POSIX 스타일 셸의 &lt;code&gt;/etc/profile&lt;/code&gt; 과 유사하게 시스템의 모든 사용자에 대해 실행해야하는 초기화를 &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (일반적으로 &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; )에 포함 할 수있는 시스템 전체 구성 파일 .</target>
        </trans-unit>
        <trans-unit id="afcc6a38c449b540b7b14d03d1b1f6092ebcf158" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;);</source>
          <target state="translated">시스템 전체 구성 파일-관리자가 시스템의 모든 사용자에 대해 POSIX 스타일 쉘의 &lt;code&gt;/etc/profile&lt;/code&gt; 과 유사하게 &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (일반적으로 &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; ) 에서 실행해야하는 초기화를 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="1870d395ae4bdd7644d2246d47b66d22f565347b" translate="yes" xml:space="preserve">
          <source>Tab Completion</source>
          <target state="translated">탭 완성</target>
        </trans-unit>
        <trans-unit id="87564ea1bf094f88395489e37aab98a53d8a3438" translate="yes" xml:space="preserve">
          <source>Tab Completions</source>
          <target state="translated">탭 완성</target>
        </trans-unit>
        <trans-unit id="eb8b89e8c468a2f2b0bf3f62ac7419a0270f3b4b" translate="yes" xml:space="preserve">
          <source>Tab completion</source>
          <target state="translated">탭 완성</target>
        </trans-unit>
        <trans-unit id="2ea2b2cc91429ba0736ea7b5a4dc7f2208abf174" translate="yes" xml:space="preserve">
          <source>Tab completion is one of the most time saving features of any modern shell. By tapping the tab key, the user asks &lt;code&gt;fish&lt;/code&gt; to guess the rest of the command or parameter that the user is currently typing. If &lt;code&gt;fish&lt;/code&gt; can only find one possible completion, &lt;code&gt;fish&lt;/code&gt; will write it out. If there is more than one completion, &lt;code&gt;fish&lt;/code&gt; will write out the longest prefix that all completions have in common. If the completions differ on the first character, a list of all possible completions is printed. The list features descriptions of the completions and if the list doesn't fit the screen, it is scrollable by using the arrow keys, the page up/page down keys, the tab key or the space bar.</source>
          <target state="translated">탭 완성은 최신 쉘의 가장 시간 절약 기능 중 하나입니다. 탭 키를 누르면 사용자는 &lt;code&gt;fish&lt;/code&gt; 에게 사용자가 현재 입력하고있는 나머지 명령 또는 매개 변수를 추측 하도록 요청 합니다. 경우 &lt;code&gt;fish&lt;/code&gt; 단지 하나의 가능한 완료를 찾을 수 있습니다, &lt;code&gt;fish&lt;/code&gt; 를 기록합니다. 하나 이상의 완료가있는 경우, &lt;code&gt;fish&lt;/code&gt; 는 모든 완료가 공통적으로 가지고있는 가장 긴 접두사를 작성합니다. 완료가 첫 번째 문자에서 다른 경우 가능한 모든 완료 목록이 인쇄됩니다. 이 목록에는 완료에 대한 설명이 있으며 목록이 화면에 맞지 않으면 화살표 키, 페이지 위로 / 페이지 아래로 키, 탭 키 또는 스페이스 바를 사용하여 스크롤 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44e924f5f1b607dd0e4feccbc1d4d898f052a887" translate="yes" xml:space="preserve">
          <source>Tacklebox</source>
          <target state="translated">Tacklebox</target>
        </trans-unit>
        <trans-unit id="e3c7839574383a9eaa3d82c610c455446f6121c0" translate="yes" xml:space="preserve">
          <source>Terminal Capability Detection</source>
          <target state="translated">터미널 기능 감지</target>
        </trans-unit>
        <trans-unit id="b54b1fa82b8ecdc3fb07f7f9d29066e5997831e6" translate="yes" xml:space="preserve">
          <source>Tests the expression given and sets the exit status to 0 if true, and 1 if false. An expression is made up of one or more operators and their arguments.</source>
          <target state="translated">주어진 표현식을 테스트하고 true이면 종료 상태를 0으로 설정하고 false이면 1로 설정합니다. 식은 하나 이상의 연산자와 해당 인수로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="6b1fc2e3b816bc95de3d9b1753ab9aa1375ff7b8" translate="yes" xml:space="preserve">
          <source>That means if you run</source>
          <target state="translated">그것은 당신이 실행하면 의미</target>
        </trans-unit>
        <trans-unit id="92160f08bddffe06e4520887bdd5645514caf0af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;project GitHub page&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;프로젝트 GitHub의 페이지&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cc348ddd7ad603b4b7e3a6d1134042f24b0ee0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$&lt;/code&gt; symbol can also be used multiple times, as a kind of &quot;dereference&quot; operator (the &lt;code&gt;*&lt;/code&gt; in C or C++), like in the following code:</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; 의 심볼은 &quot;간접 참조&quot;연산자 (의 일종으로 여러 번 사용할 수 &lt;code&gt;*&lt;/code&gt; 다음 코드 등 C 또는 C ++에서) :</target>
        </trans-unit>
        <trans-unit id="7e4fc8fc89e59cd9ece4a187b16054d89db8031c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; operators for comparing strings are not implemented.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 와 &lt;code&gt;&amp;gt;&lt;/code&gt; 문자열을 비교하기위한 연산자는 구현되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="65fe6102162982a331ea3f92362fbdf8528333d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; argument is required. You do not have to include any arguments after the &lt;code&gt;--&lt;/code&gt; but you must include the &lt;code&gt;--&lt;/code&gt;. For example, this is acceptable:</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 인수는 필수입니다. 당신은 후 인수 포함 할 필요가 없습니다 &lt;code&gt;--&lt;/code&gt; 하지만 당신은 포함되어야합니다 &lt;code&gt;--&lt;/code&gt; . 예를 들어, 이것은 허용됩니다 :</target>
        </trans-unit>
        <trans-unit id="0c906c7f83627c97b083a6eb5c63248805d8c516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; here stops &lt;code&gt;contains&lt;/code&gt; from treating &lt;code&gt;-q&lt;/code&gt; to an option to itself. Instead it treats it as a normal string to check.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 여기 정지는 &lt;code&gt;contains&lt;/code&gt; 치료에서 &lt;code&gt;-q&lt;/code&gt; 자체에 대한 옵션. 대신 확인하기 위해 일반 문자열로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="c88d441c07c1b7086b4b120f0e1995c32e1789db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-q&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-P&lt;/code&gt; flags (and their long flag aliases) are mutually exclusive. Only one can be specified at a time.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; , &lt;code&gt;-p&lt;/code&gt; , &lt;code&gt;-t&lt;/code&gt; 및 &lt;code&gt;-P&lt;/code&gt; 플래그 (그리고 그들의 긴 플래그 별칭)는 상호 배타적입니다. 한 번에 하나만 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c58a8949ca637e3657d904f90d0683f9b8a4548" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; options causes the specified command to inherit completions from another command. The inheriting command is said to &quot;wrap&quot; the inherited command. The wrapping command may have its own completions in addition to inherited ones. A command may wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C's completions. Wrapping can be removed using the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; options. Note that wrapping only works for completions specified with &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; and are ignored when specifying completions with &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; 또는 &lt;code&gt;--wraps&lt;/code&gt; 옵션은 다른 명령에서 상속 완료에 지정된 명령을 발생합니다. 상속 명령은 상속 된 명령을 &quot;랩핑&quot;한다고합니다. 줄 바꿈 명령은 상속 된 것 외에도 고유 한 완료를 가질 수 있습니다. 명령이 여러 명령을 랩핑 할 수 있으며 랩핑은 전 이적입니다. A가 B를 랩하고 B가 C를 랩하면 A는 모든 C의 완료를 자동으로 상속합니다. 랩핑은 &lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 옵션을 사용하여 제거 할 수 있습니다. 랩핑은 &lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--command&lt;/code&gt; 로 지정된 완료에 대해서만 작동 하며 &lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--path&lt;/code&gt; 로 완료를 지정할 때는 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="c3779bf48914bcae0cdcc953ecc413edee9ed2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VARNAME&lt;/code&gt; was local to the for block in releases prior to 3.0.0. This means that if you did something like this:</source>
          <target state="translated">&lt;code&gt;VARNAME&lt;/code&gt; 은 이전 3.0.0에 릴리스 블록의 로컬이었다. 이것은 당신이 다음과 같은 것을했다면 의미합니다 :</target>
        </trans-unit>
        <trans-unit id="da3409d273e3db5ef8ddc4ea273fbbb872d656c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; commands use all installed packages as completions.</source>
          <target state="translated">&lt;code&gt;apt-get&lt;/code&gt; 을 , &lt;code&gt;rpm&lt;/code&gt; 및 &lt;code&gt;yum&lt;/code&gt; 명령은 완료로 설치된 모든 패키지를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="08c885ad47f98ee1d2fa7d61aaf2be5914055c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end&lt;/code&gt; command does not change the current exit status. Instead, the status after it will be the status returned by the most recent command.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; 명령은 현재 종료 상태를 변경하지 않습니다. 대신, 그 이후의 상태는 가장 최근의 명령에 의해 리턴 된 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="cd7f0141ffadda545e17fb22c15ec53f8466fcc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a &lt;a href=&quot;#history-search&quot;&gt;searchable history&lt;/a&gt; and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 편집기 기능은 복사 및 붙여 넣기 &lt;a href=&quot;#history-search&quot;&gt;검색 히스토리&lt;/a&gt; 특수 키보드 단축키에 바인딩 할 수 있으며, 많은 편집기 기능을.</target>
        </trans-unit>
        <trans-unit id="3cb7ec726c85b79feb29910ee5250baa8513a66f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a searchable history and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 편집기 기능, 특수 키보드 단축키에 바인딩 할 수있는 검색 역사와 다양한 편집 기능을 복사하여 붙여 넣습니다.</target>
        </trans-unit>
        <trans-unit id="c64f6cc8af3f868e2009e8fec92b3aa89f2848f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; implementation of &lt;code&gt;ulimit&lt;/code&gt; should behave identically to the implementation in bash, except for these differences:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 의 &lt;code&gt;fish&lt;/code&gt; 구현은 다음 차이점을 제외하고 bash의 구현과 동일하게 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="07e5eef3af7a89848f46c551cd20fd456ad73c6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_git_prompt&lt;/code&gt; function displays information about the current git repository, if any.</source>
          <target state="translated">&lt;code&gt;fish_git_prompt&lt;/code&gt; 현재 자식 저장소에 대한 기능 정보를 표시합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="129eb955355c8f7758d77f2cac61f370f6205e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_mode_prompt&lt;/code&gt; function outputs the mode indicator for use in vi-mode.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; 함수 VI 모드에서 사용하기위한 모드 지시자를 출력한다.</target>
        </trans-unit>
        <trans-unit id="40b7c153dde9c57207852c321a7476ca5435e545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_vcs_prompt&lt;/code&gt; function displays information about the current version control system (VCS) repository, if any.</source>
          <target state="translated">&lt;code&gt;fish_vcs_prompt&lt;/code&gt; 현재 버전 제어 시스템 (VCS) 저장소에 대한 기능 정보를 표시있는 경우.</target>
        </trans-unit>
        <trans-unit id="ca816a872a077d36b73d0af3eade298496b9cd5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_vi_cursor&lt;/code&gt; function will be used to change the cursor's shape depending on the mode in supported terminals. The following snippet can be used to manually configure cursors after enabling vi-mode:</source>
          <target state="translated">&lt;code&gt;fish_vi_cursor&lt;/code&gt; 의 기능을 지원하는 단말의 모드에 따라, 커서의 형상을 변경하는 데 사용된다. 다음 스 니펫을 사용하여 vi- 모드를 활성화 한 후 커서를 수동으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67113321177587b92e33339a6cdbfbb714ba38b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &amp;lsquo;printf &amp;rsquo;d' &quot;102.234&quot;` produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수는 주어진 모든 인수를 변환하는 데 필요한만큼 여러 번 다시 사용됩니다. 지정된 인수에 형식 지정자가 적합하지 않으면 오류가 인쇄됩니다. 예를 들어 'printf'd ' &quot;102.234&quot;`는 &quot;102.234&quot;를 정수로 형식화 할 수 없으므로 오류를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="fa359d649d24e5335af9a0db3ad3244dff9a6be4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &lt;code&gt;printf '%d' &quot;102.234&quot;&lt;/code&gt; produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수는 주어진 모든 인수를 변환하는 데 필요한만큼 여러 번 다시 사용됩니다. 형식 지정자가 주어진 인수에 적합하지 않으면 오류가 인쇄됩니다. 예를 들어 &lt;code&gt;printf '%d' &quot;102.234&quot;&lt;/code&gt; 는 &quot;102.234&quot;를 정수로 형식화 할 수 없으므로 오류를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="89f23a465dd8d76eebf980544d18d2de2601f2be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make&lt;/code&gt; program uses all targets in the Makefile in the current directory as completions.</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; 프로그램은 완료로 현재 디렉토리에있는 Makefile의 모든 대상을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="08ddda0f4e3d5dbda6ef1fb82291b1b27f800ddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; command uses all mount points specified in fstab as completions.</source>
          <target state="translated">은 &lt;code&gt;mount&lt;/code&gt; 명령을 사용하는 모든 완료로 fstab 파일에 지정된 마운트 지점.</target>
        </trans-unit>
        <trans-unit id="bac670339d33af9a7bab7a0aa6c9bff4de41f823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; command uses the MIME type database and the &lt;code&gt;.desktop&lt;/code&gt; files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non-standard location. Consider &lt;a href=&quot;index#more-help&quot;&gt;asking for more help&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 명령은 MIME 타입 데이터베이스와 사용 &lt;code&gt;.desktop&lt;/code&gt; 파일 형식 및 기본 작업을 식별하는 그놈과 KDE에 의해 사용되는 파일. 이러한 환경 중 하나 이상이 설치되었지만 open 명령이 작동하지 않는 경우 관련 파일이 비표준 위치에 설치되었음을 의미합니다. &lt;a href=&quot;index#more-help&quot;&gt;도움을 요청&lt;/a&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="12db9bbc519582e7296e06534b51717da7e239b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;#popd&quot;&gt;&lt;code&gt;popd&lt;/code&gt;&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 기능이 추가 &lt;code&gt;DIRECTORY&lt;/code&gt; 디렉토리 스택의 상단과 현재 작업 디렉토리한다. &lt;a href=&quot;#popd&quot;&gt; &lt;code&gt;popd&lt;/code&gt; &lt;/a&gt; 는 그것을 꺼내어 원래 디렉토리로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="232591d70cc81d9e2252f02a7f0ab108b8f2be53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 기능이 추가 &lt;code&gt;DIRECTORY&lt;/code&gt; 디렉토리 스택의 상단과 현재 작업 디렉토리한다. &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt; 는 그것을 꺼내고 원래 디렉토리로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="a826eafcc5f8080c789ef8d78318660a9727e115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; command supported the &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;--mode-name&lt;/code&gt; flags in fish versions prior to 2.7.0 to specify an alternative read history file. Those flags are now deprecated and ignored. Instead, set the &lt;code&gt;fish_history&lt;/code&gt; variable to specify a history session ID. That will affect both the &lt;code&gt;read&lt;/code&gt; history file and the fish command history file. You can set it to an empty string to specify that no history should be read or written. This is useful for presentations where you do not want possibly private or sensitive history to be exposed to the audience but do want history relevant to the presentation to be available.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 명령은 지원 &lt;code&gt;-m&lt;/code&gt; 및 &lt;code&gt;--mode-name&lt;/code&gt; 대신 읽기 기록 파일을 지정하는 물고기의 이전 버전은 2.7.0로의 플래그. 이러한 플래그는 더 이상 사용되지 않으며 무시됩니다. 대신 &lt;code&gt;fish_history&lt;/code&gt; 변수를 설정하여 기록 세션 ID를 지정하십시오. 이는 &lt;code&gt;read&lt;/code&gt; 히스토리 파일 및 피쉬 명령 히스토리 파일 모두에 영향을 미칩니다 . 기록을 읽거나 쓰지 않도록 지정하기 위해 빈 문자열로 설정할 수 있습니다. 비공개 또는 민감한 기록을 청중에게 노출시키지 않고 프리젠 테이션과 관련된 기록을 사용할 수있는 프리젠 테이션에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7fcdb96d7e5417d911e99a0401becd905a30865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rpm&lt;/code&gt; command has several different modes. If the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; flag has been specified, &lt;code&gt;rpm&lt;/code&gt; should delete one or more packages, in which case several switches related to deleting packages are valid, like the &lt;code&gt;nodeps&lt;/code&gt; switch.</source>
          <target state="translated">&lt;code&gt;rpm&lt;/code&gt; 명령은 여러 가지 모드가 있습니다. 는 IF &lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 플래그가 지정되어, &lt;code&gt;rpm&lt;/code&gt; 같은 패키지를 삭제와 관련된 경우 여러 스위치, 유효있는 하나 개 이상의 패키지, 삭제해야합니다 &lt;code&gt;nodeps&lt;/code&gt; 이 스위치를.</target>
        </trans-unit>
        <trans-unit id="a790e8c78ea9f158b99ff23d36fc572c40897097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; command above used quotes to ensure that &lt;code&gt;Mister Noodle&lt;/code&gt; was one argument. If it had been two arguments, then &lt;code&gt;name&lt;/code&gt; would have been a list of length 2. In fact, all variables in &lt;code&gt;fish&lt;/code&gt; are really lists, that can contain any number of values, or none at all.</source>
          <target state="translated">위 의 &lt;code&gt;set&lt;/code&gt; 명령은 따옴표를 사용하여 &lt;code&gt;Mister Noodle&lt;/code&gt; 이 하나의 논증 임을 확인했습니다 . 인수가 두 개인 경우 &lt;code&gt;name&lt;/code&gt; 은 길이 2의 목록이되었을 것입니다. 실제로, &lt;code&gt;fish&lt;/code&gt; 모든 변수 는 실제로는 목록이며, 값을 포함하거나 전혀 포함하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e4c01874451687405926cb86a3846c32a777675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and lack color information for terminals that support it. Fish assumes that all terminals can use the [ANSI X3.64](&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;) escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 의 명령은 터미널 무엇가 사용에 터미널 색상을 변경하는 방법을 찾기 위해 terminfo 데이터베이스를 사용합니다. 일부 시스템에는 오래되고 불완전한 terminfo 데이터베이스가 있으며이를 지원하는 터미널에 대한 색상 정보가 부족합니다. Fish는 terminfo 정의가 16 미만의 색상이 지원되지 않음을 나타내는 경우 모든 터미널이 [ANSI X3.64] ( &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt; ) 이스케이프 시퀀스를 사용할 수 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="b8a21bdde776c698d3de37f05072833e8526edd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and may lack color information for terminals that support it. Fish will assume that all terminals can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt; escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 의 명령은 터미널 무엇가 사용에 터미널 색상을 변경하는 방법을 찾기 위해 terminfo 데이터베이스를 사용합니다. 일부 시스템에는 오래되고 불완전한 terminfo 데이터베이스가 있으며이를 지원하는 터미널에 대한 색상 정보가 부족할 수 있습니다. fish는 terminfo 정의가 16 미만의 색상이 지원되지 않음을 나타내면 모든 터미널이 &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt; 이스케이프 시퀀스를 사용할 수 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="570ae270bf32027068dbc7611cc21eacc745b07d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssh&lt;/code&gt; command uses all hosts that are stored in the known_hosts file as completions. (See the ssh documentation for more information)</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; 명령은 완료로에서 known_hosts 파일에 저장된 모든 호스트를 사용합니다. (자세한 내용은 ssh 설명서를 참조하십시오)</target>
        </trans-unit>
        <trans-unit id="98c28ed2787aacc681a7fe21c43d77f6911bb6d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command takes any username as an argument. Usernames are given as the first colon-separated field in the file /etc/passwd. This can be specified as:</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; 명령은 인수로 어떤 사용자 이름을합니다. 사용자 이름은 / etc / passwd 파일에서 첫 번째 콜론으로 구분 된 필드로 제공됩니다. 다음과 같이 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0c2e5dc87ea547203543a3113293b01834dc317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command uses all users on the system as completions.</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; 명령은 완료로 시스템의 모든 사용자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1694f288fba89e086b666fb0fa0aa6f5ed0e92d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 명령 스트링의 값에 따라 명령의 가능한 많은 블록들 중 하나를 실행하기 위해 사용된다. 자세한 내용은 &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;스위치&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac2d93e5ce9c99380286aea119eb1c4d811d5e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;commands#switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 명령 스트링의 값에 따라 명령의 가능한 많은 블록들 중 하나를 실행하기 위해 사용된다. 자세한 내용은 &lt;a href=&quot;commands#switch&quot;&gt;스위치&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="47ad27700014770c354049370500a3fdcb1e0c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone &lt;code&gt;~&lt;/code&gt;, or a &lt;code&gt;~&lt;/code&gt; followed by a slash, is expanded into the home directory of the process owner.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; 사용자 이름 뒤에 매개 변수의 시작 부분에 (물결표) 문자는 지정된 사용자의 홈 디렉토리로 확장됩니다. 고독한 &lt;code&gt;~&lt;/code&gt; 또는 &lt;code&gt;~&lt;/code&gt; 와 슬래시가 프로세스 소유자의 홈 디렉토리로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="265a9c81a69231c01219582e938c14d98984c415" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;br&lt;/em&gt;- (as in 'bright') forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray.</source>
          <target state="translated">&lt;em&gt;BR&lt;/em&gt; - 형태 ( &quot;밝은&quot;에서와 같이)의 전체 휘도가 많은 단자에 8 개의 표준 색 휘도의 변종이다. &lt;em&gt;brblack&lt;/em&gt; 은 &lt;em&gt;검정&lt;/em&gt; 보다 밝기가 더 높습니다 .</target>
        </trans-unit>
        <trans-unit id="81bc67c4cc6d1500fe78dbf824dcd5a05daabcef" translate="yes" xml:space="preserve">
          <source>The Internet Relay Chat channel, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</source>
          <target state="translated">인터넷 중계 채팅 채널, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38912f78e93626e5fa47b637ba81937a676623d5" translate="yes" xml:space="preserve">
          <source>The advantage is that you don't have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. (Note: you should NOT add this line to &lt;code&gt;config.fish&lt;/code&gt;. If you do, the variable will get longer each time you run fish!)</source>
          <target state="translated">장점은 파일을 정리할 필요가 없다는 것입니다. 명령 줄에서 한 번만 실행하면 현재 세션과 모든 향후 인스턴스에도 영향을 미칩니다. (참고 :이 줄을 &lt;code&gt;config.fish&lt;/code&gt; 에 추가하면 안됩니다 . 그렇게하면 물고기를 실행할 때마다 변수가 더 길어집니다!)</target>
        </trans-unit>
        <trans-unit id="9a5b6fa2b60fb7b30f834fa877a85006d71c86dd" translate="yes" xml:space="preserve">
          <source>The block can be removed. Any events which triggered while the block was in place will then be delivered.</source>
          <target state="translated">블록을 제거 할 수 있습니다. 블록이있는 동안 트리거 된 모든 이벤트가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="bb7debcb6ad4bd52a3602c3c576ba4ce44391ac4" translate="yes" xml:space="preserve">
          <source>The block is unconditionally executed. &lt;code&gt;begin; ...; end&lt;/code&gt; is equivalent to &lt;code&gt;if true; ...; end&lt;/code&gt;.</source>
          <target state="translated">블록은 무조건 실행됩니다. &lt;code&gt;begin; ...; end&lt;/code&gt; 는 &lt;code&gt;if true; ...; end&lt;/code&gt; 와 같습니다 . ...; 끝 .</target>
        </trans-unit>
        <trans-unit id="68d8e6504c0343fb9e99dc0c0584d6abb0401ef4" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">구문 강조를 위해 물고기가 사용하는 색상은 다양한 변수의 값을 변경하여 구성 할 수 있습니다. 이러한 변수의 값은 &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; 명령에서 허용하는 색상 중 하나 일 수 있습니다 . &lt;code&gt;--bold&lt;/code&gt; 또는 &lt;code&gt;-b&lt;/code&gt; 수락 스위치 &lt;code&gt;set_color&lt;/code&gt; 는 또한 허용된다.</target>
        </trans-unit>
        <trans-unit id="c5cb93e79eb59eed4f3c4bd5e54faad96127309f" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">어구가 구문 강조를 위해 사용하는 색상은 다양한 변수의 값을 변경하여 구성 할 수 있습니다. 이 변수의 값은 &lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt; 명령에 의해 허용되는 색상 중 하나 일 수 있습니다 . &lt;code&gt;--bold&lt;/code&gt; 또는 &lt;code&gt;-b&lt;/code&gt; 수락 스위치 &lt;code&gt;set_color&lt;/code&gt; 는 또한 허용된다.</target>
        </trans-unit>
        <trans-unit id="84d325ad2d19b4840c597f9597e729e6423f6e0a" translate="yes" xml:space="preserve">
          <source>The command history is stored in the file &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; (or &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; if that variable is set) by default. However, you can set the &lt;code&gt;fish_history&lt;/code&gt; environment variable to change the name of the history session (resulting in a &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; file); both before starting the shell and while the shell is running.</source>
          <target state="translated">명령 기록은 기본적으로 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; 파일 (또는 해당 변수가 설정된 경우 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; )에 저장됩니다. 그러나 &lt;code&gt;fish_history&lt;/code&gt; 환경 변수를 설정하여 히스토리 세션의 이름을 변경할 수 있습니다 ( &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; 파일에 있음). 쉘을 시작하기 전과 쉘이 실행되는 동안.</target>
        </trans-unit>
        <trans-unit id="ad9471aeb00cd7dbf667ba8000bfffbdd6168599" translate="yes" xml:space="preserve">
          <source>The completions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;; and</source>
          <target state="translated">완성품은 일반적으로 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; 에 설치된 생선과 함께 제공됩니다 . 과</target>
        </trans-unit>
        <trans-unit id="526642f1e62598bbea0ecea2aededa98b233083a" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;fish_mode_prompt&lt;/code&gt; function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. You can also define an empty &lt;code&gt;fish_mode_prompt&lt;/code&gt; function to remove the Vi mode indicators. The &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; can be used to determine the current mode. It will be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;replace_one&lt;/code&gt;, or &lt;code&gt;visual&lt;/code&gt;.</source>
          <target state="translated">기본 &lt;code&gt;fish_mode_prompt&lt;/code&gt; 함수는 일반 프롬프트의 왼쪽에 표시된 현재 Vi 편집기 모드에 대한 표시기를 출력합니다. 모드 표시기의 모양을 사용자 정의하는 고유 한 기능을 정의하십시오. Vi 모드 표시기를 제거하기 위해 빈 &lt;code&gt;fish_mode_prompt&lt;/code&gt; 함수를 정의 할 수도 있습니다 . &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; 현재의 모드를 결정하는 데 사용할 수 있습니다. &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;insert&lt;/code&gt; , &lt;code&gt;replace_one&lt;/code&gt; 또는 &lt;code&gt;visual&lt;/code&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="b701404c307944b4f207202092290f154a8ceb6b" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;functions&lt;/code&gt;, when called with no arguments, is to print the names of all defined functions. Unless the &lt;code&gt;-a&lt;/code&gt; option is given, no functions starting with underscores are not included in the output.</source>
          <target state="translated">인수없이 호출 될 때 &lt;code&gt;functions&lt;/code&gt; 의 기본 동작은 정의 된 모든 함수의 이름을 인쇄하는 것입니다. &lt;code&gt;-a&lt;/code&gt; 옵션을 지정 하지 않으면 밑줄로 시작하는 함수는 출력에 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3238e1ed93b89a49bf4c1e65f05bfcad2dc2ccfc" translate="yes" xml:space="preserve">
          <source>The default key binding can be set by specifying a &lt;code&gt;SEQUENCE&lt;/code&gt; of the empty string (that is, &lt;code&gt;''&lt;/code&gt; ). It will be used whenever no other binding matches. For most key bindings, it makes sense to use the &lt;code&gt;self-insert&lt;/code&gt; function (i.e. &lt;code&gt;bind '' self-insert&lt;/code&gt;) as the default keybinding. This will insert any keystrokes not specifically bound to into the editor. Non- printable characters are ignored by the editor, so this will not result in control sequences being printable.</source>
          <target state="translated">빈 키의 &lt;code&gt;SEQUENCE&lt;/code&gt; (즉, &lt;code&gt;''&lt;/code&gt; ) 를 지정하여 기본 키 바인딩을 설정할 수 있습니다 . 다른 바인딩과 일치하지 않을 때마다 사용됩니다. 대부분의 키 바인딩의 경우 &lt;code&gt;self-insert&lt;/code&gt; 기능 (즉, &lt;code&gt;bind '' self-insert&lt;/code&gt; )을 기본 키 바인딩으로 사용하는 것이 좋습니다. 이렇게하면 편집기에 특별히 바인딩되지 않은 키 입력이 삽입됩니다. 인쇄 할 수없는 문자는 편집기에서 무시되므로 제어 순서를 인쇄 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="761122ce7c1e00f6a72f6459922524107cc8cd64" translate="yes" xml:space="preserve">
          <source>The delay in milliseconds since the previous character was received is included in the diagnostic information written to stderr. This information may be useful to determine the optimal &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; setting or learn the amount of lag introduced by tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;mosh&lt;/code&gt; or &lt;code&gt;tmux&lt;/code&gt;.</source>
          <target state="translated">이전 문자가 수신 된 이후 밀리 초 단위의 지연은 stderr에 기록 된 진단 정보에 포함됩니다. 이 정보는 최적의 &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 설정 을 결정 하거나 &lt;code&gt;ssh&lt;/code&gt; , &lt;code&gt;mosh&lt;/code&gt; 또는 &lt;code&gt;tmux&lt;/code&gt; 와 같은 도구에서 발생하는 지연의 양을 배우는 데 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aec578501f85f58e1b6e5dcfc273e5557d618a78" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape can also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, like for function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">예를 들어, 이스케이프 키는 Vi 키 바인딩을 사용할 때 삽입 모드에서 일반 모드로 전환하기 위해 독립형으로 사용할 수 있습니다. Escape는 기능 또는 화살표 키와 같이 이스케이프 시퀀스의 시작을 나타내는 &quot;메타&quot;키로도 사용할 수 있습니다. 이스케이프 문자로 시작하는 사용자 지정 바인딩을 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2ae9cb276e98e46e4c54626cf3a5b994505cd52" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape may also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, such as function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">Vi 키 바인딩을 사용할 때 이스케이프 키를 독립형으로 사용하여 삽입 모드에서 일반 모드로 전환 할 수 있습니다. 이스케이프는 기능 또는 화살표 키와 같은 이스케이프 시퀀스의 시작을 나타 내기 위해 &quot;메타&quot;키로 사용될 수도 있습니다. 이스케이프 문자로 시작하는 사용자 정의 바인딩도 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2b67ae0b734fe8c7eb4002ecf7174bec7a097d2" translate="yes" xml:space="preserve">
          <source>The exit code of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">백그라운드 작업이 실행중인 경우 내장 &lt;code&gt;jobs&lt;/code&gt; 의 종료 코드 는 &lt;code&gt;0&lt;/code&gt; 이고 그렇지 않은 경우 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bdab6b4388bdecbfaaade04b54ac542c4110731a" translate="yes" xml:space="preserve">
          <source>The exit status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">&lt;code&gt;REASON&lt;/code&gt; 이 유효하지 않은 경우 종료 상태는 1 입니다. 그렇지 않으면 트랩이 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="92a98ee3485df09b2caf60e2fe8f1f43529de92d" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;functions&lt;/code&gt; is the number of functions specified in the argument list that do not exist, which can be used in concert with the &lt;code&gt;-q&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; 의 종료 상태는 존재하지 않는 인수 목록에 지정된 함수의 수이며 &lt;code&gt;-q&lt;/code&gt; 옵션 과 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef3cb59016fb249c3eee79ed924509a2fbc0c01f" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;source&lt;/code&gt; is the exit status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">의 종료 상태 &lt;code&gt;source&lt;/code&gt; 실행하기위한 마지막 작업의 종료 상태입니다. 파일을 열거 나 읽는 동안 문제가 발생하면 &lt;code&gt;source&lt;/code&gt; 가 0이 아닌 상태로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="87e8fe9012c8960260a66a84283038f62899649e" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 내 명령의 종료 상태 는 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0f212eae622b07227263f98bfdb5b6ec216b4de4" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 내 명령의 종료 상태 는 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="59c65315bdacf0d0e4111fbb51abfbd8b92270ba" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 내의 명령 종료 상태 는 &lt;code&gt;fish_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5657481f999e23c3116d622970acdbbcff597a42" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 내의 명령 종료 상태 는 &lt;code&gt;fish_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ee4b36588801ba4a5846d1e6ab3ec967f5f37ee0" translate="yes" xml:space="preserve">
          <source>The exit status of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">내장 된 &lt;code&gt;jobs&lt;/code&gt; 의 종료 상태 는 실행중인 백그라운드 작업이 있으면 &lt;code&gt;0&lt;/code&gt; 이고 그렇지 않으면 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dde297103a5b92cbf6063c24bb9aa65b611780da" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ff645c10072dc44f93fe8a0bc1b09a1e128e9d19" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4652deeba9fb7344bebbe6060971799e99a44a6b" translate="yes" xml:space="preserve">
          <source>The exit status of the last run command substitution is available in the &lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt; variable if the substitution occurs in the context of a &lt;code&gt;set&lt;/code&gt; command.</source>
          <target state="translated">마지막 실행 명령 대체의 종료 상태 는 &lt;code&gt;set&lt;/code&gt; 명령 의 컨텍스트에서 대체가 발생하면 &lt;a href=&quot;#variables-status&quot;&gt;상태&lt;/a&gt; 변수 에서 사용 가능 합니다 .</target>
        </trans-unit>
        <trans-unit id="110fb03150bee422319feb18aa0d332d91a7cdc7" translate="yes" xml:space="preserve">
          <source>The exit status of the while loop is the exit status of the last iteration of the &lt;code&gt;COMMANDS&lt;/code&gt; executed, or 0 if none were executed. (This matches other shells and is POSIX-compatible.)</source>
          <target state="translated">while 루프의 종료 상태는 마지막으로 실행 된 &lt;code&gt;COMMANDS&lt;/code&gt; 반복의 종료 상태 이거나 실행되지 않은 경우 0입니다. (이것은 다른 쉘과 일치하며 POSIX와 호환됩니다.)</target>
        </trans-unit>
        <trans-unit id="0e8e9a53dcf07764aa42aaf44d6d7a9d7ab8311a" translate="yes" xml:space="preserve">
          <source>The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">변수를 만들거나 업데이트 할 때 내보내기 규칙은 변수의 범위 지정 규칙과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ccd7da4c54986027f5d438b2f8ee07a3d4f4e74d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;--&lt;/code&gt; seen is what allows the &lt;code&gt;argparse&lt;/code&gt; command to reliably separate the option specifications from the command arguments.</source>
          <target state="translated">첫 번째 &lt;code&gt;--&lt;/code&gt; 볼 수는 있습니다 무엇 &lt;code&gt;argparse&lt;/code&gt; 명령을 안정적으로 명령 인수에서 옵션 사양을 구분합니다.</target>
        </trans-unit>
        <trans-unit id="f00c945cebc76b9e34b8670689ec76047f703bed" translate="yes" xml:space="preserve">
          <source>The first form (&lt;code&gt;test&lt;/code&gt;) is preferred. For compatibility with other shells, the second form is available: a matching pair of square brackets (&lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt;).</source>
          <target state="translated">첫 번째 형태 ( &lt;code&gt;test&lt;/code&gt; )가 선호됩니다. 다른 쉘과의 호환성을 위해 두 번째 형식 인 대괄호 쌍 ( &lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt; )을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43f4d110308413cf0bb5f3a0257b712c35d80d02" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is a list variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">첫 번째 줄은 &lt;code&gt;ll&lt;/code&gt; 이라는 이름의 함수 가 정의되어야 함을 물고기에게 알려줍니다 . 사용하려면 명령 줄에 &lt;code&gt;ll&lt;/code&gt; 을 작성하면됩니다. 두 번째 줄은 &lt;code&gt;ll&lt;/code&gt; 이 호출 될 때 &lt;code&gt;ls -l $argv&lt;/code&gt; 명령 이 호출 되어야 한다고 fish에게 알려줍니다 . ' &lt;code&gt;$argv&lt;/code&gt; '는 항상 함수에 전송 된 모든 인수를 포함하는 목록 변수입니다. 위의 예에서 이들은 단순히 &lt;code&gt;ls&lt;/code&gt; 명령 에 전달됩니다 . 함수에 대한 자세한 내용은 &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;함수&lt;/a&gt; 내장 문서를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="1feeb6c582e1b13feec652671af704d8c4bca81d" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is an array variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">첫 번째 줄은 물고기에게 &lt;code&gt;ll&lt;/code&gt; 이라는 이름의 함수 가 정의되어야 함을 알려줍니다 . 사용하려면 명령 행에 &lt;code&gt;ll&lt;/code&gt; 을 쓰십시오 . 두 번째 줄은 &lt;code&gt;ll&lt;/code&gt; 이 호출 될 때 &lt;code&gt;ls -l $argv&lt;/code&gt; 명령을 호출해야 한다는 것을 물고기에게 알려줍니다 . ' &lt;code&gt;$argv&lt;/code&gt; '는 함수에 전송 된 모든 인수를 항상 포함하는 배열 변수입니다. 위의 예에서 이들은 &lt;code&gt;ls&lt;/code&gt; 명령으로 전달됩니다 . 기능에 대한 자세한 내용은 내장 &lt;a href=&quot;commands#function&quot;&gt;기능&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5aa91cd04a31d486d202e2b1e77d870e577f521a" translate="yes" xml:space="preserve">
          <source>The first part specifies to whom this set of right applies, and can be one of &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;u&lt;/code&gt; specifies the user who owns the file, &lt;code&gt;g&lt;/code&gt; specifies the group owner of the file, &lt;code&gt;o&lt;/code&gt; specific other users rights and &lt;code&gt;a&lt;/code&gt; specifies all three should be changed.</source>
          <target state="translated">권리 세트가 적용되며 중 하나가 될 수 있습니다 누구에게 첫 번째 부분 지정하는 &lt;code&gt;u&lt;/code&gt; , &lt;code&gt;g&lt;/code&gt; , &lt;code&gt;o&lt;/code&gt; 또는 , &lt;code&gt;u&lt;/code&gt; 파일, 소유하는 사용자 지정 &lt;code&gt;g&lt;/code&gt; 의 지정 파일의 그룹 소유자를, &lt;code&gt;o&lt;/code&gt; 특정 다른 사용자의 권리와 &lt;code&gt;a&lt;/code&gt; 는 세 개 모두를 변경해야 함을 지정합니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8197431f9332af76bce775e1de1257355f1cd95c" translate="yes" xml:space="preserve">
          <source>The fish commandline editor can be used to work on commands that are several lines long. There are three ways to make a command span more than a single line:</source>
          <target state="translated">피쉬 명령 줄 편집기를 사용하면 몇 줄의 명령을 처리 할 수 ​​있습니다. 명령을 한 줄 이상으로 확장하는 세 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f8186d4ab0a2d348fed572d2dce9da78099265a" translate="yes" xml:space="preserve">
          <source>The fish commandline editor works exactly the same in single line mode and in multiline mode. To move between lines use the left and right arrow keys and other such keyboard shortcuts.</source>
          <target state="translated">피쉬 명령 줄 편집기는 한 줄 모드와 여러 줄 모드에서 정확히 동일하게 작동합니다. 줄 사이를 이동하려면 왼쪽 및 오른쪽 화살표 키와 기타 단축키를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="23b5304e27f02f59d7a10f53fd4009e199ac5306" translate="yes" xml:space="preserve">
          <source>The fish exit status is generally the exit status of the last foreground command. If fish is exiting because of a parse error, the exit status is 127.</source>
          <target state="translated">어류 종료 상태는 일반적으로 마지막 포 그라운드 명령의 종료 상태입니다. 구문 분석 오류로 인해 물고기가 종료되면 종료 상태는 127입니다.</target>
        </trans-unit>
        <trans-unit id="81b0737757c6447d0c7efe9ceff078d063aa48ef" translate="yes" xml:space="preserve">
          <source>The fish user community extends fish in unique and useful ways via scripts that aren't always appropriate for bundling with the fish package. Typically because they solve a niche problem unlikely to appeal to a broad audience. You can find those extensions, including prompts, themes and useful functions, in various third-party repositories. These include:</source>
          <target state="translated">물고기 사용자 커뮤니티는 물고기 패키지와 함께 제공하기에 항상 적합한 스크립트를 통해 독특하고 유용한 방법으로 물고기를 확장합니다. 일반적으로 그들은 틈새 문제를 해결하여 광범위한 청중에게 호소하지 않을 것입니다. 다양한 타사 리포지토리에서 프롬프트, 테마 및 유용한 기능을 포함한 확장을 찾을 수 있습니다. 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="1dc678d68b9717e5200d2d3ebd01cf72bd98b0c8" translate="yes" xml:space="preserve">
          <source>The fish_hg_prompt function displays information about the current Mercurial repository, if any.</source>
          <target state="translated">fish_hg_prompt 함수는 현재 Mercurial 저장소 (있는 경우)에 대한 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d06891f80053c3220358df28d431b54da754d75c" translate="yes" xml:space="preserve">
          <source>The fish_mode_prompt function will output the mode indicator for use in vi-mode.</source>
          <target state="translated">fish_mode_prompt 함수는 vi 모드에서 사용하기위한 모드 표시기를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="2cd3e1be81f908b3d67ab09f753310049f406ade" translate="yes" xml:space="preserve">
          <source>The fish_svn_prompt function displays information about the current Subversion repository, if any.</source>
          <target state="translated">fish_svn_prompt 함수는 현재 Subversion 저장소 (있는 경우)에 대한 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="89d3be5da20cd5974bed5d4cec48f0faf57383bf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available. They must appear before all OPTION_SPECs:</source>
          <target state="translated">다음과 같은 &lt;code&gt;argparse&lt;/code&gt; 옵션을 사용할 수 있습니다. 모든 OPTION_SPEC 앞에 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="23d5e5164bbb45ea1a895b015bf1d3acf0cdeae1" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available:</source>
          <target state="translated">다음과 같은 &lt;code&gt;argparse&lt;/code&gt; 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="224bb1116b7af6da373f3bd98c7370044c04d51d" translate="yes" xml:space="preserve">
          <source>The following additional options are also understood by &lt;code&gt;ulimit&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 는 다음과 같은 추가 옵션도 이해합니다 .</target>
        </trans-unit>
        <trans-unit id="72e92d902d19c4f9a787cc785c9f6f673c804c7c" translate="yes" xml:space="preserve">
          <source>The following code first defines an event handler for the generic event named 'test_event', and then emits an event of that type.</source>
          <target state="translated">다음 코드는 먼저 'test_event'라는 일반 이벤트에 대한 이벤트 핸들러를 정의한 다음 해당 유형의 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4dfce41da5b846516accbd2a1b32a0ea88076d5d" translate="yes" xml:space="preserve">
          <source>The following code is an implementation of the false command as a fish function</source>
          <target state="translated">다음 코드는 물고기 함수로 false 명령을 구현 한 것입니다</target>
        </trans-unit>
        <trans-unit id="73f428206d6cc247fb0a938bd495734a3eb822ae" translate="yes" xml:space="preserve">
          <source>The following code removes all tmp files that do not contain the word smurf.</source>
          <target state="translated">다음 코드는 smurf를 포함하지 않는 모든 tmp 파일을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="479b6746587510b08a8b09d6baf9432244f03bce" translate="yes" xml:space="preserve">
          <source>The following code reports an error and exits if no file named spoon can be found.</source>
          <target state="translated">다음 코드는 오류를보고하고 spoon라는 파일을 찾을 수 없으면 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="c4c2a9bc321af801fbf29261dd0e7d5af4245506" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, &lt;code&gt;make&lt;/code&gt;'s exit status is 0, and the program is installed. If either step fails, the exit status is 1, and &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">다음 코드는 &lt;code&gt;make&lt;/code&gt; 명령을 실행하여 프로그램을 빌드합니다. 빌드가 성공하면 &lt;code&gt;make&lt;/code&gt; 의 종료 상태는 0이며 프로그램이 설치됩니다. 두 단계 중 하나라도 실패하면 종료 상태는 1이고 &lt;code&gt;make clean&lt;/code&gt; 가 실행되어 빌드 프로세스에서 작성된 파일이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="546e6c9b6b78b14a90cdffaa174cd31d19fddac9" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, the program is installed. If either step fails, &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">다음 코드는 &lt;code&gt;make&lt;/code&gt; 명령을 실행하여 프로그램을 빌드합니다. 빌드가 성공하면 프로그램이 설치됩니다. 두 단계 중 하나라도 실패하면 &lt;code&gt;make clean&lt;/code&gt; 가 실행되어 빌드 프로세스에서 작성된 파일이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="22ceb5db939abfc8429d0cfac70346e285c29f90" translate="yes" xml:space="preserve">
          <source>The following code searches all .c files for &quot;smurf&quot;, and halts at the first occurrence.</source>
          <target state="translated">다음 코드는 모든 .c 파일에서 &quot;smurf&quot;를 검색하고 처음 발생하면 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="4275d8a3b1aa0d62413745bb834485269f681525" translate="yes" xml:space="preserve">
          <source>The following code sets a number of variables inside of a block scope. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends.</source>
          <target state="translated">다음 코드는 블록 범위 내에서 여러 변수를 설정합니다. 변수는 블록 내부에 설정되고 로컬 범위가 있으므로 블록이 끝나면 자동으로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="9c3e3b53e3555daf8b545c545da16a2dcb0110a7" translate="yes" xml:space="preserve">
          <source>The following code stores the value 'hello' in the shell variable &lt;code&gt;$foo&lt;/code&gt;.</source>
          <target state="translated">다음 코드는 쉘 변수 &lt;code&gt;$foo&lt;/code&gt; 에 'hello'값을 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="381bfb0bdea553cc88676dcf9cb0ff3a9ee0da17" translate="yes" xml:space="preserve">
          <source>The following code tests whether a file &lt;code&gt;foo.txt&lt;/code&gt; exists as a regular file.</source>
          <target state="translated">다음 코드는 &lt;code&gt;foo.txt&lt;/code&gt; 파일이 일반 파일로 존재 하는지 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="858bb8cd938dce0407b131e7aecbe8f7f0e34166" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command and truncate each filename to the first 12 characters.</source>
          <target state="translated">다음 코드는 ls 명령을 호출하고 각 파일 이름을 처음 12 자로 자릅니다.</target>
        </trans-unit>
        <trans-unit id="96c71a4810d00e2a53ad0417748ddcd2d89501b6" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command. Note that &lt;code&gt;fish&lt;/code&gt; does not support the use of shell variables as direct commands; &lt;code&gt;eval&lt;/code&gt; can be used to work around this.</source>
          <target state="translated">다음 코드는 ls 명령을 호출합니다. 참고 &lt;code&gt;fish&lt;/code&gt; 직접 명령으로 쉘 변수의 사용을 지원하지 않습니다; &lt;code&gt;eval&lt;/code&gt; 을 사용하여이 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca62666931da18a9248d4ac0f516c18c3953407d" translate="yes" xml:space="preserve">
          <source>The following code will count down from a random even number between 10 and 20 to 1:</source>
          <target state="translated">다음 코드는 10과 20에서 1 사이의 임의의 짝수에서 카운트 다운됩니다.</target>
        </trans-unit>
        <trans-unit id="b827c00166140f0325b113f6c5ec11ead3608d8d" translate="yes" xml:space="preserve">
          <source>The following code will create &lt;code&gt;rmi&lt;/code&gt;, which runs &lt;code&gt;rm&lt;/code&gt; with additional arguments on every invocation.</source>
          <target state="translated">다음 코드는 &lt;code&gt;rmi&lt;/code&gt; 를 작성 하는데, 이것은 호출 할 때마다 추가 인수로 &lt;code&gt;rm&lt;/code&gt; 을 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="2bda4fa27dff7ecce2f691a9e2a6631fca487d27" translate="yes" xml:space="preserve">
          <source>The following code will not output anything:</source>
          <target state="translated">다음 코드는 아무것도 출력하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="ef1c53d0ac92fed4883e8ae1b1d7d027d13ad785" translate="yes" xml:space="preserve">
          <source>The following code will print &quot;foo.txt exists and is readable&quot; if foo.txt is a regular file and readable</source>
          <target state="translated">다음 코드는 foo.txt가 일반 파일이고 읽을 수있는 경우 &quot;foo.txt가 존재하고 읽을 수 있습니다&quot;를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="1b900844821e8f04f7dd1574d0cf172ece4e3553" translate="yes" xml:space="preserve">
          <source>The following code will print &lt;code&gt;foo.txt exists&lt;/code&gt; if the file foo.txt exists and is a regular file, otherwise it will print &lt;code&gt;bar.txt exists&lt;/code&gt; if the file bar.txt exists and is a regular file, otherwise it will print &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt;.</source>
          <target state="translated">다음 코드는 &lt;code&gt;foo.txt exists&lt;/code&gt; 파일이 존재하고 일반 파일 인 경우 foo.txt가 인쇄되고 그렇지 않으면 &lt;code&gt;bar.txt exists&lt;/code&gt; 파일이 존재하고 일반 파일 인 경우 bar.txt가 인쇄 됩니다. 그렇지 않으면 &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt; 가 인쇄됩니다. bar.txt가 존재하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="de3876978d90a169388326ae4fae09574262829b" translate="yes" xml:space="preserve">
          <source>The following operations (sub-commands) are available:</source>
          <target state="translated">다음과 같은 작업 (하위 명령)을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">다음과 같은 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d66ddc0c6de8a95bb5854453416293c96da8d8a9" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; prints the current commandline buffer:</source>
          <target state="translated">다음 옵션은 &lt;code&gt;commandline&lt;/code&gt; 이 현재 명령 행 버퍼를 인쇄하는 방식을 변경합니다 .</target>
        </trans-unit>
        <trans-unit id="63df7f64ccf12b96665f8dde259ffe470d38015a" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; updates the command line buffer:</source>
          <target state="translated">옵션은 다음과 방식 변경 &lt;code&gt;commandline&lt;/code&gt; 업데이트를 명령 행 버퍼를 :</target>
        </trans-unit>
        <trans-unit id="74214e3ec02696aeea391992facc065916f44218" translate="yes" xml:space="preserve">
          <source>The following options change what part of the commandline is printed or updated:</source>
          <target state="translated">다음 옵션은 명령 줄에서 인쇄 또는 업데이트되는 부분을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="4caebaf69abe1f045ca9b70c7d77c6343b9dba77" translate="yes" xml:space="preserve">
          <source>The following options control variable scope:</source>
          <target state="translated">다음 옵션은 변수 범위를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="de38d59c5de4e05441ae91dc9bbb795a1e1439a4" translate="yes" xml:space="preserve">
          <source>The following options output metadata about the commandline state:</source>
          <target state="translated">다음 옵션은 명령 줄 상태에 대한 메타 데이터를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="2cc91c14fc643ec75cd8e42977ab3bf342c34ee4" translate="yes" xml:space="preserve">
          <source>The following parameters are available:</source>
          <target state="translated">다음과 같은 파라미터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="328c4823c00af02675ec490144bb09f24d6106dd" translate="yes" xml:space="preserve">
          <source>The following special input functions are available:</source>
          <target state="translated">다음과 같은 특수 입력 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f152dd9767da97d86c0b7bee6016016e58054d4e" translate="yes" xml:space="preserve">
          <source>The following subcommands are available.</source>
          <target state="translated">다음 부속 명령이 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="58f88b1896d25d9e560265aa1ea2d352215c9687" translate="yes" xml:space="preserve">
          <source>The following variables are available to change the highlighting colors in fish:</source>
          <target state="translated">물고기의 강조 표시 색상을 변경하기 위해 다음 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5c283f87142fff645059f0c26d945ecfa72619d" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_data_dir/functions&lt;/code&gt;).</source>
          <target state="translated">일반적으로 &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; (정말 &lt;code&gt;$__fish_data_dir/functions&lt;/code&gt; )에 설치되는 fish와 함께 제공되는 함수 입니다.</target>
        </trans-unit>
        <trans-unit id="c602bb0a290012cbead72e55c75dd6308e892909" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt;.</source>
          <target state="translated">물고기와 함께 제공되는 기능으로 보통 &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; 에 설치 됩니다.</target>
        </trans-unit>
        <trans-unit id="31d1d74253673e0e00e4ab6d298c6cfbfbe641c4" translate="yes" xml:space="preserve">
          <source>The last value assigned to &lt;code&gt;var&lt;/code&gt; when the loop terminated would not be available outside the loop. What &lt;code&gt;echo $var&lt;/code&gt; would write depended on what it was set to before the loop was run. Likely nothing.</source>
          <target state="translated">루프가 종료 될 때 &lt;code&gt;var&lt;/code&gt; 에 지정된 마지막 값 은 루프 외부에서 사용할 수 없습니다. 무슨 일이 &lt;code&gt;echo $var&lt;/code&gt; 가 루프가 실행되기 전에 설정 한 내용에 의존 작성합니다. 아마 아무것도 아닙니다.</target>
        </trans-unit>
        <trans-unit id="4b5d758036d63a8bf5273befa9ba2de30bb1d084" translate="yes" xml:space="preserve">
          <source>The latter syntax &lt;code&gt;{$WORD}&lt;/code&gt; works by exploiting &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;.</source>
          <target state="translated">후자의 구문 &lt;code&gt;{$WORD}&lt;/code&gt; 은 &lt;a href=&quot;#expand-brace&quot;&gt;중괄호 확장&lt;/a&gt; 을 활용하여 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="af91f79f8373488bcf43ad9d85211f47c5490d9e" translate="yes" xml:space="preserve">
          <source>The long answer:</source>
          <target state="translated">긴 대답 :</target>
        </trans-unit>
        <trans-unit id="3bc04ce8ee0aaf5de96a68984a57d83e6ba0f996" translate="yes" xml:space="preserve">
          <source>The most common way to set the locale to use a command like 'set -x LANG en_GB.utf8', which sets the current locale to be the English language, as used in Great Britain, using the UTF-8 character set. For a list of available locales, use 'locale -a'.</source>
          <target state="translated">로케일을 'set -x LANG en_GB.utf8'과 같은 명령을 사용하도록 로케일을 설정하는 가장 일반적인 방법은 UTF-8 문자 세트를 사용하여 영국에서 사용되는 현재 로케일을 영어로 설정합니다. 사용 가능한 로케일 목록을 보려면 'locale -a'를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="08f8a0f7d2af2ecdf29f96a294a1554c9c3b5a41" translate="yes" xml:space="preserve">
          <source>The names given to shell objects like variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define what sequences of characters are valid to use.</source>
          <target state="translated">변수 및 함수 이름과 같은 쉘 객체에 부여 된 이름을 &quot;식별자&quot;라고합니다. 각 식별자 유형에는 사용할 수있는 문자 시퀀스를 정의하는 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="65aa63047471b9a76e26dd8f43f5899f1292feb3" translate="yes" xml:space="preserve">
          <source>The names given to shell objects such as variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define the valid sequence of characters which compose the identifier.</source>
          <target state="translated">변수 및 함수 이름과 같은 쉘 오브젝트에 지정된 이름을 &quot;식별자&quot;라고합니다. 각 식별자 유형에는 식별자를 구성하는 유효한 문자 시퀀스를 정의하는 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fe3f46a59e146e352f1c4758de7a57641a2c629" translate="yes" xml:space="preserve">
          <source>The names of these variables are mostly derived from the csh family of shells and differ from the ones used by Bourne style shells such as bash.</source>
          <target state="translated">이러한 변수의 이름은 주로 csh 쉘 제품군에서 파생되며 bash와 같은 Bourne 스타일 쉘에서 사용되는 것과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="0cdd8d204de3244af011ba40dd2e1e03a80c3965" translate="yes" xml:space="preserve">
          <source>The official mailing list at &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt; 의 공식 메일 링리스트</target>
        </trans-unit>
        <trans-unit id="e4e7f0cf7342207349af3cfc04732168d9c47e27" translate="yes" xml:space="preserve">
          <source>The only backslash escape accepted within single quotes is &lt;code&gt;\'&lt;/code&gt;, which escapes a single quote and &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">작은 따옴표 내에서 허용되는 유일한 백 슬래시 이스케이프는 &lt;code&gt;\'&lt;/code&gt; 이며 작은 따옴표 를 이스케이프하고 &lt;code&gt;\\&lt;/code&gt; 는 백 슬래시 기호를 이스케이프합니다. 따옴표로 인정 유일한 백 슬래시 이스케이프는 &lt;code&gt;\&quot;&lt;/code&gt; , 이중 인용 부호를 탈출하는 &lt;code&gt;\$&lt;/code&gt; 달러 문자를 이스케이프 이는, &lt;code&gt;\&lt;/code&gt; 마지막으로 백 슬래시 및 줄 바꿈 등을 삭제하는 줄 바꿈, 다음 &lt;code&gt;\\&lt;/code&gt; 백 슬래시를 탈출, 작은 따옴표는 큰 따옴표 내에서 특별한 의미가 없으며 그 반대의 경우도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="341137762021767c1bcfe1d4e89d1efb6ab672f6" translate="yes" xml:space="preserve">
          <source>The open command doesn't work.</source>
          <target state="translated">열기 명령이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1270e20d3a3df8e1f5346556fc472ccabc75c9c8" translate="yes" xml:space="preserve">
          <source>The options for specifying command name and command path may be used multiple times to define the same completions for multiple commands.</source>
          <target state="translated">명령 이름 및 명령 경로를 지정하기위한 옵션을 여러 번 사용하여 여러 명령에 대해 동일한 완료를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff3a156169840aa3d5e264e866d9a002dac09c1f" translate="yes" xml:space="preserve">
          <source>The options for specifying command switches and wrapped commands may be used multiple times to define multiple completions for the command(s) in a single call.</source>
          <target state="translated">명령 스위치 및 랩핑 된 명령을 지정하기위한 옵션을 여러 번 사용하여 단일 호출에서 명령에 대한 여러 완료를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="514a8bdf395655769cdf0c1f52c06c11623edf78" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See the documentation for &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">다른 조건 은 명령 의 &lt;a href=&quot;#variables-status&quot;&gt;종료 상태&lt;/a&gt; 를 사용하여 명령 또는 명령 블록을 실행할지 여부를 결정합니다. 설명서를 참조 &lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt; 더 많은 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dfcf59b6a13b148c10967aa98c28930a4e9e12a5" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See their documentation for more information.</source>
          <target state="translated">다른 조건 은 명령 의 &lt;a href=&quot;#variables-status&quot;&gt;종료 상태&lt;/a&gt; 를 사용하여 명령 또는 명령 블록을 실행해야하는지 여부를 결정합니다. 자세한 내용은 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a2490e597900e8176c6a2c4a4584d5571260ded3" translate="yes" xml:space="preserve">
          <source>The output of a series of commands can be used as the parameters to another command. If a parameter contains a set of parenthesis, the text enclosed by the parenthesis will be interpreted as a list of commands. On expansion, this list is executed, and substituted by the output. If the output is more than one line long, each line will be expanded to a new parameter. Setting &lt;code&gt;IFS&lt;/code&gt; to the empty string will disable line splitting.</source>
          <target state="translated">일련의 명령 출력을 다른 명령의 매개 변수로 사용할 수 있습니다. 매개 변수에 괄호 세트가 포함 된 경우 괄호로 묶인 텍스트는 명령 목록으로 해석됩니다. 확장시이 목록이 실행되고 출력으로 대체됩니다. 출력이 두 줄 이상인 경우 각 줄은 새 매개 변수로 확장됩니다. 빈 문자열로 &lt;code&gt;IFS&lt;/code&gt; 를 설정하면 행 분할이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="c076b2b362e357c8c787010692c3897b0cde8acf" translate="yes" xml:space="preserve">
          <source>The previous test can likewise be inverted:</source>
          <target state="translated">이전 테스트도 마찬가지로 반전 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddedd2674467015f6a5beb34ee2fbb835520f26b" translate="yes" xml:space="preserve">
          <source>The programs &lt;code&gt;man&lt;/code&gt; and &lt;code&gt;whatis&lt;/code&gt; show all installed manual pages as completions.</source>
          <target state="translated">프로그램 &lt;code&gt;man&lt;/code&gt; 및 &lt;code&gt;whatis&lt;/code&gt; 는 설치된 모든 매뉴얼 페이지를 완료로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="923e6b118fb538f4ca8e8f67ca4698c422b3b072" translate="yes" xml:space="preserve">
          <source>The prompt is the output of the &lt;code&gt;fish_prompt&lt;/code&gt; function. Put it in &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;. For example, a simple prompt is:</source>
          <target state="translated">프롬프트는 &lt;code&gt;fish_prompt&lt;/code&gt; 함수 의 출력입니다 . 에 넣어 &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt; . 예를 들어 간단한 프롬프트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f6c98e8413fa41203c749875900025da16302aca" translate="yes" xml:space="preserve">
          <source>The reason for providing for two output file descriptors is to allow separation of errors and warnings from regular program output.</source>
          <target state="translated">두 개의 출력 파일 디스크립터를 제공하는 이유는 일반 프로그램 출력에서 ​​오류와 경고를 분리 할 수 ​​있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="1c641b43a1ed9a01749c093f3a5864403b12f91c" translate="yes" xml:space="preserve">
          <source>The return status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">&lt;code&gt;REASON&lt;/code&gt; 이 유효하지 않은 경우 리턴 상태는 1 입니다. 그렇지 않으면 trap은 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eec28e525883ec2bf359aa9ac84f19012ae7983d" translate="yes" xml:space="preserve">
          <source>The return status of &lt;code&gt;source&lt;/code&gt; is the return status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">의 반환 상태 &lt;code&gt;source&lt;/code&gt; 실행하기위한 마지막 작업의 반환 상태입니다. 파일을 열거 나 읽는 동안 문제가 발생하면 &lt;code&gt;source&lt;/code&gt; 는 0이 아닌 상태로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="1c30a73e8a51035e518bdfeccb5ae03bbba2a49e" translate="yes" xml:space="preserve">
          <source>The same works when setting or expanding variables:</source>
          <target state="translated">변수를 설정하거나 확장 할 때도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="0df43a9567e35d287e4e0a64578b1540c9c5524d" translate="yes" xml:space="preserve">
          <source>The scoping rules when creating or updating a variable are:</source>
          <target state="translated">변수를 만들거나 업데이트 할 때 범위 지정 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="af1ca2dded8974103c58a768e1e91d3d877d12bd" translate="yes" xml:space="preserve">
          <source>The script should write any error messages to stdout, not stderr. It should return a status of zero if the flag value is valid otherwise a non-zero status to indicate it is invalid.</source>
          <target state="translated">스크립트는 stderr가 아닌 오류 메시지를 stdout에 작성해야합니다. 플래그 값이 유효하면 0의 상태를 리턴하고 그렇지 않으면 유효하지 않음을 나타내는 0이 아닌 상태를 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="ea5694e15d95ca5a5e96c990e236cff7fa4686dd" translate="yes" xml:space="preserve">
          <source>The second part of a right specifies the mode, and can be one of &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, where &lt;code&gt;=&lt;/code&gt; specifies that the rights should be set to the new value, &lt;code&gt;+&lt;/code&gt; specifies that the specified right should be added to those previously specified and &lt;code&gt;-&lt;/code&gt; specifies that the specified rights should be removed from those previously specified.</source>
          <target state="translated">우측 지정의 두 번째 부분 모드 중 하나 일 수 &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; 또는 &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;=&lt;/code&gt; 권리는 새로운 값으로 설정되도록 지정, &lt;code&gt;+&lt;/code&gt; 지정 지정된 바로 이전에 지정된에 첨가되어야 함 &lt;code&gt;-&lt;/code&gt; 지정된 권한이 이전에 지정된 권한에서 제거되도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="7823c527da5d40f4505f5d7ca9cee1dbf65bd935" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-d&lt;/code&gt; for the &lt;code&gt;grep&lt;/code&gt; command requires that one of the strings '&lt;code&gt;read&lt;/code&gt;', '&lt;code&gt;skip&lt;/code&gt;' or '&lt;code&gt;recurse&lt;/code&gt;' is used. This can be specified writing:</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; 명령 의 짧은 스타일 옵션 &lt;code&gt;-d&lt;/code&gt; 를 사용 하려면 문자열 ' &lt;code&gt;read&lt;/code&gt; ', ' &lt;code&gt;skip&lt;/code&gt; '또는 ' &lt;code&gt;recurse&lt;/code&gt; '중 하나를 사용해야합니다. 이것은 다음과 같이 쓸 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="21aef96d543138db0f5113aa8c694e877221993a" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-o&lt;/code&gt; for the &lt;code&gt;gcc&lt;/code&gt; command requires that a file follows it. This can be done using writing:</source>
          <target state="translated">&lt;code&gt;gcc&lt;/code&gt; 명령 의 짧은 스타일 옵션 &lt;code&gt;-o&lt;/code&gt; 를 사용 하려면 파일이 뒤에옵니다. 쓰기를 사용하여 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65b2e415c1ad09956265d420e5d30ef098fe39f3" translate="yes" xml:space="preserve">
          <source>The status symbols themselves:</source>
          <target state="translated">상태 기호 자체 :</target>
        </trans-unit>
        <trans-unit id="a7c9c314ad94ef58d396d8ee54dfb17c9688e5cf" translate="yes" xml:space="preserve">
          <source>The status variable</source>
          <target state="translated">상태 변수</target>
        </trans-unit>
        <trans-unit id="3d79b5f2fb8b7ff9607cb6173124ce2876018175" translate="yes" xml:space="preserve">
          <source>The string FORMAT should contain format specifiers, each of which are replaced with successive arguments according to the specifier. Specifiers are detailed below, and are taken from the C library function &lt;code&gt;printf(3)&lt;/code&gt;.</source>
          <target state="translated">문자열 FORMAT은 형식 지정자를 포함해야하며 각 지정자는 지정자에 따라 연속 인수로 대체됩니다. 지정자는 아래에 자세히 설명되어 있으며 C 라이브러리 함수 &lt;code&gt;printf(3)&lt;/code&gt; 에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="3834fb20eb3adec382d678c86de21e4a50afed73" translate="yes" xml:space="preserve">
          <source>The svn prompt is disabled by default because it's slow on large svn repositories. To enable it, modify fish_vcs_prompt to uncomment it. See &lt;a href=&quot;funced#cmd-funced&quot;&gt;funced&lt;/a&gt;.</source>
          <target state="translated">svn 프롬프트는 큰 svn 저장소에서 느리기 때문에 기본적으로 비활성화되어 있습니다. 활성화하려면 fish_vcs_prompt를 수정하여 주석 처리를 제거하십시오. &lt;a href=&quot;funced#cmd-funced&quot;&gt;funced를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="78761829292527d745af43c24666b70964c2aa8e" translate="yes" xml:space="preserve">
          <source>The third part of a right specifies what rights should be changed and can be any combination of &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, representing read, write and execute rights.</source>
          <target state="translated">권한의 세 번째 부분은 변경 될 권한을 지정하며 읽기, 쓰기 및 실행 권한을 나타내는 &lt;code&gt;r&lt;/code&gt; , &lt;code&gt;w&lt;/code&gt; 및 &lt;code&gt;x&lt;/code&gt; 의 조합 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6aea30b4125640db0c941f62792d8db2583d13d" translate="yes" xml:space="preserve">
          <source>The tool will write an example &lt;code&gt;bind&lt;/code&gt; command matching the character sequence captured to stdout. If the character sequence matches a special key name (see &lt;code&gt;bind --key-names&lt;/code&gt;), both &lt;code&gt;bind CHARS ...&lt;/code&gt; and &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.</source>
          <target state="translated">도구는 stdout에 캡처 된 문자 순서와 일치 하는 예제 &lt;code&gt;bind&lt;/code&gt; 명령 을 작성합니다 . 문자 순서가 특수 키 이름과 일치하면 ( &lt;code&gt;bind --key-names&lt;/code&gt; 참조 ) &lt;code&gt;bind CHARS ...&lt;/code&gt; 및 &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; 사용법이 모두 표시됩니다. 문자 사이의 지연과 같이 수신 된 문자에 대한 추가 세부 사항은 stderr에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="33a16e681c6b2de523ee079730543d5aaaa072a3" translate="yes" xml:space="preserve">
          <source>The umask may be expressed either as an octal number, which represents the rights that will be removed by default, or symbolically, which represents the only rights that will be granted by default.</source>
          <target state="translated">umask는 기본적으로 제거 될 권한을 나타내는 8 진수 또는 기본적으로 부여 될 유일한 권한을 나타내는 상징적으로 표현 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff67961119e87010a71ffb5f982a7874fbd862b2" translate="yes" xml:space="preserve">
          <source>The user can change the settings of &lt;code&gt;fish&lt;/code&gt; by changing the values of certain variables.</source>
          <target state="translated">사용자는 특정 변수의 값을 변경하여 &lt;code&gt;fish&lt;/code&gt; 의 설정을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="750b14e6fcc9f04250c8bd648ed58f679784632d" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a &lt;em&gt;pipeline&lt;/em&gt;. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">사용자는 여러 명령을 하나의 &lt;em&gt;파이프 라인&lt;/em&gt; 으로 묶을 수 있습니다 . 즉, 한 명령의 표준 출력이 다음 명령에 대한 표준 입력으로 읽혀집니다. 파이프 문자 ' &lt;code&gt;|&lt;/code&gt; '. 예를 들면</target>
        </trans-unit>
        <trans-unit id="92734526becf97d0102e67503ae3f5ec70437f52" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a so called pipeline. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">사용자는 여러 명령을 소위 파이프 라인으로 묶을 수 있습니다. 이는 한 명령의 표준 출력이 다음 명령의 표준 입력으로 읽히는 것을 의미합니다. 이것은 파이프 문자 ' &lt;code&gt;|&lt;/code&gt; '. 예를 들어</target>
        </trans-unit>
        <trans-unit id="7b8b4db39167ca73155b4a80905652bbe883d472" translate="yes" xml:space="preserve">
          <source>The value of limit can be a number in the unit specified for the resource or one of the special values &lt;code&gt;hard&lt;/code&gt;, &lt;code&gt;soft&lt;/code&gt;, or &lt;code&gt;unlimited&lt;/code&gt;, which stand for the current hard limit, the current soft limit, and no limit, respectively.</source>
          <target state="translated">limit 값은 자원에 지정된 단위 또는 &lt;code&gt;hard&lt;/code&gt; , &lt;code&gt;soft&lt;/code&gt; 또는 &lt;code&gt;unlimited&lt;/code&gt; 특수 값 중 하나 일 수 있으며, 각각 현재 하드 제한, 현재 소프트 제한 및 제한 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ea2f6068a9dad88efc3494909770d142904666d0" translate="yes" xml:space="preserve">
          <source>The web interface allows you to view your functions, variables and history, and to make changes to your prompt and color configuration.</source>
          <target state="translated">웹 인터페이스를 사용하면 기능, 변수 및 기록을보고 프롬프트 및 색상 구성을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27cd5ebce2dff7c39841e898f946a341a35b41e4" translate="yes" xml:space="preserve">
          <source>Then the following invocations behave like this:</source>
          <target state="translated">그런 다음 다음 호출이 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="fa54c06d5fdedec560ab96fcbf9871934330e6d3" translate="yes" xml:space="preserve">
          <source>There are a few important things that need to be noted about aliases:</source>
          <target state="translated">별명에 대해 주목해야 할 몇 가지 중요한 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bead6244a797e147f47c59aa8f116fc1866372d" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;cmds/complete#cmd-complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">스위치에 인수가 필요함을 지정하고, 파일 이름 완성을 비활성화하고, 일부 조합에서만 사용할 수있는 완성을 만드는 등의 특수 스위치도 있습니다. &lt;code&gt;complete&lt;/code&gt; 명령에서 허용되는 다양한 스위치에 대한 자세한 설명은 설명서를 참조하십시오. 에 대한 &lt;a href=&quot;cmds/complete#cmd-complete&quot;&gt;완전한&lt;/a&gt; 내장 또는 쓰기 &lt;code&gt;complete --help&lt;/code&gt; 내부 &lt;code&gt;fish&lt;/code&gt; 껍질.</target>
        </trans-unit>
        <trans-unit id="3ba25ca105726fc0d596821887908ff16a459bda" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;commands#complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">또한 스위치에 인수가 필요하고 파일 이름 완성을 비활성화하고 일부 조합에서만 사용할 수있는 완성을 작성하는 등의 특수 스위치가 있습니다. &lt;code&gt;complete&lt;/code&gt; 명령이 허용하는 다양한 스위치에 대한 자세한 설명은 설명서를 참조하십시오. 에 대한 &lt;a href=&quot;commands#complete&quot;&gt;완전한&lt;/a&gt; 내장 또는 쓰기 &lt;code&gt;complete --help&lt;/code&gt; 내부 &lt;code&gt;fish&lt;/code&gt; 껍질.</target>
        </trans-unit>
        <trans-unit id="8f62b81b574864e97ff42dca00b7081081edae35" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;, &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt;, &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;and&lt;/a&gt; and &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;or&lt;/a&gt;.</source>
          <target state="translated">특정 기준이 충족되는 경우에만 명령을 실행할 수있는 네 가지 물고기 내장 기능이 있습니다. 이러한 내장 매크로는 &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;경우&lt;/a&gt; , &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;스위치&lt;/a&gt; , &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;및&lt;/a&gt; 및 &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;나&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2d9df96be8b6a2362ccd2ca558b23ccf8d96cd57" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">특정 기준을 충족하는 경우에만 명령을 실행할 수있는 4 개의 물고기 내장이 있습니다. 이러한 내장 매크로는 &lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;commands#switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="255b5925229ebf64b3dccbaf56f554bfda33418a" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 매개 변수가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a56ebf43ed98e5db43b2052e83aa4d07a4140747" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;breakpoint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;breakpoint&lt;/code&gt; 대한 매개 변수가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c25f17ac972a261d801c33ab7a6b142dc2017014" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;fish_update_completions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; 에 대한 매개 변수가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b64e5bca9c9d038dcdaec525201a6e983cd4c039" translate="yes" xml:space="preserve">
          <source>There are numerous customization options, which can be controlled with fish variables.</source>
          <target state="translated">물고기 변수로 제어 할 수있는 다양한 사용자 정의 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="416f9bfa834c4b421dc3928904fcdb14dcbe03e2" translate="yes" xml:space="preserve">
          <source>There are numerous customization options, which can be controlled with git options or fish variables. git options, where available, take precedence over the fish variable with the same function. git options can be set on a per-repository or global basis. git options can be set with the &lt;code&gt;git config&lt;/code&gt; command, while fish variables can be set as usual with the &lt;a href=&quot;set#cmd-set&quot;&gt;set&lt;/a&gt; command.</source>
          <target state="translated">git 옵션 또는 fish 변수로 제어 할 수있는 다양한 사용자 정의 옵션이 있습니다. 가능한 경우 git 옵션은 동일한 기능을 가진 fish 변수보다 우선합니다. git 옵션은 리포지토리 또는 전역 기준으로 설정할 수 있습니다. git 옵션은 &lt;code&gt;git config&lt;/code&gt; 명령으로 설정할 수 있으며 fish 변수는 &lt;a href=&quot;set#cmd-set&quot;&gt;set&lt;/a&gt; 명령 으로 평소와 같이 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd120b1aba4ded7c561e9d4f21f84619af0191cb" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables.</source>
          <target state="translated">물고기에는 세 가지 종류의 변수가 있습니다 : 범용, 전역 및 지역 변수.</target>
        </trans-unit>
        <trans-unit id="031b665a362fca99dc2232105e16d4be76ec8e13" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables. Universal variables are shared between all fish sessions a user is running on one computer. Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;. Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;. The user can specify that a variable should have either global or local scope using the &lt;code&gt;-g/--global&lt;/code&gt; or &lt;code&gt;-l/--local&lt;/code&gt; switches.</source>
          <target state="translated">어류에는 3 가지 종류의 변수가 있습니다 : 보편적 변수, 전역 변수 및 지역 변수. 범용 변수는 사용자가 한 컴퓨터에서 실행중인 모든 피쉬 세션간에 공유됩니다. 전역 변수는 현재 피쉬 세션에 따라 다르지만 특정 블록 범위와 관련이 없으며 사용자가 &lt;code&gt;set -e&lt;/code&gt; 를 사용하여 명시 적으로 요청하지 않으면 지워지지 않습니다 . 지역 변수는 현재 피쉬 세션에 따라 다르며 특정 명령 블록과 관련이 있으며 특정 블록이 범위를 벗어나면 자동으로 지워집니다. 명령 블록은 하나의 명령으로 시작하는 일련의 명령이다 &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;function&lt;/code&gt; , &lt;code&gt;begin&lt;/code&gt; 또는 &lt;code&gt;switch&lt;/code&gt; , &lt;code&gt;end&lt;/code&gt; 명령으로 끝납니다 . 사용자는 &lt;code&gt;-g/--global&lt;/code&gt; 또는 &lt;code&gt;-l/--local&lt;/code&gt; 스위치를 사용하여 변수에 전역 또는 로컬 범위가 있어야 함을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e53b3e187fabe1e40c14b723e24b9fbf71412fee" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob.</source>
          <target state="translated">There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob.</target>
        </trans-unit>
        <trans-unit id="a8bb46a6b8bc305c23a119159486bd2d5c470ee5" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob. These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">물고기 3.0에는 두 가지 주요 변경 사항이 있습니다. caret &lt;code&gt;^&lt;/code&gt; 더 이상 stderr를 리디렉션하지 않고 물음표 &lt;code&gt;?&lt;/code&gt; 더 이상 glob가 아닙니다. 이러한 변경 사항은 기본적으로 해제되어 있습니다. 세션별로 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0b4e1d35ca4c236214ba374558333566d7c39ce" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;$pipestatus&lt;/code&gt; list variable for the exit statuses &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; of processes in a pipe.</source>
          <target state="translated">There is also a &lt;code&gt;$pipestatus&lt;/code&gt; list variable for the exit statuses &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; of processes in a pipe.</target>
        </trans-unit>
        <trans-unit id="20ceb2460c137862f053425df367d426c42e4313" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;switch&lt;/code&gt; command:</source>
          <target state="translated">도있다 &lt;code&gt;switch&lt;/code&gt; 명령 :</target>
        </trans-unit>
        <trans-unit id="f9457a5982580c619b1f010b4a7510be7a176dfe" translate="yes" xml:space="preserve">
          <source>There is one breaking change in fish 3.1: &lt;code&gt;string replace -r&lt;/code&gt; does a superfluous round of escaping for the replacement, so escaping backslashes would look like &lt;code&gt;string replace -ra '([ab])' '\\\\\\\$1' a&lt;/code&gt;. This flag removes that if turned on, so &lt;code&gt;'\\\\$1'&lt;/code&gt; is enough.</source>
          <target state="translated">There is one breaking change in fish 3.1: &lt;code&gt;string replace -r&lt;/code&gt; does a superfluous round of escaping for the replacement, so escaping backslashes would look like &lt;code&gt;string replace -ra '([ab])' '\\\\\\\$1' a&lt;/code&gt; . This flag removes that if turned on, so &lt;code&gt;'\\\\$1'&lt;/code&gt; is enough.</target>
        </trans-unit>
        <trans-unit id="b0866a618c196f1ac7d2ced3309d7b238c006085" translate="yes" xml:space="preserve">
          <source>There may be many variables with the same name, but different scopes. When using a variable, the variable scope will be searched from the inside out, i.e. a local variable will be used rather than a global variable with the same name, a global variable will be used rather than a universal variable with the same name.</source>
          <target state="translated">이름은 같지만 범위가 다른 변수가 많이있을 수 있습니다. 변수를 사용할 때 변수 범위는 내부에서 검색됩니다. 즉, 같은 이름의 전역 변수 대신 로컬 변수가 사용되고, 같은 이름의 범용 변수 대신 전역 변수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d7f028aa2b19c153baae8d83c317ae110446208a" translate="yes" xml:space="preserve">
          <source>These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">다음은 &lt;code&gt;fish&lt;/code&gt; 제공 하는 범용 탭 완성입니다 .</target>
        </trans-unit>
        <trans-unit id="a541ca19e60c8c36165c2c4faab471af97abf450" translate="yes" xml:space="preserve">
          <source>These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">These changes are off by default. They can be enabled on a per session basis:</target>
        </trans-unit>
        <trans-unit id="e7972582e9c4968e777fc42db67d9b318fa79e46" translate="yes" xml:space="preserve">
          <source>These colors, and many more, can be changed by running &lt;code&gt;fish_config&lt;/code&gt;, or by modifying variables directly.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 를 실행 하거나 변수를 직접 수정 하여이 색상 등을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91e1e5aba0c598515d08d40af2f8d04dd57004f4" translate="yes" xml:space="preserve">
          <source>These files are all executed on the startup of every shell. If you want to run a command only on starting an interactive shell, use the exit status of the command &lt;code&gt;status --is-interactive&lt;/code&gt; to determine if the shell is interactive. If you want to run a command only when using a login shell, use &lt;code&gt;status --is-login&lt;/code&gt; instead. This will speed up the starting of non-interactive or non-login shells.</source>
          <target state="translated">이 파일들은 모든 쉘이 시작될 때 모두 실행됩니다. 대화식 쉘을 시작할 때만 명령을 실행하려면 명령 &lt;code&gt;status --is-interactive&lt;/code&gt; 의 종료 상태를 사용 하여 쉘이 대화식인지 판별하십시오. 로그인 쉘을 사용할 때만 명령을 실행하려면 &lt;code&gt;status --is-login&lt;/code&gt; 을 대신 사용하십시오. 비 대화식 또는 비 로그인 셸의 시작 속도가 빨라집니다.</target>
        </trans-unit>
        <trans-unit id="80b96b3d74710e83d20ff5ac21723a42f2f052d6" translate="yes" xml:space="preserve">
          <source>These flags can appear before or immediately after one of the sub-commands listed above.</source>
          <target state="translated">이 플래그는 위에 나열된 하위 명령 중 하나 바로 앞이나 뒤에 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="018467e6400b14718548d65eb59c273e2720ed52" translate="yes" xml:space="preserve">
          <source>These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.</source>
          <target state="translated">이러한 경로는 빌드, 설치 또는 런타임시 설정된 매개 변수에 의해 제어되며 위에 나열된 기본값과 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59764234fbda3a5ae9dc6fc3ff0782f754b46b8c" translate="yes" xml:space="preserve">
          <source>These rely on external tools. Currently xsel, xclip, wl-copy/wl-paste and pbcopy/pbpaste are supported.</source>
          <target state="translated">These rely on external tools. Currently xsel, xclip, wl-copy/wl-paste and pbcopy/pbpaste are supported.</target>
        </trans-unit>
        <trans-unit id="d24f98a189aa3819db3885dc20417a7ef5fd2074" translate="yes" xml:space="preserve">
          <source>They are all used in an infix manner - &lt;code&gt;5 + 2&lt;/code&gt;, not &lt;code&gt;+ 5 2&lt;/code&gt;.</source>
          <target state="translated">그것들은 모두 &lt;code&gt;+ 5 2&lt;/code&gt; 아닌 &lt;code&gt;5 + 2&lt;/code&gt; 방식으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="af768071c5b224ad5b92ddb2ba1221dcbc0d859d" translate="yes" xml:space="preserve">
          <source>This also happens after &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. Therefore strings might be eliminated. This can be avoided by making the inner command return a trailing newline.</source>
          <target state="translated">&lt;a href=&quot;#expand-command-substitution&quot;&gt;명령 대체&lt;/a&gt; 후에도 발생합니다 . 따라서 문자열이 제거 될 수 있습니다. 내부 명령이 후행 줄 바꿈을 리턴하도록하여이를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d2c383ecda8a4c5bf0708b66a394d7bf089bafc" translate="yes" xml:space="preserve">
          <source>This bit of the documentation is a quick guide on how to get going. If you are new to this, see the &lt;a href=&quot;tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">This bit of the documentation is a quick guide on how to get going. If you are new to this, see the &lt;a href=&quot;tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="11a28f4bed992d7cf613847d7498fafe31511aea" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same basic syntax.</source>
          <target state="translated">This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same basic syntax.</target>
        </trans-unit>
        <trans-unit id="b50932aeaca87e43aadc296b2abd6503a42d3550" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same simple syntax.</source>
          <target state="translated">&lt;code&gt;echo&lt;/code&gt; 명령을 호출합니다 . &lt;code&gt;echo&lt;/code&gt; 는 인수를 화면에 쓰는 명령입니다. 위의 예에서 출력은 'hello world'입니다. 물고기의 모든 것은 명령으로 수행됩니다. 명령 집합을 여러 번 수행하는 명령, 변수 할당 명령, 명령 그룹을 단일 명령으로 처리하는 명령 등이 있습니다. 모든 단일 명령은 동일한 간단한 구문을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="366a5d79af152ebea92d5f861ed8a475043b7941" translate="yes" xml:space="preserve">
          <source>This can be written as:</source>
          <target state="translated">이것은 다음과 같이 쓸 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="2c3fa67d634b278ec1a7802bf809ac5774656af1" translate="yes" xml:space="preserve">
          <source>This code will add some directories to $PATH if they aren't yet included:</source>
          <target state="translated">이 코드는 아직 포함되지 않은 경우 $ PATH에 일부 디렉토리를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="46b694f24aed40624e847ae57ae10b126b23d033" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments in a manner 100% identical to how fish builtin commands handle their arguments. You pass a sequence of arguments that define the options recognized, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). More on this in the &lt;a href=&quot;#argparse-usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">이 명령을 사용하면 피쉬 스크립트 및 함수가 피쉬 내장 명령이 인수를 처리하는 방식과 100 % 동일한 방식으로 인수를 쉽게 처리 할 수 ​​있습니다. 인식 된 옵션을 정의하고 리터럴 ( &lt;code&gt;--&lt;/code&gt; ) 다음에 구문 분석 할 인수 (리터럴 ( &lt;code&gt;--&lt;/code&gt; ) 도 포함 할 수 있음)를 정의하는 일련의 인수를 전달합니다 . 자세한 내용은 아래 &lt;a href=&quot;#argparse-usage&quot;&gt;사용법&lt;/a&gt; 섹션 에서 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="51ecea6002832d6f166772d002d2b9826d4db24b" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments like how fish builtin commands handle their arguments. You pass arguments that define the known options, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). &lt;code&gt;argparse&lt;/code&gt; then sets variables to indicate the passed options with their values, and sets $argv (and always $argv) to the remaining arguments. More on this in the &lt;a href=&quot;#usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">This command makes it easy for fish scripts and functions to handle arguments like how fish builtin commands handle their arguments. You pass arguments that define the known options, followed by a literal &lt;code&gt;--&lt;/code&gt; , then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt; ). &lt;code&gt;argparse&lt;/code&gt; then sets variables to indicate the passed options with their values, and sets $argv (and always $argv) to the remaining arguments. More on this in the &lt;a href=&quot;#usage&quot;&gt;usage&lt;/a&gt; section below.</target>
        </trans-unit>
        <trans-unit id="20cd8d04285455a5eeee7e58dc05b32ca7729358" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;#argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">이 명령은 &lt;a href=&quot;#argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt; 명령 과 함께 사용하기에 적합한 옵션 사양을 생성하는 방법을 제공합니다 . 물론이 명령을 사용하지 않고 옵션 사양을 직접 작성할 수 있습니다. 그러나 명확성을 위해 이것을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a74b8d6f46def2454cb1a7815efcf306bc15eb2a" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</target>
        </trans-unit>
        <trans-unit id="07448165c0f812cb8478f38c84a94b14d2215ae2" translate="yes" xml:space="preserve">
          <source>This does not overwrite custom completions.</source>
          <target state="translated">사용자 정의 완료를 덮어 쓰지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6147eda0417a76ae63d83548f1bb6d3684130031" translate="yes" xml:space="preserve">
          <source>This file has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try &lt;code&gt;command printf&lt;/code&gt;.</source>
          <target state="translated">이 파일은 GNU Coreutils 버전 6.9의 printf에서 가져 왔습니다. OS와 함께 제공된 것과 같은 최신 버전의 printf를 사용하려면 printf &lt;code&gt;command printf&lt;/code&gt; 시도하십시오 .</target>
        </trans-unit>
        <trans-unit id="36a27e8809bc8ecec60cf5b8b496d2f657edff50" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Please call &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt;</source>
          <target state="translated">이 기능은 더 이상 사용되지 않습니다. &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt; 연락 하기</target>
        </trans-unit>
        <trans-unit id="3dbee0ce24ddb2a7779ce4b45c3fe6d00ac4de3f" translate="yes" xml:space="preserve">
          <source>This indicates how the command fared - 0 usually means success, while the others signify kinds of failure. For instance fish's &lt;code&gt;set --query&lt;/code&gt; returns the number of variables it queried that weren't set - &lt;code&gt;set --query PATH&lt;/code&gt; usually returns 0, &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; usually returns 2.</source>
          <target state="translated">This indicates how the command fared - 0 usually means success, while the others signify kinds of failure. For instance fish's &lt;code&gt;set --query&lt;/code&gt; returns the number of variables it queried that weren't set - &lt;code&gt;set --query PATH&lt;/code&gt; usually returns 0, &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; usually returns 2.</target>
        </trans-unit>
        <trans-unit id="cbbea16193e927515d0dc3be9146ab095157af42" translate="yes" xml:space="preserve">
          <source>This is a short explanation of some of the commonly used words in fish.</source>
          <target state="translated">이것은 물고기에서 일반적으로 사용되는 단어에 대한 간단한 설명입니다.</target>
        </trans-unit>
        <trans-unit id="8d244f1f10393a3fd4f3ebf581d37f923228ef19" translate="yes" xml:space="preserve">
          <source>This is implemented as a function and a builtin. The function will attempt to use an external realpath command if one can be found. Otherwise it falls back to the builtin. The builtin does not support any options. It's meant to be used only by scripts which need to be portable. The builtin implementation behaves like GNU realpath when invoked without any options (which is the most common use case). In general scripts should not invoke the builtin directly. They should just use &lt;code&gt;realpath&lt;/code&gt;.</source>
          <target state="translated">이것은 함수와 내장으로 구현됩니다. 함수는 외부 realpath 명령을 찾을 수있는 경우이를 사용하려고 시도합니다. 그렇지 않으면 내장으로 돌아갑니다. 내장은 어떤 옵션도 지원하지 않습니다. 이식성이 필요한 스크립트 만 사용해야합니다. 내장 구현은 옵션 (가장 일반적인 사용 사례)없이 호출 될 때 GNU 리얼 패스처럼 동작합니다. 일반적으로 스크립트는 내장을 직접 호출해서는 안됩니다. 그들은 단지 &lt;code&gt;realpath&lt;/code&gt; 를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="ee1d4171e513cf57adfa5dbd82bf66ed41edba27" translate="yes" xml:space="preserve">
          <source>This is not an exhaustive list and the fish project has no opinion regarding the merits of the repositories listed above or the scripts found therein.</source>
          <target state="translated">이것은 철저한 목록이 아니며 어류 프로젝트는 위에 나열된 리포지토리의 장점이나 그 안에있는 스크립트에 대한 의견이 없습니다.</target>
        </trans-unit>
        <trans-unit id="096d775aa834b5a98fc75f9c9df8cd5ad1df3f6c" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;index#expand-brace&quot;&gt;Brace expansion&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;index#expand-brace&quot;&gt;Brace 확장&lt;/a&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="87b5c6aa51fef3c82ea1bd8fddb7c95bed61e89d" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;code&gt;fish&lt;/code&gt;, the friendly interactive shell. &lt;code&gt;fish&lt;/code&gt; is a user friendly commandline shell intended mostly for interactive use. A shell is a program used to execute other programs. For the latest information on &lt;code&gt;fish&lt;/code&gt;, please visit the &lt;a href=&quot;https://fishshell.com/&quot;&gt;&lt;code&gt;fish&lt;/code&gt; homepage&lt;/a&gt;.</source>
          <target state="translated">친숙한 대화식 쉘인 &lt;code&gt;fish&lt;/code&gt; 에 대한 문서입니다 . &lt;code&gt;fish&lt;/code&gt; 는 주로 대화식으로 사용하기위한 사용자 친화적 인 명령 줄 셸입니다. 쉘은 다른 프로그램을 실행하는 데 사용되는 프로그램입니다. &lt;code&gt;fish&lt;/code&gt; 에 대한 최신 정보 는 &lt;a href=&quot;https://fishshell.com/&quot;&gt; &lt;code&gt;fish&lt;/code&gt; 홈페이지&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4dbd4206fa5ed554553ccafdb81158a2765cb589" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;em&gt;fish&lt;/em&gt;, the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell.</source>
          <target state="translated">This is the documentation for &lt;em&gt;fish&lt;/em&gt;, the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell.</target>
        </trans-unit>
        <trans-unit id="577bd6355fb298c4b6b2d6488f451eaa11f5dbb8" translate="yes" xml:space="preserve">
          <source>This is the preferred way to define your prompt as well:</source>
          <target state="translated">프롬프트를 정의 할 때 선호되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="ae35cced4effb763cdd5c51f3c938b7ee1f84dcc" translate="yes" xml:space="preserve">
          <source>This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with &lt;code&gt;`fish /path/to/script&lt;/code&gt; they aren't required (but don't hurt either!).</source>
          <target state="translated">This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with &lt;code&gt;`fish /path/to/script&lt;/code&gt; they aren't required (but don't hurt either!).</target>
        </trans-unit>
        <trans-unit id="44756654753bba67ac9fe0b2cb5461aed36daaa0" translate="yes" xml:space="preserve">
          <source>This line tells the shell to execute the file with the bash interpreter, that is located at the path &lt;code&gt;/bin/bash&lt;/code&gt;.</source>
          <target state="translated">This line tells the shell to execute the file with the bash interpreter, that is located at the path &lt;code&gt;/bin/bash&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8cc576b35450257aadce9343fd3afaecbb82068c" translate="yes" xml:space="preserve">
          <source>This means that the global value takes precedence over the universal value.</source>
          <target state="translated">이것은 글로벌 가치가 보편적 가치보다 우선한다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="51d7db524de6aeb12230612416aa7c659663fe8a" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory.</source>
          <target state="translated">위에 표시된이 프롬프트는 &lt;code&gt;fish&lt;/code&gt; 기본 프롬프트입니다. 사용자 이름, 호스트 이름 및 작업 디렉토리가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c7a03d7fff57e6a14cd855d9e527df2a9ce2b8e1" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory. - to change this prompt see &lt;a href=&quot;#prompt&quot;&gt;how to change your prompt&lt;/a&gt; - to switch to fish permanently see &lt;a href=&quot;#switching-to-fish&quot;&gt;switch your default shell to fish&lt;/a&gt;.</source>
          <target state="translated">This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory. - to change this prompt see &lt;a href=&quot;#prompt&quot;&gt;how to change your prompt&lt;/a&gt; - to switch to fish permanently see &lt;a href=&quot;#switching-to-fish&quot;&gt;switch your default shell to fish&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="09aac7de9ce9cd61579136cf9dcf630266cb3674" translate="yes" xml:space="preserve">
          <source>This runs the command &lt;code&gt;echo&lt;/code&gt; with the arguments &lt;code&gt;hello&lt;/code&gt; and &lt;code&gt;world&lt;/code&gt;.</source>
          <target state="translated">This runs the command &lt;code&gt;echo&lt;/code&gt; with the arguments &lt;code&gt;hello&lt;/code&gt; and &lt;code&gt;world&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c9eeea9640faa8417502c909ed567d93f8c26ac1" translate="yes" xml:space="preserve">
          <source>This section is on how to install, uninstall, start and exit a fish shell and on how to make fish the default shell:</source>
          <target state="translated">This section is on how to install, uninstall, start and exit a fish shell and on how to make fish the default shell:</target>
        </trans-unit>
        <trans-unit id="8365c7b8dad5a5bec81e8a157c63659de9f8f9c9" translate="yes" xml:space="preserve">
          <source>This syntax is supported since fish 3.1.</source>
          <target state="translated">This syntax is supported since fish 3.1.</target>
        </trans-unit>
        <trans-unit id="c731bb20159682c25c6b4c24ba8357e2f689c68f" translate="yes" xml:space="preserve">
          <source>This tells you that there exists a file that starts with '&lt;code&gt;somefi&lt;/code&gt;', which is useful feedback as you type.</source>
          <target state="translated">이것은 ' &lt;code&gt;somefi&lt;/code&gt; '로 시작하는 파일이 있다는 것을 알려주며 , 입력 할 때 유용한 피드백입니다.</target>
        </trans-unit>
        <trans-unit id="1ffb61bd1cd5715a466531b7a657f71109690e35" translate="yes" xml:space="preserve">
          <source>This test is mostly POSIX-compatible.</source>
          <target state="translated">이 테스트는 대부분 POSIX 호환입니다.</target>
        </trans-unit>
        <trans-unit id="44595c0d7ccfd8b4e39fcc6fb1c75e80391912f7" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">이 학습서는 명령 행 쉘 및 Unix 명령에 대한 기본 지식을 가지고 있으며 작업중인 &lt;code&gt;fish&lt;/code&gt; 사본이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="f48d5a2439da006a37325d3b33d3046473c20c81" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure where to put your own customisations, use &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;.</source>
          <target state="translated">이 광범위한 검색은 혼란 스러울 수 있습니다. 자신의 사용자 정의 위치를 ​​모르는 경우 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f358815973e2ad20875ee5c37318a06668178037" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your completions probably belong in &lt;code&gt;~/.config/fish/completions&lt;/code&gt;.</source>
          <target state="translated">이 광범위한 검색은 혼란 스러울 수 있습니다. 확실하지 않은 경우, 완료는 &lt;code&gt;~/.config/fish/completions&lt;/code&gt; 에 속합니다 .</target>
        </trans-unit>
        <trans-unit id="fc8f74e5e402cdc09fe9163449bdf559dd908a47" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your functions probably belong in &lt;code&gt;~/.config/fish/functions&lt;/code&gt;.</source>
          <target state="translated">이 광범위한 검색은 혼란 스러울 수 있습니다. 확실하지 않은 경우 기능은 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 에 속할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a9195514b37c65c22f746374d557ac1c811b3ed" translate="yes" xml:space="preserve">
          <source>This will beep when the most recent job completes.</source>
          <target state="translated">가장 최근 작업이 완료되면 경고음이 울립니다.</target>
        </trans-unit>
        <trans-unit id="d275d705f3563e034e584f7f1416ca37d5829386" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;mkdir&lt;/code&gt; command, and if it is successful, change the current working directory to the one just created.</source>
          <target state="translated">&lt;code&gt;mkdir&lt;/code&gt; 명령 이 실행되고 성공하면 현재 작업중인 디렉토리를 방금 작성한 디렉토리로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="ee864a54df8fc82a493855e23af51940c281088e" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or</source>
          <target state="translated">To accept the autosuggestion (replacing the command line contents), press right arrow or</target>
        </trans-unit>
        <trans-unit id="f891073aa4578597be2a0dcd4d98d094f936e0cd" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept the first suggested word, press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. If the autosuggestion is not what you want, just ignore it: it won't execute unless you accept it.</source>
          <target state="translated">자동 제안을 수락하려면 (명령 줄 내용 바꾸기) 오른쪽 화살표 또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F를&lt;/b&gt; 누르십시오 . 첫 번째 추천 단어를 눌러 수락하려면 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; 또는 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;F를&lt;/b&gt; . 자동 제안이 원하는 것이 아니라면 무시하십시오. 수락하지 않으면 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b8736772d7b0120e4918f841f4d7512238ae0d0f" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit</source>
          <target state="translated">To accept the autosuggestion, hit</target>
        </trans-unit>
        <trans-unit id="18bff7130ea79ac3d65a254db2e29fd6582707f0" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit &lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept a single word of the autosuggestion, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (right arrow). If the autosuggestion is not what you want, just ignore it.</source>
          <target state="translated">자동 제안을 수락하려면 &lt;b&gt;&amp;rarr;&lt;/b&gt; 또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F를&lt;/b&gt; 누르십시오 . 자기 암시의 단어 수락하려면 &lt;em&gt;Alt 키를&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; (오른쪽 화살표). 자동 제안이 원하는 것이 아니라면 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="dd013ce2337c6820983e0fd191e213738ceadda7" translate="yes" xml:space="preserve">
          <source>To append standard error to a file, write &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">파일에 표준 오류를 추가하려면 &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0108b6b821f16c26049be48e0e57d43670272afc" translate="yes" xml:space="preserve">
          <source>To append standard output to a file, write &lt;code&gt;&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">파일에 표준 출력을 추가하려면 &lt;code&gt;&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt; 을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="9943d195413e31ff48e223d431261ac3888d43ba" translate="yes" xml:space="preserve">
          <source>To append the output of FD N to a file, write &lt;code&gt;N&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">FD N의 출력을 파일에 추가하려면 &lt;code&gt;N&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="193736dda0ff3338bfe47b251780f85b63fdea40" translate="yes" xml:space="preserve">
          <source>To avoid this problem, consider changing the setting which fish inherits. If this is not possible, add a statement to your &lt;a href=&quot;index#&quot;&gt;user initialization file&lt;/a&gt; (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;):</source>
          <target state="translated">이 문제를 피하려면 물고기가 상속하는 설정을 변경하십시오. 이것이 가능하지 않으면, &lt;a href=&quot;index#&quot;&gt;사용자 초기화 파일&lt;/a&gt; (보통 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; )에 명령문을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="63eb575adf26f78b782518f6a17e924957f90214" translate="yes" xml:space="preserve">
          <source>To avoid this problem, consider changing the setting which fish inherits. If this is not possible, add a statement to your &lt;a href=&quot;index#initialization&quot;&gt;user initialization file&lt;/a&gt; (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;):</source>
          <target state="translated">To avoid this problem, consider changing the setting which fish inherits. If this is not possible, add a statement to your &lt;a href=&quot;index#initialization&quot;&gt;user initialization file&lt;/a&gt; (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="49e4d836110da227491a5f8bda022aa8c6061ef3" translate="yes" xml:space="preserve">
          <source>To change the number of characters per path component, set $fish_prompt_pwd_dir_length to the number of characters. Setting it to 0 or an invalid value will disable shortening entirely.</source>
          <target state="translated">경로 구성 요소 당 문자 수를 변경하려면 $ fish_prompt_pwd_dir_length를 문자 수로 설정하십시오. 이 값을 0 또는 유효하지 않은 값으로 설정하면 단축이 완전히 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="21b68d71ccfba8e68579a0f529af4418fdee11ee" translate="yes" xml:space="preserve">
          <source>To change the number of characters per path component, set &lt;code&gt;$fish_prompt_pwd_dir_length&lt;/code&gt; to the number of characters. Setting it to 0 or an invalid value will disable shortening entirely.</source>
          <target state="translated">To change the number of characters per path component, set &lt;code&gt;$fish_prompt_pwd_dir_length&lt;/code&gt; to the number of characters. Setting it to 0 or an invalid value will disable shortening entirely.</target>
        </trans-unit>
        <trans-unit id="ed9f95b7010d6c33d5feeb22c934ddd25044836e" translate="yes" xml:space="preserve">
          <source>To compare strings or numbers or check file properties (whether a file exists or is writeable and such), use &lt;a href=&quot;cmds/test#cmd-test&quot;&gt;test&lt;/a&gt;, like</source>
          <target state="translated">To compare strings or numbers or check file properties (whether a file exists or is writeable and such), use &lt;a href=&quot;cmds/test#cmd-test&quot;&gt;test&lt;/a&gt;, like</target>
        </trans-unit>
        <trans-unit id="7c3563dd46a7946806ee797b7c244ebcbcfd652c" translate="yes" xml:space="preserve">
          <source>To compare strings or numbers or check file properties (whether a file exists or is writeable and such), use &lt;a href=&quot;commands#test&quot;&gt;test&lt;/a&gt;, like</source>
          <target state="translated">문자열이나 숫자를 비교하거나 파일 속성을 확인하려면 (파일이 있는지 또는 쓰기 가능한지 등) &lt;a href=&quot;commands#test&quot;&gt;test&lt;/a&gt; 와 같이</target>
        </trans-unit>
        <trans-unit id="6a7f4987047f57b402d8e5f6d3639b704d77e210" translate="yes" xml:space="preserve">
          <source>To create a variable &lt;code&gt;smurf&lt;/code&gt;, containing the items &lt;code&gt;blue&lt;/code&gt; and &lt;code&gt;small&lt;/code&gt;, simply write:</source>
          <target state="translated">&lt;code&gt;blue&lt;/code&gt; 및 &lt;code&gt;small&lt;/code&gt; 항목을 포함 하는 변수 &lt;code&gt;smurf&lt;/code&gt; 를 만들려면 간단히 다음과 같이 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="eb511fd856e12e54362713b367b14d821ca7b8b6" translate="yes" xml:space="preserve">
          <source>To customize the syntax highlighting, you can set the environment variables listed in the &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; section.</source>
          <target state="translated">To customize the syntax highlighting, you can set the environment variables listed in the &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; section.</target>
        </trans-unit>
        <trans-unit id="98a0be80bb6315e5a311feb69467eb89c6ebbff0" translate="yes" xml:space="preserve">
          <source>To customize the syntax highlighting, you can set the environment variables listed in the &lt;a href=&quot;index#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; section.</source>
          <target state="translated">구문 강조를 사용자 정의하려면 &lt;a href=&quot;index#variables-color&quot;&gt;강조 색상 변경을위한 변수&lt;/a&gt; 섹션에 나열된 환경 변수를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9fc093eff5ae033f2c40b9198d007e24ef0b72a0" translate="yes" xml:space="preserve">
          <source>To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</source>
          <target state="translated">To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</target>
        </trans-unit>
        <trans-unit id="ac21aa705a0725f893e869e7bdb461f9339c261d" translate="yes" xml:space="preserve">
          <source>To easily create a function of this form, you can use the &lt;a href=&quot;cmds/alias#cmd-alias&quot;&gt;alias&lt;/a&gt; command.</source>
          <target state="translated">To easily create a function of this form, you can use the &lt;a href=&quot;cmds/alias#cmd-alias&quot;&gt;alias&lt;/a&gt; command.</target>
        </trans-unit>
        <trans-unit id="27cc6de064f425d626ab9949da6c184849b875b2" translate="yes" xml:space="preserve">
          <source>To easily create a function of this form, you can use the &lt;a href=&quot;commands#alias&quot;&gt;alias&lt;/a&gt; command.</source>
          <target state="translated">이 양식의 함수를 쉽게 만들려면 &lt;a href=&quot;commands#alias&quot;&gt;alias&lt;/a&gt; 명령을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8f64b85ef3f001562e7c47d755547c924af5eb9a" translate="yes" xml:space="preserve">
          <source>To force true-color support on or off, set $fish_term24bit to &quot;1&quot; for on and 0 for off - &lt;code&gt;set -g fish_term24bit 1&lt;/code&gt;.</source>
          <target state="translated">To force true-color support on or off, set $fish_term24bit to &quot;1&quot; for on and 0 for off - &lt;code&gt;set -g fish_term24bit 1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a91455f2060dfc72dce00653bdc5f73f5d7afdf7" translate="yes" xml:space="preserve">
          <source>To get a listing of all currently started jobs, use the &lt;a href=&quot;cmds/jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt; command. These listed jobs can be removed with the &lt;a href=&quot;cmds/disown#cmd-disown&quot;&gt;disown&lt;/a&gt; command.</source>
          <target state="translated">To get a listing of all currently started jobs, use the &lt;a href=&quot;cmds/jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt; command. These listed jobs can be removed with the &lt;a href=&quot;cmds/disown#cmd-disown&quot;&gt;disown&lt;/a&gt; command.</target>
        </trans-unit>
        <trans-unit id="86c65bf9fb8994e55d7d62a0a0233657bfd07c71" translate="yes" xml:space="preserve">
          <source>To get a listing of all currently started jobs, use the &lt;a href=&quot;commands#jobs&quot;&gt;&lt;code&gt;jobs&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">현재 시작된 모든 작업의 ​​목록을 얻으려면 &lt;a href=&quot;commands#jobs&quot;&gt; &lt;code&gt;jobs&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="efb945613c9e2b54a3ed413b1ce572f55f0f25b2" translate="yes" xml:space="preserve">
          <source>To give a variable to an external command, it needs to be &quot;exported&quot;. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have an export command. Instead, a variable is exported via an option to &lt;code&gt;set&lt;/code&gt;, either &lt;code&gt;--export&lt;/code&gt; or just &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">To give a variable to an external command, it needs to be &quot;exported&quot;. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have an export command. Instead, a variable is exported via an option to &lt;code&gt;set&lt;/code&gt; , either &lt;code&gt;--export&lt;/code&gt; or just &lt;code&gt;-x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dfb97c4eee9e02bf1114c1290403e1dda007a114" translate="yes" xml:space="preserve">
          <source>To implement an alias, use the &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; option:</source>
          <target state="translated">별명을 구현하려면 &lt;code&gt;-w&lt;/code&gt; 또는 &lt;code&gt;--wraps&lt;/code&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d52456194e9d9376ea756d87898a4b5a9b324eb6" translate="yes" xml:space="preserve">
          <source>To install the development version of fish see the instructions at the &lt;a href=&quot;https://github.com/fish-shell/fish-shell&quot;&gt;project's GitHub page&lt;/a&gt;.</source>
          <target state="translated">To install the development version of fish see the instructions at the &lt;a href=&quot;https://github.com/fish-shell/fish-shell&quot;&gt;project's GitHub page&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2897daf35873ca16d00ef5a1dac5a630b8c3c2e1" translate="yes" xml:space="preserve">
          <source>To make errors highlighted and red, use:</source>
          <target state="translated">오류를 강조 표시하고 빨간색으로 표시하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d3fa292c2ab02a989c54851cc682dc196a6ed257" translate="yes" xml:space="preserve">
          <source>To not overwrite (&quot;clobber&quot;) an existing file, write '&amp;gt;?DESTINATION' or '2&amp;gt;?DESTINATION'</source>
          <target state="translated">기존 파일을 덮어 쓰지 않으려면 ( &quot;clobber&quot;) '&amp;gt;? DESTINATION'또는 '2&amp;gt;? DESTINATION'을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="c32475444757498cf8759ddf9075fa1f9322a1a8" translate="yes" xml:space="preserve">
          <source>To not overwrite (&quot;clobber&quot;) an existing file, write &lt;code&gt;&amp;gt;?DESTINATION&lt;/code&gt; or &lt;code&gt;2&amp;gt;?DESTINATION&lt;/code&gt; (this is also known as the &quot;noclobber&quot; redirection)</source>
          <target state="translated">To not overwrite (&quot;clobber&quot;) an existing file, write &lt;code&gt;&amp;gt;?DESTINATION&lt;/code&gt; or &lt;code&gt;2&amp;gt;?DESTINATION&lt;/code&gt; (this is also known as the &quot;noclobber&quot; redirection)</target>
        </trans-unit>
        <trans-unit id="9ec5501ff931d8cf824481581d142283552d1be7" translate="yes" xml:space="preserve">
          <source>To prepend /usr/local/bin and /usr/sbin to &lt;code&gt;$PATH&lt;/code&gt;, you can write:</source>
          <target state="translated">/ usr / local / bin 및 / usr / sbin을 &lt;code&gt;$PATH&lt;/code&gt; 앞에 추가하려면 다음과 같이 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4beb8ce6e29ccb991aceef2a82e88203ebcf1e6" translate="yes" xml:space="preserve">
          <source>To provide a list of possible completions for myprog, use the &lt;code&gt;-a&lt;/code&gt; switch. If &lt;code&gt;myprog&lt;/code&gt; accepts the arguments start and stop, this can be specified as &amp;lsquo;complete -c myprog -a 'start stop&amp;rsquo;&lt;code&gt;. The argument to the&lt;/code&gt;-a` switch is always a single string. At completion time, it will be tokenized on spaces and tabs, and variable expansion, command substitution and other forms of parameter expansion will take place.</source>
          <target state="translated">myprog에 대한 가능한 완료 목록을 제공하려면 &lt;code&gt;-a&lt;/code&gt; 스위치를 사용하십시오 . 경우 &lt;code&gt;myprog&lt;/code&gt; 인수가 시작 및 정지 수용, 이것은 'STOP 시작'-a MYPROG -c 완료 '로 지정할 수 있습니다 &lt;code&gt;. The argument to the&lt;/code&gt; -a` 스위치에 대한 인수 는 항상 단일 문자열입니다. 완료시 공간 및 탭에서 토큰 화되며 변수 확장, 명령 대체 및 기타 형식의 매개 변수 확장이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="9ba5c8cf0aa771ef03a27f5b13b93fb552811059" translate="yes" xml:space="preserve">
          <source>To provide a list of possible completions for myprog, use the &lt;code&gt;-a&lt;/code&gt; switch. If &lt;code&gt;myprog&lt;/code&gt; accepts the arguments start and stop, this can be specified as &lt;code&gt;complete -c myprog -a 'start stop'&lt;/code&gt;. The argument to the &lt;code&gt;-a&lt;/code&gt; switch is always a single string. At completion time, it will be tokenized on spaces and tabs, and variable expansion, command substitution and other forms of parameter expansion will take place.</source>
          <target state="translated">To provide a list of possible completions for myprog, use the &lt;code&gt;-a&lt;/code&gt; switch. If &lt;code&gt;myprog&lt;/code&gt; accepts the arguments start and stop, this can be specified as &lt;code&gt;complete -c myprog -a 'start stop'&lt;/code&gt; . The argument to the &lt;code&gt;-a&lt;/code&gt; switch is always a single string. At completion time, it will be tokenized on spaces and tabs, and variable expansion, command substitution and other forms of parameter expansion will take place.</target>
        </trans-unit>
        <trans-unit id="e25d06bf926dcd36845db13c547e9060f688cf44" translate="yes" xml:space="preserve">
          <source>To read standard input from a file, write &lt;code&gt;&amp;lt;SOURCE_FILE&lt;/code&gt;</source>
          <target state="translated">파일에서 표준 입력을 읽으려면 &lt;code&gt;&amp;lt;SOURCE_FILE&lt;/code&gt; 을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="566482427df8f2419f7d694e4a36a521345245bc" translate="yes" xml:space="preserve">
          <source>To redirect both standard output and standard error to the file 'all_output.txt', you can write &lt;code&gt;echo Hello &amp;amp;&amp;gt; all_output.txt&lt;/code&gt;, which is a convenience for &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="translated">To redirect both standard output and standard error to the file 'all_output.txt', you can write &lt;code&gt;echo Hello &amp;amp;&amp;gt; all_output.txt&lt;/code&gt; , which is a convenience for &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="efd4ccfede11d358f3540d606a3599db34a9bcee" translate="yes" xml:space="preserve">
          <source>To redirect both standard output and standard error to the file 'all_output.txt', you can write &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="translated">표준 출력과 표준 오류를 모두 'all_output.txt'파일로 리디렉션하려면 &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt; 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2f9c19f996d0330cf3e69a9443cdf693a9354414" translate="yes" xml:space="preserve">
          <source>To redirect input of FD N, write &lt;code&gt;N&amp;lt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">FD N의 입력을 리디렉션하려면 &lt;code&gt;N&amp;lt;DESTINATION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bceaef825c7c9262bebcb64ef18bc758682a29d" translate="yes" xml:space="preserve">
          <source>To redirect output of FD N, write &lt;code&gt;N&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">FD N의 출력을 리디렉션하려면 &lt;code&gt;N&amp;gt;DESTINATION&lt;/code&gt; 을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="9c95f3118a2473e23823116b30dffd5cc8f94fec" translate="yes" xml:space="preserve">
          <source>To redirect stdout and stderr into one file, you need to first redirect stdout, and then stderr into stdout:</source>
          <target state="translated">To redirect stdout and stderr into one file, you need to first redirect stdout, and then stderr into stdout:</target>
        </trans-unit>
        <trans-unit id="752b3b48d45276169440be6784b7f3a0d12fbd09" translate="yes" xml:space="preserve">
          <source>To remove /usr/local/bin from &lt;code&gt;$PATH&lt;/code&gt;, you can write:</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; 에서 / usr / local / bin을 제거하려면 다음 과 같이 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="bfee3c8015977afa9c3de4b32b2c9383aee5df05" translate="yes" xml:space="preserve">
          <source>To save custom keybindings, put the &lt;code&gt;bind&lt;/code&gt; statements into &lt;a href=&quot;../index#initialization&quot;&gt;config.fish&lt;/a&gt;. Alternatively, fish also automatically executes a function called &lt;code&gt;fish_user_key_bindings&lt;/code&gt; if it exists.</source>
          <target state="translated">To save custom keybindings, put the &lt;code&gt;bind&lt;/code&gt; statements into &lt;a href=&quot;../index#initialization&quot;&gt;config.fish&lt;/a&gt;. Alternatively, fish also automatically executes a function called &lt;code&gt;fish_user_key_bindings&lt;/code&gt; if it exists.</target>
        </trans-unit>
        <trans-unit id="b2510f1ad4da5cd52177add85db1eee2d566d8fe" translate="yes" xml:space="preserve">
          <source>To save custom keybindings, put the &lt;code&gt;bind&lt;/code&gt; statements into &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;. Alternatively, fish also automatically executes a function called &lt;code&gt;fish_user_key_bindings&lt;/code&gt; if it exists.</source>
          <target state="translated">사용자 정의 키 바인딩을 저장하려면 &lt;code&gt;bind&lt;/code&gt; 명령문을 &lt;a href=&quot;index#initialization&quot;&gt;config.fish에&lt;/a&gt; 넣으십시오 . 또는 fish는 &lt;code&gt;fish_user_key_bindings&lt;/code&gt; 라는 기능이 있으면 자동으로 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="61901ecaf8e208e6ef9d0647eaddf669c1ca4bd8" translate="yes" xml:space="preserve">
          <source>To search for previous entries containing the word 'make', type &lt;code&gt;make&lt;/code&gt; in the console and press the up key.</source>
          <target state="translated">단어 'make'가 포함 된 이전 항목을 검색하려면 콘솔에 &lt;code&gt;make&lt;/code&gt; 를 입력 하고 위로 키를 누르십시오.</target>
        </trans-unit>
        <trans-unit id="4b5da07cf8e10869da36d0830cda73f0b82b9df0" translate="yes" xml:space="preserve">
          <source>To see universal variables in action, start two fish sessions side by side, and issue the following command in one of them &lt;code&gt;set fish_color_cwd blue&lt;/code&gt;. Since &lt;code&gt;fish_color_cwd&lt;/code&gt; is a universal variable, the color of the current working directory listing in the prompt will instantly change to blue on both terminals.</source>
          <target state="translated">범용 변수의 작동을 보려면 두 개의 물고기 세션을 나란히 시작하고 그 중 하나에서 &lt;code&gt;set fish_color_cwd blue&lt;/code&gt; 하여 다음 명령을 실행하십시오 . 이후 &lt;code&gt;fish_color_cwd&lt;/code&gt; 는 보편적 변수 프롬프트 의지에 목록 현재 작업 디렉토리의 색상 즉시 두 터미널에 파란색으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="b44733fd0f7a6b3cff6f09a867502f4ea60ec37a" translate="yes" xml:space="preserve">
          <source>To separate a variable name from text encase the variable within double-quotes or braces.</source>
          <target state="translated">변수 이름을 텍스트와 구분하려면 변수를 큰 따옴표 또는 중괄호 안에 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="27f9d440d7aee2f279a56362c4acb567b9cf727d" translate="yes" xml:space="preserve">
          <source>To separate a variable name from text encase the variable within double-quotes or braces:</source>
          <target state="translated">To separate a variable name from text encase the variable within double-quotes or braces:</target>
        </trans-unit>
        <trans-unit id="0c4c8bffe9739fce5469a9db2a9dd6941b6021d0" translate="yes" xml:space="preserve">
          <source>To set a variable value, use the &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; command. A variable name can not be empty and can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">To set a variable value, use the &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; command. A variable name can not be empty and can contain only letters, digits, and underscores. It may begin and end with any of those characters.</target>
        </trans-unit>
        <trans-unit id="7e8052447e58d55b5e4f105d0ffa9d20ca69cabc" translate="yes" xml:space="preserve">
          <source>To set a variable value, use the &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt; command&lt;/a&gt;. A variable name can not be empty and can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">변수 값을 설정하려면 사용 &lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; 명령을&lt;/a&gt; . 변수 이름은 비워 둘 수 없으며 문자, 숫자 및 밑줄 만 포함 할 수 있습니다. 해당 문자로 시작하고 끝날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="698d5831491bbb9701f405a1762b10b1e4e34b8d" translate="yes" xml:space="preserve">
          <source>To set the variable &lt;code&gt;smurf_color&lt;/code&gt; to the value &lt;code&gt;blue&lt;/code&gt;, use the command &lt;code&gt;set smurf_color blue&lt;/code&gt;.</source>
          <target state="translated">변수 &lt;code&gt;smurf_color&lt;/code&gt; 를 &lt;code&gt;blue&lt;/code&gt; 값으로 설정하려면 set &lt;code&gt;set smurf_color blue&lt;/code&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bed9902ef9dec5f2285d68ae61ceccf41fb50e0a" translate="yes" xml:space="preserve">
          <source>To show the last command in the title:</source>
          <target state="translated">제목에 마지막 명령을 표시하려면</target>
        </trans-unit>
        <trans-unit id="2dfd3462301075bbcb353fa08e104b09a88deef0" translate="yes" xml:space="preserve">
          <source>To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt;, one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</source>
          <target state="translated">To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt; , one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10b0cfc6463833f72da638ff9b75529f78df15de" translate="yes" xml:space="preserve">
          <source>To specify a signal handler for the WINCH signal, write:</source>
          <target state="translated">WINCH 신호에 대한 신호 처리기를 지정하려면 다음과 같이 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="5271e92937f5c39aabd3c25c1ed834a98af6473a" translate="yes" xml:space="preserve">
          <source>To start a debug session simply run the builtin command &lt;code&gt;breakpoint&lt;/code&gt; at the point in a function or script where you wish to gain control. Also, the default action of the TRAP signal is to call this builtin. So a running script can be debugged by sending it the TRAP signal with the &lt;code&gt;kill&lt;/code&gt; command. Once in the debugger, it is easy to insert new breakpoints by using the funced function to edit the definition of a function.</source>
          <target state="translated">디버그 세션을 시작하려면 제어하려는 함수 또는 스크립트의 지점에서 내장 명령 &lt;code&gt;breakpoint&lt;/code&gt; 을 실행하십시오 . 또한 TRAP 신호의 기본 동작은이 내장을 호출하는 것입니다. 따라서 &lt;code&gt;kill&lt;/code&gt; 명령으로 TRAP 신호를 보내 실행중인 스크립트를 디버깅 할 수 있습니다 . 디버거에 들어가면 funced 함수를 사용하여 함수 정의를 편집하여 새 중단 점을 쉽게 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ca038b49940b6708e8ae180bb586be833d5a8f7" translate="yes" xml:space="preserve">
          <source>To use a &quot;,&quot; as an element, &lt;a href=&quot;#quotes&quot;&gt;quote&lt;/a&gt; or &lt;a href=&quot;#escapes&quot;&gt;escape&lt;/a&gt; it.</source>
          <target state="translated">&quot;,&quot;를 요소로 사용하려면 &lt;a href=&quot;#quotes&quot;&gt;인용&lt;/a&gt; 하거나 &lt;a href=&quot;#escapes&quot;&gt;이스케이프 처리&lt;/a&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="4d1e2f58f1d1e885a6a557bd9d4d5d08b6944f6a" translate="yes" xml:space="preserve">
          <source>To use the value of the variable &lt;code&gt;smurf_color&lt;/code&gt;, write &lt;code&gt;$&lt;/code&gt; (dollar symbol) followed by the name of the variable, like &lt;code&gt;echo Smurfs are usually $smurf_color&lt;/code&gt;, which would print the result 'Smurfs are usually blue'.</source>
          <target state="translated">변수의 값 사용하려면 &lt;code&gt;smurf_color&lt;/code&gt; 를 , 쓰기 &lt;code&gt;$&lt;/code&gt; 같은 변수의 이름 다음에 (달러 기호) &lt;code&gt;echo Smurfs are usually $smurf_color&lt;/code&gt; 결과를 인쇄 할 것이다, '스머프는 일반적으로 파란색'.</target>
        </trans-unit>
        <trans-unit id="68bccd38cdde729f08d1dabeb1a907eb895c4a23" translate="yes" xml:space="preserve">
          <source>To write standard error to a file, write &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">파일에 표준 오류를 쓰려면 &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="940e7eb5db628c3cea52e63456a2070ec3f08b28" translate="yes" xml:space="preserve">
          <source>To write standard error to a file, write &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt;&lt;a href=&quot;#id4&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;</source>
          <target state="translated">To write standard error to a file, write &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt; &lt;a href=&quot;#id4&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="659acd568f9529fe70705f8989914717371b557a" translate="yes" xml:space="preserve">
          <source>To write standard output to a file, write &lt;code&gt;&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">표준 출력을 파일에 쓰려면 &lt;code&gt;&amp;gt;DESTINATION&lt;/code&gt; 을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="73b0536304b40903244a528081e1fdc688374119" translate="yes" xml:space="preserve">
          <source>To write them on the same line, use the semicolon (&quot;;&quot;). That means the following two examples are equivalent:</source>
          <target state="translated">같은 줄에 쓰려면 세미콜론 ( &quot;;&quot;)을 사용하십시오. 이는 다음 두 가지 예가 동일하다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="8a17b293eb79b591812fbe348e1ab2d33402a845" translate="yes" xml:space="preserve">
          <source>Try hitting tab and see what &lt;code&gt;fish&lt;/code&gt; can do!</source>
          <target state="translated">탭을 치고 &lt;code&gt;fish&lt;/code&gt; 가 무엇을 할 수 있는지보십시오 !</target>
        </trans-unit>
        <trans-unit id="8d92f132378d16ce633195f1d7dbdeb505f95344" translate="yes" xml:space="preserve">
          <source>Turns on Vi key bindings and rebinds</source>
          <target state="translated">Turns on Vi key bindings and rebinds</target>
        </trans-unit>
        <trans-unit id="fb05e0051333734c4ad4030d178c0e59ac5682e1" translate="yes" xml:space="preserve">
          <source>Turns on Vi key bindings and rebinds &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; to clear the input line.</source>
          <target state="translated">Vi 키 바인딩을 켜고 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt; 를 리 바인드 하여 입력 라인을 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="3070b110774237d9cb98c68a71f5c06d6047bf50" translate="yes" xml:space="preserve">
          <source>Type some part of the command, and then hit the</source>
          <target state="translated">Type some part of the command, and then hit the</target>
        </trans-unit>
        <trans-unit id="cddfd60fdd3770f95874832546e909dcebf4b486" translate="yes" xml:space="preserve">
          <source>Type some part of the command, and then hit the &lt;b&gt;&amp;uarr;&lt;/b&gt; or &lt;b&gt;&amp;darr;&lt;/b&gt; arrow keys to navigate through history matches.</source>
          <target state="translated">명령의 일부를 입력 한 다음 &lt;b&gt;&amp;uarr;&lt;/b&gt; 또는 &lt;b&gt;&amp;darr;&lt;/b&gt; 화살표 키를 눌러 기록 일치를 탐색하십시오.</target>
        </trans-unit>
        <trans-unit id="d5c2f3a388810326308a4cf0f9d12d94e467f941" translate="yes" xml:space="preserve">
          <source>Undefined and empty variables expand to nothing.</source>
          <target state="translated">정의되지 않은 빈 변수는 확장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="88ffdf933809d29430e60deaf78422a0ecdd4f5f" translate="yes" xml:space="preserve">
          <source>Undefined and empty variables expand to nothing:</source>
          <target state="translated">Undefined and empty variables expand to nothing:</target>
        </trans-unit>
        <trans-unit id="7f54feaec318be95b0574260bf420fada9f4de3f" translate="yes" xml:space="preserve">
          <source>Unfortunately, there is no way to make the changes take effect at once. You will need to log out and back in again.</source>
          <target state="translated">불행히도 변경 사항을 한 번에 적용 할 방법이 없습니다. 로그 아웃했다가 다시 로그인해야합니다.</target>
        </trans-unit>
        <trans-unit id="145a9952034e76af8265b97c5e75a18c616e70d3" translate="yes" xml:space="preserve">
          <source>Unicode private-use characters reserved by fish</source>
          <target state="translated">물고기가 예약 한 유니 코드 개인용 문자</target>
        </trans-unit>
        <trans-unit id="064f008652b975090f53700094b3a47123206506" translate="yes" xml:space="preserve">
          <source>Uninstalling</source>
          <target state="translated">Uninstalling</target>
        </trans-unit>
        <trans-unit id="e1607dfd6b696cdd21b339099c2b8ec1f42324b3" translate="yes" xml:space="preserve">
          <source>Uninstalling fish</source>
          <target state="translated">물고기 제거</target>
        </trans-unit>
        <trans-unit id="b034e228b90d3e971c38c185d9c173b9fad3cb92" translate="yes" xml:space="preserve">
          <source>Universal Variables</source>
          <target state="translated">범용 변수</target>
        </trans-unit>
        <trans-unit id="2190840d21939e4ef16a5e224733f3d6b3a734aa" translate="yes" xml:space="preserve">
          <source>Universal variables are shared between all fish sessions a user is running on one computer.</source>
          <target state="translated">Universal variables are shared between all fish sessions a user is running on one computer.</target>
        </trans-unit>
        <trans-unit id="0ad651b3b2a50ae7d1ebd0a6ea4647b1fc3c39a6" translate="yes" xml:space="preserve">
          <source>Universal variables are variables that are shared between all the users' fish sessions on the computer. Fish stores many of its configuration options as universal variables. This means that in order to change fish settings, all you have to do is change the variable value once, and it will be automatically updated for all sessions, and preserved across computer reboots and login/logout.</source>
          <target state="translated">범용 변수는 컴퓨터에서 모든 사용자의 피쉬 세션간에 공유되는 변수입니다. Fish는 많은 구성 옵션을 범용 변수로 저장합니다. 즉, 물고기 설정을 변경하려면 변수 값을 한 번만 변경하면 모든 세션에 대해 자동으로 업데이트되며 컴퓨터 재부팅 및 로그인 / 로그 아웃시에도 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="39401ea1c4ee5623e27e3d411fbd0048753b64f9" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;echo#cmd-echo&quot;&gt;echo&lt;/a&gt;, &lt;code&gt;printf&lt;/code&gt; does not append a new line unless it is specified as part of the string.</source>
          <target state="translated">Unlike &lt;a href=&quot;echo#cmd-echo&quot;&gt;echo&lt;/a&gt;, &lt;code&gt;printf&lt;/code&gt; does not append a new line unless it is specified as part of the string.</target>
        </trans-unit>
        <trans-unit id="44adc92f43c50d7e6bc38161bddc8ab76986e3b8" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;echo&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt; does not append a new line unless it is specified as part of the string.</source>
          <target state="translated">달리 &lt;code&gt;echo&lt;/code&gt; , &lt;code&gt;printf&lt;/code&gt; 와는 이 문자열의 일부로 지정되지 않는 한 새로운 라인을 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="80688e6bfe64112d0b40126d6899beb59a720d8b" translate="yes" xml:space="preserve">
          <source>Unlike all other expanions, variable expansion also happens in double quoted strings. Inside double quotes (&lt;code&gt;&quot;these&quot;&lt;/code&gt;), variables will always expand to exactly one argument. If they are empty or undefined, it will result in an empty string. If they have one element, they'll expand to that element. If they have more than that, the elements will be joined with spaces.</source>
          <target state="translated">다른 모든 확장과 달리 변수 확장은 큰 따옴표로 묶인 문자열에서도 발생합니다. 큰 따옴표 ( &lt;code&gt;&quot;these&quot;&lt;/code&gt; ) 내에서 변수는 항상 정확히 하나의 인수로 확장됩니다. 비어 있거나 정의되지 않은 경우 빈 문자열이됩니다. 하나의 요소가 있으면 해당 요소로 확장됩니다. 그것들이 그보다 많으면 요소는 공백으로 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="0e3bff34be4971e66cb5a9ca189eb8aa7a2d3165" translate="yes" xml:space="preserve">
          <source>Unlike all the other expansions, variable expansion also happens in double quoted strings. Inside double quotes (&lt;code&gt;&quot;these&quot;&lt;/code&gt;), variables will always expand to exactly one argument. If they are empty or undefined, it will result in an empty string. If they have one element, they'll expand to that element. If they have more than that, the elements will be joined with spaces &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[3]&lt;/a&gt;.</source>
          <target state="translated">Unlike all the other expansions, variable expansion also happens in double quoted strings. Inside double quotes ( &lt;code&gt;&quot;these&quot;&lt;/code&gt; ), variables will always expand to exactly one argument. If they are empty or undefined, it will result in an empty string. If they have one element, they'll expand to that element. If they have more than that, the elements will be joined with spaces &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[3]&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5f52904d211feb97742834ac23247af488c11ce4" translate="yes" xml:space="preserve">
          <source>Unlike bash or zsh, which will join with the first character of $IFS (which usually is space).</source>
          <target state="translated">Unlike bash or zsh, which will join with the first character of $IFS (which usually is space).</target>
        </trans-unit>
        <trans-unit id="ae2292eead056d06d02e28adb305ab1fa7a4ec35" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have aliases or special prompt syntax. Functions take their place.</source>
          <target state="translated">다른 껍질과 달리 &lt;code&gt;fish&lt;/code&gt; 에는 별칭이나 특수 프롬프트 구문이 없습니다. 기능이 대신합니다.</target>
        </trans-unit>
        <trans-unit id="081f5baca42ff8efaa02caf11115f980ca88911b" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have an export command. Instead, a variable is exported via an option to &lt;code&gt;set&lt;/code&gt;, either &lt;code&gt;--export&lt;/code&gt; or just &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">다른 껍질과 달리 &lt;code&gt;fish&lt;/code&gt; 에는 내보내기 명령이 없습니다. 대신 변수 를 &lt;code&gt;--export&lt;/code&gt; 또는 just &lt;code&gt;-x&lt;/code&gt; &lt;code&gt;set&lt;/code&gt; 옵션을 통해 내 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="c93cd2fd98d2e05971730d3d1461c79fed9ff34c" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; has no dedicated &lt;code&gt;VARIABLE=VALUE&lt;/code&gt; syntax for setting variables. Instead it has an ordinary command: &lt;code&gt;set&lt;/code&gt;, which takes a variable name, and then its value.</source>
          <target state="translated">Unlike other shells, &lt;code&gt;fish&lt;/code&gt; has no dedicated &lt;code&gt;VARIABLE=VALUE&lt;/code&gt; syntax for setting variables. Instead it has an ordinary command: &lt;code&gt;set&lt;/code&gt; , which takes a variable name, and then its value.</target>
        </trans-unit>
        <trans-unit id="eee0d0201f0eeaf8c0900eea9c927bb9f91321d9" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; has no dedicated syntax for setting variables. Instead it has an ordinary command: &lt;code&gt;set&lt;/code&gt;, which takes a variable name, and then its value.</source>
          <target state="translated">다른 껍질과 달리 &lt;code&gt;fish&lt;/code&gt; 에는 변수 설정을위한 전용 구문이 없습니다. 대신 일반적인 명령 : &lt;code&gt;set&lt;/code&gt; 이 있으며 변수 이름과 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="a37e511dd2f26fdeffb3863f66e1a1c929cfac6a" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; stores the exit status of the last command in &lt;code&gt;$status&lt;/code&gt; instead of &lt;code&gt;$?&lt;/code&gt;.</source>
          <target state="translated">다른 쉘과 달리, &lt;code&gt;fish&lt;/code&gt; 는 마지막 명령의 종료 상태 를 &lt;code&gt;$?&lt;/code&gt; 대신 &lt;code&gt;$status&lt;/code&gt; 저장 합니까? .</target>
        </trans-unit>
        <trans-unit id="7b32ed8b459e8fdb8746d6d876427a9d1b6ee4f5" translate="yes" xml:space="preserve">
          <source>Unlike other shells, fish does not follow the POSIX standard, but still roughly belongs to the same family.</source>
          <target state="translated">Unlike other shells, fish does not follow the POSIX standard, but still roughly belongs to the same family.</target>
        </trans-unit>
        <trans-unit id="3af21d9e6a82afb93e7644e0365cdc2669f846f5" translate="yes" xml:space="preserve">
          <source>Unlike other shells, fish does not split command substitutions on any whitespace (like spaces or tabs), only newlines. This can be an issue with commands like &lt;code&gt;pkg-config&lt;/code&gt; that print what is meant to be multiple arguments on a single line. To split it on spaces too, use &lt;code&gt;string split&lt;/code&gt;.</source>
          <target state="translated">다른 쉘과 달리 물고기는 공백이나 탭과 같은 공백에서 명령 대체를 나누지 않고 줄 바꿈 만합니다. &lt;code&gt;pkg-config&lt;/code&gt; 와 같은 명령 에서 한 줄에 여러 개의 인수가있는 것을 인쇄 하는 문제 일 수 있습니다 . 공백으로 나누려면 &lt;code&gt;string split&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="51633ed047475ca6ce896f07a0b3e652915476f4" translate="yes" xml:space="preserve">
          <source>Unlike other shells, fish splits command substitutions only on newlines, not spaces or tabs or the characters in $IFS.</source>
          <target state="translated">다른 쉘과 달리 fish는 공백이나 탭 또는 $ IFS의 문자가 아닌 개행에서만 명령 대체를 분할합니다.</target>
        </trans-unit>
        <trans-unit id="2e36f8ffbac36ebebd737db0d45fea3f73bea9ee" translate="yes" xml:space="preserve">
          <source>Unlike other shells, there is no prompt variable like PS1. To display your prompt, &lt;code&gt;fish&lt;/code&gt; executes a function with the name &lt;code&gt;fish_prompt&lt;/code&gt;, and its output is used as the prompt.</source>
          <target state="translated">다른 쉘과 달리 PS1과 같은 프롬프트 변수는 없습니다. 프롬프트를 표시하기 위해 &lt;code&gt;fish&lt;/code&gt; 는 이름이 &lt;code&gt;fish_prompt&lt;/code&gt; 인 함수를 실행 하고 출력이 프롬프트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="dd1f16e81556a309c131d3f6b2ba87b84eb31d62" translate="yes" xml:space="preserve">
          <source>Unlike other shells, variables are not further split after substitution:</source>
          <target state="translated">다른 쉘과 달리 변수는 대체 후에 더 이상 분할되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27a7218e7200aa5a5b2c21c7cbda05b64fb08261" translate="yes" xml:space="preserve">
          <source>Up-to-date instructions for installing the latest version of fish are on the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish homepage&lt;/a&gt;.</source>
          <target state="translated">Up-to-date instructions for installing the latest version of fish are on the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish homepage&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="4df13ec4234f96a6f1f82fccdde77669b4c4b95c" translate="yes" xml:space="preserve">
          <source>Usage Notes</source>
          <target state="translated">사용법 메모</target>
        </trans-unit>
        <trans-unit id="d74b204180b301da11db45838e08032a0d957c03" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; to conditionally execute code, based on the exit status of a command.</source>
          <target state="translated">사용 &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;else if&lt;/code&gt; , 그리고 &lt;code&gt;else&lt;/code&gt; 조건 명령의 종료 상태에 따라 코드를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="108a282c00d77f98c72d6adf4d5999958ce383fa" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;set -q var&lt;/code&gt;. For example, &lt;code&gt;if set -q var; echo variable defined; end&lt;/code&gt;. To check multiple variables you can combine with &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; like so:</source>
          <target state="translated">Use &lt;code&gt;set -q var&lt;/code&gt; . For example, &lt;code&gt;if set -q var; echo variable defined; end&lt;/code&gt; . To check multiple variables you can combine with &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; like so:</target>
        </trans-unit>
        <trans-unit id="6dc9bc84b4664e85759bf6a7633886e92ee18b38" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;string length -q -- $var&lt;/code&gt;. For example, &lt;code&gt;if string length -q -- $var; echo not empty; end&lt;/code&gt;. Note that &lt;code&gt;string length&lt;/code&gt; will interpret a list of multiple variables as a disjunction (meaning any/or):</source>
          <target state="translated">Use &lt;code&gt;string length -q -- $var&lt;/code&gt; . For example, &lt;code&gt;if string length -q -- $var; echo not empty; end&lt;/code&gt; . Note that &lt;code&gt;string length&lt;/code&gt; will interpret a list of multiple variables as a disjunction (meaning any/or):</target>
        </trans-unit>
        <trans-unit id="eb181080b44029a3622b4ef5a70c42d2deefdef1" translate="yes" xml:space="preserve">
          <source>Use one of the following switches to specify which resource limit to set or report:</source>
          <target state="translated">다음 스위치 중 하나를 사용하여 설정하거나보고 할 자원 제한을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="45aae1640bb0c8033b0670dc7821136944d847a9" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cmds/fish_update_completions#cmd-fish-update-completions&quot;&gt;fish_update_completions&lt;/a&gt; command.</source>
          <target state="translated">Use the &lt;a href=&quot;cmds/fish_update_completions#cmd-fish-update-completions&quot;&gt;fish_update_completions&lt;/a&gt; command.</target>
        </trans-unit>
        <trans-unit id="d2e2435dd203f22f6f5597c3e5d8b337148d2b6b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; command:</source>
          <target state="translated">Use the &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; command:</target>
        </trans-unit>
        <trans-unit id="454bd477b983f01843d0ef8db935e66528a0a530" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;commands#fish_update_completions&quot;&gt;&lt;code&gt;fish_update_completions&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;commands#fish_update_completions&quot;&gt; &lt;code&gt;fish_update_completions&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="173607f929222a6b2423c5f7cb2482dcefe3fd4d" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a070d11e8f9357b2f82f012cf1cbf197f82d8186" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$status&lt;/code&gt; variable. This replaces the &lt;code&gt;$?&lt;/code&gt; variable used in some other shells.</source>
          <target state="translated">&lt;code&gt;$status&lt;/code&gt; 변수를 사용하십시오 . 이것은 &lt;code&gt;$?&lt;/code&gt; 를 대체합니다 . 다른 쉘에서 사용되는 변수.</target>
        </trans-unit>
        <trans-unit id="31c238ddde1e3a389d384b0e3b72354aef7e4403" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;env&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="19216cc5cccec81a7c79d4e99fdb1faede39febc" translate="yes" xml:space="preserve">
          <source>Use the web configuration tool, &lt;a href=&quot;cmds/fish_config#cmd-fish-config&quot;&gt;fish_config&lt;/a&gt;, or alter the &lt;a href=&quot;index#variables-color&quot;&gt;fish_color family of environment variables&lt;/a&gt;.</source>
          <target state="translated">Use the web configuration tool, &lt;a href=&quot;cmds/fish_config#cmd-fish-config&quot;&gt;fish_config&lt;/a&gt;, or alter the &lt;a href=&quot;index#variables-color&quot;&gt;fish_color family of environment variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0411e393ae78c9f8172fc0b2dbacdfcc91e4286c" translate="yes" xml:space="preserve">
          <source>Use the web configuration tool, &lt;a href=&quot;commands#fish_config&quot;&gt;&lt;code&gt;fish_config&lt;/code&gt;&lt;/a&gt;, or alter the &lt;a href=&quot;index#variables-color&quot;&gt;&lt;code&gt;fish_color&lt;/code&gt; family of environment variables&lt;/a&gt;.</source>
          <target state="translated">웹 구성 도구 인 &lt;a href=&quot;commands#fish_config&quot;&gt; &lt;code&gt;fish_config&lt;/code&gt; &lt;/a&gt; 를 사용하거나 &lt;a href=&quot;index#variables-color&quot;&gt; &lt;code&gt;fish_color&lt;/code&gt; 환경 변수 제품군을&lt;/a&gt; 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="60f35ccc6241ede38ff1ff41aa11e4d625890b21" translate="yes" xml:space="preserve">
          <source>Use them without a leading &lt;code&gt;$&lt;/code&gt; - &lt;code&gt;pi - 3&lt;/code&gt; should be about 0.</source>
          <target state="translated">선도적없이 사용 &lt;code&gt;$&lt;/code&gt; - &lt;code&gt;pi - 3&lt;/code&gt; 0에 대해해야합니다.</target>
        </trans-unit>
        <trans-unit id="0cae9ed3f91cf8ab384b29a4865d0861615ac352" translate="yes" xml:space="preserve">
          <source>Useful functions for writing completions</source>
          <target state="translated">작성 완료를위한 유용한 기능</target>
        </trans-unit>
        <trans-unit id="da533743f0159eea920a315a90c8751cf23609aa" translate="yes" xml:space="preserve">
          <source>User initialization, usually in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable, and accessible as &lt;code&gt;$__fish_config_dir&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 에서 사용자 초기화 ( &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 환경 변수로 제어되며 &lt;code&gt;$__fish_config_dir&lt;/code&gt; 로 액세스 가능 )</target>
        </trans-unit>
        <trans-unit id="7ab03bad0e4c29694da24c66d0dfd6218d876cd9" translate="yes" xml:space="preserve">
          <source>Using another read history file</source>
          <target state="translated">다른 읽기 이력 파일 사용</target>
        </trans-unit>
        <trans-unit id="b73b7dbea87b71c6a8e64d7b592b0efded7f191c" translate="yes" xml:space="preserve">
          <source>Using the &lt;em&gt;normal&lt;/em&gt; keyword will reset both background and foreground colors to whatever is the default for the terminal.</source>
          <target state="translated">&lt;em&gt;normal&lt;/em&gt; 키워드를 사용하면 배경색과 전경색이 모두 터미널 기본값으로 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="01391f93ace379e5306ef34014cfa60be33aafe9" translate="yes" xml:space="preserve">
          <source>Using the &lt;em&gt;normal&lt;/em&gt; keyword will reset foreground, background, and all formatting back to default.</source>
          <target state="translated">&lt;em&gt;normal&lt;/em&gt; 키워드를 사용하면 전경, 배경 및 모든 형식이 기본값으로 다시 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="f3b2ac121de4ce08e07778437bf30ed6cd6b55da" translate="yes" xml:space="preserve">
          <source>Using this command involves passing two sets of arguments separated by &lt;code&gt;--&lt;/code&gt;. The first set consists of one or more option specifications (&lt;code&gt;OPTION_SPEC&lt;/code&gt; above) and options that modify the behavior of &lt;code&gt;argparse&lt;/code&gt;. These must be listed before the &lt;code&gt;--&lt;/code&gt; argument. The second set are the arguments to be parsed in accordance with the option specifications. They occur after the &lt;code&gt;--&lt;/code&gt; argument and can be empty. More about this below but here is a simple example that might be used in a function named &lt;code&gt;my_function&lt;/code&gt;:</source>
          <target state="translated">이 명령을 사용하려면 &lt;code&gt;--&lt;/code&gt; 구분 된 두 개의 인수 집합을 전달해야합니다 . 첫 번째 세트는 하나 이상의 옵션 사양 ( 위의 &lt;code&gt;OPTION_SPEC&lt;/code&gt; )과 &lt;code&gt;argparse&lt;/code&gt; 의 동작을 수정하는 옵션으로 구성 됩니다. &lt;code&gt;--&lt;/code&gt; 인수 앞에 나열해야합니다 . 두 번째 세트는 옵션 사양에 따라 구문 분석 할 인수입니다. &lt;code&gt;--&lt;/code&gt; 인수 다음에 발생 하며 비어있을 수 있습니다. 아래에 더 자세히 설명되어 있지만 &lt;code&gt;my_function&lt;/code&gt; 이라는 함수에서 사용될 수있는 간단한 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="51b1cbfccd14dad0695dab4a0b955e7d4e87a713" translate="yes" xml:space="preserve">
          <source>Using this command requires first passing option specifications (&lt;code&gt;OPTION_SPEC&lt;/code&gt; below), then a mandatory &lt;code&gt;--&lt;/code&gt;, and then the arguments you want to have parsed. More about this below but here is a simple example that might be used in a function named &lt;code&gt;my_function&lt;/code&gt;:</source>
          <target state="translated">Using this command requires first passing option specifications ( &lt;code&gt;OPTION_SPEC&lt;/code&gt; below), then a mandatory &lt;code&gt;--&lt;/code&gt; , and then the arguments you want to have parsed. More about this below but here is a simple example that might be used in a function named &lt;code&gt;my_function&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f09d5d78e534ac9eee0414d7d7a0fb24af84d370" translate="yes" xml:space="preserve">
          <source>Valid colors include:</source>
          <target state="translated">유효한 색상은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="95b8e49e0a4f7e7d23df31b6c1eedc2a79d60c67" translate="yes" xml:space="preserve">
          <source>Valid format specifiers are:</source>
          <target state="translated">유효한 형식 지정자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="047ea2f72ce834a5cd86fc46331f14acbb3f9954" translate="yes" xml:space="preserve">
          <source>Variable expansion</source>
          <target state="translated">변수 확장</target>
        </trans-unit>
        <trans-unit id="e2eb91d2e9dd9d2efdc78a2c535e066657ae307e" translate="yes" xml:space="preserve">
          <source>Variable expansions</source>
          <target state="translated">변수 확장</target>
        </trans-unit>
        <trans-unit id="69cd2e4d36065246c043d32da81f65b5ec76feab" translate="yes" xml:space="preserve">
          <source>Variable scope</source>
          <target state="translated">변수 범위</target>
        </trans-unit>
        <trans-unit id="f2ffbf1cf26a2aeca0a92264405ee06ceed33e13" translate="yes" xml:space="preserve">
          <source>Variable scope for functions</source>
          <target state="translated">함수의 변수 범위</target>
        </trans-unit>
        <trans-unit id="1c4d8bc4b1983936a6ea4c98c958dd234c9b54b7" translate="yes" xml:space="preserve">
          <source>Variable substitution also happens in double quotes, but not single quotes:</source>
          <target state="translated">Variable substitution also happens in double quotes, but not single quotes:</target>
        </trans-unit>
        <trans-unit id="d3800988cc67ea9f9ae70495ad31314d7a633d64" translate="yes" xml:space="preserve">
          <source>Variable substitution also occurs in double quotes, but not single quotes:</source>
          <target state="translated">변수 대체는 큰 따옴표로도 이루어 지지만 작은 따옴표는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="dc55a791f0556b1e2c98faf060801c75b48b8e87" translate="yes" xml:space="preserve">
          <source>Variables can be explicitly set to be exported with the &lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--export&lt;/code&gt; switch, or not exported with the &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--unexport&lt;/code&gt; switch. The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">변수는 &lt;code&gt;-x&lt;/code&gt; 또는 &lt;code&gt;--export&lt;/code&gt; 스위치를 사용하여 내보내 거나 &lt;code&gt;-u&lt;/code&gt; 또는 &lt;code&gt;--unexport&lt;/code&gt; 스위치를 사용하여 내 보내지 않도록 명시 적으로 설정할 수 있습니다 . 변수를 만들거나 업데이트 할 때 내보내기 규칙은 변수의 범위 지정 규칙과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="8ac80efa95f2325126bc3cfe367407edf15a59e1" translate="yes" xml:space="preserve">
          <source>Variables can be explicitly set to be exported with the &lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--export&lt;/code&gt; switch, or not exported with the &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--unexport&lt;/code&gt; switch. The exporting rules when setting a variable are identical to the scoping rules for variables:</source>
          <target state="translated">Variables can be explicitly set to be exported with the &lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--export&lt;/code&gt; switch, or not exported with the &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--unexport&lt;/code&gt; switch. The exporting rules when setting a variable are identical to the scoping rules for variables:</target>
        </trans-unit>
        <trans-unit id="8caf7a3931edf651d5c0eb5b032760d30623081d" translate="yes" xml:space="preserve">
          <source>Variables can be explicitly set to be universal with the &lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; switch, global with the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; switch, or local with the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; switch. The scoping rules when creating or updating a variable are:</source>
          <target state="translated">변수는 &lt;code&gt;-U&lt;/code&gt; 또는 &lt;code&gt;--universal&lt;/code&gt; 스위치를 사용하여 범용으로 설정 하거나 &lt;code&gt;-g&lt;/code&gt; 또는 &lt;code&gt;--global&lt;/code&gt; 스위치를 사용하여 전역 으로 설정 하거나 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--local&lt;/code&gt; 스위치를 사용하여 로컬 로 명시 적으로 설정할 수 있습니다 . 변수를 만들거나 업데이트 할 때 범위 지정 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="866a24aa0e9eb8db8b30498e951c623e32e65a14" translate="yes" xml:space="preserve">
          <source>Variables can be marked or unmarked as PATH variables via the &lt;code&gt;--path&lt;/code&gt; and &lt;code&gt;--unpath&lt;/code&gt; options to &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">변수는 마크 또는 경로 비아 변수가 해제 될 수 &lt;code&gt;--path&lt;/code&gt; 및 &lt;code&gt;--unpath&lt;/code&gt; 에 옵션 &lt;code&gt;set&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81a1e4b50937d575e7941efe7d24b3e8887251ba" translate="yes" xml:space="preserve">
          <source>Variables can be used as indices for expansion of variables, like so:</source>
          <target state="translated">변수는 다음과 같이 변수 확장을위한 지표로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d13d8872f2b85622ec05b4faa321ef701163466e" translate="yes" xml:space="preserve">
          <source>Variables for changing highlighting colors</source>
          <target state="translated">강조 색상 변경을위한 변수</target>
        </trans-unit>
        <trans-unit id="cf5cb5ba71a4fd59ff58e3f49fbe8b665f5f8f17" translate="yes" xml:space="preserve">
          <source>Variables in fish can be &quot;exported&quot;, so they will be inherited by any commands started by fish. In particular, this is necessary for variables used to configure external commands like $LESS or $GOPATH, but also for variables that contain general system settings like $PATH or $LANGUAGE. If an external command needs to know a variable, it needs to be exported.</source>
          <target state="translated">Variables in fish can be &quot;exported&quot;, so they will be inherited by any commands started by fish. In particular, this is necessary for variables used to configure external commands like $LESS or $GOPATH, but also for variables that contain general system settings like $PATH or $LANGUAGE. If an external command needs to know a variable, it needs to be exported.</target>
        </trans-unit>
        <trans-unit id="021a38b749711c430ab7b97416e1e7f42bc63ab2" translate="yes" xml:space="preserve">
          <source>Variables in fish can be exported. This means the variable will be inherited by any commands started by fish. It is convention that exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="translated">물고기의 변수를 내보낼 수 있습니다. 이는 변수가 물고기에 의해 시작된 모든 명령에 의해 상속됨을 의미합니다. 반출 된 변수는 대문자이고 반출되지 않은 변수는 소문자 인 것이 관례입니다.</target>
        </trans-unit>
        <trans-unit id="8b7277f6927f4830af2060ea99b89d5f43313327" translate="yes" xml:space="preserve">
          <source>Variables may be explicitly set to either exported or not exported. When an exported variable goes out of scope, it is unexported.</source>
          <target state="translated">변수는 명시 적으로 내보내거나 내 보내지 않도록 설정할 수 있습니다. 내 보낸 변수가 범위를 벗어나면 내 보내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5daf675f51e0dc0a7ce5d91db9146d3208ab170c" translate="yes" xml:space="preserve">
          <source>Variables may be explicitly set to universal, global or local. Variables with the same name in different scopes will not be changed.</source>
          <target state="translated">변수는 명시 적으로 범용, 전역 또는 로컬로 설정 될 수 있습니다. 다른 범위에서 같은 이름을 가진 변수는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6157bb7cb8dc60c929867f3959fa45a42b0b66e6" translate="yes" xml:space="preserve">
          <source>Variables used with &lt;code&gt;showdirtystate&lt;/code&gt;:</source>
          <target state="translated">Variables used with &lt;code&gt;showdirtystate&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ef4776413d8eceb0904e12541e0663214353773d" translate="yes" xml:space="preserve">
          <source>Variables used with &lt;code&gt;showstashstate&lt;/code&gt;:</source>
          <target state="translated">Variables used with &lt;code&gt;showstashstate&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4cfcdb16da7b699c8fff0c64400681e88e4e3605" translate="yes" xml:space="preserve">
          <source>Variables used with &lt;code&gt;showuntrackedfiles&lt;/code&gt;:</source>
          <target state="translated">Variables used with &lt;code&gt;showuntrackedfiles&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6de092ce093e173164195e54b6efb764d4954705" translate="yes" xml:space="preserve">
          <source>Variables used with &lt;code&gt;showupstream&lt;/code&gt; (also implied by informative status):</source>
          <target state="translated">Variables used with &lt;code&gt;showupstream&lt;/code&gt; (also implied by informative status):</target>
        </trans-unit>
        <trans-unit id="4a88384607868c891caaae0411d761359e4f6ef5" translate="yes" xml:space="preserve">
          <source>Variables whose name are in uppercase are generally exported to the commands started by fish, while those in lowercase are not exported (&lt;code&gt;CMD_DURATION&lt;/code&gt; is an exception, for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables. &lt;code&gt;fish&lt;/code&gt; also uses several variables internally. Such variables are prefixed with the string &lt;code&gt;__FISH&lt;/code&gt; or &lt;code&gt;__fish.&lt;/code&gt; These should never be used by the user. Changing their value may break fish.</source>
          <target state="translated">이름이 대문자 인 변수는 일반적으로 fish가 시작한 명령으로 내보내 &lt;code&gt;CMD_DURATION&lt;/code&gt; 소문자의 변수 는 내 보내지 않습니다 ( 이력 상의 이유로 CMD_DURATION 은 예외입니다). 이 규칙은 물고기에 의해 시행되지는 않지만, 케이싱을 사용하여 내 보낸 변수와 내 보내지 않은 변수를 구별하는 것이 좋습니다. &lt;code&gt;fish&lt;/code&gt; 는 내부적으로 여러 변수를 사용합니다. 이러한 변수 앞에는 &lt;code&gt;__FISH&lt;/code&gt; 또는 &lt;code&gt;__fish.&lt;/code&gt; 문자열이 붙 습니다. 이것들은 사용자가 사용해서는 안됩니다. 가치를 바꾸면 물고기가 깨질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="853f836630af91eac92770e4898f6104b87fc93e" translate="yes" xml:space="preserve">
          <source>Variables whose name ends in &quot;PATH&quot; are automatically split on colons to become lists. They are joined using colons when exported to subcommands. This is for compatibility with other tools, which expect $PATH to use colons. You can also explicitly add this quirk to a variable with &lt;code&gt;set --path&lt;/code&gt;, or remove it with &lt;code&gt;set --unpath&lt;/code&gt;.</source>
          <target state="translated">Variables whose name ends in &quot;PATH&quot; are automatically split on colons to become lists. They are joined using colons when exported to subcommands. This is for compatibility with other tools, which expect $PATH to use colons. You can also explicitly add this quirk to a variable with &lt;code&gt;set --path&lt;/code&gt; , or remove it with &lt;code&gt;set --unpath&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0b225df5832ecdff22ce23cfde4211441ed77c95" translate="yes" xml:space="preserve">
          <source>Vi mode allows for the use of Vi-like commands at the prompt. Initially, &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; is active.</source>
          <target state="translated">Vi mode allows for the use of Vi-like commands at the prompt. Initially, &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; is active.</target>
        </trans-unit>
        <trans-unit id="8de6cda0a76daf29c82a8e5cb8b2ed185cd03414" translate="yes" xml:space="preserve">
          <source>Vi mode allows for the use of Vi-like commands at the prompt. Initially, &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; is active. &lt;b&gt;Escape&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;. The commands available in command, insert and visual mode are described below. Vi mode shares &lt;a href=&quot;#shared-binds&quot;&gt;some bindings&lt;/a&gt; with &lt;a href=&quot;#emacs-mode&quot;&gt;Emacs mode&lt;/a&gt;.</source>
          <target state="translated">Vi 모드는 프롬프트에서 Vi 유사 명령을 사용할 수있게합니다. 처음에는 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드&lt;/a&gt; 가 활성화되어 있습니다. &lt;b&gt;이스케이프 &lt;/b&gt;&lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드&lt;/a&gt; 로 들어갑니다 . 명령, 삽입 및 시각적 모드에서 사용 가능한 명령이 아래에 설명되어 있습니다. Vi 모드는 &lt;a href=&quot;#emacs-mode&quot;&gt;Emacs 모드&lt;/a&gt; 와 &lt;a href=&quot;#shared-binds&quot;&gt;일부 바인딩&lt;/a&gt; 을 공유 합니다 .</target>
        </trans-unit>
        <trans-unit id="fc7edfc16e4d70682dbbf7a6226979a31fd0ad3e" translate="yes" xml:space="preserve">
          <source>Vi mode commands</source>
          <target state="translated">Vi 모드 명령</target>
        </trans-unit>
        <trans-unit id="5fb895569dd30157f331b4727bbce633510ff8ba" translate="yes" xml:space="preserve">
          <source>Visual mode</source>
          <target state="translated">시각 모드</target>
        </trans-unit>
        <trans-unit id="31e1f6a5be94b9a7630dae992d9a626fc08b6ea1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arguments&lt;/code&gt; is specified in conjunction with long, short, or old style options, the specified arguments are only used as completions when attempting to complete an argument for any of the specified options. If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arguments&lt;/code&gt; is specified without any long, short, or old style options, the specified arguments are used when completing any argument to the command (except when completing an option argument that was specified with &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--require-parameter&lt;/code&gt;).</source>
          <target state="translated">때 &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--arguments&lt;/code&gt; 가 긴, 짧은, 또는 오래된 스타일 옵션과 함께 지정되어 지정된 옵션에 대한 인수를 완료 할 때, 지정된 인수는 완료로 사용된다. 경우 &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--arguments&lt;/code&gt; 이 지정되었습니다 옵션 인수를 완료 한 경우를 제외하고 명령 (에 대한 인수를 완료 할 때 긴, 짧은 또는 이전 스타일 옵션, 지정된 인수가 사용되는 모든없이 지정 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--require-parameter&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2505ca259992c20f2e115bd87371ef8405dc9f79" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;COMMAND&lt;/code&gt; is a shellscript command, it is a good practice to put the actual code into a &lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt; and simply bind to the function name. This way it becomes significantly easier to test the function while editing, and the result is usually more readable as well.</source>
          <target state="translated">때 &lt;code&gt;COMMAND&lt;/code&gt; 는 쉘 스크립트 명령은, 그것은으로 실제 코드를 삽입 할 수있는 좋은 연습입니다 &lt;a href=&quot;#function&quot;&gt;기능&lt;/a&gt; 함수 이름에 간단하게 결합하고. 이런 식으로 편집하는 동안 기능을 테스트하기가 훨씬 쉬워지며 결과는 일반적으로 더 읽기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="0b61f14b6442d9d89b8d8fa699d95bbd93af2c25" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fish&lt;/code&gt; encounters a command, it attempts to autoload a function for that command, by looking for a file with the name of that command in &lt;code&gt;~/.config/fish/functions/&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;fish&lt;/code&gt; 명령을 발견, 그것은에서 해당 명령의 이름을 가진 파일을 찾아서, 그 명령에 대한 기능을 자동로드를 시도 &lt;code&gt;~/.config/fish/functions/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="80ac01474d96293d4e91964bb2b3037356d135af" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;read&lt;/code&gt; reaches the end-of-file (EOF) instead of the terminator, the exit status is set to 1. Otherwise, it is set to 0.</source>
          <target state="translated">때 &lt;code&gt;read&lt;/code&gt; 에 도달이 파일 끝 (EOF) 대신 터미네이터, 종료 상태가 그렇지 않으면 1로 설정되고, 그것은 0으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="ebaf9d7ac09afd535047a8b280fbd90932197978" translate="yes" xml:space="preserve">
          <source>When a binding switches the mode, it will repaint the mode-prompt if it exists, and the rest of the prompt only if it doesn't. So if you want a mode-indicator in your &lt;code&gt;fish_prompt&lt;/code&gt;, you need to erase &lt;code&gt;fish_mode_prompt&lt;/code&gt; e.g. by adding an empty file at &lt;code&gt;~/.config/fish/functions/fish_mode_prompt.fish&lt;/code&gt;. (Bindings that change the mode are supposed to call the &lt;code&gt;repaint-mode&lt;/code&gt; bind function, see &lt;a href=&quot;cmds/bind#cmd-bind&quot;&gt;bind&lt;/a&gt;)</source>
          <target state="translated">When a binding switches the mode, it will repaint the mode-prompt if it exists, and the rest of the prompt only if it doesn't. So if you want a mode-indicator in your &lt;code&gt;fish_prompt&lt;/code&gt; , you need to erase &lt;code&gt;fish_mode_prompt&lt;/code&gt; e.g. by adding an empty file at &lt;code&gt;~/.config/fish/functions/fish_mode_prompt.fish&lt;/code&gt; . (Bindings that change the mode are supposed to call the &lt;code&gt;repaint-mode&lt;/code&gt; bind function, see &lt;a href=&quot;cmds/bind#cmd-bind&quot;&gt;bind&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="c5deab83f1aa4307699eab19cce4565571b41d48" translate="yes" xml:space="preserve">
          <source>When a command exits, it returns a status code as a natural number. This indicates how the command fared - 0 usually means success, while the others signify kinds of failure. For instance fish's &lt;code&gt;set --query&lt;/code&gt; returns the number of variables it queried that weren't set - &lt;code&gt;set --query PATH&lt;/code&gt; usually returns 0, &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; usually returns 2.</source>
          <target state="translated">When a command exits, it returns a status code as a natural number. This indicates how the command fared - 0 usually means success, while the others signify kinds of failure. For instance fish's &lt;code&gt;set --query&lt;/code&gt; returns the number of variables it queried that weren't set - &lt;code&gt;set --query PATH&lt;/code&gt; usually returns 0, &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; usually returns 2.</target>
        </trans-unit>
        <trans-unit id="f91db4fb609ae3c10e05da51ef90890379f33f5d" translate="yes" xml:space="preserve">
          <source>When a command lookup fails</source>
          <target state="translated">명령 조회가 실패한 경우</target>
        </trans-unit>
        <trans-unit id="2d9a5ca6f11575f0e22287a0ddafbd99b32a0053" translate="yes" xml:space="preserve">
          <source>When a list is exported as an environment variable, it is either space or colon delimited, depending on whether it is a path variable:</source>
          <target state="translated">When a list is exported as an environment variable, it is either space or colon delimited, depending on whether it is a path variable:</target>
        </trans-unit>
        <trans-unit id="a64df52b82b6680cee5d07a9157923c1c477f30d" translate="yes" xml:space="preserve">
          <source>When a process or job exits</source>
          <target state="translated">프로세스 또는 작업이 종료 될 때</target>
        </trans-unit>
        <trans-unit id="1b00bfa449d40b6151effb4cc0facd22af7b0736" translate="yes" xml:space="preserve">
          <source>When a signal is delivered</source>
          <target state="translated">신호가 전달 될 때</target>
        </trans-unit>
        <trans-unit id="3f06f0c49199bffd6092463385d2eaaf34e91888" translate="yes" xml:space="preserve">
          <source>When all arguments are valid job specifiers, bg will background all matching jobs that exist.</source>
          <target state="translated">모든 인수가 유효한 작업 지정자 인 경우 bg는 존재하는 일치하는 모든 작업을 백그라운드로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="24bda0993bf1f284e0377d7559e36d7befb31f8a" translate="yes" xml:space="preserve">
          <source>When an argument for a program is given on the commandline, it undergoes the process of parameter expansion before it is sent on to the command. Parameter expansion is a powerful mechanism that allows you to expand the parameter in various ways, including performing wildcard matching on files, inserting the value of a shell variable into the parameter or even using the output of another command as a parameter list.</source>
          <target state="translated">프로그램에 대한 인수가 명령 행에 제공되면 명령으로 전송되기 전에 매개 변수 확장 프로세스를 거칩니다. 매개 변수 확장은 파일에서 와일드 카드 일치 수행, 쉘 변수의 값을 매개 변수에 삽입 또는 다른 명령의 출력을 매개 변수 목록으로 사용하는 등 다양한 방법으로 매개 변수를 확장 할 수있는 강력한 메커니즘입니다.</target>
        </trans-unit>
        <trans-unit id="51d4ef16c4e522527f31c576578d19308f006fec" translate="yes" xml:space="preserve">
          <source>When an array is exported as an environment variable, it is either space or colon delimited, depending on whether it is a path variable:</source>
          <target state="translated">배열을 환경 변수로 내 보내면 경로 변수인지 여부에 따라 공백 또는 콜론으로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="083625467bc7bf4cd25dc54b2e5d0f68812dc076" translate="yes" xml:space="preserve">
          <source>When at least one of the arguments isn't a valid job specifier (i.e. PID), &lt;code&gt;bg&lt;/code&gt; will print an error without backgrounding anything.</source>
          <target state="translated">인수 중 하나 이상이 유효한 작업 지정자 (예 : PID)가 아닌 경우 &lt;code&gt;bg&lt;/code&gt; 는 배경을 지정하지 않고 오류를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="a37e1f3259f6cdbb079115ac56119f8c19560a48" translate="yes" xml:space="preserve">
          <source>When calling a function, all current local variables temporarily disappear. This shadowing of the local scope is needed since the variable namespace would become cluttered, making it very easy to accidentally overwrite variables from another function.</source>
          <target state="translated">함수를 호출하면 모든 현재 지역 변수가 일시적으로 사라집니다. 변수 네임 스페이스가 복잡 해져서 다른 함수에서 실수로 변수를 덮어 쓰기가 쉬워 지므로 로컬 범위의 그림자가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="15eb860b17777aaad36a975023e7f241c10c68cb" translate="yes" xml:space="preserve">
          <source>When combining multiple parameter expansions, expansions are performed in the following order:</source>
          <target state="translated">여러 매개 변수 확장을 결합 할 때 다음 순서로 확장이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="8f30248e782192746e24f20cbd06bf81e9f75b5d" translate="yes" xml:space="preserve">
          <source>When defining a new function in fish, it is possible to make it into an event handler, i.e. a function that is automatically run when a specific event takes place. Events that can trigger a handler currently are:</source>
          <target state="translated">피쉬에서 새로운 함수를 정의 할 때,이를 이벤트 핸들러로 만들 수 있습니다. 즉 특정 이벤트가 발생할 때 자동으로 실행되는 함수입니다. 현재 핸들러를 트리거 할 수있는 이벤트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c06a76c81fd354d96a91e2098cf33daa64c9b259" translate="yes" xml:space="preserve">
          <source>When erasing completions, it is possible to either erase all completions for a specific command by specifying &lt;code&gt;complete -c COMMAND -e&lt;/code&gt;, or by specifying a specific completion option to delete by specifying either a long, short or old style option.</source>
          <target state="translated">완료를 지울 때 &lt;code&gt;complete -c COMMAND -e&lt;/code&gt; 를 지정하여 특정 명령에 대한 모든 완료를 지우 거나 long, short 또는 old 스타일 옵션을 지정하여 삭제할 특정 완료 옵션을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4dad5f646fc001ede17833fac982c33a1376fdb6" translate="yes" xml:space="preserve">
          <source>When fish needs to load a function, it searches through any directories in the list variable &lt;code&gt;$fish_function_path&lt;/code&gt; for a file with a name consisting of the name of the function plus the suffix '&lt;code&gt;.fish&lt;/code&gt;' and loads the first it finds.</source>
          <target state="translated">When fish needs to load a function, it searches through any directories in the list variable &lt;code&gt;$fish_function_path&lt;/code&gt; for a file with a name consisting of the name of the function plus the suffix ' &lt;code&gt;.fish&lt;/code&gt; ' and loads the first it finds.</target>
        </trans-unit>
        <trans-unit id="7cfa7c432a41b5485592c13762493a4673cef3a6" translate="yes" xml:space="preserve">
          <source>When fish waits for input, it will display a prompt by evaluating the &lt;code&gt;fish_prompt&lt;/code&gt; and &lt;code&gt;fish_right_prompt&lt;/code&gt; functions. The output of the former is displayed on the left and the latter's output on the right side of the terminal. The output of &lt;code&gt;fish_mode_prompt&lt;/code&gt; will be prepended on the left, though the default function only does this when in &lt;a href=&quot;#vi-mode&quot;&gt;vi-mode&lt;/a&gt;.</source>
          <target state="translated">When fish waits for input, it will display a prompt by evaluating the &lt;code&gt;fish_prompt&lt;/code&gt; and &lt;code&gt;fish_right_prompt&lt;/code&gt; functions. The output of the former is displayed on the left and the latter's output on the right side of the terminal. The output of &lt;code&gt;fish_mode_prompt&lt;/code&gt; will be prepended on the left, though the default function only does this when in &lt;a href=&quot;#vi-mode&quot;&gt;vi-mode&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="71562657ada1f73f1b73dd5722b7668b06f50100" translate="yes" xml:space="preserve">
          <source>When fish waits for input, it will display a prompt by evaluating the &lt;code&gt;fish_prompt&lt;/code&gt; and &lt;code&gt;fish_right_prompt&lt;/code&gt; functions. The output of the former is displayed on the left and the latter's output on the right side of the terminal. The output of &lt;code&gt;fish_mode_prompt&lt;/code&gt; will be prepended on the left, though the default function only does this when in &lt;a href=&quot;index#vi-mode&quot;&gt;vi-mode&lt;/a&gt;.</source>
          <target state="translated">물고기가 입력을 &lt;code&gt;fish_prompt&lt;/code&gt; 및 &lt;code&gt;fish_right_prompt&lt;/code&gt; 기능 을 평가하여 프롬프트를 표시 합니다. 전자의 출력은 왼쪽에 표시되고 후자의 출력은 터미널의 오른쪽에 표시됩니다. &lt;code&gt;fish_mode_prompt&lt;/code&gt; 의 출력은 왼쪽에 앞에 추가되지만 기본 기능은 &lt;a href=&quot;index#vi-mode&quot;&gt;vi-mode에&lt;/a&gt; 있을 때만이 기능을 수행 합니다 .</target>
        </trans-unit>
        <trans-unit id="725f43146f11db5b86f8606c09448389fd1f4eed" translate="yes" xml:space="preserve">
          <source>When in vi-mode, the &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; function will display a mode indicator to the left of the prompt. To disable this feature, override it with an empty function. To display the mode elsewhere (like in your right prompt), use the output of the &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; function.</source>
          <target state="translated">When in vi-mode, the &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; function will display a mode indicator to the left of the prompt. To disable this feature, override it with an empty function. To display the mode elsewhere (like in your right prompt), use the output of the &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="607879a486f64cd0da9cb1a6673f02fc3b5d2fec" translate="yes" xml:space="preserve">
          <source>When in vi-mode, the &lt;a href=&quot;fish_mode_prompt&quot;&gt;&lt;code&gt;fish_mode_prompt&lt;/code&gt;&lt;/a&gt; function will display a mode indicator to the left of the prompt. The &lt;code&gt;fish_vi_cursor&lt;/code&gt; function will be used to change the cursor's shape depending on the mode in supported terminals. To disable this feature, override it with an empty function. To display the mode elsewhere (like in your right prompt), use the output of the &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; function.</source>
          <target state="translated">vi 모드에있을 때 &lt;a href=&quot;fish_mode_prompt&quot;&gt; &lt;code&gt;fish_mode_prompt&lt;/code&gt; &lt;/a&gt; 기능은 프롬프트 왼쪽에 모드 표시기를 표시합니다. &lt;code&gt;fish_vi_cursor&lt;/code&gt; 의 기능을 지원하는 단말의 모드에 따라, 커서의 형상을 변경하는 데 사용된다. 이 기능을 비활성화하려면 빈 기능으로 재정의하십시오. 오른쪽 프롬프트와 같이 다른 곳에서 모드를 표시하려면 &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; 함수 의 출력을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="33b46dcb16afbaec6d4436b9d1a5f44e784219a0" translate="yes" xml:space="preserve">
          <source>When multiple &lt;code&gt;COMMAND&lt;/code&gt;s are provided, they are all run in the specified order when the key is pressed. Note that special input functions cannot be combined with ordinary shell script commands. The commands must be entirely a sequence of special input functions (from &lt;code&gt;bind -f&lt;/code&gt;) or all shell script commands (i.e., valid fish script).</source>
          <target state="translated">여러 개의 &lt;code&gt;COMMAND&lt;/code&gt; 이 제공되면 키를 누를 때 지정된 순서대로 모두 실행됩니다. 특수 입력 기능은 일반 쉘 스크립트 명령과 결합 할 수 없습니다. 명령은 전적으로 일련의 특수 입력 함수 ( &lt;code&gt;bind -f&lt;/code&gt; ) 또는 모든 쉘 스크립트 명령 (예 : 유효한 피쉬 스크립트) 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="60402cb8f58632c68a26ced09b11fbf6589f7279" translate="yes" xml:space="preserve">
          <source>When running in this mode, &lt;code&gt;read&lt;/code&gt; does not split the input in any way and text is redirected to standard output without any further processing or manipulation.</source>
          <target state="translated">이 모드에서 실행될 때 &lt;code&gt;read&lt;/code&gt; 는 어떤 식 으로든 입력을 분할하지 않으며 텍스트는 추가 처리 나 조작없이 표준 출력으로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="efd94d1e11c389f3a2b8042a383ed84dc4be3715" translate="yes" xml:space="preserve">
          <source>When the cursor is over a parenthesis or a quote, &lt;code&gt;fish&lt;/code&gt; also highlights its matching quote or parenthesis.</source>
          <target state="translated">커서가 괄호 나 따옴표 위에 있으면 &lt;code&gt;fish&lt;/code&gt; 도 일치하는 따옴표 나 괄호를 강조 표시합니다.</target>
        </trans-unit>
        <trans-unit id="01a87969e30ad0e39174183d05f883882efbc023" translate="yes" xml:space="preserve">
          <source>When the prompt is about to be shown</source>
          <target state="translated">프롬프트가 표시 될 때</target>
        </trans-unit>
        <trans-unit id="84fb666d00ac44965366d223053ffc07523cfa5c" translate="yes" xml:space="preserve">
          <source>When the value of a variable is updated</source>
          <target state="translated">변수의 값이 업데이트 될 때</target>
        </trans-unit>
        <trans-unit id="5149e58fb1af17e2b78bfc79105f3521233c2ff0" translate="yes" xml:space="preserve">
          <source>When two unquoted expansions directly follow each other, you need to watch out for expansions that expand to nothing. This includes undefined variables and empty lists, but also command substitutions with no output. See the &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt; section for more information.</source>
          <target state="translated">인용되지 않은 두 개의 확장이 서로 직접 연결되면 확장되지 않는 확장에주의해야합니다. 여기에는 정의되지 않은 변수와 빈 목록뿐만 아니라 출력이없는 명령 대체도 포함됩니다. 자세한 내용은 &lt;a href=&quot;#cartesian-product&quot;&gt;데카르트 제품&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="611390b4e7bff2a4f48823eeb19ea95b7d5c6f8e" translate="yes" xml:space="preserve">
          <source>When using a variable as an argument for a test operator you should almost always enclose it in double-quotes. There are only two situations it is safe to omit the quote marks. The first is when the argument is a literal string with no whitespace or other characters special to the shell (e.g., semicolon). For example, &lt;code&gt;test -b /my/file&lt;/code&gt;. The second is using a variable that expands to exactly one element including if that element is the empty string (e.g., &amp;lsquo;set x &amp;rsquo;'&lt;code&gt;). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example,&lt;/code&gt;test &quot;$x&quot; = &quot;$y&quot;&lt;code&gt;. Since it is always safe to enclose variables in double-quotes when used as&lt;/code&gt;test` arguments that is the recommended practice.</source>
          <target state="translated">변수를 테스트 연산자의 인수로 사용할 때는 거의 항상 큰 따옴표로 묶어야합니다. 따옴표를 생략해도 안전한 상황은 두 가지뿐입니다. 첫 번째는 인수가 공백이나 쉘에 특수 문자 (예 : 세미콜론)가없는 리터럴 문자열 인 경우입니다. 예를 들어, &lt;code&gt;test -b /my/file&lt;/code&gt; 입니다. 두 번째는 해당 요소가 빈 문자열 (예 : 'set x' ' &lt;code&gt;). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example,&lt;/code&gt; 포함하여 정확히 하나의 요소로 확장되는 변수를 사용하는 것 입니다. 변수가 설정되지 않았지만 설정되었지만 값이 없거나 두 개 이상의 값으로 설정되어 있으면 큰 따옴표로 묶어야합니다. 예를 들어, &quot;$ x&quot;= &quot;$ y&quot;테스트하십시오 &lt;code&gt;. Since it is always safe to enclose variables in double-quotes when used as&lt;/code&gt; 권장 되는 테스트 인수 로 사용될 때 변수를 큰 따옴표로 묶는 것이 항상 안전하기 때문에 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="22d3206588f4ce114f604b93c664c1eccb1e21e6" translate="yes" xml:space="preserve">
          <source>When using a variable as an argument for a test operator you should almost always enclose it in double-quotes. There are only two situations it is safe to omit the quote marks. The first is when the argument is a literal string with no whitespace or other characters special to the shell (e.g., semicolon). For example, &lt;code&gt;test -b /my/file&lt;/code&gt;. The second is using a variable that expands to exactly one element including if that element is the empty string (e.g., &lt;code&gt;set x ''&lt;/code&gt;). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example, &lt;code&gt;test &quot;$x&quot; = &quot;$y&quot;&lt;/code&gt;. Since it is always safe to enclose variables in double-quotes when used as &lt;code&gt;test&lt;/code&gt; arguments that is the recommended practice.</source>
          <target state="translated">When using a variable as an argument for a test operator you should almost always enclose it in double-quotes. There are only two situations it is safe to omit the quote marks. The first is when the argument is a literal string with no whitespace or other characters special to the shell (e.g., semicolon). For example, &lt;code&gt;test -b /my/file&lt;/code&gt; . The second is using a variable that expands to exactly one element including if that element is the empty string (e.g., &lt;code&gt;set x ''&lt;/code&gt; ). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example, &lt;code&gt;test &quot;$x&quot; = &quot;$y&quot;&lt;/code&gt; . Since it is always safe to enclose variables in double-quotes when used as &lt;code&gt;test&lt;/code&gt; arguments that is the recommended practice.</target>
        </trans-unit>
        <trans-unit id="9062d3c72370d3c1535058f3067893ad9fc5a147" translate="yes" xml:space="preserve">
          <source>When using indirect variable expansion with multiple &lt;code&gt;$&lt;/code&gt; (&lt;code&gt;$$name&lt;/code&gt;), you have to give all indices up to the variable you want to slice:</source>
          <target state="translated">When using indirect variable expansion with multiple &lt;code&gt;$&lt;/code&gt; ( &lt;code&gt;$$name&lt;/code&gt; ), you have to give all indices up to the variable you want to slice:</target>
        </trans-unit>
        <trans-unit id="423a828b908fd75e9cc37f539daeca01ccaa2ca1" translate="yes" xml:space="preserve">
          <source>When using most virtual terminals, it is possible to set the message displayed in the titlebar of the terminal window. This can be done automatically in fish by defining the &lt;code&gt;fish_title&lt;/code&gt; function. The &lt;code&gt;fish_title&lt;/code&gt; function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message. The &lt;code&gt;status current-command&lt;/code&gt; builtin will always return the name of the job to be put into the foreground (or 'fish' if control is returning to the shell) when the &lt;code&gt;fish_prompt&lt;/code&gt; function is called. The first argument to fish_title will contain the most recently executed foreground command as a string, starting with fish 2.2.</source>
          <target state="translated">대부분의 가상 터미널을 사용하는 경우 터미널 창의 제목 표시 줄에 표시되는 메시지를 설정할 수 있습니다. &lt;code&gt;fish_title&lt;/code&gt; 함수 를 정의하여 물고기에서 자동으로 수행 할 수 있습니다 . &lt;code&gt;fish_title&lt;/code&gt; 함수 전에 새로운 명령이 실행 또는 전경 넣고 출력이 타이틀 메시지로서 사용 된 후 실행된다. 내장 된 &lt;code&gt;status current-command&lt;/code&gt; 는 &lt;code&gt;fish_prompt&lt;/code&gt; 함수가 호출 될 때 항상 포 그라운드로 놓일 작업 이름 (또는 제어가 쉘로 리턴되는 경우 'fish')을 리턴합니다 . fish_title의 첫 번째 인수는 fish 2.2로 시작하여 가장 최근에 실행 된 foreground 명령을 문자열로 포함합니다.</target>
        </trans-unit>
        <trans-unit id="8174e8c2267c766e6e1589bb88a15f5f751e9e9e" translate="yes" xml:space="preserve">
          <source>When using this feature together with array brackets, the brackets will always match the innermost &lt;code&gt;$&lt;/code&gt; dereference. Thus, &lt;code&gt;$$foo[5]&lt;/code&gt; will always mean the fifth element of the &lt;code&gt;foo&lt;/code&gt; variable should be dereferenced, not the fifth element of the doubly dereferenced variable &lt;code&gt;foo&lt;/code&gt;. The latter can instead be expressed as &lt;code&gt;$$foo[1][5]&lt;/code&gt;.</source>
          <target state="translated">이 기능을 배열 괄호와 함께 사용하면 괄호는 항상 가장 안쪽 &lt;code&gt;$&lt;/code&gt; 역 참조 와 일치합니다 . 따라서 &lt;code&gt;$$foo[5]&lt;/code&gt; 는 이중 참조 해제 된 변수 &lt;code&gt;foo&lt;/code&gt; 의 다섯 번째 요소가 아니라 &lt;code&gt;foo&lt;/code&gt; 변수의 다섯 번째 요소를 역 참조해야 함을 의미합니다 . 후자는 &lt;code&gt;$$foo[1][5]&lt;/code&gt; 로 표현 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ecb11771a6962065e356ec68183ca84e1c8a6484" translate="yes" xml:space="preserve">
          <source>When using this feature together with list brackets, the brackets will always match the innermost &lt;code&gt;$&lt;/code&gt; dereference. Thus, &lt;code&gt;$$foo[5]&lt;/code&gt; will always mean the fifth element of the &lt;code&gt;foo&lt;/code&gt; variable should be dereferenced, not the fifth element of the doubly dereferenced variable &lt;code&gt;foo&lt;/code&gt;. The latter can instead be expressed as &lt;code&gt;$$foo[1][5]&lt;/code&gt;.</source>
          <target state="translated">When using this feature together with list brackets, the brackets will always match the innermost &lt;code&gt;$&lt;/code&gt; dereference. Thus, &lt;code&gt;$$foo[5]&lt;/code&gt; will always mean the fifth element of the &lt;code&gt;foo&lt;/code&gt; variable should be dereferenced, not the fifth element of the doubly dereferenced variable &lt;code&gt;foo&lt;/code&gt; . The latter can instead be expressed as &lt;code&gt;$$foo[1][5]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fc413625f2d8700615beffe00723d3e066b2931" translate="yes" xml:space="preserve">
          <source>When you start a job in &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; itself will pause, and give control of the terminal to the program just started. Sometimes, you want to continue using the commandline, and have the job run in the background. To create a background job, append an &amp;amp; (ampersand) to your command. This will tell fish to run the job in the background. Background jobs are very useful when running programs that have a graphical user interface.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 에서 작업을 시작하면 &lt;code&gt;fish&lt;/code&gt; 자체가 일시 중지되고 프로그램이 시작된 터미널을 제어 할 수 있습니다. 때로는 명령 행을 계속 사용하고 백그라운드에서 작업을 실행하려고합니다. 백그라운드 작업을 작성하려면 명령에 &amp;amp; (앰퍼샌드)를 추가하십시오. 이것은 물고기에게 백그라운드에서 작업을 실행하도록 지시합니다. 백그라운드 작업은 그래픽 사용자 인터페이스가있는 프로그램을 실행할 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d15c25511fa0415df6ab124fbf33636f92131f5e" translate="yes" xml:space="preserve">
          <source>Whenever a process exits, an exit status is returned to the program that started it (usually the shell). This exit status is an integer number, which tells the calling application how the execution of the command went. In general, a zero exit status means that the command executed without problem, but a non-zero exit status means there was some form of problem.</source>
          <target state="translated">프로세스가 종료 될 때마다 프로세스를 시작한 프로그램 (일반적으로 쉘)으로 종료 상태가 리턴됩니다. 이 종료 상태는 정수이며, 이는 호출 응용 프로그램에 명령 실행 방법을 알려줍니다. 일반적으로 종료 상태가 0이면 명령이 문제없이 실행되었음을 의미하지만, 0이 아닌 종료 상태는 어떤 형태의 문제가 발생했음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="37e6818d213a036baa5f294f8cb49db4fd377178" translate="yes" xml:space="preserve">
          <source>Where can I find extra tools for fish?</source>
          <target state="translated">물고기를위한 추가 도구를 어디서 찾을 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="079e201e9c4dd5d183821d76711a9a3942fe2c10" translate="yes" xml:space="preserve">
          <source>Where to put completions</source>
          <target state="translated">완성 장소</target>
        </trans-unit>
        <trans-unit id="218d0fd933c5736f11bfc14c23fd644e6997fe12" translate="yes" xml:space="preserve">
          <source>While loops:</source>
          <target state="translated">while 루프 :</target>
        </trans-unit>
        <trans-unit id="c3d957621152f2cbd082b0e140ac7a547272ab27" translate="yes" xml:space="preserve">
          <source>While this will check if &lt;code&gt;hasargs&lt;/code&gt; was run with the &lt;code&gt;-q&lt;/code&gt; option:</source>
          <target state="translated">경우이 확인됩니다 동안 &lt;code&gt;hasargs&lt;/code&gt; 가 으로 실행 된 &lt;code&gt;-q&lt;/code&gt; 옵션 :</target>
        </trans-unit>
        <trans-unit id="1e24c24ef4021d57bef0a8fce5934342b1e3540f" translate="yes" xml:space="preserve">
          <source>Why doesn't &lt;code&gt;set -Ux&lt;/code&gt; (exported universal variables) seem to work?</source>
          <target state="translated">Why doesn't &lt;code&gt;set -Ux&lt;/code&gt; (exported universal variables) seem to work?</target>
        </trans-unit>
        <trans-unit id="3da2ee8c41b2531ccfd9706e7ed4059f9b39b539" translate="yes" xml:space="preserve">
          <source>Why doesn't `set -Ux` (exported universal variables) seem to work?</source>
          <target state="translated">`set -Ux` (내 보낸 범용 변수)가 작동하지 않는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="1e505f696e4f6b7e0b5ed829f453debff8a4a2e5" translate="yes" xml:space="preserve">
          <source>Why doesn't history substitution (&quot;!$&quot; etc.) work?</source>
          <target state="translated">히스토리 대체 ( &quot;! $&quot;등)가 작동하지 않는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="567d5b34994eb0320286730214d3dd777982c9ad" translate="yes" xml:space="preserve">
          <source>Why fish?</source>
          <target state="translated">왜 물고기?</target>
        </trans-unit>
        <trans-unit id="59af40d4a351e635fdbe369d7b681d20a590a23a" translate="yes" xml:space="preserve">
          <source>Wildcard expansion</source>
          <target state="translated">와일드 카드 확장</target>
        </trans-unit>
        <trans-unit id="59047ee36a3c7c05f567f4b4586b76d8d7e3171d" translate="yes" xml:space="preserve">
          <source>Wildcard matches are sorted case insensitively. When sorting matches containing numbers, consecutive digits are considered to be one element, so that the strings '1' '5' and '12' would be sorted in the order given.</source>
          <target state="translated">와일드 카드 일치는 대소 문자를 구분하지 않고 정렬됩니다. 숫자가 포함 된 일치 항목을 정렬 할 때 연속 숫자는 하나의 요소로 간주되므로 문자열 '1' '5'및 '12'는 주어진 순서대로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="f4138f22664d37f96c263052adeb723fdfd7248c" translate="yes" xml:space="preserve">
          <source>Wildcards</source>
          <target state="translated">Wildcards</target>
        </trans-unit>
        <trans-unit id="278d17b7409d744f59bd2b428221655321a32bee" translate="yes" xml:space="preserve">
          <source>Will print &quot;Number of bananas in my pocket: 42&quot;, &lt;em&gt;without&lt;/em&gt; a newline.</source>
          <target state="translated">줄 바꿈 &lt;em&gt;없이&lt;/em&gt; &quot;내 주머니에 바나나 수 : 42&quot;를 인쇄 합니다.</target>
        </trans-unit>
        <trans-unit id="4f7159b217d7c49f62890340f93714482c2741cd" translate="yes" xml:space="preserve">
          <source>Will print &quot;Number of bananas in my pocket: 42&quot;, _without_ a newline.</source>
          <target state="translated">Will print &quot;Number of bananas in my pocket: 42&quot;, _without_ a newline.</target>
        </trans-unit>
        <trans-unit id="6d27bda981ba079ffce589e22866c0442facccba" translate="yes" xml:space="preserve">
          <source>Will print &quot;flounder fish&quot; (separated with a tab character), followed by a newline character. This is useful for writing completions, as fish expects completion scripts to output the option followed by the description, separated with a tab character.</source>
          <target state="translated">&quot;줄다리기 물고기&quot;(탭 문자로 구분)를 인쇄 한 다음 줄 바꿈 문자를 표시합니다. 물고기는 완성 스크립트가 옵션과 설명을 차례로 출력하고 탭 문자로 구분하여 완성을 작성하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d95f3955e4775af2ffe313a32a1e156b2312cd4e" translate="yes" xml:space="preserve">
          <source>Will remove the file 'cumbersome filename.txt', while</source>
          <target state="translated">'cumbersome filename.txt'파일을 제거하는 동안</target>
        </trans-unit>
        <trans-unit id="4044b3d5cb068502c25839df6244b97ef13bfd98" translate="yes" xml:space="preserve">
          <source>With &quot;-c&quot;, it clears the directory stack instead.</source>
          <target state="translated">&quot;-c&quot;를 사용하면 디렉토리 스택이 지워집니다.</target>
        </trans-unit>
        <trans-unit id="b3f596135ed991ca7f5a3bdc45b29b16283c1e4c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;CMD&lt;/code&gt; specified, the command line buffer is erased and replaced with the contents of &lt;code&gt;CMD&lt;/code&gt;.</source>
          <target state="translated">로 &lt;code&gt;CMD&lt;/code&gt; 는 지정된 명령 라인 버퍼가 소거 및 콘텐츠로 대체 &lt;code&gt;CMD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3a11523e7c7f53a50eb3f5c7145415a6eeb3a11" translate="yes" xml:space="preserve">
          <source>With both variable names and values provided, &lt;code&gt;set&lt;/code&gt; assigns the variable &lt;code&gt;VARIABLE_NAME&lt;/code&gt; the values &lt;code&gt;VALUES...&lt;/code&gt;.</source>
          <target state="translated">변수 이름과 값을 모두 제공하면 &lt;code&gt;set&lt;/code&gt; 은 변수 &lt;code&gt;VARIABLE_NAME&lt;/code&gt; 에 값 &lt;code&gt;VALUES...&lt;/code&gt; 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="e3a3bdf1969b9c7b04d35c628b64777d5949f26c" translate="yes" xml:space="preserve">
          <source>With no arguments, &lt;code&gt;status&lt;/code&gt; displays a summary of the current login and job control status of the shell.</source>
          <target state="translated">인수가 없으면, &lt;code&gt;status&lt;/code&gt; 쉘의 현재 로그인 및 작업 제어 상태의 요약을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ff0f6870a82d5cfaf6592bfe8160d96a5dcb7c33" translate="yes" xml:space="preserve">
          <source>With no options, &lt;code&gt;type&lt;/code&gt; indicates how each &lt;code&gt;NAME&lt;/code&gt; would be interpreted if used as a command name.</source>
          <target state="translated">옵션이 없으면 &lt;code&gt;type&lt;/code&gt; 은 명령 이름으로 사용되는 경우 각 &lt;code&gt;NAME&lt;/code&gt; 을 해석 하는 방법을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="324faf3e252b5aa14d470f7a0e509c22b0211914" translate="yes" xml:space="preserve">
          <source>With no parameters, &lt;code&gt;commandline&lt;/code&gt; returns the current value of the command line.</source>
          <target state="translated">매개 변수가 없으면, &lt;code&gt;commandline&lt;/code&gt; 명령 행의 현재 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="32e508ff64591c08b5059eaf16992b090526d942" translate="yes" xml:space="preserve">
          <source>With no parameters, the current file creation mode mask is printed as an octal number.</source>
          <target state="translated">매개 변수가 없으면 현재 파일 작성 모드 마스크가 8 진수로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="550c07a797cef93c6dca0c250695a3ee3bc836c8" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--line&lt;/code&gt; option, &lt;code&gt;read&lt;/code&gt; reads a line of input from standard input into each provided variable, stopping when each variable has been filled. The line is not tokenized.</source>
          <target state="translated">&lt;code&gt;--line&lt;/code&gt; 옵션을 사용하면 &lt;code&gt;read&lt;/code&gt; 는 표준 입력에서 제공된 각 변수로 입력 행을 읽고 각 변수가 채워지면 중지합니다. 라인이 토큰 화되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="7eb04c1870bbf00dde53d943ea601f02f6aade6f" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;-s&lt;/code&gt; option, &lt;code&gt;command&lt;/code&gt; treats every argument as a separate command to look up and sets the exit status to 0 if any of the specified commands were found, or 1 if no commands could be found. Additionally passing a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; option prevents any paths from being printed, like &lt;code&gt;type -q&lt;/code&gt;, for testing only the exit status.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 옵션을 사용하면 &lt;code&gt;command&lt;/code&gt; 는 모든 인수를 별도의 명령으로 처리하여 지정된 명령을 찾은 경우 종료 상태를 0으로 설정하고 명령을 찾을 수없는 경우 1로 설정합니다. 또한 &lt;code&gt;-q&lt;/code&gt; 또는 &lt;code&gt;--quiet&lt;/code&gt; 옵션을 전달 하면 종료 상태 만 테스트하기 위해 &lt;code&gt;type -q&lt;/code&gt; 과 같은 경로가 인쇄되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="bc8e1321c10d803c389c5b4efea6741544b19b13" translate="yes" xml:space="preserve">
          <source>Without arguments, it exchanges the top two directories in the stack.</source>
          <target state="translated">인수가 없으면 스택에서 최상위 두 디렉토리를 교환합니다.</target>
        </trans-unit>
        <trans-unit id="1afcecbf9280e75078efa249fd70e1ac68834d9a" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;--line&lt;/code&gt; option, &lt;code&gt;read&lt;/code&gt; reads a single line of input from standard input, breaks it into tokens, and then assigns one token to each variable specified in &lt;code&gt;VARIABLES&lt;/code&gt;. If there are more tokens than variables, the complete remainder is assigned to the last variable.</source>
          <target state="translated">&lt;code&gt;--line&lt;/code&gt; 옵션이 없으면 &lt;code&gt;read&lt;/code&gt; 는 표준 입력에서 한 줄의 입력을 읽고이를 토큰으로 나누고 &lt;code&gt;VARIABLES&lt;/code&gt; 에 지정된 각 변수에 하나의 토큰을 할당합니다 . 변수보다 많은 토큰이 있으면 나머지는 마지막 변수에 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="81356a4d6a0a4a4ef7b6e1d572238cf1fdea2fd0" translate="yes" xml:space="preserve">
          <source>Writing your own completions</source>
          <target state="translated">자신의 완성 물 작성</target>
        </trans-unit>
        <trans-unit id="7683cbf9a7b5e61b6d059df3889d47cb3365f802" translate="yes" xml:space="preserve">
          <source>You can access individual elements with square brackets. Indexing starts at 1 from the beginning, and -1 from the end:</source>
          <target state="translated">대괄호로 개별 요소에 액세스 할 수 있습니다. 인덱싱은 처음부터 1에서 시작하고 끝에서 -1입니다.</target>
        </trans-unit>
        <trans-unit id="22411b5ee78ea15c18bd052b59931e2ba02abfc9" translate="yes" xml:space="preserve">
          <source>You can also access ranges of elements, known as &quot;slices:&quot;</source>
          <target state="translated">&quot;슬라이스 :&quot;라고하는 다양한 요소에 액세스 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="183a967967d542440e171619570f33c53983ac70" translate="yes" xml:space="preserve">
          <source>You can also declare a local variable in a block:</source>
          <target state="translated">블록에서 지역 변수를 선언 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecb40a1f7381aef9ba5318c2e40466b4d37abc89" translate="yes" xml:space="preserve">
          <source>You can also use the Web configuration tool, &lt;a href=&quot;cmds/fish_config#cmd-fish-config&quot;&gt;fish_config&lt;/a&gt;, to preview and choose from a gallery of sample prompts.</source>
          <target state="translated">You can also use the Web configuration tool, &lt;a href=&quot;cmds/fish_config#cmd-fish-config&quot;&gt;fish_config&lt;/a&gt;, to preview and choose from a gallery of sample prompts.</target>
        </trans-unit>
        <trans-unit id="c6736676dcee399ddf959a5129dcc47bfa72a06e" translate="yes" xml:space="preserve">
          <source>You can also use the Web configuration tool, &lt;a href=&quot;commands#fish_config&quot;&gt;&lt;code&gt;fish_config&lt;/code&gt;&lt;/a&gt;, to preview and choose from a gallery of sample prompts.</source>
          <target state="translated">웹 구성 도구 인 &lt;a href=&quot;commands#fish_config&quot;&gt; &lt;code&gt;fish_config&lt;/code&gt; 를&lt;/a&gt; 사용하여 샘플 프롬프트 갤러리를 미리보고 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfe746d43b05cc389c18341f5eec0d3e6d66c8e1" translate="yes" xml:space="preserve">
          <source>You can also use the version as a group, so &lt;code&gt;3.0&lt;/code&gt; is equivalent to &quot;stderr-nocaret&quot; and &quot;qmark-noglob&quot;.</source>
          <target state="translated">You can also use the version as a group, so &lt;code&gt;3.0&lt;/code&gt; is equivalent to &quot;stderr-nocaret&quot; and &quot;qmark-noglob&quot;.</target>
        </trans-unit>
        <trans-unit id="bdd92db017317ccc2cf69c4b1d28391056cb80e8" translate="yes" xml:space="preserve">
          <source>You can append (or prepend) to a list by setting the list to itself, with some additional arguments. Here we append /usr/local/bin to $PATH:</source>
          <target state="translated">몇 가지 추가 인수를 사용하여 목록을 자체로 설정하여 목록에 추가하거나 추가 할 수 있습니다. 여기서 / usr / local / bin을 $ PATH에 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="1bb567fe25bb6a2caba3279e69807e978438ad28" translate="yes" xml:space="preserve">
          <source>You can change &lt;code&gt;fish_history&lt;/code&gt; at any time (by using &lt;code&gt;set -x fish_history &quot;session_name&quot;&lt;/code&gt;) and it will take effect right away. If you set it to &lt;code&gt;&quot;default&quot;&lt;/code&gt;, it will use the default session name (which is &lt;code&gt;&quot;fish&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;set -x fish_history &quot;session_name&quot;&lt;/code&gt; 을 사용하여 언제든지 &lt;code&gt;fish_history&lt;/code&gt; 를 변경할 수 있으며 즉시 적용됩니다. &lt;code&gt;&quot;default&quot;&lt;/code&gt; 로 설정 하면 기본 세션 이름 ( &lt;code&gt;&quot;fish&quot;&lt;/code&gt; )이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0d2a3f197fcb5a9ae9892ffe37231c5dd52cdbb1" translate="yes" xml:space="preserve">
          <source>You can change these key bindings using the &lt;a href=&quot;cmds/bind#cmd-bind&quot;&gt;bind&lt;/a&gt; builtin.</source>
          <target state="translated">You can change these key bindings using the &lt;a href=&quot;cmds/bind#cmd-bind&quot;&gt;bind&lt;/a&gt; builtin.</target>
        </trans-unit>
        <trans-unit id="271d995eee26c277a042d3d479fbc5c44abb9d62" translate="yes" xml:space="preserve">
          <source>You can change these key bindings using the &lt;a href=&quot;commands#bind&quot;&gt;bind&lt;/a&gt; builtin command.</source>
          <target state="translated">&lt;a href=&quot;commands#bind&quot;&gt;bind&lt;/a&gt; builtin 명령을 사용하여 이러한 키 바인딩을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0fbf59159cacd6194c5d1afee388fe6f9b2deba5" translate="yes" xml:space="preserve">
          <source>You can choose among some sample prompts by running &lt;code&gt;fish_config prompt&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; also supports RPROMPT through &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_config prompt&lt;/code&gt; 를 실행하여 일부 샘플 프롬프트 중에서 선택할 수 있습니다 . &lt;code&gt;fish&lt;/code&gt; 또한을 통해 RPROMPT을 지원 &lt;code&gt;fish_right_prompt&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="29e07248f927a66e3445195c42cee5dad321cbe4" translate="yes" xml:space="preserve">
          <source>You can create abbreviations interactively and they will be visible to other fish sessions if you use the &lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; flag or don't explicitly specify the scope and the abbreviation isn't already defined with global scope. If you want it to be visible only to the current shell use the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; flag.</source>
          <target state="translated">대화식으로 약어를 작성할 수 있으며 &lt;code&gt;-U&lt;/code&gt; 또는 &lt;code&gt;--universal&lt;/code&gt; 플래그를 사용하거나 범위를 명시 적으로 지정하지 않고 약어가 아직 글로벌 범위로 정의되지 않은 경우 다른 어류 세션에서 볼 수 있습니다 . 현재 쉘에만 표시되도록하려면 &lt;code&gt;-g&lt;/code&gt; 또는 &lt;code&gt;--global&lt;/code&gt; 플래그를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b6e4c148ce6b5b609986d145a9a7da7ea9b88d15" translate="yes" xml:space="preserve">
          <source>You can define your own prompt:</source>
          <target state="translated">자신의 프롬프트를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="771f132ac7436b22e8318fb498769e889b17fc02" translate="yes" xml:space="preserve">
          <source>You can do so directly in &lt;code&gt;config.fish&lt;/code&gt;, like you might do in other shells with &lt;code&gt;.profile&lt;/code&gt;. See &lt;a href=&quot;#path-example&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">You can do so directly in &lt;code&gt;config.fish&lt;/code&gt; , like you might do in other shells with &lt;code&gt;.profile&lt;/code&gt; . See &lt;a href=&quot;#path-example&quot;&gt;this example&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f61c13e82446efa061ca7d17091f411ee83d8761" translate="yes" xml:space="preserve">
          <source>You can do so directly in &lt;code&gt;config.fish&lt;/code&gt;, like you might do in other shells with &lt;code&gt;.profile&lt;/code&gt;. See &lt;a href=&quot;#path_example&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.profile&lt;/code&gt; 을 사용하는 다른 쉘에서와 같이 &lt;code&gt;config.fish&lt;/code&gt; 에서 직접 수행 할 수 있습니다 . &lt;a href=&quot;#path_example&quot;&gt;이 예제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab42dfe8c6286c5f52729c399c8213d8b499abc0" translate="yes" xml:space="preserve">
          <source>You can erase (or &quot;delete&quot;) a variable with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt;</source>
          <target state="translated">You can erase (or &quot;delete&quot;) a variable with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70c6c6dd6e2cc9d671b6c22ccdb9354bc3fcc555" translate="yes" xml:space="preserve">
          <source>You can erase a variable with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 를 사용 하여 변수를 지울 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5bad3c32a8d2a38fb8952af3582045099d1f7782" translate="yes" xml:space="preserve">
          <source>You can include a literal space in an argument with a backslash, or by using single or double quotes:</source>
          <target state="translated">백 슬래시를 사용하거나 작은 따옴표 나 큰 따옴표를 사용하여 인수에 리터럴 공백을 포함시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf2d7abc4fc8709fbd1e843b233396517d8ddaca" translate="yes" xml:space="preserve">
          <source>You can include multiple wildcards:</source>
          <target state="translated">여러 개의 와일드 카드를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f83e4dd668d0923f31b885de0832e79602a1616d" translate="yes" xml:space="preserve">
          <source>You can iterate over a list (or a slice) with a for loop:</source>
          <target state="translated">for 루프를 사용하여 목록 (또는 슬라이스)을 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="582ba3e59d153a759cfa8931cfe3daa07df07cb8" translate="yes" xml:space="preserve">
          <source>You can list the names of all functions with the &lt;code&gt;functions&lt;/code&gt; keyword (note the plural!). &lt;code&gt;fish&lt;/code&gt; starts out with a number of functions:</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; 키워드를 사용하여 모든 함수의 이름을 나열 할 수 있습니다 (복수!). &lt;code&gt;fish&lt;/code&gt; 는 여러 가지 기능으로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="8ab1be7c512e88224ed05c20f2e9c4813a606702" translate="yes" xml:space="preserve">
          <source>You can make fish your default shell by adding fish's executable in two places: - add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; - change your default shell with &lt;code&gt;chsh -s&lt;/code&gt; to &lt;code&gt;/usr/local/bin/fish&lt;/code&gt;</source>
          <target state="translated">You can make fish your default shell by adding fish's executable in two places: - add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; - change your default shell with &lt;code&gt;chsh -s&lt;/code&gt; to &lt;code&gt;/usr/local/bin/fish&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cdbfa536e96ce4c5031503e10bf462df7b697afe" translate="yes" xml:space="preserve">
          <source>You can only specify one subcommand per invocation even if you use the flag form of the subcommand.</source>
          <target state="translated">부속 명령의 플래그 양식을 사용하더라도 호출 당 하나의 부속 명령 만 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32cbb15c775d0a5c4bd4e986a03e5ca4d359b068" translate="yes" xml:space="preserve">
          <source>You can pipe between commands with the usual vertical bar:</source>
          <target state="translated">일반적인 수직 막대를 사용하여 명령 사이를 파이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d42fab7275c3711f78f4cc0e17430682558b418" translate="yes" xml:space="preserve">
          <source>You can see the current list of features via &lt;code&gt;status features&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;status features&lt;/code&gt; 통해 현재 기능 목록을 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d372da7b7b5d10683d41167afee54d800f912536" translate="yes" xml:space="preserve">
          <source>You can see the source for any function by passing its name to &lt;code&gt;functions&lt;/code&gt;:</source>
          <target state="translated">당신은 그것의 이름을 전달하여 모든 기능에 대한 소스를 볼 수있는 &lt;code&gt;functions&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="119c7a997d5bdc2b60e626a0ba66e37ce06fb4d1" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;fish_history&lt;/code&gt; variable to another name for the current shell session. The default value (when the variable is unset) is &lt;code&gt;fish&lt;/code&gt; which corresponds to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt;. If you set it to e.g. &lt;code&gt;fun&lt;/code&gt;, the history would be written to &lt;code&gt;$XDG_DATA_HOME/fish/fun_history&lt;/code&gt;. An empty string means history will not be stored at all. This is similar to the private session features in web browsers.</source>
          <target state="translated">&lt;code&gt;fish_history&lt;/code&gt; 변수를 현재 쉘 세션의 다른 이름으로 설정할 수 있습니다 . (변수가 설정되지 않은 경우) 기본값은 &lt;code&gt;fish&lt;/code&gt; 하는에 해당하는 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; . 예를 들어 &lt;code&gt;fun&lt;/code&gt; 으로 설정 하면 히스토리가 &lt;code&gt;$XDG_DATA_HOME/fish/fun_history&lt;/code&gt; 기록됩니다 . 빈 문자열은 히스토리가 전혀 저장되지 않음을 의미합니다. 이것은 웹 브라우저의 개인 세션 기능과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="805a6b59b4757ac95f6f000c9c60c72ef172664e" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for complex conditions. Even more complex control can be achieved with &lt;code&gt;while true&lt;/code&gt; containing a &lt;a href=&quot;#break&quot;&gt;break&lt;/a&gt;.</source>
          <target state="translated">당신은 사용할 수 있습니다 &lt;a href=&quot;#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; 하거나 &lt;a href=&quot;#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt; 복잡한 조건. 더 복잡한 제어는 &lt;code&gt;while true&lt;/code&gt; &lt;a href=&quot;#break&quot;&gt;휴식을&lt;/a&gt; 포함 하면서 달성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="36becbc0de8c6768b79b53bcf652c0ec7f0d05ab" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; in the condition. See the second example below.</source>
          <target state="translated">&lt;a href=&quot;#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt; 조건에서 사용할 수 있습니다 . 아래 두 번째 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0577d2c177d19d22acf68b05e37a2979b667cf8b" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;and#cmd-and&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;or#cmd-or&quot;&gt;or&lt;/a&gt; for complex conditions. Even more complex control can be achieved with &lt;code&gt;while true&lt;/code&gt; containing a &lt;a href=&quot;break#cmd-break&quot;&gt;break&lt;/a&gt;.</source>
          <target state="translated">You can use &lt;a href=&quot;and#cmd-and&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;or#cmd-or&quot;&gt;or&lt;/a&gt; for complex conditions. Even more complex control can be achieved with &lt;code&gt;while true&lt;/code&gt; containing a &lt;a href=&quot;break#cmd-break&quot;&gt;break&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dad59b8029d0bba074a2a04d55b072bf78f9fdbf" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;and#cmd-and&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;or#cmd-or&quot;&gt;or&lt;/a&gt; in the condition. See the second example below.</source>
          <target state="translated">You can use &lt;a href=&quot;and#cmd-and&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;or#cmd-or&quot;&gt;or&lt;/a&gt; in the condition. See the second example below.</target>
        </trans-unit>
        <trans-unit id="a29442c2c0cd9017469875929db91ad4d3e135db" translate="yes" xml:space="preserve">
          <source>You can use the following commands for this:</source>
          <target state="translated">이를 위해 다음 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae2c831ec8a49110729d78b946cea71b43a00858" translate="yes" xml:space="preserve">
          <source>You cannot create an alias to a function with the same name. Note that spaces need to be escaped in the call to &lt;code&gt;alias&lt;/code&gt; just like at the command line, &lt;em&gt;even inside quoted parts&lt;/em&gt;.</source>
          <target state="translated">같은 이름의 함수에 대한 별칭을 만들 수 없습니다. 명령 행에서와 같이, &lt;em&gt;인용 된 부분 내에서도 &lt;/em&gt; &lt;code&gt;alias&lt;/code&gt; 호출시 공백을 이스케이프해야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ccdace8ac9f08512755f925735f08580088b949a" translate="yes" xml:space="preserve">
          <source>You don't need to use &lt;code&gt;--&lt;/code&gt; before the expression even if it begins with a minus sign which might otherwise be interpreted as an invalid option. If you do insert &lt;code&gt;--&lt;/code&gt; before the expression it will cause option scanning to stop just like for every other command and it won't be part of the expression.</source>
          <target state="translated">당신은 사용할 필요가 없습니다 &lt;code&gt;--&lt;/code&gt; 그것은 그렇지 않으면 잘못된 옵션으로 해석 될 수 마이너스 기호로 시작하는 경우에도 표현하기 전에. 삽입 할 경우 &lt;code&gt;--&lt;/code&gt; 식 전에 발생합니다 옵션 스캔은 다른 모든 명령과 같은 중지하고이 표현의 일부가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c8be7a2a612b4083a5ecd22ae42ec8f3a954a585" translate="yes" xml:space="preserve">
          <source>You may be interested in the &lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt; command which provides a more intuitive way to navigate to recently visited directories.</source>
          <target state="translated">You may be interested in the &lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt; command which provides a more intuitive way to navigate to recently visited directories.</target>
        </trans-unit>
        <trans-unit id="dff1182c8c84fa78c31ad7304aa236d391621f4d" translate="yes" xml:space="preserve">
          <source>You may be interested in the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command which provides a more intuitive way to navigate to recently visited directories.</source>
          <target state="translated">최근에 방문한 디렉토리를보다 직관적으로 탐색 할 수있는 &lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt; 명령에 관심이있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f19456ce739912cdbaadf68c5288fc6b883036c4" translate="yes" xml:space="preserve">
          <source>You may need to adjust the above path to e.g. &lt;code&gt;/usr/bin/fish&lt;/code&gt;. Use the command &lt;code&gt;which fish&lt;/code&gt; if you are unsure of where fish is installed.</source>
          <target state="translated">위의 경로를 &lt;code&gt;/usr/bin/fish&lt;/code&gt; 로 조정해야 할 수도 있습니다 . 어디에 물고기가 설치되어 있는지 확실하지 않으면 &lt;code&gt;which fish&lt;/code&gt; 명령 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f60f3dbd8379e7020fda94ce83302c2e10232183" translate="yes" xml:space="preserve">
          <source>You should not assume that only five lines will be written since we may add additional information to the output in the future.</source>
          <target state="translated">나중에 출력에 추가 정보를 추가 할 수 있으므로 5 줄만 작성한다고 가정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="d00cc0aeee9d747695090dc15483badfdd7bb562" translate="yes" xml:space="preserve">
          <source>You should not consider &lt;code&gt;RANDOM&lt;/code&gt; cryptographically secure, or even statistically accurate.</source>
          <target state="translated">&lt;code&gt;RANDOM&lt;/code&gt; 은 암호로 안전하거나 통계적으로 정확한 것으로 간주해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="099d04689a14254d5c264e92a8949102945a2d8c" translate="yes" xml:space="preserve">
          <source>You will be greeted by the standard fish prompt, which means you are all set up and can start using fish:</source>
          <target state="translated">표준 물고기 프롬프트가 표시됩니다. 이는 모두 설정되었으며 물고기를 사용할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="daf44230d29581bbad655cd6db1bfaf7030ab520" translate="yes" xml:space="preserve">
          <source>You would then use it in place of &lt;code&gt;**&lt;/code&gt; like this, &lt;code&gt;my_prog (ff)&lt;/code&gt;, to pass only regular files in or below $PWD to &lt;code&gt;my_prog&lt;/code&gt;.</source>
          <target state="translated">당신은 다음의 장소에 사용하는 것이 &lt;code&gt;**&lt;/code&gt; 이런, &lt;code&gt;my_prog (ff)&lt;/code&gt; 에 $ PWD 또는 아래 정규 파일을 전달하는 &lt;code&gt;my_prog&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9695117f9f938316caa9d46578b983f363d13cac" translate="yes" xml:space="preserve">
          <source>You'll quickly notice that &lt;code&gt;fish&lt;/code&gt; performs syntax highlighting as you type. Invalid commands are colored red by default</source>
          <target state="translated">You'll quickly notice that &lt;code&gt;fish&lt;/code&gt; performs syntax highlighting as you type. Invalid commands are colored red by default</target>
        </trans-unit>
        <trans-unit id="1c67de04c7033796c6c74cd4dd03c739078b5757" translate="yes" xml:space="preserve">
          <source>You'll quickly notice that &lt;code&gt;fish&lt;/code&gt; performs syntax highlighting as you type. Invalid commands are colored red by default:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 입력 할 때 구문 강조를 수행 한다는 것을 빠르게 알 수 있습니다. 유효하지 않은 명령은 기본적으로 빨간색으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="771340c0a20dacf22c7aabcadc3b061c842574e7" translate="yes" xml:space="preserve">
          <source>Your system most likely also has a &lt;code&gt;time&lt;/code&gt; command. To use that use something like &lt;code&gt;command time&lt;/code&gt;, as in &lt;code&gt;command time sleep 10&lt;/code&gt;. Because it's not inside fish, it won't have access to fish functions and won't be able to time blocks and such.</source>
          <target state="translated">Your system most likely also has a &lt;code&gt;time&lt;/code&gt; command. To use that use something like &lt;code&gt;command time&lt;/code&gt; , as in &lt;code&gt;command time sleep 10&lt;/code&gt; . Because it's not inside fish, it won't have access to fish functions and won't be able to time blocks and such.</target>
        </trans-unit>
        <trans-unit id="0f1904a8c07ac4a095aa5e3b5df39a737f0d2b78" translate="yes" xml:space="preserve">
          <source>Zero is considered success, and non-zero is failure.</source>
          <target state="translated">0은 성공으로 간주되고 0이 아닌 것은 실패입니다.</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="b9bce8bc7cbd4cfc74af295dc63b50f294e0fb27" translate="yes" xml:space="preserve">
          <source>abbr</source>
          <target state="translated">abbr</target>
        </trans-unit>
        <trans-unit id="10c64ce9ed7a8c30b0b458cd0cea2f41104ed020" translate="yes" xml:space="preserve">
          <source>abbr - manage fish abbreviations</source>
          <target state="translated">abbr-물고기 약어 관리</target>
        </trans-unit>
        <trans-unit id="ba2578bd52c07fb5e5c292586e1b1e6596336a14" translate="yes" xml:space="preserve">
          <source>accepts the autosuggestion.</source>
          <target state="translated">accepts the autosuggestion.</target>
        </trans-unit>
        <trans-unit id="682cee3cbd526832d0e8acb7535f6a975ddc96ee" translate="yes" xml:space="preserve">
          <source>add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/etc/shells&lt;/code&gt; 에 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 를 추가하십시오</target>
        </trans-unit>
        <trans-unit id="38a403a06bba439a1e4516159d91b0c0c53c9d35" translate="yes" xml:space="preserve">
          <source>adds the string '&lt;code&gt;| less;&lt;/code&gt;' to the end of the job under the cursor. The result is that the output of the command will be paged.</source>
          <target state="translated">adds the string ' &lt;code&gt;| less;&lt;/code&gt; ' to the end of the job under the cursor. The result is that the output of the command will be paged.</target>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="42a06677b30252b0d37eaddcaf33c622b85d08b4" translate="yes" xml:space="preserve">
          <source>alias - create a function</source>
          <target state="translated">별명-함수 작성</target>
        </trans-unit>
        <trans-unit id="612835d7218b4a546185a302d8c1d25dfed94fcc" translate="yes" xml:space="preserve">
          <source>always compare HEAD to @{upstream}</source>
          <target state="translated">always compare HEAD to @{upstream}</target>
        </trans-unit>
        <trans-unit id="1b3a96bd0a7102c4f7c12ea0f42c885111a86759" translate="yes" xml:space="preserve">
          <source>always compare HEAD to your SVN upstream</source>
          <target state="translated">always compare HEAD to your SVN upstream</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="4ed9a78158a5eed2a098e3c46a71c9215bfe4153" translate="yes" xml:space="preserve">
          <source>and - conditionally execute a command</source>
          <target state="translated">-조건부로 명령을 실행</target>
        </trans-unit>
        <trans-unit id="1cffa3b49e6165095c9831bef88328db13e4664c" translate="yes" xml:space="preserve">
          <source>and it will be exported like that, and when fish starts it splits the $PATH it receives into a list on colon.</source>
          <target state="translated">and it will be exported like that, and when fish starts it splits the $PATH it receives into a list on colon.</target>
        </trans-unit>
        <trans-unit id="60f3e6229f6547b669de6b30043f59330d22e9f2" translate="yes" xml:space="preserve">
          <source>are your friends).</source>
          <target state="translated">are your friends).</target>
        </trans-unit>
        <trans-unit id="e750ee7c231477c66be61075d1aafe532a03970f" translate="yes" xml:space="preserve">
          <source>argparse</source>
          <target state="translated">argparse</target>
        </trans-unit>
        <trans-unit id="b3ef1b3ad484c3f1815d35a2d7273ba16d3fc004" translate="yes" xml:space="preserve">
          <source>argparse - parse options passed to a fish script or function</source>
          <target state="translated">argparse-피싱 스크립트 또는 함수에 전달 된 구문 분석 옵션</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="d849f3a2774d5c3d8a5b753d01c1b98a89678580" translate="yes" xml:space="preserve">
          <source>begin - start a new block of code</source>
          <target state="translated">시작-새로운 코드 블록을 시작</target>
        </trans-unit>
        <trans-unit id="80f87c8847da6c872ce2fc9fec0a98a73ebc578d" translate="yes" xml:space="preserve">
          <source>bg</source>
          <target state="translated">bg</target>
        </trans-unit>
        <trans-unit id="eae83d584c6eeb26f5e657e85aaec8ab661a533a" translate="yes" xml:space="preserve">
          <source>bg - send jobs to background</source>
          <target state="translated">bg-백그라운드로 작업 보내기</target>
        </trans-unit>
        <trans-unit id="6bdd4db977b0f96aaf3bff2e4300153c648ca382" translate="yes" xml:space="preserve">
          <source>bind</source>
          <target state="translated">bind</target>
        </trans-unit>
        <trans-unit id="4d74207ae06bd7de23e2fc590a893d97bc45179b" translate="yes" xml:space="preserve">
          <source>bind - handle fish key bindings</source>
          <target state="translated">바인딩-물고기 키 바인딩 처리</target>
        </trans-unit>
        <trans-unit id="14da9b8760fa463ac2e1d9332226d08a22859f7a" translate="yes" xml:space="preserve">
          <source>bindings (the &lt;code&gt;fish_clipboard_copy&lt;/code&gt; and &lt;code&gt;fish_clipboard_paste&lt;/code&gt; functions &lt;a href=&quot;#id32&quot; id=&quot;id31&quot;&gt;[4]&lt;/a&gt;) and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;, so it can tell a paste from manually entered text. In addition, when pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</source>
          <target state="translated">bindings (the &lt;code&gt;fish_clipboard_copy&lt;/code&gt; and &lt;code&gt;fish_clipboard_paste&lt;/code&gt; functions &lt;a href=&quot;#id32&quot; id=&quot;id31&quot;&gt;[4]&lt;/a&gt;) and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;, so it can tell a paste from manually entered text. In addition, when pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="eaad10d066a35f607308cf97548f180f4b9b872e" translate="yes" xml:space="preserve">
          <source>block - temporarily block delivery of events</source>
          <target state="translated">block-이벤트 전달을 일시적으로 차단</target>
        </trans-unit>
        <trans-unit id="4f9cac8dbc4c67a388b8379dcc126c90c7c5e72a" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">break</target>
        </trans-unit>
        <trans-unit id="175a258d07e2daaf5e3b38a9da4f646e868f7dd3" translate="yes" xml:space="preserve">
          <source>break - stop the current inner loop</source>
          <target state="translated">break-현재 내부 루프를 중지</target>
        </trans-unit>
        <trans-unit id="5c0a31c48cda57c40dc61b785110d76593834ffd" translate="yes" xml:space="preserve">
          <source>breakpoint</source>
          <target state="translated">breakpoint</target>
        </trans-unit>
        <trans-unit id="2922ddae1fa1032ce7131127668d51bf87c71f7e" translate="yes" xml:space="preserve">
          <source>breakpoint - Launch debug mode</source>
          <target state="translated">중단 점-디버그 모드 시작</target>
        </trans-unit>
        <trans-unit id="748a336cc88c03ccb07ed5f5073d18624731b8b5" translate="yes" xml:space="preserve">
          <source>builtin</source>
          <target state="translated">builtin</target>
        </trans-unit>
        <trans-unit id="fa7c75bcd8e77b2860336c73b4baf210585bbf7f" translate="yes" xml:space="preserve">
          <source>builtin - run a builtin command</source>
          <target state="translated">내장-내장 명령 실행</target>
        </trans-unit>
        <trans-unit id="4a6db36466decdfdc7321d75b1055b59b7887a79" translate="yes" xml:space="preserve">
          <source>can be written as &lt;code&gt;\ew&lt;/code&gt;. The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example</source>
          <target state="translated">can be written as &lt;code&gt;\ew&lt;/code&gt; . The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example</target>
        </trans-unit>
        <trans-unit id="61700228f13f640635c7e724bcee8413ef8ec396" translate="yes" xml:space="preserve">
          <source>cancels the entire line.</source>
          <target state="translated">cancels the entire line.</target>
        </trans-unit>
        <trans-unit id="c626de7bb4a2ca33fb1d03596fdcab571a15cd30" translate="yes" xml:space="preserve">
          <source>capitalizes the current word.</source>
          <target state="translated">capitalizes the current word.</target>
        </trans-unit>
        <trans-unit id="6406510c31e0c9925733c7f21414bf6428333ed2" translate="yes" xml:space="preserve">
          <source>case</source>
          <target state="translated">case</target>
        </trans-unit>
        <trans-unit id="ecbc5351327db65d354a1a7d358353471d69609a" translate="yes" xml:space="preserve">
          <source>case - conditionally execute a block of commands</source>
          <target state="translated">case-명령 블록을 조건부로 실행</target>
        </trans-unit>
        <trans-unit id="034778198a045c1ed80be271cdd029b76874f6fc" translate="yes" xml:space="preserve">
          <source>cd</source>
          <target state="translated">cd</target>
        </trans-unit>
        <trans-unit id="fb525966ad485c5f8afa455838828ee40af068d5" translate="yes" xml:space="preserve">
          <source>cd - change directory</source>
          <target state="translated">cd-디렉토리 변경</target>
        </trans-unit>
        <trans-unit id="2aba119bde64723a0961a18ff7adcf76a9d24d8e" translate="yes" xml:space="preserve">
          <source>cdh</source>
          <target state="translated">cdh</target>
        </trans-unit>
        <trans-unit id="1be63f271a472b0d15f170811e4caf9972df88bb" translate="yes" xml:space="preserve">
          <source>cdh - change to a recently visited directory</source>
          <target state="translated">cdh-최근에 방문한 디렉토리로 변경</target>
        </trans-unit>
        <trans-unit id="0f8e267ee0d75f9ceaa9ed7d8f182c646d73ba65" translate="yes" xml:space="preserve">
          <source>change your default shell with &lt;code&gt;chsh -s&lt;/code&gt; to &lt;code&gt;/usr/local/bin/fish&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;chsh -s&lt;/code&gt; 를 사용하여 기본 쉘 을 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="5e34f23f38ab45826a2bdcf27d4377c9ac5d76cf" translate="yes" xml:space="preserve">
          <source>clears and repaints the screen.</source>
          <target state="translated">clears and repaints the screen.</target>
        </trans-unit>
        <trans-unit id="31f6019ad1d4a3bfe84e04d66db81025c01b2d52" translate="yes" xml:space="preserve">
          <source>combination accept the suggestion.</source>
          <target state="translated">combination accept the suggestion.</target>
        </trans-unit>
        <trans-unit id="1925f793093581c47a5c6b2e414506b1cbae280d" translate="yes" xml:space="preserve">
          <source>command</source>
          <target state="translated">command</target>
        </trans-unit>
        <trans-unit id="919a6f5c6816036eaffc9cdb1996a015acf915b7" translate="yes" xml:space="preserve">
          <source>command - run a program</source>
          <target state="translated">명령-프로그램을 실행</target>
        </trans-unit>
        <trans-unit id="92df95e63882bc424c741ba3025a247583b8fe73" translate="yes" xml:space="preserve">
          <source>commandline</source>
          <target state="translated">commandline</target>
        </trans-unit>
        <trans-unit id="bcf389e72583580fd4176da0b6e9a5409c5718c2" translate="yes" xml:space="preserve">
          <source>commandline - set or get the current command line buffer</source>
          <target state="translated">commandline-현재 명령 행 버퍼를 설정하거나 얻는다</target>
        </trans-unit>
        <trans-unit id="0737c22d3bfae812339732d14d8c7dbd6dc4e09c" translate="yes" xml:space="preserve">
          <source>complete</source>
          <target state="translated">complete</target>
        </trans-unit>
        <trans-unit id="b1b90f2b3d099b292abc0be14142c4ee0c55e03b" translate="yes" xml:space="preserve">
          <source>complete - edit command specific tab-completions</source>
          <target state="translated">완료-명령 특정 탭 완성 편집</target>
        </trans-unit>
        <trans-unit id="2ff8f23788bde12a2d012f6275074c6cc58ff72b" translate="yes" xml:space="preserve">
          <source>completes the current token and starts the pager's search mode.</source>
          <target state="translated">completes the current token and starts the pager's search mode.</target>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="translated">contains</target>
        </trans-unit>
        <trans-unit id="904d39bd3ceac4decbc721c45054ed1c4b2c7fdb" translate="yes" xml:space="preserve">
          <source>contains - test if a word is present in a list</source>
          <target state="translated">contains-단어가 목록에 있는지 테스트</target>
        </trans-unit>
        <trans-unit id="eee0bbba4ff92adbeb038a77df0466d660f15716" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">continue</target>
        </trans-unit>
        <trans-unit id="3dcfedcccb8d23e7c6644e8aaa4e93528f238e86" translate="yes" xml:space="preserve">
          <source>continue - skip the remainder of the current iteration of the current inner loop</source>
          <target state="translated">계속-현재 내부 루프의 현재 반복의 나머지 부분을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="e34084787bcc0b0e04c74d4a84f033412ea14695" translate="yes" xml:space="preserve">
          <source>copies the current buffer to the system's clipboard,</source>
          <target state="translated">copies the current buffer to the system's clipboard,</target>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="59de67cb7425f65282c5b5947590b3071f8a17f9" translate="yes" xml:space="preserve">
          <source>count - count the number of elements of a list</source>
          <target state="translated">count - count the number of elements of a list</target>
        </trans-unit>
        <trans-unit id="f9695c7d17d44b126e144bc1e4fd9b6da6439c0b" translate="yes" xml:space="preserve">
          <source>count - count the number of elements of an array</source>
          <target state="translated">count-배열의 요소 수를 센다</target>
        </trans-unit>
        <trans-unit id="3c363836cf4e16666669a25da280a1865c2d2874" translate="yes" xml:space="preserve">
          <source>d</source>
          <target state="translated">d</target>
        </trans-unit>
        <trans-unit id="e5849af203212dcf36a9f6a46b9d9862ea9a26a6" translate="yes" xml:space="preserve">
          <source>delete one character to the right of the cursor. If the command line is empty,</source>
          <target state="translated">커서 오른쪽에있는 한 문자를 삭제합니다. 명령 줄이 비어 있으면</target>
        </trans-unit>
        <trans-unit id="5cffd36f6ec1001c783eefdf056b75d55122bd7c" translate="yes" xml:space="preserve">
          <source>deletes text after the current cursor position and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">현재 커서 위치 뒤의 텍스트를 삭제하고 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="87dee869fed16490a9210cc0a9b9d345dd2e50aa" translate="yes" xml:space="preserve">
          <source>deletes the current line and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">현재 줄을 삭제하고 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="3e96454870cb43583623cd6fd2ede60817e93fe7" translate="yes" xml:space="preserve">
          <source>dirh</source>
          <target state="translated">dirh</target>
        </trans-unit>
        <trans-unit id="0c8c1d4815753a4a62148f6267504e711947a5a6" translate="yes" xml:space="preserve">
          <source>dirh - print directory history</source>
          <target state="translated">dirh-디렉토리 기록 인쇄</target>
        </trans-unit>
        <trans-unit id="4d47d2db541c41663c8c0bc2b1795aa88c209d4d" translate="yes" xml:space="preserve">
          <source>dirs</source>
          <target state="translated">dirs</target>
        </trans-unit>
        <trans-unit id="d78b6ac49770a83c7c282f2a24eb1a12e41b5ef0" translate="yes" xml:space="preserve">
          <source>dirs - print directory stack</source>
          <target state="translated">dirs-인쇄 디렉토리 스택</target>
        </trans-unit>
        <trans-unit id="77fb8c7001cf43bb0d35233857e7d8456613a043" translate="yes" xml:space="preserve">
          <source>disables (useful with informative status)</source>
          <target state="translated">비활성화 (정보 상태에 유용함)</target>
        </trans-unit>
        <trans-unit id="9b66695fe2c105488ed57178ad21457b4a8f4d6d" translate="yes" xml:space="preserve">
          <source>disown</source>
          <target state="translated">disown</target>
        </trans-unit>
        <trans-unit id="58603ac8c3e3cdf452a31e52281bae95d4d75e55" translate="yes" xml:space="preserve">
          <source>disown - remove a process from the list of jobs</source>
          <target state="translated">disown-작업 목록에서 프로세스 제거</target>
        </trans-unit>
        <trans-unit id="b2d21e771d9f86865c5eff193663574dd1796c8f" translate="yes" xml:space="preserve">
          <source>echo</source>
          <target state="translated">echo</target>
        </trans-unit>
        <trans-unit id="3da22d7a242ac6222e2c07ce546b9e4c6dd38dd1" translate="yes" xml:space="preserve">
          <source>echo - display a line of text</source>
          <target state="translated">echo-한 줄의 텍스트를 표시</target>
        </trans-unit>
        <trans-unit id="8a35cae02bb880056f0ac5a1e04b7f10ce77e531" translate="yes" xml:space="preserve">
          <source>edit the current command line in an external editor. The editor is chosen from the first available of the &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; variables.</source>
          <target state="translated">외부 편집기에서 현재 명령 줄을 편집합니다. 편집기는 &lt;code&gt;$VISUAL&lt;/code&gt; 또는 &lt;code&gt;$EDITOR&lt;/code&gt; 변수 중 사용 가능한 첫 번째 변수에서 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="ae050f5b7fb8d383d62139276081853b47e7a03e" translate="yes" xml:space="preserve">
          <source>else</source>
          <target state="translated">else</target>
        </trans-unit>
        <trans-unit id="b25854c62e2574da9e59aea193dfc09880feb717" translate="yes" xml:space="preserve">
          <source>else - execute command if a condition is not met</source>
          <target state="translated">else-조건이 충족되지 않으면 명령을 실행합니다</target>
        </trans-unit>
        <trans-unit id="2e96e89125f4c1aef797410a4bfdb32c0632ef0c" translate="yes" xml:space="preserve">
          <source>emit</source>
          <target state="translated">emit</target>
        </trans-unit>
        <trans-unit id="bf4da1905dbefff0b501f9e43f751404b18c712b" translate="yes" xml:space="preserve">
          <source>emit - Emit a generic event</source>
          <target state="translated">방출-일반 이벤트 방출</target>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="translated">end</target>
        </trans-unit>
        <trans-unit id="786c7d3478f2ca103089368c16db1f80f0f9c7cb" translate="yes" xml:space="preserve">
          <source>end - end a block of commands.</source>
          <target state="translated">끝-명령 블록을 끝냅니다.</target>
        </trans-unit>
        <trans-unit id="78c853c4f43b7d62ab249976f55605258348a45a" translate="yes" xml:space="preserve">
          <source>enter &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드로&lt;/a&gt; 들어 갑니다 .</target>
        </trans-unit>
        <trans-unit id="1611c989a5745a16fb4913e4f85f9a32bd1bd215" translate="yes" xml:space="preserve">
          <source>enters &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="613ee0a8e2ba9e0299e5f63dc7a2f96ca08b5852" translate="yes" xml:space="preserve">
          <source>enters &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;. The commands available in command, insert and visual mode are described below. Vi mode shares &lt;a href=&quot;#shared-binds&quot;&gt;some bindings&lt;/a&gt; with &lt;a href=&quot;#emacs-mode&quot;&gt;Emacs mode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드&lt;/a&gt; 로 들어갑니다 . 명령, 삽입 및 시각적 모드에서 사용할 수있는 명령은 아래에 설명되어 있습니다. Vi 모드는 &lt;a href=&quot;#emacs-mode&quot;&gt;Emacs 모드&lt;/a&gt; 와 &lt;a href=&quot;#shared-binds&quot;&gt;일부 바인딩&lt;/a&gt; 을 공유 합니다 .</target>
        </trans-unit>
        <trans-unit id="31876e7d3376511a3d680ed627dcf35af506928b" translate="yes" xml:space="preserve">
          <source>enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; after the current cursor position.</source>
          <target state="translated">현재 커서 위치 뒤에 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="3cf8fd21cdf0d4b2e0e785d3085af77bbf417e7c" translate="yes" xml:space="preserve">
          <source>enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the current cursor position.</source>
          <target state="translated">현재 커서 위치에서 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="3cde80ce3aa7dfff663cee2a9a61ba4a6187d106" translate="yes" xml:space="preserve">
          <source>enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the end of the line.</source>
          <target state="translated">줄 끝에 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="8fed240d0be37008e91b2bf75e37519e03a9e689" translate="yes" xml:space="preserve">
          <source>enters &lt;a href=&quot;#vi-mode-visual&quot;&gt;visual mode&lt;/a&gt; at the current cursor position.</source>
          <target state="translated">현재 커서 위치에서 &lt;a href=&quot;#vi-mode-visual&quot;&gt;시각 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="822bc13e2d55b402eb4233cb23c9d414a7a03bc1" translate="yes" xml:space="preserve">
          <source>eval</source>
          <target state="translated">eval</target>
        </trans-unit>
        <trans-unit id="20a23908f3b688d4985f1907e61de8afef1f3a09" translate="yes" xml:space="preserve">
          <source>eval - evaluate the specified commands</source>
          <target state="translated">eval-지정된 명령을 평가</target>
        </trans-unit>
        <trans-unit id="d6b67c64ab0245670d93d1c04ab259906145f6c8" translate="yes" xml:space="preserve">
          <source>exactly matching tag</source>
          <target state="translated">정확히 일치하는 태그</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="766cd545cfc1fa64a7d4796ba64c27dc06bebbfc" translate="yes" xml:space="preserve">
          <source>exec - execute command in current process</source>
          <target state="translated">exec-현재 프로세스에서 명령 실행</target>
        </trans-unit>
        <trans-unit id="de3ac21778e51de199438300e1a9f816c618d33a" translate="yes" xml:space="preserve">
          <source>exit</source>
          <target state="translated">exit</target>
        </trans-unit>
        <trans-unit id="471719c1d7f23f2fb831651b4dd0b2d996e8d915" translate="yes" xml:space="preserve">
          <source>exit - exit the shell</source>
          <target state="translated">종료-쉘을 종료</target>
        </trans-unit>
        <trans-unit id="1f1d34dad3631e0d5c7485c8836f5d8c39c4d91d" translate="yes" xml:space="preserve">
          <source>extend the selection backward/forward by one word.</source>
          <target state="translated">선택 영역을 한 단어 뒤로 / 앞으로 확장합니다.</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="6f9d12a083b81d8fbe0b94c63c69b42fb349ddbb" translate="yes" xml:space="preserve">
          <source>false - return an unsuccessful result</source>
          <target state="translated">false-실패한 결과를 반환</target>
        </trans-unit>
        <trans-unit id="72f77e84ba0149b2af1051f1318128dccf60ab60" translate="yes" xml:space="preserve">
          <source>fg</source>
          <target state="translated">fg</target>
        </trans-unit>
        <trans-unit id="d57e75549526546c15d5c9fb8e07df72a8c58c81" translate="yes" xml:space="preserve">
          <source>fg - bring job to foreground</source>
          <target state="translated">fg-작업을 포 그라운드로 가져 오기</target>
        </trans-unit>
        <trans-unit id="64875fcccaac069fcb3e0e201e7d5b9166641608" translate="yes" xml:space="preserve">
          <source>fish</source>
          <target state="translated">fish</target>
        </trans-unit>
        <trans-unit id="72e0e125205009a2096ed8c57d1f27ec4b75c74b" translate="yes" xml:space="preserve">
          <source>fish - the friendly interactive shell</source>
          <target state="translated">물고기-친절한 대화식 쉘</target>
        </trans-unit>
        <trans-unit id="55daf0fb67b0105e5fee42d2b43a9981fcc9b191" translate="yes" xml:space="preserve">
          <source>fish also supports &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt;. The first two are job modifiers and have lower precedence. Example usage:</source>
          <target state="translated">물고기도 지원 &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; 하고 &lt;code&gt;not&lt;/code&gt; . 처음 두 가지는 작업 수정 자이며 우선 순위가 낮습니다. 사용법 예 :</target>
        </trans-unit>
        <trans-unit id="222984700a96071cdc545cf72927a51314eafb1d" translate="yes" xml:space="preserve">
          <source>fish provides a &lt;code&gt;realpath&lt;/code&gt; builtin as a fallback for systems where there is no &lt;code&gt;realpath&lt;/code&gt; command. fish's implementation always resolves its first argument, and does not support any options.</source>
          <target state="translated">fish는 &lt;code&gt;realpath&lt;/code&gt; 명령 이없는 시스템에 대한 폴백으로 내장 된 &lt;code&gt;realpath&lt;/code&gt; 를 제공합니다 . fish의 구현은 항상 첫 번째 인수를 해결하며 옵션을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="748b7372efd9b1dd56d5823eabafaed87c1eaa69" translate="yes" xml:space="preserve">
          <source>fish suggests commands as you type, based on &lt;a href=&quot;#history-search&quot;&gt;command history&lt;/a&gt;, completions, and valid file paths. As you type commands, you will see a suggestion offered after the cursor, in a muted gray color (which can be changed with the &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; variable).</source>
          <target state="translated">fish는 &lt;a href=&quot;#history-search&quot;&gt;명령 내역&lt;/a&gt; , 완성 및 유효한 파일 경로를 기반으로 입력 할 때 명령을 제안합니다 . 명령을 입력 할 때 커서 뒤에 제안 된 제안이 음소거 된 회색으로 표시됩니다 ( &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; 변수 로 변경할 수 있음 ).</target>
        </trans-unit>
        <trans-unit id="d0b6a9d36699331ac1f0bb6a1d6c28f0fee1e9d4" translate="yes" xml:space="preserve">
          <source>fish suggests commands as you type, based on command history, completions, and valid file paths. As you type commands, you will see a suggestion offered after the cursor, in a muted gray color (which can be changed with the &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; variable).</source>
          <target state="translated">fish는 명령 기록, 완료 및 유효한 파일 경로를 기반으로 입력 할 때 명령을 제안합니다. 명령을 입력 할 때 커서 다음에 제안이 회색으로 표시됩니다 ( &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; 변수 로 변경할 수 있음 ).</target>
        </trans-unit>
        <trans-unit id="68f36d0bf0f877357b61f16b465f75cb1a85b6d8" translate="yes" xml:space="preserve">
          <source>fish supports launching in private mode via &lt;code&gt;fish --private&lt;/code&gt; (or &lt;code&gt;fish -P&lt;/code&gt; for short). In private mode, old history is not available and any interactive commands you execute will not be appended to the global history file, making it useful both for avoiding inadvertently leaking personal information (e.g. for screencasts) and when dealing with sensitive information to prevent it being persisted to disk. You can query the global variable &lt;code&gt;fish_private_mode&lt;/code&gt; (&lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt;) if you would like to respect the user's wish for privacy and alter the behavior of your own fish scripts.</source>
          <target state="translated">fish는 &lt;code&gt;fish --private&lt;/code&gt; (또는 &lt;code&gt;fish -P&lt;/code&gt; ) 를 통해 개인 모드로 실행을 지원합니다 . 개인 모드에서는 이전 기록을 사용할 수 없으며 실행하는 대화식 명령이 전역 기록 파일에 추가되지 않으므로 개인 정보가 실수로 유출되는 것을 방지하고 (예 : 스크린 캐스트) 민감한 정보를 처리하여 정보 유출을 방지하는 데 유용합니다. 디스크에 지속. 개인 정보 보호에 대한 사용자의 희망을 존중하고 자신의 피쉬 스크립트의 동작을 변경 하려면 글로벌 변수 &lt;code&gt;fish_private_mode&lt;/code&gt; ( &lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt; )를 쿼리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="fc5fb57f283dee1048e3856d260160c79127450e" translate="yes" xml:space="preserve">
          <source>fish supports launching in private mode via &lt;code&gt;fish --private&lt;/code&gt; (or &lt;code&gt;fish -P&lt;/code&gt; for short). In private mode, old history is not available and any interactive commands you execute will not be appended to the global history file, making it useful both for avoiding inadvertently leaking personal information (e.g. for screencasts) and when dealing with sensitive information to prevent it being persisted to disk. You can query the global variable &lt;code&gt;fish_private_mode`&lt;/code&gt; (&lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt;) if you would like to respect the user's wish for privacy and alter the behavior of your own fish scripts.</source>
          <target state="translated">fish는 &lt;code&gt;fish --private&lt;/code&gt; (또는 줄여서 &lt;code&gt;fish -P&lt;/code&gt; ) 를 통해 비공개 모드로 시작하는 것을 지원합니다 . 비공개 모드에서는 이전 기록을 사용할 수 없으며 실행하는 대화 형 명령이 전역 기록 파일에 추가되지 않으므로 실수로 개인 정보 (예 : 스크린 캐스트)가 유출되는 것을 방지하고 민감한 정보를 처리하여 정보가 유출되는 것을 방지하는 데 유용합니다. 디스크에 유지됩니다. 프라이버시에 대한 사용자의 바람을 존중하고 자신의 피쉬 스크립트의 동작을 변경 하려면 전역 변수 &lt;code&gt;fish_private_mode`&lt;/code&gt; ( &lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt; 쿼리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c4f6d7aed742643b6fbdc12202fe3db52010252" translate="yes" xml:space="preserve">
          <source>fish supports the familiar &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; to combine commands, and &lt;code&gt;!&lt;/code&gt; to negate them:</source>
          <target state="translated">물고기는 친숙한 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 및 &lt;code&gt;||&lt;/code&gt; 명령을 결합하고 &lt;code&gt;!&lt;/code&gt; 그들을 부정하기 위해 :</target>
        </trans-unit>
        <trans-unit id="18585084ed30bb889b3339262219e49ab2ae44bd" translate="yes" xml:space="preserve">
          <source>fish tutorial</source>
          <target state="translated">물고기 튜토리얼</target>
        </trans-unit>
        <trans-unit id="e38ee0bf5543635cc29b0705bc553f53fdbdff93" translate="yes" xml:space="preserve">
          <source>fish waits for a period after receiving the escape character, to determine whether it is standalone or part of an escape sequence. While waiting, additional key presses make the escape key behave as a meta key. If no other key presses come in, it is handled as a standalone escape. The waiting period is set to 30 milliseconds (0.03 seconds). It can be configured by setting the &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; variable to a value between 10 and 5000 ms. This can be a universal variable that you set once from an interactive session.</source>
          <target state="translated">fish는 이스케이프 문자를받은 후 일정 기간 동안 기다렸다가 독립형인지 아니면 이스케이프 시퀀스의 일부인지 확인합니다. 기다리는 동안 추가 키를 누르면 이스케이프 키가 메타 키로 작동합니다. 다른 키 누름이 들어오지 않으면 독립형 이스케이프로 처리됩니다. 대기 기간은 30 밀리 초 (0.03 초)로 설정됩니다. &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 변수를 10 ~ 5000ms 사이의 값 으로 설정하여 구성 할 수 있습니다 . 이것은 대화식 세션에서 한 번 설정 한 범용 변수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55dedfb95373873760b0ed9625c82cb35531172a" translate="yes" xml:space="preserve">
          <source>fish waits for a period after receiving the escape character, to determine whether it is standalone or part of an escape sequence. While waiting, additional key presses make the escape key behave as a meta key. If no other key presses come in, it is handled as a standalone escape. The waiting period is set to 300 milliseconds (0.3 seconds) in the default key bindings and 10 milliseconds in the vi key bindings. It can be configured by setting the &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; variable to a value between 10 and 5000 ms. It is recommended that this be a universal variable that you set once from an interactive session.</source>
          <target state="translated">피쉬는 이스케이프 문자를받은 후 일정 시간 동안 기다렸다가 독립형인지 이스케이프 시퀀스의 일부인지 확인합니다. 기다리는 동안 추가 키를 누르면 이스케이프 키가 메타 키처럼 동작합니다. 다른 키를 누르지 않으면 독립형 이스케이프로 처리됩니다. 대기 시간은 기본 키 바인딩에서 300 밀리 초 (0.3 초)로 설정되고 vi 키 바인딩에서 10 밀리 초로 설정됩니다. &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 변수를 10 ~ 5000ms 사이의 값 으로 설정하여 구성 할 수 있습니다 . 이는 대화식 세션에서 한 번 설정 한 범용 변수 인 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="abf9c62eef69a54eb44651e33eda2a44d1dca445" translate="yes" xml:space="preserve">
          <source>fish will search the working directory to resolve relative paths but will not search &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">fish는 상대 경로를 확인하기 위해 작업 디렉토리를 검색하지만 &lt;code&gt;$PATH&lt;/code&gt; 는 검색하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="baba6f248a72657be16047fe4da7199bc44ea8e3" translate="yes" xml:space="preserve">
          <source>fish_breakpoint_prompt</source>
          <target state="translated">fish_breakpoint_prompt</target>
        </trans-unit>
        <trans-unit id="d7bd245d8c242e03fae1578420c74d8093b0ee04" translate="yes" xml:space="preserve">
          <source>fish_breakpoint_prompt - define the appearance of the command line prompt when in the context of a `breakpoint` command</source>
          <target state="translated">fish_breakpoint_prompt-`breakpoint` 명령의 맥락에서 명령 행 프롬프트의 모양을 정의</target>
        </trans-unit>
        <trans-unit id="d49c2ef4b57b598087337113d1824db33c3dabe8" translate="yes" xml:space="preserve">
          <source>fish_breakpoint_prompt - define the prompt when stopped at a breakpoint</source>
          <target state="translated">fish_breakpoint_prompt-중단 점에서 중지 될 때 프롬프트를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="5a3fc1d157b0191f6866ceecc3630a982089cde4" translate="yes" xml:space="preserve">
          <source>fish_config</source>
          <target state="translated">fish_config</target>
        </trans-unit>
        <trans-unit id="183a6fdb6a00d86295de833100112576b1cb4834" translate="yes" xml:space="preserve">
          <source>fish_config - start the web-based configuration interface</source>
          <target state="translated">fish_config-웹 기반 구성 인터페이스 시작</target>
        </trans-unit>
        <trans-unit id="80c37ba015f83d7a3e2f71fbb9b9eb9dd84b5cde" translate="yes" xml:space="preserve">
          <source>fish_git_prompt</source>
          <target state="translated">fish_git_prompt</target>
        </trans-unit>
        <trans-unit id="988a403d0cc4b10857d6674a0da005fecc996685" translate="yes" xml:space="preserve">
          <source>fish_git_prompt - output git information for use in a prompt</source>
          <target state="translated">fish_git_prompt-프롬프트에서 사용할 git 정보 출력</target>
        </trans-unit>
        <trans-unit id="5837785a59c5b2d1a9b0cd038c2ec8f11e814cd9" translate="yes" xml:space="preserve">
          <source>fish_hg_prompt</source>
          <target state="translated">fish_hg_prompt</target>
        </trans-unit>
        <trans-unit id="1f98446d2550b0b4be8deef250f3469d31906217" translate="yes" xml:space="preserve">
          <source>fish_hg_prompt - output Mercurial information for use in a prompt</source>
          <target state="translated">fish_hg_prompt-프롬프트에서 사용할 Mercurial 정보 출력</target>
        </trans-unit>
        <trans-unit id="2397e0dc3855f2a5c3c894e107875e26a08a4480" translate="yes" xml:space="preserve">
          <source>fish_indent</source>
          <target state="translated">fish_indent</target>
        </trans-unit>
        <trans-unit id="c6e19f4ee30f4e23e4160409b9be9c8d16942cd4" translate="yes" xml:space="preserve">
          <source>fish_indent - indenter and prettifier</source>
          <target state="translated">fish_indent-들여 쓰기 및 prettifier</target>
        </trans-unit>
        <trans-unit id="127fb90e55ea67e053d705088a841052da6eef7c" translate="yes" xml:space="preserve">
          <source>fish_key_reader</source>
          <target state="translated">fish_key_reader</target>
        </trans-unit>
        <trans-unit id="69a0ebb11cb1a759ede45515c0024c4ec8c9ee18" translate="yes" xml:space="preserve">
          <source>fish_key_reader - explore what characters keyboard keys send</source>
          <target state="translated">fish_key_reader-키보드 키가 보내는 문자 탐색</target>
        </trans-unit>
        <trans-unit id="b07df081e3eda23a685e0d24569437ba4ab4a6ff" translate="yes" xml:space="preserve">
          <source>fish_mode_prompt</source>
          <target state="translated">fish_mode_prompt</target>
        </trans-unit>
        <trans-unit id="753b48a0cc344eee0593915eb34429a7626e167e" translate="yes" xml:space="preserve">
          <source>fish_mode_prompt - define the appearance of the mode indicator</source>
          <target state="translated">fish_mode_prompt-모드 표시기의 모양을 정의합니다</target>
        </trans-unit>
        <trans-unit id="d8a60c1368f75899d925231c0c91e8006af306b3" translate="yes" xml:space="preserve">
          <source>fish_mode_prompt will be executed when the vi mode changes. If it produces any output, it is displayed and used. If it does not, the other prompt functions (&lt;a href=&quot;fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; and &lt;a href=&quot;fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt;) will be executed as well in case they contain a mode display.</source>
          <target state="translated">vi 모드가 변경되면 fish_mode_prompt가 실행됩니다. 출력을 생성하면 표시되고 사용됩니다. 그렇지 않은 경우 다른 프롬프트 기능 ( &lt;a href=&quot;fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; 및 &lt;a href=&quot;fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt; )도 모드 디스플레이를 포함하는 경우 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="3c9b15ad3294d2aa5aa52ac9e2632d2eae53e420" translate="yes" xml:space="preserve">
          <source>fish_opt</source>
          <target state="translated">fish_opt</target>
        </trans-unit>
        <trans-unit id="543365accaae619eee02dcae6dea132a363085b7" translate="yes" xml:space="preserve">
          <source>fish_opt - create an option spec for the argparse command</source>
          <target state="translated">fish_opt-argparse 명령에 대한 옵션 스펙 작성</target>
        </trans-unit>
        <trans-unit id="6501c27fb0858cd3f54b84ab4f9f296d0dda8c9c" translate="yes" xml:space="preserve">
          <source>fish_prompt</source>
          <target state="translated">fish_prompt</target>
        </trans-unit>
        <trans-unit id="cd788e8b2b186c68bc7b4e563896df245043a589" translate="yes" xml:space="preserve">
          <source>fish_prompt - define the appearance of the command line prompt</source>
          <target state="translated">fish_prompt-명령 행 프롬프트의 모양을 정의합니다</target>
        </trans-unit>
        <trans-unit id="f78d4c9641a64c769e933588d8994ca394327414" translate="yes" xml:space="preserve">
          <source>fish_right_prompt</source>
          <target state="translated">fish_right_prompt</target>
        </trans-unit>
        <trans-unit id="4f1afbb85b31538c97624a72a30d55414589b49a" translate="yes" xml:space="preserve">
          <source>fish_right_prompt - define the appearance of the right-side command line prompt</source>
          <target state="translated">fish_right_prompt-오른쪽 명령 줄 프롬프트의 모양을 정의합니다</target>
        </trans-unit>
        <trans-unit id="8a35a9a45f6389e1ded3d249e4ecc9ea5cdd7faf" translate="yes" xml:space="preserve">
          <source>fish_svn_prompt</source>
          <target state="translated">fish_svn_prompt</target>
        </trans-unit>
        <trans-unit id="35f6db35d8227e14ee8aeddb0824a4bdf714d209" translate="yes" xml:space="preserve">
          <source>fish_svn_prompt - output Subversion information for use in a prompt</source>
          <target state="translated">fish_svn_prompt-프롬프트에서 사용할 Subversion 정보 출력</target>
        </trans-unit>
        <trans-unit id="8b339b0c658d3c4228467574152fa75f2375b32e" translate="yes" xml:space="preserve">
          <source>fish_update_completions</source>
          <target state="translated">fish_update_completions</target>
        </trans-unit>
        <trans-unit id="90c9f004ea4a216adfd9c72340b8112edb288283" translate="yes" xml:space="preserve">
          <source>fish_update_completions - Update completions using manual pages</source>
          <target state="translated">fish_update_completions-매뉴얼 페이지를 사용한 업데이트 완료</target>
        </trans-unit>
        <trans-unit id="bd50df98060da2cf54adb7f59a9a4dd79db279e1" translate="yes" xml:space="preserve">
          <source>fish_vcs_prompt</source>
          <target state="translated">fish_vcs_prompt</target>
        </trans-unit>
        <trans-unit id="7597a13b7b2c6c4640c66c7da344c387704d0b58" translate="yes" xml:space="preserve">
          <source>fish_vcs_prompt - output version control system information for use in a prompt</source>
          <target state="translated">fish_vcs_prompt-프롬프트에서 사용할 버전 제어 시스템 정보 출력</target>
        </trans-unit>
        <trans-unit id="f76de474163a63c296945fcd9d696f36636c8aef" translate="yes" xml:space="preserve">
          <source>fish_vi_mode</source>
          <target state="translated">fish_vi_mode</target>
        </trans-unit>
        <trans-unit id="410186a970357c931e2a7dec30a37b5a1e74ebea" translate="yes" xml:space="preserve">
          <source>fish_vi_mode - Enable vi mode</source>
          <target state="translated">fish_vi_mode-vi 모드 사용</target>
        </trans-unit>
        <trans-unit id="43eef9a62abb8b1e1654f8a890aae054abffa82b" translate="yes" xml:space="preserve">
          <source>for</source>
          <target state="translated">for</target>
        </trans-unit>
        <trans-unit id="6aa32fad737b7aa5ceaccf76038f5bbfb35631a8" translate="yes" xml:space="preserve">
          <source>for - perform a set of commands multiple times.</source>
          <target state="translated">for-일련의 명령을 여러 번 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="dad671313b8de2fbdfd2199c6273613037ba0a43" translate="yes" xml:space="preserve">
          <source>for emacs aficionados) search the command history for the previous/next command containing the string that was specified on the commandline before the search was started. If the commandline was empty when the search started, all commands match. See the &lt;a href=&quot;#history-search&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">emacs 애호가의 경우) 검색이 시작되기 전에 명령 줄에 지정된 문자열이 포함 된 이전 / 다음 명령에 대한 명령 기록을 검색합니다. 검색을 시작할 때 명령 줄이 비어 있으면 모든 명령이 일치합니다. 히스토리 검색에 대한 자세한 내용은 &lt;a href=&quot;#history-search&quot;&gt;히스토리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c039c214c3b0d96340e4ef72f733eedd0388e42d" translate="yes" xml:space="preserve">
          <source>funced</source>
          <target state="translated">funced</target>
        </trans-unit>
        <trans-unit id="0816bc375ac09bd74efea8d7a85a93023e8ffa5a" translate="yes" xml:space="preserve">
          <source>funced - edit a function interactively</source>
          <target state="translated">funced-대화식으로 함수 편집</target>
        </trans-unit>
        <trans-unit id="3bc1aee64f9e2c4c5efada178ad6165cab6377cc" translate="yes" xml:space="preserve">
          <source>funcsave</source>
          <target state="translated">funcsave</target>
        </trans-unit>
        <trans-unit id="2f69307df7e91d4902cb35c04dd61609789e8b05" translate="yes" xml:space="preserve">
          <source>funcsave - save the definition of a function to the user's autoload directory</source>
          <target state="translated">funcsave-함수의 정의를 사용자의 자동로드 디렉토리에 저장</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="bf41a97c9825ae2e3550fdddcd8aaf42e45d7245" translate="yes" xml:space="preserve">
          <source>function - create a function</source>
          <target state="translated">함수-함수를 만듭니다</target>
        </trans-unit>
        <trans-unit id="2f887def33825e52ffbcca83446cfd6a6f676ff7" translate="yes" xml:space="preserve">
          <source>functions</source>
          <target state="translated">functions</target>
        </trans-unit>
        <trans-unit id="a2dd0c9d390ee256fa9d3c2d2857526a5930b073" translate="yes" xml:space="preserve">
          <source>functions - print or erase functions</source>
          <target state="translated">기능-인쇄 또는 지우기 기능</target>
        </trans-unit>
        <trans-unit id="27d5482eebd075de44389774fce28c69f45c8a75" translate="yes" xml:space="preserve">
          <source>h</source>
          <target state="translated">h</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="90df5c81817176fc99bd4d5ed355b097e8ac84fe" translate="yes" xml:space="preserve">
          <source>help - display fish documentation</source>
          <target state="translated">도움말-물고기 문서 표시</target>
        </trans-unit>
        <trans-unit id="66f79d8a6327c82c9033e6d65ff03322a3766c87" translate="yes" xml:space="preserve">
          <source>history</source>
          <target state="translated">history</target>
        </trans-unit>
        <trans-unit id="9c54bcb9992fb9affc2aedd28a291f6b1a369e0b" translate="yes" xml:space="preserve">
          <source>history - Show and manipulate command history</source>
          <target state="translated">history-명령 기록 표시 및 조작</target>
        </trans-unit>
        <trans-unit id="042dc4512fa3d391c5170cf3aa61e6a638f84342" translate="yes" xml:space="preserve">
          <source>i</source>
          <target state="translated">i</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="f95ea4c87a089d830126713a97723833a9fd76fc" translate="yes" xml:space="preserve">
          <source>if - conditionally execute a command</source>
          <target state="translated">if-조건부 명령 실행</target>
        </trans-unit>
        <trans-unit id="e7efe9f9f5daf4facdb7f8849108466d375fcd80" translate="yes" xml:space="preserve">
          <source>if verbose, then also show the upstream abbrev name</source>
          <target state="translated">장황한 경우 업스트림 약어 이름도 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f3f5037badc2e2c2c7bc7fd66352a068872f4aad" translate="yes" xml:space="preserve">
          <source>inserts the clipboard contents.</source>
          <target state="translated">클립 보드 내용을 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="0a8a058b75e59ed14dfbe75551d2e994ddeca8ef" translate="yes" xml:space="preserve">
          <source>instead of pressing the</source>
          <target state="translated">누르는 대신</target>
        </trans-unit>
        <trans-unit id="6943267c3cc92fed9546683aff6196a5d7827d1b" translate="yes" xml:space="preserve">
          <source>is pressed.</source>
          <target state="translated">를 누릅니다.</target>
        </trans-unit>
        <trans-unit id="24def2dc36d8c488f6dd73f146437207b25f618c" translate="yes" xml:space="preserve">
          <source>isatty</source>
          <target state="translated">isatty</target>
        </trans-unit>
        <trans-unit id="495c444539904f50ab2eb055497a10578ed98cb2" translate="yes" xml:space="preserve">
          <source>isatty - test if a file descriptor is a terminal</source>
          <target state="translated">isatty-파일 설명자가 터미널인지 테스트</target>
        </trans-unit>
        <trans-unit id="3cfe607d872677db1789d97ef106886f84f5899b" translate="yes" xml:space="preserve">
          <source>isatty - test if a file descriptor is a tty.</source>
          <target state="translated">isatty-파일 디스크립터가 tty인지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="638dbc85cd3410c50689528013eccaae778361f3" translate="yes" xml:space="preserve">
          <source>it will print &lt;code&gt;xax xbx xcx&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;xax xbx xcx&lt;/code&gt; 를 인쇄 합니다.</target>
        </trans-unit>
        <trans-unit id="6966922100bf006356af2b9098e6ba3b1c190226" translate="yes" xml:space="preserve">
          <source>jobs</source>
          <target state="translated">jobs</target>
        </trans-unit>
        <trans-unit id="2c0538a731bda1d0b48cf0b71c7f1eea39760d56" translate="yes" xml:space="preserve">
          <source>jobs - print currently running jobs</source>
          <target state="translated">jobs-현재 실행중인 작업을 인쇄</target>
        </trans-unit>
        <trans-unit id="eab8b533a9af65bf25991bce5aab55764e3ca4e8" translate="yes" xml:space="preserve">
          <source>jobs accepts the following switches:</source>
          <target state="translated">작업은 다음 스위치를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8f738c76e2319d73e5c816f0ce16cec21cdd89e1" translate="yes" xml:space="preserve">
          <source>key is pressed.</source>
          <target state="translated">키를 눌렀습니다.</target>
        </trans-unit>
        <trans-unit id="951060f3cd7650cf1693827a21a8db25f4c59767" translate="yes" xml:space="preserve">
          <source>key while a block of commands is unclosed, such as when one or more block commands such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; do not have a corresponding &lt;code&gt;end&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; , &lt;code&gt;begin&lt;/code&gt; 과 같은 하나 이상의 블록 명령 이 있거나 해당하는 &lt;code&gt;end&lt;/code&gt; 명령 이없는 &lt;code&gt;if&lt;/code&gt; 와 같이 명령 블록이 닫히지 않은 동안 키를 누릅니다 .</target>
        </trans-unit>
        <trans-unit id="ee92ef620e004d80c407877f1cef6a8e2e5af2b6" translate="yes" xml:space="preserve">
          <source>key, escaping the newline.</source>
          <target state="translated">키, 개행을 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="9f26320c343038d01b070c46deea8aa52d09d1d0" translate="yes" xml:space="preserve">
          <source>key.</source>
          <target state="translated">key.</target>
        </trans-unit>
        <trans-unit id="07c342be6e560e7f43842e2e21b774e61d85f047" translate="yes" xml:space="preserve">
          <source>l</source>
          <target state="translated">l</target>
        </trans-unit>
        <trans-unit id="b4f9e3666848201bd458ca9de89f99d8ad3f53ea" translate="yes" xml:space="preserve">
          <source>lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.</source>
          <target state="translated">커서가 디렉토리 인수 위에 있지 않으면 현재 디렉토리의 내용을 나열합니다.이 경우 해당 디렉토리의 내용이 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="5d3460d728d4d1a042039978e3562967d7338489" translate="yes" xml:space="preserve">
          <source>makes the current word uppercase.</source>
          <target state="translated">현재 단어를 대문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7a488390a939c4795cc1a801e51751d5f25d800d" translate="yes" xml:space="preserve">
          <source>math</source>
          <target state="translated">math</target>
        </trans-unit>
        <trans-unit id="ac55c69e1a4e4deadae82d7d2501bb6e8354689f" translate="yes" xml:space="preserve">
          <source>math - Perform mathematics calculations</source>
          <target state="translated">수학-수학 계산 수행</target>
        </trans-unit>
        <trans-unit id="754f3f5609418a8d6f9251e573d0ce5ec533d469" translate="yes" xml:space="preserve">
          <source>move the cursor one word left or right (to the next space or punctuation mark), or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available,</source>
          <target state="translated">커서를 왼쪽 또는 오른쪽으로 한 단어 이동 (다음 공백 또는 문장 부호로)하거나 명령 줄이 비어있는 경우 디렉토리 기록에서 앞 / 뒤로 이동합니다. 커서가 이미 줄 끝에 있고 자동 제안을 사용할 수있는 경우</target>
        </trans-unit>
        <trans-unit id="8e545b80456041b20ce96ff25fd4d08554304659" translate="yes" xml:space="preserve">
          <source>move the cursor one word left or right, without stopping on punctuation.</source>
          <target state="translated">구두점에서 멈추지 않고 커서를 왼쪽 또는 오른쪽으로 한 단어 이동합니다.</target>
        </trans-unit>
        <trans-unit id="7cb72c8ff53f50d135721e679ae4504f39dbf388" translate="yes" xml:space="preserve">
          <source>move the selection to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt; and enter &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;.</source>
          <target state="translated">선택 항목을 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동하고 &lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드로&lt;/a&gt; 들어 갑니다 .</target>
        </trans-unit>
        <trans-unit id="93742f4ce442879e2e535bc9c3eae0e6ee834055" translate="yes" xml:space="preserve">
          <source>moves contents from the beginning of line to the cursor to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">내용을 줄의 시작 부분에서 커서로 이동하여 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="f6b422cbd0efeacc58bf660f726cbd2a32bec5fc" translate="yes" xml:space="preserve">
          <source>moves contents from the cursor to the end of line to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">커서에서 줄 끝으로 내용을 이동하여 &lt;a href=&quot;#killring&quot;&gt;킬링으로 이동&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9344e913d6041c6ad76f66104b12d72b5a6be0a0" translate="yes" xml:space="preserve">
          <source>moves the cursor left.</source>
          <target state="translated">커서를 왼쪽으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="c5acf2f4e25970fba5b4ce153cee65b1e585ec59" translate="yes" xml:space="preserve">
          <source>moves the cursor right.</source>
          <target state="translated">커서를 오른쪽으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ddf26ba211fea631f0217fa67f90ba6aff875be0" translate="yes" xml:space="preserve">
          <source>moves the cursor to the beginning of the line.</source>
          <target state="translated">커서를 줄의 시작 부분으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="e511d654bfb9f1d9319fb06c8477f9679c5ccc74" translate="yes" xml:space="preserve">
          <source>moves the next word to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">다음 단어를 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="78eb09de4b920df8428c09dcad18d0ec32eb5b11" translate="yes" xml:space="preserve">
          <source>moves the previous path component (everything up to the previous &quot;/&quot;, &quot;:&quot; or &quot;@&quot;) to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">이전 경로 구성 요소 (이전 &quot;/&quot;, &quot;:&quot;또는 &quot;@&quot;까지의 &lt;a href=&quot;#killring&quot;&gt;모든 것&lt;/a&gt; )를 킬링으로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="0f14ff5cffde4dccfc08c6f54686ad249b8a50d3" translate="yes" xml:space="preserve">
          <source>moves to the end of line. If the cursor is already at the end of the line, and an autosuggestion is available,</source>
          <target state="translated">줄 끝으로 이동합니다. 커서가 이미 줄 끝에 있고 자동 제안을 사용할 수있는 경우</target>
        </trans-unit>
        <trans-unit id="5788f5d9921db1d9d54ea779e091c82300b105e9" translate="yes" xml:space="preserve">
          <source>nextd</source>
          <target state="translated">nextd</target>
        </trans-unit>
        <trans-unit id="5962cd086d9c9b34c1fe8730983fbd9559aed0f5" translate="yes" xml:space="preserve">
          <source>nextd - move forward through directory history</source>
          <target state="translated">nextd-디렉토리 히스토리를 통해 앞으로 이동</target>
        </trans-unit>
        <trans-unit id="d058f2cdd7781f829008a74cc23a43186eacb161" translate="yes" xml:space="preserve">
          <source>no output.</source>
          <target state="translated">출력이 없습니다.</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">not</target>
        </trans-unit>
        <trans-unit id="4575a330b9abc396835c8ef87416bed7db17b511" translate="yes" xml:space="preserve">
          <source>not - negate the exit status of a job</source>
          <target state="translated">not-작업 종료 상태를 무효화</target>
        </trans-unit>
        <trans-unit id="5fc7e38bffe00ca46add89145464a2eaf759d5c2" translate="yes" xml:space="preserve">
          <source>open</source>
          <target state="translated">open</target>
        </trans-unit>
        <trans-unit id="199b395ad03deff5d4ae7fbee3ed860eb83c6145" translate="yes" xml:space="preserve">
          <source>open - open file in its default application</source>
          <target state="translated">open-기본 응용 프로그램에서 파일 열기</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="5ac69dda73e3d892b4ac8d6d08382b12628a8748" translate="yes" xml:space="preserve">
          <source>or &quot;stati&quot; if you prefer, or &quot;statūs&quot; if you've time-travelled from ancient Rome or work as a latin teacher</source>
          <target state="translated">또는 원하는 경우 &quot;stati&quot;또는 고대 로마에서 시간 여행을했거나 라틴어 교사로 일한 경우 &quot;statūs&quot;</target>
        </trans-unit>
        <trans-unit id="711125b2ab4f03f077b0f47796a68a231b18fde3" translate="yes" xml:space="preserve">
          <source>or - conditionally execute a command</source>
          <target state="translated">또는-조건부 명령 실행</target>
        </trans-unit>
        <trans-unit id="7b3b5463f2c38ca37d8d99520374f9cc91401b55" translate="yes" xml:space="preserve">
          <source>or &lt;code&gt;bash&lt;/code&gt; without a switch, opens a bash shell that you can use and &lt;code&gt;exit&lt;/code&gt; afterwards.</source>
          <target state="translated">또는 &lt;code&gt;bash&lt;/code&gt; 스위치없이, 당신이 사용할 수있는 bash 쉘 열립니다 &lt;code&gt;exit&lt;/code&gt; 이후를.</target>
        </trans-unit>
        <trans-unit id="4a4fca309e453918d1fa9832f4ef19832f32f1de" translate="yes" xml:space="preserve">
          <source>or opted into globally for a user:</source>
          <target state="translated">또는 전 세계적으로 사용자를 선택했습니다.</target>
        </trans-unit>
        <trans-unit id="7c6eb2fc24e8a6f1c3bb2b61e9934a910f68d626" translate="yes" xml:space="preserve">
          <source>out of it.</source>
          <target state="translated">그것에서.</target>
        </trans-unit>
        <trans-unit id="516b9783fca517eecbd1d064da2d165310b19759" translate="yes" xml:space="preserve">
          <source>p</source>
          <target state="translated">p</target>
        </trans-unit>
        <trans-unit id="a0738b66f0409f9396bdcdb486376cd82937b89c" translate="yes" xml:space="preserve">
          <source>pastes text from the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#killring&quot;&gt;킬링&lt;/a&gt; 에서 텍스트를 붙여 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="bd053f79a6a0b97eca270388d4266f6cdc2e5d1f" translate="yes" xml:space="preserve">
          <source>popd</source>
          <target state="translated">popd</target>
        </trans-unit>
        <trans-unit id="c0ad7ae5d6dea353b86b7975b175fb7ec7a5b0d8" translate="yes" xml:space="preserve">
          <source>popd - move through directory stack</source>
          <target state="translated">popd-디렉토리 스택을 통해 이동</target>
        </trans-unit>
        <trans-unit id="501bed2ce7870bcc5b0594fe851ae7aafaa0d983" translate="yes" xml:space="preserve">
          <source>press &lt;code&gt;Ctrl-C&lt;/code&gt; twice, or</source>
          <target state="translated">&lt;code&gt;Ctrl-C&lt;/code&gt; 를 두 번 누르 거나</target>
        </trans-unit>
        <trans-unit id="7dc7f09beed59586cbda067c6eeb7b7166812ad2" translate="yes" xml:space="preserve">
          <source>press &lt;code&gt;Ctrl-D&lt;/code&gt; twice, or</source>
          <target state="translated">&lt;code&gt;Ctrl-D&lt;/code&gt; 를 두 번 누르 거나</target>
        </trans-unit>
        <trans-unit id="e291f27c814229dc2eb10fa92c9b8c4185958322" translate="yes" xml:space="preserve">
          <source>prevd</source>
          <target state="translated">prevd</target>
        </trans-unit>
        <trans-unit id="f7c05f49b7608d19659229d1610a7b144fd04131" translate="yes" xml:space="preserve">
          <source>prevd - move backward through directory history</source>
          <target state="translated">prevd-디렉토리 기록을 통해 뒤로 이동</target>
        </trans-unit>
        <trans-unit id="df39b4caf493869772ff3a0f95cca6a9ae7934dc" translate="yes" xml:space="preserve">
          <source>printf</source>
          <target state="translated">printf</target>
        </trans-unit>
        <trans-unit id="3c6a47d2ffca0ad0d4a07143fcfbfd3c2bf900e7" translate="yes" xml:space="preserve">
          <source>printf - display text according to a format string</source>
          <target state="translated">printf-형식 문자열에 따라 텍스트를 표시</target>
        </trans-unit>
        <trans-unit id="21999975d6629ee4bcf6c7777ee78ef2dde68352" translate="yes" xml:space="preserve">
          <source>printf also knows a number of backslash escapes:</source>
          <target state="translated">printf는 또한 많은 백 슬래시 이스케이프를 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="16fbc9373952d2ce0913f0e1dfb31bf25f20364a" translate="yes" xml:space="preserve">
          <source>printf also knows a number of backslash escapes: - &lt;code&gt;\&quot;&lt;/code&gt; double quote - &lt;code&gt;\\&lt;/code&gt; backslash - &lt;code&gt;\a&lt;/code&gt; alert (bell) - &lt;code&gt;\b&lt;/code&gt; backspace - &lt;code&gt;\c&lt;/code&gt; produce no further output - &lt;code&gt;\e&lt;/code&gt; escape - &lt;code&gt;\f&lt;/code&gt; form feed - &lt;code&gt;\n&lt;/code&gt; new line - &lt;code&gt;\r&lt;/code&gt; carriage return - &lt;code&gt;\t&lt;/code&gt; horizontal tab - &lt;code&gt;\v&lt;/code&gt; vertical tab - &lt;code&gt;\ooo&lt;/code&gt; octal number (ooo is 1 to 3 digits) - &lt;code&gt;\xhh&lt;/code&gt; hexadecimal number (hhh is 1 to 2 digits) - &lt;code&gt;\uhhhh&lt;/code&gt; 16-bit Unicode character (hhhh is 4 digits) - &lt;code&gt;\Uhhhhhhhh&lt;/code&gt; 32-bit Unicode character (hhhhhhhh is 8 digits)</source>
          <target state="translated">printf는 또한 여러 개의 백 슬래시 이스케이프를 알고 있습니다.- &lt;code&gt;\&quot;&lt;/code&gt; 큰 따옴표- &lt;code&gt;\\&lt;/code&gt; 백 슬래시- &lt;code&gt;\a&lt;/code&gt; 경고 (벨)- &lt;code&gt;\b&lt;/code&gt; 백 스페이스- &lt;code&gt;\c&lt;/code&gt; 추가 출력 없음- &lt;code&gt;\e&lt;/code&gt; 이스케이프- &lt;code&gt;\f&lt;/code&gt; 양식 피드- &lt;code&gt;\n&lt;/code&gt; 새 줄 - &lt;code&gt;\r&lt;/code&gt; 캐리지 리턴- &lt;code&gt;\t&lt;/code&gt; 가로 탭- &lt;code&gt;\v&lt;/code&gt; 세로 탭- &lt;code&gt;\ooo&lt;/code&gt; 8 진수 (ooo는 1 ~ 3 자리)- &lt;code&gt;\xhh&lt;/code&gt; 16 진수 (hhh는 1 ~ 2 자리)- &lt;code&gt;\uhhhh&lt;/code&gt; 16 비트 유니 코드 문자 ( hhhh는 4 자리)- &lt;code&gt;\Uhhhhhhhh&lt;/code&gt; 32 비트 유니 코드 문자 (hhhhhhhh는 8 자리)</target>
        </trans-unit>
        <trans-unit id="f0e9a119bdd370e572983792f8da0fd600bbb244" translate="yes" xml:space="preserve">
          <source>printf formats the string FORMAT with ARGUMENT, and displays the result.</source>
          <target state="translated">printf는 문자열 FORMAT을 ARGUMENT로 형식화하고 결과를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="14d637fde9383253c68b846d7e82ee779a509564" translate="yes" xml:space="preserve">
          <source>prints a short description of the command under the cursor.</source>
          <target state="translated">커서 아래에 명령에 대한 간단한 설명을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="03b62a0fc91ac76f534c8506377fd0cd7094b326" translate="yes" xml:space="preserve">
          <source>prompt_pwd</source>
          <target state="translated">prompt_pwd</target>
        </trans-unit>
        <trans-unit id="379685f1a28ec5f5585e4ea14e8526590620679f" translate="yes" xml:space="preserve">
          <source>prompt_pwd - Print pwd suitable for prompt</source>
          <target state="translated">prompt_pwd-프롬프트에 적합한 pwd 인쇄</target>
        </trans-unit>
        <trans-unit id="a140601076b214970f21dd77e03c7939cd93ecdc" translate="yes" xml:space="preserve">
          <source>prompt_pwd is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="translated">prompt_pwd는 프롬프트에 적합한 방식으로 현재 작업 디렉토리를 인쇄하는 기능입니다. 홈 디렉토리를 &quot;~&quot;로 바꾸고 모든 경로 구성 요소를 줄이지 만 마지막 한 문자는 기본값으로 줄입니다.</target>
        </trans-unit>
        <trans-unit id="9afd2538d3d4ffb696f4dcdd4ab6baadf04ff522" translate="yes" xml:space="preserve">
          <source>psub</source>
          <target state="translated">psub</target>
        </trans-unit>
        <trans-unit id="63fbf23d9d9b481ea407c815c90933057897af4b" translate="yes" xml:space="preserve">
          <source>psub - perform process substitution</source>
          <target state="translated">psub-프로세스 대체 수행</target>
        </trans-unit>
        <trans-unit id="ca99455ec63652d0ac9ec250727ee0c6c910786e" translate="yes" xml:space="preserve">
          <source>pushd</source>
          <target state="translated">pushd</target>
        </trans-unit>
        <trans-unit id="9160b1d55f9fa10d249ec7b308dccac953b32fc0" translate="yes" xml:space="preserve">
          <source>pushd - push directory to directory stack</source>
          <target state="translated">푸시-디렉토리를 디렉토리 스택으로 푸시</target>
        </trans-unit>
        <trans-unit id="37fa265330ad83eaa879efb1e2db6380896cf639" translate="yes" xml:space="preserve">
          <source>pwd</source>
          <target state="translated">pwd</target>
        </trans-unit>
        <trans-unit id="3f4e967878bd5e1bb4a87ca851b714379daca044" translate="yes" xml:space="preserve">
          <source>pwd - output the current working directory</source>
          <target state="translated">pwd-현재 작업 디렉토리를 출력</target>
        </trans-unit>
        <trans-unit id="a415ab5cc17c8c093c015ccdb7e552aee7911aa4" translate="yes" xml:space="preserve">
          <source>random</source>
          <target state="translated">random</target>
        </trans-unit>
        <trans-unit id="a2268607239de0e6afadb64003588824de27a1ad" translate="yes" xml:space="preserve">
          <source>random - generate random number</source>
          <target state="translated">난수-난수 생성</target>
        </trans-unit>
        <trans-unit id="a7afddb68260a60f86c02a021efba7f216c2e7cf" translate="yes" xml:space="preserve">
          <source>read</source>
          <target state="translated">read</target>
        </trans-unit>
        <trans-unit id="02d0fa56be4fca5d7cc0c6db5a7aa370743eb4ff" translate="yes" xml:space="preserve">
          <source>read - read line of input into variables</source>
          <target state="translated">read-입력 행을 변수로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="ff2b5744be5fceda4fc467fda551bcbf199f8fa0" translate="yes" xml:space="preserve">
          <source>realpath</source>
          <target state="translated">realpath</target>
        </trans-unit>
        <trans-unit id="2caa95ad63632ed3825a317f46514c851816d5ab" translate="yes" xml:space="preserve">
          <source>realpath - Convert a path to an absolute path without symlinks</source>
          <target state="translated">realpath-심볼릭 링크없이 경로를 절대 경로로 변환</target>
        </trans-unit>
        <trans-unit id="cdc0316013a18a081b776d8584c2cd831e8ee38a" translate="yes" xml:space="preserve">
          <source>recalls individual arguments, starting from the last argument in the last line executed. A single press replaces &quot;!$&quot;, later presses replace &quot;!!:4&quot; and the like. An alternate key binding is</source>
          <target state="translated">실행 된 마지막 행의 마지막 인수부터 시작하여 개별 인수를 회수합니다. 한 번 누르면 &quot;! $&quot;가 대체되고 나중에 &quot;!! : 4&quot;가 대체됩니다. 대체 키 바인딩은</target>
        </trans-unit>
        <trans-unit id="3bbf6e0c65bd333009dbbdbc6eb3ab24ffa32c26" translate="yes" xml:space="preserve">
          <source>recalls whole lines, starting from the last line executed. A single press replaces &quot;!!&quot;, later presses replace &quot;!-3&quot; and the like.</source>
          <target state="translated">실행 된 마지막 줄부터 시작하여 전체 줄을 회수합니다. 한 번 누르면 &quot;!!&quot;가 바뀌고 나중에 &quot;! -3&quot;을 누르면 등이 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="b3efd1739c24a74dcbab6d24e477f596336f1282" translate="yes" xml:space="preserve">
          <source>relative to newer annotated tag, such as &lt;code&gt;(v1.6.3.2~35)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(v1.6.3.2~35)&lt;/code&gt; 와 같이 최신 주석 태그와 관련</target>
        </trans-unit>
        <trans-unit id="7a11b7dad259e2e4c1bf4e1803276e3aa98db5fd" translate="yes" xml:space="preserve">
          <source>relative to newer tag or branch, such as &lt;code&gt;(master~4)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(master~4)&lt;/code&gt; 와 같이 최신 태그 또는 분기에 상대적</target>
        </trans-unit>
        <trans-unit id="de255ff1a0f0729a009a4f2d410a14f293efbd85" translate="yes" xml:space="preserve">
          <source>relative to older annotated tag, such as &lt;code&gt;(v1.6.3.1-13-gdd42c2f)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(v1.6.3.1-13-gdd42c2f)&lt;/code&gt; 와 같이 이전 주석이 달린 태그와 관련</target>
        </trans-unit>
        <trans-unit id="70d1ab8a0a2acd399a37d57fea1fd853d8a21405" translate="yes" xml:space="preserve">
          <source>removes one character forwards or backwards respectively.</source>
          <target state="translated">한 문자를 앞뒤로 각각 제거합니다.</target>
        </trans-unit>
        <trans-unit id="718d3cf29853291163f18cffb0c67d09f8bc51f6" translate="yes" xml:space="preserve">
          <source>removes one character to the left.</source>
          <target state="translated">왼쪽으로 한 문자를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="63143b6f8007b98c53ca2149822777b3566f9241" translate="yes" xml:space="preserve">
          <source>return</source>
          <target state="translated">return</target>
        </trans-unit>
        <trans-unit id="288b5d6d1a89a6e706dfc7486e06e4a8d8078410" translate="yes" xml:space="preserve">
          <source>return - stop the current inner function</source>
          <target state="translated">return-현재 내부 함수를 중지</target>
        </trans-unit>
        <trans-unit id="66a8bc35e1603d1f3b14469cbd262d1034d78a5d" translate="yes" xml:space="preserve">
          <source>search history backwards.</source>
          <target state="translated">검색 기록을 거꾸로.</target>
        </trans-unit>
        <trans-unit id="405bd873c4bd1cade52a2bb9fe727b840228e4d4" translate="yes" xml:space="preserve">
          <source>search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the &lt;a href=&quot;#history-search&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">검색이 시작되기 전에 커서 아래에 토큰이 포함 된 이전 / 다음 토큰에 대한 명령 기록을 검색합니다. 검색이 시작될 때 명령 줄이 토큰에 없으면 모든 토큰이 일치합니다. 히스토리 검색에 대한 자세한 내용은 &lt;a href=&quot;#history-search&quot;&gt;히스토리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e8d75a2825f12f7b29389663fdd83ca02e1dcd86" translate="yes" xml:space="preserve">
          <source>search the command history for the previous/next token containing the token under the cursor before the search was started. See the &lt;a href=&quot;#history-search&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">검색이 시작되기 전에 커서 아래에 토큰이 포함 된 이전 / 다음 토큰에 대한 명령 기록을 검색합니다. 히스토리 검색에 대한 자세한 내용은 &lt;a href=&quot;#history-search&quot;&gt;히스토리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="65c10dc3549fe07424148a8a4790a3341ecbc253" translate="yes" xml:space="preserve">
          <source>set</source>
          <target state="translated">set</target>
        </trans-unit>
        <trans-unit id="063c17e14f7627ded7c57ede98e0f6ca9045fc66" translate="yes" xml:space="preserve">
          <source>set - display and change shell variables.</source>
          <target state="translated">set-쉘 변수를 표시하고 변경합니다.</target>
        </trans-unit>
        <trans-unit id="20f7c32664f5d1e0b9c515a18fcf90cdb3c57984" translate="yes" xml:space="preserve">
          <source>set_color</source>
          <target state="translated">set_color</target>
        </trans-unit>
        <trans-unit id="cff11275c6338d2e5dde20951c1557cf0de59d43" translate="yes" xml:space="preserve">
          <source>set_color - set the terminal color</source>
          <target state="translated">set_color-터미널 색상을 설정</target>
        </trans-unit>
        <trans-unit id="7083b8991c7758c96835bb9fe287b9ce13b5e1e6" translate="yes" xml:space="preserve">
          <source>show number of commits ahead/behind (+/-) upstream</source>
          <target state="translated">업스트림 앞 / 뒤 (+/-) 커밋 수 표시</target>
        </trans-unit>
        <trans-unit id="1661dcf8c23157ef75c607d0affe743f1b577c07" translate="yes" xml:space="preserve">
          <source>signals that you are done editing the function. This does not apply to an external editor like emacs or vim.</source>
          <target state="translated">기능 편집이 완료되었음을 나타냅니다. 이것은 emacs 또는 vim과 같은 외부 편집기에는 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="184673434618bba69909970811545c87621d1f63" translate="yes" xml:space="preserve">
          <source>similar to verbose, but shows nothing when equal - this is the default if informative status is enabled.</source>
          <target state="translated">verbose와 유사하지만 같으면 아무것도 표시하지 않습니다. 정보 상태가 활성화 된 경우 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="828d338a9b04221c9cbe286f50cd389f68de4ecf" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="translated">source</target>
        </trans-unit>
        <trans-unit id="2f7991a9100c9583f2155802c7350aa74443ed20" translate="yes" xml:space="preserve">
          <source>source - evaluate contents of file.</source>
          <target state="translated">소스-파일의 내용을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="506a7e1ca8d34664e2b86653d70401c523f26553" translate="yes" xml:space="preserve">
          <source>spawns &lt;code&gt;sleep&lt;/code&gt; in the background, and then waits until it finishes.</source>
          <target state="translated">급부상는 &lt;code&gt;sleep&lt;/code&gt; 배경으로, 그리고이 완료 될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="0600ee136238de631e08746a8bd524b702580c61" translate="yes" xml:space="preserve">
          <source>spawns five jobs and &lt;code&gt;hoge&lt;/code&gt; in the background, and then waits until all &lt;code&gt;sleep&lt;/code&gt;s finish, and doesn't wait for &lt;code&gt;hoge&lt;/code&gt; finishing.</source>
          <target state="translated">백그라운드에서 5 개의 작업과 &lt;code&gt;hoge&lt;/code&gt; 를 생성 한 다음 모든 &lt;code&gt;sleep&lt;/code&gt; 끝날 때까지 기다렸다가 &lt;code&gt;hoge&lt;/code&gt; 가 끝날 때까지 기다리지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="78dbe5e491bc63d2e79ab65c266d6d41e91f56ff" translate="yes" xml:space="preserve">
          <source>spawns five jobs and &lt;code&gt;hoge&lt;/code&gt; in the background, and then waits until all &lt;code&gt;sleep&lt;/code&gt;s finishes, and doesn't wait for &lt;code&gt;hoge&lt;/code&gt; finishing.</source>
          <target state="translated">5 개의 작업을 생성 하고 백그라운드에서 &lt;code&gt;hoge&lt;/code&gt; 한 다음 모든 &lt;code&gt;sleep&lt;/code&gt; 이 완료 될 때까지 기다렸다가 &lt;code&gt;hoge&lt;/code&gt; 마무리를 기다리지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b6e22225897433914493a887f4a4f462d9a13ced" translate="yes" xml:space="preserve">
          <source>spawns five jobs in the background, and then waits until all of them finishes.</source>
          <target state="translated">백그라운드에서 5 개의 작업을 생성 한 다음 모든 작업이 완료 될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="48a3661d846478fa991a825ebd10b78671444b5b" translate="yes" xml:space="preserve">
          <source>status</source>
          <target state="translated">status</target>
        </trans-unit>
        <trans-unit id="420a0e9d08406c887fa9f473fb502e30acd9a336" translate="yes" xml:space="preserve">
          <source>status - query fish runtime information</source>
          <target state="translated">상태-쿼리 물고기 런타임 정보</target>
        </trans-unit>
        <trans-unit id="33a9e6923b5cff6e1c9fb560ddb572a069a669c0" translate="yes" xml:space="preserve">
          <source>stdin and stdout can be redirected via the familiar &amp;lt; and &amp;gt;. stderr is redirected with a &amp;gt;2.</source>
          <target state="translated">stdin 및 stdout은 익숙한 &amp;lt;및&amp;gt;를 통해 리디렉션 될 수 있습니다. stderr은&amp;gt; 2로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="0d1fa9c38f2950c30150a114fabca23982d85d69" translate="yes" xml:space="preserve">
          <source>stdin and stdout can be redirected via the familiar &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;. stderr is redirected with a &lt;code&gt;2&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">stdin 및 stdout은 익숙한 &lt;code&gt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&lt;/code&gt; 를 통해 리디렉션 할 수 있습니다 . stderr은 &lt;code&gt;2&amp;gt;&lt;/code&gt; 로 리디렉션됩니다 .</target>
        </trans-unit>
        <trans-unit id="ecb252044b5ea0f679ee78ec1a12904739e2904d" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="translated">string</target>
        </trans-unit>
        <trans-unit id="5eb279c348daa58c49a3c45c42799e5a0b7195c1" translate="yes" xml:space="preserve">
          <source>string - manipulate strings</source>
          <target state="translated">문자열-문자열을 조작</target>
        </trans-unit>
        <trans-unit id="2d4cce05141601eb200e21f5034e12ea0b4e9035" translate="yes" xml:space="preserve">
          <source>string-collect</source>
          <target state="translated">string-collect</target>
        </trans-unit>
        <trans-unit id="05c051811aed7ba706a8a51bc24d4690e4db4f66" translate="yes" xml:space="preserve">
          <source>string-collect - join strings into one</source>
          <target state="translated">string-collect-문자열을 하나로 결합</target>
        </trans-unit>
        <trans-unit id="83edcee3403d6522a118ecb6b41235ce1fb84377" translate="yes" xml:space="preserve">
          <source>string-escape</source>
          <target state="translated">string-escape</target>
        </trans-unit>
        <trans-unit id="110688818d599a025da2209a38f42c2a69a1e2a2" translate="yes" xml:space="preserve">
          <source>string-escape - escape special characters</source>
          <target state="translated">string-escape-특수 문자 이스케이프</target>
        </trans-unit>
        <trans-unit id="713077bad01083d9df6f04ad09441e593a6e613b" translate="yes" xml:space="preserve">
          <source>string-join</source>
          <target state="translated">string-join</target>
        </trans-unit>
        <trans-unit id="cf9ad0b86266a3ba97fdc91895f63fefc74b39d0" translate="yes" xml:space="preserve">
          <source>string-join - join strings with delimiter</source>
          <target state="translated">string-join-구분 기호로 문자열 결합</target>
        </trans-unit>
        <trans-unit id="7a051838bd267aa0023c29debb9097f2c6de40ed" translate="yes" xml:space="preserve">
          <source>string-join0</source>
          <target state="translated">string-join0</target>
        </trans-unit>
        <trans-unit id="fed444794abfb966b29451a2d6ca632ef221d77c" translate="yes" xml:space="preserve">
          <source>string-join0 - join strings with zero bytes</source>
          <target state="translated">string-join0-0 바이트로 문자열 결합</target>
        </trans-unit>
        <trans-unit id="2c9566bb2c4b665f33165b8aa55dd9033842ef89" translate="yes" xml:space="preserve">
          <source>string-length</source>
          <target state="translated">string-length</target>
        </trans-unit>
        <trans-unit id="38311e74d3e72fe52620dde5a99750c88f927738" translate="yes" xml:space="preserve">
          <source>string-length - print string lengths</source>
          <target state="translated">string-length-문자열 길이 인쇄</target>
        </trans-unit>
        <trans-unit id="6d302b3bf0b9da16cbc562134ae0b1dee1dde352" translate="yes" xml:space="preserve">
          <source>string-lower</source>
          <target state="translated">string-lower</target>
        </trans-unit>
        <trans-unit id="4ab0ef6f4d3705599186de375c863310ee6ab9b1" translate="yes" xml:space="preserve">
          <source>string-lower - convert strings to lowercase</source>
          <target state="translated">string-lower-문자열을 소문자로 변환</target>
        </trans-unit>
        <trans-unit id="052e2fa177173549fa0ea1d7810743bcb1e38f6e" translate="yes" xml:space="preserve">
          <source>string-match</source>
          <target state="translated">string-match</target>
        </trans-unit>
        <trans-unit id="7ade39ce3db0090a4c068a2ad4802a46f60a8b70" translate="yes" xml:space="preserve">
          <source>string-match - match substrings</source>
          <target state="translated">string-match-부분 문자열 일치</target>
        </trans-unit>
        <trans-unit id="3c70d8bc37876d32264a52deee1a92a6f35d9a01" translate="yes" xml:space="preserve">
          <source>string-repeat</source>
          <target state="translated">string-repeat</target>
        </trans-unit>
        <trans-unit id="bc090fddf7233f955becb2f8b9985e6a22a03ee7" translate="yes" xml:space="preserve">
          <source>string-repeat - multiply a string</source>
          <target state="translated">string-repeat-문자열 곱하기</target>
        </trans-unit>
        <trans-unit id="c4a84769da4f89a5eced1e565937dc2f3d9c56c7" translate="yes" xml:space="preserve">
          <source>string-replace</source>
          <target state="translated">string-replace</target>
        </trans-unit>
        <trans-unit id="83f22fd52eec3a625f928d8a9e5e6368f29dd8eb" translate="yes" xml:space="preserve">
          <source>string-replace - replace substrings</source>
          <target state="translated">string-replace-부분 문자열 교체</target>
        </trans-unit>
        <trans-unit id="ada8273c81ce42295f34b55ecbb52aefcedd6426" translate="yes" xml:space="preserve">
          <source>string-split</source>
          <target state="translated">string-split</target>
        </trans-unit>
        <trans-unit id="352e6465b628a9da06dab7bdf2d76ff1acbcc772" translate="yes" xml:space="preserve">
          <source>string-split - split strings by delimiter</source>
          <target state="translated">string-split-구분 기호로 문자열 분할</target>
        </trans-unit>
        <trans-unit id="952575f917bca4ba200799a7d8fc6a5f812e0518" translate="yes" xml:space="preserve">
          <source>string-split0</source>
          <target state="translated">string-split0</target>
        </trans-unit>
        <trans-unit id="a32ecce2541f45805dc389cea2647d86c439b917" translate="yes" xml:space="preserve">
          <source>string-split0 - split on zero bytes</source>
          <target state="translated">string-split0-0 바이트로 분할</target>
        </trans-unit>
        <trans-unit id="0a30e6a6791bac85aeb6b7d8e200158852eafcd3" translate="yes" xml:space="preserve">
          <source>string-sub</source>
          <target state="translated">string-sub</target>
        </trans-unit>
        <trans-unit id="4c9f46c1de15ff0a30a11651f6c46ea8593e3085" translate="yes" xml:space="preserve">
          <source>string-sub - extract substrings</source>
          <target state="translated">string-sub-부분 문자열 추출</target>
        </trans-unit>
        <trans-unit id="ca9d8a2cc1cb3d85cf6292e8fd944cbe9a87da59" translate="yes" xml:space="preserve">
          <source>string-trim</source>
          <target state="translated">string-trim</target>
        </trans-unit>
        <trans-unit id="927df2df7f2d9c6b79e97923720ee0bbb52bb21f" translate="yes" xml:space="preserve">
          <source>string-trim - remove trailing whitespace</source>
          <target state="translated">string-trim-후행 공백 제거</target>
        </trans-unit>
        <trans-unit id="b626fddedcfc8a654538b0a89877ed55e6a18b70" translate="yes" xml:space="preserve">
          <source>string-unescape</source>
          <target state="translated">string-unescape</target>
        </trans-unit>
        <trans-unit id="ba0f5972cd5be1212d369e5ff924213c53dd0f6b" translate="yes" xml:space="preserve">
          <source>string-unescape - expand escape sequences</source>
          <target state="translated">string-unescape-이스케이프 시퀀스 확장</target>
        </trans-unit>
        <trans-unit id="fb4d63b16c09d9648a13b24f088256bb2230949c" translate="yes" xml:space="preserve">
          <source>string-upper</source>
          <target state="translated">string-upper</target>
        </trans-unit>
        <trans-unit id="2a5ba289e3420cd99f4544124ebae06ee0c851fb" translate="yes" xml:space="preserve">
          <source>string-upper - convert strings to uppercase</source>
          <target state="translated">string-upper-문자열을 대문자로 변환</target>
        </trans-unit>
        <trans-unit id="20969eb1095a9740a5ff3ddac8831aac958032d4" translate="yes" xml:space="preserve">
          <source>summarize the difference between HEAD and its upstream</source>
          <target state="translated">HEAD와 업스트림의 차이점 요약</target>
        </trans-unit>
        <trans-unit id="b6f0c43f69fad2bd2df597f8c1f9289bf8ebf0a2" translate="yes" xml:space="preserve">
          <source>suspend</source>
          <target state="translated">suspend</target>
        </trans-unit>
        <trans-unit id="0a906b8b4efdea69b1aa7921bd59ea5a07a19f19" translate="yes" xml:space="preserve">
          <source>suspend - suspend the current shell</source>
          <target state="translated">일시 중단-현재 쉘을 일시 중단</target>
        </trans-unit>
        <trans-unit id="01ba7992f85de477e8e630428eb5ed14769f9155" translate="yes" xml:space="preserve">
          <source>switch</source>
          <target state="translated">switch</target>
        </trans-unit>
        <trans-unit id="b6b1294b1f61dc5bf9ee190db20eac07851abf99" translate="yes" xml:space="preserve">
          <source>switch - conditionally execute a block of commands</source>
          <target state="translated">스위치-조건부 명령 블록을 실행</target>
        </trans-unit>
        <trans-unit id="e974602114f14fbf55401c109937e173b1b23220" translate="yes" xml:space="preserve">
          <source>tab</source>
          <target state="translated">tab</target>
        </trans-unit>
        <trans-unit id="a94a8fe5ccb19ba61c4c0873d391e987982fbbd3" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="translated">test</target>
        </trans-unit>
        <trans-unit id="4f3107d98473bb39c5345a7b62319a827c9d8057" translate="yes" xml:space="preserve">
          <source>test - perform tests on files and text</source>
          <target state="translated">테스트-파일 및 텍스트에 대한 테스트를 수행</target>
        </trans-unit>
        <trans-unit id="ee16563c7821ca448a82436f8607676e99bb1d4c" translate="yes" xml:space="preserve">
          <source>the colour of the revision number to display in the prompt</source>
          <target state="translated">프롬프트에 표시 할 개정 번호의 색상</target>
        </trans-unit>
        <trans-unit id="c87a7f7b83a3a58c6087ce1eb24509a6f210bbe6" translate="yes" xml:space="preserve">
          <source>the function description minimally escaped so it is a single line or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined.</source>
          <target state="translated">한 행하므로 또는 함수 설명 최소한 탈출 &lt;code&gt;n/a&lt;/code&gt; 함수가 정의되지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="02aa698783c53dd6998a194b4ec93ca8e6192a89" translate="yes" xml:space="preserve">
          <source>the line number within the file or zero if not applicable,</source>
          <target state="translated">파일 내 줄 번호 또는 해당되지 않는 경우 0</target>
        </trans-unit>
        <trans-unit id="d326199cf56e0ae280f8a9fda92ba199137f5b06" translate="yes" xml:space="preserve">
          <source>the pathname as already described,</source>
          <target state="translated">이미 설명한 경로 이름</target>
        </trans-unit>
        <trans-unit id="fd469d54e7e502df00efab39d3fd85c1398ad3d7" translate="yes" xml:space="preserve">
          <source>the separator between status characters</source>
          <target state="translated">상태 문자 사이의 구분자</target>
        </trans-unit>
        <trans-unit id="714eea0f4c980736bde0065fe73f573487f08e3a" translate="yes" xml:space="preserve">
          <source>time</source>
          <target state="translated">time</target>
        </trans-unit>
        <trans-unit id="3b28a892f761c663cd9741ef140960b0d99554ac" translate="yes" xml:space="preserve">
          <source>time - measure how long a command or block takes</source>
          <target state="translated">시간-명령 또는 블록에 걸리는 시간 측정</target>
        </trans-unit>
        <trans-unit id="93fde051556cb8919a6c75036bae40f55a1a1718" translate="yes" xml:space="preserve">
          <source>to change this prompt see &lt;a href=&quot;#tut_prompt&quot;&gt;how to change your prompt&lt;/a&gt;</source>
          <target state="translated">이 프롬프트를 변경하려면 프롬프트 &lt;a href=&quot;#tut_prompt&quot;&gt;를 변경하는 방법을&lt;/a&gt; 참조하십시오</target>
        </trans-unit>
        <trans-unit id="a55b288e3395f3288c6efaf27cefbdaa30cdde1d" translate="yes" xml:space="preserve">
          <source>to clear the input line.</source>
          <target state="translated">입력 라인을 지우십시오.</target>
        </trans-unit>
        <trans-unit id="d57a5e997943a230b27fb45ae6eacd4cf86ed3b1" translate="yes" xml:space="preserve">
          <source>to search for previously typed words containing 'm'.</source>
          <target state="translated">'m'이 포함 된 이전에 입력 한 단어를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="553d304d2b01f045f0aeddffc6c5778914ff0941" translate="yes" xml:space="preserve">
          <source>to stop running.</source>
          <target state="translated">실행을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="b60b004f5d8183032d2f3fcf34a581edbdea5c61" translate="yes" xml:space="preserve">
          <source>to switch to fish permanently see &lt;a href=&quot;#tut_switching_to_fish&quot;&gt;switch your default shell to fish&lt;/a&gt;</source>
          <target state="translated">물고기로 영구적으로 전환하려면 &lt;a href=&quot;#tut_switching_to_fish&quot;&gt;기본 쉘을 물고기&lt;/a&gt; 로 전환을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6447d2684b9c76aeb3e69f79758f92c6a93b6e6b" translate="yes" xml:space="preserve">
          <source>to use the completion pager to select an item from the list. If you give it a single argument it is equivalent to &lt;code&gt;cd directory&lt;/code&gt;.</source>
          <target state="translated">완료 호출기를 사용하여 목록에서 항목을 선택합니다. 단일 인수를 지정하면 &lt;code&gt;cd directory&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="4ab01181208a08630e1a2469b24539b322963d46" translate="yes" xml:space="preserve">
          <source>transposes the last two characters</source>
          <target state="translated">마지막 두 문자를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="a476501fd6acf2b00d1ac76e47294a7c2471adf3" translate="yes" xml:space="preserve">
          <source>transposes the last two words</source>
          <target state="translated">마지막 두 단어를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="e6d307367af5382983ed0d6888c8e3e045355281" translate="yes" xml:space="preserve">
          <source>trap</source>
          <target state="translated">trap</target>
        </trans-unit>
        <trans-unit id="3abaf5ffe5c75ece5fd52f452cf4a7f90fed7421" translate="yes" xml:space="preserve">
          <source>trap - perform an action when the shell receives a signal</source>
          <target state="translated">트랩-쉘이 신호를 수신 할 때 동작 수행</target>
        </trans-unit>
        <trans-unit id="5ffe533b830f08a0326348a9160afafc8ada44db" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="translated">true</target>
        </trans-unit>
        <trans-unit id="10b80755987d5e861fcb4c74925a714ba8dce054" translate="yes" xml:space="preserve">
          <source>true - return a successful result</source>
          <target state="translated">true-성공적인 결과를 반환</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">type</target>
        </trans-unit>
        <trans-unit id="fa189f6932e07966b2945f9c641067e1250a2bb7" translate="yes" xml:space="preserve">
          <source>type - indicate how a command would be interpreted</source>
          <target state="translated">type-명령 해석 방법을 나타냅니다</target>
        </trans-unit>
        <trans-unit id="6747212f18c8e5d826c489535a7ede3cf68eb31d" translate="yes" xml:space="preserve">
          <source>type &lt;code&gt;exit&lt;/code&gt;, or</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; 를 입력하십시오 . 또는</target>
        </trans-unit>
        <trans-unit id="8f17cfc3a44394fc7a0575f4eb71f3dbd5d29eb7" translate="yes" xml:space="preserve">
          <source>type &lt;code&gt;quit&lt;/code&gt;</source>
          <target state="translated">유형은 &lt;code&gt;quit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51e69892ab49df85c6230ccc57f8e1d1606caccc" translate="yes" xml:space="preserve">
          <source>u</source>
          <target state="translated">u</target>
        </trans-unit>
        <trans-unit id="6e5e5b45aaa91b76b5567fa66b0d05fe7289fd30" translate="yes" xml:space="preserve">
          <source>ulimit</source>
          <target state="translated">ulimit</target>
        </trans-unit>
        <trans-unit id="6f97e285ade4768f7a97feb604606ad49d5d73d5" translate="yes" xml:space="preserve">
          <source>ulimit - set or get resource usage limits</source>
          <target state="translated">ulimit-자원 사용 제한 설정 또는 가져 오기</target>
        </trans-unit>
        <trans-unit id="4b824f445e8d64ec6f262547c18a3ab02a6fd22c" translate="yes" xml:space="preserve">
          <source>umask</source>
          <target state="translated">umask</target>
        </trans-unit>
        <trans-unit id="40ce63190ce7b180322f127f1880704153f8b29a" translate="yes" xml:space="preserve">
          <source>umask - set or get the file creation mode mask</source>
          <target state="translated">umask-파일 작성 모드 마스크 설정 또는 가져 오기</target>
        </trans-unit>
        <trans-unit id="7a38d8cbd20d9932ba948efaa364bb62651d5ad4" translate="yes" xml:space="preserve">
          <source>v</source>
          <target state="translated">v</target>
        </trans-unit>
        <trans-unit id="ed6354b5f4780263c94651c766c76e339fe47f1e" translate="yes" xml:space="preserve">
          <source>vared</source>
          <target state="translated">vared</target>
        </trans-unit>
        <trans-unit id="095ed909fb13c4817a8aeb74a62b6468a254ca8d" translate="yes" xml:space="preserve">
          <source>vared - interactively edit the value of an environment variable</source>
          <target state="translated">vared-환경 변수 값을 대화식으로 편집</target>
        </trans-unit>
        <trans-unit id="aff024fe4ab0fece4091de044c58c9ae4233383a" translate="yes" xml:space="preserve">
          <source>w</source>
          <target state="translated">w</target>
        </trans-unit>
        <trans-unit id="daaad336276d15594d0e765f96c17cd746bf4971" translate="yes" xml:space="preserve">
          <source>wait</source>
          <target state="translated">wait</target>
        </trans-unit>
        <trans-unit id="5dc68f4d1dfb375d9f030f65dae3398df707ba38" translate="yes" xml:space="preserve">
          <source>wait - wait for jobs to complete</source>
          <target state="translated">대기-작업이 완료 될 때까지 기다립니다</target>
        </trans-unit>
        <trans-unit id="daca2c7abafe19aed94611021e5a4bbeb2584565" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;__fish_contains_opt&lt;/code&gt; is a function that checks the command line buffer for the presence of a specified set of options.</source>
          <target state="translated">여기서 &lt;code&gt;__fish_contains_opt&lt;/code&gt; 는 지정된 옵션 세트가 있는지 명령 행 버퍼를 검사하는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="489a6e620233cc9d22541565dff2f3ac8a1d932a" translate="yes" xml:space="preserve">
          <source>which is logically equivalent to the following:</source>
          <target state="translated">논리적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
        <trans-unit id="1ff56800352145ff9f9300f91d5ae15e85c17b92" translate="yes" xml:space="preserve">
          <source>while - perform a command multiple times</source>
          <target state="translated">동안-여러 번 명령을 수행</target>
        </trans-unit>
        <trans-unit id="a605898fdfaef482c78ebc3e9e8274f6d32b1cba" translate="yes" xml:space="preserve">
          <source>will attempt to build the fish program, and any errors will be shown using the less pager.</source>
          <target state="translated">물고기 프로그램을 구축하려고 시도하고 적은 호출기를 사용하여 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e99b731e0ff1040d87b00c1c061573852dcca4b4" translate="yes" xml:space="preserve">
          <source>will call the &lt;code&gt;cat&lt;/code&gt; program with the parameter 'foo.txt', which will print the contents of the file 'foo.txt'. The contents of foo.txt will then be filtered through the program 'head', which will pass on the first ten lines of the file to the screen. For more information on how to combine commands through pipes, read the manual pages of the commands you want to use using the &lt;code&gt;man&lt;/code&gt; command. If you want to find out more about the &lt;code&gt;cat&lt;/code&gt; program, type &lt;code&gt;man cat&lt;/code&gt;.</source>
          <target state="translated">'foo.txt'파일의 내용을 인쇄하는 'foo.txt'매개 변수를 사용 하여 &lt;code&gt;cat&lt;/code&gt; 프로그램을 호출합니다 . 그런 다음 foo.txt의 내용은 'head'프로그램을 통해 필터링되며 파일의 처음 10 줄을 화면으로 전달합니다. 파이프를 통해 명령을 결합하는 방법에 대한 자세한 정보는 &lt;code&gt;man&lt;/code&gt; 명령 을 사용하여 사용하려는 명령의 매뉴얼 페이지를 읽으십시오 . &lt;code&gt;cat&lt;/code&gt; 프로그램 에 대한 자세한 내용을 보려면 &lt;code&gt;man cat&lt;/code&gt; 을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="55f90dd9d23be8337725ae656ed3cfa89ed7879d" translate="yes" xml:space="preserve">
          <source>will exit fish.</source>
          <target state="translated">물고기를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="630c6277ef5b71afbf2a06648d71798f94288011" translate="yes" xml:space="preserve">
          <source>will look like</source>
          <target state="translated">다음과 같이 보일 것이다</target>
        </trans-unit>
        <trans-unit id="ef5f8dfda25d3d985781b69dcb1b285ae55e913d" translate="yes" xml:space="preserve">
          <source>will run the &lt;code&gt;ls&lt;/code&gt; command, using the &lt;code&gt;-l&lt;/code&gt; option, while passing on any additional files and switches to &lt;code&gt;ls&lt;/code&gt;.</source>
          <target state="translated">추가 파일을 전달하고 &lt;code&gt;ls&lt;/code&gt; 로 전환하는 동안 &lt;code&gt;-l&lt;/code&gt; 옵션을 사용하여 &lt;code&gt;ls&lt;/code&gt; 명령 을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="a80dacfdcbb824e4242afb200ba1d4cc653f254c" translate="yes" xml:space="preserve">
          <source>will start the emacs text editor in the background.</source>
          <target state="translated">백그라운드에서 emacs 텍스트 편집기를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="875af98e94b5a2e2425bd92b03433e7c0f34dfa0" translate="yes" xml:space="preserve">
          <source>would remove the two files 'cumbersome' and 'filename.txt'.</source>
          <target state="translated">두 개의 파일 'cumbersome'과 'filename.txt'를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="11f6ad8ec52a2984abaafd7c3b516503785c2072" translate="yes" xml:space="preserve">
          <source>x</source>
          <target state="translated">x</target>
        </trans-unit>
        <trans-unit id="395df8f7c51f007019cb30201c49e884b46b92fa" translate="yes" xml:space="preserve">
          <source>z</source>
          <target state="translated">z</target>
        </trans-unit>
        <trans-unit id="96a0af54dc40375f31315ce113198bf3d8cca387" translate="yes" xml:space="preserve">
          <source>~/stuff/script.sh (Executable, 4.8kB) ~/stuff/sources/ (Directory)</source>
          <target state="translated">~ / stuff / script.sh (실행 가능, 4.8kB) ~ / stuff / sources / (디렉토리)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
