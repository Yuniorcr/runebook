<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="9c47b741a075c31ca3e2cd472a89d590bf7358b1" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so:</source>
          <target state="translated">However using variables as indices for command substitution is currently not supported, so:</target>
        </trans-unit>
        <trans-unit id="3ece1cae89b5ddaf2b419721f67d267e2d87fe0b" translate="yes" xml:space="preserve">
          <source>However, it is more common and efficient to use autoloading functions and universal variables.</source>
          <target state="translated">그러나 자동로드 기능과 범용 변수를 사용하는 것이 더 일반적이고 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="332860b83cabf222387565b3cbb3a4ca2b6a60c7" translate="yes" xml:space="preserve">
          <source>I accidentally entered a directory path and fish changed directory. What happened?</source>
          <target state="translated">실수로 디렉토리 경로를 입력하고 물고기가 디렉토리를 변경했습니다. 어떻게 된 거예요?</target>
        </trans-unit>
        <trans-unit id="3fa38a6c40854bfd0c5b8465a45e20805cb6f30b" translate="yes" xml:space="preserve">
          <source>I'm getting weird graphical glitches (a staircase effect, ghost characters,...)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077b540fd621e89ad74c3aa41ae8c6bb0c4148b1" translate="yes" xml:space="preserve">
          <source>I'm seeing weird output before each prompt when using screen. What's wrong?</source>
          <target state="translated">화면을 사용할 때 각 프롬프트 전에 이상한 출력이 나타납니다. 뭐가 문제 야?</target>
        </trans-unit>
        <trans-unit id="639bf0b0aff96876be47fb838f518342cc2e94f3" translate="yes" xml:space="preserve">
          <source>IO redirections like &amp;gt;/dev/null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf1b05d1769ec6457d76c24cbcd4eac62d22fbc" translate="yes" xml:space="preserve">
          <source>If $WORD here is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed if $WORD is the empty string (like after &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7884771064847db56c0b28c42a19e5f67be016fb" translate="yes" xml:space="preserve">
          <source>If $animals is a list of animals, the following will test if it contains a cat:</source>
          <target state="translated">$ animals가 동물 목록 인 경우 다음은 고양이가 포함되어 있는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="6288311089317cecbe49c2b077270e72c24f0c74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$animal&lt;/code&gt; was set to &quot;banana&quot;, it would print &quot;I have no idea what a banana is&quot;.</source>
          <target state="translated">경우 &lt;code&gt;$animal&lt;/code&gt; &quot;바나나&quot;로 설정, 그것은 &quot;나는 바나나가 무엇인지 전혀 모른다&quot;인쇄 할 것이다.</target>
        </trans-unit>
        <trans-unit id="6529dd48f4bbe7af35d8ee17e053a860dce8bc42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables (more on this &lt;a href=&quot;argparse-local-variables&quot;&gt;below&lt;/a&gt;) are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">경우 &lt;code&gt;$argv&lt;/code&gt; 비어 다음이 구문 분석하는 것도없고 &lt;code&gt;argparse&lt;/code&gt; 반환 성공을 표시하는 제로. &lt;code&gt;$argv&lt;/code&gt; 가 비어 있지 않은 경우 &lt;code&gt;-h&lt;/code&gt; , &lt;code&gt;--help&lt;/code&gt; , &lt;code&gt;-n&lt;/code&gt; 및 &lt;code&gt;--name&lt;/code&gt; 플래그를 검사합니다 . 그것들이 발견되면 인수에서 제거되고 로컬 변수 ( &lt;a href=&quot;argparse-local-variables&quot;&gt;아래에&lt;/a&gt; 더 자세히 설명되어 있음 )가 설정되어 스크립트가 어떤 옵션을 볼 수 있는지 결정할 수 있습니다. &lt;code&gt;$argv&lt;/code&gt; 에 옵션의 필수 값 누락과 같은 오류가 없다고 가정하면 &lt;code&gt;argparse&lt;/code&gt; 는 상태 0으로 종료됩니다. 그렇지 않으면 적절한 오류 메시지를 stderr에 기록하고 상태 1로 종료합니다.</target>
        </trans-unit>
        <trans-unit id="c0fbfd35fc6ed08657df1862ed0095c68b3987ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt; , &lt;code&gt;--help&lt;/code&gt; , &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; . If they are found they are removed from the arguments and local variables are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</target>
        </trans-unit>
        <trans-unit id="d5aebf9be775c6394cdc60c0ad1ceaf1b0a07403" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables called &lt;code&gt;_flag_OPTION&lt;/code&gt; are set so the script can determine which options were seen. If &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, like a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with a status of zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d872df0da7e81d8c1be2d6e71a47a3e72854f2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$fish_private_mode&lt;/code&gt; is set to a non-empty value, commands will not be written to the history file on disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c0231ee0546ad7aeb3f50a1a68cbc1c85d1797" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; is given, each match is reported as a 1-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.</source>
          <target state="translated">경우 &lt;code&gt;--index&lt;/code&gt; 또는 &lt;code&gt;-n&lt;/code&gt; 을 주어, 각 경기는 1부터 시작 위치와 길이로보고됩니다. 기본적으로 PATTERN은 각 STRING 인수 전체와 일치하는 glob 패턴으로 해석됩니다. glob 패턴은 전체 STRING과 일치하는 경우에만 유효한 일치로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="dbf8f89e324b9e1f656b472c919d4c7a437efce4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--invert&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt; is used the selected lines will be only those which do not match the given glob pattern or regular expression.</source>
          <target state="translated">경우 &lt;code&gt;--invert&lt;/code&gt; 또는 &lt;code&gt;-v&lt;/code&gt; 가 사용되는 선택된 라인 만 주어진 글로브 패턴 또는 정규 표현식과 일치하지 않는 사람이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="0477403438bc546d3f9ceccb9070392b46aee810" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--move&lt;/code&gt; is used, it may of course lead to the path swapping order, so you should be careful doing that in config.fish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca5e01e9673f9e6a815d4bc3b45775fa51fbbf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--regex&lt;/code&gt; or &lt;code&gt;-r&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless &lt;code&gt;--entire&lt;/code&gt; is given.</source>
          <target state="translated">경우 &lt;code&gt;--regex&lt;/code&gt; 또는 &lt;code&gt;-r&lt;/code&gt; 이 주어집니다, 패턴은 전체 문자열과 일치하지 않는 펄 호환 정규 표현식으로 해석됩니다. 캡처 그룹이 포함 된 정규식의 경우 각 일치 항목, 전체 일치 항목 및 캡처 그룹마다 여러 항목이보고됩니다. 이를 통해 &lt;code&gt;--entire&lt;/code&gt; 를 지정 하지 않으면 STRING의 일치하는 부분 만보고 됩니다.</target>
        </trans-unit>
        <trans-unit id="fcb2b97b9b74110a92108364c83d3b0d2cdf428f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as a list in this variable.</source>
          <target state="translated">If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as a list in this variable.</target>
        </trans-unit>
        <trans-unit id="4e269b8b85f5f48b405e1f529c5cc1623456789e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as an array in this variable.</source>
          <target state="translated">경우 &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--array&lt;/code&gt; 가 제공되고, 하나의 변수 이름이 허용되고,이 토큰은 변수 배열로 저장된다.</target>
        </trans-unit>
        <trans-unit id="27479dcd11f9e1927be7c3559e78933c9baee94b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--char&lt;/code&gt; is given, pad with CHAR instead of whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dcb1b88668c5c41c70fbdad2157ee6171f60f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-e&lt;/code&gt; is used, the following sequences are recognized:</source>
          <target state="translated">경우 &lt;code&gt;-e&lt;/code&gt; 를 사용하는 경우, 다음 순서는 인식됩니다</target>
        </trans-unit>
        <trans-unit id="e5d5482f59147347f76e114d12618ff3d78fea80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, and REPLACEMENT can contain C-style escape sequences like &lt;code&gt;\t&lt;/code&gt; as well as references to capturing groups by number or name as &lt;code&gt;$n&lt;/code&gt; or &lt;code&gt;${n}&lt;/code&gt;.</source>
          <target state="translated">만약 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--regex&lt;/code&gt; , PATTERN은 펄 호환 정규 표현식으로 해석됩니다 부여 및 교체가 같은 C 스타일 이스케이프 시퀀스를 포함 할 수 있습니다 &lt;code&gt;\t&lt;/code&gt; 등의 번호 또는 이름으로 캡처 그룹에 대한 참조뿐만 아니라 &lt;code&gt;$n&lt;/code&gt; 또는 &lt;code&gt;${n}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0451d245611bea211070a667bbded49226ef6ea9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, add the padding after a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227584b023d6d2c7837f693e7e9b190c0c0b3bf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;REASON&lt;/code&gt; are both specified, &lt;code&gt;ARG&lt;/code&gt; is the command to be executed when the event specified by &lt;code&gt;REASON&lt;/code&gt; occurs (e.g., the signal is delivered).</source>
          <target state="translated">경우 &lt;code&gt;ARG&lt;/code&gt; 및 &lt;code&gt;REASON&lt;/code&gt; 가 모두 지정되어 &lt;code&gt;ARG&lt;/code&gt; 가 된 이벤트 때 실행되는 명령이다 &lt;code&gt;REASON&lt;/code&gt; 가 발생 (예는, 신호를 전달한다).</target>
        </trans-unit>
        <trans-unit id="d6a059f39530ea46f03b1a88f280774a9e1b7e4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is absent (and there is a single REASON) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell). If &lt;code&gt;ARG&lt;/code&gt; is the null string the signal specified by each &lt;code&gt;REASON&lt;/code&gt; is ignored by the shell and by the commands it invokes.</source>
          <target state="translated">경우 &lt;code&gt;ARG&lt;/code&gt; 이 없는 (그리고 하나가 REASON 임) 또는 - 지정된 각 신호는 원래의 배열 (이것은 쉘 입구에 있던 값)으로 리셋된다. 경우 &lt;code&gt;ARG&lt;/code&gt; 가 널 (null) 문자열을 각에 의해 지정된 신호 &lt;code&gt;REASON&lt;/code&gt; 쉘과는 호출 명령에 의해 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="0310897c6525d4c0a20301e5b59490367df8d786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is not present and &lt;code&gt;-p&lt;/code&gt; has been supplied, then the trap commands associated with each &lt;code&gt;REASON&lt;/code&gt; are displayed. If no arguments are supplied or if only &lt;code&gt;-p&lt;/code&gt; is given, &lt;code&gt;trap&lt;/code&gt; prints the list of commands associated with each signal.</source>
          <target state="translated">경우 &lt;code&gt;ARG&lt;/code&gt; 가 존재하지 않으며 &lt;code&gt;-p&lt;/code&gt; 가 공급 된 후, 각각에 관련된 트랩 명령 &lt;code&gt;REASON&lt;/code&gt; 가 표시된다. 인수가 제공되지 않거나 &lt;code&gt;-p&lt;/code&gt; 만 제공되면 &lt;code&gt;trap&lt;/code&gt; 은 각 신호와 연관된 명령 목록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="46f4e7706aaa7715626c2065fdf439e268266771" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; environment variable array will be tried as prefixes for the specified path.</source>
          <target state="translated">경우 &lt;code&gt;DIRECTORY&lt;/code&gt; 가 상대 경로는 상기 검색된 경로 &lt;code&gt;CDPATH&lt;/code&gt; 의 환경 변수 어레이는 지정된 경로에 대한 프리픽스로 시도한다.</target>
        </trans-unit>
        <trans-unit id="d8fdf9c081d12374165457176e730cf87d210ca2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; list will be tried as prefixes for the specified path, in addition to $PWD.</source>
          <target state="translated">If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; list will be tried as prefixes for the specified path, in addition to $PWD.</target>
        </trans-unit>
        <trans-unit id="6d211b5295328f27c5f4dda2c5b64e33b2d339ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is supplied, it will become the new directory. If no parameter is given, the contents of the &lt;code&gt;HOME&lt;/code&gt; environment variable will be used.</source>
          <target state="translated">경우 &lt;code&gt;DIRECTORY&lt;/code&gt; 공급되고, 그것은 새 디렉토리가 될 것이다. 매개 변수를 지정하지 않으면 &lt;code&gt;HOME&lt;/code&gt; 환경 변수 의 내용 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ee49ba74d2c75163466a92ec95757c32496b3231" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandline&lt;/code&gt; is called during a call to complete a given string using &lt;code&gt;complete -C STRING&lt;/code&gt;, &lt;code&gt;commandline&lt;/code&gt; will consider the specified string to be the current contents of the command line.</source>
          <target state="translated">경우 &lt;code&gt;commandline&lt;/code&gt; 사용하여 주어진 문자열 완료하기 위해 통화 중이라 &lt;code&gt;complete -C STRING&lt;/code&gt; , &lt;code&gt;commandline&lt;/code&gt; 명령 행의 현재의 내용으로 지정된 문자열을 고려할 것입니다.</target>
        </trans-unit>
        <trans-unit id="1145ddb3bdeee96521a717d934a15cc64d95077c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fish&lt;/code&gt; encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="translated">경우 &lt;code&gt;fish&lt;/code&gt; 명령을 실행하는 동안 문제가 발생하는 상태 변수는 특정 값으로 설정 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="f09fbf7f2a9a04bff01d5330effffef51795cab0" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SECTION&lt;/code&gt; is specified, the help for that command is shown.</source>
          <target state="translated">경우 &lt;code&gt;SECTION&lt;/code&gt; 지정되어, 해당 명령에 대한 도움말이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="11bdc7a6b00b9fcae9c145670ea2e6640ce69306" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;realpath&lt;/code&gt; command exists, it will be preferred, so if you want to use the builtin you should use &lt;code&gt;builtin realpath&lt;/code&gt; explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d59528d17aca71e945c01c4f608cc07968fec9a" translate="yes" xml:space="preserve">
          <source>If a VCS isn't installed, the respective function does nothing.</source>
          <target state="translated">If a VCS isn't installed, the respective function does nothing.</target>
        </trans-unit>
        <trans-unit id="d49d6b1b0943371d699bdcd914d1ffd8f148b167" translate="yes" xml:space="preserve">
          <source>If a component is not an existing directory, &lt;code&gt;fish_add_path&lt;/code&gt; ignores it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965812140edc45643abb7baee6c2564a00e17217" translate="yes" xml:space="preserve">
          <source>If a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a983c7d227d19d1c1e4484bef89499880499b5b" translate="yes" xml:space="preserve">
          <source>If a function named &lt;a href=&quot;cmds/fish_greeting#cmd-fish-greeting&quot;&gt;fish_greeting&lt;/a&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;a href=&quot;cmds/fish_greeting#cmd-fish-greeting&quot;&gt;fish_greeting&lt;/a&gt; exists, it will be printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebee8483e83b06811ff3ba9ccc429433dce33cd" translate="yes" xml:space="preserve">
          <source>If a function named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be printed.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; 이라는 함수 가 존재하면 대화식 모드로 들어갈 때 실행됩니다. 그렇지 않으면 이름이 &lt;code&gt;fish_greeting&lt;/code&gt; 인 환경 변수 가 존재하면 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="97b797a58e10af21dd1b7d448818b7c4a5c38502" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt; builtin to continue a job once it has been disowned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236d9b2bfa9ffd703bff82e438702935d8f276d3" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;code&gt;bg&lt;/code&gt; builtin to continue a job once it has been disowned.</source>
          <target state="translated">작업이 중지되면 계속 실행하라는 신호가 전송되고 경고가 인쇄됩니다. 폐기 된 작업을 계속 하기 위해 &lt;code&gt;bg&lt;/code&gt; 내장 을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6866740fedf191e9a889c0dfe968149210933d55" translate="yes" xml:space="preserve">
          <source>If a list has 5 elements the indices go from 1 to 5, so a range of &lt;code&gt;2..16&lt;/code&gt; will only go from element 2 to element 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e2a752180a8997dd97af87732b5ed3a03f8d8f" translate="yes" xml:space="preserve">
          <source>If a numeric mask is specified as a parameter, the current shell's umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.</source>
          <target state="translated">숫자 마스크가 매개 변수로 지정되면 현재 쉘의 umask가 해당 값으로 설정되고 해당 마스크에 의해 지정된 권한이 기본적으로 새 파일 및 디렉토리에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="2dde9e658888f495cea69c0ad8b260a62416e91a" translate="yes" xml:space="preserve">
          <source>If a pid is specified, the command waits for the job that the process with the pid belongs to.</source>
          <target state="translated">pid가 지정되면 명령은 pid가있는 프로세스가 속한 작업을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="f851c83c3c3953c372c81382f02613c546f275f0" translate="yes" xml:space="preserve">
          <source>If a process exits through a signal, the exit status will be 128 plus the number of the signal.</source>
          <target state="translated">프로세스가 신호를 통해 종료되면 종료 상태는 128에 신호 수를 더한 값입니다.</target>
        </trans-unit>
        <trans-unit id="47cb47829c9383def1fb8361853c4c7dd09368a8" translate="yes" xml:space="preserve">
          <source>If a process name is specified, the command waits for the jobs that the matched processes belong to.</source>
          <target state="translated">프로세스 이름이 지정되면 명령은 일치하는 프로세스가 속한 작업을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="302f9ccffa6bb045e0895a185f5c9e50859c884f" translate="yes" xml:space="preserve">
          <source>If a script produces output, it should finish by calling &lt;code&gt;commandline -f repaint&lt;/code&gt; to tell fish that a repaint is in order.</source>
          <target state="translated">스크립트가 출력을 생성하는 경우, &lt;code&gt;commandline -f repaint&lt;/code&gt; 를 호출 하여 물고기에게 다시 그리기가 순서대로 이루어짐 으로써 완료해야합니다 .</target>
        </trans-unit>
        <trans-unit id="67026ba945428dc31827715c1565311d33b5af8d" translate="yes" xml:space="preserve">
          <source>If a star (&lt;code&gt;*&lt;/code&gt;) or a question mark (&lt;code&gt;?&lt;/code&gt;) is present in the parameter, &lt;code&gt;fish&lt;/code&gt; attempts to match the given parameter to any files in such a way that:</source>
          <target state="translated">별표 ( &lt;code&gt;*&lt;/code&gt; ) 또는 물음표 ( &lt;code&gt;?&lt;/code&gt; )가 매개 변수에 있으면 , &lt;code&gt;fish&lt;/code&gt; 는 다음과 같은 방식으로 주어진 매개 변수를 파일과 일치 시키려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="18a6fd00e4b1ddec496d39ba9f288b25c849a5d6" translate="yes" xml:space="preserve">
          <source>If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:</source>
          <target state="translated">심볼릭 마스크가 지정된 경우에는 반대가 아닌 원하는 권한 비트를 지정해야합니다. 기호 마스크는 쉼표로 구분 된 권한 목록입니다. 각 권리는 세 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="9ffd05091b2bc11f75c6658a3328814a16ee9e1f" translate="yes" xml:space="preserve">
          <source>If a variable expands to nothing, it will cancel out any other strings attached to it. See the &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt; section for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bd46787a5c6b92e6f20cfe4fbc883c75045f2a" translate="yes" xml:space="preserve">
          <source>If a variable has global scope, it is accessible read-write to functions whether it is exported or not.</source>
          <target state="translated">변수에 전역 범위가있는 경우 변수의 내보내기 여부에 관계없이 함수에 대한 읽기 / 쓰기가 가능합니다.</target>
        </trans-unit>
        <trans-unit id="741d44bccaaf674b1d069d14a1bdb399e238d593" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a &lt;em&gt;copy&lt;/em&gt; of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">변수에 로컬 범위가 있고 내보내지는 경우 호출 된 함수는 해당 &lt;em&gt;복사본&lt;/em&gt; 을 수신 하므로 함수가 반환되면 변수에 대한 변경 내용이 사라집니다.</target>
        </trans-unit>
        <trans-unit id="b71ed16ea5a59eda60ec534a14bf2d103ba20ae9" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a _copy_ of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">If a variable has local scope and is exported, any function called receives a _copy_ of it, so any changes it makes to the variable disappear once the function returns.</target>
        </trans-unit>
        <trans-unit id="96f0994fdaca0f9b1c269335d2df0f4e271c169d" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to a scope (universal, global or local), that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">If a variable is explicitly set to a scope (universal, global or local), that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</target>
        </trans-unit>
        <trans-unit id="2cbdc88f5e9bb2f3b40009d0379b55ab2352ae84" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either be exported or not exported, that setting will be honored.</source>
          <target state="translated">변수를 명시 적으로 내보내거나 내 보내지 않도록 설정하면 해당 설정이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="ce6484065868b4e9c43f6db14f55a84fe136a4bf" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either universal, global or local, that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">변수가 명시 적으로 범용, 전역 또는 로컬로 설정된 경우 해당 설정이 적용됩니다. 동일한 이름의 변수가 다른 범위에 존재하면 해당 변수는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7fd2961197b45dfc25c896ad23c85e1abfcf8519" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope and has not been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">If a variable is not explicitly set to a scope and has not been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</target>
        </trans-unit>
        <trans-unit id="6e687f439d700aaa30c67d0c1c2079a9950e1712" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">If a variable is not explicitly set to a scope, but has been previously defined, the variable scope is not changed.</target>
        </trans-unit>
        <trans-unit id="326eb232490e8df93b49fd2c3a89fde63906ed77" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or not exported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">변수가 명시 적으로 내보내 지거나 내 보내지 않도록 설정되지 않았으며 정의 된 적이없는 경우 변수가 내보내지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ef107fe0701094bebbf7a6322c1155614a1be3ba" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">변수가 명시 적으로 내보내거나 내 보내지 않도록 설정되지 않았으며 이전에 정의 된 적이없는 경우 변수가 내보내지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bd6c17ea05cd6c81f352d96759e2622e4a16e84b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">변수가 명시 적으로 범용, 전역 또는 로컬로 설정되지 않았으며 이전에 정의 된 적이없는 경우 변수는 현재 실행중인 기능에 대해 로컬입니다. 이것은 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--local&lt;/code&gt; 플래그 를 사용하는 것과 다릅니다 . 이러한 플래그 중 하나가 사용되면 변수는 현재 실행중인 가장 내부 블록에 로컬 인 반면 변수가 없으면 함수에 로컬입니다. 함수가 실행되고 있지 않으면 변수는 전역입니다.</target>
        </trans-unit>
        <trans-unit id="8b2d1734ef9bdd7bd6d21bc623798a68378e6c8b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.</source>
          <target state="translated">변수가 명시 적으로 범용, 전역 또는 로컬로 설정되지 않았지만 이전에 정의 된 경우 이전 변수 범위가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ae5e31cb3d02690bd43a99dc6a823c8568d4b6e8" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">변수가 명시 적으로 범용, 전역 또는 로컬로 설정되지 않았지만 이전에 정의 된 경우 변수 범위는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6ccd9990afce6a9aaaa05eb9827a340fd925feb1" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.</source>
          <target state="translated">변수가 명시 적으로 내보내 지거나 내 보내지 않도록 설정되지 않았지만 이전에 정의 된 경우 변수에 대한 이전 내보내기 규칙이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="ae603cd6be44b99d51c1566501087ce7b225183b" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be a list with the specified elements. If a variable is set to zero elements, it will become a list with zero elements.</source>
          <target state="translated">If a variable is set to more than one value, the variable will be a list with the specified elements. If a variable is set to zero elements, it will become a list with zero elements.</target>
        </trans-unit>
        <trans-unit id="72e2106717a7a37128914da8765dc2c6c6697b14" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be an array with the specified elements. If a variable is set to zero elements, it will become an array with zero elements.</source>
          <target state="translated">변수가 둘 이상의 값으로 설정되면 변수는 지정된 요소가있는 배열이됩니다. 변수가 0 요소로 설정되면 0 요소를 가진 배열이됩니다.</target>
        </trans-unit>
        <trans-unit id="a723f0fea3c45c67807883ef6059438866b12547" translate="yes" xml:space="preserve">
          <source>If after expansion there is nothing between the braces, the argument will be removed (see &lt;a href=&quot;#cartesian-product&quot;&gt;the cartesian product section&lt;/a&gt;):</source>
          <target state="translated">If after expansion there is nothing between the braces, the argument will be removed (see &lt;a href=&quot;#cartesian-product&quot;&gt;the cartesian product section&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="7f805483966bd1b92bb16fa0e48ac91c14f18567" translate="yes" xml:space="preserve">
          <source>If an error occurs during argparse processing it will exit with a non-zero status and print error messages to stderr.</source>
          <target state="translated">argparse 처리 중에 오류가 발생하면 0이 아닌 상태로 종료되고 stderr에 오류 메시지를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="f3bb201c1119b5848ebfda84c47d1e1698174af5" translate="yes" xml:space="preserve">
          <source>If any non-option parameters are given, the definition of the specified functions are printed.</source>
          <target state="translated">비 옵션 매개 변수가 제공되면 지정된 기능의 정의가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="dcc764ad71040642c2ae2b7ce376987c8f357ee1" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;#source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">&lt;a href=&quot;#source&quot;&gt;소스 소스를&lt;/a&gt; 사용하여 파일을 소싱하는 동안 exit가 호출 되면 나머지 파일은 건너 뛰지 만 쉘 자체는 종료되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2ad30bb6821fad0de41f3c375fba71f6a9c37c25" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;source#cmd-source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">If exit is called while sourcing a file (using the &lt;a href=&quot;source#cmd-source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</target>
        </trans-unit>
        <trans-unit id="821287731530c6efa130c60447058d08f9892ad3" translate="yes" xml:space="preserve">
          <source>If fish encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3068ba7bd98e36689eab0ca26911e82ce1011087" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;' or '&lt;code&gt;~&lt;/code&gt;', fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="translated">물고기가 주어진 이름으로 명령을 찾을 수 없으면 '로 시작합니다 &lt;code&gt;.&lt;/code&gt; ',' &lt;code&gt;/&lt;/code&gt; '또는' &lt;code&gt;~&lt;/code&gt; ', 물고기는 해당 이름의 디렉토리가 존재하는지 테스트합니다. 그렇다면 작업 디렉토리를 변경하려는 것으로 암시 적으로 가정합니다. 예를 들어, 홈 디렉토리로 전환하는 가장 빠른 방법은 &lt;code&gt;~&lt;/code&gt; 를 누르고 입력하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="db62838a3a80ccd2f019a10d8292bd8ef109bbbc" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08db4ab1c440a3e304e3453045348ee442c8b3f8" translate="yes" xml:space="preserve">
          <source>If fish is your default shell and you want to copy commands from the internet that are written in a different shell language, bash for example, you can proceed in the following way:</source>
          <target state="translated">If fish is your default shell and you want to copy commands from the internet that are written in a different shell language, bash for example, you can proceed in the following way:</target>
        </trans-unit>
        <trans-unit id="47028e01b9fbf55fb3801396985dce61b199f8e5" translate="yes" xml:space="preserve">
          <source>If fish is your default shell and you want to copy commands from the internet that are written in bash (the default shell on most systems), you can proceed in one of the following two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779713b50e0b6db32e410c35dd906b7eab469c0a" translate="yes" xml:space="preserve">
          <source>If invoked with multiple arguments instead of input, &lt;code&gt;string collect&lt;/code&gt; preserves each argument separately, where the number of output arguments is equal to the number of arguments given to &lt;code&gt;string collect&lt;/code&gt;.</source>
          <target state="translated">If invoked with multiple arguments instead of input, &lt;code&gt;string collect&lt;/code&gt; preserves each argument separately, where the number of output arguments is equal to the number of arguments given to &lt;code&gt;string collect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd1e21aed552d458b2c10cb3ad02fe6a085212c8" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The exit status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt; , which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt; , which are unscaled values. The exit status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</target>
        </trans-unit>
        <trans-unit id="9365afaebdcba814bae204eaa9cb6846f923618b" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">제한이 지정된 경우 지정된 자원의 새로운 값입니다. 옵션이 제공되지 않으면 &lt;code&gt;-f&lt;/code&gt; 로 가정됩니다. 값은 초 단위 인 &lt;code&gt;-t&lt;/code&gt; 및 스케일링되지 않은 값인 &lt;code&gt;-n&lt;/code&gt; 및 &lt;code&gt;-u&lt;/code&gt; 를 제외하고 킬로바이트 단위 입니다. 유효하지 않은 옵션이나 인수가 제공되지 않거나 새 한계를 설정하는 동안 오류가 발생하지 않으면 리턴 상태는 0입니다.</target>
        </trans-unit>
        <trans-unit id="ca3ffe9826b96a93254e7258c40cd2d913b9941e" translate="yes" xml:space="preserve">
          <source>If neither a pid nor a process name is specified, the command waits for all background jobs.</source>
          <target state="translated">pid 나 프로세스 이름을 지정하지 않으면 명령은 모든 백그라운드 작업을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="40f766e228eab41d3736559f22189015b4f35da8" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the given &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided but no &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6620b792aa7c50700f6a7c83a134de00e5936216" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the specified &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided without &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; 가 제공 되지 않으면 모든 바인딩 (또는 지정된 &lt;code&gt;MODE&lt;/code&gt; 의 바인딩 만 )이 인쇄됩니다. &lt;code&gt;COMMAND&lt;/code&gt; 없이 &lt;code&gt;SEQUENCE&lt;/code&gt; 가 제공 되면 해당 시퀀스와 일치하는 바인딩 만 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="7a85e1fe01cc44642ce9e8c5d9992c08bd26d23e" translate="yes" xml:space="preserve">
          <source>If no component is new, the variable ($fish_user_paths or $PATH) is not set again or otherwise modified, so variable handlers are not triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319b10cf51c7aaf0a0ad28a0d4b4f6c772504c25" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name '&lt;code&gt;-&lt;/code&gt;' is used, stdin will be read.</source>
          <target state="translated">파일을 지정하지 않고 stdin이 터미널이 아니거나 파일 이름 ' &lt;code&gt;-&lt;/code&gt; '가 사용되면 stdin을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="7bf33c78938c4ed9c99f65ad25f906359596c488" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name &lt;code&gt;-&lt;/code&gt; is used, stdin will be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193caf7005f5652feb5a621fdb872e8d40cb588f" translate="yes" xml:space="preserve">
          <source>If no option to determine how to split like &lt;code&gt;--delimiter&lt;/code&gt;, &lt;code&gt;--line&lt;/code&gt; or &lt;code&gt;--tokenize&lt;/code&gt; is given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">If no option to determine how to split like &lt;code&gt;--delimiter&lt;/code&gt; , &lt;code&gt;--line&lt;/code&gt; or &lt;code&gt;--tokenize&lt;/code&gt; is given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</target>
        </trans-unit>
        <trans-unit id="e05e6aafbb793ade9f477fd1403ff37aea85d34f" translate="yes" xml:space="preserve">
          <source>If no piping or other compound shell constructs are required, variable-expansion-as-command, as in &lt;code&gt;set cmd ls -la; $cmd&lt;/code&gt;, is also an option.</source>
          <target state="translated">If no piping or other compound shell constructs are required, variable-expansion-as-command, as in &lt;code&gt;set cmd ls -la; $cmd&lt;/code&gt; , is also an option.</target>
        </trans-unit>
        <trans-unit id="dcfe8801c42ff77994dd55c54562f05ad1157dea" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt;). If one or more PIDs are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">If no process is specified, the most recently-used job is removed (like &lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt;). If one or more PIDs are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</target>
        </trans-unit>
        <trans-unit id="536986c9ac77b0a65c848619315ad13a2f046d5c" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;code&gt;bg&lt;/code&gt; and &lt;code&gt;fg&lt;/code&gt;). If one or more &lt;code&gt;PID&lt;/code&gt;s are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">프로세스를 지정하지 않으면 가장 최근에 사용한 작업 (예 : &lt;code&gt;bg&lt;/code&gt; 및 &lt;code&gt;fg&lt;/code&gt; ) 이 제거됩니다 . 하나 이상의 &lt;code&gt;PID&lt;/code&gt; 가 지정되면 지정된 프로세스 ID를 가진 작업이 작업 목록에서 제거됩니다. 유효하지 않은 작업은 무시되고 경고가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="713bf8682430a51e2b7af1a6d836f8e75fd1bdaa" translate="yes" xml:space="preserve">
          <source>If no variable names are provided, &lt;code&gt;read&lt;/code&gt; enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:</source>
          <target state="translated">변수 이름이 제공되지 않으면 &lt;code&gt;read&lt;/code&gt; 는 표준 입력에서 표준 출력으로의 경로 재 지정을 제공하는 특수한 경우를 입력하여 명령 대체에 유용합니다. 예를 들어, 아래의 피쉬 쉘 명령을 사용하면 명령 자체에서 하드 코딩하는 대신 콘솔에서 명령 행 인수를 통해 제공해야하는 데이터를 읽을 수 있습니다. 쉘 히스토리에 입력 값 및 민감한 텍스트가 포함되지 않도록 방지 :</target>
        </trans-unit>
        <trans-unit id="5d57c5310bf24631a02f8ac52009cfffd06f806b" translate="yes" xml:space="preserve">
          <source>If none of these apply, the commit SHA shortened to 8 characters is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10333c9963acc5318f6aa7e98a933a59ba99c98b" translate="yes" xml:space="preserve">
          <source>If one argument is specified, the internal engine will be seeded with the argument for future invocations of &lt;code&gt;random&lt;/code&gt; and no output will be produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b617c0f8612fdf2ea16aba5ec62984acf5c44a" translate="yes" xml:space="preserve">
          <source>If only 123 and 789 exist, it will still background them and print an error about 456.</source>
          <target state="translated">123 및 789 만 존재하는 경우 여전히 백그라운드에서 456에 대한 오류를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="e5b23704e06de8e7cf41b466203c3d1a05734047" translate="yes" xml:space="preserve">
          <source>If set is called with no arguments, the names and values of all shell variables are printed in sorted order. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.</source>
          <target state="translated">인수없이 set을 호출하면 모든 쉘 변수의 이름과 값이 정렬 된 순서로 인쇄됩니다. 일부 범위 또는 내보내기 플래그가 제공된 경우 지정된 범위와 일치하는 변수 만 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="c9d5f4fcbf5a20e0012582eafdf56b977cf064da" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, 256 color support will always be enabled.</source>
          <target state="translated">If terminfo reports 256 color support for a terminal, 256 color support will always be enabled.</target>
        </trans-unit>
        <trans-unit id="302a7adb7b2bb424535b98eb0c4ef6539ea7cb20" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, support will always be enabled. To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</source>
          <target state="translated">terminfo가 터미널에 대해 256 색 지원을보고하면 항상 지원이 활성화됩니다. 디버그 컬러 팔레트의 문제로 &lt;code&gt;tput colors&lt;/code&gt; 유용 할 수있는 터미널의 terminfo의 색상 수를 볼 수 있습니다. &lt;code&gt;fish -d2&lt;/code&gt; 로 시작된 물고기 에는 사용중인 색상 지원 모드를 나타내는 진단 메시지가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4d30c96739992df19433df0a6e1c59dfb95af762" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can</source>
          <target state="translated">If that directory traversal is taking a long time, you can</target>
        </trans-unit>
        <trans-unit id="34986c35bab0e2df661c76619902534fb332f46c" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; out of it.</source>
          <target state="translated">해당 디렉토리 탐색에 시간이 오래 걸리면 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ffef75da37c5f07daa061c4afec5f2616551ca39" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press</source>
          <target state="translated">If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press</target>
        </trans-unit>
        <trans-unit id="e3d023db5ee6df47941a2ca566209f059001722c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt;. Pressing &lt;b&gt;Enter&lt;/b&gt; signals that you are done editing the function. This does not apply to an external editor like emacs or vim.</source>
          <target state="translated">는 IF &lt;code&gt;$VISUAL&lt;/code&gt; 환경 변수가 설정되어, 그것은 편집에 프로그램 기능으로 사용됩니다. 경우 &lt;code&gt;$VISUAL&lt;/code&gt; 설정되지하지만 &lt;code&gt;$EDITOR&lt;/code&gt; 설정, 즉 사용됩니다. 그렇지 않으면 내장 편집기가 사용됩니다. 내장 편집기를 사용하여 리터럴 개행을 입력하려면 &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter를 눌러야&lt;/b&gt; 합니다. &lt;b&gt;Enter를&lt;/b&gt; 누르면 기능 편집이 완료되었음을 알립니다. emacs 또는 vim과 같은 외부 편집기에는 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e8fb943c750f92e3917384bc05f81b775bd8db88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--delimiter&lt;/code&gt; argument is not given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">경우 &lt;code&gt;--delimiter&lt;/code&gt; 인수가 주어지지, 변수 &lt;code&gt;IFS&lt;/code&gt; 는 에 분할하는 문자 목록으로 사용됩니다. &lt;code&gt;IFS&lt;/code&gt; 사용에 의존하는 것은 더 이상 사용되지 않으며이 기능 은 향후 버전에서 제거 될 것입니다. &lt;code&gt;IFS&lt;/code&gt; 의 기본값 은 공백, 탭 및 줄 바꾸기 문자를 포함합니다. 특별한 경우, &lt;code&gt;IFS&lt;/code&gt; 가 빈 문자열로 설정되면 입력의 각 문자는 별도의 토큰으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="42f805a3ed49f9b5bb3e1d744a17decb53fbbd80" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of a key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys). Normally this will print an error if the current &lt;code&gt;$TERM&lt;/code&gt; entry doesn't have a given key, unless the &lt;code&gt;-s&lt;/code&gt; switch is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a1bc2ff2f56d3990f495529faa7ba44ead0455" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of the key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys.) If used in conjunction with the &lt;code&gt;-s&lt;/code&gt; switch, &lt;code&gt;bind&lt;/code&gt; will silently ignore bindings to named keys that are not found in termcap for the current &lt;code&gt;$TERMINAL&lt;/code&gt;, otherwise a warning is emitted.</source>
          <target state="translated">경우] &lt;code&gt;-k&lt;/code&gt; 스위치가 사용된다 (예 : '아래', '업'또는 '백 스페이스 키')를 키 이름 대신 시퀀스로 사용된다. 사용 된 이름은 해당 curses 변수와 동일하지만 'key_'접두사가 없습니다. (자세한 내용은 &lt;code&gt;terminfo(5)&lt;/code&gt; 를 참조하거나 사용 가능한 모든 명명 된 키 목록을 보려면 &lt;code&gt;bind --key-names&lt;/code&gt; 를 사용하십시오.) &lt;code&gt;-s&lt;/code&gt; 스위치 와 함께 사용하면 &lt;code&gt;bind&lt;/code&gt; 는 발견되지 않은 명명 된 키에 대한 바인딩을 자동으로 무시합니다. 현재 &lt;code&gt;$TERMINAL&lt;/code&gt; 의 경우 termcap 에서 그렇지 않으면 경고가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1d7b9b3be6cec368c8849bf11af8487da853a633" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current directory history is also displayed.</source>
          <target state="translated">는 IF &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--list&lt;/code&gt; 플래그가 지정되어, 현재 디렉토리의 역사도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4cfc35a3a98ed01dd389efdde71deb0bf3c6669a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current history is also displayed.</source>
          <target state="translated">는 IF &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--list&lt;/code&gt; 플래그가 지정되어, 현재의 역사도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="492a67bd7712dda8e66c7c5fc44c0836f4b18f3a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.</source>
          <target state="translated">경우 &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; 플래그는 곧 첫 번째 작업이 완료로 명령 수익을 제공한다. 제공되지 않으면 모든 작업이 완료된 후 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="63b9207ee5d979afeb85211115a3c6ffa7012a71" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/tmp&lt;/code&gt; directory exists, copy the &lt;code&gt;/etc/motd&lt;/code&gt; file to it:</source>
          <target state="translated">는 IF &lt;code&gt;/tmp&lt;/code&gt; 를 디렉토리가 존재, 복사 &lt;code&gt;/etc/motd&lt;/code&gt; 그것에 파일 :</target>
        </trans-unit>
        <trans-unit id="c3b856c7f49407f5bd18390ec22c0a975e0942a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BROWSER&lt;/code&gt; environment variable is set, it will be used as the name of the web browser to open instead of the system default.</source>
          <target state="translated">경우 &lt;code&gt;BROWSER&lt;/code&gt; 의 환경 변수가 설정되고, 그 대신 시스템 기본으로 열려면 웹 브라우저의 이름으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3debf54dad8f4dc6d939e041eacf2dbfc04ad3d0" translate="yes" xml:space="preserve">
          <source>If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.</source>
          <target state="translated">BROWSER 환경 변수가 설정된 경우 문서를 표시하는 데 사용됩니다. 그렇지 않으면 물고기는 적합한 브라우저를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="aa6fc1ea4246a9f77c10ddff36e9849dd9022bcd" translate="yes" xml:space="preserve">
          <source>If the above code was run with &lt;code&gt;$animal&lt;/code&gt; set to &lt;code&gt;whale&lt;/code&gt;, the output would be &lt;code&gt;mammal&lt;/code&gt;.</source>
          <target state="translated">위의 코드가 &lt;code&gt;$animal&lt;/code&gt; 을 &lt;code&gt;whale&lt;/code&gt; 로 설정하여 실행 하면 결과는 &lt;code&gt;mammal&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d75d0af6becad51e324987bba4dbf96c51e8300a" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, it is necessary to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; in order to tell fish that the function should not call itself, but rather a command with the same name. Failing to do so will cause infinite recursion bugs.</source>
          <target state="translated">별명이 별명 명령과 동일한 이름을 갖는 경우, 함수가 자신을 호출하지 말고 동일한 이름을 가진 명령을 피쉬에게 알리기 위해 &lt;code&gt;command&lt;/code&gt; 에 프로그램 호출을 접두어로 붙여야합니다 . 그렇지 않으면 무한 재귀 버그가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="49ebc34132e7660866a77bb4bd002951a641b8a0" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, you need to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; to tell fish that the function should not call itself, but rather a command with the same name. If you forget to do so, the function would call itself until the end of time. Usually fish is smart enough to figure this out and will refrain from doing so (which is hopefully in your interest).</source>
          <target state="translated">If the alias has the same name as the aliased command, you need to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; to tell fish that the function should not call itself, but rather a command with the same name. If you forget to do so, the function would call itself until the end of time. Usually fish is smart enough to figure this out and will refrain from doing so (which is hopefully in your interest).</target>
        </trans-unit>
        <trans-unit id="e5185e556f9b263d1410cf1a894fc4a29463388d" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press</source>
          <target state="translated">If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press</target>
        </trans-unit>
        <trans-unit id="ad3ed0aa46a2e24462a85265faa22a817cd5bf4f" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt;. This will show only arguments containing that part and you will get what you want much faster. Try it out, this is very convenient!</source>
          <target state="translated">당신이 원하는 인수가 멀리 다시 역사의 경우 (예를 들어 다시 2 선! - 단어의 많은입니다), 어떤의 일부를 누른 다음를 누릅니다의 입력 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; . 여기에는 해당 부분이 포함 된 인수 만 표시되며 원하는 것을 훨씬 빨리 얻을 수 있습니다. 사용해보십시오, 이것은 매우 편리합니다!</target>
        </trans-unit>
        <trans-unit id="8b1303483eab8a0aafe5607e65c79febb8c3aca1" translate="yes" xml:space="preserve">
          <source>If the commandline contains</source>
          <target state="translated">명령 줄에</target>
        </trans-unit>
        <trans-unit id="e3f1eb54148bd5719468d4632589d32c09c11b49" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press</source>
          <target state="translated">If the commandline reads &lt;code&gt;cd m&lt;/code&gt; , place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press</target>
        </trans-unit>
        <trans-unit id="4b1c190c6ad0436a0fd3fb383f1281a2e816bf89" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; to search for previously typed words containing 'm'.</source>
          <target state="translated">명령 줄 읽기 경우 &lt;code&gt;cd m&lt;/code&gt; 의 위에 커서를 올려 &lt;code&gt;m&lt;/code&gt; 의 문자를 눌러 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; 'm'을 포함하는 이전에 입력 된 단어를 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aec97b1cdbedc052d45f0ca8a3886ba07331192c" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output 'abar1 abar2 abar3 afoo1 afoo2 afoo3'.</source>
          <target state="translated">현재 디렉토리에 'foo'및 'bar'파일이 포함 된 경우 &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; 명령 은 'abar1 abar2 abar3 afoo1 afoo2 afoo3'을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="3b9446dcdf384793d9dbf8ed3d708bf58cbc9557" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output &lt;code&gt;abar1 abar2 abar3 afoo1 afoo2 afoo3&lt;/code&gt;.</source>
          <target state="translated">If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output &lt;code&gt;abar1 abar2 abar3 afoo1 afoo2 afoo3&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6ce9ab732e8430cafcdfc25d7e2465b58abf7288" translate="yes" xml:space="preserve">
          <source>If the cursor shape does not appear to be changing after setting the above variables, it's likely your terminal emulator does not support the capabilities necessary to do this. It may also be the case, however, that &lt;code&gt;fish_vi_cursor&lt;/code&gt; has not detected your terminal's features correctly (for example, if you are using &lt;code&gt;tmux&lt;/code&gt;). If this is the case, you can force &lt;code&gt;fish_vi_cursor&lt;/code&gt; to set the cursor shape by setting &lt;code&gt;$fish_vi_force_cursor&lt;/code&gt; in &lt;code&gt;config.fish&lt;/code&gt;. You'll have to restart fish for any changes to take effect. If cursor shape setting remains broken after this, it's almost certainly an issue with your terminal emulator, and not fish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0808aebe4a3101606343cf63b29ba38dae1d40f" translate="yes" xml:space="preserve">
          <source>If the end is negative the range always goes up, so &lt;code&gt;2..-2&lt;/code&gt; will go from element 2 to 4, and &lt;code&gt;2..-16&lt;/code&gt; won't go anywhere because there is no way to go from the second element to one that doesn't exist, while going up. If the start is negative the range always goes down, so &lt;code&gt;-2..1&lt;/code&gt; will go from element 4 to 1, and &lt;code&gt;-16..2&lt;/code&gt; won't go anywhere because there is no way to go from the second element to one that doesn't exist, while going down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea966f7daecf90f40c09560ec0ace32a38679be8" translate="yes" xml:space="preserve">
          <source>If the end is smaller than the start, or the start is larger than the end, range expansion will go in reverse. This is unless exactly one of the given indices is negative, so the direction doesn't change if the list has fewer elements than expected.</source>
          <target state="translated">If the end is smaller than the start, or the start is larger than the end, range expansion will go in reverse. This is unless exactly one of the given indices is negative, so the direction doesn't change if the list has fewer elements than expected.</target>
        </trans-unit>
        <trans-unit id="9ac01aa8bdf61c4705d1b573ca6b14e107487f86" translate="yes" xml:space="preserve">
          <source>If the expression is successfully evaluated and doesn't over/underflow or return NaN the return &lt;code&gt;status&lt;/code&gt; is zero (success) else one.</source>
          <target state="translated">식이 성공적으로 평가되고 오버플로 / 언더 플로 또는 NaN을 반환하지 않으면 반환 &lt;code&gt;status&lt;/code&gt; 는 0 (성공)입니다.</target>
        </trans-unit>
        <trans-unit id="5cfff00b5bb7a05a9b5b06be91a9cc46be32a1f7" translate="yes" xml:space="preserve">
          <source>If the first and second parts are skipped, they are assumed to be &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;, respectively. As an example, &lt;code&gt;r,u+w&lt;/code&gt; means all users should have read access and the file owner should also have write access.</source>
          <target state="translated">첫 번째 부분과 두 번째 부분을 건너 뛰면 각각 &lt;code&gt;a&lt;/code&gt; 및 &lt;code&gt;=&lt;/code&gt; 로 간주됩니다 . 예를 들어, &lt;code&gt;r,u+w&lt;/code&gt; 는 모든 사용자에게 읽기 권한이 있어야하고 파일 소유자에게도 쓰기 권한이 있어야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b4698317f8ba03650612df6e27206dff978e2d3a" translate="yes" xml:space="preserve">
          <source>If the function definition is changed, all running shells will automatically reload the altered version, after a while.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51826fa22bf5b5c7586ce652a67a6e4318f4ac64" translate="yes" xml:space="preserve">
          <source>If the function definition is changed, all running shells will automatically reload the altered version.</source>
          <target state="translated">If the function definition is changed, all running shells will automatically reload the altered version.</target>
        </trans-unit>
        <trans-unit id="9a3fcf12ac09fc3d89e8bddfebabb9762099029f" translate="yes" xml:space="preserve">
          <source>If the given argument doesn't work for the given format (like when you try to convert a number like 3.141592 to an integer), printf prints an error, to stderr. printf will then also return non-zero, but will still try to print as much as it can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154cdf4f784ed79e1fcb74335c0c901b6cf4ac90" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will constrain the recall to lines that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="translated">원하는 줄이 기록에서 훨씬 뒤로 돌아 오면 줄의 일부를 입력 한 다음 위로를 한 번 이상 누릅니다. 이렇게하면이 텍스트를 포함하는 줄로 리콜을 제한 할 수 있으며 원하는 줄로 훨씬 빨리 갈 수 있습니다. 이것은 &quot;! vi&quot;, &quot;!? bar.c&quot;등을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="3b7bdf7353455fbb73bf0134588c41d8ca71de37" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will filter the recalled lines to ones that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70006a59c6935a4438f9d0040be162c8ee9ec5a8" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible.</source>
          <target state="translated">목록이 표시되면 control-S (또는 &lt;code&gt;pager-toggle-search&lt;/code&gt; 바인딩)를 누르면 목록을 필터링 할 수 있습니다. Shift- 탭 (또는 &lt;code&gt;complete-and-search&lt;/code&gt; 바인딩)은 검색 필드가 즉시 보이는 상태에서 완료를 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="d76a8116548a88ed416d142b0ea322f0ccb59543" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible. These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible. These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</target>
        </trans-unit>
        <trans-unit id="275b4b014bd30e8806c2588d2da955cb7daf020a" translate="yes" xml:space="preserve">
          <source>If the operation fails, an error will be reported.</source>
          <target state="translated">If the operation fails, an error will be reported.</target>
        </trans-unit>
        <trans-unit id="29df263ac386a0b20ba5f9a3e6fe000d33b8c6f2" translate="yes" xml:space="preserve">
          <source>If the output is piped to &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split or string split0&lt;/a&gt; as the last step, those splits are used as they appear and no additional splitting on newlines takes place.</source>
          <target state="translated">If the output is piped to &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split or string split0&lt;/a&gt; as the last step, those splits are used as they appear and no additional splitting on newlines takes place.</target>
        </trans-unit>
        <trans-unit id="a8520adcbbdaffc01186486c06aba4bb1a9f6f80" translate="yes" xml:space="preserve">
          <source>If the output is piped to &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split or string split0&lt;/a&gt; as the last step, those splits are used as they appear instead of splitting lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cbf00537e46f313957ac2ba3ba9168d8838d5a" translate="yes" xml:space="preserve">
          <source>If the output of &lt;code&gt;jobs&lt;/code&gt; is redirected or if it is part of a command substitution, the column header that is usually printed is omitted, making it easier to parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c01f00f1709a1d845be8af766e2896516906fa" translate="yes" xml:space="preserve">
          <source>If the path is invalid no translated path will be written to stdout and an error will be reported.</source>
          <target state="translated">경로가 유효하지 않으면 변환 된 경로가 stdout에 기록되지 않고 오류가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="e1e2f0cd5d9c3189924438eab165e537469221dd" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a terminal device, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">If the specified file descriptor is a terminal device, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</target>
        </trans-unit>
        <trans-unit id="e907fd3510899683ab1ac3f96d2aac1979d9258b" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a tty, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">지정된 파일 설명자가 tty 인 경우 명령의 종료 상태는 0입니다. 그렇지 않으면 종료 상태는 0이 아닙니다. 표준 오류로 인쇄 된 메시지가 없습니다.</target>
        </trans-unit>
        <trans-unit id="fe06c7e257d873be32fd7989f5055c27083aeab6" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;../index#variables-lists&quot;&gt;variable list&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;../index#variables-lists&quot;&gt;variable list&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; . If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</target>
        </trans-unit>
        <trans-unit id="bd0e2ed527cbeaac8bf34e5481dc729ba00211c1" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;index#variables-arrays&quot;&gt;variable array&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">사용자가 함수 뒤에 추가 인수를 입력하면 환경 &lt;a href=&quot;index#variables-arrays&quot;&gt;변수 배열 &lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 삽입됩니다 . 는 IF &lt;code&gt;--argument-names&lt;/code&gt; 옵션이 제공되며, 인수는 그 옵션에 지정된 이름에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="89093e95575f5c91e69c231cc514a5f888c355b9" translate="yes" xml:space="preserve">
          <source>If the variable $animal contains the name of an animal, the following code would attempt to classify it:</source>
          <target state="translated">변수 $ animal에 동물의 이름이 포함되어 있으면 다음 코드는이를 분류하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="081ef0f3bbeaf93e50b97aca197ba4dab7103ab9" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;MANPATH&lt;/code&gt; is defined and not empty, print the contents. (If &lt;code&gt;MANPATH&lt;/code&gt; is not defined, then it will expand to zero arguments, unless quoted.)</source>
          <target state="translated">변수 &lt;code&gt;MANPATH&lt;/code&gt; 가 정의되어 있고 비어 있지 않은 경우 내용을 인쇄하십시오. ( &lt;code&gt;MANPATH&lt;/code&gt; 가 정의되어 있지 않으면 인용되지 않는 한 인수가 0으로 확장됩니다.)</target>
        </trans-unit>
        <trans-unit id="b85b340b71b7dd9ea477da93a9f45e28372572db" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more array elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those array elements specified will be changed. If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">변수 이름이 하나 이상의 배열 요소 (예 : &lt;code&gt;PATH[1 3 7]&lt;/code&gt; 이면 지정된 배열 요소 만 변경됩니다. 배열 변수를 확장하거나 할당 할 때 음수 인덱스를 지정하면 배열 끝에서 인덱스가 계산됩니다. 예를 들어, 인덱스 -1은 배열의 마지막 인덱스를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="2711332599fb67538cfe4343e904027c558ff897" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more list elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those list elements specified will be changed. If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="translated">If the variable name is one or more list elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt; , only those list elements specified will be changed. If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</target>
        </trans-unit>
        <trans-unit id="a6814ef5142616c01b6f2d05d43a0d85447be5e1" translate="yes" xml:space="preserve">
          <source>If the wildcard doesn't match any files, fish prints an error instead of running the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788fcc2dc7b9ec9c743aa985b73d706a1c941ace" translate="yes" xml:space="preserve">
          <source>If there are multiple files with the same name in these directories, only the first will be executed. They are executed in order of their filename, sorted (like globs) in a natural order (i.e. &quot;01&quot; sorts before &quot;2&quot;).</source>
          <target state="translated">이 디렉토리에 이름이 같은 파일이 여러 개 있으면 첫 번째 파일 만 실행됩니다. 파일 이름 순서대로 실행되며 (예 : glob와 같이) 자연 순서로 정렬됩니다 (예 : &quot;01&quot;은 &quot;2&quot;이전에 정렬).</target>
        </trans-unit>
        <trans-unit id="eac425bf6207cbab94ad0592640cd63376fdd157" translate="yes" xml:space="preserve">
          <source>If there is no &quot;,&quot; or variable expansion between the curly braces, they will not be expanded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b3f6c1d9e2443aab8662a7a439797d66881a18" translate="yes" xml:space="preserve">
          <source>If there is no function called &lt;code&gt;NAME&lt;/code&gt; a new function will be created with the specified name</source>
          <target state="translated">&lt;code&gt;NAME&lt;/code&gt; 이라는 함수가 없으면 지정된 이름으로 새 함수가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="6d5cfe09681412194f4ba98b5cd9ee3fb9a19be4" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element.</source>
          <target state="translated">중괄호와 쉼표 또는 두 개의 쉼표 사이에 아무 것도 없으면 빈 요소로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="bda5467f9834c7878e79dd21cd4d2f3d7dd7c4a6" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element:</source>
          <target state="translated">If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element:</target>
        </trans-unit>
        <trans-unit id="24adce4068128d584888031a1553f03853a858ae" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them</source>
          <target state="translated">If there's more than one possibility, it will list them</target>
        </trans-unit>
        <trans-unit id="afe6214497e3e493ce7fed66861473c8f9d5c2d3" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them:</source>
          <target state="translated">둘 이상의 가능성이있는 경우 다음이 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="de923b57f81ea36d26260a4b367e2212c4d985f9" translate="yes" xml:space="preserve">
          <source>If this weren't the case, using an option without an optional argument would be difficult if you also wanted to use positional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463c7b41266bb02e7be790b635471da72331d8c9" translate="yes" xml:space="preserve">
          <source>If two braces do not contain a &quot;,&quot; or a variable expansion, they will not be expanded in this manner:</source>
          <target state="translated">If two braces do not contain a &quot;,&quot; or a variable expansion, they will not be expanded in this manner:</target>
        </trans-unit>
        <trans-unit id="b7169ee1687897eb641502cd41ad2371d924e959" translate="yes" xml:space="preserve">
          <source>If you are already familiar with other shells like bash and want to see the scripting differences, see &lt;a href=&quot;fish_for_bash_users#fish-for-bash-users&quot;&gt;Fish For Bash Users&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cb82d2e700bf8a36c75cef6564324d53172bf4" translate="yes" xml:space="preserve">
          <source>If you are developing another program and want to install fish functions for it, install them to the &quot;vendor&quot; functions directory. As this path varies from system to system, you can use &lt;code&gt;pkgconfig&lt;/code&gt; to discover it with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4ecf432926bdf9219384030390dce4a62ae339" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;.</source>
          <target state="translated">다른 프로그램을 개발 중이고 프로그램과 함께 완성품을 배송하려면 &quot;공급 업체&quot;완성 디렉토리에 설치하십시오. 이 경로는 시스템마다 다를 수 있으므로 &lt;code&gt;pkgconfig&lt;/code&gt; 프레임 워크를 사용하여 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; 의 출력으로이 경로를 발견해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f3b96ff834aa659d4dcfe109c2f08409908bba2c" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the pkgconfig framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="translated">If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the pkgconfig framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; . Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</target>
        </trans-unit>
        <trans-unit id="a2e3bcc2c86a34d726c99da6041e118aebc6aab5" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish-specific configuration. However, if they are absolutely required, you may install them to the &quot;vendor&quot; configuration directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt;.</source>
          <target state="translated">다른 프로그램을 개발하는 경우 시스템에서 모든 피쉬 쉘 사용자에게 실행되는 구성을 설치하려고 할 수 있습니다. 이것은 권장되지 않습니다. 주의해서 쓰지 않으면 부작용이 있거나 쉘의 시작 속도가 느려질 수 있습니다. 또한 다른 쉘 사용자는 물고기 별 구성의 이점을 얻지 못합니다. 그러나 반드시 필요한 경우 &quot;공급 업체&quot;구성 디렉토리에 설치할 수 있습니다. 이 경로는 시스템마다 다를 수 있으므로 &lt;code&gt;pkgconfig&lt;/code&gt; 프레임 워크를 사용하여 &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt; 출력으로이 경로를 검색해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4916db32b6aa8cbf9c1ffbb01d73d5df4a8870cc" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;.</source>
          <target state="translated">다른 프로그램을 개발하는 경우 시스템에서 모든 피쉬 쉘 사용자가 사용할 수있는 기능을 설치할 수 있습니다. &quot;공급 업체&quot;기능 디렉토리에 설치할 수 있습니다. 이 경로는 시스템마다 다를 수 있으므로 &lt;code&gt;pkgconfig&lt;/code&gt; 프레임 워크를 사용하여 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; 의 출력으로이 경로를 발견해야합니다 .</target>
        </trans-unit>
        <trans-unit id="24d577aff02c57ccc535834fabc2b9ff18d8c605" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="translated">If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; . Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</target>
        </trans-unit>
        <trans-unit id="423e276545b7dd53d72e587423056db3d40ae703" translate="yes" xml:space="preserve">
          <source>If you are familiar with these, it is useful to know how &lt;code&gt;string&lt;/code&gt; differs from them.</source>
          <target state="translated">If you are familiar with these, it is useful to know how &lt;code&gt;string&lt;/code&gt; differs from them.</target>
        </trans-unit>
        <trans-unit id="2c8709afb8c37b08fcb75856aca6d9778e8772cd" translate="yes" xml:space="preserve">
          <source>If you are just interested in success or failure, you can run the command directly as the if-condition:</source>
          <target state="translated">성공 또는 실패에 관심이있는 경우 if 조건으로 명령을 직접 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="369024ad3ad574b3856fe6057599495dfc817fd9" translate="yes" xml:space="preserve">
          <source>If you are unsure, your functions probably belong in &lt;code&gt;~/.config/fish/functions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4679db7ed1ee15be09b7a815eb852cdada744e" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the array will be written as separate items. This means you can easily iterate over an array using this syntax:</source>
          <target state="translated">대괄호를 사용하지 않으면 배열의 모든 요소가 별도의 항목으로 작성됩니다. 이는 다음 구문을 사용하여 배열을 쉽게 반복 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="80a3062c14429e2bf432a524df5b36623d385389" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the list will be written as separate items. This means you can easily iterate over a list using this syntax:</source>
          <target state="translated">If you do not use any brackets, all the elements of the list will be written as separate items. This means you can easily iterate over a list using this syntax:</target>
        </trans-unit>
        <trans-unit id="21121c72874a1f506d3167db9734fb72635e8aba" translate="yes" xml:space="preserve">
          <source>If you do this via a function it should be defined with the &lt;code&gt;--no-scope-shadowing&lt;/code&gt; flag. Otherwise it won't have access to those variables.</source>
          <target state="translated">함수를 통해이를 수행하는 경우 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; 플래그 로 정의해야합니다 . 그렇지 않으면 해당 변수에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="057466e7c75d89a70efb57d8608b762b10a981b3" translate="yes" xml:space="preserve">
          <source>If you don't use any brackets, all the elements of the list will be passed to the command as separate items. This means you can iterate over a list with &lt;code&gt;for&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf34bb52e96a3b222773c87c97bf5316f69250b8" translate="yes" xml:space="preserve">
          <source>If you enabled the informative status, there are numerous customization options, which can be controlled with fish variables.</source>
          <target state="translated">If you enabled the informative status, there are numerous customization options, which can be controlled with fish variables.</target>
        </trans-unit>
        <trans-unit id="76fc284188c8102e752b1bddb9f0226a85c1fbff" translate="yes" xml:space="preserve">
          <source>If you have a question not answered by this documentation, there are several avenues for help:</source>
          <target state="translated">이 문서에서 질문에 대한 답변을 얻지 못한 경우 몇 가지 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5d69fd8cf3faf8da11aa1c87838469a40522c72" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what &lt;code&gt;fish&lt;/code&gt; does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="translated">다른 껍질에 대해 잘 알고 있고 &lt;code&gt;fish&lt;/code&gt; 가 어떻게 다른지 알고 싶다면 &lt;em&gt;다른 껍질과 달리&lt;/em&gt; 마법의 문구를 검색하십시오.이 문구 &lt;em&gt;는&lt;/em&gt; 중요한 차이점을 불러내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ba67516086f4606dc5d63145b43021f56c59577b" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what fish does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc09dcecb8ef64b63482fb69c9b8ca0c41f4a9d" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the GitHub page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94e356f3d06bfc0847471bd8ac63c7fdd35e968" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the mailing list or the GitHub page.</source>
          <target state="translated">생선이 개선 된 경우 메일 링리스트 또는 GitHub 페이지를 통해 생선을 제출할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c91aaa3641347d6b92a729c32a7d96c010b6da2" translate="yes" xml:space="preserve">
          <source>If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in &lt;a href=&quot;#more-help&quot;&gt;Further help and development&lt;/a&gt;.</source>
          <target state="translated">공통 Unix 명령에 대한 새로운 완성을 작성했다면 &lt;a href=&quot;#more-help&quot;&gt;추가 도움말 및 개발&lt;/a&gt; 의 지시 사항을 통해 작업을 제출하여 공유를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="59be97f1d3e357895205704e9a083053c416f3f4" translate="yes" xml:space="preserve">
          <source>If you haven't activated vi mode on purpose, you might have installed a third-party theme that does it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801a4bfeff44c78289adc6da559907889b10b7ff" translate="yes" xml:space="preserve">
          <source>If you installed a prepackaged version of fish, the package manager should have already done this for you.</source>
          <target state="translated">사전 패키지 버전의 물고기를 설치 한 경우 패키지 관리자가 이미이 작업을 수행 했어야합니다.</target>
        </trans-unit>
        <trans-unit id="bacc9cf3f5b8aece5e2cb795329bd9e98f414229" translate="yes" xml:space="preserve">
          <source>If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):</source>
          <target state="translated">물고기를 수동으로 설치 한 경우 (예 : 패키지 관리자를 사용하지 않고 컴파일하여), / usr / local에 물고기를 설치했다고 가정하면 먼저 다음 명령을 실행하여 조개 목록에 물고기를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="af40cb842637feef7ad4047a0e620a3e2d404f64" translate="yes" xml:space="preserve">
          <source>If you installed it with a package manager, just use that package manager's uninstall function. If you built fish yourself, assuming you installed it to /usr/local, do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec1a3f92a8c27f32a8f6e6cb86da5cd7afb4270" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; command.</source>
          <target state="translated">If you instead want to put a suspended job into the background, use the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; command.</target>
        </trans-unit>
        <trans-unit id="24dbcaa65ea45136e4556660a86f87890a258184" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">대신 일시 중단 된 작업을 백그라운드에 배치하려면 &lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="542197cd998c2de66183ced7aed677f0d6eff906" translate="yes" xml:space="preserve">
          <source>If you need a list of numbers, you can use the &lt;code&gt;seq&lt;/code&gt; command to create one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d15c732f3a561ab865f45eb2b69dbf51b681f71" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as a list, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as a list, where the first element is the browser command and the rest are browser options.</target>
        </trans-unit>
        <trans-unit id="76575622923fc6960275a0372650f7e641f7d23c" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as an array, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">물고기 도움말에 다른 브라우저 (위에서 설명한 것 이외의)를 사용하려면 fish_help_browser 변수를 설정할 수 있습니다. 이 변수는 배열로 설정 될 수 있습니다. 여기서 첫 번째 요소는 브라우저 명령이고 나머지는 브라우저 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="e98db4a9618c4e99c4cfeeb47be4e315b3159f68" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="translated">If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</target>
        </trans-unit>
        <trans-unit id="bfe063a17016dbfe1f5327724e22af9c696e2b9d" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to a list variable, the index will be taken from the &lt;em&gt;end&lt;/em&gt; of the list. For example, the index -1 is the last element of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b10dc2d52b83a3f3bcbb9eafde410131a7638e1" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">배열 변수를 확장하거나 할당 할 때 음수 인덱스를 지정하면 인덱스가 배열 끝에서 계산됩니다. 예를 들어, 인덱스 -1은 배열의 마지막 인덱스를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="bef2a5da408bc0ccc604bb6e7c2ada1e1e368d28" translate="yes" xml:space="preserve">
          <source>If you specify both &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--contains&lt;/code&gt; the last flag seen is used.</source>
          <target state="translated">&lt;code&gt;--prefix&lt;/code&gt; 와 &lt;code&gt;--contains&lt;/code&gt; 를 모두 지정 하면 마지막으로 본 플래그가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cfeb5cfbb4d7330298cd9ae2e7db448aa2300961" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--entire&lt;/code&gt; then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to &lt;code&gt;grep&lt;/code&gt; without the &lt;code&gt;-o&lt;/code&gt; flag). You can, obviously, achieve the same result by prepending and appending &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; depending on whether or not you have specified the &lt;code&gt;--regex&lt;/code&gt; flag. The &lt;code&gt;--entire&lt;/code&gt; flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the &lt;code&gt;string match&lt;/code&gt; clearer. Without &lt;code&gt;--entire&lt;/code&gt; and &lt;code&gt;--regex&lt;/code&gt;, a PATTERN will need to match the entire STRING before it will be reported.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--entire&lt;/code&gt; 를 지정하면 패턴과 일치하지 않는 접 두부 또는 접미 부를 포함하여 각 일치하는 문자열이 인쇄됩니다 ( &lt;code&gt;-o&lt;/code&gt; 플래그 없이 &lt;code&gt;grep&lt;/code&gt; 과 동일 ). &lt;code&gt;--regex&lt;/code&gt; 플래그를 지정했는지 여부에 따라 &lt;code&gt;*&lt;/code&gt; 또는 &lt;code&gt;.*&lt;/code&gt; 를 앞에 추가하고 추가하여 동일한 결과를 얻을 수 있습니다 . &lt;code&gt;--entire&lt;/code&gt; 플래그는 단순히 패션의 패턴을 복잡하게하고의 의도 할 필요가 없도록하는 방법입니다 &lt;code&gt;string match&lt;/code&gt; 명확. &lt;code&gt;--entire&lt;/code&gt; 및 &lt;code&gt;--regex&lt;/code&gt; 가 없으면 PATTERN이 (가)보고되기 전에 전체 STRING과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="22a9feadf64d822a318f10f2b4793d1a2316c159" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--filter&lt;/code&gt; flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt;. You can instead just write &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--filter&lt;/code&gt; 플래그를 지정하면 교체가 완료된 경우에만 각 입력 문자열이 인쇄됩니다. 이 관용구를 다르게 사용하는 경우에 유용합니다. &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt; . 대신 &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8e54ae0a24762829d8f55a86df97428a46a48f0" translate="yes" xml:space="preserve">
          <source>If you want to add the directory &lt;code&gt;~/linux/bin&lt;/code&gt; to your PATH variable when using a login shell, add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:</source>
          <target state="translated">로그인 쉘을 사용할 때 &lt;code&gt;~/linux/bin&lt;/code&gt; 디렉토리 를 PATH 변수에 추가하려면 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 파일에 다음을 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="9279139c6582126d71499a2ce758884961e720f6" translate="yes" xml:space="preserve">
          <source>If you want to be able to press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b1e2234b3ea5f7781540b4747240f8e476c656" translate="yes" xml:space="preserve">
          <source>If you want to change or disable this display, modify the &lt;code&gt;fish_mode_prompt&lt;/code&gt; function, for instance via &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3226bbbfea92d52214a04066c17b75561d8b1dfd" translate="yes" xml:space="preserve">
          <source>If you want to find out more about the echo command used above, read the manual page for the echo command by writing: &lt;code&gt;man echo&lt;/code&gt;</source>
          <target state="translated">위에서 사용한 echo 명령에 대한 자세한 내용을 보려면 다음을 작성하여 echo 명령 매뉴얼 페이지를 읽으십시오. &lt;code&gt;man echo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf2181e509bdee84b390ead8fe1261883f65f450" translate="yes" xml:space="preserve">
          <source>If you want to know if a variable has &lt;em&gt;no elements&lt;/em&gt;, use &lt;code&gt;set -q var[1]&lt;/code&gt;.</source>
          <target state="translated">If you want to know if a variable has &lt;em&gt;no elements&lt;/em&gt;, use &lt;code&gt;set -q var[1]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6b8934a463057ab4cbebc293cbcc2bde13fda93" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index&quot;&gt;lots of detailed documentation&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, the IRC channel #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">당신이 물고기에 대한 자세한 내용을 원한다면,이 &lt;a href=&quot;index&quot;&gt;자세한 설명서를 많이&lt;/a&gt; , &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;공식 메일 링리스트&lt;/a&gt; ,에 IRC 채널 #fish &lt;code&gt;irc.oftc.net&lt;/code&gt; 및 &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;GitHub의 페이지&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aa7777db3b385617c9905b1bb85dce8643e34e91" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index#intro&quot;&gt;lots of detailed documentation&lt;/a&gt;, the &lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;official gitter channel&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">If you want to learn more about fish, there is &lt;a href=&quot;index#intro&quot;&gt;lots of detailed documentation&lt;/a&gt;, the &lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;official gitter channel&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="19d1a8c24236cf7d05190b1115ef30aaad303cfb" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then &lt;code&gt;fish&lt;/code&gt; might be just what you're looking for!</source>
          <target state="translated">여러 가지 구문과 구성 옵션을 배우지 않고 명령 줄을보다 생산적이고 유용하고 재미있게 만들고 싶다면 &lt;code&gt;fish&lt;/code&gt; 가 원하는 것일 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="5b7d23bdb9d59e0e649f1e88d3662e4b2b0bdeb7" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then fish might be just what you're looking for!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8639c78ec7d928802ef97a990dee029d2225ce5d" translate="yes" xml:space="preserve">
          <source>If you want to modify your existing prompt, you can use &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt; like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240e39aa619c5f139c2593362dec95cdca1dfa27" translate="yes" xml:space="preserve">
          <source>If you want to organize your configuration, fish also reads commands in .fish files in &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt;. See &lt;a href=&quot;index#initialization&quot;&gt;initialization&lt;/a&gt; for the details.</source>
          <target state="translated">If you want to organize your configuration, fish also reads commands in .fish files in &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt; . See &lt;a href=&quot;index#initialization&quot;&gt;initialization&lt;/a&gt; for the details.</target>
        </trans-unit>
        <trans-unit id="57bb991addeaec34e0d2e4ff1072fa3e66d59b28" translate="yes" xml:space="preserve">
          <source>If you want to override a variable for a single command, you can use &quot;var=val&quot; statements before the command:</source>
          <target state="translated">If you want to override a variable for a single command, you can use &quot;var=val&quot; statements before the command:</target>
        </trans-unit>
        <trans-unit id="b010bfc3d915896fa771aef1b796169616d992f5" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (</source>
          <target state="translated">If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (</target>
        </trans-unit>
        <trans-unit id="817bbc583c325d82f70d5e4e389c9fb588a7021e" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Backspace&lt;/b&gt; are your friends).</source>
          <target state="translated">같은 라인에서 여러 인수를 재사용 할 경우 ( &quot;! : 3 *&quot;등), 전체 라인을 리콜하고 필요없는 것을 제거하십시오 ( &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; 와 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;백 스페이스&lt;/b&gt; 당신의 친구를).</target>
        </trans-unit>
        <trans-unit id="17b2c50714eca6eb3a1c4f418309af6c45fec63f" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when &lt;code&gt;fish&lt;/code&gt; exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 종료 될 때 일련의 명령을 실행 하려면 쉘 종료에 의해 트리거되는 &lt;a href=&quot;#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 를 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="a64e2d8d56c620a2a93cec9e87f8b2ade6021773" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when fish exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef00e85cfc00298b4501ca427b39a1d3165499a" translate="yes" xml:space="preserve">
          <source>If you want to set some personal customization, universal variables are nice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bd99bf1b62b6b2fbac8244f0ed2e2fc11de65b" translate="yes" xml:space="preserve">
          <source>If you want to set something in config.fish, or set something in a function and have it available for the rest of the session, global scope is a good choice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a9b4644cb739f83f6382b12a8a184f1a74b482" translate="yes" xml:space="preserve">
          <source>If you want to uninstall fish, first make sure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840dcfc4db83e11261bb160a1f0912d853943c4b" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places:</source>
          <target state="translated">피쉬 (또는 다른 쉘)를 기본 쉘로 사용하려면 새 쉘의 실행 파일 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 를 다음 두 곳에 입력해야 합니다.</target>
        </trans-unit>
        <trans-unit id="115e2c44e689956437e718e0ec0032e55b5f7fed" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places: - add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; - change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;</source>
          <target state="translated">If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places: - add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; - change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3366416e47329d39ef388391235aec49254de478" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable in two places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5f2b7c10dba916512ad297d63b951291ca4677" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;a href=&quot;source#cmd-source&quot;&gt;source&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a88aaa448eb4ccc5d7c16b222b1aaafa2e3553e" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;code&gt;source&lt;/code&gt; instead.</source>
          <target state="translated">명령에 stdin에 액세스 할 필요가 없으면 대신 &lt;code&gt;source&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a0edd7289f911011f3a35d834f1f941473e2b0a8" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed if $WORD is the empty string (like after &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt;).</source>
          <target state="translated">If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed if $WORD is the empty string (like after &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="20b7e02e5dced2f235b74397e5dd8fd6678ecaa1" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed, if $WORD is the empty string.</source>
          <target state="translated">위의 예에서 $ WORD가 정의되지 않았거나 빈 목록이면 &quot;s&quot;가 인쇄되지 않습니다. 그러나 $ WORD가 빈 문자열이면 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="cd4f982a2dfbfb7a494a0fcc11edc18044fd3ee7" translate="yes" xml:space="preserve">
          <source>Import the abbreviations defined on another_host over SSH.</source>
          <target state="translated">SSH를 통해 another_host에 정의 된 약어를 ​​가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="07b875aa08020a5fdd644ae88f4843b8a79307a9" translate="yes" xml:space="preserve">
          <source>In a terminal, the application running inside it and the terminal itself need to agree on the width of characters in order to handle cursor movement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439670388f9df6081d069daa092806041f2fd81f" translate="yes" xml:space="preserve">
          <source>In addition there's a &lt;a href=&quot;cmds/begin#cmd-begin&quot;&gt;begin&lt;/a&gt; block that just groups commands together so you can redirect to a block or use a new &lt;a href=&quot;#variables-scope&quot;&gt;variable scope&lt;/a&gt; without any repetition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fee095141e15902cb9b8f496f993f1d5d3fa057" translate="yes" xml:space="preserve">
          <source>In addition to the standard bindings listed here, you can also define your own with &lt;a href=&quot;cmds/bind#cmd-bind&quot;&gt;bind&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50371ba790382257744186339f089813674f7e0" translate="yes" xml:space="preserve">
          <source>In addition, it only splits them on newlines instead of $IFS. If you want to split on something else, use &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split&lt;/a&gt;, &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split0&lt;/a&gt; or &lt;a href=&quot;cmds/string#cmd-string-collect&quot;&gt;string collect&lt;/a&gt;. If those are used as the last command in a command substitution the splits they create are carried over. So:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b7d1b47f67f33906cafe0ea45bb9a7ae9de792" translate="yes" xml:space="preserve">
          <source>In addition, when adding abbreviations:</source>
          <target state="translated">또한 약어를 추가 할 때 :</target>
        </trans-unit>
        <trans-unit id="8214b19376f922281d94350c39e691ba4c55ab07" translate="yes" xml:space="preserve">
          <source>In addition, when adding or renaming abbreviations:</source>
          <target state="translated">In addition, when adding or renaming abbreviations:</target>
        </trans-unit>
        <trans-unit id="f5b280783a543346f92416ec886c17e3557233fc" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status, but passes along whatever $status was set, including by command substitutions. This allows capturing the output and exit status of a subcommand, like in &lt;code&gt;if set output (command)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11dd25d3b50e779c52a3bed6755a9de86e7cc31" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status. This allows simultaneous capture of the output and exit status of a subcommand, e.g. &lt;code&gt;if set output (command)&lt;/code&gt;. In query mode, the exit status is the number of variables that were not found. In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if the variable was write-protected or if the variable did not exist.</source>
          <target state="translated">할당 모드에서 &lt;code&gt;set&lt;/code&gt; 은 종료 상태를 수정하지 않습니다. 예를 들어 &lt;code&gt;if set output (command)&lt;/code&gt; 과 같은 하위 명령의 출력 및 종료 상태를 동시에 캡처 할 수 있습니다 . 쿼리 모드에서 종료 상태는 찾을 수없는 변수의 수입니다. 삭제 모드에서 &lt;code&gt;set&lt;/code&gt; 변수가 존재하지 않은 경우 변수가 쓰기 금지했다 경우 또는 0이 아닌 종료 상태 성공의 경우 제로 (0) 종료 상태로 종료는 명령 줄은 유효합니다.</target>
        </trans-unit>
        <trans-unit id="997bbb76e726398decafa893aef44209d89a5923" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In &lt;code&gt;fish&lt;/code&gt;, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="translated">bash에서 이것은 &quot;Mister&quot;와 &quot;Noodle&quot;이라는 두 디렉토리를 만들었을 것이다. 에서 &lt;code&gt;fish&lt;/code&gt; , 그것은 단지 하나 만들어 : 그에게 전달 된 인수 그래서 변수가 값 &quot;미스터 국수&quot;를했다 &lt;code&gt;mkdir&lt;/code&gt; , 공간과 모든. 다른 쉘은 목록이 아닌 &quot;배열&quot;이라는 용어를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e4489109b985bf2bfd34ae1b60049239f2bd9ed4" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In fish, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febdce18a02406c3f663a8114d7d2b52f9d2f956" translate="yes" xml:space="preserve">
          <source>In cases such as this, one can use &lt;code&gt;command&lt;/code&gt;&lt;code&gt;test&lt;/code&gt; to explicitly use the system's standalone &lt;code&gt;test&lt;/code&gt; rather than this &lt;code&gt;builtin&lt;/code&gt;&lt;code&gt;test&lt;/code&gt;.</source>
          <target state="translated">이와 같은 경우, &lt;code&gt;builtin&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; 대신 시스템의 독립형 &lt;code&gt;test&lt;/code&gt; 를 명시 적으로 사용하기 위해 &lt;code&gt;command&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d1ce47c387bac9b4cac7573029867c2d32e1cdf6" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;'s &lt;code&gt;match&lt;/code&gt; defaults to glob-mode, while &lt;code&gt;replace&lt;/code&gt; defaults to literal matching. If set to regex-mode, they use PCRE regular expressions, which is comparable to &lt;code&gt;grep&lt;/code&gt;'s &lt;code&gt;-P&lt;/code&gt; option. &lt;code&gt;match&lt;/code&gt; defaults to printing just the match, which is like &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; (use &lt;code&gt;--entire&lt;/code&gt; to enable grep-like behavior).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f2d284a1e65e7867199a2469dd5dff1c9b6cd8" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;s &lt;code&gt;match&lt;/code&gt; defaults to glob-mode, while &lt;code&gt;replace&lt;/code&gt; defaults to literal matching. If set to regex-mode, they use PCRE regular expressions, which is comparable to &lt;code&gt;grep&lt;/code&gt;s &lt;code&gt;-P&lt;/code&gt; option. &lt;code&gt;match&lt;/code&gt; defaults to printing just the match, which is like &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; (use &lt;code&gt;--entire&lt;/code&gt; to enable grep-like behavior).</source>
          <target state="translated">In contrast to &lt;code&gt;grep&lt;/code&gt; , &lt;code&gt;string&lt;/code&gt; s &lt;code&gt;match&lt;/code&gt; defaults to glob-mode, while &lt;code&gt;replace&lt;/code&gt; defaults to literal matching. If set to regex-mode, they use PCRE regular expressions, which is comparable to &lt;code&gt;grep&lt;/code&gt; s &lt;code&gt;-P&lt;/code&gt; option. &lt;code&gt;match&lt;/code&gt; defaults to printing just the match, which is like &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; (use &lt;code&gt;--entire&lt;/code&gt; to enable grep-like behavior).</target>
        </trans-unit>
        <trans-unit id="50308010771463782c1b1049f298eeb910eb8cb2" translate="yes" xml:space="preserve">
          <source>In contrast to these classics, &lt;code&gt;string&lt;/code&gt; reads input either from stdin or as arguments. &lt;code&gt;string&lt;/code&gt; also does not deal with files, so it requires redirections to be used with them.</source>
          <target state="translated">In contrast to these classics, &lt;code&gt;string&lt;/code&gt; reads input either from stdin or as arguments. &lt;code&gt;string&lt;/code&gt; also does not deal with files, so it requires redirections to be used with them.</target>
        </trans-unit>
        <trans-unit id="9ded371170cef1c5c72e22d233a501a909e3ec3b" translate="yes" xml:space="preserve">
          <source>In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if any of the variables did not exist or was a &lt;a href=&quot;../index#variables-special&quot;&gt;special read-only variable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8150d5ade4961a7346cfe9d6f7af40451a0e9eba" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the array variable will be erased.</source>
          <target state="translated">소거 모드에서 변수 인덱스가 지정되면 지정된 배열 변수 슬라이스 만 지워집니다.</target>
        </trans-unit>
        <trans-unit id="ea9ced13df63c29343d5b0a4c89e208d759dd99a" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the list variable will be erased.</source>
          <target state="translated">In erase mode, if variable indices are specified, only the specified slices of the list variable will be erased.</target>
        </trans-unit>
        <trans-unit id="d285383bee7174093582f84311886d8e77b2597e" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0 the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">2.3.0 이전의 피쉬 버전에서 &lt;code&gt;$argv&lt;/code&gt; 변수는 인수가 없으면 단일 요소 (소스 파일의 이름)를 갖습니다. 그렇지 않으면 소스 파일 이름이없는 인수가 포함됩니다. 이 동작은 매우 혼란스럽고 bash 및 zsh와 같은 다른 쉘과는 다릅니다.</target>
        </trans-unit>
        <trans-unit id="9b6a0ae9d083c309f889a5d39f65825be86a357a" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0, the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise, it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">In fish versions prior to 2.3.0, the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise, it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</target>
        </trans-unit>
        <trans-unit id="b6167c9c2e21f8c5d664cda565772acda6aa5a44" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.5.0 it was possible to create a function named &lt;code&gt;-&lt;/code&gt; that would do &lt;code&gt;cd -&lt;/code&gt;. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:</source>
          <target state="translated">2.5.0 이전의 어류 버전에서 &lt;code&gt;cd -&lt;/code&gt; 수행하는 &lt;code&gt;-&lt;/code&gt; 라는 함수를 작성할 수있었습니다 . 2.5.0 릴리스의 변경 사항에는 베어 하이픈이 유효한 함수 (또는 변수) 이름이 아닌 규칙을 시행하는 몇 가지 버그 수정이 포함되었습니다. 그러나 약어를 통해 동일한 효과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c82580c4fc0344cd7e4b4c3bbc7ac9db12a80d91" translate="yes" xml:space="preserve">
          <source>In functions, &lt;code&gt;block&lt;/code&gt; can be useful while performing work that should not be interrupted by the shell.</source>
          <target state="translated">함수에서 &lt;code&gt;block&lt;/code&gt; 은 쉘에 의해 중단되지 않아야하는 작업을 수행하는 동안 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38b2f2e802b2d8e2671843b97b7871d835bce820" translate="yes" xml:space="preserve">
          <source>In general, fish's history recall works like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ff03b555073b2736f671e958968657fb6eb4ed" translate="yes" xml:space="preserve">
          <source>In general, special characters are special by default, so &lt;code&gt;a+&lt;/code&gt; matches one or more &quot;a&quot;s, while &lt;code&gt;a\+&lt;/code&gt; matches an &quot;a&quot; and then a &quot;+&quot;. &lt;code&gt;(a+)&lt;/code&gt; matches one or more &quot;a&quot;s in a capturing group (&lt;code&gt;(?:XXXX)&lt;/code&gt; denotes a non-capturing group). For the replacement parameter of &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;$n&lt;/code&gt; refers to the n-th group of the match. In the match parameter, &lt;code&gt;\n&lt;/code&gt; (e.g. &lt;code&gt;\1&lt;/code&gt;) refers back to groups.</source>
          <target state="translated">일반적으로 특수 문자는 기본적으로 특수하므로 &lt;code&gt;a+&lt;/code&gt; 는 하나 이상의 &quot;a&quot; 와 일치하고 &lt;code&gt;a\+&lt;/code&gt; 는 &quot;a&quot;와 &quot;+&quot;와 일치합니다. &lt;code&gt;(a+)&lt;/code&gt; 는 캡처 그룹에서 하나 이상의 &quot;a&quot;와 일치합니다 ( &lt;code&gt;(?:XXXX)&lt;/code&gt; 는 캡처하지 않은 그룹을 나타냅니다). &lt;code&gt;replace&lt;/code&gt; 의 교체 매개 변수 에서 &lt;code&gt;$n&lt;/code&gt; 은 일치하는 n 번째 그룹을 나타냅니다. 일치 매개 변수에서 &lt;code&gt;\n&lt;/code&gt; (예 : &lt;code&gt;\1&lt;/code&gt; )은 그룹을 다시 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b51eb76c3309ce93bf5e04af0029f4517c90bda0" translate="yes" xml:space="preserve">
          <source>In index brackets, fish understands ranges written like &lt;code&gt;a..b&lt;/code&gt; ('a' and 'b' being indices). They are expanded into a sequence of indices from a to b (so &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;), going up if b is larger and going down if a is larger. Negative indices can also be used - they are taken from the end of the list, so &lt;code&gt;-1&lt;/code&gt; is the last element, and &lt;code&gt;-2&lt;/code&gt; the one before it. If an index doesn't exist the range is clamped to the next possible index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f151afd8c58f05083781d29e38adf8acc285ad" translate="yes" xml:space="preserve">
          <source>In order to change your default shell, type:</source>
          <target state="translated">기본 쉘을 변경하려면 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="7744f887d10f15ca76ae2472bb145fdd5fdbdb57" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 10 MiB (1048576 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">쉘이 너무 많은 시스템 자원을 사용하지 않도록 보호하기 위해 &lt;code&gt;read&lt;/code&gt; 는 최대 10MiB (1048576 바이트) 만 소비합니다. 이 한계 이전에 종결자가 도달하지 않으면 VARIABLE은 비어 있으며 종료 상태는 122로 설정됩니다.이 한계는 &lt;code&gt;fish_read_limit&lt;/code&gt; 변수를 사용하여 변경할 수 있습니다 . 0으로 설정하면 한계가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="10c1bbb71199c4bba1fc0fbd3600f1a2a6187c25" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 100 MiB (104857600 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 100 MiB (104857600 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</target>
        </trans-unit>
        <trans-unit id="ccb466b6200e27a0e4799833112a3b42e6de23b3" translate="yes" xml:space="preserve">
          <source>In particular it will:</source>
          <target state="translated">특히 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1deffb90bad78ed3a67d8bbda9ff35ba53cfc814" translate="yes" xml:space="preserve">
          <source>In query mode, the exit status is the number of variables that were not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb4b17946050d9f509c4bdb763f770ebb06687a" translate="yes" xml:space="preserve">
          <source>In query mode, the scope to be examined can be specified.</source>
          <target state="translated">쿼리 모드에서 검사 할 범위를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aab78a9420c39e765e3c7ab37bc447943546b397" translate="yes" xml:space="preserve">
          <source>In short: &lt;a href=&quot;index#quotes&quot;&gt;quote&lt;/a&gt; or &lt;a href=&quot;index#escapes&quot;&gt;escape&lt;/a&gt; the wildcard:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d4f28841a1759ddcc1b8894ac4045a23593691" translate="yes" xml:space="preserve">
          <source>In the following code, all output is redirected to the file out.html.</source>
          <target state="translated">다음 코드에서 모든 출력은 out.html 파일로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="67bf59485bd852b33bf0045b83854687c5fd2923" translate="yes" xml:space="preserve">
          <source>In the following examples if a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="translated">다음 예제에서 인수를 구문 분석 할 때 플래그가 표시되지 않으면 해당 _flag_X var (s)가 설정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b18679bb485a969aa3729a892fbc342e477da1e5" translate="yes" xml:space="preserve">
          <source>In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.</source>
          <target state="translated">압도적 인 대다수의 경우 공간 분할은 바람직하지 않으므로 개선입니다.</target>
        </trans-unit>
        <trans-unit id="55c66e2c1e0fda8174837bafe85eb3fcb419d043" translate="yes" xml:space="preserve">
          <source>In the simplest case, this is just something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d4bef31048f07adb0a3c1f574c30c70992f0e5" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split &quot; &quot;&lt;/code&gt; like:</source>
          <target state="translated">이 경우 다음 과 같이 &lt;code&gt;string split &quot; &quot;&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="18fa635f435c584cd7b90aa2e82333c61c95545a" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split -n &quot; &quot;&lt;/code&gt; like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86e38a4028df2e1d281758cf65343b3a55357c4" translate="yes" xml:space="preserve">
          <source>In these cases, the expansion eliminates the string, as a result of the implicit &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt;.</source>
          <target state="translated">이러한 경우 확장은 암시 적 &lt;a href=&quot;#cartesian-product&quot;&gt;카티 전 곱&lt;/a&gt; 의 결과로 문자열을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="a96781a5a37dbe8375812a63f70f63e6201fe8ae" translate="yes" xml:space="preserve">
          <source>Incorrect use of output redirects</source>
          <target state="translated">출력 리디렉션의 잘못된 사용</target>
        </trans-unit>
        <trans-unit id="00039aeb76d249d44e4bf3ba01d88ffc368e8bd4" translate="yes" xml:space="preserve">
          <source>Index range expansion</source>
          <target state="translated">인덱스 범위 확장</target>
        </trans-unit>
        <trans-unit id="6fb7f6ce1f52c7d40f5bab615e431e3f8551d458" translate="yes" xml:space="preserve">
          <source>Initialization files</source>
          <target state="translated">초기화 파일</target>
        </trans-unit>
        <trans-unit id="5b8bc6fd5a49916cbd83500565c87c69583337ad" translate="yes" xml:space="preserve">
          <source>Inline variable assignments need to follow the &lt;code&gt;time&lt;/code&gt; keyword:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a06266a915eac92808f8af015840d61f777058b" translate="yes" xml:space="preserve">
          <source>Input/Output (IO) redirection</source>
          <target state="translated">입출력 (IO) 리디렉션</target>
        </trans-unit>
        <trans-unit id="d06fb6a26a0cdbfbe971938c779ba1d8847a636e" translate="yes" xml:space="preserve">
          <source>Input/Output Redirection</source>
          <target state="translated">입력 / 출력 리디렉션</target>
        </trans-unit>
        <trans-unit id="cc03501ba8e2728a6aa8f006cb5c7941d732153b" translate="yes" xml:space="preserve">
          <source>Insert mode</source>
          <target state="translated">삽입 모드</target>
        </trans-unit>
        <trans-unit id="f37697c91d983059a7f049680216d12bd20b587e" translate="yes" xml:space="preserve">
          <source>Inserts a space without expanding an &lt;a href=&quot;#abbreviations&quot;&gt;abbreviation&lt;/a&gt;. For vi-mode this only applies to insert-mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="56c7ddbfeb574a673d5b721d96a9d20284b9212a" translate="yes" xml:space="preserve">
          <source>Installation and Start</source>
          <target state="translated">설치 및 시작</target>
        </trans-unit>
        <trans-unit id="fb573a25e7d086275bc5c6e4ace954c5c0646937" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;&amp;lt;(command)&lt;/code&gt; fish uses &lt;code&gt;(command | psub)&lt;/code&gt;. There is no equivalent to &lt;code&gt;&amp;gt;(command)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae42c8f55618254e86eb5072d662a945a623a1b7" translate="yes" xml:space="preserve">
          <source>Instead of introducing specific escapes like &lt;code&gt;\h&lt;/code&gt; for the hostname, the prompt is simply a function, so you can use variables like &lt;code&gt;$hostname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccd152ce4747f5dc9ca0704a6680d2b21035b46" translate="yes" xml:space="preserve">
          <source>Integer flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0ea93fbb85b738df0bd31fcf1bc9eb5468d22b" translate="yes" xml:space="preserve">
          <source>Interactive use</source>
          <target state="translated">대화식 사용</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c62c2864f20a2be4aa0393bfb86357685145de0e" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;complete&lt;/code&gt; multiple times for the same command adds the new definitions on top of any existing completions defined for the command.</source>
          <target state="translated">동일한 명령에 대해 여러 번 &lt;code&gt;complete&lt;/code&gt; 호출하면 명령에 대해 정의 된 기존 완료 위에 새 정의가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="b79b686609fac01050f615aa2d90cce8c104548e" translate="yes" xml:space="preserve">
          <source>It also provides a large number of program specific scripted completions. Most of these completions are simple options like the &lt;code&gt;-l&lt;/code&gt; option for &lt;code&gt;ls&lt;/code&gt;, but some are more advanced. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60085e96c04073bb488214d0f08662dbfb4f6528" translate="yes" xml:space="preserve">
          <source>It calls out to VCS-specific functions. The currently supported systems are:</source>
          <target state="translated">VCS 특정 기능을 호출합니다. 현재 지원되는 시스템은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="203759edaf1b0804074e8480cb71a78345306aec" translate="yes" xml:space="preserve">
          <source>It can add bindings if given a SEQUENCE of characters to bind to. These should be written as &lt;a href=&quot;../index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. The most important of these are &lt;code&gt;\c&lt;/code&gt; for the control key, and &lt;code&gt;\e&lt;/code&gt; for escape, and because of historical reasons also the Alt key (sometimes also called &quot;Meta&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd08cedcb39096700407dcb2ed27cc0a4d9655b5" translate="yes" xml:space="preserve">
          <source>It can also be unexported with &lt;code&gt;--unexport&lt;/code&gt; or &lt;code&gt;-u&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--unexport&lt;/code&gt; 또는 &lt;code&gt;-u&lt;/code&gt; 를 사용 하여 내보내기 를 취소 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72de81959962a9a672242451c7ee1c544e10edd3" translate="yes" xml:space="preserve">
          <source>It can handle floating point numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbcc8a329c69e0ee07a4d0ad690183b6b281c37" translate="yes" xml:space="preserve">
          <source>It can print a message to tell you about it, and it often also checks for a missing package that would include the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55070aaf0fa7daad220e9d1da32a51d9a5c70260" translate="yes" xml:space="preserve">
          <source>It doesn't support any options, so there is no need for a &lt;code&gt;--&lt;/code&gt; separator, which makes it easier to use for arbitrary input than &lt;code&gt;echo&lt;/code&gt;. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907fa9ff594fcd3a11d91328fd423e6cb93e804d" translate="yes" xml:space="preserve">
          <source>It is (by default) safe to use &lt;code&gt;fish_add_path&lt;/code&gt; in config.fish, or it can be used once, interactively, and the paths will stay in future because of &lt;a href=&quot;../index#variables-universal&quot;&gt;universal variables&lt;/a&gt;. This is a &quot;do what I mean&quot; style command, if you need more control, consider modifying the variable yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c3b240dba13d15ae7f53c1a501f0c631e4c4fe" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like</source>
          <target state="translated">다음과 같은 것을 사용하여 모든 emacs 모드 바인딩을 vi 모드에 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec8325ed194e0bd115e6eac2314eb9c5b93bc6c7" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like:</source>
          <target state="translated">다음과 같은 것을 사용하여 모든 emacs-mode 바인딩을 vi-mode에 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="88b3a0222511e2204a83e1bd65b24a52023e46f7" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of a list:</source>
          <target state="translated">목록의 개별 요소를 설정하거나 지울 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ab84d80263900ba9d5b235b1f2ea80519e28b73" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of an array:</source>
          <target state="translated">배열의 개별 요소를 설정하거나 지울 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b76c3dec3cad4d06a40836a74a8d9d7e685bfe94" translate="yes" xml:space="preserve">
          <source>It is an error to redirect a builtin, function, or block to a file descriptor above 2. However this is supported for external commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d526954a8bce879648c1f8388f9dcd5c2cf78df" translate="yes" xml:space="preserve">
          <source>It is common to want to validate the the value provided for an option satisfies some criteria. For example, that it is a valid integer within a specific range. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">옵션에 제공된 값이 일부 기준을 만족시키는 지 확인하는 것이 일반적입니다. 예를 들어 특정 범위 내에서 유효한 정수입니다. &lt;code&gt;argparse&lt;/code&gt; 가 반환 된 후에는 항상이 작업을 수행 할 수 있지만 임의의 fish 스크립트를 실행하여 &lt;code&gt;argparse&lt;/code&gt; 가 유효성 검사를 수행하도록 요청할 수도 있습니다 . 그렇게하려면 간단히 &lt;code&gt;!&lt;/code&gt; (느낌표)를 입력 한 다음 fish 스크립트를 실행하십시오. 해당 코드가 실행될 때 세 가지 변수가 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="0d6750d924d7d23c326002d74cd58ced0561fd77" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;gettext fish STRING&lt;/code&gt;, meaning it can only be used to look up fish's own translations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc00ed6c087a163188d567eb4446d3e5458a9c89" translate="yes" xml:space="preserve">
          <source>It is possible the character is simply too new for your system to know - in this case you need to refrain from using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71bcd2264c669eb00c671521098fb03d224a747" translate="yes" xml:space="preserve">
          <source>It is possible to directly create functions and variables in &lt;code&gt;config.fish&lt;/code&gt; file, using the commands shown above. For example:</source>
          <target state="translated">위에 표시된 명령을 사용하여 &lt;code&gt;config.fish&lt;/code&gt; 파일 에서 함수 및 변수를 직접 작성할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c54df5298d2680170d64430ca4a68d0d26623f84" translate="yes" xml:space="preserve">
          <source>It is possible to pipe a different output file descriptor by prepending its FD number and the output redirect symbol to the pipe. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c56d7ebd2ae7a42fad58d3fe21565a95290624" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; 문 또는 &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; 문과 같은 조건부 블록 안에 추가되어 실행 기능을 조건부로 중지하고 호출자에게 반환하지만 함수의 종료 상태를 지정하는 데에도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f4a9521ff238cfd8c93799d8d5f98df72dc4a0c" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;if#cmd-if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;switch#cmd-switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;if#cmd-if&quot;&gt;if&lt;/a&gt; 문 또는 &lt;a href=&quot;switch#cmd-switch&quot;&gt;switch&lt;/a&gt; 문과 같은 조건 블록 내부에 추가되어 실행중인 함수를 조건부로 중지하고 호출자에게 반환하지만 함수의 종료 상태를 지정하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cefa92c853442bbe4dd3a6ef0bacadea8c59bfbd" translate="yes" xml:space="preserve">
          <source>It is very important that function definition files only contain the definition for the specified function and nothing else. Otherwise, it is possible that autoloading a function files requires that the function already be loaded, which creates a circular dependency.</source>
          <target state="translated">함수 정의 파일은 지정된 함수에 대한 정의 만 포함하고 다른 것은 포함하지 않는 것이 매우 중요합니다. 그렇지 않으면 함수 파일을 자동로드하려면 함수가 이미로드되어 순환 종속성이 작성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee7deea0a6c7d1bf1f12282d8e4f2d33d9fa574c" translate="yes" xml:space="preserve">
          <source>It knows about paths and options</source>
          <target state="translated">경로와 옵션에 대해 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="13749347248c90340a66276ab0e48e071806f943" translate="yes" xml:space="preserve">
          <source>It knows about paths and options:</source>
          <target state="translated">경로와 옵션에 대해 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="73489c53a191e7b18096896c25d0bf7ce0247f3c" translate="yes" xml:space="preserve">
          <source>It receives the full commandline as one argument per token, so $argv[1] contains the missing command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b075e830d4afccde933ee553ba07abf9675ce6" translate="yes" xml:space="preserve">
          <source>It requires fish to be built with gettext support. If that support is disabled, or there is no translation it will simply echo the argument back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78e633fc7cdcd0634a499148a621014d2eb87ba" translate="yes" xml:space="preserve">
          <source>It will also return non-zero if no argument at all was given, in which case it will print nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09881db18dec90e0ba8f4c151dbc729afee1f020" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;, because the &quot;a b c &quot; is used in one piece. But if you do</source>
          <target state="translated">&quot;abc&quot;가 한 조각으로 사용되기 때문에 &lt;code&gt;xa b c x&lt;/code&gt; 를 인쇄 합니다. 하지만 만약 당신이</target>
        </trans-unit>
        <trans-unit id="f51b747a62fc1665fa16726f0cc05a908bd9ced6" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;. But if you do</source>
          <target state="translated">&lt;code&gt;xa b c x&lt;/code&gt; 를 인쇄 합니다. 그러나 만약 당신이</target>
        </trans-unit>
        <trans-unit id="784cf5b2d3ebe2dbad48daf3fd3356b85327650b" translate="yes" xml:space="preserve">
          <source>Iterating over a list of numbers can be done with &lt;code&gt;seq&lt;/code&gt;:</source>
          <target state="translated">숫자 목록을 반복하는 것은 &lt;code&gt;seq&lt;/code&gt; 로 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="1c2654e77c8a1d66520f0e811b49f2ee16ec66ef" translate="yes" xml:space="preserve">
          <source>Job control</source>
          <target state="translated">직무 관리</target>
        </trans-unit>
        <trans-unit id="090e4272d6cb5283367e3c64d3f84a1ce2fa8aee" translate="yes" xml:space="preserve">
          <source>Jobs in the list of jobs are sent a hang-up signal when fish terminates, which usually causes the job to terminate; &lt;code&gt;disown&lt;/code&gt; allows these processes to continue regardless.</source>
          <target state="translated">작업 목록에있는 작업은 물고기가 종료 될 때 끊기 신호를 보내므로 일반적으로 작업이 종료됩니다. &lt;code&gt;disown&lt;/code&gt; 은 이러한 프로세스가 관계없이 계속 진행되도록합니다.</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="544b65b506a2ffb69625eb6e4d7541dde083f7c6" translate="yes" xml:space="preserve">
          <source>Keep in mind that a defined variabled could also be empty, either by having no elements (if set like &lt;code&gt;set var&lt;/code&gt;) or only empty elements (if set like &lt;code&gt;set var &quot;&quot;&lt;/code&gt;). Read on for how to deal with those.</source>
          <target state="translated">정의 된 변수는 요소가 없거나 ( &lt;code&gt;set var&lt;/code&gt; 과 같이 설정된 경우 ) 빈 요소 만 ( &lt;code&gt;set var &quot;&quot;&lt;/code&gt; 과 같이 설정된 경우) 비어있을 수도 있습니다 . 그것들을 다루는 방법에 대해서는 계속 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="67c2ddd8aa7fac8b85b7d1410e5632ad6336f06c" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion happens before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (&lt;code&gt;()&lt;/code&gt;) and the asterisk (&lt;code&gt;*&lt;/code&gt;) glob character have to be escaped or quoted. &lt;code&gt;x&lt;/code&gt; can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32881a56b33d045dddcff4e97bad3c9a0cec51b4" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (&lt;code&gt;()&lt;/code&gt;) and the asterisk (&lt;code&gt;*&lt;/code&gt;) glob character have to be escaped or quoted. &lt;code&gt;x&lt;/code&gt; can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.</source>
          <target state="translated">매개 변수 확장은 표현식이 평가되기 전에 걸립니다. 이것은 쉘 변수 또는 명령 대체 출력과 관련된 계산을 수행하는 데 매우 유용 할 수 있지만 괄호 ( &lt;code&gt;()&lt;/code&gt; ) 및 별표 ( &lt;code&gt;*&lt;/code&gt; ) 글롭 문자를 이스케이프하거나 따옴표로 묶어야 함을 의미합니다. &lt;code&gt;x&lt;/code&gt; 는 곱셈을 나타내는 데 사용할 수도 있지만 16 진수와 구별하기 위해 뒤에 공백이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="946c99cee0972cba5b6dec7f34cb20b94d3a2715" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis and the asterisk glob character have to be escaped or quoted.</source>
          <target state="translated">표현식을 평가하기 전에 매개 변수 확장이 필요하다는 점에 유의하십시오. 이것은 쉘 변수 또는 명령 대체의 출력과 관련된 계산을 수행하는 데 매우 유용 할 수 있지만 괄호와 별표 글로브 문자를 이스케이프하거나 인용해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="573891be377321acc4815f0519173b9b072d48fa" translate="yes" xml:space="preserve">
          <source>Key bindings may use &quot;modes&quot;, which mimics Vi's modal input behavior. The default mode is &quot;default&quot;, and every bind applies to a single mode. The mode can be viewed/changed with the &lt;code&gt;$fish_bind_mode&lt;/code&gt; variable.</source>
          <target state="translated">키 바인딩은 Vi의 모달 입력 동작을 모방 한 &quot;모드&quot;를 사용할 수 있습니다. 기본 모드는 &quot;default&quot;이며 모든 바인드는 단일 모드에 적용됩니다. &lt;code&gt;$fish_bind_mode&lt;/code&gt; 변수를 사용하여 모드를 보거나 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="07749d64f555cfedf3e2d5d1184ead2daee433fc" translate="yes" xml:space="preserve">
          <source>Launch &lt;code&gt;git diff&lt;/code&gt; and repaint the commandline afterwards when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b562f1a6d0c5684ca96b09426bc1669506a7f803" translate="yes" xml:space="preserve">
          <source>Learning fish</source>
          <target state="translated">학습 물고기</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="b5cf98d60edf53bb04a75b49fe8d89b334867632" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License, version 2.</source>
          <target state="translated">GNU General Public License, 버전 2에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="0c817d22761932bbede7666d8ef3e49c8a0db6e6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sed&lt;/code&gt;'s &lt;code&gt;s/old/new/&lt;/code&gt; command, &lt;code&gt;string replace&lt;/code&gt; still prints strings that don't match. &lt;code&gt;sed&lt;/code&gt;'s &lt;code&gt;-n&lt;/code&gt; in combination with a &lt;code&gt;/p&lt;/code&gt; modifier or command is like &lt;code&gt;string replace -f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93725e0a0f010017ca3b484abe1192273219e4e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;s/&lt;/code&gt; command, &lt;code&gt;string replace&lt;/code&gt; still prints strings that don't match. &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;-n&lt;/code&gt; in combination with a &lt;code&gt;/p&lt;/code&gt; modifier or command is like &lt;code&gt;string replace -f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sed&lt;/code&gt; s &lt;code&gt;s/&lt;/code&gt; 명령 과 마찬가지로 &lt;code&gt;string replace&lt;/code&gt; 는 여전히 일치하지 않는 문자열을 인쇄합니다. &lt;code&gt;sed&lt;/code&gt; s &lt;code&gt;-n&lt;/code&gt; 을 &lt;code&gt;/p&lt;/code&gt; 수정 자 또는 명령 과 함께 사용하면 &lt;code&gt;string replace -f&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f1d7dce52159e33fc313d29a4609b6f0ca14c0f7" translate="yes" xml:space="preserve">
          <source>Like most programming language, fish also has the familiar &lt;a href=&quot;cmds/while#cmd-while&quot;&gt;while&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt; loops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f063dbdbbc3586964fed3651ab53c12631bbacd5" translate="yes" xml:space="preserve">
          <source>Like other shells, a dollar sign performs variable substitution:</source>
          <target state="translated">다른 쉘과 마찬가지로 달러 기호는 변수 대체를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="1c10e83fba90f8ed8fbb793d35b29d018d6a8897" translate="yes" xml:space="preserve">
          <source>Like other shells, fish allows multiple commands either on separate lines or the same line.</source>
          <target state="translated">다른 쉘과 마찬가지로 피쉬는 별도의 줄이나 같은 줄에 여러 명령을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="c894b65fadc7501ee13e70fa65a7de836d05e57a" translate="yes" xml:space="preserve">
          <source>Like other shells, the Up arrow,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="a51da1d245e2b299170419f02a7283c1cf86ec93" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as &lt;a href=&quot;index#cartesian-product&quot;&gt;cartesian products&lt;/a&gt; unless quoted (see &lt;a href=&quot;index#expand-variable&quot;&gt;Variable expansion&lt;/a&gt;):</source>
          <target state="translated">다른 목록이나 문자열에 인접한 목록은 인용하지 않는 한 &lt;a href=&quot;index#cartesian-product&quot;&gt;데카르트 곱&lt;/a&gt; 으로 확장됩니다 ( &lt;a href=&quot;index#expand-variable&quot;&gt;변수 확장&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e550372c446deb80cb7097a6530c7895ce489c98" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as cartesian products:</source>
          <target state="translated">다른 목록이나 문자열에 인접한 목록은 데카르트 제품으로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="4d148bf1eeeabc2918d896ed4801527981164657" translate="yes" xml:space="preserve">
          <source>Lists can be inspected with the &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; or the &lt;a href=&quot;cmds/contains#cmd-contains&quot;&gt;contains&lt;/a&gt; commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d036c0ec2ab378b452b8d2cead3a3ffcc191575a" translate="yes" xml:space="preserve">
          <source>Lists cannot contain other lists: there is no recursion. A variable is a list of strings, full stop.</source>
          <target state="translated">리스트는 다른리스트를 포함 할 수 없습니다 : 재귀는 없습니다. 변수는 문자열 목록, 완전 정지입니다.</target>
        </trans-unit>
        <trans-unit id="1a9f2a13711da14fca66fcdde04b63c088d5386d" translate="yes" xml:space="preserve">
          <source>Local variables are specific to the current fish session, and associated with a specific block of commands, and automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5bfe87f1fde5105869e708324f805855fff5fa" translate="yes" xml:space="preserve">
          <source>Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">로컬 변수는 현재 물고기 세션에 고유하며 특정 명령 블록과 연관되며 특정 블록이 범위를 벗어나면 자동으로 지워집니다. 명령 블록은 하나의 명령으로 시작하는 일련의 명령이다 &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;function&lt;/code&gt; , &lt;code&gt;begin&lt;/code&gt; 또는 &lt;code&gt;switch&lt;/code&gt; , 및 명령과 말단 &lt;code&gt;end&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8172703ebdf7bfc5b44da606bf9f833637212ffc" translate="yes" xml:space="preserve">
          <source>Locale variables</source>
          <target state="translated">로케일 변수</target>
        </trans-unit>
        <trans-unit id="02720f9d38bf4f35e84ed5228689898bee176418" translate="yes" xml:space="preserve">
          <source>Loops</source>
          <target state="translated">Loops</target>
        </trans-unit>
        <trans-unit id="4f6fd280f95526cf9605e281ba55d1b9e4e755e0" translate="yes" xml:space="preserve">
          <source>Loops and blocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="daa46eacc82eda91d82b231750f9ce0c28ce8e77" translate="yes" xml:space="preserve">
          <source>Many characters + control are indistinguishable from other keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f695dcfd95e469044fda4ad8dda41439800142" translate="yes" xml:space="preserve">
          <source>Many other shells have a large library of builtin commands. Most of these commands are also available as standalone commands, but have been implemented in the shell anyway. To avoid code duplication, and to avoid the confusion of subtly differing versions of the same command, &lt;code&gt;fish&lt;/code&gt; generally only implements builtins for actions which cannot be performed by a regular command.</source>
          <target state="translated">다른 많은 쉘에는 큰 내장 명령 라이브러리가 있습니다. 이러한 명령의 대부분은 독립형 명령으로도 사용할 수 있지만 어쨌든 셸에서 구현되었습니다. 코드 중복을 피하고 동일한 명령의 미묘하게 다른 버전의 혼동을 피하기 위해 &lt;code&gt;fish&lt;/code&gt; 일반적으로 일반 명령으로는 수행 할 수없는 동작에 대해 내장 기능 만 구현합니다.</target>
        </trans-unit>
        <trans-unit id="508666f7961e41b7a23a46d49b1c68da21e0ab6e" translate="yes" xml:space="preserve">
          <source>Many terminals support 24-bit (i.e., true-color) color escape sequences. This includes modern xterm, Gnome Terminal, Konsole, and iTerm2. Fish attempts to detect such terminals through various means in &lt;code&gt;config.fish&lt;/code&gt; You can explicitly force that support via &lt;code&gt;set fish_term24bit 1&lt;/code&gt;.</source>
          <target state="translated">많은 터미널이 24 비트 (즉, 트루 컬러) 색상 이스케이프 시퀀스를 지원합니다. 여기에는 최신 xterm, Gnome Terminal, Konsole 및 iTerm2가 포함됩니다. 물고기는 &lt;code&gt;config.fish&lt;/code&gt; 의 다양한 수단을 통해 이러한 터미널을 감지하려고 시도합니다 . &lt;code&gt;set fish_term24bit 1&lt;/code&gt; 을 통해 명시 적으로 해당 지원을 강제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e069a87ea72df19d398bb86736ac50bde7ce37cb" translate="yes" xml:space="preserve">
          <source>Many things are similar - they both fundamentally expand commandlines to execute commands, have pipes, redirections, variables, globs, use command output in various ways. This document is there to quickly show you the differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9b4890d50f0c6b762d298b81c92845215e8616" translate="yes" xml:space="preserve">
          <source>Match Glob Examples</source>
          <target state="translated">일치하는 세계 예</target>
        </trans-unit>
        <trans-unit id="5d635a6434318430e0640768784677cf44ef96c2" translate="yes" xml:space="preserve">
          <source>Match Regex Examples</source>
          <target state="translated">정규 표현식 예 일치</target>
        </trans-unit>
        <trans-unit id="282c4c424c8c8f802f09ed9069046a66c3e0e2df" translate="yes" xml:space="preserve">
          <source>Matching can be made case-insensitive with &lt;code&gt;--ignore-case&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--ignore-case&lt;/code&gt; 또는 &lt;code&gt;-i&lt;/code&gt; 로 대소 문자를 구분하지 않고 일치시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="dfe39636b572a032956990221bea7522894ca013" translate="yes" xml:space="preserve">
          <source>Mismatched parenthesis</source>
          <target state="translated">일치하지 않는 괄호</target>
        </trans-unit>
        <trans-unit id="08965269be31a1f77226663d4b16152886fa2985" translate="yes" xml:space="preserve">
          <source>More examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d99cf687fc07cadeb9c71efe74a35ddac5120de" translate="yes" xml:space="preserve">
          <source>More on universal variables</source>
          <target state="translated">범용 변수에 대한 추가 정보</target>
        </trans-unit>
        <trans-unit id="021eea9c0dd8f610dc9e4cc089ecb63b53b1ea84" translate="yes" xml:space="preserve">
          <source>Most operations &lt;code&gt;string&lt;/code&gt; supports can also be done by external tools. Some of these include &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;cut&lt;/code&gt;.</source>
          <target state="translated">대부분의 작업 &lt;code&gt;string&lt;/code&gt; 지원은 외부 도구로도 수행 할 수 있습니다. 이들 중 일부에는 &lt;code&gt;grep&lt;/code&gt; , &lt;code&gt;sed&lt;/code&gt; 및 &lt;code&gt;cut&lt;/code&gt; 이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="58541b1a51075d09123179aa5f9cebf36d81b9ff" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing</source>
          <target state="translated">대부분의 프로그램은 당신에게 프로그램의 실행 및 반환 제어 정지 할 수 있도록 &lt;code&gt;fish&lt;/code&gt; 눌러</target>
        </trans-unit>
        <trans-unit id="a6722727e636d961891415cd8a8813e266709c00" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt; (also referred to as &lt;code&gt;^Z&lt;/code&gt;). Once back at the &lt;code&gt;fish&lt;/code&gt; commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; (foreground) command.</source>
          <target state="translated">대부분의 프로그램에서는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt; ( &lt;code&gt;^Z&lt;/code&gt; 라고도 함)를 눌러 프로그램 실행을 일시 중단하고 &lt;code&gt;fish&lt;/code&gt; 로 제어를 되돌릴 수 있습니다. &lt;code&gt;fish&lt;/code&gt; 명령 줄로 돌아 오면 다른 프로그램을 시작하고 원하는 작업을 수행 할 수 있습니다. 원하는 경우 &lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt; (전경) 명령 을 사용하여 일시 중단 된 명령으로 돌아갈 수 있습니다 .&lt;em&gt;&lt;/em&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="42e39dcb42dd9f2c013945b7875260844de45299" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to fish by pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20a7603daf5506e0104fd220a18c38ad250d45c" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (I/O) streams:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36a3163fcb5b2ce91e7e62b6620c694486a5106" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (IO) streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">대부분의 프로그램은 3 개의 입 / 출력 (IO) 스트림을 사용하며 각 스트림은 파일 디스크립터 (FD)라는 숫자로 표시됩니다. 이것들은:</target>
        </trans-unit>
        <trans-unit id="c20818da60d954d40a5d602d6db10493b1f04e88" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">대부분의 프로그램은 3 개의 입력 / 출력 &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; 스트림을 사용하며, 각 스트림은 파일 설명자 (FD)라고하는 숫자로 표시됩니다. 이것들은:</target>
        </trans-unit>
        <trans-unit id="fbfe945f56b2d1285935393b0ba01a8e6e9fb533" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status.</source>
          <target state="translated">대부분의 부속 명령은 &lt;code&gt;-q&lt;/code&gt; 또는 &lt;code&gt;--quiet&lt;/code&gt; 스위치를 사용하여 일반적인 출력을 억제하지만 문서화 된 상태로 종료합니다.</target>
        </trans-unit>
        <trans-unit id="03976ab7d33a85c8fc9480afc29d1387785551a9" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status. In this case these commands will quit early, without reading all of the available input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4b95e5fe05cdb2e32c0be4dc38dcb8444a090a" translate="yes" xml:space="preserve">
          <source>Multiline editing</source>
          <target state="translated">여러 줄 편집</target>
        </trans-unit>
        <trans-unit id="63062e2bb329a1db1e4dac2e1dda44f0bf889fa3" translate="yes" xml:space="preserve">
          <source>Multiple command switches and wrapped commands can also be given to define multiple completions in one call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da78228f66f1d5dda641de8fdf0ef902754c494" translate="yes" xml:space="preserve">
          <source>Multiple commands and paths can be given in one call to define the same completions for multiple commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afac76fbf7acd07151be5bf2f1d66efbab839d8c" translate="yes" xml:space="preserve">
          <source>Multiple elements can be given in a &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#expand-brace&quot;&gt;중괄호 확장&lt;/a&gt; 에 여러 요소를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e562a20b062b14bf4f914e63d6a366748810ee2" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284d6c5f151a78ee571b877c91d2822cf913407f" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;code&gt;set_color&lt;/code&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="translated">여러 줄이 정상입니다. &lt;code&gt;set_color&lt;/code&gt; 를 통해 색상을 ANSI 색상 또는 16 진 RGB 값으로 전달 하여 색상을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b9313e4afc7e7087f2691f5390743aa11cb2045a" translate="yes" xml:space="preserve">
          <source>Multiple lines are not supported in &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; 에서 여러 줄이 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="533228885e107d3eaa86bae132326686a81acd20" translate="yes" xml:space="preserve">
          <source>Multiple ranges are also possible, separated with a space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddaeb8bc8e45a0d0bc521306478830db49c61a1" translate="yes" xml:space="preserve">
          <source>My command (pkg-config) gives its output as a single long string?</source>
          <target state="translated">내 명령 (pkg-config)은 출력을 하나의 긴 문자열로 제공합니까?</target>
        </trans-unit>
        <trans-unit id="ea4625148060290559b503a843a926f0635335a1" translate="yes" xml:space="preserve">
          <source>My command prints &quot;No matches for wildcard&quot; but works in bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="f9c6fa94b0cdb85c962b8db6aabb5f0166f8183a" translate="yes" xml:space="preserve">
          <source>NUL Delimited Examples</source>
          <target state="translated">NUL 구분 예</target>
        </trans-unit>
        <trans-unit id="462063d7fb620e3775d8d6aee72a22d131be5da2" translate="yes" xml:space="preserve">
          <source>Navigate directories using the &lt;a href=&quot;../index#directory-history&quot;&gt;directory history&lt;/a&gt; or the &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877b0ac88e7cbb97cba9ff5c5c5c305c451eb822" translate="yes" xml:space="preserve">
          <source>Navigating directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcd7736113c6b4efdb7226bbeffaacd2a34dab2" translate="yes" xml:space="preserve">
          <source>Next, do the following (assuming fish was installed to /usr/local):</source>
          <target state="translated">다음으로 다음을 수행하십시오 (물고기가 / usr / local에 설치되었다고 가정).</target>
        </trans-unit>
        <trans-unit id="e1c89d68ecad2be53a8cf7ccdf90c12f59e35a10" translate="yes" xml:space="preserve">
          <source>Non existing commands.</source>
          <target state="translated">기존 명령이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="ef71956d237455d6edd36051eb69b5df7d7daaf5" translate="yes" xml:space="preserve">
          <source>Non-monospace fonts - there is &lt;em&gt;no way&lt;/em&gt; for fish to figure out what width a specific character has as it has no influence on the terminal's font rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f3e65e8538fb0ceb8d456aa90c5d4ef9931a07" translate="yes" xml:space="preserve">
          <source>Normally when &lt;code&gt;fish&lt;/code&gt; starts a program, this program will be put in the foreground, meaning it will take control of the terminal and &lt;code&gt;fish&lt;/code&gt; will be stopped until the program finishes. Sometimes this is not desirable. For example, you may wish to start an application with a graphical user interface from the terminal, and then be able to continue using the shell. In such cases, there are several ways in which the user can change fish's behavior.</source>
          <target state="translated">일반적으로 &lt;code&gt;fish&lt;/code&gt; 가 프로그램을 시작할 때이 프로그램은 포 그라운드에 배치됩니다. 즉, 터미널을 제어 하고 프로그램이 끝날 때까지 &lt;code&gt;fish&lt;/code&gt; 가 중지됩니다. 때때로 이것은 바람직하지 않습니다. 예를 들어, 터미널에서 그래픽 사용자 인터페이스로 응용 프로그램을 시작한 다음 셸을 계속 사용할 수 있습니다. 이 경우 사용자가 물고기의 행동을 바꿀 수있는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="725343c5d9934b2dc59d44a6bd5ed0c4b217734a" translate="yes" xml:space="preserve">
          <source>Note that &quot;exported&quot; is not a &lt;a href=&quot;index#variables-scope&quot;&gt;scope&lt;/a&gt;, but an additional bit of state. A variable can be global and exported or local and exported or even universal and exported. Typically it makes sense to make an exported variable global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c863f5345c5efef0b87a4ab35f2576e2a2fce7" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;cmds/case#cmd-case&quot;&gt;case&lt;/a&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c5c1ef76ceaf50dd2d8b6a05425f76eaec2b83" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;case&lt;/code&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="translated">주의 &lt;code&gt;case&lt;/code&gt; 를 통해 해당하지 않으며, 여러 인수 또는 (인용) 와일드 카드를 받아 들일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94e6c8486c051199cf983de0b2724a88564f11b3" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; is sourced &lt;code&gt;after&lt;/code&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade5bb175b9c01fc56dcd04dfd8820b5d87cfdc6" translate="yes" xml:space="preserve">
          <source>Note that all colors can also have a corresponding &lt;code&gt;_done&lt;/code&gt; color. For example, the contents of &lt;code&gt;$__fish_git_prompt_color_upstream_done&lt;/code&gt; is printed right _after_ the upstream.</source>
          <target state="translated">모든 색상은 해당 &lt;code&gt;_done&lt;/code&gt; 색상을 가질 수도 있습니다 . 예를 들어 &lt;code&gt;$__fish_git_prompt_color_upstream_done&lt;/code&gt; 의 내용은 업스트림 _after_ 오른쪽에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="daafcf66550c6e75c5e67349c16e61c50e7a4d2f" translate="yes" xml:space="preserve">
          <source>Note that array indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">배열 인덱스 는 다른 언어에서보다 일반적으로 0이 아닌 &lt;code&gt;fish&lt;/code&gt; 에서 1부터 시작 합니다. &lt;code&gt;seq&lt;/code&gt; 와 같은 많은 일반적인 유닉스 도구 가 이러한 용도에 더 적합하기 때문입니다. 유효하지 않은 색인은 자동으로 무시되어 값이 대체되지 않습니다 (빈 문자열이 아님).</target>
        </trans-unit>
        <trans-unit id="75e8dbe710958336c22801c9b7351ebb45c4f694" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;../index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">fish는 온 디맨드로 함수를로드하기 때문에 저장된 함수 는 실행되거나 소싱 될 때까지 &lt;a href=&quot;../index#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 로 작동하지 않습니다 . 모든 새 셸에 대한 이벤트 핸들러를 활성화하려면 &lt;code&gt;funcsave&lt;/code&gt; 를 사용하는 대신 &lt;a href=&quot;../index#initialization&quot;&gt;셸 초기화 파일에&lt;/a&gt; 함수를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="a0707e5e6cd48555094dd0ce06f95a929ab9ee48" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">생선은 주문형 기능을로드하기 때문에 저장된 기능은 달리 실행되거나 소싱 될 때까지 &lt;a href=&quot;index#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 로 작동하지 않습니다 . 모든 새 쉘에 대해 이벤트 핸들러를 활성화하려면 &lt;code&gt;funcsave&lt;/code&gt; 대신 &lt;a href=&quot;index#initialization&quot;&gt;쉘 초기화 파일에&lt;/a&gt; 함수를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="589ecfcb67f532f7a8f91c889d769fa9b8dc1363" translate="yes" xml:space="preserve">
          <source>Note that both of these are bashisms, and most things can easily be expressed without. E.g. instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05600b5a2c4216ed0373e93b0ae5b8dde601d3a" translate="yes" xml:space="preserve">
          <source>Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.</source>
          <target state="translated">case 문에서 명령 대체는 본문을 가져 가지 않더라도 평가됩니다. 값을 매개 변수와 비교하기 전에 명령 대체를 포함한 모든 대체를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="27acedfb629019bcb72c1aaa58829703ce6d6432" translate="yes" xml:space="preserve">
          <source>Note that conversion may fail, e.g. &quot;102.234&quot; will not losslessly convert to an integer, causing printf to print an error.</source>
          <target state="translated">변환이 실패 할 수 있습니다. 예를 들어 &quot;102.234&quot;는 손실없이 정수로 변환되지 않으므로 printf가 오류를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="8107914840367cc99db95db5e903f636fb93ac38" translate="yes" xml:space="preserve">
          <source>Note that events are only received from the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">한 물고기 프로세스에서 다른 물고기 프로세스로 이벤트를 보낼 수있는 방법이 없으므로 이벤트는 현재 물고기 프로세스에서만 수신됩니다.</target>
        </trans-unit>
        <trans-unit id="b604d17300bf8871e1df935d8ccab61e77f2c2e6" translate="yes" xml:space="preserve">
          <source>Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">한 물고기 프로세스에서 다른 물고기 프로세스로 이벤트를 보낼 수있는 방법이 없으므로 이벤트는 현재 물고기 프로세스로만 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="12b209e520b1b3c2d9d6735095ba293070697631" translate="yes" xml:space="preserve">
          <source>Note that exported variables can be local or global or universal - &quot;exported&quot; is not a &lt;a href=&quot;index#variables-scope&quot;&gt;scope&lt;/a&gt;. Usually you'd make them global via &lt;code&gt;set -gx MyVariable SomeValue&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1816c418ab7796b893d641bb9d4e996647340b50" translate="yes" xml:space="preserve">
          <source>Note that fish does not fall through on case statements. Only the first matching case is executed.</source>
          <target state="translated">사례 진술에 물고기는 쓰러지지 않습니다. 첫 번째 일치 사례 만 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="dea20fe7204b37a954eb8c5b71576a69b5e9c5a0" translate="yes" xml:space="preserve">
          <source>Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.</source>
          <target state="translated">fish에는 기본 제목 표시 줄 메시지가 있으며, fish_title 함수가 정의되지 않은 경우에 사용됩니다. 따라서 단순히 fish_title 함수를 설정 해제하면 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="216dd486d99355c7f2e848a5066c6390232ae830" translate="yes" xml:space="preserve">
          <source>Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than &lt;code&gt;history search&lt;/code&gt; you can type &lt;code&gt;history --search&lt;/code&gt;. Those long options are deprecated and will be removed in a future release.</source>
          <target state="translated">이전 버전과의 호환성을 위해 각 하위 명령을 긴 옵션으로 지정할 수도 있습니다. 예를 들어 &lt;code&gt;history search&lt;/code&gt; 대신 &lt;code&gt;history --search&lt;/code&gt; 를 입력 할 수 있습니다 . 이러한 긴 옵션은 더 이상 사용되지 않으며 향후 릴리스에서 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="3b22090df2d664d4741cb8fa8f02ce46c5b511d7" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;$status&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 4 exceptions, namely &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;, overriding variables in &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">대부분의 명령에서 와일드 카드가 확장되지 않으면 명령이 실행되지 않고 &lt;a href=&quot;#variables-status&quot;&gt;$ status&lt;/a&gt; 가 0이 아닌 값으로 설정되며 경고가 인쇄됩니다. 이 동작은 bash에서 &lt;code&gt;shopt -s failglob&lt;/code&gt; 설정과 일치합니다 . 정확히 4 개의 예외, 즉 &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; , &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt; , &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; 및 &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt; 에서 변수를 재정의 합니다 . 그들의 glob은 bash의 &lt;code&gt;shopt -s nullglob&lt;/code&gt; 과 마찬가지로 0 인수로 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c97f265eeb04a552b0a053d1fe6fd39164111e41" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;&lt;code&gt;$status&lt;/code&gt;&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 3 exceptions, namely &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">대부분의 명령에서 와일드 카드 확장에 실패하면 명령이 실행되지 않고 &lt;a href=&quot;#variables-status&quot;&gt; &lt;code&gt;$status&lt;/code&gt; &lt;/a&gt; 가 0이 아닌 값으로 설정되고 경고가 인쇄됩니다. 이 동작은 bash에서 &lt;code&gt;shopt -s failglob&lt;/code&gt; 설정과 일치합니다 . 정확히 세 가지 예외, 즉 &lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;commands#count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;commands#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; 가&lt;/a&gt; 있습니다. bash에서 &lt;code&gt;shopt -s nullglob&lt;/code&gt; 와 같이, globs는 0 개의 인수로 확장 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85d04e8ba3b775ebb67002c660a72287b64eba9e" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; command will not execute correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179b535385e9bcd6de7a6f886e309b106b43e8dd" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;code&gt;bg&lt;/code&gt; command will not execute correctly.</source>
          <target state="translated">백그라운드에서 기능을 시작할 수 없습니다. &lt;code&gt;bg&lt;/code&gt; 명령을 사용하여 백그라운드 에서 중지했다가 다시 시작된 기능은 올바르게 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0299abe7df714002513b6c5ca5f854adee2c02d" translate="yes" xml:space="preserve">
          <source>Note that list indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">목록 색인 은 다른 언어에서 더 일반적으로 사용되는 것처럼 0이 아닌 &lt;code&gt;fish&lt;/code&gt; 에서 1에서 시작 합니다. 이는 &lt;code&gt;seq&lt;/code&gt; 와 같은 많은 일반적인 Unix 도구 가 이러한 용도에 더 적합하기 때문입니다. 잘못된 인덱스는 자동으로 무시되어 값이 대체되지 않습니다 (빈 문자열이 아님).</target>
        </trans-unit>
        <trans-unit id="58e1ba9da269293437fe6233c6fcc925fb1049b3" translate="yes" xml:space="preserve">
          <source>Note that list indices start at 1 in fish, not 0 like in other languages. This is because it requires less subtracting of 1 and many common Unix tools like &lt;code&gt;seq&lt;/code&gt; work better with it (&lt;code&gt;seq 5&lt;/code&gt; prints 1 to 5, not 0 to 5). An invalid index is silently ignored resulting in no value (not even an empty string, just no argument at all).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56578f519a03e2785432ffc83f432b088789cd11" translate="yes" xml:space="preserve">
          <source>Note that most builtin commands display their help in the terminal when given the &lt;code&gt;--help&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--help&lt;/code&gt; 옵션이 주어지면 대부분의 내장 명령이 터미널에 도움말을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="052c493b4f8ae8b6935593bcf58c5ec984ab99f3" translate="yes" xml:space="preserve">
          <source>Note that not all these limits are available in all operating systems.</source>
          <target state="translated">모든 운영 체제에서 이러한 제한을 모두 사용할 수있는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="fd0759c196f448d14f3c2205ba14675a88db1daf" translate="yes" xml:space="preserve">
          <source>Note that parentheses will usually require escaping with &lt;code&gt;\(&lt;/code&gt; to avoid being interpreted as a command substitution.</source>
          <target state="translated">괄호는 일반적으로 명령 대체로 해석되지 않도록 &lt;code&gt;\(&lt;/code&gt; 이스케이프 처리를 요구합니다 .</target>
        </trans-unit>
        <trans-unit id="188395866987d29873c39e6fea9524d72368f195" translate="yes" xml:space="preserve">
          <source>Note that seeding the engine will NOT give the same result across different systems.</source>
          <target state="translated">엔진 시딩은 다른 시스템에서 동일한 결과를 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8cff03b2fdbde6fa37f1f5e156f040ecab266358" translate="yes" xml:space="preserve">
          <source>Note that some key combinations are indistinguishable or unbindable. For instance control-i &lt;em&gt;is the same&lt;/em&gt; as the tab key. This is a terminal limitation that fish can't do anything about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6845ef4744da1872b3bb15bf0a1af7f22c61de6" translate="yes" xml:space="preserve">
          <source>Note that special input functions cannot be combined with ordinary shell script commands. The commands must be entirely a sequence of special input functions (from &lt;code&gt;bind -f&lt;/code&gt;) or all shell script commands (i.e., valid fish script).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65cb077ea76993a41de3fb713b42e0fed91a42b" translate="yes" xml:space="preserve">
          <source>Note that symbolic masks currently do not work as intended.</source>
          <target state="translated">기호 마스크는 현재 의도 한대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c3e85ac16b77a7d86f7c2f0977d9686c607affe4" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;cd#cmd-cd&quot;&gt;cd&lt;/a&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef2f79c5ca0fefc2538b283ecde5e201f174c69" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates.</source>
          <target state="translated">참고 것을 &lt;code&gt;cd&lt;/code&gt; 명령은 25 가장 최근에 방문한 디렉토리에 대한 디렉토리 역사를 제한합니다. 히스토리는 이 명령이 조작 하는 &lt;code&gt;$dirprev&lt;/code&gt; 및 &lt;code&gt;$dirnext&lt;/code&gt; 변수에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="10a8eb5ef4bfcbb0fbb38b2c1dbc89e74a6c7106" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">참고 것을 &lt;code&gt;cd&lt;/code&gt; 명령은 25 가장 최근에 방문한 디렉토리에 대한 디렉토리 역사를 제한합니다. 히스토리는 이 명령이 조작 하는 &lt;code&gt;$dirprev&lt;/code&gt; 및 &lt;code&gt;$dirnext&lt;/code&gt; 변수에 저장됩니다 . 이러한 범용 변수를 만들면 모든 기록에서 &lt;code&gt;cd&lt;/code&gt; 기록이 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="9b4bda95d407194baa99d73ed10ab09fd4118640" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="translated">참고 것을 &lt;code&gt;cd&lt;/code&gt; 명령은 25 가장 최근에 방문한 디렉토리에 대한 디렉토리 역사를 제한합니다. 히스토리는 &lt;code&gt;$dirprev&lt;/code&gt; 및 &lt;code&gt;$dirnext&lt;/code&gt; 변수에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="468f475ce4540aa6d4ffc053e8efd0e42aba5839" translate="yes" xml:space="preserve">
          <source>Note that the shell will attempt to change directory without requiring &lt;code&gt;cd&lt;/code&gt; if the name of a directory is provided (starting with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, or ending with &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="translated">디렉토리 이름이 제공 되면 ( &lt;code&gt;.&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; 또는 &lt;code&gt;~&lt;/code&gt; 로 시작 하거나 &lt;code&gt;/&lt;/code&gt; 로 끝나는 경우) 쉘은 &lt;code&gt;cd&lt;/code&gt; 를 요구하지 않고 디렉토리를 변경하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="4a1ad39e7a025d924c676894892c33d43f516843" translate="yes" xml:space="preserve">
          <source>Note that there are three environment variables that are automatically split on colons to become lists when fish starts running: &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;. Conversely, they are joined on colons when exported to subcommands. All other environment variables (e.g., &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) which have similar semantics are treated as simple strings.</source>
          <target state="translated">물고기가 시작될 때 콜론에서 자동으로 분할되어 목록이되기위한 세 가지 환경 변수 ( &lt;code&gt;PATH&lt;/code&gt; , &lt;code&gt;CDPATH&lt;/code&gt; , &lt;code&gt;MANPATH&lt;/code&gt; )가 있습니다. 반대로 하위 명령으로 내보낼 때 콜론에서 결합됩니다. 의미가 비슷한 다른 모든 환경 변수 (예 : &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; )는 간단한 문자열로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="bf45589c3e3c3f4d264bc9f93c56158f4afde11c" translate="yes" xml:space="preserve">
          <source>Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).</source>
          <target state="translated">이 이름의 명령이있는 경우 (macOS 또는 Haiku의 경우)이 기능은 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bf381b343429f3c3b6b07cc6b6f0a80c7987163" translate="yes" xml:space="preserve">
          <source>Note that without the quotes or braces, fish will try to expand a variable called &lt;code&gt;$WORDs&lt;/code&gt;, which may not exist.</source>
          <target state="translated">따옴표 나 괄호가 없으면 fish는 존재하지 않을 수있는 &lt;code&gt;$WORDs&lt;/code&gt; 라는 변수를 확장하려고 시도 합니다.</target>
        </trans-unit>
        <trans-unit id="655206648d0dc7faa21d15bc23b20c851a2e5079" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced &lt;em&gt;after&lt;/em&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">~ /의 .config / 생선 / config.fish가 공급되는 주 &lt;em&gt;후&lt;/em&gt; 코드 조각. 사용자가 스 니펫을 복사하고 일부 동작을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce33996fd64092e1167cf6f8d31deb6827e1e03e" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced _after_ the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">~ / .config / fish / config.fish는 스 니펫 _after_ 소스입니다. 이는 사용자가 스 니펫을 복사하고 일부 동작을 재정의 할 수 있도록하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="e4d54cdd421c0c07715137d8eb13776063e53178" translate="yes" xml:space="preserve">
          <source>Note that, like &lt;code&gt;wc -l&lt;/code&gt;, reading from stdin counts newlines, so &lt;code&gt;echo -n foo | count&lt;/code&gt; will print 0.</source>
          <target state="translated">&lt;code&gt;wc -l&lt;/code&gt; 처럼 stdin에서 읽는 것은 개행을 계산하므로 &lt;code&gt;echo -n foo | count&lt;/code&gt; 는 0을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="e2ce3cf51c29175bd1e3054b41cb66e679925023" translate="yes" xml:space="preserve">
          <source>Note that, like GNU tools and most of fish's builtins, &lt;code&gt;contains&lt;/code&gt; interprets all arguments starting with a &lt;code&gt;-&lt;/code&gt; as options to contains, until it reaches an argument that is &lt;code&gt;--&lt;/code&gt; (two dashes). See the examples below.</source>
          <target state="translated">GNU 도구처럼, 그 주와 생선의 내장 매크로의 대부분은 &lt;code&gt;contains&lt;/code&gt; 모든 인수가 함께 시작하는 해석 &lt;code&gt;-&lt;/code&gt; 그것이 인수에 도달 할 때까지, 포함에 옵션으로를 &lt;code&gt;--&lt;/code&gt; (두 개의 대시를). 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6acc4ccc246684cfa1057fb20ffd8a8f35f63d65" translate="yes" xml:space="preserve">
          <source>Note that, unlike other shells, fish will first set the variable and then perform other expansions on the line, so:</source>
          <target state="translated">다른 셸과 달리 물고기는 먼저 변수를 설정 한 다음 줄에서 다른 확장을 수행하므로 다음과 같이됩니다.</target>
        </trans-unit>
        <trans-unit id="9cd1c04aa664d29ef9d4114fed80a20478f9f7c6" translate="yes" xml:space="preserve">
          <source>Note: At the moment the debug prompt is identical to your normal fish prompt. This can make it hard to recognize that you've entered a debug session. Issue 1310 is open to improve this.</source>
          <target state="translated">참고 : 현재 디버그 프롬프트는 일반 물고기 프롬프트와 동일합니다. 이로 인해 디버그 세션에 들어갔다는 것을 인식하기가 어려울 수 있습니다. 이를 개선하기 위해 이슈 1310이 공개되었습니다.</target>
        </trans-unit>
        <trans-unit id="7341a7c6e815f3797445d76ed55a3c56872a0b2b" translate="yes" xml:space="preserve">
          <source>Note: Exporting is not a &lt;a href=&quot;#variables-scope&quot;&gt;scope&lt;/a&gt;, but an additional state. It typically makes sense to make exported variables global as well, but local-exported variables can be useful if you need something more specific than &lt;a href=&quot;#variables-override&quot;&gt;Overrides&lt;/a&gt;. They are &lt;em&gt;copied&lt;/em&gt; to functions so the function can't alter them outside, and still available to commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8200dd2c18320e71ce4b78ddf09a868f7796fa5a" translate="yes" xml:space="preserve">
          <source>Note: Optional arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2acd9175970aa8fc3b9936ce32e6e5f5129257b5" translate="yes" xml:space="preserve">
          <source>Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.</source>
          <target state="translated">참고 :이 이벤트는 명령이 유효하지 않은 경우에도 생성됩니다. commandline 매개 변수는 전체 명령 행 그대로 포함되며 잠재적으로 개행을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a71ed28fa070fd5d0f2ba5d9d8b94e51646208b" translate="yes" xml:space="preserve">
          <source>Note: fish 2.2.0 and earlier used a default of 10 milliseconds, and provided no way to configure it. That effectively made it impossible to use escape as a meta key.</source>
          <target state="translated">참고 : fish 2.2.0 및 이전 버전은 기본값 10 밀리 초를 사용했으며이를 구성 할 방법을 제공하지 않았습니다. 이로 인해 이스케이프를 메타 키로 사용할 수 없었습니다.</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="03c757f6b7891744a49627d17ec9ed791ed69d26" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an implicit int flag, else</source>
          <target state="translated">플래그가 인수를 취하지 않거나 묵시적 int 플래그 인 부울 인 경우에는 아무것도 없습니다.</target>
        </trans-unit>
        <trans-unit id="3a6065f76d3b020b6ad540bdea70b2f7e755a94a" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an integer flag, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47908ae8dc7d29c7e8ca1f8808d3df2ae36cf39" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration (&lt;code&gt;function thing -w otherthing&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9e91cddb4e1bbe3d96c5cfb7bcf12796b0c7e0" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration.</source>
          <target state="translated">이제 허브는 git의 모든 완성을 상속합니다. 이것은 함수 선언에서도 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="377c6369b04b17877206baabd99b8340d2c1712d" translate="yes" xml:space="preserve">
          <source>Now in another shell:</source>
          <target state="translated">이제 다른 쉘에서 :</target>
        </trans-unit>
        <trans-unit id="9241604f804422daccce563b9e8acb2fb7b8f7c8" translate="yes" xml:space="preserve">
          <source>Now, bash also tries to match files in this case, but when it doesn't find a match, it passes along the literal wildcard string instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aead3c087eb1218d9c5de157a34a40ad6e6161" translate="yes" xml:space="preserve">
          <source>Numerical comparisons will simply fail if one of the operands is not a number:</source>
          <target state="translated">피연산자 중 하나가 숫자가 아닌 경우 숫자 비교는 단순히 실패합니다.</target>
        </trans-unit>
        <trans-unit id="08a914cde05039694ef0194d9ee79ff9a79dde33" translate="yes" xml:space="preserve">
          <source>O</source>
          <target state="translated">O</target>
        </trans-unit>
        <trans-unit id="aeeb9e7d5766fc544e9c4260b0a26961443229c2" translate="yes" xml:space="preserve">
          <source>Oh My Fish</source>
          <target state="translated">오 마이 피쉬</target>
        </trans-unit>
        <trans-unit id="c168b84a253f1a9380f35914e43b4459d37046ec" translate="yes" xml:space="preserve">
          <source>Old style long options, like '&lt;code&gt;-Wall&lt;/code&gt;'. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter ('&lt;code&gt;-ao null&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-Wall&lt;/code&gt; ' 과 같은 오래된 스타일의 긴 옵션 . 이전 스타일의 긴 옵션은 하나 이상의 문자 길이를 가질 수 있으며 앞에 하이픈이 붙어 그룹화되지 않을 수 있습니다. 옵션 인수는 다음 매개 변수 ( ' &lt;code&gt;-ao null&lt;/code&gt; ')에 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="702d8b387b41361a3850f5f8a5ccb56e871723f8" translate="yes" xml:space="preserve">
          <source>Old style long options, like &lt;code&gt;-Wall&lt;/code&gt; or &lt;code&gt;-name&lt;/code&gt;. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter (&lt;code&gt;-ao null&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e42bb3078b6143675803071b50a1f886f1fddf" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these configuration variables is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">시작시 Fish는 여러 가지 구성 파일을 평가하여 셸의 동작을 제어하는 ​​데 사용할 수 있습니다. 이러한 구성 변수의 위치는 여러 환경 변수에 의해 제어되며 기본 또는 일반적인 위치는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="24b148830736c9caeaaf006e4d059c7b395c5a53" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">시작시 Fish는 셸의 동작을 제어하는 ​​데 사용할 수있는 여러 구성 파일을 평가합니다. 이들의 위치는 여러 환경 변수에 의해 제어되며 기본 또는 일반적인 위치는 아래에 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="53732b6ec19e859a0b3473ce5240c51bbdc7db63" translate="yes" xml:space="preserve">
          <source>On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.</source>
          <target state="translated">이 기능을 지원하는 시스템에서 작업은 마지막 명령이 실행 된 이후 각 작업의 CPU 사용량을 인쇄합니다. CPU 사용량은 전체 CPU 활동의 백분율로 표시됩니다. 다중 프로세서 시스템에서 총 활동은 100 % 이상일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b94b1b00f4f9d7408bbdbe697afeca3ea6a2231" translate="yes" xml:space="preserve">
          <source>Once fish has been installed, open a terminal. If fish is not the default shell:</source>
          <target state="translated">물고기가 설치되면 터미널을 엽니 다. 물고기가 기본 쉘이 아닌 경우 :</target>
        </trans-unit>
        <trans-unit id="18125968ef24a12c2f2c9db564d4fb936f8a352f" translate="yes" xml:space="preserve">
          <source>Once installed, just type in &lt;code&gt;fish&lt;/code&gt; into your current shell to try it out!</source>
          <target state="translated">설치가 완료되면 현재 껍질 에 &lt;code&gt;fish&lt;/code&gt; 을 입력 하여 사용해보십시오!</target>
        </trans-unit>
        <trans-unit id="f9801d214429ef9429f41d9ccbf53d1f50cc2cf7" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is '&lt;code&gt;--color=auto&lt;/code&gt;'. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="translated">함수의 가장 일반적인 용도 중 하나는 기존 명령의 동작을 약간 변경하는 것입니다. 예를 들어 &lt;code&gt;ls&lt;/code&gt; 명령을 재정 의하여 색상을 표시 할 수 있습니다. GNU 시스템에서 색상을 켜기위한 스위치는 ' &lt;code&gt;--color=auto&lt;/code&gt; '입니다. &lt;code&gt;ls&lt;/code&gt; 주위의 별명 또는 랩퍼 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="18a097b3775c30d06cc2f17460da80ed3f17620c" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is &lt;code&gt;--color=auto&lt;/code&gt;. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b470ff64825bad720814107ffdfa7bc5213df21" translate="yes" xml:space="preserve">
          <source>One of the most important expansions in fish is the &quot;variable expansion&quot;. This is the replacing of a dollar sign (&lt;code&gt;$&lt;/code&gt;) followed by a variable name with the _value_ of that variable. For more on shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ed72e8734163b3555d72a22a65213a63ac427a" translate="yes" xml:space="preserve">
          <source>Only one function's description can be changed in a single invocation of &lt;code&gt;functions -d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;functions -d&lt;/code&gt; 의 단일 호출에서 하나의 함수 설명 만 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="744f6b1ea6029a4d03e486aa51d71e6cdfe3a24a" translate="yes" xml:space="preserve">
          <source>Only part of the output can be used, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">출력의 일부만 사용할 수 있습니다 . 자세한 내용 은 &lt;a href=&quot;#expand-index-range&quot;&gt;인덱스 범위 확장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="e52f4d4c344dadad003e702bffb9e5e28cdc4a21" translate="yes" xml:space="preserve">
          <source>Operators for files and directories</source>
          <target state="translated">파일과 디렉토리를위한 연산자</target>
        </trans-unit>
        <trans-unit id="f27bb0ff136bb8c7c7f1daaac32275d53bfd219d" translate="yes" xml:space="preserve">
          <source>Operators for text strings</source>
          <target state="translated">텍스트 문자열의 연산자</target>
        </trans-unit>
        <trans-unit id="a47a505eb7af733ce0bd8e9777ac0dd7490e55d7" translate="yes" xml:space="preserve">
          <source>Operators to combine expressions</source>
          <target state="translated">표현식을 결합하는 연산자</target>
        </trans-unit>
        <trans-unit id="7fa47fe3927b334a484c669114b525abc6a94112" translate="yes" xml:space="preserve">
          <source>Operators to compare and examine numbers</source>
          <target state="translated">숫자를 비교하고 조사하는 연산자</target>
        </trans-unit>
        <trans-unit id="d4829f651a76eb5aa9c3d27e3534a7c418cd1fc9" translate="yes" xml:space="preserve">
          <source>Option Specifications</source>
          <target state="translated">옵션 사양</target>
        </trans-unit>
        <trans-unit id="7a482cf8fb70076ae04055b4c030c65bed8421d9" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the exit status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#flag-value-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">선택적으로 &lt;code&gt;!&lt;/code&gt; 값을 확인하기 위해 물고기 스크립트가 뒤 따릅니다. 일반적으로 이것은 실행할 함수입니다. 종료 상태가 0이면 플래그 값이 유효합니다. 0이 아니면 값이 유효하지 않습니다. 모든 오류 메시지는 stdout (stderr 아님)에 기록해야합니다. 자세한 내용은 &lt;a href=&quot;#flag-value-validation&quot;&gt;플래그 값 유효성 검사&lt;/a&gt; 섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6f38993c6d0d5cf791252a01f84f61ce28090cdc" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the return status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#arparse-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">선택적으로 &lt;code&gt;!&lt;/code&gt; 값을 확인하기 위해 피쉬 스크립트가 이어집니다. 일반적으로 이것은 실행하는 기능입니다. 리턴 상태가 0이면 플래그의 값이 유효합니다. 0이 아닌 값은 유효하지 않습니다. 모든 오류 메시지는 stderout이 아닌 stdout에 작성해야합니다. 자세한 내용은 &lt;a href=&quot;#arparse-validation&quot;&gt;플래그 값 유효성 검사&lt;/a&gt; 섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="3b7277ba5f0f20e70f1f91d410bbc35500c732a7" translate="yes" xml:space="preserve">
          <source>Or if you just want to do one command in case the first succeeded or failed, use &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt;:</source>
          <target state="translated">또는 첫 번째 명령이 성공하거나 실패한 경우 하나의 명령 만 수행하려면 &lt;code&gt;and&lt;/code&gt; 또는 &lt;code&gt;or&lt;/code&gt; 다음을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="713a94b9bc2fb6c6ad642cfcecc352a0220c8694" translate="yes" xml:space="preserve">
          <source>Or if you prefer not to use a universal variable, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9abc7dccb472746b2948ac650340ce146780c6" translate="yes" xml:space="preserve">
          <source>Or odd numbers from 1 to 3:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c337c713192bc94b6ec5b1b84f6028cb1ca99ebf" translate="yes" xml:space="preserve">
          <source>Or the handler for OpenSUSE's command-not-found:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23708273232d69f28e02edee8358b668eb03e266" translate="yes" xml:space="preserve">
          <source>Or the simple default handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de71742464e8e90ccc846c603c38a7e6c76aecb" translate="yes" xml:space="preserve">
          <source>Or with a &lt;a href=&quot;#expand-wildcard&quot;&gt;glob&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bf0c03fb4bccb95c35b8c3ab1ac72a8321cb91" translate="yes" xml:space="preserve">
          <source>Or you can modify $fish_user_paths yourself, but you should be careful &lt;em&gt;not&lt;/em&gt; to append to it unconditionally in config.fish, or it will grow longer and longer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b86ec4ef5585a86b2d2d95ef6ccb97a2b91faa" translate="yes" xml:space="preserve">
          <source>Or, to only get even numbers from 2 to 20:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14be7a9cc678ff8d2acac3f8d22e39b9c8a4df32" translate="yes" xml:space="preserve">
          <source>Other features</source>
          <target state="translated">다른 기능들</target>
        </trans-unit>
        <trans-unit id="853554e3756e54eab25e2cb9c5b84f13d2534ef7" translate="yes" xml:space="preserve">
          <source>Other help pages</source>
          <target state="translated">기타 도움말 페이지</target>
        </trans-unit>
        <trans-unit id="77469ecfa59d843fae303a2fd75c68c6d8c80b23" translate="yes" xml:space="preserve">
          <source>Other keys don't have a direct encoding, and are sent as escape sequences. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8064e7b7ad17f0248f35efb48f0f1d68ee39d15e" translate="yes" xml:space="preserve">
          <source>Other shells such as bash and zsh use a variable named &lt;code&gt;HISTFILE&lt;/code&gt; for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than &lt;code&gt;fish&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; it will inhibit importing the bash history. That's because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.</source>
          <target state="translated">bash 및 zsh와 같은 다른 쉘 은 유사한 목적으로 &lt;code&gt;HISTFILE&lt;/code&gt; 이라는 변수를 사용합니다 . Fish는 다른 이름을 사용하여 충돌을 피하고 동작이 다르다는 것을 나타냅니다 (파일 경로 대신 세션 이름). 또한 var를 &lt;code&gt;fish&lt;/code&gt; 또는 &lt;code&gt;default&lt;/code&gt; 이외의 것으로 설정 하면 bash 기록 가져 오기가 금지됩니다. 이 기능의 가장 일반적인 사용 사례는 프레젠테이션을 할 때 개인 또는 민감한 기록이 유출되지 않도록하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="994d2884abd0455d7cd071bce999e810a742d0a0" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, have a much richer glob syntax, like &lt;code&gt;**(.)&lt;/code&gt; to only match regular files. Fish does not. Instead of reinventing the whell, use programs like &lt;code&gt;find&lt;/code&gt; to look for files. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca76df4fa26ca40f2ebdbbcc9b7ac947b4b17597" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, provide a rich glob syntax for restricting the files matched by globs. For example, &lt;code&gt;**(.)&lt;/code&gt;, to only match regular files. Fish prefers to defer such features to programs, such as &lt;code&gt;find&lt;/code&gt;, rather than reinventing the wheel. Thus, if you want to limit the wildcard expansion to just regular files the fish approach is to define and use a function. For example,</source>
          <target state="translated">zsh와 같은 다른 쉘은 glob과 일치하는 파일을 제한하기위한 풍부한 glob 구문을 제공합니다. 예를 들어 &lt;code&gt;**(.)&lt;/code&gt; 는 일반 파일과 만 일치합니다. 물고기는 바퀴를 재발견하기보다는 &lt;code&gt;find&lt;/code&gt; 와 같은 프로그램에 이러한 기능을 연기하는 것을 선호합니다 . 따라서 와일드 카드 확장을 일반 파일로만 제한하려면 피쉬 접근 방식은 함수를 정의하고 사용하는 것입니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="c782bae247172d8d54b6355e71e72f640fe2e686" translate="yes" xml:space="preserve">
          <source>Other things have other restrictions. For instance what is allowed for file names depends on your system, but at the very least they cannot contain a &quot;/&quot; (because that is the path separator) or NULL byte (because that is how UNIX ends strings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a838bcf64937317892425e5ab22ef3642359f4" translate="yes" xml:space="preserve">
          <source>Other variables, like &lt;code&gt;$PATH&lt;/code&gt;, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; 와 같은 다른 변수에는 실제로 여러 값이 있습니다. 변수 확장 중에 변수는 여러 인수가되도록 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="b5d3d0ee6275d093a0cfd5679e24b1abd3556dc6" translate="yes" xml:space="preserve">
          <source>Otherwise, by default, the variable will not be exported.</source>
          <target state="translated">그렇지 않으면 기본적으로 변수가 내보내지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="adcbabbfd6290e1df478b0d2b37c0beb20ff4767" translate="yes" xml:space="preserve">
          <source>Outputting multiple lines is not supported in &lt;code&gt;fish_mode_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; 에서는 여러 줄을 출력 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="5b8012177cdea50be6a01e8c45312b388ccc9c7a" translate="yes" xml:space="preserve">
          <source>Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.</source>
          <target state="translated">큰 따옴표 이외의 변수는 요소가있는만큼 많은 인수로 확장됩니다. 즉, 빈 목록은 아무 것도 확장하지 않고 하나의 요소가있는 변수는 해당 요소로 확장되며 여러 요소가있는 변수는 각 요소로 개별적으로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="701d31f2af951617e24913040bb289cccf377776" translate="yes" xml:space="preserve">
          <source>Overriding variables for a single command</source>
          <target state="translated">단일 명령에 대한 변수 재정의</target>
        </trans-unit>
        <trans-unit id="511993d3c99719e38a6779073019dacd7178ddb9" translate="yes" xml:space="preserve">
          <source>P</source>
          <target state="translated">P</target>
        </trans-unit>
        <trans-unit id="b7cda6a843d651b6992452486c962d590a3cb164" translate="yes" xml:space="preserve">
          <source>PATH variables</source>
          <target state="translated">PATH 변수</target>
        </trans-unit>
        <trans-unit id="404b5a722c514f9f99c58c8b9832dbdc15c84e14" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal arrays, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH 변수는 암시 적으로 결합되고 콜론으로 분할되는 것을 제외하고 일반 배열로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="b66696987075bafb7f873ca41d609e5877999e68" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal lists, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH 변수는 암시 적으로 조인되고 콜론으로 분할된다는 점을 제외하고는 일반 목록으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="e0aae95ec2c89c6e7884d8a51c6718b40028b727" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal lists, except they are implicitly joined and split on colons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebe8b4d277848e1ec370986e82d2178731c6293" translate="yes" xml:space="preserve">
          <source>Page Down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c77b5722c41b6f199f92efb5977aba4430b61c9" translate="yes" xml:space="preserve">
          <source>Page Up</source>
          <target state="translated">페이지 위로</target>
        </trans-unit>
        <trans-unit id="fb7524411cf6310c7a2701b4eaf14a129c0d2513" translate="yes" xml:space="preserve">
          <source>Pager color variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f46839db81e25cd2e4301ef04e9902136c3028" translate="yes" xml:space="preserve">
          <source>Parameter expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b76530ae6668a37f97a682d440c45d138de6409" translate="yes" xml:space="preserve">
          <source>Parameter expansion (Globbing)</source>
          <target state="translated">파라미터 확장 (글 로빙)</target>
        </trans-unit>
        <trans-unit id="d1978ad07fd49427cbbdee50809caf0b5f1afd7e" translate="yes" xml:space="preserve">
          <source>Parameter expansion is limited to 524288 items. There is a limit to how many arguments the operating system allows for any command, and 524288 is far above it. This is a measure to stop the shell from hanging doing useless computation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdb3f75d27167ce5697671dbec55e14ed3744ea" translate="yes" xml:space="preserve">
          <source>Parentheses and the &lt;code&gt;-o&lt;/code&gt; and &lt;code&gt;-a&lt;/code&gt; operators can be combined to produce more complicated expressions. In this example, success is printed if there is a &lt;code&gt;/foo&lt;/code&gt; or &lt;code&gt;/bar&lt;/code&gt; file as well as a &lt;code&gt;/baz&lt;/code&gt; or &lt;code&gt;/bat&lt;/code&gt; file.</source>
          <target state="translated">괄호와 &lt;code&gt;-o&lt;/code&gt; 및 &lt;code&gt;-a&lt;/code&gt; 연산자를 결합하여보다 복잡한 표현을 만들 수 있습니다. 이 예에서 &lt;code&gt;/foo&lt;/code&gt; 또는 &lt;code&gt;/bar&lt;/code&gt; 파일과 &lt;code&gt;/baz&lt;/code&gt; 또는 &lt;code&gt;/bat&lt;/code&gt; 파일 이 있으면 성공이 인쇄됩니다 .</target>
        </trans-unit>
        <trans-unit id="a3a505e6684eca4bb15ce321fd252137c0869b89" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &quot;PATH&quot; (case-sensitive) become PATH variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0efa09d094aec052590bdd703ecb253fb17eb1e" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &lt;code&gt;PATH&lt;/code&gt; (case-sensitive) become PATH variables.</source>
          <target state="translated">경로 변수는 PATH, CDPATH, MANPATH, PYTHONPATH 등을 포함하여 콜론으로 구분 된 경로 목록을 지원하는 데 사용되는 특수한 종류의 변수입니다. &lt;code&gt;PATH&lt;/code&gt; (대소 문자 구분)로 끝나는 모든 변수는 PATH 변수가됩니다.</target>
        </trans-unit>
        <trans-unit id="2d153a802a389d1d077cca2e46097df8c50f33d8" translate="yes" xml:space="preserve">
          <source>Perform a history search when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db92c54d01dcbf9ce9147cf302fcbe0e8290138e" translate="yes" xml:space="preserve">
          <source>Performs a history search when the</source>
          <target state="translated">이력 검색을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="acdeb27738adfec3e214f14b0bc5ac319dee18bf" translate="yes" xml:space="preserve">
          <source>Performs a history search when the &lt;b&gt;Page Up&lt;/b&gt; key is pressed.</source>
          <target state="translated">&lt;b&gt;Page Up&lt;/b&gt; 키를 누를 때 히스토리 검색을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="b07e355a3677aa688ad89bddfe79ee5b312d7645" translate="yes" xml:space="preserve">
          <source>Pipes and Redirections</source>
          <target state="translated">파이프 및 리디렉션</target>
        </trans-unit>
        <trans-unit id="109d28af6c9d51926601f8d9e60546da74487021" translate="yes" xml:space="preserve">
          <source>Pipes usually connect file descriptor 1 (standard output) of the first process to file descriptor 0 (standard input) of the second process. It is possible to use a different output file descriptor by prepending the desired FD number and then output redirect symbol to the pipe. For example:</source>
          <target state="translated">파이프는 일반적으로 첫 번째 프로세스의 파일 설명자 1 (표준 출력)을 두 번째 프로세스의 파일 설명자 0 (표준 입력)에 연결합니다. 원하는 FD 번호를 앞에 붙여 다른 출력 파일 디스크립터를 사용하고 파이프에 리디렉션 경로를 출력 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3247b493bc40b8745523a27d8c525cd0dc056fd5" translate="yes" xml:space="preserve">
          <source>Piping</source>
          <target state="translated">Piping</target>
        </trans-unit>
        <trans-unit id="36298b88737bbda60ad0697ed9af7787bf89ea37" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;cmds/source#cmd-source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">이벤트 핸들러는 함수가로드 될 때만 활성화됩니다. 즉, &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;자동로드&lt;/a&gt; 에 의존하는 대신 함수를 &lt;a href=&quot;cmds/source#cmd-source&quot;&gt;소싱&lt;/a&gt; 하거나 실행 해야 할 수도 있습니다 . 한 가지 방법은이를 &lt;a href=&quot;#initialization&quot;&gt;초기화 파일&lt;/a&gt; 에 넣는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="484a02744408ea850ed69df5530d98aa375e29f4" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;commands#source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;index#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">이벤트 핸들러는 함수가로드 될 때만 활성화되므로 &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;자동로드&lt;/a&gt; 에 의존하는 대신 함수를 &lt;a href=&quot;commands#source&quot;&gt;소싱&lt;/a&gt; 하거나 실행 해야 할 수도 있습니다 . 한 가지 방법은 &lt;a href=&quot;index#initialization&quot;&gt;초기화 파일&lt;/a&gt; 에 넣는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="a11138604a9e12fab2be4d88197eda43c40a71dc" translate="yes" xml:space="preserve">
          <source>Prefixing a feature with &lt;code&gt;no-&lt;/code&gt; turns it off instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1a82c707f23d09169b7a07b352752535b796b2" translate="yes" xml:space="preserve">
          <source>Prefixing a feature with &lt;code&gt;no-&lt;/code&gt; turns it off instead. .. _other:</source>
          <target state="translated">기능 앞에 &lt;code&gt;no-&lt;/code&gt; 를 붙이면 대신 꺼집니다. .. _ 기타 :</target>
        </trans-unit>
        <trans-unit id="d9da79a093b23650535a151c09a73e3fee5ee4ae" translate="yes" xml:space="preserve">
          <source>Prefixing the commandline with a space will prevent the entire line from being stored in the history.</source>
          <target state="translated">명령 행 앞에 공백이 있으면 전체 행이 히스토리에 저장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ae87eccf04345730f74111e3854e8d88c3f15602" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;sudo&lt;/code&gt; to the current commandline.</source>
          <target state="translated">현재 명령 줄 앞에 &lt;code&gt;sudo&lt;/code&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="9839bfb9437debae035747212d941ee55c05aeb5" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;sudo&lt;/code&gt; to the current commandline. If the commandline is empty, prepend &lt;code&gt;sudo&lt;/code&gt; to the last commandline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea683ad616063b7347bdddeee7203a82e1a3805b" translate="yes" xml:space="preserve">
          <source>Press</source>
          <target state="translated">Press</target>
        </trans-unit>
        <trans-unit id="fe2ed6ea3216d06709445e2c3ce6b00041d037ed" translate="yes" xml:space="preserve">
          <source>Press &lt;b&gt;Tab&lt;/b&gt;, and &lt;code&gt;fish&lt;/code&gt; will attempt to complete the command, argument, or path:</source>
          <target state="translated">를 눌러 &lt;b&gt;탭&lt;/b&gt; , 그리고 &lt;code&gt;fish&lt;/code&gt; 명령, 인수, 또는 경로를 완료하려고 시도합니다 :</target>
        </trans-unit>
        <trans-unit id="7ec470886283f4bfbbc71ce123f5602a60ae342e" translate="yes" xml:space="preserve">
          <source>Pressing</source>
          <target state="translated">Pressing</target>
        </trans-unit>
        <trans-unit id="09c712c74db06b262e6e04d6f0d9c7fa02c47733" translate="yes" xml:space="preserve">
          <source>Pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt; instead of pressing the &lt;b&gt;Enter&lt;/b&gt; key.</source>
          <target state="translated">누르면 &lt;em&gt;Alt 키를&lt;/em&gt; - &lt;b&gt;입력&lt;/b&gt; 대신 눌러의 &lt;b&gt;입력&lt;/b&gt; 키를 누릅니다.</target>
        </trans-unit>
        <trans-unit id="18a079610776709bdf0e5127ade329eadec0eaa4" translate="yes" xml:space="preserve">
          <source>Pressing the</source>
          <target state="translated">누르면</target>
        </trans-unit>
        <trans-unit id="27bf58510d3b20325eed84381a6d30434da9e2ca" translate="yes" xml:space="preserve">
          <source>Pressing the &lt;b&gt;Enter&lt;/b&gt; key while a block of commands is unclosed, such as when one or more block commands such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; do not have a corresponding &lt;code&gt;end&lt;/code&gt; command.</source>
          <target state="translated">(가)를 누르면 &lt;b&gt;입력&lt;/b&gt; 하나 이상의 블록과 같은 명령 때와 같이 명령 블록이 닫히지 않은 상태에서 키를 &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;begin&lt;/code&gt; 또는 &lt;code&gt;if&lt;/code&gt; 해당이없는 &lt;code&gt;end&lt;/code&gt; 명령을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="51c1ca9c0f68b042eddbc3f8c65475d34963915f" translate="yes" xml:space="preserve">
          <source>Previous versions of fish also allowed specifying this as &lt;code&gt;^DESTINATION&lt;/code&gt;, but that made another character special so it was deprecated and will be removed in the future. See &lt;a href=&quot;#featureflags&quot;&gt;feature flags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f9e196a99ef7c54610b77d7819c1536c7dc380" translate="yes" xml:space="preserve">
          <source>Previous versions of fish also allowed spelling this as &lt;code&gt;^DESTINATION&lt;/code&gt;, but that made another character special so it was deprecated and will be removed in future.</source>
          <target state="translated">이전 버전의 fish는 또한 이것을 &lt;code&gt;^DESTINATION&lt;/code&gt; 로 철자를 허용 했지만 다른 문자를 특별하게 만들었으므로 더 이상 사용되지 않으며 향후 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="27493f631ba000f95a572539cafcbb594a951944" translate="yes" xml:space="preserve">
          <source>Print Top and Bottom on separate lines, using an escape sequence</source>
          <target state="translated">이스케이프 시퀀스를 사용하여 별도의 줄에 위쪽과 아래쪽을 인쇄</target>
        </trans-unit>
        <trans-unit id="84c34db7a924b44d0ab81ef51631e488d755a55a" translate="yes" xml:space="preserve">
          <source>Print hello world to stdout</source>
          <target state="translated">안녕하세요 세계를 stdout에 인쇄</target>
        </trans-unit>
        <trans-unit id="ad29dcc16fea024e7e41818ab9d4740b264b782b" translate="yes" xml:space="preserve">
          <source>Prior to the addition of this builtin command in the 2.7.0 release there were two main ways to parse the arguments passed to a fish script or function. One way was to use the OS provided &lt;code&gt;getopt&lt;/code&gt; command. The problem with that is that the GNU and BSD implementations are not compatible. Which makes using that external command difficult other than in trivial situations. The other way is to iterate over &lt;code&gt;$argv&lt;/code&gt; and use the fish &lt;code&gt;switch&lt;/code&gt; statement to decide how to handle the argument. That, however, involves a huge amount of boilerplate code. It is also borderline impossible to implement the same behavior as builtin commands.</source>
          <target state="translated">2.7.0 릴리스에서이 기본 제공 명령을 추가하기 전에 피쉬 스크립트 또는 함수에 전달 된 인수를 구문 분석하는 두 가지 주요 방법이있었습니다. 한 가지 방법은 OS에서 제공 한 &lt;code&gt;getopt&lt;/code&gt; 명령 을 사용하는 것 입니다. 문제는 GNU와 BSD 구현이 호환되지 않는다는 것입니다. 사소한 상황이 아닌 다른 외부 명령을 사용하기가 어렵습니다. 다른 방법은 &lt;code&gt;$argv&lt;/code&gt; 를 반복 하고 fish &lt;code&gt;switch&lt;/code&gt; 문을 사용하여 인수를 처리하는 방법을 결정하는 것입니다. 그러나 많은 양의 상용구 코드가 필요합니다. 내장 명령과 동일한 동작을 구현하는 것도 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="e14c52a6b5ed7f130784534e792abd7951342686" translate="yes" xml:space="preserve">
          <source>Private mode</source>
          <target state="translated">개인 모드</target>
        </trans-unit>
        <trans-unit id="7d03d42c737cd08e3c616e333f7637225318bb7d" translate="yes" xml:space="preserve">
          <source>Problem solved!</source>
          <target state="translated">문제 해결됨!</target>
        </trans-unit>
        <trans-unit id="ee9fca50a497a5601e04bc03c01cb7e46d034712" translate="yes" xml:space="preserve">
          <source>Process substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fee3438e0d28b1f5e56d2013e82bcf5b441945" translate="yes" xml:space="preserve">
          <source>Programmable prompt</source>
          <target state="translated">프로그래밍 가능한 프롬프트</target>
        </trans-unit>
        <trans-unit id="4eae5ed9e86eb92ca41dd75ef52fb9a0a53af761" translate="yes" xml:space="preserve">
          <source>Programmable title</source>
          <target state="translated">프로그래밍 가능한 제목</target>
        </trans-unit>
        <trans-unit id="a817d7eb8e0f1dab755ab5203a082e5c3c094fce" translate="yes" xml:space="preserve">
          <source>Prompt</source>
          <target state="translated">Prompt</target>
        </trans-unit>
        <trans-unit id="eea5311d723f2493a5c1450ad76e4f364fdaf4f0" translate="yes" xml:space="preserve">
          <source>Prompts</source>
          <target state="translated">Prompts</target>
        </trans-unit>
        <trans-unit id="891af452e40b1f57d6207ad00ca8f173d9425b11" translate="yes" xml:space="preserve">
          <source>Put &lt;code&gt;bind&lt;/code&gt; statements into &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt; or a function called &lt;code&gt;fish_user_key_bindings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0495187c978ea883d19171649639e1c756060adb" translate="yes" xml:space="preserve">
          <source>Quick answer:</source>
          <target state="translated">빠른 답변 :</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="19e3869f24dda01e67d9a925748b4ce101c6820b" translate="yes" xml:space="preserve">
          <source>Quotes are followed across newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fefb29eda0237f92306cb85899330ca8b230ee" translate="yes" xml:space="preserve">
          <source>Quoting</source>
          <target state="translated">Quoting</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="a5ab0c393626e6b25924176a035ebd63722dc7ec" translate="yes" xml:space="preserve">
          <source>Range expansion will go in reverse if the end element is earlier in the list than the start and forward if the end is later than the start, unless exactly one of the given indices is negative. This is to enable clamping without changing direction if the list has fewer elements than expected.</source>
          <target state="translated">주어진 인덱스 중 정확히 하나가 음수가 아닌 한, 끝 요소가 시작보다 목록의 앞쪽에 있으면 범위 확장은 반대로되고 끝이 시작보다 늦으면 앞쪽으로 확장됩니다. 이는 목록에 예상보다 적은 요소가있는 경우 방향을 변경하지 않고 클램핑을 활성화하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="b16d80967d06f9706108437bd28e6a8d5175e9a0" translate="yes" xml:space="preserve">
          <source>Reading from or appending to a non existing file.</source>
          <target state="translated">존재하지 않는 파일에서 읽거나 추가합니다.</target>
        </trans-unit>
        <trans-unit id="3e22373b8f4786a11fc3f5247c24bd1cd140127f" translate="yes" xml:space="preserve">
          <source>Ready for more?</source>
          <target state="translated">더 준비가 되셨습니까?</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="translated">정규식</target>
        </trans-unit>
        <trans-unit id="cd5af7344f50420161f8f096f94794e6fe1580c6" translate="yes" xml:space="preserve">
          <source>Release notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8c7c6ececfc7a4858b06b4968629df633fe974" translate="yes" xml:space="preserve">
          <source>Renames an existing abbreviation from &lt;code&gt;gco&lt;/code&gt; to &lt;code&gt;gch&lt;/code&gt;.</source>
          <target state="translated">에서 기존의 약어 이름을 변경 &lt;code&gt;gco&lt;/code&gt; 에 &lt;code&gt;gch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4dc79b3cd9563c59f1fd2d978861f14b1270090f" translate="yes" xml:space="preserve">
          <source>Repeat Examples</source>
          <target state="translated">예제 반복</target>
        </trans-unit>
        <trans-unit id="a879640933d6c8936ca4cc6a02a55f8cc4408041" translate="yes" xml:space="preserve">
          <source>Replace Literal Examples</source>
          <target state="translated">리터럴 예제 교체</target>
        </trans-unit>
        <trans-unit id="13b05ad41dc01c7c29077cca05d8339a7a6429b9" translate="yes" xml:space="preserve">
          <source>Replace Regex Examples</source>
          <target state="translated">정규식 예제 바꾸기</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">반환 값</target>
        </trans-unit>
        <trans-unit id="27ca7249b11e61ac7f3b63efe842130af63f97b8" translate="yes" xml:space="preserve">
          <source>Run the following command in fish:</source>
          <target state="translated">물고기에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="247f6e4943c76c92b5c6c8d51b7623da37673dc0" translate="yes" xml:space="preserve">
          <source>Run:</source>
          <target state="translated">Run:</target>
        </trans-unit>
        <trans-unit id="ddd9c246e03e2789458ae8bb429c9d694195cb17" translate="yes" xml:space="preserve">
          <source>Running Commands</source>
          <target state="translated">명령 실행</target>
        </trans-unit>
        <trans-unit id="5c5cc33a225b06807a45544c8793a5276a15976d" translate="yes" xml:space="preserve">
          <source>Running multiple programs</source>
          <target state="translated">여러 프로그램 실행</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="b6ee539e25ba9fe37112f3eead73eaed680c02a5" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;../index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example,</source>
          <target state="translated">SEQUENCE는 바인딩 할 문자 시퀀스입니다. 이것들은 &lt;a href=&quot;../index#escapes&quot;&gt;물고기 이스케이프 시퀀스&lt;/a&gt; 로 작성되어야합니다 . 예를 들어 Alt 키와 다른 문자를 누르면 이스케이프 문자가 접두사로 붙은 해당 문자가 전송되므로 &lt;code&gt;\e&lt;/code&gt; 이스케이프를 사용하여 Alt 기반 키 바인딩을 작성할 수 있습니다 . 예를 들면</target>
        </trans-unit>
        <trans-unit id="b3fe37f1b337c360725965146e94ffa93a9708da" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; can be written as &lt;code&gt;\ew&lt;/code&gt;. The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; (^X) can be written as &lt;code&gt;\cx&lt;/code&gt;. Note that Alt-based key bindings are case sensitive and Control-based key bindings are not. This is a constraint of text-based terminals, not &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">SEQUENCE는 바인딩 할 문자 시퀀스입니다. 이것은 &lt;a href=&quot;index#escapes&quot;&gt;물고기 탈출 순서&lt;/a&gt; 로 작성되어야합니다 . 예를 들어 Alt 키와 다른 문자를 누르면 해당 문자가 이스케이프 문자로 시작되므로 &lt;code&gt;\e&lt;/code&gt; 이스케이프를 사용하여 Alt 기반 키 바인딩을 작성할 수 있습니다 . 예를 들어 &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt; 는 &lt;code&gt;\ew&lt;/code&gt; 로 쓸 수 있습니다 . 제어 문자는 &lt;code&gt;\c&lt;/code&gt; 이스케이프를 사용하여 거의 같은 방식으로 쓸 수 있습니다. 예를 들어 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; (^ X)는 &lt;code&gt;\cx&lt;/code&gt; 로 쓸 수 있습니다 . Alt 기반 키 바인딩은 대소 문자를 구분하며 Control 기반 키 바인딩은 대소 문자를 구분하지 않습니다. 이것은 &lt;code&gt;fish&lt;/code&gt; 아닌 텍스트 기반 터미널의 제약입니다..</target>
        </trans-unit>
        <trans-unit id="769ee8ba6c10d0fc5cc5d5931ff5950b069f7631" translate="yes" xml:space="preserve">
          <source>STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.</source>
          <target state="translated">표준 입력이 파이프 또는 파일에 연결되어 있지 않으면 명령 행에서 STRING 인수를 가져옵니다.이 경우 표준 입력에서 한 줄에 하나씩 STRING을 읽습니다. 명령 행 및 표준 입력에서 STRING 인수를 제공하는 것은 오류입니다.</target>
        </trans-unit>
        <trans-unit id="4e1a6674d38590faffffeb4695d9d452b5339baa" translate="yes" xml:space="preserve">
          <source>Same as</source>
          <target state="translated">와 동일</target>
        </trans-unit>
        <trans-unit id="3e9759d5f8593842e337c74b9202035585d520b2" translate="yes" xml:space="preserve">
          <source>Same as above but with a second flag that requires a value:</source>
          <target state="translated">위와 동일하지만 값이 필요한 두 번째 플래그가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d562a361adfcc4bd04396673622d38c2c23c4a3b" translate="yes" xml:space="preserve">
          <source>Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (&lt;code&gt;--token&lt;/code&gt;) can be used:</source>
          <target state="translated">위와 동일하지만 보이는 각 인스턴스의 값을 여러 번 저장할 수있는 세 번째 플래그가 있으며 긴 플래그 이름 ( &lt;code&gt;--token&lt;/code&gt; ) 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c902e77d44ee1a72851bdd66a8039b7289e5469e" translate="yes" xml:space="preserve">
          <source>Say $animal contains the name of an animal. Then this code would classify it:</source>
          <target state="translated">$ animal에 동물의 이름이 있다고합시다. 그런 다음이 코드는 분류합니다.</target>
        </trans-unit>
        <trans-unit id="bb8db2460eda9933a6f87adda85e236a41134192" translate="yes" xml:space="preserve">
          <source>Say you want to modify your prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d54c1089bcba444eef6cef409cdf1c2eb4307c" translate="yes" xml:space="preserve">
          <source>Searchable command history</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e406da000ac4099abeb149121071ece020d3907" translate="yes" xml:space="preserve">
          <source>Searchable history</source>
          <target state="translated">검색 가능한 기록</target>
        </trans-unit>
        <trans-unit id="2b36d3f6cf281f2c73783b0cc5596b490e2def69" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fish_for_bash_users#fish-for-bash-users&quot;&gt;Fish for bash users&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b445d35ecc1c55f9e1ceba18d794fb79d964e899" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;index#editor&quot;&gt;documentation&lt;/a&gt; for more details about line editing in fish.</source>
          <target state="translated">참조 &lt;a href=&quot;index#editor&quot;&gt;문서&lt;/a&gt; 물고기 라인 편집에 대한 자세한 내용을.</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">또한보십시오</target>
        </trans-unit>
        <trans-unit id="49221a7350c523a8e1009128e69d530a8c75a22a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print the stack and &lt;code&gt;dirs -c&lt;/code&gt; to clear it.</source>
          <target state="translated">참조 &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;DIRS을&lt;/a&gt; 스택 및 인쇄 &lt;code&gt;dirs -c&lt;/code&gt; 을 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77543101f6f627a4f89275ca4aa34557b8a135ef" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt;, which will call all supported version control prompt functions, including git, Mercurial and Subversion.</source>
          <target state="translated">git, Mercurial 및 Subversion을 포함하여 지원되는 모든 버전 제어 프롬프트 기능을 호출하는 &lt;a href=&quot;fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="67035298680ddb09dd248da78e915fd9c9627f01" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;dirs&lt;/code&gt; and &lt;code&gt;dirs -c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; 및 &lt;code&gt;dirs -c&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a3b31765df862a7d9c4531c872152ad402c53f3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;read --delimiter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read --delimiter&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5324b1f4d638d16895e396283d6222620e56d716" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">최근에 방문한 디렉토리로 변경 하려면 &lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt; 명령을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7238893c67063d93ae05263dd71a5ccfc50d90c7" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">최근에 방문한 디렉토리로 변경 하려면 &lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt; 명령을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="01cfa9314baef15cf1a7d7383228c6d181370cb2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">최신 &lt;code&gt;cd&lt;/code&gt; 기록과 함께 작동 하며 다른 쉘과의 호환성을 위해 제공 되는 &lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;commands#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt; 명령 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a276f1ec5f60e2df52ed4c479379eca5a14e0acb" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt; and &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">최근 &lt;code&gt;cd&lt;/code&gt; 히스토리와 함께 작동 하고 다른 쉘과의 호환성을 위해 제공 되는 &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt; 및 &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; 명령 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a54c40ece878eeac53f5bdaa4674e3e9022a5158" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;--delimiter&lt;/code&gt; option of the &lt;a href=&quot;read#cmd-read&quot;&gt;read&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59959e6168e702c87aad6497074fc87974da46d" translate="yes" xml:space="preserve">
          <source>See the &quot;Internals&quot; section for more on them.</source>
          <target state="translated">자세한 내용은 &quot;내부&quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c6e5f5869c0d557646211d7b722a3358667dc217" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">옵션 사양을 작성하는 더 친숙하지만 더 자세한 방법 은 &lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt; 명령을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="762e36367184253ec997bd0b9511dad76a9722aa" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;cmds/history#cmd-history&quot;&gt;history&lt;/a&gt; command for other manipulations.</source>
          <target state="translated">다른 조작 은 &lt;a href=&quot;cmds/history#cmd-history&quot;&gt;history&lt;/a&gt; 명령을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c014ad7ef4dcc4632ad4cb9226ca38ced50624d9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fish_opt#cmd-fish-opt&quot;&gt;fish_opt&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">옵션 사양을 만드는 더 친숙하지만 더 자세한 방법 은 &lt;a href=&quot;fish_opt#cmd-fish-opt&quot;&gt;fish_opt&lt;/a&gt; 명령을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f689ba7f1bf5e057a3d971021477d48085ed9ad9" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically, and &lt;a href=&quot;index#syntax-function-autoloading&quot;&gt;$fish_function_path&lt;/a&gt; to control their location.</source>
          <target state="translated">이러한 파일을 자동으로 생성하는 방법 은 &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt; 및 &lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsave에&lt;/a&gt; 대한 설명서를 참조 하고 위치를 제어하려면 &lt;a href=&quot;index#syntax-function-autoloading&quot;&gt;$ fish_function_path&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9d34ee1f18350527bff51e963b54e3ce46a24e48" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/test#cmd-test&quot;&gt;test&lt;/a&gt; and &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt; for more information.</source>
          <target state="translated">에 대한 설명서를 참조하십시오 &lt;a href=&quot;cmds/test#cmd-test&quot;&gt;테스트를&lt;/a&gt; 하고 &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;있는 경우&lt;/a&gt; 더 많은 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ac7646fb3e869bb56303fbe3fca839b0d38f1d8" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically.</source>
          <target state="translated">이러한 파일을 자동으로 생성하는 방법 은 &lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt; 및 &lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb216107606bc95b848f93fc29c67e8fe68c93ea" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">에 대한 설명서를 참조하십시오 &lt;a href=&quot;commands#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 더 많은 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9299a43e63898a7efcae7a83cc40f247242085fc" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;set&lt;/code&gt; for more details on the scoping rules for variables.</source>
          <target state="translated">에 대한 설명서를 참조하십시오 &lt;code&gt;set&lt;/code&gt; 변수의 범위 지정 규칙에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="f325a391b2afa8d45fd9b05b9b133df7d497fc47" translate="yes" xml:space="preserve">
          <source>Separating Commands (Semicolon)</source>
          <target state="translated">명령 분리 (세미콜론)</target>
        </trans-unit>
        <trans-unit id="0ffd1469dee865172080d29fd56f5825f24fc441" translate="yes" xml:space="preserve">
          <source>Sequences of elements can be written with the range operator '&lt;code&gt;..&lt;/code&gt;'. A range '&lt;code&gt;a..b&lt;/code&gt;' ('a' and 'b' being integers) is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. Negative range limits are calculated from the end of the list. If an index is too large or small it's silently clamped to one or the size of the list as appropriate.</source>
          <target state="translated">범위 연산자 ' &lt;code&gt;..&lt;/code&gt; '를 사용하여 요소 시퀀스를 작성할 수 있습니다 . 범위 ' &lt;code&gt;a..b&lt;/code&gt; '( 'a'및 'b'는 정수임)는 일련의 인덱스 ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; '또는 ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; '는'a '또는'b '중 어느 것이 더 높은지에 따라 다릅니다. 음수 범위 제한은 목록 끝에서 계산됩니다. 인덱스가 너무 크거나 작 으면 하나 또는 목록의 크기로 적절하게 고정됩니다.</target>
        </trans-unit>
        <trans-unit id="024cdc89776fc67afc34af4659ea1d4b7b50ced1" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;$IFS&lt;/code&gt; to empty will disable line splitting. This is deprecated, use &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafea76301da663d6e72c8dd0182bf1a08fe0c7b" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides.</source>
          <target state="translated">배경색을 설정하면 이후에 작성된 문자에만 영향을줍니다. Fish는 전체 터미널 창의 배경색을 설정하는 방법을 제공하지 않습니다. 터미널이 제공하는 메커니즘을 사용하여 창 배경색 (및 불투명도와 같은 다른 속성)을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="b7ac25be64a83552cee11d2c2c101281899b7d94" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides. Look for a config option.</source>
          <target state="translated">배경색을 설정하면 이후에 쓰여지는 문자에만 영향을줍니다. Fish는 전체 터미널 창의 배경색을 설정하는 방법을 제공하지 않습니다. 창 배경색 (및 불투명도와 같은 기타 속성) 구성은 터미널이 제공하는 메커니즘을 사용하여 수행해야합니다. 구성 옵션을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="f4c7b58dd2bcf51fca3690de5c68c9e1a134f91d" translate="yes" xml:space="preserve">
          <source>Several commands are provided to interact with this directory history:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0750f1643a764b440d30cec12896d4e2f3c4f4" translate="yes" xml:space="preserve">
          <source>Shared bindings</source>
          <target state="translated">공유 바인딩</target>
        </trans-unit>
        <trans-unit id="02a6cc27a3e125fbed4ff93ba00ddc32ff248036" translate="yes" xml:space="preserve">
          <source>Shebang Line</source>
          <target state="translated">Shebang 라인</target>
        </trans-unit>
        <trans-unit id="61e5ec8aae4e834701135d3867ab63125d131c5e" translate="yes" xml:space="preserve">
          <source>Shell variable and function names</source>
          <target state="translated">쉘 변수 및 함수 이름</target>
        </trans-unit>
        <trans-unit id="d32397da27c98186753b21a057b7b69d1b40c8e1" translate="yes" xml:space="preserve">
          <source>Shell variable names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91aede6defa8d430f67e550004d49863d3e2e5b" translate="yes" xml:space="preserve">
          <source>Shell variables</source>
          <target state="translated">쉘 변수</target>
        </trans-unit>
        <trans-unit id="0f86f7ae2195716edf4d3ac75b6ae230d7060ba1" translate="yes" xml:space="preserve">
          <source>Shell variables are named pieces of data, which can be created, deleted and their values changed and used by the user. Variables may optionally be &quot;exported&quot;, so that a copy of the variable is available to any subprocesses the shell creates. An exported variable is referred to as an &quot;environment variable&quot;.</source>
          <target state="translated">쉘 변수는 이름이 지정된 데이터 조각으로, 사용자가 작성, 삭제 및 값을 변경하고 사용할 수 있습니다. 변수는 선택적으로 &quot;내보내기&quot;될 수 있으므로 변수의 사본이 쉘이 작성하는 모든 서브 프로세스에 사용 가능합니다. 내 보낸 변수를 &quot;환경 변수&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="9ba5016166d5ba5cee4a99a1b1e6e1f5fe3f8efe" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same basic syntax.</source>
          <target state="translated">물고기와 같은 조개는 그들에게 명령을 내림으로써 사용됩니다. 모든 &lt;code&gt;fish&lt;/code&gt; 명령은 동일한 기본 구문을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="e122d1fcfbe4d2952329855d2c90efb389777230" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same simple syntax.</source>
          <target state="translated">물고기와 같은 조개는 명령을 내림으로써 사용됩니다. 모든 &lt;code&gt;fish&lt;/code&gt; 명령은 동일한 간단한 구문을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="c7dc92c664fcb0cec1505db87af17f46c261058f" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every fish command follows the same basic syntax. A command is executed by writing the name of the command followed by any arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469d5b183fdc0d59e41a51e61529cdd95274ba7c" translate="yes" xml:space="preserve">
          <source>Shift</source>
          <target state="translated">Shift</target>
        </trans-unit>
        <trans-unit id="c89673d426f813c79fba3be3ad53403494aea9ae" translate="yes" xml:space="preserve">
          <source>Shift, Tab</source>
          <target state="translated">Shift, Tab</target>
        </trans-unit>
        <trans-unit id="f44347ef7035824e74312bda85a5c1f33acab5d3" translate="yes" xml:space="preserve">
          <source>Shift,&amp;larr;,Left</source>
          <target state="translated">Shift,&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="389f8e25d83e1e1c83d311028f205dfb3a8af791" translate="yes" xml:space="preserve">
          <source>Shift,&amp;rarr;,Right</source>
          <target state="translated">Shift,&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="794fe0e411bbf424857358cfb3699f0985ef9bee" translate="yes" xml:space="preserve">
          <source>Shift,A</source>
          <target state="translated">Shift,A</target>
        </trans-unit>
        <trans-unit id="a4f7b08e9c36efe6a08eae925c49ef2f720086e4" translate="yes" xml:space="preserve">
          <source>Shift,D</source>
          <target state="translated">Shift,D</target>
        </trans-unit>
        <trans-unit id="42414c807cd9c1ab64d204f7113345e9c5f0a85a" translate="yes" xml:space="preserve">
          <source>Short options, like '&lt;code&gt;-a&lt;/code&gt;'. Short options are a single character long, are preceded by a single hyphen and may be grouped together (like '&lt;code&gt;-la&lt;/code&gt;', which is equivalent to '&lt;code&gt;-l -a&lt;/code&gt;'). Option arguments may be specified in the following parameter ('&lt;code&gt;-w 32&lt;/code&gt;') or by appending the option with the value ('&lt;code&gt;-w32&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-a&lt;/code&gt; ' 와 같은 짧은 옵션 . 짧은 옵션은 단일 문자 길이이며 앞에 하이픈이오고, 그룹화 될 수 있습니다 (예 : ' &lt;code&gt;-l -a&lt;/code&gt; ' 와 같은 ' &lt;code&gt;-la&lt;/code&gt; '). 옵션 인수는 다음 매개 변수 ( ' &lt;code&gt;-w 32&lt;/code&gt; ')에 지정하거나 옵션에 값 ( ' &lt;code&gt;-w32&lt;/code&gt; ') 을 추가하여 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b826892dea52d149aa790eeb614ebf8c6f5012a3" translate="yes" xml:space="preserve">
          <source>Short options, like &lt;code&gt;-a&lt;/code&gt;. Short options are a single character long, are preceded by a single hyphen and can be grouped together (like &lt;code&gt;-la&lt;/code&gt;, which is equivalent to &lt;code&gt;-l -a&lt;/code&gt;). Option arguments may be specified in the following parameter (&lt;code&gt;-w 32&lt;/code&gt;) or by appending the option with the value (&lt;code&gt;-w32&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214c488d368da8c81796e48eb7f6963ef7a93bff" translate="yes" xml:space="preserve">
          <source>Should you wish to uninstall fish, first ensure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="translated">물고기를 제거하려면 먼저 물고기가 껍질로 설정되어 있지 않은지 확인하십시오. 확실하지 않으면 &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; 실행 하십시오.</target>
        </trans-unit>
        <trans-unit id="aa028fe987fcdcfafee00c72a67c8ab786ef2286" translate="yes" xml:space="preserve">
          <source>Show all completions for &lt;code&gt;git&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a22b01fc547f4aefabc8c7a496313159dfc74d" translate="yes" xml:space="preserve">
          <source>Signal names are case insensitive and the &lt;code&gt;SIG&lt;/code&gt; prefix is optional.</source>
          <target state="translated">신호 이름은 대소 문자를 구분하지 않으며 &lt;code&gt;SIG&lt;/code&gt; 접두사는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="2339b49e18e4fa7fa63c25097d1c3cb05b3abf7a" translate="yes" xml:space="preserve">
          <source>Similar to bash, fish has Emacs and Vi editing modes. The default editing mode is Emacs. You can switch to Vi mode with &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; and switch back with &lt;code&gt;fish_default_key_bindings&lt;/code&gt;. You can also make your own key bindings by creating a function and setting $fish_key_bindings to its name. For example:</source>
          <target state="translated">bash와 마찬가지로 fish에는 Emacs 및 Vi 편집 모드가 있습니다. 기본 편집 모드는 Emacs입니다. 당신과 바이 모드로 전환 할 수 있습니다 &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; 과 함께 다시 전환 &lt;code&gt;fish_default_key_bindings&lt;/code&gt; . 함수를 만들고 $ fish_key_bindings를 이름으로 설정하여 고유 한 키 바인딩을 만들 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="841cba81f949103d830192d933a434ce626dfca6" translate="yes" xml:space="preserve">
          <source>Since fish 3.1 you can set an environment variable for just one command using the &lt;code&gt;key=value some command&lt;/code&gt; syntax, like in other shells. The two lines below behave identically - unlike other shells, fish will output &lt;code&gt;value&lt;/code&gt; both times:</source>
          <target state="translated">fish 3.1부터는 다른 셸 에서처럼 &lt;code&gt;key=value some command&lt;/code&gt; 구문을 사용하여 하나의 명령에 대한 환경 변수를 설정할 수 있습니다 . 아래 두 줄은 동일하게 작동합니다. 다른 껍데기와 달리 물고기는 두 번 모두 &lt;code&gt;value&lt;/code&gt; 을 출력 합니다 .</target>
        </trans-unit>
        <trans-unit id="7ae81f7020b13f6dbc6ef9ce845da695c08f53b8" translate="yes" xml:space="preserve">
          <source>Since scripts for shell commands can be written in many different languages, they need to carry information about what interpreter is needed to execute them: For this they are expected to have a first line, the shebang line, which names an executable for this purpose:</source>
          <target state="translated">쉘 명령에 대한 스크립트는 다양한 언어로 작성 될 수 있기 때문에 실행에 필요한 인터프리터에 대한 정보를 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="6591aa81ebfefa7f2a81cf6a8ddd00202ee95252" translate="yes" xml:space="preserve">
          <source>Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e5d1ac7ee2c4dbadd618ffa494ac83d1493abc" translate="yes" xml:space="preserve">
          <source>So you set a variable with &lt;code&gt;set&lt;/code&gt;, and use it with a &lt;code&gt;$&lt;/code&gt; and the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b8aecd3aaaa33e35d9724dfec4e61ddcb14189" translate="yes" xml:space="preserve">
          <source>So:</source>
          <target state="translated">So:</target>
        </trans-unit>
        <trans-unit id="530fce1c2ad1ce0277a5df96933c6fbf422dc856" translate="yes" xml:space="preserve">
          <source>Some OPTION_SPEC examples:</source>
          <target state="translated">일부 OPTION_SPEC 예 :</target>
        </trans-unit>
        <trans-unit id="30df5e6aa8dc13e79598637f63555c5942642d5c" translate="yes" xml:space="preserve">
          <source>Some bash variables and their closest fish equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6baccd4c71912ba57043465594b0cf17749be7" translate="yes" xml:space="preserve">
          <source>Some bindings are shared between emacs- and vi-mode because they aren't text editing bindings or because what Vi/Vim does for a particular key doesn't make sense for a shell.</source>
          <target state="translated">일부 바인딩은 텍스트 편집 바인딩이 아니거나 특정 키에 대한 Vi / Vim이 쉘에 적합하지 않기 때문에 emacs 및 vi 모드간에 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="425593164f34a70e7fd63371baa3a373bc2ecb38" translate="yes" xml:space="preserve">
          <source>Some characters can not be written directly on the command line. For these characters, so called escape sequences are provided. These are:</source>
          <target state="translated">일부 문자는 명령 행에 직접 쓸 수 없습니다. 이러한 문자에는 소위 이스케이프 시퀀스가 ​​제공됩니다. 이것들은:</target>
        </trans-unit>
        <trans-unit id="6e896b61b585149013fb98cf0696e1c05f9594f2" translate="yes" xml:space="preserve">
          <source>Some characters cannot be written directly on the command line. For these characters, so-called escape sequences are provided. These are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32cca7a190f9346b166b71a80738e3921998ba9" translate="yes" xml:space="preserve">
          <source>Some characters have special meaning to the shell. For example, an apostrophe &lt;code&gt;'&lt;/code&gt; disables expansion (see &lt;a href=&quot;#quotes&quot;&gt;Quotes&lt;/a&gt;). To tell the shell to treat these characters literally, escape them with a backslash. For example, the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a528e343afc3809db9c1142fa89d7ee4b8aa846e" translate="yes" xml:space="preserve">
          <source>Some colors for status symbols:</source>
          <target state="translated">상태 기호의 일부 색상 :</target>
        </trans-unit>
        <trans-unit id="6dd3509b210643ba6eefaffcdf24924a6a2790a7" translate="yes" xml:space="preserve">
          <source>Some common words</source>
          <target state="translated">일반적인 단어</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">몇 가지 예 :</target>
        </trans-unit>
        <trans-unit id="9a67d5493118a559656027def8dc4fcd0cc3974f" translate="yes" xml:space="preserve">
          <source>Some features include repetitions:</source>
          <target state="translated">일부 기능에는 반복이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4ded8c2bc928f23aa366efb17837e70948b9a888" translate="yes" xml:space="preserve">
          <source>Some of the special features of fish are:</source>
          <target state="translated">물고기의 특별한 특징은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d39624c87b3e78e02ed8dde71f696712e0710389" translate="yes" xml:space="preserve">
          <source>Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. &lt;code&gt;psub&lt;/code&gt; combined with a regular command substitution provides the same functionality.</source>
          <target state="translated">일부 쉘 (예 : ksh, bash)에는 프로세스 대체라고하는 명령 대체와 파이핑이 혼합 된 구문이 있습니다. 명령 대체와 매우 유사하게 명령 출력을 호출 명령으로 전송하는 데 사용되지만, 출력이 명령 행 인수를 통해 전송되는 것이 아니라 명명 된 파이프를 통해 전송되며, 명명 된 파이프의 파일 이름이 인수로 전송된다는 차이점이 있습니다. 호출 프로그램에. 일반 명령 대체와 결합 된 &lt;code&gt;psub&lt;/code&gt; 는 동일한 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="28861f1ca2bfa4eb42bfb98ba18be09e02df8f97" translate="yes" xml:space="preserve">
          <source>Some terminals use the &lt;code&gt;--bold&lt;/code&gt; escape sequence to switch to a brighter color set rather than increasing the weight of text.</source>
          <target state="translated">일부 터미널은 &lt;code&gt;--bold&lt;/code&gt; escape 시퀀스를 사용하여 텍스트 무게를 늘리지 않고 더 밝은 색상 세트로 전환합니다.</target>
        </trans-unit>
        <trans-unit id="81e4919181b85ff99cd6f65bd27d07c5ffe80e11" translate="yes" xml:space="preserve">
          <source>Some variables are only used in some modes, like when informative status is enabled:</source>
          <target state="translated">일부 변수는 정보 상태가 활성화 된 경우와 같이 일부 모드에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c4dd50f777b9a845d16edeb5ac29fc4998e7e176" translate="yes" xml:space="preserve">
          <source>Some variables, like &lt;code&gt;$PWD&lt;/code&gt;, only have one value. By convention, we talk about that variable's value, but we really mean its first (and only) value.</source>
          <target state="translated">&lt;code&gt;$PWD&lt;/code&gt; 와 같은 일부 변수 에는 하나의 값만 있습니다. 관례 적으로, 우리는 그 변수의 값에 대해 이야기하지만 실제로 첫 번째 (그리고 유일한) 값을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="07ce7b74abb2c830c303e793b3a670b92a1ed421" translate="yes" xml:space="preserve">
          <source>Sometimes a variable has no value because it is undefined or empty, and it expands to nothing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75df37faa6697f888a3b911f52d0f98c1e11ff65" translate="yes" xml:space="preserve">
          <source>Sometimes commands take numbers directly as options, like &lt;code&gt;foo -55&lt;/code&gt;. To allow this one option spec can have the &lt;code&gt;#&lt;/code&gt; modifier so that any integer will be understood as this flag, and the last number will be given as its value (as if &lt;code&gt;=&lt;/code&gt; was used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5495d80577d573036b499fb0c7884929ac34e4e" translate="yes" xml:space="preserve">
          <source>Sometimes features like &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, you can use quotes, either single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&quot;&lt;/code&gt;). Between single quotes, fish performs no expansions. Between double quotes, fish only performs &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;. No other kind of expansion (including &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt; or parameter expansion) is performed, and escape sequences (for example, &lt;code&gt;\n&lt;/code&gt;) are ignored. Within quotes, whitespace is not used to separate arguments, allowing quoted arguments to contain spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8709ff84c2c20f30aea0078b8e4ce461f5bca70c" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &amp;lsquo;&amp;rsquo;&lt;code&gt;(single quote) or&lt;/code&gt;&quot;&lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt;\'&lt;code&gt;, which escapes a single quote and&lt;/code&gt;\`, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">때로는 &lt;a href=&quot;#expand&quot;&gt;매개 변수 확장&lt;/a&gt; 및 &lt;a href=&quot;#escapes&quot;&gt;문자 이스케이프&lt;/a&gt; 와 같은 기능 이 방해를받습니다. 이 경우 사용자는 '' &lt;code&gt;(single quote) or&lt;/code&gt; &quot; &lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt; 중 하나를 따옴표로 묶을 수 있습니다 . 작은 따옴표로 묶은 문자열과 큰 따옴표로 묶인 문자열 사이에는 한 가지 중요한 차이점이 있습니다. 큰 따옴표로 묶인 문자열을 사용하는 경우 &amp;lt;a href = &quot;# expand-variable&quot;&amp;gt; 가변 확장 &amp;lt;/a&amp;gt;이 여전히 발생합니다. 그 외에는 다른 확장 (예 : &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt; 중괄 확장 &amp;lt;/a&amp;gt; 및 매개 변수 확장 포함)이 없습니다. 작은 따옴표 안에 허용되는 유일한 백 슬래시 이스케이프는 \ ' &lt;code&gt;, which escapes a single quote and&lt;/code&gt; 백 슬래시 기호를 이스케이프합니다. 따옴표로 인정 유일한 백 슬래시 이스케이프는 &lt;code&gt;\&quot;&lt;/code&gt; , 이중 인용 부호를 탈출하는 &lt;code&gt;\$&lt;/code&gt; 달러 문자를 이스케이프 이는, &lt;code&gt;\&lt;/code&gt; 마지막으로 백 슬래시 및 줄 바꿈 등을 삭제하는 줄 바꿈, 다음 &lt;code&gt;\\&lt;/code&gt; 백 슬래시를 탈출, 작은 따옴표는 큰 따옴표 안에 특별한 의미가 없으며 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="1c2aa93843ddd26ec4e00cb7588c5d09f093b293" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &lt;code&gt;'&lt;/code&gt; (single quote) or &lt;code&gt;&quot;&lt;/code&gt; (double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt; still takes place. Other than that, no other kind of expansion (including &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored.</source>
          <target state="translated">&lt;a href=&quot;#expand&quot;&gt;매개 변수 확장&lt;/a&gt; 및 &lt;a href=&quot;#escapes&quot;&gt;문자 이스케이프&lt;/a&gt; 와 같은 기능 이 방해가되는 경우가 있습니다. 이 경우 사용자는 &lt;code&gt;'&lt;/code&gt; (작은 따옴표) 또는 &lt;code&gt;&quot;&lt;/code&gt; (큰 따옴표) 중 하나 의 따옴표 안에 매개 변수를 작성할 수 있습니다 . 작은 따옴표와 큰 따옴표 사이에는 중요한 차이점이 있습니다. 큰 따옴표를 사용하는 경우 에도 &lt;a href=&quot;#expand-variable&quot;&gt;변수 확장&lt;/a&gt; 이 발생합니다. 그 외에는 다른 종류의 확장 ( &lt;a href=&quot;#expand-brace&quot;&gt;중괄호 확장&lt;/a&gt; 및 매개 변수 확장 포함)이 발생하지 않으며 매개 변수에 공백이 포함될 수 있으며 이스케이프 시퀀스는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="bbef0a968c656b4a5b1d7f9e05d2b88ddbbced0c" translate="yes" xml:space="preserve">
          <source>Sometimes it's necessary to access only some of the elements of a list, or some of the lines a command substitution outputs. Both allow this by providing a set of indices in square brackets.</source>
          <target state="translated">때로는 목록의 일부 요소 또는 명령 대체가 출력하는 일부 행에만 액세스해야하는 경우가 있습니다. 둘 다 대괄호 안에 인덱스 세트를 제공하여이를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="381611052ef691d56b1efd4f092108acac608354" translate="yes" xml:space="preserve">
          <source>Sometimes it's necessary to access only some of the elements of a list, or some of the lines a command substitution outputs. Both are possible in fish by writing a set of indices in brackets, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be615fbc68f9e7bd311c7f45b00fbeddf065488" translate="yes" xml:space="preserve">
          <source>Sometimes this may be unwanted, especially that tokens can disappear after expansion. In those cases, you should double-quote variables - &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757ebf561cb13f732876f1ea411a1e9e3f80de54" translate="yes" xml:space="preserve">
          <source>Sometimes you need to have a variable available to an external command, often as a setting. For example many programs like &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;man&lt;/code&gt; read the &lt;code&gt;$PAGER&lt;/code&gt; variable to figure out your preferred pager (the program that lets you scroll text). Other variables used like this include &lt;code&gt;$BROWSER&lt;/code&gt;, &lt;code&gt;$LANG&lt;/code&gt; (to configure your language) and &lt;code&gt;$PATH&lt;/code&gt;. You'll note these are written in ALLCAPS, but that's just a convention.</source>
          <target state="translated">때로는 설정으로 외부 명령에 사용할 수있는 변수가 필요합니다. 예를 들어 &lt;code&gt;git&lt;/code&gt; 또는 &lt;code&gt;man&lt;/code&gt; 과 같은 많은 프로그램 은 &lt;code&gt;$PAGER&lt;/code&gt; 변수를 읽고 선호하는 페이저 (텍스트를 스크롤 할 수있는 프로그램)를 알아냅니다. 이와 같이 사용되는 다른 변수로는 &lt;code&gt;$BROWSER&lt;/code&gt; , &lt;code&gt;$LANG&lt;/code&gt; (언어 구성 용) 및 &lt;code&gt;$PATH&lt;/code&gt; 있습니다. 이것들은 ALLCAPS로 작성되었지만 그것은 단지 관례 일뿐입니다.</target>
        </trans-unit>
        <trans-unit id="eebf6318c30de678887503010959c6f407c73301" translate="yes" xml:space="preserve">
          <source>Sometimes you need to validate the option values. For example, that it is a valid integer within a specific range, or an ip address, or something entirely different. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">때때로 옵션 값의 유효성을 검사해야합니다. 예를 들어, 특정 범위 내에서 유효한 정수, IP 주소 또는 완전히 다른 것입니다. &lt;code&gt;argparse&lt;/code&gt; 가 반환 된 후에 항상이 작업을 수행 할 수 있지만 임의의 fish 스크립트를 실행하여 &lt;code&gt;argparse&lt;/code&gt; 가 유효성 검사를 수행하도록 요청할 수도 있습니다 . 그렇게하려면 간단히 &lt;code&gt;!&lt;/code&gt; (느낌표) 그런 다음 실행할 피쉬 스크립트. 해당 코드가 실행되면 세 가지 변수가 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="56a5f493ab8c9264182d38baab070e353e607061" translate="yes" xml:space="preserve">
          <source>Sometimes you want to pass the output of a command to another command that only accepts files. If it's just one file, you can usually just pass it via a pipe, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9277421700b70459398cb0c365d578b50058cd1a" translate="yes" xml:space="preserve">
          <source>Sometimes, there is disagreement on the width. There are numerous causes and fixes for this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8c9b124d521027647b4f270cb2872798f9264e" translate="yes" xml:space="preserve">
          <source>Space</source>
          <target state="translated">Space</target>
        </trans-unit>
        <trans-unit id="95e14bad66e5b43a6bb7d92e4d00d181d18e3f47" translate="yes" xml:space="preserve">
          <source>Special Case: The Escape Character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5773d504847f59d4f28606344c751b42fcadfb09" translate="yes" xml:space="preserve">
          <source>Special Case: The escape Character</source>
          <target state="translated">특수 사례 : 탈출 캐릭터</target>
        </trans-unit>
        <trans-unit id="28dc52fcfc9145786fed85cff73226269b82a2c9" translate="yes" xml:space="preserve">
          <source>Special input functions</source>
          <target state="translated">특수 입력 기능</target>
        </trans-unit>
        <trans-unit id="a6c32b7763c1deccd93080cf33efdb324072a965" translate="yes" xml:space="preserve">
          <source>Special variables</source>
          <target state="translated">특수 변수</target>
        </trans-unit>
        <trans-unit id="8f06d35453aa3a9039c7bd098b2dc7f5924d81cb" translate="yes" xml:space="preserve">
          <source>Specific elements of a list can be selected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a234701d3553b3ee0fce9d93e7f64fadef5cac" translate="yes" xml:space="preserve">
          <source>Specifying your own completions is not difficult. To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt;, one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</source>
          <target state="translated">자신의 완성을 지정하는 것은 어렵지 않습니다. 완료를 지정하려면 &lt;code&gt;complete&lt;/code&gt; 명령을 사용하십시오 . &lt;code&gt;complete&lt;/code&gt; 는 완료 를 지정할 명령의 이름을 매개 변수로 사용합니다. 예를 들어, &lt;code&gt;myprog&lt;/code&gt; 프로그램에 완료를 추가 하려면 &lt;code&gt;complete -c myprog ...&lt;/code&gt; 로 완료 명령을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="097a1b990191aac51f47b5d492033829ffa1b1cb" translate="yes" xml:space="preserve">
          <source>Standard error (stderr) for writing errors and warnings. Defaults to writing to the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac6973627e50b5b3feef24cc873cca39ec65518" translate="yes" xml:space="preserve">
          <source>Standard error, FD 2, for writing errors and warnings, defaults to writing to the screen.</source>
          <target state="translated">오류 및 경고를 쓰는 표준 오류 FD 2는 기본적으로 화면에 쓰는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f0b1702763dda2703f7004c06fb0ee81c1751e99" translate="yes" xml:space="preserve">
          <source>Standard input (stdin) for reading. Defaults to reading from the keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8116e8803b0b4ccfe612ba1239d0a4c13eb0c484" translate="yes" xml:space="preserve">
          <source>Standard input, FD 0, for reading, defaults to reading from the keyboard.</source>
          <target state="translated">읽기 용 표준 입력 FD 0은 기본적으로 키보드를 통한 읽기입니다.</target>
        </trans-unit>
        <trans-unit id="c6f2c8146d25a95772c182950e401c6e7649f489" translate="yes" xml:space="preserve">
          <source>Standard output (stdout) for writing output. Defaults to writing to the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd08166eefe7793a02e0886b87576b866f11ba8d" translate="yes" xml:space="preserve">
          <source>Standard output, FD 1, for writing, defaults to writing to the screen.</source>
          <target state="translated">쓰기 용 표준 출력 FD 1은 기본적으로 화면에 쓰기로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="8f0c324bc7ae0630cb203b31d62e67e8a3bc6740" translate="yes" xml:space="preserve">
          <source>Starting and Exiting</source>
          <target state="translated">시작 및 종료</target>
        </trans-unit>
        <trans-unit id="806c8aeb75c45b416dcfcd215f384af2b2abda22" translate="yes" xml:space="preserve">
          <source>Startup (Where's .bashrc?)</source>
          <target state="translated">시작 (.bashrc는 어디에 있습니까?)</target>
        </trans-unit>
        <trans-unit id="d9d8d313fdc1a560ea8caf500b990c2077839155" translate="yes" xml:space="preserve">
          <source>Startup time and memory usage is improved, etc.</source>
          <target state="translated">시작 시간 및 메모리 사용량 등이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="411f94c6ca34e4478bca225615707da562686a1d" translate="yes" xml:space="preserve">
          <source>String manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cfed68ddc06bae90fd47f85fdeed65b5766e4e" translate="yes" xml:space="preserve">
          <source>Support for italics, dim, reverse, and other modes is not guaranteed in all terminal emulators. Fish attempts to determine if the terminal supports these modes even if the terminfo database may not be up-to-date.</source>
          <target state="translated">기울임 꼴, 희미한, 반전 및 기타 모드에 대한 지원이 모든 터미널 에뮬레이터에서 보장되는 것은 아닙니다. fish는 terminfo 데이터베이스가 최신이 아닌 경우에도 터미널이 이러한 모드를 지원하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d269dff6a5e6def876fa34f03bd1eb013ca33acd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are documented in the manual page for each command. Some switches are common to most command though, for example '&lt;code&gt;--help&lt;/code&gt;' will usually display a help text, '&lt;code&gt;-i&lt;/code&gt;' will often turn on interactive prompting before taking action, while '&lt;code&gt;-f&lt;/code&gt;' will turn it off.</source>
          <target state="translated">스위치는 명령마다 다르며 각 명령에 대한 설명서 페이지에 설명되어 있습니다. 예를 들어 ' &lt;code&gt;--help&lt;/code&gt; '는 일반적으로 도움말 텍스트를 표시하고 ' &lt;code&gt;-i&lt;/code&gt; '는 종종 대화 형 프롬프트를 표시하고 ' &lt;code&gt;-f&lt;/code&gt; '는 해제합니다.</target>
        </trans-unit>
        <trans-unit id="51354aa978a2468b119f16e69269a00d4d13fefd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are usually documented on a command's manual page. There are some switches, however, that are common to most commands. For example, &lt;code&gt;--help&lt;/code&gt; will usually display a help text, &lt;code&gt;--version&lt;/code&gt; will usually display the command version, and &lt;code&gt;-i&lt;/code&gt; will often turn on interactive prompting before taking action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5eb6066faf764d428231e3c214c4d783bbf5bcc" translate="yes" xml:space="preserve">
          <source>Switching to fish?</source>
          <target state="translated">물고기로 전환?</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="d27b4fd727666f53e797902bf47550ba0a21184a" translate="yes" xml:space="preserve">
          <source>Syntax Highlighting</source>
          <target state="translated">구문 강조</target>
        </trans-unit>
        <trans-unit id="aaeb56c070a1b1a7f285d0c48b5a3e8940ab79cb" translate="yes" xml:space="preserve">
          <source>Syntax Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037fceb004812e2c76fd4ee125e5787960e7ee91" translate="yes" xml:space="preserve">
          <source>Syntax highlighting</source>
          <target state="translated">구문 강조</target>
        </trans-unit>
        <trans-unit id="a991dd19e2e4193f19d18e3b5e051fc3eb5c463d" translate="yes" xml:space="preserve">
          <source>Syntax highlighting variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418e9ee62ad6b7ba7264fdf5d0ee995e2e351045" translate="yes" xml:space="preserve">
          <source>Syntax overview</source>
          <target state="translated">구문 개요</target>
        </trans-unit>
        <trans-unit id="648056b93fe4233586db207ccd2bb7c37a24ed26" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">관리자가 POSIX 스타일 셸의 &lt;code&gt;/etc/profile&lt;/code&gt; 과 유사하게 시스템의 모든 사용자에 대해 실행해야하는 초기화를 &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (일반적으로 &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; )에 포함 할 수있는 시스템 전체 구성 파일 .</target>
        </trans-unit>
        <trans-unit id="afcc6a38c449b540b7b14d03d1b1f6092ebcf158" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;);</source>
          <target state="translated">시스템 전체 구성 파일-관리자가 시스템의 모든 사용자에 대해 POSIX 스타일 쉘의 &lt;code&gt;/etc/profile&lt;/code&gt; 과 유사하게 &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (일반적으로 &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; ) 에서 실행해야하는 초기화를 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="1870d395ae4bdd7644d2246d47b66d22f565347b" translate="yes" xml:space="preserve">
          <source>Tab Completion</source>
          <target state="translated">탭 완성</target>
        </trans-unit>
        <trans-unit id="87564ea1bf094f88395489e37aab98a53d8a3438" translate="yes" xml:space="preserve">
          <source>Tab Completions</source>
          <target state="translated">탭 완성</target>
        </trans-unit>
        <trans-unit id="eb8b89e8c468a2f2b0bf3f62ac7419a0270f3b4b" translate="yes" xml:space="preserve">
          <source>Tab completion</source>
          <target state="translated">탭 완성</target>
        </trans-unit>
        <trans-unit id="2c4aae4ff3b4716ef2c5982376317648c9a9138a" translate="yes" xml:space="preserve">
          <source>Tab completion is a time saving feature of any modern shell. When you type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea2b2cc91429ba0736ea7b5a4dc7f2208abf174" translate="yes" xml:space="preserve">
          <source>Tab completion is one of the most time saving features of any modern shell. By tapping the tab key, the user asks &lt;code&gt;fish&lt;/code&gt; to guess the rest of the command or parameter that the user is currently typing. If &lt;code&gt;fish&lt;/code&gt; can only find one possible completion, &lt;code&gt;fish&lt;/code&gt; will write it out. If there is more than one completion, &lt;code&gt;fish&lt;/code&gt; will write out the longest prefix that all completions have in common. If the completions differ on the first character, a list of all possible completions is printed. The list features descriptions of the completions and if the list doesn't fit the screen, it is scrollable by using the arrow keys, the page up/page down keys, the tab key or the space bar.</source>
          <target state="translated">탭 완성은 최신 쉘의 가장 시간 절약 기능 중 하나입니다. 탭 키를 누르면 사용자는 &lt;code&gt;fish&lt;/code&gt; 에게 사용자가 현재 입력하고있는 나머지 명령 또는 매개 변수를 추측 하도록 요청 합니다. 경우 &lt;code&gt;fish&lt;/code&gt; 단지 하나의 가능한 완료를 찾을 수 있습니다, &lt;code&gt;fish&lt;/code&gt; 를 기록합니다. 하나 이상의 완료가있는 경우, &lt;code&gt;fish&lt;/code&gt; 는 모든 완료가 공통적으로 가지고있는 가장 긴 접두사를 작성합니다. 완료가 첫 번째 문자에서 다른 경우 가능한 모든 완료 목록이 인쇄됩니다. 이 목록에는 완료에 대한 설명이 있으며 목록이 화면에 맞지 않으면 화살표 키, 페이지 위로 / 페이지 아래로 키, 탭 키 또는 스페이스 바를 사용하여 스크롤 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44e924f5f1b607dd0e4feccbc1d4d898f052a887" translate="yes" xml:space="preserve">
          <source>Tacklebox</source>
          <target state="translated">Tacklebox</target>
        </trans-unit>
        <trans-unit id="d1f6becf050c6a3d481d711b08a3cf1e80f4a45f" translate="yes" xml:space="preserve">
          <source>Technically, unix allows filenames with newlines, and this splits the &lt;code&gt;find&lt;/code&gt; output on newlines. If you want to avoid that, use find's &lt;code&gt;-print0&lt;/code&gt; option and &lt;a href=&quot;cmds/string#cmd-string-split0&quot;&gt;string split0&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c7839574383a9eaa3d82c610c455446f6121c0" translate="yes" xml:space="preserve">
          <source>Terminal Capability Detection</source>
          <target state="translated">터미널 기능 감지</target>
        </trans-unit>
        <trans-unit id="066a694f7543574dbbd89c308f8361b862e2f6dc" translate="yes" xml:space="preserve">
          <source>Terminal Limitations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="f4db73f91ff31a9cc26abcce871824e94dd4c380" translate="yes" xml:space="preserve">
          <source>Test (&lt;code&gt;test&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;[[&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54b1fa82b8ecdc3fb07f7f9d29066e5997831e6" translate="yes" xml:space="preserve">
          <source>Tests the expression given and sets the exit status to 0 if true, and 1 if false. An expression is made up of one or more operators and their arguments.</source>
          <target state="translated">주어진 표현식을 테스트하고 true이면 종료 상태를 0으로 설정하고 false이면 1로 설정합니다. 식은 하나 이상의 연산자와 해당 인수로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="6b1fc2e3b816bc95de3d9b1753ab9aa1375ff7b8" translate="yes" xml:space="preserve">
          <source>That means if you run</source>
          <target state="translated">그것은 당신이 실행하면 의미</target>
        </trans-unit>
        <trans-unit id="1524134a04c0ceb49ab53ac5b3cc51239e9fa5c2" translate="yes" xml:space="preserve">
          <source>That means that commands like the above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0037e5dc6a5265afc3461906162967fa82bca2b" translate="yes" xml:space="preserve">
          <source>That means the argument will only be used for the option if you use it like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf65aaba6f80f192071085d55edadb89cb69226" translate="yes" xml:space="preserve">
          <source>That's the &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt;. It is displayed by default when you've activated vi mode using &lt;code&gt;fish_vi_key_bindings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff31576d4415b08aa68ec0f43f4c2956d9b998f4" translate="yes" xml:space="preserve">
          <source>The &quot;locale&quot; of a program is its set of language and regional settings. In UNIX, there are a few separate variables to control separate things - &lt;code&gt;LC_CTYPE&lt;/code&gt; defines the text encoding while &lt;code&gt;LC_TIME&lt;/code&gt; defines the time format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0484d8ce9d411754518c1cad07f4ac9deac98c" translate="yes" xml:space="preserve">
          <source>The &quot;~/.config&quot; part of this can be set via $XDG_CONFIG_HOME, that's just the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba0cf9aceb2fa7adface85cb83d889d4900b6d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cmds/functions#cmd-functions&quot;&gt;functions&lt;/a&gt; builtin can show a function's current definition (and &lt;a href=&quot;cmds/type#cmd-type&quot;&gt;type&lt;/a&gt; will also do if given a function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c95ce6c80c581cf82b67c951e68df6b74a32a98" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb80306f9b817b1c0fb037539e70c68832e042f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;GitHub page&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92160f08bddffe06e4520887bdd5645514caf0af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;project GitHub page&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;프로젝트 GitHub의 페이지&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da142e6cb5a45841f62249b274bcc36ba693563d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;printf#cmd-printf&quot;&gt;printf&lt;/a&gt; command can do simple padding, for example &lt;code&gt;printf %10s\n&lt;/code&gt; works like &lt;code&gt;string pad -w10&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b65dd2b4e53dcf4e58c496b2ca6829ad905125" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#&lt;/code&gt; must follow the short flag letter (if any), and other modifiers like &lt;code&gt;=&lt;/code&gt; are not allowed, except for &lt;code&gt;-&lt;/code&gt; (for backwards compatibility):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc348ddd7ad603b4b7e3a6d1134042f24b0ee0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$&lt;/code&gt; symbol can also be used multiple times, as a kind of &quot;dereference&quot; operator (the &lt;code&gt;*&lt;/code&gt; in C or C++), like in the following code:</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; 의 심볼은 &quot;간접 참조&quot;연산자 (의 일종으로 여러 번 사용할 수 &lt;code&gt;*&lt;/code&gt; 다음 코드 등 C 또는 C ++에서) :</target>
        </trans-unit>
        <trans-unit id="7e4fc8fc89e59cd9ece4a187b16054d89db8031c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; operators for comparing strings are not implemented.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 와 &lt;code&gt;&amp;gt;&lt;/code&gt; 문자열을 비교하기위한 연산자는 구현되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="65fe6102162982a331ea3f92362fbdf8528333d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; argument is required. You do not have to include any arguments after the &lt;code&gt;--&lt;/code&gt; but you must include the &lt;code&gt;--&lt;/code&gt;. For example, this is acceptable:</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 인수는 필수입니다. 당신은 후 인수 포함 할 필요가 없습니다 &lt;code&gt;--&lt;/code&gt; 하지만 당신은 포함되어야합니다 &lt;code&gt;--&lt;/code&gt; . 예를 들어, 이것은 허용됩니다 :</target>
        </trans-unit>
        <trans-unit id="0c906c7f83627c97b083a6eb5c63248805d8c516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; here stops &lt;code&gt;contains&lt;/code&gt; from treating &lt;code&gt;-q&lt;/code&gt; to an option to itself. Instead it treats it as a normal string to check.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 여기 정지는 &lt;code&gt;contains&lt;/code&gt; 치료에서 &lt;code&gt;-q&lt;/code&gt; 자체에 대한 옵션. 대신 확인하기 위해 일반 문자열로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="759c9b9de6e7b693bbc543cee2edb183ec65e7a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-n&lt;/code&gt; is so empty elements are removed like POSIX shells would do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88d441c07c1b7086b4b120f0e1995c32e1789db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-q&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-P&lt;/code&gt; flags (and their long flag aliases) are mutually exclusive. Only one can be specified at a time.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; , &lt;code&gt;-p&lt;/code&gt; , &lt;code&gt;-t&lt;/code&gt; 및 &lt;code&gt;-P&lt;/code&gt; 플래그 (그리고 그들의 긴 플래그 별칭)는 상호 배타적입니다. 한 번에 하나만 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59f023c5b3800bfdb8a65685dca44b899595aa05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; options causes the specified command to inherit completions from another command, &quot;wrapping&quot; the other command. The wrapping command can also have additional completions. A command can wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C's completions. Wrapping can be removed using the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; options. Wrapping only works for completions specified with &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; and are ignored when specifying completions with &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c58a8949ca637e3657d904f90d0683f9b8a4548" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; options causes the specified command to inherit completions from another command. The inheriting command is said to &quot;wrap&quot; the inherited command. The wrapping command may have its own completions in addition to inherited ones. A command may wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C's completions. Wrapping can be removed using the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; options. Note that wrapping only works for completions specified with &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; and are ignored when specifying completions with &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; 또는 &lt;code&gt;--wraps&lt;/code&gt; 옵션은 다른 명령에서 상속 완료에 지정된 명령을 발생합니다. 상속 명령은 상속 된 명령을 &quot;랩핑&quot;한다고합니다. 줄 바꿈 명령은 상속 된 것 외에도 고유 한 완료를 가질 수 있습니다. 명령이 여러 명령을 랩핑 할 수 있으며 랩핑은 전 이적입니다. A가 B를 랩하고 B가 C를 랩하면 A는 모든 C의 완료를 자동으로 상속합니다. 랩핑은 &lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 옵션을 사용하여 제거 할 수 있습니다. 랩핑은 &lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--command&lt;/code&gt; 로 지정된 완료에 대해서만 작동 하며 &lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--path&lt;/code&gt; 로 완료를 지정할 때는 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="c3779bf48914bcae0cdcc953ecc413edee9ed2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VARNAME&lt;/code&gt; was local to the for block in releases prior to 3.0.0. This means that if you did something like this:</source>
          <target state="translated">&lt;code&gt;VARNAME&lt;/code&gt; 은 이전 3.0.0에 릴리스 블록의 로컬이었다. 이것은 당신이 다음과 같은 것을했다면 의미합니다 :</target>
        </trans-unit>
        <trans-unit id="a5fbe884c0818c473736504e3a3f15c774e6b13f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; commands show installed or installable packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3409d273e3db5ef8ddc4ea273fbbb872d656c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; commands use all installed packages as completions.</source>
          <target state="translated">&lt;code&gt;apt-get&lt;/code&gt; 을 , &lt;code&gt;rpm&lt;/code&gt; 및 &lt;code&gt;yum&lt;/code&gt; 명령은 완료로 설치된 모든 패키지를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a176ce24ca6419e62567415a12b97aacd6da428c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;echo $flounder &amp;gt;&amp;amp;&lt;/code&gt; is the first process, &lt;code&gt;less&lt;/code&gt; the second and &lt;code&gt;and echo $catfish&lt;/code&gt; the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c885ad47f98ee1d2fa7d61aaf2be5914055c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end&lt;/code&gt; command does not change the current exit status. Instead, the status after it will be the status returned by the most recent command.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; 명령은 현재 종료 상태를 변경하지 않습니다. 대신, 그 이후의 상태는 가장 최근의 명령에 의해 리턴 된 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="cd7f0141ffadda545e17fb22c15ec53f8466fcc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a &lt;a href=&quot;#history-search&quot;&gt;searchable history&lt;/a&gt; and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 편집기 기능은 복사 및 붙여 넣기 &lt;a href=&quot;#history-search&quot;&gt;검색 히스토리&lt;/a&gt; 특수 키보드 단축키에 바인딩 할 수 있으며, 많은 편집기 기능을.</target>
        </trans-unit>
        <trans-unit id="3cb7ec726c85b79feb29910ee5250baa8513a66f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a searchable history and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 편집기 기능, 특수 키보드 단축키에 바인딩 할 수있는 검색 역사와 다양한 편집 기능을 복사하여 붙여 넣습니다.</target>
        </trans-unit>
        <trans-unit id="c64f6cc8af3f868e2009e8fec92b3aa89f2848f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; implementation of &lt;code&gt;ulimit&lt;/code&gt; should behave identically to the implementation in bash, except for these differences:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 의 &lt;code&gt;fish&lt;/code&gt; 구현은 다음 차이점을 제외하고 bash의 구현과 동일하게 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="07e5eef3af7a89848f46c551cd20fd456ad73c6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_git_prompt&lt;/code&gt; function displays information about the current git repository, if any.</source>
          <target state="translated">&lt;code&gt;fish_git_prompt&lt;/code&gt; 현재 자식 저장소에 대한 기능 정보를 표시합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="129eb955355c8f7758d77f2cac61f370f6205e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_mode_prompt&lt;/code&gt; function outputs the mode indicator for use in vi-mode.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; 함수 VI 모드에서 사용하기위한 모드 지시자를 출력한다.</target>
        </trans-unit>
        <trans-unit id="13e49a3e07554395afbb4e275a3cd442c1c677ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca964de959867d14ed3a9f8b9974f6eaea7d9c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_title&lt;/code&gt; function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b7c153dde9c57207852c321a7476ca5435e545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_vcs_prompt&lt;/code&gt; function displays information about the current version control system (VCS) repository, if any.</source>
          <target state="translated">&lt;code&gt;fish_vcs_prompt&lt;/code&gt; 현재 버전 제어 시스템 (VCS) 저장소에 대한 기능 정보를 표시있는 경우.</target>
        </trans-unit>
        <trans-unit id="ca816a872a077d36b73d0af3eade298496b9cd5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_vi_cursor&lt;/code&gt; function will be used to change the cursor's shape depending on the mode in supported terminals. The following snippet can be used to manually configure cursors after enabling vi-mode:</source>
          <target state="translated">&lt;code&gt;fish_vi_cursor&lt;/code&gt; 의 기능을 지원하는 단말의 모드에 따라, 커서의 형상을 변경하는 데 사용된다. 다음 스 니펫을 사용하여 vi- 모드를 활성화 한 후 커서를 수동으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67113321177587b92e33339a6cdbfbb714ba38b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &amp;lsquo;printf &amp;rsquo;d' &quot;102.234&quot;` produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수는 주어진 모든 인수를 변환하는 데 필요한만큼 여러 번 다시 사용됩니다. 지정된 인수에 형식 지정자가 적합하지 않으면 오류가 인쇄됩니다. 예를 들어 'printf'd ' &quot;102.234&quot;`는 &quot;102.234&quot;를 정수로 형식화 할 수 없으므로 오류를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="fa359d649d24e5335af9a0db3ad3244dff9a6be4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &lt;code&gt;printf '%d' &quot;102.234&quot;&lt;/code&gt; produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수는 주어진 모든 인수를 변환하는 데 필요한만큼 여러 번 다시 사용됩니다. 형식 지정자가 주어진 인수에 적합하지 않으면 오류가 인쇄됩니다. 예를 들어 &lt;code&gt;printf '%d' &quot;102.234&quot;&lt;/code&gt; 는 &quot;102.234&quot;를 정수로 형식화 할 수 없으므로 오류를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b1fe28da968ad020cc831ee02008bdf7ad25078a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. So &lt;code&gt;printf %s\n flounder catfish clownfish shark&lt;/code&gt; will print four lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f23a465dd8d76eebf980544d18d2de2601f2be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make&lt;/code&gt; program uses all targets in the Makefile in the current directory as completions.</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; 프로그램은 완료로 현재 디렉토리에있는 Makefile의 모든 대상을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="08ddda0f4e3d5dbda6ef1fb82291b1b27f800ddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; command uses all mount points specified in fstab as completions.</source>
          <target state="translated">은 &lt;code&gt;mount&lt;/code&gt; 명령을 사용하는 모든 완료로 fstab 파일에 지정된 마운트 지점.</target>
        </trans-unit>
        <trans-unit id="bac670339d33af9a7bab7a0aa6c9bff4de41f823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; command uses the MIME type database and the &lt;code&gt;.desktop&lt;/code&gt; files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non-standard location. Consider &lt;a href=&quot;index#more-help&quot;&gt;asking for more help&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 명령은 MIME 타입 데이터베이스와 사용 &lt;code&gt;.desktop&lt;/code&gt; 파일 형식 및 기본 작업을 식별하는 그놈과 KDE에 의해 사용되는 파일. 이러한 환경 중 하나 이상이 설치되었지만 open 명령이 작동하지 않는 경우 관련 파일이 비표준 위치에 설치되었음을 의미합니다. &lt;a href=&quot;index#more-help&quot;&gt;도움을 요청&lt;/a&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="671a2f0e6604938b59263b838275bea0e131dc63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; command uses the MIME type database and the &lt;code&gt;.desktop&lt;/code&gt; files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non-standard location. Consider &lt;a href=&quot;index#more-help&quot;&gt;asking for more help&lt;/a&gt;. .. _faq-ssh-interactive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee971b433f3902a987e68857661a14613f57897" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;or return&lt;/code&gt; means that the function returns &lt;code&gt;argparse&lt;/code&gt;'s status if it failed, so if it goes on &lt;code&gt;argparse&lt;/code&gt; succeeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041e0c82c73f6cce25f8c5fa37958883f066722d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt; and makes it the current working directory. &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12db9bbc519582e7296e06534b51717da7e239b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;#popd&quot;&gt;&lt;code&gt;popd&lt;/code&gt;&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 기능이 추가 &lt;code&gt;DIRECTORY&lt;/code&gt; 디렉토리 스택의 상단과 현재 작업 디렉토리한다. &lt;a href=&quot;#popd&quot;&gt; &lt;code&gt;popd&lt;/code&gt; &lt;/a&gt; 는 그것을 꺼내어 원래 디렉토리로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="232591d70cc81d9e2252f02a7f0ab108b8f2be53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 기능이 추가 &lt;code&gt;DIRECTORY&lt;/code&gt; 디렉토리 스택의 상단과 현재 작업 디렉토리한다. &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt; 는 그것을 꺼내고 원래 디렉토리로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="a826eafcc5f8080c789ef8d78318660a9727e115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; command supported the &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;--mode-name&lt;/code&gt; flags in fish versions prior to 2.7.0 to specify an alternative read history file. Those flags are now deprecated and ignored. Instead, set the &lt;code&gt;fish_history&lt;/code&gt; variable to specify a history session ID. That will affect both the &lt;code&gt;read&lt;/code&gt; history file and the fish command history file. You can set it to an empty string to specify that no history should be read or written. This is useful for presentations where you do not want possibly private or sensitive history to be exposed to the audience but do want history relevant to the presentation to be available.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 명령은 지원 &lt;code&gt;-m&lt;/code&gt; 및 &lt;code&gt;--mode-name&lt;/code&gt; 대신 읽기 기록 파일을 지정하는 물고기의 이전 버전은 2.7.0로의 플래그. 이러한 플래그는 더 이상 사용되지 않으며 무시됩니다. 대신 &lt;code&gt;fish_history&lt;/code&gt; 변수를 설정하여 기록 세션 ID를 지정하십시오. 이는 &lt;code&gt;read&lt;/code&gt; 히스토리 파일 및 피쉬 명령 히스토리 파일 모두에 영향을 미칩니다 . 기록을 읽거나 쓰지 않도록 지정하기 위해 빈 문자열로 설정할 수 있습니다. 비공개 또는 민감한 기록을 청중에게 노출시키지 않고 프리젠 테이션과 관련된 기록을 사용할 수있는 프리젠 테이션에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7fcdb96d7e5417d911e99a0401becd905a30865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rpm&lt;/code&gt; command has several different modes. If the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; flag has been specified, &lt;code&gt;rpm&lt;/code&gt; should delete one or more packages, in which case several switches related to deleting packages are valid, like the &lt;code&gt;nodeps&lt;/code&gt; switch.</source>
          <target state="translated">&lt;code&gt;rpm&lt;/code&gt; 명령은 여러 가지 모드가 있습니다. 는 IF &lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 플래그가 지정되어, &lt;code&gt;rpm&lt;/code&gt; 같은 패키지를 삭제와 관련된 경우 여러 스위치, 유효있는 하나 개 이상의 패키지, 삭제해야합니다 &lt;code&gt;nodeps&lt;/code&gt; 이 스위치를.</target>
        </trans-unit>
        <trans-unit id="a790e8c78ea9f158b99ff23d36fc572c40897097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; command above used quotes to ensure that &lt;code&gt;Mister Noodle&lt;/code&gt; was one argument. If it had been two arguments, then &lt;code&gt;name&lt;/code&gt; would have been a list of length 2. In fact, all variables in &lt;code&gt;fish&lt;/code&gt; are really lists, that can contain any number of values, or none at all.</source>
          <target state="translated">위 의 &lt;code&gt;set&lt;/code&gt; 명령은 따옴표를 사용하여 &lt;code&gt;Mister Noodle&lt;/code&gt; 이 하나의 논증 임을 확인했습니다 . 인수가 두 개인 경우 &lt;code&gt;name&lt;/code&gt; 은 길이 2의 목록이되었을 것입니다. 실제로, &lt;code&gt;fish&lt;/code&gt; 모든 변수 는 실제로는 목록이며, 값을 포함하거나 전혀 포함하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fca0ef2366ca80fbd9b2829024455a0201bdf5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; command above used quotes to ensure that &lt;code&gt;Mister Noodle&lt;/code&gt; was one argument. If it had been two arguments, then &lt;code&gt;name&lt;/code&gt; would have been a list of length 2. In fact, all variables in fish are really lists, that can contain any number of values, or none at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4c01874451687405926cb86a3846c32a777675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and lack color information for terminals that support it. Fish assumes that all terminals can use the [ANSI X3.64](&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;) escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 의 명령은 터미널 무엇가 사용에 터미널 색상을 변경하는 방법을 찾기 위해 terminfo 데이터베이스를 사용합니다. 일부 시스템에는 오래되고 불완전한 terminfo 데이터베이스가 있으며이를 지원하는 터미널에 대한 색상 정보가 부족합니다. Fish는 terminfo 정의가 16 미만의 색상이 지원되지 않음을 나타내는 경우 모든 터미널이 [ANSI X3.64] ( &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt; ) 이스케이프 시퀀스를 사용할 수 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="b8a21bdde776c698d3de37f05072833e8526edd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and may lack color information for terminals that support it. Fish will assume that all terminals can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt; escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 의 명령은 터미널 무엇가 사용에 터미널 색상을 변경하는 방법을 찾기 위해 terminfo 데이터베이스를 사용합니다. 일부 시스템에는 오래되고 불완전한 terminfo 데이터베이스가 있으며이를 지원하는 터미널에 대한 색상 정보가 부족할 수 있습니다. fish는 terminfo 정의가 16 미만의 색상이 지원되지 않음을 나타내면 모든 터미널이 &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt; 이스케이프 시퀀스를 사용할 수 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="570ae270bf32027068dbc7611cc21eacc745b07d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssh&lt;/code&gt; command uses all hosts that are stored in the known_hosts file as completions. (See the ssh documentation for more information)</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; 명령은 완료로에서 known_hosts 파일에 저장된 모든 호스트를 사용합니다. (자세한 내용은 ssh 설명서를 참조하십시오)</target>
        </trans-unit>
        <trans-unit id="8edee39da4cf69aebe1d3841fdc9bb385090a9e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command shows the users on the system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c28ed2787aacc681a7fe21c43d77f6911bb6d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command takes any username as an argument. Usernames are given as the first colon-separated field in the file /etc/passwd. This can be specified as:</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; 명령은 인수로 어떤 사용자 이름을합니다. 사용자 이름은 / etc / passwd 파일에서 첫 번째 콜론으로 구분 된 필드로 제공됩니다. 다음과 같이 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0c2e5dc87ea547203543a3113293b01834dc317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command uses all users on the system as completions.</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; 명령은 완료로 시스템의 모든 사용자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1694f288fba89e086b666fb0fa0aa6f5ed0e92d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 명령 스트링의 값에 따라 명령의 가능한 많은 블록들 중 하나를 실행하기 위해 사용된다. 자세한 내용은 &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;스위치&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac2d93e5ce9c99380286aea119eb1c4d811d5e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;commands#switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 명령 스트링의 값에 따라 명령의 가능한 많은 블록들 중 하나를 실행하기 위해 사용된다. 자세한 내용은 &lt;a href=&quot;commands#switch&quot;&gt;스위치&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="47ad27700014770c354049370500a3fdcb1e0c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone &lt;code&gt;~&lt;/code&gt;, or a &lt;code&gt;~&lt;/code&gt; followed by a slash, is expanded into the home directory of the process owner.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; 사용자 이름 뒤에 매개 변수의 시작 부분에 (물결표) 문자는 지정된 사용자의 홈 디렉토리로 확장됩니다. 고독한 &lt;code&gt;~&lt;/code&gt; 또는 &lt;code&gt;~&lt;/code&gt; 와 슬래시가 프로세스 소유자의 홈 디렉토리로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="08bf891aa7a0590874350d3510cb5b3148d6f765" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone &lt;code&gt;~&lt;/code&gt;, or a &lt;code&gt;~&lt;/code&gt; followed by a slash, is expanded into the home directory of the process owner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265a9c81a69231c01219582e938c14d98984c415" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;br&lt;/em&gt;- (as in 'bright') forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray.</source>
          <target state="translated">&lt;em&gt;BR&lt;/em&gt; - 형태 ( &quot;밝은&quot;에서와 같이)의 전체 휘도가 많은 단자에 8 개의 표준 색 휘도의 변종이다. &lt;em&gt;brblack&lt;/em&gt; 은 &lt;em&gt;검정&lt;/em&gt; 보다 밝기가 더 높습니다 .</target>
        </trans-unit>
        <trans-unit id="fa7f7b1a4ad16744a0f606de485b9dcac150e6e6" translate="yes" xml:space="preserve">
          <source>The IRC channel, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bc67c4cc6d1500fe78dbf824dcd5a05daabcef" translate="yes" xml:space="preserve">
          <source>The Internet Relay Chat channel, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</source>
          <target state="translated">인터넷 중계 채팅 채널, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38912f78e93626e5fa47b637ba81937a676623d5" translate="yes" xml:space="preserve">
          <source>The advantage is that you don't have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. (Note: you should NOT add this line to &lt;code&gt;config.fish&lt;/code&gt;. If you do, the variable will get longer each time you run fish!)</source>
          <target state="translated">장점은 파일을 정리할 필요가 없다는 것입니다. 명령 줄에서 한 번만 실행하면 현재 세션과 모든 향후 인스턴스에도 영향을 미칩니다. (참고 :이 줄을 &lt;code&gt;config.fish&lt;/code&gt; 에 추가하면 안됩니다 . 그렇게하면 물고기를 실행할 때마다 변수가 더 길어집니다!)</target>
        </trans-unit>
        <trans-unit id="92a877b936875a7b135f437c779582ab970c90cc" translate="yes" xml:space="preserve">
          <source>The advantage is that you don't have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. You can also add this line to &lt;a href=&quot;#tut-config&quot;&gt;config.fish&lt;/a&gt;, as it only adds the component if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5b6fa2b60fb7b30f834fa877a85006d71c86dd" translate="yes" xml:space="preserve">
          <source>The block can be removed. Any events which triggered while the block was in place will then be delivered.</source>
          <target state="translated">블록을 제거 할 수 있습니다. 블록이있는 동안 트리거 된 모든 이벤트가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="bb7debcb6ad4bd52a3602c3c576ba4ce44391ac4" translate="yes" xml:space="preserve">
          <source>The block is unconditionally executed. &lt;code&gt;begin; ...; end&lt;/code&gt; is equivalent to &lt;code&gt;if true; ...; end&lt;/code&gt;.</source>
          <target state="translated">블록은 무조건 실행됩니다. &lt;code&gt;begin; ...; end&lt;/code&gt; 는 &lt;code&gt;if true; ...; end&lt;/code&gt; 와 같습니다 . ...; 끝 .</target>
        </trans-unit>
        <trans-unit id="b145eb51c1a7060a787ad20b1384352c3498a3fe" translate="yes" xml:space="preserve">
          <source>The character has an &quot;ambiguous&quot; width and fish thinks that means a width of X while your terminal thinks it's Y. In this case you either need to change your terminal's configuration or set $fish_ambiguous_width to the correct value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11122cc3bb4128a26d73e8038e6c49944b1ac492" translate="yes" xml:space="preserve">
          <source>The character is an emoji and the host system only supports Unicode 8, while you are running the terminal on a system that uses Unicode &amp;gt;= 9. In this case set $fish_emoji_width to 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d8e6504c0343fb9e99dc0c0584d6abb0401ef4" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">구문 강조를 위해 물고기가 사용하는 색상은 다양한 변수의 값을 변경하여 구성 할 수 있습니다. 이러한 변수의 값은 &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; 명령에서 허용하는 색상 중 하나 일 수 있습니다 . &lt;code&gt;--bold&lt;/code&gt; 또는 &lt;code&gt;-b&lt;/code&gt; 수락 스위치 &lt;code&gt;set_color&lt;/code&gt; 는 또한 허용된다.</target>
        </trans-unit>
        <trans-unit id="c5cb93e79eb59eed4f3c4bd5e54faad96127309f" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">어구가 구문 강조를 위해 사용하는 색상은 다양한 변수의 값을 변경하여 구성 할 수 있습니다. 이 변수의 값은 &lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt; 명령에 의해 허용되는 색상 중 하나 일 수 있습니다 . &lt;code&gt;--bold&lt;/code&gt; 또는 &lt;code&gt;-b&lt;/code&gt; 수락 스위치 &lt;code&gt;set_color&lt;/code&gt; 는 또한 허용된다.</target>
        </trans-unit>
        <trans-unit id="eebbaa522fd61caa5f13112c46410239f8902654" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;cat foo.txt&lt;/code&gt; sends the contents of &lt;code&gt;foo.txt&lt;/code&gt; to stdout. This output is provided as input for the &lt;code&gt;head&lt;/code&gt; program, which prints the first 10 lines of its input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d325ad2d19b4840c597f9597e729e6423f6e0a" translate="yes" xml:space="preserve">
          <source>The command history is stored in the file &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; (or &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; if that variable is set) by default. However, you can set the &lt;code&gt;fish_history&lt;/code&gt; environment variable to change the name of the history session (resulting in a &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; file); both before starting the shell and while the shell is running.</source>
          <target state="translated">명령 기록은 기본적으로 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; 파일 (또는 해당 변수가 설정된 경우 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; )에 저장됩니다. 그러나 &lt;code&gt;fish_history&lt;/code&gt; 환경 변수를 설정하여 히스토리 세션의 이름을 변경할 수 있습니다 ( &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; 파일에 있음). 쉘을 시작하기 전과 쉘이 실행되는 동안.</target>
        </trans-unit>
        <trans-unit id="ad9471aeb00cd7dbf667ba8000bfffbdd6168599" translate="yes" xml:space="preserve">
          <source>The completions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;; and</source>
          <target state="translated">완성품은 일반적으로 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; 에 설치된 생선과 함께 제공됩니다 . 과</target>
        </trans-unit>
        <trans-unit id="a5bac7b22b091ed7d9ec59183c217ba0ddc57510" translate="yes" xml:space="preserve">
          <source>The current working directory can be displayed with the &lt;a href=&quot;cmds/pwd#cmd-pwd&quot;&gt;pwd&lt;/a&gt; command, or the &lt;code&gt;$PWD&lt;/code&gt;&lt;a href=&quot;#variables-special&quot;&gt;special variable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3296dffab7060413e9666f968221326b4a22e5" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;fish_mode_prompt&lt;/code&gt; function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. The &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; can be used to determine the current mode. It will be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;replace_one&lt;/code&gt;, or &lt;code&gt;visual&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526642f1e62598bbea0ecea2aededa98b233083a" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;fish_mode_prompt&lt;/code&gt; function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. You can also define an empty &lt;code&gt;fish_mode_prompt&lt;/code&gt; function to remove the Vi mode indicators. The &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; can be used to determine the current mode. It will be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;replace_one&lt;/code&gt;, or &lt;code&gt;visual&lt;/code&gt;.</source>
          <target state="translated">기본 &lt;code&gt;fish_mode_prompt&lt;/code&gt; 함수는 일반 프롬프트의 왼쪽에 표시된 현재 Vi 편집기 모드에 대한 표시기를 출력합니다. 모드 표시기의 모양을 사용자 정의하는 고유 한 기능을 정의하십시오. Vi 모드 표시기를 제거하기 위해 빈 &lt;code&gt;fish_mode_prompt&lt;/code&gt; 함수를 정의 할 수도 있습니다 . &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; 현재의 모드를 결정하는 데 사용할 수 있습니다. &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;insert&lt;/code&gt; , &lt;code&gt;replace_one&lt;/code&gt; 또는 &lt;code&gt;visual&lt;/code&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="5cecf773b45b71f464d270740746e4c81be97a5f" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;functions&lt;/code&gt;, when called with no arguments, is to print the names of all defined functions. Unless the &lt;code&gt;-a&lt;/code&gt; option is given, no functions starting with underscores are included in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b701404c307944b4f207202092290f154a8ceb6b" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;functions&lt;/code&gt;, when called with no arguments, is to print the names of all defined functions. Unless the &lt;code&gt;-a&lt;/code&gt; option is given, no functions starting with underscores are not included in the output.</source>
          <target state="translated">인수없이 호출 될 때 &lt;code&gt;functions&lt;/code&gt; 의 기본 동작은 정의 된 모든 함수의 이름을 인쇄하는 것입니다. &lt;code&gt;-a&lt;/code&gt; 옵션을 지정 하지 않으면 밑줄로 시작하는 함수는 출력에 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d4c91c27fab2727c86c4962ed510a017a29b2b1e" translate="yes" xml:space="preserve">
          <source>The default fish_greeting is a function that prints a variable of the same name (&lt;code&gt;$fish_greeting&lt;/code&gt;), so you can also just change that if you just want to change the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3238e1ed93b89a49bf4c1e65f05bfcad2dc2ccfc" translate="yes" xml:space="preserve">
          <source>The default key binding can be set by specifying a &lt;code&gt;SEQUENCE&lt;/code&gt; of the empty string (that is, &lt;code&gt;''&lt;/code&gt; ). It will be used whenever no other binding matches. For most key bindings, it makes sense to use the &lt;code&gt;self-insert&lt;/code&gt; function (i.e. &lt;code&gt;bind '' self-insert&lt;/code&gt;) as the default keybinding. This will insert any keystrokes not specifically bound to into the editor. Non- printable characters are ignored by the editor, so this will not result in control sequences being printable.</source>
          <target state="translated">빈 키의 &lt;code&gt;SEQUENCE&lt;/code&gt; (즉, &lt;code&gt;''&lt;/code&gt; ) 를 지정하여 기본 키 바인딩을 설정할 수 있습니다 . 다른 바인딩과 일치하지 않을 때마다 사용됩니다. 대부분의 키 바인딩의 경우 &lt;code&gt;self-insert&lt;/code&gt; 기능 (즉, &lt;code&gt;bind '' self-insert&lt;/code&gt; )을 기본 키 바인딩으로 사용하는 것이 좋습니다. 이렇게하면 편집기에 특별히 바인딩되지 않은 키 입력이 삽입됩니다. 인쇄 할 수없는 문자는 편집기에서 무시되므로 제어 순서를 인쇄 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="80908167c1fd52bd3b1ff34d8e60c0c19ce6ff92" translate="yes" xml:space="preserve">
          <source>The default prompt is reasonably full-featured and its code can be read via &lt;code&gt;type fish_prompt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761122ce7c1e00f6a72f6459922524107cc8cd64" translate="yes" xml:space="preserve">
          <source>The delay in milliseconds since the previous character was received is included in the diagnostic information written to stderr. This information may be useful to determine the optimal &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; setting or learn the amount of lag introduced by tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;mosh&lt;/code&gt; or &lt;code&gt;tmux&lt;/code&gt;.</source>
          <target state="translated">이전 문자가 수신 된 이후 밀리 초 단위의 지연은 stderr에 기록 된 진단 정보에 포함됩니다. 이 정보는 최적의 &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 설정 을 결정 하거나 &lt;code&gt;ssh&lt;/code&gt; , &lt;code&gt;mosh&lt;/code&gt; 또는 &lt;code&gt;tmux&lt;/code&gt; 와 같은 도구에서 발생하는 지연의 양을 배우는 데 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="858922f559826f295d941e88749f79239abe12a3" translate="yes" xml:space="preserve">
          <source>The destination of a stream can be changed using something called &lt;em&gt;redirection&lt;/em&gt;. For example, &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, redirects the standard output of the &lt;code&gt;echo&lt;/code&gt; command to a text file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec578501f85f58e1b6e5dcfc273e5557d618a78" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape can also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, like for function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">예를 들어, 이스케이프 키는 Vi 키 바인딩을 사용할 때 삽입 모드에서 일반 모드로 전환하기 위해 독립형으로 사용할 수 있습니다. Escape는 기능 또는 화살표 키와 같이 이스케이프 시퀀스의 시작을 나타내는 &quot;메타&quot;키로도 사용할 수 있습니다. 이스케이프 문자로 시작하는 사용자 지정 바인딩을 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2ae9cb276e98e46e4c54626cf3a5b994505cd52" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape may also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, such as function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">Vi 키 바인딩을 사용할 때 이스케이프 키를 독립형으로 사용하여 삽입 모드에서 일반 모드로 전환 할 수 있습니다. 이스케이프는 기능 또는 화살표 키와 같은 이스케이프 시퀀스의 시작을 나타 내기 위해 &quot;메타&quot;키로 사용될 수도 있습니다. 이스케이프 문자로 시작하는 사용자 정의 바인딩도 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2b67ae0b734fe8c7eb4002ecf7174bec7a097d2" translate="yes" xml:space="preserve">
          <source>The exit code of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">백그라운드 작업이 실행중인 경우 내장 &lt;code&gt;jobs&lt;/code&gt; 의 종료 코드 는 &lt;code&gt;0&lt;/code&gt; 이고 그렇지 않은 경우 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bdab6b4388bdecbfaaade04b54ac542c4110731a" translate="yes" xml:space="preserve">
          <source>The exit status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">&lt;code&gt;REASON&lt;/code&gt; 이 유효하지 않은 경우 종료 상태는 1 입니다. 그렇지 않으면 트랩이 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="92a98ee3485df09b2caf60e2fe8f1f43529de92d" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;functions&lt;/code&gt; is the number of functions specified in the argument list that do not exist, which can be used in concert with the &lt;code&gt;-q&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; 의 종료 상태는 존재하지 않는 인수 목록에 지정된 함수의 수이며 &lt;code&gt;-q&lt;/code&gt; 옵션 과 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea71aa43d0423248b5e6d17342f55b2785678003" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;jobs&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3cb59016fb249c3eee79ed924509a2fbc0c01f" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;source&lt;/code&gt; is the exit status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">의 종료 상태 &lt;code&gt;source&lt;/code&gt; 실행하기위한 마지막 작업의 종료 상태입니다. 파일을 열거 나 읽는 동안 문제가 발생하면 &lt;code&gt;source&lt;/code&gt; 가 0이 아닌 상태로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="87e8fe9012c8960260a66a84283038f62899649e" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 내 명령의 종료 상태 는 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0f212eae622b07227263f98bfdb5b6ec216b4de4" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 내 명령의 종료 상태 는 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="59c65315bdacf0d0e4111fbb51abfbd8b92270ba" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 내의 명령 종료 상태 는 &lt;code&gt;fish_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5657481f999e23c3116d622970acdbbcff597a42" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 내의 명령 종료 상태 는 &lt;code&gt;fish_prompt&lt;/code&gt; 함수 외부의 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 값을 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ee4b36588801ba4a5846d1e6ab3ec967f5f37ee0" translate="yes" xml:space="preserve">
          <source>The exit status of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">내장 된 &lt;code&gt;jobs&lt;/code&gt; 의 종료 상태 는 실행중인 백그라운드 작업이 있으면 &lt;code&gt;0&lt;/code&gt; 이고 그렇지 않으면 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dde297103a5b92cbf6063c24bb9aa65b611780da" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ff645c10072dc44f93fe8a0bc1b09a1e128e9d19" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2bb050210ccd5d99a0518f801eba8a539afbe988" translate="yes" xml:space="preserve">
          <source>The exit status of the last run command substitution is available in the &lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt; variable if the substitution happens in the context of a &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; command (so &lt;code&gt;if set -l (something)&lt;/code&gt; checks if &lt;code&gt;something&lt;/code&gt; returned true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4652deeba9fb7344bebbe6060971799e99a44a6b" translate="yes" xml:space="preserve">
          <source>The exit status of the last run command substitution is available in the &lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt; variable if the substitution occurs in the context of a &lt;code&gt;set&lt;/code&gt; command.</source>
          <target state="translated">마지막 실행 명령 대체의 종료 상태 는 &lt;code&gt;set&lt;/code&gt; 명령 의 컨텍스트에서 대체가 발생하면 &lt;a href=&quot;#variables-status&quot;&gt;상태&lt;/a&gt; 변수 에서 사용 가능 합니다 .</target>
        </trans-unit>
        <trans-unit id="110fb03150bee422319feb18aa0d332d91a7cdc7" translate="yes" xml:space="preserve">
          <source>The exit status of the while loop is the exit status of the last iteration of the &lt;code&gt;COMMANDS&lt;/code&gt; executed, or 0 if none were executed. (This matches other shells and is POSIX-compatible.)</source>
          <target state="translated">while 루프의 종료 상태는 마지막으로 실행 된 &lt;code&gt;COMMANDS&lt;/code&gt; 반복의 종료 상태 이거나 실행되지 않은 경우 0입니다. (이것은 다른 쉘과 일치하며 POSIX와 호환됩니다.)</target>
        </trans-unit>
        <trans-unit id="0e8e9a53dcf07764aa42aaf44d6d7a9d7ab8311a" translate="yes" xml:space="preserve">
          <source>The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">변수를 만들거나 업데이트 할 때 내보내기 규칙은 변수의 범위 지정 규칙과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="f3b2b8baa995e92464f5e5d45c31f3a60ec2cb9d" translate="yes" xml:space="preserve">
          <source>The file given in &lt;code&gt;--debug-output&lt;/code&gt; takes precedence over the file in $FISH_DEBUG_OUTPUT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09376457a3a1c5f117afa52bbec921cf1ee6399b" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;--&lt;/code&gt; seen is what allows the &lt;code&gt;argparse&lt;/code&gt; command to reliably separate the option specifications and options to &lt;code&gt;argparse&lt;/code&gt; itself (like &lt;code&gt;--ignore-unknown&lt;/code&gt;) from the command arguments, so it is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd7da4c54986027f5d438b2f8ee07a3d4f4e74d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;--&lt;/code&gt; seen is what allows the &lt;code&gt;argparse&lt;/code&gt; command to reliably separate the option specifications from the command arguments.</source>
          <target state="translated">첫 번째 &lt;code&gt;--&lt;/code&gt; 볼 수는 있습니다 무엇 &lt;code&gt;argparse&lt;/code&gt; 명령을 안정적으로 명령 인수에서 옵션 사양을 구분합니다.</target>
        </trans-unit>
        <trans-unit id="94b3d0ab298a19d908eda08c397cba03b7e163b0" translate="yes" xml:space="preserve">
          <source>The first argument to fish_title contains the most recently executed foreground command as a string, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00c945cebc76b9e34b8670689ec76047f703bed" translate="yes" xml:space="preserve">
          <source>The first form (&lt;code&gt;test&lt;/code&gt;) is preferred. For compatibility with other shells, the second form is available: a matching pair of square brackets (&lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt;).</source>
          <target state="translated">첫 번째 형태 ( &lt;code&gt;test&lt;/code&gt; )가 선호됩니다. 다른 쉘과의 호환성을 위해 두 번째 형식 인 대괄호 쌍 ( &lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt; )을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43f4d110308413cf0bb5f3a0257b712c35d80d02" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is a list variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">첫 번째 줄은 &lt;code&gt;ll&lt;/code&gt; 이라는 이름의 함수 가 정의되어야 함을 물고기에게 알려줍니다 . 사용하려면 명령 줄에 &lt;code&gt;ll&lt;/code&gt; 을 작성하면됩니다. 두 번째 줄은 &lt;code&gt;ll&lt;/code&gt; 이 호출 될 때 &lt;code&gt;ls -l $argv&lt;/code&gt; 명령 이 호출 되어야 한다고 fish에게 알려줍니다 . ' &lt;code&gt;$argv&lt;/code&gt; '는 항상 함수에 전송 된 모든 인수를 포함하는 목록 변수입니다. 위의 예에서 이들은 단순히 &lt;code&gt;ls&lt;/code&gt; 명령 에 전달됩니다 . 함수에 대한 자세한 내용은 &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;함수&lt;/a&gt; 내장 문서를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="1feeb6c582e1b13feec652671af704d8c4bca81d" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is an array variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">첫 번째 줄은 물고기에게 &lt;code&gt;ll&lt;/code&gt; 이라는 이름의 함수 가 정의되어야 함을 알려줍니다 . 사용하려면 명령 행에 &lt;code&gt;ll&lt;/code&gt; 을 쓰십시오 . 두 번째 줄은 &lt;code&gt;ll&lt;/code&gt; 이 호출 될 때 &lt;code&gt;ls -l $argv&lt;/code&gt; 명령을 호출해야 한다는 것을 물고기에게 알려줍니다 . ' &lt;code&gt;$argv&lt;/code&gt; '는 함수에 전송 된 모든 인수를 항상 포함하는 배열 변수입니다. 위의 예에서 이들은 &lt;code&gt;ls&lt;/code&gt; 명령으로 전달됩니다 . 기능에 대한 자세한 내용은 내장 &lt;a href=&quot;commands#function&quot;&gt;기능&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="074dd03c76d5b47505aa8770948856719e412113" translate="yes" xml:space="preserve">
          <source>The first line tells fish to define a function by the name of &lt;code&gt;ll&lt;/code&gt;, so it can be used by simply writing &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. &lt;a href=&quot;#variables-argv&quot;&gt;$argv&lt;/a&gt; is a &lt;a href=&quot;#variables-lists&quot;&gt;list variable&lt;/a&gt;, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. The &lt;code&gt;end&lt;/code&gt; on the third line ends the definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa91cd04a31d486d202e2b1e77d870e577f521a" translate="yes" xml:space="preserve">
          <source>The first part specifies to whom this set of right applies, and can be one of &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;u&lt;/code&gt; specifies the user who owns the file, &lt;code&gt;g&lt;/code&gt; specifies the group owner of the file, &lt;code&gt;o&lt;/code&gt; specific other users rights and &lt;code&gt;a&lt;/code&gt; specifies all three should be changed.</source>
          <target state="translated">권리 세트가 적용되며 중 하나가 될 수 있습니다 누구에게 첫 번째 부분 지정하는 &lt;code&gt;u&lt;/code&gt; , &lt;code&gt;g&lt;/code&gt; , &lt;code&gt;o&lt;/code&gt; 또는 , &lt;code&gt;u&lt;/code&gt; 파일, 소유하는 사용자 지정 &lt;code&gt;g&lt;/code&gt; 의 지정 파일의 그룹 소유자를, &lt;code&gt;o&lt;/code&gt; 특정 다른 사용자의 권리와 &lt;code&gt;a&lt;/code&gt; 는 세 개 모두를 변경해야 함을 지정합니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8197431f9332af76bce775e1de1257355f1cd95c" translate="yes" xml:space="preserve">
          <source>The fish commandline editor can be used to work on commands that are several lines long. There are three ways to make a command span more than a single line:</source>
          <target state="translated">피쉬 명령 줄 편집기를 사용하면 몇 줄의 명령을 처리 할 수 ​​있습니다. 명령을 한 줄 이상으로 확장하는 세 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f8186d4ab0a2d348fed572d2dce9da78099265a" translate="yes" xml:space="preserve">
          <source>The fish commandline editor works exactly the same in single line mode and in multiline mode. To move between lines use the left and right arrow keys and other such keyboard shortcuts.</source>
          <target state="translated">피쉬 명령 줄 편집기는 한 줄 모드와 여러 줄 모드에서 정확히 동일하게 작동합니다. 줄 사이를 이동하려면 왼쪽 및 오른쪽 화살표 키와 기타 단축키를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c10195114b2c2ba4a31738c3505e1c57b1525797" translate="yes" xml:space="preserve">
          <source>The fish editor features copy and paste, a &lt;a href=&quot;#history-search&quot;&gt;searchable history&lt;/a&gt; and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26a6a29915d54b8a282c8e0ab812a4f1acfe95a" translate="yes" xml:space="preserve">
          <source>The fish exit status is generally the &lt;a href=&quot;../index#variables-status&quot;&gt;exit status of the last foreground command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b5304e27f02f59d7a10f53fd4009e199ac5306" translate="yes" xml:space="preserve">
          <source>The fish exit status is generally the exit status of the last foreground command. If fish is exiting because of a parse error, the exit status is 127.</source>
          <target state="translated">어류 종료 상태는 일반적으로 마지막 포 그라운드 명령의 종료 상태입니다. 구문 분석 오류로 인해 물고기가 종료되면 종료 상태는 127입니다.</target>
        </trans-unit>
        <trans-unit id="81b0737757c6447d0c7efe9ceff078d063aa48ef" translate="yes" xml:space="preserve">
          <source>The fish user community extends fish in unique and useful ways via scripts that aren't always appropriate for bundling with the fish package. Typically because they solve a niche problem unlikely to appeal to a broad audience. You can find those extensions, including prompts, themes and useful functions, in various third-party repositories. These include:</source>
          <target state="translated">물고기 사용자 커뮤니티는 물고기 패키지와 함께 제공하기에 항상 적합한 스크립트를 통해 독특하고 유용한 방법으로 물고기를 확장합니다. 일반적으로 그들은 틈새 문제를 해결하여 광범위한 청중에게 호소하지 않을 것입니다. 다양한 타사 리포지토리에서 프롬프트, 테마 및 유용한 기능을 포함한 확장을 찾을 수 있습니다. 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="1dc678d68b9717e5200d2d3ebd01cf72bd98b0c8" translate="yes" xml:space="preserve">
          <source>The fish_hg_prompt function displays information about the current Mercurial repository, if any.</source>
          <target state="translated">fish_hg_prompt 함수는 현재 Mercurial 저장소 (있는 경우)에 대한 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d06891f80053c3220358df28d431b54da754d75c" translate="yes" xml:space="preserve">
          <source>The fish_mode_prompt function will output the mode indicator for use in vi-mode.</source>
          <target state="translated">fish_mode_prompt 함수는 vi 모드에서 사용하기위한 모드 표시기를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="2cd3e1be81f908b3d67ab09f753310049f406ade" translate="yes" xml:space="preserve">
          <source>The fish_svn_prompt function displays information about the current Subversion repository, if any.</source>
          <target state="translated">fish_svn_prompt 함수는 현재 Subversion 저장소 (있는 경우)에 대한 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="89d3be5da20cd5974bed5d4cec48f0faf57383bf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available. They must appear before all OPTION_SPECs:</source>
          <target state="translated">다음과 같은 &lt;code&gt;argparse&lt;/code&gt; 옵션을 사용할 수 있습니다. 모든 OPTION_SPEC 앞에 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="23d5e5164bbb45ea1a895b015bf1d3acf0cdeae1" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available:</source>
          <target state="translated">다음과 같은 &lt;code&gt;argparse&lt;/code&gt; 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="224bb1116b7af6da373f3bd98c7370044c04d51d" translate="yes" xml:space="preserve">
          <source>The following additional options are also understood by &lt;code&gt;ulimit&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 는 다음과 같은 추가 옵션도 이해합니다 .</target>
        </trans-unit>
        <trans-unit id="72e92d902d19c4f9a787cc785c9f6f673c804c7c" translate="yes" xml:space="preserve">
          <source>The following code first defines an event handler for the generic event named 'test_event', and then emits an event of that type.</source>
          <target state="translated">다음 코드는 먼저 'test_event'라는 일반 이벤트에 대한 이벤트 핸들러를 정의한 다음 해당 유형의 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4dfce41da5b846516accbd2a1b32a0ea88076d5d" translate="yes" xml:space="preserve">
          <source>The following code is an implementation of the false command as a fish function</source>
          <target state="translated">다음 코드는 물고기 함수로 false 명령을 구현 한 것입니다</target>
        </trans-unit>
        <trans-unit id="73f428206d6cc247fb0a938bd495734a3eb822ae" translate="yes" xml:space="preserve">
          <source>The following code removes all tmp files that do not contain the word smurf.</source>
          <target state="translated">다음 코드는 smurf를 포함하지 않는 모든 tmp 파일을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="479b6746587510b08a8b09d6baf9432244f03bce" translate="yes" xml:space="preserve">
          <source>The following code reports an error and exits if no file named spoon can be found.</source>
          <target state="translated">다음 코드는 오류를보고하고 spoon라는 파일을 찾을 수 없으면 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="c4c2a9bc321af801fbf29261dd0e7d5af4245506" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, &lt;code&gt;make&lt;/code&gt;'s exit status is 0, and the program is installed. If either step fails, the exit status is 1, and &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">다음 코드는 &lt;code&gt;make&lt;/code&gt; 명령을 실행하여 프로그램을 빌드합니다. 빌드가 성공하면 &lt;code&gt;make&lt;/code&gt; 의 종료 상태는 0이며 프로그램이 설치됩니다. 두 단계 중 하나라도 실패하면 종료 상태는 1이고 &lt;code&gt;make clean&lt;/code&gt; 가 실행되어 빌드 프로세스에서 작성된 파일이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="546e6c9b6b78b14a90cdffaa174cd31d19fddac9" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, the program is installed. If either step fails, &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">다음 코드는 &lt;code&gt;make&lt;/code&gt; 명령을 실행하여 프로그램을 빌드합니다. 빌드가 성공하면 프로그램이 설치됩니다. 두 단계 중 하나라도 실패하면 &lt;code&gt;make clean&lt;/code&gt; 가 실행되어 빌드 프로세스에서 작성된 파일이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="22ceb5db939abfc8429d0cfac70346e285c29f90" translate="yes" xml:space="preserve">
          <source>The following code searches all .c files for &quot;smurf&quot;, and halts at the first occurrence.</source>
          <target state="translated">다음 코드는 모든 .c 파일에서 &quot;smurf&quot;를 검색하고 처음 발생하면 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="4275d8a3b1aa0d62413745bb834485269f681525" translate="yes" xml:space="preserve">
          <source>The following code sets a number of variables inside of a block scope. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends.</source>
          <target state="translated">다음 코드는 블록 범위 내에서 여러 변수를 설정합니다. 변수는 블록 내부에 설정되고 로컬 범위가 있으므로 블록이 끝나면 자동으로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="9c3e3b53e3555daf8b545c545da16a2dcb0110a7" translate="yes" xml:space="preserve">
          <source>The following code stores the value 'hello' in the shell variable &lt;code&gt;$foo&lt;/code&gt;.</source>
          <target state="translated">다음 코드는 쉘 변수 &lt;code&gt;$foo&lt;/code&gt; 에 'hello'값을 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="381bfb0bdea553cc88676dcf9cb0ff3a9ee0da17" translate="yes" xml:space="preserve">
          <source>The following code tests whether a file &lt;code&gt;foo.txt&lt;/code&gt; exists as a regular file.</source>
          <target state="translated">다음 코드는 &lt;code&gt;foo.txt&lt;/code&gt; 파일이 일반 파일로 존재 하는지 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="858bb8cd938dce0407b131e7aecbe8f7f0e34166" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command and truncate each filename to the first 12 characters.</source>
          <target state="translated">다음 코드는 ls 명령을 호출하고 각 파일 이름을 처음 12 자로 자릅니다.</target>
        </trans-unit>
        <trans-unit id="96c71a4810d00e2a53ad0417748ddcd2d89501b6" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command. Note that &lt;code&gt;fish&lt;/code&gt; does not support the use of shell variables as direct commands; &lt;code&gt;eval&lt;/code&gt; can be used to work around this.</source>
          <target state="translated">다음 코드는 ls 명령을 호출합니다. 참고 &lt;code&gt;fish&lt;/code&gt; 직접 명령으로 쉘 변수의 사용을 지원하지 않습니다; &lt;code&gt;eval&lt;/code&gt; 을 사용하여이 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca62666931da18a9248d4ac0f516c18c3953407d" translate="yes" xml:space="preserve">
          <source>The following code will count down from a random even number between 10 and 20 to 1:</source>
          <target state="translated">다음 코드는 10과 20에서 1 사이의 임의의 짝수에서 카운트 다운됩니다.</target>
        </trans-unit>
        <trans-unit id="b827c00166140f0325b113f6c5ec11ead3608d8d" translate="yes" xml:space="preserve">
          <source>The following code will create &lt;code&gt;rmi&lt;/code&gt;, which runs &lt;code&gt;rm&lt;/code&gt; with additional arguments on every invocation.</source>
          <target state="translated">다음 코드는 &lt;code&gt;rmi&lt;/code&gt; 를 작성 하는데, 이것은 호출 할 때마다 추가 인수로 &lt;code&gt;rm&lt;/code&gt; 을 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="2bda4fa27dff7ecce2f691a9e2a6631fca487d27" translate="yes" xml:space="preserve">
          <source>The following code will not output anything:</source>
          <target state="translated">다음 코드는 아무것도 출력하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="ef1c53d0ac92fed4883e8ae1b1d7d027d13ad785" translate="yes" xml:space="preserve">
          <source>The following code will print &quot;foo.txt exists and is readable&quot; if foo.txt is a regular file and readable</source>
          <target state="translated">다음 코드는 foo.txt가 일반 파일이고 읽을 수있는 경우 &quot;foo.txt가 존재하고 읽을 수 있습니다&quot;를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="1b900844821e8f04f7dd1574d0cf172ece4e3553" translate="yes" xml:space="preserve">
          <source>The following code will print &lt;code&gt;foo.txt exists&lt;/code&gt; if the file foo.txt exists and is a regular file, otherwise it will print &lt;code&gt;bar.txt exists&lt;/code&gt; if the file bar.txt exists and is a regular file, otherwise it will print &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt;.</source>
          <target state="translated">다음 코드는 &lt;code&gt;foo.txt exists&lt;/code&gt; 파일이 존재하고 일반 파일 인 경우 foo.txt가 인쇄되고 그렇지 않으면 &lt;code&gt;bar.txt exists&lt;/code&gt; 파일이 존재하고 일반 파일 인 경우 bar.txt가 인쇄 됩니다. 그렇지 않으면 &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt; 가 인쇄됩니다. bar.txt가 존재하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="de3876978d90a169388326ae4fae09574262829b" translate="yes" xml:space="preserve">
          <source>The following operations (sub-commands) are available:</source>
          <target state="translated">다음과 같은 작업 (하위 명령)을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">다음과 같은 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d66ddc0c6de8a95bb5854453416293c96da8d8a9" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; prints the current commandline buffer:</source>
          <target state="translated">다음 옵션은 &lt;code&gt;commandline&lt;/code&gt; 이 현재 명령 행 버퍼를 인쇄하는 방식을 변경합니다 .</target>
        </trans-unit>
        <trans-unit id="63df7f64ccf12b96665f8dde259ffe470d38015a" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; updates the command line buffer:</source>
          <target state="translated">옵션은 다음과 방식 변경 &lt;code&gt;commandline&lt;/code&gt; 업데이트를 명령 행 버퍼를 :</target>
        </trans-unit>
        <trans-unit id="74214e3ec02696aeea391992facc065916f44218" translate="yes" xml:space="preserve">
          <source>The following options change what part of the commandline is printed or updated:</source>
          <target state="translated">다음 옵션은 명령 줄에서 인쇄 또는 업데이트되는 부분을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="4caebaf69abe1f045ca9b70c7d77c6343b9dba77" translate="yes" xml:space="preserve">
          <source>The following options control variable scope:</source>
          <target state="translated">다음 옵션은 변수 범위를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="de38d59c5de4e05441ae91dc9bbb795a1e1439a4" translate="yes" xml:space="preserve">
          <source>The following options output metadata about the commandline state:</source>
          <target state="translated">다음 옵션은 명령 줄 상태에 대한 메타 데이터를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="2cc91c14fc643ec75cd8e42977ab3bf342c34ee4" translate="yes" xml:space="preserve">
          <source>The following parameters are available:</source>
          <target state="translated">다음과 같은 파라미터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="328c4823c00af02675ec490144bb09f24d6106dd" translate="yes" xml:space="preserve">
          <source>The following special input functions are available:</source>
          <target state="translated">다음과 같은 특수 입력 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f152dd9767da97d86c0b7bee6016016e58054d4e" translate="yes" xml:space="preserve">
          <source>The following subcommands are available.</source>
          <target state="translated">다음 부속 명령이 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="58f88b1896d25d9e560265aa1ea2d352215c9687" translate="yes" xml:space="preserve">
          <source>The following variables are available to change the highlighting colors in fish:</source>
          <target state="translated">물고기의 강조 표시 색상을 변경하기 위해 다음 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5c283f87142fff645059f0c26d945ecfa72619d" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_data_dir/functions&lt;/code&gt;).</source>
          <target state="translated">일반적으로 &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; (정말 &lt;code&gt;$__fish_data_dir/functions&lt;/code&gt; )에 설치되는 fish와 함께 제공되는 함수 입니다.</target>
        </trans-unit>
        <trans-unit id="c602bb0a290012cbead72e55c75dd6308e892909" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt;.</source>
          <target state="translated">물고기와 함께 제공되는 기능으로 보통 &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; 에 설치 됩니다.</target>
        </trans-unit>
        <trans-unit id="60305ba8888539448dea4b7d945ecc4313728a85" translate="yes" xml:space="preserve">
          <source>The generic key binding that matches if no other binding does can be set by specifying a &lt;code&gt;SEQUENCE&lt;/code&gt; of the empty string (that is, &lt;code&gt;''&lt;/code&gt; ). For most key bindings, it makes sense to bind this to the &lt;code&gt;self-insert&lt;/code&gt; function (i.e. &lt;code&gt;bind '' self-insert&lt;/code&gt;). This will insert any keystrokes not specifically bound to into the editor. Non-printable characters are ignored by the editor, so this will not result in control sequences being inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5d264af15f8432fec7957ce6625de24ad79a9e" translate="yes" xml:space="preserve">
          <source>The key sequence (the &lt;code&gt;\cc&lt;/code&gt;) here depends on your setup, in particular the terminal. To find out what the terminal sends use &lt;a href=&quot;cmds/fish_key_reader#cmd-fish-key-reader&quot;&gt;fish_key_reader&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09152effa3ffc16b24d3fc6b4a6980e177c4d889" translate="yes" xml:space="preserve">
          <source>The language depends on the current locale, set with &lt;code&gt;$LANG&lt;/code&gt; and &lt;code&gt;$LC_MESSAGES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d1d74253673e0e00e4ab6d298c6cfbfbe641c4" translate="yes" xml:space="preserve">
          <source>The last value assigned to &lt;code&gt;var&lt;/code&gt; when the loop terminated would not be available outside the loop. What &lt;code&gt;echo $var&lt;/code&gt; would write depended on what it was set to before the loop was run. Likely nothing.</source>
          <target state="translated">루프가 종료 될 때 &lt;code&gt;var&lt;/code&gt; 에 지정된 마지막 값 은 루프 외부에서 사용할 수 없습니다. 무슨 일이 &lt;code&gt;echo $var&lt;/code&gt; 가 루프가 실행되기 전에 설정 한 내용에 의존 작성합니다. 아마 아무것도 아닙니다.</target>
        </trans-unit>
        <trans-unit id="a484c97c564e9f2294dccdee0326b8d8bb53aff4" translate="yes" xml:space="preserve">
          <source>The latter syntax &lt;code&gt;{$WORD}&lt;/code&gt; is a special case of &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5d758036d63a8bf5273befa9ba2de30bb1d084" translate="yes" xml:space="preserve">
          <source>The latter syntax &lt;code&gt;{$WORD}&lt;/code&gt; works by exploiting &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;.</source>
          <target state="translated">후자의 구문 &lt;code&gt;{$WORD}&lt;/code&gt; 은 &lt;a href=&quot;#expand-brace&quot;&gt;중괄호 확장&lt;/a&gt; 을 활용하여 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="003f5cfaee3e7c8f053961483130a113e4a771af" translate="yes" xml:space="preserve">
          <source>The locale variables &lt;code&gt;LANG&lt;/code&gt;, &lt;code&gt;LC_ALL&lt;/code&gt;, &lt;code&gt;LC_COLLATE&lt;/code&gt;, &lt;code&gt;LC_CTYPE&lt;/code&gt;, &lt;code&gt;LC_MESSAGES&lt;/code&gt;, &lt;code&gt;LC_MONETARY&lt;/code&gt;, &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_TIME&lt;/code&gt; set the language option for the shell and subprograms. See the section &lt;a href=&quot;#variables-locale&quot;&gt;Locale variables&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2d87c31efe5a5242aff1d1ac9d16a3f6f17fb6" translate="yes" xml:space="preserve">
          <source>The locale variables are: &lt;code&gt;LANG&lt;/code&gt;, &lt;code&gt;LC_ALL&lt;/code&gt;, &lt;code&gt;LC_COLLATE&lt;/code&gt;, &lt;code&gt;LC_CTYPE&lt;/code&gt;, &lt;code&gt;LC_MESSAGES&lt;/code&gt;, &lt;code&gt;LC_MONETARY&lt;/code&gt;, &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_TIME&lt;/code&gt;. These variables work as follows: &lt;code&gt;LC_ALL&lt;/code&gt; forces all the aspects of the locale to the specified value. If &lt;code&gt;LC_ALL&lt;/code&gt; is set, all other locale variables will be ignored (this is typically not recommended!). The other &lt;code&gt;LC_&lt;/code&gt; variables set the specified aspect of the locale information. &lt;code&gt;LANG&lt;/code&gt; is a fallback value, it will be used if none of the &lt;code&gt;LC_&lt;/code&gt; variables are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af91f79f8373488bcf43ad9d85211f47c5490d9e" translate="yes" xml:space="preserve">
          <source>The long answer:</source>
          <target state="translated">긴 대답 :</target>
        </trans-unit>
        <trans-unit id="3bc04ce8ee0aaf5de96a68984a57d83e6ba0f996" translate="yes" xml:space="preserve">
          <source>The most common way to set the locale to use a command like 'set -x LANG en_GB.utf8', which sets the current locale to be the English language, as used in Great Britain, using the UTF-8 character set. For a list of available locales, use 'locale -a'.</source>
          <target state="translated">로케일을 'set -x LANG en_GB.utf8'과 같은 명령을 사용하도록 로케일을 설정하는 가장 일반적인 방법은 UTF-8 문자 세트를 사용하여 영국에서 사용되는 현재 로케일을 영어로 설정합니다. 사용 가능한 로케일 목록을 보려면 'locale -a'를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="09535cffbe3c2afe43b7f4429fbeb021277bbe52" translate="yes" xml:space="preserve">
          <source>The most common way to set the locale to use a command like &lt;code&gt;set -gx LANG en_GB.utf8&lt;/code&gt;, which sets the current locale to be the English language, as used in Great Britain, using the UTF-8 character set. That way any program that requires one setting differently can easily override just that and doesn't have to resort to LC_ALL. For a list of available locales on your system, try &lt;code&gt;locale -a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f8a0f7d2af2ecdf29f96a294a1554c9c3b5a41" translate="yes" xml:space="preserve">
          <source>The names given to shell objects like variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define what sequences of characters are valid to use.</source>
          <target state="translated">변수 및 함수 이름과 같은 쉘 객체에 부여 된 이름을 &quot;식별자&quot;라고합니다. 각 식별자 유형에는 사용할 수있는 문자 시퀀스를 정의하는 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="65aa63047471b9a76e26dd8f43f5899f1292feb3" translate="yes" xml:space="preserve">
          <source>The names given to shell objects such as variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define the valid sequence of characters which compose the identifier.</source>
          <target state="translated">변수 및 함수 이름과 같은 쉘 오브젝트에 지정된 이름을 &quot;식별자&quot;라고합니다. 각 식별자 유형에는 식별자를 구성하는 유효한 문자 시퀀스를 정의하는 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3e07e91f8f96b0293f87a0e2d848d2b640fb2eb" translate="yes" xml:space="preserve">
          <source>The names given to variables and functions (so called &quot;identifiers&quot;) have to follow certain rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe3f46a59e146e352f1c4758de7a57641a2c629" translate="yes" xml:space="preserve">
          <source>The names of these variables are mostly derived from the csh family of shells and differ from the ones used by Bourne style shells such as bash.</source>
          <target state="translated">이러한 변수의 이름은 주로 csh 쉘 제품군에서 파생되며 bash와 같은 Bourne 스타일 쉘에서 사용되는 것과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="d0bbdfdf4f6bd58e59535b30b244a24f5c9c7616" translate="yes" xml:space="preserve">
          <source>The official &lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;Gitter channel&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdd8d204de3244af011ba40dd2e1e03a80c3965" translate="yes" xml:space="preserve">
          <source>The official mailing list at &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt; 의 공식 메일 링리스트</target>
        </trans-unit>
        <trans-unit id="e4e7f0cf7342207349af3cfc04732168d9c47e27" translate="yes" xml:space="preserve">
          <source>The only backslash escape accepted within single quotes is &lt;code&gt;\'&lt;/code&gt;, which escapes a single quote and &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">작은 따옴표 내에서 허용되는 유일한 백 슬래시 이스케이프는 &lt;code&gt;\'&lt;/code&gt; 이며 작은 따옴표 를 이스케이프하고 &lt;code&gt;\\&lt;/code&gt; 는 백 슬래시 기호를 이스케이프합니다. 따옴표로 인정 유일한 백 슬래시 이스케이프는 &lt;code&gt;\&quot;&lt;/code&gt; , 이중 인용 부호를 탈출하는 &lt;code&gt;\$&lt;/code&gt; 달러 문자를 이스케이프 이는, &lt;code&gt;\&lt;/code&gt; 마지막으로 백 슬래시 및 줄 바꿈 등을 삭제하는 줄 바꿈, 다음 &lt;code&gt;\\&lt;/code&gt; 백 슬래시를 탈출, 작은 따옴표는 큰 따옴표 내에서 특별한 의미가 없으며 그 반대의 경우도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="c9442b55259d81b4b21486be4ca1ced11f021b67" translate="yes" xml:space="preserve">
          <source>The only meaningful escape sequences in single quotes are &lt;code&gt;\'&lt;/code&gt;, which escapes a single quote and &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. The only meaningful escapes in double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341137762021767c1bcfe1d4e89d1efb6ab672f6" translate="yes" xml:space="preserve">
          <source>The open command doesn't work.</source>
          <target state="translated">열기 명령이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1270e20d3a3df8e1f5346556fc472ccabc75c9c8" translate="yes" xml:space="preserve">
          <source>The options for specifying command name and command path may be used multiple times to define the same completions for multiple commands.</source>
          <target state="translated">명령 이름 및 명령 경로를 지정하기위한 옵션을 여러 번 사용하여 여러 명령에 대해 동일한 완료를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff3a156169840aa3d5e264e866d9a002dac09c1f" translate="yes" xml:space="preserve">
          <source>The options for specifying command switches and wrapped commands may be used multiple times to define multiple completions for the command(s) in a single call.</source>
          <target state="translated">명령 스위치 및 랩핑 된 명령을 지정하기위한 옵션을 여러 번 사용하여 단일 호출에서 명령에 대한 여러 완료를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="167492ae418de8b794d088cd0b8696f7eb1da125" translate="yes" xml:space="preserve">
          <source>The options will be &lt;em&gt;removed&lt;/em&gt; from $argv, so $argv[2] is the second &lt;em&gt;positional&lt;/em&gt; argument now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad33245af3be3da37e9c1809228a2452469da24" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514a8bdf395655769cdf0c1f52c06c11623edf78" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See the documentation for &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">다른 조건 은 명령 의 &lt;a href=&quot;#variables-status&quot;&gt;종료 상태&lt;/a&gt; 를 사용하여 명령 또는 명령 블록을 실행할지 여부를 결정합니다. 설명서를 참조 &lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt; 더 많은 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dfcf59b6a13b148c10967aa98c28930a4e9e12a5" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See their documentation for more information.</source>
          <target state="translated">다른 조건 은 명령 의 &lt;a href=&quot;#variables-status&quot;&gt;종료 상태&lt;/a&gt; 를 사용하여 명령 또는 명령 블록을 실행해야하는지 여부를 결정합니다. 자세한 내용은 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1764743bcfc6b735a5f4be8e624a42400f8a284e" translate="yes" xml:space="preserve">
          <source>The output is padded to the maximum width of all input strings. If &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--width&lt;/code&gt; is given, use at least that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c811383629f8638c43b331b8903700d8404bb5" translate="yes" xml:space="preserve">
          <source>The output of a command (or an entire &lt;a href=&quot;#pipes&quot;&gt;pipeline&lt;/a&gt;) can be used as the arguments to another command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2490e597900e8176c6a2c4a4584d5571260ded3" translate="yes" xml:space="preserve">
          <source>The output of a series of commands can be used as the parameters to another command. If a parameter contains a set of parenthesis, the text enclosed by the parenthesis will be interpreted as a list of commands. On expansion, this list is executed, and substituted by the output. If the output is more than one line long, each line will be expanded to a new parameter. Setting &lt;code&gt;IFS&lt;/code&gt; to the empty string will disable line splitting.</source>
          <target state="translated">일련의 명령 출력을 다른 명령의 매개 변수로 사용할 수 있습니다. 매개 변수에 괄호 세트가 포함 된 경우 괄호로 묶인 텍스트는 명령 목록으로 해석됩니다. 확장시이 목록이 실행되고 출력으로 대체됩니다. 출력이 두 줄 이상인 경우 각 줄은 새 매개 변수로 확장됩니다. 빈 문자열로 &lt;code&gt;IFS&lt;/code&gt; 를 설정하면 행 분할이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="31f457d4448ccae4818e31a09dc55489e017a791" translate="yes" xml:space="preserve">
          <source>The pager can be navigated with the arrow keys,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c076b2b362e357c8c787010692c3897b0cde8acf" translate="yes" xml:space="preserve">
          <source>The previous test can likewise be inverted:</source>
          <target state="translated">이전 테스트도 마찬가지로 반전 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddedd2674467015f6a5beb34ee2fbb835520f26b" translate="yes" xml:space="preserve">
          <source>The programs &lt;code&gt;man&lt;/code&gt; and &lt;code&gt;whatis&lt;/code&gt; show all installed manual pages as completions.</source>
          <target state="translated">프로그램 &lt;code&gt;man&lt;/code&gt; 및 &lt;code&gt;whatis&lt;/code&gt; 는 설치된 모든 매뉴얼 페이지를 완료로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="923e6b118fb538f4ca8e8f67ca4698c422b3b072" translate="yes" xml:space="preserve">
          <source>The prompt is the output of the &lt;code&gt;fish_prompt&lt;/code&gt; function. Put it in &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;. For example, a simple prompt is:</source>
          <target state="translated">프롬프트는 &lt;code&gt;fish_prompt&lt;/code&gt; 함수 의 출력입니다 . 에 넣어 &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt; . 예를 들어 간단한 프롬프트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f6c98e8413fa41203c749875900025da16302aca" translate="yes" xml:space="preserve">
          <source>The reason for providing for two output file descriptors is to allow separation of errors and warnings from regular program output.</source>
          <target state="translated">두 개의 출력 파일 디스크립터를 제공하는 이유는 일반 프로그램 출력에서 ​​오류와 경고를 분리 할 수 ​​있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="1c641b43a1ed9a01749c093f3a5864403b12f91c" translate="yes" xml:space="preserve">
          <source>The return status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">&lt;code&gt;REASON&lt;/code&gt; 이 유효하지 않은 경우 리턴 상태는 1 입니다. 그렇지 않으면 trap은 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eec28e525883ec2bf359aa9ac84f19012ae7983d" translate="yes" xml:space="preserve">
          <source>The return status of &lt;code&gt;source&lt;/code&gt; is the return status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">의 반환 상태 &lt;code&gt;source&lt;/code&gt; 실행하기위한 마지막 작업의 반환 상태입니다. 파일을 열거 나 읽는 동안 문제가 발생하면 &lt;code&gt;source&lt;/code&gt; 는 0이 아닌 상태로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="1c30a73e8a51035e518bdfeccb5ae03bbba2a49e" translate="yes" xml:space="preserve">
          <source>The same works when setting or expanding variables:</source>
          <target state="translated">변수를 설정하거나 확장 할 때도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="0df43a9567e35d287e4e0a64578b1540c9c5524d" translate="yes" xml:space="preserve">
          <source>The scoping rules when creating or updating a variable are:</source>
          <target state="translated">변수를 만들거나 업데이트 할 때 범위 지정 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="af1ca2dded8974103c58a768e1e91d3d877d12bd" translate="yes" xml:space="preserve">
          <source>The script should write any error messages to stdout, not stderr. It should return a status of zero if the flag value is valid otherwise a non-zero status to indicate it is invalid.</source>
          <target state="translated">스크립트는 stderr가 아닌 오류 메시지를 stdout에 작성해야합니다. 플래그 값이 유효하면 0의 상태를 리턴하고 그렇지 않으면 유효하지 않음을 나타내는 0이 아닌 상태를 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="ea5694e15d95ca5a5e96c990e236cff7fa4686dd" translate="yes" xml:space="preserve">
          <source>The second part of a right specifies the mode, and can be one of &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, where &lt;code&gt;=&lt;/code&gt; specifies that the rights should be set to the new value, &lt;code&gt;+&lt;/code&gt; specifies that the specified right should be added to those previously specified and &lt;code&gt;-&lt;/code&gt; specifies that the specified rights should be removed from those previously specified.</source>
          <target state="translated">우측 지정의 두 번째 부분 모드 중 하나 일 수 &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; 또는 &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;=&lt;/code&gt; 권리는 새로운 값으로 설정되도록 지정, &lt;code&gt;+&lt;/code&gt; 지정 지정된 바로 이전에 지정된에 첨가되어야 함 &lt;code&gt;-&lt;/code&gt; 지정된 권한이 이전에 지정된 권한에서 제거되도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="38928de4a99cf4b1b80ad161ac8d51a39f94774f" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-d&lt;/code&gt; for the &lt;code&gt;grep&lt;/code&gt; command requires one of &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;skip&lt;/code&gt; or &lt;code&gt;recurse&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7823c527da5d40f4505f5d7ca9cee1dbf65bd935" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-d&lt;/code&gt; for the &lt;code&gt;grep&lt;/code&gt; command requires that one of the strings '&lt;code&gt;read&lt;/code&gt;', '&lt;code&gt;skip&lt;/code&gt;' or '&lt;code&gt;recurse&lt;/code&gt;' is used. This can be specified writing:</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; 명령 의 짧은 스타일 옵션 &lt;code&gt;-d&lt;/code&gt; 를 사용 하려면 문자열 ' &lt;code&gt;read&lt;/code&gt; ', ' &lt;code&gt;skip&lt;/code&gt; '또는 ' &lt;code&gt;recurse&lt;/code&gt; '중 하나를 사용해야합니다. 이것은 다음과 같이 쓸 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="47faeb09fe72243db57c3e0978defbb0c093d69c" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-o&lt;/code&gt; for the &lt;code&gt;gcc&lt;/code&gt; command needs a file argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21aef96d543138db0f5113aa8c694e877221993a" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-o&lt;/code&gt; for the &lt;code&gt;gcc&lt;/code&gt; command requires that a file follows it. This can be done using writing:</source>
          <target state="translated">&lt;code&gt;gcc&lt;/code&gt; 명령 의 짧은 스타일 옵션 &lt;code&gt;-o&lt;/code&gt; 를 사용 하려면 파일이 뒤에옵니다. 쓰기를 사용하여 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1b22e71e7a777d09a79f935b2d1b50d368962c0" translate="yes" xml:space="preserve">
          <source>The special characters and their escape sequences are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b2e415c1ad09956265d420e5d30ef098fe39f3" translate="yes" xml:space="preserve">
          <source>The status symbols themselves:</source>
          <target state="translated">상태 기호 자체 :</target>
        </trans-unit>
        <trans-unit id="a7c9c314ad94ef58d396d8ee54dfb17c9688e5cf" translate="yes" xml:space="preserve">
          <source>The status variable</source>
          <target state="translated">상태 변수</target>
        </trans-unit>
        <trans-unit id="3d79b5f2fb8b7ff9607cb6173124ce2876018175" translate="yes" xml:space="preserve">
          <source>The string FORMAT should contain format specifiers, each of which are replaced with successive arguments according to the specifier. Specifiers are detailed below, and are taken from the C library function &lt;code&gt;printf(3)&lt;/code&gt;.</source>
          <target state="translated">문자열 FORMAT은 형식 지정자를 포함해야하며 각 지정자는 지정자에 따라 연속 인수로 대체됩니다. 지정자는 아래에 자세히 설명되어 있으며 C 라이브러리 함수 &lt;code&gt;printf(3)&lt;/code&gt; 에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="3834fb20eb3adec382d678c86de21e4a50afed73" translate="yes" xml:space="preserve">
          <source>The svn prompt is disabled by default because it's slow on large svn repositories. To enable it, modify fish_vcs_prompt to uncomment it. See &lt;a href=&quot;funced#cmd-funced&quot;&gt;funced&lt;/a&gt;.</source>
          <target state="translated">svn 프롬프트는 큰 svn 저장소에서 느리기 때문에 기본적으로 비활성화되어 있습니다. 활성화하려면 fish_vcs_prompt를 수정하여 주석 처리를 제거하십시오. &lt;a href=&quot;funced#cmd-funced&quot;&gt;funced를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="78761829292527d745af43c24666b70964c2aa8e" translate="yes" xml:space="preserve">
          <source>The third part of a right specifies what rights should be changed and can be any combination of &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, representing read, write and execute rights.</source>
          <target state="translated">권한의 세 번째 부분은 변경 될 권한을 지정하며 읽기, 쓰기 및 실행 권한을 나타내는 &lt;code&gt;r&lt;/code&gt; , &lt;code&gt;w&lt;/code&gt; 및 &lt;code&gt;x&lt;/code&gt; 의 조합 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d877ece01d39e8e40eb99d98ee821a1189d44e6e" translate="yes" xml:space="preserve">
          <source>The tool will write an example &lt;a href=&quot;bind#cmd-bind&quot;&gt;bind&lt;/a&gt; command matching the character sequence captured to stdout. If the character sequence matches a special key name (see &lt;code&gt;bind --key-names&lt;/code&gt;), both &lt;code&gt;bind CHARS ...&lt;/code&gt; and &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6aea30b4125640db0c941f62792d8db2583d13d" translate="yes" xml:space="preserve">
          <source>The tool will write an example &lt;code&gt;bind&lt;/code&gt; command matching the character sequence captured to stdout. If the character sequence matches a special key name (see &lt;code&gt;bind --key-names&lt;/code&gt;), both &lt;code&gt;bind CHARS ...&lt;/code&gt; and &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.</source>
          <target state="translated">도구는 stdout에 캡처 된 문자 순서와 일치 하는 예제 &lt;code&gt;bind&lt;/code&gt; 명령 을 작성합니다 . 문자 순서가 특수 키 이름과 일치하면 ( &lt;code&gt;bind --key-names&lt;/code&gt; 참조 ) &lt;code&gt;bind CHARS ...&lt;/code&gt; 및 &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; 사용법이 모두 표시됩니다. 문자 사이의 지연과 같이 수신 된 문자에 대한 추가 세부 사항은 stderr에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="33a16e681c6b2de523ee079730543d5aaaa072a3" translate="yes" xml:space="preserve">
          <source>The umask may be expressed either as an octal number, which represents the rights that will be removed by default, or symbolically, which represents the only rights that will be granted by default.</source>
          <target state="translated">umask는 기본적으로 제거 될 권한을 나타내는 8 진수 또는 기본적으로 부여 될 유일한 권한을 나타내는 상징적으로 표현 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff67961119e87010a71ffb5f982a7874fbd862b2" translate="yes" xml:space="preserve">
          <source>The user can change the settings of &lt;code&gt;fish&lt;/code&gt; by changing the values of certain variables.</source>
          <target state="translated">사용자는 특정 변수의 값을 변경하여 &lt;code&gt;fish&lt;/code&gt; 의 설정을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="750b14e6fcc9f04250c8bd648ed58f679784632d" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a &lt;em&gt;pipeline&lt;/em&gt;. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">사용자는 여러 명령을 하나의 &lt;em&gt;파이프 라인&lt;/em&gt; 으로 묶을 수 있습니다 . 즉, 한 명령의 표준 출력이 다음 명령에 대한 표준 입력으로 읽혀집니다. 파이프 문자 ' &lt;code&gt;|&lt;/code&gt; '. 예를 들면</target>
        </trans-unit>
        <trans-unit id="92734526becf97d0102e67503ae3f5ec70437f52" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a so called pipeline. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">사용자는 여러 명령을 소위 파이프 라인으로 묶을 수 있습니다. 이는 한 명령의 표준 출력이 다음 명령의 표준 입력으로 읽히는 것을 의미합니다. 이것은 파이프 문자 ' &lt;code&gt;|&lt;/code&gt; '. 예를 들어</target>
        </trans-unit>
        <trans-unit id="7b8b4db39167ca73155b4a80905652bbe883d472" translate="yes" xml:space="preserve">
          <source>The value of limit can be a number in the unit specified for the resource or one of the special values &lt;code&gt;hard&lt;/code&gt;, &lt;code&gt;soft&lt;/code&gt;, or &lt;code&gt;unlimited&lt;/code&gt;, which stand for the current hard limit, the current soft limit, and no limit, respectively.</source>
          <target state="translated">limit 값은 자원에 지정된 단위 또는 &lt;code&gt;hard&lt;/code&gt; , &lt;code&gt;soft&lt;/code&gt; 또는 &lt;code&gt;unlimited&lt;/code&gt; 특수 값 중 하나 일 수 있으며, 각각 현재 하드 제한, 현재 소프트 제한 및 제한 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9ca665e6a6512b8a0c95bbf980b6d1f431c9c003" translate="yes" xml:space="preserve">
          <source>The variables will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag variable will not be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2f6068a9dad88efc3494909770d142904666d0" translate="yes" xml:space="preserve">
          <source>The web interface allows you to view your functions, variables and history, and to make changes to your prompt and color configuration.</source>
          <target state="translated">웹 인터페이스를 사용하면 기능, 변수 및 기록을보고 프롬프트 및 색상 구성을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27cd5ebce2dff7c39841e898f946a341a35b41e4" translate="yes" xml:space="preserve">
          <source>Then the following invocations behave like this:</source>
          <target state="translated">그런 다음 다음 호출이 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="20c1373ed37a3dee3a825fe7d548ac46a6928bf3" translate="yes" xml:space="preserve">
          <source>Then, if you are happy with it, you can save it to disk by typing &lt;code&gt;funcsave fish_prompt&lt;/code&gt;. This saves the prompt in &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;. (Or, if you want, you can create that file manually from the start.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa54c06d5fdedec560ab96fcbf9871934330e6d3" translate="yes" xml:space="preserve">
          <source>There are a few important things that need to be noted about aliases:</source>
          <target state="translated">별명에 대해 주목해야 할 몇 가지 중요한 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a92222b51e2c8f981924f999522d99c277c7fff5" translate="yes" xml:space="preserve">
          <source>There are a few possible uses for different scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bead6244a797e147f47c59aa8f116fc1866372d" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;cmds/complete#cmd-complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">스위치에 인수가 필요함을 지정하고, 파일 이름 완성을 비활성화하고, 일부 조합에서만 사용할 수있는 완성을 만드는 등의 특수 스위치도 있습니다. &lt;code&gt;complete&lt;/code&gt; 명령에서 허용되는 다양한 스위치에 대한 자세한 설명은 설명서를 참조하십시오. 에 대한 &lt;a href=&quot;cmds/complete#cmd-complete&quot;&gt;완전한&lt;/a&gt; 내장 또는 쓰기 &lt;code&gt;complete --help&lt;/code&gt; 내부 &lt;code&gt;fish&lt;/code&gt; 껍질.</target>
        </trans-unit>
        <trans-unit id="3ba25ca105726fc0d596821887908ff16a459bda" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;commands#complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">또한 스위치에 인수가 필요하고 파일 이름 완성을 비활성화하고 일부 조합에서만 사용할 수있는 완성을 작성하는 등의 특수 스위치가 있습니다. &lt;code&gt;complete&lt;/code&gt; 명령이 허용하는 다양한 스위치에 대한 자세한 설명은 설명서를 참조하십시오. 에 대한 &lt;a href=&quot;commands#complete&quot;&gt;완전한&lt;/a&gt; 내장 또는 쓰기 &lt;code&gt;complete --help&lt;/code&gt; 내부 &lt;code&gt;fish&lt;/code&gt; 껍질.</target>
        </trans-unit>
        <trans-unit id="8f62b81b574864e97ff42dca00b7081081edae35" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;, &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt;, &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;and&lt;/a&gt; and &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;or&lt;/a&gt;.</source>
          <target state="translated">특정 기준이 충족되는 경우에만 명령을 실행할 수있는 네 가지 물고기 내장 기능이 있습니다. 이러한 내장 매크로는 &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;경우&lt;/a&gt; , &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;스위치&lt;/a&gt; , &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;및&lt;/a&gt; 및 &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;나&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2d9df96be8b6a2362ccd2ca558b23ccf8d96cd57" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">특정 기준을 충족하는 경우에만 명령을 실행할 수있는 4 개의 물고기 내장이 있습니다. 이러한 내장 매크로는 &lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;commands#switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2b2d351b6ae375a8f6e30f9a4f15f06461eb44b4" translate="yes" xml:space="preserve">
          <source>There are no multiline comments. If you want to make a comment span multiple lines, simply start each line with a &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41675f9cf420970709f08c4fa09e126c6834d476" translate="yes" xml:space="preserve">
          <source>There are no options to control globbing so it always behaves like that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255b5925229ebf64b3dccbaf56f554bfda33418a" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 매개 변수가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a56ebf43ed98e5db43b2052e83aa4d07a4140747" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;breakpoint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;breakpoint&lt;/code&gt; 대한 매개 변수가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c25f17ac972a261d801c33ab7a6b142dc2017014" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;fish_update_completions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; 에 대한 매개 변수가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b64e5bca9c9d038dcdaec525201a6e983cd4c039" translate="yes" xml:space="preserve">
          <source>There are numerous customization options, which can be controlled with fish variables.</source>
          <target state="translated">물고기 변수로 제어 할 수있는 다양한 사용자 정의 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="416f9bfa834c4b421dc3928904fcdb14dcbe03e2" translate="yes" xml:space="preserve">
          <source>There are numerous customization options, which can be controlled with git options or fish variables. git options, where available, take precedence over the fish variable with the same function. git options can be set on a per-repository or global basis. git options can be set with the &lt;code&gt;git config&lt;/code&gt; command, while fish variables can be set as usual with the &lt;a href=&quot;set#cmd-set&quot;&gt;set&lt;/a&gt; command.</source>
          <target state="translated">git 옵션 또는 fish 변수로 제어 할 수있는 다양한 사용자 정의 옵션이 있습니다. 가능한 경우 git 옵션은 동일한 기능을 가진 fish 변수보다 우선합니다. git 옵션은 리포지토리 또는 전역 기준으로 설정할 수 있습니다. git 옵션은 &lt;code&gt;git config&lt;/code&gt; 명령으로 설정할 수 있으며 fish 변수는 &lt;a href=&quot;set#cmd-set&quot;&gt;set&lt;/a&gt; 명령 으로 평소와 같이 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd120b1aba4ded7c561e9d4f21f84619af0191cb" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables.</source>
          <target state="translated">물고기에는 세 가지 종류의 변수가 있습니다 : 범용, 전역 및 지역 변수.</target>
        </trans-unit>
        <trans-unit id="031b665a362fca99dc2232105e16d4be76ec8e13" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables. Universal variables are shared between all fish sessions a user is running on one computer. Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;. Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;. The user can specify that a variable should have either global or local scope using the &lt;code&gt;-g/--global&lt;/code&gt; or &lt;code&gt;-l/--local&lt;/code&gt; switches.</source>
          <target state="translated">어류에는 3 가지 종류의 변수가 있습니다 : 보편적 변수, 전역 변수 및 지역 변수. 범용 변수는 사용자가 한 컴퓨터에서 실행중인 모든 피쉬 세션간에 공유됩니다. 전역 변수는 현재 피쉬 세션에 따라 다르지만 특정 블록 범위와 관련이 없으며 사용자가 &lt;code&gt;set -e&lt;/code&gt; 를 사용하여 명시 적으로 요청하지 않으면 지워지지 않습니다 . 지역 변수는 현재 피쉬 세션에 따라 다르며 특정 명령 블록과 관련이 있으며 특정 블록이 범위를 벗어나면 자동으로 지워집니다. 명령 블록은 하나의 명령으로 시작하는 일련의 명령이다 &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;function&lt;/code&gt; , &lt;code&gt;begin&lt;/code&gt; 또는 &lt;code&gt;switch&lt;/code&gt; , &lt;code&gt;end&lt;/code&gt; 명령으로 끝납니다 . 사용자는 &lt;code&gt;-g/--global&lt;/code&gt; 또는 &lt;code&gt;-l/--local&lt;/code&gt; 스위치를 사용하여 변수에 전역 또는 로컬 범위가 있어야 함을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e53b3e187fabe1e40c14b723e24b9fbf71412fee" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob.</source>
          <target state="translated">There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob.</target>
        </trans-unit>
        <trans-unit id="a8bb46a6b8bc305c23a119159486bd2d5c470ee5" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob. These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">물고기 3.0에는 두 가지 주요 변경 사항이 있습니다. caret &lt;code&gt;^&lt;/code&gt; 더 이상 stderr를 리디렉션하지 않고 물음표 &lt;code&gt;?&lt;/code&gt; 더 이상 glob가 아닙니다. 이러한 변경 사항은 기본적으로 해제되어 있습니다. 세션별로 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e66bd08a5ba89d0954ad9909f64383e4a87bdf0" translate="yes" xml:space="preserve">
          <source>There can be many variables with the same name, but different scopes. When you &lt;a href=&quot;#expand-variable&quot;&gt;use a variable&lt;/a&gt;, the smallest scoped variable of that name will be used. If a local variable exists, it will be used instead of the global or universal variable of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcc1aa82fa8e3e84e1746b6a27a38d0c390796a" translate="yes" xml:space="preserve">
          <source>There is a function called &lt;a href=&quot;cmds/alias#cmd-alias&quot;&gt;alias&lt;/a&gt;, but it's just a shortcut to make functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e415ead715f11f67297da7b425bcc5e4aa40b89" translate="yes" xml:space="preserve">
          <source>There is also a &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b4e1d35ca4c236214ba374558333566d7c39ce" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;$pipestatus&lt;/code&gt; list variable for the exit statuses &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; of processes in a pipe.</source>
          <target state="translated">There is also a &lt;code&gt;$pipestatus&lt;/code&gt; list variable for the exit statuses &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; of processes in a pipe.</target>
        </trans-unit>
        <trans-unit id="20ceb2460c137862f053425df367d426c42e4313" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;switch&lt;/code&gt; command:</source>
          <target state="translated">도있다 &lt;code&gt;switch&lt;/code&gt; 명령 :</target>
        </trans-unit>
        <trans-unit id="57875a262d2c2eb3777d4d6118abc803d714194f" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;$''&lt;/code&gt;, instead the sequences that would transform are transformed &lt;em&gt;when unquoted&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9457a5982580c619b1f010b4a7510be7a176dfe" translate="yes" xml:space="preserve">
          <source>There is one breaking change in fish 3.1: &lt;code&gt;string replace -r&lt;/code&gt; does a superfluous round of escaping for the replacement, so escaping backslashes would look like &lt;code&gt;string replace -ra '([ab])' '\\\\\\\$1' a&lt;/code&gt;. This flag removes that if turned on, so &lt;code&gt;'\\\\$1'&lt;/code&gt; is enough.</source>
          <target state="translated">There is one breaking change in fish 3.1: &lt;code&gt;string replace -r&lt;/code&gt; does a superfluous round of escaping for the replacement, so escaping backslashes would look like &lt;code&gt;string replace -ra '([ab])' '\\\\\\\$1' a&lt;/code&gt; . This flag removes that if turned on, so &lt;code&gt;'\\\\$1'&lt;/code&gt; is enough.</target>
        </trans-unit>
        <trans-unit id="b0866a618c196f1ac7d2ced3309d7b238c006085" translate="yes" xml:space="preserve">
          <source>There may be many variables with the same name, but different scopes. When using a variable, the variable scope will be searched from the inside out, i.e. a local variable will be used rather than a global variable with the same name, a global variable will be used rather than a universal variable with the same name.</source>
          <target state="translated">이름은 같지만 범위가 다른 변수가 많이있을 수 있습니다. 변수를 사용할 때 변수 범위는 내부에서 검색됩니다. 즉, 같은 이름의 전역 변수 대신 로컬 변수가 사용되고, 같은 이름의 범용 변수 대신 전역 변수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d7f028aa2b19c153baae8d83c317ae110446208a" translate="yes" xml:space="preserve">
          <source>These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">다음은 &lt;code&gt;fish&lt;/code&gt; 제공 하는 범용 탭 완성입니다 .</target>
        </trans-unit>
        <trans-unit id="a541ca19e60c8c36165c2c4faab471af97abf450" translate="yes" xml:space="preserve">
          <source>These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">These changes are off by default. They can be enabled on a per session basis:</target>
        </trans-unit>
        <trans-unit id="0f240a03ecd9ebdbd8bb2b071dbc72c7fb11026f" translate="yes" xml:space="preserve">
          <source>These colors, and many more, can be changed by running &lt;code&gt;fish_config&lt;/code&gt;, or by modifying &lt;a href=&quot;index#variables-color&quot;&gt;color variables&lt;/a&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7972582e9c4968e777fc42db67d9b318fa79e46" translate="yes" xml:space="preserve">
          <source>These colors, and many more, can be changed by running &lt;code&gt;fish_config&lt;/code&gt;, or by modifying variables directly.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 를 실행 하거나 변수를 직접 수정 하여이 색상 등을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91e1e5aba0c598515d08d40af2f8d04dd57004f4" translate="yes" xml:space="preserve">
          <source>These files are all executed on the startup of every shell. If you want to run a command only on starting an interactive shell, use the exit status of the command &lt;code&gt;status --is-interactive&lt;/code&gt; to determine if the shell is interactive. If you want to run a command only when using a login shell, use &lt;code&gt;status --is-login&lt;/code&gt; instead. This will speed up the starting of non-interactive or non-login shells.</source>
          <target state="translated">이 파일들은 모든 쉘이 시작될 때 모두 실행됩니다. 대화식 쉘을 시작할 때만 명령을 실행하려면 명령 &lt;code&gt;status --is-interactive&lt;/code&gt; 의 종료 상태를 사용 하여 쉘이 대화식인지 판별하십시오. 로그인 쉘을 사용할 때만 명령을 실행하려면 &lt;code&gt;status --is-login&lt;/code&gt; 을 대신 사용하십시오. 비 대화식 또는 비 로그인 셸의 시작 속도가 빨라집니다.</target>
        </trans-unit>
        <trans-unit id="80b96b3d74710e83d20ff5ac21723a42f2f052d6" translate="yes" xml:space="preserve">
          <source>These flags can appear before or immediately after one of the sub-commands listed above.</source>
          <target state="translated">이 플래그는 위에 나열된 하위 명령 중 하나 바로 앞이나 뒤에 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a1a70df80594e6385f1bb77aed0566514490dd4" translate="yes" xml:space="preserve">
          <source>These options can also be changed via the $FISH_DEBUG and $FISH_DEBUG_OUTPUT variables. The categories enabled via &lt;code&gt;--debug&lt;/code&gt; are &lt;em&gt;added&lt;/em&gt; to the ones enabled by $FISH_DEBUG, so they can be disabled by prefixing them with &lt;code&gt;-&lt;/code&gt; (&lt;code&gt;reader-*,-ast*&lt;/code&gt; enables reader debugging and disables ast debugging).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018467e6400b14718548d65eb59c273e2720ed52" translate="yes" xml:space="preserve">
          <source>These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.</source>
          <target state="translated">이러한 경로는 빌드, 설치 또는 런타임시 설정된 매개 변수에 의해 제어되며 위에 나열된 기본값과 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0f227d731eb85d679b8689a23b63dd21f1e30dc" translate="yes" xml:space="preserve">
          <source>These problems are generally caused by the &lt;a href=&quot;index#initialization&quot;&gt;user initialization file&lt;/a&gt; (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;) producing output when started in non-interactive mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59764234fbda3a5ae9dc6fc3ff0782f754b46b8c" translate="yes" xml:space="preserve">
          <source>These rely on external tools. Currently xsel, xclip, wl-copy/wl-paste and pbcopy/pbpaste are supported.</source>
          <target state="translated">These rely on external tools. Currently xsel, xclip, wl-copy/wl-paste and pbcopy/pbpaste are supported.</target>
        </trans-unit>
        <trans-unit id="5ff2e8e4beb1e0db4118c370fb4cace2f8ea572e" translate="yes" xml:space="preserve">
          <source>These variables are passed to the function as local exported variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24f98a189aa3819db3885dc20417a7ef5fd2074" translate="yes" xml:space="preserve">
          <source>They are all used in an infix manner - &lt;code&gt;5 + 2&lt;/code&gt;, not &lt;code&gt;+ 5 2&lt;/code&gt;.</source>
          <target state="translated">그것들은 모두 &lt;code&gt;+ 5 2&lt;/code&gt; 아닌 &lt;code&gt;5 + 2&lt;/code&gt; 방식으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="1c0f73538164b821e962b37c1ab4243fee6900c4" translate="yes" xml:space="preserve">
          <source>This also applies to &lt;a href=&quot;cmds/fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt; and &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e037c16e89673bc6c789c7a56fb11f5ef6afe572" translate="yes" xml:space="preserve">
          <source>This also applies to fish - when it starts up, it receives environment variables from its parent (usually the terminal). These typically include system configuration like &lt;a href=&quot;#path&quot;&gt;$PATH&lt;/a&gt; and &lt;a href=&quot;#variables-locale&quot;&gt;locale variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af768071c5b224ad5b92ddb2ba1221dcbc0d859d" translate="yes" xml:space="preserve">
          <source>This also happens after &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. Therefore strings might be eliminated. This can be avoided by making the inner command return a trailing newline.</source>
          <target state="translated">&lt;a href=&quot;#expand-command-substitution&quot;&gt;명령 대체&lt;/a&gt; 후에도 발생합니다 . 따라서 문자열이 제거 될 수 있습니다. 내부 명령이 후행 줄 바꿈을 리턴하도록하여이를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5862d4da112945498ea94b6d7f269d1e61fc0beb" translate="yes" xml:space="preserve">
          <source>This also happens after &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. To avoid tokens disappearing there, make the inner command return a trailing newline, or store the output in a variable and double-quote it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee81161214cb28f5e40645cd788da1b748a880bf" translate="yes" xml:space="preserve">
          <source>This also means that a few things are unsupportable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c81de6d4b84d88e0bc761153be31bad7326fa6" translate="yes" xml:space="preserve">
          <source>This assumes you installed fish to /usr/local/bin, which is the default location when you've compiled it yourself. If you installed it with a package manager, the usual location is /usr/bin/fish, but package managers typically already add it to /etc/shells. Just substitute the correct location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2c383ecda8a4c5bf0708b66a394d7bf089bafc" translate="yes" xml:space="preserve">
          <source>This bit of the documentation is a quick guide on how to get going. If you are new to this, see the &lt;a href=&quot;tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">This bit of the documentation is a quick guide on how to get going. If you are new to this, see the &lt;a href=&quot;tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="242bcbd19612b56a15e5401c1d4c647240f20532" translate="yes" xml:space="preserve">
          <source>This calls the &lt;a href=&quot;cmds/echo#cmd-echo&quot;&gt;echo&lt;/a&gt; command. &lt;code&gt;echo&lt;/code&gt; writes its arguments to the screen. In the example above, the output is &lt;code&gt;hello world&lt;/code&gt;. Everything in fish is done with commands. There are commands for repeating other commands, commands for assigning variables, commands for treating a group of commands as a single command, etc. All of these commands follow the same basic syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a28f4bed992d7cf613847d7498fafe31511aea" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same basic syntax.</source>
          <target state="translated">This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same basic syntax.</target>
        </trans-unit>
        <trans-unit id="b50932aeaca87e43aadc296b2abd6503a42d3550" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same simple syntax.</source>
          <target state="translated">&lt;code&gt;echo&lt;/code&gt; 명령을 호출합니다 . &lt;code&gt;echo&lt;/code&gt; 는 인수를 화면에 쓰는 명령입니다. 위의 예에서 출력은 'hello world'입니다. 물고기의 모든 것은 명령으로 수행됩니다. 명령 집합을 여러 번 수행하는 명령, 변수 할당 명령, 명령 그룹을 단일 명령으로 처리하는 명령 등이 있습니다. 모든 단일 명령은 동일한 간단한 구문을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="d7f43076657a40a0a56470982d549a61a4508f48" translate="yes" xml:space="preserve">
          <source>This can be quite useful. For example, if you want to go through all the files in all the directories in $PATH, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366a5d79af152ebea92d5f861ed8a475043b7941" translate="yes" xml:space="preserve">
          <source>This can be written as:</source>
          <target state="translated">이것은 다음과 같이 쓸 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="2c3fa67d634b278ec1a7802bf809ac5774656af1" translate="yes" xml:space="preserve">
          <source>This code will add some directories to $PATH if they aren't yet included:</source>
          <target state="translated">이 코드는 아직 포함되지 않은 경우 $ PATH에 일부 디렉토리를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="46b694f24aed40624e847ae57ae10b126b23d033" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments in a manner 100% identical to how fish builtin commands handle their arguments. You pass a sequence of arguments that define the options recognized, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). More on this in the &lt;a href=&quot;#argparse-usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">이 명령을 사용하면 피쉬 스크립트 및 함수가 피쉬 내장 명령이 인수를 처리하는 방식과 100 % 동일한 방식으로 인수를 쉽게 처리 할 수 ​​있습니다. 인식 된 옵션을 정의하고 리터럴 ( &lt;code&gt;--&lt;/code&gt; ) 다음에 구문 분석 할 인수 (리터럴 ( &lt;code&gt;--&lt;/code&gt; ) 도 포함 할 수 있음)를 정의하는 일련의 인수를 전달합니다 . 자세한 내용은 아래 &lt;a href=&quot;#argparse-usage&quot;&gt;사용법&lt;/a&gt; 섹션 에서 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="51ecea6002832d6f166772d002d2b9826d4db24b" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments like how fish builtin commands handle their arguments. You pass arguments that define the known options, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). &lt;code&gt;argparse&lt;/code&gt; then sets variables to indicate the passed options with their values, and sets $argv (and always $argv) to the remaining arguments. More on this in the &lt;a href=&quot;#usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">This command makes it easy for fish scripts and functions to handle arguments like how fish builtin commands handle their arguments. You pass arguments that define the known options, followed by a literal &lt;code&gt;--&lt;/code&gt; , then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt; ). &lt;code&gt;argparse&lt;/code&gt; then sets variables to indicate the passed options with their values, and sets $argv (and always $argv) to the remaining arguments. More on this in the &lt;a href=&quot;#usage&quot;&gt;usage&lt;/a&gt; section below.</target>
        </trans-unit>
        <trans-unit id="20cd8d04285455a5eeee7e58dc05b32ca7729358" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;#argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">이 명령은 &lt;a href=&quot;#argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt; 명령 과 함께 사용하기에 적합한 옵션 사양을 생성하는 방법을 제공합니다 . 물론이 명령을 사용하지 않고 옵션 사양을 직접 작성할 수 있습니다. 그러나 명확성을 위해 이것을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a74b8d6f46def2454cb1a7815efcf306bc15eb2a" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</target>
        </trans-unit>
        <trans-unit id="e59ff744d5f96fc84e3687f1f094a0f6cc1182bc" translate="yes" xml:space="preserve">
          <source>This command was introduced in fish 3.2.0. Previous versions of fish used the &quot;fish_command_not_found&quot; &lt;a href=&quot;../index#event&quot;&gt;event&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7278174eb8df4d8cf8cf4810097720c8a46b647" translate="yes" xml:space="preserve">
          <source>This creates a temporary file, stores the output of the command in that file and prints the filename, so it is given to the outer command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07448165c0f812cb8478f38c84a94b14d2215ae2" translate="yes" xml:space="preserve">
          <source>This does not overwrite custom completions.</source>
          <target state="translated">사용자 정의 완료를 덮어 쓰지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8d876af295a974aa3fa22db08bb217710ab623ce" translate="yes" xml:space="preserve">
          <source>This does not read numbers given as &lt;code&gt;+NNN&lt;/code&gt;, only those that look like flags - &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6147eda0417a76ae63d83548f1bb6d3684130031" translate="yes" xml:space="preserve">
          <source>This file has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try &lt;code&gt;command printf&lt;/code&gt;.</source>
          <target state="translated">이 파일은 GNU Coreutils 버전 6.9의 printf에서 가져 왔습니다. OS와 함께 제공된 것과 같은 최신 버전의 printf를 사용하려면 printf &lt;code&gt;command printf&lt;/code&gt; 시도하십시오 .</target>
        </trans-unit>
        <trans-unit id="36a27e8809bc8ecec60cf5b8b496d2f657edff50" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Please call &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt;</source>
          <target state="translated">이 기능은 더 이상 사용되지 않습니다. &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt; 연락 하기</target>
        </trans-unit>
        <trans-unit id="6bb30a141584bbcfda9f7bb389eaff8fab492867" translate="yes" xml:space="preserve">
          <source>This function takes whatever arguments it gets and prints the first and third:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ffa9c43b28edd0a7fd5ea7d8c790c69c51b478" translate="yes" xml:space="preserve">
          <source>This goes over every directory in $PATH separately and prints a line saying it is in the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbee0ce24ddb2a7779ce4b45c3fe6d00ac4de3f" translate="yes" xml:space="preserve">
          <source>This indicates how the command fared - 0 usually means success, while the others signify kinds of failure. For instance fish's &lt;code&gt;set --query&lt;/code&gt; returns the number of variables it queried that weren't set - &lt;code&gt;set --query PATH&lt;/code&gt; usually returns 0, &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; usually returns 2.</source>
          <target state="translated">This indicates how the command fared - 0 usually means success, while the others signify kinds of failure. For instance fish's &lt;code&gt;set --query&lt;/code&gt; returns the number of variables it queried that weren't set - &lt;code&gt;set --query PATH&lt;/code&gt; usually returns 0, &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; usually returns 2.</target>
        </trans-unit>
        <trans-unit id="42846739d24ee758a7b3a2194b5979dbb4c14902" translate="yes" xml:space="preserve">
          <source>This is a kind of function known as a &lt;a href=&quot;#syntax-function-wrappers&quot;&gt;wrapper&lt;/a&gt; or &quot;alias&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbea16193e927515d0dc3be9146ab095157af42" translate="yes" xml:space="preserve">
          <source>This is a short explanation of some of the commonly used words in fish.</source>
          <target state="translated">이것은 물고기에서 일반적으로 사용되는 단어에 대한 간단한 설명입니다.</target>
        </trans-unit>
        <trans-unit id="c08782246abd769f65e5240248630e4c4eb762a8" translate="yes" xml:space="preserve">
          <source>This is an alternative to aliases, and has the advantage that you see the actual command before using it, and the actual command will be stored in history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d244f1f10393a3fd4f3ebf581d37f923228ef19" translate="yes" xml:space="preserve">
          <source>This is implemented as a function and a builtin. The function will attempt to use an external realpath command if one can be found. Otherwise it falls back to the builtin. The builtin does not support any options. It's meant to be used only by scripts which need to be portable. The builtin implementation behaves like GNU realpath when invoked without any options (which is the most common use case). In general scripts should not invoke the builtin directly. They should just use &lt;code&gt;realpath&lt;/code&gt;.</source>
          <target state="translated">이것은 함수와 내장으로 구현됩니다. 함수는 외부 realpath 명령을 찾을 수있는 경우이를 사용하려고 시도합니다. 그렇지 않으면 내장으로 돌아갑니다. 내장은 어떤 옵션도 지원하지 않습니다. 이식성이 필요한 스크립트 만 사용해야합니다. 내장 구현은 옵션 (가장 일반적인 사용 사례)없이 호출 될 때 GNU 리얼 패스처럼 동작합니다. 일반적으로 스크립트는 내장을 직접 호출해서는 안됩니다. 그들은 단지 &lt;code&gt;realpath&lt;/code&gt; 를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="02eb29102e35b60198abd6b2a437d296ee6b593d" translate="yes" xml:space="preserve">
          <source>This is more important to fish than other shells because features like syntax highlighting and autosuggestions are implemented by moving the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1d4171e513cf57adfa5dbd82bf66ed41edba27" translate="yes" xml:space="preserve">
          <source>This is not an exhaustive list and the fish project has no opinion regarding the merits of the repositories listed above or the scripts found therein.</source>
          <target state="translated">이것은 철저한 목록이 아니며 어류 프로젝트는 위에 나열된 리포지토리의 장점이나 그 안에있는 스크립트에 대한 의견이 없습니다.</target>
        </trans-unit>
        <trans-unit id="096d775aa834b5a98fc75f9c9df8cd5ad1df3f6c" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;index#expand-brace&quot;&gt;Brace expansion&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;index#expand-brace&quot;&gt;Brace 확장&lt;/a&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="29a7e62ae3df780620ab5b6db68453aaf61e47e8" translate="yes" xml:space="preserve">
          <source>This is similar to bash's &quot;failglob&quot; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b5c6aa51fef3c82ea1bd8fddb7c95bed61e89d" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;code&gt;fish&lt;/code&gt;, the friendly interactive shell. &lt;code&gt;fish&lt;/code&gt; is a user friendly commandline shell intended mostly for interactive use. A shell is a program used to execute other programs. For the latest information on &lt;code&gt;fish&lt;/code&gt;, please visit the &lt;a href=&quot;https://fishshell.com/&quot;&gt;&lt;code&gt;fish&lt;/code&gt; homepage&lt;/a&gt;.</source>
          <target state="translated">친숙한 대화식 쉘인 &lt;code&gt;fish&lt;/code&gt; 에 대한 문서입니다 . &lt;code&gt;fish&lt;/code&gt; 는 주로 대화식으로 사용하기위한 사용자 친화적 인 명령 줄 셸입니다. 쉘은 다른 프로그램을 실행하는 데 사용되는 프로그램입니다. &lt;code&gt;fish&lt;/code&gt; 에 대한 최신 정보 는 &lt;a href=&quot;https://fishshell.com/&quot;&gt; &lt;code&gt;fish&lt;/code&gt; 홈페이지&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4dbd4206fa5ed554553ccafdb81158a2765cb589" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;em&gt;fish&lt;/em&gt;, the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell.</source>
          <target state="translated">This is the documentation for &lt;em&gt;fish&lt;/em&gt;, the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell.</target>
        </trans-unit>
        <trans-unit id="92aefc1a52c71a85a78cc971b6c1d5c9539281b3" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;strong&gt;fish&lt;/strong&gt;, the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577bd6355fb298c4b6b2d6488f451eaa11f5dbb8" translate="yes" xml:space="preserve">
          <source>This is the preferred way to define your prompt as well:</source>
          <target state="translated">프롬프트를 정의 할 때 선호되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="d682fbb50ebb7a2307c888a8c708e837d0f174a7" translate="yes" xml:space="preserve">
          <source>This is to give you a quick overview if you come from bash (or to a lesser extent other shells like zsh or ksh) and want to know how fish differs. Fish is intentionally not POSIX-compatible and as such some of the things you are used to work differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36aa325151397e7468490d9f008691d69c01ff3b" translate="yes" xml:space="preserve">
          <source>This is typically used together with &lt;a href=&quot;funced#cmd-funced&quot;&gt;funced&lt;/a&gt;, which will open the function in your editor and load it in the current seession afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d9754ec8407965c3cbfc3b364ea4b70ea05378" translate="yes" xml:space="preserve">
          <source>This is useful to explain what and why you are doing something:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e20bc0bbf6f3a094416aeb9967f247c41c79abd" translate="yes" xml:space="preserve">
          <source>This isn't specific to argparse but common to all things using &lt;code&gt;getopt(3)&lt;/code&gt; (if they have optional arguments at all). That &lt;code&gt;grep&lt;/code&gt; example is how GNU grep actually behaves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae35cced4effb763cdd5c51f3c938b7ee1f84dcc" translate="yes" xml:space="preserve">
          <source>This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with &lt;code&gt;`fish /path/to/script&lt;/code&gt; they aren't required (but don't hurt either!).</source>
          <target state="translated">This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with &lt;code&gt;`fish /path/to/script&lt;/code&gt; they aren't required (but don't hurt either!).</target>
        </trans-unit>
        <trans-unit id="4bb1e8c793d879fcc7211d62126c449110f747e8" translate="yes" xml:space="preserve">
          <source>This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with &lt;code&gt;fish /path/to/script&lt;/code&gt;, a shebang is not required (but it doesn't hurt!).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44756654753bba67ac9fe0b2cb5461aed36daaa0" translate="yes" xml:space="preserve">
          <source>This line tells the shell to execute the file with the bash interpreter, that is located at the path &lt;code&gt;/bin/bash&lt;/code&gt;.</source>
          <target state="translated">This line tells the shell to execute the file with the bash interpreter, that is located at the path &lt;code&gt;/bin/bash&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8cc576b35450257aadce9343fd3afaecbb82068c" translate="yes" xml:space="preserve">
          <source>This means that the global value takes precedence over the universal value.</source>
          <target state="translated">이것은 글로벌 가치가 보편적 가치보다 우선한다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="47d6e70d0d49cd275f91f52dd4bedfd9891bd255" translate="yes" xml:space="preserve">
          <source>This page can be viewed via &lt;code&gt;help index&lt;/code&gt; (or just &lt;code&gt;help&lt;/code&gt;) or &lt;code&gt;man fish-doc&lt;/code&gt;. The tutorial can be viewed with &lt;code&gt;help tutorial&lt;/code&gt; or &lt;code&gt;man fish-tutorial&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d8f78e08b40db86d5c72927eaed6ea7f694252" translate="yes" xml:space="preserve">
          <source>This page gives an overview of fish's features, syntax, and interface. If this is your first time using fish, see the &lt;a href=&quot;tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ce226a719bb61f2e28f1a537f01bad1bd3083a" translate="yes" xml:space="preserve">
          <source>This printf has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try &lt;code&gt;command printf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9cf3fb5792de48928eff8cebc96f16a1c55ae3" translate="yes" xml:space="preserve">
          <source>This problem may manifest as messages such as &quot;&lt;code&gt;Received message too long&lt;/code&gt;&quot;, &quot;&lt;code&gt;open terminal
failed: not a terminal&lt;/code&gt;&quot;, &quot;&lt;code&gt;Bad packet length&lt;/code&gt;&quot;, or &quot;&lt;code&gt;Connection refused&lt;/code&gt;&quot; with strange output in &lt;code&gt;ssh_exchange_identification&lt;/code&gt; messages in the debug log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d7db524de6aeb12230612416aa7c659663fe8a" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory.</source>
          <target state="translated">위에 표시된이 프롬프트는 &lt;code&gt;fish&lt;/code&gt; 기본 프롬프트입니다. 사용자 이름, 호스트 이름 및 작업 디렉토리가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c7a03d7fff57e6a14cd855d9e527df2a9ce2b8e1" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory. - to change this prompt see &lt;a href=&quot;#prompt&quot;&gt;how to change your prompt&lt;/a&gt; - to switch to fish permanently see &lt;a href=&quot;#switching-to-fish&quot;&gt;switch your default shell to fish&lt;/a&gt;.</source>
          <target state="translated">This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory. - to change this prompt see &lt;a href=&quot;#prompt&quot;&gt;how to change your prompt&lt;/a&gt; - to switch to fish permanently see &lt;a href=&quot;#switching-to-fish&quot;&gt;switch your default shell to fish&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9b0aa0ea070dfc024abe95e676b3f5a9f72a6d28" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the fish default prompt: it shows your username, hostname, and working directory. - to change this prompt see &lt;a href=&quot;#prompt&quot;&gt;how to change your prompt&lt;/a&gt; - to switch to fish permanently see &lt;a href=&quot;#switching-to-fish&quot;&gt;switch your default shell to fish&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4bee240833f3605c3cce7670c50d418746b9a0" translate="yes" xml:space="preserve">
          <source>This prompt would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773977870866a71aecd2e7e7f8a3ac68810d217e" translate="yes" xml:space="preserve">
          <source>This requires that your terminal supports programmable titles and the feature is turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09aac7de9ce9cd61579136cf9dcf630266cb3674" translate="yes" xml:space="preserve">
          <source>This runs the command &lt;code&gt;echo&lt;/code&gt; with the arguments &lt;code&gt;hello&lt;/code&gt; and &lt;code&gt;world&lt;/code&gt;.</source>
          <target state="translated">This runs the command &lt;code&gt;echo&lt;/code&gt; with the arguments &lt;code&gt;hello&lt;/code&gt; and &lt;code&gt;world&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ef39c78e496aafe0f43eff2fcf48ff7024883cf" translate="yes" xml:space="preserve">
          <source>This section describes how to install, uninstall, start, and exit the fish shell. It also explains how to make fish the default shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9eeea9640faa8417502c909ed567d93f8c26ac1" translate="yes" xml:space="preserve">
          <source>This section is on how to install, uninstall, start and exit a fish shell and on how to make fish the default shell:</source>
          <target state="translated">This section is on how to install, uninstall, start and exit a fish shell and on how to make fish the default shell:</target>
        </trans-unit>
        <trans-unit id="25342c42f4612fb5670f158c84589f2f2bbbea7d" translate="yes" xml:space="preserve">
          <source>This shows a few differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8365c7b8dad5a5bec81e8a157c63659de9f8f9c9" translate="yes" xml:space="preserve">
          <source>This syntax is supported since fish 3.1.</source>
          <target state="translated">This syntax is supported since fish 3.1.</target>
        </trans-unit>
        <trans-unit id="c731bb20159682c25c6b4c24ba8357e2f689c68f" translate="yes" xml:space="preserve">
          <source>This tells you that there exists a file that starts with '&lt;code&gt;somefi&lt;/code&gt;', which is useful feedback as you type.</source>
          <target state="translated">이것은 ' &lt;code&gt;somefi&lt;/code&gt; '로 시작하는 파일이 있다는 것을 알려주며 , 입력 할 때 유용한 피드백입니다.</target>
        </trans-unit>
        <trans-unit id="4b7a09d6b5d8f49fa5d96567ba9ae8e8dc675a1a" translate="yes" xml:space="preserve">
          <source>This tells you that there exists a file that starts with &lt;code&gt;somefi&lt;/code&gt;, which is useful feedback as you type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffb61bd1cd5715a466531b7a657f71109690e35" translate="yes" xml:space="preserve">
          <source>This test is mostly POSIX-compatible.</source>
          <target state="translated">이 테스트는 대부분 POSIX 호환입니다.</target>
        </trans-unit>
        <trans-unit id="44595c0d7ccfd8b4e39fcc6fb1c75e80391912f7" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">이 학습서는 명령 행 쉘 및 Unix 명령에 대한 기본 지식을 가지고 있으며 작업중인 &lt;code&gt;fish&lt;/code&gt; 사본이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="c9de5aabc7c0b11e4da0fd1f2d758a3b173718c1" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of fish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48d5a2439da006a37325d3b33d3046473c20c81" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure where to put your own customisations, use &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;.</source>
          <target state="translated">이 광범위한 검색은 혼란 스러울 수 있습니다. 자신의 사용자 정의 위치를 ​​모르는 경우 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f358815973e2ad20875ee5c37318a06668178037" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your completions probably belong in &lt;code&gt;~/.config/fish/completions&lt;/code&gt;.</source>
          <target state="translated">이 광범위한 검색은 혼란 스러울 수 있습니다. 확실하지 않은 경우, 완료는 &lt;code&gt;~/.config/fish/completions&lt;/code&gt; 에 속합니다 .</target>
        </trans-unit>
        <trans-unit id="fc8f74e5e402cdc09fe9163449bdf559dd908a47" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your functions probably belong in &lt;code&gt;~/.config/fish/functions&lt;/code&gt;.</source>
          <target state="translated">이 광범위한 검색은 혼란 스러울 수 있습니다. 확실하지 않은 경우 기능은 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 에 속할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a9195514b37c65c22f746374d557ac1c811b3ed" translate="yes" xml:space="preserve">
          <source>This will beep when the most recent job completes.</source>
          <target state="translated">가장 최근 작업이 완료되면 경고음이 울립니다.</target>
        </trans-unit>
        <trans-unit id="2695319d77a04db7d59336c7fd04aa2a313c7f47" translate="yes" xml:space="preserve">
          <source>This will open up your editor, allowing you to modify the function. When you're done, save and quit. Fish will reload the function, so you should see the changes right away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d275d705f3563e034e584f7f1416ca37d5829386" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;mkdir&lt;/code&gt; command, and if it is successful, change the current working directory to the one just created.</source>
          <target state="translated">&lt;code&gt;mkdir&lt;/code&gt; 명령 이 실행되고 성공하면 현재 작업중인 디렉토리를 방금 작성한 디렉토리로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="9aaacc060f4b5ae831a842fd2305208286294877" translate="yes" xml:space="preserve">
          <source>This works the other way around as well! If fish is started by something else, it inherits that parents exported variables. So if your terminal emulator starts fish, and it exports &lt;code&gt;$LANG&lt;/code&gt; set to &lt;code&gt;en_US.UTF-8&lt;/code&gt;, fish will receive that setting. And whatever started your terminal emulator also gave &lt;em&gt;it&lt;/em&gt; some variables that it will then pass on unless it specifically decides not to. This is how fish usually receives the values for things like &lt;code&gt;$LANG&lt;/code&gt;, &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;$TERM&lt;/code&gt;, without you having to specify them again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af34e672544a6ca1366a112af55970d3795853d6" translate="yes" xml:space="preserve">
          <source>Three arguments indicate a range from START to END with a spacing of STEP between possible outputs. &lt;code&gt;random choice&lt;/code&gt; will select one random item from the succeeding arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db7b1d5a15270db41f2cc8f791f0d914b51536a" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee864a54df8fc82a493855e23af51940c281088e" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or</source>
          <target state="translated">To accept the autosuggestion (replacing the command line contents), press right arrow or</target>
        </trans-unit>
        <trans-unit id="f891073aa4578597be2a0dcd4d98d094f936e0cd" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept the first suggested word, press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. If the autosuggestion is not what you want, just ignore it: it won't execute unless you accept it.</source>
          <target state="translated">자동 제안을 수락하려면 (명령 줄 내용 바꾸기) 오른쪽 화살표 또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F를&lt;/b&gt; 누르십시오 . 첫 번째 추천 단어를 눌러 수락하려면 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; 또는 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;F를&lt;/b&gt; . 자동 제안이 원하는 것이 아니라면 무시하십시오. 수락하지 않으면 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b8736772d7b0120e4918f841f4d7512238ae0d0f" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit</source>
          <target state="translated">To accept the autosuggestion, hit</target>
        </trans-unit>
        <trans-unit id="18bff7130ea79ac3d65a254db2e29fd6582707f0" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit &lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept a single word of the autosuggestion, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (right arrow). If the autosuggestion is not what you want, just ignore it.</source>
          <target state="translated">자동 제안을 수락하려면 &lt;b&gt;&amp;rarr;&lt;/b&gt; 또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F를&lt;/b&gt; 누르십시오 . 자기 암시의 단어 수락하려면 &lt;em&gt;Alt 키를&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; (오른쪽 화살표). 자동 제안이 원하는 것이 아니라면 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="bf3b8743951a6f601c9691879cf6b325619cbbc5" translate="yes" xml:space="preserve">
          <source>To access one element of a list, use the index of the element inside of square brackets, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490972bea5b74c2308bba9f42c4d177bcaabea44" translate="yes" xml:space="preserve">
          <source>To append standard error to a file, use &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
