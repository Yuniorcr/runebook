<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="dd47d3d9defb9d0e06bd3e10365751c8e663406f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt;, as created by &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; and modified by &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67052930f5ba11262dce6b9369319b549f57f918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; and modified by &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; and modified by &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fa06ced14a3385987b86c9e9788919b13ad4eba2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by the &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; 는 &lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt; 명령 으로 작성된 현재 디렉토리 스택을 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="960d1e17f7b9ecf2dc9f4146dd86d90f7a66c6a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt; from the job list without terminating them.</source>
          <target state="translated">&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt; from the job list without terminating them.</target>
        </trans-unit>
        <trans-unit id="68e9e94ab8f86bdeefa011d87a89eb714e2e975f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all jobs from the job list without terminating them.</source>
          <target state="translated">&lt;code&gt;disown (jobs -p)&lt;/code&gt; 은 작업을 종료하지 않고 작업 목록에서 모든 작업을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="96ed64c4a46b71c7f378a79bc509571c57d254f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</target>
        </trans-unit>
        <trans-unit id="8a033e91a71f36b0fee3effb2f84125242340bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; 은 &lt;a href=&quot;index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 목록에서 지정된 작업 을 제거합니다 . 작업 자체는 계속 존재하지만 물고기는 더 이상 추적하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c723a54d18efe8d350eb3bbea07e3d214e66566" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; returns 0 if all specified jobs were disowned successfully, and 1 if any problems were encountered.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; 은 지정된 모든 작업이 성공적으로 해제되면 0을 반환하고 문제가 발생하면 1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1ecb4eb0616062c503a5f344f1a05890c949fe35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;down-line&lt;/code&gt;, move down one line</source>
          <target state="translated">&lt;code&gt;down-line&lt;/code&gt; , move down one line</target>
        </trans-unit>
        <trans-unit id="9b690e3c2f3c4d26267990ca1121e08803e26790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;downcase-word&lt;/code&gt;, make the current word lowercase</source>
          <target state="translated">&lt;code&gt;downcase-word&lt;/code&gt; , 현재 단어를 소문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c8ce83fdd366a12c3214fbb25e2354db22918e72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; - Euler's number.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; - 오일러 번호.</target>
        </trans-unit>
        <trans-unit id="b60b17e75641cc38e1c4124096a48c500b5a0905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echo $flounder &amp;gt;&amp;amp;2 | less&lt;/code&gt; is the first job, &lt;code&gt;and echo $catfish&lt;/code&gt; the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db82cff03deb4d0edad47e48c508110149601fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echo&lt;/code&gt; displays a string of text.</source>
          <target state="translated">&lt;code&gt;echo&lt;/code&gt; 는 문자열을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="197832f8ace5133971e0d466b344b70886d4b7fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt;. The arguments are passed to the event handlers as function arguments.</source>
          <target state="translated">&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt;. The arguments are passed to the event handlers as function arguments.</target>
        </trans-unit>
        <trans-unit id="d4ab97d4f9361c5405fbd1cb8b1c830e462276d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called event handlers. The arguments are passed to the event handlers as function arguments.</source>
          <target state="translated">&lt;code&gt;emit&lt;/code&gt; 이벤트를 발생 시키거나 발생시킵니다. 이벤트는 이벤트 핸들러라는 특수 함수로 전달되거나 포착됩니다. 인수는 함수 핸들러로 이벤트 핸들러에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="4d522681c2d73791cceab1025800721dd4d39780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-buffer&lt;/code&gt;, moves to the end of the buffer, i.e. the end of the first line</source>
          <target state="translated">&lt;code&gt;end-of-buffer&lt;/code&gt; 끝, 버퍼의 끝, 즉 첫 번째 줄의 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="b0b2f9cdb44af1315c1e9e593723762d03d3fe51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-history&lt;/code&gt;, move to the end of the history</source>
          <target state="translated">&lt;code&gt;end-of-history&lt;/code&gt; 의 끝, 역사의 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="7707e2618c27c9ed8346db38dfd79af1c381cb7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-line&lt;/code&gt;, move to the end of the line</source>
          <target state="translated">&lt;code&gt;end-of-line&lt;/code&gt; 끝, 줄 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="af8e60a2a7ae6dc063d3b5432c2478d27ef3c004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-selection&lt;/code&gt;, end selecting text</source>
          <target state="translated">&lt;code&gt;end-selection&lt;/code&gt; , 텍스트 선택 종료</target>
        </trans-unit>
        <trans-unit id="e80d6bfedde793f5f7c0f4d9d3d5e295a6d21cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; ends a block of commands started by one of the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262f87c81f23dff1f7f93a5b6044595d7948ad4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; ends a block of commands.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; 는 명령 블록을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="50137453d16688a498916282a2c1c45a4f3bcc6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; evaluates the specified parameters as a command. If more than one parameter is specified, all parameters will be joined using a space character as a separator.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 은 지정된 매개 변수를 명령으로 평가합니다. 둘 이상의 매개 변수를 지정하면 공백 문자를 구분 기호로 사용하여 모든 매개 변수가 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="54915828756074f95f7a1e549b17591d5bbbc7f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec emacs&lt;/code&gt; starts up the emacs text editor, and exits &lt;code&gt;fish&lt;/code&gt;. When emacs exits, the session will terminate.</source>
          <target state="translated">&lt;code&gt;exec emacs&lt;/code&gt; 는 emacs 텍스트 편집기를 시작하고 &lt;code&gt;fish&lt;/code&gt; 를 종료 합니다 . emacs가 종료되면 세션이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="dc50b22031778292cfda48a3d988ca690c6c2412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec&lt;/code&gt; replaces the currently running shell with a new command. On successful completion, &lt;code&gt;exec&lt;/code&gt; never returns. &lt;code&gt;exec&lt;/code&gt; cannot be used inside a pipeline.</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 는 현재 실행중인 쉘을 새로운 명령으로 대체합니다. 성공적으로 완료되면 &lt;code&gt;exec&lt;/code&gt; 는 절대 반환하지 않습니다. 파이프 라인 내에서 &lt;code&gt;exec&lt;/code&gt; 를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9f9d21c01c5295004a45a90f29ee49703808f517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute&lt;/code&gt; run the current commandline</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; run the current commandline</target>
        </trans-unit>
        <trans-unit id="9a098fbbbc0f4e241457fac3357173a899382b05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute&lt;/code&gt;, run the current commandline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4c92277d3c3b535fdab93f22262c655be96df1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit code. Otherwise, the exit code will be that of the last command executed.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; 하면 물고기가 종료됩니다. 경우 &lt;code&gt;STATUS&lt;/code&gt; 공급되고, 정수로 변환하여 종료 코드로 사용됩니다. 그렇지 않으면 종료 코드는 마지막으로 실행 된 명령의 종료 코드입니다.</target>
        </trans-unit>
        <trans-unit id="d6ae4ec9fd08b1761aca796efb020b9925ac0927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit status. Otherwise, the exit status will be that of the last command executed.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit status. Otherwise, the exit status will be that of the last command executed.</target>
        </trans-unit>
        <trans-unit id="4c6efbe4d59f1b07df60218af12c18782d648132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt;, exit the shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e29309373a74a1b16ddfa0609041f77380dff25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp&lt;/code&gt; - the base-e exponential function</source>
          <target state="translated">&lt;code&gt;exp&lt;/code&gt; - 기수 지수 함수</target>
        </trans-unit>
        <trans-unit id="4d6b69f792298e243e4d6849a74e1f6939dd5c74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand-abbr&lt;/code&gt; expands any abbreviation currently under the cursor</source>
          <target state="translated">&lt;code&gt;expand-abbr&lt;/code&gt; expands any abbreviation currently under the cursor</target>
        </trans-unit>
        <trans-unit id="c4a0547f40f5e7cbc43f2d88ccf484a458a7b2e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand-abbr&lt;/code&gt;, expands any abbreviation currently under the cursor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ec88c5f26ffd60440d3112086d3f1c16e73ee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fac&lt;/code&gt; - factorial</source>
          <target state="translated">&lt;code&gt;fac&lt;/code&gt; 계승</target>
        </trans-unit>
        <trans-unit id="7bd010b23a35ff01964bb2a67cb5239733c4271d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; sets the exit status to 1.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 는 종료 상태를 1로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0ca1e464b704300c81bf4a662e655838605e064f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;features&lt;/code&gt; lists all available feature flags.</source>
          <target state="translated">&lt;code&gt;features&lt;/code&gt; 는 사용 가능한 모든 기능 플래그를 나열합니다.</target>
        </trans-unit>
        <trans-unit id="616eeb15e25e0733aa1a4c65bae40d8e08b73a10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg %3&lt;/code&gt; will put job 3 into the foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415ac7210f05f5e605584e4764ac5505f5a0a831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If &lt;code&gt;PID&lt;/code&gt; is specified, the job containing a process with the specified process ID is put in the foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba254c3859c0271dd6d51a7fa26986d0843a3b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</target>
        </trans-unit>
        <trans-unit id="0a7a1110af9305bc1cfb185b18660b97a03ee068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; 는 지정된 &lt;a href=&quot;index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 을 포 그라운드로 가져 와서 중지 된 경우 재개합니다. 포 그라운드 작업이 실행되는 동안 물고기는 일시 중지됩니다. 작업을 지정하지 않으면 마지막으로 사용할 작업이 포 그라운드에 놓입니다. PID가 지정되면 지정된 그룹 ID를 가진 작업이 포 그라운드에 놓입니다.</target>
        </trans-unit>
        <trans-unit id="2aa0e0e8cf8a0bba6d31683fafcc730149fe3080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; will put the last job in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; 는 마지막 작업을 포 그라운드로 놓습니다.</target>
        </trans-unit>
        <trans-unit id="f59d3cc746010fada2bbe7590bb1f716dca37ed5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; prints the filename of the currently running script. Also &lt;code&gt;current-filename&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--current-filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; 은 현재 실행중인 스크립트의 파일 이름을 인쇄합니다. 또한 &lt;code&gt;current-filename&lt;/code&gt; , &lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--current-filename&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b055c8f73612d13a371ff0e797dc3bdb9dc4c0ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; prints the filename of the currently running script. Also &lt;code&gt;current-filename&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--current-filename&lt;/code&gt;. This depends on how the script was called - if it was called via a symlink, the symlink will be returned, and if the current script was received via &lt;code&gt;source&lt;/code&gt; it will be &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cb67ef43537c65789f446737251042e346c8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; will start the Firefox web browser in the background and remove it from the job list, meaning it will not be closed when the fish process is closed.</source>
          <target state="translated">&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; 은 백그라운드에서 Firefox 웹 브라우저를 시작하고 작업 목록에서 제거합니다. 즉, 물고기 프로세스가 닫힐 때 닫히지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b79f46ab70d3df2b244e8bc8b2fd59aefcebc9ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish-path&lt;/code&gt; prints the absolute path to the currently executing instance of fish.</source>
          <target state="translated">&lt;code&gt;fish-path&lt;/code&gt; 는 현재 실행중인 물고기 인스턴스에 대한 절대 경로를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="d3c1add6b5f641c5abbdbd7961e2d0d5e497b5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also has man pages for its commands. For example, &lt;code&gt;man set&lt;/code&gt; will show the documentation for &lt;code&gt;set&lt;/code&gt; as a man page.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 명령에 대한 매뉴얼 페이지도 가지고 있습니다. 예를 들어, &lt;code&gt;man set&lt;/code&gt; 은 매뉴얼 페이지로 &lt;code&gt;set&lt;/code&gt; 설명서를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="055cf18d69e0e1c45eaf95982b74b7ac7158e0d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also sends additional information to the user through the values of certain environment variables. The user cannot change the values of most of these variables.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 또한 특정 환경 변수의 값을 통해 추가 정보를 사용자에게 보냅니다. 사용자는 대부분의 변수 값을 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9c00223ef2e28efafb5de62e61373ec8694c8272" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; automatically creates arrays from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 이름이 PATH로 끝나는 모든 환경 변수에서 콜론으로 분할하여 배열을 자동으로 만듭니다. 다른 변수는 자동으로 분할되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0015b01676196bbfa856dc3993196f600126666f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; automatically creates lists from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; automatically creates lists from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</target>
        </trans-unit>
        <trans-unit id="be9c60f74c31afa12603c403c8cb2df121109c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can also complete many commands, like git branches:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 자식 가지와 같은 많은 명령을 완료 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="793e1a6244dde2eb4f7f379dc7e8580b680ffd66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can store a list (or an &quot;array&quot; if you wish) of multiple strings inside of a variable. To access one element of a list, use the index of the element inside of square brackets, like this:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; can store a list (or an &quot;array&quot; if you wish) of multiple strings inside of a variable. To access one element of a list, use the index of the element inside of square brackets, like this:</target>
        </trans-unit>
        <trans-unit id="40e0afc27485f7f758e91f83d0782e508a6c6b86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can store a list of multiple strings inside of a variable. To access one element of an array, use the index of the element inside of square brackets, like this:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 변수 안에 여러 문자열 목록을 저장할 수 있습니다. 배열의 한 요소에 액세스하려면 다음과 같이 대괄호 안에있는 요소의 색인을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e5066e9e10becfb9012a96c88f59108b874b77ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; comes with a rich set of tab completions, that work &quot;out of the box.&quot;</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 &quot;즉석에서&quot;작동하는 풍부한 탭 완성 세트와 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="59bdeaf3ad58016c3bbb3a77baf3160d076a45b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has a special syntax to support specifying switches accepted by a command. The switches &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; are used to specify a short switch (single character, such as &lt;code&gt;-l&lt;/code&gt;), a gnu style long switch (such as '&lt;code&gt;--color&lt;/code&gt;') and an old-style long switch (like '&lt;code&gt;-shuffle&lt;/code&gt;'), respectively. If the command 'myprog' has an option '-o' which can also be written as '&lt;code&gt;--output&lt;/code&gt;', and which can take an additional value of either 'yes' or 'no', this can be specified by writing:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 명령에 의해 허용되는 스위치 지정을 지원하는 특수 구문을 가지고 있습니다. 스위치 &lt;code&gt;-s&lt;/code&gt; , &lt;code&gt;-l&lt;/code&gt; 및 &lt;code&gt;-o&lt;/code&gt; 는 (예 : 단일 문자, 짧은 스위치를 지정하는 데 사용됩니다 &lt;code&gt;-l&lt;/code&gt; ), (예를 들면 '는 GNU 스타일의 긴 스위치 &lt;code&gt;--color&lt;/code&gt; 같은 (')과 오래 된 스타일의 긴 스위치를 ' &lt;code&gt;-shuffle&lt;/code&gt; '). 'myprog'명령에 '-o'옵션이 있으며 ' &lt;code&gt;--output&lt;/code&gt; ' 으로 작성 될 수 있으며 'yes'또는 'no'의 추가 값을 사용할 수있는 경우 다음을 작성하여 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41f19a29132a5adfb147fa540bd9b6a1c6c80fb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has a special syntax to support specifying switches accepted by a command. The switches &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; are used to specify a short switch (single character, such as &lt;code&gt;-l&lt;/code&gt;), a gnu style long switch (such as &lt;code&gt;--color&lt;/code&gt;) and an old-style long switch (like &lt;code&gt;-shuffle&lt;/code&gt;), respectively. If the command 'myprog' has an option '-o' which can also be written as &lt;code&gt;--output&lt;/code&gt;, and which can take an additional value of either 'yes' or 'no', this can be specified by writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2883ae059c343a505686874682744dfcbd510e2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</target>
        </trans-unit>
        <trans-unit id="777f76e48b998a0f0dd3ad01a18ccbbc0bcab718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;commands#help&quot;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 광범위한 도움말 시스템을 가지고 있습니다. 특정 주제 나 명령에 대한 도움말을 보려면 &lt;a href=&quot;commands#help&quot;&gt; &lt;code&gt;help&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 . 예를 들어, &lt;code&gt;help syntax&lt;/code&gt; 작성 하면 이 문서 의 &lt;a href=&quot;#syntax&quot;&gt;구문 섹션&lt;/a&gt; 이 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="46c33eab942b519e7667b927731bb7a993f50301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has excellent help and man pages. Run &lt;code&gt;help&lt;/code&gt; to open help in a web browser, and &lt;code&gt;man&lt;/code&gt; to open it in a man page. You can also ask for help with a specific command, for example, &lt;code&gt;help set&lt;/code&gt; to open in a web browser, or &lt;code&gt;man set&lt;/code&gt; to see it in the terminal.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 훌륭한 도움과 매뉴얼 페이지를 가지고 있습니다. 실행 &lt;code&gt;help&lt;/code&gt; 열려있는 웹 브라우저에서 도움말 및에 &lt;code&gt;man&lt;/code&gt; 사람 페이지에서 엽니 다. 웹 브라우저에서 &lt;code&gt;help set&lt;/code&gt; 을 열 도록 설정 하거나 터미널에서 명령을 보도록 &lt;code&gt;man set&lt;/code&gt; 하는 것과 같이 특정 명령에 대한 도움말을 요청할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df0088c6d7eab9031f3479af26efcea62bffcb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; interprets the command line as it is typed and uses syntax highlighting to provide feedback to the user. The most important feedback is the detection of potential errors. By default, errors are marked red.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 입력 된 명령 줄을 해석하고 구문 강조를 사용하여 사용자에게 피드백을 제공합니다. 가장 중요한 피드백은 잠재적 오류를 감지하는 것입니다. 기본적으로 오류는 빨간색으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="da8c01eaaa46f89b4d5f309ef717ebd0dcf5f70a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. The full manual is available &lt;a href=&quot;index&quot;&gt;in HTML&lt;/a&gt; by using the &lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt; command from inside fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 주로 대화식 사용을 염두에두고 작성된 명령 줄 셸입니다. 내부 물고기 의 &lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt; 명령을 사용하여 전체 설명서 &lt;a href=&quot;index&quot;&gt;를 HTML&lt;/a&gt; 로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="44cd2530e9b46d3f729547fd73d82a1108033fd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. This page briefly describes the options for invoking fish. The &lt;a href=&quot;../index#intro&quot;&gt;full manual&lt;/a&gt; is available in HTML by using the &lt;a href=&quot;help#cmd-help&quot;&gt;help&lt;/a&gt; command from inside fish, and in the &lt;code&gt;fish-doc(1)&lt;/code&gt; man page. The &lt;a href=&quot;../tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt; is available as HTML via &lt;code&gt;help tutorial&lt;/code&gt; or in &lt;code&gt;fish-tutorial(1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. This page briefly describes the options for invoking fish. The &lt;a href=&quot;../index#intro&quot;&gt;full manual&lt;/a&gt; is available in HTML by using the &lt;a href=&quot;help#cmd-help&quot;&gt;help&lt;/a&gt; command from inside fish, and in the &lt;code&gt;fish-doc(1)&lt;/code&gt; man page. The &lt;a href=&quot;../tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt; is available as HTML via &lt;code&gt;help tutorial&lt;/code&gt; or in &lt;code&gt;fish-tutorial(1)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="35fca2b4c4ec083073cb841e35a4f9e49e66357a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. &lt;code&gt;fish&lt;/code&gt; supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 bash 또는 zsh와 같은 완벽하게 갖추어 진 명령 줄 셸로 스마트하고 사용자 친화적입니다. &lt;code&gt;fish&lt;/code&gt; 는 구문 강조, 자동 제안 및 학습이나 구성 할 필요없이 작동하는 탭 완성과 같은 강력한 기능을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="5b0b5a9ecbb138c52d5af59c69a665ea6bf3807c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; marks functions that have been created by &lt;code&gt;alias&lt;/code&gt; by including the command used to create them in the function description. You can list &lt;code&gt;alias&lt;/code&gt;-created functions by running &lt;code&gt;alias&lt;/code&gt; without arguments. They must be erased using &lt;code&gt;functions -e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 마크 는 함수 설명에 생성하는 데 사용되는 명령을 포함시켜 &lt;code&gt;alias&lt;/code&gt; 으로 만든 함수를 표시합니다 . 당신은 나열 할 수 있습니다 &lt;code&gt;alias&lt;/code&gt; 실행하여 기능을 -created &lt;code&gt;alias&lt;/code&gt; 인수없이. &lt;code&gt;functions -e&lt;/code&gt; 사용하여 지워야합니다 .</target>
        </trans-unit>
        <trans-unit id="b322552368e11dea3fda5d3f95dfd4c97001414f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; provides a large number of program specific completions. Most of these completions are simple options like the &lt;code&gt;-l&lt;/code&gt; option for &lt;code&gt;ls&lt;/code&gt;, but some are more advanced. The latter include:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 많은 프로그램 특정 완성을 제공합니다. 이러한 완성의 대부분은 &lt;code&gt;ls&lt;/code&gt; 에 대한 &lt;code&gt;-l&lt;/code&gt; 옵션 과 같은 간단한 옵션 이지만 일부는 고급입니다. 후자는 다음을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="092c5ff9b15fe33669b2dd44c28e0b29ef6d3de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 다른 쉘과 같은 명령을 실행합니다. 명령을 입력 한 다음 인수를 입력합니다. 공백은 구분 기호입니다.</target>
        </trans-unit>
        <trans-unit id="53af98c8dc19ee66b69f397cd23abb202d994001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a default version of this function that displays the function name and line number of the current execution context.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 현재 실행 컨텍스트의 기능 이름과 줄 번호를 표시하는이 기능의 기본 버전과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="ad47759ce8e74a9a1a71d60b65c5fa5bebbae7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a large number of builtin commands, shellscript functions and external commands. These are all described below.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 많은 내장 명령, 쉘 스크립트 기능 및 외부 명령과 함께 제공됩니다. 이것들은 모두 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a90fcc43cdc3c81feca88b4008c851ae0986302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a number of example prompts that can be chosen with the &lt;code&gt;fish_config&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 &lt;code&gt;fish_config&lt;/code&gt; 명령 으로 선택할 수있는 여러 가지 예제 프롬프트와 함께 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="cf5c6397e1462cac24e466bcb172b4245c8ec087" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string '&lt;code&gt;__fish_&lt;/code&gt;'. Such functions are internal to &lt;code&gt;fish&lt;/code&gt; and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 명령 특정 완성을 작성할 때 매우 유용한 여러 기능을 제공합니다. 이러한 함수 이름의 대부분은 문자열 ' &lt;code&gt;__fish_&lt;/code&gt; '로 시작합니다 . 이러한 기능은 &lt;code&gt;fish&lt;/code&gt; 내부에 있으며 향후 물고기 버전에서 이름과 인터페이스가 변경 될 수 있습니다. 그럼에도 불구하고 일부는 완성을 작성할 때 매우 유용 할 수 있습니다. 이러한 기능 중 일부가 여기에 설명되어 있습니다. 향후 버전의 물고기에서는 제거되거나 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91dadf4819fbfd8332e32282b1b319153f74d4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string &lt;code&gt;__fish_&lt;/code&gt;. Such functions are internal to &lt;code&gt;fish&lt;/code&gt; and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4667f5ebd401acef191ebf9acbeffe48080df4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; starts by executing commands in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. You can create it if it does not exist.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 에서 명령을 실행하여 시작합니다 . 존재하지 않는 경우 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3f7baca4cc4c811bf03a172d5443fd82b130b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example</target>
        </trans-unit>
        <trans-unit id="d041cb58f21e5038ba1dd64df8fd389a7bcc1973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 입력 할 때 명령을 제안하고 커서 오른쪽에 제안을 회색으로 표시합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ca9e9797a19941a7503fe9bfd4d9f99d4b5506fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; supports the familiar wildcard &lt;code&gt;*&lt;/code&gt;. To list all JPEG files:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 익숙한 와일드 카드를 지원합니다 &lt;code&gt;*&lt;/code&gt; . 모든 JPEG 파일을 나열하려면</target>
        </trans-unit>
        <trans-unit id="c25f03f75074f13b43a3d6e3ec17960348bf4ec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses an Emacs style kill ring for copy and paste functionality. Use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; to cut from the current cursor position to the end of the line. The string that is cut (a.k.a. killed) is inserted into a linked list of kills, called the kill ring. To paste the latest value from the kill ring use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt;. After pasting, use &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt; to rotate to the previous kill.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 복사 및 붙여 넣기 기능을 위해 Emacs 스타일 킬 링을 사용합니다. 현재 커서 위치에서 줄 끝까지 잘라내려면 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt; 를 사용하십시오 . 잘린 문자열 (일명 강제 종료)은 킬 링이라고하는 연결된 킬 목록에 삽입됩니다. 킬 링에서 최신 값을 붙여 넣으려면 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Y를 사용하십시오&lt;/b&gt; . 붙여 넣은 후에 &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Y&lt;/b&gt; 를 사용 하여 이전 킬로 회전하십시오.</target>
        </trans-unit>
        <trans-unit id="b96dcac69316f2c77694b9271a53c0a5debdac38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses an Emacs-style kill ring for copy and paste functionality. For example, use</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; uses an Emacs-style kill ring for copy and paste functionality. For example, use</target>
        </trans-unit>
        <trans-unit id="9f38463145211dc9331425ead2c2f55cef58e9aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses parentheses for subcommands. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 부속 명령에 괄호를 사용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e39a660626f0dd1f456661f39a8be78d661fa1b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them</target>
        </trans-unit>
        <trans-unit id="a1bd535d149860f389ddcd2747d2dd0ba1abb31d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 입력 할 때 유효한 파일 경로에 밑줄을 긋습니다.</target>
        </trans-unit>
        <trans-unit id="90884bdb446dcf5a31d48611b27f62aa1e8991c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_add_path&lt;/code&gt; is a simple way to add more components to fish's $PATH. It does this by adding the components either to $fish_user_paths or directly to $PATH (if the &lt;code&gt;--path&lt;/code&gt; switch is given).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bb18741f901028c968a22fdbfdd38f9d5a2449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous East Asian characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="translated">&lt;code&gt;fish_ambiguous_width&lt;/code&gt; 는 모호한 동아시아 문자의 계산 된 너비를 제어합니다. 터미널 에뮬레이터에서 이러한 문자를 단일 너비 (일반)로 렌더링하는 경우 1로 설정하거나 2 배인 경우 2로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="f78339b85758f15675a7444a6144fa421dbe6de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous-width characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="translated">&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous-width characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</target>
        </trans-unit>
        <trans-unit id="b607e6a436caa90fd2ac6f9303607f5ef5f327e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous-width characters. This should be set to 1 if your terminal renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6427ffb69bb59b5e71303f4c042483c528d8c57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; is the prompt function when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c58022e2a675960181a411a289466c6f46cff39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_cancel&lt;/code&gt;, which is emitted when a commandline is cleared (used for terminal-shell integration).</source>
          <target state="translated">&lt;code&gt;fish_cancel&lt;/code&gt; , which is emitted when a commandline is cleared (used for terminal-shell integration).</target>
        </trans-unit>
        <trans-unit id="da4f27241087cb9a6d563e249660ba24a88243da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_autosuggestion&lt;/code&gt;, the color used for autosuggestions</source>
          <target state="translated">&lt;code&gt;fish_color_autosuggestion&lt;/code&gt; , 자동 제안에 사용되는 색상</target>
        </trans-unit>
        <trans-unit id="6aab75facde4fc6df798358344a9433f5e66bc35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cancel&lt;/code&gt;, the color for the '^C' indicator on a canceled command</source>
          <target state="translated">&lt;code&gt;fish_color_cancel&lt;/code&gt; 취소 된 명령의 '^ C'표시기 색상 인 fish_color_cancel</target>
        </trans-unit>
        <trans-unit id="733b6c1f54d7b6d136bd7e04221c88502c82f59d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_command&lt;/code&gt;, the color for commands</source>
          <target state="translated">&lt;code&gt;fish_color_command&lt;/code&gt; , 명령의 색상</target>
        </trans-unit>
        <trans-unit id="01d519230d52778f1d20dccecc138d7caa67f264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_comment&lt;/code&gt;, the color used for code comments</source>
          <target state="translated">&lt;code&gt;fish_color_comment&lt;/code&gt; 코드 주석에 사용되는 색상 인 fish_color_comment</target>
        </trans-unit>
        <trans-unit id="dc90b5b2767b7d545e27c7e6096d114342de7bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cwd&lt;/code&gt;, the color used for the current working directory in the default prompt</source>
          <target state="translated">&lt;code&gt;fish_color_cwd&lt;/code&gt; 기본 프롬프트에서 현재 작업 디렉토리에 사용되는 색상 인 fish_color_cwd</target>
        </trans-unit>
        <trans-unit id="eb987595157776e67d6a5797f3e433f9cc57d537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_end&lt;/code&gt;, the color for process separators like ';' and '&amp;amp;'</source>
          <target state="translated">&lt;code&gt;fish_color_end&lt;/code&gt; '와 같은 프로세스 구분 기호의 색상 인 fish_color_end '&amp;amp;'</target>
        </trans-unit>
        <trans-unit id="422b7f08d142d5b33c0430e85d9d7ec90209dee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_error&lt;/code&gt;, the color used to highlight potential errors</source>
          <target state="translated">&lt;code&gt;fish_color_error&lt;/code&gt; 잠재적 오류를 강조 표시하는 데 사용되는 색상 인 fish_color_error</target>
        </trans-unit>
        <trans-unit id="4bb611c7ae46b00d5c7c4cac298882c1cef474d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_escape&lt;/code&gt;, the color used to highlight character escapes like '\n' and '\x70'</source>
          <target state="translated">&lt;code&gt;fish_color_escape&lt;/code&gt; '및 '\ x70'과 같은 문자 이스케이프를 강조하는 데 사용되는 색상 인 fish_color_escape</target>
        </trans-unit>
        <trans-unit id="aa1b2c546ddbc908168ffebb47d0c6d45f0c4edd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_host&lt;/code&gt;, the color used to print the current host system in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_host&lt;/code&gt; - 일부 물고기 기본 프롬프트에서 현재 호스트 시스템을 인쇄하는 데 사용되는 색상</target>
        </trans-unit>
        <trans-unit id="7e3328634fc97f1a8a761faa67ea54c39d6ba5a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_host_remote&lt;/code&gt;, the color used to print the current host system in some of fish default prompts, if fish is running remotely (via ssh or similar)</source>
          <target state="translated">&lt;code&gt;fish_color_host_remote&lt;/code&gt; , the color used to print the current host system in some of fish default prompts, if fish is running remotely (via ssh or similar)</target>
        </trans-unit>
        <trans-unit id="3c8da305ccb3f8313b18d70a489b64856bf5cfa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_match&lt;/code&gt;, the color used to highlight matching parenthesis</source>
          <target state="translated">&lt;code&gt;fish_color_match&lt;/code&gt; 일치하는 괄호를 강조 표시하는 데 사용되는 색상 인 fish_color_match</target>
        </trans-unit>
        <trans-unit id="33482fa503efab0519dba81d1dd5ad6b84e139c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_normal&lt;/code&gt;, the default color</source>
          <target state="translated">&lt;code&gt;fish_color_normal&lt;/code&gt; 기본 색상 인 fish_color_normal</target>
        </trans-unit>
        <trans-unit id="899c29bf9a5dc62025dfd8ee621041575ce62bbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_operator&lt;/code&gt;, the color for parameter expansion operators like '*' and '~'</source>
          <target state="translated">&lt;code&gt;fish_color_operator&lt;/code&gt; '및 '~'와 같은 매개 변수 확장 연산자의 색상 인 fish_color_operator</target>
        </trans-unit>
        <trans-unit id="ef5f8193323e367ca260a5737dce24ecac03bf9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_param&lt;/code&gt;, the color for regular command parameters</source>
          <target state="translated">&lt;code&gt;fish_color_param&lt;/code&gt; 일반 명령 매개 변수의 색상 인 fish_color_param</target>
        </trans-unit>
        <trans-unit id="49c4274e0b503cf22abea61dd7205cd045ea1a98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_quote&lt;/code&gt;, the color for quoted blocks of text</source>
          <target state="translated">&lt;code&gt;fish_color_quote&lt;/code&gt; , 인용 된 텍스트 블록의 색상</target>
        </trans-unit>
        <trans-unit id="5b792112bcb5515788014934301442436baf4df6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_redirection&lt;/code&gt;, the color for IO redirections</source>
          <target state="translated">&lt;code&gt;fish_color_redirection&lt;/code&gt; , IO 리디렉션의 색상</target>
        </trans-unit>
        <trans-unit id="c607feb13af13865862aa0d14304c945c83f6955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_search_match&lt;/code&gt;, used to highlight history search matches and the selected pager item (must be a background)</source>
          <target state="translated">&lt;code&gt;fish_color_search_match&lt;/code&gt; , 기록 검색 일치 및 선택된 호출기 항목을 강조 표시하는 데 사용됩니다 (배경이어야 함).</target>
        </trans-unit>
        <trans-unit id="e803fbe16df6b0f3458dfc67b45c89270b33c4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_selection&lt;/code&gt;, the color used when selecting text (in vi visual mode)</source>
          <target state="translated">&lt;code&gt;fish_color_selection&lt;/code&gt; , 텍스트를 선택할 때 사용되는 색상 (vi 비주얼 모드)</target>
        </trans-unit>
        <trans-unit id="c1295a7fe31f87f51d695457ac2170aa53f10fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_user&lt;/code&gt;, the color used to print the current username in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_user&lt;/code&gt; , 일부 물고기 기본 프롬프트에서 현재 사용자 이름을 인쇄하는 데 사용되는 색상</target>
        </trans-unit>
        <trans-unit id="04bb96ac3bb736d6ac808f4395018348bc676e82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_command_not_found&lt;/code&gt;, which is emitted whenever a command lookup failed.</source>
          <target state="translated">&lt;code&gt;fish_command_not_found&lt;/code&gt; 는 명령 조회가 실패 할 때마다 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a4033f2f2afffa86c138e812a0b0602cdea0f3bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; opens a new web browser window and allows you to configure certain fish settings.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 새로운 웹 브라우저 창을 열고 특정 물고기 설정을 구성 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="51703c7e04cc8ef77397ffa5049c1e93750bc0ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; optionally accepts name of the initial configuration tab. For e.g. &lt;code&gt;fish_config history&lt;/code&gt; will start configuration interface with history tab.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 선택적으로 초기 구성 탭의 이름을 허용합니다. 예를 들어 &lt;code&gt;fish_config history&lt;/code&gt; 는 history 탭으로 구성 인터페이스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="fecc048a3ad3bcf34e0113164e5621e9895f65b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts a local web server and then opens a web browser window; when you have finished, close the browser window and then press the Enter key to terminate the configuration session.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 로컬 웹 서버를 시작한 다음 웹 브라우저 창을 엽니 다. 완료되면 브라우저 창을 닫고 Enter 키를 눌러 구성 세션을 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="c38cd9193bd0838148316ebdf3e342f199d9c0d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts the web-based configuration interface.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 웹 기반 구성 인터페이스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="0f8b7427dfa06c8387aec4fe9f06c58afa2139fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width changed in Unicode 9 and hence varies across terminal emulators. This should be set to 2 if your terminal emulator supports Unicode &amp;gt;= 9 and renders them double-width, and 1 otherwise. Set this only if you see graphical glitching when printing emoji, typically it will be automatically detected.</source>
          <target state="translated">&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width changed in Unicode 9 and hence varies across terminal emulators. This should be set to 2 if your terminal emulator supports Unicode &amp;gt;= 9 and renders them double-width, and 1 otherwise. Set this only if you see graphical glitching when printing emoji, typically it will be automatically detected.</target>
        </trans-unit>
        <trans-unit id="b93a2f3f04ef4585de8550e51c988b2551888eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width varies across terminal emulators. This should be set to 1 if your terminal emulator renders emoji single-width, or 2 if double-width. Set this only if you see graphical glitching when printing emoji.</source>
          <target state="translated">&lt;code&gt;fish_emoji_width&lt;/code&gt; 는 렌더링 된 너비가 터미널 에뮬레이터마다 다른 특정 문자, 특히 이모티콘의 계산 된 너비를 제어합니다. 터미널 에뮬레이터가 이모티콘을 단일 너비로 렌더링하는 경우 1로 설정되거나 이중 너비 인 경우 2로 설정해야합니다. 이모티콘을 인쇄 할 때 그래픽 결함이 나타나는 경우에만 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="658d6acfbde2cce8a8dc5974c41c89458b9f6570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls whether fish assumes emoji render as 2 cells or 1 cell wide. This is necessary because the correct value changed from 1 to 2 in Unicode 9, and some terminals may not be aware. Set this if you see graphical glitching related to emoji (or other &quot;special&quot; characters). It should usually be auto-detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e742affac41a44f02e9aa3052491a61e53ff7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 300ms (default key bindings) or 10ms (vi key bindings) after seeing an escape character before giving up on matching a key binding. See the documentation for the &lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</source>
          <target state="translated">&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 는 키 바인딩 일치를 포기하기 전에 이스케이프 문자를 본 후 기본 제한 시간 300ms (기본 키 바인딩) 또는 10ms (vi 키 바인딩)를 대체합니다. &lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt; builtin 명령에 대한 설명서를 참조하십시오 . 이 지연은 이스케이프를 메타 키로 사용하도록합니다.</target>
        </trans-unit>
        <trans-unit id="6687ff316b55ebc50103870c10d95896af5a7bce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 30ms after seeing an escape character before giving up on matching a key binding. This is explained in the documentation for the &lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</source>
          <target state="translated">&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 30ms after seeing an escape character before giving up on matching a key binding. This is explained in the documentation for the &lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</target>
        </trans-unit>
        <trans-unit id="18d32b632e49ad91dd99c41c68242eeb273e1c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; sets how long fish waits for another key after seeing an escape, to distinguish pressing the escape key from the start of an escape sequence. The default is 30ms. Increasing it increases the latency but allows pressing escape instead of alt for alt+character bindings. For more information, see &lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;the chapter in the bind documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b2a1e44ef7bb47d05aa2cecfce06fa5f350598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_exit&lt;/code&gt; is emitted right before fish exits.</source>
          <target state="translated">&lt;code&gt;fish_exit&lt;/code&gt; 는 물고기가 나오기 직전에 방출됩니다.</target>
        </trans-unit>
        <trans-unit id="2d94ec8ed4f5ca2e247001593671084bcb2b63cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_greeting&lt;/code&gt;, the greeting message printed on startup.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; , 시작시 인사말 메시지가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="fa2f7a53cca901d04e34c6a842e9dbc1bee3380f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_greeting&lt;/code&gt;, the greeting message printed on startup. This is printed by a function of the same name that can be overridden for more complicated changes (see &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf1452e5d429f1daf103ffd9546b372df2ab72b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_handle_reflow&lt;/code&gt;, determines whether fish should try to repaint the commandline when the terminal resizes. In terminals that reflow text this should be disabled. Set it to 1 to enable, anything else to disable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04aed8775880cd3b6a1f6c024e3c890b3d8d1ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_history&lt;/code&gt;, the current history session name. If set, all subsequent commands within an interactive fish session will be logged to a separate file identified by the value of the variable. If unset, or set to &lt;code&gt;default&lt;/code&gt;, the default session name &quot;fish&quot; is used. If set to an empty string, history is not saved to disk (but is still available within the interactive session).</source>
          <target state="translated">&lt;code&gt;fish_history&lt;/code&gt; , 현재 히스토리 세션 이름. 설정된 경우 대화식 fish 세션 내의 모든 후속 명령은 변수 값으로 식별되는 별도의 파일에 기록됩니다. 설정하지 않거나 &lt;code&gt;default&lt;/code&gt; 로 설정 하면 기본 세션 이름 &quot;fish&quot;가 사용됩니다. 빈 문자열로 설정하면 기록이 디스크에 저장되지 않지만 대화식 세션 내에서는 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="104755c189b715d5c9c42e2652c1cdf288c6ca28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input and outputs them to standard output or a specified file.</source>
          <target state="translated">&lt;code&gt;fish_indent&lt;/code&gt; 는 물고기 코드를 들여 쓰는 데 사용됩니다. &lt;code&gt;fish_indent&lt;/code&gt; 는 표준 입력에서 명령을 읽고 표준 출력 또는 지정된 파일로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="a7bb256bcfc22368152a4ebc452df8b7662f2582" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input or the given filenames and outputs them to standard output or a specified file (if &lt;code&gt;-w&lt;/code&gt; is given).</source>
          <target state="translated">&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input or the given filenames and outputs them to standard output or a specified file (if &lt;code&gt;-w&lt;/code&gt; is given).</target>
        </trans-unit>
        <trans-unit id="da73e2f1a512f02d7584672a40785204c598441f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_is_root_user&lt;/code&gt; will check if the current user is root. It can be useful for the prompt to display something different if the user is root, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f505af424d327895b4f62f9482da2a8a3e1b470" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; intentionally disables handling of many signals. To terminate &lt;code&gt;fish_key_reader&lt;/code&gt; in &lt;code&gt;--continuous&lt;/code&gt; mode do:</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; 는 의도적으로 많은 신호 처리를 비활성화합니다. 종료하려면 &lt;code&gt;fish_key_reader&lt;/code&gt; 에 &lt;code&gt;--continuous&lt;/code&gt; 모드 수행</target>
        </trans-unit>
        <trans-unit id="9969f810562210b29ac153862ce8488fd46d7c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; is used to study input received from the terminal and can help with key binds. The program is interactive and works on standard input. Individual characters themselves and their hexadecimal values are displayed.</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; 는 터미널에서 수신 한 입력을 연구하는 데 사용되며 키 바인딩에 도움이됩니다. 이 프로그램은 대화식이며 표준 입력에서 작동합니다. 개별 문자 자체와 16 진수 값이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0422482679a5ecd7a3ca2c35dcd4c26c9e83bad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_kill_signal&lt;/code&gt;, the signal that terminated the last foreground job, or 0 if the job exited normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c622c6b5bee30a6726d542cdf2ab2250db87a11e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_mode_prompt&lt;/code&gt; will be executed when the vi mode changes. If it produces any output, it is displayed and used. If it does not, the other prompt functions (&lt;a href=&quot;fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; and &lt;a href=&quot;fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt;) will be executed as well in case they contain a mode display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1955a06dd635c9c957ee769ce1eb3ce76b0fc4c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_background&lt;/code&gt;, the background color of a line</source>
          <target state="translated">&lt;code&gt;fish_pager_color_background&lt;/code&gt; , the background color of a line</target>
        </trans-unit>
        <trans-unit id="f7c684f0faf6861363a50ef125b672ee5e7f8960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_completion&lt;/code&gt;, the color of the completion itself</source>
          <target state="translated">&lt;code&gt;fish_pager_color_completion&lt;/code&gt; 완료 자체의 색상 인 fish_pager_color_completion</target>
        </trans-unit>
        <trans-unit id="02c2b5b4b67a9ed2516d817126320b97d559bb5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_description&lt;/code&gt;, the color of the completion description</source>
          <target state="translated">&lt;code&gt;fish_pager_color_description&lt;/code&gt; 완료 설명의 색상 인 fish_pager_color_description</target>
        </trans-unit>
        <trans-unit id="dad9d641492b848dfa36404193130b01877d7c55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_prefix&lt;/code&gt;, the color of the prefix string, i.e. the string that is to be completed</source>
          <target state="translated">&lt;code&gt;fish_pager_color_prefix&lt;/code&gt; , 접두사 문자열의 색상, 즉 완성 될 문자열</target>
        </trans-unit>
        <trans-unit id="72288186d5b0c5276c2df6d25ce7182ce13c409a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_progress&lt;/code&gt;, the color of the progress bar at the bottom left corner</source>
          <target state="translated">&lt;code&gt;fish_pager_color_progress&lt;/code&gt; 왼쪽 하단에서 진행률 표시 줄의 색상 인 fish_pager_color_progress</target>
        </trans-unit>
        <trans-unit id="3e8830576bae489fb92cd5bed56314729ae1656f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary&lt;/code&gt;, the background color of the every second completion</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary&lt;/code&gt; , 매 초마다 배경색</target>
        </trans-unit>
        <trans-unit id="76b568ec21a4e8263642a51936672636ba928b0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_ prefix&lt;/code&gt;, &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_ prefix&lt;/code&gt; , &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e55357f10cdf512a13586ee62429348b3cfb24b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_background&lt;/code&gt;, &lt;code&gt;fish_pager_color_background&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_background&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_background&lt;/code&gt; , &lt;code&gt;fish_pager_color_background&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_background&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e90de1da46106fee8091bb2c2c23a8f188da196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_completion&lt;/code&gt;, &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_completion&lt;/code&gt; , &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5fe74e5ee8b566305db424020cbb8da10395dc96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_description&lt;/code&gt;, &lt;code&gt;fish_pager_color_description&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_description&lt;/code&gt; , &lt;code&gt;fish_pager_color_description&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71624fb1af940a83195f3c310d4d969188349ff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_background&lt;/code&gt;, &lt;code&gt;fish_pager_color_background&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_color_search_match&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_background&lt;/code&gt; , &lt;code&gt;fish_pager_color_background&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_color_search_match&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b13f87fd7fc9be4af86e634debc017be760470c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_completion&lt;/code&gt;, &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_completion&lt;/code&gt; , &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="971e4b956c3476c803e3fa66d23fad3bee6ffaf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_description&lt;/code&gt;, &lt;code&gt;fish_pager_color_description&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_description&lt;/code&gt; , &lt;code&gt;fish_pager_color_description&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a65d30196128ffbb2928911e278d6c63930c436b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_prefix&lt;/code&gt;, &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_prefix&lt;/code&gt; , &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3eb5135deccd77d2904f64e51b0cbb65213cfaf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pid&lt;/code&gt;, the process ID (PID) of the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b7261dfd9477ae59353955d1fded2e7e867175" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_posterror&lt;/code&gt;, which is emitted right after executing a command with syntax errors. The commandline is passed as the first parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39301e68719d8270e6ba63e0324f010136d1f361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_postexec&lt;/code&gt;, which is emitted right after executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_postexec&lt;/code&gt; 대화 형 명령을 실행 한 직후에 생성되는 fish_postexec 명령 행이 첫 번째 매개 변수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="ac28456f56bd590fac994b5010e0b38ff99544eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_postexec&lt;/code&gt;, which is emitted right after executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5e5b54faf281985c7c7df11e2b068f2d1b1dff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_preexec&lt;/code&gt;, which is emitted right before executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_preexec&lt;/code&gt; 대화식 명령을 실행하기 직전에 생성되는 fish_preexec 명령 행이 첫 번째 매개 변수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="d49c52bb6343f148a6e7cb6f488824707a022cff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_preexec&lt;/code&gt;, which is emitted right before executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d253511a520fed2df4efaa70d38a4aa9455ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_prompt&lt;/code&gt;, which is emitted whenever a new fish prompt is about to be displayed.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 는 새로운 물고기 프롬프트가 표시 될 때마다 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8e763b7a1c9e69d8e49402ca1bd27768dc523a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_right_prompt&lt;/code&gt; is similar to &lt;code&gt;fish_prompt&lt;/code&gt;, except that it appears on the right side of the terminal window.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; 는 터미널 창의 오른쪽에 표시되는 점을 제외하고 &lt;code&gt;fish_prompt&lt;/code&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="c4a7d6ba8e4a0d2492df3ec01d90736e88080917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_status_to_signal&lt;/code&gt; converts exit codes to their corresponding human-friendly signals if one exists. This is likely to be useful for prompts in conjunction with the &lt;code&gt;$status&lt;/code&gt; and &lt;code&gt;$pipestatus&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9b15df475152cdd93c34d86fe528d79814755f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_trace&lt;/code&gt;, if set and not empty, will cause fish to print commands before they execute, similar to &lt;code&gt;set -x&lt;/code&gt; in bash. The trace is printed to the path given by the &lt;a href=&quot;cmds/fish#cmd-fish&quot;&gt;--debug-output&lt;/a&gt; option to fish (stderr by default).</source>
          <target state="translated">&lt;code&gt;fish_trace&lt;/code&gt; , if set and not empty, will cause fish to print commands before they execute, similar to &lt;code&gt;set -x&lt;/code&gt; in bash. The trace is printed to the path given by the &lt;a href=&quot;cmds/fish#cmd-fish&quot;&gt;--debug-output&lt;/a&gt; option to fish (stderr by default).</target>
        </trans-unit>
        <trans-unit id="25375052dde19cad27653f4c1752d8ab6f280d0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_update_completions&lt;/code&gt; parses manual pages installed on the system, and attempts to create completion files in the &lt;code&gt;fish&lt;/code&gt; configuration directory.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; 는 시스템에 설치된 수동 페이지를 구문 분석하고 &lt;code&gt;fish&lt;/code&gt; 구성 디렉토리 에 완료 파일을 작성하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="200d59f939eaa8758fc4a1a196859ca8fd5fc9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_user_paths&lt;/code&gt;, a list of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt;. This can be a universal variable.</source>
          <target state="translated">&lt;code&gt;fish_user_paths&lt;/code&gt; , a list of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt; . This can be a universal variable.</target>
        </trans-unit>
        <trans-unit id="1258f51252838f9ffb3287c339e857307bfe13f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_user_paths&lt;/code&gt;, an array of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt;. This can be a universal variable.</source>
          <target state="translated">&lt;code&gt;fish_user_paths&lt;/code&gt; , 앞에 붙 디렉토리의 배열 &lt;code&gt;PATH&lt;/code&gt; . 이것은 범용 변수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d20e70fb52c2b89d39d9ee9f9a3364cf899bbf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_vi_mode&lt;/code&gt; enters a vi-like command editing mode. To always start in vi mode, add &lt;code&gt;fish_vi_mode&lt;/code&gt; to your &lt;code&gt;config.fish&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;fish_vi_mode&lt;/code&gt; 는 vi와 유사한 명령 편집 모드로 들어갑니다. 항상 vi 모드에서 시작하려면 &lt;code&gt;config.fish&lt;/code&gt; 파일에 &lt;code&gt;fish_vi_mode&lt;/code&gt; 를 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="a67771d1afbe49fb95a1eb353ddb3304ef83900c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; is a loop construct. It will perform the commands specified by &lt;code&gt;COMMANDS&lt;/code&gt; multiple times. On each iteration, the local variable specified by &lt;code&gt;VARNAME&lt;/code&gt; is assigned a new value from &lt;code&gt;VALUES&lt;/code&gt;. If &lt;code&gt;VALUES&lt;/code&gt; is empty, &lt;code&gt;COMMANDS&lt;/code&gt; will not be executed at all. The &lt;code&gt;VARNAME&lt;/code&gt; is visible when the loop terminates and will contain the last value assigned to it. If &lt;code&gt;VARNAME&lt;/code&gt; does not already exist it will be set in the local scope. For our purposes if the &lt;code&gt;for&lt;/code&gt; block is inside a function there must be a local variable with the same name. If the &lt;code&gt;for&lt;/code&gt; block is not nested inside a function then global and universal variables of the same name will be used if they exist.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 는 루프 구조입니다. &lt;code&gt;COMMANDS&lt;/code&gt; 로 지정된 명령을 여러 번 수행합니다 . 각 반복에서 &lt;code&gt;VARNAME&lt;/code&gt; 으로 지정된 로컬 변수에 &lt;code&gt;VALUES&lt;/code&gt; 의 새 값이 지정됩니다 . 경우 &lt;code&gt;VALUES&lt;/code&gt; 가 비어 &lt;code&gt;COMMANDS&lt;/code&gt; 전혀 실행되지 않습니다. &lt;code&gt;VARNAME&lt;/code&gt; 는 루프가 종료하고, 할당 된 마지막 값을 포함 할 때 볼 수있다. 경우 &lt;code&gt;VARNAME&lt;/code&gt; 가 존재하지 않습니다 그것은 로컬 범위에서 설정됩니다. 우리의 목적을 위해 &lt;code&gt;for&lt;/code&gt; 블록이 함수 안에 있다면 같은 이름을 가진 지역 변수가 있어야합니다. 인 경우] &lt;code&gt;for&lt;/code&gt; 블록은 함수 안에 중첩되지 않으며 같은 이름의 전역 변수와 범용 변수가 있으면 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="30ea19b645de71a6c9405b507051c6bb2520a9ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loops work like in other shells, which is more like python's for-loops than e.g. C's:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9273933eb345e0f31ce06627439b843043841d19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force-repaint&lt;/code&gt; reexecute the prompt functions without coalescing</source>
          <target state="translated">&lt;code&gt;force-repaint&lt;/code&gt; reexecute the prompt functions without coalescing</target>
        </trans-unit>
        <trans-unit id="7dba540ac348539070f2bf73fd7b4971a05d3926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-bigword&lt;/code&gt;, move one whitespace-delimited word to the right</source>
          <target state="translated">&lt;code&gt;forward-bigword&lt;/code&gt; 이면 공백으로 구분 된 한 단어를 오른쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="96ac7c933e1aa7b4c77c93b351f34c644f3edfc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-char&lt;/code&gt;, move one character to the right</source>
          <target state="translated">&lt;code&gt;forward-char&lt;/code&gt; , 한 문자를 오른쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="69c7f329fabcefeb785a251cd64e7edfe1324e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-jump-till&lt;/code&gt; and &lt;code&gt;backward-jump-till&lt;/code&gt;, jump to right &lt;em&gt;before&lt;/em&gt; the next occurence</source>
          <target state="translated">&lt;code&gt;forward-jump-till&lt;/code&gt; 및 &lt;code&gt;backward-jump-till&lt;/code&gt; , 다음 발생 &lt;em&gt;전에&lt;/em&gt; 바로 점프</target>
        </trans-unit>
        <trans-unit id="1830d65a1d0ae99be014807fe9ee4611ae5c7cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-jump&lt;/code&gt; and &lt;code&gt;backward-jump&lt;/code&gt;, read another character and jump to its next occurence after/before the cursor</source>
          <target state="translated">&lt;code&gt;forward-jump&lt;/code&gt; 및 &lt;code&gt;backward-jump&lt;/code&gt; , 다른 문자를 읽고 커서 전후 / 전의 다음 항목으로 이동</target>
        </trans-unit>
        <trans-unit id="9f7b1c0d2627b35f7922d0a527ca0016ff5c36b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-single-char&lt;/code&gt;, move one character to the right; if an autosuggestion is available, only take a single char from it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9dad2890372c362f50dea055adac7600258931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-word&lt;/code&gt;, move one word to the right</source>
          <target state="translated">&lt;code&gt;forward-word&lt;/code&gt; , 한 단어를 오른쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="e6e8eeb61d099e8de1c9e468dbd0faedeaeeb31c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funced&lt;/code&gt; provides an interface to edit the definition of the function &lt;code&gt;NAME&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;funced&lt;/code&gt; 는 &lt;code&gt;NAME&lt;/code&gt; 함수의 정의를 편집하기위한 인터페이스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="2753ba5c4bae0b9b373b407ccc8299866187e0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcsave&lt;/code&gt; saves a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3625cbdd272f6420b828620eec5563a06bbc58c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcsave&lt;/code&gt; saves the current definition of a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.</source>
          <target state="translated">&lt;code&gt;funcsave&lt;/code&gt; 는 기능의 현재 정의를 fish 구성 디렉토리의 파일에 저장합니다. 이 기능은 현재 및 미래의 어류 세션에 의해 자동으로로드됩니다. 이는 대화식으로 새 기능을 작성하고 나중에 사용하기 위해 저장하려는 경우 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc3a042e9241b89ce0f3da16336d2bde1174bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; creates a new function &lt;code&gt;NAME&lt;/code&gt; with the body &lt;code&gt;BODY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 는 &lt;code&gt;BODY&lt;/code&gt; 본문 으로 새 함수 &lt;code&gt;NAME&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="3af7bb7223f77891e90adffabdb2080b3a0a2ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; prints the name of the currently called function if able, when missing displays &quot;Not a function&quot; (or equivalent translated string). Also &lt;code&gt;current-function&lt;/code&gt;, &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--current-function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 은 가능한 경우 현재 호출 된 함수의 이름을 인쇄합니다. 누락 된 경우 &quot;함수 아님&quot;(또는 동등한 번역 된 문자열)이 표시됩니다. 또한 &lt;code&gt;current-function&lt;/code&gt; , &lt;code&gt;-u&lt;/code&gt; 또는 &lt;code&gt;--current-function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4643812feed737eb3baee29ce5d615a668b85b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;functions&lt;/code&gt; prints or erases functions.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; 은 기능을 인쇄하거나 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="896e9b70a76e025cb7a4fc6ddc0df0cb4a106204" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h-help&lt;/code&gt; means that only &lt;code&gt;--help&lt;/code&gt; is valid. The flag is a boolean and can be used more than once. If the long flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times the long flag was seen.</source>
          <target state="translated">&lt;code&gt;h-help&lt;/code&gt; 는 &lt;code&gt;--help&lt;/code&gt; 만 유효 함을 의미 합니다. 플래그는 부울이며 두 번 이상 사용할 수 있습니다. long 플래그가 사용 &lt;code&gt;_flag_h&lt;/code&gt; 및 &lt;code&gt;_flag_help&lt;/code&gt; 는 long 플래그가 표시된 횟수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="09288aed8a22be9a82fb278b641f44ba69a35f98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h/help&lt;/code&gt; means that both &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt; are valid. The flag is a boolean and can be used more than once. If either flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times either flag was seen.</source>
          <target state="translated">&lt;code&gt;h/help&lt;/code&gt; 는 &lt;code&gt;-h&lt;/code&gt; 와 &lt;code&gt;--help&lt;/code&gt; 가 모두 유효 함을 의미 합니다. 플래그는 부울이며 두 번 이상 사용할 수 있습니다. 두 플래그 중 하나를 사용하면 &lt;code&gt;_flag_h&lt;/code&gt; 및 &lt;code&gt;_flag_help&lt;/code&gt; 가 어느 플래그를 본 횟수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="16feba045a44f5217f42fc2759259d9b95307ba7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help fg&lt;/code&gt; shows the documentation for the &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746970369d18737059fb60a2ece7fe48509ad8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help fg&lt;/code&gt; shows the documentation for the &lt;code&gt;fg&lt;/code&gt; builtin.</source>
          <target state="translated">&lt;code&gt;help fg&lt;/code&gt; 에 대한 문서이다 &lt;code&gt;fg&lt;/code&gt; 내장을.</target>
        </trans-unit>
        <trans-unit id="5797714920f9421847912fe9d670163d439ec8c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; displays the fish help documentation.</source>
          <target state="translated">&lt;code&gt;help&lt;/code&gt; 은 물고기 도움말 설명서를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="370aef9fc7360bdd9af1206f300ec0481103e650" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; means that only &lt;code&gt;--help&lt;/code&gt; is valid. The flag is a boolean and can be used more than once. If it is used then &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times the long flag was seen. Also &lt;code&gt;h-help&lt;/code&gt; (with an arbitrary short letter) for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a867c4092fd3023f46dabcddec1b035654dccb7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-prefix-search-backward&lt;/code&gt;, search the history for the previous prefix match</source>
          <target state="translated">&lt;code&gt;history-prefix-search-backward&lt;/code&gt; , 이전 접두사 일치에 대한 기록 검색</target>
        </trans-unit>
        <trans-unit id="4724121cac1f31f0e4ab7853049507f1ab9329b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-prefix-search-forward&lt;/code&gt;, search the history for the next prefix match</source>
          <target state="translated">&lt;code&gt;history-prefix-search-forward&lt;/code&gt; , 다음 접두사 일치에 대한 기록 검색</target>
        </trans-unit>
        <trans-unit id="ce9a134be7d6c3fd7b46f7c9447ed9fd9db9b116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-backward&lt;/code&gt;, search the history for the previous match</source>
          <target state="translated">&lt;code&gt;history-search-backward&lt;/code&gt; , 이전 경기 기록을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="b12f1af53ca24866df742e9eba7ada28f4d9ae75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-forward&lt;/code&gt;, search the history for the next match</source>
          <target state="translated">&lt;code&gt;history-search-forward&lt;/code&gt; , 다음 경기 기록을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="6632dfe436b7488d60a30d70d61df7ca03bbf956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-token-search-backward&lt;/code&gt;, search the history for the previous matching argument</source>
          <target state="translated">&lt;code&gt;history-token-search-backward&lt;/code&gt; , 이전 일치 인수에 대한 기록 검색</target>
        </trans-unit>
        <trans-unit id="a609239143f411c48386cad2e73aaf20c665ae92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-token-search-forward&lt;/code&gt;, search the history for the next matching argument</source>
          <target state="translated">&lt;code&gt;history-token-search-forward&lt;/code&gt; , 다음 일치 인수에 대한 기록 검색</target>
        </trans-unit>
        <trans-unit id="0eb02a60247ad0d09f6ecb95a60dc44a1e6fd4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; is used to search, delete, and otherwise manipulate the &lt;a href=&quot;../index#history-search&quot;&gt;history of interactive commands&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; 는 &lt;a href=&quot;../index#history-search&quot;&gt;대화 형 명령&lt;/a&gt; 의 기록 을 검색, 삭제 및 조작하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="aa6bf6d133c84804bb8d0f2ee0748027119c8584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; is used to search, delete, and otherwise manipulate the history of interactive commands.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; 는 대화식 명령의 히스토리를 검색, 삭제 및 조작하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="953cae57649fdf5634381c21501202219d9f2172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;, a list containing the last commands that were entered.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; , 입력 된 마지막 명령이 포함 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="fe57c545655dee290e05e5b32cfb6ad7a4cf5bb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;, an array containing the last commands that were entered.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; , 마지막으로 입력 된 명령을 포함하는 배열.</target>
        </trans-unit>
        <trans-unit id="cd50886aee211e8ad669224737d342b173c7d958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hostname&lt;/code&gt;, the machine's hostname.</source>
          <target state="translated">&lt;code&gt;hostname&lt;/code&gt; , 머신의 호스트 이름.</target>
        </trans-unit>
        <trans-unit id="c23d9464a94cb5382adac437601bfc6e6de40d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If it is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 명령 &lt;code&gt;CONDITION&lt;/code&gt; 을 실행합니다 . 조건의 종료 상태가 0이면 &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; 명령 이 실행됩니다. 0이 아니고 &lt;code&gt;else&lt;/code&gt; 이 주어지면 &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="a417c9d192be18b8f6d0caa81a906f977b250fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If the exit status is not 0 and &lt;a href=&quot;else#cmd-else&quot;&gt;else&lt;/a&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 명령 실행합니다 &lt;code&gt;CONDITION&lt;/code&gt; . 조건의 종료 상태가 0이면 &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; 명령 이 실행됩니다. 종료 상태가 0이 아닌 경우 및 &lt;a href=&quot;else#cmd-else&quot;&gt;다른&lt;/a&gt; 주어, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e1c81c3c5812c0d8ce75bdcf435cb169e91e2f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If the exit status is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 명령 &lt;code&gt;CONDITION&lt;/code&gt; 을 실행합니다 . 조건의 종료 상태가 0이면 &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; 명령 이 실행됩니다. 종료 상태가 0이 아닌 경우 및 &lt;code&gt;else&lt;/code&gt; 주어, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="7092cd3e6a7baf145a554329a261b1c6df95980e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert-line-over&lt;/code&gt;, add a new line over the current line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3931ae309cf7c6df83b400fd274bc85ae3af60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert-line-under&lt;/code&gt;, add a new line under the current line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0719c8ef39d5ba9cdb52b9b6994b0a76cb2e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-block&lt;/code&gt; returns 0 if fish is currently executing a block of code. Also &lt;code&gt;-b&lt;/code&gt; or &lt;code&gt;--is-block&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-block&lt;/code&gt; 물고기가 현재 코드 블록을 실행중인 경우 is-block 은 0을 반환합니다. 또한 &lt;code&gt;-b&lt;/code&gt; 또는 &lt;code&gt;--is-block&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="574f1b55820e05845c504b6752312ab9f0763f46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-breakpoint&lt;/code&gt; returns 0 if fish is currently showing a prompt in the context of a &lt;code&gt;breakpoint&lt;/code&gt; command. See also the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;is-breakpoint&lt;/code&gt; 물고기가 현재 &lt;code&gt;breakpoint&lt;/code&gt; 명령 의 컨텍스트에서 프롬프트를 표시하면 is-breakpoint 는 0을 반환합니다 . &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c8b553e625d0552ce09454c632813c4ee0f7a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-command-sub&lt;/code&gt; returns 0 if fish is currently executing a command substitution. Also &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--is-command-substitution&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-command-sub&lt;/code&gt; 물고기가 현재 명령 대체를 실행중인 경우 is-command-sub 는 0을 반환합니다. 또한 &lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--is-command-substitution&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2c76516a8daa42dfc18cf477ffe1c800183d9d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-command-substitution&lt;/code&gt; returns 0 if fish is currently executing a command substitution. Also &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--is-command-substitution&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-command-substitution&lt;/code&gt; 은 fish가 현재 명령 대체를 실행 중이면 0을 반환합니다. 또한 &lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--is-command-substitution&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="44b12fafe48ecfbcc3d29be11195b0e55d3a15ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-full-job-control&lt;/code&gt; returns 0 if full job control is enabled. Also &lt;code&gt;--is-full-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-full-job-control&lt;/code&gt; 전체 작업 제어가 사용 가능한 경우 is-full-job-control 은 0을 리턴합니다. 또한 &lt;code&gt;--is-full-job-control&lt;/code&gt; (짧은 플래그 없음)입니다.</target>
        </trans-unit>
        <trans-unit id="b8f912dce380e13a37aefd2b619ed5f570f5dd6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive-job-control&lt;/code&gt; returns 0 if interactive job control is enabled. Also, &lt;code&gt;--is-interactive-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-interactive-job-control&lt;/code&gt; 대화식 작업 제어가 사용 가능한 경우 is-interactive-job-control 은 0을 리턴합니다. 또한 &lt;code&gt;--is-interactive-job-control&lt;/code&gt; (짧은 플래그 없음)입니다.</target>
        </trans-unit>
        <trans-unit id="29a242bbb960281ffd4abd84bdab87e608102fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive&lt;/code&gt; returns 0 if fish is interactive - that is, connected to a keyboard. Also &lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--is-interactive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-interactive&lt;/code&gt; 물고기가 대화 형인 경우, 즉 키보드에 연결된 경우 is-interactive 는 0을 반환합니다. 또한 &lt;code&gt;-i&lt;/code&gt; 또는 &lt;code&gt;--is-interactive&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="290a3fec35084c58a9babdadcf87d2dba57950ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-login&lt;/code&gt; returns 0 if fish is a login shell - that is, if fish should perform login tasks such as setting up the PATH. Also &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--is-login&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-login&lt;/code&gt; 물고기가 로그인 쉘인 경우 is-login 은 0을 반환합니다. 즉, 물고기가 PATH 설정과 같은 로그인 작업을 수행해야하는 경우입니다. 또한 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--is-login&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3247c5bb3c8c50669f128e0bae4bc2a69626afe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-no-job-control&lt;/code&gt; returns 0 if no job control is enabled. Also &lt;code&gt;--is-no-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-no-job-control&lt;/code&gt; 작업 제어가 사용 가능하지 않으면 is-no-job-control 은 0을 리턴합니다. 또한 &lt;code&gt;--is-no-job-control&lt;/code&gt; (짧은 플래그 없음)입니다.</target>
        </trans-unit>
        <trans-unit id="60d313a6d40fe77110c134273ac3e2a7b8ae317a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isatty&lt;/code&gt; tests if a file descriptor is a terminal (as opposed to a file). The name is derived from the system call of the same name, which for historical reasons refers to a teletypewriter (TTY).</source>
          <target state="translated">&lt;code&gt;isatty&lt;/code&gt; 는 파일 설명자가 터미널인지 (파일이 아닌) 테스트합니다. 이름은 동일한 이름의 시스템 호출에서 파생되었으며 역사적 이유로 TTY (텔레타이프 라이터)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="796eccea3c2925946b9056d5cc879303408c0681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isatty&lt;/code&gt; tests if a file descriptor is a tty.</source>
          <target state="translated">&lt;code&gt;isatty&lt;/code&gt; 는 파일 디스크립터가 tty인지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="c0df263f2b948bac739292c3ddc9acf8416ae56f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; sets the job control type, which can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;interactive&lt;/code&gt;. Also &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; or &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; 은 작업 제어 유형을 설정합니다. &lt;code&gt;none&lt;/code&gt; , &lt;code&gt;full&lt;/code&gt; 또는 &lt;code&gt;interactive&lt;/code&gt; 일 수 있습니다 . 또한 &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; 또는 &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7cde8ad0981c8e48203c6c5e456a35911d99f8f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;job-control CONTROL_TYPE&lt;/code&gt; sets the job control type, which can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;interactive&lt;/code&gt;. Also &lt;code&gt;-j CONTROL_TYPE&lt;/code&gt; or &lt;code&gt;--job-control CONTROL_TYPE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00800eab0dd8c8e4c813ebe5f0223f5a88122834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; outputs a summary of the current jobs, such as two long-running tasks in this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3951c97a9117fe33e430b00bd1987c8981de1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; outputs a summary of the current jobs.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; 는 현재 작업의 요약을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="7ac566c92429f7bac43b9a995fa6646aa67505b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; prints a list of the currently running &lt;a href=&quot;../index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; and their status.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; 는 현재 실행중인 &lt;a href=&quot;../index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 목록 과 해당 상태를 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="6add538256d52216f5d1b768f00171f403ab1b47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; prints a list of the currently running &lt;a href=&quot;index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; and their status.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; 는 현재 실행중인 &lt;a href=&quot;index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 및 상태 목록을 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="8351e11b5536a97176c78f4c39a337502e837f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-bigword&lt;/code&gt;, move the next whitespace-delimited word to the killring</source>
          <target state="translated">&lt;code&gt;kill-bigword&lt;/code&gt; , 다음 공백으로 구분 된 단어를 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="72618006835f7c9941204bbb5b3a9305d43c8849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-line&lt;/code&gt;, move everything from the cursor to the end of the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-line&lt;/code&gt; , 커서부터 줄 끝까지, 킬링까지 모든 것을 이동</target>
        </trans-unit>
        <trans-unit id="f2a174739861bddd91263d6062b0ac3b9c38035c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-selection&lt;/code&gt;, move the selected text to the killring</source>
          <target state="translated">&lt;code&gt;kill-selection&lt;/code&gt; , 선택한 텍스트를 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="42a3bfd3618e3b8e8ffa8030316a091858f2dc8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-whole-line&lt;/code&gt;, move the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-whole-line&lt;/code&gt; , 줄을 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="46c753278748bac6dfa1653ee040432fb7997faa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-word&lt;/code&gt;, move the next word to the killring</source>
          <target state="translated">&lt;code&gt;kill-word&lt;/code&gt; , 다음 단어를 killring으로 이동</target>
        </trans-unit>
        <trans-unit id="a1cd0e574da2f2e8f9dd802ac5736368dfe3f74a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;last_pid&lt;/code&gt;, the process ID (PID) of the last background process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb54e31a64cc891898da48f1a74d6a789921adb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;less&lt;/code&gt;, list the contents of files</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; , 파일 내용을 나열하십시오</target>
        </trans-unit>
        <trans-unit id="bcd91589f24923a18eda34bea169fdaf9603e834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;less&lt;/code&gt;: Display the contents of files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65ebe7417be893ffc0ac02b73f221d6578651ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line-number&lt;/code&gt; prints the line number of the currently running script. Also &lt;code&gt;current-line-number&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--current-line-number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;line-number&lt;/code&gt; 는 현재 실행중인 스크립트의 줄 번호를 인쇄합니다. 또한 &lt;code&gt;current-line-number&lt;/code&gt; , &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--current-line-number&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="625138e35c6aaa85c8f70ae1da66865bc83ab095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln&lt;/code&gt; - the base-e logarithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81061764e65e9ab42280021deb6358105970c12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; or &lt;code&gt;log10&lt;/code&gt; - the base-10 logarithm</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 또는 &lt;code&gt;log10&lt;/code&gt; - 밑이 10 인 로그</target>
        </trans-unit>
        <trans-unit id="a270a94b7f3cd45c0e4d9eb079912b43ced5cdfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;longonly=&lt;/code&gt; is a flag &lt;code&gt;--longonly&lt;/code&gt; that requires an option, there is no short flag or even short flag variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e7cc4141c2d5dd36d802d642e50b97c6b1ca17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls&lt;/code&gt;, list files and directories</source>
          <target state="translated">&lt;code&gt;ls&lt;/code&gt; , 파일 및 디렉토리 나열</target>
        </trans-unit>
        <trans-unit id="f6ec97c1f90ccc0acdd23329e5cb6f86daf22bf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls&lt;/code&gt;: List files and directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4830c6e74e8614fb12f3dce5192a1ccc76ff965d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt; is a command for displaying a manual page on a given topic. The man command takes the name of the manual page to display as an argument. There are manual pages for almost every command on most computers. There are also manual pages for many other things, such as system libraries and important files.</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; 은 주어진 주제에 대한 매뉴얼 페이지를 표시하는 명령입니다. man 명령은 매뉴얼 페이지의 이름을 인수로 표시합니다. 대부분의 컴퓨터에는 거의 모든 명령에 대한 매뉴얼 페이지가 있습니다. 시스템 라이브러리 및 중요한 파일과 같은 다른 많은 것들에 대한 매뉴얼 페이지도 있습니다.</target>
        </trans-unit>
        <trans-unit id="73e693d589ad85a4f595f45bc7f491c73bb44d92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt;, display a manual page on the screen</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; , 화면에 매뉴얼 페이지를 표시</target>
        </trans-unit>
        <trans-unit id="126de4425a9fbfa3f5f5dfcf628ffcbaf0e84bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt;: Display a manual page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0603c78171a3df042e3459a2196946ed1def38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;bitand(0xFE, 0x2e)&quot;&lt;/code&gt; outputs 46.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b537ae94331bd6ceb9a4fb22fc4f3ab749e1ba6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;bitor(9,2)&quot;&lt;/code&gt; outputs 11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ed3595a2a67bb3282ae1360db0e30794213ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; outputs &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; 을 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="eb050233a037dea5009df6afea79c6a67545439a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math $status - 128&lt;/code&gt; outputs the numerical exit status of the last command minus 128.</source>
          <target state="translated">&lt;code&gt;math $status - 128&lt;/code&gt; 은 마지막 명령 빼기 128의 숫자 종료 상태를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="63d0eef54b2a08f3abd9069e44380075ea7790a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math --base=hex 192&lt;/code&gt; prints &lt;code&gt;0xc0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f5bddd60dd031bee23091b7071808993dd4f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; outputs &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; 출력 &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee576ca1237b790b579b57a522ac77fdfe4dace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s3 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s3 10 / 6&lt;/code&gt; &lt;code&gt;1.666&lt;/code&gt; 출력 1.666 .</target>
        </trans-unit>
        <trans-unit id="2afd4d22ab4aec5b0acabaa13fdb5dab928d4b72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 0xFF&lt;/code&gt; outputs 255, &lt;code&gt;math 0 x 3&lt;/code&gt; outputs 0 (because it computes 0 multiplied by 3).</source>
          <target state="translated">&lt;code&gt;math 0xFF&lt;/code&gt; 는 255를 출력하고 &lt;code&gt;math 0 x 3&lt;/code&gt; 은 0을 출력합니다 (0에 3을 곱한 값을 계산하기 때문).</target>
        </trans-unit>
        <trans-unit id="81cc154eafffdbcc1fc0bc775abc9037a8ee7f57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 1+1&lt;/code&gt; outputs 2.</source>
          <target state="translated">&lt;code&gt;math 1+1&lt;/code&gt; 출력 2.</target>
        </trans-unit>
        <trans-unit id="0b9bceb25a6bea3bf050d266eb2dabb87359d38c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666667&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 10 / 6&lt;/code&gt; &lt;code&gt;1.666667&lt;/code&gt; 출력 1.666667 .</target>
        </trans-unit>
        <trans-unit id="0506f0b9975fb7a5dac75392d203b4e4d03c48aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 5 \* 2&lt;/code&gt; or &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; or &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; all output &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 5 \* 2&lt;/code&gt; 또는 &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; 또는 &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; 모두 &lt;code&gt;10&lt;/code&gt; 을 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="ac2f6b46e44457ebc6c17a24cac39023b91980ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +    2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 는 인수 사이의 공백을 무시하고 입력을 여러 인수 (내부적으로 공백으로 결합)로 사용하므로 &lt;code&gt;math 2 +2&lt;/code&gt; 와 &lt;code&gt;math &quot;2 + 2&quot;&lt;/code&gt; 는 동일하게 작동합니다. &lt;code&gt;math 2 2&lt;/code&gt; 는 오류입니다.</target>
        </trans-unit>
        <trans-unit id="5cfe1d0b897a4b186b164463b5e374849fe22e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 는 인수 사이의 공백을 무시하고 입력을 여러 인수 (내부적으로 공백으로 결합)로 취하므로 &lt;code&gt;math 2 +2&lt;/code&gt; 와 &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; 가 동일하게 작동합니다. &lt;code&gt;math 2 2&lt;/code&gt; 는 오류입니다.</target>
        </trans-unit>
        <trans-unit id="9ba0660e6966691b91248fb2bd5f96aab0fbeb26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;log2()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 수학 계산을 수행하는 데 사용됩니다. &lt;code&gt;abs()&lt;/code&gt; , &lt;code&gt;sqrt()&lt;/code&gt; 및 &lt;code&gt;log2()&lt;/code&gt; 와 같은 함수뿐만 아니라 더하기, 빼기 등과 같은 모든 일반적인 작업을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="f0c967cc75c19f494f0c88a7accc5d3cf4435577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows some operators, constants, functions and can (obviously) read numbers.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 일부 연산자, 상수, 함수를 알고 있으며 숫자를 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be9c5baace2aafc6d8913dc0e713e617b094c022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following constants:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 다음 상수를 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="54b59170a6a2d63ae4126c98f35573504c3fe866" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following operators:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 다음 연산자를 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="734e34f77e8861566c9e5dae95fca705b2d393da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; performs mathematical calculations. It supports simple operations such as addition, subtraction, and so on, as well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;ln()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009be72b39b76a473ac24d04bf2afb4a541294d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; supports the following functions:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 다음 기능을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="be1434f80555c9e72306465d0deaafae514e79ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; immediately incorporates history changes from other sessions. Ordinarily &lt;code&gt;fish&lt;/code&gt; ignores history changes from sessions started after the current one. This command applies those changes immediately.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; 즉시 다른 세션의 기록 변경 사항을 통합합니다. 일반적으로 &lt;code&gt;fish&lt;/code&gt; 는 현재 세션 이후에 시작된 세션의 기록 변경을 무시합니다. 이 명령은 이러한 변경 사항을 즉시 적용합니다.</target>
        </trans-unit>
        <trans-unit id="774a283e059b420761769f3fd4e58b1c4617fff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;, move (rename) files</source>
          <target state="translated">&lt;code&gt;mv&lt;/code&gt; , 파일 이동 (이름 바꾸기)</target>
        </trans-unit>
        <trans-unit id="70cb953c3ea6ee6baf32a061563438714f7b7872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;: Move (rename) files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5896fb9d9983a25b4acb8859bdc3aef24d4b75f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5068ef44383529da8a297fad4521ff3def0b93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n#max&lt;/code&gt; 는 정규식 &quot;^-? d + $&quot;와 일치하는 플래그가 유효 함을 의미합니다. 볼 때 변수 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_max&lt;/code&gt; 에 할당됩니다 . 이것은 하나의 &quot;-&quot;를 접두사로 붙여서 유효한 양 또는 음의 정수를 지정할 수 있도록합니다. 많은 명령이이 관용구를 지원합니다. 예를 들어 &lt;code&gt;head -3 /a/file&lt;/code&gt; 은 / a / file 의 처음 세 줄만 내 보냅니다. 이 예에서는 &lt;code&gt;-n NNN&lt;/code&gt; 또는 &lt;code&gt;--max NNN&lt;/code&gt; 플래그를 사용하여 값을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7023e674591c966dcf0f86a6fe75236339070f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n-name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence of the flag.</source>
          <target state="translated">&lt;code&gt;n-name=+&lt;/code&gt; 는 &lt;code&gt;--name&lt;/code&gt; 만 유효 함을 의미 합니다. 값이 필요하며 두 번 이상 사용할 수 있습니다. 플래그가 표시되면 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_name&lt;/code&gt; 은 플래그의 각 발생과 연관된 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="10c98ccb9e926b5c88017fefb6f1a99d034b3aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It requires a value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the single mandatory value associated with the flag.</source>
          <target state="translated">&lt;code&gt;n/name=&lt;/code&gt; 은 &lt;code&gt;-n&lt;/code&gt; 과 &lt;code&gt;--name&lt;/code&gt; 이 모두 유효 함을 의미 합니다. 값이 필요하며 최대 한 번 사용할 수 있습니다. 플래그가 표시되면 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_name&lt;/code&gt; 이 플래그와 연관된 단일 필수 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="11979a51fb38eb5d6b66a5b8c9d7f5b86329e977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=?&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It accepts an optional value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the value associated with the flag if one was provided else it will be set with no values.</source>
          <target state="translated">&lt;code&gt;n/name=?&lt;/code&gt; &lt;code&gt;-n&lt;/code&gt; 과 &lt;code&gt;--name&lt;/code&gt; 이 모두 유효 함을 의미 합니다. 선택적 값을 허용하며 최대 한 번 사용할 수 있습니다. 플래그가 표시되면 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_name&lt;/code&gt; 은 플래그가 제공된 경우 플래그와 연관된 값으로 설정되며, 그렇지 않은 경우 값이 설정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a3aaaa7ebe33bd42f7c7723f56bc9270c4a585f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n::max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n::max&lt;/code&gt; 는 정규식 &quot;^-? \ d + $&quot;와 일치하는 플래그가 유효 함을 의미합니다. 보았을 때 변수 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_max&lt;/code&gt; 에 할당되었습니다 . 이를 통해 단일 &quot;-&quot;접두어를 사용하여 유효한 양수 또는 음수를 지정할 수 있습니다. 많은 명령이이 관용구를 지원합니다. 예를 들어 &lt;code&gt;head -3 /a/file&lt;/code&gt; 은 / a / file 의 처음 세 줄만 내 보냅니다. 이 예에서 플래그 &lt;code&gt;-n NNN&lt;/code&gt; 또는 &lt;code&gt;--max NNN&lt;/code&gt; 을 사용하여 값을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1974cd27b936ab7a9712f59ff231a57829df2f50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dde85ee198e14272ca271cfb23d628296344a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the &lt;a href=&quot;../index#directory-history&quot;&gt;history of visited directories&lt;/a&gt;; if the end of the history has been hit, a warning is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18757061001b09cf2873d7ed5d548b11e41c7525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the end of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;nextd&lt;/code&gt; 는 방문한 디렉토리 기록에서 &lt;code&gt;POS&lt;/code&gt; 위치를 앞으로 이동 시킵니다 . 히스토리의 끝에 도달하면 경고가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="cea306a2ee9cfb2d8fb7788331bf26c28447c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not&lt;/code&gt; negates the exit status of another command. If the exit status is zero, &lt;code&gt;not&lt;/code&gt; returns 1. Otherwise, &lt;code&gt;not&lt;/code&gt; returns 0.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; 다른 명령의 종료 상태를 무효화 하지 않습니다 . 종료 상태가 제로의 경우, &lt;code&gt;not&lt;/code&gt; 1. 그렇지 않으면 반환 &lt;code&gt;not&lt;/code&gt; 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="db48abf0126ad617f48775398922a0b4b30d0bc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open *.txt&lt;/code&gt; opens all the text files in the current directory using your system's default text editor.</source>
          <target state="translated">&lt;code&gt;open *.txt&lt;/code&gt; 는 시스템의 기본 텍스트 편집기를 사용하여 현재 디렉토리의 모든 텍스트 파일을 엽니 다.</target>
        </trans-unit>
        <trans-unit id="e94f06b97a3cfcb7ec8a4770650b1e748f69af17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional &lt;code&gt;xdg-open&lt;/code&gt; utility, from the &lt;code&gt;xdg-utils&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 은 운영 체제에 적합한 도구를 사용하여 기본 응용 프로그램에서 파일을 엽니 다. GNU / Linux에서는 &lt;code&gt;xdg-utils&lt;/code&gt; 패키지 의 일반적이지만 선택적인 &lt;code&gt;xdg-open&lt;/code&gt; 유틸리티 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="23eeee895599e5eae80cda23801496141175086a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, open files with the default application associated with each filetype</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 각 파일 형식과 관련된 기본 응용 프로그램과 함께, 열려있는 파일</target>
        </trans-unit>
        <trans-unit id="6f86ac0554f4a4cf4f28495788244852b2e6599f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 현재 종료 상태 자체를 변경하지 않지만 실행되는 명령은 대부분 변경됩니다. 종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dac5a9585518dd59c14ca7616fb90e727007732e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 현재 종료 상태 자체를 변경하지는 않지만 가장 많이 실행되는 명령이 작동합니다. 종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="011af2ca1a12c1a3f3a067f4ab735209202aafb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; is used to execute a command if the previous command was not successful (returned a status of something other than 0).</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 이전 명령이 성공적이지 않은 경우 명령을 실행하는 데 사용됩니다 (0 이외의 상태를 반환 함).</target>
        </trans-unit>
        <trans-unit id="afa6b74bd124cb8b57c3d66b4c7a1084e37218d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; block. See the documentation for &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 문은 &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 블록 에서 조건의 일부로 사용될 수 있습니다 . &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 문서 는 예제 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c73d73d5ebdf318201e26c0530d1eeb58fc2ce6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 문은 &lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt; 또는 &lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt; 블록 에서 조건의 일부로 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf4d75478e5e579c27aec58655a02ee30fe78ac3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt;, only execute the next function if the previous succeeded (note: only some functions report success)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f200b52a1765aa96f91d9512533bf90cd4d3e3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pager-toggle-search&lt;/code&gt;, toggles the search field if the completions pager is visible.</source>
          <target state="translated">&lt;code&gt;pager-toggle-search&lt;/code&gt; , 완료 페이저가 표시되면 검색 필드를 토글합니다.</target>
        </trans-unit>
        <trans-unit id="94b3685be3c69fedec8ad15d840b332000b7cadb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - &amp;pi;. You know this one. Half of Tau.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e6cd2cf57f32f0f1074687103ba4dd1420c892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - You know that one. Half of Tau. (Tau is not implemented)</source>
          <target state="translated">&lt;code&gt;pi&lt;/code&gt; - 당신은 저것을 알고 있습니다. 타우의 절반. (타우 구현되지 않음)</target>
        </trans-unit>
        <trans-unit id="0f446d5ed35eb5048e4c7f001b1f27dc9402116e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipestatus&lt;/code&gt;, a list of exit statuses of all processes that made up the last executed pipe.</source>
          <target state="translated">&lt;code&gt;pipestatus&lt;/code&gt; , 마지막으로 실행 된 파이프를 구성한 모든 프로세스의 종료 상태 목록입니다.</target>
        </trans-unit>
        <trans-unit id="cfd4c5f41b27739101b5f4355562dc72dc6236d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt; and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f28400f6533478b46d55c90e3c872cc0eaea4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; to add directories to the stack.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; 는 디렉토리 스택에서 최상위 디렉토리를 제거하고 작업 디렉토리를 새 최상위 디렉토리로 변경합니다. &lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt; 를 사용 하여 스택에 디렉토리를 추가 하십시오 .</target>
        </trans-unit>
        <trans-unit id="67a047b7a48542b870bd5211e515649aee68917e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack or &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print it.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; 는 디렉토리 스택에서 최상위 디렉토리를 제거하고 작업 디렉토리를 새 최상위 디렉토리로 변경합니다. 사용 &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;PUSHD를&lt;/a&gt; 스택이나 디렉토리를 추가 할 &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;DIRS&lt;/a&gt; 를 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c23cde6c68fbe655e308c020e25d49d09dd62da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pow(x,y)&lt;/code&gt; returns x to the y (and can be written as &lt;code&gt;x ^ y&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;pow(x,y)&lt;/code&gt; 는 x를 y에 반환합니다 ( &lt;code&gt;x ^ y&lt;/code&gt; 로 쓸 수 있음 )</target>
        </trans-unit>
        <trans-unit id="1ebf7e7d53234ae4fb48ce662e1d9ab1a7b3ca59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the &lt;a href=&quot;../index#directory-history&quot;&gt;history of visited directories&lt;/a&gt;; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287de450b9e0483d85e25a5a84e5f182194a1456" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;prevd&lt;/code&gt; 는 방문한 디렉토리 기록에서 &lt;code&gt;POS&lt;/code&gt; 위치를 뒤로 이동합니다 . 히스토리의 시작 부분에 도달하면 경고가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="758894fa9ac3dcdc16edfc52096829dc60931b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prompt_pwd&lt;/code&gt; is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="translated">&lt;code&gt;prompt_pwd&lt;/code&gt; 는 프롬프트에 적합한 방식으로 현재 작업 디렉토리를 인쇄하는 함수입니다. 홈 디렉토리를 &quot;~&quot;로 바꾸고 모든 경로 구성 요소를 줄이지 만 마지막은 기본값 인 한 문자로 줄입니다.</target>
        </trans-unit>
        <trans-unit id="e5c43c64e240d0f4ae1a99ca5c42cd0423139bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd +NUMBER&lt;/code&gt; rotates the stack counter-clockwise i.e. from bottom to top</source>
          <target state="translated">&lt;code&gt;pushd +NUMBER&lt;/code&gt; 누르면 스택이 시계 반대 방향으로 회전합니다. 즉, 아래에서 위로</target>
        </trans-unit>
        <trans-unit id="6ba679406b42673c5180f9bba2472c6204d8f0cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd -NUMBER&lt;/code&gt; rotates clockwise i.e. top to bottom.</source>
          <target state="translated">&lt;code&gt;pushd -NUMBER&lt;/code&gt; 시계 방향으로 (예 : 위에서 아래로) 회전합니다.</target>
        </trans-unit>
        <trans-unit id="d9173c9010853802ba5c4a311f821ba14078009e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pwd&lt;/code&gt; outputs (prints) the current working directory.</source>
          <target state="translated">&lt;code&gt;pwd&lt;/code&gt; 는 현재 작업 디렉토리를 출력 (인쇄)합니다.</target>
        </trans-unit>
        <trans-unit id="4222bac83e593bcc8b83125f0cac99a87ea7f79f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;random&lt;/code&gt; generates a pseudo-random integer from a uniform distribution. The range (inclusive) depends on the arguments. No arguments indicate a range of 0 to 32767 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ec7167859aebdbfb7c4a4a7e1050eee5ed4896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt; reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, &lt;code&gt;read&lt;/code&gt; reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as &lt;code&gt;REPLY&lt;/code&gt;) for storing the result - instead, it is printed on standard output.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 표준 입력에서 읽고 결과를 표준 출력에 다시 쓰거나 (명령 대체에 사용) 하나 이상의 쉘 변수에 결과를 저장합니다. 기본적으로 &lt;code&gt;read&lt;/code&gt; 는 단일 행을 읽고 공백 또는 탭의 변수로 분할합니다. 또는 널 문자 또는 최대 문자 수를 사용하여 입력을 종료하고 다른 구분 기호를 지정할 수 있습니다. 다른 쉘과 달리 결과를 저장하기위한 기본 변수 (예 : &lt;code&gt;REPLY&lt;/code&gt; ) 는 없습니다. 대신 표준 출력에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="581f42e718d0bcfbf0164027aaefb2e2e09daff6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;realpath&lt;/code&gt; resolves a path to its absolute path.</source>
          <target state="translated">&lt;code&gt;realpath&lt;/code&gt; 는 절대 경로에 대한 경로를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="35bd00f382e8670d7d44d2b40cf3fca33494e874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt; reexecutes the fish_mode_prompt function and redraws the prompt. This is useful for vi-mode. If no fish_mode_prompt exists, it acts like a normal repaint.</source>
          <target state="translated">&lt;code&gt;repaint-mode&lt;/code&gt; 는 fish_mode_prompt 함수를 다시 실행하고 프롬프트를 다시 그립니다. 이것은 vi-mode에 유용합니다. fish_mode_prompt가 존재하지 않으면 일반적인 다시 그리기처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="bb9598a01950bf1278cfe9bf8ae5167278ce094d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt;, reexecutes the &lt;a href=&quot;fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; and redraws the prompt. This is useful for vi-mode. If no &lt;code&gt;fish_mode_prompt&lt;/code&gt; exists or it prints nothing, it acts like a normal repaint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af37077a702119f1289199205be5c8570e1f654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt; reexecutes the prompt functions and redraws the prompt. Multiple successive repaints are coalesced.</source>
          <target state="translated">&lt;code&gt;repaint&lt;/code&gt; 는 프롬프트 기능을 다시 실행하고 프롬프트를 다시 그립니다. 여러 번의 연속 다시 그리기가 합쳐집니다.</target>
        </trans-unit>
        <trans-unit id="4ee747f75ea57d78f580575bca29b030acd1155b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt;, reexecutes the prompt functions and redraws the prompt (also &lt;code&gt;force-repaint&lt;/code&gt; for backwards-compatibility)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff49b83e64396ed910787499c3a6a700a00c3e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeat-jump&lt;/code&gt; and &lt;code&gt;repeat-jump-reverse&lt;/code&gt;, redo the last jump in the same/opposite direction</source>
          <target state="translated">&lt;code&gt;repeat-jump&lt;/code&gt; 및 &lt;code&gt;repeat-jump-reverse&lt;/code&gt; , 동일한 / 반대 방향으로 마지막 점프를 다시 실행</target>
        </trans-unit>
        <trans-unit id="4b249dc97dd0ed2d7efc75e8750d13ccd586b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; halts a currently running function. The exit status is set to &lt;code&gt;STATUS&lt;/code&gt; if it is given.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 은 현재 실행중인 기능을 중지합니다. 종료 상태가 제공되면 &lt;code&gt;STATUS&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="2dff648efb696543bf4783ef158dc6faac05096b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; - rounds to the nearest integer, away from 0</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; -0에서 가장 가까운 정수로 반올림</target>
        </trans-unit>
        <trans-unit id="9ae815b29923bb2081652f0d74075b638b35e307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; 즉시 모든 변경 사항을 기록 파일에 씁니다. 쉘은 자동으로 히스토리 파일을 저장합니다. 이 옵션은 내부 용으로 제공되며 일반적으로 사용자가 사용할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="f9cbc63b923d6e80c08215a900beb75279f6f039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope-shadowing&lt;/code&gt; if the function shadows the vars in the calling function (the normal case if it wasn't defined with &lt;code&gt;--no-scope-shadowing&lt;/code&gt;), else &lt;code&gt;no-scope-shadowing&lt;/code&gt;, or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined,</source>
          <target state="translated">&lt;code&gt;scope-shadowing&lt;/code&gt; 함수가 호출 함수에서 var를 음영 처리하는 경우 scope-shadowing ( &lt;code&gt;--no-scope-shadowing&lt;/code&gt; 으로 정의되지 않은 경우 일반적인 경우 ), 그렇지 않으면 &lt;code&gt;no-scope-shadowing&lt;/code&gt; 또는 함수가 아닌 경우 &lt;code&gt;n/a&lt;/code&gt; 한정된,</target>
        </trans-unit>
        <trans-unit id="28ff499477de962fb27a4867869e04752ace3e7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search&lt;/code&gt; returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say &lt;code&gt;history search&lt;/code&gt; if you wish to search for one of the subcommands. The &lt;code&gt;--contains&lt;/code&gt; search option will be used if you don't specify a different search option. Entries are ordered newest to oldest unless you use the &lt;code&gt;--reverse&lt;/code&gt; flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; 은 검색 문자열과 일치하는 기록 항목을 반환합니다. 검색 문자열이 제공되지 않으면 모든 기록 항목을 반환합니다. 다른 작업이 지정되지 않은 경우 이것이 기본 작업입니다. 부속 명령 중 하나를 검색하려면 &lt;code&gt;history search&lt;/code&gt; 만 명시 적으로 말하면 됩니다. &lt;code&gt;--contains&lt;/code&gt; 의 다른 검색 옵션을 지정하지 않으면 검색 옵션이 사용됩니다. &lt;code&gt;--reverse&lt;/code&gt; 플래그 를 사용하지 않으면 항목은 최신에서 가장 오래된 항목으로 정렬 됩니다. stdout이 tty에 연결되면 출력은 히스토리 기능에 의해 호출기를 통해 파이프됩니다. 히스토리 내장은 단순히 결과를 표준 출력에 기록합니다.</target>
        </trans-unit>
        <trans-unit id="f3f96766ba4c2b74ccc38f1a311d22fc52bcedcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert-notfirst&lt;/code&gt;, inserts the matching sequence into the command line, unless the cursor is at the beginning</source>
          <target state="translated">&lt;code&gt;self-insert-notfirst&lt;/code&gt; , 커서가 시작 부분에 있지 않으면 일치하는 시퀀스를 명령 줄에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="47994204741d29e8fba63c4defd897209f0ef532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert&lt;/code&gt;, inserts the matching sequence into the command line</source>
          <target state="translated">&lt;code&gt;self-insert&lt;/code&gt; , 일치하는 시퀀스를 명령 줄에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="3c7412bb3c267d60c210b7f29f1dcceac204bd2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq(1)&lt;/code&gt; can be used as a replacement for &lt;code&gt;{1..10}&lt;/code&gt; range expansion. If your OS doesn't ship a &lt;code&gt;seq&lt;/code&gt; fish includes a replacement function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c102ee1c01aee7c5234def07fe9f1921b397a6f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set -q&lt;/code&gt; can be used to determine if a variable exists or has a certain number of elements (&lt;code&gt;set -q foo[2]&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc81f408553d427ee9413652a2f976a6b4c6dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;../index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 는 &lt;a href=&quot;../index#variables&quot;&gt;쉘 변수를&lt;/a&gt; 조작 합니다 .</target>
        </trans-unit>
        <trans-unit id="78965c3228dd7b50cac24fd22a4c3a8f0bdef2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 &lt;a href=&quot;index#variables&quot;&gt;쉘 변수를&lt;/a&gt; 조작 합니다 .</target>
        </trans-unit>
        <trans-unit id="4f185cc7bb3302f1e1eb498766b8e2bd113f381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; requires all options to come before any other arguments. For example, &lt;code&gt;set flags -l&lt;/code&gt; will have the effect of setting the value of the variable &lt;code&gt;flags&lt;/code&gt; to '-l', not making the variable local.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 모든 옵션이 다른 인수보다 먼저 나오도록 요구합니다. 예를 들어, &lt;code&gt;set flags -l&lt;/code&gt; 은 변수를 로컬로 만들지 않고 변수 &lt;code&gt;flags&lt;/code&gt; 의 값 을 '-l' 로 설정하는 효과가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9948f6276410fe2f9dcf81419917c9bdeb9052d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; corresponds to a reserved color name such as &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits. The &lt;em&gt;br&lt;/em&gt;-, as in 'bright', forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray. A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 는 터미널에서 텍스트의 색상 및 스타일을 제어하는 ​​데 사용됩니다. &lt;code&gt;VALUE&lt;/code&gt; 는 3 자리 또는 6 자리 16 진수로 지정된 &lt;em&gt;빨강&lt;/em&gt; 또는 RGB 색상 값 과 같은 예약 된 색상 이름에 해당합니다 . &lt;em&gt;BR은&lt;/em&gt; - '밝은'에서와 같이 형태가 전체 밝기가 많은 터미널에 8 표준 밝기 색상의 변종이다. &lt;em&gt;brblack&lt;/em&gt; 은 &lt;em&gt;검은 색&lt;/em&gt; 보다 회색 보다 높은 밝기를 갖습니다 . 특수 키워드 &lt;em&gt;normal은&lt;/em&gt; 텍스트 형식을 터미널 기본값으로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="9a61b97a3a96f79739663fe1e066e0c4c4c00523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; describes that styling. It's a reserved color name like &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits (&quot;F27&quot; or &quot;FF2277&quot;). A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 는 터미널에서 텍스트의 색상과 스타일을 제어하는 ​​데 사용됩니다. &lt;code&gt;VALUE&lt;/code&gt; 는 해당 스타일을 설명합니다. &lt;em&gt;빨간색&lt;/em&gt; 과 같은 예약 된 색상 이름 이거나 3 자리 또는 6 자리 16 진수 ( &quot;F27&quot;또는 &quot;FF2277&quot;)로 제공된 RGB 색상 값입니다. 특수 키워드 &lt;em&gt;normal은&lt;/em&gt; 텍스트 형식을 터미널 기본값으로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="ab26307dc8847048c91facf1a58ea82662da70fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit code of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 는 일련의 문자를 &lt;em&gt;stdout&lt;/em&gt; 에 인쇄하여 작동합니다 . 명령 대체 또는 파이프에 사용되는 경우 이러한 문자도 캡처됩니다. 이것은 바람직하거나 바람직하지 않을 수 있습니다. &lt;code&gt;set_color&lt;/code&gt; 를 사용하기 전에 &lt;code&gt;isatty stdout&lt;/code&gt; 의 종료 코드를 확인하면 스크립트에서 출력을 색상 화하지 않기로 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0edcbbfc0660173d1858fb94dc65feaa1949db9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit status of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 는 문자 시퀀스를 &lt;em&gt;stdout&lt;/em&gt; 에 인쇄하여 작동합니다 . 명령 대체 또는 파이프에 사용되는 경우 이러한 문자도 캡처됩니다. 이것은 바람직하거나 바람직하지 않을 수 있습니다. &lt;code&gt;set_color&lt;/code&gt; 를 사용하기 전에 &lt;code&gt;isatty stdout&lt;/code&gt; 의 종료 상태를 확인하는 것은 스크립트에서 출력을 색상 화하지 않도록 결정하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f8f7bb400593234e096f28a62980d44f3d7595d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; creates a new &lt;a href=&quot;../index#variables-scope&quot;&gt;local scope&lt;/a&gt;; &lt;code&gt;set --local&lt;/code&gt; within a sourced block will not affect variables in the enclosing scope.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 는 새 &lt;a href=&quot;../index#variables-scope&quot;&gt;로컬 범위를&lt;/a&gt; 만듭니다 . 소스 블록 내의 &lt;code&gt;set --local&lt;/code&gt; 은 둘러싸는 범위의 변수에 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="44bd12edd43e43a291874a613bddb397393e4363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell as a new block of code. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 는 현재 쉘에서 지정된 파일의 명령을 새 코드 블록으로 평가합니다. 이것은 명령을 수행하기 위해 새 프로세스를 시작하는 것과는 다릅니다 (예 : &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ). 명령은 현재 쉘에 의해 평가되므로 쉘 변수의 변경이 현재 쉘에 영향을 미칩니다. 파일 이름 뒤에 추가 인수가 지정되면 &lt;code&gt;$argv&lt;/code&gt; 변수에 삽입됩니다 . &lt;code&gt;$argv&lt;/code&gt; 변수는 전래 파일의 이름을 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="92cf10690e111961211954c672900c642fb4e17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 는 현재 쉘에서 지정된 파일의 명령을 평가합니다. 현재 쉘에서 명령이 평가되므로 쉘 변수의 변경이 현재 쉘에 영향을 미치므로 명령을 수행하기 위해 새 프로세스를 시작하는 것과 다릅니다 (즉, &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ). 파일 이름 뒤에 추가 인수가 지정되면 &lt;code&gt;$argv&lt;/code&gt; 변수에 삽입됩니다 . &lt;code&gt;$argv&lt;/code&gt; 변수는 전래 파일의 이름을 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b682c0f9f4fd30b611d91123367bf03905b468de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split0&lt;/code&gt; has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as &lt;code&gt;find -print0&lt;/code&gt; or &lt;code&gt;sort -z&lt;/code&gt;. See split0 examples below.</source>
          <target state="translated">&lt;code&gt;split0&lt;/code&gt; 은 명령 대체에 사용될 때 출력이 더 이상 분할되지 않는 중요한 특성을 가지므로 명령 대체가 개행을 포함하는 요소를 생성 할 수 있습니다. &lt;code&gt;find -print0&lt;/code&gt; 또는 &lt;code&gt;sort -z&lt;/code&gt; 와 같이 0 바이트를 생성하는 Unix 도구와 함께 사용할 때 가장 유용합니다 . 아래 split0 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b18d9d888505a6c0fddbe8b5ab5788ebfaae04f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack-trace&lt;/code&gt; prints a stack trace of all function calls on the call stack. Also &lt;code&gt;print-stack-trace&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--print-stack-trace&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stack-trace&lt;/code&gt; 는 호출 스택에서 모든 함수 호출의 스택 추적을 인쇄합니다. 또한 &lt;code&gt;print-stack-trace&lt;/code&gt; , &lt;code&gt;-t&lt;/code&gt; 또는 &lt;code&gt;--print-stack-trace&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="67df8697fda987cf4b0f9d793cb1a365c353272b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;, the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; , &lt;a href=&quot;#variables-status&quot;&gt;종료&lt;/a&gt; 할 마지막 포 그라운드 작업 의 종료 상태 . 신호를 통해 작업이 종료 된 경우 종료 상태는 128에 신호 번호를 더한 값입니다.</target>
        </trans-unit>
        <trans-unit id="c516a3058e8b540cff793a7d265b4f62a8c6e479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status_generation&lt;/code&gt;, the &quot;generation&quot; count of &lt;code&gt;$status&lt;/code&gt;. This will be incremented only when the previous command produced an explicit status. (For example, background jobs will not increment this).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f1259baf47f016edcc07c02ff8cac3eb36ec8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string collect&lt;/code&gt; collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non-empty, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string collect&lt;/code&gt; 는 명령 대체에 사용될 때 출력을 분할하지 않고 입력을 단일 출력 인수로 수집 합니다. 이것은 다른 명령의 여러 줄 출력을 변수로 수집하려고 할 때 유용합니다. 종료 상태 : 출력 인수가 비어 있지 않으면 0, 그렇지 않으면 1.</target>
        </trans-unit>
        <trans-unit id="47aeedf462897d3635e7a17a92b7bf0d2db0992d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string escape&lt;/code&gt; escapes each STRING in one of three ways. The first is &lt;code&gt;--style=script&lt;/code&gt;. This is the default. It alters the string such that it can be passed back to &lt;code&gt;eval&lt;/code&gt; to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-quoted&lt;/code&gt; is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string escape&lt;/code&gt; 는 세 가지 방법 중 하나로 각 STRING을 이스케이프합니다. 첫 번째는 &lt;code&gt;--style=script&lt;/code&gt; 입니다. 이것이 기본값입니다. 원래 인수를 다시 생성하기 위해 문자열을 &lt;code&gt;eval&lt;/code&gt; 로 다시 전달할 수 있도록 문자열을 변경 합니다. 기본적으로 모든 특수 문자는 이스케이프되며 따옴표는 가능한 경우 출력을 단순화하는 데 사용됩니다. 경우 &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--no-quoted&lt;/code&gt; 주어진다의 단순화 인용 형식이 사용되지 않습니다. 종료 상태 : 하나 이상의 문자열이 이스케이프 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="b4c7444a524aa0a5c6e14a9e5a8c764cdc56c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join0&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join0&lt;/code&gt; 은 STRING 인수를 0 바이트 (NUL)로 구분 된 단일 문자열로 결합하고 후행 NUL을 추가합니다. 이는 &lt;code&gt;sort -z&lt;/code&gt; 와 같이 NUL로 구분 된 입력을 허용하는 도구와 함께 사용할 때 가장 유용합니다 . 종료 상태 : 하나 이상의 결합이 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="d4c0633e8572c3f56e421d3e1415eb94bb2502dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; 은 STRING 인수를 SEP로 구분 된 단일 문자열로 결합 합니다 (빈 문자열 일 수 있음). 종료 상태 : 하나 이상의 결합이 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="4ac8783d6c5b8669120457e3abfbead54a865de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; 은 STRING 인수를 0 바이트 (NUL)로 구분 된 단일 문자열로 결합하고 후미 NUL을 추가합니다. 이는 &lt;code&gt;sort -z&lt;/code&gt; 와 같이 NUL 구분 입력을 허용하는 도구와 함께 사용하면 가장 유용합니다 . 종료 상태 : 하나 이상의 결합이 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="31f0710b84864509b27d49251c16e09dbb8cd30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string length&lt;/code&gt; reports the length of each string argument in characters. Exit status: 0 if at least one non-empty STRING was given, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string length&lt;/code&gt; 는 각 문자열 인수의 길이를 문자로보고합니다. 종료 상태 : 비어 있지 않은 STRING이 하나 이상 있으면 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="ca94e657994de04d0305dfa680bad3e53fc3ae46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string lower&lt;/code&gt; converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already lowercase.</source>
          <target state="translated">&lt;code&gt;string lower&lt;/code&gt; 는 각 문자열 인수를 소문자로 변환합니다. 종료 상태 : 하나 이상의 문자열이 소문자로 변환 된 경우 0, 그렇지 않으면 1. &lt;code&gt;-q&lt;/code&gt; 플래그 와 함께 문자열이 이미 소문자인지 쉽게 테스트 할 수 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="333a78e8a7e90eb78cb032128941a70a0f45d451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string match&lt;/code&gt; tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; is given, in which case all matches are reported.</source>
          <target state="translated">&lt;code&gt;string match&lt;/code&gt; 는 각 STRING을 패턴에 대해 테스트하고 일치하는 하위 문자열을 인쇄합니다. &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 을 지정 하지 않으면 각 STRING의 첫 번째 일치 만보고 되며,이 경우 모든 일치가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="a40e5293c1ed33089c8c9998d925a7c5a922a64b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string pad&lt;/code&gt; extends each STRING to the given width by adding CHAR to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91089de95c70b9064ef9a4fecf2979a43632d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string repeat&lt;/code&gt; repeats the STRING &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--count&lt;/code&gt; times. The &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with &lt;code&gt;--count&lt;/code&gt;. If both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If &lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--no-newline&lt;/code&gt; is given, the output won't contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string repeat&lt;/code&gt; 은 STRING &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--count&lt;/code&gt; 횟수를 반복합니다 . &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 옵션 (줄 바꿈 제외) 출력 문자의 수를 제한합니다. 이 옵션은 &lt;code&gt;--count&lt;/code&gt; 또는 --count 와 함께 사용할 수 있습니다 . &lt;code&gt;--count&lt;/code&gt; 와 &lt;code&gt;--max&lt;/code&gt; 가 모두있는 경우 최종 반복 문자열 크기가 max보다 작지 않으면 max char가 출력됩니다.이 경우 문자열은 count에 도달 할 때까지 반복됩니다. &lt;code&gt;--count&lt;/code&gt; 와 &lt;code&gt;--max&lt;/code&gt; 는 모두 0 이상의 숫자를 허용하며, 0의 경우 아무 것도 출력되지 않습니다. 만약 &lt;code&gt;-N&lt;/code&gt; 또는 &lt;code&gt;--no-newline&lt;/code&gt; 결과는 끝에 줄 바꿈 문자가 포함되지 않습니다. 종료 상태 : 생성 된 문자열이 비어 있지 않으면 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="cd631213eafa5a59cc02430161fa5c4930279381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string replace&lt;/code&gt; is similar to &lt;code&gt;string match&lt;/code&gt; but replaces non-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.</source>
          <target state="translated">&lt;code&gt;string replace&lt;/code&gt; 는 &lt;code&gt;string match&lt;/code&gt; 와 유사 하지만 겹치지 않는 일치하는 하위 문자열을 대체 문자열로 바꾸고 결과를 인쇄합니다. 기본적으로 PATTERN은 일치 할 리터럴 하위 문자열로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="b0a1126fe21f179855ec4e248020911f83cdef8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \\n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string split somedelimiter&lt;/code&gt; 는 &lt;code&gt;tr somedelimiter \\n&lt;/code&gt; 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="bb7a2e7f64d2c2e08b4a820caeac0aba91bed9eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa496c6349d03b4676c999aab50e066cb8b5aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split0&lt;/code&gt; splits each STRING on the zero byte (NUL). Options are the same as &lt;code&gt;string split&lt;/code&gt; except that no separator is given.</source>
          <target state="translated">&lt;code&gt;string split0&lt;/code&gt; 은 각 STRING을 0 바이트 (NUL)로 분할합니다. 옵션은 구분자가 제공되지 않는다는 점을 제외하고 &lt;code&gt;string split&lt;/code&gt; 동일합니다.</target>
        </trans-unit>
        <trans-unit id="04bcff6b42bd8f1e79e01e4a6814e48e20fbe176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split&lt;/code&gt; splits each STRING on the separator SEP, which can be an empty string. If &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; is specified, at most MAX splits are done on each STRING. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, splitting is performed right-to-left. This is useful in combination with &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt;. With &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-empty&lt;/code&gt;, empty results are excluded from consideration (e.g. &lt;code&gt;hello\n\nworld&lt;/code&gt; would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string split&lt;/code&gt; 은 분리기 SEP에서 각 STRING을 분할하며 빈 스트링 일 수 있습니다. 만약 &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 는 대부분의 MAX 분할은 각 STRING에 완료에, 지정됩니다. 경우 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--right&lt;/code&gt; 이 주어집니다, 분할은 오른쪽에서 왼쪽으로 수행됩니다. &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 와 함께 사용하면 유용합니다 . 함께 &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--no-empty&lt;/code&gt; , 빈 결과는 고려 대상에서 제외됩니다 (예 : &lt;code&gt;hello\n\nworld&lt;/code&gt; 두 개의 문자열이 아니라 세 가지로 확장 것이다). 종료 상태 : 하나 이상의 분할이 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="eb23e8e3b2836edf4562f76805e4e7dee2577723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start of the substring can be specified with &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string sub&lt;/code&gt; 는 각 문자열 인수의 하위 문자열을 인쇄합니다. 하위 문자열의 시작은 &lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--start&lt;/code&gt; 와 1 기반 색인 값 으로 지정할 수 있습니다 . 양수 색인 값은 문자열의 시작에 상대적이며 음수 색인 값은 문자열의 끝에 상대적입니다. 기본 시작 값은 1입니다. 하위 문자열의 길이는 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--length&lt;/code&gt; 로 지정할 수 있습니다 . 길이를 지정하지 않으면 부분 문자열은 각 STRING의 끝까지 계속됩니다. 종료 상태 : 하나 이상의 하위 문자열 작업이 수행 된 경우 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="779848ad4cb6502c1351bd5022020a27a2991193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start/end of the substring can be specified with &lt;code&gt;-s&lt;/code&gt;/&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt;/&lt;code&gt;--end&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length or end is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise. &lt;code&gt;--length&lt;/code&gt; is mutually exclusive with &lt;code&gt;--end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2334b2142123bfb3db8760998428b33ddb48c83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string trim&lt;/code&gt; removes leading and trailing whitespace from each STRING. If &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--left&lt;/code&gt; is given, only leading whitespace is removed. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, only trailing whitespace is trimmed. The &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--chars&lt;/code&gt; switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string trim&lt;/code&gt; 은 각 STRING에서 선행 및 후행 공백을 제거합니다. 경우 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--left&lt;/code&gt; 이 주어집니다 만 선두 공백이 제거됩니다. 경우 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--right&lt;/code&gt; 이 주어집니다 만 후행 공백은 잘립니다. &lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--chars&lt;/code&gt; 스위치는 CHARS의 문자 대신 공백의 제거됩니다. 종료 상태 : 하나 이상의 문자가 잘린 경우 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="4af7b90b6c15aa5377e3c5f869a9e47d5e7c1034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string unescape&lt;/code&gt; performs the inverse of the &lt;code&gt;string escape&lt;/code&gt; command. If the string to be unescaped is not properly formatted it is ignored. For example, doing &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; will return the original string. There is no support for unescaping &lt;code&gt;--style=regex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string unescape&lt;/code&gt; 는 &lt;code&gt;string escape&lt;/code&gt; 명령 의 역을 수행합니다 . 이스케이프 처리 할 문자열이 올바르게 형식화되지 않으면 무시됩니다. 예를 들어, &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; 를 수행하면 원래 문자열이 반환됩니다. &lt;code&gt;--style=regex&lt;/code&gt; 이스케이프 해제를 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ec537040dfbcd46a1d8e30c2f47ec1a7a8765e12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string upper&lt;/code&gt; converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already uppercase.</source>
          <target state="translated">&lt;code&gt;string upper&lt;/code&gt; 는 각 문자열 인수를 대문자로 변환합니다. 종료 상태 : 하나 이상의 문자열이 대문자로 변환 된 경우 0, 그렇지 않으면 1. &lt;code&gt;-q&lt;/code&gt; 플래그 와 함께 문자열이 이미 대문자인지 쉽게 테스트 할 수 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="661aff77ace918c530880cc3272bdbd7f29220e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; performs operations on strings.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 은 문자열 에 대한 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="2a88199c092063e7efbe0b5f39b511b67eb20c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion</source>
          <target state="translated">&lt;code&gt;suppress-autosuggestion&lt;/code&gt; , 현재 자동 제안 제거</target>
        </trans-unit>
        <trans-unit id="3b65f5f109409d7aa183d4b719928e15f341ce89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion. Returns true if there was a suggestion to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fb6c3713a11a13683e8334160327a537f8074f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspend&lt;/code&gt; suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT. In order to prevent suspending a shell that doesn't have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the &lt;code&gt;--force&lt;/code&gt; option is given or the shell is not interactive.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; 는 현재 쉘의 SIGTSTP 신호를 전송하여 제어 프로세스로 돌아가서 현재 쉘의 실행을 일시 중단합니다. 나중에 SIGCONT를 보내서 다시 시작할 수 있습니다. 제어 프로세스가없는 쉘을 일시 중단하지 않으려면 로그인 쉘인 경우 쉘을 일시 중단하지 않습니다. &lt;code&gt;--force&lt;/code&gt; 옵션이 제공되거나 쉘이 대화식이 아닌 경우이 요구 사항은 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="626f00d07a2e5e46b2688607ebff9eb8a60c9966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swap-selection-start-stop&lt;/code&gt;, go to the other end of the highlighted text without changing the selection</source>
          <target state="translated">&lt;code&gt;swap-selection-start-stop&lt;/code&gt; , 선택을 변경하지 않고 강조 표시된 텍스트의 다른 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="9156298ff90a429e917bf58c7cc5f06073a40cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; executes one of several blocks of commands, depending on whether a specified value matches one of several values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 는 지정된 값이 여러 값 중 하나와 일치하는지 여부에 따라 여러 명령 블록 중 하나를 실행합니다. &lt;code&gt;case&lt;/code&gt; 는 &lt;code&gt;switch&lt;/code&gt; 블록 과 함께 사용되어 어떤 블록을 실행해야하는지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="51522e2a7f62a39e69b057a1b4e46231f1a7ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 는 지정된 값이 여러 와일드 카드 값 중 하나와 같은지 여부에 따라 여러 명령 블록 중 하나를 수행합니다. &lt;code&gt;case&lt;/code&gt; 는 &lt;code&gt;switch&lt;/code&gt; 블록 과 함께 사용되어 어떤 블록을 실행해야하는지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="434769b221b1b48ce5d15511a2fa7c4591850c79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tau&lt;/code&gt;. Equivalent to 2&amp;pi;, or the number of radians in a circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e86983927861a95c2a328128c72990861f2579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test-feature FEATURE&lt;/code&gt; returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.</source>
          <target state="translated">&lt;code&gt;test-feature FEATURE&lt;/code&gt; FEATURE가 활성화되면 test-feature FEATURE 는 0을, 비활성화되어 있으면 1, 인식되지 않으면 2를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="49dea13a8691319ba78e4d5ed5960d93da35d7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 는 &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) 표준&lt;/a&gt; 의 일부를 구현합니다 . 다음 예외가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2b8c506bfcfd28dcdc9217de6bf1cde91ed842ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 는 &lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) 표준&lt;/a&gt; 의 하위 집합을 구현합니다 . 다음 예외가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="4a920b6047086d1231c7f5d7fa31e31bfaec3736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt; causes fish to measure how long a command takes and print the results afterwards. The command can be a simple fish command or a block. The results can not currently be redirected.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; 은 물고기가 명령에 걸리는 시간 을 측정하고 나중에 결과를 인쇄하도록합니다. 명령은 간단한 물고기 명령 또는 블록 일 수 있습니다. 결과는 현재 리디렉션 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1560f147987dc48333613d49b888555f9bd4b99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-chars&lt;/code&gt;, transpose two characters to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-chars&lt;/code&gt; , 커서 왼쪽에 두 문자를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="92b2de28003baeca135430a69cac3301df211dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-words&lt;/code&gt;, transpose two words to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-words&lt;/code&gt; , 커서 왼쪽에 두 단어를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="373dbc4e9fdbf8eb3bea04bfb57dda742ec7cfea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;../index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; 은 물고기 이벤트 전달 프레임 워크를 둘러싼 래퍼입니다. POSIX 쉘과의 역 호환성을 위해 존재합니다. 다른 용도의 &lt;a href=&quot;../index#event&quot;&gt;경우 이벤트 핸들러&lt;/a&gt; 를 정의하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="f5ca8c4e095ac239e34f8594ebb4ab87d097fe66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; 은 물고기 이벤트 전달 프레임 워크를 둘러싼 래퍼입니다. POSIX 쉘과의 호환성을 위해 존재합니다. 다른 용도로는 &lt;a href=&quot;index#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 를 정의하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="0744337fd5341ea7b8967ff13d484eb039621a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; sets the exit status to 0.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 는 종료 상태를 0으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2d6b937046bc04378a6f19f7580563228ae32462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit -Hs 64&lt;/code&gt; sets the hard stack size limit to 64 kB.</source>
          <target state="translated">&lt;code&gt;ulimit -Hs 64&lt;/code&gt; 는 하드 스택 크기 제한을 64kB로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="09823b46aa54108856d9cfe97a6e2d6654edeb51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; also accepts the following switches that determine what type of limit to set:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 는 설정할 제한 유형을 결정하는 다음 스위치도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="27494793012a34dbc727255f14091cec8673cfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; builtin sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 내장은 쉘 및 그로 인해 생성 된 프로세스의 자원 사용 한계를 설정하거나 출력합니다. 새 한계 값을 생략하면 자원 한계의 현재 값이 인쇄됩니다. 그렇지 않으면 지정된 제한이 새 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="ba994fe9b705196c9308e7d1e704c2484c6530d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914a332a706ed930f92dfa2f893c31d61f8829c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask 177&lt;/code&gt; or &lt;code&gt;umask u=rw&lt;/code&gt; sets the file creation mask to read and write for the owner and no permissions at all for any other users.</source>
          <target state="translated">&lt;code&gt;umask 177&lt;/code&gt; 또는 &lt;code&gt;umask u=rw&lt;/code&gt; 는 파일 작성 마스크를 설정하여 소유자가 읽고 쓸 수 있으며 다른 사용자에게는 전혀 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="ea8bdfdd73550087a9e5f4d0d74f501ad65d8378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt; displays and manipulates the &quot;umask&quot;, or file creation mode mask, which is used to restrict the default access to files.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 는 파일에 대한 기본 액세스를 제한하는 데 사용되는 &quot;umask&quot;또는 파일 작성 모드 마스크를 표시하고 조작합니다.</target>
        </trans-unit>
        <trans-unit id="d5b91d0960d8706ccf917682f946da0ed42fef50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt; function. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; , 현재 파일 생성 마스크. umask 변수를 변경하는 선호되는 방법은 &lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt; 함수를 사용하는 것입니다. umask를 잘못된 값으로 설정하려는 시도는 항상 실패합니다.</target>
        </trans-unit>
        <trans-unit id="7b47f786d139724d5a34193ba1786452223e8ac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;commands#umask&quot;&gt;umask function&lt;/a&gt;. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 현재 파일 작성 마스크 인 umask umask 변수를 변경하는 기본 방법은 &lt;a href=&quot;commands#umask&quot;&gt;umask 함수를 사용하는 것&lt;/a&gt; 입니다. umask를 유효하지 않은 값으로 설정하려는 시도는 항상 실패합니다.</target>
        </trans-unit>
        <trans-unit id="5a44b3a0a2ea21d060782d7de0252f821b01cdde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undo&lt;/code&gt; and &lt;code&gt;redo&lt;/code&gt;, revert or redo the most recent edits on the command line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11ddb9d62a747071c14ddc0257484f36e4d0db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up-line&lt;/code&gt;, move up one line</source>
          <target state="translated">&lt;code&gt;up-line&lt;/code&gt; , 한 줄 위로 이동</target>
        </trans-unit>
        <trans-unit id="67c1b87ec154fe2bec25c34f88af59a7fa3c8771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upcase-word&lt;/code&gt;, make the current word uppercase</source>
          <target state="translated">&lt;code&gt;upcase-word&lt;/code&gt; , 현재 단어를 대문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="57ccf04032406001bdc11a8189ad69fca2fb8bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH array</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; 은 PATH 배열의 세 번째 요소를 편집합니다</target>
        </trans-unit>
        <trans-unit id="65486428e36108a03da6e3498a15ce370423fc29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH list</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; 는 PATH 목록의 세 번째 요소를 편집합니다.</target>
        </trans-unit>
        <trans-unit id="88c39c66df63979d68b40cdf38c535e8336f488a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual array elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; 는 환경 변수의 값을 대화식으로 편집하는 데 사용됩니다. &lt;code&gt;vared&lt;/code&gt; 를 사용하여 배열 변수를 전체적으로 편집 할 수는 없지만 개별 배열 요소는 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2ed2d545022b6b47095d8582bee9cbd898c7fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual list elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; 는 환경 변수의 값을 대화식으로 편집하는 데 사용됩니다. 배열 변수 전체는 &lt;code&gt;vared&lt;/code&gt; 를 사용하여 편집 할 수 없지만 개별 목록 요소는 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9862f5e93904059a6b32007b38450efce85a2073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;, the version of the currently running fish (also available as &lt;code&gt;FISH_VERSION&lt;/code&gt; for backward compatibility).</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; , 현재 실행중인 물고기의 버전입니다 ( 이전 버전과의 호환성을 위해 &lt;code&gt;FISH_VERSION&lt;/code&gt; 으로 도 사용 가능).</target>
        </trans-unit>
        <trans-unit id="63fa20183bc82ef05dd53eaea0bdba2083b42311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; waits for child jobs to complete.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; 하위 작업이 완료 될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="813fdc779468e7aa9ef0139c7dc0dcbe8dce7527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeatedly executes &lt;code&gt;CONDITION&lt;/code&gt;, and if the exit status is 0, then executes &lt;code&gt;COMMANDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; &lt;code&gt;CONDITION&lt;/code&gt; 을 실행 하고 종료 상태가 0이면 &lt;code&gt;COMMANDS&lt;/code&gt; 를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="4b917ba7af9605ab4fb8f9df237fdcbdd49966d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; works like a repeated &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3777774e876be438277e734434a6c0c8157ad52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x-&lt;/code&gt; is not valid since there is no long flag name and therefore the short flag, &lt;code&gt;-x&lt;/code&gt;, has to be usable.</source>
          <target state="translated">&lt;code&gt;x-&lt;/code&gt; 긴 플래그 이름이 없기 때문에 x- 는 유효하지 않으므로 짧은 플래그 &lt;code&gt;-x&lt;/code&gt; 를 사용할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="5fd5ec35b0142154e7c9e8643d553640b56bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean can can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;-x&lt;/code&gt; 만 유효 함을 의미 합니다. 부울은 두 번 이상 사용할 수 있습니다. 이것이 표시되면 &lt;code&gt;_flag_x&lt;/code&gt; 는 플래그가 표시된 횟수의 카운트로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3ee9d686d28ba49895201840c47e53da39de4e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean that can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;-x&lt;/code&gt; 만 유효 함을 의미 합니다. 두 번 이상 사용할 수있는 부울입니다. 만약 &lt;code&gt;_flag_x&lt;/code&gt; 는 플래그가 보이는 횟수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="21ede97712b0a6930815ab06e47ca99f9faf164c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x=&lt;/code&gt;, &lt;code&gt;x=?&lt;/code&gt;, and &lt;code&gt;x=+&lt;/code&gt; are similar to the n/name examples above but there is no long flag alternative to the short flag &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x=&lt;/code&gt; , &lt;code&gt;x=?&lt;/code&gt; , &lt;code&gt;x=+&lt;/code&gt; 는 위의 n / name 예제와 비슷하지만 short 플래그 &lt;code&gt;-x&lt;/code&gt; 에 대한 대체 플래그는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="f0527623453636ac5982213b0815cf8b199abd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank-pop&lt;/code&gt;, rotate to the previous entry of the killring</source>
          <target state="translated">&lt;code&gt;yank-pop&lt;/code&gt; , 킬링의 이전 항목으로 회전</target>
        </trans-unit>
        <trans-unit id="6b2c2003ee77d278bc6a300e349540b9f1fcec50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt;, insert the latest entry of the killring into the buffer</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; , 킬링의 최신 항목을 버퍼에 삽입</target>
        </trans-unit>
        <trans-unit id="d38e08cea2004c22d96c7648bde8064ec9710a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,m}&lt;/code&gt; at least n, no more than m.</source>
          <target state="translated">&lt;code&gt;{n,m}&lt;/code&gt; 이상 , m 이하</target>
        </trans-unit>
        <trans-unit id="6754034e24ab614bfd421eac3a73529e0acbdf6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,}&lt;/code&gt; n or more</source>
          <target state="translated">&lt;code&gt;{n,}&lt;/code&gt; n 이상</target>
        </trans-unit>
        <trans-unit id="a365c3492a087f6ec4c03c8376dcb30c6386fb2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n}&lt;/code&gt; to exactly n (where n is a number)</source>
          <target state="translated">&lt;code&gt;{n}&lt;/code&gt; 에서 정확히 n까지 (여기서 n은 숫자 임)</target>
        </trans-unit>
        <trans-unit id="707c3563364628d29b1994c70cf28e906025d3d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt; is &quot;alternation&quot;, i.e. the &quot;or&quot;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; &quot;대체&quot;, 즉 &quot;또는&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="ceaacb2435257875de28974f5bc3261889295996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.*&lt;/code&gt; matches all hidden files (also known as &quot;dotfiles&quot;) and directories in your home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0f52ee032449bf7212b4c3984d956c6fa44267" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;SOME_VAR=1 command&lt;/code&gt; produces an error: &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;SOME_VAR=1 command&lt;/code&gt; 은 오류를 생성합니다. &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt; .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0da3c08b202353af950bee5219ca327f11f72cd7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;larr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; move the cursor one word left or right, or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;) accepts the first word in the suggestion.</source>
          <target state="translated">&lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;larr;&lt;/b&gt; 와 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;rarr;는&lt;/b&gt; 명령 줄이 비어있는 경우 커서 한 단어 왼쪽이나 오른쪽으로 이동하거나 디렉토리 역사에서 뒤로 앞으로 이동 /. 커서가 줄의 끝에 이미, 그리고 자기 암시가 사용할 수있는 경우 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; (또는 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt; ) 제안의 첫 번째 단어를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41668896a709e48d38407c24cdaae2f37bd2e2d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt; search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; 및 &lt;em&gt;Alt를&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt; 에 대한 명령 기록을 검색 이전 / 다음 검색이 시작되기 전에 커서 아래에있는 토큰을 포함하는 토큰입니다. 검색이 시작될 때 명령 줄이 토큰에 없으면 모든 토큰이 일치합니다. 히스토리 검색에 대한 자세한 정보 는 &lt;a href=&quot;#history&quot;&gt;히스토리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dd002a4a5d9f181df1139416f359b0c0b1982d4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; recalls individual arguments, starting from the last argument in the last line executed. A single press replaces &quot;!$&quot;, later presses replace &quot;!!:4&quot; and the like.</source>
          <target state="translated">&lt;em&gt;Alt를&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; 실행 된 마지막 행의 마지막 인수에서 시작하여, 개별 인수를 회상했다. 한 번의 누르기는 &quot;! $&quot;를 대체하고 나중에 누르는 것은 &quot;!! : 4&quot;등을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="31b5b5642ff4d16559c25c2eec15dc84d9c7c38a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;c&lt;/b&gt; capitalizes the current word.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;c&lt;/b&gt; 는 현재 단어를 대문자로 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8c08d7cecc389da8fd667cb3de1b66142f66dbc0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;d&lt;/b&gt; moves the next word to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;d&lt;/b&gt; 는 다음 단어를 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="ba939795dc763dc37424d264df584c3dc1414201" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt; edit the current command line in an external editor. The editor is chosen from the first available of the &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; variables.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt; 외부 편집기에서 현재 명령 행을 편집합니다. 편집기는 &lt;code&gt;$VISUAL&lt;/code&gt; 또는 &lt;code&gt;$EDITOR&lt;/code&gt; 변수 중 사용 가능한 첫 번째 항목에서 선택됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d19663ab96f42c66ebcd8b4711cc5775c0115de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;h&lt;/b&gt; (or &lt;b&gt;F1&lt;/b&gt;) shows the manual page for the current command, if one exists.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;h&lt;/b&gt; (또는 &lt;b&gt;F1&lt;/b&gt; )은 현재 명령에 대한 매뉴얼 페이지를 표시합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="6fe0d9f367a7b1fb62d59310e866cb7000917983" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;l&lt;/b&gt; lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;l&lt;/b&gt; 은 커서가 디렉토리 인수 위에 있지 않으면 현재 디렉토리의 내용을 나열합니다.이 경우 해당 디렉토리의 내용이 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="ac4ab1e3b2a18333f6469ab62c6774ab20358dd6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;p&lt;/b&gt; adds the string '&lt;code&gt;| less;&lt;/code&gt;' to the end of the job under the cursor. The result is that the output of the command will be paged.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;p&lt;/b&gt; 는 ' &lt;code&gt;| less;&lt;/code&gt; 커서 아래에서 작업이 끝날 때까지 결과적으로 명령 출력이 페이징됩니다.</target>
        </trans-unit>
        <trans-unit id="136abcdd3926f6f6917e785f3c9b3de852a583e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two words</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt; 는 마지막 두 단어를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="6b4f3c9f30c412c35376eb5c0b053bbecc930222" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;u&lt;/b&gt; makes the current word uppercase.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;u&lt;/b&gt; 는 현재 단어를 대문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="f055c4fc1257b63bfc385501bfbaf929ca352490" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;v&lt;/b&gt; Same as &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;v &lt;/b&gt;&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="5781eac00f106e823a16702f30c3a1c598e21b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; prints a short description of the command under the cursor.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt; 는 커서 아래에 명령에 대한 간단한 설명을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="17e2f8a79bdc960577f4eeaedc12d0c21a945731" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; cancels the entire line.</source>
          <target state="translated">&lt;em&gt;컨트롤&lt;/em&gt; - &lt;b&gt;C는&lt;/b&gt; 전체 라인을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="9333a2ffd2f21f466d57fc6d1e5b4d1a978b95a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; delete one character to the right of the cursor. If the command line is empty, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; will exit fish.</source>
          <target state="translated">&lt;em&gt;컨트롤&lt;/em&gt; - &lt;b&gt;D는&lt;/b&gt; 커서의 오른쪽으로 한 문자를 삭제합니다. 명령 행이 비어 있으면 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; 는 물고기를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="bb14070b99b4a045f1889b39bfeae27b8794ec9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; moves contents from the cursor to the end of line to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt; 는 내용을 커서에서 줄 끝으로 &lt;a href=&quot;#killring&quot;&gt;킬링으로 이동&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="04ddb78416f34126599d6fdf7033f85b757d8ea0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;L&lt;/b&gt; clears and repaints the screen.</source>
          <target state="translated">&lt;em&gt;제어&lt;/em&gt; - &lt;b&gt;L의&lt;/b&gt; 투명 도료 페인트 다시 화면을.</target>
        </trans-unit>
        <trans-unit id="eec641fe659922171462b212fb4e12bfac800762" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;U&lt;/b&gt; moves contents from the beginning of line to the cursor to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;U&lt;/b&gt; 는 내용을 줄의 시작 부분에서 커서로 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="959eb883117dacfd136a241f1bf9b0d08b63da44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;W&lt;/b&gt; moves the previous path component (everything up to the previous &quot;/&quot;) to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;W&lt;/b&gt; 는 이전 경로 구성 요소 (이전의 모든 &quot;/&quot;까지)를 &lt;a href=&quot;#killring&quot;&gt;킬링으로 이동&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="4437b353083b50d06c142c5629d09aa0198b91c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; copies the current buffer to the system's clipboard, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; inserts the clipboard contents.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; 는 현재 버퍼를 시스템의 클립 보드에 복사하고 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt; 는 클립 보드 내용을 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="5aed52702667fe63b8fc8764b7596443d6fa67f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two characters</source>
          <target state="translated">&lt;em&gt;제어&lt;/em&gt; - &lt;b&gt;t는&lt;/b&gt; 마지막 두 글자 이항</target>
        </trans-unit>
        <trans-unit id="2a3529141c90e88bccb3cffb04eaf5e452963437" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;A&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the end of the line.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;A&lt;/b&gt; 는 줄 끝에서 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="848bb77d0284135b4b11d0def92f1a7b33558c29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; deletes text after the current cursor position and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; 는 현재 커서 위치 다음에있는 텍스트를 삭제하고 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="0aa350769e38ad587d4204af5750f62efcffd698" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;black&lt;/em&gt;, &lt;em&gt;red&lt;/em&gt;, &lt;em&gt;green&lt;/em&gt;, &lt;em&gt;yellow&lt;/em&gt;, &lt;em&gt;blue&lt;/em&gt;, &lt;em&gt;magenta&lt;/em&gt;, &lt;em&gt;cyan&lt;/em&gt;, &lt;em&gt;white&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;까맣고&lt;/em&gt; , &lt;em&gt;빨강&lt;/em&gt; , &lt;em&gt;녹색&lt;/em&gt; , &lt;em&gt;노랗고&lt;/em&gt; , &lt;em&gt;파랗고&lt;/em&gt; , &lt;em&gt;자홍색&lt;/em&gt; , &lt;em&gt;청록색&lt;/em&gt; , &lt;em&gt;백색&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f06a4164895f4acf75e4fc05849a9f1080eb613" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;brblack&lt;/em&gt;, &lt;em&gt;brred&lt;/em&gt;, &lt;em&gt;brgreen&lt;/em&gt;, &lt;em&gt;bryellow&lt;/em&gt;, &lt;em&gt;brblue&lt;/em&gt;, &lt;em&gt;brmagenta&lt;/em&gt;, &lt;em&gt;brcyan&lt;/em&gt;, &lt;em&gt;brwhite&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;brblack&lt;/em&gt; , &lt;em&gt;brred&lt;/em&gt; , &lt;em&gt;brgreen&lt;/em&gt; , &lt;em&gt;bryellow&lt;/em&gt; , &lt;em&gt;brblue&lt;/em&gt; , &lt;em&gt;brmagenta&lt;/em&gt; , &lt;em&gt;brcyan&lt;/em&gt; , &lt;em&gt;brwhite&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e34719714f70ac8df5dca2fb1e4e47f8250675d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;is&lt;/em&gt; newline (&lt;code&gt;n&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a866bff90464a4a66a94586a7ec2c25faa202e9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;is&lt;/em&gt; tab,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2c76dd8c90b325c080eb4473c2d0c686420569" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Argument&lt;/strong&gt;: A parameter given to a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a113d0ba1dd61b1680e975a9d0eeac43f4de2cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Builtin&lt;/strong&gt;: A command that is implemented by the shell. Builtins are so closely tied to the operation of the shell that it is impossible to implement them as external commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ac51490e0f1b9926221a2d40ba9111daed635b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Command&lt;/strong&gt;: A program that the shell can run, or more specifically an external program that the shell runs in another process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883f71de63b1afbf7927d4eb85ae362d31832e7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: New &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaf073a1b8f279587c77fcd145e5e12a28d0f7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: new &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="translated">&lt;strong&gt;간편한 스크립팅&lt;/strong&gt; : 새 &lt;a href=&quot;#functions&quot;&gt;기능&lt;/a&gt; 을 즉시 추가 할 수 있습니다. 구문은 배우고 사용하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="99577a424c592bdc94d7b46a5517ada89ca7d5b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;Syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df60123802c7d8d13f9b6713ff515d5434a37f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="translated">&lt;strong&gt;광범위한 UI&lt;/strong&gt; : 탐색 및 필터링 할 수있는 &lt;a href=&quot;#syntax-highlighting&quot;&gt;구문 강조 표시&lt;/a&gt; , &lt;a href=&quot;#autosuggestions&quot;&gt;자동 제안&lt;/a&gt; , &lt;a href=&quot;#tab-completion&quot;&gt;탭 완성&lt;/a&gt; 및 선택 목록.</target>
        </trans-unit>
        <trans-unit id="0a439bd1261a1ef67f3816a2ff0acb25eab61784" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Function&lt;/strong&gt;: A block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple simple commands into one more advanced command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cafc45a94f4662a9df10981e932963cc6ad8531" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Job&lt;/strong&gt;: A running pipeline or command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4735f2bc1b1f6cc44fc36a9270fa8d0bebad687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No configuration needed&lt;/strong&gt;: fish is designed to be ready to use immediately, without requiring extensive configuration.</source>
          <target state="translated">&lt;strong&gt;구성이 필요하지 않습니다&lt;/strong&gt; . 물고기는 광범위한 구성없이 즉시 사용할 수 있도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="25f7db0c5b5b21f6ffe9301ae126e17d9aef2f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pipeline&lt;/strong&gt;: A set of commands strung together so that the output of one command is the input of the next command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ece3509a17de7f5358483bc8c57d591c77a8d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Redirection&lt;/strong&gt;: An operation that changes one of the input or output streams associated with a job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e72de08626d94c9beab15c6c8ae1dae05b4cef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Switch&lt;/strong&gt; or &lt;strong&gt;Option&lt;/strong&gt;: A special kind of argument that alters the behavior of a command. A switch almost always begins with one or two hyphens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1761f0b1ba5b43d7b93024d944cddd83977bbd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argument&lt;/strong&gt; a parameter given to a command</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;명령에 주어진 매개 변수 &lt;strong&gt;인수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9abc342512c31331a993f0014b546a67fa5db37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;builtin&lt;/strong&gt; a command that is implemented in the shell. Builtins are commands that are so closely tied to the shell that it is impossible to implement them as external commands.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;쉘에서 구현되는 명령이 &lt;strong&gt;내장&lt;/strong&gt; 되어 있습니다. 내장 명령은 쉘에 너무 밀접하게 연결되어있어 외부 명령으로 구현할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f166fa76e55d41c05140d9c66e33482752388e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;command&lt;/strong&gt; a program that the shell can run. In another sense also specifically an external command (i.e. neither a function or builtin).</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;쉘이 실행할 수있는 프로그램을 &lt;strong&gt;명령&lt;/strong&gt; 합니다. 또 다른 의미에서 특히 외부 명령 (즉, 함수도 내장 명령도 아님)입니다.</target>
        </trans-unit>
        <trans-unit id="b757809536a26ee5fe7cf05aa97874be3e9ec7f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function&lt;/strong&gt; a block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple smaller commands into one more advanced command.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;단일 명령 인 것처럼 호출 할 수있는 명령 블록을 &lt;strong&gt;기능&lt;/strong&gt; 합니다. 함수를 사용하면 여러 개의 작은 명령을 하나의 고급 명령으로 묶을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60a92d1d7691db21d94fa52b5efe10f9c00a98a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;job&lt;/strong&gt; a running pipeline or command</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;실행중인 파이프 라인 또는 명령 &lt;strong&gt;작업&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33e34e3f380b965910f59129f13ec1cc926b1a27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pipeline&lt;/strong&gt; a set of commands stringed together so that the output of one command is the input of the next command</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;한 명령의 출력이 다음 명령의 입력이되도록 함께 연결된 명령 집합을 &lt;strong&gt;파이프 라인&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44d28d2c07c14f9f63ac8b103318575395a8d8f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;redirection&lt;/strong&gt; an operation that changes one of the input/output streams associated with a job</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;작업과 관련된 입력 / 출력 스트림 중 하나를 변경하는 작업 &lt;strong&gt;리디렉션&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e94007d359708c28c1c1effb3bd68983f4f0862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;switch&lt;/strong&gt; a special flag sent as an argument to a command that will alter the behavior of the command. A switch almost always begins with one or two hyphens.</source>
          <target state="translated">&lt;strong&gt;전환&lt;/strong&gt; 명령의 동작을 변경하는 명령에 대한 인수로 보낸 특별한 플래그를. 스위치는 거의 항상 하나 또는 두 개의 하이픈으로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="58ef9d5fc414a372d364bba5d463086a74cd1e79" translate="yes" xml:space="preserve">
          <source>=&amp;gt; /private/</source>
          <target state="translated">=&amp;gt; / private /</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="a6662c1906a30b4e8bf82f57ab26a17bb6d95ee1" translate="yes" xml:space="preserve">
          <source>A &quot;pager&quot; here is a program that takes output and &quot;paginates&quot; it. &lt;code&gt;less&lt;/code&gt; doesn't just do pages, it allows arbitrary scrolling (even back!).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba3fd4e3fd6608dd7f90bc1b5ab21add9a24490" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command else &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag. If there is no long flag name these characters should be omitted. You can also specify a '#' to indicate the short and long flag names can be used and the value can be specified as an implicit int; i.e., a flag of the form &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;/&lt;/code&gt; 다른 사람이 명령을 호출하여 짧은 플래그를 사용할 수있는 경우 &lt;code&gt;-&lt;/code&gt; 유효한 짧은 플래그로 노출되어서는 안됩니다. 긴 플래그 이름이 없으면이 문자를 생략해야합니다. 짧고 긴 플래그 이름을 사용할 수 있고 값을 암시 적 int로 지정할 수 있음을 나타 내기 위해 '#'을 지정할 수도 있습니다. 즉, &lt;code&gt;-NNN&lt;/code&gt; 형식의 플래그입니다 .</target>
        </trans-unit>
        <trans-unit id="7198b525f0714279660d3b850cc70c2393d6d32c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fish&lt;/code&gt; function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;code&gt;function&lt;/code&gt; builtin:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 기능은 선택적 인수를 취할 수있다 명령의 목록입니다. 다른 쉘과 달리 인수는 &lt;code&gt;$1&lt;/code&gt; 과 같은 &quot;숫자 변수&quot;로 전달되지 않고 단일 목록 &lt;code&gt;$argv&lt;/code&gt; 됩니다. 함수를 만들려면 사용 &lt;code&gt;function&lt;/code&gt; 내장을 :</target>
        </trans-unit>
        <trans-unit id="3acb795caddb65d05651f6b5aacfc87a8acfa50a" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If &lt;code&gt;PID&lt;/code&gt; is specified, the jobs containing the specified process IDs are put in the background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bcfbaa8447e6df7d2da91db70a782c0bf63572" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If PID is specified, the jobs with the specified process group IDs are put in the background.</source>
          <target state="translated">백그라운드 작업은 물고기와 동시에 실행되며 키보드에 액세스 할 수 없습니다. 작업을 지정하지 않으면 마지막으로 사용 된 작업이 백그라운드에 배치됩니다. PID가 지정되면 지정된 프로세스 그룹 ID가있는 작업이 백그라운드에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="b46aed84b0ed848ddd07f44ad7751712530b525e" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) is restricted to the rules for valid variable names.</source>
          <target state="translated">바인드 모드 이름 (예 : &lt;code&gt;bind -m abc ...&lt;/code&gt; )은 유효한 변수 이름의 규칙으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="c4f32c51c430035cac728bdf7bc9ad4c0f17d608" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) must be a valid variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b580f7fbca87c3708e0299e0e01e7d18f311f8d" translate="yes" xml:space="preserve">
          <source>A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like &lt;code&gt;and&lt;/code&gt;.</source>
          <target state="translated">블록을 사용하면 새 변수 범위를 도입하거나 명령 집합의 입력 또는 출력을 그룹으로 리디렉션하거나 &lt;code&gt;and&lt;/code&gt; 와 같은 조건부 명령을 사용할 때 우선 순위를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="221743bb3156c75a9da83c1a7dacbf3cffddec98" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter.</source>
          <target state="translated">중괄호로 묶인 쉼표로 구분 된 문자 목록이 확장되어 목록의 각 요소가 새 매개 변수가됩니다.</target>
        </trans-unit>
        <trans-unit id="b1251b9c7f3a0ecfe4cfcd8762e368b829d54d22" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="translated">중괄호로 묶인 쉼표로 구분 된 문자 목록이 확장되어 목록의 각 요소가 새 매개 변수가됩니다. 이것은 타이핑을 절약하고 주변 텍스트에서 변수 이름을 분리하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="18819280931565e1e540c3948c1068287f296514" translate="yes" xml:space="preserve">
          <source>A command is executed by writing the name of the command followed by any arguments.</source>
          <target state="translated">명령 이름 뒤에 인수가 있으면 명령이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ef0596789e19cf7d157b82b21b7a04276de1271d" translate="yes" xml:space="preserve">
          <source>A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:</source>
          <target state="translated">명령이 존재하지 않거나 실행할 수없는 파일을 참조하여 명령이 유효하지 않을 수 있습니다. 명령이 유효 해지면 다른 색으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="7889a1f8efa9424d9ad0d196f8208854866a152e" translate="yes" xml:space="preserve">
          <source>A common comparison is with $status:</source>
          <target state="translated">일반적인 비교는 $ status입니다.</target>
        </trans-unit>
        <trans-unit id="0ab1d9ac994221a7fc24fe83fee3534ae7e7edc9" translate="yes" xml:space="preserve">
          <source>A common idiom is to capture the output of a command in a variable:</source>
          <target state="translated">일반적인 관용구는 변수의 명령 출력을 캡처하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e5fc3140c2546b6e6a23e2f80c44a655ee78ea6c" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own completions, usually &lt;code&gt;~/.config/fish/completions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable);</source>
          <target state="translated">최종 사용자가 일반적으로 &lt;code&gt;~/.config/fish/completions&lt;/code&gt; ( &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 환경 변수로 제어)를 완료 하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="65baeff5e625e88bc63f2d15091644216f3ec2bb" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own functions, usually &lt;code&gt;~/.config/fish/functions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable).</source>
          <target state="translated">최종 사용자가 일반적으로 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; ( &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 환경 변수로 제어) 기능을 유지하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="859d016958d7758044bcb3a91d192638e99bef83" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install completions for all users on the system, usually &lt;code&gt;/etc/fish/completions&lt;/code&gt;;</source>
          <target state="translated">시스템 관리자가 시스템의 모든 사용자에 대해 완료를 설치하기위한 디렉토리 (일반적으로 &lt;code&gt;/etc/fish/completions&lt;/code&gt; ) ;</target>
        </trans-unit>
        <trans-unit id="108785695c3e86a9a6e52e8824798deb67cc4081" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt;).</source>
          <target state="translated">시스템 관리자가 시스템의 모든 사용자를위한 기능을 설치할 수있는 디렉토리, 일반적으로 &lt;code&gt;/etc/fish/functions&lt;/code&gt; (정말 &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="641e45d215c27568a98d7ad513ca06236cc4ce30" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt;.</source>
          <target state="translated">시스템 관리자가 시스템의 모든 사용자를 위해 일반적으로 &lt;code&gt;/etc/fish/functions&lt;/code&gt; 기능 을 설치하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="9f5e2984dcf6e5df1ad339573ada9e5723fb0b37" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own completions for their software, usually &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">타사 소프트웨어 공급 업체가 소프트웨어에 대한 완성품을 배송 할 수있는 디렉토리 (일반적으로 &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="5e8075c8426f4f6e374491e133779cfa809fd782" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own functions for their software, usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">타사 소프트웨어 공급 업체가 자체 소프트웨어 기능 (일반적으로 &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; )을 제공하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="a44f52824482af64d09602d2bfcb5e4719f63ad2" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For an introduction to the concept of shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">달러 기호 다음에 문자열이 같은 이름을 가진 쉘 변수의 값으로 확장됩니다. 쉘 변수 개념에 대한 소개는 &lt;a href=&quot;#variables&quot;&gt;쉘 변수&lt;/a&gt; 섹션을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="ca6eed9ce238df03667fd3003cea2a936f38aa05" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For more on shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">문자열 뒤에 오는 달러 기호는 동일한 이름의 쉘 변수 값으로 확장됩니다. 셸 변수에 대한 자세한 내용은 &lt;a href=&quot;#variables&quot;&gt;셸 변수&lt;/a&gt; 섹션을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="a99436ba2e5d329112af2b584fd421fbf3f42c7d" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">더 빠른 방법은 자동으로 &lt;code&gt;$PATH&lt;/code&gt; 앞에 추가되는 &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut-universal&quot;&gt;범용 변수&lt;/a&gt; 를 수정하는 것 입니다. 예를 들어, &lt;code&gt;/usr/local/bin&lt;/code&gt; 을 &lt;code&gt;$PATH&lt;/code&gt; 에 영구적으로 추가 하려면 다음 과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2d19574b46bfc9315dc6a4268de0f13c74f87d0" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut_universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">더 빠른 방법은 &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut_universal&quot;&gt;범용 변수&lt;/a&gt; 를 수정하는 것입니다.이 변수 는 &lt;code&gt;$PATH&lt;/code&gt; 앞에 자동으로 추가됩니다 . 예를 들어 &lt;code&gt;$PATH&lt;/code&gt; 에 &lt;code&gt;/usr/local/bin&lt;/code&gt; 을 영구적으로 추가 하려면 다음 과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b85f90d83e9a1056a1b7da7455ba1c119e13b404" translate="yes" xml:space="preserve">
          <source>A faster way is to use the &lt;a href=&quot;cmds/fish_add_path#cmd-fish-add-path&quot;&gt;fish_add_path&lt;/a&gt; function, which adds given directories to the path if they aren't already included. It does this by modifying the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceec61da03fba72e62b6265e8da899ee3527c4d0" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file.</source>
          <target state="translated">파일 이름 출력은 지정된 파일에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="bac36bb2563051c8106b324a3b458e2a8ae8b7bc" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file. Often &lt;code&gt;&amp;gt;/dev/null&lt;/code&gt; to silence output by writing it to the special &quot;sinkhole&quot; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a90ec79fdc93eb88a032045db8f08f69739be0" translate="yes" xml:space="preserve">
          <source>A fish function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d33de98068774700d9110cea5dcb53a094ba7e7" translate="yes" xml:space="preserve">
          <source>A function is a list of commands that will be executed when the name of the function is given as a command.</source>
          <target state="translated">함수는 함수 이름이 명령으로 제공 될 때 실행될 명령 목록입니다.</target>
        </trans-unit>
        <trans-unit id="7601c1858c241e3bd16046e3e56c915853d6505a" translate="yes" xml:space="preserve">
          <source>A function name cannot be empty. It may not begin with a hyphen (&quot;-&quot;) and may not contain a slash (&quot;/&quot;). All other characters, including a space, are valid.</source>
          <target state="translated">함수 이름은 비워 둘 수 없습니다. 하이픈 ( &quot;-&quot;)으로 시작하지 않고 슬래시 ( &quot;/&quot;)를 포함 할 수 없습니다. 공백을 포함한 다른 모든 문자는 유효합니다.</target>
        </trans-unit>
        <trans-unit id="f2876072ebbf01c7648d2358047842fa63f47f6c" translate="yes" xml:space="preserve">
          <source>A global variable of the same name already exists.</source>
          <target state="translated">같은 이름의 전역 변수가 이미 존재합니다.</target>
        </trans-unit>
        <trans-unit id="8b50d81adfb557d2a38d6b95df25f2d574c4f80c" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither -H nor -S is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">하드 한계는 줄일 수 있습니다. 일단 설정되면 증가시킬 수 없습니다. 소프트 한계는 하드 한계의 값까지 증가 될 수있다. -H 또는 -S를 지정하지 않으면 새 한계 값을 지정할 때 소프트 한계와 하드 한계가 모두 업데이트되고 현재 값을보고 할 때 소프트 한계가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b23a7c576473abf4f67fa752f0d58982d9b4994d" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither &lt;code&gt;-H&lt;/code&gt; nor &lt;code&gt;-S&lt;/code&gt; is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">하드 제한은 줄일 수만 있습니다. 일단 설정되면 증가 할 수 없습니다. 소프트 한계는 하드 한계 값까지 증가 할 수 있습니다. &lt;code&gt;-H&lt;/code&gt; 또는 &lt;code&gt;-S&lt;/code&gt; 를 지정 하지 않으면 새 제한 값을 할당 할 때 소프트 제한과 하드 제한이 모두 업데이트되고 현재 값을보고 할 때 소프트 제한이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ec2f57dda8cd2b7d726afdc269175dec20de44df" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color.&lt;/code&gt; See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">접두사 &lt;code&gt;fish_color&lt;/code&gt; 및 &lt;code&gt;fish_pager_color.&lt;/code&gt; 시작하는 많은 변수 자세한 내용은 &lt;a href=&quot;#variables-color&quot;&gt;강조 색상 변경을위한 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b6b5c0631c6ec4d7569772ecd93c5f2a9ad8e07" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">접두사 &lt;code&gt;fish_color&lt;/code&gt; 및 &lt;code&gt;fish_pager_color&lt;/code&gt; 로 시작하는 많은 변수 . 자세한 내용은 &lt;a href=&quot;#variables-color&quot;&gt;강조 색상 변경을위한 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e5cf560f2e4f99636de6a450bd940ddafbd9847" translate="yes" xml:space="preserve">
          <source>A literal &quot;{}&quot; will not be used as a brace expansion:</source>
          <target state="translated">리터럴 &quot;{}&quot;은 중괄호 확장으로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3b73470b832856451e08f355e80a561c89bef4ab" translate="yes" xml:space="preserve">
          <source>A long flag name which is optional. If not present then only the short flag letter can be used.</source>
          <target state="translated">선택적인 긴 플래그 이름입니다. 존재하지 않으면 짧은 플래그 문자 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17f47cd5794289ad514522518e0de593fc52cf83" translate="yes" xml:space="preserve">
          <source>A missing starting index in a range defaults to 1. This is allowed if the range is the first index expression of the sequence. Similarly, a missing ending index, defaulting to -1 is allowed for the last index range in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df45d8597da7e771240bccd744a5834f0680a0b5" translate="yes" xml:space="preserve">
          <source>A more robust approach to argument handling is &lt;a href=&quot;cmds/argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt;, which checks the defined options and puts them into various variables, leaving only the positional arguments in $argv. Here's a simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98778ce415c46f223a5f19597a261565905b28a5" translate="yes" xml:space="preserve">
          <source>A nice thing about lists is that they are passed to commands one element as one argument, so once you've set your list, you can just pass it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35ae38b3dc7e3d0d8e3c2e5485ce36d974931c5" translate="yes" xml:space="preserve">
          <source>A number between the &lt;code&gt;%&lt;/code&gt; and the format letter specifies the width. The result will be left-padded with spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fb125f22d63e95feaa1b16b3d8c7381230797c" translate="yes" xml:space="preserve">
          <source>A number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c289b8e2f3ba875ebca3ca04379eb21ac58c6d06" translate="yes" xml:space="preserve">
          <source>A number of variables control the symbol (&quot;display&quot;) and color (&quot;color&quot;) for the different status indicators:</source>
          <target state="translated">여러 변수가 다양한 상태 표시기에 대한 기호 ( &quot;디스플레이&quot;) 및 색상 ( &quot;색상&quot;)을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="d7eb886434c2d98d1f604c3752317380a9843e6c" translate="yes" xml:space="preserve">
          <source>A number of variables set characters and color used as indicators. Many of these have a different default if used with informative status enabled, or &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; set. The usual default is given first, then the informative default (if it is different). If no default for the colors is given, they default to &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt;.</source>
          <target state="translated">여러 변수가 표시기로 사용되는 문자와 색상을 설정합니다. 이들 중 대부분은 정보 상태를 활성화하거나 &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; 세트 와 함께 사용하는 경우 다른 기본값을 갖습니다 . 일반적인 기본값이 먼저 제공된 다음 정보 용 기본값 (다른 경우)이 제공됩니다. 색상에 대한 기본값이 제공되지 않으면 기본값은 &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b7b8ab4ed67c762ac2d0fa14336c7a66f5b2e303" translate="yes" xml:space="preserve">
          <source>A range of indices can be specified, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;#expand-index-range&quot;&gt;인덱스 범위를&lt;/a&gt; 지정할 수 있습니다 . 자세한 내용 은 인덱스 범위 확장 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b9b9c424a1693d0e726bcbd3ebbcf95acc9865f6" translate="yes" xml:space="preserve">
          <source>A rich set of tab completions work &quot;out of the box&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f78ea4e9ef795d6303b8e958efabed0828ac69c" translate="yes" xml:space="preserve">
          <source>A script written in &lt;code&gt;bash&lt;/code&gt; would need a first line like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e298a31256356ac86c6d29914100defedf5fffe" translate="yes" xml:space="preserve">
          <source>A scripts written in &lt;code&gt;bash&lt;/code&gt; it would need a first line like this:</source>
          <target state="translated">&lt;code&gt;bash&lt;/code&gt; 로 작성된 스크립트는 다음 과 같은 첫 번째 줄이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="8c3a0a6b90c1f5bc360ed70d0dd93ffe55365da5" translate="yes" xml:space="preserve">
          <source>A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212 brblue&lt;/code&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">두 번째 색상은 원하는 대체 색상으로 제공 될 수 있습니다. 예를 들어 &lt;code&gt;set_color 124212 brblue&lt;/code&gt; 는 터미널이 원하는 정확한 회색 음영 을 사용할 수 &lt;em&gt;없는&lt;/em&gt; 경우 set_color에 brblue를 사용하도록 지시 합니다. 이것은 8 또는 16 색상 터미널이 색상을 사용하지 않을 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="15a74286acaf35ddfed9ca54f393e47cdb77fcfa" translate="yes" xml:space="preserve">
          <source>A shell is a program that helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcf13b497d0506afff3d618c0c36dfe5e1a068c" translate="yes" xml:space="preserve">
          <source>A shell is a program which helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="translated">쉘은 다른 프로그램을 시작하여 컴퓨터를 작동하는 데 도움이되는 프로그램입니다. fish는 유용성과 대화 형 사용에 초점을 맞춘 명령 줄 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fa2eb63a7d926840491eb53403e1e6e33347d750" translate="yes" xml:space="preserve">
          <source>A short flag letter (which is mandatory). It must be an alphanumeric or &quot;#&quot;. The &quot;#&quot; character is special and means that a flag of the form &lt;code&gt;-123&lt;/code&gt; is valid. The short flag &quot;#&quot; must be followed by &quot;-&quot; (since the short name isn't otherwise valid since &lt;code&gt;_flag_#&lt;/code&gt; is not a valid var name) and must be followed by a long flag name with no modifiers.</source>
          <target state="translated">짧은 플래그 문자 (필수). 영숫자 또는 &quot;#&quot;이어야합니다. &quot;#&quot;문자는 특별하며 &lt;code&gt;-123&lt;/code&gt; 형식의 플래그 가 유효 함을 의미 합니다. 짧은 플래그 &quot;#&quot;다음에 &quot;-&quot;가 와야합니다 ( &lt;code&gt;_flag_#&lt;/code&gt; 가 유효한 var 이름이 아니기 때문에 짧은 이름이 유효하지 않기 때문에 ). 뒤에 수정자가없는 긴 플래그 이름이 와야합니다.</target>
        </trans-unit>
        <trans-unit id="8e839688e01ba01e9dfe145feb09335f1aa963d0" translate="yes" xml:space="preserve">
          <source>A simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb9db4c52835afcbee666aae50d387e24cb3af2" translate="yes" xml:space="preserve">
          <source>A simple greeting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03cb577b66142cb2e46d23d5c55c8cdf70b3657" translate="yes" xml:space="preserve">
          <source>A simple handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e585b4919dc0904a5ac8ff639290a7da0168ce72" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays all known VCS info:</source>
          <target state="translated">알려진 모든 VCS 정보를 표시하는 간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="c44605d7cf5f66a5d454bc7f8b72acac0713b1cf" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays git info:</source>
          <target state="translated">git 정보를 표시하는 간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="981d3d4dab4f4f8c0ceaf4c8bcfaaee7cef2a27b" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays hg info:</source>
          <target state="translated">hg 정보를 표시하는 간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="87603fcaef9b30ff09e50b24e5fda2ce2fcd654c" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays svn info:</source>
          <target state="translated">svn 정보를 표시하는 간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="610fac60f39f41e55d40e59429099ac45fcaf3c8" translate="yes" xml:space="preserve">
          <source>A simple prompt that is a simplified version of the default debugging prompt:</source>
          <target state="translated">기본 디버깅 프롬프트의 단순화 된 버전 인 간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="631761c6042b0b4defe6087674d679a446f769a6" translate="yes" xml:space="preserve">
          <source>A simple prompt:</source>
          <target state="translated">간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="a457232f4c851ca48444c8b22ce5d86f9157d153" translate="yes" xml:space="preserve">
          <source>A simple right prompt:</source>
          <target state="translated">간단한 올바른 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="1185aac09aa8fc678b91d059d32d2cfc59419da0" translate="yes" xml:space="preserve">
          <source>A simple title:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87c54de638d95b5e6d226cc4b4479d88e8ad79d" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens '&lt;code&gt;-&lt;/code&gt;' and alter the way a command operates. For example, the '&lt;code&gt;ls&lt;/code&gt;' command usually lists all the files and directories in the current working directory, but by using the '&lt;code&gt;-l&lt;/code&gt;' switch, the behavior of '&lt;code&gt;ls&lt;/code&gt;' is changed to not only display the filename, but also the size, permissions, owner and modification time of each file.</source>
          <target state="translated">스위치는 매우 일반적인 특수 유형의 인수입니다. 스위치는 거의 항상 하나 이상의 하이픈 ' &lt;code&gt;-&lt;/code&gt; '으로 시작하고 명령 작동 방식을 변경합니다. 예를 들어, ' &lt;code&gt;ls&lt;/code&gt; '명령은 일반적으로 현재 작업 디렉토리의 모든 파일과 디렉토리를 나열하지만 ' &lt;code&gt;-l&lt;/code&gt; '스위치 를 사용하면 ' &lt;code&gt;ls&lt;/code&gt; ' 의 동작이 파일 이름뿐만 아니라 크기도 표시하도록 변경됩니다. , 권한, 소유자 및 각 파일의 수정 시간.</target>
        </trans-unit>
        <trans-unit id="5bdeb5e86a31772c1e5672fd704d86afc086f067" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens &lt;code&gt;-&lt;/code&gt; and alter the way a command operates. For example, the &lt;code&gt;ls&lt;/code&gt; command usually lists the names of all files and directories in the current working directory. By using the &lt;code&gt;-l&lt;/code&gt; switch, the behavior of &lt;code&gt;ls&lt;/code&gt; is changed to not only display the filename, but also the size, permissions, owner, and modification time of each file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb06de1c7a12f5632480c8ec95581dfbbdcf321" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of &lt;code&gt;fish&lt;/code&gt;, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="translated">범용 변수는 재부팅 후에도 현재와 미래 의 모든 &lt;code&gt;fish&lt;/code&gt; 인스턴스에서 값을 공유하는 변수입니다 . &lt;code&gt;set -U&lt;/code&gt; 로 변수를 범용으로 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a3b9e4c443fb1972ce4de5e58116d2a5d4a465de" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of fish, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8d375ccbff689a61358d91a3d87c3b4c7bb526" translate="yes" xml:space="preserve">
          <source>A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">변수 이름은 비워 둘 수 없습니다. 문자, 숫자 및 밑줄 만 포함 할 수 있습니다. 해당 문자로 시작하고 끝날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a90aba13b6feb8ff1a5141d94cb1fc2fe96e9477" translate="yes" xml:space="preserve">
          <source>Abbreviations</source>
          <target state="translated">Abbreviations</target>
        </trans-unit>
        <trans-unit id="a39ab99e2ea47c8c0e9d74827d866ecbba2cbde0" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod(1)&lt;/code&gt; program.</source>
          <target state="translated">액세스 권한은 &lt;code&gt;chmod(1)&lt;/code&gt; 프로그램 의 매뉴얼 페이지에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e139d85bd15795b0d3efa188c22e165c587928c5" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod&lt;/code&gt;(1) program.</source>
          <target state="translated">액세스 권한은 &lt;code&gt;chmod&lt;/code&gt; (1) 프로그램 의 매뉴얼 페이지에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf27f6010a1e75f4bb8d29911772c8214904203b" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;gco&lt;/code&gt; will be replaced with &lt;code&gt;git checkout&lt;/code&gt; global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; 가 현재 쉘에 대해 전역으로 &lt;code&gt;git checkout&lt;/code&gt; 으로 대체 되는 새로운 약어를 추가하십시오 . config.fish에서 명령을 실행할 때와 같이 해당 쉘에서 동일한 명령을 실행하지 않으면이 약어는 다른 쉘에 자동으로 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6e3c8915a2556d62c5b7d149b19924656f4d28db" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;l&lt;/code&gt; will be replaced with &lt;code&gt;less&lt;/code&gt; universal so all shells. Note that you omit the &lt;code&gt;-U&lt;/code&gt; since it is the default.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; 이 &lt;code&gt;less&lt;/code&gt; 보편적이므로 모든 셸로 대체 되는 새로운 약어를 추가하십시오 . &lt;code&gt;-U&lt;/code&gt; 가 기본값이므로 생략합니다 .</target>
        </trans-unit>
        <trans-unit id="fb5d43a3f1c9755eef7928213dbee5eeaa42d36e" translate="yes" xml:space="preserve">
          <source>Add the fish shell &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="translated">다음을 사용하여 &lt;code&gt;/etc/shells&lt;/code&gt; 에 생선 껍질 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="5653e8b2a5b4e506d45221882faa5a4ef5e578ef" translate="yes" xml:space="preserve">
          <source>Add the line &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2218c2ad08a2c4abdfb2b24cb656a2bed5878772" translate="yes" xml:space="preserve">
          <source>Add the shell to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f235c11a925e7b3330abed437c370548fb56ecc" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;blink&lt;/code&gt; can be added after each of the cursor shape parameters to set a blinking cursor in the specified shape.</source>
          <target state="translated">또한 &lt;code&gt;blink&lt;/code&gt; 지정된 형상으로 깜빡이는 커서를 설정 커서 형상 패러미터의 각 후에 첨가 될 수있다.</target>
        </trans-unit>
        <trans-unit id="fc74aa2568dbca49c63c7dc4f2b48adf6334bb72" translate="yes" xml:space="preserve">
          <source>Additionally, the following variables are available to change the highlighting in the completion pager:</source>
          <target state="translated">또한 완료 호출기에서 강조 표시를 변경하기 위해 다음 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dcf0bfda5eb37d5ad6d848b3b854d252bf95ed5" translate="yes" xml:space="preserve">
          <source>After a command has been entered, it is inserted at the end of a history list. Any duplicate history items are automatically removed. By pressing the up and down keys, the user can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="translated">명령이 입력 된 후, 내역 목록의 끝에 삽입됩니다. 중복 기록 항목이 자동으로 제거됩니다. 위 / 아래 키를 누르면 히스토리에서 앞뒤로 검색 할 수 있습니다. 히스토리 검색을 시작할 때 현재 명령 행이 비어 있지 않으면 명령 행에 입력 된 문자열을 포함하는 명령 만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1c0f395d3d36fe65276a4d5db63528962c286e62" translate="yes" xml:space="preserve">
          <source>After a command has been executed, it is remembered in the history list. Any duplicate history items are automatically removed. By pressing the up and down keys, you can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a350de02e9b5ffd85be164d43398c5ad2155568f" translate="yes" xml:space="preserve">
          <source>After a variable has been set, you can use the value of a variable in the shell through &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">변수가 설정되면 &lt;a href=&quot;#expand-variable&quot;&gt;변수 확장을&lt;/a&gt; 통해 쉘에서 변수 값을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="93f9aedd05ed2f309f5e444d2d5404bfd9df4031" translate="yes" xml:space="preserve">
          <source>After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6629fd2d9ea9eaa222685dbc3f35af94810deb35" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; var is set with local scope to any values not already consumed during flag processing. If there are not unbound values the var is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="translated">인수를 구문 분석 한 후 &lt;code&gt;argv&lt;/code&gt; var는 플래그 처리 중에 아직 소비되지 않은 값으로 로컬 범위로 설정됩니다. 바인딩되지 않은 값이 없으면 var가 설정되지만 &lt;code&gt;count $argv&lt;/code&gt; 는 0이됩니다.</target>
        </trans-unit>
        <trans-unit id="cadc853d6ecb84da57af597335f5dd5f920f4fad" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; variable is set with local scope to any values not already consumed during flag processing. If there are no unbound values the variable is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71ccb08a9461f3714b74f1bc1174cad1387e3e4" translate="yes" xml:space="preserve">
          <source>All arrays are one-dimensional and cannot contain other arrays, although it is possible to fake nested arrays using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">모든 배열은 1 차원이며 다른 배열을 포함 할 수 없지만 &lt;a href=&quot;#expand-variable&quot;&gt;변수 확장&lt;/a&gt; 의 역 참조 규칙을 사용하여 중첩 배열을 속일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56e6acc061961e38bd117d2ddb2648c69dcb4126" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and can't contain other lists, although it is possible to fake nested lists using dereferencing - see &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c98653dd35db2f0582bbcfb13f9d49a14d5a55" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and cannot contain other lists, although it is possible to fake nested lists using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#expand-variable&quot;&gt;변수 확장&lt;/a&gt; 의 역 참조 규칙을 사용하여 중첩 된 목록을 위조 할 수 있지만 모든 목록은 1 차원이며 다른 목록을 포함 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="66ffedcb95110c61b7f48b8dfe9b357e5be7aafb" translate="yes" xml:space="preserve">
          <source>All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.</source>
          <target state="translated">위의 모든 확장을 결합 할 수 있습니다. 여러 확장으로 인해 둘 이상의 매개 변수가 발생하면 가능한 모든 조합이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="828afdd065730919c157af1148a37aa2e6215eb2" translate="yes" xml:space="preserve">
          <source>All of the trigonometric functions use radians.</source>
          <target state="translated">모든 삼각 함수는 라디안을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="26ebe75843a58a3dac290ff4f09ca89edc661094" translate="yes" xml:space="preserve">
          <source>All statements in initialization files that output to the terminal should be guarded with something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eaf99fa509b066c368ae766f5fd326fe0a501f8" translate="yes" xml:space="preserve">
          <source>All variables are &quot;arrays&quot; (we use the term &quot;lists&quot;), and expanding a variable expands to all its elements, with each element as its own argument (like bash's &lt;code&gt;&quot;${var[@]}&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d286363a981fa0af60a5ca572e501d6a1474e5" translate="yes" xml:space="preserve">
          <source>Almost all fish commands respond to the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; options to display their relevant help, also accessible using the &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;man&lt;/code&gt; commands, like so:</source>
          <target state="translated">거의 모든 피쉬 명령은 &lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 옵션에 응답하여 관련 도움말을 표시하고 &lt;code&gt;help&lt;/code&gt; 및 &lt;code&gt;man&lt;/code&gt; 명령을 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bda1d0385b54eba22fc83053a714334995ee2583" translate="yes" xml:space="preserve">
          <source>Also shortened as &quot;I/O&quot; or &quot;IO&quot;.</source>
          <target state="translated">또한 &quot;I / O&quot;또는 &quot;IO&quot;로 축약됩니다.</target>
        </trans-unit>
        <trans-unit id="d37eb49280470e438e7e699ff631a3f84af89ba2" translate="yes" xml:space="preserve">
          <source>Also,</source>
          <target state="translated">Also,</target>
        </trans-unit>
        <trans-unit id="e30eff925100b7c3e119ed678e39009e962455b0" translate="yes" xml:space="preserve">
          <source>Alt</source>
          <target state="translated">Alt</target>
        </trans-unit>
        <trans-unit id="517f3a2c8b9272ee95d59b7f36af89264fa4dbf8" translate="yes" xml:space="preserve">
          <source>Alt+&amp;darr;,Down</source>
          <target state="translated">Alt+&amp;darr;,Down</target>
        </trans-unit>
        <trans-unit id="5e9023ab706bd62faa0520004f30bc2ed999ef8c" translate="yes" xml:space="preserve">
          <source>Alt+&amp;larr;,Left</source>
          <target state="translated">Alt+&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="36866486669ffcdfbef93f70b2122585d0689c65" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;</source>
          <target state="translated">Alt+&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6b89c31e566539bfe03d67119b891ccbd78608fd" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;,Right</source>
          <target state="translated">Alt+&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="9a9d40973db0c2622dc620880dd806a2a7b074af" translate="yes" xml:space="preserve">
          <source>Alt+&amp;uarr;,Up</source>
          <target state="translated">Alt+&amp;uarr;,Up</target>
        </trans-unit>
        <trans-unit id="bfc455c2b3ba6cee557bc6d5bddcaae8ab6cd71e" translate="yes" xml:space="preserve">
          <source>Alt+.</source>
          <target state="translated">Alt+.</target>
        </trans-unit>
        <trans-unit id="3f1d49e2c9f7278fd80b98a77041a0c748cbc877" translate="yes" xml:space="preserve">
          <source>Alt+Backspace</source>
          <target state="translated">Alt+Backspace</target>
        </trans-unit>
        <trans-unit id="e03e0d826ab2903a1d279112bf254a834058b27f" translate="yes" xml:space="preserve">
          <source>Alt+D</source>
          <target state="translated">Alt+D</target>
        </trans-unit>
        <trans-unit id="abed54704141f2d3e51473ad15ab778fff8ad229" translate="yes" xml:space="preserve">
          <source>Alt+Enter</source>
          <target state="translated">Alt+Enter</target>
        </trans-unit>
        <trans-unit id="f71a3b249f291f22237bbbed38b8c6c692ef50ea" translate="yes" xml:space="preserve">
          <source>Alt+F</source>
          <target state="translated">Alt+F</target>
        </trans-unit>
        <trans-unit id="ef42947ea26232a62f96bc3b77c5d9938c972a74" translate="yes" xml:space="preserve">
          <source>Alt+Y</source>
          <target state="translated">Alt+Y</target>
        </trans-unit>
        <trans-unit id="42067d9d74bbc067847a30164e23954aca55ff0a" translate="yes" xml:space="preserve">
          <source>Alt+c</source>
          <target state="translated">Alt+c</target>
        </trans-unit>
        <trans-unit id="d73eff91bc5add0567a63c189cfc6a840240cc3a" translate="yes" xml:space="preserve">
          <source>Alt+d</source>
          <target state="translated">Alt+d</target>
        </trans-unit>
        <trans-unit id="356f2928c7cc628dc148ace42aaa5347a9043a00" translate="yes" xml:space="preserve">
          <source>Alt+e</source>
          <target state="translated">Alt+e</target>
        </trans-unit>
        <trans-unit id="a2008eaab718a2cbdba9a5b56cc0388211241a00" translate="yes" xml:space="preserve">
          <source>Alt+h</source>
          <target state="translated">Alt+h</target>
        </trans-unit>
        <trans-unit id="63b063c0b910fdda5527dc17ae1126ec12f233f4" translate="yes" xml:space="preserve">
          <source>Alt+l</source>
          <target state="translated">Alt+l</target>
        </trans-unit>
        <trans-unit id="412b6a19e71a5431a4a033717193f98cc5ab36f2" translate="yes" xml:space="preserve">
          <source>Alt+p</source>
          <target state="translated">Alt+p</target>
        </trans-unit>
        <trans-unit id="3f12597f24de2438c063ec57e52f94359d4653a6" translate="yes" xml:space="preserve">
          <source>Alt+s</source>
          <target state="translated">Alt+s</target>
        </trans-unit>
        <trans-unit id="7c8aea22d76a0fc0d599dcc9667d21c686685110" translate="yes" xml:space="preserve">
          <source>Alt+t</source>
          <target state="translated">Alt+t</target>
        </trans-unit>
        <trans-unit id="8d028f59d024b2c7c1586395af72b9b1deb565e4" translate="yes" xml:space="preserve">
          <source>Alt+u</source>
          <target state="translated">Alt+u</target>
        </trans-unit>
        <trans-unit id="cb3eeeb8ea5fb25aecee7d1b619b3e3d542195e4" translate="yes" xml:space="preserve">
          <source>Alt+v</source>
          <target state="translated">Alt+v</target>
        </trans-unit>
        <trans-unit id="f7d4868bcba598a1dee143a75725317cae61d6b2" translate="yes" xml:space="preserve">
          <source>Alt+w</source>
          <target state="translated">Alt+w</target>
        </trans-unit>
        <trans-unit id="91cf5d208f71238a675c3bfa07523a3c0bae8a90" translate="yes" xml:space="preserve">
          <source>Alternatively, use &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt;, but remember that &lt;strong&gt;the variable must be double-quoted&lt;/strong&gt;. For example, &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt;. The &lt;code&gt;test&lt;/code&gt; command provides its own and (-a) and or (-o):</source>
          <target state="translated">또는 &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt; 을 사용하되 &lt;strong&gt;변수는 큰 따옴표로 묶어야&lt;/strong&gt; 합니다. 예를 들어, &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt; . &lt;code&gt;test&lt;/code&gt; 명령을 제공하는 자사의 및 (-a) 및 또는 (-o) 자신의 :</target>
        </trans-unit>
        <trans-unit id="bc3300770ceceb008dbc00aa7addb545afcdd538" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;a href=&quot;#variables-argv&quot;&gt;$argv&lt;/a&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83f5e1029e1f8968df11b5b3d40ca89fed19fcf" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;code&gt;$argv&lt;/code&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="translated">항상 &lt;code&gt;$argv&lt;/code&gt; 변수를 랩핑 된 명령의 매개 변수 목록에 추가하십시오 . 이를 통해 사용자가 함수에 추가 매개 변수를 지정하면 기본 명령으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="f9ad26606a8f0efef47019531f3d0c942aac7413" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color.</source>
          <target state="translated">A0FF33 또는 f2f와 같이 3 자리 또는 6 자리 16 진수가있는 RGB 값을 사용할 수 있습니다. &lt;code&gt;fish&lt;/code&gt; 는 지원되는 가장 가까운 색상을 선택합니다. 3 자리 값은 각 숫자를 두 번 지정하는 것과 같습니다. 예를 들어 &lt;code&gt;set_color 2BC&lt;/code&gt; 는 &lt;code&gt;set_color 22BBCC&lt;/code&gt; 와 동일 합니다. 16 진수 RGB 값은 소문자 또는 대문자 일 수 있습니다. 터미널의 기능 (및 &lt;code&gt;set_color&lt;/code&gt; 에 대한 지원 수준 )에 따라 실제 색상은 근처에있는 일치하는 예약 된 색상 이름에 의해 근사화되거나 &lt;code&gt;set_color&lt;/code&gt; 가 색상에 영향을 미치지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6698f2ed87e85285db0bd4dfe6d91201b04dda0" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color. A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212&lt;/code&gt;&lt;em&gt;brblue&lt;/em&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">A0FF33 또는 f2f와 같이 3 자리 또는 6 개의 16 진수가있는 RGB 값을 사용할 수 있습니다. &lt;code&gt;fish&lt;/code&gt; 는 가장 가까운 지원 색상을 선택합니다. 3 자리 숫자 값은 각 숫자를 두 번 지정하는 것과 같습니다. 예를 들어 &lt;code&gt;set_color 2BC&lt;/code&gt; 는 &lt;code&gt;set_color 22BBCC&lt;/code&gt; 와 동일 합니다. 16 진 RGB 값은 소문자 또는 대문자 일 수 있습니다. 터미널의 기능 (및 &lt;code&gt;set_color&lt;/code&gt; 의 지원 수준 )에 따라 실제 색상은 근처에 일치하는 예약 된 색상 이름에 의해 근사되거나 &lt;code&gt;set_color&lt;/code&gt; 는 색상에 영향을 미치지 않을 수 있습니다. 원하는 폴백 컬러로서 제 2 컬러가 주어질 수있다. 예 : &lt;code&gt;set_color 124212&lt;/code&gt; &lt;em&gt;brblue&lt;/em&gt; 는 set_color에 brblue를 사용하도록 &lt;em&gt;지시합니다.&lt;/em&gt;터미널이 원하는 정확한 회색 음영을 만들 수없는 경우 이것은 8 또는 16 색 터미널이 다른 색을 사용할 수 없을 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f74c42c499aeba63a8ea3607dd7f2066d74d726b" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor like &lt;code&gt;&amp;amp;2&lt;/code&gt; for standard error. The output will be written to the destination descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42927afb9c7caf7b6c8ddab65a5441b4f933c6dc" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor. The output will be written to that file descriptor instead.</source>
          <target state="translated">앰퍼샌드 ( &lt;code&gt;&amp;amp;&lt;/code&gt; ) 뒤에 다른 파일 설명자 번호가옵니다. 대신 출력이 해당 파일 설명자에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="f71943b897ee254dbdc1a97522da125ee417b99e" translate="yes" xml:space="preserve">
          <source>An ampersand followed by a minus sign (&lt;code&gt;&amp;amp;-&lt;/code&gt;). The file descriptor will be closed.</source>
          <target state="translated">앰퍼샌드 뒤에 빼기 부호 ( &lt;code&gt;&amp;amp;-&lt;/code&gt; )가 옵니다 . 파일 디스크립터가 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="71cc88334bb3e92319c03d6549b247d60c760b50" translate="yes" xml:space="preserve">
          <source>An autoloaded function becomes available automatically to all running shells.</source>
          <target state="translated">자동로드 된 기능은 실행중인 모든 셸에서 자동으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="feaaca65392fda02c163012d9378b2dddb326e82" translate="yes" xml:space="preserve">
          <source>An example of a file redirection is &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, which directs the output of the echo command to the file output.txt.</source>
          <target state="translated">파일 리디렉션의 예는 &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt; 이며 echo 명령의 출력을 output.txt 파일로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="70622abf0d999c9b30ccee1d90ca01c58b366577" translate="yes" xml:space="preserve">
          <source>An important list is &lt;code&gt;$argv&lt;/code&gt;, which contains the arguments to a function or script. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8ae932f676e1b49a92ae134701eb47d262917c" translate="yes" xml:space="preserve">
          <source>An option defined with &lt;code&gt;=?&lt;/code&gt; can take optional arguments. Optional arguments have to be &lt;em&gt;directly attached&lt;/em&gt; to the option they belong to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba78d35401b6a1c6c93697efea477dcd3252c20" translate="yes" xml:space="preserve">
          <source>An optional alphanumeric short flag letter, followed by a &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command or, for backwards compatibility, a &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag (in which case it will also not be exposed as a flag variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6f6d9342a43e58638f4532c5f5bd8a68457e20" translate="yes" xml:space="preserve">
          <source>An optional long flag name. If not present then only the short flag letter can be used, and if that is not present either it's an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679ec7a7b8cdd5d99093574be9564bebec8796e1" translate="yes" xml:space="preserve">
          <source>And here is fish:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69522f56e3535db80624669c313a99567b23650" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters</source>
          <target state="translated">그리고 역사도. 명령을 한 번 입력하면 몇 글자 만 입력하여 다시 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bcd9af34fdfabd4b79f9b66b86a1699d04abe42" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters:</source>
          <target state="translated">그리고 역사도. 명령을 한 번 입력하면 몇 글자 만 입력하면 다시 소환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b0fd5cdb40b4cfe992f552884b592eda469a0f9" translate="yes" xml:space="preserve">
          <source>And some other things:</source>
          <target state="translated">그리고 다른 것들 :</target>
        </trans-unit>
        <trans-unit id="561f19ae7fb03ebfc67b782db126853cbbf6f6cb" translate="yes" xml:space="preserve">
          <source>And these will exit non-zero:</source>
          <target state="translated">그리고 이들은 0이 아닌 것을 종료합니다 :</target>
        </trans-unit>
        <trans-unit id="b40c5f88db8dfb0b9bfe4851375485b84d5f21ba" translate="yes" xml:space="preserve">
          <source>And this will open a random picture from any of the subdirectories:</source>
          <target state="translated">그러면 하위 디렉토리에서 임의의 그림이 열립니다.</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8412cc61dadd4c0591948f966c2cb2fcaae73906" translate="yes" xml:space="preserve">
          <source>Another set of commands, usually also available in other shells like bash, deal with the directory stack. Stack handling is not automatic and needs explicit calls of the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acd5f5d27392753de0db7aa6703caa605cc318d" translate="yes" xml:space="preserve">
          <source>Another way to redirect streams is a &lt;em&gt;pipe&lt;/em&gt;. A pipe connects streams with each other. Usually the standard output of one command is connected with the standard input of another. This is done by separating commands with the pipe character &lt;code&gt;|&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871f0eca83b698ab5e09430c495bdbf2531c9722" translate="yes" xml:space="preserve">
          <source>Any arbitrary file descriptor can used in a redirection by prefixing the redirection with the FD number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362b56d716d77e953ca245a04fefe6fa04496b74" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a mechanism called a redirection.</source>
          <target state="translated">모든 파일 설명자는 리디렉션이라는 메커니즘을 통해 기본값과 다른 출력으로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8bcc5afa939d9420d0774b5e38828f941829c98" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a simple mechanism called a redirection.</source>
          <target state="translated">리디렉션이라고하는 간단한 메커니즘을 통해 모든 파일 설명자를 기본값과 다른 출력으로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2f3a230563fd5c0b1186bad49a4d25468f2d9d1" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be redirected in an arbitrary way by prefixing the redirection with the file descriptor.</source>
          <target state="translated">모든 파일 디스크립터는 파일 디스크립터로 경로를 재지 정하여 임의의 방식으로 경로 재 지정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd5f97ddaa069aad021c1d2a9c338e699d7fb280" translate="yes" xml:space="preserve">
          <source>Any trailing newlines on the input are trimmed, just as with &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; substitution in sh. &lt;code&gt;--no-trim-newlines&lt;/code&gt; can be used to disable this behavior, which may be useful when running a command such as &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt;.</source>
          <target state="translated">sh의 &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; 대체 와 마찬가지로 입력의 모든 후행 줄 바꿈이 잘 립니다. &lt;code&gt;--no-trim-newlines&lt;/code&gt; 를 사용하여이 동작을 비활성화 할 수 있으며, 이는 &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt; 와 같은 명령을 실행할 때 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fdf5f1f8373d2b080130881f50fad45711fb3b29" translate="yes" xml:space="preserve">
          <source>Anything after a &lt;code&gt;#&lt;/code&gt; until the end of the line is a comment. That means it's purely for the reader's benefit, fish ignores it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dd47e0001555dbec5775dfb849b9ead7487cd5" translate="yes" xml:space="preserve">
          <source>Argument Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce2360486723d855cffc7d0ddbf62842f609b07" translate="yes" xml:space="preserve">
          <source>Arguments beginning with &lt;code&gt;-&lt;/code&gt; are normally interpreted as switches; &lt;code&gt;--&lt;/code&gt; causes the following arguments not to be treated as switches even if they begin with &lt;code&gt;-&lt;/code&gt;. Switches and required arguments are recognized only on the command line.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; 로 시작하는 인수 는 일반적으로 스위치로 해석됩니다. &lt;code&gt;--&lt;/code&gt; 다음 인수가 &lt;code&gt;-&lt;/code&gt; 로 시작하더라도 스위치로 취급되지 않도록합니다 . 스위치와 필수 인수는 명령 줄에서만 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="c271567e584d16588ed2e67dbff2bcfabb548be6" translate="yes" xml:space="preserve">
          <source>Arguments of the form &lt;code&gt;PID&lt;/code&gt; or &lt;code&gt;%JOBID&lt;/code&gt; restrict the output to jobs with the selected process identifiers or job numbers respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb75a7744b90e1d41f52f6bfdc6641917e4fac3" translate="yes" xml:space="preserve">
          <source>Arithmetic Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="043257e881ac5312780335efc43840ed60123921" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; may be used to redirect both stdout and stderr to the same process. (Note this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;).</source>
          <target state="translated">편의상 파이프 &lt;code&gt;&amp;amp;|&lt;/code&gt; stdout과 stderr를 동일한 프로세스로 리디렉션하는 데 사용할 수 있습니다. (이것은 &lt;code&gt;|&amp;amp;&lt;/code&gt; 를 사용하는 bash와 다릅니다 ).</target>
        </trans-unit>
        <trans-unit id="26ae8c713f35540f776adc6fe2105492bc43a12d" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; redirects both stdout and stderr to the same process. Note that this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb74a4614fe1bdd5c15afb4396e8a04b015ea06" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same destination. For example, &lt;code&gt;echo hello &amp;amp;&amp;gt; all_output.txt&lt;/code&gt; redirects both stdout and stderr to the file &lt;code&gt;all_output.txt&lt;/code&gt;. This is equivalent to &lt;code&gt;echo hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d7ac6db0a68a35b045c043f69d790c7693b8ae" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same file.</source>
          <target state="translated">편의상 리디렉션 &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; 를 사용하여 stdout과 stderr를 동일한 파일로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50e3ff1cb1d7c006c42b55ac24b776d0f7cba3be" translate="yes" xml:space="preserve">
          <source>As a convention, an uppercase name is usually used for exported variables, while lowercase variables are not exported. (&lt;code&gt;CMD_DURATION&lt;/code&gt; is an exception for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3e5f4a2209f9a0c0df95a3cff184e572efda6a" translate="yes" xml:space="preserve">
          <source>As a more comprehensive example, here's a commented excerpt of the completions for systemd's &lt;code&gt;timedatectl&lt;/code&gt;:</source>
          <target state="translated">보다 포괄적 인 예로서, 여기 systemd의 &lt;code&gt;timedatectl&lt;/code&gt; 완료에 대한 주석 발췌 부분이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e5f5d858c5cb06f89afc2d8f5a2724a03bbce58" translate="yes" xml:space="preserve">
          <source>As a naming convention, exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="translated">명명 규칙에 따라 내 보낸 변수는 대문자이고 내 보내지 않은 변수는 소문자입니다.</target>
        </trans-unit>
        <trans-unit id="156a75280e065fb5a6b979a2a60062b81d648631" translate="yes" xml:space="preserve">
          <source>As a special case, &lt;code&gt;cd .&lt;/code&gt; is equivalent to &lt;code&gt;cd $PWD&lt;/code&gt;, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.</source>
          <target state="translated">특별한 경우 &lt;code&gt;cd .&lt;/code&gt; &lt;code&gt;cd $PWD&lt;/code&gt; 와 동일합니다 . 이는 마운트 포인트가 재활용되거나 디렉토리가 제거되어 재 작성된 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8a76b3ccd2a02e439e9d0d634760228379ade658" translate="yes" xml:space="preserve">
          <source>As a special case, most of the time history substitution is used as &lt;code&gt;sudo !!&lt;/code&gt;. In that case just press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cca9051e4bad2090a097b384b44922e2c0a707" translate="yes" xml:space="preserve">
          <source>As a special case, when no scope is given and no variable has been defined the variable will belong to the scope of the currently executing &lt;em&gt;function&lt;/em&gt;. Note that this is different from the &lt;code&gt;--local&lt;/code&gt; flag, which would make the variable local to the current &lt;em&gt;block&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75218cdcc8abd1bc9e317919f08dbf1d9535b37e" translate="yes" xml:space="preserve">
          <source>As an example, here's a relatively simple bash prompt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473fe2640f48f2c3e356480b21727c05fe2a883f" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow,</source>
          <target state="translated">모든 현대 셸과 마찬가지로 위쪽 화살표,</target>
        </trans-unit>
        <trans-unit id="20487db156547ac9b0f8f6cda4758b76bf576cc9" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow, &lt;b&gt;&amp;uarr;&lt;/b&gt; recalls whole lines, starting from the last line executed. A single press replaces &quot;!!&quot;, later presses replace &quot;!-3&quot; and the like.</source>
          <target state="translated">현대 쉘에서와 같이 위쪽 화살표 ( &lt;b&gt;&amp;uarr;)&lt;/b&gt; 는 마지막 행부터 시작하여 전체 행을 &lt;b&gt;호출&lt;/b&gt; 합니다. 한 번의 누르기는 &quot;!!&quot;를 대체하고 나중에 누르는 것은 &quot;! -3&quot;등을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="0aef70ec4e5a6bb50c1b6265dc481e6984473182" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut-semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ab2336a0f60cb48a293dcf13625cec05689fb2" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut_semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="translated">&lt;a href=&quot;#tut_semicolon&quot;&gt;세미콜론 섹션에서&lt;/a&gt; 언급했듯이 다음과 같이 여러 줄로 쓸 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d0c80cc72f9bf8f12ec6bdcb82cf280e4cc33e4" translate="yes" xml:space="preserve">
          <source>As you see, you can use a range of indices, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f44aeed0b615ca47a0ff22e32c1de761aa65f7" translate="yes" xml:space="preserve">
          <source>As you type fish will suggest commands to the right of the cursor, in gray. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52775e74dd1367202ccdfebc63ffe15c3fc2a94" translate="yes" xml:space="preserve">
          <source>Autoloading Functions</source>
          <target state="translated">자동 로딩 기능</target>
        </trans-unit>
        <trans-unit id="4824104c7854d679befc6d384e2b164a387c5851" translate="yes" xml:space="preserve">
          <source>Autoloading also won't work for &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt;, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn't yet loaded the function. See the &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt; section for more information.</source>
          <target state="translated">이벤트가 아직 함수를로드하지 않았을 때 이벤트가 발생할 때 함수가 실행되어야한다는 것을 물고기가 알 수 없기 때문에 자동로드는 &lt;a href=&quot;#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 에서도 작동 하지 않습니다. 자세한 정보는 &lt;a href=&quot;#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="95c7d742338312cc72973984211afee4d64d688a" translate="yes" xml:space="preserve">
          <source>Autoloading functions</source>
          <target state="translated">자동 로딩 기능</target>
        </trans-unit>
        <trans-unit id="37ebd68a9ad79a75d4984b197d8be79759e981aa" translate="yes" xml:space="preserve">
          <source>Autoloading is not applicable to functions created by the &lt;code&gt;alias&lt;/code&gt; command. For functions simple enough that you prefer to use the &lt;code&gt;alias&lt;/code&gt; command to define them you'll need to put those commands in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; script or some other script run when the shell starts.</source>
          <target state="translated">&lt;code&gt;alias&lt;/code&gt; 명령으로 작성된 기능에는 자동 로딩을 적용 할 수 없습니다 . &lt;code&gt;alias&lt;/code&gt; 명령을 사용하여이를 정의하기 를 선호 할만큼 충분히 간단한 기능을 사용하려면 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 스크립트 또는 쉘이 시작될 때 실행되는 다른 스크립트 에 해당 명령을 넣어야 합니다.</target>
        </trans-unit>
        <trans-unit id="220cc2eeb742925687ae3d99a850d4e272eba270" translate="yes" xml:space="preserve">
          <source>Autoloading isn't applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.</source>
          <target state="translated">자동로드는 별칭에 적용 할 수 없습니다. 정의에 따라 별명 명령이 실행될 때 함수가 작성되기 때문입니다. 별칭을 자동로드 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7833f645e87e9d8459033a17299c17f343cc6bd7" translate="yes" xml:space="preserve">
          <source>Automatically loaded functions cannot be removed using &lt;code&gt;functions -e&lt;/code&gt;. Either remove the definition file or change the $fish_function_path variable to remove autoloaded functions.</source>
          <target state="translated">&lt;code&gt;functions -e&lt;/code&gt; 사용하여 자동으로로드 된 기능을 제거 할 수 없습니다 . 정의 파일을 제거하거나 $ fish_function_path 변수를 변경하여 자동로드 된 기능을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="08b275b23c8db0abd0fd47a8278bb4a362d42dd2" translate="yes" xml:space="preserve">
          <source>Autosuggestions</source>
          <target state="translated">Autosuggestions</target>
        </trans-unit>
        <trans-unit id="a97c1fe699de2b5c57693a4ec6fbf5427cf3afca" translate="yes" xml:space="preserve">
          <source>Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.</source>
          <target state="translated">자동 제안은 처음 몇 문자를 입력하여 자주 입력하는 명령을 빠르게 소환하는 강력한 방법입니다. 또한 디렉토리 계층 구조를 탐색하는 효율적인 기술입니다.</target>
        </trans-unit>
        <trans-unit id="b803480401e4c7ecbb2689fc9dd0c41c3a693dad" translate="yes" xml:space="preserve">
          <source>Available categories are listed by &lt;code&gt;fish --print-debug-categories&lt;/code&gt;. The &lt;code&gt;--debug&lt;/code&gt; option accepts a comma-separated list of categories, and supports glob syntax. The following command turns on debugging for &lt;em&gt;complete&lt;/em&gt;, &lt;em&gt;history&lt;/em&gt;, &lt;em&gt;history-file&lt;/em&gt;, and &lt;em&gt;profile-history&lt;/em&gt;, as well as the default categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="efb359fec2a662dc1a33a02af7733ec339aa7947" translate="yes" xml:space="preserve">
          <source>Back to &lt;a href=&quot;index#toc-commands&quot;&gt;command index&lt;/a&gt;.</source>
          <target state="translated">위로 &lt;a href=&quot;index#toc-commands&quot;&gt;명령 인덱스&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b6d421870c8ff86f5929b69f93de50dd0a6ad8a4" translate="yes" xml:space="preserve">
          <source>Background jobs</source>
          <target state="translated">백그라운드 작업</target>
        </trans-unit>
        <trans-unit id="7eddf2e692bbe2944055253e903e03f92dc85c03" translate="yes" xml:space="preserve">
          <source>Backslash Escapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="8fd78925dba59eef91afba0cdabe923520e5ee69" translate="yes" xml:space="preserve">
          <source>Backwards compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898df0585456830b3e2596ce9c727b397a79ef3c" translate="yes" xml:space="preserve">
          <source>Bash and Zsh at least, though it is a POSIX extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef1ee8a9d6b03ca3f008e7820b03d1764d158f0" translate="yes" xml:space="preserve">
          <source>Be careful when you try to use braces to separate variable names from text. The problem shown above can be avoided by wrapping the variable in double quotes instead of braces (&lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;).</source>
          <target state="translated">중괄호를 사용하여 변수 이름을 텍스트와 구분하려고 할 때주의하십시오. 위에 표시된 문제는 변수를 중괄호 대신 큰 따옴표로 묶어 피할 수 있습니다 ( &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8135bc2e0facd903fae79ced79c0c26d6ddbce1f" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#path&quot;&gt;$PATH&lt;/a&gt; is a list, this expands to all the files in all the directories in it. And if there are no directories in $PATH, the right answer here is to expand to no files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7feaea8ff9fd56c39af0c7242d19cfc491332827" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Fish drops it in favor of perfecting the interactive history recall interface. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit. E.g. don't type &quot;sudo !!&quot; - first press Up, then Home, then type &quot;sudo &quot;.</source>
          <target state="translated">히스토리 대체는 대화식 라인 편집이 가능하기 전에 발명 된 어색한 인터페이스이기 때문입니다. 물고기는 대화 형 기록 리콜 인터페이스를 완성하기 위해 그것을 떨어 뜨립니다. 전환하려면 약간의 습관이 필요합니다. 이전 줄 / 단어를 수정하려면 먼저 불러 온 후 편집하십시오. 예를 들어 &quot;sudo !!&quot;를 입력하지 마십시오 -먼저 위로를 누른 다음 홈을 누른 다음 &quot;sudo&quot;를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="e48c07a2bec43ce33a721c00e3bf3a0e514f9626" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Instead of adding this pseudo-syntax, fish opts for nice history searching and recall features. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a6ddbaf25b0a2b366ca16189c773aaebd9954" translate="yes" xml:space="preserve">
          <source>Because shell scripts are written in many different languages, they need to carry information about which interpreter should be used to execute them. For this, they are expected to have a first line, the shebang line, which names the interpreter executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2b48e7cf5a31dcb784896532986617c1886b80" translate="yes" xml:space="preserve">
          <source>Because this test is a shell builtin and not a standalone utility, using the -c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the &lt;code&gt;test&lt;/code&gt; utility in another shell.</source>
          <target state="translated">이 테스트는 독립형 유틸리티가 아닌 쉘 내장이기 때문에 표준 입력 및 출력과 같은 특수 파일 디스크립터에서 -c 플래그를 사용하면 파이프 내에서 호출 될 때 &lt;code&gt;test&lt;/code&gt; 유틸리티를 호출 할 때 예상하는 것과 동일한 결과를 리턴하지 않을 수 있습니다 . 다른 껍질.</target>
        </trans-unit>
        <trans-unit id="9a3113248a139d6a914ae9cdb2ef995428b80e8e" translate="yes" xml:space="preserve">
          <source>Blocks and loops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0a4626f95b4339163a76408544aca1706ad80a" translate="yes" xml:space="preserve">
          <source>Both command substitution and shell variable expansion support accessing only specific items by providing a set of indices in square brackets. It's often needed to access a sequence of elements. To do this, use the range operator '&lt;code&gt;..&lt;/code&gt;' for this. A range '&lt;code&gt;a..b&lt;/code&gt;', where range limits 'a' and 'b' are integer numbers, is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. The negative range limits are calculated from the end of the array or command substitution. Note that invalid indexes for either end are silently clamped to one or the size of the array as appropriate.</source>
          <target state="translated">명령 대체 및 쉘 변수 확장은 대괄호 안에 인덱스 세트를 제공하여 특정 항목에만 액세스 할 수 있도록 지원합니다. 일련의 요소에 액세스해야하는 경우가 종종 있습니다. 이렇게하려면 범위 연산자 ' &lt;code&gt;..&lt;/code&gt; '를 사용하십시오. 범위 한계 'a'와 'b'가 정수인 범위 ' &lt;code&gt;a..b&lt;/code&gt; '는 일련의 인덱스 ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; '또는 ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; '는'a '또는'b '중 더 높은 것에 따라 다릅니다. 음의 범위 한계는 배열의 끝 또는 명령 대체에서 계산됩니다. 한쪽 끝의 유효하지 않은 인덱스는 적절하게 배열의 크기 나 크기에 자동으로 고정됩니다.</target>
        </trans-unit>
        <trans-unit id="75ffa6a25ecf8db0b72541843389d9eaf8b53a19" translate="yes" xml:space="preserve">
          <source>Both integers and floating point numbers are supported.</source>
          <target state="translated">정수와 부동 소수점 숫자가 모두 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="a427d5ed7ae29cac94543768854841dc58975513" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; subcommand support regular expressions when used with the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; option. The dialect is that of PCRE2.</source>
          <target state="translated">둘 다 &lt;code&gt;match&lt;/code&gt; 와 &lt;code&gt;replace&lt;/code&gt; 함께 사용하면 하위 명령 지원 정규 표현식을 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--regex&lt;/code&gt; 옵션을 선택합니다. 방언은 PCRE2의 방언입니다.</target>
        </trans-unit>
        <trans-unit id="511cb46636e15b326ac52fc0e55d4fdd22eb3466" translate="yes" xml:space="preserve">
          <source>Brace expansion</source>
          <target state="translated">버팀대 확장</target>
        </trans-unit>
        <trans-unit id="b2b396ea7eca30ae26382239ecff257585cae7ee" translate="yes" xml:space="preserve">
          <source>Bracket expansion</source>
          <target state="translated">브래킷 확장</target>
        </trans-unit>
        <trans-unit id="b82bb93621eea3789efc2e789761d65a7d589377" translate="yes" xml:space="preserve">
          <source>Builtin commands</source>
          <target state="translated">내장 명령</target>
        </trans-unit>
        <trans-unit id="b2f835b51cbf37c812c8d492c4e61154843f12f9" translate="yes" xml:space="preserve">
          <source>Builtins and other commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f005fce61fdfc30668117115e325f0f651ccd7" translate="yes" xml:space="preserve">
          <source>Builtins for dealing with data, like &lt;a href=&quot;cmds/string#cmd-string&quot;&gt;string&lt;/a&gt; for strings and &lt;a href=&quot;cmds/math#cmd-math&quot;&gt;math&lt;/a&gt; for numbers, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; for counting lines or arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6540e446642ea1f845cd9ba7c9976290616eef0" translate="yes" xml:space="preserve">
          <source>Builtins that manipulate the shell state - &lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;cd&lt;/a&gt; changes directory, &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; sets variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298ae00ce8eb2f8d976a8abd3f5e489822080a54" translate="yes" xml:space="preserve">
          <source>But it also means that these commands can stop working at any moment once a matching file is encountered (because it has been created or the command is executed in a different working directory), and to deal with that bash needs workarounds like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d71f7e1b353d405d0ac11988a391e51c106c8d8" translate="yes" xml:space="preserve">
          <source>But this is not:</source>
          <target state="translated">그러나 이것은 아닙니다 :</target>
        </trans-unit>
        <trans-unit id="cde26bb231339705624e1a2606178650cfe6ce34" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;$fish_function_path&lt;/code&gt; contains the following:</source>
          <target state="translated">기본적으로 &lt;code&gt;$fish_function_path&lt;/code&gt; 에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="48c59a6753b3cfab58dea49a5311a9139ab88123" translate="yes" xml:space="preserve">
          <source>By default interactive commands are logged to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (typically &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt;).</source>
          <target state="translated">기본적으로 대화식 명령은 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (일반적으로 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; )에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="32d73806ca1d3aebeb76dd86671a3241e81f5c68" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for completions, using the first available file that it finds:</source>
          <target state="translated">기본적으로 Fish는 찾은 첫 번째 사용 가능한 파일을 사용하여 다음을 완료합니다.</target>
        </trans-unit>
        <trans-unit id="0d8a923544fbc788e85068131f51c4e6a9993b6b" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for functions, using the first available file that it finds:</source>
          <target state="translated">기본적으로 Fish는 사용 가능한 첫 번째 파일을 사용하여 다음 기능을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="061406f8d7e8bc7fa59a3f0158d04f4856dfa72b" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can be slow on a large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59136d65df69881397a99de96dfa18d804e65129" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can take be slow on large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="translated">기본적 으로 큰 저장소 에서는 &lt;code&gt;hg status&lt;/code&gt; 가 느려질 수 있으므로 현재 분기 만 표시 됩니다. &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt; 변수를 설정하여 더 많은 정보를 제공하는 프롬프트를 활성화 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="394744edd93f9e7227797e7c6f44f8314ec9d0c5" translate="yes" xml:space="preserve">
          <source>By default, the output is a floating-point number with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315b1092a86cf296a40f2822b51753c337ac1521" translate="yes" xml:space="preserve">
          <source>By default, the output is as a float with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="translated">기본적으로 출력은 후행 0이 트림 된 부동 소수점입니다. 고정 표현을 얻으려면 정수 출력에 &lt;code&gt;--scale=0&lt;/code&gt; 을 포함 하여 &lt;code&gt;--scale&lt;/code&gt; 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72523c77472ad7835198f8fcd9e09a5badc11af9" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 를 정의하면 사용자가 &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;중단 점&lt;/a&gt; 명령 에 대한 응답으로 입력을 요청할 때 사용자 지정 프롬프트를 선택할 수 있습니다 . &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 기능은 메시지가 표시 할 때 실행되고, 출력은 메시지로 사용된다.</target>
        </trans-unit>
        <trans-unit id="db7a1b873a6bb02030899acd0c28b71468ea0843" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;code&gt;breakpoint&lt;/code&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 를 정의하여 사용자는 &lt;code&gt;breakpoint&lt;/code&gt; 명령 에 대한 응답으로 입력을 요청할 때 사용자 정의 프롬프트를 선택할 수 있습니다 . &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 기능은 메시지가 표시 할 때 실행되고, 출력은 메시지로 사용된다.</target>
        </trans-unit>
        <trans-unit id="be6b595ea352dde32c38a4fa33c350b05d798766" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_prompt&lt;/code&gt; function, the user can choose a custom prompt. The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 기능 을 정의하여 사용자는 사용자 정의 프롬프트를 선택할 수 있습니다. &lt;code&gt;fish_prompt&lt;/code&gt; 기능은 메시지가 표시 할 때 실행되고, 출력은 메시지로 사용된다.</target>
        </trans-unit>
        <trans-unit id="630303d4e2fa4b039b2b6a8e3e8b5957dc1783d2" translate="yes" xml:space="preserve">
          <source>By ending a command with the &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) symbol, the user tells &lt;code&gt;fish&lt;/code&gt; to put the specified command into the background. A background process will be run simultaneous with &lt;code&gt;fish&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; will retain control of the terminal, so the program will not be able to read from the keyboard.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; (앰퍼샌드) 기호 로 명령을 끝내면 사용자는 &lt;code&gt;fish&lt;/code&gt; 에게 지정된 명령을 백그라운드에 넣도록 지시합니다. 백그라운드 프로세스는 &lt;code&gt;fish&lt;/code&gt; 와 동시에 실행됩니다 . &lt;code&gt;fish&lt;/code&gt; 는 터미널의 제어권을 유지하므로 프로그램은 키보드에서 읽을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3923f5578037b3542b2b19d15f49bde3629ec275" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the</source>
          <target state="translated">키를 누르기 전에 백 슬래시 ( &lt;code&gt;\&lt;/code&gt; ) 문자 를 삽입 하여</target>
        </trans-unit>
        <trans-unit id="02079690d5cebbe350c1aa5604a81e7a19265022" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the &lt;b&gt;Enter&lt;/b&gt; key, escaping the newline.</source>
          <target state="translated">&lt;b&gt;Enter&lt;/b&gt; 키 를 누르기 전에 백 슬래시 ( &lt;code&gt;\&lt;/code&gt; ) 문자 를 삽입 하여 줄 바꿈을 피하십시오.&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c0242c0009de5a2873925ea6318eae2fc79708ca" translate="yes" xml:space="preserve">
          <source>By now it has become apparent that fish puts much more of a focus on its builtins and external commands rather than its syntax. So here are some helpful builtins and their rough equivalent in bash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a4b7b090d106c959549d48fe03da459c91c544" translate="yes" xml:space="preserve">
          <source>By pressing</source>
          <target state="translated">눌러서</target>
        </trans-unit>
        <trans-unit id="5663475279a3c781c24c4811471a2f176e1db991" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt;, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.</source>
          <target state="translated">누르면 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; 및 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt; 이력 검색도으나 전체 커맨드를 검색의 수행을, 각각의 커맨드는 그 실행 전에 것처럼 별도의 요소로 분할되고, 기록이 소자 매칭 검색된 커서 아래에 있습니다.</target>
        </trans-unit>
        <trans-unit id="894ba850efc456224525f2c8a25b95199c183915" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt;, the user stops a currently running foreground program and returns control to &lt;code&gt;fish&lt;/code&gt;. Some programs do not support this feature, or remap it to another key. GNU Emacs uses &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt;&lt;b&gt;z&lt;/b&gt; to stop running.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt; 를 누르면 사용자는 현재 실행중인 포 그라운드 프로그램을 중지하고 제어를 &lt;code&gt;fish&lt;/code&gt; 되돌 립니다. 일부 프로그램은이 기능을 지원하지 않거나 다른 키로 다시 매핑합니다. GNU Emacs는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X &lt;/b&gt;&lt;b&gt;z&lt;/b&gt; 를 사용 하여 실행을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="24eaf089af6a9daa271f7a6b0f06e6709ca1da8e" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">이벤트 핸들러 스위치 중 하나를 사용하면 특정 이벤트에서 자동으로 기능을 실행할 수 있습니다. 사용자는 &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; 내장 기능을 사용하여 새로운 이벤트를 생성 할 수 있습니다 . Fish는 다음과 같은 명명 된 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6a5c8721be6b4633186b4214510f8a5ef8c0f497" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">이벤트 처리기 스위치 중 하나를 사용하여 특정 이벤트에서 자동으로 실행되도록 함수를 만들 수 있습니다. 사용자는 &lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt; 내장을 사용하여 새로운 이벤트를 생성 할 수 있습니다 . Fish는 다음과 같은 명명 된 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="702f8fce2752414a6a80cd6a6df6d1f2e4852509" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">사용하여 &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;BG&lt;/a&gt; 와 &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;FG&lt;/a&gt; 명령 내장을, 사용자는 전경 또는 배경으로 현재 실행중인 작업을 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8da67926c227ce4e24b10b06e71944960277e706" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt; 내장 명령 을 사용하면 현재 실행중인 작업을 포 그라운드 또는 백그라운드로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="329b39a4c29ca43f574809cc765406388620adc4" translate="yes" xml:space="preserve">
          <source>Calling this as &lt;code&gt;ll /tmp/&lt;/code&gt; will end up running &lt;code&gt;ls -l /tmp/&lt;/code&gt;, which will list the contents of /tmp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6aff63c75bb0bffcdb7bfed5216e186365ff61" translate="yes" xml:space="preserve">
          <source>Cartesian Products</source>
          <target state="translated">직교 제품</target>
        </trans-unit>
        <trans-unit id="fcb3f81706967bbcb598dd0c3292965cf75b975f" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when</source>
          <target state="translated">다음과 같은 경우 &lt;code&gt;fish&lt;/code&gt; 가 빠져 나가게합니다.</target>
        </trans-unit>
        <trans-unit id="da6418309e4149798278c2a545077667f8bdc404" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; is pressed.</source>
          <target state="translated">원인 &lt;code&gt;fish&lt;/code&gt; 때 출구 &lt;em&gt;제어&lt;/em&gt; - &lt;b&gt;D를&lt;/b&gt; 누르면됩니다.</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="c8b1d49fdfd53112a6dec6dbd017336ac207e99e" translate="yes" xml:space="preserve">
          <source>Change the value of the variable &lt;code&gt;fish_greeting&lt;/code&gt; or create a &lt;code&gt;fish_greeting&lt;/code&gt; function. For example, to remove the greeting use:</source>
          <target state="translated">변수 &lt;code&gt;fish_greeting&lt;/code&gt; 의 값을 변경 하거나 &lt;code&gt;fish_greeting&lt;/code&gt; 함수를 작성하십시오 . 예를 들어 인사말을 제거하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f3de89fbff6985c921affb37ab3ad59fbe48b95c" translate="yes" xml:space="preserve">
          <source>Change your default shell to fish with:</source>
          <target state="translated">다음을 사용하여 기본 쉘을 생선으로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="5cf7dee78ee2192a9db50762b383926cd57dfe78" translate="yes" xml:space="preserve">
          <source>Change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ccc8e5afbb6617c107acbf3edf4c8bba5e695e" translate="yes" xml:space="preserve">
          <source>Change your default shell with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122ab61fb2390b34bf8bb07c44168363d5d992db" translate="yes" xml:space="preserve">
          <source>Character classes, some of the more important:</source>
          <target state="translated">캐릭터 클래스, 더 중요한 것 :</target>
        </trans-unit>
        <trans-unit id="837815e7e725405b61d99f890160135ef054c4ec" translate="yes" xml:space="preserve">
          <source>Colors used with &lt;code&gt;showcolorhints&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;showcolorhints&lt;/code&gt; 와 함께 사용되는 색상 :</target>
        </trans-unit>
        <trans-unit id="1aafc3262722e98fb6adb1e17c5cec1e303396d2" translate="yes" xml:space="preserve">
          <source>Combiners (And, Or, Not)</source>
          <target state="translated">결합기 (And, Or, Not)</target>
        </trans-unit>
        <trans-unit id="b6709a8adcdc85a8bf2a1db551231443bd8370ba" translate="yes" xml:space="preserve">
          <source>Combining different expansions</source>
          <target state="translated">다른 확장을 결합</target>
        </trans-unit>
        <trans-unit id="c3a7f8983f08bac31de202a0e80b371926256ff1" translate="yes" xml:space="preserve">
          <source>Combining lists (Cartesian Product)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9625ac94507491a715e0ffe2602f1661a6b23708" translate="yes" xml:space="preserve">
          <source>Command Substitutions</source>
          <target state="translated">명령 대체</target>
        </trans-unit>
        <trans-unit id="83637571c7cadd0f3ed544a2316197ea7b780571" translate="yes" xml:space="preserve">
          <source>Command line editor</source>
          <target state="translated">명령 줄 편집기</target>
        </trans-unit>
        <trans-unit id="0bb0bf3bb5581e18abbaa7de52785c4cc0e3a748" translate="yes" xml:space="preserve">
          <source>Command mode</source>
          <target state="translated">명령 모드</target>
        </trans-unit>
        <trans-unit id="a2bd119306b51a92961511ebb58609c5dd727601" translate="yes" xml:space="preserve">
          <source>Command mode is also known as normal mode.</source>
          <target state="translated">명령 모드는 일반 모드라고도합니다.</target>
        </trans-unit>
        <trans-unit id="f0cab561b2d1b6a50046aaac51d5900407780ea5" translate="yes" xml:space="preserve">
          <source>Command reference</source>
          <target state="translated">명령 참조</target>
        </trans-unit>
        <trans-unit id="2bbdbfd618344aa7db88dfcb6076ec5fa368eb17" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as '&lt;code&gt;-h&lt;/code&gt;', '&lt;code&gt;-help&lt;/code&gt;' or '&lt;code&gt;--help&lt;/code&gt;'. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU version of the getopt library. These styles are:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 명령 별 탭 완성 은 옵션과 인수의 개념을 기반으로합니다. 옵션은 ' &lt;code&gt;-h&lt;/code&gt; ', ' &lt;code&gt;-help&lt;/code&gt; '또는 ' &lt;code&gt;--help&lt;/code&gt; ' 와 같이 하이픈으로 시작하는 매개 변수입니다 . 인수는 하이픈으로 시작하지 않는 매개 변수입니다. Fish는 GNU 버전의 getopt 라이브러리와 동일한 스타일의 세 가지 옵션을 인식합니다. 이러한 스타일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="305df9d243137d0ee7e5e7886662ca35cd3a1c64" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;-help&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU getopt library. These styles are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030d4685e9a5967e8a6f3c21ac5fdf12f5dd2ed5" translate="yes" xml:space="preserve">
          <source>Command substitution</source>
          <target state="translated">명령 대체</target>
        </trans-unit>
        <trans-unit id="530a1cffa7ec59af0b705c2ba3cd0b438869485e" translate="yes" xml:space="preserve">
          <source>Command substitutions</source>
          <target state="translated">명령 대체</target>
        </trans-unit>
        <trans-unit id="878863dedc3f406e3a65e48d9a354f6f067ef79a" translate="yes" xml:space="preserve">
          <source>Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:</source>
          <target state="translated">명령 대체는 따옴표로 확장되지 않습니다. 대신, 따옴표를 임시로 닫고 명령 대체를 추가 한 후 다시 같은 인수로 다시 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71c192adcb09f8e5eb78adbae51c316308911f17" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; are not expected to return a space-separated list of arguments. Instead they must return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Any description provided in this way overrides a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; 에 있는 명령 대체 는 공백으로 구분 된 인수 목록을 리턴하지 않습니다. 대신 개행으로 구분 된 인수 목록을 리턴해야하며, 각 인수는 선택적으로 탭 문자 뒤에 인수 설명이있을 수 있습니다. 이러한 방식으로 제공된 설명은 &lt;code&gt;-d&lt;/code&gt; 또는 &lt;code&gt;--description&lt;/code&gt; 과 함께 제공된 설명보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="6f15bcd26685a9b5f35fff05d5697406b9d9926f" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; should return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Description given this way override a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874c75da73d00d89463a52a5b3bd6b12c296e9c3" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks ` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">명령 대체는 한 명령의 출력을 다른 명령의 인수로 사용합니다. 다른 껍질과 달리 &lt;code&gt;fish&lt;/code&gt; 는 명령 대체에 백틱을 사용하지 않습니다. 대신 괄호를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a3571f5f1d40b027e13d061d92b54680b29bb7f2" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">명령 대체는 한 명령의 출력을 다른 명령에 대한 인수로 사용합니다. 다른 셸과 달리 &lt;code&gt;fish&lt;/code&gt; 는 명령 대체에 백틱``을 사용하지 않습니다. 대신 괄호를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6142617fc62ee1c8c0e5ce873248043d9ae29fc4" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, fish does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fad1978dd0d2383a4d0467b58d1445598b7f62" translate="yes" xml:space="preserve">
          <source>Commandline tools often get various options and flags and positional arguments, and $argv would contain all of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="6e27986b922e889f25fa48d9ab585b90ad5fe736" translate="yes" xml:space="preserve">
          <source>Commands (builtins, functions and regular programs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c716505f166951624f983b8be1c9941b96ea7b" translate="yes" xml:space="preserve">
          <source>Commands and arguments are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (by pressing the return key) or a semicolon &lt;code&gt;;&lt;/code&gt;. Multiple commands can be written on the same line by separating them with semicolons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9c7a7be3e1f3bbb8b332baec1b3308eba8941c" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character ' '. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">명령과 매개 변수는 공백 문자 ''로 구분됩니다. 모든 명령은 개행 (즉, 리턴 키를 누름) 또는 세미콜론으로 끝나야합니다 &lt;code&gt;;&lt;/code&gt; '. 세미콜론으로 구분하여 같은 줄에 둘 이상의 명령을 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83546b9b7e63e4645609121c2d50d70ab2f8f27d" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">명령과 매개 변수는 공백 문자 &lt;code&gt;' '&lt;/code&gt; 로 구분됩니다 . 모든 명령은 줄 바꿈 (즉, 리턴 키를 누름) 또는 세미콜론 ' &lt;code&gt;;&lt;/code&gt; '. 세미콜론으로 구분하여 동일한 행에 둘 이상의 명령을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c09ac3482bfc9b09262d71ce2a3754d63bdebcd" translate="yes" xml:space="preserve">
          <source>Commands can be chained with semicolons.</source>
          <target state="translated">세미콜론으로 명령을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="fb795ce7c94e011a1ecc0669bc2c232894415e28" translate="yes" xml:space="preserve">
          <source>Comments can also appear after a line like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7fc896ec27369aa3d8b46ed7bef7ce121078ca5" translate="yes" xml:space="preserve">
          <source>Comparison to other tools</source>
          <target state="translated">다른 도구와 비교</target>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="translated">호환성 노트</target>
        </trans-unit>
        <trans-unit id="af799f168326079cfa5fbcb1f17396cdcd478951" translate="yes" xml:space="preserve">
          <source>Completion of commands (builtins, functions and regular programs).</source>
          <target state="translated">명령 (내장, 기능 및 일반 프로그램) 완료</target>
        </trans-unit>
        <trans-unit id="e251e522a2899f0695ad97b7e9306c9baaf077df" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;' and '&lt;code&gt;**&lt;/code&gt;'.</source>
          <target state="translated">' &lt;code&gt;*&lt;/code&gt; '및 ' &lt;code&gt;**&lt;/code&gt; ' 와 같은 와일드 카드가있는 문자열에서도 파일 이름 완성 .</target>
        </trans-unit>
        <trans-unit id="3e42585f4a363d61f824319c2d4ccdcc434dd210" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;', '&lt;code&gt;**&lt;/code&gt;' and '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">' &lt;code&gt;*&lt;/code&gt; ', ' &lt;code&gt;**&lt;/code&gt; '및 ' 와 같은 와일드 카드가 포함 된 문자열에서도 파일 이름 완성 &lt;code&gt;?&lt;/code&gt; '.</target>
        </trans-unit>
        <trans-unit id="9c40677954f135a6a56c9a9c3b9199834c1a73af" translate="yes" xml:space="preserve">
          <source>Completion of shell variable names.</source>
          <target state="translated">쉘 변수 이름 완성.</target>
        </trans-unit>
        <trans-unit id="15f1e262b91eabd8e311927699155dff284efc75" translate="yes" xml:space="preserve">
          <source>Completion of usernames for tilde expansion.</source>
          <target state="translated">물결표 확장을위한 사용자 이름 완성.</target>
        </trans-unit>
        <trans-unit id="8492522b516edbc0711ffad46d10e7abb03c888a" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manual, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">운영 체제 설명서에서 자동으로 생성되며 일반적으로 &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="5e2bb22e8c63c3bc4092f861769d982ce94a1df7" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manuals, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">일반적으로 &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 에 저장되는 운영 체제 설명서에서 자동으로 생성 된 완성 입니다.</target>
        </trans-unit>
        <trans-unit id="77d31de015d4bc8d64c24ea654ff949d735a3c85" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">명령 줄이나 구성 파일에서 완료를 정의 할 수 있지만 자동으로로드 할 수도 있습니다. Fish는 배열 변수 &lt;code&gt;$fish_complete_path&lt;/code&gt; 의 디렉토리를 자동으로 검색하며 , 정의가 완료되면 필요할 때 자동으로로드됩니다. 완료 파일에는 완료 할 명령 이름과 접미사 ' &lt;code&gt;.fish&lt;/code&gt; ' 로 구성된 파일 이름이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="e197b8e42b1affde93333b42e719ef94bc91d71d" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">완료는 명령 줄 또는 구성 파일에서 정의 할 수 있지만 자동으로로드 할 수도 있습니다. Fish는 목록 변수 &lt;code&gt;$fish_complete_path&lt;/code&gt; 의 모든 디렉토리를 자동으로 검색 하고 정의 된 모든 완료는 필요할 때 자동으로로드됩니다. 완료 파일에는 완료 할 명령의 이름과 접미사 ' &lt;code&gt;.fish&lt;/code&gt; ' 로 구성된 파일 이름이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="a855e8bb312b045ab9c60f2a7d91c8ec5c6d57c7" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix &lt;code&gt;.fish&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283dc81713d44871439c5c3d6ee0f195f29f3639" translate="yes" xml:space="preserve">
          <source>Components are added in the order they are given, and they are prepended to the path unless &lt;code&gt;--append&lt;/code&gt; is given (if $fish_user_paths is used, that means they are last in $fish_user_paths, which is itself prepended to $PATH, so they still stay ahead of the system paths).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9decbb377f6c4dd4591226893998f380a233f4f" translate="yes" xml:space="preserve">
          <source>Components are normalized by &lt;a href=&quot;realpath#cmd-realpath&quot;&gt;realpath&lt;/a&gt;. This means that trailing slashes are ignored and relative paths are made absolute (but symlinks are not resolved). If a component already exists, it is not added again and stays in the same place unless the &lt;code&gt;--move&lt;/code&gt; switch is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7459a1dd314e140f10e2be4ec65979e72c902ac1" translate="yes" xml:space="preserve">
          <source>Conditional execution of code and flow control</source>
          <target state="translated">코드 및 흐름 제어의 조건부 실행</target>
        </trans-unit>
        <trans-unit id="0d5f4aeff7e3312bef6ba63f6a5b4ba1f78a94cb" translate="yes" xml:space="preserve">
          <source>Conditionals (If, Else, Switch)</source>
          <target state="translated">조건부 (If, Else, Switch)</target>
        </trans-unit>
        <trans-unit id="5506eb6161a07356d96e91770d25d5a0f22200ef" translate="yes" xml:space="preserve">
          <source>Conditions</source>
          <target state="translated">Conditions</target>
        </trans-unit>
        <trans-unit id="719fae22a2cd4fb971f775638bdd50f6e63161da" translate="yes" xml:space="preserve">
          <source>Configurable greeting</source>
          <target state="translated">구성 가능한 인사말</target>
        </trans-unit>
        <trans-unit id="f0b58e3b2ee0b9289c02bd1984243913025c6fa6" translate="yes" xml:space="preserve">
          <source>Configuration files are evaluated in the following order:</source>
          <target state="translated">구성 파일은 다음 순서로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="f4e0d62ab20b29e8432ac06936c92f52d1fc4b42" translate="yes" xml:space="preserve">
          <source>Configuration shipped with fish, which should not be edited, in &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (usually &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (보통 &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt; ) 에서 편집하지 말아야하는 fish와 함께 제공되는 구성 .</target>
        </trans-unit>
        <trans-unit id="22ff08f353e570d20e5a6366fd00500ccc60eb5a" translate="yes" xml:space="preserve">
          <source>Configuration snippets in files ending in &lt;code&gt;.fish&lt;/code&gt;, in the directories:</source>
          <target state="translated">디렉토리 에서 &lt;code&gt;.fish&lt;/code&gt; 로 끝나는 파일의 구성 스 니펫 :</target>
        </trans-unit>
        <trans-unit id="d916ac2852cd35aba927b6e5183496dfbb68f253" translate="yes" xml:space="preserve">
          <source>Consider, that &lt;code&gt;bash&lt;/code&gt; is also a command. With &lt;code&gt;man bash&lt;/code&gt; you can see that there are two ways to do this:</source>
          <target state="translated">&lt;code&gt;bash&lt;/code&gt; 도 명령 이라는 것을 고려하십시오 . &lt;code&gt;man bash&lt;/code&gt; 를 사용하면 이를 수행하는 두 가지 방법이 있음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="0cc02a08eefa55c45a56e32d67506c46e7a700b3" translate="yes" xml:space="preserve">
          <source>Control and shift don't work simultaneously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff899dcd6f7ebd6a861299e03974633bfd5ad6eb" translate="yes" xml:space="preserve">
          <source>Control+A</source>
          <target state="translated">Control+A</target>
        </trans-unit>
        <trans-unit id="c9e55fac4bb2f73b8827737eba3f6fedb7f63ad3" translate="yes" xml:space="preserve">
          <source>Control+B</source>
          <target state="translated">Control+B</target>
        </trans-unit>
        <trans-unit id="e1e40212e505bb255ad247fb75a7c69252c1147c" translate="yes" xml:space="preserve">
          <source>Control+C</source>
          <target state="translated">Control+C</target>
        </trans-unit>
        <trans-unit id="7fad1011a56dea667e4e890b0f054b35b096ceac" translate="yes" xml:space="preserve">
          <source>Control+D</source>
          <target state="translated">Control+D</target>
        </trans-unit>
        <trans-unit id="8a337ce2c51c129c9e8bc692ea6dd78eba4574de" translate="yes" xml:space="preserve">
          <source>Control+E</source>
          <target state="translated">Control+E</target>
        </trans-unit>
        <trans-unit id="19d71b4677f714637e6947b67f44a1239e3ad114" translate="yes" xml:space="preserve">
          <source>Control+F</source>
          <target state="translated">Control+F</target>
        </trans-unit>
        <trans-unit id="de4ae039698d198c307859fcbedac2883a1d1f6c" translate="yes" xml:space="preserve">
          <source>Control+K</source>
          <target state="translated">Control+K</target>
        </trans-unit>
        <trans-unit id="b263435b368ba4e5650bd91db945e54b75f37e4b" translate="yes" xml:space="preserve">
          <source>Control+L</source>
          <target state="translated">Control+L</target>
        </trans-unit>
        <trans-unit id="d930468655a2e8de99ecf073632706dc9fd790c0" translate="yes" xml:space="preserve">
          <source>Control+N</source>
          <target state="translated">Control+N</target>
        </trans-unit>
        <trans-unit id="6f5e6052e453bf4cbc730651ad83bd4c9bf16d04" translate="yes" xml:space="preserve">
          <source>Control+P</source>
          <target state="translated">Control+P</target>
        </trans-unit>
        <trans-unit id="5d54970f5eafb4a1a71ec49ea17c31b605d918b7" translate="yes" xml:space="preserve">
          <source>Control+U</source>
          <target state="translated">Control+U</target>
        </trans-unit>
        <trans-unit id="f5ce6985615ea22bf239b5f5712adbd6c7392c11" translate="yes" xml:space="preserve">
          <source>Control+V</source>
          <target state="translated">Control+V</target>
        </trans-unit>
        <trans-unit id="1c73dbe8cbdd8b0d4324b844077a83d8b67ad535" translate="yes" xml:space="preserve">
          <source>Control+W</source>
          <target state="translated">Control+W</target>
        </trans-unit>
        <trans-unit id="c312ad573f898197b4f8b8123f1e8f824522fab2" translate="yes" xml:space="preserve">
          <source>Control+X</source>
          <target state="translated">Control+X</target>
        </trans-unit>
        <trans-unit id="232d7346f91b802a342b5f2452c2d1f067dcf48a" translate="yes" xml:space="preserve">
          <source>Control+Y</source>
          <target state="translated">Control+Y</target>
        </trans-unit>
        <trans-unit id="723f6bbc308bdf50335b19533e6f0eef28ea6810" translate="yes" xml:space="preserve">
          <source>Control+Z</source>
          <target state="translated">Control+Z</target>
        </trans-unit>
        <trans-unit id="6e141812a128e9ade7d8324a0d80b50782c0a03d" translate="yes" xml:space="preserve">
          <source>Control+t</source>
          <target state="translated">Control+t</target>
        </trans-unit>
        <trans-unit id="a15e8d4f58e7f1095da1dbbfdaef24ce49ca88bd" translate="yes" xml:space="preserve">
          <source>Conversion can fail, e.g. &quot;102.234&quot; can't losslessly convert to an integer, causing printf to print an error. If you are okay with losing information, silence errors with &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cc27f9da6f6edecf17e1636fab048c5c38faaf" translate="yes" xml:space="preserve">
          <source>Copy and paste (Kill Ring)</source>
          <target state="translated">복사하여 붙여 넣기 (킬 링)</target>
        </trans-unit>
        <trans-unit id="af4e866be52de67a1c27087ff82b1fd31d26bf20" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the</source>
          <target state="translated">Copy and paste from outside are also supported, both via the</target>
        </trans-unit>
        <trans-unit id="26f56d23fbcc33866ced8719ced9441dcfe31145" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; bindings and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;. When pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt; 바인딩과 터미널의 붙여 넣기 기능을 통해 외부에서 복사 및 붙여 넣기가 지원되며, 물고기가 &quot;브래킷 붙여 넣기 모드&quot;를 활성화합니다. 작은 따옴표 안에 붙여 넣을 때 붙여 넣은 작은 따옴표와 백 슬래시는 자동으로 이스케이프되므로 나중에 따옴표를 닫아 결과를 단일 토큰으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f7dd81f0f257215aaa86927e90c28289f61b85c" translate="yes" xml:space="preserve">
          <source>Copying a function using &lt;code&gt;-c&lt;/code&gt; copies only the body of the function, and does not attach any event notifications from the original function.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 를 사용하여 함수를 복사하면 함수 의 본문 만 복사되고 원래 함수의 이벤트 알림은 첨부되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8af724f142e3bcf63776dbe6537c41e40e58d534" translate="yes" xml:space="preserve">
          <source>Curly braces can be used to write comma-separated lists. They will be expanded with each element becoming a new parameter, with the surrounding string attached. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb539e2cde83f162d3671d028d8f300a026106c8" translate="yes" xml:space="preserve">
          <source>Custom bindings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31494e39f0bc5dcc83282298e8d3d31f1b25880" translate="yes" xml:space="preserve">
          <source>Customizing the name of the history file</source>
          <target state="translated">히스토리 파일 이름 사용자 정의</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="db41123e84c0902793147f63b13aabdfd4079b62" translate="yes" xml:space="preserve">
          <source>Debug messages output to stderr by default. Note that if &lt;code&gt;fish_trace&lt;/code&gt; is set, execution tracing also outputs to stderr by default. You can output to a file using the &lt;code&gt;--debug-output&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="362f967d51916d26cb3fb3386fd62a1f41da8b5f" translate="yes" xml:space="preserve">
          <source>Debugging fish scripts</source>
          <target state="translated">피쉬 스크립트 디버깅</target>
        </trans-unit>
        <trans-unit id="315274f3206d01a86dd78cefa7038f1b4d10af82" translate="yes" xml:space="preserve">
          <source>Default Shell</source>
          <target state="translated">Default Shell</target>
        </trans-unit>
        <trans-unit id="0d9b8d3822abc3f61828cee574cfdd15ad494e6d" translate="yes" xml:space="preserve">
          <source>Define a single option spec for the boolean help flag:</source>
          <target state="translated">부울 도움말 플래그에 대한 단일 옵션 스펙을 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="e80de1e5ae488060e2716016f7f8aabdda0492f6" translate="yes" xml:space="preserve">
          <source>Defining aliases</source>
          <target state="translated">별칭 정의</target>
        </trans-unit>
        <trans-unit id="a248cf76417fc663be9470cb1f177b04a90df2b1" translate="yes" xml:space="preserve">
          <source>Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you'll only want to use the global scope when defining abbreviations in a startup script like &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; like this:</source>
          <target state="translated">전역 범위로 약어를 정의하는 것이 기본 범위 인 범용 범위보다 약간 빠릅니다. 그러나 일반적으로 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 와 같은 시작 스크립트에서 약어를 정의 할 때 전역 범위 만 사용하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="59b035367211a9382930b2a4c13637dbc33c4f32" translate="yes" xml:space="preserve">
          <source>Design</source>
          <target state="translated">Design</target>
        </trans-unit>
        <trans-unit id="866bd39fb03e1e2606544d3942b36910500aff65" translate="yes" xml:space="preserve">
          <source>Detect support for italics, dim, reverse and other modes.</source>
          <target state="translated">Detect support for italics, dim, reverse and other modes.</target>
        </trans-unit>
        <trans-unit id="8d1bc9b98791a1beb71b16bbdb2e8e4cbe2fd1c7" translate="yes" xml:space="preserve">
          <source>Detected errors include:</source>
          <target state="translated">감지 된 오류는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="482b5faaf6627c970511f89ada3a0b3e4024b41b" translate="yes" xml:space="preserve">
          <source>Different widths for multiple ambiguous width characters - there is no way for fish to know which width you assign to each character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74fb557e8c3a95044774ebcdfc7cc89899fe824" translate="yes" xml:space="preserve">
          <source>Directories for other software to put their own functions. These are in the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable, in a subdirectory called &lt;code&gt;fish/vendor_functions.d&lt;/code&gt;. The default is usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6988a4d06cb28f2b88589d324d9330152ae8f40" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own completions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">Directories for third-party software vendors to ship their own completions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="aec9d653d04f24c3ef71638a5da336dde6f29983" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt;</source>
          <target state="translated">Directories for third-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d75fce19d8009441f1839be94513635b011e4443" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own functions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">Directories for third-party software vendors to ship their own functions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d2a9982635d2409c02f5b95d11ee21f5379209a" translate="yes" xml:space="preserve">
          <source>Directory history</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48664135580ccdc839fc4a742e0c82de087aaf2d" translate="yes" xml:space="preserve">
          <source>Directory stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9fcf2c0d627af5418ba7f9c21ee7f737ced69d" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">Do not append to universal variables in &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</target>
        </trans-unit>
        <trans-unit id="dee15571e38bfab40555f11f3b66434d50353195" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">&lt;a href=&quot;index#initialization&quot;&gt;config.fish의&lt;/a&gt; 범용 변수에는 추가하지 마십시오. 이러한 변수는 각각의 새 쉘 인스턴스마다 더 길어지기 때문입니다. 대신 명령 줄에서 한 번만 설정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">E.g.</target>
        </trans-unit>
        <trans-unit id="5fe4b6029ee0d921705a5109d21de883623ecfe4" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;case&lt;/code&gt; command is given one or more parameters. The first &lt;code&gt;case&lt;/code&gt; command with a parameter that matches the string specified in the switch command will be evaluated. &lt;code&gt;case&lt;/code&gt; parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.</source>
          <target state="translated">각 &lt;code&gt;case&lt;/code&gt; 명령에는 하나 이상의 매개 변수가 제공됩니다. 첫번째 &lt;code&gt;case&lt;/code&gt; 스위치 명령에서 지정한 문자열과 일치 매개 변수를 가진 명령이 평가 될 것이다. &lt;code&gt;case&lt;/code&gt; 매개 변수에는 와일드 카드가 포함될 수 있습니다. 파일 이름을 사용하여 규칙적인 와일드 카드 확장을 피하려면 이스케이프 처리하거나 따옴표로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="2376e9b5e9f26d5da46eadee722d0d85257f2173" translate="yes" xml:space="preserve">
          <source>Each OPTION_SPEC can be written in the domain specific language &lt;a href=&quot;#argparse-option-specs&quot;&gt;described below&lt;/a&gt; or created using the companion &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">각 OPTION_SPEC은 &lt;a href=&quot;#argparse-option-specs&quot;&gt;아래 설명 된&lt;/a&gt; 도메인 특정 언어로 작성되거나 동반 어 &lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 작성할 수 있습니다 . 모든 OPTION_SPEC는 argparse 플래그 뒤에 그리고 구문 분석 할 인수와 구분 되는 &lt;code&gt;--&lt;/code&gt; 앞에 나타나야합니다 .</target>
        </trans-unit>
        <trans-unit id="ff6eefef0d522918fc2f6f5c0e0cbad0e9617574" translate="yes" xml:space="preserve">
          <source>Each abbreviation is stored in its own global or universal variable. The name consists of the prefix &lt;code&gt;_fish_abbr_&lt;/code&gt; followed by the WORD after being transformed by &lt;code&gt;string escape style=var&lt;/code&gt;. The WORD cannot contain a space but all other characters are legal.</source>
          <target state="translated">각 약어는 자체 전역 또는 범용 변수에 저장됩니다. 이름은 &lt;code&gt;string escape style=var&lt;/code&gt; 로 변환 된 후 접두사 &lt;code&gt;_fish_abbr_&lt;/code&gt; 와 WORD 로 구성됩니다 . WORD에는 공백이 포함될 수 없지만 다른 모든 문자는 유효합니다.</target>
        </trans-unit>
        <trans-unit id="d74989fad97472ddc89cce17da864871ef77470f" translate="yes" xml:space="preserve">
          <source>Each option specification (&lt;code&gt;OPTION_SPEC&lt;/code&gt;) is written in the &lt;a href=&quot;#option-specifications&quot;&gt;domain specific language&lt;/a&gt; described below. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">Each option specification ( &lt;code&gt;OPTION_SPEC&lt;/code&gt; ) is written in the &lt;a href=&quot;#option-specifications&quot;&gt;domain specific language&lt;/a&gt; described below. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</target>
        </trans-unit>
        <trans-unit id="b889c20fc68e023be13868891975e0e722a60b35" translate="yes" xml:space="preserve">
          <source>Each option specification consists of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0057637534d28604b43896d07253a1705495ce04" translate="yes" xml:space="preserve">
          <source>Each option specification is a string composed of</source>
          <target state="translated">각 옵션 사양은 다음과 같이 구성된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="6f81b2ad5664bf03465a7658ea6e8325e7d4da48" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in a var name of the form &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name. The OPTION_SPEC always requires a short flag even if it can't be used. So there will always be &lt;code&gt;_flag_X&lt;/code&gt; var set using the short flag letter if the corresponding short or long flag is seen. The long flag name var (e.g., &lt;code&gt;_flag_help&lt;/code&gt;) will only be defined, obviously, if the OPTION_SPEC includes a long flag name.</source>
          <target state="translated">ARG 목록에 표시되는 각 옵션은 &lt;code&gt;_flag_X&lt;/code&gt; 형식의 var 이름을 생성합니다 . 여기서 &lt;code&gt;X&lt;/code&gt; 는 짧은 플래그 문자 및 긴 플래그 이름입니다. OPTION_SPEC에는 사용할 수없는 경우에도 항상 짧은 플래그가 필요합니다. 따라서 해당 short 또는 long 플래그가 표시되면 short 플래그 문자를 사용하여 항상 &lt;code&gt;_flag_X&lt;/code&gt; var 세트가 있습니다. 긴 플래그 이름 var (예 : &lt;code&gt;_flag_help&lt;/code&gt; )는 OPTION_SPEC에 긴 플래그 이름이 포함 된 경우에만 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="e997907e65d29076dbe60a2d558dae9423186b1d" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in variables named &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name (if they are defined). For example a &lt;code&gt;--help&lt;/code&gt; option could cause argparse to define one variable called &lt;code&gt;_flag_h&lt;/code&gt; and another called &lt;code&gt;_flag_help&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4021549f9ebbee6b0f5cef8bdf2b7b2e3f048df2" translate="yes" xml:space="preserve">
          <source>Each stream has a number called the file descriptor (FD): 0 for stdin, 1 for stdout, and 2 for stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071ccbc08889857d3dcdf38731f768b6399d8db1" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="translated">&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 파일을 편집하여 존재하지 않는 경우 파일을 작성하십시오 (선행 기간 참고).</target>
        </trans-unit>
        <trans-unit id="8e616be3dc7c9321e6c185eefc4e5da9e20b8fc2" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f792ffbea95a6ff2321be7a5cc814288648907" translate="yes" xml:space="preserve">
          <source>Emacs mode commands</source>
          <target state="translated">이맥스 모드 명령</target>
        </trans-unit>
        <trans-unit id="e37e0760e90e51eeb2c376daa6dc4d1540039d7b" translate="yes" xml:space="preserve">
          <source>Enable 24-bit (&quot;true-color&quot;) even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE-based terminals like Gnome Terminal, Konsole and iTerm2.</source>
          <target state="translated">Enable 24-bit (&quot;true-color&quot;) even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE-based terminals like Gnome Terminal, Konsole and iTerm2.</target>
        </trans-unit>
        <trans-unit id="f2e2f09ac368b8dd74db605df791dbefe19bfe80" translate="yes" xml:space="preserve">
          <source>Enable 256 colors if $TERM contains &quot;xterm&quot;, except for known exceptions (like MacOS 10.6 Terminal.app)</source>
          <target state="translated">Enable 256 colors if $TERM contains &quot;xterm&quot;, except for known exceptions (like MacOS 10.6 Terminal.app)</target>
        </trans-unit>
        <trans-unit id="a2bb9d34b8a1a79665858d354585cf147e0dee4e" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">End</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="ec051ec1637eae870268ca59dd86fdb39e8d550c" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;exit&lt;/code&gt; to exit a fish shell:</source>
          <target state="translated">Enter &lt;code&gt;exit&lt;/code&gt; to exit a fish shell:</target>
        </trans-unit>
        <trans-unit id="7c9220e6e7b88faa6f56901c8353dec4b3544958" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;fish&lt;/code&gt; to start a fish shell:</source>
          <target state="translated">Enter &lt;code&gt;fish&lt;/code&gt; to start a fish shell:</target>
        </trans-unit>
        <trans-unit id="91cbf01f5e4c3a57e74bdd072bfdd05853b57d91" translate="yes" xml:space="preserve">
          <source>Environment variables such as &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;TZ&lt;/code&gt; can be set universally using &lt;code&gt;set -Ux&lt;/code&gt;. However, if there is an environment variable already set before fish starts (such as by login scripts or system administrators), it is imported into fish as a global variable. The &lt;a href=&quot;index#variables-scope&quot;&gt;variable scopes&lt;/a&gt; are searched from the &quot;inside out&quot;, which means that local variables are checked first, followed by global variables, and finally universal variables.</source>
          <target state="translated">&lt;code&gt;EDITOR&lt;/code&gt; 또는 &lt;code&gt;TZ&lt;/code&gt; 와 같은 환경 변수 는 &lt;code&gt;set -Ux&lt;/code&gt; 를 사용하여 보편적으로 설정할 수 있습니다 . 그러나 물고기를 시작하기 전에 이미 설정 한 환경 변수가있는 경우 (예 : 로그인 스크립트 또는 시스템 관리자 등) 전역 변수로 물고기로 가져옵니다. &lt;a href=&quot;index#variables-scope&quot;&gt;변수 범위는&lt;/a&gt; 글로벌 변수, 마지막 변수 보편적이어서, 로컬 변수들이 먼저 선택되었는지 수단 &quot;뒤집어&quot;에서 검색한다.</target>
        </trans-unit>
        <trans-unit id="91fe509047635fbdbcb723577a02003cc2cfa678" translate="yes" xml:space="preserve">
          <source>Erase the &lt;code&gt;gco&lt;/code&gt; abbreviation.</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; 약어를 삭제하십시오 .</target>
        </trans-unit>
        <trans-unit id="ff52c78ae7ffcce10c7f75782c08e760a3858c53" translate="yes" xml:space="preserve">
          <source>Errors and Return Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="translated">이스케이프 시퀀스</target>
        </trans-unit>
        <trans-unit id="5ac5583d5304bf1f408cc93a0ac0fc2d52da7d9c" translate="yes" xml:space="preserve">
          <source>Escaping Characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b19a8ca89a3f1d945ac43f31bfc30845d9b033" translate="yes" xml:space="preserve">
          <source>Escaping characters</source>
          <target state="translated">이스케이프 문자</target>
        </trans-unit>
        <trans-unit id="b5df4081fbed4b9e32929d5db8ab7dee3db26c47" translate="yes" xml:space="preserve">
          <source>Especially powerful is the recursive wildcard ** which searches directories recursively:</source>
          <target state="translated">디렉토리를 재귀 적으로 검색하는 재귀 와일드 카드 **가 특히 강력합니다.</target>
        </trans-unit>
        <trans-unit id="23467b26d86b98db62af718c7193952aae1cc1d7" translate="yes" xml:space="preserve">
          <source>Event blocks should not be confused with code blocks, which are created with &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">이벤트 블록을 코드 블록과 혼동해서는 안됩니다. 코드 블록은 &lt;code&gt;begin&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; 또는 &lt;code&gt;for&lt;/code&gt; 로 생성됩니다</target>
        </trans-unit>
        <trans-unit id="1d0a0bc46dabda5a6dbcf0a2f18e3e9acbc27ae7" translate="yes" xml:space="preserve">
          <source>Event handlers</source>
          <target state="translated">이벤트 핸들러</target>
        </trans-unit>
        <trans-unit id="f4b281b637c899622427e67191026015a7018908" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;, you can just use the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt; . If the program file is located in one of the directories in the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;, you can just use the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt; ) has to be used.</target>
        </trans-unit>
        <trans-unit id="aa9019553b784d6ddae2179d0e63e658c8aaa8e2" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#variables-special&quot;&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;, it is sufficient to type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">컴퓨터의 모든 프로그램은 &lt;code&gt;fish&lt;/code&gt; 명령으로 사용할 수 있습니다 . 프로그램 파일이 &lt;a href=&quot;#variables-special&quot;&gt; &lt;code&gt;PATH&lt;/code&gt; &lt;/a&gt; 의 디렉토리 중 하나에있는 경우 , 사용하기 위해 프로그램 이름을 입력하면 충분합니다. 그렇지 않으면 디렉토리를 포함한 전체 파일 이름 (예 : &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; 또는 &lt;code&gt;../checkers&lt;/code&gt; )을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="ca694a88f2f320884bc7af703160d9d5522d343e" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in fish. If the program file is located in one of the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt; directories, you can just type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="0a06b9ff910c3b825724cca9441830ef76df9a35" translate="yes" xml:space="preserve">
          <source>Example OPTION_SPECs</source>
          <target state="translated">예 OPTION_SPEC</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="39080033040f19165a1f736af78b4c8c529fc254" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) of the target program to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; 상기 대상 프로그램의 표준 오차 (파일 기술자 2) 글 &lt;code&gt;output.stderr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45afd0568e44bc9d77a4c3ab231be29073066140" translate="yes" xml:space="preserve">
          <source>Example: to make errors highlighted and red, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8770639e419bc5c21b3a05bddb1461adbeb1b131" translate="yes" xml:space="preserve">
          <source>Example: to set the background of each pager row, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c8110d9d9732f81a1889221cf14a72d9940e55f1" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is</source>
          <target state="translated">예 : 기본 &lt;code&gt;fish&lt;/code&gt; 제목은</target>
        </trans-unit>
        <trans-unit id="c5e62bdf9f1ee420f1e3180e55a6897fe87ce1fa" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is:</source>
          <target state="translated">Examples: The default &lt;code&gt;fish&lt;/code&gt; title is:</target>
        </trans-unit>
        <trans-unit id="a0211625a1607d6cd68d7625617e001d28ef4c84" translate="yes" xml:space="preserve">
          <source>Examples: The default fish title is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdd412ed55970d8c42f39658c01cd285bb57d07" translate="yes" xml:space="preserve">
          <source>Executing Bash</source>
          <target state="translated">Executing Bash</target>
        </trans-unit>
        <trans-unit id="6f147bbcdc2ea57f6c81bec669ec536b253dc54b" translate="yes" xml:space="preserve">
          <source>Exit Status</source>
          <target state="translated">종료 상태</target>
        </trans-unit>
        <trans-unit id="105ec316e78b2e21f4200658aebb690c6bfce1c8" translate="yes" xml:space="preserve">
          <source>Exit status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1065b589e5e0ae74c7584c46d689bcbb003ff11c" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one match was found, or 1 otherwise.</source>
          <target state="translated">종료 상태 : 일치하는 항목이 하나 이상 있으면 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="b2909c6aa462276dc2976f4590aa354f4c57270d" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one replacement was performed, or 1 otherwise.</source>
          <target state="translated">종료 상태 : 하나 이상의 교체가 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="f23237bf8e5fbb7b5a8d2f6f925a293f6614802a" translate="yes" xml:space="preserve">
          <source>Exit the shell when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40c28bc81b3ac548eb788aebd329d84f2e392e8" translate="yes" xml:space="preserve">
          <source>Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.</source>
          <target state="translated">확장은 오른쪽에서 왼쪽으로 수행되고 중첩 된 브래킷 확장은 내부 및 외부에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="7c7f2508b14ff7696fb2b861af3336c89a128135" translate="yes" xml:space="preserve">
          <source>Exporting variables</source>
          <target state="translated">변수 내보내기</target>
        </trans-unit>
        <trans-unit id="0801a7e9fc76ea024d7fa1606839a9a450923131" translate="yes" xml:space="preserve">
          <source>Exports (Shell Variables)</source>
          <target state="translated">수출 (쉘 변수)</target>
        </trans-unit>
        <trans-unit id="38a8db4fbe3933a6a062a148af12ac9a1f3f9209" translate="yes" xml:space="preserve">
          <source>Expressions can be grouped using parentheses.</source>
          <target state="translated">괄호를 사용하여 표현식을 그룹화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50167d66b3a9cf84672e9543b5e003cb2f61fc18" translate="yes" xml:space="preserve">
          <source>Expressions can be inverted using the &lt;code&gt;!&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; 를 사용하여 식을 반전시킬 수 있습니다 . 운영자:</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="88bfad9cfffeafd299a44d4daf979d57419a2621" translate="yes" xml:space="preserve">
          <source>F1</source>
          <target state="translated">F1</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="3c018849599639ed880ecf71dd0372a59354f058" translate="yes" xml:space="preserve">
          <source>Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt-in, in a few releases they become opt-out, and eventually the old behavior is removed.</source>
          <target state="translated">기능 플래그는 스크립트를 손상시킬 수있는 어류 단계 변경 방법입니다. 주요 변경 사항은 옵트 인 (opt-in)으로 도입되고, 일부 릴리스에서는 옵트 아웃 (opt-out)되고 결국 이전 동작이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="91eda957829d54470152a860d403a0c2ec63f6ad" translate="yes" xml:space="preserve">
          <source>Features will only be set on startup, so this variable will only take effect if it is universal or exported.</source>
          <target state="translated">Features will only be set on startup, so this variable will only take effect if it is universal or exported.</target>
        </trans-unit>
        <trans-unit id="6f3b1d58c2c3684624549238c3096df48948b49f" translate="yes" xml:space="preserve">
          <source>File names beginning with a dot are not considered when wildcarding unless a dot is specifically given as the first character of the file name.</source>
          <target state="translated">점이 파일 이름의 첫 문자로 특별히 지정되지 않으면 와일드 카드를 사용할 때 점으로 시작하는 파일 이름은 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="63d32dc2be5e5b0e93902df6ada5b09685606563" translate="yes" xml:space="preserve">
          <source>Filenames, even on strings with wildcards such as &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0ad57826714745555d33e260f6c852d7a62f1f" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt;, which can be used to change the order the status symbols appear in. It defaults to &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt;.</source>
          <target state="translated">Finally, &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt; , which can be used to change the order the status symbols appear in. It defaults to &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3030e8ec7633ec1a524bb246aee7dbda6fb3e4bc" translate="yes" xml:space="preserve">
          <source>Fish</source>
          <target state="translated">Fish</target>
        </trans-unit>
        <trans-unit id="5909556c20378f696dc6b5d2bbc3049c7584a774" translate="yes" xml:space="preserve">
          <source>Fish 1.x and 2.x releases relied on the &lt;code&gt;bc&lt;/code&gt; command for handling &lt;code&gt;math&lt;/code&gt; expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.</source>
          <target state="translated">Fish 1.x 및 2.x 릴리스는 &lt;code&gt;math&lt;/code&gt; 표현식 처리를 위해 &lt;code&gt;bc&lt;/code&gt; 명령을 사용했습니다 . fish 3.0.0부터 fish는 tinyexpr 라이브러리를 사용하고 외부 명령을 사용하지 않고 표현을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="d4a3ceecfb0465a0d21d2606941b69ac151cca20" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the -a switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 는 -a 스위치를 사용하여 모든 값을보고하는 것을 제외하고 한 명령에서 여러 한계를 가져 오거나 설정하는 것을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e6c6518383d134aea4779743a6d5eae0eb949f57" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the &lt;code&gt;-a&lt;/code&gt; switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the &lt;code&gt;-a&lt;/code&gt; switch</target>
        </trans-unit>
        <trans-unit id="e7c76c63bac2f3a3dce3482676369a7bd163b6c4" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support the &lt;code&gt;-p&lt;/code&gt; option for getting the pipe size. The bash implementation consists of a compile-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 는 파이프 크기를 얻기 위해 &lt;code&gt;-p&lt;/code&gt; 옵션을 지원하지 않습니다 . bash 구현은 파이프에 쓰고 SIGPIPE를 기다리면서이 숫자를 경험적으로 추측하는 컴파일 타임 검사로 구성됩니다. 물고기는 파이프 크기를 결정하는이 방법이 신뢰할 수 없기 때문에 이것을하지 않습니다. bash 버전에 따라 bash에 설정해야 할 추가 제한이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78c7f05d7bd695376d2e5d1faac7303134fd849d" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; supports GNU-style long options for all switches</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 는 모든 스위치에 대해 GNU 스타일의 긴 옵션을 지원합니다</target>
        </trans-unit>
        <trans-unit id="dd62e7bf2c72d7767d7af909be8af4efa9d56381" translate="yes" xml:space="preserve">
          <source>Fish also has man pages for its commands, and translates the help pages to man pages. For example, &lt;code&gt;man set&lt;/code&gt; will show the documentation for &lt;code&gt;set&lt;/code&gt; as a man page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4f0935c1ca660f68579120131a23c1b6b545dd" translate="yes" xml:space="preserve">
          <source>Fish also provides additional information through the values of certain environment variables. Most of these variables are read-only and their value can't be changed with &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7af48505888290815037487d5b7785010a5982" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">내장의 래퍼 기능도 배를 물고기 &lt;code&gt;cd&lt;/code&gt; 이해 &lt;code&gt;cd -&lt;/code&gt; 이전 디렉토리로 변경한다. &lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 . 이 랩퍼 함수는 &lt;code&gt;$dirprev&lt;/code&gt; 및 &lt;code&gt;$dirnext&lt;/code&gt; 전역 변수 에서 가장 최근에 방문한 25 개의 디렉토리 히스토리를 유지 합니다. 이러한 범용 변수를 만들면 모든 기록에서 &lt;code&gt;cd&lt;/code&gt; 기록이 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="12b0ee984ffaac831e52ed6b850d4b525b13beed" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</target>
        </trans-unit>
        <trans-unit id="d708ac7f75ef4aed9f294c38306635239b6e0016" translate="yes" xml:space="preserve">
          <source>Fish also uses some variables internally, their name usually starting with &lt;code&gt;__fish&lt;/code&gt;. These are internal and should not typically be modified directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1810b6253f7da17afb43c730d2dea89558ba5d" translate="yes" xml:space="preserve">
          <source>Fish automatically creates lists from all environment variables whose name ends in PATH (like $PATH, $CDPATH or $MANPATH), by splitting them on colons. Other variables are not automatically split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2158f1f30f53a03dcaff373de0fa264fdeee9983" translate="yes" xml:space="preserve">
          <source>Fish automatically keeps a trail of the recent visited directories with &lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;cd&lt;/a&gt; by storing this history in the &lt;code&gt;dirprev&lt;/code&gt; and &lt;code&gt;dirnext&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7b1872333b58f5f95b5e7bec0c0e9e258507d3" translate="yes" xml:space="preserve">
          <source>Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_function_path&lt;/code&gt;, and any functions defined are automatically loaded when needed. A function definition file must have a filename consisting of the name of the function plus the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">Fish는 배열 변수 &lt;code&gt;$fish_function_path&lt;/code&gt; 의 디렉토리를 자동으로 검색하며 , 정의 된 함수는 필요할 때 자동으로로드됩니다. 함수 정의 파일에는 함수 이름과 접미사 ' &lt;code&gt;.fish&lt;/code&gt; ' 로 구성된 파일 이름이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="14acc6521b8498718555129c48f9cc0520e674d9" translate="yes" xml:space="preserve">
          <source>Fish can store a list (or an &quot;array&quot; if you wish) of multiple strings inside of a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a11880aac72a771f284563ca821b5ab539ac0d0" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;$((i+1))&lt;/code&gt; arithmetic expansion, computation is handled by &lt;a href=&quot;cmds/math#cmd-math&quot;&gt;math&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34eaa963aa4c594bb96d5142cd9391d2aff32e3f" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;$PS2&lt;/code&gt; for continuation lines, instead it leaves the lines indented to show that the commandline isn't complete yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af408a104a7bf773c3973df28295c5c6c6112974" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;${foo%bar}&lt;/code&gt;, &lt;code&gt;${foo#bar}&lt;/code&gt; and &lt;code&gt;${foo/bar/baz}&lt;/code&gt;. Instead string manipulation is done by the &lt;a href=&quot;cmds/string#cmd-string&quot;&gt;string&lt;/a&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3969d49f21ae83cda0789d6465ee8e0a7ad2fdf" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; &quot;heredocs&quot;. Instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec9ec1c8e1eb15698a215b050efbec2fa7deeaf" translate="yes" xml:space="preserve">
          <source>Fish does not have an &lt;code&gt;until&lt;/code&gt;. Use &lt;code&gt;while not&lt;/code&gt; or &lt;code&gt;while !&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d24bd87151694d0ca50963aa385dd8ca9d5aac" translate="yes" xml:space="preserve">
          <source>Fish does not perform word splitting. Once a variable has been set to a value, that value stays as it is, so double-quoting variable expansions isn't the necessity it is in bash. &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e371bf2587cc0aa603186467640ee09a27cfc578" translate="yes" xml:space="preserve">
          <source>Fish does not use the &lt;code&gt;$PS1&lt;/code&gt;, &lt;code&gt;$PS2&lt;/code&gt; and so on variables. Instead the prompt is the output of the &lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; function, plus the &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; function if vi-mode is enabled and the &lt;a href=&quot;cmds/fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt; function for the right prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bfab662c91b6d4613873ccccc4860ce50cab34" translate="yes" xml:space="preserve">
          <source>Fish for bash users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac9f111aab6f00958aa0e5a149d28e81b9201eb" translate="yes" xml:space="preserve">
          <source>Fish has a POSIX-compatible &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;[&lt;/code&gt; builtin. There is no &lt;code&gt;[[&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; does not accept &lt;code&gt;==&lt;/code&gt; as a synonym for &lt;code&gt;=&lt;/code&gt;. It can compare floating point numbers, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea3d198c56b137efabf4e3b3479e7ecb043e65b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 10 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">피쉬는 명령 대체가 출력 할 수있는 데이터 양에 대해 기본 제한이 10MiB입니다. 한계가 대체뿐만 아니라 전체 명령을 초과하면 실패하고 &lt;code&gt;$status&lt;/code&gt; 는 122로 설정 됩니다. 물고기가 시작되기 전에 환경을 포함하여 언제든지 &lt;code&gt;fish_read_limit&lt;/code&gt; 변수를 설정하여 한계를 수정할 수 있습니다 . 0으로 설정하면 제한이 없습니다. 이것은 명령이 부당한 양의 데이터를 출력하는 경우 쉘이 너무 많은 메모리를 소비하지 않도록하는 안전 메커니즘입니다. 이 제한은 또한 &lt;code&gt;read&lt;/code&gt; 명령이 처리 할 데이터의 양에도 영향을 미칩니다 .</target>
        </trans-unit>
        <trans-unit id="54736c0f7b81ae71b6647b4c6a7582c080363c9c" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data, typically your operating system also has a limit, and it's often much lower. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">Fish has a default limit of 100 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data, typically your operating system also has a limit, and it's often much lower. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</target>
        </trans-unit>
        <trans-unit id="96fcf2748c6c7ec3c56f884af7b7a4a880c76a0b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the data it will read in a command sustitution. If that limit is reached the command (all of it, not just the command substitution - the outer command won't be executed at all) fails and &lt;code&gt;$status&lt;/code&gt; is set to 122. This is so command substitutions can't cause the system to go out of memory, because typically your operating system has a much lower limit, so reading more than that would be useless and harmful. This limit can be adjusted with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable (&lt;code&gt;0&lt;/code&gt; meaning no limit). This limit also affects the &lt;a href=&quot;cmds/read#cmd-read&quot;&gt;read&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92465782e7d433b454835166d572d7b25eed9c05" translate="yes" xml:space="preserve">
          <source>Fish has an extensive help system. Use the &lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480cd3ddb5d2b4cf914df3f7d9030b1d93daeba1" translate="yes" xml:space="preserve">
          <source>Fish has excellent help and man pages. Run &lt;code&gt;help&lt;/code&gt; to open help in a web browser, and &lt;code&gt;man&lt;/code&gt; to open it in a man page. You can also ask for help with a specific command, for example, &lt;code&gt;help set&lt;/code&gt; to open in a web browser, or &lt;code&gt;man set&lt;/code&gt; to see it in the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3498e43826faa1f1235c392cbeb3a373eae6c988" translate="yes" xml:space="preserve">
          <source>Fish has some builtins that let you execute commands only if a specific criterion is met: &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;, &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt;, &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;and&lt;/a&gt; and &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;or&lt;/a&gt;, and also the familiar &lt;a href=&quot;tutorial#tut-combiners&quot;&gt;&amp;amp;&amp;amp;/||&lt;/a&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48afbfed372bf23a743b82ed8ed7dc65e521110" translate="yes" xml:space="preserve">
          <source>Fish has two quoting styles: &lt;code&gt;&quot;&quot;&lt;/code&gt; and &lt;code&gt;''&lt;/code&gt;. Variables are expanded in double-quotes, nothing is expanded in single-quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e69e47a187b17aecb51ad4dc34104e0787069fe" translate="yes" xml:space="preserve">
          <source>Fish history recall is very simple yet effective:</source>
          <target state="translated">물고기 이력 회상은 매우 간단하지만 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="386c69dec203efd3304dc1ee54bc1e55a151b084" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;a href=&quot;cmds/printf#cmd-printf&quot;&gt;printf&lt;/a&gt; and &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;. As another example, you can run &lt;a href=&quot;cmds/status#cmd-status&quot;&gt;status print-stack-trace&lt;/a&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;a href=&quot;cmds/exit#cmd-exit&quot;&gt;exit&lt;/a&gt; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcb6e0e99c1d29dcec8762593402a5b7fe687c4" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;. As another example, you can run &lt;code&gt;status print-stack-trace&lt;/code&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;code&gt;exit&lt;/code&gt; or [ctrl-D].</source>
          <target state="translated">Fish에는 내장 된 디버깅 기능이 포함되어 있습니다. 디버거를 사용하면 임의의 시점에서 스크립트 실행을 중지 할 수 있습니다. 이 경우 대화식 프롬프트가 표시됩니다. 이 프롬프트에서 모든 피쉬 명령을 실행할 수 있습니다 (디버그 명령은 없습니다). 예를 들어, &lt;code&gt;printf&lt;/code&gt; 및 &lt;code&gt;set&lt;/code&gt; 을 사용하여 변수 값을 확인하거나 변경할 수 있습니다 . 다른 예로, &lt;code&gt;status print-stack-trace&lt;/code&gt; 를 실행 하여이 중단 점에 도달 한 방법을 확인할 수 있습니다. 스크립트의 정상적인 실행을 재개하려면 &lt;code&gt;exit&lt;/code&gt; 또는 [ctrl-D]를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="c79ad61efadd871e671682ebb2b3cfdcaa4e03d8" translate="yes" xml:space="preserve">
          <source>Fish includes a number of commands in the shell directly. We call these &quot;builtins&quot;. These include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e21bd33e2135df6af48b4d34c944ac0b41c9111" translate="yes" xml:space="preserve">
          <source>Fish interprets the command line as it is typed and uses syntax highlighting to provide feedback. The most important feedback is the detection of potential errors. By default, errors are marked red.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dccb47038b031ed2f8ee7e5ab4c502f7e2ab8e" translate="yes" xml:space="preserve">
          <source>Fish is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. Fish supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9861432c24cc69aa9bbe8d00780f47c35cceca6" translate="yes" xml:space="preserve">
          <source>Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn't support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.</source>
          <target state="translated">Fish가 터미널의 제목 표시 줄 메시지를 설정하려고합니다. 화면 자체는이 기능을 지원하지만 터미널은 지원하지 않습니다. 불행히도, 기본 터미널이 제목 표시 줄 설정을 지원하지 않는 경우, 화면은 단순히 이스케이프 코드와 텍스트를 무시하지 않고 기본 터미널로 전달합니다. 물고기는 기본 터미널 유형이 무엇인지 알 방법이 없기 때문에 물고기 내부에서이 문제를 감지하고 해결하는 것은 불가능합니다. 현재이 문제를 해결하는 유일한 방법은 위에서 제안한대로 제목 표시 줄 메시지를 설정 해제하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="544b7dbf162f628eb35bbf3928f5320adff77942" translate="yes" xml:space="preserve">
          <source>Fish offers helper functions for adding things to the prompt, like &lt;a href=&quot;cmds/fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt; for adding a display for common version control systems (git, mercurial, svn) and &lt;a href=&quot;cmds/prompt_pwd#cmd-prompt-pwd&quot;&gt;prompt_pwd&lt;/a&gt; for showing a shortened $PWD (the user's home directory becomes &lt;code&gt;~&lt;/code&gt; and any path component is shortened).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e6a12d999aea5233bf9d1a7a5e0a296e1d2b7f" translate="yes" xml:space="preserve">
          <source>Fish only supports the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; glob (and the deprecated &lt;code&gt;?&lt;/code&gt; glob). If a glob doesn't match it fails the command (like with bash's &lt;code&gt;failglob&lt;/code&gt;) unless the command is &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; or the glob is used with an environment override (&lt;code&gt;VAR=* command&lt;/code&gt;), in which case it expands to nothing (like with bash's &lt;code&gt;nullglob&lt;/code&gt; option).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf1d8c7a431f94fa6e399e223914820c86f6dd7" translate="yes" xml:space="preserve">
          <source>Fish or your terminal might not know about the character or handle it wrong - in this case fish or your terminal needs to be fixed, or you need to update to a fixed version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48abc65b03d1fc064fb747f8eca57f5ceb3027c8" translate="yes" xml:space="preserve">
          <source>Fish prides itself on being really nice to use interactively. That's down to a few features we'll explain in the next few sections.</source>
          <target state="translated">Fish prides itself on being really nice to use interactively. That's down to a few features we'll explain in the next few sections.</target>
        </trans-unit>
        <trans-unit id="a848c7dac788ef4acd0d27d4c6b9e1143029b352" translate="yes" xml:space="preserve">
          <source>Fish provides &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; to color text. It can use the 16 named colors and also RGB sequences (so you could also use &lt;code&gt;set_color 5555FF&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5a91794bf004e1dafb18322516a8e73fc2d28e" translate="yes" xml:space="preserve">
          <source>Fish provides some general purpose completions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3524f17824fc111784e6c17c1c783f4774ba70aa" translate="yes" xml:space="preserve">
          <source>Fish reserves the &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicode private-use character range&lt;/a&gt; from U+F600 thru U+F73F for internal use. Any attempt to feed characters in that range to fish will result in them being replaced by the Unicode &quot;replacement character&quot; U+FFFD. This includes both interactive input as well as any file read by fish (but not programs run by fish).</source>
          <target state="translated">Fish 는 내부 용 U + F600부터 U + F73F까지 의 &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;유니 코드 개인용 문자 범위&lt;/a&gt; 를 예약합니다 . 해당 범위의 문자를 피쉬로 보내려고하면 유니 코드 &quot;대체 문자&quot;U + FFFD로 대체됩니다. 여기에는 대화 형 입력과 물고기가 읽는 파일이 포함됩니다 (물고기가 실행하는 프로그램은 아님).</target>
        </trans-unit>
        <trans-unit id="3ccecc562dc02936776effee162f8bf7248708e3" translate="yes" xml:space="preserve">
          <source>Fish runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f7375aec4a1c6d25c6ebf2e2810dfadfa3c68e" translate="yes" xml:space="preserve">
          <source>Fish sets and erases variables with &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; instead of &lt;code&gt;VAR=VAL&lt;/code&gt; and &lt;code&gt;declare&lt;/code&gt; and &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;. &lt;code&gt;set&lt;/code&gt; takes options to determine the scope and exportedness of a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf8ef652bc4e1c42cf4f4f13b7882971ade7681" translate="yes" xml:space="preserve">
          <source>Fish ships multiple handlers for various operating systems and chooses from them when this function is loaded, or you can define your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f9fa16272ceb2f6496c15e10a64756c22612c9" translate="yes" xml:space="preserve">
          <source>Fish ships with a &lt;code&gt;_validate_int&lt;/code&gt; function that accepts a &lt;code&gt;--min&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; flag. Let's say your command accepts a &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt;. The default if you just call &lt;code&gt;_validate_int&lt;/code&gt; without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.</source>
          <target state="translated">Fish 는 &lt;code&gt;--min&lt;/code&gt; 및 &lt;code&gt;--max&lt;/code&gt; 플래그 를 허용 하는 &lt;code&gt;_validate_int&lt;/code&gt; 함수 와 함께 제공됩니다 . 명령에 &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 플래그를 허용하고 허용되는 최소값은 0이고 최대 값은 5입니다. &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt; 옵션을 정의합니다 . 이러한 플래그없이 &lt;code&gt;_validate_int&lt;/code&gt; 를 호출 하는 경우 기본값은 허용 된 최소값 또는 최대 값에 제한이없는 유효한 정수인지 간단히 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4e44f3813fcf10547ba75c4619e5c3c9fc240a0b" translate="yes" xml:space="preserve">
          <source>Fish spells command substitutions as &lt;code&gt;(command)&lt;/code&gt; instead of &lt;code&gt;$(command)&lt;/code&gt; (or &lt;code&gt;`command`&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c158ed4288c5b9a225e67660cd944a1293223aaa" translate="yes" xml:space="preserve">
          <source>Fish starts by executing commands in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. You can create it if it does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8d10a7f6f5ff6e0088c4b12f7c811ff075340b" translate="yes" xml:space="preserve">
          <source>Fish stores the exit status of the last process in the last job to exit in the &lt;code&gt;status&lt;/code&gt; variable.</source>
          <target state="translated">Fish는 마지막 작업의 마지막 프로세스 종료 상태를 &lt;code&gt;status&lt;/code&gt; 변수 에 종료 합니다.</target>
        </trans-unit>
        <trans-unit id="8f95b058d09a46d96591ae1aaa42e6d354388a3f" translate="yes" xml:space="preserve">
          <source>Fish supports the familiar wildcard &lt;code&gt;*&lt;/code&gt;. To list all JPEG files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5414d1f83db8858d6238609a5ff3c4b99998e031" translate="yes" xml:space="preserve">
          <source>Fish takes care to set &lt;code&gt;$PATH&lt;/code&gt; to a default, but typically it is just inherited from fish's parent process and is set to a value that makes sense for the system - see &lt;a href=&quot;#tut-exports&quot;&gt;Exports&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cac64314e5cd1f9679e120b4ee08809136ee30" translate="yes" xml:space="preserve">
          <source>Fish uses a heuristic to decide if a terminal supports the 256-color palette as opposed to the more limited 16 color palette of older terminals. Support can be forced on by setting &lt;code&gt;fish_term256&lt;/code&gt; to &lt;em&gt;1&lt;/em&gt;. If &lt;code&gt;$TERM&lt;/code&gt; contains &quot;256color&quot; (e.g., &lt;em&gt;xterm-256color&lt;/em&gt;), 256-color support is enabled. If &lt;code&gt;$TERM&lt;/code&gt; contains &lt;em&gt;xterm&lt;/em&gt;, 256 color support is enabled (except for MacOS: &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; and &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; are used to detect Terminal.app from MacOS 10.6; support is disabled here it because it is known that it reports &lt;code&gt;xterm&lt;/code&gt; and only supports 16 colors.</source>
          <target state="translated">Fish는 휴리스틱을 사용하여 구형 터미널의 16 색 팔레트보다 제한된 256 색 팔레트를 지원하는지 여부를 결정합니다. &lt;code&gt;fish_term256&lt;/code&gt; 을 &lt;em&gt;1&lt;/em&gt; 로 설정하여 지원을 강제 할 수 있습니다 . &lt;code&gt;$TERM&lt;/code&gt; 에 &quot;256color&quot;가 포함 된 경우 (예 : &lt;em&gt;xterm-256color&lt;/em&gt; ) 256 색 지원이 활성화됩니다. &lt;code&gt;$TERM&lt;/code&gt; 에 &lt;em&gt;xterm이&lt;/em&gt; 포함 된 경우 256 색 지원이 활성화됩니다 (MacOS 제외 : &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; 및 &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; 은 MacOS 10.6에서 Terminal.app을 감지하는 데 사용됨) &lt;code&gt;xterm&lt;/code&gt; 을보고 하고 16 색만 지원 한다는 것이 알려져 있기 때문에 지원이 비활성화됩니다. .</target>
        </trans-unit>
        <trans-unit id="ad58efd756a349f3d5ec4b128631d278954160c8" translate="yes" xml:space="preserve">
          <source>Fish uses an Emacs-style kill ring for copy and paste functionality. For example, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a7c4e0f6011c5a6723f630fd3d21a3dda63de9" translate="yes" xml:space="preserve">
          <source>Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won't understand.</source>
          <target state="translated">Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won't understand.</target>
        </trans-unit>
        <trans-unit id="4a8a4a4f82444a104a993e27513d536247c816d1" translate="yes" xml:space="preserve">
          <source>Fish versions prior to 3.0 supported the syntax &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt;, which worked like &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt;. This syntax was not widely used, and was ambiguous and inconsistent.</source>
          <target state="translated">3.0 이전 버전 생선 구 지원 &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt; 같이 일한 &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt; . 이 구문은 널리 사용되지 않았으며 모호하고 일관성이 없었습니다.</target>
        </trans-unit>
        <trans-unit id="cb678b9dd371f15bc7e0c8da8984dbcf75ca0c04" translate="yes" xml:space="preserve">
          <source>Fish's blocking constructs look a little different. They all start with a word, end in &lt;code&gt;end&lt;/code&gt; and don't have a second starting word:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3aac7574777ac1ebe5c853e91269d48b4c8d770" translate="yes" xml:space="preserve">
          <source>Fish's prompt is also defined in a function, called &lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt;. It is run when the prompt is about to be displayed and its output forms the prompt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d57bd5497ca26a92593094bf3e21c5097192fa3" translate="yes" xml:space="preserve">
          <source>Fisher</source>
          <target state="translated">Fisher</target>
        </trans-unit>
        <trans-unit id="cc39950b13a6699fa5b10206f558fe0ba567276b" translate="yes" xml:space="preserve">
          <source>Fisherman</source>
          <target state="translated">Fisherman</target>
        </trans-unit>
        <trans-unit id="cde1c030202177b2bb85ac304db8a66513736e41" translate="yes" xml:space="preserve">
          <source>Flag Value Validation</source>
          <target state="translated">플래그 값 검증</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="536cf03606fa94ae7d859eed9d77e1d3116f6703" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;#toc-commands&quot;&gt;table of contents&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">물고기와 함께 제공된 모든 내장, 기능 및 명령 목록 &lt;a href=&quot;#toc-commands&quot;&gt;은 목차를&lt;/a&gt; 참조하십시오 . 명령 의 &lt;code&gt;--help&lt;/code&gt; 스위치를 사용하여 설명서를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c63866684d9fe05a145e078581ff82103fa3b1f9" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;commands#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a673697effebecadd2ef2ada0c2ba216bf82e8c" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</target>
        </trans-unit>
        <trans-unit id="fc5d720df058950fb2b501ff363c8a58b90811ca" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, use &lt;code&gt;builtin -n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a243468998c4b3855b0c9284af3f0bfedea9592e" translate="yes" xml:space="preserve">
          <source>For a script written in another language, just replace &lt;code&gt;/bin/bash&lt;/code&gt; with the interpreter for that language (for example: &lt;code&gt;/usr/bin/python&lt;/code&gt; for a python script, or &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; for a fish script).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9801e7760d7e9e8e7b2ff4da2f4e2bbcb3cd8d9c" translate="yes" xml:space="preserve">
          <source>For a script, written in another language, just replace the interpreter &lt;code&gt;/bin/bash&lt;/code&gt; with the language interpreter of that other language (for example &lt;code&gt;/bin/python&lt;/code&gt; for a &lt;code&gt;python&lt;/code&gt; script)</source>
          <target state="translated">For a script, written in another language, just replace the interpreter &lt;code&gt;/bin/bash&lt;/code&gt; with the language interpreter of that other language (for example &lt;code&gt;/bin/python&lt;/code&gt; for a &lt;code&gt;python&lt;/code&gt; script)</target>
        </trans-unit>
        <trans-unit id="0e9cfc7c030fc52d944ae76e3a90d11f9ae7a834" translate="yes" xml:space="preserve">
          <source>For an alternative, try &lt;a href=&quot;#abbreviations&quot;&gt;abbreviations&lt;/a&gt;. These are words that are expanded while you type, instead of being actual functions inside the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1ee97cd1a141aa861292be516e6d2fafba3b56" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;../index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">For an introduction to specifying completions, see &lt;a href=&quot;../index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</target>
        </trans-unit>
        <trans-unit id="aac657fdcd353fd4213af492e11d8fa1236e727e" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">완료를 지정하는 것에 대한 소개 는 물고기 매뉴얼에서 &lt;a href=&quot;index#completion-own&quot;&gt;자신의 완료 쓰기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c8170d85d1c1d6151789bb01cb1ad1b3028cc35" translate="yes" xml:space="preserve">
          <source>For an introduction to writing your own completions, see &lt;a href=&quot;../completions#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f70256424cd43141b91b58c2edd81b6e14a061" translate="yes" xml:space="preserve">
          <source>For backwards compatibility each subcommand can also be specified as a long or short option. For example, rather than &lt;code&gt;status is-login&lt;/code&gt; you can type &lt;code&gt;status --is-login&lt;/code&gt;. The flag forms are deprecated and may be removed in a future release (but not before fish 3.0).</source>
          <target state="translated">이전 버전과의 호환성을 위해 각 하위 명령을 길거나 짧은 옵션으로 지정할 수도 있습니다. 예를 들어 &lt;code&gt;status is-login&lt;/code&gt; 대신 &lt;code&gt;status --is-login&lt;/code&gt; 을 입력 할 수 있습니다 . 플래그 양식은 더 이상 사용되지 않으며 향후 릴리스에서 제거 될 수 있습니다 (물고기 3.0 이전은 아님).</target>
        </trans-unit>
        <trans-unit id="71cbfbc301ab062537c3b9d9149d9aa54102b0b9" translate="yes" xml:space="preserve">
          <source>For basic compatibility with POSIX &lt;code&gt;command&lt;/code&gt;, the &lt;code&gt;-v&lt;/code&gt; flag is recognized as an alias for &lt;code&gt;-s&lt;/code&gt;.</source>
          <target state="translated">POSIX &lt;code&gt;command&lt;/code&gt; 과의 기본 호환성을 위해 &lt;code&gt;-v&lt;/code&gt; 플래그는 &lt;code&gt;-s&lt;/code&gt; 의 별명으로 인식됩니다 .</target>
        </trans-unit>
        <trans-unit id="b73ea6d75946436551604661ce1b9a165a45dd07" translate="yes" xml:space="preserve">
          <source>For checking timing after a command has completed, check &lt;a href=&quot;../index#variables-special&quot;&gt;$CMD_DURATION&lt;/a&gt;.</source>
          <target state="translated">For checking timing after a command has completed, check &lt;a href=&quot;../index#variables-special&quot;&gt;$CMD_DURATION&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e40b055eb7098645342eba3f6a6c092eb71628f1" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells and external commands, $PATH is a &lt;a href=&quot;index#variables-path&quot;&gt;path variable&lt;/a&gt;, and so will be joined with colons (not spaces) when you quote it:</source>
          <target state="translated">For compatibility with other shells and external commands, $PATH is a &lt;a href=&quot;index#variables-path&quot;&gt;path variable&lt;/a&gt;, and so will be joined with colons (not spaces) when you quote it:</target>
        </trans-unit>
        <trans-unit id="1c3dc5a73a1b6e033a2111e39aaa9007c3480fd4" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells, job expansion syntax is supported for &lt;code&gt;bg&lt;/code&gt;. A PID of the format &lt;code&gt;%1&lt;/code&gt; will be interpreted as the PID of job 1. Job numbers can be seen in the output of &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3079979f2c8bb4a076f55ed59e3bc9962976c8b3" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells, job expansion syntax is supported for &lt;code&gt;fg&lt;/code&gt;. A &lt;code&gt;PID&lt;/code&gt; of the format &lt;code&gt;%1&lt;/code&gt; will foreground job 1. Job numbers can be seen in the output of &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d46702cca75cc827bf0e644a96033460077001e" translate="yes" xml:space="preserve">
          <source>For detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e13e8fad991f0105b6652520dfd2beeef44ad94" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;a href=&quot;cmds/begin#cmd-begin&quot;&gt;begin&lt;/a&gt; and &lt;a href=&quot;cmds/end#cmd-end&quot;&gt;end&lt;/a&gt; to group parts of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3cc4b28c62019a96ce74d02cd7c54d07452b42" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to group parts of them.</source>
          <target state="translated">더 복잡한 조건의 경우 &lt;code&gt;begin&lt;/code&gt; 과 &lt;code&gt;end&lt;/code&gt; 을 사용 하여 일부를 그룹화하십시오.</target>
        </trans-unit>
        <trans-unit id="2ffbc75d40d5f17483c5a32a91dae37e401b6f2b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, does not have an associated value) the values are the short and long flags seen. If the option is not a boolean flag the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">예를 들어 , &lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 가 표시 되면 &lt;code&gt;_flag_h&lt;/code&gt; 및 &lt;code&gt;_flag_help&lt;/code&gt; 입니다. var는 로컬 범위로 설정됩니다 (예 : 스크립트가 &lt;code&gt;set -l _flag_X&lt;/code&gt; 를 수행 한 것처럼 ). 플래그가 부울 인 경우 (즉, 연관된 값이없는 경우) 값은 짧고 긴 플래그입니다. 옵션이 부울 플래그가 아닌 경우 값은 ARG 목록이 처리 될 때 수집 된 값에 해당하는 0 이상의 값입니다. 플래그가 보이지 않으면 var 플래그가 설정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="88a5cf27ff84d1f00030e64d1e499179b84cb53e" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt; ). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fa66a3b27e0366609127209cba01f178b1e3f9" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;echo hello 2&amp;gt; output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160d44921b4e5cc1e46472871323748ab262c51c" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="translated">For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt; . After entering &lt;code&gt;gco&lt;/code&gt; and pressing</target>
        </trans-unit>
        <trans-unit id="38df69a183da9016b2103a1c9a7def1959322bfa" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing &lt;b&gt;Space&lt;/b&gt; or &lt;b&gt;Enter&lt;/b&gt;, the full text &lt;code&gt;git checkout&lt;/code&gt; will appear in the command line.</source>
          <target state="translated">예를 들어, &lt;code&gt;git checkout&lt;/code&gt; 과 같이 자주 실행되는 명령은 &lt;code&gt;gco&lt;/code&gt; 로 축약 될 수 있습니다 . &lt;code&gt;gco&lt;/code&gt; 를 입력 하고 &lt;b&gt;Space&lt;/b&gt; 또는 &lt;b&gt;Enter &lt;/b&gt;키 를 누르면 전체 텍스트 &lt;code&gt;git checkout&lt;/code&gt; 이 명령 행에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="3748b656b4d49fc21ce880c084187a5150ce4ea9" translate="yes" xml:space="preserve">
          <source>For example, here's a simple function to list directories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f10862d2cb42eba3132cb49d2ba2a80e3864525" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to have a function &lt;code&gt;ll&lt;/code&gt;, you would add a text file &lt;code&gt;ll.fish&lt;/code&gt; to &lt;code&gt;~/.config/fish/functions&lt;/code&gt;:</source>
          <target state="translated">예를 들어, 함수 &lt;code&gt;ll&lt;/code&gt; 을 &lt;code&gt;ll.fish&lt;/code&gt; &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 에 텍스트 파일 ll.fish 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="631584c9382e007cb93a95331a33fec25ea95d0e" translate="yes" xml:space="preserve">
          <source>For example, the following is a function definition that calls the command &lt;code&gt;ls&lt;/code&gt; with the argument '&lt;code&gt;-l&lt;/code&gt;' to print a detailed listing of the contents of the current directory:</source>
          <target state="translated">예를 들어, 다음은 ' &lt;code&gt;-l&lt;/code&gt; ' 인수와 함께 &lt;code&gt;ls&lt;/code&gt; 명령을 호출 하여 현재 디렉토리의 내용에 대한 자세한 목록을 인쇄하는 함수 정의입니다 .</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9b35e52823563d2df240637c363f5b52ee523904" translate="yes" xml:space="preserve">
          <source>For examples of how to write your own complex completions, study the completions in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;. (The exact path depends on your chosen installation prefix and may be slightly different)</source>
          <target state="translated">복잡한 완성을 작성하는 방법에 대한 예제는 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; 에서 완성을 연구하십시오 . (정확한 경로는 선택한 설치 접두사에 따라 다르며 약간 다를 수 있습니다)</target>
        </trans-unit>
        <trans-unit id="29752c666ae89d90fd5950e78bb8db877998c7de" translate="yes" xml:space="preserve">
          <source>For for detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="translated">For for detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="103fc968431a4b50b3ca123cef46a14d1fc51393" translate="yes" xml:space="preserve">
          <source>For instance, here's bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f56ee2c62f9812ead36bdfeb6ba25bf621c0f9" translate="yes" xml:space="preserve">
          <source>For instance, the control key modifies a character by setting the top three bits to 0. This means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbba6181daff6006d824b40726c5e1dc21c20696" translate="yes" xml:space="preserve">
          <source>For loops can be used to iterate over a list. For example, a list of files:</source>
          <target state="translated">For 루프를 사용하여 목록을 반복 할 수 있습니다. 예를 들어 파일 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fb55b2efd75666ff0e0f22ca6189e759ca99212d" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;../index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">For more details, see &lt;a href=&quot;../index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</target>
        </trans-unit>
        <trans-unit id="0d3b4b55cdd235f8a297cfd58fd2b4aaeb478949" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">자세한 내용 은 &lt;code&gt;fish&lt;/code&gt; 매뉴얼의 &lt;a href=&quot;index#debugging&quot;&gt;물고기 스크립트 디버깅을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbf3695085a563c32cadec00042c527ca7e1f7bc" translate="yes" xml:space="preserve">
          <source>For more information on functions, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20842f282aec1c4b50e206a47ffcf066ea5ca7ed" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; command.</target>
        </trans-unit>
        <trans-unit id="2fc141152e052520326e534bbd191caeb550504d" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">새 이벤트 핸들러를 정의하는 방법에 대한 자세한 내용은 &lt;a href=&quot;commands#function&quot;&gt;함수&lt;/a&gt; 명령 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6895247d91fcffa104e9a4003d47294a8b67a455" translate="yes" xml:space="preserve">
          <source>For more information, read the documentation for the block constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">자세한 내용은, 예컨대, 블록 구조에 대한 문서를 읽을 &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; 및 &lt;code&gt;while&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="964a42e4fd350b97fcf46d3e0c75ca51851aa82c" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for each of the functions above.</source>
          <target state="translated">For more information, see the documentation for each of the functions above.</target>
        </trans-unit>
        <trans-unit id="cdcf4ba8c872fe3f9f1941442b568f4cbb24effc" translate="yes" xml:space="preserve">
          <source>For more, see &lt;a href=&quot;funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5f6b77a3db0cc9e9b6b6808dc5c105059f2d18" translate="yes" xml:space="preserve">
          <source>For more, see the documentation for the builtins or the &lt;a href=&quot;tutorial#tut-conditionals&quot;&gt;Conditionals&lt;/a&gt; section of the tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27424edc0e90c3adb0df5bb5c53e73754fc6371d" translate="yes" xml:space="preserve">
          <source>For most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;$status&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is like what bash does with &lt;code&gt;shopt -s failglob&lt;/code&gt;. There are exactly 4 exceptions, namely &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;, overriding variables in &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;. Their globs will instead expand to zero arguments (so the command won't see them at all), like with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106e9122c8b5a8bbb7b662818bf4ea1ef6ed2679" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) and hexadecimal (&lt;code&gt;0xFF&lt;/code&gt;) are also available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d92b5c7148803c36e855152c078c15224a9486" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) is also available.</source>
          <target state="translated">숫자의 경우 &lt;code&gt;.&lt;/code&gt; 로케일에 상관없이 항상 기수 문자 입니다. &lt;code&gt;2.5&lt;/code&gt; 는 아니고 &lt;code&gt;2,5&lt;/code&gt; 입니다. 과학적 표기법 ( &lt;code&gt;10e5&lt;/code&gt; )도 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="58daf2766341890bda462e187ee4716941297918" translate="yes" xml:space="preserve">
          <source>For these reasons, fish does not do this, and instead expects asterisks to be quoted or escaped if they aren't supposed to be expanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e25112d09d08d00c25b607d90cd81a9a425781e" translate="yes" xml:space="preserve">
          <source>For uninstalling fish: see &lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ: Uninstalling fish&lt;/a&gt;.</source>
          <target state="translated">For uninstalling fish: see &lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ: Uninstalling fish&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9cd7f4b35527e8bd36dce665102b57e97e70e363" translate="yes" xml:space="preserve">
          <source>Format Specifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="817a23516d79c9310b8cbcd3fbb553ae7f962425" translate="yes" xml:space="preserve">
          <source>From an interactive shell, the commands below exit with a return value of zero:</source>
          <target state="translated">대화식 쉘에서 아래 명령은 리턴 값 0으로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="68add3d9773584e2619f672ebe5f9d4745e5e9ea" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a '&lt;code&gt;&amp;gt;&lt;/code&gt;' to save space.</source>
          <target state="translated">이제부터는 공간을 절약하기 위해 프롬프트가 ' &lt;code&gt;&amp;gt;&lt;/code&gt; '인 것처럼 가장합니다 .</target>
        </trans-unit>
        <trans-unit id="30d17302061ced704b6b34a3749f31c19ef26d8f" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a &lt;code&gt;&amp;gt;&lt;/code&gt; to save space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="daf9c1f469f134e463969d3e8181e558bbde191a" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.</source>
          <target state="translated">함수는 피쉬 구문으로 작성된 프로그램입니다. 단일 이름을 사용하여 하나 이상의 명령과 인수를 그룹화합니다. 추가 인수를 사용하여 특정 명령을 시작하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d38037291d36ba014bf585647c762ae13fe7c883" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together various commands and their arguments using a single name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f90915711f79d63d40ae94fbe45e944677e599" translate="yes" xml:space="preserve">
          <source>Functions beginning with the string &lt;code&gt;__fish_print_&lt;/code&gt; print a newline separated list of strings. For example, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Functions beginning with &lt;code&gt;__fish_complete_&lt;/code&gt; print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.</source>
          <target state="translated">문자열 &lt;code&gt;__fish_print_&lt;/code&gt; 로 시작하는 함수 는 줄 바꿈으로 구분 된 문자열 목록을 인쇄합니다. 예를 들어 &lt;code&gt;__fish_print_filesystems&lt;/code&gt; 는 알려진 모든 파일 시스템의 목록을 인쇄합니다. &lt;code&gt;__fish_complete_&lt;/code&gt; 로 시작하는 함수 는 개행으로 구분 된 완료 목록을 설명과 함께 인쇄합니다. 설명은 완료와 탭 문자로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="db0f72339f2340e5e8b351628b140fc4b4a5095c" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:</source>
          <target state="translated">Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:</target>
        </trans-unit>
        <trans-unit id="bfd6b853607d78b9cac90686ca5ac5f2f2bd0492" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This method of defining functions has several advantages. An autoloaded function becomes available automatically to all running shells. If the function definition is changed, all running shells will automatically reload the altered version. Startup time and memory usage is improved, etc.</source>
          <target state="translated">명령 줄 또는 구성 파일에서 기능을 정의 할 수 있지만 자동으로로드 할 수도 있습니다. 이 함수 정의 방법에는 몇 가지 장점이 있습니다. 자동로드 기능은 실행중인 모든 쉘에서 자동으로 사용할 수있게됩니다. 함수 정의가 변경되면 실행중인 모든 셸이 변경된 버전을 자동으로 다시로드합니다. 시작 시간 및 메모리 사용량 등이 향상되었습니다.</target>
        </trans-unit>
        <trans-unit id="45aaac446e8af8ab443ebb79de1921177d9fc9c4" translate="yes" xml:space="preserve">
          <source>Fundle</source>
          <target state="translated">Fundle</target>
        </trans-unit>
        <trans-unit id="1dbc937890de836b0044393faedad472b64f7496" translate="yes" xml:space="preserve">
          <source>Further help and development</source>
          <target state="translated">추가 도움 및 개발</target>
        </trans-unit>
        <trans-unit id="bcbbc69b089ac1c6106198168f95bbc56b4fa684" translate="yes" xml:space="preserve">
          <source>Future feature flags</source>
          <target state="translated">향후 기능 플래그</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="3dc04827b1d89f032f341434dadfd4fcc6c503c2" translate="yes" xml:space="preserve">
          <source>GNU style long options, like '&lt;code&gt;--colors&lt;/code&gt;'. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter ('&lt;code&gt;--quoting-style shell&lt;/code&gt;') or by appending the option with a '&lt;code&gt;=&lt;/code&gt;' and the value ('&lt;code&gt;--quoting-style=shell&lt;/code&gt;'). GNU style long options may be abbreviated so long as the abbreviation is unique ('&lt;code&gt;--h&lt;/code&gt;') is equivalent to '&lt;code&gt;--help&lt;/code&gt;' if help is the only long option beginning with an 'h').</source>
          <target state="translated">' &lt;code&gt;--colors&lt;/code&gt; ' 와 같은 GNU 스타일의 긴 옵션 . GNU 스타일의 long 옵션은 한 문자를 초과 할 수 있으며 앞에 두 개의 하이픈이 있으며 그룹화 할 수 없습니다. 옵션 인수는 다음 매개 변수 ( ' &lt;code&gt;--quoting-style shell&lt;/code&gt; ')에 지정하거나 옵션에 ' &lt;code&gt;=&lt;/code&gt; '및 값 ( ' &lt;code&gt;--quoting-style=shell&lt;/code&gt; ') 을 추가하여 지정할 수 있습니다. GNU 스타일의 긴 옵션은 약어가 고유 한 한 ( ' &lt;code&gt;--h&lt;/code&gt; ')가 'h'로 시작하는 유일한 긴 옵션 인 경우 ' &lt;code&gt;--help&lt;/code&gt; ' 와 동일 하다면 약어로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6756fc7d063fb985ac7207a33ec481f9efb07765" translate="yes" xml:space="preserve">
          <source>GNU style long options, like &lt;code&gt;--colors&lt;/code&gt;. GNU style long options can be more than one character long, are preceded by two hyphens, and can't be grouped together. Option arguments may be specified in the following parameter (&lt;code&gt;--quoting-style shell&lt;/code&gt;) or after a &lt;code&gt;=&lt;/code&gt; (&lt;code&gt;--quoting-style=shell&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19c496fc9fc5f17e29b156659c99fdebbdf355e" translate="yes" xml:space="preserve">
          <source>Get the length of a list with &lt;code&gt;count&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 가있는 목록의 길이를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">도움을 받다</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="8eaa4a571cfa23b1046936adad07606e523f576d" translate="yes" xml:space="preserve">
          <source>Global variables are accessible to functions whether they are exported or not.</source>
          <target state="translated">Global variables are accessible to functions whether they are exported or not.</target>
        </trans-unit>
        <trans-unit id="abb6bdf312d84d0e5db0e8ce8296e247a865a4cf" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, and will never be erased unless explicitly requested by using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e54a9b9a49fb183045e69571e35c245eada9b8" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="translated">Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="75f01947c75f2d491048e400dc98a7697d09c297" translate="yes" xml:space="preserve">
          <source>Globbing doesn't happen on expanded variables, so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097b5d5320d0735796306d389e915b1392ea4a90" translate="yes" xml:space="preserve">
          <source>Groups:</source>
          <target state="translated">Groups:</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="8b4ff52ac09d0794b0b2790069c175e0e201849a" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0053f4880938c6ad45d9f6ae784ae7aa588de2e2" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;code&gt;fg&lt;/code&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; 매개 변수 를 사용하여 특정 내장에 대한 도움말을 얻을 수도 있습니다 . 예를 들어 &lt;code&gt;fg&lt;/code&gt; 내장 에 대한 도움말을 보려면 &lt;code&gt;fg -h&lt;/code&gt; 또는 &lt;code&gt;help fg&lt;/code&gt; 를 입력 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4f5d69f1e4fa9190f3df409c8af9094f4963c8a1" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful commands:</source>
          <target state="translated">다음은 몇 가지 유용한 명령 목록입니다.</target>
        </trans-unit>
        <trans-unit id="bed5ac3a7c90f81a97fb1af26263e4e9bc837a2c" translate="yes" xml:space="preserve">
          <source>Here we define some of the terms used on this page and throughout the rest of the fish documentation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a0fbf9a4b62e6e15f7e7d04099ec292404a8c3" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;make&lt;/code&gt; is only executed if &lt;code&gt;./configure&lt;/code&gt; succeeds (returns 0), and &lt;code&gt;sudo make install&lt;/code&gt; is only executed if both &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; succeed.</source>
          <target state="translated">Here, &lt;code&gt;make&lt;/code&gt; is only executed if &lt;code&gt;./configure&lt;/code&gt; succeeds (returns 0), and &lt;code&gt;sudo make install&lt;/code&gt; is only executed if both &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; succeed.</target>
        </trans-unit>
        <trans-unit id="a4068759fb02ece3b9b7f59cd6a0574aa4fe6fb1" translate="yes" xml:space="preserve">
          <source>Heredocs</source>
          <target state="translated">Heredocs</target>
        </trans-unit>
        <trans-unit id="3475b4cb946f794b7047a56966e51dd30d3be916" translate="yes" xml:space="preserve">
          <source>Hidden files (where the name begins with a dot) are not considered when wildcarding unless the wildcard string has a dot in that place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bfaa88d4d6e9d2a3eb77e15fdf1e42b45ec633c" translate="yes" xml:space="preserve">
          <source>History searches are case-insensitive unless the search string contains an uppercase character, and they can be aborted by pressing the escape key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a509c793438fa230f1278ed402f9c7e9018572d" translate="yes" xml:space="preserve">
          <source>History searches can be aborted by pressing the escape key.</source>
          <target state="translated">Esc 키를 눌러 기록 검색을 중단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67bc332b46b3f3dc1b8024a5e5cfdee70680168b" translate="yes" xml:space="preserve">
          <source>Hit tab again to cycle through the possibilities.</source>
          <target state="translated">가능성을 순환하려면 탭을 다시 누르십시오.</target>
        </trans-unit>
        <trans-unit id="8562520c74923aa47973021bf5a615a9d18fdbc2" translate="yes" xml:space="preserve">
          <source>Holding alt and something else also typically sends escape, for example holding alt+a will send an escape character and then an &quot;a&quot;.</source>
          <target state="translated">Holding alt and something else also typically sends escape, for example holding alt+a will send an escape character and then an &quot;a&quot;.</target>
        </trans-unit>
        <trans-unit id="70f8bb9a8a5393ef080507a89e4b98d139000d65" translate="yes" xml:space="preserve">
          <source>Home</source>
          <target state="translated">Home</target>
        </trans-unit>
        <trans-unit id="0fb159db1e28fce0aea599e71e51612c11b25f22" translate="yes" xml:space="preserve">
          <source>Home directory expansion</source>
          <target state="translated">홈 디렉토리 확장</target>
        </trans-unit>
        <trans-unit id="c5e4aaa97cc3ad7f579464354a2507b9c63dac85" translate="yes" xml:space="preserve">
          <source>How can I use &lt;code&gt;-&lt;/code&gt; as a shortcut for &lt;code&gt;cd -&lt;/code&gt;?</source>
          <target state="translated">How can I use &lt;code&gt;-&lt;/code&gt; as a shortcut for &lt;code&gt;cd -&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="d5208f2bd161f7ef9e4786ba2058053cc8cefa22" translate="yes" xml:space="preserve">
          <source>How can I use `-` as a shortcut for `cd -`?</source>
          <target state="translated">`-`를`cd -`의 단축키로 어떻게 사용할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="ba1155cc4fa464e6593f08ba2b8723aab74c8f1c" translate="yes" xml:space="preserve">
          <source>How do I change the greeting message?</source>
          <target state="translated">인사말 메시지를 어떻게 변경합니까?</target>
        </trans-unit>
        <trans-unit id="54e6d1ecb8003f23585cb7559d5800b568cc815b" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is defined?</source>
          <target state="translated">How do I check whether a variable is defined?</target>
        </trans-unit>
        <trans-unit id="c4d87fc5a8041267fdcd98e9deafc888b91c5523" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is not empty?</source>
          <target state="translated">How do I check whether a variable is not empty?</target>
        </trans-unit>
        <trans-unit id="13c4a91c9a86c9c981e277c7f5e4a2ed6189509e" translate="yes" xml:space="preserve">
          <source>How do I customize my syntax highlighting colors?</source>
          <target state="translated">구문 강조 색상을 어떻게 사용자 정의합니까?</target>
        </trans-unit>
        <trans-unit id="a694102af5424918d28a1f9662a1aa3950673c08" translate="yes" xml:space="preserve">
          <source>How do I get the exit status of a command?</source>
          <target state="translated">명령의 종료 상태를 얻으려면 어떻게합니까?</target>
        </trans-unit>
        <trans-unit id="0e58d9d321d50cf0c49be8ad0ed48955a88a6bce" translate="yes" xml:space="preserve">
          <source>How do I make fish my default shell?</source>
          <target state="translated">생선을 기본 껍질로 만들려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="402503e9f12a7c687d2a8e25d61d5d4c873e5c42" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc or .profile?</source>
          <target state="translated">How do I run a command every login? What's fish's equivalent to .bashrc or .profile?</target>
        </trans-unit>
        <trans-unit id="bc538e8432ebecf3f9f7a45d7ccb524d4da71c7d" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc?</source>
          <target state="translated">로그인 할 때마다 명령을 어떻게 실행합니까? 물고기는 .bashrc와 동일합니까?</target>
        </trans-unit>
        <trans-unit id="9d52246c1acb2dd2ad95298d27dac048384b6b2b" translate="yes" xml:space="preserve">
          <source>How do I run a command from history?</source>
          <target state="translated">기록에서 명령을 어떻게 실행합니까?</target>
        </trans-unit>
        <trans-unit id="7c2282706e5d5da05460852fe614e0ea089754e8" translate="yes" xml:space="preserve">
          <source>How do I run a subcommand? The backtick doesn't work!</source>
          <target state="translated">하위 명령을 어떻게 실행합니까? 백틱이 작동하지 않습니다!</target>
        </trans-unit>
        <trans-unit id="240782fc9c5f0b5d6c4cc74b05803ec8fdfa4ffc" translate="yes" xml:space="preserve">
          <source>How do I set an environment variable for just one command?</source>
          <target state="translated">하나의 명령에 대해서만 환경 변수를 설정하는 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="cf01f8cfda8ac7fdc0ad1cfce27146791559db05" translate="yes" xml:space="preserve">
          <source>How do I set my prompt?</source>
          <target state="translated">프롬프트를 어떻게 설정합니까?</target>
        </trans-unit>
        <trans-unit id="a7f2b2fb54e2d471e8f341688e112fc1e1ce9d80" translate="yes" xml:space="preserve">
          <source>How do I set or clear an environment variable?</source>
          <target state="translated">환경 변수를 설정하거나 지우려면 어떻게합니까?</target>
        </trans-unit>
        <trans-unit id="1bbce1c02cef5225c09fe183c39555282f316dab" translate="yes" xml:space="preserve">
          <source>How do I update man page completions?</source>
          <target state="translated">매뉴얼 페이지 완성을 어떻게 업데이트합니까?</target>
        </trans-unit>
        <trans-unit id="8755f1ac4179b2490bfd8d3384a3c541bc0e9557" translate="yes" xml:space="preserve">
          <source>However sometimes, especially with &lt;code&gt;pkg-config&lt;/code&gt; and related tools, splitting on spaces is needed.</source>
          <target state="translated">그러나 때때로, 특히 &lt;code&gt;pkg-config&lt;/code&gt; 및 관련 도구의 경우 공간 분할이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="54bce717b6b4bc0facb17b1202d46c84a308e996" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so</source>
          <target state="translated">그러나 명령 대체를 위해 변수를 인덱스로 사용하는 것은 현재 지원되지 않으므로</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
