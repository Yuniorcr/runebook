<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="pug">
    <body>
      <group id="pug">
        <trans-unit id="905bada5c3cee0c1399710929a758d690bde54a3" translate="yes" xml:space="preserve">
          <source>&amp;amp;attributes</source>
          <target state="translated">&amp;amp;attributes</target>
        </trans-unit>
        <trans-unit id="82fbf19ddf2b0c58d271dd23280aff5a7a46fe7a" translate="yes" xml:space="preserve">
          <source>&amp;copy; Pug authors</source>
          <target state="translated">&amp;copy; 퍼그 저자</target>
        </trans-unit>
        <trans-unit id="bb0519ea1f9772e994d95131770249139bb84e70" translate="yes" xml:space="preserve">
          <source>(NOTE: Examples on this page use the pipe character (&lt;code&gt;|&lt;/code&gt;) for &lt;a href=&quot;plain-text#whitespace-control&quot;&gt;whitespace control&lt;/a&gt;.)</source>
          <target state="translated">(참고 :이 페이지의 예제 는 &lt;a href=&quot;plain-text#whitespace-control&quot;&gt;공백 문자 제어를&lt;/a&gt; 위해 파이프 문자 ( &lt;code&gt;|&lt;/code&gt; )를 사용합니다 .)</target>
        </trans-unit>
        <trans-unit id="b28c9bd9537ad855659c1744aaafb65ec6b662f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Compiler&lt;/code&gt;, &lt;code&gt;Lexer&lt;/code&gt;, &lt;code&gt;Parser&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; , &lt;code&gt;Lexer&lt;/code&gt; , &lt;code&gt;Parser&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b556dc258714d2e2c93992371c82f876d7d7db4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compiler&lt;/code&gt;, &lt;code&gt;lexer&lt;/code&gt;, &lt;code&gt;parser&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;compiler&lt;/code&gt; , &lt;code&gt;lexer&lt;/code&gt; , &lt;code&gt;parser&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e118d1ea72aa3b1b67c76546cd2b323ee2a595da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;each&lt;/code&gt; is not part of the JavaScript syntax, so the use of &lt;code&gt;each&lt;/code&gt; &amp;ldquo;keyword&amp;rdquo; in a JavaScript line is confusing as well as hackish (in terms of implementation). The same applies to parentheses-less &lt;code&gt;for&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; 은 JavaScript 구문의 일부가 아니므 로 JavaScript 행에서 &lt;code&gt;each&lt;/code&gt; &quot;키워드&quot;를 사용하는 것은 해킹 (구현 측면)과 혼동됩니다. 같은 괄호가없는 적용 &lt;code&gt;for&lt;/code&gt; 키워드.</target>
        </trans-unit>
        <trans-unit id="b42f4a3ab42be346b5bfb3a149ff4b7892cfce31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt; plugins should now return &lt;code&gt;Buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c100645d0677b731f499efce3c0449426c5bfeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; follows the basic pattern for evaluating a template local, but the code in between &lt;code&gt;#{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; is evaluated, escaped, and the result buffered into the output of the template being rendered.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; 은 템플릿 로컬을 평가하기위한 기본 패턴을 따르지만 &lt;code&gt;#{&lt;/code&gt; 와 &lt;code&gt;}&lt;/code&gt; 사이의 코드 는 평가되고 이스케이프되며 결과는 렌더링되는 템플릿의 출력으로 버퍼링됩니다.</target>
        </trans-unit>
        <trans-unit id="72956883ce42267a3e604489cdb5817b3b4cf41b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utils.merge&lt;/code&gt; has been removed from Pug, as it is not used anymore. Its functionality can be roughly replicated using the ES2015 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign&lt;/a&gt;&lt;/code&gt; method, among other variants.</source>
          <target state="translated">&lt;code&gt;utils.merge&lt;/code&gt; 는 더 이상 사용되지 않으므로 Pug에서 제거되었습니다. ES2015 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign&lt;/a&gt;&lt;/code&gt; 메소드를 사용하여 기능을 대략적으로 복제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d801de315600aa076bdf2a1fcff8c78b2cd40995" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utils.stringify&lt;/code&gt; has been split from Pug into the &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/js-stringify&quot;&gt;js-stringify&lt;/a&gt;&lt;/code&gt; package, with additional protection against possible XSS attacks. All users are advised to use that package.</source>
          <target state="translated">&lt;code&gt;utils.stringify&lt;/code&gt; 는 Pug에서 &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/js-stringify&quot;&gt;js-stringify&lt;/a&gt;&lt;/code&gt; 패키지 로 분할되었으며 XSS 공격에 대한 추가 보호 기능이 추가되었습니다. 모든 사용자는 해당 패키지를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="bb9a546df526ebee83703d49335a684290047dfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utils.walkAST&lt;/code&gt; has been split into the &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-walk&quot;&gt;pug-walk&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;utils.walkAST&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-walk&quot;&gt;pug-walk&lt;/a&gt;&lt;/code&gt; 패키지 로 분할되었습니다 .</target>
        </trans-unit>
        <trans-unit id="55f72ef94b182e19b9f55d14f6480fc73cb906d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attributes applied using &lt;code&gt;&amp;amp;attributes&lt;/code&gt; are not automatically escaped.&lt;/strong&gt; You must be sure to sanitize any user inputs to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;cross-site scripting&lt;/a&gt; (XSS). If passing in &lt;code&gt;attributes&lt;/code&gt; from a mixin call, this is done automatically.</source>
          <target state="translated">&lt;strong&gt;속성을 사용하여 적용된 &lt;code&gt;&amp;amp;attributes&lt;/code&gt; 은 자동으로 이스케이프되지 않습니다. &lt;/strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;사이트 간 스크립팅&lt;/a&gt; (XSS) 을 피하려면 모든 사용자 입력을 삭제해야합니다 . mixin 호출 에서 &lt;code&gt;attributes&lt;/code&gt; 을 전달하면 자동으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="9656c2b17bba648f07581ba7e47734fb2906562f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Filters are rendered at compile time.&lt;/strong&gt; This makes them fast, but it also means that they cannot support dynamic content or options.</source>
          <target state="translated">&lt;strong&gt;필터는 컴파일 타임에 렌더링됩니다. &lt;/strong&gt;이렇게하면 속도가 빨라지지만 동적 콘텐츠 나 옵션을 지원할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="53334631c993443bb01e9bebb0ca5233d2fc1b39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep in mind that buffering unescaped content into your templates can be mighty risky if that content comes fresh from your users.&lt;/strong&gt; Never trust user input!</source>
          <target state="translated">&lt;strong&gt;이스케이프 처리되지 않은 컨텐트를 템플릿에 버퍼링하면 해당 컨텐트가 사용자에게 새로워지면 위험 할 수 있습니다. &lt;/strong&gt;사용자 입력을 신뢰하지 마십시오!</target>
        </trans-unit>
        <trans-unit id="9ceca809537cc88651234404cb1dfc66f1f18562" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE the trailing and leading spaces here:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;여기에 후행 및 선행 공백을 참고하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e8e025b87707d0c768b4c11122bc3ab5aa03da93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The values in &lt;code&gt;attributes&lt;/code&gt; by default are already escaped!&lt;/strong&gt; You should use &lt;code&gt;!=&lt;/code&gt; to avoid escaping them a second time. (See also &lt;a href=&quot;attributes#unescaped-attributes&quot;&gt;unescaped attributes&lt;/a&gt;.)</source>
          <target state="translated">&lt;strong&gt;기본적으로 &lt;code&gt;attributes&lt;/code&gt; 의 값 은 이미 이스케이프되었습니다! &lt;/strong&gt;두 번째 이스케이프를 피 하려면 &lt;code&gt;!=&lt;/code&gt; 를 사용해야합니다 . ( &lt;a href=&quot;attributes#unescaped-attributes&quot;&gt;이스케이프되지 않은 속성&lt;/a&gt; 도 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="4601f0d5a94b7a40bbcb7b3632e652baff19f1d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unescaped buffered code can be dangerous.&lt;/strong&gt; You must be sure to sanitize any user inputs to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;cross-site scripting&lt;/a&gt; (XSS).</source>
          <target state="translated">&lt;strong&gt;이스케이프 처리되지 않은 버퍼 코드는 위험 할 수 있습니다. &lt;/strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;사이트 간 스크립팅&lt;/a&gt; (XSS) 을 피하려면 모든 사용자 입력을 삭제해야합니다 .</target>
        </trans-unit>
        <trans-unit id="cdc48fbcfc2aba846324c562600e116bcbadd5cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unescaped buffered code can be dangerous.&lt;/strong&gt; You must be sure to sanitize any user inputs to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;cross-site scripting&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;이스케이프 처리되지 않은 버퍼 코드는 위험 할 수 있습니다. &lt;/strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;사이트 간 스크립팅&lt;/a&gt; 을 피하려면 모든 사용자 입력을 삭제해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3578603cccec35b09b8083419f5fd4199fe87466" translate="yes" xml:space="preserve">
          <source>A JavaScript function body.</source>
          <target state="translated">JavaScript 함수 본문</target>
        </trans-unit>
        <trans-unit id="fdc546e115d8f864c132672c14ba127f95d90ad0" translate="yes" xml:space="preserve">
          <source>A function to generate the HTML from an object containing locals</source>
          <target state="translated">지역을 포함하는 객체에서 HTML을 생성하는 함수</target>
        </trans-unit>
        <trans-unit id="cb2c27e4bc0f4b0aa507d0f22a1cbd2eb8843149" translate="yes" xml:space="preserve">
          <source>A hash table of &lt;a href=&quot;../language/filters#custom-filters&quot;&gt;custom filters&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../language/filters#custom-filters&quot;&gt;사용자 정의 필터&lt;/a&gt; 의 해시 테이블 .</target>
        </trans-unit>
        <trans-unit id="4f32e8f4a4b2abd1f5f51cff9f1c753748756da7" translate="yes" xml:space="preserve">
          <source>A string of JavaScript representing a function</source>
          <target state="translated">함수를 나타내는 JavaScript 문자열</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API 참조</target>
        </trans-unit>
        <trans-unit id="5c081b50d4a2f79396b1a4df46642a50a84e6996" translate="yes" xml:space="preserve">
          <source>Add a list of global names to make accessible in templates.</source>
          <target state="translated">템플릿에서 액세스 할 수 있도록 전역 이름 목록을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="78f21574fb8e76a209a5268afdf4f1b25ddad048" translate="yes" xml:space="preserve">
          <source>Add the variables to the Pug &lt;a href=&quot;../api/reference#options&quot;&gt;options&lt;/a&gt; object, or define them in unbuffered code in a parent template. The child template will inherit these variables.</source>
          <target state="translated">퍼그 &lt;a href=&quot;../api/reference#options&quot;&gt;옵션&lt;/a&gt; 오브젝트에 변수를 추가 하거나 상위 템플리트의 버퍼되지 않은 코드로 변수를 정의하십시오. 자식 템플릿은 이러한 변수를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="60d3ab38ec473962d9e49a2b7fd5c60136191e83" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;https://www.npmjs.com/browse/keyword/jstransformer&quot;&gt;JSTransformer modules&lt;/a&gt; can be used as Pug filters. Popular filters include &lt;code&gt;:babel&lt;/code&gt;, &lt;code&gt;:uglify-js&lt;/code&gt;, &lt;code&gt;:scss&lt;/code&gt;, and &lt;code&gt;:markdown-it&lt;/code&gt;. Check out the documentation for the JSTransformer for the options supported for the specific filter.</source>
          <target state="translated">모든 &lt;a href=&quot;https://www.npmjs.com/browse/keyword/jstransformer&quot;&gt;JSTransformer 모듈&lt;/a&gt; 을 퍼그 필터로 사용할 수 있습니다. 많이 사용되는 필터는 &lt;code&gt;:babel&lt;/code&gt; , &lt;code&gt;:uglify-js&lt;/code&gt; , &lt;code&gt;:scss&lt;/code&gt; 및 &lt;code&gt;:markdown-it&lt;/code&gt; 입니다. 특정 필터에 지원되는 옵션에 대해서는 JSTransformer 문서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="03f29e19c7e4c6384c1ae5df357c5ece32108802" translate="yes" xml:space="preserve">
          <source>All API methods accept the following set of options:</source>
          <target state="translated">모든 API 메소드는 다음 옵션 세트를 승인합니다.</target>
        </trans-unit>
        <trans-unit id="ca0d94cfcd084eed406cd9b01a14f7ae873a3653" translate="yes" xml:space="preserve">
          <source>An options object</source>
          <target state="translated">옵션 객체</target>
        </trans-unit>
        <trans-unit id="9e7bf4671acb5cba831cdfe30b0ad7509d37aa0e" translate="yes" xml:space="preserve">
          <source>An options object, also used as the locals object</source>
          <target state="translated">locals 객체로도 사용되는 옵션 객체</target>
        </trans-unit>
        <trans-unit id="b8ce1db4ac272a62fd64c6a707d157aaf3cfb647" translate="yes" xml:space="preserve">
          <source>Another way to add plain text to templates is to prefix a line with a pipe character (&lt;code&gt;|&lt;/code&gt;). This method is useful for mixing plain text with inline tags, as we discuss later, in the Whitespace Control section.</source>
          <target state="translated">템플릿에 일반 텍스트를 추가하는 또 다른 방법은 파이프 문자 ( &lt;code&gt;|&lt;/code&gt; ) 로 줄을 접두어로 추가하는 것 입니다. 이 방법은 나중에 설명 할 공백 제어 섹션에서 일반 텍스트와 인라인 태그를 혼합하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="333892e4549da7f80a1c31f3095dcddde00dc04f" translate="yes" xml:space="preserve">
          <source>Attribute Interpolation</source>
          <target state="translated">속성 보간</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="a40f1fd513c3ed4b99be84f666181ecb3ab8a829" translate="yes" xml:space="preserve">
          <source>Be sure to send the Pug runtime (&lt;code&gt;node_modules/pug/runtime.js&lt;/code&gt;) to the client in addition to the template that you just compiled.</source>
          <target state="translated">방금 컴파일 한 템플릿 외에 Pug 런타임 ( &lt;code&gt;node_modules/pug/runtime.js&lt;/code&gt; )을 클라이언트에 보내십시오.</target>
        </trans-unit>
        <trans-unit id="1f601f6e958f9ccf999fe6a5385bc9e81ef95176" translate="yes" xml:space="preserve">
          <source>Below, notice that the &lt;code&gt;foot&lt;/code&gt; block is &lt;em&gt;not&lt;/em&gt; redefined, so it will use the parent&amp;rsquo;s default and output &amp;ldquo;some footer content&amp;rdquo;.</source>
          <target state="translated">아래에서 &lt;code&gt;foot&lt;/code&gt; 블록은 재정의 &lt;em&gt;되지 않으므로&lt;/em&gt; 부모의 기본값을 사용하고 &quot;일부 바닥 글 내용&quot;을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="c89627cef638598520a2f295a8b2b91663fccb8f" translate="yes" xml:space="preserve">
          <source>Block &lt;code&gt;append&lt;/code&gt; / &lt;code&gt;prepend&lt;/code&gt;</source>
          <target state="translated">블록 &lt;code&gt;append&lt;/code&gt; / &lt;code&gt;prepend&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1b38fad085dd3509a88635aa132e51044b4666a" translate="yes" xml:space="preserve">
          <source>Block Comments</source>
          <target state="translated">댓글 차단</target>
        </trans-unit>
        <trans-unit id="b5c336344f3b2bfc66061d8d39679f539e9676fb" translate="yes" xml:space="preserve">
          <source>Block Expansion</source>
          <target state="translated">블록 확장</target>
        </trans-unit>
        <trans-unit id="44efc5a1dd38e37f1c0403afadc3a20c0c13caab" translate="yes" xml:space="preserve">
          <source>Block comments work, too:</source>
          <target state="translated">댓글 차단 기능도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="73709cbc903320e0dc2a2668f6bac154b230ce3c" translate="yes" xml:space="preserve">
          <source>Block expansion may also be used:</source>
          <target state="translated">블록 확장을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e20943b669797e8a1d2a83190d62216eb07ad1f" translate="yes" xml:space="preserve">
          <source>Block in a Tag</source>
          <target state="translated">태그에서 차단</target>
        </trans-unit>
        <trans-unit id="d0c6b42e58160cde0494414e6782deaa163f668e" translate="yes" xml:space="preserve">
          <source>Boolean Attributes</source>
          <target state="translated">부울 속성</target>
        </trans-unit>
        <trans-unit id="d6b4dc532edaec305ed952d7752cd84b750d9503" translate="yes" xml:space="preserve">
          <source>Boolean attributes are mirrored by Pug. Boolean values (&lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;) are accepted. When no value is specified &lt;code&gt;true&lt;/code&gt; is assumed.</source>
          <target state="translated">부울 속성은 퍼그에 의해 미러링됩니다. 부울 값 ( &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; )이 승인됩니다. 값을 지정하지 않으면 &lt;code&gt;true&lt;/code&gt; 로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="de2e49d4881f011dc3450a1f3ae68af2dc4c5e2e" translate="yes" xml:space="preserve">
          <source>Buffered Code</source>
          <target state="translated">버퍼링 된 코드</target>
        </trans-unit>
        <trans-unit id="a2a7a8082e82a794ccb03e5e62492a1e41bb6e68" translate="yes" xml:space="preserve">
          <source>Buffered code starts with &lt;code&gt;=&lt;/code&gt;. It evaluates the JavaScript expression and outputs the result. For security, buffered code is first HTML escaped.</source>
          <target state="translated">버퍼링 된 코드는 &lt;code&gt;=&lt;/code&gt; 로 시작합니다 . JavaScript 표현식을 평가하고 결과를 출력합니다. 보안을 위해 버퍼링 된 코드는 먼저 HTML 이스케이프 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="7a17eafea470a26f5e7735c8747263c9e578cb46" translate="yes" xml:space="preserve">
          <source>Buffered comments look the same as single-line JavaScript comments. They act sort of like markup tags, producing &lt;em&gt;HTML&lt;/em&gt; comments in the rendered page.</source>
          <target state="translated">버퍼링 된 주석은 한 줄 JavaScript 주석과 같습니다. 이들은 마크 업 태그와 같은 역할 을하여 렌더링 된 페이지에서 &lt;em&gt;HTML&lt;/em&gt; 주석을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="c8c8d3f09ae23a614c12f474f34ea3073699e361" translate="yes" xml:space="preserve">
          <source>By default, all attributes are escaped&amp;mdash;that is,special characters are replaced with escape sequences&amp;mdash;to prevent attacks (such as cross site scripting). If you need to use special characters, use &lt;code&gt;!=&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;.</source>
          <target state="translated">기본적으로 모든 속성은 이스케이프됩니다. 즉, 특수 문자가 이스케이프 시퀀스로 대체되어 사이트 간 스크립팅과 같은 공격을 방지합니다. 당신은 특수 문자 사용을 사용해야하는 경우 &lt;code&gt;!=&lt;/code&gt; 대신 &lt;code&gt;=&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="20a7c72f30c91a5def212de7dd598bfabd6e8782" translate="yes" xml:space="preserve">
          <source>By default, compilation in the browser does not have access to JSTransformer-based filters, unless the JSTransformer modules are explicitly packed and made available through a CommonJS platform (such as Browserify or Webpack). In fact, the page you are reading right now uses Browserify to make the filters available in the browser.</source>
          <target state="translated">JSTransformer 모듈이 명시 적으로 압축되어 CommonJS 플랫폼 (예 : Browserify 또는 Webpack)을 통해 사용 가능하지 않으면 브라우저에서 컴파일 할 때 JSTransformer 기반 필터에 액세스 할 수 없습니다. 실제로, 지금 읽고있는 페이지는 Browserify를 사용하여 브라우저에서 필터를 사용할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="d14ec11c48a8d8c68ab7d2596a559f86fe1b1fb8" translate="yes" xml:space="preserve">
          <source>By default, however, Pug removes all spaces before and after tags. Check out the following example:</source>
          <target state="translated">그러나 기본적으로 Pug는 태그 앞뒤의 모든 공백을 제거합니다. 다음 예를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="b95b7797960ce9eaa32f7eda3300f8c08847ee40" translate="yes" xml:space="preserve">
          <source>By default, text at the start of a line (or after only white space) represents an HTML tag. Indented tags are nested, creating the tree structure of HTML.</source>
          <target state="translated">기본적으로 줄의 시작 부분 또는 공백 이후의 텍스트는 HTML 태그를 나타냅니다. 들여 쓰기 된 태그는 중첩되어 HTML의 트리 구조를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9254c4bba00f5ff69304a7921d3118fcbac7e6b8" translate="yes" xml:space="preserve">
          <source>Case</source>
          <target state="translated">Case</target>
        </trans-unit>
        <trans-unit id="2e223ee324338b8a520630fd2c866437ced3b5bd" translate="yes" xml:space="preserve">
          <source>Case Fall Through</source>
          <target state="translated">사례 가을</target>
        </trans-unit>
        <trans-unit id="55a89527100d7affacb785a535913eceec75eda6" translate="yes" xml:space="preserve">
          <source>Caution</source>
          <target state="translated">Caution</target>
        </trans-unit>
        <trans-unit id="b61f0a22825590e758c140f4660a2686e60cc8fc" translate="yes" xml:space="preserve">
          <source>Class Attributes</source>
          <target state="translated">클래스 속성</target>
        </trans-unit>
        <trans-unit id="87d16d4150660f6694dcba630f8227f99a756c25" translate="yes" xml:space="preserve">
          <source>Class Literal</source>
          <target state="translated">클래스 리터럴</target>
        </trans-unit>
        <trans-unit id="94ec8e8fb4995b3d07729b11934c2a062447cf4b" translate="yes" xml:space="preserve">
          <source>Classes may be defined using a &lt;code&gt;.classname&lt;/code&gt; syntax:</source>
          <target state="translated">클래스는 &lt;code&gt;.classname&lt;/code&gt; 구문을 사용하여 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="62264fc11aa6b69178ce7246ab696aeaec46b743" translate="yes" xml:space="preserve">
          <source>Common mistakes</source>
          <target state="translated">흔한 실수</target>
        </trans-unit>
        <trans-unit id="b80de0d1fc79d6aad509e8035615c5245ba3d069" translate="yes" xml:space="preserve">
          <source>Compile a Pug template file to a string of JavaScript that can be used client side along with the Pug runtime.</source>
          <target state="translated">Pug 템플릿 파일을 Pug 런타임과 함께 클라이언트 측에서 사용할 수있는 JavaScript 문자열로 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="70b9590982d6d948bbf544c47f6b9bdb9d47cdcf" translate="yes" xml:space="preserve">
          <source>Compile a Pug template file to a string of JavaScript that can be used client side.</source>
          <target state="translated">클라이언트 측에서 사용할 수있는 JavaScript 문자열로 Pug 템플릿 파일을 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="9d02260351dd84e8cadf4585d28c82b6b15d1f02" translate="yes" xml:space="preserve">
          <source>Compile a Pug template from a file to a function, which can be rendered multiple times with different locals.</source>
          <target state="translated">Pug 템플릿을 파일에서 함수로 컴파일하면 다른 로컬에서 여러 번 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a52f46961f6f8203926e020add16302a12fb28e" translate="yes" xml:space="preserve">
          <source>Compile a Pug template to a function, which can be rendered multiple times with different locals.</source>
          <target state="translated">퍼그 템플릿을 함수로 컴파일하면 다른 로컬에서 여러 번 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74829ffe4ce9532755990e092115ad1c6df319aa" translate="yes" xml:space="preserve">
          <source>Compile a Pug template to a string of JavaScript, which can be used client side along with the Pug runtime.</source>
          <target state="translated">Pug 템플릿을 JavaScript 문자열로 컴파일하면 Pug 런타임과 함께 클라이언트 측에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee2d9d7279acd692f2e3a5e38eddbe86b456c2f5" translate="yes" xml:space="preserve">
          <source>Compile a Pug template to a string of JavaScript, which can be used client side.</source>
          <target state="translated">클라이언트 측에서 사용할 수있는 JavaScript 문자열로 Pug 템플릿을 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="e31ac17e910acfdfdb422394c9ed3d252ddd798b" translate="yes" xml:space="preserve">
          <source>Conditional Comments</source>
          <target state="translated">조건부 주석</target>
        </trans-unit>
        <trans-unit id="d6a56385d0729f6ff4bf27671cc845cb6f2cfde5" translate="yes" xml:space="preserve">
          <source>Conditionals</source>
          <target state="translated">Conditionals</target>
        </trans-unit>
        <trans-unit id="0230eee8f217284c4c3d4caa60012bb9bc96524d" translate="yes" xml:space="preserve">
          <source>Consider the placement of the following template&amp;rsquo;s locals: &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, and &lt;code&gt;theGreat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; , &lt;code&gt;author&lt;/code&gt; , &lt;code&gt;theGreat&lt;/code&gt; 템플릿 로컬의 배치를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="98384816ad924258d68c1ace8f024e24b6b2657c" translate="yes" xml:space="preserve">
          <source>Custom Doctypes</source>
          <target state="translated">커스텀 독 타입</target>
        </trans-unit>
        <trans-unit id="30c3e03bf5eeeddddd25cfc9a3c1058ba1a99bb1" translate="yes" xml:space="preserve">
          <source>Custom Filters</source>
          <target state="translated">맞춤 필터</target>
        </trans-unit>
        <trans-unit id="78dd63ce83212e9b88a19ff265c96dec4ae760ac" translate="yes" xml:space="preserve">
          <source>Default Argument&amp;rsquo;s Values</source>
          <target state="translated">기본 인수 값</target>
        </trans-unit>
        <trans-unit id="a54e73d15cee44590c9ee158c009317e7edfeb11" translate="yes" xml:space="preserve">
          <source>Define the variables &lt;em&gt;in a block&lt;/em&gt; in the child template. Extending templates must have at least one block, or it would be empty &amp;mdash; just define your variables there.</source>
          <target state="translated">하위 템플릿에서 &lt;em&gt;블록&lt;/em&gt; 에 변수 &lt;em&gt;를&lt;/em&gt; 정의하십시오 . 확장 템플릿에는 하나 이상의 블록이 있거나 비어 있어야합니다. 변수를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="a4f17c25616225cb20e6afa33557ff41de95f63d" translate="yes" xml:space="preserve">
          <source>Depending on where you need the whitespace, you could add an extra space at the beginning of the text (after the block indentation, pipe character, and/or tag). Or you could add a trailing space at the &lt;em&gt;end&lt;/em&gt; of the text.</source>
          <target state="translated">공백이 필요한 위치에 따라 텍스트 시작 부분 (블록 들여 쓰기, 파이프 문자 및 / 또는 태그 뒤)에 추가 공백을 추가 할 수 있습니다. 또는 텍스트 &lt;em&gt;끝에&lt;/em&gt; 후행 공백을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="e81a0d33628a7c7ffede35a7fc0d572d077f40f2" translate="yes" xml:space="preserve">
          <source>Doctype</source>
          <target state="translated">Doctype</target>
        </trans-unit>
        <trans-unit id="54297754d960b6864f4eeed05cce4fd7082e7218" translate="yes" xml:space="preserve">
          <source>Doctype Option</source>
          <target state="translated">독 타입 옵션</target>
        </trans-unit>
        <trans-unit id="3c9f430b0145032e71573fb2a9f08f5aa55268c1" translate="yes" xml:space="preserve">
          <source>Doctype Shortcuts</source>
          <target state="translated">독 타입 단축키</target>
        </trans-unit>
        <trans-unit id="99dfed43872931452fdc53c69d1397df4ccb1025" translate="yes" xml:space="preserve">
          <source>Due to a trademark issue, the project name has been changed from &amp;ldquo;Jade&amp;rdquo; to &amp;ldquo;Pug&amp;rdquo; in conjunction with the release of Pug 2. This also means that we have changed the official supported file extension from &lt;code&gt;.jade&lt;/code&gt; to &lt;code&gt;.pug&lt;/code&gt;. Although &lt;code&gt;.jade&lt;/code&gt; is still supported, it is deprecated. All users are encouraged to transition to &lt;code&gt;.pug&lt;/code&gt; immediately.</source>
          <target state="translated">상표 문제로 인해 Pug 2 릴리스와 함께 프로젝트 이름이 &quot;Jade&quot;에서 &quot;Pug&quot;로 변경되었습니다. 또한 공식 지원되는 파일 확장자를 &lt;code&gt;.jade&lt;/code&gt; 에서 .pug 로 &lt;code&gt;.pug&lt;/code&gt; . &lt;code&gt;.jade&lt;/code&gt; 는 여전히 지원 되지만 더 이상 사용되지 않습니다. 모든 사용자는 즉시 &lt;code&gt;.pug&lt;/code&gt; 로 전환하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="2ddbff65d68ff8f4fe4e12a9fb5b05c51aa60118" translate="yes" xml:space="preserve">
          <source>Express Integration</source>
          <target state="translated">빠른 통합</target>
        </trans-unit>
        <trans-unit id="d9d7b0bedebd64adbd07b19e528600555496a511" translate="yes" xml:space="preserve">
          <source>Filtered Includes</source>
          <target state="translated">필터링 된 포함</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="7c2d1d4ad8c1d585bc00d2c9f6ad55c2b8509272" translate="yes" xml:space="preserve">
          <source>Filters let you use other languages in Pug templates. They take a block of plain text as an input.</source>
          <target state="translated">필터를 사용하면 퍼그 템플릿에서 다른 언어를 사용할 수 있습니다. 입력으로 일반 텍스트 블록을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="36b953fd1fb7ba4fcf7e4de86edef36f7c84e0fe" translate="yes" xml:space="preserve">
          <source>First, our template file.</source>
          <target state="translated">먼저 템플릿 파일입니다.</target>
        </trans-unit>
        <trans-unit id="faeb08a68afb2da60369c7bf73a4e246f7e509a2" translate="yes" xml:space="preserve">
          <source>For a complete list of new features, please refer to &lt;a href=&quot;https://github.com/pugjs/pug/releases/tag/pug%403.0.0&quot;&gt;the release notes&lt;/a&gt;. What follows are instructions for dealing with breaking changes only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c87bac545469b855f879eb7597f364e489c2d6" translate="yes" xml:space="preserve">
          <source>For example, if you want to be able to use CoffeeScript and Markdown (using Markdown-it renderer) in your Pug template, you would first make sure that these features are installed:</source>
          <target state="translated">예를 들어 Pug 템플릿에서 CoffeeScript 및 Markdown (Markdown-it 렌더러 사용)을 사용하려면 먼저 다음 기능이 설치되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="42e818369ba5c3d3bf0a21cdc052f0f3da85de29" translate="yes" xml:space="preserve">
          <source>For more details, check Express&amp;rsquo;s &lt;a href=&quot;https://expressjs.com/en/api.html&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 Express의 &lt;a href=&quot;https://expressjs.com/en/api.html&quot;&gt;API 참조를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="4609df6630d7a6dd29abb516c3e781cfeabde439" translate="yes" xml:space="preserve">
          <source>For the same reason, Pug&amp;rsquo;s &lt;a href=&quot;comments&quot;&gt;buffered comments&lt;/a&gt; cannot appear at the top level of an extending template: they produce HTML comments which would have nowhere to go in the resulting HTML. (Unbuffered Pug comments, however, can still go anywhere.)</source>
          <target state="translated">같은 이유로 퍼그의 &lt;a href=&quot;comments&quot;&gt;버퍼링 된 주석은&lt;/a&gt; 확장 템플릿의 최상위 레벨에 나타나지 않을 수 있습니다. HTML 주석은 결과 HTML로 갈 수 없습니다. (버퍼되지 않은 퍼그 주석은 여전히 ​​어디든지 갈 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="9823bf7d155fc85d937baa1cea5f59c5298f343a" translate="yes" xml:space="preserve">
          <source>Hash table of &lt;a href=&quot;../language/filters#custom-filters&quot;&gt;custom filters&lt;/a&gt;. Defaults to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../language/filters#custom-filters&quot;&gt;사용자 정의 필터&lt;/a&gt; 의 해시 테이블 . 기본값은 &lt;code&gt;undefined&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7071820100990cd09889b93e5b15ce02edf7fc75" translate="yes" xml:space="preserve">
          <source>Here are some alternatives you can use to include variables in your attribute:</source>
          <target state="translated">다음은 속성에 변수를 포함시키기 위해 사용할 수있는 몇 가지 대안입니다.</target>
        </trans-unit>
        <trans-unit id="029ded0d9793debc52ff8958626203b763f084bd" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what the output function string looks like (written to &lt;code&gt;templates.js&lt;/code&gt;).</source>
          <target state="translated">다음은 출력 함수 문자열의 모양입니다 ( &lt;code&gt;templates.js&lt;/code&gt; 에 작성 됨 ).</target>
        </trans-unit>
        <trans-unit id="d2488a3b5546ab9c57a93760247d9dca82cfbfcb" translate="yes" xml:space="preserve">
          <source>However, since all lines beginning with &lt;code&gt;&amp;lt;&lt;/code&gt; are treated as &lt;a href=&quot;plain-text&quot;&gt;plain text&lt;/a&gt;, normal HTML-style conditional comments work just fine.</source>
          <target state="translated">그러나 &lt;code&gt;&amp;lt;&lt;/code&gt; 로 시작하는 모든 행 은 &lt;a href=&quot;plain-text&quot;&gt;일반 텍스트&lt;/a&gt; 로 취급되므로 일반적인 HTML 스타일 조건부 주석은 정상적으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="aa9469c4630425b15b1c3ed02e5d2f5c0613bbaa" translate="yes" xml:space="preserve">
          <source>ID Literal</source>
          <target state="translated">ID 리터럴</target>
        </trans-unit>
        <trans-unit id="e7fbe8f0a9ff90d5f887cb9ab8619321e0fcd418" translate="yes" xml:space="preserve">
          <source>IDs may be defined using a &lt;code&gt;#idname&lt;/code&gt; syntax:</source>
          <target state="translated">ID는 &lt;code&gt;#idname&lt;/code&gt; 구문을 사용하여 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ffe3e46a59fb760cf2c79a346071c18baeb5acd5" translate="yes" xml:space="preserve">
          <source>If no file extension is given, &lt;code&gt;.pug&lt;/code&gt; is automatically appended to the file name.</source>
          <target state="translated">파일 확장자가 없으면 &lt;code&gt;.pug&lt;/code&gt; 가 파일 이름에 자동으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="ff4e9a217d9e093b4a82406c0bf828a708f67b67" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, compiled functions are cached. &lt;code&gt;filename&lt;/code&gt; must be set as the cache key. Only applies to &lt;code&gt;render&lt;/code&gt; functions. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정하면 컴파일 된 함수가 캐시됩니다. &lt;code&gt;filename&lt;/code&gt; 은 캐시 키로 설정해야합니다. &lt;code&gt;render&lt;/code&gt; 기능 에만 적용됩니다 . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3defd8f132d640b35caa07e783051bf0cc079d33" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, the function source will be included in the compiled template for better error messages (sometimes useful in development). It is enabled by default, unless used with &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; in production mode.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정하면 더 나은 오류 메시지 (때로는 개발에 유용함)를 위해 함수 소스가 컴파일 된 템플릿에 포함됩니다. 프로덕션 모드에서 &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; 와 함께 사용하지 않으면 기본적으로 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="93ae684ed36bd6df084bf97faf1d3f1edfb3be2c" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, the tokens and function body are logged to stdout.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정 되면 토큰 및 함수 본문이 stdout에 로그됩니다.</target>
        </trans-unit>
        <trans-unit id="b2f7063b223138c5012442ae54dd615cb9b4e4cc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;doctype&lt;/code&gt; is not specified as part of the template, you can specify it here. It is sometimes useful to get self-closing tags and remove mirroring of boolean attributes. See &lt;a href=&quot;../language/doctype#doctype-option&quot;&gt;doctype documentation&lt;/a&gt; for more information.</source>
          <target state="translated">경우 &lt;code&gt;doctype&lt;/code&gt; 템플릿의 일부로 지정되지 않은, 당신은 여기를 지정할 수 있습니다. 자체 폐쇄 태그를 가져오고 부울 속성의 미러링을 제거하는 것이 유용한 경우가 있습니다. 자세한 내용은 &lt;a href=&quot;../language/doctype#doctype-option&quot;&gt;doctype 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4bcc5d7dcd43ff96b9d2dc5d8908c47c94095d3b" translate="yes" xml:space="preserve">
          <source>If the content of the filter is short, one can even use filters as if they are tags:</source>
          <target state="translated">필터의 내용이 짧으면 태그처럼 필터를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd7275ff362296a29dbc8bb8a1729812d8fd982c" translate="yes" xml:space="preserve">
          <source>If the doctype is &lt;code&gt;html&lt;/code&gt;, Pug knows not to mirror the attribute, and instead uses the terse style (understood by all browsers).</source>
          <target state="translated">doctype이 &lt;code&gt;html&lt;/code&gt; 인 경우 Pug는 속성을 미러링하지 않으며 대신 모든 스타일에서 이해할 수있는 간결한 스타일을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="462cdb08ff0c1ed2e228428afe7aaf73314d21db" translate="yes" xml:space="preserve">
          <source>If the path is absolute (e.g., &lt;code&gt;include /root.pug&lt;/code&gt;), it is resolved by prepending &lt;code&gt;options.basedir&lt;/code&gt;. Otherwise, paths are resolved relative to the current file being compiled.</source>
          <target state="translated">경로가 절대적인 경우 (예 : &lt;code&gt;include /root.pug&lt;/code&gt; ) &lt;code&gt;options.basedir&lt;/code&gt; 앞에 추가하여 해결합니다 . 그렇지 않으면 경로는 컴파일중인 현재 파일을 기준으로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="06ebe68dbce1f7cd39c1c1bccdb603b1987077d0" translate="yes" xml:space="preserve">
          <source>If you are migrating from Jade, please follow the &lt;a href=&quot;migration-v2&quot;&gt;Migrating to Pug 2&lt;/a&gt; article first. This article covers how to upgrade from Pug 2 to Pug 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae198f2d9b04cc9ec1300ca4338df544170990ed" translate="yes" xml:space="preserve">
          <source>If you are not using filters with the &amp;ldquo;minify&amp;rdquo; option, you can ignore this change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5545675e93f492001badb219513619ea637d98" translate="yes" xml:space="preserve">
          <source>If you are not using plugins, you can ignore this change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59defcca7d3056b9fb46d179c1b98573c7063710" translate="yes" xml:space="preserve">
          <source>If you are using a &lt;code&gt;read&lt;/code&gt; plugin to override the way that pug reads files, and you want to support the new &lt;code&gt;renderBuffer&lt;/code&gt; filters, you will need to return &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a519639acfa4901723f01c42b2b9f70a6978d348" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t find an appropriate filter for your use case, you can write your own &lt;a href=&quot;#custom-filters&quot;&gt;custom filter&lt;/a&gt;.</source>
          <target state="translated">사용 사례에 적합한 필터를 찾을 수없는 경우 &lt;a href=&quot;#custom-filters&quot;&gt;사용자 정의 필터를&lt;/a&gt; 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d122a4cefee06bb925ce8cd9ce350a979173901e" translate="yes" xml:space="preserve">
          <source>If you have many attributes, you can also spread them across many lines:</source>
          <target state="translated">속성이 많은 경우 속성을 여러 줄로 분산시킬 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4039e8a790364a4ef5144f9133751fa71f1168c" translate="yes" xml:space="preserve">
          <source>If you need the text and/or tags to touch &amp;mdash; perhaps you need a period to appear outside the hyperlink at the end of a sentence &amp;mdash; this is easy, as it&amp;rsquo;s basically what happens unless you tell Pug otherwise.</source>
          <target state="translated">텍스트 및 / 또는 태그를 터치해야하는 경우 (문장 끝에 하이퍼 링크 외부에 표시되어야 할 기간이 필요할 수 있음) Pug에 달리 지시하지 않는 한 기본적으로 발생하므로 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cfff4799c23a8cb0b9b1cf0180749f2c648eafb" translate="yes" xml:space="preserve">
          <source>If you need to &lt;em&gt;add&lt;/em&gt; space, you have a few options:</source>
          <target state="translated">공간 을 &lt;em&gt;추가&lt;/em&gt; 해야하는 경우 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a3c344d4e7642befd1f8f97a645bbdb8ed8a628" translate="yes" xml:space="preserve">
          <source>If you need to include a verbatim &lt;code&gt;#{&lt;/code&gt;, you can either escape it, or use interpolation. (So meta!)</source>
          <target state="translated">축어 &lt;code&gt;#{&lt;/code&gt; 를 포함해야하는 경우 이스케이프하거나 보간을 사용할 수 있습니다. (그래서 메타!)</target>
        </trans-unit>
        <trans-unit id="9490344b1671add1e25310cf31d36c0bb4e40307" translate="yes" xml:space="preserve">
          <source>If you pass a &lt;code&gt;.name&lt;/code&gt; property on the options object, it will be used as the name of your client side template function.</source>
          <target state="translated">옵션 객체에 &lt;code&gt;.name&lt;/code&gt; 속성 을 전달하면 클라이언트 측 템플릿 함수의 이름으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="34226059890db2c4f88be87587d73a05600474ce" translate="yes" xml:space="preserve">
          <source>If you were using filters that output JavaScript or CSS, along with the &lt;code&gt;minify&lt;/code&gt; option, you now need to include an extra dependency. If you want to support minifying JavaScript, you must install &lt;code&gt;jstransformer-uglify-js&lt;/code&gt; and if you want to support minifying CSS, you must install &lt;code&gt;jstransformer-clean-css&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b966cfc4039fb1ec9704af6a89434a51e90fd40" translate="yes" xml:space="preserve">
          <source>If you would like to not output anything in a specific case, add an explicit unbuffered &lt;code&gt;break&lt;/code&gt;:</source>
          <target state="translated">특정 경우에 아무것도 출력하지 않으려면 명시 적 버퍼링되지 않은 &lt;code&gt;break&lt;/code&gt; 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="90efed26b48edad2c105f236ef29c909631af905" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re coming from Pug v1, you may now omit the leading &lt;code&gt;-&lt;/code&gt;. Otherwise, it&amp;rsquo;s identical (just regular JavaScript):</source>
          <target state="translated">당신이 퍼그 (V1)에서 오는 경우, 당신은 지금 선두를 생략 할 수 있습니다 &lt;code&gt;-&lt;/code&gt; . 그렇지 않으면 동일합니다 (일반 JavaScript 만 해당).</target>
        </trans-unit>
        <trans-unit id="b1d5fa3b1451933ae79c1ba38817e18c64868773" translate="yes" xml:space="preserve">
          <source>If your JavaScript runtime supports ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template strings&lt;/a&gt; (including Node.js/io.js 1.0.0 and later), you can also use its syntax to simplify your attributes:</source>
          <target state="translated">JavaScript 런타임이 ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;템플릿 문자열&lt;/a&gt; (Node.js / io.js 1.0.0 이상 포함)을 지원하는 경우 구문을 사용하여 속성을 단순화 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="aac4834d057bcbd0932db546be2f66f840710335" translate="yes" xml:space="preserve">
          <source>If your JavaScript runtime supports ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template strings&lt;/a&gt; (including Node.js/io.js 1.0.0 and later), you can use that syntax for attributes. This is really useful for attributes with really long values:</source>
          <target state="translated">JavaScript 런타임이 ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;템플릿 문자열&lt;/a&gt; (Node.js / io.js 1.0.0 이상 포함)을 지원하는 경우 해당 구문을 속성에 사용할 수 있습니다. 이것은 실제로 값이 긴 속성에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b483de9333a906f36b563c9848c6ae789fb1ed2a" translate="yes" xml:space="preserve">
          <source>If your attribute name contains odd characters that might interfere with JavaScript syntax, either quote it using &lt;code&gt;&quot;&quot;&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt;, or use commas to separate different attributes. Examples of such characters include &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; (frequently used in Angular 2).</source>
          <target state="translated">속성 이름에 JavaScript 구문을 방해 할 수있는 홀수 문자가 포함 된 경우 &lt;code&gt;&quot;&quot;&lt;/code&gt; 또는 &lt;code&gt;''&lt;/code&gt; 를 사용하여 인용 하거나 쉼표를 사용하여 다른 속성을 구분하십시오. 이러한 문자의 예로는 &lt;code&gt;[]&lt;/code&gt; 및 &lt;code&gt;()&lt;/code&gt; (Angular 2에서 자주 사용됨)가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a66c48e5ddf8cd30a4d1d5f10586e90444552c50" translate="yes" xml:space="preserve">
          <source>If your inline tags don&amp;rsquo;t require many attributes, you may find it easiest to use tag interpolation, or literal HTML, within a plain text &lt;em&gt;block&lt;/em&gt;.</source>
          <target state="translated">인라인 태그에 많은 속성이 필요하지 않은 경우 일반 텍스트 &lt;em&gt;블록&lt;/em&gt; 내에서 태그 보간 또는 리터럴 HTML을 사용하는 것이 가장 쉽습니다 .</target>
        </trans-unit>
        <trans-unit id="dad51ca1f804854cce12a248ad56fc44398f2a99" translate="yes" xml:space="preserve">
          <source>If, for whatever reason, it is not possible to use the &lt;code&gt;doctype&lt;/code&gt; keyword (e.g., just rendering HTML fragments), but you would still like to specify the doctype of the template, you can do so via the &lt;a href=&quot;../api/reference#options&quot;&gt;&lt;code&gt;doctype&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="translated">어떤 이유로 든 &lt;code&gt;doctype&lt;/code&gt; 키워드 를 사용할 수 없지만 (예 : HTML 조각 렌더링) 여전히 템플릿의 doctype을 지정하려면 &lt;a href=&quot;../api/reference#options&quot;&gt; &lt;code&gt;doctype&lt;/code&gt; 옵션을&lt;/a&gt; 통해 그렇게 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4d7daa7390bef11634aadaf7114b411ed2bcbf4e" translate="yes" xml:space="preserve">
          <source>In Express, the environmental variable &lt;code&gt;NODE_ENV&lt;/code&gt; is designed to inform the web application of the execution environment: whether it is in development or in production. Express and Pug automatically modify the defaults of a few options in production environment, to provide a better out-of-the-box experience for users.</source>
          <target state="translated">Express에서 환경 변수 &lt;code&gt;NODE_ENV&lt;/code&gt; 는 웹 응용 프로그램이 개발 환경에 있는지 또는 프로덕션 환경에 있는지를 웹 응용 프로그램에 알리도록 설계되었습니다. Express 및 Pug는 프로덕션 환경에서 몇 가지 옵션의 기본값을 자동으로 수정하여 사용자에게 더 나은 기본 환경을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="da73752cae51ef5a6c5639b6cd8ce0fdf44715d3" translate="yes" xml:space="preserve">
          <source>In Pug v2, this array has been split from Pug into the &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/void-elements&quot;&gt;void-elements&lt;/a&gt;&lt;/code&gt; package. To modify this array, you could write a &lt;code&gt;codeGen&lt;/code&gt; plugin.</source>
          <target state="translated">Pug v2에서이 배열은 Pug에서 &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/void-elements&quot;&gt;void-elements&lt;/a&gt;&lt;/code&gt; 패키지 로 분할되었습니다 . 이 배열을 수정하기 위해 &lt;code&gt;codeGen&lt;/code&gt; 플러그인을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab679835b214cf0162d4435957a81739c343f72b" translate="yes" xml:space="preserve">
          <source>In Pug v2, this object has been split from Pug into the &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/doctypes&quot;&gt;doctypes&lt;/a&gt;&lt;/code&gt; package. To extend doctype shortcuts, you could write a &lt;code&gt;codeGen&lt;/code&gt; plugin.</source>
          <target state="translated">Pug v2에서이 객체는 Pug에서 &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/doctypes&quot;&gt;doctypes&lt;/a&gt;&lt;/code&gt; 패키지 로 분할되었습니다 . doctype 단축키를 확장하기 위해 &lt;code&gt;codeGen&lt;/code&gt; 플러그인을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76c90968929cb14cd4cd79f8c04e30277f24eaf8" translate="yes" xml:space="preserve">
          <source>In a template, a &lt;code&gt;block&lt;/code&gt; is simply a &amp;ldquo;block&amp;rdquo; of Pug that a child template may replace. This process is recursive.</source>
          <target state="translated">템플릿에서 &lt;code&gt;block&lt;/code&gt; 은 단순히 자식 템플릿이 대체 할 수있는 Pug의 &quot;블록&quot;입니다. 이 과정은 재귀 적입니다.</target>
        </trans-unit>
        <trans-unit id="642e1c0a1cdf1e80804c47ef1a19c67cb457dbf0" translate="yes" xml:space="preserve">
          <source>In addition to being buffered in the output, a doctype in Pug can affect compilation in other ways. For example, whether self-closing tags end with &lt;code&gt;/&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; depends on whether HTML or XML is specified. The output of &lt;a href=&quot;attributes#boolean-attributes&quot;&gt;boolean attributes&lt;/a&gt; may be affected as well.</source>
          <target state="translated">출력에서 버퍼링되는 것 외에도 Pug의 doctype은 다른 방식으로 컴파일에 영향을 줄 수 있습니다. 예를 들어, 자체 닫기 태그가 &lt;code&gt;/&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;gt;&lt;/code&gt; 로 끝나는 지 여부는 HTML 또는 XML의 지정 여부에 따라 다릅니다. &lt;a href=&quot;attributes#boolean-attributes&quot;&gt;부울 속성&lt;/a&gt; 의 출력 도 영향을받을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78bffae6f1b111b8098474ea387760ea5dec13f3" translate="yes" xml:space="preserve">
          <source>In future we may drop support for node versions &lt;a href=&quot;https://github.com/nodejs/Release&quot;&gt;when they reach end of life&lt;/a&gt; without a major version bump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113f90e982f80f56acec52c221f2fd12519250c5" translate="yes" xml:space="preserve">
          <source>In the following example, the script is first transformed by &lt;code&gt;babel&lt;/code&gt;, and then by &lt;code&gt;cdata-js&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서 스크립트는 먼저 &lt;code&gt;babel&lt;/code&gt; 과 &lt;code&gt;cdata-js&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="db54974f7f0ad531e35648ba85b9388029b4d7ef" translate="yes" xml:space="preserve">
          <source>Includes</source>
          <target state="translated">Includes</target>
        </trans-unit>
        <trans-unit id="2a78b74b2140bec06d774038a569a0de20914b16" translate="yes" xml:space="preserve">
          <source>Includes allow you to insert the contents of one Pug file into another.</source>
          <target state="translated">포함하면 한 Pug 파일의 내용을 다른 Pug 파일에 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1733f8ad068c6688edcf0012e28b63af0fa898d5" translate="yes" xml:space="preserve">
          <source>Including Filtered Text</source>
          <target state="translated">필터링 된 텍스트 포함</target>
        </trans-unit>
        <trans-unit id="d199a93c1f244a34f35cffd46d161583b5986528" translate="yes" xml:space="preserve">
          <source>Including Plain Text</source>
          <target state="translated">일반 텍스트 포함</target>
        </trans-unit>
        <trans-unit id="6d86f9267e735630512730b5e0760bcfc90d8178" translate="yes" xml:space="preserve">
          <source>Including non-Pug files simply includes their raw text.</source>
          <target state="translated">비 Pug 파일을 포함하면 단순히 원시 텍스트가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="fa3f4ce36b97e896e30dbd959612aa627c2a1f2d" translate="yes" xml:space="preserve">
          <source>Inline Syntax</source>
          <target state="translated">인라인 구문</target>
        </trans-unit>
        <trans-unit id="09f0d0c15b8c37c9cef55645522134b3cc1adb0f" translate="yes" xml:space="preserve">
          <source>Inline in a Tag</source>
          <target state="translated">태그의 인라인</target>
        </trans-unit>
        <trans-unit id="7f9c9e981cffb212f711f1bbdad314bd1a2617cb" translate="yes" xml:space="preserve">
          <source>Inline runtime functions instead of &lt;code&gt;require&lt;/code&gt;-ing them from a shared version. For &lt;code&gt;compileClient&lt;/code&gt; functions, the default is &lt;code&gt;true&lt;/code&gt; (so that one does not have to include the runtime). For all other compilation or rendering types, the default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">인라인 런타임 함수 는 공유 버전에서 &lt;code&gt;require&lt;/code&gt; 하지 않습니다 . 들어 &lt;code&gt;compileClient&lt;/code&gt; 의 기능, 기본값은 &lt;code&gt;true&lt;/code&gt; (그래서 하나는 런타임을 포함하지 않음). 다른 모든 컴파일 또는 렌더링 유형의 경우 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="758ad8f867eaf9e76308a7f3b80a0ecfa8636d67" translate="yes" xml:space="preserve">
          <source>Interpolation works not only on JavaScript values, but on Pug as well. Just use the tag interpolation syntax, like so:</source>
          <target state="translated">보간은 JavaScript 값뿐만 아니라 Pug에서도 작동합니다. 다음과 같이 태그 보간 구문을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e1d4a9056d804ecb47a2fb02510e41fe592f1afb" translate="yes" xml:space="preserve">
          <source>It can also be an object which maps class names to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; values. This is useful for applying conditional classes</source>
          <target state="translated">클래스 이름을 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 값으로 매핑하는 객체 일 수도 있습니다 . 조건부 클래스를 적용 할 때 유용합니다</target>
        </trans-unit>
        <trans-unit id="ab482dd3ef17d7fde5e78088bfe9ecff735c59e9" translate="yes" xml:space="preserve">
          <source>It can also be written inline (after any attributes), and supports the full range of JavaScript expressions:</source>
          <target state="translated">또한 인라인 (어트리뷰트 뒤에)으로 작성할 수 있으며 모든 JavaScript 표현식을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="173781d56ce2949143e28e3b74b403532dae7c59" translate="yes" xml:space="preserve">
          <source>It can also be written inline with attributes, and supports the full range of JavaScript expressions:</source>
          <target state="translated">또한 속성과 함께 인라인으로 작성 될 수 있으며 모든 JavaScript 표현식을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="508812bfe3f4255d462818c2a063efe3aebcf03c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to override a block to provide additional blocks, as shown in the following example. As it shows, &lt;code&gt;content&lt;/code&gt; now exposes a &lt;code&gt;sidebar&lt;/code&gt; and &lt;code&gt;primary&lt;/code&gt; block for overriding. (Alternatively, the child template could override &lt;code&gt;content&lt;/code&gt; altogether.)</source>
          <target state="translated">다음 예제와 같이 블록을 재정 의하여 추가 블록을 제공 할 수도 있습니다. 표시된 것처럼 &lt;code&gt;content&lt;/code&gt; 이제 재정의 할 &lt;code&gt;sidebar&lt;/code&gt; 및 &lt;code&gt;primary&lt;/code&gt; 블록을 노출합니다 . 또는 하위 템플리트가 &lt;code&gt;content&lt;/code&gt; 모두 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="18905aab409cadb5b72681a650ec99001cb221e0" translate="yes" xml:space="preserve">
          <source>Iteration</source>
          <target state="translated">Iteration</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="a6ad88f2b621f00e4ead6d51c821fe6848de5bc6" translate="yes" xml:space="preserve">
          <source>Legacy Mixin Call</source>
          <target state="translated">레거시 믹스 인 콜</target>
        </trans-unit>
        <trans-unit id="c58bd40e95aef48eee67a645bb4f78e1797cdf10" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT license.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="075081a85bdaa7df1d84d36f5ee0bb9d4defe16c" translate="yes" xml:space="preserve">
          <source>Like tags, buffered comments must appear on their own line.</source>
          <target state="translated">태그와 같이 버퍼링 된 주석은 자체 줄에 나타나야합니다.</target>
        </trans-unit>
        <trans-unit id="d4ff5e02a19939e2d753dbe77cf2a7af529493db" translate="yes" xml:space="preserve">
          <source>Literal HTML</source>
          <target state="translated">리터럴 HTML</target>
        </trans-unit>
        <trans-unit id="a6fade4e839856115bad0de331ca6e83ef16ef08" translate="yes" xml:space="preserve">
          <source>Managing the whitespace of the rendered HTML is one of the trickiest parts about learning Pug. Don&amp;rsquo;t worry, though, you&amp;rsquo;ll get the hang of it soon enough.</source>
          <target state="translated">렌더링 된 HTML의 공백 관리는 퍼그 학습에있어 가장 까다로운 부분 중 하나입니다. 그러나 걱정하지 마십시오. 조만간 중단 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="d54a9328cafa2a8750510921a8c9527a61e2cfaa" translate="yes" xml:space="preserve">
          <source>Migrating to Pug 2</source>
          <target state="translated">퍼그 2로 마이그레이션</target>
        </trans-unit>
        <trans-unit id="218834565f8ca38ad38e00afbee09d33ad11f25a" translate="yes" xml:space="preserve">
          <source>Migrating to Pug 3 (from Pug 2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455cf5c03d11b837985c95c468cce8c400b89382" translate="yes" xml:space="preserve">
          <source>Mixin Attributes</source>
          <target state="translated">믹스 인 속성</target>
        </trans-unit>
        <trans-unit id="6cc953b5d5ee3aadb1e01eb3209a80b15bed7a66" translate="yes" xml:space="preserve">
          <source>Mixin Blocks</source>
          <target state="translated">믹스 인 블록</target>
        </trans-unit>
        <trans-unit id="d634308003ff858f289d2833f637dfc9bee3fc78" translate="yes" xml:space="preserve">
          <source>Mixins</source>
          <target state="translated">Mixins</target>
        </trans-unit>
        <trans-unit id="c545846585a2f6a9081ab068737f06401e68861b" translate="yes" xml:space="preserve">
          <source>Mixins allow you to create reusable blocks of Pug.</source>
          <target state="translated">믹스 인을 사용하면 재사용 가능한 퍼그 블록을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27b687048f3bde21505314fa92e60c5e40070fd5" translate="yes" xml:space="preserve">
          <source>Mixins also get an implicit &lt;code&gt;attributes&lt;/code&gt; argument, which is taken from the attributes passed to the mixin:</source>
          <target state="translated">또한 믹스 인은 암시 적 &lt;code&gt;attributes&lt;/code&gt; 인수를 얻습니다.이 인수는 믹스 인에 전달 된 속성에서 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="51b9ceb9413c1c1738e4d88be857eaaf902cfafe" translate="yes" xml:space="preserve">
          <source>Mixins are compiled to functions, and can take arguments:</source>
          <target state="translated">믹스 인은 함수로 컴파일되며 인수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e1e32304b726ab5d3cb57910f579f5d8cad2592" translate="yes" xml:space="preserve">
          <source>Mixins can also take a block of Pug to act as the content:</source>
          <target state="translated">또한 믹스 인은 퍼그 블록을 콘텐츠로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d3533413b2597953be02ca04b7bfa0068a871701" translate="yes" xml:space="preserve">
          <source>Most of these removals can be automatically detected by &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-lint&quot;&gt;pug-lint&lt;/a&gt;&lt;/code&gt;, our official linter.</source>
          <target state="translated">이러한 제거의 대부분은 공식 린터 인 &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-lint&quot;&gt;pug-lint&lt;/a&gt;&lt;/code&gt; 에 의해 자동으로 감지 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8c50357aea46c8648515c1f45d4227a27bc1b3fb" translate="yes" xml:space="preserve">
          <source>Multiline Attributes</source>
          <target state="translated">여러 줄 속성</target>
        </trans-unit>
        <trans-unit id="e4ea13997251174c3a5a7513deb65c4ca9b53f2a" translate="yes" xml:space="preserve">
          <source>Nested Filters</source>
          <target state="translated">중첩 필터</target>
        </trans-unit>
        <trans-unit id="0ea55df7522cbddd16f5d3960bd2793fc3dbda51" translate="yes" xml:space="preserve">
          <source>Node.js Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8c79e766905d2768a125ca59e149eea737da39" translate="yes" xml:space="preserve">
          <source>Node.js-style callback receiving the rendered results. &lt;strong&gt;This callback is called synchronously.&lt;/strong&gt;</source>
          <target state="translated">렌더링 된 결과를 수신하는 Node.js 스타일 콜백 &lt;strong&gt;이 콜백은 동 기적으로 호출됩니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dda390f990b3b683cc97ed07b56454be0c9d3d18" translate="yes" xml:space="preserve">
          <source>Normal JavaScript expressions work fine, too:</source>
          <target state="translated">일반적인 JavaScript 표현식도 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="b0767d5208f03805e546ae384e216930f4da63f1" translate="yes" xml:space="preserve">
          <source>Not recommended</source>
          <target state="translated">권장하지 않음</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="4de925511709d95913db25c4fcd321dcbdefa72d" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;only named blocks and mixin definitions&lt;/strong&gt; can appear at the top (unindented) level of a child template. This is important! Parent templates define a page&amp;rsquo;s overall structure, and child templates can only &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;prepend&lt;/code&gt;, or replace specific blocks of markup and logic. If a child template tried to add content outside of a block, Pug would have no way of knowing where to put it in the final page.</source>
          <target state="translated">참고 &lt;strong&gt;단지라는 이름의 블록과 믹스 인 정의가&lt;/strong&gt; 아이 템플릿의 상단 (들여 쓰기되지 않은) 수준에서 나타날 수 있습니다. 이건 중요하다! 부모 템플릿은 페이지의 전체 구조를 정의하며 자식 템플릿은 특정 마크 업 및 논리 블록 만 &lt;code&gt;append&lt;/code&gt; , &lt;code&gt;prepend&lt;/code&gt; 또는 대체 할 수 있습니다 . 하위 템플릿이 블록 외부에 컨텐츠를 추가하려고 시도한 경우 퍼그는 최종 페이지에서 어디에 배치 할 것인지 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8fb2d8d56ff614b23f16650de705d5e618d817a3" translate="yes" xml:space="preserve">
          <source>Now, consider a page of your JavaScript game. You want some game related scripts as well as these defaults. You can simply &lt;code&gt;append&lt;/code&gt; the block:</source>
          <target state="translated">이제 JavaScript 게임의 페이지를 고려하십시오. 이러한 기본값뿐만 아니라 일부 게임 관련 스크립트를 원합니다. 블록을 간단히 &lt;code&gt;append&lt;/code&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="854da00bf48d18d202028dd7f88db225b03d523e" translate="yes" xml:space="preserve">
          <source>Now, you should be able to render the following template:</source>
          <target state="translated">이제 다음 템플릿을 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc35ad1a12dddc512674c55ebc55fce768298dbe" translate="yes" xml:space="preserve">
          <source>Often you might want large blocks of text within a tag. A good example is writing JavaScript and CSS code in the &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; tags. To do this, just add a &lt;code&gt;.&lt;/code&gt; right after the tag name, or after the closing parenthesis, if the tag has &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="translated">종종 태그 내에 큰 텍스트 블록을 원할 수 있습니다. &lt;code&gt;script&lt;/code&gt; 및 &lt;code&gt;style&lt;/code&gt; 태그 에 JavaScript 및 CSS 코드를 작성하는 것이 좋은 예입니다 . 이렇게하려면을 추가하면 &lt;code&gt;.&lt;/code&gt; 태그에 &lt;a href=&quot;attributes&quot;&gt;속성&lt;/a&gt; 이있는 경우 태그 이름 바로 뒤에 또는 닫는 괄호 뒤에 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="14e63d200923230d7d4952a949c4fa2922af23b6" translate="yes" xml:space="preserve">
          <source>One can also add an &lt;code&gt;else&lt;/code&gt; block that will be executed if the array or object does not contain values to iterate over. The following is equivalent to the example above:</source>
          <target state="translated">배열이나 객체에 반복 할 값이없는 경우 실행될 &lt;code&gt;else&lt;/code&gt; 블록을 추가 할 수도 있습니다 . 다음은 위의 예와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="1fbc4f223b27881fb4f0e2162d0d3dba4c16acec" translate="yes" xml:space="preserve">
          <source>One common pitfall here is managing whitespace in the rendered HTML. We&amp;rsquo;ll talk about that at the end of this page.</source>
          <target state="translated">여기서 가장 일반적인 함정은 렌더링 된 HTML에서 공백을 관리하는 것입니다. 이 페이지의 끝에서 그것에 대해 이야기하겠습니다.</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="9a32db309e55307ccc8378ee296a11ae947849eb" translate="yes" xml:space="preserve">
          <source>Piped Text</source>
          <target state="translated">파이프 텍스트</target>
        </trans-unit>
        <trans-unit id="bbb40a6fe504f9aa59a8b4a6e3d57bfd7a6cef82" translate="yes" xml:space="preserve">
          <source>Plain Text</source>
          <target state="translated">일반 텍스트</target>
        </trans-unit>
        <trans-unit id="f7ad86140e023ee40ecbc1dcb9b4395b236da7e3" translate="yes" xml:space="preserve">
          <source>Plain text does still use tag and string &lt;a href=&quot;interpolation&quot;&gt;interpolation&lt;/a&gt;, but the first word on the line is not a Pug tag. And because plain text is not escaped, you can also include literal HTML.</source>
          <target state="translated">일반 텍스트는 여전히 태그 및 문자열 &lt;a href=&quot;interpolation&quot;&gt;보간&lt;/a&gt; 을 사용하지만 행의 첫 번째 단어는 퍼그 태그가 아닙니다. 일반 텍스트가 이스케이프되지 않기 때문에 리터럴 HTML도 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="555a2ba5933df029b8a3a9750f8a429a80b45639" translate="yes" xml:space="preserve">
          <source>Prefixed &lt;code&gt;each&lt;/code&gt; Syntax</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; 구문의 접두사</target>
        </trans-unit>
        <trans-unit id="5c370660dbd428d49dfea4bf413e76ac2b1616c4" translate="yes" xml:space="preserve">
          <source>Previous versions of Pug/Jade supported an interpolation syntax such as:</source>
          <target state="translated">Pug / Jade의 이전 버전은 다음과 같은 보간 구문을 지원했습니다.</target>
        </trans-unit>
        <trans-unit id="736f2dd581871952f35257be63727610a6d2d285" translate="yes" xml:space="preserve">
          <source>Previously, the undocumented &lt;code&gt;jade.doctype&lt;/code&gt; object contained a hash of &lt;a href=&quot;../language/doctype#doctype-shortcuts&quot;&gt;doctype shortcuts&lt;/a&gt;. By extending this object, users could create additional or modify existing doctype shortcuts.</source>
          <target state="translated">이전에는 문서화되지 않은 &lt;code&gt;jade.doctype&lt;/code&gt; 객체에 &lt;a href=&quot;../language/doctype#doctype-shortcuts&quot;&gt;doctype shortcuts&lt;/a&gt; 해시가 포함되어있었습니다 . 이 객체를 확장함으로써 사용자는 추가 된 doctype 단축키를 추가하거나 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdc976c72a58abe7881b005e6d7003f9c6f33a1a" translate="yes" xml:space="preserve">
          <source>Previously, the undocumented &lt;code&gt;jade.nodes&lt;/code&gt; object held a hash of classes that serve as the constructor of the nodes of the (also undocumented) Jade abstract syntax tree. In Pug v2, we have abandoned this approach in favor of duck typing using the &lt;code&gt;type&lt;/code&gt; property in AST nodes.</source>
          <target state="translated">이전에는 문서화되지 않은 &lt;code&gt;jade.nodes&lt;/code&gt; 객체는 (문서화되지 않은) Jade 추상 구문 트리의 노드 생성자로 사용되는 클래스 해시를 보유했습니다. Pug v2에서는 AST 노드 의 &lt;code&gt;type&lt;/code&gt; 속성을 사용하여 오리 입력을 선호하는이 방법을 포기했습니다 .</target>
        </trans-unit>
        <trans-unit id="79faa45c3ce2749355f43ca7818c41b0d9fc5662" translate="yes" xml:space="preserve">
          <source>Previously, the undocumented &lt;code&gt;jade.selfClosing&lt;/code&gt; array could used to extend or modify the behavior of &lt;a href=&quot;../language/tags#self-closing-tags&quot;&gt;self-closing tags&lt;/a&gt;.</source>
          <target state="translated">이전에는 문서화되지 않은 &lt;code&gt;jade.selfClosing&lt;/code&gt; 배열을 사용하여 &lt;a href=&quot;../language/tags#self-closing-tags&quot;&gt;자체 닫기 태그&lt;/a&gt; 의 동작을 확장하거나 수정할 수있었습니다 .</target>
        </trans-unit>
        <trans-unit id="11c0fcf8efff2122246542f306a46ab96d89db3f" translate="yes" xml:space="preserve">
          <source>Previously, the undocumented &lt;code&gt;jade.utils&lt;/code&gt; object contained three functions that are useful for template engine internals.</source>
          <target state="translated">이전에는 문서화되지 않은 &lt;code&gt;jade.utils&lt;/code&gt; 객체에는 템플릿 엔진 내부에 유용한 세 가지 기능이 포함되어있었습니다.</target>
        </trans-unit>
        <trans-unit id="d97b32f978ab9a9050270852511015ee3d8fad41" translate="yes" xml:space="preserve">
          <source>Previously, the undocumented Jade &lt;code&gt;compiler&lt;/code&gt;, &lt;code&gt;lexer&lt;/code&gt;, and &lt;code&gt;parser&lt;/code&gt; classes were exported through these properties. Users were allowed to create their own compilers, lexers, and parsers that derive from these classes, in order to customize compilation behaviors.</source>
          <target state="translated">이전에는 문서화되지 않은 Jade &lt;code&gt;compiler&lt;/code&gt; , &lt;code&gt;lexer&lt;/code&gt; 및 &lt;code&gt;parser&lt;/code&gt; 클래스가 이러한 특성을 통해 익스포트되었습니다. 사용자는 컴파일 동작을 사용자 정의하기 위해 이러한 클래스에서 파생 된 자체 컴파일러, 렉서 및 구문 분석기를 작성할 수있었습니다.</target>
        </trans-unit>
        <trans-unit id="0ecd7e2ad5a3a107b93ae34f6de656f53b5f063d" translate="yes" xml:space="preserve">
          <source>Production Defaults</source>
          <target state="translated">생산 기본값</target>
        </trans-unit>
        <trans-unit id="5685dd489fec8c7279215d28e6f207a5a64dbb51" translate="yes" xml:space="preserve">
          <source>Project Rename</source>
          <target state="translated">프로젝트 이름 바꾸기</target>
        </trans-unit>
        <trans-unit id="7882ed19f945bef86d660e5e10665ac9b58015f2" translate="yes" xml:space="preserve">
          <source>Pronounced as &amp;ldquo;and attributes&amp;rdquo;, the &lt;code&gt;&amp;amp;attributes&lt;/code&gt; syntax can be used to explode an object into attributes of an element.</source>
          <target state="translated">&quot;및 속성&quot;으로 발음되는 &lt;code&gt;&amp;amp;attributes&lt;/code&gt; 구문을 사용하면 객체를 요소의 속성으로 분해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="328a732e7d36df1ab0d2cdab11aadb3465566e0a" translate="yes" xml:space="preserve">
          <source>Pug</source>
          <target state="translated">Pug</target>
        </trans-unit>
        <trans-unit id="8c33c5fdabbfbfe74c97f618c47283cc7a9e9fdd" translate="yes" xml:space="preserve">
          <source>Pug 2 was released in August 2016. To make improvements in the new release possible, we had to make the decision of deprecating or removing some APIs and undocumented language features. We made an effort to make these changes as unintrusive as possible, and many of these changes were previously discouraged in console warnings.</source>
          <target state="translated">Pug 2는 2016 년 8 월에 릴리스되었습니다. 새 릴리스를 개선하려면 일부 API 및 문서화되지 않은 언어 기능을 더 이상 사용하지 않거나 제거하기로 결정했습니다. 우리는 이러한 변경 사항을 최대한 방해하지 않기 위해 노력했으며 이러한 변경 사항 중 많은 부분이 콘솔 경고에서 권장되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="503d96d595471ef4fc2ea609a793bc09d3c3b452" translate="yes" xml:space="preserve">
          <source>Pug &lt;em&gt;preserves&lt;/em&gt; whitespace &lt;em&gt;within&lt;/em&gt; elements, including:</source>
          <target state="translated">퍼그 는 다음을 포함하여 요소 &lt;em&gt;내에&lt;/em&gt; 공백을 &lt;em&gt;유지합니다&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e5cb06f315274005e6742c29c17a2af2b68a92f9" translate="yes" xml:space="preserve">
          <source>Pug Documentation</source>
          <target state="translated">퍼그 문서</target>
        </trans-unit>
        <trans-unit id="73c5c635188ad48b070d1dd7963434a749d8a013" translate="yes" xml:space="preserve">
          <source>Pug allows you to &lt;code&gt;replace&lt;/code&gt; (default), &lt;code&gt;prepend&lt;/code&gt;, or &lt;code&gt;append&lt;/code&gt; blocks.</source>
          <target state="translated">퍼그는 할 수 있습니다 &lt;code&gt;replace&lt;/code&gt; (기본값), &lt;code&gt;prepend&lt;/code&gt; 또는 &lt;code&gt;append&lt;/code&gt; 블록을.</target>
        </trans-unit>
        <trans-unit id="b1824136657233e309bd954e4df21423ee6fefb7" translate="yes" xml:space="preserve">
          <source>Pug allows you to write inline JavaScript code in your templates. There are three types of code: Unbuffered, Buffered, and Unescaped Buffered.</source>
          <target state="translated">Pug를 사용하면 템플릿에 인라인 JavaScript 코드를 작성할 수 있습니다. Unbuffered, Buffered 및 Unescaped Buffered의 세 가지 코드 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0464eabfbff85ac43ac3c9967d4cb78a7cf0b7dc" translate="yes" xml:space="preserve">
          <source>Pug also knows which elements are self-closing:</source>
          <target state="translated">퍼그 (Pug)는 또한 어떤 요소가 자동 폐쇄되는지 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5faaf0044a4fd4705598bf0bc5ad5a0e53f041c" translate="yes" xml:space="preserve">
          <source>Pug also lets you iterate over the keys in an object:</source>
          <target state="translated">Pug를 사용하면 객체의 키를 반복 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d891733144c6233e4d2781c4a4b54e8e5b5866c" translate="yes" xml:space="preserve">
          <source>Pug also provides the &lt;code&gt;&lt;a href=&quot;api/reference#pugrendersource-options-callback&quot;&gt;pug.render()&lt;/a&gt;&lt;/code&gt; family of functions that combine compiling and rendering into one step. However, the template function will be re-compiled every time &lt;code&gt;render&lt;/code&gt; is called, which might impact performance. Alternatively, you can use the &lt;code&gt;&lt;a href=&quot;api/reference#options-cache&quot;&gt;cache&lt;/a&gt;&lt;/code&gt; option with &lt;code&gt;render&lt;/code&gt;, which will automatically store the compiled function into an internal cache.</source>
          <target state="translated">Pug는 또한 컴파일과 렌더링을 한 단계로 결합하는 &lt;code&gt;&lt;a href=&quot;api/reference#pugrendersource-options-callback&quot;&gt;pug.render()&lt;/a&gt;&lt;/code&gt; 함수 군을 제공합니다 . 그러나 템플릿 함수는 &lt;code&gt;render&lt;/code&gt; 이 호출 될 때마다 다시 컴파일되므로 성능에 영향을 줄 수 있습니다. 또는 &lt;code&gt;&lt;a href=&quot;api/reference#options-cache&quot;&gt;cache&lt;/a&gt;&lt;/code&gt; 옵션을 &lt;code&gt;render&lt;/code&gt; 와 함께 사용 하면 컴파일 된 함수가 내부 캐시에 자동으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="bee54ce3d0d8f989713d60e1a72c7ab16713d284" translate="yes" xml:space="preserve">
          <source>Pug also provides the conditional &lt;code&gt;unless&lt;/code&gt;, which works like a negated &lt;code&gt;if&lt;/code&gt;. The following are equivalent:</source>
          <target state="translated">Pug는 또한 부정이 &lt;code&gt;if&lt;/code&gt; 것처럼 작동하는 &lt;code&gt;unless&lt;/code&gt; 하고 조건부를 제공합니다 . 다음은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="fa5fa5f5d885b96c794d13baee54c53686d8e8b3" translate="yes" xml:space="preserve">
          <source>Pug also supports block unbuffered code:</source>
          <target state="translated">퍼그는 또한 버퍼링되지 않은 코드 차단을 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="763f6efd010315adc29709db44f2359d674763fb" translate="yes" xml:space="preserve">
          <source>Pug also supports unbuffered comments. Simply add a hyphen (&lt;code&gt;-&lt;/code&gt;) to the start of the comment.</source>
          <target state="translated">퍼그는 버퍼되지 않은 주석도 지원합니다. 주석 시작 부분에 하이픈 ( &lt;code&gt;-&lt;/code&gt; )을 추가하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="df9f8b510c1b030a89c5023142eafd6f7dc124b6" translate="yes" xml:space="preserve">
          <source>Pug blocks can provide default content, if appropriate. Providing default content is purely optional, though. The example below defines &lt;code&gt;block scripts&lt;/code&gt;, &lt;code&gt;block content&lt;/code&gt;, and &lt;code&gt;block foot&lt;/code&gt;.</source>
          <target state="translated">퍼그 블록은 적절한 경우 기본 컨텐츠를 제공 할 수 있습니다. 기본 컨텐츠를 제공하는 것은 전적으로 선택 사항입니다. 아래 예제는 &lt;code&gt;block scripts&lt;/code&gt; , &lt;code&gt;block content&lt;/code&gt; 및 &lt;code&gt;block foot&lt;/code&gt; 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="c4168dc8dc48cbca8f4e2e1a51f8a653ac8447ca" translate="yes" xml:space="preserve">
          <source>Pug does not have any special syntax for conditional comments. (Conditional comments are a peculiar method of adding fallback markup for old versions of Internet Explorer.)</source>
          <target state="translated">퍼그에는 조건부 주석에 대한 특별한 구문이 없습니다. 조건부 주석은 이전 버전의 Internet Explorer에 대체 태그를 추가하는 고유 한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="96f6d75bb30d1173e2c525418ea52194c03b8e48" translate="yes" xml:space="preserve">
          <source>Pug fully integrates with &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;, a popular Node.js web framework, as a supported view engine. Check out Express&amp;rsquo;s excellent &lt;a href=&quot;https://expressjs.com/en/guide/using-template-engines.html&quot;&gt;guide&lt;/a&gt; for how to integrate Pug with Express.</source>
          <target state="translated">Pug 는 널리 사용되는 Node.js 웹 프레임 워크 인 &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; 와 지원되는 뷰 엔진으로 완전히 통합됩니다 . Pug와 Express를 통합하는 방법에 대한 Express의 우수한 &lt;a href=&quot;https://expressjs.com/en/guide/using-template-engines.html&quot;&gt;안내서&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="25e0635e1cf108146ac486e1bf4b73994cf4356a" translate="yes" xml:space="preserve">
          <source>Pug is available via &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;:</source>
          <target state="translated">퍼그는 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm을&lt;/a&gt; 통해 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="27e32443595d449c5ad15a2417a69d3048055959" translate="yes" xml:space="preserve">
          <source>Pug is smart enough to figure out where the expression ends, so you can even include &lt;code&gt;}&lt;/code&gt; without escaping.</source>
          <target state="translated">퍼그는 표현이 끝나는 위치를 알아낼 수있을 정도로 똑똑하므로 이스케이프없이 &lt;code&gt;}&lt;/code&gt; 를 포함시킬 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e8aab2012b4538eb272bbb5627ee78a82002968c" translate="yes" xml:space="preserve">
          <source>Pug provides four ways of getting &lt;em&gt;plain text&lt;/em&gt; &amp;mdash; that is, any code or text content that should go, mostly unprocessed, directly into the rendered HTML. They are useful in different situations.</source>
          <target state="translated">Pug는 &lt;em&gt;일반 텍스트&lt;/em&gt; 를 얻는 네 가지 방법 , 즉 대부분 처리되지 않은 코드 나 텍스트 내용을 렌더링 된 HTML로 직접 가져 오는 방법을 제공합니다 . 그들은 다른 상황에서 유용합니다.</target>
        </trans-unit>
        <trans-unit id="417b41711044e6b76149811545128eb7215bc4f5" translate="yes" xml:space="preserve">
          <source>Pug provides operators for a variety of your different interpolative needs.</source>
          <target state="translated">퍼그 (Pug)는 다양한 보간 요구에 대한 연산자를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d1add75acfaae3a1043e21bd0159761bee924220" translate="yes" xml:space="preserve">
          <source>Pug removes &lt;em&gt;indentation&lt;/em&gt;, and all whitespace &lt;em&gt;between elements&lt;/em&gt;.</source>
          <target state="translated">퍼그는 &lt;em&gt;들여 쓰기&lt;/em&gt; 와 &lt;em&gt;요소 사이의&lt;/em&gt; 모든 공백을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="fb07efa68271f0e8e536659d6fed4bd0dcd2f917" translate="yes" xml:space="preserve">
          <source>Pug supports template inheritance. Template inheritance works via the &lt;code&gt;block&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords.</source>
          <target state="translated">퍼그는 템플릿 상속을 지원합니다. 템플릿 상속은 &lt;code&gt;block&lt;/code&gt; 통해 작동 하며 키워드를 &lt;code&gt;extends&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="5b6e84508c0efb2aa91d1d6492f6e3a3bd544b22" translate="yes" xml:space="preserve">
          <source>Pug supports two primary methods of iteration: &lt;code&gt;each&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">Pug는 &lt;code&gt;each&lt;/code&gt; 과 &lt;code&gt;while&lt;/code&gt; 의 두 가지 주요 반복 방법을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="514fb4414c6ab52988e927d0b08153dbe31073a0" translate="yes" xml:space="preserve">
          <source>Pug v2 allows customization of the compilation process through plugins, and these exported properties are now removed.</source>
          <target state="translated">Pug v2를 사용하면 플러그인을 통해 컴파일 프로세스를 사용자 정의 할 수 있으며 내 보낸 속성이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="7d583b7ca376c1d74eb4ab81fd00ba54caa6b654" translate="yes" xml:space="preserve">
          <source>Pug&amp;rsquo;s first-class conditional syntax allows for optional parentheses.</source>
          <target state="translated">퍼그의 일류 조건부 구문은 선택적 괄호를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="a36653592f45d272975b6725219e1aa060ef32ac" translate="yes" xml:space="preserve">
          <source>Pug&amp;rsquo;s first-class iteration syntax makes it easier to iterate over arrays and objects in a template:</source>
          <target state="translated">퍼그의 일류 반복 구문을 사용하면 템플릿의 배열과 객체를보다 쉽게 ​​반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="086f8c88b013621c8270a242ba9d9edf637a7ef7" translate="yes" xml:space="preserve">
          <source>Pug&amp;rsquo;s template inheritance is a powerful feature that allows you to split complex page template structures into smaller, simpler files. However, if you chain many, many templates together, you can make things a lot more complicated for yourself.</source>
          <target state="translated">Pug의 템플릿 상속은 복잡한 페이지 템플릿 구조를 더 작고 간단한 파일로 나눌 수있는 강력한 기능입니다. 그러나 많은 템플릿을 함께 연결하면 작업을 훨씬 더 복잡하게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0428e68d161ad228e56e081d7d7760d0880e7a9" translate="yes" xml:space="preserve">
          <source>Quoted Attributes</source>
          <target state="translated">인용 속성</target>
        </trans-unit>
        <trans-unit id="b0c0414252fb4b3219feca19f06d1b08c72cbc76" translate="yes" xml:space="preserve">
          <source>Recommended Solutions</source>
          <target state="translated">권장 솔루션</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="04e3203842aa8c4a50e715d5b3cd7afd6a33284c" translate="yes" xml:space="preserve">
          <source>Removed API</source>
          <target state="translated">제거 된 API</target>
        </trans-unit>
        <trans-unit id="2fe64189d7381ba494fc774e567ae27c0663d5ac" translate="yes" xml:space="preserve">
          <source>Removed Language Features</source>
          <target state="translated">언어 기능 제거</target>
        </trans-unit>
        <trans-unit id="a47f32628e78e90cea3d9745d67cca468f7d000d" translate="yes" xml:space="preserve">
          <source>Rendered Whitespace</source>
          <target state="translated">렌더링 된 공백</target>
        </trans-unit>
        <trans-unit id="3c2cdf6104c8f21cf404f02b271b685b9f8bf092" translate="yes" xml:space="preserve">
          <source>Rest Arguments</source>
          <target state="translated">나머지 인수</target>
        </trans-unit>
        <trans-unit id="3b4b5044382e12c6aa60a8a03603546c4db5ee0e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;#pugcompilesource-options&quot;&gt;compileClient&lt;/a&gt;&lt;/code&gt;, except that this method returns an object of the form:</source>
          <target state="translated">이 메소드가 다음 형식의 오브젝트를 리턴한다는 점을 제외하고는 &lt;code&gt;&lt;a href=&quot;#pugcompilesource-options&quot;&gt;compileClient&lt;/a&gt;&lt;/code&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="4258513cfd50ef5bf79853489972b29d38684465" translate="yes" xml:space="preserve">
          <source>See the whitespace section in the &lt;a href=&quot;plain-text#whitespace-control&quot;&gt;Plain Text&lt;/a&gt; page for more discussion on this topic.</source>
          <target state="translated">이 주제에 대한 자세한 내용 은 &lt;a href=&quot;plain-text#whitespace-control&quot;&gt;일반 텍스트&lt;/a&gt; 페이지 의 공백 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="091a6847e80f8f6e58ab446255013d6e21fc3d12" translate="yes" xml:space="preserve">
          <source>Self-Closing Tags</source>
          <target state="translated">자체 결산 태그</target>
        </trans-unit>
        <trans-unit id="11eb3e6deb02bf7bec259f7c90806eb9a6699879" translate="yes" xml:space="preserve">
          <source>Simply remove &lt;code&gt;-&lt;/code&gt; and your code should work again.</source>
          <target state="translated">간단히 제거 &lt;code&gt;-&lt;/code&gt; 당신의 코드가 다시 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2d9124a8a73355087d832990edf86e54b9130dee" translate="yes" xml:space="preserve">
          <source>Simply write the attribute in JavaScript:</source>
          <target state="translated">JavaScript로 속성을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="2058296013babfa432245798dd03add34a24bb32" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;div&lt;/code&gt;'s are such a common choice of tag, it is the default if you omit the tag name:</source>
          <target state="translated">이후 &lt;code&gt;div&lt;/code&gt; 의 태그 같은 일반적인 선택이다, 당신이 태그 이름을 생략 할 경우 기본값은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="04c8dd7f05babb8f1c1580592f4b0fa86ca08b86" translate="yes" xml:space="preserve">
          <source>So&amp;hellip;Pug drops the whitespace between tags, but keeps the whitespace inside them. The value here is that it gives you full control over whether tags and/or plain text should touch. It even lets you place tags in the middle of words.</source>
          <target state="translated">따라서&amp;hellip; Pug는 태그 사이에 공백을 제거하지만 그 안에 공백을 유지합니다. 여기서 값은 태그 및 / 또는 일반 텍스트를 터치해야하는지 여부를 완전히 제어 할 수 있다는 것입니다. 단어 중간에 태그를 배치 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d4665142d2dbba94807b6f60252f2278fa98594" translate="yes" xml:space="preserve">
          <source>So, the closing tag of an HTML element will touch the opening tag of the next. This is generally not a problem for block-level elements like paragraphs, because they will still render as separate paragraphs in the web browser (unless you have changed their CSS &lt;code&gt;display&lt;/code&gt; property). See the methods described below, however, for when you do need to insert space between elements.</source>
          <target state="translated">따라서 HTML 요소의 닫는 태그는 다음의 여는 태그에 닿습니다. CSS &lt;code&gt;display&lt;/code&gt; 속성을 변경하지 않은 경우에는 여전히 웹 브라우저에서 별도의 단락으로 렌더링되므로 단락과 같은 블록 수준 요소에는 일반적으로 문제가되지 않습니다 . 그러나 요소 사이에 공간을 삽입해야하는 경우 아래 설명 된 방법을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b52fc92b6d0fdb74c6bacb6246b9a9c1f880a0ae" translate="yes" xml:space="preserve">
          <source>Specifically, when &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is set to &lt;code&gt;'production'&lt;/code&gt;, and Pug is used with Express, the &lt;code&gt;&lt;a href=&quot;reference#options&quot;&gt;compileDebug&lt;/a&gt;&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt; by default, while the &lt;code&gt;&lt;a href=&quot;reference#options&quot;&gt;cache&lt;/a&gt;&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">특히 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 가 &lt;code&gt;'production'&lt;/code&gt; 으로 설정 되고 Pug가 Express와 함께 사용되는 경우 &lt;code&gt;&lt;a href=&quot;reference#options&quot;&gt;compileDebug&lt;/a&gt;&lt;/code&gt; 옵션은 기본적으로 &lt;code&gt;false&lt;/code&gt; 이고, &lt;code&gt;&lt;a href=&quot;reference#options&quot;&gt;cache&lt;/a&gt;&lt;/code&gt; 옵션은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2b54828d8ab709886b896ceb7c0e6322fc8783b9" translate="yes" xml:space="preserve">
          <source>String Interpolation, Escaped</source>
          <target state="translated">이스케이프 된 문자열 보간</target>
        </trans-unit>
        <trans-unit id="0400597088b184d0aa42f7547cf26fb672874208" translate="yes" xml:space="preserve">
          <source>String Interpolation, Unescaped</source>
          <target state="translated">이스케이프 처리되지 않은 문자열 보간</target>
        </trans-unit>
        <trans-unit id="37505043ddb8e62c5892686d2654e7d331e24770" translate="yes" xml:space="preserve">
          <source>Style Attributes</source>
          <target state="translated">스타일 속성</target>
        </trans-unit>
        <trans-unit id="6709b386e62b6c7e9100b2a3d54454cef7613d5f" translate="yes" xml:space="preserve">
          <source>Suppose you have default scripts in a &lt;code&gt;head&lt;/code&gt; block that you wish to use on &lt;em&gt;every&lt;/em&gt; page. You might do this:</source>
          <target state="translated">&lt;em&gt;모든&lt;/em&gt; 페이지 에서 사용하려는 기본 스크립트가 &lt;code&gt;head&lt;/code&gt; 블록 에 있다고 가정 하십시오. 당신은 이것을 할 수 있습니다 :&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee28e36ab822d4670415e0b8860994ec31c24db3" translate="yes" xml:space="preserve">
          <source>Tag Interpolation</source>
          <target state="translated">태그 보간</target>
        </trans-unit>
        <trans-unit id="5f1dcfaa50981027a133d5ae2bcfa11f0afc0144" translate="yes" xml:space="preserve">
          <source>Tag attributes look similar to HTML (with optional commas), but their values are just regular JavaScript.</source>
          <target state="translated">태그 속성은 HTML과 유사하지만 (쉼표로 선택) 값은 일반적인 JavaScript입니다.</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="e3f5b07ef6fcbd5fb31ba626da5394551b109671" translate="yes" xml:space="preserve">
          <source>Tags such as &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;meta&lt;/code&gt;, and &lt;code&gt;link&lt;/code&gt; are automatically self-closing (unless you use the XML doctype).</source>
          <target state="translated">&lt;code&gt;img&lt;/code&gt; , &lt;code&gt;meta&lt;/code&gt; 및 &lt;code&gt;link&lt;/code&gt; 와 같은 태그 는 자동으로 자동 종료됩니다 (XML doctype을 사용하지 않는 한).</target>
        </trans-unit>
        <trans-unit id="d6b6bb3a1a939adefc8ad08e7880baf39f4c9d7b" translate="yes" xml:space="preserve">
          <source>Template Inheritance</source>
          <target state="translated">템플릿 상속</target>
        </trans-unit>
        <trans-unit id="2eca59143f9a4b8c46099f1a261ec7cd63e991b5" translate="yes" xml:space="preserve">
          <source>Templates pre-compiled on the server do not have this limitation.</source>
          <target state="translated">서버에서 사전 컴파일 된 템플릿에는이 제한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="a13dc4f48dd8b9cecba2d69d488fb9ee09689086" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;case&lt;/code&gt; statement is a shorthand for JavaScript&amp;rsquo;s &lt;code&gt;switch&lt;/code&gt; statement. It takes the following form:</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; 문은 자바 스크립트의에 대한 속기 &lt;code&gt;switch&lt;/code&gt; 문. 다음과 같은 형식이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="676d31408d63b69964f34e2ecf837472ec1ee700" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;class&lt;/code&gt; attribute can be a string, like any normal attribute; but it can also be an array of class names, which is handy when generated from JavaScript.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 속성은 일반 속성 같은 문자열이 될 수 있습니다; 그러나 클래스 이름의 배열 일 수도 있으며 JavaScript에서 생성 할 때 편리합니다.</target>
        </trans-unit>
        <trans-unit id="f0af46b97d17da16cbad5ba8a7e2346e8dccdf2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;client&lt;/code&gt; option was used for client function compilation. It was deprecated in favor of the &lt;code&gt;&lt;a href=&quot;reference#pugcompileclientsource-options&quot;&gt;compileClient&lt;/a&gt;&lt;/code&gt; function in 2013 year, and its use has been warned against since then.</source>
          <target state="translated">&lt;code&gt;client&lt;/code&gt; 옵션은 클라이언트 기능 컴파일에 사용되었다. 2013 년 에는 &lt;code&gt;&lt;a href=&quot;reference#pugcompileclientsource-options&quot;&gt;compileClient&lt;/a&gt;&lt;/code&gt; 함수 를 위해 사용되지 않으며 그 이후로 사용에 대해 경고되었습니다.</target>
        </trans-unit>
        <trans-unit id="b1a482d70b3f2656377959486db028f6ec217cf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;style&lt;/code&gt; attribute can be a string, like any normal attribute; but it can also be an object, which is handy when styles are generated by JavaScript.</source>
          <target state="translated">&lt;code&gt;style&lt;/code&gt; 속성은 일반 속성 같은 문자열이 될 수 있습니다; 자바 스크립트로 스타일을 생성 할 때 편리한 객체 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1de42e57648db3832c948b9cff088bdbc7730e9b" translate="yes" xml:space="preserve">
          <source>The Pug template to compile</source>
          <target state="translated">컴파일 할 퍼그 템플릿</target>
        </trans-unit>
        <trans-unit id="89338fd43ca16105840daee55c0f7c0b3f1e1bbe" translate="yes" xml:space="preserve">
          <source>The Pug v2 equivalent of classes are now part of the &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-code-gen&quot;&gt;pug-code-gen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-lexer&quot;&gt;pug-lexer&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-parser&quot;&gt;pug-parser&lt;/a&gt;&lt;/code&gt; packages, with various incompatible changes.</source>
          <target state="translated">Pug v2 클래스 클래스는 이제 &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-code-gen&quot;&gt;pug-code-gen&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-lexer&quot;&gt;pug-lexer&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;https://www.npmjs.com/package/pug-parser&quot;&gt;pug-parser&lt;/a&gt;&lt;/code&gt; 패키지의 일부이며 다양한 호환되지 않는 변경 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="114af88c332979d7fe5a8734d5a7ff8596b16576" translate="yes" xml:space="preserve">
          <source>The above example uses an object literal. But you can also use a variable whose value is an object, too. (See also: &lt;a href=&quot;mixins#mixin-attributes&quot;&gt;Mixin Attributes&lt;/a&gt;).</source>
          <target state="translated">위의 예제는 객체 리터럴을 사용합니다. 그러나 값이 객체 인 변수도 사용할 수 있습니다. (또한 &lt;a href=&quot;mixins#mixin-attributes&quot;&gt;Mixin 속성&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="d926323438fd0b762124e78c258e1739bd057b9d" translate="yes" xml:space="preserve">
          <source>The above solution works perfectly well, but is admittedly perhaps a little dangerous: many code editors by default will &lt;em&gt;remove&lt;/em&gt; trailing whitespace on save. You and all your contributors may have to configure your editors to prevent automatic trailing whitespace removal.</source>
          <target state="translated">위의 솔루션은 완벽하게 작동하지만 약간 위험합니다. 기본적으로 많은 코드 편집기 는 저장시 후행 공백을 &lt;em&gt;제거&lt;/em&gt; 합니다. 귀하와 모든 제공자는 자동 후행 공백 제거를 방지하기 위해 편집기를 구성해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ad0416e0326affabd3facb6977f681cf1b9a610" translate="yes" xml:space="preserve">
          <source>The compiled function can be re-used, and called with different sets of data.</source>
          <target state="translated">컴파일 된 함수를 재사용하고 다른 데이터 세트로 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d236d50802b5026d786ce0722f3d0de5b7747ae" translate="yes" xml:space="preserve">
          <source>The difference, however, is a fall through in JavaScript happens whenever a &lt;code&gt;break&lt;/code&gt; statement is not explicitly included; in Pug, it only happens when a block is completely missing.</source>
          <target state="translated">그러나 차이점은 &lt;code&gt;break&lt;/code&gt; 문이 명시 적으로 포함되지 않을 때마다 JavaScript에서 발생 한다는 것입니다. 퍼그에서는 블록이 완전히 없어진 경우에만 발생합니다.</target>
        </trans-unit>
        <trans-unit id="47b250830352f7adb0e93bba096477bf248f6702" translate="yes" xml:space="preserve">
          <source>The easiest way to add plain text is &lt;em&gt;inline&lt;/em&gt;. The first term on the line is the tag itself. Everything after the tag and one space will be the text contents of that tag. This is most useful when the plain text content is short (or if you don&amp;rsquo;t mind lines running long).</source>
          <target state="translated">일반 텍스트를 추가하는 가장 쉬운 방법은 &lt;em&gt;인라인&lt;/em&gt; 입니다. 라인의 첫 번째 용어는 태그 자체입니다. 태그와 공백 뒤에있는 모든 것은 해당 태그의 텍스트 내용이됩니다. 이것은 일반 텍스트 내용이 짧거나 줄이 길어도 신경 쓰지 않을 때 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b80bc54149a93518d53879c81d1750cffec54285" translate="yes" xml:space="preserve">
          <source>The filters are applied in reverse order. The text is first passed to the last filter; then, the result is passed to the second last filter, and so on.</source>
          <target state="translated">필터는 역순으로 적용됩니다. 텍스트는 먼저 마지막 필터로 전달됩니다. 그런 다음 결과는 두 번째 마지막 필터 등으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="a39fd510c7eed1a7c236a43dd6ae43aa5ce3ad50" translate="yes" xml:space="preserve">
          <source>The general rendering process of Pug is simple. &lt;code&gt;&lt;a href=&quot;api/reference#pugcompilesource-options&quot;&gt;pug.compile()&lt;/a&gt;&lt;/code&gt; will compile the Pug source code into a JavaScript function that takes a data object (called &amp;ldquo;&lt;code&gt;locals&lt;/code&gt;&amp;rdquo;) as an argument. Call that resultant function with your data, and &lt;em&gt;voil&amp;agrave;!&lt;/em&gt;, it will return a string of HTML rendered with your data.</source>
          <target state="translated">퍼그의 일반적인 렌더링 과정은 간단합니다. &lt;code&gt;&lt;a href=&quot;api/reference#pugcompilesource-options&quot;&gt;pug.compile()&lt;/a&gt;&lt;/code&gt; 은 Pug 소스 코드를 데이터 객체 ( &quot; &lt;code&gt;locals&lt;/code&gt; &quot;)를 인수 로 사용하는 JavaScript 함수로 컴파일합니다 . 결과 함수를 데이터와 함께 호출하십시오 &lt;em&gt;! &lt;/em&gt;데이터로 렌더링 된 HTML 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1e0670b91d5347c753bc0b3f2796253e05ed9c56" translate="yes" xml:space="preserve">
          <source>The name of the file being compiled. Used in exceptions, and required for relative &lt;code&gt;include&lt;/code&gt;\s and &lt;code&gt;extend&lt;/code&gt;\s. Defaults to &lt;code&gt;'Pug'&lt;/code&gt;.</source>
          <target state="translated">컴파일중인 파일의 이름입니다. 예외에 사용되며 상대 &lt;code&gt;include&lt;/code&gt; \ s 및 &lt;code&gt;extend&lt;/code&gt; \ s에 필요합니다. 기본값은 &lt;code&gt;'Pug'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8933445353959ec17d86a623f17147cec5b5e9e6" translate="yes" xml:space="preserve">
          <source>The name of the template function. Only applies to &lt;code&gt;compileClient&lt;/code&gt; functions. Defaults to &lt;code&gt;'template'&lt;/code&gt;.</source>
          <target state="translated">템플릿 함수의 이름입니다. &lt;code&gt;compileClient&lt;/code&gt; 함수 에만 적용됩니다 . 기본값은 &lt;code&gt;'template'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d2c0811713407f4edcba814c094e349ed5c62496" translate="yes" xml:space="preserve">
          <source>The object or array to iterate over is just plain JavaScript. So, it can be a variable, or the result of a function call, or almost anything else.</source>
          <target state="translated">반복 할 객체 또는 배열은 단순한 JavaScript입니다. 따라서 변수이거나 함수 호출의 결과 또는 거의 모든 것이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5afd520a9f5b27aebd1de05d406506953cb71db" translate="yes" xml:space="preserve">
          <source>The path to a Pug file</source>
          <target state="translated">퍼그 파일의 경로</target>
        </trans-unit>
        <trans-unit id="6952a62a4b489d9ef8f35bd3e630da2b38e0ebbd" translate="yes" xml:space="preserve">
          <source>The path to the Pug file to render</source>
          <target state="translated">렌더링 할 퍼그 파일의 경로</target>
        </trans-unit>
        <trans-unit id="24a01ebd8688d0618448a9365a42e9d87280a83b" translate="yes" xml:space="preserve">
          <source>The resulting HTML string</source>
          <target state="translated">결과 HTML 문자열</target>
        </trans-unit>
        <trans-unit id="02426fba9a81dd96d04f24759c9c72a19474fb6c" translate="yes" xml:space="preserve">
          <source>The root directory of all absolute inclusion.</source>
          <target state="translated">모든 절대 포함의 루트 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="dfb26fd04379cfdbff3d4df3715d709b9403b126" translate="yes" xml:space="preserve">
          <source>The source Pug template to compile</source>
          <target state="translated">컴파일 할 소스 퍼그 템플릿</target>
        </trans-unit>
        <trans-unit id="4a331d704aac5089f5e9f54a4d22467561e060f5" translate="yes" xml:space="preserve">
          <source>The source Pug template to render</source>
          <target state="translated">렌더링 할 소스 퍼그 템플릿</target>
        </trans-unit>
        <trans-unit id="f2a7b74930a67c4129b810ec29d0fa7805af3039" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;+link(class=&quot;btn&quot;)&lt;/code&gt; is also valid and equivalent to &lt;code&gt;+link()(class=&quot;btn&quot;)&lt;/code&gt;, since Pug tries to detect if parentheses&amp;rsquo; contents are attributes or arguments. Nevertheless, we encourage you to use the second syntax, as you pass explicitly no arguments and you ensure the first parenthesis is the arguments list.</source>
          <target state="translated">Pug는 괄호의 내용이 속성 또는 인수인지 여부를 감지하기 때문에 &lt;code&gt;+link(class=&quot;btn&quot;)&lt;/code&gt; 구문 도 유효하며 &lt;code&gt;+link()(class=&quot;btn&quot;)&lt;/code&gt; 와 같습니다. 그럼에도 불구하고 명시 적으로 인수를 전달하지 않고 첫 번째 괄호가 인수 목록인지 확인하기 때문에 두 번째 구문을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="27b9ab5ff54d9062f6de36675fa17bf784a880f3" translate="yes" xml:space="preserve">
          <source>The tag interpolation syntax is especially useful for inline tags, where whitespace before and after the tag is significant.</source>
          <target state="translated">태그 보간 구문은 태그 앞뒤의 공백이 중요한 인라인 태그에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b417c9ea9973497f4deeac6d7f7f17069913641d" translate="yes" xml:space="preserve">
          <source>The trade-off is that it &lt;em&gt;requires&lt;/em&gt; you to think about and take control over whether tags and text touch.</source>
          <target state="translated">단점 &lt;em&gt;은&lt;/em&gt; 태그와 텍스트의 터치 여부를 생각하고 제어해야한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a9a548a3553082853b4a9507559f92ce4958807a" translate="yes" xml:space="preserve">
          <source>Then, we compile the Pug file into a function string.</source>
          <target state="translated">그런 다음 Pug 파일을 함수 문자열로 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="6f8c5955e24056929524ca5f54b8163f8342941b" translate="yes" xml:space="preserve">
          <source>There are shortcuts for commonly used doctypes:</source>
          <target state="translated">일반적으로 사용되는 doctype에 대한 바로 가기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd17947b5da34deb61832aa2b9d010eeec9468b6" translate="yes" xml:space="preserve">
          <source>There should be no space between the tag and the dot. Plain text contents of the tag must be indented one level:</source>
          <target state="translated">태그와 점 사이에 공백이 없어야합니다. 태그의 일반 텍스트 내용은 한 단계 만 들여 써야합니다.</target>
        </trans-unit>
        <trans-unit id="e2cdc8b5db7eb3c8e9d0a38fd0a12a49c1935488" translate="yes" xml:space="preserve">
          <source>These are only for commenting on the Pug code itself, and &lt;em&gt;do not&lt;/em&gt; appear in the rendered HTML.</source>
          <target state="translated">이것들은 퍼그 코드 자체에 대한 주석 일 뿐이며 렌더링 된 HTML &lt;em&gt;에는&lt;/em&gt; 나타나지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="207b62be5649ddea40d449f57994780c725e0cb7" translate="yes" xml:space="preserve">
          <source>These exported properties and compilation options have been removed. In your application, make sure you are not using these APIs.</source>
          <target state="translated">내 보낸 속성 및 컴파일 옵션이 제거되었습니다. 애플리케이션에서 이러한 API를 사용하지 않는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4b9f8c7b1c4b9237fdba7c1ffb34cbfccb1da026" translate="yes" xml:space="preserve">
          <source>These options were used in conjunction with the removed &lt;a href=&quot;#compiler-lexer-parser&quot;&gt;&lt;code&gt;Compiler&lt;/code&gt;, &lt;code&gt;Lexer&lt;/code&gt;, and &lt;code&gt;Parser&lt;/code&gt; classes&lt;/a&gt;.</source>
          <target state="translated">이러한 옵션은 제거 된 &lt;a href=&quot;#compiler-lexer-parser&quot;&gt; &lt;code&gt;Compiler&lt;/code&gt; , &lt;code&gt;Lexer&lt;/code&gt; 및 &lt;code&gt;Parser&lt;/code&gt; 클래스&lt;/a&gt; 와 함께 사용되었습니다 .</target>
        </trans-unit>
        <trans-unit id="0f14e948226caf90553eb0e054f2fdd753d99e31" translate="yes" xml:space="preserve">
          <source>This article details how you can convert your application to Pug v2 from Jade.</source>
          <target state="translated">이 기사에서는 애플리케이션을 Jade에서 Pug v2로 변환하는 방법을 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="0379e3a5e0f011bcb7d7e67f2f03fa15f6e33c45" translate="yes" xml:space="preserve">
          <source>This article details how you can convert your application to the latest version of Pug.</source>
          <target state="translated">이 문서에서는 응용 프로그램을 최신 버전의 Pug로 변환하는 방법에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d477751cc0fed160fb56b2abda33d04724c51a61" translate="yes" xml:space="preserve">
          <source>This can be any valid Javascript expression, so you can do whatever feels good.</source>
          <target state="translated">이것은 유효한 자바 스크립트 표현식 일 수 있으므로 기분이 좋을 때는 무엇이든 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c4b1818f921a3921e2e5cb6350234ca7cfba99c" translate="yes" xml:space="preserve">
          <source>This includes &lt;a href=&quot;code#unbuffered-code&quot;&gt;unbuffered code&lt;/a&gt;, which can also contain markup. If you need to define variables for use in a child template, you can do so a few different ways:</source>
          <target state="translated">여기에는 마크 업을 포함 할 수있는 &lt;a href=&quot;code#unbuffered-code&quot;&gt;버퍼되지 않은 코드가&lt;/a&gt; 포함됩니다 . 하위 템플릿에서 사용할 변수를 정의해야하는 경우 몇 가지 다른 방법으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a6697d6a3711af6ffd345a22bbc2890c2cc2d99" translate="yes" xml:space="preserve">
          <source>This object has the same semantics as the &lt;a href=&quot;#options&quot;&gt;&lt;code&gt;filters&lt;/code&gt; option&lt;/a&gt;, but applies globally to all Pug compilation. When a filter is present in both &lt;code&gt;pug.filters&lt;/code&gt; and &lt;code&gt;options.filters&lt;/code&gt;, the &lt;code&gt;filters&lt;/code&gt; option takes precedence.</source>
          <target state="translated">이 객체는 &lt;a href=&quot;#options&quot;&gt; &lt;code&gt;filters&lt;/code&gt; 옵션&lt;/a&gt; 과 동일한 의미를 갖지만 모든 퍼그 컴파일에 전체적으로 적용됩니다. 필터가 모두 존재하는 경우 &lt;code&gt;pug.filters&lt;/code&gt; 및 &lt;code&gt;options.filters&lt;/code&gt; 상기 &lt;code&gt;filters&lt;/code&gt; 옵션 우선한다.</target>
        </trans-unit>
        <trans-unit id="879a8d23a2199070fa8a6b3c4af10724695c1fc5" translate="yes" xml:space="preserve">
          <source>This page details how to render Pug using the JavaScript API.</source>
          <target state="translated">이 페이지는 JavaScript API를 사용하여 Pug를 렌더링하는 방법을 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="9c8cdd5360bdac30605f8ae4019939f1f1e18d25" translate="yes" xml:space="preserve">
          <source>This property has been deprecated in favor of the &lt;a href=&quot;#options&quot;&gt;&lt;code&gt;filters&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;#options&quot;&gt;옵션&lt;/a&gt; 은 &lt;code&gt;filters&lt;/code&gt; 옵션 을 위해 사용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="219280166118249abe7333357fbeca1ccb5f0e10" translate="yes" xml:space="preserve">
          <source>This syntax is &lt;strong&gt;no longer supported.&lt;/strong&gt; Alternatives are found below. (Check our &lt;a href=&quot;../api/migration-v2&quot;&gt;migration guide&lt;/a&gt; for more information on other incompatibilities between Pug v2 and previous versions.)</source>
          <target state="translated">이 구문은 &lt;strong&gt;더 이상 지원되지 않습니다. &lt;/strong&gt;대안은 다음과 같습니다. Pug v2와 이전 버전 간의 다른 비 호환성에 대한 자세한 내용은 &lt;a href=&quot;../api/migration-v2&quot;&gt;마이그레이션 안내서&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ae0352e3f630d84888730fce500637a546dd366" translate="yes" xml:space="preserve">
          <source>To extend this layout, create a new file and use the &lt;code&gt;extends&lt;/code&gt; directive with a path to the parent template. (If no file extension is given, &lt;code&gt;.pug&lt;/code&gt; is automatically appended to the file name.) Then, define one or more blocks to override the parent block content.</source>
          <target state="translated">이 레이아웃을 확장하려면 새 파일을 만들고 부모 템플릿의 경로와 함께 &lt;code&gt;extends&lt;/code&gt; 지시문을 사용하십시오 . 파일 확장자를 지정하지 않으면 &lt;code&gt;.pug&lt;/code&gt; 가 파일 이름에 자동으로 추가됩니다. 그런 다음 하나 이상의 블록을 정의하여 상위 블록 컨텐츠를 대체하십시오.</target>
        </trans-unit>
        <trans-unit id="692a707ce60ee9b7624c3513175ed4df1865166c" translate="yes" xml:space="preserve">
          <source>To override the defaults for &lt;code&gt;compileDebug&lt;/code&gt; and &lt;code&gt;cache&lt;/code&gt;, you can set the respective property in &lt;code&gt;app.locals&lt;/code&gt; or &lt;code&gt;res.locals&lt;/code&gt; objects to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;cache&lt;/code&gt; option can also be overriden through Express&amp;rsquo;s &lt;code&gt;app.disable&lt;/code&gt;/&lt;code&gt;enable('view cache')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compileDebug&lt;/code&gt; 및 &lt;code&gt;cache&lt;/code&gt; 의 기본값을 재정의하려면 &lt;code&gt;app.locals&lt;/code&gt; 또는 &lt;code&gt;res.locals&lt;/code&gt; 객체 의 각 속성 을 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 로 설정할 수 있습니다 . &lt;code&gt;cache&lt;/code&gt; 옵션은 익스프레스의를 통해 오버라이드 (override) 할 수 있습니다 &lt;code&gt;app.disable&lt;/code&gt; / &lt;code&gt;enable('view cache')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="35a7cef10259c8b252f2b8a54ff4edf082492ece" translate="yes" xml:space="preserve">
          <source>To pass options to the filter, add them inside parentheses after the filter name (just as you would do with &lt;a href=&quot;attributes&quot;&gt;tag attributes&lt;/a&gt;): &lt;code&gt;:less(ieCompat=false)&lt;/code&gt;.</source>
          <target state="translated">필터에 옵션을 전달하려면 &lt;a href=&quot;attributes&quot;&gt;태그&lt;/a&gt; 이름과 같이 필터 이름 뒤에 괄호 안에 옵션을 추가하십시오 . &lt;code&gt;:less(ieCompat=false)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de83d790d1e570130d9c2727f8aec72a7c253fb0" translate="yes" xml:space="preserve">
          <source>To save space, Pug provides an inline syntax for nested tags.</source>
          <target state="translated">공간을 절약하기 위해 Pug는 중첩 태그에 대한 인라인 구문을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bb78a591ac3c57f50ae492500df37a719b1d4724" translate="yes" xml:space="preserve">
          <source>Unbuffered Code</source>
          <target state="translated">버퍼되지 않은 코드</target>
        </trans-unit>
        <trans-unit id="1e4587dd8a9ab72eb784332d749a41f9a6e1bb12" translate="yes" xml:space="preserve">
          <source>Unbuffered code starts with &lt;code&gt;-&lt;/code&gt;. It does not directly add anything to the output.</source>
          <target state="translated">버퍼되지 않은 코드는 &lt;code&gt;-&lt;/code&gt; 로 시작합니다 . 출력에 직접 아무것도 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="71a66268a553484ba71737c3115d577299772399" translate="yes" xml:space="preserve">
          <source>Unescaped Attributes</source>
          <target state="translated">이스케이프되지 않은 속성</target>
        </trans-unit>
        <trans-unit id="0fd830e78839f0a162f17a3ccc86dc8a18fa6e86" translate="yes" xml:space="preserve">
          <source>Unescaped Buffered Code</source>
          <target state="translated">이스케이프 처리되지 않은 버퍼링 된 코드</target>
        </trans-unit>
        <trans-unit id="d1024129ad908f5366f60f16e7089d1207f45e1d" translate="yes" xml:space="preserve">
          <source>Unescaped buffered code can also be written inline with attributes, and supports the full range of JavaScript expressions:</source>
          <target state="translated">이스케이프 처리되지 않은 버퍼링 된 코드는 속성과 함께 인라인으로 작성 될 수 있으며 모든 JavaScript 표현식을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="baa3b641296d8e2c499c24a60968d658de5a05f3" translate="yes" xml:space="preserve">
          <source>Unescaped buffered code starts with &lt;code&gt;!=&lt;/code&gt;. It evaluates the JavaScript expression and outputs the result. Unescaped buffered code does not perform any escaping, so is unsafe for user input:</source>
          <target state="translated">이스케이프 처리되지 않은 버퍼링 된 코드는 &lt;code&gt;!=&lt;/code&gt; 시작합니다 . JavaScript 표현식을 평가하고 결과를 출력합니다. 이스케이프 처리되지 않은 버퍼 코드는 이스케이프를 수행하지 않으므로 사용자 입력에 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bfc0caf9cd72ad63b26f50d6186e142b0905f202" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;self&lt;/code&gt; namespace to hold the locals. It will speed up the compilation, but instead of writing &lt;code&gt;variable&lt;/code&gt; you will have to write &lt;code&gt;self.variable&lt;/code&gt; to access a property of the locals object. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">로컬 이름을 보유하려면 &lt;code&gt;self&lt;/code&gt; 네임 스페이스를 사용하십시오 . 컴파일 속도는 빨라지지만 &lt;code&gt;variable&lt;/code&gt; 를 쓰는 대신 locals 객체의 속성에 액세스하려면 &lt;code&gt;self.variable&lt;/code&gt; 을 작성 해야 합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="66f6748c2ab1834daeae77187a96b04e50949858" translate="yes" xml:space="preserve">
          <source>We dropped support for node versions prior to 10.0.0. We recommend upgrading all projects using pug to node.js 12, but we will support 10 until April 2021.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4676a654fd111d10df09d70c0e042820762622b" translate="yes" xml:space="preserve">
          <source>We removed support for interpolation in attributes since the implementation was unnecessarily complex, and the feature tended to discourage users from learning that they can just use any JavaScript value in place of attributes. Check our &lt;a href=&quot;../language/attributes#attribute-interpolation&quot;&gt;attribute documentation&lt;/a&gt; for more information on attribute syntax.</source>
          <target state="translated">구현이 불필요하게 복잡했기 때문에 속성의 보간에 대한 지원을 제거했으며이 기능은 사용자가 속성 대신 JavaScript 값만 사용할 수 있다는 것을 배우지 못하게하는 경향이있었습니다. 속성 구문에 대한 자세한 내용은 &lt;a href=&quot;../language/attributes#attribute-interpolation&quot;&gt;속성 설명서&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="569ab5952c739132b7b8b7691baa701a324e6e43" translate="yes" xml:space="preserve">
          <source>We removed the legacy syntax for calling a &lt;a href=&quot;../language/mixins&quot;&gt;mixin&lt;/a&gt; to make it easier to differentiate between declarations and calls. (All uses of the old syntax caused warnings in Jade v1.)</source>
          <target state="translated">선언과 호출을보다 쉽게 ​​구분할 수 있도록 &lt;a href=&quot;../language/mixins&quot;&gt;믹스 인&lt;/a&gt; 호출에 대한 레거시 구문을 제거했습니다 . (이전 구문을 모두 사용하면 Jade v1에서 경고가 발생했습니다.)</target>
        </trans-unit>
        <trans-unit id="7b9651c945b7722e109f3f7c22be6aa9d23d8c68" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;block append&lt;/code&gt; or &lt;code&gt;block prepend&lt;/code&gt;, the word &amp;ldquo;&lt;code&gt;block&lt;/code&gt;&amp;rdquo; is optional:</source>
          <target state="translated">&lt;code&gt;block append&lt;/code&gt; 또는 &lt;code&gt;block prepend&lt;/code&gt; 를 사용할 때 &amp;ldquo; &lt;code&gt;block&lt;/code&gt; &amp;rdquo; 이라는 단어 는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="8e3fb6b9dddf2cf75633e30c42b159d65aafe736" translate="yes" xml:space="preserve">
          <source>Whitespace Control</source>
          <target state="translated">공백 제어</target>
        </trans-unit>
        <trans-unit id="d347d79d6817d0c21a3c74cd4b529805ca825e4a" translate="yes" xml:space="preserve">
          <source>Whitespace is removed from the beginning and end of tags, so that you have control over whether the rendered HTML elements touch or not. Whitespace control is generally handled via &lt;a href=&quot;plain-text#whitespace-control&quot;&gt;plain text&lt;/a&gt;.</source>
          <target state="translated">태그의 시작과 끝에서 공백이 제거되므로 렌더링 된 HTML 요소가 닿는 지 여부를 제어 할 수 있습니다. 공백 제어는 일반적으로 &lt;a href=&quot;plain-text#whitespace-control&quot;&gt;일반 텍스트&lt;/a&gt; 를 통해 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="e9d5c60e3f1599e9730f61080a89c6bee605149f" translate="yes" xml:space="preserve">
          <source>Whole lines are also treated as plain text when they begin with a left angle bracket (&lt;code&gt;&amp;lt;&lt;/code&gt;), which may occasionally be useful for writing literal HTML tags in places that could otherwise be inconvenient. For example, one use case is &lt;a href=&quot;comments#conditional-comments&quot;&gt;conditional comments&lt;/a&gt;. Since literal HTML tags do not get processed, they do not self-close, unlike Pug tags.</source>
          <target state="translated">또한 전체 행은 왼쪽 꺾쇠 괄호 ( &lt;code&gt;&amp;lt;&lt;/code&gt; )로 시작할 때 일반 텍스트로 취급되며 , 그렇지 않은 경우 리터럴 HTML 태그를 작성하는 데 유용 할 수 있습니다. 예를 들어, 하나의 유스 케이스는 &lt;a href=&quot;comments#conditional-comments&quot;&gt;조건부 주석&lt;/a&gt; 입니다. 리터럴 HTML 태그는 처리되지 않으므로 Pug 태그와 달리 자체 닫히지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7abf639e5390f7e4b03c84d9b57e364486c51d26" translate="yes" xml:space="preserve">
          <source>You can add your own filters to Pug via the &lt;a href=&quot;../api/reference#options&quot;&gt;&lt;code&gt;filters&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/reference#options&quot;&gt; &lt;code&gt;filters&lt;/code&gt; 옵션을&lt;/a&gt; 통해 자신의 필터를 퍼그에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2dfe777bc4327a752af5d63478549c14a9934925" translate="yes" xml:space="preserve">
          <source>You can also apply filters to external files, using the &lt;a href=&quot;includes#including-filtered-text&quot;&gt;include syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;includes#including-filtered-text&quot;&gt;include 구문을&lt;/a&gt; 사용하여 외부 파일에 필터를 적용 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4a3ba54f365603eaf2665e6fc6832d002b8dec42" translate="yes" xml:space="preserve">
          <source>You can also create a dot block of plain text &lt;em&gt;after&lt;/em&gt; other tags within the parent tag.</source>
          <target state="translated">부모 태그 내에서 다른 태그 &lt;em&gt;다음&lt;/em&gt; 에 일반 텍스트의 도트 블록을 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d3fc8162c0a69717b27d124c6a410aa158f8f72a" translate="yes" xml:space="preserve">
          <source>You can also explicitly self close a tag by appending the &lt;code&gt;/&lt;/code&gt; character. Only do this if you know what you&amp;rsquo;re doing.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; 문자 를 추가하여 태그를 명시 적으로 자체 닫을 수도 있습니다 . 현재하고있는 일을 알고있는 경우에만이 작업을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e1c17e1bce661b36ce0108ac4e86710a85aa258b" translate="yes" xml:space="preserve">
          <source>You can also get the index as you iterate:</source>
          <target state="translated">반복하면서 인덱스를 얻을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="96db0c7c130fa8e0158ddddfd071a5b9782f6b89" translate="yes" xml:space="preserve">
          <source>You can also set default values for you &lt;code&gt;arguments&lt;/code&gt;. Same as setting &lt;em&gt;default function parameters&lt;/em&gt; in ES6.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 대한 기본값을 설정할 수도 있습니다 . ES6의 &lt;em&gt;기본 기능 매개 변수&lt;/em&gt; 설정과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="140f0af2188ef08ff9629b47ce82513ad016b517" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;for&lt;/code&gt; as an alias of &lt;code&gt;each&lt;/code&gt;.</source>
          <target state="translated">당신은 또한 사용할 수 있습니다 &lt;code&gt;for&lt;/code&gt; 의 별칭으로 &lt;code&gt;each&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0027fff4550a676a36eee166a95637892b252b95" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;while&lt;/code&gt; to create a loop:</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 을 사용하여 루프를 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2c557e99f5f235121d51f1ce2823498ab8b8d9bd" translate="yes" xml:space="preserve">
          <source>You can also use mixins with &lt;a href=&quot;attributes#attributes&quot;&gt;&lt;code&gt;&amp;amp;attributes&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;attributes#attributes&quot;&gt; &lt;code&gt;&amp;amp;attributes&lt;/code&gt; &lt;/a&gt; 와 함께 믹스 인을 사용할 수도 있습니다 :</target>
        </trans-unit>
        <trans-unit id="01a53d551774cbc3eadfc7495f3a2abde960427b" translate="yes" xml:space="preserve">
          <source>You can also use your own literal custom doctype:</source>
          <target state="translated">고유 한 리터럴 사용자 정의 doctype을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1b5f71f72b7d45939001da55dffe5258ed86ed1" translate="yes" xml:space="preserve">
          <source>You can apply multiple filters on the same block of text. To do so, simply specify the filters on the same line.</source>
          <target state="translated">동일한 텍스트 블록에 여러 필터를 적용 할 수 있습니다. 이렇게하려면 동일한 줄에 필터를 지정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="7194b592132f3a9ef496694aad72b908432ae04f" translate="yes" xml:space="preserve">
          <source>You can combine filters with includes, allowing you to filter things as you include them.</source>
          <target state="translated">필터를 포함과 결합하여 포함 할 때 항목을 필터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb8e9e22d3380e6a8f573809ce2065c5ed955d70" translate="yes" xml:space="preserve">
          <source>You can use fall through, just as you would in a JavaScript &lt;code&gt;switch&lt;/code&gt; statement.</source>
          <target state="translated">JavaScript &lt;code&gt;switch&lt;/code&gt; 문 에서와 마찬가지로 fall through를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5a33f6908b5b7dd5b41b15d80e117f423907aed" translate="yes" xml:space="preserve">
          <source>You can write mixins that take an unknown number of arguments using the &amp;ldquo;rest arguments&amp;rdquo; syntax.</source>
          <target state="translated">&quot;rest arguments&quot;구문을 사용하여 알 수없는 수의 인수를 사용하는 믹스 인을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22fc2a02ae203a9327035c713de9a92f2684c732" translate="yes" xml:space="preserve">
          <source>You could accomplish the same thing by writing an HTML tag inline with your Pug&amp;hellip;but then, what&amp;rsquo;s the point of writing the Pug? Wrap an inline Pug tag declaration in &lt;code&gt;#[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;, and it&amp;rsquo;ll be evaluated and buffered into the content of its containing tag.</source>
          <target state="translated">Pug와 함께 HTML 태그를 인라인으로 작성하여 동일한 작업을 수행 할 수 있지만 Pug 작성의 요점은 무엇입니까? &lt;code&gt;#[&lt;/code&gt; 및 &lt;code&gt;]&lt;/code&gt; 에 인라인 퍼그 태그 선언을 래핑하면 평가하고 포함하는 태그의 내용으로 버퍼링됩니다.</target>
        </trans-unit>
        <trans-unit id="368b0c47ac39bd296562bb85cad76861238c59bd" translate="yes" xml:space="preserve">
          <source>You could add one or more empty piped lines &amp;mdash; a pipe with either spaces or nothing after it. This will insert whitespace in the rendered HTML.</source>
          <target state="translated">하나 이상의 빈 파이프 라인 (공백이 있거나 뒤에는없는 파이프)을 추가 할 수 있습니다. 렌더링 된 HTML에 공백이 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="9763017d4a5acd93eb00a275db46cfe36c6a10f3" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to play it safe. You can buffer unescaped values into your templates, too.</source>
          <target state="translated">당신은하지 않습니다 &lt;em&gt;이&lt;/em&gt; 안전하게 플레이 할 수 있습니다. 이스케이프 처리되지 않은 값을 템플릿에 버퍼링 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3101d0f541ccb604a9734400e64f83474bcee03" translate="yes" xml:space="preserve">
          <source>You just need to remember two main points about how whitespace works. When compiling to HTML:</source>
          <target state="translated">공백의 작동 방식에 대한 두 가지 주요 요점 만 기억하면됩니다. HTML로 컴파일 할 때 :</target>
        </trans-unit>
        <trans-unit id="5af61aa7ac13cbcc00cd2035902559cd2b6eb760" translate="yes" xml:space="preserve">
          <source>You should only use this method if you need &lt;code&gt;dependencies&lt;/code&gt; to implement something like watching for changes to the Pug files.</source>
          <target state="translated">퍼그 파일의 변경을 감시하는 것과 같은 것을 구현하기 위해 &lt;code&gt;dependencies&lt;/code&gt; 이 필요한 경우에만이 방법을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="a5703207a34479345963bfa4458ed83030a2dac8" translate="yes" xml:space="preserve">
          <source>[Deprecated.] Adds whitespace to the resulting HTML to make it easier for a human to read using &lt;code&gt;'&amp;nbsp;&amp;nbsp;'&lt;/code&gt; as indentation. If a string is specified, that will be used as indentation instead (e.g. &lt;code&gt;'\t'&lt;/code&gt;). We strongly recommend against using this option. Too often, it creates subtle bugs in your templates because of the way it alters the interpretation and rendering of whitespace, and so this feature is going to be removed. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">[더 이상 사용되지 않음] 결과 HTML에 공백을 추가하여 인간이 &lt;code&gt;'&amp;nbsp;&amp;nbsp;'&lt;/code&gt; 를 들여 쓰기로 사용하여 쉽게 읽을 수 있도록합니다 . 문자열이 지정되면 대신 들여 쓰기로 사용됩니다 (예 : &lt;code&gt;'\t'&lt;/code&gt; ). 이 옵션을 사용하지 않는 것이 좋습니다. 공백의 해석과 렌더링을 변경하는 방식으로 인해 템플릿에 미묘한 버그가 발생하는 경우가 많으므로이 기능은 제거됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="094091b906a9de0ebf75cbf6a009f5b256bde470" translate="yes" xml:space="preserve">
          <source>all whitespace in the middle of a line of text.</source>
          <target state="translated">텍스트 줄 중간에있는 모든 공백.</target>
        </trans-unit>
        <trans-unit id="947666ff97af2b4c14b5d2b9d091282d88c28076" translate="yes" xml:space="preserve">
          <source>basedir: string</source>
          <target state="translated">basedir : 문자열</target>
        </trans-unit>
        <trans-unit id="ab85ab2e0c881934505f00cba5b2ebedc4061954" translate="yes" xml:space="preserve">
          <source>cache: boolean</source>
          <target state="translated">캐시 : 부울</target>
        </trans-unit>
        <trans-unit id="dde1782562a7cdefcef8cc15b85a92a851327f99" translate="yes" xml:space="preserve">
          <source>callback: ?function</source>
          <target state="translated">콜백 :? function</target>
        </trans-unit>
        <trans-unit id="b80ce1ab3bed73eeed6c59af451bf0756e9198f9" translate="yes" xml:space="preserve">
          <source>compileDebug: boolean</source>
          <target state="translated">compileDebug : 부울</target>
        </trans-unit>
        <trans-unit id="92f6c0de3eaeac0b6144c2e086cdb99552a86810" translate="yes" xml:space="preserve">
          <source>debug: boolean</source>
          <target state="translated">디버그 : 부울</target>
        </trans-unit>
        <trans-unit id="4c0812a092ea86252d73e9e21ffd56a94055cced" translate="yes" xml:space="preserve">
          <source>doctype 1.1</source>
          <target state="translated">독 타입 1.1</target>
        </trans-unit>
        <trans-unit id="36d5a2ef0e42ecad311c99a119d5394978489645" translate="yes" xml:space="preserve">
          <source>doctype basic</source>
          <target state="translated">독 타입 기본</target>
        </trans-unit>
        <trans-unit id="b987fa96013dc6ad7ba1e2b7dade867adc3a9b1a" translate="yes" xml:space="preserve">
          <source>doctype frameset</source>
          <target state="translated">독 타입 프레임 셋</target>
        </trans-unit>
        <trans-unit id="3ad790aad84950f9bf176c0495962ec3da81e4b2" translate="yes" xml:space="preserve">
          <source>doctype html</source>
          <target state="translated">doctype html</target>
        </trans-unit>
        <trans-unit id="2da1b871586767194152d7eaf75c3f4fc9db6417" translate="yes" xml:space="preserve">
          <source>doctype mobile</source>
          <target state="translated">독 타입 모바일</target>
        </trans-unit>
        <trans-unit id="cb833bda1d4380689c71d0211d9527470fe21e37" translate="yes" xml:space="preserve">
          <source>doctype plist</source>
          <target state="translated">독 타입 plist</target>
        </trans-unit>
        <trans-unit id="aca473a6b228b02668630d3ee6b58db13e4e89e4" translate="yes" xml:space="preserve">
          <source>doctype strict</source>
          <target state="translated">doctype 엄격</target>
        </trans-unit>
        <trans-unit id="64b70f1f17dfb13bb035950ab2f71f6dbb2010be" translate="yes" xml:space="preserve">
          <source>doctype transitional</source>
          <target state="translated">doctype 과도기</target>
        </trans-unit>
        <trans-unit id="ce86991e98eb7f02076662e42b7b671b1acd4818" translate="yes" xml:space="preserve">
          <source>doctype xml</source>
          <target state="translated">doctype xml</target>
        </trans-unit>
        <trans-unit id="50148d1bcac7418829c6eca5cc417c0683b96aa7" translate="yes" xml:space="preserve">
          <source>doctype: string</source>
          <target state="translated">doctype : 문자열</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="b32f279e548b6fceef4343170778273bfe60658c" translate="yes" xml:space="preserve">
          <source>each</source>
          <target state="translated">each</target>
        </trans-unit>
        <trans-unit id="2e1cce95c8435edc76f01dbe1a2d8435b61df0c8" translate="yes" xml:space="preserve">
          <source>filename: string</source>
          <target state="translated">파일 이름 : 문자열</target>
        </trans-unit>
        <trans-unit id="f4d4384c38818fe76363144966eb64ba7329ec41" translate="yes" xml:space="preserve">
          <source>filters with &lt;code&gt;minify&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1b6e8d92fcf0d89c65fff15536132eb8689bdb" translate="yes" xml:space="preserve">
          <source>filters: object</source>
          <target state="translated">필터 : 객체</target>
        </trans-unit>
        <trans-unit id="c766934cd69007da08c8f5aebc3417d502b6c58a" translate="yes" xml:space="preserve">
          <source>globals: Array&amp;lt;string&amp;gt;</source>
          <target state="translated">글로벌 : Array &amp;lt;string&amp;gt;</target>
        </trans-unit>
        <trans-unit id="70904d38f886d1937cfb1a56e8ee9d7b4c522940" translate="yes" xml:space="preserve">
          <source>inlineRuntimeFunctions: boolean</source>
          <target state="translated">inlineRuntimeFunctions : 부울</target>
        </trans-unit>
        <trans-unit id="d474a51ad0793503fa389594dbd6df55072601f8" translate="yes" xml:space="preserve">
          <source>leading whitespace beyond the block indentation.</source>
          <target state="translated">블록 들여 쓰기 이상의 공백.</target>
        </trans-unit>
        <trans-unit id="7075d119a82bc9d5de447d6dc1632fb65ca15b58" translate="yes" xml:space="preserve">
          <source>line breaks within a plain text block, or between consecutive piped lines.</source>
          <target state="translated">일반 텍스트 블록 내에서 또는 연속 파이프 된 줄 사이에서 줄 바꿈.</target>
        </trans-unit>
        <trans-unit id="247d4d842843dc654743183e3a91eb4a8ece091d" translate="yes" xml:space="preserve">
          <source>name: string</source>
          <target state="translated">이름 : 문자열</target>
        </trans-unit>
        <trans-unit id="6a78404d034aadbae5291365235755f1a89268a8" translate="yes" xml:space="preserve">
          <source>options.name: string</source>
          <target state="translated">options.name : 문자열</target>
        </trans-unit>
        <trans-unit id="0a2d940cd930ef216a285e879f4ce65198c0c652" translate="yes" xml:space="preserve">
          <source>options: ?options</source>
          <target state="translated">옵션 :? 옵션</target>
        </trans-unit>
        <trans-unit id="0ec1cce7fb4817a42b4d49eee4256449272d4b7c" translate="yes" xml:space="preserve">
          <source>path: string</source>
          <target state="translated">경로 : 문자열</target>
        </trans-unit>
        <trans-unit id="b035b52ba690c233ed79f5ec963b55fbd819ec9a" translate="yes" xml:space="preserve">
          <source>pretty: boolean | string</source>
          <target state="translated">예쁜 : 부울 | 끈</target>
        </trans-unit>
        <trans-unit id="f9c2a41d6c42fd6cb5f49d2ce5e8029c7513bdba" translate="yes" xml:space="preserve">
          <source>pug.compile()</source>
          <target state="translated">pug.compile()</target>
        </trans-unit>
        <trans-unit id="758d3f91bb19aa83f3ba2122d7a91846326f9eb1" translate="yes" xml:space="preserve">
          <source>pug.compile(source, ?options)</source>
          <target state="translated">pug.compile (소스,? 옵션)</target>
        </trans-unit>
        <trans-unit id="75d07d7377076cb5ea20f3ea5df51c76fa457457" translate="yes" xml:space="preserve">
          <source>pug.compileClient()</source>
          <target state="translated">pug.compileClient()</target>
        </trans-unit>
        <trans-unit id="8956be407e1d66263af130995e5d37e75dff1d12" translate="yes" xml:space="preserve">
          <source>pug.compileClient(source, ?options)</source>
          <target state="translated">pug.compileClient (소스,? 옵션)</target>
        </trans-unit>
        <trans-unit id="96c478abf73eb47c972bb5f68bcd433ce1599223" translate="yes" xml:space="preserve">
          <source>pug.compileClientWithDependenciesTracked()</source>
          <target state="translated">pug.compileClientWithDependenciesTracked()</target>
        </trans-unit>
        <trans-unit id="82d1c7737cda37b5f154e51c5d88a33a51fa159f" translate="yes" xml:space="preserve">
          <source>pug.compileClientWithDependenciesTracked(source, ?options)</source>
          <target state="translated">pug.compileClientWithDependenciesTracked (소스,? 옵션)</target>
        </trans-unit>
        <trans-unit id="0e249deb9eb2652413deca518aa7eab027faba00" translate="yes" xml:space="preserve">
          <source>pug.compileFile()</source>
          <target state="translated">pug.compileFile()</target>
        </trans-unit>
        <trans-unit id="392c6117cc5dacdd08ada9081ab3ddce94ae723f" translate="yes" xml:space="preserve">
          <source>pug.compileFile(path, ?options)</source>
          <target state="translated">pug.compileFile (경로,? 옵션)</target>
        </trans-unit>
        <trans-unit id="869775603093d1a3e6918c0120f0084ed00de0c0" translate="yes" xml:space="preserve">
          <source>pug.compileFileClient()</source>
          <target state="translated">pug.compileFileClient()</target>
        </trans-unit>
        <trans-unit id="39991834cdeeb67e54fb3ee1311ec18262e6cd46" translate="yes" xml:space="preserve">
          <source>pug.compileFileClient(path, ?options)</source>
          <target state="translated">pug.compileFileClient (경로,? 옵션)</target>
        </trans-unit>
        <trans-unit id="38cd8d0a3234caf57e6b4e79e01ffd937a8c2f7d" translate="yes" xml:space="preserve">
          <source>pug.filters</source>
          <target state="translated">pug.filters</target>
        </trans-unit>
        <trans-unit id="41817c6bb0948772464f3ff78e2ef6174d791ddd" translate="yes" xml:space="preserve">
          <source>pug.render()</source>
          <target state="translated">pug.render()</target>
        </trans-unit>
        <trans-unit id="e7e1a745a2d6414db060a2325177c51408f18675" translate="yes" xml:space="preserve">
          <source>pug.render(source, ?options, ?callback)</source>
          <target state="translated">pug.render (소스,? 옵션,? 콜백)</target>
        </trans-unit>
        <trans-unit id="1bcc6fbfb6c6931c6a28ad3e7dc9416fc4e7e888" translate="yes" xml:space="preserve">
          <source>pug.renderFile()</source>
          <target state="translated">pug.renderFile()</target>
        </trans-unit>
        <trans-unit id="47ef9490f8ffdc5b1eeb5c0ca2eff24c7bf2e896" translate="yes" xml:space="preserve">
          <source>pug.renderFile(path, ?options, ?callback)</source>
          <target state="translated">pug.renderFile (경로,? 옵션,? 콜백)</target>
        </trans-unit>
        <trans-unit id="21302bfd86bb1315fb6a7c51e14f7cbc1f0f1421" translate="yes" xml:space="preserve">
          <source>returns: function</source>
          <target state="translated">반환 : 함수</target>
        </trans-unit>
        <trans-unit id="09ad179173477f65dc0f43e5dcce3cb506735b2c" translate="yes" xml:space="preserve">
          <source>returns: string</source>
          <target state="translated">반환 : 문자열</target>
        </trans-unit>
        <trans-unit id="d78657abad4d0f592f6ad8b7a20fdb3da2a7ce21" translate="yes" xml:space="preserve">
          <source>self: boolean</source>
          <target state="translated">자기 : 부울</target>
        </trans-unit>
        <trans-unit id="05e9a75d1a648e342c566c86ec6dd1b2b80ea944" translate="yes" xml:space="preserve">
          <source>source: string</source>
          <target state="translated">출처 : 문자열</target>
        </trans-unit>
        <trans-unit id="7745f84817fcdaee02b3619f5b4fc9f5950da3fb" translate="yes" xml:space="preserve">
          <source>trailing whitespace.</source>
          <target state="translated">후행 공백.</target>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
