<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="phoenix">
    <body>
      <group id="phoenix">
        <trans-unit id="d6555cacc367409b90fbe3e36d37ce1f09e91f5c" translate="yes" xml:space="preserve">
          <source>A fallback plug is useful to translate common domain data structures into a valid &lt;code&gt;%Plug.Conn{}&lt;/code&gt; response. If the controller action fails to return a &lt;code&gt;%Plug.Conn{}&lt;/code&gt;, the provided plug will be called and receive the controller's &lt;code&gt;%Plug.Conn{}&lt;/code&gt; as it was before the action was invoked along with the value returned from the controller action.</source>
          <target state="translated">폴백 플러그는 일반적인 도메인 데이터 구조를 유효한 &lt;code&gt;%Plug.Conn{}&lt;/code&gt; 응답 으로 변환하는 데 유용합니다 . 컨트롤러 작업이 &lt;code&gt;%Plug.Conn{}&lt;/code&gt; 을 반환하지 못하면 제공된 플러그 가 호출되고 컨트롤러 작업에서 반환 된 값과 함께 작업이 호출되기 전의 컨트롤러의 &lt;code&gt;%Plug.Conn{}&lt;/code&gt; 을 받습니다 .</target>
        </trans-unit>
        <trans-unit id="7d23f8d08ce26c75baca863635b315ac840b822e" translate="yes" xml:space="preserve">
          <source>A field marked with &lt;code&gt;redact: true&lt;/code&gt; will display a value of &lt;code&gt;**redacted**&lt;/code&gt; when inspected in changes inside a &lt;a href=&quot;ecto.changeset&quot;&gt;&lt;code&gt;Ecto.Changeset&lt;/code&gt;&lt;/a&gt; and be excluded from inspect on the schema unless the schema module is tagged with the option &lt;code&gt;@ecto_derive_inspect_for_redacted_fields false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;redact: true&lt;/code&gt; 로 표시된 필드 는 &lt;a href=&quot;ecto.changeset&quot;&gt; &lt;code&gt;Ecto.Changeset&lt;/code&gt; &lt;/a&gt; 내부의 변경 사항을 검사 할 때 &lt;code&gt;**redacted**&lt;/code&gt; 값을 표시 하고 스키마 모듈에 &lt;code&gt;@ecto_derive_inspect_for_redacted_fields false&lt;/code&gt; 옵션 태그가 지정되지 않은 경우 스키마 검사에서 제외됩니다 .</target>
        </trans-unit>
        <trans-unit id="508aa6b4e12f81428e50ac3d49c96bbbcea5e73e" translate="yes" xml:space="preserve">
          <source>A format encoder must export a function called &lt;code&gt;encode_to_iodata!/1&lt;/code&gt; which receives the rendering artifact and returns iodata.</source>
          <target state="translated">형식 인코더는 렌더링 아티팩트를 수신하고 iodata를 반환하는 &lt;code&gt;encode_to_iodata!/1&lt;/code&gt; 이라는 함수를 내 보내야합니다.</target>
        </trans-unit>
        <trans-unit id="6a13566eef334c9b65766da05ab4d4d43827f5f6" translate="yes" xml:space="preserve">
          <source>A fragment can also be used:</source>
          <target state="translated">단편도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae51f9dac9d7c54bb8170a15411f44df70ca2084" translate="yes" xml:space="preserve">
          <source>A fragment which defines the frame for window functions.</source>
          <target state="translated">윈도우 기능의 프레임을 정의하는 프래그먼트.</target>
        </trans-unit>
        <trans-unit id="3323426ad17b0c275178d48cb6477e1d9c4b9815" translate="yes" xml:space="preserve">
          <source>A function plug is any function that receives a connection and a set of options and returns a connection. Its type signature must be:</source>
          <target state="translated">기능 플러그는 연결 및 옵션 세트를 수신하고 연결을 반환하는 모든 기능입니다. 형식 서명은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="41b63ea3ad4c061f35ede93ceeae9bcd925674fe" translate="yes" xml:space="preserve">
          <source>A garbage collector process that cleans up the table used by &lt;a href=&quot;phoenix.pubsub.local&quot;&gt;&lt;code&gt;Phoenix.PubSub.Local&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;phoenix.pubsub.local&quot;&gt; &lt;code&gt;Phoenix.PubSub.Local&lt;/code&gt; 에서&lt;/a&gt; 사용하는 테이블을 정리하는 가비지 수집기 프로세스입니다 .</target>
        </trans-unit>
        <trans-unit id="8e2bc2fa7d983a2e362056403cedaf0dcf21134b" translate="yes" xml:space="preserve">
          <source>A group by query expression</source>
          <target state="translated">쿼리 식별 그룹</target>
        </trans-unit>
        <trans-unit id="fbf7205eb24f77046d9fe35fbd00e1a311c37da6" translate="yes" xml:space="preserve">
          <source>A group by query expression.</source>
          <target state="translated">쿼리 식별 그룹입니다.</target>
        </trans-unit>
        <trans-unit id="9a0412ffa16bcb7f7b88bbbe0e9a5d658142fc6a" translate="yes" xml:space="preserve">
          <source>A handler will need to implement a &lt;code&gt;child_spec/3&lt;/code&gt; function which takes:</source>
          <target state="translated">핸들러는 다음과 같은 &lt;code&gt;child_spec/3&lt;/code&gt; 함수 를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e98770d454075eda4766670bca1c8638c4ddaf13" translate="yes" xml:space="preserve">
          <source>A hex-encoded UUID string</source>
          <target state="translated">16 진수로 인코딩 된 UUID 문자열</target>
        </trans-unit>
        <trans-unit id="1e5d0b6bf037b68f0ab5247229dfbbf297cc5801" translate="yes" xml:space="preserve">
          <source>A hex-encoded UUID string.</source>
          <target state="translated">16 진수로 인코딩 된 UUID 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="94b525fd40b558cf7c5cb8a17c62318c0f7519cc" translate="yes" xml:space="preserve">
          <source>A join query expression</source>
          <target state="translated">조인 쿼리 식</target>
        </trans-unit>
        <trans-unit id="5ac8a34ba321b659953392223945bc3aec2d71a5" translate="yes" xml:space="preserve">
          <source>A join query expression.</source>
          <target state="translated">조인 쿼리 식</target>
        </trans-unit>
        <trans-unit id="fc626b639569e14ed38b80e4cfe297a5eee2e775" translate="yes" xml:space="preserve">
          <source>A keyword list can also be interpolated:</source>
          <target state="translated">키워드 목록을 보간 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f98c43a93fb2b8df9b43baa37305537ee03813e9" translate="yes" xml:space="preserve">
          <source>A limit query expression</source>
          <target state="translated">제한 쿼리 표현식</target>
        </trans-unit>
        <trans-unit id="3a42a9b46de5122ad916b07756c8c98239bd5464" translate="yes" xml:space="preserve">
          <source>A limit query expression.</source>
          <target state="translated">제한 쿼리 식입니다.</target>
        </trans-unit>
        <trans-unit id="9326a99d5f5cbfad236b420591e04582f7a5b112" translate="yes" xml:space="preserve">
          <source>A list of atoms can also be interpolated for dynamic partitioning:</source>
          <target state="translated">동적 파티셔닝을 위해 원자 목록을 보간 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="548895d9732aa70eb4ec1302a1c7dc3677eeb752" translate="yes" xml:space="preserve">
          <source>A list of fields to order the window by, for example:</source>
          <target state="translated">창을 정렬 할 필드 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="211d256aebc6a4475a22f354ec17c5858108776e" translate="yes" xml:space="preserve">
          <source>A list of fields to partition the window by, for example:</source>
          <target state="translated">창을 분할하는 필드 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d0b5bde25a22d39b8961db0c9a86938d6ab92eea" translate="yes" xml:space="preserve">
          <source>A lock query expression</source>
          <target state="translated">잠금 쿼리 표현식</target>
        </trans-unit>
        <trans-unit id="af0f90fc01dd0405acd985a97f28893c9c38969e" translate="yes" xml:space="preserve">
          <source>A lock query expression.</source>
          <target state="translated">잠금 쿼리 표현식.</target>
        </trans-unit>
        <trans-unit id="8a37515c314028cb265ffc9da11d9cb1972f95a3" translate="yes" xml:space="preserve">
          <source>A macro that stores a new plug. &lt;code&gt;opts&lt;/code&gt; will be passed unchanged to the new plug</source>
          <target state="translated">새로운 플러그를 저장하는 매크로. &lt;code&gt;opts&lt;/code&gt; 는 새 플러그로 변경없이 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="1492bad3d66e2fb22babef1faa31465bcbf67766" translate="yes" xml:space="preserve">
          <source>A macro that stores a new plug. &lt;code&gt;opts&lt;/code&gt; will be passed unchanged to the new plug.</source>
          <target state="translated">새로운 플러그를 저장하는 매크로. &lt;code&gt;opts&lt;/code&gt; 는 새 플러그로 변경없이 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="9669ce760ff0d6134d348fbea236193aa5997022" translate="yes" xml:space="preserve">
          <source>A map of metadata is returned with the following keys:</source>
          <target state="translated">메타 데이터 맵은 다음 키와 함께 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6d5636e85e1ef2bad613229d74bc0e9b119b4eb8" translate="yes" xml:space="preserve">
          <source>A migration file for the repository and test files for the context and controller features will also be generated.</source>
          <target state="translated">컨텍스트 및 컨트롤러 기능에 대한 저장소 및 테스트 파일의 마이그레이션 파일도 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="220aa5b54ca715c2d2f9fb2d1024b813114578fe" translate="yes" xml:space="preserve">
          <source>A migration file for the repository and test files for the context will also be generated.</source>
          <target state="translated">저장소의 마이그레이션 파일과 컨텍스트의 테스트 파일도 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="2a7ad10c915de9107d9847304f90f45300a717e2" translate="yes" xml:space="preserve">
          <source>A module (&lt;strong&gt;not a plug&lt;/strong&gt;) for debugging in development.</source>
          <target state="translated">개발시 디버깅을위한 모듈 ( &lt;strong&gt;플러그&lt;/strong&gt; 아님)</target>
        </trans-unit>
        <trans-unit id="bb7b6f80c2f49bcca36ea5f27d90c322f347cbf7" translate="yes" xml:space="preserve">
          <source>A module plug is an extension of the function plug. It is a module that must export:</source>
          <target state="translated">모듈 플러그는 기능 플러그의 확장입니다. 내 보내야하는 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="1f14577898ec9c27ef3bf73631758c3ef60637ef" translate="yes" xml:space="preserve">
          <source>A module to be used in your existing plugs in order to provide error handling.</source>
          <target state="translated">오류 처리를 위해 기존 플러그에 사용되는 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="2ae6beb758947fcfcf89be24aca92bbc2e9b06a7" translate="yes" xml:space="preserve">
          <source>A new file will be generated in:</source>
          <target state="translated">새로운 파일이 생성됩니다 :</target>
        </trans-unit>
        <trans-unit id="d9e5ef5ae95a7e3c031bedf9b8401adb9938c8ce" translate="yes" xml:space="preserve">
          <source>A note on &lt;code&gt;:errors&lt;/code&gt;</source>
          <target state="translated">참고 사항 &lt;code&gt;:errors&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="247b0c48eb92d7683ad37a2e4faf194583434289" translate="yes" xml:space="preserve">
          <source>A plug and module to handle automatic code reloading.</source>
          <target state="translated">자동 코드 재로드를 처리하기위한 플러그 및 모듈.</target>
        </trans-unit>
        <trans-unit id="a3bfffaf045864dc467604253ad832210e0baa2d" translate="yes" xml:space="preserve">
          <source>A plug for generating a unique request id for each request.</source>
          <target state="translated">각 요청에 대해 고유 한 요청 ID를 생성하기위한 플러그입니다.</target>
        </trans-unit>
        <trans-unit id="6446fa6bdbded8c6574e97c1eed133777cab6564" translate="yes" xml:space="preserve">
          <source>A plug for logging basic request information in the format:</source>
          <target state="translated">기본 요청 정보를 다음 형식으로 기록하기위한 플러그 :</target>
        </trans-unit>
        <trans-unit id="c8c318dc543ea007fb59d22f6b41bb1242501ed2" translate="yes" xml:space="preserve">
          <source>A plug for parsing the request body.</source>
          <target state="translated">요청 본문을 구문 분석하기위한 플러그입니다.</target>
        </trans-unit>
        <trans-unit id="2e570b41fcca81d0056177ea2ef5b9015a670923" translate="yes" xml:space="preserve">
          <source>A plug for serving static assets.</source>
          <target state="translated">정적 자산을 제공하기위한 플러그입니다.</target>
        </trans-unit>
        <trans-unit id="fa0549f72da9c53f30cb36c6df15f5ac9aabf768" translate="yes" xml:space="preserve">
          <source>A plug pipeline can be halted with &lt;a href=&quot;plug.conn#halt/1&quot;&gt;&lt;code&gt;Plug.Conn.halt/1&lt;/code&gt;&lt;/a&gt;. The builder will prevent further plugs downstream from being invoked and return the current connection. In the following example, the &lt;a href=&quot;plug.logger&quot;&gt;&lt;code&gt;Plug.Logger&lt;/code&gt;&lt;/a&gt; plug never gets called:</source>
          <target state="translated">&lt;a href=&quot;plug.conn#halt/1&quot;&gt; &lt;code&gt;Plug.Conn.halt/1&lt;/code&gt; 로&lt;/a&gt; 플러그 파이프 라인을 정지시킬 수 있습니다 . 빌더는 추가 플러그 다운 스트림이 호출되는 것을 방지하고 현재 연결을 리턴합니다. 다음 예제에서 &lt;a href=&quot;plug.logger&quot;&gt; &lt;code&gt;Plug.Logger&lt;/code&gt; &lt;/a&gt; 플러그는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1886091b6bf7d12212133283469ad01791c28906" translate="yes" xml:space="preserve">
          <source>A plug that may convert a JSON response into a JSONP one</source>
          <target state="translated">JSON 응답을 JSONP로 변환 할 수있는 플러그</target>
        </trans-unit>
        <trans-unit id="27cc908ac178d8d6210d66299d0d2aa753f4c446" translate="yes" xml:space="preserve">
          <source>A plug that may convert a JSON response into a JSONP one.</source>
          <target state="translated">JSON 응답을 JSONP로 변환 할 수있는 플러그입니다.</target>
        </trans-unit>
        <trans-unit id="d140e1ea5763f3091fa07f469fc491efe441881f" translate="yes" xml:space="preserve">
          <source>A plug to force SSL connections and enable HSTS.</source>
          <target state="translated">SSL 연결을 강제하고 HSTS를 활성화하는 플러그입니다.</target>
        </trans-unit>
        <trans-unit id="7067fa076310914c5a187337eb8e079351e6240a" translate="yes" xml:space="preserve">
          <source>A plug to force SSL connections.</source>
          <target state="translated">SSL 연결을 강제 실행하는 플러그</target>
        </trans-unit>
        <trans-unit id="602566e61299332b20ef3537013b8af7450cd0d2" translate="yes" xml:space="preserve">
          <source>A plug to handle session cookies and session stores.</source>
          <target state="translated">세션 쿠키 및 세션 저장소를 처리하기위한 플러그입니다.</target>
        </trans-unit>
        <trans-unit id="a113601eea84699381389fc145edb16d078c8038" translate="yes" xml:space="preserve">
          <source>A prefix can be specified for a subquery, similar to standard repo operations:</source>
          <target state="translated">표준 리포 작업과 유사한 하위 쿼리에 접두사를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da6161e51728ffed7549eff7d59573edeb482aec" translate="yes" xml:space="preserve">
          <source>A process may be tracked multiple times, provided the topic and key pair are unique for any prior calls for the given process.</source>
          <target state="translated">주제와 키 쌍이 주어진 프로세스에 대한 이전 호출에 고유 한 경우 프로세스를 여러 번 추적 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecd7cda5bcf7d72985a664f3c9340020d656a7d1" translate="yes" xml:space="preserve">
          <source>A process may be tracked multipled times, provided the topic and key pair are unique for any prior calls for the given process.</source>
          <target state="translated">주제와 키 쌍이 주어진 프로세스에 대한 이전 호출에 고유 한 경우 프로세스가 여러 번 추적 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6fce133c9e9afd0fc76959bbab1a15ebc56c715" translate="yes" xml:space="preserve">
          <source>A product matches in the above example if a line item was created since the provided date where the customer purchased at least 10 units.</source>
          <target state="translated">고객이 최소 10 개 단위를 구매 한 제공된 날짜 이후에 광고 항목이 생성 된 경우 위의 예에서 제품이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="fb11d08c12532805958b64aa7f5232d9f8361526" translate="yes" xml:space="preserve">
          <source>A protocol that converts data structures into URL parameters.</source>
          <target state="translated">데이터 구조를 URL 매개 변수로 변환하는 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="a810227ea598a60f15fb0d07a9b08121f6023fee" translate="yes" xml:space="preserve">
          <source>A protocol that extends exceptions to be status-code aware.</source>
          <target state="translated">상태 코드를 인식하도록 예외를 확장하는 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="9b55f92a72a93f9b4051d36f398e4e4e4e15aa6c" translate="yes" xml:space="preserve">
          <source>A query can also be given instead of a schema, both for the join_through and the destination. Querying, joining or preloading the association will use the given query. Currently only where clauses can be provided in queries. Let&amp;rsquo;s see an example:</source>
          <target state="translated">join_through 및 대상 모두에 대해 스키마 대신 쿼리를 제공 할 수도 있습니다. 연관을 조회, 결합 또는 사전로드하면 주어진 조회가 사용됩니다. 현재 쿼리에서 where 절을 제공 할 수 있습니다. 예를 보자.</target>
        </trans-unit>
        <trans-unit id="57b3d5d222f71f480afb39c6c01de765a7a9d056" translate="yes" xml:space="preserve">
          <source>A query can also be given instead of a schema. Querying, joining or preloading the association will use the given query. Currently only where clauses can be provided in queries. Let&amp;rsquo;s see an example:</source>
          <target state="translated">스키마 대신 쿼리를 제공 할 수도 있습니다. 연관을 조회, 결합 또는 사전로드하면 주어진 조회가 사용됩니다. 현재 쿼리에서 where 절을 제공 할 수 있습니다. 예를 보자.</target>
        </trans-unit>
        <trans-unit id="fa830660e15cdaa4dc6eab8c330789488fe7bf9d" translate="yes" xml:space="preserve">
          <source>A query can also be given instead of a schema. Querying, joining or preloading the association will use the given query. Currently only where clauses can be provided in queries. Let&amp;rsquo;s see some examples:</source>
          <target state="translated">스키마 대신 쿼리를 제공 할 수도 있습니다. 연관을 조회, 결합 또는 사전로드하면 주어진 조회가 사용됩니다. 현재 쿼리에서 where 절을 제공 할 수 있습니다. 몇 가지 예를 보자.</target>
        </trans-unit>
        <trans-unit id="6c16c5a7a0e6e3bd5d7267cbb006505cc93761f6" translate="yes" xml:space="preserve">
          <source>A raw binary representation of a UUID</source>
          <target state="translated">UUID의 원시 이진 표현</target>
        </trans-unit>
        <trans-unit id="f6365cf3f64e3ca89e5511ac308a4440b906f106" translate="yes" xml:space="preserve">
          <source>A raw binary representation of a UUID.</source>
          <target state="translated">UUID의 원시 이진 표현입니다.</target>
        </trans-unit>
        <trans-unit id="17d99d2006e78017bdc0cb317ef24f2c49c0675d" translate="yes" xml:space="preserve">
          <source>A repository maps to an underlying data store, controlled by the adapter. For example, Ecto ships with a Postgres adapter that stores data into a PostgreSQL database.</source>
          <target state="translated">저장소는 어댑터에 의해 제어되는 기본 데이터 저장소에 맵핑됩니다. 예를 들어, Ecto는 PostgreSQL 데이터베이스에 데이터를 저장하는 Postgres 어댑터와 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="cd4bdfc36fdfdd2bc045633b2cc0a5938d44cd56" translate="yes" xml:space="preserve">
          <source>A route can also specify parameters which will then be available in the function body:</source>
          <target state="translated">라우트는 함수 본문에서 사용할 수있는 매개 변수를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="be5953e95ef0d7bf21d698beeb476b75a6419062" translate="yes" xml:space="preserve">
          <source>A route should specify only one of &lt;code&gt;:do&lt;/code&gt; or &lt;code&gt;:to&lt;/code&gt; options.</source>
          <target state="translated">경로는 &lt;code&gt;:do&lt;/code&gt; 또는 &lt;code&gt;:to&lt;/code&gt; 옵션 중 하나만 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c8be751a044d822045b1eaba342f9baa71ee2a42" translate="yes" xml:space="preserve">
          <source>A scope may then use this pipeline as:</source>
          <target state="translated">그런 다음 범위는이 파이프 라인을 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64707c17a82fafbfa181761a4306f357e5402b6f" translate="yes" xml:space="preserve">
          <source>A select query expression</source>
          <target state="translated">선택 쿼리 표현식</target>
        </trans-unit>
        <trans-unit id="52159915deda5630e0d675da42a0327fd8ad0a83" translate="yes" xml:space="preserve">
          <source>A select query expression.</source>
          <target state="translated">선택 쿼리 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="d15a1414e1dabc4b77e0578af24e25bba1b64638" translate="yes" xml:space="preserve">
          <source>A server (a &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; specifically) that manages uploaded files.</source>
          <target state="translated">업로드 된 파일을 관리 하는 서버 (특히 &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="5eb2282eff957c7edee6fbf213e15ead022d6693" translate="yes" xml:space="preserve">
          <source>A shortcut for &lt;code&gt;form_for(changeset, url, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;form_for(changeset, url, [])&lt;/code&gt; 의 단축키입니다 .</target>
        </trans-unit>
        <trans-unit id="679ddb5ec5c04f2352ccd686eb689981aa0578a3" translate="yes" xml:space="preserve">
          <source>A shortcut that renders the given template in the given view</source>
          <target state="translated">주어진 템플릿을 주어진 뷰에서 렌더링하는 바로 가기</target>
        </trans-unit>
        <trans-unit id="360b1f0139a93d8cac8e04f96457dacccd4755ad" translate="yes" xml:space="preserve">
          <source>A shortcut that renders the given template in the given view.</source>
          <target state="translated">주어진보기에서 주어진 템플릿을 렌더링하는 바로 가기입니다.</target>
        </trans-unit>
        <trans-unit id="a3bd2deed4cd1a4e3f23be9ce997e4465341c885" translate="yes" xml:space="preserve">
          <source>A single key value pair may be passed, a keyword list or map of assigns may be provided to be merged into existing socket assigns.</source>
          <target state="translated">단일 키 값 쌍이 전달 될 수 있고 키워드 목록 또는 할당 맵이 기존 소켓 할당에 병합되도록 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="203df8270968063b9a7a2981211a19746083887a" translate="yes" xml:space="preserve">
          <source>A socket implementation that multiplexes messages over channels.</source>
          <target state="translated">채널을 통해 메시지를 다중화하는 소켓 구현입니다.</target>
        </trans-unit>
        <trans-unit id="a4fdf6155a375fda05bd4126f4ac1b93d003da78" translate="yes" xml:space="preserve">
          <source>A struct representing subqueries.</source>
          <target state="translated">하위 쿼리를 나타내는 구조체입니다.</target>
        </trans-unit>
        <trans-unit id="4f89fcb81d2ce506035c4ee187c02c8467c2a257" translate="yes" xml:space="preserve">
          <source>A struct used as default on unfetched fields.</source>
          <target state="translated">페치되지 않은 필드에서 기본값으로 사용되는 구조체.</target>
        </trans-unit>
        <trans-unit id="1f61bdf60f93bab8b9e6b0fb5866d4197adbd5c1" translate="yes" xml:space="preserve">
          <source>A successful transaction returns the value returned by the function wrapped in a tuple as &lt;code&gt;{:ok, value}&lt;/code&gt;.</source>
          <target state="translated">성공적인 트랜잭션은 튜플에 싸인 함수가 반환 한 값을 &lt;code&gt;{:ok, value}&lt;/code&gt; 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ad64c20203140b06d2f22b694f40b5efa96b9519" translate="yes" xml:space="preserve">
          <source>A telemetry &lt;code&gt;:metadata&lt;/code&gt; map including the following fields. Each database adapter may emit different information here. For Ecto.SQL databases, it will look like this:</source>
          <target state="translated">다음 필드를 포함 하는 원격 측정 &lt;code&gt;:metadata&lt;/code&gt; 맵. 각 데이터베이스 어댑터는 여기에서 다른 정보를 내보낼 수 있습니다. Ecto.SQL 데이터베이스의 경우 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a3a3f96eb8d57f2d8f5d346f69678cc061505ef5" translate="yes" xml:space="preserve">
          <source>A template has a name, which also contains a format. For example, in the previous section we have rendered the &quot;index.html&quot; template:</source>
          <target state="translated">템플릿에는 형식도 포함 된 이름이 있습니다. 예를 들어, 이전 섹션에서 &quot;index.html&quot;템플릿을 렌더링했습니다.</target>
        </trans-unit>
        <trans-unit id="4ddd2b27cf9e32e87fad09c73b095d8e9c8a4457" translate="yes" xml:space="preserve">
          <source>A template has a name, which also contains a format. For example, in the previous section we have rendered the &amp;ldquo;index.html&amp;rdquo; template:</source>
          <target state="translated">템플릿에는 이름이 있으며 형식도 포함됩니다. 예를 들어, 이전 섹션에서 &quot;index.html&quot;템플릿을 렌더링했습니다.</target>
        </trans-unit>
        <trans-unit id="1e660c6a6ee5d0e8ffddf28c0fa00526d5a8e3c6" translate="yes" xml:space="preserve">
          <source>A transport is responsible for:</source>
          <target state="translated">운송은 다음을 담당합니다.</target>
        </trans-unit>
        <trans-unit id="946470e01e91e9929c4d53bc6f328c1d76bbc84a" translate="yes" xml:space="preserve">
          <source>A typical example is calling &lt;code&gt;MyRepo.insert/1&lt;/code&gt; with a struct and acting on the return value:</source>
          <target state="translated">일반적인 예는 구조체를 사용하여 &lt;code&gt;MyRepo.insert/1&lt;/code&gt; 을 호출 하고 반환 값에 작용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cb5d317cfc71e83a7571c5f18c2490db22159483" translate="yes" xml:space="preserve">
          <source>A union all query expression</source>
          <target state="translated">모든 쿼리 식 통합</target>
        </trans-unit>
        <trans-unit id="25362305321b57a805c92a0acf72bc0d06d1a7dc" translate="yes" xml:space="preserve">
          <source>A union all query expression.</source>
          <target state="translated">모든 쿼리 식을 통합합니다.</target>
        </trans-unit>
        <trans-unit id="d5b99cd9b0922c56851d9e0469e48511c48aeeee" translate="yes" xml:space="preserve">
          <source>A union query expression</source>
          <target state="translated">통합 쿼리 식</target>
        </trans-unit>
        <trans-unit id="4a920618e68127f219a3396142a47a00705a7fad" translate="yes" xml:space="preserve">
          <source>A union query expression.</source>
          <target state="translated">통합 쿼리 식</target>
        </trans-unit>
        <trans-unit id="679419f70975d183c742f7e11403ca44939004d4" translate="yes" xml:space="preserve">
          <source>A user customizable callback invoked for query-based operations.</source>
          <target state="translated">쿼리 기반 작업을 위해 호출되는 사용자 지정 가능한 콜백입니다.</target>
        </trans-unit>
        <trans-unit id="44888c14caef36bb9c69024eae824ef0f11b9228" translate="yes" xml:space="preserve">
          <source>A user customizable callback invoked to retrieve default options for operations.</source>
          <target state="translated">작업에 대한 기본 옵션을 검색하기 위해 호출되는 사용자 정의 가능한 콜백입니다.</target>
        </trans-unit>
        <trans-unit id="fd7c2aef5660b74e939eea17604c8c896f7fa67b" translate="yes" xml:space="preserve">
          <source>API for building transports.</source>
          <target state="translated">교통 수단 구축을위한 API.</target>
        </trans-unit>
        <trans-unit id="86e6e8774db247384ff44f8f11bcef9d757da165" translate="yes" xml:space="preserve">
          <source>API for exporting a webserver.</source>
          <target state="translated">웹 서버를 내보내기위한 API.</target>
        </trans-unit>
        <trans-unit id="ed58cd8a2d9a5daa39ac65e4c3c4492641a76fb5" translate="yes" xml:space="preserve">
          <source>API used by Plug to invoke the code reloader on every request</source>
          <target state="translated">모든 요청에서 코드 리 로더를 호출하기 위해 Plug에 의해 사용되는 API</target>
        </trans-unit>
        <trans-unit id="4542405f0cabd3872e11baabdbce2401445cdbd7" translate="yes" xml:space="preserve">
          <source>API used by Plug to invoke the code reloader on every request.</source>
          <target state="translated">모든 요청에서 코드 리 로더를 호출하기 위해 Plug에 의해 사용되는 API.</target>
        </trans-unit>
        <trans-unit id="b79e3df9bbb0579360a4e4a0a03f1496f2475c10" translate="yes" xml:space="preserve">
          <source>API used by Plug to start the code reloader</source>
          <target state="translated">코드 리 로더를 시작하기 위해 Plug에서 사용하는 API</target>
        </trans-unit>
        <trans-unit id="7396c45721b461084efb7c8093672b44804d5ca9" translate="yes" xml:space="preserve">
          <source>API used by Plug to start the code reloader.</source>
          <target state="translated">코드 리 로더를 시작하기 위해 Plug에 의해 사용되는 API.</target>
        </trans-unit>
        <trans-unit id="70229b697d877c060248372885d62cc0b19c248b" translate="yes" xml:space="preserve">
          <source>ASC columns become DESC columns (and vice-versa). If the query has no order_bys, it orders by the inverse of the primary key.</source>
          <target state="translated">ASC 열은 DESC 열이됩니다 (반대의 경우도 마찬가지). 쿼리에 order_bys가 없으면 기본 키의 역순으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="89ef021e223e176e371690ff7d78917f2535be99" translate="yes" xml:space="preserve">
          <source>About the arithmetic operators</source>
          <target state="translated">산술 연산자</target>
        </trans-unit>
        <trans-unit id="1adb4622e0cea24e2bb59e45a0fa949aa9cd4487" translate="yes" xml:space="preserve">
          <source>Accepts the module name for the channel</source>
          <target state="translated">채널의 모듈 이름을 승인합니다</target>
        </trans-unit>
        <trans-unit id="9ea67e607d24763f974e3d47b4034a46471d7ec5" translate="yes" xml:space="preserve">
          <source>Accepts the same arguments and options as &lt;a href=&quot;ecto.repo#c:delete/2&quot;&gt;&lt;code&gt;Ecto.Repo.delete/2&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;a href=&quot;ecto.repo#c:delete/2&quot;&gt; &lt;code&gt;Ecto.Repo.delete/2&lt;/code&gt; &lt;/a&gt; 와 동일한 인수 및 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="789dafed93ccbf4c05b49e24fc1da0571474c267" translate="yes" xml:space="preserve">
          <source>Accepts the same arguments and options as &lt;a href=&quot;ecto.repo#c:delete_all/2&quot;&gt;&lt;code&gt;Ecto.Repo.delete_all/2&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;a href=&quot;ecto.repo#c:delete_all/2&quot;&gt; &lt;code&gt;Ecto.Repo.delete_all/2&lt;/code&gt; &lt;/a&gt; 와 동일한 인수 및 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="8c9553ee56bf0e31f097af5dc4f874d1c0bb310b" translate="yes" xml:space="preserve">
          <source>Accepts the same arguments and options as &lt;a href=&quot;ecto.repo#c:insert/2&quot;&gt;&lt;code&gt;Ecto.Repo.insert/2&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;a href=&quot;ecto.repo#c:insert/2&quot;&gt; &lt;code&gt;Ecto.Repo.insert/2&lt;/code&gt; &lt;/a&gt; 와 동일한 인수 및 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="c752d4234a4cb721c1653ecd6f90b58c69994dcd" translate="yes" xml:space="preserve">
          <source>Accepts the same arguments and options as &lt;a href=&quot;ecto.repo#c:insert_all/3&quot;&gt;&lt;code&gt;Ecto.Repo.insert_all/3&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;a href=&quot;ecto.repo#c:insert_all/3&quot;&gt; &lt;code&gt;Ecto.Repo.insert_all/3&lt;/code&gt; &lt;/a&gt; 과 동일한 인수 및 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="b6480d325c63afe5877a0e30d3f5c75205c3ad50" translate="yes" xml:space="preserve">
          <source>Accepts the same arguments and options as &lt;a href=&quot;ecto.repo#c:insert_or_update/2&quot;&gt;&lt;code&gt;Ecto.Repo.insert_or_update/2&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;a href=&quot;ecto.repo#c:insert_or_update/2&quot;&gt; &lt;code&gt;Ecto.Repo.insert_or_update/2&lt;/code&gt; &lt;/a&gt; 와 동일한 인수 및 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="8614a768a0a859c086c15abf0c73d40064b5fd00" translate="yes" xml:space="preserve">
          <source>Accepts the same arguments and options as &lt;a href=&quot;ecto.repo#c:update/2&quot;&gt;&lt;code&gt;Ecto.Repo.update/2&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;a href=&quot;ecto.repo#c:update/2&quot;&gt; &lt;code&gt;Ecto.Repo.update/2&lt;/code&gt; &lt;/a&gt; 와 동일한 인수 및 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="1bc7635d2d0b3f661ed3f03cc2b0aef2100ccbd1" translate="yes" xml:space="preserve">
          <source>Accepts the same arguments and options as &lt;a href=&quot;ecto.repo#c:update_all/3&quot;&gt;&lt;code&gt;Ecto.Repo.update_all/3&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;a href=&quot;ecto.repo#c:update_all/3&quot;&gt; &lt;code&gt;Ecto.Repo.update_all/3&lt;/code&gt; &lt;/a&gt; 과 동일한 인수 및 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="adf777534a81a3c2426b5193f04a57a4b66913e5" translate="yes" xml:space="preserve">
          <source>Access the endpoint configuration given by key</source>
          <target state="translated">키로 제공된 엔드 포인트 구성에 액세스</target>
        </trans-unit>
        <trans-unit id="7b547055b41922089c3f74a93f478751d56aeb74" translate="yes" xml:space="preserve">
          <source>Access the endpoint configuration given by key.</source>
          <target state="translated">키로 지정된 엔드 포인트 구성에 액세스하십시오.</target>
        </trans-unit>
        <trans-unit id="0a4a92cf9a0b562797569d10e9e6816e10751772" translate="yes" xml:space="preserve">
          <source>According to the SQL standard it affects all CTEs in the query, not individual ones.</source>
          <target state="translated">SQL 표준에 따르면 개별 CTE가 아닌 쿼리의 모든 CTE에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="3fd09e68bf55b280210825b15b236e9e13c1e3cf" translate="yes" xml:space="preserve">
          <source>Adapter configuration</source>
          <target state="translated">어댑터 구성</target>
        </trans-unit>
        <trans-unit id="3287c69d8ddb53d15fe6cf2d9da75fd606c69c5d" translate="yes" xml:space="preserve">
          <source>Adapter-specific events</source>
          <target state="translated">어댑터 별 이벤트</target>
        </trans-unit>
        <trans-unit id="e07a4acdd5cdd3ab645fd0d90270662d13ac1718" translate="yes" xml:space="preserve">
          <source>Adapters</source>
          <target state="translated">Adapters</target>
        </trans-unit>
        <trans-unit id="7784ef3802e7b67bed0bf4318177efcf145c0392" translate="yes" xml:space="preserve">
          <source>Add the resulting file to your application&amp;rsquo;s &lt;code&gt;priv&lt;/code&gt; directory and pass the path using the &lt;code&gt;:dhfile&lt;/code&gt; key. It is best practice to rotate the file periodically.</source>
          <target state="translated">결과 파일을 애플리케이션의 &lt;code&gt;priv&lt;/code&gt; 디렉토리에 추가하고 &lt;code&gt;:dhfile&lt;/code&gt; 키를 사용하여 경로를 전달하십시오 . 파일을 주기적으로 회전하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6f55dbe5531ad6865c67ed95836c2557b5aeb8ba" translate="yes" xml:space="preserve">
          <source>Adding and removal of embeds can only be done via the &lt;a href=&quot;ecto.changeset&quot;&gt;&lt;code&gt;Ecto.Changeset&lt;/code&gt;&lt;/a&gt; API so Ecto can properly track the embed life-cycle:</source>
          <target state="translated">임베드 추가 및 제거는 &lt;a href=&quot;ecto.changeset&quot;&gt; &lt;code&gt;Ecto.Changeset&lt;/code&gt; &lt;/a&gt; API 를 통해서만 수행 할 수 있으므로 Ecto는 임베드 수명주기를 올바르게 추적 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f67e21d45717d2e7d5f6b8d4a9516ab30653948c" translate="yes" xml:space="preserve">
          <source>Additional options can be given to the session store, see the store&amp;rsquo;s documentation for the options it accepts.</source>
          <target state="translated">추가 옵션은 세션 저장소에 제공 될 수 있습니다. 허용되는 옵션에 대해서는 저장소 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5cec8513a17ee4ace1a1b38c87e62e48714bde0d" translate="yes" xml:space="preserve">
          <source>Additional options can be given to the session store, see the store's documentation for the options it accepts.</source>
          <target state="translated">세션 저장소에 추가 옵션을 제공 할 수 있습니다. 수락하는 옵션은 저장소 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0a6f7fc13964d1c28a7b6f4385efa1513289c0ae" translate="yes" xml:space="preserve">
          <source>Additionally, the right side may also be a subquery:</source>
          <target state="translated">또한 오른쪽은 하위 ​​쿼리 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b46698b76037699bcd1a6db8f4d893bf0a0f099e" translate="yes" xml:space="preserve">
          <source>Adds a delete operation to the multi</source>
          <target state="translated">멀티에 삭제 작업을 추가합니다</target>
        </trans-unit>
        <trans-unit id="9ee3d694f5156d312afd606d349abf63df55f685" translate="yes" xml:space="preserve">
          <source>Adds a delete operation to the multi.</source>
          <target state="translated">멀티에 삭제 작업을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="769fbcf8531ada2965f956c88b8bab5fa2107391" translate="yes" xml:space="preserve">
          <source>Adds a delete_all operation to the multi</source>
          <target state="translated">멀티에 delete_all 연산을 추가합니다</target>
        </trans-unit>
        <trans-unit id="cbe4492b83cbb0046f04cfc470e840e81af8e8f2" translate="yes" xml:space="preserve">
          <source>Adds a delete_all operation to the multi.</source>
          <target state="translated">멀티에 delete_all 연산을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="58349070033bbd9b9269bd6e6931b771e8a71bc2" translate="yes" xml:space="preserve">
          <source>Adds a function to run as part of the multi</source>
          <target state="translated">멀티의 일부로 실행할 함수를 추가합니다</target>
        </trans-unit>
        <trans-unit id="1bec869c3e831e0a6c85e17cba5a4af86ccc6ec3" translate="yes" xml:space="preserve">
          <source>Adds a function to run as part of the multi.</source>
          <target state="translated">멀티의 일부로 실행할 함수를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="34e192fedbb4eabab58579f23b6132b3af1a3750" translate="yes" xml:space="preserve">
          <source>Adds a given interval to a date</source>
          <target state="translated">주어진 간격을 날짜에 추가합니다</target>
        </trans-unit>
        <trans-unit id="6d007da43a8bd9b39162829b023c276b326e5dbc" translate="yes" xml:space="preserve">
          <source>Adds a given interval to a date.</source>
          <target state="translated">주어진 간격을 날짜에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="194676ec87039fc824f39013dabad1414b7f21a3" translate="yes" xml:space="preserve">
          <source>Adds a given interval to a datetime</source>
          <target state="translated">주어진 시간을 날짜 시간에 추가합니다</target>
        </trans-unit>
        <trans-unit id="ed19d9c7db347a5112a39c5dddd3a119f1642683" translate="yes" xml:space="preserve">
          <source>Adds a given interval to a datetime.</source>
          <target state="translated">주어진 시간 간격을 날짜 시간에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f176eb799f6d0e21b8db3090cb17b0b1910d9fd4" translate="yes" xml:space="preserve">
          <source>Adds a new element to the set</source>
          <target state="translated">세트에 새로운 요소를 추가</target>
        </trans-unit>
        <trans-unit id="cea99954f15fe72a878575aafe645073a0bcb4b1" translate="yes" xml:space="preserve">
          <source>Adds a new element to the set.</source>
          <target state="translated">세트에 새로운 요소를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="5137472dd63745ac60a833c182654bc64ff4bd48" translate="yes" xml:space="preserve">
          <source>Adds a new request header (&lt;code&gt;key&lt;/code&gt;) if not present, otherwise replaces the previous value of that header with &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">새로운 요청 헤더 (추가 &lt;code&gt;key&lt;/code&gt; 달리하여 해당 헤더의 이전 값 대체) 존재하지 않는 경우 &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c4e9e3bae320c79d590690ad5143c1c8375375b" translate="yes" xml:space="preserve">
          <source>Adds a new request header (&lt;code&gt;key&lt;/code&gt;) if not present, otherwise replaces the previous value of that header with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">새로운 요청 헤더 (추가 &lt;code&gt;key&lt;/code&gt; 달리하여 해당 헤더의 이전 값 대체)가 존재하지 않는 경우 &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c2bf518fb38cf26c49db68d29cada83da6c1888" translate="yes" xml:space="preserve">
          <source>Adds a new response header (&lt;code&gt;key&lt;/code&gt;) if not present, otherwise replaces the previous value of that header with &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">새로운 응답 헤더 (추가 &lt;code&gt;key&lt;/code&gt; 달리하여 해당 헤더의 이전 값 대체) 존재하지 않는 경우 &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3dea66064c01516ce1ce2f232671c9e6df2d28b6" translate="yes" xml:space="preserve">
          <source>Adds a new response header (&lt;code&gt;key&lt;/code&gt;) if not present, otherwise replaces the previous value of that header with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">새로운 응답 헤더 (추가 &lt;code&gt;key&lt;/code&gt; 달리하여 해당 헤더의 이전 값 대체)가 존재하지 않는 경우 &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7384ebe47a1b17e11afd5a17b7481276360f53a4" translate="yes" xml:space="preserve">
          <source>Adds an error to the changeset</source>
          <target state="translated">변경 세트에 오류를 추가합니다</target>
        </trans-unit>
        <trans-unit id="8fd325b36f13567a54758748114ef41ca1fff6fb" translate="yes" xml:space="preserve">
          <source>Adds an error to the changeset.</source>
          <target state="translated">변경 세트에 오류를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="d1f9282c9f061f154b56dad9390ad5d59a06b52c" translate="yes" xml:space="preserve">
          <source>Adds an insert operation to the multi</source>
          <target state="translated">멀티에 삽입 작업을 추가합니다</target>
        </trans-unit>
        <trans-unit id="5a732255ac22c5c6065191d204bc188d1d7d11f9" translate="yes" xml:space="preserve">
          <source>Adds an insert operation to the multi.</source>
          <target state="translated">멀티에 삽입 작업을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6f1d356ee7af97c290a0983fcc393be6d69fc9fe" translate="yes" xml:space="preserve">
          <source>Adds an insert_all operation to the multi</source>
          <target state="translated">멀티에 insert_all 연산을 추가합니다</target>
        </trans-unit>
        <trans-unit id="18fb34baf7a00ef35058866f1cd06182f6556828" translate="yes" xml:space="preserve">
          <source>Adds an insert_all operation to the multi.</source>
          <target state="translated">멀티에 insert_all 연산을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4fea338f938382b22df2ad7873e19fba67b7dc02" translate="yes" xml:space="preserve">
          <source>Adds an update operation to the multi</source>
          <target state="translated">멀티에 업데이트 작업을 추가합니다</target>
        </trans-unit>
        <trans-unit id="c3cc5c39ec6abb44d01e956bf112b8e5cfa6f1f5" translate="yes" xml:space="preserve">
          <source>Adds an update operation to the multi.</source>
          <target state="translated">멀티에 업데이트 작업을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="2dab70e220b97494a706a2a537167adfafecc13d" translate="yes" xml:space="preserve">
          <source>Adds an update_all operation to the multi</source>
          <target state="translated">멀티에 update_all 작업을 추가합니다</target>
        </trans-unit>
        <trans-unit id="427f83a0359dd0e43a3da4e151a7253d8e9a4062" translate="yes" xml:space="preserve">
          <source>Adds an update_all operation to the multi.</source>
          <target state="translated">멀티에 update_all 작업을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="9cc89a0814520555ed99c796dba3165d5cca397a" translate="yes" xml:space="preserve">
          <source>Adds key value pairs to socket assigns.</source>
          <target state="translated">소켓 할당에 키 값 쌍을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="77d8ef9e9593e05de16fcb185362ded29dbcdd47" translate="yes" xml:space="preserve">
          <source>Adds key/value pair to socket assigns</source>
          <target state="translated">소켓 할당에 키 / 값 쌍을 추가합니다</target>
        </trans-unit>
        <trans-unit id="0d847ebf435901217a855c2d3a9bd63d85d34c23" translate="yes" xml:space="preserve">
          <source>Adds key/value pair to socket assigns.</source>
          <target state="translated">소켓 할당에 키 / 값 쌍을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="2ebb729e6f4563c0b483c5ecfc0f09681da14fb9" translate="yes" xml:space="preserve">
          <source>Adds the given interval to the current time in UTC</source>
          <target state="translated">주어진 시간을 UTC로 현재 시간에 더합니다</target>
        </trans-unit>
        <trans-unit id="042bc7077804c2ab95f410b2330b189b5fef8ec7" translate="yes" xml:space="preserve">
          <source>Adds the given interval to the current time in UTC.</source>
          <target state="translated">주어진 시간을 UTC로 현재 시간에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="3b5a0d13c97aaad5ec8dba3e8924ba9778eb0ba4" translate="yes" xml:space="preserve">
          <source>After a client has successfully joined a channel, incoming events from the client are routed through the channel&amp;rsquo;s &lt;code&gt;handle_in/3&lt;/code&gt; callbacks. Within these callbacks, you can perform any action. Typically you&amp;rsquo;ll either forward a message to all listeners with &lt;a href=&quot;#broadcast!/3&quot;&gt;&lt;code&gt;broadcast!/3&lt;/code&gt;&lt;/a&gt;, or push a message directly down the socket with &lt;a href=&quot;#push/3&quot;&gt;&lt;code&gt;push/3&lt;/code&gt;&lt;/a&gt;. Incoming callbacks must return the &lt;code&gt;socket&lt;/code&gt; to maintain ephemeral state.</source>
          <target state="translated">클라이언트가 채널에 성공적으로 참여하면 클라이언트에서 들어오는 이벤트가 채널의 &lt;code&gt;handle_in/3&lt;/code&gt; 콜백을 통해 라우팅됩니다 . 이러한 콜백 내에서 모든 작업을 수행 할 수 있습니다. 일반적으로 당신도 앞으로 모든 청취자에게 메시지거야 &lt;a href=&quot;#broadcast!/3&quot;&gt; &lt;code&gt;broadcast!/3&lt;/code&gt; &lt;/a&gt; 하거나와 소켓 아래로 직접 메시지를 푸시 &lt;a href=&quot;#push/3&quot;&gt; &lt;code&gt;push/3&lt;/code&gt; &lt;/a&gt; . 수신 콜백은 임시 상태를 유지하기 위해 &lt;code&gt;socket&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e4108bb7b421c03ddfde669d012f6caf3a8a55f8" translate="yes" xml:space="preserve">
          <source>After a client has successfully joined a channel, incoming events from the client are routed through the channel's &lt;code&gt;handle_in/3&lt;/code&gt; callbacks. Within these callbacks, you can perform any action. Typically you'll either forward a message to all listeners with &lt;a href=&quot;#broadcast!/3&quot;&gt;&lt;code&gt;broadcast!/3&lt;/code&gt;&lt;/a&gt;, or push a message directly down the socket with &lt;a href=&quot;#push/3&quot;&gt;&lt;code&gt;push/3&lt;/code&gt;&lt;/a&gt;. Incoming callbacks must return the &lt;code&gt;socket&lt;/code&gt; to maintain ephemeral state.</source>
          <target state="translated">클라이언트가 채널에 성공적으로 참여한 후 클라이언트에서 들어오는 이벤트는 채널의 &lt;code&gt;handle_in/3&lt;/code&gt; 콜백을 통해 라우팅됩니다 . 이러한 콜백 내에서 모든 작업을 수행 할 수 있습니다. 일반적으로 당신도 앞으로 모든 청취자에게 메시지거야 &lt;a href=&quot;#broadcast!/3&quot;&gt; &lt;code&gt;broadcast!/3&lt;/code&gt; &lt;/a&gt; 하거나와 소켓 아래로 직접 메시지를 푸시 &lt;a href=&quot;#push/3&quot;&gt; &lt;code&gt;push/3&lt;/code&gt; &lt;/a&gt; . 수신 콜백은 임시 상태를 유지하기 위해 &lt;code&gt;socket&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4903a2f13a8bc80aa4ddc4c8cfc092578f620745" translate="yes" xml:space="preserve">
          <source>After a match is found, the block given as &lt;code&gt;do/end&lt;/code&gt; is stored as a function in the connection. This function is then retrieved and invoked in the &lt;code&gt;dispatch&lt;/code&gt; plug.</source>
          <target state="translated">일치가 발견되면 &lt;code&gt;do/end&lt;/code&gt; 로 지정된 블록 이 연결에 함수로 저장됩니다. 그런 다음이 기능은 &lt;code&gt;dispatch&lt;/code&gt; 플러그 에서 검색 및 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="26032b36670746e3434c695506614fe60aeea546" translate="yes" xml:space="preserve">
          <source>After casting, the changeset is given to many &lt;code&gt;Ecto.Changeset.validate_*&lt;/code&gt; functions that validate only the &lt;strong&gt;changed fields&lt;/strong&gt;. In other words: if a field was not given as a parameter, it won&amp;rsquo;t be validated at all. For example, if the params map contain only the &amp;ldquo;name&amp;rdquo; and &amp;ldquo;email&amp;rdquo; keys, the &amp;ldquo;age&amp;rdquo; validation won&amp;rsquo;t run.</source>
          <target state="translated">캐스트 후 변경 세트는 &lt;strong&gt;변경된 필드&lt;/strong&gt; 만 유효성 검증 하는 많은 &lt;code&gt;Ecto.Changeset.validate_*&lt;/code&gt; 함수에 제공 &lt;strong&gt;됩니다&lt;/strong&gt; . 즉, 필드가 매개 변수로 제공되지 않은 경우에는 필드의 유효성이 전혀 검증되지 않습니다. 예를 들어 params 맵에 &quot;name&quot;및 &quot;email&quot;키만 포함되어 있으면 &quot;age&quot;유효성 검사가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bf0e063e152ca973c9a117163e8a4b6bc3228047" translate="yes" xml:space="preserve">
          <source>After casting, the changeset is given to many &lt;code&gt;Ecto.Changeset.validate_*&lt;/code&gt; functions that validate only the &lt;strong&gt;changed fields&lt;/strong&gt;. In other words: if a field was not given as a parameter, it won't be validated at all. For example, if the params map contain only the &quot;name&quot; and &quot;email&quot; keys, the &quot;age&quot; validation won't run.</source>
          <target state="translated">캐스팅 후 &lt;strong&gt;변경된 필드&lt;/strong&gt; 만 확인 하는 많은 &lt;code&gt;Ecto.Changeset.validate_*&lt;/code&gt; 함수에 변경 집합이 제공 &lt;strong&gt;됩니다&lt;/strong&gt; . 즉, 필드가 매개 변수로 제공되지 않으면 전혀 유효성이 검증되지 않습니다. 예를 들어 params 맵에 &quot;name&quot;및 &quot;email&quot;키만 포함 된 경우 &quot;age&quot;유효성 검사가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a6aa70809ce1014ac0c0f588a1a20ec2a8f93b3c" translate="yes" xml:space="preserve">
          <source>After exploring the documentation and guides, consider checking out the &lt;a href=&quot;http://pages.plataformatec.com.br/ebook-whats-new-in-ecto-2-0&quot;&gt;&amp;ldquo;What&amp;rsquo;s new in Ecto 2.1&amp;rdquo;&lt;/a&gt; free ebook to learn more about many features in Ecto 2.1 such as &lt;code&gt;many_to_many&lt;/code&gt;, schemaless queries, concurrent testing and more. Note the book still largely applies to Ecto 3.0 as the major change in Ecto 3.0 was the removal of the outdated Ecto datetime types in favor of Elixir&amp;rsquo;s Calendar types.</source>
          <target state="translated">설명서 및 안내서 를 &lt;code&gt;many_to_many&lt;/code&gt; 후 &lt;a href=&quot;http://pages.plataformatec.com.br/ebook-whats-new-in-ecto-2-0&quot;&gt;&quot;Ecto 2.1의 새로운&lt;/a&gt; 기능 &quot; 무료 전자 책을 확인하여 many_to_many , 스키마없는 쿼리, 동시 테스트 등과 같은 Ecto 2.1의 많은 기능에 대해 자세히 알아보십시오 . Ecto 3.0의 주요 변경 사항은 Elixir의 달력 유형을 선호하는 오래된 Ecto 날짜 시간 유형을 제거했기 때문에이 책은 여전히 ​​Ecto 3.0에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="bdea6ffdf38afdd8a0ea1ddf12cc241f602f9239" translate="yes" xml:space="preserve">
          <source>After persisting &lt;code&gt;weather&lt;/code&gt; to the database, it will return a new copy of &lt;code&gt;%Weather{}&lt;/code&gt; with the primary key (the &lt;code&gt;id&lt;/code&gt;) set. We can use this value to read a struct back from the repository:</source>
          <target state="translated">&lt;code&gt;weather&lt;/code&gt; 를 데이터베이스에 유지 한 후 기본 키 ( &lt;code&gt;id&lt;/code&gt; )가 설정된 새 &lt;code&gt;%Weather{}&lt;/code&gt; 복사본을 반환합니다 . 이 값을 사용하여 저장소에서 구조체를 다시 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afc8a3c116cb06fd08163a570db09643a9c02a4b" translate="yes" xml:space="preserve">
          <source>After the callback is invoked, the error is re-raised.</source>
          <target state="translated">콜백이 호출 된 후 오류가 다시 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1de59739d4d270b220874ec766f302986a4a91d4" translate="yes" xml:space="preserve">
          <source>After this change, you must recompile plug:</source>
          <target state="translated">이 변경 후에는 플러그를 다시 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="252ef139af6f0fdc730b089eed9232ba35c0bc13" translate="yes" xml:space="preserve">
          <source>Aggregates: &lt;a href=&quot;#count/0&quot;&gt;&lt;code&gt;count/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#count/1&quot;&gt;&lt;code&gt;count/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#avg/1&quot;&gt;&lt;code&gt;avg/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#sum/1&quot;&gt;&lt;code&gt;sum/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#min/1&quot;&gt;&lt;code&gt;min/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#max/1&quot;&gt;&lt;code&gt;max/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">집계 : &lt;a href=&quot;#count/0&quot;&gt; &lt;code&gt;count/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#count/1&quot;&gt; &lt;code&gt;count/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#avg/1&quot;&gt; &lt;code&gt;avg/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#sum/1&quot;&gt; &lt;code&gt;sum/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#min/1&quot;&gt; &lt;code&gt;min/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#max/1&quot;&gt; &lt;code&gt;max/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c172a0bad59b89ef6d9a76d5ce1da6b2bf7d1af3" translate="yes" xml:space="preserve">
          <source>All adapters are required to implement a clause for :binary_id types, since they are adapter specific. If your adapter does not provide binary ids, you may simply use &lt;a href=&quot;ecto.uuid&quot;&gt;&lt;code&gt;Ecto.UUID&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">모든 어댑터는 어댑터마다 다르기 때문에 : binary_id 유형에 대한 절을 구현해야합니다. 어댑터가 이진 ID를 제공하지 않으면 간단히 &lt;a href=&quot;ecto.uuid&quot;&gt; &lt;code&gt;Ecto.UUID&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69c12b3b6c00c84ec71486ef08e3c19bbae79e25" translate="yes" xml:space="preserve">
          <source>All adapters are required to implement a clause for &lt;code&gt;:binary_id&lt;/code&gt; types, since they are adapter specific. If your adapter does not provide binary ids, you may simply use &lt;a href=&quot;ecto.uuid&quot;&gt;&lt;code&gt;Ecto.UUID&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">모든 어댑터는 어댑터마다 &lt;code&gt;:binary_id&lt;/code&gt; 때문에 : binary_id 유형에 대한 절을 구현해야합니다 . 어댑터가 이진 ID를 제공하지 않으면 간단히 &lt;a href=&quot;ecto.uuid&quot;&gt; &lt;code&gt;Ecto.UUID&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d45225e1467161970b40e45c5803f0dbfd88ffa" translate="yes" xml:space="preserve">
          <source>All endpoints are configured in your application environment. For example:</source>
          <target state="translated">모든 엔드 포인트는 애플리케이션 환경에서 구성됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4b09c1ec9758d43f4962774adb6d17753fba520f" translate="yes" xml:space="preserve">
          <source>All event callbacks are run in the same process that calls the &lt;a href=&quot;#c:instrument/3&quot;&gt;&lt;code&gt;instrument/3&lt;/code&gt;&lt;/a&gt; macro; hence, instrumenters should be careful to avoid performing blocking actions. If an event callback fails in any way (exits, throws, or raises), it won&amp;rsquo;t affect anything as the error is caught, but the failure will be logged. Note that &amp;ldquo;after&amp;rdquo; callbacks are not guaranteed to be called as, for example, a link may break before they&amp;rsquo;ve been called.</source>
          <target state="translated">모든 이벤트 콜백은 &lt;a href=&quot;#c:instrument/3&quot;&gt; &lt;code&gt;instrument/3&lt;/code&gt; &lt;/a&gt; 매크로 를 호출하는 동일한 프로세스에서 실행됩니다 . 따라서 계측기는 차단 작업을 수행하지 않도록주의해야합니다. 이벤트 콜백이 어떤 식 으로든 실패하면 (종료, 발생 또는 발생) 오류가 발생해도 아무 영향을 미치지 않지만 실패는 기록됩니다. 예를 들어, 링크가 호출되기 전에 링크가 끊어 질 수 있으므로 &quot;후&quot;콜백이 호출되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="ad7544f2dd291d98846f1fadb6ce98ab43a5d856" translate="yes" xml:space="preserve">
          <source>All given options are forwarded to the underlying input, default values are provided for id, name and textarea content if possible.</source>
          <target state="translated">주어진 모든 옵션은 기본 입력으로 전달되며 가능한 경우 id, name 및 textarea content에 대한 기본값이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="813dc7e9919c783a01744c6de9aa6e536e1981be" translate="yes" xml:space="preserve">
          <source>All given options are forwarded to the underlying input, default values are provided for id, name and value if possible.</source>
          <target state="translated">주어진 모든 옵션은 기본 입력으로 전달되며 가능한 경우 id, name 및 value에 대한 기본값이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="9f5563600902eea5e57e862ead255e4eba991ece" translate="yes" xml:space="preserve">
          <source>All given options are forwarded to the underlying tag. A default value is provided for &lt;code&gt;for&lt;/code&gt; attribute but can be overriden if you pass a value to the &lt;code&gt;for&lt;/code&gt; option. Text content would be inferred from &lt;code&gt;field&lt;/code&gt; if not specified.</source>
          <target state="translated">주어진 모든 옵션은 기본 태그로 전달됩니다. 기본 값은 제공됩니다 &lt;code&gt;for&lt;/code&gt; 속성하지만 당신은에 값을 전달하면 오버라이드 (override) 할 수 있습니다 &lt;code&gt;for&lt;/code&gt; 옵션을 선택합니다. 지정하지 않으면 텍스트 내용이 &lt;code&gt;field&lt;/code&gt; 에서 유추 됩니다.</target>
        </trans-unit>
        <trans-unit id="e79ca9879a7fed3a2fbfd722b280d01bd7565c08" translate="yes" xml:space="preserve">
          <source>All measurements are given in the &lt;code&gt;:native&lt;/code&gt; time unit. You can read more about it in the docs for &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt;&lt;code&gt;System.convert_time_unit/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모든 측정은 &lt;code&gt;:native&lt;/code&gt; 시간 단위로 제공됩니다. &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt; &lt;code&gt;System.convert_time_unit/3&lt;/code&gt; &lt;/a&gt; 문서에서 자세한 내용을 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="499393acc73825c4c36e7d2c38f112f85ee41bf0" translate="yes" xml:space="preserve">
          <source>All names must be unique between both structures.</source>
          <target state="translated">모든 이름은 두 구조간에 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="8db0c93c2441d2db62c9efdff79f4e349d222d42" translate="yes" xml:space="preserve">
          <source>All of Phoenix configuration, except the Compile-time configuration below can be set dynamically from the &lt;a href=&quot;#c:init/2&quot;&gt;&lt;code&gt;init/2&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">아래 컴파일 시간 구성을 제외한 모든 Phoenix 구성은 &lt;a href=&quot;#c:init/2&quot;&gt; &lt;code&gt;init/2&lt;/code&gt; &lt;/a&gt; 콜백 에서 동적으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="10b993f627ba62806b1f8752d0a4bbd00b261025" translate="yes" xml:space="preserve">
          <source>All of those types are represented by the same timestamp/datetime in the underlying data storage, the difference are in their precision and how the data is loaded into Elixir.</source>
          <target state="translated">이러한 모든 유형은 기본 데이터 저장소에서 동일한 타임 스탬프 / 날짜 시간으로 표시되며 차이는 정밀도와 데이터가 Elixir에로드되는 방식에 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5e2d3cafbf3b1257c66222879054524fa83042b" translate="yes" xml:space="preserve">
          <source>All operations will be executed in the order they were added.</source>
          <target state="translated">모든 작업은 추가 된 순서대로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="bdcf9cd3751eb31bdc1527fb2f1dc7715bab71c1" translate="yes" xml:space="preserve">
          <source>All options are forwarded to the underlying button tag.</source>
          <target state="translated">모든 옵션은 기본 버튼 태그로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="422eebfcbf3c24c00aab6148bd4fb9a777d80147" translate="yes" xml:space="preserve">
          <source>All options are forwarded to the underlying button tag. When called with a &lt;code&gt;do:&lt;/code&gt; block, the button tag options come first.</source>
          <target state="translated">모든 옵션은 기본 버튼 태그로 전달됩니다. &lt;code&gt;do:&lt;/code&gt; 블록으로 호출 하면 버튼 태그 옵션이 먼저 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="522ddbe1f1dfe285f4aa9236aba2fc9ba59e6950" translate="yes" xml:space="preserve">
          <source>All options are forwarded to the underlying input tag.</source>
          <target state="translated">모든 옵션은 기본 입력 태그로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="7009b3da1def9b1ee6d1bd825e69020e72baee8d" translate="yes" xml:space="preserve">
          <source>All options are simply forwarded to the underlying HTML tag.</source>
          <target state="translated">모든 옵션은 단순히 기본 HTML 태그로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="558de1b31a7f35b365da32ef41bf2e958a244056" translate="yes" xml:space="preserve">
          <source>All options can be pre-configured by setting &lt;code&gt;@timestamps_opts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@timestamps_opts&lt;/code&gt; 를 설정하여 모든 옵션을 사전 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="28bc82a547f8d0a9365fca95f1387101711c40f1" translate="yes" xml:space="preserve">
          <source>All options supported by &lt;a href=&quot;plug.conn#read_body/2&quot;&gt;&lt;code&gt;Plug.Conn.read_body/2&lt;/code&gt;&lt;/a&gt; are also supported here. They are repeated here for convenience:</source>
          <target state="translated">&lt;a href=&quot;plug.conn#read_body/2&quot;&gt; &lt;code&gt;Plug.Conn.read_body/2&lt;/code&gt; &lt;/a&gt; 가 지원하는 모든 옵션 도 여기에서 지원됩니다. 편의를 위해 여기에 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="45cc7909dee625c35daed3413858b850ca7b70cf" translate="yes" xml:space="preserve">
          <source>All other options are forwarded to the underlying &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">다른 모든 옵션은 기본 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="0de8e7fa31635bbc8b9cb09d4c14202e448a3833" translate="yes" xml:space="preserve">
          <source>All other options are forwarded to the underlying HTML tag.</source>
          <target state="translated">다른 모든 옵션은 기본 HTML 태그로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="6f0461c97a5f7c04f3543b8d31b32467f48a927a" translate="yes" xml:space="preserve">
          <source>All other options are forwarded to the underlying button input.</source>
          <target state="translated">다른 모든 옵션은 기본 버튼 입력으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="d3cdbef73beb37bb98e96f11d133934f74a806ca" translate="yes" xml:space="preserve">
          <source>All other options are forwarded. See &lt;a href=&quot;#text_input/3&quot;&gt;&lt;code&gt;text_input/3&lt;/code&gt;&lt;/a&gt; for example and docs.</source>
          <target state="translated">다른 모든 옵션이 전달됩니다. 예를 들어, 문서는 &lt;a href=&quot;#text_input/3&quot;&gt; &lt;code&gt;text_input/3&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e5ce54eed717637497450620d027b4dc6f39dc64" translate="yes" xml:space="preserve">
          <source>All other options are passed to the underlying HTML tag.</source>
          <target state="translated">다른 모든 옵션은 기본 HTML 태그로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="f06429df7c982138e6fece80594cc2823997c039" translate="yes" xml:space="preserve">
          <source>All other types and dynamic values must be passed as a parameter using interpolation as explained below.</source>
          <target state="translated">다른 모든 유형과 동적 값은 아래 설명과 같이 보간을 사용하여 매개 변수로 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="8e0ed724d9fd7f66ef5b095b68eed5927f535ac7" translate="yes" xml:space="preserve">
          <source>All paths that match the forwarded prefix will be sent to the forwarded plug. This is useful for sharing a router between applications or even breaking a big router into smaller ones. The router pipelines will be invoked prior to forwarding the connection.</source>
          <target state="translated">전달 된 접두사와 일치하는 모든 경로가 전달 된 플러그로 전송됩니다. 응용 프로그램간에 라우터를 공유하거나 큰 라우터를 작은 라우터로 나누는 데 유용합니다. 연결을 전달하기 전에 라우터 파이프 라인이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="62b34ea36e859428b611c71d81b082ea47b9c097" translate="yes" xml:space="preserve">
          <source>All presences for a given Pid can be untracked by calling the &lt;a href=&quot;phoenix.tracker#untrack/2&quot;&gt;&lt;code&gt;Phoenix.Tracker.untrack/2&lt;/code&gt;&lt;/a&gt; signature of this function.</source>
          <target state="translated">이 함수 의 &lt;a href=&quot;phoenix.tracker#untrack/2&quot;&gt; &lt;code&gt;Phoenix.Tracker.untrack/2&lt;/code&gt; &lt;/a&gt; 서명을 호출하면 주어진 Pid에 대한 모든 존재를 추적 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6a339d2d44001129cb1c12faf11686559a271e99" translate="yes" xml:space="preserve">
          <source>All routes are compiled to a match function that receives three arguments: the method, the request path split on &lt;code&gt;/&lt;/code&gt; and the connection. Consider this example:</source>
          <target state="translated">모든 경로는 메소드, 요청 경로가 &lt;code&gt;/&lt;/code&gt; 및 연결의 세 가지 인수를받는 일치 함수로 컴파일됩니다 . 이 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="d12952e472708b80423f06432a2383dee2f914b2" translate="yes" xml:space="preserve">
          <source>All serialized, remote client messages should be deserialized and forwarded through this function by adapters.</source>
          <target state="translated">모든 직렬화 된 원격 클라이언트 메시지는이 기능을 통해 직렬화 해제되고 어댑터에 의해 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="93047db332d3fa7598466b439197809e8a9cb06e" translate="yes" xml:space="preserve">
          <source>All the instrumenter modules that export a &lt;code&gt;render_view/3&lt;/code&gt; function will be notified of the event so that they can perform their respective actions.</source>
          <target state="translated">&lt;code&gt;render_view/3&lt;/code&gt; 함수 를 내보내는 모든 인스트루먼트 모듈은 해당 조치를 수행 할 수 있도록 이벤트에 대한 알림을받습니다.</target>
        </trans-unit>
        <trans-unit id="bee5dcdc1845852a6cf857d54a045b05a91fe4b6" translate="yes" xml:space="preserve">
          <source>Allows a field to be dynamically accessed</source>
          <target state="translated">필드에 동적으로 액세스 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="500d682f2e570192910057021d322d492c7d8b70" translate="yes" xml:space="preserve">
          <source>Allows a field to be dynamically accessed.</source>
          <target state="translated">필드에 동적으로 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0feeacfc10a32e5cfe789e8b160f86661a34f0f9" translate="yes" xml:space="preserve">
          <source>Allows instrumenting operation defined by &lt;code&gt;function&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 정의 된 계측 작업 가능</target>
        </trans-unit>
        <trans-unit id="a267a50bfe0914d97c375bc375ed4341bebf430f" translate="yes" xml:space="preserve">
          <source>Allows instrumenting operation defined by &lt;code&gt;function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 정의 된 계측 작업을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="e9d7b7bbf93231434f82632551b53bdeb2d392f3" translate="yes" xml:space="preserve">
          <source>Almost all of the repository functions outlined in this module accept the following options:</source>
          <target state="translated">이 모듈에 설명 된 거의 모든 저장소 기능은 다음 옵션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="008d76871a9d79cfc587210844bce1eeecbd67bd" translate="yes" xml:space="preserve">
          <source>Almost all of the repository operations below accept the following options:</source>
          <target state="translated">아래의 거의 모든 리포지토리 작업은 다음 옵션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="11b63d2e626bbf29994f29ed30f1ba4744b7a184" translate="yes" xml:space="preserve">
          <source>Also note that if &lt;code&gt;:on_conflict&lt;/code&gt; is a query, MySQL will return the number of attempted entries plus the number of entries modified by the UPDATE query.</source>
          <target state="translated">또한 &lt;code&gt;:on_conflict&lt;/code&gt; 가 쿼리 인 경우 MySQL은 시도 된 항목 수와 UPDATE 쿼리에 의해 수정 된 항목 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8b9be8e8ffe8be69521563d9ef94e7723bf5a909" translate="yes" xml:space="preserve">
          <source>Also notice that these pages are going to be shown in production. If you are looking for error handling to help during development, consider using &lt;a href=&quot;plug.debugger&quot;&gt;&lt;code&gt;Plug.Debugger&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">또한이 페이지는 프로덕션에 표시 될 것입니다. 개발 중에 도움이되는 오류 처리를 찾고 있다면 &lt;a href=&quot;plug.debugger&quot;&gt; &lt;code&gt;Plug.Debugger&lt;/code&gt; &lt;/a&gt; 사용을 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a173642ed7a4ddf0000bbbe1795e679a521c855" translate="yes" xml:space="preserve">
          <source>Also, most adapters provide direct APIs for queries, like &lt;code&gt;Ecto.Adapters.SQL.query/4&lt;/code&gt;, allowing developers to completely bypass Ecto queries.</source>
          <target state="translated">또한 대부분의 어댑터는 &lt;code&gt;Ecto.Adapters.SQL.query/4&lt;/code&gt; 와 같은 쿼리에 대한 직접 API를 제공 하므로 개발자가 Ecto 쿼리를 완전히 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd52f213e28e01580c031fd88b310e77b168c916" translate="yes" xml:space="preserve">
          <source>Also, since the store is in-memory, it means sessions are not shared between servers. If you deploy to more than one machine, using this store is again not recommended.</source>
          <target state="translated">또한 저장소가 메모리에 있기 때문에 서버간에 세션이 공유되지 않습니다. 둘 이상의 머신에 배치하는 경우이 저장소를 다시 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6a8cf34f26d13a0056310f2520c841766dc8c37c" translate="yes" xml:space="preserve">
          <source>Alternatively, because Ecto does not tie a schema to a given table, we can use separate tables for each association. Let&amp;rsquo;s start over and define a new Comment schema:</source>
          <target state="translated">또는 Ecto가 스키마를 주어진 테이블에 연결하지 않기 때문에 각 연관에 대해 별도의 테이블을 사용할 수 있습니다. 다시 시작하고 새로운 주석 스키마를 정의 해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="f304a61eac0b8370145fa3e55918d747117ffe93" translate="yes" xml:space="preserve">
          <source>Alternatively, because Ecto does not tie a schema to a given table, we can use separate tables for each association. Let's start over and define a new Comment schema:</source>
          <target state="translated">또는 Ecto는 스키마를 주어진 테이블에 연결하지 않기 때문에 각 연결에 대해 별도의 테이블을 사용할 수 있습니다. 다시 시작하고 새 Comment 스키마를 정의 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="321dd6338631d0cf6375c9af526cc1849ab8b29e" translate="yes" xml:space="preserve">
          <source>Alternatively, if you don't have a connection, you can pass &lt;code&gt;:foo&lt;/code&gt; as the form data source and explicitly pass the value for every input:</source>
          <target state="translated">또는 연결이없는 경우 &lt;code&gt;:foo&lt;/code&gt; 를 양식 데이터 소스로 전달하고 모든 입력에 대한 값을 명시 적으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d9e91e29aab7f205ddafcbe7467410ed8756db7" translate="yes" xml:space="preserve">
          <source>Alternatively, read the data again from the database in a separate query. This option requires the primary key to be generated by the database:</source>
          <target state="translated">또는 별도의 쿼리로 데이터베이스에서 데이터를 다시 읽습니다. 이 옵션을 사용하려면 데이터베이스에서 기본 키를 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="96b57a7146f6ce2d246b6a8f8a80250e9febe6b8" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;--context-app&lt;/code&gt; option may be supplied to the generator:</source>
          <target state="translated">또는 &lt;code&gt;--context-app&lt;/code&gt; 옵션을 생성기에 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9acd6358ace335206d78edde3fec71a9150e3da0" translate="yes" xml:space="preserve">
          <source>Alternatively, we can make sure that when we create a comment, it is already associated to the post:</source>
          <target state="translated">또는 주석을 작성할 때 주석이 이미 게시물과 연관되어 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f69c752723942f38a03a10f6c3ef30bc5e097d42" translate="yes" xml:space="preserve">
          <source>Alternatively, you can give both &lt;code&gt;unique_index&lt;/code&gt; and &lt;code&gt;unique_constraint&lt;/code&gt; the same name:</source>
          <target state="translated">또는 &lt;code&gt;unique_index&lt;/code&gt; 와 &lt;code&gt;unique_constraint&lt;/code&gt; 에 동일한 이름을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="155429fd793002e8c29430c2e209cabe0d391fe9" translate="yes" xml:space="preserve">
          <source>Alternatively, you can set &lt;code&gt;@foreign_key_type EncodedId&lt;/code&gt; after &lt;code&gt;@primary_key&lt;/code&gt; to automatically configure the type of all &lt;code&gt;belongs_to&lt;/code&gt; fields.</source>
          <target state="translated">다른 방법으로는 설정할 수 있습니다 &lt;code&gt;@foreign_key_type EncodedId&lt;/code&gt; 을 한 후 &lt;code&gt;@primary_key&lt;/code&gt; 자동으로 모든 유형 구성 &lt;code&gt;belongs_to&lt;/code&gt; 의 필드.</target>
        </trans-unit>
        <trans-unit id="91a4516cb4d9630fe735eff5b37d5a2a87dbfc11" translate="yes" xml:space="preserve">
          <source>Alternatively, you could invoke only the Endpoint, and Router:</source>
          <target state="translated">또는 엔드 포인트 및 라우터 만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8738df28b370bcf5efa3bfda949331ffc50808f" translate="yes" xml:space="preserve">
          <source>Alternatively, you could only invoke the Endpoint's plugs:</source>
          <target state="translated">또는 엔드 포인트의 플러그 만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54b850ace8350ffbceab4c0b79db20ea808bef7c" translate="yes" xml:space="preserve">
          <source>Alternatively, you may just want to ack the status of the operation:</source>
          <target state="translated">또는 작업 상태를 확인하고 싶을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e34317bebd405610c93dc7524d10be7d18f71d8c" translate="yes" xml:space="preserve">
          <source>Although &lt;a href=&quot;#get_session/2&quot;&gt;&lt;code&gt;get_session/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#put_session/3&quot;&gt;&lt;code&gt;put_session/3&lt;/code&gt;&lt;/a&gt; allow atom keys, they are always normalized to strings. So this function always returns a map with string keys.</source>
          <target state="translated">비록 &lt;a href=&quot;#get_session/2&quot;&gt; &lt;code&gt;get_session/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#put_session/3&quot;&gt; &lt;code&gt;put_session/3&lt;/code&gt; &lt;/a&gt; 원자 키를 허용, 그들은 항상 문자열로 정규화된다. 따라서이 함수는 항상 문자열 키가있는 맵을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8b82e0c2efff897466ba5c521ebd48ecd4d5d5b5" translate="yes" xml:space="preserve">
          <source>Although bindings are extremely useful when working with joins, they are not necessary when the query has only the &lt;code&gt;from&lt;/code&gt; clause. For such cases, Ecto supports a way for building queries without specifying the binding:</source>
          <target state="translated">조인 작업시 바인딩은 매우 유용하지만 쿼리에 &lt;code&gt;from&lt;/code&gt; 절만 있는 경우에는 바인딩이 필요하지 않습니다 . 이러한 경우 Ecto는 바인딩을 지정하지 않고 쿼리를 작성하는 방법을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="1f64f45f378a0ba87745eec7c28990a06414ce18" translate="yes" xml:space="preserve">
          <source>Although forms provide the &lt;code&gt;accept-charset&lt;/code&gt; attribute, which we set to UTF-8, Internet Explorer 5 up to 8 may ignore the value of this attribute if the user chooses their browser to do so. This ends up triggering the browser to send data in a format that is not understandable by the server.</source>
          <target state="translated">양식은 &lt;code&gt;accept-charset&lt;/code&gt; 속성을 제공하지만 UTF-8로 설정 했지만 Internet Explorer 5에서 최대 8까지는 사용자가 브라우저를 선택하면이 속성의 값을 무시할 수 있습니다. 이로 인해 서버가 이해할 수없는 형식으로 데이터를 보내도록 브라우저가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="17d3aa2c2d04f2fcc928e33bb2ddcbcbfc203565" translate="yes" xml:space="preserve">
          <source>Although in the example above we have directly inserted and deleted the struct in the repository, operations on top of schemas are done through changesets so Ecto can efficiently track changes.</source>
          <target state="translated">위의 예에서 저장소에 구조체를 직접 삽입하고 삭제했지만 스키마 상단의 작업은 변경 세트를 통해 수행되므로 Ecto는 변경을 효율적으로 추적 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa9d520b19f1b97df56a3c0d2d0343f82052d807" translate="yes" xml:space="preserve">
          <source>Although it accepts an &lt;code&gt;opts&lt;/code&gt; argument, there are no options currently supported by &lt;a href=&quot;#put_assoc/4&quot;&gt;&lt;code&gt;put_assoc/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;opts&lt;/code&gt; 인수를 허용하지만 현재 &lt;a href=&quot;#put_assoc/4&quot;&gt; &lt;code&gt;put_assoc/4&lt;/code&gt; &lt;/a&gt; 에서 지원하는 옵션이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c9be422a570b817ed3d855feb6098dce936d8989" translate="yes" xml:space="preserve">
          <source>Although subqueries are not allowed in WHERE expressions, most subqueries in WHERE expression can be rewritten as JOINs. Imagine you want to write this query:</source>
          <target state="translated">WHERE 표현식에서는 서브 쿼리가 허용되지 않지만 WHERE 표현식의 대부분의 서브 쿼리는 JOIN으로 재 작성 될 수 있습니다. 이 쿼리를 작성한다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="2f2a66e6d0030e1b4305c62e74a0858c305811a6" translate="yes" xml:space="preserve">
          <source>Although this function accepts an &lt;code&gt;opts&lt;/code&gt; argument, there are no options currently supported by &lt;a href=&quot;#put_embed/4&quot;&gt;&lt;code&gt;put_embed/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;code&gt;opts&lt;/code&gt; 인수를 허용하지만 &lt;a href=&quot;#put_embed/4&quot;&gt; &lt;code&gt;put_embed/4&lt;/code&gt; 가&lt;/a&gt; 현재 지원하는 옵션은 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0641530ad7e78210b89579523486c166e2b46440" translate="yes" xml:space="preserve">
          <source>Although using fragments in joins is discouraged in favor of Ecto Query syntax, they are necessary when writing lateral joins as lateral joins require a subquery that refer to previous bindings:</source>
          <target state="translated">Ecto Query 구문을 선호하는 경우 조인에서 조각을 사용하지 않는 것이 좋지만 측면 조인은 이전 바인딩을 참조하는 하위 쿼리가 필요하므로 측면 조인을 작성할 때 필요합니다.</target>
        </trans-unit>
        <trans-unit id="55d091c50c4e2abce0a3176b2d62d4cfb4bd4e84" translate="yes" xml:space="preserve">
          <source>Although we have passed empty lists as options (they are required), you could pass any option there and it would be given to the underlying select input.</source>
          <target state="translated">빈 목록을 옵션으로 전달했지만 (필수), 옵션을 전달할 수 있으며 기본 선택 입력에 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="140149a20a6971f6d5a40d50bec976229608679d" translate="yes" xml:space="preserve">
          <source>Although we used the &lt;code&gt;:through&lt;/code&gt; association in the example above, Ecto also allows developers to dynamically build the through associations using the &lt;a href=&quot;ecto#assoc/2&quot;&gt;&lt;code&gt;Ecto.assoc/2&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">위 예제에서 &lt;code&gt;:through&lt;/code&gt; 연관을 사용했지만 Ecto를 사용하면 개발자가 &lt;a href=&quot;ecto#assoc/2&quot;&gt; &lt;code&gt;Ecto.assoc/2&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 스루 연관을 동적으로 빌드 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aeef3747bb3efd51e4e60eff7db9a330f2778ae5" translate="yes" xml:space="preserve">
          <source>Always use this function when you need to access the operations you have defined in &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt;. Inspecting the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt; struct internals directly is discouraged.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Ecto.Multi&lt;/code&gt; &lt;/a&gt; 에서 정의한 작업에 액세스해야 할 때 항상이 함수를 사용하십시오 . &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Ecto.Multi&lt;/code&gt; &lt;/a&gt; 구조체 내부를 직접 검사하는 것은 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="24fba89e4fce0a2ce2702abaf702532a39ce135c" translate="yes" xml:space="preserve">
          <source>Always use this function when you need to access the operations you have defined in &lt;a href=&quot;ecto.multi#content&quot;&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt;. Inspecting the &lt;a href=&quot;ecto.multi#content&quot;&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt; struct internals directly is discouraged.</source>
          <target state="translated">&lt;a href=&quot;ecto.multi#content&quot;&gt; &lt;code&gt;Ecto.Multi&lt;/code&gt; &lt;/a&gt; 에서 정의한 작업에 액세스해야 할 때 항상이 기능을 사용하십시오 . &lt;a href=&quot;ecto.multi#content&quot;&gt; &lt;code&gt;Ecto.Multi&lt;/code&gt; &lt;/a&gt; 구조체 내부를 직접 검사하는 것은 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6e5e6980a6207bfda1df7d8524d322c342c91585" translate="yes" xml:space="preserve">
          <source>An AND having query expression</source>
          <target state="translated">쿼리 표현식이있는 AND</target>
        </trans-unit>
        <trans-unit id="ff58307b231d1a6631bb29744d6ded1a8700a2d2" translate="yes" xml:space="preserve">
          <source>An AND having query expression.</source>
          <target state="translated">쿼리 표현식이있는 AND입니다.</target>
        </trans-unit>
        <trans-unit id="d7200124991255eec599c4a84169b97fd56a8907" translate="yes" xml:space="preserve">
          <source>An AND where query expression</source>
          <target state="translated">AND where 쿼리 표현식</target>
        </trans-unit>
        <trans-unit id="8369e04976e5489b84e7a49a7bab27b831a68025" translate="yes" xml:space="preserve">
          <source>An AND where query expression.</source>
          <target state="translated">AND where 쿼리 식입니다.</target>
        </trans-unit>
        <trans-unit id="85f6b794368cf376b191f2b1a8caf6b0c1cae948" translate="yes" xml:space="preserve">
          <source>An Ecto schema is used to map any data source into an Elixir struct. The definition of the schema is possible through two main APIs: &lt;a href=&quot;#schema/2&quot;&gt;&lt;code&gt;schema/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#embedded_schema/1&quot;&gt;&lt;code&gt;embedded_schema/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Ecto 스키마는 모든 데이터 소스를 Elixir 구조체에 매핑하는 데 사용됩니다. 스키마의 정의는 &lt;a href=&quot;#schema/2&quot;&gt; &lt;code&gt;schema/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#embedded_schema/1&quot;&gt; &lt;code&gt;embedded_schema/1&lt;/code&gt; 의&lt;/a&gt; 두 가지 주요 API를 통해 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="9a78c7a83d38ff7d46dcb4af94da86b3e6249f86" translate="yes" xml:space="preserve">
          <source>An Ecto type for UUIDs strings.</source>
          <target state="translated">UUID 문자열에 대한 Ecto 유형입니다.</target>
        </trans-unit>
        <trans-unit id="ee46e7344e9c28c8dc0c8ffba9e6f569b7f50779" translate="yes" xml:space="preserve">
          <source>An Ecto type, primitive or custom</source>
          <target state="translated">Ecto 유형, 기본 또는 사용자 정의</target>
        </trans-unit>
        <trans-unit id="8753ca89d3033960625e32cacf9b8fa1380573d9" translate="yes" xml:space="preserve">
          <source>An Ecto type, primitive or custom.</source>
          <target state="translated">Ecto 유형, 기본 또는 사용자 정의.</target>
        </trans-unit>
        <trans-unit id="1499f024456d3f29759e8d864a77949d738934a4" translate="yes" xml:space="preserve">
          <source>An OR having query expression</source>
          <target state="translated">쿼리 표현식이있는 OR</target>
        </trans-unit>
        <trans-unit id="ba50741815527d5b973e074417869ccab912f791" translate="yes" xml:space="preserve">
          <source>An OR having query expression.</source>
          <target state="translated">쿼리식이있는 OR</target>
        </trans-unit>
        <trans-unit id="23272f9f7cc78f869c4f93ecdc53976c326941ef" translate="yes" xml:space="preserve">
          <source>An OR where query expression</source>
          <target state="translated">OR 식 쿼리 식</target>
        </trans-unit>
        <trans-unit id="6eb1fef5cd61957f88210544d0ec10e50372df50" translate="yes" xml:space="preserve">
          <source>An OR where query expression.</source>
          <target state="translated">OR 식 쿼리 식입니다.</target>
        </trans-unit>
        <trans-unit id="6a2d43b1af1e0b2dcdb60baef14605ef1b374ed9" translate="yes" xml:space="preserve">
          <source>An action is a regular function that receives the connection and the request parameters as arguments. The connection is a &lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; struct, as specified by the Plug library.</source>
          <target state="translated">작업은 연결 및 요청 매개 변수를 인수로받는 일반 함수입니다. 연결은 Plug 라이브러리에 지정된 &lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt; 구조체입니다.</target>
        </trans-unit>
        <trans-unit id="40ac62949b4ea3b0d9e9b75feb023914d2fa707d" translate="yes" xml:space="preserve">
          <source>An action is a regular function that receives the connection and the request parameters as arguments. The connection is a &lt;a href=&quot;../plug/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; struct, as specified by the Plug library.</source>
          <target state="translated">작업은 연결 및 요청 매개 변수를 인수로받는 일반 함수입니다. 연결은 Plug 라이브러리에 지정된대로 &lt;a href=&quot;../plug/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt; 구조체입니다.</target>
        </trans-unit>
        <trans-unit id="bddff83f0e69da582ee7c2d814251936eff28fb7" translate="yes" xml:space="preserve">
          <source>An additional field called &lt;code&gt;__meta__&lt;/code&gt; is added to the struct for storing internal Ecto state. This field always has a &lt;a href=&quot;ecto.schema.metadata&quot;&gt;&lt;code&gt;Ecto.Schema.Metadata&lt;/code&gt;&lt;/a&gt; struct as value and can be manipulated with the &lt;a href=&quot;ecto#put_meta/2&quot;&gt;&lt;code&gt;Ecto.put_meta/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">내부 Ecto 상태를 저장하기위한 구조체에 &lt;code&gt;__meta__&lt;/code&gt; 라는 추가 필드 가 추가됩니다. 이 필드는 항상 &lt;a href=&quot;ecto.schema.metadata&quot;&gt; &lt;code&gt;Ecto.Schema.Metadata&lt;/code&gt; &lt;/a&gt; 구조체를 값으로 가지며 &lt;a href=&quot;ecto#put_meta/2&quot;&gt; &lt;code&gt;Ecto.put_meta/2&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 조작 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fae9eb87297abc7420a4adb2f4971432ff909c98" translate="yes" xml:space="preserve">
          <source>An additional keyword list &lt;code&gt;keys&lt;/code&gt; can be passed to provide additional contextual information for the error. This is useful when using &lt;a href=&quot;#traverse_errors/2&quot;&gt;&lt;code&gt;traverse_errors/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">오류에 대한 추가 컨텍스트 정보를 제공하기 위해 추가 키워드 목록 &lt;code&gt;keys&lt;/code&gt; 를 전달할 수 있습니다. &lt;a href=&quot;#traverse_errors/2&quot;&gt; &lt;code&gt;traverse_errors/2&lt;/code&gt; 를&lt;/a&gt; 사용할 때 유용합니다</target>
        </trans-unit>
        <trans-unit id="3cbecaa468000b1cd8e9438a0f21c36bad5b7afb" translate="yes" xml:space="preserve">
          <source>An embedded schema is either embedded into another schema or kept exclusively in memory. For this reason, an embedded schema does not require a source name and it does not include a metadata field.</source>
          <target state="translated">임베드 된 스키마는 다른 스키마에 임베드되거나 독점적으로 메모리에 보관됩니다. 이러한 이유로 임베디드 스키마에는 소스 이름이 필요하지 않으며 메타 데이터 필드가 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7ab7ad8e3a3ea01a0e010a1f3d78b1a31b131365" translate="yes" xml:space="preserve">
          <source>An empty request body is parsed as an empty map.</source>
          <target state="translated">빈 요청 본문은 빈 맵으로 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="e437d69f5b4b7cd7366f20508cb7cc728cfa22eb" translate="yes" xml:space="preserve">
          <source>An endpoint is simply a module defined with the help of &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.Endpoint&lt;/code&gt;&lt;/a&gt;. If you have used the &lt;a href=&quot;mix.tasks.phx.new&quot;&gt;&lt;code&gt;mix phx.new&lt;/code&gt;&lt;/a&gt; generator, an endpoint was automatically generated as part of your application:</source>
          <target state="translated">엔드 포인트는 단순히 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.Endpoint&lt;/code&gt; &lt;/a&gt; 의 도움으로 정의 된 모듈 입니다. 당신이 사용하는 경우 &lt;a href=&quot;mix.tasks.phx.new&quot;&gt; &lt;code&gt;mix phx.new&lt;/code&gt; &lt;/a&gt; 발전기, 엔드 포인트가 자동으로 응용 프로그램의 일부로 생성되었습니다</target>
        </trans-unit>
        <trans-unit id="3b4b6b176041a548d4533de816c409382e35bce6" translate="yes" xml:space="preserve">
          <source>An endpoint is simply a module defined with the help of &lt;a href=&quot;phoenix.endpoint#content&quot;&gt;&lt;code&gt;Phoenix.Endpoint&lt;/code&gt;&lt;/a&gt;. If you have used the &lt;code&gt;mix phx.new&lt;/code&gt; generator, an endpoint was automatically generated as part of your application:</source>
          <target state="translated">엔드 포인트는 단순히 &lt;a href=&quot;phoenix.endpoint#content&quot;&gt; &lt;code&gt;Phoenix.Endpoint&lt;/code&gt; &lt;/a&gt; 의 도움으로 정의 된 모듈 입니다. &lt;code&gt;mix phx.new&lt;/code&gt; 생성기를 사용한 경우 애플리케이션의 일부로 엔드 포인트가 자동으로 생성되었습니다.</target>
        </trans-unit>
        <trans-unit id="cde03332fee4ff115f16002c9f108e996e9a75a6" translate="yes" xml:space="preserve">
          <source>An error occurred and it will be handled by a different mechanism than the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. Likely this approach involves calling &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#restart_child/2&quot;&gt;&lt;code&gt;Supervisor.restart_child/2&lt;/code&gt;&lt;/a&gt; after a delay to attempt a restart.</source>
          <target state="translated">오류가 발생했으며 &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 와 다른 메커니즘으로 처리됩니다 . 이 방법은 지연 후 &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#restart_child/2&quot;&gt; &lt;code&gt;Supervisor.restart_child/2&lt;/code&gt; &lt;/a&gt; 를 호출 하여 재시작을 시도하는 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="85d6ba7886e5493304a69c583a7b939934f2bf94" translate="yes" xml:space="preserve">
          <source>An except (set difference) query expression</source>
          <target state="translated">예외 (차이) 쿼리 표현식</target>
        </trans-unit>
        <trans-unit id="a5b26fb8a6cee45d37102dcd6e34101d2586040f" translate="yes" xml:space="preserve">
          <source>An except (set difference) query expression.</source>
          <target state="translated">예외 (차이) 쿼리 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="b2a86c97233377ac8c34017ea9c780741efcd5ce" translate="yes" xml:space="preserve">
          <source>An informational response, such as an early hint, must happen prior to a response being sent. If an informational request is attempted after a response is sent then a &lt;a href=&quot;plug.conn.alreadysenterror&quot;&gt;&lt;code&gt;Plug.Conn.AlreadySentError&lt;/code&gt;&lt;/a&gt; will be raised. Only status codes from 100-199 are valid.</source>
          <target state="translated">초기 힌트와 같은 정보 응답은 응답을 보내기 전에 발생해야합니다. 응답이 전송 된 후 정보 요청이 시도되면 &lt;a href=&quot;plug.conn.alreadysenterror&quot;&gt; &lt;code&gt;Plug.Conn.AlreadySentError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 100-199의 상태 코드 만 유효합니다.</target>
        </trans-unit>
        <trans-unit id="c082ed6b2def64ed72b5ea45a1fc1293aa16df24" translate="yes" xml:space="preserve">
          <source>An intersect query expression</source>
          <target state="translated">교차 쿼리 표현식</target>
        </trans-unit>
        <trans-unit id="f37d10b2a22904ef45fb94fc0d7c0dcd59a32a4d" translate="yes" xml:space="preserve">
          <source>An intersect query expression.</source>
          <target state="translated">교차 쿼리 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="869fb8b610e0b6bb65e566732a732a81015cf3d5" translate="yes" xml:space="preserve">
          <source>An offset query expression</source>
          <target state="translated">오프셋 쿼리 식</target>
        </trans-unit>
        <trans-unit id="165b52f75af17c46b4b3fa96c13c255f0bde19ed" translate="yes" xml:space="preserve">
          <source>An offset query expression.</source>
          <target state="translated">오프셋 쿼리 식입니다.</target>
        </trans-unit>
        <trans-unit id="79928e4dd3b57a8c42acb325b5879c6056476cbb" translate="yes" xml:space="preserve">
          <source>An order by query expression</source>
          <target state="translated">쿼리 표현 식별 순서</target>
        </trans-unit>
        <trans-unit id="10e6e45231ed552f934b7c86d653cb891f6f2153" translate="yes" xml:space="preserve">
          <source>An order by query expression.</source>
          <target state="translated">쿼리 식별 순서입니다.</target>
        </trans-unit>
        <trans-unit id="22439862de76cde9fbf60016e20e02131f76032d" translate="yes" xml:space="preserve">
          <source>An update query expression</source>
          <target state="translated">업데이트 쿼리 식</target>
        </trans-unit>
        <trans-unit id="ffcb9217c46e5f5eaa187819e15623ec94356a15" translate="yes" xml:space="preserve">
          <source>An update query expression.</source>
          <target state="translated">업데이트 쿼리 식입니다.</target>
        </trans-unit>
        <trans-unit id="d32de79e50a18b2c10b2499fb3ad6f596ca4c0db" translate="yes" xml:space="preserve">
          <source>And now we want to make sure to return both the post title and the comment body. Although we may not know how many bindings there are in the query, we are sure posts is the first binding and comments are the last one, so we can write:</source>
          <target state="translated">이제 게시물 제목과 댓글 본문을 모두 반환해야합니다. 쿼리에 몇 개의 바인딩이 있는지 알 수 없지만 게시물이 첫 번째 바인딩이고 주석이 마지막 바인딩이므로 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86e9bcc3bf6ef74ce2cfbfff9b59b847e7893f8f" translate="yes" xml:space="preserve">
          <source>And now you can simply use it from your controller:</source>
          <target state="translated">이제 컨트롤러에서 간단히 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50fb2f2cee17d104e440238643e1e3cbf6bf874f" translate="yes" xml:space="preserve">
          <source>And now you can use it in accepts too:</source>
          <target state="translated">그리고 이제 당신도 그것을 받아 들일 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="56ec252cb1d699087781a4616d1dc2ca2a889473" translate="yes" xml:space="preserve">
          <source>And then execute the query:</source>
          <target state="translated">그런 다음 쿼리를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="858ad2f63ffc7c337c04d12219e741685eb346ff" translate="yes" xml:space="preserve">
          <source>Annotates a plug will receive the options given to the current module itself as arguments</source>
          <target state="translated">플러그는 현재 모듈 자체에 인수로 주어진 옵션을 받게됩니다.</target>
        </trans-unit>
        <trans-unit id="3ca7c7d5899dadd1120e30c45c0410c89a0f196d" translate="yes" xml:space="preserve">
          <source>Annotates a plug will receive the options given to the current module itself as arguments.</source>
          <target state="translated">주석은 플러그가 현재 모듈 자체에 인수로 주어진 옵션을받습니다.</target>
        </trans-unit>
        <trans-unit id="6c7f32ee11fa615e66a13dec2e34a0dfb1c524e9" translate="yes" xml:space="preserve">
          <source>Another advantage of using schemas is that we no longer need to specify the select option in queries, as by default Ecto will retrieve all fields specified in the schema:</source>
          <target state="translated">스키마 사용의 또 다른 장점은 기본적으로 Ecto가 스키마에 지정된 모든 필드를 검색하므로 쿼리에서 선택 옵션을 지정할 필요가 없다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d1c86f6d10d0bf2429514d920bb8250e03a07332" translate="yes" xml:space="preserve">
          <source>Another function in &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Ecto&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;#build_assoc/3&quot;&gt;&lt;code&gt;build_assoc/3&lt;/code&gt;&lt;/a&gt;, which allows someone to build an associated struct with the proper fields:</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Ecto&lt;/code&gt; 의&lt;/a&gt; 또 다른 기능 은 &lt;a href=&quot;#build_assoc/3&quot;&gt; &lt;code&gt;build_assoc/3&lt;/code&gt; 입니다&lt;/a&gt; . 이것은 누군가가 적절한 필드와 관련된 구조체를 만들 수 있도록합니다 :</target>
        </trans-unit>
        <trans-unit id="3aef06e4e0539721c1ea8108e13b3694b5a7fb56" translate="yes" xml:space="preserve">
          <source>Another function in &lt;a href=&quot;ecto#content&quot;&gt;&lt;code&gt;Ecto&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;#build_assoc/3&quot;&gt;&lt;code&gt;build_assoc/3&lt;/code&gt;&lt;/a&gt;, which allows someone to build an associated struct with the proper fields:</source>
          <target state="translated">&lt;a href=&quot;ecto#content&quot;&gt; &lt;code&gt;Ecto&lt;/code&gt; 의&lt;/a&gt; 또 다른 함수 는 &lt;a href=&quot;#build_assoc/3&quot;&gt; &lt;code&gt;build_assoc/3&lt;/code&gt; &lt;/a&gt; 이며,이를 통해 누군가가 적절한 필드로 관련 구조체를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd51eafaf130785ca495e1b2d9c65d26d8d92ea8" translate="yes" xml:space="preserve">
          <source>Another option for flexibly building queries with joins are named bindings. Coming back to the previous example, provided we bind a join to a concrete name:</source>
          <target state="translated">조인으로 유연하게 쿼리를 작성하는 또 다른 옵션은 이름 지정된 바인딩입니다. 이전 예제로 돌아가서 구체적인 이름에 조인을 바인딩하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="71a1d2bae841fd6d3cbb64b750fa8f6aa10792f8" translate="yes" xml:space="preserve">
          <source>Any element of the path can be dynamic:</source>
          <target state="translated">Any element of the path can be dynamic:</target>
        </trans-unit>
        <trans-unit id="446a599b7f56e42924adcc359314759564aef04a" translate="yes" xml:space="preserve">
          <source>Any key in &lt;code&gt;on&lt;/code&gt; will apply to the currently joined expression.</source>
          <target state="translated">의 모든 키 &lt;code&gt;on&lt;/code&gt; 현재 가입 표현에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="7975e28c47c5f1c7d5d84990d36a6f61381c95cb" translate="yes" xml:space="preserve">
          <source>Any of those choices can be disabled on a per choice basis by specifying the equivalent SSL option alongside the cipher suite.</source>
          <target state="translated">암호화 제품군과 함께 동등한 SSL 옵션을 지정하여 선택 사항별로 선택 사항을 사용하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75f75593bfe3c7c9fa04ff0433e00417f5df7957" translate="yes" xml:space="preserve">
          <source>Any parameter that was not explicitly listed in the fields list will be ignored.</source>
          <target state="translated">필드 목록에 명시 적으로 나열되지 않은 매개 변수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="41770eb3e1ebe73b5cee06e82ee72c33af97f4d3" translate="yes" xml:space="preserve">
          <source>Any preload or select in the query will be ignored in favor of the column being aggregated.</source>
          <target state="translated">쿼리에서 사전로드 또는 선택은 집계되는 열을 위해 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="4f8003575824cb241e72db8ad63398a3ff6314ed" translate="yes" xml:space="preserve">
          <source>Any process exit is treated as an error by the socket layer unless a &lt;code&gt;{:socket_close, pid, reason}&lt;/code&gt; message is sent to the socket before shutdown.</source>
          <target state="translated">Any process exit is treated as an error by the socket layer unless a &lt;code&gt;{:socket_close, pid, reason}&lt;/code&gt; message is sent to the socket before shutdown.</target>
        </trans-unit>
        <trans-unit id="300cfabfd4866cec4228fbe86fd289ab17ee02d3" translate="yes" xml:space="preserve">
          <source>Any schema module will generate the &lt;code&gt;__schema__&lt;/code&gt; function that can be used for runtime introspection of the schema:</source>
          <target state="translated">모든 스키마 모듈은 스키마의 런타임 내부 검사에 사용할 수있는 &lt;code&gt;__schema__&lt;/code&gt; 함수를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="6e3a58d59ec917c307d1a1fb3de7a558a9eaf30c" translate="yes" xml:space="preserve">
          <source>Any schemas using &lt;code&gt;MyApp.Schema&lt;/code&gt; will get the &lt;code&gt;:id&lt;/code&gt; field with type &lt;code&gt;:binary_id&lt;/code&gt; as the primary key. We explain what the &lt;code&gt;:binary_id&lt;/code&gt; type entails in the next section.</source>
          <target state="translated">&lt;code&gt;MyApp.Schema&lt;/code&gt; 를 사용하는 모든 스키마 는 &lt;code&gt;:binary_id&lt;/code&gt; 유형 의 &lt;code&gt;:id&lt;/code&gt; 필드를 기본 키로 가져옵니다 . 다음 섹션에서 &lt;code&gt;:binary_id&lt;/code&gt; 유형의 내용을 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="5a47721bdd6f49dc71fd1d1d556d93aeac0052dc" translate="yes" xml:space="preserve">
          <source>Any topic coming into the router with the &lt;code&gt;&quot;room:&quot;&lt;/code&gt; prefix would dispatch to &lt;code&gt;MyApp.RoomChannel&lt;/code&gt; in the above example. Topics can also be pattern matched in your channels&amp;rsquo; &lt;code&gt;join/3&lt;/code&gt; callback to pluck out the scoped pattern:</source>
          <target state="translated">접두사가 &lt;code&gt;&quot;room:&quot;&lt;/code&gt; 라우터로 들어오는 모든 주제 는 위 예에서 &lt;code&gt;MyApp.RoomChannel&lt;/code&gt; 로 발송됩니다 . 채널의 &lt;code&gt;join/3&lt;/code&gt; 콜백 에서 주제를 패턴 일치 하여 범위가 지정된 패턴을 추출 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c78b7ad84b8b92a86b6384a17069d524569aa3d2" translate="yes" xml:space="preserve">
          <source>Any topic coming into the router with the &lt;code&gt;&quot;room:&quot;&lt;/code&gt; prefix would dispatch to &lt;code&gt;MyApp.RoomChannel&lt;/code&gt; in the above example. Topics can also be pattern matched in your channels' &lt;code&gt;join/3&lt;/code&gt; callback to pluck out the scoped pattern:</source>
          <target state="translated">Any topic coming into the router with the &lt;code&gt;&quot;room:&quot;&lt;/code&gt; prefix would dispatch to &lt;code&gt;MyApp.RoomChannel&lt;/code&gt; in the above example. Topics can also be pattern matched in your channels' &lt;code&gt;join/3&lt;/code&gt; callback to pluck out the scoped pattern:</target>
        </trans-unit>
        <trans-unit id="380633ac14a276ca3da8d636824d32f161eeaebb" translate="yes" xml:space="preserve">
          <source>Any value can be used on the right-side of &lt;code&gt;in&lt;/code&gt; as long as it implements the &lt;a href=&quot;ecto.queryable&quot;&gt;&lt;code&gt;Ecto.Queryable&lt;/code&gt;&lt;/a&gt; protocol. For now, we know the protocol is implemented for both atoms (like &lt;code&gt;User&lt;/code&gt;) and strings (like &quot;users&quot;).</source>
          <target state="translated">Any value can be used on the right-side of &lt;code&gt;in&lt;/code&gt; as long as it implements the &lt;a href=&quot;ecto.queryable&quot;&gt; &lt;code&gt;Ecto.Queryable&lt;/code&gt; &lt;/a&gt; protocol. For now, we know the protocol is implemented for both atoms (like &lt;code&gt;User&lt;/code&gt; ) and strings (like &quot;users&quot;).</target>
        </trans-unit>
        <trans-unit id="4f22fd2991e728e7d7b2e3f805e73ae5fa52bfbf" translate="yes" xml:space="preserve">
          <source>Any value can be used on the right-side of &lt;code&gt;in&lt;/code&gt; as long as it implements the &lt;a href=&quot;ecto.queryable&quot;&gt;&lt;code&gt;Ecto.Queryable&lt;/code&gt;&lt;/a&gt; protocol. For now, we know the protocol is implemented for both atoms (like &lt;code&gt;User&lt;/code&gt;) and strings (like &amp;ldquo;users&amp;rdquo;).</source>
          <target state="translated">상관 값의 오른쪽에 이용 될 수 &lt;code&gt;in&lt;/code&gt; 한 그것이 구현으로 &lt;a href=&quot;ecto.queryable&quot;&gt; &lt;code&gt;Ecto.Queryable&lt;/code&gt; &lt;/a&gt; 프로토콜. 현재는 &lt;code&gt;User&lt;/code&gt; 와 같은 원자 와 문자열 ( &quot;users&quot;) 모두에 프로토콜이 구현되어 있음을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="b887cbd7add6f099fb444c6f2429533dcfaf8283" translate="yes" xml:space="preserve">
          <source>Appends the second multi to the first one</source>
          <target state="translated">두 번째 멀티를 첫 번째 멀티에 추가</target>
        </trans-unit>
        <trans-unit id="b9edef6586142e33c6c60f9e0c8390125159a8a7" translate="yes" xml:space="preserve">
          <source>Appends the second multi to the first one.</source>
          <target state="translated">두 번째 멀티를 첫 번째 멀티에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="334894d99b92fe73d7e7aa140d76f7f561fafb65" translate="yes" xml:space="preserve">
          <source>Applies optimistic locking to the changeset</source>
          <target state="translated">변경 세트에 낙관적 잠금 적용</target>
        </trans-unit>
        <trans-unit id="4361b172649775394dfd72f667908efc6452872f" translate="yes" xml:space="preserve">
          <source>Applies optimistic locking to the changeset.</source>
          <target state="translated">변경 세트에 낙관적 잠금을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="09556e7e4517fe9725dfbd42cbf5a36cc2e87d68" translate="yes" xml:space="preserve">
          <source>Applies the changeset action if the changes are valid or raises an error.</source>
          <target state="translated">Applies the changeset action if the changes are valid or raises an error.</target>
        </trans-unit>
        <trans-unit id="031274fb912bb51836441a5c22085b2001b18f45" translate="yes" xml:space="preserve">
          <source>Applies the changeset action only if the changes are valid</source>
          <target state="translated">변경 사항이 유효한 경우에만 변경 사항 조치를 적용합니다.</target>
        </trans-unit>
        <trans-unit id="b050c53ebe07c3d28361a411d8cbd7b0f72b7844" translate="yes" xml:space="preserve">
          <source>Applies the changeset action only if the changes are valid.</source>
          <target state="translated">변경 사항이 유효한 경우에만 변경 사항 조치를 적용합니다.</target>
        </trans-unit>
        <trans-unit id="2761b7d6b04d3d8fdfdb82fe84e797e17b5c434a" translate="yes" xml:space="preserve">
          <source>Applies the changeset changes to the changeset data</source>
          <target state="translated">변경 세트 변경 사항을 변경 세트 데이터에 적용</target>
        </trans-unit>
        <trans-unit id="58edcf307fce02ffe026656721ed37ef1c218b4f" translate="yes" xml:space="preserve">
          <source>Applies the changeset changes to the changeset data.</source>
          <target state="translated">변경 세트 변경 사항을 변경 세트 데이터에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="f1c024b9973dc724f6ab98ed916d0ccb4c1312df" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;code&gt;params&lt;/code&gt; as changes for the given &lt;code&gt;data&lt;/code&gt; according to the given set of &lt;code&gt;permitted&lt;/code&gt; keys. Returns a changeset</source>
          <target state="translated">주어진 &lt;code&gt;permitted&lt;/code&gt; 키 세트에 따라 주어진 &lt;code&gt;params&lt;/code&gt; 를 주어진 &lt;code&gt;data&lt;/code&gt; 에 대한 변경으로 적용합니다 . 변경 세트를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="f1c1d0d5bec454128305edccd7c51e64e4e6fa92" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;code&gt;params&lt;/code&gt; as changes for the given &lt;code&gt;data&lt;/code&gt; according to the given set of &lt;code&gt;permitted&lt;/code&gt; keys. Returns a changeset.</source>
          <target state="translated">주어진 &lt;code&gt;permitted&lt;/code&gt; 키 세트에 따라 주어진 &lt;code&gt;params&lt;/code&gt; 를 주어진 &lt;code&gt;data&lt;/code&gt; 에 대한 변경으로 적용합니다 . 변경 세트를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="86680b93bfe5f3d5e136ea751760d9739bc9e99c" translate="yes" xml:space="preserve">
          <source>Applies the given expression as a FILTER clause against an aggregate. This is currently only supported by Postgres</source>
          <target state="translated">주어진 표현식을 집계에 대해 FILTER 절로 적용합니다. 이것은 현재 Postgres에서만 지원됩니다</target>
        </trans-unit>
        <trans-unit id="0ea218082f0918b6c6d6196ff4808dba4c0ad11c" translate="yes" xml:space="preserve">
          <source>Applies the given expression as a FILTER clause against an aggregate. This is currently only supported by Postgres.</source>
          <target state="translated">주어진 표현식을 집계에 대해 FILTER 절로 적용합니다. 이것은 현재 Postgres에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="4400f576bc0c89e7f88b6372000ac8456cf2427f" translate="yes" xml:space="preserve">
          <source>Applying a limit to the association can be achieved with &lt;code&gt;inner_lateral_join&lt;/code&gt;:</source>
          <target state="translated">Applying a limit to the association can be achieved with &lt;code&gt;inner_lateral_join&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="12ba74c0de8af933a3a3f56bbea3b38757e06f95" translate="yes" xml:space="preserve">
          <source>Arithmetic operators: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;</source>
          <target state="translated">산술 연산자 : &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7aee5aacb98321221728d086e57edc8138d0ba9b" translate="yes" xml:space="preserve">
          <source>Arrays: &lt;code&gt;[1, 2, 3]&lt;/code&gt;, &lt;code&gt;~w(interpolate words)&lt;/code&gt;</source>
          <target state="translated">배열 : &lt;code&gt;[1, 2, 3]&lt;/code&gt; , &lt;code&gt;~w(interpolate words)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1a93145914c19a817e2f83d25abe14b25ed5208" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;code&gt;select&lt;/code&gt; allows developers to take fields without an explicit call to &lt;a href=&quot;#struct/2&quot;&gt;&lt;code&gt;struct/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">편의상 &lt;code&gt;select&lt;/code&gt; 를 사용하면 개발자가 &lt;a href=&quot;#struct/2&quot;&gt; &lt;code&gt;struct/2&lt;/code&gt; &lt;/a&gt; 를 명시 적으로 호출하지 않고도 필드를 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c498ddcfc7c00342094648686289bc00b3b0dc5c" translate="yes" xml:space="preserve">
          <source>As an example, imagine &lt;code&gt;:title&lt;/code&gt; is marked as a unique column in the database:</source>
          <target state="translated">예를 들어 상상 &lt;code&gt;:title&lt;/code&gt; 은 데이터베이스에서 고유 한 열로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="fddced341e63f42b257c605c248116bc9912aea3" translate="yes" xml:space="preserve">
          <source>As controllers are plugs, they implement both &lt;code&gt;init/1&lt;/code&gt; and &lt;code&gt;call/2&lt;/code&gt;, and it also provides a function named &lt;code&gt;action/2&lt;/code&gt; which is responsible for dispatching the appropriate action after the plug stack (and is also overridable).</source>
          <target state="translated">컨트롤러는 플러그이므로 &lt;code&gt;init/1&lt;/code&gt; 과 &lt;code&gt;call/2&lt;/code&gt; 를 모두 구현하며 , 플러그 스택 이후에 적절한 조치를 전달하는 역할을하는 &lt;code&gt;action/2&lt;/code&gt; 라는 함수를 제공합니다 (재정의 가능).</target>
        </trans-unit>
        <trans-unit id="2f2c06fb780697e369f25f7c87ee7118c0b20715" translate="yes" xml:space="preserve">
          <source>As in your application, the connection is also the main abstraction in testing. &lt;code&gt;build_conn()&lt;/code&gt; returns a new connection and functions in this module can be used to manipulate the connection before dispatching to the endpoint.</source>
          <target state="translated">응용 프로그램에서와 마찬가지로 연결도 테스트의 주요 추상화입니다. &lt;code&gt;build_conn()&lt;/code&gt; 은 새 연결을 반환 하며이 모듈의 함수를 사용하여 끝점으로 디스패치하기 전에 연결을 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b210531fbb3bd27c9f7aaf52afc8d05c910d1cc5" translate="yes" xml:space="preserve">
          <source>As in your router and controllers, the connection is the main abstraction in testing. &lt;code&gt;build_conn()&lt;/code&gt; returns a new connection and functions in this module can be used to manipulate the connection before dispatching to the endpoint.</source>
          <target state="translated">As in your router and controllers, the connection is the main abstraction in testing. &lt;code&gt;build_conn()&lt;/code&gt; returns a new connection and functions in this module can be used to manipulate the connection before dispatching to the endpoint.</target>
        </trans-unit>
        <trans-unit id="9152bca7977631eb6dcbaafbab88915d2ad4c4e4" translate="yes" xml:space="preserve">
          <source>As the name says, a constraint is required in the database for this function to work. Such constraint is often added as a reference to the child table:</source>
          <target state="translated">이름에서 알 수 있듯이이 기능이 작동하려면 데이터베이스에 제한이 필요합니다. 이러한 제약 조건은 종종 자식 테이블에 대한 참조로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="16ef7ec7284c632cb98296deb90a681d81b3ec19" translate="yes" xml:space="preserve">
          <source>As this configuration is Plug specific, Plug will need to be recompiled for the changes to take place: this will not happen automatically as dependencies are not automatically recompiled when their configuration changes. To recompile Plug:</source>
          <target state="translated">이 구성은 플러그 전용이므로 변경 사항을 적용하려면 플러그를 다시 컴파일해야합니다. 구성이 변경 될 때 종속성이 자동으로 다시 컴파일되지 않으므로 자동으로 발생하지 않습니다. 플러그를 다시 컴파일하려면</target>
        </trans-unit>
        <trans-unit id="a063bfa11fd130bfec49f4aa0ff0c57a16e8ade9" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;where&lt;/code&gt; and friends, it is not possible to pass dynamics outside of a root. For example, this won't work:</source>
          <target state="translated">As with &lt;code&gt;where&lt;/code&gt; and friends, it is not possible to pass dynamics outside of a root. For example, this won't work:</target>
        </trans-unit>
        <trans-unit id="868db82198436ae137106ae18a1c27c3628d32a7" translate="yes" xml:space="preserve">
          <source>As with routers, controllers also have their own plug pipeline. However, different from routers, controllers have a single pipeline:</source>
          <target state="translated">라우터와 마찬가지로 컨트롤러에도 자체 플러그 파이프 라인이 있습니다. 그러나 라우터와 달리 컨트롤러에는 단일 파이프 라인이 있습니다.</target>
        </trans-unit>
        <trans-unit id="475b9e09b92d98b6d96cb1e2b9b95148e9c2b0c7" translate="yes" xml:space="preserve">
          <source>Asks if the user wants to open a file based on ECTO_EDITOR</source>
          <target state="translated">사용자가 ECTO_EDITOR를 기반으로 파일을 열려고하는지 묻습니다.</target>
        </trans-unit>
        <trans-unit id="006f6f8b5cb840127d26d2d28ee9849be1f8d9fc" translate="yes" xml:space="preserve">
          <source>Asks if the user wants to open a file based on ECTO_EDITOR.</source>
          <target state="translated">사용자가 ECTO_EDITOR를 기반으로 파일을 열지 여부를 묻습니다.</target>
        </trans-unit>
        <trans-unit id="bb8d826fc68bb29920fcc1466f25e2e36d3d47b6" translate="yes" xml:space="preserve">
          <source>Asserts an error was wrapped and sent with the given status</source>
          <target state="translated">주어진 상태로 오류가 랩핑되어 전송되었음을 확인</target>
        </trans-unit>
        <trans-unit id="14dacb2eaf39d88a53c805aade746d59005bd40d" translate="yes" xml:space="preserve">
          <source>Asserts an error was wrapped and sent with the given status.</source>
          <target state="translated">주어진 상태로 오류가 랩핑되어 전송되었다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="f561847fbcc30ef099c2fdb4d7f9ecbb769368b9" translate="yes" xml:space="preserve">
          <source>Asserts the channel has broadcast a message within &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">채널이 &lt;code&gt;timeout&lt;/code&gt; 내에 메시지를 브로드 캐스트했다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="69c1aafea3e15d75f9b8e5e7f4b7ee180908fa25" translate="yes" xml:space="preserve">
          <source>Asserts the channel has broadcast a message within &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">채널이 &lt;code&gt;timeout&lt;/code&gt; 내에 메시지를 브로드 캐스트했는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="c1e0c079e28ea0e490465ee00c1b2e6b15935463" translate="yes" xml:space="preserve">
          <source>Asserts the channel has not broadcast a message within &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 내에 채널이 메시지를 브로드 캐스트하지 않았 음을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="c140d2f9a5c6e70b4bddb0b29be0b82e3d7034fa" translate="yes" xml:space="preserve">
          <source>Asserts the channel has not broadcast a message within &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">채널이 &lt;code&gt;timeout&lt;/code&gt; 내에 메시지를 브로드 캐스트하지 않았 음을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="d424205c41f2118eb9fd5a7f0610874508d900e3" translate="yes" xml:space="preserve">
          <source>Asserts the channel has not pushed a message to the client matching the given event and payload within &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">채널이 지정된 이벤트 및 페이로드가 &lt;code&gt;timeout&lt;/code&gt; 내에 일치하는 메시지를 클라이언트에 푸시하지 않았 음을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="dd195750fce0de0311eeab0dd8758295106faf6a" translate="yes" xml:space="preserve">
          <source>Asserts the channel has not pushed a message to the client matching the given event and payload within &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">채널이 지정된 이벤트 및 페이로드가 &lt;code&gt;timeout&lt;/code&gt; 내에 일치하는 메시지를 클라이언트에 푸시하지 않았 음을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="f37dd31b07d6e30495dbce12a320ab6f115b7072" translate="yes" xml:space="preserve">
          <source>Asserts the channel has not replied with a matching payload within &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 내에 채널이 일치하는 페이로드로 응답하지 않았 음을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f543c3267625ded4bf34a8f8595eb6f80560c8b7" translate="yes" xml:space="preserve">
          <source>Asserts the channel has not replied with a matching payload within &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 내에 채널이 일치하는 페이로드로 응답하지 않았 음을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="fb8e710870c1e8f2ae11881ad6a7b9f893cf92f6" translate="yes" xml:space="preserve">
          <source>Asserts the channel has pushed a message back to the client with the given event and payload within &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">지정된 이벤트 및 페이로드가 &lt;code&gt;timeout&lt;/code&gt; 내에 채널에서 클라이언트로 메시지를 푸시했다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="6fb7f0ad50740a6b05d2126fa477ce96ef0a8211" translate="yes" xml:space="preserve">
          <source>Asserts the channel has pushed a message back to the client with the given event and payload within &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">지정된 이벤트 및 페이로드가 &lt;code&gt;timeout&lt;/code&gt; 내에 채널에서 클라이언트로 메시지를 푸시했는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="c887a57a1301c3376a8b187b83da77d3b9304d5f" translate="yes" xml:space="preserve">
          <source>Asserts the channel has replied to the given message within &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 내에 채널이 지정된 메시지에 응답했는지 확인</target>
        </trans-unit>
        <trans-unit id="6ddf47c3c727b5b98212842dc153fb9ef73dfb67" translate="yes" xml:space="preserve">
          <source>Asserts the channel has replied to the given message within &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 내에 채널이 지정된 메시지에 응답했는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="ea30be74b1b6dfeafbc74b5278e93a1ef8635f78" translate="yes" xml:space="preserve">
          <source>Asserts the given status code and returns the response body if one was set or sent</source>
          <target state="translated">주어진 상태 코드를 확인하고 설정 또는 전송 된 경우 응답 본문을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="40aec7b844428bccf332b76d4a7cea4d73c9f80b" translate="yes" xml:space="preserve">
          <source>Asserts the given status code and returns the response body if one was set or sent.</source>
          <target state="translated">주어진 상태 코드를 확인하고 설정 또는 전송 된 경우 응답 본문을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="92eed7d512a2ff5c15049fbde292f3357c386ba4" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have a json response and returns the decoded JSON response if one was set or sent.</source>
          <target state="translated">Asserts the given status code, that we have a json response and returns the decoded JSON response if one was set or sent.</target>
        </trans-unit>
        <trans-unit id="519c68c331196b4f0042ee79374fcbf0eb6379f0" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have a text response and returns the response body if one was set or sent.</source>
          <target state="translated">Asserts the given status code, that we have a text response and returns the response body if one was set or sent.</target>
        </trans-unit>
        <trans-unit id="4361d343642668ab91330760dcb1e9daf427439b" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have an html response and returns the response body if one was set or sent</source>
          <target state="translated">주어진 상태 코드를 확인합니다. HTML 응답이 있고 응답 본문이 설정되거나 전송 된 경우 응답 본문을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="01ce9d8e19df4acc7484e73368b791392c2f5b64" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have an html response and returns the response body if one was set or sent.</source>
          <target state="translated">주어진 상태 코드를 확인하여 HTML 응답이 있고 응답 본문이 설정되거나 전송 된 경우 응답 본문을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="94ee684deb18054648b499b661eaeadc364ac50c" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have an json response and returns the decoded JSON response if one was set or sent</source>
          <target state="translated">주어진 상태 코드를 확인합니다. json 응답이 있고 디코딩 된 JSON 응답이 설정되거나 전송 된 경우이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ad672702a882d944ba4089007ddd2cb6a47abb2f" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have an json response and returns the decoded JSON response if one was set or sent.</source>
          <target state="translated">주어진 상태 코드를 확인하여 json 응답이 있고 디코딩 된 JSON 응답이 설정되거나 전송 된 경우이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0b22bfbfa6302d6cc628263305e33e5e5b9d808c" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have an text response and returns the response body if one was set or sent</source>
          <target state="translated">주어진 상태 코드를 확인하여 텍스트 응답이 있고 응답 본문이 설정되거나 전송 된 경우 응답 본문을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d7d64fc3c8c80b2f0927ca8acf2d9a14e5e45982" translate="yes" xml:space="preserve">
          <source>Asserts the given status code, that we have an text response and returns the response body if one was set or sent.</source>
          <target state="translated">주어진 상태 코드를 확인하여 텍스트 응답이 있고 응답 본문이 설정되거나 전송 된 경우 응답 본문을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9f2a0cc5f167ef3113974a9fe34af5506e805041" translate="yes" xml:space="preserve">
          <source>Assigns</source>
          <target state="translated">Assigns</target>
        </trans-unit>
        <trans-unit id="574364eee69f68c55eb9dcc71dd468285d889db6" translate="yes" xml:space="preserve">
          <source>Assigns a new &lt;strong&gt;private&lt;/strong&gt; key and value in the connection</source>
          <target state="translated">연결에 새로운 &lt;strong&gt;개인&lt;/strong&gt; 키와 값을 할당 합니다</target>
        </trans-unit>
        <trans-unit id="bd83d5499e834c53bd79fb4fa56ff025df78093c" translate="yes" xml:space="preserve">
          <source>Assigns a new &lt;strong&gt;private&lt;/strong&gt; key and value in the connection.</source>
          <target state="translated">연결에 새로운 &lt;strong&gt;개인&lt;/strong&gt; 키와 값을 할당 합니다.</target>
        </trans-unit>
        <trans-unit id="ee9efccff63c64323b5a4f98fca8d2c724142663" translate="yes" xml:space="preserve">
          <source>Assigns a value to a key in the connection</source>
          <target state="translated">연결에서 키에 값을 할당합니다</target>
        </trans-unit>
        <trans-unit id="da5add16ce8a8cf627204ed4d5648a3d1ca3a351" translate="yes" xml:space="preserve">
          <source>Assigns a value to a key in the connection.</source>
          <target state="translated">연결에서 키에 값을 할당합니다.</target>
        </trans-unit>
        <trans-unit id="9c6b589d013aaba3d63ab9b088addc693226eaa6" translate="yes" xml:space="preserve">
          <source>Assigns are meant to be user data that will be available in templates. However, there are keys under assigns that are specially handled by Phoenix, they are:</source>
          <target state="translated">할당은 템플릿에서 사용할 수있는 사용자 데이터입니다. 그러나 피닉스가 특별히 처리하는 할당 키 아래에는 다음과 같은 키가 있습니다.</target>
        </trans-unit>
        <trans-unit id="147d0c86a092ea030ef3bda841fe74477ec9e5a7" translate="yes" xml:space="preserve">
          <source>Assigns multiple &lt;strong&gt;private&lt;/strong&gt; keys and values in the connection</source>
          <target state="translated">연결에 여러 &lt;strong&gt;개인&lt;/strong&gt; 키와 값을 할당 합니다</target>
        </trans-unit>
        <trans-unit id="757ea09ed7848c39bfeb25a79e148f85064a7e1a" translate="yes" xml:space="preserve">
          <source>Assigns multiple &lt;strong&gt;private&lt;/strong&gt; keys and values in the connection.</source>
          <target state="translated">연결에 여러 &lt;strong&gt;개인&lt;/strong&gt; 키와 값을 할당 합니다.</target>
        </trans-unit>
        <trans-unit id="a6dddc082668f89921e5bc9a19c53fadbba95e74" translate="yes" xml:space="preserve">
          <source>Assigns multiple values to keys in the connection</source>
          <target state="translated">연결에서 키에 여러 값을 할당</target>
        </trans-unit>
        <trans-unit id="6cc9a184a076e8b32ad317761089937067633e4a" translate="yes" xml:space="preserve">
          <source>Assigns multiple values to keys in the connection.</source>
          <target state="translated">연결의 키에 여러 값을 할당합니다.</target>
        </trans-unit>
        <trans-unit id="134d6b41e63f8d58f043111b94e89dcdbcc5edb8" translate="yes" xml:space="preserve">
          <source>Associations</source>
          <target state="translated">Associations</target>
        </trans-unit>
        <trans-unit id="b802e5b1cff34526d856a0a100a2dbbb152b074d" translate="yes" xml:space="preserve">
          <source>Associations, embeds and on replace</source>
          <target state="translated">연관, 임베드 및 교체</target>
        </trans-unit>
        <trans-unit id="56f8a2dd87419ea091ce075611de251ffc698b80" translate="yes" xml:space="preserve">
          <source>Assuming the above code, a request to &lt;code&gt;/users/sign_in&lt;/code&gt; will be forwarded to the &lt;code&gt;UserRouter&lt;/code&gt; plug, which will receive what it will see as a request to &lt;code&gt;/sign_in&lt;/code&gt;.</source>
          <target state="translated">위의 코드를 가정하면 &lt;code&gt;/users/sign_in&lt;/code&gt; 에 대한 요청 은 &lt;code&gt;UserRouter&lt;/code&gt; 플러그 로 전달되며 ,이 값은 &lt;code&gt;/sign_in&lt;/code&gt; 에 대한 요청으로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="c804cad0774fdc88933e3e582b28b80f3857c48a" translate="yes" xml:space="preserve">
          <source>Assuming we have a &lt;code&gt;Post&lt;/code&gt; schema (stored in the &lt;code&gt;posts&lt;/code&gt; table), the first step is to add a version column to the &lt;code&gt;posts&lt;/code&gt; table:</source>
          <target state="translated">우리는이 가정 &lt;code&gt;Post&lt;/code&gt; 합니다 (저장 스키마 &lt;code&gt;posts&lt;/code&gt; 테이블), 첫 번째 단계는에 버전 열을 추가하는 것입니다 &lt;code&gt;posts&lt;/code&gt; 테이블 :</target>
        </trans-unit>
        <trans-unit id="ed0b9aa74251acf133476dd7a1fb25e39fd253e6" translate="yes" xml:space="preserve">
          <source>At the end sets the connection state to &lt;code&gt;:sent&lt;/code&gt;.</source>
          <target state="translated">마지막에 연결 상태를 &lt;code&gt;:sent&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="c5c2f85717edc27497c79c08aabb877d7e0f9cec" translate="yes" xml:space="preserve">
          <source>At the moment, using a schema with source fields in CTE may emit invalid queries. If you are running into such scenarios, your best option is to use a fragment as your CTE.</source>
          <target state="translated">At the moment, using a schema with source fields in CTE may emit invalid queries. If you are running into such scenarios, your best option is to use a fragment as your CTE.</target>
        </trans-unit>
        <trans-unit id="b4927c7da0be48fa0923cc88982ae3b251f69456" translate="yes" xml:space="preserve">
          <source>Atoms (other than booleans and &lt;code&gt;nil&lt;/code&gt;): &lt;code&gt;:foo&lt;/code&gt;, &lt;code&gt;:bar&lt;/code&gt;</source>
          <target state="translated">Atoms (other than booleans and &lt;code&gt;nil&lt;/code&gt; ): &lt;code&gt;:foo&lt;/code&gt; , &lt;code&gt;:bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4272dc1f3f36ae0db4df38f283b5fe8748a6ff3" translate="yes" xml:space="preserve">
          <source>Attempts to parse the connection&amp;rsquo;s request body given the content-type type, subtype, and its parameters</source>
          <target state="translated">컨텐츠 유형, 하위 유형 및 해당 매개 변수가 제공된 경우 연결 요청 본문을 구문 분석하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="5adb472163a6582271e0a7f045107d9d435aeb4d" translate="yes" xml:space="preserve">
          <source>Attempts to parse the connection&amp;rsquo;s request body given the content-type type, subtype, and its parameters.</source>
          <target state="translated">컨텐츠 유형, 하위 유형 및 해당 매개 변수가 제공된 경우 연결 요청 본문을 구문 분석하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="2d090490f8273f292dfbf2b46b5622e07c157083" translate="yes" xml:space="preserve">
          <source>Attempts to parse the connection's request body given the content-type type, subtype, and its parameters.</source>
          <target state="translated">Attempts to parse the connection's request body given the content-type type, subtype, and its parameters.</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="5e25ce007aa95ea2ea8b158aee9c630a32ea5616" translate="yes" xml:space="preserve">
          <source>Authorization</source>
          <target state="translated">Authorization</target>
        </trans-unit>
        <trans-unit id="7dd6dabb0c5ff27d14867c7a0d5f7ad8c0d3dd31" translate="yes" xml:space="preserve">
          <source>Autogenerate</source>
          <target state="translated">Autogenerate</target>
        </trans-unit>
        <trans-unit id="03dcefaf5fdafcdcee4b084ba846e764fc47771f" translate="yes" xml:space="preserve">
          <source>Available for transports that generate a connection.</source>
          <target state="translated">연결을 생성하는 전송에 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="8faf407e50cfbddaaa8c6b940974389bbb77f58e" translate="yes" xml:space="preserve">
          <source>Awaits the completion of an async assign</source>
          <target state="translated">비동기 할당 완료를 기다립니다</target>
        </trans-unit>
        <trans-unit id="2168f4814ee9c5fe1b06e3b972eb6f903c518991" translate="yes" xml:space="preserve">
          <source>Awaits the completion of an async assign.</source>
          <target state="translated">비동기 할당 완료를 기다립니다.</target>
        </trans-unit>
        <trans-unit id="b1ff57d696aa3ec09bd76c88944e1a7097ee37a3" translate="yes" xml:space="preserve">
          <source>Bad:</source>
          <target state="translated">Bad:</target>
        </trans-unit>
        <trans-unit id="6f69f815f19f72bb41c1c4436ba66d01cf0d77fa" translate="yes" xml:space="preserve">
          <source>Be aware that a &lt;code&gt;:multiple&lt;/code&gt; option will not generate a correctly functioning multiple select element. Use &lt;a href=&quot;#multiple_select/4&quot;&gt;&lt;code&gt;multiple_select/4&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&amp;bull; 그래도주의 &lt;code&gt;:multiple&lt;/code&gt; 옵션은 제대로 작동 여러 선택 요소를 생성하지 않습니다. 대신 &lt;a href=&quot;#multiple_select/4&quot;&gt; &lt;code&gt;multiple_select/4&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b7cf944c5f95100a7935a4fa47e890840645b9d" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;:join_through&lt;/code&gt; contains a schema, in such cases, autogenerated values and primary keys will be automatically handled by Ecto.</source>
          <target state="translated">&lt;code&gt;:join_through&lt;/code&gt; 에는 스키마가 포함 되므로 이러한 경우 자동 생성 된 값과 기본 키는 Ecto에서 자동으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="2842d72449f72f76dd6436b34b221777bfc86a74" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Phoenix.LiveView&lt;/code&gt; is unable to compute diffs inside anonymous functions, Phoenix.HTML provides &lt;a href=&quot;#form_for/3&quot;&gt;&lt;code&gt;form_for/3&lt;/code&gt;&lt;/a&gt; that works without passing an anonymous function. Inside live views, instead of</source>
          <target state="translated">Because &lt;code&gt;Phoenix.LiveView&lt;/code&gt; is unable to compute diffs inside anonymous functions, Phoenix.HTML provides &lt;a href=&quot;#form_for/3&quot;&gt; &lt;code&gt;form_for/3&lt;/code&gt; &lt;/a&gt; that works without passing an anonymous function. Inside live views, instead of</target>
        </trans-unit>
        <trans-unit id="9262b037e2212c6d03d3d7d5fb577f82e1400995" translate="yes" xml:space="preserve">
          <source>Because an unchecked checkbox is not sent to the server, Phoenix automatically generates a hidden field with the unchecked_value &lt;em&gt;before&lt;/em&gt; the checkbox field to ensure the &lt;code&gt;unchecked_value&lt;/code&gt; is sent when the checkbox is not marked.</source>
          <target state="translated">선택하지 않은 확인란이 서버로 전송되지 않으므로 Phoenix 는 확인란이 표시 &lt;code&gt;unchecked_value&lt;/code&gt; 경우 unchecked_value 가 전송 되도록 확인란 필드 &lt;em&gt;앞에&lt;/em&gt; unchecked_value가있는 숨겨진 필드를 자동으로 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="3e6dd93facd60dadc7922885b15c8f608eb6e973" translate="yes" xml:space="preserve">
          <source>Because an unchecked checkbox is not sent to the server, Phoenix automatically generates a hidden field with the unchecked_value &lt;em&gt;before&lt;/em&gt; the checkbox field to ensure the &lt;code&gt;unchecked_value&lt;/code&gt; is sent when the checkbox is not marked. Set &lt;code&gt;hidden_input&lt;/code&gt; to false If you don't want to send values from unchecked checkbox to the server.</source>
          <target state="translated">Because an unchecked checkbox is not sent to the server, Phoenix automatically generates a hidden field with the unchecked_value &lt;em&gt;before&lt;/em&gt; the checkbox field to ensure the &lt;code&gt;unchecked_value&lt;/code&gt; is sent when the checkbox is not marked. Set &lt;code&gt;hidden_input&lt;/code&gt; to false If you don't want to send values from unchecked checkbox to the server.</target>
        </trans-unit>
        <trans-unit id="bdb9a6e7bde3ab5a7bc1495dec9bb0e16986001a" translate="yes" xml:space="preserve">
          <source>Because channels are spawned from the transport process, transports must trap exits and correctly handle the &lt;code&gt;{:EXIT, _, _}&lt;/code&gt; messages arriving from channels, relaying the proper response to the client.</source>
          <target state="translated">전송 프로세스에서 채널이 생성되므로 전송은 엑시트를 트랩하고 채널에서 도착한 &lt;code&gt;{:EXIT, _, _}&lt;/code&gt; 메시지를 올바르게 처리 하여 클라이언트에 올바른 응답을 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="075cd0e73f7ec163ee1bd17ac66ecb22aea6420b" translate="yes" xml:space="preserve">
          <source>Because header keys are case-insensitive in both HTTP/1.1 and HTTP/2, it is recommended for header keys to be in lowercase, to avoid sending duplicate keys in a request. Additionally, requests with mixed-case headers served over HTTP/2 are not considered valid by common clients, resulting in dropped requests. As a convenience, when using the &lt;code&gt;Plug.Adapters.Conn.Test&lt;/code&gt; adapter, any headers that aren't lowercase will raise a &lt;a href=&quot;plug.conn.invalidheadererror&quot;&gt;&lt;code&gt;Plug.Conn.InvalidHeaderError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Because header keys are case-insensitive in both HTTP/1.1 and HTTP/2, it is recommended for header keys to be in lowercase, to avoid sending duplicate keys in a request. Additionally, requests with mixed-case headers served over HTTP/2 are not considered valid by common clients, resulting in dropped requests. As a convenience, when using the &lt;code&gt;Plug.Adapters.Conn.Test&lt;/code&gt; adapter, any headers that aren't lowercase will raise a &lt;a href=&quot;plug.conn.invalidheadererror&quot;&gt; &lt;code&gt;Plug.Conn.InvalidHeaderError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0ffd1482ad9b039cd9a1b7189da93b88ba55a74b" translate="yes" xml:space="preserve">
          <source>Because header keys are case-insensitive in both HTTP/1.1 and HTTP/2, it is recommended for header keys to be in lowercase, to avoid sending duplicate keys in a request. Additionally, responses with mixed-case headers served over HTTP/2 are not considered valid by common clients, resulting in dropped responses. As a convenience, when using the &lt;code&gt;Plug.Adapters.Conn.Test&lt;/code&gt; adapter, any headers that aren't lowercase will raise a &lt;a href=&quot;plug.conn.invalidheadererror&quot;&gt;&lt;code&gt;Plug.Conn.InvalidHeaderError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Because header keys are case-insensitive in both HTTP/1.1 and HTTP/2, it is recommended for header keys to be in lowercase, to avoid sending duplicate keys in a request. Additionally, responses with mixed-case headers served over HTTP/2 are not considered valid by common clients, resulting in dropped responses. As a convenience, when using the &lt;code&gt;Plug.Adapters.Conn.Test&lt;/code&gt; adapter, any headers that aren't lowercase will raise a &lt;a href=&quot;plug.conn.invalidheadererror&quot;&gt; &lt;code&gt;Plug.Conn.InvalidHeaderError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="efbb223e1e0205999506019f53282716fca5c16e" translate="yes" xml:space="preserve">
          <source>Because many databases do not support direct encoding and decoding of embeds, it is often emulated by Ecto by using specific encoding and decoding rules.</source>
          <target state="translated">많은 데이터베이스가 임베드의 직접 인코딩 및 디코딩을 지원하지 않기 때문에 Ecto는 종종 특정 인코딩 및 디코딩 규칙을 사용하여 에뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="ff3b261bdf6330bac84251a0b0895a163e937f12" translate="yes" xml:space="preserve">
          <source>Because of the inability to know if the struct is up to date or not, inserting a struct with associations and using the &lt;code&gt;:on_conflict&lt;/code&gt; option at the same time is not recommended, as Ecto will be unable to actually track the proper status of the association.</source>
          <target state="translated">Because of the inability to know if the struct is up to date or not, inserting a struct with associations and using the &lt;code&gt;:on_conflict&lt;/code&gt; option at the same time is not recommended, as Ecto will be unable to actually track the proper status of the association.</target>
        </trans-unit>
        <trans-unit id="fe0d51764665fe5a0cca90e95e7b401430abc9ea" translate="yes" xml:space="preserve">
          <source>Because of the inability to know if the struct is up to date or not, using associations with the &lt;code&gt;:on_conflict&lt;/code&gt; option is not recommended. For instance, Ecto may even trigger constraint violations when associations are used with &lt;code&gt;on_conflict: :nothing&lt;/code&gt;, as no ID will be available in the case the record already exists, and it is not possible for Ecto to detect such cases reliably.</source>
          <target state="translated">struct가 최신인지 여부를 알 수 없으므로 &lt;code&gt;:on_conflict&lt;/code&gt; 옵션 과의 연관을 사용 하지 않는 것이 좋습니다. 예를 들어, 레코드가 이미 존재하는 경우 ID를 사용할 수 없으므로 Ecto가 그러한 경우를 안정적으로 감지 할 수 없으므로 &lt;code&gt;on_conflict: :nothing&lt;/code&gt; 과의 연관을 사용할 때 Ecto는 제약 조건 위반을 트리거 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8aff02a4110b82074d8c12773ef5ce6582b3ab82" translate="yes" xml:space="preserve">
          <source>Because such indexes have usually more complex names, we need to explicitly tell the changeset which constraint name to use (here we&amp;rsquo;re using the naming convention that &lt;code&gt;unique_index&lt;/code&gt; uses):</source>
          <target state="translated">이러한 인덱스는 일반적으로 더 복잡한 이름을 가지므로 변경 세트에 사용할 제한 조건 이름을 명시 적으로 알려야합니다 (여기서 &lt;code&gt;unique_index&lt;/code&gt; 에서 사용 하는 이름 지정 규칙을 사용함).</target>
        </trans-unit>
        <trans-unit id="224c09d9b7dd7d9d454778c8be5dd88e43a0c6ad" translate="yes" xml:space="preserve">
          <source>Because the constraint logic is in the database, we can leverage all the database functionality when defining them. For example, let&amp;rsquo;s suppose the e-mails are scoped by company id. We would write in a migration:</source>
          <target state="translated">제약 조건 논리는 데이터베이스에 있기 때문에 정의 할 때 모든 데이터베이스 기능을 활용할 수 있습니다. 예를 들어, 전자 우편이 회사 ID별로 범위가 지정되었다고 가정하십시오. 우리는 마이그레이션에서 쓸 것입니다 :</target>
        </trans-unit>
        <trans-unit id="29fa3508631dd99aed1ca4933a5f561d0c8393e8" translate="yes" xml:space="preserve">
          <source>Because the constraint logic is in the database, we can leverage all the database functionality when defining them. For example, let's suppose the e-mails are scoped by company id:</source>
          <target state="translated">Because the constraint logic is in the database, we can leverage all the database functionality when defining them. For example, let's suppose the e-mails are scoped by company id:</target>
        </trans-unit>
        <trans-unit id="b6739a5ab828592734049508a18dd56e17882475" translate="yes" xml:space="preserve">
          <source>Because the request body can be of any size, reading the body will only work once, as Plug will not cache the result of these operations. If you need to access the body multiple times, it is your responsibility to store it. Finally keep in mind some plugs like &lt;a href=&quot;plug.parsers&quot;&gt;&lt;code&gt;Plug.Parsers&lt;/code&gt;&lt;/a&gt; may read the body, so the body may be unavailable after being accessed by such plugs.</source>
          <target state="translated">요청 본문은 모든 크기가 될 수 있기 때문에 플러그는 이러한 작업의 결과를 캐시하지 않으므로 본문을 한 번만 읽을 수 있습니다. 신체에 여러 번 접근해야하는 경우, 보관하는 것은 귀하의 책임입니다. 마지막으로 &lt;a href=&quot;plug.parsers&quot;&gt; &lt;code&gt;Plug.Parsers&lt;/code&gt; &lt;/a&gt; 와 같은 일부 플러그 는 본문을 읽을 수 있으므로 이러한 플러그로 액세스 한 후 본문을 사용하지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8d5b0de0d771e3732a5b80433909083879a3d87" translate="yes" xml:space="preserve">
          <source>Because the whole communication is asynchronous, the following test would be very brittle:</source>
          <target state="translated">전체 통신이 비동기 적이기 때문에 다음 테스트는 매우 취약합니다.</target>
        </trans-unit>
        <trans-unit id="15004b08989be5acc9e143193d78d8c2df3ea58b" translate="yes" xml:space="preserve">
          <source>Because we have defined the template root to be &quot;lib/your_app_web/templates&quot;, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.View&lt;/code&gt;&lt;/a&gt; will automatically load all templates at &quot;your_app_web/templates/user&quot; and include them in the &lt;code&gt;YourApp.UserView&lt;/code&gt;. For example, imagine we have the template:</source>
          <target state="translated">Because we have defined the template root to be &quot;lib/your_app_web/templates&quot;, &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.View&lt;/code&gt; &lt;/a&gt; will automatically load all templates at &quot;your_app_web/templates/user&quot; and include them in the &lt;code&gt;YourApp.UserView&lt;/code&gt; . For example, imagine we have the template:</target>
        </trans-unit>
        <trans-unit id="4e845000c50c1ebb2862affdc57cdca9446402dc" translate="yes" xml:space="preserve">
          <source>Because we have defined the template root to be &amp;ldquo;lib/web/templates&amp;rdquo;, &lt;a href=&quot;phoenix.view#content&quot;&gt;&lt;code&gt;Phoenix.View&lt;/code&gt;&lt;/a&gt; will automatically load all templates at &amp;ldquo;web/templates/user&amp;rdquo; and include them in the &lt;code&gt;YourApp.UserView&lt;/code&gt;. For example, imagine we have the template:</source>
          <target state="translated">우리가 &quot;lib 디렉토리 / 웹 / 템플릿&quot;으로 템플릿 루트를 정의하기 때문에, &lt;a href=&quot;phoenix.view#content&quot;&gt; &lt;code&gt;Phoenix.View&lt;/code&gt; 는&lt;/a&gt; 자동으로 &quot;웹 / 템플릿 / 사용자&quot;모든 템플릿을로드하고이에 포함됩니다 &lt;code&gt;YourApp.UserView&lt;/code&gt; . 예를 들어 템플릿이 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="39f7cc114f2fc6cf106968527a393ef7ef7dc2da" translate="yes" xml:space="preserve">
          <source>Because we used &lt;code&gt;on_conflict: :nothing&lt;/code&gt;, instead of getting an error, we got &lt;code&gt;{:ok, struct}&lt;/code&gt;. However the returned struct does not reflect the data in the database. One possible mechanism to detect if an insert or nothing happened in case of &lt;code&gt;on_conflict: :nothing&lt;/code&gt; is by checking the &lt;code&gt;id&lt;/code&gt; field. &lt;code&gt;id&lt;/code&gt; will be nil if the field is autogenerated by the database and no insert happened.</source>
          <target state="translated">&lt;code&gt;on_conflict: :nothing&lt;/code&gt; 을 사용했기 때문에 오류 대신 &lt;code&gt;{:ok, struct}&lt;/code&gt; . 그러나 반환 된 구조체는 데이터베이스의 데이터를 반영하지 않습니다. &lt;code&gt;on_conflict: :nothing&lt;/code&gt; 경우 삽입 또는 아무것도 발생하지 않았는지 감지하는 한 가지 가능한 메커니즘 은 &lt;code&gt;id&lt;/code&gt; 필드 를 확인하는 것 입니다. 필드가 데이터베이스에 의해 자동 생성되고 삽입이 발생하지 않으면 &lt;code&gt;id&lt;/code&gt; 는 nil입니다.</target>
        </trans-unit>
        <trans-unit id="3cd2824c40cb6a858f71c571b7a9552c3251a948" translate="yes" xml:space="preserve">
          <source>Before asserting anything was broadcast, we must first subscribe to the topic of the channel in the test process:</source>
          <target state="translated">방송 된 것을 주장하기 전에 먼저 테스트 과정에서 채널의 주제를 구독해야합니다.</target>
        </trans-unit>
        <trans-unit id="4041ca44c3c741eba05c3336903154a869e43ff0" translate="yes" xml:space="preserve">
          <source>Behaves exactly the same as &lt;code&gt;where&lt;/code&gt; except it combines with any previous expression by using an &lt;code&gt;OR&lt;/code&gt;. All expressions have to evaluate to a boolean value.</source>
          <target state="translated">&lt;code&gt;OR&lt;/code&gt; 을 사용하여 이전 표현식과 결합 &lt;code&gt;where&lt;/code&gt; 것을 제외하고는 위치 와 정확히 동일하게 작동합니다 . 모든 표현식은 부울 값으로 평가되어야합니다.</target>
        </trans-unit>
        <trans-unit id="69bb93f8733104d33c3d36e7e5b282df9df17548" translate="yes" xml:space="preserve">
          <source>Behind the scenes, it uses &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/1&quot;&gt;&lt;code&gt;Task.async/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">뒤에서 &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/1&quot;&gt; &lt;code&gt;Task.async/1&lt;/code&gt; 을 사용&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="d35a0bd824cc8e4b8d193117df8ed871a26f82ac" translate="yes" xml:space="preserve">
          <source>Behind the scenes, it uses &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#await/2&quot;&gt;&lt;code&gt;Task.await/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">뒤에서 &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#await/2&quot;&gt; &lt;code&gt;Task.await/2&lt;/code&gt; 를 사용&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="e403e0ae9721d5783b70c50d5880748cf9f3c38e" translate="yes" xml:space="preserve">
          <source>Below we list all events developers should expect from Ecto. All examples below consider a repository named &lt;code&gt;MyApp.Repo&lt;/code&gt;:</source>
          <target state="translated">Below we list all events developers should expect from Ecto. All examples below consider a repository named &lt;code&gt;MyApp.Repo&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c6ad3316378f3ecae2aa5789e6ae98417f0d92ae" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;:id&lt;/code&gt; and &lt;code&gt;:binary_id&lt;/code&gt;, which are often used by primary and foreign keys, Ecto provides a huge variety of types to be used by any column.</source>
          <target state="translated">기본 키와 외래 키에서 자주 사용되는 &lt;code&gt;:id&lt;/code&gt; 및 &lt;code&gt;:binary_id&lt;/code&gt; 외에도 Ecto는 모든 열에서 사용할 수있는 다양한 유형을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b5608ffc54f8eb63f27799f6ae50c2cfc29178f8" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;:id&lt;/code&gt; and &lt;code&gt;:binary_id&lt;/code&gt;, which are often used by primary and foreign keys, Ecto provides a huge variety of types to be used by any field.</source>
          <target state="translated">Besides &lt;code&gt;:id&lt;/code&gt; and &lt;code&gt;:binary_id&lt;/code&gt; , which are often used by primary and foreign keys, Ecto provides a huge variety of types to be used by any field.</target>
        </trans-unit>
        <trans-unit id="0e1489eea1b6f3bbd4b7bfb5da234da05e74fa76" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;Repo.all/1&lt;/code&gt; which returns all entries, repositories also provide &lt;code&gt;Repo.one/1&lt;/code&gt; which returns one entry or nil, &lt;code&gt;Repo.one!/1&lt;/code&gt; which returns one entry or raises, &lt;code&gt;Repo.get/2&lt;/code&gt; which fetches entries for a particular ID and more.</source>
          <target state="translated">게다가 &lt;code&gt;Repo.all/1&lt;/code&gt; 모든 항목을 반환 저장소도 제공 &lt;code&gt;Repo.one/1&lt;/code&gt; 하나 개의 항목 또는 전무를 반환 &lt;code&gt;Repo.one!/1&lt;/code&gt; 하나 개의 항목이나 레이즈를 반환 &lt;code&gt;Repo.get/2&lt;/code&gt; 특정에 대한 항목을 가져옵니다 아이디 등</target>
        </trans-unit>
        <trans-unit id="4db60d335ebdbdc7119cfd198fa9382586d6f219" translate="yes" xml:space="preserve">
          <source>Besides being a Plug, this module also provides conveniences for configuring SSL. See &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;configure/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">플러그 외에도이 모듈은 SSL 구성을위한 편의성을 제공합니다. &lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;configure/1&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="89f5e6bc915be700f158a6ce56ae0826017ba369" translate="yes" xml:space="preserve">
          <source>Besides functions transaction can be used with an Ecto.Multi struct. Transaction will be started, all operations applied and in case of success committed returning &lt;code&gt;{:ok, changes}&lt;/code&gt;. In case of any errors the transaction will be rolled back and &lt;code&gt;{:error, failed_operation, failed_value, changes_so_far}&lt;/code&gt; will be returned.</source>
          <target state="translated">함수 외에도 Ecto.Multi 구조체와 함께 트랜잭션을 사용할 수 있습니다. 트랜잭션이 시작되고 모든 작업이 적용되며 성공한 경우 &lt;code&gt;{:ok, changes}&lt;/code&gt; 반환이 커밋 됩니다. 오류가 발생하면 트랜잭션이 롤백되고 &lt;code&gt;{:error, failed_operation, failed_value, changes_so_far}&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="318f727872b2ac407eed6b2cc5b760e863528d41" translate="yes" xml:space="preserve">
          <source>Besides functions, transactions can be used with an &lt;a href=&quot;ecto.multi&quot;&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt; struct. A transaction will be started, all operations applied and in case of success committed returning &lt;code&gt;{:ok, changes}&lt;/code&gt;. In case of any errors the transaction will be rolled back and &lt;code&gt;{:error, failed_operation, failed_value, changes_so_far}&lt;/code&gt; will be returned.</source>
          <target state="translated">Besides functions, transactions can be used with an &lt;a href=&quot;ecto.multi&quot;&gt; &lt;code&gt;Ecto.Multi&lt;/code&gt; &lt;/a&gt; struct. A transaction will be started, all operations applied and in case of success committed returning &lt;code&gt;{:ok, changes}&lt;/code&gt; . In case of any errors the transaction will be rolled back and &lt;code&gt;{:error, failed_operation, failed_value, changes_so_far}&lt;/code&gt; will be returned.</target>
        </trans-unit>
        <trans-unit id="6eb623724b9e9c7ad93a2b376a13191ce506c435" translate="yes" xml:space="preserve">
          <source>Besides providing primitive types, Ecto allows custom types to be implemented by developers, allowing Ecto behaviour to be extended.</source>
          <target state="translated">기본 유형을 제공하는 것 외에도 Ecto를 사용하면 개발자가 사용자 정의 유형을 구현하여 Ecto 동작을 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76cc7d58981a3e9ddfb52f7f3e74c5fabe82b2f6" translate="yes" xml:space="preserve">
          <source>Besides template engines, Phoenix has the concept of format encoders. Format encoders work per format and are responsible for encoding a given format to string once the view layer finishes processing.</source>
          <target state="translated">Besides template engines, Phoenix has the concept of format encoders. Format encoders work per format and are responsible for encoding a given format to string once the view layer finishes processing.</target>
        </trans-unit>
        <trans-unit id="95f14d33b401893a277d4f99cbdd9eff770e0035" translate="yes" xml:space="preserve">
          <source>Besides the &amp;ldquo;Shared options&amp;rdquo; section at the module documentation, it accepts:</source>
          <target state="translated">모듈 문서의 &quot;공유 옵션&quot;섹션 외에도 다음을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="e5b702522385247fe472a44b3b7dab0d4a04a627" translate="yes" xml:space="preserve">
          <source>Besides the four components above, most developers use Ecto to interact with SQL databases, such as Postgres and MySQL via the &lt;a href=&quot;http://hexdocs.pm/ecto_sql&quot;&gt;&lt;code&gt;ecto_sql&lt;/code&gt;&lt;/a&gt; project. &lt;code&gt;ecto_sql&lt;/code&gt; provides many conveniences for working with SQL databases as well as the ability to version how your database changes through time via &lt;a href=&quot;https://hexdocs.pm/ecto_sql/Ecto.Adapters.SQL.html#module-migrations&quot;&gt;database migrations&lt;/a&gt;.</source>
          <target state="translated">Besides the four components above, most developers use Ecto to interact with SQL databases, such as Postgres and MySQL via the &lt;a href=&quot;http://hexdocs.pm/ecto_sql&quot;&gt; &lt;code&gt;ecto_sql&lt;/code&gt; &lt;/a&gt; project. &lt;code&gt;ecto_sql&lt;/code&gt; provides many conveniences for working with SQL databases as well as the ability to version how your database changes through time via &lt;a href=&quot;https://hexdocs.pm/ecto_sql/Ecto.Adapters.SQL.html#module-migrations&quot;&gt;database migrations&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3db8569d9e6815ffe5de50966c22aaf56621ce54" translate="yes" xml:space="preserve">
          <source>Besides the options from &lt;code&gt;:ssl&lt;/code&gt;, this function adds on extra option:</source>
          <target state="translated">Besides the options from &lt;code&gt;:ssl&lt;/code&gt; , this function adds on extra option:</target>
        </trans-unit>
        <trans-unit id="30337ca422dc9c9379566c110b3f0dab3fec92a6" translate="yes" xml:space="preserve">
          <source>Besides the options supported by &lt;a href=&quot;plug.conn#read_body/2&quot;&gt;&lt;code&gt;Plug.Conn.read_body/2&lt;/code&gt;&lt;/a&gt;, the multipart parser also checks for &lt;code&gt;:headers&lt;/code&gt; option that contains the same &lt;code&gt;:length&lt;/code&gt;, &lt;code&gt;:read_length&lt;/code&gt; and &lt;code&gt;:read_timeout&lt;/code&gt; options which are used explicitly for parsing multipart headers.</source>
          <target state="translated">멀티 파트 파서는 &lt;a href=&quot;plug.conn#read_body/2&quot;&gt; &lt;code&gt;Plug.Conn.read_body/2&lt;/code&gt; 가&lt;/a&gt; 지원하는 옵션 외에도 멀티 파트 헤더를 구문 분석하는 데 명시 적으로 사용되는 동일한 &lt;code&gt;:length&lt;/code&gt; , &lt;code&gt;:read_length&lt;/code&gt; 및 &lt;code&gt;:read_timeout&lt;/code&gt; 옵션을 포함하는 &lt;code&gt;:headers&lt;/code&gt; 옵션을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="15b3f19a233cd9d8ebad91d3ec8ed466fb101712" translate="yes" xml:space="preserve">
          <source>Besides the options supported by &lt;a href=&quot;plug.conn#read_body/2&quot;&gt;&lt;code&gt;Plug.Conn.read_body/2&lt;/code&gt;&lt;/a&gt;, the multipart parser also checks for:</source>
          <target state="translated">Besides the options supported by &lt;a href=&quot;plug.conn#read_body/2&quot;&gt; &lt;code&gt;Plug.Conn.read_body/2&lt;/code&gt; &lt;/a&gt;, the multipart parser also checks for:</target>
        </trans-unit>
        <trans-unit id="97011ba97fa273b21e33aa944bda2e2a278636f0" translate="yes" xml:space="preserve">
          <source>Besides working as data mappers, &lt;a href=&quot;#embedded_schema/1&quot;&gt;&lt;code&gt;embedded_schema/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#schema/2&quot;&gt;&lt;code&gt;schema/2&lt;/code&gt;&lt;/a&gt; can also be used together to decouple how the data is represented in your applications from the database. Let&amp;rsquo;s see some examples.</source>
          <target state="translated">데이터 맵퍼로 작업하는 것 외에도 &lt;a href=&quot;#embedded_schema/1&quot;&gt; &lt;code&gt;embedded_schema/1&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#schema/2&quot;&gt; &lt;code&gt;schema/2&lt;/code&gt; &lt;/a&gt; 를 함께 사용하여 데이터베이스에서 응용 프로그램에서 데이터가 표현되는 방식을 분리 할 수 ​​있습니다. 몇 가지 예를 봅시다.</target>
        </trans-unit>
        <trans-unit id="89bd0a3cbaf58f8c800ca549b4e25ac38a02f8ca" translate="yes" xml:space="preserve">
          <source>Besides working as data mappers, &lt;a href=&quot;#embedded_schema/1&quot;&gt;&lt;code&gt;embedded_schema/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#schema/2&quot;&gt;&lt;code&gt;schema/2&lt;/code&gt;&lt;/a&gt; can also be used together to decouple how the data is represented in your applications from the database. Let's see some examples.</source>
          <target state="translated">Besides working as data mappers, &lt;a href=&quot;#embedded_schema/1&quot;&gt; &lt;code&gt;embedded_schema/1&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#schema/2&quot;&gt; &lt;code&gt;schema/2&lt;/code&gt; &lt;/a&gt; can also be used together to decouple how the data is represented in your applications from the database. Let's see some examples.</target>
        </trans-unit>
        <trans-unit id="3962ea5600f34c37c915cbc046d82c04df4d77b4" translate="yes" xml:space="preserve">
          <source>Binaries: &lt;code&gt;&amp;lt;&amp;lt;1, 2, 3&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">이진 : &lt;code&gt;&amp;lt;&amp;lt;1, 2, 3&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1aad9799a97fc162affbf249838fba4245ed1b2" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;!=&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;!=&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="aab4967633fa340878f5b6ff0fac9275456b4095" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;!=&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;!=&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="e5506cd20d34fa992131eae37a4118f8df942d59" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;gt;&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;&amp;gt;&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="dfa1236ca139dea1e736031c6c010136c1156745" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;gt;&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;&amp;gt;&lt;/code&gt; 작업.</target>
        </trans-unit>
        <trans-unit id="68b8b7e6a0cafe89fe9d42b45a144301795984d6" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;gt;=&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="9fff762f48965b1b90e231f1c2e9b7b77d9c0279" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;gt;=&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;&amp;gt;=&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="897a4bf146dd662af8918814f6299d5d45bc9385" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;lt;&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;&amp;lt;&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="516964b86b828e773af99b35b730166419b08ee0" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;lt;&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;&amp;lt;&lt;/code&gt; 작업.</target>
        </trans-unit>
        <trans-unit id="55d4095acf2b6cfdaf2462ee0715df5c7aac35c1" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;lt;=&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;&amp;lt;=&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="0be463179ad26307edb01739fad99fe4901b5a8f" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;&amp;lt;=&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;&amp;lt;=&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="ed4b8e4fd8d9b29d992761dfa2dd4c4489e1ed65" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;*&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;*&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="37acde5499dd91e7f0cda6308db090f03a77b072" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;*&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;*&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="d333c5e55aa960b56f8ce9b2461bef92b1d3519a" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;+&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;+&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="becb3295fec718a8db321dbab17c20c240047390" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;+&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;+&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="04e6fcacb4fa7beb340b0fd4aebae3a486fae794" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;-&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;-&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="98d8ffdbb4452da8517c3805068ed9208643de11" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;-&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;-&lt;/code&gt; 작업.</target>
        </trans-unit>
        <trans-unit id="e6178994dd1feef09124c4590ccdad76e17713e2" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;/&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;/&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="09212b0697d203478dadb5e24a3aa03f5d34b600" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;/&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;/&lt;/code&gt; 작업.</target>
        </trans-unit>
        <trans-unit id="ccbea1b86603234afe1e75963168f22d91c68d0f" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;==&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;==&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="59b65609ffb053adfebf42fcdef021d829543b4b" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;==&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;==&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="4248aa7253f6eb7de8c22a0d449b4507ceab3e76" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;and&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;and&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="679d74c0e77d203b30ac50ea095340b58793e663" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;and&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;and&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="56942b29b92b3a8bc97ce0aee7ae63719e0afac4" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;or&lt;/code&gt; operation</source>
          <target state="translated">이진 &lt;code&gt;or&lt;/code&gt; 연산</target>
        </trans-unit>
        <trans-unit id="1efbf5460110f2b42e9a177b65ee9dbf7064f3f6" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;or&lt;/code&gt; operation.</source>
          <target state="translated">이진 &lt;code&gt;or&lt;/code&gt; 연산.</target>
        </trans-unit>
        <trans-unit id="34c54b1df07d242138e07a00276cdb9c596ce135" translate="yes" xml:space="preserve">
          <source>Bindingless operations</source>
          <target state="translated">바인딩없는 작업</target>
        </trans-unit>
        <trans-unit id="b7d81cd1aa76a8c75003ee4db6d6aa59eab833b5" translate="yes" xml:space="preserve">
          <source>Bindings are not exposed from the query. When composing queries you must specify bindings again for each refinement query. For example to further narrow-down above query we again need to tell Ecto what bindings to expect:</source>
          <target state="translated">바인딩은 쿼리에서 노출되지 않습니다. 쿼리를 작성할 때 각 구체화 쿼리에 대해 바인딩을 다시 지정해야합니다. 예를 들어 쿼리를 더 좁히려면 Ecto에게 어떤 바인딩을 기대해야하는지 다시 알려줘야합니다.</target>
        </trans-unit>
        <trans-unit id="6bbf6933797073c25a6cfb9a9635145f3caa2e87" translate="yes" xml:space="preserve">
          <source>Bindings are not exposed from the query. When composing queries, you must specify bindings again for each refinement query. For example, to further narrow down the above query, we again need to tell Ecto what bindings to expect:</source>
          <target state="translated">Bindings are not exposed from the query. When composing queries, you must specify bindings again for each refinement query. For example, to further narrow down the above query, we again need to tell Ecto what bindings to expect:</target>
        </trans-unit>
        <trans-unit id="6a768c2cec7b7bc8e20929e8467fb8b1cdbcd4ee" translate="yes" xml:space="preserve">
          <source>Bindings in Ecto are positional, and the names do not have to be consistent between input and refinement queries. For example, the query above could also be written as:</source>
          <target state="translated">Ecto의 바인딩은 위치에 따라 다르며, 입력 쿼리와 구체화 쿼리간에 이름이 일치하지 않아도됩니다. 예를 들어 위의 쿼리는 다음과 같이 작성할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7785ac12e9b48c7d8da92df06d805c335db37ed" translate="yes" xml:space="preserve">
          <source>Boolean operators: &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;</source>
          <target state="translated">부울 연산자 : &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;not&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7133f12719661511054ab5e011b7efd42eff73c9" translate="yes" xml:space="preserve">
          <source>Boolean values</source>
          <target state="translated">부울 값</target>
        </trans-unit>
        <trans-unit id="2984126e4505fef2ec09b8e1991aadd393d7b750" translate="yes" xml:space="preserve">
          <source>Booleans: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">부울 : &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b765af8d436cfcf6ee0928b70c18c8a282ae2484" translate="yes" xml:space="preserve">
          <source>Booting sockets</source>
          <target state="translated">Booting sockets</target>
        </trans-unit>
        <trans-unit id="072691eed4da8ad84159768206095389395590ea" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt; must be given a subquery as an argument, and theyu must be used on the right hand side of a comparison. Both can be used with every comparison operator: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;.</source>
          <target state="translated">Both &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt; must be given a subquery as an argument, and theyu must be used on the right hand side of a comparison. Both can be used with every comparison operator: &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="138dbeb06701882a099e2f68d3e08d5ed686d058" translate="yes" xml:space="preserve">
          <source>Both JSON and HTML formats will be encoded only when passing the data to the controller via the &lt;a href=&quot;#render_to_iodata/3&quot;&gt;&lt;code&gt;render_to_iodata/3&lt;/code&gt;&lt;/a&gt; function. The &lt;a href=&quot;#render_to_iodata/3&quot;&gt;&lt;code&gt;render_to_iodata/3&lt;/code&gt;&lt;/a&gt; function uses the notion of format encoders to convert a particular format to its string/iodata representation.</source>
          <target state="translated">JSON 및 HTML 형식은 &lt;a href=&quot;#render_to_iodata/3&quot;&gt; &lt;code&gt;render_to_iodata/3&lt;/code&gt; &lt;/a&gt; 함수 를 통해 데이터를 컨트롤러에 전달할 때만 인코딩됩니다 . &lt;a href=&quot;#render_to_iodata/3&quot;&gt; &lt;code&gt;render_to_iodata/3&lt;/code&gt; &lt;/a&gt; 함수는 문자열 / iodata 표현으로 특정 형식을 변환 할 포맷 인코더의 개념을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7f7a07162f18c4dab6556ad58150d663a794593d" translate="yes" xml:space="preserve">
          <source>Both queries are equivalent. However, if you are using the same partitioning over and over again, defining a window will reduce the query size. See &lt;a href=&quot;ecto.query#windows/3&quot;&gt;&lt;code&gt;Ecto.Query.windows/3&lt;/code&gt;&lt;/a&gt; for all possible window expressions, such as &lt;code&gt;:partition_by&lt;/code&gt; and &lt;code&gt;:order_by&lt;/code&gt;.</source>
          <target state="translated">두 쿼리 모두 동일합니다. 그러나 동일한 파티션을 반복해서 사용하는 경우 창을 정의하면 쿼리 크기가 줄어 듭니다. &lt;code&gt;:partition_by&lt;/code&gt; 및 &lt;code&gt;:order_by&lt;/code&gt; 와 같은 가능한 모든 창 표현식 은 &lt;a href=&quot;ecto.query#windows/3&quot;&gt; &lt;code&gt;Ecto.Query.windows/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f53a37385676a460a743f3f86e272723cbe6eceb" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;init/1&lt;/code&gt; and &lt;code&gt;call/2&lt;/code&gt; functions defined by &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; can be manually overridden. For example, the &lt;code&gt;init/1&lt;/code&gt; function provided by &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; returns the options that it receives as an argument, but its behaviour can be customized:</source>
          <target state="translated">Both the &lt;code&gt;init/1&lt;/code&gt; and &lt;code&gt;call/2&lt;/code&gt; functions defined by &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; can be manually overridden. For example, the &lt;code&gt;init/1&lt;/code&gt; function provided by &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; returns the options that it receives as an argument, but its behaviour can be customized:</target>
        </trans-unit>
        <trans-unit id="9841089641d10cbb68ba9932954832d08f20b29e" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;init/1&lt;/code&gt; and &lt;code&gt;call/2&lt;/code&gt; functions defined by &lt;a href=&quot;plug.builder#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; can be manually overridden. For example, the &lt;code&gt;init/1&lt;/code&gt; function provided by &lt;a href=&quot;plug.builder#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; returns the options that it receives as an argument, but its behaviour can be customized:</source>
          <target state="translated">모두 &lt;code&gt;init/1&lt;/code&gt; 및 &lt;code&gt;call/2&lt;/code&gt; 에 의해 정의 함수 &lt;a href=&quot;plug.builder#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; 는&lt;/a&gt; 수동으로 재정의 할 수 있습니다. 예를 들어 &lt;a href=&quot;plug.builder#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; 에서&lt;/a&gt; 제공 하는 &lt;code&gt;init/1&lt;/code&gt; 함수 는 인수로받는 옵션을 반환하지만 해당 동작을 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b13a8d60d1d3de64ef4fd72fc97d6965aae27f8" translate="yes" xml:space="preserve">
          <source>Broadcast an event to all subscribers of the socket topic</source>
          <target state="translated">소켓 주제의 모든 구독자에게 이벤트 브로드 캐스트</target>
        </trans-unit>
        <trans-unit id="bad0a78dd2fd78e872af83332fe02ca2f663da8e" translate="yes" xml:space="preserve">
          <source>Broadcast an event to all subscribers of the socket topic.</source>
          <target state="translated">소켓 주제의 모든 구독자에게 이벤트를 브로드 캐스트하십시오.</target>
        </trans-unit>
        <trans-unit id="846b5dd1c1f901604c81013a76597f6f855e2d20" translate="yes" xml:space="preserve">
          <source>Broadcast event from pid to all subscribers of the socket topic</source>
          <target state="translated">소켓 주제의 모든 구독자에게 pid에서 브로드 캐스트 이벤트</target>
        </trans-unit>
        <trans-unit id="851a8a80337ee20b89c3d123943d6ad3318e4e3c" translate="yes" xml:space="preserve">
          <source>Broadcast event from pid to all subscribers of the socket topic.</source>
          <target state="translated">pid에서 소켓 주제의 모든 구독자에게 이벤트를 브로드 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="7459c0c85fb18346d48a15ecd0ee62798126c617" translate="yes" xml:space="preserve">
          <source>Broadcasting to an external topic</source>
          <target state="translated">외부 주제로 방송</target>
        </trans-unit>
        <trans-unit id="430c9f20aa06eb11805b71cdf9305b868b70a06a" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt;</source>
          <target state="translated">주어진 &lt;code&gt;topic&lt;/code&gt; 에서 &lt;code&gt;msg&lt;/code&gt; 를 &lt;code&gt;event&lt;/code&gt; 로 브로드 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="41d4a918d7ada7063a5d54f173d1fb2b78ec2966" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; to all nodes.</source>
          <target state="translated">Broadcasts a &lt;code&gt;msg&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; to all nodes.</target>
        </trans-unit>
        <trans-unit id="3ad30a6e73447865104d74a754edbdbb847221a5" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; within the current node.</source>
          <target state="translated">Broadcasts a &lt;code&gt;msg&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; within the current node.</target>
        </trans-unit>
        <trans-unit id="9be84a5fac4b66af00295240a8a9fd8406098ea3" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;topic&lt;/code&gt; 에서 &lt;code&gt;msg&lt;/code&gt; 를 &lt;code&gt;event&lt;/code&gt; 로 브로드 캐스트합니다 .</target>
        </trans-unit>
        <trans-unit id="2a381d4f84303afe830a779813c8ff51ca44d964" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; from the given &lt;code&gt;from&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt;</source>
          <target state="translated">브로드 캐스트 &lt;code&gt;msg&lt;/code&gt; 주어진에서를 &lt;code&gt;from&lt;/code&gt; 로 &lt;code&gt;event&lt;/code&gt; 주어진에서 &lt;code&gt;topic&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f5bcc1aac9a59de4ee2320d6d3de3b015ff24b6" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; from the given &lt;code&gt;from&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; to all nodes.</source>
          <target state="translated">Broadcasts a &lt;code&gt;msg&lt;/code&gt; from the given &lt;code&gt;from&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; to all nodes.</target>
        </trans-unit>
        <trans-unit id="9dcc5aa9001938c0fa121a5a07fb5cb71c8216ac" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; from the given &lt;code&gt;from&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; within the current node.</source>
          <target state="translated">Broadcasts a &lt;code&gt;msg&lt;/code&gt; from the given &lt;code&gt;from&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt; within the current node.</target>
        </trans-unit>
        <trans-unit id="da547b962c3b435f39e695241e267c345324e49f" translate="yes" xml:space="preserve">
          <source>Broadcasts a &lt;code&gt;msg&lt;/code&gt; from the given &lt;code&gt;from&lt;/code&gt; as &lt;code&gt;event&lt;/code&gt; in the given &lt;code&gt;topic&lt;/code&gt;.</source>
          <target state="translated">브로드 캐스트 &lt;code&gt;msg&lt;/code&gt; 주어진에서 &lt;code&gt;from&lt;/code&gt; 같은 &lt;code&gt;event&lt;/code&gt; 주어진에서 &lt;code&gt;topic&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2128b2a68ac127e87f9c6c480329ff8af263ea9f" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic</source>
          <target state="translated">주어진 주제에 대한 메시지를 방송</target>
        </trans-unit>
        <trans-unit id="3e575d0da9aea600efd895513bb1b0d422de8ace" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic across the whole cluster.</source>
          <target state="translated">Broadcasts message on given topic across the whole cluster.</target>
        </trans-unit>
        <trans-unit id="8a8ed8128ad3266a3e3ed17060b3688cd98d5484" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic from a given process only for the current node.</source>
          <target state="translated">Broadcasts message on given topic from a given process only for the current node.</target>
        </trans-unit>
        <trans-unit id="bc32e492fe1951ff9c5a65a298a35717bdab0d23" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic from the given process across the whole cluster.</source>
          <target state="translated">Broadcasts message on given topic from the given process across the whole cluster.</target>
        </trans-unit>
        <trans-unit id="a6cf1d8af5af2a25fd80f311ae513c176bc7fe41" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic only for the current node.</source>
          <target state="translated">Broadcasts message on given topic only for the current node.</target>
        </trans-unit>
        <trans-unit id="7502e5d44055067546fa115fcbb0ed4dfdcfae02" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic to a given node.</source>
          <target state="translated">Broadcasts message on given topic to a given node.</target>
        </trans-unit>
        <trans-unit id="1ba7c5fe02bf40bcee64e896b6cd0ddf2b71ca36" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic, to a single node</source>
          <target state="translated">주어진 주제에 대한 메시지를 단일 노드로 브로드 캐스트</target>
        </trans-unit>
        <trans-unit id="da681bfc05555f8cac2c5c0c250337cfb697db18" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic, to a single node.</source>
          <target state="translated">주어진 주제에 대한 메시지를 단일 노드로 브로드 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="baaf416dc33a67c455e18b0b538a1ae5730c71d0" translate="yes" xml:space="preserve">
          <source>Broadcasts message on given topic.</source>
          <target state="translated">주어진 주제에 대한 메시지를 방송합니다.</target>
        </trans-unit>
        <trans-unit id="1edade3815a385432e990fc315fdd6e6c7f1f398" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 브로드 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="abc20b7ef90b188eb547d7592ee2970a9b5990ac" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic, to a single node</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 단일 노드로 브로드 캐스트 합니다.</target>
        </trans-unit>
        <trans-unit id="5000b61642c547143460a6ec6ae2892cc6264673" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic, to a single node.</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 단일 노드로 브로드 캐스트 합니다.</target>
        </trans-unit>
        <trans-unit id="f95185ce0e58abc03f073ee2890ea397829aef49" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic, to a single node. See &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt;&lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt;&lt;/a&gt; for usage details</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 단일 노드로 브로드 캐스트 합니다. 사용법에 대한 자세한 내용 은 &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt; &lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="e35e10e515b1d4d457f40e4fc28748a3276eba76" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic, to a single node. See &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt;&lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt;&lt;/a&gt; for usage details.</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 단일 노드로 브로드 캐스트 합니다. 사용법에 대한 자세한 내용은 &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt; &lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="01215d649649c533e41cf42ecf38e606611b58b5" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic.</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 브로드 캐스트합니다 .</target>
        </trans-unit>
        <trans-unit id="50197b0c83c20aa8e60756157bf676b3db8808b4" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic. See &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt;&lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt;&lt;/a&gt; for usage details</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 브로드 캐스트합니다 . 사용법에 대한 자세한 내용 은 &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt; &lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="4cfdbf59168f78dca54b31b9369a0c8edad45fdd" translate="yes" xml:space="preserve">
          <source>Broadcasts message to all but &lt;code&gt;from_pid&lt;/code&gt; on given topic. See &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt;&lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt;&lt;/a&gt; for usage details.</source>
          <target state="translated">주어진 주제에서 &lt;code&gt;from_pid&lt;/code&gt; 를 제외한 모든 메시지를 브로드 캐스트합니다 . 사용법에 대한 자세한 내용은 &lt;a href=&quot;phoenix.pubsub#broadcast/3&quot;&gt; &lt;code&gt;Phoenix.PubSub.broadcast/3&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="293663a57177870794dca0c1751bd172ff6f1289" translate="yes" xml:space="preserve">
          <source>Browsers implement a storage by using cookies. When a cookie is set in the response, the browser stores it and sends it in the next request.</source>
          <target state="translated">브라우저는 쿠키를 사용하여 스토리지를 구현합니다. 응답에 쿠키가 설정되면 브라우저는 쿠키를 저장하고 다음 요청에서 보냅니다.</target>
        </trans-unit>
        <trans-unit id="4759bf14d7a511508e86c343c934894b6e8db533" translate="yes" xml:space="preserve">
          <source>Builder</source>
          <target state="translated">Builder</target>
        </trans-unit>
        <trans-unit id="aaf7c10bf0a579e313e284fd389aa7a72d36e686" translate="yes" xml:space="preserve">
          <source>Builds a dynamic query expression</source>
          <target state="translated">동적 쿼리 표현식을 작성합니다</target>
        </trans-unit>
        <trans-unit id="035a00799962cb493238a0a62db95718dd0c9cc9" translate="yes" xml:space="preserve">
          <source>Builds a dynamic query expression.</source>
          <target state="translated">동적 쿼리 표현식을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="a45afaca9c91a1c32a9e917eca46a915988a9f39" translate="yes" xml:space="preserve">
          <source>Builds a query for the association in the given struct or structs</source>
          <target state="translated">주어진 구조체 또는 구조체에서 연관에 대한 쿼리를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="407385801b1e85882900e84e2dc6b09dd54a44e4" translate="yes" xml:space="preserve">
          <source>Builds a query for the association in the given struct or structs.</source>
          <target state="translated">주어진 구조체 또는 구조체에서 연관에 대한 쿼리를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="ced66bf8e021e21edfee88e91fd8bee8dc689ca4" translate="yes" xml:space="preserve">
          <source>Builds a socket</source>
          <target state="translated">소켓을 만듭니다</target>
        </trans-unit>
        <trans-unit id="178c31d3a9ba9e5ac041bf5f2cadc37f2969f838" translate="yes" xml:space="preserve">
          <source>Builds a socket for the given &lt;code&gt;socket_module&lt;/code&gt; with given id and assigns.</source>
          <target state="translated">Builds a socket for the given &lt;code&gt;socket_module&lt;/code&gt; with given id and assigns.</target>
        </trans-unit>
        <trans-unit id="00c87893c8631edef27f3833e1cc0e8b5a8eb090" translate="yes" xml:space="preserve">
          <source>Builds a socket for the given &lt;code&gt;socket_module&lt;/code&gt;.</source>
          <target state="translated">Builds a socket for the given &lt;code&gt;socket_module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd5e1205dff465d478f5f9f203d29a49c4f9a0ff" translate="yes" xml:space="preserve">
          <source>Builds a socket with given id and assigns</source>
          <target state="translated">주어진 아이디로 소켓을 만들고 할당</target>
        </trans-unit>
        <trans-unit id="5643a36079c84d62291717bceeaf757f27684fd6" translate="yes" xml:space="preserve">
          <source>Builds a socket with given id and assigns.</source>
          <target state="translated">주어진 ID로 소켓을 빌드하고 할당합니다.</target>
        </trans-unit>
        <trans-unit id="0c373ae3deb56451e196d972839aac1b1465029f" translate="yes" xml:space="preserve">
          <source>Builds a socket.</source>
          <target state="translated">소켓을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="564d64573cd800ede3483cc31acb71f2c69da51b" translate="yes" xml:space="preserve">
          <source>Builds a struct from the given &lt;code&gt;assoc&lt;/code&gt; in &lt;code&gt;struct&lt;/code&gt;</source>
          <target state="translated">struct의 주어진 &lt;code&gt;assoc&lt;/code&gt; 에서 &lt;code&gt;struct&lt;/code&gt; 빌드합니다.</target>
        </trans-unit>
        <trans-unit id="115a32a9ade32b44e729b841088b442f63153188" translate="yes" xml:space="preserve">
          <source>Builds a struct from the given &lt;code&gt;assoc&lt;/code&gt; in &lt;code&gt;struct&lt;/code&gt;.</source>
          <target state="translated">struct의 주어진 &lt;code&gt;assoc&lt;/code&gt; 에서 &lt;code&gt;struct&lt;/code&gt; 빌드합니다 .</target>
        </trans-unit>
        <trans-unit id="30d7f140361dec14b5a789c34dc36ebfd35298f6" translate="yes" xml:space="preserve">
          <source>Built-in parsers</source>
          <target state="translated">내장 파서</target>
        </trans-unit>
        <trans-unit id="2ceca089ad01522602de57710545e1b64e4bc0c5" translate="yes" xml:space="preserve">
          <source>But this will:</source>
          <target state="translated">But this will:</target>
        </trans-unit>
        <trans-unit id="7243e4810458725050916d2e8378cd9f6cbc328c" translate="yes" xml:space="preserve">
          <source>By calling &lt;code&gt;validate_confirmation(changeset, :email)&lt;/code&gt;, this validation will check if both &quot;email&quot; and &quot;email_confirmation&quot; in the parameter map matches. Note this validation only looks at the parameters themselves, never the fields in the schema. As such as, the &quot;email_confirmation&quot; field does not need to be added as a virtual field in your schema.</source>
          <target state="translated">By calling &lt;code&gt;validate_confirmation(changeset, :email)&lt;/code&gt; , this validation will check if both &quot;email&quot; and &quot;email_confirmation&quot; in the parameter map matches. Note this validation only looks at the parameters themselves, never the fields in the schema. As such as, the &quot;email_confirmation&quot; field does not need to be added as a virtual field in your schema.</target>
        </trans-unit>
        <trans-unit id="5e1685f14dba3d96347d988739d528f81ec0f3c1" translate="yes" xml:space="preserve">
          <source>By calling &lt;code&gt;validate_confirmation(changeset, :email)&lt;/code&gt;, this validation will check if both &amp;ldquo;email&amp;rdquo; and &amp;ldquo;email_confirmation&amp;rdquo; in the parameter map matches.</source>
          <target state="translated">&lt;code&gt;validate_confirmation(changeset, :email)&lt;/code&gt; 을 호출 하면이 유효성 검사는 매개 변수 맵의 &quot;email&quot;및 &quot;email_confirmation&quot;이 모두 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b28227eb91b2bb0b9444ee88ec1ee79badeb0458" translate="yes" xml:space="preserve">
          <source>By default a signed or encrypted cookie is only valid for a day, unless a &lt;code&gt;:max_age&lt;/code&gt; is specified.</source>
          <target state="translated">By default a signed or encrypted cookie is only valid for a day, unless a &lt;code&gt;:max_age&lt;/code&gt; is specified.</target>
        </trans-unit>
        <trans-unit id="5882dbfbfa27da2fbdedfbff9e1a63f338d24168" translate="yes" xml:space="preserve">
          <source>By default, CSRF tokens are generated through &lt;a href=&quot;../plug/1.5.0/plug.csrfprotection&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본적으로 CSRF 토큰은 &lt;a href=&quot;../plug/1.5.0/plug.csrfprotection&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; 을&lt;/a&gt; 통해 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="1465a06e31b181be9371171ee37758b5f937a222" translate="yes" xml:space="preserve">
          <source>By default, CSRF tokens are generated through &lt;a href=&quot;../plug/1.7.1/plug.csrfprotection&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">By default, CSRF tokens are generated through &lt;a href=&quot;../plug/1.7.1/plug.csrfprotection&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bf44902d066daac00377756f269ce94379621c08" translate="yes" xml:space="preserve">
          <source>By default, Controllers render templates in a view with a similar name to the controller. For example, &lt;code&gt;MyApp.UserController&lt;/code&gt; will render templates inside the &lt;code&gt;MyApp.UserView&lt;/code&gt;. This information can be changed any time by using &lt;a href=&quot;#render/3&quot;&gt;&lt;code&gt;render/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#render/4&quot;&gt;&lt;code&gt;render/4&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;#put_view/2&quot;&gt;&lt;code&gt;put_view/2&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">기본적으로 컨트롤러는 템플릿을 컨트롤러와 비슷한 이름의보기로 렌더링합니다. 예를 들어 &lt;code&gt;MyApp.UserController&lt;/code&gt; 는 &lt;code&gt;MyApp.UserView&lt;/code&gt; 내부에서 템플릿을 렌더링합니다 . 이 정보는 &lt;a href=&quot;#render/3&quot;&gt; &lt;code&gt;render/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#render/4&quot;&gt; &lt;code&gt;render/4&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#put_view/2&quot;&gt; &lt;code&gt;put_view/2&lt;/code&gt; &lt;/a&gt; 함수 를 사용하여 언제든지 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ff81ed45b7465077f0238ae3712c251b02aef2c1" translate="yes" xml:space="preserve">
          <source>By default, Controllers render templates in a view with a similar name to the controller. For example, &lt;code&gt;MyAppWeb.UserController&lt;/code&gt; will render templates inside the &lt;code&gt;MyAppWeb.UserView&lt;/code&gt;. This information can be changed any time by using the &lt;a href=&quot;#put_view/2&quot;&gt;&lt;code&gt;put_view/2&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">By default, Controllers render templates in a view with a similar name to the controller. For example, &lt;code&gt;MyAppWeb.UserController&lt;/code&gt; will render templates inside the &lt;code&gt;MyAppWeb.UserView&lt;/code&gt; . This information can be changed any time by using the &lt;a href=&quot;#put_view/2&quot;&gt; &lt;code&gt;put_view/2&lt;/code&gt; &lt;/a&gt; function:</target>
        </trans-unit>
        <trans-unit id="fb8b2e95adce99468ff6ee3a4e3e9908aa0c3110" translate="yes" xml:space="preserve">
          <source>By default, Ecto will generate a foreign key constraint with name &quot;comments_post_id_fkey&quot; (the name is configurable).</source>
          <target state="translated">By default, Ecto will generate a foreign key constraint with name &quot;comments_post_id_fkey&quot; (the name is configurable).</target>
        </trans-unit>
        <trans-unit id="a268cfeb224349d5d90c3cd123f25da9e6f77fd2" translate="yes" xml:space="preserve">
          <source>By default, Ecto will generate a foreign key constraint with name &amp;ldquo;comments_post_id_fkey&amp;rdquo; (the name is configurable).</source>
          <target state="translated">기본적으로 Ecto는 이름이 &quot;comments_post_id_fkey&quot;인 외래 키 제약 조건을 생성합니다 (이름을 구성 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="fae9065c91907a74dc22def221d61623cee30465" translate="yes" xml:space="preserve">
          <source>By default, JSON encoding is used to broker messages to and from clients. A custom serializer may be given as a module which implements the &lt;code&gt;encode!/1&lt;/code&gt; and &lt;code&gt;decode!/2&lt;/code&gt; functions defined by the &lt;a href=&quot;phoenix.transports.serializer&quot;&gt;&lt;code&gt;Phoenix.Transports.Serializer&lt;/code&gt;&lt;/a&gt; behaviour.</source>
          <target state="translated">기본적으로 JSON 인코딩은 클라이언트와 메시지를 중개하는 데 사용됩니다. 커스텀 시리얼 라이저는 &lt;a href=&quot;phoenix.transports.serializer&quot;&gt; &lt;code&gt;Phoenix.Transports.Serializer&lt;/code&gt; &lt;/a&gt; 동작에 의해 정의 된 인 &lt;code&gt;encode!/1&lt;/code&gt; 및 &lt;code&gt;decode!/2&lt;/code&gt; 기능 을 구현하는 모듈로 제공 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a824dc4ed53d783f7a9975983ce7ef8b0506c3fb" translate="yes" xml:space="preserve">
          <source>By default, Phoenix applications depend on the following packages:</source>
          <target state="translated">기본적으로 Phoenix 응용 프로그램은 다음 패키지에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="817d20452cd8be58fa983c6be832a701e9567224" translate="yes" xml:space="preserve">
          <source>By default, Phoenix implements this protocol for integers, binaries, atoms, and structs. For structs, a key &lt;code&gt;:id&lt;/code&gt; is assumed, but you may provide a specific implementation.</source>
          <target state="translated">기본적으로 Phoenix는 정수, 이진, 원자 및 구조체에 대해이 프로토콜을 구현합니다. 구조체의 경우 key &lt;code&gt;:id&lt;/code&gt; 가 가정되지만 특정 구현을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c77f53dd306fa81c812f2682c1de5d50bfe6516e" translate="yes" xml:space="preserve">
          <source>By default, Phoenix instruments the following events:</source>
          <target state="translated">기본적으로 Phoenix는 다음과 같은 이벤트를 계측합니다.</target>
        </trans-unit>
        <trans-unit id="8ebcd9b5c38954d3163ccd8ecd9a117876eeae4e" translate="yes" xml:space="preserve">
          <source>By default, Phoenix supports both websockets and longpoll transports. For example:</source>
          <target state="translated">기본적으로 Phoenix는 웹 소켓과 Longpoll 전송을 모두 지원합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b9937c50f71e8e049a8c05f9b659bcecef64cbe5" translate="yes" xml:space="preserve">
          <source>By default, Phoenix supports both websockets and longpoll when invoking &lt;a href=&quot;phoenix.endpoint#socket/3&quot;&gt;&lt;code&gt;Phoenix.Endpoint.socket/3&lt;/code&gt;&lt;/a&gt; in your endpoint:</source>
          <target state="translated">By default, Phoenix supports both websockets and longpoll when invoking &lt;a href=&quot;phoenix.endpoint#socket/3&quot;&gt; &lt;code&gt;Phoenix.Endpoint.socket/3&lt;/code&gt; &lt;/a&gt; in your endpoint:</target>
        </trans-unit>
        <trans-unit id="0c1d03b3d76d48b7871af950bfe31f58d6df0dd3" translate="yes" xml:space="preserve">
          <source>By default, Plug tests checks for invalid header keys, e.g. header keys which include uppercase letters, and raises a &lt;a href=&quot;plug.conn.invalidheadererror&quot;&gt;&lt;code&gt;Plug.Conn.InvalidHeaderError&lt;/code&gt;&lt;/a&gt; when it finds one. To disable it, set :validate_header_keys_during_test to false on the app config.</source>
          <target state="translated">기본적으로 Plug 테스트는 대문자를 포함하는 헤더 키와 같은 잘못된 헤더 키를 확인하고 &lt;a href=&quot;plug.conn.invalidheadererror&quot;&gt; &lt;code&gt;Plug.Conn.InvalidHeaderError&lt;/code&gt; &lt;/a&gt; 를 발견하면 발생합니다. 비활성화하려면 앱 구성에서 : validate_header_keys_during_test를 false로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="ab07041e506b7bff5fdaf86b0c2088b2b5296fa8" translate="yes" xml:space="preserve">
          <source>By default, a schema will automatically generate a primary key which is named &lt;code&gt;id&lt;/code&gt; and of type &lt;code&gt;:integer&lt;/code&gt;. The &lt;code&gt;field&lt;/code&gt; macro defines a field in the schema with given name and type. &lt;code&gt;has_many&lt;/code&gt; associates many posts with the user schema. Schemas are regular structs and can be created and manipulated directly using Elixir&amp;rsquo;s struct API:</source>
          <target state="translated">기본적으로 스키마는 이름이 &lt;code&gt;id&lt;/code&gt; 이고 &lt;code&gt;:integer&lt;/code&gt; 유형 인 기본 키를 자동으로 생성합니다 . &lt;code&gt;field&lt;/code&gt; 매크로는 주어진 이름과 유형 스키마에서 필드를 정의합니다. &lt;code&gt;has_many&lt;/code&gt; 는 많은 게시물을 사용자 스키마와 연결합니다. 스키마는 일반 구조체이며 Elixir의 구조체 API를 사용하여 직접 생성하고 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5de1c1bf1cac87b445c38e02f249e16480fea34" translate="yes" xml:space="preserve">
          <source>By default, a schema will automatically generate a primary key which is named &lt;code&gt;id&lt;/code&gt; and of type &lt;code&gt;:integer&lt;/code&gt;. The &lt;code&gt;field&lt;/code&gt; macro defines a field in the schema with given name and type. &lt;code&gt;has_many&lt;/code&gt; associates many posts with the user schema. Schemas are regular structs and can be created and manipulated directly using Elixir's struct API:</source>
          <target state="translated">By default, a schema will automatically generate a primary key which is named &lt;code&gt;id&lt;/code&gt; and of type &lt;code&gt;:integer&lt;/code&gt; . The &lt;code&gt;field&lt;/code&gt; macro defines a field in the schema with given name and type. &lt;code&gt;has_many&lt;/code&gt; associates many posts with the user schema. Schemas are regular structs and can be created and manipulated directly using Elixir's struct API:</target>
        </trans-unit>
        <trans-unit id="fdb33692f4f922ef8e7384f9894f6b6f566404f3" translate="yes" xml:space="preserve">
          <source>By default, both Postgres and MySQL return the amount of entries inserted on &lt;a href=&quot;#c:insert_all/3&quot;&gt;&lt;code&gt;insert_all/3&lt;/code&gt;&lt;/a&gt;. However, when the &lt;code&gt;:on_conflict&lt;/code&gt; option is specified, Postgres will only return a row if it was affected while MySQL returns at least the number of entries attempted.</source>
          <target state="translated">기본적으로 Postgres와 MySQL은 &lt;a href=&quot;#c:insert_all/3&quot;&gt; &lt;code&gt;insert_all/3&lt;/code&gt; &lt;/a&gt; 에 삽입 된 항목 수를 반환합니다 . 그러나 &lt;code&gt;:on_conflict&lt;/code&gt; 옵션이 지정되면 Postgres는 영향을받는 경우에만 행을 반환하지만 MySQL은 최소한 시도한 항목 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="59909984c65d4777ed0f3ee8c76c0bcc4eb4ad05" translate="yes" xml:space="preserve">
          <source>By default, both Postgres and MySQL will return the number of entries inserted on &lt;a href=&quot;#c:insert_all/3&quot;&gt;&lt;code&gt;insert_all/3&lt;/code&gt;&lt;/a&gt;. However, when the &lt;code&gt;:on_conflict&lt;/code&gt; option is specified, Postgres and MySQL will return different results.</source>
          <target state="translated">By default, both Postgres and MySQL will return the number of entries inserted on &lt;a href=&quot;#c:insert_all/3&quot;&gt; &lt;code&gt;insert_all/3&lt;/code&gt; &lt;/a&gt;. However, when the &lt;code&gt;:on_conflict&lt;/code&gt; option is specified, Postgres and MySQL will return different results.</target>
        </trans-unit>
        <trans-unit id="de233bf5f3f9c757c065d4cd8e84316010e764d2" translate="yes" xml:space="preserve">
          <source>By default, broadcasted events are pushed directly to the client, but intercepting events gives your channel a chance to customize the event for the client to append extra information or filter the message from being delivered.</source>
          <target state="translated">기본적으로 브로드 캐스트 된 이벤트는 클라이언트로 직접 푸시되지만 이벤트를 가로 채면 채널에서 클라이언트가 추가 정보를 추가하거나 메시지 전달을 필터링하도록 이벤트를 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="254a23963f3f147ec81ad839e431fa169765b357" translate="yes" xml:space="preserve">
          <source>By default, channel &lt;code&gt;&quot;join&quot;&lt;/code&gt; and &lt;code&gt;&quot;handle_in&quot;&lt;/code&gt; events are logged, using the level &lt;code&gt;:info&lt;/code&gt; and &lt;code&gt;:debug&lt;/code&gt;, respectively. Logs can be customized per event type or disabled by setting the &lt;code&gt;:log_join&lt;/code&gt; and &lt;code&gt;:log_handle_in&lt;/code&gt; options when using &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.Channel&lt;/code&gt;&lt;/a&gt;. For example, the following configuration logs join events as &lt;code&gt;:info&lt;/code&gt;, but disables logging for incoming events:</source>
          <target state="translated">By default, channel &lt;code&gt;&quot;join&quot;&lt;/code&gt; and &lt;code&gt;&quot;handle_in&quot;&lt;/code&gt; events are logged, using the level &lt;code&gt;:info&lt;/code&gt; and &lt;code&gt;:debug&lt;/code&gt; , respectively. Logs can be customized per event type or disabled by setting the &lt;code&gt;:log_join&lt;/code&gt; and &lt;code&gt;:log_handle_in&lt;/code&gt; options when using &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.Channel&lt;/code&gt; &lt;/a&gt;. For example, the following configuration logs join events as &lt;code&gt;:info&lt;/code&gt; , but disables logging for incoming events:</target>
        </trans-unit>
        <trans-unit id="f8484b7b776d9e09863af72b8186c36040033470" translate="yes" xml:space="preserve">
          <source>By default, channel &lt;code&gt;&quot;join&quot;&lt;/code&gt; and &lt;code&gt;&quot;handle_in&quot;&lt;/code&gt; events are logged, using the level &lt;code&gt;:info&lt;/code&gt; and &lt;code&gt;:debug&lt;/code&gt;, respectively. Logs can be customized per event type or disabled by setting the &lt;code&gt;:log_join&lt;/code&gt; and &lt;code&gt;:log_handle_in&lt;/code&gt; options when using &lt;a href=&quot;phoenix.channel#content&quot;&gt;&lt;code&gt;Phoenix.Channel&lt;/code&gt;&lt;/a&gt;. For example, the following configuration logs join events as &lt;code&gt;:info&lt;/code&gt;, but disables logging for incoming events:</source>
          <target state="translated">기본적으로 채널 &lt;code&gt;&quot;join&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;handle_in&quot;&lt;/code&gt; 이벤트는 각각 &lt;code&gt;:info&lt;/code&gt; 및 &lt;code&gt;:debug&lt;/code&gt; 레벨을 사용하여 기록 됩니다. 로그는 이벤트 유형에 따라 사용자 정의 또는 설정하여 비활성화 할 수 있습니다 &lt;code&gt;:log_join&lt;/code&gt; 을 하고 &lt;code&gt;:log_handle_in&lt;/code&gt; 사용할 때 옵션을 &lt;a href=&quot;phoenix.channel#content&quot;&gt; &lt;code&gt;Phoenix.Channel&lt;/code&gt; 을&lt;/a&gt; . 예를 들어 다음 구성 로그는 이벤트를 &lt;code&gt;:info&lt;/code&gt; 로 결합 하지만 들어오는 이벤트에 대한 로깅은 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="77127032563b63331ed75935691a8dae8644ce22" translate="yes" xml:space="preserve">
          <source>By default, it looks for an implementation of the protocol, otherwise checks if the exception has the &lt;code&gt;:plug_status&lt;/code&gt; field or simply returns 500.</source>
          <target state="translated">기본적으로 프로토콜의 구현을 찾고, 그렇지 않으면 예외에 &lt;code&gt;:plug_status&lt;/code&gt; 필드 가 있는지 확인 하거나 단순히 500을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ce7df1ce09d3b95a15af132d0783bd3b431787b6" translate="yes" xml:space="preserve">
          <source>By default, it will keep the latest version and 2 previous versions as well as any digest created in the last hour.</source>
          <target state="translated">기본적으로 최신 버전과 2 개의 이전 버전 및 마지막 한 시간 동안 생성 된 다이제스트를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="11600f5b12cbb0d0ad9196a9238995486e684451" translate="yes" xml:space="preserve">
          <source>By default, mix phoenix.gen.secret generates a key 64 characters long.</source>
          <target state="translated">기본적으로 mix phoenix.gen.secret은 64 자 길이의 키를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e92996c56130e46f9f7c2c9e0e901205927e690b" translate="yes" xml:space="preserve">
          <source>By default, mix phx.gen.secret generates a key 64 characters long.</source>
          <target state="translated">기본적으로 mix phx.gen.secret은 64 자 길이의 키를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="353508c1c264732db28501a9fc2634a94f25d0dc" translate="yes" xml:space="preserve">
          <source>By default, only the headers &quot;accept&quot;, &quot;accept-language&quot;, and &quot;authorization&quot; are recycled. However, a custom set of headers can be specified by passing a list of strings representing its names as the second argument of the function.</source>
          <target state="translated">By default, only the headers &quot;accept&quot;, &quot;accept-language&quot;, and &quot;authorization&quot; are recycled. However, a custom set of headers can be specified by passing a list of strings representing its names as the second argument of the function.</target>
        </trans-unit>
        <trans-unit id="c9e053035a992ad440134b8fe6bb2bb506296826" translate="yes" xml:space="preserve">
          <source>By default, the connection&amp;rsquo;s query params are included in the generated path. Custom query params may be used instead by providing a map of your own params. You may also retrieve only the request path by passing an empty map of params.</source>
          <target state="translated">기본적으로 연결의 쿼리 매개 변수는 생성 된 경로에 포함됩니다. 사용자 지정 쿼리 매개 변수는 자체 매개 변수 맵을 제공하여 대신 사용할 수 있습니다. 비어있는 매개 변수 맵을 전달하여 요청 경로 만 검색 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc77640e4a2742fe3831fd03e1b3f00201d9e0fe" translate="yes" xml:space="preserve">
          <source>By default, the controller and view will be namespaced by the schema name. You can customize the web module namespace by passing the &lt;code&gt;--web&lt;/code&gt; flag with a module name, for example:</source>
          <target state="translated">기본적으로 컨트롤러와 뷰는 스키마 이름으로 네임 스페이스가 지정됩니다. &lt;code&gt;--web&lt;/code&gt; 플래그를 모듈 이름과 함께 전달하여 웹 모듈 네임 스페이스를 사용자 정의 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b870fd1613d7bc837c7fb85e712119ea8176da56" translate="yes" xml:space="preserve">
          <source>By default, the derived implementation will also use the &lt;code&gt;:id&lt;/code&gt; key. In case the user does not contain an &lt;code&gt;:id&lt;/code&gt; key, the key can be specified with an option:</source>
          <target state="translated">기본적으로 파생 구현은 &lt;code&gt;:id&lt;/code&gt; 키 도 사용합니다 . 사용자가 &lt;code&gt;:id&lt;/code&gt; 키를 포함하지 않는 경우 옵션으로 키를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="187e85e94e6e51510fec3d96b7fd25a22058656c" translate="yes" xml:space="preserve">
          <source>By default, the given path is a websocket upgrade endpoint, with long-polling fallback. The transports can be configured within the Socket handler. See &lt;a href=&quot;phoenix.socket&quot;&gt;&lt;code&gt;Phoenix.Socket&lt;/code&gt;&lt;/a&gt; for more information on defining socket handlers.</source>
          <target state="translated">기본적으로 주어진 경로는 폴링 폴 백이 긴 웹 소켓 업그레이드 엔드 포인트입니다. 전송은 소켓 핸들러 내에서 구성 할 수 있습니다. 소켓 핸들러 정의에 대한 자세한 정보는 &lt;a href=&quot;phoenix.socket&quot;&gt; &lt;code&gt;Phoenix.Socket&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d9160dbef59f808f39d5df46c819a7932402cb60" translate="yes" xml:space="preserve">
          <source>By default, the table name for the migration and schema will be the plural name provided for the resource. To customize this value, a &lt;code&gt;--table&lt;/code&gt; option may be provided. For example:</source>
          <target state="translated">기본적으로 마이그레이션 및 스키마의 테이블 이름은 자원에 제공된 복수 이름입니다. 이 값을 사용자 정의하기 위해 &lt;code&gt;--table&lt;/code&gt; 옵션이 제공 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aed634d9ceb20a9d053ba889b712738bbbb07763" translate="yes" xml:space="preserve">
          <source>By default, the type is sent as itself, without calling dumping to keep the higher level representation. But it can be set to &lt;code&gt;:dump&lt;/code&gt; so that it is dumped before being encoded.</source>
          <target state="translated">By default, the type is sent as itself, without calling dumping to keep the higher level representation. But it can be set to &lt;code&gt;:dump&lt;/code&gt; so that it is dumped before being encoded.</target>
        </trans-unit>
        <trans-unit id="27e1f8f9c425229e754f86165235a0e052207991" translate="yes" xml:space="preserve">
          <source>By defining a schema, Ecto automatically defines a struct with the schema fields:</source>
          <target state="translated">스키마를 정의하여 Ecto는 스키마 필드를 사용하여 구조체를 자동으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d7ba6941e0aa76ed33228ec903b82bbbca9adfcd" translate="yes" xml:space="preserve">
          <source>By having structs as data, we guarantee they are light-weight, serializable structures. In many languages, the data is often represented by large, complex objects, with entwined state transactions, which makes serialization, maintenance and understanding hard;</source>
          <target state="translated">구조체를 데이터로 사용하면 가볍고 직렬화 가능한 구조임을 보장합니다. 많은 언어에서 데이터는 종종 복잡하고 큰 상태의 객체로 표현되며, 일련의 상태 트랜잭션으로 직렬화, 유지 관리 및 이해를 어렵게합니다.</target>
        </trans-unit>
        <trans-unit id="f4bc19b49e4a07e4321e1dff4210dbd266193562" translate="yes" xml:space="preserve">
          <source>By implementing the Plug API, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; guarantees this module is a plug and can be handed to a web server or used as part of another pipeline.</source>
          <target state="translated">By implementing the Plug API, &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; guarantees this module is a plug and can be handed to a web server or used as part of another pipeline.</target>
        </trans-unit>
        <trans-unit id="5d18c6cc02b3eab9bdf12392d843e6b7776d6e77" translate="yes" xml:space="preserve">
          <source>By implementing the Plug API, &lt;a href=&quot;plug.builder#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; guarantees this module is a plug and can be handed to a web server or used as part of another pipeline.</source>
          <target state="translated">&lt;a href=&quot;plug.builder#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; 는 Plug API를 구현 하여이 모듈이 플러그이며 웹 서버로 전달되거나 다른 파이프 라인의 일부로 사용될 수 있음을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="c6de9b3db655a99c3d4b4309b93931d50969516f" translate="yes" xml:space="preserve">
          <source>By joining the channel, we can interact with it directly. The given channel is joined in a separate process which is linked to the test process.</source>
          <target state="translated">채널에 참여하면 직접 채널과 상호 작용할 수 있습니다. 주어진 채널은 테스트 프로세스에 연결된 별도의 프로세스로 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="2d6b0b5f2d1997a9e84246f2b1cde0fcfc91f0a5" translate="yes" xml:space="preserve">
          <source>By passing the &lt;code&gt;:read_only&lt;/code&gt; option, none of the functions that perform write operations, such as &lt;a href=&quot;#c:insert/2&quot;&gt;&lt;code&gt;insert/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:insert_all/3&quot;&gt;&lt;code&gt;insert_all/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:update_all/3&quot;&gt;&lt;code&gt;update_all/3&lt;/code&gt;&lt;/a&gt;, and friends will be defined.</source>
          <target state="translated">By passing the &lt;code&gt;:read_only&lt;/code&gt; option, none of the functions that perform write operations, such as &lt;a href=&quot;#c:insert/2&quot;&gt; &lt;code&gt;insert/2&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#c:insert_all/3&quot;&gt; &lt;code&gt;insert_all/3&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#c:update_all/3&quot;&gt; &lt;code&gt;update_all/3&lt;/code&gt; &lt;/a&gt;, and friends will be defined.</target>
        </trans-unit>
        <trans-unit id="fc5e58f6ff24d96d8e1ca4804c017b524da88c87" translate="yes" xml:space="preserve">
          <source>By pattern matching on the result we can differentiate different conditions:</source>
          <target state="translated">결과에 대한 패턴 일치를 통해 다양한 조건을 차별화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd7b6be11c6c28e20310f4737672f3064202b8e2" translate="yes" xml:space="preserve">
          <source>By preloading an association using a custom query you can confine the behavior of &lt;a href=&quot;#cast_assoc/3&quot;&gt;&lt;code&gt;cast_assoc/3&lt;/code&gt;&lt;/a&gt;. This opens up the possibility to work on a subset of the data, instead of all associations in the database.</source>
          <target state="translated">사용자 정의 조회를 사용하여 연관을 사전로드하면 &lt;a href=&quot;#cast_assoc/3&quot;&gt; &lt;code&gt;cast_assoc/3&lt;/code&gt; &lt;/a&gt; 의 동작을 제한 할 수 있습니다 . 이것은 데이터베이스의 모든 연관 대신에 데이터의 서브 세트에서 작업 할 가능성을 열어줍니다.</target>
        </trans-unit>
        <trans-unit id="8e673cd4ab0a0e5f4be3dfe7dce5d6983c785cd5" translate="yes" xml:space="preserve">
          <source>By subscribing to the topic, we can use &lt;a href=&quot;#assert_broadcast/3&quot;&gt;&lt;code&gt;assert_broadcast/3&lt;/code&gt;&lt;/a&gt; to verify a message has been sent through the pubsub layer.</source>
          <target state="translated">주제를 구독하면 &lt;a href=&quot;#assert_broadcast/3&quot;&gt; &lt;code&gt;assert_broadcast/3&lt;/code&gt; &lt;/a&gt; 를 사용하여 메시지가 pubsub 레이어를 통해 전송되었는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30e8b6877367ea06f0a354b20f564c6bed06a78f" translate="yes" xml:space="preserve">
          <source>CSRF Protection</source>
          <target state="translated">CSRF 보호</target>
        </trans-unit>
        <trans-unit id="c9df88380d1dd3b25943e604a5a2f036a0a907bb" translate="yes" xml:space="preserve">
          <source>CSRF protection</source>
          <target state="translated">CSRF 보호</target>
        </trans-unit>
        <trans-unit id="d5fee4e9e6db4d2f1fdc95f2b2f4a8761758bd65" translate="yes" xml:space="preserve">
          <source>Cache mechanisms</source>
          <target state="translated">캐시 메커니즘</target>
        </trans-unit>
        <trans-unit id="f09eed70310275a028d61c137230810723d6a233" translate="yes" xml:space="preserve">
          <source>Cache query metadata</source>
          <target state="translated">캐시 쿼리 메타 데이터</target>
        </trans-unit>
        <trans-unit id="ecc64d6e4ad82a6e9d7bfc0b0383a45d3af2b452" translate="yes" xml:space="preserve">
          <source>Cache query metadata that is passed to &lt;a href=&quot;#c:execute/5&quot;&gt;&lt;code&gt;execute/5&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Cache query metadata that is passed to &lt;a href=&quot;#c:execute/5&quot;&gt; &lt;code&gt;execute/5&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="48398225bbff206393302c005c06fcbdd9039c32" translate="yes" xml:space="preserve">
          <source>Calculate the given &lt;code&gt;aggregate&lt;/code&gt; over the given &lt;code&gt;field&lt;/code&gt;</source>
          <target state="translated">주어진 &lt;code&gt;field&lt;/code&gt; 대해 주어진 &lt;code&gt;aggregate&lt;/code&gt; 를 계산</target>
        </trans-unit>
        <trans-unit id="b72c65ee7e44cc973d557eb132bd0a8e45fcd8e0" translate="yes" xml:space="preserve">
          <source>Calculate the given &lt;code&gt;aggregate&lt;/code&gt; over the given &lt;code&gt;field&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;field&lt;/code&gt; 대해 주어진 &lt;code&gt;aggregate&lt;/code&gt; 를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="fef3963b2932aeb8fa841bfd89ca5f61f2bbc9b4" translate="yes" xml:space="preserve">
          <source>Calculate the given &lt;code&gt;aggregate&lt;/code&gt;.</source>
          <target state="translated">Calculate the given &lt;code&gt;aggregate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f33ada32fda260381cb7928e58ebbc783a59470" translate="yes" xml:space="preserve">
          <source>Calculates the average for the given entry</source>
          <target state="translated">주어진 항목에 대한 평균을 계산</target>
        </trans-unit>
        <trans-unit id="8baedf935b7484427c37b3b58d7a6070653c5e22" translate="yes" xml:space="preserve">
          <source>Calculates the average for the given entry.</source>
          <target state="translated">주어진 항목의 평균을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="a460f7839239c78344810ed4fdb957f96e65e250" translate="yes" xml:space="preserve">
          <source>Calculates the maximum for the given entry</source>
          <target state="translated">주어진 항목의 최대 값을 계산합니다</target>
        </trans-unit>
        <trans-unit id="afe02f125fcee88cdab42d83a2afbfd814eca2cd" translate="yes" xml:space="preserve">
          <source>Calculates the maximum for the given entry.</source>
          <target state="translated">주어진 항목의 최대 값을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="95498afa39bf4d0b12b115d63e8fce6b69579abe" translate="yes" xml:space="preserve">
          <source>Calculates the minimum for the given entry</source>
          <target state="translated">주어진 항목에 대한 최소값을 계산합니다</target>
        </trans-unit>
        <trans-unit id="2d13608c2125ea28acdc9d31a66697e03fe7c6a7" translate="yes" xml:space="preserve">
          <source>Calculates the minimum for the given entry.</source>
          <target state="translated">주어진 항목에 대한 최소값을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="135e5a276ffc4d7b681841fc4f3cad6bc49c7edc" translate="yes" xml:space="preserve">
          <source>Calculates the sum for the given entry</source>
          <target state="translated">주어진 항목에 대한 합계를 계산합니다</target>
        </trans-unit>
        <trans-unit id="dc20f2648334718a3dd5af85d7705b07facd7151" translate="yes" xml:space="preserve">
          <source>Calculates the sum for the given entry.</source>
          <target state="translated">주어진 항목의 합계를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="9c55980c2341959b5f21335c4bd5c0891fa74196" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;ecto.type#c:embed_as/1&quot;&gt;&lt;code&gt;Ecto.Type.embed_as/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Callback implementation for &lt;a href=&quot;ecto.type#c:embed_as/1&quot;&gt; &lt;code&gt;Ecto.Type.embed_as/1&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ec3adcd8037a9604f9cd349ab4d20dc5a17412f7" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;ecto.type#c:equal?/2&quot;&gt;&lt;code&gt;Ecto.Type.equal?/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Callback implementation for &lt;a href=&quot;ecto.type#c:equal?/2&quot;&gt; &lt;code&gt;Ecto.Type.equal?/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d12af7746d2dd412b78d3fae8ef21a84dd3affb8" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#c:fetch/2&quot;&gt;&lt;code&gt;Access.fetch/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#c:fetch/2&quot;&gt; &lt;code&gt;Access.fetch/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="54edfce776f3272812893f8747f90228568372f7" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#c:get_and_update/3&quot;&gt;&lt;code&gt;Access.get_and_update/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#c:get_and_update/3&quot;&gt; &lt;code&gt;Access.get_and_update/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f613055a34d5b0cc54d3942a8067e73b97f688f0" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#c:pop/2&quot;&gt;&lt;code&gt;Access.pop/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#c:pop/2&quot;&gt; &lt;code&gt;Access.pop/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d0f41563b10c703cb7b2e9ba5e91a7b2ccbecf74" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#c:start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#c:start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d39e0ddeef9186f868e4ff28dde24c9443d6a437" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:blame/2&quot;&gt;&lt;code&gt;Exception.blame/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:blame/2&quot;&gt; &lt;code&gt;Exception.blame/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="68c58dafe95ef3747136785a32cb0be3190d5a95" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:exception/1&quot;&gt;&lt;code&gt;Exception.exception/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:exception/1&quot;&gt; &lt;code&gt;Exception.exception/1&lt;/code&gt; 의&lt;/a&gt; 콜백 구현</target>
        </trans-unit>
        <trans-unit id="f2aeddeb86c19d9930349a6b7fa2dda563422a7d" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:exception/1&quot;&gt;&lt;code&gt;Exception.exception/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:exception/1&quot;&gt; &lt;code&gt;Exception.exception/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="032a4efc6854da59dd9e469ea8f84cad45395207" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:message/1&quot;&gt;&lt;code&gt;Exception.message/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:message/1&quot;&gt; &lt;code&gt;Exception.message/1&lt;/code&gt; 의&lt;/a&gt; 콜백 구현</target>
        </trans-unit>
        <trans-unit id="1218946b31c04832e0e62cf1bdb9c7d81085c97b" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:message/1&quot;&gt;&lt;code&gt;Exception.message/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:message/1&quot;&gt; &lt;code&gt;Exception.message/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="043fff358e410d756d69b64693e0aee209f5665a" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:init/1&quot;&gt;&lt;code&gt;GenServer.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:init/1&quot;&gt; &lt;code&gt;GenServer.init/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3cdf88d24ddc0b7e4c16c41e315078007b184333" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#c:init/1&quot;&gt;&lt;code&gt;Supervisor.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#c:init/1&quot;&gt; &lt;code&gt;Supervisor.init/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e47ec3f11d8a914105cb3fef07dbb6ed1c63a4d8" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;phoenix.socket.transport#c:default_config/0&quot;&gt;&lt;code&gt;Phoenix.Socket.Transport.default_config/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;phoenix.socket.transport#c:default_config/0&quot;&gt; &lt;code&gt;Phoenix.Socket.Transport.default_config/0&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a1708e191eed33380ca67b6028fd8573fdbb644c" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;phoenix.template.engine#c:compile/2&quot;&gt;&lt;code&gt;Phoenix.Template.Engine.compile/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phoenix.template.engine#c:compile/2&quot;&gt; &lt;code&gt;Phoenix.Template.Engine.compile/2&lt;/code&gt; 에&lt;/a&gt; 대한 콜백 구현</target>
        </trans-unit>
        <trans-unit id="ea5ea27a2af7e749a7ba629623c5843bcae054f6" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;phoenix.template.engine#c:compile/2&quot;&gt;&lt;code&gt;Phoenix.Template.Engine.compile/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;phoenix.template.engine#c:compile/2&quot;&gt; &lt;code&gt;Phoenix.Template.Engine.compile/2&lt;/code&gt; 에&lt;/a&gt; 대한 콜백 구현 .</target>
        </trans-unit>
        <trans-unit id="4b21277ad35de9d0bbc697bf34687df68d1dd7ec" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug#c:call/2&quot;&gt;&lt;code&gt;Plug.call/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;plug#c:call/2&quot;&gt; &lt;code&gt;Plug.call/2&lt;/code&gt; 의&lt;/a&gt; 콜백 구현</target>
        </trans-unit>
        <trans-unit id="ae8f3a29268323ceeca5abc36851ba2c103c086b" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug#c:call/2&quot;&gt;&lt;code&gt;Plug.call/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug#c:call/2&quot;&gt; &lt;code&gt;Plug.call/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6712d82f4b88479c43c2c73eaf562611fb7e23fa" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug#c:init/1&quot;&gt;&lt;code&gt;Plug.init/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;plug#c:init/1&quot;&gt; &lt;code&gt;Plug.init/1&lt;/code&gt; 의&lt;/a&gt; 콜백 구현</target>
        </trans-unit>
        <trans-unit id="022af9f513221b7f1f63492515611dcd449eb5e8" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug#c:init/1&quot;&gt;&lt;code&gt;Plug.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug#c:init/1&quot;&gt; &lt;code&gt;Plug.init/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6457b9900e28960d880713e0be6cfde4ec5db930" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug.parsers#c:init/1&quot;&gt;&lt;code&gt;Plug.Parsers.init/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;plug.parsers#c:init/1&quot;&gt; &lt;code&gt;Plug.Parsers.init/1&lt;/code&gt; 의&lt;/a&gt; 콜백 구현</target>
        </trans-unit>
        <trans-unit id="c66ea58bed6e4b9609840eaf39b2b719bd12d7ac" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug.parsers#c:init/1&quot;&gt;&lt;code&gt;Plug.Parsers.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug.parsers#c:init/1&quot;&gt; &lt;code&gt;Plug.Parsers.init/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="99de215287a8ed32e9b3a733cfa29574666cd932" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug.parsers#c:parse/5&quot;&gt;&lt;code&gt;Plug.Parsers.parse/5&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug.parsers#c:parse/5&quot;&gt; &lt;code&gt;Plug.Parsers.parse/5&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b0c139f555137accf02a451a8b1663007120c24c" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug.session.store#c:delete/3&quot;&gt;&lt;code&gt;Plug.Session.Store.delete/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug.session.store#c:delete/3&quot;&gt; &lt;code&gt;Plug.Session.Store.delete/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ce7ff51daa4d07514d97a7f84deeb51eb9f9702b" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug.session.store#c:get/3&quot;&gt;&lt;code&gt;Plug.Session.Store.get/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug.session.store#c:get/3&quot;&gt; &lt;code&gt;Plug.Session.Store.get/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="743aca979f7635146ef099e5301227c6a2bd0171" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug.session.store#c:init/1&quot;&gt;&lt;code&gt;Plug.Session.Store.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug.session.store#c:init/1&quot;&gt; &lt;code&gt;Plug.Session.Store.init/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="54dabbe6b1c738df92a743cc1b137377ef2dc1db" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;plug.session.store#c:put/4&quot;&gt;&lt;code&gt;Plug.Session.Store.put/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;a href=&quot;plug.session.store#c:put/4&quot;&gt; &lt;code&gt;Plug.Session.Store.put/4&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6d2edbcfbb5ce6be0b7a5d8fb89fc814b48c2518" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;code&gt;c:Ecto.Association.on_repo_change/5&lt;/code&gt;.</source>
          <target state="translated">에 대한 콜백 구현 &lt;code&gt;c:Ecto.Association.on_repo_change/5&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="07b60a7f444177c89dd1e016b817202d912a922b" translate="yes" xml:space="preserve">
          <source>Callback invoked to start the supervisor and during hot code upgrades</source>
          <target state="translated">수퍼바이저를 시작하고 핫 코드 업그레이드 중에 콜백이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="9fbe07680545fab8c38f764f99ebaad2d192e475" translate="yes" xml:space="preserve">
          <source>Callback invoked to start the supervisor and during hot code upgrades.</source>
          <target state="translated">수퍼바이저를 시작하고 핫 코드 업그레이드 중에 콜백이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="e40111572fe515536aee3325186cd5acdee91825" translate="yes" xml:space="preserve">
          <source>Callback to start the Cowboy endpoint</source>
          <target state="translated">카우보이 엔드 포인트를 시작하기위한 콜백</target>
        </trans-unit>
        <trans-unit id="f3236f24f016b3d9c0833c991bdcf855546f8e62" translate="yes" xml:space="preserve">
          <source>Callback to start the Cowboy endpoint.</source>
          <target state="translated">카우보이 엔드 포인트를 시작하기위한 콜백</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="d0fbe0f7bb361f1569fe6ed513feb13674ba7d95" translate="yes" xml:space="preserve">
          <source>Callbacks are invoked in the reverse order they are defined (callbacks defined first are invoked last).</source>
          <target state="translated">콜백은 정의 된 역순으로 호출됩니다 (먼저 정의 된 콜백이 마지막에 호출 됨).</target>
        </trans-unit>
        <trans-unit id="5cbc1e632b5dae84c35ee72ee8e331091acf6f0f" translate="yes" xml:space="preserve">
          <source>Callbacks cycle</source>
          <target state="translated">콜백주기</target>
        </trans-unit>
        <trans-unit id="dbbd41fef703690543f89a69dc32d3a42905a61c" translate="yes" xml:space="preserve">
          <source>Called as needed and after merges.</source>
          <target state="translated">필요에 따라 및 병합 후 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1c4fe82ac39bdc87aed411ead9e3ccd0583d7d31" translate="yes" xml:space="preserve">
          <source>Called to autogenerate a value for id/embed_id/binary_id</source>
          <target state="translated">id / embed_id / binary_id의 값을 자동 생성하기 위해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="8f68520c1312f30f81829bba3fe8b77ba247f167" translate="yes" xml:space="preserve">
          <source>Called to autogenerate a value for id/embed_id/binary_id.</source>
          <target state="translated">id / embed_id / binary_id의 값을 자동 생성하기 위해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="807d052993a5d1a26888e1636080fc2b67e8ed03" translate="yes" xml:space="preserve">
          <source>Called when an application is started</source>
          <target state="translated">응용 프로그램이 시작될 때 호출</target>
        </trans-unit>
        <trans-unit id="f0ca56a7a06bc47a8cf3a0a7612d281facc7aec4" translate="yes" xml:space="preserve">
          <source>Called when an application is started.</source>
          <target state="translated">응용 프로그램이 시작될 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="ce2d907fe48d4de6aa4d76bcc22f81b26e6168bd" translate="yes" xml:space="preserve">
          <source>Callers should only subscribe to a given topic a single time. Duplicate subscriptions for a Pid/topic pair are allowed and will cause duplicate events to be sent; however, when using &lt;a href=&quot;phoenix.pubsub#unsubscribe/2&quot;&gt;&lt;code&gt;Phoenix.PubSub.unsubscribe/2&lt;/code&gt;&lt;/a&gt;, all duplicate subscriptions will be dropped.</source>
          <target state="translated">Callers should only subscribe to a given topic a single time. Duplicate subscriptions for a Pid/topic pair are allowed and will cause duplicate events to be sent; however, when using &lt;a href=&quot;phoenix.pubsub#unsubscribe/2&quot;&gt; &lt;code&gt;Phoenix.PubSub.unsubscribe/2&lt;/code&gt; &lt;/a&gt;, all duplicate subscriptions will be dropped.</target>
        </trans-unit>
        <trans-unit id="7c9a634c7a8d3becce10c69bdfff8821034955bf" translate="yes" xml:space="preserve">
          <source>Callers should only subscribe to a given topic a single time. Duplicate subscriptions for a Pid/topic pair are allowed and will cause duplicate events to be sent; however, when using &lt;a href=&quot;phoenix.pubsub#unsubscribe/3&quot;&gt;&lt;code&gt;Phoenix.PubSub.unsubscribe/3&lt;/code&gt;&lt;/a&gt;, all duplicate subscriptions will be dropped.</source>
          <target state="translated">발신자는 주어진 주제에 한 번만 구독해야합니다. Pid / topic 쌍에 대한 중복 구독이 허용되며 중복 이벤트가 전송됩니다. 그러나 &lt;a href=&quot;phoenix.pubsub#unsubscribe/3&quot;&gt; &lt;code&gt;Phoenix.PubSub.unsubscribe/3&lt;/code&gt; 를 사용&lt;/a&gt; 하면 모든 중복 구독이 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="7fe75a5900b2020c4e0694bc0f4aaeb8dac07e20" translate="yes" xml:space="preserve">
          <source>Calls the Endpoint and Router pipelines for the current route.</source>
          <target state="translated">Calls the Endpoint and Router pipelines for the current route.</target>
        </trans-unit>
        <trans-unit id="9b37b3a10ada22f7da28908a66918d9fb5908b72" translate="yes" xml:space="preserve">
          <source>Calls the Endpoint and Router pipelines.</source>
          <target state="translated">Calls the Endpoint and Router pipelines.</target>
        </trans-unit>
        <trans-unit id="51473715b3055d8b5369d919c4ebe6516370cc8a" translate="yes" xml:space="preserve">
          <source>Calls the Endpoint and bypasses Router match</source>
          <target state="translated">엔드 포인트를 호출하고 라우터 일치를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="370acfef3703e3f90e392daddd10376201a01d84" translate="yes" xml:space="preserve">
          <source>Calls the Endpoint and bypasses Router match.</source>
          <target state="translated">엔드 포인트를 호출하고 라우터 일치를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="2c8a321e9e8f0812c9a814f2adbd7dffb9fb3d96" translate="yes" xml:space="preserve">
          <source>Calls the Endpoint and the given Router pipelines.</source>
          <target state="translated">Calls the Endpoint and the given Router pipelines.</target>
        </trans-unit>
        <trans-unit id="88e062532b66a1ad5e10fd38139c1c81ab87fb66" translate="yes" xml:space="preserve">
          <source>Can return &lt;code&gt;:up&lt;/code&gt;, &lt;code&gt;:down&lt;/code&gt; or &lt;code&gt;{:error, term}&lt;/code&gt; in case anything goes wrong.</source>
          <target state="translated">Can return &lt;code&gt;:up&lt;/code&gt; , &lt;code&gt;:down&lt;/code&gt; or &lt;code&gt;{:error, term}&lt;/code&gt; in case anything goes wrong.</target>
        </trans-unit>
        <trans-unit id="a5c2f31f12329b480874d41c2cb0a6bf9acc6f3c" translate="yes" xml:space="preserve">
          <source>Case sensitivity</source>
          <target state="translated">대소 문자 구분</target>
        </trans-unit>
        <trans-unit id="e0f540f92c7222f2992e0ffca4cb3124cdab0766" translate="yes" xml:space="preserve">
          <source>Casting</source>
          <target state="translated">Casting</target>
        </trans-unit>
        <trans-unit id="db6a2272ded0700644f24cfe5b5b0309474bb690" translate="yes" xml:space="preserve">
          <source>Casts a value to the given type</source>
          <target state="translated">주어진 유형으로 값을 캐스트</target>
        </trans-unit>
        <trans-unit id="3b890ef0afa0f6d0ec2387b3100aa57cd59d471f" translate="yes" xml:space="preserve">
          <source>Casts a value to the given type.</source>
          <target state="translated">주어진 유형으로 값을 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="39961a9c776d161601bfe01b5f9a4f0958708e12" translate="yes" xml:space="preserve">
          <source>Casts the given association with the changeset parameters</source>
          <target state="translated">주어진 변경 세트 매개 변수와의 연관성을 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="be9379c9eea53b656902efc6e1b5e1e99a20af64" translate="yes" xml:space="preserve">
          <source>Casts the given association with the changeset parameters.</source>
          <target state="translated">변경 세트 매개 변수와의 지정된 연관성을 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="e95ccfe299647f87c0cba2bbfe94e26e86ce5050" translate="yes" xml:space="preserve">
          <source>Casts the given embed with the changeset parameters</source>
          <target state="translated">변경 세트 매개 변수를 사용하여 지정된 임베드를 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="f7f50157aaf9bbd054614b39e14e8c260e3e785a" translate="yes" xml:space="preserve">
          <source>Casts the given embed with the changeset parameters.</source>
          <target state="translated">주어진 임베디드를 변경 세트 매개 변수와 함께 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="98f8af8a0284595a1a3d48928fba619382632646" translate="yes" xml:space="preserve">
          <source>Casts the given input to the custom type</source>
          <target state="translated">주어진 입력을 커스텀 타입으로 캐스트</target>
        </trans-unit>
        <trans-unit id="8755ddad47681604b78b876fd901374c259a26c8" translate="yes" xml:space="preserve">
          <source>Casts the given input to the custom type.</source>
          <target state="translated">지정된 입력을 사용자 정의 유형으로 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="c0dc7b80874914239cf81ad7d06a8bba507b97e8" translate="yes" xml:space="preserve">
          <source>Casts the given value to the given type at the database level</source>
          <target state="translated">데이터베이스 수준에서 주어진 값을 주어진 유형으로 캐스트</target>
        </trans-unit>
        <trans-unit id="d48a0c8cc72b886950ec9ba2adae18a1f5adf08f" translate="yes" xml:space="preserve">
          <source>Casts the given value to the given type at the database level.</source>
          <target state="translated">데이터베이스 수준에서 지정된 값을 지정된 유형으로 캐스팅합니다.</target>
        </trans-unit>
        <trans-unit id="e8438762801637aaa4831a4bdbf6654a398aeee5" translate="yes" xml:space="preserve">
          <source>Casts to UUID</source>
          <target state="translated">UUID로 캐스트</target>
        </trans-unit>
        <trans-unit id="314cfcee4efb4546ed893c42c5d11295a20cc005" translate="yes" xml:space="preserve">
          <source>Casts to UUID.</source>
          <target state="translated">UUID로 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="712fa742793fb2c31cc8448917481b50249986ba" translate="yes" xml:space="preserve">
          <source>Causes the multi to fail with the given value</source>
          <target state="translated">주어진 값으로 멀티가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="aacc9b97d22fcfe1b20f63b5787c16d8ed4f97e2" translate="yes" xml:space="preserve">
          <source>Causes the multi to fail with the given value.</source>
          <target state="translated">주어진 값으로 멀티가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="1a9a7a310e9346ab3eec5877a2adbd3127520d90" translate="yes" xml:space="preserve">
          <source>Changed attributes will only be added if the change does not have the same value as the field in the data.</source>
          <target state="translated">변경된 속성은 변경 내용이 데이터의 필드와 동일한 값을 갖지 않는 경우에만 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="3f55b9615f358dd1b0d1cd5f8bd5031b0d7c32d5" translate="yes" xml:space="preserve">
          <source>Changes all empty parameters to nils (&quot;&quot; -&amp;gt; nil)</source>
          <target state="translated">Changes all empty parameters to nils (&quot;&quot; -&amp;gt; nil)</target>
        </trans-unit>
        <trans-unit id="1240b51d036bf14642c6213923da9a6da0fcd9a6" translate="yes" xml:space="preserve">
          <source>Changes all empty parameters to nils (&amp;ldquo;&amp;rdquo; -&amp;gt; nil).</source>
          <target state="translated">모든 빈 매개 변수를 nil ( &quot;&quot;-&amp;gt; nil)로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="e85e8376066e6efa07d004cd93aa1d6c124968fb" translate="yes" xml:space="preserve">
          <source>Changes empty parameters of &lt;code&gt;required_key&lt;/code&gt; (recursively) to nils</source>
          <target state="translated">&lt;code&gt;required_key&lt;/code&gt; 의 빈 매개 변수를 (재귀 적으로) nil로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="ba2dbae392ef539a56ff20bd536d56826af3e21a" translate="yes" xml:space="preserve">
          <source>Changeset actions</source>
          <target state="translated">변경 조치</target>
        </trans-unit>
        <trans-unit id="4ff4e9ed29935614b3b0a4860d00f7c7fab653fd" translate="yes" xml:space="preserve">
          <source>Changesets</source>
          <target state="translated">Changesets</target>
        </trans-unit>
        <trans-unit id="15fe687723b50a7f1c89b99b8e32c64ca13bf776" translate="yes" xml:space="preserve">
          <source>Changesets allow developers to filter, cast, and validate changes before we apply them to the data. Imagine the given schema:</source>
          <target state="translated">개발자는 변경 세트를 사용하여 변경 사항을 데이터에 적용하기 전에 필터링, 캐스트 및 유효성 검사를 수행 할 수 있습니다. 주어진 스키마를 상상해보십시오.</target>
        </trans-unit>
        <trans-unit id="106dc8111d962bf3fa4d30e3e04971c906cf60bd" translate="yes" xml:space="preserve">
          <source>Changesets allow filtering, casting, validation and definition of constraints when manipulating structs.</source>
          <target state="translated">변경 세트를 사용하면 구조체를 조작 할 때 제약 조건을 필터링, 캐스팅, 유효성 검사 및 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4826b62fc4c9e7e5326175150a971664f8ce5fbd" translate="yes" xml:space="preserve">
          <source>Changesets allow working with both kinds of data:</source>
          <target state="translated">변경 세트를 사용하면 두 가지 유형의 데이터 모두에서 작업 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97d4b08927d9aa72714889f4f73366760107150c" translate="yes" xml:space="preserve">
          <source>Changesets are also capable of transforming database constraints, like unique indexes and foreign key checks, into errors. Allowing developers to keep their database consistent while still providing proper feedback to end users. Check &lt;a href=&quot;ecto.changeset#unique_constraint/3&quot;&gt;&lt;code&gt;Ecto.Changeset.unique_constraint/3&lt;/code&gt;&lt;/a&gt; for some examples as well as the other &lt;code&gt;_constraint&lt;/code&gt; functions.</source>
          <target state="translated">변경 집합은 고유 인덱스 및 외래 키 검사와 같은 데이터베이스 제약 조건을 오류로 변환 할 수도 있습니다. 개발자가 최종 사용자에게 적절한 피드백을 제공하면서 데이터베이스의 일관성을 유지할 수 있습니다. 일부 예제와 다른 &lt;code&gt;_constraint&lt;/code&gt; 함수 는 &lt;a href=&quot;ecto.changeset#unique_constraint/3&quot;&gt; &lt;code&gt;Ecto.Changeset.unique_constraint/3&lt;/code&gt; &lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="eaabb4b1610b2670ddb90bb9b3f51b64b7f6fc71" translate="yes" xml:space="preserve">
          <source>Changesets can also be used with data in a plain map, by following the same API:</source>
          <target state="translated">동일한 API에 따라 일반 맵의 데이터와 함께 변경 세트를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f35e945b11b533c908a172bde59cd90a6810e709" translate="yes" xml:space="preserve">
          <source>Changesets do not support this type of constraints. When working with deferred constraints, a violation while invoking &lt;code&gt;Repo.insert/2&lt;/code&gt; or &lt;code&gt;Repo.update/2&lt;/code&gt; won&amp;rsquo;t return &lt;code&gt;{:error, changeset}&lt;/code&gt;, but rather raise an error at the end of the transaction.</source>
          <target state="translated">변경 세트는이 유형의 제약 조건을 지원하지 않습니다. 지연된 제약 조건으로 작업 할 때 &lt;code&gt;Repo.insert/2&lt;/code&gt; 또는 &lt;code&gt;Repo.update/2&lt;/code&gt; 를 호출하는 동안 위반 하면 &lt;code&gt;{:error, changeset}&lt;/code&gt; 반환되지 않고 트랜잭션이 끝날 때 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="53fb625fd2838e7e76530b2f06cf50c9d96a7cdb" translate="yes" xml:space="preserve">
          <source>Changesets do not support this type of constraints. When working with deferred constraints, a violation while invoking &lt;code&gt;Repo.insert/2&lt;/code&gt; or &lt;code&gt;Repo.update/2&lt;/code&gt; won't return &lt;code&gt;{:error, changeset}&lt;/code&gt;, but rather raise an error at the end of the transaction.</source>
          <target state="translated">Changesets do not support this type of constraints. When working with deferred constraints, a violation while invoking &lt;code&gt;Repo.insert/2&lt;/code&gt; or &lt;code&gt;Repo.update/2&lt;/code&gt; won't return &lt;code&gt;{:error, changeset}&lt;/code&gt; , but rather raise an error at the end of the transaction.</target>
        </trans-unit>
        <trans-unit id="a4d719c687cbb64610b4daa85e8756d9334b9d25" translate="yes" xml:space="preserve">
          <source>Changesets have an action field which is usually set by &lt;a href=&quot;ecto.repo&quot;&gt;&lt;code&gt;Ecto.Repo&lt;/code&gt;&lt;/a&gt; whenever one of the operations such as &lt;code&gt;insert&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; is called:</source>
          <target state="translated">변경 세트 에는 &lt;code&gt;insert&lt;/code&gt; 또는 &lt;code&gt;update&lt;/code&gt; 와 같은 조작 중 하나 가 &lt;a href=&quot;ecto.repo&quot;&gt; &lt;code&gt;Ecto.Repo&lt;/code&gt; &lt;/a&gt; 될 때마다 일반적으로 Ecto.Repo에 의해 설정되는 조치 필드 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="24788605a643b294a485fe7186f622e7d307dc0a" translate="yes" xml:space="preserve">
          <source>Channel testing</source>
          <target state="translated">채널 테스트</target>
        </trans-unit>
        <trans-unit id="e554fb4eb7fab7c704e73d8c51fda0b3df2886d9" translate="yes" xml:space="preserve">
          <source>Channels can reply, synchronously, to any &lt;code&gt;handle_in/3&lt;/code&gt; event. To match pushes with replies, clients must include a unique &lt;code&gt;ref&lt;/code&gt; with every message and the channel server will reply with a matching ref where the client can pick up the callback for the matching reply.</source>
          <target state="translated">채널은 모든 &lt;code&gt;handle_in/3&lt;/code&gt; 이벤트에 동기식으로 응답 할 수 있습니다 . 회신과 푸시를 일치 시키려면 클라이언트가 모든 메시지에 고유 한 &lt;code&gt;ref&lt;/code&gt; 를 포함해야 하며 채널 서버는 클라이언트가 일치하는 응답에 대한 콜백을 선택할 수있는 일치하는 참조로 응답합니다.</target>
        </trans-unit>
        <trans-unit id="aa5494fe46265f9955154bc7bf0d7c3b9f070d29" translate="yes" xml:space="preserve">
          <source>Channels can send two types of message back to a transport: &lt;a href=&quot;phoenix.socket.message&quot;&gt;&lt;code&gt;Phoenix.Socket.Message&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;phoenix.socket.reply&quot;&gt;&lt;code&gt;Phoenix.Socket.Reply&lt;/code&gt;&lt;/a&gt;. Those messages are encoded in the channel into a format defined by the transport. That&amp;rsquo;s why transports are required to pass a serializer that abides to the behaviour described in &lt;a href=&quot;phoenix.transports.serializer&quot;&gt;&lt;code&gt;Phoenix.Transports.Serializer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">채널은 두 가지 유형의 메시지 ( &lt;a href=&quot;phoenix.socket.message&quot;&gt; &lt;code&gt;Phoenix.Socket.Message&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;phoenix.socket.reply&quot;&gt; &lt;code&gt;Phoenix.Socket.Reply&lt;/code&gt; )를&lt;/a&gt; 전송으로 다시 보낼 수 있습니다 . 이러한 메시지는 채널에서 전송에 의해 정의 된 형식으로 인코딩됩니다. 그렇기 때문에 &lt;a href=&quot;phoenix.transports.serializer&quot;&gt; &lt;code&gt;Phoenix.Transports.Serializer&lt;/code&gt; 에&lt;/a&gt; 설명 된 동작을 따르는 직렬 변환기를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b3d27d901eb026cad065e54c8192d31e835b640f" translate="yes" xml:space="preserve">
          <source>Channels provide a means for bidirectional communication from clients that integrate with the &lt;a href=&quot;../phoenix_pubsub/1.0.2/phoenix.pubsub&quot;&gt;&lt;code&gt;Phoenix.PubSub&lt;/code&gt;&lt;/a&gt; layer for soft-realtime functionality.</source>
          <target state="translated">채널은 소프트 실시간 기능을 위해 &lt;a href=&quot;../phoenix_pubsub/1.0.2/phoenix.pubsub&quot;&gt; &lt;code&gt;Phoenix.PubSub&lt;/code&gt; &lt;/a&gt; 계층 과 통합되는 클라이언트의 양방향 통신 수단을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="c5f16f980902be918678b9a56abce231c6af160b" translate="yes" xml:space="preserve">
          <source>Channels provide a means for bidirectional communication from clients that integrate with the &lt;a href=&quot;../phoenix_pubsub/phoenix.pubsub&quot;&gt;&lt;code&gt;Phoenix.PubSub&lt;/code&gt;&lt;/a&gt; layer for soft-realtime functionality.</source>
          <target state="translated">Channels provide a means for bidirectional communication from clients that integrate with the &lt;a href=&quot;../phoenix_pubsub/phoenix.pubsub&quot;&gt; &lt;code&gt;Phoenix.PubSub&lt;/code&gt; &lt;/a&gt; layer for soft-realtime functionality.</target>
        </trans-unit>
        <trans-unit id="b2ae9471e7a712ab94fdb6bad36baf383fd99d00" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#datetime_select/3&quot;&gt;&lt;code&gt;datetime_select/3&lt;/code&gt;&lt;/a&gt; for more information on options and supported values.</source>
          <target state="translated">옵션 및 지원되는 값에 대한 자세한 내용은 &lt;a href=&quot;#datetime_select/3&quot;&gt; &lt;code&gt;datetime_select/3&lt;/code&gt; &lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="0876127fa1f23c598e6ebc5194c252ea6036daa6" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#get_csrf_token/0&quot;&gt;&lt;code&gt;get_csrf_token/0&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#delete_csrf_token/0&quot;&gt;&lt;code&gt;delete_csrf_token/0&lt;/code&gt;&lt;/a&gt; for retrieving and deleting CSRF tokens.</source>
          <target state="translated">CSRF 토큰을 검색하고 삭제 &lt;a href=&quot;#get_csrf_token/0&quot;&gt; &lt;code&gt;get_csrf_token/0&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#delete_csrf_token/0&quot;&gt; &lt;code&gt;delete_csrf_token/0&lt;/code&gt; &lt;/a&gt; 을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="36e8d73c5d9d7c1e6dd7e543b8d5b6cf640ee771" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#scope/2&quot;&gt;&lt;code&gt;scope/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#resources/4&quot;&gt;&lt;code&gt;resources/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">검사 &lt;a href=&quot;#scope/2&quot;&gt; &lt;code&gt;scope/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#resources/4&quot;&gt; &lt;code&gt;resources/4&lt;/code&gt; &lt;/a&gt; 더 많은 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78921fd5a32a35386391dc343718e4bd2cd828f9" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;ecto.schema#embeds_one/3&quot;&gt;&lt;code&gt;Ecto.Schema.embeds_one/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ecto.schema#embeds_many/3&quot;&gt;&lt;code&gt;Ecto.Schema.embeds_many/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">확인 &lt;a href=&quot;ecto.schema#embeds_one/3&quot;&gt; &lt;code&gt;Ecto.Schema.embeds_one/3&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;ecto.schema#embeds_many/3&quot;&gt; &lt;code&gt;Ecto.Schema.embeds_many/3&lt;/code&gt; &lt;/a&gt; 더 많은 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2e590821015449553f7a083a040bba81687e098" translate="yes" xml:space="preserve">
          <source>Checking side-effects</source>
          <target state="translated">부작용 확인</target>
        </trans-unit>
        <trans-unit id="6ac6252bbede5055777cad6522cdba3a204e3385" translate="yes" xml:space="preserve">
          <source>Checks for a check constraint in the given field</source>
          <target state="translated">주어진 필드에서 점검 제한 조건을 점검합니다.</target>
        </trans-unit>
        <trans-unit id="a007ae3fcb27398cfb2f8cfb88cd969c756755f6" translate="yes" xml:space="preserve">
          <source>Checks for a check constraint in the given field.</source>
          <target state="translated">주어진 필드에서 점검 제한 조건을 점검합니다.</target>
        </trans-unit>
        <trans-unit id="18d676cde979db601a52e91aaaf4476188fb0ed4" translate="yes" xml:space="preserve">
          <source>Checks for a unique constraint in the given field</source>
          <target state="translated">주어진 필드에서 고유 제약 조건을 확인합니다</target>
        </trans-unit>
        <trans-unit id="649662d24fed594a5b98f75686d3faa9f43db79a" translate="yes" xml:space="preserve">
          <source>Checks for a unique constraint in the given field or list of fields.</source>
          <target state="translated">Checks for a unique constraint in the given field or list of fields.</target>
        </trans-unit>
        <trans-unit id="aa59f930724fcdea67d084d926d28fc4c15f4c03" translate="yes" xml:space="preserve">
          <source>Checks for a unique constraint in the given field.</source>
          <target state="translated">주어진 필드에서 고유 제한 조건을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="1806f8814a9a2a5f10b61db2ed93331ad1ccc220" translate="yes" xml:space="preserve">
          <source>Checks for an exclusion constraint in the given field</source>
          <target state="translated">주어진 필드에서 제외 제약 조건을 확인합니다</target>
        </trans-unit>
        <trans-unit id="fa586f48c4ea975ae752e15729708ae4eb86c327" translate="yes" xml:space="preserve">
          <source>Checks for an exclusion constraint in the given field.</source>
          <target state="translated">주어진 필드에서 제외 제약 조건을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="75666e8b3dce3b6bb93ea5456967b9687a782186" translate="yes" xml:space="preserve">
          <source>Checks for foreign key constraint in the given field</source>
          <target state="translated">주어진 필드에서 외래 키 제약 조건을 확인합니다</target>
        </trans-unit>
        <trans-unit id="b3b2e641330818474410be9363a7acfdf6f7e027" translate="yes" xml:space="preserve">
          <source>Checks for foreign key constraint in the given field.</source>
          <target state="translated">주어진 필드에서 외래 키 제약 조건을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5fa1bef6695916bf62ca3fc0e50a6cca0de72c75" translate="yes" xml:space="preserve">
          <source>Checks if Endpoint&amp;rsquo;s web server has been configured to start</source>
          <target state="translated">엔드 포인트의 웹 서버가 시작되도록 구성되어 있는지 확인</target>
        </trans-unit>
        <trans-unit id="771534d55fe1b3aac38a312bfe67507aff81041f" translate="yes" xml:space="preserve">
          <source>Checks if Endpoint&amp;rsquo;s web server has been configured to start.</source>
          <target state="translated">엔드 포인트의 웹 서버가 시작되도록 구성되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="847a3f2e0a09c5f75b7436eacfe07fdda8f96913" translate="yes" xml:space="preserve">
          <source>Checks if Endpoint's web server has been configured to start.</source>
          <target state="translated">Checks if Endpoint's web server has been configured to start.</target>
        </trans-unit>
        <trans-unit id="963f346febde4845b780cb252e5679ea119288ec" translate="yes" xml:space="preserve">
          <source>Checks if a given type matches with a primitive type that can be found in queries</source>
          <target state="translated">주어진 유형이 쿼리에서 찾을 수있는 기본 유형과 일치하는지 확인</target>
        </trans-unit>
        <trans-unit id="5e9a8212ae6f7073ddffb09a0d0e0eae45982cea" translate="yes" xml:space="preserve">
          <source>Checks if a given type matches with a primitive type that can be found in queries.</source>
          <target state="translated">주어진 유형이 쿼리에서 찾을 수있는 기본 유형과 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="c8de4dbd68477598dffed3dcaf6a30c4ed80304c" translate="yes" xml:space="preserve">
          <source>Checks if an association is loaded</source>
          <target state="translated">연결이로드되었는지 확인</target>
        </trans-unit>
        <trans-unit id="6d1a314f9be25f92609b0bf832c30f5da98f3a76" translate="yes" xml:space="preserve">
          <source>Checks if an association is loaded.</source>
          <target state="translated">연결이로드되었는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="92874536f2bd61a01795ca88b0a59254d1460cf5" translate="yes" xml:space="preserve">
          <source>Checks if set has a non-empty delta</source>
          <target state="translated">세트에 비어 있지 않은 델타가 있는지 확인</target>
        </trans-unit>
        <trans-unit id="5da5d365962f5490f61e15a84082285451a63d49" translate="yes" xml:space="preserve">
          <source>Checks if set has a non-empty delta.</source>
          <target state="translated">세트에 비어 있지 않은 델타가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b45c07482c336ba440a9fdb88056674d4c21bc6b" translate="yes" xml:space="preserve">
          <source>Checks if the given atom can be used as base type</source>
          <target state="translated">주어진 원자가 기본 유형으로 사용될 수 있는지 확인</target>
        </trans-unit>
        <trans-unit id="f3e31e2d1943a777f5e51ad6c5913e9026f39c24" translate="yes" xml:space="preserve">
          <source>Checks if the given atom can be used as base type.</source>
          <target state="translated">주어진 원자를 기본 유형으로 사용할 수 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f087876ed1366027b27ce3f6d468eff9f6993be5" translate="yes" xml:space="preserve">
          <source>Checks if the given atom can be used as composite type</source>
          <target state="translated">주어진 원자가 복합 유형으로 사용될 수 있는지 확인</target>
        </trans-unit>
        <trans-unit id="c182b160ab8eb55a3f19b370e22b4a383096218f" translate="yes" xml:space="preserve">
          <source>Checks if the given atom can be used as composite type.</source>
          <target state="translated">주어진 원자를 복합 유형으로 사용할 수 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ec2ead142ebe4a2acd898e340f5a641a34de0cd1" translate="yes" xml:space="preserve">
          <source>Checks if the given value is nil</source>
          <target state="translated">주어진 값이 nil인지 확인</target>
        </trans-unit>
        <trans-unit id="ba10eedbcbac96de733b45e57696f86fd9e2ae1a" translate="yes" xml:space="preserve">
          <source>Checks if the given value is nil.</source>
          <target state="translated">주어진 값이 nil인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="1ff1fb2e41e4abad270b1d1faf934efc56ffec15" translate="yes" xml:space="preserve">
          <source>Checks if the left-value is included in the right one</source>
          <target state="translated">왼쪽 값이 오른쪽 값에 포함되어 있는지 확인</target>
        </trans-unit>
        <trans-unit id="012a92f0ea9c7b9bd332b5b0280f7b3e079b95d6" translate="yes" xml:space="preserve">
          <source>Checks if the left-value is included in the right one.</source>
          <target state="translated">왼쪽 값이 오른쪽 값에 포함되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ff79efe7f70ca6c7a26880d90f9fdcf1b5e2e115" translate="yes" xml:space="preserve">
          <source>Checks if there exists an entry that matches the given query</source>
          <target state="translated">주어진 검색어와 일치하는 항목이 있는지 확인</target>
        </trans-unit>
        <trans-unit id="01ba608b03c189712dac599e833b596871fe995e" translate="yes" xml:space="preserve">
          <source>Checks if there exists an entry that matches the given query.</source>
          <target state="translated">주어진 쿼리와 일치하는 항목이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="389242c9a730035773dd2bfb10ced2e95b92bbe5" translate="yes" xml:space="preserve">
          <source>Checks if two terms are equal</source>
          <target state="translated">두 항이 같은지 확인</target>
        </trans-unit>
        <trans-unit id="38a69d5cc36841de8cb46e3c595f0840ce93f8d2" translate="yes" xml:space="preserve">
          <source>Checks if two terms are equal.</source>
          <target state="translated">두 항이 같은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="fdde16246d41643a71fab5ae2a319f1ca2bec878" translate="yes" xml:space="preserve">
          <source>Checks if two terms are semantically equal</source>
          <target state="translated">두 용어가 의미 적으로 같은지 확인</target>
        </trans-unit>
        <trans-unit id="6646b3291804effbb7f740fa536c58d472e9a65b" translate="yes" xml:space="preserve">
          <source>Checks if two terms are semantically equal.</source>
          <target state="translated">두 용어가 의미 적으로 같은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="3706563a91c576d80ebc42e1e60ed72b66677397" translate="yes" xml:space="preserve">
          <source>Checks if we have a primitive type</source>
          <target state="translated">기본 유형이 있는지 확인</target>
        </trans-unit>
        <trans-unit id="d94cdaa6c65db405671997b233631e33f3635ec0" translate="yes" xml:space="preserve">
          <source>Checks if we have a primitive type.</source>
          <target state="translated">기본 유형이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ce70e4262eea85373e3f962f772047eb2b5cf584" translate="yes" xml:space="preserve">
          <source>Checks out a connection for the duration of the function</source>
          <target state="translated">기능 지속 시간 동안 연결을 확인합니다</target>
        </trans-unit>
        <trans-unit id="f8d5ddc97e30fb43102d8e232102ad0e94918cbc" translate="yes" xml:space="preserve">
          <source>Checks out a connection for the duration of the function.</source>
          <target state="translated">기능이 지속되는 동안 연결을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b4191a0c935af45665f885d48471cec8420ff8f6" translate="yes" xml:space="preserve">
          <source>Checks out a connection for the duration of the given function</source>
          <target state="translated">주어진 기능의 지속 시간 동안 연결을 확인합니다</target>
        </trans-unit>
        <trans-unit id="432c332c21e1ebe651f69db561aa30d3341e739c" translate="yes" xml:space="preserve">
          <source>Checks out a connection for the duration of the given function.</source>
          <target state="translated">주어진 기능이 지속되는 동안 연결을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="4d6f1ecf827d3f23473f3bbd2470ba23b02f45dd" translate="yes" xml:space="preserve">
          <source>Checks the Websocket subprotocols request header against the allowed subprotocols.</source>
          <target state="translated">Checks the Websocket subprotocols request header against the allowed subprotocols.</target>
        </trans-unit>
        <trans-unit id="b26ef7e7f2c927fed219263f4d0d0a8b4e9f30af" translate="yes" xml:space="preserve">
          <source>Checks the associated field does not exist</source>
          <target state="translated">관련 필드가 존재하지 않는지 확인</target>
        </trans-unit>
        <trans-unit id="bd86aa766094ca0b2d939788a04bc10d840c8eda" translate="yes" xml:space="preserve">
          <source>Checks the associated field does not exist.</source>
          <target state="translated">관련 필드가 존재하지 않는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="6501c966cafe6555cac818a9fd8b0d64fb1327f4" translate="yes" xml:space="preserve">
          <source>Checks the associated field exists</source>
          <target state="translated">관련 필드가 존재하는지 확인</target>
        </trans-unit>
        <trans-unit id="10b1ca019610fea359d98628c9db1be68d7b49da" translate="yes" xml:space="preserve">
          <source>Checks the associated field exists.</source>
          <target state="translated">관련 필드가 존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f90bf014a68be0e1e612c9cab06f18981fe73e91" translate="yes" xml:space="preserve">
          <source>Checks the origin request header against the list of allowed origins</source>
          <target state="translated">허용 된 출처 목록과 비교하여 출처 요청 헤더를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="9bf75f3781d0dbe77c4656080b8da67d7099adab" translate="yes" xml:space="preserve">
          <source>Checks the origin request header against the list of allowed origins.</source>
          <target state="translated">허용 된 오리진 목록과 비교하여 오리진 요청 헤더를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d01c2aab6be8cde7caad416de7bc0d04d65e24c6" translate="yes" xml:space="preserve">
          <source>Checks to see if the &lt;code&gt;required_key&lt;/code&gt; is present</source>
          <target state="translated">&lt;code&gt;required_key&lt;/code&gt; 가 존재 하는지 확인</target>
        </trans-unit>
        <trans-unit id="c4e66d6a6903255b0703717c7e856b65d04f4679" translate="yes" xml:space="preserve">
          <source>Checks to see if the required_key is present (can be empty)</source>
          <target state="translated">required_key가 있는지 확인합니다 (비어있을 수 있음).</target>
        </trans-unit>
        <trans-unit id="6929a94fa1722ac5684bbfa4457c2e9ae0947c95" translate="yes" xml:space="preserve">
          <source>Cipher Suites</source>
          <target state="translated">암호 스위트</target>
        </trans-unit>
        <trans-unit id="3f908ace8be79c6747236457248fd8f0a02cf607" translate="yes" xml:space="preserve">
          <source>Clears all flash messages</source>
          <target state="translated">모든 플래시 메시지를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="dcfd4db63de578c0ce575e1784274c31299c16f5" translate="yes" xml:space="preserve">
          <source>Clears all flash messages.</source>
          <target state="translated">모든 플래시 메시지를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="b5587a1be7dabdd4ea76580016a9a98fe251614b" translate="yes" xml:space="preserve">
          <source>Clears the entire session</source>
          <target state="translated">전체 세션을 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="ba79f95b8ce1750f56350e7f99c4a89ccd2f2fde" translate="yes" xml:space="preserve">
          <source>Clears the entire session.</source>
          <target state="translated">전체 세션을 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="8349eb1eacd2b2432ee3a410d4c08f5f24e21e78" translate="yes" xml:space="preserve">
          <source>Clears up the flash storage</source>
          <target state="translated">플래시 스토리지를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="c7267abbc6b07fa0a184e7ba7bef3624af318696" translate="yes" xml:space="preserve">
          <source>Clears up the flash storage.</source>
          <target state="translated">플래시 스토리지를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="6dc111d8da02e06dcfa7f3b586b2d25ecc95c4de" translate="yes" xml:space="preserve">
          <source>Client-server communication</source>
          <target state="translated">Client-server communication</target>
        </trans-unit>
        <trans-unit id="a4fc1028434897d0d9b57e73e4734c9104f06a17" translate="yes" xml:space="preserve">
          <source>Clients are expected to send the Channel Transport protocol version that they expect to be talking to. The version can be retrieved on the server from &lt;code&gt;Phoenix.Channel.Transport.protocol_version/0&lt;/code&gt;. If no version is provided, the Transport adapters should default to assume a &lt;code&gt;&quot;1.0.0&quot;&lt;/code&gt; version number. See &lt;code&gt;web/static/js/phoenix.js&lt;/code&gt; for an example transport client implementation.</source>
          <target state="translated">클라이언트는 대화 할 채널 전송 프로토콜 버전을 보내야합니다. 버전은 서버에서 &lt;code&gt;Phoenix.Channel.Transport.protocol_version/0&lt;/code&gt; 에서 검색 할 수 있습니다 . 버전이 제공되지 않으면 전송 어댑터는 기본적으로 &lt;code&gt;&quot;1.0.0&quot;&lt;/code&gt; 버전 번호 를 가정해야합니다 . 전송 클라이언트 구현 예제는 &lt;code&gt;web/static/js/phoenix.js&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb642ce3e7dd820f226a0eb2901f439ddb01422d" translate="yes" xml:space="preserve">
          <source>Clients can be implemented for other protocols and encodings by abiding by the &lt;a href=&quot;phoenix.socket.message&quot;&gt;&lt;code&gt;Phoenix.Socket.Message&lt;/code&gt;&lt;/a&gt; format.</source>
          <target state="translated">&lt;a href=&quot;phoenix.socket.message&quot;&gt; &lt;code&gt;Phoenix.Socket.Message&lt;/code&gt; &lt;/a&gt; 형식 을 준수하여 다른 프로토콜 및 인코딩을 위해 클라이언트를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1084b5d1689adfabc4b29c44836fe5d9e843e847" translate="yes" xml:space="preserve">
          <source>Clients must join a channel to send and receive PubSub events on that channel. Your channels must implement a &lt;code&gt;join/3&lt;/code&gt; callback that authorizes the socket for the given topic. For example, you could check if the user is allowed to join that particular room.</source>
          <target state="translated">해당 채널에서 PubSub 이벤트를 보내고 받으려면 클라이언트가 채널에 참여해야합니다. 채널은 주어진 주제에 대한 소켓을 승인 하는 &lt;code&gt;join/3&lt;/code&gt; 콜백을 구현해야합니다 . 예를 들어, 사용자가 해당 특정 회의실에 참여할 수 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3e91ba77145ff728ca9d0eac7d3d982a8f9407e" translate="yes" xml:space="preserve">
          <source>Closing channels is synchronous and has a default timeout of 5000 milliseconds.</source>
          <target state="translated">닫는 채널은 동기식이며 기본 시간 제한은 5000 밀리 초입니다.</target>
        </trans-unit>
        <trans-unit id="211a906235b1f831858d7b7ecaa5593d162a799c" translate="yes" xml:space="preserve">
          <source>Closing socket is synchronous and has a default timeout of 5000 milliseconds.</source>
          <target state="translated">Closing socket is synchronous and has a default timeout of 5000 milliseconds.</target>
        </trans-unit>
        <trans-unit id="a59323355e7bcb25157e9c8251a4dbc71cc359d9" translate="yes" xml:space="preserve">
          <source>Combines result sets of multiple queries. The &lt;code&gt;select&lt;/code&gt; of each query must be exactly the same, with the same types in the same order.</source>
          <target state="translated">여러 쿼리의 결과 집합을 결합합니다. 각 쿼리 의 &lt;code&gt;select&lt;/code&gt; 은 동일한 순서로 동일한 유형으로 정확히 동일해야합니다.</target>
        </trans-unit>
        <trans-unit id="6e3d3bf1961b8057b125fc05310e2099de8793b0" translate="yes" xml:space="preserve">
          <source>Command line options</source>
          <target state="translated">명령 줄 옵션</target>
        </trans-unit>
        <trans-unit id="4ab6bd65a3f415745443c9f59c3ccefed58137d8" translate="yes" xml:space="preserve">
          <source>Commands invoked to prepare a query for &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;update_all&lt;/code&gt; and &lt;code&gt;delete_all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; , &lt;code&gt;update_all&lt;/code&gt; 및 &lt;code&gt;delete_all&lt;/code&gt; 에 대한 쿼리를 준비하기 위해 호출 된 명령</target>
        </trans-unit>
        <trans-unit id="196b5fd56be1b957e32ac7a8b4599e84def88107" translate="yes" xml:space="preserve">
          <source>Commands invoked to prepare a query for &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;update_all&lt;/code&gt; and &lt;code&gt;delete_all&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; , &lt;code&gt;update_all&lt;/code&gt; 및 &lt;code&gt;delete_all&lt;/code&gt; 에 대한 쿼리를 준비하기 위해 호출 된 명령 .</target>
        </trans-unit>
        <trans-unit id="2844301d97258408e0b56ee5fddb3e205580943f" translate="yes" xml:space="preserve">
          <source>Commands invoked to prepare a query.</source>
          <target state="translated">Commands invoked to prepare a query.</target>
        </trans-unit>
        <trans-unit id="79b9d1e12cf78bff3e5126e9af3c55d4704a30ae" translate="yes" xml:space="preserve">
          <source>Common configuration</source>
          <target state="translated">Common configuration</target>
        </trans-unit>
        <trans-unit id="17421e6e6e98cfbe7a994fbcda25e417477a715d" translate="yes" xml:space="preserve">
          <source>Compacts a sets causal history</source>
          <target state="translated">인과 관계 기록을 압축</target>
        </trans-unit>
        <trans-unit id="387a836476bd6348742ec8318b4d33ea95c699a4" translate="yes" xml:space="preserve">
          <source>Compacts a sets causal history.</source>
          <target state="translated">인과 관계 기록을 압축합니다.</target>
        </trans-unit>
        <trans-unit id="689d04b0d0b115ca5fb5f7a16877d0c6bb47657f" translate="yes" xml:space="preserve">
          <source>Comparison operators: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">비교 연산자 : &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3993a075f65ea9d57f80c74dc0601a16a30c7c44" translate="yes" xml:space="preserve">
          <source>Compile-time configuration</source>
          <target state="translated">컴파일 타임 구성</target>
        </trans-unit>
        <trans-unit id="b43a18b461359f050a29f398ede2e96a808b8612" translate="yes" xml:space="preserve">
          <source>Compiles Phoenix source files that support code reloading.</source>
          <target state="translated">코드 재로드를 지원하는 Phoenix 소스 파일을 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="30bc423bb2cee749c72b094a1a1ffbbd38821f9a" translate="yes" xml:space="preserve">
          <source>Compiles a plug pipeline</source>
          <target state="translated">플러그 파이프 라인 컴파일</target>
        </trans-unit>
        <trans-unit id="e9e8fa12309768a3e1cb93436c2d3b7b30a47e37" translate="yes" xml:space="preserve">
          <source>Compiles a plug pipeline.</source>
          <target state="translated">플러그 파이프 라인을 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="b2e575ea9a9d857d6127db02e0797a8f845cd20f" translate="yes" xml:space="preserve">
          <source>Complex constraints</source>
          <target state="translated">복잡한 제약</target>
        </trans-unit>
        <trans-unit id="160e7d38bdd6d8bd71eb9ce1b70c379e002b9b0e" translate="yes" xml:space="preserve">
          <source>Composing casts</source>
          <target state="translated">캐스트 작성</target>
        </trans-unit>
        <trans-unit id="51c4e7e67d8ce6dd5ce03ffdf7dcbcd8ccb2b24b" translate="yes" xml:space="preserve">
          <source>Composing queries uses the same syntax as creating a query. The difference is that, instead of passing a schema like &lt;code&gt;User&lt;/code&gt; on the right side of &lt;code&gt;in&lt;/code&gt;, we passed the query itself.</source>
          <target state="translated">쿼리 작성은 쿼리 작성과 동일한 구문을 사용합니다. 차이점은 &lt;code&gt;in&lt;/code&gt; 의 오른쪽에 &lt;code&gt;User&lt;/code&gt; 와 같은 스키마를 전달하는 대신 쿼리 자체를 전달한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="0094bc74195c0ce7d0dd3d154aa59e783fd72fdf" translate="yes" xml:space="preserve">
          <source>Configures and validates the options given to the &lt;code&gt;:ssl&lt;/code&gt; application</source>
          <target state="translated">&lt;code&gt;:ssl&lt;/code&gt; 애플리케이션에 제공된 옵션을 구성하고 유효성을 검증합니다 .</target>
        </trans-unit>
        <trans-unit id="56ec8a61db64af5a01bc5e526abfe3c1561050d8" translate="yes" xml:space="preserve">
          <source>Configures and validates the options given to the &lt;code&gt;:ssl&lt;/code&gt; application.</source>
          <target state="translated">&lt;code&gt;:ssl&lt;/code&gt; 응용 프로그램에 제공된 옵션을 구성하고 유효성을 검증합니다 .</target>
        </trans-unit>
        <trans-unit id="ffe444e22547ee9f84bad3b053149c9ec3dab7f5" translate="yes" xml:space="preserve">
          <source>Configures the session</source>
          <target state="translated">세션을 구성합니다</target>
        </trans-unit>
        <trans-unit id="8d1eeb71dc4b14892934e634b5b3675174b1ea15" translate="yes" xml:space="preserve">
          <source>Configures the session.</source>
          <target state="translated">세션을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="6512ee1541e9a6c52d5bf7cf465332e8df25ea3c" translate="yes" xml:space="preserve">
          <source>Connection</source>
          <target state="translated">Connection</target>
        </trans-unit>
        <trans-unit id="623f71d860d9d5252b3bc03398edbc723671e7b8" translate="yes" xml:space="preserve">
          <source>Connection fields</source>
          <target state="translated">연결 필드</target>
        </trans-unit>
        <trans-unit id="42532c5ec85156dd2636fd9d43331282c462a13d" translate="yes" xml:space="preserve">
          <source>Connects to the socket.</source>
          <target state="translated">Connects to the socket.</target>
        </trans-unit>
        <trans-unit id="825d466786d2b398b37d8973f0e317876f33b62a" translate="yes" xml:space="preserve">
          <source>Consider the case where the application layout allows views to dynamically render a section of script tags in the head of the document. Some views may wish to inject certain scripts, while others will not.</source>
          <target state="translated">응용 프로그램 레이아웃에서 뷰가 문서 헤드에 스크립트 태그의 섹션을 동적으로 렌더링 할 수있는 경우를 고려하십시오. 일부 뷰는 특정 스크립트를 주입하고 다른 뷰는 삽입하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ec4a9286270cbc6f1229b77dcc30015580bc8f8" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;plug.csrfprotection&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; when using &lt;a href=&quot;plug.session#content&quot;&gt;&lt;code&gt;Plug.Session&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용을 고려 &lt;a href=&quot;plug.csrfprotection&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; 을&lt;/a&gt; 사용하는 경우 &lt;a href=&quot;plug.session#content&quot;&gt; &lt;code&gt;Plug.Session&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="049c25129edc0e21a3c2b9240307623c8b16b3e6" translate="yes" xml:space="preserve">
          <source>Contexts</source>
          <target state="translated">Contexts</target>
        </trans-unit>
        <trans-unit id="eb108ef25a0e4f3e8c59003c81d1e76fee6ec74d" translate="yes" xml:space="preserve">
          <source>Control frames only supported when using websockets.</source>
          <target state="translated">Control frames only supported when using websockets.</target>
        </trans-unit>
        <trans-unit id="0e9fb656787fc07e5d6a64599e65e1ccb74bd114" translate="yes" xml:space="preserve">
          <source>Controller testing</source>
          <target state="translated">컨트롤러 테스트</target>
        </trans-unit>
        <trans-unit id="2b5353d03e9a8cd11fd0e1a2f7c28e676caa2a91" translate="yes" xml:space="preserve">
          <source>Controllers are plugs</source>
          <target state="translated">컨트롤러는 플러그입니다</target>
        </trans-unit>
        <trans-unit id="af452210db5ef164e5270ab6a3485524d2fd8cda" translate="yes" xml:space="preserve">
          <source>Controllers are used to group common functionality in the same (pluggable) module.</source>
          <target state="translated">컨트롤러는 동일한 (플러그 가능) 모듈에서 공통 기능을 그룹화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9bb0128974f09f06e681a8725deaa05f012c4805" translate="yes" xml:space="preserve">
          <source>Conveniences for building plugs.</source>
          <target state="translated">플러그를 만들기위한 편의성.</target>
        </trans-unit>
        <trans-unit id="9f91a588298f951eb275c2b2ec86df49dc80af8f" translate="yes" xml:space="preserve">
          <source>Conveniences for decoding and encoding url encoded queries.</source>
          <target state="translated">URL 인코딩 된 쿼리를 디코딩하고 인코딩하기위한 편의성.</target>
        </trans-unit>
        <trans-unit id="9c580d5a405e26c0a35b518f00ed173cab85f11c" translate="yes" xml:space="preserve">
          <source>Conveniences for encoding and decoding cookies.</source>
          <target state="translated">쿠키 인코딩 및 디코딩 편의성.</target>
        </trans-unit>
        <trans-unit id="2505b6a64d4b3e7e31f84accd462c05c58ce0713" translate="yes" xml:space="preserve">
          <source>Conveniences for generating HTML.</source>
          <target state="translated">HTML 생성 편의성.</target>
        </trans-unit>
        <trans-unit id="1fefd886f0cee1b93efa1f72cccf15d683e4b0d7" translate="yes" xml:space="preserve">
          <source>Conveniences for inflecting and working with names in Phoenix.</source>
          <target state="translated">피닉스에서 이름을 활용하고 활용하기위한 편의성.</target>
        </trans-unit>
        <trans-unit id="2079e29298a5fa010672ca1e6447077dbdee3382" translate="yes" xml:space="preserve">
          <source>Conveniences for testing Phoenix channels.</source>
          <target state="translated">Phoenix 채널 테스트를위한 편의성.</target>
        </trans-unit>
        <trans-unit id="5c778784530bdea24896902b3d11dadd17f8d90a" translate="yes" xml:space="preserve">
          <source>Conveniences for testing Phoenix endpoints and connection related helpers.</source>
          <target state="translated">Phoenix 엔드 포인트 및 연결 관련 헬퍼 테스트를위한 편의성.</target>
        </trans-unit>
        <trans-unit id="c12f2b1bee63bacdcd8fb3213ef55235c074301e" translate="yes" xml:space="preserve">
          <source>Conveniences for testing plugs.</source>
          <target state="translated">플러그 테스트 편의성.</target>
        </trans-unit>
        <trans-unit id="a6a11d3bfeded6baca8d0d4108499315d32aad3d" translate="yes" xml:space="preserve">
          <source>Conveniences for working with links and URLs in HTML.</source>
          <target state="translated">HTML에서 링크 및 URL 작업을위한 편의성.</target>
        </trans-unit>
        <trans-unit id="e159c91ac2413f8fae02215e9f482d2e98915e2b" translate="yes" xml:space="preserve">
          <source>Conveniences for working with status codes.</source>
          <target state="translated">상태 코드 작업을위한 편의성.</target>
        </trans-unit>
        <trans-unit id="6fc83fdc7bfefcb73b9fa9ddd4eb4f1ae8d72b66" translate="yes" xml:space="preserve">
          <source>Conveniences for writing Ecto related Mix tasks.</source>
          <target state="translated">Ecto 관련 믹스 작업을 작성하기위한 편의성.</target>
        </trans-unit>
        <trans-unit id="95129317525bffbcf31b7a71e10603f34ad6de04" translate="yes" xml:space="preserve">
          <source>Converts String to camel case</source>
          <target state="translated">문자열을 낙타 케이스로 변환</target>
        </trans-unit>
        <trans-unit id="9db2742f372bacc07fdf355480784f0de6ba2f9d" translate="yes" xml:space="preserve">
          <source>Converts String to camel case.</source>
          <target state="translated">문자열을 낙타 케이스로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="93bd3d691babe59b7646592085998365cd346593" translate="yes" xml:space="preserve">
          <source>Converts String to underscore case</source>
          <target state="translated">문자열을 밑줄로 변환합니다</target>
        </trans-unit>
        <trans-unit id="382099623de39c9a305a1c8582eb895d87ef6188" translate="yes" xml:space="preserve">
          <source>Converts String to underscore case.</source>
          <target state="translated">문자열을 밑줄로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="27264d44d355d6d25a79ad27fa899bdc74730105" translate="yes" xml:space="preserve">
          <source>Converts a binary UUID into a string</source>
          <target state="translated">이진 UUID를 문자열로 변환</target>
        </trans-unit>
        <trans-unit id="ef60b50efc17b6764635f82f50428935079c6bee" translate="yes" xml:space="preserve">
          <source>Converts a binary UUID into a string.</source>
          <target state="translated">이진 UUID를 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="9c7adaf7aed01dd8443b57d8556b7c61a17d42d4" translate="yes" xml:space="preserve">
          <source>Converts a data structure into a &lt;a href=&quot;phoenix.html.form&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; struct</source>
          <target state="translated">데이터 구조를 &lt;a href=&quot;phoenix.html.form&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt; 구조체 로 변환</target>
        </trans-unit>
        <trans-unit id="5f0924e039579284f4949a209838800577578bd0" translate="yes" xml:space="preserve">
          <source>Converts a data structure into a &lt;a href=&quot;phoenix.html.form&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">데이터 구조를 &lt;a href=&quot;phoenix.html.form&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt; 구조체 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="2488392ad7a5f3949b70e58d9fbf8cfc02210a0a" translate="yes" xml:space="preserve">
          <source>Converts a data structure into a &lt;a href=&quot;phoenix.html.form#t:t/0&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">Converts a data structure into a &lt;a href=&quot;phoenix.html.form#t:t/0&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt; struct.</target>
        </trans-unit>
        <trans-unit id="394f609c550517ae5582344720070e6dd46f20bf" translate="yes" xml:space="preserve">
          <source>Converts a data structure into an &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">데이터 구조를 &lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; &lt;/a&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="f596d3623d5e3b391e0231a81f3148bc79da5b44" translate="yes" xml:space="preserve">
          <source>Converts a log entry into iodata</source>
          <target state="translated">로그 항목을 iodata로 변환</target>
        </trans-unit>
        <trans-unit id="dbfac8e7ad86b07e68ffea270a88c3ab47488d9c" translate="yes" xml:space="preserve">
          <source>Converts a log entry into iodata.</source>
          <target state="translated">로그 항목을 iodata로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="cf24d3bfd1d0adf2c069e4995cacd8de41852380" translate="yes" xml:space="preserve">
          <source>Converts a map with string keys into a message struct</source>
          <target state="translated">문자열 키가있는 맵을 메시지 구조체로 변환</target>
        </trans-unit>
        <trans-unit id="e1ef56d44b9b008f114784704498cd7afff2ab48" translate="yes" xml:space="preserve">
          <source>Converts a map with string keys into a message struct.</source>
          <target state="translated">문자열 키가있는 맵을 메시지 구조체로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="c33e6bed7be119b7b0930fe1c8868021fea8977b" translate="yes" xml:space="preserve">
          <source>Converts a module, without the suffix, to a template root.</source>
          <target state="translated">Converts a module, without the suffix, to a template root.</target>
        </trans-unit>
        <trans-unit id="b7649d80868b367f86ce5318ad508d0226a84911" translate="yes" xml:space="preserve">
          <source>Converts a query into a subquery</source>
          <target state="translated">쿼리를 하위 쿼리로 변환</target>
        </trans-unit>
        <trans-unit id="7ab3d4d922c75660ac90a3c041fe3d0ae49fd685" translate="yes" xml:space="preserve">
          <source>Converts a query into a subquery.</source>
          <target state="translated">쿼리를 하위 쿼리로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a137d6416d0106481b1951e108ca4eae747e5a67" translate="yes" xml:space="preserve">
          <source>Converts a string representing a UUID into a binary</source>
          <target state="translated">UUID를 나타내는 문자열을 이진으로 변환</target>
        </trans-unit>
        <trans-unit id="3140ee13801e4c00a1ff530b15f1f6a6f3a6c1b3" translate="yes" xml:space="preserve">
          <source>Converts a string representing a UUID into a binary.</source>
          <target state="translated">UUID를 나타내는 문자열을 이진으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="cbb7cf8eb57b429a02944a066a417de565b7469f" translate="yes" xml:space="preserve">
          <source>Converts a string to camel case.</source>
          <target state="translated">Converts a string to camel case.</target>
        </trans-unit>
        <trans-unit id="26ce8b0a474898457e495afaf507882370bba2fc" translate="yes" xml:space="preserve">
          <source>Converts a string to underscore case.</source>
          <target state="translated">Converts a string to underscore case.</target>
        </trans-unit>
        <trans-unit id="b3df0bdacb4443f553b22c73314bcdc4d5486b30" translate="yes" xml:space="preserve">
          <source>Converts an attribute/form field into its humanize version</source>
          <target state="translated">속성 / 양식 필드를 인간화 버전으로 변환</target>
        </trans-unit>
        <trans-unit id="19c50d9e2906eb74159ce3992723820e814393d9" translate="yes" xml:space="preserve">
          <source>Converts an attribute/form field into its humanize version.</source>
          <target state="translated">속성 / 양식 필드를 인간화 버전으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="c9733a54bd8f688547630970dbc222882b82e07b" translate="yes" xml:space="preserve">
          <source>Converts the field in the given form based on the data structure into a &lt;a href=&quot;phoenix.html.form&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; struct</source>
          <target state="translated">데이터 구조를 기반으로 지정된 양식의 필드를 &lt;a href=&quot;phoenix.html.form&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt; 구조체 로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="f80eee5cfebe6a00f029edb30bd90143409e8bcd" translate="yes" xml:space="preserve">
          <source>Converts the field in the given form based on the data structure into a &lt;a href=&quot;phoenix.html.form&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">데이터 구조를 기반으로 제공된 양식의 필드를 &lt;a href=&quot;phoenix.html.form&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt; 구조체 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="fd5b3fd023291fd444a733da409ce77d409e34ad" translate="yes" xml:space="preserve">
          <source>Converts the field in the given form based on the data structure into a list of &lt;a href=&quot;phoenix.html.form#t:t/0&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; structs.</source>
          <target state="translated">Converts the field in the given form based on the data structure into a list of &lt;a href=&quot;phoenix.html.form#t:t/0&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt; structs.</target>
        </trans-unit>
        <trans-unit id="7c3ce48bee964440fa19b570f3113c68531a8ac5" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;data&lt;/code&gt; into an &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; 를 &lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; &lt;/a&gt; 로 변환</target>
        </trans-unit>
        <trans-unit id="d2e1170df570845c7769ccab0dfe55c41e9f204e" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;data&lt;/code&gt; into an &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; 를 &lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; &lt;/a&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="a4eb22565028bee8e57f2538f8a2280b334b9223" translate="yes" xml:space="preserve">
          <source>Converts the template path into the template name.</source>
          <target state="translated">Converts the template path into the template name.</target>
        </trans-unit>
        <trans-unit id="87779649d0bc969867c2ebc36aca44610a78a40f" translate="yes" xml:space="preserve">
          <source>Could be configured with:</source>
          <target state="translated">다음과 같이 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d9bb1fefb027c333b59cf87a86b727eef409e8b" translate="yes" xml:space="preserve">
          <source>Counts the distinct values in given entry</source>
          <target state="translated">주어진 항목에서 고유 값을 계산</target>
        </trans-unit>
        <trans-unit id="2de639a472b6b9495362bab1a9c12f1367933775" translate="yes" xml:space="preserve">
          <source>Counts the distinct values in given entry.</source>
          <target state="translated">주어진 항목에서 고유 한 값을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="5075701de21a11711a31e4e2bb5ce2e539c5f1a6" translate="yes" xml:space="preserve">
          <source>Counts the entries in the table</source>
          <target state="translated">테이블의 항목 수를 센다</target>
        </trans-unit>
        <trans-unit id="5335fb3a68b01d2c891c9707977fc5953efe5ecb" translate="yes" xml:space="preserve">
          <source>Counts the entries in the table.</source>
          <target state="translated">테이블의 항목을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="60cab376ddb9984f252e1e5dc8b0676b16a76836" translate="yes" xml:space="preserve">
          <source>Counts the given entry</source>
          <target state="translated">주어진 항목을 센다</target>
        </trans-unit>
        <trans-unit id="8b583bcad8995030f3efb2a4003bf44dbfe7f84f" translate="yes" xml:space="preserve">
          <source>Counts the given entry.</source>
          <target state="translated">주어진 항목을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="6667c873b195491c47b83841b5d1a221b1d01d60" translate="yes" xml:space="preserve">
          <source>Create the storage for the given repository.</source>
          <target state="translated">지정된 저장소에 대한 스토리지를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="d1f5d6dc55285577b611a56099866fe7a5540361" translate="yes" xml:space="preserve">
          <source>Creates a connection to be used in upcoming requests</source>
          <target state="translated">향후 요청에 사용할 연결을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="a5620a9d32b1815c7e1e4a69d7c0269ff6490d80" translate="yes" xml:space="preserve">
          <source>Creates a connection to be used in upcoming requests with a preset method, path and body</source>
          <target state="translated">미리 설정된 방법, 경로 및 본문을 사용하여 향후 요청에 사용할 연결을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2ea17fb47f2e2bc29906e1a835f386b622c5e0fc" translate="yes" xml:space="preserve">
          <source>Creates a connection to be used in upcoming requests with a preset method, path and body.</source>
          <target state="translated">미리 설정된 방법, 경로 및 본문을 사용하여 향후 요청에 사용할 연결을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6ca5933e33322f2725154605349ac03436e17d81" translate="yes" xml:space="preserve">
          <source>Creates a connection to be used in upcoming requests.</source>
          <target state="translated">예정된 요청에 사용할 연결을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="655bf80f22d5ac7bdc88e18fa1d2f5c44bf8a2a4" translate="yes" xml:space="preserve">
          <source>Creates a new set for the replica</source>
          <target state="translated">복제본에 대한 새 세트를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6c3c516ff83fdb7b3890a578438dd63e0ad4b906" translate="yes" xml:space="preserve">
          <source>Creates a new set for the replica.</source>
          <target state="translated">복제본에 대한 새 세트를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="1cb0bb19ce2b3aec84766cc9b34cd1b86693717c" translate="yes" xml:space="preserve">
          <source>Creates a query</source>
          <target state="translated">쿼리를 만듭니다</target>
        </trans-unit>
        <trans-unit id="9964ed477088ce9376af7d997db469e2c481c304" translate="yes" xml:space="preserve">
          <source>Creates a query.</source>
          <target state="translated">쿼리를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="a92e7e3e21980465afda5df639077acd5e141d84" translate="yes" xml:space="preserve">
          <source>Creates a test connection</source>
          <target state="translated">테스트 연결을 만듭니다</target>
        </trans-unit>
        <trans-unit id="918f746fe680a623785f18e086e4d2e620665b7f" translate="yes" xml:space="preserve">
          <source>Creates a test connection.</source>
          <target state="translated">테스트 연결을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8db62c40dd78a09a060d952689268f9b49ea9f86" translate="yes" xml:space="preserve">
          <source>Creates an HTML tag with given name, content, and attributes</source>
          <target state="translated">이름, 내용 및 속성이 지정된 HTML 태그를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3c2bcae89a9be8a6c6feb5e8cc3b8e46a02f681c" translate="yes" xml:space="preserve">
          <source>Creates an HTML tag with given name, content, and attributes.</source>
          <target state="translated">이름, 내용 및 속성이 지정된 HTML 태그를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="058d15dfe83b62882d54c2ff61d2e4edaf0d99a4" translate="yes" xml:space="preserve">
          <source>Creates an HTML tag with the given name and options</source>
          <target state="translated">주어진 이름과 옵션으로 HTML 태그를 만듭니다</target>
        </trans-unit>
        <trans-unit id="27795a4c9e11b853e78c13b85bd3773163ca27e4" translate="yes" xml:space="preserve">
          <source>Creates an HTML tag with the given name and options.</source>
          <target state="translated">지정된 이름과 옵션으로 HTML 태그를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="295e8002fe94af556c61be9eb91674d5beffbd44" translate="yes" xml:space="preserve">
          <source>Creates the storage given by options</source>
          <target state="translated">옵션으로 주어진 스토리지를 생성합니다</target>
        </trans-unit>
        <trans-unit id="5092de28cfa9bf4a13d1673eb10f6c4ffa40c2cf" translate="yes" xml:space="preserve">
          <source>Creates the storage given by options.</source>
          <target state="translated">옵션으로 지정된 스토리지를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="6e51d2e5aed57b208ac929160777789364e28e92" translate="yes" xml:space="preserve">
          <source>Cross-host protection</source>
          <target state="translated">호스트 간 보호</target>
        </trans-unit>
        <trans-unit id="bb429da394c6fd75bb855fb4e738199598fe54a0" translate="yes" xml:space="preserve">
          <source>Currently it is possible to join on:</source>
          <target state="translated">현재 다음에 가입 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="45672bcfb95487b9a1fe832c5ef8aef6e8144968" translate="yes" xml:space="preserve">
          <source>Currently used as a wrapper function for &lt;a href=&quot;../plug/1.5.1/plug.csrfprotection&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; and mainly serves as a function plug in &lt;code&gt;YourApp.Router&lt;/code&gt;.</source>
          <target state="translated">현재 &lt;a href=&quot;../plug/1.5.1/plug.csrfprotection&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; 의 랩퍼 기능으로 사용되며 주로 YourApp.Router 의 기능 플러그로 사용 &lt;code&gt;YourApp.Router&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e8527b505d4d3ff1f51bd74f2ccae06781c8af7" translate="yes" xml:space="preserve">
          <source>Currently used as a wrapper function for &lt;a href=&quot;../plug/plug.csrfprotection&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; and mainly serves as a function plug in &lt;code&gt;YourApp.Router&lt;/code&gt;.</source>
          <target state="translated">Currently used as a wrapper function for &lt;a href=&quot;../plug/plug.csrfprotection&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; and mainly serves as a function plug in &lt;code&gt;YourApp.Router&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0e856d3cac9ea58a4f2fe05ca46f1dc55eefce3" translate="yes" xml:space="preserve">
          <source>Custom Banners</source>
          <target state="translated">맞춤 배너</target>
        </trans-unit>
        <trans-unit id="eb28204576a2e213094f3931ed41fe053faca307" translate="yes" xml:space="preserve">
          <source>Custom Template Engines</source>
          <target state="translated">Custom Template Engines</target>
        </trans-unit>
        <trans-unit id="2ad7995578312dcb09b4588cadcc8d6e2f426a4f" translate="yes" xml:space="preserve">
          <source>Custom URL Generation</source>
          <target state="translated">맞춤 URL 생성</target>
        </trans-unit>
        <trans-unit id="15c7584e3aa4d76e12311bbd0dca1b00c9c3931c" translate="yes" xml:space="preserve">
          <source>Custom body reader</source>
          <target state="translated">맞춤형 바디 리더</target>
        </trans-unit>
        <trans-unit id="c2f2a16fff225306736a35106079f78ddaa48623" translate="yes" xml:space="preserve">
          <source>Custom channel implementations cannot be tested with &lt;a href=&quot;phoenix.channeltest&quot;&gt;&lt;code&gt;Phoenix.ChannelTest&lt;/code&gt;&lt;/a&gt; and are currently considered experimental. The underlying API may be changed at any moment.</source>
          <target state="translated">Custom channel implementations cannot be tested with &lt;a href=&quot;phoenix.channeltest&quot;&gt; &lt;code&gt;Phoenix.ChannelTest&lt;/code&gt; &lt;/a&gt; and are currently considered experimental. The underlying API may be changed at any moment.</target>
        </trans-unit>
        <trans-unit id="a9b3d50b9cbecd1c2335b3dee818de27f68cbef9" translate="yes" xml:space="preserve">
          <source>Custom channels</source>
          <target state="translated">Custom channels</target>
        </trans-unit>
        <trans-unit id="7e21c9d3fe8c1579e1cd153dea9fb31d60cb8f21" translate="yes" xml:space="preserve">
          <source>Custom dispatch options</source>
          <target state="translated">맞춤 발송 옵션</target>
        </trans-unit>
        <trans-unit id="c047062656465c310928cc009c6d3064733926db" translate="yes" xml:space="preserve">
          <source>Custom dispatching</source>
          <target state="translated">Custom dispatching</target>
        </trans-unit>
        <trans-unit id="a79178c5b084f44fa3889f0d755f1d4399127ea8" translate="yes" xml:space="preserve">
          <source>Custom media types</source>
          <target state="translated">맞춤 용지 종류</target>
        </trans-unit>
        <trans-unit id="3a766c13565fe19675393ce2a7b6137d5d93894a" translate="yes" xml:space="preserve">
          <source>Custom parameters</source>
          <target state="translated">맞춤 매개 변수</target>
        </trans-unit>
        <trans-unit id="4b4b6c5cdc1d2d58f4c757a35dc8aa9f75bf0e91" translate="yes" xml:space="preserve">
          <source>Custom sockets and transports</source>
          <target state="translated">Custom sockets and transports</target>
        </trans-unit>
        <trans-unit id="592888624942f64ddca66ef92a9ecf07af58ad65" translate="yes" xml:space="preserve">
          <source>Custom status codes</source>
          <target state="translated">맞춤 상태 코드</target>
        </trans-unit>
        <trans-unit id="03c69cf1ba719cfa330283492e4177050d830b2f" translate="yes" xml:space="preserve">
          <source>Custom styles</source>
          <target state="translated">커스텀 스타일</target>
        </trans-unit>
        <trans-unit id="f7efae42f4cccc2527f00c7304e9225bf67da76b" translate="yes" xml:space="preserve">
          <source>Custom transports</source>
          <target state="translated">맞춤형 운송</target>
        </trans-unit>
        <trans-unit id="01968668870202b08c982a5f347b7df980dee05e" translate="yes" xml:space="preserve">
          <source>Custom type</source>
          <target state="translated">커스텀 타입</target>
        </trans-unit>
        <trans-unit id="81ef71c7c4675a503829d703092a4f5cab2a4d3a" translate="yes" xml:space="preserve">
          <source>Custom types</source>
          <target state="translated">커스텀 타입</target>
        </trans-unit>
        <trans-unit id="cb0f0b880fc41f72fa4da44b365d92d0e1e98258" translate="yes" xml:space="preserve">
          <source>Custom types and primary keys</source>
          <target state="translated">Custom types and primary keys</target>
        </trans-unit>
        <trans-unit id="69a7d510ecf32ff0355d3b76dd97f825ed970bf0" translate="yes" xml:space="preserve">
          <source>Custom types are represented by user-defined modules</source>
          <target state="translated">사용자 정의 유형은 사용자 정의 모듈로 표시됩니다</target>
        </trans-unit>
        <trans-unit id="6eafee3e694a6d6c7ed59b8497b3079202604841" translate="yes" xml:space="preserve">
          <source>Custom types are represented by user-defined modules.</source>
          <target state="translated">사용자 정의 유형은 사용자 정의 모듈로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="b3653020c71c4777d50b6793ad417b1e51a7f288" translate="yes" xml:space="preserve">
          <source>Customising the context, schema, tables and migrations</source>
          <target state="translated">Customising the context, schema, tables and migrations</target>
        </trans-unit>
        <trans-unit id="e1aa668724cef525e095f5266a0e6ca216f30dc2" translate="yes" xml:space="preserve">
          <source>Data attributes</source>
          <target state="translated">데이터 속성</target>
        </trans-unit>
        <trans-unit id="22ee43137eb33104fa6bb25df0d11793f36f2af6" translate="yes" xml:space="preserve">
          <source>Data attributes are added as a keyword list passed to the &lt;code&gt;data&lt;/code&gt; key. The following data attributes are supported:</source>
          <target state="translated">데이터 속성은 &lt;code&gt;data&lt;/code&gt; 키에 전달 된 키워드 목록으로 추가됩니다 . 다음과 같은 데이터 속성이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="dfbea07707e01cf3d5cd2917e0db646244e80fb4" translate="yes" xml:space="preserve">
          <source>Database type</source>
          <target state="translated">데이터베이스 유형</target>
        </trans-unit>
        <trans-unit id="2b0147a202c0652436982e4210c99e4db43e1984" translate="yes" xml:space="preserve">
          <source>Databases like MongoDB have native support for embeds. Databases like PostgreSQL uses a mixture of JSONB (&lt;code&gt;embeds_one/3&lt;/code&gt;) and ARRAY columns to provide this functionality.</source>
          <target state="translated">MongoDB와 같은 데이터베이스는 임베드를 기본적으로 지원합니다. PostgreSQL과 같은 데이터베이스는 JSONB ( &lt;code&gt;embeds_one/3&lt;/code&gt; )와 ARRAY 열을 혼합 하여이 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="348c5694e0d7d8db4752697a7c185717753760e0" translate="yes" xml:space="preserve">
          <source>Date/time intervals: &lt;a href=&quot;#datetime_add/3&quot;&gt;&lt;code&gt;datetime_add/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#date_add/3&quot;&gt;&lt;code&gt;date_add/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#from_now/2&quot;&gt;&lt;code&gt;from_now/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ago/2&quot;&gt;&lt;code&gt;ago/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">날짜 / 시간 간격 : &lt;a href=&quot;#datetime_add/3&quot;&gt; &lt;code&gt;datetime_add/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#date_add/3&quot;&gt; &lt;code&gt;date_add/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#from_now/2&quot;&gt; &lt;code&gt;from_now/2&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ago/2&quot;&gt; &lt;code&gt;ago/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc28334dbb2ee4b63b89c25268676f3540cb8080" translate="yes" xml:space="preserve">
          <source>Decodes iodata into &lt;a href=&quot;phoenix.socket.message&quot;&gt;&lt;code&gt;Phoenix.Socket.Message&lt;/code&gt;&lt;/a&gt; struct</source>
          <target state="translated">에 iodata 디코드 &lt;a href=&quot;phoenix.socket.message&quot;&gt; &lt;code&gt;Phoenix.Socket.Message&lt;/code&gt; 의&lt;/a&gt; 구조체</target>
        </trans-unit>
        <trans-unit id="5022d1fa92e4a008b4f97389512658b390541e37" translate="yes" xml:space="preserve">
          <source>Decodes the given binary</source>
          <target state="translated">주어진 이진을 해독합니다</target>
        </trans-unit>
        <trans-unit id="a4fc2ef19091b283310f075f39eebdbc574b872c" translate="yes" xml:space="preserve">
          <source>Decodes the given binary.</source>
          <target state="translated">주어진 바이너리를 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="2cf36e2a8c8c57a5b892035925a389f0221c6e5a" translate="yes" xml:space="preserve">
          <source>Decodes the given cookies as given in a request header</source>
          <target state="translated">요청 헤더에 제공된대로 주어진 쿠키를 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="d138261ed7bfce68ab9d9284286314a08d6fb068" translate="yes" xml:space="preserve">
          <source>Decodes the given cookies as given in a request header.</source>
          <target state="translated">요청 헤더에 제공된대로 주어진 쿠키를 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="ca8311e42f92d6b90a66d2da6614569a1aefd83a" translate="yes" xml:space="preserve">
          <source>Decodes the given cookies as given in either a request or response header.</source>
          <target state="translated">Decodes the given cookies as given in either a request or response header.</target>
        </trans-unit>
        <trans-unit id="165d936d32d794f4a22a59a865476cf0fb810a18" translate="yes" xml:space="preserve">
          <source>Decodes the given tuple and stores it in the accumulator.</source>
          <target state="translated">Decodes the given tuple and stores it in the accumulator.</target>
        </trans-unit>
        <trans-unit id="67791571081f15deaa98bef144e603752a37648d" translate="yes" xml:space="preserve">
          <source>Decodes the given tuple and stores it in the accumulator. It parses the key and stores the value into the current accumulator</source>
          <target state="translated">주어진 튜플을 디코딩하여 누산기에 저장합니다. 키를 구문 분석하고 값을 현재 누산기에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="6e49719641c1902ad6eefa0319fd41e19a3586ac" translate="yes" xml:space="preserve">
          <source>Decodes the given tuple and stores it in the accumulator. It parses the key and stores the value into the current accumulator.</source>
          <target state="translated">주어진 튜플을 디코딩하여 누산기에 저장합니다. 키를 구문 분석하고 값을 현재 누산기에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="6ee990d02025019ecfcb5edf1b4c4ec39e936da7" translate="yes" xml:space="preserve">
          <source>Decodes the original data from the token and verifies its integrity</source>
          <target state="translated">토큰에서 원본 데이터를 해독하고 무결성을 확인합니다</target>
        </trans-unit>
        <trans-unit id="f049b89b24eb9935b3ca98ad1fb0f9d2cd9f68e8" translate="yes" xml:space="preserve">
          <source>Decodes the original data from the token and verifies its integrity.</source>
          <target state="translated">토큰에서 원본 데이터를 해독하고 무결성을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="75c3a4309a68aab2ae1c45fc6b0180e2877459be" translate="yes" xml:space="preserve">
          <source>Decrypts the original data from the token and verifies its integrity.</source>
          <target state="translated">Decrypts the original data from the token and verifies its integrity.</target>
        </trans-unit>
        <trans-unit id="3756df3c62f47f45ddc117d75f48aa29a7d1dddb" translate="yes" xml:space="preserve">
          <source>Default options</source>
          <target state="translated">기본 옵션</target>
        </trans-unit>
        <trans-unit id="4da88ad909650175990a0a974e2ffa17afb351c7" translate="yes" xml:space="preserve">
          <source>Deferred constraints</source>
          <target state="translated">지연 제약</target>
        </trans-unit>
        <trans-unit id="34eb2207fae4118dc031e43bd682836d552cd605" translate="yes" xml:space="preserve">
          <source>Define a scope with the given path</source>
          <target state="translated">주어진 경로로 범위를 정의하십시오</target>
        </trans-unit>
        <trans-unit id="8a24bfbfe4b950fbe1f98d96017ddb61058636dd" translate="yes" xml:space="preserve">
          <source>Define a scope with the given path.</source>
          <target state="translated">주어진 경로로 범위를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="0ced961e1fc2c779109475084148a80717b33982" translate="yes" xml:space="preserve">
          <source>Defines &quot;RESTful&quot; routes for a resource.</source>
          <target state="translated">Defines &quot;RESTful&quot; routes for a resource.</target>
        </trans-unit>
        <trans-unit id="c555127295a2b019c70780dc39a214d0b9c44313" translate="yes" xml:space="preserve">
          <source>Defines &amp;ldquo;RESTful&amp;rdquo; routes for a resource</source>
          <target state="translated">자원에 대한&amp;ldquo;RESTful&amp;rdquo;경로를 정의합니다</target>
        </trans-unit>
        <trans-unit id="e546933a6e0a686579d2072a045b2b24d13e1704" translate="yes" xml:space="preserve">
          <source>Defines &amp;ldquo;RESTful&amp;rdquo; routes for a resource.</source>
          <target state="translated">자원에 대한&amp;ldquo;RESTful&amp;rdquo;경로를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d29baddf329cf4df77e0fcaa04d26f8d7bf3e15a" translate="yes" xml:space="preserve">
          <source>Defines a Phoenix Channel.</source>
          <target state="translated">피닉스 채널을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="235705cdc0369983f9f6de9af060949e5f16a26a" translate="yes" xml:space="preserve">
          <source>Defines a Phoenix endpoint.</source>
          <target state="translated">Phoenix 엔드 포인트를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="dea58b4fafe180816f5fde43f615b9aea00c40bf" translate="yes" xml:space="preserve">
          <source>Defines a Phoenix router.</source>
          <target state="translated">피닉스 라우터를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="6390ec122493c1583a174fe9ac5e369023b0024b" translate="yes" xml:space="preserve">
          <source>Defines a behaviour for &lt;a href=&quot;phoenix.socket.message&quot;&gt;&lt;code&gt;Phoenix.Socket.Message&lt;/code&gt;&lt;/a&gt; serialization.</source>
          <target state="translated">&lt;a href=&quot;phoenix.socket.message&quot;&gt; &lt;code&gt;Phoenix.Socket.Message&lt;/code&gt; &lt;/a&gt; 직렬화 의 동작을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="2d792c91b226ca5abb5305609b372b30da2cb4da" translate="yes" xml:space="preserve">
          <source>Defines a channel matching the given topic and transports</source>
          <target state="translated">주어진 주제 및 전송과 일치하는 채널을 정의합니다</target>
        </trans-unit>
        <trans-unit id="3fa26eb70159f8ab640869d100ff7fbb8ebe0a73" translate="yes" xml:space="preserve">
          <source>Defines a channel matching the given topic and transports.</source>
          <target state="translated">주어진 주제 및 전송과 일치하는 채널을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="af64f873d5500ce120a33c0e800349fe35b237d0" translate="yes" xml:space="preserve">
          <source>Defines a field on the schema with given name and type</source>
          <target state="translated">주어진 이름과 유형으로 스키마에 필드를 정의합니다</target>
        </trans-unit>
        <trans-unit id="efd699e27ca43fdec598faa06974044bb2a848bd" translate="yes" xml:space="preserve">
          <source>Defines a field on the schema with given name and type.</source>
          <target state="translated">지정된 이름과 유형으로 스키마에서 필드를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="f5407c8df5253b536e5c0092684631c55cd4cddc" translate="yes" xml:space="preserve">
          <source>Defines a list of plugs (and pipelines) to send the connection through.</source>
          <target state="translated">Defines a list of plugs (and pipelines) to send the connection through.</target>
        </trans-unit>
        <trans-unit id="67fbef7f15ed2faf874560243ca0083838e6bee5" translate="yes" xml:space="preserve">
          <source>Defines a message dispatched over transport to channels and vice-versa.</source>
          <target state="translated">전송을 통해 채널로 전달되는 메시지를 정의하고 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="28d7d8b620546f752b3959eef610fcd5b88b94e5" translate="yes" xml:space="preserve">
          <source>Defines a message sent from pubsub to channels and vice-versa.</source>
          <target state="translated">pubsub에서 채널로 또는 그 반대로 전송되는 메시지를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="b678f4e27bfbccbb54653172d4d94b97d52dd042" translate="yes" xml:space="preserve">
          <source>Defines a mount-point for a Socket module to handle channel definitions</source>
          <target state="translated">채널 정의를 처리 할 소켓 모듈의 마운트 지점을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="28cde125da30c3d4b8b02c57be5bbe5f2584445c" translate="yes" xml:space="preserve">
          <source>Defines a mount-point for a Socket module to handle channel definitions.</source>
          <target state="translated">채널 정의를 처리 할 소켓 모듈의 마운트 지점을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="2ea9f414a6265695d3c3e707a27efc7759441b20" translate="yes" xml:space="preserve">
          <source>Defines a pipeline to send the connection through</source>
          <target state="translated">연결을 통해 보낼 파이프 라인을 정의합니다</target>
        </trans-unit>
        <trans-unit id="67004c69d07a77e0364830f2e64643972bb5c715" translate="yes" xml:space="preserve">
          <source>Defines a pipeline to send the connection through.</source>
          <target state="translated">연결을 보낼 파이프 라인을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="626377c188b161f8ee92a6f60c67907ced021330" translate="yes" xml:space="preserve">
          <source>Defines a plug inside a pipeline</source>
          <target state="translated">파이프 라인 내부에 플러그를 정의합니다</target>
        </trans-unit>
        <trans-unit id="74844af7ddd6384b64831149a05b11c4fde3ff06" translate="yes" xml:space="preserve">
          <source>Defines a plug inside a pipeline.</source>
          <target state="translated">파이프 라인 내부의 플러그를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="8682bc32fd5509667c0e1dce1a301a5e6250f8b7" translate="yes" xml:space="preserve">
          <source>Defines a plug pipeline</source>
          <target state="translated">플러그 파이프 라인을 정의합니다</target>
        </trans-unit>
        <trans-unit id="72233b14665ba28dfb9fa2ca6d5bec41f35d1fe6" translate="yes" xml:space="preserve">
          <source>Defines a plug pipeline.</source>
          <target state="translated">플러그 파이프 라인을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="7aaae2212cb7e4596cdbd559a955ffac90ed46ce" translate="yes" xml:space="preserve">
          <source>Defines a reply sent from channels to transports.</source>
          <target state="translated">채널에서 전송으로 전송되는 응답을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="5df899000fa3205a84a1083055e157624bb5913b" translate="yes" xml:space="preserve">
          <source>Defines a repository.</source>
          <target state="translated">저장소를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="8910a742cc5c74828188debf44ec1420d5d8e4e1" translate="yes" xml:space="preserve">
          <source>Defines a schema struct with a source name and field definitions</source>
          <target state="translated">소스 이름과 필드 정의로 스키마 구조체를 정의합니다</target>
        </trans-unit>
        <trans-unit id="ab322b11466dcd7175f28e1be2949b280aaf773f" translate="yes" xml:space="preserve">
          <source>Defines a schema struct with a source name and field definitions.</source>
          <target state="translated">소스 이름과 필드 정의를 사용하여 스키마 구조체를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="8d20d470d617c99121e5f459af0d902f39b06c39" translate="yes" xml:space="preserve">
          <source>Defines a schema.</source>
          <target state="translated">스키마를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="73e2ef4d927292ff9b405a59dcb7fae197bf1c2c" translate="yes" xml:space="preserve">
          <source>Defines a scope in which routes can be nested</source>
          <target state="translated">경로를 중첩 할 수있는 범위를 정의합니다</target>
        </trans-unit>
        <trans-unit id="36cbf44758b5984aef0b549664bbe669a4c4938f" translate="yes" xml:space="preserve">
          <source>Defines a scope in which routes can be nested.</source>
          <target state="translated">경로를 중첩 할 수있는 범위를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="33f13eac830e5d11dbbc012b15c928e78e648963" translate="yes" xml:space="preserve">
          <source>Defines a scope with the given path and alias</source>
          <target state="translated">주어진 경로와 별칭으로 범위를 정의합니다</target>
        </trans-unit>
        <trans-unit id="66efb298c9aabf9ccbc899061404636e728d9ff4" translate="yes" xml:space="preserve">
          <source>Defines a scope with the given path and alias.</source>
          <target state="translated">주어진 경로와 별명으로 범위를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="6075960a9e3871d4098ed3ef627f906f411517cd" translate="yes" xml:space="preserve">
          <source>Defines a socket and its state.</source>
          <target state="translated">소켓과 상태를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="40a2893ccaafecb4be3a8b5b85cdff7f0a543871" translate="yes" xml:space="preserve">
          <source>Defines a transport with configuration</source>
          <target state="translated">구성으로 전송을 정의합니다</target>
        </trans-unit>
        <trans-unit id="2e9243ed85aceecaa626c37b6242e99524b81dbb" translate="yes" xml:space="preserve">
          <source>Defines a transport with configuration.</source>
          <target state="translated">구성을 사용하여 전송을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="1045219e4b28301c00581a67c31b46173d004740" translate="yes" xml:space="preserve">
          <source>Defines a websocket/longpoll mount-point for a socket.</source>
          <target state="translated">Defines a websocket/longpoll mount-point for a socket.</target>
        </trans-unit>
        <trans-unit id="b6f7548bed405a22c425526cc2c285184b3f2c22" translate="yes" xml:space="preserve">
          <source>Defines an embedded schema with the given field definitions</source>
          <target state="translated">주어진 필드 정의로 임베디드 스키마를 정의합니다</target>
        </trans-unit>
        <trans-unit id="8fa803bf79623a181b5123498ee6f231f614a1bb" translate="yes" xml:space="preserve">
          <source>Defines an embedded schema with the given field definitions.</source>
          <target state="translated">주어진 필드 정의로 포함 된 스키마를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="f2e1039f6e296b404c3b628cd0bcb31c1f64121b" translate="yes" xml:space="preserve">
          <source>Defines functions and the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Ecto.Type&lt;/code&gt;&lt;/a&gt; behaviour for implementing basic custom types.</source>
          <target state="translated">Defines functions and the &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Ecto.Type&lt;/code&gt; &lt;/a&gt; behaviour for implementing basic custom types.</target>
        </trans-unit>
        <trans-unit id="6432ba9d89cda272407151bb646031fa0b43a2f7" translate="yes" xml:space="preserve">
          <source>Defines functions and the &lt;a href=&quot;ecto.type#content&quot;&gt;&lt;code&gt;Ecto.Type&lt;/code&gt;&lt;/a&gt; behaviour for implementing custom types.</source>
          <target state="translated">사용자 정의 유형을 구현하기위한 함수 및 &lt;a href=&quot;ecto.type#content&quot;&gt; &lt;code&gt;Ecto.Type&lt;/code&gt; &lt;/a&gt; 동작을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="07165df5c35d63325209e3672605c7d1ef21e2bf" translate="yes" xml:space="preserve">
          <source>Defines the HTML safe protocol.</source>
          <target state="translated">HTML 안전 프로토콜을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="c60dd928ec133683effed99436f649bb52ba9ed6" translate="yes" xml:space="preserve">
          <source>Defines the Phoenix.HTML.Form struct</source>
          <target state="translated">Phoenix.HTML.Form 구조체를 정의합니다</target>
        </trans-unit>
        <trans-unit id="9b73046e41b83e8632e11734a79b46f80bd80e3c" translate="yes" xml:space="preserve">
          <source>Defines the Phoenix.HTML.Form struct.</source>
          <target state="translated">Phoenix.HTML.Form 구조체를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="a93ad99653849b671aa30e521a85ba4371f460d4" translate="yes" xml:space="preserve">
          <source>Defines the view layer of a Phoenix application.</source>
          <target state="translated">Phoenix 애플리케이션의보기 계층을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="07465682294918bcade97a592701eab8d7bc4fa5" translate="yes" xml:space="preserve">
          <source>Defines which Channel events to intercept for &lt;code&gt;handle_out/3&lt;/code&gt; callbacks</source>
          <target state="translated">&lt;code&gt;handle_out/3&lt;/code&gt; 콜백 을 가로 챌 채널 이벤트를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="642d24d790a544e7a3090f37c45010edab2614c2" translate="yes" xml:space="preserve">
          <source>Defines which Channel events to intercept for &lt;code&gt;handle_out/3&lt;/code&gt; callbacks.</source>
          <target state="translated">&lt;code&gt;handle_out/3&lt;/code&gt; 콜백 을 가로 챌 채널 이벤트를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="e3314166cec5f4c7b8773a376d51e5529a69824d" translate="yes" xml:space="preserve">
          <source>Defines windows which can be used with &lt;a href=&quot;ecto.query.windowapi&quot;&gt;&lt;code&gt;Ecto.Query.WindowAPI&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ecto.query.windowapi&quot;&gt; &lt;code&gt;Ecto.Query.WindowAPI&lt;/code&gt; &lt;/a&gt; 와 함께 사용할 수있는 창을 정의합니다</target>
        </trans-unit>
        <trans-unit id="b2601687aa8ec4a6c14723b50e590b550da8746d" translate="yes" xml:space="preserve">
          <source>Defines windows which can be used with &lt;a href=&quot;ecto.query.windowapi&quot;&gt;&lt;code&gt;Ecto.Query.WindowAPI&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ecto.query.windowapi&quot;&gt; &lt;code&gt;Ecto.Query.WindowAPI&lt;/code&gt; &lt;/a&gt; 와 함께 사용할 수있는 창을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="7404bbfa3bf1eaa2f779cbe4fdcea4586867f84e" translate="yes" xml:space="preserve">
          <source>Defining custom functions using macros and fragment</source>
          <target state="translated">매크로 및 조각을 사용하여 사용자 정의 함수 정의</target>
        </trans-unit>
        <trans-unit id="847c4e031bd354c6f6d6aff9d13bbd0981a8abc3" translate="yes" xml:space="preserve">
          <source>Defining embedded schema in such a way will define a &lt;code&gt;Parent.Child&lt;/code&gt; module with the appropriate struct. In order to properly cast the embedded schema. When casting the inline-defined embedded schemas you need to use the &lt;code&gt;:with&lt;/code&gt; option of &lt;a href=&quot;ecto.changeset#cast_embed/3&quot;&gt;&lt;code&gt;Ecto.Changeset.cast_embed/3&lt;/code&gt;&lt;/a&gt; to provide the proper function to do the casting. For example:</source>
          <target state="translated">이런 식으로 임베디드 스키마를 정의 하면 적절한 구조체로 &lt;code&gt;Parent.Child&lt;/code&gt; 모듈을 정의합니다 . 임베디드 스키마를 올바르게 캐스트하기 위해. 인라인 정의 내장 스키마를 캐스팅 할 때 캐스팅 을 수행하기위한 적절한 기능을 제공하려면 &lt;a href=&quot;ecto.changeset#cast_embed/3&quot;&gt; &lt;code&gt;Ecto.Changeset.cast_embed/3&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;:with&lt;/code&gt; 옵션 을 사용해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e25d056469e7205f8c1dba96e0a56fc8a4f8df72" translate="yes" xml:space="preserve">
          <source>Defining embedded schema in such a way will define a &lt;code&gt;Parent.Child&lt;/code&gt; module with the appropriate struct. In order to properly cast the embedded schema. When casting the inline-defined embedded schemas you need to use the &lt;code&gt;:with&lt;/code&gt; option of &lt;code&gt;cast_embed/3&lt;/code&gt; to provide the proper function to do the casting. For example:</source>
          <target state="translated">이런 식으로 임베디드 스키마를 정의 하면 적절한 구조체로 &lt;code&gt;Parent.Child&lt;/code&gt; 모듈을 정의합니다 . 임베디드 스키마를 올바르게 캐스트하기 위해. 인라인 정의 내장 스키마를 캐스팅 할 때는 &lt;code&gt;cast_embed/3&lt;/code&gt; 의 &lt;code&gt;:with&lt;/code&gt; 옵션 을 사용 하여 캐스팅을 수행하기위한 적절한 기능을 제공해야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b730af78856042c2e6f0560a02fc09cd866d3de9" translate="yes" xml:space="preserve">
          <source>Defining the type of each field is not mandatory, but it is preferable.</source>
          <target state="translated">각 필드의 유형을 정의하는 것은 필수는 아니지만 바람직합니다.</target>
        </trans-unit>
        <trans-unit id="dc3c2b2ee76ee6e2f89d0ec2d1f82252edeb9f34" translate="yes" xml:space="preserve">
          <source>Delete compiled/compressed asset files that are no longer in use based on specified criteria</source>
          <target state="translated">지정된 기준에 따라 더 이상 사용되지 않는 컴파일 / 압축 된 자산 파일 삭제</target>
        </trans-unit>
        <trans-unit id="28b5a017f49a91de5c9274f70107efe0891cca63" translate="yes" xml:space="preserve">
          <source>Delete compiled/compressed asset files that are no longer in use based on specified criteria.</source>
          <target state="translated">지정된 기준에 따라 더 이상 사용하지 않는 컴파일 / 압축 된 자산 파일을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="f7ce913ca1d09f09cb1227e93e044948b65eb687" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;key&lt;/code&gt; from session.</source>
          <target state="translated">세션에서 &lt;code&gt;key&lt;/code&gt; 를 삭제 합니다 .</target>
        </trans-unit>
        <trans-unit id="13214aab7bd1d6ebe1a36dd15784fd2dbb158e70" translate="yes" xml:space="preserve">
          <source>Deletes a change with the given key</source>
          <target state="translated">주어진 키로 변경 사항을 삭제합니다</target>
        </trans-unit>
        <trans-unit id="deca0e88c2adbf1fa7421afbd9abd2be33eec20f" translate="yes" xml:space="preserve">
          <source>Deletes a change with the given key.</source>
          <target state="translated">주어진 키로 변경 사항을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="aadb3bc757b2c5aaaedfe0cb46c185ffae746461" translate="yes" xml:space="preserve">
          <source>Deletes a request cookie</source>
          <target state="translated">요청 쿠키를 삭제합니다</target>
        </trans-unit>
        <trans-unit id="7b00727b0e36527b1754c79a189a2e6ba8d90811" translate="yes" xml:space="preserve">
          <source>Deletes a request cookie.</source>
          <target state="translated">요청 쿠키를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="2d06cbcc573807b201eb7218d2ae670db20fd2bc" translate="yes" xml:space="preserve">
          <source>Deletes a request header if present</source>
          <target state="translated">요청 헤더가있는 경우 삭제</target>
        </trans-unit>
        <trans-unit id="abea7b5b79304c193dfacc3e6ac3b8b34beb66ab" translate="yes" xml:space="preserve">
          <source>Deletes a request header if present.</source>
          <target state="translated">요청 헤더가 있으면 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="6c7f349096886a817007251d959a39bd17bbf943" translate="yes" xml:space="preserve">
          <source>Deletes a response cookie</source>
          <target state="translated">응답 쿠키를 삭제합니다</target>
        </trans-unit>
        <trans-unit id="720063bae4bfc2808217c51052678716d5abe047" translate="yes" xml:space="preserve">
          <source>Deletes a response cookie.</source>
          <target state="translated">응답 쿠키를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="a8142ba1aa22d293febaab12665e6bb2b86e39aa" translate="yes" xml:space="preserve">
          <source>Deletes a response header if present</source>
          <target state="translated">있는 경우 응답 헤더를 삭제합니다</target>
        </trans-unit>
        <trans-unit id="e48fc1e7e71688c5551c72a64f5da6856955070a" translate="yes" xml:space="preserve">
          <source>Deletes a response header if present.</source>
          <target state="translated">응답 헤더가 있으면 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="a6425e65d9f201eb8a2b6e3490740623a09142db" translate="yes" xml:space="preserve">
          <source>Deletes a single struct with the given filters</source>
          <target state="translated">주어진 필터로 단일 구조체를 삭제합니다</target>
        </trans-unit>
        <trans-unit id="cf31e7ca3f3b34e927478bb8d3ccd25fdbb569ec" translate="yes" xml:space="preserve">
          <source>Deletes a single struct with the given filters.</source>
          <target state="translated">주어진 필터로 단일 구조체를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="c49793fda674028caa019b541a37af5245caf970" translate="yes" xml:space="preserve">
          <source>Deletes a struct using its primary key</source>
          <target state="translated">기본 키를 사용하여 구조체를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="6b0f350c369eba34b55c12b3bb595615937f6ff5" translate="yes" xml:space="preserve">
          <source>Deletes a struct using its primary key.</source>
          <target state="translated">기본 키를 사용하여 구조체를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="99a7bdafb4a5add3ba4ed6cbb69eceaaa881d322" translate="yes" xml:space="preserve">
          <source>Deletes all entries matching the given query</source>
          <target state="translated">주어진 검색어와 일치하는 모든 항목을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="f37192814b4bbe90dc78941307f5bc02d3f80812" translate="yes" xml:space="preserve">
          <source>Deletes all entries matching the given query.</source>
          <target state="translated">주어진 검색어와 일치하는 모든 항목을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="07d5b14db379714d12e9bdc4a09310e477552c02" translate="yes" xml:space="preserve">
          <source>Deletes any CSRF token set</source>
          <target state="translated">CSRF 토큰 세트를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="6708e2a5d51b61df92adbc1eb9bc52a77c891cd1" translate="yes" xml:space="preserve">
          <source>Deletes any CSRF token set.</source>
          <target state="translated">CSRF 토큰 세트를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="efbcf3247e62f0f6be7f09d7f602f1dd662b28fe" translate="yes" xml:space="preserve">
          <source>Deletes the CSRF token from the process dictionary</source>
          <target state="translated">프로세스 사전에서 CSRF 토큰을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="b0cf0913b96035e4ec0da1dc517a91bd41b65b68" translate="yes" xml:space="preserve">
          <source>Deletes the CSRF token from the process dictionary.</source>
          <target state="translated">프로세스 사전에서 CSRF 토큰을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="9b584ac24f3db38d0aae3ca2dfe9ae4e52297571" translate="yes" xml:space="preserve">
          <source>Deletes the session for the given &lt;code&gt;key&lt;/code&gt;</source>
          <target state="translated">주어진 &lt;code&gt;key&lt;/code&gt; 대한 세션을 삭제합니다</target>
        </trans-unit>
        <trans-unit id="492ad3e1227c0240a2139106742d9007e1dbf985" translate="yes" xml:space="preserve">
          <source>Deletes the session for the given &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;key&lt;/code&gt; 대한 세션을 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="7f2a493d27d308a215e6776d97101f6bfa8d94bd" translate="yes" xml:space="preserve">
          <source>Deleting a cookie requires the same options as to when the cookie was put. Check &lt;a href=&quot;#put_resp_cookie/4&quot;&gt;&lt;code&gt;put_resp_cookie/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">쿠키를 삭제하려면 쿠키를 넣었을 때와 동일한 옵션이 필요합니다. 확인 &lt;a href=&quot;#put_resp_cookie/4&quot;&gt; &lt;code&gt;put_resp_cookie/4&lt;/code&gt; &lt;/a&gt; 더 많은 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0829d3fed8071950ec7a9ea9d8e675b4eee7e5df" translate="yes" xml:space="preserve">
          <source>Depending on the given &lt;code&gt;type&lt;/code&gt; performs a structural or semantical comparison.</source>
          <target state="translated">주어진 &lt;code&gt;type&lt;/code&gt; 에 따라 구조적 또는 의미 론적 비교를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8d60002ce0cbb84509bdb53ded6e6959b0d1b953" translate="yes" xml:space="preserve">
          <source>Deprecated version of conn/0. Use build_conn/0 instead</source>
          <target state="translated">더 이상 사용되지 않는 conn / 0 버전입니다. 대신 build_conn / 0을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="667efcfdd5df9fec932f221c6a4bed3f5f15f7d3" translate="yes" xml:space="preserve">
          <source>Deprecated version of conn/3. Use build_conn/3 instead</source>
          <target state="translated">더 이상 사용되지 않는 conn / 3 버전. 대신 build_conn / 3을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bc57df81bc6a4fdaad15a199a65b4ba7da132b5f" translate="yes" xml:space="preserve">
          <source>Developers interested in implementing custom transports must invoke the socket API defined in this module. This module also provides many conveniences that invokes the underlying socket API to make it easier to build custom transports.</source>
          <target state="translated">사용자 지정 전송 구현에 관심이있는 개발자는이 모듈에 정의 된 소켓 API를 호출해야합니다. 이 모듈은 또한 사용자 지정 전송을보다 쉽게 ​​빌드 할 수 있도록 기본 소켓 API를 호출하는 많은 편의를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a43d5127d4822c6c5a9fb2f275c5aaedaf9e424f" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">개발자는 일반적으로 적절한 감독 플래그를 반환하기 위해 초기화 콜백이 끝날 때 &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; &lt;/a&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="de2b2421a912bbeefc48a7805363b92f8c8dfa95" translate="yes" xml:space="preserve">
          <source>Dictates how the type should be treated inside embeds.</source>
          <target state="translated">임베드 내부에서 유형을 처리하는 방법을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="d10727ff07a61c20d90a8ead7e945824b521a56e" translate="yes" xml:space="preserve">
          <source>Diffie Hellman parameters</source>
          <target state="translated">Diffie Hellman 매개 변수</target>
        </trans-unit>
        <trans-unit id="5239c7e690be047b1c40d1686ed6392e481c3ddb" translate="yes" xml:space="preserve">
          <source>Digests and compress static files.</source>
          <target state="translated">정적 파일을 요약하고 압축합니다.</target>
        </trans-unit>
        <trans-unit id="b81ec068f62bb915dba55bc19790a31a98f55818" translate="yes" xml:space="preserve">
          <source>Digests and compresses static files.</source>
          <target state="translated">정적 파일을 요약하고 압축합니다.</target>
        </trans-unit>
        <trans-unit id="99ebbad0bfd4667f6a336c3b334aa0d4e3d8ddc7" translate="yes" xml:space="preserve">
          <source>Digests and compresses the static files and saves them in the given output path</source>
          <target state="translated">정적 파일을 소화 및 압축하여 지정된 출력 경로에 저장</target>
        </trans-unit>
        <trans-unit id="7a8caf6ea516252bee7fd92867f23b995212ceca" translate="yes" xml:space="preserve">
          <source>Digests and compresses the static files and saves them in the given output path.</source>
          <target state="translated">정적 파일을 요약하고 압축하여 지정된 출력 경로에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="bcbc4cc8e3f388ccae89b1884e0b6507830e2f84" translate="yes" xml:space="preserve">
          <source>Direct usage</source>
          <target state="translated">직접 사용</target>
        </trans-unit>
        <trans-unit id="48921431448fdab71760c6030086e16e79e9c560" translate="yes" xml:space="preserve">
          <source>Disable logging: &lt;code&gt;use Phoenix.Socket, log: false&lt;/code&gt; or &lt;code&gt;socket &quot;/foo&quot;, MySocket, websocket: [log: false]&lt;/code&gt; in your endpoint</source>
          <target state="translated">로깅 비활성화 : 엔드 포인트에서 &lt;code&gt;socket &quot;/foo&quot;, MySocket, websocket: [log: false]&lt;/code&gt; &lt;code&gt;use Phoenix.Socket, log: false&lt;/code&gt; 또는 socket &quot;/ foo&quot;, MySocket, websocket : [log : false] 사용</target>
        </trans-unit>
        <trans-unit id="641d0e62de0ede81f52d31e9ab7917ccf950ae23" translate="yes" xml:space="preserve">
          <source>Disable logging: In your endpoint &lt;code&gt;plug Plug.Telemetry, ..., log: Logger.level | false&lt;/code&gt;</source>
          <target state="translated">로깅 비활성화 : 엔드 포인트 &lt;code&gt;plug Plug.Telemetry, ..., log: Logger.level | false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8825a6a930b9d113a3458154e71d4ad4c4a501e" translate="yes" xml:space="preserve">
          <source>Disable logging: Pass &lt;code&gt;log: false&lt;/code&gt; to the router macro, for example: &lt;code&gt;get(&quot;/page&quot;, PageController, :index, log: false)&lt;/code&gt;</source>
          <target state="translated">로깅 비활성화 : &lt;code&gt;log: false&lt;/code&gt; 를 라우터 매크로에 전달합니다. 예 : &lt;code&gt;get(&quot;/page&quot;, PageController, :index, log: false)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f3d4f3e80f755e56b4e3aacddd584ddf506f0562" translate="yes" xml:space="preserve">
          <source>Disable logging: Set &lt;code&gt;render_errors: [log: false]&lt;/code&gt; on your endpoint configuration</source>
          <target state="translated">로깅 비활성화 : 엔드 포인트 구성에서 &lt;code&gt;render_errors: [log: false]&lt;/code&gt; 를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7d602b65c08d4c643c673620d08a73542d64e7cc" translate="yes" xml:space="preserve">
          <source>Disable logging: This event cannot be disabled</source>
          <target state="translated">로깅 비활성화 :이 이벤트는 비활성화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d16fe5c27095e50264e4ea24af8d6061c35cdd9d" translate="yes" xml:space="preserve">
          <source>Disable logging: This event is not logged</source>
          <target state="translated">로깅 비활성화 :이 이벤트는 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="03bf0a54b86fdf600ed47b76df6625dec956b028" translate="yes" xml:space="preserve">
          <source>Disabling</source>
          <target state="translated">Disabling</target>
        </trans-unit>
        <trans-unit id="96b5232fa4c733e97f037f875fd5a92f8e94d41c" translate="yes" xml:space="preserve">
          <source>Dispatches &lt;a href=&quot;phoenix.socket.message&quot;&gt;&lt;code&gt;Phoenix.Socket.Message&lt;/code&gt;&lt;/a&gt; to a channel</source>
          <target state="translated">&lt;a href=&quot;phoenix.socket.message&quot;&gt; &lt;code&gt;Phoenix.Socket.Message&lt;/code&gt; &lt;/a&gt; 를 채널로 발송</target>
        </trans-unit>
        <trans-unit id="fe9d02a45e91f54e19c7f2226499f19d70de1a13" translate="yes" xml:space="preserve">
          <source>Dispatches &lt;a href=&quot;phoenix.socket.message&quot;&gt;&lt;code&gt;Phoenix.Socket.Message&lt;/code&gt;&lt;/a&gt; to a channel.</source>
          <target state="translated">&lt;a href=&quot;phoenix.socket.message&quot;&gt; &lt;code&gt;Phoenix.Socket.Message&lt;/code&gt; &lt;/a&gt; 를 채널로 발송 합니다.</target>
        </trans-unit>
        <trans-unit id="1c1adafd96d807fa9fb86cd4d2da33f8d9cc603e" translate="yes" xml:space="preserve">
          <source>Dispatches the connection to the given endpoint</source>
          <target state="translated">주어진 엔드 포인트로 연결을 전달합니다</target>
        </trans-unit>
        <trans-unit id="fba471690dad6774fb53979ac504840f01b87f88" translate="yes" xml:space="preserve">
          <source>Dispatches the connection to the given endpoint.</source>
          <target state="translated">지정된 엔드 포인트에 대한 연결을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="ddc1527261174a3bf196eb7378ee28cfde1c8cf2" translate="yes" xml:space="preserve">
          <source>Dispatches to the current endpoint</source>
          <target state="translated">현재 엔드 포인트로 전달</target>
        </trans-unit>
        <trans-unit id="42be31ad4915b519b26d800f35414ec31eb0e7a5" translate="yes" xml:space="preserve">
          <source>Dispatches to the current endpoint.</source>
          <target state="translated">현재 엔드 포인트로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="5f8b1bea9f9d0843e3db8ee304f3d8d863a0d537" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a DELETE request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples</source>
          <target state="translated">요청이 DELETE 요청 인 경우에만 경로로 전달합니다. 더 많은 예제를 보려면 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 보십시오</target>
        </trans-unit>
        <trans-unit id="349715d24abcab00378c6953ef63281898d5f0fc" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a DELETE request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">요청이 DELETE 요청 인 경우에만 경로로 전달합니다. 자세한 예는 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9efbcffe2d3f8f6f005a51ab5bedcf5e13902b73" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a GET request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples</source>
          <target state="translated">요청이 GET 요청 인 경우에만 경로로 전달합니다. 더 많은 예제를 보려면 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 보십시오</target>
        </trans-unit>
        <trans-unit id="d1fdf8470e12c39b6e23854035c4ed2bcdd13ba3" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a GET request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">요청이 GET 요청 인 경우에만 경로로 전달합니다. 자세한 예는 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4158087588093b1ab228f794cda3e9b4c4bb7b97" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a HEAD request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">요청이 HEAD 요청 인 경우에만 경로로 디스패치합니다. 더 많은 예는 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="26451cb29dcd04808f58ada5f73009b82391d2da" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a PATCH request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples</source>
          <target state="translated">요청이 PATCH 요청 인 경우에만 경로로 전달합니다. 더 많은 예제를 보려면 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 보십시오</target>
        </trans-unit>
        <trans-unit id="eb9fffe149738fbaf0d808506ca784dcbbf146b1" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a PATCH request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">요청이 PATCH 요청 인 경우에만 경로로 전달합니다. 자세한 예는 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="759d5edd2913b0fd955b74910f524889cf96caf8" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a POST request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples</source>
          <target state="translated">요청이 POST 요청 인 경우에만 경로로 전달합니다. 더 많은 예제를 보려면 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 보십시오</target>
        </trans-unit>
        <trans-unit id="e7375e61dd2d04843b22f96071660e356c62a62e" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a POST request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">요청이 POST 요청 인 경우에만 경로로 전달합니다. 자세한 예는 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="633336dc61440b815025525888e0681e8339cd0a" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a PUT request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples</source>
          <target state="translated">요청이 PUT 요청 인 경우에만 경로로 전달합니다. 더 많은 예제를 보려면 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 보십시오</target>
        </trans-unit>
        <trans-unit id="53fd2e3f0afad2fe34f350bf859d9130b5fc0d22" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is a PUT request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">요청이 PUT 요청 인 경우에만 경로로 전달합니다. 자세한 예는 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="114a23fd1f7e23090c953828c5b91b00fe01f39a" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is an OPTIONS request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples</source>
          <target state="translated">요청이 OPTIONS 요청 인 경우에만 경로로 전달합니다. 더 많은 예제를 보려면 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 보십시오</target>
        </trans-unit>
        <trans-unit id="8029cdf2d25f0c8a87e355c232a05cf294c3e2a6" translate="yes" xml:space="preserve">
          <source>Dispatches to the path only if the request is an OPTIONS request. See &lt;a href=&quot;#match/3&quot;&gt;&lt;code&gt;match/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">요청이 OPTIONS 요청 인 경우에만 경로로 전달합니다. 자세한 예는 &lt;a href=&quot;#match/3&quot;&gt; &lt;code&gt;match/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="844b37d9d4baf2003a9abb5cf8a72c3e2f8e0680" translate="yes" xml:space="preserve">
          <source>Do not use this function to validate associations are required, instead pass the &lt;code&gt;:required&lt;/code&gt; option to &lt;a href=&quot;#cast_assoc/3&quot;&gt;&lt;code&gt;cast_assoc/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수를 사용하여 연관이 필요한지 검증하지 말고 대신 &lt;code&gt;:required&lt;/code&gt; 옵션을 &lt;a href=&quot;#cast_assoc/3&quot;&gt; &lt;code&gt;cast_assoc/3&lt;/code&gt; 에&lt;/a&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="3bf8f5d49b9dd2bf889c2090ea30f0b66efc80e7" translate="yes" xml:space="preserve">
          <source>Drop the storage for the given repository.</source>
          <target state="translated">지정된 저장소의 스토리지를 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="3696edaf2ed1c056e2a9e610b35c66b8c9c81a65" translate="yes" xml:space="preserve">
          <source>Drops the storage given by options</source>
          <target state="translated">옵션으로 주어진 스토리지를 삭제합니다</target>
        </trans-unit>
        <trans-unit id="7132740a80c40ddcb7bc2c507f7136ce65c76081" translate="yes" xml:space="preserve">
          <source>Drops the storage given by options.</source>
          <target state="translated">옵션으로 지정된 스토리지를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="bbfee27654e557ca6d136983cc0d993192098a89" translate="yes" xml:space="preserve">
          <source>Due to the prevalence of the pipe operator in Elixir, Ecto also supports a pipe-based syntax:</source>
          <target state="translated">Elixir의 파이프 연산자가 널리 보급되어 있기 때문에 Ecto는 파이프 기반 구문도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="879d8e7702bee3188afc919ead832f9d53f02deb" translate="yes" xml:space="preserve">
          <source>Dump CSRF state so it can be loaded in another process.</source>
          <target state="translated">CSRF 상태를 덤프하여 다른 프로세스에서로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30bbef50b4671de3933513ba08c2e94c67829796" translate="yes" xml:space="preserve">
          <source>Dumps a value to the given type</source>
          <target state="translated">주어진 유형으로 값을 덤프합니다</target>
        </trans-unit>
        <trans-unit id="b1a432d1d1196aa0d7f96d5eec91e28e3d91508c" translate="yes" xml:space="preserve">
          <source>Dumps a value to the given type.</source>
          <target state="translated">주어진 유형으로 값을 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="07afdd411a4cf789bb5131067a1bb6630f065a34" translate="yes" xml:space="preserve">
          <source>Dumps the &lt;code&gt;value&lt;/code&gt; for &lt;code&gt;type&lt;/code&gt; considering it will be embedded in &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 포함될 것으로 간주 하여 &lt;code&gt;type&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; 을 덤프 합니다 .</target>
        </trans-unit>
        <trans-unit id="83f6d0b27c5e6c2d4dad8c11cfdd14a299984099" translate="yes" xml:space="preserve">
          <source>Dumps the CSRF state from the connection.</source>
          <target state="translated">연결에서 CSRF 상태를 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="158591d0eb0fd833637e72dedfa9e328e663c7c7" translate="yes" xml:space="preserve">
          <source>Dumps the given struct defined by an embedded schema.</source>
          <target state="translated">포함 된 스키마로 정의 된 지정된 구조체를 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="0417dafea29d5dfc870d3de69a4c4e148be3b40e" translate="yes" xml:space="preserve">
          <source>Dumps the given term into an Ecto native type</source>
          <target state="translated">주어진 용어를 Ecto 기본 유형으로 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="553ee57bc177891a45abc3f403d26305442b25e5" translate="yes" xml:space="preserve">
          <source>Dumps the given term into an Ecto native type.</source>
          <target state="translated">주어진 용어를 Ecto 기본 유형으로 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="46f3545d74684749addefc8accbfca66690a037c" translate="yes" xml:space="preserve">
          <source>Duplicate Join Subscriptions</source>
          <target state="translated">중복 가입 구독</target>
        </trans-unit>
        <trans-unit id="c7d8d30b4b4cc0ebefd2ef7f85457a3500a15419" translate="yes" xml:space="preserve">
          <source>Duplicate Subscriptions</source>
          <target state="translated">중복 구독</target>
        </trans-unit>
        <trans-unit id="073c74bdd08ac89c82d34b21985574c996b8040f" translate="yes" xml:space="preserve">
          <source>Duplicated operations are not allowed.</source>
          <target state="translated">중복 된 작업은 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ddc07840a9dd97e5d9b21c437fa120c0b5258fa6" translate="yes" xml:space="preserve">
          <source>During casting, all &lt;code&gt;permitted&lt;/code&gt; parameters whose values match the specified type information will have their key name converted to an atom and stored together with the value as a change in the &lt;code&gt;:changes&lt;/code&gt; field of the changeset. All parameters that are not explicitly permitted are ignored.</source>
          <target state="translated">캐스팅 중에 값이 지정된 유형 정보와 일치하는 모든 &lt;code&gt;permitted&lt;/code&gt; 매개 변수는 키 이름을 원자로 변환하고 변경 세트의 &lt;code&gt;:changes&lt;/code&gt; 필드에 변경 사항 으로 값과 함께 저장합니다 . 명시 적으로 허용되지 않은 모든 매개 변수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="c86666453246d5cdf625e92d8cf6fc31a015a7ad" translate="yes" xml:space="preserve">
          <source>During the request, files are represented with a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Upload&lt;/code&gt;&lt;/a&gt; struct that contains three fields:</source>
          <target state="translated">요청 중에 파일은 다음 세 개의 필드를 포함 하는 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Upload&lt;/code&gt; &lt;/a&gt; 구조체 로 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="95239208a8ce56b0b9fafb46e146ac7d94cee756" translate="yes" xml:space="preserve">
          <source>During the request, files are represented with a &lt;a href=&quot;plug.upload#content&quot;&gt;&lt;code&gt;Plug.Upload&lt;/code&gt;&lt;/a&gt; struct that contains three fields:</source>
          <target state="translated">요청 중에 파일은 세 개의 필드를 포함 하는 &lt;a href=&quot;plug.upload#content&quot;&gt; &lt;code&gt;Plug.Upload&lt;/code&gt; &lt;/a&gt; 구조체 로 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="3ca7327a7bd2f5353024f65ee68945fbf10eccf7" translate="yes" xml:space="preserve">
          <source>Dynamic configuration</source>
          <target state="translated">동적 구성</target>
        </trans-unit>
        <trans-unit id="57d1ea9ebb2927a523b2fa1ba48aa25e8ceb8c49" translate="yes" xml:space="preserve">
          <source>Dynamic instrumentation</source>
          <target state="translated">다이나믹 계측</target>
        </trans-unit>
        <trans-unit id="63f95847c9a172342fffe74ea0e9ee86b32d1f29" translate="yes" xml:space="preserve">
          <source>Dynamic is also supported as each field in an update, for example:</source>
          <target state="translated">동적은 업데이트의 각 필드로 지원됩니다 (예 :</target>
        </trans-unit>
        <trans-unit id="9e83e2e52edf976173e31c30aa0305db62232df4" translate="yes" xml:space="preserve">
          <source>Dynamic is also supported inside updates, for example:</source>
          <target state="translated">동적은 업데이트 내에서도 지원됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aca0e11faafc714e1107582dd050cac6083af393" translate="yes" xml:space="preserve">
          <source>Dynamic query expressions allows developers to build queries expression bit by bit so they are later interpolated in a query.</source>
          <target state="translated">동적 쿼리 표현식을 통해 개발자는 비트별로 쿼리 표현식을 빌드 할 수 있으므로 나중에 쿼리에서 보간됩니다.</target>
        </trans-unit>
        <trans-unit id="e0b2275f70cca30ac774d384ecf147236ae66404" translate="yes" xml:space="preserve">
          <source>Dynamics are also supported in &lt;a href=&quot;#order_by/2&quot;&gt;&lt;code&gt;order_by/2&lt;/code&gt;&lt;/a&gt; clauses inside &lt;a href=&quot;#windows/2&quot;&gt;&lt;code&gt;windows/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">역학은 &lt;a href=&quot;#windows/2&quot;&gt; &lt;code&gt;windows/2&lt;/code&gt; &lt;/a&gt; 내부 &lt;a href=&quot;#order_by/2&quot;&gt; &lt;code&gt;order_by/2&lt;/code&gt; &lt;/a&gt; 절 에서도 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="5964d4d90ea5ad8021798b3b8082d961c70ba442" translate="yes" xml:space="preserve">
          <source>Dynamics are also supported in &lt;code&gt;partition_by/2&lt;/code&gt; clauses inside &lt;a href=&quot;#windows/2&quot;&gt;&lt;code&gt;windows/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">역학은 &lt;a href=&quot;#windows/2&quot;&gt; &lt;code&gt;windows/2&lt;/code&gt; &lt;/a&gt; 내부 &lt;code&gt;partition_by/2&lt;/code&gt; 절 에서도 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="afdc3801b103c98d5b428f8b1cd450b0eb1163c6" translate="yes" xml:space="preserve">
          <source>Dynamics can be interpolated inside keyword lists at the root of &lt;code&gt;group_by&lt;/code&gt;. For example, you can write:</source>
          <target state="translated">역학은 &lt;code&gt;group_by&lt;/code&gt; 의 루트에있는 키워드 목록 내에서 보간 될 수 있습니다 . 예를 들어 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e2abb291b3116e93b04e0612abec56e0c0fff78" translate="yes" xml:space="preserve">
          <source>Dynamics can be interpolated inside keyword lists at the root of &lt;code&gt;order_by&lt;/code&gt;. For example, you can write:</source>
          <target state="translated">역학은 &lt;code&gt;order_by&lt;/code&gt; 의 루트에있는 키워드 목록 내에서 보간 될 수 있습니다 . 예를 들어 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77bf054b1752c47ccf22f28d3dd4a195ee74c2d7" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Router&lt;/code&gt;&lt;/a&gt; has a plug pipeline, defined by &lt;a href=&quot;plug.builder&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt;, and by default it requires two plugs: &lt;code&gt;:match&lt;/code&gt; and &lt;code&gt;:dispatch&lt;/code&gt;. &lt;code&gt;:match&lt;/code&gt; is responsible for finding a matching route which is then forwarded to &lt;code&gt;:dispatch&lt;/code&gt;. This means users can easily hook into the router mechanism and add behaviour before match, before dispatch, or after both. All of the options given to &lt;code&gt;use Plug.Router&lt;/code&gt; are forwarded to &lt;a href=&quot;plug.builder&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;plug.builder&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; module for more information on the &lt;code&gt;plug&lt;/code&gt; macro and on the available options.</source>
          <target state="translated">각 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Router&lt;/code&gt; &lt;/a&gt; 에는 &lt;a href=&quot;plug.builder&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; 에 의해 정의 된 플러그 파이프 라인이 있으며 기본적으로 &lt;code&gt;:match&lt;/code&gt; 및 &lt;code&gt;:dispatch&lt;/code&gt; 두 개의 플러그가 필요합니다 . &lt;code&gt;:match&lt;/code&gt; 는 일치하는 경로를 찾은 다음 &lt;code&gt;:dispatch&lt;/code&gt; 로 전달됩니다 . 즉, 사용자는 라우터 메커니즘에 쉽게 연결하여 매치 전, 디스패치 전 또는 둘 다 후에 동작을 추가 할 수 있습니다. 에 주어진 모든 옵션 &lt;code&gt;use Plug.Router&lt;/code&gt; 전달됩니다 &lt;a href=&quot;plug.builder&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;plug&lt;/code&gt; 매크로 및 사용 가능한 옵션에 대한 자세한 내용은 &lt;a href=&quot;plug.builder&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="933904af8bf3dbaf33d220a1dd41c4a3cbf4454e" translate="yes" xml:space="preserve">
          <source>Each Phoenix endpoint defines its own &lt;a href=&quot;#instrument/3&quot;&gt;&lt;code&gt;instrument/3&lt;/code&gt;&lt;/a&gt; macro. This macro is called like this:</source>
          <target state="translated">각 Phoenix 엔드 포인트는 자체 &lt;a href=&quot;#instrument/3&quot;&gt; &lt;code&gt;instrument/3&lt;/code&gt; &lt;/a&gt; 매크로를 정의합니다 . 이 매크로는 다음과 같이 불립니다.</target>
        </trans-unit>
        <trans-unit id="d2b643fec057644ebdc3a745c9f3b74028c8c0a8" translate="yes" xml:space="preserve">
          <source>Each element of the plug pipeline (according to the type signature of this function) has the form:</source>
          <target state="translated">플러그 파이프 라인의 각 요소 (이 기능의 형식 서명에 따라)는 다음과 같은 형식을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="eb685d1d5301b54bb6fdbd19bd3a4def62faa983" translate="yes" xml:space="preserve">
          <source>Each join accepts the following options:</source>
          <target state="translated">각 조인은 다음 옵션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="c50d21214c659115473b7563f287066d99833476" translate="yes" xml:space="preserve">
          <source>Each message also has a &lt;code&gt;ref&lt;/code&gt; field which is used to track responses.</source>
          <target state="translated">각 메시지에는 응답을 추적하는 데 사용되는 &lt;code&gt;ref&lt;/code&gt; 필드 도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b807df4c8b8158b0d38aaa1ec1fe7695f9efe52" translate="yes" xml:space="preserve">
          <source>Each parser also accepts options to be given directly to it by using tuples. For example, to support file uploads it is common pass the &lt;code&gt;:length&lt;/code&gt;, &lt;code&gt;:read_length&lt;/code&gt; and &lt;code&gt;:read_timeout&lt;/code&gt; option to the multipart parser:</source>
          <target state="translated">각 파서는 또한 튜플을 사용하여 직접 제공되는 옵션을 허용합니다. 예를 들어 파일 업로드를 지원하려면 &lt;code&gt;:length&lt;/code&gt; , &lt;code&gt;:read_length&lt;/code&gt; 및 &lt;code&gt;:read_timeout&lt;/code&gt; 옵션을 multipart 파서에 일반적으로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="74203beff6b2286d00dc12283d432f9cab89c9ed" translate="yes" xml:space="preserve">
          <source>Each parser also accepts options to be given directly to it by using tuples. For example, to support file uploads it is common to pass the &lt;code&gt;:length&lt;/code&gt;, &lt;code&gt;:read_length&lt;/code&gt; and &lt;code&gt;:read_timeout&lt;/code&gt; option to the multipart parser:</source>
          <target state="translated">각 파서는 또한 튜플을 사용하여 직접 제공되는 옵션을 허용합니다. 예를 들어 파일 업로드를 지원하려면 &lt;code&gt;:length&lt;/code&gt; , &lt;code&gt;:read_length&lt;/code&gt; 및 &lt;code&gt;:read_timeout&lt;/code&gt; 옵션을 멀티 파트 파서 에 전달하는 것이 일반적입니다 .</target>
        </trans-unit>
        <trans-unit id="4137e6a78f65b04c761ff22f86213d0d80a2eb7e" translate="yes" xml:space="preserve">
          <source>Each repository in Ecto defines a &lt;code&gt;start_link/0&lt;/code&gt; function that needs to be invoked before using the repository. In general, this function is not called directly, but used as part of your application supervision tree.</source>
          <target state="translated">Ecto의 각 저장소는 저장소를 사용하기 전에 호출해야하는 &lt;code&gt;start_link/0&lt;/code&gt; 함수를 정의 합니다. 일반적으로이 함수는 직접 호출되지는 않지만 응용 프로그램 감독 트리의 일부로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42676af9c1801515132454954363e3968139cf8c" translate="yes" xml:space="preserve">
          <source>Each route needs to return a connection, as per the Plug spec. A catch-all &lt;code&gt;match&lt;/code&gt; is recommended to be defined as in the example above, otherwise routing fails with a function clause error.</source>
          <target state="translated">각 라우트는 플러그 사양에 따라 연결을 반환해야합니다. catch-all &lt;code&gt;match&lt;/code&gt; 는 위의 예와 같이 정의하는 것이 좋습니다. 그렇지 않으면 function 절 오류로 라우팅이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="894c9d3de1257a3f179af52621c4783a296b6fb9" translate="yes" xml:space="preserve">
          <source>Each route receives a &lt;code&gt;conn&lt;/code&gt; variable containing a &lt;a href=&quot;plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; struct and it needs to return a connection, as per the Plug spec. A catch-all &lt;code&gt;match&lt;/code&gt; is recommended to be defined as in the example above, otherwise routing fails with a function clause error.</source>
          <target state="translated">각 경로는 &lt;a href=&quot;plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt; 구조체를 포함 하는 &lt;code&gt;conn&lt;/code&gt; 변수를 수신하며 Plug 사양에 따라 연결을 반환해야합니다. 위의 예에서와 같이 포괄 &lt;code&gt;match&lt;/code&gt; 를 정의하는 것이 좋습니다. 그렇지 않으면 라우팅이 함수 절 오류와 함께 실패합니다.</target>
        </trans-unit>
        <trans-unit id="1d1ee628d1aaf1fd735f2bc3b4b03f73d749beb5" translate="yes" xml:space="preserve">
          <source>Each socket connection is started by the transport and the process that controls the socket likely belongs to the transport. However, some sockets spawn new processes, such as &lt;a href=&quot;phoenix.socket&quot;&gt;&lt;code&gt;Phoenix.Socket&lt;/code&gt;&lt;/a&gt; which spawns channels, and this gives the ability to start a supervision tree associated to the socket.</source>
          <target state="translated">각 소켓 연결은 전송에 의해 시작되며 소켓을 제어하는 ​​프로세스는 전송에 속할 수 있습니다. 그러나 일부 소켓과 같은 새로운 프로세스, 산란 &lt;a href=&quot;phoenix.socket&quot;&gt; &lt;code&gt;Phoenix.Socket&lt;/code&gt; &lt;/a&gt; 급부상 채널을,이 소켓에 관련된 감독 트리를 시작 할 수있는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="dcdf26136c50360b65e21c593b2aa25573fb61b1" translate="yes" xml:space="preserve">
          <source>Ecto</source>
          <target state="translated">Ecto</target>
        </trans-unit>
        <trans-unit id="e0808b72726eab51305183dbafca6b5b8cd62cd6" translate="yes" xml:space="preserve">
          <source>Ecto allows a limited set of expressions inside queries. In the query below, for example, we use &lt;code&gt;u.age&lt;/code&gt; to access a field, the &lt;code&gt;&amp;gt;&lt;/code&gt; comparison operator and the literal &lt;code&gt;0&lt;/code&gt;:</source>
          <target state="translated">Ecto는 쿼리 내에서 제한된 표현식 집합을 허용합니다. 예를 들어 아래 쿼리에서 &lt;code&gt;u.age&lt;/code&gt; 를 사용하여 필드, &lt;code&gt;&amp;gt;&lt;/code&gt; 비교 연산자 및 리터럴 &lt;code&gt;0&lt;/code&gt; 에 액세스합니다 .</target>
        </trans-unit>
        <trans-unit id="94f3cb6465c4dd9c65e9f19e4a6c3ad6ff98581a" translate="yes" xml:space="preserve">
          <source>Ecto allows developers to say that a table in their Ecto schema map to a different column in their database:</source>
          <target state="translated">Ecto를 통해 개발자는 Ecto 스키마의 테이블이 데이터베이스의 다른 열에 매핑된다고 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc4695641349036d0b21011fb2419472a4f2177b" translate="yes" xml:space="preserve">
          <source>Ecto also supports &lt;a href=&quot;http://en.wikipedia.org/wiki/Optimistic_concurrency_control&quot;&gt;optimistic locking&lt;/a&gt; but not through queries. For more information on optimistic locking, have a look at the &lt;a href=&quot;ecto.changeset#optimistic_lock/3&quot;&gt;&lt;code&gt;Ecto.Changeset.optimistic_lock/3&lt;/code&gt;&lt;/a&gt; function</source>
          <target state="translated">Ecto는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Optimistic_concurrency_control&quot;&gt;낙관적 잠금&lt;/a&gt; 을 지원 하지만 쿼리를 통하지는 않습니다. 낙관적 잠금에 대한 자세한 내용은 &lt;a href=&quot;ecto.changeset#optimistic_lock/3&quot;&gt; &lt;code&gt;Ecto.Changeset.optimistic_lock/3&lt;/code&gt; &lt;/a&gt; 함수를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8e1c9f9a91281d88321b17b86669b0b0f5795ef0" translate="yes" xml:space="preserve">
          <source>Ecto also supports composite primary keys, which is where you need to use &lt;code&gt;primary_key: true&lt;/code&gt; for the fields in your schema. This usually goes along with setting &lt;code&gt;@primary_key false&lt;/code&gt; to disable generation of additional primary key fields.</source>
          <target state="translated">Ecto는 또한 스키마의 필드에 대해 &lt;code&gt;primary_key: true&lt;/code&gt; 를 사용해야하는 복합 기본 키를 지원합니다 . 이는 일반적으로 추가 기본 키 필드 생성을 비활성화하기 위해 &lt;code&gt;@primary_key false&lt;/code&gt; 설정과 함께 진행 됩니다.</target>
        </trans-unit>
        <trans-unit id="d260b9af1a7917d7e4d184502a29c53ba67c3e54" translate="yes" xml:space="preserve">
          <source>Ecto also supports composite primary keys.</source>
          <target state="translated">Ecto는 복합 기본 키도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="a4adc50452a5297dcd0585501140d5cb5dfc117e" translate="yes" xml:space="preserve">
          <source>Ecto also supports defining associations in terms of other associations via the &lt;code&gt;:through&lt;/code&gt; option. Let&amp;rsquo;s see an example:</source>
          <target state="translated">Ecto는 또한 &lt;code&gt;:through&lt;/code&gt; 옵션을 통해 다른 연관 측면에서 연관 정의를 지원합니다 . 예를 보자.</target>
        </trans-unit>
        <trans-unit id="b2c285947a548bb0bf3241ebf045d9796075a325" translate="yes" xml:space="preserve">
          <source>Ecto also supports defining associations in terms of other associations via the &lt;code&gt;:through&lt;/code&gt; option. Let's see an example:</source>
          <target state="translated">Ecto는 또한 &lt;code&gt;:through&lt;/code&gt; 옵션을 통해 다른 연결 측면에서 연결 정의를 지원합니다 . 예를 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="1b37c67383eec60d8334adc3fc230ee78bce3dc6" translate="yes" xml:space="preserve">
          <source>Ecto also supports embeds. While associations keep parent and child entries in different tables, embeds stores the child along side the parent.</source>
          <target state="translated">Ecto는 임베드도 지원합니다. 연관은 상위 및 하위 항목을 다른 테이블에 유지하지만 임베드는 하위와 함께 하위를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="908f4eba6dd75fb3bf8e7ee20ba68b4314aa6545" translate="yes" xml:space="preserve">
          <source>Ecto also supports many of the windows functions found in SQL databases. See &lt;a href=&quot;ecto.query.windowapi&quot;&gt;&lt;code&gt;Ecto.Query.WindowAPI&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">Ecto는 또한 SQL 데이터베이스에있는 많은 Windows 기능을 지원합니다. 자세한 내용은 &lt;a href=&quot;ecto.query.windowapi&quot;&gt; &lt;code&gt;Ecto.Query.WindowAPI&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5c35ea8a0006f885d97bfefda29f8a7f60b833a9" translate="yes" xml:space="preserve">
          <source>Ecto and SQL</source>
          <target state="translated">엑토와 SQL</target>
        </trans-unit>
        <trans-unit id="543e777ba71274048b82434d7ca3c6e914af7361" translate="yes" xml:space="preserve">
          <source>Ecto automatically applies the action for you when you call Repo.insert/update/delete, but if you want to show errors manually you can also set the action yourself, either directly on the &lt;code&gt;Ecto.Changeset&lt;/code&gt; struct field or by using &lt;code&gt;Ecto.Changeset.apply_action/2&lt;/code&gt;.</source>
          <target state="translated">Ecto는 Repo.insert / update / delete를 호출 할 때 자동으로 조치를 적용하지만, 오류를 수동으로 표시하려면 &lt;code&gt;Ecto.Changeset&lt;/code&gt; 구조체 필드 에서 직접 또는 &lt;code&gt;Ecto.Changeset.apply_action/2&lt;/code&gt; 을 사용하여 직접 조치를 설정할 수도 있습니다 . apply_action / 2 .</target>
        </trans-unit>
        <trans-unit id="1f049343842e4a513055f3ab397ff02c6dedf67a" translate="yes" xml:space="preserve">
          <source>Ecto changesets provide both validations and constraints which are ultimately turned into errors in case something goes wrong.</source>
          <target state="translated">Ecto 변경 세트는 유효성 검사와 제약 조건을 모두 제공하여 문제가 발생할 경우 궁극적으로 오류로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="0e6a7ceb26ad9821e6a3b4856e571db0d01d37ac" translate="yes" xml:space="preserve">
          <source>Ecto generators will automatically open the generated files if you have &lt;code&gt;ECTO_EDITOR&lt;/code&gt; set in your environment variable.</source>
          <target state="translated">환경 변수에 &lt;code&gt;ECTO_EDITOR&lt;/code&gt; 가 설정되어 있으면 Ecto 생성기가 생성 된 파일을 자동으로 엽니 다 .</target>
        </trans-unit>
        <trans-unit id="68384cbbdc911478cd5e5264d1bb10fb91095ea3" translate="yes" xml:space="preserve">
          <source>Ecto is split into 4 main components:</source>
          <target state="translated">Ecto는 4 가지 주요 구성 요소로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="385eb8af979a59dc0f9156a0bfa4ed70dc78dd78" translate="yes" xml:space="preserve">
          <source>Ecto provides many tasks to help your workflow as well as code generators. You can find all available tasks by typing &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt; inside a project with Ecto listed as a dependency.</source>
          <target state="translated">Ecto는 코드 생성기뿐만 아니라 워크 플로우에 도움이되는 많은 작업을 제공합니다. Ecto가 종속성으로 나열된 프로젝트 내에서 &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt; 를 입력하여 사용 가능한 모든 작업을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88ef839ecd01e6c797ad024ae6bd2fdc011a46c1" translate="yes" xml:space="preserve">
          <source>Ecto provides many tasks to help your workflow as well as code generators. You can find all available tasks by typing &lt;code&gt;mix help&lt;/code&gt; inside a project with Ecto listed as a dependency.</source>
          <target state="translated">Ecto는 코드 생성기뿐만 아니라 워크 플로를 돕는 많은 작업을 제공합니다. Ecto가 종속성으로 나열된 프로젝트에서 &lt;code&gt;mix help&lt;/code&gt; 를 입력하면 사용 가능한 모든 작업을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="369659805b6b5fab30fa846f0eaaf2f98192e800" translate="yes" xml:space="preserve">
          <source>Ecto provides two types of custom types: basic types and parameterized types. Basic types are simple, requiring only four callbacks to be implemented, and are enough for most occasions. Parameterized types can be customized on the field definition and provide a wilder variety of callbacks.</source>
          <target state="translated">Ecto는 기본 유형과 매개 변수화 된 유형의 두 가지 유형의 사용자 정의 유형을 제공합니다. 기본 유형은 간단하며 4 개의 콜백 만 구현하면되며 대부분의 경우에 충분합니다. 매개 변수화 된 유형은 필드 정의에서 사용자 정의 할 수 있으며보다 다양한 콜백을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3681d1859c813fd536d00578ddf22cb6924eeddb" translate="yes" xml:space="preserve">
          <source>Ecto queries are composable. For example, the query above can actually be defined in two parts:</source>
          <target state="translated">Ecto 쿼리는 작성 가능합니다. 예를 들어 위의 쿼리는 실제로 두 부분으로 정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2da1bf196269568f33d7352b70b059cbe9365ba2" translate="yes" xml:space="preserve">
          <source>Ecto requires developers to specify the key &lt;code&gt;:ecto_repos&lt;/code&gt; in their application configuration before using tasks like &lt;code&gt;ecto.create&lt;/code&gt; and &lt;code&gt;ecto.migrate&lt;/code&gt;. For example:</source>
          <target state="translated">Ecto는 개발자가 &lt;code&gt;ecto.create&lt;/code&gt; 및 &lt;code&gt;ecto.migrate&lt;/code&gt; 와 같은 작업을 사용하기 전에 응용 프로그램 구성에 키 &lt;code&gt;:ecto_repos&lt;/code&gt; 를 지정해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e4ecd730cb9b1dd813d32119673f0aa61b875ab1" translate="yes" xml:space="preserve">
          <source>Ecto supports defining associations on schemas:</source>
          <target state="translated">Ecto는 스키마에 대한 연관 정의를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8ef0e4fa90c3d01b7b8393d6382b1801000cca1e" translate="yes" xml:space="preserve">
          <source>Ecto supports following values for &lt;code&gt;interval&lt;/code&gt; option: &lt;code&gt;&quot;year&quot;&lt;/code&gt;, &lt;code&gt;&quot;month&quot;&lt;/code&gt;, &lt;code&gt;&quot;week&quot;&lt;/code&gt;, &lt;code&gt;&quot;day&quot;&lt;/code&gt;, &lt;code&gt;&quot;hour&quot;&lt;/code&gt;, &lt;code&gt;&quot;minute&quot;&lt;/code&gt;, &lt;code&gt;&quot;second&quot;&lt;/code&gt;, &lt;code&gt;&quot;millisecond&quot;&lt;/code&gt;, and &lt;code&gt;&quot;microsecond&quot;&lt;/code&gt;.</source>
          <target state="translated">Ecto는 &lt;code&gt;interval&lt;/code&gt; 옵션에 대해 &lt;code&gt;&quot;year&quot;&lt;/code&gt; , &lt;code&gt;&quot;month&quot;&lt;/code&gt; , &lt;code&gt;&quot;week&quot;&lt;/code&gt; , &lt;code&gt;&quot;day&quot;&lt;/code&gt; , &lt;code&gt;&quot;hour&quot;&lt;/code&gt; , &lt;code&gt;&quot;minute&quot;&lt;/code&gt; , &lt;code&gt;&quot;second&quot;&lt;/code&gt; , &lt;code&gt;&quot;millisecond&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;microsecond&quot;&lt;/code&gt; 값을 지원 합니다.</target>
        </trans-unit>
        <trans-unit id="8f5b97a18c2bf62f93a37d4e1e34d2d1add2db9c" translate="yes" xml:space="preserve">
          <source>Ecto supports two ID types, called &lt;code&gt;:id&lt;/code&gt; and &lt;code&gt;:binary_id&lt;/code&gt;, which are often used as the type for primary keys and associations.</source>
          <target state="translated">Ecto는 &lt;code&gt;:id&lt;/code&gt; 및 &lt;code&gt;:binary_id&lt;/code&gt; 라는 두 가지 ID 유형을 지원하며 기본 키 및 연관 유형으로 자주 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fc4991eabecdb96fb9a632710bae981cce077544" translate="yes" xml:space="preserve">
          <source>Ecto telemetry events</source>
          <target state="translated">Ecto 원격 측정 이벤트</target>
        </trans-unit>
        <trans-unit id="20a84ad3515a8a2de63286eb205c801c7f85ca64" translate="yes" xml:space="preserve">
          <source>Ecto type</source>
          <target state="translated">엑토 타입</target>
        </trans-unit>
        <trans-unit id="739fdc6f801f8cd9bb885970f4e968f7c6d0a112" translate="yes" xml:space="preserve">
          <source>Ecto will ensure &lt;code&gt;^title&lt;/code&gt; is cast to the given type and enforce such type at the database level. If the value is returned in a &lt;code&gt;select&lt;/code&gt;, Ecto will also enforce the proper type throughout.</source>
          <target state="translated">Ecto는 &lt;code&gt;^title&lt;/code&gt; 이 주어진 유형으로 캐스트되도록하고 데이터베이스 레벨에서 그러한 유형을 시행합니다. &lt;code&gt;select&lt;/code&gt; 에 값이 반환 되면 Ecto는 전체에 적절한 유형을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="109e0f72e455dc2c107b7ea7e25da2f337435680" translate="yes" xml:space="preserve">
          <source>Ecto.Adapter &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">엑서스 어댑터 &lt;small&gt;동작&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c7b3436e4efa478386e69de3f89bccf78a5331ed" translate="yes" xml:space="preserve">
          <source>Ecto.Adapter.Queryable &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Ecto.Adapter.Queryable &lt;small&gt;동작&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="28222015c5ff8c27111fd36a355d891862e983ed" translate="yes" xml:space="preserve">
          <source>Ecto.Adapter.Schema &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Ecto.Adapter.Schema &lt;small&gt;동작&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="220b9623a8e6a7a65e78d057a3d212aeb1b2de12" translate="yes" xml:space="preserve">
          <source>Ecto.Adapter.Storage &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Ecto.Adapter.Storage &lt;small&gt;동작&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="642d5ee61cdbf3b8b6100f8fd20b4c8ab0ab3603" translate="yes" xml:space="preserve">
          <source>Ecto.Adapter.Transaction &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Ecto.Adapter.Transaction &lt;small&gt;동작&lt;/small&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
