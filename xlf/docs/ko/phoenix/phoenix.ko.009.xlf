<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="phoenix">
    <body>
      <group id="phoenix">
        <trans-unit id="ead77e442e86b52de3ccefbb37f7c42d597bc7a4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#recursive_ctes/2&quot;&gt;&lt;code&gt;recursive_ctes/2&lt;/code&gt;&lt;/a&gt; to enable recursive mode for CTEs.</source>
          <target state="translated">사용 &lt;a href=&quot;#recursive_ctes/2&quot;&gt; &lt;code&gt;recursive_ctes/2&lt;/code&gt; &lt;/a&gt; CTE를위한 재귀 모드를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6c0e77c01ab5b229beb015c2e31484e2f9e98671" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;on_conflict: :replace_all&lt;/code&gt;, although that will replace all fields in the database with the ones in the struct/changeset, including autogenerated fields such as &lt;code&gt;insert_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;insert_at&lt;/code&gt; 및 &lt;code&gt;updated_at&lt;/code&gt; 와 같은 자동 생성 필드를 포함하여 데이터베이스의 모든 필드를 struct / changeset의 필드로 대체하지만 &lt;code&gt;on_conflict: :replace_all&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="015a305002d1eb882ff8225a734c9350bf40b20d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;on_conflict: :replace_all&lt;/code&gt;, although that will replace all fields in the database with the ones in the struct/changeset, including autogenerated fields such as &lt;code&gt;inserted_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;:</source>
          <target state="translated">사용 &lt;code&gt;on_conflict: :replace_all&lt;/code&gt; , 그와 같은 자동 생성 필드를 포함 구조체 / 변경 집합에있는 사람과 데이터베이스의 모든 필드를 대체하지만 &lt;code&gt;inserted_at&lt;/code&gt; 및 &lt;code&gt;updated_at&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="23070b2e4526f03851575ba9bcfd692c891aecdb" translate="yes" xml:space="preserve">
          <source>Use a tool such as 'authbind' to give an unprivileged user/group permission to bind to specific ports</source>
          <target state="translated">'authbind'와 같은 도구를 사용하여 권한이없는 사용자 / 그룹에게 특정 포트에 바인딩 할 수있는 권한을 부여하십시오.</target>
        </trans-unit>
        <trans-unit id="14a29ba383c84d15925a42f871530f52904ae908" translate="yes" xml:space="preserve">
          <source>Use cases</source>
          <target state="translated">사용 사례</target>
        </trans-unit>
        <trans-unit id="8684d51bb5f62a9e50ab009fb4442d3b231410e5" translate="yes" xml:space="preserve">
          <source>Use with Ecto.Multi</source>
          <target state="translated">Ecto.Multi와 함께 사용</target>
        </trans-unit>
        <trans-unit id="a90d7dd6dd9ecf04d1a3f626fd3e37ab75d4315e" translate="yes" xml:space="preserve">
          <source>Use with function</source>
          <target state="translated">기능과 함께 사용</target>
        </trans-unit>
        <trans-unit id="2fa03848454c0a754d628914fc7c7ed945af1281" translate="yes" xml:space="preserve">
          <source>Used by Phoenix to check if a given root path requires recompilation.</source>
          <target state="translated">주어진 루트 경로에 재 컴파일이 필요한지 확인하기 위해 Phoenix에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c1749fdb12f2b91cbf9dd3b8f480eb97f2055103" translate="yes" xml:space="preserve">
          <source>Used by PubSub adapters to handle &amp;ldquo;local&amp;rdquo; subscriptions. Defines an ets dispatch table for routing subcription requests. Extendable by PubSub adapters by providing a list of &lt;code&gt;dispatch_rules&lt;/code&gt; to extend the dispatch table.</source>
          <target state="translated">PubSub 어댑터가 &quot;로컬&quot;구독을 처리하는 데 사용합니다. 서브 크립 션 요청 라우팅을위한 ets 디스패치 테이블을 정의합니다. 디스패치 테이블을 확장하기 위해 &lt;code&gt;dispatch_rules&lt;/code&gt; 목록을 제공하여 PubSub 어댑터 로 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ae9003f6d331c1242f2cf9606735dbdf58d18ff" translate="yes" xml:space="preserve">
          <source>Used by both &lt;a href=&quot;plug.debugger&quot;&gt;&lt;code&gt;Plug.Debugger&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;plug.errorhandler&quot;&gt;&lt;code&gt;Plug.ErrorHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;plug.debugger&quot;&gt; &lt;code&gt;Plug.Debugger&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;plug.errorhandler&quot;&gt; &lt;code&gt;Plug.ErrorHandler&lt;/code&gt; &lt;/a&gt; 모두에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="adcdf3733ee363feeb7801efde1aafa420b99730" translate="yes" xml:space="preserve">
          <source>Used in &lt;code&gt;select&lt;/code&gt; to specify which fields should be returned as a map</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 에서 어떤 필드를 맵으로 반환할지 지정하는 데 사용</target>
        </trans-unit>
        <trans-unit id="598f8280abf4b1815a82fdeb396afd655c0a4f80" translate="yes" xml:space="preserve">
          <source>Used in &lt;code&gt;select&lt;/code&gt; to specify which fields should be returned as a map.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 에서 어떤 필드를 맵으로 반환할지 지정하는 데 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="3ed792ee3ca2a15dcd2154c549eee4655cd2df25" translate="yes" xml:space="preserve">
          <source>Used in &lt;code&gt;select&lt;/code&gt; to specify which struct fields should be returned</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 에서 어떤 구조체 필드를 반환해야하는지 지정하는 데 사용</target>
        </trans-unit>
        <trans-unit id="288d31d60378a16fd5fd8c46dbb3354c912cc90b" translate="yes" xml:space="preserve">
          <source>Used in &lt;code&gt;select&lt;/code&gt; to specify which struct fields should be returned.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 에서 어떤 구조체 필드를 반환해야하는지 지정하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="15caa1005029524c8bb036c0816e933f88aa31a1" translate="yes" xml:space="preserve">
          <source>Used internally by Channels for pubsub broadcast but also provides an API for direct usage.</source>
          <target state="translated">채널에서 내부적으로 pubsub 브로드 캐스트를 위해 사용되지만 직접 사용을위한 API도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="73ce3de8ff130721e50c0a84455f3b6d8bd32ae9" translate="yes" xml:space="preserve">
          <source>Used when merging two sets.</source>
          <target state="translated">두 세트를 병합 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="701200e5a9d67fabb5783f45cd443f3f9219a39d" translate="yes" xml:space="preserve">
          <source>Useful for applying the same short-hand alias handling to other values besides the second argument in route definitions.</source>
          <target state="translated">경로 정의에서 두 번째 인수 외에 다른 값에 동일한 단축 별칭 처리를 적용하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d480d007052d87cacf8a8f49a4895a83a879a561" translate="yes" xml:space="preserve">
          <source>Useful for checking the connectivity status when mounting the view. For example, on initial page render, the view is mounted statically, rendered, and the HTML is sent to the client. Once the client connects to the server, a LiveView is then spawned and mounted statefully within a process. Use &lt;a href=&quot;#connected?/1&quot;&gt;&lt;code&gt;connected?/1&lt;/code&gt;&lt;/a&gt; to conditionally perform stateful work, such as subscribing to pubsub topics, sending messages, etc.</source>
          <target state="translated">뷰를 마운트 할 때 연결 상태를 확인하는 데 유용합니다. 예를 들어, 초기 페이지 렌더링에서 뷰는 정적으로 마운트되고 렌더링되며 HTML이 클라이언트로 전송됩니다. 클라이언트가 서버에 연결되면 LiveView가 생성되고 프로세스 내에서 상태 적으로 마운트됩니다. &lt;a href=&quot;#connected?/1&quot;&gt; &lt;code&gt;connected?/1&lt;/code&gt; &lt;/a&gt; 을 사용 하여 pubsub 주제 구독, 메시지 전송 등과 같은 상태 저장 작업을 조건부로 수행합니다.</target>
        </trans-unit>
        <trans-unit id="fa0b6703d2dc8c62a92e223ce4f67043872e69e4" translate="yes" xml:space="preserve">
          <source>Useful for defining routes not included in the builtin macros.</source>
          <target state="translated">내장 매크로에 포함되지 않은 경로를 정의하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="6f5aa9e4c90523ac98eb38c3c95ac594d7d3dba8" translate="yes" xml:space="preserve">
          <source>Useful for defining routes not included in the builtin macros:</source>
          <target state="translated">내장 매크로에 포함되지 않은 경로를 정의하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="73f615e274f4726bf4a92195e1edb0dc0a499b4c" translate="yes" xml:space="preserve">
          <source>Useful for lazily assigning values and referencing parent assigns.</source>
          <target state="translated">값을 느리게 할당하고 부모 할당을 참조하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="426483ab41fe8e3ab8e3e8311ea44a2228328555" translate="yes" xml:space="preserve">
          <source>Useful for radio buttons and inputs like multiselect checkboxes.</source>
          <target state="translated">다중 선택 확인란과 같은 라디오 버튼 및 입력에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="0b0179c1db638c4bba3d825683cf063ebc693b10" translate="yes" xml:space="preserve">
          <source>Useful for testing LiveViews that are not directly routable, such as those built as small components to be re-used in multiple parents. Testing routable LiveViews is still recommended whenever possible since features such as live navigation require routable LiveViews.</source>
          <target state="translated">여러 상위에서 재사용 할 작은 구성 요소로 구축 된 것과 같이 직접 라우팅 할 수없는 LiveView를 테스트하는 데 유용합니다. 실시간 탐색과 같은 기능에는 라우팅 가능한 LiveView가 필요하므로 라우팅 가능한 LiveView를 테스트하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="0c10403d9b6e78272e7ec24872b4085024e4fb5e" translate="yes" xml:space="preserve">
          <source>Useful for testing UserSocket authentication. Returns the result of the handler&amp;rsquo;s &lt;a href=&quot;#connect/2&quot;&gt;&lt;code&gt;connect/2&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">UserSocket 인증 테스트에 유용합니다. 핸들러의 &lt;a href=&quot;#connect/2&quot;&gt; &lt;code&gt;connect/2&lt;/code&gt; &lt;/a&gt; 콜백 결과를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d5e53c147c674a9f22d4ce39da313f838b35eb8e" translate="yes" xml:space="preserve">
          <source>Useful for testing UserSocket authentication. Returns the result of the handler's &lt;a href=&quot;#connect/3&quot;&gt;&lt;code&gt;connect/3&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">UserSocket 인증 테스트에 유용합니다. 핸들러의 &lt;a href=&quot;#connect/3&quot;&gt; &lt;code&gt;connect/3&lt;/code&gt; &lt;/a&gt; 콜백 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3917d33ae565390a54110083bbcbf61fd8de0e7e" translate="yes" xml:space="preserve">
          <source>Useful for testing actions that you expect raise an error and have the response wrapped in an HTTP status, with content usually rendered by your MyApp.ErrorView.</source>
          <target state="translated">일반적으로 MyApp.ErrorView에 의해 렌더링되는 내용으로 오류가 발생하고 응답이 HTTP 상태로 래핑 될 것으로 예상되는 작업을 테스트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="39af971809e520c6487408ae9c59a76f51c6622c" translate="yes" xml:space="preserve">
          <source>Useful for unit testing Plugs where Endpoint and/or router pipeline plugs are required for proper setup.</source>
          <target state="translated">단위 테스트에 유용 올바른 설정을 위해 엔드 포인트 및 / 또는 라우터 파이프 라인 플러그가 필요한 플러그.</target>
        </trans-unit>
        <trans-unit id="6abe1617bdcc542d014db2267dd20c1df5fe0602" translate="yes" xml:space="preserve">
          <source>Useful to ensure that links that change data are not triggered by search engines and other spidering software.</source>
          <target state="translated">데이터를 변경하는 링크가 검색 엔진 및 기타 스파이더 링 소프트웨어에 의해 트리거되지 않도록하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="6ae3213d387f36cbc94fc2526095ab015dea0cbf" translate="yes" xml:space="preserve">
          <source>Useful when wrapping another input inside a label.</source>
          <target state="translated">레이블 안에 다른 입력을 감쌀 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c0b6f9882cb0f08538edc1e99d4488a957b9b322" translate="yes" xml:space="preserve">
          <source>Useful when you need to reply to a push that can&amp;rsquo;t otherwise be handled using the &lt;code&gt;{:reply, {status, payload}, socket}&lt;/code&gt; return from your &lt;code&gt;handle_in&lt;/code&gt; callbacks. &lt;a href=&quot;#reply/2&quot;&gt;&lt;code&gt;reply/2&lt;/code&gt;&lt;/a&gt; will be used in the rare cases you need to perform work in another process and reply when finished by generating a reference to the push with &lt;a href=&quot;#socket_ref/1&quot;&gt;&lt;code&gt;socket_ref/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handle_in&lt;/code&gt; 콜백 에서 &lt;code&gt;{:reply, {status, payload}, socket}&lt;/code&gt; 리턴을 사용하여 처리 할 수없는 푸시에 응답해야 할 때 유용 합니다 . &lt;a href=&quot;#reply/2&quot;&gt; &lt;code&gt;reply/2&lt;/code&gt; &lt;/a&gt; 는 드문 경우에 다른 프로세스에서 작업을 수행하고 &lt;a href=&quot;#socket_ref/1&quot;&gt; &lt;code&gt;socket_ref/1&lt;/code&gt; &lt;/a&gt; 을 사용하여 푸시에 대한 참조를 생성하여 완료되면 응답해야합니다 .</target>
        </trans-unit>
        <trans-unit id="61136b8a36a83e28dd8808954f91f1ad3f561874" translate="yes" xml:space="preserve">
          <source>Useful when you need to reply to a push that can't otherwise be handled using the &lt;code&gt;{:reply, {status, payload}, socket}&lt;/code&gt; return from your &lt;code&gt;handle_in&lt;/code&gt; callbacks. &lt;a href=&quot;#reply/2&quot;&gt;&lt;code&gt;reply/2&lt;/code&gt;&lt;/a&gt; will be used in the rare cases you need to perform work in another process and reply when finished by generating a reference to the push with &lt;a href=&quot;#socket_ref/1&quot;&gt;&lt;code&gt;socket_ref/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handle_in&lt;/code&gt; 콜백 에서 &lt;code&gt;{:reply, {status, payload}, socket}&lt;/code&gt; 반환을 사용하여 처리 할 수없는 푸시에 응답해야 할 때 유용 합니다 . &lt;a href=&quot;#reply/2&quot;&gt; &lt;code&gt;reply/2&lt;/code&gt; &lt;/a&gt; 는 다른 프로세스에서 작업을 수행하고 완료되면 &lt;a href=&quot;#socket_ref/1&quot;&gt; &lt;code&gt;socket_ref/1&lt;/code&gt; 로&lt;/a&gt; 푸시에 대한 참조를 생성하여 응답해야하는 드문 경우에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="4ace1bc54410e09f83dea66bfc067b50e65e2821" translate="yes" xml:space="preserve">
          <source>User 1 loads the page with count of 13</source>
          <target state="translated">사용자 1은 13의 카운트로 페이지를로드합니다.</target>
        </trans-unit>
        <trans-unit id="fc7f9f129763e9f594dbc347302a7e4faf3ab46e" translate="yes" xml:space="preserve">
          <source>User 1 saves the page with count of 14</source>
          <target state="translated">사용자 1은 14의 카운트로 페이지를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="8fa7597bf09510d06ffc9d3796dee8c9216550b3" translate="yes" xml:space="preserve">
          <source>User 2 loads the page with count of 13</source>
          <target state="translated">사용자 2는 13의 카운트로 페이지를로드합니다.</target>
        </trans-unit>
        <trans-unit id="256c42b57d942448cf371c9d42a21f89cc8eeb31" translate="yes" xml:space="preserve">
          <source>User 2 loads the page with count of 14</source>
          <target state="translated">사용자 2가 14 개의 페이지를로드합니다.</target>
        </trans-unit>
        <trans-unit id="386813c93461500074af4d97a91fe65616726fab" translate="yes" xml:space="preserve">
          <source>User 2 loads the page with count of 15</source>
          <target state="translated">사용자 2가 15 개의 페이지를로드합니다.</target>
        </trans-unit>
        <trans-unit id="30a641deb896ea754faa88c11b1f42d4f27b449f" translate="yes" xml:space="preserve">
          <source>User 2 saves the page with count of 14</source>
          <target state="translated">사용자 2는 14의 카운트로 페이지를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="2e67d636cad0f74a757f08b4e69d1933bc1125b0" translate="yes" xml:space="preserve">
          <source>User accounts are often wide-reaching across a platform so it's important to think upfront about writing a well-defined interface. With that in mind, our goal is to build an accounts API that handles creating, updating, and deleting user accounts, as well as authenticating user credentials. We'll start off with basic features, but as we add authentication later, we'll see how starting with a solid foundation allows us to grow our application naturally as we add functionality.</source>
          <target state="translated">사용자 계정은 종종 플랫폼 전체에 광범위하게 적용되므로 잘 정의 된 인터페이스를 작성하는 것에 대해 사전에 생각하는 것이 중요합니다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 이를 염두에두고 우리의 목표는 사용자 계정 생성, 업데이트 및 삭제와 사용자 자격 증명 인증을 처리하는 계정 API를 구축하는 것입니다. 기본 기능부터 시작 하겠지만 나중에 인증을 추가 할 때 견고한 기반으로 시작하여 기능을 추가하면서 자연스럽게 애플리케이션을 확장 할 수있는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="19e512547572bb3cb9854b6b41f8622f0c686820" translate="yes" xml:space="preserve">
          <source>User data or data coming from the database is almost never considered safe. However, in some cases, you may want to tag it as safe and show its &quot;raw&quot; contents:</source>
          <target state="translated">데이터베이스에서 오는 사용자 데이터 또는 데이터는 거의 안전한 것으로 간주되지 않습니다. 그러나 경우에 따라 안전한 것으로 태그를 지정하고 &quot;원시&quot;콘텐츠를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd8424b9c4f0f32424ffce1b64df31d998c24576" translate="yes" xml:space="preserve">
          <source>Uses LiveView in the current module to mark it a LiveView.</source>
          <target state="translated">현재 모듈에서 LiveView를 사용하여 LiveView로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ed2d6d421fc9a9a4c53f9786a20e7d78ce97532d" translate="yes" xml:space="preserve">
          <source>Uses the endpoint configuration to decide so. It is a noop if the connection has been halted.</source>
          <target state="translated">엔드 포인트 구성을 사용하여 결정합니다. 연결이 중단 된 경우 이는 noop입니다.</target>
        </trans-unit>
        <trans-unit id="4530e68d0e32ddc39c2c2cb83d23f6e2e9a5c075" translate="yes" xml:space="preserve">
          <source>Uses the provided &lt;code&gt;%Plug.Conn{}&lt;/code&gt;s router matched in the previous request. Raises if the response&amp;rsquo;s location header is not set.</source>
          <target state="translated">제공된 &lt;code&gt;%Plug.Conn{}&lt;/code&gt; 라우터를 이전 요청과 일치시킵니다. 응답의 위치 헤더가 설정되지 않은 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e926278df347fd5000da43d32f455ff4e7bf1a38" translate="yes" xml:space="preserve">
          <source>Uses the provided &lt;code&gt;%Plug.Conn{}&lt;/code&gt;s router matched in the previous request. Raises if the response's location header is not set.</source>
          <target state="translated">이전 요청에서 일치 하는 제공된 &lt;code&gt;%Plug.Conn{}&lt;/code&gt; s 라우터를 사용합니다 . 응답의 위치 헤더가 설정되지 않은 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="646329cca28d8168b8b56a5e4e2a5343757ff3c2" translate="yes" xml:space="preserve">
          <source>Uses the same data format as &lt;code&gt;c:list/2&lt;/code&gt;, but only returns metadata for the presences under a topic and key pair. For example, a user with key &lt;code&gt;&quot;user1&quot;&lt;/code&gt;, connected to the same chat room &lt;code&gt;&quot;room:1&quot;&lt;/code&gt; from two devices, could return:</source>
          <target state="translated">&lt;code&gt;c:list/2&lt;/code&gt; 와 동일한 데이터 형식을 사용 하지만 주제 및 키 쌍 아래의 존재에 대한 메타 데이터 만 반환합니다. 예를 들어 두 기기에서 동일한 채팅방 &lt;code&gt;&quot;room:1&quot;&lt;/code&gt; 연결된 &lt;code&gt;&quot;user1&quot;&lt;/code&gt; 키를 가진 사용자 는 다음을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5dc7c3937b798e1e9f070b84ec3c9834c1bfb69" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://hexdocs.pm/telemetry_metrics/Telemetry.Metrics.html&quot;&gt;&lt;code&gt;Telemetry.Metrics&lt;/code&gt;&lt;/a&gt;, you can define a counter metric, which counts how many HTTP requests were completed:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/telemetry_metrics/Telemetry.Metrics.html&quot;&gt; &lt;code&gt;Telemetry.Metrics&lt;/code&gt; 를&lt;/a&gt; 사용하면 완료된 HTTP 요청 수를 계산하는 카운터 측정 항목을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="248d1b5a782f4abaa8dfc5d8a65e9d9d12ba37ce" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@primary_key&lt;/code&gt; should be prefered for single field primary keys and sharing primary key definitions between multiple schemas using macros. Setting &lt;code&gt;@primary_key&lt;/code&gt; also automatically configures the reference types for &lt;code&gt;has_one&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt; associations.</source>
          <target state="translated">사용 &lt;code&gt;@primary_key&lt;/code&gt; 하는 단일 필드 기본 키 및 매크로를 사용하여 여러 스키마 사이의 기본 키 정의를 공유 선호한다. 설정 &lt;code&gt;@primary_key&lt;/code&gt; 은 자동으로의 참조 유형으로 구성 &lt;code&gt;has_one&lt;/code&gt; 및 &lt;code&gt;has_many&lt;/code&gt; 협회.</target>
        </trans-unit>
        <trans-unit id="e1be4400bea6d9893875b0c868f4d0d2c362faa7" translate="yes" xml:space="preserve">
          <source>Using Gettext for internationalization</source>
          <target state="translated">국제화를 위해 Gettext 사용</target>
        </trans-unit>
        <trans-unit id="90ba7820d98cf623d1e1ec2eec7e3679257e56f5" translate="yes" xml:space="preserve">
          <source>Using MySQL</source>
          <target state="translated">MySQL 사용</target>
        </trans-unit>
        <trans-unit id="6e5a9e459f2878ff2dcfc87eb0fab2949f61dfce" translate="yes" xml:space="preserve">
          <source>Using Plug functions in this way, we can craft just the response we need.</source>
          <target state="translated">이런 식으로 Plug 함수를 사용하면 필요한 응답 만 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15183cd4c05f849cb921225aa6637a13e10e9db2" translate="yes" xml:space="preserve">
          <source>Using Queries as Associations</source>
          <target state="translated">쿼리를 연결로 사용</target>
        </trans-unit>
        <trans-unit id="20f53ca402107774142677f85cf8d7778c2b82a2" translate="yes" xml:space="preserve">
          <source>Using changesets you can work with associations as well as with embedded structs. There are two primary APIs:</source>
          <target state="translated">변경 집합을 사용하면 포함 된 구조체뿐만 아니라 연결 작업도 수행 할 수 있습니다. 두 가지 기본 API가 있습니다.</target>
        </trans-unit>
        <trans-unit id="56e1c8ef94c5d854d1265056ae03e96e36c81f83" translate="yes" xml:space="preserve">
          <source>Using instrumentation</source>
          <target state="translated">계측 사용</target>
        </trans-unit>
        <trans-unit id="2d7a876bdd113f4940d781859515dc8f3133d487" translate="yes" xml:space="preserve">
          <source>Using options</source>
          <target state="translated">옵션 사용</target>
        </trans-unit>
        <trans-unit id="ba27bcd4997a5e0f0ee6446a88c3b90e4bd8354d" translate="yes" xml:space="preserve">
          <source>Using path helpers makes it easy to ensure our controllers, views and templates are linking to pages our router can actually handle.</source>
          <target state="translated">경로 도우미를 사용하면 컨트롤러,보기 및 템플릿이 라우터가 실제로 처리 할 수있는 페이지에 연결되는지 쉽게 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a0456b5e2256fb154baf9e4c555effa537b3b90" translate="yes" xml:space="preserve">
          <source>Using route helpers is actually the preferred approach to link to any page within our application.</source>
          <target state="translated">경로 도우미를 사용하는 것은 실제로 응용 프로그램 내의 모든 페이지에 연결하는 데 선호되는 접근 방식입니다.</target>
        </trans-unit>
        <trans-unit id="89692a02436c2dc59e18e762bcafe08b9b24656b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;as:&lt;/code&gt; option in a scope can reduce duplication.</source>
          <target state="translated">범위에서 &lt;code&gt;as:&lt;/code&gt; 옵션을 사용하면 중복을 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de81c9f8dfdcf57b9e1cd52d52b92d503a4a576f" translate="yes" xml:space="preserve">
          <source>Using the helper option for scoped routes eliminates unreachable paths.</source>
          <target state="translated">범위가 지정된 경로에 도우미 옵션을 사용하면 도달 할 수없는 경로가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="176ea493d22133b869cc59ffa0475a5d2b453783" translate="yes" xml:space="preserve">
          <source>Using the schema and migration generator</source>
          <target state="translated">스키마 및 마이그레이션 생성기 사용</target>
        </trans-unit>
        <trans-unit id="3a24e5daea0bf2276d894c7b5d0ffb43a59fa97f" translate="yes" xml:space="preserve">
          <source>Using this function on a &lt;code&gt;%Plug.Conn{}&lt;/code&gt; struct tells &lt;code&gt;static_url/2&lt;/code&gt; to use the given information for URL generation instead of the the &lt;code&gt;%Plug.Conn{}&lt;/code&gt;'s endpoint configuration (much like &lt;a href=&quot;#put_router_url/2&quot;&gt;&lt;code&gt;put_router_url/2&lt;/code&gt;&lt;/a&gt; but for static URLs).</source>
          <target state="translated">&lt;code&gt;%Plug.Conn{}&lt;/code&gt; 구조체 에서이 함수를 사용하면 &lt;code&gt;static_url/2&lt;/code&gt; 는 &lt;code&gt;%Plug.Conn{}&lt;/code&gt; 의 엔드 포인트 구성 대신 URL 생성에 주어진 정보를 사용하도록 지시 합니다 ( &lt;a href=&quot;#put_router_url/2&quot;&gt; &lt;code&gt;put_router_url/2&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 정적 URL 용).</target>
        </trans-unit>
        <trans-unit id="1f62fd35c9f8b63b92b854716b136b2dfd35d730" translate="yes" xml:space="preserve">
          <source>Using this module will:</source>
          <target state="translated">이 모듈을 사용하면 :</target>
        </trans-unit>
        <trans-unit id="41e118f35e098ff4563c4c99f3709daaa051bb26" translate="yes" xml:space="preserve">
          <source>Usually, users should prefer to instrument events using the &lt;a href=&quot;#c:instrument/3&quot;&gt;&lt;code&gt;instrument/3&lt;/code&gt;&lt;/a&gt; macro defined in every Phoenix endpoint. This macro should only be used for cases when the endpoint is dynamic and not known at compile time.</source>
          <target state="translated">일반적으로 사용자는 모든 Phoenix 엔드 포인트에 정의 된 &lt;a href=&quot;#c:instrument/3&quot;&gt; &lt;code&gt;instrument/3&lt;/code&gt; &lt;/a&gt; 매크로를 사용하여 이벤트를 계측하는 것을 선호해야합니다 . 이 매크로는 엔드 포인트가 동적이고 컴파일 타임에 알려지지 않은 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c2fe40312a646350f3080677bd846d75d883764d" translate="yes" xml:space="preserve">
          <source>Utilities for working with connection data</source>
          <target state="translated">연결 데이터 작업을위한 유틸리티</target>
        </trans-unit>
        <trans-unit id="de22dd69d27f1f564369f9dd0baaba6f0d6b440b" translate="yes" xml:space="preserve">
          <source>Validates a change has the given format</source>
          <target state="translated">지정된 형식의 변경 사항을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="6387486f2db9294d1c98e268b45ab56d2beb4710" translate="yes" xml:space="preserve">
          <source>Validates a change has the given format.</source>
          <target state="translated">지정된 형식의 변경을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="03981eab6dc1919a9c042461527901372db86662" translate="yes" xml:space="preserve">
          <source>Validates a change is a string or list of the given length</source>
          <target state="translated">변경이 주어진 길이의 문자열 또는 목록인지 확인</target>
        </trans-unit>
        <trans-unit id="26e506d266654c393f553f9a7327b8e61359779f" translate="yes" xml:space="preserve">
          <source>Validates a change is a string or list of the given length.</source>
          <target state="translated">변경이 주어진 길이의 문자열 또는 목록인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f17d61e6a66c558006b2e8d0c8bcc6351573b17e" translate="yes" xml:space="preserve">
          <source>Validates a change is included in the given enumerable</source>
          <target state="translated">주어진 열거 형에 변경 사항이 포함되어 있는지 확인</target>
        </trans-unit>
        <trans-unit id="3aa14f53e71fe6cee59c3234199a3b044c818fe5" translate="yes" xml:space="preserve">
          <source>Validates a change is included in the given enumerable.</source>
          <target state="translated">주어진 열거 형에 변경 사항이 포함되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7ee629ab28cae7ee854895c8b46b79cd5e2a6e7c" translate="yes" xml:space="preserve">
          <source>Validates a change is not included in the given enumerable</source>
          <target state="translated">주어진 열거 형에 변경 사항이 포함되어 있지 않은지 확인</target>
        </trans-unit>
        <trans-unit id="8233cf4bbdf07e9f95c41a4e24aa8c6f9b4712e3" translate="yes" xml:space="preserve">
          <source>Validates a change is not included in the given enumerable.</source>
          <target state="translated">주어진 열거 형에 변경 사항이 포함되어 있지 않은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="8b9649e22e84a88687da81133994e46c62cc9f01" translate="yes" xml:space="preserve">
          <source>Validates a change, of type enum, is a subset of the given enumerable. Like &lt;a href=&quot;#validate_inclusion/4&quot;&gt;&lt;code&gt;validate_inclusion/4&lt;/code&gt;&lt;/a&gt; for lists</source>
          <target state="translated">열거 형의 변경이 지정된 열거 형의 부분 집합인지 확인합니다. 목록의 &lt;a href=&quot;#validate_inclusion/4&quot;&gt; &lt;code&gt;validate_inclusion/4&lt;/code&gt; &lt;/a&gt; 와 같이</target>
        </trans-unit>
        <trans-unit id="14b8efa7230bd7d7cf30baac92bc3ccc8290d5f2" translate="yes" xml:space="preserve">
          <source>Validates a change, of type enum, is a subset of the given enumerable. Like &lt;a href=&quot;#validate_inclusion/4&quot;&gt;&lt;code&gt;validate_inclusion/4&lt;/code&gt;&lt;/a&gt; for lists.</source>
          <target state="translated">열거 형의 변경이 지정된 열거 형의 부분 집합인지 확인합니다. 목록의 &lt;a href=&quot;#validate_inclusion/4&quot;&gt; &lt;code&gt;validate_inclusion/4&lt;/code&gt; &lt;/a&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="21e1d9d0afdc380c3095bf96de14d83b86d4dd48" translate="yes" xml:space="preserve">
          <source>Validates that no existing record with a different primary key has the same values for these fields</source>
          <target state="translated">기본 키가 다른 기존 레코드가이 필드에 대해 동일한 값을 가지지 않는지 검증합니다.</target>
        </trans-unit>
        <trans-unit id="80f91828e4e2ea138eee13304b3e44b2611cdd52" translate="yes" xml:space="preserve">
          <source>Validates that no existing record with a different primary key has the same values for these fields.</source>
          <target state="translated">기본 키가 다른 기존 레코드가이 필드에 대해 동일한 값을 가지지 않는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="0f7dff041a4c478bfd7531fa7b54919229ce07c8" translate="yes" xml:space="preserve">
          <source>Validates that one or more fields are present in the changeset</source>
          <target state="translated">하나 이상의 필드가 변경 세트에 존재하는지 검증</target>
        </trans-unit>
        <trans-unit id="0e6de8e5f6778e5b1edb679f6fdae8286da244a7" translate="yes" xml:space="preserve">
          <source>Validates that one or more fields are present in the changeset.</source>
          <target state="translated">변경 세트에 하나 이상의 필드가 있는지 검증합니다.</target>
        </trans-unit>
        <trans-unit id="cd95590d5d107796265e54b237cf0dff5e1a36b5" translate="yes" xml:space="preserve">
          <source>Validates that the given field matches the confirmation parameter of that field</source>
          <target state="translated">주어진 필드가 해당 필드의 확인 매개 변수와 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="3dbdbd94769718d1a86b5a9b3509a0e90c690200" translate="yes" xml:space="preserve">
          <source>Validates that the given field matches the confirmation parameter of that field.</source>
          <target state="translated">주어진 필드가 해당 필드의 확인 매개 변수와 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7c73977f0a52184eea5ed41dde93699cfb3116db" translate="yes" xml:space="preserve">
          <source>Validates that the given parameter matches its confirmation.</source>
          <target state="translated">주어진 매개 변수가 확인과 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="40fa1fdb7f6be480dc9ed4edca589cd789e3206e" translate="yes" xml:space="preserve">
          <source>Validates the &lt;code&gt;state&lt;/code&gt; is valid against the given &lt;code&gt;csrf_token&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;csrf_token&lt;/code&gt; 에 대해 &lt;code&gt;state&lt;/code&gt; 가 유효한지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="b788e2294010967807615b1211d424ce07feeace" translate="yes" xml:space="preserve">
          <source>Validates the given &lt;code&gt;field&lt;/code&gt; change</source>
          <target state="translated">주어진 &lt;code&gt;field&lt;/code&gt; 변경을 확인</target>
        </trans-unit>
        <trans-unit id="16e2c09323b8c50a37c0774e0c14e4040269df24" translate="yes" xml:space="preserve">
          <source>Validates the given &lt;code&gt;field&lt;/code&gt; change.</source>
          <target state="translated">주어진 &lt;code&gt;field&lt;/code&gt; 변경을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="25c0993025f1f25550a36fb10f89655e8cc1bac0" translate="yes" xml:space="preserve">
          <source>Validates the given binary is valid UTF-8</source>
          <target state="translated">주어진 바이너리가 유효한 UTF-8인지 확인</target>
        </trans-unit>
        <trans-unit id="817c3da372bb60711a422be11ad88794b730f9ef" translate="yes" xml:space="preserve">
          <source>Validates the given binary is valid UTF-8.</source>
          <target state="translated">주어진 바이너리가 유효한 UTF-8인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="318afb0c854be0b261e94053f26948ffecfaeb55" translate="yes" xml:space="preserve">
          <source>Validates the given parameter is true.</source>
          <target state="translated">주어진 매개 변수가 참인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f02890d528bb859a51218bd7df6de92fea5d52be" translate="yes" xml:space="preserve">
          <source>Validates the given parameter was given as true</source>
          <target state="translated">주어진 매개 변수가 true로 제공되었는지 확인</target>
        </trans-unit>
        <trans-unit id="f5e7d3169eab7206f2ad7a7bc9a4ef1032a712ae" translate="yes" xml:space="preserve">
          <source>Validates the given parameter was given as true.</source>
          <target state="translated">주어진 매개 변수가 true로 제공되었는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="54e26b35a12cf35243d70516d6ed76ab9380d94b" translate="yes" xml:space="preserve">
          <source>Validates the properties of a number</source>
          <target state="translated">숫자의 속성을 확인합니다</target>
        </trans-unit>
        <trans-unit id="c5a37ec31c07f97b712bd1cb66d6ded97ee80395" translate="yes" xml:space="preserve">
          <source>Validates the properties of a number.</source>
          <target state="translated">숫자의 속성을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e6e70c503ff17af310d3ee613d5600c6c53491a0" translate="yes" xml:space="preserve">
          <source>Validations and constraints</source>
          <target state="translated">검증 및 제약</target>
        </trans-unit>
        <trans-unit id="f21488f16ae47bd9540a8351254813efb68b1a53" translate="yes" xml:space="preserve">
          <source>Validations and constraints define an explicit boundary when the check happens. By moving constraints to the database, we also provide a safe, correct and data-race free means of checking the user input.</source>
          <target state="translated">유효성 검사 및 제약 조건은 검사가 발생할 때 명시 적 경계를 정의합니다. 제약 조건을 데이터베이스로 옮기면 사용자 입력을 확인하는 안전하고 정확하며 데이터가없는 무료 수단도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8152ae7a4079e9003566fb525f5bd05a79a8e97f" translate="yes" xml:space="preserve">
          <source>Values are expected to be an Enumerable containing two-item tuples (like maps and keyword lists) or any Enumerable where the element will be used both as key and value for the generated select.</source>
          <target state="translated">값은 맵 및 키워드 목록과 같은 두 항목 튜플을 포함하는 열거 가능한 요소이거나 요소가 생성 된 선택의 키 및 값으로 사용되는 열거 가능한 것으로 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="33817a63b651d4a84e7a5d740d58bef5f67a6a2a" translate="yes" xml:space="preserve">
          <source>Verb</source>
          <target state="translated">Verb</target>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="translated">Views</target>
        </trans-unit>
        <trans-unit id="818d3526abc5c35eb2fcc63bceb130ea368ee95c" translate="yes" xml:space="preserve">
          <source>Views and templates</source>
          <target state="translated">보기 및 템플릿</target>
        </trans-unit>
        <trans-unit id="9c103aeece258f558865684faa03cdf2cbbda088" translate="yes" xml:space="preserve">
          <source>Views testing</source>
          <target state="translated">뷰 테스트</target>
        </trans-unit>
        <trans-unit id="a56f436717cfe28edc6adf97137a00888f2e90b1" translate="yes" xml:space="preserve">
          <source>WARNING: only use the generated certificate for testing in a closed network environment, such as running a development server on &lt;code&gt;localhost&lt;/code&gt;. For production, staging, or testing servers on the public internet, obtain a proper certificate, for example from &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let's Encrypt&lt;/a&gt;.</source>
          <target state="translated">경고 : 생성 된 인증서는 &lt;code&gt;localhost&lt;/code&gt; 에서 개발 서버를 실행하는 것과 같이 폐쇄 된 네트워크 환경에서 테스트 할 때만 사용하십시오 . 퍼블릭 인터넷에서 프로덕션, 스테이징 또는 테스트 서버의 경우 적절한 인증서 (예 : &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let 's Encrypt)&lt;/a&gt; 를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="f1de189811db21bba468b1067616a446857065a9" translate="yes" xml:space="preserve">
          <source>Warning: this feature isn&amp;rsquo;t available in all browsers. Check &lt;code&gt;http://caniuse.com/#feat=input-color&lt;/code&gt; for further informations.</source>
          <target state="translated">경고 : 일부 브라우저에서는이 기능을 사용할 수 없습니다. 자세한 내용은 &lt;code&gt;http://caniuse.com/#feat=input-color&lt;/code&gt; 를 확인 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c51f1d0be3b328c6fe1da24e4a973fb602d052c6" translate="yes" xml:space="preserve">
          <source>Warning: this feature isn&amp;rsquo;t available in all browsers. Check &lt;code&gt;http://caniuse.com/#feat=input-datetime&lt;/code&gt; for further informations.</source>
          <target state="translated">경고 : 일부 브라우저에서는이 기능을 사용할 수 없습니다. 자세한 내용은 &lt;code&gt;http://caniuse.com/#feat=input-datetime&lt;/code&gt; 을 확인 하십시오 .</target>
        </trans-unit>
        <trans-unit id="6e63a0702b5665ca0a7a10353d9061c16ce489ba" translate="yes" xml:space="preserve">
          <source>Warning: this feature isn't available in all browsers. Check &lt;code&gt;http://caniuse.com/#feat=input-color&lt;/code&gt; for further informations.</source>
          <target state="translated">Warning: this feature isn't available in all browsers. Check &lt;code&gt;http://caniuse.com/#feat=input-color&lt;/code&gt; for further informations.</target>
        </trans-unit>
        <trans-unit id="be49354c5747ffdcf348e81dc63329ad0356c96c" translate="yes" xml:space="preserve">
          <source>Warning: this feature isn't available in all browsers. Check &lt;code&gt;http://caniuse.com/#feat=input-datetime&lt;/code&gt; for further informations.</source>
          <target state="translated">Warning: this feature isn't available in all browsers. Check &lt;code&gt;http://caniuse.com/#feat=input-datetime&lt;/code&gt; for further informations.</target>
        </trans-unit>
        <trans-unit id="9830014183bbcc55072e1a954f6ee7827ce8cc64" translate="yes" xml:space="preserve">
          <source>We accomplish this with a scoped route that sets a path option to &lt;code&gt;/admin&lt;/code&gt; like this one. We could nest this scope inside another scope, but instead let's set it by itself at the root:</source>
          <target state="translated">이와 같이 경로 옵션을 &lt;code&gt;/admin&lt;/code&gt; 으로 설정하는 범위가 지정된 경로를 사용하여이를 수행합니다 . 이 범위를 다른 범위 내에 중첩 할 수 있지만 대신 루트에서 자체적으로 설정하겠습니다.</target>
        </trans-unit>
        <trans-unit id="7491a12d011869e3acfaac6a3ff5f7e32d6be074" translate="yes" xml:space="preserve">
          <source>We added a &lt;code&gt;belongs_to&lt;/code&gt; relationships between pages and their authors. Next, let's add the association in the other direction in &lt;code&gt;lib/hello/cms/author.ex&lt;/code&gt;:</source>
          <target state="translated">페이지와 작성자 사이에 &lt;code&gt;belongs_to&lt;/code&gt; 관계를 추가했습니다 . 다음으로 &lt;code&gt;lib/hello/cms/author.ex&lt;/code&gt; 에 다른 방향으로 연결을 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="7babc9005a3315f3dbcbeadc937a760ba105189e" translate="yes" xml:space="preserve">
          <source>We added the &lt;code&gt;:authenticate_user&lt;/code&gt; plug to require a signed-in user for all routes within this CMS scope. With our routes in place, we can migrate up the database:</source>
          <target state="translated">이 CMS 범위 내의 모든 경로에 로그인 한 사용자가 필요하도록 &lt;code&gt;:authenticate_user&lt;/code&gt; 플러그를 추가했습니다 . 경로가 정해지면 데이터베이스를 마이그레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d940eec7fdeede3dd7f38bfa49c6790042438e23" translate="yes" xml:space="preserve">
          <source>We added the &lt;code&gt;has_many&lt;/code&gt; association for author pages, and then introduced our data dependency on the &lt;code&gt;Accounts&lt;/code&gt; context by wiring up the &lt;code&gt;belongs_to&lt;/code&gt; association to our &lt;code&gt;Accounts.User&lt;/code&gt; schema.</source>
          <target state="translated">우리는 추가 &lt;code&gt;has_many&lt;/code&gt; 의 온 우리의 데이터 의존성을 도입 한 후 저자 페이지 연결을하고, &lt;code&gt;Accounts&lt;/code&gt; 위로 연결하여 상황에 맞는 &lt;code&gt;belongs_to&lt;/code&gt; 의 우리에 연결 &lt;code&gt;Accounts.User&lt;/code&gt; 의 스키마를.</target>
        </trans-unit>
        <trans-unit id="79cc750de97d81661b4fff20933a3c1cae6df93f" translate="yes" xml:space="preserve">
          <source>We added two new plugs to our &lt;code&gt;CMS.PageController&lt;/code&gt;. The first plug, &lt;code&gt;:require_existing_author&lt;/code&gt;, runs for every action in this controller. The &lt;code&gt;require_existing_author/2&lt;/code&gt; plug calls into our &lt;code&gt;CMS.ensure_author_exists/1&lt;/code&gt; and passes in the &lt;code&gt;current_user&lt;/code&gt; from the connection assigns. After finding or creating the author, we use &lt;a href=&quot;../plug/plug.conn#assign/3&quot;&gt;&lt;code&gt;Plug.Conn.assign/3&lt;/code&gt;&lt;/a&gt; to place a &lt;code&gt;:current_author&lt;/code&gt; key into the assigns for use downstream.</source>
          <target state="translated">&lt;code&gt;CMS.PageController&lt;/code&gt; 에 두 개의 새로운 플러그를 추가 했습니다 . 첫 번째 플러그 &lt;code&gt;:require_existing_author&lt;/code&gt; 는이 컨트롤러의 모든 작업에 대해 실행됩니다. &lt;code&gt;require_existing_author/2&lt;/code&gt; 우리에 플러그 전화 &lt;code&gt;CMS.ensure_author_exists/1&lt;/code&gt; 과 패스 &lt;code&gt;current_user&lt;/code&gt; 연결 양수인에서. 작성자를 찾거나 생성 한 후 &lt;a href=&quot;../plug/plug.conn#assign/3&quot;&gt; &lt;code&gt;Plug.Conn.assign/3&lt;/code&gt; &lt;/a&gt; 을 사용하여 다운 스트림에서 사용할 할당에 &lt;code&gt;:current_author&lt;/code&gt; 키를 배치합니다.</target>
        </trans-unit>
        <trans-unit id="21cda681f476f2368b35a077bd7929e92bb9118b" translate="yes" xml:space="preserve">
          <source>We also have similar configuration in &lt;code&gt;config/test.exs&lt;/code&gt; and &lt;code&gt;config/prod.secret.exs&lt;/code&gt; which can also be changed to match your actual credentials.</source>
          <target state="translated">또한 &lt;code&gt;config/test.exs&lt;/code&gt; 및 &lt;code&gt;config/prod.secret.exs&lt;/code&gt; 에 유사한 구성이 있으며 실제 자격 증명과 일치하도록 변경할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b0823ef9d676c99e9dd89ab9800b6efd6301ba8" translate="yes" xml:space="preserve">
          <source>We also need to tell the controller to render a template with the same format as the one returned by &lt;a href=&quot;phoenix.controller#get_format/1&quot;&gt;&lt;code&gt;Phoenix.Controller.get_format/1&lt;/code&gt;&lt;/a&gt;. We do that by substituting the name of the template &quot;index.html&quot; with the atom version &lt;code&gt;:index&lt;/code&gt;.</source>
          <target state="translated">또한 컨트롤러에게 &lt;a href=&quot;phoenix.controller#get_format/1&quot;&gt; &lt;code&gt;Phoenix.Controller.get_format/1&lt;/code&gt; 에서&lt;/a&gt; 반환 된 것과 동일한 형식으로 템플릿을 렌더링하도록 지시해야합니다 . &quot;index.html&quot;템플릿의 이름을 atom 버전 &lt;code&gt;:index&lt;/code&gt; 로 대체하여이를 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="7f71eaad2d1a87622b3ca085fc858df8d9227925" translate="yes" xml:space="preserve">
          <source>We also recommend all channels to monitor the &lt;code&gt;transport_pid&lt;/code&gt; on &lt;code&gt;init&lt;/code&gt; and exit if the transport exits. We also advise to rewrite &lt;code&gt;:normal&lt;/code&gt; exit reasons (usually due to the socket being closed) to the &lt;code&gt;{:shutdown, :closed}&lt;/code&gt; to guarantee links are broken on the channel exit (as a &lt;code&gt;:normal&lt;/code&gt; exit does not break links):</source>
          <target state="translated">We also recommend all channels to monitor the &lt;code&gt;transport_pid&lt;/code&gt; on &lt;code&gt;init&lt;/code&gt; and exit if the transport exits. We also advise to rewrite &lt;code&gt;:normal&lt;/code&gt; exit reasons (usually due to the socket being closed) to the &lt;code&gt;{:shutdown, :closed}&lt;/code&gt; to guarantee links are broken on the channel exit (as a &lt;code&gt;:normal&lt;/code&gt; exit does not break links):</target>
        </trans-unit>
        <trans-unit id="b893205ead20a7119daba51fd185d81409f18b9d" translate="yes" xml:space="preserve">
          <source>We are able to add this module plug to our browser pipeline via &lt;code&gt;plug HelloWeb.Plugs.Locale, &quot;en&quot;&lt;/code&gt;. In the &lt;code&gt;init/1&lt;/code&gt; callback, we pass a default locale to use if none is present in the params. We also use pattern matching to define multiple &lt;code&gt;call/2&lt;/code&gt; function heads to validate the locale in the params, and fall back to &quot;en&quot; if there is no match.</source>
          <target state="translated">&lt;code&gt;plug HelloWeb.Plugs.Locale, &quot;en&quot;&lt;/code&gt; 을 통해이 모듈 플러그를 브라우저 파이프 라인에 추가 할 수 있습니다 . 에서 &lt;code&gt;init/1&lt;/code&gt; 어느 것도 PARAMS에 존재하지 않는 경우 콜백, 우리는 사용에 기본 로케일을 전달합니다. 또한 패턴 일치를 사용하여 여러 &lt;code&gt;call/2&lt;/code&gt; 함수 헤드 를 정의 하여 매개 변수의 로케일을 검증하고 일치가 없으면 &quot;en&quot;으로 폴백합니다.</target>
        </trans-unit>
        <trans-unit id="d9fac23933f2bbe08fbc7d051aef16cf195c9e3d" translate="yes" xml:space="preserve">
          <source>We built a query for fetching the current page given its ID which we pass to &lt;code&gt;Repo.update_all&lt;/code&gt;. Ecto's &lt;code&gt;Repo.update_all&lt;/code&gt; allows us to perform batch updates against the database, and is perfect for atomically updating values, such as incrementing our views count. The result of the repo operation returns the number of updated records, along with the selected schema values specified by the &lt;code&gt;select&lt;/code&gt; option. When we receive the new page views, we use &lt;code&gt;put_in(page.views, views)&lt;/code&gt; to place the new view count within the page.</source>
          <target state="translated">우리는 &lt;code&gt;Repo.update_all&lt;/code&gt; 에 전달하는 ID가 주어진 현재 페이지를 가져 오기위한 쿼리를 작성했습니다 . Ecto의 &lt;code&gt;Repo.update_all&lt;/code&gt; 을 사용하면 데이터베이스에 대해 일괄 업데이트를 수행 할 수 있으며 뷰 수를 늘리는 것과 같이 원자 적으로 값을 업데이트하는 데 적합합니다. repo 작업의 결과는 &lt;code&gt;select&lt;/code&gt; 옵션으로 지정된 선택된 스키마 값과 함께 업데이트 된 레코드 수를 반환합니다 . 새 페이지 뷰를 &lt;code&gt;put_in(page.views, views)&lt;/code&gt; 을 사용하여 페이지 내에 새 뷰 수를 배치합니다.</target>
        </trans-unit>
        <trans-unit id="0b85d5a0929cd1592ccfa6b45c8d6b813418a307" translate="yes" xml:space="preserve">
          <source>We can also check the changeset's changes - the map we get after all of the transformations are complete.</source>
          <target state="translated">변경 세트의 변경 사항을 확인할 수도 있습니다. 모든 변환이 완료된 후 얻을 수있는 맵입니다.</target>
        </trans-unit>
        <trans-unit id="e20b60675ff995b12b7e34f9d4c7920bc1446493" translate="yes" xml:space="preserve">
          <source>We can also easily unit test our transaction without actually running it. Since changesets can use in-memory-data, we can use an account that is constructed in memory as well (without persisting it to the database):</source>
          <target state="translated">또한 실제로 트랜잭션을 실행하지 않고도 트랜잭션을 쉽게 단위 테스트 할 수 있습니다. 변경 세트는 메모리 내 데이터를 사용할 수 있으므로 데이터베이스에 유지하지 않고 메모리에 구성된 계정을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b254aab160de2d5babafd706d73abf0bb79e5e4" translate="yes" xml:space="preserve">
          <source>We can also make use of the path helpers we learned about in the &lt;a href=&quot;routing&quot;&gt;Routing Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;routing&quot;&gt;라우팅 가이드&lt;/a&gt; 에서 배운 경로 도우미를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d21ccd00889edf280c3d533a27f69a3d1d004b92" translate="yes" xml:space="preserve">
          <source>We can also see our atomic update in action in the ecto debug logs:</source>
          <target state="translated">ecto 디버그 로그에서 작동중인 원자 업데이트를 볼 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1f28584352935baef599d9b71808f5249c9a661" translate="yes" xml:space="preserve">
          <source>We can also set the HTTP status code of a response similarly to the way we set the content type. The &lt;a href=&quot;../plug/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; module, imported into all controllers, has a &lt;code&gt;put_status/2&lt;/code&gt; function to do this.</source>
          <target state="translated">콘텐츠 유형을 설정하는 방법과 유사하게 응답의 HTTP 상태 코드를 설정할 수도 있습니다. &lt;a href=&quot;../plug/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; 의&lt;/a&gt; 모든 컨트롤러로 가져온 모듈은하는이 &lt;code&gt;put_status/2&lt;/code&gt; 이 작업을 수행하는 기능.</target>
        </trans-unit>
        <trans-unit id="d83ce9548ad0638e4110f2edd967a0c1eae02d50" translate="yes" xml:space="preserve">
          <source>We can also specify an individual router if we have more than one for our application.</source>
          <target state="translated">애플리케이션에 대해 둘 이상의 라우터가있는 경우 개별 라우터를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb6840f7693b3c25fd102d3463f4ae703a753f9b" translate="yes" xml:space="preserve">
          <source>We can even mix the &lt;code&gt;forward/4&lt;/code&gt; macro with pipelines. If we wanted to ensure that the user was authenticated and an administrator in order to see the jobs page, we could use the following in our router.</source>
          <target state="translated">&lt;code&gt;forward/4&lt;/code&gt; 매크로를 파이프 라인과 혼합 할 수도 있습니다 . 작업 페이지를보기 위해 사용자와 관리자가 인증되었는지 확인하려면 라우터에서 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98e2ebc96cdfbe3b95ae788821b0be9384f4a7af" translate="yes" xml:space="preserve">
          <source>We can fix this by creating the &quot;postgres&quot; role in the &lt;code&gt;psql&lt;/code&gt; console with the permissions needed to log in and create a database.</source>
          <target state="translated">로그인 및 데이터베이스 생성에 필요한 권한으로 &lt;code&gt;psql&lt;/code&gt; 콘솔 에서 &quot;postgres&quot;역할을 생성하여이 문제를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b69c56c84f80920fa51b687a6f1f4f686846090a" translate="yes" xml:space="preserve">
          <source>We can fix this problem by adding an &lt;code&gt;as: :admin&lt;/code&gt; option to our admin scope:</source>
          <target state="translated">관리자 범위에 &lt;code&gt;as: :admin&lt;/code&gt; 옵션을 추가하여이 문제를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fedbf6cae9f0370508a6663cc5761dcf2c51b798" translate="yes" xml:space="preserve">
          <source>We can get node.js from the &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;download page&lt;/a&gt;. When selecting a package to download, it's important to note that Phoenix requires version 5.0.0 or greater.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;다운로드 페이지&lt;/a&gt; 에서 node.js를 얻을 수 있습니다 . 다운로드 할 패키지를 선택할 때 Phoenix에는 버전 5.0.0 이상이 필요하다는 점에 유의하는 것이 중요합니다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="5477360830298491254812cf5e48aa6616ea73c4" translate="yes" xml:space="preserve">
          <source>We can later execute it in the integration layer using Repo:</source>
          <target state="translated">나중에 Repo를 사용하여 통합 계층에서 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f7cf90f44f221abcd00d32755e6a2133bfbad27" translate="yes" xml:space="preserve">
          <source>We can now do as the task suggests and inspect the contents of &lt;code&gt;priv/static&lt;/code&gt; directory. We'll see that all files from &lt;code&gt;assets/&lt;/code&gt; have been copied over to &lt;code&gt;priv/static&lt;/code&gt; and also each file now has a couple of versions. Those versions are:</source>
          <target state="translated">이제 작업에서 제안한대로 &lt;code&gt;priv/static&lt;/code&gt; 디렉토리 의 내용을 검사 할 수 있습니다 . &lt;code&gt;assets/&lt;/code&gt; 모든 파일 이 &lt;code&gt;priv/static&lt;/code&gt; 에 복사되었으며 이제 각 파일에 몇 가지 버전이 있음을 알 수 있습니다. 해당 버전은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3561698836e478a533dd4c8559be4f2f261c785a" translate="yes" xml:space="preserve">
          <source>We can optionally determine which files should be gzipped by using the &lt;code&gt;:gzippable_exts&lt;/code&gt; option in the config file:</source>
          <target state="translated">구성 파일에서 &lt;code&gt;:gzippable_exts&lt;/code&gt; 옵션 을 사용하여 어떤 파일을 gzip으로 압축할지 선택적으로 결정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a8a4148e9b8abbfbca4d4c0fbd165ba9d81b72b4" translate="yes" xml:space="preserve">
          <source>We can refer to it by that name using a following form of bindings list:</source>
          <target state="translated">다음 형식의 바인딩 목록을 사용하여 해당 이름으로 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6fce4eba3e8376022f47baf6ecf37534c503ccd" translate="yes" xml:space="preserve">
          <source>We can render another template directly from a LiveView template by simply calling &lt;code&gt;render&lt;/code&gt;:</source>
          <target state="translated">우리는 단순히 호출하여 라이브 뷰 템플릿에서 직접 다른 템플릿을 렌더링 할 수 &lt;code&gt;render&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="42459491896f28ef28d225dec6a5d6f0736b1a01" translate="yes" xml:space="preserve">
          <source>We can run &lt;a href=&quot;mix.tasks.phx.new&quot;&gt;&lt;code&gt;mix phx.new&lt;/code&gt;&lt;/a&gt; from any directory in order to bootstrap our Phoenix application. Phoenix will accept either an absolute or relative path for the directory of our new project. Assuming that the name of our application is &lt;code&gt;hello&lt;/code&gt;, let's run the following command:</source>
          <target state="translated">Phoenix 애플리케이션을 부트 스트랩하기 위해 모든 디렉토리에서 &lt;a href=&quot;mix.tasks.phx.new&quot;&gt; &lt;code&gt;mix phx.new&lt;/code&gt; &lt;/a&gt; 를 실행할 수 있습니다 . Phoenix는 새 프로젝트의 디렉토리에 대한 절대 또는 상대 경로를 허용합니다. 애플리케이션 이름이 &lt;code&gt;hello&lt;/code&gt; 라고 가정 하고 다음 명령을 실행 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="41691d67b2683368d552c6276e60905c4d313cdc" translate="yes" xml:space="preserve">
          <source>We can see from the output that Phoenix generated an &lt;code&gt;accounts/credential.ex&lt;/code&gt; file for our &lt;code&gt;Accounts.Credential&lt;/code&gt; schema, as well as a migration. Notably, phoenix said it was &lt;code&gt;* injecting&lt;/code&gt; code into the existing &lt;code&gt;accounts.ex&lt;/code&gt; context file and test file. Since our &lt;code&gt;Accounts&lt;/code&gt; module already exists, Phoenix knows to inject our code here.</source>
          <target state="translated">출력에서 Phoenix가 &lt;code&gt;Accounts.Credential&lt;/code&gt; 스키마 및 마이그레이션에 대한 &lt;code&gt;accounts/credential.ex&lt;/code&gt; 파일을 생성했음을 알 수 있습니다 . 특히, 피닉스는 말했다 &lt;code&gt;* injecting&lt;/code&gt; 기존에 코드를 &lt;code&gt;accounts.ex&lt;/code&gt; 의 컨텍스트 파일 및 테스트 파일. &lt;code&gt;Accounts&lt;/code&gt; 모듈이 이미 존재 하기 때문에 Phoenix는 여기에 우리 코드를 삽입하는 것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="890546ae1f4a708095d2d7223ce6666a7d5b8b23" translate="yes" xml:space="preserve">
          <source>We can specify the number of pending migrations we would like to run with the &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--step&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--step&lt;/code&gt; 옵션을 사용하여 실행할 보류중인 마이그레이션 수를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9ce7b10802ad09edde5292a9ac2f765d616c765" translate="yes" xml:space="preserve">
          <source>We can take advantage of &lt;code&gt;Ecto.Multi&lt;/code&gt; to create a pipeline of operations that can be run inside a transaction of our &lt;code&gt;Repo&lt;/code&gt;. If any given operation fails, the transaction will be rolled back and an error will be returned containing which operation failed, as well as the changes up to that point. In our &lt;code&gt;register_user/1&lt;/code&gt; example, we specified two operations, one that calls into &lt;code&gt;Accounts.create_user/1&lt;/code&gt; and another that passes the newly created user to &lt;code&gt;CMS.ensure_author_exists/1&lt;/code&gt;. The final step of our function is to invoke the operations with &lt;code&gt;Repo.transaction/1&lt;/code&gt;.</source>
          <target state="translated">우리는 하루의 피로를 풀 수 있습니다 &lt;code&gt;Ecto.Multi&lt;/code&gt; 우리의 트랜잭션 내에서 실행 할 수있는 작업의 파이프 라인을 만들 수 &lt;code&gt;Repo&lt;/code&gt; . 특정 작업이 실패하면 트랜잭션이 롤백되고 실패한 작업과 해당 지점까지의 변경 사항이 포함 된 오류가 반환됩니다. 우리에 &lt;code&gt;register_user/1&lt;/code&gt; 예, 우리는이 작업을 지정한 것으로 전화 &lt;code&gt;Accounts.create_user/1&lt;/code&gt; 과 새로 만든 사용자에 전달하는 또 다른 &lt;code&gt;CMS.ensure_author_exists/1&lt;/code&gt; . 함수의 마지막 단계는 &lt;code&gt;Repo.transaction/1&lt;/code&gt; 로 작업을 호출하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="cc854168ee529a5bc08e7aa2f5b798394d3c367a" translate="yes" xml:space="preserve">
          <source>We can use the definition above to define any view in your application:</source>
          <target state="translated">위의 정의를 사용하여 애플리케이션에서 모든 뷰를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bcc62d7cf009d74dc3ba87204537be4106f8db9" translate="yes" xml:space="preserve">
          <source>We can validate more than just whether a field is required or not. Let's take a look at some finer-grained validations.</source>
          <target state="translated">필드가 필요한지 여부뿐만 아니라 더 많은 것을 검증 할 수 있습니다. 좀 더 세분화 된 유효성 검사를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="524d68d74e00d255b77f6ac48db266681ef36aa1" translate="yes" xml:space="preserve">
          <source>We can verify this functionality in iex. Let's fire up our application inside &lt;code&gt;iex&lt;/code&gt; by running &lt;code&gt;iex -S mix&lt;/code&gt;. In order to minimize typing and make this easier to read, let's alias our &lt;code&gt;Hello.User&lt;/code&gt; struct.</source>
          <target state="translated">iex에서이 기능을 확인할 수 있습니다. &lt;code&gt;iex -S mix&lt;/code&gt; 를 실행하여 iex 내에서 애플리케이션을 &lt;code&gt;iex&lt;/code&gt; . 타이핑을 최소화하고 읽기 쉽게 만들기 위해 &lt;code&gt;Hello.User&lt;/code&gt; 구조체 의 별칭을 지정하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="dcc2511d0446872ad35fd457d1868c4ac055480c" translate="yes" xml:space="preserve">
          <source>We can write it as a join expression:</source>
          <target state="translated">We can write it as a join expression:</target>
        </trans-unit>
        <trans-unit id="2d64e903d8f9470b097e3bd03fd4fb577882215f" translate="yes" xml:space="preserve">
          <source>We can, of course, use &lt;code&gt;HelloWeb.Router.Helpers.page_path(@conn, :index)&lt;/code&gt; instead, but the convention is to use the aliased version for conciseness. Note that the alias is only set automatically for use in views, controllers and templates - outside these you need either the full name, or to alias it yourself inside the module definition with &lt;code&gt;alias HelloWeb.Router.Helpers, as: Routes&lt;/code&gt;.</source>
          <target state="translated">물론 &lt;code&gt;HelloWeb.Router.Helpers.page_path(@conn, :index)&lt;/code&gt; 대신 사용할 수 있지만 규칙은 간결함을 위해 별칭 버전을 사용하는 것입니다. 별칭은 뷰, 컨트롤러 및 템플릿에서 사용하기 위해 자동으로 설정됩니다.이 외부에서는 전체 이름이 필요하거나 &lt;code&gt;alias HelloWeb.Router.Helpers, as: Routes&lt;/code&gt; 하여 모듈 정의 내에서 직접 별칭을 지정하려면 다음과 같이합니다. Routes .</target>
        </trans-unit>
        <trans-unit id="e655bb0694e1f9d6282f01bdc5ea9c1532f23073" translate="yes" xml:space="preserve">
          <source>We certainly should follow the instructions and add our new repo to our supervision tree. In our &lt;code&gt;Hello&lt;/code&gt; application, we would open up &lt;code&gt;lib/hello.ex&lt;/code&gt;, and add our repo as a worker to the &lt;code&gt;children&lt;/code&gt; list.</source>
          <target state="translated">지침에 따라 감독 트리에 새 저장소를 추가해야합니다. 우리에 &lt;code&gt;Hello&lt;/code&gt; 응용 프로그램, 우리는 열 것 &lt;code&gt;lib/hello.ex&lt;/code&gt; , 그리고에 노동자로서 우리의 repo를 추가 &lt;code&gt;children&lt;/code&gt; 목록입니다.</target>
        </trans-unit>
        <trans-unit id="6e84fbb32ae4334ed1bcc0fd58fd2183e612f888" translate="yes" xml:space="preserve">
          <source>We changed the &lt;code&gt;:on_delete&lt;/code&gt; option from &lt;code&gt;:nothing&lt;/code&gt; to &lt;code&gt;:delete_all&lt;/code&gt;, which will generate a foreign key constraint that will delete all credentials for a given user when the user is removed from the database. Likewise, we also passed &lt;code&gt;null: false&lt;/code&gt; to disallow creating credentials without an existing user. By using a database constraint, we enforce data integrity at the database level, rather than relying on ad-hoc and error-prone application logic.</source>
          <target state="translated">&lt;code&gt;:on_delete&lt;/code&gt; 옵션을 &lt;code&gt;:nothing&lt;/code&gt; 에서 &lt;code&gt;:delete_all&lt;/code&gt; 로 변경했습니다 . 그러면 사용자가 데이터베이스에서 제거 될 때 지정된 사용자의 모든 자격 증명을 삭제하는 외래 키 제약 조건이 생성됩니다. 마찬가지로 기존 사용자없이 자격 증명을 만들 수 없도록 &lt;code&gt;null: false&lt;/code&gt; 도 전달했습니다 . 데이터베이스 제약 조건을 사용하여 임시적이고 오류가 발생하기 쉬운 응용 프로그램 논리에 의존하지 않고 데이터베이스 수준에서 데이터 무결성을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="0932af0fe026a4ff1640c00d4a1cbdba1d196ef5" translate="yes" xml:space="preserve">
          <source>We define a new scope where all routes are prefixed with &quot;/admin&quot; and all controllers are under the &lt;code&gt;HelloWeb.Admin&lt;/code&gt; namespace.</source>
          <target state="translated">모든 경로가 &quot;/ admin&quot;으로 시작되고 모든 컨트롤러가 &lt;code&gt;HelloWeb.Admin&lt;/code&gt; 네임 스페이스 아래에있는 새 범위를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="a6b5d675e45743263597463113c0f0a3339f7c10" translate="yes" xml:space="preserve">
          <source>We defined a &lt;code&gt;SessionController&lt;/code&gt; to handle users signing in and out of the application. Our &lt;code&gt;new&lt;/code&gt; action is responsible for simply rendering a &quot;new session&quot; form, which posts out to the create action of our controller. In &lt;code&gt;create&lt;/code&gt;, we pattern match the form fields and call into our &lt;code&gt;Accounts.authenticate_by_email_password/2&lt;/code&gt; that we just defined. If successful, we use &lt;a href=&quot;../plug/plug.conn#put_session/3&quot;&gt;&lt;code&gt;Plug.Conn.put_session/3&lt;/code&gt;&lt;/a&gt; to place the authenticated user's ID in the session, and redirect to the home page with a successful welcome message. We also called &lt;code&gt;configure_session(conn, renew: true)&lt;/code&gt; before redirecting to avoid &lt;a href=&quot;https://owasp.org/www-community/attacks/Session_fixation&quot;&gt;session fixation attacks&lt;/a&gt;. If authentication fails, we add a flash error message, and redirect to the sign-in page for the user to try again. To finish the controller, we support a &lt;code&gt;delete&lt;/code&gt; action which simply calls &lt;a href=&quot;../plug/plug.conn#configure_session/2&quot;&gt;&lt;code&gt;Plug.Conn.configure_session/2&lt;/code&gt;&lt;/a&gt; to drop the session and redirect to the home page.</source>
          <target state="translated">애플리케이션에 로그인 및 &lt;code&gt;SessionController&lt;/code&gt; 아웃하는 사용자를 처리하기 위해 SessionController 를 정의했습니다 . 우리의 &lt;code&gt;new&lt;/code&gt; 액션은 단순히 컨트롤러의 생성 액션에 게시되는 &quot;새 세션&quot;폼을 렌더링하는 역할을합니다. 에서 &lt;code&gt;create&lt;/code&gt; , 우리는 패턴 우리에 양식 필드 및 전화 일치 &lt;code&gt;Accounts.authenticate_by_email_password/2&lt;/code&gt; 우리가 정의한합니다. 성공하면 &lt;a href=&quot;../plug/plug.conn#put_session/3&quot;&gt; &lt;code&gt;Plug.Conn.put_session/3&lt;/code&gt; &lt;/a&gt; 을 사용 하여 인증 된 사용자의 ID를 세션에 배치하고 성공적인 환영 메시지와 함께 홈 페이지로 리디렉션합니다. &lt;a href=&quot;https://owasp.org/www-community/attacks/Session_fixation&quot;&gt;세션 고정 공격&lt;/a&gt; 을 피하기 위해 리디렉션하기 전에 &lt;code&gt;configure_session(conn, renew: true)&lt;/code&gt; 라고도했습니다 .. 인증에 실패하면 플래시 오류 메시지를 추가하고 사용자가 다시 시도 할 수 있도록 로그인 페이지로 리디렉션합니다. 컨트롤러를 완료하기 위해 단순히 &lt;a href=&quot;../plug/plug.conn#configure_session/2&quot;&gt; &lt;code&gt;Plug.Conn.configure_session/2&lt;/code&gt; &lt;/a&gt; 를 호출 하여 세션을 삭제하고 홈 페이지로 리디렉션 하는 &lt;code&gt;delete&lt;/code&gt; 작업을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="d9fa26871bb997c1cbc25e2d705c392e83987db6" translate="yes" xml:space="preserve">
          <source>We defined an &lt;code&gt;authenticate_by_email_password/2&lt;/code&gt; function, which discards the password field for now, but you could integrate tools like &lt;a href=&quot;https://github.com/ueberauth/guardian&quot;&gt;guardian&lt;/a&gt; or &lt;a href=&quot;https://github.com/riverrun/comeonin&quot;&gt;comeonin&lt;/a&gt; as you continue building your application. All we need to do in our function is find the user with matching credentials and return the &lt;code&gt;%Accounts.User{}&lt;/code&gt; struct in a &lt;code&gt;:ok&lt;/code&gt; tuple, or an &lt;code&gt;{:error, :unauthorized}&lt;/code&gt; value to let the caller know their authentication attempt has failed.</source>
          <target state="translated">지금은 비밀번호 필드를 삭제 하는 &lt;code&gt;authenticate_by_email_password/2&lt;/code&gt; 함수를 정의 했지만 애플리케이션을 계속 빌드 할 때 &lt;a href=&quot;https://github.com/ueberauth/guardian&quot;&gt;guardian&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/riverrun/comeonin&quot;&gt;comeonin&lt;/a&gt; 과 같은 도구를 통합 할 수 있습니다. 함수에서해야 할 일은 자격 증명이 일치하는 사용자를 찾고 &lt;code&gt;:ok&lt;/code&gt; 튜플 에서 &lt;code&gt;%Accounts.User{}&lt;/code&gt; 구조체를 반환 하거나 &lt;code&gt;{:error, :unauthorized}&lt;/code&gt; 값을 반환 하여 호출자에게 인증 시도가 있음을 알리는 것입니다. 실패한.</target>
        </trans-unit>
        <trans-unit id="828c32dc34470aa0e6737914b08ae72ab8d8738e" translate="yes" xml:space="preserve">
          <source>We defined an &lt;code&gt;authenticate_user/2&lt;/code&gt; plug in the router which simply uses &lt;a href=&quot;../plug/plug.conn#get_session/2&quot;&gt;&lt;code&gt;Plug.Conn.get_session/2&lt;/code&gt;&lt;/a&gt; to check for a &lt;code&gt;:user_id&lt;/code&gt; in the session. If we find one, it means a user has previously authenticated, and we call into &lt;code&gt;Hello.Accounts.get_user!/1&lt;/code&gt; to place our &lt;code&gt;:current_user&lt;/code&gt; into the connection assigns. If we don't have a session, we add a flash error message, redirect to the homepage, and we use &lt;a href=&quot;../plug/plug.conn#halt/1&quot;&gt;&lt;code&gt;Plug.Conn.halt/1&lt;/code&gt;&lt;/a&gt; to halt further plugs downstream from being invoked. We won't use this new plug quite yet, but it will be ready and waiting as we add authenticated routes in just a moment.</source>
          <target state="translated">세션에서 &lt;code&gt;:user_id&lt;/code&gt; 를 확인하기 위해 &lt;a href=&quot;../plug/plug.conn#get_session/2&quot;&gt; &lt;code&gt;Plug.Conn.get_session/2&lt;/code&gt; &lt;/a&gt; 를 사용하는 라우터에서 &lt;code&gt;authenticate_user/2&lt;/code&gt; 플러그를 정의했습니다 . 하나를 찾으면 사용자가 이전에 인증을 &lt;code&gt;Hello.Accounts.get_user!/1&lt;/code&gt; 의미하며 Hello.Accounts.get_user! / 1 을 호출 하여 연결 할당에 &lt;code&gt;:current_user&lt;/code&gt; 를 배치 합니다. 세션이없는 경우 플래시 오류 메시지를 추가하고 홈페이지로 리디렉션 한 다음 &lt;a href=&quot;../plug/plug.conn#halt/1&quot;&gt; &lt;code&gt;Plug.Conn.halt/1&lt;/code&gt; &lt;/a&gt; 을 사용 하여 다운 스트림의 추가 플러그가 호출되는 것을 중지합니다. 이 새로운 플러그는 아직 사용하지 않을 것이지만 잠시 후에 인증 된 경로를 추가 할 때 준비되고 대기 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="69f72d3d1129e43939aa3d0a1d16db2b59ebc4fc" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t recommend using this store in production as every session will be stored in ETS and never cleaned until you create a task responsible for cleaning up old entries.</source>
          <target state="translated">모든 세션은 ETS에 저장되며 이전 항목 정리를 담당하는 작업을 만들 때까지 정리하지 않으므로 프로덕션에서이 저장소를 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="576fc766b104ea8478c0d19094a0d950b947d028" translate="yes" xml:space="preserve">
          <source>We don't recommend using this store in production as every session will be stored in ETS and never cleaned until you create a task responsible for cleaning up old entries.</source>
          <target state="translated">We don't recommend using this store in production as every session will be stored in ETS and never cleaned until you create a task responsible for cleaning up old entries.</target>
        </trans-unit>
        <trans-unit id="8bdea290c4bf9ab3307eef996e26ba57f275eb50" translate="yes" xml:space="preserve">
          <source>We have come quite a long way in this guide without talking about one of the first lines we saw in the router - &lt;code&gt;pipe_through :browser&lt;/code&gt;. It's time to fix that.</source>
          <target state="translated">우리는 router- &lt;code&gt;pipe_through :browser&lt;/code&gt; 에서 본 첫 번째 줄 중 하나에 대해 이야기하지 않고이 가이드에서 꽤 먼 길을 왔습니다 . 그것을 고칠 시간입니다.</target>
        </trans-unit>
        <trans-unit id="d79e494a4f72a1cbacbbde76f1b036945bf4834b" translate="yes" xml:space="preserve">
          <source>We have seen all of these at one point or another in the guides, but having all the information about them in one place seems like a good idea.</source>
          <target state="translated">우리는이 모든 것을 가이드에서 한 지점 또는 다른 지점에서 보았지만 한곳에 모든 정보를 가지고있는 것은 좋은 생각 인 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="01ed0bba0208815f67fae984535bb4e733d0ecfc" translate="yes" xml:space="preserve">
          <source>We may also use &lt;code&gt;flash&lt;/code&gt; messages for this. For example, imagine you have a page to manage all &quot;Team members&quot; in an organization. However, if there is only one member left in the organization, they should not be allowed to leave. You may want to handle this by using flash messages:</source>
          <target state="translated">이를 위해 &lt;code&gt;flash&lt;/code&gt; 메시지를 사용할 수도 있습니다 . 예를 들어 조직의 모든 &quot;팀 구성원&quot;을 관리하는 페이지가 있다고 가정 해보십시오. 단, 조직에 구성원이 한 명만 남아있는 경우 탈퇴 할 수 없습니다. 플래시 메시지를 사용하여이를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="4f299bb219751adfb3495be7a97f8ec0479a535d" translate="yes" xml:space="preserve">
          <source>We modified our &lt;code&gt;show&lt;/code&gt; action to pipe our fetched page into &lt;code&gt;CMS.inc_page_views/1&lt;/code&gt;, which will return the updated page. Then we rendered our template just as before. Let's try it out. Refresh one of your pages a few times and watch the view count increase.</source>
          <target state="translated">가져온 페이지를 &lt;code&gt;CMS.inc_page_views/1&lt;/code&gt; 로 파이프 하여 업데이트 된 페이지를 반환하도록 &lt;code&gt;show&lt;/code&gt; 작업을 수정했습니다 . 그런 다음 이전과 마찬가지로 템플릿을 렌더링했습니다. 그것을 시도해 봅시다. 페이지 중 하나를 몇 번 새로 고침하고 조회수가 증가하는지 확인하세요.</target>
        </trans-unit>
        <trans-unit id="ee3d83cf6be1492d1db7a3ca58d11035ddc88fd2" translate="yes" xml:space="preserve">
          <source>We modified the &lt;code&gt;create&lt;/code&gt; action to grab our &lt;code&gt;current_author&lt;/code&gt; from the connection assigns, which was placed there by our &lt;code&gt;require_existing_author&lt;/code&gt; plug. We then passed our current author into &lt;code&gt;CMS.create_page&lt;/code&gt; where it will be used to associate the author to the new page. Next, we changed the &lt;code&gt;update&lt;/code&gt; action to pass the &lt;code&gt;conn.assigns.page&lt;/code&gt; into &lt;code&gt;CMS.update_page/2&lt;/code&gt;, rather than fetching it directly in the action. Since our &lt;code&gt;authorize_page&lt;/code&gt; plug already fetched the page and placed it into the assigns, we can simply reference it here in the action. Similarly, we updated the &lt;code&gt;delete&lt;/code&gt; action to pass the &lt;code&gt;conn.assigns.page&lt;/code&gt; into the &lt;code&gt;CMS&lt;/code&gt; rather than fetching the page in the action.</source>
          <target state="translated">우리는 &lt;code&gt;require_existing_author&lt;/code&gt; 플러그에 의해 배치 된 연결 할당에서 &lt;code&gt;current_author&lt;/code&gt; 를 가져 오기 위해 &lt;code&gt;create&lt;/code&gt; 액션을 수정했습니다 . 그런 다음 현재 작성자를 &lt;code&gt;CMS.create_page&lt;/code&gt; 로 전달 하여 작성자를 새 페이지에 연결하는 데 사용합니다. 다음으로, &lt;code&gt;conn.assigns.page&lt;/code&gt; 를 액션에서 직접 가져 오는 대신 &lt;code&gt;CMS.update_page/2&lt;/code&gt; 로 전달 하도록 &lt;code&gt;update&lt;/code&gt; 액션을 변경했습니다 . 우리 때문에 &lt;code&gt;authorize_page&lt;/code&gt; 의 플러그가 이미 페이지를 가져과 양수인로 배치, 우리는 단순히 행동에 여기를 참조 할 수 있습니다. 마찬가지로 &lt;code&gt;delete&lt;/code&gt; 작업을 업데이트 하여 &lt;code&gt;conn.assigns.page&lt;/code&gt; 작업에서 페이지를 가져 오는 대신 conn.assigns.page 를 &lt;code&gt;CMS&lt;/code&gt; 에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4de5409c1e7e7c0a48f226c2dad746ddf893cd2d" translate="yes" xml:space="preserve">
          <source>We recommend adapters to publish certain &lt;code&gt;Telemetry&lt;/code&gt; events listed below. Those events will use the &lt;code&gt;:telemetry_prefix&lt;/code&gt; outlined above which defaults to &lt;code&gt;[:my_app, :repo]&lt;/code&gt;.</source>
          <target state="translated">We recommend adapters to publish certain &lt;code&gt;Telemetry&lt;/code&gt; events listed below. Those events will use the &lt;code&gt;:telemetry_prefix&lt;/code&gt; outlined above which defaults to &lt;code&gt;[:my_app, :repo]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="92574892bc3e74599df540480a75267f64068f36" translate="yes" xml:space="preserve">
          <source>We recommend adapters to publish certain &lt;code&gt;Telemetry&lt;/code&gt; events listed below. Those events will use the &lt;code&gt;:telemetry_prefix&lt;/code&gt; outlined above. See the &lt;code&gt;Telemetry&lt;/code&gt; library for information on how to handle such events. All examples below consider a repository named &lt;code&gt;MyApp.Repo&lt;/code&gt;:</source>
          <target state="translated">어댑터는 아래에 나열된 특정 &lt;code&gt;Telemetry&lt;/code&gt; 이벤트 를 게시하는 것이 좋습니다 . 이러한 이벤트는 위에서 설명한 &lt;code&gt;:telemetry_prefix&lt;/code&gt; 를 사용합니다 . 이러한 이벤트를 처리하는 방법에 대한 정보 는 &lt;code&gt;Telemetry&lt;/code&gt; 라이브러리를 참조하십시오 . 아래의 모든 예제는 &lt;code&gt;MyApp.Repo&lt;/code&gt; 라는 저장소를 고려합니다 .</target>
        </trans-unit>
        <trans-unit id="05497f136d54bb8140a860bcdfe9ad65b99a40ee" translate="yes" xml:space="preserve">
          <source>We recommend to set it to &lt;code&gt;:runtime&lt;/code&gt; in development for compilation time improvements. It must be &lt;code&gt;:compile&lt;/code&gt; in production (the default).</source>
          <target state="translated">We recommend to set it to &lt;code&gt;:runtime&lt;/code&gt; in development for compilation time improvements. It must be &lt;code&gt;:compile&lt;/code&gt; in production (the default).</target>
        </trans-unit>
        <trans-unit id="b075ceb35eea2ca0bf4c010e8b5d47bed3ec9f1e" translate="yes" xml:space="preserve">
          <source>We retrieve the repo from the comment changeset itself and use update_all to update the counter cache in one query. Finally, the original changeset must be returned.</source>
          <target state="translated">주석 변경 세트 자체에서 저장소를 검색하고 update_all을 사용하여 하나의 쿼리에서 카운터 캐시를 업데이트합니다. 마지막으로 원래 변경 세트를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="a7725a909f9b67737d1723fe4d7bb0ac710a3926" translate="yes" xml:space="preserve">
          <source>We rewrote the &lt;code&gt;list_users/0&lt;/code&gt; and &lt;code&gt;get_user!/1&lt;/code&gt; to preload the credential association whenever we fetch users. The Repo preload functionality fetches a schema's association data from the database, then places it inside the schema. When operating on a collection, such as our query in &lt;code&gt;list_users&lt;/code&gt;, Ecto can efficiently preload the associations in a single query. This allows us to represent our &lt;code&gt;%Accounts.User{}&lt;/code&gt; structs as always containing credentials without the caller having to worry about fetching the extra data.</source>
          <target state="translated">사용자를 가져올 때마다 자격 증명 연결을 미리로드하기 위해 &lt;code&gt;list_users/0&lt;/code&gt; 및 &lt;code&gt;get_user!/1&lt;/code&gt; 을 다시 작성했습니다 . Repo 사전로드 기능은 데이터베이스에서 스키마의 연결 데이터를 가져온 다음 스키마에 배치합니다. &lt;code&gt;list_users&lt;/code&gt; 의 쿼리와 같은 컬렉션에서 작업 할 때 Ecto는 단일 쿼리에서 연결을 효율적으로 미리로드 할 수 있습니다. 이를 통해 호출자가 추가 데이터를 가져 오는 것에 대해 걱정할 필요없이 항상 자격 증명을 포함하는 &lt;code&gt;%Accounts.User{}&lt;/code&gt; 구조체 를 나타낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4499c035b38a68b8bb20a5baa2d3e2acbf2a5561" translate="yes" xml:space="preserve">
          <source>We see that each of these routes scopes the posts to a user ID. For the first one, we will invoke the &lt;code&gt;PostController&lt;/code&gt;&lt;code&gt;index&lt;/code&gt; action, but we will pass in a &lt;code&gt;user_id&lt;/code&gt;. This implies that we would display all the posts for that individual user only. The same scoping applies for all these routes.</source>
          <target state="translated">이러한 각 경로는 게시물의 범위를 사용자 ID로 지정합니다. 첫 번째의 경우 &lt;code&gt;PostController&lt;/code&gt; &lt;code&gt;index&lt;/code&gt; 작업을 호출 하지만 &lt;code&gt;user_id&lt;/code&gt; 를 전달합니다 . 이는 개별 사용자에 대한 모든 게시물 만 표시한다는 것을 의미합니다. 이러한 모든 경로에 동일한 범위가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="f4a3d319df7291236d95f0bb2c670bfaf25c08a9" translate="yes" xml:space="preserve">
          <source>We simply need to invoke the task with a &lt;code&gt;snake_case&lt;/code&gt; version of the module name that we want. Preferably, the name will describe what we want the migration to do.</source>
          <target state="translated">원하는 모듈 이름 의 &lt;code&gt;snake_case&lt;/code&gt; 버전으로 작업을 호출하기 만하면 됩니다. 가급적이면 이름은 마이그레이션에서 수행 할 작업을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="f7e696ee60d28d749285f72a96f72e81f816abcd" translate="yes" xml:space="preserve">
          <source>We started by aliasing our &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Repo&lt;/code&gt; modules for easy access. Next, we called &lt;code&gt;Repo.insert/1&lt;/code&gt; and passed a user struct. Since we're in the &lt;code&gt;dev&lt;/code&gt; environment, we can see the debug logs for the query our Repo performed when inserting the underlying &lt;code&gt;%User{}&lt;/code&gt; data. We received a 2-tuple back with &lt;code&gt;{:ok, %User{}}&lt;/code&gt;, which lets us know the insertion was successful. With a couple of users inserted, let's fetch them back out of the repo.</source>
          <target state="translated">쉽게 액세스 할 수 있도록 &lt;code&gt;User&lt;/code&gt; 및 &lt;code&gt;Repo&lt;/code&gt; 모듈 에 별칭을 지정하는 것으로 시작했습니다 . 다음으로 &lt;code&gt;Repo.insert/1&lt;/code&gt; 을 호출 하고 사용자 구조체를 전달했습니다. &lt;code&gt;dev&lt;/code&gt; 환경 에 있기 때문에 기본 &lt;code&gt;%User{}&lt;/code&gt; 데이터를 삽입 할 때 Repo가 수행 한 쿼리에 대한 디버그 로그를 볼 수 있습니다 . &lt;code&gt;{:ok, %User{}}&lt;/code&gt; 와 함께 2 개의 튜플이 반환되어 삽입이 성공했음을 알 수 있습니다. 몇 명의 사용자를 삽입하고 repo에서 다시 가져 오겠습니다.</target>
        </trans-unit>
        <trans-unit id="18d804dd0efb729c10e10b45be4d9801e8e444a7" translate="yes" xml:space="preserve">
          <source>We started by rewriting the &lt;code&gt;list_pages/0&lt;/code&gt; function to preload the associated author, user, and credential data from the database. Next, we rewrote &lt;code&gt;get_page!/1&lt;/code&gt; and &lt;code&gt;get_author!/1&lt;/code&gt; to also preload the necessary data.</source>
          <target state="translated">데이터베이스에서 관련 작성자, 사용자 및 자격 증명 데이터를 미리로드하기 위해 &lt;code&gt;list_pages/0&lt;/code&gt; 함수를 다시 작성하는 것으로 시작했습니다 . 다음으로, 필요한 데이터를 미리로드하기 위해 &lt;code&gt;get_page!/1&lt;/code&gt; 및 &lt;code&gt;get_author!/1&lt;/code&gt; 을 다시 작성 했습니다 .</target>
        </trans-unit>
        <trans-unit id="3dcc8bc1d8664d69a0870d4ad5f735325e00ced3" translate="yes" xml:space="preserve">
          <source>We updated the functions to pipe our user changeset into &lt;code&gt;Ecto.Changeset.cast_assoc/3&lt;/code&gt;. Ecto's &lt;code&gt;cast_assoc/3&lt;/code&gt; allows us to tell the changeset how to cast user input to a schema relation. We also used the &lt;code&gt;:with&lt;/code&gt; option to tell Ecto to use our &lt;code&gt;Credential.changeset/2&lt;/code&gt; function to cast the data. This way, any validations we perform in &lt;code&gt;Credential.changeset/2&lt;/code&gt; will be applied when saving the &lt;code&gt;User&lt;/code&gt; changeset.</source>
          <target state="translated">사용자 변경 집합을 &lt;code&gt;Ecto.Changeset.cast_assoc/3&lt;/code&gt; 로 파이프하도록 함수를 업데이트했습니다 . Ecto의 &lt;code&gt;cast_assoc/3&lt;/code&gt; 를 사용하면 변경 집합에 사용자 입력을 스키마 관계로 캐스팅하는 방법을 알릴 수 있습니다. 또한 &lt;code&gt;:with&lt;/code&gt; 옵션을 사용하여 Ecto에게 &lt;code&gt;Credential.changeset/2&lt;/code&gt; 함수를 사용하여 데이터를 캐스팅하도록 지시했습니다. 이렇게하면 &lt;code&gt;Credential.changeset/2&lt;/code&gt; 에서 수행하는 모든 유효성 검사가 &lt;code&gt;User&lt;/code&gt; 변경 집합을 저장할 때 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="8de4f72eb6ad9964f62387a34da72c5a03d32895" translate="yes" xml:space="preserve">
          <source>We used &lt;a href=&quot;../phoenix_html/phoenix.html&quot;&gt;&lt;code&gt;Phoenix.HTML&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;inputs_for&lt;/code&gt; function to add an associations nested fields within the parent form. Within the nested inputs, we rendered our credential's email field and included the &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;error_tag&lt;/code&gt; helpers just like our other inputs.</source>
          <target state="translated">우리는 사용 &lt;a href=&quot;../phoenix_html/phoenix.html&quot;&gt; &lt;code&gt;Phoenix.HTML&lt;/code&gt; &lt;/a&gt; 의를 &lt;code&gt;inputs_for&lt;/code&gt; 부모 폼 내에서 협회를 중첩 필드를 추가하는 기능. 중첩 된 입력 내에서 자격 증명의 이메일 필드를 렌더링 하고 다른 입력과 마찬가지로 &lt;code&gt;label&lt;/code&gt; 및 &lt;code&gt;error_tag&lt;/code&gt; 도우미를 포함했습니다 .</target>
        </trans-unit>
        <trans-unit id="2eb105a69c4790a38e2c6e595113e2b7c25e2a69" translate="yes" xml:space="preserve">
          <source>We used &lt;code&gt;Ecto.Schema&lt;/code&gt;'s &lt;code&gt;has_one&lt;/code&gt; macro to let Ecto know how to associate our parent User to a child Credential. Next, let's add the relationships in the opposite direction in &lt;code&gt;accounts/credential.ex&lt;/code&gt;:</source>
          <target state="translated">우리는 사용 &lt;code&gt;Ecto.Schema&lt;/code&gt; 의 &lt;code&gt;has_one&lt;/code&gt; 의 아이 자격 증명에 우리의 부모 사용자를 연결하는 방법을 알고 체외 수 있도록 매크로를. 다음으로 &lt;code&gt;accounts/credential.ex&lt;/code&gt; 에 반대 방향으로 관계를 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="8f4f59ae78fce8fc2cb4595b1263e7dcfd408274" translate="yes" xml:space="preserve">
          <source>We used &lt;code&gt;connected?(socket)&lt;/code&gt; on mount to send our view a message every 30s if the socket is in a connected state. We receive the &lt;code&gt;:update&lt;/code&gt; message in the &lt;code&gt;handle_info/2&lt;/code&gt; callback, just like in an Elixir &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;, and update our socket assigns. Whenever a socket's assigns change, &lt;a href=&quot;#c:render/1&quot;&gt;&lt;code&gt;render/1&lt;/code&gt;&lt;/a&gt; is automatically invoked, and the updates are sent to the client.</source>
          <target state="translated">우리는 사용 &lt;code&gt;connected?(socket)&lt;/code&gt; 소켓이 연결된 상태 인 경우 메시지 우리의보기 모든 30 대를 보낼 마운트합니다. Elixir &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; 에서처럼 &lt;code&gt;handle_info/2&lt;/code&gt; 콜백 에서 &lt;code&gt;:update&lt;/code&gt; 메시지를 받고 소켓 할당을 업데이트합니다. 소켓이 변경 사항을 할당 할 때마다 &lt;a href=&quot;#c:render/1&quot;&gt; &lt;code&gt;render/1&lt;/code&gt; &lt;/a&gt; 이 자동으로 호출되고 업데이트가 클라이언트로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="7d8a514f610fe332ff397d9bf7bf8836d5c70778" translate="yes" xml:space="preserve">
          <source>We used &lt;code&gt;resources&lt;/code&gt; to generate a set of routes under the &lt;code&gt;&quot;/session&quot;&lt;/code&gt; path. This is what we've done for other routes, except this time we also passed the &lt;code&gt;:only&lt;/code&gt; option to limit which routes are generated, since we only need to support &lt;code&gt;:new&lt;/code&gt;, &lt;code&gt;:create&lt;/code&gt;, and &lt;code&gt;:delete&lt;/code&gt; actions. We also used the &lt;code&gt;singleton: true&lt;/code&gt; option, which defines all the RESTful routes, but does not require a resource ID to be passed along in the URL. We don't need an ID in the URL because our actions are always scoped to the &quot;current&quot; user in the system. The ID is always in the session. Before we finish our router, let's add an authentication plug to the router that will allow us to lock down certain routes after a user has used our new session controller to sign-in. Add the following function to &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;resources&lt;/code&gt; 를 사용 하여 &lt;code&gt;&quot;/session&quot;&lt;/code&gt; 경로 아래에 경로 집합을 생성했습니다 . 이것은 다른 경로에 대해 수행 한 작업입니다. 이번에 는 생성되는 경로를 제한하기 위해 &lt;code&gt;:only&lt;/code&gt; 옵션을 전달했습니다 . &lt;code&gt;:new&lt;/code&gt; , &lt;code&gt;:create&lt;/code&gt; 및 &lt;code&gt;:delete&lt;/code&gt; 작업 만 지원하면되기 때문 입니다. 우리는 또한 &lt;code&gt;singleton: true&lt;/code&gt; 사용했습니다 : true모든 RESTful 경로를 정의하지만 URL에서 리소스 ID를 전달할 필요는 없습니다. 우리의 작업은 항상 시스템의 &quot;현재&quot;사용자로 범위가 지정되므로 URL에 ID가 필요하지 않습니다. ID는 항상 세션에 있습니다. 라우터를 완료하기 전에 사용자가 새 세션 컨트롤러를 사용하여 로그인 한 후 특정 경로를 잠글 수있는 인증 플러그를 라우터에 추가해 보겠습니다. &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; 에 다음 함수를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="a2e3ac6b828013d5a6758cd0906aa6aa33aab717" translate="yes" xml:space="preserve">
          <source>We used Ecto's &lt;code&gt;belongs_to&lt;/code&gt; and &lt;code&gt;has_one&lt;/code&gt; associations to wire-up how our data is related at the context level, but remember this is decoupled from our web-facing user input. To associate user input to our schema associations, we need to handle it the way we've handled other user input so far &amp;ndash; in changesets. Remove the alias for Credential added by the generator and modify your &lt;code&gt;alias Hello.Accounts.User&lt;/code&gt;, &lt;code&gt;create_user/1&lt;/code&gt; and &lt;code&gt;update_user/2&lt;/code&gt; functions in your &lt;code&gt;Accounts&lt;/code&gt; context to build a changeset which knows how to cast user input with nested credential information:</source>
          <target state="translated">Ecto의 &lt;code&gt;belongs_to&lt;/code&gt; 및 &lt;code&gt;has_one&lt;/code&gt; 연결을 사용하여 데이터가 컨텍스트 수준에서 어떻게 관련되는지 연결했지만, 이것이 웹을 향한 사용자 입력과 분리되어 있음을 기억하십시오. 사용자 입력을 스키마 연결에 연결하려면 지금까지 다른 사용자 입력을 처리 한 방식 (변경 집합에서)으로 처리해야합니다. 생성기가 추가 한 Credential의 별칭을 제거하고 &lt;code&gt;Accounts&lt;/code&gt; 컨텍스트 에서 &lt;code&gt;alias Hello.Accounts.User&lt;/code&gt; , &lt;code&gt;create_user/1&lt;/code&gt; 및 &lt;code&gt;update_user/2&lt;/code&gt; 함수를 수정하여 중첩 된 자격 증명 정보로 사용자 입력을 캐스팅하는 방법을 알고있는 변경 집합을 빌드합니다.</target>
        </trans-unit>
        <trans-unit id="9493f9a9bd1cf49968cba241eb7a5f8a99276108" translate="yes" xml:space="preserve">
          <source>We used the &lt;code&gt;:delete_all&lt;/code&gt; strategy again to enforce data integrity. This way, when a user is deleted from the application through &lt;code&gt;Accounts.delete_user/1)&lt;/code&gt;, we don't have to rely on application code in our &lt;code&gt;Accounts&lt;/code&gt; context to worry about cleaning up the &lt;code&gt;CMS&lt;/code&gt; author records. This keeps our application code decoupled and the data integrity enforcement where it belongs &amp;ndash; in the database.</source>
          <target state="translated">데이터 무결성을 강화 하기 위해 &lt;code&gt;:delete_all&lt;/code&gt; 전략을 다시 사용했습니다 . 이렇게하면 &lt;code&gt;Accounts.delete_user/1)&lt;/code&gt; 를 통해 사용자가 애플리케이션에서 삭제 될 때 &lt;code&gt;CMS&lt;/code&gt; 작성자 레코드 정리에 대해 걱정하기 위해 &lt;code&gt;Accounts&lt;/code&gt; 컨텍스트 의 애플리케이션 코드에 의존 할 필요가 없습니다 . 이렇게하면 애플리케이션 코드가 분리되고 데이터베이스에서 해당 코드가 속한 데이터 무결성 적용이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="5d9deef7348b35ec478c22ae3696c778d5ba713f" translate="yes" xml:space="preserve">
          <source>We used the &lt;code&gt;alter&lt;/code&gt; macro to add a new &lt;code&gt;author_id&lt;/code&gt; field to the pages table, with a foreign key to our authors table. We also used the &lt;code&gt;on_delete: :delete_all&lt;/code&gt; option again to prune any pages when a parent author is deleted from the application.</source>
          <target state="translated">&lt;code&gt;alter&lt;/code&gt; 매크로를 사용하여 우리의 authors 테이블에 대한 외래 키와 함께 새로운 &lt;code&gt;author_id&lt;/code&gt; 필드를 pages 테이블 에 추가했습니다 . 또한 &lt;code&gt;on_delete: :delete_all&lt;/code&gt; 옵션을 다시 사용하여 상위 작성자가 애플리케이션에서 삭제 될 때 모든 페이지를 정리했습니다 .</target>
        </trans-unit>
        <trans-unit id="55a8e72eb64eeb02b1eeb663307acf38808664ae" translate="yes" xml:space="preserve">
          <source>We used the &lt;code&gt;belongs_to&lt;/code&gt; macro to map our child relationship to the parent &lt;code&gt;User&lt;/code&gt;. With our schema associations set up, let's open up &lt;code&gt;accounts.ex&lt;/code&gt; and make the following changes to the generated &lt;code&gt;list_users&lt;/code&gt; and &lt;code&gt;get_user!&lt;/code&gt; functions:</source>
          <target state="translated">우리는 하위 관계를 상위 &lt;code&gt;User&lt;/code&gt; 에 매핑 하기 위해 &lt;code&gt;belongs_to&lt;/code&gt; 매크로를 사용했습니다 . 스키마 연결이 설정되면 &lt;code&gt;accounts.ex&lt;/code&gt; 를 열고 생성 된 &lt;code&gt;list_users&lt;/code&gt; 및 &lt;code&gt;get_user!&lt;/code&gt; 를 다음과 같이 변경해 보겠습니다 ! 기능 :</target>
        </trans-unit>
        <trans-unit id="108aa38566fd091763d3f5b2d748469e0020e6e3" translate="yes" xml:space="preserve">
          <source>We used the context generator to inject code, just like when we generated our credentials code. We added fields for the author bio, their role in the content management system, the genre the author writes in, and lastly a foreign key to a user in our accounts system. Since our accounts context is still the authority on end-users in our application, we will depend on it for our CMS authors. That said, any information specific to authors will stay in the authors schema. We could also decorate our &lt;code&gt;Author&lt;/code&gt; with user account information by using virtual fields and never expose the &lt;code&gt;User&lt;/code&gt; structure. This would ensure consumers of the CMS API are protected from changes in the &lt;code&gt;User&lt;/code&gt; context.</source>
          <target state="translated">자격 증명 코드를 생성 할 때와 마찬가지로 컨텍스트 생성기를 사용하여 코드를 삽입했습니다. 저자 약력, 콘텐츠 관리 시스템에서의 역할, 저자가 쓰는 장르, 마지막으로 계정 시스템의 사용자에 대한 외래 키 필드를 추가했습니다. 우리의 계정 컨텍스트는 여전히 응용 프로그램의 최종 사용자에 대한 권한이므로 CMS 작성자에게 의존 할 것입니다. 즉, 작성자와 관련된 모든 정보는 작성자 스키마에 유지됩니다. 가상 필드를 사용하여 &lt;code&gt;Author&lt;/code&gt; 를 사용자 계정 정보로 꾸미고 &lt;code&gt;User&lt;/code&gt; 구조를 절대 노출하지 않을 수도 있습니다. 이렇게하면 CMS API 소비자가 &lt;code&gt;User&lt;/code&gt; 컨텍스트의 변경으로부터 보호됩니다 .</target>
        </trans-unit>
        <trans-unit id="dfc6991b064554ccc6723f5147f4483abfc51bf0" translate="yes" xml:space="preserve">
          <source>We will cover all Phoenix Mix tasks, except &lt;code&gt;phx.new&lt;/code&gt;, &lt;code&gt;phx.new.ecto&lt;/code&gt;, and &lt;code&gt;phx.new.web&lt;/code&gt;, which are part of the Phoenix installer. You can learn more about them or any other task by calling &lt;code&gt;mix help TASK&lt;/code&gt;.</source>
          <target state="translated">Phoenix 설치 프로그램의 일부인 &lt;code&gt;phx.new&lt;/code&gt; , &lt;code&gt;phx.new.ecto&lt;/code&gt; 및 &lt;code&gt;phx.new.web&lt;/code&gt; 을 제외한 모든 Phoenix Mix 작업을 다룰 것 입니다. &lt;code&gt;mix help TASK&lt;/code&gt; 를 호출하여 이들 또는 다른 작업에 대해 자세히 알아볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e428a87498df8cea96a8ffdc6e895d7065a97b67" translate="yes" xml:space="preserve">
          <source>We will discuss reporters in the next section.</source>
          <target state="translated">다음 섹션에서 기자에 대해 논의 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="000d81f0848f2775e6643d5edb029effce3b6fe6" translate="yes" xml:space="preserve">
          <source>We will explore all three scenarios below.</source>
          <target state="translated">아래 세 가지 시나리오를 모두 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="151008252f9648889c140e3b29c9f40fb921d160" translate="yes" xml:space="preserve">
          <source>We will go over those directories one by one:</source>
          <target state="translated">이러한 디렉토리를 하나씩 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="fff8aea6410e0e74de372dcca17ea283345bd063" translate="yes" xml:space="preserve">
          <source>We will use this generator to generate new applications in the next guide, called &lt;a href=&quot;up_and_running&quot;&gt;Up and Running&lt;/a&gt;.</source>
          <target state="translated">이 생성기를 사용하여 다음 가이드에서 &lt;a href=&quot;up_and_running&quot;&gt;Up and Running&lt;/a&gt; 이라는 새 애플리케이션을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="8559b5b7c83a9d41251bdea7fcb08787fea0ac6a" translate="yes" xml:space="preserve">
          <source>We would then need to provide an &lt;code&gt;index.xml.eex&lt;/code&gt; template which created valid xml, and we would be done.</source>
          <target state="translated">그런 다음 유효한 xml을 생성 한 &lt;code&gt;index.xml.eex&lt;/code&gt; 템플릿 을 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8150e70bb9a7fbff641e318dcafcaa1038d79533" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve made two modifications to the suggested config from the OWASP recommendations. First we include ECDSA certificates which are excluded from their configuration. Second we have changed the order of the ciphers to deprioritize DHE because of performance implications noted within the OWASP post itself. As the article notes &amp;ldquo;&amp;hellip;the TLS handshake with DHE hinders the CPU about 2.4 times more than ECDHE&amp;rdquo;.</source>
          <target state="translated">OWASP 권장 사항에서 제안 된 구성을 두 가지 수정했습니다. 먼저 구성에서 제외 된 ECDSA 인증서를 포함합니다. 둘째, OWASP 포스트 자체에 언급 된 성능 영향으로 인해 DHE의 우선 순위를 낮추기 위해 암호화 순서를 변경했습니다. 이 기사에서&amp;ldquo;&amp;hellip; DHE와의 TLS 핸드 셰이크는 CPU가 ECDHE보다 약 2.4 배 이상 방해합니다&amp;rdquo;라고 지적합니다.</target>
        </trans-unit>
        <trans-unit id="61c51a9345eb5ccd2ae8073bd226cb589ab0f43f" translate="yes" xml:space="preserve">
          <source>We'll save a discussion of &lt;code&gt;use HelloWeb, :controller&lt;/code&gt; for the &lt;a href=&quot;controllers&quot;&gt;Controllers Guide&lt;/a&gt;. For now, let's focus on the &lt;code&gt;index/2&lt;/code&gt; action.</source>
          <target state="translated">&lt;a href=&quot;controllers&quot;&gt;컨트롤러 가이드를&lt;/a&gt; 위해 &lt;code&gt;use HelloWeb, :controller&lt;/code&gt; 대한 논의를 저장하겠습니다 . 지금은 &lt;code&gt;index/2&lt;/code&gt; 작업 에 집중하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="fdea3d6b7d6463993df246b3bd3bc55b90e64e7c" translate="yes" xml:space="preserve">
          <source>We're done. If you point your browser here: &lt;a href=&quot;http://localhost:4000/hello/Frank&quot;&gt;http://localhost:4000/hello/Frank&lt;/a&gt;, you should see a page that looks like this:</source>
          <target state="translated">끝났습니다. &lt;a href=&quot;http://localhost:4000/hello/Frank&quot;&gt;http : // localhost : 4000 / hello / Frank&lt;/a&gt; 에서 브라우저를 가리키면 다음과 같은 페이지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="adfb5bbdabe7282e8eaa4a0c57232fa8c10cfb41" translate="yes" xml:space="preserve">
          <source>We're on Freenode IRC in the &lt;a href=&quot;http://webchat.freenode.net/?channels=elixir-lang&quot;&gt;#elixir-lang&lt;/a&gt; channel.</source>
          <target state="translated">우리는 &lt;a href=&quot;http://webchat.freenode.net/?channels=elixir-lang&quot;&gt;# elixir-lang&lt;/a&gt; 채널 의 Freenode IRC에 있습니다.</target>
        </trans-unit>
        <trans-unit id="9334cc6307d289fcb0ddf682ec4df0bb89bfb4f9" translate="yes" xml:space="preserve">
          <source>We've explored migrations and schemas, but we haven't yet persisted any of our schemas or changesets. We briefly looked at our repo module in &lt;code&gt;lib/hello/repo.ex&lt;/code&gt; earlier, now it's time to put it to use.</source>
          <target state="translated">마이그레이션과 스키마를 탐색했지만 아직 스키마 나 변경 집합을 유지하지 않았습니다. 이전 에 &lt;code&gt;lib/hello/repo.ex&lt;/code&gt; 의 repo 모듈을 간략히 살펴 보았 으므로 이제 사용할 차례입니다.</target>
        </trans-unit>
        <trans-unit id="e217c6dd5a96a27f9754e8b394ec611c90f9d6fd" translate="yes" xml:space="preserve">
          <source>We've introduced the &lt;code&gt;:tag_values&lt;/code&gt; option here, because we need to perform a transformation on the event metadata in order to get to the values we need.</source>
          <target state="translated">여기에 &lt;code&gt;:tag_values&lt;/code&gt; 옵션을 도입했습니다 . 필요한 값을 얻기 위해 이벤트 메타 데이터에서 변환을 수행해야하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="5a866728c41547eb9d46a9c30ba548d9fd5737d0" translate="yes" xml:space="preserve">
          <source>We've made two modifications to the suggested config from the OWASP recommendations. First we include ECDSA certificates which are excluded from their configuration. Second we have changed the order of the ciphers to deprioritize DHE because of performance implications noted within the OWASP post itself. As the article notes &quot;...the TLS handshake with DHE hinders the CPU about 2.4 times more than ECDHE&quot;.</source>
          <target state="translated">We've made two modifications to the suggested config from the OWASP recommendations. First we include ECDSA certificates which are excluded from their configuration. Second we have changed the order of the ciphers to deprioritize DHE because of performance implications noted within the OWASP post itself. As the article notes &quot;...the TLS handshake with DHE hinders the CPU about 2.4 times more than ECDHE&quot;.</target>
        </trans-unit>
        <trans-unit id="4238d60f5741965a0b4e6a971bdc18d617a9980b" translate="yes" xml:space="preserve">
          <source>We've seen how controllers work in our &lt;a href=&quot;controllers&quot;&gt;controller guide&lt;/a&gt;, so the code probably isn't too surprising. What is worth noticing is how our controller calls into the &lt;code&gt;Accounts&lt;/code&gt; context. We can see that the &lt;code&gt;index&lt;/code&gt; action fetches a list of users with &lt;code&gt;Accounts.list_users/0&lt;/code&gt;, and how users are persisted in the &lt;code&gt;create&lt;/code&gt; action with &lt;code&gt;Accounts.create_user/1&lt;/code&gt;. We haven't yet looked at the accounts context, so we don't yet know how user fetching and creation is happening under the hood &amp;ndash; &lt;em&gt;but that's the point&lt;/em&gt;. Our Phoenix controller is the web interface into our greater application. It shouldn't be concerned with the details of how users are fetched from the database or persisted into storage. We only care about telling our application to perform some work for us. This is great because our business logic and storage details are decoupled from the web layer of our application. If we move to a full-text storage engine later for fetching users instead of a SQL query, our controller doesn't need to be changed. Likewise, we can reuse our context code from any other interface in our application, be it a channel, mix task, or long-running process importing CSV data.</source>
          <target state="translated">&lt;a href=&quot;controllers&quot;&gt;컨트롤러 가이드&lt;/a&gt; 에서 컨트롤러가 작동하는 방식을 보았 으므로 코드가 그리 놀라운 것은 아닙니다. 주목할 가치가있는 것은 컨트롤러가 &lt;code&gt;Accounts&lt;/code&gt; 컨텍스트를 호출하는 방법 입니다. 우리는 것을 알 수 있습니다 &lt;code&gt;index&lt;/code&gt; 작업을하는 사용자의 목록을 가져 오는 &lt;code&gt;Accounts.list_users/0&lt;/code&gt; , 사용자가에서 지속하는 방법을 &lt;code&gt;create&lt;/code&gt; 와 행동 &lt;code&gt;Accounts.create_user/1&lt;/code&gt; . 아직 계정 컨텍스트를 살펴 보지 않았기 때문에 사용자 가져 오기 및 생성이 내부에서 어떻게 발생하는지 아직 알지 못합니다. &lt;em&gt;하지만 그게 요점입니다.&lt;/em&gt;. Phoenix 컨트롤러는 더 큰 애플리케이션에 대한 웹 인터페이스입니다. 사용자를 데이터베이스에서 가져 오거나 스토리지에 유지하는 방법에 대한 세부 정보는 신경 쓰지 않아야합니다. 우리는 우리를 위해 일부 작업을 수행하도록 응용 프로그램에 지시하는 데에만 관심이 있습니다. 이는 비즈니스 로직과 스토리지 세부 정보가 애플리케이션의 웹 레이어에서 분리되어 있기 때문에 훌륭합니다. SQL 쿼리 대신 사용자를 가져 오기 위해 나중에 전체 텍스트 스토리지 엔진으로 이동하는 경우 컨트롤러를 변경할 필요가 없습니다. 마찬가지로 채널, 혼합 작업 또는 CSV 데이터를 가져 오는 장기 실행 프로세스 등 애플리케이션의 다른 인터페이스에서 컨텍스트 코드를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b4c0cce633874242376f210e10ce80f66657215" translate="yes" xml:space="preserve">
          <source>Web applications typically handle requests by mapping each verb/path pair into a specific part of your application. This matching in Phoenix is done by the router. For example, we may map &quot;/articles&quot; to a portion of our application that shows all articles. Therefore, to add a new page, our first task is to add new route.</source>
          <target state="translated">웹 응용 프로그램은 일반적으로 각 동사 / 경로 쌍을 응용 프로그램의 특정 부분에 매핑하여 요청을 처리합니다. Phoenix에서이 일치는 라우터에 의해 수행됩니다. 예를 들어 &quot;/ articles&quot;를 모든 기사를 표시하는 애플리케이션의 일부에 매핑 할 수 있습니다. 따라서 새 페이지를 추가하려면 첫 번째 작업은 새 경로를 추가하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e74ee730e11026c929b3a8d381cb1d1daf7ff7b9" translate="yes" xml:space="preserve">
          <source>Web namespace</source>
          <target state="translated">웹 네임 스페이스</target>
        </trans-unit>
        <trans-unit id="f46d2b183834b2cfb628c27d1b72ef3f3e4c35be" translate="yes" xml:space="preserve">
          <source>Webservers are advised to return &lt;code&gt;:ok&lt;/code&gt; and not modify any further state for each chunk. However, the test implementation returns the actual body and payload so it can be used during testing.</source>
          <target state="translated">웹 서버는 &lt;code&gt;:ok&lt;/code&gt; 를 반환 하고 각 청크에 대한 추가 상태를 수정하지 않는 것이 좋습니다 . 그러나 테스트 구현은 실제 바디와 페이로드를 반환하므로 테스트 중에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fea726801dc9772eea5cc008f2ee0b923711f07" translate="yes" xml:space="preserve">
          <source>Webservers are advised to return &lt;code&gt;nil&lt;/code&gt; as the sent_body, as the body can no longer be manipulated. However, the test implementation returns the actual body so it can be used during testing.</source>
          <target state="translated">웹 서버는 본문을 더 이상 조작 할 수 없으므로 sent_body 로 &lt;code&gt;nil&lt;/code&gt; 을 반환하는 것이 좋습니다 . 그러나 테스트 구현에서는 실제 본문을 반환하므로 테스트 중에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79d55f82a25c47d695ce80f87d6f566d23271796" translate="yes" xml:space="preserve">
          <source>Websocket configuration</source>
          <target state="translated">Websocket configuration</target>
        </trans-unit>
        <trans-unit id="5173fb20ff8e44d65cc87e9ed5ab55198cd3ae6c" translate="yes" xml:space="preserve">
          <source>What about paths with query strings? By adding an optional fourth argument of key value pairs, the path helpers will return those pairs in the query string.</source>
          <target state="translated">쿼리 문자열이있는 경로는 어떻습니까? 키 값 쌍의 선택적 네 번째 인수를 추가하면 경로 도우미가 쿼리 문자열에 해당 쌍을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2b322a112ec65b0f4fc845ad94cb9caa2d8319ce" translate="yes" xml:space="preserve">
          <source>What happens if we pass a key/value pair that is neither defined in the schema nor required?</source>
          <target state="translated">스키마에 정의되지 않았거나 필수가 아닌 키 / 값 쌍을 전달하면 어떻게됩니까?</target>
        </trans-unit>
        <trans-unit id="ada8bdeb143928b15e3dfc976ad031e01c6bc99b" translate="yes" xml:space="preserve">
          <source>What if we had a number of resources that were all handled by admins? We could put all of them inside the same scope like this:</source>
          <target state="translated">관리자가 모두 처리 한 많은 리소스가 있다면 어떨까요? 다음과 같이 모두 동일한 범위에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b32c919cca15837671f6c52724061890257419aa" translate="yes" xml:space="preserve">
          <source>What if we had a requirement that all biographies in our system must be at least two characters long? We can do this easily by adding another transformation to the pipeline in our changeset which validates the length of the &lt;code&gt;bio&lt;/code&gt; field.</source>
          <target state="translated">시스템의 모든 전기가 2 자 이상이어야한다는 요구 사항이 있다면 어떨까요? &lt;code&gt;bio&lt;/code&gt; 필드 의 길이를 검증하는 체인지 셋의 파이프 라인에 또 다른 변환을 추가하여이를 쉽게 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05abe41bd6f3d3d41f802a2142a55b8f8b7ff266" translate="yes" xml:space="preserve">
          <source>What if we need a full url instead of a path? Just replace &lt;code&gt;_path&lt;/code&gt; with &lt;code&gt;_url&lt;/code&gt;:</source>
          <target state="translated">경로 대신 전체 URL이 필요하면 어떻게해야합니까? &lt;code&gt;_path&lt;/code&gt; 를 &lt;code&gt;_url&lt;/code&gt; 로 바꾸십시오 .</target>
        </trans-unit>
        <trans-unit id="dfc8328fa64bbadcc8763ff9c949fecb1eb8d2ba" translate="yes" xml:space="preserve">
          <source>What it doesn't have is an alternative template for rendering text. Let's add one at &lt;code&gt;lib/hello_web/templates/page/index.text.eex&lt;/code&gt;. Here is our example &lt;code&gt;index.text.eex&lt;/code&gt; template.</source>
          <target state="translated">여기에없는 것은 텍스트를 렌더링하기위한 대체 템플릿입니다. &lt;code&gt;lib/hello_web/templates/page/index.text.eex&lt;/code&gt; 에 하나를 추가하겠습니다 . 다음은 &lt;code&gt;index.text.eex&lt;/code&gt; 템플릿 의 예 입니다.</target>
        </trans-unit>
        <trans-unit id="75b4d35e27a82a26a889cc90cf158b7264ec385c" translate="yes" xml:space="preserve">
          <source>What we want to do is create a &lt;code&gt;comments&lt;/code&gt; table with a &lt;code&gt;body&lt;/code&gt; column, a &lt;code&gt;word_count&lt;/code&gt; column, and timestamp columns for &lt;code&gt;inserted_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;.</source>
          <target state="translated">우리가 원하는 것은 만드는 것입니다 &lt;code&gt;comments&lt;/code&gt; 와 테이블을 &lt;code&gt;body&lt;/code&gt; 열에서 &lt;code&gt;word_count&lt;/code&gt; 대한 열 및 타임 스탬프 열 &lt;code&gt;inserted_at&lt;/code&gt; 및 &lt;code&gt;updated_at&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3ab186f8a4a4e983754ca2d03ea7ef8597439285" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s more, a name can be assigned to the first binding as well:</source>
          <target state="translated">또한 첫 번째 바인딩에도 이름을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31cc650d04ce17f4c9e10320128470234e9a915c" translate="yes" xml:space="preserve">
          <source>Whatever the circumstance, Phoenix controllers provide the handy &lt;code&gt;redirect/2&lt;/code&gt; function to make redirection easy. Phoenix differentiates between redirecting to a path within the application and redirecting to a url - either within our application or external to it.</source>
          <target state="translated">어떤 상황에서든 Phoenix 컨트롤러는 간편한 &lt;code&gt;redirect/2&lt;/code&gt; 기능을 제공하여 쉽게 리디렉션 할 수 있습니다. Phoenix는 애플리케이션 내 경로로 리디렉션하는 것과 애플리케이션 내부 또는 외부 URL로 리디렉션하는 것을 구별합니다.</target>
        </trans-unit>
        <trans-unit id="3485e7935b53c2744758bcd32d9b81d93bcf0659" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;mix.tasks.phx.gen.channel&quot;&gt;&lt;code&gt;mix phx.gen.channel&lt;/code&gt;&lt;/a&gt; is done, it helpfully tells us that we need to add a channel route to our router file.</source>
          <target state="translated">시 &lt;a href=&quot;mix.tasks.phx.gen.channel&quot;&gt; &lt;code&gt;mix phx.gen.channel&lt;/code&gt; &lt;/a&gt; 완료, 그것은 유용하게 우리가 우리의 라우터 파일에 채널 경로를 추가 할 필요가 있음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ffb3200c36d5bdd9576ccf035fefb46063c348a" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;mix.tasks.phx.gen.html&quot;&gt;&lt;code&gt;mix phx.gen.html&lt;/code&gt;&lt;/a&gt; is done creating files, it helpfully tells us that we need to add a line to our router file as well as run our ecto migrations.</source>
          <target state="translated">시 &lt;a href=&quot;mix.tasks.phx.gen.html&quot;&gt; &lt;code&gt;mix phx.gen.html&lt;/code&gt; &lt;/a&gt; 파일을 작성하는 일, 그것은 유용하게 우리가 아니라 우리의 체외 마이그레이션을 실행 우리의 라우터 파일에 한 줄을 추가 할 필요가 있음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="40e189b02b5d43667b97d386e0458a3d642ad933" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;mix.tasks.phx.gen.json&quot;&gt;&lt;code&gt;mix phx.gen.json&lt;/code&gt;&lt;/a&gt; is done creating files, it helpfully tells us that we need to add a line to our router file as well as run our ecto migrations.</source>
          <target state="translated">시 &lt;a href=&quot;mix.tasks.phx.gen.json&quot;&gt; &lt;code&gt;mix phx.gen.json&lt;/code&gt; &lt;/a&gt; 파일을 작성하는 일, 그것은 유용하게 우리가 아니라 우리의 체외 마이그레이션을 실행 우리의 라우터 파일에 한 줄을 추가 할 필요가 있음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9712d26fdeb64db6d66fdc66bcea765ef1498e62" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;c:list/2&lt;/code&gt; is used to list all presences of the given &lt;code&gt;topic&lt;/code&gt;, this callback is triggered once to modify the result before it is broadcasted to all channel subscribers. This avoids N query problems and provides a single place to extend presence metadata. You must return a map of data matching the original result, including the &lt;code&gt;:metas&lt;/code&gt; key, but can extend the map to include any additional information.</source>
          <target state="translated">When &lt;code&gt;c:list/2&lt;/code&gt; is used to list all presences of the given &lt;code&gt;topic&lt;/code&gt; , this callback is triggered once to modify the result before it is broadcasted to all channel subscribers. This avoids N query problems and provides a single place to extend presence metadata. You must return a map of data matching the original result, including the &lt;code&gt;:metas&lt;/code&gt; key, but can extend the map to include any additional information.</target>
        </trans-unit>
        <trans-unit id="223d25fb9e9e50ec86e6ed90ff88e7fffae68789" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;key&lt;/code&gt; exists in the given structure &lt;code&gt;data&lt;/code&gt;, the implementation should return a &lt;code&gt;{value, new_data}&lt;/code&gt; tuple where &lt;code&gt;value&lt;/code&gt; is the value that was under &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;new_data&lt;/code&gt; is &lt;code&gt;term&lt;/code&gt; without &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">하면 &lt;code&gt;key&lt;/code&gt; 주어진 구조에 존재하는 &lt;code&gt;data&lt;/code&gt; 의 구현은 돌려 &lt;code&gt;{value, new_data}&lt;/code&gt; 여기서 튜플 &lt;code&gt;value&lt;/code&gt; 아래 있던 값 &lt;code&gt;key&lt;/code&gt; 와 &lt;code&gt;new_data&lt;/code&gt; 가 되는 &lt;code&gt;term&lt;/code&gt; 없이 &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a92494a01e974bc8479461c1fc150f473313415" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;key&lt;/code&gt; is not present in the given structure, a tuple &lt;code&gt;{value, data}&lt;/code&gt; should be returned, where &lt;code&gt;value&lt;/code&gt; is implementation-defined.</source>
          <target state="translated">하면 &lt;code&gt;key&lt;/code&gt; 주어진 구조에없는 튜플 &lt;code&gt;{value, data}&lt;/code&gt; 여기서, 반환되는 &lt;code&gt;value&lt;/code&gt; 구현 정의된다.</target>
        </trans-unit>
        <trans-unit id="1884fd94c3bf41f37ffc534213e1c8f0b9ddc0b6" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;live_component&lt;/code&gt; is called, the following callbacks will be invoked in the component:</source>
          <target state="translated">&lt;code&gt;live_component&lt;/code&gt; 가 호출 되면 구성 요소에서 다음 콜백이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7b889bd767d0306a4069b5ba2a758c84d57f784f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;live_component&lt;/code&gt; is invoked, it is also possible to pass a &lt;code&gt;do/end&lt;/code&gt; block:</source>
          <target state="translated">&lt;code&gt;live_component&lt;/code&gt; 가 호출 되면 &lt;code&gt;do/end&lt;/code&gt; 블록 을 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b7c846cb3f82de3d8e5a1cbe3ec5f0bb36697f18" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;phx.new&lt;/code&gt; generated our application, it included some basic repo configuration as well. Let's look at &lt;code&gt;config/dev.exs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;phx.new&lt;/code&gt; 가 애플리케이션을 생성 할 때 기본 저장소 구성도 포함되었습니다. &lt;code&gt;config/dev.exs&lt;/code&gt; 를 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="ed02af90e09ab30385f22630beb5fa703e32a3f5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;use Phoenix.LiveComponent&lt;/code&gt; is used, all functions in &lt;a href=&quot;phoenix.liveview&quot;&gt;&lt;code&gt;Phoenix.LiveView&lt;/code&gt;&lt;/a&gt; are imported. A component can be invoked as:</source>
          <target state="translated">&lt;code&gt;use Phoenix.LiveComponent&lt;/code&gt; 를 사용 하면 Phoenix.LiveView의 모든 기능을 가져 &lt;a href=&quot;phoenix.liveview&quot;&gt; &lt;code&gt;Phoenix.LiveView&lt;/code&gt; &lt;/a&gt; . 컴포넌트는 다음과 같이 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1869e391adb470cb384b4fb891f89c8b2473ee1" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;LiveView&lt;/code&gt; is rendered, its contents are wrapped in a container. By default, said container is a &lt;code&gt;div&lt;/code&gt; tag with a handful of &lt;code&gt;LiveView&lt;/code&gt; specific attributes.</source>
          <target state="translated">때 &lt;code&gt;LiveView&lt;/code&gt; 렌더링되는, 그 내용은 컨테이너에 싸여있다. 기본적으로 해당 컨테이너는 몇 가지 &lt;code&gt;LiveView&lt;/code&gt; 특정 속성 이있는 &lt;code&gt;div&lt;/code&gt; 태그입니다 .</target>
        </trans-unit>
        <trans-unit id="25750b41d1534e26832dec3123c9e039a9573f89" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;phx-submit&lt;/code&gt;, or a &lt;code&gt;phx-change&lt;/code&gt; for a different input is triggered, any current debounce or throttle timers are reset for existing inputs.</source>
          <target state="translated">때 &lt;code&gt;phx-submit&lt;/code&gt; 또는 &lt;code&gt;phx-change&lt;/code&gt; 다른 입력이 트리거, 모든 현재 바운스 또는 스로틀 타이머는 기존의 입력에 대해 리셋된다.</target>
        </trans-unit>
        <trans-unit id="19bcc4d45c078f09260c91959cfc7126161b0757" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;{data, types}&lt;/code&gt; is passed as the first argument, a changeset is created with the given data and types and marked as valid.</source>
          <target state="translated">때 &lt;code&gt;{data, types}&lt;/code&gt; 첫 번째 인수로서 전달하는 체인지 주어진 데이터 타입으로 생성하고 유효 상태로 표시된다.</target>
        </trans-unit>
        <trans-unit id="796e292b035970fc768f1b927fea4233de1e0e2e" translate="yes" xml:space="preserve">
          <source>When a LiveView is mounted in a disconnected state, the &lt;a href=&quot;../plug/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; assigns will be available for reference via &lt;a href=&quot;#assign_new/3&quot;&gt;&lt;code&gt;assign_new/3&lt;/code&gt;&lt;/a&gt;, allowing assigns to be shared for the initial HTTP request. The &lt;a href=&quot;../plug/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; assigns will not be available during the connected mount. Likewise, nested LiveView children have access to their parent's assigns on mount using &lt;code&gt;assign_new&lt;/code&gt;, which allows assigns to be shared down the nested LiveView tree.</source>
          <target state="translated">LiveView가 연결이 끊긴 상태로 마운트되면 &lt;a href=&quot;../plug/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt; 할당은 &lt;a href=&quot;#assign_new/3&quot;&gt; &lt;code&gt;assign_new/3&lt;/code&gt; &lt;/a&gt; 를 통해 참조 할 수 있으며 초기 HTTP 요청에 대해 할당을 공유 할 수 있습니다. &lt;a href=&quot;../plug/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; 의&lt;/a&gt; (가) 마운트 연결시 양수인은 사용할 수 없습니다. 마찬가지로 중첩 된 LiveView 자식은 할당이 중첩 된 LiveView 트리 아래로 공유되도록 허용 하는 &lt;code&gt;assign_new&lt;/code&gt; 를 사용하여 마운트시 부모의 할당에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2625f61e7b451e3b198fcfdeea9cfda7d537ec41" translate="yes" xml:space="preserve">
          <source>When a LiveView is rendered, all of the data currently stored in the connection session (see &lt;a href=&quot;../plug/plug.conn#get_session/1&quot;&gt;&lt;code&gt;Plug.Conn.get_session/1&lt;/code&gt;&lt;/a&gt;) will be given to the LiveView.</source>
          <target state="translated">LiveView가 렌더링되면 연결 세션에 현재 저장된 모든 데이터 ( &lt;a href=&quot;../plug/plug.conn#get_session/1&quot;&gt; &lt;code&gt;Plug.Conn.get_session/1&lt;/code&gt; &lt;/a&gt; 참조 )가 LiveView에 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="f6775eb01d9c11d2a3dcfb12734d5b27ae90ba9c" translate="yes" xml:space="preserve">
          <source>When a changeset is passed as the first argument, the changes passed as the second argument are merged over the changes already in the changeset if they differ from the values in the struct.</source>
          <target state="translated">변경 세트가 첫 번째 인수로 전달 될 때 두 번째 인수로 전달 된 변경 사항은 struct의 값과 다른 경우 변경 세트에 이미있는 변경 사항에 대해 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="516abb64d0f9a3229c0c9d6570671cd0add17085" translate="yes" xml:space="preserve">
          <source>When a conflict happens (a record which has been previously fetched is being updated, but that same record has been modified since it was fetched), an &lt;a href=&quot;ecto.staleentryerror&quot;&gt;&lt;code&gt;Ecto.StaleEntryError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">충돌이 발생하면 (이전에 가져온 레코드가 업데이트되고 있지만 가져온 이후 동일한 레코드가 수정 된 경우) &lt;a href=&quot;ecto.staleentryerror&quot;&gt; &lt;code&gt;Ecto.StaleEntryError&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a95b6abf124afbe7320960eeeece822223678bed" translate="yes" xml:space="preserve">
          <source>When a file is uploaded, the request parameter that identifies that file will be a &lt;a href=&quot;plug.upload&quot;&gt;&lt;code&gt;Plug.Upload&lt;/code&gt;&lt;/a&gt; struct with information about the uploaded file (e.g. filename and content type) and about where the file is stored.</source>
          <target state="translated">파일이 업로드 될 때 해당 파일을 식별하는 요청 매개 변수 는 업로드 된 파일 (예 : 파일 이름 및 컨텐츠 유형) 및 파일이 저장된 위치에 대한 정보 가있는 &lt;a href=&quot;plug.upload&quot;&gt; &lt;code&gt;Plug.Upload&lt;/code&gt; &lt;/a&gt; 구조체입니다.</target>
        </trans-unit>
        <trans-unit id="dc9e2bbc31dc7bcd36a4b338d6684c714c123173" translate="yes" xml:space="preserve">
          <source>When a form is given, it will lookup for changes and then fallback to parameters and finally fallback to the default struct/map value.</source>
          <target state="translated">양식이 주어지면 변경 사항을 찾은 다음 매개 변수로 폴백하고 마지막으로 기본 struct / map 값으로 폴백합니다.</target>
        </trans-unit>
        <trans-unit id="727406a99aac32dc9fcdc5075d8bb496124b5036" translate="yes" xml:space="preserve">
          <source>When a resource needs to be looked up without referencing an ID, because it contains only a single entry in the given context, the &lt;code&gt;:singleton&lt;/code&gt; option can be used to generate a set of routes that are specific to such single resource:</source>
          <target state="translated">주어진 컨텍스트에 단일 항목 만 포함하기 때문에 ID를 참조하지 않고 자원을 &lt;code&gt;:singleton&lt;/code&gt; 하는 경우 : singleton 옵션을 사용하여 해당 단일 자원에 고유 한 라우트 세트를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="665b08106c52f3bd10a719ea32c5f80cecab666d" translate="yes" xml:space="preserve">
          <source>When a schema module is given, the entries given will be properly dumped before being sent to the database. If the schema contains an autogenerated ID field, it will be handled either at the adapter or the storage layer. However any other autogenerated value, like timestamps, won&amp;rsquo;t be autogenerated when using &lt;a href=&quot;#c:insert_all/3&quot;&gt;&lt;code&gt;insert_all/3&lt;/code&gt;&lt;/a&gt;. This is by design as this function aims to be a more direct way to insert data into the database without the conveniences of &lt;a href=&quot;#c:insert/2&quot;&gt;&lt;code&gt;insert/2&lt;/code&gt;&lt;/a&gt;. This is also consistent with &lt;a href=&quot;#c:update_all/3&quot;&gt;&lt;code&gt;update_all/3&lt;/code&gt;&lt;/a&gt; that does not handle timestamps as well.</source>
          <target state="translated">스키마 모듈이 제공되면 제공된 항목이 데이터베이스로 전송되기 전에 올바르게 덤프됩니다. 스키마에 자동 생성 된 ID 필드가 포함되어 있으면 어댑터 또는 스토리지 계층에서 처리됩니다. 그러나 &lt;a href=&quot;#c:insert_all/3&quot;&gt; &lt;code&gt;insert_all/3&lt;/code&gt; 을&lt;/a&gt; 사용할 때 타임 스탬프와 같은 다른 자동 생성 값은 자동 생성되지 않습니다 . 이것은 의도적으로 &lt;a href=&quot;#c:insert/2&quot;&gt; &lt;code&gt;insert/2&lt;/code&gt; &lt;/a&gt; 의 편리함없이 데이터베이스에 데이터를 삽입하는보다 직접적인 방법을 목표로하기 때문에 의도 된 것 입니다. 또한 타임 스탬프도 처리하지 않는 &lt;a href=&quot;#c:update_all/3&quot;&gt; &lt;code&gt;update_all/3&lt;/code&gt; &lt;/a&gt; 과 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="db3af351f06b53df87802f87e34e783560413dab" translate="yes" xml:space="preserve">
          <source>When a schema module is given, the entries given will be properly dumped before being sent to the database. If the schema contains an autogenerated ID field, it will be handled either at the adapter or the storage layer. However any other autogenerated value, like timestamps, won't be autogenerated when using &lt;a href=&quot;#c:insert_all/3&quot;&gt;&lt;code&gt;insert_all/3&lt;/code&gt;&lt;/a&gt;. This is by design as this function aims to be a more direct way to insert data into the database without the conveniences of &lt;a href=&quot;#c:insert/2&quot;&gt;&lt;code&gt;insert/2&lt;/code&gt;&lt;/a&gt;. This is also consistent with &lt;a href=&quot;#c:update_all/3&quot;&gt;&lt;code&gt;update_all/3&lt;/code&gt;&lt;/a&gt; that does not handle timestamps as well.</source>
          <target state="translated">When a schema module is given, the entries given will be properly dumped before being sent to the database. If the schema contains an autogenerated ID field, it will be handled either at the adapter or the storage layer. However any other autogenerated value, like timestamps, won't be autogenerated when using &lt;a href=&quot;#c:insert_all/3&quot;&gt; &lt;code&gt;insert_all/3&lt;/code&gt; &lt;/a&gt;. This is by design as this function aims to be a more direct way to insert data into the database without the conveniences of &lt;a href=&quot;#c:insert/2&quot;&gt; &lt;code&gt;insert/2&lt;/code&gt; &lt;/a&gt;. This is also consistent with &lt;a href=&quot;#c:update_all/3&quot;&gt; &lt;code&gt;update_all/3&lt;/code&gt; &lt;/a&gt; that does not handle timestamps as well.</target>
        </trans-unit>
        <trans-unit id="a7ef6fd0e35af6488ea471507d0d5f58a022cdf8" translate="yes" xml:space="preserve">
          <source>When a template is compiled into a view, it is simply compiled as a &lt;code&gt;render&lt;/code&gt; function that expects two arguments: the template name and the assigns.</source>
          <target state="translated">템플릿이 뷰로 컴파일 되면 템플릿 이름과 할당이라는 두 개의 인수를 예상 하는 &lt;code&gt;render&lt;/code&gt; 함수 로 컴파일됩니다 .</target>
        </trans-unit>
        <trans-unit id="8c206f005051616fbd3b785e1126f0903bf08266" translate="yes" xml:space="preserve">
          <source>When a view renders a template, the result returned is an inner representation specific to the template format. In the example above, we got: &lt;code&gt;{:safe, &quot;Hello John Doe&quot;}&lt;/code&gt;. The safe tuple annotates that our template is safe and that we don&amp;rsquo;t need to escape its contents because all data has already been encoded. Let&amp;rsquo;s try to inject custom code:</source>
          <target state="translated">뷰가 템플릿을 렌더링 할 때 반환되는 결과는 템플릿 형식과 관련된 내부 표현입니다. 위의 예에서 &lt;code&gt;{:safe, &quot;Hello John Doe&quot;}&lt;/code&gt; 있습니다. 안전한 튜플은 템플릿이 안전하고 모든 데이터가 이미 인코딩되었으므로 내용을 이스케이프 처리 할 필요가 없음을 나타냅니다. 커스텀 코드를 주입 ​​해 보자 :</target>
        </trans-unit>
        <trans-unit id="b6134e57253e21002595d2dacade2995d61ec48b" translate="yes" xml:space="preserve">
          <source>When a view renders a template, the result returned is an inner representation specific to the template format. In the example above, we got: &lt;code&gt;{:safe, &quot;Hello John Doe&quot;}&lt;/code&gt;. The safe tuple annotates that our template is safe and that we don't need to escape its contents because all data has already been encoded. Let's try to inject custom code:</source>
          <target state="translated">When a view renders a template, the result returned is an inner representation specific to the template format. In the example above, we got: &lt;code&gt;{:safe, &quot;Hello John Doe&quot;}&lt;/code&gt; . The safe tuple annotates that our template is safe and that we don't need to escape its contents because all data has already been encoded. Let's try to inject custom code:</target>
        </trans-unit>
        <trans-unit id="8b039529f17a36347cb30f4036746324e0da2544" translate="yes" xml:space="preserve">
          <source>When an action is given, the generated route helpers are named after the LiveView itself (in the same way as for a controller). For the example above, we will have:</source>
          <target state="translated">액션이 주어지면 생성 된 라우트 헬퍼는 LiveView 자체의 이름을 따서 명명됩니다 (컨트롤러와 같은 방식). 위의 예에서 우리는 다음을 갖게 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="66a92cc4ce9515b14f08684c8678a19b1901c284" translate="yes" xml:space="preserve">
          <source>When an association is defined, Ecto also defines a field in the schema with the association name. By default, associations are not loaded into this field:</source>
          <target state="translated">연관이 정의되면 Ecto는 또한 연관 이름으로 스키마에서 필드를 정의합니다. 기본적으로 연결은이 필드에로드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5317007107c5d0e51fbda007b7715989f025d765" translate="yes" xml:space="preserve">
          <source>When an event is broadcasted with &lt;a href=&quot;#broadcast/3&quot;&gt;&lt;code&gt;broadcast/3&lt;/code&gt;&lt;/a&gt;, each channel subscriber can choose to intercept the event and have their &lt;code&gt;handle_out/3&lt;/code&gt; callback triggered. This allows the event&amp;rsquo;s payload to be customized on a socket by socket basis to append extra information, or conditionally filter the message from being delivered. If the event is not intercepted with &lt;a href=&quot;phoenix.channel#intercept/1&quot;&gt;&lt;code&gt;Phoenix.Channel.intercept/1&lt;/code&gt;&lt;/a&gt;, then the message is pushed directly to the client:</source>
          <target state="translated">&lt;a href=&quot;#broadcast/3&quot;&gt; &lt;code&gt;broadcast/3&lt;/code&gt; &lt;/a&gt; 로 이벤트를 브로드 캐스트하면 각 채널 구독자는 이벤트를 가로 채고 &lt;code&gt;handle_out/3&lt;/code&gt; 콜백을 트리거 하도록 선택할 수 있습니다 . 이를 통해 소켓별로 이벤트 페이로드를 사용자 정의하여 추가 정보를 추가하거나 메시지 전달을 조건부로 필터링 할 수 있습니다. 이벤트가 &lt;a href=&quot;phoenix.channel#intercept/1&quot;&gt; &lt;code&gt;Phoenix.Channel.intercept/1&lt;/code&gt; 로&lt;/a&gt; 인터셉트되지 않으면 메시지가 클라이언트로 직접 푸시됩니다.</target>
        </trans-unit>
        <trans-unit id="4f9816e4a0daf68a099b03dc97c4472bd83ddc3d" translate="yes" xml:space="preserve">
          <source>When an event is broadcasted with &lt;a href=&quot;#broadcast/3&quot;&gt;&lt;code&gt;broadcast/3&lt;/code&gt;&lt;/a&gt;, each channel subscriber can choose to intercept the event and have their &lt;code&gt;handle_out/3&lt;/code&gt; callback triggered. This allows the event's payload to be customized on a socket by socket basis to append extra information, or conditionally filter the message from being delivered. If the event is not intercepted with &lt;a href=&quot;#intercept/1&quot;&gt;&lt;code&gt;Phoenix.Channel.intercept/1&lt;/code&gt;&lt;/a&gt;, then the message is pushed directly to the client:</source>
          <target state="translated">When an event is broadcasted with &lt;a href=&quot;#broadcast/3&quot;&gt; &lt;code&gt;broadcast/3&lt;/code&gt; &lt;/a&gt;, each channel subscriber can choose to intercept the event and have their &lt;code&gt;handle_out/3&lt;/code&gt; callback triggered. This allows the event's payload to be customized on a socket by socket basis to append extra information, or conditionally filter the message from being delivered. If the event is not intercepted with &lt;a href=&quot;#intercept/1&quot;&gt; &lt;code&gt;Phoenix.Channel.intercept/1&lt;/code&gt; &lt;/a&gt;, then the message is pushed directly to the client:</target>
        </trans-unit>
        <trans-unit id="ec5ef2b7c9f868751828dd0928af034c3037c1ab" translate="yes" xml:space="preserve">
          <source>When building a Phoenix project, we are first and foremost building an Elixir application. Phoenix's job is to provide a web interface into our Elixir application. Naturally, we compose our applications with modules and functions, but simply defining a module with a few functions isn't enough when designing an application. It's vital to think about your application design when writing code. Let's find out how.</source>
          <target state="translated">Phoenix 프로젝트를 구축 할 때 우리는 무엇보다도 Elixir 애플리케이션을 구축하고 있습니다. Phoenix의 임무는 Elixir 애플리케이션에 웹 인터페이스를 제공하는 것입니다. 당연히 우리는 모듈과 함수로 응용 프로그램을 구성하지만 응용 프로그램을 설계 할 때 몇 가지 기능으로 모듈을 정의하는 것만으로는 충분하지 않습니다. 코드를 작성할 때 애플리케이션 디자인에 대해 생각하는 것이 중요합니다. 방법을 알아 봅시다.</target>
        </trans-unit>
        <trans-unit id="1f8a9569e478cea020ada31860ccee8615abbe55" translate="yes" xml:space="preserve">
          <source>When calling path helper functions for nested routes, we will need to pass the IDs in the order they came in the route definition. For the following &lt;code&gt;show&lt;/code&gt; route, &lt;code&gt;42&lt;/code&gt; is the &lt;code&gt;user_id&lt;/code&gt;, and &lt;code&gt;17&lt;/code&gt; is the &lt;code&gt;post_id&lt;/code&gt;. Let's remember to alias our &lt;code&gt;HelloWeb.Endpoint&lt;/code&gt; before we begin.</source>
          <target state="translated">중첩 된 경로에 대한 경로 도우미 함수를 호출 할 때 경로 정의에 나온 순서대로 ID를 전달해야합니다. 다음 &lt;code&gt;show&lt;/code&gt; 라우트의 경우 &lt;code&gt;42&lt;/code&gt; 는 &lt;code&gt;user_id&lt;/code&gt; 이고 &lt;code&gt;17&lt;/code&gt; 은 &lt;code&gt;post_id&lt;/code&gt; 입니다. 시작하기 전에 &lt;code&gt;HelloWeb.Endpoint&lt;/code&gt; 의 별칭 을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="db5a44995355cf5f07d7a9566f13b7f9769349c1" translate="yes" xml:space="preserve">
          <source>When casting values by &lt;a href=&quot;ecto.changeset&quot;&gt;&lt;code&gt;Ecto.Changeset&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ecto.changeset&quot;&gt; &lt;code&gt;Ecto.Changeset&lt;/code&gt; 으로&lt;/a&gt; 값을 전송할 때</target>
        </trans-unit>
        <trans-unit id="045ff579a4672f794c1fd1894bb71607ca24a0bb" translate="yes" xml:space="preserve">
          <source>When certificate and/or key files are not in provided in PEM format they can usually be converted using the OpenSSL CLI. This section describes some common formats and the associated OpenSSL commands to convert to PEM.</source>
          <target state="translated">인증서 및 / 또는 키 파일이 PEM 형식으로 제공되지 않은 경우 일반적으로 OpenSSL CLI를 사용하여 변환 할 수 있습니다. 이 섹션에서는 몇 가지 일반적인 형식과 PEM으로 변환하는 관련 OpenSSL 명령에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="395cf148df894bc502f475f8d660c3758d34ea84" translate="yes" xml:space="preserve">
          <source>When changing embeds and associations, see &lt;a href=&quot;#put_assoc/4&quot;&gt;&lt;code&gt;put_assoc/4&lt;/code&gt;&lt;/a&gt; for a complete reference on the accepted values.</source>
          <target state="translated">임베드 및 연관을 변경할 때 허용되는 값에 대한 완전한 참조는 &lt;a href=&quot;#put_assoc/4&quot;&gt; &lt;code&gt;put_assoc/4&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="717d0fac399eeacb314af0fe6d69ad16457d28d4" translate="yes" xml:space="preserve">
          <source>When choosing what datetime type to work with, keep in mind that Elixir functions like &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html#utc_now/0&quot;&gt;&lt;code&gt;NaiveDateTime.utc_now/0&lt;/code&gt;&lt;/a&gt; have a default precision of 6. Casting a value with a precision greater than 0 to a non-&lt;code&gt;usec&lt;/code&gt; type will truncate all microseconds and set the precision to 0.</source>
          <target state="translated">함께 작업에 어떤 날짜 시간 유형을 선택할 때, 같은 비약 기능 것을 명심 &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html#utc_now/0&quot;&gt; &lt;code&gt;NaiveDateTime.utc_now/0&lt;/code&gt; &lt;/a&gt; 비 0보다 정밀 이상으로 표기되어있는 값을 주조 (6)의 기본 정밀도가 &lt;code&gt;usec&lt;/code&gt; 모든 마이크로을 절단하고 설정됩니다 유형을 정밀도는 0입니다.</target>
        </trans-unit>
        <trans-unit id="687ef32b3f68dab62fe4e6a724e4cb1b755d29ef" translate="yes" xml:space="preserve">
          <source>When clicked, since we are navigating to the current LiveView, &lt;a href=&quot;phoenix.liveview#c:handle_params/3&quot;&gt;&lt;code&gt;handle_params/3&lt;/code&gt;&lt;/a&gt; will be invoked. Remember you should never trust the received params, so you must use the callback to validate the user input and change the state accordingly:</source>
          <target state="translated">클릭하면 현재 LiveView로 이동 &lt;a href=&quot;phoenix.liveview#c:handle_params/3&quot;&gt; &lt;code&gt;handle_params/3&lt;/code&gt; &lt;/a&gt; 가 호출됩니다. 수신 된 매개 변수를 신뢰해서는 안되므로 콜백을 사용하여 사용자 입력의 유효성을 검사하고 그에 따라 상태를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="c93cc54069e4b735275a8bdb186eaca81fb7b106" translate="yes" xml:space="preserve">
          <source>When composing functions a common requirement is selecting a binding on the query. Previous examples showed means of hardcoding that selection, but there are also ways of doing it dynamically.</source>
          <target state="translated">When composing functions a common requirement is selecting a binding on the query. Previous examples showed means of hardcoding that selection, but there are also ways of doing it dynamically.</target>
        </trans-unit>
        <trans-unit id="ab69248c77ae772ed96b26c62650498f4ee7a18a" translate="yes" xml:space="preserve">
          <source>When defining an inline embed, the &lt;code&gt;:primary_key&lt;/code&gt; option may be given to customize the embed primary key type.</source>
          <target state="translated">인라인 임베드 를 정의 할 때 임베드 기본 키 유형을 사용자 정의하기 위해 &lt;code&gt;:primary_key&lt;/code&gt; 옵션이 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3db282fbf616ca482ff0e9f2125210e8f6754cd" translate="yes" xml:space="preserve">
          <source>When defining the schema, types need to be given. Types are split into two categories, primitive types and custom types.</source>
          <target state="translated">스키마를 정의 할 때 유형을 제공해야합니다. 유형은 기본 유형과 사용자 정의 유형의 두 가지 범주로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="d5c1d1b71e3afb4482770bccebe2e882ad1119b5" translate="yes" xml:space="preserve">
          <source>When directly manipulating the struct, it is the responsibility of the developer to ensure the field values have the proper type. For example, you can create a user struct with an invalid value for &lt;code&gt;age&lt;/code&gt;:</source>
          <target state="translated">구조체를 직접 조작 할 때 필드 값이 올바른 유형인지 확인하는 것은 개발자의 책임입니다. 예를 들어, &lt;code&gt;age&lt;/code&gt; 값이 잘못된 사용자 구조체를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a8772925444a6b05352bf62fb9b0f00bde3be0a" translate="yes" xml:space="preserve">
          <source>When encoding keyword lists with duplicate keys, the key that comes first takes precedence:</source>
          <target state="translated">중복 키로 키워드 목록을 인코딩 할 때 가장 먼저 오는 키가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="bb374d61ce9c98cec42ec8fa9837d201b03b5d2e" translate="yes" xml:space="preserve">
          <source>When generating a unique token for use in an API or Channel it is advised to use a unique identifier for the user, typically the id from a database. For example:</source>
          <target state="translated">API 또는 채널에서 사용할 고유 토큰을 생성 할 때는 일반적으로 데이터베이스의 ID 인 사용자의 고유 식별자를 사용하는 것이 좋습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0e08ae63af7b81a211df07266524b23423ea5beb" translate="yes" xml:space="preserve">
          <source>When interpolating values, you may want to explicitly tell Ecto what is the expected type of the value being interpolated:</source>
          <target state="translated">값을 보간 할 때 보간 될 값의 예상 유형이 무엇인지 Ecto에 명시 적으로 알려줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b013799b5b0007cf0de9d3d2ff6bafc90705b02" translate="yes" xml:space="preserve">
          <source>When invoked via &lt;a href=&quot;#get/3&quot;&gt;&lt;code&gt;get/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#post/3&quot;&gt;&lt;code&gt;post/3&lt;/code&gt;&lt;/a&gt; and friends, the endpoint is automatically retrieved from the &lt;code&gt;@endpoint&lt;/code&gt; module attribute, otherwise it must be given as an argument.</source>
          <target state="translated">&lt;a href=&quot;#get/3&quot;&gt; &lt;code&gt;get/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#post/3&quot;&gt; &lt;code&gt;post/3&lt;/code&gt; &lt;/a&gt; 및 friends 를 통해 호출되면 엔드 포인트가 &lt;code&gt;@endpoint&lt;/code&gt; 모듈 속성 에서 자동으로 검색됩니다. 그렇지 않으면 인수로 제공되어야합니다.</target>
        </trans-unit>
        <trans-unit id="eebc62d45ca44c1cbbb79012cbe42914a6dac9d9" translate="yes" xml:space="preserve">
          <source>When it comes to &lt;code&gt;do/end&lt;/code&gt; blocks, change tracking is supported only on blocks given to Elixir's basic constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, and friends. If the do/end block is given to a library function or user function, such as &lt;code&gt;content_tag&lt;/code&gt;, change tracking won't work. For example, imagine the following template that renders a &lt;code&gt;div&lt;/code&gt;:</source>
          <target state="translated">그것이 올 때 &lt;code&gt;do/end&lt;/code&gt; 블록을, 변경 추적은 다음과 같은 비약의 기본 구조에 주어진 블록에서 지원되는 &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;case&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , 친구. do / end 블록이 &lt;code&gt;content_tag&lt;/code&gt; 와 같은 라이브러리 함수 또는 사용자 함수에 제공 되면 변경 내용 추적이 작동하지 않습니다. 예를 들어 &lt;code&gt;div&lt;/code&gt; 를 렌더링하는 다음 템플릿을 상상해보십시오 .</target>
        </trans-unit>
        <trans-unit id="a32d77a586276939e1724b132f8b0ebe1b81d36c" translate="yes" xml:space="preserve">
          <source>When it's done, it will ask us if we want it to install our dependencies for us. Let's say yes to that.</source>
          <target state="translated">완료되면 종속성을 설치할 것인지 묻습니다. 그것에 예라고합시다.</target>
        </trans-unit>
        <trans-unit id="e7cfb1b9dd4ab57c20d07f72edb08ef72fad0e1a" translate="yes" xml:space="preserve">
          <source>When logging parameters, Phoenix can filter out sensitive parameters such as passwords and tokens. Parameters to be filtered can be added via the &lt;code&gt;:filter_parameters&lt;/code&gt; option:</source>
          <target state="translated">매개 변수를 기록 할 때 Phoenix는 암호 및 토큰과 같은 민감한 매개 변수를 필터링 할 수 있습니다. 필터링 할 매개 변수는 &lt;code&gt;:filter_parameters&lt;/code&gt; 옵션을 통해 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7b8daa071a5a2cd215abefc327f21b83ffc1c49e" translate="yes" xml:space="preserve">
          <source>When navigating to the current LiveView, &lt;a href=&quot;#c:handle_params/3&quot;&gt;&lt;code&gt;handle_params/3&lt;/code&gt;&lt;/a&gt; is immediately invoked to handle the change of params and URL state. Then the new state is pushed to the client, without reloading the whole page while also maintaining the current scroll position. For live redirects to another LiveView, use &lt;a href=&quot;#push_redirect/2&quot;&gt;&lt;code&gt;push_redirect/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">현재 LiveView로 &lt;a href=&quot;#c:handle_params/3&quot;&gt; &lt;code&gt;handle_params/3&lt;/code&gt; &lt;/a&gt; 때 매개 변수 및 URL 상태 변경을 처리하기 위해 handle_params / 3 가 즉시 호출됩니다. 그런 다음 현재 스크롤 위치를 유지하면서 전체 페이지를 다시로드하지 않고 새 상태가 클라이언트에 푸시됩니다. 다른 LiveView에 대한 라이브 리디렉션의 경우 &lt;a href=&quot;#push_redirect/2&quot;&gt; &lt;code&gt;push_redirect/2&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="27645d39bcc3802f17fb549b0ad3af333cd2a2a5" translate="yes" xml:space="preserve">
          <source>When navigating to the current LiveView, &lt;code&gt;c:handle_params/3&lt;/code&gt; is immediately invoked to handle the change of params and URL state. Then the new state is pushed to the client, without reloading the whole page while also maintaining the current scroll position. For live redirects to another LiveView, use &lt;a href=&quot;#live_redirect/2&quot;&gt;&lt;code&gt;live_redirect/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">현재 LiveView로 이동할 때 &lt;code&gt;c:handle_params/3&lt;/code&gt; 가 즉시 호출되어 매개 변수 및 URL 상태의 변경을 처리합니다. 그런 다음 현재 스크롤 위치를 유지하면서 전체 페이지를 다시로드하지 않고 새 상태가 클라이언트에 푸시됩니다. 다른 LiveView로 라이브 리디렉션하려면 &lt;a href=&quot;#live_redirect/2&quot;&gt; &lt;code&gt;live_redirect/2&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e16b78d9f0b88b7ca3b71bc64caa7a7f1b998e5" translate="yes" xml:space="preserve">
          <source>When passing arguments to &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; 에&lt;/a&gt; 인수를 전달할 때</target>
        </trans-unit>
        <trans-unit id="0cc38d5b4ab8593fd2b61c7bdbe6d18bdc8c3914" translate="yes" xml:space="preserve">
          <source>When passing the &lt;code&gt;--no-ecto&lt;/code&gt; flag, Phoenix generators such as &lt;code&gt;phx.gen.html&lt;/code&gt;, &lt;code&gt;phx.gen.json&lt;/code&gt;, &lt;code&gt;phx.gen.live&lt;/code&gt;, and &lt;code&gt;phx.gen.context&lt;/code&gt; may no longer work as expected as they generate context files that rely on Ecto for the database access. In those cases, you can pass the &lt;code&gt;--no-context&lt;/code&gt; flag to generate most of the HTML and JSON files but skip the context, allowing you to fill in the blanks as desired.</source>
          <target state="translated">&lt;code&gt;--no-ecto&lt;/code&gt; 플래그를 전달할 때 &lt;code&gt;phx.gen.html&lt;/code&gt; , &lt;code&gt;phx.gen.json&lt;/code&gt; , &lt;code&gt;phx.gen.live&lt;/code&gt; 및 &lt;code&gt;phx.gen.context&lt;/code&gt; 와 같은 Phoenix 생성기는 다음과 같은 컨텍스트 파일을 생성하므로 더 이상 예상대로 작동하지 않을 수 있습니다. 데이터베이스 액세스를 위해 Ecto에 의존합니다. 이 경우 &lt;code&gt;--no-context&lt;/code&gt; 플래그를 전달하여 대부분의 HTML 및 JSON 파일을 생성 할 수 있지만 컨텍스트를 건너 뛰어 원하는대로 공백을 채울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a52c3d0928e0e2b28adcd99ae4b6912001d6caf6" translate="yes" xml:space="preserve">
          <source>When performing arithmetic operations, &lt;a href=&quot;#type/2&quot;&gt;&lt;code&gt;type/2&lt;/code&gt;&lt;/a&gt; can be used to cast all the parameters in the operation to the same type:</source>
          <target state="translated">산술 연산을 수행 할 때 &lt;a href=&quot;#type/2&quot;&gt; &lt;code&gt;type/2&lt;/code&gt; &lt;/a&gt; 를 사용하여 연산의 모든 매개 변수를 동일한 유형으로 캐스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df128eaf0ddc8b1e22de4c87d1e7f22b5aa3b83b" translate="yes" xml:space="preserve">
          <source>When plugged as:</source>
          <target state="translated">다음과 같이 꽂을 때 :</target>
        </trans-unit>
        <trans-unit id="ee572a50cd79073734912856a8c82d80c55ecf54" translate="yes" xml:space="preserve">
          <source>When plugged, the event prefix is a required option:</source>
          <target state="translated">연결시 이벤트 접두사는 필수 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="19bb473b37e86324f9d67a7580f5336d50a0659f" translate="yes" xml:space="preserve">
          <source>When posting a form with a host in its address, such as &quot;//host.com/path&quot; instead of only &quot;/path&quot;, Phoenix will include the host signature in the token and validate the token only if the accessed host is the same as the host in the token. This is to avoid tokens from leaking to third party applications. If this behaviour is problematic, you can generate a non-host specific token with &lt;a href=&quot;../plug/1.7.1/plug.csrfprotection#get_csrf_token/0&quot;&gt;&lt;code&gt;Plug.CSRFProtection.get_csrf_token/0&lt;/code&gt;&lt;/a&gt; and pass it to the form generator via the &lt;code&gt;:csrf_token&lt;/code&gt; option.</source>
          <target state="translated">When posting a form with a host in its address, such as &quot;//host.com/path&quot; instead of only &quot;/path&quot;, Phoenix will include the host signature in the token and validate the token only if the accessed host is the same as the host in the token. This is to avoid tokens from leaking to third party applications. If this behaviour is problematic, you can generate a non-host specific token with &lt;a href=&quot;../plug/1.7.1/plug.csrfprotection#get_csrf_token/0&quot;&gt; &lt;code&gt;Plug.CSRFProtection.get_csrf_token/0&lt;/code&gt; &lt;/a&gt; and pass it to the form generator via the &lt;code&gt;:csrf_token&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="7dccdc8ceb60c088519eb2744c71557e5f68f812" translate="yes" xml:space="preserve">
          <source>When posting a form with a host in its address, such as &amp;ldquo;//host.com/path&amp;rdquo; instead of only &amp;ldquo;/path&amp;rdquo;, Phoenix will include the host signature in the token and validate the token only if the accessed host is the same as the host in the token. This is to avoid tokens from leaking to third party applications. If this behaviour is problematic, you can generate a non-host specific token with &lt;a href=&quot;../plug/1.5.0/plug.csrfprotection#get_csrf_token/0&quot;&gt;&lt;code&gt;Plug.CSRFProtection.get_csrf_token/0&lt;/code&gt;&lt;/a&gt; and pass it to the form generator via the &lt;code&gt;:csrf_token&lt;/code&gt; option.</source>
          <target state="translated">&quot;/ path&quot;대신 &quot;//host.com/path&quot;와 같이 주소에 호스트가있는 양식을 게시 할 때 Phoenix는 토큰에 호스트 서명을 포함하고 액세스 된 호스트가 토큰의 호스트와 동일합니다. 이는 토큰이 타사 응용 프로그램으로 유출되는 것을 방지하기위한 것입니다. 이 동작에 문제가 있으면 &lt;a href=&quot;../plug/1.5.0/plug.csrfprotection#get_csrf_token/0&quot;&gt; &lt;code&gt;Plug.CSRFProtection.get_csrf_token/0&lt;/code&gt; 을 사용&lt;/a&gt; 하여 호스트가 아닌 특정 토큰을 생성하고 &lt;code&gt;:csrf_token&lt;/code&gt; 옵션을 통해 양식 생성기로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71ce6f01109975e40095997b3fd95fd22acd3d24" translate="yes" xml:space="preserve">
          <source>When receiving a map on the server, the payload will also include user defined metadata of the client event, or an empty map if none is set. For example, the following &lt;code&gt;LiveSocket&lt;/code&gt; client option would send the coordinates and &lt;code&gt;altKey&lt;/code&gt; information for all clicks:</source>
          <target state="translated">서버에서지도를 수신 할 때 페이로드에는 클라이언트 이벤트의 사용자 정의 메타 데이터도 포함되거나 설정되지 않은 경우 빈지도가 포함됩니다. 예를 들어 다음 &lt;code&gt;LiveSocket&lt;/code&gt; 클라이언트 옵션은 모든 클릭에 대한 좌표 및 &lt;code&gt;altKey&lt;/code&gt; 정보를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="b7f00c99c1bef3973231a4d8bfa8e411a1561b7e" translate="yes" xml:space="preserve">
          <source>When rendering a child LiveView, the &lt;code&gt;:id&lt;/code&gt; option is required to uniquely identify the child. A child LiveView will only ever be rendered and mounted a single time, provided its ID remains unchanged. Updates to a child session will be merged on the client, but not passed back up until either a crash and re-mount or a connection drop and recovery. To force a child to re-mount with new session data, a new ID must be provided.</source>
          <target state="translated">하위 LiveView를 렌더링 할 때 하위 를 고유하게 식별하려면 &lt;code&gt;:id&lt;/code&gt; 옵션이 필요합니다. 하위 LiveView는 ID가 변경되지 않은 경우 한 번만 렌더링되고 마운트됩니다. 하위 세션에 대한 업데이트는 클라이언트에서 병합되지만 충돌 후 다시 마운트하거나 연결이 끊어지고 복구 될 때까지 백업되지 않습니다. 하위가 새 세션 데이터로 다시 마운트되도록하려면 새 ID를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="bf73291b7cd66cdde73887cbb1e73f77538cf855" translate="yes" xml:space="preserve">
          <source>When rendering a child template, any of the &lt;code&gt;phx-*&lt;/code&gt; events in the child template will be sent to the LiveView. In other words, similar to regular Phoenix templates, a regular &lt;code&gt;render&lt;/code&gt; call does not start another LiveView. This means &lt;code&gt;render&lt;/code&gt; is useful for sharing markup between views.</source>
          <target state="translated">하위 템플릿을 렌더링 할 때 하위 템플릿의 모든 &lt;code&gt;phx-*&lt;/code&gt; 이벤트가 LiveView로 전송됩니다. 즉, 일반 Phoenix 템플릿과 유사하게 일반 &lt;code&gt;render&lt;/code&gt; 호출은 다른 LiveView를 시작하지 않습니다. 즉, &lt;code&gt;render&lt;/code&gt; 은 뷰간에 마크 업을 공유하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="20d93f55440414dbf2c0f5d965570741010cbe30" translate="yes" xml:space="preserve">
          <source>When returning &lt;code&gt;{:error, keyword()}&lt;/code&gt;, the returned keyword list will be preserved in the changeset errors, similar to &lt;code&gt;Changeset.add_error/4&lt;/code&gt;. Passing a &lt;code&gt;:message&lt;/code&gt; key, will override the default message. It is not possible to override the &lt;code&gt;:type&lt;/code&gt; key.</source>
          <target state="translated">반환 할 때 &lt;code&gt;{:error, keyword()}&lt;/code&gt; , 반환 된 키워드 목록이 유사한 변경 집합 오류에 보존됩니다 &lt;code&gt;Changeset.add_error/4&lt;/code&gt; . &lt;code&gt;:message&lt;/code&gt; 키를 전달 하면 기본 메시지가 무시됩니다. &lt;code&gt;:type&lt;/code&gt; 키 를 재정의 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6ea5d8b1bfa40a3f131c9221b9562dc3b4cc3e01" translate="yes" xml:space="preserve">
          <source>When specifying a preload query, you can still preload the associations of those records. For instance, you could preload an author's published posts and the comments on those posts:</source>
          <target state="translated">When specifying a preload query, you can still preload the associations of those records. For instance, you could preload an author's published posts and the comments on those posts:</target>
        </trans-unit>
        <trans-unit id="f98ab404041d6b35a9d8895b473c52dd1db9f2dd" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;:through&lt;/code&gt; association is expected to return one or zero items, &lt;code&gt;has_one :through&lt;/code&gt; should be used instead, as in the example at the beginning of this section:</source>
          <target state="translated">경우 &lt;code&gt;:through&lt;/code&gt; 연결은 하나 개 또는 제로 항목을 반환 할 것으로 예상된다 &lt;code&gt;has_one :through&lt;/code&gt; 이 섹션의 시작 부분에서의 예에서와 같이, 대신에 사용되어야한다 :</target>
        </trans-unit>
        <trans-unit id="e64df2e4a2e5b2ce076a90449cf507efd33db8c7" translate="yes" xml:space="preserve">
          <source>When the channel callbacks return a &lt;code&gt;:stop&lt;/code&gt; tuple, such as:</source>
          <target state="translated">채널 콜백이 &lt;code&gt;:stop&lt;/code&gt; 과 같은 : stop 튜플을 반환 할 때 :</target>
        </trans-unit>
        <trans-unit id="78c68a7c956503411e675b97fcb55aa6c00cdf39" translate="yes" xml:space="preserve">
          <source>When the client receives new messages, it now knows to append to the old content rather than replace it.</source>
          <target state="translated">클라이언트가 새 메시지를 받으면 이제이를 대체하는 대신 이전 콘텐츠에 추가하는 것을 알게됩니다.</target>
        </trans-unit>
        <trans-unit id="0c65baefd4a128ad28faef469e1148b7bc8ab1de" translate="yes" xml:space="preserve">
          <source>When the component receives the update, the optional &lt;a href=&quot;phoenix.livecomponent#c:preload/1&quot;&gt;&lt;code&gt;preload/1&lt;/code&gt;&lt;/a&gt; callback is invoked, then the updated values are merged with the component's assigns and &lt;a href=&quot;phoenix.livecomponent#c:update/2&quot;&gt;&lt;code&gt;update/2&lt;/code&gt;&lt;/a&gt; is called for the updated component(s).</source>
          <target state="translated">구성 요소가 업데이트를 수신하면 선택적 &lt;a href=&quot;phoenix.livecomponent#c:preload/1&quot;&gt; &lt;code&gt;preload/1&lt;/code&gt; &lt;/a&gt; 콜백이 호출 된 다음 업데이트 된 값이 구성 요소의 할당과 병합되고 &lt;a href=&quot;phoenix.livecomponent#c:update/2&quot;&gt; &lt;code&gt;update/2&lt;/code&gt; &lt;/a&gt; 된 구성 요소에 대해 update / 2 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="5b57a3368194994b2f302c423be3220559b098da" translate="yes" xml:space="preserve">
          <source>When the exception raises, the client will remount the LiveView. Once you remount, your code will now notice that there is only one user in the organization and therefore no longer show the &quot;Leave&quot; button. In other words, by remounting, we often update the state of the page, allowing exceptions to be automatically handled.</source>
          <target state="translated">예외가 발생하면 클라이언트는 LiveView를 다시 마운트합니다. 다시 마운트하면 이제 코드에서 조직에 한 명의 사용자 만 있음을 알 수 있으므로 더 이상 &quot;나가기&quot;버튼이 표시되지 않습니다. 즉, 다시 마운트하면 페이지 상태를 자주 업데이트하여 예외를 자동으로 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="5875e42bdaee1ec0cd230ad8f13de1c777de9e52" translate="yes" xml:space="preserve">
          <source>When the first argument to an event callback is &lt;code&gt;:start&lt;/code&gt;, the signature of that callback is:</source>
          <target state="translated">이벤트 콜백에 대한 첫 번째 인수가 &lt;code&gt;:start&lt;/code&gt; 인 경우 해당 콜백의 서명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1da366f29690b415ec8e48907fd65c6a989a655c" translate="yes" xml:space="preserve">
          <source>When the first argument to an event callback is &lt;code&gt;:stop&lt;/code&gt;, the signature of that callback is:</source>
          <target state="translated">이벤트 콜백에 대한 첫 번째 인수가 &lt;code&gt;:stop&lt;/code&gt; 인 경우 해당 콜백의 서명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="33fe8759318032a9f3d8040b1d52f79293686bcd" translate="yes" xml:space="preserve">
          <source>When the server accepts a request, the request will always first pass through the plugs in our Endpoint, after which it will attempt to match on the path and HTTP verb.</source>
          <target state="translated">서버가 요청을 수락하면 요청은 항상 먼저 엔드 포인트의 플러그를 통과 한 후 경로와 HTTP 동사에서 일치를 시도합니다.</target>
        </trans-unit>
        <trans-unit id="e6c374dc8c3456a07f2a4c62efeb12af3cbf40d9" translate="yes" xml:space="preserve">
          <source>When the server receives a request, it can use &lt;a href=&quot;#verify/4&quot;&gt;&lt;code&gt;verify/4&lt;/code&gt;&lt;/a&gt; to determine if it should provide the requested resources to the client:</source>
          <target state="translated">서버가 요청을 받으면 &lt;a href=&quot;#verify/4&quot;&gt; &lt;code&gt;verify/4&lt;/code&gt; &lt;/a&gt; 를 사용 하여 요청 된 리소스를 클라이언트에 제공해야하는지 여부를 결정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="552068cc048cfc90796d52aa89c4b44fac7bc3fc" translate="yes" xml:space="preserve">
          <source>When this command is run for the first time, a &lt;code&gt;ModalComponent&lt;/code&gt; and &lt;code&gt;LiveHelpers&lt;/code&gt; module will be created, along with the resource level LiveViews and components, including an &lt;code&gt;IndexLive&lt;/code&gt;, &lt;code&gt;ShowLive&lt;/code&gt;, &lt;code&gt;FormComponent&lt;/code&gt; for the new resource.</source>
          <target state="translated">이 명령을 처음 실행하면 &lt;code&gt;ModalComponent&lt;/code&gt; 및 &lt;code&gt;LiveHelpers&lt;/code&gt; 모듈이 리소스 수준 LiveView 및 새 리소스에 대한 &lt;code&gt;IndexLive&lt;/code&gt; , &lt;code&gt;ShowLive&lt;/code&gt; , &lt;code&gt;FormComponent&lt;/code&gt; 를 포함하는 구성 요소와 함께 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="b0c944f0425b64c0ae91b9425d2e8330e293d7e1" translate="yes" xml:space="preserve">
          <source>When true, only keeps distinct values from the resulting select expression.</source>
          <target state="translated">true 인 경우 결과 select 표현식과 구별되는 값만 유지합니다.</target>
        </trans-unit>
        <trans-unit id="f8502e794150285953eb8284216071ffd2390df1" translate="yes" xml:space="preserve">
          <source>When used, defines the current module as a main view module</source>
          <target state="translated">사용되는 경우 현재 모듈을 기본보기 모듈로 정의</target>
        </trans-unit>
        <trans-unit id="fc6a5bb7dbce4dc86722aaf19052bf7d168774cc" translate="yes" xml:space="preserve">
          <source>When used, defines the current module as a main view module.</source>
          <target state="translated">사용되는 경우 현재 모듈을 기본보기 모듈로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="b9f256452077860897b8ed223edad682291f87ec" translate="yes" xml:space="preserve">
          <source>When used, it imports the given modules:</source>
          <target state="translated">사용되면 주어진 모듈을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a3fc7ca1f6d910de3c85e34f880d8a2d1fdda1c9" translate="yes" xml:space="preserve">
          <source>When used, the controller supports the following options:</source>
          <target state="translated">사용되는 경우 컨트롤러는 다음 옵션을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="4a9e648af31b518093b4d218db30b8a7ad5096a8" translate="yes" xml:space="preserve">
          <source>When used, the following options are accepted by &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">When used, the following options are accepted by &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="e2b17fbb5efb3835dcaf7fe2368934a8f0e2ac20" translate="yes" xml:space="preserve">
          <source>When used, the following options are accepted by &lt;a href=&quot;plug.builder#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">사용하면 &lt;a href=&quot;plug.builder#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt; 에서 다음 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6cad3bae7b845dd28d9eac3b2b21dd90faf9e214" translate="yes" xml:space="preserve">
          <source>When used, the following options are accepted by &lt;a href=&quot;plug.router#content&quot;&gt;&lt;code&gt;Plug.Router&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;plug.router#content&quot;&gt; &lt;code&gt;Plug.Router&lt;/code&gt; &lt;/a&gt; 는 다음 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ecb19794f21692ab8cd5e4fe18d086e33b1a0899" translate="yes" xml:space="preserve">
          <source>When used, the repository expects the &lt;code&gt;:otp_app&lt;/code&gt; and &lt;code&gt;:adapter&lt;/code&gt; as option. The &lt;code&gt;:otp_app&lt;/code&gt; should point to an OTP application that has the repository configuration. For example, the repository:</source>
          <target state="translated">When used, the repository expects the &lt;code&gt;:otp_app&lt;/code&gt; and &lt;code&gt;:adapter&lt;/code&gt; as option. The &lt;code&gt;:otp_app&lt;/code&gt; should point to an OTP application that has the repository configuration. For example, the repository:</target>
        </trans-unit>
        <trans-unit id="89ef296a91bfe8f357760bc5a54c3871db41aa09" translate="yes" xml:space="preserve">
          <source>When used, the repository expects the &lt;code&gt;:otp_app&lt;/code&gt; as option. The &lt;code&gt;:otp_app&lt;/code&gt; should point to an OTP application that has the repository configuration. For example, the repository:</source>
          <target state="translated">사용시, 저장소는 &lt;code&gt;:otp_app&lt;/code&gt; as 옵션을 필요로합니다. &lt;code&gt;:otp_app&lt;/code&gt; 은 저장소 구성이있는 OTP 응용 프로그램을 가리켜 야합니다. 예를 들어, 저장소 :</target>
        </trans-unit>
        <trans-unit id="6de197e1bf5188d809f178fe8b9d6e82b3abca2c" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Session&lt;/code&gt;&lt;/a&gt;, also consider using &lt;a href=&quot;plug.csrfprotection&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; to avoid Cross Site Request Forgery attacks.</source>
          <target state="translated">When using &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Session&lt;/code&gt; &lt;/a&gt;, also consider using &lt;a href=&quot;plug.csrfprotection&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; to avoid Cross Site Request Forgery attacks.</target>
        </trans-unit>
        <trans-unit id="9442a9b6b9b935f8fef9456b4c7b8ed7591f7875" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;phx-update&lt;/code&gt;, a unique DOM ID must always be set in the container. If using &quot;append&quot; or &quot;prepend&quot;, a DOM ID must also be set for each child. When appending or prepending elements containing an ID already present in the container, LiveView will replace the existing element with the new content instead appending or prepending a new element.</source>
          <target state="translated">&lt;code&gt;phx-update&lt;/code&gt; 를 사용할 때 고유 한 DOM ID는 항상 컨테이너에 설정되어야합니다. &quot;추가&quot;또는 &quot;앞에 추가&quot;를 사용하는 경우 각 하위 항목에 대해 DOM ID도 설정해야합니다. 컨테이너에 이미있는 ID가 포함 된 요소를 추가하거나 앞에 추가 할 때 LiveView는 새 요소를 추가하거나 앞에 추가하는 대신 기존 요소를 새 콘텐츠로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="b057be446c8b0561ca58fac05146235814d231f5" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;{:file, path}&lt;/code&gt;, the filename is inferred from the given path but may also be set explicitly.</source>
          <target state="translated">When using &lt;code&gt;{:file, path}&lt;/code&gt; , the filename is inferred from the given path but may also be set explicitly.</target>
        </trans-unit>
        <trans-unit id="63c896c7b9e74b12099142e7e414150e7bcf2e4c" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;{:file, path}&lt;/code&gt;, the filename is inferred from the given path must may also be set explicitly.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;{:file, path}&lt;/code&gt; , 파일 이름은 명시 적으로 설정 될 수 있어야 주어진 경로에서 유추됩니다.</target>
        </trans-unit>
        <trans-unit id="7b807fe6e8a5674fca02aa0dda26189f1455cbf8" translate="yes" xml:space="preserve">
          <source>When using Ecto, you must call &lt;code&gt;@derive&lt;/code&gt; before your &lt;code&gt;schema&lt;/code&gt; call:</source>
          <target state="translated">Ecto를 사용하는 경우 &lt;code&gt;schema&lt;/code&gt; 호출 전에 &lt;code&gt;@derive&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d46a314582096ef60ba6b19e59101999c2f40f29" translate="yes" xml:space="preserve">
          <source>When using TLS offloading it may be necessary to make some configuration changes to the application.</source>
          <target state="translated">TLS 오프 로딩을 사용하는 경우 애플리케이션에 대한 일부 구성 변경이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78c2f5e1e336a93a18d19f68c767ff85481bd765" translate="yes" xml:space="preserve">
          <source>When using any of those APIs, you may run into situations where Ecto sees data is being replaced. For example, imagine a Post has many Comments where the comments have IDs 1, 2 and 3. If you call &lt;a href=&quot;#cast_assoc/3&quot;&gt;&lt;code&gt;cast_assoc/3&lt;/code&gt;&lt;/a&gt; passing only the IDs 1 and 2, Ecto will consider 3 is being &quot;replaced&quot; and it will raise by default. Such behaviour can be changed when defining the relation by setting &lt;code&gt;:on_replace&lt;/code&gt; option when defining your association/embed according to the values below:</source>
          <target state="translated">When using any of those APIs, you may run into situations where Ecto sees data is being replaced. For example, imagine a Post has many Comments where the comments have IDs 1, 2 and 3. If you call &lt;a href=&quot;#cast_assoc/3&quot;&gt; &lt;code&gt;cast_assoc/3&lt;/code&gt; &lt;/a&gt; passing only the IDs 1 and 2, Ecto will consider 3 is being &quot;replaced&quot; and it will raise by default. Such behaviour can be changed when defining the relation by setting &lt;code&gt;:on_replace&lt;/code&gt; option when defining your association/embed according to the values below:</target>
        </trans-unit>
        <trans-unit id="fe491f3a1b048807fb640d254eac9175ec181858" translate="yes" xml:space="preserve">
          <source>When using any of those APIs, you may run into situations where Ecto sees data is being replaced. For example, imagine a Post has many Comments where the comments have IDs 1, 2 and 3. If you call &lt;a href=&quot;#cast_assoc/3&quot;&gt;&lt;code&gt;cast_assoc/3&lt;/code&gt;&lt;/a&gt; passing only the IDs 1 and 2, Ecto will consider 3 is being &amp;ldquo;replaced&amp;rdquo; and it will raise by default. Such behaviour can be changed when defining the relation by setting &lt;code&gt;:on_replace&lt;/code&gt; option when defining your association/embed according to the values below:</source>
          <target state="translated">이러한 API를 사용하면 Ecto에서 데이터가 교체되는 상황이 발생할 수 있습니다. 예를 들어, 게시물에 주석에 ID 1, 2 및 3이 많은 주석이 있다고 &lt;a href=&quot;#cast_assoc/3&quot;&gt; &lt;code&gt;cast_assoc/3&lt;/code&gt; &lt;/a&gt; 합니다. ID 1과 2 만 전달하는 cast_assoc / 3 를 호출하면 Ecto는 3이 &quot;대체&quot;된 것으로 간주하고 기본적으로 증가합니다. 아래 값에 따라 연관 / 포함을 정의 할 때 &lt;code&gt;:on_replace&lt;/code&gt; 옵션 을 설정하여 관계를 정의 할 때 이러한 동작을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2c647c8bad604fdfbc6aa7e48700b77bbc3fe17" translate="yes" xml:space="preserve">
          <source>When using joins, the bindings should be matched in the order they are specified:</source>
          <target state="translated">조인을 사용하는 경우 바인딩은 지정된 순서대로 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="b76d7eefe437704b766cfcf48aebf04e0892073e" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;:certfile&lt;/code&gt; and &lt;code&gt;:keyfile&lt;/code&gt; parameters to reference PEM files on disk, replacing the certificate and key is as simple as overwriting the files. Erlang's &lt;code&gt;:ssl&lt;/code&gt; application periodically reloads any referenced files, with changes taking effect in subsequent handshakes. It may be best to use symbolic links that point to versioned copies of the files, to allow for quick rollback in case of problems.</source>
          <target state="translated">&lt;code&gt;:certfile&lt;/code&gt; 및 &lt;code&gt;:keyfile&lt;/code&gt; 매개 변수를 사용하여 디스크의 PEM 파일을 참조 할 때 인증서와 키를 바꾸는 것은 파일을 덮어 쓰는 것만 큼 간단합니다. Erlang의 &lt;code&gt;:ssl&lt;/code&gt; 응용 프로그램은 참조 된 파일을 주기적으로 다시로드하며 변경 사항은 후속 핸드 셰이크에 적용됩니다. 문제 발생시 빠른 롤백을 위해 파일의 버전이 지정된 복사본을 가리키는 심볼릭 링크를 사용하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ea680443c707e666fd2c9f89c23d8be391c1e4a6" translate="yes" xml:space="preserve">
          <source>When using this technique, the only limitation is that you cannot build comments directly. For example, the command below</source>
          <target state="translated">이 기술을 사용할 때 유일한 제한은 주석을 직접 작성할 수 없다는 것입니다. 예를 들어 아래 명령</target>
        </trans-unit>
        <trans-unit id="4186dbf7799025cd86217ce8e9c75f47cd85eced" translate="yes" xml:space="preserve">
          <source>When using with lists, it is expected that all of the structs in the list belong to the same schema. Ordering is guaranteed to be kept. Results not found in the database will be returned as &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">When using with lists, it is expected that all of the structs in the list belong to the same schema. Ordering is guaranteed to be kept. Results not found in the database will be returned as &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1a5d95ccdc193ded81be250d7689878670b60630" translate="yes" xml:space="preserve">
          <source>When using with lists, ordering is guaranteed to be kept.</source>
          <target state="translated">When using with lists, ordering is guaranteed to be kept.</target>
        </trans-unit>
        <trans-unit id="7708295abd66ba5ec832480624fe98aacc45e35c" translate="yes" xml:space="preserve">
          <source>When we first run &lt;code&gt;ecto.migrate&lt;/code&gt;, it will create a table for us called &lt;code&gt;schema_migrations&lt;/code&gt;. This will keep track of all the migrations which we run by storing the timestamp portion of the migration's filename.</source>
          <target state="translated">우리가 처음 실행하면 &lt;code&gt;ecto.migrate&lt;/code&gt; 를 , 그것은 우리가 호출을위한 테이블을 생성합니다 &lt;code&gt;schema_migrations&lt;/code&gt; . 이렇게하면 마이그레이션 파일 이름의 타임 스탬프 부분을 저장하여 실행하는 모든 마이그레이션을 추적 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93ce9fe1fbd8ace514051f7d86005900fbbee184" translate="yes" xml:space="preserve">
          <source>When we install Elixir using instructions from the Elixir &lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;Installation Page&lt;/a&gt;, we will usually get Erlang too. If Erlang was not installed along with Elixir, please see the &lt;a href=&quot;https://elixir-lang.org/install.html#installing-erlang&quot;&gt;Erlang Instructions&lt;/a&gt; section of the Elixir Installation Page for instructions.</source>
          <target state="translated">Elixir &lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;설치 페이지의&lt;/a&gt; 지침을 사용하여 Elixir를 설치할 때 일반적으로 Erlang도 제공됩니다. Erlang이 Elixir와 함께 설치되지 않은 경우, &lt;a href=&quot;https://elixir-lang.org/install.html#installing-erlang&quot;&gt;지침&lt;/a&gt; 은 Elixir 설치 페이지 의 Erlang 지침 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="757aa403b9250dbee3ae75397b3e34a4012a05d6" translate="yes" xml:space="preserve">
          <source>When we load the page, we should be rendering the admin layout without a logo.</source>
          <target state="translated">페이지를로드 할 때 로고없이 관리자 레이아웃을 렌더링해야합니다.</target>
        </trans-unit>
        <trans-unit id="31959013e2192d4cfb6dcb68005790f54071ab5f" translate="yes" xml:space="preserve">
          <source>When we ran &lt;a href=&quot;mix.tasks.phx.routes&quot;&gt;&lt;code&gt;mix phx.routes&lt;/code&gt;&lt;/a&gt; for our user resource, it listed the &lt;code&gt;user_path&lt;/code&gt; as the path helper function for each line of output. Here is what that translates to for each action:</source>
          <target state="translated">사용자 리소스에 대해 &lt;a href=&quot;mix.tasks.phx.routes&quot;&gt; &lt;code&gt;mix phx.routes&lt;/code&gt; &lt;/a&gt; 를 실행했을 때 출력의 각 줄에 대한 경로 도우미 함수로 &lt;code&gt;user_path&lt;/code&gt; 를 나열했습니다 . 각 작업에 대한 의미는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="12c8dd43768310213139dbb8ddc101ad626284ee" translate="yes" xml:space="preserve">
          <source>When we reload our &lt;a href=&quot;http://localhost:4000&quot;&gt;Welcome Page&lt;/a&gt;, we see that we've been redirected to &lt;code&gt;/redirect_test&lt;/code&gt; which shows the original welcome page. It works!</source>
          <target state="translated">&lt;a href=&quot;http://localhost:4000&quot;&gt;환영 페이지를&lt;/a&gt; 다시로드 하면 원래 환영 페이지를 표시하는 &lt;code&gt;/redirect_test&lt;/code&gt; 로 리디렉션되었음을 알 수 있습니다. 효과가있다!</target>
        </trans-unit>
        <trans-unit id="d3b407e90007d5c8451cecfae73b2a1cdaa8077f" translate="yes" xml:space="preserve">
          <source>When we reload our home page, we should see our new title. Since templates are compiled inside the view, we could invoke the view function simply as &lt;code&gt;title()&lt;/code&gt;, otherwise we would have to type &lt;code&gt;HelloWeb.LayoutView.title()&lt;/code&gt;.</source>
          <target state="translated">홈 페이지를 새로 고침하면 새 제목이 표시됩니다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 템플릿은 뷰 내에서 컴파일되기 때문에 간단히 &lt;code&gt;title()&lt;/code&gt; 로 뷰 함수를 호출 할 수 있습니다 . 그렇지 않으면 &lt;code&gt;HelloWeb.LayoutView.title()&lt;/code&gt; 을 입력해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bd8fa76b8b3380f81f949a1edbf1ea2d29198c03" translate="yes" xml:space="preserve">
          <source>When we reload the &lt;a href=&quot;http://localhost:4000/&quot;&gt;Welcome Page&lt;/a&gt;, our messages should appear just above &quot;Welcome to Phoenix!&quot;</source>
          <target state="translated">시작 &lt;a href=&quot;http://localhost:4000/&quot;&gt;페이지를&lt;/a&gt; 다시로드하면 &quot;Welcome to Phoenix!&quot;바로 위에 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="ace0c111355c8d164097d74158a5e56308e03bfd" translate="yes" xml:space="preserve">
          <source>When we roll back a migration, &lt;code&gt;ecto.rollback&lt;/code&gt; will remove the record representing this migration from &lt;code&gt;schema_migrations&lt;/code&gt;.</source>
          <target state="translated">마이그레이션을 롤백 할 때 &lt;code&gt;ecto.rollback&lt;/code&gt; 은이 마이그레이션을 나타내는 레코드를 &lt;code&gt;schema_migrations&lt;/code&gt; 에서 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="ac8fc50c2b5cac84f95f5bbfd460da7be8dfc0f2" translate="yes" xml:space="preserve">
          <source>When we run &lt;a href=&quot;mix.tasks.phx.routes&quot;&gt;&lt;code&gt;mix phx.routes&lt;/code&gt;&lt;/a&gt; now, in addition to the routes we saw for &lt;code&gt;users&lt;/code&gt; above, we get the following set of routes:</source>
          <target state="translated">지금 &lt;a href=&quot;mix.tasks.phx.routes&quot;&gt; &lt;code&gt;mix phx.routes&lt;/code&gt; &lt;/a&gt; 를 실행하면 위에서 &lt;code&gt;users&lt;/code&gt; 위해 본 경로 외에도 다음과 같은 경로 집합을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="4f5a8d587ebfcf051e9f4231890eda9a1a3825a4" translate="yes" xml:space="preserve">
          <source>When we submit the form, we can see all the validation errors inline with the inputs. Nice! Out of the box, the context generator included the schema fields in our form template and we can see our default validations for required inputs are in effect. Let's enter some example user data and resubmit the form:</source>
          <target state="translated">양식을 제출할 때 입력과 함께 모든 유효성 검사 오류를 인라인으로 볼 수 있습니다. 좋은! 기본적으로 컨텍스트 생성기는 양식 서식 파일에 스키마 필드를 포함했으며 필요한 입력에 대한 기본 유효성 검사가 적용되고 있음을 확인할 수 있습니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 몇 가지 예제 사용자 데이터를 입력하고 양식을 다시 제출해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="10e5be6727956e1f65edabfeae52958eacca124f" translate="yes" xml:space="preserve">
          <source>When we use &lt;a href=&quot;mix.tasks.phx.new&quot;&gt;&lt;code&gt;mix phx.new&lt;/code&gt;&lt;/a&gt; to generates a new Phoenix application, it builds a top-level directory structure like this:</source>
          <target state="translated">우리가 사용하는 경우 &lt;a href=&quot;mix.tasks.phx.new&quot;&gt; &lt;code&gt;mix phx.new&lt;/code&gt; &lt;/a&gt; 새로운 피닉스 응용 프로그램을 생성하기 위해서는이 같은 최상위 디렉토리 구조를 구축 :</target>
        </trans-unit>
        <trans-unit id="60e324f1d064590a21e7a748a3c96df5d39424d5" translate="yes" xml:space="preserve">
          <source>When working with LiveViews, there are usually three layouts to be considered:</source>
          <target state="translated">LiveView로 작업 할 때 일반적으로 고려해야 할 세 가지 레이아웃이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea8331fcefa9e3611d1f77ac47288c4b74aa386c" translate="yes" xml:space="preserve">
          <source>When working with structs, associations and embeds, you will need to tell Phoenix how to extract the value out of the collection. For example, imagine &lt;code&gt;user.roles&lt;/code&gt; is a list of &lt;code&gt;%Role{}&lt;/code&gt; structs. You must call it as:</source>
          <target state="translated">구조체, 연관 및 임베드로 작업 할 때 Phoenix에게 컬렉션에서 값을 추출하는 방법을 알려줘야합니다. 예를 들어 &lt;code&gt;user.roles&lt;/code&gt; 가 &lt;code&gt;%Role{}&lt;/code&gt; 구조체 의 목록이라고 가정 합니다. 다음과 같이 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="11529cda0f4786283789c675fb6d35298108befe" translate="yes" xml:space="preserve">
          <source>When writing a query, you are inside Ecto&amp;rsquo;s query syntax. In order to access params values or invoke Elixir functions, you need to use the &lt;code&gt;^&lt;/code&gt; operator, which is overloaded by Ecto:</source>
          <target state="translated">쿼리를 작성할 때 Ecto의 쿼리 구문 안에 있습니다. params 값에 액세스하거나 Elixir 함수를 호출하려면 Ecto에 의해 오버로드 된 &lt;code&gt;^&lt;/code&gt; 연산자 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f685adf14f9dc8ebb1010e35219653400d104312" translate="yes" xml:space="preserve">
          <source>When writing a query, you are inside Ecto's query syntax. In order to access params values or invoke Elixir functions, you need to use the &lt;code&gt;^&lt;/code&gt; operator, which is overloaded by Ecto:</source>
          <target state="translated">When writing a query, you are inside Ecto's query syntax. In order to access params values or invoke Elixir functions, you need to use the &lt;code&gt;^&lt;/code&gt; operator, which is overloaded by Ecto:</target>
        </trans-unit>
        <trans-unit id="222fd3ab4c2367446d87b93a9ed66d617d866f37" translate="yes" xml:space="preserve">
          <source>When you are using custom logging system it is not always desirable to enable &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.Logger&lt;/code&gt;&lt;/a&gt; by default. You can always disable this in general by:</source>
          <target state="translated">When you are using custom logging system it is not always desirable to enable &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.Logger&lt;/code&gt; &lt;/a&gt; by default. You can always disable this in general by:</target>
        </trans-unit>
        <trans-unit id="76b102f3236b32d43787cd4b28e4b36328e91e00" translate="yes" xml:space="preserve">
          <source>When you first render a &lt;code&gt;.leex&lt;/code&gt; template, it will send all of the static and dynamic parts of the template to the client. After that, any change you do on the server will now send only the dynamic parts, and only if those parts have changed.</source>
          <target state="translated">&lt;code&gt;.leex&lt;/code&gt; 템플릿 을 처음 렌더링하면 템플릿의 모든 정적 및 동적 부분이 클라이언트로 전송됩니다. 그 후 서버에서 변경 한 사항은 이제 동적 부분 만 전송하고 해당 부분이 변경된 경우에만 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="401df37a4fa73425875f5744c204426372a7b38d" translate="yes" xml:space="preserve">
          <source>When you need to join on a complex query, Ecto supports fragments in joins:</source>
          <target state="translated">복잡한 쿼리에서 조인해야하는 경우 Ecto는 조인의 조각을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="391803076e229644b6ea348d4e5aa29d4ca58e78" translate="yes" xml:space="preserve">
          <source>When you render a &lt;code&gt;.leex&lt;/code&gt; template, you can convert the rendered structure to iodata by alternating the static and dynamic fields, always starting with a static entry followed by a dynamic entry. The last entry will always be static too. So the following structure:</source>
          <target state="translated">&lt;code&gt;.leex&lt;/code&gt; 템플릿 을 렌더링 할 때 항상 정적 항목과 동적 항목으로 시작하는 정적 및 동적 필드를 번갈아 가며 렌더링 된 구조를 iodata로 변환 할 수 있습니다. 마지막 항목도 항상 정적입니다. 따라서 다음 구조 :</target>
        </trans-unit>
        <trans-unit id="d4df6edd94ce8d9741909990c3091f0614cd1769" translate="yes" xml:space="preserve">
          <source>When your browser accesses &lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;, it sends a HTTP request to whatever service is running on that address, in this case our Phoenix application. The HTTP request is made of a verb and a path. For example, the following browser requests translate into:</source>
          <target state="translated">브라우저가 &lt;a href=&quot;http://localhost:4000/&quot;&gt;http : // localhost : 4000 /에&lt;/a&gt; 액세스하면 해당 주소에서 실행중인 서비스 (이 경우 Phoenix 애플리케이션)에 HTTP 요청을 보냅니다. HTTP 요청은 동사와 경로로 구성됩니다. 예를 들어 다음 브라우저 요청은 다음으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="df87029310d1d86261d4739da865e497cbdd5df0" translate="yes" xml:space="preserve">
          <source>Whenever a certificate is about to expire, when the contents of the certificate have been updated, or when the certificate is 're-keyed', the HTTPS server needs to be updated with the new certificate and/or key.</source>
          <target state="translated">인증서가 만료 되려고 할 때마다, 인증서의 내용이 업데이트되거나 인증서가 '다시 입력'되면 HTTPS 서버를 새 인증서 및 / 또는 키로 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="d9773ad4f25cae5ad3745e7670185f41f975dcb0" translate="yes" xml:space="preserve">
          <source>Whenever possible prefer to pass a &lt;code&gt;conn&lt;/code&gt; (or &lt;code&gt;@conn&lt;/code&gt; in your views) in place of an &lt;code&gt;Endpoint&lt;/code&gt;.</source>
          <target state="translated">가능할 때마다 &lt;code&gt;Endpoint&lt;/code&gt; 대신 &lt;code&gt;conn&lt;/code&gt; (또는 뷰의 &lt;code&gt;@conn&lt;/code&gt; ) 을 전달하는 것을 선호합니다 .</target>
        </trans-unit>
        <trans-unit id="c39f5b57d488920691c849754a4d54ead0b2465a" translate="yes" xml:space="preserve">
          <source>Whenever the &lt;code&gt;with&lt;/code&gt; conditions do not match, &lt;code&gt;HelloWeb.MyFallbackController&lt;/code&gt; will receive the original &lt;code&gt;conn&lt;/code&gt; as well as the result of the action and respond appropriately.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 조건이 일치하지 않을 때마다 &lt;code&gt;HelloWeb.MyFallbackController&lt;/code&gt; 는 원래 &lt;code&gt;conn&lt;/code&gt; 과 작업 결과를 수신하고 적절하게 응답합니다.</target>
        </trans-unit>
        <trans-unit id="58a897d460a28a5526c134cb973be1c2a28b3015" translate="yes" xml:space="preserve">
          <source>Whenever the transport receives a new connection, it should invoke the &lt;a href=&quot;#c:connect/1&quot;&gt;&lt;code&gt;connect/1&lt;/code&gt;&lt;/a&gt; callback with a map of metadata. Different sockets may require different metadatas.</source>
          <target state="translated">Whenever the transport receives a new connection, it should invoke the &lt;a href=&quot;#c:connect/1&quot;&gt; &lt;code&gt;connect/1&lt;/code&gt; &lt;/a&gt; callback with a map of metadata. Different sockets may require different metadatas.</target>
        </trans-unit>
        <trans-unit id="b214b4db5df0074dd9468af2bc4a0c32cee09b5f" translate="yes" xml:space="preserve">
          <source>Whenever you render a &lt;code&gt;.leex&lt;/code&gt; template, it returns a &lt;a href=&quot;phoenix.liveview.rendered&quot;&gt;&lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt;&lt;/a&gt; structure. This structure has three fields: &lt;code&gt;:static&lt;/code&gt;, &lt;code&gt;:dynamic&lt;/code&gt; and &lt;code&gt;:fingerprint&lt;/code&gt;.</source>
          <target state="translated">당신이 렌더링 할 때마다 &lt;code&gt;.leex&lt;/code&gt; 템플릿을, 그것은 반환 &lt;a href=&quot;phoenix.liveview.rendered&quot;&gt; &lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt; 의&lt;/a&gt; 구조. 이 구조에는 &lt;code&gt;:static&lt;/code&gt; , &lt;code&gt;:dynamic&lt;/code&gt; 및 &lt;code&gt;:fingerprint&lt;/code&gt; 의 세 가지 필드가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="da816372c7d9bc416b9d323a83462299e08dd7c2" translate="yes" xml:space="preserve">
          <source>Whenever your endpoint starts, it will automatically invoke the &lt;code&gt;child_spec/1&lt;/code&gt; on each listed socket and start that specification under the endpoint supervisor.</source>
          <target state="translated">Whenever your endpoint starts, it will automatically invoke the &lt;code&gt;child_spec/1&lt;/code&gt; on each listed socket and start that specification under the endpoint supervisor.</target>
        </trans-unit>
        <trans-unit id="a86367f08f566c021f62343a396bfe154b2b0748" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;@session_options&lt;/code&gt; are the options given to &lt;code&gt;plug Plug.Session&lt;/code&gt; by using a module attribute. If you don't have a &lt;code&gt;@session_options&lt;/code&gt; in your endpoint yet, here is how to create one:</source>
          <target state="translated">여기서 &lt;code&gt;@session_options&lt;/code&gt; 는 모듈 속성을 사용하여 &lt;code&gt;plug Plug.Session&lt;/code&gt; 을 연결 하기 위해 제공되는 옵션 입니다. 엔드 포인트에 아직 &lt;code&gt;@session_options&lt;/code&gt; 가없는 경우 만드는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bfce2c4263be5afa80030fe33a000cb85d9c6bea" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;Account.get_users_map/1&lt;/code&gt; could be implemented like:</source>
          <target state="translated">Where &lt;code&gt;Account.get_users_map/1&lt;/code&gt; could be implemented like:</target>
        </trans-unit>
        <trans-unit id="98ddf2b8b5fd35fa1a982c7e70a5a6645d0928e7" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;MyAppWeb.LiveHelpers&lt;/code&gt; can be something like:</source>
          <target state="translated">어디 &lt;code&gt;MyAppWeb.LiveHelpers&lt;/code&gt; 는 식으로 뭔가를 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="a4be8ebd35761d0d4ac81a88b7c59b0c1bf283a2" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;SomeView&lt;/code&gt; is a regular &lt;a href=&quot;../phoenix/phoenix.view&quot;&gt;&lt;code&gt;Phoenix.View&lt;/code&gt;&lt;/a&gt;, typically defined in &lt;code&gt;lib/my_app_web/views/some_view.ex&lt;/code&gt; and &quot;child_template.html&quot; is defined at &lt;code&gt;lib/my_app_web/templates/some_view/child_template.html.leex&lt;/code&gt;. As long as the template has the &lt;code&gt;.leex&lt;/code&gt; extension and all assigns are passed, LiveView change tracking will also work across templates.</source>
          <target state="translated">어디 &lt;code&gt;SomeView&lt;/code&gt; 는 정기적 인 &lt;a href=&quot;../phoenix/phoenix.view&quot;&gt; &lt;code&gt;Phoenix.View&lt;/code&gt; &lt;/a&gt; 일반적 정의, &lt;code&gt;lib/my_app_web/views/some_view.ex&lt;/code&gt; 와 &quot;child_template.html는&quot;에 정의 된 &lt;code&gt;lib/my_app_web/templates/some_view/child_template.html.leex&lt;/code&gt; . 템플릿에 &lt;code&gt;.leex&lt;/code&gt; 확장자가 있고 모든 할당이 전달되는 한 LiveView 변경 내용 추적도 템플릿간에 작동합니다.</target>
        </trans-unit>
        <trans-unit id="18f39a2455d434664cad3cc2528296beb7d16eee" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;presence.ex&lt;/code&gt; is the snake cased version of the module name provided.</source>
          <target state="translated">어디 &lt;code&gt;presence.ex&lt;/code&gt; 가 제공하는 모듈 이름의 뱀 맡았다 버전입니다.</target>
        </trans-unit>
        <trans-unit id="0c0aa429df48fb9dbb85f1bd9af56f2865b2d2e1" translate="yes" xml:space="preserve">
          <source>Where the &lt;code&gt;:entry&lt;/code&gt; assign was injected into the &lt;code&gt;do/end&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;:entry&lt;/code&gt; 할당이 &lt;code&gt;do/end&lt;/code&gt; 블록 에 삽입 된 곳 .</target>
        </trans-unit>
        <trans-unit id="98691641b06b970234ee1e0d5e2d92f1b19400a9" translate="yes" xml:space="preserve">
          <source>Where the configuration for the Repo must be in your application environment, usually defined in your &lt;code&gt;config/config.exs&lt;/code&gt;:</source>
          <target state="translated">Repo 구성이 응용 프로그램 환경에 있어야하는 경우, 일반적으로 &lt;code&gt;config/config.exs&lt;/code&gt; 에 정의되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="62eedcef3fb74a683c9daa9514e91f1a7291d22f" translate="yes" xml:space="preserve">
          <source>Where to plug</source>
          <target state="translated">플러그 위치</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="7292805878118da0218a2dc395fd6c97280d1fa8" translate="yes" xml:space="preserve">
          <source>Which would geneate a &lt;code&gt;lib/app_web/controllers/sales/user_controller.ex&lt;/code&gt; and &lt;code&gt;lib/app_web/views/sales/user_view.ex&lt;/code&gt;.</source>
          <target state="translated">이는 geneate 것 &lt;code&gt;lib/app_web/controllers/sales/user_controller.ex&lt;/code&gt; 및 &lt;code&gt;lib/app_web/views/sales/user_view.ex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="169f42f52ad8dde2ebe0c5490b3f4f70c844824c" translate="yes" xml:space="preserve">
          <source>Which would generate a &lt;code&gt;lib/app_web/controllers/sales/user_controller.ex&lt;/code&gt; and &lt;code&gt;lib/app_web/views/sales/user_view.ex&lt;/code&gt;.</source>
          <target state="translated">Which would generate a &lt;code&gt;lib/app_web/controllers/sales/user_controller.ex&lt;/code&gt; and &lt;code&gt;lib/app_web/views/sales/user_view.ex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="224090c9e8c0a02a3d668cec9898d6233200095f" translate="yes" xml:space="preserve">
          <source>Which would generate a LiveViews inside &lt;code&gt;lib/app_web/live/sales/user_live/&lt;/code&gt; and a view at &lt;code&gt;lib/app_web/views/sales/user_view.ex&lt;/code&gt;.</source>
          <target state="translated">내부 LiveViews 생성 할 것이다 &lt;code&gt;lib/app_web/live/sales/user_live/&lt;/code&gt; 과에서 볼 &lt;code&gt;lib/app_web/views/sales/user_view.ex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d567887c3803ee34287f09d660f40b50e974441b" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#build_conn/0&quot;&gt;&lt;code&gt;build_conn/0&lt;/code&gt;&lt;/a&gt; returns a connection with no request information to it, &lt;a href=&quot;#build_conn/3&quot;&gt;&lt;code&gt;build_conn/3&lt;/code&gt;&lt;/a&gt; returns a connection with the given request information already filled in.</source>
          <target state="translated">While &lt;a href=&quot;#build_conn/0&quot;&gt; &lt;code&gt;build_conn/0&lt;/code&gt; &lt;/a&gt; returns a connection with no request information to it, &lt;a href=&quot;#build_conn/3&quot;&gt; &lt;code&gt;build_conn/3&lt;/code&gt; &lt;/a&gt; returns a connection with the given request information already filled in.</target>
        </trans-unit>
        <trans-unit id="e534a7972f8f2133b552255e1248cf436c3ce6da" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#fetch_change/2&quot;&gt;&lt;code&gt;fetch_change/2&lt;/code&gt;&lt;/a&gt; only looks at the current &lt;code&gt;changes&lt;/code&gt; to retrieve a value, this function looks at the changes and then falls back on the data, finally returning &lt;code&gt;:error&lt;/code&gt; if no value is available.</source>
          <target state="translated">하지만 &lt;a href=&quot;#fetch_change/2&quot;&gt; &lt;code&gt;fetch_change/2&lt;/code&gt; &lt;/a&gt; 는 현재에 보이는 &lt;code&gt;changes&lt;/code&gt; 값, 변경에서이 기능의 외모를 검색 한 후 마지막으로 반환, 다시 데이터에 떨어지면 &lt;code&gt;:error&lt;/code&gt; 값은 사용할 수없는 경우.</target>
        </trans-unit>
        <trans-unit id="b0382b9e86faafbc7891cce5cec47c5b6e90ae9b" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#get_change/3&quot;&gt;&lt;code&gt;get_change/3&lt;/code&gt;&lt;/a&gt; only looks at the current &lt;code&gt;changes&lt;/code&gt; to retrieve a value, this function looks at the changes and then falls back on the data, finally returning &lt;code&gt;default&lt;/code&gt; if no value is available.</source>
          <target state="translated">하지만 &lt;a href=&quot;#get_change/3&quot;&gt; &lt;code&gt;get_change/3&lt;/code&gt; &lt;/a&gt; 은 현재에 보이는 &lt;code&gt;changes&lt;/code&gt; 값, 변경에서이 기능의 외모를 검색 한 후 마지막으로 반환, 다시 데이터에 떨어지면 &lt;code&gt;default&lt;/code&gt; 값은 사용할 수없는 경우.</target>
        </trans-unit>
        <trans-unit id="f2e5eeb89fb7afc72bf1ca0ecd56a1b7f9401e20" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;LiveView&lt;/code&gt;s can be nested, each LiveView starts its own process. A LiveComponent provides similar functionality to LiveView, except they run in the same process as the &lt;code&gt;LiveView&lt;/code&gt;, with its own encapsulated state.</source>
          <target state="translated">&lt;code&gt;LiveView&lt;/code&gt; 는 중첩 될 수 있지만 각 LiveView는 자체 프로세스를 시작합니다. LiveComponent는 자체 캡슐화 된 상태로 &lt;code&gt;LiveView&lt;/code&gt; 와 동일한 프로세스에서 실행된다는 점을 제외하면 LiveView와 유사한 기능을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="4dab26b49e123f6d9fad71a2d11b5833bf17d1df" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;filters&lt;/code&gt; can be any record column, it is expected that at least the primary key (or any other key that uniquely identifies an existing record) be given as a filter. Therefore, in case there is no record matching the given filters, &lt;code&gt;{:error, :stale}&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;filters&lt;/code&gt; 는 임의의 레코드 열일 수 있지만 최소한 기본 키 (또는 기존 레코드를 고유하게 식별하는 다른 키)는 필터로 제공 될 것으로 예상됩니다. 따라서 지정된 필터와 일치하는 레코드가없는 경우 &lt;code&gt;{:error, :stale}&lt;/code&gt; 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="b90463480fbb2e6cece32d97740b29aaa5a5ad35" translate="yes" xml:space="preserve">
          <source>While Phoenix uses &lt;a href=&quot;https://hexdocs.pm/ecto&quot;&gt;the Ecto project&lt;/a&gt; to interact with the data access layer, there are many other data access options, some even built into the Erlang standard library. &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;ETS&lt;/a&gt; and &lt;a href=&quot;http://www.erlang.org/doc/man/dets.html&quot;&gt;DETS&lt;/a&gt; are key value data stores built into &lt;a href=&quot;http://www.erlang.org/doc/&quot;&gt;OTP&lt;/a&gt;. OTP also provides a relational database called &lt;a href=&quot;http://www.erlang.org/doc/man/mnesia.html&quot;&gt;mnesia&lt;/a&gt; with its own query language called QLC. Both Elixir and Erlang also have a number of libraries for working with a wide range of popular data stores.</source>
          <target state="translated">Phoenix는 &lt;a href=&quot;https://hexdocs.pm/ecto&quot;&gt;Ecto 프로젝트&lt;/a&gt; 를 사용하여 데이터 액세스 계층과 상호 작용 하지만 다른 많은 데이터 액세스 옵션이 있으며 일부는 Erlang 표준 라이브러리에 내장되어 있습니다. &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;ETS&lt;/a&gt; 와 &lt;a href=&quot;http://www.erlang.org/doc/man/dets.html&quot;&gt;DETS&lt;/a&gt; 는 &lt;a href=&quot;http://www.erlang.org/doc/&quot;&gt;OTP에&lt;/a&gt; 내장 된 핵심 가치 데이터 저장소 입니다. OTP는 또한 QLC라는 자체 쿼리 언어와 함께 &lt;a href=&quot;http://www.erlang.org/doc/man/mnesia.html&quot;&gt;mnesia&lt;/a&gt; 라는 관계형 데이터베이스를 제공합니다 . Elixir와 Erlang은 모두 널리 사용되는 다양한 데이터 저장소와 작업 할 수있는 많은 라이브러리를 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b8f2ea454ed459c023928fffee6fdd71d497d17" translate="yes" xml:space="preserve">
          <source>While a component may always be updated from the parent by updating some parent assigns which will re-render the child, thus invoking &lt;a href=&quot;phoenix.livecomponent#c:update/2&quot;&gt;&lt;code&gt;update/2&lt;/code&gt;&lt;/a&gt; on the child component, &lt;a href=&quot;#send_update/2&quot;&gt;&lt;code&gt;send_update/2&lt;/code&gt;&lt;/a&gt; is useful for updating a component that entirely manages its own state, as well as messaging between components mounted in the same LiveView.</source>
          <target state="translated">구성 요소는 자식을 다시 렌더링하는 일부 부모 할당을 업데이트하여 항상 부모에서 업데이트 할 수 있지만 자식 구성 요소에서 &lt;a href=&quot;phoenix.livecomponent#c:update/2&quot;&gt; &lt;code&gt;update/2&lt;/code&gt; &lt;/a&gt; 를 호출 하면 &lt;a href=&quot;#send_update/2&quot;&gt; &lt;code&gt;send_update/2&lt;/code&gt; &lt;/a&gt; 는 자신의 상태를 완전히 관리하는 구성 요소를 업데이트하는 데 유용합니다. 동일한 LiveView에 마운트 된 구성 요소 간의 메시징.</target>
        </trans-unit>
        <trans-unit id="12ac8aa9cd05af7819374285327f7ddebcab6b72" translate="yes" xml:space="preserve">
          <source>While in practice this would happen:</source>
          <target state="translated">실제로는 다음과 같은 일이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0691343dda26e2627136cacb21709dd9a0d74122" translate="yes" xml:space="preserve">
          <source>While it is possible to respond with JSON back directly from the controller and skip the view, Phoenix Views provide a much more structured approach for doing so. Let's take our &lt;code&gt;PageController&lt;/code&gt;, and see what it might look like when we respond with some static page maps as JSON, instead of HTML.</source>
          <target state="translated">컨트롤러에서 직접 JSON으로 응답하고보기를 건너 뛸 수 있지만 Phoenix Views는 훨씬 더 구조화 된 접근 방식을 제공합니다. &lt;code&gt;PageController&lt;/code&gt; 를 가져 와서 HTML 대신 JSON으로 일부 정적 페이지 맵을 사용하여 응답 할 때 어떻게 보이는지 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="166b0b19c4318267ef3304520e1a174b0c238e23" translate="yes" xml:space="preserve">
          <source>While it is possible to update the DER binaries passed in the &lt;code&gt;:cert&lt;/code&gt; or &lt;code&gt;:key&lt;/code&gt; options (as well as any other TLS protocol parameters) at runtime, this requires knowledge of the internals of the Plug adapter being used, and is therefore beyond the scope of this document.</source>
          <target state="translated">런타임시 &lt;code&gt;:cert&lt;/code&gt; 또는 &lt;code&gt;:key&lt;/code&gt; 옵션 (및 기타 모든 TLS 프로토콜 매개 변수)에 전달 된 DER 바이너리를 업데이트 할 수 있지만 사용중인 플러그 어댑터의 내부에 대한 지식이 필요하므로 범위를 벗어납니다. 이 문서의.</target>
        </trans-unit>
        <trans-unit id="a6542b12ba2a164880e9ddcd7da870b698d21e60" translate="yes" xml:space="preserve">
          <source>While the above instructions are enough to install LiveView in a Phoenix app, if you want to use the &lt;code&gt;phx.gen.live&lt;/code&gt; generators that come as part of Phoenix v1.5, you need to do one more change, as those generators assume your application was created with &lt;code&gt;mix phx.new --live&lt;/code&gt;.</source>
          <target state="translated">위의 지침은 Phoenix 앱에 LiveView를 설치하는 데 충분하지만 Phoenix v1.5의 일부로 제공되는 &lt;code&gt;phx.gen.live&lt;/code&gt; 생성기 를 사용하려면 해당 생성기가 응용 프로그램을 가정하므로 한 번 더 변경해야합니다. &lt;code&gt;mix phx.new --live&lt;/code&gt; 로 만들어졌습니다 .</target>
        </trans-unit>
        <trans-unit id="7a8cc313aa450f550ef29e49ab875fdb2d3af78f" translate="yes" xml:space="preserve">
          <source>While the functions above are pushing data to the channel (server) we can use &lt;a href=&quot;#assert_push/3&quot;&gt;&lt;code&gt;assert_push/3&lt;/code&gt;&lt;/a&gt; to verify the channel pushed a message to the client:</source>
          <target state="translated">위의 함수가 데이터를 채널 (서버)로 푸시하는 동안 &lt;a href=&quot;#assert_push/3&quot;&gt; &lt;code&gt;assert_push/3&lt;/code&gt; &lt;/a&gt; 를 사용하여 채널이 클라이언트에 메시지를 푸시했는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fcbd994e354de402deda7e45e12a771f5b7b910d" translate="yes" xml:space="preserve">
          <source>While we can name our actions whatever we like, there are conventions for action names which we should follow whenever possible. We went over these in the &lt;a href=&quot;routing&quot;&gt;Routing Guide&lt;/a&gt;, but we'll take another quick look here.</source>
          <target state="translated">우리가 원하는대로 행동의 이름을 지정할 수 있지만, 가능할 때마다 따라야하는 행동 이름에 대한 규칙이 있습니다. 우리는 이들을 가서 &lt;a href=&quot;routing&quot;&gt;라우팅 가이드&lt;/a&gt; ,하지만 우리는 여기에 또 다른 빠른 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="95f8952d981944c4f22a5429f3626b685c96cab1" translate="yes" xml:space="preserve">
          <source>Window API</source>
          <target state="translated">창 API</target>
        </trans-unit>
        <trans-unit id="9eebc5495b0c92ae3e9f0580058bf5bc8ead011e" translate="yes" xml:space="preserve">
          <source>Window expressions</source>
          <target state="translated">창 표현</target>
        </trans-unit>
        <trans-unit id="942a7bd326860b0b4980658413e82cb2e09cb02f" translate="yes" xml:space="preserve">
          <source>Windows functions must always be used as the first argument of &lt;code&gt;over/2&lt;/code&gt; where the second argument is the name of a window:</source>
          <target state="translated">Windows functions must always be used as the first argument of &lt;code&gt;over/2&lt;/code&gt; where the second argument is the name of a window:</target>
        </trans-unit>
        <trans-unit id="088f1a8d5334adc0d9054795c438c8a4157ccf5a" translate="yes" xml:space="preserve">
          <source>Windows functions must always be used as the first argument of &lt;code&gt;over/2&lt;/code&gt; where the second argument is the name of an window:</source>
          <target state="translated">Windows 함수는 항상 첫 번째 &lt;code&gt;over/2&lt;/code&gt; 인수로 사용해야합니다. 여기서 두 번째 인수는 창의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3f18a0d4b7d6df5ecdc82c2b64e67beb07ce7bf5" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;send_update&lt;/code&gt;, the CardComponent given by &lt;code&gt;id&lt;/code&gt; will be invoked, triggering both preload and update callbacks, which will load the most up to date data from the database.</source>
          <target state="translated">&lt;code&gt;send_update&lt;/code&gt; 를 사용하면 &lt;code&gt;id&lt;/code&gt; 로 지정된 CardComponent 가 호출되어 데이터베이스에서 최신 데이터를로드하는 사전로드 및 업데이트 콜백을 모두 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="0fffa57a8fdc6ba7eabbad254a7be49695e31178" translate="yes" xml:space="preserve">
          <source>With authentication in place, we're in good shape to begin building out our next features.</source>
          <target state="translated">인증이 완료되면 다음 기능을 구축하기 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3572f042a296c5292f522bff5fd7e7073897920f" translate="yes" xml:space="preserve">
          <source>With changeset data</source>
          <target state="translated">변경 세트 데이터</target>
        </trans-unit>
        <trans-unit id="aadf38883156d16713765967e3522cfda5a68b25" translate="yes" xml:space="preserve">
          <source>With connection data</source>
          <target state="translated">연결 데이터</target>
        </trans-unit>
        <trans-unit id="f295be51fb1e10ca263cab0e00929d87fc1ea008" translate="yes" xml:space="preserve">
          <source>With limited data</source>
          <target state="translated">With limited data</target>
        </trans-unit>
        <trans-unit id="b79fc04b02f3e1e3113bc0ad13223ed93dd2391a" translate="yes" xml:space="preserve">
          <source>With our associations in place, let's update our &lt;code&gt;CMS&lt;/code&gt; context to require an author when creating or updating a page. We'll start off with data fetching changes. Open up your &lt;code&gt;CMS&lt;/code&gt; context in &lt;code&gt;lib/hello/cms.ex&lt;/code&gt; and replace the &lt;code&gt;list_pages/0&lt;/code&gt;, &lt;code&gt;get_page!/1&lt;/code&gt;, and &lt;code&gt;get_author!/1&lt;/code&gt; functions with the following definitions:</source>
          <target state="translated">연결이 제자리에 있으면 페이지를 만들거나 업데이트 할 때 작성자가 필요하도록 &lt;code&gt;CMS&lt;/code&gt; 컨텍스트를 업데이트하겠습니다 . 데이터 가져 오기 변경 사항부터 시작하겠습니다. 당신 열고 &lt;code&gt;CMS&lt;/code&gt; 의 에서 컨텍스트를 &lt;code&gt;lib/hello/cms.ex&lt;/code&gt; 및 교체 &lt;code&gt;list_pages/0&lt;/code&gt; , &lt;code&gt;get_page!/1&lt;/code&gt; 및 &lt;code&gt;get_author!/1&lt;/code&gt; 다음의 정의와 기능 :</target>
        </trans-unit>
        <trans-unit id="b795df2cc8a4aee1fc12429c35c6be711433df54" translate="yes" xml:space="preserve">
          <source>With our context function in place, let's make use of it in our CMS page controller. Update your &lt;code&gt;show&lt;/code&gt; action in &lt;code&gt;lib/hello_web/controllers/cms/page_controller.ex&lt;/code&gt; to call our new function:</source>
          <target state="translated">컨텍스트 기능을 제자리에두고 CMS 페이지 컨트롤러에서 사용하겠습니다. &lt;code&gt;lib/hello_web/controllers/cms/page_controller.ex&lt;/code&gt; 에서 &lt;code&gt;show&lt;/code&gt; 작업을 업데이트하여 새 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="d47b43298c709c9e6a2dd6ba6a82240b231e59ca" translate="yes" xml:space="preserve">
          <source>With our data access functions in place, let's turn our focus towards persistence. We can fetch authors alongside pages, but we haven't yet allowed authors to be persisted when we create or edit pages. Let's fix that. Open up &lt;code&gt;lib/hello/cms.ex&lt;/code&gt; and make the following changes:</source>
          <target state="translated">데이터 액세스 기능이 제자리에 있으면 지속성에 초점을 맞 춥니 다. 페이지와 함께 작성자를 가져올 수 있지만 페이지를 만들거나 편집 할 때 작성자가 유지되는 것을 아직 허용하지 않았습니다. 수정하겠습니다. &lt;code&gt;lib/hello/cms.ex&lt;/code&gt; 를 열고 다음과 같이 변경합니다.</target>
        </trans-unit>
        <trans-unit id="7393e6162a548a48833fa71dd2d2c3bc7a09b114" translate="yes" xml:space="preserve">
          <source>With our database ready, let's integrate authors and posts in the CMS system.</source>
          <target state="translated">데이터베이스가 준비되면 CMS 시스템에서 작성자와 게시물을 통합 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="2db082b5f869a91c5407abba783b7511c0dea85d" translate="yes" xml:space="preserve">
          <source>With our files in place, let's follow the instructions and run our migration:</source>
          <target state="translated">파일을 제자리에두고 지침에 따라 마이그레이션을 실행 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="f20291553e59927e985f1e7c1fd86b65fd5fb703" translate="yes" xml:space="preserve">
          <source>With our new adapter installed and configured, we're ready to create our database.</source>
          <target state="translated">새 어댑터가 설치 및 구성되었으므로 데이터베이스를 만들 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="9937e233a7e675aa148c53bea132c0463e60c1d8" translate="yes" xml:space="preserve">
          <source>With our new plugs in place, we can now modify our &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; actions to make use of the new values in the connection assigns:</source>
          <target state="translated">새 플러그를 설치하면 이제 &lt;code&gt;create&lt;/code&gt; , &lt;code&gt;edit&lt;/code&gt; , &lt;code&gt;update&lt;/code&gt; 및 &lt;code&gt;delete&lt;/code&gt; 작업을 수정하여 연결 할당의 새 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b3578ed8536dcf97f714a96c9571ea849a87610" translate="yes" xml:space="preserve">
          <source>With our plan set, let's get to work. Run the following command to generate our new context:</source>
          <target state="translated">우리의 계획을 세우고 일을 시작합시다. 다음 명령을 실행하여 새 컨텍스트를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="092b409c002b0cb883ddef2ae134a3697b432e34" translate="yes" xml:space="preserve">
          <source>With the configuration above, Phoenix will filter all parameters, except those that match exactly &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;order&lt;/code&gt;. If a kept parameter matches, all parameters nested under that one will also be kept.</source>
          <target state="translated">위의 구성을 사용하면 Phoenix는 &lt;code&gt;id&lt;/code&gt; 또는 &lt;code&gt;order&lt;/code&gt; 와 정확히 일치하는 매개 변수를 제외한 모든 매개 변수를 필터링합니다 . 유지 된 매개 변수가 일치하면 해당 매개 변수 아래에 중첩 된 모든 매개 변수도 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="472540370a8daf2e06e4a6a97210baf81f2330a2" translate="yes" xml:space="preserve">
          <source>With the configuration above, Phoenix will filter any parameter that contains the terms &lt;code&gt;password&lt;/code&gt; or &lt;code&gt;secret&lt;/code&gt;. The match is case sensitive.</source>
          <target state="translated">위의 구성으로 Phoenix는 &lt;code&gt;password&lt;/code&gt; 또는 &lt;code&gt;secret&lt;/code&gt; 용어가 포함 된 모든 매개 변수를 필터링합니다 . 일치는 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="4d2fbedf8f78f3f83a2ab6549f67d6ef063932bb" translate="yes" xml:space="preserve">
          <source>With the new route in place, Phoenix reminds us to update our repo by running &lt;code&gt;mix ecto.migrate&lt;/code&gt;. Let's do that now:</source>
          <target state="translated">새로운 경로가 마련되면 Phoenix는 &lt;code&gt;mix ecto.migrate&lt;/code&gt; 를 실행하여 리포지토리 를 업데이트하도록 알려줍니다 . 이제 그렇게합시다.</target>
        </trans-unit>
        <trans-unit id="3b8495a819c0d27127f9cfc5edab40a867cc27ed" translate="yes" xml:space="preserve">
          <source>Within the body of the &lt;code&gt;show&lt;/code&gt; action, we also pass a third argument into the render function, a key/value pair where &lt;code&gt;:messenger&lt;/code&gt; is the key, and the &lt;code&gt;messenger&lt;/code&gt; variable is passed as the value.</source>
          <target state="translated">&lt;code&gt;show&lt;/code&gt; 액션 의 본문 내에서 세 번째 인수를 render 함수에 전달합니다 &lt;code&gt;:messenger&lt;/code&gt; 여기서 : messenger 가 키이고 &lt;code&gt;messenger&lt;/code&gt; 변수가 값으로 전달 되는 키 / 값 쌍 입니다.</target>
        </trans-unit>
        <trans-unit id="78c2ebb94cb306857c69ff477a8406ac04620db3" translate="yes" xml:space="preserve">
          <source>Within the callback, &lt;code&gt;info.detail&lt;/code&gt; will be an object that contains a &lt;code&gt;kind&lt;/code&gt; key, with a value that depends on the triggering event:</source>
          <target state="translated">콜백 내에서 &lt;code&gt;info.detail&lt;/code&gt; 은 트리거링 이벤트에 따라 달라지는 값과 함께 &lt;code&gt;kind&lt;/code&gt; 키 를 포함하는 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="25a8cd01b22602e9473729dfab94778e8847d027" translate="yes" xml:space="preserve">
          <source>Without form data</source>
          <target state="translated">양식 데이터없이</target>
        </trans-unit>
        <trans-unit id="6867154f9482b628862b825a6066bb11597d4d84" translate="yes" xml:space="preserve">
          <source>Working with typespecs</source>
          <target state="translated">Working with typespecs</target>
        </trans-unit>
        <trans-unit id="f512bfbdc661c81fb8dd8e937d4ea9c96e1089a8" translate="yes" xml:space="preserve">
          <source>Would allow you to broadcast a &amp;ldquo;disconnect&amp;rdquo; event and terminate all active sockets and channels for a given user:</source>
          <target state="translated">&amp;ldquo;연결 끊기&amp;rdquo;이벤트를 브로드 캐스트하고 지정된 사용자에 대한 모든 활성 소켓 및 채널을 종료 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e83489c69b81dd5f8bc5d5eff77cd99ee2524aa9" translate="yes" xml:space="preserve">
          <source>Would allow you to broadcast a &lt;code&gt;&quot;disconnect&quot;&lt;/code&gt; event and terminate all active sockets and channels for a given user:</source>
          <target state="translated">Would allow you to broadcast a &lt;code&gt;&quot;disconnect&quot;&lt;/code&gt; event and terminate all active sockets and channels for a given user:</target>
        </trans-unit>
        <trans-unit id="53d7281bcca532fc8591b5b1ba851078ea3285b8" translate="yes" xml:space="preserve">
          <source>Would generate the following directory structure and modules:</source>
          <target state="translated">다음 디렉토리 구조 및 모듈을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="c3b86ba680f9358bbceaac6f8b77425f6ffbaf30" translate="yes" xml:space="preserve">
          <source>Wraps the connection in an error which is meant to be handled upper in the stack.</source>
          <target state="translated">연결을 스택의 상단에서 처리해야하는 오류로 래핑합니다.</target>
        </trans-unit>
        <trans-unit id="6402519fd0e5dd2000d2f5b2e30bcaf78df26c48" translate="yes" xml:space="preserve">
          <source>Wraps the given data in a changeset or adds changes to a changeset</source>
          <target state="translated">지정된 데이터를 변경 세트에 랩하거나 변경 세트를 변경 세트에 추가</target>
        </trans-unit>
        <trans-unit id="8d04588363b9e053eecca85045627b6999172e76" translate="yes" xml:space="preserve">
          <source>Wraps the given data in a changeset or adds changes to a changeset.</source>
          <target state="translated">지정된 데이터를 변경 세트에 랩하거나 변경 세트를 변경 세트에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="a54480f5ddae533d6c1f89b695da164c78fdefa4" translate="yes" xml:space="preserve">
          <source>You also want to query not only by the full url, but for example by specific ports used. This is possible by putting the URI data into a map field instead of just storing the plain string representation.</source>
          <target state="translated">또한 전체 URL뿐만 아니라 사용 된 특정 포트를 기준으로 쿼리하려고합니다. 이는 일반 문자열 표현을 저장하는 대신 URI 데이터를 맵 필드에 넣음으로써 가능합니다.</target>
        </trans-unit>
        <trans-unit id="8c6614be9ef8bdfa437648746c8595efc9f47e1b" translate="yes" xml:space="preserve">
          <source>You are also able to configure &lt;code&gt;:month&lt;/code&gt;, &lt;code&gt;:day&lt;/code&gt;, &lt;code&gt;:hour&lt;/code&gt;, &lt;code&gt;:minute&lt;/code&gt; and &lt;code&gt;:second&lt;/code&gt;. All options given to those keys will be forwarded to the underlying select. See &lt;a href=&quot;#select/4&quot;&gt;&lt;code&gt;select/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;:month&lt;/code&gt; , &lt;code&gt;:day&lt;/code&gt; , &lt;code&gt;:hour&lt;/code&gt; , &lt;code&gt;:minute&lt;/code&gt; 및 &lt;code&gt;:second&lt;/code&gt; 를 구성 할 수도 있습니다 . 해당 키에 지정된 모든 옵션은 기본 선택으로 전달됩니다. 자세한 내용은 &lt;a href=&quot;#select/4&quot;&gt; &lt;code&gt;select/4&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="20fbc977b1aab2ddcdb4b338ff969abd6fed1965" translate="yes" xml:space="preserve">
          <source>You are not required to specify all bindings when composing. For example, if we would like to order the results above by post insertion date, we could further extend it as:</source>
          <target state="translated">작성시 모든 바인딩을 지정하지 않아도됩니다. 예를 들어, 삽입 후 날짜별로 결과를 주문하려면 다음과 같이 추가로 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8201a42c05c6503dbe6a82037022b245d4c86e2" translate="yes" xml:space="preserve">
          <source>You begin by rendering a LiveView typically from your router. When LiveView is first rendered, the &lt;a href=&quot;#c:mount/3&quot;&gt;&lt;code&gt;mount/3&lt;/code&gt;&lt;/a&gt; callback is invoked with the current params, the current session and the LiveView socket. As in a regular request, &lt;code&gt;params&lt;/code&gt; contains public data that can be modified by the user. The &lt;code&gt;session&lt;/code&gt; always contains private data set by the application itself. The &lt;a href=&quot;#c:mount/3&quot;&gt;&lt;code&gt;mount/3&lt;/code&gt;&lt;/a&gt; callback wires up socket assigns necessary for rendering the view. After mounting, &lt;a href=&quot;#c:render/1&quot;&gt;&lt;code&gt;render/1&lt;/code&gt;&lt;/a&gt; is invoked and the HTML is sent as a regular HTML response to the client.</source>
          <target state="translated">일반적으로 라우터에서 LiveView를 렌더링하는 것으로 시작합니다. LiveView가 처음 렌더링 될 때 &lt;a href=&quot;#c:mount/3&quot;&gt; &lt;code&gt;mount/3&lt;/code&gt; &lt;/a&gt; 콜백은 현재 매개 변수, 현재 세션 및 LiveView 소켓과 함께 호출됩니다. 일반 요청에서와 같이 &lt;code&gt;params&lt;/code&gt; 에는 사용자가 수정할 수있는 공개 데이터가 포함됩니다. &lt;code&gt;session&lt;/code&gt; 항상 응용 프로그램 자체에 의한 개인 데이터 세트가 포함되어 있습니다. 은 &lt;a href=&quot;#c:mount/3&quot;&gt; &lt;code&gt;mount/3&lt;/code&gt; &lt;/a&gt; 뷰를 렌더링에 필요한 소켓 양수인 최대 콜백 와이어를. 마운트 후 &lt;a href=&quot;#c:render/1&quot;&gt; &lt;code&gt;render/1&lt;/code&gt; &lt;/a&gt; 이 호출되고 HTML이 일반 HTML 응답으로 클라이언트에 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="d20fb42baadd0c62435c69d1bd9be49865069c9f" translate="yes" xml:space="preserve">
          <source>You can add a custom Ecto query function using macros. For example to expose SQL&amp;rsquo;s coalesce function you can define this macro:</source>
          <target state="translated">매크로를 사용하여 사용자 정의 Ecto 쿼리 기능을 추가 할 수 있습니다. 예를 들어 SQL의 병합 기능을 표시하기 위해이 매크로를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0679c85cb188ecb5b884abca6954e2c60f26975" translate="yes" xml:space="preserve">
          <source>You can add a custom Ecto query function using macros. For example to expose SQL's coalesce function you can define this macro:</source>
          <target state="translated">You can add a custom Ecto query function using macros. For example to expose SQL's coalesce function you can define this macro:</target>
        </trans-unit>
        <trans-unit id="880f7d5eee161dbf80a42213201a382a17fe15bc" translate="yes" xml:space="preserve">
          <source>You can also access the &lt;code&gt;request_id&lt;/code&gt; programmatically by calling &lt;code&gt;Logger.metadata[:request_id]&lt;/code&gt;. Do not access it via the request header, as the request header value has not been validated and it may not always be present.</source>
          <target state="translated">You can also access the &lt;code&gt;request_id&lt;/code&gt; programmatically by calling &lt;code&gt;Logger.metadata[:request_id]&lt;/code&gt; . Do not access it via the request header, as the request header value has not been validated and it may not always be present.</target>
        </trans-unit>
        <trans-unit id="ae585fd769f22b03ae6d236cfe3df370d82c1af0" translate="yes" xml:space="preserve">
          <source>You can also change the table name or configure the migrations to use binary ids for primary keys, see &lt;a href=&quot;mix.tasks.phx.gen.schema&quot;&gt;&lt;code&gt;mix phx.gen.schema&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">You can also change the table name or configure the migrations to use binary ids for primary keys, see &lt;a href=&quot;mix.tasks.phx.gen.schema&quot;&gt; &lt;code&gt;mix phx.gen.schema&lt;/code&gt; &lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="2ea11cb61719dbd51b5f975e95b64291c102dad3" translate="yes" xml:space="preserve">
          <source>You can also create your own helpers, such as &lt;code&gt;json_conn()&lt;/code&gt; that uses &lt;a href=&quot;#build_conn/0&quot;&gt;&lt;code&gt;build_conn/0&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;put_req_header/3&lt;/code&gt;, so you avoid repeating the connection setup throughout your tests.</source>
          <target state="translated">You can also create your own helpers, such as &lt;code&gt;json_conn()&lt;/code&gt; that uses &lt;a href=&quot;#build_conn/0&quot;&gt; &lt;code&gt;build_conn/0&lt;/code&gt; &lt;/a&gt; and &lt;code&gt;put_req_header/3&lt;/code&gt; , so you avoid repeating the connection setup throughout your tests.</target>
        </trans-unit>
        <trans-unit id="df7fdd05bd84f27399b9df87706da233ebffa395" translate="yes" xml:space="preserve">
          <source>You can also pass the attributes, which can be a map or a keyword list, to set the struct&amp;rsquo;s fields except the association key.</source>
          <target state="translated">맵 또는 키워드 목록 일 수있는 속성을 전달하여 연관 키를 제외한 구조체의 필드를 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="33105a076b314d36f58b8ce02d5b18049c3d38bf" translate="yes" xml:space="preserve">
          <source>You can also pass the attributes, which can be a map or a keyword list, to set the struct's fields except the association key.</source>
          <target state="translated">You can also pass the attributes, which can be a map or a keyword list, to set the struct's fields except the association key.</target>
        </trans-unit>
        <trans-unit id="0356da330ed8a5e82f9c19da6f71e42026979683" translate="yes" xml:space="preserve">
          <source>You can also push a message directly down the socket:</source>
          <target state="translated">소켓 아래로 직접 메시지를 푸시 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0759136a49a289dc66c8a0ef2a5e1fae5f35260" translate="yes" xml:space="preserve">
          <source>You can also remove specific joins as well such as &lt;code&gt;left_join&lt;/code&gt; and &lt;code&gt;inner_join&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;left_join&lt;/code&gt; 및 &lt;code&gt;inner_join&lt;/code&gt; 과 같은 특정 조인을 제거 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e5b323ddfafcd87805db868cd417b7d762823f5c" translate="yes" xml:space="preserve">
          <source>You can also set it to &lt;code&gt;:infinity&lt;/code&gt; to fully disable it.</source>
          <target state="translated">You can also set it to &lt;code&gt;:infinity&lt;/code&gt; to fully disable it.</target>
        </trans-unit>
        <trans-unit id="a4240313a0c0e2a8ce9a8fd1f82f50b0fd61b2fd" translate="yes" xml:space="preserve">
          <source>You can also specify which pipelines you want to run:</source>
          <target state="translated">You can also specify which pipelines you want to run:</target>
        </trans-unit>
        <trans-unit id="00519a98922ac88931d587bac84ddd0b804e3bc0" translate="yes" xml:space="preserve">
          <source>You can also start repositories without names by explicitly setting the name to nil:</source>
          <target state="translated">You can also start repositories without names by explicitly setting the name to nil:</target>
        </trans-unit>
        <trans-unit id="d846a5781a00a806be839b0408582d4fb8132f9c" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;phoenix.liveview.helpers#live_title_tag/2&quot;&gt;&lt;code&gt;Phoenix.LiveView.Helpers.live_title_tag/2&lt;/code&gt;&lt;/a&gt; to support adding automatic prefix and suffix to the page title when rendered and on subsequent updates:</source>
          <target state="translated">또한 &lt;a href=&quot;phoenix.liveview.helpers#live_title_tag/2&quot;&gt; &lt;code&gt;Phoenix.LiveView.Helpers.live_title_tag/2&lt;/code&gt; &lt;/a&gt; 를 사용 하여 렌더링 및 후속 업데이트시 페이지 제목에 자동 접두사 및 접미사 추가를 지원할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1fc087749c17c7fcd34103914f4a229a48b1838a" translate="yes" xml:space="preserve">
          <source>You can also write:</source>
          <target state="translated">당신은 또한 쓸 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="fbbe55d64c14fa4667bb4ec0c0830b8a9d40424b" translate="yes" xml:space="preserve">
          <source>You can avoid this by unlinking the channel process in the test:</source>
          <target state="translated">테스트에서 채널 프로세스를 연결 해제하여이를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="288c7a95a39a1ccb2cb3d67f9a49d61f67356d0b" translate="yes" xml:space="preserve">
          <source>You can change the default &lt;code&gt;container&lt;/code&gt; on &lt;code&gt;use Phoenix.LiveView&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;use Phoenix.LiveView&lt;/code&gt; 기본 &lt;code&gt;container&lt;/code&gt; 를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b569c0eaa5cf3c50314946b4d7b1d90630edace6" translate="yes" xml:space="preserve">
          <source>You can configure the shutdown of each channel used when your application is shutting down by setting the &lt;code&gt;:shutdown&lt;/code&gt; value on use:</source>
          <target state="translated">You can configure the shutdown of each channel used when your application is shutting down by setting the &lt;code&gt;:shutdown&lt;/code&gt; value on use:</target>
        </trans-unit>
        <trans-unit id="c7c13f75bcdda73bc93df14786fcfe5fb3b534f2" translate="yes" xml:space="preserve">
          <source>You can configure this list of instrumenter modules in the compile-time configuration of your endpoint. (see the &lt;code&gt;:instrumenters&lt;/code&gt; option above). The way these modules express their interest in events is by exporting public functions where the name of each function is the name of an event. For example, if someone instruments the &lt;code&gt;:render_view&lt;/code&gt; event, then each instrumenter module interested in that event will have to export &lt;code&gt;render_view/3&lt;/code&gt;.</source>
          <target state="translated">엔드 포인트의 컴파일 타임 구성에서이 인스트루먼트 모듈 목록을 구성 할 수 있습니다. ( 위 의 &lt;code&gt;:instrumenters&lt;/code&gt; 옵션 참조). 이러한 모듈이 이벤트에 대한 관심을 표현하는 방법은 각 함수의 이름이 이벤트의 이름 인 공용 함수를 내보내는 것입니다. 예를 들어 누군가가 &lt;code&gt;:render_view&lt;/code&gt; 이벤트를 계측하는 경우 해당 이벤트에 관심이있는 각 인스트루먼트 모듈은 &lt;code&gt;render_view/3&lt;/code&gt; 를 내 보내야 합니다.</target>
        </trans-unit>
        <trans-unit id="a7358c4238b4132c8322af561bef036263b6ecd0" translate="yes" xml:space="preserve">
          <source>You can find more information about defining associations and each respective association module in &lt;a href=&quot;ecto.schema&quot;&gt;&lt;code&gt;Ecto.Schema&lt;/code&gt;&lt;/a&gt; docs.</source>
          <target state="translated">&lt;a href=&quot;ecto.schema&quot;&gt; &lt;code&gt;Ecto.Schema&lt;/code&gt; &lt;/a&gt; 문서 에서 연관 정의 및 각 관련 연관 모듈에 대한 자세한 정보를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26d19f0fba54277989e8a2df3f6616440af162ee" translate="yes" xml:space="preserve">
          <source>You can find the full list of operations in &lt;a href=&quot;ecto.query.api&quot;&gt;&lt;code&gt;Ecto.Query.API&lt;/code&gt;&lt;/a&gt;. Besides the operations listed there, the following literals are supported in queries:</source>
          <target state="translated">&lt;a href=&quot;ecto.query.api&quot;&gt; &lt;code&gt;Ecto.Query.API&lt;/code&gt; &lt;/a&gt; 에서 전체 작업 목록을 찾을 수 있습니다 . 여기에 나열된 작업 외에도 다음 리터럴이 쿼리에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="8004a28f6f495539f88f2de11fa24c272747ae3d" translate="yes" xml:space="preserve">
          <source>You can however configure the adapter to use another library. For example, if using Postgres:</source>
          <target state="translated">그러나 다른 라이브러리를 사용하도록 어댑터를 구성 할 수 있습니다. 예를 들어 Postgres를 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="6ce8874b6f994484c5a7fdaf024f85e96fa0b1a3" translate="yes" xml:space="preserve">
          <source>You can learn more about Ecto Telemetry in the &quot;Telemetry Events&quot; section of the &lt;a href=&quot;../ecto/ecto.repo&quot;&gt;&lt;code&gt;Ecto.Repo&lt;/code&gt;&lt;/a&gt; module documentation.</source>
          <target state="translated">&lt;a href=&quot;../ecto/ecto.repo&quot;&gt; &lt;code&gt;Ecto.Repo&lt;/code&gt; &lt;/a&gt; 모듈 문서 의 &quot;Telemetry Events&quot;섹션에서 Ecto Telemetry에 대해 자세히 알아볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6f79c5bd27cd669dce4c3ad79f05026cab2dca9" translate="yes" xml:space="preserve">
          <source>You can learn more about applications in &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;Elixir's official docs for Application&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램에 대한 자세한 내용은 &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;Elixir의 Application 공식 문서&lt;/a&gt; 에서 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53bd39883a557391b9ed679343dd6e75e7e81f3e" translate="yes" xml:space="preserve">
          <source>You can list any module as a channel as long as it implements a &lt;code&gt;child_spec/1&lt;/code&gt; function. The &lt;code&gt;child_spec/1&lt;/code&gt; function receives the caller as argument and it must return a child spec that initializes a process.</source>
          <target state="translated">You can list any module as a channel as long as it implements a &lt;code&gt;child_spec/1&lt;/code&gt; function. The &lt;code&gt;child_spec/1&lt;/code&gt; function receives the caller as argument and it must return a child spec that initializes a process.</target>
        </trans-unit>
        <trans-unit id="e20470634d01c6507227e7e8af25b17ab55e8ae0" translate="yes" xml:space="preserve">
          <source>You can mark a repository as read-only by passing the &lt;code&gt;:read_only&lt;/code&gt; flag on &lt;code&gt;use&lt;/code&gt;:</source>
          <target state="translated">You can mark a repository as read-only by passing the &lt;code&gt;:read_only&lt;/code&gt; flag on &lt;code&gt;use&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ce361a838073443a778ac71cecef2c9b9f4136bc" translate="yes" xml:space="preserve">
          <source>You can now interact with the socket under &lt;code&gt;/socket/websocket&lt;/code&gt; and &lt;code&gt;/socket/longpoll&lt;/code&gt;.</source>
          <target state="translated">You can now interact with the socket under &lt;code&gt;/socket/websocket&lt;/code&gt; and &lt;code&gt;/socket/longpoll&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4502d2decf04d4e8358f7888ee9f8d7d79e4fda5" translate="yes" xml:space="preserve">
          <source>You can now use the functions in this module to subscribe and broadcast messages:</source>
          <target state="translated">이제이 모듈의 기능을 사용하여 메시지를 구독하고 브로드 캐스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13011971dd21baa7d2d2d7aeb92621d2ac78681b" translate="yes" xml:space="preserve">
          <source>You can override the container tag and pass extra attributes when calling &lt;code&gt;live_render&lt;/code&gt; (as well as on your &lt;code&gt;live&lt;/code&gt; call in your router):</source>
          <target state="translated">&lt;code&gt;live_render&lt;/code&gt; 를 호출 할 때 컨테이너 태그를 재정의하고 추가 속성을 전달할 수 있습니다 (라우터 의 &lt;code&gt;live&lt;/code&gt; 호출에서도).</target>
        </trans-unit>
        <trans-unit id="198235118b075642ac36bfc7867390cfb04eb543" translate="yes" xml:space="preserve">
          <source>You can override those options per invocation by providing corresponding switches, e.g. &lt;code&gt;--no-binary-id&lt;/code&gt; to use normal ids despite the default configuration or &lt;code&gt;--migration&lt;/code&gt; to force generation of the migration.</source>
          <target state="translated">기본 구성에도 불구하고 일반 ID를 사용하는 &lt;code&gt;--no-binary-id&lt;/code&gt; 또는 마이그레이션을 강제로 생성하는 &lt;code&gt;--migration&lt;/code&gt; 과 같은 해당 스위치를 제공하여 호출 당 옵션을 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="28ab776f8c1c528edc27476f5614421906b608bd" translate="yes" xml:space="preserve">
          <source>You can pass a single field name or a list of field names that are required.</source>
          <target state="translated">단일 필드 이름 또는 필요한 필드 이름 목록을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="027ef05aed30f60d78196f2e223b4a86f4823051" translate="yes" xml:space="preserve">
          <source>You can pass the &lt;code&gt;:allow_hosts&lt;/code&gt; option to control any host that you may want to allow. The values in &lt;code&gt;:allow_hosts&lt;/code&gt; may either be a full host name or a host suffix. For example: &lt;code&gt;[&quot;www.example.com&quot;, &quot;.subdomain.example.com&quot;]&lt;/code&gt; will allow the exact host of &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt; and any host that ends with &lt;code&gt;&quot;.subdomain.example.com&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:allow_hosts&lt;/code&gt; 옵션을 전달하여 허용하려는 모든 호스트를 제어 할 수 있습니다. &lt;code&gt;:allow_hosts&lt;/code&gt; 의 값은 전체 호스트 이름이거나 호스트 접미사 일 수 있습니다. 예 : &lt;code&gt;[&quot;www.example.com&quot;, &quot;.subdomain.example.com&quot;]&lt;/code&gt; 은 정확한 &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt; 호스트 및 &lt;code&gt;&quot;.subdomain.example.com&quot;&lt;/code&gt; 으로 끝나는 모든 호스트를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="4cf7e2834aca965961474f7960beb5a7a3d8bfbf" translate="yes" xml:space="preserve">
          <source>You can prove this by temporarily adding this function clause to your &lt;code&gt;PageView&lt;/code&gt; module in &lt;code&gt;lib/hello_web/views/page_view.ex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lib/hello_web/views/page_view.ex&lt;/code&gt; 의 &lt;code&gt;PageView&lt;/code&gt; 모듈 에이 함수 절을 임시로 추가하여이를 증명할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1147ba5321d256fe3939a63bea2caa651f8ca0f8" translate="yes" xml:space="preserve">
          <source>You can provide custom dispatch options in order to use Phoenix&amp;rsquo;s builtin Cowboy server with custom handlers. For example, to handle raw WebSockets &lt;a href=&quot;https://github.com/ninenines/cowboy/tree/1.0.x/examples&quot;&gt;as shown in Cowboy&amp;rsquo;s docs&lt;/a&gt;).</source>
          <target state="translated">사용자 지정 처리기와 함께 Phoenix의 내장 Cowboy 서버를 사용하기 위해 사용자 지정 디스패치 옵션을 제공 할 수 있습니다. 예를 들어 &lt;a href=&quot;https://github.com/ninenines/cowboy/tree/1.0.x/examples&quot;&gt;Cowboy 's docs에 표시된대로&lt;/a&gt; 원시 WebSocket을 처리하려면 ).</target>
        </trans-unit>
        <trans-unit id="65870b7b1e4fc4e0b12bde2c127555715b06d732" translate="yes" xml:space="preserve">
          <source>You can provide custom dispatch options in order to use Phoenix's builtin Cowboy server with custom handlers. For example, to handle raw WebSockets &lt;a href=&quot;https://github.com/ninenines/cowboy/tree/1.0.x/examples&quot;&gt;as shown in Cowboy's docs&lt;/a&gt;).</source>
          <target state="translated">사용자 지정 핸들러와 함께 Phoenix의 내장 카우보이 서버를 사용하기 위해 사용자 지정 디스패치 옵션을 제공 할 수 있습니다. 예를 들어 &lt;a href=&quot;https://github.com/ninenines/cowboy/tree/1.0.x/examples&quot;&gt;Cowboy의 문서에 표시된 것처럼&lt;/a&gt; 원시 WebSocket을 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="4405e6c570f1b0705cada61879da2dd0dac0a793" translate="yes" xml:space="preserve">
          <source>You can provide custom dispatch options in order to use Phoenix's builtin Cowboy server with custom handlers. For example, to handle raw WebSockets &lt;a href=&quot;https://github.com/ninenines/cowboy/tree/master/examples&quot;&gt;as shown in Cowboy's docs&lt;/a&gt;).</source>
          <target state="translated">사용자 지정 핸들러와 함께 Phoenix의 내장 카우보이 서버를 사용하기 위해 사용자 지정 디스패치 옵션을 제공 할 수 있습니다. 예를 들어 &lt;a href=&quot;https://github.com/ninenines/cowboy/tree/master/examples&quot;&gt;Cowboy의 문서에 표시된 것처럼&lt;/a&gt; 원시 WebSocket을 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="18dbae2f7217c55fad20286768bfbc8d2a06672f" translate="yes" xml:space="preserve">
          <source>You can raise your new exception like this:</source>
          <target state="translated">다음과 같이 새 예외를 발생시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea8abc22d1b44be655ed2043c3a24fa2e47dce94" translate="yes" xml:space="preserve">
          <source>You can read more about umbrella projects using the official &lt;a href=&quot;http://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-apps.html#umbrella-projects&quot;&gt;Elixir guide&lt;/a&gt;</source>
          <target state="translated">공식 &lt;a href=&quot;http://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-apps.html#umbrella-projects&quot;&gt;Elixir 가이드를&lt;/a&gt; 사용하여 우산 프로젝트에 대해 자세히 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bd17e48f5b34ac8ab5b00b5ae83fa31d5577646" translate="yes" xml:space="preserve">
          <source>You can read more about using transactions with &lt;a href=&quot;ecto.multi&quot;&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt; as well as see some examples in the &lt;a href=&quot;ecto.multi&quot;&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;ecto.multi&quot;&gt; &lt;code&gt;Ecto.Multi&lt;/code&gt; 와의&lt;/a&gt; 트랜잭션 사용에 대한 자세한 내용 은 물론 &lt;a href=&quot;ecto.multi&quot;&gt; &lt;code&gt;Ecto.Multi&lt;/code&gt; &lt;/a&gt; 설명서의 몇 가지 예를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9dcae7450fc502aa36394f897d4b52d88eb23e41" translate="yes" xml:space="preserve">
          <source>You can return &lt;code&gt;:error&lt;/code&gt; if the given term cannot be cast. A default error message of &quot;is invalid&quot; will be added to the changeset.</source>
          <target state="translated">You can return &lt;code&gt;:error&lt;/code&gt; if the given term cannot be cast. A default error message of &quot;is invalid&quot; will be added to the changeset.</target>
        </trans-unit>
        <trans-unit id="8219061b2e91de83dc4cac46e5b88b674ff7cef0" translate="yes" xml:space="preserve">
          <source>You can run &lt;a href=&quot;mix.tasks.phx.routes&quot;&gt;&lt;code&gt;mix phx.routes&lt;/code&gt;&lt;/a&gt; to see how these definitions will look like.</source>
          <target state="translated">&lt;a href=&quot;mix.tasks.phx.routes&quot;&gt; &lt;code&gt;mix phx.routes&lt;/code&gt; &lt;/a&gt; 를 실행 하여 이러한 정의가 어떻게 보이는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6c2f96bd85826db8f362934f0d0c8abbdd2b28eb" translate="yes" xml:space="preserve">
          <source>You can serve the LiveView directly from your router (recommended):</source>
          <target state="translated">라우터에서 직접 LiveView를 제공 할 수 있습니다 (권장).</target>
        </trans-unit>
        <trans-unit id="f920239ab54dff0ead6431e584f04d11edf651f8" translate="yes" xml:space="preserve">
          <source>You can show and hide content with the following markup:</source>
          <target state="translated">다음 마크 업을 사용하여 콘텐츠를 표시하고 숨길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0419bb314764f5107bec4b9617687485af00cb75" translate="yes" xml:space="preserve">
          <source>You can trigger live navigation in two ways:</source>
          <target state="translated">두 가지 방법으로 실시간 탐색을 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d2a3494be46c973a266af5995164ba10648e670" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;:assigns&lt;/code&gt; (which contains user data) or &lt;code&gt;:private&lt;/code&gt; (which contains library/framework data) for this. For example:</source>
          <target state="translated">You can use &lt;code&gt;:assigns&lt;/code&gt; (which contains user data) or &lt;code&gt;:private&lt;/code&gt; (which contains library/framework data) for this. For example:</target>
        </trans-unit>
        <trans-unit id="f7ee69119d142d6484c87a3d1905d104126bdbdb" translate="yes" xml:space="preserve">
          <source>You can use the definition above to define any view in your application:</source>
          <target state="translated">You can use the definition above to define any view in your application:</target>
        </trans-unit>
        <trans-unit id="513e649b0adddb5b97b6aa2e14e1ff5d6f3ec3a9" translate="yes" xml:space="preserve">
          <source>You could for example replace the browsers &lt;code&gt;confirm()&lt;/code&gt; behavior with a custom javascript implementation:</source>
          <target state="translated">예를 들어 브라우저 &lt;code&gt;confirm()&lt;/code&gt; 동작을 사용자 정의 자바 스크립트 구현으로 바꿀 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5681100e0fe0b53466b9db4458e23c460b7e11ea" translate="yes" xml:space="preserve">
          <source>You do not need to define schemas in order to interact with repositories, operations like &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;insert_all&lt;/code&gt; and so on allow developers to directly access and modify the data, keeping the database at your fingertips when necessary;</source>
          <target state="translated">리포지토리, &lt;code&gt;all&lt;/code&gt; 과 같은 작업 , &lt;code&gt;insert_all&lt;/code&gt; 등과 상호 작용하기 위해 스키마를 정의 할 필요가 없어 개발자가 데이터에 직접 액세스하고 수정하여 필요한 경우 데이터베이스를 손쉽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35cf67a331bdf664d0a5b5a0cdedbe918df57867" translate="yes" xml:space="preserve">
          <source>You have three options to choose from when shutting down a channel:</source>
          <target state="translated">채널을 종료 할 때 선택할 수있는 세 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="65d96497885bf76cbb36f89b9ae011981406493b" translate="yes" xml:space="preserve">
          <source>You likely want to use this module or make it part of your &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.CaseTemplate.html&quot;&gt;&lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt;&lt;/a&gt;. Once used, this module automatically imports all functions defined here as well as the functions in &lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 모듈을 사용하거나 &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.CaseTemplate.html&quot;&gt; &lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt; 의&lt;/a&gt; 일부로 만들 수 있습니다 . 이 모듈을 사용하면 여기에 정의 된 모든 기능과 &lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt; 의 기능을 자동으로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="b6808f2d6521310b80257968c8540bd87c578d49" translate="yes" xml:space="preserve">
          <source>You likely want to use this module or make it part of your &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.CaseTemplate.html&quot;&gt;&lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt;&lt;/a&gt;. Once used, this module automatically imports all functions defined here as well as the functions in &lt;a href=&quot;../plug/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">You likely want to use this module or make it part of your &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.CaseTemplate.html&quot;&gt; &lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt; &lt;/a&gt;. Once used, this module automatically imports all functions defined here as well as the functions in &lt;a href=&quot;../plug/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="928e41186999d3139d58cfc43b78034f0801d11f" translate="yes" xml:space="preserve">
          <source>You may also retrieve only the request path by passing an empty map of params.</source>
          <target state="translated">You may also retrieve only the request path by passing an empty map of params.</target>
        </trans-unit>
        <trans-unit id="3813545db047903b80327da2dec1b4d7c0634f33" translate="yes" xml:space="preserve">
          <source>You may also return &lt;code&gt;{:error, keyword()}&lt;/code&gt; to customize the changeset error message and its metadata. Passing a &lt;code&gt;:message&lt;/code&gt; key, will override the default message. It is not possible to override the &lt;code&gt;:type&lt;/code&gt; key.</source>
          <target state="translated">You may also return &lt;code&gt;{:error, keyword()}&lt;/code&gt; to customize the changeset error message and its metadata. Passing a &lt;code&gt;:message&lt;/code&gt; key, will override the default message. It is not possible to override the &lt;code&gt;:type&lt;/code&gt; key.</target>
        </trans-unit>
        <trans-unit id="6d2dd0be9f1372fc1b207ee7172e42f3c2410f38" translate="yes" xml:space="preserve">
          <source>You may also set the prefix for the whole query by setting the prefix field:</source>
          <target state="translated">접두사 필드를 설정하여 전체 쿼리의 접두사를 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9718f36b6ec02b60c772fff54c911cdadfd0ce9" translate="yes" xml:space="preserve">
          <source>You may also take advantage of LiveView's CSS loading state classes to swap out your form content while the form is submitting. For example, with the following rules in your &lt;code&gt;app.css&lt;/code&gt;:</source>
          <target state="translated">LiveView의 CSS 로딩 상태 클래스를 활용하여 양식을 제출하는 동안 양식 콘텐츠를 교체 할 수도 있습니다. 예를 들어 &lt;code&gt;app.css&lt;/code&gt; 에서 다음 규칙을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="5f6c4e16640dbad78fc2081cebdce10d2196d79a" translate="yes" xml:space="preserve">
          <source>You may disable this plug by doing &lt;code&gt;Plug.Conn.put_private(conn, :plug_skip_csrf_protection, true)&lt;/code&gt;. This was made available for disabling &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; in tests and not for dynamically skipping &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; in production code. If you want specific routes to skip &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt;, then use a different stack of plugs for that route that does not include &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">You may disable this plug by doing &lt;code&gt;Plug.Conn.put_private(conn, :plug_skip_csrf_protection, true)&lt;/code&gt; . This was made available for disabling &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; in tests and not for dynamically skipping &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; in production code. If you want specific routes to skip &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt;, then use a different stack of plugs for that route that does not include &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a7c794eb00cacf60dcd29fa47bd18c2a0a13f9da" translate="yes" xml:space="preserve">
          <source>You may disable this plug by doing &lt;code&gt;Plug.Conn.put_private(conn, :plug_skip_csrf_protection, true)&lt;/code&gt;. This was made available for disabling &lt;a href=&quot;plug.csrfprotection#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; in tests and not for dynamically skipping &lt;a href=&quot;plug.csrfprotection#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; in production code. If you want specific routes to skip &lt;a href=&quot;plug.csrfprotection#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt;, then use a different stack of plugs for that route that does not include &lt;a href=&quot;plug.csrfprotection#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Plug.Conn.put_private(conn, :plug_skip_csrf_protection, true)&lt;/code&gt; 를 수행 하여이 플러그를 비활성화 할 수 있습니다 . 이는 테스트에서 &lt;a href=&quot;plug.csrfprotection#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; 을 비활성화 하고 프로덕션 코드에서 &lt;a href=&quot;plug.csrfprotection#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; 을 동적으로 건너 뛰기 위해 사용할 수 없게 되었습니다 . 특정 경로 건너 뛰려면 &lt;a href=&quot;plug.csrfprotection#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; 을&lt;/a&gt; , 다음은 포함되지 않는 경로에 대한 플러그의 다른 스택을 사용 &lt;a href=&quot;plug.csrfprotection#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="64842524b210f9d131b2fd5bbe3c2c000568b858" translate="yes" xml:space="preserve">
          <source>You may even provide your own &lt;code&gt;localized_datetime_select/3&lt;/code&gt; built on top of &lt;a href=&quot;#datetime_select/3&quot;&gt;&lt;code&gt;datetime_select/3&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#datetime_select/3&quot;&gt; &lt;code&gt;datetime_select/3&lt;/code&gt; &lt;/a&gt; 위에 자체 &lt;code&gt;localized_datetime_select/3&lt;/code&gt; 을 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f326f61aaeb020694b49b2771bdad042197b8d98" translate="yes" xml:space="preserve">
          <source>You may pass a &lt;code&gt;:style&lt;/code&gt; option to customize the look of the HTML page.</source>
          <target state="translated">&lt;code&gt;:style&lt;/code&gt; 옵션을 전달 하여 HTML 페이지의 모양을 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0546e82ad99c5894c4351b783d49ee279b99bffe" translate="yes" xml:space="preserve">
          <source>You may pass an MFA (&lt;code&gt;{module, function, args}&lt;/code&gt;) to be invoked when an error is rendered which provides a custom banner at the top of the debugger page. The function receives the following arguments, with the passed &lt;code&gt;args&lt;/code&gt; concatenated at the end:</source>
          <target state="translated">You may pass an MFA ( &lt;code&gt;{module, function, args}&lt;/code&gt; ) to be invoked when an error is rendered which provides a custom banner at the top of the debugger page. The function receives the following arguments, with the passed &lt;code&gt;args&lt;/code&gt; concatenated at the end:</target>
        </trans-unit>
        <trans-unit id="43d95467f036be62b92ee1e17241d4ff7bc8973d" translate="yes" xml:space="preserve">
          <source>You may pass an MFA (&lt;code&gt;{module, function, args}&lt;/code&gt;) to be invoked when an error is rendered which provides a custom banner at the top of the debugger page. The function receives the following arguments, with the passed &lt;code&gt;args&lt;/code&gt; concentated at the end:</source>
          <target state="translated">디버거 페이지 상단에 사용자 정의 배너를 제공하는 오류가 렌더링 될 때 호출 될 MFA ( &lt;code&gt;{module, function, args}&lt;/code&gt; )를 전달할 수 있습니다 . 이 함수는 전달 된 &lt;code&gt;args&lt;/code&gt; 와 함께 다음 인수를받습니다. 가 끝에 집중되어있는 .</target>
        </trans-unit>
        <trans-unit id="0d64cb8dfcfd0fa2f7875a53095d24dc7042c982" translate="yes" xml:space="preserve">
          <source>You may prefer to use a join schema to handle many_to_many associations. The decoupled nature of Ecto allows us to create a &quot;join&quot; struct which &lt;code&gt;belongs_to&lt;/code&gt; both sides of the many to many association.</source>
          <target state="translated">You may prefer to use a join schema to handle many_to_many associations. The decoupled nature of Ecto allows us to create a &quot;join&quot; struct which &lt;code&gt;belongs_to&lt;/code&gt; both sides of the many to many association.</target>
        </trans-unit>
        <trans-unit id="b7e29826930950bf133bf5271e8971836dd00048" translate="yes" xml:space="preserve">
          <source>You may prefer to use a join schema to handle many_to_many associations. The decoupled nature of Ecto allows us to create a &amp;ldquo;join&amp;rdquo; struct which &lt;code&gt;belongs_to&lt;/code&gt; both sides of the many to many association.</source>
          <target state="translated">many_to_many 연관을 처리하기 위해 결합 스키마를 사용하는 것이 좋습니다. 체외의 분리 특성은 우리가이 구조체 &quot;가입&quot;을 만들 수 있습니다 &lt;code&gt;belongs_to&lt;/code&gt; 많은 관계로 많은 사람들의 양면을.</target>
        </trans-unit>
        <trans-unit id="a96614166d03284c0aa8f7d730a6c0dc923064df" translate="yes" xml:space="preserve">
          <source>You may want to use the dispatcher to perform special delivery for certain subscriptions. This can be done by passing the :metadata option during subscriptions. For instance, Phoenix Channels use a custom &lt;code&gt;value&lt;/code&gt; to provide &quot;fastlaning&quot;, allowing messages broadcast to thousands or even millions of users to be encoded once and written directly to sockets instead of being encoded per channel.</source>
          <target state="translated">You may want to use the dispatcher to perform special delivery for certain subscriptions. This can be done by passing the :metadata option during subscriptions. For instance, Phoenix Channels use a custom &lt;code&gt;value&lt;/code&gt; to provide &quot;fastlaning&quot;, allowing messages broadcast to thousands or even millions of users to be encoded once and written directly to sockets instead of being encoded per channel.</target>
        </trans-unit>
        <trans-unit id="84f5b7aece79fa9ac9b3ed9fec631b94ff8200fd" translate="yes" xml:space="preserve">
          <source>You might want to periodically measure key values within your application. Fortunately the &lt;a href=&quot;http://hexdocs.pm/telemetry_poller&quot;&gt;&lt;code&gt;:telemetry_poller&lt;/code&gt;&lt;/a&gt; package provides a mechanism for custom measurements, which is useful for retrieving process information or for performing custom measurements periodically.</source>
          <target state="translated">애플리케이션 내에서 주기적으로 키 값을 측정 할 수 있습니다. 다행스럽게도 &lt;a href=&quot;http://hexdocs.pm/telemetry_poller&quot;&gt; &lt;code&gt;:telemetry_poller&lt;/code&gt; &lt;/a&gt; 패키지는 사용자 지정 측정을위한 메커니즘을 제공하는데, 이는 공정 정보를 검색하거나 주기적으로 사용자 지정 측정을 수행하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2647eecc235c6f3181a6eea79b025bf5b5483f96" translate="yes" xml:space="preserve">
          <source>You must declare your &lt;a href=&quot;#embeds_one/3&quot;&gt;&lt;code&gt;embeds_one/3&lt;/code&gt;&lt;/a&gt; field with type &lt;code&gt;:map&lt;/code&gt; at the database level.</source>
          <target state="translated">데이터베이스 레벨에서 &lt;code&gt;:map&lt;/code&gt; 유형으로 &lt;a href=&quot;#embeds_one/3&quot;&gt; &lt;code&gt;embeds_one/3&lt;/code&gt; &lt;/a&gt; 필드를 선언해야합니다 .</target>
        </trans-unit>
        <trans-unit id="72cc22c4f84234fe8244f2b16ffd8bdae8ca0c87" translate="yes" xml:space="preserve">
          <source>You should also avoid using components to provide abstract DOM components. As a guideline, a good LiveComponent encapsulates application concerns and not DOM functionality. For example, if you have a page that shows products for sale, you can encapsulate the rendering of each of those products in a component. This component may have many buttons and events within it. On the opposite side, do not write a component that is simply encapsulating generic DOM components. For instance, do not do this:</source>
          <target state="translated">또한 추상 DOM 구성 요소를 제공하기 위해 구성 요소를 사용하지 않아야합니다. 지침으로, 좋은 LiveComponent는 DOM 기능이 아닌 애플리케이션 문제를 캡슐화합니다. 예를 들어 판매용 제품을 보여주는 페이지가있는 경우 이러한 각 제품의 렌더링을 구성 요소에 캡슐화 할 수 있습니다. 이 구성 요소에는 많은 버튼과 이벤트가있을 수 있습니다. 반대쪽에서는 단순히 일반 DOM 구성 요소를 캡슐화하는 구성 요소를 작성하지 마십시오. 예를 들어 다음과 같이하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="cdd8de28b3447fc9e2e94b33ae0a2a4e32b81fe1" translate="yes" xml:space="preserve">
          <source>You should be very careful when allowing user sent data to be used as part of LIKE query, since they allow to perform &lt;a href=&quot;https://githubengineering.com/like-injection/&quot;&gt;LIKE-injections&lt;/a&gt;.</source>
          <target state="translated">사용자가 보낸 데이터를 LIKE 쿼리의 일부로 사용하도록 허용 할 때는 &lt;a href=&quot;https://githubengineering.com/like-injection/&quot;&gt;LIKE 주입&lt;/a&gt; 을 수행 할 수 있으므로 매우주의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="11d191d96ab358b7c7ecc31ba74eee3340ba33df" translate="yes" xml:space="preserve">
          <source>You should use &lt;code&gt;belongs_to&lt;/code&gt; in the table that contains the foreign key. Imagine a company &amp;lt;-&amp;gt; employee relationship. If the employee contains the &lt;code&gt;company_id&lt;/code&gt; in the underlying database table, we say the employee belongs to company.</source>
          <target state="translated">외래 키가 포함 된 테이블에서 &lt;code&gt;belongs_to&lt;/code&gt; 를 사용해야합니다 . 회사 &amp;lt;-&amp;gt; 직원 관계를 상상해보십시오. 직원 이 기본 데이터베이스 테이블에 &lt;code&gt;company_id&lt;/code&gt; 를 포함 하면 직원이 회사에 속한다고 말합니다.</target>
        </trans-unit>
        <trans-unit id="bc6327d96d8cdd6b767fc809b19c031183107681" translate="yes" xml:space="preserve">
          <source>You start Phoenix.PubSub directly in your supervision tree:</source>
          <target state="translated">You start Phoenix.PubSub directly in your supervision tree:</target>
        </trans-unit>
        <trans-unit id="0643c3816597e151325010394c9710994c708e2f" translate="yes" xml:space="preserve">
          <source>You usually want to set the same ID and assigns your &lt;code&gt;UserSocket.connect/2&lt;/code&gt; callback would set. Alternatively, you can use the &lt;a href=&quot;#connect/2&quot;&gt;&lt;code&gt;connect/2&lt;/code&gt;&lt;/a&gt; helper to call your &lt;code&gt;UserSocket.connect/2&lt;/code&gt; callback and initialize the socket with the socket id:</source>
          <target state="translated">일반적으로 동일한 ID를 설정하고 &lt;code&gt;UserSocket.connect/2&lt;/code&gt; 콜백이 설정 하도록 지정합니다 . 또는 &lt;a href=&quot;#connect/2&quot;&gt; &lt;code&gt;connect/2&lt;/code&gt; &lt;/a&gt; 헬퍼를 사용하여 &lt;code&gt;UserSocket.connect/2&lt;/code&gt; 콜백을 호출하고 소켓 ID로 소켓을 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d1a8519672a8bcaf1969c9a5999402b48211259" translate="yes" xml:space="preserve">
          <source>You usually want to set the same ID and assigns your &lt;code&gt;UserSocket.connect/3&lt;/code&gt; callback would set. Alternatively, you can use the &lt;a href=&quot;#connect/3&quot;&gt;&lt;code&gt;connect/3&lt;/code&gt;&lt;/a&gt; helper to call your &lt;code&gt;UserSocket.connect/3&lt;/code&gt; callback and initialize the socket with the socket id:</source>
          <target state="translated">You usually want to set the same ID and assigns your &lt;code&gt;UserSocket.connect/3&lt;/code&gt; callback would set. Alternatively, you can use the &lt;a href=&quot;#connect/3&quot;&gt; &lt;code&gt;connect/3&lt;/code&gt; &lt;/a&gt; helper to call your &lt;code&gt;UserSocket.connect/3&lt;/code&gt; callback and initialize the socket with the socket id:</target>
        </trans-unit>
        <trans-unit id="2ccadc5006f9ee9c3637c6968d3f4c4ce809e0fe" translate="yes" xml:space="preserve">
          <source>You will implement MyApp.MyServer in the &lt;a href=&quot;#custom-events&quot;&gt;Custom Events&lt;/a&gt; section.</source>
          <target state="translated">&lt;a href=&quot;#custom-events&quot;&gt;Custom Events&lt;/a&gt; 섹션 에서 MyApp.MyServer를 구현 합니다.</target>
        </trans-unit>
        <trans-unit id="c0e7164f0080106093305020c9451b765a4760c7" translate="yes" xml:space="preserve">
          <source>You will need the following rules:</source>
          <target state="translated">다음 규칙이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5f4cf7df8d40319527584c945a3d8042911b475f" translate="yes" xml:space="preserve">
          <source>Your schemas can be generated and added to a separate OTP app. Make sure your configuration is properly setup or manually specify the context app with the &lt;code&gt;--context-app&lt;/code&gt; option with the CLI.</source>
          <target state="translated">Your schemas can be generated and added to a separate OTP app. Make sure your configuration is properly setup or manually specify the context app with the &lt;code&gt;--context-app&lt;/code&gt; option with the CLI.</target>
        </trans-unit>
        <trans-unit id="0fb8f9ba32cc550ef8f33778f6ec714d1bc62b2d" translate="yes" xml:space="preserve">
          <source>[Discover Elixir &amp;amp; Phoenix (by Tristan Edwards</source>
          <target state="translated">[엘릭서와 피닉스 발견 (트리스탄 에드워즈 제작)</target>
        </trans-unit>
        <trans-unit id="4ff447b8ef42ca51fa6fb287bed8d40f49be58f1" translate="yes" xml:space="preserve">
          <source>]</source>
          <target state="translated">]</target>
        </trans-unit>
        <trans-unit id="cf652c006aed9a73ae27a29569d29928a5f33565" translate="yes" xml:space="preserve">
          <source>] With arbitrary keywords: socket &quot;/socket&quot;, AppWeb.UserSocket, websocket: [</source>
          <target state="translated">] With arbitrary keywords: socket &quot;/socket&quot;, AppWeb.UserSocket, websocket: [</target>
        </trans-unit>
        <trans-unit id="ab456bf50977d5229da3377c630a79af1fa98104" translate="yes" xml:space="preserve">
          <source>__adapter__()</source>
          <target state="translated">__adapter__()</target>
        </trans-unit>
        <trans-unit id="b166b5fe92d96cacfd63b12cc42ab06e605fd8b7" translate="yes" xml:space="preserve">
          <source>__before_compile__(env)</source>
          <target state="translated">__before_compile__(env)</target>
        </trans-unit>
        <trans-unit id="e5e9da5aa915d6c06b17d55a178e4e9982370749" translate="yes" xml:space="preserve">
          <source>__using__(opts)</source>
          <target state="translated">__using__(opts)</target>
        </trans-unit>
        <trans-unit id="be1901ff72f9332cdcf97447e3a7416fd151951d" translate="yes" xml:space="preserve">
          <source>__using__(opts)(macro)</source>
          <target state="translated">__using__(opts)(macro)</target>
        </trans-unit>
        <trans-unit id="bd509f0356480e480487e02a38f8b46bcc6be108" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; struct - this macro will look for the endpoint module in the &lt;code&gt;:private&lt;/code&gt; field of the connection; if it&amp;rsquo;s not there, &lt;code&gt;fun&lt;/code&gt; will be executed with no instrumentation</source>
          <target state="translated">&lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; 의&lt;/a&gt; 구조체 -이 매크로가있는 엔드 포인트 모듈을 찾습니다 &lt;code&gt;:private&lt;/code&gt; 연결 필드; 그것이 없으면 계측없이 &lt;code&gt;fun&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="2cfc27fab132f288c3ad2cd742aca8eb559f5997" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;phoenix.liveview.component&quot;&gt;&lt;code&gt;Phoenix.LiveView.Component&lt;/code&gt;&lt;/a&gt; struct, see &quot;Component&quot; below</source>
          <target state="translated">&lt;a href=&quot;phoenix.liveview.component&quot;&gt; &lt;code&gt;Phoenix.LiveView.Component&lt;/code&gt; 의&lt;/a&gt; 구조체, 이하 &quot;구성 요소&quot;를 참조하십시오</target>
        </trans-unit>
        <trans-unit id="acccc8a0c93cafc8036a8a8c5be47ac1d4851b2d" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;phoenix.liveview.comprehension&quot;&gt;&lt;code&gt;Phoenix.LiveView.Comprehension&lt;/code&gt;&lt;/a&gt; struct, see &quot;Comprehensions&quot; below</source>
          <target state="translated">&lt;a href=&quot;phoenix.liveview.comprehension&quot;&gt; &lt;code&gt;Phoenix.LiveView.Comprehension&lt;/code&gt; 의&lt;/a&gt; 구조체는, 아래의 &quot;함축&quot;을 참조하십시오</target>
        </trans-unit>
        <trans-unit id="3dee107511ca8448b09764e51b3085e7c1e44ef3" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;phoenix.socket&quot;&gt;&lt;code&gt;Phoenix.Socket&lt;/code&gt;&lt;/a&gt; struct - this macro will look for the endpoint module in the &lt;code&gt;:endpoint&lt;/code&gt; field of the socket; if it&amp;rsquo;s not there, &lt;code&gt;fun&lt;/code&gt; will be executed with no instrumentation</source>
          <target state="translated">&lt;a href=&quot;phoenix.socket&quot;&gt; &lt;code&gt;Phoenix.Socket&lt;/code&gt; 의&lt;/a&gt; 구조체 -이 매크로가있는 엔드 포인트 모듈을 찾습니다 &lt;code&gt;:endpoint&lt;/code&gt; 소켓의 필드; 그것이 없으면 계측없이 &lt;code&gt;fun&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="8c81529609e3b66c196c147f92066d502cd474d6" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;call/2&lt;/code&gt; function with the signature defined above</source>
          <target state="translated">&lt;code&gt;call/2&lt;/code&gt; 위 정의 된 서명 함수</target>
        </trans-unit>
        <trans-unit id="cdde456ddaee340c76ad7ef3c390b305cd641ffd" translate="yes" xml:space="preserve">
          <source>a LiveComponent in &lt;code&gt;lib/app_web/live/modal_component.ex&lt;/code&gt;</source>
          <target state="translated">LiveComponent에서 &lt;code&gt;lib/app_web/live/modal_component.ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6018a3aa8f6a74a1ca4796d3ea0880810387e04e" translate="yes" xml:space="preserve">
          <source>a LiveComponent in &lt;code&gt;lib/app_web/live/user_live/form_component.ex&lt;/code&gt;</source>
          <target state="translated">LiveComponent에서 &lt;code&gt;lib/app_web/live/user_live/form_component.ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23873ee73b30fa9d06e7ff3ab5e59588e7c4e5d4" translate="yes" xml:space="preserve">
          <source>a LiveView in &lt;code&gt;lib/app_web/live/user_live/index_live.ex&lt;/code&gt;</source>
          <target state="translated">라이브 뷰에서 &lt;code&gt;lib/app_web/live/user_live/index_live.ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9d0bcd23077ec3a4b1990d8f7bf54f10752c32d" translate="yes" xml:space="preserve">
          <source>a LiveView in &lt;code&gt;lib/app_web/live/user_live/show_live.ex&lt;/code&gt;</source>
          <target state="translated">라이브 뷰에서 &lt;code&gt;lib/app_web/live/user_live/show_live.ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd6f340a97219910aa5917a666d9ac9673e39aa8" translate="yes" xml:space="preserve">
          <source>a binary - containing a request body. For such cases, &lt;code&gt;:headers&lt;/code&gt; must be given as option with a content-type</source>
          <target state="translated">바이너리-요청 본문을 포함합니다. 이러한 경우 &lt;code&gt;:headers&lt;/code&gt; 는 컨텐츠 유형의 옵션으로 제공되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="a6f9ade01c1bb5012b4ffa0f86a3730c28a7b0ba" translate="yes" xml:space="preserve">
          <source>a binary - containing a request body. For such cases, &lt;code&gt;:headers&lt;/code&gt; must be given as option with a content-type;</source>
          <target state="translated">바이너리-요청 본문을 포함합니다. 이러한 경우 &lt;code&gt;:headers&lt;/code&gt; 는 content-type과 함께 옵션으로 제공되어야합니다.</target>
        </trans-unit>
        <trans-unit id="6935c66c2809b25dcd5b65367e7dce2c04719019" translate="yes" xml:space="preserve">
          <source>a cache manifest file</source>
          <target state="translated">캐시 매니페스트 파일</target>
        </trans-unit>
        <trans-unit id="8be88162b67c76ff38d50cfa55994c0d8c642bc0" translate="yes" xml:space="preserve">
          <source>a channel in &lt;code&gt;apps/my_app_web/lib/app_name_web/channels&lt;/code&gt;</source>
          <target state="translated">a channel in &lt;code&gt;apps/my_app_web/lib/app_name_web/channels&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8aa04de8c8cd73411031f2f7460c6eea3e8e0c79" translate="yes" xml:space="preserve">
          <source>a channel in &lt;code&gt;lib/my_app_web/channels&lt;/code&gt;</source>
          <target state="translated">a channel in &lt;code&gt;lib/my_app_web/channels&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="928e716a0edc8842ba6835f636e950f403226980" translate="yes" xml:space="preserve">
          <source>a channel in apps/my_app_web/lib/app_name_web/channels</source>
          <target state="translated">apps / my_app_web / lib / app_name_web / channels의 채널</target>
        </trans-unit>
        <trans-unit id="65b9c6446f1c69ceb0dcff1b6702e5be2f6f55f6" translate="yes" xml:space="preserve">
          <source>a channel in lib/my_app_web/channels</source>
          <target state="translated">lib / my_app_web / channels의 채널</target>
        </trans-unit>
        <trans-unit id="a16017b17faa47e8516b346f212d5cd504555b78" translate="yes" xml:space="preserve">
          <source>a channel in web/channels</source>
          <target state="translated">웹 / 채널의 채널</target>
        </trans-unit>
        <trans-unit id="301f7e2c7fb348fb3985e7023417483ecbc1ce0a" translate="yes" xml:space="preserve">
          <source>a channel test in &lt;code&gt;apps/my_app_web/test/my_app_web/channels&lt;/code&gt;</source>
          <target state="translated">a channel test in &lt;code&gt;apps/my_app_web/test/my_app_web/channels&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5664ccf43bfdf35979cb29ef60b932684a8831e0" translate="yes" xml:space="preserve">
          <source>a channel test in &lt;code&gt;test/my_app_web/channels&lt;/code&gt;</source>
          <target state="translated">a channel test in &lt;code&gt;test/my_app_web/channels&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b22582e4621838c84a8fd1a4dc980a9108829bcf" translate="yes" xml:space="preserve">
          <source>a channel_test in apps/my_app_web/test/my_app_web/channels</source>
          <target state="translated">apps / my_app_web / test / my_app_web / channels의 channel_test</target>
        </trans-unit>
        <trans-unit id="1ab0ebcb8cc78a108fbe2a778ed0baf6c160d2da" translate="yes" xml:space="preserve">
          <source>a channel_test in test/channels</source>
          <target state="translated">테스트 / 채널의 channel_test</target>
        </trans-unit>
        <trans-unit id="7ff7fbae923b89542e6b0c9092a3032eb796367c" translate="yes" xml:space="preserve">
          <source>a channel_test in test/my_app_web/channels</source>
          <target state="translated">test / my_app_web / channels의 channel_test</target>
        </trans-unit>
        <trans-unit id="321efa6666a7a92b16ac82ae0c63358f143284b4" translate="yes" xml:space="preserve">
          <source>a compressed file containing the file name and its digest</source>
          <target state="translated">파일명과 다이제스트를 포함한 압축 파일</target>
        </trans-unit>
        <trans-unit id="fd8090d613d3ad2b17d91e443950c69a8942c95c" translate="yes" xml:space="preserve">
          <source>a compressed file with gzip</source>
          <target state="translated">gzip으로 압축 된 파일</target>
        </trans-unit>
        <trans-unit id="9b35dfd4ed742e099a0a1a23986fdd113001d969" translate="yes" xml:space="preserve">
          <source>a context module in &lt;code&gt;accounts.ex&lt;/code&gt;, serving as the API boundary</source>
          <target state="translated">a context module in &lt;code&gt;accounts.ex&lt;/code&gt; , serving as the API boundary</target>
        </trans-unit>
        <trans-unit id="c9fded1081d2a7211db8345b41cf37b1660bf960" translate="yes" xml:space="preserve">
          <source>a context module in &lt;code&gt;lib/app/accounts.ex&lt;/code&gt; for the accounts API</source>
          <target state="translated">a context module in &lt;code&gt;lib/app/accounts.ex&lt;/code&gt; for the accounts API</target>
        </trans-unit>
        <trans-unit id="0a2ce08ba1fbce8b6c915a060323ae6fecfe2dd0" translate="yes" xml:space="preserve">
          <source>a context module in accounts/accounts.ex, serving as the API boundary</source>
          <target state="translated">API 경계 역할을하는 accounts / accounts.ex의 컨텍스트 모듈</target>
        </trans-unit>
        <trans-unit id="ee6ceea54886516b444f19271e9ca4171f547da0" translate="yes" xml:space="preserve">
          <source>a context module in lib/app/accounts/accounts.ex for the accounts API</source>
          <target state="translated">계정 API를위한 lib / app / accounts / accounts.ex의 컨텍스트 모듈</target>
        </trans-unit>
        <trans-unit id="73892685ac132662000463be1cb4ce3bf7b69135" translate="yes" xml:space="preserve">
          <source>a controller in &lt;code&gt;lib/app_web/controllers/user_controller.ex&lt;/code&gt;</source>
          <target state="translated">a controller in &lt;code&gt;lib/app_web/controllers/user_controller.ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d835f2b22ecaff5b77efb777b73d7ea142013ded" translate="yes" xml:space="preserve">
          <source>a controller in lib/app_web/controllers/user_controller.ex</source>
          <target state="translated">lib / app_web / controllers / user_controller.ex의 컨트롤러</target>
        </trans-unit>
        <trans-unit id="a8acf324a0bd8745f66efdef803fd0400ce3e41b" translate="yes" xml:space="preserve">
          <source>a controller in web/controllers</source>
          <target state="translated">웹 / 컨트롤러의 컨트롤러</target>
        </trans-unit>
        <trans-unit id="ed8032f7a497dea3570b58df4d257c45f39b51ad" translate="yes" xml:space="preserve">
          <source>a database - Phoenix recommends PostgreSQL but you can pick others or not use a database at all</source>
          <target state="translated">데이터베이스-Phoenix는 PostgreSQL을 권장하지만 다른 사용자를 선택하거나 데이터베이스를 전혀 사용하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1da35a6096d001c52d699fe79bfab604a07f6a88" translate="yes" xml:space="preserve">
          <source>a file containing the original file name and its digest</source>
          <target state="translated">원본 파일 이름과 다이제스트가 포함 된 파일</target>
        </trans-unit>
        <trans-unit id="85d1d62d371625d5bafff89e791ec46fcb85dec6" translate="yes" xml:space="preserve">
          <source>a helpers modules in &lt;code&gt;lib/app_web/live/live_helpers.ex&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;lib/app_web/live/live_helpers.ex&lt;/code&gt; 의 도우미 모듈</target>
        </trans-unit>
        <trans-unit id="714e6a3d24a646db2996fc2cda1df2fd88b232d7" translate="yes" xml:space="preserve">
          <source>a keyword list of update instructions - such as the one given to &lt;a href=&quot;#c:update_all/3&quot;&gt;&lt;code&gt;update_all/3&lt;/code&gt;&lt;/a&gt;, for example: &lt;code&gt;[set: [title: &quot;new title&quot;]]&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;#c:update_all/3&quot;&gt; &lt;code&gt;update_all/3&lt;/code&gt; 에&lt;/a&gt; 지정된 것과 같은 업데이트 지침의 키워드 목록 ( 예 : &lt;code&gt;[set: [title: &quot;new title&quot;]]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9ff2a536e3700c5245bfd912a098e98d33286e2" translate="yes" xml:space="preserve">
          <source>a map containing the &lt;code&gt;hour&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; keys and an optional &lt;code&gt;sec&lt;/code&gt; key (either as strings or atoms)</source>
          <target state="translated">&lt;code&gt;hour&lt;/code&gt; 및 &lt;code&gt;min&lt;/code&gt; 키와 선택적 &lt;code&gt;sec&lt;/code&gt; 키 (문자열 또는 원자)를 포함하는 맵</target>
        </trans-unit>
        <trans-unit id="0ac257355c556ac905b63b13c778018fe367c1e8" translate="yes" xml:space="preserve">
          <source>a map containing the &lt;code&gt;hour&lt;/code&gt; and &lt;code&gt;minute&lt;/code&gt; keys and an optional &lt;code&gt;second&lt;/code&gt; key (either as strings or atoms)</source>
          <target state="translated">a map containing the &lt;code&gt;hour&lt;/code&gt; and &lt;code&gt;minute&lt;/code&gt; keys and an optional &lt;code&gt;second&lt;/code&gt; key (either as strings or atoms)</target>
        </trans-unit>
        <trans-unit id="c99a5dc9ad0406e4e5c8e941950474973a984860" translate="yes" xml:space="preserve">
          <source>a map containing the &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt; keys (either as strings or atoms)</source>
          <target state="translated">포함하는지도 &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; 과 &lt;code&gt;day&lt;/code&gt; (문자열이나 원자로서 하나) 키를</target>
        </trans-unit>
        <trans-unit id="29cb500f56ffc3cd46595300d71868e3474decf8" translate="yes" xml:space="preserve">
          <source>a map or a keyword list representing changes to be applied to the associated data. A map or keyword list can be given to update the associated data as long as they have matching primary keys. For example, &lt;code&gt;put_assoc(changeset, :comments, [%{id: 1, title: &quot;changed&quot;}])&lt;/code&gt; will locate the comment with &lt;code&gt;:id&lt;/code&gt; of 1 and update its title. If no comment with such id exists, one is created on the fly. Since only a single comment was given, any other associated comment will be replaced. On all cases, it is expected the keys to be atoms. This API is mostly used in scripts and tests, to make it straight- forward to create schemas with associations at once, such as:</source>
          <target state="translated">관련 데이터에 적용될 변경 사항을 나타내는 맵 또는 키워드 목록 일치하는 기본 키가있는 한 연관된 ​​데이터를 업데이트하기 위해 맵 또는 키워드 목록을 제공 할 수 있습니다. 예를 들어 &lt;code&gt;put_assoc(changeset, :comments, [%{id: 1, title: &quot;changed&quot;}])&lt;/code&gt; 는 &lt;code&gt;:id&lt;/code&gt; 가 1 인 주석을 찾아 제목을 업데이트합니다. 이러한 ID를 가진 주석이 없으면 즉시 작성됩니다. 하나의 주석 만 제공되었으므로 다른 관련 주석이 대체됩니다. 모든 경우에, 열쇠는 원자 일 것으로 예상된다. 이 API는 주로 스크립트 및 테스트에 사용되어 다음과 같이 한 번에 연결로 스키마를 간단하게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d66fe7644b8e2a0c09c093750052f31425c00cb" translate="yes" xml:space="preserve">
          <source>a map or list - containing the parameters which will automatically set the content-type to multipart. The map or list may contain other lists or maps and all entries will be normalized to string keys</source>
          <target state="translated">맵 또는 목록-컨텐츠 유형을 multipart로 자동 설정하는 매개 변수를 포함합니다. 지도 나 목록에는 다른 목록이나지도가 포함될 수 있으며 모든 항목은 문자열 키로 정규화됩니다</target>
        </trans-unit>
        <trans-unit id="34721ba1c75610f14f068a2eb395ed47529b24f7" translate="yes" xml:space="preserve">
          <source>a map or list - containing the parameters which will automatically set the content-type to multipart. The map or list may contain other lists or maps and all entries will be normalized to string keys;</source>
          <target state="translated">맵 또는 목록-컨텐츠 유형을 multipart로 자동 설정하는 매개 변수를 포함합니다. 맵 또는 목록에는 다른 목록이나 맵이 포함될 수 있으며 모든 항목은 문자열 키로 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="6c7a57d54baf77837bebff147ddafe685c41bffa" translate="yes" xml:space="preserve">
          <source>a migration file for the repository</source>
          <target state="translated">저장소의 마이그레이션 파일</target>
        </trans-unit>
        <trans-unit id="d4941052e8c170a73921fda5fe6cca7aa156c753" translate="yes" xml:space="preserve">
          <source>a module name - the endpoint itself</source>
          <target state="translated">모듈 이름-엔드 포인트 자체</target>
        </trans-unit>
        <trans-unit id="6da77612dcd0c88225e1892ce094ef983da9236e" translate="yes" xml:space="preserve">
          <source>a query fragment, such as &lt;code&gt;c in fragment(&quot;SOME COMPLEX QUERY&quot;)&lt;/code&gt;, see &quot;Joining with fragments&quot; below.</source>
          <target state="translated">a query fragment, such as &lt;code&gt;c in fragment(&quot;SOME COMPLEX QUERY&quot;)&lt;/code&gt; , see &quot;Joining with fragments&quot; below.</target>
        </trans-unit>
        <trans-unit id="206750cdaf37ed8daab7ddd9baad1f95de9d9413" translate="yes" xml:space="preserve">
          <source>a query fragment, such as &lt;code&gt;c in fragment(&quot;SOME COMPLEX QUERY&quot;)&lt;/code&gt;, see &amp;ldquo;Joining with fragments&amp;rdquo; below.</source>
          <target state="translated">&lt;code&gt;c in fragment(&quot;SOME COMPLEX QUERY&quot;)&lt;/code&gt; 와 같은 쿼리 조각 은 아래의 &quot;조각과 조인&quot;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dd28b23ebb9d94a24ace61c6f53369278e516807" translate="yes" xml:space="preserve">
          <source>a schema file in &lt;code&gt;lib/my_app/blog/post.ex&lt;/code&gt;, with a &lt;code&gt;blog_posts&lt;/code&gt; table</source>
          <target state="translated">a schema file in &lt;code&gt;lib/my_app/blog/post.ex&lt;/code&gt; , with a &lt;code&gt;blog_posts&lt;/code&gt; table</target>
        </trans-unit>
        <trans-unit id="5f6474d7b3dc1e6dd5722f487ef752f82712d916" translate="yes" xml:space="preserve">
          <source>a schema file in lib/my_app/blog/post.ex, with a &lt;code&gt;blog_posts&lt;/code&gt; table.</source>
          <target state="translated">&lt;code&gt;blog_posts&lt;/code&gt; 테이블이 있는 lib / my_app / blog / post.ex의 스키마 파일</target>
        </trans-unit>
        <trans-unit id="ba289c610d623cce6a6d39070c572a47a76c57f0" translate="yes" xml:space="preserve">
          <source>a schema file in web/models</source>
          <target state="translated">웹 / 모델의 스키마 파일</target>
        </trans-unit>
        <trans-unit id="c1ae0f5adc6139d5a46d90e3775a20af4593edba" translate="yes" xml:space="preserve">
          <source>a schema in &lt;code&gt;accounts/user.ex&lt;/code&gt;, with a &lt;code&gt;users&lt;/code&gt; table</source>
          <target state="translated">a schema in &lt;code&gt;accounts/user.ex&lt;/code&gt; , with a &lt;code&gt;users&lt;/code&gt; table</target>
        </trans-unit>
        <trans-unit id="939c1822ddfddd6b1090670b4fcc4b7d511a1ed9" translate="yes" xml:space="preserve">
          <source>a schema in &lt;code&gt;lib/app/accounts/user.ex&lt;/code&gt;, with an &lt;code&gt;users&lt;/code&gt; table</source>
          <target state="translated">a schema in &lt;code&gt;lib/app/accounts/user.ex&lt;/code&gt; , with an &lt;code&gt;users&lt;/code&gt; table</target>
        </trans-unit>
        <trans-unit id="a2c913ddf1bc98c3e4338fc0fa50a4091bf47892" translate="yes" xml:space="preserve">
          <source>a schema in accounts/user.ex, with a &lt;code&gt;users&lt;/code&gt; table</source>
          <target state="translated">&lt;code&gt;users&lt;/code&gt; 테이블이 있는 accounts / user.ex의 스키마</target>
        </trans-unit>
        <trans-unit id="8a82793e7d081b8ab7fafc0ce6e92e2f198f3ee3" translate="yes" xml:space="preserve">
          <source>a schema in lib/app/accounts/user.ex, with an &lt;code&gt;users&lt;/code&gt; table</source>
          <target state="translated">&lt;code&gt;users&lt;/code&gt; 테이블이 있는 lib / app / accounts / user.ex의 스키마</target>
        </trans-unit>
        <trans-unit id="53ee49477c01bef93c1be09707aff20ad3c75807" translate="yes" xml:space="preserve">
          <source>a schema in web/models</source>
          <target state="translated">웹 / 모델의 스키마</target>
        </trans-unit>
        <trans-unit id="97784dcb8d7c121b59e6267def2ae154be54e575" translate="yes" xml:space="preserve">
          <source>a string in ISO 8601 format</source>
          <target state="translated">ISO 8601 형식의 문자열</target>
        </trans-unit>
        <trans-unit id="40c68d3055505176619ae47147e519598a125398" translate="yes" xml:space="preserve">
          <source>a string, representing the secret key base itself. A key base with at least 20 randomly generated characters should be used to provide adequate entropy</source>
          <target state="translated">a string, representing the secret key base itself. A key base with at least 20 randomly generated characters should be used to provide adequate entropy</target>
        </trans-unit>
        <trans-unit id="44e2b64eaa35edaa5c3ba02a85357c77b3920708" translate="yes" xml:space="preserve">
          <source>a string, representing the secret key base itself. A key base with at least 20 randomly generated characters should be used to provide adequate entropy.</source>
          <target state="translated">비밀 키베이스 자체를 나타내는 캐릭터 라인 적절한 엔트로피를 제공하려면 무작위로 생성 된 문자가 20 개 이상인 키베이스를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="8285a54e3e1c4cd929b77645a258bf32e8749dcc" translate="yes" xml:space="preserve">
          <source>a struct - unlike other maps, a struct will be passed through as-is without normalizing its entries</source>
          <target state="translated">구조체-다른 맵과 달리 구조체는 항목을 정규화하지 않고있는 그대로 그대로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="11125731b324ca963890db76d357443ad30b4955" translate="yes" xml:space="preserve">
          <source>a subquery, such as &lt;code&gt;c in subquery(another_query)&lt;/code&gt;</source>
          <target state="translated">하위 쿼리에서 &lt;code&gt;c in subquery(another_query)&lt;/code&gt; 와 같은 하위 쿼리 (another_query)</target>
        </trans-unit>
        <trans-unit id="9e2b1f7c1e9ce044e56a9b2f371ee2de9431a185" translate="yes" xml:space="preserve">
          <source>a tuple with four elements: &lt;code&gt;{hour, min, sec, usec}&lt;/code&gt;</source>
          <target state="translated">네 가지 요소가있는 튜플 : &lt;code&gt;{hour, min, sec, usec}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="20edd263f1642b1e300dd6c896e27a97f30996be" translate="yes" xml:space="preserve">
          <source>a tuple with three elements: &lt;code&gt;{hour, min, sec}&lt;/code&gt;</source>
          <target state="translated">세 가지 요소가있는 튜플 : &lt;code&gt;{hour, min, sec}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6126878fe33b45958583b79d92c8cfc8f89573f8" translate="yes" xml:space="preserve">
          <source>a tuple with three elements: &lt;code&gt;{year, month, day}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{year, month, day}&lt;/code&gt; 세 가지 요소가있는 튜플</target>
        </trans-unit>
        <trans-unit id="b819e69ab316bc5feb46d81459399c91c994064e" translate="yes" xml:space="preserve">
          <source>a view in &lt;code&gt;lib/app_web/views/user_view.ex&lt;/code&gt;</source>
          <target state="translated">a view in &lt;code&gt;lib/app_web/views/user_view.ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7afbd426d6ba3689fbb7129527fea8595ae302c" translate="yes" xml:space="preserve">
          <source>a view in lib/app_web/views/user_view.ex</source>
          <target state="translated">lib / app_web / views / user_view.ex의 뷰</target>
        </trans-unit>
        <trans-unit id="d0db868da44a087cf68fcd0bde79905093586657" translate="yes" xml:space="preserve">
          <source>a view in web/views</source>
          <target state="translated">웹 / 조회보기</target>
        </trans-unit>
        <trans-unit id="c449a6481c89759dcd148e91f1b97812cb9f986d" translate="yes" xml:space="preserve">
          <source>accepts(conn, accepted)</source>
          <target state="translated">수락 (conn, accept)</target>
        </trans-unit>
        <trans-unit id="6363fea0086da9170d047114a202ca664e662abb" translate="yes" xml:space="preserve">
          <source>action()</source>
          <target state="translated">action()</target>
        </trans-unit>
        <trans-unit id="cc9456dff6cb22e67e934597bb6a3539f3af2060" translate="yes" xml:space="preserve">
          <source>action_fallback(plug)</source>
          <target state="translated">action_fallback(plug)</target>
        </trans-unit>
        <trans-unit id="3bd5f4230109d2d249b2fc05100629186dc5523b" translate="yes" xml:space="preserve">
          <source>action_fallback(plug)(macro)</source>
          <target state="translated">action_fallback(plug)(macro)</target>
        </trans-unit>
        <trans-unit id="7461c5e34e17b1b3246293b693b975779d00ffb0" translate="yes" xml:space="preserve">
          <source>action_name(conn)</source>
          <target state="translated">action_name(conn)</target>
        </trans-unit>
        <trans-unit id="285022956c8393a484f83f71162793c74e7ae4a8" translate="yes" xml:space="preserve">
          <source>actions(exception)</source>
          <target state="translated">actions(exception)</target>
        </trans-unit>
        <trans-unit id="9c72c7027793d65b6a2a8f8dfb64d51b38c00561" translate="yes" xml:space="preserve">
          <source>actions_redirect_path(conn)</source>
          <target state="translated">actions_redirect_path(conn)</target>
        </trans-unit>
        <trans-unit id="111208f489b287fd0b163e2a21e5822970c8ba9d" translate="yes" xml:space="preserve">
          <source>adapter()</source>
          <target state="translated">adapter()</target>
        </trans-unit>
        <trans-unit id="386bb6334e0b8eec91555aed6eadbc08b3178ecd" translate="yes" xml:space="preserve">
          <source>adapter_load(adapter, type, value)</source>
          <target state="translated">adapter_load (어댑터, 타입, 값)</target>
        </trans-unit>
        <trans-unit id="aeab7044e24976cd220ac94b804f62c90f6a5152" translate="yes" xml:space="preserve">
          <source>adapter_meta()</source>
          <target state="translated">adapter_meta()</target>
        </trans-unit>
        <trans-unit id="ce554cc818f1634087bbaabd35080d7f288a956b" translate="yes" xml:space="preserve">
          <source>adapter_name()</source>
          <target state="translated">adapter_name()</target>
        </trans-unit>
        <trans-unit id="2f3b1c1e9fcddcabae0b5aed631f1885d947e03b" translate="yes" xml:space="preserve">
          <source>add_error(changeset, key, message, keys \\ [])</source>
          <target state="translated">add_error (변경, 키, 메시지, 키 \\ [])</target>
        </trans-unit>
        <trans-unit id="e52f00ee24edd570ce4f488d12cea7a8bce5d36b" translate="yes" xml:space="preserve">
          <source>aggregate(queryable, aggregate, field, opts)</source>
          <target state="translated">집계 (조회 가능, 집계, 필드, 옵트)</target>
        </trans-unit>
        <trans-unit id="b30b8bc08722d732d55cc6760a30e19d6af4fd2b" translate="yes" xml:space="preserve">
          <source>aggregate(queryable, aggregate, field, opts)(optional)</source>
          <target state="translated">집계 (조회 가능, 집계, 필드, 선택) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="ea82d4eaa7cb06824b3ba0220d653ac553597a68" translate="yes" xml:space="preserve">
          <source>aggregate(queryable, aggregate, opts)</source>
          <target state="translated">aggregate(queryable, aggregate, opts)</target>
        </trans-unit>
        <trans-unit id="2ea09c6c9bfca6c6e3e3b13f0c35e4825b368cf8" translate="yes" xml:space="preserve">
          <source>ago(count, interval)</source>
          <target state="translated">전 (개수, 간격)</target>
        </trans-unit>
        <trans-unit id="49810b5beade09fd0819bf949390da631ca1aab2" translate="yes" xml:space="preserve">
          <source>all(queryable, opts)</source>
          <target state="translated">모두 (조회 가능, 선택 가능)</target>
        </trans-unit>
        <trans-unit id="5b9770c61fa1b89871daee71296c63cce03d334d" translate="yes" xml:space="preserve">
          <source>all(queryable, opts)(optional)</source>
          <target state="translated">모두 (조회 가능, 선택) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="f8b8b76d769abb24fecf6423f256f919b48abe50" translate="yes" xml:space="preserve">
          <source>all(subquery)</source>
          <target state="translated">all(subquery)</target>
        </trans-unit>
        <trans-unit id="ee4825ee86c0ae9d99ecbf650349a4969c59d858" translate="yes" xml:space="preserve">
          <source>allow_jsonp(conn, opts \\ [])</source>
          <target state="translated">allow_jsonp (conn, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="3e7bafb7c72ca94704ad6339835f99ed3ad78d30" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt; that will act as an &lt;code&gt;UPDATE&lt;/code&gt; statement, such as the one given to &lt;a href=&quot;#c:update_all/3&quot;&gt;&lt;code&gt;update_all/3&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#c:update_all/3&quot;&gt; &lt;code&gt;update_all/3&lt;/code&gt; 에&lt;/a&gt; 지정된 것과 같은 &lt;code&gt;UPDATE&lt;/code&gt; 문 으로 작동 하는 &lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2df39461ae455b012c0c61a062a2013491a437b1" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt; that will act as an &lt;code&gt;UPDATE&lt;/code&gt; statement, such as the one given to &lt;a href=&quot;#c:update_all/3&quot;&gt;&lt;code&gt;update_all/3&lt;/code&gt;&lt;/a&gt;. If the struct cannot be found, &lt;a href=&quot;ecto.staleentryerror&quot;&gt;&lt;code&gt;Ecto.StaleEntryError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">an &lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; &lt;/a&gt; that will act as an &lt;code&gt;UPDATE&lt;/code&gt; statement, such as the one given to &lt;a href=&quot;#c:update_all/3&quot;&gt; &lt;code&gt;update_all/3&lt;/code&gt; &lt;/a&gt;. If the struct cannot be found, &lt;a href=&quot;ecto.staleentryerror&quot;&gt; &lt;code&gt;Ecto.StaleEntryError&lt;/code&gt; &lt;/a&gt; will be raised.</target>
        </trans-unit>
        <trans-unit id="99f00d620a2d8b36b7b647254af0f9b0e5f0e863" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;ecto.schema&quot;&gt;&lt;code&gt;Ecto.Schema&lt;/code&gt;&lt;/a&gt;, such as &lt;code&gt;p in Post&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;ecto.schema&quot;&gt; &lt;code&gt;Ecto.Schema&lt;/code&gt; &lt;/a&gt; 등, &lt;code&gt;p in Post&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8246573afd7fea089b6ff2e2b33111d7982c971d" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;init/1&lt;/code&gt; function which takes a set of options and initializes it.</source>
          <target state="translated">옵션 세트를 가져 와서 &lt;code&gt;init/1&lt;/code&gt; 하는 init / 1 함수</target>
        </trans-unit>
        <trans-unit id="9dc2e2ad7ef7859628b13cf99b7e514c5f58cbc7" translate="yes" xml:space="preserve">
          <source>an association, such as &lt;code&gt;c in assoc(post, :comments)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;c in assoc(post, :comments)&lt;/code&gt; 와 같은 연관</target>
        </trans-unit>
        <trans-unit id="ba89e36e27a4d0d0131d71cd83db6cf7af4428ec" translate="yes" xml:space="preserve">
          <source>an embedded schema file in &lt;code&gt;lib/my_app/blog/post.ex&lt;/code&gt;</source>
          <target state="translated">an embedded schema file in &lt;code&gt;lib/my_app/blog/post.ex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b38dbf371ed03eb6b95849627ae393ddeed2c81" translate="yes" xml:space="preserve">
          <source>an embedded schema file in lib/my_app/blog/post.ex.</source>
          <target state="translated">lib / my_app / blog / post.ex에 포함 된 스키마 파일</target>
        </trans-unit>
        <trans-unit id="5807b2bfe7e82a2089db99a5bb0e0be6ce7e1ebb" translate="yes" xml:space="preserve">
          <source>an interpolated Ecto query with zero or more where clauses, such as &lt;code&gt;c in ^(from &quot;posts&quot;, where: [public: true])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;c in ^(from &quot;posts&quot;, where: [public: true])&lt;/code&gt; 와 같이 0 개 이상의 where 절이있는 보간 된 Ecto 쿼리</target>
        </trans-unit>
        <trans-unit id="79a70d5e1810053a715976b393031b82e7731049" translate="yes" xml:space="preserve">
          <source>and add it to your application's supervisor tree (usually in &lt;code&gt;lib/my_app/application.ex&lt;/code&gt;), giving it a function to invoke when called:</source>
          <target state="translated">응용 프로그램의 감독자 트리 (일반적으로 &lt;code&gt;lib/my_app/application.ex&lt;/code&gt; 에 있음 )에 추가하여 호출시 호출 할 함수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7f3aeb082c87a7a9b9f8d9b0e0e3a15a7824beb7" translate="yes" xml:space="preserve">
          <source>and create your Telemetry supervisor at &lt;code&gt;lib/my_app_web/telemetry.ex&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;lib/my_app_web/telemetry.ex&lt;/code&gt; 에서 Telemetry 감독자를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e0126823a9bb4fea4bdb35aba85f5499a2db8427" translate="yes" xml:space="preserve">
          <source>and enable connecting to a LiveView socket in your &lt;code&gt;app.js&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;app.js&lt;/code&gt; 파일 에서 LiveView 소켓 연결을 활성화 합니다.</target>
        </trans-unit>
        <trans-unit id="a44c78764a15cf412e62da26c58f0c12cf345919" translate="yes" xml:space="preserve">
          <source>and other optional packages.</source>
          <target state="translated">및 기타 옵션 패키지.</target>
        </trans-unit>
        <trans-unit id="a357a0b3b6bb01e41a042b584904f6b12375f3f1" translate="yes" xml:space="preserve">
          <source>and then</source>
          <target state="translated">그리고</target>
        </trans-unit>
        <trans-unit id="478c17c32f1bc3336788616eaad90d7da7f5fbd4" translate="yes" xml:space="preserve">
          <source>and then:</source>
          <target state="translated">그리고:</target>
        </trans-unit>
        <trans-unit id="bbc037fe233f2668386b8dabdbbe18384553190f" translate="yes" xml:space="preserve">
          <source>and we run &lt;a href=&quot;mix.tasks.phx.routes&quot;&gt;&lt;code&gt;mix phx.routes&lt;/code&gt;&lt;/a&gt;, we get this output:</source>
          <target state="translated">&lt;a href=&quot;mix.tasks.phx.routes&quot;&gt; &lt;code&gt;mix phx.routes&lt;/code&gt; &lt;/a&gt; 를 실행 하면 다음과 같은 출력이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="2692210a8f9b531d36c5c51348a7f7abd095f2b1" translate="yes" xml:space="preserve">
          <source>and you should see something like the following output:</source>
          <target state="translated">다음과 같은 출력이 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="ec557dd59a8a49389e79d1589d59da18c4763768" translate="yes" xml:space="preserve">
          <source>another &lt;a href=&quot;phoenix.liveview.rendered&quot;&gt;&lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt;&lt;/a&gt; struct, see &quot;Nesting and fingerprinting&quot; below</source>
          <target state="translated">다른 &lt;a href=&quot;phoenix.liveview.rendered&quot;&gt; &lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt; &lt;/a&gt; 구조체, 아래의 &quot;중첩 및 핑거 프린팅&quot;참조</target>
        </trans-unit>
        <trans-unit id="3d3c20f9f151e16cbd64bcbe9659502b0fc801e4" translate="yes" xml:space="preserve">
          <source>ansi_color - the color that should be used when logging the entry.</source>
          <target state="translated">ansi_color-항목을 기록 할 때 사용해야하는 색상.</target>
        </trans-unit>
        <trans-unit id="4d6fe4df2468662a308dbe1d549352f15bdd66c9" translate="yes" xml:space="preserve">
          <source>any other term - in such cases, the exit will be logged and linked processes exit with the same reason unless they're trapping exits</source>
          <target state="translated">any other term - in such cases, the exit will be logged and linked processes exit with the same reason unless they're trapping exits</target>
        </trans-unit>
        <trans-unit id="b7f43e34aa14a5384edbb3df193a97bb3f40a7ad" translate="yes" xml:space="preserve">
          <source>any other term - in such cases, the exit will be logged, there are restarts in transient mode, and linked processes exit with the same reason unless they&amp;rsquo;re trapping exits</source>
          <target state="translated">다른 용어-이러한 경우 종료가 기록되고 임시 모드에서 다시 시작되며 링크 된 프로세스가 종료를 트래핑하지 않는 한 동일한 이유로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="2e351e78b9e405e3e525105aac55ebf2a73ad077" translate="yes" xml:space="preserve">
          <source>any(subquery)</source>
          <target state="translated">any(subquery)</target>
        </trans-unit>
        <trans-unit id="72f8d87b3b5f00b748c26f839d4eaf5f3386afbf" translate="yes" xml:space="preserve">
          <source>app-eb0a5b9302e8d32828d8a73f137cc8f0.js</source>
          <target state="translated">app-eb0a5b9302e8d32828d8a73f137cc8f0.js</target>
        </trans-unit>
        <trans-unit id="5da18e1bd198c4e4e1e9b5f8ae35d25afd683803" translate="yes" xml:space="preserve">
          <source>app-eb0a5b9302e8d32828d8a73f137cc8f0.js.gz</source>
          <target state="translated">app-eb0a5b9302e8d32828d8a73f137cc8f0.js.gz</target>
        </trans-unit>
        <trans-unit id="4a68969ef8e858229267b842dedf42ab5dde4d50" translate="yes" xml:space="preserve">
          <source>app.js</source>
          <target state="translated">app.js</target>
        </trans-unit>
        <trans-unit id="4a252ec45c803bef7e188784da22f8454091bf8b" translate="yes" xml:space="preserve">
          <source>app.js.gz</source>
          <target state="translated">app.js.gz</target>
        </trans-unit>
        <trans-unit id="c5df809c1f4c593f120327101539fe589b3db24d" translate="yes" xml:space="preserve">
          <source>append(lhs, rhs)</source>
          <target state="translated">추가 (lhs, rhs)</target>
        </trans-unit>
        <trans-unit id="bac07663a02caf374072bc099321bd58ae450d5b" translate="yes" xml:space="preserve">
          <source>apply_action!(changeset, action)</source>
          <target state="translated">apply_action!(changeset, action)</target>
        </trans-unit>
        <trans-unit id="9cd55c714afe4832a66e0f981aa92614a05acb3a" translate="yes" xml:space="preserve">
          <source>apply_action(changeset, action)</source>
          <target state="translated">apply_action (변경, 액션)</target>
        </trans-unit>
        <trans-unit id="fd49daeda6f54fdf54efafb3b162c42e744b6697" translate="yes" xml:space="preserve">
          <source>apply_changes(changeset)</source>
          <target state="translated">apply_changes(changeset)</target>
        </trans-unit>
        <trans-unit id="6a8592233e0340bb06d0d8edd99119d32d765678" translate="yes" xml:space="preserve">
          <source>as required by the &lt;a href=&quot;../plug/1.5.1/plug&quot;&gt;&lt;code&gt;Plug&lt;/code&gt;&lt;/a&gt; behaviour: &lt;a href=&quot;../plug/1.5.1/plug#c:init/1&quot;&gt;&lt;code&gt;Plug.init/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../plug/1.5.1/plug#c:call/2&quot;&gt;&lt;code&gt;Plug.call/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 의해 필요에 따라 &lt;a href=&quot;../plug/1.5.1/plug&quot;&gt; &lt;code&gt;Plug&lt;/code&gt; &lt;/a&gt; : 행동 &lt;a href=&quot;../plug/1.5.1/plug#c:init/1&quot;&gt; &lt;code&gt;Plug.init/1&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../plug/1.5.1/plug#c:call/2&quot;&gt; &lt;code&gt;Plug.call/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6aeee1c9a315a4779ce50ffa371fe08a5ce0b466" translate="yes" xml:space="preserve">
          <source>as required by the &lt;a href=&quot;../plug/plug&quot;&gt;&lt;code&gt;Plug&lt;/code&gt;&lt;/a&gt; behaviour: &lt;a href=&quot;../plug/plug#c:init/1&quot;&gt;&lt;code&gt;Plug.init/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../plug/plug#c:call/2&quot;&gt;&lt;code&gt;Plug.call/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">as required by the &lt;a href=&quot;../plug/plug&quot;&gt; &lt;code&gt;Plug&lt;/code&gt; &lt;/a&gt; behaviour: &lt;a href=&quot;../plug/plug#c:init/1&quot;&gt; &lt;code&gt;Plug.init/1&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../plug/plug#c:call/2&quot;&gt; &lt;code&gt;Plug.call/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ad5458b0d9d47aa9a84cb5d087e6944a1a0fc7c" translate="yes" xml:space="preserve">
          <source>as(binding)</source>
          <target state="translated">as(binding)</target>
        </trans-unit>
        <trans-unit id="40f4ce1739a740f655d6eee6a1c3aa4c3141ce10" translate="yes" xml:space="preserve">
          <source>assert_broadcast(event, payload, timeout \\ 100)</source>
          <target state="translated">assert_broadcast (이벤트, 페이로드, 타임 아웃 \\ 100)</target>
        </trans-unit>
        <trans-unit id="ab142586159e80ed28af7089a4e59d4976438862" translate="yes" xml:space="preserve">
          <source>assert_broadcast(event, payload, timeout \\ 100)(macro)</source>
          <target state="translated">assert_broadcast (이벤트, 페이로드, 타임 아웃 \\ 100) (매크로)</target>
        </trans-unit>
        <trans-unit id="d0813e8297b14413828de6906d7313a18ffdb1ee" translate="yes" xml:space="preserve">
          <source>assert_broadcast(event, payload, timeout \\ Application.fetch_env!(:ex_unit, :assert_receive_timeout))</source>
          <target state="translated">assert_broadcast(event, payload, timeout \\ Application.fetch_env!(:ex_unit, :assert_receive_timeout))</target>
        </trans-unit>
        <trans-unit id="faba1df4481783a2e8eef4bd2870200edf685dbc" translate="yes" xml:space="preserve">
          <source>assert_error_sent(status_int_or_atom, func)</source>
          <target state="translated">assert_error_sent (상태 _int_or_atom, 기능)</target>
        </trans-unit>
        <trans-unit id="806c294520636659fe739062f0e6091b5d4e7920" translate="yes" xml:space="preserve">
          <source>assert_patch(view, to, timeout \\ 100)</source>
          <target state="translated">assert_patch(view, to, timeout \\ 100)</target>
        </trans-unit>
        <trans-unit id="a35c465709c93878c98abd2b14fd8e69f877681f" translate="yes" xml:space="preserve">
          <source>assert_patched(view, to)</source>
          <target state="translated">assert_patched(view, to)</target>
        </trans-unit>
        <trans-unit id="6ce9b9b5c92688782bce551e6e86a32a00b4e4a5" translate="yes" xml:space="preserve">
          <source>assert_push(event, payload, timeout \\ 100)</source>
          <target state="translated">assert_push (이벤트, 페이로드, 타임 아웃 \\ 100)</target>
        </trans-unit>
        <trans-unit id="00c0108566e050ef9e0f55d8d0028d83da09bad8" translate="yes" xml:space="preserve">
          <source>assert_push(event, payload, timeout \\ 100)(macro)</source>
          <target state="translated">assert_push (이벤트, 페이로드, 타임 아웃 \\ 100) (매크로)</target>
        </trans-unit>
        <trans-unit id="8cc96adff5cd0c36b85a224f8d9c67de096b9786" translate="yes" xml:space="preserve">
          <source>assert_push(event, payload, timeout \\ Application.fetch_env!(:ex_unit, :assert_receive_timeout))</source>
          <target state="translated">assert_push(event, payload, timeout \\ Application.fetch_env!(:ex_unit, :assert_receive_timeout))</target>
        </trans-unit>
        <trans-unit id="356b00c5af20396e5cbce2844433e53300d59bfa" translate="yes" xml:space="preserve">
          <source>assert_push_event(view, event, payload, timeout \\ 100)</source>
          <target state="translated">assert_push_event (보기, 이벤트, 페이로드, 시간 초과 \\ 100)</target>
        </trans-unit>
        <trans-unit id="5df227fdf7aff8dcb74be57ee197b5aeb584a2fa" translate="yes" xml:space="preserve">
          <source>assert_redirect(view, to, timeout \\ 100)</source>
          <target state="translated">assert_redirect(view, to, timeout \\ 100)</target>
        </trans-unit>
        <trans-unit id="eb100c8c8a1cb87517dd1c31cd98cbb5c3cbd5d0" translate="yes" xml:space="preserve">
          <source>assert_redirected(view, to)</source>
          <target state="translated">assert_redirected(view, to)</target>
        </trans-unit>
        <trans-unit id="a734b5acf3d410314281ac312ccb9e6e3cdf59b3" translate="yes" xml:space="preserve">
          <source>assert_reply(ref, status, payload \\ Macro.escape(%{}), timeout \\ 100)</source>
          <target state="translated">assert_reply (참조, 상태, 페이로드 \\ Macro.escape (% {}), 시간 초과 \\ 100)</target>
        </trans-unit>
        <trans-unit id="e753f10bc326ddc1c7df9bd539bb3b39c4b2826a" translate="yes" xml:space="preserve">
          <source>assert_reply(ref, status, payload \\ Macro.escape(%{}), timeout \\ 100)(macro)</source>
          <target state="translated">assert_reply (ref, status, payload \\ Macro.escape (% {}), timeout \\ 100) (매크로)</target>
        </trans-unit>
        <trans-unit id="4a41cffde1cbad18b9cc8372af59ad7a86f7e799" translate="yes" xml:space="preserve">
          <source>assert_reply(ref, status, payload \\ Macro.escape(%{}), timeout \\ Application.fetch_env!(:ex_unit, :assert_receive_timeout))</source>
          <target state="translated">assert_reply(ref, status, payload \\ Macro.escape(%{}), timeout \\ Application.fetch_env!(:ex_unit, :assert_receive_timeout))</target>
        </trans-unit>
        <trans-unit id="664ac7a56750cbe7f7ad0176e0ec351e43e6a288" translate="yes" xml:space="preserve">
          <source>assert_reply(view, payload, timeout \\ 100)</source>
          <target state="translated">assert_reply (보기, 페이로드, 시간 초과 \\ 100)</target>
        </trans-unit>
        <trans-unit id="9d93875c74150e6ad87325e47e4bf71db848f22c" translate="yes" xml:space="preserve">
          <source>assign(conn, key, value)</source>
          <target state="translated">할당 (conn, key, value)</target>
        </trans-unit>
        <trans-unit id="dd714fdf280fd8a27eec86d1d0f4af6599960916" translate="yes" xml:space="preserve">
          <source>assign(socket, attrs)</source>
          <target state="translated">assign(socket, attrs)</target>
        </trans-unit>
        <trans-unit id="5501010ac48acea09788112db205c6dddd99fddd" translate="yes" xml:space="preserve">
          <source>assign(socket, key, value)</source>
          <target state="translated">할당 (소켓, 키, 값)</target>
        </trans-unit>
        <trans-unit id="702ab64147214736fcfcc9e869215ae0b4692f3f" translate="yes" xml:space="preserve">
          <source>assign_new(socket, key, func)</source>
          <target state="translated">assign_new (소켓, 키, 기능)</target>
        </trans-unit>
        <trans-unit id="dbf4620fef0397308af128c5cb7391fcffd62cea" translate="yes" xml:space="preserve">
          <source>assigns()</source>
          <target state="translated">assigns()</target>
        </trans-unit>
        <trans-unit id="665031891c57bafe9f22f1b7fa31a4e70a8d1baa" translate="yes" xml:space="preserve">
          <source>assoc(struct_or_structs, assocs)</source>
          <target state="translated">assoc (struct_or_structs, assocs)</target>
        </trans-unit>
        <trans-unit id="95a638ae39daf8d0f9c4a9ddde729acff28f3650" translate="yes" xml:space="preserve">
          <source>assoc_constraint(changeset, assoc, opts \\ [])</source>
          <target state="translated">assoc_constraint (changeset, assoc, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="4840c41f98e832dc1d932baa81ca03fd7ee93a8c" translate="yes" xml:space="preserve">
          <source>assoc_loaded?(list)</source>
          <target state="translated">assoc_loaded?(list)</target>
        </trans-unit>
        <trans-unit id="44b0364f6164d3acd10fd6ec2709fc482fbe0a73" translate="yes" xml:space="preserve">
          <source>assoc_query(refl, values)</source>
          <target state="translated">assoc_query(refl, values)</target>
        </trans-unit>
        <trans-unit id="73743860c5f762e208f950a45750dc18efb57aed" translate="yes" xml:space="preserve">
          <source>association(schema, cardinality, name, association, opts)</source>
          <target state="translated">연관성 (스키마, 카디널리티, 이름, 연관성, opts)</target>
        </trans-unit>
        <trans-unit id="f636fb883b29986ba4cbafc6457fb3882324c6b8" translate="yes" xml:space="preserve">
          <source>async_assign(conn, key, fun)</source>
          <target state="translated">async_assign (콘, 키, 재미)</target>
        </trans-unit>
        <trans-unit id="baf673eb64cbbe901a02d9b600ff61ff4423f8e6" translate="yes" xml:space="preserve">
          <source>atom, string or integer - which will be used as both label and value for the generated select</source>
          <target state="translated">원자, 문자열 또는 정수-생성 된 선택에 대한 레이블 및 값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="de21e801f1c48d931143c2a92bf5b3c461f447ad" translate="yes" xml:space="preserve">
          <source>autogenerate()</source>
          <target state="translated">autogenerate()</target>
        </trans-unit>
        <trans-unit id="0590db89656374ae5ec8a0882fb9aeef66cfd06b" translate="yes" xml:space="preserve">
          <source>autogenerate(field_type)</source>
          <target state="translated">autogenerate(field_type)</target>
        </trans-unit>
        <trans-unit id="71e02b40e64b11f6cee37d9f8113c71a6b62dd64" translate="yes" xml:space="preserve">
          <source>autogenerate(params)</source>
          <target state="translated">autogenerate(params)</target>
        </trans-unit>
        <trans-unit id="c4c6622f1ef126bf34f0bc8382985d4cbc3901c8" translate="yes" xml:space="preserve">
          <source>avg(value)</source>
          <target state="translated">avg(value)</target>
        </trans-unit>
        <trans-unit id="c1fc87170fed046842ac4b4b67b6d7af17c36f57" translate="yes" xml:space="preserve">
          <source>await_assign(conn, key, timeout \\ 5000)</source>
          <target state="translated">await_assign (콘, 키, 타임 아웃 \\ 5000)</target>
        </trans-unit>
        <trans-unit id="cb91ebda07f47f4781a7fda7394fb0eec5a6a42d" translate="yes" xml:space="preserve">
          <source>base()</source>
          <target state="translated">base()</target>
        </trans-unit>
        <trans-unit id="ddc1f37a666cbc6dd6246c2d702d0fbfc235853a" translate="yes" xml:space="preserve">
          <source>base?(atom)</source>
          <target state="translated">base?(atom)</target>
        </trans-unit>
        <trans-unit id="ae249f512eed4e087846d9a4dc9427f58a2f0999" translate="yes" xml:space="preserve">
          <source>basic_auth(conn, options \\ [])</source>
          <target state="translated">basic_auth (conn, 옵션 \\ [])</target>
        </trans-unit>
        <trans-unit id="79750d57ef332991806dad0fc182cf89030059d5" translate="yes" xml:space="preserve">
          <source>before_send()</source>
          <target state="translated">before_send()</target>
        </trans-unit>
        <trans-unit id="75cc608191cab3f5e92a78f9b4ca8560582275b5" translate="yes" xml:space="preserve">
          <source>belongs_to(name, queryable, opts \\ [])</source>
          <target state="translated">belongs_to (이름, 쿼리 가능, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="a304fc988d14591702044bebb8f9c944c79e5950" translate="yes" xml:space="preserve">
          <source>belongs_to(name, queryable, opts \\ [])(macro)</source>
          <target state="translated">belongs_to (이름, 쿼리 가능, opts \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="16544298fb5068f7cd9b5527ffbfcb756458e4a5" translate="yes" xml:space="preserve">
          <source>belongs_to(t)</source>
          <target state="translated">belongs_to(t)</target>
        </trans-unit>
        <trans-unit id="6e5119f7f7f1c02c1d83d9470d701ada07c1f704" translate="yes" xml:space="preserve">
          <source>binary_id</source>
          <target state="translated">binary_id</target>
        </trans-unit>
        <trans-unit id="d6ba9c89e9a97fb43a9f7de37d3efd5dc23c5f82" translate="yes" xml:space="preserve">
          <source>bingenerate()</source>
          <target state="translated">bingenerate()</target>
        </trans-unit>
        <trans-unit id="f74d39735314b066b0b97ed55d1b1412be905e74" translate="yes" xml:space="preserve">
          <source>blame(exception, stacktrace)</source>
          <target state="translated">blame(exception, stacktrace)</target>
        </trans-unit>
        <trans-unit id="75453e75a84ed7fb955577a4f8826dc89812816d" translate="yes" xml:space="preserve">
          <source>body()</source>
          <target state="translated">body()</target>
        </trans-unit>
        <trans-unit id="32372870e2fbc81963c7ee09f1cdf0f4fcf84f86" translate="yes" xml:space="preserve">
          <source>broadcast!(pubsub, topic, message, dispatcher \\ __MODULE__)</source>
          <target state="translated">broadcast!(pubsub, topic, message, dispatcher \\ __MODULE__)</target>
        </trans-unit>
        <trans-unit id="001f571d7340205b9b19f6dd4a4206e18a8eb8d3" translate="yes" xml:space="preserve">
          <source>broadcast!(server, topic, message)</source>
          <target state="translated">방송! (서버, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="75a9911678783984d95e7cb089e7848b087cf95e" translate="yes" xml:space="preserve">
          <source>broadcast!(socket, event, message)</source>
          <target state="translated">방송! (소켓, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="650172d52b465e3215346fb35e4843f5ee1ed58a" translate="yes" xml:space="preserve">
          <source>broadcast!(topic, event, msg)</source>
          <target state="translated">방송! (주제, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="c98fe6796e9ba79b03c9a516ca26b0fbb3e2f5a0" translate="yes" xml:space="preserve">
          <source>broadcast(adapter_name, arg2, arg3, arg4)</source>
          <target state="translated">브로드 캐스트 (adapter_name, arg2, arg3, arg4)</target>
        </trans-unit>
        <trans-unit id="3ed3ffad83c93f0822dc69469195fe07b5a485d0" translate="yes" xml:space="preserve">
          <source>broadcast(fastlane, pubsub_server, pool_size, from, topic, msg)</source>
          <target state="translated">브로드 캐스트 (fastlane, pubsub_server, pool_size, from, topic, msg)</target>
        </trans-unit>
        <trans-unit id="906ae5e6bacda9625d82aa4046b166d5da1fc3fd" translate="yes" xml:space="preserve">
          <source>broadcast(pubsub, topic, message, dispatcher \\ __MODULE__)</source>
          <target state="translated">broadcast(pubsub, topic, message, dispatcher \\ __MODULE__)</target>
        </trans-unit>
        <trans-unit id="2e56e3cda8c302d24efc9ee49338f7beb478d8e7" translate="yes" xml:space="preserve">
          <source>broadcast(server, topic, message)</source>
          <target state="translated">방송 (서버, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="b157d845c2b0601ac04776d11a50383390335b53" translate="yes" xml:space="preserve">
          <source>broadcast(socket, event, message)</source>
          <target state="translated">방송 (소켓, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="7e2eeea15a691d01b7194c7d4efa633bab489299" translate="yes" xml:space="preserve">
          <source>broadcast(topic, event, msg)</source>
          <target state="translated">방송 (주제, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="aa5212d5ef3c798f4967655e583b1a1bdc1d2c39" translate="yes" xml:space="preserve">
          <source>broadcast_from!(from, topic, event, msg)</source>
          <target state="translated">broadcast_from! (보낸 사람, 주제, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="8703614c0c7833c19db9c83856c1b7f2c942f013" translate="yes" xml:space="preserve">
          <source>broadcast_from!(pubsub, from, topic, message, dispatcher \\ __MODULE__)</source>
          <target state="translated">broadcast_from!(pubsub, from, topic, message, dispatcher \\ __MODULE__)</target>
        </trans-unit>
        <trans-unit id="ea724017a025dc1a2c76dbe5df2289f275bbc1b1" translate="yes" xml:space="preserve">
          <source>broadcast_from!(server, from_pid, topic, message)</source>
          <target state="translated">broadcast_from! (서버, from_pid, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="37391927c7e85418ba36267593537ab68a9946f6" translate="yes" xml:space="preserve">
          <source>broadcast_from!(socket, event, message)</source>
          <target state="translated">broadcast_from! (소켓, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="143834841370053035e8339c58c2c97f1b0b0e6e" translate="yes" xml:space="preserve">
          <source>broadcast_from(from, topic, event, msg)</source>
          <target state="translated">broadcast_from (보낸 사람, 주제, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="9095624cba32dcd3d4d5b6b7fa92645d3a0428fc" translate="yes" xml:space="preserve">
          <source>broadcast_from(pubsub, from, topic, message, dispatcher \\ __MODULE__)</source>
          <target state="translated">broadcast_from(pubsub, from, topic, message, dispatcher \\ __MODULE__)</target>
        </trans-unit>
        <trans-unit id="7f449e982a139cd84170327e4dd9dbfbfb2b8803" translate="yes" xml:space="preserve">
          <source>broadcast_from(server, from_pid, topic, message)</source>
          <target state="translated">broadcast_from (서버, from_pid, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="94386b91ad31de99c8ec3bb998008ce49e6d41ef" translate="yes" xml:space="preserve">
          <source>broadcast_from(socket, event, message)</source>
          <target state="translated">broadcast_from (소켓, 이벤트, 메시지)</target>
        </trans-unit>
        <trans-unit id="d64df15bd36586596aca681eee33bf0c5e8791de" translate="yes" xml:space="preserve">
          <source>build_assoc(struct, assoc, attributes \\ %{})</source>
          <target state="translated">build_assoc (struct, assoc, 속성 \\ % {})</target>
        </trans-unit>
        <trans-unit id="1b160366f1c16375c76fe9373cf8b7d846324c2f" translate="yes" xml:space="preserve">
          <source>build_conn()</source>
          <target state="translated">build_conn()</target>
        </trans-unit>
        <trans-unit id="199d02ac0f374b56ca9b8fe1d8ef09c37019d515" translate="yes" xml:space="preserve">
          <source>build_conn(method, path, params_or_body \\ nil)</source>
          <target state="translated">build_conn (방법, 경로, params_or_body \\ nil)</target>
        </trans-unit>
        <trans-unit id="45a6a9ad37067610a5a44ffbf89057d99b7f70b5" translate="yes" xml:space="preserve">
          <source>builder_opts()</source>
          <target state="translated">builder_opts()</target>
        </trans-unit>
        <trans-unit id="af98bcec0d86c4ebf0279d4a187ce52ca33b62f7" translate="yes" xml:space="preserve">
          <source>builder_opts()(macro)</source>
          <target state="translated">builder_opts()(macro)</target>
        </trans-unit>
        <trans-unit id="08e779435f280aa0aad298751f458ebb0c3cae4d" translate="yes" xml:space="preserve">
          <source>button(opts, opts)</source>
          <target state="translated">버튼 (선택, 선택)</target>
        </trans-unit>
        <trans-unit id="6e7dfac83d2a98ad50284d87261154c8fe6cd36e" translate="yes" xml:space="preserve">
          <source>bypass_through(conn)</source>
          <target state="translated">bypass_through(conn)</target>
        </trans-unit>
        <trans-unit id="5b98c4f16c8fe3f3ff7c3ae1bf2374a56084fce2" translate="yes" xml:space="preserve">
          <source>bypass_through(conn, router)</source>
          <target state="translated">bypass_through(conn, router)</target>
        </trans-unit>
        <trans-unit id="fdbe1642414da19640b2a35d8c56dee08aab3b92" translate="yes" xml:space="preserve">
          <source>bypass_through(conn, router, pipelines \\ [])</source>
          <target state="translated">bypass_through (콘, 라우터, 파이프 라인 \\ [])</target>
        </trans-unit>
        <trans-unit id="d986543e632f8d6dae8790b7c875dab43a239f06" translate="yes" xml:space="preserve">
          <source>bypass_through(conn, router, pipelines)</source>
          <target state="translated">bypass_through(conn, router, pipelines)</target>
        </trans-unit>
        <trans-unit id="c050cb3c445235d70bdf04261e523c9a9bf5eafd" translate="yes" xml:space="preserve">
          <source>cache_manifest.json</source>
          <target state="translated">cache_manifest.json</target>
        </trans-unit>
        <trans-unit id="d083992999ebcc1a878ff45543382b74fcd8484b" translate="yes" xml:space="preserve">
          <source>cached()</source>
          <target state="translated">cached()</target>
        </trans-unit>
        <trans-unit id="06c92bcd3f4b15862cd395304c3888858a5c8535" translate="yes" xml:space="preserve">
          <source>call(arg0, opts)</source>
          <target state="translated">전화 (arg0, opts)</target>
        </trans-unit>
        <trans-unit id="92fd01b3e27da9dcfe03959a03d130265abb4868" translate="yes" xml:space="preserve">
          <source>call(conn, arg)</source>
          <target state="translated">전화 (conn, arg)</target>
        </trans-unit>
        <trans-unit id="f4ae9e06fecfaeb2ac3ef6fc0f915b3954bd510e" translate="yes" xml:space="preserve">
          <source>call(conn, config)</source>
          <target state="translated">호출 (conn, config)</target>
        </trans-unit>
        <trans-unit id="f0442b78107aa03a95ed266de6a92e4a06a24927" translate="yes" xml:space="preserve">
          <source>call(conn, level)</source>
          <target state="translated">전화 (conn, level)</target>
        </trans-unit>
        <trans-unit id="606e2413d971c26e2092cf93051ae92d96561935" translate="yes" xml:space="preserve">
          <source>call(conn, list)</source>
          <target state="translated">전화 (conn, list)</target>
        </trans-unit>
        <trans-unit id="4aea0d5715255c3803c1724509d234777f44255a" translate="yes" xml:space="preserve">
          <source>call(conn, options)</source>
          <target state="translated">전화 (콘, 옵션)</target>
        </trans-unit>
        <trans-unit id="3f759da02ded391868e1ab00e86860e07500601a" translate="yes" xml:space="preserve">
          <source>call(conn, opts)</source>
          <target state="translated">전화 (conn, opts)</target>
        </trans-unit>
        <trans-unit id="61f3d90319ef109b85e231b46184f37254bd22db" translate="yes" xml:space="preserve">
          <source>call(conn, req_id_header)</source>
          <target state="translated">전화 (conn, req_id_header)</target>
        </trans-unit>
        <trans-unit id="e7d947a88d45ae2f0a3e55ddc89852ef9d5e439a" translate="yes" xml:space="preserve">
          <source>camelize(value)</source>
          <target state="translated">camelize(value)</target>
        </trans-unit>
        <trans-unit id="ec4e1531bb2187407a18f6c11d1bdab9d0376b54" translate="yes" xml:space="preserve">
          <source>camelize(value, atom)</source>
          <target state="translated">camelize (가치, 원자)</target>
        </trans-unit>
        <trans-unit id="13299fa357d6c9d814091782cb75ef5fa8fedb29" translate="yes" xml:space="preserve">
          <source>cast!(value)</source>
          <target state="translated">cast!(value)</target>
        </trans-unit>
        <trans-unit id="e1560062f4234dac53bb4e937796601c9f5828b4" translate="yes" xml:space="preserve">
          <source>cast(binary)</source>
          <target state="translated">cast(binary)</target>
        </trans-unit>
        <trans-unit id="03baefdc7fa9e3e3ad19cf54ce2065733217f260" translate="yes" xml:space="preserve">
          <source>cast(data, params)</source>
          <target state="translated">캐스트 (데이터, 매개 변수)</target>
        </trans-unit>
        <trans-unit id="2bf54af6147c39158a3e3ace6cb9ac06bc018a94" translate="yes" xml:space="preserve">
          <source>cast(data, params, permitted, opts \\ [])</source>
          <target state="translated">캐스트 (데이터, 매개 변수, 허용, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="97a588890ffe6f775ddae2e8cf2fb56915a97a1d" translate="yes" xml:space="preserve">
          <source>cast(term)</source>
          <target state="translated">cast(term)</target>
        </trans-unit>
        <trans-unit id="08ba4b1ba87b8fbbaeff2f24642e2c69a551b531" translate="yes" xml:space="preserve">
          <source>cast(type, value)</source>
          <target state="translated">캐스트 (유형, 값)</target>
        </trans-unit>
        <trans-unit id="396400c24b2ae6e3585ac5bf8057bc0ba5160416" translate="yes" xml:space="preserve">
          <source>cast_assoc(changeset, name, opts \\ [])</source>
          <target state="translated">cast_assoc (변경, 이름, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="bf4a11495d1988837e9b002e75fe0c5a728100cc" translate="yes" xml:space="preserve">
          <source>cast_decimal(term)</source>
          <target state="translated">cast_decimal(term)</target>
        </trans-unit>
        <trans-unit id="dbb05f086a21005deb350c99c493cad1f864a5cf" translate="yes" xml:space="preserve">
          <source>cast_embed(changeset, name, opts \\ [])</source>
          <target state="translated">cast_embed (변경 세트, 이름, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="1c8a48b55111d5108f77f6e7ad7b1804d623732f" translate="yes" xml:space="preserve">
          <source>change(data, changes \\ %{})</source>
          <target state="translated">변경 (데이터, 변경 \\ % {})</target>
        </trans-unit>
        <trans-unit id="d351a89f46179d26bc191f18fc2179aa54f11d09" translate="yes" xml:space="preserve">
          <source>changes()</source>
          <target state="translated">changes()</target>
        </trans-unit>
        <trans-unit id="d293387f54ed2d9138eec9f3f11953e10e0a3d34" translate="yes" xml:space="preserve">
          <source>changesets or structs - when a changeset or struct is given, they are treated as the canonical data and the associated data currently stored in the association is ignored. For instance, the operation &lt;code&gt;put_assoc(changeset, :comments, [%Comment{id: 1, title: &quot;changed&quot;}])&lt;/code&gt; will send the &lt;code&gt;Comment&lt;/code&gt; as is to the database, ignoring any comment currently associated, even if a matching ID is found. If the comment is already persisted to the database, then &lt;a href=&quot;#put_assoc/4&quot;&gt;&lt;code&gt;put_assoc/4&lt;/code&gt;&lt;/a&gt; only takes care of guaranteeing that the comments and the parent data are associated. This extremely useful when associating existing data, as we will see in the &quot;Example: Adding tags to a post&quot; section.</source>
          <target state="translated">changesets or structs - when a changeset or struct is given, they are treated as the canonical data and the associated data currently stored in the association is ignored. For instance, the operation &lt;code&gt;put_assoc(changeset, :comments, [%Comment{id: 1, title: &quot;changed&quot;}])&lt;/code&gt; will send the &lt;code&gt;Comment&lt;/code&gt; as is to the database, ignoring any comment currently associated, even if a matching ID is found. If the comment is already persisted to the database, then &lt;a href=&quot;#put_assoc/4&quot;&gt; &lt;code&gt;put_assoc/4&lt;/code&gt; &lt;/a&gt; only takes care of guaranteeing that the comments and the parent data are associated. This extremely useful when associating existing data, as we will see in the &quot;Example: Adding tags to a post&quot; section.</target>
        </trans-unit>
        <trans-unit id="c01156d0f5970f5c830b273540f3588b37a1b29a" translate="yes" xml:space="preserve">
          <source>changesets or structs - when a changeset or struct is given, they are treated as the canonical data and the associated data currently stored in the association is ignored. For instance, the operation &lt;code&gt;put_assoc(changeset, :comments, [%Comment{id: 1, title: &quot;changed&quot;}])&lt;/code&gt; will send the &lt;code&gt;Comment&lt;/code&gt; as is to the database, ignoring any comment currently associated, even if a matching ID is found. If the comment is already persisted to the database, then &lt;a href=&quot;#put_assoc/4&quot;&gt;&lt;code&gt;put_assoc/4&lt;/code&gt;&lt;/a&gt; only takes care of guaranteeing that the comments and the parent data are associated. This extremely useful when associating existing data, as we will see in the &amp;ldquo;Example: Adding tags to a post&amp;rdquo; section.</source>
          <target state="translated">변경 세트 또는 구조-변경 세트 또는 구조가 제공되면 표준 데이터로 취급되며 현재 연관에 저장된 관련 데이터는 무시됩니다. 인스턴스, 조작 내용 &lt;code&gt;put_assoc(changeset, :comments, [%Comment{id: 1, title: &quot;changed&quot;}])&lt;/code&gt; 보낼 &lt;code&gt;Comment&lt;/code&gt; 데이터베이스에 그대로 일치 ID가있는 경우에도 현재 연관된 주석을 무시 녹이다. 주석이 데이터베이스에 이미 지속 된 경우 &lt;a href=&quot;#put_assoc/4&quot;&gt; &lt;code&gt;put_assoc/4&lt;/code&gt; &lt;/a&gt; 는 주석과 상위 데이터가 연관되도록 보장합니다. &amp;ldquo;예 : 게시물에 태그 추가&amp;rdquo;섹션에서 볼 수 있듯이 기존 데이터를 연결할 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="47ad1b5f152969a584b81658d3aacba143a6801c" translate="yes" xml:space="preserve">
          <source>channel(topic_pattern, module, opts \\ [])</source>
          <target state="translated">채널 (topic_pattern, 모듈, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="624f3df61d985756bd8c1ec8b10e478d7fd03f5d" translate="yes" xml:space="preserve">
          <source>channel(topic_pattern, module, opts \\ [])(macro)</source>
          <target state="translated">채널 (주제 _ 패턴, 모듈, opts \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="02d70c442457d0a27860b66a9192041638d34f01" translate="yes" xml:space="preserve">
          <source>check_constraint(changeset, field, opts \\ [])</source>
          <target state="translated">check_constraint (변경 세트, 필드, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="eaa756cb6fe2ff2cb34bfeb6f9ec9ae0f99b75a4" translate="yes" xml:space="preserve">
          <source>check_origin(conn, handler, endpoint, opts, sender \\ &amp;amp;Plug.Conn.send_resp/1)</source>
          <target state="translated">check_origin (conn, handler, endpoint, opts, sender \\ &amp;amp; Plug.Conn.send_resp / 1)</target>
        </trans-unit>
        <trans-unit id="b4a02ad57801d209647bf99b83a3c38ad9874703" translate="yes" xml:space="preserve">
          <source>check_origin: [&amp;ldquo;https://example.com&amp;rdquo;,</source>
          <target state="translated">check_origin : [&amp;ldquo;https://example.com&amp;rdquo;,</target>
        </trans-unit>
        <trans-unit id="3e17cad754fb969195a7ac3a7e6e3898646ce549" translate="yes" xml:space="preserve">
          <source>check_subprotocols(conn, subprotocols)</source>
          <target state="translated">check_subprotocols(conn, subprotocols)</target>
        </trans-unit>
        <trans-unit id="fa910b690776b65917731c2c49f1444e21862ef4" translate="yes" xml:space="preserve">
          <source>checkbox(form, field, opts \\ [])</source>
          <target state="translated">확인란 (양식, 필드, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="d8b6e57cb0b7f0dd13f4076d6f2291386626c04c" translate="yes" xml:space="preserve">
          <source>checkout(adapter_meta, config, function)</source>
          <target state="translated">checkout(adapter_meta, config, function)</target>
        </trans-unit>
        <trans-unit id="7d19197fa6ddd81c780c0da5d590fe4f261fc127" translate="yes" xml:space="preserve">
          <source>checkout(adapter_meta, options, function)</source>
          <target state="translated">체크 아웃 (어댑터 _ 메타, 옵션, 기능)</target>
        </trans-unit>
        <trans-unit id="5a489136e2a479fd74f2c4c4731408d5629ae83c" translate="yes" xml:space="preserve">
          <source>checkout(function, opts)</source>
          <target state="translated">체크 아웃 (기능, 옵트)</target>
        </trans-unit>
        <trans-unit id="a8f980b6663ce5365507de71b4710fc32a3a5ef5" translate="yes" xml:space="preserve">
          <source>child_spec(arg)</source>
          <target state="translated">child_spec(arg)</target>
        </trans-unit>
        <trans-unit id="09111146ba8624fdb98d7c1dcb703e9ad5ea6a28" translate="yes" xml:space="preserve">
          <source>child_spec(init_arg)</source>
          <target state="translated">child_spec(init_arg)</target>
        </trans-unit>
        <trans-unit id="fce6c798e295c907ea46038806e4545fed989e46" translate="yes" xml:space="preserve">
          <source>child_spec(keyword)</source>
          <target state="translated">child_spec(keyword)</target>
        </trans-unit>
        <trans-unit id="de99d4f79a09957a8cc797b89f534bff2b95dd9e" translate="yes" xml:space="preserve">
          <source>child_spec(options)</source>
          <target state="translated">child_spec(options)</target>
        </trans-unit>
        <trans-unit id="b1971af62c33c650b6d5b2bf4777d0d932fafd3f" translate="yes" xml:space="preserve">
          <source>child_spec(scheme, endpoint, config)</source>
          <target state="translated">child_spec (구성표, 엔드 포인트, 구성)</target>
        </trans-unit>
        <trans-unit id="587ea6412debde3ebdc6244d51f02139590c8886" translate="yes" xml:space="preserve">
          <source>chunk(conn, chunk)</source>
          <target state="translated">청크 (콘, 청크)</target>
        </trans-unit>
        <trans-unit id="3b5bf5787cbb936acada4b58559eb0086c326bbb" translate="yes" xml:space="preserve">
          <source>chunk(payload, arg1)</source>
          <target state="translated">청크 (페이로드, arg1)</target>
        </trans-unit>
        <trans-unit id="61f931625a7e5c68dfc57b0bc472ddfbc916d7d3" translate="yes" xml:space="preserve">
          <source>chunk(payload, arg2)</source>
          <target state="translated">chunk(payload, arg2)</target>
        </trans-unit>
        <trans-unit id="82f130a93c7f5f09a00754ce53542f0ca9b5a91f" translate="yes" xml:space="preserve">
          <source>clean(output_path, age, keep, now \\ now())</source>
          <target state="translated">청소 (output_path, 나이, 유지, 지금 \\ now ())</target>
        </trans-unit>
        <trans-unit id="ec42790033bd519a47cbba6a95caa1ed5eb74425" translate="yes" xml:space="preserve">
          <source>clear_flash(conn)</source>
          <target state="translated">clear_flash(conn)</target>
        </trans-unit>
        <trans-unit id="80136023ea544ca6cfc816713bcccb4a85ff28fa" translate="yes" xml:space="preserve">
          <source>clear_flash(socket)</source>
          <target state="translated">clear_flash(socket)</target>
        </trans-unit>
        <trans-unit id="1135beb191770af944fda720e2fc67e14557ddfc" translate="yes" xml:space="preserve">
          <source>clear_flash(socket, key)</source>
          <target state="translated">clear_flash (소켓, 키)</target>
        </trans-unit>
        <trans-unit id="132627635f488f725c0972dfef00bfd6d390327a" translate="yes" xml:space="preserve">
          <source>clear_session(conn)</source>
          <target state="translated">clear_session(conn)</target>
        </trans-unit>
        <trans-unit id="88d324f746fe5568669ab454fbe25a018c0f24cc" translate="yes" xml:space="preserve">
          <source>clock()</source>
          <target state="translated">clock()</target>
        </trans-unit>
        <trans-unit id="1f2862fe81a3f981c452dee8b67b5b7a169bce48" translate="yes" xml:space="preserve">
          <source>clocks(state)</source>
          <target state="translated">clocks(state)</target>
        </trans-unit>
        <trans-unit id="f9dc42eec239546e450d3deb9347eef2c2ca1f32" translate="yes" xml:space="preserve">
          <source>close(socket, timeout \\ 5000)</source>
          <target state="translated">닫기 (소켓, 시간 종료 \\ 5000)</target>
        </trans-unit>
        <trans-unit id="fa0f5b622612f1c0b47c02ea9a6756164caac94d" translate="yes" xml:space="preserve">
          <source>cloud()</source>
          <target state="translated">cloud()</target>
        </trans-unit>
        <trans-unit id="eab7bf988983258a178c34448d2913c1d661b1d8" translate="yes" xml:space="preserve">
          <source>clouds()</source>
          <target state="translated">clouds()</target>
        </trans-unit>
        <trans-unit id="0e2230a3543b9a0c0191f6c08543a4afd59a83bf" translate="yes" xml:space="preserve">
          <source>coalesce(value, expr)</source>
          <target state="translated">합체 (가치, expr)</target>
        </trans-unit>
        <trans-unit id="8820cd67048c8ba0aad6dd79baa7839a1f478cc2" translate="yes" xml:space="preserve">
          <source>code(integer_or_atom)</source>
          <target state="translated">code(integer_or_atom)</target>
        </trans-unit>
        <trans-unit id="362b9ee76044bcc777149263097ce1ca6695c14f" translate="yes" xml:space="preserve">
          <source>code_change(old_vsn, arg1, extra)</source>
          <target state="translated">code_change (old_vsn, arg1, 추가)</target>
        </trans-unit>
        <trans-unit id="7a162c337e8c81b4be24322395be00b8b2e5105f" translate="yes" xml:space="preserve">
          <source>code_change(old_vsn, arg2, extra)</source>
          <target state="translated">code_change(old_vsn, arg2, extra)</target>
        </trans-unit>
        <trans-unit id="fbe3b52190282e1b2d3e332ff821007cfd49ea34" translate="yes" xml:space="preserve">
          <source>code_reload(conn, endpoint, opts)</source>
          <target state="translated">code_reload(conn, endpoint, opts)</target>
        </trans-unit>
        <trans-unit id="408d77796f7c0e02a9faab1c41d90dd1815c935f" translate="yes" xml:space="preserve">
          <source>color_input(form, field, opts \\ [])</source>
          <target state="translated">color_input (양식, 필드, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="211afc8fcd2810e09bbdefb65aa40f178acd4c29" translate="yes" xml:space="preserve">
          <source>compact(state)</source>
          <target state="translated">compact(state)</target>
        </trans-unit>
        <trans-unit id="1011d38435e6bf8cb55f997daf3bd48f29eea3c0" translate="yes" xml:space="preserve">
          <source>compile(env, pipeline, builder_opts)</source>
          <target state="translated">컴파일 (env, pipeline, builder_opts)</target>
        </trans-unit>
        <trans-unit id="03b6ca5f5df2ec0ff7d04c307f083905e03667d0" translate="yes" xml:space="preserve">
          <source>compile(input_path, output_path)</source>
          <target state="translated">컴파일 (입력 경로, 출력 경로)</target>
        </trans-unit>
        <trans-unit id="d7f7b955b6ce7a0f3622b72eeae1354ab99f2239" translate="yes" xml:space="preserve">
          <source>compile(path, name)</source>
          <target state="translated">컴파일 (경로, 이름)</target>
        </trans-unit>
        <trans-unit id="e7046f9014c29361538e513303a718538ea3f99e" translate="yes" xml:space="preserve">
          <source>compile(template_path, template_name)</source>
          <target state="translated">컴파일 (template_path, template_name)</target>
        </trans-unit>
        <trans-unit id="fd9197f736983ee1b5bae624e0900accf190cf6e" translate="yes" xml:space="preserve">
          <source>composite()</source>
          <target state="translated">composite()</target>
        </trans-unit>
        <trans-unit id="f83bfccd3beca0f4e77c03d5340338b6ce786e44" translate="yes" xml:space="preserve">
          <source>composite?(atom)</source>
          <target state="translated">composite?(atom)</target>
        </trans-unit>
        <trans-unit id="c705b5c07e94e5b4ef420654932ee77cfc0d3039" translate="yes" xml:space="preserve">
          <source>config()</source>
          <target state="translated">config()</target>
        </trans-unit>
        <trans-unit id="5d06c835e77c63ccb760026992c6d23b2c0a4231" translate="yes" xml:space="preserve">
          <source>config(key, default)</source>
          <target state="translated">config (키, 기본값)</target>
        </trans-unit>
        <trans-unit id="3662dbb4f28b77d425dc64872a41898f0bae51ee" translate="yes" xml:space="preserve">
          <source>config_change(changed, removed)</source>
          <target state="translated">config_change (변경, 제거)</target>
        </trans-unit>
        <trans-unit id="efb487abbb5b37257c0df42bbc10e1e1a46011a2" translate="yes" xml:space="preserve">
          <source>configure(options)</source>
          <target state="translated">configure(options)</target>
        </trans-unit>
        <trans-unit id="5261ba80f7b79cd53ece103c572a6f98aac87688" translate="yes" xml:space="preserve">
          <source>configure_session(conn, opts)</source>
          <target state="translated">configure_session (conn, opts)</target>
        </trans-unit>
        <trans-unit id="2547ff9cbf0f6db4092b0822cdb43601911b0b6b" translate="yes" xml:space="preserve">
          <source>conn()</source>
          <target state="translated">conn()</target>
        </trans-unit>
        <trans-unit id="59f019034075e2854445043016067312d460d258" translate="yes" xml:space="preserve">
          <source>conn(method, path, params_or_body \\ nil)</source>
          <target state="translated">conn (방법, 경로, params_or_body \\ nil)</target>
        </trans-unit>
        <trans-unit id="dabb35c97727f9fffb73ae29884e2b56bc36356c" translate="yes" xml:space="preserve">
          <source>connect(conn, path_or_action, params_or_body \\ nil)</source>
          <target state="translated">연결 (conn, path_or_action, params_or_body \\ nil)</target>
        </trans-unit>
        <trans-unit id="5930894b9a8650d885d0747cbcc20990cfbcab18" translate="yes" xml:space="preserve">
          <source>connect(conn, path_or_action, params_or_body \\ nil)(macro)</source>
          <target state="translated">연결 (conn, path_or_action, params_or_body \\ nil) (매크로)</target>
        </trans-unit>
        <trans-unit id="a779e1a9dafc60bf074463c6e6f3a2287a32bfd0" translate="yes" xml:space="preserve">
          <source>connect(endpoint, handler, transport_name, transport, serializer_config, params)</source>
          <target state="translated">connect (엔드 포인트, 핸들러, transport_name, 전송, serializer_config, params)</target>
        </trans-unit>
        <trans-unit id="8ae1c720fa6a00222ec7b8a84b5a81b87a8519fe" translate="yes" xml:space="preserve">
          <source>connect(handler, params)</source>
          <target state="translated">연결 (핸들러, 매개 변수)</target>
        </trans-unit>
        <trans-unit id="b1ce476276e30fb89d52cdc08c518658cd3187d3" translate="yes" xml:space="preserve">
          <source>connect(handler, params)(macro)</source>
          <target state="translated">연결 (핸들러, 매개 변수) (매크로)</target>
        </trans-unit>
        <trans-unit id="ba2731f4f75f9084e4c8781339c4684e52dbf703" translate="yes" xml:space="preserve">
          <source>connect(handler, params, connect_info \\ quote do %{} end)</source>
          <target state="translated">connect(handler, params, connect_info \\ quote do %{} end)</target>
        </trans-unit>
        <trans-unit id="b78edd9a763c7955f142a97abcf40f54ad8b8ab3" translate="yes" xml:space="preserve">
          <source>connect(params, arg1)</source>
          <target state="translated">연결 (매개 변수, arg1)</target>
        </trans-unit>
        <trans-unit id="66c9ee8144decab8d10dcd6995cb0cd08fb814a3" translate="yes" xml:space="preserve">
          <source>connect(params, socket, connect_info)</source>
          <target state="translated">연결 (매개 변수, 소켓, 연결 _ 정보)</target>
        </trans-unit>
        <trans-unit id="e3a18aeca99f157add3eafb5ddf4f1cab19d19eb" translate="yes" xml:space="preserve">
          <source>connect(params, t)</source>
          <target state="translated">connect(params, t)</target>
        </trans-unit>
        <trans-unit id="7aff29e87e1dfbe5e207c24157147f7cf149e8c8" translate="yes" xml:space="preserve">
          <source>connect(params, t, connect_info)</source>
          <target state="translated">연결 (매개 변수, t, 연결 _ 정보)</target>
        </trans-unit>
        <trans-unit id="65e31e8b77de114da872202c0f83b1dd864df0a9" translate="yes" xml:space="preserve">
          <source>connect(path, plug, plug_opts, options \\ [])</source>
          <target state="translated">connect (경로, 플러그, plug_opts, 옵션 \\ [])</target>
        </trans-unit>
        <trans-unit id="60fd17a6cd216ce2a9c9a4f9334474bb16861d5b" translate="yes" xml:space="preserve">
          <source>connect(path, plug, plug_opts, options \\ [])(macro)</source>
          <target state="translated">connect (경로, 플러그, plug_opts, 옵션 \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="678fa2b7e22423a166c8a412ee50e78130542aec" translate="yes" xml:space="preserve">
          <source>connect(transport_info)</source>
          <target state="translated">connect(transport_info)</target>
        </trans-unit>
        <trans-unit id="8857ae6f79475760b7de3a62ca309d3c7cb15301" translate="yes" xml:space="preserve">
          <source>connect_info(conn, endpoint, keys)</source>
          <target state="translated">connect_info (conn, 끝점, 키)</target>
        </trans-unit>
        <trans-unit id="c99346e27d4d55a0d066c2b67aaa9bf5bdd6aced" translate="yes" xml:space="preserve">
          <source>connected?(socket)</source>
          <target state="translated">connected?(socket)</target>
        </trans-unit>
        <trans-unit id="3a4ab5153611ecd7a1ad18992998c8361969295a" translate="yes" xml:space="preserve">
          <source>connection_pid - the connection process that executed the query;</source>
          <target state="translated">connection_pid-쿼리를 실행 한 연결 프로세스</target>
        </trans-unit>
        <trans-unit id="8670740b30e809b513d613092f92caca6848e653" translate="yes" xml:space="preserve">
          <source>constraint()</source>
          <target state="translated">constraint()</target>
        </trans-unit>
        <trans-unit id="1983175db5077ae64ffd83b86ff203a39ece2afb" translate="yes" xml:space="preserve">
          <source>constraints()</source>
          <target state="translated">constraints()</target>
        </trans-unit>
        <trans-unit id="46ac6b848b67827e9872cb3c6fbf6ace67f4ff15" translate="yes" xml:space="preserve">
          <source>constraints(changeset)</source>
          <target state="translated">constraints(changeset)</target>
        </trans-unit>
        <trans-unit id="fedab48af78da75cba0642ed26d3c022448fd145" translate="yes" xml:space="preserve">
          <source>content_tag(name, attrs, attrs)</source>
          <target state="translated">content_tag (이름, 속성, 속성)</target>
        </trans-unit>
        <trans-unit id="d9000a315e3558c0384f818c1f32bd147b141fa3" translate="yes" xml:space="preserve">
          <source>content_tag(name, content)</source>
          <target state="translated">content_tag (이름, 내용)</target>
        </trans-unit>
        <trans-unit id="e33612fb479c23378394808ad93c6f3a5a006cc6" translate="yes" xml:space="preserve">
          <source>content_type(binary)</source>
          <target state="translated">content_type(binary)</target>
        </trans-unit>
        <trans-unit id="433ddc2803d9550f1ebf4fc761e87912ccc4d23e" translate="yes" xml:space="preserve">
          <source>context()</source>
          <target state="translated">context()</target>
        </trans-unit>
        <trans-unit id="4a3ee105fb821a00b2f6f3b6527f44510a7e870d" translate="yes" xml:space="preserve">
          <source>controller (&lt;a href=&quot;phoenix.controller&quot;&gt;&lt;code&gt;Phoenix.Controller&lt;/code&gt;&lt;/a&gt;) - the job of the controller is to retrieve request information, talk to your business domain, and prepare data for the presentation layer</source>
          <target state="translated">컨트롤러 ( &lt;a href=&quot;phoenix.controller&quot;&gt; &lt;code&gt;Phoenix.Controller&lt;/code&gt; &lt;/a&gt; )- 컨트롤러 의 역할은 요청 정보를 검색하고, 비즈니스 도메인과 대화하고, 프레젠테이션 계층을위한 데이터를 준비하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8ac9939764beb2b7dd50db76997b938c6b99ea45" translate="yes" xml:space="preserve">
          <source>controller_module(conn)</source>
          <target state="translated">controller_module(conn)</target>
        </trans-unit>
        <trans-unit id="ae44848c2fcfdff5299556b3e9523be1d184a66b" translate="yes" xml:space="preserve">
          <source>cookie()</source>
          <target state="translated">cookie()</target>
        </trans-unit>
        <trans-unit id="1f42c8502916f3fb89c6e6a8e89c240ddcc2a61c" translate="yes" xml:space="preserve">
          <source>cookies()</source>
          <target state="translated">cookies()</target>
        </trans-unit>
        <trans-unit id="a6322bb6f6a5b21b94f321bb5d77d71893647eb3" translate="yes" xml:space="preserve">
          <source>count()</source>
          <target state="translated">count()</target>
        </trans-unit>
        <trans-unit id="d653adea6a5118f2191bd216b0a24a120896c71a" translate="yes" xml:space="preserve">
          <source>count(value)</source>
          <target state="translated">count(value)</target>
        </trans-unit>
        <trans-unit id="11f69c01cb3fefc6adc3a48f9ad0187f8d6a8cf7" translate="yes" xml:space="preserve">
          <source>count(value, atom)</source>
          <target state="translated">개수 (값, 원자)</target>
        </trans-unit>
        <trans-unit id="82eba434b96d1989d23390cb135512e15ee8e296" translate="yes" xml:space="preserve">
          <source>create - receives params for one new item and saves it in a datastore</source>
          <target state="translated">생성-하나의 새 항목에 대한 매개 변수를 수신하고 데이터 저장소에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="283018970cad1901068482616b9b2deb0341e563" translate="yes" xml:space="preserve">
          <source>csrf_meta_tag()</source>
          <target state="translated">csrf_meta_tag()</target>
        </trans-unit>
        <trans-unit id="279de22137aefe2fde45038c52468e39709bf944" translate="yes" xml:space="preserve">
          <source>cume_dist()</source>
          <target state="translated">cume_dist()</target>
        </trans-unit>
        <trans-unit id="42e9a8c43fdefdda291855951fa7eb99d0563a6c" translate="yes" xml:space="preserve">
          <source>current_path(conn)</source>
          <target state="translated">current_path(conn)</target>
        </trans-unit>
        <trans-unit id="7cd2a5311cfbe5b217e1ed2f860ea3d4e37eb3ab" translate="yes" xml:space="preserve">
          <source>current_path(conn, params)</source>
          <target state="translated">current_path (conn, params)</target>
        </trans-unit>
        <trans-unit id="3fea47649befe43dfcd1930adf3a56b79fe79265" translate="yes" xml:space="preserve">
          <source>current_url(conn)</source>
          <target state="translated">current_url(conn)</target>
        </trans-unit>
        <trans-unit id="f14c17c384417a4d3f74a85505a3bc4607d1b34a" translate="yes" xml:space="preserve">
          <source>current_url(conn, params)</source>
          <target state="translated">current_url (conn, params)</target>
        </trans-unit>
        <trans-unit id="6ae6eef71237521aec002f43e7dee8c3265f3734" translate="yes" xml:space="preserve">
          <source>custom()</source>
          <target state="translated">custom()</target>
        </trans-unit>
        <trans-unit id="0a1aad76d6118026e945eafefe03dcafcc3ffc13" translate="yes" xml:space="preserve">
          <source>data()</source>
          <target state="translated">data()</target>
        </trans-unit>
        <trans-unit id="53436712f0170c09a43aa9f041d1e831f38e7157" translate="yes" xml:space="preserve">
          <source>date_add(date, count, interval)</source>
          <target state="translated">date_add (날짜, 개수, 간격)</target>
        </trans-unit>
        <trans-unit id="f201148655ebd523ac889728ac944912a4519b28" translate="yes" xml:space="preserve">
          <source>date_input(form, field, opts \\ [])</source>
          <target state="translated">date_input (양식, 필드, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="9fe770f8bf0642d59c9b5b2a094f0ea7480d1e69" translate="yes" xml:space="preserve">
          <source>date_select(form, field, opts \\ [])</source>
          <target state="translated">date_select (양식, 필드, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="0a2922336fe6f029e44a9191bd6adeacacec509e" translate="yes" xml:space="preserve">
          <source>datetime_add(datetime, count, interval)</source>
          <target state="translated">datetime_add (날짜 시간, 개수, 간격)</target>
        </trans-unit>
        <trans-unit id="aa020a68ca0f3e9b2432ac286712b870547df154" translate="yes" xml:space="preserve">
          <source>datetime_local_input(form, field, opts \\ [])</source>
          <target state="translated">datetime_local_input (형식, 필드, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="5a6a9ad6609b6c4c703319cc650b2194842c78bf" translate="yes" xml:space="preserve">
          <source>datetime_select(form, field, opts \\ [])</source>
          <target state="translated">datetime_select (형식, 필드, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="eeabf7e317339c1c9b20ddf4586b73c03fe345f8" translate="yes" xml:space="preserve">
          <source>decode!(iodata, options)</source>
          <target state="translated">디코드! (iodata, 옵션)</target>
        </trans-unit>
        <trans-unit id="ff709809ac6d46e4e0e265fb9ea29c7a955f60dd" translate="yes" xml:space="preserve">
          <source>decode(cookie)</source>
          <target state="translated">decode(cookie)</target>
        </trans-unit>
        <trans-unit id="03f54a5519d6febf98b8a3aa34018b34878cd41e" translate="yes" xml:space="preserve">
          <source>decode(query, initial \\ %{})</source>
          <target state="translated">디코드 (쿼리, 초기 \\ % {})</target>
        </trans-unit>
        <trans-unit id="a312c44fa6acfd817cd640145543ab2913f84797" translate="yes" xml:space="preserve">
          <source>decode(query, initial \\ %{}, invalid_exception \\ Plug.Conn.InvalidQueryError, validate_utf8 \\ true)</source>
          <target state="translated">디코드 (쿼리, 초기 \\ % {}, invalid_exception \\ Plug.Conn.InvalidQueryError, validate_utf8 \\ true)</target>
        </trans-unit>
        <trans-unit id="bfbe4150d145c1d071e8b5918a32180634688b51" translate="yes" xml:space="preserve">
          <source>decode_pair(arg, acc)</source>
          <target state="translated">decode_pair (arg, acc)</target>
        </trans-unit>
        <trans-unit id="1fc115639184c4dd5dacae8d9b330ea70fb3e39a" translate="yes" xml:space="preserve">
          <source>decode_time - the time spent decoding the result in native units (it may be nil);</source>
          <target state="translated">decode_time-결과를 기본 단위로 디코딩하는 데 소요 된 시간 (없음 일 수 있음);</target>
        </trans-unit>
        <trans-unit id="9e19671e261def702d2f5e8e3b2c18c51d1a210c" translate="yes" xml:space="preserve">
          <source>decrypt(context, secret, token, opts \\ [])</source>
          <target state="translated">decrypt (context, secret, token, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="a46ae0178763e2c07e1962f419a21d2e709356e8" translate="yes" xml:space="preserve">
          <source>default CRUD templates in &lt;code&gt;lib/app_web/templates/user&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;lib/app_web/templates/user&lt;/code&gt; 의 기본 CRUD 템플릿</target>
        </trans-unit>
        <trans-unit id="e37416ed84cdcad2f6c84e452a41c5e16ef7583a" translate="yes" xml:space="preserve">
          <source>default_config()</source>
          <target state="translated">default_config()</target>
        </trans-unit>
        <trans-unit id="0694598e11f12b5a63818fba778576ec445e1806" translate="yes" xml:space="preserve">
          <source>default_options(operation)</source>
          <target state="translated">default_options(operation)</target>
        </trans-unit>
        <trans-unit id="8d3ec88e69a9d7bb90e508003fbbb679d2905d8c" translate="yes" xml:space="preserve">
          <source>delete - receives an id for an item to be deleted and deletes it from a datastore</source>
          <target state="translated">delete-삭제할 항목의 ID를 수신하고 데이터 저장소에서 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="c227caa438bf9ebaafa8c86df5289f2dd851d9fa" translate="yes" xml:space="preserve">
          <source>delete!(struct_or_changeset, opts)</source>
          <target state="translated">삭제! (struct_or_changeset, opts)</target>
        </trans-unit>
        <trans-unit id="72c06ba8eb6f4812cdd1394e69f5b51c16d8b582" translate="yes" xml:space="preserve">
          <source>delete!(struct_or_changeset, opts)(optional)</source>
          <target state="translated">delete! (struct_or_changeset, opts) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="7699940a0cf08261194f36140215c38c9c409f9b" translate="yes" xml:space="preserve">
          <source>delete(adapter_meta, schema_meta, filters, options)</source>
          <target state="translated">삭제 (adapter_meta, schema_meta, 필터, 옵션)</target>
        </trans-unit>
        <trans-unit id="25a15e34f7161b2b9775975917ebc51c1874a271" translate="yes" xml:space="preserve">
          <source>delete(arg0, sid, arg2)</source>
          <target state="translated">삭제 (arg0, sid, arg2)</target>
        </trans-unit>
        <trans-unit id="04d64f4274b6a3b6e75298277b71f8a053864848" translate="yes" xml:space="preserve">
          <source>delete(arg1, sid, arg3)</source>
          <target state="translated">delete (arg1, sid, arg3)</target>
        </trans-unit>
        <trans-unit id="7940008338662a4a1d28e430bb6fdc57a3112210" translate="yes" xml:space="preserve">
          <source>delete(conn, path_or_action, params_or_body \\ nil)</source>
          <target state="translated">삭제 (conn, path_or_action, params_or_body \\ nil)</target>
        </trans-unit>
        <trans-unit id="98d4bdf153c3f498be52c981719060d4aef190f4" translate="yes" xml:space="preserve">
          <source>delete(conn, path_or_action, params_or_body \\ nil)(macro)</source>
          <target state="translated">삭제 (conn, path_or_action, params_or_body \\ nil) (매크로)</target>
        </trans-unit>
        <trans-unit id="5d0a8b90b4a055a1e9a4dc6e9a6aa52b5fda643a" translate="yes" xml:space="preserve">
          <source>delete(conn, sid, opts)</source>
          <target state="translated">삭제 (conn, sid, opts)</target>
        </trans-unit>
        <trans-unit id="766cc9b83ddc96d95a37aae3454c96922ded56a6" translate="yes" xml:space="preserve">
          <source>delete(conn, sid, table)</source>
          <target state="translated">삭제 (conn, sid, table)</target>
        </trans-unit>
        <trans-unit id="f2be16284bd3d4fb8197b0811b2e91ad708cd8bc" translate="yes" xml:space="preserve">
          <source>delete(multi, name, changeset_or_struct_fun, opts \\ [])</source>
          <target state="translated">삭제 (멀티, 이름, changeset_or_struct_fun, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="dcfddf62d9d7e4c144ad5fa4f6e362d6b5461b5a" translate="yes" xml:space="preserve">
          <source>delete(path, options, contents \\ [])</source>
          <target state="translated">삭제 (경로, 옵션, 내용 \\ [])</target>
        </trans-unit>
        <trans-unit id="18843cef96fffc050515db941dd0fb855d485307" translate="yes" xml:space="preserve">
          <source>delete(path, options, contents \\ [])(macro)</source>
          <target state="translated">삭제 (경로, 옵션, 내용 \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="a6e10c25ca363975907e8af9729b96345dc501e1" translate="yes" xml:space="preserve">
          <source>delete(path, plug, plug_opts, options \\ [])</source>
          <target state="translated">delete (경로, 플러그, plug_opts, 옵션 \\ [])</target>
        </trans-unit>
        <trans-unit id="983fdbe576ac24bde354fe70a9e8e93aa0841e52" translate="yes" xml:space="preserve">
          <source>delete(path, plug, plug_opts, options \\ [])(macro)</source>
          <target state="translated">delete (경로, 플러그, plug_opts, 옵션 \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="5d4062c922924322d8da6956b86962d769da1e04" translate="yes" xml:space="preserve">
          <source>delete(struct_or_changeset, opts)</source>
          <target state="translated">삭제 (struct_or_changeset, opts)</target>
        </trans-unit>
        <trans-unit id="587ccdb96fffeaba1a9a0fec5a836278093cbe85" translate="yes" xml:space="preserve">
          <source>delete(struct_or_changeset, opts)(optional)</source>
          <target state="translated">delete (struct_or_changeset, opts) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="591125c39aedf919249e2b085ce6e991a1b76c9a" translate="yes" xml:space="preserve">
          <source>delete_all(multi, name, queryable, opts \\ [])</source>
          <target state="translated">delete_all (멀티, 이름, 쿼리 가능, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="7d84fe3789414ce828795969122469954c9fa4d3" translate="yes" xml:space="preserve">
          <source>delete_all(multi, name, queryable_or_fun, opts \\ [])</source>
          <target state="translated">delete_all (multi, name, queryable_or_fun, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="70a0dcc9a32831c80aeedfbd175fab4db175f414" translate="yes" xml:space="preserve">
          <source>delete_all(queryable, opts)</source>
          <target state="translated">delete_all (조회 가능, 선택 가능)</target>
        </trans-unit>
        <trans-unit id="7ff7d736b8038bd724effe92a70a389763b7e2c9" translate="yes" xml:space="preserve">
          <source>delete_all(queryable, opts)(optional)</source>
          <target state="translated">delete_all (조회 가능, 선택 가능) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="b379c7d3696fb8dda9a93a681fff8e2d0fc5d3b5" translate="yes" xml:space="preserve">
          <source>delete_change(changeset, key)</source>
          <target state="translated">delete_change (변경 세트, 키)</target>
        </trans-unit>
        <trans-unit id="f42a0e91087386729eaef03591515e0f0750899f" translate="yes" xml:space="preserve">
          <source>delete_csrf_token()</source>
          <target state="translated">delete_csrf_token()</target>
        </trans-unit>
        <trans-unit id="d8cf8b34ebb4f7a1d2e106de1eff33abdfe48637" translate="yes" xml:space="preserve">
          <source>delete_req_cookie(conn, key)</source>
          <target state="translated">delete_req_cookie (콘, 키)</target>
        </trans-unit>
        <trans-unit id="5bea812e8a6bebd17557344830a09c771a6d62aa" translate="yes" xml:space="preserve">
          <source>delete_req_header(conn, key)</source>
          <target state="translated">delete_req_header (콘, 키)</target>
        </trans-unit>
        <trans-unit id="c24c934824484ee9e2289410f49da5b037c0c767" translate="yes" xml:space="preserve">
          <source>delete_resp_cookie(conn, key, opts \\ [])</source>
          <target state="translated">delete_resp_cookie (conn, key, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="3fb0a57be3a04e3b912cecc2ee39dee25efadf40" translate="yes" xml:space="preserve">
          <source>delete_resp_header(conn, key)</source>
          <target state="translated">delete_resp_header (콘, 키)</target>
        </trans-unit>
        <trans-unit id="216e418a429db702d7db713b8516d73bfb42d4da" translate="yes" xml:space="preserve">
          <source>delete_session(conn, key)</source>
          <target state="translated">delete_session (콘, 키)</target>
        </trans-unit>
        <trans-unit id="ac3351c2ad6c1de1d5b1ad841434086c096affc1" translate="yes" xml:space="preserve">
          <source>delta()</source>
          <target state="translated">delta()</target>
        </trans-unit>
        <trans-unit id="2fcb933983c16f87d31ebc381181916d575ca76f" translate="yes" xml:space="preserve">
          <source>delta_size(state)</source>
          <target state="translated">delta_size(state)</target>
        </trans-unit>
        <trans-unit id="600c25b4a1d4db0a73d6591f44e640ab4609637d" translate="yes" xml:space="preserve">
          <source>dense_rank()</source>
          <target state="translated">dense_rank()</target>
        </trans-unit>
        <trans-unit id="a12a6df09a4e1654a6012501fce0827d78971d75" translate="yes" xml:space="preserve">
          <source>direct_broadcast!(node_name, pubsub, topic, message, dispatcher \\ __MODULE__)</source>
          <target state="translated">direct_broadcast! (node_name, pubsub, topic, message, dispatcher \\ __MODULE__)</target>
        </trans-unit>
        <trans-unit id="96090c405247fe47ba77d711d8a5aa59dfa0d2ea" translate="yes" xml:space="preserve">
          <source>direct_broadcast!(node_name, server, topic, message)</source>
          <target state="translated">direct_broadcast! (노드 _ 이름, 서버, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="55c4cbf20f3b29fd047cc48a0be4cab4df89049a" translate="yes" xml:space="preserve">
          <source>direct_broadcast(adapter_name, arg2, arg3, arg4, arg5)</source>
          <target state="translated">direct_broadcast (어댑터 _ 이름, arg2, arg3, arg4, arg5)</target>
        </trans-unit>
        <trans-unit id="48c4fe1d2ebe89ff4aee89ccfcb923e9e18d7e68" translate="yes" xml:space="preserve">
          <source>direct_broadcast(node_name, pubsub, topic, message, dispatcher \\ __MODULE__)</source>
          <target state="translated">direct_broadcast (node_name, pubsub, topic, message, dispatcher \\ __MODULE__)</target>
        </trans-unit>
        <trans-unit id="5b7846a92321bb9938dc56026a1cf0d4476247a0" translate="yes" xml:space="preserve">
          <source>direct_broadcast(node_name, server, topic, message)</source>
          <target state="translated">direct_broadcast (노드 _ 이름, 서버, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="77dd6dd3e3444ac29c4fe7237b229f9fd73a3c1c" translate="yes" xml:space="preserve">
          <source>direct_broadcast_from!(node_name, server, from_pid, topic, message)</source>
          <target state="translated">direct_broadcast_from! (노드 _ 이름, 서버, from_pid, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="aa710745ee69fcd62a81c9e1a79fdf08629eaaad" translate="yes" xml:space="preserve">
          <source>direct_broadcast_from(node_name, server, from_pid, topic, message)</source>
          <target state="translated">direct_broadcast_from (노드 이름, 서버, from_pid, 주제, 메시지)</target>
        </trans-unit>
        <trans-unit id="40bb6c9a23ffc4e7a26d334a3b3c6d3fd5b99283" translate="yes" xml:space="preserve">
          <source>directly bulk-adding changes to a changeset</source>
          <target state="translated">변경 세트에 변경 사항을 직접 대량 추가</target>
        </trans-unit>
        <trans-unit id="f1ab325b88a6e0e2075f1069aca0b1e0c43026da" translate="yes" xml:space="preserve">
          <source>directly changing a struct without performing castings nor validations</source>
          <target state="translated">캐스팅이나 유효성 검사를 수행하지 않고 구조체를 직접 변경</target>
        </trans-unit>
        <trans-unit id="b99fbf1eef7c9ba68b6c73463ad48408ba594b19" translate="yes" xml:space="preserve">
          <source>dispatch(conn, endpoint, method, path_or_action, params_or_body \\ nil)</source>
          <target state="translated">디스패치 (conn, endpoint, method, path_or_action, params_or_body \\ nil)</target>
        </trans-unit>
        <trans-unit id="a4b77f171c10697f2c89605a0f17403195333fe3" translate="yes" xml:space="preserve">
          <source>dispatch(msg, channels, socket)</source>
          <target state="translated">파견 (msg, 채널, 소켓)</target>
        </trans-unit>
        <trans-unit id="9251828ecc3e5ef07a5f50a2f2fc20c2508ba3ff" translate="yes" xml:space="preserve">
          <source>dispatcher()</source>
          <target state="translated">dispatcher()</target>
        </trans-unit>
        <trans-unit id="97622bbf245a70b392b01add7710f8c0c7550793" translate="yes" xml:space="preserve">
          <source>distinct(query, binding \\ [], expr)</source>
          <target state="translated">distinct (쿼리, 바인딩 \\ [], expr)</target>
        </trans-unit>
        <trans-unit id="577925c91b9b2309c05ba5cdbec929fa7ed74708" translate="yes" xml:space="preserve">
          <source>distinct(query, binding \\ [], expr)(macro)</source>
          <target state="translated">distinct (쿼리, 바인딩 \\ [], expr) (매크로)</target>
        </trans-unit>
        <trans-unit id="6c592fe71ef66ce21a50e31aba92e8908b2de2f1" translate="yes" xml:space="preserve">
          <source>down(gc_server, pid)</source>
          <target state="translated">다운 (gc_server, pid)</target>
        </trans-unit>
        <trans-unit id="f1fa40071523ad00d567fcf5e59aea2e1a141340" translate="yes" xml:space="preserve">
          <source>dump(arg1)</source>
          <target state="translated">dump(arg1)</target>
        </trans-unit>
        <trans-unit id="69e53896e09838c140514a73b2c4106e82f603a2" translate="yes" xml:space="preserve">
          <source>dump(term)</source>
          <target state="translated">dump(term)</target>
        </trans-unit>
        <trans-unit id="74461ccd094ea3b90570216d38b370c9ff0875ba" translate="yes" xml:space="preserve">
          <source>dump(type, value)</source>
          <target state="translated">덤프 (유형, 값)</target>
        </trans-unit>
        <trans-unit id="78fd07119b742f35126afc76fab7f17318ac7ec3" translate="yes" xml:space="preserve">
          <source>dump(type, value, dumper \\ &amp;amp;dump/2)</source>
          <target state="translated">dump (유형, 값, 덤퍼 \\ &amp;amp; dump / 2)</target>
        </trans-unit>
        <trans-unit id="1a086171ec4b0fb75b9c2248bb0b82a28a4034df" translate="yes" xml:space="preserve">
          <source>dump(type, value, dumper)</source>
          <target state="translated">덤프 (유형, 값, 덤퍼)</target>
        </trans-unit>
        <trans-unit id="03755a6e12ade1440c1ee995386f718d243d2a56" translate="yes" xml:space="preserve">
          <source>dump(value, dumper, params)</source>
          <target state="translated">덤프 (값, 덤퍼, 매개 변수)</target>
        </trans-unit>
        <trans-unit id="79b8b067af0c943fe40b70a876d3d32a8ad8f56b" translate="yes" xml:space="preserve">
          <source>dump_state()</source>
          <target state="translated">dump_state()</target>
        </trans-unit>
        <trans-unit id="9f7d4e53296941efc6c80238928d69e5a073379c" translate="yes" xml:space="preserve">
          <source>dump_state_from_session(session_token)</source>
          <target state="translated">dump_state_from_session(session_token)</target>
        </trans-unit>
        <trans-unit id="80da45c5d727e5901aa5d5fd65381ff409d48b22" translate="yes" xml:space="preserve">
          <source>dumpers(primitive_type, ecto_type)</source>
          <target state="translated">덤퍼 (primitive_type, ecto_type)</target>
        </trans-unit>
        <trans-unit id="b11885a4e8e5a7ba7200c82797ddcb1441131cb2" translate="yes" xml:space="preserve">
          <source>dynamic()</source>
          <target state="translated">dynamic()</target>
        </trans-unit>
        <trans-unit id="0b8430a7ec3c80d9c9c7e5ca7e8eec257037f8df" translate="yes" xml:space="preserve">
          <source>dynamic()(opaque)</source>
          <target state="translated">dynamic()(opaque)</target>
        </trans-unit>
        <trans-unit id="004c3e05f76ec8592b5fa574bfe467dbbc51660c" translate="yes" xml:space="preserve">
          <source>dynamic(binding \\ [], expr)</source>
          <target state="translated">동적 (바인딩 \\ [], expr)</target>
        </trans-unit>
        <trans-unit id="647701a771cae2c8e5f42daa0ec73b84d65d5cde" translate="yes" xml:space="preserve">
          <source>dynamic(binding \\ [], expr)(macro)</source>
          <target state="translated">동적 (바인딩 \\ [], expr) (매크로)</target>
        </trans-unit>
        <trans-unit id="3fc200e09dd9b0015e7055fcf3e88519e2332513" translate="yes" xml:space="preserve">
          <source>edit - retrieves an individual item by id and displays it in a form for editing</source>
          <target state="translated">편집-ID로 개별 항목을 검색하고 편집을 위해 양식에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="1696cbff35935dbfed5659d5796c0f45fb9b63c7" translate="yes" xml:space="preserve">
          <source>element(view, selector, text_filter \\ nil)</source>
          <target state="translated">요소 (보기, 선택기, 텍스트 _ 필터 \\ nil)</target>
        </trans-unit>
        <trans-unit id="96b80732ae85a5048c8001036062ff5273024a1c" translate="yes" xml:space="preserve">
          <source>email_input(form, field, opts \\ [])</source>
          <target state="translated">email_input (양식, 필드, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="a3501e91100ec4cfbf581d7de6b0a07628320f61" translate="yes" xml:space="preserve">
          <source>embed_as(_)</source>
          <target state="translated">embed_as(_)</target>
        </trans-unit>
        <trans-unit id="0211c81c0fdeee36d7a7911a9e5ccd8828b92c0b" translate="yes" xml:space="preserve">
          <source>embed_as(base, format)</source>
          <target state="translated">embed_as (기본, 형식)</target>
        </trans-unit>
        <trans-unit id="ac61baccdd6f000d99bd38bf12cefc693aac7e4b" translate="yes" xml:space="preserve">
          <source>embed_as(format)</source>
          <target state="translated">embed_as(format)</target>
        </trans-unit>
        <trans-unit id="961fa6c9013b24c51687c6e6c362efe9f245cd87" translate="yes" xml:space="preserve">
          <source>embed_as(format, params)</source>
          <target state="translated">embed_as (형식, 매개 변수)</target>
        </trans-unit>
        <trans-unit id="2d54db13afdcaedcb0ddf824e9cb8351ca9f7b64" translate="yes" xml:space="preserve">
          <source>embedded_dump(data, format)</source>
          <target state="translated">Embedded_dump (데이터, 형식)</target>
        </trans-unit>
        <trans-unit id="b45f81a5870214871ebc3179328a5ecbd76742c8" translate="yes" xml:space="preserve">
          <source>embedded_dump(type, value, format)</source>
          <target state="translated">Embedded_dump (유형, 값, 형식)</target>
        </trans-unit>
        <trans-unit id="9bf8585a9d1337aa6b0cb60723c6df93129d08ed" translate="yes" xml:space="preserve">
          <source>embedded_load(schema_or_types, data, format)</source>
          <target state="translated">Embedded_load (schema_or_types, 데이터, 형식)</target>
        </trans-unit>
        <trans-unit id="ea9ebc45b10bbe6793e12298375da1ebcaa482b1" translate="yes" xml:space="preserve">
          <source>embedded_load(type, value, format)</source>
          <target state="translated">Embedded_load (유형, 값, 형식)</target>
        </trans-unit>
        <trans-unit id="e67bd30d34cd2fbe26cbb3c928c1b3b639430edf" translate="yes" xml:space="preserve">
          <source>embedded_schema()</source>
          <target state="translated">embedded_schema()</target>
        </trans-unit>
        <trans-unit id="2ed5717cffa71f4d0a3d6362866fb8ff3396f0a9" translate="yes" xml:space="preserve">
          <source>embedded_schema(list)</source>
          <target state="translated">embedded_schema(list)</target>
        </trans-unit>
        <trans-unit id="c3f364cf485068684c9af04346cc8878339fca6e" translate="yes" xml:space="preserve">
          <source>embedded_schema(list)(macro)</source>
          <target state="translated">embedded_schema(list)(macro)</target>
        </trans-unit>
        <trans-unit id="1ce05344ce41e820a60e2ca540ceb449e5840d64" translate="yes" xml:space="preserve">
          <source>embeds_many(name, schema, opts \\ [])</source>
          <target state="translated">embeds_many (이름, 스키마, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="2cce4daa4aa47f6fb5c4b19e98d7626618eeaeb6" translate="yes" xml:space="preserve">
          <source>embeds_many(name, schema, opts \\ [])(macro)</source>
          <target state="translated">embeds_many (이름, 스키마, opts \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="b22769e26274daa8bbd5c261b8c02c8f635a6f1e" translate="yes" xml:space="preserve">
          <source>embeds_many(name, schema, opts, list)</source>
          <target state="translated">embeds_many (이름, 스키마, opts, list)</target>
        </trans-unit>
        <trans-unit id="bd98e3bfac28d2c42fe8a757e764ef6f915e37d6" translate="yes" xml:space="preserve">
          <source>embeds_many(name, schema, opts, list)(macro)</source>
          <target state="translated">embeds_many (이름, 스키마, opts, list) (매크로)</target>
        </trans-unit>
        <trans-unit id="7ad5d5b7d0a15d1b82a48eda438568b1d44e70d5" translate="yes" xml:space="preserve">
          <source>embeds_one(name, schema, opts \\ [])</source>
          <target state="translated">embeds_one (이름, 스키마, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="5e44ce82eebe5ea927c5db16dd9e92effd23f98a" translate="yes" xml:space="preserve">
          <source>embeds_one(name, schema, opts \\ [])(macro)</source>
          <target state="translated">embeds_one (이름, 스키마, opts \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="880bb25260571619eef0e6f26885cda6d113e7d5" translate="yes" xml:space="preserve">
          <source>embeds_one(name, schema, opts, list)</source>
          <target state="translated">embeds_one (이름, 스키마, opts, list)</target>
        </trans-unit>
        <trans-unit id="7d73cf2f5eb6b420454a0927d1775a1cfabfaf04" translate="yes" xml:space="preserve">
          <source>embeds_one(name, schema, opts, list)(macro)</source>
          <target state="translated">embeds_one (이름, 스키마, 선택, 목록) (매크로)</target>
        </trans-unit>
        <trans-unit id="698cbe07accb103d1006a2168467537de2a69b5d" translate="yes" xml:space="preserve">
          <source>encode!(arg0)</source>
          <target state="translated">encode!(arg0)</target>
        </trans-unit>
        <trans-unit id="457df52faa48dbf765659183e52e22425abd800f" translate="yes" xml:space="preserve">
          <source>encode!(arg1)</source>
          <target state="translated">encode!(arg1)</target>
        </trans-unit>
        <trans-unit id="2c6b285032cb5e0ea52e48a4ead5b24bfd2db1a3" translate="yes" xml:space="preserve">
          <source>encode(key, opts \\ %{})</source>
          <target state="translated">encode (키, \\ % {}를 선택)</target>
        </trans-unit>
        <trans-unit id="cb602bd5c268b252d604ab06f6bbc2d4f6923085" translate="yes" xml:space="preserve">
          <source>encode(kv, encoder \\ &amp;amp;to_string/1)</source>
          <target state="translated">인코딩 (kv, 인코더 \\ &amp;amp; to_string / 1)</target>
        </trans-unit>
        <trans-unit id="a20573c66e43cdcf4f7bebe60b2a3bca6fcbac53" translate="yes" xml:space="preserve">
          <source>encode_basic_auth(user, pass)</source>
          <target state="translated">encode_basic_auth (사용자, 패스)</target>
        </trans-unit>
        <trans-unit id="ff629b3620840f5532c7461f7766e4cd17d34273" translate="yes" xml:space="preserve">
          <source>encode_to_iodata!(body)</source>
          <target state="translated">encode_to_iodata!(body)</target>
        </trans-unit>
        <trans-unit id="c79db945c9d0dc7105a4f8a6a0e78885b33eafb6" translate="yes" xml:space="preserve">
          <source>encoded_actions_for_exception(exception, conn)</source>
          <target state="translated">encode_actions_for_exception (예외, conn)</target>
        </trans-unit>
        <trans-unit id="0242b31da923c418827dbdfc9ff5ad68cc93cf8b" translate="yes" xml:space="preserve">
          <source>encrypt(context, secret, data, opts \\ [])</source>
          <target state="translated">encrypt (context, secret, data, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="41d527d655f0d3e23e6edd7a385060e7516bca13" translate="yes" xml:space="preserve">
          <source>endpoint (&lt;a href=&quot;phoenix.endpoint&quot;&gt;&lt;code&gt;Phoenix.Endpoint&lt;/code&gt;&lt;/a&gt;) - the endpoint contains the common and initial path that all requests go through. If you want something to happen on all requests, it goes to the endpoint</source>
          <target state="translated">엔드 포인트 ( &lt;a href=&quot;phoenix.endpoint&quot;&gt; &lt;code&gt;Phoenix.Endpoint&lt;/code&gt; &lt;/a&gt; )-엔드 포인트에는 모든 요청이 통과하는 공통 및 초기 경로가 포함됩니다. 모든 요청에 ​​대해 어떤 일이 일어나기를 원하면 엔드 포인트로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="7e244ff7dbebc5087e350f187161e223acbe834a" translate="yes" xml:space="preserve">
          <source>endpoint_module(conn)</source>
          <target state="translated">endpoint_module(conn)</target>
        </trans-unit>
        <trans-unit id="f52b3767de1b49af91e057049f51c5caaf7c97c4" translate="yes" xml:space="preserve">
          <source>engines()</source>
          <target state="translated">engines()</target>
        </trans-unit>
        <trans-unit id="838ca3833226a73e42304134fcfcf5d0673eb6cb" translate="yes" xml:space="preserve">
          <source>ensure_all_started(config, type)</source>
          <target state="translated">ensure_all_started (설정, 타입)</target>
        </trans-unit>
        <trans-unit id="60c72ea7b77f1535459b7026f256bb6ea051d7b3" translate="yes" xml:space="preserve">
          <source>ensure_implements(module, behaviour, message)</source>
          <target state="translated">ensure_implements (모듈, 동작, 메시지)</target>
        </trans-unit>
        <trans-unit id="097092fb0e0dcca15fa6f62b5567e2bf4006424d" translate="yes" xml:space="preserve">
          <source>ensure_recycled(conn)</source>
          <target state="translated">ensure_recycled(conn)</target>
        </trans-unit>
        <trans-unit id="ffd12f477db3b886cfcf922a115fa9dc7f7fb5b4" translate="yes" xml:space="preserve">
          <source>ensure_repo(repo, args)</source>
          <target state="translated">ensure_repo (리 포어, 인수)</target>
        </trans-unit>
        <trans-unit id="8d7cecd86fd36d033812a123458751b9f5503ed3" translate="yes" xml:space="preserve">
          <source>equal?(term, term)</source>
          <target state="translated">같습니까? (용어, 용어)</target>
        </trans-unit>
        <trans-unit id="c2a221a989fd68b9a0147d7452d6e271732c3c57" translate="yes" xml:space="preserve">
          <source>equal?(term, term)(optional)</source>
          <target state="translated">동일? (용어, 용어) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="f58a0ed3351889f596db9b9a2b51515275aca46f" translate="yes" xml:space="preserve">
          <source>equal?(term1, term2)</source>
          <target state="translated">같습니까? (term1, term2)</target>
        </trans-unit>
        <trans-unit id="a7f9688c3e368f1d3744082c98ad7fbfbe93f467" translate="yes" xml:space="preserve">
          <source>equal?(type, term1, term2)</source>
          <target state="translated">같습니까? (유형, term1, term2)</target>
        </trans-unit>
        <trans-unit id="7a147b3931f546d244efd7cd3f5146122acce52a" translate="yes" xml:space="preserve">
          <source>equal?(value1, value2, params)</source>
          <target state="translated">같음? (값 1, 값 2, 매개 변수) (======================================================================) ==================================================================================================================================================================================================================))</target>
        </trans-unit>
        <trans-unit id="aca90d914519fdb9825352bdc0befb59f7c8510f" translate="yes" xml:space="preserve">
          <source>error()</source>
          <target state="translated">error()</target>
        </trans-unit>
        <trans-unit id="4f0c444fd28e1dbec5d5ba99b7601dedaf7824e4" translate="yes" xml:space="preserve">
          <source>error(multi, name, value)</source>
          <target state="translated">오류 (멀티, 이름, 값)</target>
        </trans-unit>
        <trans-unit id="15737bd731c20a00b51b46fb4be073fbebdc8889" translate="yes" xml:space="preserve">
          <source>ets_id()</source>
          <target state="translated">ets_id()</target>
        </trans-unit>
        <trans-unit id="3eab22786e61f3b130b2f3be8b1629cde1615d64" translate="yes" xml:space="preserve">
          <source>event()</source>
          <target state="translated">event()</target>
        </trans-unit>
        <trans-unit id="5a98e06e96a31e3de89ec29d93e5406d260f0146" translate="yes" xml:space="preserve">
          <source>except(query, other_query)</source>
          <target state="translated">제외 (query, other_query)</target>
        </trans-unit>
        <trans-unit id="ffc473b1d5d6e72ed6c148505173110d65b47a16" translate="yes" xml:space="preserve">
          <source>except(query, other_query)(macro)</source>
          <target state="translated">제외 (query, other_query) (매크로)</target>
        </trans-unit>
        <trans-unit id="84608d528ccfecc53c5ac84ee962538641dd74fe" translate="yes" xml:space="preserve">
          <source>except_all(query, other_query)</source>
          <target state="translated">except_all (쿼리, other_query)</target>
        </trans-unit>
        <trans-unit id="d2c3af4e456ca18c69a99f449b514024ab15acd0" translate="yes" xml:space="preserve">
          <source>except_all(query, other_query)(macro)</source>
          <target state="translated">except_all (쿼리, other_query) (매크로)</target>
        </trans-unit>
        <trans-unit id="1e82fefd8a34b2e3cbff03b33befa386f85e7ef4" translate="yes" xml:space="preserve">
          <source>exception(args)</source>
          <target state="translated">exception(args)</target>
        </trans-unit>
        <trans-unit id="e66936ca6960f54d0e65442cc87a7746b74c2242" translate="yes" xml:space="preserve">
          <source>exception(msg)</source>
          <target state="translated">exception(msg)</target>
        </trans-unit>
        <trans-unit id="df2db6ee4fc5faef61d1adaae98e127510d0c539" translate="yes" xml:space="preserve">
          <source>exclude(query, field)</source>
          <target state="translated">제외 (쿼리, 필드)</target>
        </trans-unit>
        <trans-unit id="0d2e5728687eca82039dc01e9bd293dffb56b746" translate="yes" xml:space="preserve">
          <source>exclusion_constraint(changeset, field, opts \\ [])</source>
          <target state="translated">exclusion_constraint (변경 세트, 필드, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="382529edc28205aede8ab9a4e8304aa9b1a86437" translate="yes" xml:space="preserve">
          <source>execute(adapter_meta, query_meta, query_cache, params, options)</source>
          <target state="translated">실행 (adapter_meta, query_meta, query_cache, params, 옵션)</target>
        </trans-unit>
        <trans-unit id="16e1501bac5537f9b083aaa4f44c78ff050d7e8e" translate="yes" xml:space="preserve">
          <source>exists(subquery)</source>
          <target state="translated">exists(subquery)</target>
        </trans-unit>
        <trans-unit id="2f67d2eef7fc7577df41ad525ec889ed9ada76a0" translate="yes" xml:space="preserve">
          <source>exists?(queryable, opts)</source>
          <target state="translated">존재합니까? (조회 가능, 선택)</target>
        </trans-unit>
        <trans-unit id="c2a8e541b89bbcc34572692c55efd84df9046569" translate="yes" xml:space="preserve">
          <source>exists?(queryable, opts)(optional)</source>
          <target state="translated">존재합니까? (조회 가능, opts) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="5390bcf32abc6ba05344d0578d1a374a5039f96b" translate="yes" xml:space="preserve">
          <source>external to the application - for example data provided by the user in a form that needs to be type-converted and properly validated. This use case is primarily covered by the &lt;a href=&quot;#cast/4&quot;&gt;&lt;code&gt;cast/4&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">응용 프로그램 외부-예를 들어 사용자가 형식 변환하고 올바르게 확인해야하는 형식으로 제공 한 데이터. 이 사용 사례는 주로 &lt;a href=&quot;#cast/4&quot;&gt; &lt;code&gt;cast/4&lt;/code&gt; &lt;/a&gt; 기능에 의해 다루어집니다 .</target>
        </trans-unit>
        <trans-unit id="6250c7f1d731992f8e99c9fe2f097c7adf79d7a7" translate="yes" xml:space="preserve">
          <source>extract(state, remote_ref, remote_context)</source>
          <target state="translated">추출 (상태, remote_ref, remote_context)</target>
        </trans-unit>
        <trans-unit id="ae28559045727f6291d9b91962ece3b1a1de9424" translate="yes" xml:space="preserve">
          <source>fastlane!(arg0)</source>
          <target state="translated">fastlane!(arg0)</target>
        </trans-unit>
        <trans-unit id="e83c31beb1dc7a7732884e759e873fb24bd61e2f" translate="yes" xml:space="preserve">
          <source>fastlane!(arg1)</source>
          <target state="translated">fastlane!(arg1)</target>
        </trans-unit>
        <trans-unit id="82375509164b4789b10e6f9cf5d7a5ba41341b08" translate="yes" xml:space="preserve">
          <source>fetch(map, key)</source>
          <target state="translated">가져 오기 (맵, 키)</target>
        </trans-unit>
        <trans-unit id="e628568eb8197bf0657141cf2474d0bd6df80704" translate="yes" xml:space="preserve">
          <source>fetch(topic, presences)</source>
          <target state="translated">가져 오기 (주제, 존재)</target>
        </trans-unit>
        <trans-unit id="9d6301a15c4ddd0139722d25c220c21d129d8559" translate="yes" xml:space="preserve">
          <source>fetch_change!(changeset, key)</source>
          <target state="translated">fetch_change! (변경 세트, 키)</target>
        </trans-unit>
        <trans-unit id="568eff3eb5f1d5f70648ccf08c7ac82f6a416d82" translate="yes" xml:space="preserve">
          <source>fetch_change(changeset, key)</source>
          <target state="translated">fetch_change (변경 세트, 키)</target>
        </trans-unit>
        <trans-unit id="637cb01c1e13e2140f195d51cee0e946fc9965ad" translate="yes" xml:space="preserve">
          <source>fetch_cookies(conn, opts \\ [])</source>
          <target state="translated">fetch_cookies (conn, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="495ad1c4c6cadc364cb1bc5d3a67ae5b0b97cb27" translate="yes" xml:space="preserve">
          <source>fetch_field!(changeset, key)</source>
          <target state="translated">fetch_field! (변경 세트, 키)</target>
        </trans-unit>
        <trans-unit id="475247f652322bc870f6c1cbf35ef5f0643871b2" translate="yes" xml:space="preserve">
          <source>fetch_field(changeset, key)</source>
          <target state="translated">fetch_field (변경 세트, 키)</target>
        </trans-unit>
        <trans-unit id="912aba247214ebae8b9a04ccc1f85546feca1371" translate="yes" xml:space="preserve">
          <source>fetch_flash(conn)</source>
          <target state="translated">fetch_flash(conn)</target>
        </trans-unit>
        <trans-unit id="7d48132d16561b444966e721b8c63a26279fa832" translate="yes" xml:space="preserve">
          <source>fetch_flash(conn, opts \\ [])</source>
          <target state="translated">fetch_flash (계속, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="e9641aa1b1a4fa0b371f5548c656813b5c4c6655" translate="yes" xml:space="preserve">
          <source>fetch_live_flash(conn, _)</source>
          <target state="translated">fetch_live_flash(conn, _)</target>
        </trans-unit>
        <trans-unit id="c3b9020cb5be222deb8de7cb1c3f4317c93536d7" translate="yes" xml:space="preserve">
          <source>fetch_query_params(conn, opts \\ [])</source>
          <target state="translated">fetch_query_params (conn, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="72e7f172c2cd2a33d69bec25539350c36170dd51" translate="yes" xml:space="preserve">
          <source>fetch_session(conn, opts \\ [])</source>
          <target state="translated">fetch_session (conn, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="dfb50bc72f7ab787c55c4bb58a8f70f0ecdafc52" translate="yes" xml:space="preserve">
          <source>field()</source>
          <target state="translated">field()</target>
        </trans-unit>
        <trans-unit id="e831539d4c9a691c59a40142084ee643313079c4" translate="yes" xml:space="preserve">
          <source>field(name, type \\ :string, opts \\ [])</source>
          <target state="translated">필드 (이름, 유형 \\ : 문자열, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="069b43362963ad54688ebc212bb79259c424685b" translate="yes" xml:space="preserve">
          <source>field(name, type \\ :string, opts \\ [])(macro)</source>
          <target state="translated">필드 (이름, 유형 \\ : 문자열, \\ []를 선택 함) (매크로)</target>
        </trans-unit>
        <trans-unit id="966beb433eeb117367e022341a930fd3b7af794f" translate="yes" xml:space="preserve">
          <source>field(source, field)</source>
          <target state="translated">필드 (소스, 필드)</target>
        </trans-unit>
        <trans-unit id="78cb6de7962b30cb1995f0c6748660c2081851d2" translate="yes" xml:space="preserve">
          <source>fields()</source>
          <target state="translated">fields()</target>
        </trans-unit>
        <trans-unit id="782e5f14f7573dd687c99560de8e6ce66f5ade9b" translate="yes" xml:space="preserve">
          <source>file_input(form, field, opts \\ [])</source>
          <target state="translated">file_input (양식, 필드, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="6bcb26b8dc6dd672086150fca8ca7fd4c79be743" translate="yes" xml:space="preserve">
          <source>filter(value, filter)</source>
          <target state="translated">필터 (값, 필터)</target>
        </trans-unit>
        <trans-unit id="02e74864bef947126247d8201feb16b992718f95" translate="yes" xml:space="preserve">
          <source>filters()</source>
          <target state="translated">filters()</target>
        </trans-unit>
        <trans-unit id="f5a2e7295b455ba62705884dcc8422cf2a78582f" translate="yes" xml:space="preserve">
          <source>find_all(root, pattern \\ &quot;*&quot;, engines \\ engines())</source>
          <target state="translated">find_all (root, pattern \\ &quot;*&quot;, engines \\ engines ())</target>
        </trans-unit>
        <trans-unit id="6f62449a31b7bf0a3062139eb1e2dafeacd1bc74" translate="yes" xml:space="preserve">
          <source>find_live_child(parent, child_id)</source>
          <target state="translated">find_live_child(parent, child_id)</target>
        </trans-unit>
        <trans-unit id="dca71b1ad4b9954e3cae28782ade189f7af6d568" translate="yes" xml:space="preserve">
          <source>fingerprints()</source>
          <target state="translated">fingerprints()</target>
        </trans-unit>
        <trans-unit id="413149f4dc4e1088a5e0b0c4d86508b061d53c24" translate="yes" xml:space="preserve">
          <source>first(queryable, order_by \\ nil)</source>
          <target state="translated">첫 번째 (쿼리 가능, order_by \\ nil)</target>
        </trans-unit>
        <trans-unit id="7f5f835dcf4925755a956da330d2181c8c3de098" translate="yes" xml:space="preserve">
          <source>first_value(value)</source>
          <target state="translated">first_value(value)</target>
        </trans-unit>
        <trans-unit id="f3a93dca249f3a5397a52f9154c041e0d7e58e91" translate="yes" xml:space="preserve">
          <source>follow_redirect(reason, conn, to \\ nil)</source>
          <target state="translated">follow_redirect(reason, conn, to \\ nil)</target>
        </trans-unit>
        <trans-unit id="48f29b6c3e440397a692a7c015106aa35ab2ffad" translate="yes" xml:space="preserve">
          <source>for binary:</source>
          <target state="translated">바이너리의 경우 :</target>
        </trans-unit>
        <trans-unit id="1b31267a2899a409f32df1c6a2d0c8df8d33a53b" translate="yes" xml:space="preserve">
          <source>for broadcasting to channels: &lt;a href=&quot;#c:broadcast/3&quot;&gt;&lt;code&gt;broadcast/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:broadcast!/3&quot;&gt;&lt;code&gt;broadcast!/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:broadcast_from/4&quot;&gt;&lt;code&gt;broadcast_from/4&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:broadcast_from!/4&quot;&gt;&lt;code&gt;broadcast_from!/4&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:local_broadcast/3&quot;&gt;&lt;code&gt;local_broadcast/3&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#c:local_broadcast_from/4&quot;&gt;&lt;code&gt;local_broadcast_from/4&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">채널에 대한 방송 : &lt;a href=&quot;#c:broadcast/3&quot;&gt; &lt;code&gt;broadcast/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:broadcast!/3&quot;&gt; &lt;code&gt;broadcast!/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:broadcast_from/4&quot;&gt; &lt;code&gt;broadcast_from/4&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:broadcast_from!/4&quot;&gt; &lt;code&gt;broadcast_from!/4&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:local_broadcast/3&quot;&gt; &lt;code&gt;local_broadcast/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:local_broadcast_from/4&quot;&gt; &lt;code&gt;local_broadcast_from/4&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ebf14de295469f47c2db61b5e7a7335ba5b4b571" translate="yes" xml:space="preserve">
          <source>for broadcasting to channels: &lt;a href=&quot;#c:broadcast/3&quot;&gt;&lt;code&gt;broadcast/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:broadcast!/3&quot;&gt;&lt;code&gt;broadcast!/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:broadcast_from/4&quot;&gt;&lt;code&gt;broadcast_from/4&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#c:broadcast_from!/4&quot;&gt;&lt;code&gt;broadcast_from!/4&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">채널로 브로드 캐스트하는 경우 : &lt;a href=&quot;#c:broadcast/3&quot;&gt; &lt;code&gt;broadcast/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:broadcast!/3&quot;&gt; &lt;code&gt;broadcast!/3&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:broadcast_from/4&quot;&gt; &lt;code&gt;broadcast_from/4&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#c:broadcast_from!/4&quot;&gt; &lt;code&gt;broadcast_from!/4&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf3280fdd2a5cdd16108d89fc0c9a3289648c5e6" translate="yes" xml:space="preserve">
          <source>for configuration: &lt;a href=&quot;#c:start_link/0&quot;&gt;&lt;code&gt;start_link/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:config/2&quot;&gt;&lt;code&gt;config/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#c:config_change/2&quot;&gt;&lt;code&gt;config_change/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">구성 : &lt;a href=&quot;#c:start_link/0&quot;&gt; &lt;code&gt;start_link/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:config/2&quot;&gt; &lt;code&gt;config/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#c:config_change/2&quot;&gt; &lt;code&gt;config_change/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a12d6458ac17cd20151e3ea8cbe79af802ea7f45" translate="yes" xml:space="preserve">
          <source>for configuration: &lt;a href=&quot;#c:start_link/0&quot;&gt;&lt;code&gt;start_link/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:config/2&quot;&gt;&lt;code&gt;config/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#c:config_change/2&quot;&gt;&lt;code&gt;config_change/2&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="translated">구성 : &lt;a href=&quot;#c:start_link/0&quot;&gt; &lt;code&gt;start_link/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:config/2&quot;&gt; &lt;code&gt;config/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#c:config_change/2&quot;&gt; &lt;code&gt;config_change/2&lt;/code&gt; &lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="bb2d3dd0faa9f6beb1395b2acbdef66df752d2f8" translate="yes" xml:space="preserve">
          <source>for handling channel subscriptions: &lt;a href=&quot;#c:subscribe/2&quot;&gt;&lt;code&gt;subscribe/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#c:unsubscribe/1&quot;&gt;&lt;code&gt;unsubscribe/1&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="translated">채널 구독 처리 : &lt;a href=&quot;#c:subscribe/2&quot;&gt; &lt;code&gt;subscribe/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#c:unsubscribe/1&quot;&gt; &lt;code&gt;unsubscribe/1&lt;/code&gt; &lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="4cf0708088686b54e8b06b097ad92f458797f351" translate="yes" xml:space="preserve">
          <source>for handling paths and URLs: &lt;a href=&quot;#c:struct_url/0&quot;&gt;&lt;code&gt;struct_url/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:url/0&quot;&gt;&lt;code&gt;url/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:path/1&quot;&gt;&lt;code&gt;path/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:static_url/0&quot;&gt;&lt;code&gt;static_url/0&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#c:static_path/1&quot;&gt;&lt;code&gt;static_path/1&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="translated">경로 및 URL 처리 : &lt;a href=&quot;#c:struct_url/0&quot;&gt; &lt;code&gt;struct_url/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:url/0&quot;&gt; &lt;code&gt;url/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:path/1&quot;&gt; &lt;code&gt;path/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:static_url/0&quot;&gt; &lt;code&gt;static_url/0&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#c:static_path/1&quot;&gt; &lt;code&gt;static_path/1&lt;/code&gt; &lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="aead6a17d8c51e7b2b8dd8d5bb0bf6a3d2b299ee" translate="yes" xml:space="preserve">
          <source>for handling paths and URLs: &lt;a href=&quot;#c:struct_url/0&quot;&gt;&lt;code&gt;struct_url/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:url/0&quot;&gt;&lt;code&gt;url/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:path/1&quot;&gt;&lt;code&gt;path/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c:static_url/0&quot;&gt;&lt;code&gt;static_url/0&lt;/code&gt;&lt;/a&gt;,&lt;a href=&quot;#c:static_path/1&quot;&gt;&lt;code&gt;static_path/1&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#c:static_integrity/1&quot;&gt;&lt;code&gt;static_integrity/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">경로 및 URL 처리 : &lt;a href=&quot;#c:struct_url/0&quot;&gt; &lt;code&gt;struct_url/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:url/0&quot;&gt; &lt;code&gt;url/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:path/1&quot;&gt; &lt;code&gt;path/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:static_url/0&quot;&gt; &lt;code&gt;static_url/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:static_path/1&quot;&gt; &lt;code&gt;static_path/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#c:static_integrity/1&quot;&gt; &lt;code&gt;static_integrity/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7729270ab56f8ff3a5db46b82618bb66ce26914d" translate="yes" xml:space="preserve">
          <source>for instrumentation: &lt;a href=&quot;#c:instrument/3&quot;&gt;&lt;code&gt;instrument/3&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="translated">계측을 위해 : &lt;a href=&quot;#c:instrument/3&quot;&gt; &lt;code&gt;instrument/3&lt;/code&gt; &lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="f88f4e4f58c526de7670a2d22c10bb67df7fe36a" translate="yes" xml:space="preserve">
          <source>for lists:</source>
          <target state="translated">목록 :</target>
        </trans-unit>
        <trans-unit id="2dfa93ea35c8c0c1f9003161da82ce8ea874602d" translate="yes" xml:space="preserve">
          <source>for strings:</source>
          <target state="translated">문자열의 경우 :</target>
        </trans-unit>
        <trans-unit id="15340bf39e8b52ce1d4a72e4cb18e4ed2d2f2d62" translate="yes" xml:space="preserve">
          <source>force_change(changeset, key, value)</source>
          <target state="translated">force_change (변경 세트, 키, 값)</target>
        </trans-unit>
        <trans-unit id="5233cf43b91c0d04d7f98e3077d2aa89e45f2a61" translate="yes" xml:space="preserve">
          <source>force_ssl(conn, socket, endpoint, opts)</source>
          <target state="translated">force_ssl (콘, 소켓, 엔드 포인트, 옵트)</target>
        </trans-unit>
        <trans-unit id="64168a1ba58ab567f7fba512e53beb3650ba92a2" translate="yes" xml:space="preserve">
          <source>foreign_key_constraint(changeset, field, opts \\ [])</source>
          <target state="translated">foreign_key_constraint (변경 세트, 필드, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="2d47b286d47336efd31de9afa0382a307d21c6ee" translate="yes" xml:space="preserve">
          <source>form(view, selector, form_data \\ %{})</source>
          <target state="translated">양식 (보기, 선택기, 양식 _ 데이터 \\ % {})</target>
        </trans-unit>
        <trans-unit id="459b2c40e886045de494af483112ae049c650d60" translate="yes" xml:space="preserve">
          <source>form_for(form_data, action)</source>
          <target state="translated">form_for (form_data, 액션)</target>
        </trans-unit>
        <trans-unit id="e488baf4f5607f223dcaed01be5026450210856b" translate="yes" xml:space="preserve">
          <source>form_for(form_data, action, options \\ [], fun)</source>
          <target state="translated">form_for (form_data, 액션, 옵션 \\ [], 재미)</target>
        </trans-unit>
        <trans-unit id="e10c181139da1f198289b78259c1c9bbe5163f02" translate="yes" xml:space="preserve">
          <source>form_for(form_data, action, options)</source>
          <target state="translated">form_for (form_data, 작업, 옵션)</target>
        </trans-unit>
        <trans-unit id="1f639d8d621683bd3081cb6581c64caa395e1513" translate="yes" xml:space="preserve">
          <source>form_tag(action, options, list)</source>
          <target state="translated">form_tag (활동, 옵션, 목록)</target>
        </trans-unit>
        <trans-unit id="3920e7f61941227ab5e1920814c05318b283fa32" translate="yes" xml:space="preserve">
          <source>form_tag(action, opts \\ [])</source>
          <target state="translated">form_tag (액션, \\ [] 선택)</target>
        </trans-unit>
        <trans-unit id="a654029bdf39a44f0244d2567bc904990173d73a" translate="yes" xml:space="preserve">
          <source>format_encoder(template_name)</source>
          <target state="translated">format_encoder(template_name)</target>
        </trans-unit>
        <trans-unit id="c5729ac25b0665bea542ea70b2a49496606831f2" translate="yes" xml:space="preserve">
          <source>forward(path, options)</source>
          <target state="translated">앞으로 (경로, 옵션)</target>
        </trans-unit>
        <trans-unit id="56f3f3babc4813d7c89d9374d1090940fac3d7ac" translate="yes" xml:space="preserve">
          <source>forward(path, options)(macro)</source>
          <target state="translated">앞으로 (경로, 옵션) (매크로)</target>
        </trans-unit>
        <trans-unit id="3468afdd7bfe6323bf4ad6fe7547ceac9a2439eb" translate="yes" xml:space="preserve">
          <source>forward(path, plug, plug_opts \\ [], router_opts \\ [])</source>
          <target state="translated">전달 (경로, 플러그, plug_opts \\ [], router_opts \\ [])</target>
        </trans-unit>
        <trans-unit id="139f17c8f67b71d7cdf27504a19d7a5c56bfafd5" translate="yes" xml:space="preserve">
          <source>forward(path, plug, plug_opts \\ [], router_opts \\ [])(macro)</source>
          <target state="translated">전달 (경로, 플러그, plug_opts \\ [], router_opts \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="c9a0f263b4b98e8b1a52b138bf8d0112451c31ef" translate="yes" xml:space="preserve">
          <source>fragment(fragments)</source>
          <target state="translated">fragment(fragments)</target>
        </trans-unit>
        <trans-unit id="3045e5573bf31672d0cfb056d521facb2e1b97e2" translate="yes" xml:space="preserve">
          <source>from(expr, kw \\ [])</source>
          <target state="translated">from (expr, kw \\ [])</target>
        </trans-unit>
        <trans-unit id="44eb545b7685ff1522f0f5fcbc6bc8f6bdf35484" translate="yes" xml:space="preserve">
          <source>from(expr, kw \\ [])(macro)</source>
          <target state="translated">from (expr, kw \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="55a6acc071a999c814d15d562822830b9c881d95" translate="yes" xml:space="preserve">
          <source>from(u in User, update: [inc: [accesses: 1]])</source>
          <target state="translated">from (u 사용자, 업데이트 : [inc : [accesses : 1]])</target>
        </trans-unit>
        <trans-unit id="e814d35d103aee1223698cfb5e7154ebae879c36" translate="yes" xml:space="preserve">
          <source>from(u in User, update: [pull: [tags: &amp;ldquo;not cool&amp;rdquo;]])</source>
          <target state="translated">from (u 사용자, 업데이트 : [풀 : [태그 : &quot;멋지지 않음&quot;]])</target>
        </trans-unit>
        <trans-unit id="dce814a506fee8d5f98247ce004485ad2440f536" translate="yes" xml:space="preserve">
          <source>from(u in User, update: [push: [tags: &amp;ldquo;cool&amp;rdquo;]])</source>
          <target state="translated">from (u 사용자, 업데이트 : [푸시 : [태그 : &quot;cool&quot;]])</target>
        </trans-unit>
        <trans-unit id="e83ded7c03d170a7c5c5ccd7bedcc1c9d3d89f5c" translate="yes" xml:space="preserve">
          <source>from(u in User, update: [set: [name: &amp;ldquo;new name&amp;rdquo;]])</source>
          <target state="translated">from (u 사용자, 업데이트 : [세트 : [이름 : &quot;새 이름&quot;]])</target>
        </trans-unit>
        <trans-unit id="62eb4079c75861dab2c1dea8aaa8616bfd130e48" translate="yes" xml:space="preserve">
          <source>from_map!(map)</source>
          <target state="translated">from_map!(map)</target>
        </trans-unit>
        <trans-unit id="d29467ccc87adac20ac7bedcb8ca8586e50a725b" translate="yes" xml:space="preserve">
          <source>from_now(count, interval)</source>
          <target state="translated">from_now (횟수, 간격)</target>
        </trans-unit>
        <trans-unit id="8f9b52f82df4508153cda1b1f23496c818a170a4" translate="yes" xml:space="preserve">
          <source>fun(result)</source>
          <target state="translated">fun(result)</target>
        </trans-unit>
        <trans-unit id="46c1ac5215244726ef631bfa1879fd967e96381c" translate="yes" xml:space="preserve">
          <source>generate()</source>
          <target state="translated">generate()</target>
        </trans-unit>
        <trans-unit id="7ca18b35d9938d926a646c28cd2a0e670d1e0e0e" translate="yes" xml:space="preserve">
          <source>generate(base_path, generator, path, opts)</source>
          <target state="translated">생성 (base_path, 생성기, 경로, opts)</target>
        </trans-unit>
        <trans-unit id="3081be1c95852b75373749e952de34df66f1893e" translate="yes" xml:space="preserve">
          <source>generate(secret, salt, opts \\ [])</source>
          <target state="translated">생성 (비밀, 소금, opts \\ [])</target>
        </trans-unit>
        <trans-unit id="4ff60536ac95031b613410f1e14c20a31d0c06dd" translate="yes" xml:space="preserve">
          <source>get!(queryable, id, opts)</source>
          <target state="translated">get! (조회 가능, id, opts)</target>
        </trans-unit>
        <trans-unit id="a633584bdb29ec33821d8a643b5192e4e89ec5af" translate="yes" xml:space="preserve">
          <source>get!(queryable, id, opts)(optional)</source>
          <target state="translated">get! (조회 가능, id, opts) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="f09c8729543f9a5f9cede760017b3c03ff9993f4" translate="yes" xml:space="preserve">
          <source>get(arg0, cookie, arg2)</source>
          <target state="translated">get (arg0, 쿠키, arg2)</target>
        </trans-unit>
        <trans-unit id="c44bdb713a0146d7515a1ecbbbf87412151170b2" translate="yes" xml:space="preserve">
          <source>get(arg1, cookie, arg3)</source>
          <target state="translated">get (arg1, cookie, arg3)</target>
        </trans-unit>
        <trans-unit id="8bb8f6906b8c0ce1f93a7fd6036a5cbe78d0a2a1" translate="yes" xml:space="preserve">
          <source>get(conn, cookie, opts)</source>
          <target state="translated">get (conn, cookie, opts)</target>
        </trans-unit>
        <trans-unit id="570c3603090e216712fefc6fc261dc2ff4013177" translate="yes" xml:space="preserve">
          <source>get(conn, path_or_action, params_or_body \\ nil)</source>
          <target state="translated">get (conn, path_or_action, params_or_body \\ nil)</target>
        </trans-unit>
        <trans-unit id="b58e0db853be9eb04a49ee174617ba1dc6932703" translate="yes" xml:space="preserve">
          <source>get(conn, path_or_action, params_or_body \\ nil)(macro)</source>
          <target state="translated">get (conn, path_or_action, params_or_body \\ nil) (매크로)</target>
        </trans-unit>
        <trans-unit id="5557fa403bc289e26160effd94bf548020844b19" translate="yes" xml:space="preserve">
          <source>get(conn, sid, table)</source>
          <target state="translated">get (conn, sid, table)</target>
        </trans-unit>
        <trans-unit id="776b711bf174db733816e7812ebd62845e02992e" translate="yes" xml:space="preserve">
          <source>get(map, key, value)</source>
          <target state="translated">get (맵, 키, 값)</target>
        </trans-unit>
        <trans-unit id="c673f309c1814efebae9aa635554e6a585fd580f" translate="yes" xml:space="preserve">
          <source>get(path, options, contents \\ [])</source>
          <target state="translated">get (경로, 옵션, 내용 \\ [])</target>
        </trans-unit>
        <trans-unit id="6b64996657d97aeb8b0c0c7f70c6be8f2c7cadac" translate="yes" xml:space="preserve">
          <source>get(path, options, contents \\ [])(macro)</source>
          <target state="translated">get (경로, 옵션, 내용 \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="2a09b255c55f53ebeda8f6b94cea81bed60dec25" translate="yes" xml:space="preserve">
          <source>get(path, plug, plug_opts, options \\ [])</source>
          <target state="translated">get (경로, 플러그, plug_opts, 옵션 \\ [])</target>
        </trans-unit>
        <trans-unit id="e1b20560317c295da95b91b3387ced557f13763b" translate="yes" xml:space="preserve">
          <source>get(path, plug, plug_opts, options \\ [])(macro)</source>
          <target state="translated">get (경로, 플러그, plug_opts, 옵션 \\ []) (매크로)</target>
        </trans-unit>
        <trans-unit id="64ad1b3c3aa9b48cb64a8896f042dd4b0c111200" translate="yes" xml:space="preserve">
          <source>get(queryable, id, opts)</source>
          <target state="translated">get (쿼리 가능, id, opts)</target>
        </trans-unit>
        <trans-unit id="a14437cb797312c9b8ec6bd5da57f62bea8ba31e" translate="yes" xml:space="preserve">
          <source>get(queryable, id, opts)(optional)</source>
          <target state="translated">get (queryable, id, opts) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="0e65a61d89a321b75d94e44e201dd977a672e14c" translate="yes" xml:space="preserve">
          <source>get(store)</source>
          <target state="translated">get(store)</target>
        </trans-unit>
        <trans-unit id="90896be73e9e09d8f2e3469206b3bd648bf1e2b6" translate="yes" xml:space="preserve">
          <source>get_and_update(map, key, fun)</source>
          <target state="translated">get_and_update (지도, 키, 재미)</target>
        </trans-unit>
        <trans-unit id="b8cfa3b267d395da14ef39c63c017a5bdadead16" translate="yes" xml:space="preserve">
          <source>get_by!(queryable, clauses, opts)</source>
          <target state="translated">get_by! (쿼리 가능, 절, 옵트)</target>
        </trans-unit>
        <trans-unit id="f55e0566ed6e147e2f39e313483f99ebd32a0d48" translate="yes" xml:space="preserve">
          <source>get_by!(queryable, clauses, opts)(optional)</source>
          <target state="translated">get_by! (조회 가능, 절, opts) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="93b4a97699d7aa4f12fc5239e75d302191609c5e" translate="yes" xml:space="preserve">
          <source>get_by(queryable, clauses, opts)</source>
          <target state="translated">get_by (쿼리 가능, 절, 옵트)</target>
        </trans-unit>
        <trans-unit id="6b3d84a9b8dbb2f42ae0fbf82ab0005bafdd24e4" translate="yes" xml:space="preserve">
          <source>get_by(queryable, clauses, opts)(optional)</source>
          <target state="translated">get_by (조회 가능, 절, opts) (선택 사항)</target>
        </trans-unit>
        <trans-unit id="e72c5b31dce1dd581255432297fe442029c68a04" translate="yes" xml:space="preserve">
          <source>get_by_key(arg1, key)</source>
          <target state="translated">get_by_key (인수 1, 키)</target>
        </trans-unit>
        <trans-unit id="058f088329499a1a732ccd5f862c6564becfd43d" translate="yes" xml:space="preserve">
          <source>get_by_key(server_pid, topic, key)</source>
          <target state="translated">get_by_key (서버 _pid, 주제, 키)</target>
        </trans-unit>
        <trans-unit id="bba1ad0b6d3148419ae21e691d036647b1d0f58c" translate="yes" xml:space="preserve">
          <source>get_by_key(state, topic, key)</source>
          <target state="translated">get_by_key (상태, 주제, 키)</target>
        </trans-unit>
        <trans-unit id="0a5dc41eac945259220d45765e18fa7233a24a0f" translate="yes" xml:space="preserve">
          <source>get_by_key(tracker_name, topic, key)</source>
          <target state="translated">get_by_key (트래커 _ 이름, 주제, 키)</target>
        </trans-unit>
        <trans-unit id="44da686c737a52c25eb6c79342f81a1df124fe30" translate="yes" xml:space="preserve">
          <source>get_by_pid(state, pid)</source>
          <target state="translated">get_by_pid (상태, pid)</target>
        </trans-unit>
        <trans-unit id="5105209d1bcc5194ed72091278958091dae7eff4" translate="yes" xml:space="preserve">
          <source>get_by_pid(state, pid, topic, key)</source>
          <target state="translated">get_by_pid (상태, pid, 주제, 키)</target>
        </trans-unit>
        <trans-unit id="275b30cefa64725b85a3afef79cc547b6cf25896" translate="yes" xml:space="preserve">
          <source>get_by_topic(state, topic)</source>
          <target state="translated">get_by_topic (주, 주제)</target>
        </trans-unit>
        <trans-unit id="186ea84e543af229ad0558a0d566ea0497adfa92" translate="yes" xml:space="preserve">
          <source>get_change(changeset, key, default \\ nil)</source>
          <target state="translated">get_change (변경 세트, 키, 기본값 \\ nil)</target>
        </trans-unit>
        <trans-unit id="11ebff32181d7baf2a7c4b4c7be6e5bf57ef1b2c" translate="yes" xml:space="preserve">
          <source>get_connect_info(socket)</source>
          <target state="translated">get_connect_info(socket)</target>
        </trans-unit>
        <trans-unit id="e37f6ab53b111261a1c627ae569605acce77ee6a" translate="yes" xml:space="preserve">
          <source>get_connect_params(socket)</source>
          <target state="translated">get_connect_params(socket)</target>
        </trans-unit>
        <trans-unit id="8aad94b12d0b3f3d8adbb56f496c2a7a646b3cc9" translate="yes" xml:space="preserve">
          <source>get_csrf_token()</source>
          <target state="translated">get_csrf_token()</target>
        </trans-unit>
        <trans-unit id="bae5642d96b3078950a4f70b11ac5028d3b8304e" translate="yes" xml:space="preserve">
          <source>get_csrf_token_for(url)</source>
          <target state="translated">get_csrf_token_for(url)</target>
        </trans-unit>
        <trans-unit id="75eeab353f0b81efe3a721b414b6121a20e3504a" translate="yes" xml:space="preserve">
          <source>get_dynamic_repo()</source>
          <target state="translated">get_dynamic_repo()</target>
        </trans-unit>
        <trans-unit id="ae9a8ea360cb08a4db2119af95785ccdc90472a8" translate="yes" xml:space="preserve">
          <source>get_field(changeset, key, default \\ nil)</source>
          <target state="translated">get_field (변경 세트, 키, 기본값 \\ nil)</target>
        </trans-unit>
        <trans-unit id="dd91862512cebdbdf47349e086f5b7ed8cc795b3" translate="yes" xml:space="preserve">
          <source>get_flash(conn)</source>
          <target state="translated">get_flash(conn)</target>
        </trans-unit>
        <trans-unit id="e52a6b4e78e1340eb053ee3f6aaba826579d5b23" translate="yes" xml:space="preserve">
          <source>get_flash(conn, key)</source>
          <target state="translated">get_flash (콘, 키)</target>
        </trans-unit>
        <trans-unit id="c196d30802a58c8273a33abbed6ad37b8d36471c" translate="yes" xml:space="preserve">
          <source>get_format(conn)</source>
          <target state="translated">get_format(conn)</target>
        </trans-unit>
        <trans-unit id="65f06cbb65a54919c9a28f3760385d91ac80ca14" translate="yes" xml:space="preserve">
          <source>get_http_protocol(conn)</source>
          <target state="translated">get_http_protocol(conn)</target>
        </trans-unit>
        <trans-unit id="7fd1dc20fc76202998d6c0f18c52f7f0535cc781" translate="yes" xml:space="preserve">
          <source>get_http_protocol(payload)</source>
          <target state="translated">get_http_protocol(payload)</target>
        </trans-unit>
        <trans-unit id="12f29c20b4ce9092a717a03a27371fa0d583f2f5" translate="yes" xml:space="preserve">
          <source>get_meta(struct, atom)</source>
          <target state="translated">get_meta (struct, atom)</target>
        </trans-unit>
        <trans-unit id="2b231f78d0743c414eacb6ae21e5a20003bdecbd" translate="yes" xml:space="preserve">
          <source>get_peer_data(conn)</source>
          <target state="translated">get_peer_data(conn)</target>
        </trans-unit>
        <trans-unit id="48fbb3576a2a56ef8bb48296df85308794189285" translate="yes" xml:space="preserve">
          <source>get_peer_data(payload)</source>
          <target state="translated">get_peer_data(payload)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
