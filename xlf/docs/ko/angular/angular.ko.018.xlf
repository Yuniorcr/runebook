<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="3d66988bd9d4c9dd0ef51965ef7c55945a3dcc40" translate="yes" xml:space="preserve">
          <source>To define how users navigate through your application, you use routes. You can add routes to define how users navigate from one part of your application to another. You can also configure routes to guard against unexpected or unauthorized behavior.</source>
          <target state="translated">사용자가 애플리케이션을 탐색하는 방법을 정의하려면 경로를 사용합니다. 경로를 추가하여 사용자가 애플리케이션의 한 부분에서 다른 부분으로 이동하는 방법을 정의 할 수 있습니다. 예기치 않은 동작이나 무단 동작을 방지하도록 경로를 구성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cd846925adda37616140e026544f1e443869411" translate="yes" xml:space="preserve">
          <source>To define navigation rules, you associate &lt;em&gt;navigation paths&lt;/em&gt; with your components. A path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data. You can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</source>
          <target state="translated">탐색 규칙을 정의하려면 &lt;em&gt;탐색 경로&lt;/em&gt; 를 구성 요소와 연결하십시오. 경로는 템플릿 구문이 뷰를 프로그램 데이터와 통합하는 것과 거의 같은 방식으로 프로그램 데이터를 통합하는 URL과 같은 구문을 사용합니다. 그런 다음 프로그램 논리를 적용하여 사용자 입력 및 사용자 고유의 액세스 규칙에 따라 표시하거나 숨길보기를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10002cbe4fad471dff199ec10e58251721fd351d" translate="yes" xml:space="preserve">
          <source>To demonstrate the fundamentals, this example only logs to the console, &lt;code&gt;returns&lt;/code&gt; true immediately, and allows navigation to proceed:</source>
          <target state="translated">기본 사항을 보여주기 위해이 예제는 콘솔에만 로깅하고 즉시 true를 &lt;code&gt;returns&lt;/code&gt; 하며 탐색을 계속할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="40023445875429f2241340be247e7b7eb157f3bd" translate="yes" xml:space="preserve">
          <source>To demonstrate this process, see the &lt;code&gt;messages.fr.xlf&lt;/code&gt; file in the live example, which includes a French translation you can edit without a special XLIFF editor or knowledge of French. Follow these steps:</source>
          <target state="translated">이 프로세스를 설명하려면 특별한 XLIFF 편집기 나 프랑스어 지식없이 편집 할 수있는 프랑스어 번역이 포함 된 라이브 예제 의 &lt;code&gt;messages.fr.xlf&lt;/code&gt; 파일을 참조하십시오 . 이 차례를 따라라:</target>
        </trans-unit>
        <trans-unit id="2e9f5fcdd9d08eaae4f6f27d8f15141de7ee4a5f" translate="yes" xml:space="preserve">
          <source>To deploy your application, you have to compile it, and then host the JavaScript, CSS, and HTML on a web server. Built Angular applications are very portable and can live in any environment or served by any technology, such as Node, Java, .NET, PHP, and many others.</source>
          <target state="translated">응용 프로그램을 배포하려면 응용 프로그램을 컴파일 한 다음 웹 서버에서 JavaScript, CSS 및 HTML을 호스팅해야합니다. 내장 Angular 응용 프로그램은 이식성이 뛰어나 모든 환경에서 사용할 수 있으며 Node, Java, .NET, PHP 등의 모든 기술로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4201debf2f327ff9a5bac6e9078af7bf6115f61a" translate="yes" xml:space="preserve">
          <source>To determine an event target, Angular checks if the name of the target event matches an event property of a known directive. In the following example, Angular checks to see if &lt;code&gt;myClick&lt;/code&gt; is an event on the custom &lt;code&gt;ClickDirective&lt;/code&gt;.</source>
          <target state="translated">이벤트 대상을 결정하기 위해 Angular는 대상 이벤트의 이름이 알려진 지시문의 이벤트 속성과 일치하는지 확인합니다. 다음 예제에서 Angular는 &lt;code&gt;myClick&lt;/code&gt; 이 사용자 정의 &lt;code&gt;ClickDirective&lt;/code&gt; 의 이벤트 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="7526788522c1b03b983dd15f77818d3fb1ce5c12" translate="yes" xml:space="preserve">
          <source>To determine if your routes are actually evaluated &lt;a href=&quot;router-tutorial-toh#routing-module-order&quot;&gt;in the proper order&lt;/a&gt;, you can inspect the router's configuration.</source>
          <target state="translated">경로가 실제로 &lt;a href=&quot;router-tutorial-toh#routing-module-order&quot;&gt;올바른 순서로&lt;/a&gt; 평가되는지 확인하려면 라우터의 구성을 검사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="458c0ad6c07671bce624449b3ec9d294dc2007ad" translate="yes" xml:space="preserve">
          <source>To determine the destination project, use the &lt;code&gt;Tree.read()&lt;/code&gt; method to read the contents of the workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, at the root of the workspace. Add the following code to your factory function.</source>
          <target state="translated">대상 프로젝트를 판별하려면 &lt;code&gt;Tree.read()&lt;/code&gt; 메소드를 사용하여 작업 공간 의 루트에서 작업 공간 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 의 컨텐츠를 읽으십시오 . 팩토리 함수에 다음 코드를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="313cab03ec9f915ef435def5627fa903faf1ec5b" translate="yes" xml:space="preserve">
          <source>To directly check the &lt;code&gt;isActive&lt;/code&gt; status of the link, assign the &lt;code&gt;&lt;a href=&quot;routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; instance to a template variable. For example, the following checks the status without assigning any CSS classes:</source>
          <target state="translated">링크 의 &lt;code&gt;isActive&lt;/code&gt; 상태 를 직접 확인하려면 &lt;code&gt;&lt;a href=&quot;routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; 인스턴스를 템플릿 변수에 할당합니다 . 예를 들어 다음은 CSS 클래스를 할당하지 않고 상태를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="41761d654e74409fdfd74499d75e57248eb90e5e" translate="yes" xml:space="preserve">
          <source>To disable a button's functionality depending on a Boolean value, bind the DOM &lt;code&gt;disabled&lt;/code&gt; property to a property in the class that is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">부울 값에 따라 버튼의 기능을 비활성화하려면 DOM &lt;code&gt;disabled&lt;/code&gt; 속성을 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 클래스의 속성에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="b38921f33869fd230c21c0400a6e54f928af5829" translate="yes" xml:space="preserve">
          <source>To disable all animations for an Angular app, place the &lt;code&gt;@.disabled&lt;/code&gt; host binding on the topmost Angular component.</source>
          <target state="translated">Angular 앱에서 모든 애니메이션을 비활성화하려면 &lt;code&gt;@.disabled&lt;/code&gt; 호스트 바인딩을 최상위 Angular 구성 요소에 배치하십시오.</target>
        </trans-unit>
        <trans-unit id="b6cdd2ec5c4ef28a335c73d42124433a61f9f09d" translate="yes" xml:space="preserve">
          <source>To display a 404 page, set up a &lt;a href=&quot;router#wildcard-route-how-to&quot;&gt;wildcard route&lt;/a&gt; with the &lt;code&gt;component&lt;/code&gt; property set to the component you'd like to use for your 404 page as follows:</source>
          <target state="translated">404 페이지를 표시하려면 다음과 같이 404 페이지에 사용하려는 구성 요소로 설정된 &lt;code&gt;component&lt;/code&gt; 속성 으로 &lt;a href=&quot;router#wildcard-route-how-to&quot;&gt;와일드 카드 경로&lt;/a&gt; 를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="8d2b1d0f9febd720f6513d3ea282a6265dbf4671" translate="yes" xml:space="preserve">
          <source>To display a list of heroes, begin by adding an array of hero names to the component and redefine &lt;code&gt;myHero&lt;/code&gt; to be the first name in the array.</source>
          <target state="translated">영웅 목록을 표시하려면 먼저 구성 요소에 영웅 이름 배열을 추가하고 배열 에서 첫 번째 이름으로 &lt;code&gt;myHero&lt;/code&gt; 를 다시 정의 하십시오.</target>
        </trans-unit>
        <trans-unit id="c5c321525611939ce03b07b9d1cd2adb53d24843" translate="yes" xml:space="preserve">
          <source>To display a template when &lt;code&gt;expression&lt;/code&gt; evaluates to false, use an &lt;code&gt;else&lt;/code&gt; template binding as shown in the following example. The &lt;code&gt;else&lt;/code&gt; binding points to an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element labeled &lt;code&gt;#elseBlock&lt;/code&gt;. The template can be defined anywhere in the component view, but is typically placed right after &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; for readability.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 이 false로 평가 될 때 템플리트를 표시하려면 다음 예제와 같이 &lt;code&gt;else&lt;/code&gt; 템플리트 바인딩을 사용하십시오 . &lt;code&gt;else&lt;/code&gt; 결합 점 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 원소 표지 &lt;code&gt;#elseBlock&lt;/code&gt; . 템플릿은 컴포넌트보기의 어느 곳에서나 정의 할 수 있지만 일반적으로 가독성을 위해 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 바로 뒤에 배치 됩니다.</target>
        </trans-unit>
        <trans-unit id="669f12ce6bb05c14c2a566a84471f4cc7fe90a32" translate="yes" xml:space="preserve">
          <source>To display an instance of the dynamic form, the &lt;code&gt;AppComponent&lt;/code&gt; shell template passes the &lt;code&gt;questions&lt;/code&gt; array returned by the &lt;code&gt;QuestionService&lt;/code&gt; to the form container component, &lt;code&gt;&amp;lt;app-dynamic-form&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">동적 양식의 인스턴스를 표시하기 위해 &lt;code&gt;AppComponent&lt;/code&gt; 셸 템플릿은 &lt;code&gt;QuestionService&lt;/code&gt; 에서 반환 한 &lt;code&gt;questions&lt;/code&gt; 배열 을 양식 컨테이너 구성 요소 &lt;code&gt;&amp;lt;app-dynamic-form&amp;gt;&lt;/code&gt; 에 전달 합니다.</target>
        </trans-unit>
        <trans-unit id="f578c5cb78b9f7bd8066f62098c29394c6101150" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;HeroesComponent&lt;/code&gt;, you must add it to the template of the shell &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">디스플레이에 &lt;code&gt;HeroesComponent&lt;/code&gt; 을 , 당신은 쉘의 템플릿에 추가해야합니다 &lt;code&gt;AppComponent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f6cadc05a799ae38b432205731731047b90305a" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;ProfileEditor&lt;/code&gt; component that contains the form, add it to a component template.</source>
          <target state="translated">양식이 포함 된 &lt;code&gt;ProfileEditor&lt;/code&gt; 구성 요소 를 표시하려면 구성 요소 템플릿에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="903cc390eb408d1ea55af3983eda315a6832f5dc" translate="yes" xml:space="preserve">
          <source>To display the names of the products, use the interpolation syntax &lt;code&gt;{{ }}&lt;/code&gt;. Interpolation renders a property's value as text. Inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, add an &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; to display the interpolation of the product's name property:</source>
          <target state="translated">제품 이름을 표시하려면 보간 구문 &lt;code&gt;{{ }}&lt;/code&gt; . 보간은 속성 값을 텍스트로 렌더링합니다. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 안에 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 을 추가 하여 제품 이름 속성의 보간을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="af6b8e70bc867df920c57a14286a9aca559c2d1f" translate="yes" xml:space="preserve">
          <source>To do this for &lt;code&gt;ng serve&lt;/code&gt;, create a new file, &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; next to &lt;code&gt;tsconfig.app.json&lt;/code&gt; with the following content.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; 에 대해이를 수행하려면 다음 컨텐츠 가 포함 된 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 옆에 새 파일 &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; 을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="2d79d0bb78f9158b8f6b014230ea7d15c1b601c1" translate="yes" xml:space="preserve">
          <source>To do this, list the more specific transitions &lt;em&gt;before&lt;/em&gt;&lt;code&gt;* =&amp;gt; *&lt;/code&gt;.</source>
          <target state="translated">목록보다 구체적인 전환을,이 작업을 수행하기 &lt;em&gt;전에 &lt;/em&gt; &lt;code&gt;* =&amp;gt; *&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4af7f031db75e121d1590f04ee2af53757ce04c5" translate="yes" xml:space="preserve">
          <source>To do this, you'll use the Angular &lt;em&gt;router&lt;/em&gt;. The Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;router&lt;/a&gt; enables you to show different components and data to the user based on where the user is in the application. The router enables navigation from one view to the next as users perform application tasks:</source>
          <target state="translated">이렇게하려면 Angular &lt;em&gt;라우터를&lt;/em&gt; 사용 &lt;em&gt;합니다&lt;/em&gt; . Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;라우터를&lt;/a&gt; 사용하면 사용자가 응용 프로그램의 위치에 따라 다른 구성 요소와 데이터를 사용자에게 표시 할 수 있습니다. 라우터는 사용자가 응용 프로그램 작업을 수행 할 때 한보기에서 다음보기로 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="462723dd18c6bb21a7972312a3381bc47bf03529" translate="yes" xml:space="preserve">
          <source>To eliminate the risk of script injection attacks, Angular does not support the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element in templates. Angular ignores the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag and outputs a warning to the browser console. For more information, see the &lt;a href=&quot;security&quot;&gt;Security&lt;/a&gt; page.</source>
          <target state="translated">스크립트 삽입 공격의 위험을 제거하기 위해 Angular는 템플릿에서 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 요소를 지원하지 않습니다 . Angular는 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그를 무시하고 브라우저 콘솔에 경고를 출력합니다. 자세한 내용은 &lt;a href=&quot;security&quot;&gt;보안&lt;/a&gt; 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="27f743a355485c0e33e11f9f5aa2b4630220a267" translate="yes" xml:space="preserve">
          <source>To enable preloading of all lazy loaded modules, import the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token from the Angular &lt;code&gt;router&lt;/code&gt;.</source>
          <target state="translated">지연로드 된 모든 모듈의 사전로드를 활성화하려면 Angular &lt;code&gt;router&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 토큰을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="94dcbf1537099a8d72c6a9756d09210df8ae8156" translate="yes" xml:space="preserve">
          <source>To enable preloading of all lazy loaded modules, import the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token from the Angular router package.</source>
          <target state="translated">게으른로드 된 모듈을 모두 미리로드하려면 Angular 라우터 패키지에서 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 토큰을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="7fc710364e3b588a30c9d0c74118b2c885102b0a" translate="yes" xml:space="preserve">
          <source>To enable routing transition animation, do the following:</source>
          <target state="translated">라우팅 전환 애니메이션을 활성화하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="25d5eb1605457fea82578b3d288b0d9a7ae3a8f5" translate="yes" xml:space="preserve">
          <source>To ensure a high-quality, consistent experience for Angular documentation users.</source>
          <target state="translated">Angular 설명서 사용자에게 고품질의 일관된 환경을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b0bf35c98e00c5fabe6d7d695facb2ff6dcd71c2" translate="yes" xml:space="preserve">
          <source>To ensure any necessary teardown is triggered in the AngularJS app, such as removal of global listeners, you also implement a method to call the &lt;code&gt;$rootScope.destroy()&lt;/code&gt; method.</source>
          <target state="translated">글로벌 리스너 제거와 같이 AngularJS 앱에서 필요한 분류가 트리거되도록하려면 &lt;code&gt;$rootScope.destroy()&lt;/code&gt; 메소드 를 호출하는 메소드도 구현하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebde52584fea72d72602dc3407e717b85e61cb56" translate="yes" xml:space="preserve">
          <source>To ensure resource integrity, the Angular service worker validates the hashes of all resources for which it has a hash. Typically for an app created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, this is everything in the &lt;code&gt;dist&lt;/code&gt; directory covered by the user's &lt;code&gt;src/ngsw-config.json&lt;/code&gt; configuration.</source>
          <target state="translated">리소스 무결성을 보장하기 위해 Angular 서비스 워커는 해시가있는 모든 리소스의 해시를 확인합니다. 일반적으로 &lt;a href=&quot;cli&quot;&gt;Angular CLI로&lt;/a&gt; 생성 된 앱의 경우 이는 사용자의 &lt;code&gt;src/ngsw-config.json&lt;/code&gt; 구성 에서 다루는 &lt;code&gt;dist&lt;/code&gt; 디렉토리의 모든 것입니다 .</target>
        </trans-unit>
        <trans-unit id="36a2f26d071a65a5067d8e3435ef41b66818020c" translate="yes" xml:space="preserve">
          <source>To ensure that clients can only download the files that they are permitted to see, put all client-facing asset files in the &lt;code&gt;/dist&lt;/code&gt; folder and only honor requests for files from the &lt;code&gt;/dist&lt;/code&gt; folder.</source>
          <target state="translated">그들 만이 볼 수있는 모든 고객을 상대 자산 파일을 넣어 허용하는 파일을 다운로드 할 수 클라이언트를 보장하기 위해 &lt;code&gt;/dist&lt;/code&gt; 폴더와의 파일 만 영광 요청 &lt;code&gt;/dist&lt;/code&gt; 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8598c2022602203d9603274200d342e1eb538fb" translate="yes" xml:space="preserve">
          <source>To ensure that the compiler still generates a factory, add dynamically loaded components to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;entryComponents&lt;/code&gt; array:</source>
          <target state="translated">컴파일러가 여전히 팩토리를 생성하도록하려면 동적으로로드 된 컴포넌트를 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;entryComponents&lt;/code&gt; 배열에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d0535fc908a0485c86f26dadecdbe952a4ab9d56" translate="yes" xml:space="preserve">
          <source>To ensure valid input, the &lt;em&gt;Save&lt;/em&gt; button is disabled until the form is in a valid state. When the form is valid, you can click &lt;em&gt;Save&lt;/em&gt; and the app renders the current form values as JSON.</source>
          <target state="translated">유효한 입력을 보장하기 위해 양식이 유효한 상태가 될 때까지 &lt;em&gt;저장&lt;/em&gt; 단추가 비활성화됩니다. 양식이 유효하면 &lt;em&gt;저장&lt;/em&gt; 을 클릭 하면 앱이 현재 양식 값을 JSON으로 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="5341b76777b2db5c8a206eb43f77809a3f9644fa" translate="yes" xml:space="preserve">
          <source>To ensure we provide a future-proof e2e testing strategy, we want to evaluate the state of Protractor, community innovations, e2e best practices, and explore novel opportunities.</source>
          <target state="translated">미래 보장형 e2e 테스트 전략을 제공하기 위해 Protractor의 상태, 커뮤니티 혁신, e2e 모범 사례를 평가하고 새로운 기회를 탐색하고자합니다.</target>
        </trans-unit>
        <trans-unit id="2fa6772fab08a7737c141a27ae0a4cca92769842" translate="yes" xml:space="preserve">
          <source>To examine the behavior the &lt;code&gt;exponentialStrength&lt;/code&gt; pipe in the live example, change the value and optional exponent in the template.</source>
          <target state="translated">라이브 예제에서 &lt;code&gt;exponentialStrength&lt;/code&gt; 파이프 의 동작을 조사하려면 템플릿에서 값과 선택적 지수를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="e1812e3ae723bb35d7649d2ff5479140c8c70d2c" translate="yes" xml:space="preserve">
          <source>To exclude a heading from the TOC, create the heading as an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; element with a class called 'no-toc'. You can't do this with markdown.</source>
          <target state="translated">목차에서 제목을 제외하려면 'no-toc'라는 클래스를 사용하여 제목을 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 요소로 만듭니다. 마크 다운으로는이 작업을 수행 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ec903eae4634b565ecbfd272a77568b1f130ca3e" translate="yes" xml:space="preserve">
          <source>To exclude an asset, you can remove it from the assets configuration.</source>
          <target state="translated">자산을 제외하기 위해 자산 구성에서 자산을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cad3973c3b976211274db1f3473682b5a50d206c" translate="yes" xml:space="preserve">
          <source>To execute a custom pipe after a change &lt;em&gt;within&lt;/em&gt; a composite object, such as a change to an element of an array, you need to define your pipe as &lt;code&gt;impure&lt;/code&gt; to detect impure changes. Angular executes an impure pipe every time it detects a change with every keystroke or mouse movement.</source>
          <target state="translated">배열 요소 변경과 같이 복합 객체 &lt;em&gt;내&lt;/em&gt; 에서 변경된 후 사용자 지정 파이프를 실행하려면 불순한 변경을 감지하기 위해 파이프를 &lt;code&gt;impure&lt;/code&gt; 것으로 정의해야합니다 . Angular는 모든 키 입력 또는 마우스 움직임으로 변경 사항을 감지 할 때마다 불순한 파이프를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="f9e07f2c5513c75b8f79d6963b277e9fbd52a303" translate="yes" xml:space="preserve">
          <source>To execute the observable you have created and begin receiving notifications, you call its &lt;code&gt;subscribe()&lt;/code&gt; method, passing an &lt;em&gt;observer&lt;/em&gt;. This is a JavaScript object that defines the handlers for the notifications you receive. The &lt;code&gt;subscribe()&lt;/code&gt; call returns a &lt;code&gt;Subscription&lt;/code&gt; object that has an &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method, which you call to stop receiving notifications.</source>
          <target state="translated">생성 한 &lt;em&gt;옵저버&lt;/em&gt; 블을 실행하고 알림을 수신하려면 &lt;code&gt;subscribe()&lt;/code&gt; 메서드 를 호출 하여 &lt;em&gt;observer를&lt;/em&gt; 전달합니다 . 이것은 알림의 핸들러를 정의하는 JavaScript 객체입니다. &lt;code&gt;subscribe()&lt;/code&gt; 호출 리턴 &lt;code&gt;Subscription&lt;/code&gt; 이 객체 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; 알림을 수신을 중지하기 위해 호출 방법을.</target>
        </trans-unit>
        <trans-unit id="356b5604560e672278283aae6d2ec44a60e2429e" translate="yes" xml:space="preserve">
          <source>To execute the observable you have created and begin receiving notifications, you call its &lt;code&gt;subscribe()&lt;/code&gt; method, passing an &lt;em&gt;observer&lt;/em&gt;. This is a JavaScript object that defines the handlers for the notifications you receive. The &lt;code&gt;subscribe()&lt;/code&gt; call returns a &lt;code&gt;Subscription&lt;/code&gt; object that has an &lt;code&gt;unsubscribe()&lt;/code&gt; method, which you call to stop receiving notifications.</source>
          <target state="translated">생성 한 &lt;em&gt;옵저버&lt;/em&gt; 블을 실행하고 알림 수신을 시작하려면 해당 &lt;code&gt;subscribe()&lt;/code&gt; 메서드 를 호출 하여 &lt;em&gt;옵저버를&lt;/em&gt; 전달합니다 . 수신하는 알림에 대한 핸들러를 정의하는 JavaScript 객체입니다. &lt;code&gt;subscribe()&lt;/code&gt; 호출 리턴 &lt;code&gt;Subscription&lt;/code&gt; 이 객체 &lt;code&gt;unsubscribe()&lt;/code&gt; 알림을 수신을 중지하기 위해 호출 방법을.</target>
        </trans-unit>
        <trans-unit id="4a6f3f5c4289042742ca02c090211b9822454c2a" translate="yes" xml:space="preserve">
          <source>To explicitly disable differential loading:</source>
          <target state="translated">차등 로딩을 명시 적으로 비활성화하려면 :</target>
        </trans-unit>
        <trans-unit id="c66429caa018853399016d678c69e32103c0616f" translate="yes" xml:space="preserve">
          <source>To explore a sample app featuring the contents of this tutorial, see the live example.</source>
          <target state="translated">이 자습서의 내용이 포함 된 샘플 앱을 탐색하려면 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="81d467376c8d2e625edaf1979b30099e1e3ad196" translate="yes" xml:space="preserve">
          <source>To explore a sample app featuring the router's primary features, see the live example.</source>
          <target state="translated">라우터의 주요 기능을 갖춘 샘플 앱을 탐색하려면 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c60b05b765b9ca18fef5f1daddab57e723714e9c" translate="yes" xml:space="preserve">
          <source>To explore the sample app with French translations used in this guide, see the live example.</source>
          <target state="translated">이 가이드에 사용 된 프랑스어 번역이 포함 된 샘플 앱을 탐색하려면 라이브 예제를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="f487b5662ecb9aaad77bb986779347784a9a61bb" translate="yes" xml:space="preserve">
          <source>To extract the source language file, open a terminal window, change to the root directory of your app project, and run the following CLI command:</source>
          <target state="translated">소스 언어 파일을 추출하려면 터미널 창을 열고 앱 프로젝트의 루트 디렉터리로 변경 한 후 다음 CLI 명령을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="2eaffe5848d2ff0020839a1c2ce2f8e1600c6b16" translate="yes" xml:space="preserve">
          <source>To fetch this kind of data, the &lt;code&gt;get()&lt;/code&gt; call needs the following options: &lt;code&gt;{observe: 'body', responseType: 'json'}&lt;/code&gt;. These are the default values for those options, so the following examples do not pass the options object. Later sections show some of the additional option possibilities.</source>
          <target state="translated">이러한 종류의 데이터를 가져 오려면 &lt;code&gt;get()&lt;/code&gt; 호출에 &lt;code&gt;{observe: 'body', responseType: 'json'}&lt;/code&gt; 옵션이 필요합니다 . 이는 해당 옵션의 기본값이므로 다음 예제는 옵션 객체를 전달하지 않습니다. 이후 섹션에서는 몇 가지 추가 옵션 가능성을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="dc86ffb91970ba4ea3d784fdcfa4a20106112fb8" translate="yes" xml:space="preserve">
          <source>To filter output in AngularJS templates, use the pipe character (|) and one or more filters.</source>
          <target state="translated">AngularJS 템플릿에서 출력을 필터링하려면 파이프 문자 (|)와 하나 이상의 필터를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="154ce8f40b436ba677325298e54443b2e23530f6" translate="yes" xml:space="preserve">
          <source>To fix that, create an array with the new hero appended and assign that to &lt;code&gt;heroes&lt;/code&gt;. This time Angular detects that the array reference has changed. It executes the pipe and updates the display with the new array, which includes the new flying hero.</source>
          <target state="translated">이 문제를 해결하려면 추가 및 해당 할당 새로운 영웅으로 배열 생성 &lt;code&gt;heroes&lt;/code&gt; . 이번에는 Angular가 배열 참조가 변경되었음을 감지합니다. 파이프를 실행하고 새로운 비행 영웅을 포함한 새로운 배열로 디스플레이를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="56cf754ee3e7dca1fe9c44b4816cf790a119fb8c" translate="yes" xml:space="preserve">
          <source>To fix this issue, listen to both the &lt;em&gt;Enter&lt;/em&gt; key and the &lt;em&gt;blur&lt;/em&gt; event.</source>
          <target state="translated">이 문제를 해결하려면 &lt;em&gt;Enter&lt;/em&gt; 키와 &lt;em&gt;블러&lt;/em&gt; 이벤트 를 모두 들어보십시오 .</target>
        </trans-unit>
        <trans-unit id="e9a98e7a3d9bcee4fcb0d76fe1f136af14b9717f" translate="yes" xml:space="preserve">
          <source>To flush the first quote from the observable, you call &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt;. Then call &lt;code&gt;detectChanges()&lt;/code&gt; to tell Angular to update the screen.</source>
          <target state="translated">Observable에서 첫 번째 따옴표를 플러시하려면 &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick ()&lt;/a&gt; 을 호출 합니다. 그런 다음 &lt;code&gt;detectChanges()&lt;/code&gt; 를 호출 하여 Angular에 화면을 업데이트하도록 지시하십시오.</target>
        </trans-unit>
        <trans-unit id="ba34c5be9ff1d603c4140d7b3f5b608439a0b39b" translate="yes" xml:space="preserve">
          <source>To flush the first quote from the observable, you call &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;. Then call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to tell Angular to update the screen.</source>
          <target state="translated">Observable에서 첫 번째 따옴표를 플러시하려면 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 을 호출하십시오 . 그런 다음 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 를 호출 하여 Angular에 화면을 업데이트하도록 지시하십시오.</target>
        </trans-unit>
        <trans-unit id="fc7ba23765221be6372d0b33a6a7c1abada5cdf3" translate="yes" xml:space="preserve">
          <source>To follow along with the tutorial, clone the &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt; repository and apply the steps as you go.</source>
          <target state="translated">학습서와 함께 수행하려면 &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt; 저장소를 복제 하고 단계를 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="50c790d75defb0a4ec3aa8c5265b6f9346b5307e" translate="yes" xml:space="preserve">
          <source>To follow this pattern, import the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper with the other testing symbols.</source>
          <target state="translated">이 패턴을 따르려면 다른 테스트 기호와 함께 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 도우미를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="9b1af402c6293628864632c2a47eafb2c2205f1f" translate="yes" xml:space="preserve">
          <source>To follow this pattern, import the &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; helper with the other testing symbols.</source>
          <target state="translated">이 패턴을 따르려면 다른 테스트 기호와 함께 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 도우미를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="197fa7f05797899c6180d16a0f754704e2a3ef11" translate="yes" xml:space="preserve">
          <source>To gather the user's name and address, set the &lt;code&gt;checkoutForm&lt;/code&gt; property with a form model containing &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; fields, using the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt;&lt;code&gt;group()&lt;/code&gt; method. Add this between the curly braces, &lt;code&gt;{}&lt;/code&gt;, of the constructor.</source>
          <target state="translated">사용자의 이름과 주소를 수집하려면 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; &lt;code&gt;group()&lt;/code&gt; 메서드를 사용하여 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;address&lt;/code&gt; 필드가 포함 된 양식 모델로 &lt;code&gt;checkoutForm&lt;/code&gt; 속성을 설정합니다 . 생성자의 중괄호 &lt;code&gt;{}&lt;/code&gt; 사이에 이것을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="cf9ff0efb094b48a98c3e1a083320941ab68e37d" translate="yes" xml:space="preserve">
          <source>To generate a cart service, right click on the &lt;code&gt;app&lt;/code&gt; folder, choose &lt;code&gt;Angular Generator&lt;/code&gt;, and choose &lt;code&gt;Service&lt;/code&gt;. Name the new service &lt;code&gt;cart&lt;/code&gt;.</source>
          <target state="translated">카트 서비스를 생성하려면 &lt;code&gt;app&lt;/code&gt; 폴더를 마우스 오른쪽 버튼으로 클릭 하고 &lt;code&gt;Angular Generator&lt;/code&gt; 를 선택한 다음 &lt;code&gt;Service&lt;/code&gt; 를 선택하십시오 . 새 서비스 &lt;code&gt;cart&lt;/code&gt; 이름을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="0e9bedad15ebc538d9e68cbdd28af270587693f3" translate="yes" xml:space="preserve">
          <source>To generate a coverage report run the following command in the root of your project.</source>
          <target state="translated">적용 범위 보고서를 생성하려면 프로젝트 루트에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="abf26b47cd0c5e68c8c79d0daf2df1036fa78b7a" translate="yes" xml:space="preserve">
          <source>To generate a new random user ID, run the following command:</source>
          <target state="translated">새로운 임의의 사용자 ID를 생성하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="8acafccdcb332ce70715cbf29a3839a0c89102b8" translate="yes" xml:space="preserve">
          <source>To get &lt;code&gt;Node.js&lt;/code&gt;, go to &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Node.js&lt;/code&gt; 를 얻으려면 &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt; 로 이동 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4764c56a7c4aaf167d80ff03108babf2926d5ad6" translate="yes" xml:space="preserve">
          <source>To get access to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; and the overall form status, declare a &lt;a href=&quot;template-reference-variables&quot;&gt;template reference variable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 및 전체 양식 상태에 액세스하려면 &lt;a href=&quot;template-reference-variables&quot;&gt;템플릿 참조 변수를&lt;/a&gt; 선언 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0e9f4a06c6902eaaa4816e3c94cc563103857fe3" translate="yes" xml:space="preserve">
          <source>To get around this problem you can use TypeScript path mapping to tell TypeScript that it should load some modules from a specific location. List all the peer dependencies that your library uses in the workspace TypeScript configuration file &lt;code&gt;./tsconfig.json&lt;/code&gt;, and point them at the local copy in the app's &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">이 문제를 해결하려면 TypeScript 경로 매핑을 사용하여 특정 위치에서 일부 모듈을로드해야한다고 TypeScript에 알릴 수 있습니다. 라이브러리가 작업 영역 TypeScript 구성 파일 &lt;code&gt;./tsconfig.json&lt;/code&gt; 에서 사용하는 모든 피어 종속성을 나열 하고 앱의 &lt;code&gt;node_modules&lt;/code&gt; 폴더 에있는 로컬 사본을 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="43487c0abf05865bdae999a7256422a42f15d57c" translate="yes" xml:space="preserve">
          <source>To get information from a route:</source>
          <target state="translated">경로에서 정보를 얻으려면 :</target>
        </trans-unit>
        <trans-unit id="c620c03d023234ed2391242307f1d8712d8a8439" translate="yes" xml:space="preserve">
          <source>To get started with adding Angular animations to your project, import the animation-specific modules along with standard Angular functionality.</source>
          <target state="translated">프로젝트에 Angular 애니메이션 추가를 시작하려면 표준 Angular 기능과 함께 애니메이션 관련 모듈을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="26d943fe23a3c998bd39d5a7b1693dbae57fe95c" translate="yes" xml:space="preserve">
          <source>To get the most out of property binding, you should be familiar with the following:</source>
          <target state="translated">속성 바인딩을 최대한 활용하려면 다음 사항에 익숙해야합니다.</target>
        </trans-unit>
        <trans-unit id="57b307d0cc30742af6af1ff6a8b0c84e051d00eb" translate="yes" xml:space="preserve">
          <source>To get the most out of two-way binding, you should have a basic understanding of the following concepts:</source>
          <target state="translated">양방향 바인딩을 최대한 활용하려면 다음 개념에 대한 기본적인 이해가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="a92da86b8670ce6226a30d95533e45b223dd6bc1" translate="yes" xml:space="preserve">
          <source>To give users a way to open the popup, add a &quot;Contact&quot; link to the &lt;code&gt;AppComponent&lt;/code&gt; template.</source>
          <target state="translated">사용자에게 팝업을 여는 방법을 제공하려면 &lt;code&gt;AppComponent&lt;/code&gt; 템플릿에 &quot;연락처&quot;링크를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="ebaa7cffbaaeda8aa8e693d01a32822b130caded" translate="yes" xml:space="preserve">
          <source>To group the &lt;code&gt;Crisis Center&lt;/code&gt; management routes under the &lt;code&gt;admin&lt;/code&gt; path a component is unnecessary. Additionally, a &lt;em&gt;component-less&lt;/em&gt; route makes it easier to &lt;a href=&quot;router-tutorial-toh#can-activate-child-guard&quot;&gt;guard child routes&lt;/a&gt;.</source>
          <target state="translated">그룹에 &lt;code&gt;Crisis Center&lt;/code&gt; 세 이하 관리 경로 &lt;code&gt;admin&lt;/code&gt; 경로 구성 요소가 필요하지 않습니다. 또한 &lt;em&gt;구성 요소가없는&lt;/em&gt; 경로를 사용하면 &lt;a href=&quot;router-tutorial-toh#can-activate-child-guard&quot;&gt;하위 경로를&lt;/a&gt; 보다 쉽게 보호 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22605a20b1a22f239c1e3107167d2597f5c39ded" translate="yes" xml:space="preserve">
          <source>To guard against a lazy loaded module re-importing &lt;code&gt;GreetingModule&lt;/code&gt;, add the following &lt;code&gt;GreetingModule&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;GreetingModule&lt;/code&gt; 을 다시 가져 오는 지연로드 모듈을 방지하려면 다음 &lt;code&gt;GreetingModule&lt;/code&gt; 생성자를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="77ca585f495413c83c85661daa403686e9bd57f1" translate="yes" xml:space="preserve">
          <source>To guard against minification problems, tell Angular explicitly that it should inject an instance of the &lt;code&gt;MovieService&lt;/code&gt; in the first parameter.</source>
          <target state="translated">축소 문제를 방지하려면 Angular에게 첫 번째 매개 변수에 &lt;code&gt;MovieService&lt;/code&gt; 인스턴스를 주입해야한다고 명시 적으로 알리십시오 .</target>
        </trans-unit>
        <trans-unit id="46e1437a434c141916bb48f0aca2a8131e3b48d1" translate="yes" xml:space="preserve">
          <source>To handle the navigation from one &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt; to the next, you use the Angular &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;. The &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; enables navigation by interpreting a browser URL as an instruction to change the view.</source>
          <target state="translated">하나 개에서 탐색을 처리하기 위해 &lt;a href=&quot;glossary#view&quot;&gt;보기&lt;/a&gt; 다음에, 당신은 각도 사용하는 &lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt; . &lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt; 보기를 변경하는 명령으로 브라우저의 URL을 해석하여 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0483a13b68a98141b413a5592409e590323ff6ac" translate="yes" xml:space="preserve">
          <source>To help determine whether your proxy is working as intended, set the &lt;code&gt;logLevel&lt;/code&gt; option. For example:</source>
          <target state="translated">프록시가 의도 한대로 작동하는지 판별하려면 &lt;code&gt;logLevel&lt;/code&gt; 옵션을 설정하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ef7a832a2ae76c1a243ec1b9f05e550953889fdf" translate="yes" xml:space="preserve">
          <source>To help ensure that you have sufficient time and a clear path to update, this is our deprecation policy:</source>
          <target state="translated">충분한 시간과 명확한 업데이트 경로를 보장하기 위해 이것이 사용 중단 정책입니다.</target>
        </trans-unit>
        <trans-unit id="b18eb17f8c80dcf33ac422b8959463f27ab98a1d" translate="yes" xml:space="preserve">
          <source>To help you future-proof your apps, the following table lists all deprecated APIs and features, organized by the release in which they are candidates for removal. Each item is linked to the section later in this guide that describes the deprecation reason and replacement options.</source>
          <target state="translated">앱을 미래에 대비할 수 있도록 다음 표에는 더 이상 사용되지 않는 모든 API 및 기능이 제거 대상인 릴리스별로 구성되어 있습니다. 각 항목은이 안내서의 뒷부분에 나오는 지원 중단 사유 및 교체 옵션에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d5b3bbad8bfc4eb6cea8091361ccfc84c96c7368" translate="yes" xml:space="preserve">
          <source>To help you get going, the following steps use predefined product data and methods from the &lt;code&gt;product-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">다음 단계에서는 &lt;code&gt;product-list.component.ts&lt;/code&gt; 파일 의 사전 정의 된 제품 데이터 및 메소드를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="c859073c02740773e64bc37041c26a933e4411f1" translate="yes" xml:space="preserve">
          <source>To help you get going, the following steps use predefined product data from the &lt;code&gt;products.ts&lt;/code&gt; file (already created in StackBlitz example) and methods from the &lt;code&gt;product-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">진행을 돕기 위해 다음 단계에서는 &lt;code&gt;products.ts&lt;/code&gt; 파일 (이미 StackBlitz 예제에서 생성됨)의 사전 정의 된 제품 데이터 와 &lt;code&gt;product-list.component.ts&lt;/code&gt; 파일의 메서드를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="60c4d75becc591cb9eeb0c81e6b707b5eb0eb96a" translate="yes" xml:space="preserve">
          <source>To host an Angular app on another web host, upload or send the files to the host. Because you are building a single page application, you'll also need to make sure you redirect any invalid URLs to your &lt;code&gt;index.html&lt;/code&gt; file. Read more about development and distribution of your application in the &lt;a href=&quot;../guide/build&quot;&gt;Building &amp;amp; Serving&lt;/a&gt; and &lt;a href=&quot;../guide/deployment&quot;&gt;Deployment&lt;/a&gt; guides.</source>
          <target state="translated">다른 웹 호스트에서 Angular 앱을 호스팅하려면 파일을 호스트에 업로드하거나 보냅니다. 단일 페이지 애플리케이션을 구축하고 있기 때문에 잘못된 URL을 &lt;code&gt;index.html&lt;/code&gt; 파일 로 리디렉션해야 합니다. &lt;a href=&quot;../guide/build&quot;&gt;빌드 및 서비스&lt;/a&gt; 및 &lt;a href=&quot;../guide/deployment&quot;&gt;배포&lt;/a&gt; 가이드 에서 애플리케이션 개발 및 배포에 대해 자세히 알아 보세요.</target>
        </trans-unit>
        <trans-unit id="e3fe5b2a2bd58ed1b8655045a4030a46a226b4e3" translate="yes" xml:space="preserve">
          <source>To host an Angular app on another web host, you'll need to upload or send the files to the host. Because you are building a Single Page Application, you'll also need to make sure you redirect any invalid URLs to your &lt;code&gt;index.html&lt;/code&gt; file. Learn more about development and distribution of your application in the &lt;a href=&quot;../guide/build&quot;&gt;Building &amp;amp; Serving&lt;/a&gt; and &lt;a href=&quot;../guide/deployment&quot;&gt;Deployment&lt;/a&gt; guides.</source>
          <target state="translated">다른 웹 호스트에서 Angular 앱을 호스팅하려면 파일을 호스트로 업로드하거나 보내야합니다. 단일 페이지 응용 프로그램을 작성 중이므로 잘못된 URL을 &lt;code&gt;index.html&lt;/code&gt; 파일 로 리디렉션해야 합니다. &lt;a href=&quot;../guide/build&quot;&gt;구축 및 서비스&lt;/a&gt; 및 &lt;a href=&quot;../guide/deployment&quot;&gt;배포&lt;/a&gt; 가이드 에서 응용 프로그램 개발 및 배포에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="ab9bc2d71d7adce3b0a0d3e7dbb746f60c48f829" translate="yes" xml:space="preserve">
          <source>To identify specific &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags in a document, use an attribute selection string in the format &lt;code&gt;&quot;tag_attribute='value string'&quot;&lt;/code&gt;. For example, an &lt;code&gt;attrSelector&lt;/code&gt; value of &lt;code&gt;&quot;name='description'&quot;&lt;/code&gt; matches a tag whose &lt;code&gt;name&lt;/code&gt; attribute has the value &lt;code&gt;&quot;description&quot;&lt;/code&gt;. Selectors are used with the &lt;code&gt;querySelector()&lt;/code&gt; Document method, in the format &lt;code&gt;meta[{attrSelector}]&lt;/code&gt;.</source>
          <target state="translated">문서에서 특정 &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 태그 를 식별하려면 &lt;code&gt;&quot;tag_attribute='value string'&quot;&lt;/code&gt; 형식의 속성 선택 문자열을 사용하십시오 . 예를 들어 &lt;code&gt;attrSelector&lt;/code&gt; 값 &lt;code&gt;&quot;name='description'&quot;&lt;/code&gt; 은 &lt;code&gt;name&lt;/code&gt; 속성에 &lt;code&gt;&quot;description&quot;&lt;/code&gt; 값이 있는 태그와 일치합니다 . 선택기는 &lt;code&gt;meta[{attrSelector}]&lt;/code&gt; 형식으로 &lt;code&gt;querySelector()&lt;/code&gt; Document 메서드 와 함께 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="5f77fdab586f868e4093851acfc1533b76f62e25" translate="yes" xml:space="preserve">
          <source>To illustrate the use of &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, edit these parts of your app:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 사용법을 설명하려면 앱의 다음 부분을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="1fbb1f454bb7d2e047050e16a5b5adac1e15336c" translate="yes" xml:space="preserve">
          <source>To illustrate, here's a simplified version of &lt;code&gt;HighlightDirective&lt;/code&gt; from the &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; page.</source>
          <target state="translated">다음 은 &lt;a href=&quot;attribute-directives&quot;&gt;속성 지시문&lt;/a&gt; 페이지 의 간단한 버전의 &lt;code&gt;HighlightDirective&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="d9242c7bce3b2639f0867ea3c0827c2fa3fcc014" translate="yes" xml:space="preserve">
          <source>To implement an interceptor, declare a class that implements the &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">인터셉터를 구현하려면 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 인터페이스 의 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; 메소드 를 구현하는 클래스를 선언하십시오 .</target>
        </trans-unit>
        <trans-unit id="a071c1a6b28b453628fc442e9aeef0402d6cb684" translate="yes" xml:space="preserve">
          <source>To implement an interceptor, declare a class that implements the &lt;code&gt;intercept()&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">인터셉터를 구현하려면 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 인터페이스 의 &lt;code&gt;intercept()&lt;/code&gt; 메서드 를 구현하는 클래스를 선언하십시오 .</target>
        </trans-unit>
        <trans-unit id="aaf041b7e55b65dac1febf1331ff581b95a32993" translate="yes" xml:space="preserve">
          <source>To implement this functionality, you add the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; directive to your template file.</source>
          <target state="translated">이 기능을 구현하려면 템플릿 파일에 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; 지시문을 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="8c15de700229692f85f74f661ebecee10ce1edfa" translate="yes" xml:space="preserve">
          <source>To improve test time and create better isolation across tests, we want to change &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to automatically clean up and tear down the test environment after each test run.</source>
          <target state="translated">테스트 시간을 개선하고 테스트간에 더 나은 격리를 만들기 위해 각 테스트 실행 후 테스트 환경을 자동으로 정리하고 해체하도록 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 를 변경 하려고 합니다.</target>
        </trans-unit>
        <trans-unit id="031feed43cdb2009f3a0aad5253d852e4c762600" translate="yes" xml:space="preserve">
          <source>To improve this behavior, you can pre-fetch data from the server using a resolver so it's ready the moment the route is activated. This also allows you to handle errors before routing to the component. There's no point in navigating to a crisis detail for an &lt;code&gt;id&lt;/code&gt; that doesn't have a record. It'd be better to send the user back to the &lt;code&gt;Crisis List&lt;/code&gt; that shows only valid crisis centers.</source>
          <target state="translated">이 동작을 개선하기 위해 리졸버를 사용하여 서버에서 데이터를 미리 가져 와서 경로가 활성화되는 순간 준비되도록 할 수 있습니다. 또한 구성 요소로 라우팅하기 전에 오류를 처리 할 수 ​​있습니다. 기록이없는 &lt;code&gt;id&lt;/code&gt; 대한 위기 세부 정보를 탐색 할 필요가 없습니다. 유효한 위기 센터 만 보여주는 &lt;code&gt;Crisis List&lt;/code&gt; 사용자를 다시 보내는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="30714f1570102a913e81e387a8e99413184d357d" translate="yes" xml:space="preserve">
          <source>To include differential loading in your application builds, you must configure the Browserslist and TypeScript configuration files in your application project.</source>
          <target state="translated">애플리케이션 빌드에 차등로드를 포함하려면 애플리케이션 프로젝트에서 Browserslist 및 TypeScript 구성 파일을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="69b60d346fb92f51499356b42a9f5d8d37258d56" translate="yes" xml:space="preserve">
          <source>To include the new component, use its selector, &lt;code&gt;app-product-alert&lt;/code&gt;, as you would an HTML element.</source>
          <target state="translated">새 구성 요소를 포함 시키려면 HTML 요소와 마찬가지로 선택기 &lt;code&gt;app-product-alert&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="34af0a1fd16c117a7822f3048b578ce3d82ba1e5" translate="yes" xml:space="preserve">
          <source>To include the new component, use its selector, &lt;code&gt;app-product-alerts&lt;/code&gt;, as you would an HTML element.</source>
          <target state="translated">새 구성 요소를 포함하려면 HTML 요소처럼 선택기 &lt;code&gt;app-product-alerts&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="835dfd12477d853747c300147b3c559302e5eeff" translate="yes" xml:space="preserve">
          <source>To incorporate the feature module into your app, you have to let the root module, &lt;code&gt;app.module.ts&lt;/code&gt;, know about it. Notice the &lt;code&gt;CustomerDashboardModule&lt;/code&gt; export at the bottom of &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;. This exposes it so that other modules can get to it. To import it into the &lt;code&gt;AppModule&lt;/code&gt;, add it to the imports in &lt;code&gt;app.module.ts&lt;/code&gt; and to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">기능 모듈을 앱에 통합하려면 루트 모듈 인 &lt;code&gt;app.module.ts&lt;/code&gt; 에 알려야 합니다. 통지 &lt;code&gt;CustomerDashboardModule&lt;/code&gt; 의 하단에 수출 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; . 이것은 다른 모듈이 접근 할 수 있도록 노출시킵니다. 로 가져 &lt;code&gt;AppModule&lt;/code&gt; 에서 수입에 추가 &lt;code&gt;app.module.ts&lt;/code&gt; 과에 &lt;code&gt;imports&lt;/code&gt; 배열 :</target>
        </trans-unit>
        <trans-unit id="4cfd9eacc73fc98af1d6ddaad6c557a00c462594" translate="yes" xml:space="preserve">
          <source>To inspect the properties of the associated &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; (like the validity state), export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;). You can then access the control using the directive's &lt;code&gt;control&lt;/code&gt; property. However, the most commonly used properties (like &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt;) also exist on the control for direct access. See a full list of properties directly available in &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">관련 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 속성 (예 : 유효성 상태) 을 검사하려면 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 키로 사용하여 지시문을 로컬 템플릿 변수로 내 보냅니다 (예 : &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; ). 그런 다음 지시문의 &lt;code&gt;control&lt;/code&gt; 속성을 사용하여 컨트롤에 액세스 할 수 있습니다 . 그러나 가장 일반적으로 사용되는 속성 (예 : &lt;code&gt;valid&lt;/code&gt; 및 &lt;code&gt;dirty&lt;/code&gt; )은 직접 액세스를위한 컨트롤에도 존재합니다. &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; 에서 직접 사용할 수있는 전체 속성 목록을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d1f76b24bcf5a077b04779a10d2acb122df684c" translate="yes" xml:space="preserve">
          <source>To inspect the properties of the associated &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; (like validity state), export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;). You then access the control using the directive's &lt;code&gt;control&lt;/code&gt; property, but most properties used (like &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt;) fall through to the control anyway for direct access. See a full list of properties directly available in &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">연관된 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 속성 (예 : 유효성 상태) 을 검사하려면 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 키로 사용하여 지시문을 로컬 템플릿 변수로 내보내십시오 (예 : &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; ). 그런 다음 지시문의 &lt;code&gt;control&lt;/code&gt; 속성을 사용하여 컨트롤에 액세스 하지만 ( &lt;code&gt;valid&lt;/code&gt; 및 &lt;code&gt;dirty&lt;/code&gt; 같은) 사용되는 대부분의 속성 은 어쨌든 직접 액세스하기 위해 컨트롤에 적용됩니다. &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; 에서 직접 사용할 수있는 전체 속성 목록을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b490b68e59a6cf96e6000e8feb915a400ca7362b" translate="yes" xml:space="preserve">
          <source>To install Angular on your local system, you need the following:</source>
          <target state="translated">로컬 시스템에 Angular를 설치하려면 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="00d4c0b7f7b79fb7000e4e700fe2af36bcc88023" translate="yes" xml:space="preserve">
          <source>To install the Angular CLI, open a terminal window and run the following command:</source>
          <target state="translated">Angular CLI를 설치하려면 터미널 창을 열고 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="3be4cd44a75c82f831a7fb264bb28d71c6d67aa0" translate="yes" xml:space="preserve">
          <source>To install the CLI using &lt;code&gt;npm&lt;/code&gt;, open a terminal/console window and enter the following command:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; 을 사용하여 CLI를 설치하려면 터미널 / 콘솔 창을 열고 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="978f127332b309b9081001f9ef289a772808bdd2" translate="yes" xml:space="preserve">
          <source>To install the latest version of TypeScript:</source>
          <target state="translated">최신 버전의 TypeScript를 설치하려면</target>
        </trans-unit>
        <trans-unit id="79ca5dd762f8884fdb128fbf222685ff3aa6cc9b" translate="yes" xml:space="preserve">
          <source>To instruct the AOT compiler to use your translation configuration, set the three &quot;i18n&quot; build configuration options in your CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">변환 구성을 사용하도록 AOT 컴파일러에 지시하려면 CLI 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 에서 세 개의 &quot;i18n&quot;빌드 구성 옵션을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="c997f93a9e3f25ee5447a528d3a4c9d013784a57" translate="yes" xml:space="preserve">
          <source>To keep things minimal, this example redirects unauthenticated users to &lt;code&gt;/admin&lt;/code&gt;.</source>
          <target state="translated">최소화하기 위해이 예제는 인증되지 않은 사용자를 &lt;code&gt;/admin&lt;/code&gt; 으로 리디렉션 합니다.</target>
        </trans-unit>
        <trans-unit id="063280d0d5fdd83f12af3f273ae8a53e21cbc89f" translate="yes" xml:space="preserve">
          <source>To keep your component simpler and independent of HTML templates that use pipes, you can, as an alternative, use an &lt;em&gt;impure&lt;/em&gt; pipe to detect changes within composite objects such as arrays, as described in the next section.</source>
          <target state="translated">구성 요소를 더 간단하고 파이프를 사용하는 HTML 템플릿과 독립적으로 유지하려면 다음 섹션에 설명 된대로 &lt;em&gt;불순한&lt;/em&gt; 파이프를 사용하여 배열과 같은 복합 객체 내의 변경 사항을 감지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="adc02e43fb89206e34f149a31df831fe24f69571" translate="yes" xml:space="preserve">
          <source>To lazy load Angular modules, use &lt;code&gt;loadchildren&lt;/code&gt; (instead of &lt;code&gt;component&lt;/code&gt;) in your &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;routes&lt;/code&gt; configuration as follows.</source>
          <target state="translated">Angular 모듈을 지연로드하려면 다음과 같이 &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;routes&lt;/code&gt; 구성 에서 &lt;code&gt;component&lt;/code&gt; 대신 &lt;code&gt;loadchildren&lt;/code&gt; 을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="93c73667a03be3abfe828fead3712d61e72bf9e6" translate="yes" xml:space="preserve">
          <source>To learn about frequently used Angular NgModules and how to import them into your app, see &lt;a href=&quot;frequent-ngmodules&quot;&gt;Frequently-used modules&lt;/a&gt;.</source>
          <target state="translated">자주 사용되는 Angular NgModules와이를 앱으로 가져 오는 방법에 대해 알아 보려면 자주 사용 &lt;a href=&quot;frequent-ngmodules&quot;&gt;되는 모듈을&lt;/a&gt; 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="ce1bee037e6dd779c9223edb98da376759b86686" translate="yes" xml:space="preserve">
          <source>To learn about loading NgModules eagerly when the app starts, or lazy-loading NgModules asynchronously by the router, see &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy-loading feature modules&lt;/a&gt;.</source>
          <target state="translated">앱이 시작될 때 NgModules를 열심히로드하거나 라우터에서 NgModules를 비동기 적으로 지연로드하는 방법에 대해 알아 보려면 &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;지연로드 기능 모듈을&lt;/a&gt; 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="bf39b85c560a16fe59f3305b45f410f4c374fed1" translate="yes" xml:space="preserve">
          <source>To learn how to create a singleton service to use in NgModules, see &lt;a href=&quot;singleton-services&quot;&gt;Making a service a singleton&lt;/a&gt;.</source>
          <target state="translated">NgModules에서 사용할 싱글 톤 서비스를 만드는 방법을 알아 보려면 &lt;a href=&quot;singleton-services&quot;&gt;서비스를 싱글 톤으로 만들기를&lt;/a&gt; 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="8ed29944f1d63987331c5c1a1636ae0d099c1c86" translate="yes" xml:space="preserve">
          <source>To learn how to use shared modules to organize and streamline your code, see &lt;a href=&quot;sharing-ngmodules&quot;&gt;Sharing NgModules in an app&lt;/a&gt;.</source>
          <target state="translated">공유 모듈을 사용하여 코드를 구성하고 간소화하는 방법을 알아 보려면 &lt;a href=&quot;sharing-ngmodules&quot;&gt;앱에서 NgModules 공유를&lt;/a&gt; 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="2b8673bf705879ba50b6543052c6c5d67172734b" translate="yes" xml:space="preserve">
          <source>To learn more about JavaScript modules, see &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 In Depth: Modules&lt;/a&gt;. For the module specification, see the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-modules&quot;&gt;6th Edition of the ECMAScript standard&lt;/a&gt;.</source>
          <target state="translated">JavaScript 모듈에 대한 자세한 내용은 &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 In Depth : Modules를&lt;/a&gt; 참조하십시오 . 모듈 사양에 대해서는 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-modules&quot;&gt;ECMAScript 표준&lt;/a&gt; 의 6 판을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1677d547af7492d218688d8fc496408b0a0b031e" translate="yes" xml:space="preserve">
          <source>To learn more about other browsers that are service worker ready, see the &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt; page and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN docs&lt;/a&gt;.</source>
          <target state="translated">서비스 작업자가 준비한 다른 브라우저에 대한 자세한 내용은 &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;사용 가능&lt;/a&gt; 페이지 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c84c9b491abea1ff59708036d037ad515cf9fdbd" translate="yes" xml:space="preserve">
          <source>To learn more about providers, see the &lt;a href=&quot;../guide/providers&quot;&gt;Providers section&lt;/a&gt;. To learn more about injectors, see the &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">제공자에 대한 자세한 내용은 &lt;a href=&quot;../guide/providers&quot;&gt;제공자 섹션을&lt;/a&gt; 참조하십시오 . 인젝터에 대한 자세한 내용은 &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f76858a7e260841160caa41bedc9711829079ce9" translate="yes" xml:space="preserve">
          <source>To learn more about reactive forms, see the following guides:</source>
          <target state="translated">반응 형에 대한 자세한 내용은 다음 안내서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="59a572cbe7b9a3e97969793c2bc9cfdeb16ab418" translate="yes" xml:space="preserve">
          <source>To learn more about template-driven forms, see the following guides:</source>
          <target state="translated">템플릿 기반 양식에 대한 자세한 내용은 다음 안내서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="738b9eb031dded491e17886663caa1ff29e71ce4" translate="yes" xml:space="preserve">
          <source>To learn more about the full capabilities of the CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI command reference&lt;/a&gt;.</source>
          <target state="translated">CLI의 모든 기능에 대한 자세한 내용은 &lt;a href=&quot;cli&quot;&gt;CLI 명령 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="50c0e4f29bef7d012d60683d14c5ab14934615fb" translate="yes" xml:space="preserve">
          <source>To learn more about the root NgModule, see &lt;a href=&quot;bootstrapping&quot;&gt;Launching an app with a root NgModule&lt;/a&gt;.</source>
          <target state="translated">루트 NgModule에 대해 자세히 알아 보려면 루트 NgModule을 사용 &lt;a href=&quot;bootstrapping&quot;&gt;하여 앱 시작을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="576871e9688e5fb9067f532deda27073b34e9a11" translate="yes" xml:space="preserve">
          <source>To learn more about using pipes for internationalization (i18n) efforts, see &lt;a href=&quot;i18n#i18n-pipes&quot;&gt;formatting data based on locale&lt;/a&gt;.</source>
          <target state="translated">국제화 (i18n) 작업에 파이프를 사용하는 방법에 대한 자세한 내용은 &lt;a href=&quot;i18n#i18n-pipes&quot;&gt;로케일 기반 데이터 형식 지정을&lt;/a&gt; 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="c3f50de3d99d51fc3307e8adf60a7d37ef18510f" translate="yes" xml:space="preserve">
          <source>To learn more about using the Angular CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI Overview&lt;/a&gt;. In addition to creating the initial workspace and app scaffolding, you can use the CLI to generate Angular code such as components and services. The CLI supports the full development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">Angular CLI 사용에 대한 자세한 내용은 &lt;a href=&quot;cli&quot;&gt;CLI 개요를&lt;/a&gt; 참조하십시오 . 초기 작업 영역 및 앱 스캐 폴딩을 만드는 것 외에도 CLI를 사용하여 구성 요소 및 서비스와 같은 각도 코드를 생성 할 수 있습니다. CLI는 빌드, 테스트, 번들링 및 배포를 포함한 전체 개발주기를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="416a58e3ce60c40d39bdf10d063589c334e40ab1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;architecture-services&quot;&gt;서비스 및 종속성 주입 소개를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e694d6c1d32b6b56ce020c646c48af952c618210" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;browser-support&quot;&gt;브라우저 지원을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5d547564ae49438c7f5583123e361486b37cdfb" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;form-validation&quot;&gt;양식 유효성 검사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fef2215443d40254464acc94fc7847b670e932f8" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;inputs-outputs&quot;&gt;Input and Output Properties&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;inputs-outputs&quot;&gt;입력 및 출력 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ddcfcf686cef986dad66c32adad5e8191043ecc1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;inputs-outputs&quot;&gt;input and output properties&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;inputs-outputs&quot;&gt;입력 및 출력 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b51947679f07f8322ce7f3740f084897727afa5" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;lifecycle-hooks&quot;&gt;수명주기 후크를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dac4e123cca0d4a59d5f6f873a05e1a76d9583b" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;ngmodules&quot;&gt;NgModules를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2218a8556fffcfa1f6d34419d68f2922869161d" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;observables&quot;&gt;Observables&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;observables&quot;&gt;Observables를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1076876ca0b526aa98a8f286bda2dbf9a2d471f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;pipes&quot;&gt;파이프를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a1bfb784682ebe266242fbdb242bb6f408ed07f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;router&quot;&gt;라우팅 및 탐색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b914fb9f887c33faf04a08f5c6bcad4ae48f1d7" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;schematics&quot;&gt;Schematics Overview&lt;/a&gt; and &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;schematics&quot;&gt;회로도 개요&lt;/a&gt; 및 &lt;a href=&quot;schematics-for-libraries&quot;&gt;라이브러리 회로도를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d010cfde7bc2c506df423549e631c7008431f001" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;structural-directives&quot;&gt;구조 지시문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4570551808faa6eea6e2ab0181ccbcaaa5c2263" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;Input and Output Properties&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;입력 및 출력 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecceabc50e42b7eefd96c26c6bf1f43187e84d1f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input and output properties&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;입력 및 출력 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="49bdcdc84e41d471767e7d1270cab230b0e8a7f1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;universal&quot;&gt;Angular Universal: server-side rendering&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;universal&quot;&gt;Angular Universal : 서버 측 렌더링을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb003e20f49d50feecb8fdc386ebe9f76301de6f" translate="yes" xml:space="preserve">
          <source>To limit access to a service, consider lazy loading the NgModule that provides that service. See &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;How do I restrict service scope to a module?&lt;/a&gt; for more information.</source>
          <target state="translated">서비스에 대한 액세스를 제한하려면 해당 서비스를 제공하는 NgModule의 지연 로딩을 고려하십시오. &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;서비스 범위를 모듈로 제한하는 방법을&lt;/a&gt; 참조하십시오 . 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="176131b1c166c15dd52ca2270019e00646222f93" translate="yes" xml:space="preserve">
          <source>To link our builder implementation with its schema and name, we need to create a &lt;em&gt;builder definition&lt;/em&gt; file, which we can point to in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">빌더 구현을 스키마 및 이름과 연결하려면 &lt;code&gt;package.json&lt;/code&gt; 에서 지정할 수 있는 &lt;em&gt;빌더 정의&lt;/em&gt; 파일 을 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8ef171fef0328a2cd5ad545be79413b8427d3d1b" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz defined by a named &lt;code&gt;stackblitz.json&lt;/code&gt; file, set the &lt;code&gt;stackblitz&lt;/code&gt; attribute. The following example links to the Stackblitz defined by &lt;code&gt;second.stackblitz.json&lt;/code&gt; in the current guide's directory.</source>
          <target state="translated">명명 된 &lt;code&gt;stackblitz.json&lt;/code&gt; 파일로 정의 된 Stackblitz에 연결하려면 &lt;code&gt;stackblitz&lt;/code&gt; 속성을 설정하십시오 . 다음 예제 는 현재 안내서의 디렉토리에서 &lt;code&gt;second.stackblitz.json&lt;/code&gt; 에 의해 정의 된 Stackblitz 에 연결됩니다 .</target>
        </trans-unit>
        <trans-unit id="d0dfc4d2bbeb415d911b77bd57e23158017465af" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz in a folder whose name is not the same as the current guide page, set the &lt;code&gt;name&lt;/code&gt; attribute to the name of that folder.</source>
          <target state="translated">현재 안내서 페이지와 이름이 다른 폴더의 Stackblitz에 연결하려면 &lt;code&gt;name&lt;/code&gt; 속성을 해당 폴더의 이름으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c16acaaf6113414a6a5a50402e666ea13182d9b" translate="yes" xml:space="preserve">
          <source>To localize your app, follow these general steps:</source>
          <target state="translated">앱을 현지화하려면 다음 일반 단계를 따르세요.</target>
        </trans-unit>
        <trans-unit id="c09afb9997a15f7c7d0a2d0a4beb740078d29af0" translate="yes" xml:space="preserve">
          <source>To maintain the relationship between the component and its token while still distinguishing between them, the recommended style is to use the component base name with the suffix &quot;Token&quot; to name your lightweight injection tokens: &quot;LibHeaderToken&quot;.</source>
          <target state="translated">구성 요소와 토큰 사이의 관계를 유지하면서 이들을 구별하기 위해 권장되는 스타일은 접미사 &quot;Token&quot;이있는 구성 요소 기본 이름을 사용하여 경량 주입 토큰의 이름을 &quot;LibHeaderToken&quot;으로 지정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9e806bc9cf5ce821c72637bad288f0c8a385e3b7" translate="yes" xml:space="preserve">
          <source>To make a request with progress events enabled, you can create an instance of &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; option set true to enable tracking of progress events.</source>
          <target state="translated">진행 이벤트를 사용하여 요청을 작성하려면 진행 이벤트 추적을 사용 하도록 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; 옵션을 true로 설정 하여 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 인스턴스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4644078867fa768095fca87f32259edcca09d733" translate="yes" xml:space="preserve">
          <source>To make a request with progress events enabled, you can create an instance of &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;reportProgress&lt;/code&gt; option set true to enable tracking of progress events.</source>
          <target state="translated">진행 이벤트가 활성화 된 요청을하려면, 당신은의 인스턴스를 만들 수 있습니다 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 에를 와 &lt;code&gt;reportProgress&lt;/code&gt; 의 진행 이벤트의 추적을 활성화하려면 true로 설정 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="2d1f94a35fe29cf68215d8ce11be523428a2104c" translate="yes" xml:space="preserve">
          <source>To make changes to the documentation pages and sample code, clone the &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github repository&lt;/a&gt; and go to the &lt;code&gt;aio/&lt;/code&gt; folder.</source>
          <target state="translated">설명서 페이지와 샘플 코드를 변경하려면 &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github 리포지토리를&lt;/a&gt; 복제 하고 &lt;code&gt;aio/&lt;/code&gt; 폴더 로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad1bed88cabd87c7ef61bbd728ce927c47d305ed" translate="yes" xml:space="preserve">
          <source>To make each product name a link to product details, add the &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; element and set its title to be the product's name by using the property binding &lt;code&gt;[ ]&lt;/code&gt; syntax, as follows:</source>
          <target state="translated">추가 각 제품명 제품 상세 링크를 만들려면 &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 요소와 결합 속성을 사용하여 제품의 이름으로 제목을 설정 &lt;code&gt;[ ]&lt;/code&gt; 구 등을 다음 :</target>
        </trans-unit>
        <trans-unit id="96f7390b983153eaec2a94dc845f76d740c53ee6" translate="yes" xml:space="preserve">
          <source>To make each product name a link to product details, add the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element and set its title to be the product's name by using the property binding &lt;code&gt;[ ]&lt;/code&gt; syntax, as follows:</source>
          <target state="translated">각 제품 이름을 제품 세부 정보에 대한 링크로 만들려면 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 요소를 추가하고 다음과 같이 속성 바인딩 &lt;code&gt;[ ]&lt;/code&gt; 구문 을 사용하여 제목을 제품 이름 으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0133990127a445b9c4636bf47add6269aff05d0f" translate="yes" xml:space="preserve">
          <source>To make library code reusable you must define a public API for it. This &quot;user layer&quot; defines what is available to consumers of your library. A user of your library should be able to access public functionality (such as NgModules, service providers and general utility functions) through a single import path.</source>
          <target state="translated">라이브러리 코드를 재사용 가능하게하려면 공개 API를 정의해야합니다. 이 &quot;사용자 계층&quot;은 라이브러리 소비자가 사용할 수있는 항목을 정의합니다. 라이브러리 사용자는 단일 가져 오기 경로를 통해 공용 기능 (예 : NgModules, 서비스 제공 업체 및 일반 유틸리티 기능)에 액세스 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="3c46891baa0e78d054423a53f637c9fa5a233ed8" translate="yes" xml:space="preserve">
          <source>To make more complex forms, use the following steps.</source>
          <target state="translated">더 복잡한 양식을 만들려면 다음 단계를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f4c06ba3e64fe70ec544df6b51f17ee32a730f00" translate="yes" xml:space="preserve">
          <source>To make sure that the &lt;code&gt;HeroService&lt;/code&gt; can provide this service, register it with the &lt;em&gt;injector&lt;/em&gt;, which is the object that is responsible for choosing and injecting the provider where the app requires it.</source>
          <target state="translated">있는지 확인하십시오 &lt;code&gt;HeroService&lt;/code&gt; 는 이 서비스를 제공에 등록 할 수 &lt;em&gt;인젝터&lt;/em&gt; 응용 프로그램이 그것을 필요로하는 업체를 선택하고 주입을 담당하는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="abe2d5f3112ac6f160f5eaad338cd564e7929599" translate="yes" xml:space="preserve">
          <source>To make sure there is only one instance of &lt;code&gt;NewLogger&lt;/code&gt;, alias &lt;code&gt;OldLogger&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;NewLogger&lt;/code&gt; 인스턴스가 하나만 있는지 확인하려면 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 옵션을 사용하여 OldLogger의 별명을 &lt;code&gt;OldLogger&lt;/code&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9aa5469016b8426067be0d8dc497d98066fb4a6c" translate="yes" xml:space="preserve">
          <source>To make sure there is only one instance of &lt;code&gt;NewLogger&lt;/code&gt;, alias &lt;code&gt;OldLogger&lt;/code&gt; with the &lt;code&gt;useExisting&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;NewLogger&lt;/code&gt; 인스턴스가 하나만 있는지 확인하려면 &lt;code&gt;useExisting&lt;/code&gt; 옵션을 사용하여 OldLogger 별칭을 &lt;code&gt;OldLogger&lt;/code&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="e85568359a0fbe5ee087b7635e1885b559b60aea" translate="yes" xml:space="preserve">
          <source>To make sure your schematics source files get compiled into the library bundle, add the following scripts to the &lt;code&gt;package.json&lt;/code&gt; file in your library project's root folder (&lt;code&gt;projects/my-lib&lt;/code&gt;).</source>
          <target state="translated">회로도 소스 파일을 라이브러리 번들로 컴파일하려면 라이브러리 프로젝트의 루트 폴더 ( &lt;code&gt;projects/my-lib&lt;/code&gt; ) 에있는 &lt;code&gt;package.json&lt;/code&gt; 파일에 다음 스크립트를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b618bd0150119d92c15de99c07c66b9d5d5df18d" translate="yes" xml:space="preserve">
          <source>To make the &quot;Notify Me&quot; button work, you need to configure two things:</source>
          <target state="translated">&quot;알림&quot;버튼이 작동하게하려면 다음 두 가지를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="c63bfd6ff80b0594b74ebefc3198e01f8f521a91" translate="yes" xml:space="preserve">
          <source>To make the app navigate to the dashboard automatically, add the following route to the &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; array.</source>
          <target state="translated">앱이 자동으로 대시 보드로 이동하도록하려면 다음 경로를 &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f13fc1c29e96e1dfdbe3eed259eadf83ed2de57e" translate="yes" xml:space="preserve">
          <source>To make the change less abrupt, we need to define an animation &lt;em&gt;transition&lt;/em&gt; to specify the changes that occur between one state and another over a period of time. The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function accepts two arguments: the first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; steps.</source>
          <target state="translated">갑작스런 변화를 줄이려면 애니메이션 &lt;em&gt;전환&lt;/em&gt; 을 정의하여 일정 기간 동안 한 상태와 다른 상태간에 발생하는 변화를 지정해야합니다. &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 첫 번째 인수는 두 개의 전이 상태 사이의 방향을 정의하는 표현을 허용하고, 두 번째 인수는 하나 또는 일련의 허용 : 함수는 두 개의 인수를 받아 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 단계.</target>
        </trans-unit>
        <trans-unit id="0f497517c53253fb57aa220031bd985b5070e07b" translate="yes" xml:space="preserve">
          <source>To make the code in a JavaScript module available to other modules, use an &lt;code&gt;export&lt;/code&gt; statement at the end of the relevant code in the module, such as the following:</source>
          <target state="translated">JavaScript 모듈의 코드를 다른 모듈에서 사용할 수있게 하려면 다음과 같이 모듈의 관련 코드 끝에 &lt;code&gt;export&lt;/code&gt; 문을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8bcf14d372529e2a67e2f9aa251e900cf6621e7d" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we deprecate APIs and features for a period of time before removing them. This gives you time to update your apps to the latest APIs and best practices.</source>
          <target state="translated">이러한 전환을 최대한 쉽게하기 위해 API와 기능을 제거하기 전에 일정 기간 동안 API 및 기능을 더 이상 사용하지 않습니다. 이를 통해 앱을 최신 API 및 모범 사례로 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7d74082b91da794e2772b1b64caafcf244578ba" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we make these commitments to you:</source>
          <target state="translated">이러한 전환을 가능한 한 쉽게하기 위해 다음과 같은 약속을합니다.</target>
        </trans-unit>
        <trans-unit id="e4342ac072084a99b08c67145d8f7f9d46ebc4bf" translate="yes" xml:space="preserve">
          <source>To make updating easy, we provide complete instructions in the interactive &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;.</source>
          <target state="translated">업데이트를 쉽게하기 위해 대화식 &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt; 에 완전한 지침을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="f346dda78884da2f316927c754a446df557d7e97" translate="yes" xml:space="preserve">
          <source>To make use of all the features of Angular service worker, use the latest versions of Angular and the Angular CLI.</source>
          <target state="translated">Angular 서비스 워커의 모든 기능을 사용하려면 최신 버전의 Angular 및 Angular CLI를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d3a75dfb8b6d5e0a84151719b6bac15ccc94edf4" translate="yes" xml:space="preserve">
          <source>To make your solution reusable, you need to adjust it so that it does not depend on app-specific code. Here are some things to consider in migrating application functionality to a library.</source>
          <target state="translated">솔루션을 재사용 할 수있게하려면 앱 특정 코드에 의존하지 않도록 솔루션을 조정해야합니다. 다음은 응용 프로그램 기능을 라이브러리로 마이그레이션 할 때 고려해야 할 사항입니다.</target>
        </trans-unit>
        <trans-unit id="9f12fc809ed83f10331eb3009c1d1040391b4f98" translate="yes" xml:space="preserve">
          <source>To manage the heroes, create a &lt;code&gt;HeroesModule&lt;/code&gt; with routing in the heroes folder and register it with the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroesModule&lt;/code&gt; 를 관리하려면 Heroes 폴더에 라우팅이 있는 HeroesModule 을 생성 하고 루트 &lt;code&gt;AppModule&lt;/code&gt; 에 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="e01c27c588e2fda534f6630e651b5200cc4fa62a" translate="yes" xml:space="preserve">
          <source>To manually set an app's source locale to one other than the automatic value, follow these steps:</source>
          <target state="translated">앱의 소스 언어를 자동 값이 아닌 다른 언어로 수동으로 설정하려면 다음 단계를 따르세요.</target>
        </trans-unit>
        <trans-unit id="aded88b0986d969878002d25790cac4afe9fb93e" translate="yes" xml:space="preserve">
          <source>To mark a class as a pipe and supply configuration metadata, apply the &lt;a href=&quot;../api/core/pipe&quot;&gt;&lt;code&gt;@Pipe&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;glossary#decorator--decoration&quot;&gt;decorator&lt;/a&gt; to the class. Use &lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt; (the general convention for class names) for the pipe class name, and &lt;a href=&quot;glossary#case-types&quot;&gt;camelCase&lt;/a&gt; for the corresponding &lt;code&gt;name&lt;/code&gt; string. Do not use hyphens in the &lt;code&gt;name&lt;/code&gt;. For details and more examples, see &lt;a href=&quot;styleguide#pipe-names&quot;&gt;Pipe names&lt;/a&gt;.</source>
          <target state="translated">클래스를 파이프로 표시하고 구성 메타 데이터를 제공하려면 &lt;a href=&quot;../api/core/pipe&quot;&gt; &lt;code&gt;@Pipe&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;glossary#decorator--decoration&quot;&gt; 데코레이터&lt;/a&gt; 를 클래스에 적용하십시오 . 사용 &lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt; 파이프 클래스 이름 (클래스 이름에 대한 일반 규칙), 그리고 &lt;a href=&quot;glossary#case-types&quot;&gt;낙타 표기법&lt;/a&gt; 대응에 대한 &lt;code&gt;name&lt;/code&gt; 문자열입니다. &lt;code&gt;name&lt;/code&gt; 하이픈을 사용하지 마십시오 . 자세한 내용과 더 많은 예는 &lt;a href=&quot;styleguide#pipe-names&quot;&gt;파이프 이름을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebb28b48869f066439d945bc03e317d919b03091" translate="yes" xml:space="preserve">
          <source>To mark a value as trusted, inject &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; and call one of the following methods:</source>
          <target state="translated">값을 신뢰할 수있는 것으로 표시하려면 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; 를 주입 하고 다음 방법 중 하나를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="5a56ec05bb8c1989de9d25489aca675135c374d2" translate="yes" xml:space="preserve">
          <source>To mark an attribute for translation, add &lt;code&gt;i18n-&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; in which &lt;em&gt;attribute&lt;/em&gt; is the attribute to translate. The following example shows how to mark the &lt;code&gt;title&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag by adding &lt;code&gt;i18n-title&lt;/code&gt;:</source>
          <target state="translated">번역에 대한 속성을 표시하려면 추가 &lt;code&gt;i18n-&lt;/code&gt; &lt;em&gt;속성이&lt;/em&gt; 있는 &lt;em&gt;속성이&lt;/em&gt; 번역하는 속성입니다. 다음 예제는 &lt;code&gt;i18n-title&lt;/code&gt; 을 추가 하여 &lt;code&gt;img&lt;/code&gt; 태그에 &lt;code&gt;title&lt;/code&gt; 속성 을 표시하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="826ff064aa36b11928c6420ce581e8abd48d94ef" translate="yes" xml:space="preserve">
          <source>To mark an attribute for translation, add an attribute in the form of &lt;code&gt;i18n-x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the name of the attribute to translate. The following example shows how to mark the &lt;code&gt;title&lt;/code&gt; attribute for translation by adding the &lt;code&gt;i18n-title&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag:</source>
          <target state="translated">번역 할 속성을 표시하려면 &lt;code&gt;i18n-x&lt;/code&gt; 형식으로 속성을 추가하십시오. 여기서 &lt;code&gt;x&lt;/code&gt; 는 번역 할 속성의 이름입니다. 다음 예는 &lt;code&gt;img&lt;/code&gt; 태그 에 &lt;code&gt;i18n-title&lt;/code&gt; 속성을 추가하여 번역 할 &lt;code&gt;title&lt;/code&gt; 속성 을 표시하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="d8d57de94256bf3111f375a6f4f8c16a2bbdcc50" translate="yes" xml:space="preserve">
          <source>To mark the greeting for translation, add the &lt;code&gt;i18n&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">인사말을 번역 표시하려면 &lt;code&gt;i18n&lt;/code&gt; 속성을 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 태그에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="204d695937e174c030d578e79a70b8cfdaa9fdde" translate="yes" xml:space="preserve">
          <source>To maximize compatibility, you could ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers, however, shouldn't have to pay the price of increased bundle size that comes with polyfills they don't need. Differential loading, which is supported by default in Angular CLI version 8 and higher, solves this problem.</source>
          <target state="translated">호환성을 최대화하기 위해 컴파일 된 모든 코드와 필요한 폴리 필이 포함 된 단일 번들을 제공 할 수 있습니다. 그러나 최신 브라우저를 사용하는 사용자는 필요하지 않은 폴리 필과 함께 제공되는 번들 크기를 늘릴 필요가 없습니다. Angular CLI 버전 8 이상에서 기본적으로 지원되는 차등 로딩은이 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="732d4da603a82c47581ceed2fef8436b0873e900" translate="yes" xml:space="preserve">
          <source>To maximize compatibility, you could ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers, however, shouldn't have to pay the price of increased bundle size that comes with polyfills they don't need. Differential loading, which is supported in Angular CLI version 8 and higher, can help solve this problem.</source>
          <target state="translated">호환성을 최대화하기 위해 컴파일 된 모든 코드와 필요한 모든 폴리 필이 포함 된 단일 번들을 제공 할 수 있습니다. 그러나 최신 브라우저를 사용하는 사용자는 필요하지 않은 폴리 필과 함께 제공되는 증가 된 번들 크기의 대가를 지불 할 필요가 없습니다. Angular CLI 버전 8 이상에서 지원되는 차등로드는이 문제를 해결하는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4e9737bd2b2dc2a5cd6f3a9fc82ef841838daab" translate="yes" xml:space="preserve">
          <source>To merge the completed translations into the app, use the &lt;a href=&quot;glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt; to build a copy of the app's distributable files for each locale. The build process replaces the original text with translated text, and sets the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; token for each distributable copy of the app. It also loads and registers the locale data.</source>
          <target state="translated">완성 된 번역을 앱에 병합하려면 &lt;a href=&quot;glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt; 를 사용하여 각 로케일에 대한 앱의 배포 가능 파일 사본을 빌드하십시오. 빌드 프로세스는 원본 텍스트를 번역 된 텍스트로 바꾸고 배포 가능한 각 앱 사본에 대해 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 토큰을 설정합니다 . 또한 로케일 데이터를로드하고 등록합니다.</target>
        </trans-unit>
        <trans-unit id="6c9f63931f1a9876ee6144f0f6f85bb6ad52a4a3" translate="yes" xml:space="preserve">
          <source>To merge the translated text into component templates, compile the app with the completed translation file.</source>
          <target state="translated">번역 된 텍스트를 구성 요소 템플릿으로 병합하려면 완성 된 번역 파일로 앱을 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="89b8144679887286430f8c720c3bb03f28507e3a" translate="yes" xml:space="preserve">
          <source>To monitor changes that occur where &lt;code&gt;ngOnChanges()&lt;/code&gt; won't catch them, you can implement your own change check, as shown in the &lt;em&gt;DoCheck&lt;/em&gt; example. This example shows how you can use the &lt;code&gt;ngDoCheck()&lt;/code&gt; hook to detect and act upon changes that Angular doesn't catch on its own.</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; 포착하지 못하는 곳에서 발생하는 변경 사항을 모니터링하려면 &lt;em&gt;DoCheck&lt;/em&gt; 예제 와 같이 자체 변경 확인을 구현할 수 있습니다 . 이 예제는 &lt;code&gt;ngDoCheck()&lt;/code&gt; 후크를 사용하여 Angular가 자체적으로 포착하지 못하는 변경 사항을 감지하고 조치를 취하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="50177e0937d0c24e4d779ea321fe99f130aa12ab" translate="yes" xml:space="preserve">
          <source>To navigate a relative path with the &lt;code&gt;Router.navigate&lt;/code&gt; method, you must supply the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; to give the router knowledge of where you are in the current route tree.</source>
          <target state="translated">&lt;code&gt;Router.navigate&lt;/code&gt; 메서드 를 사용하여 상대 경로를 탐색하려면 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 를 제공하여 현재 경로 트리의 현재 위치를 라우터에 알려야 합니다.</target>
        </trans-unit>
        <trans-unit id="09948d03b8b10d3e5528be9b431a7b910e118c79" translate="yes" xml:space="preserve">
          <source>To navigate as a result of some user action such as the click of an anchor tag, use &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">앵커 태그 클릭과 같은 일부 사용자 작업의 결과로 탐색하려면 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e3d48bf82f388d44ca8269b4f3bfd203e20968b6" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; 로 이동하려면 전체 URL은 &lt;code&gt;/crisis-center&lt;/code&gt; ( &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="c30458218377d115bbf5391fba4f7de471157644" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; for a crisis with &lt;code&gt;id=2&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center/2&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;id=2&lt;/code&gt; 인 위기 에 대한 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 로 이동하려면 전체 URL은 &lt;code&gt;/crisis-center/2&lt;/code&gt; ( &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="e48622697af47049a459333dd8614facd41899c8" translate="yes" xml:space="preserve">
          <source>To navigate to the Admin Dashboard route after logging in, update &lt;code&gt;admin-dashboard.component.ts&lt;/code&gt; to handle the query parameters and fragment.</source>
          <target state="translated">로그인 후 Admin Dashboard 경로로 이동하려면 쿼리 매개 변수 및 조각을 처리하도록 &lt;code&gt;admin-dashboard.component.ts&lt;/code&gt; 를 업데이트 하십시오 .</target>
        </trans-unit>
        <trans-unit id="97e5b5a0b343f2f0aacae676cafbfb230385ea8b" translate="yes" xml:space="preserve">
          <source>To navigate to the dashboard, the router needs an appropriate route.</source>
          <target state="translated">대시 보드로 이동하려면 라우터에 적절한 경로가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="97d195db608d7c728fef4d499c5aaf0c6b4979af" translate="yes" xml:space="preserve">
          <source>To open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return. Each selected hero tax return opens in its own component and multiple returns can be open at the same time.</source>
          <target state="translated">영웅의 세금 보고서를 열려면 준비자가 영웅 이름을 클릭하면 해당 수익을 편집하기위한 구성 요소가 열립니다. 선택한 각 영웅 세금 환급은 자체 구성 요소에서 열리고 동시에 여러 개의 환급을 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dbd7da45428e3d65e9e156aac501fb13357f9fed" translate="yes" xml:space="preserve">
          <source>To opt out of Ivy, change the &lt;code&gt;angularCompilerOptions&lt;/code&gt; in your project's TypeScript configuration, most commonly located at &lt;code&gt;tsconfig.app.json&lt;/code&gt; at the root of the workspace.</source>
          <target state="translated">Ivy를 옵트 아웃하려면 프로젝트의 TypeScript 구성에서 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 를 변경 하세요. 가장 일반적으로 작업 공간의 루트에있는 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 에 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b5a0babdbd087078fc6808357b85a5f76fc7e195" translate="yes" xml:space="preserve">
          <source>To opt-in an existing application, run</source>
          <target state="translated">기존 애플리케이션을 옵트 인하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e1e1e2d56f853cd55abdf55cf1f45f3fbc917764" translate="yes" xml:space="preserve">
          <source>To override a tree-shakable provider, configure the injector of a specific NgModule or component with another provider, using the &lt;code&gt;providers: []&lt;/code&gt; array syntax of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">트리 쉐이킹 가능한 공급자를 재정의하려면 &lt;code&gt;providers: []&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 데코레이터의 [] 배열 구문을 사용하여 특정 NgModule 또는 구성 요소의 인젝터를 다른 공급자와 함께 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="997153f39ef3a6b3379015fe98976042f7f5c60d" translate="yes" xml:space="preserve">
          <source>To override the value of &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;, add the &lt;code&gt;locale&lt;/code&gt; parameter. For example, to force the currency to use &lt;code&gt;en-US&lt;/code&gt; no matter which language-locale you set for &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;, use this form: &lt;code&gt;{{amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; : 'en-US'}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 값을 재정의하려면 &lt;code&gt;locale&lt;/code&gt; 매개 변수를 추가하세요 . 예를 들어, &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 에 대해 설정 한 언어 로케일에 관계없이 통화가 &lt;code&gt;en-US&lt;/code&gt; 를 사용 하도록하려면 다음 양식을 사용하십시오. &lt;code&gt;{{amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; : 'en-US'}}&lt;/code&gt; &lt;a href=&quot;../api/common/currencypipe&quot;&gt;통화&lt;/a&gt; : 'EN-US'}} .</target>
        </trans-unit>
        <trans-unit id="36a953799b95a8f6656497edaeebfe8ea9110972" translate="yes" xml:space="preserve">
          <source>To perform complex initializations shortly after construction.</source>
          <target state="translated">생성 직후 복잡한 초기화를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="f0bb0d88a7390f7a95031586a8beb53ff5091b52" translate="yes" xml:space="preserve">
          <source>To position the delete button at the far right of the hero entry, add some CSS to the &lt;code&gt;heroes.component.css&lt;/code&gt;. You'll find that CSS in the &lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;final review code&lt;/a&gt; below.</source>
          <target state="translated">영웅 항목의 맨 오른쪽에 삭제 버튼을 배치하려면 &lt;code&gt;heroes.component.css&lt;/code&gt; 에 CSS를 추가하십시오 . 아래 의 &lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;최종 검토 코드&lt;/a&gt; 에서 CSS를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f90eccccd670656e7c8f0005f6ee48be0e54a38" translate="yes" xml:space="preserve">
          <source>To preload component data, you can use a &lt;code&gt;resolver&lt;/code&gt;. Resolvers improve UX by blocking the page load until all necessary data is available to fully display the page.</source>
          <target state="translated">구성 요소 데이터를 미리로드하려면 &lt;code&gt;resolver&lt;/code&gt; 사용할 수 있습니다 . 리졸버는 페이지를 완전히 표시하는 데 필요한 모든 데이터를 사용할 수있을 때까지 페이지로드를 차단하여 UX를 개선합니다.</target>
        </trans-unit>
        <trans-unit id="49b504bd28cda7dd8440bf615efc157d41f371aa" translate="yes" xml:space="preserve">
          <source>To prepare your app for translations, you should have a basic understanding of the following:</source>
          <target state="translated">번역을 위해 앱을 준비하려면 다음 사항을 기본적으로 이해해야합니다.</target>
        </trans-unit>
        <trans-unit id="2c961571be0bc2d29a55550db6735d63db701501" translate="yes" xml:space="preserve">
          <source>To preserve app integrity, the Angular service worker groups all files into a version together. The files grouped into a version usually include HTML, JS, and CSS files. Grouping of these files is essential for integrity because HTML, JS, and CSS files frequently refer to each other and depend on specific content. For example, an &lt;code&gt;index.html&lt;/code&gt; file might have a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that references &lt;code&gt;bundle.js&lt;/code&gt; and it might attempt to call a function &lt;code&gt;startApp()&lt;/code&gt; from within that script. Any time this version of &lt;code&gt;index.html&lt;/code&gt; is served, the corresponding &lt;code&gt;bundle.js&lt;/code&gt; must be served with it. For example, assume that the &lt;code&gt;startApp()&lt;/code&gt; function is renamed to &lt;code&gt;runApp()&lt;/code&gt; in both files. In this scenario, it is not valid to serve the old &lt;code&gt;index.html&lt;/code&gt;, which calls &lt;code&gt;startApp()&lt;/code&gt;, along with the new bundle, which defines &lt;code&gt;runApp()&lt;/code&gt;.</source>
          <target state="translated">앱 무결성을 유지하기 위해 Angular 서비스 워커는 모든 파일을 한 버전으로 그룹화합니다. 버전으로 그룹화 된 파일에는 일반적으로 HTML, JS 및 CSS 파일이 포함됩니다. HTML, JS 및 CSS 파일은 종종 서로를 참조하고 특정 내용에 의존하기 때문에 이러한 파일의 그룹화는 무결성을 위해 필수적입니다. 예를 들어 &lt;code&gt;index.html&lt;/code&gt; 파일에 &lt;code&gt;bundle.js&lt;/code&gt; 를 참조 하는 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그가 있을 수 있으며 해당 스크립트 내에서 &lt;code&gt;startApp()&lt;/code&gt; 함수를 호출하려고 시도 할 수 있습니다 . 이 버전의 &lt;code&gt;index.html&lt;/code&gt; 이 제공 될 때마다 해당 &lt;code&gt;bundle.js&lt;/code&gt; 가 제공되어야합니다. 예를 들어 &lt;code&gt;startApp()&lt;/code&gt; 함수의 이름이 &lt;code&gt;runApp()&lt;/code&gt; 로 바뀌 었다고 가정합니다.두 파일 모두에서. 이 시나리오 에서는 &lt;code&gt;runApp()&lt;/code&gt; 을 정의하는 새 번들과 함께 &lt;code&gt;startApp()&lt;/code&gt; 를 호출 하는 이전 &lt;code&gt;index.html&lt;/code&gt; 을 제공하는 것은 유효하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fe943f52fad6ef05058867916f3c62d1438605f6" translate="yes" xml:space="preserve">
          <source>To preserve sequences of whitespace characters, use the &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; attribute.</source>
          <target state="translated">일련의 공백 문자를 유지하려면 &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f546bb9723988bfa28f68d7fd96af8a58f806bc" translate="yes" xml:space="preserve">
          <source>To prevent the validator from displaying errors before the user has a chance to edit the form, you should check for either the &lt;code&gt;dirty&lt;/code&gt; or &lt;code&gt;touched&lt;/code&gt; states in a control.</source>
          <target state="translated">사용자가 양식을 편집하기 전에 유효성 검사기가 오류를 표시하지 않도록하려면 컨트롤에서 &lt;code&gt;dirty&lt;/code&gt; 또는 &lt;code&gt;touched&lt;/code&gt; 상태를 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8f13d961bf1f2a2e0a6771cacc0e0734c478d793" translate="yes" xml:space="preserve">
          <source>To prevent this issue, write a constructor that attempts to inject the module or service from the root app injector. If the injection succeeds, the class has been loaded a second time. You can throw an error or take other remedial action.</source>
          <target state="translated">이 문제를 방지하려면 루트 앱 인젝터에서 모듈 또는 서비스를 삽입하려고 시도하는 생성자를 작성하십시오. 주입이 성공하면 클래스가 두 번로드 된 것입니다. 오류를 발생 시키거나 다른 조치를 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82edb1afa8eeaf7f78aa665cfb01fbaf7b31f687" translate="yes" xml:space="preserve">
          <source>To prevent this, configure the component-level injector of &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; to provide the service, using the &lt;code&gt;providers&lt;/code&gt; property in the component metadata.</source>
          <target state="translated">이를 방지하려면 컴포넌트 메타 데이터 의 &lt;code&gt;providers&lt;/code&gt; 속성을 사용하여 서비스를 제공하도록 &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; 의 컴포넌트 레벨 인젝터를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="764953f88d6db345381e8274359af32c10d6b814" translate="yes" xml:space="preserve">
          <source>To prevent this, the application must ensure that a user request originates from the real application, not from a different site. The server and client must cooperate to thwart this attack.</source>
          <target state="translated">이를 방지하려면 응용 프로그램은 사용자 요청이 다른 사이트가 아닌 실제 응용 프로그램에서 시작되도록해야합니다. 서버와 클라이언트는이 공격을 막기 위해 협력해야합니다.</target>
        </trans-unit>
        <trans-unit id="23e6bd66df0322fbae0f2b4af0850695d73a6068" translate="yes" xml:space="preserve">
          <source>To preview Ivy, use &lt;code&gt;@angular/core@next&lt;/code&gt; version of Angular (8.1.x), rather than &lt;code&gt;@angular/core@latest&lt;/code&gt; (8.0.x), as it contains all the latest bug fixes and improvements.</source>
          <target state="translated">아이비를 미리 보려면 모든 최신 버그 수정 및 개선 사항이 포함되어 있으므로 &lt;code&gt;@angular/core@latest&lt;/code&gt; (8.0.x) 대신 &lt;code&gt;@angular/core@next&lt;/code&gt; 버전의 Angular (8.1.x) 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8d1a7d82c50d476f8fd8a4601ce28f42ef661a13" translate="yes" xml:space="preserve">
          <source>To probe the behavior in the live example, change the value and optional exponent in the template.</source>
          <target state="translated">라이브 예제에서 동작을 조사하려면 템플리트에서 값과 선택적 지수를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="e83f099ed59d8330ac2609350236801b883e19e1" translate="yes" xml:space="preserve">
          <source>To provide a more specific type for an input expression to a directive within the template, add a &lt;code&gt;ngTemplateGuard_xx&lt;/code&gt; property to the directive, where the suffix to the static property name is the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; field name. The value of the property can be either a general type-narrowing function based on its return type, or the string &lt;code&gt;&quot;binding&quot;&lt;/code&gt; as in the case of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">템플릿 내의 지시문에 대한보다 구체적인 입력 식 유형을 제공하려면 지시문에 &lt;code&gt;ngTemplateGuard_xx&lt;/code&gt; 속성을 추가합니다 . 여기서 정적 속성 이름의 접미사는 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 필드 이름입니다. 속성 값은 반환 유형을 기반으로하는 일반적인 유형 축소 함수이거나 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 의 경우와 같이 문자열 &lt;code&gt;&quot;binding&quot;&lt;/code&gt; 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90afe3bb0527dc6f5cce2feb6ccc77684ff74860" translate="yes" xml:space="preserve">
          <source>To provide better user experience, the template shows an appropriate error message when the form is invalid.</source>
          <target state="translated">더 나은 사용자 경험을 제공하기 위해 템플릿은 양식이 유효하지 않을 때 적절한 오류 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e498d45c2b48e2a16db2e6e00575c839c83f030b" translate="yes" xml:space="preserve">
          <source>To provide better user experience, we show an appropriate error message when the form is invalid.</source>
          <target state="translated">더 나은 사용자 경험을 제공하기 위해 양식이 유효하지 않은 경우 적절한 오류 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="14a86adfecf23cd6f5e988f214dc30fab3690652" translate="yes" xml:space="preserve">
          <source>To read a target element property or call one of its methods, see the API reference for &lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt; and &lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;.</source>
          <target state="translated">대상 요소 속성을 읽거나 해당 메서드 중 하나를 호출하려면 &lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt; 및 &lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild에&lt;/a&gt; 대한 API 참조를 참조 하세요 .</target>
        </trans-unit>
        <trans-unit id="fe1b5ee91e15d081682393046ee0422bacf79816" translate="yes" xml:space="preserve">
          <source>To read about sharing services, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">서비스 공유에 대한 정보는 &lt;a href=&quot;providers&quot;&gt;제공자를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="832342d7f1d64bd0fabad4f9800a7ac9d39aa8c5" translate="yes" xml:space="preserve">
          <source>To register a single form control, import the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class and create a new instance of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; to save as a class property.</source>
          <target state="translated">하나의 폼 컨트롤을 등록하려면 가져 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 클래스와의 새로운 인스턴스 생성 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 를 클래스 속성으로 저장합니다.</target>
        </trans-unit>
        <trans-unit id="16b4681d1fd2b68022b40ab92b874d4b37fbb9de" translate="yes" xml:space="preserve">
          <source>To register child controls with the form, use &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; attribute. You may use &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; to create sub-groups within the form.</source>
          <target state="translated">자식 컨트롤을 폼에 등록하려면 &lt;code&gt;name&lt;/code&gt; 속성 과 함께 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 을 사용 하십시오 . &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 을 사용하여 양식 내에 하위 그룹을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92f1e211d9969a30647f141c114265a28591bf64" translate="yes" xml:space="preserve">
          <source>To remedy this issue, use asynchronous routing, which loads feature modules lazily, on request. Lazy loading has multiple benefits.</source>
          <target state="translated">이 문제를 해결하려면 요청시 기능 모듈을 느리게로드하는 비동기 라우팅을 사용하십시오. 지연로드에는 여러 가지 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bd6725fea1d02e33394eb5471a409672ea30a70" translate="yes" xml:space="preserve">
          <source>To remedy this, you may need to kill the old worker using one of the above techniques (&lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;Fail-safe&lt;/a&gt; or &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;Safety Worker&lt;/a&gt;).</source>
          <target state="translated">이를 해결하려면 위의 기술 중 하나 ( &lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;페일 세이프&lt;/a&gt; 또는 &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;안전 작업자&lt;/a&gt; )를 사용하여 이전 작업자를 죽여야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="be8db69041e9551a35264264ba86796ed7aef796" translate="yes" xml:space="preserve">
          <source>To remove, delete the &lt;code&gt;import '@angular/localize/init';&lt;/code&gt; line from the polyfills file.</source>
          <target state="translated">제거하려면 &lt;code&gt;import '@angular/localize/init';&lt;/code&gt; 삭제하십시오 . polyfills 파일의 줄.</target>
        </trans-unit>
        <trans-unit id="aaeefee9f550b0ec463699d0b839236aef8f3ef3" translate="yes" xml:space="preserve">
          <source>To render the new values, add &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; to the bottom of the &lt;code&gt;AppComponent&lt;/code&gt; template so the view also displays the sunflower:</source>
          <target state="translated">새 값을 렌더링하려면 &lt;code&gt;AppComponent&lt;/code&gt; 템플리트 의 맨 아래에 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 를 추가 하여보기에도 해바라기가 표시되도록하십시오.</target>
        </trans-unit>
        <trans-unit id="2d4a7cb38a8f7318c5a2000f39faa271b3df5c87" translate="yes" xml:space="preserve">
          <source>To repeat the command any time the inputs change (watch mode), replace &lt;code&gt;bazel&lt;/code&gt; with &lt;code&gt;ibazel&lt;/code&gt; in these commands.</source>
          <target state="translated">입력이 변경 될 때마다 (명령 모드) 명령을 반복하려면 이 명령에서 &lt;code&gt;bazel&lt;/code&gt; 을 &lt;code&gt;ibazel&lt;/code&gt; 로 바꾸 십시오 .</target>
        </trans-unit>
        <trans-unit id="752e6482dbad0b90cac7b0b18d6fb3ccea0c4a13" translate="yes" xml:space="preserve">
          <source>To report progress, use the &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; method, which takes a current value, (optional) total, and status string as arguments. The total can be any number; for example, if you know how many files you have to process, the total could be the number of files, and current should be the number processed so far. The status string is unmodified unless you pass in a new string value.</source>
          <target state="translated">진행률을보고하려면 현재 값, (선택적) 총계 및 상태 문자열을 인수로 사용하는 &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; 메소드를 사용하십시오 . 총계는 임의의 숫자 일 수 있습니다. 예를 들어, 처리해야하는 파일 수를 알고 있으면 총계가 파일 수일 수 있으며 현재는 현재 처리 된 수 여야합니다. 새 문자열 값을 전달하지 않으면 상태 문자열이 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="da733e7d828e2271d74de53fcaeb21139907c7a1" translate="yes" xml:space="preserve">
          <source>To report vulnerabilities in Angular itself, email us at &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io&lt;/a&gt;.</source>
          <target state="translated">Angular 자체의 취약점을보고하려면 &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io로&lt;/a&gt; 이메일을 보내주십시오 .</target>
        </trans-unit>
        <trans-unit id="cbb23cd418ca38ba0340a3dac96f48e6e5baaa92" translate="yes" xml:space="preserve">
          <source>To resolve this, give the &lt;code&gt;HeroService&lt;/code&gt; constructor a boolean flag to control display of secret heroes.</source>
          <target state="translated">이 문제를 해결하려면 &lt;code&gt;HeroService&lt;/code&gt; 생성자에 부울 플래그를 지정하여 비밀 영웅의 표시를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="abae6466bed4070d96bb8c402709fe5af1d1f3dd" translate="yes" xml:space="preserve">
          <source>To resolve this, we give the &lt;code&gt;HeroService&lt;/code&gt; constructor a boolean flag to control display of secret heroes.</source>
          <target state="translated">이를 해결하기 위해 &lt;code&gt;HeroService&lt;/code&gt; 생성자에게 부울 플래그를 지정하여 비밀 영웅의 표시를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="737e073eba5452fb5c988cfe636593f4a671ce45" translate="yes" xml:space="preserve">
          <source>To restore the pristine state of the form controls, clear all of the flags imperatively by calling the form's &lt;code&gt;reset()&lt;/code&gt; method after calling the &lt;code&gt;newHero()&lt;/code&gt; method.</source>
          <target state="translated">양식 컨트롤의 원래 상태를 복원하려면 &lt;code&gt;newHero()&lt;/code&gt; 메서드를 호출 한 후 양식의 &lt;code&gt;reset()&lt;/code&gt; 메서드를 호출하여 명령 적으로 모든 플래그를 지 웁니다 .</target>
        </trans-unit>
        <trans-unit id="ac34d2783858abc37d4c5360d16d00324ca882e2" translate="yes" xml:space="preserve">
          <source>To resume testing after completion of asynchronous activity or asynchronous change detection, hook that promise. See &lt;a href=&quot;testing#when-stable&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">비동기 활동 또는 비동기 변경 감지 완료 후 테스트를 재개하려면 해당 약속을 연결하십시오. &lt;a href=&quot;testing#when-stable&quot;&gt;위를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b89272608dd98a701e650c77a1eb6dabd636640" translate="yes" xml:space="preserve">
          <source>To resume testing after completion of asynchronous activity or asynchronous change detection, hook that promise. See &lt;a href=&quot;testing-components-scenarios#when-stable&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">비동기 활동 또는 비동기 변경 감지 완료 후 테스트를 재개하려면 해당 약속을 연결하십시오. &lt;a href=&quot;testing-components-scenarios#when-stable&quot;&gt;위를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="75267a4b8f6f0e64a2aaf97b5e57d21e9592bed6" translate="yes" xml:space="preserve">
          <source>To revert the compiler default, set the build option &lt;code&gt;aot: false&lt;/code&gt; in the &lt;code&gt;angular.json&lt;/code&gt; configuration file.</source>
          <target state="translated">컴파일러 기본값을 되돌리려면 &lt;code&gt;angular.json&lt;/code&gt; 구성 파일 에서 빌드 옵션 &lt;code&gt;aot: false&lt;/code&gt; 를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c9f7479c96fe5dbd95ef07ceac53b3c6f29bcbc0" translate="yes" xml:space="preserve">
          <source>To review a complete list of changes, organized by version, see the &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular change log&lt;/a&gt;.</source>
          <target state="translated">버전별로 구성된 전체 변경 목록을 검토하려면 &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;각도 변경 로그를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9431c2209f7aafa5c97b655421d8f332f66b82cb" translate="yes" xml:space="preserve">
          <source>To run in VS with F5</source>
          <target state="translated">F5를 사용하여 VS에서 실행하려면</target>
        </trans-unit>
        <trans-unit id="c7b8b861dfdc4cde711a32872c93fbcde33dd655" translate="yes" xml:space="preserve">
          <source>To run our builder with the new target's default configuration, use the following CLI command in a Linux shell.</source>
          <target state="translated">새 대상의 기본 구성으로 빌더를 실행하려면 Linux 쉘에서 다음 CLI 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0fde64751caa86a1be2593adb8f8b511a7f690bd" translate="yes" xml:space="preserve">
          <source>To run the dev server with this proxy configuration, call &lt;code&gt;ng serve&lt;/code&gt;.</source>
          <target state="translated">이 프록시 구성으로 dev 서버를 실행하려면 &lt;code&gt;ng serve&lt;/code&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="a927d68bbfb0db6ef570d00d34818dc1e9fa2fda" translate="yes" xml:space="preserve">
          <source>To see &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; examples with different form control types, see:</source>
          <target state="translated">확인하려면 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 의 다른 폼 컨트롤의 종류와 예를 참조하십시오 :</target>
        </trans-unit>
        <trans-unit id="8dc5a6c3881a1c518a3093382f57be5a945c82be" translate="yes" xml:space="preserve">
          <source>To see attribute, class, and style bindings in a functioning app, see the  especially for this section.</source>
          <target state="translated">작동하는 앱에서 속성, 클래스 및 스타일 바인딩을 보려면이 섹션의 특히를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2066c3f9e99ddeda033de3aa56599325b3da329c" translate="yes" xml:space="preserve">
          <source>To see attributes versus DOM properties in a functioning app, see the  especially for binding syntax.</source>
          <target state="translated">작동하는 앱에서 속성과 DOM 속성을 보려면 특히 바인딩 구문에 대해 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1d7d156616f25e6db5028a775121a671a84735d4" translate="yes" xml:space="preserve">
          <source>To see how the classes are added and removed by the framework, open the browser's developer tools and inspect the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element that represents the hero name.</source>
          <target state="translated">프레임 워크에서 클래스를 추가하고 제거하는 방법을 보려면 브라우저의 개발자 도구를 열고 영웅 이름을 나타내는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소를 검사하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd33799f99a3c33eec695a0b9c438c5302870973" translate="yes" xml:space="preserve">
          <source>To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</source>
          <target state="translated">다시 보거나 프로젝트에서 작업 한 후 테스트하려면 네트워크 탭의 왼쪽 상단에있는 선이있는 원을 클릭하여 모든 항목을 지우십시오.</target>
        </trans-unit>
        <trans-unit id="b8edcb73a089af2f51a98af2512826e990b45344" translate="yes" xml:space="preserve">
          <source>To see the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; working, you can add the following to the parent's template:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 작동하는지 확인하려면 부모의 템플릿에 다음을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee06c99b240c3cdf0c41541163f7f2fc33c71e72" translate="yes" xml:space="preserve">
          <source>To see the &lt;code&gt;disabled&lt;/code&gt; button example in a functioning app, see the  especially for binding syntax. This example shows you how to toggle the disabled property from the component.</source>
          <target state="translated">보려면 &lt;code&gt;disabled&lt;/code&gt; 작동하는 응용 프로그램에서 버튼 예를 들어, 특히 구문을 바인딩을 참조하십시오. 이 예는 구성 요소에서 disabled 속성을 토글하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3c298523d5d662629912091f2a811ab71db25f4f" translate="yes" xml:space="preserve">
          <source>To see the difference between using &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;, add another component to the example and call it &lt;code&gt;InspectorComponent&lt;/code&gt;. &lt;code&gt;InspectorComponent&lt;/code&gt; will be a child of the &lt;code&gt;ChildComponent&lt;/code&gt;. In &lt;code&gt;inspector.component.ts&lt;/code&gt;, inject the &lt;code&gt;FlowerService&lt;/code&gt; and &lt;code&gt;AnimalService&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 차이점을 보려면 예제에 다른 구성 요소를 추가하고 &lt;code&gt;InspectorComponent&lt;/code&gt; 라고합니다 . &lt;code&gt;InspectorComponent&lt;/code&gt; 는 &lt;code&gt;ChildComponent&lt;/code&gt; 의 자식입니다 . 에서 &lt;code&gt;inspector.component.ts&lt;/code&gt; 의 주입 &lt;code&gt;FlowerService&lt;/code&gt; 및 &lt;code&gt;AnimalService&lt;/code&gt; 을 생성자에서 :</target>
        </trans-unit>
        <trans-unit id="e9f41061551c1e503e601101ecf2720e11a2979b" translate="yes" xml:space="preserve">
          <source>To see the difference between using &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt;, add another component to the example and call it &lt;code&gt;InspectorComponent&lt;/code&gt;. &lt;code&gt;InspectorComponent&lt;/code&gt; will be a child of the &lt;code&gt;ChildComponent&lt;/code&gt;. In &lt;code&gt;inspector.component.ts&lt;/code&gt;, inject the &lt;code&gt;FlowerService&lt;/code&gt; and &lt;code&gt;AnimalService&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 및 &lt;code&gt;viewProviders&lt;/code&gt; 사용의 차이점을 확인하려면 예제에 다른 구성 요소를 추가하고 &lt;code&gt;InspectorComponent&lt;/code&gt; 라고합니다 . &lt;code&gt;InspectorComponent&lt;/code&gt; 는 &lt;code&gt;ChildComponent&lt;/code&gt; 의 자식이 됩니다 . 에서 &lt;code&gt;inspector.component.ts&lt;/code&gt; 의 주입 &lt;code&gt;FlowerService&lt;/code&gt; 및 &lt;code&gt;AnimalService&lt;/code&gt; 을 생성자에서 :</target>
        </trans-unit>
        <trans-unit id="7426a6c423585d610bffc9572304cb82a2152a88" translate="yes" xml:space="preserve">
          <source>To see the error, open the browser development tools and look in the console for a message like</source>
          <target state="translated">오류를 보려면 브라우저 개발 도구를 열고 콘솔에서 다음과 같은 메시지를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="f73daa4c6554c2966552e22cb0bf684bb0109fbc" translate="yes" xml:space="preserve">
          <source>To see the new &quot;Buy&quot; button, refresh the application and click on a product's name to display its details.</source>
          <target state="translated">새로운 &quot;구매&quot;버튼을 보려면 응용 프로그램을 새로 고치고 제품 이름을 클릭하여 세부 정보를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="5f23726a83ac2bd2efd5087ef3b709a56d3f0856" translate="yes" xml:space="preserve">
          <source>To see the new cart component, click the &quot;Checkout&quot; button. You can see the &quot;cart works!&quot; default text, and the URL has the pattern &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt;, where &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; may be different for your StackBlitz project.</source>
          <target state="translated">새 장바구니 구성 요소를 보려면 &quot;Checkout&quot;버튼을 클릭하십시오. &quot;장바구니 작동&quot;을 볼 수 있습니다. 기본 텍스트이며 URL의 패턴은 &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt; 입니다 . 여기서 &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 는 StackBlitz 프로젝트와 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c61ac58ea53a8acce49524c72714aac95d91562d" translate="yes" xml:space="preserve">
          <source>To see the progress bar in a working example app, refer to the live example.</source>
          <target state="translated">실제 예제 앱에서 진행률 표시 줄을 보려면 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="51762df269fa74951660bcc92b3a1d8f604aa3bc" translate="yes" xml:space="preserve">
          <source>To see this HTML in the &lt;code&gt;AppComponent&lt;/code&gt;, you first have to export the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; in the &lt;code&gt;CustomerDashboardModule&lt;/code&gt;. In &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;, just beneath the &lt;code&gt;declarations&lt;/code&gt; array, add an &lt;code&gt;exports&lt;/code&gt; array containing &lt;code&gt;CustomerDashboardComponent&lt;/code&gt;:</source>
          <target state="translated">에서이 HTML 확인하려면 &lt;code&gt;AppComponent&lt;/code&gt; 을 먼저 내 보내야 할 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 을 에 &lt;code&gt;CustomerDashboardModule&lt;/code&gt; . 에서 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; , 바로 아래에 &lt;code&gt;declarations&lt;/code&gt; 배열, 추가 &lt;code&gt;exports&lt;/code&gt; 포함하는 배열 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 를 :</target>
        </trans-unit>
        <trans-unit id="a7f192efea8de2bd06b45b2f3bf2d52e4f1a15ca" translate="yes" xml:space="preserve">
          <source>To see this in action, make a small change to &lt;code&gt;app.component.ts&lt;/code&gt; and save. The tests run again, the browser refreshes, and the new test results appear.</source>
          <target state="translated">이를 실제로 보려면 &lt;code&gt;app.component.ts&lt;/code&gt; 를 약간 변경 하고 저장하십시오. 테스트가 다시 실행되고 브라우저가 새로 고쳐지고 새 테스트 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="259f775be5923c9da2e22cf62bebce4455141afc" translate="yes" xml:space="preserve">
          <source>To see this in code, assume that the following value for &lt;code&gt;emoji&lt;/code&gt; is what the parent component were using, as in this service:</source>
          <target state="translated">코드에서이를 확인하려면 이 서비스에서와 같이 &lt;code&gt;emoji&lt;/code&gt; 대한 다음 값 이 상위 구성 요소가 사용하고 있다고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="313d4c9e867864b90c0aa8a60f26818055d0d0a2" translate="yes" xml:space="preserve">
          <source>To see which browsers are supported and determine which settings meet to your browser support requirements, see the &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist compatibility page&lt;/a&gt;.</source>
          <target state="translated">지원되는 브라우저를 확인하고 브라우저 지원 요구 사항을 충족하는 설정을 확인하려면 &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;브라우저 목록 호환성 페이지를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a0b5f297034732e98b08f028549d29a0bc5b1e6b" translate="yes" xml:space="preserve">
          <source>To see which browsers are supported with the above configuration, see which settings meet to your browser support requirements, see the &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist compatibility page&lt;/a&gt;.</source>
          <target state="translated">위 구성에서 지원되는 브라우저를 확인하려면 브라우저 지원 요구 사항에 맞는 설정을 확인하십시오. &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;브라우저 목록 호환성 페이지를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2aecb05bd9c819562cf2d14d979e8185016e3fb1" translate="yes" xml:space="preserve">
          <source>To see your app in the browser so far, enter the following command in the terminal window:</source>
          <target state="translated">지금까지 브라우저에서 앱을 보려면 터미널 창에 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="0168972e648316f2f298a0e543248db30d7052e5" translate="yes" xml:space="preserve">
          <source>To select the styles within the component, add a &lt;code&gt;styles&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator that contains the styles you want to use.</source>
          <target state="translated">구성 요소 내 에서 스타일을 선택하려면 사용할 스타일이 포함 된 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; 데코레이터에 &lt;code&gt;styles&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="885269644ec508e0ea2156adee77813993bb242f" translate="yes" xml:space="preserve">
          <source>To serve the directory containing your web files with &lt;code&gt;http-server&lt;/code&gt;, run the following command:</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; 로 웹 파일이 포함 된 디렉토리를 제공하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="5ed3709eb5f5a055a34096a95375f8c97670231b" translate="yes" xml:space="preserve">
          <source>To set a property of a directive, place the directive within square brackets , such as &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]&lt;/code&gt;, followed by an equal sign and the property. Here, the property is &lt;code&gt;classes&lt;/code&gt;.</source>
          <target state="translated">지시문의 속성을 설정하려면 &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]&lt;/code&gt; 와 같이 대괄호 안에 지시문을 배치하고 그 뒤에 등호와 속성을 추가합니다. 여기서 속성은 &lt;code&gt;classes&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0c073e0977df21697005c90ce800e73a2b92cb98" translate="yes" xml:space="preserve">
          <source>To set the components encapsulation mode, use the &lt;code&gt;encapsulation&lt;/code&gt; property in the component metadata:</source>
          <target state="translated">구성 요소 캡슐화 모드를 설정하려면 구성 요소 메타 데이터에서 &lt;code&gt;encapsulation&lt;/code&gt; 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d43a0bd727324080ea5709ed75d717fa991dc17" translate="yes" xml:space="preserve">
          <source>To set the model property of a custom component, place the target, here &lt;code&gt;childItem&lt;/code&gt;, between square brackets &lt;code&gt;[]&lt;/code&gt; followed by an equal sign and the property. Here, the property is &lt;code&gt;parentItem&lt;/code&gt;.</source>
          <target state="translated">사용자 컴포넌트의 모델 속성을 설정하려면 대상 (여기서 &lt;code&gt;childItem&lt;/code&gt; )을 대괄호 &lt;code&gt;[]&lt;/code&gt; 와 등호 및 속성 사이에 배치합니다. 여기에서 속성은 &lt;code&gt;parentItem&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3758c4ecb4f9914c32c58041e427ee3538c11cd2" translate="yes" xml:space="preserve">
          <source>To set up a monorepo workspace, you should skip the creating the root application. See &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;Setting up for a multi-project workspace&lt;/a&gt; below.</source>
          <target state="translated">monorepo 작업 공간을 설정하려면 루트 애플리케이션 작성을 건너 뛰어야합니다. 아래 &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;의 다중 프로젝트 작업 공간 설정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="17ba6dfedabd7c2dcc203b83d60567d69a920bd6" translate="yes" xml:space="preserve">
          <source>To set up a redirect, configure a route with the &lt;code&gt;path&lt;/code&gt; you want to redirect from, the &lt;code&gt;component&lt;/code&gt; you want to redirect to, and a &lt;code&gt;pathMatch&lt;/code&gt; value that tells the router how to match the URL.</source>
          <target state="translated">리디렉션을 설정하려면 리디렉션 할 &lt;code&gt;path&lt;/code&gt; , 리디렉션 할 &lt;code&gt;component&lt;/code&gt; 및 라우터에 URL 일치 방법을 알려주는 &lt;code&gt;pathMatch&lt;/code&gt; 값으로 경로 를 구성 합니다 .</target>
        </trans-unit>
        <trans-unit id="87160d640bd0df010d3acad99e9a90a16c40fa62" translate="yes" xml:space="preserve">
          <source>To set up a wildcard route, add the following code to your &lt;code&gt;routes&lt;/code&gt; definition.</source>
          <target state="translated">와일드 카드 경로를 설정하려면 &lt;code&gt;routes&lt;/code&gt; 정의에 다음 코드를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d47642c5fa808e4e1650b0efd2f81da7bfc8bfcf" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI &lt;code&gt;add&lt;/code&gt; command.</source>
          <target state="translated">프로젝트에서 Angular 서비스 워커를 설정하려면 CLI &lt;code&gt;add&lt;/code&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d4bc7469b3a5e6cf5c595d20bd4518bf745d39d" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI command &lt;code&gt;ng add @angular/pwa&lt;/code&gt;. It takes care of configuring your app to use service workers by adding the &lt;code&gt;service-worker&lt;/code&gt; package along with setting up the necessary support files.</source>
          <target state="translated">프로젝트에서 Angular 서비스 워커를 설정하려면 CLI 명령 &lt;code&gt;ng add @angular/pwa&lt;/code&gt; . 필요한 지원 파일을 설정 하고 &lt;code&gt;service-worker&lt;/code&gt; 패키지를 추가하여 서비스 워커를 사용하도록 앱을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="8dc80e025131d2a69acf3fb7e053f667fec10a2e" translate="yes" xml:space="preserve">
          <source>To set up the Getting Started files with an &lt;strong&gt;ASP.NET 4.x project&lt;/strong&gt; in Visual Studio 2015, follow these steps:</source>
          <target state="translated">Visual Studio 2015에서 &lt;strong&gt;ASP.NET 4.x 프로젝트&lt;/strong&gt; 로 시작 파일을 설정 하려면 다음 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="de142fa8fc921e821213670b35614aa8b3250c8c" translate="yes" xml:space="preserve">
          <source>To set up the component after Angular sets the input properties.</source>
          <target state="translated">Angular 이후 구성 요소를 설정하려면 입력 특성을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="e1f243210a5ae29b5fc9889478313e44836e9435" translate="yes" xml:space="preserve">
          <source>To set up your development environment, follow the instructions in &lt;a href=&quot;../guide/setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">개발 환경을 설정하려면 &lt;a href=&quot;../guide/setup-local&quot;&gt;로컬 환경 설정&lt;/a&gt; 의 지시 사항을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="55a75d1552367c5e1de12884866f853585f7045d" translate="yes" xml:space="preserve">
          <source>To show a response to form submission, you can hide the data entry area and display something else in its place.</source>
          <target state="translated">양식 제출에 대한 응답을 표시하려면 데이터 입력 영역을 숨기고 그 자리에 다른 것을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e5b11e822500092ff12f34d510eb08a95feb8aa" translate="yes" xml:space="preserve">
          <source>To show how Angular calls the hooks in the expected order, the &lt;code&gt;PeekABooComponent&lt;/code&gt; demonstrates all of the hooks in one component.</source>
          <target state="translated">Angular가 예상 된 순서로 후크를 호출하는 방법을 보여주기 위해 &lt;code&gt;PeekABooComponent&lt;/code&gt; 는 하나의 구성 요소에있는 모든 후크를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="2bb411516c904297b7758e27653c5476ac34dcac" translate="yes" xml:space="preserve">
          <source>To show something else while the form is in the submitted state, add the following HTML below the new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapper.</source>
          <target state="translated">양식이 제출 된 상태에있는 동안 다른 내용을 표시하려면 새 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 래퍼 아래에 다음 HTML을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="85c6814e145f8869d0c23c45827073818298e9fc" translate="yes" xml:space="preserve">
          <source>To simplify the Angular mental model and learning journey, we&amp;rsquo;ll be working on making NgModules optional. This work will allow developers to develop standalone components and implement an alternative API for declaring the component&amp;rsquo;s compilation scope.</source>
          <target state="translated">Angular 멘탈 모델과 학습 여정을 단순화하기 위해 NgModules를 선택 사항으로 만드는 작업을 진행할 것입니다. 이 작업을 통해 개발자는 독립형 구성 요소를 개발하고 구성 요소의 컴파일 범위를 선언하기위한 대체 API를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e19731bed4fa9ad865f132552125887ef1add447" translate="yes" xml:space="preserve">
          <source>To simplify the writing process for contributing authors. This guide helps you make decisions about tone, voice, and style. It also helps you find the right markup quickly.</source>
          <target state="translated">기고가를위한 글쓰기 과정을 단순화합니다. 이 안내서는 톤, 음성 및 스타일을 결정하는 데 도움이됩니다. 또한 올바른 마크 업을 신속하게 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="367649fb6abb3b384169647dba62b78e8155b4e1" translate="yes" xml:space="preserve">
          <source>To simulate a network issue, disable network interaction for your application. In Chrome:</source>
          <target state="translated">네트워크 문제를 시뮬레이션하려면 응용 프로그램에 대한 네트워크 상호 작용을 비활성화하십시오. Chrome에서 :</target>
        </trans-unit>
        <trans-unit id="f88ded5fc1c640f4a2bd9755a49fe8b90817554c" translate="yes" xml:space="preserve">
          <source>To simulate user input, you can find the input element and set its &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="translated">사용자 입력을 시뮬레이트하기 위해 입력 요소를 찾고 해당 &lt;code&gt;value&lt;/code&gt; 특성을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="740da28ed7f431cf8963e67cef151e88bd5e2bbf" translate="yes" xml:space="preserve">
          <source>To skip the download link, add the &lt;code&gt;noDownload&lt;/code&gt; attribute.</source>
          <target state="translated">다운로드 링크를 건너 뛰려면 &lt;code&gt;noDownload&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="966fbbefbe372b65e80303ab34559f1ffc260f0b" translate="yes" xml:space="preserve">
          <source>To skip the live Stackblitz link and only link to the download, add the &lt;code&gt;downloadOnly&lt;/code&gt; attribute.</source>
          <target state="translated">라이브 Stackblitz 링크를 건너 뛰고 다운로드로만 링크하려면 &lt;code&gt;downloadOnly&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="29494e913f1a0369be80f182fabb95c5657eb764" translate="yes" xml:space="preserve">
          <source>To specify a component's selector, add a &lt;code&gt;selector&lt;/code&gt; statement to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">컴포넌트의 선택기를 지정하려면 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; 데코레이터에 &lt;code&gt;selector&lt;/code&gt; 문을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="db1413d1ae3c4ee0a501b822d414f2ad1d34357e" translate="yes" xml:space="preserve">
          <source>To specify a relative route, use the &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;&lt;code&gt;relativeTo&lt;/code&gt; property. In the component class, import &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt;.</source>
          <target state="translated">상대 경로를 지정하려면 &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; &lt;code&gt;relativeTo&lt;/code&gt; 속성을 사용합니다 . 구성 요소 클래스 에서 &lt;code&gt;@angular/router&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; 를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="f8731b4e458c672aaa52607bacd794fdaab471d5" translate="yes" xml:space="preserve">
          <source>To specify a value transformation in an HTML template, use the &lt;a href=&quot;template-expression-operators#pipe&quot;&gt;pipe operator (|)&lt;/a&gt;.</source>
          <target state="translated">HTML 템플릿에서 값 변환을 지정하려면 &lt;a href=&quot;template-expression-operators#pipe&quot;&gt;파이프 연산자 (|)를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab87060eaf2297eb5463559b81f0a81cc8881cda" translate="yes" xml:space="preserve">
          <source>To specify a value transformation in an HTML template, use the &lt;a href=&quot;template-syntax#pipe&quot;&gt;pipe operator (|)&lt;/a&gt;.</source>
          <target state="translated">HTML 템플리트에서 값 변환을 지정하려면 &lt;a href=&quot;template-syntax#pipe&quot;&gt;파이프 연산자 (|)를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c26bd8dbf7d5d26bb6a0711698f315370497669" translate="yes" xml:space="preserve">
          <source>To specify offset styles to be applied at a later time, define steps with &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;, or use &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls with a delay value. For example:</source>
          <target state="translated">나중에 적용 할 오프셋 스타일을 지정하려면 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 단계를 정의 하거나 지연 값으로 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 호출을 사용하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="098c0b9849214a70fc7726b8c68b61855e17df7b" translate="yes" xml:space="preserve">
          <source>To specify the response object type, first define an interface with the required properties. (Use an interface rather than a class; a response cannot be automatically converted to an instance of a class.)</source>
          <target state="translated">응답 오브젝트 유형을 지정하려면 먼저 필수 특성으로 인터페이스를 정의하십시오. (클래스가 아닌 인터페이스를 사용하십시오. 응답은 클래스의 인스턴스로 자동 변환 될 수 없습니다.)</target>
        </trans-unit>
        <trans-unit id="0c4feee65eebb074487af0d268f0a2b8a6b99056" translate="yes" xml:space="preserve">
          <source>To specify the response object type, first define an interface with the required properties. Use an interface rather than a class, because the response is a plain object that cannot be automatically converted to an instance of a class.</source>
          <target state="translated">응답 객체 유형을 지정하려면 먼저 필요한 속성으로 인터페이스를 정의합니다. 응답은 클래스의 인스턴스로 자동 변환 될 수없는 일반 객체이기 때문에 클래스가 아닌 인터페이스를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="dde8a2ef8d669c63a62cff50f1d6396d1cb88adf" translate="yes" xml:space="preserve">
          <source>To start a collection, you need to create the schematic files. The following steps show you how to add initial support without modifying any project files.</source>
          <target state="translated">컬렉션을 시작하려면 회로도 파일을 만들어야합니다. 다음 단계는 프로젝트 파일을 수정하지 않고 초기 지원을 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="675df4470cdabe4f5cbe7c6f1ee4baa2a9761571" translate="yes" xml:space="preserve">
          <source>To start a new project with Ivy enabled, use the &lt;code&gt;--enable-ivy&lt;/code&gt; flag with the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">Ivy를 사용하여 새 프로젝트를 시작하려면 &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt; 명령 과 함께 &lt;code&gt;--enable-ivy&lt;/code&gt; 플래그를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc42865ce59ef8db7b918c51096cb7b9d9d767ba" translate="yes" xml:space="preserve">
          <source>To start rendering your app with Universal on your local system, use the following command.</source>
          <target state="translated">로컬 시스템에서 Universal으로 앱 렌더링을 시작하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e1c7b5759322bd72b7a70ff587712b48f2342170" translate="yes" xml:space="preserve">
          <source>To stop using the Ivy compiler, set &lt;code&gt;enableIvy&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;tsconfig.app.json&lt;/code&gt;, or remove it completely. Also remove &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; from your default build options if you didn't have it there before.</source>
          <target state="translated">Ivy 컴파일러 사용을 중지하려면 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 에서 &lt;code&gt;enableIvy&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정 하거나 완전히 제거하십시오. &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; 제거하십시오 . 이전 빌드 옵션이 없으면 기본 빌드 옵션에서 true 입니다.</target>
        </trans-unit>
        <trans-unit id="d3c09441693602ca793b2b01b4f9af8a0248fabc" translate="yes" xml:space="preserve">
          <source>To streamline the syntax, the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive hides the details behind its own &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input and &lt;code&gt;ngModelChange&lt;/code&gt; output properties:</source>
          <target state="translated">구문을 간소화하기 위해 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문은 자체 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 입력 및 &lt;code&gt;ngModelChange&lt;/code&gt; 출력 속성 뒤에 세부 정보를 숨 깁니다 .</target>
        </trans-unit>
        <trans-unit id="39b4d5704426ff8a7639bccde11ece39d8b3aeb6" translate="yes" xml:space="preserve">
          <source>To subscribe, call &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt;, which asks the user for permission. The call returns a &lt;code&gt;Promise&lt;/code&gt; with a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt;&lt;code&gt;PushSubscription&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">구독하려면 &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt; 호출 하여 사용자에게 권한을 요청하십시오. 이 호출은 새로운 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt; &lt;code&gt;PushSubscription&lt;/code&gt; &lt;/a&gt; 인스턴스 와 함께 &lt;code&gt;Promise&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="091932076ef13bad443c5e0beaa6885505ec5895" translate="yes" xml:space="preserve">
          <source>To summarize, Angular found the &lt;code&gt;appHighlight&lt;/code&gt; attribute on the &lt;strong&gt;host&lt;/strong&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. It created an instance of the &lt;code&gt;HighlightDirective&lt;/code&gt; class and injected a reference to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element into the directive's constructor which sets the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element's background style to yellow.</source>
          <target state="translated">요약하면 Angular 는 &lt;strong&gt;호스트 &lt;/strong&gt; &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소 에서 &lt;code&gt;appHighlight&lt;/code&gt; 속성을 찾았습니다 . &lt;code&gt;HighlightDirective&lt;/code&gt; 클래스 의 인스턴스를 만들고 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소의 배경 스타일을 노란색으로 설정하는 지시자의 생성자에 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소에 대한 참조를 삽입했습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cff6b03d8e8d8fe2f524818030a80391b717264" translate="yes" xml:space="preserve">
          <source>To summarize, if you mutate the input array, the pure pipe doesn't execute. If you &lt;em&gt;replace&lt;/em&gt; the input array, the pipe executes and the display is updated, as shown in Figure 4.</source>
          <target state="translated">요약하면 입력 배열을 변경하면 순수 파이프가 실행되지 않습니다. 입력 배열 을 &lt;em&gt;교체&lt;/em&gt; 하면 그림 4와 같이 파이프가 실행되고 디스플레이가 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="fe4b6b798619064feab05be7c141408b9ecfad03" translate="yes" xml:space="preserve">
          <source>To summarize, the key differentiating factors of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 의 주요 차별화 요소 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="575255fb464fe00729396b1d3b2c2522b401ddfd" translate="yes" xml:space="preserve">
          <source>To summarize, the lightweight injection token pattern consists of the following.</source>
          <target state="translated">요약하면 경량 주입 토큰 패턴은 다음과 같이 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="b52ca2d96bdaaa3cfb5379f6156241ff261b361a" translate="yes" xml:space="preserve">
          <source>To support these behaviors, the Angular service worker loads a &lt;em&gt;manifest&lt;/em&gt; file from the server. The manifest describes the resources to cache and includes hashes of every file's contents. When an update to the application is deployed, the contents of the manifest change, informing the service worker that a new version of the application should be downloaded and cached. This manifest is generated from a CLI-generated configuration file called &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">이러한 동작을 지원하기 위해 Angular 서비스 워커 는 서버에서 &lt;em&gt;매니페스트&lt;/em&gt; 파일을 로드 합니다. 매니페스트는 캐시 할 리소스를 설명하고 모든 파일 내용의 해시를 포함합니다. 응용 프로그램에 대한 업데이트가 배포되면 매니페스트의 내용이 변경되어 서비스 작업자에게 새 버전의 응용 프로그램을 다운로드하여 캐시해야 함을 알립니다. 이 매니페스트는 &lt;code&gt;ngsw-config.json&lt;/code&gt; 이라는 CLI 생성 구성 파일에서 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="c4ca653d202193362f15dba2ff3cfc4b0025739a" translate="yes" xml:space="preserve">
          <source>To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</source>
          <target state="translated">XSS 버그를 체계적으로 차단하기 위해 Angular는 기본적으로 모든 값을 신뢰할 수없는 것으로 처리합니다. 속성, 속성, 스타일, 클래스 바인딩 또는 보간을 통해 템플릿에서 값이 DOM에 삽입되면 Angular는 신뢰할 수없는 값을 삭제하고 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="0970ae1882f15ce0c665008456cc372de2ce2cb1" translate="yes" xml:space="preserve">
          <source>To take advantage of Angular's localization features, use the Angular CLI to add the &lt;code&gt;@angular/localize&lt;/code&gt; package to your project:</source>
          <target state="translated">Angular의 현지화 기능을 활용하려면 Angular CLI를 사용하여 &lt;code&gt;@angular/localize&lt;/code&gt; 패키지를 프로젝트 에 추가 하세요.</target>
        </trans-unit>
        <trans-unit id="5c2d8661b5b005891a1e25d985a1673afb599e07" translate="yes" xml:space="preserve">
          <source>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called &lt;code&gt;XSRF-TOKEN&lt;/code&gt; on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site's authentication cookie with a salt for added security.</source>
          <target state="translated">이를 활용하려면 서버가 페이지로드 또는 첫 번째 GET 요청에서 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; 이라는 JavaScript 읽기 가능 세션 쿠키에 토큰을 설정해야합니다 . 후속 요청에서 서버는 쿠키가 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP 헤더 와 일치하는지 확인할 수 있으므로 도메인에서 실행중인 코드 만 요청을 보낼 수 있는지 확인하십시오. 토큰은 각 사용자마다 고유해야하며 서버에서 확인할 수 있어야합니다. 이렇게하면 클라이언트가 자체 토큰을 만들지 못하게됩니다. 추가 보안을 위해 소금을 사용하여 사이트의 인증 쿠키를 다이제스트하도록 토큰을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a2c3396ff07cb76eb004b09abd2396aa4cfc57b5" translate="yes" xml:space="preserve">
          <source>To take this example a little further, we can create an observable that publishes events. In this example, the subscriber function is defined inline.</source>
          <target state="translated">이 예제를 조금 더 진행하기 위해 이벤트를 게시하는 Observable을 만들 수 있습니다. 이 예에서 가입자 기능은 인라인으로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="33b81c4efe4680114d1f1e1f01d20fc61854d427" translate="yes" xml:space="preserve">
          <source>To tell Angular that this is a pipe, you apply the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator, which you import from the core Angular library.</source>
          <target state="translated">이것이 Angular에 파이프임을 알리기 위해 핵심 Angular 라이브러리에서 가져온 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 데코레이터 를 적용합니다 .</target>
        </trans-unit>
        <trans-unit id="d69f6b79976daa71b140336b6e0fc275fb2a4a15" translate="yes" xml:space="preserve">
          <source>To tell that story in code, you'll often need to create partial files or intermediate versions of the final source code file with fragments of code that don't appear in the final app.</source>
          <target state="translated">이 스토리를 코드로 표현하려면 최종 앱에 표시되지 않는 코드 조각으로 최종 소스 코드 파일의 부분 파일 또는 중간 버전을 만들어야하는 경우가 종종 있습니다.</target>
        </trans-unit>
        <trans-unit id="41ed9ac99a1093b2313ac001a60efb09be984be6" translate="yes" xml:space="preserve">
          <source>To test a service, you set the &lt;code&gt;providers&lt;/code&gt; metadata property with an array of the services that you'll test or mock.</source>
          <target state="translated">서비스를 테스트하려면 &lt;code&gt;providers&lt;/code&gt; 메타 데이터 속성을 테스트하거나 조롱 할 서비스 배열로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="0689818deab6829bbe840e4c6eba2a40a2aa0140" translate="yes" xml:space="preserve">
          <source>To test this feature, add a button with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt; template and set the link to &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt;.</source>
          <target state="translated">이 기능을 테스트하려면 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 가 있는 버튼을 &lt;code&gt;HeroListComponent&lt;/code&gt; 템플릿에 추가하고 링크를 &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; sidekicks &quot;로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="086adffe268f8dce593354324e40600580cf7306" translate="yes" xml:space="preserve">
          <source>To test this feature, add a button with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt; template and set the link to a non-existant route called &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt;.</source>
          <target state="translated">이 기능을 테스트하려면 &lt;code&gt;HeroListComponent&lt;/code&gt; 템플릿에 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 가 있는 버튼을 추가 하고 링크를 &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; 라는 존재하지 않는 경로로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="7320c49fd0ce558ab742e4ff66c77c68c95f961d" translate="yes" xml:space="preserve">
          <source>To toggle multiple styles, bind to the &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; attribute&amp;mdash;for example, &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]=&quot;styleExpression&quot;&lt;/code&gt;. The expression is often a string list of styles such as &lt;code&gt;&quot;width: 100px; height: 100px;&quot;&lt;/code&gt;.</source>
          <target state="translated">여러 스타일을 전환하려면 &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; 속성에 바인딩합니다 ( 예 : &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]=&quot;styleExpression&quot;&lt;/code&gt; ) . 표현식은 종종 &lt;code&gt;&quot;width: 100px; height: 100px;&quot;&lt;/code&gt; 와 같은 스타일의 문자열 목록입니다 . .</target>
        </trans-unit>
        <trans-unit id="dbaff2a55143998de029e9624fcc3a49f95854ff" translate="yes" xml:space="preserve">
          <source>To translate a &lt;code&gt;plural&lt;/code&gt;, translate its ICU format match values as shown in the following example:</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 을 번역하려면 다음 예제에 표시된대로 ICU 형식 일치 값을 번역합니다.</target>
        </trans-unit>
        <trans-unit id="ecc66d276b3225d15e06e1f1cf36defdf74d825a" translate="yes" xml:space="preserve">
          <source>To translate a &lt;code&gt;plural&lt;/code&gt;, translate its ICU format match values:</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 을 번역하려면 ICU 형식 일치 값을 번역하십시오.</target>
        </trans-unit>
        <trans-unit id="885e91781ad354087c34588828548ccdfecdb432" translate="yes" xml:space="preserve">
          <source>To translate a text message accurately, the translator may need additional information or context.</source>
          <target state="translated">문자 메시지를 정확하게 번역하려면 번역기에 추가 정보 나 컨텍스트가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="172f56dc7a62c0fc33b328b831a5d2dc62c6fd22" translate="yes" xml:space="preserve">
          <source>To translate a text message accurately, the translator may need additional information or context. Add a &lt;em&gt;description&lt;/em&gt; of the text message as the value of the &lt;code&gt;i18n&lt;/code&gt; attribute, as shown in the following example:</source>
          <target state="translated">문자 메시지를 정확하게 번역하기 위해 번역자는 추가 정보 나 컨텍스트가 필요할 수 있습니다. 다음 예와 같이 텍스트 메시지에 &lt;em&gt;대한 설명&lt;/em&gt; 을 &lt;code&gt;i18n&lt;/code&gt; 속성 값으로 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="84fab147430f36a6aae6a95b3c0171b6285fbdd8" translate="yes" xml:space="preserve">
          <source>To translate your app's templates, you need to prepare the text for a translator or translation service by marking text, attributes, and other elements with the Angular &lt;code&gt;i18n&lt;/code&gt; attribute. Follow these general steps:</source>
          <target state="translated">앱의 템플릿을 번역하려면 텍스트, 속성 및 기타 요소를 Angular &lt;code&gt;i18n&lt;/code&gt; 속성 으로 표시하여 번역사 또는 번역 서비스 용 텍스트를 준비해야 합니다. 다음 일반 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="cef6e619ff20a5d2471097479db5a249a2c82f81" translate="yes" xml:space="preserve">
          <source>To turn off this feature, run the following command:</source>
          <target state="translated">이 기능을 끄려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="ed33505f49ae41506ab117a8b63c6d0f85e67b26" translate="yes" xml:space="preserve">
          <source>To understand how the &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; influence service visibility differently, the following sections build a  step-by-step and compare the use of &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; in code and a logical tree.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 서비스 가시성에 다른 방식으로 영향을 미치는 방식을 이해하기 위해 다음 섹션에서는 단계별로 빌드하고 코드와 논리 트리에서 &lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 사용을 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="bc3839460aa005395112dc40509f1898a17353cd" translate="yes" xml:space="preserve">
          <source>To understand how the &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt; influence service visibility differently, the following sections build a  step-by-step and compare the use of &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt; in code and a logical tree.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;viewProviders&lt;/code&gt; 서비스 가시성에 어떻게 다른 영향을 미치는지 이해하기 위해 다음 섹션에서는 단계별로 빌드하고 코드 및 논리 트리에서 &lt;code&gt;providers&lt;/code&gt; 및 &lt;code&gt;viewProviders&lt;/code&gt; 의 사용을 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="e455f448e2a323a0da868b3a43676c8335099bb2" translate="yes" xml:space="preserve">
          <source>To understand how to provide a service or other dependency for your app, see &lt;a href=&quot;providers&quot;&gt;Providing Dependencies for an NgModule&lt;/a&gt;.</source>
          <target state="translated">앱에 서비스 또는 기타 종속성을 제공하는 방법을 이해하려면 &lt;a href=&quot;providers&quot;&gt;NgModule에 대한 종속성 제공을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3eebe2ea66d8dfa62e18d044bc45eab39aaad7bf" translate="yes" xml:space="preserve">
          <source>To update an existing project to use Ivy, set the &lt;code&gt;enableIvy&lt;/code&gt; option in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; in your project's &lt;code&gt;tsconfig.app.json&lt;/code&gt;.</source>
          <target state="translated">Ivy를 사용하도록 기존 프로젝트를 업데이트하려면 프로젝트 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 의 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 에서 &lt;code&gt;enableIvy&lt;/code&gt; 옵션을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1159153366a5b0bd61463f3e7587ba6f306a76ab" translate="yes" xml:space="preserve">
          <source>To update from one major version to another, use the format</source>
          <target state="translated">한 주 버전에서 다른 버전으로 업데이트하려면 다음 형식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b4726caf12aeeed22903d708d6fd9dcb3ab84cef" translate="yes" xml:space="preserve">
          <source>To update from one major version to another, use the format &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">하나의 메이저 버전에서 다른 메이저 버전으로 업데이트하려면 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b123945947d8bf63fcbe7c6d93a368853a6bef1" translate="yes" xml:space="preserve">
          <source>To update the &lt;code&gt;name&lt;/code&gt; property, the changed text is retrieved by following the path &lt;code&gt;$event.target.value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 특성 을 업데이트하려면 &lt;code&gt;$event.target.value&lt;/code&gt; 경로를 따라 변경된 텍스트를 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="47a7e6bce5ac7a94a823063c0801c7a2556444a9" translate="yes" xml:space="preserve">
          <source>To update the hero form to be a reactive form, you can use some of the same built-in validators&amp;mdash;this time, in function form, as in the following example.</source>
          <target state="translated">영웅 양식을 반응 양식으로 업데이트하려면 동일한 내장 유효성 검사기 중 일부를 사용할 수 있습니다. 이번에는 다음 예제와 같이 함수 양식으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="e3daec1d373f17dce64b4434537727da04314427" translate="yes" xml:space="preserve">
          <source>To update the hero form to be a reactive form, you can use some of the same built-in validators&amp;mdash;this time, in function form. See below:</source>
          <target state="translated">히어로 형식을 반응 형 형식으로 업데이트하기 위해 동일한 내장 유효성 검사기 중 일부를 함수 형식으로 사용할 수 있습니다. 아래를보십시오 :</target>
        </trans-unit>
        <trans-unit id="4e65f7fd80bdb167ba344b15a71ebca3ea7cda71" translate="yes" xml:space="preserve">
          <source>To update to the next beta or pre-release version, use the &lt;code&gt;--next&lt;/code&gt; option.</source>
          <target state="translated">다음 베타 또는 시험판 버전으로 업데이트하려면 &lt;code&gt;--next&lt;/code&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec580f157cda9cf0f0589f7bbc29f74d7bf8bf09" translate="yes" xml:space="preserve">
          <source>To update to the next beta or pre-release version, use the &lt;code&gt;--next=true&lt;/code&gt; option.</source>
          <target state="translated">다음 베타 또는 시험판 버전으로 업데이트하려면 &lt;code&gt;--next=true&lt;/code&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bbc501407156722afda3e86f40157fb7f056ade2" translate="yes" xml:space="preserve">
          <source>To update your apps:</source>
          <target state="translated">앱을 업데이트하려면 :</target>
        </trans-unit>
        <trans-unit id="236685207dbef386199db70dbf04b0f668c3e20d" translate="yes" xml:space="preserve">
          <source>To update your code before support is removed, you'll want to decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch over to template-driven directives.</source>
          <target state="translated">지원이 제거되기 전에 코드를 업데이트하려면 반응 형 양식 지시문을 고수할지 (및 반응 형 양식 패턴을 사용하여 값 가져 오기 / 설정) 템플릿 기반 지시문으로 전환할지 여부를 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="8a839cde0f94f54c1db2fbd03e39cc0d94409768" translate="yes" xml:space="preserve">
          <source>To update your code before v7, you'll want to decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch over to template-driven directives.</source>
          <target state="translated">v7 이전의 코드를 업데이트하려면 반응 형 양식 지시문을 고수하고 (반응 형 양식 패턴을 사용하여 값을 가져 오거나 설정) 템플릿 기반 지시문으로 전환할지 여부를 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="f18488d2ffa521dc9c72e40ed167cd48cf4b0efb" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 기능 을 사용하려면 테스트 설정 파일에서 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 을 가져와야 합니다. Angular CLI를 사용하여 프로젝트를 생성 한 경우 &lt;code&gt;zone-testing&lt;/code&gt; 는 이미 &lt;code&gt;src/test.ts&lt;/code&gt; 에서 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="a2482c9fc60deb6dca0d28b779cb8b73a4467b41" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 기능 을 사용하려면 테스트 설정 파일에서 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 을 가져와야 합니다. Angular CLI를 사용하여 프로젝트를 생성 한 경우 &lt;code&gt;zone-testing&lt;/code&gt; 는 이미 &lt;code&gt;src/test.ts&lt;/code&gt; 에서 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="fcd9f0f5dc90f1dc24c2ca71efd33f0ee8fa954b" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 기능 을 사용하려면 테스트 설정 파일에서 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 을 가져와야 합니다. Angular CLI로 프로젝트를 만든 경우 &lt;code&gt;zone-testing&lt;/code&gt; 는 이미 &lt;code&gt;src/test.ts&lt;/code&gt; 에서 가져 왔습니다 .</target>
        </trans-unit>
        <trans-unit id="578a2f9ea1de8c97140bba989fef63c0e05d0b05" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, you must configure the parent and child.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 을 사용하려면 부모와 자식을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="497273ea5594306c8ea85ca98645f59289fab5d2" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, you must configure the parent and child.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 을 사용하려면 부모와 자식을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="4c5cd4c387b425279202e14518a4f13f588d38ae" translate="yes" xml:space="preserve">
          <source>To use AOT with a hybrid app, you have to first set it up like any other Angular application, as shown in &lt;a href=&quot;aot-compiler&quot;&gt;the Ahead-of-time Compilation chapter&lt;/a&gt;.</source>
          <target state="translated">하이브리드 앱과 함께 AOT를 사용하려면 &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-time Compilation 장에&lt;/a&gt; 표시된대로 먼저 다른 Angular 애플리케이션과 마찬가지로 AOT를 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dc05bdf242df5c5e52a5f7713254718034ee591f" translate="yes" xml:space="preserve">
          <source>To use Bazel in a new application, first install &lt;code&gt;@angular/bazel&lt;/code&gt; globally</source>
          <target state="translated">새 응용 프로그램에서 Bazel을 사용하려면 먼저 &lt;code&gt;@angular/bazel&lt;/code&gt; 전역으로 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="c3f4f3cb1895e041269196b22d5a205a95c00cb5" translate="yes" xml:space="preserve">
          <source>To use CSS grid with IE10/11, you must explicitly enable it using the &lt;code&gt;autoplace&lt;/code&gt; option. To do this, add the following to the top of the global styles file (or within a specific css selector scope):</source>
          <target state="translated">IE10 / 11에서 CSS 그리드를 사용하려면 &lt;code&gt;autoplace&lt;/code&gt; 옵션 을 사용하여 CSS 그리드를 명시 적으로 활성화해야합니다 . 이렇게하려면 전역 스타일 파일의 맨 위에 (또는 특정 CSS 선택기 범위 내에서) 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="adbc1c0149aa2c996df7fd94085915ea70c1dfcf" translate="yes" xml:space="preserve">
          <source>To use a select in a template-driven form, simply add an &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt; attribute to the main &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">템플릿 기반 양식에서 선택을 사용하려면 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;name&lt;/code&gt; 속성을 기본 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 태그에 추가하면됩니다.</target>
        </trans-unit>
        <trans-unit id="1e2bb110d6290afebb75094727d3cf27ca37ffb2" translate="yes" xml:space="preserve">
          <source>To use attribute binding with the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; attribute &lt;code&gt;colspan&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 속성 &lt;code&gt;colspan&lt;/code&gt; 과 함께 속성 바인딩을 사용하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="0ca88cb17e7b1914d4b8afd6842937291337a45f" translate="yes" xml:space="preserve">
          <source>To use pipes you should have a basic understanding of the following:</source>
          <target state="translated">파이프를 사용하려면 다음에 대한 기본적인 이해가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="134e2c6b074bceb43e2c937a59dfdbe82522807e" translate="yes" xml:space="preserve">
          <source>To use reactive form controls, import &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; package and add it to your NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">반응 형 양식 컨트롤을 사용하려면 &lt;code&gt;@angular/forms&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 을 가져 와서 NgModule의 &lt;code&gt;imports&lt;/code&gt; 배열에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d9a033cbec8595c7b94a782a7c20d201108cbb14" translate="yes" xml:space="preserve">
          <source>To use reactive forms, import &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; package and add it to your NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">반응 형을 사용하려면 &lt;code&gt;@angular/forms&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 을 가져 와서 NgModule의 &lt;code&gt;imports&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="795604549bb75622c86eb22a8a3537118214bc43" translate="yes" xml:space="preserve">
          <source>To use route guards, consider using component-less routes as this facilitates guarding child routes.</source>
          <target state="translated">경로 가드를 사용하려면 구성 요소가없는 경로를 사용하는 것이 좋습니다. 이렇게하면 하위 경로를 쉽게 보호 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99b05aeea7ad8c9ff74a29d0c307334f8ae5a9cc" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt;, import the symbol from &lt;code&gt;@angular/common/upgrade&lt;/code&gt; and add it to your &lt;code&gt;AppModule&lt;/code&gt; imports using the static &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt; 을 사용하려면 &lt;code&gt;@angular/common/upgrade&lt;/code&gt; 에서 기호를 가져 와서 정적 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; 메서드를 사용 하여 &lt;code&gt;AppModule&lt;/code&gt; 가져 오기에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="3ae96bb53c4ba4ef32b382b3c0895785d1dbb38d" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component class, first import &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and then decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, as in the following example.</source>
          <target state="translated">하위 구성 요소 클래스에서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 데코레이터 를 사용하려면 먼저 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 을 가져온 다음 다음 예제 와 같이 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 속성을 데코레이션합니다 .</target>
        </trans-unit>
        <trans-unit id="df43dc8c1dde95936358a838f639abe20aaeb53b" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component class, first import &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and then decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">자식 구성 요소 클래스에서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 데코레이터 를 사용하려면 먼저 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 을 가져온 다음 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 속성을 장식하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4922d09d3f66928b67e63af20c190e526abbeb7" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;ng deploy&lt;/code&gt; command, use &lt;code&gt;ng add&lt;/code&gt; to add a package that implements deployment capabilities to your favorite platform. Adding the package automatically updates your workspace configuration, adding a deployment &lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI builder&lt;/a&gt;. For example:</source>
          <target state="translated">용도에 &lt;code&gt;ng deploy&lt;/code&gt; 명령을 사용 &lt;code&gt;ng add&lt;/code&gt; 패키지를 추가하는 것을 좋아하는 플랫폼 구현 배포 기능을. 패키지를 추가하면 배치 &lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI 빌더를&lt;/a&gt; 추가하여 작업 공간 구성이 자동으로 업데이트됩니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="61742a0d0031401384bd80c8bfa4431f59daa8a1" translate="yes" xml:space="preserve">
          <source>To use the Angular framework, you should be familiar with the following:</source>
          <target state="translated">Angular 프레임 워크를 사용하려면 다음 사항에 익숙해야합니다.</target>
        </trans-unit>
        <trans-unit id="f99f05f6ce8842a8205cc3644b5e73ca6f6cb435" translate="yes" xml:space="preserve">
          <source>To use the Angular router, an app needs to have at least two components so that it can navigate from one to the other. To create a component using the CLI, enter the following at the command line where &lt;code&gt;first&lt;/code&gt; is the name of your component:</source>
          <target state="translated">Angular 라우터를 사용하려면 앱이 하나에서 다른 것으로 탐색 할 수 있도록 적어도 두 개의 구성 요소가 있어야합니다. CLI를 사용하여 구성 요소를 만들려면 명령 줄에 다음을 입력하십시오. 여기서 &lt;code&gt;first&lt;/code&gt; 는 구성 요소의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="4e5078f362fa8e75b589c64aa05c23c8c2894e2d" translate="yes" xml:space="preserve">
          <source>To use the Language Service for in-line templates, you must first add an extension to allow TypeScript, then install the Angular Language Service plug-in. Starting with TypeScript 2.3, TypeScript has a plug-in model that the language service can use.</source>
          <target state="translated">인라인 템플릿에 언어 서비스를 사용하려면 먼저 TypeScript를 허용하는 확장을 추가 한 다음 Angular Language Service 플러그인을 설치해야합니다. TypeScript 2.3부터 TypeScript에는 언어 서비스가 사용할 수있는 플러그인 모델이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d456e2ebd07067eb97a027965223c7abb3f733d7" translate="yes" xml:space="preserve">
          <source>To use the environment configurations you have defined, your components must import the original environments file:</source>
          <target state="translated">정의한 환경 구성을 사용하려면 구성 요소가 원래 환경 파일을 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="f5d7e74575342444e96fc87e2007c4383a5ce53c" translate="yes" xml:space="preserve">
          <source>To use the new &lt;code&gt;HighlightDirective&lt;/code&gt;, add a paragraph (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) element to the template of the root &lt;code&gt;AppComponent&lt;/code&gt; and apply the directive as an attribute.</source>
          <target state="translated">새로운 &lt;code&gt;HighlightDirective&lt;/code&gt; 를 사용하려면 루트 &lt;code&gt;AppComponent&lt;/code&gt; 의 템플리트에 단락 ( &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ) 요소를 추가 하고 지시문을 속성으로 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="1aa16e54cdfeb57cd99e53decbadafdfb1ec740f" translate="yes" xml:space="preserve">
          <source>To use the property, you must declare it in the class, which in this example is &lt;code&gt;AppComponent&lt;/code&gt;. The value of &lt;code&gt;classes&lt;/code&gt; is &lt;code&gt;special&lt;/code&gt;.</source>
          <target state="translated">속성을 사용하려면 클래스에서 선언해야합니다 . 이 예제에서는 &lt;code&gt;AppComponent&lt;/code&gt; 입니다. &lt;code&gt;classes&lt;/code&gt; 의 가치 는 &lt;code&gt;special&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="6ef78e3fbfe7e791fb6b54a58fe45a757bce01ad" translate="yes" xml:space="preserve">
          <source>To use the same instance of &lt;code&gt;HttpInterceptors&lt;/code&gt; for the entire app, import the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in your &lt;code&gt;AppModule&lt;/code&gt;, and add the interceptors to the root application injector . If you import &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; multiple times across different modules (for example, in lazy loading modules), each import creates a new copy of the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, which overwrites the interceptors provided in the root module.</source>
          <target state="translated">전체 앱에 동일한 &lt;code&gt;HttpInterceptors&lt;/code&gt; 인스턴스를 사용하려면 &lt;code&gt;AppModule&lt;/code&gt; 에서만 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 가져오고 루트 애플리케이션 인젝터에 인터셉터를 추가하십시오. 다른 모듈 (예 : 지연 로딩 모듈)에서 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 여러 번 가져 오는 경우 각 가져 오기에서 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 의 새 사본을 작성 하여 루트 모듈에 제공된 인터셉터를 겹쳐 씁니다.</target>
        </trans-unit>
        <trans-unit id="862ac8fcf9776d649025ec8678ccd0c4bc9fb24a" translate="yes" xml:space="preserve">
          <source>To use the target and the property, you must declare them in their respective classes.</source>
          <target state="translated">대상과 속성을 사용하려면 각각의 클래스에서 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="8a1652d0cb403164496c7c6e9915242c358c810d" translate="yes" xml:space="preserve">
          <source>To use this directive you must provide a container element that sets the &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; attribute to a switch expression. Inner elements with a &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; will display based on their expression:</source>
          <target state="translated">이 지시문을 사용하려면 &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; 속성을 스위치 표현식으로 설정하는 컨테이너 요소를 제공해야합니다 . &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; 가 있는 내부 요소는 해당 표현식을 기반으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bec1df521164ef700b40c0abfb52f86f1e693028" translate="yes" xml:space="preserve">
          <source>To use this service, add it to your component or directive as a dependency. The service is instantiated along with your component.</source>
          <target state="translated">이 서비스를 사용하려면 구성 요소 또는 지시문에 종속성으로 추가하십시오. 서비스는 구성 요소와 함께 인스턴스화됩니다.</target>
        </trans-unit>
        <trans-unit id="3b6be3fc2dc7edbb46b0b1ec51c5955d3e6888c2" translate="yes" xml:space="preserve">
          <source>To use your locale definition in the build configuration, use the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option in &lt;code&gt;angular.json&lt;/code&gt; to tell the CLI which locales to generate for the build configuration:</source>
          <target state="translated">빌드 구성에서 로케일 정의를 사용하려면 &lt;code&gt;angular.json&lt;/code&gt; 의 &lt;code&gt;&quot;localize&quot;&lt;/code&gt; 옵션 을 사용하여 빌드 구성에 대해 생성 할 로케일을 CLI에 알립니다.</target>
        </trans-unit>
        <trans-unit id="cd30c23cd4c148ec7cf06d7ae5e25c0dc72d20b3" translate="yes" xml:space="preserve">
          <source>To use your new components, import them into &lt;code&gt;AppRoutingModule&lt;/code&gt; at the top of the file, as follows:</source>
          <target state="translated">새 구성 요소를 사용하려면 다음과 같이 파일 맨 위에있는 &lt;code&gt;AppRoutingModule&lt;/code&gt; 로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="ec400ea96c2fce5839cbfdc718a80a3377af0601" translate="yes" xml:space="preserve">
          <source>To use your own library in an app:</source>
          <target state="translated">앱에서 자신의 라이브러리를 사용하려면</target>
        </trans-unit>
        <trans-unit id="3c973408d2448836192162ca55537f91af2a75f7" translate="yes" xml:space="preserve">
          <source>To validate the links, you don't need the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate and you don't need the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; to mark where the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; inserts &lt;em&gt;routed components&lt;/em&gt;.</source>
          <target state="translated">링크를 확인하려면, 당신은 필요가 없습니다 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 탐색 할 당신은 필요하지 않습니다 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 를 Where 표시하기 위해 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 삽입이 &lt;em&gt;구성 요소를 전달&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0df4d562aaab9bff2662b3ac4f6d1a92f4728ee1" translate="yes" xml:space="preserve">
          <source>To validate the potential alter ego, we need to consult a central database of all currently enlisted heroes. The process is asynchronous, so we need a special validator for that.</source>
          <target state="translated">잠재적 인 자아의 가능성을 확인하기 위해 현재 참여한 모든 영웅의 중앙 데이터베이스를 참조해야합니다. 프로세스는 비동기 적이므로 특별한 유효성 검사기가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="32c127e56d91889f1c7cad6d0e80c60907253fef" translate="yes" xml:space="preserve">
          <source>To verify the build output, open &lt;code&gt;dist/my-app/index.html&lt;/code&gt;. Look for default text &lt;code&gt;app-shell works!&lt;/code&gt; to show that the app shell route was rendered as part of the output.</source>
          <target state="translated">빌드 출력을 확인하려면 &lt;code&gt;dist/my-app/index.html&lt;/code&gt; 을여십시오 . 기본 텍스트 &lt;code&gt;app-shell works!&lt;/code&gt; 찾으십시오 ! 앱 셸 경로가 출력의 일부로 렌더링되었음을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="058878199f4a19cab2e45942ff386bcd8a9c4824" translate="yes" xml:space="preserve">
          <source>To view or download the example code used in this topic, see the live example.</source>
          <target state="translated">이 주제에 사용 된 예제 코드를 보거나 다운로드하려면 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="64189167d7c6f7924c3403091e78e99cd1953102" translate="yes" xml:space="preserve">
          <source>To watch for changes on an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, use &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, one of Angular's &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;lifecycle hooks&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; is specifically designed to work with properties that have the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator. See the &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;&lt;code&gt;OnChanges&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide for more details and examples.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 속성의 변경 사항을 보려면 Angular의 &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;수명주기 후크&lt;/a&gt; 중 하나 인 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 . &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 는 특별히 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt; () 데코레이터 가있는 속성에서 작동하도록 설계되었습니다 . 자세한 내용과 예 는 &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; 안내서 의 &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt; &lt;code&gt;OnChanges&lt;/code&gt; &lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="90e9f667063b22e44e21816a49d7a46c4e72f6d9" translate="yes" xml:space="preserve">
          <source>To watch for changes on an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, you can use &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, one of Angular's &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hooks&lt;/a&gt;. See the &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;&lt;code&gt;OnChanges&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide for more details and examples.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 속성의 변경 사항을 확인하려면 Angular의 &lt;a href=&quot;lifecycle-hooks&quot;&gt;수명주기 후크&lt;/a&gt; 중 하나 인 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 를 사용할 수 있습니다 . 자세한 내용과 예제 는 &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; 가이드 의 &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt; &lt;code&gt;OnChanges&lt;/code&gt; &lt;/a&gt; 섹션을 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="05a58fa2ca80d1b185bffa061088c51d5420c848" translate="yes" xml:space="preserve">
          <source>To write these kinds of test, you'll use additional features of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; as well as other testing helpers.</source>
          <target state="translated">이러한 종류의 테스트를 작성하려면 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 의 추가 기능 과 다른 테스트 도우미를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1cc935e80e328e474a31d427ae2531c53add98a9" translate="yes" xml:space="preserve">
          <source>Together, a component and template define an Angular view.</source>
          <target state="translated">컴포넌트와 템플릿이 함께 각도보기를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="87022fcea4706d527b367133425bf8fe125ff9af" translate="yes" xml:space="preserve">
          <source>Toggle two form regions (extra credit)</source>
          <target state="translated">두 양식 영역 전환 (추가 크레딧)</target>
        </trans-unit>
        <trans-unit id="b01d73f154f36c228522d4798ad4a598756fa10a" translate="yes" xml:space="preserve">
          <source>Toggling button functionality</source>
          <target state="translated">버튼 기능 전환</target>
        </trans-unit>
        <trans-unit id="5ba5c297a3177e98b75ef09b3c0904e236e367fe" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">옵션 제공하는 데 사용할 수있는 토큰 &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 의 외부 &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="31eb6ab3d3ba3ac918313692bbab97fbc9516ee1" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">옵션 제공하는 데 사용할 수있는 토큰 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 의 외부 &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a829a6b9e3e265061c5310994b566e52ec5ed4d0" translate="yes" xml:space="preserve">
          <source>Token to provide CompilerOptions in the platform injector.</source>
          <target state="translated">플랫폼 인젝터에 컴파일러 옵션을 제공하기위한 토큰.</target>
        </trans-unit>
        <trans-unit id="1d10a851a2521fa1132fbcccf205872120c2acd7" translate="yes" xml:space="preserve">
          <source>Tokens &lt;a href=&quot;dependency-injection&quot;&gt;can have different types&lt;/a&gt;. They are often classes. They may also be strings.</source>
          <target state="translated">토큰 &lt;a href=&quot;dependency-injection&quot;&gt;은 다른 유형을 가질 수 있습니다&lt;/a&gt; . 그들은 종종 수업입니다. 문자열 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="19d57f29559f37ce632a300697209a7f397c855f" translate="yes" xml:space="preserve">
          <source>Tokens can be merged into a combined query selector string. For example:</source>
          <target state="translated">토큰은 결합 된 쿼리 선택기 문자열로 병합 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="df45966d6a0d5c55c4c026a6b59b4d99477ebee0" translate="yes" xml:space="preserve">
          <source>Top component</source>
          <target state="translated">상단 구성 요소</target>
        </trans-unit>
        <trans-unit id="8dd425bec3818cb3cdcc48d42a8c69706bf636c4" translate="yes" xml:space="preserve">
          <source>Total number of bytes to upload or download. Depending on the request or response, this may not be computable and thus may not be present.</source>
          <target state="translated">업로드 또는 다운로드 할 총 바이트 수입니다. 요청 또는 응답에 따라 계산할 수 없으므로 존재하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="253508f1cdb3b5a118c1f092109924e9f6cc5ecf" translate="yes" xml:space="preserve">
          <source>Tour of Heroes App and Tutorial</source>
          <target state="translated">영웅 투어 앱 및 튜토리얼</target>
        </trans-unit>
        <trans-unit id="79ffe79231e4016ea2181b480464ff0f91ab2c0f" translate="yes" xml:space="preserve">
          <source>Tour of Heroes app and tutorial</source>
          <target state="translated">Tour of Heroes 앱 및 튜토리얼</target>
        </trans-unit>
        <trans-unit id="af62994036bf0b04887e8a29971470d011d020a4" translate="yes" xml:space="preserve">
          <source>Tour of Heroes tutorial application</source>
          <target state="translated">Tour of Heroes 튜토리얼 애플리케이션</target>
        </trans-unit>
        <trans-unit id="838744bbebd051b5d24871e5f63b3ba4199099d6" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Add in-app navigation with routing</source>
          <target state="translated">Tour of Heroes : 라우팅이 포함 된 인앱 내비게이션 추가</target>
        </trans-unit>
        <trans-unit id="c493c5cdfa4a8ccdfc9662a20626564589907ab7" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Add services</source>
          <target state="translated">Tour of Heroes : 서비스 추가</target>
        </trans-unit>
        <trans-unit id="31d0192b3921c7fd4f68f0d13ef0be39ec4f48f9" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Create a feature component</source>
          <target state="translated">Tour of Heroes : 기능 구성 요소 만들기</target>
        </trans-unit>
        <trans-unit id="72c48b3f6ee5672c5101b356a4815efc83090869" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Creating an application</source>
          <target state="translated">Tour of Heroes : 응용 프로그램 만들기</target>
        </trans-unit>
        <trans-unit id="a7a0b3548bbe957863ff25131676aa39c68a0d62" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Display a selection list</source>
          <target state="translated">Tour of Heroes : 선택 목록 표시</target>
        </trans-unit>
        <trans-unit id="cdf382244af028f356e9cda40178a770fc9b8cee" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Get data from a server</source>
          <target state="translated">Tour of Heroes : 서버에서 데이터 가져 오기</target>
        </trans-unit>
        <trans-unit id="c31394cb566e25893c1b9026e5a85a94d73a845a" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: The hero editor</source>
          <target state="translated">Tour of Heroes : 영웅 편집자</target>
        </trans-unit>
        <trans-unit id="e9f49431ff1950df0bab16eb3bda80a1b69035be" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: completed application</source>
          <target state="translated">Tour of Heroes : 완료된 신청서</target>
        </trans-unit>
        <trans-unit id="940a504d78dc8eb71cdeb87d05acf21c2c8dddc2" translate="yes" xml:space="preserve">
          <source>Track and listen for changes to the form's data model.</source>
          <target state="translated">양식의 데이터 모델 변경 사항을 추적하고 청취하십시오.</target>
        </trans-unit>
        <trans-unit id="8fb0f6e53c00adefd00aea3fc755781253060a37" translate="yes" xml:space="preserve">
          <source>Track by identity as computed by the &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt; 에 의해 계산 된 신원 별 추적 .</target>
        </trans-unit>
        <trans-unit id="2e20a272657096b0f12c4de4b5cd187088921815" translate="yes" xml:space="preserve">
          <source>Track control state and validity with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 로 제어 상태 및 유효성 추적</target>
        </trans-unit>
        <trans-unit id="cd9c1a52a403cc4c1aef9ca6a8b5b237a8db3e62" translate="yes" xml:space="preserve">
          <source>Track control states</source>
          <target state="translated">제어 상태 추적</target>
        </trans-unit>
        <trans-unit id="205a26cf0e86ebcb22227fe276faba33af550f97" translate="yes" xml:space="preserve">
          <source>Track input validity and control status using &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 사용하여 입력 유효성 및 제어 상태를 추적 합니다.</target>
        </trans-unit>
        <trans-unit id="c1f1f73803fe36b0c16b9ccc852ad5cf4c245bed" translate="yes" xml:space="preserve">
          <source>Track state changes and the validity of form controls.</source>
          <target state="translated">상태 변경 및 양식 컨트롤의 유효성을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="750eabe2d59ab51eb9806ca014b817ea6d03f06e" translate="yes" xml:space="preserve">
          <source>TrackByFunction</source>
          <target state="translated">TrackByFunction</target>
        </trans-unit>
        <trans-unit id="e8e06238766a8da29e9dc9f88eea2e8f0510ad6f" translate="yes" xml:space="preserve">
          <source>Tracking and controlling &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;focus&lt;/a&gt; in a UI is an important consideration in designing for accessibility. When using Angular routing, you should decide where page focus goes upon navigation.</source>
          <target state="translated">UI에서 &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;포커스&lt;/a&gt; 를 추적하고 제어 하는 것은 내게 필요한 옵션을 디자인 할 때 고려해야 할 중요한 사항입니다. 각도 라우팅을 사용하는 경우 탐색시 페이지 포커스가 이동하는 위치를 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="4f24ac08bd1cafccdfc3354a39d295dd35edf75c" translate="yes" xml:space="preserve">
          <source>Tracking and showing request progress</source>
          <target state="translated">요청 진행 상황 추적 및 표시</target>
        </trans-unit>
        <trans-unit id="2bf54b9db29d88e96523bb27968cbe340de3297c" translate="yes" xml:space="preserve">
          <source>Tracks changes to the email attribute bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 전자 메일 속성의 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="8fd392bb0e0e4c81e1b2544fdfe54ef3a072a778" translate="yes" xml:space="preserve">
          <source>Tracks changes to the pattern bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 패턴의 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="d69d10dc65469d775e59042da88ca5d5529758ae" translate="yes" xml:space="preserve">
          <source>Tracks changes to the required attribute bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 필수 특성에 대한 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="d8556ba32bce9b6e211ba689364183606036ec09" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the maximum length bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 최대 길이에 대한 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="94a80f0e6fddb9418827ab4bb176c0d8df0d6618" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the minimum length bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 최소 길이에 대한 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="196941bc4879e6f47b65e211a399eab8a6f6151b" translate="yes" xml:space="preserve">
          <source>Tracks options for the &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 인스턴스의 옵션을 추적 합니다.</target>
        </trans-unit>
        <trans-unit id="ab3dbc710cc5293470f8eccfb6d9f6e87414e9b0" translate="yes" xml:space="preserve">
          <source>Tracks simple string values bound to the option element. For objects, use the &lt;code&gt;ngValue&lt;/code&gt; input binding.</source>
          <target state="translated">옵션 요소에 바인딩 된 간단한 문자열 값을 추적합니다. 객체의 경우 &lt;code&gt;ngValue&lt;/code&gt; 입력 바인딩을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e0382103af4eac9cadd4b2247861b1d78b40172" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance bound to the directive.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="e47245e960a6f3e488ea514c18870fe786d9b704" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 을 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="22f15c49bdce4bf9eed08a825998088b3e2b947f" translate="yes" xml:space="preserve">
          <source>Tracks the configuration options for this &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">이 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 인스턴스 의 구성 옵션을 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="625b260ece4880729473d6e613cdc9200774f31d" translate="yes" xml:space="preserve">
          <source>Tracks the list of added &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; instances</source>
          <target state="translated">추가 된 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 인스턴스 목록을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="8ccc39b3d5dcbc137ff9c2eb0496d9ce9fae07b0" translate="yes" xml:space="preserve">
          <source>Tracks the name bound to the directive. If a parent form exists, it uses this name as a key to retrieve this control's value.</source>
          <target state="translated">지시문에 바인딩 된 이름을 추적합니다. 부모 폼이 있으면이 이름을 키로 사용하여이 컨트롤의 값을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="89defebffe912c5087e896997a7d9b201c73c793" translate="yes" xml:space="preserve">
          <source>Tracks the name bound to the directive. The parent form uses this name as a key to retrieve this control's value.</source>
          <target state="translated">지시문에 바인딩 된 이름을 추적합니다. 부모 폼은이 이름을 키로 사용하여이 컨트롤의 값을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="aee499214828a5c060da6e529f71f860679051fe" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="d3d060876a35b94f524bce8f795b5d0bee4651e5" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. Accepts a name as a string or a number. The name in the form of a string is useful for individual forms, while the numerical form allows for form arrays to be bound to indices when iterating over arrays in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 상위 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 . 이름을 문자열 또는 숫자로 허용합니다. 문자열 형식의 이름은 개별 형식에 유용하지만 숫자 형식을 사용하면 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 배열을 반복 할 때 형식 배열을 인덱스에 바인딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aad0ec9ce7f409bb75dafe01a113a9f157129e45" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="a20a2f1c67ecb76fe7f909062f6d19a471cc8a84" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. Accepts a name as a string or a number. The name in the form of a string is useful for individual forms, while the numerical form allows for form controls to be bound to indices when iterating over controls in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 상위 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 . 이름을 문자열 또는 숫자로 허용합니다. 문자열 형식의 이름은 개별 양식에 유용하지만 숫자 형식을 사용하면 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 컨트롤을 반복 할 때 양식 컨트롤을 인덱스에 바인딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5250e4f20d726ba69a0ff3fea3984936608f75ae" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="1a76ef6bd8291e09721e93618763da21c4ce1b30" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. Accepts a name as a string or a number. The name in the form of a string is useful for individual forms, while the numerical form allows for form groups to be bound to indices when iterating over groups in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 상위 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 . 이름을 문자열 또는 숫자로 허용합니다. 문자열 형식의 이름은 개별 형식에 유용하지만 숫자 형식을 사용하면 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 에서 그룹을 반복 할 때 형식 그룹을 인덱스에 바인딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3587ba9a726a4c83a603322c3d244042c4a5440b" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="94ef4bb133d8371862e04cdbe35ea80d627658aa" translate="yes" xml:space="preserve">
          <source>Tracks the name of the radio input element.</source>
          <target state="translated">라디오 입력 요소의 이름을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="847fd12a5e443af80b1d628517f650d4b16809c3" translate="yes" xml:space="preserve">
          <source>Tracks the option comparison algorithm for tracking identities when checking for changes.</source>
          <target state="translated">변경 사항을 확인할 때 ID를 추적하기위한 옵션 비교 알고리즘을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="4181514cf443c8d2ed062575db037633d03567f5" translate="yes" xml:space="preserve">
          <source>Tracks the value and validation status of an individual form control.</source>
          <target state="translated">개별 양식 컨트롤의 값 및 유효성 검사 상태를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="e95029f5c1b54e6951ef7d1dc1f48671ee8c5122" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스 그룹의 값 및 유효성 상태를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="6081501877b5287d24fab2c51a89d5bc830a5e25" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스 그룹의 값 및 유효성 상태를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="145bfac45bf7e6224142dc5429a521af2cf548c9" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 인스턴스 배열의 값 및 유효성 상태를 추적 합니다.</target>
        </trans-unit>
        <trans-unit id="571f063bb31197967a229f7c4374acb092869635" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 인스턴스 배열의 값 및 유효성 상태를 추적 합니다.</target>
        </trans-unit>
        <trans-unit id="a2626e67aec561be0def79f87c598efe295b2e85" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to the option element. Unlike the value binding, ngValue supports binding to objects.</source>
          <target state="translated">옵션 요소에 바인딩 된 값을 추적합니다. 값 바인딩과 달리 ngValue는 객체에 대한 바인딩을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="3ee63c63d361eb3aa2b0a3c1f8a3353d2f4dccf1" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 값을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="283ea7e4ca07fa5714eec7b7e0bd1c17f20bc544" translate="yes" xml:space="preserve">
          <source>Tracks the value of the radio input element</source>
          <target state="translated">라디오 입력 요소의 값을 추적</target>
        </trans-unit>
        <trans-unit id="705f5065f56c892bc977873651559fe5515ab8a6" translate="yes" xml:space="preserve">
          <source>Tracks whether the control is disabled.</source>
          <target state="translated">컨트롤 비활성화 여부를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="1a3132b053ea81ac5f7c83c0422cea4be492de74" translate="yes" xml:space="preserve">
          <source>Tracks whether the linked route of an element is currently active, and allows you to specify one or more CSS classes to add to the element when the linked route is active.</source>
          <target state="translated">요소의 연결된 경로가 현재 활성 상태인지 여부를 추적하고 연결된 경로가 활성 상태 일 때 요소에 추가 할 하나 이상의 CSS 클래스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e4fec6404eb80383e9e6d6b5b94d18a5fdece28" translate="yes" xml:space="preserve">
          <source>Transcluding Angular Content into AngularJS Component Directives</source>
          <target state="translated">Angular 컨텐츠를 AngularJS 컴포넌트 지시문으로 변환</target>
        </trans-unit>
        <trans-unit id="b8bc0089d8b086cb38dab65911aa8acd5d70fbb7" translate="yes" xml:space="preserve">
          <source>Transclusion: yes</source>
          <target state="translated">번역 : 예</target>
        </trans-unit>
        <trans-unit id="f29368cc7ff3b4ade7bfa044be1921ff64aa770b" translate="yes" xml:space="preserve">
          <source>TransferState</source>
          <target state="translated">TransferState</target>
        </trans-unit>
        <trans-unit id="dea51bb13a4467c505ee6181171375f497334d54" translate="yes" xml:space="preserve">
          <source>Transform</source>
          <target state="translated">Transform</target>
        </trans-unit>
        <trans-unit id="812518bba5c699b0027b6b3a480acfb0ebc647bd" translate="yes" xml:space="preserve">
          <source>Transform the free-form body into a serialized format suitable for transmission to the server.</source>
          <target state="translated">자유 형식 본문을 서버로 전송하기에 적합한 직렬화 된 형식으로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="dc1c231275a16e11dae243561efa84b2936b1b19" translate="yes" xml:space="preserve">
          <source>Transformation</source>
          <target state="translated">Transformation</target>
        </trans-unit>
        <trans-unit id="404db50a8d5ad10495b7632c1b694b2266386cf7" translate="yes" xml:space="preserve">
          <source>Transforming Data Using Pipes</source>
          <target state="translated">파이프를 사용하여 데이터 변환</target>
        </trans-unit>
        <trans-unit id="173612f0833f1106fbc8f8dd6cfe45177a22f0f4" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element makes all of the required Angular infrastructure available to the browser. Creating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding, mapping Angular functionality to the corresponding native HTML equivalents.</source>
          <target state="translated">컴포넌트를 사용자 정의 요소로 변환하면 필요한 모든 Angular 인프라를 브라우저에서 사용할 수 있습니다. 사용자 정의 요소를 작성하는 것은 간단하고 간단하며 변경 감지 및 데이터 바인딩을 통해 컴포넌트 정의보기를 자동으로 연결하여 Angular 기능을 해당하는 기본 HTML에 맵핑합니다.</target>
        </trans-unit>
        <trans-unit id="76dc9f83782c6293c8d8c6eca91efe25b1d4f5a7" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element provides an easy path to creating dynamic HTML content in your Angular app. HTML content that you add directly to the DOM in an Angular app is normally displayed without Angular processing, unless you define a &lt;em&gt;dynamic component&lt;/em&gt;, adding your own code to connect the HTML tag to your app data, and participate in change detection. With a custom element, all of that wiring is taken care of automatically.</source>
          <target state="translated">구성 요소를 사용자 지정 요소로 변환하면 Angular 앱에서 동적 HTML 콘텐츠를 쉽게 만들 수 있습니다. &lt;em&gt;동적 구성 요소&lt;/em&gt; 를 정의하지 않는 한 Angular 앱에서 DOM에 직접 추가하는 HTML 컨텐츠는 일반적으로 Angular 처리없이 표시됩니다.&lt;em&gt;&lt;/em&gt; 하고 HTML 태그를 앱 데이터에 연결하기위한 고유 코드를 추가하고 변경 감지에 참여 . 사용자 정의 요소를 사용하면 모든 배선이 자동으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="428b2ec1d548861040d138b663bdf7c61a4509ea" translate="yes" xml:space="preserve">
          <source>Transforming components to custom elements</source>
          <target state="translated">컴포넌트를 사용자 정의 요소로 변환</target>
        </trans-unit>
        <trans-unit id="73fc8ace43695569d7d87dfe192d9d7682d98901" translate="yes" xml:space="preserve">
          <source>Transforming data with parameters and chained pipes</source>
          <target state="translated">매개 변수 및 체인 파이프로 데이터 변환</target>
        </trans-unit>
        <trans-unit id="52c81ceec8de22f6a2b99230305438e29dcc24a6" translate="yes" xml:space="preserve">
          <source>Transforms Object or Map into an array of key value pairs.</source>
          <target state="translated">Object 또는 Map을 키 값 쌍의 배열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="3a83fe4e975ea243d0d4caabdbff2dd2ca6b63d4" translate="yes" xml:space="preserve">
          <source>Transforms a number into a string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">그룹 크기 및 구분 기호, 소수점 문자 및 기타 로캘 별 구성을 결정하는 로캘 규칙에 따라 서식이 지정된 숫자를 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="afee2a38410ecd1b168f5e62c7af603ea93414fc" translate="yes" xml:space="preserve">
          <source>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">그룹 크기 및 구분 기호, 소수점 문자 및 기타 로캘 별 구성을 결정하는 로캘 규칙에 따라 서식이 지정된 숫자를 통화 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="ba444aa93f3d7c55a8743abcd65343bee076a245" translate="yes" xml:space="preserve">
          <source>Transforms a number to a percentage string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">그룹 크기 및 구분 기호, 소수점 문자 및 기타 로캘 별 구성을 결정하는 로캘 규칙에 따라 서식이 지정된 숫자 문자열을 백분율 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="b212033572f2c487923ac10525b776d1494e7327" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 스트림으로 변환합니다 .이 중 하나는 &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 일 것입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="abab076aca3610a4dff43371a91f5154ef3df183" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 스트림으로 변환합니다 .이 중 하나는 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 일 것입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="c23fe29041b0f266f33891ae1c767b0508402f9a" translate="yes" xml:space="preserve">
          <source>Transforms text to all lower case.</source>
          <target state="translated">텍스트를 모두 소문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="0e392a9c956f15e36c2ae33d345783ffbc7a81c9" translate="yes" xml:space="preserve">
          <source>Transforms text to all upper case.</source>
          <target state="translated">텍스트를 모두 대문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="7ba2f292cd824026ac9d865b38dd20dbd4af7fa7" translate="yes" xml:space="preserve">
          <source>Transforms text to title case. Capitalizes the first letter of each word and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</source>
          <target state="translated">텍스트를 제목 케이스로 변환합니다. 각 단어의 첫 글자를 대문자로 바꾸고 나머지 단어는 소문자로 변환합니다. 단어는 공백, 탭 또는 줄 바꿈 문자와 같은 공백 문자로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="40a88712d9f4b6d6903665d4b10961274eca90e4" translate="yes" xml:space="preserve">
          <source>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</source>
          <target state="translated">텍스트를 제목 대소 문자로 변환합니다. 각 단어의 첫 글자를 대문자로 바꾸고 나머지 단어는 소문자로 변환합니다. 단어는 공백, 탭 또는 줄 바꿈 문자와 같은 공백 문자로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="8c6c4775aedd63bf234a390e5f164114cd3a3da9" translate="yes" xml:space="preserve">
          <source>Transforms the current value of expression &lt;code&gt;cardNumber&lt;/code&gt; via the pipe called &lt;code&gt;myCardNumberFormatter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;myCardNumberFormatter&lt;/code&gt; 라는 파이프를 통해 expression &lt;code&gt;cardNumber&lt;/code&gt; 표현식의 현재 값을 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="acb4047f26fa458f6ca21611c9b86f2ba97bab12" translate="yes" xml:space="preserve">
          <source>Transition and triggers</source>
          <target state="translated">전환 및 트리거</target>
        </trans-unit>
        <trans-unit id="154ba22581c5a012b47904a5fa38035fe8be49ae" translate="yes" xml:space="preserve">
          <source>Transition the Angular language service to Ivy</source>
          <target state="translated">Angular 언어 서비스를 Ivy로 전환</target>
        </trans-unit>
        <trans-unit id="fd3159002733ca58d01f18f3ef225b0a35103de7" translate="yes" xml:space="preserve">
          <source>Transitions and timing</source>
          <target state="translated">전환 및 타이밍</target>
        </trans-unit>
        <trans-unit id="f89031b2b65e1a903ff7d0356c56106e1092f7d4" translate="yes" xml:space="preserve">
          <source>Transitions are matched in the order in which they are defined. Thus, you can apply other transitions on top of the &lt;code&gt;* =&amp;gt; *&lt;/code&gt; (any-to-any) transition. For example, define style changes or animations that would apply just to &lt;code&gt;open =&amp;gt; closed&lt;/code&gt;, or just to &lt;code&gt;closed =&amp;gt; open&lt;/code&gt;, and then use &lt;code&gt;* =&amp;gt; *&lt;/code&gt; as a fallback for state pairings that aren't otherwise called out.</source>
          <target state="translated">전환은 정의 된 순서대로 일치합니다. 따라서 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; (any-to-any) 전환 위에 다른 전환을 적용 할 수 있습니다 . 예를 들어, &lt;code&gt;open =&amp;gt; closed&lt;/code&gt; 또는 &lt;code&gt;closed =&amp;gt; open&lt;/code&gt; 에만 적용되는 스타일 변경 또는 애니메이션을 정의한 다음 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; 를 달리 호출되지 않은 상태 쌍의 대체로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7ff0a6e47fefa7e662116ee0dd231cdcc6a56382" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;plural&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 번역</target>
        </trans-unit>
        <trans-unit id="f28407638edfdbe51d332499328f0747faddfb77" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;select&lt;/code&gt;</source>
          <target state="translated">번역 &lt;code&gt;select&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9957e9ff8b20a6e29b6eb99cd6e9ed298461187" translate="yes" xml:space="preserve">
          <source>Translate a nested expression</source>
          <target state="translated">중첩 표현식 번역</target>
        </trans-unit>
        <trans-unit id="c9d3944f437bc8cf7fc3df4fc9fddd4f037a4199" translate="yes" xml:space="preserve">
          <source>Translate alternate expressions</source>
          <target state="translated">대체 표현 번역</target>
        </trans-unit>
        <trans-unit id="f8fd85ad8899ddbec87ff78411cd4b09cf77deb3" translate="yes" xml:space="preserve">
          <source>Translate attributes</source>
          <target state="translated">속성 번역</target>
        </trans-unit>
        <trans-unit id="ff5d47c28f5fd5187961a4c8c2f488109cdeb11a" translate="yes" xml:space="preserve">
          <source>Translate each translation file</source>
          <target state="translated">각 번역 파일 번역</target>
        </trans-unit>
        <trans-unit id="5510d0e0211ac26b4aefd0a320a3925c01ccf567" translate="yes" xml:space="preserve">
          <source>Translate nested expressions</source>
          <target state="translated">중첩 된 표현식 번역</target>
        </trans-unit>
        <trans-unit id="420c026f490f5f41976d80e6af023a9d6e002e18" translate="yes" xml:space="preserve">
          <source>Translate plurals</source>
          <target state="translated">복수형 번역</target>
        </trans-unit>
        <trans-unit id="e0f4e41de6ef002e0ce322ce32fdb24f811b3435" translate="yes" xml:space="preserve">
          <source>Translate plurals and alternate expressions</source>
          <target state="translated">복수형 및 대체 표현 번역</target>
        </trans-unit>
        <trans-unit id="5bd3d2d2e5c2b013f5f2ac3e26d961037f15cca1" translate="yes" xml:space="preserve">
          <source>Translate text nodes</source>
          <target state="translated">텍스트 노드 번역</target>
        </trans-unit>
        <trans-unit id="0a748b9bc0792adca60e27565c67768a69334281" translate="yes" xml:space="preserve">
          <source>Translate text not for display</source>
          <target state="translated">표시 용이 아닌 텍스트 번역</target>
        </trans-unit>
        <trans-unit id="c13a3e77e07e4d808e0f50d46cf7d8fba6e47542" translate="yes" xml:space="preserve">
          <source>Translate text without creating an element</source>
          <target state="translated">요소를 만들지 않고 텍스트 번역</target>
        </trans-unit>
        <trans-unit id="930b43956592fb6022e0ba237e0507893ea4e039" translate="yes" xml:space="preserve">
          <source>Translate the other text nodes the same way as shown in the following example:</source>
          <target state="translated">다음 예제에 표시된 것과 동일한 방식으로 다른 텍스트 노드를 번역합니다.</target>
        </trans-unit>
        <trans-unit id="9ca6a08c5891b63e799acee720895ad663f388d5" translate="yes" xml:space="preserve">
          <source>Translate the other text nodes the same way:</source>
          <target state="translated">다른 텍스트 노드를 같은 방식으로 번역하십시오.</target>
        </trans-unit>
        <trans-unit id="ac3f7cdd6fb7bb10f67a29857be4bed2e5e05bcb" translate="yes" xml:space="preserve">
          <source>Translate the source text</source>
          <target state="translated">소스 텍스트 번역</target>
        </trans-unit>
        <trans-unit id="624f545665467d793ca13a411258c70e6ac2ee86" translate="yes" xml:space="preserve">
          <source>Translating plural and select expressions</source>
          <target state="translated">복수 및 선택 표현식 번역</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="36e89f13f90ac0d31f2033903bc7999d29a243ad" translate="yes" xml:space="preserve">
          <source>TranslationWidth</source>
          <target state="translated">TranslationWidth</target>
        </trans-unit>
        <trans-unit id="3c93b9e5330687363111dd7a6e0ebef29ee56f02" translate="yes" xml:space="preserve">
          <source>Transmitting data between components</source>
          <target state="translated">컴포넌트 간 데이터 전송</target>
        </trans-unit>
        <trans-unit id="6e1d794deefaa6f98622f1040f05a7ea650ea223" translate="yes" xml:space="preserve">
          <source>Tree shaking refers to a compiler option that removes code from the final bundle if the app doesn't reference that code. When providers are tree-shakable, the Angular compiler removes the associated services from the final output when it determines that your application doesn't use those services. This significantly reduces the size of your bundles.</source>
          <target state="translated">트리 흔들림은 앱이 해당 코드를 참조하지 않는 경우 최종 번들에서 코드를 제거하는 컴파일러 옵션을 나타냅니다. 공급자가 트리를 검색 할 수있는 경우 Angular 컴파일러는 응용 프로그램에서 해당 서비스를 사용하지 않는 것으로 판단되면 최종 출력에서 ​​관련 서비스를 제거합니다. 이렇게하면 번들 크기가 크게 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="158297e3d668ae1a961f319687ea97bab89382f7" translate="yes" xml:space="preserve">
          <source>Tree-shakable InjectionToken</source>
          <target state="translated">나무를 흔드는 주사 토큰</target>
        </trans-unit>
        <trans-unit id="e9fcab1031cb2e23a1fe8832649e9c5a53141e58" translate="yes" xml:space="preserve">
          <source>Tree-shakable providers</source>
          <target state="translated">나무를 흔드는 제공자</target>
        </trans-unit>
        <trans-unit id="434f076d20f1b3b8a33e9ed50bbcb217521d722b" translate="yes" xml:space="preserve">
          <source>Tree-shaking and &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">트리 쉐이킹 및 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f05b6a96acbdcfadc896179dc913a13d818f2f99" translate="yes" xml:space="preserve">
          <source>Tree-shaking doesn't work here because Angular can't decide to exclude one chunk of code (the provider definition for the service within the module factory) based on whether another chunk of code (the service class) is used. To make services tree-shakable, the information about how to construct an instance of the service (the provider definition) needs to be a part of the service class itself.</source>
          <target state="translated">Angular는 다른 코드 청크 (서비스 클래스)의 사용 여부에 따라 코드 청크 (모듈 팩토리 내 서비스 제공자 정의)를 제외하기로 결정할 수 없으므로 트리 쉐이킹이 작동하지 않습니다. 서비스를 트리에 저장 가능하게 만들려면 서비스 인스턴스 (제공자 정의)를 구성하는 방법에 대한 정보가 서비스 클래스 자체의 일부 여야합니다.</target>
        </trans-unit>
        <trans-unit id="b998b898aa55ff4a0b42570f2ce7f5d95a803024" translate="yes" xml:space="preserve">
          <source>Tree-shaking is especially useful for a library because the application which uses the library may not have a need to inject it. Read more about &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;tree-shakable providers&lt;/a&gt; in &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers&lt;/a&gt;.</source>
          <target state="translated">라이브러리를 사용하는 응용 프로그램은 라이브러리를 주입 할 필요가 없으므로 트리 셰이 킹은 라이브러리에 특히 유용합니다. &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI 제공자&lt;/a&gt; 에서 &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;트리 교환 가능 제공자&lt;/a&gt; 에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="1e7081d736f43ad30574ac906d26acdd03c38ed9" translate="yes" xml:space="preserve">
          <source>Trees</source>
          <target state="translated">Trees</target>
        </trans-unit>
        <trans-unit id="6c9d923a2bdc1cbd32c38da5c221d86fa7a8a6ed" translate="yes" xml:space="preserve">
          <source>Trees can represent hierarchical data.</source>
          <target state="translated">트리는 계층 적 데이터를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de3b30d295ded9bca000cfefdd9403aa187ece06" translate="yes" xml:space="preserve">
          <source>Trigger a change detection cycle for the component.</source>
          <target state="translated">구성 요소의 변경 감지주기를 트리거하십시오.</target>
        </trans-unit>
        <trans-unit id="9407e89d96626ed5d353629e3f6d9a9d64468166" translate="yes" xml:space="preserve">
          <source>Trigger component destruction.</source>
          <target state="translated">구성 요소 삭제를 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="53af3485dc7b16524b04a2e63069b00e185de29e" translate="yes" xml:space="preserve">
          <source>Triggering the animation</source>
          <target state="translated">애니메이션 트리거</target>
        </trans-unit>
        <trans-unit id="e870e5d23b1facd0b564612cfd9fdd42eb18bc87" translate="yes" xml:space="preserve">
          <source>Triggers a change event by emitting on the &lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 를 생성&lt;/a&gt; 하여 변경 이벤트를 트리거합니다 .</target>
        </trans-unit>
        <trans-unit id="c9f5152248717bc70a71c2004527861111d686f2" translate="yes" xml:space="preserve">
          <source>Triggers a change event by emitting on the &lt;code&gt;changes&lt;/code&gt;&lt;a href=&quot;eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;changes&lt;/code&gt; &lt;a href=&quot;eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 를&lt;/a&gt; 방출하여 변경 이벤트를 트리거합니다 .</target>
        </trans-unit>
        <trans-unit id="0b6c3c9f705c8dd24de0e35b9f2ab7dea14b27f8" translate="yes" xml:space="preserve">
          <source>Triggers a warning in dev mode that this input should not be used with reactive forms.</source>
          <target state="translated">개발 모드에서이 입력을 반응 형과 함께 사용해서는 안된다는 경고를 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="0ae4d5b42be1c56e1a7225f517e99f471b359dc4" translate="yes" xml:space="preserve">
          <source>Triggers a warning that this input should not be used with reactive forms.</source>
          <target state="translated">이 입력을 반응성 양식과 함께 사용해서는 안된다는 경고를 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="5083756d2f83ef32092480b31b3cecd6c6cec6c9" translate="yes" xml:space="preserve">
          <source>Triggers the event by its name if there is a corresponding listener in the element's &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; collection. The second parameter is the &lt;em&gt;event object&lt;/em&gt; expected by the handler. See &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">요소의 &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; 콜렉션 에 해당 리스너가있는 경우 이름으로 이벤트를 트리거합니다 . 두 번째 매개 변수는 핸들러가 예상 하는 &lt;em&gt;이벤트 오브젝트&lt;/em&gt; 입니다. &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;위를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="116e8e66449e1e735056336b68b6a84dd95d3b0b" translate="yes" xml:space="preserve">
          <source>Triggers the event by its name if there is a corresponding listener in the element's &lt;code&gt;listeners&lt;/code&gt; collection. The second parameter is the &lt;em&gt;event object&lt;/em&gt; expected by the handler. See &lt;a href=&quot;testing-components-scenarios#trigger-event-handler&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">요소의 &lt;code&gt;listeners&lt;/code&gt; 컬렉션 에 해당 리스너가있는 경우 해당 이름으로 이벤트를 트리거합니다 . 두 번째 매개 변수는 핸들러에서 예상 하는 &lt;em&gt;이벤트 객체&lt;/em&gt; 입니다. &lt;a href=&quot;testing-components-scenarios#trigger-event-handler&quot;&gt;위를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a10c269fb7def350ff63b23aa2d28b00775e9f1c" translate="yes" xml:space="preserve">
          <source>Trim the value (remove whitespace) and make sure it&amp;rsquo;s a minimum length.</source>
          <target state="translated">값을 자르고 (공백 제거) 최소 길이인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="3cc21cf3f8e5867393f5bad054b9c40301206223" translate="yes" xml:space="preserve">
          <source>Trims all whitespaces at the beginning and the end of a template.</source>
          <target state="translated">템플릿의 시작과 끝에서 모든 공백을 자릅니다.</target>
        </trans-unit>
        <trans-unit id="92ad5db953b958def77761bdd99674c317ad3534" translate="yes" xml:space="preserve">
          <source>Troubleshooting template errors</source>
          <target state="translated">템플릿 오류 문제 해결</target>
        </trans-unit>
        <trans-unit id="f43741667aa518662d503fc2ce7e1d14354c3bec" translate="yes" xml:space="preserve">
          <source>True if at least one navigation event has occurred, false otherwise.</source>
          <target state="translated">하나 이상의 탐색 이벤트가 발생하면 true이고, 그렇지 않으면 false입니다.</target>
        </trans-unit>
        <trans-unit id="9d796fe59ff2474ea78a1c50451058993aa79f3b" translate="yes" xml:space="preserve">
          <source>True if the Service Worker is enabled (supported by the browser and enabled via &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">서비스 워커가 활성화되어 있으면 (브라우저에서 지원하고 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 을 통해 활성화 된 경우) true 입니다.</target>
        </trans-unit>
        <trans-unit id="5f972cc15ad49cf4f212b677b7dc7d8b9251db55" translate="yes" xml:space="preserve">
          <source>True if the control has not been marked as touched</source>
          <target state="translated">컨트롤이 터치 된 것으로 표시되지 않은 경우 참</target>
        </trans-unit>
        <trans-unit id="dcc1b1c1aa85f2da9a269e743dc502fd0749e99e" translate="yes" xml:space="preserve">
          <source>True if the control is marked as &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">컨트롤이 &lt;code&gt;touched&lt;/code&gt; 것으로 표시되면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="60e52a2ca105703a08ce2fd47ddd086d17018855" translate="yes" xml:space="preserve">
          <source>True if this query is optional, false if it is required. Default is false. A required query throws an error if no elements are retrieved when the query is executed. An optional query does not.</source>
          <target state="translated">이 쿼리가 선택적인 경우 True이고, 필요한 경우 false입니다. 기본값은 false입니다. 쿼리가 실행될 때 요소가 검색되지 않으면 필요한 쿼리에서 오류가 발생합니다. 선택적 쿼리는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e18fb8c0b6ed0a18d4906b17c7bbc3fae3da28aa" translate="yes" xml:space="preserve">
          <source>True to create a new element without checking whether one already exists.</source>
          <target state="translated">이미 존재하는지 확인하지 않고 새 요소를 작성하려면 True입니다.</target>
        </trans-unit>
        <trans-unit id="478f00a6d6caf0e5792a2d5faa6511aff88a2e25" translate="yes" xml:space="preserve">
          <source>True to create new elements without checking whether they already exist.</source>
          <target state="translated">이미 존재하는지 확인하지 않고 새 요소를 작성하려면 참입니다.</target>
        </trans-unit>
        <trans-unit id="06b3634a6e2a35bbc0dd073c9b175791f2522293" translate="yes" xml:space="preserve">
          <source>True to include an anchor fragment in the path.</source>
          <target state="translated">경로에 앵커 조각을 포함하려면 true입니다.</target>
        </trans-unit>
        <trans-unit id="1ab65405badb72e5749b47e365af2b6aaf2cb192" translate="yes" xml:space="preserve">
          <source>True to preserve or false to remove potentially superfluous whitespace characters from the compiled template. Whitespace characters are those matching the &lt;code&gt;\s&lt;/code&gt; character class in JavaScript regular expressions. Default is false, unless overridden in compiler options.</source>
          <target state="translated">컴파일 된 템플릿에서 불필요한 공백 문자를 제거하려면 유지하거나 false로 설정하십시오. 공백 문자는 JavaScript 정규식에서 &lt;code&gt;\s&lt;/code&gt; 문자 클래스와 일치하는 문자입니다. 컴파일러 옵션에서 재정의하지 않는 한 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="c19e0cdc9c33c77f5adf440dc15998ff2a61e211" translate="yes" xml:space="preserve">
          <source>Trusting safe values</source>
          <target state="translated">안전한 가치 신뢰</target>
        </trans-unit>
        <trans-unit id="4db0cc04a34f0802ff52870b79e104695e053ead" translate="yes" xml:space="preserve">
          <source>Try Angular without local setup</source>
          <target state="translated">로컬 설정없이 Angular 사용해보기</target>
        </trans-unit>
        <trans-unit id="beb70957ec5482b78d59548c5c70483736e2c218" translate="yes" xml:space="preserve">
          <source>Try editing any of the project files. Save and refresh the browser to see the changes.</source>
          <target state="translated">프로젝트 파일을 편집하십시오. 변경 사항을 보려면 브라우저를 저장하고 새로 고치십시오.</target>
        </trans-unit>
        <trans-unit id="7ddd66b689c9370a62daee26be57fd02d84a295b" translate="yes" xml:space="preserve">
          <source>Try it</source>
          <target state="translated">시도 해봐</target>
        </trans-unit>
        <trans-unit id="62e11793c0386a1bddb0a86fda7f464e7c562e11" translate="yes" xml:space="preserve">
          <source>Try it by adding the following directive binding variations to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">다음 지시문 바인딩 변형을 &lt;code&gt;AppComponent&lt;/code&gt; 템플리트 에 추가하여 시도하십시오 .</target>
        </trans-unit>
        <trans-unit id="bba0e9c4048196d4221aebf3796d5e3371ce4a48" translate="yes" xml:space="preserve">
          <source>Try it by clicking on this &lt;span name=&quot;router&quot;&gt;live example link&lt;/span&gt;.</source>
          <target state="translated">이 &lt;span name=&quot;router&quot;&gt;라이브 예제 링크&lt;/span&gt; 를 클릭하여 사용해보십시오 .</target>
        </trans-unit>
        <trans-unit id="da8a7f15b67a49c642972b20522557722114e5ed" translate="yes" xml:space="preserve">
          <source>Try it by clicking on this live example link.</source>
          <target state="translated">이 라이브 예제 링크를 클릭하여 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="55391745de289ddef8d65ec34b574ce002c5003d" translate="yes" xml:space="preserve">
          <source>Try it out. Because the array has four items, the message should appear. Go back into &lt;code&gt;app.component.ts&lt;/code&gt; and delete or comment out one of the elements from the heroes array. The browser should refresh automatically and the message should disappear.</source>
          <target state="translated">사용해보십시오. 배열에는 4 개의 항목이 있으므로 메시지가 나타납니다. &lt;code&gt;app.component.ts&lt;/code&gt; 로 돌아가서 heroes 배열에서 요소 중 하나를 삭제하거나 주석 처리하십시오. 브라우저가 자동으로 새로 고쳐지고 메시지가 사라집니다.</target>
        </trans-unit>
        <trans-unit id="4fbaa8ee9842ab2551d1acf053489f8692c5e0b5" translate="yes" xml:space="preserve">
          <source>Try navigating to a non-existing route on your application, such as &lt;code&gt;http://localhost:4200/powers&lt;/code&gt;. This route doesn't match anything defined in your &lt;code&gt;app.module.ts&lt;/code&gt; file. However, because you defined a wildcard route, the application automatically displays your &lt;code&gt;PageNotFound&lt;/code&gt; component.</source>
          <target state="translated">&lt;code&gt;http://localhost:4200/powers&lt;/code&gt; 와 같이 애플리케이션에 존재하지 않는 경로로 이동해보세요 . 이 경로는 &lt;code&gt;app.module.ts&lt;/code&gt; 파일에 정의 된 것과 일치하지 않습니다 . 그러나 와일드 카드 경로를 정의 했으므로 응용 프로그램은 자동으로 &lt;code&gt;PageNotFound&lt;/code&gt; 구성 요소를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="8d0b56cf0fa53f627bd12835d235587765053dc2" translate="yes" xml:space="preserve">
          <source>Try one of the &quot;3G&quot; speeds.</source>
          <target state="translated">&quot;3G&quot;속도 중 하나를 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="916d283bcc86820526bcc4f4fbe336d8a152ee13" translate="yes" xml:space="preserve">
          <source>Try setting it to &lt;code&gt;'prefix'&lt;/code&gt; and clicking the &lt;code&gt;Go to sidekicks&lt;/code&gt; button. Since that's a bad URL, you should see the &quot;Page not found&quot; page. Instead, you're still on the &quot;Heroes&quot; page. Enter a bad URL in the browser address bar. You're instantly re-routed to &lt;code&gt;/heroes&lt;/code&gt;. Every URL, good or bad, that falls through to this route definition is a match.</source>
          <target state="translated">그것으로 설정하십시오 &lt;code&gt;'prefix'&lt;/code&gt; 와 클릭 &lt;code&gt;Go to sidekicks&lt;/code&gt; 버튼을 누릅니다. 잘못된 URL이므로 &quot;페이지를 찾을 수 없음&quot;페이지가 표시되어야합니다. 대신, 여전히 &quot;영웅&quot;페이지에 있습니다. 브라우저 주소 표시 줄에 잘못된 URL을 입력하십시오. 즉시 &lt;code&gt;/heroes&lt;/code&gt; 로 다시 라우팅됩니다 . 이 경로 정의에 해당하는 모든 URL이 좋든 나쁘 든 일치합니다.</target>
        </trans-unit>
        <trans-unit id="dc1ea3e260d075f0697ffb4ad683deb138ba7e53" translate="yes" xml:space="preserve">
          <source>Try setting it to &lt;code&gt;'prefix'&lt;/code&gt; then click the &lt;code&gt;Go to sidekicks&lt;/code&gt; button. Remember that's a bad URL and you should see the &quot;Page not found&quot; page. Instead, you're still on the &quot;Heroes&quot; page. Enter a bad URL in the browser address bar. You're instantly re-routed to &lt;code&gt;/heroes&lt;/code&gt;. &lt;em&gt;Every&lt;/em&gt; URL, good or bad, that falls through to &lt;em&gt;this&lt;/em&gt; route definition will be a match.</source>
          <target state="translated">&lt;code&gt;'prefix'&lt;/code&gt; 로 설정 한 다음 &lt;code&gt;Go to sidekicks&lt;/code&gt; 버튼 을 클릭하십시오 . URL이 잘못되어 &quot;페이지를 찾을 수 없음&quot;페이지가 표시되어야합니다. 대신, 여전히 &quot;영웅&quot;페이지에 있습니다. 브라우저 주소 표시 줄에 잘못된 URL을 입력하십시오. &lt;code&gt;/heroes&lt;/code&gt; 로 즉시 다시 라우팅됩니다. . &lt;em&gt;이&lt;/em&gt; 경로 정의에 해당하는 &lt;em&gt;모든&lt;/em&gt; URL (좋거나 나쁨) &lt;em&gt;이&lt;/em&gt; 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ae0be3b047c4a387d93f02977418e5b637e0c752" translate="yes" xml:space="preserve">
          <source>Try the &quot;Notify Me&quot; button:</source>
          <target state="translated">&quot;알림&quot;버튼을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="cd0d3f4d9f412d033eddde43a048eb8599b4eed2" translate="yes" xml:space="preserve">
          <source>Try the .</source>
          <target state="translated">을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="3d6fc4cc6f37c4db0524ee36aee6fae03bc9b160" translate="yes" xml:space="preserve">
          <source>Try the Reactive Forms live-example.</source>
          <target state="translated">리 액티브 폼 라이브 예제를 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="1a5c2c2df13a5a08f5ec5e0c77a14b60e0a6f624" translate="yes" xml:space="preserve">
          <source>Try the change detection profiler &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; then hit Enter.</source>
          <target state="translated">변경 감지 프로파일 러 &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; 시도하십시오. 을 후 Enter를 누르십시오.</target>
        </trans-unit>
        <trans-unit id="cc82bb7378a7738346274197a65346c4cb1c2791" translate="yes" xml:space="preserve">
          <source>Try the live example.</source>
          <target state="translated">라이브 예를보십시오.</target>
        </trans-unit>
        <trans-unit id="b805dd8f7e3739860d3a0a92f9f360211111283e" translate="yes" xml:space="preserve">
          <source>Try this Reactive Forms live-example.</source>
          <target state="translated">이 Reactive Forms 라이브 예제를 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="b20e64d5a4c330fa2d1e596d27eda1450204275a" translate="yes" xml:space="preserve">
          <source>Try to fetch from the network first.</source>
          <target state="translated">먼저 네트워크에서 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="6f3deed36905b6ad108038ee3fade698b4b61902" translate="yes" xml:space="preserve">
          <source>Try to minimize the heading depth, preferably only two. But more headings, such as this one, are permitted if they make sense.</source>
          <target state="translated">제목 깊이를 최소화하십시오 (두 개만). 그러나이 경우와 같이 더 많은 제목이 허용되는 경우 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="95d44839b57ad612170554fef51a66c4c2b769e8" translate="yes" xml:space="preserve">
          <source>Try to update webdriver.</source>
          <target state="translated">웹 드라이버를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="b44892b7f81948b449b1fceb43f8115ba5ff108b" translate="yes" xml:space="preserve">
          <source>Tu</source>
          <target state="translated">Tu</target>
        </trans-unit>
        <trans-unit id="529541bb390c76152e313351d89de3cd30a1c4bd" translate="yes" xml:space="preserve">
          <source>Tue</source>
          <target state="translated">Tue</target>
        </trans-unit>
        <trans-unit id="42e43b612a5dfae57ddf5929f0fb945ae83cbf61" translate="yes" xml:space="preserve">
          <source>Tuesday</source>
          <target state="translated">Tuesday</target>
        </trans-unit>
        <trans-unit id="db9100479b1bab146b0529edf56cd2ecbd2b852d" translate="yes" xml:space="preserve">
          <source>Turns an array of provider definitions into an array of resolved providers.</source>
          <target state="translated">공급자 정의 배열을 확인 된 공급자 배열로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="383ad3510af7887a34418d15283bb89e03b4bffb" translate="yes" xml:space="preserve">
          <source>Turns on strict Angular compiler flags &lt;a href=&quot;angular-compiler-options#stricttemplates&quot;&gt;&lt;code&gt;strictTemplates&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;angular-compiler-options#strictinjectionparameters&quot;&gt;&lt;code&gt;strictInjectionParameters&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt;&lt;code&gt;strictInputAccessModifiers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">엄격한 Angular 컴파일러 플래그 &lt;a href=&quot;angular-compiler-options#stricttemplates&quot;&gt; &lt;code&gt;strictTemplates&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;angular-compiler-options#strictinjectionparameters&quot;&gt; &lt;code&gt;strictInjectionParameters&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt; &lt;code&gt;strictInputAccessModifiers&lt;/code&gt; 를 켭니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7a8c0b3d0dcf9c1d0944ace8b26766b7619fce7b" translate="yes" xml:space="preserve">
          <source>Turns the li element and its contents into a template, and uses that to instantiate a view for each item in list.</source>
          <target state="translated">li 요소 및 해당 컨텐츠를 템플리트로 변환하고이를 사용하여 목록의 각 항목에 대한보기를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="67bfe76e19af4ce403f2340d240f7abfa0a85e7e" translate="yes" xml:space="preserve">
          <source>Two injector hierarchies</source>
          <target state="translated">두 인젝터 계층</target>
        </trans-unit>
        <trans-unit id="5af8d4f5f9dae7eb59bd4d8f4f973fff3523e350" translate="yes" xml:space="preserve">
          <source>Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</source>
          <target state="translated">이 양식의 세 필드 중 두 개가 필요합니다. 필수 필드는 왼쪽에 녹색 막대가있어 쉽게 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43f3257791f6c0d8e082c7c2a58ae0090aa05789" translate="yes" xml:space="preserve">
          <source>Two older properties are still available, however, their replacements are preferable as they may be deprecated in a future Angular version.</source>
          <target state="translated">두 개의 이전 속성을 계속 사용할 수 있지만 향후 Angular 버전에서 더 이상 사용되지 않을 수 있으므로 대체하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b26194f02c2a9055521cad644dadbcf22c29b12c" translate="yes" xml:space="preserve">
          <source>Two older properties are still available. They are less capable than their replacements, discouraged, and may be deprecated in a future Angular version.</source>
          <target state="translated">두 가지 이전 속성을 계속 사용할 수 있습니다. 대체 제품보다 성능이 떨어지고, 권장하지 않으며, 향후 Angular 버전에서 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a300f2c0186d270173b20803696a0cf5fd774656" translate="yes" xml:space="preserve">
          <source>Two types of errors can occur.</source>
          <target state="translated">두 가지 유형의 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8403b3967903a37a646651f5a30b179b5958e53" translate="yes" xml:space="preserve">
          <source>Two types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error &lt;em&gt;responses&lt;/em&gt;.</source>
          <target state="translated">두 가지 유형의 오류가 발생할 수 있습니다. 서버 백엔드는 요청을 거부하고 404 또는 500과 같은 상태 코드와 함께 HTTP 응답을 리턴합니다 . 이들은 오류 &lt;em&gt;응답&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ee50a3e68cf100c0537278aede679f485d09b355" translate="yes" xml:space="preserve">
          <source>Two-way</source>
          <target state="translated">Two-way</target>
        </trans-unit>
        <trans-unit id="76e6c5bfb6eaf94684d63dcc6574a58b41d951d1" translate="yes" xml:space="preserve">
          <source>Two-way binding</source>
          <target state="translated">양방향 바인딩</target>
        </trans-unit>
        <trans-unit id="a02bb0a1df250e5934cdce63455e1ad4bc4637b6" translate="yes" xml:space="preserve">
          <source>Two-way binding &lt;code&gt;[(...)]&lt;/code&gt;</source>
          <target state="translated">양방향 바인딩 &lt;code&gt;[(...)]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abb2ef9985767c53d9cd9fbf56c7a420e7edf720" translate="yes" xml:space="preserve">
          <source>Two-way binding combines property binding with event binding:</source>
          <target state="translated">양방향 바인딩은 속성 바인딩과 이벤트 바인딩을 결합합니다.</target>
        </trans-unit>
        <trans-unit id="0ee8d72f683e98e5e49284a4dbb3c6a8dac3d915" translate="yes" xml:space="preserve">
          <source>Two-way binding does two things:</source>
          <target state="translated">양방향 바인딩은 두 가지 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="c6d110d5d38ba95a3719301b85f406ad9059aafe" translate="yes" xml:space="preserve">
          <source>Two-way binding gives components in your application a way to share data. Use two-way binding binding to listen for events and update values simultaneously between parent and child components.</source>
          <target state="translated">양방향 바인딩은 응용 프로그램의 구성 요소에 데이터를 공유하는 방법을 제공합니다. 양방향 바인딩 바인딩을 사용하여 이벤트를 수신하고 부모 및 자식 구성 요소간에 동시에 값을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="f559c791fe1735111c9bc3f8318c26c9efdb1820" translate="yes" xml:space="preserve">
          <source>Two-way binding gives your app a way to share data between a component class and its template.</source>
          <target state="translated">양방향 바인딩을 통해 앱은 구성 요소 클래스와 템플릿간에 데이터를 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03cb506ca909370dd733aa2c43253165731e42ab" translate="yes" xml:space="preserve">
          <source>Two-way binding in forms</source>
          <target state="translated">형태의 양방향 바인딩</target>
        </trans-unit>
        <trans-unit id="5d24cacbc734efe855956d91ed8e0797e5f736ba" translate="yes" xml:space="preserve">
          <source>Two-way data binding (used mainly in &lt;a href=&quot;forms&quot;&gt;template-driven forms&lt;/a&gt;) combines property and event binding in a single notation. Here's an example from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template that uses two-way data binding with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">양방향 데이터 바인딩 (주로 &lt;a href=&quot;forms&quot;&gt;템플릿 기반 양식에서 사용&lt;/a&gt; )은 단일 표기법으로 속성 및 이벤트 바인딩을 결합합니다. 다음 은 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문 과 양방향 데이터 바인딩을 사용 하는 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 템플릿 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="06f67c15fc229f1a2bb0b3b0ebc852bfedb0de8e" translate="yes" xml:space="preserve">
          <source>Two-way data binding with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 을 사용한 양방향 데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="6d973b2b83b53e6c30f5b13acc68a0a0c71e118f" translate="yes" xml:space="preserve">
          <source>Two-way data binding with ngModel</source>
          <target state="translated">ngModel을 사용한 양방향 데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="f52bdefafb9c2ca15e12f66ca83326ece8bda8ce" translate="yes" xml:space="preserve">
          <source>Two-way sequence: &lt;em&gt;view-to-source-to-view&lt;/em&gt;</source>
          <target state="translated">양방향 시퀀스 : &lt;em&gt;소스 간보기&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="abb237ba4f86298e209fd0cde19460f30c5121a4" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;ng.&lt;/code&gt; (usually the console will show auto-complete suggestion)</source>
          <target state="translated">&lt;code&gt;ng.&lt;/code&gt; 입력하십시오 . (일반적으로 콘솔은 자동 완성 제안을 표시합니다)</target>
        </trans-unit>
        <trans-unit id="00ec381921f624d45bbd03504823d08111458d72" translate="yes" xml:space="preserve">
          <source>Type annotations can be gradually added to existing functions and variables to pin down their types and get benefits like build-time error checking, great autocompletion support and inline documentation.</source>
          <target state="translated">유형 주석을 기존 함수 및 변수에 점진적으로 추가하여 유형을 고정하고 빌드 시간 오류 검사, 자동 완성 기능 지원 및 인라인 문서와 같은 이점을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35df57064639add6482ba283504c0b41a4d923e6" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">다른 종류의 &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 에 대한 열거 형을 입력 하십시오 .</target>
        </trans-unit>
        <trans-unit id="67608246c1a184d4c40c268ca1fdc639f618fa7c" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">다른 종류의 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 에 대한 열거 형을 입력 하십시오 .</target>
        </trans-unit>
        <trans-unit id="57c55c58c8644f8a5cbf6770552ae7125d3582e3" translate="yes" xml:space="preserve">
          <source>Type narrowing</source>
          <target state="translated">타입 축소</target>
        </trans-unit>
        <trans-unit id="89c46166d379053b9cc0147e94c74fad24f5cce5" translate="yes" xml:space="preserve">
          <source>Type of the listener (e.g. a native DOM event or a custom @Output).</source>
          <target state="translated">리스너 유형 (예 : 기본 DOM 이벤트 또는 사용자 정의 @Output).</target>
        </trans-unit>
        <trans-unit id="95d67b98d7690612e1e13d9a3e9a1be2da8d088a" translate="yes" xml:space="preserve">
          <source>Type of the response, narrowed to either the full response or the header.</source>
          <target state="translated">전체 응답 또는 헤더로 좁힌 응답 유형입니다.</target>
        </trans-unit>
        <trans-unit id="c05540b14b3733e314b2c94793826ae9c2b0627e" translate="yes" xml:space="preserve">
          <source>Type something in the input box, and watch the display update with each keystroke.</source>
          <target state="translated">입력 상자에 무언가를 입력하고 키를 누를 때마다 디스플레이가 업데이트되는 것을보십시오.</target>
        </trans-unit>
        <trans-unit id="33ab71a8dcc6216b348bea2620429ad622b3147d" translate="yes" xml:space="preserve">
          <source>Type the &lt;code&gt;$event&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 입력하십시오</target>
        </trans-unit>
        <trans-unit id="01e12f16a8da430c9b64b2d92b35b38ac6541548" translate="yes" xml:space="preserve">
          <source>Type used for modifications to metadata</source>
          <target state="translated">메타 데이터 수정에 사용되는 유형</target>
        </trans-unit>
        <trans-unit id="5173fdf6f5703224da499d4346fe617ae8193603" translate="yes" xml:space="preserve">
          <source>Type-ahead suggestions</source>
          <target state="translated">자동 완성 제안</target>
        </trans-unit>
        <trans-unit id="9c733ffadf4f948ba611c69673474803d64d1601" translate="yes" xml:space="preserve">
          <source>TypeDecorator</source>
          <target state="translated">TypeDecorator</target>
        </trans-unit>
        <trans-unit id="e6711bda99893016ef166d44941fe0aeec10d722" translate="yes" xml:space="preserve">
          <source>TypeProvider</source>
          <target state="translated">TypeProvider</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="27fa45a5f3c8fb13fa7acab3ba38cabe780416f0" translate="yes" xml:space="preserve">
          <source>TypeScript 3.9 is no longer supported. Please update to TypeScript 4.0. See &lt;a href=&quot;https://github.com/angular/angular/pull/39313&quot;&gt;PR 39313&lt;/a&gt;.</source>
          <target state="translated">TypeScript 3.9는 더 이상 지원되지 않습니다. TypeScript 4.0으로 업데이트하십시오. &lt;a href=&quot;https://github.com/angular/angular/pull/39313&quot;&gt;PR 39313을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eea2f4b377967e9066abaa29b6c1756fe6ff90ed" translate="yes" xml:space="preserve">
          <source>TypeScript Configuration</source>
          <target state="translated">TypeScript 구성</target>
        </trans-unit>
        <trans-unit id="d08f0fbcc73c7306dc8d1fd2df1b684771e05b98" translate="yes" xml:space="preserve">
          <source>TypeScript Typings</source>
          <target state="translated">타입 스크립트 타이핑</target>
        </trans-unit>
        <trans-unit id="070cfc661eff3e856be58ff916c3d3780369f7f1" translate="yes" xml:space="preserve">
          <source>TypeScript and HTML5 programming.</source>
          <target state="translated">TypeScript 및 HTML5 프로그래밍.</target>
        </trans-unit>
        <trans-unit id="e31ca1750956f6690f31bf9cdae28a7deb46de6e" translate="yes" xml:space="preserve">
          <source>TypeScript configuration</source>
          <target state="translated">TypeScript 구성</target>
        </trans-unit>
        <trans-unit id="568ece999d38f89aa19bccbc22c354f6f68a64b1" translate="yes" xml:space="preserve">
          <source>TypeScript configuration In the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt; section determines the ECMAScript target version that the code is compiled to. Modern browsers support ES2015 natively, while ES5 is more commonly used to support legacy browsers.</source>
          <target state="translated">타이프 스크립트 구성 파일 타이프 구성은 &lt;code&gt;tsconfig.json&lt;/code&gt; 는 상기 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;compilerOptions&lt;/code&gt; 의 섹션은 코드로 컴파일되는 ECMAScript를 대상 버전을 결정한다. 최신 브라우저는 기본적으로 ES2015를 지원하는 반면 ES5는 레거시 브라우저를 지원하는 데 더 일반적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4498390d814c37edb18467aa0deb8da7899b4db8" translate="yes" xml:space="preserve">
          <source>TypeScript configuration file</source>
          <target state="translated">TypeScript 구성 파일</target>
        </trans-unit>
        <trans-unit id="b1e9557f6d0130ab631bf37ddceaa7ef43c0683e" translate="yes" xml:space="preserve">
          <source>TypeScript configuration for Web Worker modules.</source>
          <target state="translated">웹 작업자 모듈의 TypeScript 구성</target>
        </trans-unit>
        <trans-unit id="ffe80e00ee1ac5833b065ce121ce10c3b973c059" translate="yes" xml:space="preserve">
          <source>TypeScript definition files for 3rd party libraries such as Jasmine and Node.js.</source>
          <target state="translated">Jasmine 및 Node.js와 같은 타사 라이브러리의 TypeScript 정의 파일</target>
        </trans-unit>
        <trans-unit id="0b3cb1f49429cb05d8a3b0bcacdfe5ff715b318e" translate="yes" xml:space="preserve">
          <source>TypeScript developers disagree about whether the &lt;code&gt;noImplicitAny&lt;/code&gt; flag should be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. There is no correct answer and you can change the flag later. But your choice now can make a difference in larger projects, so it merits discussion.</source>
          <target state="translated">TypeScript 개발자는 &lt;code&gt;noImplicitAny&lt;/code&gt; 플래그가 &lt;code&gt;true&lt;/code&gt; 인지 &lt;code&gt;false&lt;/code&gt; 인지에 대해 동의하지 않습니다 . 정답이 없으며 나중에 플래그를 변경할 수 있습니다. 그러나 이제 선택은 더 큰 프로젝트에서 차이를 만들 수 있으므로 토론 할 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ac9ee6e703b108a7d6fb03a16a6d571742ddf64" translate="yes" xml:space="preserve">
          <source>TypeScript execution environment and REPL for Node.js.</source>
          <target state="translated">Node.js에 대한 TypeScript 실행 환경 및 REPL</target>
        </trans-unit>
        <trans-unit id="e285eb073cfe4ca1656c07087772b6ee1156351a" translate="yes" xml:space="preserve">
          <source>TypeScript includes a special declaration file called &lt;code&gt;lib.d.ts&lt;/code&gt;. This file contains the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</source>
          <target state="translated">타이프 라이터라는 특별 선언 파일이 포함 &lt;code&gt;lib.d.ts&lt;/code&gt; 을 . 이 파일에는 JavaScript 런타임 및 DOM에있는 다양한 일반적인 JavaScript 구문에 대한 앰비언트 선언이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d17e05e344ecb4e3225929fb6a865b40d4814eb9" translate="yes" xml:space="preserve">
          <source>TypeScript is a primary language for Angular application development. It is a superset of JavaScript with design-time support for type safety and tooling.</source>
          <target state="translated">TypeScript는 Angular 응용 프로그램 개발을위한 기본 언어입니다. 형식 안전 및 툴링을위한 디자인 타임 지원 기능을 갖춘 JavaScript의 상위 세트입니다.</target>
        </trans-unit>
        <trans-unit id="2c8995564b3de9df5c51483595738fe4422b297b" translate="yes" xml:space="preserve">
          <source>TypeScript is the preferred language for Angular development. Read more about TypeScript at &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org&lt;/a&gt;.</source>
          <target state="translated">TypeScript는 Angular 개발에 선호되는 언어입니다. &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org&lt;/a&gt; 에서 TypeScript에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="65fd758bf6b72b6902912683c0db7c87ad16849d" translate="yes" xml:space="preserve">
          <source>TypeScript prevents you from setting &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; read-only properties.</source>
          <target state="translated">TypeScript는 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 읽기 전용 속성 을 설정하지 못하게합니다 .</target>
        </trans-unit>
        <trans-unit id="b0c307b7f89ffd82733eec999738292acbded4fe" translate="yes" xml:space="preserve">
          <source>TypeScript programming</source>
          <target state="translated">TypeScript 프로그래밍</target>
        </trans-unit>
        <trans-unit id="b1f5cc716c4de2a81ea99f71b78e0b5afc34aa22" translate="yes" xml:space="preserve">
          <source>TypeScript programming.</source>
          <target state="translated">TypeScript 프로그래밍.</target>
        </trans-unit>
        <trans-unit id="9363321037561d15481258cee32b0a8aa362ef21" translate="yes" xml:space="preserve">
          <source>TypeScript typings</source>
          <target state="translated">TypeScript 타이핑</target>
        </trans-unit>
        <trans-unit id="13b49b13fb502567852c984e23e397ba1fe80b3a" translate="yes" xml:space="preserve">
          <source>TypeScript understands ambient types so you don't import them. The Angular compiler does not understand a type that you neglect to export or import.</source>
          <target state="translated">TypeScript는 주변 유형을 이해하므로 가져 오지 않습니다. Angular 컴파일러는 내보내거나 가져 오기를 무시하는 형식을 이해하지 못합니다.</target>
        </trans-unit>
        <trans-unit id="77e137f60887b3a3c13ebdb09dee2d2b67d890c4" translate="yes" xml:space="preserve">
          <source>TypeScript will prevent you from setting &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; readonly properties.</source>
          <target state="translated">TypeScript를 사용하면 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 읽기 전용 속성 을 설정할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="717ede79628ca336772d228c8b05e09de2a3a0c2" translate="yes" xml:space="preserve">
          <source>TypeScript-aware editors leverage these same definition files to display type information about library features.</source>
          <target state="translated">TypeScript 인식 편집기는 동일한 정의 파일을 사용하여 라이브러리 기능에 대한 유형 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7118d9e8c875a30ba644adcfe209053d423d1da0" translate="yes" xml:space="preserve">
          <source>Typed Array</source>
          <target state="translated">타입 배열</target>
        </trans-unit>
        <trans-unit id="7ab3c88469253783493694d6963d80d7a8308f54" translate="yes" xml:space="preserve">
          <source>Typed according to the expected type of the response.</source>
          <target state="translated">예상되는 응답 유형에 따라 입력되었습니다.</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="c713e3cd5c50ec234c9ce6d04250d694a2a4d577" translate="yes" xml:space="preserve">
          <source>Types defined in a &lt;code&gt;@types/&lt;/code&gt; package for a library installed into the workspace are automatically added to the TypeScript configuration for the project that uses that library. TypeScript looks for types in the &lt;code&gt;node_modules/@types&lt;/code&gt; folder by default, so you don't have to add each type package individually.</source>
          <target state="translated">작업 공간에 설치된 라이브러리 의 &lt;code&gt;@types/&lt;/code&gt; 패키지에 정의 된 유형 은 해당 라이브러리를 사용하는 프로젝트의 TypeScript 구성에 자동으로 추가됩니다. TypeScript는 기본적으로 &lt;code&gt;node_modules/@types&lt;/code&gt; 폴더에서 유형을 검색 하므로 각 유형 패키지를 개별적으로 추가 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="82d702d4bc4170c7fef9f79cddd0b3758d5bd6d0" translate="yes" xml:space="preserve">
          <source>Types for many Angular built-in pipes have been either narrowed or expanded to be more accurate. For more information, see the corresponding &lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes&lt;/a&gt; API documentation. See &lt;a href=&quot;https://github.com/angular/angular/pull/37447&quot;&gt;PR 37447&lt;/a&gt;.</source>
          <target state="translated">많은 Angular 내장 파이프의 유형이 더 정확하도록 좁히거나 확장되었습니다. 자세한 내용은 해당 &lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes&lt;/a&gt; API 문서를 참조하세요 . &lt;a href=&quot;https://github.com/angular/angular/pull/37447&quot;&gt;PR 37447을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="12392cbc3086f77e04a6c62a73c887b3f9c633d6" translate="yes" xml:space="preserve">
          <source>Types of Feature Modules</source>
          <target state="translated">기능 모듈의 유형</target>
        </trans-unit>
        <trans-unit id="118122abcc89881e0578f9aef369355356986b9f" translate="yes" xml:space="preserve">
          <source>Types of NgModules</source>
          <target state="translated">NgModules의 종류</target>
        </trans-unit>
        <trans-unit id="11fe3760894bbd3efef56cd08f43a7f909233a1d" translate="yes" xml:space="preserve">
          <source>Types of modifiers</source>
          <target state="translated">수정 자의 종류</target>
        </trans-unit>
        <trans-unit id="0ef8a95f38c50052d0013209588f9bd78801e33d" translate="yes" xml:space="preserve">
          <source>Typically new embedded views are attached to the view container of this location, but in advanced use-cases, the view can be attached to a different container while keeping the data-binding and injection context from the original location.</source>
          <target state="translated">일반적으로 새 내장 뷰는이 위치의 뷰 컨테이너에 연결되지만 고급 사용 사례에서는 데이터 바인딩 및 주입 컨텍스트를 원래 위치에서 유지하면서 뷰를 다른 컨테이너에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c7b40120f45df1933863f5ac01d78ac42ee438a" translate="yes" xml:space="preserve">
          <source>Typically, animations involve multiple style &lt;em&gt;transformations&lt;/em&gt; over time. An HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each transformation.</source>
          <target state="translated">일반적으로 애니메이션에는 시간이 지남에 따라 여러 스타일 &lt;em&gt;변환&lt;/em&gt; 이 포함됩니다. HTML 요소는 페이지를 이동, 색상 변경, 확대 / 축소, 페이드 또는 슬라이드 아웃 할 수 있습니다. 이러한 변경은 동시에 또는 순차적으로 발생할 수 있습니다. 각 변환의 타이밍을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5fb32f38245ff9f2d99b2dd935857d879ebced7" translate="yes" xml:space="preserve">
          <source>Typically, the name of a generated artifact can be given as an argument to the command or specified with the --name option.</source>
          <target state="translated">일반적으로 생성 된 아티팩트 이름은 명령에 대한 인수로 제공되거나 --name 옵션으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b95554d848ef81d79b0b709dc7f5aaeb34a12474" translate="yes" xml:space="preserve">
          <source>Typically, you add a TypeScript configuration file called &lt;code&gt;tsconfig.json&lt;/code&gt; to your project to guide the compiler as it generates JavaScript files.</source>
          <target state="translated">일반적으로 &lt;code&gt;tsconfig.json&lt;/code&gt; 이라는 TypeScript 구성 파일 을 프로젝트에 추가하여 JavaScript 파일을 생성 할 때 컴파일러를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="09553776cac966b88a445abac2c889e11456f99a" translate="yes" xml:space="preserve">
          <source>Typing the directive's context</source>
          <target state="translated">지시문의 컨텍스트 입력</target>
        </trans-unit>
        <trans-unit id="a0bd1a75c0172c79f7c9ff6dc164b3a599561a53" translate="yes" xml:space="preserve">
          <source>Typing the event object reveals a significant objection to passing the entire DOM event into the method: the component has too much awareness of the template details. It can't extract information without knowing more than it should about the HTML implementation. That breaks the separation of concerns between the template (&lt;em&gt;what the user sees&lt;/em&gt;) and the component (&lt;em&gt;how the application processes user data&lt;/em&gt;).</source>
          <target state="translated">이벤트 객체를 입력하면 전체 DOM 이벤트를 메서드에 전달하는 데 상당한 반대가 나타납니다. 구성 요소가 템플릿 세부 정보를 너무 많이 인식합니다. HTML 구현에 대한 것 이상을 알지 못하면 정보를 추출 할 수 없습니다. 따라서 템플릿 ( &lt;em&gt;사용자가 보는 것&lt;/em&gt; )과 구성 요소 ( &lt;em&gt;응용 프로그램이 사용자 데이터를 처리하는 방법&lt;/em&gt; ) 사이의 우려가 분리 됩니다.</target>
        </trans-unit>
        <trans-unit id="480af6c7beed3c898f5f1f02a7bf65dedf1b38cc" translate="yes" xml:space="preserve">
          <source>Typings for custom elements</source>
          <target state="translated">사용자 정의 요소의 타이핑</target>
        </trans-unit>
        <trans-unit id="20bdf90100bc0696258702c718f92a1b02cab2b8" translate="yes" xml:space="preserve">
          <source>UPPER_UNDERSCORE_CASE (or UPPER_SNAKE_CASE, or SCREAMING_SNAKE_CASE): Traditional for constants (acceptable, but prefer camelCase). Upper snake case uses words in all capital letters connected with underscores. For example, &quot;FIX_ME&quot;.</source>
          <target state="translated">UPPER_UNDERSCORE_CASE (또는 UPPER_SNAKE_CASE 또는 SCREAMING_SNAKE_CASE) : 상수의 전통적 (허용 가능하지만 카멜 케이스 선호). 대문자 뱀은 밑줄로 연결된 모든 대문자로 단어를 사용합니다. 예를 들어 &quot;FIX_ME&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="a27c9c50aeeb496cbd6ae8eb92bcc77112bfe9fd" translate="yes" xml:space="preserve">
          <source>URL of the resource retrieved, or null if not available.</source>
          <target state="translated">검색된 리소스의 URL. 사용할 수없는 경우 null</target>
        </trans-unit>
        <trans-unit id="f65f44308f1ade7cb98e9a6130f17b75f1c7965f" translate="yes" xml:space="preserve">
          <source>URL path to normalize.</source>
          <target state="translated">정규화 할 URL 경로입니다.</target>
        </trans-unit>
        <trans-unit id="c774e36c8a233fe47b885d57e6f9250be88a291c" translate="yes" xml:space="preserve">
          <source>URL query strings</source>
          <target state="translated">URL 쿼리 문자열</target>
        </trans-unit>
        <trans-unit id="ab8c3d3d9bc2c2c289a7a884d43b797a116cdf17" translate="yes" xml:space="preserve">
          <source>URL string</source>
          <target state="translated">URL 문자열</target>
        </trans-unit>
        <trans-unit id="6415e7db453017765698b94a474b0ba310523c13" translate="yes" xml:space="preserve">
          <source>URL string.</source>
          <target state="translated">URL 문자열.</target>
        </trans-unit>
        <trans-unit id="6229662eaa903e67f2ed0f1353e8aa463aa6f79f" translate="yes" xml:space="preserve">
          <source>URL where files will be deployed.</source>
          <target state="translated">파일이 배포 될 URL입니다.</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="82ec40ec287dfe6afdf2c04f8ac45df9a5b41f73" translate="yes" xml:space="preserve">
          <source>Uglification: rewrites code to use short, cryptic variable and function names.</source>
          <target state="translated">Uglification : 짧은 암호 변수 및 함수 이름을 사용하도록 코드를 다시 작성합니다.</target>
        </trans-unit>
        <trans-unit id="dec6154649e20b8a4f868f22a0c2826a4a662d9a" translate="yes" xml:space="preserve">
          <source>Ugly, long section header anchors</source>
          <target state="translated">못생긴 긴 섹션 헤더 앵커</target>
        </trans-unit>
        <trans-unit id="3698e121e629257a193cc1ee0ba5707f90dd1040" translate="yes" xml:space="preserve">
          <source>UiArguments</source>
          <target state="translated">UiArguments</target>
        </trans-unit>
        <trans-unit id="0368218af0bd6062b199bada30a6e4035b16a7cb" translate="yes" xml:space="preserve">
          <source>Unable to find a parent by its base class</source>
          <target state="translated">기본 클래스로 부모를 찾을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="fe8512cc65af8cf880d1c2bbb10e3cf1f64d86cd" translate="yes" xml:space="preserve">
          <source>Unbound inputs for directives (e.g. name in &lt;code&gt;&amp;lt;my-comp name=&quot;&quot;&amp;gt;&lt;/code&gt;) are now set upon creation of the view, before change detection runs (previously, all inputs were set during change detection).</source>
          <target state="translated">이제 변경 감지가 실행되기 전에 (이전에는 모든 입력이 변경 감지 중에 설정 됨) 뷰 생성시 지시문에 대한 바인딩되지 않은 입력 (예 : &lt;code&gt;&amp;lt;my-comp name=&quot;&quot;&amp;gt;&lt;/code&gt; 의 이름 )이 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="0585362025afaad2cb556c1470ca13de2ec4b0c6" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;projects/&lt;/code&gt; folder, the &lt;code&gt;my-lib&lt;/code&gt; folder contains your library code.</source>
          <target state="translated">&lt;code&gt;projects/&lt;/code&gt; 폴더 아래에 &lt;code&gt;my-lib&lt;/code&gt; 폴더에는 라이브러리 코드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b9ec3e5288ad1a146764809c08b172bb0ce4e69" translate="yes" xml:space="preserve">
          <source>Underlying strategy used by the NgElement to create/destroy the component and react to input changes.</source>
          <target state="translated">NgElement가 컴포넌트를 생성 / 파기하고 입력 변경에 대응하기 위해 사용하는 기본 전략.</target>
        </trans-unit>
        <trans-unit id="406a6ce1fa7023e50b1cd5fc217aed691fc4469a" translate="yes" xml:space="preserve">
          <source>Understanding the flow of data</source>
          <target state="translated">데이터 흐름 이해</target>
        </trans-unit>
        <trans-unit id="afd606b1b8fa2ecceb75d550cab8b8e4f51e46bf" translate="yes" xml:space="preserve">
          <source>Understanding the idea of the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; demarcation is especially significant when you configure services in the component class.</source>
          <target state="translated">&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 경계 의 개념을 이해 하면 구성 요소 클래스에서 서비스를 구성 할 때 특히 중요합니다.</target>
        </trans-unit>
        <trans-unit id="4f597440e2efa26501d9e6fdf63a407e19ac4158" translate="yes" xml:space="preserve">
          <source>Understanding the underlying logical structure of the Angular template will give you a foundation for configuring services and in turn control their visibility.</source>
          <target state="translated">Angular 템플릿의 기본 논리 구조를 이해하면 서비스를 구성하고 가시성을 제어 할 수있는 기반이됩니다.</target>
        </trans-unit>
        <trans-unit id="824952b55c3b4916ed165e11642a01333e88585f" translate="yes" xml:space="preserve">
          <source>Understanding this component requires only the Angular concepts covered in previous pages.</source>
          <target state="translated">이 구성 요소를 이해하려면 이전 페이지에서 다룬 Angular 개념 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b0c0452cb24336e8190f9828a028e109b51bace3" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;ngOnInit&lt;/code&gt; is only called once per component instantiation. You need a way to detect when the route parameters change from &lt;em&gt;within the same instance&lt;/em&gt;. The observable &lt;code&gt;paramMap&lt;/code&gt; property handles that beautifully.</source>
          <target state="translated">불행히도 &lt;code&gt;ngOnInit&lt;/code&gt; 는 구성 요소 인스턴스화 당 한 번만 호출됩니다. &lt;em&gt;동일한 인스턴스 내&lt;/em&gt; 에서 경로 매개 변수가 변경되는시기를 감지하는 방법이 필요 &lt;em&gt;합니다&lt;/em&gt; . observable &lt;code&gt;paramMap&lt;/code&gt; 속성은이를 아름답게 처리합니다.</target>
        </trans-unit>
        <trans-unit id="d3ef861886f3ab5ce3796bed96c86f8269cc8b32" translate="yes" xml:space="preserve">
          <source>Unfortunately, Angular cannot inject the &lt;code&gt;HeroService&lt;/code&gt; directly into the base class. You must provide the &lt;code&gt;HeroService&lt;/code&gt; again for &lt;em&gt;this&lt;/em&gt; component, then pass it down to the base class inside the constructor.</source>
          <target state="translated">불행히도 Angular는 &lt;code&gt;HeroService&lt;/code&gt; 를 기본 클래스에 직접 주입 할 수 없습니다 . &lt;em&gt;이&lt;/em&gt; 컴포넌트에 대해 &lt;code&gt;HeroService&lt;/code&gt; 를 다시 제공 한 다음 생성자 내의 기본 클래스로 전달해야합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1139beaeaa7d4f3a71b279c04ed1135ac0675787" translate="yes" xml:space="preserve">
          <source>Unfortunately, AngularJS dependencies are not automatically available to Angular components. You must upgrade this service via a &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; to make &lt;code&gt;$routeParams&lt;/code&gt; an Angular injectable. Do that in a new file called &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; and import it in &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">불행히도 AngularJS 종속성은 Angular 구성 요소에 자동으로 제공되지 않습니다. &lt;code&gt;$routeParams&lt;/code&gt; 를 Angular 주사제 로 만들려면 &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;공장 공급자&lt;/a&gt; 를 통해이 서비스를 업그레이드해야합니다 . &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; 라는 새 파일에서이를 수행하고 app.module.ts로 가져 &lt;code&gt;app.module.ts&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4e7ab2a4cdcc53a9daa1be69012bf4487cc99281" translate="yes" xml:space="preserve">
          <source>Unfortunately, it's easy to mistakenly create invalid JSON that way. The preferred way is to create a JSON partial file with the fragment you want to display.</source>
          <target state="translated">불행히도 잘못된 JSON을 실수로 쉽게 만들 수 있습니다. 선호하는 방법은 표시하려는 조각으로 JSON 부분 파일을 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0867a551d468c9cf54a4c9bf87311fc791c6fddc" translate="yes" xml:space="preserve">
          <source>Unfortunately, this doesn't work. The  confirms that the &lt;code&gt;alex&lt;/code&gt; parameter is null. &lt;em&gt;You cannot inject a parent by its base class.&lt;/em&gt;</source>
          <target state="translated">불행히도 이것은 작동하지 않습니다. &lt;code&gt;alex&lt;/code&gt; 매개 변수가 널 임을 확인합니다 . &lt;em&gt;기본 클래스별로 부모를 주입 할 수 없습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a68c075bb4d2b8034dd50549a21ce7d7c5111785" translate="yes" xml:space="preserve">
          <source>Unhashed content</source>
          <target state="translated">해싱되지 않은 콘텐츠</target>
        </trans-unit>
        <trans-unit id="ae46bafe22f6a8888ae9109a8ce0be4fb84797fc" translate="yes" xml:space="preserve">
          <source>Unicode locale identifiers</source>
          <target state="translated">유니 코드 로케일 식별자</target>
        </trans-unit>
        <trans-unit id="4fab6ba13e9a4725c7f55ea2ec290c22e51d62b3" translate="yes" xml:space="preserve">
          <source>Union type for all possible events on the response stream.</source>
          <target state="translated">응답 스트림에서 가능한 모든 이벤트에 대한 결합 유형.</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">단위 테스트</target>
        </trans-unit>
        <trans-unit id="db8942af8190970c5de3a92510cbcaccdbfc8120" translate="yes" xml:space="preserve">
          <source>Unit test file names</source>
          <target state="translated">단위 테스트 파일 이름</target>
        </trans-unit>
        <trans-unit id="29d1c928f5bc2da434acc08d22662b06b1e6a793" translate="yes" xml:space="preserve">
          <source>Unit tests are located side-by-side with application code where they are easily found, as described in the rules for &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;Organizing Tests&lt;/a&gt;.</source>
          <target state="translated">단위 테스트는 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;테스트 구성&lt;/a&gt; 규칙에 설명 된대로 쉽게 찾을 수있는 애플리케이션 코드와 나란히 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d02603176f8822a40aaa5b4270e49934a7f83824" translate="yes" xml:space="preserve">
          <source>Universal</source>
          <target state="translated">Universal</target>
        </trans-unit>
        <trans-unit id="aff10513c0d4453b031e927d20f60a376e5f4fbf" translate="yes" xml:space="preserve">
          <source>Universal applications use the Angular &lt;code&gt;platform-server&lt;/code&gt; package (as opposed to &lt;code&gt;platform-browser&lt;/code&gt;), which provides server implementations of the DOM, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and other low-level features that don't rely on a browser.</source>
          <target state="translated">범용 애플리케이션 은 &lt;code&gt;platform-browser&lt;/code&gt; 와 달리 Angular &lt;code&gt;platform-server&lt;/code&gt; 패키지를 사용합니다. 이 플랫폼 은 DOM, &lt;code&gt;XMLHttpRequest&lt;/code&gt; 및 브라우저에 의존하지 않는 기타 저수준 기능 의 서버 구현을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="1b3d6e5815238e0752a3fe0b7b98c0c2d1361792" translate="yes" xml:space="preserve">
          <source>Universal in action</source>
          <target state="translated">보편적 인 행동</target>
        </trans-unit>
        <trans-unit id="dfa8fc69d23bd49ebc9a6555c9504f90cf88d7d1" translate="yes" xml:space="preserve">
          <source>Universal template engine</source>
          <target state="translated">범용 템플릿 엔진</target>
        </trans-unit>
        <trans-unit id="8a007210f1fae1f94e3d5f08f71db96b4634231f" translate="yes" xml:space="preserve">
          <source>Universal tutorial</source>
          <target state="translated">유니버설 튜토리얼</target>
        </trans-unit>
        <trans-unit id="7128eb1919baae98fa34b937a937468e6cef52dd" translate="yes" xml:space="preserve">
          <source>Universal web servers</source>
          <target state="translated">범용 웹 서버</target>
        </trans-unit>
        <trans-unit id="4c8eeb97df443eae9c961beeb83622d6ee4e82cc" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, all code snippets in this page are derived from sample source code located in the &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; directory.</source>
          <target state="translated">달리 언급하지 않는 한이 페이지의 모든 코드 스 니펫은 &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; 디렉토리 에있는 샘플 소스 코드에서 파생됩니다 .</target>
        </trans-unit>
        <trans-unit id="c6cf3859698e15c5299392bec7dbb52c091995b6" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, patterns use a limited glob format:</source>
          <target state="translated">달리 명시되지 않는 한 패턴은 제한된 glob 형식을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="aee4b6356253d8d620e3f11e4e7bc8c515a04ba8" translate="yes" xml:space="preserve">
          <source>Unless you are fluent in the language and have the time to edit translations, you would likely send each translation file to a translator, who would then use an XLIFF file editor to create and edit the translation.</source>
          <target state="translated">언어에 능통하지 않고 번역을 편집 할 시간이없는 경우 각 번역 파일을 번역자에게 보낸 다음 XLIFF 파일 편집기를 사용하여 번역을 만들고 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="997a0eb0ed95f2be66009dfc632a3a65cd86399d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not automatically run a &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$digest()&lt;/a&gt; when changes are detected in the Angular part of the application.</source>
          <target state="translated">달리 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 가 자동으로 실행되지 않는 &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$ 소화 ()&lt;/a&gt; 변경이 응용 프로그램의 각 부분에서 검출되는 경우.</target>
        </trans-unit>
        <trans-unit id="a2a526d27ea3191a1868165ff807c75c16ebcdfe" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not bootstrap the main AngularJS module inside the &lt;a href=&quot;../../core/ngzone&quot;&gt;Angular zone&lt;/a&gt;.</source>
          <target state="translated">달리 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 메인 AngularJS와 안쪽 모듈 부트 스트랩 않는 &lt;a href=&quot;../../core/ngzone&quot;&gt;각도 영역&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b662d56928e588ac496f4c10d2baf470830bd906" translate="yes" xml:space="preserve">
          <source>Unlike &lt;em&gt;Hero Detail&lt;/em&gt;, which updates as you type, &lt;em&gt;Crisis Detail&lt;/em&gt; changes are temporary until you either save or discard them by pressing the &quot;Save&quot; or &quot;Cancel&quot; buttons. Both buttons navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; and its list of crises.</source>
          <target state="translated">입력 할 때 업데이트되는 &lt;em&gt;Hero Detail&lt;/em&gt; 과 달리 &lt;em&gt;Crisis Detail&lt;/em&gt; 변경 사항은 &quot;저장&quot;또는 &quot;취소&quot;버튼을 눌러 변경 사항을 저장하거나 삭제할 때까지 일시적입니다. 두 버튼 모두 &lt;em&gt;위기 센터&lt;/em&gt; 와 위기 목록으로 돌아갑니다 .</target>
        </trans-unit>
        <trans-unit id="17cc853061da6fd12dc97c043a57e14e493a031e" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript modules, an NgModule can extend the &lt;em&gt;entire&lt;/em&gt; application with services by adding providers to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">JavaScript 모듈과 달리 NgModule은 공급자를 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt; 목록 에 추가하여 서비스로 &lt;em&gt;전체&lt;/em&gt; 애플리케이션을 확장 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c061fb170ebb3deb768717f260b104981728d5c0" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript, which uses strict equality, Angular uses loose equality. This means that the empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt; matches 0.</source>
          <target state="translated">엄격한 평등을 사용하는 JavaScript와 달리 Angular는 느슨한 평등을 사용합니다. 이것은 빈 문자열 &lt;code&gt;&quot;&quot;&lt;/code&gt; 이 0과 일치 함을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="d12281a35071e2f70968ecec4a88ccf48823d979" translate="yes" xml:space="preserve">
          <source>Unlike asset resources, data requests are not versioned along with the app. They're cached according to manually-configured policies that are more useful for situations such as API requests and other data dependencies.</source>
          <target state="translated">자산 리소스와 달리 데이터 요청은 앱과 함께 버전이 지정되지 않습니다. API 요청 및 기타 데이터 종속성과 같은 상황에 더 유용한 수동으로 구성된 정책에 따라 캐시됩니다.</target>
        </trans-unit>
        <trans-unit id="883ea145ab160985399b62f775b21393220f3076" translate="yes" xml:space="preserve">
          <source>Unlike providers of the modules loaded at launch, providers of lazy-loaded modules are &lt;em&gt;module-scoped&lt;/em&gt;.</source>
          <target state="translated">시작시로드 된 모듈 공급자와 달리 지연로드 모듈 공급자는 &lt;em&gt;모듈 범위&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2dccdc1ebcf214c2d4a6f553b10ed989603c0757" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;template-expression-operators#safe-navigation-operator&quot;&gt;&lt;em&gt;safe navigation operator&lt;/em&gt;&lt;/a&gt;, the non-null assertion operator does not guard against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Rather, it tells the TypeScript type checker to suspend strict &lt;code&gt;null&lt;/code&gt; checks for a specific property expression.</source>
          <target state="translated">&lt;a href=&quot;template-expression-operators#safe-navigation-operator&quot;&gt;&lt;em&gt;안전한 탐색 연산자&lt;/em&gt;&lt;/a&gt; 와 달리 null이 아닌 어설 션 연산자는 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 에 대해 보호하지 않습니다 . 오히려 TypeScript 유형 검사기에 특정 속성 표현식에 대한 엄격한 &lt;code&gt;null&lt;/code&gt; 검사 를 중단하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="b6f5e363e9f262e106ea06e2709ebaf828ae9100" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;safe navigation operator&lt;/em&gt;&lt;/a&gt;, the non-null assertion operator does not guard against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Rather, it tells the TypeScript type checker to suspend strict &lt;code&gt;null&lt;/code&gt; checks for a specific property expression.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;안전한 탐색 연산자&lt;/em&gt;&lt;/a&gt; 와 달리 null이 아닌 어설 션 연산자는 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 를 방지하지 않습니다 . 오히려 TypeScript 형식 검사기에 특정 속성 식에 대해 엄격한 &lt;code&gt;null&lt;/code&gt; 검사 를 일시 중단하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="ce32abfca7ffb38db90e5d8d87ed729993c1551e" translate="yes" xml:space="preserve">
          <source>Unlike the native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element, the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive has a &lt;code&gt;form&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;&lt;code&gt;form&lt;/code&gt; property allows you to disable the submit button if the &lt;code&gt;itemForm.form.valid&lt;/code&gt; is invalid.</source>
          <target state="translated">기본 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소 와 달리 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 지시문에는 &lt;code&gt;form&lt;/code&gt; 속성이 있습니다. &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;form&lt;/code&gt; 속성은 경우가 제출 '버튼을 비활성화 할 수 있습니다 &lt;code&gt;itemForm.form.valid&lt;/code&gt; 이 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c84f1525536690954f99a413b23d680798dcaedf" translate="yes" xml:space="preserve">
          <source>Unlike the other scripts that make up an application, such as the Angular app bundle, the service worker is preserved after the user closes the tab. The next time that browser loads the application, the service worker loads first, and can intercept every request for resources to load the application. If the service worker is designed to do so, it can &lt;em&gt;completely satisfy the loading of the application, without the need for the network&lt;/em&gt;.</source>
          <target state="translated">Angular 앱 번들과 같이 응용 프로그램을 구성하는 다른 스크립트와 달리 서비스 워커는 사용자가 탭을 닫은 후에도 유지됩니다. 다음에 브라우저가 응용 프로그램을로드하면 서비스 워커가 먼저로드되고 응용 프로그램을로드하기 위해 리소스에 대한 모든 요청을 가로 챌 수 있습니다. 서비스 워커가이를 수행하도록 설계된 &lt;em&gt;경우 네트워크가 없어도 애플리케이션로드를 완전히 만족시킬&lt;/em&gt; 수 &lt;em&gt;있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="336b8fcf6da97a73add72fe74ea2828b55965d4a" translate="yes" xml:space="preserve">
          <source>UnrecoverableStateEvent</source>
          <target state="translated">UnrecoverableStateEvent</target>
        </trans-unit>
        <trans-unit id="a978255d15d15f6447322f0e35eabd314f647755" translate="yes" xml:space="preserve">
          <source>Unregister all callbacks that the directive registered with global or application services.</source>
          <target state="translated">지시문이 전역 또는 응용 프로그램 서비스에 등록한 모든 콜백을 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="5f33036664974b24cb26da8a2ab6ee9afad16fa6" translate="yes" xml:space="preserve">
          <source>Unregisters all applications</source>
          <target state="translated">모든 응용 프로그램을 등록 취소합니다</target>
        </trans-unit>
        <trans-unit id="6d32a4bafd30dfcac7a8a3c144996daff36ea02d" translate="yes" xml:space="preserve">
          <source>Unregisters an application.</source>
          <target state="translated">응용 프로그램을 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="5ffffa9c4a22117e6f52f99f5cc3c43782a3e756" translate="yes" xml:space="preserve">
          <source>Unstructured</source>
          <target state="translated">Unstructured</target>
        </trans-unit>
        <trans-unit id="36412a76ca0b07002bd71130ee401e82fc2011d1" translate="yes" xml:space="preserve">
          <source>Unstructured and mutable</source>
          <target state="translated">구조화되지 않고 변경 가능</target>
        </trans-unit>
        <trans-unit id="834cc0ee6089e541b395509ba562516bcafa78e2" translate="yes" xml:space="preserve">
          <source>Unsubscribe</source>
          <target state="translated">Unsubscribe</target>
        </trans-unit>
        <trans-unit id="c21f818702e61674b3964d6b183a26a3133fec9f" translate="yes" xml:space="preserve">
          <source>Unsubscribe from Observables and DOM events.</source>
          <target state="translated">Observable 및 DOM 이벤트 구독을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="36f376c88cfb8d16619510a291258ce8d2da42da" translate="yes" xml:space="preserve">
          <source>Unsubscribe using &lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt; 사용하여 구독을 취소하십시오 .</target>
        </trans-unit>
        <trans-unit id="493dc8b26569cd76e59616c46a19c4d0c813beb4" translate="yes" xml:space="preserve">
          <source>Unsubscribes from Service Worker push notifications.</source>
          <target state="translated">Service Worker 푸시 알림을 수신 거부합니다.</target>
        </trans-unit>
        <trans-unit id="df1c180e11f697ae58851be0746d6030d8e54305" translate="yes" xml:space="preserve">
          <source>Unsupported enum member name</source>
          <target state="translated">지원되지 않는 열거 형 멤버 이름</target>
        </trans-unit>
        <trans-unit id="97a36dffa889515ec7097ac4311b95fa3f61bf7f" translate="yes" xml:space="preserve">
          <source>Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together. The router only supports one primary &lt;em&gt;unnamed&lt;/em&gt; outlet per template.</source>
          <target state="translated">지금까지 단일 콘센트를 정의했으며 해당 콘센트 아래에 하위 경로를 중첩하여 경로를 그룹화했습니다. 라우터 는 템플릿 당 하나의 기본 &lt;em&gt;명명되지 않은&lt;/em&gt; 콘센트 만 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="0e203966881b5ed9d5493d4c7a9fb99cebeb0b3b" translate="yes" xml:space="preserve">
          <source>Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together. The router only supports one primary unnamed outlet per template.</source>
          <target state="translated">지금까지 단일 콘센트를 정의했으며 해당 콘센트 아래에 하위 경로를 중첩하여 경로를 함께 그룹화했습니다. 라우터는 템플릿 당 하나의 이름없는 기본 콘센트 만 지원합니다.</target>
        </trans-unit>
        <trans-unit id="0cd4604faf00ea0d7b9ccb2fc1cf0622d23a2bbc" translate="yes" xml:space="preserve">
          <source>Unwrapping data from an observable</source>
          <target state="translated">Observable에서 데이터 풀기</target>
        </trans-unit>
        <trans-unit id="2de3bb02ea926f63aeba38c756a87b0a2edaeece" translate="yes" xml:space="preserve">
          <source>Unwraps a value from an asynchronous primitive.</source>
          <target state="translated">비동기 프리미티브에서 값을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="641990fee74114293b8c76ce49cb7bf399384326" translate="yes" xml:space="preserve">
          <source>Up pops a dialog box.</source>
          <target state="translated">대화 상자가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="ec67e6bd96103c22a842afec3ac1381cad313045" translate="yes" xml:space="preserve">
          <source>Up to this point, users can view product information, and simulate sharing and being notified about product changes. They cannot, however, buy products.</source>
          <target state="translated">지금까지 사용자는 제품 정보를보고 제품 변경 사항에 대한 공유 및 알림을 시뮬레이션 할 수 있습니다. 그러나 제품을 구입할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="4ae15402fdbe9d9effa05f440fbe4ce47c9537f7" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 업데이트</target>
        </trans-unit>
        <trans-unit id="496dd8be1173dfef1f30923f2f19597732b208d8" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;app.component.html&lt;/code&gt; as follows:</source>
          <target state="translated">다음과 같이 &lt;code&gt;app.component.html&lt;/code&gt; 을 업데이트 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e59d7b6b2ead1f0fc0b11cee3e56f5210aeccca4" translate="yes" xml:space="preserve">
          <source>Update checks</source>
          <target state="translated">업데이트 확인</target>
        </trans-unit>
        <trans-unit id="4e81a8a01dd6e963822eee8752358d7afb76a325" translate="yes" xml:space="preserve">
          <source>Update command reference: &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; command reference&lt;/a&gt;</source>
          <target state="translated">업데이트 명령 참조 : &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; 명령 참조&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0de3f679ddfbe2c120a92aa34594bc38a0c19fc6" translate="yes" xml:space="preserve">
          <source>Update heroes</source>
          <target state="translated">영웅 업데이트</target>
        </trans-unit>
        <trans-unit id="a4cb9fff8da5beaccbad71dfaf4739db28f45a5b" translate="yes" xml:space="preserve">
          <source>Update instructions: &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;</source>
          <target state="translated">업데이트 지침 : &lt;a href=&quot;https://update.angular.io/&quot;&gt;각도 업데이트 안내서&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aee936d4df69b41b6d8369cb77cf1b581c5a9c3f" translate="yes" xml:space="preserve">
          <source>Update it with the following:</source>
          <target state="translated">다음과 같이 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="c88de57118aa0c10c91423c1171f46023241fa2a" translate="yes" xml:space="preserve">
          <source>Update our e2e testing strategy</source>
          <target state="translated">e2e 테스트 전략 업데이트</target>
        </trans-unit>
        <trans-unit id="aae9bb284e5cbcbfe30098c360fd2e5dac2b8f1d" translate="yes" xml:space="preserve">
          <source>Update schematics</source>
          <target state="translated">회로도 업데이트</target>
        </trans-unit>
        <trans-unit id="512d25794b17abae99ec7fe3b67436a80aef2643" translate="yes" xml:space="preserve">
          <source>Update the &quot;Checkout&quot; button so that it routes to the &lt;code&gt;/cart&lt;/code&gt; url.</source>
          <target state="translated">&lt;code&gt;/cart&lt;/code&gt; URL로 라우팅되도록 &quot;Checkout&quot;버튼을 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="64bd735ef6309487a57de4917ec465adb94e3a96" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag with a template reference variable, &lt;code&gt;#heroForm&lt;/code&gt;, and set its value as follows.</source>
          <target state="translated">템플릿 참조 변수 &lt;code&gt;#heroForm&lt;/code&gt; 으로 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그를 업데이트하고 다음과 같이 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="55262abadc993a08fb22cf285edc08f25cb1c76b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of &lt;code&gt;index.html&lt;/code&gt; to include this style sheet:</source>
          <target state="translated">이 스타일 시트를 포함하도록 &lt;code&gt;index.html&lt;/code&gt; 의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="44edb4f17ea3eb3c127f01bb6cec6f3cf223b788" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive to assign each index in the &lt;code&gt;products&lt;/code&gt; array to the &lt;code&gt;productId&lt;/code&gt; variable when iterating over the list.</source>
          <target state="translated">목록을 반복 할 때 &lt;code&gt;products&lt;/code&gt; 배열의 각 인덱스를 &lt;code&gt;productId&lt;/code&gt; 변수 에 지정하려면 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 지시문을 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="047acd556996d14676e31a2016d5e00031fb3843" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthGuard&lt;/code&gt; to provide a &lt;code&gt;session_id&lt;/code&gt; query that will remain after navigating to another route.</source>
          <target state="translated">다른 경로로 이동 한 후 남아 있는 &lt;code&gt;session_id&lt;/code&gt; 쿼리 를 제공 하도록 &lt;code&gt;AuthGuard&lt;/code&gt; 를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7af99452e024679731c58a6ce980e61e0f9ce31" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthService&lt;/code&gt; to log in the user:</source>
          <target state="translated">&lt;code&gt;AuthService&lt;/code&gt; 를 업데이트하여 사용자를 로그인하십시오.</target>
        </trans-unit>
        <trans-unit id="17df82461b1d4af3eea1a7f235dffc7a24516cb6" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroService&lt;/code&gt;&lt;code&gt;getHero()&lt;/code&gt; method with the following to make that request:</source>
          <target state="translated">요청을 작성 하려면 &lt;code&gt;HeroService&lt;/code&gt; &lt;code&gt;getHero()&lt;/code&gt; 메소드를 다음과 같이 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="456c568fc10b9b5af7828b3954b0630e145d6ff2" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroesComponent&lt;/code&gt; template</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 템플릿 업데이트</target>
        </trans-unit>
        <trans-unit id="2a0c322c3ec3335c98a6927316b6de2d83201e94" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; you renamed after copying it from &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; file. This time, you define &lt;strong&gt;child routes&lt;/strong&gt;&lt;em&gt;within&lt;/em&gt; the parent &lt;code&gt;crisis-center&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;heroes-routing.module.ts&lt;/code&gt; 파일 에서 복사 한 후에 이름을 입력 한 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 를 업데이트 하십시오. 이번에 는 상위 &lt;code&gt;crisis-center&lt;/code&gt; &lt;strong&gt;경로 &lt;/strong&gt;&lt;em&gt;내&lt;/em&gt; 에서 &lt;strong&gt;하위 경로&lt;/strong&gt; 를 정의 합니다.&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8b888ea2db7a703e486c90f086618aa533bc9723" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; you renamed after copying it from &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; file. This time, you define child routes within the parent &lt;code&gt;crisis-center&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;heroes-routing.module.ts&lt;/code&gt; 파일 에서 복사 한 후 이름을 변경 한 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 를 업데이트 하십시오. 이번에는 상위 &lt;code&gt;crisis-center&lt;/code&gt; 경로 내에 하위 경로를 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="e584e483de80651422da868086dd08163863efd3" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;goToHeroes()&lt;/code&gt; method in the &lt;code&gt;hero-detail.component.ts&lt;/code&gt; to navigate back to &lt;code&gt;/superheroes&lt;/code&gt; with the optional route parameters.</source>
          <target state="translated">&lt;code&gt;hero-detail.component.ts&lt;/code&gt; 에서 &lt;code&gt;goToHeroes()&lt;/code&gt; 메소드를 업데이트하여 선택적 경로 매개 변수 를 사용하여 &lt;code&gt;/superheroes&lt;/code&gt; 로 다시 이동 하십시오.</target>
        </trans-unit>
        <trans-unit id="8eb243a9efc4a0297cedfa295ac4f27230f15071" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;gotoCrises()&lt;/code&gt; method of the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to navigate back to the Crisis Center list using relative path navigation.</source>
          <target state="translated">업데이트 &lt;code&gt;gotoCrises()&lt;/code&gt; 의 방법 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 상대 경로 탐색을 사용하여 위기 센터 목록으로 이동 위로.</target>
        </trans-unit>
        <trans-unit id="9ceea5cd899b3e0cb4af6ee69dfa6e2a472df15b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;gotoCrises&lt;/code&gt; method of the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; list using relative path navigation.</source>
          <target state="translated">상대 경로 탐색을 사용하여 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 의 &lt;code&gt;gotoCrises&lt;/code&gt; 메소드를 업데이트하여 &lt;em&gt;Crisis Center&lt;/em&gt; 목록으로 다시 이동하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="90198f7deafad59433243f4c2650247663f3acfb" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;ngOnInit()&lt;/code&gt; method to access the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and track the &lt;code&gt;id&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; 메서드를 업데이트하여 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 에 액세스 하고 &lt;code&gt;id&lt;/code&gt; 매개 변수를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="63d15e6be1057ef3573d05c93044f0abe7f5d7f0" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;protractor-conf.js&lt;/code&gt; to sync with hybrid apps:</source>
          <target state="translated">하이브리드 앱과 동기화되도록 &lt;code&gt;protractor-conf.js&lt;/code&gt; 를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="01b2840d9b7fdfb4c8e59c5d2221d5b944a9ade1" translate="yes" xml:space="preserve">
          <source>Update the anchor tags to include the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; 지시문 을 포함하도록 앵커 태그를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="ba1c01ce8fe91885115c745dda6dea1b1dee4654" translate="yes" xml:space="preserve">
          <source>Update the binding in the template to announce the hero's name and show both &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; in a details layout like this:</source>
          <target state="translated">템플릿의 바인딩을 업데이트하여 영웅의 이름을 &lt;code&gt;id&lt;/code&gt; 과 같이 세부 정보 레이아웃에 id 와 &lt;code&gt;name&lt;/code&gt; 을 모두 표시 하십시오.</target>
        </trans-unit>
        <trans-unit id="b73f126c77cbaf03da82c5d00d55430a2ec78f0a" translate="yes" xml:space="preserve">
          <source>Update the component template to look like this:</source>
          <target state="translated">다음과 같이 컴포넌트 템플리트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="80fb83bb4ae8b67700db956c6fc18e1e43df75e8" translate="yes" xml:space="preserve">
          <source>Update the component template with the following markup:</source>
          <target state="translated">다음 마크 업으로 구성 요소 템플릿을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="e8c7ee399df1289188c98c11849990a2f1ac0ced" translate="yes" xml:space="preserve">
          <source>Update the model for a particular control with a new value.</source>
          <target state="translated">특정 컨트롤의 모델을 새로운 값으로 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="559847cfe7989a011f1f7f236cc63d7c5ef1d512" translate="yes" xml:space="preserve">
          <source>Update the product details page to include a &quot;Buy&quot; button, which adds the current product to a list of products managed by a cart service.</source>
          <target state="translated">&quot;구매&quot;단추를 포함하도록 제품 세부 사항 페이지를 업데이트하십시오.이 단추는 현재 제품을 카트 서비스에서 관리하는 제품 목록에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="fc029d79ce7b99ec3a2fca2086322426387609a6" translate="yes" xml:space="preserve">
          <source>Update the product details template to have a &quot;Buy&quot; button that adds the current product to the cart.</source>
          <target state="translated">제품 세부 사항 템플리트를 업데이트하여 현재 제품을 장바구니에 추가하는 &quot;구매&quot;단추를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="7eba56b3717efc99e826af103240665456dccb6c" translate="yes" xml:space="preserve">
          <source>Update the product details template with a &quot;Buy&quot; button that adds the current product to the cart.</source>
          <target state="translated">현재 제품을 장바구니에 추가하는 &quot;구매&quot;버튼으로 제품 세부 정보 템플릿을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="a7657cd7e687b92c9b836756bcb57c9e76fdea3a" translate="yes" xml:space="preserve">
          <source>Update the product details view to include a &quot;Buy&quot; button, which adds the current product to a list of products that a cart service manages.</source>
          <target state="translated">장바구니 서비스가 관리하는 제품 목록에 현재 제품을 추가하는 &quot;구매&quot;버튼을 포함하도록 제품 세부 정보보기를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="ce24781651687073ccf0577b48abbd217ac36903" translate="yes" xml:space="preserve">
          <source>Update the relative path import to the &lt;code&gt;message.service&lt;/code&gt; in the &lt;code&gt;hero.service.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;hero.service.ts&lt;/code&gt; 파일 에서 &lt;code&gt;message.service&lt;/code&gt; 의 상대 경로 가져 오기를 업데이트 하십시오.</target>
        </trans-unit>
        <trans-unit id="203f53a020bfd878e423fc52de5b3578a006bfb8" translate="yes" xml:space="preserve">
          <source>Update the route configuration to lazy load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;. Take the same steps you used to configure &lt;code&gt;AdminModule&lt;/code&gt; for lazy load.</source>
          <target state="translated">&lt;code&gt;CrisisCenterModule&lt;/code&gt; 을 지연로드하도록 경로 구성을 업데이트하십시오 . 지연로드에 대해 &lt;code&gt;AdminModule&lt;/code&gt; 을 구성 할 때 사용한 것과 동일한 단계를 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f6126d69ceb05d3653564715bcc82db8b6b3de6" translate="yes" xml:space="preserve">
          <source>Update the route configuration to lazy load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;. Take the same steps you used to configure &lt;code&gt;AdminModule&lt;/code&gt; for lazy loading.</source>
          <target state="translated">&lt;code&gt;CrisisCenterModule&lt;/code&gt; 을 지연로드하도록 경로 구성을 업데이트합니다 . 지연로드를 위해 &lt;code&gt;AdminModule&lt;/code&gt; 을 구성하는 데 사용한 것과 동일한 단계를 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="cca7fe187a76a321d42e7e1ba7f157b20dbd5a77" translate="yes" xml:space="preserve">
          <source>Update the shipping component's template to display the shipping types and prices using async pipe:</source>
          <target state="translated">비동기 파이프를 사용하여 운송 유형 및 가격을 표시하도록 운송 구성 요소의 템플리트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="12ad7f7f655cea30f3a55c5eef576e6f58055482" translate="yes" xml:space="preserve">
          <source>Update the shipping component's template to display the shipping types and prices using the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 파이프를 사용하여 배송 유형 및 가격을 표시하도록 배송 구성 요소의 템플릿을 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="a357da0cfc27c86f48e17bd313f4e3eece1eed72" translate="yes" xml:space="preserve">
          <source>Update the template file with the following contents:</source>
          <target state="translated">다음 내용으로 템플리트 파일을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="2a9f24f9facab2d3032dfc55184857c8d51349c7" translate="yes" xml:space="preserve">
          <source>Update the template to display product details information inside an &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 안에 제품 세부 정보를 표시하도록 템플릿을 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f41d9ccaa5ca6464fe9e26dcf2fef17ab479d12" translate="yes" xml:space="preserve">
          <source>Update the template to display the strategy service's &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">전략 서비스의 &lt;code&gt;preloadedModules&lt;/code&gt; 배열 을 표시하도록 템플리트를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="bdf317dd5d3bb344ae925cf56313430f134cf06e" translate="yes" xml:space="preserve">
          <source>Update the template with a &lt;a href=&quot;attribute-binding#class-binding&quot;&gt;class binding&lt;/a&gt;. The binding adds the &lt;code&gt;selected&lt;/code&gt; CSS class when the comparison returns &lt;code&gt;true&lt;/code&gt; and removes it when &lt;code&gt;false&lt;/code&gt;. Look for it within the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag as shown here:</source>
          <target state="translated">&lt;a href=&quot;attribute-binding#class-binding&quot;&gt;클래스 바인딩으로&lt;/a&gt; 템플릿을 업데이트합니다 . 바인딩 은 비교가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 &lt;code&gt;selected&lt;/code&gt; CSS 클래스를 추가하고 &lt;code&gt;false&lt;/code&gt; 이면 제거합니다 . 다음 과 같이 반복되는 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그 내에서 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="dfba97897cc40bb55207339966a6db50b171b279" translate="yes" xml:space="preserve">
          <source>Update the template with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt;. The binding adds the &lt;code&gt;selected&lt;/code&gt; CSS class when the comparison returns &lt;code&gt;true&lt;/code&gt; and removes it when &lt;code&gt;false&lt;/code&gt;. Look for it within the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag as shown here:</source>
          <target state="translated">&lt;a href=&quot;template-syntax#class-binding&quot;&gt;클래스 바인딩으로&lt;/a&gt; 템플리트를 업데이트하십시오 . 바인딩 은 비교가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 &lt;code&gt;selected&lt;/code&gt; CSS 클래스를 추가하고 &lt;code&gt;false&lt;/code&gt; 이면이 를 제거합니다 . 반복 된 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그에서 다음과 같이 찾으 십시오.</target>
        </trans-unit>
        <trans-unit id="d296ccbde468f094eb509d5d21a2641f2f39d02b" translate="yes" xml:space="preserve">
          <source>Update the template with a button to simulate a name update. When you click the &lt;strong&gt;Update Name&lt;/strong&gt; button, the value entered in the form control element is reflected as its current value.</source>
          <target state="translated">이름 업데이트를 시뮬레이션하는 버튼으로 템플릿을 업데이트하십시오. &lt;strong&gt;이름 업데이트&lt;/strong&gt; 버튼 을 클릭하면 양식 컨트롤 요소에 입력 된 값이 현재 값으로 반영됩니다.</target>
        </trans-unit>
        <trans-unit id="70bf9b016dd5abd476b3536c1c64aba3fbec12cf" translate="yes" xml:space="preserve">
          <source>Update the template with a header (&quot;Cart&quot;), and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display each of the cart items with its name and price.</source>
          <target state="translated">헤더 ( &quot;Cart&quot;)로 템플리트를 업데이트하고 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; 와 함께 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 를 사용하여 각 장바구니 항목의 이름과 가격을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="6e13272e210ad93b2f833a9639071ad68ad92617" translate="yes" xml:space="preserve">
          <source>Update the template with a header, and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display each of the cart items with its name and price.</source>
          <target state="translated">헤더로 템플릿을 업데이트하고 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; 와 함께 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 를 사용하여 이름과 가격으로 각 카트 항목을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="9e70ce970e12f27c3c0169130c0f1fea106c9fc1" translate="yes" xml:space="preserve">
          <source>Update the template with a welcome message to the &lt;code&gt;Crisis Center&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Crisis Center&lt;/code&gt; 환영 메시지로 템플릿을 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="56d3e4fc01f85a9416f7ebeec211313112a4e66e" translate="yes" xml:space="preserve">
          <source>Update your component with &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; 구성 요소 업데이트</target>
        </trans-unit>
        <trans-unit id="5ce647b93fb03bcc71424f45986c72ce1d07ff28" translate="yes" xml:space="preserve">
          <source>UpdateActivatedEvent</source>
          <target state="translated">UpdateActivatedEvent</target>
        </trans-unit>
        <trans-unit id="fd2207341d757f6ad0dc82194a9f23e501154bfa" translate="yes" xml:space="preserve">
          <source>UpdateAvailableEvent</source>
          <target state="translated">UpdateAvailableEvent</target>
        </trans-unit>
        <trans-unit id="568d94ab2c93526583d7691ef9d845646ce24da2" translate="yes" xml:space="preserve">
          <source>Updated the options for &lt;code&gt;initialNavigation&lt;/code&gt;. For more information, see &lt;a href=&quot;../api/router/initialnavigation&quot;&gt;initialNavigation&lt;/a&gt; in the API documentation. See &lt;a href=&quot;https://github.com/angular/angular/pull/33128&quot;&gt;PR 33128&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;initialNavigation&lt;/code&gt; 옵션을 업데이트했습니다 . 자세한 내용 은 API 문서의 &lt;a href=&quot;../api/router/initialnavigation&quot;&gt;initialNavigation&lt;/a&gt; 을 참조 하세요 . &lt;a href=&quot;https://github.com/angular/angular/pull/33128&quot;&gt;PR 33128을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="30827e80f2dab0755e1aab3fdcd5f8e852c80f1e" translate="yes" xml:space="preserve">
          <source>Updates happen in the background, relatively quickly after changes are published. The previous version of the application is served until an update is installed and ready.</source>
          <target state="translated">변경 사항이 게시 된 후 비교적 빠르게 업데이트가 백그라운드에서 발생합니다. 이전 버전의 응용 프로그램은 업데이트가 설치되고 준비 될 때까지 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="0b4d2f63f515bde39286e6b3ccfa79609ea6eeda" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;index.html&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; 파일을 업데이트 합니다.</target>
        </trans-unit>
        <trans-unit id="b23869ff3d3ab319301b5274bca98483d206fab5" translate="yes" xml:space="preserve">
          <source>Updates the stored data of the query list, and resets the &lt;code&gt;dirty&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;, so that on change detection, it will not notify of changes to the queries, unless a new change occurs.</source>
          <target state="translated">쿼리 목록의 저장된 데이터를 업데이트하고 &lt;code&gt;dirty&lt;/code&gt; 플래그를 &lt;code&gt;false&lt;/code&gt; 로 재설정하여 변경 감지시 새 변경이 발생하지 않는 한 쿼리 변경 사항을 알리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="53d4b930a68894d016ef42936f1cf3d3913d5484" translate="yes" xml:space="preserve">
          <source>Updates your application and its dependencies. See &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/&lt;/a&gt;</source>
          <target state="translated">응용 프로그램 및 해당 종속성을 업데이트합니다. &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/를&lt;/a&gt; 참조 하십시오</target>
        </trans-unit>
        <trans-unit id="8004b6dc96603e3ddaec6151269dd92cf5f998b2" translate="yes" xml:space="preserve">
          <source>Updating Angular</source>
          <target state="translated">Angular 업데이트</target>
        </trans-unit>
        <trans-unit id="e2e0c1dd04e5d643612f19bff213d0afa1d812d6" translate="yes" xml:space="preserve">
          <source>Updating CLI Apps</source>
          <target state="translated">CLI 앱 업데이트</target>
        </trans-unit>
        <trans-unit id="4c5646c8307bd85d09df30c3b3db3a0d18ae2f19" translate="yes" xml:space="preserve">
          <source>Updating headers</source>
          <target state="translated">헤더 업데이트</target>
        </trans-unit>
        <trans-unit id="3bfbada4728f2e043b7771479883f3fc79ae26f5" translate="yes" xml:space="preserve">
          <source>Updating libraries</source>
          <target state="translated">라이브러리 업데이트</target>
        </trans-unit>
        <trans-unit id="97a865dad5af2b4ab0e2197679ff98a7ebec66fa" translate="yes" xml:space="preserve">
          <source>Updating parts of the data model</source>
          <target state="translated">데이터 모델의 일부 업데이트</target>
        </trans-unit>
        <trans-unit id="ea82e134fbd8a260e992aef7287a5680172c618b" translate="yes" xml:space="preserve">
          <source>Updating to version 8 with &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; changes this automatically.</source>
          <target state="translated">&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt; 로 버전 8로 업데이트 하면 자동으로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="2fe4aa4b0674fef349deee21474a9e07ec8e067d" translate="yes" xml:space="preserve">
          <source>Updating your application in the browser</source>
          <target state="translated">브라우저에서 응용 프로그램 업데이트</target>
        </trans-unit>
        <trans-unit id="fdcac3e04bfcd5fd48d4d42aa4876e07971bf792" translate="yes" xml:space="preserve">
          <source>Updating your environment and apps</source>
          <target state="translated">환경 및 앱 업데이트</target>
        </trans-unit>
        <trans-unit id="a4cf3923e47fcb8de57d182bf42a0b41fb5e9032" translate="yes" xml:space="preserve">
          <source>Upgrade the AngularJS components to Angular components next. Do it one component at a time while still keeping the application in hybrid mode. As you make these conversions, you'll also define your first Angular &lt;em&gt;pipes&lt;/em&gt;.</source>
          <target state="translated">다음으로 AngularJS 컴포넌트를 Angular 컴포넌트로 업그레이드하십시오. 애플리케이션을 여전히 하이브리드 모드로 유지하면서 한 번에 하나의 컴포넌트 만 수행하십시오. 이러한 변환을 수행 할 때 첫 번째 각도 &lt;em&gt;파이프&lt;/em&gt; 도 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="24f30a918c96ec7f78d6de2229e4e45721a78e8d" translate="yes" xml:space="preserve">
          <source>UpgradeAdapter</source>
          <target state="translated">UpgradeAdapter</target>
        </trans-unit>
        <trans-unit id="349a24b81f2702737e72ac44c56d5eea5df09232" translate="yes" xml:space="preserve">
          <source>UpgradeAdapterRef</source>
          <target state="translated">UpgradeAdapterRef</target>
        </trans-unit>
        <trans-unit id="3472325c45449a53cfbeda85e9dc64ed999c053e" translate="yes" xml:space="preserve">
          <source>UpgradeComponent</source>
          <target state="translated">UpgradeComponent</target>
        </trans-unit>
        <trans-unit id="f957777c36883bb04b88b1a75eabd9d4e87143f7" translate="yes" xml:space="preserve">
          <source>UpgradeModule</source>
          <target state="translated">UpgradeModule</target>
        </trans-unit>
        <trans-unit id="dc294e605816722937474ceca1ecd6db86bccf84" translate="yes" xml:space="preserve">
          <source>Upgraded components are Angular &lt;strong&gt;directives&lt;/strong&gt;, instead of &lt;strong&gt;components&lt;/strong&gt;, because Angular is unaware that AngularJS will create elements under it. As far as Angular knows, the upgraded component is just a directive - a tag - and Angular doesn't have to concern itself with its children.</source>
          <target state="translated">업그레이드 된 구성 요소는 각도입니다 &lt;strong&gt;지침&lt;/strong&gt; 대신, &lt;strong&gt;구성 요소&lt;/strong&gt; 각도가 AngularJS와는 그 아래 요소를 만들 것이라는 점을 인식하지 못하기 때문에. Angular가 아는 한 업그레이드 된 구성 요소는 지시문 일 뿐이며 태그입니다. Angular는 자식과 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="4bcf3358a1532605c1d102caf461fe6695881d98" translate="yes" xml:space="preserve">
          <source>Upgrading Components</source>
          <target state="translated">구성 요소 업그레이드</target>
        </trans-unit>
        <trans-unit id="3de37c097e347898a6c3fcca7012b78cb95fe583" translate="yes" xml:space="preserve">
          <source>Upgrading an AngularJS service</source>
          <target state="translated">AngularJS 서비스 업그레이드</target>
        </trans-unit>
        <trans-unit id="8ad98e9741d8e1a96c0b693a2a2c1e769fe850a8" translate="yes" xml:space="preserve">
          <source>Upgrading for Performance</source>
          <target state="translated">성능 업그레이드</target>
        </trans-unit>
        <trans-unit id="1cff14fa3715a0373a3bb2801eac16cb3d07e6fc" translate="yes" xml:space="preserve">
          <source>Upgrading for performance</source>
          <target state="translated">성능을위한 업그레이드</target>
        </trans-unit>
        <trans-unit id="f49e3b37a91d97499c2632816643696c225e6f8f" translate="yes" xml:space="preserve">
          <source>Upgrading from AngularJS to Angular</source>
          <target state="translated">AngularJS에서 Angular로 업그레이드</target>
        </trans-unit>
        <trans-unit id="a5a3a352431f58bbbf100b500b3c0596ab226f27" translate="yes" xml:space="preserve">
          <source>Upgrading the Phone service</source>
          <target state="translated">전화 서비스 업그레이드</target>
        </trans-unit>
        <trans-unit id="be955d520b7fdc0e2bf8afcda324203e51725d6d" translate="yes" xml:space="preserve">
          <source>Upgrading with &lt;code&gt;ngUpgrade&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngUpgrade&lt;/code&gt; 로 업그레이드</target>
        </trans-unit>
        <trans-unit id="f8522315486f45748eda6e72566dff17c151bd49" translate="yes" xml:space="preserve">
          <source>Upgrading with ngUpgrade</source>
          <target state="translated">ngUpgrade로 업그레이드</target>
        </trans-unit>
        <trans-unit id="233e49b5606ac48bdee62d2e7bac7f481dc3f94b" translate="yes" xml:space="preserve">
          <source>UpperCamelCase (or PascalCase): Class names, including classes that define components, interfaces, NgModules, directives, and pipes, Upper camel case uses uppercase on the first letter of the item. For example, &quot;HeroListComponent&quot;.</source>
          <target state="translated">UpperCamelCase (또는 PascalCase) : 컴포넌트, 인터페이스, NgModules, 지시문 및 파이프를 정의하는 클래스를 포함한 클래스 이름, 대문자 낙타 케이스는 항목의 첫 문자에 대문자를 사용합니다. 예를 들어 &quot;HeroListComponent&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="155c412fcd3971aa03fafff2bacb8bb9adc5883c" translate="yes" xml:space="preserve">
          <source>UpperCasePipe</source>
          <target state="translated">UpperCasePipe</target>
        </trans-unit>
        <trans-unit id="71dd69965f2486999c211c68072c41db5ae84baf" translate="yes" xml:space="preserve">
          <source>UrlCodec</source>
          <target state="translated">UrlCodec</target>
        </trans-unit>
        <trans-unit id="54090f749d1da5abbd2d8d0b13290689e3fbe518" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions</source>
          <target state="translated">UrlCreationOptions</target>
        </trans-unit>
        <trans-unit id="dbfb4d31c55c9ef194c6fceced63a7e00361cb16" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#fragment</source>
          <target state="translated">UrlCreationOptions#fragment</target>
        </trans-unit>
        <trans-unit id="141e18e55cd3e0e08bf88a818bbc4b13ede6cf27" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#preserveFragment</source>
          <target state="translated">UrlCreationOptions#preserveFragment</target>
        </trans-unit>
        <trans-unit id="6393573c166f194ad715df371c6f4f6ee50f1285" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#queryParams</source>
          <target state="translated">UrlCreationOptions#queryParams</target>
        </trans-unit>
        <trans-unit id="d6e7a05926297ae4a9a9dee1a8d0edf6b0ef629f" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#queryParamsHandling</source>
          <target state="translated">UrlCreationOptions#queryParamsHandling</target>
        </trans-unit>
        <trans-unit id="68948d1dadddf95bc54d96cecbf392ae48e8d326" translate="yes" xml:space="preserve">
          <source>UrlHandlingStrategy</source>
          <target state="translated">UrlHandlingStrategy</target>
        </trans-unit>
        <trans-unit id="16cc40206f5a097848430a6c434c805355e9962a" translate="yes" xml:space="preserve">
          <source>UrlMatchResult</source>
          <target state="translated">UrlMatchResult</target>
        </trans-unit>
        <trans-unit id="b4a9ef4257a8681d0b8b798a42c3019be0c1e3e7" translate="yes" xml:space="preserve">
          <source>UrlMatcher</source>
          <target state="translated">UrlMatcher</target>
        </trans-unit>
        <trans-unit id="cb582a3934e09bbb5eff19851f7f334c90041133" translate="yes" xml:space="preserve">
          <source>UrlSegment</source>
          <target state="translated">UrlSegment</target>
        </trans-unit>
        <trans-unit id="5c83abe9807fc6933e00e92449e0482f3644b9ae" translate="yes" xml:space="preserve">
          <source>UrlSegmentGroup</source>
          <target state="translated">UrlSegmentGroup</target>
        </trans-unit>
        <trans-unit id="d13f52dbbad2d8b754750f29699588763707bcf7" translate="yes" xml:space="preserve">
          <source>UrlSerializer</source>
          <target state="translated">UrlSerializer</target>
        </trans-unit>
        <trans-unit id="8f00a7f728d114764c445a5f40b5c821396502ce" translate="yes" xml:space="preserve">
          <source>UrlTree</source>
          <target state="translated">UrlTree</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="4df13ec4234f96a6f1f82fccdde77669b4c4b95c" translate="yes" xml:space="preserve">
          <source>Usage Notes</source>
          <target state="translated">사용법 메모</target>
        </trans-unit>
        <trans-unit id="3439e83eddd9b986dc9a370152a22cf7dcf9b189" translate="yes" xml:space="preserve">
          <source>Usage example</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="92d99b032888bf69448943e3813f272f0f43c556" translate="yes" xml:space="preserve">
          <source>Usage notes</source>
          <target state="translated">사용법 메모</target>
        </trans-unit>
        <trans-unit id="0a44b555685f0dc28bc8e9765c6cb059b1eccb38" translate="yes" xml:space="preserve">
          <source>Usage of the HTTP protocol</source>
          <target state="translated">HTTP 프로토콜 사용</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="3ca40217dc0e70d2dc410e2c690446266314d73f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;component-interaction#countdown-tests&quot;&gt;the same countdown timer tests&lt;/a&gt; as before.</source>
          <target state="translated">이전 &lt;a href=&quot;component-interaction#countdown-tests&quot;&gt;과 동일한 카운트 다운 타이머 테스트&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="1eded4881718d38df0a281fb3b89e254b8e5d3f1" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;glossary#pipe&quot;&gt;pipes&lt;/a&gt; to transform strings, currency amounts, dates, and other data for display. Pipes are simple functions you can use in &lt;a href=&quot;glossary#template-expression&quot;&gt;template expressions&lt;/a&gt; to accept an input value and return a transformed value. Pipes are useful because you can use them throughout your application, while only declaring each pipe once. For example, you would use a pipe to show a date as &lt;strong&gt;April 15, 1988&lt;/strong&gt; rather than the raw string format.</source>
          <target state="translated">&lt;a href=&quot;glossary#pipe&quot;&gt;파이프&lt;/a&gt; 를 사용 하여 표시 할 문자열, 통화 금액, 날짜 및 기타 데이터를 변환합니다. 파이프는 입력 값을 받아들이고 변환 된 값을 반환하기 위해 &lt;a href=&quot;glossary#template-expression&quot;&gt;템플릿 표현식&lt;/a&gt; 에서 사용할 수있는 간단한 함수 입니다. 파이프는 각 파이프를 한 번만 선언하면서 애플리케이션 전체에서 사용할 수 있기 때문에 유용합니다. 예를 들어 파이프를 사용 하여 원시 문자열 형식이 아닌 &lt;strong&gt;1988 년 4 월 15&lt;/strong&gt; 일로 날짜를 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="e1646482e996340ea2fea6c00a75df620ed30fe2" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;guide/glossary#router&quot;&gt;routing&lt;/a&gt; to navigate among different views and their components.</source>
          <target state="translated">사용 &lt;a href=&quot;guide/glossary#router&quot;&gt;라우팅&lt;/a&gt; 다른보기 및 그 구성 요소들 사이에서 이동합니다.</target>
        </trans-unit>
        <trans-unit id="bbdce1a9856fbb51307f203e0fd8807247521091" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html&quot;&gt;TypeScript type definition files&lt;/a&gt;&amp;mdash;&lt;code&gt;d.ts files&lt;/code&gt;&amp;mdash;to tell the compiler about the libraries you load.</source>
          <target state="translated">사용 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html&quot;&gt;타이프 라이터 유형 정의 파일&lt;/a&gt; - &lt;code&gt;d.ts files&lt;/code&gt; 은로드 라이브러리에 대한 컴파일러에게 -to.</target>
        </trans-unit>
        <trans-unit id="c534d42b01e57fa797f2c9dd829715b3aaef6e23" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt; to reenter the Angular zone and do work that updates the application model.</source>
          <target state="translated">&lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt; 을 사용 하여 각도 영역을 다시 입력하고 응용 프로그램 모델을 업데이트하는 작업을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c7e4c837537f47c47ba3f66cd9bd197b787a06e4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;property-binding&quot;&gt;property binding&lt;/a&gt; to bind the &lt;code&gt;item&lt;/code&gt; property in the child to the &lt;code&gt;currentItem&lt;/code&gt; property of the parent.</source>
          <target state="translated">&lt;a href=&quot;property-binding&quot;&gt;속성 바인딩&lt;/a&gt; 을 사용 하여 자식 의 &lt;code&gt;item&lt;/code&gt; 속성을 부모 의 &lt;code&gt;currentItem&lt;/code&gt; 속성에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="33ae6d75faec5c9258ccdb8343e25d6400c01615" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;router#getCurrentNavigation&quot;&gt;Router#getCurrentNavigation&lt;/a&gt; to retrieve a saved navigation-state value. For example, to capture the &lt;code&gt;tracingId&lt;/code&gt; during the &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="translated">&lt;a href=&quot;router#getCurrentNavigation&quot;&gt;Router # getCurrentNavigation&lt;/a&gt; 을 사용 하여 저장된 탐색 상태 값을 검색합니다. 예를 들어 &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; 이벤트 중에 &lt;code&gt;tracingId&lt;/code&gt; 를 캡처하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="11460a33232086c248106ff99715d4babce3c64e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;router#route-parameters&quot;&gt;&lt;em&gt;route parameters&lt;/em&gt;&lt;/a&gt; to specify a &lt;em&gt;required&lt;/em&gt; parameter value &lt;em&gt;within&lt;/em&gt; the route URL as you do when navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; in order to view the hero with &lt;em&gt;id&lt;/em&gt; 15:</source>
          <target state="translated">&lt;em&gt;ID가&lt;/em&gt; 15 인 영웅을 보려면 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 탐색 할 때와 같이 &lt;a href=&quot;router#route-parameters&quot;&gt;&lt;em&gt;경로 매개 변수&lt;/em&gt;&lt;/a&gt; 를 사용 하여 경로 URL &lt;em&gt;내에 &lt;/em&gt;&lt;em&gt;필수&lt;/em&gt; 매개 변수 값 을 지정 하십시오 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0b5d93c4ed0ec5b8b7f05301676e8bd1ef1cb92a" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;router-tutorial-toh#route-parameters&quot;&gt;route parameters&lt;/a&gt; to specify a required parameter value within the route URL as you do when navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; in order to view the hero with &lt;code&gt;id&lt;/code&gt; 15:</source>
          <target state="translated">사용 &lt;a href=&quot;router-tutorial-toh#route-parameters&quot;&gt;루트 매개 변수는&lt;/a&gt; 받는 사람 탐색 할 때처럼 경로의 URL에서 필요한 매개 변수 값을 지정 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 와 영웅을보기 위해 &lt;code&gt;id&lt;/code&gt; 15 :</target>
        </trans-unit>
        <trans-unit id="a19d669d6ab0a452aeaf8626b2d9150aebbdc3cf" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt; only with &lt;em&gt;emulated&lt;/em&gt; view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the &lt;a href=&quot;component-styles#view-encapsulation&quot;&gt;Controlling view encapsulation&lt;/a&gt; section.</source>
          <target state="translated">&lt;em&gt;에뮬레이트 된&lt;/em&gt; 뷰 캡슐화 에만 &lt;code&gt;/deep/&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;::ng-deep&lt;/code&gt; 을 사용하십시오 . 에뮬레이트는 가장 일반적으로 사용되는 기본보기 캡슐화입니다. 자세한 내용은 &lt;a href=&quot;component-styles#view-encapsulation&quot;&gt;뷰 캡슐화 제어&lt;/a&gt; 섹션을 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b4a428cb21fb684b5416394147cdfb8895147345" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt; only with &lt;em&gt;emulated&lt;/em&gt; view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the &lt;a href=&quot;view-encapsulation&quot;&gt;View Encapsulation&lt;/a&gt; section.</source>
          <target state="translated">&lt;em&gt;에뮬레이트 된&lt;/em&gt; 뷰 캡슐화 에서만 &lt;code&gt;/deep/&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;::ng-deep&lt;/code&gt; 을 사용하십시오 . 에뮬레이션은 기본값이며 가장 일반적으로 사용되는 뷰 캡슐화입니다. 자세한 내용은 &lt;a href=&quot;view-encapsulation&quot;&gt;View Encapsulation&lt;/a&gt; 섹션을 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fbc5373a6098820428d8f87b4ebef3596f21ac25" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt; to initiate transitions:</source>
          <target state="translated">&lt;code&gt;:increment&lt;/code&gt; 및 &lt;code&gt;:decrement&lt;/code&gt; 를 사용 하여 전환을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="37da0447d1fa140f28f8fb6b08272482bf10d2b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; to apply styling data over a given time interval.</source>
          <target state="translated">주어진 시간 간격 동안 스타일 데이터를 적용 하려면 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8117b02663c31ca30a3505b5dea37c42a73d66f9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to look for an element entering the page that meets certain criteria.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 를 사용 하여 특정 기준에 맞는 페이지를 입력하는 요소를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="c340b82cff5a85036fa97538fb63c0522defe830" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; to delay each animation by 30 milliseconds.</source>
          <target state="translated">스 &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 를 사용 하여 각 애니메이션을 30 밀리 초 지연시킵니다.</target>
        </trans-unit>
        <trans-unit id="3d3ba6c58e073ff58798eac3feab185c868724b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; to define styles that are applied at the end of each transition, they persist after the animation has completed.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; 애니메이션이 완료된 후에 각각의 전이의 끝에서 적용되는 스타일 정의들은 지속.</target>
        </trans-unit>
        <trans-unit id="744032ff1407c7169be00664314296b80fa6d2ce" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; to apply the provided styling data immediately.</source>
          <target state="translated">제공된 스타일 데이터를 즉시 적용 하려면 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c164f914355419d833cd09abe62d44f39e5d7fa3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; to define intermediate styles, which create the illusion of motion during the animation.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 애니메이션 동안 모션의 환상을 만드는 중간 스타일을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d17b4d4f899b3d74c42d5859ad207b245a417af" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="2eacb644015215b8967a3fef2b1d8847dd480ec4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the cart service</source>
          <target state="translated">카트 서비스에서 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="84330455001cba6cc5fc4fcfcc5e6a9131fbbea2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; to set many inline styles simultaneously and dynamically, based on the state of the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; 을 사용 하여 구성 요소의 상태에 따라 많은 인라인 스타일을 동시에 동적으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5245359421c59b09a4a49d6a64056af5518fc2a4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; to define styles that are applied at the end of each transition, they persist after the animation has completed.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 애니메이션이 완료된 후에 각각의 전이의 끝에서 적용되는 스타일 정의들은 지속.</target>
        </trans-unit>
        <trans-unit id="23e2c4fd66aaf035f564822cce538de6531f6bbc" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; to create two-way data bindings for reading and writing input-control values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 사용 하여 입력 제어 값을 읽고 쓰는 양방향 데이터 바인딩을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="3fd82b61ae0dda767fc8f3a6beca402be658ba83" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; to separate providers from a module so you can import that module into the root module with &lt;code&gt;providers&lt;/code&gt; and child modules without &lt;code&gt;providers&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 와 모듈없이 &lt;code&gt;providers&lt;/code&gt; 를 분리 하려면 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 . 공급자 없이 공급자 와 자식 모듈 을 사용하여 해당 모듈을 루트 모듈로 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4659a85a02ce72bfcc286731ea25c8f664cf6829" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; to allow AngularJS and Angular to coexist in a single application.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; 는 AngularJS와와 각도가 하나의 응용 프로그램에서 공존 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="5dac23ff3bdee9064747ccf719f0ed4727aad84f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; to control a hybrid AngularJS / Angular application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; 를 사용 하여 하이브리드 AngularJS / Angular 애플리케이션을 제어 하십시오 .</target>
        </trans-unit>
        <trans-unit id="02f4fc0380dc5751bed787fa57f8c1da57539efe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; to allow AngularJS and Angular to coexist in a single application.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; 는 AngularJS와와 각도가 하나의 응용 프로그램에서 공존 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="ca40e78c4209c9b5e5203ae6d1381b2251b2aed8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; to control a hybrid AngularJS / Angular application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; 를 사용 하여 하이브리드 AngularJS / Angular 애플리케이션을 제어 하십시오 .</target>
        </trans-unit>
        <trans-unit id="af06267d70ed596a77b6002d1c976ef8cf195c8c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; to inject the instance.</source>
          <target state="translated">사용 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 인스턴스를 주입합니다.</target>
        </trans-unit>
        <trans-unit id="8871425e87aae0b3cd3521f2757473e950108c92" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; so that Angular will only look at the &lt;code&gt;ElementInjector&lt;/code&gt; for the current component or directive.</source>
          <target state="translated">Angular가 현재 구성 요소 또는 지시문에 대해서만 &lt;code&gt;ElementInjector&lt;/code&gt; 를 보도록 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c336104380f0d2867d853d0a9497070d9a8d351" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; to prevent an error if the value is &lt;code&gt;null&lt;/code&gt;. In the following example, the &lt;code&gt;Person&lt;/code&gt; service is injected in the constructor. &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; tells Angular to skip the current injector and &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; will prevent an error should the &lt;code&gt;Person&lt;/code&gt; service be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 값이 경우에 방지하기 위해 오류가 &lt;code&gt;null&lt;/code&gt; . 다음 예제에서는 &lt;code&gt;Person&lt;/code&gt; 서비스가 생성자에 삽입됩니다. &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 는 Angular에게 현재 인젝터를 건너 뛰도록 지시하고 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 은 &lt;code&gt;Person&lt;/code&gt; 서비스가 &lt;code&gt;null&lt;/code&gt; 인 경우 오류를 방지합니다 .</target>
        </trans-unit>
        <trans-unit id="64ddf861c8d40d74accf883d09c74262c79df284" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;as const&lt;/code&gt; to let TypeScript know that you really do mean to use a constant string type:</source>
          <target state="translated">&lt;code&gt;as const&lt;/code&gt; 로 사용 하여 TypeScript에 실제로 상수 문자열 유형을 사용한다는 것을 알립니다.</target>
        </trans-unit>
        <trans-unit id="0c3acfd0b42193c69c97319b8d40897bd917fd56" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;currency&lt;/code&gt; to format a number as currency.</source>
          <target state="translated">&lt;code&gt;currency&lt;/code&gt; 를 사용하여 숫자를 통화 형식으로 지정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f1bdfdd07f0e51b3ed046c10f3d302723845732" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;downgradeNg2Component&lt;/code&gt; to create an AngularJS Directive Definition Factory from Angular Component. The adapter will bootstrap Angular component from within the AngularJS template.</source>
          <target state="translated">&lt;code&gt;downgradeNg2Component&lt;/code&gt; 를 사용하여 Angular Component에서 AngularJS Directive Definition Factory를 작성 하십시오 . 어댑터는 AngularJS 템플릿 내에서 Angular 구성 요소를 부트 스트랩합니다.</target>
        </trans-unit>
        <trans-unit id="b1899fb07038b46b39a74135ce2626c9063c8da8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;forRoot()&lt;/code&gt; to separate providers from a module so you can import that module into the root module with &lt;code&gt;providers&lt;/code&gt; and child modules without &lt;code&gt;providers&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;forRoot()&lt;/code&gt; 당신이 루트 모듈에 해당 모듈을 가져올 수 있도록 모듈에서 제공을 분리하는 &lt;code&gt;providers&lt;/code&gt; 없이 아이 모듈 &lt;code&gt;providers&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a89fbfa3b7a5cad46931da1a2b1acafab5e39b74" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;fromString&lt;/code&gt; to create HttpParams</source>
          <target state="translated">사용 &lt;code&gt;fromString&lt;/code&gt; HttpParams를 만들</target>
        </trans-unit>
        <trans-unit id="9016f8a4d5f440de4485c2ed9ab0fb4c65014418" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;markForCheck()&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; strategy</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; 전략 과 함께 &lt;code&gt;markForCheck()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="75f05d99671b8634199c2d0de091777f5d31535c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;markForCheck()&lt;/code&gt; with &lt;code&gt;CheckOnce&lt;/code&gt; strategy</source>
          <target state="translated">&lt;code&gt;CheckOnce&lt;/code&gt; 전략 과 함께 &lt;code&gt;markForCheck()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="3633c54be6b23f784540f222beddf2e987b0ff21" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;name&lt;/code&gt; in template expressions as you would for a built-in pipe.</source>
          <target state="translated">기본 제공 파이프와 마찬가지로 템플릿 표현식에 &lt;code&gt;name&lt;/code&gt; 을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="57ed9bd08229eab245c48c01dd77e6ea3a5924a2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; &amp;lt;lib_name&amp;gt;&lt;/code&gt; to update individual library versions. The Angular CLI checks the latest published release of the library, and if the latest version is newer than your installed version, downloads it and updates your &lt;code&gt;package.json&lt;/code&gt; to match the latest version.</source>
          <target state="translated">사용 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; &amp;lt;lib_name&amp;gt;&lt;/code&gt; 개별 라이브러리 버전을 업데이트합니다. Angular CLI는 라이브러리의 최신 공개 릴리스를 확인하고 최신 버전이 설치된 버전보다 최신 인 경우 다운로드 하여 최신 버전과 일치하도록 &lt;code&gt;package.json&lt;/code&gt; 을 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="8a92fc8c9b6affe56fd82331ac14f7ff6838613e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ng update &amp;lt;lib_name&amp;gt;&lt;/code&gt; to update individual library versions. The Angular CLI checks the latest published release of the library, and if the latest version is newer than your installed version, downloads it and updates your &lt;code&gt;package.json&lt;/code&gt; to match the latest version.</source>
          <target state="translated">사용 &lt;code&gt;ng update &amp;lt;lib_name&amp;gt;&lt;/code&gt; 개별 라이브러리 버전을 업데이트합니다. Angular CLI는 라이브러리의 최신 게시 릴리스를 확인하고, 최신 버전이 설치된 버전보다 최신 인 경우이를 다운로드 하고 최신 버전과 일치하도록 &lt;code&gt;package.json&lt;/code&gt; 을 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="86ee33b42fd33fef24e535d80cee1f4a2d9b6d98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ngOnInit()&lt;/code&gt; for two main reasons:</source>
          <target state="translated">다음 두 가지 이유로 &lt;code&gt;ngOnInit()&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0101700ae7ee3247de5052bf7ea3d11a837378c4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;setTimeout()&lt;/code&gt; to wait one tick and then revise the &lt;code&gt;seconds()&lt;/code&gt; method so that it takes future values from the timer component.</source>
          <target state="translated">&lt;code&gt;setTimeout()&lt;/code&gt; 을 사용 하여 한 번의 틱을 기다린 다음 타이머 구성 요소에서 이후 값을 가져 오도록 &lt;code&gt;seconds()&lt;/code&gt; 메서드 를 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="cb1322724221816f73d5c0329a7eb5dcab8960c7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;upgradeNg1Component&lt;/code&gt; to create an Angular component from AngularJS Component directive. The adapter will bootstrap AngularJS component from within the Angular template.</source>
          <target state="translated">&lt;code&gt;upgradeNg1Component&lt;/code&gt; 를 사용하여 AngularJS Component 지시문에서 Angular 구성 요소를 작성 하십시오 . 어댑터는 Angular 템플릿 내에서 AngularJS 구성 요소를 부트 스트랩합니다.</target>
        </trans-unit>
        <trans-unit id="50956624e8944e35a6d37b0adb8e3d1bd4c37693" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;root URLs&lt;/em&gt; for all web resources: CSS, images, scripts, and template HTML files.</source>
          <target state="translated">CSS, 이미지, 스크립트 및 템플릿 HTML 파일과 같은 모든 웹 리소스에 &lt;em&gt;루트 URL&lt;/em&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f68ad6eb4d6688ff5a2c57197008e76e1821ce58" translate="yes" xml:space="preserve">
          <source>Use Angular to internationalize your app:</source>
          <target state="translated">Angular를 사용하여 앱을 국제화하십시오.</target>
        </trans-unit>
        <trans-unit id="d7e4cec0c39ff853653baaf07391c9b86a46c7e8" translate="yes" xml:space="preserve">
          <source>Use Angular's &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; function to define different states to call at the end of each transition. This function takes two arguments: a unique name like &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Angular의 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 각 전환이 끝날 때 호출 할 여러 상태를 정의합니다. 이 함수는 &lt;code&gt;open&lt;/code&gt; 또는 &lt;code&gt;closed&lt;/code&gt; 와 같은 고유 한 이름과 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 함수의 두 가지 인수를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="4a03f29e1bd5ed1ad5fcb9c4057f36f7e599cdd5" translate="yes" xml:space="preserve">
          <source>Use Angular's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function to define different states to call at the end of each transition. This function takes two arguments: a unique name like &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Angular의 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 함수를 사용하여 각 전환이 끝날 때 호출 할 다른 상태를 정의하십시오. 이 함수는 &lt;code&gt;open&lt;/code&gt; 또는 &lt;code&gt;closed&lt;/code&gt; 와 같은 고유 이름과 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 함수 라는 두 가지 인수를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="87f7bdc684fc8838c17afd26ef0911196a4cc431" translate="yes" xml:space="preserve">
          <source>Use HTML tables to present tabular data.</source>
          <target state="translated">HTML 테이블을 사용하여 테이블 형식 데이터를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="ec5c920a15553b3593ed958ca394d921868892c7" translate="yes" xml:space="preserve">
          <source>Use Ivy compiler to extract translations. The default for Ivy applications.</source>
          <target state="translated">Ivy 컴파일러를 사용하여 번역을 추출하십시오. Ivy 애플리케이션의 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="d52844f8f4d368ecefe3c48b7579af4485aa36ae" translate="yes" xml:space="preserve">
          <source>Use Lifecycle hooks to tap into important events exposed by Angular.</source>
          <target state="translated">수명주기 후크를 사용하여 Angular에 의해 노출되는 중요한 이벤트를 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9658986afcec6ffd4c7f6a0574e23679c2ba6611" translate="yes" xml:space="preserve">
          <source>Use Shadow DOM to encapsulate styles.</source>
          <target state="translated">Shadow DOM을 사용하여 스타일을 캡슐화하십시오.</target>
        </trans-unit>
        <trans-unit id="f08d443a95d8465aefd51bbcd60a391957292522" translate="yes" xml:space="preserve">
          <source>Use TypeScript path mapping for peer dependencies</source>
          <target state="translated">피어 종속성에 TypeScript 경로 매핑 사용</target>
        </trans-unit>
        <trans-unit id="9cc4b5a0a1615c582c8ca48d1ec27455af6a185b" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;button&lt;/code&gt; element to add a button to the bottom of the form to trigger the form submission.</source>
          <target state="translated">&lt;code&gt;button&lt;/code&gt; 요소를 사용하여 단추 를 양식 맨 아래에 추가하여 양식 제출을 트리거하십시오.</target>
        </trans-unit>
        <trans-unit id="5b5ea0356b91d0915d4b8c036e052844c79a4502" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;formGroup&lt;/code&gt; property binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; to the &lt;code&gt;form&lt;/code&gt; tag in the template. Also include a &quot;Purchase&quot; button to submit the form.</source>
          <target state="translated">&lt;code&gt;formGroup&lt;/code&gt; 속성 바인딩을 사용 하여 &lt;code&gt;checkoutForm&lt;/code&gt; 을 템플리트 의 &lt;code&gt;form&lt;/code&gt; 태그에 바인딩하십시오 . 양식을 제출하려면 &quot;구매&quot;버튼도 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="fdac760c5116185edbb31c4a9ad9c814fe4129bb" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;page&lt;/code&gt; object</source>
          <target state="translated">용도 &lt;code&gt;page&lt;/code&gt; 객체를</target>
        </trans-unit>
        <trans-unit id="d47d2a657fa1d3c60905a8a9ccd668a501f568ba" translate="yes" xml:space="preserve">
          <source>Use a JavaScript function, &lt;code&gt;customElements.define()&lt;/code&gt;, to register the configured constructor and its associated custom-element tag with the browser's &lt;code&gt;CustomElementRegistry&lt;/code&gt;. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.</source>
          <target state="translated">JavaScript &lt;code&gt;customElements.define()&lt;/code&gt; 을 사용하여 구성된 생성자와 연관된 사용자 정의 요소 태그를 브라우저의 &lt;code&gt;CustomElementRegistry&lt;/code&gt; 에 등록하십시오 . 브라우저가 등록 된 요소의 태그를 발견하면 생성자를 사용하여 사용자 정의 요소 인스턴스를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="e11d85bbf17531fc966e61cec648e173daa88850" translate="yes" xml:space="preserve">
          <source>Use a custom ID in combination with a description and a meaning to further help the translator. The following example includes a description, followed by the custom &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">번역가에게 도움이되도록 설명 및 의미와 함께 사용자 지정 ID를 사용합니다. 다음 예에는 설명과 맞춤 &lt;code&gt;id&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ac9de1a85442b5f767db862207e329fbac7588a" translate="yes" xml:space="preserve">
          <source>Use a custom ID with a description</source>
          <target state="translated">설명과 함께 사용자 지정 ID 사용</target>
        </trans-unit>
        <trans-unit id="72a2b18f27d211118108e49c2dd0efc7f61f3f3d" translate="yes" xml:space="preserve">
          <source>Use a custom id with a description</source>
          <target state="translated">설명이 포함 된 맞춤 ID 사용</target>
        </trans-unit>
        <trans-unit id="ca0772b11fa11c22b7bfb2cc9e1ebd036d26eb58" translate="yes" xml:space="preserve">
          <source>Use a custom renderer to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use the &lt;code&gt;setProperty()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">사용자 정의 렌더러를 사용하여 Angular의 템플릿을 무시하고 선언적으로 표현할 수없는 사용자 정의 UI를 변경하십시오. 예를 들어 이름을 정적으로 알 수없는 속성 또는 속성을 설정해야하는 경우 &lt;code&gt;setProperty()&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; 메서드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="324492ab6afe96a5c1328132beb31f646858e801" translate="yes" xml:space="preserve">
          <source>Use a custom renderer to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use the &lt;code&gt;setProperty()&lt;/code&gt; or &lt;code&gt;setAttribute()&lt;/code&gt; method.</source>
          <target state="translated">사용자 지정 렌더러를 사용하여 Angular의 템플릿을 우회하고 선언적으로 표현할 수없는 사용자 지정 UI를 변경합니다. 예를 들어 이름이 정적으로 알려지지 않은 속성이나 속성을 설정해야하는 경우 &lt;code&gt;setProperty()&lt;/code&gt; 또는 &lt;code&gt;setAttribute()&lt;/code&gt; 메서드를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ae19a71533b3168e6642bdceac36b609f94c8c0b" translate="yes" xml:space="preserve">
          <source>Use a domain NgModule to deliver a user experience dedicated to a particular feature or app domain, such as editing a customer or placing an order. One example is &lt;code&gt;ContactModule&lt;/code&gt; in the .</source>
          <target state="translated">도메인 NgModule을 사용하여 고객 편집 또는 주문과 같은 특정 기능 또는 앱 도메인 전용 사용자 경험을 제공합니다. 하나의 예입니다 &lt;code&gt;ContactModule&lt;/code&gt; 에.</target>
        </trans-unit>
        <trans-unit id="2defd1faf147625042e6e427843821178b67bd1b" translate="yes" xml:space="preserve">
          <source>Use a double arrow syntax to specify state-to-state transitions in both directions.</source>
          <target state="translated">양방향 화살표 구문을 사용하여 양방향 상태 전환을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="cf0e2d5905731592af7783a6403e3eef4ccc5310" translate="yes" xml:space="preserve">
          <source>Use a routed NgModule for all &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;lazy-loaded NgModules&lt;/a&gt;. Use the top component of the NgModule as the destination of a router navigation route. Routed NgModules don&amp;rsquo;t export anything because their components never appear in the template of an external component.</source>
          <target state="translated">&lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;지연로드 된&lt;/a&gt; 모든 NgModules에 라우팅 된 NgModule을 사용합니다 . NgModule의 최상위 구성 요소를 라우터 탐색 경로의 대상으로 사용합니다. 라우팅 된 NgModules는 구성 요소가 외부 구성 요소의 템플릿에 나타나지 않기 때문에 아무것도 내 보내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b29c1902dc3b84e1d2bfda7af9e4d7a1fb9a38cd" translate="yes" xml:space="preserve">
          <source>Use a routing NgModule to do the following tasks:</source>
          <target state="translated">라우팅 NgModule을 사용하여 다음 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="4bb61bb5e6543cfdd382ac4b8fa11733424beebe" translate="yes" xml:space="preserve">
          <source>Use a routing NgModule to provide the routing configuration for a domain NgModule, thereby separating routing concerns from its companion domain NgModule. One example is &lt;code&gt;ContactRoutingModule&lt;/code&gt; in the , which provides the routing for its companion domain NgModule &lt;code&gt;ContactModule&lt;/code&gt;.</source>
          <target state="translated">라우팅 NgModule을 사용하여 도메인 NgModule에 대한 라우팅 구성을 제공함으로써 라우팅 문제를 동반 도메인 NgModule과 분리합니다. 하나의 예입니다 &lt;code&gt;ContactRoutingModule&lt;/code&gt; 의 동반자 도메인 NgModule에 대한 라우팅 제공에, &lt;code&gt;ContactModule&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="8f86fd2cb52558a5f799a9078de5c642cbd17287" translate="yes" xml:space="preserve">
          <source>Use a separate bundle containing code used across multiple bundles.</source>
          <target state="translated">여러 번들에서 사용되는 코드가 포함 된 별도의 번들을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4de7347c4ae42c0338292a697420d7631cff3899" translate="yes" xml:space="preserve">
          <source>Use a separate bundle containing only vendor libraries.</source>
          <target state="translated">공급 업체 라이브러리 만 포함 된 별도의 번들을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b7e178a75364c4b303869a2ad4fc54a9e1bf8428" translate="yes" xml:space="preserve">
          <source>Use a service NgModule to provide a utility service such as data access or messaging. Ideal service NgModules consist entirely of providers and have no declarations. Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; is a good example of a service NgModule.</source>
          <target state="translated">서비스 NgModule을 사용하여 데이터 액세스 또는 메시징과 같은 유틸리티 서비스를 제공합니다. 이상적인 서비스 NgModules는 전적으로 공급자로 구성되며 선언이 없습니다. Angular의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 은 NgModule 서비스의 좋은 예입니다.</target>
        </trans-unit>
        <trans-unit id="8e38b8225305a78fe4c035082f1e5127ab107991" translate="yes" xml:space="preserve">
          <source>Use a widget NgModule to make a component, directive, or pipe available to external NgModules. Import widget NgModules into any NgModules that need the widgets in their templates. Many third-party UI component libraries are provided as widget NgModules.</source>
          <target state="translated">위젯 NgModule을 사용하여 구성 요소, 지시문 또는 파이프를 외부 NgModules에서 사용할 수 있도록합니다. 템플릿에 위젯이 필요한 NgModules로 위젯 NgModules를 가져옵니다. 많은 타사 UI 구성 요소 라이브러리가 위젯 NgModules로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="7d1d96dbe4bfa2f8afd5e063fb099246e2f933e9" translate="yes" xml:space="preserve">
          <source>Use an &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; whenever the type you are injecting is not reified (does not have a runtime representation) such as when injecting an interface, callable type, array or parameterized type.</source>
          <target state="translated">인터페이스, 호출 가능 유형, 배열 또는 매개 변수화 된 유형을 주입 할 때와 같이 주입중인 유형이 구체화되지 않은 경우 (런타임 표현이없는 경우) &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b24b7564615489f70464a0b684de4d00e3cad09" translate="yes" xml:space="preserve">
          <source>Use an input property setter to intercept and act upon a value from the parent.</source>
          <target state="translated">입력 특성 설정기를 사용하여 상위의 값을 가로 채서 조치하십시오.</target>
        </trans-unit>
        <trans-unit id="aa89ae11b8e5412bd5017dd7f915184a5121c58a" translate="yes" xml:space="preserve">
          <source>Use both techniques together</source>
          <target state="translated">두 기술을 함께 사용</target>
        </trans-unit>
        <trans-unit id="4eafa3af4b3e987e09122d57532c433e31ef809a" translate="yes" xml:space="preserve">
          <source>Use built-in Angular &lt;a href=&quot;guide/glossary#directive&quot;&gt;directives&lt;/a&gt; to show and hide elements and display lists of hero data.</source>
          <target state="translated">기본 제공 Angular &lt;a href=&quot;guide/glossary#directive&quot;&gt;지시문&lt;/a&gt; 을 사용 하여 요소를 표시하거나 숨기고 Hero 데이터 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="58c616bd0cf85cc12a155f6a80ac80d1c6ac921b" translate="yes" xml:space="preserve">
          <source>Use built-in Angular directives to show and hide elements and display lists of hero data.</source>
          <target state="translated">내장 Angular 지시문을 사용하여 요소를 표시하거나 숨기고 영웅 데이터 목록을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="4fa5e4ac160ff5a6b000cb0799ec5b92924a2584" translate="yes" xml:space="preserve">
          <source>Use built-in pipes to display dates, numbers, percentages, and currencies in a local format.</source>
          <target state="translated">기본 제공 파이프를 사용하여 날짜, 숫자, 백분율 및 통화를 로컬 형식으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="23828409823ed5397303067cdf5cba92e9ebb5fd" translate="yes" xml:space="preserve">
          <source>Use component and directive hooks together</source>
          <target state="translated">구성 요소 및 지시문 후크를 함께 사용</target>
        </trans-unit>
        <trans-unit id="ba903051e852b2dc8a92992587da4085b281db62" translate="yes" xml:space="preserve">
          <source>Use directives to enhance an element</source>
          <target state="translated">지시문을 사용하여 요소 향상</target>
        </trans-unit>
        <trans-unit id="9f1377b56ad4c7adfb2e74c604fbe25bb8824c1d" translate="yes" xml:space="preserve">
          <source>Use directives to watch the DOM</source>
          <target state="translated">지시문을 사용하여 DOM보기</target>
        </trans-unit>
        <trans-unit id="950c5862a83002acbd6de76109f9c7b8bfbeed34" translate="yes" xml:space="preserve">
          <source>Use empty path routes to group routes together without adding any additional path segments to the URL. Users will still visit &lt;code&gt;/admin&lt;/code&gt; and the &lt;code&gt;AdminComponent&lt;/code&gt; still serves as the Routing Component containing child routes.</source>
          <target state="translated">URL에 추가 경로 세그먼트를 추가하지 않고 경로를 그룹화하려면 빈 경로 경로를 사용하십시오. 사용자는 계속 &lt;code&gt;/admin&lt;/code&gt; 을 방문 하고 &lt;code&gt;AdminComponent&lt;/code&gt; 는 여전히 하위 경로를 포함하는 라우팅 구성 요소의 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="12ab61a4fd4336f2c2953a0f712c04fb91949dba" translate="yes" xml:space="preserve">
          <source>Use file name for lazy loaded chunks.</source>
          <target state="translated">지연로드 된 청크에 파일 이름을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f8f0525e366cb8c77a4916b799b14b984e598076" translate="yes" xml:space="preserve">
          <source>Use in components with the &lt;code&gt;@&lt;a href=&quot;core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; directive to emit custom events synchronously or asynchronously, and register handlers for those events by subscribing to an instance.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 지시문 과 함께 구성 요소에서 사용하여 사용자 정의 이벤트를 동기식 또는 비동기식으로 생성하고 인스턴스를 구독하여 해당 이벤트에 대한 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="6610f463a7407078fa7bae85f8fc8f843b6debb4" translate="yes" xml:space="preserve">
          <source>Use in components with the &lt;code&gt;@&lt;a href=&quot;output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; directive to emit custom events synchronously or asynchronously, and register handlers for those events by subscribing to an instance.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 지시문 과 함께 구성 요소에서 사용하여 사용자 정의 이벤트를 동기식 또는 비동기식으로 생성하고 인스턴스를 구독하여 해당 이벤트에 대한 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="9848cb209b02d0955db09afd48d35722b7baf9e6" translate="yes" xml:space="preserve">
          <source>Use in development mode to verify that running change detection doesn't introduce other changes.</source>
          <target state="translated">개발 모드에서 사용하여 변경 감지 실행시 다른 변경이 발생하지 않는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="562fbe07806719e4eb320decc50510c6f8fcbd9d" translate="yes" xml:space="preserve">
          <source>Use integration testing for your builder, so that you can use the Architect scheduler to create a context, as in this &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;예제&lt;/a&gt; 와 같이 Architect 스케줄러를 사용하여 컨텍스트를 작성할 수 있도록 빌더에 통합 테스트를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="922b5062ec0572aa1adccb4f5632805f5154deab" translate="yes" xml:space="preserve">
          <source>Use kebab-case for downgraded component attributes</source>
          <target state="translated">다운 그레이드 된 구성 요소 속성에 케밥 케이스 사용</target>
        </trans-unit>
        <trans-unit id="44f566857d643f1d49f711c0b30d0dc6a3ffce4b" translate="yes" xml:space="preserve">
          <source>Use keyframes to create a pulse effect in your animations by defining styles at specific offset throughout the animation.</source>
          <target state="translated">애니메이션 전체에서 특정 오프셋에 스타일을 정의하여 키 프레임을 사용하여 애니메이션에 펄스 효과를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="fd613fa5fcd4a8580220c7bfbc8b1e7cd0225fe6" translate="yes" xml:space="preserve">
          <source>Use mock crises instead of mock heroes:</source>
          <target state="translated">모의 영웅 대신 모의 위기를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f78e562ea1e7f343fb60afc2c7e41be5afad1302" translate="yes" xml:space="preserve">
          <source>Use nested form groups to validate a sub-group of a form separately from the rest or to group the values of certain controls into their own nested object.</source>
          <target state="translated">중첩 양식 그룹을 사용하여 나머지 양식과 별도로 양식의 하위 그룹을 검증하거나 특정 컨트롤의 값을 자체 중첩 객체로 그룹화하십시오.</target>
        </trans-unit>
        <trans-unit id="ae0b7c6086be4df2a4b72a414920640b2b9519a5" translate="yes" xml:space="preserve">
          <source>Use of *ngIf and *ngFor with :enter and :leave</source>
          <target state="translated">: enter 및 : leave와 함께 * ngIf 및 * ngFor 사용</target>
        </trans-unit>
        <trans-unit id="d322e89d8709c00474049e733e76b74c2ec2e87b" translate="yes" xml:space="preserve">
          <source>Use one-way &lt;a href=&quot;guide/glossary#data-binding&quot;&gt;data binding&lt;/a&gt; for read-only data.</source>
          <target state="translated">읽기 전용 데이터에는 단방향 &lt;a href=&quot;guide/glossary#data-binding&quot;&gt;데이터 바인딩&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="825f8becf5e248543919edc40655a1407e732140" translate="yes" xml:space="preserve">
          <source>Use one-way data binding for read-only data.</source>
          <target state="translated">읽기 전용 데이터에는 단방향 데이터 바인딩을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b019f13aecefec4b1ef5f1581bf4c9362c846575" translate="yes" xml:space="preserve">
          <source>Use only the root &lt;code&gt;AppModule&lt;/code&gt; to import service NgModules.</source>
          <target state="translated">루트 &lt;code&gt;AppModule&lt;/code&gt; 만 사용하여 서비스 NgModules를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="84ab263256ce0670db1121c29c0f37c632743fb5" translate="yes" xml:space="preserve">
          <source>Use optional parameters to fine-tune a pipe's output. For example, you can use the &lt;a href=&quot;../api/common/currencypipe&quot;&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;&lt;/a&gt; with a country code such as EUR as a parameter. The template expression &lt;code&gt;{{ amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;:'EUR' }}&lt;/code&gt; transforms the &lt;code&gt;amount&lt;/code&gt; to currency in euros. Follow the pipe name (&lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt;) with a colon (&lt;code&gt;:&lt;/code&gt;) and the parameter value (&lt;code&gt;'EUR'&lt;/code&gt;).</source>
          <target state="translated">파이프의 출력을 미세 조정하려면 선택적 매개 변수를 사용하십시오. 예를 들어 EUR와 같은 국가 코드를 매개 변수로 사용하여 &lt;a href=&quot;../api/common/currencypipe&quot;&gt; &lt;code&gt;CurrencyPipe&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 . 템플릿 표현식 &lt;code&gt;{{ amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;:'EUR' }}&lt;/code&gt; 는 &lt;code&gt;amount&lt;/code&gt; 을 유로 통화로 변환합니다 . 파이프 이름 (따라 &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; (콜론) &lt;code&gt;:&lt;/code&gt; ) 및 매개 변수 값 ( &lt;code&gt;'EUR'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="33c9c9b12a49197173a1f9a9e99b1ab027db7481" translate="yes" xml:space="preserve">
          <source>Use property binding to &lt;em&gt;set&lt;/em&gt; properties of target elements or directive &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorators. For an example demonstrating all of the points in this section, see the &lt;span name=&quot;property-binding&quot;&gt;property binding example&lt;/span&gt;.</source>
          <target state="translated">속성 바인딩을 사용 하여 대상 요소 또는 지시문 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt; () 데코레이터의 속성 을 &lt;em&gt;설정&lt;/em&gt; 하십시오 . 이 섹션의 모든 포인트를 보여주는 예제는 &lt;span name=&quot;property-binding&quot;&gt;속성 바인딩 예제를&lt;/span&gt; 참조하십시오 .&lt;span name=&quot;property-binding&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="372dfe3d09c315bc93b1ea423f2929945069773a" translate="yes" xml:space="preserve">
          <source>Use root URLs (URLs with an &lt;code&gt;authority&lt;/code&gt;) for all web resources: CSS, images, scripts, and template HTML files.</source>
          <target state="translated">모든 웹 리소스 (CSS, 이미지, 스크립트 및 템플릿 HTML 파일)에 대해 루트 URL ( &lt;code&gt;authority&lt;/code&gt; 이있는 URL )을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0df3164dd6957c5324cc16a1bec4b3c77625f9c7" translate="yes" xml:space="preserve">
          <source>Use route guards to prevent users from navigating to parts of an app without authorization. The following route guards are available in Angular:</source>
          <target state="translated">경로 가드를 사용하여 사용자가 승인없이 앱의 일부를 탐색하지 못하도록합니다. Angular에서는 다음 경로 가드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e687455aeeac52967421ad9e0ea548379e0207c" translate="yes" xml:space="preserve">
          <source>Use route parameters</source>
          <target state="translated">경로 매개 변수 사용</target>
        </trans-unit>
        <trans-unit id="83397ceeb8cb2ee18c72cf2e39d941138c6e3d3b" translate="yes" xml:space="preserve">
          <source>Use routing to navigate among different views and their components.</source>
          <target state="translated">라우팅을 사용하여 다른보기와 해당 구성 요소를 탐색하십시오.</target>
        </trans-unit>
        <trans-unit id="4cdf0fd45f5b27136f0216be71f8f71b7ad6ec2e" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;&lt;code&gt;HTTPClient.get()&lt;/code&gt;&lt;/a&gt; method to fetch data from a server. The asynchronous method sends an HTTP request, and returns an Observable that emits the requested data when the response is received. The return type varies based on the &lt;code&gt;observe&lt;/code&gt; and &lt;code&gt;responseType&lt;/code&gt; values that you pass to the call.</source>
          <target state="translated">&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt; &lt;code&gt;HTTPClient.get()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 서버에서 데이터를 가져옵니다. 비동기 메서드는 HTTP 요청을 보내고 응답이 수신되면 요청 된 데이터를 내보내는 Observable을 반환합니다. 반환 유형 은 호출에 전달 하는 &lt;code&gt;observe&lt;/code&gt; 및 &lt;code&gt;responseType&lt;/code&gt; 값 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="39c1797df4b9af407e3710887e87a8ad9487e6aa" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to automatically set up your project with the correct polyfill:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; 를 사용하여 올바른 polyfill로 프로젝트를 자동으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0bfd4f1040c27256f1f7a7669dce5333fc8f6d46" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to automatically set up your project with the correct polyfill: &lt;code&gt;ng add @angular/elements --name=*your_project_name*&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; 를 사용하여 올바른 폴리 필로 프로젝트를 자동으로 설정하십시오 : &lt;code&gt;ng add @angular/elements --name=*your_project_name*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cfda0e354b6fefc979aa3e2846531a503fd7a71b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli&quot;&gt;CLI command&lt;/a&gt;&lt;code&gt;ng generate&lt;/code&gt; to generate a component in your project to host the control.</source>
          <target state="translated">사용 &lt;a href=&quot;cli&quot;&gt;CLI 명령을 &lt;/a&gt; &lt;code&gt;ng generate&lt;/code&gt; 컨트롤을 호스트 프로젝트의 구성 요소를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="eb0967d7ae25fbeb074644d90cbc2a0b6e09376c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli/run&quot;&gt;CLI command &lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; to invoke a builder by specifying a &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt; associated with that builder. Integrators can add builders to enable tools and workflows to run through the Angular CLI. For example, a custom builder can replace the third-party tools used by the built-in implementations for CLI commands such as &lt;code&gt;ng build&lt;/code&gt; or &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli/run&quot;&gt;CLI 명령 &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt; 을 사용하여 해당 빌더와 연관된 &lt;a href=&quot;glossary#target&quot;&gt;대상 구성&lt;/a&gt; 을 지정하여 빌더를 호출하십시오 . 통합자는 빌더를 추가하여 도구 및 워크 플로우를 Angular CLI를 통해 실행할 수 있습니다. 예를 들어, 사용자 정의 빌더는 내장 &lt;code&gt;ng build&lt;/code&gt; 에서 ng build 또는 &lt;code&gt;ng test&lt;/code&gt; 와 같은 CLI 명령에 사용되는 써드 파티 도구를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9f443ef713021a89a07c940630b1de13045528f0" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;singleton-services#providedIn&quot;&gt;&lt;code&gt;providedIn&lt;/code&gt; syntax&lt;/a&gt; instead of registering the service in the module.</source>
          <target state="translated">모듈에 서비스를 등록하는 대신 &lt;a href=&quot;singleton-services#providedIn&quot;&gt; &lt;code&gt;providedIn&lt;/code&gt; 구문을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="92e5840b8af8374ad2ebbe47694fb89faef0677c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;template-expression-operators#any-type-cast-function&quot;&gt;&lt;code&gt;$any()&lt;/code&gt; type-cast function&lt;/a&gt; in certain contexts to opt out of type-checking for a part of the expression.</source>
          <target state="translated">사용 &lt;a href=&quot;template-expression-operators#any-type-cast-function&quot;&gt; &lt;code&gt;$any()&lt;/code&gt; 타입 캐스트 기능&lt;/a&gt; 식의 부분에 대한 유형 검사의 탈퇴 특정 상황에서합니다.</target>
        </trans-unit>
        <trans-unit id="3e66ddd3ed9a2939ac4e252bd5468007fd696006" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;template-expression-operators#non-null-assertion-operator&quot;&gt;non-null type assertion operator&lt;/a&gt; to suppress the &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error when it is inconvenient to use &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or when some constraint in the component ensures that the expression is always non-null when the binding expression is interpolated.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt; 를 사용하는 것이 불편 하거나 컴포넌트의 일부 제약 조건이 바인딩 표현식이 보간 될 때 표현식이 항상 널이 아닌 것을 보장하는 경우 &lt;a href=&quot;template-expression-operators#non-null-assertion-operator&quot;&gt;널&lt;/a&gt; 이 아닌 유형 어설 션 연산자 를 사용하여 &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; possible 'undefined' 오류 를 억제하십시오 .</target>
        </trans-unit>
        <trans-unit id="802892225bada3f629d8e440f05c2e60e8ea54c8" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;template-syntax#non-null-assertion-operator&quot;&gt;non-null type assertion operator&lt;/a&gt; to suppress the &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error when it is inconvenient to use &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or when some constraint in the component ensures that the expression is always non-null when the binding expression is interpolated.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt; 를 사용하는 것이 불편 하거나 구성 요소의 일부 제한 조건이 바인딩 표현식이 보간 될 때 항상 널이 아닌 것을 보장 할 때 &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; 오류 를 억제하려면 &lt;a href=&quot;template-syntax#non-null-assertion-operator&quot;&gt;널&lt;/a&gt; 이 아닌 어설 션 연산자 를 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="5a253ee9798a26a31ec1940c9c82d1392f5a3876" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; pseudo-class selector to target styles in the element that &lt;em&gt;hosts&lt;/em&gt; the component (as opposed to targeting elements &lt;em&gt;inside&lt;/em&gt; the component's template).</source>
          <target state="translated">사용 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 하는 요소에 목표 스타일에 의사 클래스 선택기를 &lt;em&gt;호스트&lt;/em&gt; 구성 요소 (같은 요소 대상에 반대하는 &lt;em&gt;내부&lt;/em&gt; 구성 요소의 템플릿을).</target>
        </trans-unit>
        <trans-unit id="3d5018825bf0a7d2fd0cd9ddf6fdbc3f0fd42061" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:host-context()&lt;/code&gt; pseudo-class selector, which works just like the function form of &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;()&lt;/code&gt;. The &lt;code&gt;:host-context()&lt;/code&gt; selector looks for a CSS class in any ancestor of the component host element, up to the document root. The &lt;code&gt;:host-context()&lt;/code&gt; selector is useful when combined with another selector.</source>
          <target state="translated">사용 &lt;code&gt;:host-context()&lt;/code&gt; 단지의 기능 양식처럼 작동 의사 클래스 선택기 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;()&lt;/code&gt; . &lt;code&gt;:host-context()&lt;/code&gt; 문서 루트 구성 요소 호스트 요소의 조상, 최대의 CSS 클래스 선택 보인다. &lt;code&gt;:host-context()&lt;/code&gt; 다른 선택과 결합 선택기 유용하다.</target>
        </trans-unit>
        <trans-unit id="e72b9954eaff41b26847a659d8c0f90cb35a7a3f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:host-context()&lt;/code&gt; pseudo-class selector, which works just like the function form of &lt;code&gt;:host()&lt;/code&gt;. The &lt;code&gt;:host-context()&lt;/code&gt; selector looks for a CSS class in any ancestor of the component host element, up to the document root. The &lt;code&gt;:host-context()&lt;/code&gt; selector is useful when combined with another selector.</source>
          <target state="translated">사용 &lt;code&gt;:host-context()&lt;/code&gt; 단지의 기능 양식처럼 작동 의사 클래스 선택기 &lt;code&gt;:host()&lt;/code&gt; . &lt;code&gt;:host-context()&lt;/code&gt; 문서 루트 구성 요소 호스트 요소의 조상, 최대의 CSS 클래스 선택 보인다. &lt;code&gt;:host-context()&lt;/code&gt; 다른 선택과 결합 선택기 유용하다.</target>
        </trans-unit>
        <trans-unit id="1eb6b173a1c3356126f8b598723f08cf244e5776" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:host&lt;/code&gt; pseudo-class selector to target styles in the element that &lt;em&gt;hosts&lt;/em&gt; the component (as opposed to targeting elements &lt;em&gt;inside&lt;/em&gt; the component's template).</source>
          <target state="translated">사용 &lt;code&gt;:host&lt;/code&gt; 그 요소에 목표 스타일에 의사 클래스 선택기를 &lt;em&gt;호스트&lt;/em&gt; 구성 요소 (같은 요소 대상에 반대하는 &lt;em&gt;내부&lt;/em&gt; 구성 요소의 템플릿을).</target>
        </trans-unit>
        <trans-unit id="c620015e08354210a92a8e92a39367a30c7b96b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function to define the length, delay, and easing of a transition, and to designate the style function for defining styles while transitions are taking place. You can also use the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function to define the &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function for multi-step animations. These definitions are placed in the second argument of the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 길이, 지연을 정의하는 기능을하고, 변화의 완화 및 전환이 일어나고있는 동안 스타일을 정의하는 스타일 기능을 지정할 수 있습니다. &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 다단계 애니메이션 의 &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 함수 를 정의 할 수도 있습니다 . 이러한 정의는 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 함수 의 두 번째 인수에 배치됩니다 .</target>
        </trans-unit>
        <trans-unit id="f32ed10372c1cab9fb95fe4e02cc957f60ec0b21" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; method to create the &lt;code&gt;profileForm&lt;/code&gt; controls.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 작성하는 방법을 &lt;code&gt;profileForm&lt;/code&gt; 의 컨트롤을.</target>
        </trans-unit>
        <trans-unit id="8bdd7bc62b27869a9b7bb04eb7df3c59285d92cc" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; method to find and animate elements within the current host component. The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:enter&quot;)&lt;/code&gt; statement returns the view that is being inserted, and &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:leave&quot;)&lt;/code&gt; returns the view that is being removed.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 찾아 현재 호스트 구성 요소 내에서 애니메이션 요소하는 방법. &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:enter&quot;)&lt;/code&gt; 문이 삽입되고보기 및 반환 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:leave&quot;)&lt;/code&gt; 삭제되는 뷰를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="ebd22958c7847fa77a78ef8e03b47db2e683c9d2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function to define a set of styles to associate with a given state name. Note that the style attributes must be in &lt;a href=&quot;glossary#case-conventions&quot;&gt;&lt;em&gt;camelCase&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 주어진 상태 이름과 연결 스타일 세트를 정의하는 기능. 스타일 속성은 &lt;a href=&quot;glossary#case-conventions&quot;&gt;&lt;em&gt;camelCase에&lt;/em&gt;&lt;/a&gt; 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="0fa654e1834814316ba8811c61caee652776bb4c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class with the &lt;code&gt;params&lt;/code&gt; request option to add URL query strings in your &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 요청 옵션 과 함께 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 클래스를 사용 하여 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 에 URL 쿼리 문자열을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="91acc14e39e5119c18415965f1423d1c1e94ab00" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; method to simulate the passage of time within the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; task.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; () 작업 내에서 시간의 흐름을 시뮬레이션 하려면 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 메서드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6e11e33b2cc2033eeec839ccb2bf4ff8db1df75b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array as another way to provide services in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. Using &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; makes services visibile in the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 에서 서비스를 제공하는 또 다른 방법으로 배열 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 데코레이터. &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 를 사용 하면 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 에서 서비스가 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="e9da9c13c3494d39f9b8123dc99a605e807be36b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; hook to detect and act upon changes that Angular doesn't catch on its own.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 후크를 사용하여 Angular가 자체적으로 포착하지 않는 변경 사항을 감지하고 조치하십시오.</target>
        </trans-unit>
        <trans-unit id="d7752a1ea977f4ad7b461d4d69d81c8a873f6eeb" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;()&lt;/code&gt; method to simulate the passage of time within the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; task.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;()&lt;/code&gt; 내에서 시간의 흐름을 시뮬레이션하는 방법을 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 작업.</target>
        </trans-unit>
        <trans-unit id="b14dbf457ff7a844ac29eacc3c02344a0ca4f6f9" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function to convert a component into a class that can be registered with the browser as a custom element. After you register your configured class with the browser's custom-element registry, you can use the new element just like a built-in HTML element in content that you add directly into the DOM:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 컴포넌트를 브라우저에 사용자 정의 요소로 등록 할 수있는 클래스로 변환하십시오. 구성된 클래스를 브라우저의 사용자 정의 요소 레지스트리에 등록한 후 DOM에 직접 추가하는 컨텐츠의 내장 HTML 요소와 같이 새 요소를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c24aafb47c577f92905ee4910fc51532818acf73" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;FormBuilder.array()&lt;/a&gt;&lt;/code&gt; method to define the array, and the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;FormBuilder.control()&lt;/a&gt;&lt;/code&gt; method to populate the array with an initial control.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;FormBuilder.array()&lt;/a&gt;&lt;/code&gt; 배열을 정의하는 방법 및 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;FormBuilder.control()&lt;/a&gt;&lt;/code&gt; 메소드는 초기 제어 배열을 채우는.</target>
        </trans-unit>
        <trans-unit id="ee7d38fbbd61f8f37159836272223af030e2357d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method to create a programmatic animation using the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function. The method returns an &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; 사용하여 프로그래밍 애니메이션 만드는 방법을 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 함수를. 이 메소드는 &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; 인스턴스를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="3765ca5842a3e715a91529c10554d2f2c436e303" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; strategy, meaning that automatic change detection is deactivated until reactivated by setting the strategy to &lt;code&gt;Default&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;). Change detection can still be explicitly invoked. This strategy applies to all child directives and cannot be overridden.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; 전략을 사용하십시오. 이는 전략을 &lt;code&gt;Default&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; ) 으로 설정하여 다시 활성화 할 때까지 자동 변경 감지가 비활성화됨을 의미합니다 . 변경 감지는 여전히 명시 적으로 호출 할 수 있습니다. 이 전략은 모든 하위 지시문에 적용되며 재정의 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b2cf0a1cf425beff3e317842f9cdbcec4e95baf3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function to register states to an animation trigger. Use the &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function to animate between states. When a state is active within a component, its associated styles persist on the element, even when the animation ends.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 애니메이션 트리거에 상태를 등록하십시오. 상태 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 위해 전환 () 함수를 사용하십시오 . 구성 요소 내에서 상태가 활성화되면 애니메이션이 종료 되더라도 관련 스타일이 요소에서 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="b3851f1b2f6c392b87e343e5e9be15390610617a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component or directive to let Angular know that a property in that component can receive its value from its parent component. It helps to remember that the data flow is from the perspective of the child component. So an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; allows data to be input &lt;em&gt;into&lt;/em&gt; the child component from the parent component.</source>
          <target state="translated">자식 구성 요소 또는 지시문에서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 데코레이터를 사용하여 Angular에 해당 구성 요소의 속성이 부모 구성 요소에서 값을받을 수 있음을 알립니다. 데이터 흐름은 하위 구성 요소의 관점에서 온 것임을 기억하는 데 도움이됩니다. 따라서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 사용 하면 부모 구성 요소에서 자식 구성 요소 &lt;em&gt;로&lt;/em&gt; 데이터를 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef440cee0d4b619baf1dc108b572b145ffe599c6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator in the child component or directive to allow data to flow from the child &lt;em&gt;out&lt;/em&gt; to the parent.</source>
          <target state="translated">사용 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 데이터가 자녀로부터의 정보 흐름을 허용하는 하위 구성 요소 또는 지시에 장식을 &lt;em&gt;밖으로&lt;/em&gt; 부모.</target>
        </trans-unit>
        <trans-unit id="d83e06cc984ee1c0469d1eafff65bf7633430e80" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;CheckOnce&lt;/code&gt; strategy, meaning that automatic change detection is deactivated until reactivated by setting the strategy to &lt;code&gt;Default&lt;/code&gt; (&lt;code&gt;CheckAlways&lt;/code&gt;). Change detection can still be explicitly invoked. This strategy applies to all child directives and cannot be overridden.</source>
          <target state="translated">&lt;code&gt;CheckOnce&lt;/code&gt; 전략을 사용합니다 . 즉, 전략을 &lt;code&gt;Default&lt;/code&gt; ( &lt;code&gt;CheckAlways&lt;/code&gt; ) 으로 설정하여 다시 활성화 할 때까지 자동 변경 검색이 비활성화 됩니다. 변경 감지는 여전히 명시 적으로 호출 할 수 있습니다. 이 전략은 모든 하위 지시문에 적용되며 재정의 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="cb9e4c97b8a1368fcaea25ed71eeaf564330d68c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Observable&lt;/code&gt; constructor to create an observable stream of any type. The constructor takes as its argument the subscriber function to run when the observable&amp;rsquo;s &lt;code&gt;subscribe()&lt;/code&gt; method executes. A subscriber function receives an &lt;code&gt;Observer&lt;/code&gt; object, and can publish values to the observer's &lt;code&gt;next()&lt;/code&gt; method.</source>
          <target state="translated">사용 &lt;code&gt;Observable&lt;/code&gt; 모든 종류의 관찰 스트림을 생성하는 생성자를. 생성자는 옵저버 블의 &lt;code&gt;subscribe()&lt;/code&gt; 메서드 가 실행될 때 구독자 함수를 인수로 사용합니다 . 구독자 함수는 &lt;code&gt;Observer&lt;/code&gt; 객체를 받고 관찰자의 &lt;code&gt;next()&lt;/code&gt; 메서드에 값을 게시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1173fd6da6508928f593314bd49b24f1cee5a901" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method to define a set of routes. Also, import this &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the main module, &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RouterModule.forRoot&lt;/code&gt; 메소드를 사용하여 라우트 세트를 정의하십시오. 또한이 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 을 기본 모듈 &lt;code&gt;AppModule&lt;/code&gt; 의 &lt;code&gt;imports&lt;/code&gt; 배열로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="e8313bf3571f8e365bb6b78327e4934cce902d36" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;build()&lt;/code&gt; method to create a programmatic animation using the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function. The method returns an &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">사용 &lt;code&gt;build()&lt;/code&gt; 사용하여 프로그래밍 애니메이션 만드는 방법을 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 함수를. 이 메서드는 &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; 인스턴스를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="236f90d8a2b43b2b908f826c2dd47da6ccc4d554" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;declarations&lt;/code&gt; array for directives. To use a directive, component, or pipe in a module, you must do a few things:</source>
          <target state="translated">지시문에 &lt;code&gt;declarations&lt;/code&gt; 배열을 사용하십시오 . 모듈에서 지시문, 구성 요소 또는 파이프를 사용하려면 몇 가지 작업을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="3c3fa69688b331df5c2d1c642a70ae5ecd3bdf4b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;favoriteColorControl&lt;/code&gt;, a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance, to set the new value.</source>
          <target state="translated">사용 &lt;code&gt;favoriteColorControl&lt;/code&gt; 하는 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 새 값을 설정하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="61f6904d5a95189f40bcaf32c7dae25ca2c3b08c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;i18n&lt;/code&gt; project option in your app's build configuration file (&lt;a href=&quot;workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt;&lt;/a&gt;) to define locales for a project. The following sub-options identify the source language and tell the compiler where to find supported translations for the project:</source>
          <target state="translated">앱의 빌드 구성 파일 ( &lt;a href=&quot;workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; &lt;/a&gt; ) 에서 &lt;code&gt;i18n&lt;/code&gt; 프로젝트 옵션을 사용하여 프로젝트의 로케일을 정의합니다. 다음 하위 옵션은 소스 언어를 식별하고 프로젝트에 대해 지원되는 번역을 찾을 수있는 위치를 컴파일러에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="48ee9872418a6c1f38c284ca4a4b987b2309d939" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;ngOnInit()&lt;/code&gt; method to perform the following initialization tasks.</source>
          <target state="translated">사용 &lt;code&gt;ngOnInit()&lt;/code&gt; 다음 초기화 작업을 수행하는 방법을.</target>
        </trans-unit>
        <trans-unit id="4eec2f26c7f0fc8134e3d9fc9ce871ea1a55e8f8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;params&lt;/code&gt; property to configure a request with &lt;a href=&quot;http#url-params&quot;&gt;HTTP URL parameters&lt;/a&gt;, and the &lt;code&gt;reportProgress&lt;/code&gt; option to &lt;a href=&quot;http#report-progress&quot;&gt;listen for progress events&lt;/a&gt; when transferring large amounts of data.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 속성을 사용하여 &lt;a href=&quot;http#url-params&quot;&gt;HTTP URL 매개 변수&lt;/a&gt; 로 요청을 구성하고 , 많은 양의 데이터를 전송할 때 &lt;a href=&quot;http#report-progress&quot;&gt;진행 이벤트&lt;/a&gt; 를 수신 하려면 &lt;code&gt;reportProgress&lt;/code&gt; 옵션을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="16cf1db0421f9d869402c30f489d6a26b1ef363c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;patchValue()&lt;/code&gt; method to replace any properties defined in the object that have changed in the form model.</source>
          <target state="translated">&lt;code&gt;patchValue()&lt;/code&gt; 메소드를 사용하여 양식 모델에서 변경된 오브젝트에 정의 된 특성을 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="bb02cfa0121d7b0538da1ecc37b0b8d4f6b44745" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;plural&lt;/code&gt; clause to mark expressions that may not be meaningful if translated word-for-word.</source>
          <target state="translated">단어 단위로 번역 된 경우 의미가 없을 수있는 표현을 표시 하려면 &lt;code&gt;plural&lt;/code&gt; 절을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="663da71b4933858141a19f1c639501cb180552d7" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;retry&lt;/code&gt; operator before the &lt;code&gt;catchError&lt;/code&gt; operator. It resubscribes to the original source observable, which can then re-run the full sequence of actions that resulted in the error. If this includes an HTTP request, it will retry that HTTP request.</source>
          <target state="translated">&lt;code&gt;catchError&lt;/code&gt; 연산자 전에 &lt;code&gt;retry&lt;/code&gt; 연산자를 사용하십시오 . 관찰 가능한 원래 소스에 다시 가입 한 다음 오류가 발생한 전체 동작 시퀀스를 다시 실행할 수 있습니다. HTTP 요청이 포함 된 경우 해당 HTTP 요청을 재 시도합니다.</target>
        </trans-unit>
        <trans-unit id="b7694867b286796d89cd1dbec2bfe6eee5554c0d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;save&lt;/code&gt; option of &lt;code&gt;ng-add&lt;/code&gt; to configure if the library should be added to the &lt;code&gt;dependencies&lt;/code&gt;, the &lt;code&gt;devDepedencies&lt;/code&gt;, or not saved at all in the project's &lt;code&gt;package.json&lt;/code&gt; configuration file.</source>
          <target state="translated">&lt;code&gt;ng-add&lt;/code&gt; 의 &lt;code&gt;save&lt;/code&gt; 옵션을 사용하여 라이브러리가 &lt;code&gt;dependencies&lt;/code&gt; , &lt;code&gt;devDepedencies&lt;/code&gt; 에 추가되어야하는지 또는 프로젝트의 &lt;code&gt;package.json&lt;/code&gt; 구성 파일 에 전혀 저장되지 않아야 하는지 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="3c670bb360c8cc1af3a13abb754e25fbb2f42f5b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;schematics&lt;/code&gt; command to run a named schematic. Provide the path to the project folder, the schematic name, and any mandatory options, in the following format.</source>
          <target state="translated">&lt;code&gt;schematics&lt;/code&gt; 명령을 사용하여 명명 된 회로도를 실행하십시오. 프로젝트 폴더의 경로, 회로도 이름 및 모든 필수 옵션을 다음 형식으로 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="d6dfca72b156d70b98370724a6bf1ea5950071f5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;set()&lt;/code&gt; method instead, to return a clone of the current instance with the new changes applied.</source>
          <target state="translated">사용 &lt;code&gt;set()&lt;/code&gt; 적용되는 새로운 변화와 현재의 인스턴스의 복제를 반환하는 대신 방법을.</target>
        </trans-unit>
        <trans-unit id="52f536a15c49df755922f56c142d44e19a8db2b4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;setValue()&lt;/code&gt; method to set a new value for an individual control. The &lt;code&gt;setValue()&lt;/code&gt; method strictly adheres to the structure of the form group and replaces the entire value for the control.</source>
          <target state="translated">&lt;code&gt;setValue()&lt;/code&gt; 메소드를 사용하여 개별 제어에 대한 새 값을 설정하십시오. &lt;code&gt;setValue()&lt;/code&gt; 메소드는 엄격 형태 기의 구조에 부착 및 제어 전체 값을 대체한다.</target>
        </trans-unit>
        <trans-unit id="5a4052bf9f3ebb3e3c658b007bccd5c4c5718185" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;viewProviders&lt;/code&gt; array as another way to provide services in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. Using &lt;code&gt;viewProviders&lt;/code&gt; makes services visible in the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; () 데코레이터 에서 서비스를 제공하는 또 다른 방법으로 &lt;code&gt;viewProviders&lt;/code&gt; 배열을 사용하십시오 . &lt;code&gt;viewProviders&lt;/code&gt; 를 사용 하면 서비스가 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 에 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="608e3ecc67d63ebd131072715526770717d76070" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;function form&lt;/em&gt; to apply host styles conditionally by including another selector inside parentheses after &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;em&gt;기능 양식을&lt;/em&gt; 후 괄호 안에 다른 선택 포함하여 조건부 호스트 스타일을 적용 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="95d63fddc3e3a0e31fab944297cbb5d5eb512831" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;function form&lt;/em&gt; to apply host styles conditionally by including another selector inside parentheses after &lt;code&gt;:host&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;함수 양식&lt;/em&gt; 을 사용하여 &lt;code&gt;:host&lt;/code&gt; 뒤에 괄호 안에 다른 선택자를 포함하여 조건부로 호스트 스타일을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="0228ac89e07be504f25494e9676937a8b7718d7a" translate="yes" xml:space="preserve">
          <source>Use the @Injectable() class decorator</source>
          <target state="translated">@Injectable () 클래스 데코레이터 사용</target>
        </trans-unit>
        <trans-unit id="ca6ceefb0e64ecbea616db35552ef73de6fa3bb9" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI and the npm package manager to build and publish your library as an npm package.</source>
          <target state="translated">Angular CLI 및 npm 패키지 관리자를 사용하여 라이브러리를 npm 패키지로 빌드하고 게시합니다.</target>
        </trans-unit>
        <trans-unit id="d3a17a236cfd17da399af8b8cc707e6575ce9b8c" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI and the npm package manager to build and publish your library as an npm package. Libraries are built in &lt;a href=&quot;aot-compiler&quot;&gt;AoT mode&lt;/a&gt; by default, so you do not need to specify the &lt;code&gt;-prod&lt;/code&gt; flag when building for publication.</source>
          <target state="translated">Angular CLI 및 npm 패키지 관리자를 사용하여 라이브러리를 npm 패키지로 빌드하고 게시하십시오. 라이브러리는 기본적으로 &lt;a href=&quot;aot-compiler&quot;&gt;AoT 모드&lt;/a&gt; 로 빌드 되므로 게시를 위해 빌드 할 때 &lt;code&gt;-prod&lt;/code&gt; 플래그 를 지정할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4633a55586a6fa2e22e42b322b523d199217f07e" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new component named &lt;code&gt;hero-detail&lt;/code&gt;.</source>
          <target state="translated">Angular CLI를 사용하여 &lt;code&gt;hero-detail&lt;/code&gt; 이라는 새 구성 요소를 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5380a6f98199f77703c5f5d467966fab80d71f5" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new library skeleton in a new workspace with the following commands.</source>
          <target state="translated">Angular CLI를 사용하여 다음 명령으로 새 작업 공간에서 새 라이브러리 스켈레톤을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="4d57c142dc3dc54d8d21e3c079a0a3926683c980" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new library skeleton with the following command:</source>
          <target state="translated">Angular CLI를 사용하여 다음 명령으로 새 라이브러리 스켈레톤을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="359dd0a4bcbf30fc27fe4c0e62d05c483ce99a29" translate="yes" xml:space="preserve">
          <source>Use the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new displaying-data&lt;/code&gt;&lt;/a&gt; to create a workspace and app named &lt;code&gt;displaying-data&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new displaying-data&lt;/code&gt; &lt;/a&gt; CLI 명령 ng 를 사용하여 이름이 &lt;code&gt;displaying-data&lt;/code&gt; 작업 공간 및 앱을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="38c9f16db58637bd61abdf74662688ec8ee2214e" translate="yes" xml:space="preserve">
          <source>Use the CLI to automatically create the app shell.</source>
          <target state="translated">CLI를 사용하여 앱 셸을 자동으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9ece05677ae45d1939690d567a9eb86967b7bbf8" translate="yes" xml:space="preserve">
          <source>Use the CLI to build the &lt;code&gt;app-shell&lt;/code&gt; target.</source>
          <target state="translated">CLI를 사용하여 &lt;code&gt;app-shell&lt;/code&gt; 대상 을 빌드하십시오 .</target>
        </trans-unit>
        <trans-unit id="e5cf2ec90353ca6935df3915b02b577d867b4e88" translate="yes" xml:space="preserve">
          <source>Use the CLI to create the &lt;code&gt;MessageService&lt;/code&gt; in &lt;code&gt;src/app&lt;/code&gt;.</source>
          <target state="translated">CLI를 사용하여 &lt;code&gt;src/app&lt;/code&gt; 에서 &lt;code&gt;MessageService&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="308d836de00681b82b1a6ac4629d26037ebc7917" translate="yes" xml:space="preserve">
          <source>Use the CLI to create the &lt;code&gt;MessagesComponent&lt;/code&gt;.</source>
          <target state="translated">CLI를 사용하여 &lt;code&gt;MessagesComponent&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4358774dc70c3cc192b493d6b2f26403c5c18d1" translate="yes" xml:space="preserve">
          <source>Use the CLI to extract marked text to a &lt;em&gt;source language&lt;/em&gt; file.</source>
          <target state="translated">CLI를 사용하여 표시된 텍스트를 &lt;em&gt;소스 언어&lt;/em&gt; 파일 로 추출 하십시오.</target>
        </trans-unit>
        <trans-unit id="7cf59379107eb2f1e9f7b6aeeaba809aa6857254" translate="yes" xml:space="preserve">
          <source>Use the CLI to generate it.</source>
          <target state="translated">CLI를 사용하여 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="8226af003735bc615b4ebed923581797af4b5db5" translate="yes" xml:space="preserve">
          <source>Use the CLI to merge the finished translation files when building your app for one or more locales.</source>
          <target state="translated">하나 이상의 로케일에 대한 앱을 빌드 할 때 CLI를 사용하여 완료된 번역 파일을 병합하십시오.</target>
        </trans-unit>
        <trans-unit id="9784a04039a561954033d9fe973f0a4c5920fe5c" translate="yes" xml:space="preserve">
          <source>Use the HTML</source>
          <target state="translated">HTML 사용</target>
        </trans-unit>
        <trans-unit id="5bbf6b5276a555599737d1dbfa3accbd3fb1e8c7" translate="yes" xml:space="preserve">
          <source>Use the ID in this previous-state object to differentiate between a newly created state and one returned to by a &lt;code&gt;popstate&lt;/code&gt; event, so that you can restore some remembered state, such as scroll position.</source>
          <target state="translated">이 이전 상태 객체의 ID를 사용하여 새로 만든 상태와 &lt;code&gt;popstate&lt;/code&gt; 이벤트에서 반환 된 상태를 구별 하여 스크롤 위치와 같은 일부 기억 된 상태를 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad47a1b288e517ce0effef6619c4c1531bfc33eb" translate="yes" xml:space="preserve">
          <source>Use the built-in &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;&lt;code&gt;AsyncPipe&lt;/code&gt;&lt;/a&gt; to accept an observable as input and subscribe to the input automatically. Without this pipe, your component code would have to subscribe to the observable to consume its values, extract the resolved values, expose them for binding, and unsubscribe when the observable is destroyed in order to prevent memory leaks. &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; is an impure pipe that saves boilerplate code in your component to maintain the subscription and keep delivering values from that observable as they arrive.</source>
          <target state="translated">기본 제공 &lt;a href=&quot;../api/common/asyncpipe&quot;&gt; &lt;code&gt;AsyncPipe&lt;/code&gt; &lt;/a&gt; 를 사용하여 Observable을 입력으로 받아들이고 입력을 자동으로 구독합니다. 이 파이프가 없으면 컴포넌트 코드가 옵저버 블을 구독하여 값을 소비하고, 해결 된 값을 추출하고, 바인딩을 위해 노출하고, 메모리 누수를 방지하기 위해 옵저버 블이 소멸 될 때 구독을 취소해야합니다. &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 는 구성 요소에 상용구 코드를 저장하여 구독을 유지하고 관찰 가능한 값이 도착할 때 계속 제공하는 불순한 파이프입니다.</target>
        </trans-unit>
        <trans-unit id="ef9afc5479b408292ddfb0e17196fc61151a2e25" translate="yes" xml:space="preserve">
          <source>Use the cart service</source>
          <target state="translated">카트 서비스 사용</target>
        </trans-unit>
        <trans-unit id="0db540616d56f52390a576fdc34c3c9b5df49407" translate="yes" xml:space="preserve">
          <source>Use the child's selector, here &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt;, as a directive within the parent component template.</source>
          <target state="translated">하위 선택기 (여기서는 &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt; )를 상위 구성 요소 템플릿 내에서 지시문으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="eecd35206481b79b7c4507d8f30817c32cca25ef" translate="yes" xml:space="preserve">
          <source>Use the component instance to set the value of the &lt;code&gt;favoriteColor&lt;/code&gt; property.</source>
          <target state="translated">구성 요소 인스턴스를 사용하여 &lt;code&gt;favoriteColor&lt;/code&gt; 속성 값을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d9ebb52ab384cbcfd61b51ce977015d8e0b30b7" translate="yes" xml:space="preserve">
          <source>Use the constructor of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; to set its initial value, which in this case is an empty string. By creating these controls in your component class, you get immediate access to listen for, update, and validate the state of the form input.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 생성자를 사용하여 초기 값을 설정 하십시오 ( 이 경우 빈 문자열). 컴포넌트 클래스에서 이러한 제어를 작성하면 양식 입력의 상태를 청취, 업데이트 및 유효성 검증 할 수있는 즉시 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7587cbf004aad2b4e56b322cfef850309d1e76b" translate="yes" xml:space="preserve">
          <source>Use the default &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; strategy, in which change detection is automatic until explicitly deactivated.</source>
          <target state="translated">명시 적으로 비활성화 될 때까지 변경 감지가 자동으로 수행되는 기본 &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; 전략을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9b84209d06a615494105c2cd31dacc65b8d1ec0c" translate="yes" xml:space="preserve">
          <source>Use the default &lt;code&gt;CheckAlways&lt;/code&gt; strategy, in which change detection is automatic until explicitly deactivated.</source>
          <target state="translated">명시 적으로 비활성화 될 때까지 변경 감지가 자동으로 수행되는 기본 &lt;code&gt;CheckAlways&lt;/code&gt; 전략을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9d590f11c718da330ccebceb5b8b2511c996779" translate="yes" xml:space="preserve">
          <source>Use the documentation to learn about key features in more depth, according to your stage of development and areas of interest.</source>
          <target state="translated">문서를 사용하여 개발 단계 및 관심 분야에 따라 주요 기능에 대해 자세히 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="99d11f8688c1e1b1658b40526cee3f9f4dfd5fa0" translate="yes" xml:space="preserve">
          <source>Use the factory object to create an &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; and attach it to a DOM element.</source>
          <target state="translated">팩토리 객체를 사용하여 &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; 를 만들고 DOM 요소에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="7acbbdfbc6898fafd3430035744e606c15ea75ac" translate="yes" xml:space="preserve">
          <source>Use the following &lt;code&gt;extract-i18n&lt;/code&gt; command options to change the source language file location, format, and file name:</source>
          <target state="translated">다음 &lt;code&gt;extract-i18n&lt;/code&gt; 명령 옵션을 사용하여 소스 언어 파일 위치, 형식 및 파일 이름을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="09aee07ff0cbe6302c8871e0400bf8743cc280bd" translate="yes" xml:space="preserve">
          <source>Use the following content in the JavaScript configuration file.</source>
          <target state="translated">JavaScript 구성 파일에서 다음 내용을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f1622d1a4ae3f19827df7745511b0e1bc132f843" translate="yes" xml:space="preserve">
          <source>Use the following steps to add a checkout form at the bottom of the &quot;Cart&quot; view.</source>
          <target state="translated">다음 단계를 사용하여 &quot;장바구니&quot;보기 하단에 결제 양식을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="08882a68d2a6ab746f1170233fe9d5b9bc6e6af5" translate="yes" xml:space="preserve">
          <source>Use the following steps to add form validation.</source>
          <target state="translated">다음 단계를 사용하여 양식 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="955751dc319f679303c70fa0991bd8be5b91890a" translate="yes" xml:space="preserve">
          <source>Use the following steps to take advantage of this service.</source>
          <target state="translated">이 서비스를 이용하려면 다음 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="7e1c4b14a5abd7301b86d2981a9d5c9c7b2e3b27" translate="yes" xml:space="preserve">
          <source>Use the getter syntax to create an &lt;code&gt;aliases&lt;/code&gt; class property to retrieve the alias's form array control from the parent form group.</source>
          <target state="translated">getter 구문을 사용하여 &lt;code&gt;aliases&lt;/code&gt; 클래스 특성을 작성하여 상위 양식 그룹에서 별명의 양식 배열 제어를 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="2b9f9c8bf8a06791c1b3d0e9f88f619639572ebe" translate="yes" xml:space="preserve">
          <source>Use the hash symbol (#) to declare a reference variable. The following reference variable, &lt;code&gt;#phone&lt;/code&gt;, declares a &lt;code&gt;phone&lt;/code&gt; variable on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">해시 기호 (#)를 사용하여 참조 변수를 선언하십시오. 다음 참조 변수 &lt;code&gt;#phone&lt;/code&gt; 은 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소 에서 &lt;code&gt;phone&lt;/code&gt; 변수를 선언합니다 .</target>
        </trans-unit>
        <trans-unit id="bc2bab9bb36109c9261e4e21e1209550f2534701" translate="yes" xml:space="preserve">
          <source>Use the largest version, including beta and RCs.</source>
          <target state="translated">베타 및 RC를 포함하여 가장 큰 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="69d5a81a07b4469e551ea97e2cfdba24bee1b9a2" translate="yes" xml:space="preserve">
          <source>Use the lightweight injection token for API definition</source>
          <target state="translated">API 정의에 경량 주입 토큰 사용</target>
        </trans-unit>
        <trans-unit id="a68d4930594481bd496a5d3065ddf5ac88c6c31d" translate="yes" xml:space="preserve">
          <source>Use the native encapsulation mechanism of the renderer. See &lt;a href=&quot;https://github.com/angular/angular/blob/3e992e18ebf51d6036818f26c3d77b52d3ec48eb/packages/core/src/metadata/view.ts#L32&quot;&gt;view.ts&lt;/a&gt;.</source>
          <target state="translated">렌더러의 기본 캡슐화 메커니즘을 사용하십시오. &lt;a href=&quot;https://github.com/angular/angular/blob/3e992e18ebf51d6036818f26c3d77b52d3ec48eb/packages/core/src/metadata/view.ts#L32&quot;&gt;view.ts를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="84bc78fa2e78ed5dfdea31357fb98bf3bc73c6e3" translate="yes" xml:space="preserve">
          <source>Use the offline template compiler</source>
          <target state="translated">오프라인 템플릿 컴파일러 사용</target>
        </trans-unit>
        <trans-unit id="4e5c044a102c6e5b28de2adf47e3ca6799e2b720" translate="yes" xml:space="preserve">
          <source>Use the player object to control the animation programmatically.</source>
          <target state="translated">플레이어 객체를 사용하여 프로그래밍 방식으로 애니메이션을 제어하십시오.</target>
        </trans-unit>
        <trans-unit id="3760d8d459300900a0e3f01762ed9a4bffe52f69" translate="yes" xml:space="preserve">
          <source>Use the prerelease version, including beta and RCs.</source>
          <target state="translated">베타 및 RC를 포함한 시험판 버전을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="33b6e8a56b6a428c4c11a0f9864e1086bde51fbc" translate="yes" xml:space="preserve">
          <source>Use the returned AngularJS module in a call to &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/function/angular.mock.module&quot;&gt;&lt;code&gt;angular.mocks.module&lt;/code&gt;&lt;/a&gt; to include this module in the unit test injector.</source>
          <target state="translated">반환 된 AngularJS 모듈을 &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/function/angular.mock.module&quot;&gt; &lt;code&gt;angular.mocks.module&lt;/code&gt; &lt;/a&gt; 에 호출 하여 단위 테스트 인젝터에이 모듈을 포함 시키십시오 .</target>
        </trans-unit>
        <trans-unit id="5077e6c1fae00cd3872afeb69763760817a2633f" translate="yes" xml:space="preserve">
          <source>Use the returned class as an &quot;import&quot; when configuring the &lt;code&gt;&lt;a href=&quot;../../../core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../../core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 를 구성 할 때 반환 된 클래스를 &quot;가져 오기&quot;로 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="da723cd932f5f79f6b8665dde136ba0626c258d9" translate="yes" xml:space="preserve">
          <source>Use the same command to create a second lazy-loaded feature module with routing, along with its stub component.</source>
          <target state="translated">동일한 명령을 사용하여 스텁 구성 요소와 함께 라우팅이있는 두 번째 지연로드 기능 모듈을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="68b4c7f1ae521c49637ab19099788a3f20c66452" translate="yes" xml:space="preserve">
          <source>Use the template reference variable, &lt;code&gt;#heroForm&lt;/code&gt; to access the form that contains the &lt;strong&gt;Submit&lt;/strong&gt; button and create an event binding. You will bind the form property that indicates its overall validity to the &lt;strong&gt;Submit&lt;/strong&gt; button's &lt;code&gt;disabled&lt;/code&gt; property.</source>
          <target state="translated">템플릿 참조 변수 &lt;code&gt;#heroForm&lt;/code&gt; 을 사용하여 &lt;strong&gt;제출&lt;/strong&gt; 버튼 이 포함 된 양식에 액세스하고 이벤트 바인딩을 만듭니다. 전체 유효성을 나타내는 양식 속성을 &lt;strong&gt;제출&lt;/strong&gt; 단추의 &lt;code&gt;disabled&lt;/code&gt; 속성에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="d1be55a191205536fb2fb08bd1548c8802cd4f7d" translate="yes" xml:space="preserve">
          <source>Use the type-guard properties to inform the template type checker of an expected type, thus improving compile-time type-checking for that template.</source>
          <target state="translated">type-guard 속성을 사용하여 템플릿 유형 검사기에 예상 유형을 알려 해당 템플릿에 대한 컴파일 타임 유형 검사를 개선합니다.</target>
        </trans-unit>
        <trans-unit id="e7ea2de74a92043d55f851bb691e02d30a346279" translate="yes" xml:space="preserve">
          <source>Use the wildcard &lt;code&gt;*&lt;/code&gt; with a style to tell the animation to use whatever the current style value is, and animate with that. Wildcard is a fallback value that's used if the state being animated isn't declared within the trigger.</source>
          <target state="translated">스타일에 와일드 카드 &lt;code&gt;*&lt;/code&gt; 를 사용하여 애니메이션에 현재 스타일 값이 무엇이든 사용하도록 지시하고 애니메이션을 적용하십시오. 와일드 카드는 애니메이션중인 상태가 트리거 내에서 선언되지 않은 경우 사용되는 대체 값입니다.</target>
        </trans-unit>
        <trans-unit id="e31d6952c1ff1fd94a0e173b45067b6c83f34690" translate="yes" xml:space="preserve">
          <source>Use this API as the last resort when direct access to DOM is needed. Use templating and data-binding provided by Angular instead. Alternatively you can take a look at &lt;a href=&quot;renderer2&quot;&gt;&lt;code&gt;Renderer2&lt;/code&gt;&lt;/a&gt; which provides API that can safely be used even when direct access to native elements is not supported.</source>
          <target state="translated">DOM에 직접 액세스해야하는 경우이 API를 최후의 수단으로 사용하십시오. 대신 Angular에서 제공하는 템플릿 및 데이터 바인딩을 사용하십시오. 또는 기본 요소에 대한 직접 액세스가 지원되지 않는 경우에도 안전하게 사용할 수있는 API를 제공하는 &lt;a href=&quot;renderer2&quot;&gt; &lt;code&gt;Renderer2&lt;/code&gt; &lt;/a&gt; 를 살펴볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="66dc17561e140a926f2fa11ae753d9ec492fade0" translate="yes" xml:space="preserve">
          <source>Use this API to define how an HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each of these transformations. The function calls generate the data structures and metadata that enable Angular to integrate animations into templates and run them based on application states.</source>
          <target state="translated">이 API를 사용하여 HTML 요소가 페이지를 이동, 색상 변경, 확장 또는 축소, 페이드 또는 슬라이드 아웃하는 방법을 정의하십시오. 이러한 변경은 동시에 또는 순차적으로 발생할 수 있습니다. 이러한 각 변환의 타이밍을 제어 할 수 있습니다. 함수 호출은 Angular가 애니메이션을 템플릿에 통합하고 응용 프로그램 상태에 따라 애니메이션을 실행할 수 있도록하는 데이터 구조 및 메타 데이터를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="239c77567c5a5ce0197bcc941ceca052e2b45d4e" translate="yes" xml:space="preserve">
          <source>Use this API to register directives, build form and data models, and provide validation to your forms. Validators can be synchronous or asynchronous depending on your use case. You can also extend the built-in functionality provided by forms in Angular by using the interfaces and tokens to create custom validators and input elements.</source>
          <target state="translated">지시문을 등록하고 양식 및 데이터 모델을 작성하며 양식에 대한 유효성 검증을 제공하려면이 API를 사용하십시오. 유효성 검사기는 사용 사례에 따라 동기식 또는 비동기식 일 수 있습니다. 인터페이스와 토큰을 사용하여 사용자 지정 유효성 검사기 및 입력 요소를 만들어 Angular 양식에서 제공하는 기본 제공 기능을 확장 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="dffc59d3f3dd5402308a03cf88e120af4a6dc9b4" translate="yes" xml:space="preserve">
          <source>Use this directive to create a visual distinction for elements associated with an active route. For example, the following code highlights the word &quot;Bob&quot; when the the router activates the associated route:</source>
          <target state="translated">이 지시문을 사용하여 활성 경로와 관련된 요소에 대한 시각적 구분을 만듭니다. 예를 들어 다음 코드는 라우터가 관련 경로를 활성화 할 때 &quot;Bob&quot;이라는 단어를 강조 표시합니다.</target>
        </trans-unit>
        <trans-unit id="98648d6e7331cfddebf675e6e48d5ecfd58e4545" translate="yes" xml:space="preserve">
          <source>Use this directive to validate a sub-group of your form separately from the rest of your form, or if some values in your domain model make more sense to consume together in a nested object.</source>
          <target state="translated">이 지정 문을 사용하여 양식의 하위 그룹을 나머지 양식과 별도로 또는 도메인 모델의 일부 값이 중첩 된 오브젝트에서 함께 소비하는 것이 더 적합한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="c2f2d6d2eb1b9fd68f5d4923160640fa9a45cb27" translate="yes" xml:space="preserve">
          <source>Use this enum at bootstrap as an option of &lt;code&gt;bootstrapModule&lt;/code&gt; to define the strategy that the compiler should use in case of missing translations:</source>
          <target state="translated">의 옵션으로 부트 스트랩에서이 열거를 사용 &lt;code&gt;bootstrapModule&lt;/code&gt; 컴파일러 누락 된 번역의 경우에 사용해야하는 전략을 정의합니다 :</target>
        </trans-unit>
        <trans-unit id="f91861f9b1b35370d057dd7a059c665663e94008" translate="yes" xml:space="preserve">
          <source>Use this method to detect a change that Angular overlooked.</source>
          <target state="translated">이 방법을 사용하여 Angular가 간과 한 변경 사항을 감지하십시오.</target>
        </trans-unit>
        <trans-unit id="02a000c17e1eb4958b9423311364219b7482d859" translate="yes" xml:space="preserve">
          <source>Use this service to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use &lt;a href=&quot;renderer#setElementProperty&quot;&gt;setElementProperty&lt;/a&gt; or &lt;a href=&quot;renderer#setElementAttribute&quot;&gt;setElementAttribute&lt;/a&gt; respectively.</source>
          <target state="translated">이 서비스를 사용하여 Angular의 템플릿을 무시하고 선언적으로 표현할 수없는 사용자 정의 UI를 변경하십시오. 예를 들어 이름을 정적으로 알 수없는 속성 또는 속성을 설정해야하는 경우 각각 &lt;a href=&quot;renderer#setElementProperty&quot;&gt;setElementProperty&lt;/a&gt; 또는 &lt;a href=&quot;renderer#setElementAttribute&quot;&gt;setElementAttribute를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="51dda038803b68b227c51a7dd1d4b365f5cd7449" translate="yes" xml:space="preserve">
          <source>Use this technique to create a dependency object with a factory function whose inputs are a combination of &lt;em&gt;injected services&lt;/em&gt; and &lt;em&gt;local state&lt;/em&gt;.</source>
          <target state="translated">이 기술을 사용하여 입력이 &lt;em&gt;주입 된 서비스&lt;/em&gt; 와 &lt;em&gt;로컬 상태&lt;/em&gt; 의 조합 인 팩토리 함수로 종속성 오브젝트를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2f43a26151d902b04c11d0c3a3e3e04a2047274" translate="yes" xml:space="preserve">
          <source>Use this token at bootstrap to provide the content of your translation file (&lt;code&gt;xtb&lt;/code&gt;, &lt;code&gt;xlf&lt;/code&gt; or &lt;code&gt;xlf2&lt;/code&gt;) when you want to translate your application in another language.</source>
          <target state="translated">부트 스트랩에서이 토큰을 사용 하여 응용 프로그램을 다른 언어로 번역하려는 경우 번역 파일의 내용 ( &lt;code&gt;xtb&lt;/code&gt; , &lt;code&gt;xlf&lt;/code&gt; 또는 &lt;code&gt;xlf2&lt;/code&gt; )을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="094736eaeca16e2bc6a94afbc3cacd046430016c" translate="yes" xml:space="preserve">
          <source>Use to find one or more inner HTML elements within the current element.</source>
          <target state="translated">현재 요소에서 하나 이상의 내부 HTML 요소를 찾는 데 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ceb45b9a9a131e5ceaa63ef67912c840118032d7" translate="yes" xml:space="preserve">
          <source>Use to get the &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; of elements or directives from the content DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</source>
          <target state="translated">컨텐츠 DOM에서 요소 또는 지시문 의 &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; 를 가져 오는 데 사용합니다 . 자식 요소가 추가, 제거 또는 이동할 때마다 쿼리 목록이 업데이트되고 쿼리 목록에서 관찰 가능한 변경 사항이 새로운 값을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="aaf7d01d8950aef25f0bf03d88c14b898cbfd099" translate="yes" xml:space="preserve">
          <source>Use to get the &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; of elements or directives from the view DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</source>
          <target state="translated">뷰 DOM에서 요소 또는 지시문 의 &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; 를 가져 오는 데 사용합니다 . 자식 요소가 추가, 제거 또는 이동할 때마다 쿼리 목록이 업데이트되고 쿼리 목록에서 관찰 가능한 변경 사항이 새로운 값을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="51523185d9e70bc9258966c8eac5f9f38fa211f8" translate="yes" xml:space="preserve">
          <source>Use to get the first element or the directive matching the selector from the content DOM. If the content DOM changes, and a new child matches the selector, the property will be updated.</source>
          <target state="translated">컨텐츠 DOM에서 선택기와 일치하는 첫 번째 요소 또는 지시문을 가져 오는 데 사용하십시오. 컨텐츠 DOM이 변경되고 새 자식이 선택자와 일치하면 속성이 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="a87e5cd79cc9d650614c0174e0c297ada3478f25" translate="yes" xml:space="preserve">
          <source>Use to store arbitrary developer-defined data on a renderer instance, as an object containing key-value pairs. This is useful for renderers that delegate to other renderers.</source>
          <target state="translated">키-값 쌍을 포함하는 객체로 렌더러 인스턴스에 임의의 개발자 정의 데이터를 저장하는 데 사용합니다. 다른 렌더러에게 위임하는 렌더러에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="e25c946e66827dc805dd24ff51d8ae7f98f6815b" translate="yes" xml:space="preserve">
          <source>Use with animations test-only mode. Notifies the test when rendering has completed.</source>
          <target state="translated">애니메이션 테스트 전용 모드와 함께 사용하십시오. 렌더링이 완료되면 테스트에 알립니다.</target>
        </trans-unit>
        <trans-unit id="eca7e21232f973eab61af44da3d689a26c0f17dc" translate="yes" xml:space="preserve">
          <source>Use with caution</source>
          <target state="translated">주의해서 사용하십시오</target>
        </trans-unit>
        <trans-unit id="ef1c61aa074b0daa2467d00ee7659dad5f0b62ee" translate="yes" xml:space="preserve">
          <source>Use with ngModel</source>
          <target state="translated">ngModel과 함께 사용</target>
        </trans-unit>
        <trans-unit id="8c1b755d83aa0e3840c5adb2e2de9bdb212207ba" translate="yes" xml:space="preserve">
          <source>Use with ngModel is deprecated</source>
          <target state="translated">ngModel과 함께 사용은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bddb8fbb30136aa27bb73ecdceb87cca98f6bcc9" translate="yes" xml:space="preserve">
          <source>Use with the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; call. Instead of applying animations from the current state to the destination state, keyframes describe how each style entry is applied and at what point within the animation arc. Compare &lt;a href=&quot;https://www.w3schools.com/css/css3_animations.asp&quot;&gt;CSS Keyframe Animations&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 호출 과 함께 사용하십시오 . 키 프레임은 현재 상태에서 대상 상태로 애니메이션을 적용하는 대신 각 스타일 항목이 적용되는 방법과 애니메이션 원호의 어느 지점에 설명합니다. &lt;a href=&quot;https://www.w3schools.com/css/css3_animations.asp&quot;&gt;CSS 키 프레임 애니메이션을&lt;/a&gt; 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="6d45dfd3ff2a81b444a5dc591b91dc8c66653e7e" translate="yes" xml:space="preserve">
          <source>Use within an animation &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; call to issue a timing gap after each queried item is animated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 된 각 항목이 애니메이션 된 후 애니메이션 쿼리 () 호출 내에서 사용 하여 타이밍 간격을 발행합니다.</target>
        </trans-unit>
        <trans-unit id="652f99cdce6039c1c4c392a599facc0ac9d2adbf" translate="yes" xml:space="preserve">
          <source>Use within an animation &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; call to issue a timing gap after each queried item is animated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 된 각 항목이 애니메이션 된 후 애니메이션 쿼리 () 호출 내에서 사용 하여 타이밍 간격을 발행합니다.</target>
        </trans-unit>
        <trans-unit id="b8859d06d9af44888d766f829a446792669e41bf" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; to associate custom rendering data and styles with a rendering implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; 에서 사용자 정의 렌더링 데이터 및 스타일을 렌더링 구현과 연관시키는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="94c0582398c2c0bb749ac544039ffb4bb01b9afa" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="60c65c08999202c9b804c2bf81c87ddaf0860f85" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; to associate custom rendering data and styles with a rendering implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; 에서 사용자 정의 렌더링 데이터 및 스타일을 렌더링 구현과 연관시키는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6f7d0b82c6afb0f2e3b4d749e7cc7ac4a4f630d9" translate="yes" xml:space="preserve">
          <source>Used only in debug mode to serialize property changes to dom nodes as attributes.</source>
          <target state="translated">속성 변경 사항을 속성으로 dom 노드에 직렬화하기 위해 디버그 모드에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7005a105d0d69ea62d874ba99e5723ee092e0f01" translate="yes" xml:space="preserve">
          <source>Used only in generated code. No source code should depend on this API.</source>
          <target state="translated">생성 된 코드에서만 사용됩니다. 소스 코드는이 API에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="14a1cad3d2bd65cf489b11e28cb9d774f23a3e7d" translate="yes" xml:space="preserve">
          <source>Used to load ng module factories.</source>
          <target state="translated">모듈 팩토리를로드하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f3e8b3ef8c7b0f5735596a0cecd6a98afb2da940" translate="yes" xml:space="preserve">
          <source>Used to mark Async start. Async are similar to scope but they don't have to be strictly nested. The return value is used in the call to [endAsync]. Async ranges only work if WTF has been enabled.</source>
          <target state="translated">비동기 시작을 표시하는 데 사용됩니다. 비동기는 범위와 비슷하지만 엄격하게 중첩 될 필요는 없습니다. 반환 값은 [endAsync] 호출에 사용됩니다. 비동기 범위는 WTF가 활성화 된 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="599d8de2a24b2f250ae7926588cacd259bc9a982" translate="yes" xml:space="preserve">
          <source>Used to mark end of Scope.</source>
          <target state="translated">범위 끝을 표시하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e2c9ab424d315bb61a8d13d1e6541ce25bacbe35" translate="yes" xml:space="preserve">
          <source>Used to mark scope entry. The return value is used to leave the scope.</source>
          <target state="translated">범위 항목을 표시하는 데 사용됩니다. 반환 값은 범위를 벗어나는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b3503a2162dbb4997a5439b46fb2c2bf5478d21a" translate="yes" xml:space="preserve">
          <source>Used to provide a &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for form controls.</source>
          <target state="translated">양식 컨트롤에 &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 를 제공하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6e34138b486124e172c27967e95851b105c53c11" translate="yes" xml:space="preserve">
          <source>Used to provide a &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for form controls.</source>
          <target state="translated">양식 컨트롤에 &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 를 제공하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="1c9a0ff249b4ff0367c0e831859d912df5989e4a" translate="yes" xml:space="preserve">
          <source>Used when AngularJS is loaded lazily, and not available on &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">AngularJS가 느리게로드되고 &lt;code&gt;window&lt;/code&gt; 에서 사용할 수 없을 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="ede0702dd96ed53a5f498ecc6f5164f5530e76b2" translate="yes" xml:space="preserve">
          <source>Used with deprecated SystemJsNgModuleLoader.</source>
          <target state="translated">더 이상 사용되지 않는 SystemJsNgModuleLoader와 함께 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8fcc9eb0d01cd2af8a401bb5fbad0ceddd4ebbd6" translate="yes" xml:space="preserve">
          <source>Useful tools and tips for Angular.</source>
          <target state="translated">Angular에 유용한 도구 및 팁.</target>
        </trans-unit>
        <trans-unit id="0b75d4ee12567b39421e5cdafacb9fdac3567042" translate="yes" xml:space="preserve">
          <source>User Input</source>
          <target state="translated">사용자 입력</target>
        </trans-unit>
        <trans-unit id="602a8dcdba61fe963a2ee0eabfa7c6c12caef58a" translate="yes" xml:space="preserve">
          <source>User actions such as clicking a link, pushing a button, and entering text raise DOM events. This page explains how to bind those events to component event handlers using the Angular event binding syntax.</source>
          <target state="translated">링크 클릭, 버튼 누르기 및 텍스트 입력과 같은 사용자 작업은 DOM 이벤트를 발생시킵니다. 이 페이지에서는 Angular 이벤트 바인딩 구문을 사용하여 해당 이벤트를 구성 요소 이벤트 핸들러에 바인딩하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="058b267dc9414eb566cadb188507382a9127c368" translate="yes" xml:space="preserve">
          <source>User events other than &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; clicks aren't supported. You must wait for the full client app to bootstrap and run, or buffer the events using libraries like &lt;a href=&quot;https://github.com/angular/preboot&quot;&gt;preboot&lt;/a&gt;, which allow you to replay these events once the client-side scripts load.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 클릭 이외의 사용자 이벤트 는 지원되지 않습니다. 클라이언트 측 스크립트가로드되면 이러한 이벤트를 재생할 수있는 &lt;a href=&quot;https://github.com/angular/preboot&quot;&gt;preboot&lt;/a&gt; 와 같은 라이브러리를 사용하여 전체 클라이언트 앱이 부트 스트랩 및 실행을 기다리거나 이벤트를 버퍼링해야합니다 .</target>
        </trans-unit>
        <trans-unit id="09099af5b046928eebce82ffe20cae42387454fa" translate="yes" xml:space="preserve">
          <source>User input</source>
          <target state="translated">사용자 입력</target>
        </trans-unit>
        <trans-unit id="5141e17357a02f63be66086ece12a9f2d302df1e" translate="yes" xml:space="preserve">
          <source>Users can add, edit, and delete heroes and save these changes over HTTP.</source>
          <target state="translated">사용자는 영웅을 추가, 편집 및 삭제하고 HTTP를 통해 이러한 변경 사항을 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffb71aafecac3c94302931b31f63e1168c9b1166" translate="yes" xml:space="preserve">
          <source>Users can click on a product name from the list to see details in a new view, with a distinct URL (route)</source>
          <target state="translated">사용자는 목록에서 제품 이름을 클릭하여 고유 한 URL (경로)을 사용하여 새보기에서 세부 사항을 볼 수 있습니다</target>
        </trans-unit>
        <trans-unit id="9915fd34b105ae0d8f9b856eaf8cca5ea09bd3cd" translate="yes" xml:space="preserve">
          <source>Users can click on a product name from the list to see details in a new view, with a distinct URL/route.</source>
          <target state="translated">사용자는 목록에서 제품 이름을 클릭하여 고유 한 URL / 경로를 사용하여 새보기에서 세부 정보를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6701a88f4173410a6b0358f016f5ca47cd5c83bc" translate="yes" xml:space="preserve">
          <source>Users can opt in to share their Angular CLI usage data with &lt;a href=&quot;https://support.google.com/analytics/answer/1008015?hl=en&quot;&gt;Google Analytics&lt;/a&gt;, using the &lt;a href=&quot;https://angular.io/cli/analytics&quot;&gt;&lt;code&gt;ng analytics&lt;/code&gt; CLI command&lt;/a&gt;. The data is also shared with the Angular team, and used to improve the CLI.</source>
          <target state="translated">사용자는 &lt;a href=&quot;https://angular.io/cli/analytics&quot;&gt; &lt;code&gt;ng analytics&lt;/code&gt; &lt;/a&gt; CLI 명령을 사용하여 Angular CLI 사용 데이터를 &lt;a href=&quot;https://support.google.com/analytics/answer/1008015?hl=en&quot;&gt;Google Analytics&lt;/a&gt; 와 공유하도록 선택할 수 있습니다 . 데이터는 Angular 팀과 공유되며 CLI를 개선하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9f300cd0d7b9a4b1286d7eb15eb10210c5e6bec6" translate="yes" xml:space="preserve">
          <source>Users can search for heroes by name.</source>
          <target state="translated">사용자는 이름으로 영웅을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e75567a342e40c9e2e644d8dc12675b4ec829db5" translate="yes" xml:space="preserve">
          <source>Users should be able to edit the hero name in an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; textbox.</source>
          <target state="translated">사용자는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 텍스트 상자 에서 영웅 이름을 편집 할 수 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="7b3840d786e1f73b113066b49ab864de5ce34535" translate="yes" xml:space="preserve">
          <source>Users that visit your URL will see a development server start up, and then your application will load.</source>
          <target state="translated">URL을 방문하는 사용자에게는 개발 서버가 시작된 다음 응용 프로그램이로드됩니다.</target>
        </trans-unit>
        <trans-unit id="39302b04bcbaac9bc8c1d2667096f87cf5896e04" translate="yes" xml:space="preserve">
          <source>Users update crisis information in the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. Unlike the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, the user changes do not update the crisis entity immediately. Instead, the app updates the entity when the user presses the &lt;em&gt;Save&lt;/em&gt; button and discards the changes when the user presses the &lt;em&gt;Cancel&lt;/em&gt; button.</source>
          <target state="translated">사용자는 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 에서 위기 정보를 업데이트합니다 . &lt;code&gt;HeroDetailComponent&lt;/code&gt; 와 달리 사용자 변경 사항은 위기 엔티티를 즉시 업데이트하지 않습니다. 대신 사용자가 &lt;em&gt;저장&lt;/em&gt; 버튼을 누르면 앱이 엔티티를 업데이트 하고 사용자가 &lt;em&gt;취소&lt;/em&gt; 버튼을 누르면 변경 사항을 버립니다 .</target>
        </trans-unit>
        <trans-unit id="dd82ca7bb177e279e2683ea7fbe64334d04efc2f" translate="yes" xml:space="preserve">
          <source>Users update crisis information in the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. Unlike the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, the user changes do not update the crisis entity immediately. Instead, the app updates the entity when the user presses the Save button and discards the changes when the user presses the Cancel button.</source>
          <target state="translated">사용자는 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 에서 위기 정보를 업데이트합니다 . &lt;code&gt;HeroDetailComponent&lt;/code&gt; 와 달리 사용자 변경은 위기 엔터티를 즉시 업데이트하지 않습니다. 대신 사용자가 저장 버튼을 누르면 앱이 엔티티를 업데이트하고 사용자가 취소 버튼을 누르면 변경 사항을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="7e5352cba15d17c20f0a63d91386ede57619fc48" translate="yes" xml:space="preserve">
          <source>Users want to see the heroes in alphabetical order. Rather than modify the original component, sub-class it and create a &lt;code&gt;SortedHeroesComponent&lt;/code&gt; that sorts the heroes before presenting them. The &lt;code&gt;SortedHeroesComponent&lt;/code&gt; lets the base class fetch the heroes.</source>
          <target state="translated">사용자는 영웅을 알파벳 순서로보고 싶어합니다. 원래 구성 요소를 수정하는 대신 하위 클래스로 분류하고 영웅을 제시하기 전에 정렬 하는 &lt;code&gt;SortedHeroesComponent&lt;/code&gt; 를 만듭니다 . &lt;code&gt;SortedHeroesComponent&lt;/code&gt; 는 기본 클래스는 영웅을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2f8c815cbd3d0f6b995bdfc4167eccf93e89835" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to determine which child view is entering and which is leaving the host view.</source>
          <target state="translated">용도는 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 아이 뷰가 입력되고 호스트 뷰를 떠나하는 결정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31aea878b7cc6457d61c00c1a42726ffdd26bdea" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; function to make the inner animations run in parallel.</source>
          <target state="translated">용도 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 내 애니메이션을 병렬로 실행할 수 있도록 기능한다.</target>
        </trans-unit>
        <trans-unit id="eb3f711d4d463174e45d6d4d25298cf04c07c73e" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;XMLHttpRequest&lt;/code&gt; to send requests to a backend server.</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; 를 사용 하여 백엔드 서버로 요청을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="c06c023d5ad6ceae75abc64c08a60416cf72fe50" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;group()&lt;/code&gt; function to make the inner animations run in parallel.</source>
          <target state="translated">용도 &lt;code&gt;group()&lt;/code&gt; 내 애니메이션을 병렬로 실행할 수 있도록 기능한다.</target>
        </trans-unit>
        <trans-unit id="fb544a35f46de4fa74e1a77fac25ace9926dc2ca" translate="yes" xml:space="preserve">
          <source>Uses the cart service's &lt;code&gt;#addToCart()&lt;/code&gt; method to add the product to the cart</source>
          <target state="translated">장바구니 서비스의 &lt;code&gt;#addToCart()&lt;/code&gt; 메소드를 사용하여 장바구니 에 제품을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="d2251c5dbaa5b5863575212dbae0fac395c8eebf" translate="yes" xml:space="preserve">
          <source>Uses the cart service's &lt;code&gt;addToCart()&lt;/code&gt; method to add the product the cart.</source>
          <target state="translated">카트 서비스의 &lt;code&gt;addToCart()&lt;/code&gt; 메서드를 사용하여 제품을 카트에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="26498e934159fe90edddba43e16fe5686239bbb3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;&lt;/a&gt; to group elements when there is no suitable host element for the directive.</source>
          <target state="translated">지시문에 적합한 호스트 요소가없는 경우 &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; &lt;/a&gt; 를 사용하여 요소를 그룹화하십시오.</target>
        </trans-unit>
        <trans-unit id="dafc513bc116615d9bcd01ae37d00fbc6d71e7be" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; allows the TypeScript compiler to infer that the &lt;code&gt;person&lt;/code&gt; used in the binding expression will never be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 는 것을 추론에 타이프 스크립트 컴파일러 수 있습니다 &lt;code&gt;person&lt;/code&gt; 바인딩 식 사용은 않을 것입니다 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2079239a97ead0b33bc251fc5c650a30d5b63e76" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="a1906205d52b88b6a96e74121a3dd7e6924f2137" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; with template variables</source>
          <target state="translated">템플릿 변수와 함께 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="009d6972085fee6a31f1c55238d2601d61726d62" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; in a form gives you more than just two-way data binding. It also tells you if the user touched the control, if the value changed, or if the value became invalid.</source>
          <target state="translated">양식에서 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 사용하면 양방향 데이터 바인딩 이상의 기능이 제공됩니다. 또한 사용자가 컨트롤을 터치했는지, 값이 변경되었는지 또는 값이 유효하지 않은지 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="ecb3202cb740968562d3700dc9265b6286e554ac" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b80bc244560b6471b5ebc73479dd0654103c5a79" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is a good option for hybrid apps when you want to keep the AngularJS and Angular parts less coupled. You can still mix and match components and services from both frameworks, but you might need to manually propagate change detection. In return, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; offers more control and better performance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 사용 하면 AngularJS와 Angular 부품의 결합을 줄이려는 하이브리드 앱에 적합한 옵션입니다. 두 프레임 워크에서 구성 요소와 서비스를 혼합하여 사용할 수 있지만 변경 감지를 수동으로 전파해야 할 수도 있습니다. 그에 따라 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 은 더 많은 제어와 더 나은 성능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2d82708ea292a262e61f2d5f8621ff178f8d5983" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; together</source>
          <target state="translated">사용 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 함께</target>
        </trans-unit>
        <trans-unit id="055d132f35168e249d6c060c65dea4376f8745af" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;providedIn&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;providedIn&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="6804585becce9a56b0b6866a6f53fbbbc7e22fcc" translate="yes" xml:space="preserve">
          <source>Using AfterContent hooks</source>
          <target state="translated">AfterContent 후크 사용</target>
        </trans-unit>
        <trans-unit id="74169e90061ae53df7dfd46eec63ac28d5d94ef4" translate="yes" xml:space="preserve">
          <source>Using Ahead-of-time compilation with hybrid apps</source>
          <target state="translated">하이브리드 앱에서 Ahead-of-time 컴파일 사용</target>
        </trans-unit>
        <trans-unit id="0f882c8db368aa93dcfdc9565b2fe479a0f65394" translate="yes" xml:space="preserve">
          <source>Using Angular Components from AngularJS Code</source>
          <target state="translated">AngularJS 코드에서 각도 구성 요소 사용</target>
        </trans-unit>
        <trans-unit id="538fdb75e4407ef4e1f9fd247aecd6cb930a0109" translate="yes" xml:space="preserve">
          <source>Using Angular routes in a single-page application</source>
          <target state="translated">단일 페이지 애플리케이션에서 Angular 경로 사용</target>
        </trans-unit>
        <trans-unit id="23d76136981acebe9548a54e9f89615171752fe2" translate="yes" xml:space="preserve">
          <source>Using Angular with Visual Studio 2015</source>
          <target state="translated">Visual Studio 2015에서 Angular 사용</target>
        </trans-unit>
        <trans-unit id="17c25861439c77e4c24ac7b18b709a16ebcd8414" translate="yes" xml:space="preserve">
          <source>Using AngularJS Component Directives from Angular Code</source>
          <target state="translated">각도 코드에서 AngularJS 구성 요소 지시문 사용</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
