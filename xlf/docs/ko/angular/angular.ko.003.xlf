<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="e0c01ac73caacc1886db45b8b819361cf42a9fc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a nested group&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;중첩 된 그룹 만들기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac00e428f072bd36633594b46edcf64c28c1666e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt;: Use &lt;code&gt;queryParamsHandling: &quot;preserve&quot;&lt;/code&gt; instead to preserve query parameters for the next navigation.</source>
          <target state="translated">&lt;strong&gt;더 이상&lt;/strong&gt; 사용되지 &lt;code&gt;queryParamsHandling: &quot;preserve&quot;&lt;/code&gt; 다음 탐색을 위해 쿼리 매개 변수를 유지 하려면 queryParamsHandling : &quot;preserve&quot; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="08eec026d337b1bf8558f293be8118ccaf49af79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DISABLED&lt;/strong&gt;: This control is exempt from validation checks.</source>
          <target state="translated">&lt;strong&gt;DISABLED&lt;/strong&gt; :이 컨트롤은 유효성 검사가 면제됩니다.</target>
        </trans-unit>
        <trans-unit id="083896d6fad806eada6448347f24470017fcc823" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data request&lt;/strong&gt;: request URL that begins &lt;code&gt;/api&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;데이터 요청&lt;/strong&gt; : &lt;code&gt;/api&lt;/code&gt; 로 시작하는 요청 URL .</target>
        </trans-unit>
        <trans-unit id="091d76a7360a830e54feea860f18ff4abd95272f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Declaration syntax&lt;/strong&gt;: It's important to follow the route declaration syntax &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; to allow &lt;code&gt;ngc&lt;/code&gt; to discover the lazy-loaded module and the associated &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. You can find the complete list of allowed syntax constructs &lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;here&lt;/a&gt;. These restrictions will be relaxed with the release of Ivy since it'll no longer use &lt;code&gt;NgFactories&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;선언 구문&lt;/strong&gt; : 그것은 경로 선언 구문 따르는 것이 중요 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; 수 있도록 &lt;code&gt;ngc&lt;/code&gt; 게으른로드 된 모듈과 관련된 발견 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 을 . 허용 된 구문 구문의 전체 목록은 &lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;여기에서&lt;/a&gt; 찾을 수 있습니다 . 더 이상 &lt;code&gt;NgFactories&lt;/code&gt; 를 사용하지 않기 때문에 이러한 제한은 Ivy 릴리스와 함께 완화됩니다 .</target>
        </trans-unit>
        <trans-unit id="a4ddafb3b2487eab805488a860bd8b25b5f90e98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Declaration syntax&lt;/strong&gt;: It's important to follow the route declaration syntax &lt;code&gt;loadChildren: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; to allow &lt;code&gt;ngc&lt;/code&gt; to discover the lazy-loaded module and the associated &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. You can find the complete list of allowed syntax constructs &lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;here&lt;/a&gt;. These restrictions will be relaxed with the release of Ivy since it'll no longer use &lt;code&gt;NgFactories&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;선언 구문&lt;/strong&gt; : 그것은 경로 선언 구문 따르는 것이 중요 &lt;code&gt;loadChildren: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; 수 있도록 &lt;code&gt;ngc&lt;/code&gt; 게으른로드 된 모듈과 관련된 발견 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 을 . &lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;여기&lt;/a&gt; 에서 허용되는 구문 구성의 전체 목록을 찾을 수 있습니다 . Ivy가 더 이상 &lt;code&gt;NgFactories&lt;/code&gt; 를 사용하지 않기 때문에 이러한 제한은 Ivy 출시와 함께 완화 될 것 입니다.</target>
        </trans-unit>
        <trans-unit id="e08a1864513ad17ff1e02ee4250dd6ba4a5f1dea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Define a FormArray control&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormArray 컨트롤 정의&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f2d372b8be67dc4125fd758497e5bdcb4514fcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; 'SystemJsNgModuleLoader' is deprecated, and this is part of its usage. Use 'import()' syntax instead.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 :&lt;/strong&gt; 'SystemJsNgModuleLoader'는 더 이상 사용되지 않으며 이는 사용의 일부입니다. 대신 'import ()'구문을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="37acc96ef7149015893622f741759188373e05e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since v5. Use &lt;code&gt;&lt;a href=&quot;static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; instead, which also supports &lt;a href=&quot;../../guide/aot-compiler&quot;&gt;Ahead-of-Time compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v5부터 더 이상 사용되지 않습니다. &lt;a href=&quot;../../guide/aot-compiler&quot;&gt;Ahead-of-Time 컴파일&lt;/a&gt; 도 지원하는 &lt;code&gt;&lt;a href=&quot;static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 을 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d4b4254c42c47aa78347eb6f65fba5443ee7b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since v5. Use &lt;code&gt;&lt;a href=&quot;upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; instead, which also supports &lt;a href=&quot;../guide/aot-compiler&quot;&gt;Ahead-of-Time compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v5부터 더 이상 사용되지 않습니다. &lt;a href=&quot;../guide/aot-compiler&quot;&gt;Ahead-of-Time 컴파일&lt;/a&gt; 도 지원하는 &lt;code&gt;&lt;a href=&quot;upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 을 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="58437f0c7a32c9615ebe367a3c355d86169b894b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since version 11.0. No longer required to disable CSS extraction for HMR.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 버전 11.0부터 사용되지 않습니다. 더 이상 HMR에 대한 CSS 추출을 비활성화 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="1ec7dee0c924a12f7ff6dcaa892b9d6562479590" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; No longer has an effect.</source>
          <target state="translated">&lt;strong&gt;사용되지 않음 :&lt;/strong&gt; 더 이상 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="237fcba7286454f7f53e6f8e698891316f1b4be9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; No longer needed as the format will be determined automatically.</source>
          <target state="translated">&lt;strong&gt;지원 중단 :&lt;/strong&gt; 형식이 자동으로 결정되므로 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="925908e29eee06ea6b1741f8241acf7ccfbd338d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; No replacement</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 교체하지 않음</target>
        </trans-unit>
        <trans-unit id="7c546b5482233a467aaed30da70f3a8b63827c7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Since 9.0.0. With Ivy, this property is no longer necessary.</source>
          <target state="translated">&lt;strong&gt;지원 중단 :&lt;/strong&gt; 9.0.0부터. Ivy에서는이 속성이 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bc65e52dcd7199859a3b65305d3b2d02d941e152" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Since version 9.0.0 with Ivy, entryComponents is no longer necessary.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 &lt;strong&gt;사용되지 않음 :&lt;/strong&gt; Ivy가 포함 된 버전 9.0.0부터 entryComponents가 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b367cccbf1e09c3b7bce2ac47695e9d4dc39eff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated in favor of the &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; function which uses the ES dynamic &lt;code&gt;import()&lt;/code&gt; expression. This offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 :&lt;/strong&gt; ES 동적 &lt;code&gt;import()&lt;/code&gt; 표현식 을 사용하는 &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; 함수 대신 &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 이 더 이상 사용되지 않습니다 . 이는 런타임에 ES 모듈을 동적으로로드하는보다 자연스럽고 표준 기반 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4bafcd07b9102c993074eff8bc3b23eed91b9dcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated in favor of the &lt;code&gt;&lt;a href=&quot;router/loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; function which uses the ES dynamic &lt;code&gt;import()&lt;/code&gt; expression. This offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 :&lt;/strong&gt; ES 동적 &lt;code&gt;import()&lt;/code&gt; 표현식 을 사용하는 &lt;code&gt;&lt;a href=&quot;router/loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; 함수 대신 &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 이 더 이상 사용되지 않습니다 . 이는 런타임에 ES 모듈을 동적으로로드하는보다 자연스럽고 표준 기반 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="055b744590c12172216b33ec47b42a63844460f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; This will be determined from the list of supported browsers specified in the 'browserslist' file.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 'browserslist'파일에 지정된 지원되는 브라우저 목록에서 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="a63dda9f368c88ef2fff245cb161403739426aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;NG_BUILD_PROFILING&quot; environment variable instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 &quot;NG_BUILD_PROFILING&quot;환경 변수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="79863918cb6736bb85a9c7aa01746ebfcab22473" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;ng lint --fix&quot; directly instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 &quot;ng lint --fix&quot;를 직접 사용하세요.</target>
        </trans-unit>
        <trans-unit id="c18146bb864bb1dbf3954c121c2e2146621b2b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;skipTests&quot; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 &quot;skipTests&quot;를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="66e19436326424896d1bed787c27b394d738df7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;style&quot; instead.</source>
          <target state="translated">&lt;strong&gt;사용되지 않음 :&lt;/strong&gt; 대신 &quot;style&quot;을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="235645297b66848d5f3d56aeedfc2fce025f2a77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'format' option instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 '형식'옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="292744433bda85c52572ca69fd14429f11eb27e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'i18n' project level sub-option 'sourceLocale' instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 'i18n'프로젝트 수준 하위 옵션 'sourceLocale'을 사용하세요.</target>
        </trans-unit>
        <trans-unit id="570fee2dec045b864a46bcef60c28888fee2f67c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'locales' object in the project metadata instead.</source>
          <target state="translated">&lt;strong&gt;지원 중단됨 :&lt;/strong&gt; 대신 프로젝트 메타 데이터에서 'locales'개체를 사용하세요.</target>
        </trans-unit>
        <trans-unit id="83cca91b5f385b167c5a1aa9928d9c46fd0b9679" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'localize' instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 'localize'를 사용하세요.</target>
        </trans-unit>
        <trans-unit id="507192ba6170d6bcd2a4ed7f46d17aa201bf0d81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; 를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d8389585613c09c90d8257d4b7b4a67921be42ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;core/renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;core/renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; 를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8726733bf1271b934c806c58289c37fdffbc5eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7600dac2d80ec1e13a4db993717a94c16d88aea7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; 를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="3151ef25a5cdd2ad83ba9f4d2625c2f7b1fb77e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; 를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="65e5d991ddb21f4ff9912354e05cb597716afbc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b27f889df31aaa0e329ccce7ac8d5b515c1bed8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;static/getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 &lt;code&gt;&lt;a href=&quot;static/getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="81b8b330a2f0d3d8717253f43f5789f21374f68e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;static/setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 &lt;code&gt;&lt;a href=&quot;static/setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d36185e5d47e9acc688480cafb5a1147ca057fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;aot&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;aot&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e7dd8f0137b6adb9e6afd60c5115cbb76e84d6a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;baseHref&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;baseHref&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bf41d0b66bc1cfe09e3a797f7a6ce54259b25dd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;commonChunk&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;commonChunk&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e121e1d932c7f49b989311bc1c0df90b48f1f5d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;deployUrl&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;deployUrl&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a1fe7b0f8fb86e681da1624c976d2a19f27c8168" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;optimization&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;최적화&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="252dd704f6e641a65e4577e82f16a747c5a29268" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;progress&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;진행&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="02081a5ad1ecc03f12079613969dec1830126e47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;sourceMap&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;sourceMap&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0505d731012f84abff066a4e3bbddb04b717a644" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;vendorChunk&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; 대신 브라우저 빌더에서 &quot;vendorChunk&quot;옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="68dc4f474fa2f8e171e4994ec68d005eb57ccfa5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; 를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8dcbdcbdc91a1c7c89aee2baf83673a141927cf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; 를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="42fc55fd12147abc3375b4e99dfc0d2e47cafbac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; all exports of this entry point are deprecated.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 :&lt;/strong&gt; 이 진입 점의 모든 내보내기가 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9dd5753d046df275e32891f6bce86ec5baae5a64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v10 stop using. (No replacement, deemed unnecessary.)</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v10부터 사용 중지. (불필요한 것으로 간주되는 교체 없음.)</target>
        </trans-unit>
        <trans-unit id="39b5621a21621d0cebccef1406b2807f1f105da0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v5</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v5에서</target>
        </trans-unit>
        <trans-unit id="5de335e0f96c2b03317487d21a7fbb0026581bca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v5 - slow and brings in a lot of code, Use &lt;code&gt;Injector.create&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v5부터-느리고 많은 코드를 가져옵니다 . 대신 &lt;code&gt;Injector.create&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="714378cbbe026cb8498d550e875517d6d3c88f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; in Angular v6 and will be removed in Angular v9.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; Angular v6에서는 Angular v9에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="64d8aec8e2cb976e2adc6925069eaea4b2c0895a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; in v8, delete after v10. This API should be used only be generated code, and that code should now use ɵɵdefineInjectable instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v8에서는 v10 이후에 삭제하십시오. 이 API는 생성 된 코드 만 사용해야하며 해당 코드는 이제 ɵɵdefineInjectable을 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="3d2693e8709789eb21839270cd28f719582d31b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; platform-webworker is deprecated in Angular and will be removed in version 10</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 :&lt;/strong&gt; platform-webworker는 Angular에서 더 이상 사용되지 않으며 버전 10에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="f07546a2348e6b295898cbaa0322b3fb310e3d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2c193197c73a206e68c94449c1f2bb78a70fb157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="de8279388462f6f7ebfde5dd634d5703214cce70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8dc8e6700b79e4b74ede97c2acd1e560680178da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated in favor of the proposed ES dynamic &lt;code&gt;import()&lt;/code&gt; expression, which offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식은 제안 된 ES dynamic &lt;code&gt;import()&lt;/code&gt; 표현식 을 위해 사용되지 않으며 런타임에 ES 모듈을 동적으로로드하는보다 자연스럽고 표준 기반의 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5943c4ea89a53aefb708387c97aad12937f2ff21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated in favor of the proposed ES dynamic &lt;code&gt;import()&lt;/code&gt; expression, which offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식은 제안 된 ES dynamic &lt;code&gt;import()&lt;/code&gt; 표현식 을 위해 사용되지 않으며 런타임에 ES 모듈을 동적으로로드하는보다 자연스럽고 표준 기반의 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="81681f4dcbfb6770c53a31c6d928d944d20c6253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e8c995cc6b5b17eb7ebd3e27c35934db0107fc65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="873ff8967ff9d397276f3e98e6619d29bd23ca29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9f50b6b8a7bb90d87da4a47e6f72d0e9ff80b29a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; 가 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="11e39c20f48863dfab988889b74920f2ddc27662" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;사용되지 않음 : &lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 이 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; 가 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="84570c9c45665a858561e92aa28f0af1913f4e0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5075a7eacefa154459eeb9cff268cbaf4b768753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; 가 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8d3292cb4a773f93a7456116422f78a6cd47af09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;사용되지 않음 : &lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 이 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; 가 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7644da737215cae5ea50b5d936807d92d8145b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않음 : &lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; 의 &lt;code&gt;string&lt;/code&gt; 형식 은 더 이상 사용되지 않으며 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; 는 구현의 일부입니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2407d5fe7ac13c5cc040854bd720396db1391041" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the Web Tracing Framework is no longer supported in Angular</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 &lt;strong&gt;사용되지 않음 :&lt;/strong&gt; 웹 추적 프레임 워크가 더 이상 Angular에서 지원되지 않습니다</target>
        </trans-unit>
        <trans-unit id="dfec05844f7fb08c3a0b3ea54156ac2585631aee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;&lt;a href=&quot;testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;, (expected removal in v12)</source>
          <target state="translated">&lt;strong&gt;지원 중단됨 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 사용 ( v12에서 제거 예정)</target>
        </trans-unit>
        <trans-unit id="7b02b0beebfbbcf7ed12a43495fd9d7256f7623e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;, (expected removal in v12)</source>
          <target state="translated">&lt;strong&gt;지원 중단됨 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 사용 ( v12에서 제거 예정)</target>
        </trans-unit>
        <trans-unit id="a170c8493a393e1a6491d43d6a70b59388a153e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; v4.0.0 - Should not be part of public API.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v4.0.0-공용 API의 일부가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="6938bb41cd33b5fe739c64f36738c5ddfbcccb7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; v4.0.0 - Use IterableChangeRecord instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 :&lt;/strong&gt; v4.0.0-대신 IterableChangeRecord를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b4a2d9d7036ccea7bde0ff0c57610643265b9bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35a0a9f9f1b99f34042e07869a539e2e61795ac9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 을 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e891144428fcc23c855970e639d89788b9be4a8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음 &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 을 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b733cd37134a6600d34fbded83ae0d2c8bda6c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v4.0.0 use Type</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;v4.0.0에서 사용 &lt;strong&gt;되지 않음&lt;/strong&gt; 사용 유형</target>
        </trans-unit>
        <trans-unit id="2b7884c01f5310ada144bb105a9e85eb66c26786" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v5 use the new signature Injector.create(options)</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;v5에서 더 이상 사용 &lt;strong&gt;되지&lt;/strong&gt; 않으므로 새로운 서명 인젝터를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c2cfaf298ecb277b731ae6b17ef1fbe104888611" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v9.0.0 use TestBed.inject</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;v9.0.0에서 더 이상 사용 &lt;strong&gt;되지 않음&lt;/strong&gt; TestBed.inject 사용</target>
        </trans-unit>
        <trans-unit id="6d2dec88f3a4c9ce3fef60b256b2e921ddb9bebe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; pending requests are now tracked with zones</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않는&lt;/strong&gt; 보류중인 요청이 영역으로 추적됩니다.</target>
        </trans-unit>
        <trans-unit id="6f0b0e0b151b9e709dfb47c7aa030e85bb10ded7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; pending requests are now tracked with zones.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않는&lt;/strong&gt; 보류중인 요청이 영역과 함께 추적됩니다.</target>
        </trans-unit>
        <trans-unit id="1b8bfe60f6374240970e3cfa55d7d3d5565a9b90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; platform-webworker is deprecated in Angular and will be removed in version 10</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않는&lt;/strong&gt; platform-webworker는 Angular에서 더 이상 사용되지 않으며 버전 10에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="e45e0e7df40e753d21891233da9ca5086932ed9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; use &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;, (expected removal in v12)</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않는 &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 사용 ( v12에서 제거 예정)</target>
        </trans-unit>
        <trans-unit id="a172b2318a0ac73a016d038f3895b65a067f2ca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation notice:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;지원 중단 알림 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1266d586920ef18ddce67324d995ea05cb70d75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation period:&lt;/strong&gt; When an API or a feature is deprecated, it will still be present in the &lt;a href=&quot;releases#schedule&quot;&gt;next two major releases&lt;/a&gt;. After that, deprecated APIs and features will be candidates for removal. A deprecation can be announced in any release, but the removal of a deprecated API or feature will happen only in major release. Until a deprecated API or feature is removed, it will be maintained according to the LTS support policy, meaning that only critical and security issues will be fixed.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;더 이상 사용되지 &lt;strong&gt;않는 기간 :&lt;/strong&gt; API 또는 기능이 더 이상 사용되지 않는 경우 &lt;a href=&quot;releases#schedule&quot;&gt;다음 두 주요 릴리스&lt;/a&gt; 에도 계속 제공 됩니다 . 그 이후에는 더 이상 사용되지 않는 API 및 기능이 제거 대상이됩니다. 지원 중단은 모든 릴리스에서 발표 될 수 있지만 사용되지 않는 API 또는 기능 제거는 주요 릴리스에서만 발생합니다. 더 이상 사용되지 않는 API 또는 기능이 제거 될 때까지 LTS 지원 정책에 따라 유지 관리되므로 중요한 보안 문제 만 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="6b32e7a1846e16a68c42cec19b613a6be6550200" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation period:&lt;/strong&gt; When an API or a feature is deprecated, it will still be present in the next two major releases. After that, deprecated APIs and features will be candidates for removal. A deprecation can be announced in any release, but the removal of a deprecated API or feature will happen only in major release. Until a deprecated API or feature is removed, it will be maintained according to the LTS support policy, meaning that only critical and security issues will be fixed.</source>
          <target state="translated">&lt;strong&gt;지원 중단 기간 :&lt;/strong&gt; API 또는 기능이 지원 중단 된 경우 다음 두 가지 주요 릴리스에 계속 제공됩니다. 그 후에는 더 이상 사용되지 않는 API 및 기능이 제거 될 수 있습니다. 지원 중단은 모든 릴리스에서 발표 될 수 있지만 지원 중단 된 API 또는 기능의 제거는 주요 릴리스에서만 발생합니다. 더 이상 사용되지 않는 API 또는 기능이 제거 될 때까지 LTS 지원 정책에 따라 유지됩니다. 즉, 중요 및 보안 문제 만 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="211456061da7605c0f7d7fe2185e98a50a608aa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different types of forms and control collection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;다양한 유형의 양식 및 컨트롤 컬렉션&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e490a567338601ca92aa995586988ec011881076" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Display form status&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;양식 상태 표시&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb4d435403c525da223a9ab3fd0e284efff153e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Display the component&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;구성 요소 표시&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8591e588a4ef13f20829b503acd0c139fc679eb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Display the form array in the template&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;템플릿에 양식 배열 표시&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="169b22285b5954c65589e3b420ceceefcef8857c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not set a width greater than 700px&lt;/strong&gt;. If you wish to display a larger image, provide a link to the actual image that the user can click on to see the full size image separately as in this example of &lt;code&gt;source-map-explorer&lt;/code&gt; output from the &quot;Ahead-of-time Compilation&quot; guide:</source>
          <target state="translated">&lt;strong&gt;너비를 700px보다 크게 설정하지 마십시오&lt;/strong&gt; . 더 큰 이미지를 표시 하려면 &quot;Ahead-of-time Compilation&quot; 의 &lt;code&gt;source-map-explorer&lt;/code&gt; 출력 예에서와 같이 사용자가 클릭하여 실제 크기 이미지를 개별적으로 볼 수있는 실제 이미지에 대한 링크를 제공하십시오. 안내서:</target>
        </trans-unit>
        <trans-unit id="7173a0c15f40867cd98f8476ae7d5cdb6a6bf73e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use the markdown image syntax, ![...](...).&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;마크 다운 이미지 구문,! [...] (...)을 사용하지 마십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f432a37145e9e2323569b0ab88283548219bde9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not write inline code snippets&lt;/strong&gt; unless you have a good reason and the editor's permission to do so. In all other cases, code snippets should be generated automatically from tested code samples.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;정당한 이유가없고 편집자의 권한이없는 한 &lt;strong&gt;인라인 코드 스 니펫을 작성하지 마십시오&lt;/strong&gt; . 다른 모든 경우에는 코드 스 니펫이 테스트 된 코드 샘플에서 자동으로 생성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="b68a65a9af9cc3205a64a644f43bc32a38a5b9be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not&lt;/strong&gt; include the &lt;code&gt;node_modules&lt;/code&gt; folder in the project. Let it be a hidden project folder.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;프로젝트에 &lt;code&gt;node_modules&lt;/code&gt; 폴더를 포함 &lt;strong&gt;시키지 마십시오&lt;/strong&gt; . 숨겨진 프로젝트 폴더로 둡니다.</target>
        </trans-unit>
        <trans-unit id="8f05db6d262a6a382fc2ef4024ee286a3fcf9e55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; Use lower camel case for naming the selectors of directives.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 사용 지침의 선택기 이름 지정에 낙타를 소문자.</target>
        </trans-unit>
        <trans-unit id="756af44694e036aa11de735bfbf199d32f2786b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; append the symbol name with the conventional suffix (such as &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;Service&lt;/code&gt;) for a thing of that type.</source>
          <target state="translated">&lt;strong&gt;해당 유형의 항목에&lt;/strong&gt; 대해 일반적인 접미어 (예 : &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;Service&lt;/code&gt; ) 와 함께 기호 이름을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="153352eca009138a1ed3de98b472f90cc0492ab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; append the symbol name with the suffix &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 접미사와 심볼 이름을 추가 &lt;code&gt;Module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="37cc7c63695406b59611ab5b71220b9b942cd9a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be DRY (Don't Repeat Yourself).</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; DRY (자신을 반복하지 마십시오)합니다.</target>
        </trans-unit>
        <trans-unit id="c5a1d13d2b57fdec4bb4f3b13a493236cbac36e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be consistent in your choice.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 당신의 선택의 일관성.</target>
        </trans-unit>
        <trans-unit id="68c41f8439d82dd2f76a9c3edd87b07a05e58ca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be descriptive with file names and keep the contents of the file to exactly one component.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 파일 이름과 함께 설명하고 정확히 하나 개의 구성 요소 파일의 내용을 유지한다.</target>
        </trans-unit>
        <trans-unit id="c00c45caf95d9b87e21cebc918c822f1c67e55ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create a feature module named &lt;code&gt;SharedModule&lt;/code&gt; in a &lt;code&gt;shared&lt;/code&gt; folder; for example, &lt;code&gt;app/shared/shared.module.ts&lt;/code&gt; defines &lt;code&gt;SharedModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 라는 기능 모듈을 만들 &lt;code&gt;SharedModule&lt;/code&gt; A의 &lt;code&gt;shared&lt;/code&gt; 폴더를; 예를 들어 &lt;code&gt;app/shared/shared.module.ts&lt;/code&gt; 는 &lt;code&gt;SharedModule&lt;/code&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="b3f7274c450f242bd1ba80e7d18c68014eeea065" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create a new service once the service begins to exceed that singular purpose.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 서비스가 그 유일한 목적을 초과하기 시작하면 새로운 서비스를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7adcd12c026b630a50f2eaa8c3033ca30ea97afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule for all distinct features in an application; for example, a &lt;code&gt;Heroes&lt;/code&gt; feature.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 하는 응용 프로그램의 모든 고유 한 기능에 대한 NgModule을 만들; 예를 들어 &lt;code&gt;Heroes&lt;/code&gt; 기능입니다.</target>
        </trans-unit>
        <trans-unit id="69d3cab88de69451416caa19d56f243518d871ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule for each feature area.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 각 기능 영역에 대한 NgModule을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ab22382cbe44c9bb5ecdff51614d741b044724f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule in the app's root folder, for example, in &lt;code&gt;/src/app&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; , 예를 들어, 응용 프로그램의 루트 폴더에 NgModule를 만들 &lt;code&gt;/src/app&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="931cae31695433c127504b614b08f067dfca3841" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create folders named for the feature area they represent.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 이 나타내는 기능 영역의 이름을 딴 폴더를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1296916986b4fe85a5dc6245d682901f7c88adfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create services with a single responsibility that is encapsulated by its context.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 문맥에 의해 캡슐화되는 단일 책임 서비스를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3911b104409eb46eaffb8f55baf1bb235a71bca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; declare all components, directives, and pipes in the &lt;code&gt;SharedModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 의 모든 구성 요소, 지침 및 파이프 선언 &lt;code&gt;SharedModule&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="cab5a59ccabfc8e97b46f17a6cf05b11ae4c097a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; declare components, directives, and pipes in a shared module when those items will be re-used and referenced by the components declared in other feature modules.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 이러한 항목은 재 사용 및 기타 기능 모듈에 선언 된 구성 요소에 의해 참조 할 때 공유 모듈에 선언 구성 요소, 지침 및 파이프.</target>
        </trans-unit>
        <trans-unit id="2e08a28c59698b76a3c21a4c94e7aafedc71ed80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define one thing, such as a service or component, per file.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 같은 파일 당 서비스 또는 구성 요소로, 한 가지를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d68cc4de5d4cfb0cfd8658d935f47e92d04addcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define small functions</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 작은 함수를 정의</target>
        </trans-unit>
        <trans-unit id="68498585b290359393f79634b03a1d41b1555619" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define the structure to follow these four basic guidelines, listed in order of importance.</source>
          <target state="translated">&lt;strong&gt;할 일이&lt;/strong&gt; 중요한 순서대로 나열이 네 가지 기본 지침을 따르도록 구조를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="fd4aaef7172d067ebe063baf539a3102330db269" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; end the filename of a &lt;em&gt;RoutingModule&lt;/em&gt; with &lt;code&gt;-routing.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; a의 파일 이름 끝 &lt;em&gt;RoutingModule&lt;/em&gt; 와 &lt;code&gt;-routing.module.ts&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="424cdd9134c136b2534980399cb6591450120475" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; export all symbols from the &lt;code&gt;SharedModule&lt;/code&gt; that other feature modules need to use.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 로부터 모든 심볼을 내보낼 &lt;code&gt;SharedModule&lt;/code&gt; 다른 기능 모듈을 사용할 필요가있다.</target>
        </trans-unit>
        <trans-unit id="02fea1f308ef53e59c993bb9bc4366768cca349c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; extract templates and styles into a separate file, when more than 3 lines.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 별도의 파일, 3 개 이상의 라인으로 추출 템플릿과 스타일을.</target>
        </trans-unit>
        <trans-unit id="cbfa824dec9159053869b1067a3c0d6f3f94ba8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; follow a pattern that describes the symbol's feature then its type. The recommended pattern is &lt;code&gt;feature.type.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 다음 유형을 심볼의 기능을 설명하는 패턴을 따른다. 권장되는 패턴은 &lt;code&gt;feature.type.ts&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6eebcad366f314fe260de69a328ff8c2f2670360" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; give the file name the &lt;code&gt;.module.ts&lt;/code&gt; extension.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 파일 이름에게 제공 &lt;code&gt;.module.ts&lt;/code&gt; 의 확장.</target>
        </trans-unit>
        <trans-unit id="0206f75503529ff71eb1a9f28d948773b91ba4cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; give the filename the conventional suffix (such as &lt;code&gt;.component.ts&lt;/code&gt;, &lt;code&gt;.directive.ts&lt;/code&gt;, &lt;code&gt;.module.ts&lt;/code&gt;, &lt;code&gt;.pipe.ts&lt;/code&gt;, or &lt;code&gt;.service.ts&lt;/code&gt;) for a file of that type.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; (예 : 파일 이름을 기존의 접미사를 제공 &lt;code&gt;.component.ts&lt;/code&gt; , &lt;code&gt;.directive.ts&lt;/code&gt; , &lt;code&gt;.module.ts&lt;/code&gt; , &lt;code&gt;.pipe.ts&lt;/code&gt; , 또는 &lt;code&gt;.service.ts&lt;/code&gt; 해당 유형의 파일에 대한).</target>
        </trans-unit>
        <trans-unit id="deca3050ed9d3ec3756dcf8bb288319f1c89aa7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; have a near term view of implementation and a long term vision.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 구현의 단기 전망과 장기 비전을 가지고있다.</target>
        </trans-unit>
        <trans-unit id="1ef24dc995d906797c68ee59d06da91798882a97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; implement the lifecycle hook interfaces.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 라이프 사이클 후크 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="c303aa380fb4cff0efa9842a334e696f89bf8355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; import all modules required by the assets in the &lt;code&gt;SharedModule&lt;/code&gt;; for example, &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 의 자산을 필요로하는 모든 모듈 가져 &lt;code&gt;SharedModule&lt;/code&gt; 을 ; 예를 들어 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="75234a1890e1015e5a48b582eb574e1f2e81ceb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; include error handling in the bootstrapping logic.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 부트 스트랩 논리의 오류 처리를 포함한다.</target>
        </trans-unit>
        <trans-unit id="1b4288e4f5e6492bfb85103d603b71c7b7c3fd77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; is one that should always be followed. &lt;em&gt;Always&lt;/em&gt; might be a bit too strong of a word. Guidelines that literally should always be followed are extremely rare. On the other hand, you need a really unusual case for breaking a &lt;em&gt;Do&lt;/em&gt; guideline.</source>
          <target state="translated">&lt;strong&gt;할 일을&lt;/strong&gt; 항상 준수해야 하나입니다. &lt;em&gt;항상&lt;/em&gt; 단어가 너무 강할 수 있습니다. 문자 그대로 항상 따라야하는 지침은 매우 드 rare니다. 반면, &lt;em&gt;Do&lt;/em&gt; 지침 을 어기는 경우는 매우 특이한 경우가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="e55242ad22a5996fd3efca619637c447ce0b1b9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; keep a flat folder structure as long as possible.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 가능한 한 같은 플랫 폴더 구조를 유지한다.</target>
        </trans-unit>
        <trans-unit id="b5c5e12b6e545709ef990b9b53ec3a1738d52dac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; limit logic in a component to only that required for the view. All other logic should be delegated to services.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 뷰에 필요한 만에 구성 요소에 제한 논리를. 다른 모든 논리는 서비스에 위임되어야합니다.</target>
        </trans-unit>
        <trans-unit id="a405780eb84b6a3584c8828ad6ff23b25db43802" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; XHR 호출, 로컬 스토리지, 메모리에 보관 한, 또는 다른 데이터 작업에 대한 책임 메이크업 데이터 서비스를.</target>
        </trans-unit>
        <trans-unit id="2d3f678eccd25f031c48366493647554f7a63190" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; make locating code intuitive, simple, and fast.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 메이크업의 찾기 코드가 직관적 간단하고 빠르게.</target>
        </trans-unit>
        <trans-unit id="e25d22a2e3f2a399bf9997ba5b8d5226b619b332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; match the name of the symbol to the name of the file.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 파일의 이름으로 심볼의 이름과 일치.</target>
        </trans-unit>
        <trans-unit id="a2a468f22f0e2cf16f02d394fd7aa6652b654e29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; move reusable logic to services and keep components simple and focused on their intended purpose.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 서비스에 재사용 가능한 로직을 이동하고 간단한 구성 요소를 유지하고 의도 한 목적에 초점을 맞추었다.</target>
        </trans-unit>
        <trans-unit id="67d8007229973bd14357bad9c0f4868c63e332ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name end-to-end test specification files after the feature they test with a suffix of &lt;code&gt;.e2e-spec&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 가의 접미사로 테스트 기능 후에 이름 엔드 - 투 - 엔드 테스트 사양 파일을 &lt;code&gt;.e2e-spec&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6209ab419f047dd979588da17339d1739a1a5d92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name event handler methods with the prefix &lt;code&gt;on&lt;/code&gt; followed by the event name.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 접두사와 이름 이벤트 핸들러 메서드 &lt;code&gt;on&lt;/code&gt; 이벤트 이름 다음에 있습니다.</target>
        </trans-unit>
        <trans-unit id="1536253456bf0e4ec9a7138f3df678a22d93f3bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name events without the prefix &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 접두사없이 이름의 이벤트 &lt;code&gt;on&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="72fc7ff3699db165b0faefe0a32401113f7e6126" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name test specification files the same as the component they test.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 구성 요소들은 시험과 동일한 이름의 테스트 사양 파일을.</target>
        </trans-unit>
        <trans-unit id="89d9cc996675ed4eb14697065bc91a26137ef04b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name test specification files with a suffix of &lt;code&gt;.spec&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 의 접미사로 이름 테스트 사양 파일 &lt;code&gt;.spec&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f5b17289f4aa199b0fec58c91dd947153469638" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the feature module file reflecting the name of the feature area and folder; for example, &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 기능 영역과 폴더의 이름을 반영하는 기능 모듈 파일의 이름을; 예를 들어 &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d17bb3b39eaea3d8c5b89c34a73ec427f9f22626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the feature module symbol reflecting the name of the feature area, folder, and file; for example, &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; defines &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 기능 영역, 폴더 및 파일의 이름을 반영하는 기능 모듈 기호 이름; 예를 들어 &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; 는 &lt;code&gt;HeroesModule&lt;/code&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="4a9a26cd9c372572cd4569cca774843691ba0be0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the file such that you instantly know what it contains and represents.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 즉시 그것을 포함하고 무엇을 나타내는 지 알 수 있도록 파일 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="c70f892ee9de9f7d55a2d38ec2d5b997e6f728cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the module after the feature and folder it resides in.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 기능 후 모듈의 이름을 지정하고이에있는 폴더.</target>
        </trans-unit>
        <trans-unit id="efd18b6f8d4abdbb012bd94ccfb7a9da586da549" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the style file &lt;code&gt;[component-name].component.css&lt;/code&gt;, where [component-name] is the component name.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 스타일 파일 이름을 &lt;code&gt;[component-name].component.css&lt;/code&gt; [구성 요소 이름] 구성 요소 이름입니다.</target>
        </trans-unit>
        <trans-unit id="c192d2ee4bc6771008c16522374e56e7e5ae7754" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the template file &lt;code&gt;[component-name].component.html&lt;/code&gt;, where [component-name] is the component name.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 템플릿 파일 이름을 &lt;code&gt;[component-name].component.html&lt;/code&gt; [구성 요소 이름] 구성 요소 이름입니다.</target>
        </trans-unit>
        <trans-unit id="8c99293a7d9e3e2e4eb705e4024c72d986509327" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place private members after public members, alphabetized.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 알파벳순으로, 공공 구성원 후 장소 개인 회원.</target>
        </trans-unit>
        <trans-unit id="bb0ff2ae72c8cf540a6dad4708d9f9596090e2b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place properties up top followed by methods.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 상단이 방법으로 다음까지 장소의 특성을.</target>
        </trans-unit>
        <trans-unit id="99b2f3501de2951dca9a4141bea2870c4567b742" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place the feature module in the same named folder as the feature area; for example, in &lt;code&gt;app/heroes&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 기능 영역과 같은 이름의 폴더에있는 기능 모듈을 배치; 예를 들어 &lt;code&gt;app/heroes&lt;/code&gt; 에서 .</target>
        </trans-unit>
        <trans-unit id="d5722369208e41b13dca44b65f2447f50c92ce04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; provide a service with the app root injector in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator of the service.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 에서 응용 프로그램 루트 인젝터와 서비스 제공 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 서비스의 장식을.</target>
        </trans-unit>
        <trans-unit id="d5a28ed423d6944508a340974c6ad496a01b21a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put all of the app's code in a folder named &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 라는 이름의 폴더에 응용 프로그램의 모든 코드를 넣어 &lt;code&gt;src&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2479321a03fa6060bb58392a9372d807820bae8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put bootstrapping and platform logic for the app in a file named &lt;code&gt;main.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 라는 이름의 파일에 앱 풋 부트 스트랩 및 플랫폼 로직을 &lt;code&gt;main.ts&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c919cf33f57f1e80a8e7baa542906d3184f4a29c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put presentation logic in the component class, and not in the template.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 템플릿에없는 구성 요소 클래스에서 프리젠 테이션 로직을 넣어.</target>
        </trans-unit>
        <trans-unit id="cd801119d3788db0f48b20b6a050db78823a218a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put the contents of lazy loaded features in a &lt;em&gt;lazy loaded folder&lt;/em&gt;. A typical &lt;em&gt;lazy loaded folder&lt;/em&gt; contains a &lt;em&gt;routing component&lt;/em&gt;, its child components, and their related assets and modules.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; A의 게으른로드 기능의 내용을 넣어 &lt;em&gt;게으른로드 폴더&lt;/em&gt; . 일반적인 &lt;em&gt;지연로드 된 폴더&lt;/em&gt; 에는 &lt;em&gt;라우팅 구성 요소&lt;/em&gt; , 해당 하위 구성 요소 및 관련 자산 및 모듈이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8a8c7e939be120f7d56d6b049da69611efadd66e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; refactor logic for making data operations and interacting with data to a service.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 데이터 작업을하고 서비스에 대한 데이터와 상호 작용 리팩토링 논리를.</target>
        </trans-unit>
        <trans-unit id="2daf2a8ae4842cad7a27f0ac372d33a31a072bd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; specify &lt;em&gt;component-relative&lt;/em&gt; URLs, prefixed with &lt;code&gt;./&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 지정 &lt;em&gt;구성 요소를 상대&lt;/em&gt; 로 시작하는 URL, &lt;code&gt;./&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="1da2147e294f49dc4e51a0fc8aba0cbfd71c3af4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; spell non-element selectors in lower camel case unless the selector is meant to match a native HTML attribute.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 선택기는 기본 HTML 속성과 일치하는 것을 의미하지 않는 낮은 낙타 경우가 아닌 요소 선택기 철자.</target>
        </trans-unit>
        <trans-unit id="19c1158dd3fd6095e86d920452f5e64ee07f3f10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; start small but keep in mind where the app is heading down the road.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 작은 규모로 시작하지만 앱이 길을 향하고된다 명심하십시오.</target>
        </trans-unit>
        <trans-unit id="c1bb6de1f52d2c127414fe8186c82bd4d4fb21f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; structure the app such that you can &lt;strong&gt;L&lt;/strong&gt;ocate code quickly, &lt;strong&gt;I&lt;/strong&gt;dentify the code at a glance, keep the &lt;strong&gt;F&lt;/strong&gt;lattest structure you can, and &lt;strong&gt;T&lt;/strong&gt;ry to be DRY.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 구조 당신이 할 수 있도록 응용 프로그램 &lt;strong&gt;L의&lt;/strong&gt; 신속 ocate 코드를, &lt;strong&gt;나는&lt;/strong&gt; 한눈에 코드를 dentify 킵 &lt;strong&gt;F&lt;/strong&gt; 당신이 할 수있는 lattest 구조, 및 &lt;strong&gt;T의&lt;/strong&gt; 스피 건조합니다.</target>
        </trans-unit>
        <trans-unit id="447bce5b2ed3be44cfa8271a90f5d28bc8198718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; suffix a &lt;em&gt;RoutingModule&lt;/em&gt; class name with &lt;code&gt;RoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 접미사 &lt;em&gt;RoutingModule&lt;/em&gt; 와 클래스 이름을 &lt;code&gt;RoutingModule&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fed7861c9f089246f8db40e8d0c87eb27430c622" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; suffix a service class name with &lt;code&gt;Service&lt;/code&gt;. For example, something that gets data or heroes should be called a &lt;code&gt;DataService&lt;/code&gt; or a &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 와 서비스 클래스 이름 접미사 &lt;code&gt;Service&lt;/code&gt; . 예를 들어, 데이터 나 영웅을 얻는 것은 &lt;code&gt;DataService&lt;/code&gt; 또는 &lt;code&gt;HeroService&lt;/code&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="8c1509076fb6b5c6b9032dee4e08837628485074" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use &lt;a href=&quot;https://www.npmjs.com/package/codelyzer&quot;&gt;codelyzer&lt;/a&gt; to follow this guide.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 사용 &lt;a href=&quot;https://www.npmjs.com/package/codelyzer&quot;&gt;codelyzer을&lt;/a&gt; 이 가이드를 따라.</target>
        </trans-unit>
        <trans-unit id="7985aba17e237de853ce430d0b75bfcc3a4a382c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use &lt;em&gt;dashed-case&lt;/em&gt; or &lt;em&gt;kebab-case&lt;/em&gt; for naming the element selectors of components.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 사용 &lt;em&gt;점선의 경우&lt;/em&gt; 또는 &lt;em&gt;케밥의 경우를&lt;/em&gt; 구성 요소의 요소 선택기 이름 지정.</target>
        </trans-unit>
        <trans-unit id="bfac476b71f59566f5127a7d6239c65ac9e76752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a custom prefix for a component selector. For example, the prefix &lt;code&gt;toh&lt;/code&gt; represents &lt;strong&gt;T&lt;/strong&gt;our &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;H&lt;/strong&gt;eroes and the prefix &lt;code&gt;admin&lt;/code&gt; represents an admin feature area.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 구성 요소 선택에 대한 사용자 지정 접두어를 사용하십시오. 예를 들면, 프리픽스 &lt;code&gt;toh&lt;/code&gt; 나타내는 &lt;strong&gt;T에게&lt;/strong&gt; 우리 &lt;strong&gt;O&lt;/strong&gt; F &lt;strong&gt;H의&lt;/strong&gt; eroes 및 프리픽스 &lt;code&gt;admin&lt;/code&gt; 관리자 기능 영역을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="44139d62100dd05907211954f2365d5e0cf3e624" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a custom prefix for the selector of directives (e.g, the prefix &lt;code&gt;toh&lt;/code&gt; from &lt;strong&gt;T&lt;/strong&gt;our &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;H&lt;/strong&gt;eroes).</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 지시어의 선택 (예, 접두사에 대한 사용자 지정 접두어를 사용 &lt;code&gt;toh&lt;/code&gt; 에서 &lt;strong&gt;T&lt;/strong&gt; 우리의 &lt;strong&gt;오&lt;/strong&gt; F &lt;strong&gt;H는&lt;/strong&gt; eroes).</target>
        </trans-unit>
        <trans-unit id="893cd5a23c6adf14d9224cb52e6f1b4c5b9feb98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a hyphenated, lowercase element selector value; for example, &lt;code&gt;admin-users&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 하이픈, 소문자 요소 선택기 값을 사용; 예를 들어, &lt;code&gt;admin-users&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="00e52512f5585f991fce0b87893122af6eeaa8f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a prefix that identifies the feature area or the app itself.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 접두어를 사용 식별 기능 영역 또는 응용 프로그램 자체가.</target>
        </trans-unit>
        <trans-unit id="865b4dfe299fa61cb13a9f7a99c447b4684571d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use attribute directives when you have presentation logic without a template.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 템플릿없이 프리젠 테이션 로직이있을 때 사용하는 속성 지시를.</target>
        </trans-unit>
        <trans-unit id="2d7be5cdb6da4aa9b0f3cc0c614d6e58f2a88ef0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all assets named after what they represent.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 가 무엇을 나타내는 이름을 딴 모든 자산에 대한 일관된 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="319543104179e3aa7703d59df00d4acd56fa2386" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all pipes, named after their feature. The pipe class name should use &lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt; (the general convention for class names), and the corresponding &lt;code&gt;name&lt;/code&gt; string should use &lt;em&gt;lowerCamelCase&lt;/em&gt;. The &lt;code&gt;name&lt;/code&gt; string cannot use hyphens (&quot;dash-case&quot; or &quot;kebab-case&quot;).</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 그들의 기능의 이름을 따서 명명 모든 파이프, 일관성있는 이름을 사용합니다. 파이프 클래스 이름은 &lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt; ( 클래스 이름 의 일반 규칙)를 사용해야 하고 해당 &lt;code&gt;name&lt;/code&gt; 문자열은 &lt;em&gt;lowerCamelCase를&lt;/em&gt; 사용해야합니다 . &lt;code&gt;name&lt;/code&gt; 문자열은 하이픈 ( &quot;대시의 경우&quot;또는 &quot;케밥의 경우&quot;)를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b74e052dcc626499e14cf9a52f2bdfa1b5f8157d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all services named after their feature.</source>
          <target state="translated">&lt;strong&gt;음주&lt;/strong&gt; 그들의 기능의 이름을 따서 명명 모든 서비스에 대해 일관된 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4c9c40f42be9d32aaef11f560a7b86ef8a31b067" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all symbols.</source>
          <target state="translated">&lt;strong&gt;할 일이&lt;/strong&gt; 모든 기호에 대한 일관성있는 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9368fc727343fb9f24f72163850b7f610e8ffe07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent type names for all components following a pattern that describes the component's feature then its type. A recommended pattern is &lt;code&gt;feature.type.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 다음 유형을 구성 요소의 기능을 설명하는 패턴 다음의 모든 구성 요소에 대한 일관된 유형 이름을 사용합니다. 권장되는 패턴은 &lt;code&gt;feature.type.ts&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="49866936f0831aaf4d4f204e78c08decd834a494" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use conventional type names including &lt;code&gt;.service&lt;/code&gt;, &lt;code&gt;.component&lt;/code&gt;, &lt;code&gt;.pipe&lt;/code&gt;, &lt;code&gt;.module&lt;/code&gt;, and &lt;code&gt;.directive&lt;/code&gt;. Invent additional type names if you must but take care not to create too many.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 포함한 기존의 유형 이름 사용 &lt;code&gt;.service&lt;/code&gt; , &lt;code&gt;.component&lt;/code&gt; , &lt;code&gt;.pipe&lt;/code&gt; , &lt;code&gt;.module&lt;/code&gt; 및 &lt;code&gt;.directive&lt;/code&gt; 을 . 너무 많이 생성하지 않도록주의해야하지만 추가 유형 이름을 발명하십시오.</target>
        </trans-unit>
        <trans-unit id="e07d96f35486f1c913032d39f6a0282e34f2b203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use dashes to separate words in the descriptive name.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 설명이 포함 된 이름으로 별도의 단어를 사용 대시.</target>
        </trans-unit>
        <trans-unit id="c7aeca36cad47faef79582924c00673db45ff311" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use dots to separate the descriptive name from the type.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 사용 점 유형에서 설명하는 이름을 구분합니다.</target>
        </trans-unit>
        <trans-unit id="0920db69d71e308d2a525382582255b9c6d2b7eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 에 도움 추적 일관된 스타일과 패턴을 사용하는 파일 템플릿 또는 미리보기를. 다음은 일부 웹 개발 편집기 및 IDE에 대한 템플릿 및 / 또는 스 니펫입니다.</target>
        </trans-unit>
        <trans-unit id="6a1442fe05cfed1932fa984611b4f2d9c111baa9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use services as singletons within the same injector. Use them for sharing data and functionality.</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 같은 인젝터 내에서 싱글로 사용 서비스를. 데이터 및 기능 공유에 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d1954bdb66547b33eb125161af1ae51c60026aaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; class decorator instead of the &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; parameter decorator when using types as tokens for the dependencies of a service.</source>
          <target state="translated">&lt;strong&gt;마&lt;/strong&gt; 를 사용 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 대신 클래스 장식을 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 매개 변수 장식 서비스의 종속성 토큰으로 유형을 사용하는 경우.</target>
        </trans-unit>
        <trans-unit id="d96c2d225ea94c0493269430e8e01b86b50377cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; class decorators instead of the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; properties of the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata:</source>
          <target state="translated">&lt;strong&gt;수행&lt;/strong&gt; 사용 께 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 대신에 장식의 클래스 &lt;code&gt;inputs&lt;/code&gt; 및 &lt;code&gt;outputs&lt;/code&gt; 의 특성 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 메타 :</target>
        </trans-unit>
        <trans-unit id="ea6b202748ee468df084f3ffd9d21ef72482343b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use upper camel case for class names.</source>
          <target state="translated">&lt;strong&gt;마십시오&lt;/strong&gt; 클래스 이름을 위 카멜 케이스를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ea712f25fc8e27592da4c153217ffe7c46b0cd58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't modify your copy of Angular.&lt;/strong&gt; Private, customized versions of Angular tend to fall behind the current version and may not include important security fixes and enhancements. Instead, share your Angular improvements with the community and make a pull request.</source>
          <target state="translated">&lt;strong&gt;Angular 사본을 수정하지 마십시오. &lt;/strong&gt;개인 맞춤형 버전의 Angular는 현재 버전보다 뒤 떨어지고 중요한 보안 수정 및 개선 사항이 포함되지 않을 수 있습니다. 대신, Angular 개선 사항을 커뮤니티와 공유하고 풀 요청을하십시오.</target>
        </trans-unit>
        <trans-unit id="1df1e3b37c9e9487b7a093241b0ebd0b4c61ce3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; Output file path for Build Event Protocol events</source>
          <target state="translated">&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; 빌드 이벤트 프로토콜 이벤트의 출력 파일 경로</target>
        </trans-unit>
        <trans-unit id="d7d5340fc1d0f2bcd8470b4e061322e8767162d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; True to create a new app that uses the Ivy rendering engine.</source>
          <target state="translated">&lt;strong&gt;실험&lt;/strong&gt; 아이비 렌더링 엔진을 사용하는 새로운 앱을 만들려면 참입니다.</target>
        </trans-unit>
        <trans-unit id="60e2fc730113a9b4a2361c46a5d80b8917ff611b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fastest :)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;가장 빠른 :)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f1cd8e78e0f2628c908640e71808899ed7c9c78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 1.&lt;/strong&gt; Clicking the button toggles the date format</source>
          <target state="translated">&lt;strong&gt;그림 1.&lt;/strong&gt; 버튼을 클릭하면 날짜 형식이 전환됩니다.</target>
        </trans-unit>
        <trans-unit id="8836bb311621b9f641e4387c6a9c6ae619924076" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 1.&lt;/strong&gt;&lt;em&gt;Direct access to forms model in a reactive form.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;그림 1. &lt;/strong&gt;&lt;em&gt;반응 형 양식 모델에 대한 직접 액세스.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="796507bcec3caa94dd42989ce74f71db967a2161" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 2.&lt;/strong&gt; Output from the &lt;code&gt;exponentialStrength&lt;/code&gt; pipe</source>
          <target state="translated">&lt;strong&gt;그림 2. &lt;/strong&gt; &lt;code&gt;exponentialStrength&lt;/code&gt; 파이프의 출력</target>
        </trans-unit>
        <trans-unit id="d94a098e3546f9d591f7843c93d510067d71dfe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 2.&lt;/strong&gt;&lt;em&gt;Indirect access to forms model in a template-driven form.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;그림 2. &lt;/strong&gt;&lt;em&gt;템플릿 기반 양식의 양식 모델에 대한 간접 액세스.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3244e9f57f17cc75d36840e987faeb21f638dada" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 3.&lt;/strong&gt; Changing the amount and boost factor for the &lt;code&gt;exponentialStrength&lt;/code&gt; pipe</source>
          <target state="translated">&lt;strong&gt;그림 3. &lt;/strong&gt; &lt;code&gt;exponentialStrength&lt;/code&gt; 파이프 의 양 및 부스트 팩터 변경</target>
        </trans-unit>
        <trans-unit id="84737e65c89a22050ef42c2ff2cfa30802513e7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 4.&lt;/strong&gt; The &lt;code&gt;flyingHeroes&lt;/code&gt; pipe filtering the display to flying heroes</source>
          <target state="translated">&lt;strong&gt;도 4 &lt;/strong&gt; &lt;code&gt;flyingHeroes&lt;/code&gt; 에 위치한 영웅 디스플레이 필터링 파이프</target>
        </trans-unit>
        <trans-unit id="deac895c6a99bc1ceac177a0fa33df8aaee45f14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 5.&lt;/strong&gt; The &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;fetch-json&lt;/code&gt; pipes displaying the heroes</source>
          <target state="translated">&lt;strong&gt;도 5 &lt;/strong&gt; &lt;code&gt;fetch&lt;/code&gt; 하고 &lt;code&gt;fetch-json&lt;/code&gt; 영웅 표시 관</target>
        </trans-unit>
        <trans-unit id="a864e18b9ef9c87eb6e54692693e9e87d007a12f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For all other scenarios,&lt;/strong&gt; see the current instructions in &lt;a href=&quot;setup-local&quot;&gt;Setting up the Local Environment and Workspace&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;다른 모든 시나리오 &lt;/strong&gt;&lt;a href=&quot;setup-local&quot;&gt;는 로컬 환경 및 작업 공간 설정&lt;/a&gt; 의 현재 지시 사항을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b51e1b4288724cd437a336f2abcf51a6f2513d0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generate a new &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;새 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 생성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5bcae9fe29d4c9b343cd9a59bbc124b34fc7487f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generate form controls&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;양식 컨트롤 생성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89146d6e3d4351b223f9827f8cc35449b49d651a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Group the nested form in the template&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;템플릿에서 중첩 된 양식 그룹화&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="068e055d581fa26662ca24ee2708b7d339665834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt; is used when interpreting a value as HTML, for example, when binding to &lt;code&gt;innerHtml&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt; 은 값을 HTML로 해석 할 때 (예 : &lt;code&gt;innerHtml&lt;/code&gt; 에 바인딩 할 때) 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="ec55ce407496fff6cba913b5e8d3de8262020472" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How &lt;em&gt;loadComponent()&lt;/em&gt; chooses an ad&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;loadComponent ()&lt;/em&gt; 가 광고를 선택하는 방법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a155722272a889f00945465fc2d20e670aa499d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INVALID&lt;/strong&gt;: This control has failed at least one validation check.</source>
          <target state="translated">&lt;strong&gt;INVALID&lt;/strong&gt; :이 컨트롤이 적어도 하나의 유효성 검사에 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="a43d47b6ee7516cf37b9d0f06355e10c5aa46f43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import a validator function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;유효성 검사기 함수 가져 오기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="00f8c2720f609f8f0845d9278612a553af0b7df3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import the FormArray class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormArray 클래스 가져 오기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ec97e8c3ff0a0235e6902f1be773e9938350c6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import the FormBuilder class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormBuilder 클래스 가져 오기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f84f922f1b11fef33c1749bfcf9a2a29798cfe29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; the In-memory Web API module has nothing to do with HTTP in Angular.</source>
          <target state="translated">&lt;strong&gt;중요 :&lt;/strong&gt; 인 메모리 웹 API 모듈은 Angular의 HTTP와 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="dc98c24cde56582c759cc530a597498b395d72a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In general:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;일반적으로 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f02ddca41e03136063c5d853a43814c190b1937" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In v10 the default currency code will be taken from the current locale.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;v10에서 기본 통화 코드는 현재 로케일에서 가져옵니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae4927abcb0b54412e8ca5b575ab2f2c843ea8b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In v11 the default currency code will be taken from the current locale identified by the &lt;code&gt;LOCAL_ID&lt;/code&gt; token. See the &lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;i18n guide&lt;/a&gt; for more information.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;v11에서 기본 통화 코드는 &lt;code&gt;LOCAL_ID&lt;/code&gt; 토큰으로 식별되는 현재 로케일에서 가져옵니다 . 자세한 내용은 &lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;i18n 가이드&lt;/a&gt; 를 참조하세요.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="491e2bdf674c7d930c5d7d81d6c1e695174575bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inject the FormBuilder service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormBuilder 서비스 삽입&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17cc65cb1582a263a64c49339ffe5f50dc31748a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interpolation&lt;/strong&gt; with double curly braces to display a component property.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;이중 중괄호로 &lt;strong&gt;보간&lt;/strong&gt; 하여 구성 요소 특성을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="68890d13fc54d083b646a4367430a9ad959bf417" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep current with the latest Angular library releases.&lt;/strong&gt; We regularly update the Angular libraries, and these updates may fix security defects discovered in previous versions. Check the Angular &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;change log&lt;/a&gt; for security-related updates.</source>
          <target state="translated">&lt;strong&gt;최신 Angular 라이브러리 릴리스를 최신 상태로 유지하십시오. &lt;/strong&gt;Google은 Angular 라이브러리를 정기적으로 업데이트하며 이러한 업데이트는 이전 버전에서 발견 된 보안 결함을 해결할 수 있습니다. 보안 관련 업데이트에 대한 각도 &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;변경 로그&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="564560214da2886c52516ade57692873955f9483" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep template statements simple&lt;/strong&gt; &amp;mdash; The &lt;code&gt;(blur)&lt;/code&gt; event is bound to two JavaScript statements. The first statement calls &lt;code&gt;addHero&lt;/code&gt;. The second statement, &lt;code&gt;newHero.value=''&lt;/code&gt;, clears the input box after a new hero is added to the list.</source>
          <target state="translated">&lt;strong&gt;템플릿 문을 단순하게 유지&lt;/strong&gt; &amp;mdash; &lt;code&gt;(blur)&lt;/code&gt; 이벤트는 두 개의 JavaScript 문에 바인딩됩니다. 첫 번째 명령문은 &lt;code&gt;addHero&lt;/code&gt; 를 호출 합니다 . 두 번째 문장 인 &lt;code&gt;newHero.value=''&lt;/code&gt; 는 새 영웅이 목록에 추가 된 후 입력 상자를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="af85710506385e7bb680dd7711977f7a364f111e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Leave the default and the wildcard routes!&lt;/strong&gt; These are concerns at the top level of the application itself.</source>
          <target state="translated">&lt;strong&gt;기본 및 와일드 카드 경로를 그대로 두십시오! &lt;/strong&gt;이러한 문제는 응용 프로그램 자체의 최상위 수준에 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0c58a4d71e7c20be7a70adb2122afee35358aab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Library developers:&lt;/strong&gt; By default, the CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate library&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;package.json&lt;/code&gt; for the new library. That &lt;code&gt;package.json&lt;/code&gt; is used when publishing the library to npm. For more information, see the CLI wiki page &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot;&gt;Library Support&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;라이브러리 개발자 :&lt;/strong&gt; 기본적으로 CLI 명령 &lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate library&lt;/code&gt; &lt;/a&gt; 는 새 라이브러리에 대한 &lt;code&gt;package.json&lt;/code&gt; 을 작성합니다 . 해당 &lt;code&gt;package.json&lt;/code&gt; 은 라이브러리를 npm에 공개 할 때 사용됩니다. 자세한 정보는 CLI 위키 페이지 &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot;&gt;라이브러리 지원을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="86cb86bd9af54ff1bf806625c029fd79461ee4db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Major releases&lt;/strong&gt; contain significant new features, some but minimal developer assistance is expected during the update. When updating to a new major release, you may need to run update scripts, refactor code, run additional tests, and learn new APIs.</source>
          <target state="translated">&lt;strong&gt;주요 릴리스&lt;/strong&gt; 에는 중요한 새로운 기능이 포함되어 있지만 업데이트 중에는 최소한의 개발자 지원이 필요합니다. 새로운 주요 릴리스로 업데이트 할 때 업데이트 스크립트를 실행하고, 코드를 리팩터링하고, 추가 테스트를 실행하고, 새로운 API를 학습해야합니다.</target>
        </trans-unit>
        <trans-unit id="8e551d86ea1dd11410ef94a9979b35ff51c33723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make a field required&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;필수 필드 만들기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8af40ba30977eb931b9405e6f7f841290c41fd55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Markup style:&lt;/strong&gt; How to include images, tables, alert boxes, and code snippets. Angular docs are written in Markdown, with custom extensions for this site. Correct markup ensures a consistent look-and-feel, and is essential for the doc to build and function correctly.</source>
          <target state="translated">&lt;strong&gt;마크 업 스타일 :&lt;/strong&gt; 이미지, 표, 경고 상자 및 코드 스 니펫을 포함하는 방법. 각도 문서는이 사이트에 대한 사용자 지정 확장명과 함께 Markdown으로 작성됩니다. 올바른 마크 업은 일관된 모양과 느낌을 보장하며 문서가 올바르게 작성되고 작동하는 데 필수적입니다.</target>
        </trans-unit>
        <trans-unit id="049a66297d0463705501f4976e142df77e148c1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Markup style&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;마크 업 스타일&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90b69a62ec932925abbbb8b8f39fa6f5cd1496f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Metadata Properties&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;메타 데이터 속성&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="3fabbc0c229a540fc47f545ceac94d3a9ec3b561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Minor releases&lt;/strong&gt; contain new smaller features. Minor releases are fully backward-compatible; no developer assistance is expected during update, but you can optionally modify your apps and libraries to begin using new APIs, features, and capabilities that were added in the release. We update peer dependencies in minor versions by expanding the supported versions, but we do not require projects to update these dependencies.</source>
          <target state="translated">&lt;strong&gt;부 릴리스&lt;/strong&gt; 에는 새로운 작은 기능이 포함되어 있습니다. 부 릴리스는 이전 버전과 완전히 호환됩니다. 업데이트 중에는 개발자 지원이 필요하지 않지만 릴리스에 추가 된 새로운 API, 기능 및 기능을 사용하기 시작하도록 앱 및 라이브러리를 선택적으로 수정할 수 있습니다. 지원되는 버전을 확장하여 부 버전의 피어 종속성을 업데이트하지만 프로젝트에서 이러한 종속성을 업데이트 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="72465ffeda7a3882d2d558cd2302a2ff0208ef07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;N.B.&lt;/strong&gt;: The &lt;a href=&quot;docs-style-guide#table-of-contents&quot;&gt;Table-of-contents&lt;/a&gt; generator only considers main (&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;) and secondary (&lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;) headings.</source>
          <target state="translated">&lt;strong&gt;NB&lt;/strong&gt; : &lt;a href=&quot;docs-style-guide#table-of-contents&quot;&gt;목차&lt;/a&gt; 생성기는 기본 ( &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; ) 및 보조 ( &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; ) 표제 만 고려 합니다.</target>
        </trans-unit>
        <trans-unit id="c7c17e9e07c259e730be178446aa8f994896d165" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; In the logical tree, you'll see &lt;code&gt;@Provide&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which are not real HTML attributes but are here to demonstrate what is going on under the hood.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 논리 트리에는 &lt;code&gt;@Provide&lt;/code&gt; , &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; , 이는 실제 HTML 속성이 아니지만 후드 아래에서 진행되는 작업을 보여주기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="576bd38782c522977f1044640371e6f522967123" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Next:&lt;/strong&gt; The release that is under active development and testing. The next release is indicated by a release tag appended with the &lt;code&gt;-next&lt;/code&gt; identifier, such as &lt;code&gt;8.1.0-next.0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;다음 :&lt;/strong&gt; 현재 개발 및 테스트중인 릴리스입니다. 다음 릴리즈가 추가로 방출 태그에 의해 지시되는 &lt;code&gt;-next&lt;/code&gt; 식별자 등 &lt;code&gt;8.1.0-next.0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc26bb0bac2e87e6a33e03a84d8073a942b5acca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NgModules&lt;/strong&gt; configure the injector and the compiler and help organize related things together.</source>
          <target state="translated">&lt;strong&gt;NgModules&lt;/strong&gt; 는 인젝터와 컴파일러를 구성하고 관련 사항을 함께 구성하는 데 도움을줍니다.</target>
        </trans-unit>
        <trans-unit id="604f2dae86185035069b15b5576ddceeb2d17a2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Node.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Node.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="abbb940630dae1016ddb8972b14b8a607e45e0da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; After AngularJS is loaded and bootstrapped, listeners such as those wired up in your route configuration will continue to listen for route changes. To ensure listeners are shut down when AngularJS isn't being displayed, configure an &lt;code&gt;otherwise&lt;/code&gt; option with the &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider&quot;&gt;$routeProvider&lt;/a&gt; that renders an empty template. This assumes all other routes will be handled by Angular.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; AngularJS가로드되고 부트 스트랩 된 후에는 경로 구성에 연결된 것과 같은 리스너는 계속해서 경로 변경을 청취합니다. 청취자가 AngularJS와이 구성 표시되지 않을 때 종료되도록하려면 &lt;code&gt;otherwise&lt;/code&gt; 와 옵션 &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider&quot;&gt;$ routeProvider&lt;/a&gt; 빈 템플릿을 렌더링합니다. 이것은 다른 모든 경로가 Angular에 의해 처리된다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="84565e184a7079ad301db28996a2be189b9b2c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of Angular version 7, the major versions of Angular core and the CLI are aligned. This means that in order to use the CLI as you develop an Angular app, the version of &lt;code&gt;@angular/core&lt;/code&gt; and the CLI need to be the same.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Angular 버전 7에서는 Angular 코어의 주요 버전과 CLI가 정렬되어 있습니다. 즉, Angular 앱을 개발할 때 CLI를 사용하려면 &lt;code&gt;@angular/core&lt;/code&gt; 버전 과 CLI 버전 이 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="fb553c91b74e4311031c53b9d1ea080c9c1c369b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Because the returned control is of the type &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;, you need to provide an explicit type to access the method syntax for the form array instance.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 리턴 된 제어는 &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 유형이므로 양식 배열 인스턴스의 메소드 구문에 액세스하려면 명시 적 유형을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="173467ffeee0a02f4abdbd1c4b8921f8862973c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Disabling animations application-wide is useful during end-to-end (E2E) testing.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 응용 프로그램 전체에서 애니메이션을 비활성화하면 E2E (End-to-End) 테스트 중에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b80bffc3666a8be5dc5959970b1701b5c9fef215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Display the value for the form group instance in the component template using the &lt;code&gt;value&lt;/code&gt; property and &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; 특성 및 &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; 를 사용하여 컴포넌트 템플리트에서 양식 그룹 인스턴스의 값을 표시하십시오 .</target>
        </trans-unit>
        <trans-unit id="849c96b35d21cf32e39f9e8ab9330c42b9df8336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For a more detailed list of classes and directives provided by &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;Reactive forms API&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 에서 제공하는 클래스 및 지시문에 대한 자세한 목록은 &lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;반응성 양식 API&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e34344de4fad6bff6dafd2139188dd68cab0985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For complete information about each kind of form, see &lt;a href=&quot;reactive-forms&quot;&gt;Reactive Forms&lt;/a&gt; and &lt;a href=&quot;forms&quot;&gt;Template-driven Forms&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 각 양식 종류에 대한 자세한 내용은 &lt;a href=&quot;reactive-forms&quot;&gt;반응 양식&lt;/a&gt; 및 &lt;a href=&quot;forms&quot;&gt;템플릿 기반 양식을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e6ec506b865466b027c42f0e29f5fc2193f97cb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For our purposes, an element entering or leaving a view is equivalent to being inserted or removed from the DOM.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 보기에 들어가거나 나가는 요소는 DOM에서 삽입하거나 제거하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2c62e5b49ead69322ff581dcd91127525ad86d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For this example, an element entering or leaving a view is equivalent to being inserted or removed from the DOM.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 예에서보기에 들어가거나 나가는 요소는 DOM에서 삽입 또는 제거되는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b04e34bb1adeef16a72b3f4a0de7ac3b86cc77b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are not using HTTPS, the service worker will only be registered when accessing the app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; HTTPS를 사용하지 않으면 &lt;code&gt;localhost&lt;/code&gt; 의 앱에 액세스 할 때만 서비스 워커가 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="323b8213066a5d108dce9af40269e4d4acd4ba86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you have a module which has both providers and declarations, you &lt;em&gt;can&lt;/em&gt; use this technique to separate them out and you may see this pattern in legacy apps. However, since Angular 6.0, the best practice for providing services is with the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 당신은 공급자와 선언 모두가있는 모듈이있는 경우, 당신은 &lt;em&gt;할 수&lt;/em&gt; 그들을 분리하기 위해이 기술을 사용하면 기존 응용 프로그램에서이 패턴을 볼 수 있습니다. 그러나 Angular 6.0 이후 서비스를 제공하는 가장 좋은 방법은 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 속성을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f1981263a98cc7412eabf46ce2969f37ef494537" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you have a module which has both providers and declarations, you &lt;em&gt;can&lt;/em&gt; use this technique to separate them out and you may see this pattern in legacy apps. However, since Angular 6.0, the best practice for providing services is with the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providedIn&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 당신은 공급자와 선언 모두가있는 모듈이있는 경우, 당신은 &lt;em&gt;할 수&lt;/em&gt; 그들을 분리하기 위해이 기술을 사용하면 기존 응용 프로그램에서이 패턴을 볼 수 있습니다. 그러나 Angular 6.0부터 서비스를 제공하는 가장 좋은 방법은 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;providedIn&lt;/code&gt; 속성을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="93fe757b8f474edb8b919c6de032eb70c090dde4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the component file, set the trigger that defines the animations as the value of the &lt;code&gt;animations:&lt;/code&gt; property in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 구성 요소 파일 에서 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; () 데코레이터 의 &lt;code&gt;animations:&lt;/code&gt; 속성 값으로 애니메이션을 정의하는 트리거를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="07b45ca098345fb8730718bca812767b05c6b8e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In this example, you're using a single control. When using the &lt;code&gt;setValue()&lt;/code&gt; method with a &lt;a href=&quot;reactive-forms#grouping-form-controls&quot;&gt;form group&lt;/a&gt; or &lt;a href=&quot;reactive-forms#creating-dynamic-forms&quot;&gt;form array&lt;/a&gt; instance, the value needs to match the structure of the group or array.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 예에서는 단일 컨트롤을 사용하고 있습니다. 사용시 &lt;code&gt;setValue()&lt;/code&gt; A의 방법 &lt;a href=&quot;reactive-forms#grouping-form-controls&quot;&gt;형태 기&lt;/a&gt; 또는 &lt;a href=&quot;reactive-forms#creating-dynamic-forms&quot;&gt;형태 배열&lt;/a&gt; 인스턴스의 값은 그룹 또는 어레이의 구조와 일치 할 필요가있다.</target>
        </trans-unit>
        <trans-unit id="544775094b9de2efd4191fb7b06c9b609abd91fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In this example, you're using a single control. When using the &lt;code&gt;setValue()&lt;/code&gt; method with a form group or form array instance, the value needs to match the structure of the group or array.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 예에서는 단일 컨트롤을 사용하고 있습니다. 사용시 &lt;code&gt;setValue()&lt;/code&gt; 형태 기 또는 어레이 형태 예와 방법이 값이 기 어레이의 구조와 일치 할 필요가있다.</target>
        </trans-unit>
        <trans-unit id="648089a4ca28a9c812bac324dc26cef959e97c37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Instead of a form control instance for each alias, you can compose another form group instance with additional fields. The process of defining a control for each item is the same.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 각 별명에 대한 양식 제어 인스턴스 대신 추가 필드를 사용하여 다른 양식 그룹 인스턴스를 작성할 수 있습니다. 각 항목에 대한 제어를 정의하는 프로세스는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="bdd767ef6ea48a4df8e51d1d7c169a747290e349" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Please see the &lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;resolution rules&lt;/a&gt; section to understand the relationship between the &lt;code&gt;ModuleInjector&lt;/code&gt; tree and the &lt;code&gt;ElementInjector&lt;/code&gt; tree.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 트리와 &lt;code&gt;ElementInjector&lt;/code&gt; 트리 의 관계를 이해 하려면 &lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;해결 규칙&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7630581ca37f1a339343eb6890544c170e7948b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Remember that ngModel directive is defined as a part of Angular FormsModule and you need to include FormsModule in the imports: [...] section of the Angular module metadata, in which you want to use it.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; ngModel 지시문은 Angular FormsModule의 일부로 정의되며 사용하려는 Angular 모듈 메타 데이터의 imports : [...] 섹션에 FormsModule을 포함시켜야합니다.</target>
        </trans-unit>
        <trans-unit id="d393b3fbba36be410c476749955c63faafa043f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Right now, you'll also want to include the &lt;code&gt;--disable-gpu&lt;/code&gt; flag if you're running on Windows. See &lt;a href=&quot;https://crbug.com/737678&quot;&gt;crbug.com/737678&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Windows에서 실행중인 경우 &lt;code&gt;--disable-gpu&lt;/code&gt; 플래그도 포함 시키려고 합니다. &lt;a href=&quot;https://crbug.com/737678&quot;&gt;crbug.com/737678을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="65dd6a1a9c3f6fce10d971d553de5ef7de922d9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See a &lt;a href=&quot;animations#animation-api-summary&quot;&gt;summary of available animation functions&lt;/a&gt; at the end of this guide.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 안내서 끝에서 &lt;a href=&quot;animations#animation-api-summary&quot;&gt;사용 가능한 애니메이션 기능&lt;/a&gt; 에 대한 요약을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5572bda73663c35675a744e39de8d68631cdcfc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig&quot;&gt;LocationUpgradeConfig&lt;/a&gt;&lt;/code&gt; for more configuration options available to the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; 메소드에 사용 가능한 추가 구성 옵션 은 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig&quot;&gt;LocationUpgradeConfig&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfd3b929a9097e1579b3d87589f89c6e691b80a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See the Material Design website's topic on &lt;a href=&quot;https://material.io/design/motion/speed.html#easing&quot;&gt;Natural easing curves&lt;/a&gt; for general information on easing curves.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;https://material.io/design/motion/speed.html#easing&quot;&gt;여유 곡선에&lt;/a&gt; 대한 일반적인 정보 는 머티리얼 디자인 웹 사이트의 자연 여유 곡선 에 관한 주제를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="258b80c7a9e61906876d0dbda43f1e64c5650b04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some additional notes on using styles within &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; 기능 내에서 스타일을 사용하는 것에 대한 추가 참고 사항 .</target>
        </trans-unit>
        <trans-unit id="5ac4129ff24615dbb03eabbed26139b3a94934ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The 'heroes' string inside the factory refers to the AngularJS &lt;code&gt;HeroesService&lt;/code&gt;. It is common in AngularJS apps to choose a service name for the token, for example &quot;heroes&quot;, and append the &quot;Service&quot; suffix to create the class name.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 팩토리 내의 'heroes'문자열은 AngularJS &lt;code&gt;HeroesService&lt;/code&gt; 를 나타냅니다 . AngularJS 앱에서는 토큰의 서비스 이름 (예 : &quot;heroes&quot;)을 선택하고 &quot;Service&quot;접미사를 추가하여 클래스 이름을 만드는 것이 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="03b12efce734e6cab7a1ae05993b8844d5d79782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; function is used to group animation &lt;em&gt;steps&lt;/em&gt;, rather than animated elements.</source>
          <target state="translated">&lt;strong&gt;주 : &lt;/strong&gt;&lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt; 함수는 그룹 애니메이션에 사용되는 &lt;em&gt;단계&lt;/em&gt; 가 아닌 요소 애니메이션.</target>
        </trans-unit>
        <trans-unit id="22b535bfb86b4997c243ad124e9a68fb6a7f2818" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method is a pattern used to register application-wide providers. Read more about application-wide providers in the &lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;Singleton services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;주 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 메소드는 애플리케이션 전반 제공자를 등록하는 데 사용되는 패턴이다. &lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;Singleton 서비스&lt;/a&gt; 가이드 에서 애플리케이션 전체 제공 업체에 대해 자세히 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="ce5009f76e5fedd39d33fd60393d55cde42d6371" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method is a pattern used to register application-wide providers. Read more about application-wide providers in the &lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;Singleton services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;RouterModule.forRoot&lt;/code&gt; 의 방법은 응용 프로그램 전체 공급자를 등록하는 데 사용되는 패턴이다. &lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;Singleton 서비스&lt;/a&gt; 가이드 에서 응용 프로그램 전체 공급자에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="5cab946a01d7e7f66d555faf928fa542eddfcb31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;data&lt;/code&gt; property names that you use can be arbitrary. For example, the name &lt;em&gt;animation&lt;/em&gt; used in the example above is an arbitrary choice.</source>
          <target state="translated">&lt;strong&gt;참고 : 사용&lt;/strong&gt; 하는 &lt;code&gt;data&lt;/code&gt; 속성 이름은 임의적 일 수 있습니다. 예를 들어, 위 예제에서 사용 된 이름 &lt;em&gt;애니메이션&lt;/em&gt; 은 임의의 선택입니다.</target>
        </trans-unit>
        <trans-unit id="47d12f956cd259b3cf0f6b96b582eb6625c79bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;backgroundColor&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;reusable-animations&quot;&gt;time&lt;/a&gt;&lt;/code&gt; inputs are replaced during runtime.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;height&lt;/code&gt; , &lt;code&gt;opacity&lt;/code&gt; , &lt;code&gt;backgroundColor&lt;/code&gt; 로 하고, &lt;code&gt;&lt;a href=&quot;reusable-animations&quot;&gt;time&lt;/a&gt;&lt;/code&gt; 입력은 런타임시 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="6b7dda64ca80a699175f367518c192a015d3dcd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;backgroundColor&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt; inputs are replaced during runtime.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;height&lt;/code&gt; , &lt;code&gt;opacity&lt;/code&gt; , &lt;code&gt;backgroundColor&lt;/code&gt; 로 하고, &lt;code&gt;time&lt;/code&gt; 입력은 런타임시 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="7b0d3d594628c36d5459af055db9991ed02a9334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The button in the snippet above also has a &lt;code&gt;disabled&lt;/code&gt; binding attached to it to disable the button when &lt;code&gt;profileForm&lt;/code&gt; is invalid. You aren't performing any validation yet, so the button is always enabled. Basic form validation is covered in the &lt;a href=&quot;reactive-forms#basic-form-validation&quot;&gt;Validating form input&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 위의 스 니펫에 있는 버튼에는 &lt;code&gt;profileForm&lt;/code&gt; 이 유효하지 않을 때 버튼을 비활성화하기 위해 연결된 &lt;code&gt;disabled&lt;/code&gt; 바인딩 이 있습니다. 아직 유효성 검사를 수행하고 있지 않으므로 버튼이 항상 활성화되어 있습니다. 기본 양식 유효성 검사는 &lt;a href=&quot;reactive-forms#basic-form-validation&quot;&gt;양식 입력 유효성 검사&lt;/a&gt; 섹션에서 다룹니다.</target>
        </trans-unit>
        <trans-unit id="8de94c6706c2235098f7e6dec03fcc9ce5f419a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The button in the snippet above also has a &lt;code&gt;disabled&lt;/code&gt; binding attached to it to disable the button when &lt;code&gt;profileForm&lt;/code&gt; is invalid. You aren't performing any validation yet, so the button is always enabled. Simple form validation is covered in the &lt;a href=&quot;reactive-forms#simple-form-validation&quot;&gt;Simple form validation&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 코드 조각에있는 버튼은 위의도가 &lt;code&gt;disabled&lt;/code&gt; 때 버튼을 비활성화에 연결된 바인딩 &lt;code&gt;profileForm&lt;/code&gt; 이 유효하지 않습니다. 아직 유효성 검사를 수행하지 않으므로 버튼이 항상 활성화되어 있습니다. 단순 양식 검증은 &lt;a href=&quot;reactive-forms#simple-form-validation&quot;&gt;단순 양식 검증&lt;/a&gt; 섹션에서 다룹니다.</target>
        </trans-unit>
        <trans-unit id="0de5049ad50ebc54694924b374d7991952a2f7cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The example app uses &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; so the app does not throw an error, but the principles are the same.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 예제 앱은 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 하므로 앱에서 오류가 발생하지 않지만 원칙은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="30a44395a19cec398a3a03e8a86843421b55639b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The following example uses &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; methods, which is discussed in the &lt;a href=&quot;complex-animation-sequences#complex-sequence&quot;&gt;complex sequences&lt;/a&gt; page.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 다음 예제는 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 메서드를 사용하며, 이는 &lt;a href=&quot;complex-animation-sequences#complex-sequence&quot;&gt;복잡한 시퀀스&lt;/a&gt; 페이지 에서 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="3cb725a34cbbdcad00d542f8a4dcd1262e42f009" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation. When doing so inside a guard, the guard should return &lt;code&gt;false&lt;/code&gt;;</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 가드는 라우터가 다른 곳을 탐색하도록 지시하여 현재 탐색을 효과적으로 취소 할 수 있습니다. 경비병 내부에서 그렇게 할 때 경비원은 &lt;code&gt;false&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b663a8751d00b5e30925212fb1d4057d6634eade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The hierarchical structure of views is a key factor in the way Angular detects and responds to changes in the DOM and app data.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 뷰의 계층 구조는 Angular가 DOM 및 앱 데이터의 변경 사항을 감지하고 응답하는 방식의 핵심 요소입니다.</target>
        </trans-unit>
        <trans-unit id="46abe182e7e350bab98adeb67b236ad65d2c0e46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The observable provided to the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; must also complete. If the observable does not complete, the navigation does not continue.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 제공된 Observable 도 완료해야합니다. Observable이 완료되지 않으면 탐색이 계속되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b8e7446cf968ffa0c95e4aded13d71f44252abb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The observable provided to the Router &lt;em&gt;must&lt;/em&gt; also complete. If the observable does not complete, the navigation will not continue.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 라우터에 제공된 옵저버 블 도 완료 &lt;em&gt;해야합니다&lt;/em&gt; . 관찰 가능 항목이 완료되지 않으면 탐색이 계속되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a786ef68a3e2fe7f725ac6134aca12369aa45c68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The transition states must match the &lt;code&gt;data&lt;/code&gt; property value defined in the route configuration.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 전환 상태는 경로 구성에 정의 된 &lt;code&gt;data&lt;/code&gt; 속성 값 과 일치해야 합니다.</target>
        </trans-unit>
        <trans-unit id="23b01bc5dc25a207a691ea975f34d81a2c815bbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are two example apps where you can see this scenario; the more advanced &lt;span name=&quot;ngmodules&quot;&gt;NgModules live example&lt;/span&gt;, which contains &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; in the routing modules and the &lt;code&gt;GreetingModule&lt;/code&gt;, and the simpler &lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading live example&lt;/span&gt;. For an introductory explanation see the &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading Feature Modules&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 시나리오를 볼 수있는 두 가지 예제 앱이 있습니다. 더 많은 고급 &lt;span name=&quot;ngmodules&quot;&gt;NgModules 라이브 예를&lt;/span&gt; 포함, &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; 라우팅 모듈과의 &lt;code&gt;GreetingModule&lt;/code&gt; 및 간단한 &lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;게으른로드 라이브 예&lt;/span&gt; . 소개에 대한 설명은 &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;지연 로딩 기능 모듈&lt;/a&gt; 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2b56ec6016ea69adbe569916a412b24223c1a5db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are two example apps where you can see this scenario; the more advanced &lt;span name=&quot;ngmodules&quot;&gt;NgModules live example&lt;/span&gt;, which contains &lt;code&gt;forRoot()&lt;/code&gt; and &lt;code&gt;forChild()&lt;/code&gt; in the routing modules and the &lt;code&gt;GreetingModule&lt;/code&gt;, and the simpler &lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading live example&lt;/span&gt;. For an introductory explanation see the &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading Feature Modules&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 시나리오를 볼 수있는 두 가지 예제 앱이 있습니다. 라우팅 모듈 및 &lt;code&gt;GreetingModule&lt;/code&gt; 에 &lt;code&gt;forRoot()&lt;/code&gt; 및 &lt;code&gt;forChild()&lt;/code&gt; 를 포함하는 고급 &lt;span name=&quot;ngmodules&quot;&gt;NgModules 라이브 예제&lt;/span&gt; 및보다 간단한 &lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading 라이브 예제&lt;/span&gt; . 소개 설명은 &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;지연 로딩 기능 모듈&lt;/a&gt; 가이드를 참조하세요 .&lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0fda353d0348bfea57e1e202af48841b1170919e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These wrappers help hide the complexity of the &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function. There are more wrappers for different backend technologies at the &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universal repository&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이러한 래퍼는 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; 함수 의 복잡성을 숨기는 데 도움이 됩니다. &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universal 저장소&lt;/a&gt; 에는 다양한 백엔드 기술에 대한 더 많은 래퍼가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d3b75f0b175c9c97572c03ae1d5772c234ec639" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These wrappers help hide the complexity of the &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function. There are more wrappers for different backend technologies at the &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universal repository&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 래퍼는 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 함수 의 복잡성을 숨길 수 있습니다. &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universal 저장소&lt;/a&gt; 에는 다른 백엔드 기술에 대한 랩퍼가 더 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f53f2bd5bd0eadea8ec6717cdb6b0c8bc759ea73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This sample server doesn't handle data requests.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 샘플 서버는 데이터 요청을 처리하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="08f8987127087d9842a4e4e5bdd3976ba48ec115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Use the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method in the root module, &lt;code&gt;AppModule&lt;/code&gt;, to register top-level application routes and providers. For feature modules, call the &lt;code&gt;RouterModule.forChild&lt;/code&gt; method to register additional routes.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 최상위 모듈 응용 프로그램 경로 및 공급자를 등록 하려면 루트 모듈 &lt;code&gt;AppModule&lt;/code&gt; 의 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; 메서드를 사용하십시오 . 기능 모듈의 경우 &lt;code&gt;RouterModule.forChild&lt;/code&gt; 메서드를 호출하여 추가 경로를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="e9d01ccecc14509f8ee59afc2465d9bda2262e3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Usually, you declare the components and their templates in separate files. For the purposes of understanding how the injection system works, it is useful to look at them from the point of view of a combined logical tree. The term logical distinguishes it from the render tree (your application DOM tree). To mark the locations of where the component templates are located, this guide uses the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; pseudo element, which doesn't actually exist in the render tree and is present for mental model purposes only.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 일반적으로 구성 요소와 해당 템플릿을 별도의 파일로 선언합니다. 주입 시스템의 작동 방식을 이해하기 위해 결합 된 논리 트리의 관점에서 그것들을 보는 것이 유용합니다. 논리적이라는 용어는 렌더 트리 (응용 프로그램 DOM 트리)와 구별됩니다. 구성 요소 템플릿이있는 위치를 표시하기 위해이 안내서에서는 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 의사 요소를 사용합니다.이 요소는 실제로 렌더 트리에 존재하지 않으며 정신 모델 용도로만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="70df557fb1fbaae3691456f5ebacd0a025f111c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; We listen to the 'change' event because 'input' events aren't fired for selects in Firefox and IE: &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&quot;&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&lt;/a&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&quot;&gt;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Firefox 및 IE에서는 '입력'이벤트가 선택되지 않으므로 'change'이벤트를 수신합니다. &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&quot;&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350 &lt;/a&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&quot;&gt;https://developer.microsoft .com / en-us / microsoft-edge / platform / issues / 4660045 /&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="64f0154c22ebb29b72b8d1f8e6731d45b0bc1411" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you use the CLI to create your app, the root application module &lt;code&gt;app.module.ts&lt;/code&gt; is placed in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; CLI를 사용하여 앱을 만들 때 루트 응용 프로그램 모듈 &lt;code&gt;app.module.ts&lt;/code&gt; 는 &lt;code&gt;src/app&lt;/code&gt; 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="de3ce3f39fa05daf713e1064fe0d6b9d129a4efc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Within each &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function call, an element can only be in one state at any given time. However, it's possible for multiple triggers to be active at once.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 각 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 함수 호출 내 에서 요소는 주어진 시간에 하나의 상태에만있을 수 있습니다. 그러나 여러 트리거가 한 번에 활성화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30cc6ed75f891598162f289c4d2116513f3b3f5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can define the control with just the initial value, but if your controls need sync or async validation, add sync and async validators as the second and third items in the array.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 초기 값만으로 컨트롤을 정의 할 수 있지만 컨트롤에 동기화 또는 비동기 유효성 검사가 필요한 경우 배열의 두 번째 및 세 번째 항목으로 동기화 및 비동기 유효성 검사기를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="93de3f0193cc4096f2bc013adc716b8f8c4795c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can leave all the &lt;code&gt;FlowerService&lt;/code&gt; related code in place as it will allow a comparison with the &lt;code&gt;AnimalService&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 당신은 모든 떠날 수 &lt;code&gt;FlowerService&lt;/code&gt; 는과의 비교 수 같은 장소에서 관련 코드를 &lt;code&gt;AnimalService&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="f5788bdbe71c7954ba5852cebff9a44a86b21bcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;https://angular.io/generated/zips/universal/universal.zip&quot;&gt;Download the finished sample code&lt;/a&gt;, which runs in a &lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg; Express&lt;/a&gt; server.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;https://angular.io/generated/zips/universal/universal.zip&quot;&gt;완성 된 샘플 코드를 다운로드 &lt;/a&gt;&lt;strong&gt;하십시오.이 &lt;/strong&gt;코드 는 &lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg; Express&lt;/a&gt; 서버 에서 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="14d914790250c2b88bffd67e3cfbbb564bbd7ccd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;TestBed.get()&lt;/code&gt; was deprecated as of Angular version 9. To help minimize breaking changes, Angular introduces a new function called &lt;code&gt;TestBed.inject()&lt;/code&gt;, which you should use instead. For information on the removal of &lt;code&gt;TestBed.get()&lt;/code&gt;, see its entry in the &lt;a href=&quot;deprecations#index&quot;&gt;Deprecations index&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;TestBed.get()&lt;/code&gt; 은 Angular 버전 9에서 더 이상 사용되지 않습니다. 변경 사항을 최소화하기 위해 Angular는 대신 사용해야하는 &lt;code&gt;TestBed.inject()&lt;/code&gt; 라는 새 함수를 도입했습니다 . &lt;code&gt;TestBed.get()&lt;/code&gt; 제거에 대한 자세한 내용 은 &lt;a href=&quot;deprecations#index&quot;&gt;Deprecations 인덱스의&lt;/a&gt; 해당 항목을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b58e0364158266d8c7c243829e51629d5c43a060" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Any&lt;/em&gt; web server technology can serve a Universal app as long as it can call Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function. The principles and decision points discussed here apply to any web server technology.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;em&gt;모든&lt;/em&gt; 웹 서버 기술은 Universal의 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; 함수를 호출 할 수있는 한 Universal 앱을 제공 할 수 있습니다 . 여기에 설명 된 원칙과 결정 사항은 모든 웹 서버 기술에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="5f06fc5732efa20e58ad7d9a972d9aa2088a985d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Any&lt;/em&gt; web server technology can serve a Universal app as long as it can call Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function. The principles and decision points discussed here apply to any web server technology.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;em&gt;모든&lt;/em&gt; 웹 서버 기술은 Universal의 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 함수를 호출 할 수있는 한 Universal 앱을 제공 할 수 있습니다 . 여기에 설명 된 원칙과 결정 사항은 모든 웹 서버 기술에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2c0b0d88a724e3ac9f07e02d7cdf853120fecc49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;Download the finished sample code, which runs in a &lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg; Express&lt;/a&gt; server.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg; Express&lt;/a&gt; 서버 에서 실행되는 완성 된 샘플 코드를 다운로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b50cff5f4086fcebeb5e570446e27289b40ae27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; references&lt;/strong&gt; go in the &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 참조 만이 &lt;/strong&gt; &lt;code&gt;imports&lt;/code&gt; 배열에 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="cee89df418d808246e9b86076caf2b0df6fd2c91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only one title (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;) per document!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;문서 당 하나의 제목 ( &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; ) 만 !&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f0b3abaa461296cdd8fc0abbaa308569071229" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PENDING&lt;/strong&gt;: This control is in the midst of conducting a validation check.</source>
          <target state="translated">&lt;strong&gt;보류 중&lt;/strong&gt; :이 제어는 유효성 검사를 수행하는 중입니다.</target>
        </trans-unit>
        <trans-unit id="d9fc890426cc94f6989561c4686510d629b8c55d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pass values, not elements&lt;/strong&gt; &amp;mdash; Instead of passing the &lt;code&gt;newHero&lt;/code&gt; into the component's &lt;code&gt;addHero&lt;/code&gt; method, get the input box value and pass &lt;em&gt;that&lt;/em&gt; to &lt;code&gt;addHero&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;값이 아닌 요소를 통과&lt;/strong&gt; 하는 대신 전달하는 - &lt;code&gt;newHero&lt;/code&gt; 를 구성 요소의에 &lt;code&gt;addHero&lt;/code&gt; 의 , 방법 입력 상자의 값을 얻을 통과 &lt;em&gt;그&lt;/em&gt; 에게 &lt;code&gt;addHero&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="708b277a2f68a14cef92957000b3968f4e41c1c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Patch releases&lt;/strong&gt; are low risk, bug fix releases. No developer assistance is expected during update.</source>
          <target state="translated">&lt;strong&gt;패치 릴리스&lt;/strong&gt; 는 위험이 낮고 버그 수정 릴리스입니다. 업데이트 중에는 개발자 지원이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0cd0b4a7c54363dce840ab7388d1519bac26c747" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast</source>
          <target state="translated">&lt;strong&gt;Pitchfork 까마귀 기호학&lt;/strong&gt; , 루프 파티 팝업 &lt;em&gt;팔 레오&lt;/em&gt; 메신저 백 cred Carles tousled Truffaut yr. 기호학 바이러스 성 프리 건 VHS, Shoreditch는 McSweeney를 방해합니다. Intelligentsia 케일 칩 바이스 4 달러 토스트</target>
        </trans-unit>
        <trans-unit id="4c432f70eff95dd8fce9c3f8f8ee240fdb5b538a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</source>
          <target state="translated">&lt;strong&gt;갈퀴 까마귀 semiotics&lt;/strong&gt; , 지붕 파티 팝업 &lt;em&gt;paleo&lt;/em&gt; 메신저 가방 cred Carles torusled Truffaut yr. Semiotics 바이러스 프리 간 VHS, Shoreditch는 McSweeney를 방해합니다. Intelligentsia 양배추 칩 부통령 4 달러 토스트, 슐 리츠 십자가</target>
        </trans-unit>
        <trans-unit id="cefd81b08fbd8e4d1d9b8b740c6283f911489e3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast</source>
          <target state="translated">&lt;strong&gt;Pitchfork 까마귀 기호학&lt;/strong&gt; , 루프 파티 팝업 &lt;em&gt;paleo&lt;/em&gt; 메신저 메신저 백 cred Carles tousled Truffaut yr. 기호학 바이러스 성 프리 건 VHS, Shoreditch는 McSweeney를 방해합니다. Intelligentsia 케일 칩 바이스 4 달러 토스트</target>
        </trans-unit>
        <trans-unit id="95a1b4770819e0a29d5da0018adc297164c08a4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</source>
          <target state="translated">&lt;strong&gt;갈퀴 까마귀 semiotics&lt;/strong&gt; , 지붕 파티 팝업 &lt;em&gt;paleo&lt;/em&gt; 메신저 메신저 가방 cred Carles torusled Truffaut yr. Semiotics 바이러스 프리 간 VHS, Shoreditch는 McSweeney를 방해합니다. Intelligentsia 양배추 칩 부통령 4 달러 토스트, 슐 리츠 십자가</target>
        </trans-unit>
        <trans-unit id="473d3902f591877838d6a7ab6b5227c1d6bcd07a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prerequisite:&lt;/strong&gt; Make sure you have &lt;a href=&quot;setup-local#prerequisites&quot;&gt;Node.js&amp;reg; and npm installed&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;전제 조건 : &lt;/strong&gt;&lt;a href=&quot;setup-local#prerequisites&quot;&gt;Node.js&amp;reg; 및 npm이 설치되어&lt;/a&gt; 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="32ce9dea35eb6602b61f5e8553548d4ce67a0350" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prerequisites&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Prerequisites&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="709be87fd84c09acfc000c260a431956877eba9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; are more robust: they're more scalable, reusable, and testable. If forms are a key part of your application, or you're already using reactive patterns for building your application, use reactive forms.</source>
          <target state="translated">&lt;strong&gt;반응성 양식&lt;/strong&gt; 은 더욱 강력합니다. 확장 성, 재사용 성 및 테스트가 가능합니다. 양식이 응용 프로그램의 핵심 부분이거나 이미 응용 프로그램 구축에 반응 패턴을 사용하고 있다면 반응 양식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e685c5e24ec500b6b876387c87e2a2a6bfdb201e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; define custom validators as &lt;strong&gt;functions&lt;/strong&gt; that receive a control to validate.</source>
          <target state="translated">&lt;strong&gt;반응 형 양식&lt;/strong&gt; 은 사용자 지정 유효성 검사기 를 유효성 검사 컨트롤을받는 &lt;strong&gt;함수&lt;/strong&gt; 로 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="a045f7f19ab14d56ef2b515f6483230485fdd57a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; keep the data model pure by providing it as an immutable data structure. Each time a change is triggered on the data model, the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance returns a new data model rather than updating the existing data model. This gives you the ability to track unique changes to the data model through the control's observable. Change detection is more efficient because it only needs to update on unique changes. Because data updates follow reactive patterns, you can integrate with observable operators to transform data.</source>
          <target state="translated">&lt;strong&gt;반응 형 양식&lt;/strong&gt; 은 데이터 모델을 변경 불가능한 데이터 구조로 제공하여 순수하게 유지합니다. 데이터 모델에서 변경이 트리거 될 때마다 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스는 기존 데이터 모델을 업데이트하는 대신 새 데이터 모델을 반환합니다. 이를 통해 컨트롤의 관찰 가능 항목을 통해 데이터 모델의 고유 한 변경 사항을 추적 할 수 있습니다. 고유 한 변경 사항에 대해서만 업데이트하면되므로 변경 감지가 더 효율적입니다. 데이터 업데이트는 반응 형 패턴을 따르기 때문에 관찰 가능한 연산자와 통합하여 데이터를 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b740b48c800974f154bba8d1b973edfecff1e2dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; keep the data model pure by providing it as an immutable data structure. Each time a change is triggered on the data model, the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance returns a new data model rather than updating the existing data model. This gives you the ability to track unique changes to the data model through the control's observable. This provides one way for change detection to be more efficient because it only needs to update on unique changes. It also follows reactive patterns that integrate with observable operators to transform data.</source>
          <target state="translated">&lt;strong&gt;반응성 양식&lt;/strong&gt; 은 데이터 모델을 불변 데이터 구조로 제공하여 데이터 모델을 순수하게 유지합니다. 데이터 모델에서 변경이 트리거 될 때마다 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스는 기존 데이터 모델을 업데이트하지 않고 새 데이터 모델을 리턴합니다. 이를 통해 컨트롤의 관찰 가능을 통해 데이터 모델의 고유 한 변경 사항을 추적 할 수 있습니다. 이렇게하면 고유 한 변경 사항 만 업데이트하면되므로 변경 검색의 효율성을 높일 수 있습니다. 또한 관측 가능한 연산자와 통합되어 데이터를 변환하는 반응 패턴을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="fbb97dd1d93d98c721ec3da4ae659eab5c63a582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; provide access to low-level APIs and synchronous access to the form model, making creating large-scale forms easier.</source>
          <target state="translated">&lt;strong&gt;반응성 양식&lt;/strong&gt; 은 저수준 API에 대한 액세스 및 양식 모델에 대한 동기 액세스를 제공하여 대규모 양식을보다 쉽게 ​​작성합니다.</target>
        </trans-unit>
        <trans-unit id="075f1a0f2409ffebd1ffdbc27d628cb021f456ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; provide direct, explicit access to the underlying forms object model. Compared to template-driven forms, they are more robust: they're more scalable, reusable, and testable. If forms are a key part of your application, or you're already using reactive patterns for building your application, use reactive forms.</source>
          <target state="translated">&lt;strong&gt;반응 형 양식&lt;/strong&gt; 은 기본 양식 개체 모델에 대한 직접적이고 명시적인 액세스를 제공합니다. 템플릿 기반 양식에 비해 더 강력합니다. 확장 성, 재사용 및 테스트가 가능합니다. 양식이 애플리케이션의 핵심 부분이거나 이미 애플리케이션 빌드에 반응 형 패턴을 사용하고있는 경우 반응 형 양식을 사용하세요.</target>
        </trans-unit>
        <trans-unit id="9d63209425ff6ede2412db4302637e3c12254206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Register the control in the template&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;템플릿에 컨트롤 등록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cfb401a59a39c2e660837d81259c434d0a885126" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Register the reactive forms module&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;반응 양식 모듈 등록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11549f9940889bdcc6705f4f1c2b9f3cd0acf0c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Release candidate:&lt;/strong&gt; A release that is feature complete and in final testing. A release candidate is indicated by a release tag appended with the &lt;code&gt;-rc&lt;/code&gt; identifier, such as version &lt;code&gt;8.1.0-rc.0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;릴리스 후보 :&lt;/strong&gt; 기능이 완전하고 최종 테스트중인 릴리스입니다. 릴리스 후보는 버전 &lt;code&gt;8.1.0-rc.0&lt;/code&gt; 과 같이 &lt;code&gt;-rc&lt;/code&gt; 식별자가 추가 된 릴리스 태그로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="838b09b5d8525736cd6aca78332e34f8ca1bb45a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Release candidate:&lt;/strong&gt; A release that is feature complete and in final testing. A release candidate is indicated by a release tag appended with the &lt;code&gt;rc&lt;/code&gt; identifier, such as version &lt;code&gt;8.1.0-rc&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;릴리스 후보 :&lt;/strong&gt; 기능이 완성되고 최종 테스트중인 릴리스입니다. 릴리스 후보는 버전 &lt;code&gt;8.1.0-rc&lt;/code&gt; 와 같은 &lt;code&gt;rc&lt;/code&gt; 식별자가 추가 된 릴리스 태그로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="d80cede24d8f6a6f5970fefe563196691a4ff05d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember:&lt;/strong&gt; you only get the &lt;em&gt;initial&lt;/em&gt; value of the parameter map with this technique. Stick with the observable &lt;code&gt;paramMap&lt;/code&gt; approach if there's even a chance that the router could re-use the component. This sample stays with the observable &lt;code&gt;paramMap&lt;/code&gt; strategy just in case.</source>
          <target state="translated">&lt;strong&gt;기억하십시오 :&lt;/strong&gt; 당신은 단지 얻을 &lt;em&gt;처음&lt;/em&gt; 이 기술 매개 변수 맵의 값입니다. 라우터가 구성 요소를 재사용 할 가능성이있는 경우 관찰 가능한 &lt;code&gt;paramMap&lt;/code&gt; 접근 방식을 고수 하십시오. 이 샘플은 &lt;code&gt;paramMap&lt;/code&gt; 하여 관찰 가능한 paramMap 전략을 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="4f446c02a52837521e5a6b51894f8db8590518d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reminder:&lt;/strong&gt; The &quot;QuickStart seed&quot; example was created prior to the Angular CLI, so there are some differences between what is described here and an Angular CLI application.</source>
          <target state="translated">&lt;strong&gt;주의 사항 :&lt;/strong&gt; &quot;QuickStart seed&quot;예제는 Angular CLI 이전에 작성되었으므로 여기에 설명 된 내용과 Angular CLI 애플리케이션간에 약간의 차이가 있습니다.</target>
        </trans-unit>
        <trans-unit id="14427d3b847d480d9d47f56458454e25d491878e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource URL&lt;/strong&gt; is a URL that will be loaded and executed as code, for example, in &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;리소스 URL&lt;/strong&gt; 은 &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt; 와 같이 코드로로드되고 실행될 URL입니다 .</target>
        </trans-unit>
        <trans-unit id="03049e5993fa21ca8b206a4b8780ca4038880a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Running&lt;/strong&gt; For example, webpack compiles. This ends when webpack finishes and your builder emits a &lt;code&gt;BuilderOutput&lt;/code&gt; object.</source>
          <target state="translated">&lt;strong&gt;실행&lt;/strong&gt; 예를 들어 webpack이 컴파일됩니다. 이것은 웹팩이 완료되고 빌더가 &lt;code&gt;BuilderOutput&lt;/code&gt; 오브젝트를 생성 하면 종료됩니다 .</target>
        </trans-unit>
        <trans-unit id="e07d610b5c16aa4b2bdca2a424387d9854e37e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Runtime:&lt;/strong&gt; Injector configuration via the &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt;런타임 : &lt;/strong&gt; &lt;code&gt;providers&lt;/code&gt; 배열을 통한 인젝터 구성 .</target>
        </trans-unit>
        <trans-unit id="b31d5dd2a2bc3b46b020204363d5d73e74f48bcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RxJS marble testing&lt;/strong&gt; is a great way to test observable scenarios, both simple and complex. You've likely seen the &lt;a href=&quot;http://rxmarbles.com/&quot;&gt;marble diagrams&lt;/a&gt; that illustrate how observables work. Marble testing uses a similar marble language to specify the observable streams and expectations in your tests.</source>
          <target state="translated">&lt;strong&gt;RxJS 대리석 테스트&lt;/strong&gt; 는 간단하고 복잡한 관찰 가능한 시나리오를 테스트하는 좋은 방법입니다. 관찰 가능한 작동 방식을 보여주는 &lt;a href=&quot;http://rxmarbles.com/&quot;&gt;대리석 다이어그램&lt;/a&gt; 을 보았을 것입니다. 대리석 테스트는 유사한 대리석 언어를 사용하여 테스트에서 관찰 가능한 스트림과 기대치를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="48825014938eb7915005039dae95b10cc2130328" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Save form data&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;양식 데이터 저장&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66fe1d46bd141ee07e93d23bcd1758af621ad8e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the &lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;를 참조하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="43ea0d44435c8b67d128290fc1634480ad748492" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the Angular syntax in this &lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;이것의 Angular 구문을 참조하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="6b304202d6b9b7d59ab65a8e6057866905abb614" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static asset&lt;/strong&gt;: all other requests.</source>
          <target state="translated">&lt;strong&gt;정적 자산&lt;/strong&gt; : 다른 모든 요청.</target>
        </trans-unit>
        <trans-unit id="cbf65f3b89682af8d30c19f2bd5eb2048c642179" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static:&lt;/strong&gt; Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured via the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt;정적 :&lt;/strong&gt; 컴파일러에서 지시문 선택기에 대해 알려주고 컴파일러에서 지시문이 선택기 일치를 통해 적용되는 위치를 알려줍니다. 이것은 &lt;code&gt;declarations&lt;/code&gt; 배열을 통해 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="976d3a67076ee0a889e6579cde70008f39c15b63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;스타일 예&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="223854d9e937adcab6eba006aec80e64f11c7c6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style&lt;/strong&gt; is used when binding CSS into the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;스타일&lt;/strong&gt; 은 CSS를 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 속성에 바인딩 할 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e8643df547d495e2f243fdba32a32e4e7a459fdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sync validators&lt;/strong&gt;: Synchronous functions that take a control instance and immediately return either a set of validation errors or &lt;code&gt;null&lt;/code&gt;. You can pass these in as the second argument when you instantiate a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;동기화 유효성 검사기&lt;/strong&gt; : 제어 인스턴스를 사용하고 유효성 검사 오류 집합 또는 &lt;code&gt;null&lt;/code&gt; 을 즉시 반환하는 동기 함수입니다 . &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 을 인스턴스화 할 때 두 번째 인수로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d23c9b31a96802fe5f1117cb148697c5c8938e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sync validators&lt;/strong&gt;: functions that take a control instance and immediately return either a set of validation errors or &lt;code&gt;null&lt;/code&gt;. You can pass these in as the second argument when you instantiate a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;유효성 검사기 동기화&lt;/strong&gt; : 제어 인스턴스를 가져 와서 유효성 검사 오류 집합 또는 &lt;code&gt;null&lt;/code&gt; 을 즉시 반환하는 함수입니다 . &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스화 할 때 두 번째 인수로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="736217d05af049a7575b12dd321ddde95c5b4ec4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template binding works with &lt;em&gt;properties&lt;/em&gt; and &lt;em&gt;events&lt;/em&gt;, not &lt;em&gt;attributes&lt;/em&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;템플릿 바인딩은 &lt;em&gt;속성이&lt;/em&gt; 아닌 &lt;em&gt;속성&lt;/em&gt; 및 &lt;em&gt;이벤트&lt;/em&gt; 와 함께 작동 &lt;em&gt;합니다&lt;/em&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a34fe84a9cb32717df61c02150c2c1128d88b5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; are tied to template &lt;strong&gt;directives&lt;/strong&gt;, and must provide custom validator directives that wrap validation functions.</source>
          <target state="translated">&lt;strong&gt;템플릿 기반 양식&lt;/strong&gt; 은 템플릿 &lt;strong&gt;지시문에&lt;/strong&gt; 연결되며 유효성 검사 기능을 래핑하는 사용자 지정 유효성 검사기 지시문을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="39611775e2f3c33d40770f7b55ff0283d9358dcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; are useful for adding a simple form to an app, such as an email list signup form. They're easy to add to an app, but they don't scale as well as reactive forms. If you have very basic form requirements and logic that can be managed solely in the template, use template-driven forms.</source>
          <target state="translated">&lt;strong&gt;템플릿 기반 양식&lt;/strong&gt; 은 이메일 목록 가입 양식과 같은 간단한 양식을 앱에 추가하는 데 유용합니다. 앱에 쉽게 추가 할 수 있지만 반응 형뿐만 아니라 확장 성도 없습니다. 템플릿에서 단독으로 관리 할 수있는 매우 기본적인 양식 요구 사항과 논리가있는 경우 템플릿 기반 양식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a1d2475a52a172617485b5340a76d953fe981997" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; rely on directives in the template to create and manipulate the underlying object model. They are useful for adding a simple form to an app, such as an email list signup form. They're easy to add to an app, but they don't scale as well as reactive forms. If you have very basic form requirements and logic that can be managed solely in the template, template-driven forms could be a good fit.</source>
          <target state="translated">&lt;strong&gt;템플릿 기반 양식&lt;/strong&gt; 은 기본 개체 모델을 만들고 조작하기 위해 템플릿의 지시문에 의존합니다. 이메일 목록 가입 양식과 같은 간단한 양식을 앱에 추가하는 데 유용합니다. 앱에 추가하기는 쉽지만 반응 형만큼 확장되지는 않습니다. 템플릿에서만 관리 할 수있는 매우 기본적인 양식 요구 사항과 논리가있는 경우 템플릿 기반 양식이 적합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9f368e6ae6f90a6865c211b4fc3f51561734be3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven&lt;/strong&gt; forms focus on simple scenarios, are not as reusable, abstract away the low-level APIs, and provide asynchronous access to the form model. The abstraction with template-driven forms also surfaces in testing, where testing reactive forms requires less setup and no dependence on the change detection cycle when updating and validating the form and data models during testing.</source>
          <target state="translated">&lt;strong&gt;템플릿 기반&lt;/strong&gt; 양식은 간단한 시나리오에 중점을두고 재사용 할 수 없으며 하위 수준 API를 추상화하고 양식 모델에 대한 비동기 액세스를 제공합니다. 템플릿 기반 양식을 사용한 추상화는 테스트 중에 표면화되며, 반응 형 테스트에는 설정이 덜 필요하며 테스트 중에 양식 및 데이터 모델을 업데이트하고 유효성을 검사 할 때 변경 감지주기에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81a3d875ca1aa71ccfc79e48c2ebbd3e48d8d04e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven&lt;/strong&gt; forms rely on mutability with two-way data binding to update the data model in the component as changes are made in the template. Because there are no unique changes to track on the data model when using two-way data binding, change detection is less efficient at determining when updates are required.</source>
          <target state="translated">&lt;strong&gt;템플리트 기반&lt;/strong&gt; 양식은 템플리트에서 변경 사항이 작성 될 때 컴포넌트의 데이터 모델을 업데이트하기 위해 양방향 데이터 바인딩으로 변경 가능성에 의존합니다. 양방향 데이터 바인딩을 사용할 때 데이터 모델에서 추적 할 고유 한 변경 사항이 없으므로 변경 감지는 업데이트가 필요한시기를 결정하는 데 덜 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="be2ae55753f8c992faf5420a53fdaffa8f81a22e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Angular i18n tools generated the ids for these translation units. Don't change them.&lt;/strong&gt; Each &lt;code&gt;id&lt;/code&gt; depends upon the content of the template text and its assigned meaning. If you change either the text or the meaning, then the &lt;code&gt;id&lt;/code&gt; changes. For more information, see the &lt;strong&gt;&lt;a href=&quot;i18n#custom-id&quot;&gt;translation file maintenance discussion&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Angular i18n 도구는 이러한 변환 단위의 ID를 생성했습니다. 변경하지 마십시오.&lt;/strong&gt; 각 &lt;code&gt;id&lt;/code&gt; 는 템플릿 텍스트의 내용과 할당 된 의미에 따라 다릅니다. 텍스트 나 의미를 변경 하면 &lt;code&gt;id&lt;/code&gt; 가 변경됩니다. 자세한 정보는 &lt;strong&gt;&lt;a href=&quot;i18n#custom-id&quot;&gt;번역 파일 유지 보수 토론을&lt;/a&gt;&lt;/strong&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a999cce0de293dd0ceb1486c064bdc0e80ff41df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The order of the routes in the configuration matters&lt;/strong&gt; and this is by design. The router uses a &lt;strong&gt;first-match wins&lt;/strong&gt; strategy when matching routes, so more specific routes should be placed above less specific routes. In the configuration above, routes with a static path are listed first, followed by an empty path route, that matches the default route. The wildcard route comes last because it matches &lt;em&gt;every URL&lt;/em&gt; and should be selected &lt;em&gt;only&lt;/em&gt; if no other routes are matched first.</source>
          <target state="translated">&lt;strong&gt;구성의 경로 순서는 중요&lt;/strong&gt; 하며 이는 의도적으로 설계된 것입니다. 라우터는 경로를 일치시킬 때 &lt;strong&gt;첫 번째 일치 승리&lt;/strong&gt; 전략을 사용 하므로보다 구체적인 경로는 덜 구체적인 경로 위에 배치해야합니다. 위의 구성에서 고정 경로가있는 경로가 먼저 표시되고 그 뒤에 기본 경로와 일치하는 빈 경로 경로가 표시됩니다. 와일드 카드 경로는 &lt;em&gt;모든 URL&lt;/em&gt; 과 일치하므로 마지막에 오며 다른 경로가 먼저 일치하지 않는 경우 &lt;em&gt;에만&lt;/em&gt; 선택해야합니다 .</target>
        </trans-unit>
        <trans-unit id="38184a516af530c7b89c8dcda7bf8522761ad6d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;These same considerations apply to every structural directive, whether built-in or custom.&lt;/strong&gt; Before applying a structural directive, you might want to pause for a moment to consider the consequences of adding and removing elements and of creating and destroying components.</source>
          <target state="translated">&lt;strong&gt;이러한 고려 사항은 기본 제공이든 사용자 지정이든 모든 구조적 지침에 적용됩니다. &lt;/strong&gt;구조적 지시문을 적용하기 전에 요소를 추가 및 제거하고 구성 요소를 작성 및 파괴하는 결과를 고려하기 위해 잠시 일시 정지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe44a85d9ca6005e7244538960b40e24bc47858c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This Tour of Heroes tutorial&lt;/strong&gt; is the conceptual basis for many examples in this documentation set. Reading this introduction page provides sufficient context for working with those examples. You do not need to do this tutorial to understand those other examples. The Tour of Heroes tutorial is maintained here for context and continuity.</source>
          <target state="translated">&lt;strong&gt;이 Tour of Heroes 튜토리얼&lt;/strong&gt; 은이 문서 세트의 많은 예제에 대한 개념적인 기초입니다. 이 소개 페이지를 읽으면 해당 예제로 작업하기에 충분한 컨텍스트가 제공됩니다. 다른 예제를 이해하기 위해이 학습서를 수행하지 않아도됩니다. 상황과 연속성을 위해 Tour of Heroes 튜토리얼이 여기에서 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="d539cfba0c3e2c6f1af70df43cfa22fe53cecb73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This won't work at all unless you bind to an event&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;이벤트에 바인딩하지 않으면 전혀 작동하지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a80aeef417506b373f9b8e1ca32e8927d08fea94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Timing examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;타이밍 예제&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc6aade1857b98341ff9104631b04810b85d452" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; When testing Angular service workers, it's a good idea to use an incognito or private window in your browser to ensure the service worker doesn't end up reading from a previous leftover state, which can cause unexpected behavior.</source>
          <target state="translated">&lt;strong&gt;팁 :&lt;/strong&gt; Angular 서비스 워커를 테스트 할 때 브라우저에서 시크릿 또는 개인 창을 사용하여 서비스 워커가 이전 남은 상태에서 읽지 않도록하여 예기치 않은 동작이 발생할 수 있도록하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9b5c8b64ad9cd5d1fbda1a7ab6717ec8f07c6fb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt; Display the value for the form group instance in the component template using the &lt;code&gt;value&lt;/code&gt; property and &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;팁 &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; 속성 및 &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; 를 사용하여 구성 요소 템플릿의 양식 그룹 인스턴스에 대한 값을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="ac9ade9e3d18db86ee1a787e995f2cceb063b935" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt; You can define the control with just the initial value, but if your controls need sync or async validation, add sync and async validators as the second and third items in the array.</source>
          <target state="translated">&lt;strong&gt;팁&lt;/strong&gt; 초기 값만으로 컨트롤을 정의 할 수 있지만 컨트롤에 동기화 또는 비동기 유효성 검사가 필요한 경우 동기화 및 비동기 유효성 검사기를 배열의 두 번째 및 세 번째 항목으로 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e8f5f0ccfa280e0fd5ba348e427d9b195ad85764" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;: Every progress event triggers change detection, so only turn them on if you need to report progress in the UI.</source>
          <target state="translated">&lt;strong&gt;팁&lt;/strong&gt; : 모든 진행 상황 이벤트는 변경 감지를 트리거하므로 UI에서 진행 상황을보고해야하는 경우에만 켜십시오.</target>
        </trans-unit>
        <trans-unit id="bd60b7d4980bbe3b5620fc35b30681a7a890ea76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;: If you set the cloned request body to &lt;code&gt;undefined&lt;/code&gt;, Angular assumes you intend to leave the body as is.</source>
          <target state="translated">&lt;strong&gt;팁&lt;/strong&gt; : 복제 된 요청 본문을 &lt;code&gt;undefined&lt;/code&gt; 로 설정하면 Angular는 본문을 그대로 두겠다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="fec66486a30dbc0bea95331ec287393af8d9b44a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two critical points&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;두 가지 중요한 사항&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4954c4b6c00b45986905694f1b1374d7bc1be911" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TypeScript interfaces are not valid tokens&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TypeScript 인터페이스가 유효한 토큰이 아닙니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84d9cdef4598d181c02608e6adb684186a18b296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;URL&lt;/strong&gt; is used for URL properties, such as &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;URL은&lt;/strong&gt; 다음과 같은 URL 속성에 사용되는 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ca734d077c213c37139adbd1147c92fd552a7d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;URL&lt;/strong&gt; is used for URL properties, such as &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;URL&lt;/strong&gt; 은 &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; 와 같은 URL 속성에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="0bcaefa1fa57901abf47489e45d1501b61b8bd8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use template variables to refer to elements&lt;/strong&gt; &amp;mdash; The &lt;code&gt;newHero&lt;/code&gt; template variable refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. You can reference &lt;code&gt;newHero&lt;/code&gt; from any sibling or child of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;strong&gt;템플릿 변수를 사용하여 요소 참조&lt;/strong&gt; &amp;mdash; &lt;code&gt;newHero&lt;/code&gt; 템플릿 변수는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소를 나타냅니다 . &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소 의 형제 나 자식에서 &lt;code&gt;newHero&lt;/code&gt; 를 참조 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b677cf735946959b9d7588a08eb43b16500df0e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VALID&lt;/strong&gt;: This control has passed all validation checks.</source>
          <target state="translated">&lt;strong&gt;VALID&lt;/strong&gt; :이 컨트롤은 모든 유효성 검사를 통과했습니다.</target>
        </trans-unit>
        <trans-unit id="fdf2f29be1ffedae6e6be14262266e47e87b960e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Validating user input&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;사용자 입력 확인&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81764712c192c7d252e1dde6e6432f8c34257ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Verifying view-to-model data flow&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;뷰-투-모델 데이터 흐름 확인&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1d3bd99f3963d7dd7451baa69dc655142691d45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Version 8 update&lt;/strong&gt;: When you update to version 8, the &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; command performs the transformation automatically. Prior to version 7, the &lt;code&gt;import()&lt;/code&gt; syntax only works in JIT mode (with view engine).</source>
          <target state="translated">&lt;strong&gt;버전 8 업데이트&lt;/strong&gt; : &lt;strong&gt;버전 8로 업데이트&lt;/strong&gt; 하면 &lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt; 명령이 자동으로 변환을 수행합니다. 버전 7 이전의 &lt;code&gt;import()&lt;/code&gt; 구문은 JIT 모드 (보기 엔진 사용)에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5930284e7d08a06d52e13ae68f35a6d5e2eb49dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; calling this method with untrusted user data exposes your application to XSS security risks!</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 신뢰할 수없는 사용자 데이터로이 메서드를 호출하면 응용 프로그램이 XSS 보안 위험에 노출됩니다!</target>
        </trans-unit>
        <trans-unit id="f4b21eac31a19fb3c30a451eadfdc629a0028356" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Watching&lt;/strong&gt; Between two runs, watch an external event stream. For example, webpack watches the file system for any changes. This ends when webpack restarts building, and &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; is called. This goes back to step 1.</source>
          <target state="translated">&lt;strong&gt;보는&lt;/strong&gt; 두 개의 실행 사이에 외부 이벤트 스트림을보세요. 예를 들어, 웹팩은 파일 시스템의 변경 사항을 감시합니다. 이것은 웹팩이 빌드를 다시 시작하고 &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; 이 호출 될 때 종료됩니다 . 1 단계로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="1f4db7a717d8bafa0668ecb47f73ca0cc064ab40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A &lt;code&gt;RoutingModule&lt;/code&gt; is a module dedicated exclusively to configuring the Angular router. A consistent class and file name convention make these modules easy to spot and verify.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;RoutingModule&lt;/code&gt; 는 각 라우터 구성에게만 전용 모듈이다. 일관된 클래스 및 파일 이름 규칙을 통해 이러한 모듈을 쉽게 식별하고 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04589d2d9744514af189ea6e3054d6bf9d7d22f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A &lt;em&gt;component relative&lt;/em&gt; URL requires no change when you move the component files, as long as the files stay together.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;&lt;em&gt;구성 요소 상대&lt;/em&gt; 는 한 파일이 함께 체재로, 구성 요소 파일을 이동할 때 URL은 변화가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c0e395c2378de24cfdc67c2df0ed44bfc442cd04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A developer can locate the code and identify what each file represents at a glance. The structure is as flat as it can be and there are no repetitive or redundant names.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;개발자는 코드를 찾고 각 파일이 한 눈에 나타내는 것을 식별 할 수 있습니다. 구조는 가능한 한 평평하며 반복적이거나 중복 된 이름이 없습니다.</target>
        </trans-unit>
        <trans-unit id="1262a86b3590b85df017625720fbbcdc6d311c34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can easily be isolated for testing.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;테스트를 위해 기능 모듈을 쉽게 분리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="d0befcba826a7c12a909b30a127b915f1633d173" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can easily be routed to both eagerly and lazily.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;기능 모듈은 간절하고 게으르게 쉽게 라우팅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8a9d11884cdfdbe0f14fccb1d35f8d0a08b3f3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can expose or hide its implementation from other modules.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;기능 모듈은 다른 모듈에서 구현을 노출하거나 숨길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb107a6bf76e17297ad715b7d51e4fb71ad58b07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module defines clear boundaries between specific functionality and other application features.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;기능 모듈은 특정 기능과 다른 응용 프로그램 기능 간의 명확한 경계를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="6abe63ff1c16959d3bd6cc84f3dc2944004b35d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module helps clarify and make it easier to assign development responsibilities to different teams.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;기능 모듈은 명확하고 다른 팀에 개발 책임을 쉽게 할당 할 수 있도록 도와줍니다.</target>
        </trans-unit>
        <trans-unit id="c683cac77b133fcddf5376450cec6bbebe1f977d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module identifies distinct sets of related components that comprise the feature area.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;기능 모듈은 기능 영역을 구성하는 고유 한 관련 구성 요소 세트를 식별합니다.</target>
        </trans-unit>
        <trans-unit id="85284312bcbd37c13bef3a0c96d45d476790c351" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A lazy loaded feature module that imports that shared module will make its own copy of the service and likely have undesirable results.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;공유 모듈을 가져 오는 게으른로드 된 기능 모듈은 자체 서비스 사본을 만들어 바람직하지 않은 결과를 낳을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0740926be2e010643c4d521f9c1a255b48ee9178" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A single component can be the default export for its file which facilitates lazy loading with the router.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;단일 구성 요소는 파일의 기본 내보내기가 될 수 있으며 라우터로 지연로드를 용이하게합니다.</target>
        </trans-unit>
        <trans-unit id="2811feb73a16c592296e6d07558d99d29370128b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; An element may have more than one attribute directive applied.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;요소에는 둘 이상의 속성 지시문이 적용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba1c5353bbde10cde7e9da164e80017b227b5d57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Angular allows for an &lt;a href=&quot;binding-syntax&quot;&gt;alternative syntax&lt;/a&gt;&lt;code&gt;on-*&lt;/code&gt;. If the event itself was prefixed with &lt;code&gt;on&lt;/code&gt; this would result in an &lt;code&gt;on-onEvent&lt;/code&gt; binding expression.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;Angular는 &lt;a href=&quot;binding-syntax&quot;&gt;대체 구문 &lt;/a&gt; &lt;code&gt;on-*&lt;/code&gt; 을 허용합니다 . 이벤트 자체에 &lt;code&gt;on&lt;/code&gt; 접두사가 붙은 경우 &lt;code&gt;on-onEvent&lt;/code&gt; 바인딩 표현식이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="07f45f2bfe81970ab8ea36a5d55fe680e01ab2f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Angular allows for an &lt;a href=&quot;template-syntax#binding-syntax&quot;&gt;alternative syntax&lt;/a&gt;&lt;code&gt;on-*&lt;/code&gt;. If the event itself was prefixed with &lt;code&gt;on&lt;/code&gt; this would result in an &lt;code&gt;on-onEvent&lt;/code&gt; binding expression.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;Angular는 &lt;code&gt;on-*&lt;/code&gt; &lt;a href=&quot;template-syntax#binding-syntax&quot;&gt;대체 구문을&lt;/a&gt; 허용합니다 . 이벤트 자체에 &lt;code&gt;on&lt;/code&gt; 이 접두사로 설정 되면 &lt;code&gt;on-onEvent&lt;/code&gt; 바인딩 표현식이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9cc424a44b45f6cafa38c31a9508d5e7ed3a747c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Attribute directives don't have an associated template.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;속성 지시문에는 연결된 템플릿이 없습니다.</target>
        </trans-unit>
        <trans-unit id="aa2f8a7961dc97adafb6e602f6fe6d05c58777f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Being DRY is important, but not crucial if it sacrifices the other elements of LIFT. That's why it's called &lt;em&gt;T-DRY&lt;/em&gt;. For example, it's redundant to name a template &lt;code&gt;hero-view.component.html&lt;/code&gt; because with the &lt;code&gt;.html&lt;/code&gt; extension, it is obviously a view. But if something is not obvious or departs from a convention, then spell it out.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;건조가되는 것이 중요하지만 LIFT의 다른 요소를 희생시키는 경우 중요하지 않습니다. 그것이 &lt;em&gt;T-DRY&lt;/em&gt; 라고 불리는 이유 입니다. 예를 들어 템플릿의 이름을 &lt;code&gt;hero-view.component.html&lt;/code&gt; 로 지정하면 중복됩니다 . &lt;code&gt;.html&lt;/code&gt; 확장자는 분명히보기입니다. 그러나 어떤 것이 분명하지 않거나 컨벤션에서 벗어나면 철자를 쓰십시오.</target>
        </trans-unit>
        <trans-unit id="46a5882dc1138956f82e9db20a9f116859436e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Clear service names such as &lt;code&gt;Logger&lt;/code&gt; do not require a suffix.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;Logger&lt;/code&gt; 와 같은 명확한 서비스 이름 에는 접미사가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c5e29beaefad891bdb4e78135e60f691b8ac86b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components are easy to identify in the DOM.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;DOM에서 컴포넌트를 쉽게 식별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="939cda78012273bade6ae1142aa81a9144c9418e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components have templates containing HTML and optional Angular template syntax. They display content. Developers place components on the page as they would native HTML elements and web components.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;컴포넌트에는 HTML 및 선택적 Angular 템플리트 구문이 포함 된 템플리트가 있습니다. 그들은 내용을 표시합니다. 개발자는 기본 HTML 요소 및 웹 구성 요소처럼 페이지에 구성 요소를 배치합니다.</target>
        </trans-unit>
        <trans-unit id="940f7a48e45cacbadbcff27f2d8f20fa574d2cfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components often have four files (e.g. &lt;code&gt;*.html&lt;/code&gt;, &lt;code&gt;*.css&lt;/code&gt;, &lt;code&gt;*.ts&lt;/code&gt;, and &lt;code&gt;*.spec.ts&lt;/code&gt;) and can clutter a folder quickly.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;구성 요소에는 종종 4 개의 파일 (예 : &lt;code&gt;*.html&lt;/code&gt; , &lt;code&gt;*.css&lt;/code&gt; , &lt;code&gt;*.ts&lt;/code&gt; 및 &lt;code&gt;*.spec.ts&lt;/code&gt; )이 있으며 폴더를 빠르게 정리할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfc187a80923daabfa4dee51bab700e352640231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Consistent conventions make it easy to quickly identify and reference assets of different types.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;일관된 규칙을 통해 다양한 유형의 자산을 쉽게 식별하고 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4b76ada1e8fb40c5c098a2792e6ab48605b126c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Directives are easily identified.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;지시어는 쉽게 식별됩니다.</target>
        </trans-unit>
        <trans-unit id="a8ca309d4fd0bb05fc8f73be6ad20dd69c1b4b95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Directly importing and using a module will load it immediately when the intention is to load it on demand.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;모듈을 직접 가져 와서 사용하면 필요할 때로드 할 때 즉시로드됩니다.</target>
        </trans-unit>
        <trans-unit id="63f93ef339450c1d644d4b8bc49215522e7b59b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Easily identifies the module as the root of the same named feature.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;동일한 명명 된 기능의 루트로 모듈을 쉽게 식별합니다.</target>
        </trans-unit>
        <trans-unit id="73dbf9307ea727c571221c71f2cde877ad26415b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Every app requires at least one root NgModule.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;모든 앱에는 적어도 하나의 루트 NgModule이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f8912034bee6bd2c5284db5f887a57bef1b8b60e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Follows a consistent convention for the startup logic of an app.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;앱의 시작 로직에 대한 일관된 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="b3732e3216913d5a42241b40a6a21935436ea08b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Follows a familiar convention from other technology platforms.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;다른 기술 플랫폼에서 익숙한 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="78d7122abd3625d885a97bc3035d8a97f9e45e39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Helps keep the app structure small and easy to maintain in the early stages, while being easy to evolve as the app grows.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;초기 단계에서 앱 구조를 작고 유지 관리하기 쉽게 유지하면서 앱이 성장함에 따라 쉽게 진화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c687f1cf4f1c9edfdbe38a122d9615679ae98bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Helps reduce the app from becoming cluttered through organizing the content and keeping them aligned with the LIFT guidelines.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;콘텐츠를 구성하고 LIFT 지침에 따라 콘텐츠를 정리하여 앱이 복잡해지지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="d4e1d1b6128e0b970c274cc418989255962ba5a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; If you ever need to rename the property or event name associated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, you can modify it in a single place.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 과 관련된 속성 또는 이벤트 이름의 이름을 변경해야하는 경우 한 곳에서 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01e43bec054057c9a473876587798360338549a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; If you ever need to rename the property or event name associated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;, you can modify it in a single place.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 과 관련된 속성 또는 이벤트 이름의 이름을 바꾸어야하는 경우 한 곳에서 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83dd1bd67fbbdf59da283e43e28d7ae77a9c9c2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; In most editors, syntax hints and code snippets aren't available when developing inline templates and styles. The Angular TypeScript Language Service (forthcoming) promises to overcome this deficiency for HTML templates in those editors that support it; it won't help with CSS styles.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;대부분의 편집기에서 인라인 템플릿 및 스타일을 개발할 때는 구문 힌트 및 코드 스 니펫을 사용할 수 없습니다. Angular TypeScript Language Service (앞으로 오는)는 HTML 템플릿을 지원하는 편집기에서 HTML 템플릿에 대한 이러한 결함을 극복 할 것을 약속합니다. CSS 스타일에는 도움이되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ee9f32cdb67462e3204ef0425a24a68553bce2fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; It is easier and more readable to identify which properties in a class are inputs or outputs.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;클래스의 어떤 속성이 입력 또는 출력인지 식별하는 것이 더 쉽고 읽기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="228cd948e79db9c623be535c25f213d3d3422985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; It is easier to recognize that a symbol is a component by looking at the template's html.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;템플릿의 html을 보면 심볼이 구성 요소임을 쉽게 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79ce411eec9f34adba732b772f52ab1437a5c6df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;템플릿 대신 컴포넌트의 프리젠 테이션 로직을 클래스에 유지하면 테스트 가능성, 유지 보수 가능성 및 재사용 성이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="d93d6d0f23e181ca837ab7816b2c6cdb20cae929" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the component slim, trim, and focused.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;구성 요소를 얇고 손질하며 초점을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="c74fd3a0f632cf9983d3fc214a237c481bc302ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the element names consistent with the specification for &lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;Custom Elements&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;요소 이름을 &lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;사용자 정의 요소&lt;/a&gt; 의 스펙과 일치하게 유지하십시오 .</target>
        </trans-unit>
        <trans-unit id="69b13800ded4a6eb0eb25b17500db5601452451b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;뷰에 바인딩 된 지시문에 정의 된 속성 이름을 속성 이름과 일치하게 유지합니다.</target>
        </trans-unit>
        <trans-unit id="34b110dd651265ca74b8b4ee5f7e525579d16226" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; LIFT provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. To confirm your intuition about a particular structure, ask: &lt;em&gt;can I quickly open and start work in all of the related files for this feature&lt;/em&gt;?</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;LIFT는 확장 성이 좋고 모듈 식이며 일관된 구조를 제공하여 코드를 빠르게 찾아 개발자 효율성을 향상시킵니다. 특정 구조에 대한 직관을 확인하려면 다음과 같이 질문하십시오. &lt;em&gt;이 기능과 관련된 모든 파일을 빠르게 열고 작업을 시작할 수&lt;/em&gt; 있습니까?</target>
        </trans-unit>
        <trans-unit id="1a5aca0a18ca16fb031760f494714dfe8bd1ce00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Large, inline templates and styles obscure the component's purpose and implementation, reducing readability and maintainability.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;큰 인라인 템플릿과 스타일은 구성 요소의 목적과 구현을 모호하게하여 가독성과 유지 관리 성을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="95b9295db45695636c9832d0ca9938ce26b305a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Lifecycle interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;라이프 사이클 인터페이스는 형식화 된 메소드 서명을 규정합니다. 이 서명을 사용하여 철자 및 구문 오류를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="da64dc6c75d0a87ea84b1bfbfac899dd0508402a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스의 로직은 단위 테스트에서보다 쉽게 ​​분리 할 수 ​​있으며 구성 요소의 호출 로직은 쉽게 조롱 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c2cd1b895fc5ebbfbcffeab1bba27b93162f5fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic may be reused by multiple components when placed within a service and exposed via a function.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스 내에 배치되고 기능을 통해 노출되는 경우 여러 구성 요소에서 논리를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7641b0ce40613b8b7c95fc331cc3600ee9efe337" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic will be contained in one place (the component class) instead of being spread in two places.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;논리는 두 곳으로 확산되는 대신 한 곳 (구성 요소 클래스)에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ac78f5ecc58fb086521b79c28011d6d15366f84d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Makes it easier to locate and identify the root module.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;루트 모듈을보다 쉽게 ​​찾고 식별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c36ddbd1e55599db4b36de94bc8884dcc20080f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Makes it easier to promote and share the component in other apps.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;다른 앱에서 구성 요소를보다 쉽게 ​​홍보하고 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b462dbb835ebea6ff2a4304b884761584cdaaf27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Names of folders and files should clearly convey their intent. For example, &lt;code&gt;app/heroes/hero-list.component.ts&lt;/code&gt; may contain a component that manages a list of heroes.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;폴더와 파일 이름은 의도를 명확하게 전달해야합니다. 예를 들어 &lt;code&gt;app/heroes/hero-list.component.ts&lt;/code&gt; 에는 영웅 목록을 관리하는 구성 요소가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cd26c7cf1e009ca7818e2e37e0cdab8a245cbdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;명명 규칙은 한 눈에 내용을 찾을 수있는 일관된 방법을 제공합니다. 프로젝트 내 일관성이 중요합니다. 팀과의 일관성이 중요합니다. 회사 전체의 일관성은 엄청난 효율성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a16fe1ecf423c1ef637c0ac4e22c582c55ccd18f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; NgModules make it easier to isolate, test, and reuse features.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;NgModules를 사용하면 기능을보다 쉽게 ​​분리, 테스트 및 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2bdf377dda9552be8d4adff954274c392ffa660" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; NgModules make it easy to lazy load routable features.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;NgModules를 사용하면로드 라우팅 가능한 기능을 쉽게 게을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2dbc9a54c009895a704681c4abbe2acae1892ffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; No one wants to search for a file through seven levels of folders. A flat structure is easy to scan.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;7 단계의 폴더를 통해 파일을 검색하려는 사람은 없습니다. 평평한 구조로 스캔하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="371af0d588614975ac80631a6277e61df99b795c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; One component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;파일 당 하나의 구성 요소는 변수를 공유하거나 원치 않는 클로저를 만들거나 종속성과의 원치 않는 커플 링을 생성 할 수있는 파일의 구성 요소를 결합 할 때 종종 발생하는 숨겨진 버그를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="23fe6f97cf7b97c5632fad61a075d9813272f3bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; One component per file makes it far easier to read, maintain, and avoid collisions with teams in source control.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;파일 당 하나의 구성 요소를 사용하면 소스 제어 팀과의 충돌을 훨씬 쉽게 읽고 유지 관리하고 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="156a49dd95596cb5e1910e49cfb2894d05e2d1f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Placing members in a consistent sequence makes it easy to read and helps instantly identify which members of the component serve which purpose.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;일관된 순서로 멤버를 배치하면 구성 요소의 어떤 멤버가 어떤 목적을 달성하는지 쉽게 읽고 쉽게 식별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd52dbb328d25e75e5796399f02fe7e4ef7fcc70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Placing the decorator on the same line &lt;em&gt;usually&lt;/em&gt; makes for shorter code and still easily identifies the property as an input or output. Put it on the line above when doing so is clearly more readable.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;데코레이터를 같은 줄에 배치하면 &lt;em&gt;일반적으로&lt;/em&gt; 코드가 짧아지고 속성을 입력 또는 출력으로 쉽게 식별 할 수 있습니다. 명확하게 읽을 수있을 때 위의 줄에 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="542f040e61234a8393cc2fb46e57220934925568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Prevents element name collisions with components in other apps and with native HTML elements.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;다른 앱의 구성 요소 및 기본 HTML 요소와 요소 이름 충돌을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="de9657cd860484482d608521d99bff9845e66793" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Prevents name collisions.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;이름 충돌을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="67487e9a7b5cc11689cc116920093851725cd844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference modules.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;모듈을 빠르게 식별하고 참조 할 수있는 일관된 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="58422644ad41e1a065831ecac64fd138c67589d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference pipes.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;파이프를 신속하게 식별하고 참조 할 수있는 일관된 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="374a3fec339150ba2b843eaef8697cd18d692310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference services.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스를 신속하게 식별하고 참조 할 수있는 일관된 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2bc680cfe4e4d3c901eb72d30b972fd3ecb5b82e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify end-to-end tests.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;종단 간 테스트를 신속하게 식별 할 수있는 일관된 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6b865315fedffc33d1e166f9a0ee0f13e2d4eda7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify tests.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;테스트를 신속하게 식별 할 수있는 일관된 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0b4e5eae96ab0e654b4e8d48cd47c3b6355b4593" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides pattern matching for &lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;karma&lt;/a&gt; or other test runners.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;&lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;카르마&lt;/a&gt; 또는 다른 테스트 러너에 패턴 일치를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="f5a3f93d744d9f63fd43b9d63144503583c2ce47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides pattern matching for test runners and build automation.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;테스트 러너 및 빌드 자동화를위한 패턴 일치를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f36b0035ff9bed396c67a5eac59b0adb7b417532" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Removes dependencies and hides implementation details from the component.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;종속성을 제거하고 컴포넌트에서 구현 세부 사항을 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="6bcec3d26a77941dc7b7888da6c96b2adce22833" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Service names such as &lt;code&gt;Credit&lt;/code&gt; are nouns and require a suffix and should be named with a suffix when it is not obvious if it is a service or something else.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;Credit&lt;/code&gt; 와 같은 서비스 이름 은 명사이며 접미사가 필요하며 서비스 또는 기타 서비스인지 확실하지 않은 경우 접미사로 이름을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="2c59855aa491026a9f90d721af2e37c9574062ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Services are ideal for sharing methods across a feature area or an app.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스는 기능 영역 또는 앱에서 방법을 공유하는 데 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="d04fc6329854aa92b9b07981287ddf759c80af40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Services are ideal for sharing stateful in-memory data.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스는 상태 저장 인 메모리 데이터를 공유하는 데 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="0b0c75eb7454de8ebb65df15b000f0f00ac25b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to maintain.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;작은 기능은 유지하기가 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="46a37119db45b3abde6d62453aa73a346016d9ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to read.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;작은 기능은 읽기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="8ce7e1b2ea1ce4d48a6d89d7d7258cb05a272dec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to test, especially when they do one thing and serve one purpose.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;작은 기능은 특히 한 가지 일을하고 한 가지 목적을 수행 할 때 테스트하기가 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="3d5fec2bd249ca55b61637acabe970f213445438" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions help avoid hidden bugs that come with large functions that share variables with external scope, create unwanted closures, or unwanted coupling with dependencies.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;작은 함수는 외부 범위와 변수를 공유하거나 원하지 않는 클로저를 만들거나 종속성과의 원하지 않는 결합을 만드는 큰 함수와 함께 제공되는 숨겨진 버그를 피하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="d7af862514e2de136fa80a338391a45134a26d69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions promote reuse.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;작은 기능은 재사용을 촉진합니다.</target>
        </trans-unit>
        <trans-unit id="55fa9a87dc53f6fb8b9cb9c3dbd8b91fa4439d68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Spend less time hunting and pecking for code, and become more efficient. Longer file names are far better than &lt;em&gt;short-but-obscure&lt;/em&gt; abbreviated names.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;코드를 찾기 위해 시간이 많이 걸리지 않으며 더 효율적으로 작업 할 수 있습니다. 파일 이름이 길수록 &lt;em&gt;짧지 만&lt;/em&gt; 명확 &lt;em&gt;하지 않은&lt;/em&gt; 약어 이름 보다 훨씬 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="bb36cf42c22a06710f9daa2f5cb57ef4f882393d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;./&lt;/code&gt; prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;./&lt;/code&gt; 접두사는 상대 URL의 표준 구문입니다; 해당 접두사없이 Angular의 현재 기능에 의존하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="6e9d2faf7d97e3162943dd7bd177c19da377b99c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata is only one term to remember and doesn't require extra ES imports.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 메타 데이터는 기억해야 할 단 하나의 용어이며, 추가 ES 수입을 필요로하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1f445da70362099b28e9ac7081a4264fc9eaa34e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;host&lt;/code&gt; metadata is only one term to remember and doesn't require extra ES imports.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;host&lt;/code&gt; 메타 데이터는 기억해야 할 단 하나의 용어이며, 추가 ES 수입을 필요로하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b07e3f7e9bf20cfdb5fcc4963ca7e2dedc827101" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular Dependency Injection (DI) mechanism resolves a service's own dependencies based on the declared types of that service's constructor parameters.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;DI (Angular Dependency Injection) 메커니즘은 해당 서비스 생성자 매개 변수의 선언 된 유형을 기반으로 서비스 자체 종속성을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="9d2d736f1803c3ddb836cd66dcd10849e6f778d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular HTML parser is case sensitive and recognizes lower camel case.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;Angular HTML 파서는 대소 문자를 구분하며 소문자 낙타를 인식합니다.</target>
        </trans-unit>
        <trans-unit id="278ee06b3b41700c164528c6006a02f08e4b912d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular injector is hierarchical.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;각도 인젝터는 계층 적입니다.</target>
        </trans-unit>
        <trans-unit id="fb4e3183de0370836d208f02797380c826ae8617" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The LIFT guidelines are all covered.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;LIFT 지침은 모두 다룹니다.</target>
        </trans-unit>
        <trans-unit id="fe9e050bab86c1ffbd191b1a30d210718a5292ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;구성 요소의 책임은보기에 대한 정보를 표시하고 수집하는 것입니다. 데이터를 얻는 방법을 신경 쓰지 말고 누가 데이터를 요청해야하는지 알고 있어야합니다. 데이터 서비스를 분리하면 데이터 서비스에 데이터를 가져 오는 방법에 대한 논리가 이동하고 구성 요소가 더 단순하고보기에 집중됩니다.</target>
        </trans-unit>
        <trans-unit id="a614e3f562640e92be2a71f4d9cfee595dbf229a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The details of data management, such as headers, HTTP methods, caching, error handling, and retry logic, are irrelevant to components and other data consumers.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;헤더, HTTP 메소드, 캐싱, 오류 처리 및 재시도 로직과 같은 데이터 관리의 세부 사항은 구성 요소 및 기타 데이터 소비자와 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="5ac4546d94ce9e713dceaf33efc111a345050f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The folder makes it easy to identify and isolate the feature content.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;폴더를 사용하면 기능 컨텐츠를 쉽게 식별하고 분리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="bbf594ac0333396e41fcd880058df192f3ece2a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The metadata declaration attached to the directive is shorter and thus more readable.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;지시문에 첨부 된 메타 데이터 선언은 더 짧아서 더 읽기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="d399c257c9692973faee7e2443a4fdaebb5be4fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The naming conventions should simply help find desired code faster and make it easier to understand.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;명명 규칙은 단순히 원하는 코드를 더 빨리 찾고 이해하기 쉽게 도와줍니다.</target>
        </trans-unit>
        <trans-unit id="9023567514f1a5c8648f2d14c2036fa7d2b1cfbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The property associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; or the method associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; can be modified only in a single place&amp;mdash;in the directive's class. If you use the &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata property, you must modify both the property/method declaration in the directive's class and the metadata in the decorator associated with the directive.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; 과 연관된 속성 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 와 연관된 메소드 는 지시문 클래스의 단일 위치에서만 수정할 수 있습니다. &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 메타 데이터 속성 을 사용하는 경우 지시어 클래스의 속성 / 방법 선언과 지시어와 관련된 데코레이터의 메타 데이터를 모두 수정해야합니다.</target>
        </trans-unit>
        <trans-unit id="a667206faeaec98c4af583965926e0494fbfc683" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The property associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; or the method associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; can be modified only in a single place&amp;mdash;in the directive's class. If you use the &lt;code&gt;host&lt;/code&gt; metadata property, you must modify both the property/method declaration in the directive's class and the metadata in the decorator associated with the directive.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; 과 관련된 속성 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 와 관련된 메서드 는 지시문의 클래스에서 단일 위치에서만 수정할 수 있습니다. &lt;code&gt;host&lt;/code&gt; 메타 데이터 속성 을 사용하는 경우 디렉티브 클래스의 속성 / 메서드 선언과 디렉티브와 관련된 데코레이터의 메타 데이터를 모두 수정해야합니다.</target>
        </trans-unit>
        <trans-unit id="f040d63ae1b831a345a8a815f6e19f07b2eb4d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This is consistent with built-in events such as button clicks.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;이는 버튼 클릭과 같은 기본 제공 이벤트와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="0c7fe70cd15a7e29c72a0498423580cfdc75ea61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;두 개의 서로 다른 구성 요소가 다른 서비스 인스턴스를 필요로하는 경우에는 적합하지 않습니다. 이 시나리오에서는 새롭고 별도의 인스턴스가 필요한 구성 요소 수준에서 서비스를 제공하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a7340e0f3575e2046047131f4cb62ee616e9870e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This makes it easier to test (mock or real) the data calls when testing a component that uses a data service.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;따라서 데이터 서비스를 사용하는 구성 요소를 테스트 할 때 데이터 호출을 쉽게 테스트 (모의 또는 실제) 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5292b998c4720c145931663c9f0afcdab144934a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; To work efficiently you must be able to find files quickly, especially when you do not know (or do not remember) the file &lt;em&gt;names&lt;/em&gt;. Keeping related files near each other in an intuitive location saves time. A descriptive folder structure makes a world of difference to you and the people who come after you.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;효율적으로 작업하려면, 특히 파일 &lt;em&gt;이름을&lt;/em&gt; 모르거나 기억하지 못하는 경우 파일을 빨리 찾을 수 있어야 &lt;em&gt;합니다&lt;/em&gt; . 직관적 인 위치에서 관련 파일을 서로 가까이두면 시간이 절약됩니다. 설명적인 폴더 구조는 당신과 당신을 따르는 사람들에게 세상을 변화시킵니다.</target>
        </trans-unit>
        <trans-unit id="c04e4c59fda45f1e4aa5dc5f007017f9fd5b3322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Two names for the same property (one private, one public) is inherently confusing.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;동일한 재산에 대한 두 개의 이름 (하나는 개인, 하나는 공개)은 본질적으로 혼동됩니다.</target>
        </trans-unit>
        <trans-unit id="8104706a9f913d8ffb73065297d4460e3560d09b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names make it easy to find a specific file type using an editor or IDE's fuzzy search techniques.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;형식 이름을 사용하면 편집기 나 IDE의 퍼지 검색 기술을 사용하여 특정 파일 형식을 쉽게 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="614a4b4cb7643480df4076413389b81e1bf2f0bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names provide a consistent way to quickly identify what is in the file.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;유형 이름은 파일의 내용을 신속하게 식별 할 수있는 일관된 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="dca7d2e6018c2f33185a5723145d3f45ecb49ccd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names provide pattern matching for any automated tasks.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;유형 이름은 모든 자동화 된 작업에 대한 패턴 일치를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5cf32259a6a149b346e42dfc65131b05d787fcf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Unabbreviated type names such as &lt;code&gt;.service&lt;/code&gt; are descriptive and unambiguous. Abbreviations such as &lt;code&gt;.srv&lt;/code&gt;, &lt;code&gt;.svc&lt;/code&gt;, and &lt;code&gt;.serv&lt;/code&gt; can be confusing.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;.service&lt;/code&gt; 와 같은 약식 유형 이름 은 설명적이고 모호하지 않습니다. &lt;code&gt;.srv&lt;/code&gt; , &lt;code&gt;.svc&lt;/code&gt; 및 &lt;code&gt;.serv&lt;/code&gt; 와 같은 약어 는 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb98cc6d7953db2a6009be749552767d8a34910d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Upper camel case is conventional for identifying objects that can be instantiated using a constructor.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;상단 낙타 케이스는 생성자를 사용하여 인스턴스화 할 수있는 객체를 식별하는 데 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="ad71d03bcb082d586eb4ec09e191fbb81ef4784d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service accepts only dependencies associated with type tokens, the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; syntax is much less verbose compared to using &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; on each individual constructor parameter.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스가 유형 토큰과 관련된 종속성 만 허용하는 경우 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 구문은 각 개별 생성자 매개 변수에 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; 를 사용하는 것보다 훨씬 덜 장황 합니다.</target>
        </trans-unit>
        <trans-unit id="1e291754420a43c44695cd0d87edc4386d63facb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service has multiple responsibilities, every component or service that injects it now carries the weight of them all.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스에 여러 책임이있는 경우 서비스를 제공하는 모든 구성 요소 또는 서비스는 이제 그 무게를 모두가집니다.</target>
        </trans-unit>
        <trans-unit id="ecd61cbc612d48036b3203a7fcee069dd63437fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service has multiple responsibilities, it becomes difficult to test.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스에 여러 책임이있는 경우 테스트하기가 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="94a43d926c75940db64f94d3a768021df0616f72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When there are a lot of files, for example 10+, locating them is easier with a consistent folder structure and more difficult in a flat structure.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;예를 들어 10+와 같이 많은 파일이있는 경우 일관된 폴더 구조를 사용하면 파일을 쉽게 찾을 수 있고 평평한 구조에서는 더 어려워집니다.</target>
        </trans-unit>
        <trans-unit id="cc10eddeefb95f7a75a29a1a0d67027dc62f15bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When you provide the service to a root injector, that instance of the service is shared and available in every class that needs the service. This is ideal when a service is sharing methods or state.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;루트 인젝터에 서비스를 제공하면 해당 서비스 인스턴스가 서비스가 필요한 모든 클래스에서 공유되고 사용 가능합니다. 이것은 서비스가 메소드 또는 상태를 공유 할 때 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="03ef8461d4efc0093bb002ee20959403d2fd5f5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When you register a service in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator of the service, optimization tools such as those used by the &lt;a href=&quot;cli&quot;&gt;Angular CLI's&lt;/a&gt; production builds can perform tree shaking and remove services that aren't used by your app.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;서비스의 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 데코레이터에 서비스를 등록 하면 &lt;a href=&quot;cli&quot;&gt;Angular CLI의&lt;/a&gt; 프로덕션 빌드 에서 사용되는 것과 같은 최적화 도구가 트리 흔들림을 수행하고 앱에서 사용하지 않는 서비스를 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a7c2b004c7ea14b9e097036f546c90cef37a5b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; You don't want each module to have its own separate instance of singleton services. Yet there is a real danger of that happening if the &lt;code&gt;SharedModule&lt;/code&gt; provides a service.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;각 모듈에 별도의 싱글 톤 서비스 인스턴스가있는 것을 원하지 않습니다. 그러나 &lt;code&gt;SharedModule&lt;/code&gt; 이 서비스를 제공 하면 이런 일이 일어날 위험이 있습니다.</target>
        </trans-unit>
        <trans-unit id="16bf87abbd424a3fed90100dce9703f5bc6cce6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; You should use an alias when the directive name is also an &lt;em&gt;input&lt;/em&gt; property, and the directive name doesn't describe the property.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;지시문 이름도 &lt;em&gt;입력&lt;/em&gt; 특성이고 지시문 이름이 특성을 설명하지 않는 경우 별명을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dfdef4b3079947025cd8bddf4f6530b08c1865b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; gives reasons for following the previous recommendations.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt;이전 권장 사항을 따르는 이유를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="024123ca4b271ded41b1bae659b4fd92d8c26c8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt;&lt;code&gt;SharedModule&lt;/code&gt; exists to make commonly used components, directives and pipes available for use in the templates of components in many other modules.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;SharedModule&lt;/code&gt; 은 일반적으로 사용되는 구성 요소, 지시문 및 파이프를 다른 많은 모듈의 구성 요소 템플리트에 사용할 수 있도록하기 위해 존재합니다.</target>
        </trans-unit>
        <trans-unit id="e3678c7a0e748230934da9dd34b2e9b1dba606fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt;&lt;code&gt;SharedModule&lt;/code&gt; will contain components, directives and pipes that may need features from another common module; for example, &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;왜? &lt;/strong&gt; &lt;code&gt;SharedModule&lt;/code&gt; 에는 다른 공통 모듈의 기능이 필요할 수있는 구성 요소, 지시문 및 파이프가 포함됩니다. 예를 들어, &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="edb03112c51a4e11663ac3d5630e6b8865cb57e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Work within the context&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;컨텍스트 내에서 작업&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d8bf39083c5b8bd86f45a0335e844a8767d8843" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing style:&lt;/strong&gt; Word usage, grammar, capitalization, and punctuation. Adherence to Angular's writing guidelines ensures a consistent &quot;voice&quot;, helps ensure accuracy of the information, and facilitates use world-wide, by audiences with different backgrounds.</source>
          <target state="translated">&lt;strong&gt;쓰기 스타일 :&lt;/strong&gt; 단어 사용법, 문법, 대문자 및 문장 부호. Angular의 작문 지침을 준수하면 일관된 &quot;음성&quot;을 보장하고 정보의 정확성을 보장하며 다양한 배경을 가진 청중이 전 세계에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c22269fbbd3c4560d644e04e27c3fafe3a3ed683" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing style&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;작문 스타일&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c4286b19db97cef175c9a3173bfe836d4c98f6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can run the live example to see the complete reactive and template-driven example code.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;라이브 예제를 실행하여 반응 형 및 템플릿 기반 예제 코드를 볼 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47490898496c18c307d4ad5836bfe7ec31a36994" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You don't need to do anything to get &lt;em&gt;typings&lt;/em&gt; files for library packages that include &lt;code&gt;d.ts&lt;/code&gt; files. Angular packages include them already.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;당신은 얻을 아무것도 할 필요가 없습니다 &lt;em&gt;typings에&lt;/em&gt; 포함 라이브러리 패키지 파일을 &lt;code&gt;d.ts&lt;/code&gt; 의 파일을. 각도 패키지에는 이미 포함되어 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7418ad94c4f5bffad199aa1037f6c20189206d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[(ngModel)]&lt;/strong&gt; is Angular's two-way data binding syntax.</source>
          <target state="translated">&lt;strong&gt;[(ngModel)]&lt;/strong&gt; 은 Angular의 양방향 데이터 바인딩 구문입니다.</target>
        </trans-unit>
        <trans-unit id="2afaee467316580fca44222d6c9a7bbb351fd9ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array&lt;/strong&gt;: commands to pass to &lt;a href=&quot;router#createUrlTree&quot;&gt;Router#createUrlTree&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;array&lt;/strong&gt; : &lt;a href=&quot;router#createUrlTree&quot;&gt;Router # createUrlTree&lt;/a&gt; 에 전달할 명령 입니다.</target>
        </trans-unit>
        <trans-unit id="3fe1d3b73ec04a4f495bb01dc96b64677028d061" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;codelyzer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;codelyzer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80bda6ac72accbc1ca9816b620a3e9a6b118354f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;descendants&lt;/strong&gt; - True to include all descendants, otherwise include only direct children.</source>
          <target state="translated">&lt;strong&gt;자손&lt;/strong&gt; -모든 자손을 포함하려면 true이고, 그렇지 않으면 직접 자손 만 포함합니다.</target>
        </trans-unit>
        <trans-unit id="adfdf22704311e6c562267346f98f332e0460601" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jasmine/... &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jasmine/... &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6371ee47035798a336b02cb24af48b8e42ede972" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;karma/... &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;karma/... &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7dd51ac3e89fdd6ac4f8af36c97748d2fc75ca6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt;: An alternative to setting the name attribute on the form control element. See the &lt;a href=&quot;ngmodel#using-ngmodel-on-a-standalone-control&quot;&gt;example&lt;/a&gt; for using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; as a standalone control.</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt; : 폼 컨트롤 요소에서 name 속성을 설정하는 대안. &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 을 독립형 컨트롤로 사용 하는 &lt;a href=&quot;ngmodel#using-ngmodel-on-a-standalone-control&quot;&gt;예&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9cb0a27ab2f16df5a1ff706cb37064ebce7953b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngFor&lt;/strong&gt; to display an array of items.</source>
          <target state="translated">&lt;strong&gt;ng&lt;/strong&gt; 항목 배열을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="0ed64020b10c2028c643bac6c9fcbe35dc5bbabe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngIf&lt;/strong&gt; to conditionally display a chunk of HTML based on a boolean expression.</source>
          <target state="translated">&lt;strong&gt;ngIf는&lt;/strong&gt; 조건부로 부울 표현식을 기반으로 HTML의 덩어리를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="47382f2af3d2086517884d17290a4ba36eef83d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;npm dependencies:&lt;/strong&gt; We only make npm dependency updates that require changes to your apps in a major release. In minor releases, we update peer dependencies by expanding the supported versions, but we do not require projects to update these dependencies until a future major version. This means that during minor Angular releases, npm dependency updates within Angular applications and libraries are optional.</source>
          <target state="translated">&lt;strong&gt;npm 종속성 :&lt;/strong&gt; 주요 릴리스에서는 앱을 변경해야하는 npm 종속성 업데이트 만 수행합니다. 부 릴리스에서는 지원되는 버전을 확장하여 피어 종속성을 업데이트하지만 향후 주요 버전까지 프로젝트에서 이러한 종속성을 업데이트 할 필요는 없습니다. 이는 마이너 Angular 릴리스 중에 Angular 응용 프로그램 및 라이브러리 내의 npm 종속성 업데이트는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="9f4c2d24b84bdce99f65869481cd20d948674c11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;npm package manager&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;npm 패키지 관리자&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce0e911bd264afd68ea6095551b4e21a892593e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;null|undefined&lt;/strong&gt;: shorthand for an empty array of commands, i.e. &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;null | undefined&lt;/strong&gt; : 빈 명령 배열, 즉 &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff81369876b9ff0fac39c86e3a98661d021aa73d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;protractor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;protractor&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cc4a187d86b8d960c2f4e934b7227d8c93b309e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - True to read a different token from the queried element.</source>
          <target state="translated">&lt;strong&gt;읽기&lt;/strong&gt; - 사실 조회 된 요소에서 다른 토큰을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30f9789d7f7887863149267a695a35393566e015" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - True to read a different token from the queried elements.</source>
          <target state="translated">&lt;strong&gt;읽기&lt;/strong&gt; - 사실 조회 된 요소와 다른 토큰을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ca49cd5f5b70e9842596d3bca4fe1a47fee29c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - Used to read a different token from the queried element.</source>
          <target state="translated">&lt;strong&gt;읽기&lt;/strong&gt; - 조회 된 요소에서 다른 토큰을 읽을 때 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c549da8e043f83296dbc7cc92177e79519e1ad06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - Used to read a different token from the queried elements.</source>
          <target state="translated">&lt;strong&gt;읽기&lt;/strong&gt; - 조회 된 요소와 다른 토큰을 읽을 때 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3be4c5497047480cc31393214ff3fbaf9f97818b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rxjs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;rxjs&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cb9d62b286f1e1937e2bbe02bd344681dc505e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;selector&lt;/strong&gt; - The directive type or the name used for querying.</source>
          <target state="translated">&lt;strong&gt;selector-&lt;/strong&gt; 지시문 유형 또는 조회에 사용되는 이름.</target>
        </trans-unit>
        <trans-unit id="2d2f1fa325329675cba484c31321fb49a3aa1e9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;standalone&lt;/strong&gt;: When set to true, the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; will not register itself with its parent form, and acts as if it's not in the form. Defaults to false.</source>
          <target state="translated">&lt;strong&gt;standalone&lt;/strong&gt; : true로 설정하면 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 이 상위 양식에 등록되지 않고 양식에없는 것처럼 작동합니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="a659df3e0e18d400f5f1c9f0a685914845e1d1a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;standalone&lt;/strong&gt;: When set to true, the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; will not register itself with its parent form, and acts as if it's not in the form. Defaults to false. If no parent form exists, this option has no effect.</source>
          <target state="translated">&lt;strong&gt;standalone&lt;/strong&gt; : true로 설정하면 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 이 부모 폼에 등록되지 않고 마치 폼에없는 것처럼 작동합니다. 기본값은 false입니다. 상위 양식이 없으면이 옵션이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4377d50a201b9ca0ce8477872ea95c93e7314fe2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs</source>
          <target state="translated">&lt;strong&gt;static-&lt;/strong&gt; 변경 감지 실행 전에 쿼리 결과를 해결하려면 True</target>
        </trans-unit>
        <trans-unit id="ce06789f34cd111eacc6b321891b8144637e910d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs, false to resolve after change detection.</source>
          <target state="translated">&lt;strong&gt;static-&lt;/strong&gt; 변경 감지가 실행되기 전에 쿼리 결과를 해결하려면 True, 변경 감지 후 해결하려면 false입니다.</target>
        </trans-unit>
        <trans-unit id="619c3e133b38c94fdf0071c363b8bee4c567c017" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs, false to resolve after change detection. Defaults to false.</source>
          <target state="translated">&lt;strong&gt;static-&lt;/strong&gt; 변경 감지가 실행되기 전에 쿼리 결과를 해결하려면 True, 변경 감지 후 해결하려면 false입니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="d5ed2d9ffc606a64df4f76c12e4c4f42ba0084a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;string&lt;/strong&gt;: shorthand for array of commands with just the string, i.e. &lt;code&gt;['/route']&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;string&lt;/strong&gt; : &lt;strong&gt;문자열&lt;/strong&gt; 만있는 명령 배열의 속기, 즉 &lt;code&gt;['/route']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cf58d8bc4b5e24796ad859418cc2e60410160e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ts-node&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ts-node&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="252774e7da4ec3009c5f69ee513c9ab756bb91dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tslint&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tslint&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1fef399d9497a91dc61d25242d9621caf49e787" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;typescript&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;typescript&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6eac670ecd612eee291a7dc157fa6ca7b87c4a1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;updateOn&lt;/strong&gt;: Defines the event upon which the form control value and validity update. Defaults to 'change'. Possible values: &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;updateOn&lt;/strong&gt; : 양식 제어 값 및 유효성이 업데이트되는 이벤트를 정의합니다. 기본값은 'change'입니다. 가능한 값 : &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f60e9ce82796fa904cd1cb51da24e3c3b5672849" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;updateOn&lt;/strong&gt;: Sets the default &lt;code&gt;updateOn&lt;/code&gt; value for all child &lt;code&gt;NgModels&lt;/code&gt; below it unless explicitly set by a child &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;ngModelOptions&lt;/code&gt;). Defaults to 'change'. Possible values: &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;updateOn는&lt;/strong&gt; : 기본 설정 &lt;code&gt;updateOn&lt;/code&gt; 의 모든 자식에 대한 값을 &lt;code&gt;NgModels&lt;/code&gt; 명시 적으로 아이가 설정되지 않는 한 그 아래 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;ngModelOptions&lt;/code&gt; 을 ). 기본값은 'change'입니다. 가능한 값 : &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eec75c43bf8e37fc0ef1b526f50f7ad95fab9da4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;zone.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;zone.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec143633e8d3b8f2a394a46e89f29ce13e3c7418" translate="yes" xml:space="preserve">
          <source>=0 (or any other number)</source>
          <target state="translated">= 0 (또는 다른 숫자)</target>
        </trans-unit>
        <trans-unit id="f9a4761705689f5ac6b5ce45f553fd1667ad66c3" translate="yes" xml:space="preserve">
          <source>@angular-devkit/build-angular</source>
          <target state="translated">@angular-devkit/build-angular</target>
        </trans-unit>
        <trans-unit id="d0db3c16323ae567a43bd22a4e5c5863dbeba52e" translate="yes" xml:space="preserve">
          <source>@angular/animations</source>
          <target state="translated">@angular/animations</target>
        </trans-unit>
        <trans-unit id="a2394e88013e9804af09d9f4e105d293570226f5" translate="yes" xml:space="preserve">
          <source>@angular/animations/browser</source>
          <target state="translated">@angular/animations/browser</target>
        </trans-unit>
        <trans-unit id="9de55435d30ad98c6faf865f81f9182847e85786" translate="yes" xml:space="preserve">
          <source>@angular/animations/browser/testing</source>
          <target state="translated">@angular/animations/browser/testing</target>
        </trans-unit>
        <trans-unit id="279ff4d8c49a936d48c1a77f46101304c9937d57" translate="yes" xml:space="preserve">
          <source>@angular/common</source>
          <target state="translated">@angular/common</target>
        </trans-unit>
        <trans-unit id="35f25f67f51ac375c4414d902cd89df76b82b645" translate="yes" xml:space="preserve">
          <source>@angular/common/http</source>
          <target state="translated">@angular/common/http</target>
        </trans-unit>
        <trans-unit id="47f28773359d75fd992705276203e7d02f2b769c" translate="yes" xml:space="preserve">
          <source>@angular/common/http/testing</source>
          <target state="translated">@angular/common/http/testing</target>
        </trans-unit>
        <trans-unit id="3b355a74fcf516cb572de7a18d614db5303b78d7" translate="yes" xml:space="preserve">
          <source>@angular/common/testing</source>
          <target state="translated">@angular/common/testing</target>
        </trans-unit>
        <trans-unit id="7bea4c6cce38c2240da9a825337a1a9abcabfd01" translate="yes" xml:space="preserve">
          <source>@angular/common/upgrade</source>
          <target state="translated">@angular/common/upgrade</target>
        </trans-unit>
        <trans-unit id="7010d397973168cac1aaf54fc8228b617d553f9c" translate="yes" xml:space="preserve">
          <source>@angular/core</source>
          <target state="translated">@angular/core</target>
        </trans-unit>
        <trans-unit id="39bfc8055174be719b0e02e58c06f5e4b1620ba9" translate="yes" xml:space="preserve">
          <source>@angular/core/global</source>
          <target state="translated">@angular/core/global</target>
        </trans-unit>
        <trans-unit id="9bd54b448bd160b9bdf56afcc4057d60c863c351" translate="yes" xml:space="preserve">
          <source>@angular/core/testing</source>
          <target state="translated">@angular/core/testing</target>
        </trans-unit>
        <trans-unit id="ed082ffeab17b92963b8e0373f3af558b0f94176" translate="yes" xml:space="preserve">
          <source>@angular/elements</source>
          <target state="translated">@angular/elements</target>
        </trans-unit>
        <trans-unit id="61015e41645b01550c86b2d125f2df9790ce7401" translate="yes" xml:space="preserve">
          <source>@angular/forms</source>
          <target state="translated">@angular/forms</target>
        </trans-unit>
        <trans-unit id="e26f7552c4a1f57a5df62b630b09631ff0e15c6f" translate="yes" xml:space="preserve">
          <source>@angular/http</source>
          <target state="translated">@angular/http</target>
        </trans-unit>
        <trans-unit id="e5d1b49b65dd984864e1410b698461c7d36bda5e" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser</source>
          <target state="translated">@angular/platform-browser</target>
        </trans-unit>
        <trans-unit id="10e672eabc8358c20a1b99d0ae0d31870a79f19b" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser-dynamic</source>
          <target state="translated">@angular/platform-browser-dynamic</target>
        </trans-unit>
        <trans-unit id="6b0aa1ede02b7a3f684f0fe214d166f170c82f71" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser-dynamic/testing</source>
          <target state="translated">@angular/platform-browser-dynamic/testing</target>
        </trans-unit>
        <trans-unit id="2e11f0488a229e528fb4158f7aad4f7a6b2e6b25" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser/animations</source>
          <target state="translated">@angular/platform-browser/animations</target>
        </trans-unit>
        <trans-unit id="9e90112b14f3f9d7405ff5bbf5ac41f6fad23e16" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser/testing</source>
          <target state="translated">@angular/platform-browser/testing</target>
        </trans-unit>
        <trans-unit id="8527c36725a4add493230fab1d1ad63c30bb0603" translate="yes" xml:space="preserve">
          <source>@angular/platform-server</source>
          <target state="translated">@angular/platform-server</target>
        </trans-unit>
        <trans-unit id="410b9a42af4eeb82d92a052802bd26cc2f266e61" translate="yes" xml:space="preserve">
          <source>@angular/platform-server/testing</source>
          <target state="translated">@angular/platform-server/testing</target>
        </trans-unit>
        <trans-unit id="67f37ebc89fe2f40791a45ff79cc707894e40668" translate="yes" xml:space="preserve">
          <source>@angular/platform-webworker</source>
          <target state="translated">@angular/platform-webworker</target>
        </trans-unit>
        <trans-unit id="3643488d6d67c98970cbaf515cefbc9d56955a51" translate="yes" xml:space="preserve">
          <source>@angular/platform-webworker-dynamic</source>
          <target state="translated">@angular/platform-webworker-dynamic</target>
        </trans-unit>
        <trans-unit id="fc052c7d8c63d918f895798a4e19da09a87ad784" translate="yes" xml:space="preserve">
          <source>@angular/router</source>
          <target state="translated">@angular/router</target>
        </trans-unit>
        <trans-unit id="ab028ed01d9416a9fdc050529d3c99ec7d1e802e" translate="yes" xml:space="preserve">
          <source>@angular/router/testing</source>
          <target state="translated">@angular/router/testing</target>
        </trans-unit>
        <trans-unit id="a58e96f1bd36053d73916cb9200cae8facf5140e" translate="yes" xml:space="preserve">
          <source>@angular/router/upgrade</source>
          <target state="translated">@angular/router/upgrade</target>
        </trans-unit>
        <trans-unit id="9228aadf92cf122517fe58f2a91bd6ac28ad425e" translate="yes" xml:space="preserve">
          <source>@angular/service-worker</source>
          <target state="translated">@angular/service-worker</target>
        </trans-unit>
        <trans-unit id="d928864368b17a18265aaba4fdd5747c5ed71c42" translate="yes" xml:space="preserve">
          <source>@angular/upgrade</source>
          <target state="translated">@angular/upgrade</target>
        </trans-unit>
        <trans-unit id="81cf614360a6dce81230ded3f9d85bf8b6d75f48" translate="yes" xml:space="preserve">
          <source>@angular/upgrade/static</source>
          <target state="translated">@angular/upgrade/static</target>
        </trans-unit>
        <trans-unit id="2a3f18aae18753215405f0611d509473191a373f" translate="yes" xml:space="preserve">
          <source>@angular/upgrade/static/testing</source>
          <target state="translated">@angular/upgrade/static/testing</target>
        </trans-unit>
        <trans-unit id="e1f602c3db3647dc32a679dfdcfd6983aef7679b" translate="yes" xml:space="preserve">
          <source>@ngtools/webpack</source>
          <target state="translated">@ngtools/webpack</target>
        </trans-unit>
        <trans-unit id="5b23476195b1b525dc9af48da50385b5d8eb8dd2" translate="yes" xml:space="preserve">
          <source>@schematics/angular</source>
          <target state="translated">@schematics/angular</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="8bd005966c8583098ae25649268c453cb17489f3" translate="yes" xml:space="preserve">
          <source>A &quot;form submit&quot; is useless at the moment. To make it useful, bind the form's &lt;code&gt;ngSubmit&lt;/code&gt; event property to the hero form component's &lt;code&gt;onSubmit()&lt;/code&gt; method:</source>
          <target state="translated">&quot;양식 제출&quot;은 현재 쓸모가 없습니다. 유용하게 만들려면 폼의 &lt;code&gt;ngSubmit&lt;/code&gt; 이벤트 속성을 hero 폼 구성 요소의 &lt;code&gt;onSubmit()&lt;/code&gt; 메서드에 바인딩하십시오 .</target>
        </trans-unit>
        <trans-unit id="65b987ca9a8742f1c3934c570876582add56deb6" translate="yes" xml:space="preserve">
          <source>A 0-based offset into the duration, in milliseconds.</source>
          <target state="translated">지속 시간에 대한 0 기반 오프셋 (밀리 초)입니다.</target>
        </trans-unit>
        <trans-unit id="3665e1219b8b49a9a2f30755680374e3a4f069d1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; representing a unique string ID, used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;토큰 DI&lt;/a&gt; 고유 한 문자열 ID를 나타내는이 때 주로 응용 프로그램의 속성과 CSS 스타일을 접두어로 사용 &lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated가&lt;/a&gt; 사용되고 있습니다.</target>
        </trans-unit>
        <trans-unit id="08724458362287c4dc27bb2e1240bedf41b5b53d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that indicates the root directory of the application</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;토큰 DI&lt;/a&gt; 그 응용 프로그램의 루트 디렉터리를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="1c42ab4a14101ed0dec6b884f9b19a1aa0652ede" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that maps to the dependency to be injected.</source>
          <target state="translated">삽입 할 종속성에 매핑 되는 &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI 토큰&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1bb62952d2aea1dd906af4604765f4b5473daf34" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that provides a set of callbacks to be called for every component that is bootstrapped.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;토큰 DI&lt;/a&gt; 그 콜백 세트를 제공는 부트 스트랩 된 모든 구성 요소라고합니다.</target>
        </trans-unit>
        <trans-unit id="21e39378e8c575c88f71f6fb04c69ba604876653" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that you can use to provide one or more initialization functions.</source>
          <target state="translated">하나 이상의 초기화 기능을 제공하는 데 사용할 수 있는 &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI 토큰&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c369980a900e3de5edbe23891b4c94301d43b1bc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router initializer that is called after the app is bootstrapped.</source>
          <target state="translated">앱이 부트 스트랩 된 후 호출되는 라우터 초기화 프로그램 의 &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI 토큰&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="84633910c748bad002ece66ced0127dfa10f310e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router service.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI는 토큰&lt;/a&gt; 라우터 서비스.</target>
        </trans-unit>
        <trans-unit id="05cbce62175736deed161b23149e79909f9ee6aa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/structural-directives&quot;&gt;structural directive&lt;/a&gt; that renders a template for each item in a collection. The directive is placed on an element, which becomes the parent of the cloned templates.</source>
          <target state="translated">&lt;a href=&quot;../../guide/structural-directives&quot;&gt;구조 지정&lt;/a&gt; 컬렉션의 각 항목에 대한 템플릿을 렌더링한다. 지시문은 요소에 배치되며 복제 된 템플릿의 부모가됩니다.</target>
        </trans-unit>
        <trans-unit id="bfa958f8e1093a8bce449e50451aecb42605adbf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;shorthand form&lt;/a&gt; of the directive, &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;condition&quot;&lt;/code&gt;, is generally used, provided as an attribute of the anchor element for the inserted template. Angular expands this into a more explicit version, in which the anchor element is contained in an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">삽입 된 템플리트에 대한 앵커 요소의 속성으로 제공되는 지시문 의 &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;축약 양식&lt;/a&gt; 인 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;condition&quot;&lt;/code&gt; 이 일반적으로 사용됩니다. Angular는이를 앵커링 요소가 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 요소에 포함 된보다 명시적인 버전으로 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="c2a4d7b8c6a75b1c2ee19017270778a56eb5735c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; representing a unique string ID, used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;토큰 DI&lt;/a&gt; 고유 한 문자열 ID를 나타내는이 때 주로 응용 프로그램의 속성과 CSS 스타일을 접두어로 사용 &lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated가&lt;/a&gt; 사용되고 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ebe84913a73fedea27bbf98b338d7abb64f79f1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that indicates the root directory of the application</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;토큰 DI&lt;/a&gt; 그 응용 프로그램의 루트 디렉터리를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="4b90691e5e8983b526b5473fd1988721a7c28b33" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that provides a set of callbacks to be called for every component that is bootstrapped.</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;토큰 DI&lt;/a&gt; 그 콜백 세트를 제공는 부트 스트랩 된 모든 구성 요소라고합니다.</target>
        </trans-unit>
        <trans-unit id="a38ba3385eab59d8b4bf0af53d8d55cce6490a4e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that you can use to provide one or more initialization functions.</source>
          <target state="translated">하나 이상의 초기화 기능을 제공하는 데 사용할 수 있는 &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI 토큰&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7af8b7462c7bffa9c6b00d7e9a922cb942a24b41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router initializer that is called after the app is bootstrapped.</source>
          <target state="translated">앱이 부트 스트랩 된 후 호출되는 라우터 초기화 프로그램 의 &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI 토큰&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2167e95d783d64dac9a3583e6f8be0cb7693f606" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router service.</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI는 토큰&lt;/a&gt; 라우터 서비스.</target>
        </trans-unit>
        <trans-unit id="671a4596a4f24339272ddfe627b37cb5ceee98f4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/structural-directives&quot;&gt;structural directive&lt;/a&gt; that renders a template for each item in a collection. The directive is placed on an element, which becomes the parent of the cloned templates.</source>
          <target state="translated">&lt;a href=&quot;../guide/structural-directives&quot;&gt;구조 지정&lt;/a&gt; 컬렉션의 각 항목에 대한 템플릿을 렌더링한다. 지시문은 요소에 배치되며 복제 된 템플릿의 부모가됩니다.</target>
        </trans-unit>
        <trans-unit id="28d80578ea8ec69937675a545d7c84d8b53020fb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;common/locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;hash fragment&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">&lt;a href=&quot;common/locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; 를&lt;/a&gt; 구성하는 데 사용되는 &lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 의 상태를 표현하기 위해 서비스를 &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;해시 조각&lt;/a&gt; 브라우저의 URL의.</target>
        </trans-unit>
        <trans-unit id="e86265c3cf6b32ff2fd9442d3886514cc4425a3f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;common/locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;path&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">&lt;a href=&quot;common/locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; 를&lt;/a&gt; 구성하는 데 사용되는 &lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 의 상태를 표현하기 위해 서비스를 &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;경로&lt;/a&gt; 브라우저의 URL의.</target>
        </trans-unit>
        <trans-unit id="4f6bad214ea94988f7a6681376ce3f9893d5acbc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; class and its associated &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt; define a view. A view is specifically represented by a &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; instance associated with a component. A view that belongs immediately to a component is called a &lt;em&gt;host view&lt;/em&gt;. Views are typically collected into &lt;a href=&quot;glossary#view-tree&quot;&gt;view hierarchies&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#component&quot;&gt;구성 요소&lt;/a&gt; 클래스와 관련 &lt;a href=&quot;glossary#template&quot;&gt;템플릿은&lt;/a&gt; 뷰를 정의합니다. 뷰는 구성 요소와 관련된 &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; 인스턴스 로 구체적으로 표현됩니다 . 구성 요소에 즉시 속하는보기를 &lt;em&gt;호스트보기&lt;/em&gt; 라고합니다 . 보기는 일반적으로 &lt;a href=&quot;glossary#view-tree&quot;&gt;보기 계층 구조&lt;/a&gt; 로 수집됩니다 .</target>
        </trans-unit>
        <trans-unit id="07b53ec1c6e80e65a6a934302fe8fff443c524f5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; statement immediately before a field in a class definition that declares the type of that field. Some examples are &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#decorator&quot;&gt;데코레이터&lt;/a&gt; 해당 필드의 유형을 선언하는 클래스 정의의 필드 직전 문. 일부 예는 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="63d4d003e26971bd02516b5ffbc56282868ab70a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.</source>
          <target state="translated">&lt;a href=&quot;glossary#decorator&quot;&gt;장식&lt;/a&gt; 주어진 형으로 클래스를 선언하고, 메타 유형을 제공하는 적합한 클래스 정의, 직전에 나타난다.</target>
        </trans-unit>
        <trans-unit id="736883308dcb282a137dbd91ee5819bc7558057c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that acts as a placeholder in a routing component's template. Angular dynamically renders the template based on the current router state.</source>
          <target state="translated">&lt;a href=&quot;glossary#directive&quot;&gt;지침&lt;/a&gt; 라우팅 구성 요소의 템플릿에 자리 표시 자 역할을합니다. Angular는 현재 라우터 상태에 따라 템플릿을 동적으로 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="8cc6a0f6df125fb82286558ab003cc9ed2e64056" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#module&quot;&gt;JavaScript module&lt;/a&gt; that is intended to be imported by a user of &lt;a href=&quot;npm-packages&quot;&gt;an npm package&lt;/a&gt;. An entry-point module typically re-exports symbols from other internal modules. A package can contain multiple entry points. For example, the &lt;code&gt;@angular/core&lt;/code&gt; package has two entry-point modules, which can be imported using the module names &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/core/testing&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#module&quot;&gt;자바 스크립트 모듈&lt;/a&gt; 목적의 사용자가 가져올 수 &lt;a href=&quot;npm-packages&quot;&gt;NPM 패키지&lt;/a&gt; . 진입 점 모듈은 일반적으로 다른 내부 모듈에서 심볼을 다시 내 보냅니다. 패키지에는 여러 개의 진입 점이 포함될 수 있습니다. 예를 들어 &lt;code&gt;@angular/core&lt;/code&gt; 패키지에는 모듈 이름 &lt;code&gt;@angular/core&lt;/code&gt; 및 &lt;code&gt;@angular/core/testing&lt;/code&gt; 사용하여 가져올 수있는 두 개의 진입 점 모듈이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1bd839e877277ad1a0845539091b7fa0d61cf003" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://javascript.info/modules&quot;&gt;JavaScript module&lt;/a&gt; is an individual file with JavaScript code, usually containing a class or a library of functions for a specific purpose within your app. JavaScript modules let you spread your work across multiple files.</source>
          <target state="translated">&lt;a href=&quot;https://javascript.info/modules&quot;&gt;자바 스크립트 모듈은&lt;/a&gt; 일반적으로 클래스 또는 응용 프로그램 내에서 특정 목적을위한 함수 라이브러리를 포함, 자바 스크립트 코드를 개별 파일입니다. JavaScript 모듈을 사용하면 작업을 여러 파일에 분산시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="add79b6cad225ba3d033ac5074d0537e68619577" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;hash fragment&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">&lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; 를&lt;/a&gt; 구성하는 데 사용되는 &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 의 상태를 표현하기 위해 서비스를 &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;해시 조각&lt;/a&gt; 브라우저의 URL의.</target>
        </trans-unit>
        <trans-unit id="8cb01da6d278c41e8f500ba57266b78eeda4112f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;path&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">&lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; 를&lt;/a&gt; 구성하는 데 사용되는 &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 의 상태를 표현하기 위해 서비스를 &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;경로&lt;/a&gt; 브라우저의 URL의.</target>
        </trans-unit>
        <trans-unit id="2bbb0a47b63bbf8d048b90ba20a0504e312db21c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;템플릿 참조 변수&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1bcafa0eb5b956163eeed4a6a75cabbad36df0ec" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;toh-pt5#routerlink&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt; attribute&lt;/a&gt; is set to &lt;code&gt;&quot;/heroes&quot;&lt;/code&gt;, the string that the router matches to the route to &lt;code&gt;HeroesComponent&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; is the selector for the &lt;a href=&quot;../api/router/routerlink&quot;&gt;&lt;code&gt;RouterLink&lt;/code&gt; directive&lt;/a&gt; that turns user clicks into router navigations. It's another of the public directives in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt5#routerlink&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; 의 속성이&lt;/a&gt; 설정되어 &lt;code&gt;&quot;/heroes&quot;&lt;/code&gt; , 문자열 것과 경로에 라우터 일치 &lt;code&gt;HeroesComponent&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 는 위한 선택기이다 &lt;a href=&quot;../api/router/routerlink&quot;&gt; &lt;code&gt;RouterLink&lt;/code&gt; 의 지시&lt;/a&gt; 라우터 내비게이션에 해당 권선 사용자 클릭. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 의 또 다른 공용 지시어입니다 .</target>
        </trans-unit>
        <trans-unit id="639a482ada343d0e5ad93bfc7d5a941c5b1a2260" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; isn't tied to route configuration, so update the associated router links to remain active when the new route is active. Update the &lt;code&gt;app.component.ts&lt;/code&gt; template for the &lt;code&gt;/heroes&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 는 그래서 새로운 경로가 활성화 될 때 관련 라우터 링크가 활성 상태로 유지하기 위해 업데이트, 경로 구성에 연결되어 있지 않습니다. &lt;code&gt;/heroes&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 에 대한 &lt;code&gt;app.component.ts&lt;/code&gt; 템플릿을 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="fc4971774abe3d8584810de15a2245c3c6cae43d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on a checkbox input element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 값을 기록하고, 체크 박스 입력 요소에 변화를 청취.</target>
        </trans-unit>
        <trans-unit id="cd9cf13f7f418773a9187ad3a6e120365e43541c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; which has an &lt;code&gt;InjectableDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 이 &lt;code&gt;InjectableDef&lt;/code&gt; 의 정적 필드를.</target>
        </trans-unit>
        <trans-unit id="a1866590e2a9d78d0830efe2890f1b2b38203b59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; aggregates the values of each child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; into an array. It calculates its status by reducing the status values of its children. For example, if one of the controls in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; is invalid, the entire array becomes invalid.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 은 각 하위 값 집계 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 를 배열로. 자식의 상태 값을 줄임으로써 상태를 계산합니다. 예를 들어, &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 컨트롤 중 하나 가 유효하지 않으면 전체 배열이 유효하지 않게됩니다.</target>
        </trans-unit>
        <trans-unit id="7b89f06b9f87139e39972a1053c9bc6bca0c91bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; aggregates the values of each child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; into one object, with each control name as the key. It calculates its status by reducing the status values of its children. For example, if one of the controls in a group is invalid, the entire group becomes invalid.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 는 각 자식의 값 집계 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 을 핵심으로 각 컨트롤 이름으로, 하나의 객체로. 자식의 상태 값을 줄임으로써 상태를 계산합니다. 예를 들어 그룹의 컨트롤 중 하나가 유효하지 않으면 전체 그룹이 유효하지 않게됩니다.</target>
        </trans-unit>
        <trans-unit id="7ef598a60dce9571b1bf71d84f8e3c71d63ad355" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on a checkbox input element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 값을 기록하고, 체크 박스 입력 요소에 변화를 청취.</target>
        </trans-unit>
        <trans-unit id="66c4eaf792aaeb8d31859e17fd96da17357b8f90" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; object specifying lazy-loaded child routes.</source>
          <target state="translated">지연로드 된 자식 경로를 지정 하는 &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 개체입니다.</target>
        </trans-unit>
        <trans-unit id="63da7a685bae436a5baefed6056ea8939ddd6817" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; (e.g. query &lt;code&gt;&amp;lt;ng-template&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;) template;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; (예를 들어, 쿼리 &lt;code&gt;&amp;lt;ng-template&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;) template;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a511714d8bf182dc76071d42430897aa3ecbec4c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; which has an &lt;code&gt;InjectableDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 이 &lt;code&gt;InjectableDef&lt;/code&gt; 의 정적 필드를.</target>
        </trans-unit>
        <trans-unit id="be187422c88f7b9b30fb7c76cc4c7c623d036f19" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;upgrade/urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; that uses logic from AngularJS to serialize and parse URLs and URL parameters.</source>
          <target state="translated">URL 및 URL 매개 변수를 직렬화하고 구문 분석하기 위해 AngularJS의 로직을 사용 하는 &lt;code&gt;&lt;a href=&quot;upgrade/urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8aa0947cbfd3ce658b43f4a986bda6fe30e35bb0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; that uses logic from AngularJS to serialize and parse URLs and URL parameters.</source>
          <target state="translated">URL 및 URL 매개 변수를 직렬화하고 구문 분석하기 위해 AngularJS의 로직을 사용 하는 &lt;code&gt;&lt;a href=&quot;urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f670a48ce55883fb60d1e60146176438b4f9fc8f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rule&lt;/code&gt; can use external template files, transform them, and return another &lt;code&gt;Rule&lt;/code&gt; object with the transformed template. You can use the templating to generate any custom files required for your schematic.</source>
          <target state="translated">&lt;code&gt;Rule&lt;/code&gt; , 외부 템플릿 파일을 사용하여 그들을 변환 및 다른 반환 할 수 &lt;code&gt;Rule&lt;/code&gt; 변환 된 템플릿으로 개체를. 템플릿을 사용하여 회로도에 필요한 모든 사용자 정의 파일을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c67da25cb3690615ce138f76204d22676cb05cd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rule&lt;/code&gt; object defines a function that takes a &lt;code&gt;Tree&lt;/code&gt;, applies transformations, and returns a new &lt;code&gt;Tree&lt;/code&gt;. The main file for a schematic, &lt;code&gt;index.ts&lt;/code&gt;, defines a set of rules that implement the schematic's logic.</source>
          <target state="translated">&lt;code&gt;Rule&lt;/code&gt; 객체는받는 함수 정의 &lt;code&gt;Tree&lt;/code&gt; , 변환을 적용하고, 새로운 반환 &lt;code&gt;Tree&lt;/code&gt; . 회로도의 기본 파일 인 &lt;code&gt;index.ts&lt;/code&gt; 는 회로도의 논리를 구현하는 규칙 세트를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="638c6d0fa216e5dc64a35311be5238d1c02fe4e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; is both a source of observable values and an &lt;code&gt;Observable&lt;/code&gt; itself. You can subscribe to a &lt;code&gt;Subject&lt;/code&gt; as you would any &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 관측 값의 소스와 둘 다 &lt;code&gt;Observable&lt;/code&gt; 자체. &lt;code&gt;Observable&lt;/code&gt; 과 마찬가지로 &lt;code&gt;Subject&lt;/code&gt; 를 구독 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f796e4fa4f68f7165ad948a94f7f1758ca29753" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;createComponent&lt;/code&gt; method creates a &lt;code&gt;page&lt;/code&gt; object and fills in the blanks once the &lt;code&gt;hero&lt;/code&gt; arrives.</source>
          <target state="translated">&lt;code&gt;createComponent&lt;/code&gt; 이의 방법은 생성 &lt;code&gt;page&lt;/code&gt; 오브젝트와되면 빈칸 채우고 &lt;code&gt;hero&lt;/code&gt; 도달한다.</target>
        </trans-unit>
        <trans-unit id="78444a00c7b1487feeeec0402985a438a4edf3a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;download()&lt;/code&gt; method in the &lt;code&gt;DownloaderComponent&lt;/code&gt; initiates the request by subscribing to the service method.</source>
          <target state="translated">&lt;code&gt;DownloaderComponent&lt;/code&gt; 의 &lt;code&gt;download()&lt;/code&gt; 메소드 는 서비스 메소드를 구독하여 요청을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="705022181dc8804afad6074ba8ac3e641784ceb5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;name&lt;/code&gt; is mandatory. It identifies this particular group of assets between versions of the configuration.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 필수입니다. 구성 버전간에이 특정 자산 그룹을 식별합니다.</target>
        </trans-unit>
        <trans-unit id="10c6052679f6bf0bc936d7c28d99e11c4be6ccb3" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Crisis Center&lt;/em&gt; for maintaining the list of crises for assignment to heroes.</source>
          <target state="translated">&lt;em&gt;위기 센터&lt;/em&gt; 영웅에 할당 위기의 목록을 유지.</target>
        </trans-unit>
        <trans-unit id="3f14306f923e2f4bf4cadb6ead21423f41ee343d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Heroes&lt;/em&gt; area for maintaining the list of heroes employed by the agency.</source>
          <target state="translated">&lt;em&gt;영웅&lt;/em&gt; 기관에 의해 고용 영웅의 목록을 유지하기위한 영역입니다.</target>
        </trans-unit>
        <trans-unit id="da081d80f84ace307cde80af3645ff2e9eef9fae" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;cold&lt;/em&gt; observable doesn't produce values until you subscribe to it. Most of your application observables are cold. All &lt;a href=&quot;http&quot;&gt;&lt;em&gt;HttpClient&lt;/em&gt;&lt;/a&gt; methods return cold observables.</source>
          <target state="translated">&lt;em&gt;감기에&lt;/em&gt; 당신이에 가입 할 때까지 관찰 값을 생성하지 않습니다. 대부분의 응용 프로그램 관측 가능 항목은 차갑습니다. 모든 &lt;a href=&quot;http&quot;&gt;&lt;em&gt;HttpClient&lt;/em&gt;&lt;/a&gt; 메소드는 콜드 &lt;em&gt;옵저버 블&lt;/em&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d7a613682601691a64063c88494e50a72e12af55" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component-under-test&lt;/em&gt; doesn't have to be injected with real services. In fact, it is usually better if they are test doubles (stubs, fakes, spies, or mocks). The purpose of the spec is to test the component, not the service, and real services can be trouble.</source>
          <target state="translated">&lt;em&gt;구성 요소 아래의 테스트는&lt;/em&gt; 실제 서비스를 주입 할 필요가 없습니다. 사실, 그들은 시험 복식 (스텁, 가짜, 스파이 또는 모의) 인 것이 일반적으로 좋습니다. 이 사양의 목적은 서비스가 아닌 구성 요소를 테스트하는 것이며 실제 서비스는 문제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f385f7ae4f93d341a97d98233959d238340a77d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; controls a patch of screen called a &lt;a href=&quot;glossary#view&quot;&gt;&lt;em&gt;view&lt;/em&gt;&lt;/a&gt;. For example, individual components define and control each of the following views from the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;:</source>
          <target state="translated">&lt;em&gt;구성 요소&lt;/em&gt; 컨트롤 화면의 패치는이라고 &lt;a href=&quot;glossary#view&quot;&gt;&lt;em&gt;보기&lt;/em&gt;&lt;/a&gt; . 예를 들어 개별 구성 요소는 &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes 자습서&lt;/a&gt; 에서 다음 각 뷰를 정의하고 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="6780ccccda3402b96f6143330a19b3aeb1ffa0b6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; controls a patch of screen called a &lt;em&gt;view&lt;/em&gt;. For example, individual components define and control each of the following views from the &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt;:</source>
          <target state="translated">&lt;em&gt;구성 요소&lt;/em&gt; 컨트롤 화면의 패치는이라고 &lt;em&gt;보기&lt;/em&gt; . 예를 들어, 개별 컴포넌트는 &lt;a href=&quot;tutorial&quot;&gt;학습서&lt;/a&gt; 에서 다음 각보기를 정의하고 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="4e8f8fa8491a780054dbb51957cbec42c3bfabe7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; manages a region of HTML in the manner of a native HTML element. Technically it's a directive with a template.</source>
          <target state="translated">&lt;em&gt;구성 요소는&lt;/em&gt; 기본 HTML 요소의 방식으로 HTML의 영역을 관리합니다. 기술적으로는 템플릿이 포함 된 지시문입니다.</target>
        </trans-unit>
        <trans-unit id="28cb0670dda43adba7b040a7a2903cac40bc4f8c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;different&lt;/em&gt; battery of tests can explore whether the application navigates as expected in the presence of conditions that influence guards such as whether the user is authenticated and authorized.</source>
          <target state="translated">&lt;em&gt;다른&lt;/em&gt; 시험 전지는 사용자 여부 등의 영향 가드 인증 및인가되는 조건 하에서 예상 한대로 적용 여부를 탐색 탐색 할 수있다.</target>
        </trans-unit>
        <trans-unit id="1ecf60bb6e7234367c513185ab06b67468546b87" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;header&lt;/em&gt; node child can be an &lt;em&gt;item&lt;/em&gt; node or another &lt;em&gt;header&lt;/em&gt; node. If your guide page belongs under a sub-header, find that sub-header in the JSON.</source>
          <target state="translated">&lt;em&gt;헤더&lt;/em&gt; 노드의 자녀가 될 수있는 &lt;em&gt;항목&lt;/em&gt; 노드 또는 다른 &lt;em&gt;헤더&lt;/em&gt; 노드입니다. 가이드 페이지가 하위 헤더 아래에있는 경우 JSON에서 해당 하위 헤더를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="a6e78c0c7440d9a1475224eac8e461df1f4d1910" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;hot&lt;/em&gt; observable is already producing values &lt;em&gt;before&lt;/em&gt; you subscribe to it. The &lt;a href=&quot;../api/router/router#events&quot;&gt;&lt;em&gt;Router.events&lt;/em&gt;&lt;/a&gt; observable, which reports router activity, is a &lt;em&gt;hot&lt;/em&gt; observable.</source>
          <target state="translated">&lt;em&gt;뜨거운&lt;/em&gt; 관찰 이미 값을 생산 &lt;em&gt;하기 전에&lt;/em&gt; 당신이 그것을에 가입. 라우터 활동을보고 하는 &lt;a href=&quot;../api/router/router#events&quot;&gt;&lt;em&gt;Router.events&lt;/em&gt;&lt;/a&gt; 관찰 가능은 &lt;em&gt;핫&lt;/em&gt; 관찰 가능입니다.</target>
        </trans-unit>
        <trans-unit id="429f08c3512fd957fd5ba7325869a0c3988fb427" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;locale&lt;/em&gt; identifies a region (such as a country) in which people speak a particular language or language variant. The locale determines the formatting and parsing of dates, times, numbers, and currencies as well as measurement units and the translated names for time zones, languages, and countries.</source>
          <target state="translated">&lt;em&gt;로케일이&lt;/em&gt; 있는 사람들은 특정 언어 나 언어의 변형을 말한다 (예 : 국가로) 영역을 식별합니다. 로케일은 날짜, 시간, 숫자 및 통화의 형식화 및 구문 분석은 물론 표준 시간대, 언어 및 국가에 대한 측정 단위 및 번역 된 이름을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="2522563b2cdfe71f09ecb80ce5010241ee842471" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;marble frame&lt;/em&gt; is a virtual unit of testing time. Each symbol (&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;) marks the passing of one frame.</source>
          <target state="translated">&lt;em&gt;대리석 프레임은&lt;/em&gt; 테스트 시간의 가상 유닛이다. 각 기호 ( &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; , &lt;code&gt;#&lt;/code&gt; )는 한 프레임의 통과를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0287d9aa44943985aa24e920490c681de38a6f70" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;provider&lt;/em&gt; is an object that tells an injector how to obtain or create a dependency.</source>
          <target state="translated">&lt;em&gt;제공자는&lt;/em&gt; 얻거나 종속성을 만드는 방법 인젝터를 알려주는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="dd4cdaab79b1c66984ce01f6287162f8aac9fe6e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;routed component&lt;/em&gt; is the destination of a &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; navigation. It can be trickier to test, especially when the route to the component &lt;em&gt;includes parameters&lt;/em&gt;. The &lt;code&gt;HeroDetailComponent&lt;/code&gt; is a &lt;em&gt;routed component&lt;/em&gt; that is the destination of such a route.</source>
          <target state="translated">&lt;em&gt;라우팅 구성 요소는&lt;/em&gt; a의 목적지 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 탐색. 특히 구성 요소에 대한 경로에 &lt;em&gt;매개 변수가 포함 된&lt;/em&gt; 경우 테스트하기가 더 까다로울 수 있습니다 . &lt;code&gt;HeroDetailComponent&lt;/code&gt; 는 이러한 &lt;em&gt;경로&lt;/em&gt; 의 대상인 &lt;em&gt;라우팅 된 구성 요소&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="65403259921593d9fe9e203a711cab5ad7a29b69" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;routing component&lt;/em&gt; is a component that tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate to another component. The &lt;code&gt;DashboardComponent&lt;/code&gt; is a &lt;em&gt;routing component&lt;/em&gt; because the user can navigate to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; by clicking on one of the &lt;em&gt;hero buttons&lt;/em&gt; on the dashboard.</source>
          <target state="translated">&lt;em&gt;라우팅 구성 요소는&lt;/em&gt; 알려주는 구성 요소 인 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 다른 구성 요소로 이동합니다. &lt;code&gt;DashboardComponent&lt;/code&gt; 는 A는 &lt;em&gt;라우팅 구성 요소&lt;/em&gt; 는 사용자가 탐색 할 수 있기 때문에 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 중 하나를 클릭하여 &lt;em&gt;영웅 버튼&lt;/em&gt; 대시 보드에.</target>
        </trans-unit>
        <trans-unit id="4a4ab23bceb89b16d9f1be68a2a55b882d1d9ca2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; the same as a &lt;a href=&quot;template-reference-variables&quot;&gt;template &lt;em&gt;reference&lt;/em&gt; variable&lt;/a&gt;, neither &lt;em&gt;semantically&lt;/em&gt; nor &lt;em&gt;syntactically&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;템플릿의 입력 변수&lt;/em&gt; 인 &lt;strong&gt;&lt;em&gt;하지&lt;/em&gt;&lt;/strong&gt; A와 동일한 &lt;a href=&quot;template-reference-variables&quot;&gt;템플릿 &lt;em&gt;기준&lt;/em&gt; 변수&lt;/a&gt; 도, &lt;em&gt;의미&lt;/em&gt; 나 &lt;em&gt;구문&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f44fda8c801c30c6245fab7c9fb64928de21c181" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; the same as a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template &lt;em&gt;reference&lt;/em&gt; variable&lt;/a&gt;, neither &lt;em&gt;semantically&lt;/em&gt; nor &lt;em&gt;syntactically&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;템플릿의 입력 변수&lt;/em&gt; 인 &lt;strong&gt;&lt;em&gt;하지&lt;/em&gt;&lt;/strong&gt; A와 동일한 &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;템플릿 &lt;em&gt;기준&lt;/em&gt; 변수&lt;/a&gt; 도, &lt;em&gt;의미&lt;/em&gt; 나 &lt;em&gt;구문&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="3390432957501640594fa03bf4b3db1812ce6212" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is a variable whose value you can reference &lt;em&gt;within&lt;/em&gt; a single instance of the template. There are several such variables in this example: &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;. All are preceded by the keyword &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;템플릿의 입력 변수&lt;/em&gt; 값이 참조 할 수있는 변수이다 &lt;em&gt;내에&lt;/em&gt; 템플릿의 단일 인스턴스. 이 예제에는 &lt;code&gt;hero&lt;/code&gt; , &lt;code&gt;i&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 와 같은 여러 변수가 있습니다 . 모두 키워드 &lt;code&gt;let&lt;/code&gt; 이 앞에옵니다 .</target>
        </trans-unit>
        <trans-unit id="ee6e5ce5d6e886a13946adcff6c81bdc58af57a9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is a variable whose value you can reference &lt;em&gt;within&lt;/em&gt; a single instance of the template. There are several such variables in this example: &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;odd&lt;/code&gt;. All are preceded by the keyword &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;템플릿의 입력 변수&lt;/em&gt; 값이 참조 할 수있는 변수이다 &lt;em&gt;내에&lt;/em&gt; 템플릿의 단일 인스턴스. 이 예제에는 &lt;code&gt;hero&lt;/code&gt; , &lt;code&gt;i&lt;/code&gt; 및 &lt;code&gt;odd&lt;/code&gt; 와 같은 여러 변수가 있습니다 . 모두 앞에 키워드 &lt;code&gt;let&lt;/code&gt; 이옵니다 .</target>
        </trans-unit>
        <trans-unit id="9ecfc556e297c7f984423ac98bb2b8133f9a4ac9" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;template reference variable&lt;/strong&gt; is often a reference to a DOM element within a template. It can also refer to a directive (which contains a component), an element, &lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;, or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;web component&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;템플릿 참조 변수는&lt;/strong&gt; 종종 주형 내에 DOM 요소에 대한 참조이다. 또한 지시문 (구성 요소 포함), 요소, &lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;웹 구성 요소를&lt;/a&gt; 참조 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b5ee6341ca20af13f54afad2702ef692ea841fe9" translate="yes" xml:space="preserve">
          <source>A Boolean expression or function that compares the previous and current animation states, and returns true if this transition should occur. Note that &quot;true&quot; and &quot;false&quot; match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the animation trigger element. The animation steps run when the expression evaluates to true.</source>
          <target state="translated">이전 및 현재 애니메이션 상태를 비교하고이 전환이 발생하면 true를 반환하는 부울 표현식 또는 함수입니다. &quot;true&quot;와 &quot;false&quot;는 각각 1과 0과 일치합니다. 애니메이션 트리거 요소에서 상태가 변경 될 때마다 표현식이 평가됩니다. 식이 true로 평가되면 애니메이션 단계가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="599809fd82612316228fe38bb0ea1720a7b9dd5a" translate="yes" xml:space="preserve">
          <source>A CSS file for the component styles.</source>
          <target state="translated">컴포넌트 스타일을위한 CSS 파일.</target>
        </trans-unit>
        <trans-unit id="a9abdc794382f88b4186d350695b45ba965e727b" translate="yes" xml:space="preserve">
          <source>A CSS file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.css&lt;/code&gt;</source>
          <target state="translated">CSS 파일, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.css&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="325911946e6c51f270aa14d7b9014525fc242ae5" translate="yes" xml:space="preserve">
          <source>A CSS selector that defines how the component is used in a template</source>
          <target state="translated">템플릿에서 구성 요소가 사용되는 방식을 정의하는 CSS 선택기</target>
        </trans-unit>
        <trans-unit id="b4058f8c553b89231956449dda490106299e1981" translate="yes" xml:space="preserve">
          <source>A Chrome browser also opens and displays the test output in the &quot;Jasmine HTML Reporter&quot; like this.</source>
          <target state="translated">Chrome 브라우저도 열리고 이와 같이 &quot;Jasmine HTML Reporter&quot;에 테스트 출력이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c0ba6f4f7f04ded94da4b082f8c0437a09402aaf" translate="yes" xml:space="preserve">
          <source>A DI Token representing a unique string id assigned to the application by Angular and used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">Angular가 애플리케이션에 할당 한 고유 문자열 ID를 나타내는 DI 토큰으로, &lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; 가 사용될 때 주로 애플리케이션 속성 및 CSS 스타일을 접두어 로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b7f7bf6e86152cf166fec0bfcc09711603e31bcb" translate="yes" xml:space="preserve">
          <source>A DI Token representing a unique string id assigned to the application by Angular and used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">Angular가 애플리케이션에 할당 한 고유 문자열 ID를 나타내는 DI 토큰으로, &lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; 가 사용될 때 주로 애플리케이션 속성 및 CSS 스타일을 접두어 로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7f16103dee940de0e134938036f3a37e0da8edf9" translate="yes" xml:space="preserve">
          <source>A DI Token representing the main rendering context. In a browser this is the DOM Document.</source>
          <target state="translated">메인 렌더링 컨텍스트를 나타내는 DI 토큰. 브라우저에서 이것은 DOM 문서입니다.</target>
        </trans-unit>
        <trans-unit id="34a19c262ed7d9301354c9b8c7ce2cbc30aa8028" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 특성 값을 기반으로 컴포넌트 및 NgModules 의 &lt;code&gt;entryComponents&lt;/code&gt; 필드를 채우는 가상 &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;제공자&lt;/a&gt; 를 작성하는 데 사용할 수있는 DI 토큰입니다 . &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 값 (직접 또는 중첩 배열 또는 맵에서)에서 참조되는 모든 구성 요소가 &lt;code&gt;entryComponents&lt;/code&gt; 특성에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="70232df0f593e7c10d143cfe89b64fce45313f70" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;useValue&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;useValue&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;useValue&lt;/code&gt; 속성 값을 기반으로 구성 요소 및 NgModules 의 &lt;code&gt;entryComponents&lt;/code&gt; 필드를 채우는 가상 &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;공급자&lt;/a&gt; 를 만드는 데 사용할 수있는 DI 토큰입니다 . &lt;code&gt;useValue&lt;/code&gt; 값 에서 참조되는 모든 구성 요소 (직접 또는 중첩 배열 또는 맵)는 &lt;code&gt;entryComponents&lt;/code&gt; 속성에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="f4aaaddad79edba7b85207af000a6cde392c8d30" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 특성 값을 기반으로 컴포넌트 및 NgModules 의 &lt;code&gt;entryComponents&lt;/code&gt; 필드를 채우는 가상 &lt;a href=&quot;../guide/glossary#provider&quot;&gt;제공자&lt;/a&gt; 를 작성하는 데 사용할 수있는 DI 토큰입니다 . &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 값 (직접 또는 중첩 배열 또는 맵에서)에서 참조되는 모든 구성 요소가 &lt;code&gt;entryComponents&lt;/code&gt; 특성에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="372441ce210e4f82a7df974823f5d005424ddafd" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;useValue&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;useValue&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;useValue&lt;/code&gt; 속성 값을 기반으로 구성 요소 및 NgModules 의 &lt;code&gt;entryComponents&lt;/code&gt; 필드를 채우는 가상 &lt;a href=&quot;../guide/glossary#provider&quot;&gt;공급자&lt;/a&gt; 를 만드는 데 사용할 수있는 DI 토큰입니다 . &lt;code&gt;useValue&lt;/code&gt; 값 에서 참조되는 모든 구성 요소 (직접 또는 중첩 배열 또는 맵)는 &lt;code&gt;entryComponents&lt;/code&gt; 속성에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="6c6c6ad6dc434b59f3c338cdee09daa910f4fcb1" translate="yes" xml:space="preserve">
          <source>A Directive that adds the &lt;code&gt;required&lt;/code&gt; validator to checkbox controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 속성으로 표시된 확인란 컨트롤에 &lt;code&gt;required&lt;/code&gt; 유효성 검사기를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="b287f8f1214950d0e2f03c7ed6dc8f29f0a4fa20" translate="yes" xml:space="preserve">
          <source>A Directive that adds the &lt;code&gt;required&lt;/code&gt; validator to checkbox controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 속성으로 표시된 확인란 컨트롤에 &lt;code&gt;required&lt;/code&gt; 유효성 검사기를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="af60e9a597d2c5395c23f65dc9848a9ec136811f" translate="yes" xml:space="preserve">
          <source>A JSON schema associated with a schematic tells the Angular CLI what options are available to commands and subcommands, and determines the defaults. These defaults can be overridden by providing a different value for an option on the command line. See &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt; for information about how you can change the generation option defaults for your workspace.</source>
          <target state="translated">회로도와 연관된 JSON 스키마는 Angular CLI에 명령 및 하위 명령에 사용 가능한 옵션을 알려주고 기본값을 결정합니다. 이 기본값은 명령 행에서 옵션에 다른 값을 제공하여 대체 할 수 있습니다. &lt;a href=&quot;workspace-config&quot;&gt;작업 공간&lt;/a&gt; 의 생성 옵션 기본값을 변경하는 방법에 대한 정보는 작업 공간 구성 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="576c3fc6feeabf272864a096aed610727c170f4b" translate="yes" xml:space="preserve">
          <source>A Node Express server is a pipeline of middleware that filters and processes requests one after the other. You configure the Node Express server pipeline with calls to &lt;code&gt;app.get()&lt;/code&gt; like this one for data requests.</source>
          <target state="translated">Node Express 서버는 요청을 차례로 필터링하고 처리하는 미들웨어의 파이프 라인입니다. 데이터 요청을 위해 이와 같은 &lt;code&gt;app.get()&lt;/code&gt; 을 호출하여 Node Express 서버 파이프 라인을 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="9866f48f960862f21acf4991655f3cc3f96cc63a" translate="yes" xml:space="preserve">
          <source>A Node.js Express server is a pipeline of middleware that filters and processes requests one after the other. You configure the Node.js Express server pipeline with calls to &lt;code&gt;server.get()&lt;/code&gt; like this one for data requests.</source>
          <target state="translated">Node.js Express 서버는 요청을 차례로 필터링하고 처리하는 미들웨어 파이프 라인입니다. 데이터 요청에 대해 이와 같이 &lt;code&gt;server.get()&lt;/code&gt; 을 호출하여 Node.js Express 서버 파이프 라인을 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="638b2d1ff2d39b9a31cf3cdf34086dca5e31b768" translate="yes" xml:space="preserve">
          <source>A ReflectiveDependency injection container used for instantiating objects and resolving dependencies.</source>
          <target state="translated">객체를 인스턴스화하고 종속성을 해결하는 데 사용되는 ReflectiveDependency 주입 컨테이너입니다.</target>
        </trans-unit>
        <trans-unit id="59dd0c3f0e2ab9dff2d45116e5f275a7bd7fc27d" translate="yes" xml:space="preserve">
          <source>A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property like &lt;code&gt;innerHTML&lt;/code&gt; that could cause Cross Site Scripting (XSS) security bugs when improperly handled.</source>
          <target state="translated">SecurityContext는 부적절하게 처리 될 때 XSS (Cross Site Scripting) 보안 버그를 유발할 수있는 &lt;code&gt;innerHTML&lt;/code&gt; 과 같은 DOM 속성과 같은 위험한 보안 관련 위치를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="abf2fe6e840b3478ea12942a2f906e769e970379" translate="yes" xml:space="preserve">
          <source>A TypeScript class to shape the &lt;strong&gt;model data&lt;/strong&gt; for your component and display properties of that model.</source>
          <target state="translated">구성 요소 의 &lt;strong&gt;모델 데이터&lt;/strong&gt; 를 구성하고 해당 모델의 속성을 표시 하는 TypeScript 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="2ce514d5a29cc020eab107370f83c5964cc081c9" translate="yes" xml:space="preserve">
          <source>A TypeScript configuration can inherit settings from another file using the &lt;code&gt;extends&lt;/code&gt; property. The configuration options from the base file are loaded first, then overridden by those in the inheriting &lt;code&gt;tsconfig&lt;/code&gt; file.</source>
          <target state="translated">TypeScript 구성은 &lt;code&gt;extends&lt;/code&gt; 속성을 사용하여 다른 파일의 설정을 상속 할 수 있습니다 . 기본 파일의 구성 옵션이 먼저로드 된 다음 상속하는 &lt;code&gt;tsconfig&lt;/code&gt; 파일 의 구성 옵션으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="63e98a8ebbd8b7b207fdc26cb7fdee82848968fd" translate="yes" xml:space="preserve">
          <source>A TypeScript configuration can inherit settings from another file using the &lt;code&gt;extends&lt;/code&gt; property. The configuration options from the base file are loaded first, then overridden by those in the inheriting configuration file.</source>
          <target state="translated">TypeScript 구성은 &lt;code&gt;extends&lt;/code&gt; 속성을 사용하여 다른 파일의 설정을 상속 할 수 있습니다 . 기본 파일의 구성 옵션이 먼저로드 된 다음 상속하는 구성 파일의 옵션에 의해 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="bf52b0587c806c818b0e66032278502b10c27741" translate="yes" xml:space="preserve">
          <source>A TypeScript file with a component class named &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">이름이 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 인 구성 요소 클래스가있는 TypeScript 파일입니다 .</target>
        </trans-unit>
        <trans-unit id="75ee6a49dc9a24af9ee987b8b0f73148b94a0862" translate="yes" xml:space="preserve">
          <source>A TypeScript-like syntax that Angular evaluates within a &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;.</source>
          <target state="translated">Angular가 &lt;a href=&quot;glossary#data-binding&quot;&gt;데이터 바인딩&lt;/a&gt; 내에서 평가하는 TypeScript와 유사한 구문입니다 .</target>
        </trans-unit>
        <trans-unit id="f4e1869985246ff619d0cd09d72d769c0fca1a1b" translate="yes" xml:space="preserve">
          <source>A Typescript class that defines behavior</source>
          <target state="translated">동작을 정의하는 Typescript 클래스</target>
        </trans-unit>
        <trans-unit id="d9b532cb4e6dbf28e2ec99b1d5e242df8ee636f8" translate="yes" xml:space="preserve">
          <source>A URL like &lt;code&gt;~/detail/11&lt;/code&gt; would be a good URL for navigating to the &lt;em&gt;Hero Detail&lt;/em&gt; view of the hero whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;11&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;~/detail/11&lt;/code&gt; 과 같은 URL 은 &lt;code&gt;id&lt;/code&gt; 가 &lt;code&gt;11&lt;/code&gt; 인 영웅 의 &lt;em&gt;Hero Detail&lt;/em&gt; 보기로 이동하기에 좋은 URL입니다 .</target>
        </trans-unit>
        <trans-unit id="5aa19c3e00b09eff21880f8aeb69b67bf3ae32ff" translate="yes" xml:space="preserve">
          <source>A URL string relative to the full URL string.</source>
          <target state="translated">전체 URL 문자열을 기준으로 한 URL 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="93e7f0f463135d020d0e07a514b4e627a1b7f7fd" translate="yes" xml:space="preserve">
          <source>A URL that defines the ServiceWorker's registration scope; that is, what range of URLs it can control. It will be used when calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register&quot;&gt;ServiceWorkerContainer#register()&lt;/a&gt;.</source>
          <target state="translated">ServiceWorker의 등록 범위를 정의하는 URL입니다. 즉, 제어 할 수있는 URL 범위입니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register&quot;&gt;ServiceWorkerContainer # register ()를&lt;/a&gt; 호출 할 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="87928deb819d7b06c573721d3c82d53581b3ba5a" translate="yes" xml:space="preserve">
          <source>A URL to redirect to when the path matches. Absolute if the URL begins with a slash (/), otherwise relative to the path URL. When not present, router does not redirect.</source>
          <target state="translated">경로가 일치 할 때 리디렉션 할 URL입니다. URL이 슬래시 (/)로 시작하면 절대적이며 그렇지 않으면 경로 URL을 기준으로합니다. 없는 경우 라우터가 리디렉션되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="23e44cf2c0692f9e95579ce06f4b68b8cc6db506" translate="yes" xml:space="preserve">
          <source>A URL to which to redirect when a the path matches. Absolute if the URL begins with a slash (/), otherwise relative to the path URL. When not present, router does not redirect.</source>
          <target state="translated">경로가 일치 할 때 리디렉션 할 URL입니다. URL이 슬래시 (/)로 시작하는 경우 절대, 그렇지 않으면 경로 URL을 기준으로합니다. 존재하지 않으면 라우터가 리디렉션되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="46e53a936bddd1e6667ff7ab0bf8ab8e4d5e07b7" translate="yes" xml:space="preserve">
          <source>A Unicode locale identifier is composed of a Unicode language identifier and (optionally) the character &lt;code&gt;-&lt;/code&gt; followed by a locale extension. (For historical reasons the character &lt;code&gt;&lt;a href=&quot;i18n&quot;&gt;_&lt;/a&gt;&lt;/code&gt; is supported as an alternative to &lt;code&gt;-&lt;/code&gt;.) For example, in the locale id &lt;code&gt;fr-CA&lt;/code&gt; the &lt;code&gt;fr&lt;/code&gt; refers to the French language identifier, and the &lt;code&gt;CA&lt;/code&gt; refers to the locale extension Canada.</source>
          <target state="translated">유니 코드 식별자는 유니 언어 식별자 및 (선택적으로) 문자로 구성된다 로케일 &lt;code&gt;-&lt;/code&gt; 로케일 확장 하였다. (역사적인 이유로 문자 &lt;code&gt;&lt;a href=&quot;i18n&quot;&gt;_&lt;/a&gt;&lt;/code&gt; 의 대안으로 지원됩니다 &lt;code&gt;-&lt;/code&gt; .) 예를 들어, 로케일 ID에 &lt;code&gt;fr-CA&lt;/code&gt; &lt;code&gt;fr&lt;/code&gt; 프랑스의 언어 식별자를 의미하고, &lt;code&gt;CA&lt;/code&gt; 는 로케일 확장 캐나다를 말합니다.</target>
        </trans-unit>
        <trans-unit id="9619731a7e9d414367b09313d3267edcaa195536" translate="yes" xml:space="preserve">
          <source>A Universal web server responds to application page requests with static HTML rendered by the &lt;a href=&quot;universal#universal-engine&quot;&gt;Universal template engine&lt;/a&gt;. The server receives and responds to HTTP requests from clients (usually browsers), and serves static assets such as scripts, CSS, and images. It may respond to data requests, either directly or as a proxy to a separate data server.</source>
          <target state="translated">Universal 웹 서버는 &lt;a href=&quot;universal#universal-engine&quot;&gt;Universal 템플리트 엔진에&lt;/a&gt; 의해 렌더링 된 정적 HTML로 애플리케이션 페이지 요청에 응답합니다 . 서버는 클라이언트 (일반적으로 브라우저)의 HTTP 요청을 수신하고 응답하며 스크립트, CSS 및 이미지와 같은 정적 자산을 제공합니다. 직접 또는 별도의 데이터 서버에 대한 프록시로 데이터 요청에 응답 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71378c7a7d2263bf11559901a0f4449137f58c6b" translate="yes" xml:space="preserve">
          <source>A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix parameters associated with the segment.</source>
          <target state="translated">UrlSegment는 두 슬래시 사이의 URL의 일부입니다. 여기에는 세그먼트와 관련된 경로 및 매트릭스 매개 변수가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="9ed46c4fb7b79a723f886be252ac69b01f25f523" translate="yes" xml:space="preserve">
          <source>A base class for code shared between the &lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;forms/formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 지시문 사이에서 공유되는 코드의 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="ca117d436dde1d68583371441cb3950ab4847f85" translate="yes" xml:space="preserve">
          <source>A base class for code shared between the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 지시문 사이에서 공유되는 코드의 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="7182c0a975e83c1064ac742ba760051b64c40178" translate="yes" xml:space="preserve">
          <source>A base class for directives that contain multiple registered instances of &lt;code&gt;&lt;a href=&quot;forms/ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;. Only used by the forms module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; 의 여러 등록 인스턴스를 포함하는 지시문의 기본 클래스입니다 . 양식 모듈에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1e18bb4f3363c7c460512b62f5743a20a68eb8d9" translate="yes" xml:space="preserve">
          <source>A base class for directives that contain multiple registered instances of &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;. Only used by the forms module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; 의 여러 등록 인스턴스를 포함하는 지시문의 기본 클래스입니다 . 양식 모듈에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="096190a79977c14741e1938c2c256ebfb9a219c4" translate="yes" xml:space="preserve">
          <source>A base class that all &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">모든 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 기반 지시문이 확장 하는 기본 클래스입니다 . &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 개체를 DOM 요소에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="51ae843d848f33537e790740031d0121996326dd" translate="yes" xml:space="preserve">
          <source>A base class that all &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">모든 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 기반 지시문이 확장 하는 기본 클래스입니다 . &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 개체를 DOM 요소에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="072ce3207529e3a0eed654da379d2b96537447aa" translate="yes" xml:space="preserve">
          <source>A base class that all control &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">모든 제어 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 기반 지시문이 확장 하는 기본 클래스입니다 . &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 객체를 DOM 요소에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="d570abadc21d73601999397b7c63605397538b69" translate="yes" xml:space="preserve">
          <source>A base class that all control &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">모든 제어 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 기반 지시문이 확장 하는 기본 클래스입니다 . &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 객체를 DOM 요소에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="467148334df27df20e018470d39d8ab381750677" translate="yes" xml:space="preserve">
          <source>A basic understanding of the following concepts:</source>
          <target state="translated">다음 개념에 대한 기본 이해 :</target>
        </trans-unit>
        <trans-unit id="a5ab0003f292345413eb8a2b94b3fc4996269aea" translate="yes" xml:space="preserve">
          <source>A basic understanding of the following:</source>
          <target state="translated">다음에 대한 기본 이해 :</target>
        </trans-unit>
        <trans-unit id="a565a4e2917d8bbeaa570825dfd8d8cdd077b189" translate="yes" xml:space="preserve">
          <source>A basic understanding of the information in &lt;a href=&quot;service-worker-intro&quot;&gt;Introduction to Angular service workers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service-worker-intro&quot;&gt;Angular 서비스 워커 소개&lt;/a&gt; 의 정보에 대한 기본 이해 .</target>
        </trans-unit>
        <trans-unit id="a34826f1e38a9b1a10c639f0eb97e5092f011d36" translate="yes" xml:space="preserve">
          <source>A better solution is to create an artificial test component that demonstrates all ways to apply the directive.</source>
          <target state="translated">더 나은 솔루션은 지시문을 적용하는 모든 방법을 보여주는 인공 테스트 구성 요소를 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b3b95dc7d1bbb973732d884b6bf8498d3091aab3" translate="yes" xml:space="preserve">
          <source>A boolean-valued function over a value, possibly including context information regarding that value's position in an array.</source>
          <target state="translated">값에 대한 부울 값 함수로, 배열에서 해당 값의 위치에 관한 컨텍스트 정보를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f651a3110666c190aff69e1ee84ccbffa0efcba" translate="yes" xml:space="preserve">
          <source>A bootstrap component is automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">부트 스트랩 구성 요소가 &lt;code&gt;entryComponents&lt;/code&gt; 에 자동으로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="f0400004f9940352eb2ae482000bca5e618a3b6f" translate="yes" xml:space="preserve">
          <source>A bootstrapped component &lt;em&gt;is&lt;/em&gt; an &lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;entry component&lt;/a&gt; that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router.</source>
          <target state="translated">부트 스트랩 구성 요소 &lt;em&gt;는&lt;/em&gt; 부트 스트랩 프로세스 (응용 프로그램 실행) 동안 Angular가 DOM에로드 하는 &lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;입력 구성 요소&lt;/a&gt; 입니다. 다른 엔트리 구성 요소는 라우터와 같은 다른 방법으로 동적으로로드됩니다.</target>
        </trans-unit>
        <trans-unit id="9023b1da9696cafc362036418ba09a6af6a2deb3" translate="yes" xml:space="preserve">
          <source>A bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router.</source>
          <target state="translated">부트 스트랩 구성 요소는 부트 스트랩 프로세스 (응용 프로그램 실행) 동안 Angular가 DOM에로드하는 입력 구성 요소입니다. 다른 엔트리 구성 요소는 라우터와 같은 다른 방법으로 동적으로로드됩니다.</target>
        </trans-unit>
        <trans-unit id="a8adc65ce5e0b88cc440c6a6e5fc1619a8cd504b" translate="yes" xml:space="preserve">
          <source>A bootstrapped component is necessarily an entry component because bootstrapping is an imperative process, thus it needs to have an entry component.</source>
          <target state="translated">부트 스트랩은 필수 프로세스이므로 부트 스트랩 구성 요소는 반드시 입력 구성 요소입니다. 따라서 입력 구성 요소가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="2e1e0db9f76bce947aff0501f035cbc1621e10d2" translate="yes" xml:space="preserve">
          <source>A bootstrapped entry component</source>
          <target state="translated">부트 스트랩 된 엔트리 구성 요소</target>
        </trans-unit>
        <trans-unit id="96324ec4fdb9bd57e96f70085ba8ca376c27e961" translate="yes" xml:space="preserve">
          <source>A breakpoint on the pipe's request for data shows the following:</source>
          <target state="translated">파이프의 데이터 요청 중단 점은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="873cd968444320daef92249ea6c5114569cffc7b" translate="yes" xml:space="preserve">
          <source>A build technique that creates two bundles for an application. One smaller bundle is for modern browsers. A second, larger bundle allows the application to run correctly in older browsers (such as IE11) that do not support all modern browser APIs.</source>
          <target state="translated">애플리케이션에 대해 두 개의 번들을 생성하는 빌드 기술입니다. 하나의 작은 번들은 최신 브라우저 용입니다. 두 번째로 큰 번들을 사용하면 최신 브라우저 API를 모두 지원하지 않는 이전 브라우저 (예 : IE11)에서 애플리케이션을 올바르게 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed822ed7d2157779effe7d59d8a3822bc4ca3033" translate="yes" xml:space="preserve">
          <source>A buildable or runnable subset of a &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;, configured as an object in the &lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;workspace configuration file&lt;/a&gt;, and executed by an &lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt;&lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#project&quot;&gt;프로젝트&lt;/a&gt; 의 빌드 가능 또는 실행 가능 서브 세트 로, &lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;작업 공간 구성 파일&lt;/a&gt; 에서 오브젝트로 구성되고 &lt;a href=&quot;glossary#architect&quot;&gt;Architect &lt;/a&gt;&lt;a href=&quot;glossary#builder&quot;&gt;빌더가&lt;/a&gt; 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="e4eee78994792230b0c3d32e29860f69abdfad63" translate="yes" xml:space="preserve">
          <source>A builder must have a defined target that associates it with a specific input configuration and &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;.</source>
          <target state="translated">빌더에는 특정 입력 구성 및 &lt;a href=&quot;glossary#project&quot;&gt;프로젝트&lt;/a&gt; 와 연관시키는 정의 된 대상이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="252f868c89435de5215834180cc5d8c0801b4fc7" translate="yes" xml:space="preserve">
          <source>A builder resides in a &quot;project&quot; folder that is similar in structure to an Angular workspace, with global configuration files at the top level, and more specific configuration in a source folder with the code files that define the behavior. For example, your &lt;code&gt;myBuilder&lt;/code&gt; folder could contain the following files.</source>
          <target state="translated">빌더는 최상위 레벨에 글로벌 구성 파일이 있고 동작을 정의하는 코드 파일이있는 소스 폴더에보다 구체적인 구성이있는 Angular 작업 공간과 구조가 유사한 &quot;프로젝트&quot;폴더에 있습니다. 예를 들어, &lt;code&gt;myBuilder&lt;/code&gt; 폴더에는 다음 파일이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb3f356af777f070b18dd60f447c94b1885caa8e" translate="yes" xml:space="preserve">
          <source>A callback invoked when rendering has begun.</source>
          <target state="translated">렌더링이 시작될 때 호출 된 콜백</target>
        </trans-unit>
        <trans-unit id="621621c14914731ff9cc461e46f4734dab9a9e3a" translate="yes" xml:space="preserve">
          <source>A callback invoked when rendering has completed.</source>
          <target state="translated">렌더링이 완료되면 콜백이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="e30186c1d00b026b4228eadb9cb84965baed02c2" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after Angular has completed initialization of a component's view. It is invoked only once when the view is instantiated.</source>
          <target state="translated">Angular가 컴포넌트 뷰의 초기화를 완료 한 직후에 호출되는 콜백 메소드. 뷰가 인스턴스화 될 때 한 번만 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7fe4cd97d1eea7a11fac142b1908b02db4f41095" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after Angular has completed initialization of all of the directive's content. It is invoked only once when the directive is instantiated.</source>
          <target state="translated">Angular가 모든 지시어 내용의 초기화를 완료 한 직후에 호출되는 콜백 메소드. 지시문이 인스턴스화 될 때 한 번만 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1b7068e5aab5e739c2621bf44fb181a91e1b6ad2" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has checked data-bound properties if at least one has changed, and before the view and content children are checked.</source>
          <target state="translated">기본 변경 감지기가 변경되어 데이터 바인딩 된 속성을 확인한 직후와보기 및 내용 하위를 확인하기 전에 호출되는 콜백 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="ef37907408bda8f267bff550c619746d82491838" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has checked the directive's data-bound properties for the first time, and before any of the view or content children have been checked. It is invoked only once when the directive is instantiated.</source>
          <target state="translated">기본 변경 검출기가 지시문의 데이터 바인드 특성을 처음으로 확인한 직후 및보기 또는 컨텐츠 하위를 점검하기 전에 호출되는 콜백 메소드. 지시문이 인스턴스화 될 때 한 번만 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="17be15e9e9f2799fb0b7f9e7adb5b4d25c276f51" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has completed checking all of the directive's content.</source>
          <target state="translated">기본 변경 검출기가 지시문의 내용을 모두 확인한 직후에 호출되는 콜백 메소드.</target>
        </trans-unit>
        <trans-unit id="b3d49829f059326e4cc0c5d42cce6ef8ba22c75d" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has completed one change-check cycle for a component's view.</source>
          <target state="translated">기본 변경 탐지기가 구성 요소의보기에 대해 하나의 변경 확인주기를 완료 한 직후에 호출되는 콜백 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="c9272d31a5c8ffd0e82b22a4c70a377c3c3a39ea" translate="yes" xml:space="preserve">
          <source>A callback method that performs change-detection, invoked after the default change-detector runs. See &lt;code&gt;&lt;a href=&quot;keyvaluediffers&quot;&gt;KeyValueDiffers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;iterablediffers&quot;&gt;IterableDiffers&lt;/a&gt;&lt;/code&gt; for implementing custom change checking for collections.</source>
          <target state="translated">기본 변경 감지기가 실행 된 후 호출되는 변경 감지를 수행하는 콜백 메소드입니다. 컬렉션에 대한 사용자 지정 변경 검사를 구현하려면 &lt;code&gt;&lt;a href=&quot;keyvaluediffers&quot;&gt;KeyValueDiffers&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;iterablediffers&quot;&gt;IterableDiffers&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d104cace8ea584693965d95cc9257a3a34349247" translate="yes" xml:space="preserve">
          <source>A callback method that performs custom clean-up, invoked immediately after a directive, pipe, or service instance is destroyed.</source>
          <target state="translated">지시문, 파이프 또는 서비스 인스턴스가 파괴 된 직후에 호출되는 사용자 정의 정리를 수행하는 콜백 메소드.</target>
        </trans-unit>
        <trans-unit id="9d019ac3f68827f438b58c53accb84a0a9b5454e" translate="yes" xml:space="preserve">
          <source>A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.</source>
          <target state="translated">사용자 지정 정리를 수행하는 콜백 메서드로, 지시문, 파이프 또는 서비스 인스턴스가 삭제되기 직전에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="56a268cd66316ce2f0d1944547dc2ba1885278a7" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name.</source>
          <target state="translated">다른 HTML 요소, 속성, 속성 및 구성 요소의 동작을 듣고 수정할 수 있는 &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 범주입니다 . 이들은 일반적으로 HTML 속성으로 표시되므로 이름입니다.</target>
        </trans-unit>
        <trans-unit id="8f2bd0d4f0242fd6d93c7106c480965ba0a756a0" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that is responsible for shaping HTML layout by modifying the DOM&amp;amp;mdashthat is, adding, removing, or manipulating elements and their children.</source>
          <target state="translated">DOM &amp;amp; mdash 즉, 요소와 해당 하위 요소를 추가, 제거 또는 조작하여 HTML 레이아웃을 형성하는 &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 범주입니다 .</target>
        </trans-unit>
        <trans-unit id="e76eb415fce0aa3049c66f9205a3ceb92e3eb58d" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that is responsible for shaping HTML layout by modifying the DOM&amp;mdash;that is, adding, removing, or manipulating elements and their children.</source>
          <target state="translated">DOM을 수정하여 HTML 레이아웃을 형성하는, 즉 요소와 그 하위 요소를 추가, 제거 또는 조작하는 &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 범주입니다 .</target>
        </trans-unit>
        <trans-unit id="343aa9337e55f69912d6d719d5e5805b50eca679" translate="yes" xml:space="preserve">
          <source>A check that runs when form values change and reports whether the given values are correct and complete, according to the defined constraints. Reactive forms apply &lt;a href=&quot;form-validation#adding-to-reactive-forms&quot;&gt;validator functions&lt;/a&gt;. Template-driven forms use &lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;validator directives&lt;/a&gt;.</source>
          <target state="translated">정의 된 제한 조건에 따라 양식 값이 변경 될 때 실행되고 지정된 값이 정확하고 완전한지 여부를보고하는 검사입니다. 반응성 양식은 &lt;a href=&quot;form-validation#adding-to-reactive-forms&quot;&gt;유효성 검사기 기능을&lt;/a&gt; 적용 합니다 . 템플릿 기반 양식은 &lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;유효성 검사기 지시문을&lt;/a&gt; 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="2d1c2e7542eff3bf00dff1a1de49e08d938a227b" translate="yes" xml:space="preserve">
          <source>A checkbox on the &lt;code&gt;PackageSearchComponent&lt;/code&gt; toggles a &lt;code&gt;withRefresh&lt;/code&gt; flag, which is one of the arguments to &lt;code&gt;PackageSearchService.search()&lt;/code&gt;. That &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method creates the custom &lt;code&gt;x-refresh&lt;/code&gt; header and adds it to the request before calling &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PackageSearchComponent&lt;/code&gt; 의 체크 박스 는 &lt;code&gt;withRefresh&lt;/code&gt; 플래그를 토글하며 , 이는 &lt;code&gt;PackageSearchService.search()&lt;/code&gt; 의 인수 중 하나입니다 . 그 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; 메소드는 사용자 정의 생성 &lt;code&gt;x-refresh&lt;/code&gt; 헤더를하고 호출하기 전에 요청에 추가 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2238becdf367d5fbefe935937a36fa23a96446e7" translate="yes" xml:space="preserve">
          <source>A checkbox on the &lt;code&gt;PackageSearchComponent&lt;/code&gt; toggles a &lt;code&gt;withRefresh&lt;/code&gt; flag, which is one of the arguments to &lt;code&gt;PackageSearchService.search()&lt;/code&gt;. That &lt;code&gt;search()&lt;/code&gt; method creates the custom &lt;code&gt;x-refresh&lt;/code&gt; header and adds it to the request before calling &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PackageSearchComponent&lt;/code&gt; 의 확인란은 &lt;code&gt;PackageSearchService.search()&lt;/code&gt; 에 대한 인수 중 하나 인 &lt;code&gt;withRefresh&lt;/code&gt; 플래그를 토글합니다 . 이 &lt;code&gt;search()&lt;/code&gt; 메서드는 사용자 지정 &lt;code&gt;x-refresh&lt;/code&gt; 헤더를 만들고 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 호출하기 전에 요청에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="a9042a7212d60671bc72001876e70a6d3a120216" translate="yes" xml:space="preserve">
          <source>A child route is like any other route, in that it needs both a &lt;code&gt;path&lt;/code&gt; and a &lt;code&gt;component&lt;/code&gt;. The one difference is that you place child routes in a &lt;code&gt;children&lt;/code&gt; array within the parent route.</source>
          <target state="translated">하위 경로는 &lt;code&gt;path&lt;/code&gt; 와 &lt;code&gt;component&lt;/code&gt; 가 모두 필요하다는 점에서 다른 경로 와 같습니다 . 한 가지 차이점은 상위 경로 내의 &lt;code&gt;children&lt;/code&gt; 배열 에 하위 경로를 배치한다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="1ea2dba458600bddeca5f6a66246af12aba09d49" translate="yes" xml:space="preserve">
          <source>A chrome browser also opens and displays the test output in the &quot;Jasmine HTML Reporter&quot; like this.</source>
          <target state="translated">크롬 브라우저도 열리고 이와 같이 &quot;Jasmine HTML Reporter&quot;에 테스트 결과가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9be78a60e1ff57a5896ceaf2ec2f63d056169af5" translate="yes" xml:space="preserve">
          <source>A class definition preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;, which declares and serves as a manifest for a block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;데코레이터&lt;/a&gt; 앞에 클래스 정의가 있습니다.이 클래스 는 응용 프로그램 도메인, 워크 플로 또는 밀접하게 관련된 기능 집합 전용 코드 블록의 선언으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a192bac5ac356be2f3c56d06d6b531d551809cd4" translate="yes" xml:space="preserve">
          <source>A class interface should define &lt;em&gt;only&lt;/em&gt; the members that its consumers are allowed to call. Such a narrowing interface helps decouple the concrete class from its consumers.</source>
          <target state="translated">클래스 인터페이스는 소비자가 호출 할 &lt;em&gt;수&lt;/em&gt; 있는 멤버 &lt;em&gt;만&lt;/em&gt; 정의해야합니다 . 이러한 좁은 인터페이스는 콘크리트 클래스를 소비자와 분리하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="c5a1d26cf05b83059365f38e429b8b641ab34688" translate="yes" xml:space="preserve">
          <source>A class that can modify the structure of the DOM or modify attributes in the DOM and component data model. A directive class definition is immediately preceded by a &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that supplies metadata.</source>
          <target state="translated">DOM 구조를 수정하거나 DOM 및 컴포넌트 데이터 모델에서 속성을 수정할 수있는 클래스입니다. 지시어 클래스 정의 바로 앞에는 메타 데이터를 제공 하는 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;데코레이터&lt;/a&gt; 가 옵니다 .</target>
        </trans-unit>
        <trans-unit id="da749411f2fbf9765df953ad7c145d5c80634633" translate="yes" xml:space="preserve">
          <source>A class that implements the &lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt; interface (or a function with the same signature as the &lt;a href=&quot;../api/router/resolve#resolve&quot;&gt;resolve() method&lt;/a&gt;) that you use to produce or retrieve data that is needed before navigation to a requested route can be completed.</source>
          <target state="translated">요청 된 경로로의 탐색을 완료하기 전에 필요한 데이터를 생성하거나 검색하는 데 사용 하는 &lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt; 인터페이스 (또는 &lt;a href=&quot;../api/router/resolve#resolve&quot;&gt;resolve () 메서드&lt;/a&gt; 와 동일한 서명이있는 함수) 를 구현하는 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="c3f170876358e49d15b030811c0281e79ed77fa5" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">&lt;a href=&quot;app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt; 함수 실행 상태를 반영하는 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="5c93e2c1668e7ec5b3f463c413d9da40e845709b" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;a href=&quot;app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt; 실행 상태를 반영하는 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="2586244e33994880aee60d64079107cf48f5c7e6" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;core/app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">&lt;a href=&quot;core/app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt; 함수 실행 상태를 반영하는 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="b03253d94c1c737d17ecfa0fa8c0a0fc7e00e3f9" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;core/app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;a href=&quot;core/app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt; 실행 상태를 반영하는 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="3dce19c2b15b60014a24e007692a61c4cec1cbb0" translate="yes" xml:space="preserve">
          <source>A class that's already declared in another NgModule</source>
          <target state="translated">다른 NgModule에서 이미 선언 된 클래스</target>
        </trans-unit>
        <trans-unit id="15e8cb7a8d71df2ff5451890d3605b823ff71848" translate="yes" xml:space="preserve">
          <source>A class that's already declared in another module, whether an app module, @NgModule, or third-party module.</source>
          <target state="translated">앱 모듈, @NgModule 또는 타사 모듈 등 다른 모듈에서 이미 선언 된 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="52cb7c70c205caf15acdbf3dad279a4fc5ab3692" translate="yes" xml:space="preserve">
          <source>A class type that you can add to the &lt;code&gt;declarations&lt;/code&gt; list of an &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;. You can declare &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt;, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#pipe&quot;&gt;pipes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt; 의 &lt;code&gt;declarations&lt;/code&gt; 목록에 추가 할 수있는 클래스 유형입니다 . &lt;a href=&quot;glossary#component&quot;&gt;구성 요소&lt;/a&gt; , &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 및 &lt;a href=&quot;glossary#pipe&quot;&gt;파이프를&lt;/a&gt; 선언 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f05301aad6629d6cf06da9c65f1a123c52b3e017" translate="yes" xml:space="preserve">
          <source>A class which is preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;{}&lt;/code&gt; decorator and which defines a function that transforms input values to output values for display in a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. Angular defines various pipes, and you can define new pipes.</source>
          <target state="translated">에 의해 선행하는 클래스 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;{}&lt;/code&gt; 장식하고있는 함수를 정의하는 디스플레이에 대한 출력 값으로 변환 된 입력 값이 &lt;a href=&quot;glossary#view&quot;&gt;도면&lt;/a&gt; . 각도는 다양한 파이프를 정의하며 새 파이프를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87e85a96b41d60c13372c16732fa1704cdf3acdf" translate="yes" xml:space="preserve">
          <source>A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that associates it with a companion &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;. Together, the component and template define a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. A component is a special type of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">와 클래스 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;장식&lt;/a&gt; 이 동반자와 동료를 &lt;a href=&quot;glossary#template&quot;&gt;템플릿&lt;/a&gt; . 컴포넌트와 템플리트가 함께 &lt;a href=&quot;glossary#view&quot;&gt;보기를&lt;/a&gt; 정의합니다 . 구성 요소는 특수한 유형의 &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 입니다. &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 장식은 확장 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 템플릿 중심의 기능과 장식을.</target>
        </trans-unit>
        <trans-unit id="49388823188334dd547827fe77c4ca8ca1f425e1" translate="yes" xml:space="preserve">
          <source>A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that associates it with a companion &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;. Together, the component class and template define a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. A component is a special type of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">와 클래스 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;장식&lt;/a&gt; 이 동반자와 동료를 &lt;a href=&quot;glossary#template&quot;&gt;템플릿&lt;/a&gt; . 구성 요소 클래스와 템플릿은 함께 &lt;a href=&quot;glossary#view&quot;&gt;뷰를&lt;/a&gt; 정의합니다 . 구성 요소는 특수한 유형의 &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 입니다. &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 장식은 확장 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 템플릿 중심의 기능과 장식을.</target>
        </trans-unit>
        <trans-unit id="937214eb5969e76a0181ee0c519da4e56333f19c" translate="yes" xml:space="preserve">
          <source>A codec for encoding and decoding URL parts.</source>
          <target state="translated">URL 부분을 인코딩 및 디코딩하기위한 코덱입니다.</target>
        </trans-unit>
        <trans-unit id="7d302abe77a94aa1032491a8e0f377e95a4f168a" translate="yes" xml:space="preserve">
          <source>A codec for encoding and decoding parameters in URLs.</source>
          <target state="translated">URL에서 매개 변수를 인코딩 및 디코딩하기위한 코덱입니다.</target>
        </trans-unit>
        <trans-unit id="ecea492f54194b72e7632959fcd3e275ec6d043f" translate="yes" xml:space="preserve">
          <source>A collection of Angular &lt;a href=&quot;glossary#project&quot;&gt;projects&lt;/a&gt; (that is, applications and libraries) powered by the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; that are typically co-located in a single source-control repository (such as &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;).</source>
          <target state="translated">일반적으로 단일 소스 제어 저장소 (예 : &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; )에 공동 배치 되는 &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI로&lt;/a&gt; 구동되는 Angular &lt;a href=&quot;glossary#project&quot;&gt;프로젝트&lt;/a&gt; (즉, 애플리케이션 및 라이브러리) 의 모음입니다 .</target>
        </trans-unit>
        <trans-unit id="e79ba2e8ac6b5b04c6c03c7ee3e2785eb9b7e5a0" translate="yes" xml:space="preserve">
          <source>A collection of child controls. The key for each child is the name under which it is registered.</source>
          <target state="translated">자식 컨트롤 모음입니다. 각 어린이의 키는 등록 된 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e3c018291c1c8e9ad7721160cc26f0757854e025" translate="yes" xml:space="preserve">
          <source>A collection of matrix and query URL parameters.</source>
          <target state="translated">행렬 및 쿼리 URL 매개 변수의 모음입니다.</target>
        </trans-unit>
        <trans-unit id="02b47ee82f7b322d5994b10809aa0af420e20886" translate="yes" xml:space="preserve">
          <source>A collection of schematics to use in generating the initial app.</source>
          <target state="translated">초기 앱 생성에 사용할 회로도 모음입니다.</target>
        </trans-unit>
        <trans-unit id="35817c17df34196664d458d6da1bf6de8adafe3c" translate="yes" xml:space="preserve">
          <source>A collection of schematics to use in generating the initial application.</source>
          <target state="translated">초기 응용 프로그램을 생성하는 데 사용할 회로도 모음입니다.</target>
        </trans-unit>
        <trans-unit id="49de467612a944b52b3ee2139bdfbfdf3eb1f6bd" translate="yes" xml:space="preserve">
          <source>A common UI pattern is to show a spinner while the async validation is being performed. The following example presents how to achieve this with template-driven forms:</source>
          <target state="translated">일반적인 UI 패턴은 비동기 유효성 검사가 수행되는 동안 스피너를 표시하는 것입니다. 다음 예제는 템플리트 기반 양식으로이를 달성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8f2cc38548e3292bbe0d9ba879bd191b4f73c3e1" translate="yes" xml:space="preserve">
          <source>A common UI pattern is to show a spinner while the async validation is being performed. The following example shows how to achieve this in a template-driven form.</source>
          <target state="translated">일반적인 UI 패턴은 비동기 유효성 검사가 수행되는 동안 스피너를 표시하는 것입니다. 다음 예제는 템플릿 기반 양식에서이를 달성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ce73dbb5d1ae47fbdffe9c0fd617787f054bac11" translate="yes" xml:space="preserve">
          <source>A common pattern in Angular is sharing data between a parent component and one or more child components. You can implement this pattern by using the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; directives.</source>
          <target state="translated">Angular의 일반적인 패턴은 부모 구성 요소와 하나 이상의 자식 구성 요소간에 데이터를 공유하는 것입니다. &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 지시문 을 사용하여이 패턴을 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="73601be2b237a028eed4e60c358bde8f29e0c28d" translate="yes" xml:space="preserve">
          <source>A common point of confusion is between the attribute, &lt;code&gt;colspan&lt;/code&gt;, and the property, &lt;code&gt;colSpan&lt;/code&gt;. Notice that these two names differ by only a single letter.</source>
          <target state="translated">일반적인 혼동 지점은 &lt;code&gt;colspan&lt;/code&gt; 속성과 &lt;code&gt;colSpan&lt;/code&gt; 속성 사이에 있습니다. 이 두 이름은 한 글자 만 다릅니다.</target>
        </trans-unit>
        <trans-unit id="69456c6f954b99f121b55678f6c07297aff78691" translate="yes" xml:space="preserve">
          <source>A common problem of web applications is their slow initial load time. A way to improve it is to apply more granular code-splitting on a component level. To encourage this practice, we&amp;rsquo;ll be working on more ergonomic code-splitting APIs.</source>
          <target state="translated">웹 애플리케이션의 일반적인 문제는 느린 초기로드 시간입니다. 이를 개선하는 방법은 구성 요소 수준에서보다 세분화 된 코드 분할을 적용하는 것입니다. 이 관행을 장려하기 위해 우리는 더 인체 공학적인 코드 분할 API를 개발할 것입니다.</target>
        </trans-unit>
        <trans-unit id="885e7fc7945af15a44a7433f76f715e8914300bc" translate="yes" xml:space="preserve">
          <source>A common way to handle events is to pass the event object, &lt;code&gt;$event&lt;/code&gt;, to the method handling the event. The &lt;code&gt;$event&lt;/code&gt; object often contains information the method needs, such as a user's name or an image URL.</source>
          <target state="translated">이벤트를 처리하는 일반적인 방법은 이벤트 개체 &lt;code&gt;$event&lt;/code&gt; 를 처리하는 메서드에 전달하는 것입니다. &lt;code&gt;$event&lt;/code&gt; 객체는 종종 정보를 이러한 사용자의 이름 또는 이미지의 URL과 같은 방법의 요구 사항을 포함하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="99b05c916350f6878980197b92e815e9e04cfceb" translate="yes" xml:space="preserve">
          <source>A component and its template together define a &lt;em&gt;view&lt;/em&gt;. A component can contain a &lt;em&gt;view hierarchy&lt;/em&gt;, which allows you to define arbitrarily complex areas of the screen that can be created, modified, and destroyed as a unit. A view hierarchy can mix views defined in components that belong to different NgModules. This is often the case, especially for UI libraries.</source>
          <target state="translated">구성 요소와 해당 템플릿은 함께 &lt;em&gt;보기를&lt;/em&gt; 정의합니다 . 구성 요소에는 &lt;em&gt;보기 계층 구조&lt;/em&gt; 가 포함될 수 있으며 ,이를 통해 단위로 작성, 수정 및 파괴 할 수있는 화면의 임의로 복잡한 영역을 정의 할 수 있습니다. 뷰 계층은 다른 NgModules에 속하는 컴포넌트에 정의 된 뷰를 혼합 할 수 있습니다. UI 라이브러리의 경우에 종종 그렇습니다.</target>
        </trans-unit>
        <trans-unit id="8beed4fbb0126f7f0007052e50e1d5d70b721129" translate="yes" xml:space="preserve">
          <source>A component can also be bootstrapped imperatively in the module's &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.</source>
          <target state="translated">모듈의 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 메소드 에서 구성 요소를 반드시 부트 스트랩 할 수 있습니다 . &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 이 항목 구성 요소이며이 구성 요소를 사용하여 응용 프로그램을 부트 스트랩 코드를 생성해야한다는 속성은 컴파일러를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="349d889988965929270cf02c44fe4300103b85b1" translate="yes" xml:space="preserve">
          <source>A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an &lt;em&gt;injectable service class&lt;/em&gt;, you make those tasks available to any component. You can also make your app more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</source>
          <target state="translated">구성 요소는 서버에서 데이터 가져 오기, 사용자 입력 확인 또는 콘솔에 직접 로깅과 같은 특정 작업을 서비스에 위임 할 수 있습니다. &lt;em&gt;인젝터 블 서비스 클래스&lt;/em&gt; 에서 이러한 처리 태스크를 정의 하면 해당 태스크를 모든 구성 요소에서 사용할 수 있습니다. 또한 상황에 따라 적절하게 동일한 종류의 서비스를 제공하는 서로 다른 공급자를 주입하여 앱을보다 융통성있게 만들 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b089964fae5995b808c695e4e6ccb3aa1ad7e195" translate="yes" xml:space="preserve">
          <source>A component class can provide services in two ways:</source>
          <target state="translated">컴포넌트 클래스는 두 가지 방법으로 서비스를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e0698d00f7c06c14c5adbf78185465c6c2d62a2" translate="yes" xml:space="preserve">
          <source>A component consists of three things:</source>
          <target state="translated">컴포넌트는 다음 세 가지로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="d3deadf277697045847584c362a7d410307968ce" translate="yes" xml:space="preserve">
          <source>A component could be exported for inclusion in an external component's template as well as dynamically loaded in a pop-up dialog.</source>
          <target state="translated">팝업 대화 상자에 동적으로로드 될뿐만 아니라 외부 구성 요소의 템플릿에 포함되도록 구성 요소를 내보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4376fb2839e7c64ec0202336bf07980d7bed69f9" translate="yes" xml:space="preserve">
          <source>A component could be imported from another app module (so you can't declare it) and re-exported by this module.</source>
          <target state="translated">컴포넌트를 다른 앱 모듈에서 가져 와서 선언 할 수 없으므로이 모듈에서 다시 내보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8224b2c88f45e2e0d1d4bc43fbec26ccaddb28a" translate="yes" xml:space="preserve">
          <source>A component definition that implements the abstract class.</source>
          <target state="translated">추상 클래스를 구현하는 구성 요소 정의입니다.</target>
        </trans-unit>
        <trans-unit id="3f0018d9ac3de8a0f037aa98debd4be0b91710f9" translate="yes" xml:space="preserve">
          <source>A component factory creates a pure, 100% JavaScript representation of the component that incorporates everything described in its &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata: the HTML, the binding instructions, the attached styles.</source>
          <target state="translated">컴포넌트 팩토리는 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 메타 데이터 (HTML, 바인딩 명령어, 첨부 스타일)에 설명 된 모든 것을 통합하는 컴포넌트의 순수 100 % JavaScript 표현을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="7ca9baec5343b3b87182e2a1a6324223b5db317e" translate="yes" xml:space="preserve">
          <source>A component file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.ts&lt;/code&gt;</source>
          <target state="translated">구성 요소 파일, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.ts&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb8b1bfad611823c2a3c34eda791bc349a459653" translate="yes" xml:space="preserve">
          <source>A component has a lifecycle managed by Angular.</source>
          <target state="translated">구성 요소에는 Angular에서 관리하는 수명주기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="280add6e8ec324a17cb196d50312c8e21c6ae6eb" translate="yes" xml:space="preserve">
          <source>A component instance has a lifecycle that starts when Angular instantiates the component class and renders the component view along with its child views. The lifecycle continues with change detection, as Angular checks to see when data-bound properties change, and updates both the view and the component instance as needed. The lifecycle ends when Angular destroys the component instance and removes its rendered template from the DOM. Directives have a similar lifecycle, as Angular creates, updates, and destroys instances in the course of execution.</source>
          <target state="translated">구성 요소 인스턴스에는 Angular가 구성 요소 클래스를 인스턴스화하고 하위 뷰와 함께 구성 요소 뷰를 렌더링 할 때 시작되는 수명주기가 있습니다. Angular는 데이터 바인딩 된 속성이 언제 변경되는지 확인하고 필요에 따라 뷰와 구성 요소 인스턴스를 모두 업데이트하므로 수명주기는 변경 감지와 함께 계속됩니다. Angular가 구성 요소 인스턴스를 파괴하고 렌더링 된 템플릿을 DOM에서 제거하면 수명주기가 종료됩니다. 지시문은 Angular가 실행 과정에서 인스턴스를 생성, 업데이트 및 삭제하므로 수명주기가 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="dc5e2a63b05a82806539717c333ee5cad057e231" translate="yes" xml:space="preserve">
          <source>A component is a special type of directive, which means that just as &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; has a &lt;code&gt;providers&lt;/code&gt; property, &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; does too. This means that directives as well as components can configure providers, using the &lt;code&gt;providers&lt;/code&gt; property. When you configure a provider for a component or directive using the &lt;code&gt;providers&lt;/code&gt; property, that provider belongs to the &lt;code&gt;ElementInjector&lt;/code&gt; of that component or directive. Components and directives on the same element share an injector.</source>
          <target state="translated">구성 요소는 특수한 유형의 지시문입니다. 즉, &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 에 &lt;code&gt;providers&lt;/code&gt; 속성 이있는 것처럼 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 도 마찬가지입니다. 이는 구성 요소뿐만 아니라 지시문도 &lt;code&gt;providers&lt;/code&gt; 특성을 사용하여 제공자 를 구성 할 수 있음을 의미합니다 . &lt;code&gt;providers&lt;/code&gt; 특성을 사용하여 구성 요소 또는 지시문에 대한 제공자를 구성 할 때 해당 제공자는 해당 구성 요소 또는 지시문 의 &lt;code&gt;ElementInjector&lt;/code&gt; 에 속합니다 . 동일한 요소의 구성 요소 및 지시문은 인젝터를 공유합니다.</target>
        </trans-unit>
        <trans-unit id="eb35cf391db16a6090f219d3a04cb176787fe7d9" translate="yes" xml:space="preserve">
          <source>A component is technically a directive. However, components are so distinctive and central to Angular applications that Angular defines the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator, which extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">구성 요소는 기술적으로 지침입니다. 그러나 구성 요소는 각도를 정의하는 각도 애플리케이션에 매우 독특하고 중심적인 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 확장 장식, &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 템플릿 중심의 기능과 장식을.</target>
        </trans-unit>
        <trans-unit id="add1d0740c9dbeaff24d9a4e670b5061d080dadb" translate="yes" xml:space="preserve">
          <source>A component loaded &lt;em&gt;declaratively&lt;/em&gt; via its selector is &lt;em&gt;not&lt;/em&gt; an entry component.</source>
          <target state="translated">선택기를 통해 &lt;em&gt;선언적으로&lt;/em&gt; 로드 된 구성 요소 는 입력 구성 요소 가 &lt;em&gt;아닙니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="39781f405ce3d449d20cd226f0eed9481dbe5f83" translate="yes" xml:space="preserve">
          <source>A component must belong to an NgModule in order for it to be available to another component or application. To make it a member of an NgModule, list it in the &lt;code&gt;declarations&lt;/code&gt; field of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">다른 구성 요소 또는 응용 프로그램에서 사용 가능하도록하려면 구성 요소가 NgModule에 속해야합니다. 이를 NgModule의 멤버로 만들려면 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 메타 데이터 의 &lt;code&gt;declarations&lt;/code&gt; 필드에 이를 나열하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e42b0c392b91ddd75a931ad25526b427360d793" translate="yes" xml:space="preserve">
          <source>A component template can &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;reference&lt;/a&gt; another component, directive, or pipe when the reference is declared in this module or if the imported module has exported it. For example, a component can use the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt; directives only if the module has imported the Angular &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; (perhaps indirectly by importing &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">컴포넌트 템플릿 수 &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;참조&lt;/a&gt; 기준이 모듈에서 선언 될 때 또는 반입 된 모듈을 보낸 경우 다른 성분 지시자 또는 파이프. 예를 들어, 모듈이 Angular &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 을 가져온 경우에만 (아마도 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 가져 오기를 통해 간접적으로 ) 구성 요소는 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;NgFor&lt;/code&gt; 지시문을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="64cd250b9979025915cabb6d33b78c1f69b9d52e" translate="yes" xml:space="preserve">
          <source>A component that could serve as a parent &lt;em&gt;should&lt;/em&gt; implement the class interface as the &lt;code&gt;AliceComponent&lt;/code&gt; does.</source>
          <target state="translated">부모 역할을 할 수있는 컴포넌트 는 &lt;code&gt;AliceComponent&lt;/code&gt; 처럼 클래스 인터페이스를 구현 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="941975be9e80c257e732d44a8ebcc5fc939e3e3a" translate="yes" xml:space="preserve">
          <source>A component that injects a lightweight injection token might need to invoke a method in the injected class. Because the token is now an abstract class, and the injectable component implements that class, you must also declare an abstract method in the abstract lightweight injection token class. The implementation of the method (with all of its code overhead) resides in the injectable component that can be tree-shaken. This allows the parent to communicate with the child (if it is present) in a type-safe manner.</source>
          <target state="translated">경량 주입 토큰을 주입하는 구성 요소는 주입 된 클래스에서 메서드를 호출해야 할 수 있습니다. 토큰은 이제 추상 클래스이고 주입 가능한 구성 요소는 해당 클래스를 구현하므로 추상 경량 주입 토큰 클래스에서도 추상 메서드를 선언해야합니다. 메서드의 구현 (모든 코드 오버 헤드 포함)은 트리를 흔들 수있는 주입 가능한 구성 요소에 있습니다. 이를 통해 부모는 형식이 안전한 방식으로 자식 (있는 경우)과 통신 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="499d23697c7f20e6ec22c3119de0c4a05d9a58e5" translate="yes" xml:space="preserve">
          <source>A component with inputs and outputs typically appears inside the view template of a host component. The host uses a property binding to set the input property and an event binding to listen to events raised by the output property.</source>
          <target state="translated">입력 및 출력이있는 구성 요소는 일반적으로 호스트 구성 요소의 뷰 템플릿 안에 나타납니다. 호스트는 속성 바인딩을 사용하여 입력 속성을 설정하고 이벤트 바인딩은 출력 속성에 의해 발생한 이벤트를 수신합니다.</target>
        </trans-unit>
        <trans-unit id="d3e1336ad22fdd6630c5534d49b4b6f33d95e613" translate="yes" xml:space="preserve">
          <source>A component you specify in a route definition.</source>
          <target state="translated">경로 정의에서 지정한 구성 요소.</target>
        </trans-unit>
        <trans-unit id="1921733ec87213ae324063a594427212b01dfd9e" translate="yes" xml:space="preserve">
          <source>A component, such as &lt;code&gt;ConfigComponent&lt;/code&gt;, injects the &lt;code&gt;ConfigService&lt;/code&gt; and calls the &lt;code&gt;getConfig&lt;/code&gt; service method.</source>
          <target state="translated">&lt;code&gt;ConfigComponent&lt;/code&gt; 와 같은 구성 요소 는 &lt;code&gt;ConfigService&lt;/code&gt; 를 주입 하고 &lt;code&gt;getConfig&lt;/code&gt; 서비스 메소드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="ddc9abdd56dcae660b1b5fdd43e549b91308f6a9" translate="yes" xml:space="preserve">
          <source>A component, unlike all other parts of an Angular application, combines an HTML template and a TypeScript class. The component truly is the template and the class &lt;em&gt;working together&lt;/em&gt;. To adequately test a component, you should test that they work together as intended.</source>
          <target state="translated">Angular 응용 프로그램의 다른 모든 부분과 달리 구성 요소는 HTML 템플릿과 TypeScript 클래스를 결합합니다. 구성 요소는 진정으로 템플릿과 &lt;em&gt;함께 작동&lt;/em&gt; 하는 클래스 입니다. 구성 요소를 적절히 테스트하려면 구성 요소가 의도 한대로 함께 작동하는지 테스트해야합니다.</target>
        </trans-unit>
        <trans-unit id="98e7a6058cbd18c8d57a0d87274cdac45aaecd6d" translate="yes" xml:space="preserve">
          <source>A configuration object that defines a single route. A set of routes are collected in a &lt;code&gt;&lt;a href=&quot;router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array to define a &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; configuration. The router attempts to match segments of a given URL against each route, using the configuration options defined in this object.</source>
          <target state="translated">단일 경로를 정의하는 구성 개체입니다. &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 구성 을 정의하기 위해 &lt;code&gt;&lt;a href=&quot;router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 집합이 경로 배열로 수집됩니다 . 라우터는이 객체에 정의 된 구성 옵션을 사용하여 각 URL에 대해 주어진 URL의 세그먼트를 일치 시키려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="e647343b7b8f98c675920da38a07c8f9f188b5ed" translate="yes" xml:space="preserve">
          <source>A configuration object that defines a single route. A set of routes are collected in a &lt;code&gt;&lt;a href=&quot;routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array to define a &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; configuration. The router attempts to match segments of a given URL against each route, using the configuration options defined in this object.</source>
          <target state="translated">단일 경로를 정의하는 구성 개체입니다. &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 구성 을 정의하기 위해 &lt;code&gt;&lt;a href=&quot;routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 집합이 경로 배열로 수집됩니다 . 라우터는이 객체에 정의 된 구성 옵션을 사용하여 각 URL에 대해 주어진 URL의 세그먼트를 일치 시키려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="4520e60162947e0d4f8bc410870de69a92317566" translate="yes" xml:space="preserve">
          <source>A configuration that initializes an NgElementConstructor with the dependencies and strategy it needs to transform a component into a custom element class.</source>
          <target state="translated">구성 요소를 사용자 지정 요소 클래스로 변환하는 데 필요한 종속성 및 전략으로 NgElementConstructor를 초기화하는 구성입니다.</target>
        </trans-unit>
        <trans-unit id="5ee57bfc72b82baa4a0dd6579c0dbcb1d2fa549f" translate="yes" xml:space="preserve">
          <source>A configuration that provides initialization information to the created class.</source>
          <target state="translated">작성된 클래스에 초기화 정보를 제공하는 구성입니다.</target>
        </trans-unit>
        <trans-unit id="4b7a75de7a7dd9fd3c6c2e1cb2bcd7c662897553" translate="yes" xml:space="preserve">
          <source>A context object to attach to the &lt;a href=&quot;../core/embeddedviewref&quot;&gt;&lt;code&gt;EmbeddedViewRef&lt;/code&gt;&lt;/a&gt;. This should be an object, the object's keys will be available for binding by the local template &lt;code&gt;let&lt;/code&gt; declarations. Using the key &lt;code&gt;$implicit&lt;/code&gt; in the context object will set its value as default.</source>
          <target state="translated">&lt;a href=&quot;../core/embeddedviewref&quot;&gt; &lt;code&gt;EmbeddedViewRef&lt;/code&gt; &lt;/a&gt; 에 첨부 할 컨텍스트 객체 입니다. 이것은 객체 여야하며, 로컬 템플릿 &lt;code&gt;let&lt;/code&gt; 선언에 의해 객체의 키를 바인딩 할 수 있습니다 . 컨텍스트 객체에서 &lt;code&gt;$implicit&lt;/code&gt; 키를 사용하면 해당 값이 기본값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8d2d4d92f8439cb0040f95f6d3290be29ab4aa19" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;dirty&lt;/code&gt; if the user has changed the value in the UI.</source>
          <target state="translated">사용자가 UI에서 값을 변경 한 경우 컨트롤이 &lt;code&gt;dirty&lt;/code&gt; 습니다.</target>
        </trans-unit>
        <trans-unit id="9327f6896bdca186045601aa3c45f1660eb789f4" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;disabled&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;DISABLED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 가 &lt;code&gt;DISABLED&lt;/code&gt; 이면 컨트롤이 &lt;code&gt;disabled&lt;/code&gt; 됩니다 .</target>
        </trans-unit>
        <trans-unit id="82fb23ab120d8e1d1e08017df8326c89e3cb2d80" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;enabled&lt;/code&gt; as long as its &lt;code&gt;status&lt;/code&gt; is not &lt;code&gt;DISABLED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 가 &lt;code&gt;DISABLED&lt;/code&gt; 되어 있지 않으면 컨트롤이 &lt;code&gt;enabled&lt;/code&gt; 됩니다 .</target>
        </trans-unit>
        <trans-unit id="f2ffd744d5627ca35c2757537e16fdf5ec3e29d2" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;invalid&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;INVALID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 가 &lt;code&gt;INVALID&lt;/code&gt; 인 경우 제어가 &lt;code&gt;invalid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a47d095af794f1f2d7e0cc865234a5f4331e5e8f" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;pending&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;PENDING&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 가 &lt;code&gt;PENDING&lt;/code&gt; 인 경우 제어가 &lt;code&gt;pending&lt;/code&gt; 중 입니다.</target>
        </trans-unit>
        <trans-unit id="2361448b385344eb49836b469c86903441a98793" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;pristine&lt;/code&gt; if the user has not yet changed the value in the UI.</source>
          <target state="translated">사용자가 UI의 값을 아직 변경하지 않은 경우 컨트롤은 &lt;code&gt;pristine&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="8dedc3e5db6396d4275bcbc93943c800fcb96a11" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;untouched&lt;/code&gt; if the user has not yet triggered a &lt;code&gt;blur&lt;/code&gt; event on it.</source>
          <target state="translated">사용자가 &lt;code&gt;blur&lt;/code&gt; 이벤트를 아직 트리거하지 &lt;code&gt;untouched&lt;/code&gt; 경우 컨트롤이 그대로 유지 됩니다 .</target>
        </trans-unit>
        <trans-unit id="662ee3af64fa768ec48be3840af08c1ff766946c" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;valid&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;VALID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 가 &lt;code&gt;VALID&lt;/code&gt; 인 경우 제어가 &lt;code&gt;valid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c96dbfe8e7a308aa5f340515594b71ba14d67cb" translate="yes" xml:space="preserve">
          <source>A control is marked &lt;code&gt;touched&lt;/code&gt; once the user has triggered a &lt;code&gt;blur&lt;/code&gt; event on it.</source>
          <target state="translated">사용자가 &lt;code&gt;blur&lt;/code&gt; 이벤트를 트리거하면 컨트롤이 &lt;code&gt;touched&lt;/code&gt; 것으로 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="077b31470ebd608b300ba3d8e68f55768bc26f76" translate="yes" xml:space="preserve">
          <source>A control is pending while the control performs async validation.</source>
          <target state="translated">제어가 비동기 유효성 검증을 수행하는 동안 제어가 보류 중입니다.</target>
        </trans-unit>
        <trans-unit id="20010f105963bf11938a19a5e0f2c55c1232a5a2" translate="yes" xml:space="preserve">
          <source>A corresponding function defines a set of parameters for each category, and collects them into a corresponding &lt;code&gt;&lt;a href=&quot;animationmetadata&quot;&gt;AnimationMetadata&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">해당 함수는 각 범주에 대한 매개 변수 집합을 정의하고 해당 &lt;code&gt;&lt;a href=&quot;animationmetadata&quot;&gt;AnimationMetadata&lt;/a&gt;&lt;/code&gt; 객체 로 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="c4431d17b6bd0b4e139d23f69b87553db73c04b2" translate="yes" xml:space="preserve">
          <source>A couple of extra providers enable routing with &quot;hash&quot; URLs such as &lt;code&gt;#!/phones&lt;/code&gt; instead of the default &quot;push state&quot; strategy.</source>
          <target state="translated">두 개의 추가 공급자 는 기본 &quot;푸시 상태&quot;전략 대신 &lt;code&gt;#!/phones&lt;/code&gt; 와 같은 &quot;해시&quot;URL을 사용하여 라우팅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b3b73324dced072c7c998b9b615730a1cfe9df7" translate="yes" xml:space="preserve">
          <source>A couple of observations:</source>
          <target state="translated">몇 가지 관찰 :</target>
        </trans-unit>
        <trans-unit id="cead82c2a3576abd5bbfffd3a278cd74d11896ea" translate="yes" xml:space="preserve">
          <source>A crisis center with child routes</source>
          <target state="translated">어린이 노선이있는 위기 센터</target>
        </trans-unit>
        <trans-unit id="d696bc9b7e4bc40435fff12b3833af21db44d854" translate="yes" xml:space="preserve">
          <source>A critical alert.</source>
          <target state="translated">치명적 경보.</target>
        </trans-unit>
        <trans-unit id="dda359a5b2152b76b3b7c5509f76dff57027bf0a" translate="yes" xml:space="preserve">
          <source>A critical point</source>
          <target state="translated">중요한 포인트</target>
        </trans-unit>
        <trans-unit id="3c8bfeefb7c281566a1611017b18081b53645b6e" translate="yes" xml:space="preserve">
          <source>A cross-field validator is a &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validator&lt;/a&gt; that compares the values of different fields in a form and accepts or rejects them in combination. For example, you might have a form that offers mutually incompatible options, so that if the user can choose A or B, but not both. Some field values might also depend on others; a user might be allowed to choose B only if A is also chosen.</source>
          <target state="translated">교차 필드 유효성 검사기는 양식에서 서로 다른 필드의 값을 비교하고이를 조합하여 수락하거나 거부 하는 &lt;a href=&quot;form-validation#custom-validators&quot;&gt;사용자 지정 유효성 검사기&lt;/a&gt; 입니다. 예를 들어 상호 호환되지 않는 옵션을 제공하는 양식이있어 사용자가 A 또는 B를 선택할 수 있지만 둘 다 선택할 수는 없습니다. 일부 필드 값은 다른 값에 종속 될 수도 있습니다. 사용자는 A도 선택한 경우에만 B를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce6317a4ac2bc019a91d33b9bae2729a5b87ff60" translate="yes" xml:space="preserve">
          <source>A custom URL-matching function. Cannot be used together with &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">맞춤 URL 일치 기능 &lt;code&gt;path&lt;/code&gt; 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="fdafdc4619b6863a9e092a97e8ef06300d64b092" translate="yes" xml:space="preserve">
          <source>A custom element &lt;em&gt;hosts&lt;/em&gt; an Angular component, providing a bridge between the data and logic defined in the component and standard DOM APIs. Component properties and logic maps directly into HTML attributes and the browser's event system.</source>
          <target state="translated">사용자 지정 요소 는 Angular 구성 요소를 &lt;em&gt;호스팅&lt;/em&gt; 하여 구성 요소와 표준 DOM API에 정의 된 데이터와 논리를 연결합니다. 구성 요소 특성 및 논리는 HTML 속성 및 브라우저의 이벤트 시스템에 직접 맵핑됩니다.</target>
        </trans-unit>
        <trans-unit id="50fbd9a7a05110984303e83f01d313340150d8d9" translate="yes" xml:space="preserve">
          <source>A custom element extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. The browser maintains a &lt;code&gt;CustomElementRegistry&lt;/code&gt; of defined custom elements (also called Web Components), which maps an instantiable JavaScript class to an HTML tag.</source>
          <target state="translated">사용자 정의 요소는 JavaScript 코드로 컨텐츠를 작성하고 제어하는 ​​태그를 정의 할 수 있도록하여 HTML을 확장합니다. 브라우저 는 정의 가능한 사용자 정의 요소 (웹 구성 요소라고도 함) 의 &lt;code&gt;CustomElementRegistry&lt;/code&gt; 를 유지 관리 하여 인스턴스화 가능한 JavaScript 클래스를 HTML 태그에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="6c725e2134906977cd73632a4b80c11367108a21" translate="yes" xml:space="preserve">
          <source>A custom error handler for failed navigations.</source>
          <target state="translated">실패한 탐색을위한 사용자 지정 오류 처리기</target>
        </trans-unit>
        <trans-unit id="02d01b0f56b77bb7d6e1408ef6895eb591a41c22" translate="yes" xml:space="preserve">
          <source>A custom error handler for failed navigations. If the handler returns a value, the navigation Promise is resolved with this value. If the handler throws an exception, the navigation Promise is rejected with the exception.</source>
          <target state="translated">실패한 탐색에 대한 사용자 지정 오류 처리기입니다. 핸들러가 값을 반환하면 탐색 Promise가이 값으로 해결됩니다. 핸들러에서 예외가 발생하면 탐색 Promise가 예외와 함께 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="1ffa2867cc36c1d87f7f95eef71a929854ba1538" translate="yes" xml:space="preserve">
          <source>A custom event from an interceptor or a backend.</source>
          <target state="translated">인터셉터 또는 백엔드의 사용자 정의 이벤트.</target>
        </trans-unit>
        <trans-unit id="508d36eb8404c69db7405f018e84a6ca55036f9b" translate="yes" xml:space="preserve">
          <source>A custom handler for malformed URI errors. The handler is invoked when &lt;code&gt;encodedURI&lt;/code&gt; contains invalid character sequences. The default implementation is to redirect to the root URL, dropping any path or parameter information. The function takes three parameters:</source>
          <target state="translated">잘못된 URI 오류에 대한 사용자 정의 핸들러입니다. &lt;code&gt;encodedURI&lt;/code&gt; 에 유효하지 않은 문자 시퀀스가 ​​포함 된 경우 핸들러가 호출됩니다 . 기본 구현은 루트 URL로 경로 재지 정하여 경로 또는 매개 변수 정보를 삭제하는 것입니다. 이 함수는 세 가지 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8a2cf3cd14adbe7b98e625d7305635cef34ff8bf" translate="yes" xml:space="preserve">
          <source>A data flow model where the component tree is always checked for changes in one direction (parent to child), which prevents cycles in the change detection graph.</source>
          <target state="translated">구성 요소 트리에서 항상 한 방향 (상위에서 하위)의 변경 사항을 확인하여 변경 감지 그래프의주기를 방지하는 데이터 흐름 모델입니다.</target>
        </trans-unit>
        <trans-unit id="210dc781bd3eb286264d5aef72455eddddea7bdc" translate="yes" xml:space="preserve">
          <source>A data service encapsulates these details. It's easier to evolve these details inside the service without affecting its consumers. And it's easier to test the consumers with mock service implementations.</source>
          <target state="translated">데이터 서비스는 이러한 세부 사항을 캡슐화합니다. 소비자에게 영향을 미치지 않으면 서 서비스 내에서 이러한 세부 사항을보다 쉽게 ​​발전시킬 수 있습니다. 모의 서비스 구현으로 소비자를 테스트하는 것이 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="5fd0ebebf76062ac0cdbc96c6dac75750fffde56" translate="yes" xml:space="preserve">
          <source>A declarable belongs to one and only one NgModule. A module can list another module among its exports, in which case all of that module's public declaration are exported.</source>
          <target state="translated">선언은 하나의 NgModule에만 속합니다. 모듈은 내보내기 중 다른 모듈을 나열 할 수 있으며,이 경우 해당 모듈의 모든 공용 선언이 내보내집니다.</target>
        </trans-unit>
        <trans-unit id="d9d67cd229281a6464e06b9627732572303daf22" translate="yes" xml:space="preserve">
          <source>A declarable can only belong to one module, so only declare it in one &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. When you need it elsewhere, import the module that has the declarable you need in it.</source>
          <target state="translated">선언 가능은 하나의 모듈에만 속할 수 있으므로 하나의 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 로만 선언하십시오 . 다른 곳에서 필요할 경우 필요한 선언이있는 모듈을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="1a3c15ea9c54b23acd006a80632a4370109b2319" translate="yes" xml:space="preserve">
          <source>A decorator on a component class adds the metadata, including a pointer to the associated template.</source>
          <target state="translated">컴포넌트 클래스의 데코레이터는 관련 템플릿에 대한 포인터를 포함하여 메타 데이터를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="d9232145f0fa479629bee4a1403931108d3b67c5" translate="yes" xml:space="preserve">
          <source>A default implementation of the &lt;code&gt;&lt;a href=&quot;router/urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt; 의 기본 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="be7410185cfb22d50bdb3dd5b8d69a91b30d1843" translate="yes" xml:space="preserve">
          <source>A default implementation of the &lt;code&gt;&lt;a href=&quot;urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt; 의 기본 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="d5edf00cab75a5f261a00303a58b3784ef41af25" translate="yes" xml:space="preserve">
          <source>A delay value.</source>
          <target state="translated">지연 값</target>
        </trans-unit>
        <trans-unit id="30019a94791709ed7ee12c9d2a7e97d0717eab83" translate="yes" xml:space="preserve">
          <source>A dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; configures an injector with a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt;, which that injector uses to provide the concrete, runtime version of a dependency value. The injector relies on the provider configuration to create instances of the dependencies that it injects into components, directives, pipes, and other services.</source>
          <target state="translated">종속성 &lt;a href=&quot;glossary#provider&quot;&gt;공급자&lt;/a&gt; 는 인젝터에 &lt;a href=&quot;glossary#di-token&quot;&gt;DI 토큰을&lt;/a&gt; 구성합니다.이 토큰 은 인젝터가 구체적인 런타임 버전의 종속성 값을 제공하는 데 사용합니다. 인젝터는 제공자 구성에 의존하여 컴포넌트, 지시문, 파이프 및 기타 서비스에 주입하는 종속성의 인스턴스를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="51f38719f370be9d130886d8c0bd44a8365fee81" translate="yes" xml:space="preserve">
          <source>A dependency can't always be created by the default method of instantiating a class. You learned about some other methods in &lt;a href=&quot;dependency-injection-providers&quot;&gt;Dependency Providers&lt;/a&gt;. The following &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; example demonstrates many of the alternatives and why you need them. It's visually simple: a few properties and the logs produced by a logger.</source>
          <target state="translated">클래스를 인스턴스화하는 기본 메소드로 항상 종속성을 작성할 수있는 것은 아닙니다. &lt;a href=&quot;dependency-injection-providers&quot;&gt;Dependency Providers&lt;/a&gt; 에서 다른 방법에 대해 배웠습니다 . 다음의 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 예제는 많은 대안과 왜 필요한지 를 보여줍니다. 시각적으로 간단합니다 : 로거가 생성 한 몇 가지 속성과 로그입니다.</target>
        </trans-unit>
        <trans-unit id="9f695238eb1ba6e7f4b219ba97b438b3b7e53b33" translate="yes" xml:space="preserve">
          <source>A dependency doesn't have to be a service&amp;mdash;it could be a function, for example, or a value.</source>
          <target state="translated">종속성은 서비스 일 필요는 없습니다. 예를 들어 함수 또는 값일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15525a2b2d3a0191259341bf53ae12f208e1ea57" translate="yes" xml:space="preserve">
          <source>A design pattern and mechanism for creating and delivering some parts of an application (dependencies) to other parts of an application that require them.</source>
          <target state="translated">응용 프로그램의 일부 (종속성)를 작성하여이를 필요로하는 응용 프로그램의 다른 부분으로 전달하기위한 디자인 패턴 및 메커니즘.</target>
        </trans-unit>
        <trans-unit id="cbba6be02bb4ee14ea720baacb075129dc0348dc" translate="yes" xml:space="preserve">
          <source>A differ that tracks changes made to an object over time.</source>
          <target state="translated">시간이 지남에 따라 객체의 변경 사항을 추적하는 차이입니다.</target>
        </trans-unit>
        <trans-unit id="ba0e47b0105f6046e0b89617ee3f13f2bdf94e04" translate="yes" xml:space="preserve">
          <source>A directive &lt;em&gt;class&lt;/em&gt; is spelled in &lt;em&gt;UpperCamelCase&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;). A directive's &lt;em&gt;attribute name&lt;/em&gt; is spelled in &lt;em&gt;lowerCamelCase&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;). The guide refers to the directive &lt;em&gt;class&lt;/em&gt; when talking about its properties and what the directive does. The guide refers to the &lt;em&gt;attribute name&lt;/em&gt; when describing how you apply the directive to an element in the HTML template.</source>
          <target state="translated">지시문 &lt;em&gt;클래스&lt;/em&gt; 는 &lt;em&gt;UpperCamelCase&lt;/em&gt; ( &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ) 에서 철자입니다 . 지시문의 &lt;em&gt;속성 이름&lt;/em&gt; 은 &lt;em&gt;lowerCamelCase&lt;/em&gt; ( &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ) 에서 입력됩니다 . 이 안내서는 속성 및 지시문의 기능에 대해 설명 할 때 지시문 &lt;em&gt;클래스를&lt;/em&gt; 참조합니다 . 이 안내서는 HTML 템플릿의 요소에 지시문을 적용하는 방법을 설명 할 때 &lt;em&gt;속성 이름을&lt;/em&gt; 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="94d1828685c2b046ca5fbb00127b0088df822914" translate="yes" xml:space="preserve">
          <source>A directive class is usually associated with an HTML element or attribute, and that element or attribute is often referred to as the directive itself. When Angular finds a directive in an HTML &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM.</source>
          <target state="translated">지시문 클래스는 일반적으로 HTML 요소 또는 속성과 연관되며 해당 요소 또는 속성은 종종 지시문 자체라고합니다. Angular는 HTML &lt;a href=&quot;glossary#template&quot;&gt;템플리트&lt;/a&gt; 에서 지시문을 찾으면 일치하는 지시문 클래스 인스턴스를 작성하고 브라우저 DOM의 해당 부분에 대한 인스턴스 제어를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e2eb8b30123eba9d5dc5274c6b45d8e83667dd30" translate="yes" xml:space="preserve">
          <source>A directive could hide the unwanted paragraph instead by setting its &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">지시문은 &lt;code&gt;display&lt;/code&gt; 스타일을 &lt;code&gt;none&lt;/code&gt; 으로 설정하여 원하지 않는 단락을 숨길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc3d1ce63988b28444f381ebc398b6bdf06ac41c" translate="yes" xml:space="preserve">
          <source>A directive has the same set of lifecycle hooks.</source>
          <target state="translated">지시문에는 동일한 수명주기 후크 세트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb17837a767841446768a528a4105fa60a1be0ff" translate="yes" xml:space="preserve">
          <source>A directive must belong to exactly one NgModule. Do not re-declare a directive imported from another module. List the directive class in the &lt;code&gt;declarations&lt;/code&gt; field of an NgModule.</source>
          <target state="translated">지시문은 정확히 하나의 NgModule에 속해야합니다. 다른 모듈에서 가져온 지시문을 다시 선언하지 마십시오. NgModule 의 &lt;code&gt;declarations&lt;/code&gt; 필드에 지시문 클래스를 나열하십시오 .</target>
        </trans-unit>
        <trans-unit id="06bab5b2f84f1d83b1636af97cad32ec246881f5" translate="yes" xml:space="preserve">
          <source>A directive that adds max length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 컨트롤에 최대 길이 유효성 검사를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="dc755aa288617ce267b9847c3b17e76a21d1135a" translate="yes" xml:space="preserve">
          <source>A directive that adds max length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 컨트롤에 최대 길이 유효성 검사를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="6e258f11d9d85d3806958b19413b937998de3ca2" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; mult-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 컨트롤에 최소 길이 유효성 검사를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 멀티 공급자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="6108b6e8bd8eba3c4054af4d45141608b2f683ee" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 특성으로 표시된 컨트롤에 최소 길이 유효성 검사를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="c576fdea0f4345495cbec00241aa643d607047f6" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; mult-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 컨트롤에 최소 길이 유효성 검사를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 멀티 공급자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="8efc11bb0226ce15a8f8ef691ea95cb130ce8118" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 특성으로 표시된 컨트롤에 최소 길이 유효성 검사를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="695db7155424e297167bd554b9d87c8adef8366a" translate="yes" xml:space="preserve">
          <source>A directive that adds regex pattern validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute. The regex must match the entire control value. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 컨트롤에 정규식 패턴 유효성 검사를 추가하는 지시문입니다 . 정규식은 전체 제어 값과 일치해야합니다. 지시문은 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="0e7995cf0d230fbcb234007e53811a6559246b24" translate="yes" xml:space="preserve">
          <source>A directive that adds regex pattern validation to controls marked with the &lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute. The regex must match the entire control value. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 컨트롤에 정규식 패턴 유효성 검사를 추가하는 지시문입니다 . 정규식은 전체 제어 값과 일치해야합니다. 지시문은 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="fecaa780233e30f2b7c4f880afba7d4f9c081262" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; validator to controls marked with the &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 제어에 &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 유효성 검증기를 추가하는 지시문 . 지시문은 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="66ea7083cabb25ae99d85dbbbd48442747569672" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; validator to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 속성으로 표시된 제어에 &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 유효성 검증기를 추가하는 지시문 . 지시문은 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="e5b20651be4b4c212b50703b3396740bdd0ebf00" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;required&lt;/code&gt; validator to any controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 속성으로 표시된 모든 컨트롤에 &lt;code&gt;required&lt;/code&gt; 유효성 검사기를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="27d5b01c46cf928af7627e24610db90e1b702841" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;required&lt;/code&gt; validator to any controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 속성으로 표시된 모든 컨트롤에 &lt;code&gt;required&lt;/code&gt; 유효성 검사기를 추가하는 지시문입니다 . 지시문은 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 다중 제공자 목록 과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="0540f8499c507f38f8fb31d44a122a56e3f34181" translate="yes" xml:space="preserve">
          <source>A distinct application feature or workflow may be &lt;em&gt;lazy loaded&lt;/em&gt; or &lt;em&gt;loaded on demand&lt;/em&gt; rather than when the application starts.</source>
          <target state="translated">별도의 응용 프로그램 기능 또는 워크 플로는 응용 프로그램을 시작할 때가 아니라 &lt;em&gt;필요에 따라 &lt;/em&gt;&lt;em&gt;지연로드&lt;/em&gt; 되거나 &lt;em&gt;로드&lt;/em&gt; 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1eb6bea4ff9b8beaa04011a217d05d9557306c38" translate="yes" xml:space="preserve">
          <source>A domain NgModule organizes the code related to a certain function, containing all of the components, routing, and templates that make up the function. Your top component in the domain NgModule acts as the feature or domain's root, and is the only component you export. Private supporting subcomponents descend from it.</source>
          <target state="translated">도메인 NgModule은 기능을 구성하는 모든 구성 요소, 라우팅 및 템플릿을 포함하는 특정 기능과 관련된 코드를 구성합니다. 도메인 NgModule의 최상위 구성 요소는 기능 또는 도메인의 루트 역할을하며 내보내는 유일한 구성 요소입니다. 개인 지원 하위 구성 요소는 그 하위 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="0e65175079f38d7882ce624afc0a013c9135750a" translate="yes" xml:space="preserve">
          <source>A dot-delimited string or array of string/number values that define the path to the control.</source>
          <target state="translated">컨트롤로의 경로를 정의하는 점으로 구분 된 문자열 또는 문자열 / 숫자 값의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="6b086b3a868f0313eed50c2f74d7d107c8d6b457" translate="yes" xml:space="preserve">
          <source>A download progress event was received.</source>
          <target state="translated">다운로드 진행 이벤트가 수신되었습니다.</target>
        </trans-unit>
        <trans-unit id="bf1fd3090342831e8febf29fa6ce244224f91de8" translate="yes" xml:space="preserve">
          <source>A download progress event.</source>
          <target state="translated">다운로드 진행 이벤트</target>
        </trans-unit>
        <trans-unit id="0b2f0df2707b012177ae022e3a57726cb45c379b" translate="yes" xml:space="preserve">
          <source>A dynamic form requires an object model that can describe all scenarios needed by the form functionality. The example hero-application form is a set of questions&amp;mdash;that is, each control in the form must ask a question and accept an answer.</source>
          <target state="translated">동적 양식에는 양식 기능에 필요한 모든 시나리오를 설명 할 수있는 개체 모델이 필요합니다. 예제 영웅 신청 양식은 일련의 질문입니다. 즉, 양식의 각 컨트롤은 질문을하고 답변을 받아야합니다.</target>
        </trans-unit>
        <trans-unit id="f9e9d69b64d87f54aef3ffc12cf639199159b805" translate="yes" xml:space="preserve">
          <source>A dynamic form uses a service to create grouped sets of input controls, based on the form model. The following &lt;code&gt;QuestionControlService&lt;/code&gt; collects a set of &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instances that consume the metadata from the question model. You can specify default values and validation rules.</source>
          <target state="translated">동적 양식은 서비스를 사용하여 양식 모델을 기반으로 그룹화 된 입력 컨트롤 집합을 만듭니다. 다음 &lt;code&gt;QuestionControlService&lt;/code&gt; 는 질문 모델에서 메타 데이터를 사용하는 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스 집합을 수집합니다 . 기본값과 유효성 검사 규칙을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c274fbd2f10d6758f7cee43a610ad84394d5ef5e" translate="yes" xml:space="preserve">
          <source>A factory for creating a Compiler</source>
          <target state="translated">컴파일러 작성을위한 팩토리</target>
        </trans-unit>
        <trans-unit id="13178cecedfd2e1789373fa7414c20e56c226794" translate="yes" xml:space="preserve">
          <source>A factory function that returns a &lt;code&gt;&lt;a href=&quot;../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; instance associated with browser service providers.</source>
          <target state="translated">브라우저 서비스 공급자와 관련된 &lt;code&gt;&lt;a href=&quot;../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; 인스턴스 를 반환하는 팩토리 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="7f8d36a12b934ff22ab86e8c23f3cc869825223b" translate="yes" xml:space="preserve">
          <source>A factory function that returns a &lt;code&gt;&lt;a href=&quot;core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; instance associated with browser service providers.</source>
          <target state="translated">브라우저 서비스 공급자와 관련된 &lt;code&gt;&lt;a href=&quot;core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; 인스턴스 를 반환하는 팩토리 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="dcb9b28f9ee950cd3bc74acd3a0473356aed355b" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; 에서 반환 된 팩토리 객체 입니다. &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; 메소드.</target>
        </trans-unit>
        <trans-unit id="3bb2b6cb44a47bc6b53280d3511a8e67672f2032" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;build()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; 에서 반환 된 팩토리 객체 입니다. &lt;code&gt;build()&lt;/code&gt; 메서드.</target>
        </trans-unit>
        <trans-unit id="dfbb3a312624d276c0ae06bf2036ff66b531cb9d" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animations&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; 에서 반환 된 팩토리 객체 입니다. &lt;code&gt;&lt;a href=&quot;animations&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; 메소드.</target>
        </trans-unit>
        <trans-unit id="35e63cb078a72553634c9dd9e7e687d0c012cc2a" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;build()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; 에서 반환 된 팩토리 객체 입니다. &lt;code&gt;build()&lt;/code&gt; 메서드.</target>
        </trans-unit>
        <trans-unit id="950344dd2008bd842b31f199f0c2f6a76dc90bcc" translate="yes" xml:space="preserve">
          <source>A factory provider needs a factory function.</source>
          <target state="translated">공장 공급자는 공장 기능이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9af1374f1b3a2d447374063ec0d712c6b3c1abfe" translate="yes" xml:space="preserve">
          <source>A feature module is an organizational best practice, as opposed to a concept of the core Angular API. A feature module delivers a cohesive set of functionality focused on a specific application need such as a user workflow, routing, or forms. While you can do everything within the root module, feature modules help you partition the app into focused areas. A feature module collaborates with the root module and with other modules through the services it provides and the components, directives, and pipes that it shares.</source>
          <target state="translated">기능 모듈은 핵심 Angular API 개념과 달리 조직의 모범 사례입니다. 기능 모듈은 사용자 워크 플로, 라우팅 또는 양식과 같은 특정 응용 프로그램 요구에 중점을 둔 응집력있는 기능 집합을 제공합니다. 루트 모듈 내에서 모든 작업을 수행 할 수 있지만 기능 모듈을 사용하면 앱을 집중 영역으로 분할 할 수 있습니다. 기능 모듈은 제공하는 서비스와 공유하는 구성 요소, 지시문 및 파이프를 통해 루트 모듈 및 다른 모듈과 협업합니다.</target>
        </trans-unit>
        <trans-unit id="8a3f10b61215f1ebd7d50bf9977a58ca5d7430ea" translate="yes" xml:space="preserve">
          <source>A few HTML attributes have 1:1 mapping to properties; for example, &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">일부 HTML 속성은 속성에 1 : 1 매핑됩니다. 예를 들어 &lt;code&gt;id&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cab7e438a119824aa31b72befbf1582a5325059e" translate="yes" xml:space="preserve">
          <source>A few examples are:</source>
          <target state="translated">몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c6ee2c2b25cb84877c6a129970f10826dc9e4acb" translate="yes" xml:space="preserve">
          <source>A few of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance methods are not covered by static &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; methods. These are rarely needed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 인스턴스 메소드 중 일부는 정적 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; &lt;em&gt; 클래스&lt;/em&gt; 메소드로 다루지 않습니다 . 이것들은 거의 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fe024a04a32763b23cf4aab61238ff280ef8b6c1" translate="yes" xml:space="preserve">
          <source>A few techniques are noteworthy:</source>
          <target state="translated">몇 가지 기술이 주목할 만하다.</target>
        </trans-unit>
        <trans-unit id="a9b6cd4fe72242d6d017b5e2e509342ea11bb39c" translate="yes" xml:space="preserve">
          <source>A few terms are unambiguously services. They typically indicate agency by ending in &quot;-er&quot;. You may prefer to name a service that logs messages &lt;code&gt;Logger&lt;/code&gt; rather than &lt;code&gt;LoggerService&lt;/code&gt;. Decide if this exception is agreeable in your project. As always, strive for consistency.</source>
          <target state="translated">몇 가지 용어는 명백한 서비스입니다. 일반적으로 &quot;-er&quot;로 끝나는 대행사를 나타냅니다. &lt;code&gt;LoggerService&lt;/code&gt; 대신 &lt;code&gt;Logger&lt;/code&gt; 메시지를 기록하는 서비스의 이름을 지정할 수 있습니다 . 프로젝트에서이 예외가 적절한 지 결정하십시오. 항상 그렇듯이 일관성을 유지하기 위해 노력하십시오.</target>
        </trans-unit>
        <trans-unit id="4b0543f1b2e2dc773052225d03a3ed8562e5819b" translate="yes" xml:space="preserve">
          <source>A file named &lt;code&gt;angular.json&lt;/code&gt; at the root level of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; provides workspace-wide and project-specific configuration defaults for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to the root workspace folder.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;작업 영역&lt;/a&gt; 의 루트 수준에서 &lt;code&gt;angular.json&lt;/code&gt; 이라는 파일 은 Angular CLI에서 제공하는 빌드 및 개발 도구에 대한 작업 영역 전체 및 프로젝트 별 구성 기본값을 제공합니다. 구성에 제공된 경로 값은 루트 작업 공간 폴더를 기준으로합니다.</target>
        </trans-unit>
        <trans-unit id="cdb64896ccc0908fbd528f490c377372ffb24bd2" translate="yes" xml:space="preserve">
          <source>A file named &lt;code&gt;angular.json&lt;/code&gt; at the root level of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; provides workspace-wide and project-specific configuration defaults for build and development tools that are provided by or integrated with the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;작업 영역&lt;/a&gt; 의 루트 레벨에 &lt;code&gt;angular.json&lt;/code&gt; 이라는 파일 은 &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; 에서 제공하거나 Angular CLI 와 통합 된 빌드 및 개발 도구에 대한 작업 영역 전체 및 프로젝트 별 구성 기본값을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="1bef64fe13151ffc90fde1cc8e6483f43af6510c" translate="yes" xml:space="preserve">
          <source>A file specifies the root files and the compiler options required to compile a TypeScript project. For more information, see &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration&lt;/a&gt;.</source>
          <target state="translated">파일은 TypeScript 프로젝트를 컴파일하는 데 필요한 루트 파일과 컴파일러 옵션을 지정합니다. 자세한 내용은 &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript 구성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c5daab9e4b40930ffc67ad08f9f7e944f2c8b0d" translate="yes" xml:space="preserve">
          <source>A final &lt;code&gt;&lt;a href=&quot;http/httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; which will dispatch the request via browser HTTP APIs to a backend.</source>
          <target state="translated">브라우저 HTTP API를 통해 요청을 백엔드로 발송 하는 최종 &lt;code&gt;&lt;a href=&quot;http/httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="63f7ebe21023a564f8979eb517f0a75bfaa7e096" translate="yes" xml:space="preserve">
          <source>A final &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; which will dispatch the request via browser HTTP APIs to a backend.</source>
          <target state="translated">브라우저 HTTP API를 통해 요청을 백엔드로 발송 하는 최종 &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="081bb28f877d8dfbf9dbdced6031ad6c6eb21354" translate="yes" xml:space="preserve">
          <source>A flat module index &lt;code&gt;.d.ts&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; is created with the given &lt;code&gt;flatModuleOutFile&lt;/code&gt; name in the same location as the library index &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">플랫 모듈 인덱스 &lt;code&gt;.d.ts&lt;/code&gt; 및 &lt;code&gt;.js&lt;/code&gt; 는 지정된 &lt;code&gt;flatModuleOutFile&lt;/code&gt; 이름으로 라이브러리 인덱스 &lt;code&gt;.d.ts&lt;/code&gt; 파일 과 동일한 위치에 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="0b4ecb2d416525e8a678b698930a9d483c457446" translate="yes" xml:space="preserve">
          <source>A flip of the switch turns the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; into a &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;. The complete implementation is as follows:</source>
          <target state="translated">스위치를 돌리면 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 가 FlyingHeroesImpurePipe 로 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; . 완전한 구현은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="13b9a7ffb816d86aa53a81473dcdcdbcf06ce32d" translate="yes" xml:space="preserve">
          <source>A folder named after the component</source>
          <target state="translated">구성 요소의 이름을 따서 명명 된 폴더</target>
        </trans-unit>
        <trans-unit id="dbed245bdc8e12d2094d18b2dbd182078e9aa794" translate="yes" xml:space="preserve">
          <source>A form &lt;em&gt;array&lt;/em&gt; defines a dynamic form, where you can add and remove controls at run time. You can also nest form arrays to create more complex forms. For more about this option, see &lt;a href=&quot;reactive-forms#dynamic-forms&quot;&gt;Creating dynamic forms&lt;/a&gt; below.</source>
          <target state="translated">양식 &lt;em&gt;배열&lt;/em&gt; 은 런타임에 컨트롤을 추가 및 제거 할 수있는 동적 양식을 정의합니다. 양식 배열을 중첩하여 더 복잡한 양식을 만들 수도 있습니다. 이 옵션에 대한 자세한 내용은 아래의 &lt;a href=&quot;reactive-forms#dynamic-forms&quot;&gt;동적 양식 만들기를&lt;/a&gt; 참조 하세요.</target>
        </trans-unit>
        <trans-unit id="036fcb5348c304b4a0e71c43763d3184767f86de" translate="yes" xml:space="preserve">
          <source>A form &lt;em&gt;group&lt;/em&gt; defines a form with a fixed set of controls that you can manage together. Form group basics are discussed in this section. You can also &lt;a href=&quot;reactive-forms#nested-groups&quot;&gt;nest form groups&lt;/a&gt; to create more complex forms.</source>
          <target state="translated">양식 &lt;em&gt;그룹&lt;/em&gt; 은 함께 관리 할 수있는 고정 된 컨트롤 집합이있는 양식을 정의합니다. 이 섹션에서는 양식 그룹 기본 사항에 대해 설명합니다. &lt;a href=&quot;reactive-forms#nested-groups&quot;&gt;양식 그룹&lt;/a&gt; 을 중첩 하여 더 복잡한 양식을 작성할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dce635877c967caa411bed07baa04183db074439" translate="yes" xml:space="preserve">
          <source>A form component class with a &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 데코레이터 가있는 양식 컴포넌트 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="6f4dabb93ae061e849700a419e18e9419cfd943a" translate="yes" xml:space="preserve">
          <source>A form group tracks the status and changes for each of its controls, so if one of the controls changes, the parent control also emits a new status or value change. The model for the group is maintained from its members. After you define the model, you must update the template to reflect the model in the view.</source>
          <target state="translated">양식 그룹은 각 컨트롤의 상태와 변경 사항을 추적하므로 컨트롤 중 하나가 변경되면 부모 컨트롤도 새로운 상태 또는 값 변경을 내 보냅니다. 그룹의 모델은 구성원으로부터 유지 보수됩니다. 모델을 정의한 후 모델을보기에 반영하도록 템플리트를 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="7a2957cdc2fc7fde81eadc1298d620e085f6a3ce" translate="yes" xml:space="preserve">
          <source>A form of property &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt; in which a &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; between double-curly braces renders as text. That text can be concatenated with neighboring text before it is assigned to an element property or displayed between element tags, as in this example.</source>
          <target state="translated">이중 중괄호 사이 의 &lt;a href=&quot;glossary#template-expression&quot;&gt;템플릿 표현식&lt;/a&gt; 이 텍스트로 렌더링 되는 속성 &lt;a href=&quot;glossary#data-binding&quot;&gt;데이터 바인딩&lt;/a&gt; 형식입니다 . 이 예제에서와 같이 해당 텍스트는 요소 속성에 할당되거나 요소 태그 사이에 표시되기 전에 인접한 텍스트와 연결될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c440d6cf03478cfaa3881a3d89f9573911b226a4" translate="yes" xml:space="preserve">
          <source>A format for building Angular forms using HTML forms and input elements in the view. The alternative format uses the &lt;a href=&quot;glossary#reactive-forms&quot;&gt;reactive forms&lt;/a&gt; framework.</source>
          <target state="translated">뷰에서 HTML 양식 및 입력 요소를 사용하여 각도 양식을 작성하기위한 형식입니다. 대체 형식은 &lt;a href=&quot;glossary#reactive-forms&quot;&gt;반응 양식&lt;/a&gt; 프레임 워크를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="57e7a81c0b8f28e9f94e340a3a04b52c7a68cd88" translate="yes" xml:space="preserve">
          <source>A fragment in the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; is &lt;em&gt;never&lt;/em&gt; persisted.</source>
          <target state="translated">의 조각 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; 입니다 &lt;em&gt;결코&lt;/em&gt; 지속되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e5ef4a349b19270bd3bc9ebcc3f18e626f75c0cf" translate="yes" xml:space="preserve">
          <source>A framework for building Angular forms through code in a component. The alternative is a &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;template-driven form&lt;/a&gt;.</source>
          <target state="translated">구성 요소의 코드를 통해 Angular 양식을 작성하기위한 프레임 워크입니다. 대안은 &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;템플릿 중심 양식&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0d14d0f7ea94f405fdbafc210a264d270af949aa" translate="yes" xml:space="preserve">
          <source>A full HTTP response, including a typed response body (which may be &lt;code&gt;null&lt;/code&gt; if one was not returned).</source>
          <target state="translated">유형이 지정된 응답 본문을 포함하는 전체 HTTP 응답 ( 하나가 반환되지 않은 경우 &lt;code&gt;null&lt;/code&gt; 일 수 있음 )</target>
        </trans-unit>
        <trans-unit id="53e7772e1ee60e5a076a93eae9c41bb3210c50d4" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">URL과 경로를 일치시키는 기능입니다. &lt;code&gt;path&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 의 조합이 표현력이 충분하지 않은 경우 &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; 에 대한 사용자 정의 URL 매처를 구현하십시오 . &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="e9a5b2284a01d9516c107bbd07154dbd90be0028" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt;.</source>
          <target state="translated">URL과 경로를 일치시키는 기능입니다. &lt;code&gt;path&lt;/code&gt; 와 &lt;code&gt;pathMatch&lt;/code&gt; 의 조합이 충분히 표현 적이 지 않은 경우 &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; 에 대한 사용자 지정 URL 매처를 구현합니다 . &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;pathMatch&lt;/code&gt; 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="09f1f8e31b5105534c849f46cebce0d49634b1a5" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">URL과 경로를 일치시키는 기능입니다. &lt;code&gt;path&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 의 조합이 표현력이 충분하지 않은 경우 &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; 에 대한 사용자 정의 URL 매처를 구현하십시오 . &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8732fc21158fcddfd5ed7d6c64cdb4f6eb4bb86e" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt;.</source>
          <target state="translated">URL과 경로를 일치시키는 기능입니다. &lt;code&gt;path&lt;/code&gt; 와 &lt;code&gt;pathMatch&lt;/code&gt; 의 조합이 충분히 표현 적이 지 않은 경우 &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; 에 대한 사용자 지정 URL 매처를 구현합니다 . &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;pathMatch&lt;/code&gt; 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="684e23c9356d6fb252eeb1d67716948d73324136" translate="yes" xml:space="preserve">
          <source>A function is executed each time a state change occurs in the animation trigger element. The animation steps run when the function returns true.</source>
          <target state="translated">애니메이션 트리거 요소에서 상태가 변경 될 때마다 함수가 실행됩니다. 함수가 true를 반환하면 애니메이션 단계가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="574a3a8774d337c58b7e6859c4c8542cb2f2b41f" translate="yes" xml:space="preserve">
          <source>A function that defines how to obtain or generate values or messages to be published. This function is executed when a consumer calls the &lt;code&gt;subscribe()&lt;/code&gt; method of an &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt;.</source>
          <target state="translated">게시 할 값 또는 메시지를 얻거나 생성하는 방법을 정의하는 함수입니다. 이 함수는 소비자가 &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt; 의 &lt;code&gt;subscribe()&lt;/code&gt; 메서드를 호출 할 때 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="6275d4c0492c7115ec24bb20ae9c3d8f63aab167" translate="yes" xml:space="preserve">
          <source>A function that defines how to track changes for items in the iterable.</source>
          <target state="translated">iterable에서 항목의 변경 사항을 추적하는 방법을 정의하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="4fc9c1cc331c59974bdc21b79a630dbc89ff6bf9" translate="yes" xml:space="preserve">
          <source>A function that is called to resolve a collection of lazy-loaded routes.</source>
          <target state="translated">지연로드 된 경로 모음을 해결하기 위해 호출되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="2b0d15eb0823d656c6a5329e70e9894fc5c66cd4" translate="yes" xml:space="preserve">
          <source>A function that is called to resolve a collection of lazy-loaded routes. Must be an arrow function of the following form: &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;</source>
          <target state="translated">지연로드 된 경로 모음을 해결하기 위해 호출되는 함수입니다. 다음 형식의 화살표 함수 여야합니다. &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65bb3a74803d66f4dd1e37ce3b12aebc7e84490d" translate="yes" xml:space="preserve">
          <source>A function that is executed when a platform is initialized.</source>
          <target state="translated">플랫폼이 초기화 될 때 실행되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="ca9b1f1fd5952d3c22b4ec5faed5f044aba54c78" translate="yes" xml:space="preserve">
          <source>A function that modifies a class or property definition. Decorators (also called &lt;em&gt;annotations&lt;/em&gt;) are an experimental (stage 2) &lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;JavaScript language feature&lt;/a&gt;. TypeScript adds support for decorators.</source>
          <target state="translated">클래스 또는 속성 정의를 수정하는 함수입니다. 데코레이터 ( &lt;em&gt;주석&lt;/em&gt; 이라고도 함 )는 실험적인 (2 단계) &lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;JavaScript 언어 기능&lt;/a&gt; 입니다. TypeScript는 데코레이터에 대한 지원을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="c02f83e963294e99ed2772ac7ec52453259e650b" translate="yes" xml:space="preserve">
          <source>A function that receives a control and returns a Promise or observable that emits validation errors if present, otherwise null.</source>
          <target state="translated">컨트롤을 받고 Promise 또는 Observable을 반환하여 유효성 검사 오류가있는 경우 반환합니다. 그렇지 않으면 null입니다.</target>
        </trans-unit>
        <trans-unit id="c63c521dd24d8ae841280ee8807d80862d7fa73b" translate="yes" xml:space="preserve">
          <source>A function that receives a control and synchronously returns a map of validation errors if present, otherwise null.</source>
          <target state="translated">컨트롤을 수신하고 존재하는 경우 유효성 검사 오류 맵을 동 기적으로 반환하는 함수, 그렇지 않으면 null입니다.</target>
        </trans-unit>
        <trans-unit id="c50a6dbcee34631ac561a96933693a78f4413f26" translate="yes" xml:space="preserve">
          <source>A function that returns a set of routes to load.</source>
          <target state="translated">로드 할 경로 집합을 반환하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="498df6d36954e0cdff82d1b0509284d0281596a6" translate="yes" xml:space="preserve">
          <source>A function that uses the &lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt; API to perform a complex process such as &quot;build&quot; or &quot;test&quot;. The builder code is defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt; API를 사용하여 &quot;빌드&quot;또는 &quot;테스트&quot;와 같은 복잡한 프로세스를 수행하는 함수입니다 . 빌더 코드는 &lt;a href=&quot;glossary#npm-package&quot;&gt;npm 패키지에&lt;/a&gt; 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb7987e75f0c7e65838a518979f2220d3c5dca44" translate="yes" xml:space="preserve">
          <source>A function that will be executed when a platform is initialized.</source>
          <target state="translated">플랫폼이 초기화 될 때 실행될 함수입니다.</target>
        </trans-unit>
        <trans-unit id="09d03f78f1c88deaa516cb82e14a686bff6bdbe1" translate="yes" xml:space="preserve">
          <source>A function that will be executed when an application is initialized.</source>
          <target state="translated">응용 프로그램이 초기화 될 때 실행될 함수입니다.</target>
        </trans-unit>
        <trans-unit id="06f5cc23cf462eb4020857f44f94a183b857febb" translate="yes" xml:space="preserve">
          <source>A function that will be executed when calling &lt;code&gt;&lt;a href=&quot;platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; just before current platform state is rendered to string.</source>
          <target state="translated">현재 플랫폼 상태가 문자열로 렌더링되기 직전에 &lt;code&gt;&lt;a href=&quot;platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; 을 호출 할 때 실행될 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="407a564f4ca570f6b9e0addb423af8b5d1261191" translate="yes" xml:space="preserve">
          <source>A function that will be executed when calling &lt;code&gt;&lt;a href=&quot;rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; just before current platform state is rendered to string.</source>
          <target state="translated">현재 플랫폼 상태가 문자열로 렌더링되기 직전에 &lt;code&gt;&lt;a href=&quot;rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; 을 호출 할 때 실행될 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="4d85a1e7e2608a6d01946ea8f34b3d4c9507f423" translate="yes" xml:space="preserve">
          <source>A function to call when the notification occurs. Receives the event object as an argument.</source>
          <target state="translated">알림 발생시 호출하는 기능입니다. 이벤트 객체를 인수로받습니다.</target>
        </trans-unit>
        <trans-unit id="0a7b93f0502276f70b84f75c408d27157e6276eb" translate="yes" xml:space="preserve">
          <source>A function to invoke to create a value for this &lt;code&gt;token&lt;/code&gt;. The function is invoked with resolved values of &lt;code&gt;token&lt;/code&gt;s in the &lt;code&gt;deps&lt;/code&gt; field.</source>
          <target state="translated">이 &lt;code&gt;token&lt;/code&gt; 의 값을 생성하기 위해 호출하는 함수 입니다. 함수는 &lt;code&gt;deps&lt;/code&gt; 필드 에서 해결 된 &lt;code&gt;token&lt;/code&gt; 값으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="2be97f407436eaa098a90855dde1a2d9662d7e64" translate="yes" xml:space="preserve">
          <source>A future guide update will explain how to write such tests with the &lt;code&gt;&lt;a href=&quot;../api/router/testing/routertestingmodule&quot;&gt;RouterTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">향후 가이드 업데이트에서는 &lt;code&gt;&lt;a href=&quot;../api/router/testing/routertestingmodule&quot;&gt;RouterTestingModule&lt;/a&gt;&lt;/code&gt; 을 사용하여 이러한 테스트를 작성하는 방법을 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="dbf0f48bf91ee4d285d9f2dff879c99f8aa11e6b" translate="yes" xml:space="preserve">
          <source>A getter provides easy access to the aliases in the form array instance compared to repeating the &lt;code&gt;profileForm.get()&lt;/code&gt; method to get each instance. The form array instance represents an undefined number of controls in an array. It's convenient to access a control through a getter, and this approach is easy to repeat for additional controls.</source>
          <target state="translated">getter는 각 인스턴스를 얻기 위해 &lt;code&gt;profileForm.get()&lt;/code&gt; 메소드를 반복하는 것에 비해 양식 배열 인스턴스의 별명에 쉽게 액세스 할 수 있습니다 . 폼 배열 인스턴스는 배열에 정의되지 않은 컨트롤 수를 나타냅니다. 게터를 통해 컨트롤에 액세스하는 것이 편리하며이 방법은 추가 컨트롤에 대해 반복하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="82f3588be996e71607e620dec4b8b22179916c7f" translate="yes" xml:space="preserve">
          <source>A given Angular workspace contains several TypeScript configuration files. At the root &lt;code&gt;tsconfig.json&lt;/code&gt; file specifies the base TypeScript and Angular compiler options that all projects in the workspace inherit.</source>
          <target state="translated">주어진 Angular 작업 공간에는 여러 TypeScript 구성 파일이 있습니다. 루트에서 &lt;code&gt;tsconfig.json&lt;/code&gt; 파일은 작업 공간의 모든 프로젝트가 상속하는 기본 TypeScript 및 Angular 컴파일러 옵션을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="56f28945da320dfacc6dd33fe0eed3c442d99b91" translate="yes" xml:space="preserve">
          <source>A global registry of &lt;a href=&quot;core/testability&quot;&gt;&lt;code&gt;Testability&lt;/code&gt;&lt;/a&gt; instances for specific elements.</source>
          <target state="translated">특정 요소에 대한 &lt;a href=&quot;core/testability&quot;&gt; &lt;code&gt;Testability&lt;/code&gt; &lt;/a&gt; 인스턴스 의 글로벌 레지스트리 .</target>
        </trans-unit>
        <trans-unit id="5618156b292e64c15c0bffbcc031189cd9a6e28a" translate="yes" xml:space="preserve">
          <source>A global registry of &lt;a href=&quot;testability&quot;&gt;&lt;code&gt;Testability&lt;/code&gt;&lt;/a&gt; instances for specific elements.</source>
          <target state="translated">특정 요소에 대한 &lt;a href=&quot;testability&quot;&gt; &lt;code&gt;Testability&lt;/code&gt; &lt;/a&gt; 인스턴스 의 글로벌 레지스트리 .</target>
        </trans-unit>
        <trans-unit id="9d98e2b1ee296918f8bf1519af8e2ae4db7c097d" translate="yes" xml:space="preserve">
          <source>A good example is a service that holds state for its companion component instance. You need a separate instance of the service for each component. Each service has its own work-state, isolated from the service-and-state of a different component. This is called &lt;em&gt;sandboxing&lt;/em&gt; because each service and component instance has its own sandbox to play in.</source>
          <target state="translated">좋은 예는 컴패니언 구성 요소 인스턴스의 상태를 유지하는 서비스입니다. 각 구성 요소마다 별도의 서비스 인스턴스가 필요합니다. 각 서비스에는 다른 구성 요소의 서비스 및 상태와 격리 된 자체 작업 상태가 있습니다. 각 서비스 및 구성 요소 인스턴스에는 자체 샌드 박스가 있으므로 &lt;em&gt;샌드 박싱&lt;/em&gt; 이라고 합니다.</target>
        </trans-unit>
        <trans-unit id="36b9a1d5726b573b8f66a1dbf1ebd460484186d9" translate="yes" xml:space="preserve">
          <source>A good example of usage can be found in the &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt; documentation. Here is the example component that listens for open and close events:</source>
          <target state="translated">사용 예는 &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt; 문서 에서 확인할 수 있습니다 . 다음은 open 및 close 이벤트를 수신하는 구성 요소 예제입니다.</target>
        </trans-unit>
        <trans-unit id="153735462281f1d5fbb0b16f23b1e00c53898bed" translate="yes" xml:space="preserve">
          <source>A good use case for &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; is to inject a service but only if it is available on the current host element. To avoid errors in this situation, combine &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 의 좋은 사용 사례 는 서비스를 현재 호스트 요소에서 사용할 수있는 경우에만 주입하는 것입니다. 이 상황에서 오류가 발생하지 않도록하려면 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a02a9374055e70b55c163943bf2dfb0d3025e311" translate="yes" xml:space="preserve">
          <source>A guard's return value controls the router's behavior:</source>
          <target state="translated">가드의 반환 값은 라우터의 동작을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="52d231725e5228c1fa44d9a29ca224825dcad7cf" translate="yes" xml:space="preserve">
          <source>A guide page might not have its own sample code. It might refer instead to a sample belonging to another page.</source>
          <target state="translated">가이드 페이지에는 자체 샘플 코드가 없을 수 있습니다. 대신 다른 페이지에 속하는 샘플을 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="373d8baae200062d8f1aba679aa04671175e5913" translate="yes" xml:space="preserve">
          <source>A handler for errors thrown by &lt;code&gt;Router.parseUrl(url)&lt;/code&gt; when &lt;code&gt;url&lt;/code&gt; contains an invalid character. The most common case is a &lt;code&gt;%&lt;/code&gt; sign that's not encoded and is not part of a percent encoded sequence.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; 에 유효하지 않은 문자가 포함 된 경우 &lt;code&gt;Router.parseUrl(url)&lt;/code&gt; 발생하는 오류 처리기 가장 일반적인 경우는 인코딩되지 않은 &lt;code&gt;%&lt;/code&gt; 부호이며 퍼센트 인코딩 된 시퀀스의 일부가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="3af5186a3f75b3f8ed4e7d06d1b2de4ace891926" translate="yes" xml:space="preserve">
          <source>A handler for navigation errors in this NgModule.</source>
          <target state="translated">이 NgModule의 네비게이션 에러 핸들러입니다.</target>
        </trans-unit>
        <trans-unit id="d6f5b29fab006347fbe778565dcba19bfc15a39b" translate="yes" xml:space="preserve">
          <source>A handler for receiving observable notifications implements the &lt;code&gt;Observer&lt;/code&gt; interface. It is an object that defines callback methods to handle the three types of notifications that an observable can send:</source>
          <target state="translated">관찰 가능한 알림을 받기위한 처리기는 &lt;code&gt;Observer&lt;/code&gt; 인터페이스를 구현합니다 . Observable이 보낼 수있는 세 가지 유형의 알림을 처리하기 위해 콜백 메소드를 정의하는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="bbd1ea818b8b8cc66b97d6133471859a6b2bcbfe" translate="yes" xml:space="preserve">
          <source>A handler function that cleans up developer-defined data associated with a view. Called when the &lt;code&gt;destroy()&lt;/code&gt; method is invoked.</source>
          <target state="translated">뷰와 관련된 개발자 정의 데이터를 정리하는 핸들러 함수입니다. &lt;code&gt;destroy()&lt;/code&gt; 메소드가 호출 될 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="73b133b2f9b5688dd4cf73515a44784b01f0232f" translate="yes" xml:space="preserve">
          <source>A handler function that cleans up developer-defined data associated with this component. Called when the &lt;code&gt;destroy()&lt;/code&gt; method is invoked.</source>
          <target state="translated">이 컴포넌트와 연관된 개발자 정의 데이터를 정리하는 핸들러 함수입니다. &lt;code&gt;destroy()&lt;/code&gt; 메소드가 호출 될 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4d0a754b9f1caec214fcfa4dc250cb8e06612308" translate="yes" xml:space="preserve">
          <source>A handler function to invoke when the event occurs.</source>
          <target state="translated">이벤트가 발생할 때 호출하는 핸들러 함수입니다.</target>
        </trans-unit>
        <trans-unit id="bdd43cd2d0035ee8e485339a327acee2ff269f8e" translate="yes" xml:space="preserve">
          <source>A harness component (&lt;code&gt;hero-list.component.ts&lt;/code&gt;) for demonstrating the request, using a template that defines two bindings to the pipe requesting the heroes from the &lt;code&gt;heroes.json&lt;/code&gt; file. The second binding chains the &lt;code&gt;fetch&lt;/code&gt; pipe with the built-in &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; to display the same hero data in JSON format.</source>
          <target state="translated">&lt;code&gt;heroes.json&lt;/code&gt; 파일 에서 영웅을 요청하는 파이프에 대한 두 개의 바인딩을 정의하는 템플릿을 사용하여 요청을 보여주기위한 하네스 구성 요소 ( &lt;code&gt;hero-list.component.ts&lt;/code&gt; ) . 두 번째 바인딩 은 기본 제공 &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; 로 &lt;code&gt;fetch&lt;/code&gt; 파이프를 연결 하여 동일한 hero 데이터를 JSON 형식으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b778327d90fee7ae60c6ad90775c93d550967f48" translate="yes" xml:space="preserve">
          <source>A hashtable of changes represented by &lt;a href=&quot;core/simplechange&quot;&gt;&lt;code&gt;SimpleChange&lt;/code&gt;&lt;/a&gt; objects stored at the declared property name they belong to on a Directive or Component. This is the type passed to the &lt;code&gt;ngOnChanges&lt;/code&gt; hook.</source>
          <target state="translated">지시문 또는 컴포넌트에 속하는 선언 된 특성 이름에 저장된 &lt;a href=&quot;core/simplechange&quot;&gt; &lt;code&gt;SimpleChange&lt;/code&gt; &lt;/a&gt; 오브젝트로 표시되는 변경 사항의 해시 테이블입니다 . &lt;code&gt;ngOnChanges&lt;/code&gt; 후크에 전달되는 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="d4e8d3892e372c0fecf2681b537eb943a811ea11" translate="yes" xml:space="preserve">
          <source>A hashtable of changes represented by &lt;a href=&quot;simplechange&quot;&gt;&lt;code&gt;SimpleChange&lt;/code&gt;&lt;/a&gt; objects stored at the declared property name they belong to on a Directive or Component. This is the type passed to the &lt;code&gt;ngOnChanges&lt;/code&gt; hook.</source>
          <target state="translated">지시문 또는 컴포넌트에 속하는 선언 된 특성 이름에 저장된 &lt;a href=&quot;simplechange&quot;&gt; &lt;code&gt;SimpleChange&lt;/code&gt; &lt;/a&gt; 오브젝트로 표시되는 변경 사항의 해시 테이블입니다 . &lt;code&gt;ngOnChanges&lt;/code&gt; 후크에 전달되는 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="23cdcac8cec89bf89402c32764eb9b3e9b275427" translate="yes" xml:space="preserve">
          <source>A helper class that allows an AngularJS component to be used from Angular.</source>
          <target state="translated">Angular에서 AngularJS 구성 요소를 사용할 수 있도록하는 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6c66371275420dbc702a42de7ed21e787a1dc715" translate="yes" xml:space="preserve">
          <source>A helper function for creating an AngularJS module that can bootstrap an Angular module &quot;on-demand&quot; (possibly lazily) when a &lt;a href=&quot;downgradecomponent&quot;&gt;downgraded component&lt;/a&gt; needs to be instantiated.</source>
          <target state="translated">&lt;a href=&quot;downgradecomponent&quot;&gt;다운 그레이드 된 구성 요소&lt;/a&gt; 를 인스턴스화해야 할 때 Angular 모듈을 &quot;요청시&quot;(지연 적으로 지연 될 수 있음) 부트 스트랩 할 수있는 AngularJS 모듈을 작성하는 도우미 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="abc286a32a528d1cb231b557b350c31b9029cca3" translate="yes" xml:space="preserve">
          <source>A helper function for creating an AngularJS module that can bootstrap an Angular module &quot;on-demand&quot; (possibly lazily) when a &lt;a href=&quot;static/downgradecomponent&quot;&gt;downgraded component&lt;/a&gt; needs to be instantiated.</source>
          <target state="translated">&lt;a href=&quot;static/downgradecomponent&quot;&gt;다운 그레이드 된 구성 요소&lt;/a&gt; 를 인스턴스화해야 할 때 Angular 모듈을 &quot;요청시&quot;(지연 적으로 지연 될 수 있음) 부트 스트랩 할 수있는 AngularJS 모듈을 작성하는 도우미 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="6aa3cc78fa143b79bb810e7a95525bcaa700a185" translate="yes" xml:space="preserve">
          <source>A helper function that allows an Angular component to be used from AngularJS.</source>
          <target state="translated">AngularJS에서 Angular 구성 요소를 사용할 수있는 도우미 함수입니다.</target>
        </trans-unit>
        <trans-unit id="0a3a953b7fe469f6cf7067a78cbb755f0880b3a3" translate="yes" xml:space="preserve">
          <source>A helper function to allow an Angular service to be accessible from AngularJS.</source>
          <target state="translated">AngularJS에서 Angular 서비스에 액세스 할 수있는 도우미 기능입니다.</target>
        </trans-unit>
        <trans-unit id="218c171a7af680e691b28ee2d67549dc7cc57f0a" translate="yes" xml:space="preserve">
          <source>A helper function to use when unit testing Angular services that depend upon upgraded AngularJS services.</source>
          <target state="translated">업그레이드 된 AngularJS 서비스에 의존하는 Angular 서비스를 단위 테스트 할 때 사용할 도우미 기능입니다.</target>
        </trans-unit>
        <trans-unit id="1c438535304fc370a33b0d75b83c50e099239580" translate="yes" xml:space="preserve">
          <source>A helper function to use when unit testing AngularJS services that depend upon downgraded Angular services.</source>
          <target state="translated">다운 그레이드 된 Angular 서비스에 의존하는 AngularJS 서비스를 단위 테스트 할 때 사용할 도우미 기능입니다.</target>
        </trans-unit>
        <trans-unit id="4c0681f8b1ca2bf4c01c170aebc0476aee9eab99" translate="yes" xml:space="preserve">
          <source>A helpful or informational point</source>
          <target state="translated">유용한 정보</target>
        </trans-unit>
        <trans-unit id="5769fbb6a2ba3dee049c9e2a7d142735dad4475e" translate="yes" xml:space="preserve">
          <source>A helpful, informational alert.</source>
          <target state="translated">유용한 정보 알림.</target>
        </trans-unit>
        <trans-unit id="dcdb81e86768a1e46d29c2a150ac61709a280f33" translate="yes" xml:space="preserve">
          <source>A hierarchy of injectors at the NgModule and component level can provide different instances of a dependency to their own components and child components.</source>
          <target state="translated">NgModule 및 구성 요소 레벨의 인젝터 계층은 자체 구성 요소 및 하위 구성 요소에 대한 서로 다른 종속 인스턴스를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4366034841ba9f2bd29774d71abf28ba67bd01db" translate="yes" xml:space="preserve">
          <source>A instance of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, which is a fundamental building block for Angular forms. Together with &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;, tracks the value, validation, and status of a form input element.</source>
          <target state="translated">Angular 폼의 기본 구성 요소 인 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스입니다 . &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 와 함께 양식 입력 요소의 값, 유효성 검증 및 상태를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="ad9d81adf54afeac2ac2db2a4dc5e5612946defc" translate="yes" xml:space="preserve">
          <source>A key advantage of a synchronous &lt;code&gt;Observable&lt;/code&gt; is that you can often turn asynchronous processes into synchronous tests.</source>
          <target state="translated">동기식 &lt;code&gt;Observable&lt;/code&gt; 의 주요 장점은 비동기식 프로세스를 동기식 테스트로 전환 할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7ffd5c26435651b0e4c6aae79446e9bccf62a4ab" translate="yes" xml:space="preserve">
          <source>A key value pair. Usually used to represent the key value pairs from a Map or Object.</source>
          <target state="translated">키 값 쌍 일반적으로 맵 또는 객체의 키 값 쌍을 나타내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="35ebaa116f55fb19c13653c5a4874ae1a1f85ab4" translate="yes" xml:space="preserve">
          <source>A key value store that is transferred from the application on the server side to the application on the client side.</source>
          <target state="translated">서버 측 응용 프로그램에서 클라이언트 측 응용 프로그램으로 전송되는 키 값 저장소.</target>
        </trans-unit>
        <trans-unit id="9cf4739e4864a807e655ff6fc1193445efde9673" translate="yes" xml:space="preserve">
          <source>A key, usually a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">키, 보통 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e7e7a6a0768ab93586cd67dd4bff584b1428ac83" translate="yes" xml:space="preserve">
          <source>A key-value style pair associating a CSS property with a value.</source>
          <target state="translated">CSS 속성을 값과 연결하는 키-값 스타일 쌍입니다.</target>
        </trans-unit>
        <trans-unit id="07649eafadeb3470a7ca6d2df2dcba49d7307f17" translate="yes" xml:space="preserve">
          <source>A keyframes sequence inserted in the middle that causes the button to appear to pulsate irregularly over the course of that same 1-second timeframe</source>
          <target state="translated">중간에 삽입 된 키 프레임 시퀀스로, 동일한 1 초 시간 동안 버튼이 불규칙적으로 맥동하는 것처럼 보입니다.</target>
        </trans-unit>
        <trans-unit id="d879a2311ad4242e48672664ec6eea8b5c9c46f0" translate="yes" xml:space="preserve">
          <source>A keyframes sequence inserted in the middle that causes the button to appear to pulsate irregularly over the course of that same 1-second timeframe.</source>
          <target state="translated">중간에 삽입 된 키 프레임 시퀀스로, 동일한 1 초 시간 동안 버튼이 불규칙적으로 깜빡이는 것처럼 보입니다.</target>
        </trans-unit>
        <trans-unit id="dc5af4892de1c162b755ae21ea6a25382487862e" translate="yes" xml:space="preserve">
          <source>A later part of this tutorial, &lt;a href=&quot;https://angular.io/start/start/start-forms&quot;&gt;Use forms for user input&lt;/a&gt;, guides you through accessing this cart service from the view where the user checks out.</source>
          <target state="translated">이 자습서의 뒷부분 인 &lt;a href=&quot;https://angular.io/start/start/start-forms&quot;&gt;사용자 입력에 양식 사용&lt;/a&gt; 에서는 사용자가 체크 아웃하는보기에서이 카트 서비스에 액세스하는 방법을 안내합니다.</target>
        </trans-unit>
        <trans-unit id="ed5250db05f438b41da2ac7f301688eb307df34e" translate="yes" xml:space="preserve">
          <source>A lazy-loaded module has its own injector which is typically a child of the application root injector.</source>
          <target state="translated">지연로드 모듈에는 일반적으로 응용 프로그램 루트 인젝터의 하위 인 자체 인젝터가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ef9f557aece216b8057965c804209b49b3fdec0" translate="yes" xml:space="preserve">
          <source>A lazy-loaded module has its own injector, typically a child of the app root injector. Lazy-loaded services are scoped to the lazy-loaded module's injector. If a lazy-loaded module also provides the &lt;code&gt;UserService&lt;/code&gt;, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root injector. Components in external modules continue to receive the instance provided by their injectors.</source>
          <target state="translated">지연로드 모듈에는 자체 인젝터, 일반적으로 앱 루트 인젝터의 하위가 있습니다. 지연로드 된 서비스는 지연로드 모듈의 인젝터로 범위가 지정됩니다. 지연로드 된 모듈이 &lt;code&gt;UserService&lt;/code&gt; 를 제공하는 경우 해당 모듈의 컨텍스트 내에서 작성된 컴포넌트 (예 : 라우터 탐색)는 루트 인젝터의 인스턴스가 아닌 서비스의 로컬 인스턴스를 가져옵니다. 외부 모듈의 구성 요소는 인젝터가 제공 한 인스턴스를 계속받습니다.</target>
        </trans-unit>
        <trans-unit id="a7e8a8cb53a9e84a9b672a56f58c0fd34b652f66" translate="yes" xml:space="preserve">
          <source>A lazy-loaded routed feature module should not be imported by any module. Doing so would trigger an eager load, defeating the purpose of lazy loading.That means you won&amp;rsquo;t see them mentioned among the &lt;code&gt;AppModule&lt;/code&gt; imports. An eager loaded routed feature module must be imported by another module so that the compiler learns about its components.</source>
          <target state="translated">지연로드 된 라우트 기능 모듈을 모듈로 가져 와서는 안됩니다. 그렇게하면 열렬한로드가 발생하여 지연로드의 목적을 무산하게되므로 &lt;code&gt;AppModule&lt;/code&gt; 가져 오기에서 언급되지 않은 것을 의미합니다 . 컴파일러가 해당 구성 요소에 대해 학습 할 수 있도록 열성적으로로드 된 라우팅 된 기능 모듈을 다른 모듈에서 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="cf38daa709aad4b9820122674b7d4ef886b08249" translate="yes" xml:space="preserve">
          <source>A library can include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that allow it to integrate with the Angular CLI.</source>
          <target state="translated">라이브러리는 Angular CLI와 통합 할 수있는 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; 를 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7d4f03b11868674f6d12d1dbd9a318807b2f605a" translate="yes" xml:space="preserve">
          <source>A library typically includes &lt;em&gt;reusable code&lt;/em&gt; that defines components, services, and other Angular artifacts (pipes, directives, and so on) that you simply import into a project. A library is packaged into an npm package for publishing and sharing, and this package can also include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that provide instructions for generating or transforming code directly in your project, in the same way that the CLI creates a generic skeleton app with &lt;code&gt;ng generate component&lt;/code&gt;. A schematic that is combined with a library can, for example, provide the Angular CLI with the information it needs to generate a particular component defined in that library.</source>
          <target state="translated">라이브러리에는 일반적으로 프로젝트로 가져 오는 컴포넌트, 서비스 및 기타 Angular 아티팩트 (파이프, 지시문 등)를 정의 하는 &lt;em&gt;재사용 가능한 코드&lt;/em&gt; 가 포함됩니다 . 라이브러리는 게시 및 공유를 위해 npm 패키지로 패키지되며,이 패키지에는 CLI가 &lt;code&gt;ng generate component&lt;/code&gt; 를 사용하여 일반 스켈레톤 앱을 생성하는 것과 같은 방식으로 프로젝트에서 직접 코드를 생성 또는 변환하기위한 지침을 제공하는 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; 도 포함 할 수 있습니다 . 예를 들어 라이브러리와 결합 된 회로도는 해당 라이브러리에 정의 된 특정 구성 요소를 생성하는 데 필요한 정보를 Angular CLI에 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed2474d162c0dc4c057f468e012642c002c1cfc0" translate="yes" xml:space="preserve">
          <source>A library typically includes &lt;em&gt;reusable code&lt;/em&gt; that defines components, services, and other Angular artifacts (pipes, directives, and so on) that you simply import into a project. A library is packaged into an npm package for publishing and sharing. This package can also include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that provide instructions for generating or transforming code directly in your project, in the same way that the CLI creates a generic new component with &lt;code&gt;ng generate component&lt;/code&gt;. A schematic that is packaged with a library can, for example, provide the Angular CLI with the information it needs to generate a component that configures and uses a particular feature, or set of features, defined in that library. One example of this is Angular Material's navigation schematic which configures the CDK's &lt;code&gt;BreakpointObserver&lt;/code&gt; and uses it with Material's &lt;code&gt;MatSideNav&lt;/code&gt; and &lt;code&gt;MatToolbar&lt;/code&gt; components.</source>
          <target state="translated">라이브러리에는 일반적으로 단순히 프로젝트로 가져 오는 컴포넌트, 서비스 및 기타 Angular 아티팩트 (파이프, 지시문 등)를 정의 하는 &lt;em&gt;재사용 가능한 코드&lt;/em&gt; 가 포함됩니다 . 라이브러리는 게시 및 공유를 위해 npm 패키지로 패키징됩니다. 이 패키지에는 CLI가 &lt;code&gt;ng generate component&lt;/code&gt; 요소를 사용하여 일반 새 구성 요소를 만드는 것과 동일한 방식으로 프로젝트에서 직접 코드를 생성하거나 변환하기위한 지침을 제공하는 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; 도 포함될 수 있습니다.. 예를 들어 라이브러리와 함께 패키지화 된 회로도는 해당 라이브러리에 정의 된 특정 기능 또는 기능 집합을 구성하고 사용하는 구성 요소를 생성하는 데 필요한 정보를 Angular CLI에 제공 할 수 있습니다. 이에 대한 한 가지 예는 CDK의 &lt;code&gt;BreakpointObserver&lt;/code&gt; 를 구성하고 Material의 &lt;code&gt;MatSideNav&lt;/code&gt; 및 &lt;code&gt;MatToolbar&lt;/code&gt; 구성 요소 와 함께 사용하는 Angular Material의 탐색 회로도입니다 .</target>
        </trans-unit>
        <trans-unit id="596a67fab33e6776bbb8c47b9b4b1a154dc3ae59" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that invokes a custom change-detection function for a directive, in addition to the check performed by the default change-detector.</source>
          <target state="translated">기본 변경 감지기에 의해 수행 된 점검 외에 지시문에 대한 사용자 정의 변경 감지 기능을 호출하는 수명주기 후크.</target>
        </trans-unit>
        <trans-unit id="f5600987ba08ad888ffa7d2d0414b589157e3ce2" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;&lt;a href=&quot;../forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angular가 구성 요소의 뷰를 완전히 초기화 한 후에 호출되는 수명주기 후크. 추가 초기화 작업을 처리하기 위해 &lt;code&gt;&lt;a href=&quot;../forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; 메소드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="74bf55437402dbc91baac4770d54f43c351112cd" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;&lt;a href=&quot;forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angular가 구성 요소의 뷰를 완전히 초기화 한 후에 호출되는 수명주기 후크. 추가 초기화 작업을 처리하기 위해 &lt;code&gt;&lt;a href=&quot;forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; 메소드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="20a90d8865bd1763fece1eee2fb2e3e788e40046" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;ngAfterViewInit()&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angular가 구성 요소의 뷰를 완전히 초기화 한 후에 호출되는 수명주기 후크입니다. 추가 초기화 작업을 처리 하려면 &lt;code&gt;ngAfterViewInit()&lt;/code&gt; 메서드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="02037844ae11c0ddc626fc9788d0fec5a64d460c" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;&lt;a href=&quot;../router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angular가 호출 한 후 수명주기 후크는 지시문의 모든 내용을 완전히 초기화했습니다. 추가 초기화 작업을 처리하기 위해 &lt;code&gt;&lt;a href=&quot;../router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; 메소드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="c9cbef27669e26b8935599a3d2233bbbf3336e8b" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;&lt;a href=&quot;router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angular가 호출 한 후 수명주기 후크는 지시문의 모든 내용을 완전히 초기화했습니다. 추가 초기화 작업을 처리하기 위해 &lt;code&gt;&lt;a href=&quot;router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; 메소드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe878e63ea9efd6a965181e8df9b8b409664b48c" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;ngAfterContentInit()&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angular가 지시문의 모든 내용을 완전히 초기화 한 후에 호출되는 수명주기 후크입니다. 추가 초기화 작업을 처리 하려면 &lt;code&gt;ngAfterContentInit()&lt;/code&gt; 메서드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="a447eef2fad87a38f1f484e3675661d2c2de2258" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. Define an &lt;code&gt;ngOnInit()&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angular가 지시문의 모든 데이터 바인딩 속성을 초기화 한 후에 호출되는 수명주기 후크. 추가 초기화 작업을 처리 할 &lt;code&gt;ngOnInit()&lt;/code&gt; 메서드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="b8e1d5b9cc3d1757bb5eacdaa14e03c4921fb9c9" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after the default change detector has completed checking a component's view for changes.</source>
          <target state="translated">기본 변경 감지기가 구성 요소의 변경 사항 확인을 완료 한 후에 호출되는 수명주기 후크입니다.</target>
        </trans-unit>
        <trans-unit id="d73ca980a113b1ee2561c99c3783810826f94701" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after the default change detector has completed checking all content of a directive.</source>
          <target state="translated">기본 변경 감지기가 지시문의 모든 내용 확인을 완료 한 후에 호출되는 수명주기 후크.</target>
        </trans-unit>
        <trans-unit id="ce797f9362a30ca61eb81eee1f97135dbd0c504f" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called when a directive, pipe, or service is destroyed. Use for any custom cleanup that needs to occur when the instance is destroyed.</source>
          <target state="translated">지시문, 파이프 또는 서비스가 파괴 될 때 호출되는 수명주기 후크입니다. 인스턴스가 파괴 될 때 발생해야하는 사용자 지정 정리에 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0261386256f4b1b6dc2c7184bd9e29445ffda542" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called when any data-bound property of a directive changes. Define an &lt;code&gt;ngOnChanges()&lt;/code&gt; method to handle the changes.</source>
          <target state="translated">지시문의 데이터 바인딩 된 속성이 변경 될 때 호출되는 수명주기 후크입니다. 변경을 처리하기 위해 &lt;code&gt;ngOnChanges()&lt;/code&gt; 메소드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="96881da70e829f0f5ebaad0e2ee7ba44657e85de" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that provides additional developer-defined cleanup functionality for the component.</source>
          <target state="translated">구성 요소에 추가 개발자 정의 정리 기능을 제공하는 라이프 사이클 후크.</target>
        </trans-unit>
        <trans-unit id="36b167505f89a514144de5bba64e918ad3c3801a" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that provides additional developer-defined cleanup functionality for views.</source>
          <target state="translated">뷰에 추가 개발자 정의 정리 기능을 제공하는 수명주기 후크.</target>
        </trans-unit>
        <trans-unit id="b379a7fb75af4991c5a53bf872be9257ffe74642" translate="yes" xml:space="preserve">
          <source>A lifecycle method called before the directive's instance is destroyed. For internal use only.</source>
          <target state="translated">지시문의 인스턴스가 호출되기 전에 호출 된 수명주기 메소드. 내부 전용.</target>
        </trans-unit>
        <trans-unit id="ab00640507fd1fc5d13ec5591a77548bad5848e6" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive is initialized. For internal use only.</source>
          <target state="translated">지시문이 초기화 될 때 호출되는 수명주기 메소드입니다. 내부 전용.</target>
        </trans-unit>
        <trans-unit id="e6a4a685929d3df5e89c8ac2c6f5c345f6d37471" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive's inputs are initialized. For internal use only.</source>
          <target state="translated">지시문의 입력이 초기화 될 때 호출되는 수명주기 메소드입니다. 내부 전용.</target>
        </trans-unit>
        <trans-unit id="f07bd6459b72dc9a3fa7e047a318fc584cf2c0eb" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive's inputs change. For internal use only.</source>
          <target state="translated">지시문의 입력이 변경 될 때 호출되는 수명주기 메소드입니다. 내부 전용.</target>
        </trans-unit>
        <trans-unit id="cea707b23b307b8db10888180bf74c8902fbf4c6" translate="yes" xml:space="preserve">
          <source>A lightweight injection token that is represented as an abstract class.</source>
          <target state="translated">추상 클래스로 표시되는 경량 주입 토큰입니다.</target>
        </trans-unit>
        <trans-unit id="d441fd8385d512e636f45c60eeda7ddc27d1cf23" translate="yes" xml:space="preserve">
          <source>A link parameters array holds the following ingredients for router navigation:</source>
          <target state="translated">링크 매개 변수 배열에는 라우터 탐색을위한 다음과 같은 구성 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="58c6440df7d73cd9db81817568cadd31dfc44944" translate="yes" xml:space="preserve">
          <source>A linter for Angular apps whose rules conform to the Angular &lt;a href=&quot;styleguide&quot;&gt;style guide&lt;/a&gt;.</source>
          <target state="translated">규칙이 Angular &lt;a href=&quot;styleguide&quot;&gt;스타일 가이드를&lt;/a&gt; 준수하는 Angular 앱의 린터입니다 .</target>
        </trans-unit>
        <trans-unit id="25576a240a63ef9260f06f43a3a241146b219362" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;../core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt;s. To use the router in a Worker enabled application you must include these providers when setting up the render thread.</source>
          <target state="translated">&lt;a href=&quot;../core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt; 목록 . 작업자 지원 응용 프로그램에서 라우터를 사용하려면 렌더 스레드를 설정할 때 이러한 공급자를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="dbd88ed75debb2734738dacd6286918848aec59b" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt;s. To use the router in a Worker enabled application you must include these providers when setting up the render thread.</source>
          <target state="translated">&lt;a href=&quot;core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt; 목록 . 작업자 지원 응용 프로그램에서 라우터를 사용하려면 렌더 스레드를 설정할 때 이러한 공급자를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="461fc971b126f7f03af8576b0fa4ea318da95075" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable&lt;/a&gt; classes, (&lt;em&gt;components&lt;/em&gt;, &lt;em&gt;directives&lt;/em&gt;, and &lt;em&gt;pipes&lt;/em&gt;) that &lt;em&gt;belong to this module&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;이 모듈에 속하는 &lt;/em&gt;&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;선언 가능한&lt;/a&gt; 클래스 ( &lt;em&gt;구성 요소&lt;/em&gt; , &lt;em&gt;지시문&lt;/em&gt; 및 &lt;em&gt;파이프&lt;/em&gt; ) 목록입니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="437997829946a8147d613a76d425e66a9f9f384d" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector.</source>
          <target state="translated">인젝터가 해결할 &lt;code&gt;token&lt;/code&gt; 목록 .</target>
        </trans-unit>
        <trans-unit id="6126755f8fa0690fa2b6af2c29ffba01f3417269" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">인젝터가 해결할 &lt;code&gt;token&lt;/code&gt; 목록 . 그런 다음 값 목록이 &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 함수의 인수로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="9d38f61745044a029727c6551e2df969c26ca209" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;useClass&lt;/code&gt; constructor.</source>
          <target state="translated">인젝터가 해결할 &lt;code&gt;token&lt;/code&gt; 목록 . 그런 다음 값 목록이 &lt;code&gt;useClass&lt;/code&gt; 생성자 에 대한 인수로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="5e8a387d3d675f24d46b5ba1a01edf997dfa9c74" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;useFactory&lt;/code&gt; function.</source>
          <target state="translated">인젝터에서 확인할 &lt;code&gt;token&lt;/code&gt; 목록입니다 . 그런 다음 값 목록이 &lt;code&gt;useFactory&lt;/code&gt; 함수 에 대한 인수로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="dc8941f0d9127051ed123a4af396915f26da0c9b" translate="yes" xml:space="preserve">
          <source>A list of CommonJS packages that are allowed to be used without a build time warning.</source>
          <target state="translated">빌드 시간 경고없이 사용할 수있는 CommonJS 패키지 목록입니다.</target>
        </trans-unit>
        <trans-unit id="daa742971c3327dc4f09d733597037dc4c47dd74" translate="yes" xml:space="preserve">
          <source>A list of URL patterns. URLs that match these patterns are cached according to this data group's policy. Only non-mutating requests (GET and HEAD) are cached.</source>
          <target state="translated">URL 패턴 목록. 이러한 패턴과 일치하는 URL은이 데이터 그룹의 정책에 따라 캐시됩니다. 비 변동 요청 (GET 및 HEAD) 만 캐시됩니다.</target>
        </trans-unit>
        <trans-unit id="04d917307865bab1f1de2116c773bcb26a629379" translate="yes" xml:space="preserve">
          <source>A list of common rules for frontend development is documented in the README at &lt;a href=&quot;https://github.com/bazelbuild/rules_nodejs/&quot;&gt;https://github.com/bazelbuild/rules_nodejs/&lt;/a&gt;.</source>
          <target state="translated">프론트 엔드 개발에 대한 공통 규칙 목록은 README ( &lt;a href=&quot;https://github.com/bazelbuild/rules_nodejs/&quot;&gt;https://github.com/bazelbuild/rules_nodejs/&lt;/a&gt; )에 문서화되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19ddc56400717fc21df5b63436fc1e8e5b32cd4d" translate="yes" xml:space="preserve">
          <source>A list of components that are automatically bootstrapped.</source>
          <target state="translated">자동으로 부트 스트랩되는 구성 요소 목록.</target>
        </trans-unit>
        <trans-unit id="171d42258c74d022d702af37e54b0e6f7307feba" translate="yes" xml:space="preserve">
          <source>A list of components that can be dynamically loaded into the view.</source>
          <target state="translated">뷰에 동적으로로드 할 수있는 구성 요소 목록입니다.</target>
        </trans-unit>
        <trans-unit id="7675d0663f37d145a8dac0c39cde405a75fbfa15" translate="yes" xml:space="preserve">
          <source>A list of control names that designates how to move from the current control to the control that should be queried for errors.</source>
          <target state="translated">현재 컨트롤에서 오류를 쿼리해야하는 컨트롤로 이동하는 방법을 지정하는 컨트롤 이름 목록입니다.</target>
        </trans-unit>
        <trans-unit id="037b00399bc82d29e1eb7b74fa9c1904a97de8a9" translate="yes" xml:space="preserve">
          <source>A list of declarations&amp;mdash;&lt;em&gt;component&lt;/em&gt;, &lt;em&gt;directive&lt;/em&gt;, and &lt;em&gt;pipe&lt;/em&gt; classes&amp;mdash;that an importing module can use.</source>
          <target state="translated">가져 오기 모듈이 사용할 수있는 선언 목록 ( &lt;em&gt;component&lt;/em&gt; , &lt;em&gt;지시문&lt;/em&gt; 및 &lt;em&gt;파이프&lt;/em&gt; 클래스).</target>
        </trans-unit>
        <trans-unit id="040d4431be42e331375255c125a4498782b8e650" translate="yes" xml:space="preserve">
          <source>A list of dependency-injection providers.</source>
          <target state="translated">의존성 주입 제공자 목록.</target>
        </trans-unit>
        <trans-unit id="dba7bfe8eac022733a1026f8be32e943c473cfa2" translate="yes" xml:space="preserve">
          <source>A list of modules which should be folded into this module. Folded means it is as if all the imported NgModule's exported properties were declared here.</source>
          <target state="translated">이 모듈로 접어야 할 모듈 목록. 접힘은 가져온 NgModule의 내 보낸 속성이 모두 여기에 선언 된 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="75001e195c1445f429399b1de5c1f73f540ae88c" translate="yes" xml:space="preserve">
          <source>A little more setup triggers the initial data binding and gets references to the navigation links:</source>
          <target state="translated">조금 더 설정하면 초기 데이터 바인딩이 트리거되고 탐색 링크에 대한 참조가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a1b8ef8f70baee99448943fc05106db9e9b9dd37" translate="yes" xml:space="preserve">
          <source>A loader function that can load the routed module asynchronously.</source>
          <target state="translated">라우팅 된 모듈을 비동기 적으로로드 할 수있는 로더 기능.</target>
        </trans-unit>
        <trans-unit id="955b1d9d2579edfd071f8ec5104d74a47b0f744b" translate="yes" xml:space="preserve">
          <source>A locale code for the locale format rules to use.</source>
          <target state="translated">사용할 로캘 형식 규칙의 로캘 코드입니다.</target>
        </trans-unit>
        <trans-unit id="6a302a7e5064c906a79afc49ad5e1e7cc1a4799f" translate="yes" xml:space="preserve">
          <source>A locale code for the locale format rules to use. When not supplied, uses the value of &lt;code&gt;&lt;a href=&quot;../core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;, which is &lt;code&gt;en-US&lt;/code&gt; by default. See &lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;Setting your app locale&lt;/a&gt;.</source>
          <target state="translated">사용할 로캘 형식 규칙의 로캘 코드입니다. 제공하지 않을 경우의 값 사용 &lt;code&gt;&lt;a href=&quot;../core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 입니다, &lt;code&gt;en-US&lt;/code&gt; 기본적으로합니다. &lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;앱 로캘 설정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d6b80afc948d39c1beaa5b663a213d0d655e25c0" translate="yes" xml:space="preserve">
          <source>A locale code, such as &lt;code&gt;fr-FR&lt;/code&gt;.</source>
          <target state="translated">같은 로케일 코드, &lt;code&gt;fr-FR&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55f13cbcad722a8c24df8b8cb4a9cf2ae466e5a8" translate="yes" xml:space="preserve">
          <source>A locale is an identifier (id) that refers to a set of user preferences that tend to be shared within a region of the world, such as country. This document refers to a locale identifier as a &quot;locale&quot; or &quot;locale id&quot;.</source>
          <target state="translated">로캘은 국가와 같은 세계 지역 내에서 공유되는 경향이있는 일련의 사용자 기본 설정을 나타내는 식별자 (ID)입니다. 이 문서는 로캘 식별자를 &quot;로캘&quot;또는 &quot;로캘 ID&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="fa8d01003c5963b62891b79618c389e5eb505c86" translate="yes" xml:space="preserve">
          <source>A long-standing feature request is to add the ability to add directives to host elements. The feature will allow developers to augment their own components with additional behaviors without using inheritance. The project will require substantial effort in terms of the definition of APIs, semantics, and implementation.</source>
          <target state="translated">오랜 기능 요청은 호스트 요소에 지시문을 추가하는 기능을 추가하는 것입니다. 이 기능을 통해 개발자는 상속을 사용하지 않고 추가 동작으로 자신의 구성 요소를 확장 할 수 있습니다. 이 프로젝트는 API 정의, 의미론 및 구현 측면에서 상당한 노력이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="8ead34f42f629cf596c56bee9a9dd423fd7244a6" translate="yes" xml:space="preserve">
          <source>A lookup token associated with a dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;, for use with the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; system.</source>
          <target state="translated">&lt;a href=&quot;glossary#di&quot;&gt;종속성 주입&lt;/a&gt; 시스템 과 함께 사용하기 위해 종속성 &lt;a href=&quot;glossary#provider&quot;&gt;제공자&lt;/a&gt; 와 연관된 조회 토큰 입니다.</target>
        </trans-unit>
        <trans-unit id="cae2a9afdd89956ff08fa75198655ba1a46444dc" translate="yes" xml:space="preserve">
          <source>A major release every 6 months</source>
          <target state="translated">6 개월마다 주요 릴리스</target>
        </trans-unit>
        <trans-unit id="06d3323afdb781bed9079cfcfdee73be399d2d9a" translate="yes" xml:space="preserve">
          <source>A map of DI tokens used to look up data resolvers. See &lt;code&gt;&lt;a href=&quot;resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">데이터 리졸버를 조회하는 데 사용되는 DI 토큰 맵. &lt;code&gt;&lt;a href=&quot;resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c31bf3081c3f1b6360722ce5cdf2ba3f5dd1a977" translate="yes" xml:space="preserve">
          <source>A map that provides access to the required and optional parameters specific to a route. The map supports retrieving a single value with &lt;code&gt;get()&lt;/code&gt; or multiple values with &lt;code&gt;getAll()&lt;/code&gt;.</source>
          <target state="translated">경로와 관련된 필수 및 선택적 매개 변수에 대한 액세스를 제공하는 맵입니다. 맵은 &lt;code&gt;get()&lt;/code&gt; 으로 단일 값을 가져 오거나 &lt;code&gt;getAll()&lt;/code&gt; 여러 값을 검색하는 것을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="e95f51729664a5488e099047c9717e5b096d40fe" translate="yes" xml:space="preserve">
          <source>A maximum total number of results to return from the query. If negative, results are limited from the end of the query list towards the beginning. By default, results are not limited.</source>
          <target state="translated">쿼리에서 반환 할 최대 총 결과 수입니다. 음수이면 결과가 쿼리 목록의 끝에서 시작으로 제한됩니다. 기본적으로 결과는 제한되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f0c63958f79d54f2fc16dbcbfe14c83a9f071add" translate="yes" xml:space="preserve">
          <source>A metadata override object can either add-and-remove elements in metadata properties or completely reset those properties. This example resets the component's &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">메타 데이터 재정의 개체는 메타 데이터 속성의 요소를 추가 및 제거하거나 해당 속성을 완전히 재설정 할 수 있습니다. 이 예에서는 구성 요소의 &lt;code&gt;providers&lt;/code&gt; 메타 데이터 를 재설정합니다 .</target>
        </trans-unit>
        <trans-unit id="8729d4f5019b394ddc337fc6d5ed4029a1e20a17" translate="yes" xml:space="preserve">
          <source>A method that controls navigation to a requested route in a routing application. Guards determine whether a route can be activated or deactivated, and whether a lazy-loaded module can be loaded.</source>
          <target state="translated">라우팅 애플리케이션에서 요청 된 경로에 대한 탐색을 제어하는 ​​방법입니다. 가드는 경로를 활성화 또는 비활성화 할 수 있는지 여부와 지연로드 된 모듈을로드 할 수 있는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="69f0f2d5a2aa3accf83abdff396c8bd191b0d509" translate="yes" xml:space="preserve">
          <source>A microsyntax is translated to the normal binding syntax as follows:</source>
          <target state="translated">마이크로 구문은 다음과 같이 일반 바인딩 구문으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="7130a4e571cb15db8a5b2e26dc8e7e32f1ac10b6" translate="yes" xml:space="preserve">
          <source>A mock implementation of &lt;a href=&quot;../locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">테스트를 통해 시뮬레이션 된 위치 이벤트를 발생시킬 수 있는 &lt;a href=&quot;../locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt; 의 모의 구현 .</target>
        </trans-unit>
        <trans-unit id="95d1322a42a6673477094ecc0b65d1e99ae45df8" translate="yes" xml:space="preserve">
          <source>A mock implementation of &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">테스트를 통해 시뮬레이션 된 위치 이벤트를 발생시킬 수 있는 &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt; 의 모의 구현 .</target>
        </trans-unit>
        <trans-unit id="7d0a0962e5c5198a576fa37cb7c736b87d6d1d71" translate="yes" xml:space="preserve">
          <source>A mock requests that was received and is ready to be answered.</source>
          <target state="translated">수신되었으며 응답 할 준비가 된 모의 요청입니다.</target>
        </trans-unit>
        <trans-unit id="f337bc6018903ffa46e9a382b840059a040e5962" translate="yes" xml:space="preserve">
          <source>A model can be as simple as a &quot;property bag&quot; that holds facts about a thing of application importance. That describes well the &lt;code&gt;Hero&lt;/code&gt; class with its three required fields (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;power&lt;/code&gt;) and one optional field (&lt;code&gt;alterEgo&lt;/code&gt;).</source>
          <target state="translated">모델은 응용 프로그램의 중요 사항에 대한 사실을 담고있는 &quot;속성 가방&quot;처럼 단순 할 수 있습니다. 이것은 3 개의 필수 필드 ( &lt;code&gt;id&lt;/code&gt; , &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;power&lt;/code&gt; )와 하나의 선택적 필드 ( &lt;code&gt;alterEgo&lt;/code&gt; )로 &lt;code&gt;Hero&lt;/code&gt; 클래스를 잘 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="ad0764647ed46ed5061fb6310ba8f8b5049da7f6" translate="yes" xml:space="preserve">
          <source>A module can list another module among its &lt;code&gt;exports&lt;/code&gt;, in which case all of that module's public components, directives, and pipes are exported.</source>
          <target state="translated">모듈은 &lt;code&gt;exports&lt;/code&gt; 중 다른 모듈을 나열 할 수 있으며 ,이 경우 해당 모듈의 모든 공용 구성 요소, 지시문 및 파이프가 내보내집니다.</target>
        </trans-unit>
        <trans-unit id="5f1c5c1da122f4fa01eb3c1494bcf50d1de1c0fe" translate="yes" xml:space="preserve">
          <source>A module that contains the deprecated i18n pipes.</source>
          <target state="translated">더 이상 사용되지 않는 i18n 파이프를 포함하는 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="32c9bd50d59c8005b8e4f899c9f2be6b8662aebc" translate="yes" xml:space="preserve">
          <source>A more complete example with additional options:</source>
          <target state="translated">추가 옵션이 포함 된보다 완벽한 예 :</target>
        </trans-unit>
        <trans-unit id="8d6dc22c64e24056f4ca8f4235696f04db5187ce" translate="yes" xml:space="preserve">
          <source>A multi-project workspace is suitable for an enterprise that uses a single repository and global configuration for all Angular projects (the &quot;monorepo&quot; model). A multi-project workspace also supports library development.</source>
          <target state="translated">다중 프로젝트 작업 공간은 모든 Angular 프로젝트 ( &quot;모노 레포&quot;모델)에 단일 저장소 및 글로벌 구성을 사용하는 기업에 적합합니다. 다중 프로젝트 작업 공간은 라이브러리 개발도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="578c0bb115fcfcf57aae92bdf19077e287b885a7" translate="yes" xml:space="preserve">
          <source>A multi-provider token that represents the array of registered &lt;code&gt;&lt;a href=&quot;http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">등록 된 &lt;code&gt;&lt;a href=&quot;http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 객체 의 배열을 나타내는 다중 공급자 토큰입니다 .</target>
        </trans-unit>
        <trans-unit id="3429f86b90f9abf229de77143f5159ec794aea18" translate="yes" xml:space="preserve">
          <source>A multi-provider token that represents the array of registered &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">등록 된 &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 객체 의 배열을 나타내는 다중 공급자 토큰입니다 .</target>
        </trans-unit>
        <trans-unit id="7906e423263f41a5db0c9d24e8bd036737a8d5a4" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the validation &lt;code&gt;status&lt;/code&gt; of the control recalculates.</source>
          <target state="translated">컨트롤 의 유효성 검사 &lt;code&gt;status&lt;/code&gt; 가 다시 계산 될 때마다 이벤트를 발생시키는 멀티 캐스팅 옵저버 블.</target>
        </trans-unit>
        <trans-unit id="b781b78f56add6ca4e7aa83cd854c5af96b640a9" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the value of the control changes, in the UI or programmatically.</source>
          <target state="translated">UI에서 또는 프로그래밍 방식으로 컨트롤 값이 변경 될 때마다 이벤트를 발생시키는 멀티 캐스팅 옵저버 블.</target>
        </trans-unit>
        <trans-unit id="c57ad119f27d7b13c8173dac98d90680a4b7c61e" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the value of the control changes, in the UI or programmatically. It also emits an event each time you call enable() or disable() without passing along {emitEvent: false} as a function argument.</source>
          <target state="translated">컨트롤 값이 UI에서 또는 프로그래밍 방식으로 변경 될 때마다 이벤트를 생성하는 멀티 캐스팅 관찰 가능 항목입니다. 또한 {emitEvent : false}를 함수 인수로 전달하지 않고 enable () 또는 disable ()을 호출 할 때마다 이벤트를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="c5be72e441e1cbf5309a798f7996e0e22dfeca5c" translate="yes" xml:space="preserve">
          <source>A name or path that uniquely identifies this NgModule in &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt;. If left &lt;code&gt;undefined&lt;/code&gt;, the NgModule is not registered with &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt; 에서이 NgModule을 고유하게 식별하는 이름 또는 경로입니다 . &lt;code&gt;undefined&lt;/code&gt; 경우 NgModule은 &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt; 에 등록되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2d6369ac3a2355e5d07efe81c0f6015ff9a6a7f8" translate="yes" xml:space="preserve">
          <source>A named build target, as specified in the &quot;configurations&quot; section of angular.json. Each named target is accompanied by a configuration of option defaults for that target.</source>
          <target state="translated">angular.json의 &quot;configurations&quot;섹션에 지정된 명명 된 빌드 대상입니다. 명명 된 각 대상에는 해당 대상에 대한 옵션 기본값 구성이 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="b0c4e5ba7f7e92e47ab468585168733f19b2c1d2" translate="yes" xml:space="preserve">
          <source>A named build target, as specified in the &quot;configurations&quot; section of angular.json. Each named target is accompanied by a configuration of option defaults for that target. Setting this explicitly overrides the &quot;--prod&quot; flag</source>
          <target state="translated">angular.json의 &quot;configurations&quot;섹션에 지정된 명명 된 빌드 대상 명명 된 각 대상에는 해당 대상에 대한 옵션 기본값 구성이 수반됩니다. 이것을 설정하면 &quot;--prod&quot;플래그를 명시 적으로 무시합니다</target>
        </trans-unit>
        <trans-unit id="35e09e8f6a0282a4b54c82b2def01ca54b74004d" translate="yes" xml:space="preserve">
          <source>A named builder configuration, defined in the &quot;configurations&quot; section of angular.json. The builder uses the named configuration to run the given target.</source>
          <target state="translated">angular.json의 &quot;configurations&quot;섹션에 정의 된 명명 된 빌더 구성 빌더는 이름 지정된 구성을 사용하여 지정된 대상을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="b239fcc9e5b91abd9680f6c47f5d1819707bebf3" translate="yes" xml:space="preserve">
          <source>A navigation node has the following properties:</source>
          <target state="translated">탐색 노드에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="52a38a1d63f6d03db1e08268e77081ddcedf5a17" translate="yes" xml:space="preserve">
          <source>A nested expression is similar to the previous examples. As in the previous example, there are two translation units. The first one contains the text outside of the nested expression:</source>
          <target state="translated">중첩 된 표현식은 이전 예제와 유사합니다. 이전 예에서와 같이 두 개의 변환 단위가 있습니다. 첫 번째는 중첩 표현식 외부의 텍스트를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="4f9bd18390c8ea037a93c12b58381b661d326629" translate="yes" xml:space="preserve">
          <source>A new injector has no providers. Angular initializes the injectors it creates with a set of preferred providers. You have to configure providers for your own app-specific dependencies.</source>
          <target state="translated">새로운 인젝터에는 제공자가 없습니다. Angular는 선호하는 공급자 세트로 생성 된 인젝터를 초기화합니다. 앱 고유의 종속성에 맞게 공급자를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="9920b70991fc5f7bbd0d91bb6a57f0531af7194a" translate="yes" xml:space="preserve">
          <source>A new workspace, with a root folder named &lt;code&gt;angular-tour-of-heroes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;angular-tour-of-heroes&lt;/code&gt; 라는 루트 폴더가있는 새 작업 공간 .</target>
        </trans-unit>
        <trans-unit id="b7367aaef7bddc8b8c8dc6e00b934abdd2f64d3b" translate="yes" xml:space="preserve">
          <source>A newly generated app contains the source files for a root module, with a root component and template. Each app has a &lt;code&gt;src&lt;/code&gt; folder that contains the logic, data, and assets.</source>
          <target state="translated">새로 생성 된 앱에는 루트 구성 요소 및 템플릿과 함께 루트 모듈의 소스 파일이 포함되어 있습니다. 각 앱에는 논리, 데이터 및 자산이 포함 된 &lt;code&gt;src&lt;/code&gt; 폴더가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d846c1f199b2800f149643f1562a8855aa905f45" translate="yes" xml:space="preserve">
          <source>A nice aspect of this approach is that the component gets clean data values from the view. It no longer requires knowledge of the &lt;code&gt;$event&lt;/code&gt; and its structure.</source>
          <target state="translated">이 방법의 좋은 측면은 구성 요소가 뷰에서 깨끗한 데이터 값을 얻는다는 것입니다. 더 이상 &lt;code&gt;$event&lt;/code&gt; 및 구조에 대한 지식이 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d4f351e8229c9a97c430cacceb09aaa4f1945291" translate="yes" xml:space="preserve">
          <source>A no-op; the route is never stored since this strategy never detaches routes for later re-use.</source>
          <target state="translated">무작정; 이 전략은 나중에 재사용하기 위해 경로를 분리하지 않기 때문에 경로가 저장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f7bea64455863cb7a47256fbe5d769606742d500" translate="yes" xml:space="preserve">
          <source>A non-atomic deployment could result in the Angular service worker having visibility of partially updated content.</source>
          <target state="translated">원자가 아닌 배포로 인해 Angular 서비스 작업자가 부분적으로 업데이트 된 콘텐츠를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5038f56560ea874f8af8e1f15e2b79f948a7daf0" translate="yes" xml:space="preserve">
          <source>A normal Angular application executes in the &lt;em&gt;browser&lt;/em&gt;, rendering pages in the DOM in response to user actions. Angular Universal executes on the &lt;em&gt;server&lt;/em&gt;, generating &lt;em&gt;static&lt;/em&gt; application pages that later get bootstrapped on the client. This means that the application generally renders more quickly, giving users a chance to view the application layout before it becomes fully interactive.</source>
          <target state="translated">일반적인 Angular 응용 프로그램은 &lt;em&gt;브라우저&lt;/em&gt; 에서 실행되어 사용자 작업에 대한 응답으로 DOM에서 페이지를 렌더링합니다. Angular Universal은 &lt;em&gt;서버&lt;/em&gt; 에서 실행되어 나중에 클라이언트에서 부트 스트랩되는 &lt;em&gt;정적&lt;/em&gt; 응용 프로그램 페이지를 생성 합니다. 즉, 응용 프로그램은 일반적으로 더 빨리 렌더링되므로 사용자는 응용 프로그램 레이아웃이 완전히 대화 형이되기 전에 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f4fb46f2d63806c4ee58223f3276c1ec49fc7f1" translate="yes" xml:space="preserve">
          <source>A null player that must be imported to allow disabling of animations.</source>
          <target state="translated">애니메이션 비활성화를 허용하기 위해 가져와야하는 널 플레이어입니다.</target>
        </trans-unit>
        <trans-unit id="fd1b799ff07a117ff10fd1ea467b0942b98cf28f" translate="yes" xml:space="preserve">
          <source>A nullable value that is bound to a directive from a library which did not have &lt;code&gt;strictNullChecks&lt;/code&gt; enabled.</source>
          <target state="translated">&lt;code&gt;strictNullChecks&lt;/code&gt; 가 활성화 되지 않은 라이브러리의 지시문에 바인딩 된 nullable 값입니다 .</target>
        </trans-unit>
        <trans-unit id="89554a3efabf9fb390af7746887f03e36dff835a" translate="yes" xml:space="preserve">
          <source>A number of Angular CLI commands run a complex process on your code, such as linting, building, or testing. The commands use an internal tool called Architect to run &lt;em&gt;CLI builders&lt;/em&gt;, which apply another tool to accomplish the desired task.</source>
          <target state="translated">많은 Angular CLI 명령은 코드에서 린트, 빌드 또는 테스트와 같은 복잡한 프로세스를 실행합니다. 이 명령은 Architect라는 내부 도구를 사용하여 &lt;em&gt;CLI 빌더&lt;/em&gt; 를 실행 합니다.이 도구는 다른 도구를 적용하여 원하는 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="49d58886ff799d00cb5c13d4a1bb03aa1f2d809d" translate="yes" xml:space="preserve">
          <source>A object of key/value pairs for the set of changed inputs.</source>
          <target state="translated">변경된 입력 세트에 대한 키 / 값 쌍의 객체입니다.</target>
        </trans-unit>
        <trans-unit id="4750c9e78af3bfad341001fe2ba5681170c6a43c" translate="yes" xml:space="preserve">
          <source>A page's platform is initialized implicitly when a platform is created via a platform factory (e.g. &lt;a href=&quot;../platform-browser/platformbrowser&quot;&gt;&lt;code&gt;platformBrowser&lt;/code&gt;&lt;/a&gt;), or explicitly by calling the &lt;a href=&quot;createplatform&quot;&gt;&lt;code&gt;createPlatform&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">플랫폼이 플랫폼 팩토리 (예 : &lt;a href=&quot;../platform-browser/platformbrowser&quot;&gt; &lt;code&gt;platformBrowser&lt;/code&gt; &lt;/a&gt; ) 를 통해 작성 되거나 &lt;a href=&quot;createplatform&quot;&gt; &lt;code&gt;createPlatform&lt;/code&gt; &lt;/a&gt; 함수 를 호출하여 명시 적으로 작성되면 페이지의 플랫폼이 내재적으로 초기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="651ec72899d5c2c6d5d6ec570ddbc877591ea92b" translate="yes" xml:space="preserve">
          <source>A parent animation can use the &lt;a href=&quot;../api/animations/query&quot;&gt;&lt;code&gt;query()&lt;/code&gt;&lt;/a&gt; function to collect inner elements located in disabled areas of the HTML template. Those elements can still animate.</source>
          <target state="translated">부모 애니메이션은 &lt;a href=&quot;../api/animations/query&quot;&gt; &lt;code&gt;query()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 HTML 템플릿의 비활성화 된 영역에있는 내부 요소를 수집 할 수 있습니다. 이러한 요소는 여전히 애니메이션을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bf56c14e3173595a144a7896d73be753549c9f6" translate="yes" xml:space="preserve">
          <source>A parent component and its children share a service whose interface enables bi-directional communication &lt;em&gt;within the family&lt;/em&gt;.</source>
          <target state="translated">부모 구성 요소와 그 자식은 인터페이스 &lt;em&gt;가 가족 내에서&lt;/em&gt; 양방향 통신을 가능하게하는 서비스를 공유합니다 .</target>
        </trans-unit>
        <trans-unit id="e39a968c28d7edf3e3a84ccc968736ab545b1b85" translate="yes" xml:space="preserve">
          <source>A parent component cannot use data binding to read child properties or invoke child methods. You can do both by creating a template reference variable for the child element and then reference that variable &lt;em&gt;within the parent template&lt;/em&gt; as seen in the following example.</source>
          <target state="translated">부모 구성 요소는 데이터 바인딩을 사용하여 자식 속성을 읽거나 자식 메서드를 호출 할 수 없습니다. 자식 요소에 대한 템플릿 참조 변수를 생성 한 후 다음 예제와 같이 &lt;em&gt;부모 템플릿 내에서&lt;/em&gt; 해당 변수를 참조하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="466ac96618e709a5938e7d500890ad9390c558cc" translate="yes" xml:space="preserve">
          <source>A partial HTTP response which only includes the status and header data, but no response body.</source>
          <target state="translated">상태 및 헤더 데이터 만 포함하고 응답 본문은 포함하지 않는 부분 HTTP 응답입니다.</target>
        </trans-unit>
        <trans-unit id="8d17248c21e747b7c3ba8050b3294178aab908f1" translate="yes" xml:space="preserve">
          <source>A patch release almost every week</source>
          <target state="translated">거의 매주 패치 릴리스</target>
        </trans-unit>
        <trans-unit id="3b1347adabeefbe94ca0e9afab41079a38ae42ff" translate="yes" xml:space="preserve">
          <source>A patch release and pre-release (&lt;code&gt;next&lt;/code&gt; or &lt;code&gt;rc&lt;/code&gt;) build almost every week</source>
          <target state="translated">거의 매주 패치 릴리스 및 사전 릴리스 ( &lt;code&gt;next&lt;/code&gt; 또는 &lt;code&gt;rc&lt;/code&gt; ) 빌드</target>
        </trans-unit>
        <trans-unit id="58efc28f87e76a25d4064ff09cf311712d722706" translate="yes" xml:space="preserve">
          <source>A percentage of the total animate time at which the style is to be applied.</source>
          <target state="translated">스타일을 적용 할 총 애니메이션 시간의 백분율입니다.</target>
        </trans-unit>
        <trans-unit id="b708ec4a390f4e8a4776d5b2040d86b353d2a768" translate="yes" xml:space="preserve">
          <source>A period-delimited list of control names in one string, e.g. &lt;code&gt;'address.street'&lt;/code&gt;</source>
          <target state="translated">한 문자열로 된 제어 이름의 마침표로 구분 된 목록 (예 : &lt;code&gt;'address.street'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18518b3ff9da4f8e4217369e6b3f79391cbd0b85" translate="yes" xml:space="preserve">
          <source>A pipe can accept any number of optional parameters to fine-tune its output. To add parameters to a pipe, follow the pipe name with a colon ( : ) and then the parameter value (such as &lt;code&gt;currency:'EUR'&lt;/code&gt;). If the pipe accepts multiple parameters, separate the values with colons (such as &lt;code&gt;slice:1:5&lt;/code&gt;)</source>
          <target state="translated">파이프는 출력을 미세 조정하기 위해 여러 개의 선택적 매개 변수를 사용할 수 있습니다. 파이프에 매개 변수를 추가하려면 파이프 이름 뒤에 콜론 (:)을 입력 한 다음 매개 변수 값 (예 : &lt;code&gt;currency:'EUR'&lt;/code&gt; )을 따르십시오 . 파이프가 여러 매개 변수를 허용하는 경우 값을 콜론으로 분리하십시오 (예 : &lt;code&gt;slice:1:5&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="bedbc779498bd591c9a3dec452e89700422b56ad" translate="yes" xml:space="preserve">
          <source>A pipe class has one method, &lt;code&gt;transform&lt;/code&gt;, that manipulates the input value into a transformed output value. The &lt;code&gt;transform&lt;/code&gt; implementation rarely interacts with the DOM. Most pipes have no dependence on Angular other than the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; metadata and an interface.</source>
          <target state="translated">파이프 클래스에는 입력 값을 변환 된 출력 값으로 조작하는 &lt;code&gt;transform&lt;/code&gt; 메소드가 있습니다. &lt;code&gt;transform&lt;/code&gt; 구현은 거의 DOM과 상호 작용하지 않습니다. 대부분의 파이프는 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 메타 데이터 및 인터페이스 이외의 Angular에 의존하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e4ea89ce13888d2b06e69e1b0a34b1371b619c98" translate="yes" xml:space="preserve">
          <source>A pipe class must implement the &lt;code&gt;&lt;a href=&quot;pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface. For example, if the name is &quot;myPipe&quot;, use a template binding expression such as the following:</source>
          <target state="translated">파이프 클래스는 &lt;code&gt;&lt;a href=&quot;pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; 인터페이스를 구현해야합니다 . 예를 들어, 이름이 &quot;myPipe&quot;인 경우 다음과 같은 템플리트 바인딩 표현식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3904967e02839e6509820f8ec95a0def7d2d6acd" translate="yes" xml:space="preserve">
          <source>A pipe is a class decorated with pipe metadata.</source>
          <target state="translated">파이프는 파이프 메타 데이터로 장식 된 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="40549d115c085009897e81004613ce5f7153eebd" translate="yes" xml:space="preserve">
          <source>A pipe must belong to an NgModule in order for it to be available to a template. To make it a member of an NgModule, list it in the &lt;code&gt;declarations&lt;/code&gt; field of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">파이프를 템플릿에 사용하려면 파이프가 NgModule에 속해야합니다. 이를 NgModule의 멤버로 만들려면 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 메타 데이터 의 &lt;code&gt;declarations&lt;/code&gt; 필드에 이를 나열하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f6b8b153194c20c0187ec690e01210761a65ec6" translate="yes" xml:space="preserve">
          <source>A pipe takes in data as input and transforms it to a desired output. In this page, you'll use pipes to transform a component's birthday property into a human-friendly date.</source>
          <target state="translated">파이프는 데이터를 입력으로 받아서 원하는 출력으로 변환합니다. 이 페이지에서는 파이프를 사용하여 구성 요소의 생일 속성을 인간 친화적 인 날짜로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e35f19f9638c9d81846078d6ba2a979a2c496046" translate="yes" xml:space="preserve">
          <source>A policy for when to run guards and resolvers on a route.</source>
          <target state="translated">경로에서 가드 및 리졸버를 실행할시기에 대한 정책입니다.</target>
        </trans-unit>
        <trans-unit id="6322e77ad4a4989fe85f21f6c16add46ed1d428c" translate="yes" xml:space="preserve">
          <source>A position in screen coordinates (a tuple with x and y values) or a function that returns the top offset position.</source>
          <target state="translated">화면 좌표의 위치 (x 및 y 값이있는 튜플) 또는 상단 오프셋 위치를 반환하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="83b235867fe2026bbac0ac32946c8dbf281bfb3f" translate="yes" xml:space="preserve">
          <source>A position in screen coordinates (a tuple with x and y values).</source>
          <target state="translated">화면 좌표에서의 위치 (x 및 y 값을 가진 튜플)</target>
        </trans-unit>
        <trans-unit id="41d8149577449727c17e0704c95f074c91db70d0" translate="yes" xml:space="preserve">
          <source>A potential use for animation callbacks could be to cover for a slow API call, such as a database lookup. For example, you could set up the &lt;strong&gt;InProgress&lt;/strong&gt; button to have its own looping animation where it pulsates or does some other visual motion while the backend system operation finishes.</source>
          <target state="translated">애니메이션 콜백의 잠재적 인 용도는 데이터베이스 조회와 같은 느린 API 호출을 처리하는 것입니다. 예를 들어, 백엔드 시스템 작업이 완료되는 동안 맥동하거나 다른 시각적 동작을 수행하는 자체 반복 애니메이션을 갖도록 &lt;strong&gt;InProgress&lt;/strong&gt; 버튼을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bfb9afe8113d548fbbb315af6723ac817365c83" translate="yes" xml:space="preserve">
          <source>A predefined &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; for the base href to be used with the &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;. The base href is the URL prefix that should be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; 와 함께 사용할 기본 href에 대한 사전 정의 된 &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI 토큰&lt;/a&gt; 입니다 . 기본 href는 URL을 생성하고 인식 할 때 유지해야하는 URL 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="9b55764d3eb54191c263b0e27dc2c991eb21fbc9" translate="yes" xml:space="preserve">
          <source>A predefined &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; for the base href to be used with the &lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;. The base href is the URL prefix that should be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; 와 함께 사용할 기본 href에 대한 사전 정의 된 &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI 토큰&lt;/a&gt; 입니다 . 기본 href는 URL을 생성하고 인식 할 때 유지해야하는 URL 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="557fd2b59c5e0790707cb4c256a2988eead2fed1" translate="yes" xml:space="preserve">
          <source>A predefined set of allowed values.</source>
          <target state="translated">사전 정의 된 허용 값 세트.</target>
        </trans-unit>
        <trans-unit id="ddc74c636d6ca337e8c1942b0e65b5175ae71201" translate="yes" xml:space="preserve">
          <source>A prefix to apply to generated selectors.</source>
          <target state="translated">생성 된 선택기에 적용 할 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="f85bc3007675f205f13a65c0814c7779fddfde0e" translate="yes" xml:space="preserve">
          <source>A process that allows apps to display data values to a user and respond to user actions (such as clicks, touches, and keystrokes).</source>
          <target state="translated">앱이 사용자에게 데이터 값을 표시하고 클릭, 터치 및 키 입력과 같은 사용자 작업에 응답 할 수있는 프로세스입니다.</target>
        </trans-unit>
        <trans-unit id="826b728e8dd71b33ef6978c05ec91c2dd062dc41" translate="yes" xml:space="preserve">
          <source>A process that speeds up application load time by splitting the application into multiple bundles and loading them on demand. For example, dependencies can be lazy loaded as needed&amp;mdash;as opposed to &lt;a href=&quot;glossary#eager-loading&quot;&gt;eager-loaded&lt;/a&gt; modules that are required by the root module and are thus loaded on launch.</source>
          <target state="translated">애플리케이션을 여러 번들로 분할하고 필요에 따라로드하여 애플리케이션로드 시간을 단축하는 프로세스입니다. 예를 들어, 루트 모듈에 필요 &lt;a href=&quot;glossary#eager-loading&quot;&gt;하고 실행시로드&lt;/a&gt; 되는 열성적인 모듈 과 달리 필요에 따라 종속성을 지연로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf702bb551fcbd63146fa58c0443c0e81f431dfb" translate="yes" xml:space="preserve">
          <source>A producer of multiple values, which it pushes to &lt;a href=&quot;glossary#subscriber&quot;&gt;subscribers&lt;/a&gt;. Used for asynchronous event handling throughout Angular. You execute an observable by subscribing to it with its &lt;code&gt;subscribe()&lt;/code&gt; method, passing callbacks for notifications of new values, errors, or completion.</source>
          <target state="translated">여러 값을 생성하여 &lt;a href=&quot;glossary#subscriber&quot;&gt;구독자에게&lt;/a&gt; 푸시합니다 . Angular 전체에서 비동기 이벤트 처리에 사용됩니다. &lt;code&gt;subscribe()&lt;/code&gt; 메소드 를 사용하여 옵저버 블을 구독하여 새 값, 오류 또는 완료 알림에 대한 콜백을 전달 하여 옵저버 블을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="389a0d3db57aebec32082a719d81b168d371de7f" translate="yes" xml:space="preserve">
          <source>A programming language based on JavaScript that is notable for its optional typing system. TypeScript provides compile-time type checking and strong tooling support (such as code completion, refactoring, inline documentation, and intelligent search). Many code editors and IDEs support TypeScript either natively or with plug-ins.</source>
          <target state="translated">선택적 타이핑 시스템으로 유명한 JavaScript 기반 프로그래밍 언어입니다. TypeScript는 컴파일 타임 유형 검사 및 강력한 툴링 지원 (예 : 코드 완성, 리팩토링, 인라인 문서 및 지능형 검색)을 제공합니다. 많은 코드 편집기와 IDE는 기본적으로 또는 플러그인과 함께 TypeScript를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b1c6caa6538c99e13bd629cbb98b70f6d54abb0c" translate="yes" xml:space="preserve">
          <source>A project's &lt;code&gt;src/environments/&lt;/code&gt; folder contains the base configuration file, &lt;code&gt;environment.ts&lt;/code&gt;, which provides a default environment. You can add override defaults for additional environments, such as production and staging, in target-specific configuration files.</source>
          <target state="translated">프로젝트의 &lt;code&gt;src/environments/&lt;/code&gt; 폴더에는 기본 &lt;code&gt;environment.ts&lt;/code&gt; 설정 파일 인 environment.ts 가 포함되어 있습니다. 대상별 구성 파일에서 프로덕션 및 스테이징과 같은 추가 환경에 대한 재정의 기본값을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d819f9cac8ab3585eb715c80934a771ae6e032e" translate="yes" xml:space="preserve">
          <source>A project, as generated by the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt;, contains the set of source files, resources, and configuration files that you need to develop and test the application using the CLI. Projects can also be created with the &lt;code&gt;ng generate application&lt;/code&gt; and &lt;code&gt;ng generate library&lt;/code&gt; commands.</source>
          <target state="translated">&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; 에&lt;/a&gt; 의해 생성 된 프로젝트 에는 CLI를 사용하여 응용 프로그램을 개발하고 테스트하는 데 필요한 소스 파일, 리소스 및 구성 파일 세트가 포함되어 있습니다. &lt;code&gt;ng generate application&lt;/code&gt; 및 &lt;code&gt;ng generate library&lt;/code&gt; 명령을 사용하여 프로젝트를 작성할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="686ac56db71d3e020a58d38031c96ea37deeab84" translate="yes" xml:space="preserve">
          <source>A property &lt;code&gt;ngTemplateGuard_(someInputProperty)&lt;/code&gt; lets you specify a more accurate type for an input expression within the template.</source>
          <target state="translated">&lt;code&gt;ngTemplateGuard_(someInputProperty)&lt;/code&gt; 속성을 사용하면 템플릿 내에서 입력 식에 대해 더 정확한 유형을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fcab1b27f2adf988a0e5f9ae8aa96c046251ada" translate="yes" xml:space="preserve">
          <source>A property name or method call should be the norm, but an occasional Boolean negation, &lt;code&gt;!&lt;/code&gt;, is OK. Otherwise, confine application and business logic to the component, where it is easier to develop and test.</source>
          <target state="translated">프로퍼티 이름이나 메소드 호출은 표준이어야하지만 가끔 불리언 부정이됩니다 &lt;code&gt;!&lt;/code&gt; 괜찮습니다. 그렇지 않으면 개발 및 테스트가 더 쉬운 애플리케이션 및 비즈니스 로직을 구성 요소로 제한하십시오.</target>
        </trans-unit>
        <trans-unit id="303bcae98ffe1ea88fdce30e7edca4a926a46c15" translate="yes" xml:space="preserve">
          <source>A provider can be the service class itself, so that the injector can use &lt;code&gt;new&lt;/code&gt; to create an instance. You might also define more than one class to provide the same service in different ways, and configure different injectors with different providers.</source>
          <target state="translated">제공자는 서비스 클래스 자체가 될 수 있으므로 인젝터는 &lt;code&gt;new&lt;/code&gt; 를 사용하여 인스턴스를 작성할 수 있습니다 . 여러 가지 방법으로 동일한 서비스를 제공하기 위해 둘 이상의 클래스를 정의하고 다른 제공자로 다른 인젝터를 구성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="aee45ccd48ac20faac5b08fd2d4679dd8d03f8d9" translate="yes" xml:space="preserve">
          <source>A provider in the implementation of the lightweight injection token which associates the lightweight injection token with the implementation.</source>
          <target state="translated">경량 주입 토큰을 구현과 연결하는 경량 주입 토큰 구현의 공급자입니다.</target>
        </trans-unit>
        <trans-unit id="9060af48d7b3ea4565ffc43d0325a160797c72c4" translate="yes" xml:space="preserve">
          <source>A provider is an instruction to the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt; system on how to obtain a value for a dependency. Most of the time, these dependencies are services that you create and provide.</source>
          <target state="translated">공급자는 의존성 값을 얻는 방법에 대한 &lt;a href=&quot;dependency-injection&quot;&gt;의존성 주입&lt;/a&gt; 시스템에 대한 지침 입니다. 대부분의 경우 이러한 종속성은 사용자가 만들고 제공하는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="94914bafc3d875ce4fd31120e0f5c1d6b0f53e09" translate="yes" xml:space="preserve">
          <source>A provider tells an injector &lt;em&gt;how to create the service&lt;/em&gt;. You must configure an injector with a provider before that injector can create a service (or provide any other kind of dependency).</source>
          <target state="translated">공급자는 인젝터 &lt;em&gt;에게 서비스 작성 방법을&lt;/em&gt; 알려줍니다 . 인젝터가 서비스를 작성하거나 다른 종류의 종속성을 제공하기 전에 제공자로 인젝터를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="7091a1c3bd9d92d76003ced6042cacb1636cf3ca" translate="yes" xml:space="preserve">
          <source>A provider token for a service that turns on &lt;a href=&quot;testing#automatic-change-detection&quot;&gt;automatic change detection&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing#automatic-change-detection&quot;&gt;자동 변경 감지&lt;/a&gt; 를 설정하는 서비스의 제공자 토큰입니다 .</target>
        </trans-unit>
        <trans-unit id="aff177f3bc659050865683995b13f30d726c3e7c" translate="yes" xml:space="preserve">
          <source>A provider token for a service that turns on &lt;a href=&quot;testing-components-scenarios#automatic-change-detection&quot;&gt;automatic change detection&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing-components-scenarios#automatic-change-detection&quot;&gt;자동 변경 감지&lt;/a&gt; 를 켜는 서비스에 대한 공급자 토큰입니다 .</target>
        </trans-unit>
        <trans-unit id="5e34ff74155cf2ee267810e5a88a88aaecf8f72b" translate="yes" xml:space="preserve">
          <source>A provider token used to configure the location upgrade module.</source>
          <target state="translated">위치 업그레이드 모듈을 구성하는 데 사용되는 제공자 토큰입니다.</target>
        </trans-unit>
        <trans-unit id="35b952b56e93bc63b0bed6c15cf689e5aab13eab" translate="yes" xml:space="preserve">
          <source>A published library typically provides a README or other documentation on how to add that lib to your app. For an example, see &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; docs.</source>
          <target state="translated">게시 된 라이브러리는 일반적으로 해당 라이브러리를 앱에 추가하는 방법에 대한 README 또는 기타 설명서를 제공합니다. 예를 들어, &lt;a href=&quot;https://material.angular.io/&quot;&gt;앵귤러 머티리얼&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="243057217d1daaaa7e7f586b74d5a3196988fe2f" translate="yes" xml:space="preserve">
          <source>A pure pipe must use a pure function, which is one that processes inputs and returns values without side effects. In other words, given the same input, a pure function should always return the same output.</source>
          <target state="translated">순수 파이프는 입력을 처리하고 부작용없이 값을 반환하는 순수 함수를 사용해야합니다. 즉, 동일한 입력이 주어지면 순수 함수는 항상 동일한 출력을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="0781fc1f661b3bd269d0c78ccd7683277722e5fa" translate="yes" xml:space="preserve">
          <source>A pure pipe uses pure functions. Pure functions process inputs and return values without detectable side effects. Given the same input, they should always return the same output.</source>
          <target state="translated">순수한 파이프는 순수한 기능을 사용합니다. 순수한 함수는 감지 가능한 부작용없이 입력 및 반환 값을 처리합니다. 동일한 입력이 주어지면 항상 동일한 출력을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="ea642d50993a11f50b36f50c416de1e3afc29587" translate="yes" xml:space="preserve">
          <source>A query options object.</source>
          <target state="translated">쿼리 옵션 개체</target>
        </trans-unit>
        <trans-unit id="875f4a87e92836850f7d0d164c10b38034b2b733" translate="yes" xml:space="preserve">
          <source>A quick look at the &lt;code&gt;DashboardComponent&lt;/code&gt; constructor discourages the first approach:</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; 생성자를 간략하게 살펴보면 첫 번째 접근 방식을 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eac44c88992039f4fb91e0feae3853c7a87290d8" translate="yes" xml:space="preserve">
          <source>A re-usable component might be a child of multiple components. Imagine a component for rendering breaking news about a financial instrument. For business reasons, this news component makes frequent calls directly into its parent instrument as changing market data streams by.</source>
          <target state="translated">재사용 가능한 구성 요소는 여러 구성 요소의 자식 일 수 있습니다. 금융 상품에 대한 속보를 렌더링하는 구성 요소를 상상해보십시오. 비즈니스상의 이유로,이 뉴스 구성 요소는 시장 데이터 스트림의 변화에 ​​따라 자주 상위 상품을 직접 호출합니다.</target>
        </trans-unit>
        <trans-unit id="29188c6ddf29a94eeba4295076c9a342a62de5e6" translate="yes" xml:space="preserve">
          <source>A real hero is more than a name.</source>
          <target state="translated">진정한 영웅은 단순한 이름 이상입니다.</target>
        </trans-unit>
        <trans-unit id="14947a138fd23361ed204ab70416c15a2a54e6c1" translate="yes" xml:space="preserve">
          <source>A redirect route requires a &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; property to tell the router how to match a URL to the path of a route. The router throws an error if you don't. In this app, the router should select the route to the &lt;code&gt;HeroListComponent&lt;/code&gt; only when the &lt;em&gt;entire URL&lt;/em&gt; matches &lt;code&gt;''&lt;/code&gt;, so set the &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value to &lt;code&gt;'&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt;.</source>
          <target state="translated">경로 재 지정 경로에는 라우터에게 URL을 경로 경로와 일치시키는 방법을 알려주기 위해 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 특성이 필요 합니다. 그렇지 않으면 라우터에서 오류가 발생합니다. 이 앱에서 라우터는 &lt;em&gt;전체 URL이 &lt;/em&gt; &lt;code&gt;''&lt;/code&gt; 과 일치 할 때만 &lt;code&gt;HeroListComponent&lt;/code&gt; 에 대한 경로를 선택해야 하므로 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 값을 &lt;code&gt;'&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; &lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt; ' 로 설정하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="322068dffc0ade1ff151c1e8cdab19f338314894" translate="yes" xml:space="preserve">
          <source>A redirect route requires a &lt;code&gt;pathMatch&lt;/code&gt; property to tell the router how to match a URL to the path of a route. In this app, the router should select the route to the &lt;code&gt;HeroListComponent&lt;/code&gt; only when the &lt;em&gt;entire URL&lt;/em&gt; matches &lt;code&gt;''&lt;/code&gt;, so set the &lt;code&gt;pathMatch&lt;/code&gt; value to &lt;code&gt;'full'&lt;/code&gt;.</source>
          <target state="translated">리디렉션 경로에는 URL을 경로 경로와 일치시키는 방법을 라우터에 알리기 위해 &lt;code&gt;pathMatch&lt;/code&gt; 속성이 필요 합니다. 이 앱에서 라우터는 &lt;em&gt;전체 URL이 &lt;/em&gt; &lt;code&gt;''&lt;/code&gt; 와 일치 할 때만 &lt;code&gt;HeroListComponent&lt;/code&gt; 에 대한 경로를 선택해야 하므로 &lt;code&gt;pathMatch&lt;/code&gt; 값을 &lt;code&gt;'full'&lt;/code&gt; 로 설정합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="36f7f7b1b6c1f43c049a2ebdb10a9f819ec461db" translate="yes" xml:space="preserve">
          <source>A reference to an Angular application running on a page.</source>
          <target state="translated">페이지에서 실행되는 Angular 응용 프로그램에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="401eb455bc6f4c776b2dccfc14710b298a225039" translate="yes" xml:space="preserve">
          <source>A reference to the template that is stamped out for each item in the iterable.</source>
          <target state="translated">iterable의 각 항목에 대해 스탬프 처리 된 템플리트에 대한 참조입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
