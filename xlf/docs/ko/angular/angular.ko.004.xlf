<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="5a24dc890372e521028f35c106ed2f1cb927ba31" translate="yes" xml:space="preserve">
          <source>A reference to the underlying control.</source>
          <target state="translated">기본 컨트롤에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="7996d7994050db578a326532c3dbd2894c0adf11" translate="yes" xml:space="preserve">
          <source>A regular expression to be used as is to test the values, or a string. If a string is passed, the &lt;code&gt;^&lt;/code&gt; character is prepended and the &lt;code&gt;$&lt;/code&gt; character is appended to the provided string (if not already present), and the resulting regular expression is used to test the values.</source>
          <target state="translated">값 또는 문자열을 테스트하는 데 사용되는 정규식입니다. 문자열이 전달되면 &lt;code&gt;^&lt;/code&gt; 문자가 앞에 붙고 &lt;code&gt;$&lt;/code&gt; 문자가 제공된 문자열에 추가되고 (아직없는 경우) 결과 정규식이 값을 테스트하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a73fdf09e331223ac46a9c078644a2fd7fcd9c66" translate="yes" xml:space="preserve">
          <source>A repository of different Map diffing strategies used by NgClass, NgStyle, and others.</source>
          <target state="translated">NgClass, NgStyle 등에서 사용되는 다양한 맵 확산 전략의 저장소입니다.</target>
        </trans-unit>
        <trans-unit id="cb8eb73672378bd21acb306ae11973b78a2d8b3b" translate="yes" xml:space="preserve">
          <source>A repository of different iterable diffing strategies used by NgFor, NgClass, and others.</source>
          <target state="translated">NgFor, NgClass 등이 사용하는 서로 다른 반복 가능한 diffing 전략의 저장소입니다.</target>
        </trans-unit>
        <trans-unit id="27483211b06ffa402c47221f575c346e77ca8f97" translate="yes" xml:space="preserve">
          <source>A request is rejected if the user denies permission, or if the browser blocks or does not support the Push API or ServiceWorkers. Check &lt;code&gt;&lt;a href=&quot;swpush#isEnabled&quot;&gt;SwPush.isEnabled&lt;/a&gt;&lt;/code&gt; to confirm status.</source>
          <target state="translated">사용자가 권한을 거부하거나 브라우저가 Push API 또는 ServiceWorkers를 차단하거나 지원하지 않으면 요청이 거부됩니다. &lt;code&gt;&lt;a href=&quot;swpush#isEnabled&quot;&gt;SwPush.isEnabled&lt;/a&gt;&lt;/code&gt; 를 확인하여 상태를 확인 하십시오 .</target>
        </trans-unit>
        <trans-unit id="19b207feff8dd38f63473783387846e4b8f4694c" translate="yes" xml:space="preserve">
          <source>A resolution is a process of flattening multiple nested arrays and converting individual providers into an array of &lt;code&gt;&lt;a href=&quot;resolvedreflectiveprovider&quot;&gt;ResolvedReflectiveProvider&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">해결은 여러 개의 중첩 된 배열을 병합하고 개별 공급자를 &lt;code&gt;&lt;a href=&quot;resolvedreflectiveprovider&quot;&gt;ResolvedReflectiveProvider&lt;/a&gt;&lt;/code&gt; 의 배열로 변환하는 프로세스입니다 .</target>
        </trans-unit>
        <trans-unit id="a1c3c3d085e282c76f310bb036a7eac8d0f84e78" translate="yes" xml:space="preserve">
          <source>A response that represents an error or failure, either from a non-successful HTTP status, an error while executing the request, or some other failure which occurred during the parsing of the response.</source>
          <target state="translated">실패한 HTTP 상태, 요청 실행 중 오류 또는 응답 구문 분석 중 발생한 다른 오류로 인한 오류 또는 실패를 나타내는 응답입니다.</target>
        </trans-unit>
        <trans-unit id="f70c3da48414bf75c125dc101e455797d04f0001" translate="yes" xml:space="preserve">
          <source>A reusable animation definition.</source>
          <target state="translated">재사용 가능한 애니메이션 정의.</target>
        </trans-unit>
        <trans-unit id="cdabf3135a889573b4d620fff18335445de9cd9e" translate="yes" xml:space="preserve">
          <source>A revised version of the &lt;code&gt;CachingInterceptor&lt;/code&gt; optionally returns an &lt;em&gt;observable&lt;/em&gt; that immediately emits the cached response, sends the request to the NPM web API anyway, and emits again later with the updated search results.</source>
          <target state="translated">&lt;code&gt;CachingInterceptor&lt;/code&gt; 의 수정 된 버전은 선택적으로 캐시 된 응답을 즉시 내보내고, 요청을 NPM 웹 API로 보낸 다음 업데이트 된 검색 결과와 함께 나중에 다시 방출 하는 &lt;em&gt;Observable&lt;/em&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6a4bbf0b3ca5dd008081ab260dca5b95fc3853e3" translate="yes" xml:space="preserve">
          <source>A route associates one or more URL paths with a component.</source>
          <target state="translated">경로는 하나 이상의 URL 경로를 구성 요소와 연관시킵니다.</target>
        </trans-unit>
        <trans-unit id="74a035a1a0df73830bf78e88fdca0c0d30db6779" translate="yes" xml:space="preserve">
          <source>A route change activates the animation trigger, and a transition matching the state change is applied.</source>
          <target state="translated">경로 변경은 애니메이션 트리거를 활성화하고 상태 변경과 일치하는 전환이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="02faca1a4af3e4bf1d6f174e154de661a4824117" translate="yes" xml:space="preserve">
          <source>A route definition is a JavaScript object. Each route typically has two properties. The first property, &lt;code&gt;path&lt;/code&gt;, is a string that specifies the URL path for the route. The second property, &lt;code&gt;component&lt;/code&gt;, is a string that specifies what component your application should display for that path.</source>
          <target state="translated">경로 정의는 JavaScript 객체입니다. 각 경로에는 일반적으로 두 가지 속성이 있습니다. 첫 번째 속성 인 &lt;code&gt;path&lt;/code&gt; 는 경로의 URL 경로를 지정하는 문자열입니다. 두 번째 속성 인 &lt;code&gt;component&lt;/code&gt; 는 애플리케이션이 해당 경로에 대해 표시해야하는 구성 요소를 지정하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="6c64bf97011375151692d4c68dff9ae5d5309663" translate="yes" xml:space="preserve">
          <source>A route definition refers to a component by its type with &lt;code&gt;component: CustomerListComponent&lt;/code&gt;.</source>
          <target state="translated">경로 정의는 유형이 &lt;code&gt;component: CustomerListComponent&lt;/code&gt; 유형으로 구성 요소를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="fdb7363555351c4639aac314739325b47288b9bf" translate="yes" xml:space="preserve">
          <source>A routed Angular application has one singleton instance of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service. When the browser's URL changes, that router looks for a corresponding &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; from which it can determine the component to display.</source>
          <target state="translated">라우팅 된 Angular 애플리케이션에는 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서비스 의 단일 인스턴스가 하나 있습니다. 브라우저의 URL이 변경되면 해당 라우터는 표시 할 구성 요소를 결정할 수 있는 해당 &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="7e86358e50f0c60115516b0afea462258244b6af" translate="yes" xml:space="preserve">
          <source>A routed Angular application has one singleton instance of the &lt;em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/em&gt; service. When the browser's URL changes, that router looks for a corresponding &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; from which it can determine the component to display.</source>
          <target state="translated">라우팅 된 Angular 응용 프로그램에는 &lt;em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/em&gt; 서비스 의 단일 인스턴스가 하나 있습니다. 브라우저의 URL이 변경되면 해당 라우터는 표시 할 구성 요소를 결정할 수 있는 해당 &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="02ec1f1924ffef864dec5f034d699d0e2085b2db" translate="yes" xml:space="preserve">
          <source>A routed application should support &quot;deep links&quot;. A &lt;em&gt;deep link&lt;/em&gt; is a URL that specifies a path to a component inside the app. For example, &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; is a &lt;em&gt;deep link&lt;/em&gt; to the hero detail page that displays the hero with &lt;code&gt;id: 42&lt;/code&gt;.</source>
          <target state="translated">라우팅 된 응용 프로그램은 &quot;딥 링크&quot;를 지원해야합니다. &lt;em&gt;딥 링크는&lt;/em&gt; 응용 프로그램 내부의 구성 요소에 대한 경로를 지정하는 URL입니다. 예를 들어, &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; 는 영웅 세부 정보 페이지에 대한 &lt;em&gt;딥 링크&lt;/em&gt; 로, &lt;code&gt;id: 42&lt;/code&gt; 영웅을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="4d567e1e3b972dc05d228702a7e27b4c14034add" translate="yes" xml:space="preserve">
          <source>A routed entry component</source>
          <target state="translated">라우팅 된 항목 구성 요소</target>
        </trans-unit>
        <trans-unit id="9a4649536ab16482113647620adfcb1f64a30922" translate="yes" xml:space="preserve">
          <source>A router has no routes until you configure it. The following example creates five route definitions, configures the router via the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method, and adds the result to the &lt;code&gt;AppModule&lt;/code&gt;'s &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">라우터는 구성 할 때까지 경로가 없습니다. 다음 예제는 5 개의 경로 정의를 만들고 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 메서드 를 통해 라우터를 구성한 다음 결과를 &lt;code&gt;AppModule&lt;/code&gt; 의 &lt;code&gt;imports&lt;/code&gt; 배열에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="8d43f0ef0ca2078e73bd486696685c5d5ef229cf" translate="yes" xml:space="preserve">
          <source>A router must be configured with a list of route definitions.</source>
          <target state="translated">라우터는 경로 정의 목록으로 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="6ee77f9045090764d9e6cd31e18052dea0804472" translate="yes" xml:space="preserve">
          <source>A router needs configuration whether it's the AngularJS or Angular or any other router.</source>
          <target state="translated">라우터는 AngularJS이든 Angular이든 다른 라우터이든 구성이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="742ba5028666dfbd7b24f76943ebc6c0e1233cfe" translate="yes" xml:space="preserve">
          <source>A router outlet emits an activate event when a new component is instantiated, and a deactivate event when a component is destroyed.</source>
          <target state="translated">새 구성 요소가 인스턴스화되면 라우터 콘센트에서 활성화 이벤트가 발생하고 구성 요소가 손상되면 비활성화 이벤트가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4d893f2f2f77e09f89f1c1ee2b15d6d25775c766" translate="yes" xml:space="preserve">
          <source>A routing module does not have its own declarations. Components, directives, and pipes are the responsibility of the feature module, not the routing module.</source>
          <target state="translated">라우팅 모듈에는 자체 선언이 없습니다. 구성 요소, 지시문 및 파이프는 라우팅 모듈이 아닌 기능 모듈의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="2a705a3baf3eb0fb5440338939869bf36ca0d6e2" translate="yes" xml:space="preserve">
          <source>A routing module provides routing configuration for another module and separates routing concerns from its companion module.</source>
          <target state="translated">라우팅 모듈은 다른 모듈에 대한 라우팅 구성을 제공하고 해당 모듈과 라우팅 문제를 분리합니다.</target>
        </trans-unit>
        <trans-unit id="9e0ec53544bcd207c27bdd63342d736233f25672" translate="yes" xml:space="preserve">
          <source>A routing module re-exports the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; as a convenience so that components of the companion module have access to router directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">라우팅 모듈 은 편의상 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 을 다시 내보내 므로 컴패니언 모듈의 구성 요소는 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 과 같은 라우터 지시문에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f1ba848458b2e10deffe2484e76ce0090f12dc2" translate="yes" xml:space="preserve">
          <source>A routing module should only be imported by its companion module.</source>
          <target state="translated">라우팅 모듈은 컴패니언 모듈에서만 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="6e4a38ab376f65d6f384d839be45273996d732c6" translate="yes" xml:space="preserve">
          <source>A routing module typically does the following:</source>
          <target state="translated">라우팅 모듈은 일반적으로 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="85a2bfb58cc0e40066d8cc4ec92ade33012df2f1" translate="yes" xml:space="preserve">
          <source>A rule can specify a period as time range, or as a single time value.</source>
          <target state="translated">규칙은 기간을 시간 범위 또는 단일 시간 값으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1dbf2cce68e5549ab5fc8b6799a2ca90688f851e" translate="yes" xml:space="preserve">
          <source>A running application continues to run with the same version of all files. It does not suddenly start receiving cached files from a newer version, which are likely incompatible.</source>
          <target state="translated">실행중인 응용 프로그램은 모든 파일의 동일한 버전으로 계속 실행됩니다. 호환되지 않는 최신 버전에서 캐시 된 파일을 갑자기받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="499a4b6365d83f0f45eef66065c407c6f63a53b0" translate="yes" xml:space="preserve">
          <source>A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code. A schematic defines &lt;a href=&quot;glossary#rule&quot;&gt;rules&lt;/a&gt; that operate on a virtual file system called a &lt;a href=&quot;glossary#file-tree&quot;&gt;tree&lt;/a&gt;.</source>
          <target state="translated">파일과 코드를 생성, 수정, 리팩토링 또는 이동하여 프로그래밍 프로젝트를 생성하거나 변환하는 방법을 정의하는 스캐 폴딩 라이브러리. 회로도는 &lt;a href=&quot;glossary#file-tree&quot;&gt;트리&lt;/a&gt; 라고하는 가상 파일 시스템에서 작동하는 &lt;a href=&quot;glossary#rule&quot;&gt;규칙&lt;/a&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="fa44d1fe648c4b623410d8e081b47f8c6bc1115b" translate="yes" xml:space="preserve">
          <source>A schema definition associated with an NgModule.</source>
          <target state="translated">NgModule과 연관된 스키마 정의.</target>
        </trans-unit>
        <trans-unit id="28324b5ab9a75918825701e83102b3643e84e681" translate="yes" xml:space="preserve">
          <source>A schematic for the &lt;code&gt;ng add&lt;/code&gt; command can enhance the initial installation process for your users. The following steps will define this type of schematic.</source>
          <target state="translated">&lt;code&gt;ng add&lt;/code&gt; 명령 의 회로도는 사용자의 초기 설치 프로세스를 향상시킬 수 있습니다. 다음 단계는 이러한 유형의 회로도를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="00274013a103be16cdc79882529e8b292f53bb4e" translate="yes" xml:space="preserve">
          <source>A schematic is a template-based code generator that supports complex logic. It is a set of instructions for transforming a software project by generating or modifying code. Schematics are packaged into &lt;a href=&quot;glossary#collection&quot;&gt;collections&lt;/a&gt; and installed with npm.</source>
          <target state="translated">회로도는 복잡한 논리를 지원하는 템플릿 기반 코드 생성기입니다. 코드를 생성하거나 수정하여 소프트웨어 프로젝트를 변환하기위한 지침 세트입니다. 회로도는 &lt;a href=&quot;glossary#collection&quot;&gt;모음&lt;/a&gt; 으로 패키지되어 npm과 함께 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="7927b3f04761399102a081776a50fb3eb8e1643e" translate="yes" xml:space="preserve">
          <source>A scope function for the Web Tracing Framework (WTF).</source>
          <target state="translated">WTF (Web Tracing Framework)의 범위 기능.</target>
        </trans-unit>
        <trans-unit id="20497a1af5a153905fddec72f2f68e3bea176254" translate="yes" xml:space="preserve">
          <source>A search value reaches the service only if it's a new value and the user has stopped typing.</source>
          <target state="translated">검색 값은 새로운 값이고 사용자가 입력을 중지 한 경우에만 서비스에 도달합니다.</target>
        </trans-unit>
        <trans-unit id="8928b57af9034cfc3113833a8cc9214728c19f78" translate="yes" xml:space="preserve">
          <source>A second &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; function decorates the &lt;code&gt;loggerService&lt;/code&gt; constructor property. The only &lt;code&gt;LoggerService&lt;/code&gt; instance in the app is provided at the &lt;code&gt;AppComponent&lt;/code&gt; level. The host &lt;code&gt;HeroBioComponent&lt;/code&gt; doesn't have its own &lt;code&gt;LoggerService&lt;/code&gt; provider.</source>
          <target state="translated">두 번째 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 함수는 &lt;code&gt;loggerService&lt;/code&gt; 생성자 속성을 장식합니다 . 앱 의 유일한 &lt;code&gt;LoggerService&lt;/code&gt; 인스턴스는 &lt;code&gt;AppComponent&lt;/code&gt; 수준 에서 제공 됩니다. 호스트 &lt;code&gt;HeroBioComponent&lt;/code&gt; 에는 자체 &lt;code&gt;LoggerService&lt;/code&gt; 공급자 가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b2209c9173e3f8d50fb398db9c74e9279308b293" translate="yes" xml:space="preserve">
          <source>A second function called &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; lets you run those same animations one after the other. Within &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, the animation steps consist of either &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function calls.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 라는 두 번째 함수를 사용하면 동일한 애니메이션을 차례로 실행할 수 있습니다. &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 내 에서 애니메이션 단계는 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 함수 호출로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="db03cff65aff6394642f3e77b7441a26efb12e0d" translate="yes" xml:space="preserve">
          <source>A secondary section heading is related to a main heading and &lt;em&gt;falls textually within&lt;/em&gt; the bounds of that main heading.</source>
          <target state="translated">보조 섹션 제목은 기본 제목과 관련이 있으며 &lt;em&gt;텍스트&lt;/em&gt; 는 기본 제목 의 범위 &lt;em&gt;내에 속합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="897556bbdf26acf6542faa243ff0f6beeec0c43b" translate="yes" xml:space="preserve">
          <source>A separate NgModule that provides the necessary service providers and directives for navigating through application views.</source>
          <target state="translated">응용 프로그램보기를 탐색하는 데 필요한 서비스 공급자 및 지시문을 제공하는 별도의 NgModule입니다.</target>
        </trans-unit>
        <trans-unit id="4f7e1f9d4cced71dda1ebf170c0e8e0b521f3d4a" translate="yes" xml:space="preserve">
          <source>A serializable version of the event from &lt;code&gt;onPopState&lt;/code&gt; or &lt;code&gt;onHashChange&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;onPopState&lt;/code&gt; 또는 &lt;code&gt;onHashChange&lt;/code&gt; 에서 직렬화 가능한 이벤트 버전</target>
        </trans-unit>
        <trans-unit id="bd6c7f3e070927bbb3c135cde9d32a2a4f79fad1" translate="yes" xml:space="preserve">
          <source>A service for managing HTML &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">HTML &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 태그 를 관리하는 서비스입니다 .</target>
        </trans-unit>
        <trans-unit id="186e30ff0aea0409a1060146d23210d1933e91c6" translate="yes" xml:space="preserve">
          <source>A service spy, such as the &lt;code&gt;qetQuote()&lt;/code&gt; spy of the fake &lt;code&gt;TwainService&lt;/code&gt;, can give you that information and make assertions about the state of the view.</source>
          <target state="translated">가짜 &lt;code&gt;TwainService&lt;/code&gt; 의 &lt;code&gt;qetQuote()&lt;/code&gt; 스파이 와 같은 서비스 스파이는 해당 정보를 제공하고 뷰 상태에 대한 어설 션을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70670cbdf35759376fdc687d58086435d3c7a0a3" translate="yes" xml:space="preserve">
          <source>A service that applications can use to interact with a browser's URL.</source>
          <target state="translated">애플리케이션이 브라우저의 URL과 상호 작용하는 데 사용할 수있는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="b658296c6fe9cdddfcd4f6dfb972ad4690b4f6cc" translate="yes" xml:space="preserve">
          <source>A service that can be used to get and add meta tags.</source>
          <target state="translated">메타 태그를 가져오고 추가하는 데 사용할 수있는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="b2f6ff3d8a0d1fc326174778c442afc0d5fc6655" translate="yes" xml:space="preserve">
          <source>A service that can be used to get and set the title of a current HTML document.</source>
          <target state="translated">현재 HTML 문서의 제목을 가져오고 설정하는 데 사용할 수있는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="3a48ad5f23dc32cb9b39e0864173605539fa750b" translate="yes" xml:space="preserve">
          <source>A service that is provided to each route component that contains route specific information such as route parameters, static data, resolve data, global query params, and the global fragment.</source>
          <target state="translated">경로 매개 변수, 정적 데이터, 확인 데이터, 전역 쿼리 매개 변수 및 전역 조각과 같은 경로 관련 정보가 포함 된 각 경로 구성 요소에 제공되는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="7def59e5c57b6b6eebfe3444204178853e21593f" translate="yes" xml:space="preserve">
          <source>A service that provides navigation among views and URL manipulation capabilities.</source>
          <target state="translated">보기 간 탐색 및 URL 조작 기능을 제공하는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="a65ba35ee354bb8dcdf3d93a99e7ba722d67bb4b" translate="yes" xml:space="preserve">
          <source>A service that provides navigation and URL manipulation capabilities.</source>
          <target state="translated">탐색 및 URL 조작 기능을 제공하는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="165b76769ff8ffcdbb0dac7d8565023cf996eb79" translate="yes" xml:space="preserve">
          <source>A set of CSS style properties.</source>
          <target state="translated">CSS 스타일 속성 집합입니다.</target>
        </trans-unit>
        <trans-unit id="b41c5694278624138f799e74044ab8ef5c4a41ec" translate="yes" xml:space="preserve">
          <source>A set of CSS styles associated with this state, created using the &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function. This set of styles persists on the element once the state has been reached.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 만든이 상태와 관련된 CSS 스타일 세트입니다 . 이 스타일 세트는 상태에 도달하면 요소에 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="7299f56aeec68cc3f32c42d11d47f588e1b76737" translate="yes" xml:space="preserve">
          <source>A set of CSS styles or HTML styles associated with an animation state. The value can be any of the following:</source>
          <target state="translated">애니메이션 상태와 관련된 CSS 스타일 또는 HTML 스타일 세트입니다. 값은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aed6bba5fddfaceede4e9e47b8f848a5df28edb9" translate="yes" xml:space="preserve">
          <source>A set of animation styles with optional offset data. The optional &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; value for a style specifies a percentage of the total animation time at which that style is applied.</source>
          <target state="translated">선택적인 오프셋 데이터가있는 애니메이션 스타일 세트. 스타일 의 선택적 &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 값은 해당 스타일이 적용되는 총 애니메이션 시간의 백분율을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="20025d90204b23bc2c4a58f27ec4341cd91e1835" translate="yes" xml:space="preserve">
          <source>A set of animation styles with optional offset data. The optional &lt;code&gt;offset&lt;/code&gt; value for a style specifies a percentage of the total animation time at which that style is applied.</source>
          <target state="translated">선택적 오프셋 데이터가있는 애니메이션 스타일 세트입니다. 스타일 의 선택적 &lt;code&gt;offset&lt;/code&gt; 값은 해당 스타일이 적용되는 총 애니메이션 시간의 백분율을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="3a39ac6a5cf5e3a0526385dd947e6b5b4b10ab86" translate="yes" xml:space="preserve">
          <source>A set of arguments to pass to the handler method when the event occurs.</source>
          <target state="translated">이벤트가 발생할 때 핸들러 메소드에 전달할 인수 세트입니다.</target>
        </trans-unit>
        <trans-unit id="b69416e2e979402db61b9a90c7c686f250c2936a" translate="yes" xml:space="preserve">
          <source>A set of components that should be compiled along with this component. For each component listed here, Angular creates a &lt;a href=&quot;componentfactory&quot;&gt;&lt;code&gt;ComponentFactory&lt;/code&gt;&lt;/a&gt; and stores it in the &lt;a href=&quot;componentfactoryresolver&quot;&gt;&lt;code&gt;ComponentFactoryResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 구성 요소와 함께 컴파일해야하는 구성 요소 세트. 여기에 나열된 각 구성 요소에 대해, 각도는 생성 &lt;a href=&quot;componentfactory&quot;&gt; &lt;code&gt;ComponentFactory&lt;/code&gt; &lt;/a&gt; 과에 저장이 &lt;a href=&quot;componentfactoryresolver&quot;&gt; &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d541ee3bb7bdc858fdbe640242004d6c3574b73f" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;&lt;a href=&quot;router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 메소드 에서 제공되는 라우터 모듈의 구성 옵션 세트 .</target>
        </trans-unit>
        <trans-unit id="db0c7a52799241ff11d3cbf03e465aa12662b595" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;&lt;a href=&quot;routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 메소드 에서 제공되는 라우터 모듈의 구성 옵션 세트 .</target>
        </trans-unit>
        <trans-unit id="5cee5b66f041ec4d3d4181db314ead6026b65cc9" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;forRoot()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;forRoot()&lt;/code&gt; 메서드 에서 제공되는 라우터 모듈에 대한 구성 옵션 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="296bab81b147e9d5f9deb0abd5624f61cb75e34d" translate="yes" xml:space="preserve">
          <source>A set of dependency providers for platforms created with the new factory.</source>
          <target state="translated">새 팩토리로 생성 된 플랫폼 용 종속성 공급자 집합입니다.</target>
        </trans-unit>
        <trans-unit id="2f9f31dbf4c58ee11c9c7cafc16fbd9e630c335a" translate="yes" xml:space="preserve">
          <source>A set of developer-defined parameters that modify styling and timing when an animation action starts. An array of key-value pairs, where the provided value is used as a default.</source>
          <target state="translated">애니메이션 동작이 시작될 때 스타일과 타이밍을 수정하는 개발자 정의 매개 변수 세트입니다. 제공된 값이 기본값으로 사용되는 키-값 쌍의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="cda6f3a81bf6fa1d317017a56a36707356b07794" translate="yes" xml:space="preserve">
          <source>A set of operators applied to an observable is a recipe&amp;mdash;that is, a set of instructions for producing the values you&amp;rsquo;re interested in. By itself, the recipe doesn&amp;rsquo;t do anything. You need to call &lt;code&gt;subscribe()&lt;/code&gt; to produce a result through the recipe.</source>
          <target state="translated">옵저버 블에 적용되는 연산자 세트는 레시피입니다. 즉, 원하는 값을 생성하기위한 지시 사항 세트입니다. 레시피를 통해 결과를 생성하려면 &lt;code&gt;subscribe()&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a4ef0905149ca734533ddf7caa55241124189d7b" translate="yes" xml:space="preserve">
          <source>A set of options that can include a time delay and additional developer-defined parameters.</source>
          <target state="translated">시간 지연 및 추가 개발자 정의 매개 변수를 포함 할 수있는 옵션 세트.</target>
        </trans-unit>
        <trans-unit id="7985d70b6da47d4fec6acf039e047d5b6d1572b8" translate="yes" xml:space="preserve">
          <source>A set of schematics that customize the &lt;code&gt;ng generate&lt;/code&gt; sub-command option defaults for this project. See &lt;a href=&quot;workspace-config#schematics&quot;&gt;Generation schematics&lt;/a&gt; below.</source>
          <target state="translated">이 프로젝트 의 &lt;code&gt;ng generate&lt;/code&gt; 하위 명령 옵션 기본값을 사용자 정의하는 회로도 세트입니다 . 아래의 &lt;a href=&quot;workspace-config#schematics&quot;&gt;생성 회로도를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1c6f62509b38d65e25be8d89556b5a09dfbb7fbc" translate="yes" xml:space="preserve">
          <source>A set of styles used in the step.</source>
          <target state="translated">단계에서 사용되는 스타일 세트.</target>
        </trans-unit>
        <trans-unit id="d32224487a00478c027aca367dcd59df918d5161" translate="yes" xml:space="preserve">
          <source>A set of supported event names for gestures to be used in Angular. Angular supports all built-in recognizers, as listed in &lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJS documentation&lt;/a&gt;.</source>
          <target state="translated">Angular에서 사용할 제스처에 지원되는 이벤트 이름 세트입니다. Angular는 &lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJS 문서에&lt;/a&gt; 나열된 모든 내장 인식기를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="40cf8919ea34c404a49fa4a02115691af647ed4f" translate="yes" xml:space="preserve">
          <source>A simple example</source>
          <target state="translated">간단한 예</target>
        </trans-unit>
        <trans-unit id="bb4c77f231253ed725d7018a0a81f0fc0e2d83c1" translate="yes" xml:space="preserve">
          <source>A simple example might be a button that sends users to your company website, that would be included in all apps that your company builds.</source>
          <target state="translated">간단한 예로는 회사 웹 사이트로 사용자를 보내는 버튼을들 수 있습니다.이 버튼은 회사가 구축하는 모든 앱에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ab3504c2abf7afad713f07541dc7d00888949cea" translate="yes" xml:space="preserve">
          <source>A simple example of an upgradable component is one that just has a template and a controller:</source>
          <target state="translated">업그레이드 가능한 구성 요소의 간단한 예는 템플릿과 컨트롤러 만있는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="831871173da9a3d98859cf2d8c0391fd2eb59db2" translate="yes" xml:space="preserve">
          <source>A simple registry that maps &lt;code&gt;Components&lt;/code&gt; to generated &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; classes that can be used to create instances of components. Use to obtain the factory for a given component type, then use the factory's &lt;code&gt;create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">&lt;code&gt;Components&lt;/code&gt; 인스턴스를 작성하는 데 사용할 수있는 생성 된 &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 클래스에 구성 요소 를 맵핑하는 간단한 레지스트리입니다 . 주어진 구성 요소 유형에 대한 팩토리를 확보하는 데 사용하고 팩토리의 &lt;code&gt;create()&lt;/code&gt; 메소드를 사용하여 해당 유형의 구성 요소를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="038f8b4a10895ec9960fbff4945296bdba224d59" translate="yes" xml:space="preserve">
          <source>A simple registry that maps &lt;code&gt;Components&lt;/code&gt; to generated &lt;code&gt;&lt;a href=&quot;core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; classes that can be used to create instances of components. Use to obtain the factory for a given component type, then use the factory's &lt;code&gt;create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">&lt;code&gt;Components&lt;/code&gt; 인스턴스를 작성하는 데 사용할 수있는 생성 된 &lt;code&gt;&lt;a href=&quot;core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 클래스에 구성 요소 를 맵핑하는 간단한 레지스트리입니다 . 주어진 구성 요소 유형에 대한 팩토리를 확보하는 데 사용하고 팩토리의 &lt;code&gt;create()&lt;/code&gt; 메소드를 사용하여 해당 유형의 구성 요소를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="10044643dfe192b31c7905ba4ef722a290bd6c2d" translate="yes" xml:space="preserve">
          <source>A simple structural directive like this one creates an &lt;a href=&quot;../api/core/embeddedviewref&quot;&gt;&lt;em&gt;embedded view&lt;/em&gt;&lt;/a&gt; from the Angular-generated &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and inserts that view in a &lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;em&gt;view container&lt;/em&gt;&lt;/a&gt; adjacent to the directive's original &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; host element.</source>
          <target state="translated">이와 같은 간단한 구조 지시문 은 Angular에서 생성 된 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 에서 &lt;a href=&quot;../api/core/embeddedviewref&quot;&gt;&lt;em&gt;포함 된 뷰&lt;/em&gt;&lt;/a&gt; 를 생성 하고 지시문의 원래 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 호스트 요소에 인접한 &lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;em&gt;뷰 컨테이너&lt;/em&gt;&lt;/a&gt; 에 해당 뷰를 삽입합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c50ef7c9d0ce699d0fb2c42cd53b333d4175593e" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;app.use()&lt;/code&gt; treats all other URLs as requests for static assets such as JavaScript, image, and style files.</source>
          <target state="translated">단일 &lt;code&gt;app.use()&lt;/code&gt; 는 다른 모든 URL을 JavaScript, 이미지 및 스타일 파일과 같은 정적 자산에 대한 요청으로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="6ae992f684a1e028d028d133f8cb994b73fe3c8f" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;server.use()&lt;/code&gt; treats all other URLs as requests for static assets such as JavaScript, image, and style files.</source>
          <target state="translated">단일 &lt;code&gt;server.use()&lt;/code&gt; 는 다른 모든 URL을 JavaScript, 이미지 및 스타일 파일과 같은 정적 자산에 대한 요청으로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="f477973774e5df37770d2d52b18d6a9388386d89" translate="yes" xml:space="preserve">
          <source>A single async validator or array of async validator functions</source>
          <target state="translated">단일 비동기 유효성 검사기 또는 비동기 유효성 검사기 함수 배열</target>
        </trans-unit>
        <trans-unit id="268541f7ed03574fdff1f3db74a50de2b9970447" translate="yes" xml:space="preserve">
          <source>A single async validator or array of async validator functions.</source>
          <target state="translated">단일 비동기 유효성 검사기 또는 비동기 유효성 검사기 함수 배열</target>
        </trans-unit>
        <trans-unit id="657bff2669641b3b4dbecfeb9504dbb0338142a2" translate="yes" xml:space="preserve">
          <source>A single workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is created at the top level of the workspace. This is where you can set per-project defaults for CLI command options, and specify configurations to use when the CLI builds a project for different targets.</source>
          <target state="translated">단일 작업 공간 구성 파일 인 &lt;code&gt;angular.json&lt;/code&gt; 이 작업 공간의 최상위 레벨에 작성됩니다. 여기에서 CLI 명령 옵션에 대한 프로젝트 별 기본값을 설정하고 CLI가 다른 대상에 대한 프로젝트를 빌드 할 때 사용할 구성을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d6ef6cd0b6fc6f9f557a972f0f18f5be6fca3db" translate="yes" xml:space="preserve">
          <source>A singleton service is a service for which only one instance exists in an app.</source>
          <target state="translated">싱글 톤 서비스는 하나의 인스턴스 만 앱에 존재하는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="ac41fd92f261eb788e4ee3ddf422ff33e2eeca72" translate="yes" xml:space="preserve">
          <source>A special animation control binding called &lt;code&gt;@.disabled&lt;/code&gt; can be placed on an HTML element to disable animations on that element, as well as any nested elements. When true, the &lt;code&gt;@.disabled&lt;/code&gt; binding prevents all animations from rendering.</source>
          <target state="translated">&lt;code&gt;@.disabled&lt;/code&gt; 라는 특수 애니메이션 컨트롤 바인딩을 HTML 요소에 배치하여 해당 요소와 중첩 요소의 애니메이션을 비활성화 할 수 있습니다. true 인 경우 &lt;code&gt;@.disabled&lt;/code&gt; 바인딩은 모든 애니메이션이 렌더링되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="28a932b87bea89ca4c6d50864f98e96e807d3475" translate="yes" xml:space="preserve">
          <source>A special-purpose library or API; see &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;Domain-specific language&lt;/a&gt;. Angular extends TypeScript with domain-specific languages for a number of domains relevant to Angular apps, defined in NgModules such as &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt;, &lt;a href=&quot;forms&quot;&gt;forms&lt;/a&gt;, and &lt;a href=&quot;router&quot;&gt;routing and navigation&lt;/a&gt;.</source>
          <target state="translated">특수 목적 라이브러리 또는 API; &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;도메인 별 언어를&lt;/a&gt; 참조하십시오 . Angular는 &lt;a href=&quot;animations&quot;&gt;애니메이션&lt;/a&gt; , &lt;a href=&quot;forms&quot;&gt;폼&lt;/a&gt; , &lt;a href=&quot;router&quot;&gt;라우팅 및 내비게이션&lt;/a&gt; 과 같은 NgModules에 정의 된 Angular 앱과 관련된 여러 도메인에 대해 도메인 별 언어로 TypeScript를 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="8d1c91cfd2fa14b6be729ec66d8172ea27c64e6a" translate="yes" xml:space="preserve">
          <source>A spy directive can provide insight into a DOM object that you cannot change directly. Obviously you can't touch the implementation of a native &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. You can't modify a third party component either. But you can watch both with a directive.</source>
          <target state="translated">spy 지시문은 직접 변경할 수없는 DOM 객체에 대한 통찰력을 제공 할 수 있습니다. 분명히 네이티브 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 의 구현을 건드릴 수 없습니다 . 타사 구성 요소도 수정할 수 없습니다. 그러나 지시어로 두 가지를 모두 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5427f01892950cfa52619b7725aa1951b62e38aa" translate="yes" xml:space="preserve">
          <source>A spy directive like this can provide insight into a DOM object that you cannot change directly. You can't touch the implementation of a native &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, or modify a third party component. You can, however watch these elements with a directive.</source>
          <target state="translated">이와 같은 스파이 지시문은 직접 변경할 수없는 DOM 개체에 대한 통찰력을 제공 할 수 있습니다. 네이티브 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 구현을 건드 리거나 타사 구성 요소를 수정할 수 없습니다 . 그러나 지시문을 사용하여 이러한 요소를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a34ef45b9243824ac8ad104edcd27a0ba07fb88" translate="yes" xml:space="preserve">
          <source>A spy for &lt;a href=&quot;../location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">테스트를 통해 시뮬레이션 된 위치 이벤트를 발생시킬 수있는 &lt;a href=&quot;../location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 스파이</target>
        </trans-unit>
        <trans-unit id="069d78528aa32feecf64a53f5cad5729aab0a2e3" translate="yes" xml:space="preserve">
          <source>A spy for &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">테스트를 통해 시뮬레이션 된 위치 이벤트를 발생시킬 수있는 &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 스파이</target>
        </trans-unit>
        <trans-unit id="70bf824cd7347a77618ce7faa1c6b086d7a03e3f" translate="yes" xml:space="preserve">
          <source>A state-change string takes the form &quot;state1 =&amp;gt; state2&quot;, where each side is a defined animation state, or an asterix (*) to refer to a dynamic start or end state.</source>
          <target state="translated">상태 변경 문자열은 &quot;state1 =&amp;gt; state2&quot;의 형식을 취합니다. 여기서 각면은 정의 된 애니메이션 상태이거나 동적 시작 또는 종료 상태를 나타내는 별표 (*)입니다.</target>
        </trans-unit>
        <trans-unit id="33d604ab8f39d07d37d2c30931848cefcdeac188" translate="yes" xml:space="preserve">
          <source>A static analysis tool that checks TypeScript code for readability, maintainability, and functionality errors.</source>
          <target state="translated">가독성, 유지 관리 성 및 기능 오류에 대해 TypeScript 코드를 검사하는 정적 분석 도구입니다.</target>
        </trans-unit>
        <trans-unit id="df0b2f1e108e2b0b27eaa546a2ef0116df1fff42" translate="yes" xml:space="preserve">
          <source>A static server routinely returns &lt;code&gt;index.html&lt;/code&gt; when it receives a request for &lt;code&gt;http://www.mysite.com/&lt;/code&gt;. But it rejects &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; and returns a &lt;code&gt;404 - Not Found&lt;/code&gt; error &lt;em&gt;unless&lt;/em&gt; it is configured to return &lt;code&gt;index.html&lt;/code&gt; instead.</source>
          <target state="translated">정적 서버 는 &lt;code&gt;http://www.mysite.com/&lt;/code&gt; 에 대한 요청을 받으면 일상적으로 &lt;code&gt;index.html&lt;/code&gt; 을 반환합니다 . 그러나 &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; 를 거부 하고 대신 &lt;code&gt;index.html&lt;/code&gt; 을 반환하도록 구성되어 &lt;em&gt;있지 않으면 &lt;/em&gt; &lt;code&gt;404 - Not Found&lt;/code&gt; 오류 를 반환 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb8aebeb140e3e794e8e71e965ce9b6a1d9b29a4" translate="yes" xml:space="preserve">
          <source>A strategy for extracting and merging URLs. Used for AngularJS to Angular migrations.</source>
          <target state="translated">URL을 추출하고 병합하기위한 전략입니다. AngularJS에서 Angular로 마이그레이션하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2e0742331cebdd301468cdb2b697b7e4360d857a" translate="yes" xml:space="preserve">
          <source>A strategy for re-using routes.</source>
          <target state="translated">경로 재사용 전략.</target>
        </trans-unit>
        <trans-unit id="aff9c7c5b6b50fb73398838cd6862bb27d6daa66" translate="yes" xml:space="preserve">
          <source>A strategy for tracking changes over time to an iterable. Used by &lt;a href=&quot;../common/ngforof&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; to respond to changes in an iterable by effecting equivalent changes in the DOM.</source>
          <target state="translated">시간이 지남에 따라 반복 가능한 변경 사항을 추적하는 전략. &lt;a href=&quot;../common/ngforof&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt; 는 DOM에서 동등한 변경 사항을 적용하여 iterable의 변경 사항에 응답하기 위해 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="9abae0d3fd0569dcd3f80cc31ed35dfda23db8af" translate="yes" xml:space="preserve">
          <source>A strategy for tracking changes over time to an iterable. Used by &lt;a href=&quot;common/ngforof&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; to respond to changes in an iterable by effecting equivalent changes in the DOM.</source>
          <target state="translated">시간이 지남에 따라 반복 가능한 변경 사항을 추적하는 전략. &lt;a href=&quot;common/ngforof&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt; 는 DOM에서 동등한 변경 사항을 적용하여 iterable의 변경 사항에 응답하기 위해 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="0d666977cdc5d148eaadf69ff83a95bc8b0bbf90" translate="yes" xml:space="preserve">
          <source>A string containing the currency symbol or its name, such as &quot;$&quot; or &quot;Canadian Dollar&quot;. Used in output string, but does not affect the operation of the function.</source>
          <target state="translated">통화 기호 또는 이름이 포함 된 문자열 (예 : &quot;$&quot;또는 &quot;Canadian Dollar&quot;) 출력 문자열에 사용되지만 함수 작동에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d4f53e9917e374bd5c7a6e00fdeaf07cbebd1ecf" translate="yes" xml:space="preserve">
          <source>A string defining the template reference and optionally the context object for the template.</source>
          <target state="translated">템플릿 참조 및 선택적으로 템플릿의 컨텍스트 객체를 정의하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4218b63c689582c9116fc1d347ea4cff053ba011" translate="yes" xml:space="preserve">
          <source>A string of the form &lt;code&gt;path/to/file#exportName&lt;/code&gt; that acts as a URL for a set of routes to load, or a function that returns such a set.</source>
          <target state="translated">&lt;code&gt;path/to/file#exportName&lt;/code&gt; 형식의 문자열로,로드 할 경로 집합의 URL 역할을하거나 이러한 집합을 반환하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="5bb334481e943a7ec420d73477b9b7576ee9a9e4" translate="yes" xml:space="preserve">
          <source>A string of the form &lt;code&gt;path/to/file#exportName&lt;/code&gt; that acts as a URL for a set of routes to load.</source>
          <target state="translated">&lt;code&gt;path/to/file#exportName&lt;/code&gt; 형식의 문자열로,로드 할 경로 집합의 URL 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="18b1ff791f4ab843946300c849836dd8ec44680e" translate="yes" xml:space="preserve">
          <source>A string that Angular prepends to generated selectors. Can be customized to identify an app or feature area.</source>
          <target state="translated">Angular가 생성 된 선택기에 추가하는 문자열입니다. 앱 또는 기능 영역을 식별하도록 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2914dab73943ac122db80220566ef9b74288319a" translate="yes" xml:space="preserve">
          <source>A structural directive in a template controls whether that template is rendered at run time, based on its input expression. To help the compiler catch template type errors, you should specify as closely as possible the required type of a directive's input expression when it occurs inside the template.</source>
          <target state="translated">템플릿의 구조적 지시문은 입력 식에 따라 해당 템플릿이 런타임에 렌더링되는지 여부를 제어합니다. 컴파일러가 템플릿 유형 오류를 포착하는 데 도움이되도록 템플릿 내에서 발생할 때 지시문의 입력 표현식에 필요한 유형을 가능한 한 가깝게 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="1d99e39af1598920c88efd736f47a905616a5462" translate="yes" xml:space="preserve">
          <source>A structural directive puts a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; to work as you'll see when you &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own structural directive&lt;/a&gt;.</source>
          <target state="translated">구조적 지시문은 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 을 사용 &lt;a href=&quot;structural-directives#unless&quot;&gt;하여 자신 만의 구조적 지시문&lt;/a&gt; 을 작성할 때 보게됩니다 .</target>
        </trans-unit>
        <trans-unit id="a7c157be16fc3a14b41213b09c95f55bf3708632" translate="yes" xml:space="preserve">
          <source>A structural directive that adds or removes templates (displaying or hiding views) when the next match expression matches the switch expression.</source>
          <target state="translated">다음 일치 표현식이 스위치 표현식과 일치 할 때 템플리트를 추가하거나 제거하는 (보기 표시 또는 숨기기) 구조적 지시문입니다.</target>
        </trans-unit>
        <trans-unit id="f748235af1be7e44e4598bbe98b3686222a813aa" translate="yes" xml:space="preserve">
          <source>A structural directive that conditionally includes a template based on the value of an expression coerced to Boolean. When the expression evaluates to true, Angular renders the template provided in a &lt;code&gt;then&lt;/code&gt; clause, and when false or null, Angular renders the template provided in an optional &lt;code&gt;else&lt;/code&gt; clause. The default template for the &lt;code&gt;else&lt;/code&gt; clause is blank.</source>
          <target state="translated">부울로 강제 된 표현식의 값을 기반으로 템플릿을 조건부로 포함하는 구조적 지시문입니다. 식이 true로 평가되면 Angular는 &lt;code&gt;then&lt;/code&gt; 절에 제공된 템플릿을 렌더링하고 false 또는 null 인 경우 선택적 &lt;code&gt;else&lt;/code&gt; 절에 제공된 템플릿을 렌더링합니다 . &lt;code&gt;else&lt;/code&gt; 절의 기본 템플릿 은 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd4680b4f9240c47bd096bcd0bf902e137cd81a4" translate="yes" xml:space="preserve">
          <source>A structure that provides metadata for a class. See &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">클래스에 메타 데이터를 제공하는 구조입니다. &lt;a href=&quot;glossary#decorator&quot;&gt;데코레이터를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7e009ff3bda9c17a3c21c70b9219d153da51904f" translate="yes" xml:space="preserve">
          <source>A subanimation can be queried by a parent and then later animated with the &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">하위 애니메이션은 부모가 쿼리 한 다음 나중에 &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; 함수로 애니메이션 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="41fa62814924dac89aa9ada1e279e24e67392f1e" translate="yes" xml:space="preserve">
          <source>A subscription to change, connect, and disconnect events in the custom element.</source>
          <target state="translated">사용자 정의 요소에서 이벤트를 변경, 연결 및 연결 해제하기위한 구독.</target>
        </trans-unit>
        <trans-unit id="6fc60237d9049bfebb9bf3c583da975aa13fe821" translate="yes" xml:space="preserve">
          <source>A subsection with &lt;strong&gt;markdown&lt;/strong&gt; formatted text.</source>
          <target state="translated">&lt;strong&gt;마크 다운&lt;/strong&gt; 형식의 텍스트가 있는 하위 섹션 .</target>
        </trans-unit>
        <trans-unit id="75df14fc8d3c539ffce328700d6c2714508f544d" translate="yes" xml:space="preserve">
          <source>A synchronous &lt;code&gt;beforeEach()&lt;/code&gt; that performs the remaining setup.</source>
          <target state="translated">나머지 설정을 수행 하는 동기 &lt;code&gt;beforeEach()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a1951e4b3a7997f917a0a8771a1c00faa7de411" translate="yes" xml:space="preserve">
          <source>A synchronous validator function, or an array of such functions, or an &lt;code&gt;&lt;a href=&quot;abstractcontroloptions&quot;&gt;AbstractControlOptions&lt;/a&gt;&lt;/code&gt; object that contains validation functions and a validation trigger.</source>
          <target state="translated">동기화 유효성 검사기 함수 또는 이러한 함수의 배열 또는 유효성 검사 기능과 유효성 검사 트리거가 포함 된 &lt;code&gt;&lt;a href=&quot;abstractcontroloptions&quot;&gt;AbstractControlOptions&lt;/a&gt;&lt;/code&gt; 개체</target>
        </trans-unit>
        <trans-unit id="befde9c22219217404a7df139ccb595c7e831e70" translate="yes" xml:space="preserve">
          <source>A tag attribute and value to match against, to identify an existing tag. A string in the format &lt;code&gt;&quot;tag_attribute=&lt;/code&gt;value string&lt;code&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">기존 태그를 식별하기 위해 일치시킬 태그 속성 및 값입니다. &lt;code&gt;&quot;tag_attribute=&lt;/code&gt; value string &lt;code&gt;&quot;&lt;/code&gt; 형식의 문자열 .</target>
        </trans-unit>
        <trans-unit id="f6e224e4f989af7846e2dfe04c39a6706011c1c1" translate="yes" xml:space="preserve">
          <source>A tag attribute and value to match against, to identify an existing tag. A string in the format &lt;code&gt;&quot;tag_attribute=&lt;/code&gt;value string&lt;code&gt;&quot;&lt;/code&gt;. If not supplied, matches a tag with the same &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;property&lt;/code&gt; attribute value as the replacement tag.</source>
          <target state="translated">기존 태그를 식별하기 위해 일치시킬 태그 속성 및 값입니다. &lt;code&gt;&quot;tag_attribute=&lt;/code&gt; value string &lt;code&gt;&quot;&lt;/code&gt; 형식의 문자열 . 제공되지 않으면 대체 태그 와 동일한 &lt;code&gt;name&lt;/code&gt; 또는 &lt;code&gt;property&lt;/code&gt; 속성 값을 가진 태그와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="8e602fb0822cd1e41b2e8635d1b7e2ee92f0fc30" translate="yes" xml:space="preserve">
          <source>A target for global event notifications. One of &quot;window&quot;, &quot;document&quot;, or &quot;body&quot;.</source>
          <target state="translated">글로벌 이벤트 알림의 대상입니다. &quot;창&quot;, &quot;문서&quot;또는 &quot;본문&quot;중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="c49e4e510fb773309907c7090d51199cb5646ab2" translate="yes" xml:space="preserve">
          <source>A technique for adding a component to the DOM at run time. Requires that you exclude the component from compilation and then connect it to Angular's change-detection and event-handling framework when you add it to the DOM.</source>
          <target state="translated">런타임에 컴포넌트를 DOM에 추가하는 기술. 컴포넌트를 컴파일에서 제외한 다음 DOM에 추가 할 때 Angular의 변경 감지 및 이벤트 처리 프레임 워크에 연결해야합니다.</target>
        </trans-unit>
        <trans-unit id="8e91a35d0e33492ee4275f0669de02e4f926b6fa" translate="yes" xml:space="preserve">
          <source>A technique that generates static application pages on the server, and can generate and serve those pages in response to requests from browsers. It can also pre-generate pages as HTML files that you serve later.</source>
          <target state="translated">서버에서 정적 애플리케이션 페이지를 생성하고 브라우저의 요청에 응답하여 해당 페이지를 생성하고 제공 할 수있는 기술입니다. 또한 나중에 제공하는 HTML 파일로 페이지를 미리 생성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="638899fd7ea8912375736917813c496e0c94cec3" translate="yes" xml:space="preserve">
          <source>A template &lt;em&gt;reference&lt;/em&gt; variable (&lt;code&gt;#phone&lt;/code&gt;) is not the same as a template &lt;em&gt;input&lt;/em&gt; variable (&lt;code&gt;let phone&lt;/code&gt;) such as in an &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;Structural Directives&lt;/em&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">템플릿 &lt;em&gt;참조&lt;/em&gt; 변수 ( &lt;code&gt;#phone&lt;/code&gt; )는 &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt; &lt;code&gt;*ngFor&lt;/code&gt; &lt;/a&gt; 와 같은 템플릿 &lt;em&gt;입력&lt;/em&gt; 변수 ( &lt;code&gt;let phone&lt;/code&gt; )와 다릅니다 . 자세한 내용은 &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;구조 지시문&lt;/em&gt;&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1dfbac8c9633ea6918e4e33ebf0a38f1b1944721" translate="yes" xml:space="preserve">
          <source>A template &lt;strong&gt;expression&lt;/strong&gt; produces a value and appears within the double curly braces, &lt;code&gt;{{ }}&lt;/code&gt;. Angular executes the expression and assigns it to a property of a binding target; the target could be an HTML element, a component, or a directive.</source>
          <target state="translated">템플리트 &lt;strong&gt;표현식&lt;/strong&gt; 은 값을 생성하고 이중 중괄호 &lt;code&gt;{{ }}&lt;/code&gt; 안에 표시됩니다 . Angular는 표현식을 실행하고 바인딩 대상의 속성에 할당합니다. 대상은 HTML 요소, 구성 요소 또는 지시문이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3399fe86e1c043a76a747559ebc2584954d3d035" translate="yes" xml:space="preserve">
          <source>A template &lt;strong&gt;statement&lt;/strong&gt; responds to an &lt;strong&gt;event&lt;/strong&gt; raised by a binding target such as an element, component, or directive. You'll see template statements in the &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; section, appearing in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt;.</source>
          <target state="translated">템플릿 &lt;strong&gt;문&lt;/strong&gt; 은 요소, 구성 요소 또는 지시문과 같은 바인딩 대상에서 발생한 &lt;strong&gt;이벤트에&lt;/strong&gt; 응답합니다 . &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt; 에서와 같이 &lt;code&gt;=&lt;/code&gt; 기호 오른쪽에 따옴표로 표시 되는 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;이벤트 바인딩&lt;/a&gt; 섹션 에 템플리트 명령문이 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="3ba264b05103cceb73a697cb4002c6fe302d7682" translate="yes" xml:space="preserve">
          <source>A template can also have any number of &lt;em&gt;named&lt;/em&gt; outlets. Each named outlet has its own set of routes with their own components. Multiple outlets can be displaying different content, determined by different routes, all at the same time.</source>
          <target state="translated">템플릿에는 여러 개의 &lt;em&gt;명명 된&lt;/em&gt; 콘센트 가있을 수도 있습니다 . 각 명명 된 콘센트에는 자체 구성 요소가있는 자체 경로 세트가 있습니다. 여러 매장이 서로 다른 경로로 결정된 서로 다른 컨텐츠를 동시에 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c74619a725ffaff0db4df371ddffbe5b0ac4fb3a" translate="yes" xml:space="preserve">
          <source>A template can also have any number of named outlets. Each named outlet has its own set of routes with their own components. Multiple outlets can display different content, determined by different routes, all at the same time.</source>
          <target state="translated">템플릿에는 이름이 지정된 콘센트가 얼마든지있을 수 있습니다. 명명 된 각 콘센트에는 자체 구성 요소가있는 자체 경로 집합이 있습니다. 여러 아울렛은 동시에 서로 다른 경로에 따라 결정된 서로 다른 콘텐츠를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e53e96f015d564a357a09d35601208b867f150ce" translate="yes" xml:space="preserve">
          <source>A template can use exported declarables from any imported module, including those from modules that are imported indirectly and re-exported. For example, &lt;code&gt;ModuleA&lt;/code&gt; imports &lt;code&gt;ModuleB&lt;/code&gt;, and also exports it, which makes the declarables from &lt;code&gt;ModuleB&lt;/code&gt; available wherever &lt;code&gt;ModuleA&lt;/code&gt; is imported.</source>
          <target state="translated">템플릿은 간접적으로 가져오고 다시 내 보낸 모듈을 포함하여 가져온 모듈에서 내 보낸 선언을 사용할 수 있습니다. 예를 들어, &lt;code&gt;ModuleA&lt;/code&gt; 는 ModuleB를 가져 &lt;code&gt;ModuleB&lt;/code&gt; 이를 &lt;code&gt;ModuleA&lt;/code&gt; 를 가져올 때마다 ModuleB의 &lt;code&gt;ModuleB&lt;/code&gt; 가능 항목을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="390c41bd3a5d88b462a0eb30f1966d9bfe67ea64" translate="yes" xml:space="preserve">
          <source>A template combines HTML with Angular markup that can modify HTML elements before they are displayed. Template &lt;em&gt;directives&lt;/em&gt; provide program logic, and &lt;em&gt;binding markup&lt;/em&gt; connects your application data and the DOM. There are two types of data binding:</source>
          <target state="translated">템플릿은 HTML 요소를 표시하기 전에 HTML 요소를 수정할 수있는 각도 마크 업과 결합합니다. 템플릿 &lt;em&gt;지시문&lt;/em&gt; 은 프로그램 논리를 제공하고 &lt;em&gt;바인딩 마크 업은&lt;/em&gt; 응용 프로그램 데이터와 DOM을 연결합니다. 데이터 바인딩에는 두 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="26d7d91bd3438a33922e9f989bb798c48de79ba5" translate="yes" xml:space="preserve">
          <source>A template combines straight HTML with Angular &lt;a href=&quot;glossary#data-binding&quot;&gt;data-binding&lt;/a&gt; syntax, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#template-expression&quot;&gt;template expressions&lt;/a&gt; (logical constructs). The Angular elements insert or calculate values that modify the HTML elements before the page is displayed.</source>
          <target state="translated">템플릿은 직선 HTML과 Angular &lt;a href=&quot;glossary#data-binding&quot;&gt;데이터 바인딩&lt;/a&gt; 구문, &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 및 &lt;a href=&quot;glossary#template-expression&quot;&gt;템플릿 표현식&lt;/a&gt; (논리 구성)을 결합 합니다 . 각도 요소는 페이지가 표시되기 전에 HTML 요소를 수정하는 값을 삽입하거나 계산합니다.</target>
        </trans-unit>
        <trans-unit id="dc29d430b581a8b3e55bd43c8c421f291754c56b" translate="yes" xml:space="preserve">
          <source>A template combines straight HTML with Angular &lt;a href=&quot;glossary#data-binding&quot;&gt;data-binding&lt;/a&gt; syntax, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#template-expression&quot;&gt;template expressions&lt;/a&gt; (logical constructs). The Angular elements insert or calculate values that modify the HTML elements before the page is displayed. Learn more about Angular template language in the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; guide.</source>
          <target state="translated">템플릿은 직선 HTML을 Angular &lt;a href=&quot;glossary#data-binding&quot;&gt;데이터 바인딩&lt;/a&gt; 구문, &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 및 &lt;a href=&quot;glossary#template-expression&quot;&gt;템플릿 표현식&lt;/a&gt; (논리적 구성) 과 결합 합니다 . Angular 요소는 페이지가 표시되기 전에 HTML 요소를 수정하는 값을 삽입하거나 계산합니다. &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 가이드 에서 Angular 템플릿 언어에 대해 자세히 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="ca4b36d852a5dbc636450f6d6cb045bf3c47fd25" translate="yes" xml:space="preserve">
          <source>A template expression should evaluate to the type of value that the target property expects. For example, return a string if the target property expects a string, a number if it expects a number, or an object if it expects an object.</source>
          <target state="translated">템플릿 표현식은 대상 속성이 예상하는 값 유형으로 평가되어야합니다. 예를 들어 대상 속성이 문자열을 예상하면 문자열을 반환하고, 숫자를 예상하면 숫자를, 객체를 예상하면 개체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8d2e74a99424e6bcbe0ee669cd69bc0cd5375754" translate="yes" xml:space="preserve">
          <source>A template expression should not change any application state other than the value of the target property.</source>
          <target state="translated">템플릿 표현식은 대상 속성 값 이외의 응용 프로그램 상태를 변경해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="8bcf2e0744c70c16fe32c87be0430556dbba2654" translate="yes" xml:space="preserve">
          <source>A template file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.html&lt;/code&gt;</source>
          <target state="translated">템플릿 파일, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.html&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcf8ef69c4517e917aa5941f39aaaa4f67449dac" translate="yes" xml:space="preserve">
          <source>A template is a block of HTML that tells Angular how to render the component in your application. You can define a template for your component in one of two ways: by referencing an external file, or directly within the component.</source>
          <target state="translated">템플릿은 애플리케이션에서 구성 요소를 렌더링하는 방법을 Angular에 알려주는 HTML 블록입니다. 구성 요소에 대한 템플릿은 외부 파일을 참조하거나 구성 요소 내에서 직접 정의하는 두 가지 방법 중 하나로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e33dd4bd068742d5ab887b97cccd5bd5dce1b8d8" translate="yes" xml:space="preserve">
          <source>A template is associated with a &lt;a href=&quot;glossary#component&quot;&gt;component class&lt;/a&gt; through the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. The template code can be provided inline, as the value of the &lt;code&gt;template&lt;/code&gt; property, or in a separate HTML file linked through the &lt;code&gt;templateUrl&lt;/code&gt; property.</source>
          <target state="translated">템플릿은와 관련된 &lt;a href=&quot;glossary#component&quot;&gt;구성 요소 클래스&lt;/a&gt; 의 관통 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;장식&lt;/a&gt; . 템플릿 코드는 &lt;code&gt;template&lt;/code&gt; 속성 의 값으로 인라인으로 제공 되거나 &lt;code&gt;templateUrl&lt;/code&gt; 속성을 통해 연결된 별도의 HTML 파일에 제공 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f48dc3bdb1500520689adb8438d8eb72cfeab345" translate="yes" xml:space="preserve">
          <source>A template is associated with a &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; class through the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. The HTML can be provided inline, as the value of the &lt;code&gt;template&lt;/code&gt; property, or in a separate HTML file linked through the &lt;code&gt;templateUrl&lt;/code&gt; property.</source>
          <target state="translated">템플릿은 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; () &lt;a href=&quot;glossary#decorator&quot;&gt;데코레이터를&lt;/a&gt; 통해 &lt;a href=&quot;glossary#component&quot;&gt;구성 요소&lt;/a&gt; 클래스 와 연결됩니다 . HTML은 &lt;code&gt;template&lt;/code&gt; 속성 값으로 인라인으로 제공 되거나 &lt;code&gt;templateUrl&lt;/code&gt; 속성을 통해 연결된 별도의 HTML 파일 로 제공 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="79091c1a52a2c3efbb6119802157bc2315a22661" translate="yes" xml:space="preserve">
          <source>A template looks like regular HTML, except that it also contains Angular &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt;, which alters the HTML based on your app's logic and the state of app and DOM data. Your template can use &lt;em&gt;data binding&lt;/em&gt; to coordinate the app and DOM data, &lt;em&gt;pipes&lt;/em&gt; to transform data before it is displayed, and &lt;em&gt;directives&lt;/em&gt; to apply app logic to what gets displayed.</source>
          <target state="translated">템플릿은 앱의 논리와 앱 및 DOM 데이터의 상태에 따라 HTML을 변경하는 Angular &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 도 포함한다는 점을 제외하면 일반 HTML처럼 보입니다 . 템플릿은 &lt;em&gt;데이터 바인딩&lt;/em&gt; 을 사용 하여 앱 및 DOM 데이터를 조정하고, &lt;em&gt;파이프&lt;/em&gt; 가 데이터를 표시하기 전에 변환하는 &lt;em&gt;파이프&lt;/em&gt; 및 표시 되는 항목에 앱 논리를 적용하는 &lt;em&gt;지시문&lt;/em&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c5bb4b558793d400799ee501153dd43050c0f50" translate="yes" xml:space="preserve">
          <source>A template reference variable as a string (e.g. query &lt;code&gt;&amp;lt;my-component #cmp&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('cmp')&lt;/code&gt;)</source>
          <target state="translated">문자열로 템플릿 참조 변수 (예를 들어, 쿼리 &lt;code&gt;&amp;lt;my-component #cmp&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('cmp')&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a64371e181e13f663c10dd5156afe9284379b619" translate="yes" xml:space="preserve">
          <source>A template statement &lt;em&gt;has a side effect&lt;/em&gt;. That's the whole point of an event. It's how you update application state from user action.</source>
          <target state="translated">템플릿 문 &lt;em&gt;은 부작용이&lt;/em&gt; 있습니다. 그것은 사건의 요점입니다. 사용자 작업에서 응용 프로그램 상태를 업데이트하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="057331b0bba82c6918603985ae29364ad82f9aad" translate="yes" xml:space="preserve">
          <source>A template string</source>
          <target state="translated">템플릿 문자열</target>
        </trans-unit>
        <trans-unit id="44907ef29b35716829be6e0df33741d8a03a2331" translate="yes" xml:space="preserve">
          <source>A template to show if the condition expression evaluates to false.</source>
          <target state="translated">조건식이 false로 평가되는지 표시하는 템플리트입니다.</target>
        </trans-unit>
        <trans-unit id="e5e7d10908e311e46e226f49b73a51107d39d05e" translate="yes" xml:space="preserve">
          <source>A template to show if the condition expression evaluates to true.</source>
          <target state="translated">조건식이 true인지 평가할 템플릿입니다.</target>
        </trans-unit>
        <trans-unit id="92d3bf38d68206a60bfa9d1ecf60b0c1ac977333" translate="yes" xml:space="preserve">
          <source>A template variable can refer to the following:</source>
          <target state="translated">템플릿 변수는 다음을 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="082f2b84e3cf46271310c2eefe1584ca33c55ef0" translate="yes" xml:space="preserve">
          <source>A template with no substitutions</source>
          <target state="translated">대체가없는 템플릿</target>
        </trans-unit>
        <trans-unit id="11a65ba35becc62fa80f1bb7d7ca46f919cd6a55" translate="yes" xml:space="preserve">
          <source>A template with substitutions</source>
          <target state="translated">대체 된 템플릿</target>
        </trans-unit>
        <trans-unit id="d55dc070f82d41692707274fa414fd9f75b4f218" translate="yes" xml:space="preserve">
          <source>A test cannot get to child injector services from the fixture injector. And &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; can't configure them either.</source>
          <target state="translated">고정물 인젝터에서 어린이 인젝터 서비스를 테스트 할 수 없습니다. 그리고 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; 도 구성 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3396b2f93458c83e5c6436663b0c4629c04034fb" translate="yes" xml:space="preserve">
          <source>A test file for the &lt;code&gt;HeroDetailComponent&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; 클래스 의 테스트 파일입니다 .</target>
        </trans-unit>
        <trans-unit id="a5e89591a33721c9c03642dd549672c070aa717e" translate="yes" xml:space="preserve">
          <source>A testing specification file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.spec.ts&lt;/code&gt;</source>
          <target state="translated">테스트 사양 파일, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.spec.ts&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b2009af28e4f188315adb0666f75bfca6c5c409" translate="yes" xml:space="preserve">
          <source>A timezone offset (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US timezone abbreviation. When not supplied, uses the end-user's local system timezone.</source>
          <target state="translated">시간대 오프셋 (예 : &lt;code&gt;'+0430'&lt;/code&gt; ) 또는 표준 UTC / GMT 또는 미국 대륙 시간대 약어입니다. 제공되지 않은 경우 최종 사용자의 로컬 시스템 시간대를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3431cf9e8ee99a6d7d9fd3952d9c908a92bcfaba" translate="yes" xml:space="preserve">
          <source>A token for third-party components that can register themselves with NgProbe.</source>
          <target state="translated">NgProbe에 등록 할 수있는 타사 구성 요소에 대한 토큰입니다.</target>
        </trans-unit>
        <trans-unit id="a9a9d7fdd066f2cb6c96314f0d24057d8fb2d63e" translate="yes" xml:space="preserve">
          <source>A token that indicates an opaque platform ID.</source>
          <target state="translated">불투명 한 플랫폼 ID를 나타내는 토큰입니다.</target>
        </trans-unit>
        <trans-unit id="0a3fbe53af4b12fee9f2a0eafc013a35704bbb6c" translate="yes" xml:space="preserve">
          <source>A token that indicates an opaque platform id.</source>
          <target state="translated">불투명 한 플랫폼 ID를 나타내는 토큰입니다.</target>
        </trans-unit>
        <trans-unit id="dc797053d7adf8d5699b3d3c81f1fe17f0afb422" translate="yes" xml:space="preserve">
          <source>A token which indicates the root directory of the application</source>
          <target state="translated">응용 프로그램의 루트 디렉토리를 나타내는 토큰</target>
        </trans-unit>
        <trans-unit id="750533e8c4c0470f8b0ed496f42ee55152feb250" translate="yes" xml:space="preserve">
          <source>A tool for implementing &lt;a href=&quot;glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; of an Angular application. When integrated with an app, Universal generates and serves static pages on the server in response to requests from browsers. The initial static page serves as a fast-loading placeholder while the full application is being prepared for normal execution in the browser.</source>
          <target state="translated">Angular 애플리케이션의 &lt;a href=&quot;glossary#server-side-rendering&quot;&gt;서버 측 렌더링&lt;/a&gt; 을 구현하기위한 도구입니다 . 앱과 통합되면 Universal은 브라우저의 요청에 대한 응답으로 서버에서 정적 페이지를 생성하고 제공합니다. 초기 정적 페이지는 전체 응용 프로그램이 브라우저에서 정상적으로 실행될 수 있도록 준비하는 동안 빠른 로딩 자리 표시 자 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="86777609ab9ebd69c3463a9cbae4498b9a7f9dba" translate="yes" xml:space="preserve">
          <source>A tool that configures and implements navigation among states and &lt;a href=&quot;glossary#view&quot;&gt;views&lt;/a&gt; within an Angular app.</source>
          <target state="translated">Angular 앱 내에서 상태와 &lt;a href=&quot;glossary#view&quot;&gt;뷰&lt;/a&gt; 간 탐색을 구성하고 구현하는 도구입니다 .</target>
        </trans-unit>
        <trans-unit id="c54f42d3f2be1b7a7ae5c194f6735dcf1a14ce7e" translate="yes" xml:space="preserve">
          <source>A transformation is represented by an &lt;code&gt;Action&lt;/code&gt;. There are four action types: &lt;code&gt;&lt;a href=&quot;schematics-authoring&quot;&gt;Create&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Rename&lt;/code&gt;, &lt;code&gt;Overwrite&lt;/code&gt;, and &lt;code&gt;Delete&lt;/code&gt;.</source>
          <target state="translated">변환은 &lt;code&gt;Action&lt;/code&gt; 으로 표시됩니다 . &lt;code&gt;&lt;a href=&quot;schematics-authoring&quot;&gt;Create&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;Rename&lt;/code&gt; , &lt;code&gt;Overwrite&lt;/code&gt; 및 &lt;code&gt;Delete&lt;/code&gt; 네 가지 조치 유형이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9d6ff053e068aad00a4ddd675c703d373675737c" translate="yes" xml:space="preserve">
          <source>A transformation is represented by an &lt;code&gt;Action&lt;/code&gt;. There are four action types: &lt;code&gt;Create&lt;/code&gt;, &lt;code&gt;Rename&lt;/code&gt;, &lt;code&gt;Overwrite&lt;/code&gt;, and &lt;code&gt;Delete&lt;/code&gt;.</source>
          <target state="translated">변환은 &lt;code&gt;Action&lt;/code&gt; 으로 표시됩니다 . 작업 유형에는 &lt;code&gt;Create&lt;/code&gt; , &lt;code&gt;Rename&lt;/code&gt; , &lt;code&gt;Overwrite&lt;/code&gt; 및 &lt;code&gt;Delete&lt;/code&gt; 네 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d1cb3643786137426ab03452ee4b52f1154d1746" translate="yes" xml:space="preserve">
          <source>A transition of &lt;code&gt;* =&amp;gt; void&lt;/code&gt; applies when the element leaves a view, regardless of what state it was in before it left.</source>
          <target state="translated">&lt;code&gt;* =&amp;gt; void&lt;/code&gt; 전환은 요소가 떠나기 전의 상태에 관계없이 요소가 뷰를 떠날 때 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="05cb012e28ee419aa65bdc4e6520a11fc4ae45fa" translate="yes" xml:space="preserve">
          <source>A transition of &lt;code&gt;void =&amp;gt; *&lt;/code&gt; applies when the element enters a view, regardless of what state it assumes when entering.</source>
          <target state="translated">&lt;code&gt;void =&amp;gt; *&lt;/code&gt; 의 전이는 입력 할 때 어떤 상태로 가정하든 요소가 뷰에 들어갈 때 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="ae50d3a159b63d59db6835e63e990ed69b823e6c" translate="yes" xml:space="preserve">
          <source>A tree of related views that can be acted on as a unit. The root view is a component's &lt;em&gt;host view&lt;/em&gt;. A host view can be the root of a tree of &lt;em&gt;embedded views&lt;/em&gt;, collected in a &lt;em&gt;view container&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;) attached to an anchor element in the hosting component. The view hierarchy is a key part of Angular &lt;a href=&quot;glossary#change-detection&quot;&gt;change detection&lt;/a&gt;.</source>
          <target state="translated">하나의 단위로 작동 할 수있는 관련보기의 트리입니다. 루트보기는 구성 요소의 &lt;em&gt;호스트보기&lt;/em&gt; 입니다. 호스트 뷰는 호스팅 구성 요소의 앵커 요소에 연결된 &lt;em&gt;뷰 컨테이너&lt;/em&gt; ( &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; )에 수집 &lt;em&gt;된 포함 된 뷰&lt;/em&gt; 트리의 루트가 될 수 있습니다 . 뷰 계층 구조는 각도 &lt;a href=&quot;glossary#change-detection&quot;&gt;변화 감지&lt;/a&gt; 의 핵심 부분입니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6e59e7be860571130a89e00f1b9b8b7f8d38f516" translate="yes" xml:space="preserve">
          <source>A tree of related views that can be acted on as a unit. The root view is a component's &lt;em&gt;host view&lt;/em&gt;. A host view can be the root of a tree of &lt;em&gt;embedded views&lt;/em&gt;, collected in a &lt;em&gt;view container&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;) attached to an anchor element in the hosting component. The view hierarchy is a key part of Angular change detection.</source>
          <target state="translated">단위로 작동 할 수있는 관련 뷰 트리입니다. 루트 뷰는 구성 요소의 &lt;em&gt;호스트 뷰&lt;/em&gt; 입니다. 호스트 뷰는 &lt;em&gt;포함 된 뷰&lt;/em&gt; 트리의 루트 일 수 있으며 호스팅 구성 요소의 앵커 요소에 연결된 &lt;em&gt;뷰 컨테이너&lt;/em&gt; ( &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; ) 에서 수집됩니다 . 뷰 계층은 각도 변경 감지의 핵심 부분입니다.</target>
        </trans-unit>
        <trans-unit id="a02ea2a87c37f17abc59ef229c4fd425acb9c7da" translate="yes" xml:space="preserve">
          <source>A type describing supported iterable types.</source>
          <target state="translated">지원되는 반복 가능한 유형을 설명하는 유형입니다.</target>
        </trans-unit>
        <trans-unit id="0503256c30d3856cec6c86a359e1fe6f813617cc" translate="yes" xml:space="preserve">
          <source>A type guard function &lt;em&gt;narrows&lt;/em&gt; the expected type of an input expression to a subset of types that might be passed to the directive within the template at run time. You can provide such a function to help the type-checker infer the proper type for the expression at compile time.</source>
          <target state="translated">유형 가드 함수 는 입력 표현식의 예상 유형을 런타임에 템플릿 내의 지시문에 전달할 수있는 유형의 하위 집합으로 &lt;em&gt;좁 힙니다&lt;/em&gt; . 이러한 함수를 제공하여 유형 검사기가 컴파일 타임에 표현식에 대한 적절한 유형을 추론하도록 도울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33e690ef836ea3f977ab4c03c92edfc886056a6d" translate="yes" xml:space="preserve">
          <source>A type which has an &lt;code&gt;InjectorDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;InjectorDef&lt;/code&gt; 정적 필드 가있는 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="f80508473c7b513f595b1cb4b98a01bc9da3485e" translate="yes" xml:space="preserve">
          <source>A type-checking error that you cannot resolve with any of the recommended methods can be the result of a bug in the template type-checker itself. If you get errors that require falling back to basic mode, it is likely to be such a bug. If this happens, please &lt;a href=&quot;https://github.com/angular/angular/issues&quot;&gt;file an issue&lt;/a&gt; so the team can address it.</source>
          <target state="translated">권장되는 방법으로 해결할 수없는 유형 검사 오류는 템플릿 유형 검사기 자체의 버그로 인해 발생할 수 있습니다. 기본 모드로 돌아 가야하는 오류가 발생하면 그러한 버그 일 가능성이 높습니다. 이 경우 팀 &lt;a href=&quot;https://github.com/angular/angular/issues&quot;&gt;에서 해결할 수&lt;/a&gt; 있도록 문제 를 제출 하세요 .</target>
        </trans-unit>
        <trans-unit id="ae35e25b3a17753868983fbc14ff9da764e93c33" translate="yes" xml:space="preserve">
          <source>A type-safe key to use with &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; 와 함께 사용하는 형식 안전 키 입니다.</target>
        </trans-unit>
        <trans-unit id="a94b413e4eb2a589981d65abc4b675155b3b29ec" translate="yes" xml:space="preserve">
          <source>A type-safe key to use with &lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; 와 함께 사용하는 형식 안전 키 입니다.</target>
        </trans-unit>
        <trans-unit id="0d98ac55299036bd42506b5415a7d31cbe5c1907" translate="yes" xml:space="preserve">
          <source>A typical Angular &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; has two properties:</source>
          <target state="translated">일반적인 각도 &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 에는 두 가지 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="24a4ca795d901e7c49a75e02fe55ebd39322b087" translate="yes" xml:space="preserve">
          <source>A typical application has multiple &lt;em&gt;feature areas&lt;/em&gt;, each dedicated to a particular business purpose.</source>
          <target state="translated">일반적인 응용 프로그램에는 각각 특정 비즈니스 목적을위한 여러 &lt;em&gt;기능 영역이 있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f656950592185e57e214008ee404a88c8a15dff5" translate="yes" xml:space="preserve">
          <source>A typical application has multiple feature areas, each dedicated to a particular business purpose with its own folder.</source>
          <target state="translated">일반적인 응용 프로그램에는 여러 기능 영역이 있으며 각각 고유 한 폴더가있는 특정 비즈니스 목적에 전념합니다.</target>
        </trans-unit>
        <trans-unit id="26787fe4fae606ede8cac23bac2c0cb951bed0bf" translate="yes" xml:space="preserve">
          <source>A typical approach is to divide the setup logic into two separate &lt;code&gt;beforeEach()&lt;/code&gt; functions:</source>
          <target state="translated">일반적인 접근 방식은 설정 논리를 두 개의 별도 &lt;code&gt;beforeEach()&lt;/code&gt; 함수 로 나누는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7c474d7be28289c26fb2cb0462ed89fae7757973" translate="yes" xml:space="preserve">
          <source>A typical document is divided into sections.</source>
          <target state="translated">일반적인 문서는 섹션으로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="b5b9f703ac80e450aa4a443b41089755919ef872" translate="yes" xml:space="preserve">
          <source>A typical observable creates a new, independent execution for each subscribed observer. When an observer subscribes, the observable wires up an event handler and delivers values to that observer. When a second observer subscribes, the observable then wires up a new event handler and delivers values to that second observer in a separate execution.</source>
          <target state="translated">일반적인 옵저버 블은 구독 한 각 옵저버에 대해 새로운 독립적 인 실행을 만듭니다. 옵저버가 구독하면 옵저버 블은 이벤트 핸들러를 연결하고 해당 옵저버에게 값을 전달합니다. 두 번째 옵저버가 구독하면 옵저버 블은 새 이벤트 핸들러를 연결하고 별도의 실행으로 해당 두 번째 옵저버에 값을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="7eabee7b22161b44ff415f2896826a49c8a000d0" translate="yes" xml:space="preserve">
          <source>A unique ID that the router assigns to every router navigation.</source>
          <target state="translated">라우터가 모든 라우터 탐색에 할당하는 고유 한 ID입니다.</target>
        </trans-unit>
        <trans-unit id="29e9cf47b6056f1b3b0cda3416faf873adbe8c8e" translate="yes" xml:space="preserve">
          <source>A unique identifying string for the new renderer, used when creating unique styles for encapsulation.</source>
          <target state="translated">캡슐화를위한 고유 한 스타일을 만들 때 사용되는 새 렌더러의 고유 식별 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="f3182da4f20c4f27c308548ad05030cad96917d2" translate="yes" xml:space="preserve">
          <source>A unique object used for retrieving items from the &lt;a href=&quot;core/reflectiveinjector&quot;&gt;&lt;code&gt;ReflectiveInjector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;core/reflectiveinjector&quot;&gt; &lt;code&gt;ReflectiveInjector&lt;/code&gt; &lt;/a&gt; 에서 항목을 검색하는 데 사용되는 고유 한 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="4a0d2765e60989cc727ab39d030ef625be61f3b9" translate="yes" xml:space="preserve">
          <source>A unique object used for retrieving items from the &lt;a href=&quot;reflectiveinjector&quot;&gt;&lt;code&gt;ReflectiveInjector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;reflectiveinjector&quot;&gt; &lt;code&gt;ReflectiveInjector&lt;/code&gt; &lt;/a&gt; 에서 항목을 검색하는 데 사용되는 고유 한 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="b3a652fe176680f1e89a47b89c194765f8151b6d" translate="yes" xml:space="preserve">
          <source>A user opens the app for the first time and the service worker caches the latest version of the app. Let's assume the app's cached assets include &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;main.&amp;lt;main-hash-1&amp;gt;.js&lt;/code&gt; and &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt;.</source>
          <target state="translated">사용자가 처음으로 앱을 열면 서비스 워커가 최신 버전의 앱을 캐시합니다. 앱의 캐시 된 자산에 &lt;code&gt;index.html&lt;/code&gt; , &lt;code&gt;main.&amp;lt;main-hash-1&amp;gt;.js&lt;/code&gt; 및 &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt; 가 포함되어 있다고 가정 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="fcec1b9a7310dc3bbc9f1127516c0c07560407ac" translate="yes" xml:space="preserve">
          <source>A user-defined event.</source>
          <target state="translated">사용자 정의 이벤트.</target>
        </trans-unit>
        <trans-unit id="47141a912c3b81d6dba9a3002b028c3101fe15d6" translate="yes" xml:space="preserve">
          <source>A validator is a function that processes a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; or collection of controls and returns an error map or null. A null map means that validation has passed.</source>
          <target state="translated">유효성 검사기는 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 또는 컨트롤 컬렉션 을 처리하고 오류 맵 또는 null을 반환하는 함수입니다 . 널 맵은 유효성 검증이 통과되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="92f5a26322860fd17d5f20b77b21fc93ff771bd2" translate="yes" xml:space="preserve">
          <source>A value of any type to convert into a JSON-format string.</source>
          <target state="translated">JSON 형식 문자열로 변환 할 모든 유형의 값입니다.</target>
        </trans-unit>
        <trans-unit id="784ae6364da5e286e850c7f0e05dd419d1544771" translate="yes" xml:space="preserve">
          <source>A variable defined in a template that references an instance associated with an element, such as a directive instance, component instance, template as in &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;, or DOM element. After declaring a template reference variable on an element in a template, you can access values from that variable elsewhere within the same template. The following example defines a template reference variable named &lt;code&gt;#phone&lt;/code&gt;.</source>
          <target state="translated">지시문 인스턴스, 구성 요소 인스턴스, TemplateRef에서와 같은 &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 또는 DOM 요소 와 같은 요소와 연결된 인스턴스를 참조하는 템플릿에 정의 된 변수 입니다. 템플릿의 요소에서 템플릿 참조 변수를 선언 한 후 동일한 템플릿 내의 다른 곳에서 해당 변수의 값에 액세스 할 수 있습니다. 다음 예제는 &lt;code&gt;#phone&lt;/code&gt; 이라는 템플릿 참조 변수를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="42ec4d1e4e503f137f8b089944e907a8be6250c1" translate="yes" xml:space="preserve">
          <source>A view container instance can contain other view containers, creating a &lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;view hierarchy&lt;/a&gt;.</source>
          <target state="translated">뷰 컨테이너 인스턴스는 다른 뷰 컨테이너를 포함하여 &lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;뷰 계층을&lt;/a&gt; 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c584c12a9194e47599b4dcef87afa7f889356068" translate="yes" xml:space="preserve">
          <source>A view hierarchy can include views from components in the same NgModule, but it also can (and often does) include views from components that are defined in different NgModules.</source>
          <target state="translated">뷰 계층 구조는 동일한 NgModule에있는 구성 요소의 뷰를 포함 할 수 있지만 다른 NgModules에 정의 된 구성 요소의 뷰도 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8985a30015f187d6df9a40f361288d108a8e8f30" translate="yes" xml:space="preserve">
          <source>A view is specifically represented by a &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; instance associated with the component. A view that belongs to a component is called a &lt;em&gt;host view&lt;/em&gt;. Views are typically collected into &lt;a href=&quot;glossary#view-tree&quot;&gt;view hierarchies&lt;/a&gt;.</source>
          <target state="translated">뷰는 구성 요소와 연관된 &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; 인스턴스 로 구체적으로 표시됩니다 . 구성 요소에 속하는보기를 &lt;em&gt;호스트보기&lt;/em&gt; 라고합니다 . 뷰는 일반적으로 &lt;a href=&quot;glossary#view-tree&quot;&gt;뷰 계층&lt;/a&gt; 으로 수집됩니다 .</target>
        </trans-unit>
        <trans-unit id="e744a48c4fc96b96af3c0831c0429217d4b218d0" translate="yes" xml:space="preserve">
          <source>A way to group related &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt;. NgModules are delivered within scoped packages whose names begin with the Angular &lt;em&gt;scope name&lt;/em&gt;&lt;code&gt;@angular&lt;/code&gt;. For example, &lt;code&gt;@angular/core&lt;/code&gt;, &lt;code&gt;@angular/common&lt;/code&gt;, &lt;code&gt;@angular/forms&lt;/code&gt;, and &lt;code&gt;@angular/router&lt;/code&gt;.</source>
          <target state="translated">관련 &lt;a href=&quot;npm-packages&quot;&gt;npm 패키지&lt;/a&gt; 를 그룹화하는 방법 . NgModules는 이름이 Angular &lt;em&gt;범위 이름 &lt;/em&gt; &lt;code&gt;@angular&lt;/code&gt; 로 시작하는 범위가 지정된 패키지 내에 제공됩니다 . 예를 들어 &lt;code&gt;@angular/core&lt;/code&gt; , &lt;code&gt;@angular/common&lt;/code&gt; , &lt;code&gt;@angular/forms&lt;/code&gt; 및 &lt;code&gt;@angular/router&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="aea6c080165c9b1cf1ca290f294a0e1e15d1219a" translate="yes" xml:space="preserve">
          <source>A way to initialize and launch an app or system.</source>
          <target state="translated">앱 또는 시스템을 초기화하고 시작하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="7386e404d9bca25eb46437dd2f5f7e5376095d89" translate="yes" xml:space="preserve">
          <source>A way to insert DOM content from outside a component into the component's view in a designated spot.</source>
          <target state="translated">구성 요소 외부의 DOM 콘텐츠를 지정된 지점의 구성 요소보기에 삽입하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="7de84fa517d0600bd34fbe77f23fae98b2c2394a" translate="yes" xml:space="preserve">
          <source>A web platform feature, currently supported by most browsers and available in other browsers through polyfills (see &lt;a href=&quot;browser-support&quot;&gt;Browser support&lt;/a&gt;).</source>
          <target state="translated">현재 대부분의 브라우저에서 지원되며 폴리 필을 통해 다른 브라우저에서 사용할 수있는 웹 플랫폼 기능입니다 ( &lt;a href=&quot;browser-support&quot;&gt;브라우저 지원&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="595d9d021ac9ec18186ee36c4c1e98457e5b9f3a" translate="yes" xml:space="preserve">
          <source>A well-functioning application should gracefully handle when users attempt to navigate to a part of your application that does not exist. To add this functionality to your application, you set up a wildcard route. The Angular router selects this route any time the requested URL doesn't match any router paths.</source>
          <target state="translated">제대로 작동하는 애플리케이션은 사용자가 존재하지 않는 애플리케이션의 일부로 이동하려고 할 때 정상적으로 처리되어야합니다. 이 기능을 애플리케이션에 추가하려면 와일드 카드 경로를 설정합니다. Angular 라우터는 요청 된 URL이 라우터 경로와 일치하지 않을 때마다이 경로를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="68fd370f3c2389b536d7c29f5f1aee8181643f5f" translate="yes" xml:space="preserve">
          <source>A widget NgModule should consist entirely of declarations, most of them exported. It would rarely have providers.</source>
          <target state="translated">위젯 NgModule은 전적으로 선언으로 구성되어야하며 대부분은 내 보냅니다. 공급자가 거의 없을 것입니다.</target>
        </trans-unit>
        <trans-unit id="0491ffa865b132d34096600025fe291f6f649744" translate="yes" xml:space="preserve">
          <source>A widget module makes components, directives, and pipes available to external modules. Many third-party UI component libraries are widget modules.</source>
          <target state="translated">위젯 모듈은 구성 요소, 지시문 및 파이프를 외부 모듈에서 사용할 수있게합니다. 많은 타사 UI 구성 요소 라이브러리는 위젯 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="c123c286126cb911939d4328d7538af26bafd125" translate="yes" xml:space="preserve">
          <source>A widget module should consist entirely of declarations, most of them exported.</source>
          <target state="translated">위젯 모듈은 전적으로 선언으로 구성되어야하며 대부분 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="d1363cd47892a9e54fc21353cc398b80d7bfd896" translate="yes" xml:space="preserve">
          <source>A widget module should rarely have providers.</source>
          <target state="translated">위젯 모듈에는 제공자가 거의 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="0082cc99be7ad2573dfa020b500df472d84044de" translate="yes" xml:space="preserve">
          <source>A wrapper around a native element inside of a View.</source>
          <target state="translated">뷰 내부의 기본 요소를 둘러싼 래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="afc7591428b1b6a54e9db05889bcff4050b741ba" translate="yes" xml:space="preserve">
          <source>A wrapper around an NgModule that associates it with &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;providers&lt;/a&gt;. Usage without a generic type is deprecated.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;공급자&lt;/a&gt; 와 연결하는 NgModule을 둘러싼 래퍼 . 제네릭 유형이없는 사용은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="908202c892d3d8c8cebf9a1e1f5f1b232d6fe34c" translate="yes" xml:space="preserve">
          <source>A wrapper around an NgModule that associates it with &lt;a href=&quot;../guide/glossary#provider&quot;&gt;providers&lt;/a&gt;. Usage without a generic type is deprecated.</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#provider&quot;&gt;공급자&lt;/a&gt; 와 연결하는 NgModule을 둘러싼 래퍼 . 제네릭 유형이없는 사용은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="569a153621b06d91c3e611e12a0d1a67f46c9acd" translate="yes" xml:space="preserve">
          <source>A wrapper around an NgModule that associates it with the providers.</source>
          <target state="translated">제공자와 연관시키는 NgModule 주위의 랩퍼.</target>
        </trans-unit>
        <trans-unit id="a0a181daba184ac420bae95b36b395b6c75dbb20" translate="yes" xml:space="preserve">
          <source>A wrapper around the &lt;code&gt;XMLHttpRequest&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; 생성자 주위의 래퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="75bb7803f168acde23c0c49a75c88932db96fef8" translate="yes" xml:space="preserve">
          <source>A yes or no question; ideal for Boolean options.</source>
          <target state="translated">예 또는 아니오 질문; 부울 옵션에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="9380472e5eeed9e1a820e4f9a691e60741cf67bc" translate="yes" xml:space="preserve">
          <source>A zone client can take action before and after an async operation completes.</source>
          <target state="translated">비동기 작업이 완료되기 전후에 영역 클라이언트가 조치를 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d95c1847219c633950f8f1ceca9761315abfc19" translate="yes" xml:space="preserve">
          <source>AD</source>
          <target state="translated">AD</target>
        </trans-unit>
        <trans-unit id="1457b381fbb905cddb3d309bf2f4371efb24967b" translate="yes" xml:space="preserve">
          <source>ANALYZE_FOR_ENTRY_COMPONENTS</source>
          <target state="translated">ANALYZE_FOR_ENTRY_COMPONENTS</target>
        </trans-unit>
        <trans-unit id="2b8ac4ee175e506d03dd47a6d47d857b5404a60d" translate="yes" xml:space="preserve">
          <source>ANIMATION_MODULE_TYPE</source>
          <target state="translated">ANIMATION_MODULE_TYPE</target>
        </trans-unit>
        <trans-unit id="9e0fc4041d028fe347fad5a2d9a2729531ddfbdf" translate="yes" xml:space="preserve">
          <source>AOT Diagnostic messages</source>
          <target state="translated">AOT 진단 메시지</target>
        </trans-unit>
        <trans-unit id="ed24a95265e2f144a3985e9d5b4af5aa0f7371c2" translate="yes" xml:space="preserve">
          <source>AOT and Ivy</source>
          <target state="translated">AOT와 아이비</target>
        </trans-unit>
        <trans-unit id="a6ce97b9cd64e5df34ac5b291f41f70ac7fbb820" translate="yes" xml:space="preserve">
          <source>AOT compilation with Ivy is faster and should be used by default. In the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, set the default build options for your project to always use AOT compilation.</source>
          <target state="translated">Ivy를 사용한 AOT 컴파일이 더 빠르며 기본적으로 사용해야합니다. 에서 &lt;code&gt;angular.json&lt;/code&gt; 작업 공간 구성 파일, 항상 AOT 컴파일을 사용하려면 프로젝트의 기본 빌드 옵션을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="fa86e2641c59340bd601b8ba7d2119a138b6f83d" translate="yes" xml:space="preserve">
          <source>AOT compilation with Ivy is faster and should be used by default. In the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, set the default build options for your project to always use AOT compilation. When using application internationalization (i18n) with Ivy, &lt;a href=&quot;i18n#merge&quot;&gt;translation merging&lt;/a&gt; also requires the use of AOT compilation.</source>
          <target state="translated">Ivy를 사용한 AOT 컴파일은 더 빠르며 기본적으로 사용해야합니다. 에서 &lt;code&gt;angular.json&lt;/code&gt; 작업 공간 구성 파일, 항상 AOT 컴파일을 사용하려면 프로젝트의 기본 빌드 옵션을 설정합니다. Ivy에서 응용 프로그램 국제화 (i18n)를 사용할 때 &lt;a href=&quot;i18n#merge&quot;&gt;번역 병합&lt;/a&gt; 에도 AOT 컴파일이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="fb9ad954685895e815ce7f2a24207d6e334321af" translate="yes" xml:space="preserve">
          <source>AOT compile the hybrid app</source>
          <target state="translated">하이브리드 앱 AOT 컴파일</target>
        </trans-unit>
        <trans-unit id="87e195220135cb979d8a07cb24ff7765a85af43d" translate="yes" xml:space="preserve">
          <source>AOT metadata errors</source>
          <target state="translated">AOT 메타 데이터 오류</target>
        </trans-unit>
        <trans-unit id="7defd4c0d43ba96bdc1455de9f1d62e39a502a4f" translate="yes" xml:space="preserve">
          <source>AOT needs to load any AngularJS files that are in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in the AngularJS &lt;code&gt;index.html&lt;/code&gt;. An easy way to copy them is to add each to the &lt;code&gt;copy-dist-files.js&lt;/code&gt; file.</source>
          <target state="translated">AOT 는 AngularJS &lt;code&gt;index.html&lt;/code&gt; 의 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그에있는 AngularJS 파일을로드해야합니다 . 그것들을 복사하는 쉬운 방법은 각각 &lt;code&gt;copy-dist-files.js&lt;/code&gt; 파일 에 추가하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="9e0c33812161cfe4887e0c04f78c15bd5e61ff42" translate="yes" xml:space="preserve">
          <source>API or Feature</source>
          <target state="translated">API 또는 기능</target>
        </trans-unit>
        <trans-unit id="0fff39d2724fe501cdfd4a22ce613e0e0ec0c56f" translate="yes" xml:space="preserve">
          <source>API/Option</source>
          <target state="translated">API/Option</target>
        </trans-unit>
        <trans-unit id="24be048b8aaf0aecd39a25ebabd04a1dfbbff1a4" translate="yes" xml:space="preserve">
          <source>APP SUPPORT FILES</source>
          <target state="translated">앱 지원 파일</target>
        </trans-unit>
        <trans-unit id="b8dd61424a1e8acf7ab12bf422537b7caa2d8a51" translate="yes" xml:space="preserve">
          <source>APPLICATION-SPECIFIC CONFIG FILES</source>
          <target state="translated">응용 프로그램 별 구성 파일</target>
        </trans-unit>
        <trans-unit id="7838fa4fc1d83550cc50eefcb69cbd49986dec3b" translate="yes" xml:space="preserve">
          <source>APP_BASE_HREF</source>
          <target state="translated">APP_BASE_HREF</target>
        </trans-unit>
        <trans-unit id="e3f9a5cb4b1bf9f7b5e4a1785e57db0e2f3d3875" translate="yes" xml:space="preserve">
          <source>APP_BOOTSTRAP_LISTENER</source>
          <target state="translated">APP_BOOTSTRAP_LISTENER</target>
        </trans-unit>
        <trans-unit id="4f6efcda7c9b006c9c3205c1c2a919389bca11e9" translate="yes" xml:space="preserve">
          <source>APP_ID</source>
          <target state="translated">APP_ID</target>
        </trans-unit>
        <trans-unit id="367132b55d2d5e5d02cd3daf8fe2432e965920f5" translate="yes" xml:space="preserve">
          <source>APP_INITIALIZER</source>
          <target state="translated">APP_INITIALIZER</target>
        </trans-unit>
        <trans-unit id="eb73501aa2a666ce6cdb48a50e68af7107aae3af" translate="yes" xml:space="preserve">
          <source>ARIA specification and authoring practices</source>
          <target state="translated">ARIA 사양 및 저작 사례</target>
        </trans-unit>
        <trans-unit id="9cfd34f083e5ba936648207be86e862772727935" translate="yes" xml:space="preserve">
          <source>ASP.NET 4.x Project</source>
          <target state="translated">ASP.NET 4.x 프로젝트</target>
        </trans-unit>
        <trans-unit id="c34da2b2d91c5e754231cd2ed1aab8be5964f186" translate="yes" xml:space="preserve">
          <source>AUTO_STYLE</source>
          <target state="translated">AUTO_STYLE</target>
        </trans-unit>
        <trans-unit id="f929923568568a4da2be1535144326032933ceb7" translate="yes" xml:space="preserve">
          <source>Abbreviated</source>
          <target state="translated">Abbreviated</target>
        </trans-unit>
        <trans-unit id="feaebecb323d018f6b3268b9f60b3217020dd1c5" translate="yes" xml:space="preserve">
          <source>Abide by the unidirectional data flow rule</source>
          <target state="translated">단방향 데이터 흐름 규칙 준수</target>
        </trans-unit>
        <trans-unit id="eb504ba616a4717b3ecb24820c6b3de4e3cc9b0d" translate="yes" xml:space="preserve">
          <source>About this guide</source>
          <target state="translated">이 안내서에 대하여</target>
        </trans-unit>
        <trans-unit id="0a9143d47fb8f5c8ce72c187dbb4f2c8bedf3de9" translate="yes" xml:space="preserve">
          <source>Absolutely.</source>
          <target state="translated">Absolutely.</target>
        </trans-unit>
        <trans-unit id="0f7874c26836804debef6beaae8a9b411cc84311" translate="yes" xml:space="preserve">
          <source>AbstractControl</source>
          <target state="translated">AbstractControl</target>
        </trans-unit>
        <trans-unit id="95b5294224d9b3b7ee74690ec2ba8150fa28a063" translate="yes" xml:space="preserve">
          <source>AbstractControlDirective</source>
          <target state="translated">AbstractControlDirective</target>
        </trans-unit>
        <trans-unit id="a85cd1fc05d53f5f528e32f0696603068e07725e" translate="yes" xml:space="preserve">
          <source>AbstractControlOptions</source>
          <target state="translated">AbstractControlOptions</target>
        </trans-unit>
        <trans-unit id="d9c4da7c847756ecf47d6e7661a78796ecc6932b" translate="yes" xml:space="preserve">
          <source>AbstractFormGroupDirective</source>
          <target state="translated">AbstractFormGroupDirective</target>
        </trans-unit>
        <trans-unit id="8da95c3112e20bafa962dd96d67921e23da58f48" translate="yes" xml:space="preserve">
          <source>AbstractType</source>
          <target state="translated">AbstractType</target>
        </trans-unit>
        <trans-unit id="59a3413d743eddad76795b85c491b59c6c8853f4" translate="yes" xml:space="preserve">
          <source>Abstraction on top of APIs</source>
          <target state="translated">API 기반의 추상화</target>
        </trans-unit>
        <trans-unit id="428e19e9e12f24d9f2005b934a813793d85c7758" translate="yes" xml:space="preserve">
          <source>Accelerated debugging and performance profiling with Angular DevTools</source>
          <target state="translated">Angular DevTools를 사용한 가속화 된 디버깅 및 성능 프로파일 링</target>
        </trans-unit>
        <trans-unit id="a817b1091a9c22ad081e2de21e641873685f98ae" translate="yes" xml:space="preserve">
          <source>Accepts an optional argument that moves the virtual clock forward by the specified number of milliseconds, clearing asynchronous activities scheduled within that timeframe. See &lt;a href=&quot;testing#tick&quot;&gt;discussion above&lt;/a&gt;.</source>
          <target state="translated">지정된 시간 (밀리 초) 동안 가상 시계를 앞으로 이동시켜 해당 시간 내에 예약 된 비동기 활동을 지우는 선택적 인수를 허용합니다. &lt;a href=&quot;testing#tick&quot;&gt;위의 토론을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a254a9def8a95988feffbefd9a92d48affe6839a" translate="yes" xml:space="preserve">
          <source>Accepts an optional argument that moves the virtual clock forward by the specified number of milliseconds, clearing asynchronous activities scheduled within that timeframe. See &lt;a href=&quot;testing-components-scenarios#tick&quot;&gt;discussion above&lt;/a&gt;.</source>
          <target state="translated">지정된 밀리 초 수만큼 가상 시계를 앞으로 이동하여 해당 기간 내에 예약 된 비동기 활동을 지우는 선택적 인수를 허용합니다. &lt;a href=&quot;testing-components-scenarios#tick&quot;&gt;위의 설명을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2d4ddc28b3740e2c984f99503c7979b4c9792440" translate="yes" xml:space="preserve">
          <source>Access a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instance by placing a directive on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element (or directive prefixed with &lt;code&gt;*&lt;/code&gt;). The &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; for the embedded view is injected into the constructor of the directive, using the &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 요소 (또는 접두어 &lt;code&gt;*&lt;/code&gt; 로 시작 )에 지시문을 배치 하여 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 인스턴스에 액세스하십시오 . &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 내장 뷰가 사용 지침의 생성자에 주입 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 의 토큰.</target>
        </trans-unit>
        <trans-unit id="4fe9f9569ccd9b850020bd4b68cd44cf94f2bea4" translate="yes" xml:space="preserve">
          <source>Access individual controls in the group</source>
          <target state="translated">그룹의 개별 컨트롤에 액세스</target>
        </trans-unit>
        <trans-unit id="3bd6071c0d4d4fdb171f32ed6d48526da908cca3" translate="yes" xml:space="preserve">
          <source>Access the &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; control with a getter method.</source>
          <target state="translated">getter 메서드를 사용 하여 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 컨트롤에 액세스합니다 .</target>
        </trans-unit>
        <trans-unit id="e8452e7ba1da7691017f4ee4304fc673e6f0bb4a" translate="yes" xml:space="preserve">
          <source>Access the &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; of an element by placing a &lt;code&gt;&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; injected with &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; on the element, or use a &lt;code&gt;&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; query.</source>
          <target state="translated">액세스 &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 재치하여 소자의 &lt;code&gt;&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 주입 &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 요소에 또는 사용 &lt;code&gt;&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; 의 쿼리.</target>
        </trans-unit>
        <trans-unit id="ce12460889befb2c6aeea85d232ba50839031e52" translate="yes" xml:space="preserve">
          <source>Access the component instance through the fixture and confirm it exists with a Jasmine expectation:</source>
          <target state="translated">픽스쳐를 통해 컴포넌트 인스턴스에 액세스하고 Jasmine 예상으로 존재하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="65af474c2ce5a9f03ce39c585f67f4a85352d27c" translate="yes" xml:space="preserve">
          <source>Access the event object with the &lt;code&gt;$event&lt;/code&gt; argument passed to the output event handler:</source>
          <target state="translated">출력 이벤트 핸들러에 전달 된 &lt;code&gt;$event&lt;/code&gt; 인수를 사용하여 이벤트 오브젝트에 액세스하십시오 .</target>
        </trans-unit>
        <trans-unit id="377065746e81f30b11ac698cada8b989e39c4a25" translate="yes" xml:space="preserve">
          <source>Access the group by name</source>
          <target state="translated">이름으로 그룹에 액세스</target>
        </trans-unit>
        <trans-unit id="65b5d0e60ff544cacfedacd4d4b25cfce22cf7b6" translate="yes" xml:space="preserve">
          <source>Access the overall form status</source>
          <target state="translated">전체 양식 상태에 액세스</target>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="cd53bbcc3ef555cef8aef4cd3865d30e34e01e3b" translate="yes" xml:space="preserve">
          <source>Accessibility - Google Web Fundamentals</source>
          <target state="translated">접근성-Google 웹 기초</target>
        </trans-unit>
        <trans-unit id="69aa472d0ca05d859e2569266226a800dc96ebee" translate="yes" xml:space="preserve">
          <source>Accessibility Resources and Code Examples</source>
          <target state="translated">접근성 리소스 및 코드 예제</target>
        </trans-unit>
        <trans-unit id="c76a505ae270ff75148ad28548783d5d27bdc1f8" translate="yes" xml:space="preserve">
          <source>Accessibility attributes</source>
          <target state="translated">접근성 속성</target>
        </trans-unit>
        <trans-unit id="109b3888496c6d4d396c3784a78f2ef96407235a" translate="yes" xml:space="preserve">
          <source>Accessibility in Angular</source>
          <target state="translated">Angular의 접근성</target>
        </trans-unit>
        <trans-unit id="6be07fa864b6aa88516e6a26cd48a52b1bc1ad24" translate="yes" xml:space="preserve">
          <source>Accessing a template variable within &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 내에서 템플릿 변수에 액세스</target>
        </trans-unit>
        <trans-unit id="5fc23cfa97105024867addb00d2cc8f18e74f266" translate="yes" xml:space="preserve">
          <source>Accessing in a nested template</source>
          <target state="translated">중첩 템플릿에서 액세스</target>
        </trans-unit>
        <trans-unit id="d0fa71c858210347e2968839cb5d0fa8c7d7cf97" translate="yes" xml:space="preserve">
          <source>Accessing query parameters and fragments</source>
          <target state="translated">쿼리 매개 변수 및 조각에 액세스</target>
        </trans-unit>
        <trans-unit id="50c48bd5b8278d51c8a1d76f35a5de300302f98d" translate="yes" xml:space="preserve">
          <source>Accordingly, a routing guard can return an &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; or a &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; and the router will wait for the observable to resolve to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">따라서 라우팅 가드는 &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; 반환 할 수 있으며 라우터는 Observable이 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 로 확인 될 때까지 기다립니다 .</target>
        </trans-unit>
        <trans-unit id="fe7ef692ecf6fbf5ffd81dba5751890fa9bec6e7" translate="yes" xml:space="preserve">
          <source>Accordingly, the &lt;em&gt;link parameters array&lt;/em&gt; has &lt;em&gt;two&lt;/em&gt; items: the routing &lt;em&gt;path&lt;/em&gt; and a &lt;em&gt;route parameter&lt;/em&gt; that specifies the &lt;code&gt;id&lt;/code&gt; of the selected hero.</source>
          <target state="translated">따라서, &lt;em&gt;링크 파라미터 어레이&lt;/em&gt; 는 &lt;em&gt;2 개의&lt;/em&gt; 아이템, 즉 라우팅 &lt;em&gt;경로&lt;/em&gt; 및 선택된 히어로 의 &lt;code&gt;id&lt;/code&gt; 를 지정 하는 &lt;em&gt;루트 파라미터&lt;/em&gt; 를 갖는다 .</target>
        </trans-unit>
        <trans-unit id="3b89e6944ccf59dc8e5282a7ab12a98550bedec1" translate="yes" xml:space="preserve">
          <source>Accordingly, the &lt;em&gt;link parameters array&lt;/em&gt; has two items: the routing &lt;em&gt;path&lt;/em&gt; and a &lt;em&gt;route parameter&lt;/em&gt; that specifies the &lt;code&gt;id&lt;/code&gt; of the selected hero.</source>
          <target state="translated">따라서 &lt;em&gt;링크 매개 변수 배열&lt;/em&gt; 에는 라우팅 &lt;em&gt;경로&lt;/em&gt; 와 선택한 Hero 의 &lt;code&gt;id&lt;/code&gt; 를 지정 하는 &lt;em&gt;경로 매개 변수&lt;/em&gt; 의 두 항목이 있습니다.</target>
        </trans-unit>
        <trans-unit id="307094c1dc908f6f3886b8acb63db299f5b02050" translate="yes" xml:space="preserve">
          <source>Acquire the hero with that &lt;code&gt;id&lt;/code&gt; from the server via the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 를 통해 서버에서 해당 &lt;code&gt;id&lt;/code&gt; 를 가진 영웅을 확보하십시오.</target>
        </trans-unit>
        <trans-unit id="82870c0cce5897721a9489d5d73fb0c52839cf70" translate="yes" xml:space="preserve">
          <source>Activated route</source>
          <target state="translated">활성화 된 경로</target>
        </trans-unit>
        <trans-unit id="794c493d158037b9698e41b416ae5ef5793dac99" translate="yes" xml:space="preserve">
          <source>ActivatedRoute</source>
          <target state="translated">ActivatedRoute</target>
        </trans-unit>
        <trans-unit id="6add898d4d5413d812feee7c890c5421a4b7149b" translate="yes" xml:space="preserve">
          <source>ActivatedRoute params and queryParams properties</source>
          <target state="translated">ActivatedRoute 매개 변수 및 queryParams 속성</target>
        </trans-unit>
        <trans-unit id="2bd22a4d53b9c97bd663bdbc8791d94b18d02f28" translate="yes" xml:space="preserve">
          <source>ActivatedRouteSnapshot</source>
          <target state="translated">ActivatedRouteSnapshot</target>
        </trans-unit>
        <trans-unit id="204b72e97c4752ded21a3362fdcde4b2639b4293" translate="yes" xml:space="preserve">
          <source>Activates a reusable animation. Used with &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">재사용 가능한 애니메이션을 활성화합니다. &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 과 함께 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="8e40bc92630ef5d50c6c2dfcdf9254fff9180d01" translate="yes" xml:space="preserve">
          <source>ActivationEnd</source>
          <target state="translated">ActivationEnd</target>
        </trans-unit>
        <trans-unit id="32dd68023e3907e5c24fd1583232c83b2c6e46d0" translate="yes" xml:space="preserve">
          <source>ActivationEnd`</source>
          <target state="translated">ActivationEnd`</target>
        </trans-unit>
        <trans-unit id="5c0a175ec8a530bff0295cd8daab5114e6e95235" translate="yes" xml:space="preserve">
          <source>ActivationStart</source>
          <target state="translated">ActivationStart</target>
        </trans-unit>
        <trans-unit id="a733b809d2f1233496ab516eed0f3ef75cf3791a" translate="yes" xml:space="preserve">
          <source>Active</source>
          <target state="translated">Active</target>
        </trans-unit>
        <trans-unit id="6e159832dbdf12e00bf06037be4688396deea347" translate="yes" xml:space="preserve">
          <source>Active Ends</source>
          <target state="translated">액티브 엔드</target>
        </trans-unit>
        <trans-unit id="a5325119b52bb8168182fe50c18511f8d177a326" translate="yes" xml:space="preserve">
          <source>Active attempts to interact with the service worker, such as calling &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt;, return rejected promises.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt; 호출과 같은 서비스 워커와의 상호 작용 시도는 거부 된 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a1917d94679e620038f3ead27125a83248fc69a2" translate="yes" xml:space="preserve">
          <source>Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]&lt;/code&gt; input binding with the &lt;code&gt;{ exact: true }&lt;/code&gt; expression. By using &lt;code&gt;{ exact: true }&lt;/code&gt;, a given &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; will only be active if its URL is an exact match to the current URL.</source>
          <target state="translated">활성 라우트 링크는 라우트 트리의 각 레벨을 따라 계단식으로 연결되므로 상위 및 하위 라우터 링크를 동시에 활성화 할 수 있습니다. 이 동작을 재정의하려면 &lt;code&gt;{ exact: true }&lt;/code&gt; 식 을 사용하여 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]&lt;/code&gt; 입력 바인딩에 바인딩 할 수 있습니다 . 사용하여 &lt;code&gt;{ exact: true }&lt;/code&gt; , 주어진 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 는 URL이 현재 URL을 정확하게 일치하는 경우에만 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="b560ca1665a284a23072009581af923a4438d647" translate="yes" xml:space="preserve">
          <source>Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the &lt;code&gt;[routerLinkActiveOptions]&lt;/code&gt; input binding with the &lt;code&gt;{ exact: true }&lt;/code&gt; expression. By using &lt;code&gt;{ exact: true }&lt;/code&gt;, a given &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; will only be active if its URL is an exact match to the current URL.</source>
          <target state="translated">활성 경로 링크는 경로 트리의 각 수준을 통해 계단식으로 내려가므로 상위 및 하위 라우터 링크가 동시에 활성화 될 수 있습니다. 이 동작을 재정의하려면 &lt;code&gt;{ exact: true }&lt;/code&gt; 표현식 을 사용하여 &lt;code&gt;[routerLinkActiveOptions]&lt;/code&gt; 입력 바인딩에 바인딩 할 수 있습니다 . &lt;code&gt;{ exact: true }&lt;/code&gt; 를 사용 하면 해당 URL이 현재 URL과 정확히 일치하는 경우에만 지정된 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 가 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="35861d2d31d89b47d85b528c09cc715631b815d9" translate="yes" xml:space="preserve">
          <source>Active router links</source>
          <target state="translated">활성 라우터 링크</target>
        </trans-unit>
        <trans-unit id="37b1c561bca580bb994b0e5d093be6ab592df8a4" translate="yes" xml:space="preserve">
          <source>Acts as a placeholder that Angular dynamically fills based on the current router state.</source>
          <target state="translated">Angular가 현재 라우터 상태에 따라 동적으로 채우는 자리 표시 자 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="362d51e485a5ede5ae2646cf9e070ec1747d7f2c" translate="yes" xml:space="preserve">
          <source>Acts as the identity function when given a non-forward-ref value.</source>
          <target state="translated">전달이 아닌 참조 값이 제공되면 ID 함수로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="396a77f5610e3812bebfa8b8db9a7c77a059e0fe" translate="yes" xml:space="preserve">
          <source>Adapter interface for retrieving the &lt;code&gt;&lt;a href=&quot;core/testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; service associated for a particular context.</source>
          <target state="translated">특정 컨텍스트와 연관된 &lt;code&gt;&lt;a href=&quot;core/testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; 서비스 를 검색하기위한 어댑터 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="57d55220bc209fce13be971cfa46f83d93fc4bca" translate="yes" xml:space="preserve">
          <source>Adapter interface for retrieving the &lt;code&gt;&lt;a href=&quot;testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; service associated for a particular context.</source>
          <target state="translated">특정 컨텍스트와 연관된 &lt;code&gt;&lt;a href=&quot;testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; 서비스 를 검색하기위한 어댑터 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="3f4a639136be5c62f45bacf8afdbec98e1d5129e" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes&amp;mdash;components, directives, and pipes&amp;mdash;to a &lt;code&gt;declarations&lt;/code&gt; list.</source>
          <target state="translated">추가 &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;신고 대상&lt;/a&gt; A를 파이프 - 클래스 - 구성 요소, 지침 등을 &lt;code&gt;declarations&lt;/code&gt; 목록입니다.</target>
        </trans-unit>
        <trans-unit id="3560f20daf5611e3b375968ed597beb5c4f0158b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array to register Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; providers globally.</source>
          <target state="translated">추가 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 받는 &lt;code&gt;AppModule&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 배열 각도의 등록 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 전 세계적으로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0048cdde3ea2a8ccae7c94a3c7465652b7d6785b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the app module (&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">추가 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 받는 &lt;code&gt;imports&lt;/code&gt; 응용 프로그램 모듈 (배열 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8f99cfb58142d03bb6f653ac95acc4f30459e350" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="6d4608c0294735118be24cb2d456a578029e2f1c" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;HeroService.getHero()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService.getHero()&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="182b5d83f0a65e9a325c4c2db7a7c77175219e27" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;HeroService.updateHero()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService.updateHero()&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="7e46f0329680a6f0e82967b1bf73efd1343668f0" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;PhoneDetailComponent&lt;/code&gt; component to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;em&gt;declarations&lt;/em&gt; and &lt;em&gt;entryComponents&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;em&gt; 선언&lt;/em&gt; 및 &lt;em&gt;entryComponents에 &lt;/em&gt; &lt;code&gt;PhoneDetailComponent&lt;/code&gt; 구성 요소를 추가하십시오 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43ddfc069f86e4fd77627aa8a21d9d1ff6fa458e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;getHeroes()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getHeroes()&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="8aded543b54bcc2d04b10175a1390c9cd687831f" translate="yes" xml:space="preserve">
          <source>Add Angular and the other new dependencies to &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 에 Angular 및 기타 새로운 종속성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="cdc2a64b8de6ed4a80e0a1c10a9bc27e773e1c56" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that contains a suitable error message.</source>
          <target state="translated">적절한 오류 메시지가 포함 된 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="deb2eb3ba8a87a88474cb922247dab94efb0148d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element and, within that, an anchor element that, when clicked, triggers navigation to the &lt;code&gt;HeroesComponent&lt;/code&gt;. The revised &lt;code&gt;AppComponent&lt;/code&gt; template looks like this:</source>
          <target state="translated">&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; 요소를 추가하고 클릭하면 &lt;code&gt;HeroesComponent&lt;/code&gt; 로의 탐색을 트리거하는 앵커 요소를 추가하십시오 . 수정 된 &lt;code&gt;AppComponent&lt;/code&gt; 템플릿은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="84449015e98d2c7fe2ee538001f75df10dcd526d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array and inject the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class, too, but give &lt;code&gt;emoji&lt;/code&gt; a different value. Here, it has a value of 🐶 (puppy).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 배열을 추가 하고 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 클래스에 &lt;code&gt;AnimalService&lt;/code&gt; 도 삽입 하지만 &lt;code&gt;emoji&lt;/code&gt; 에 다른 값을 지정하십시오. 여기서 값은 🐶 (강아지)입니다.</target>
        </trans-unit>
        <trans-unit id="19eab91cf54346d4591c110eddb2a9e3fe610d00" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with a third animal, 🦔 (hedgehog), to the &lt;code&gt;app.component.ts&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata:</source>
          <target state="translated">&lt;code&gt;app.component.ts&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; () 메타 데이터에 세 번째 동물 🦔 (고슴도치)가 있는 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 배열을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="21c3d8f9d4e4a561165b7fb36b05d17fcaaa6aee" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider with that factory function.</source>
          <target state="translated">해당 팩토리 함수와 함께 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 제공자를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b8be01024834f997542431f0f27598795d33e2d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard that only loads the &lt;code&gt;AdminModule&lt;/code&gt; once the user is logged in &lt;em&gt;and&lt;/em&gt; attempts to access the admin feature area.</source>
          <target state="translated">추가 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 의 유일한 부하 있다는 가드 &lt;code&gt;AdminModule&lt;/code&gt; 사용자 한번가 로그인 &lt;em&gt;및&lt;/em&gt; 시도 관리자 기능 영역에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a66287fd7e34d94cdf9088a6d5121c2dd8823a0f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; to the shell template where views are displayed.</source>
          <target state="translated">보기가 표시되는 셸 템플릿에 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="898b1572932b2c74532c4d3ff9e91aaf920c8e7a" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; to the shell template where views will be displayed.</source>
          <target state="translated">보기가 표시 될 쉘 템플리트에 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e9ef507bc9bbcaa25673401bd1c8c3768c7b26f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;DashboardComponent&lt;/code&gt; using the CLI:</source>
          <target state="translated">CLI를 사용하여 &lt;code&gt;DashboardComponent&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="bde6cb9ecfe126921ce28e9ac1927149053f7c35" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; to the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater that filters the list of heroes to just those heroes who can fly.</source>
          <target state="translated">영웅 목록을 필터링 할 수있는 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; 리피터에 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c5228cde0f61bf1fe1e9a1fc6b78ec86b356bae" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;class&lt;/code&gt; statement that includes the code for the component.</source>
          <target state="translated">구성 요소에 대한 코드를 포함 하는 &lt;code&gt;class&lt;/code&gt; 문을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="ebea1b8c68f8b57d6ea7ed08f19b491fdea8c3ba" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;color&lt;/code&gt; property to the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; 에 &lt;code&gt;color&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d2845f19e415459d2b685418f253bf866faaae0" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;confirm()&lt;/code&gt; method to the &lt;code&gt;DialogService&lt;/code&gt; to prompt the user to confirm their intent. The &lt;code&gt;window.confirm&lt;/code&gt; is a &lt;em&gt;blocking&lt;/em&gt; action that displays a modal dialog and waits for user interaction.</source>
          <target state="translated">&lt;code&gt;DialogService&lt;/code&gt; 에 &lt;code&gt;confirm()&lt;/code&gt; 메소드를 추가 하여 사용자에게 의도를 확인하도록 프롬프트하십시오. &lt;code&gt;window.confirm&lt;/code&gt; 는 A는 &lt;em&gt;차단&lt;/em&gt; 작용이 표시하는 모달 대화 및 사용자 상호 작용을 기다립니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="07c984e260e0d86a29c178f15bac41e31fbc5270" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;confirm()&lt;/code&gt; method to the &lt;code&gt;DialogService&lt;/code&gt; to prompt the user to confirm their intent. The &lt;code&gt;window.confirm&lt;/code&gt; is a blocking action that displays a modal dialog and waits for user interaction.</source>
          <target state="translated">사용자에게 의도를 확인하라는 메시지 를 표시 하는 &lt;code&gt;confirm()&lt;/code&gt; 메서드를 &lt;code&gt;DialogService&lt;/code&gt; 에 추가합니다. &lt;code&gt;window.confirm&lt;/code&gt; 은 차단 작업입니다 표시하는 모달 대화 및 사용자 상호 작용을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="7b557d38d8fd3a5d1bbdd3ec8cdee76d8578c406" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;crisis-center&lt;/code&gt; route to the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; 에 &lt;code&gt;crisis-center&lt;/code&gt; 경로를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f5094eea4018e25225f0949e73b6925ca16ebd3f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;getHeroes&lt;/code&gt; method to return the &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;getHeroes&lt;/code&gt; 메소드를 추가 하여 &lt;em&gt;모의 영웅&lt;/em&gt; 을 리턴하십시오 .</target>
        </trans-unit>
        <trans-unit id="d89939689ff55adc6378e0312ee22d86c2aa3cc4" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;goBack()&lt;/code&gt;&lt;em&gt;method&lt;/em&gt; to the component class that navigates backward one step in the browser's history stack using the &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service that you &lt;a href=&quot;toh-pt5#hero-detail-ctor&quot;&gt;injected previously&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt5#hero-detail-ctor&quot;&gt;이전에 삽입&lt;/a&gt; 한 &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 서비스를 사용하여 브라우저 히스토리 스택에서 한 단계 뒤로 탐색 하는 &lt;code&gt;goBack()&lt;/code&gt; &lt;em&gt;메소드&lt;/em&gt; 를 컴포넌트 클래스에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="c70e30c1bf0e3c3f35945c6bb0fc4e9abc4165e2" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero detail&lt;/code&gt; route</source>
          <target state="translated">&lt;code&gt;hero detail&lt;/code&gt; 경로 추가</target>
        </trans-unit>
        <trans-unit id="0223569a1885b0f40d10946d1a27ca7bebab7a92" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;hero&lt;/code&gt; 속성 추가</target>
        </trans-unit>
        <trans-unit id="3273615e0d9f1a028c3a5cef8cc50901a513ea6d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property to the &lt;code&gt;HeroesComponent&lt;/code&gt; for a hero named &quot;Windstorm.&quot;</source>
          <target state="translated">&quot; &lt;code&gt;HeroesComponent&lt;/code&gt; &quot;이라는 &lt;code&gt;hero&lt;/code&gt; 의 영웅 속성을 HeroesComponent 에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="fb815b37da4170c9251a154ccd7f101a8dd58cc3" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property, preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt; () 데코레이터 앞에 &lt;code&gt;hero&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="69dd6f97661bf507742e04c4dec2321055ba1ead" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;highlightColor&lt;/code&gt; property to the directive class like this:</source>
          <target state="translated">다음과 같이 &lt;code&gt;highlightColor&lt;/code&gt; 속성을 지시문 클래스에 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="effefff8a43380c9868d530aa7177bf7e683d5be" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;name&lt;/code&gt; attribute to each form-input control.</source>
          <target state="translated">각 양식 입력 컨트롤에 &lt;code&gt;name&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="daee761e14a6d096302bcb9b00298daacb4fb0f4" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;redirect&lt;/code&gt; route that translates the initial relative URL (&lt;code&gt;''&lt;/code&gt;) to the desired default path (&lt;code&gt;/heroes&lt;/code&gt;).</source>
          <target state="translated">초기 상대 URL ( &lt;code&gt;''&lt;/code&gt; )을 원하는 기본 경로 ( &lt;code&gt;/heroes&lt;/code&gt; )로 변환 하는 &lt;code&gt;redirect&lt;/code&gt; 경로를 추가 합니다 .</target>
        </trans-unit>
        <trans-unit id="fdb1a55cca337dcbbc924e4007ede18ee678b8b7" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;resolve&lt;/code&gt; object to the component's &lt;code&gt;route&lt;/code&gt; configuration.</source>
          <target state="translated">구성 요소의 &lt;code&gt;route&lt;/code&gt; 구성에 &lt;code&gt;resolve&lt;/code&gt; 개체를 추가 합니다 .</target>
        </trans-unit>
        <trans-unit id="8304c6b9c747fb294f214dc50a4427c23e2355cf" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;useFactory&lt;/code&gt; provider with that factory function.</source>
          <target state="translated">해당 팩토리 함수 로 &lt;code&gt;useFactory&lt;/code&gt; 제공자를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b81c844dbf17b7c6764af67e1b67f3cd93c194a2" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;viewProviders&lt;/code&gt; array and inject the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class, too, but give &lt;code&gt;emoji&lt;/code&gt; a different value. Here, it has a value of 🐶 (puppy).</source>
          <target state="translated">&lt;code&gt;viewProviders&lt;/code&gt; 배열을 추가 하고 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 클래스에도 &lt;code&gt;AnimalService&lt;/code&gt; 를 삽입 하되 &lt;code&gt;emoji&lt;/code&gt; 에 다른 값을 지정하십시오. 여기에서 값은 🐶 (강아지)입니다.</target>
        </trans-unit>
        <trans-unit id="e26a42f22a4f00731aa00214bf7e956bd46b73b0" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;viewProviders&lt;/code&gt; array with a third animal, 🦔 (hedgehog), to the &lt;code&gt;app.component.ts&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata:</source>
          <target state="translated">세 번째 동물 인 🦔 (고슴도치)가 있는 &lt;code&gt;viewProviders&lt;/code&gt; 배열을 &lt;code&gt;app.component.ts&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 메타 데이터에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0809d1c91317af80188c3279f6943dddacff5baf" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;Dashboard&lt;/em&gt; view.</source>
          <target state="translated">&lt;em&gt;대시 보드&lt;/em&gt; 보기를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="4ff1fb620609d244c46e936c77a53c5496ded93f" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;go back&lt;/em&gt; button to the bottom of the component template and bind it to the component's &lt;code&gt;goBack()&lt;/code&gt; method.</source>
          <target state="translated">컴포넌트 템플리트의 맨 아래에 &lt;em&gt;돌아 가기&lt;/em&gt; 단추를 추가 하고 컴포넌트의 &lt;code&gt;goBack()&lt;/code&gt; 메소드에 바인드하십시오 .</target>
        </trans-unit>
        <trans-unit id="1322afa34cceab2fcb9586335d92cdcade328a40" translate="yes" xml:space="preserve">
          <source>Add a &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; guard that only loads the &lt;code&gt;AdminModule&lt;/code&gt; once the user is logged in &lt;em&gt;and&lt;/em&gt; attempts to access the admin feature area.</source>
          <target state="translated">추가 &lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 의&lt;/strong&gt; 유일한 부하 있다는 가드 &lt;code&gt;AdminModule&lt;/code&gt; 사용자 한번가 로그인 &lt;em&gt;및&lt;/em&gt; 시도 관리자 기능 영역에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36f9e17f822a223539dae26ca1231dffbb479235" translate="yes" xml:space="preserve">
          <source>Add a &lt;strong&gt;wildcard&lt;/strong&gt; route to intercept invalid URLs and handle them gracefully. A &lt;em&gt;wildcard&lt;/em&gt; route has a path consisting of two asterisks. It matches &lt;em&gt;every&lt;/em&gt; URL. The router will select &lt;em&gt;this&lt;/em&gt; route if it can't match a route earlier in the configuration. A wildcard route can navigate to a custom &quot;404 Not Found&quot; component or &lt;a href=&quot;router#redirect&quot;&gt;redirect&lt;/a&gt; to an existing route.</source>
          <target state="translated">&lt;strong&gt;와일드 카드&lt;/strong&gt; 경로를 추가하여 유효하지 않은 URL을 가로 채고 정상적으로 처리하십시오. &lt;em&gt;와일드&lt;/em&gt; 경로는 두 별표로 이루어진 경로를 갖는다. &lt;em&gt;모든&lt;/em&gt; URL 과 일치 &lt;em&gt;합니다&lt;/em&gt; . 라우터가 구성의 초기 경로와 일치하지 않으면 &lt;em&gt;이&lt;/em&gt; 경로 를 선택 합니다. 와일드 카드 경로는 사용자 지정 &quot;404 찾을 수 없음&quot;구성 요소로 이동하거나 기존 경로로 &lt;a href=&quot;router#redirect&quot;&gt;리디렉션&lt;/a&gt; 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb9ad994a306d5e3f0dac069d6b525c6144c6e51" translate="yes" xml:space="preserve">
          <source>Add a binding to the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; template to visualize the result:</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 템플릿에 바인딩을 추가 하여 결과를 시각화하십시오.</target>
        </trans-unit>
        <trans-unit id="185c4f471b2e40e64ba5f97bb89a83cc6b2e41f8" translate="yes" xml:space="preserve">
          <source>Add a button so users can share a product with friends. Bind the button's &lt;code&gt;click&lt;/code&gt; event to the &lt;code&gt;share()&lt;/code&gt; method (in &lt;code&gt;product-list.component.ts&lt;/code&gt;). Event binding uses a set of parentheses, &lt;code&gt;( )&lt;/code&gt;, around the event, as in the following &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">사용자가 친구와 제품을 공유 할 수 있도록 버튼을 추가하십시오. 버튼의 &lt;code&gt;click&lt;/code&gt; 이벤트를 &lt;code&gt;share()&lt;/code&gt; 메서드 ( &lt;code&gt;product-list.component.ts&lt;/code&gt; )에 바인딩 합니다. 이벤트 바인딩은 다음 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 요소 에서와 같이 이벤트 주위 에 괄호 &lt;code&gt;( )&lt;/code&gt; 세트를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="bdc953992c09d61b11a1e734a2904d5cc5a5c716" translate="yes" xml:space="preserve">
          <source>Add a button with the label &quot;Buy&quot;, and bind the &lt;code&gt;click()&lt;/code&gt; event to the &lt;code&gt;addToCart()&lt;/code&gt; method:</source>
          <target state="translated">레이블이 &quot;Buy&quot;인 버튼을 추가하고 &lt;code&gt;click()&lt;/code&gt; 이벤트를 &lt;code&gt;addToCart()&lt;/code&gt; 메소드에 바인딩 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f3a862c0909767facfe88f9a549e1ffdfd8b1ad" translate="yes" xml:space="preserve">
          <source>Add a cart component, which displays the items in the cart.</source>
          <target state="translated">카트에있는 항목을 표시하는 카트 구성 요소를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="5aa434bbd8551556eff7a3a10609f92a7b4c69c1" translate="yes" xml:space="preserve">
          <source>Add a cart component, which displays the items you added to your cart.</source>
          <target state="translated">장바구니에 추가 한 품목을 표시하는 장바구니 구성 요소를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d7c6983360c85102afcd7cd7c6c276e29242b247" translate="yes" xml:space="preserve">
          <source>Add a click event binding</source>
          <target state="translated">클릭 이벤트 바인딩 추가</target>
        </trans-unit>
        <trans-unit id="cef39296159e8e7b5c240bc8238ac9d8c6ae5109" translate="yes" xml:space="preserve">
          <source>Add a click event binding to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; like this:</source>
          <target state="translated">다음과 같이 클릭 이벤트 바인딩을 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="63187bdb091b40565887c341d3fb7ca17b0df008" translate="yes" xml:space="preserve">
          <source>Add a conditional error message to the &lt;em&gt;name&lt;/em&gt; input box, as in the following example.</source>
          <target state="translated">다음 예와 같이 &lt;em&gt;이름&lt;/em&gt; 입력 상자에 조건부 오류 메시지를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="a822817b55404ecf7fe71067c767e4fcf31ccac2" translate="yes" xml:space="preserve">
          <source>Add a control to this form.</source>
          <target state="translated">이 폼에 컨트롤을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="cab59b94246c9a18905faa353a28be60f5eab5a2" translate="yes" xml:space="preserve">
          <source>Add a control to this group.</source>
          <target state="translated">이 그룹에 컨트롤을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="2d89a7d5583b52b6d6525b3b34eeef56c38af48a" translate="yes" xml:space="preserve">
          <source>Add a dashboard navigation link to the &lt;code&gt;AppComponent&lt;/code&gt; shell template, just above the &lt;em&gt;Heroes&lt;/em&gt; link.</source>
          <target state="translated">&lt;em&gt;영웅&lt;/em&gt; 링크 바로 위의 &lt;code&gt;AppComponent&lt;/code&gt; 쉘 템플리트에 대시 보드 탐색 링크를 추가 하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee94227c33c07e1c24e4e5adb5f118a15e9e65a0" translate="yes" xml:space="preserve">
          <source>Add a dashboard view</source>
          <target state="translated">대시 보드보기 추가</target>
        </trans-unit>
        <trans-unit id="4e39c4f6ceec4b4b2e4e3361f85b74f7b3b28895" translate="yes" xml:space="preserve">
          <source>Add a default route</source>
          <target state="translated">기본 경로 추가</target>
        </trans-unit>
        <trans-unit id="9719bf1b8a8fa35bc215db281ad48dfa08278aab" translate="yes" xml:space="preserve">
          <source>Add a details section</source>
          <target state="translated">세부 사항 섹션 추가</target>
        </trans-unit>
        <trans-unit id="e612a293c0724c3508c59b5b89399bdae8f9a904" translate="yes" xml:space="preserve">
          <source>Add a group of controls to this form.</source>
          <target state="translated">이 폼에 컨트롤 그룹을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="020929122421e2ed06e78a6cb3615837244cecd8" translate="yes" xml:space="preserve">
          <source>Add a link from the cart page to the shipping page:</source>
          <target state="translated">장바구니 페이지에서 운송 페이지로 연결되는 링크를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="7ab064c1e28e4aa58137cb1bd7fa31f6addde323" translate="yes" xml:space="preserve">
          <source>Add a link from the cart view to the shipping view:</source>
          <target state="translated">장바구니보기에서 배송보기로 링크를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="1b09296091f649517aef9c1ef93b3afd99d35b64" translate="yes" xml:space="preserve">
          <source>Add a nav bar to the shell template with anchor tags, &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">앵커 태그, &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; 지시문 을 사용하여 탐색 모음을 쉘 템플리트에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="2bbee8538ab17d504f4be598d200c8c3b2e7a0ae" translate="yes" xml:space="preserve">
          <source>Add a navigation link (&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">탐색 링크 추가 ( &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b367e5a23e3448e784824d7af249cabb9ee76d03" translate="yes" xml:space="preserve">
          <source>Add a new hero</source>
          <target state="translated">새로운 영웅 추가</target>
        </trans-unit>
        <trans-unit id="40835f4ea8b193fb5050ee0b06e0a4cdd3c9dfdf" translate="yes" xml:space="preserve">
          <source>Add a private &lt;code&gt;heroService&lt;/code&gt; parameter of type &lt;code&gt;HeroService&lt;/code&gt; to the constructor.</source>
          <target state="translated">개인 추가 &lt;code&gt;heroService&lt;/code&gt; 의 형식의 매개 변수 &lt;code&gt;HeroService&lt;/code&gt; 을 생성자에.</target>
        </trans-unit>
        <trans-unit id="4b762a4f2ebf8ababf82b0c9189c42e653747928" translate="yes" xml:space="preserve">
          <source>Add a route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches a path to the &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; 의 경로와 일치하는 경로를 &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab28df382c483b738a050fc59f245b4da3452fff" translate="yes" xml:space="preserve">
          <source>Add a router outlet to tell the Angular router where to place the activated components in the DOM.</source>
          <target state="translated">라우터 콘센트를 추가하여 활성화 된 구성 요소를 DOM에 배치 할 위치를 Angular 라우터에 알리십시오.</target>
        </trans-unit>
        <trans-unit id="f6ab96d92bcf27538444f441c451dab0fe97ae2b" translate="yes" xml:space="preserve">
          <source>Add a second &lt;strong&gt;input&lt;/strong&gt; property to &lt;code&gt;HighlightDirective&lt;/code&gt; called &lt;code&gt;defaultColor&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;defaultColor&lt;/code&gt; 라는 &lt;code&gt;HighlightDirective&lt;/code&gt; 에 두 번째 &lt;strong&gt;입력&lt;/strong&gt; 특성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="0360118b87d7c084a3d4de92fd385ba9d82b44a8" translate="yes" xml:space="preserve">
          <source>Add a secondary route</source>
          <target state="translated">보조 경로 추가</target>
        </trans-unit>
        <trans-unit id="67f2d5ad7d4c0f53d3994b3037346c2b3a7dabae" translate="yes" xml:space="preserve">
          <source>Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to retrieve shipping data from a &lt;code&gt;.json&lt;/code&gt; file.</source>
          <target state="translated">운송 구성 요소를 추가하십시오. Angular의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;.json&lt;/code&gt; 파일 에서 운송 데이터를 검색 하여 장바구니의 항목에 대한 운송 가격 을 검색 하십시오.</target>
        </trans-unit>
        <trans-unit id="df85b17cb0ee99d3e13548d05a32d7c0a58b916a" translate="yes" xml:space="preserve">
          <source>Add a wildcard route to intercept invalid URLs and handle them gracefully. A wildcard route has a path consisting of two asterisks. It matches every URL. Thus, the router selects this wildcard route if it can't match a route earlier in the configuration. A wildcard route can navigate to a custom &quot;404 Not Found&quot; component or &lt;a href=&quot;router-tutorial-toh#redirect&quot;&gt;redirect&lt;/a&gt; to an existing route.</source>
          <target state="translated">유효하지 않은 URL을 가로 채서 정상적으로 처리하려면 와일드 카드 경로를 추가하세요. 와일드 카드 경로에는 두 개의 별표로 구성된 경로가 있습니다. 모든 URL과 일치합니다. 따라서 라우터는 구성의 이전 경로와 일치 할 수없는 경우이 와일드 카드 경로를 선택합니다. 와일드 카드 경로는 사용자 지정 &quot;404 찾을 수 없음&quot;구성 요소로 이동하거나 기존 경로로 &lt;a href=&quot;router-tutorial-toh#redirect&quot;&gt;리디렉션&lt;/a&gt; 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6670b3ecbb4947a0775a0511be5562a2546551aa" translate="yes" xml:space="preserve">
          <source>Add a worker creation snippet in a sibling file of the same name.</source>
          <target state="translated">동일한 이름의 형제 파일에 작업자 작성 스 니펫을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="53a090c0cbe5f393b4f72c0d53099df40e3e19ee" translate="yes" xml:space="preserve">
          <source>Add additional messages to hero service</source>
          <target state="translated">Hero 서비스에 추가 메시지 추가</target>
        </trans-unit>
        <trans-unit id="8a72840865c6d30c75b7583a9277122b64be3c06" translate="yes" xml:space="preserve">
          <source>Add an &quot;Admin&quot; link to the &lt;code&gt;AppComponent&lt;/code&gt; shell so that users can get to this feature.</source>
          <target state="translated">사용자가이 기능에 액세스 할 수 있도록 &lt;code&gt;AppComponent&lt;/code&gt; 쉘에 &quot;관리자&quot;링크를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="a91ab35b602db9385b1ae8779a44b0cd6b1984e1" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; at the top,</source>
          <target state="translated">상단에 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="24c4502c2264205bcee1737bc30aa0ee46ca9d07" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;&lt;a href=&quot;../api/router/scroll#anchor&quot;&gt;anchor&lt;/a&gt;&lt;/code&gt; element so you can jump to a certain point on the page.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/scroll#anchor&quot;&gt;anchor&lt;/a&gt;&lt;/code&gt; 요소를 추가하면 페이지의 특정 지점으로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7d4ba0fb65e47e4771cc8eb4c3813048bf92910" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;anchor&lt;/code&gt; element so you can jump to a certain point on the page.</source>
          <target state="translated">페이지의 특정 지점으로 이동할 수 있도록 &lt;code&gt;anchor&lt;/code&gt; 요소를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="10310394c0ff287daff71666336f98250844947c" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;animations&lt;/code&gt; array to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata that contains the &lt;code&gt;slideInAnimation&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;animations&lt;/code&gt; 받는 배열 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 포함 메타 데이터 &lt;code&gt;slideInAnimation&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="b6710fdef5071c7587eb69e5c4821c27c6547053" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;animations&lt;/code&gt; array to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata's that contains the &lt;code&gt;slideInAnimation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slideInAnimation&lt;/code&gt; 이 포함 된 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; 메타 데이터에 &lt;code&gt;animations&lt;/code&gt; 배열을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0511deb3d9404e119de6815d1e1fb84dc05c2ca" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;ngSubmit&lt;/code&gt; event listener to the &lt;code&gt;form&lt;/code&gt; tag with the &lt;code&gt;onSubmit()&lt;/code&gt; callback method.</source>
          <target state="translated">&lt;code&gt;onSubmit()&lt;/code&gt; 콜백 메소드 를 사용하여 &lt;code&gt;ngSubmit&lt;/code&gt; 이벤트 리스너를 &lt;code&gt;form&lt;/code&gt; 태그에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3ec368ee4d735782b2fa273a86fd1b22faf2bdd" translate="yes" xml:space="preserve">
          <source>Add an &lt;em&gt;item&lt;/em&gt; node for your guide page as a child of the appropriate &lt;em&gt;header&lt;/em&gt; node. It probably looks something like this one.</source>
          <target state="translated">가이드 페이지 의 &lt;em&gt;항목&lt;/em&gt; 노드를 적절한 &lt;em&gt;헤더&lt;/em&gt; 노드 의 하위로 추가 하십시오. 아마도 이것과 비슷할 것입니다.</target>
        </trans-unit>
        <trans-unit id="72b3e470d4f46dc5b655b73f7cb688598b57a288" translate="yes" xml:space="preserve">
          <source>Add an admin feature module</source>
          <target state="translated">관리 기능 모듈 추가</target>
        </trans-unit>
        <trans-unit id="065d79ddcd8ef4cbfce2bde87eff9b4a21deb35b" translate="yes" xml:space="preserve">
          <source>Add an outlet named &quot;popup&quot; in the &lt;code&gt;AppComponent&lt;/code&gt;, directly below the unnamed outlet.</source>
          <target state="translated">이름 이없는 콘센트 바로 아래의 &lt;code&gt;AppComponent&lt;/code&gt; 에 &quot;popup&quot;이라는 콘센트를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3ad9fae4902afb2d22aab11c7c7122afe3cb1b3" translate="yes" xml:space="preserve">
          <source>Add and remove CSS class names from an element's &lt;code&gt;class&lt;/code&gt; attribute with a &lt;strong&gt;class binding&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;클래스 바인딩&lt;/strong&gt; 을 사용하여 요소의 &lt;code&gt;class&lt;/code&gt; 속성 에서 CSS 클래스 이름을 추가하고 제거하십시오 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebc7d586988be901bf1dcd135e15130d4271ae30" translate="yes" xml:space="preserve">
          <source>Add another feature module</source>
          <target state="translated">다른 기능 모듈 추가</target>
        </trans-unit>
        <trans-unit id="83553ff42a9fe1b0b7cd5ccc05916aaaf1b48824" translate="yes" xml:space="preserve">
          <source>Add application styles</source>
          <target state="translated">응용 프로그램 스타일 추가</target>
        </trans-unit>
        <trans-unit id="6874ce7f78e90d16a31435155e6fa0b2b97fdd6c" translate="yes" xml:space="preserve">
          <source>Add bindings to the &lt;code&gt;ChildComponent&lt;/code&gt; and the &lt;code&gt;AppComponent&lt;/code&gt; templates. In the &lt;code&gt;ChildComponent&lt;/code&gt; template, add the following binding:</source>
          <target state="translated">&lt;code&gt;ChildComponent&lt;/code&gt; 및 &lt;code&gt;AppComponent&lt;/code&gt; 템플릿에 바인딩을 추가합니다 . 에서 &lt;code&gt;ChildComponent&lt;/code&gt; 의 템플릿, 다음과 같은 바인딩을 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="6e92e364ebed8c2a5a1a8e64de16ee2cc836b8bd" translate="yes" xml:space="preserve">
          <source>Add custom CSS for visual feedback</source>
          <target state="translated">시각적 피드백을위한 사용자 정의 CSS 추가</target>
        </trans-unit>
        <trans-unit id="558badc8a9869f5c75cbd78715d1c871dd8f4a13" translate="yes" xml:space="preserve">
          <source>Add custom CSS to provide visual feedback on the status.</source>
          <target state="translated">상태에 대한 시각적 피드백을 제공하려면 사용자 정의 CSS를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8fd1501a03328a721bc2b3c83701735e84f6e4de" translate="yes" xml:space="preserve">
          <source>Add custom CSS to provide visual feedback.</source>
          <target state="translated">시각적 피드백을 제공하기 위해 사용자 정의 CSS를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b11bcc0560cc0fedef2d7534656122746af6fdc3" translate="yes" xml:space="preserve">
          <source>Add dashboard link to the shell</source>
          <target state="translated">셸에 대시 보드 링크 추가</target>
        </trans-unit>
        <trans-unit id="4cd616df747d101eb1e05b09e9806cae816c5dd5" translate="yes" xml:space="preserve">
          <source>Add definitions for the &lt;code&gt;ng-*&lt;/code&gt; CSS classes.</source>
          <target state="translated">&lt;code&gt;ng-*&lt;/code&gt; CSS 클래스에 대한 정의를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="4baa429880b9ffc3372db13f7438523250984f35" translate="yes" xml:space="preserve">
          <source>Add editable fields to update a model with two-way data binding.</source>
          <target state="translated">양방향 데이터 바인딩으로 모델을 업데이트하려면 편집 가능한 필드를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b8182a8c9da9e5a40dc463384bfe15403d49fc19" translate="yes" xml:space="preserve">
          <source>Add guard and resolver service providers to the NgModule's providers.</source>
          <target state="translated">NgModule의 공급자에 가드 및 리졸버 서비스 공급자를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="a4f062174e363530ba2b7114cc81bec10ce69af3" translate="yes" xml:space="preserve">
          <source>Add helpful descriptions and meanings</source>
          <target state="translated">유용한 설명 및 의미 추가</target>
        </trans-unit>
        <trans-unit id="2eaeed60de365bb5468814ae23f30eb82eac1d08" translate="yes" xml:space="preserve">
          <source>Add heroes functionality</source>
          <target state="translated">영웅 기능 추가</target>
        </trans-unit>
        <trans-unit id="91c46c8ac0746a670e328085f340040aed238b68" translate="yes" xml:space="preserve">
          <source>Add in-app navigation with routing</source>
          <target state="translated">라우팅으로 앱 내 탐색 추가</target>
        </trans-unit>
        <trans-unit id="e17ca50f78ba999694962acd9cd433f915376536" translate="yes" xml:space="preserve">
          <source>Add input fields for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; attribute binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; form controls for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; to their input fields. The final complete component is as follows:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;address&lt;/code&gt; 대한 입력 필드를 추가 합니다 . &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 속성 바인딩을 사용하여 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;address&lt;/code&gt; 에 대한 &lt;code&gt;checkoutForm&lt;/code&gt; 양식 컨트롤을 입력 필드 에 바인딩 합니다. 최종 완성 된 구성 요소는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="913bb1292105665155e69ec153ed609204adeb60" translate="yes" xml:space="preserve">
          <source>Add input fields for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; attribute binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; form controls for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; to their input fields. The final complete component is shown below:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;address&lt;/code&gt; 에 대한 입력 필드를 추가하십시오 . &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 속성 바인딩을 사용하여 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;address&lt;/code&gt; 에 대한 &lt;code&gt;checkoutForm&lt;/code&gt; 양식 컨트롤을 입력 필드 에 바인딩하십시오 . 최종 구성 요소는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3a872bc80b94d603f69ec286fe3c8a03eaf19a91" translate="yes" xml:space="preserve">
          <source>Add logic to handle the validation status.</source>
          <target state="translated">유효성 검사 상태를 처리하는 논리를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="ab141913508f673f30373ec22d2f90af03bb1c3c" translate="yes" xml:space="preserve">
          <source>Add only &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes to an NgModule's &lt;code&gt;declarations&lt;/code&gt; list.</source>
          <target state="translated">단지 추가 &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;신고 할&lt;/a&gt; NgModule의에 클래스를 &lt;code&gt;declarations&lt;/code&gt; 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ccae50a19752da301fe31954fbb8425f6cac0c8e" translate="yes" xml:space="preserve">
          <source>Add or remove several CSS classes simultaneously with &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; 와 동시에 여러 CSS 클래스를 추가하거나 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="04098c5df332b887b1b69ea6a9b2bb0ae8f0620c" translate="yes" xml:space="preserve">
          <source>Add powers with &lt;code&gt;*ngFor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*ngFor&lt;/code&gt; 로 파워 추가</target>
        </trans-unit>
        <trans-unit id="110d8765a212752a0d788afe8d11d67a8aeca05a" translate="yes" xml:space="preserve">
          <source>Add private CSS styles to &lt;code&gt;hero-search.component.css&lt;/code&gt; as listed in the &lt;a href=&quot;toh-pt6#herosearchcomponent&quot;&gt;final code review&lt;/a&gt; below.</source>
          <target state="translated">아래 의 &lt;a href=&quot;toh-pt6#herosearchcomponent&quot;&gt;최종 코드 검토에&lt;/a&gt; 나열된대로 개인 CSS 스타일을 &lt;code&gt;hero-search.component.css&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d9462e914b11dbf729d242f7fe08726e37f909a" translate="yes" xml:space="preserve">
          <source>Add router configuration to the NgModule's import.</source>
          <target state="translated">NgModule의 가져 오기에 라우터 구성을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="83258ee6700fe22a4bb3a97f03d2dfde8f15d1db" translate="yes" xml:space="preserve">
          <source>Add routing (a URL pattern) for the cart component.</source>
          <target state="translated">카트 구성 요소에 대한 라우팅 (URL 패턴)을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="315a11c2127d0033673c94374becd4aaec9a355d" translate="yes" xml:space="preserve">
          <source>Add schematics</source>
          <target state="translated">회로도 추가</target>
        </trans-unit>
        <trans-unit id="47b444c3155edf48537081c48320158b81013f10" translate="yes" xml:space="preserve">
          <source>Add search to the Dashboard</source>
          <target state="translated">대시 보드에 검색 추가</target>
        </trans-unit>
        <trans-unit id="c77793aecadc69eab86def982b0073cbb93f4891" translate="yes" xml:space="preserve">
          <source>Add services</source>
          <target state="translated">서비스 추가</target>
        </trans-unit>
        <trans-unit id="407c4e4ebc265f1152ba29994434476ffa6b1e82" translate="yes" xml:space="preserve">
          <source>Add similar &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; bindings and &lt;code&gt;name&lt;/code&gt; attributes to &lt;em&gt;Alter Ego&lt;/em&gt; and &lt;em&gt;Hero Power&lt;/em&gt;. You'll ditch the input box binding message and add a new binding (at the top) to the component's &lt;code&gt;diagnostic&lt;/code&gt; property. Then you can confirm that two-way data binding works &lt;em&gt;for the entire hero model&lt;/em&gt;.</source>
          <target state="translated">비슷한 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 바인딩 및 &lt;code&gt;name&lt;/code&gt; 속성을 &lt;em&gt;Alter Ego&lt;/em&gt; 및 &lt;em&gt;Hero Power에 추가하십시오&lt;/em&gt; . 입력 상자 바인딩 메시지를 버리고 구성 요소의 &lt;code&gt;diagnostic&lt;/code&gt; 속성에 새 바인딩 (맨 위)을 추가 합니다. 그런 다음 &lt;em&gt;전체 영웅 모델에&lt;/em&gt; 양방향 데이터 바인딩이 작동하는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2bc0af17437367030e939964625be667cfb010e1" translate="yes" xml:space="preserve">
          <source>Add similar &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; bindings and &lt;code&gt;name&lt;/code&gt; attributes to &lt;strong&gt;Alter Ego&lt;/strong&gt; and &lt;strong&gt;Hero Power&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Alter Ego&lt;/strong&gt; 및 &lt;strong&gt;Hero Power에&lt;/strong&gt; 유사한 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 바인딩 및 &lt;code&gt;name&lt;/code&gt; 속성을 추가합니다 .&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2b3f86b38cb2dde1ef5065d8b22c6e0110a2bcf" translate="yes" xml:space="preserve">
          <source>Add slashes to the end of the name.</source>
          <target state="translated">이름 끝에 슬래시를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8cd936bcdf1c06fd74532b527176e8c812700cb2" translate="yes" xml:space="preserve">
          <source>Add slashes to the end of the name. It is now touched and dirty.</source>
          <target state="translated">이름 끝에 슬래시를 추가하십시오. 이제 만져지고 더러워졌습니다.</target>
        </trans-unit>
        <trans-unit id="0550c5a07a1c0dcc7a56e45baf44916075288a7a" translate="yes" xml:space="preserve">
          <source>Add some styles to apply when the list item is selected.</source>
          <target state="translated">목록 항목을 선택할 때 적용 할 스타일을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="c5414ad2c5935b6f6b81963ba55375bf2c13950b" translate="yes" xml:space="preserve">
          <source>Add support for legacy browsers like Internet Explorer using differential loading.</source>
          <target state="translated">차등로드를 사용하여 Internet Explorer와 같은 레거시 브라우저에 대한 지원을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4e25fad2d2863d50af41e193a0affb5fba19770a" translate="yes" xml:space="preserve">
          <source>Add template files</source>
          <target state="translated">템플릿 파일 추가</target>
        </trans-unit>
        <trans-unit id="45494eaf3d2416a77062c0b4d0001d67e91ffd3a" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element just after the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for this application, set the &lt;code&gt;href&lt;/code&gt; value in &lt;code&gt;index.html&lt;/code&gt; as shown here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그 바로 뒤에 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 요소를 추가합니다 . 경우 &lt;code&gt;app&lt;/code&gt; 폴더가 응용 프로그램 루트 인은이 응용 프로그램이기 때문에, 설정된 &lt;code&gt;href&lt;/code&gt; 가치 &lt;code&gt;index.html&lt;/code&gt; 을을 다음과 같이.</target>
        </trans-unit>
        <trans-unit id="7f9455fdcd2db20256999a9379ce57b8a990d6ed" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element just after the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for this application, set the &lt;code&gt;href&lt;/code&gt; value in &lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt;&lt;em&gt;exactly&lt;/em&gt; as shown here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그 바로 뒤에 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 요소를 추가하십시오 . 경우 &lt;code&gt;app&lt;/code&gt; 폴더가 응용 프로그램 루트 인은이 응용 프로그램이기 때문에, 설정된 &lt;code&gt;href&lt;/code&gt; 가치를 &lt;strong&gt; &lt;code&gt;index.html&lt;/code&gt; 을&lt;/strong&gt;&lt;em&gt; 정확히&lt;/em&gt; 다음과 같이.&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="401b47aa633ce6fd0108939ca4e6362163b1958e" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, using two-way data binding syntax &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">양방향 데이터 바인딩 구문 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt; &lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt; )] = &quot;...&quot;을 사용하여 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="a95c1b1b2b94b9931f706ade782f0c64278d07c6" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; object to the &lt;code&gt;router.navigate()&lt;/code&gt; method that navigates you to the &lt;code&gt;/login&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; 객체를 &lt;code&gt;router.navigate()&lt;/code&gt; 메서드에 추가하여 &lt;code&gt;/login&lt;/code&gt; 경로로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="7809d7d93d8d8c2ef77c8d40851c147a8ae0bdb9" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; 지시문을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="e83a0d78e320049911e3936af97267e19e1e5a5d" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; hero property</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; hero 속성을 추가하십시오</target>
        </trans-unit>
        <trans-unit id="1238288f2af7671f7984451ba7bf6b13fe071ab7" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;@angular/fire&lt;/code&gt; schematics that will handle your deployment using &lt;code&gt;ng add @angular/fire&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;@angular/fire&lt;/code&gt; 사용하여 배포 처리 할 회로도 &lt;code&gt;ng add @angular/fire&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5dce54b9215c3ca22af64b7a5b4aa23a1c6a8ec3" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;AppRoutingModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="524c94c18049eabcf94b120aa354fd0d2d3c943c" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;Guard&lt;/code&gt; to the crisis detail route in &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; array property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; 배열 특성을 사용하여 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 의 위기 세부 경로에 &lt;code&gt;Guard&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b6c098652257e821945f213c328182f48fad2b1" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;Guard&lt;/code&gt; to the crisis detail route in &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; using the &lt;code&gt;canDeactivate&lt;/code&gt; array property.</source>
          <target state="translated">&lt;code&gt;canDeactivate&lt;/code&gt; 배열 속성을 사용하여 Crisis &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 의 위기 세부 경로에 &lt;code&gt;Guard&lt;/code&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="1003fe175e2dd94446095c09e6b6620803939a0d" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;LoginComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LoginComponent&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="ccc1be62085ec733e656d1b1b5ebeed7389554e8" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; strategy to the &lt;code&gt;AppRoutingModule&lt;/code&gt; providers array so it can be injected elsewhere in the app.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; 공급자 배열에 &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 전략을 추가하여 앱의 다른 곳에 주입 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="03e48913a9f5fd74a227113197dc26c859b66743" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; strategy to the &lt;code&gt;AppRoutingModule&lt;/code&gt; providers array so you can inject it elsewhere in the app.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; 공급자 배열에 &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 전략을 추가하여 앱의 다른 곳에 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="480a9d9da11c13fa2186a0678c4789bf9795fb33" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;address&lt;/code&gt; form group containing the &lt;code&gt;street&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;zip&lt;/code&gt; fields to the &lt;code&gt;ProfileEditor&lt;/code&gt; template.</source>
          <target state="translated">&lt;code&gt;street&lt;/code&gt; , &lt;code&gt;city&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;zip&lt;/code&gt; 필드를 포함 하는 &lt;code&gt;address&lt;/code&gt; 양식 그룹을 &lt;code&gt;ProfileEditor&lt;/code&gt; 템플리트에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="9c7c31da3e750a8e32a8e1508ea2c5877158d643" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;delete()&lt;/code&gt; handler to the component class.</source>
          <target state="translated">컴포넌트 클래스에 &lt;code&gt;delete()&lt;/code&gt; 핸들러를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="537fee4674204d15546023152c655ac018628fc3" translate="yes" xml:space="preserve">
          <source>Add the &lt;em&gt;CheckmarkPipe&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;CheckmarkPipe&lt;/em&gt; 추가&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c4a17c685f9166b6dd73f21ad74478ecc3dfb360" translate="yes" xml:space="preserve">
          <source>Add the &lt;em&gt;LoginComponent&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;LoginComponent&lt;/em&gt; 추가&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e595eb4e5629fba187523d4d67334582bb922a69" translate="yes" xml:space="preserve">
          <source>Add the Angular router</source>
          <target state="translated">각도 라우터 추가</target>
        </trans-unit>
        <trans-unit id="a7067487bde72912bc32222bb63da44e0cbe00b4" translate="yes" xml:space="preserve">
          <source>Add the Bootstrap CSS file to the &quot;styles&quot; array:</source>
          <target state="translated">부트 스트랩 CSS 파일을 &quot;styles&quot;배열에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="788a7f1435d8e605cc5c4f56a0f055007ae60c45" translate="yes" xml:space="preserve">
          <source>Add the Router Outlet</source>
          <target state="translated">라우터 콘센트 추가</target>
        </trans-unit>
        <trans-unit id="6ecf7d301e120b4a58d039786905132e5b7b17ca" translate="yes" xml:space="preserve">
          <source>Add the ability to navigate between the &lt;em&gt;Heroes&lt;/em&gt; and &lt;em&gt;Dashboard&lt;/em&gt; views.</source>
          <target state="translated">&lt;em&gt;영웅&lt;/em&gt; 과 &lt;em&gt;대시 보드&lt;/em&gt; 보기 사이를 탐색하는 기능을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7e2426390337e60becf33182abe694cadb9fe52" translate="yes" xml:space="preserve">
          <source>Add the click event handler</source>
          <target state="translated">클릭 이벤트 핸들러 추가</target>
        </trans-unit>
        <trans-unit id="ad72b9c6abfbbbe3312d99a3bff6e2256f92606e" translate="yes" xml:space="preserve">
          <source>Add the component class name to the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">구성 요소 클래스 이름을 &lt;code&gt;declarations&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7151a548f087adf025cecc68ba3a8f52d7eca575" translate="yes" xml:space="preserve">
          <source>Add the dashboard route</source>
          <target state="translated">대시 보드 경로 추가</target>
        </trans-unit>
        <trans-unit id="203ca6f461ddbefc62dfa3039a19792cf63cca55" translate="yes" xml:space="preserve">
          <source>Add the default route somewhere &lt;em&gt;above&lt;/em&gt; the wildcard route. It's just above the wildcard route in the following excerpt showing the complete &lt;code&gt;appRoutes&lt;/code&gt; for this milestone.</source>
          <target state="translated">와일드 카드 경로 &lt;em&gt;위&lt;/em&gt; 의 기본 경로를 추가하십시오 . 이 이정표에 대한 전체 &lt;code&gt;appRoutes&lt;/code&gt; 를 보여주는 다음 발췌에서 와일드 카드 경로 바로 위에 있습니다.</target>
        </trans-unit>
        <trans-unit id="1963c978d5e21dc9c5425538a9a4b6bab6b449a0" translate="yes" xml:space="preserve">
          <source>Add the factory function</source>
          <target state="translated">공장 기능 추가</target>
        </trans-unit>
        <trans-unit id="de4bb5213e63549ca334089fd56344bb1e599059" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;[class.selected]&lt;/code&gt; binding to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; in the &lt;code&gt;HeroesComponent&lt;/code&gt; template:</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 템플릿 의 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 에 다음 &lt;code&gt;[class.selected]&lt;/code&gt; 바인딩을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="55dd3db3ee551d474ca23cf2dbe6f03b7eb5e979" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;addHero()&lt;/code&gt; method to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 클래스에 다음 &lt;code&gt;addHero()&lt;/code&gt; 메소드를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b77ba07b5fce74196dfb8de6a7815fe316e12807" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;import&lt;/code&gt; statement.</source>
          <target state="translated">다음 &lt;code&gt;import&lt;/code&gt; 문을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="4a15eb2536beea1005cec68501c5559c0ee70f4b" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;onSelect()&lt;/code&gt; method, which assigns the clicked hero from the template to the component's &lt;code&gt;selectedHero&lt;/code&gt;.</source>
          <target state="translated">템플릿에서 클릭 한 영웅을 구성 요소의 &lt;code&gt;selectedHero&lt;/code&gt; 에 할당 하는 다음 &lt;code&gt;onSelect()&lt;/code&gt; 메소드를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f0f064872909e5f0fc82d9a7616bf06812ac7126" translate="yes" xml:space="preserve">
          <source>Add the following HTML &lt;em&gt;immediately below&lt;/em&gt; the &lt;em&gt;Alter Ego&lt;/em&gt; group:</source>
          <target state="translated">다음 HTML을 추가 &lt;em&gt;바로 아래 &lt;/em&gt;&lt;em&gt;다른 자아의&lt;/em&gt; 그룹 :</target>
        </trans-unit>
        <trans-unit id="fc2589b5414b85cb1ff857bc45f360f5639642cf" translate="yes" xml:space="preserve">
          <source>Add the following button element to the &lt;code&gt;HeroesComponent&lt;/code&gt; template, after the hero name in the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">반복되는 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소 에서 히어로 이름 뒤에 다음 버튼 요소를 &lt;code&gt;HeroesComponent&lt;/code&gt; 템플리트에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="5a6f4e757eee5977b078ed8e00ea18bb9638517d" translate="yes" xml:space="preserve">
          <source>Add the following code in &lt;code&gt;src/typings.d.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src/typings.d.ts&lt;/code&gt; 에 다음 코드를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f9c0b60ec7201d990150eef8aa94f1107e3b4fa5" translate="yes" xml:space="preserve">
          <source>Add the following code in &lt;code&gt;src/typings.d.ts&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;src/typings.d.ts&lt;/code&gt; 에 다음 코드를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="f21cce86ef93d7473d26a8919f3461df9e29a091" translate="yes" xml:space="preserve">
          <source>Add the following code to your &lt;code&gt;svg.component.svg&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;svg.component.svg&lt;/code&gt; 파일에 다음 코드를 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="ddce7ccd00ce11e7e21a51a655f19868eb056b89" translate="yes" xml:space="preserve">
          <source>Add the following code to your factory function.</source>
          <target state="translated">팩토리 함수에 다음 코드를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="4a57f8275852a186fdbefe442695b8d49e11f67f" translate="yes" xml:space="preserve">
          <source>Add the following content to the new proxy file:</source>
          <target state="translated">새 프록시 파일에 다음 내용을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="c9605c6de77435b086651273344bcc1d56aa9255" translate="yes" xml:space="preserve">
          <source>Add the following imports:</source>
          <target state="translated">다음 가져 오기를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="24d2ab2e1d0674bcd525ac4301acb8cfc9897f1d" translate="yes" xml:space="preserve">
          <source>Add the following to your &lt;code&gt;devDependencies&lt;/code&gt; in your project's &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">프로젝트 &lt;code&gt;package.json&lt;/code&gt; 의 &lt;code&gt;devDependencies&lt;/code&gt; 에 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="093cec2b9274476c658b86701d9081c197fcc8c6" translate="yes" xml:space="preserve">
          <source>Add the localize package</source>
          <target state="translated">현지화 패키지 추가</target>
        </trans-unit>
        <trans-unit id="cfc67cd7835b7089b0b3a8304bb309cd413d6260" translate="yes" xml:space="preserve">
          <source>Add the new file to the project as a sibling to &lt;code&gt;index.html&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; 의 형제로 프로젝트에 새 파일을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="1051e7b41c871379ce9f035916034c6c6d41c45c" translate="yes" xml:space="preserve">
          <source>Add the product descriptions. On the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, use an &lt;code&gt;*&lt;a href=&quot;api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive so that Angular only creates the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element if the current product has a description.</source>
          <target state="translated">제품 설명을 추가하십시오. 온 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 소자, 사용 &lt;code&gt;*&lt;a href=&quot;api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 의 각도 만 생성되도록 지정을 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 현재의 제품에 대한 설명이있는 경우 소자.</target>
        </trans-unit>
        <trans-unit id="68d5651877a44ba3f24e7ccef506aa087346b4af" translate="yes" xml:space="preserve">
          <source>Add the same &lt;code&gt;AuthGuard&lt;/code&gt; to the &lt;code&gt;component-less&lt;/code&gt; admin route to protect all other child routes at one time instead of adding the &lt;code&gt;AuthGuard&lt;/code&gt; to each route individually.</source>
          <target state="translated">&lt;code&gt;AuthGuard&lt;/code&gt; 를 각 경로에 개별적 으로 추가하는 대신 동일한 모든 &lt;code&gt;AuthGuard&lt;/code&gt; 를 &lt;code&gt;component-less&lt;/code&gt; 관리 경로에 추가하여 한 번에 다른 모든 하위 경로를 보호하십시오 .</target>
        </trans-unit>
        <trans-unit id="95f5018ed753f06b9ceefdb141d293d3fb786ae4" translate="yes" xml:space="preserve">
          <source>Add the services as private variables to the constructor so that Angular injects them (makes them visible to the component).</source>
          <target state="translated">생성자에 서비스를 개인 변수로 추가하여 Angular가 서비스를 주입하도록합니다 (구성 요소에 표시되도록 함).</target>
        </trans-unit>
        <trans-unit id="5ccc80ef1b883c021ac46ae3dea76bdc9c94b772" translate="yes" xml:space="preserve">
          <source>Add the template HTML below after the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; closing the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 다음에 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; 요소를 닫은 후 템플리트 HTML을 아래에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb92c4abe8557f2d7d345a6632fbe74200e43fb6" translate="yes" xml:space="preserve">
          <source>Add the validator to the field in the form.</source>
          <target state="translated">양식의 필드에 유효성 검사기를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0fd30c6a13796e411d8a941f42d23c96bdea73d9" translate="yes" xml:space="preserve">
          <source>Add these class definitions to a new &lt;code&gt;forms.css&lt;/code&gt; file.</source>
          <target state="translated">이러한 클래스 정의를 새 &lt;code&gt;forms.css&lt;/code&gt; 파일에 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="08992a4a5c9ccd87853e5a2dd74a7b308e8abe90" translate="yes" xml:space="preserve">
          <source>Add this &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; element to the &lt;code&gt;index.html&lt;/code&gt;. It replaces the old AngularJS &lt;code&gt;ng-view&lt;/code&gt; directive:</source>
          <target state="translated">이 &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; 요소를 &lt;code&gt;index.html&lt;/code&gt; 에 추가하십시오 . 이전 AngularJS &lt;code&gt;ng-view&lt;/code&gt; 지시문을 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="5e6c651992023e2db1bf098d75f8e5904243eb40" translate="yes" xml:space="preserve">
          <source>Add this directive to the &lt;code&gt;declarations&lt;/code&gt; array of the AppModule.</source>
          <target state="translated">이 지시문을 AppModule 의 &lt;code&gt;declarations&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="2da14b8396dcda84eb7c24d80f95149fdd93d513" translate="yes" xml:space="preserve">
          <source>Add your routes to your application.</source>
          <target state="translated">애플리케이션에 경로를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="922675049b014ebfcdc115bb25996b2e9a66d549" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;&amp;lt;live-example&amp;gt;&amp;lt;/live-example&amp;gt;&lt;/code&gt; to the page generates the two default links.</source>
          <target state="translated">추가 &lt;code&gt;&amp;lt;live-example&amp;gt;&amp;lt;/live-example&amp;gt;&lt;/code&gt; 페이지가 두 개의 기본 링크를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e2243e38c9b9d2d491ac653861f42e3b0679135a" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;export&lt;/code&gt; doesn't work when the compiler needs the &lt;em&gt;actual value&lt;/em&gt; in order to generate code. For example, it doesn't work for the &lt;code&gt;template&lt;/code&gt; property.</source>
          <target state="translated">컴파일러 에서 코드를 생성하기 위해 &lt;em&gt;실제 값이&lt;/em&gt; 필요한 경우 &lt;code&gt;export&lt;/code&gt; 추가 가 작동하지 않습니다 . 예를 들어, &lt;code&gt;template&lt;/code&gt; 속성 에서는 작동하지 않습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="51ebe15885e1d23542dd2ea65ca996d65c2d207b" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;export&lt;/code&gt; often works for variables referenced in metadata such as &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;animations&lt;/code&gt; because the compiler can generate &lt;em&gt;references&lt;/em&gt; to the exported variables in these expressions. It doesn't need the &lt;em&gt;values&lt;/em&gt; of those variables.</source>
          <target state="translated">컴파일러는 이러한 표현식에서 내 보낸 변수에 &lt;em&gt;대한 참조&lt;/em&gt; 를 생성 할 수 있으므로 &lt;code&gt;export&lt;/code&gt; 추가하면 &lt;code&gt;providers&lt;/code&gt; 및 &lt;code&gt;animations&lt;/code&gt; 과 같은 메타 데이터에서 참조되는 변수에 종종 작동합니다 . 해당 변수 의 &lt;em&gt;값&lt;/em&gt; 이 필요하지 않습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="73c05dea2f6045a6ab0b0141f2228bfae1da4a5e" translate="yes" xml:space="preserve">
          <source>Adding The Angular Router And Bootstrap</source>
          <target state="translated">각도 라우터 및 부트 스트랩 추가</target>
        </trans-unit>
        <trans-unit id="42cdd7c85ef202bd8e15530db8d1f015839230b7" translate="yes" xml:space="preserve">
          <source>Adding a 404 page</source>
          <target state="translated">404 페이지 추가</target>
        </trans-unit>
        <trans-unit id="8b07e292ec36cfffa9bf6db5c80ac3f1e704fabc" translate="yes" xml:space="preserve">
          <source>Adding a Web Worker</source>
          <target state="translated">웹 워커 추가</target>
        </trans-unit>
        <trans-unit id="283a5c95ad520ccd21cbdbc93a6bfeef280fcc02" translate="yes" xml:space="preserve">
          <source>Adding a basic form control</source>
          <target state="translated">기본 양식 컨트롤 추가</target>
        </trans-unit>
        <trans-unit id="3797d75eea052400c99af56aab9acb4efe36e4d2" translate="yes" xml:space="preserve">
          <source>Adding a hero results in a new hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. The spy's &lt;code&gt;ngOnInit()&lt;/code&gt; logs that event.</source>
          <target state="translated">영웅을 추가하면 새로운 영웅 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 이 생성 됩니다. 스파이의 &lt;code&gt;ngOnInit()&lt;/code&gt; 해당 이벤트를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="28d2a7e95c52e8a42120833923f4cf54d6029d23" translate="yes" xml:space="preserve">
          <source>Adding a library to the runtime global scope</source>
          <target state="translated">런타임 글로벌 범위에 라이브러리 추가</target>
        </trans-unit>
        <trans-unit id="d3ccff775835290c3a128ace87621dd407763a67" translate="yes" xml:space="preserve">
          <source>Adding a maximum length validator</source>
          <target state="translated">최대 길이 검사기 추가</target>
        </trans-unit>
        <trans-unit id="494a8737b67971dffa71048bb3c7fb3bea9dd8a9" translate="yes" xml:space="preserve">
          <source>Adding a minimum length validator</source>
          <target state="translated">최소 길이 검사기 추가</target>
        </trans-unit>
        <trans-unit id="f16c1a5e99ec210cafaff11287b5840cc4a99091" translate="yes" xml:space="preserve">
          <source>Adding a pattern validator</source>
          <target state="translated">패턴 검사기 추가</target>
        </trans-unit>
        <trans-unit id="721e3edbe8fdc9ba83d0bbb1713c2a14187f993d" translate="yes" xml:space="preserve">
          <source>Adding a redirect</source>
          <target state="translated">리디렉션 추가</target>
        </trans-unit>
        <trans-unit id="9e46d1f4ff66b89003f86bb0e3b35dbd3f8f9747" translate="yes" xml:space="preserve">
          <source>Adding a required checkbox validator using template-driven forms</source>
          <target state="translated">템플릿 기반 양식을 사용하여 필수 확인란 검사기 추가</target>
        </trans-unit>
        <trans-unit id="fb58a5f686b6ace9b126e4f8cb5d3bc1407c9241" translate="yes" xml:space="preserve">
          <source>Adding a required validator using template-driven forms</source>
          <target state="translated">템플릿 기반 양식을 사용하여 필수 유효성 검사기 추가</target>
        </trans-unit>
        <trans-unit id="ff1dd5c0e9955484dceb4a5b434bb9221bf949cf" translate="yes" xml:space="preserve">
          <source>Adding a schematic to a collection</source>
          <target state="translated">컬렉션에 회로도 추가</target>
        </trans-unit>
        <trans-unit id="91d669aa4d61f96fec2573e664601ea346ab6c18" translate="yes" xml:space="preserve">
          <source>Adding a service worker to your project</source>
          <target state="translated">프로젝트에 서비스 워커 추가</target>
        </trans-unit>
        <trans-unit id="658030002117a761f4fc3965eb3cb02b87cd7749" translate="yes" xml:space="preserve">
          <source>Adding a target</source>
          <target state="translated">대상 추가</target>
        </trans-unit>
        <trans-unit id="877cefe11f29758cc9d580dce08f1554b6d0419d" translate="yes" xml:space="preserve">
          <source>Adding a web worker</source>
          <target state="translated">웹 작업자 추가</target>
        </trans-unit>
        <trans-unit id="6525e7fcbcff7c4689063f7e684e4f978b5680bf" translate="yes" xml:space="preserve">
          <source>Adding an &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; property binding to &lt;code&gt;currentClasses&lt;/code&gt; sets the element's classes accordingly:</source>
          <target state="translated">&lt;code&gt;currentClasses&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; 속성 바인딩을 추가하면 그에 따라 요소의 클래스가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9b6d9feaeaa572aa7a12cbeeb46228faa046d0bc" translate="yes" xml:space="preserve">
          <source>Adding an &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; property binding to &lt;code&gt;currentStyles&lt;/code&gt; sets the element's styles accordingly:</source>
          <target state="translated">&lt;code&gt;currentStyles&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; 속성 바인딩을 추가하면 그에 따라 요소의 스타일이 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="b3fcd62ed94aad6b449fe5d37db647399301bd22" translate="yes" xml:space="preserve">
          <source>Adding an alias</source>
          <target state="translated">별명 추가</target>
        </trans-unit>
        <trans-unit id="be0779a18da1ecedddf53b5dd41b56034940339f" translate="yes" xml:space="preserve">
          <source>Adding an email validator</source>
          <target state="translated">이메일 검사기 추가</target>
        </trans-unit>
        <trans-unit id="5873fb7b91415ba593dcaeb0713567140d858f49" translate="yes" xml:space="preserve">
          <source>Adding and removing the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; disables and enables the button. However, the value of the &lt;em&gt;attribute&lt;/em&gt; is irrelevant, which is why you cannot enable a button by writing &lt;code&gt;&amp;lt;button disabled=&quot;false&quot;&amp;gt;Still Disabled&amp;lt;/button&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;속성을&lt;/em&gt; 추가 및 제거 하면 버튼이 비활성화되고 활성화됩니다. 그러나 &lt;em&gt;속성&lt;/em&gt; 값 은 관련이 없으므로 &lt;code&gt;&amp;lt;button disabled=&quot;false&quot;&amp;gt;Still Disabled&amp;lt;/button&amp;gt;&lt;/code&gt; 을 작성하여 버튼을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="648930c2950fb0406df768753faa95e49e3c3c19" translate="yes" xml:space="preserve">
          <source>Adding and updating headers</source>
          <target state="translated">헤더 추가 및 업데이트</target>
        </trans-unit>
        <trans-unit id="414790a41b5fe4974982ea7d7a722b357bb14c4e" translate="yes" xml:space="preserve">
          <source>Adding animations to the routed component</source>
          <target state="translated">라우팅 된 구성 요소에 애니메이션 추가</target>
        </trans-unit>
        <trans-unit id="fda140b3f5d36ebc641033e4026894261eb9a06a" translate="yes" xml:space="preserve">
          <source>Adding components for routing</source>
          <target state="translated">라우팅을위한 구성 요소 추가</target>
        </trans-unit>
        <trans-unit id="690cf519534e614e173d15c737ef28e58825c554" translate="yes" xml:space="preserve">
          <source>Adding cross-validation to reactive forms</source>
          <target state="translated">반응 양식에 교차 검증 추가</target>
        </trans-unit>
        <trans-unit id="4bf3c593121d22498ba07ac28983dbfb969dc27f" translate="yes" xml:space="preserve">
          <source>Adding cross-validation to template-driven forms</source>
          <target state="translated">템플릿 기반 양식에 교차 유효성 검사 추가</target>
        </trans-unit>
        <trans-unit id="d38e641d4284fc56ac2105390c8e04c9bcc24c74" translate="yes" xml:space="preserve">
          <source>Adding custom validators to reactive forms</source>
          <target state="translated">반응 형 양식에 사용자 정의 유효성 검사기 추가</target>
        </trans-unit>
        <trans-unit id="2d30307baa7c6ec2b5ec92c7f1425e1e5c3e35a9" translate="yes" xml:space="preserve">
          <source>Adding custom validators to template-driven forms</source>
          <target state="translated">템플릿 기반 양식에 사용자 지정 유효성 검사기 추가</target>
        </trans-unit>
        <trans-unit id="d91d275ac43cb2fc356c392e516cde5427ae957f" translate="yes" xml:space="preserve">
          <source>Adding headers</source>
          <target state="translated">헤더 추가</target>
        </trans-unit>
        <trans-unit id="fbda794fe69b52e8ca3b23d8ba75916fc4762eb1" translate="yes" xml:space="preserve">
          <source>Adding navigation</source>
          <target state="translated">탐색 추가</target>
        </trans-unit>
        <trans-unit id="0c2ebad7a136b54e97bbbca2a675a16b3e11a5cd" translate="yes" xml:space="preserve">
          <source>Adding or removing controls from a form array</source>
          <target state="translated">폼 배열에서 컨트롤 추가 또는 제거</target>
        </trans-unit>
        <trans-unit id="a492d6ac1e58e89d4043aee23965954b03767c9f" translate="yes" xml:space="preserve">
          <source>Adding routable animations</source>
          <target state="translated">라우팅 가능한 애니메이션 추가</target>
        </trans-unit>
        <trans-unit id="e51afa8885ddb250bc942ce4e7bb672819fa4c34" translate="yes" xml:space="preserve">
          <source>Adding text bindings into i18n translations that are not present in the source template itself will throw a runtime error (previously, including extra bindings in translations was permitted).</source>
          <target state="translated">소스 템플릿 자체에없는 i18n 번역에 텍스트 바인딩을 추가하면 런타임 오류가 발생합니다 (이전에는 번역에 추가 바인딩이 허용됨).</target>
        </trans-unit>
        <trans-unit id="44098854a5d46f22020dccf5f5c7b58428f76dad" translate="yes" xml:space="preserve">
          <source>Adding the configured &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt; is sufficient for minimal route configurations. However, as the application grows, &lt;a href=&quot;router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;refactor the routing configuration&lt;/a&gt; into a separate file and create a &lt;a href=&quot;router-tutorial-toh#routing-module&quot;&gt;Routing Module&lt;/a&gt;. A routing module is a special type of &lt;code&gt;Service Module&lt;/code&gt; dedicated to routing.</source>
          <target state="translated">구성된 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;AppModule&lt;/code&gt; 에 추가하면 최소한의 경로 구성에 충분합니다. 그러나 애플리케이션이 성장함에 &lt;a href=&quot;router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;따라 라우팅 구성&lt;/a&gt; 을 별도의 파일로 리팩터링하고 &lt;a href=&quot;router-tutorial-toh#routing-module&quot;&gt;라우팅 모듈을&lt;/a&gt; 생성하십시오 . 라우팅 모듈은 라우팅 전용 &lt;code&gt;Service Module&lt;/code&gt; 의 특별한 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="7afaaaaff6b0338bff5cfe09fad06c92c7b68221" translate="yes" xml:space="preserve">
          <source>Adding the configured &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt; is sufficient for simple route configurations. As the application grows, you'll want to &lt;a href=&quot;router#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;refactor the routing configuration&lt;/a&gt; into a separate file and create a &lt;strong&gt;&lt;a href=&quot;router#routing-module&quot;&gt;Routing Module&lt;/a&gt;&lt;/strong&gt;, a special type of &lt;code&gt;Service Module&lt;/code&gt; dedicated to the purpose of routing in feature modules.</source>
          <target state="translated">간단한 라우터 구성을 위해서는 구성된 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;AppModule&lt;/code&gt; 에 추가하는 것으로 충분합니다. 애플리케이션이 성장함에 따라 &lt;a href=&quot;router#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;라우팅 구성&lt;/a&gt; 을 별도의 파일로 리팩터링하고 기능 모듈의 라우팅을 목적으로 하는 특수한 유형의 &lt;code&gt;Service Module&lt;/code&gt; 인 &lt;strong&gt;&lt;a href=&quot;router#routing-module&quot;&gt;라우팅 모듈을&lt;/a&gt;&lt;/strong&gt; 작성하려고 합니다.</target>
        </trans-unit>
        <trans-unit id="d37533032f719d87e66cb4d921f78f0010ff74bd" translate="yes" xml:space="preserve">
          <source>Adding to reactive forms</source>
          <target state="translated">반응 형에 추가</target>
        </trans-unit>
        <trans-unit id="b1f50c4eeaf9acc84dcece41369d505b6c8bd4aa" translate="yes" xml:space="preserve">
          <source>Adding to template driven forms</source>
          <target state="translated">템플릿 기반 양식에 추가</target>
        </trans-unit>
        <trans-unit id="f741528e94d7a9119da6fdc2d64562b32a16957c" translate="yes" xml:space="preserve">
          <source>Adding to template-driven forms</source>
          <target state="translated">템플릿 기반 양식에 추가</target>
        </trans-unit>
        <trans-unit id="b7115da5ee1dd5dc00ecc6407565a2a418a39adf" translate="yes" xml:space="preserve">
          <source>Adding two-way data binding</source>
          <target state="translated">양방향 데이터 바인딩 추가</target>
        </trans-unit>
        <trans-unit id="6db8ab49fda1d426dada84500bdbaf2cf643416a" translate="yes" xml:space="preserve">
          <source>Additional animation functionality is provided in other Angular modules for animation testing, for route-based animations, and for programmatic animation controls that allow an end user to fast forward and reverse an animation sequence.</source>
          <target state="translated">애니메이션 테스트, 라우트 기반 애니메이션 및 최종 사용자가 애니메이션 시퀀스를 빨리 감거나 되돌릴 수있는 프로그래밍 방식의 애니메이션 컨트롤을 위해 추가 애니메이션 기능이 다른 Angular 모듈에 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="9eacfc7680c8185a25a0e3cdfcd8ab3a2e2abf6f" translate="yes" xml:space="preserve">
          <source>Additional applications and libraries go into a &lt;code&gt;projects&lt;/code&gt; folder in the workspace.</source>
          <target state="translated">추가 응용 프로그램 및 라이브러리 는 작업 공간 의 &lt;code&gt;projects&lt;/code&gt; 폴더 로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="bedd0f993181b4d07bc3bc6af81ff195b60d9f72" translate="yes" xml:space="preserve">
          <source>Additional build and test options</source>
          <target state="translated">추가 빌드 및 테스트 옵션</target>
        </trans-unit>
        <trans-unit id="260fab856b8044e628c955f8e2996502a9cd44c2" translate="yes" xml:space="preserve">
          <source>Additional developer-defined data provided to the component via &lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. By default, no additional data is passed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 를 통해 컴포넌트에 제공되는 추가 개발자 정의 데이터 . 기본적으로 추가 데이터는 전달되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5a5f4834a14c0e07023d98f08f36b4cdc502079c" translate="yes" xml:space="preserve">
          <source>Additional pages and sections describe some basic programming techniques for Angular apps.</source>
          <target state="translated">추가 페이지 및 섹션에서는 Angular 앱에 대한 몇 가지 기본 프로그래밍 기술을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="93ceccadb707587960fc3d2012d50d5f7a465692" translate="yes" xml:space="preserve">
          <source>Additional project-specific configuration files are used by tools, such as &lt;code&gt;package.json&lt;/code&gt; for the &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package manager&lt;/a&gt;, &lt;code&gt;tsconfig.json&lt;/code&gt; for &lt;a href=&quot;glossary#transpile&quot;&gt;TypeScript transpilation&lt;/a&gt;, and &lt;code&gt;tslint.json&lt;/code&gt; for &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;.</source>
          <target state="translated">추가 프로젝트 별 구성 파일과 같은 도구를 사용하는 &lt;code&gt;package.json&lt;/code&gt; 에 대한 &lt;a href=&quot;glossary#npm-package&quot;&gt;NPM 패키지 관리자&lt;/a&gt; , &lt;code&gt;tsconfig.json&lt;/code&gt; 에 대한 &lt;a href=&quot;glossary#transpile&quot;&gt;타이프 라이터의 transpilation&lt;/a&gt; 및 &lt;code&gt;tslint.json&lt;/code&gt; 에 대한 &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a15fa56393dfeea6e8ddbb0e0c2a6f3cc24b93de" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
          <target state="translated">추가 자료</target>
        </trans-unit>
        <trans-unit id="1ff0faf5f35505f92cf1420c27a17de350a98cce" translate="yes" xml:space="preserve">
          <source>Additional section headings</source>
          <target state="translated">추가 섹션 제목</target>
        </trans-unit>
        <trans-unit id="e47b689409182e07809c31b0adadfeb5e600976c" translate="yes" xml:space="preserve">
          <source>Additional strictness flags allow you to enable and disable specific types of strict template type checking. See &lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt;troubleshooting template errors&lt;/a&gt;.</source>
          <target state="translated">추가 엄격 성 플래그를 사용하면 특정 유형의 엄격한 템플릿 유형 검사를 활성화 및 비활성화 할 수 있습니다. &lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt;템플릿 오류 문제 해결을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc4d8802d50adf700ee7745602435ef1dca90b25" translate="yes" xml:space="preserve">
          <source>Additional templates, represented by &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; objects, can define alternative or &lt;em&gt;embedded&lt;/em&gt; views, which can be referenced from multiple components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 객체로 표시되는 추가 템플릿 은 여러 구성 요소에서 참조 할 수있는 대체 또는 &lt;em&gt;포함 된&lt;/em&gt; 뷰를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="088c64e0c38f1273482efc76508d604e23f1b814" translate="yes" xml:space="preserve">
          <source>Additional type information that can be added to the NgElement class, for properties that are added based on the inputs and methods of the underlying component.</source>
          <target state="translated">기본 구성 요소의 입력 및 메소드를 기반으로 추가되는 특성에 대해 NgElement 클래스에 추가 할 수있는 추가 유형 정보입니다.</target>
        </trans-unit>
        <trans-unit id="82315284cec71ac2461e7ad6e31ada0cc3b6903b" translate="yes" xml:space="preserve">
          <source>Additionally, Angular can bundle &lt;em&gt;component styles&lt;/em&gt; with components, enabling a more modular design than regular stylesheets.</source>
          <target state="translated">또한 Angular는 &lt;em&gt;구성 요소 스타일&lt;/em&gt; 을 구성 요소와 번들로 제공하여 일반 스타일 시트보다 모듈 방식으로 설계 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3b6cb992315a8d1d32c6b4d1ab51dfbb9d56994" translate="yes" xml:space="preserve">
          <source>Additionally, add the same to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">또한 &lt;code&gt;AppComponent&lt;/code&gt; 템플릿에 동일하게 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7661d2796641b2435dba5fb54171a642e99cdd2" translate="yes" xml:space="preserve">
          <source>Additionally, if a &lt;code&gt;factory&lt;/code&gt; is specified you can also specify the &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; option, which overrides the above behavior and marks the token as belonging to a particular &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. As mentioned above, &lt;code&gt;'root'&lt;/code&gt; is the default value for &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;factory&lt;/code&gt; 가 지정된 경우 &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 옵션을 지정 하여 위의 동작을 무시하고 토큰을 특정 &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 속하는 것으로 표시 할 수도 있습니다. 위에서 언급했듯이 &lt;code&gt;'root'&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 의 기본값 입니다.</target>
        </trans-unit>
        <trans-unit id="5245afb59dc302a57de59d8190ec202e0f6538c5" translate="yes" xml:space="preserve">
          <source>Additionally, if a &lt;code&gt;factory&lt;/code&gt; is specified you can also specify the &lt;code&gt;providedIn&lt;/code&gt; option, which overrides the above behavior and marks the token as belonging to a particular &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. As mentioned above, &lt;code&gt;'root'&lt;/code&gt; is the default value for &lt;code&gt;providedIn&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;factory&lt;/code&gt; 가 지정된 경우 위의 동작을 재정의하고 토큰이 특정 &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;ngmodule&quot;&gt;NgModule에&lt;/a&gt; 속하는 것으로 표시하는 &lt;code&gt;providedIn&lt;/code&gt; 옵션 도 지정할 수 있습니다 . 위에서 언급했듯이 &lt;code&gt;'root'&lt;/code&gt; 는 &lt;code&gt;providedIn&lt;/code&gt; 의 기본값 입니다.</target>
        </trans-unit>
        <trans-unit id="e0b88e35ac14332a034dbf89e614b7db0e8bcdc3" translate="yes" xml:space="preserve">
          <source>Additionally, you can combine all of the modifiers except &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; and of course &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 및 물론 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 제외한 모든 수정자를 결합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dcbe742fd9c09dceae25ade7dd875522a02fe0b7" translate="yes" xml:space="preserve">
          <source>Additionally, you can combine all of the modifiers except &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; and of course &lt;code&gt;@Skipself()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@Skipself()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 제외한 모든 수정자를 결합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="451e70bdf0857a9eb4b8c2da5e6655131127aab1" translate="yes" xml:space="preserve">
          <source>Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.</source>
          <target state="translated">숫자 값을 기반으로 DOM 하위 트리를 추가 / 제거합니다. 복수형에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="f61a37a92c2c3bd50a6b27f14df53a5edffb0311" translate="yes" xml:space="preserve">
          <source>Adds a developer-defined type to the filename, in the format &quot;name.type.ts&quot;.</source>
          <target state="translated">&quot;name.type.ts&quot;형식으로 파일 이름에 개발자 정의 유형을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6f5e15f33e44ddcdc5cfe51d4943af58290c22aa" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">새 &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; 지시문 인스턴스를 양식에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d24328bc2deef9fdef91cbbfdd2400a31dd071a7" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">새 &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 지시문 인스턴스를 양식에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="2204ef6786c6b08dbd91058a06e9d433c1331369" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">새로운 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 지시어 인스턴스를 폼에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="26134db49e40fbb9d7a014790a01d0a514b896a3" translate="yes" xml:space="preserve">
          <source>Adds and removes CSS classes on an HTML element.</source>
          <target state="translated">HTML 요소에서 CSS 클래스를 추가하고 제거합니다.</target>
        </trans-unit>
        <trans-unit id="6b369330aa93ce181ea1ffaa2ac04418c236585a" translate="yes" xml:space="preserve">
          <source>Adds directives and providers for in-app navigation among views defined in an application. Use the Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to declaratively specify application states and manage state transitions.</source>
          <target state="translated">애플리케이션에 정의 된보기 간의 인앱 탐색을위한 지시문 및 공급자를 추가합니다. Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서비스를 사용하여 애플리케이션 상태를 선언적으로 지정하고 상태 전환을 관리합니다.</target>
        </trans-unit>
        <trans-unit id="21531783082d0830f3fb1f45fe62788a90adf2b3" translate="yes" xml:space="preserve">
          <source>Adds directives and providers for in-app navigation among views defined in an application. Use the Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to declaratively specify application states and manage state transitions.</source>
          <target state="translated">애플리케이션에 정의 된보기 간의 인앱 탐색을위한 지시문 및 공급자를 추가합니다. Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서비스를 사용하여 애플리케이션 상태를 선언적으로 지정하고 상태 전환을 관리합니다.</target>
        </trans-unit>
        <trans-unit id="cd7e636e1f1b30f6355bd2d646250762388c223f" translate="yes" xml:space="preserve">
          <source>Adds duration options to control animation styling and timing for a child animation.</source>
          <target state="translated">하위 애니메이션의 애니메이션 스타일 및 타이밍을 제어하는 ​​지속 시간 옵션을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="2b895b67b8ce76b68d05dcf6666168717ad32953" translate="yes" xml:space="preserve">
          <source>Adds guard and resolver service providers to the module's providers.</source>
          <target state="translated">가드 및 리졸버 서비스 제공자를 모듈의 제공자에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="755299c48d7bf746122237e386cb6af5c4ba8328" translate="yes" xml:space="preserve">
          <source>Adds meta tags for &lt;code&gt;theme-color&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;theme-color&lt;/code&gt; 의 메타 태그를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="968fdcd37c8a10fb41a3f93fc08b5a74ea4db1e5" translate="yes" xml:space="preserve">
          <source>Adds more details to output logging.</source>
          <target state="translated">출력 로깅에 세부 사항을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="eb181f1de9d0b9f6a3f1c71fa1932a623e310dc3" translate="yes" xml:space="preserve">
          <source>Adds router configuration to the module's imports.</source>
          <target state="translated">라우터 구성을 모듈의 가져 오기에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4df31ffcefb2b65518aaabe80fe3bd9d9f1ff84b" translate="yes" xml:space="preserve">
          <source>Adds router directives and providers.</source>
          <target state="translated">라우터 지시문 및 공급자를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f0837e6c33d87ca045ca5e6f04a38d390052dafe" translate="yes" xml:space="preserve">
          <source>Adds support for HammerJS.</source>
          <target state="translated">HammerJS에 대한 지원을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e937eef586f33048065a6d83817b03c7f5e23029" translate="yes" xml:space="preserve">
          <source>Adds support for an external library to your project.</source>
          <target state="translated">프로젝트에 외부 라이브러리에 대한 지원을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="613165752772588a92addd968d55b1f2bd4c8504" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;@angular/service-worker&lt;/code&gt; package to your project.</source>
          <target state="translated">추가 &lt;code&gt;@angular/service-worker&lt;/code&gt; 프로젝트에 패키지를.</target>
        </trans-unit>
        <trans-unit id="2b4dc2151cde4490334d4e384c13d264bb07f33c" translate="yes" xml:space="preserve">
          <source>Adds the following scaffold code to &lt;code&gt;src/app/app.component.ts&lt;/code&gt; to use the worker.</source>
          <target state="translated">작업자를 사용 하기 위해 &lt;code&gt;src/app/app.component.ts&lt;/code&gt; 에 다음 스캐 폴드 코드를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="1614100c8837c1739c3bf551c37c0891cdb58b9f" translate="yes" xml:space="preserve">
          <source>Adds the following scaffold code to &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; to receive messages.</source>
          <target state="translated">다음 스캐 폴드 코드를 &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; 에 추가하여 메시지를받습니다.</target>
        </trans-unit>
        <trans-unit id="a95ad245bbc008d7cc09cc996f5e65cb58f25cf6" translate="yes" xml:space="preserve">
          <source>Adds the npm package for a published library to your workspace, and configures the project in the current working directory (or the default project if you are not in a project directory) to use that library, as specified by the library's schematic. For example, adding &lt;code&gt;@angular/pwa&lt;/code&gt; configures your project for PWA support:</source>
          <target state="translated">게시 된 라이브러리의 npm 패키지를 작업 공간에 추가하고 라이브러리의 회로도에 지정된대로 현재 작업 디렉토리 (또는 프로젝트 디렉토리에없는 경우 기본 프로젝트)에서 해당 라이브러리를 사용하도록 프로젝트를 구성합니다. 예를 들어 &lt;code&gt;@angular/pwa&lt;/code&gt; 추가하면 PWA 지원을 위해 프로젝트가 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="62b1dbd814dc4f358ea1d7dde27e66fb54fc5e5d" translate="yes" xml:space="preserve">
          <source>Adjusts the styles of the host and child views to control their relative positions during the transition.</source>
          <target state="translated">전환하는 동안 호스트 및 자식보기의 스타일을 조정하여 상대 위치를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="a9597d9ee11a8d07aedf74f517b6b888ccd31d0e" translate="yes" xml:space="preserve">
          <source>Adopt these two conventions in your own projects for &lt;em&gt;every kind&lt;/em&gt; of test file.</source>
          <target state="translated">&lt;em&gt;모든 종류&lt;/em&gt; 의 테스트 파일에 대해 자신의 프로젝트에서이 두 가지 규칙을 채택 하십시오.</target>
        </trans-unit>
        <trans-unit id="f7d73e5d6f0b5c68b5528964b60905cb1e539834" translate="yes" xml:space="preserve">
          <source>Advanced configuration</source>
          <target state="translated">고급 구성</target>
        </trans-unit>
        <trans-unit id="5126940d744a6dff391a643edf858b06f00785ed" translate="yes" xml:space="preserve">
          <source>Advanced usage</source>
          <target state="translated">고급 사용법</target>
        </trans-unit>
        <trans-unit id="b5d3d1aaf47ddd6289313289a44dc070669bfc83" translate="yes" xml:space="preserve">
          <source>Advice for library authors</source>
          <target state="translated">도서관 저자를위한 조언</target>
        </trans-unit>
        <trans-unit id="58096d3b580b40d1f884a9b46c91dffe0e68c327" translate="yes" xml:space="preserve">
          <source>After (choice 1 - use reactive forms):</source>
          <target state="translated">이후 (1 번 선택-반응 형 사용) :</target>
        </trans-unit>
        <trans-unit id="f9921cfd687f0c9e226be2f78a3b062eb0f6a704" translate="yes" xml:space="preserve">
          <source>After (choice 2 - use template-driven forms):</source>
          <target state="translated">이후 (2 번 선택-템플릿 중심 양식 사용) :</target>
        </trans-unit>
        <trans-unit id="3ab47cdfc89bec9fac8c0dee5b75416d76b80716" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;loadComponent()&lt;/code&gt; selects an ad, it uses &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to resolve a &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; for each specific component. The &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; then creates an instance of each component.</source>
          <target state="translated">&lt;code&gt;loadComponent()&lt;/code&gt; 가 광고를 선택한 후 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; 를 사용 하여 각 특정 구성 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 대한 ComponentFactory 를 분석합니다 . &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 는 각 구성 요소의 인스턴스를 생성한다.</target>
        </trans-unit>
        <trans-unit id="9fb00e37b227919be0aad314249b616191ba52b3" translate="yes" xml:space="preserve">
          <source>After a few changes, the &lt;code&gt;BannerComponent&lt;/code&gt; presents a dynamic title by binding to the component's &lt;code&gt;title&lt;/code&gt; property like this.</source>
          <target state="translated">약간의 변경 후에 &lt;code&gt;BannerComponent&lt;/code&gt; 는 다음 과 같이 구성 요소의 &lt;code&gt;title&lt;/code&gt; 속성 에 바인딩하여 동적 제목을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="f52eba13529b700c95fcb5b95431666a75841e79" translate="yes" xml:space="preserve">
          <source>After a few moments, a new project, &lt;code&gt;angular-router-sample&lt;/code&gt;, is ready.</source>
          <target state="translated">잠시 후 새 프로젝트 인 &lt;code&gt;angular-router-sample&lt;/code&gt; 이 준비됩니다.</target>
        </trans-unit>
        <trans-unit id="d73f75b5fbde281c2a56c1e7a51d961f6ce8031e" translate="yes" xml:space="preserve">
          <source>After a navigation completes, the router writes an object containing this value together with a &lt;code&gt;navigationId&lt;/code&gt; to &lt;code&gt;history.state&lt;/code&gt;. The value is written when &lt;code&gt;location.go()&lt;/code&gt; or &lt;code&gt;location.replaceState()&lt;/code&gt; is called before activating this route.</source>
          <target state="translated">네비게이션 완료되면, 라우터는이 값이 함께있는 객체 기록 &lt;code&gt;navigationId&lt;/code&gt; 하는 &lt;code&gt;history.state&lt;/code&gt; 를 . 이 경로를 활성화하기 전에 &lt;code&gt;location.go()&lt;/code&gt; 또는 &lt;code&gt;location.replaceState()&lt;/code&gt; 가 호출 될 때 값이 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="d3b2f342293b83d4653a40d0d03796f8f9357644" translate="yes" xml:space="preserve">
          <source>After asynchronous validation begins, the form control enters a &lt;code&gt;pending&lt;/code&gt; state. You can inspect the control's &lt;code&gt;pending&lt;/code&gt; property and use it to give visual feedback about the ongoing validation operation.</source>
          <target state="translated">비동기 유효성 검사가 시작되면 양식 컨트롤이 &lt;code&gt;pending&lt;/code&gt; 상태가됩니다. 컨트롤의 &lt;code&gt;pending&lt;/code&gt; 속성을 검사하고 이를 사용하여 진행중인 유효성 검사 작업에 대한 시각적 피드백을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b79df42799ec10695c520a6481dd82d8fc694c4e" translate="yes" xml:space="preserve">
          <source>After asynchronous validation begins, the form control enters a &lt;code&gt;pending&lt;/code&gt; state. You can inspect the control's &lt;code&gt;pending&lt;/code&gt; property and use it to give visual feedback about the ongoing validation.</source>
          <target state="translated">비동기 유효성 검사가 시작되면 양식 컨트롤이 &lt;code&gt;pending&lt;/code&gt; 상태가됩니다. 컨트롤의 &lt;code&gt;pending&lt;/code&gt; 속성을 검사하고 이를 사용하여 진행중인 유효성 검사에 대한 시각적 피드백을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d0672649ba42b772c0f758558681bf65c2927e0" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;TestBed.inject&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">호출 한 후 &lt;code&gt;TestBed.inject&lt;/code&gt; 을 의 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 구성은 현재 사양의 기간 동안 동결된다.</target>
        </trans-unit>
        <trans-unit id="1949057a22110c4f9e7c99ac7d9df533785aff6c" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;compileComponents&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">호출 한 후 &lt;code&gt;compileComponents&lt;/code&gt; 을 의 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 구성은 현재 사양의 기간 동안 동결된다.</target>
        </trans-unit>
        <trans-unit id="a643cff95be73e7ada55a9e30505cef7897bfafd" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;get&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">호출 한 후 &lt;code&gt;get&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 구성은 현재 사양의 기간 동안 동결된다.</target>
        </trans-unit>
        <trans-unit id="1fed1c4462312ad23f49ad51074811e7c8bbd213" translate="yes" xml:space="preserve">
          <source>After completing all tutorial steps, the final app will look like this: .</source>
          <target state="translated">모든 자습서 단계를 완료하면 최종 앱은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="696e6cddb6abbbb7365bc7effa9b0e9e22c936f4" translate="yes" xml:space="preserve">
          <source>After configuring &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, you call its &lt;code&gt;createComponent()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 를 구성한 후 &lt;code&gt;createComponent()&lt;/code&gt; 메소드 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="9e0b80f068a3dc7233fd3da3591afc15239e870f" translate="yes" xml:space="preserve">
          <source>After configuring the routes, tell the Angular router where to render the views when matched with a route. You can set a router outlet by inserting a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; container inside the root &lt;code&gt;AppComponent&lt;/code&gt; template.</source>
          <target state="translated">경로를 구성한 후 경로와 일치 할 때 뷰를 렌더링 할 위치를 Angular 라우터에 알려주십시오. 루트 &lt;code&gt;AppComponent&lt;/code&gt; 템플릿 내에 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 컨테이너 를 삽입하여 라우터 콘센트를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2a28e2451f609ec3b8c9cfc853ca69f5800dc42" translate="yes" xml:space="preserve">
          <source>After each &lt;em&gt;successful&lt;/em&gt; navigation, the router looks in its configuration for an unloaded module that it can preload. Whether it preloads a module, and which modules it preloads, depends upon the &lt;em&gt;preload strategy&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;성공적으로&lt;/em&gt; 탐색 한 후에 라우터는 구성에서 미리로드 할 수있는 언로드 된 모듈을 찾습니다. 모듈을 미리로드하는지 여부와 미리로드하는 모듈은 &lt;em&gt;사전로드 전략에&lt;/em&gt; 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="419172c8f41df56ca4ec63737a151d4364c46122" translate="yes" xml:space="preserve">
          <source>After each call, the &lt;code&gt;onKey()&lt;/code&gt; method appends the contents of the input box value to the list in the component's &lt;code&gt;values&lt;/code&gt; property, followed by a separator character (|). The &lt;a href=&quot;template-syntax#interpolation&quot;&gt;interpolation&lt;/a&gt; displays the accumulating input box changes from the &lt;code&gt;values&lt;/code&gt; property.</source>
          <target state="translated">각 호출 후, &lt;code&gt;onKey()&lt;/code&gt; 메소드는 입력 상자 값의 내용을 구성 요소의 &lt;code&gt;values&lt;/code&gt; 특성 목록에 추가 한 다음 분리 문자 (|)를 추가합니다. &lt;a href=&quot;template-syntax#interpolation&quot;&gt;보간&lt;/a&gt; 표시 축적 입력 상자에서 변경된 &lt;code&gt;values&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="86ef0babb7311e7718ffde937912e0848ffb0148" translate="yes" xml:space="preserve">
          <source>After each successful navigation, the router looks in its configuration for an unloaded module that it can preload. Whether it preloads a module, and which modules it preloads, depends upon the preload strategy.</source>
          <target state="translated">탐색이 성공할 때마다 라우터는 구성에서 미리로드 할 수있는 언로드 된 모듈을 찾습니다. 모듈을 사전로드하는지 여부와 사전로드하는 모듈은 사전로드 전략에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="008e39459cd91bca6dfdd98e174699d09c6fccd2" translate="yes" xml:space="preserve">
          <source>After importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; injection token from &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;, write the &lt;code&gt;NoopInterceptor&lt;/code&gt; provider like this:</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; 주입 토큰을 가져온 후 다음과 같이 &lt;code&gt;NoopInterceptor&lt;/code&gt; 제공자를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="83c406a785dd29fda73c73fc2726e47d708215b9" translate="yes" xml:space="preserve">
          <source>After importing the &lt;code&gt;Hero&lt;/code&gt; class, the &lt;code&gt;AppComponent.heroes&lt;/code&gt; property can return a &lt;em&gt;typed&lt;/em&gt; array of &lt;code&gt;Hero&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;Hero&lt;/code&gt; 클래스를 가져온 후 &lt;code&gt;AppComponent.heroes&lt;/code&gt; 속성은 &lt;em&gt;형식이 지정된 &lt;/em&gt; &lt;code&gt;Hero&lt;/code&gt; 객체의 배열을 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="908459e9f22ef8c117d2224aed3f0083328f5571" translate="yes" xml:space="preserve">
          <source>After installing the module, the app will make requests to and receive responses from the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; without knowing that the &lt;em&gt;In-memory Web API&lt;/em&gt; is intercepting those requests, applying them to an in-memory data store, and returning simulated responses.</source>
          <target state="translated">모듈을 설치 한 후 앱은 &lt;em&gt;메모리 내 웹 API&lt;/em&gt; 가 해당 요청을 가로 채고 메모리 내 데이터 저장소에 적용하고 시뮬레이션 된 응답을 반환 한다는 사실을 알지 못하고 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 에 요청을 보내고 응답을받습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7bd34b69bb5906237552bfa55433f2c99da72dca" translate="yes" xml:space="preserve">
          <source>After merging, you can serve each distributable copy of the app using server-side language detection or different subdirectories, as described in the next section about &lt;a href=&quot;i18n#deploy-locales&quot;&gt;deploying multiple locales&lt;/a&gt;.</source>
          <target state="translated">병합 후에는 &lt;a href=&quot;i18n#deploy-locales&quot;&gt;여러 로케일 배포&lt;/a&gt; 에 대한 다음 섹션에 설명 된대로 서버 측 언어 감지 또는 다른 하위 디렉터리를 사용하여 앱의 배포 가능한 각 사본을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4f0baed191f44ae58456adfc0362749f9effe3c0" translate="yes" xml:space="preserve">
          <source>After navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, you expect to see the details of the selected hero. You need &lt;em&gt;two&lt;/em&gt; pieces of information: the routing path to the component and the hero's &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; 로 이동 하면 선택한 영웅의 세부 정보가 표시됩니다. 컴포넌트에 대한 라우팅 경로와 영웅의 &lt;code&gt;id&lt;/code&gt; &lt;em&gt;두&lt;/em&gt; 가지 정보 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="124684c6689f62086ef066ebcbdf42bc37881112" translate="yes" xml:space="preserve">
          <source>After navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, you expect to see the details of the selected hero. You need two pieces of information: the routing path to the component and the hero's &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; 로 이동 한 후 선택한 영웅의 세부 정보를 볼 수 있습니다. 두 가지 정보가 필요합니다. 구성 요소에 대한 라우팅 경로와 Hero의 &lt;code&gt;id&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8891651d49a6b5f2cdf808069ac4a7ebf6ae655d" translate="yes" xml:space="preserve">
          <source>After preparing a template for translation, use the Angular CLI &lt;code&gt;extract-i18n&lt;/code&gt; command to extract the marked text in the template into a &lt;em&gt;source language&lt;/em&gt; file. The marked text includes text marked with &lt;code&gt;i18n&lt;/code&gt; and attributes marked with &lt;code&gt;i18n-&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; as described in the previous section. Follow these steps:</source>
          <target state="translated">번역 할 템플릿을 준비한 후 Angular CLI &lt;code&gt;extract-i18n&lt;/code&gt; 명령을 사용하여 템플릿에 표시된 텍스트를 &lt;em&gt;소스 언어&lt;/em&gt; 파일 로 추출 합니다. 표시된 텍스트 표시된 텍스트 포함 &lt;code&gt;i18n&lt;/code&gt; 및 표시 특성 &lt;code&gt;i18n-&lt;/code&gt; &lt;em&gt;속성&lt;/em&gt; 이전 섹션에서 설명 된 바와 같이. 이 차례를 따라라:</target>
        </trans-unit>
        <trans-unit id="960ce8665627fc91d6bf44ca2315df1872412834" translate="yes" xml:space="preserve">
          <source>After preparing your app for an international audience, use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to localize your app by performing the following tasks:</source>
          <target state="translated">전 세계 사용자를 대상으로 앱을 준비한 후 &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; 를 사용 하여 다음 작업을 수행하여 앱을 현지화합니다.</target>
        </trans-unit>
        <trans-unit id="e5cc19cafc387e05e410e89f41afd0efcd0c1414" translate="yes" xml:space="preserve">
          <source>After putting a few items in the cart, users can now review their items, enter name and address, and submit their purchase:</source>
          <target state="translated">장바구니에 몇 개의 품목을 넣은 후 사용자는 이제 품목을 검토하고 이름과 주소를 입력 한 후 구매를 제출할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f78e3695162eabe7baf026648dfba1227bdde24c" translate="yes" xml:space="preserve">
          <source>After putting a few items in the cart, users can now review their items, enter their name and address, and submit their purchase:</source>
          <target state="translated">장바구니에 몇 가지 항목을 넣은 후 사용자는 이제 항목을 검토하고 이름과 주소를 입력하고 구매를 제출할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e03e757be9acc140f73ee6244153323fd294fc41" translate="yes" xml:space="preserve">
          <source>After reading the contents into a string, parse the configuration into a JSON object, typed to the &lt;code&gt;WorkspaceSchema&lt;/code&gt;.</source>
          <target state="translated">컨텐츠를 문자열로 읽은 후 &lt;code&gt;WorkspaceSchema&lt;/code&gt; 에 입력 된 구성을 JSON 오브젝트로 구문 분석하십시오 .</target>
        </trans-unit>
        <trans-unit id="34315c2a12a11033b196feb54799145cf720a985" translate="yes" xml:space="preserve">
          <source>After reporting the error to the console, the handler constructs a user friendly message and returns a safe value to the app so the app can keep working.</source>
          <target state="translated">콘솔에 오류를보고 한 후 핸들러는 사용자에게 친숙한 메시지를 작성하고 앱에 안전한 값을 반환하여 앱이 계속 작동 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="83d2da68a0ee9c48b717bc70206a4279e94449f1" translate="yes" xml:space="preserve">
          <source>After revision, the core of the form should look like this:</source>
          <target state="translated">수정 후 양식의 핵심은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="8e0baa03c5ec2030c3efd05bc4b8e0cca8e1205f" translate="yes" xml:space="preserve">
          <source>After running this command you will notice that the &lt;code&gt;angular.json&lt;/code&gt; configuration file has been updated to add two new targets, with a few other changes.</source>
          <target state="translated">이 명령을 실행하면 &lt;code&gt;angular.json&lt;/code&gt; 구성 파일이 몇 가지 다른 변경 사항으로 두 개의 새 대상을 추가하도록 업데이트되었음을 ​​알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eac16cd44b7936bb92ae25b6779b27d5c6b96c42" translate="yes" xml:space="preserve">
          <source>After some time passes, the observable chain completes and the async validation is done. The &lt;code&gt;pending&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, and the form validity is updated.</source>
          <target state="translated">일정 시간이 지나면 관찰 가능한 체인이 완료되고 비동기 유효성 검사가 수행됩니다. &lt;code&gt;pending&lt;/code&gt; 플래그가 설정되어 &lt;code&gt;false&lt;/code&gt; , 그리고 양식 유효성 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="a974e632f712d8adbb93b00a5fd9e9171197a717" translate="yes" xml:space="preserve">
          <source>After some time passes, the observable chain completes and the asynchronous validation is done. The &lt;code&gt;pending&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, and the form validity is updated.</source>
          <target state="translated">시간이 지나면 관찰 가능한 체인이 완료되고 비동기 유효성 검사가 완료됩니다. &lt;code&gt;pending&lt;/code&gt; 플래그가 설정되어 &lt;code&gt;false&lt;/code&gt; , 그리고 양식 유효성 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="4cda21b5ba00559965830c79885173ab47e4d5e9" translate="yes" xml:space="preserve">
          <source>After some time, a new version of the app is deployed to the server. This newer version includes the files &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;main.&amp;lt;main-hash-2&amp;gt;.js&lt;/code&gt; and &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-2&amp;gt;.js&lt;/code&gt; (note that the hashes are different now, because the content of the files has changed). The old version is no longer available on the server.</source>
          <target state="translated">잠시 후 새 버전의 앱이 서버에 배포됩니다. 이 최신 버전에는 &lt;code&gt;index.html&lt;/code&gt; , &lt;code&gt;main.&amp;lt;main-hash-2&amp;gt;.js&lt;/code&gt; 및 &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-2&amp;gt;.js&lt;/code&gt; 파일이 포함됩니다 (파일의 내용이 다르기 때문에 해시가 현재 다릅니다 변경되었습니다). 이전 버전은 더 이상 서버에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="01a51cf41f4c8935554a93ce2847c4b25e728651" translate="yes" xml:space="preserve">
          <source>After submit, swap out the finished form for different content on the page.</source>
          <target state="translated">제출 후 완성 된 양식을 페이지의 다른 콘텐츠로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="5fd5602bf74389e7adc143f2ca100a6303afe748" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, add the &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configure it with the &lt;code&gt;InMemoryDataService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 뒤에 &lt;code&gt;AppModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 배열에 &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; 을 추가하고 이를 &lt;code&gt;InMemoryDataService&lt;/code&gt; 로 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="db93e549ab6aee486147223c94fcf8b921e25c93" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; metadata comes the directive's controller class, called &lt;code&gt;HighlightDirective&lt;/code&gt;, which contains the (currently empty) logic for the directive. Exporting &lt;code&gt;HighlightDirective&lt;/code&gt; makes the directive accessible.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 메타 데이터 뒤에는 지시문 에 대한 (현재 비어있는) 논리를 포함하는 &lt;code&gt;HighlightDirective&lt;/code&gt; 라는 지시문의 컨트롤러 클래스가 제공됩니다 . 내보내기 &lt;code&gt;HighlightDirective&lt;/code&gt; 는 지시어 접근 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09df22d81d68e93da0bbcb8201f423cdfa08c85f" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;import&lt;/code&gt; statement, add a &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 문 뒤에 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 데코레이터를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="54bbcb802a76f1768ba4c84338e5804ce691385a" translate="yes" xml:space="preserve">
          <source>After the &lt;em&gt;link parameters array&lt;/em&gt;, add an object with a &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; property set to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The router then calculates the target URL based on the active route's location.</source>
          <target state="translated">&lt;em&gt;링크 매개 변수 배열&lt;/em&gt; 뒤에 &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; 속성이 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 로 설정된 객체를 추가 합니다 . 그런 다음 라우터는 활성 경로의 위치를 ​​기준으로 대상 URL을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="ca29a3e54927c9300e363e2c9f6149f82a71a127" translate="yes" xml:space="preserve">
          <source>After the &lt;em&gt;link parameters array&lt;/em&gt;, add an object with a &lt;code&gt;relativeTo&lt;/code&gt; property set to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The router then calculates the target URL based on the active route's location.</source>
          <target state="translated">&lt;em&gt;링크 매개 변수 배열&lt;/em&gt; 뒤에 &lt;code&gt;relativeTo&lt;/code&gt; 속성이 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 로 설정된 개체를 추가 합니다 . 그런 다음 라우터는 활성 경로의 위치를 ​​기반으로 대상 URL을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="7bf50ab32f282dd4ec21fd3291f4baa2c752ec72" translate="yes" xml:space="preserve">
          <source>After the browser refreshes you can navigate freely between the two views by clicking the links.</source>
          <target state="translated">브라우저를 새로 고친 후 링크를 ​​클릭하여 두보기 사이를 자유롭게 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b526911261e54097bd46512826f0d84fb5a514b" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the app should run as before, showing a list of heroes and a hero detail view when you click on a hero name.</source>
          <target state="translated">브라우저를 새로 고친 후에는 영웅 이름을 클릭하면 앱이 이전과 같이 실행되어 영웅 목록과 영웅 세부 정보보기가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="42fa6cf8b20d6dc5f57b8f4a17f18ee0d574f97d" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the application is broken.</source>
          <target state="translated">브라우저가 새로 고쳐지면 응용 프로그램이 손상됩니다.</target>
        </trans-unit>
        <trans-unit id="46d6f82df55a653f3faad167f152f46db5094bdc" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the list of heroes appears.</source>
          <target state="translated">브라우저가 새로 고쳐지면 영웅 목록이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="bc6532651982e9b93beffa6bd020bc11046b1209" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the list of names reappears. The details area is blank. Click a hero in the list of heroes and its details appear. The app seems to be working again. The heroes appear in a list and details about the clicked hero appear at the bottom of the page.</source>
          <target state="translated">브라우저가 새로 고쳐지면 이름 목록이 다시 나타납니다. 세부 사항 영역이 비어 있습니다. 영웅 목록에서 영웅을 클릭하면 세부 정보가 나타납니다. 앱이 다시 작동하는 것 같습니다. 영웅이 목록에 나타나고 클릭 한 영웅에 대한 세부 정보가 페이지 하단에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="7659d9da0a61e0aae6492e6646b8c9535def19f1" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the router loads the &lt;code&gt;DashboardComponent&lt;/code&gt; and the browser address bar shows the &lt;code&gt;/dashboard&lt;/code&gt; URL.</source>
          <target state="translated">브라우저가 새로 고쳐지면 라우터가 &lt;code&gt;DashboardComponent&lt;/code&gt; 를 로드 하고 브라우저 주소 표시 줄에 &lt;code&gt;/dashboard&lt;/code&gt; URL이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0640fb3fc7fb52ddfb8e650b89dff61362d5f7a6" translate="yes" xml:space="preserve">
          <source>After the command produces an optimal build of your application (equivalent to &lt;code&gt;ng deploy --prod&lt;/code&gt;), it'll upload the production assets to Firebase.</source>
          <target state="translated">이 명령은 애플리케이션의 최적 빌드 ( &lt;code&gt;ng deploy --prod&lt;/code&gt; 와 동일)를 생성 한 후 프로덕션 자산을 Firebase에 업로드합니다.</target>
        </trans-unit>
        <trans-unit id="483b9518a2e29ad9c684bb70f280dcc5ada210de" translate="yes" xml:space="preserve">
          <source>After the end of each successful navigation lifecycle, the router builds a tree of &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; objects that make up the current state of the router. You can access the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; from anywhere in the application using the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service and the &lt;code&gt;&lt;a href=&quot;../api/router/router#routerState&quot;&gt;routerState&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">성공적인 탐색 수명주기가 끝나면 라우터는 라우터 의 현재 상태를 구성하는 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 개체 트리를 만듭니다 . &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서비스 및 &lt;code&gt;&lt;a href=&quot;../api/router/router#routerState&quot;&gt;routerState&lt;/a&gt;&lt;/code&gt; 속성을 사용하여 응용 프로그램의 어느 곳에서나 현재 &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="559cacfa2058938711e1691701393100dccc89aa" translate="yes" xml:space="preserve">
          <source>After the end of each successful navigation lifecycle, the router builds a tree of &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; objects that make up the current state of the router. You can access the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; from anywhere in the application using the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service and the &lt;code&gt;routerState&lt;/code&gt; property.</source>
          <target state="translated">성공적인 탐색 수명주기가 끝나면 라우터는 라우터 의 현재 상태를 구성하는 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 개체 트리를 만듭니다 . &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서비스와 &lt;code&gt;routerState&lt;/code&gt; 속성을 사용하여 응용 프로그램의 어느 곳에서나 현재 &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f5243cfeda101fda77f99ad21d8e0070af98e8a" translate="yes" xml:space="preserve">
          <source>After the import statements is a class with the &lt;strong&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">import 문 뒤에 &lt;strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;&lt;a href=&quot;glossary#decorator&quot;&gt; 데코레이터&lt;/a&gt; 가있는 클래스가있다 .</target>
        </trans-unit>
        <trans-unit id="9971305116ca9c868d98b3be89949b39ec63ad5d" translate="yes" xml:space="preserve">
          <source>After the initial scaffolding, you will need to refactor your code to use the Web Worker by sending messages to and from.</source>
          <target state="translated">초기 스캐 폴딩 후에는 메시지를주고 받아 웹 워커를 사용하도록 코드를 리팩터링해야합니다.</target>
        </trans-unit>
        <trans-unit id="0f5ecb7050161de366e5e91b7e62fd6949d0e0bf" translate="yes" xml:space="preserve">
          <source>After the pluralization category, put the default English text in braces (&lt;code&gt;{}&lt;/code&gt;).</source>
          <target state="translated">복수형 카테고리 다음에 기본 영어 텍스트를 중괄호 ( &lt;code&gt;{}&lt;/code&gt; ) 로 묶습니다 .</target>
        </trans-unit>
        <trans-unit id="6117653ddbcfd36b252b8f52eca81bb3feb255c8" translate="yes" xml:space="preserve">
          <source>After the pluralization category, put the default text (English) within braces (&lt;code&gt;{}&lt;/code&gt;).</source>
          <target state="translated">복수형 범주 뒤에는 기본 텍스트 (영어)를 중괄호 ( &lt;code&gt;{}&lt;/code&gt; ) 안에 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="7aaa7f92f66008daa88b0514882f49868900fff5" translate="yes" xml:space="preserve">
          <source>After the refactoring in this tutorial, &lt;code&gt;HeroesComponent&lt;/code&gt; will be lean and focused on supporting the view. It will also be easier to unit-test with a mock service.</source>
          <target state="translated">이 튜토리얼에서 리팩토링을 &lt;code&gt;HeroesComponent&lt;/code&gt; 는 간결 하고 뷰 지원에 중점을 둡니다. 모의 서비스를 사용하여 단위 테스트를하는 것이 더 쉬울 것입니다.</target>
        </trans-unit>
        <trans-unit id="1607c7514275273290ea2ed08706763dcb961cbf" translate="yes" xml:space="preserve">
          <source>After the transition of all our internal tooling to Ivy has completed, we want to remove the legacy View Engine for smaller Angular conceptual overhead, smaller package size, lower maintenance cost, and lower complexity of the codebase.</source>
          <target state="translated">모든 내부 도구를 Ivy로 전환 한 후, Angular 개념적 오버 헤드를 줄이고, 패키지 크기를 줄이고, 유지 관리 비용을 낮추고, 코드베이스의 복잡성을 낮추기 위해 레거시 View Engine을 제거하려고합니다.</target>
        </trans-unit>
        <trans-unit id="9d71b7bc24e4e4f91a441c9bafe797e0957e6170" translate="yes" xml:space="preserve">
          <source>After these changes, &lt;code&gt;npm start&lt;/code&gt; no longer works. You must choose to configure &lt;em&gt;either&lt;/em&gt; for F5 with IIS &lt;em&gt;or&lt;/em&gt; for &lt;code&gt;npm start&lt;/code&gt; with the lite-server.</source>
          <target state="translated">이러한 변경 후에는 &lt;code&gt;npm start&lt;/code&gt; 가 더 이상 작동하지 않습니다. 당신은 구성에 선택해야 &lt;em&gt;하나&lt;/em&gt; F5를 위해 IIS와 &lt;em&gt;나&lt;/em&gt; 에 대한 &lt;code&gt;npm start&lt;/code&gt; 라이트 서버와.</target>
        </trans-unit>
        <trans-unit id="ab081b5a38b64d0a0f0125f67d617ea6ec938685" translate="yes" xml:space="preserve">
          <source>After these changes, the folder structure is as follows:</source>
          <target state="translated">이러한 변경 후 폴더 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4a81e5af1ec083b54117df3e04dc53564d570b55" translate="yes" xml:space="preserve">
          <source>After these changes, the folder structure looks like this:</source>
          <target state="translated">이러한 변경 후 폴더 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a2667ee7cd16887925dc0a58bfc5a8027ba6483a" translate="yes" xml:space="preserve">
          <source>After these revisions, the form template should look like the following:</source>
          <target state="translated">이러한 수정 후 양식 서식 파일은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="70bfcc0137b88df51dbf757d780aa43b22057bf9" translate="yes" xml:space="preserve">
          <source>After these steps, the &lt;code&gt;AppModule&lt;/code&gt; should look like this:</source>
          <target state="translated">이 단계 후에 &lt;code&gt;AppModule&lt;/code&gt; 은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="271311210f9d7845ddfa1653eb8a3eedc0ea57b8" translate="yes" xml:space="preserve">
          <source>After these steps, the file should look like this.</source>
          <target state="translated">이 단계 후에 파일은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="6d8f89045f7e2acb9275de066e103479b5097428" translate="yes" xml:space="preserve">
          <source>After this, the service is injectable anywhere in AngularJS code:</source>
          <target state="translated">그 후, 서비스는 AngularJS 코드의 어느 곳에 나 주입 가능합니다 :</target>
        </trans-unit>
        <trans-unit id="fcde218b3f76c0d5a06408da878317fa4d98e74a" translate="yes" xml:space="preserve">
          <source>After you build your library and schematics, you can install the schematics collection to run against your project. The steps below show you how to generate a service using the schematic you created above.</source>
          <target state="translated">라이브러리 및 회로도를 빌드 한 후 회로도 컬렉션을 설치하여 프로젝트에 대해 실행할 수 있습니다. 아래 단계는 위에서 생성 한 회로도를 사용하여 서비스를 생성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="39eb8f3e1e50fb4d2205dbbe04a4d31291e11491" translate="yes" xml:space="preserve">
          <source>After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the &lt;code&gt;formControl&lt;/code&gt; binding provided by &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; included in &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">구성 요소 클래스에서 컨트롤을 만든 후에는 템플릿의 폼 컨트롤 요소와 컨트롤을 연결해야합니다. &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 에 포함 된 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 에서 제공 하는 &lt;code&gt;formControl&lt;/code&gt; 바인딩을 사용하여 양식 컨트롤로 템플리트를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4199daa79f54a94136c76ec2bbe71b18bdd5c53" translate="yes" xml:space="preserve">
          <source>After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the &lt;code&gt;formControl&lt;/code&gt; binding provided by &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, which is also included in the &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">구성 요소 클래스에서 컨트롤을 만든 후 템플릿의 양식 컨트롤 요소와 연결해야합니다. &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 에도 포함 된 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 에서 제공 하는 &lt;code&gt;formControl&lt;/code&gt; 바인딩을 사용하여 양식 컨트롤로 템플릿을 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="76d09f5c5a1b31fc0a33ce5c5425e8a7ad874311" translate="yes" xml:space="preserve">
          <source>After you generate this initial scaffold, you must refactor your code to use the web worker by sending messages to and from the worker.</source>
          <target state="translated">이 초기 스캐 폴드를 생성 한 후에는 작업자와 메시지를주고받는 방식으로 웹 작업자를 사용하도록 코드를 리팩터링해야합니다.</target>
        </trans-unit>
        <trans-unit id="fbf361f75395728462ca66efab4faaa84acc5f29" translate="yes" xml:space="preserve">
          <source>After you understand the basic Angular building blocks, you can begin to learn more about the features and tools that are available to help you develop and deliver Angular applications. Here are some key features.</source>
          <target state="translated">기본 Angular 빌딩 블록을 이해 한 후 Angular 응용 프로그램을 개발하고 제공하는 데 사용할 수있는 기능 및 도구에 대해 자세히 알아볼 수 있습니다. 주요 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="71c4f421cb6721f6023e9cb1a29bf2474d332734" translate="yes" xml:space="preserve">
          <source>After you understand the basic Angular building blocks, you can learn more about the features and tools that can help you develop and deliver Angular applications.</source>
          <target state="translated">기본 Angular 빌딩 블록을 이해 한 후에는 Angular 애플리케이션을 개발하고 제공하는 데 도움이되는 기능과 도구에 대해 자세히 알아볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed53a81c228abae3e127057c4f013ec9f3b3b916" translate="yes" xml:space="preserve">
          <source>After you update the model in the component class, update the template to connect the form group instance and its input elements.</source>
          <target state="translated">컴포넌트 클래스에서 모델을 업데이트 한 후 템플리트를 업데이트하여 양식 그룹 인스턴스와 해당 입력 요소를 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="9242fad2522050b6c8f084a728f83cbf3740d7ba" translate="yes" xml:space="preserve">
          <source>After you've set up your app for testing, you may find the following testing guides useful.</source>
          <target state="translated">테스트를 위해 앱을 설정 한 후 다음 테스트 가이드가 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81238a0e0e1b409a73b6a61a83fb32b90b53ec60" translate="yes" xml:space="preserve">
          <source>After your application instantiates a component or directive by calling its constructor, Angular calls the hook methods you have implemented at the appropriate point in the lifecycle of that instance.</source>
          <target state="translated">애플리케이션이 생성자를 호출하여 구성 요소 또는 지시문을 인스턴스화 한 후 Angular는 해당 인스턴스의 수명주기 중 적절한 지점에서 구현 한 후크 메서드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="13f2d652f70945cb85fc5562fc3600a535ffb359" translate="yes" xml:space="preserve">
          <source>After:</source>
          <target state="translated">After:</target>
        </trans-unit>
        <trans-unit id="bf736dd76163b3c028eaca0186965ed06ab740d9" translate="yes" xml:space="preserve">
          <source>AfterContent</source>
          <target state="translated">AfterContent</target>
        </trans-unit>
        <trans-unit id="22e7a3bedea783cbdeab7bd8a1c5c1a6933d48cc" translate="yes" xml:space="preserve">
          <source>AfterContent hooks</source>
          <target state="translated">AfterContent 후크</target>
        </trans-unit>
        <trans-unit id="396ee41ee88aacc341467dae99af0924912509a1" translate="yes" xml:space="preserve">
          <source>AfterContentChecked</source>
          <target state="translated">AfterContentChecked</target>
        </trans-unit>
        <trans-unit id="b2505c44737fd6fda2403d1f31157a2aa14b58ec" translate="yes" xml:space="preserve">
          <source>AfterContentInit</source>
          <target state="translated">AfterContentInit</target>
        </trans-unit>
        <trans-unit id="366ba05d3fa1b33c450e5743e4c241f267857737" translate="yes" xml:space="preserve">
          <source>AfterView</source>
          <target state="translated">AfterView</target>
        </trans-unit>
        <trans-unit id="0e548cdea94b6d14670caf854978f7ac93fb98bb" translate="yes" xml:space="preserve">
          <source>AfterViewChecked</source>
          <target state="translated">AfterViewChecked</target>
        </trans-unit>
        <trans-unit id="f4ad582e07b30bc57425e6b367e57a5676f5f7b1" translate="yes" xml:space="preserve">
          <source>AfterViewInit</source>
          <target state="translated">AfterViewInit</target>
        </trans-unit>
        <trans-unit id="2b9c1b59aec1e136bb7f39d1dffbf0f3269f6892" translate="yes" xml:space="preserve">
          <source>Again, as with Angular components, register the provider with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; by adding it to the module's &lt;code&gt;providers&lt;/code&gt; list.</source>
          <target state="translated">다시 Angular 컴포넌트와 마찬가지로 , 모듈의 &lt;code&gt;providers&lt;/code&gt; 목록에 제공자 를 추가 하여 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 에 제공자를 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="a1f06ddfc491ba69f7991b805ea8e721d693d361" translate="yes" xml:space="preserve">
          <source>Against the &lt;code&gt;ElementInjector&lt;/code&gt; hierarchy (its parents)</source>
          <target state="translated">에 대한 &lt;code&gt;ElementInjector&lt;/code&gt; 의 계층 구조 (부모)</target>
        </trans-unit>
        <trans-unit id="0e761a2c37c7ad2715a5ceccd5ba263aacc9de9a" translate="yes" xml:space="preserve">
          <source>Against the &lt;code&gt;ModuleInjector&lt;/code&gt; hierarchy (its parents)</source>
          <target state="translated">에 대한 &lt;code&gt;ModuleInjector&lt;/code&gt; 의 계층 구조 (부모)</target>
        </trans-unit>
        <trans-unit id="bb53434eb9efd590bd6925bbf73497bd1d9c7abc" translate="yes" xml:space="preserve">
          <source>Ahead-of-time (AOT) compilation</source>
          <target state="translated">AOT (Ahead-of-Time) 컴파일</target>
        </trans-unit>
        <trans-unit id="d0efe0b2c75c1c670b3146f5f276e23a667f15ec" translate="yes" xml:space="preserve">
          <source>Alerts</source>
          <target state="translated">Alerts</target>
        </trans-unit>
        <trans-unit id="0bf7a49c8ea017edc7f2032bbb4b0c95e81f0ea3" translate="yes" xml:space="preserve">
          <source>Alerts and Calllouts</source>
          <target state="translated">경보 및 Calllouts</target>
        </trans-unit>
        <trans-unit id="066f0c42fdd1884232f453f149b68056ff56c08a" translate="yes" xml:space="preserve">
          <source>Alerts and Callouts</source>
          <target state="translated">경고 및 설명 선</target>
        </trans-unit>
        <trans-unit id="9089f32a47f1474eff56fa0a9c798f852209325c" translate="yes" xml:space="preserve">
          <source>Alerts and callouts present warnings, extra detail or references to other pages. They can also be used to provide commentary that &lt;em&gt;enriches&lt;/em&gt; the reader's understanding of the content being presented.</source>
          <target state="translated">경고 및 설명 선에는 경고, 추가 정보 또는 다른 페이지에 대한 참조가 표시됩니다. 또한 제시된 내용에 대한 독자의 이해 를 &lt;em&gt;풍부하게&lt;/em&gt; 하는 논평을 제공하는 데 사용될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7804d4cc875a2b345b93ae440e9d3d6a2f4d4cb0" translate="yes" xml:space="preserve">
          <source>Alerts draw attention to short important points. Alerts should not be used for multi-line content (use &lt;a href=&quot;docs-style-guide#callouts&quot;&gt;callouts&lt;/a&gt; instead).</source>
          <target state="translated">경고는 짧은 중요한 사항에주의를 기울입니다. 여러 줄 콘텐츠에는 경고를 사용해서는 안됩니다 ( 대신 &lt;a href=&quot;docs-style-guide#callouts&quot;&gt;콜 아웃&lt;/a&gt; 사용).</target>
        </trans-unit>
        <trans-unit id="04259816ace1ebe56c853a8763558570c008514a" translate="yes" xml:space="preserve">
          <source>Alias</source>
          <target state="translated">Alias</target>
        </trans-unit>
        <trans-unit id="ac120c6d632c0aafed10d7ef62acaa6d28479bb6" translate="yes" xml:space="preserve">
          <source>Alias inputs and outputs in the metadata using a colon-delimited (&lt;code&gt;:&lt;/code&gt;) string with the directive property name on the left and the public alias on the right:</source>
          <target state="translated">콜론 (구분하여 메타 데이터 별칭 입출력 &lt;code&gt;:&lt;/code&gt; ) 좌우의 공용 별명의 지정 속성 이름 문자열 :</target>
        </trans-unit>
        <trans-unit id="faa3adcf19e6bd4a892728c2e0aceda3aee71007" translate="yes" xml:space="preserve">
          <source>Alias providers: &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">별명 제공자 : &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc91876e2ac4c3057217ce8b3905f1aa8b8895d3" translate="yes" xml:space="preserve">
          <source>Alias providers: &lt;code&gt;useExisting&lt;/code&gt;</source>
          <target state="translated">별칭 공급자 : &lt;code&gt;useExisting&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="262c295e8156615b23a9b9a21875280876ff6fe3" translate="yes" xml:space="preserve">
          <source>Aliased class providers</source>
          <target state="translated">별칭 클래스 공급자</target>
        </trans-unit>
        <trans-unit id="abaa4cbe0d1cb4558df323bbdd250e590d8ef07c" translate="yes" xml:space="preserve">
          <source>Aliases: -C</source>
          <target state="translated">별칭 : -C</target>
        </trans-unit>
        <trans-unit id="12e8d87619a5b14f34a496b823d54d6c51209a45" translate="yes" xml:space="preserve">
          <source>Aliases: -D</source>
          <target state="translated">별명 : -D</target>
        </trans-unit>
        <trans-unit id="bca726a706e0cb987a708ca99e96eb229c4ee2e7" translate="yes" xml:space="preserve">
          <source>Aliases: -S</source>
          <target state="translated">별칭 : -S</target>
        </trans-unit>
        <trans-unit id="470172253d7a0681d0e6784a4350baa5c20d4c7e" translate="yes" xml:space="preserve">
          <source>Aliases: -b</source>
          <target state="translated">별칭 : -b</target>
        </trans-unit>
        <trans-unit id="2b618ef645988dbdfa96c6d0dd9b31d701ea7892" translate="yes" xml:space="preserve">
          <source>Aliases: -c</source>
          <target state="translated">별칭 : -c</target>
        </trans-unit>
        <trans-unit id="21c330a0e2a2e6fdb8fdc16b0cfc8dfca9621ef7" translate="yes" xml:space="preserve">
          <source>Aliases: -d</source>
          <target state="translated">별칭 : -d</target>
        </trans-unit>
        <trans-unit id="53241387fa776157e1ac709db2bc0b9ff4269351" translate="yes" xml:space="preserve">
          <source>Aliases: -f</source>
          <target state="translated">별칭 : -f</target>
        </trans-unit>
        <trans-unit id="f888e82379026d00996152912a3ff9af72da352f" translate="yes" xml:space="preserve">
          <source>Aliases: -g</source>
          <target state="translated">별칭 : -g</target>
        </trans-unit>
        <trans-unit id="bb9dd7df504aed89801306b3b923af073484cd3d" translate="yes" xml:space="preserve">
          <source>Aliases: -m</source>
          <target state="translated">별칭 : -m</target>
        </trans-unit>
        <trans-unit id="952d01c1396bf00dc43b948288f5644768618c70" translate="yes" xml:space="preserve">
          <source>Aliases: -o</source>
          <target state="translated">별칭 : -o</target>
        </trans-unit>
        <trans-unit id="33465e48b30d9b87760e03b4bb2dcf9485e72b0c" translate="yes" xml:space="preserve">
          <source>Aliases: -p</source>
          <target state="translated">별명 : -p</target>
        </trans-unit>
        <trans-unit id="febb997df0041b129449bb01c60c3ab7719f4b0c" translate="yes" xml:space="preserve">
          <source>Aliases: -s</source>
          <target state="translated">별칭 : -s</target>
        </trans-unit>
        <trans-unit id="881d4fb37b8ea4b85e378da2acccae617df1bc81" translate="yes" xml:space="preserve">
          <source>Aliases: -t</source>
          <target state="translated">별칭 : -t</target>
        </trans-unit>
        <trans-unit id="2b36dfa50916141297a3b84dc3d7b4f0ef1e1849" translate="yes" xml:space="preserve">
          <source>Aliases: -v</source>
          <target state="translated">별칭 : -v</target>
        </trans-unit>
        <trans-unit id="773b2f76a828881e99082e584a105ac17854ae4c" translate="yes" xml:space="preserve">
          <source>Aliasing in the metadata</source>
          <target state="translated">메타 데이터 별명</target>
        </trans-unit>
        <trans-unit id="12aeae68aab8c241da4ec948e46d9fc4b87c3bee" translate="yes" xml:space="preserve">
          <source>Aliasing inputs and outputs</source>
          <target state="translated">앨리어싱 입력 및 출력</target>
        </trans-unit>
        <trans-unit id="cbf22d2da5af310a1d6c29300763bcccdf5470a5" translate="yes" xml:space="preserve">
          <source>Aliasing with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;/&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 데코레이터로 앨리어싱</target>
        </trans-unit>
        <trans-unit id="9b2b0d9f150b1cf5ad45ddd02b66c50057628f62" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;standard DOM event objects&lt;/a&gt; have a &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; property, a reference to the element that raised the event. In this case, &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; refers to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element&lt;/a&gt; and &lt;code&gt;event.target.value&lt;/code&gt; returns the current contents of that element.</source>
          <target state="translated">모든 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;표준 DOM 이벤트 객체&lt;/a&gt; 에는 이벤트 를 발생시킨 요소에 대한 참조 인 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 속성이 있습니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소를 참조&lt;/a&gt; 하고 &lt;code&gt;event.target.value&lt;/code&gt; 는 해당 요소의 현재 컨텐츠를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ef6c45b243cc8c7684094d620c0717caf5d06ab2" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods return an RxJS &lt;code&gt;Observable&lt;/code&gt; of something.</source>
          <target state="translated">모든 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 메소드는 RxJS &lt;code&gt;Observable&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eb5599b660b0c79a86b5a28beaddb416d3aedf11" translate="yes" xml:space="preserve">
          <source>All Angular components, directives and pipes must be declared in an NgModule.</source>
          <target state="translated">모든 각도 구성 요소, 지시문 및 파이프는 NgModule로 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="7d9b146ee1db2a813d81bdee2810d2562076d624" translate="yes" xml:space="preserve">
          <source>All apps start by &lt;a href=&quot;bootstrapping&quot;&gt;bootstrapping a root NgModule&lt;/a&gt;. You can organize your other NgModules any way you wish.</source>
          <target state="translated">모든 앱 &lt;a href=&quot;bootstrapping&quot;&gt;은 루트 NgModule&lt;/a&gt; 을 부트 스트랩하여 시작합니다 . 원하는 방식으로 다른 NgModules를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47f1a89f57ee46d779c84c05d4e22158f2e9d3d7" translate="yes" xml:space="preserve">
          <source>All behavior is based on the expected behavior of the JavaScript API &lt;code&gt;Array.prototype.slice()&lt;/code&gt; and &lt;code&gt;String.prototype.slice()&lt;/code&gt;.</source>
          <target state="translated">모든 동작은 JavaScript API &lt;code&gt;Array.prototype.slice()&lt;/code&gt; 및 &lt;code&gt;String.prototype.slice()&lt;/code&gt; 의 예상 동작을 기반으로합니다 .</target>
        </trans-unit>
        <trans-unit id="83f4574e35f933628564acc9e9670adf27bc7144" translate="yes" xml:space="preserve">
          <source>All but Chrome, Firefox, Edge, IE 11 and Safari 10</source>
          <target state="translated">Chrome, Firefox, Edge, IE 11 및 Safari 10을 제외한 모두</target>
        </trans-unit>
        <trans-unit id="78cf0dfc4ff02c126ec8a635233f5056f63a2233" translate="yes" xml:space="preserve">
          <source>All but a few guide pages are &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;markdown&lt;/a&gt; files with an &lt;code&gt;.md&lt;/code&gt; extension.</source>
          <target state="translated">가이드 페이지를 제외한 모든 페이지는 확장자 가 &lt;code&gt;.md&lt;/code&gt; 인&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;마크 다운&lt;/a&gt; 파일입니다 .</target>
        </trans-unit>
        <trans-unit id="f6163b0506b3d6cee19ae1ba67afebd88a78b3f5" translate="yes" xml:space="preserve">
          <source>All callbacks provided via this token will be called for every component that is bootstrapped. Signature of the callback:</source>
          <target state="translated">이 토큰을 통해 제공되는 모든 콜백은 부트 스트랩 된 모든 구성 요소에 대해 호출됩니다. 콜백의 서명 :</target>
        </trans-unit>
        <trans-unit id="14f06e49365898f255f67b62a79edfa0c4ccb24e" translate="yes" xml:space="preserve">
          <source>All classes that use Angular DI must have an Angular decorator like &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; (previously, undecorated classes were allowed in AOT mode only or if injection flags were used). See further &lt;a href=&quot;ivy-compatibility-examples#undecorated-classes&quot;&gt;details&lt;/a&gt;.</source>
          <target state="translated">Angular DI를 사용하는 모든 클래스에는 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 과 같은 Angular 데코레이터가 있어야합니다 (이전에는 데코 레이팅되지 않은 클래스는 AOT 모드에서만 허용되거나 주입 플래그가 사용 된 경우). 자세한 내용을 참조 &lt;a href=&quot;ivy-compatibility-examples#undecorated-classes&quot;&gt;하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f6d4518e763e3cfc934ceb005f87993289fc3d75" translate="yes" xml:space="preserve">
          <source>All content is one asset per file. Each component, service, and pipe is in its own file. All third party vendor scripts are stored in another folder and not in the &lt;code&gt;src&lt;/code&gt; folder. You didn't write them and you don't want them cluttering &lt;code&gt;src&lt;/code&gt;. Use the naming conventions for files in this guide. &lt;a href=&quot;styleguide#toc&quot;&gt;Back to top&lt;/a&gt;</source>
          <target state="translated">모든 컨텐츠는 파일 당 하나의 자산입니다. 각 구성 요소, 서비스 및 파이프는 자체 파일에 있습니다. 모든 타사 공급 업체 스크립트는 &lt;code&gt;src&lt;/code&gt; 폴더가 아닌 다른 폴더에 저장됩니다 . 당신은 그것들을 쓰지 않았고 &lt;code&gt;src&lt;/code&gt; 를 혼란스럽게 만들고 싶지 않습니다 . 이 안내서의 파일 이름 지정 규칙을 사용하십시오. &lt;a href=&quot;styleguide#toc&quot;&gt;맨 위로&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4ed2d8bd132c629609779d7b7c0ee7dd1066456" translate="yes" xml:space="preserve">
          <source>All entry points</source>
          <target state="translated">모든 진입 점</target>
        </trans-unit>
        <trans-unit id="2d9456ba0cf30f1f1f1d87dee95529f33f56b70b" translate="yes" xml:space="preserve">
          <source>All exports</source>
          <target state="translated">모든 수출</target>
        </trans-unit>
        <trans-unit id="555a5a2314312f0604886df5753dde617de5c81b" translate="yes" xml:space="preserve">
          <source>All guides and cookbooks have &lt;em&gt;at least these core files&lt;/em&gt;. Each file has a distinct purpose and evolves independently as the application grows.</source>
          <target state="translated">모든 가이드와 쿡북에는 &lt;em&gt;최소한 이러한 핵심 파일이 있습니다&lt;/em&gt; . 각 파일은 고유 한 목적을 가지고 있으며 응용 프로그램이 증가함에 따라 독립적으로 발전합니다.</target>
        </trans-unit>
        <trans-unit id="d50f7516add2e23a302a6561abd45a450301530f" translate="yes" xml:space="preserve">
          <source>All heading text should be in &quot;Sentence case&quot;, which means the first word is capitalized and all other words are lower case.</source>
          <target state="translated">모든 표제 텍스트는 &quot;문장 대소 문자&quot;여야합니다. 즉, 첫 번째 단어는 대문자이고 다른 모든 단어는 소문자입니다.</target>
        </trans-unit>
        <trans-unit id="1d20c95590619af50ebe88a44377237c9334e6cc" translate="yes" xml:space="preserve">
          <source>All lazy-loaded modules are routed feature modules by definition.</source>
          <target state="translated">지연로드 된 모든 모듈은 정의에 따라 기능 모듈로 라우팅됩니다.</target>
        </trans-unit>
        <trans-unit id="ba497163aacd2f415fc3983fbe5ba57cdc70e6dc" translate="yes" xml:space="preserve">
          <source>All locale data used by Angular are extracted from the Unicode Consortium's &lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;Common Locale Data Repository (CLDR)&lt;/a&gt;.</source>
          <target state="translated">Angular에서 사용하는 모든 로캘 데이터는 Unicode Consortium의 &lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;CLDR (Common Locale Data Repository)&lt;/a&gt; 에서 추출됩니다 .</target>
        </trans-unit>
        <trans-unit id="fa94ed73b28264b28c71949c216d5b8431fb586e" translate="yes" xml:space="preserve">
          <source>All observables returned from &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods are &lt;em&gt;cold&lt;/em&gt; by design. Execution of the HTTP request is &lt;em&gt;deferred&lt;/em&gt;, allowing you to extend the observable with additional operations such as &lt;code&gt;tap&lt;/code&gt; and &lt;code&gt;catchError&lt;/code&gt; before anything actually happens.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 메서드 에서 반환 된 모든 Observable 은 의도적 으로 &lt;em&gt;콜드&lt;/em&gt; 합니다. HTTP 요청의 실행이 &lt;em&gt;지연&lt;/em&gt; 되어 실제로 발생하기 전에 &lt;code&gt;tap&lt;/code&gt; 및 &lt;code&gt;catchError&lt;/code&gt; 와 같은 추가 작업으로 관찰 가능 항목을 확장 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9bcf03575f88913e03cd13ed033b90e1cf77192a" translate="yes" xml:space="preserve">
          <source>All occurrences of a text message that have the same meaning will have the same translation. A text message that is associated with different meanings can have different translations.</source>
          <target state="translated">의미가 동일한 문자 메시지는 모두 번역이 동일합니다. 다른 의미와 관련된 문자 메시지는 다른 번역을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d561a31794ae7f01849587f849895e07f7350e8" translate="yes" xml:space="preserve">
          <source>All of our major releases are supported for 18 months.</source>
          <target state="translated">모든 주요 릴리스는 18 개월 동안 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="54bd78bf36660977460696089ef9b9012bc21577" translate="yes" xml:space="preserve">
          <source>All of the &lt;code&gt;wtf*&lt;/code&gt; APIs are deprecated and will be removed in a future version.</source>
          <target state="translated">모든 &lt;code&gt;wtf*&lt;/code&gt; API는 더 이상 사용되지 않으며 향후 버전에서 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="f299f3554bce53f9ba35ead474380491f94ae4a3" translate="yes" xml:space="preserve">
          <source>All of the app's code goes in a folder named &lt;code&gt;src&lt;/code&gt;. All feature areas are in their own folder, with their own NgModule.</source>
          <target state="translated">모든 앱 코드는 &lt;code&gt;src&lt;/code&gt; 라는 폴더에 들어갑니다 . 모든 기능 영역은 자체 NgModule과 함께 자체 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bda062345e26cb4d38caed6b23d71db7155d42c" translate="yes" xml:space="preserve">
          <source>All of these validators are synchronous, so they are passed as the second argument. Notice that you can support multiple validators by passing the functions in as an array.</source>
          <target state="translated">이러한 모든 유효성 검사기는 동기식이므로 두 번째 인수로 전달됩니다. 함수를 배열로 전달하여 여러 유효성 검사기를 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d488a3cf97211143ed0272eeccebfa97e0734fe1" translate="yes" xml:space="preserve">
          <source>All projects within a workspace share a &lt;a href=&quot;workspace-config&quot;&gt;CLI configuration context&lt;/a&gt;. The top level of the workspace contains workspace-wide configuration files, configuration files for the root-level application, and subfolders for the root-level application source and test files.</source>
          <target state="translated">작업 공간 내의 모든 프로젝트는 &lt;a href=&quot;workspace-config&quot;&gt;CLI 구성 컨텍스트를&lt;/a&gt; 공유합니다 . 작업 공간의 최상위 레벨에는 작업 공간 전체 구성 파일, 루트 레벨 응용 프로그램의 구성 파일 및 루트 레벨 응용 프로그램 소스 및 테스트 파일의 서브 폴더가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a86a11f9cc83cd667f2d3d836dd4b6097c3be72e" translate="yes" xml:space="preserve">
          <source>All requests forward up to the root injector, whether you configured it with the &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; method, or registered all providers with &lt;code&gt;root&lt;/code&gt; in their own services.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; 메소드로 구성했거나 자신의 서비스에 &lt;code&gt;root&lt;/code&gt; 로 모든 제공자를 등록 했는지 여부에 관계없이 모든 요청은 루트 인젝터로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b5501ac272d63e35e4b7b552543df240cc9bf18" translate="yes" xml:space="preserve">
          <source>All requests forward up to the root injector, whether you configured it with the &lt;code&gt;bootstrapModule()&lt;/code&gt; method, or registered all providers with &lt;code&gt;root&lt;/code&gt; in their own services.</source>
          <target state="translated">모든 요청은 &lt;code&gt;bootstrapModule()&lt;/code&gt; 메서드로 구성했거나 자체 서비스에서 &lt;code&gt;root&lt;/code&gt; 로 모든 공급자를 등록 했는지 여부에 관계없이 루트 인젝터로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="b677df98f9a1a137700099cd172a9afc9ac44548" translate="yes" xml:space="preserve">
          <source>All response headers.</source>
          <target state="translated">모든 응답 헤더</target>
        </trans-unit>
        <trans-unit id="266c93cc98a1c67666c9fe3051964b12a0907d45" translate="yes" xml:space="preserve">
          <source>All router components must be entry components. Because this would require you to add the component in two places (router and &lt;code&gt;entryComponents&lt;/code&gt;) the Compiler is smart enough to recognize that this is a router definition and automatically add the router component into &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">모든 라우터 구성 요소는 입력 구성 요소 여야합니다. 이렇게하려면 두 위치 (라우터 및 &lt;code&gt;entryComponents&lt;/code&gt; )에 컴포넌트를 추가해야하므로 컴파일러는 이것이 라우터 정의임을 인식하고 라우터 컴포넌트를 &lt;code&gt;entryComponents&lt;/code&gt; 에 자동으로 추가 할 수있을 정도로 똑똑 합니다.</target>
        </trans-unit>
        <trans-unit id="a9765742971c0ed0a559afb35d2f98bc069ab358" translate="yes" xml:space="preserve">
          <source>All section heading text should be in &quot;Sentence case&quot;, which means the first word is capitalized and all other words are lower case.</source>
          <target state="translated">모든 섹션 제목 텍스트는 &quot;문장&quot;에 있어야합니다. 즉, 첫 번째 단어는 대문자이고 다른 모든 단어는 소문자입니다.</target>
        </trans-unit>
        <trans-unit id="2010b5aa68dd1960b60a188558d3a3c6eeae422a" translate="yes" xml:space="preserve">
          <source>All selectors of directives exported from imported NgModules.</source>
          <target state="translated">가져온 NgModules에서 내 보낸 모든 지시문 선택기.</target>
        </trans-unit>
        <trans-unit id="45c6daa1221c6438e83b827fcf4272388107dbac" translate="yes" xml:space="preserve">
          <source>All selectors of directives listed in `declarations`.</source>
          <target state="translated">모든 선언문은 '선언서'에수록되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="98ef1fe3f08289d9ae2ac5ecaabbe70f1ac0a3e8" translate="yes" xml:space="preserve">
          <source>All three types of schematics can be part of a collection that you package with your library.</source>
          <target state="translated">세 가지 유형의 회로도 모두 라이브러리와 함께 패키지로 제공되는 컬렉션의 일부가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58563d44c99aee179d2102d631ab6d3346ac6f2a" translate="yes" xml:space="preserve">
          <source>All transitions are defined within an animation trigger, along with named states that the transitions change to and from.</source>
          <target state="translated">모든 전환은 전환이 변경되는 명명 된 상태와 함께 애니메이션 트리거 내에 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="9de972c3116895d08cfcc214fa1b19703f026642" translate="yes" xml:space="preserve">
          <source>Allowed value are &lt;code&gt;&lt;a href=&quot;no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;custom_elements_schema&quot;&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">허용되는 값은 &lt;code&gt;&lt;a href=&quot;no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;custom_elements_schema&quot;&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="85ebcd6cf8feaeb9992b2b6b1a1a230f5cedb4e3" translate="yes" xml:space="preserve">
          <source>Allowed values are given with each enumerated option description, with the default value in &lt;strong&gt;bold&lt;/strong&gt;.</source>
          <target state="translated">허용 된 값은 열거 된 각 옵션 설명과 함께 제공되며 기본값은 &lt;strong&gt;굵게 표시&lt;/strong&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="4e34237b214ab32caacdba55ef91ee24b78df885" translate="yes" xml:space="preserve">
          <source>Allowed values in an &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; object that configure when the router performs the initial navigation operation.</source>
          <target state="translated">라우터가 초기 탐색 작업을 수행 &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; 구성 하는 ExtraOptions 개체 에 허용되는 값입니다 .</target>
        </trans-unit>
        <trans-unit id="f4ca59384f608db4264a261808beb5325f2b8151" translate="yes" xml:space="preserve">
          <source>Allowed values in an &lt;code&gt;&lt;a href=&quot;router/extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; object that configure when the router performs the initial navigation operation.</source>
          <target state="translated">라우터가 초기 탐색 작업을 수행 &lt;code&gt;&lt;a href=&quot;router/extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; 구성 하는 ExtraOptions 개체 에 허용되는 값입니다 .</target>
        </trans-unit>
        <trans-unit id="085f06d4e071e6f66eb3b9679caf4d86014b1610" translate="yes" xml:space="preserve">
          <source>Allows Angular Component to be used from AngularJS.</source>
          <target state="translated">AngularJS에서 Angular Component를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc1a07f7db604b095e8b41e2cae741aacdd37b3" translate="yes" xml:space="preserve">
          <source>Allows Angular service to be accessible from AngularJS.</source>
          <target state="translated">AngularJS에서 Angular 서비스에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59ef65ca89ef98a0952a53d7803e4341b9f60c56" translate="yes" xml:space="preserve">
          <source>Allows AngularJS Component to be used from Angular.</source>
          <target state="translated">Angular에서 AngularJS 컴포넌트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7649d729717525a48003b77dd85cd213286b2180" translate="yes" xml:space="preserve">
          <source>Allows AngularJS service to be accessible from Angular.</source>
          <target state="translated">Angular에서 AngularJS 서비스에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1d91523ef6bb6743c7eb228ff012768c84d644c" translate="yes" xml:space="preserve">
          <source>Allows a sequential change between styles within a specified time interval. Use within &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;. Can include multiple &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls within each &lt;code&gt;keyframe()&lt;/code&gt;. Uses array syntax.</source>
          <target state="translated">지정된 시간 간격 내에 스타일을 순차적으로 변경할 수 있습니다. &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 내에서 사용하십시오 . 각 &lt;code&gt;keyframe()&lt;/code&gt; 내에 여러 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 호출을 포함 할 수 있습니다 . 배열 구문을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="896073ffe89ca14af5b6f2040d67893e62df843b" translate="yes" xml:space="preserve">
          <source>Allows animations on child components to be run within the same timeframe as the parent.</source>
          <target state="translated">자식 구성 요소의 애니메이션을 부모와 같은 시간 내에 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="750378a75cfd1eaf3050ded6f436f0e7bb6f1a79" translate="yes" xml:space="preserve">
          <source>Allows injecting dependencies in &lt;code&gt;beforeEach()&lt;/code&gt; and &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; 및 &lt;code&gt;it()&lt;/code&gt; 종속성을 주입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08a3edd872030b372214771d089e67457cc59fb7" translate="yes" xml:space="preserve">
          <source>Allows overriding default compiler providers and settings which are defined in test_injector.js</source>
          <target state="translated">test_injector.js에 정의 된 기본 컴파일러 제공자 및 설정을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa49e14d9829d89b458a57fab56ecfd9673e4927" translate="yes" xml:space="preserve">
          <source>Allows overriding default providers, directives, pipes, modules of the test injector, which are defined in test_injector.js</source>
          <target state="translated">test_injector.js에 정의 된 테스트 인젝터의 기본 제공자, 지시문, 파이프, 모듈을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7f2d8c5d430d7ae3ff698eb19d82a712bf21944" translate="yes" xml:space="preserve">
          <source>Allows to refer to references which are not yet defined.</source>
          <target state="translated">아직 정의되지 않은 참조를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="066113a73a472127f1591d76a5f3fc93d93b6b02" translate="yes" xml:space="preserve">
          <source>Allows to register a callback that will be called when the module is destroyed.</source>
          <target state="translated">모듈이 파괴 될 때 호출 될 콜백을 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c93cb9606768ab8734f0311d8db95d0ea5cabf8" translate="yes" xml:space="preserve">
          <source>Allows to simulate the loading of ng modules in tests.</source>
          <target state="translated">테스트에서 ng 모듈의 로딩을 시뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a50d82a97b9831022bdfe098f21ced7b0b9170de" translate="yes" xml:space="preserve">
          <source>Allows you to assign styles to an HTML element using CSS. You can use CSS directly, as in the first example, or you can call a method from the component.</source>
          <target state="translated">CSS를 사용하여 HTML 요소에 스타일을 지정할 수 있습니다. 첫 번째 예제와 같이 CSS를 직접 사용하거나 구성 요소에서 메서드를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4aea37dbba3d6a7adb34731ae74b6c78ca2fdd7" translate="yes" xml:space="preserve">
          <source>Almost all Angular projects should use the default HTML5 style. It produces URLs that are easier for users to understand and it preserves the option to do server-side rendering.</source>
          <target state="translated">거의 모든 Angular 프로젝트는 기본 HTML5 스타일을 사용해야합니다. 사용자가 이해하기 더 쉬운 URL을 생성하고 서버 측 렌더링을 수행하는 옵션을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="7fe4a6401091a9411a2acc365ceb4c77d0b91d13" translate="yes" xml:space="preserve">
          <source>Almost all Angular projects should use the default HTML5 style. It produces URLs that are easier for users to understand. And it preserves the option to do &lt;em&gt;server-side rendering&lt;/em&gt; later.</source>
          <target state="translated">거의 모든 Angular 프로젝트는 기본 HTML5 스타일을 사용해야합니다. 사용자가 이해하기 쉬운 URL을 생성합니다. 또한 나중에 &lt;em&gt;서버 측 렌더링&lt;/em&gt; 을 수행 할 수있는 옵션을 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="f37c30bf61c438336e2b7098bddfc566db04ad3f" translate="yes" xml:space="preserve">
          <source>Almost all HTML syntax is valid template syntax. However, because an Angular template is part of an overall webpage, and not the entire page, you don't need to include elements such as &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;. You can focus exclusively on the part of the page you are developing.</source>
          <target state="translated">거의 모든 HTML 구문은 유효한 템플릿 구문입니다. 그러나 Angular 템플릿은 전체 페이지가 아니라 전체 웹 페이지의 일부이기 때문에 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 와 같은 요소를 포함 할 필요가 없습니다 . 개발중인 페이지의 일부에만 집중할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b12fb3ea7a7ec8044072cb233aff081382cfe796" translate="yes" xml:space="preserve">
          <source>Also be sure to remove the &lt;code&gt;ItemsModule&lt;/code&gt; from the &lt;code&gt;AppModule&lt;/code&gt;. For step-by-step instructions on lazy loading modules, continue with the following sections of this page.</source>
          <target state="translated">또한 제거해야합니다 &lt;code&gt;ItemsModule&lt;/code&gt; 를 으로부터 &lt;code&gt;AppModule&lt;/code&gt; . 지연로드 모듈에 대한 단계별 지침을 보려면이 페이지의 다음 섹션을 계속하십시오.</target>
        </trans-unit>
        <trans-unit id="09bc2f90624b9bf3ca83b868a4cb571e445219e2" translate="yes" xml:space="preserve">
          <source>Also in &lt;code&gt;index.html&lt;/code&gt;, change the scripts to use &lt;code&gt;/node_modules&lt;/code&gt; with a slash instead of &lt;code&gt;node_modules&lt;/code&gt; without the slash.</source>
          <target state="translated">또한 &lt;code&gt;index.html&lt;/code&gt; 에서 슬래시 없이 &lt;code&gt;node_modules&lt;/code&gt; 대신 &lt;code&gt;/node_modules&lt;/code&gt; 를 슬래시와 함께 사용하도록 스크립트를 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="c34ca58802e9ae1bf05a9e1e9808cfff54b066f4" translate="yes" xml:space="preserve">
          <source>Also included in the &lt;code&gt;@angular/service-worker&lt;/code&gt; NPM package is a small script &lt;code&gt;safety-worker.js&lt;/code&gt;, which when loaded will unregister itself from the browser. This script can be used as a last resort to get rid of unwanted service workers already installed on client pages.</source>
          <target state="translated">또한에 포함 &lt;code&gt;@angular/service-worker&lt;/code&gt; 작은 스크립트 NPM 패키지 &lt;code&gt;safety-worker.js&lt;/code&gt; 브라우저에서 자체 등록을 취소합니다로드. 이 스크립트는 클라이언트 페이지에 이미 설치된 원치 않는 서비스 작업자를 제거하기위한 최후의 수단으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e77b90384ba1376f2a7fc2a2fdb84d02d1ce375" translate="yes" xml:space="preserve">
          <source>Also remove any &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; you find, together with the associated AngularJS factory or directive declarations. Since you no longer have downgraded components, you no longer list them in &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">또한 찾은 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; 를 연관된 AngularJS 팩토리 또는 지시문 선언과 함께 제거하십시오 . 더 이상 컴포넌트를 다운 그레이드하지 않았으므로 더 이상 &lt;code&gt;entryComponents&lt;/code&gt; 에 나열하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3eed6879744930f3ade3d793b4f2c2ad9e696f16" translate="yes" xml:space="preserve">
          <source>Also runs detectChanges once so that any existing change is detected.</source>
          <target state="translated">또한 기존 변경이 감지되도록 detectChanges를 한 번 실행합니다.</target>
        </trans-unit>
        <trans-unit id="80c4a57c8598fa805c421acf31759c6f916a295a" translate="yes" xml:space="preserve">
          <source>Also, there are a couple of Protractor API calls in the PhoneCat test code that are using the AngularJS &lt;code&gt;$location&lt;/code&gt; service under the hood. As that service is no longer present after the upgrade, replace those calls with ones that use WebDriver's generic URL APIs instead. The first of these is the redirection spec:</source>
          <target state="translated">또한 PhoneCat 테스트 코드에는 AngularJS &lt;code&gt;$location&lt;/code&gt; 서비스를 사용하는 두 가지 Protractor API 호출이 있습니다 . 업그레이드 후 해당 서비스가 더 이상 존재하지 않으므로 해당 호출을 WebDriver의 일반 URL API를 대신 사용하는 호출로 바꾸십시오. 첫 번째는 리디렉션 사양입니다.</target>
        </trans-unit>
        <trans-unit id="e9ec4ab463e95d961d6a661f97b761b3ce157450" translate="yes" xml:space="preserve">
          <source>Alter the name of a crisis. Notice that the corresponding name in the crisis list does &lt;em&gt;not&lt;/em&gt; change.</source>
          <target state="translated">위기의 이름을 바꾸십시오. 위기 목록의 해당 이름은 변경 되지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ef2efebfb6fde29b1d7a5cd7f44ec2ef3ac1afb6" translate="yes" xml:space="preserve">
          <source>Alter the name. Click the &quot;Back&quot; button and the app returns to the heroes list which displays the changed hero name. Notice that the name change took effect immediately.</source>
          <target state="translated">이름을 바꾸십시오. &quot;뒤로&quot;버튼을 클릭하면 앱이 변경된 영웅 이름을 표시하는 영웅 목록으로 돌아갑니다. 이름 변경이 즉시 적용되었습니다.</target>
        </trans-unit>
        <trans-unit id="5c537167fc57c766db36bca741f44f76ff80afb8" translate="yes" xml:space="preserve">
          <source>Alternate build configurations</source>
          <target state="translated">대체 빌드 구성</target>
        </trans-unit>
        <trans-unit id="538b10e3e67e9b4ea5cac16016344363816eb454" translate="yes" xml:space="preserve">
          <source>Alternative class providers</source>
          <target state="translated">대체 클래스 제공 업체</target>
        </trans-unit>
        <trans-unit id="317529f453f868f828b3061a5492c704c5ebd726" translate="yes" xml:space="preserve">
          <source>Alternative syntax</source>
          <target state="translated">대체 구문</target>
        </trans-unit>
        <trans-unit id="7fffe38e0d7a10037e8a311175b76b5eba5d4a82" translate="yes" xml:space="preserve">
          <source>Alternatively you can pass an HTTP method as the first parameter, a URL string as the second, and an options hash containing the request body as the third. See &lt;code&gt;addBody()&lt;/code&gt;. In this case, the specified &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;observe&lt;/code&gt; options determine the type of returned observable.</source>
          <target state="translated">또는 HTTP 메소드를 첫 번째 매개 변수로, URL 문자열을 두 번째로, 요청 본문을 세 번째로 포함하는 옵션 해시를 전달할 수 있습니다. &lt;code&gt;addBody()&lt;/code&gt; 참조하십시오 . 이 경우 지정된 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;observe&lt;/code&gt; 옵션에 따라 반환되는 관찰 가능 유형이 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="70ee3db78fa8b847067a4fcd326c7e95030cc8ca" translate="yes" xml:space="preserve">
          <source>Alternatively you can pass an HTTP method as the first parameter, a URL string as the second, and an options hash containing the request body as the third. See &lt;code&gt;addBody()&lt;/code&gt;. In this case, the specified &lt;code&gt;responseType&lt;/code&gt; and &lt;code&gt;observe&lt;/code&gt; options determine the type of returned observable.</source>
          <target state="translated">또는 HTTP 메소드를 첫 번째 매개 변수로, URL 문자열을 두 번째로, 요청 본문을 포함하는 옵션 해시를 세 번째 매개 변수로 전달할 수 있습니다. &lt;code&gt;addBody()&lt;/code&gt; 참조하십시오 . 이 경우 지정된 &lt;code&gt;responseType&lt;/code&gt; 및 &lt;code&gt;observe&lt;/code&gt; 옵션은 반환 된 Observable 유형을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="04a6b5805d15fcdd219083f0cbf17fc9bb490bc5" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;subscribe()&lt;/code&gt; method can accept callback function definitions in line, for &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;complete&lt;/code&gt; handlers. For example, the following &lt;code&gt;subscribe()&lt;/code&gt; call is the same as the one that specifies the predefined observer:</source>
          <target state="translated">또는 &lt;code&gt;subscribe()&lt;/code&gt; 메소드는 &lt;code&gt;next&lt;/code&gt; , &lt;code&gt;error&lt;/code&gt; 및 &lt;code&gt;complete&lt;/code&gt; 핸들러에 대해 콜백 함수 정의를 라인으로 승인 할 수 있습니다 . 예를 들어, 다음 &lt;code&gt;subscribe()&lt;/code&gt; 호출은 사전 정의 된 관찰자를 지정하는 호출과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="e64d9fb1e1f706bc80662aea5f2fb80fb60883b5" translate="yes" xml:space="preserve">
          <source>Alternatively, use the &lt;code&gt;on-&lt;/code&gt; prefix, known as the canonical form:</source>
          <target state="translated">또한, 사용 &lt;code&gt;on-&lt;/code&gt; 정규의 형식으로 알려진 접두사를 :</target>
        </trans-unit>
        <trans-unit id="7ed2dd30905d320449fc9e53a46cc64ce34b13be" translate="yes" xml:space="preserve">
          <source>Alternatively, you can add a new file, &lt;code&gt;.browserslistrc&lt;/code&gt;, to the project directory, that specifies browsers you want to support:</source>
          <target state="translated">또는 지원하려는 브라우저를 지정 하는 새 파일 &lt;code&gt;.browserslistrc&lt;/code&gt; 를 프로젝트 디렉토리에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d3a282109fd2c8a8f7ad5940bdac4b9f189f1e55" translate="yes" xml:space="preserve">
          <source>Alternatively, you can call &lt;code&gt;request.error()&lt;/code&gt; with an &lt;code&gt;ErrorEvent&lt;/code&gt;.</source>
          <target state="translated">또는 &lt;code&gt;ErrorEvent&lt;/code&gt; 와 함께 &lt;code&gt;request.error()&lt;/code&gt; 를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="98bf87f428bccd5b0338c78eadf52aaa7a6089b5" translate="yes" xml:space="preserve">
          <source>Alternatively, you can choose to surface a separate warning for each instance of this pattern with a config value of &lt;code&gt;&quot;always&quot;&lt;/code&gt;. This may help to track down where in the code the pattern is being used as the code is being updated.</source>
          <target state="translated">또는 구성 값이 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 인이 패턴의 각 인스턴스에 대해 별도의 경고를 표시하도록 선택할 수 있습니다 . 코드가 업데이트 될 때 패턴에서 패턴이 사용되는 위치를 추적하는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d6c050b861181c863e8cb7973a125de6756b8a9" translate="yes" xml:space="preserve">
          <source>Alternatively, you can fix it by exporting &lt;code&gt;foo&lt;/code&gt; with the expectation that &lt;code&gt;foo&lt;/code&gt; will be assigned at runtime when you actually know its value.</source>
          <target state="translated">다른 방법으로는 수출하여 문제를 해결할 수 &lt;code&gt;foo&lt;/code&gt; 는 것이라는 기대와 함께 &lt;code&gt;foo&lt;/code&gt; 실제로 그 값을 알고있을 때 런타임에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="19c181f0dfa7e4b222a989a1cf6835c473ecb0d0" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass a plain function, which is expected to return a promise resolving to an &lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt; (i.e. an instance of your Angular module). The function is called with an array of extra &lt;a href=&quot;../api/core/staticprovider&quot;&gt;Providers&lt;/a&gt; that are expected to be available on the returned &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;. For example, if you are using &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt; or &lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;, you can pass the &lt;code&gt;extraProviders&lt;/code&gt; array to them:</source>
          <target state="translated">또는 일반 함수를 전달하여 &lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt; (즉, Angular 모듈의 인스턴스)로 해결되는 약속을 반환 할 것으로 예상됩니다 . 이 함수는 반환 된 &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt; 의 &lt;a href=&quot;../api/core/injector&quot;&gt;인젝터&lt;/a&gt; 에서 사용할 수있는 추가 &lt;a href=&quot;../api/core/staticprovider&quot;&gt;공급자&lt;/a&gt; 배열로 호출됩니다 . 예를 들어 &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt; 또는 &lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic을&lt;/a&gt; 사용 하는 경우 &lt;code&gt;extraProviders&lt;/code&gt; 배열을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46f8c220ab71228f6530683c11b7ac9ef6c94316" translate="yes" xml:space="preserve">
          <source>Alternatively, you can specify a custom id in the &lt;code&gt;i18n&lt;/code&gt; attribute by using the prefix &lt;code&gt;@@&lt;/code&gt;. The example below defines the custom id &lt;code&gt;introductionHeader&lt;/code&gt;:</source>
          <target state="translated">또는 접두사 &lt;code&gt;@@&lt;/code&gt; 를 사용하여 &lt;code&gt;i18n&lt;/code&gt; 속성에 사용자 정의 ID를 지정할 수 있습니다 . 아래 예제는 사용자 정의 id &lt;code&gt;introductionHeader&lt;/code&gt; Header를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="cb7c49667809bfe94e1dbbd87a5ce803ffe6ceb8" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn client&lt;/a&gt; for downloading and installing npm packages.</source>
          <target state="translated">또는 npm 패키지를 다운로드하고 설치하기 위해 &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn 클라이언트&lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9fbf3395b93f5da053cf8f1ade99d229665c121" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the HTML &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">다른 방법으로는 HTML 사용할 수있는 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 태그를.</target>
        </trans-unit>
        <trans-unit id="01b948062d123fd97df131865c3c30c4c143ee9f" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">또는 HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5ad999c866c8bd0df67936adc07a5029b68e2cc3" translate="yes" xml:space="preserve">
          <source>Alternatively, you could accumulate the individual keys themselves by substituting &lt;code&gt;event.key&lt;/code&gt; for &lt;code&gt;event.target.value&lt;/code&gt; in which case the same user input would produce:</source>
          <target state="translated">또는 &lt;code&gt;event.target.value&lt;/code&gt; 대신 &lt;code&gt;event.key&lt;/code&gt; 를 대체하여 개별 키 자체를 누적 할 수 있습니다 .이 경우 동일한 사용자 입력이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="4dc002b021fdf91ff604ee57f3cc129ef280a957" translate="yes" xml:space="preserve">
          <source>Alternatively, you could make a component-specific &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard for the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method provides you with the current instance of the &lt;code&gt;component&lt;/code&gt;, the current &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; in case you needed to access some external information. This would be useful if you only wanted to use this guard for this component and needed to get the component's properties or confirm whether the router should allow navigation away from it.</source>
          <target state="translated">또는 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 대한 구성 요소 별 CanDeactivate 가드를 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 있습니다. &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; 메소드의 현재 인스턴스를 제공 &lt;code&gt;component&lt;/code&gt; , 현재 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; 는 경우에 당신은 어떤 외부 정보에 액세스하는 데 필요한. 이 구성 요소에이 가드 만 사용하고 구성 요소의 속성을 가져 오거나 라우터가 다른 구성 요소를 탐색 할 수 있는지 확인해야하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="1db281f9fe5fb6dc1260a395e782108dc7443b4b" translate="yes" xml:space="preserve">
          <source>Alternatively, you could make a component-specific &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard for the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. The &lt;code&gt;canDeactivate()&lt;/code&gt; method provides you with the current instance of the &lt;code&gt;component&lt;/code&gt;, the current &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; in case you needed to access some external information. This would be useful if you only wanted to use this guard for this component and needed to get the component's properties or confirm whether the router should allow navigation away from it.</source>
          <target state="translated">또는 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 대한 구성 요소 별 CanDeactivate 가드를 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 있습니다. &lt;code&gt;canDeactivate()&lt;/code&gt; 메소드의 현재 인스턴스를 제공 &lt;code&gt;component&lt;/code&gt; , 현재 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; 는 경우에 당신은 어떤 외부 정보에 액세스하는 데 필요한. 이 가드 만이 구성 요소에 사용하고 구성 요소의 속성을 가져 오거나 라우터에서 멀리 탐색을 허용해야하는지 확인해야하는 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2246c16c08b61d99b022d0d6c7301776becfb045" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; is a valid Angular directive, it isn't available by default.</source>
          <target state="translated">하지만 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 가 올바른 각도 지시어, 그것은 기본적으로 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="99c7fb8e8fe2caa5683ecf66a4f0b8dc02a8734c" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;HeroService&lt;/code&gt; has no access to &lt;code&gt;UserService&lt;/code&gt;, the factory function does. You inject both &lt;code&gt;Logger&lt;/code&gt; and &lt;code&gt;UserService&lt;/code&gt; into the factory provider and let the injector pass them along to the factory function.</source>
          <target state="translated">하지만 &lt;code&gt;HeroService&lt;/code&gt; 가 에 대한 액세스가 없습니다 &lt;code&gt;UserService&lt;/code&gt; 를 , 공장 기능을 수행합니다. 당신은 모두 주입 &lt;code&gt;Logger&lt;/code&gt; 와 &lt;code&gt;UserService&lt;/code&gt; 를 공장 공급자로 인젝터 공장 기능을 함께 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a71de44f8d521e498fa4c517279e05613ba8baef" translate="yes" xml:space="preserve">
          <source>Although developers strive to avoid it, many visual effects and third-party tools, such as jQuery, require DOM access. As a result, you might need to access a component's DOM element.</source>
          <target state="translated">개발자는이를 피하려고 노력하지만 jQuery와 같은 많은 시각 효과 및 타사 도구에는 DOM 액세스가 필요합니다. 결과적으로 구성 요소의 DOM 요소에 액세스해야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c63a4c9db8fae775d2c9b2460c0753c92e1ed4e5" translate="yes" xml:space="preserve">
          <source>Although in this example you're modelling a job application for heroes, there are no references to any specific hero question outside the objects returned by &lt;code&gt;QuestionService&lt;/code&gt;.</source>
          <target state="translated">이 예에서는 영웅에 대한 작업 응용 프로그램을 모델링하고 있지만 &lt;code&gt;QuestionService&lt;/code&gt; 가 반환 한 객체 외부의 특정 영웅 질문에 대한 참조는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="cc91b6a47c2c9426e25d4160f55077985fca9671" translate="yes" xml:space="preserve">
          <source>Although interceptors are capable of modifying requests and responses, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; instance properties are &lt;code&gt;readonly&lt;/code&gt;, rendering them largely immutable. They are immutable for a good reason: an app might retry a request several times before it succeeds, which means that the interceptor chain can re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</source>
          <target state="translated">인터셉터는 요청과 응답을 수정할 수 있지만 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 인스턴스 속성은 &lt;code&gt;readonly&lt;/code&gt; 이므로 거의 변경할 수 없습니다. 그 이유는 불변입니다. 앱은 성공하기 전에 요청을 여러 번 재 시도 할 수 있습니다. 즉, 인터셉터 체인이 동일한 요청을 여러 번 다시 처리 할 수 ​​있습니다. 인터셉터가 원래 요청 객체를 수정할 수있는 경우 재 시도 된 작업은 원래 요청이 아닌 수정 된 요청에서 시작됩니다. 불변성은 인터셉터가 각 시도에 대해 동일한 요청을 볼 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="eda7b93e32221f3afb3cbb94c32a8763a782190c" translate="yes" xml:space="preserve">
          <source>Although interceptors are capable of mutating requests and responses, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; instance properties are &lt;code&gt;readonly&lt;/code&gt;, rendering them largely immutable.</source>
          <target state="translated">인터셉터가 요청 및 응답을 변경할 수 있지만 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 인스턴스 특성은 &lt;code&gt;readonly&lt;/code&gt; 이므로 크게 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="140a2bef2ba1a6526c1ddea73a80aa5c89e23cae" translate="yes" xml:space="preserve">
          <source>Although invisible, the component&amp;mdash;and all of its descendant components&amp;mdash;tie up resources. The performance and memory burden can be substantial, responsiveness can degrade, and the user sees nothing.</source>
          <target state="translated">보이지는 않지만 구성 요소와 모든 하위 구성 요소는 리소스를 묶습니다. 성능 및 메모리 부담이 상당 할 수 있고 응답 성이 저하 될 수 있으며 사용자는 아무것도 볼 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d31505d453cadf512a3068c4535ce6c154083088" translate="yes" xml:space="preserve">
          <source>Although it doesn't actually log in, it has an &lt;code&gt;isLoggedIn&lt;/code&gt; flag to tell you whether the user is authenticated. Its &lt;code&gt;login()&lt;/code&gt; method simulates an API call to an external service by returning an observable that resolves successfully after a short pause. The &lt;code&gt;redirectUrl&lt;/code&gt; property stores the URL that the user wanted to access so you can navigate to it after authentication.</source>
          <target state="translated">실제로 로그인하지는 않지만 사용자가 인증되었는지 여부를 알려주 는 &lt;code&gt;isLoggedIn&lt;/code&gt; 플래그가 있습니다. 그것의 &lt;code&gt;login()&lt;/code&gt; 메서드는 관측 반환하여 외부 서비스에 대한 API 호출을 시뮬레이션 성공적으로 잠시 후 해결합니다. &lt;code&gt;redirectUrl&lt;/code&gt; 의 속성에는 당신이 인증 후를 탐색 할 수 있도록 사용자가 액세스 할 싶어하는 URL.</target>
        </trans-unit>
        <trans-unit id="8a59cd2708af00e8af91086a976046b0bcef21a1" translate="yes" xml:space="preserve">
          <source>Although it doesn't actually log in, it has what you need for this discussion. It has an &lt;code&gt;isLoggedIn&lt;/code&gt; flag to tell you whether the user is authenticated. Its &lt;code&gt;login&lt;/code&gt; method simulates an API call to an external service by returning an observable that resolves successfully after a short pause. The &lt;code&gt;redirectUrl&lt;/code&gt; property will store the attempted URL so you can navigate to it after authenticating.</source>
          <target state="translated">실제로 로그인하지는 않지만이 토론에 필요한 내용이 있습니다. 사용자 인증 여부를 알려주 는 &lt;code&gt;isLoggedIn&lt;/code&gt; 플래그가 있습니다. 그것의 &lt;code&gt;login&lt;/code&gt; 방법은 관측 반환하여 외부 서비스에 대한 API 호출을 시뮬레이션 성공적으로 잠시 후 해결합니다. &lt;code&gt;redirectUrl&lt;/code&gt; 의 당신이 인증 이후로 이동할 수 있도록 속성은 시도 URL을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="b709afe389b87b25545ae196d4d825808c5ef733" translate="yes" xml:space="preserve">
          <source>Although it's harmless to add components to this list, it's best to add only the components that are truly &lt;em&gt;entry components&lt;/em&gt;. Don't include components that &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;are referenced&lt;/a&gt; in the templates of other components.</source>
          <target state="translated">이 목록에 구성 요소를 추가하는 것은 무해하지만 실제로 &lt;em&gt;입력 구성 요소 인 구성&lt;/em&gt; 요소 만 추가하는 것이 가장 좋습니다 . 다른 구성 요소의 템플릿에서 &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;참조&lt;/a&gt; 되는 구성 요소는 포함하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="e6f1c72ed2810faf50b8f3333c1f8b5b5403cdef" translate="yes" xml:space="preserve">
          <source>Although it's possible to write complex template expressions, it's a better practice to avoid them.</source>
          <target state="translated">복잡한 템플릿 표현식을 작성할 수 있지만이를 피하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4a1e0521995f02fa13a22d0497e6341f339bfdd5" translate="yes" xml:space="preserve">
          <source>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. As such, the Router provides support for the matrix notation across browsers.</source>
          <target state="translated">매트릭스 표기법이 HTML 표준에 포함되지는 않았지만 합법적이며 부모 및 자식 경로에 속하는 매개 변수를 분리하는 방법으로 브라우저 라우팅 시스템에서 널리 사용되었습니다. 따라서 라우터는 브라우저 전반에 걸쳐 행렬 표기법을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b526ddc47425d94439f76e0b41ef7dc4ee102f58" translate="yes" xml:space="preserve">
          <source>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. The Router is such a system and provides support for the matrix notation across browsers.</source>
          <target state="translated">행렬 표기법은 HTML 표준으로 만들지 않았지만 합법적이며 부모 및 자식 경로에 속하는 매개 변수를 분리하는 방법으로 브라우저 라우팅 시스템에서 널리 사용되었습니다. 라우터는 그러한 시스템이며 브라우저에서 매트릭스 표기법을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8d8e9edc4365018503a0aa8ba523d7e123f26f73" translate="yes" xml:space="preserve">
          <source>Although not discussed here, there's an example of &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;getHeroNo404()&lt;/code&gt; method included in the sample source code.</source>
          <target state="translated">여기에서 논의되지는 않았지만, 예 거기 &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;getHeroNo404()&lt;/code&gt; 샘플 소스 코드에 포함 된 방법.</target>
        </trans-unit>
        <trans-unit id="6d18ca4365d2bef502c303f63c22228b94396427" translate="yes" xml:space="preserve">
          <source>Although not discussed here, there's an example of &lt;code&gt;map()&lt;/code&gt; in the &lt;code&gt;getHeroNo404()&lt;/code&gt; method included in the sample source code.</source>
          <target state="translated">여기에서 논의되지는 않았지만, 예 거기 &lt;code&gt;map()&lt;/code&gt; 에서 &lt;code&gt;getHeroNo404()&lt;/code&gt; 샘플 소스 코드에 포함 된 방법.</target>
        </trans-unit>
        <trans-unit id="1791d4dc1123e82f2994b8a2caf82568ea2a7c6d" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;AppConfig&lt;/code&gt; interface plays no role in dependency injection, it supports typing of the configuration object within the class.</source>
          <target state="translated">&lt;code&gt;AppConfig&lt;/code&gt; 인터페이스는 종속성 주입에서 아무런 역할을하지 않지만 클래스 내에서 구성 오브젝트 입력을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="fd82dd1db7d08ae6c8e08528e4b276fa2f0da283" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;compose&lt;/code&gt; route is configured to the &quot;popup&quot; outlet, that's not sufficient for connecting the route to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. You have to specify the named outlet in a &lt;em&gt;link parameters array&lt;/em&gt; and bind it to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with a property binding.</source>
          <target state="translated">&lt;code&gt;compose&lt;/code&gt; 라우트가 &quot;popup&quot;아웃렛으로 구성되어 있지만 라우터를 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 지시문 에 연결하는 데 충분하지 않습니다 . &lt;em&gt;링크 매개 변수 배열&lt;/em&gt; 에 명명 된 콘센트를 지정하고 속성 바인딩 을 사용하여 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 에 바인딩해야합니다.</target>
        </trans-unit>
        <trans-unit id="db12662de437927b080487074c85c43b5bbd2b73" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;compose&lt;/code&gt; route is pinned to the &quot;popup&quot; outlet, that's not sufficient for wiring the route to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. You have to specify the named outlet in a &lt;em&gt;link parameters array&lt;/em&gt; and bind it to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with a property binding.</source>
          <target state="translated">&lt;code&gt;compose&lt;/code&gt; 경로가 &quot;팝업&quot;콘센트에 고정되어 있지만 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 지시문에 경로를 연결하기에는 충분하지 않습니다 . 당신은에서 명명 된 콘센트 지정해야 &lt;em&gt;링크 매개 변수 배열을&lt;/em&gt; 하고 바인딩을받는 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 속성이 바인딩.</target>
        </trans-unit>
        <trans-unit id="780d733a048de3df146f7716ae29aeb8ee30bf5d" translate="yes" xml:space="preserve">
          <source>Although the Angular CLI is the easiest way to create an Angular component, you can also create a component manually. This section describes how to create the core component file within an existing Angular project.</source>
          <target state="translated">Angular CLI가 Angular 구성 요소를 만드는 가장 쉬운 방법이지만 구성 요소를 수동으로 만들 수도 있습니다. 이 섹션에서는 기존 Angular 프로젝트 내에서 핵심 구성 요소 파일을 만드는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="6c1c3ccb2170fee61a8a53ce46a7cfc550989c39" translate="yes" xml:space="preserve">
          <source>Although the admin dashboard &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; only contains a relative slash without an additional URL segment, it is a match to any route within the admin feature area. You only want the &lt;code&gt;Dashboard&lt;/code&gt; link to be active when the user visits that route. Adding an additional binding to the &lt;code&gt;Dashboard&lt;/code&gt; routerLink,&lt;code&gt;[routerLinkActiveOptions]=&quot;{ exact: true }&quot;&lt;/code&gt;, marks the &lt;code&gt;./&lt;/code&gt; link as active when the user navigates to the &lt;code&gt;/admin&lt;/code&gt; URL and not when navigating to any of the child routes.</source>
          <target state="translated">관리 대시 보드 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 에는 추가 URL 세그먼트없이 상대 슬래시 만 포함되어 있지만 관리 기능 영역 내의 모든 경로와 일치합니다. 사용자가 해당 경로를 방문 할 때만 &lt;code&gt;Dashboard&lt;/code&gt; 링크가 활성화 되기를 원합니다 . 받는 사람 바인딩 추가 추가 &lt;code&gt;Dashboard&lt;/code&gt; , routerLink &lt;code&gt;[routerLinkActiveOptions]=&quot;{ exact: true }&quot;&lt;/code&gt; , 마르크 &lt;code&gt;./&lt;/code&gt; 활성으로 링크 유저가로 이동합니다 &lt;code&gt;/admin&lt;/code&gt; URL이 아닌 자식 경로의 탐색.</target>
        </trans-unit>
        <trans-unit id="1d7c4334ace67bdbb9ee7db7773185ffcfb0f003" translate="yes" xml:space="preserve">
          <source>Although the admin dashboard &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; only contains a relative slash without an additional URL segment, it is considered a match to any route within the admin feature area. You only want the &lt;code&gt;Dashboard&lt;/code&gt; link to be active when the user visits that route. Adding an additional binding to the &lt;code&gt;Dashboard&lt;/code&gt; routerLink,&lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt;, marks the &lt;code&gt;./&lt;/code&gt; link as active when the user navigates to the &lt;code&gt;/admin&lt;/code&gt; URL and not when navigating to any of the child routes.</source>
          <target state="translated">관리 대시 보드 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 에는 추가 URL 세그먼트가없는 상대 슬래시 만 포함 되지만 관리 기능 영역 내의 모든 경로와 일치하는 것으로 간주됩니다. 당신은 단지 원하는 &lt;code&gt;Dashboard&lt;/code&gt; 링크 할 때 사용자가 방문하는 경로를 활성화 할 수 있습니다. &lt;code&gt;Dashboard&lt;/code&gt; routerLink에 추가 바인딩을 추가하면 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt; 는 사용자 가 하위 경로로 이동할 때가 아니라 &lt;code&gt;/admin&lt;/code&gt; URL로 이동할 때 &lt;code&gt;./&lt;/code&gt; 링크를 활성으로 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="b4df6da97c99904265a96515d7f37a5422025257" translate="yes" xml:space="preserve">
          <source>Although the component delegates hero deletion to the &lt;code&gt;HeroService&lt;/code&gt;, it remains responsible for updating its own list of heroes. The component's &lt;code&gt;delete()&lt;/code&gt; method immediately removes the &lt;em&gt;hero-to-delete&lt;/em&gt; from that list, anticipating that the &lt;code&gt;HeroService&lt;/code&gt; will succeed on the server.</source>
          <target state="translated">구성 요소는 영웅 삭제를 &lt;code&gt;HeroService&lt;/code&gt; 에 위임하지만 자체 영웅 목록을 업데이트 할 책임이 있습니다. 구성 요소의 &lt;code&gt;delete()&lt;/code&gt; 메서드 는 해당 목록에서 &lt;em&gt;hero-to-delete&lt;/em&gt; 를 즉시 제거 하여 &lt;code&gt;HeroService&lt;/code&gt; 가 서버에서 성공할 것으로 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="bea5a0e7aa0c7807f055d55ca7e78a9c93ccea40" translate="yes" xml:space="preserve">
          <source>Although the tests in this guide all run in the browser, some apps might run on a different platform at least some of the time.</source>
          <target state="translated">이 가이드의 테스트는 모두 브라우저에서 실행되지만 일부 앱은 최소한 다른 플랫폼에서 실행될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1308d7fdf10956a614e10b524f57beab992dc1b" translate="yes" xml:space="preserve">
          <source>Although this example uses variable assignment to initialize the components, you could instead declare and initialize the properties using a constructor:</source>
          <target state="translated">이 예제는 변수 할당을 사용하여 구성 요소를 초기화하지만 생성자를 사용하여 속성을 선언하고 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a895ffd8578e7962e8e90dd15f55eb1a1de64833" translate="yes" xml:space="preserve">
          <source>Although this testing guide follows the traditional style and the default &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI schematics&lt;/a&gt; generate test files with &lt;code&gt;beforeEach()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, feel free to adopt &lt;em&gt;this alternative approach&lt;/em&gt; in your own projects.</source>
          <target state="translated">이 테스트 안내서는 전통적인 스타일을 따르고 기본 &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI 회로도&lt;/a&gt; 는 &lt;code&gt;beforeEach()&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 를 사용하여 테스트 파일을 생성 하지만 자신의 프로젝트 &lt;em&gt;에서이 대체 방법&lt;/em&gt; 을 자유롭게 채택 &lt;em&gt;하십시오&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="7ae6deb63cacc642fcbb0f61179c36a85def2080" translate="yes" xml:space="preserve">
          <source>Although tokens used only as type specifiers are removed when converted to JavaScript, all tokens used for dependency injection are needed at runtime. These effectively change &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() other: OtherComponent)&lt;/code&gt; to &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() @&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;(OtherComponent) other)&lt;/code&gt;. The token is now in a value position, and causes the tree shaker to retain the reference.</source>
          <target state="translated">형식 지정 자로 만 사용되는 토큰은 JavaScript로 변환 할 때 제거되지만 종속성 주입에 사용되는 모든 토큰은 런타임에 필요합니다. 이는 &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() other: OtherComponent)&lt;/code&gt; 를 &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() @&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;(OtherComponent) other)&lt;/code&gt; 효과적으로 변경 합니다. 토큰은 이제 가치 위치에 있으며 트리 셰이커가 참조를 유지하도록합니다.</target>
        </trans-unit>
        <trans-unit id="7bc7decf04e5716adb169e2e1f89f0d3c435dadc" translate="yes" xml:space="preserve">
          <source>Although you can bootstrap an AngularJS app in code, many applications bootstrap declaratively with the &lt;code&gt;ng-app&lt;/code&gt; directive, giving it the name of the application's module (&lt;code&gt;movieHunter&lt;/code&gt;).</source>
          <target state="translated">코드에서 AngularJS 앱을 부트 스트랩 할 수 있지만 많은 애플리케이션은 &lt;code&gt;ng-app&lt;/code&gt; 지시문을 사용하여 선언적으로 부트 스트랩 하여 애플리케이션 모듈의 이름 ( &lt;code&gt;movieHunter&lt;/code&gt; )을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="e02c0ab9f3b340b1e4977e3101e04e64e8d94dda" translate="yes" xml:space="preserve">
          <source>Although you're not getting the behavior you want, Angular isn't broken. It's just using a different change-detection algorithm that ignores changes to the list or any of its items.</source>
          <target state="translated">원하는 동작을 얻지 못하더라도 Angular는 손상되지 않습니다. 목록이나 항목의 변경 사항을 무시하는 다른 변경 감지 알고리즘을 사용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="655bcd6a216624937d6672a34cb20e4a684201c0" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;export&lt;/code&gt; the component class so you can &lt;code&gt;import&lt;/code&gt; it elsewhere ... like in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 과 같이 다른 곳에서 &lt;code&gt;import&lt;/code&gt; 수 있도록 항상 컴포넌트 클래스를 &lt;code&gt;export&lt;/code&gt; 십시오 .</target>
        </trans-unit>
        <trans-unit id="c021e093164e1f74b3f35d8e47a96ac3223c76a9" translate="yes" xml:space="preserve">
          <source>Always get the service from an injector</source>
          <target state="translated">항상 인젝터에서 서비스를 받으십시오</target>
        </trans-unit>
        <trans-unit id="610fe60a986b98fb96b6924a7703fe7732269b5c" translate="yes" xml:space="preserve">
          <source>Always specify the complete absolute path when calling router's &lt;code&gt;navigateByUrl()&lt;/code&gt; method.</source>
          <target state="translated">라우터의 &lt;code&gt;navigateByUrl()&lt;/code&gt; 메서드를 호출 할 때 항상 완전한 절대 경로를 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="f5eae7714eb02f1ae104fb1f70b87e3fab6854b2" translate="yes" xml:space="preserve">
          <source>Amazon Cloud S3</source>
          <target state="translated">아마존 클라우드 S3</target>
        </trans-unit>
        <trans-unit id="7c060c43d1d915450d5cd5013ceedc7d9a2b52c6" translate="yes" xml:space="preserve">
          <source>Amend the &lt;code&gt;@angular/core&lt;/code&gt; import statement to include the &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; symbol.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 기호 를 포함 하도록 &lt;code&gt;@angular/core&lt;/code&gt; import 문을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="5b644c0a4c24e03ca14f068fc823dd64c778bf06" translate="yes" xml:space="preserve">
          <source>Among other features, Ivy introduces more comprehensive type-checking within templates. For details, see &lt;a href=&quot;template-typecheck&quot;&gt;Template Type-checking&lt;/a&gt;.</source>
          <target state="translated">다른 기능 중에서 Ivy는 템플릿 내에서보다 포괄적 인 유형 검사를 도입합니다. 자세한 내용은 &lt;a href=&quot;template-typecheck&quot;&gt;템플릿 유형 검사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a63ef4162e15e9f9a4264c4f633e746ec995f377" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../guide/observables&quot;&gt;Observable&lt;/a&gt; factory function: A function that returns an &lt;code&gt;Observable&lt;/code&gt;. The function will be used at runtime to obtain and subscribe to the &lt;code&gt;Observable&lt;/code&gt; and the ServiceWorker will be registered as soon as the first value is emitted.</source>
          <target state="translated">&lt;a href=&quot;../../guide/observables&quot;&gt;관찰 가능한&lt;/a&gt; 공장 기능 : 함수가 다시 표시하는 &lt;code&gt;Observable&lt;/code&gt; . 이 함수는 런타임에 &lt;code&gt;Observable&lt;/code&gt; 을 확보하고 구독하기 위해 사용되며 첫 번째 값이 나 오자마자 ServiceWorker가 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="7890dafd42800e1e635e68de3df438822747d36f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route.</source>
          <target state="translated">라우터가 경로 활성화를 시작할 때 트리거 되는 &lt;a href=&quot;../api/router/activationstart&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c39d1e22c53c2af9b2d4c377c45f82b0b1e2bcef" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route.</source>
          <target state="translated">라우터가 경로 활성화를 마치면 트리거 되는 &lt;a href=&quot;../api/router/activationstart&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2c21e55545fc6566ca7c2bfeac477e90a12a69d4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/childactivationend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route's children.</source>
          <target state="translated">라우터가 경로의 자식 활성화를 완료하면 트리거 되는 &lt;a href=&quot;../api/router/childactivationend&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e3327c4a4dd53191f4e45bd3a9702873e5e1df07" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/childactivationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route's children.</source>
          <target state="translated">라우터가 경로의 자식 활성화를 시작하면 트리거 되는 &lt;a href=&quot;../api/router/childactivationstart&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="72902f835d2457adbf3f424d7ed6aa5fbedee83b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/guardscheckend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Guards phase of routing successfully.</source>
          <target state="translated">라우터가 라우팅의 보호 단계를 완료하면 트리거 되는 &lt;a href=&quot;../api/router/guardscheckend&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7c9902eb347e259e539ce1420cfbf9fcb004d4a7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Guards phase of routing.</source>
          <target state="translated">라우터가 라우팅의 보호 단계를 시작할 때 트리거 되는 &lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="69e584daf4625901168aeeeb9d5204b8f03542cf" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationcancel&quot;&gt;event&lt;/a&gt; triggered when navigation is canceled. This can happen when a &lt;a href=&quot;router#guards&quot;&gt;Route Guard&lt;/a&gt; returns false during navigation, or redirects by returning a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationcancel&quot;&gt;이벤트는&lt;/a&gt; 탐색이 취소 될 때 트리거. 이는 탐색 중에 &lt;a href=&quot;router#guards&quot;&gt;Route Guard&lt;/a&gt; 가 false를 반환하거나 &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 를 반환하여 리디렉션 할 때 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="49db32d68fee43ab6e8e76805f82f499be0c9fd4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationcancel&quot;&gt;event&lt;/a&gt; triggered when navigation is canceled. This can happen when a &lt;a href=&quot;router-tutorial-toh#guards&quot;&gt;Route Guard&lt;/a&gt; returns false during navigation, or redirects by returning a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">탐색이 취소되면 트리거 되는 &lt;a href=&quot;../api/router/navigationcancel&quot;&gt;이벤트&lt;/a&gt; 입니다. &lt;a href=&quot;router-tutorial-toh#guards&quot;&gt;Route Guard&lt;/a&gt; 가 탐색 중에 false를 반환하거나 &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 를 반환하여 리디렉션 할 때 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71250dfa39f645ca9272ff2924abdbb047e81e1c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationend&quot;&gt;event&lt;/a&gt; triggered when navigation ends successfully.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationend&quot;&gt;이벤트는&lt;/a&gt; 탐색이 성공적으로 종료 될 때 트리거.</target>
        </trans-unit>
        <trans-unit id="5449cdb5f08ea0b83a8503bf2aa7e372f857eeb8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationerror&quot;&gt;event&lt;/a&gt; triggered when navigation fails due to an unexpected error.</source>
          <target state="translated">예기치 않은 오류로 인해 탐색에 실패하면 트리거 된 &lt;a href=&quot;../api/router/navigationerror&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a2ae571a3340d4a75539962ff60108d48d5c9537" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationstart&quot;&gt;event&lt;/a&gt; triggered when navigation starts.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationstart&quot;&gt;이벤트는&lt;/a&gt; 탐색이 시작될 때 트리거.</target>
        </trans-unit>
        <trans-unit id="426962608c573ea20e84f4af471ba7aecd0d4a37" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/resolveend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Resolve phase of routing successfuly.</source>
          <target state="translated">라우터가 라우팅 해결 단계를 완료하면 트리거 된 &lt;a href=&quot;../api/router/resolveend&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fd22e501f75afe5ba52de290c4ca9f9d39a2d35d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/resolvestart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Resolve phase of routing.</source>
          <target state="translated">라우터가 라우팅 해결 단계를 시작할 때 트리거 되는 &lt;a href=&quot;../api/router/resolvestart&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ea85ce4a6e9ac1b58d76f15ffef657cbbddf2c3f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;event&lt;/a&gt; triggered after a route has been lazy loaded.</source>
          <target state="translated">경로가 지연로드 된 후 트리거 된 &lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2c0e692d2c146b893b035f9f9829067876ae851d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;event&lt;/a&gt; triggered before the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;router#asynchronous-routing&quot;&gt;lazy loads&lt;/a&gt; a route configuration.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;router#asynchronous-routing&quot;&gt; 지연&lt;/a&gt; 이 라우트 구성을 로드 하기 전에 트리거 되는 &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="713cc0f8fae10897af2b4e3e7c5687c0d5a96c5b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;event&lt;/a&gt; triggered before the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;router-tutorial-toh#asynchronous-routing&quot;&gt;lazy loads&lt;/a&gt; a route configuration.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 가 경로 구성을 &lt;a href=&quot;router-tutorial-toh#asynchronous-routing&quot;&gt;지연로드&lt;/a&gt; 하기 전에 트리거 되는 &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;이벤트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="899c0961591582cac03b97b9fe13c8147d2c81ea" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routesrecognized&quot;&gt;event&lt;/a&gt; triggered when the Router parses the URL and the routes are recognized.</source>
          <target state="translated">&lt;a href=&quot;../api/router/routesrecognized&quot;&gt;이벤트는&lt;/a&gt; 라우터가 URL을 구문 분석하고 루트는 인식 할 때 트리거.</target>
        </trans-unit>
        <trans-unit id="69ea6deb0af3e15d693596cfbf4f88b319c82d8b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/scroll&quot;&gt;event&lt;/a&gt; that represents a scrolling event.</source>
          <target state="translated">&lt;a href=&quot;../api/router/scroll&quot;&gt;이벤트&lt;/a&gt; 스크롤 이벤트를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="47b5f065a7dd417173397ba045ea5ec984d41ba8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directive&lt;/a&gt; changes the appearance or behavior of an element, component, or another directive. For example, the built-in &lt;a href=&quot;built-in-directives#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive changes several element styles at the same time.</source>
          <target state="translated">&lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;속성&lt;/em&gt; 지시어는&lt;/a&gt; 요소, 구성 요소 또는 다른 지시자의 모양이나 동작을 변경합니다. 예를 들어, 기본 제공 &lt;a href=&quot;built-in-directives#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt; 지시문은 여러 요소 스타일을 동시에 변경합니다.</target>
        </trans-unit>
        <trans-unit id="c1d7ddd4c6221de6325bfd2f11d8ba52144db874" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directive&lt;/a&gt; changes the appearance or behavior of an element, component, or another directive. For example, the built-in &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive changes several element styles at the same time.</source>
          <target state="translated">&lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;속성&lt;/em&gt; 지시어는&lt;/a&gt; 요소, 구성 요소 또는 다른 지시자의 모양이나 동작을 변경합니다. 예를 들어 내장 &lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt; 지시문은 여러 요소 스타일을 동시에 변경합니다.</target>
        </trans-unit>
        <trans-unit id="f87ce62d86cce8464606f29fc379d5a13e173a7c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt; is a class marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator with a metadata object that describes how that particular part of the app fits together with the other parts. NgModules are specific to Angular. While classes with an &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator are by convention kept in their own files, they differ from JavaScript modules because they include this metadata.</source>
          <target state="translated">&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule는&lt;/a&gt; 에 의해 표시된 클래스 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 방법 앱 맞는 그 특정 부분의 서로 다른 부분에 기술하는 메타 데이터 객체와 장식. NgModules는 Angular에만 해당됩니다. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터가 있는 클래스 는 규칙에 따라 자체 파일에 보관되지만이 메타 데이터를 포함하기 때문에 JavaScript 모듈과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="381caa57d2775be37deef699cc2ad5d0b0696312" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt; expression is ideal because it is free of side effects and improves Angular's change detection performance. In Angular terms, an idempotent expression always returns &lt;em&gt;exactly the same thing&lt;/em&gt; until one of its dependent values changes.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;멱등&lt;/a&gt; 은 부작용이없고 각도의 변화를 검출 성능을 개선하기 때문에 표현식에 이상적이다. 각도 용어로 dem 등식 은 종속 값 중 하나가 변경 될 때까지 항상 &lt;em&gt;똑같은 것을&lt;/em&gt; 반환 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ca5e0929440033b5793e264cd56bccd1cc748753" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;npm-packages&quot;&gt;npm package&lt;/a&gt; that plugs gaps in a browser's JavaScript implementation. See &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt; for polyfills that support particular functionality for particular platforms.</source>
          <target state="translated">&lt;a href=&quot;npm-packages&quot;&gt;NPM 패키지&lt;/a&gt; 브라우저의 자바 스크립트 구현에 격차를 연결합니다. 특정 플랫폼의 특정 기능을 &lt;a href=&quot;browser-support&quot;&gt;지원&lt;/a&gt; 하는 폴리 필에 대한 브라우저 지원 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="219f19f290eb214e9b46b6b243f29af829538794" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; root element is detected as an SVG element automatically, without the prefix.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; 루트 엘리먼트는 접두어없이 자동 SVG 요소로서 검출된다.</target>
        </trans-unit>
        <trans-unit id="8e73ae230a1248e9c7e2883b99036f3d5f240f5f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; presents the list of messages in repeated &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 은 선물 반복의 메시지 목록 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 요소를.</target>
        </trans-unit>
        <trans-unit id="f2f90242a3b15020a7dda505cb0f3db9126f9d69" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 당신이 AngularJS와에게 핵심 서비스를 제공하기 위해 가져, 그리고 하이브리드 업그레이드 응용 프로그램을 부트 스트랩하는 데 사용되는 인스턴스 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4b5b7b463e93a6c1bdc30c63b8e5d59fb4e799f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method does not begin its HTTP request until you call &lt;code&gt;subscribe()&lt;/code&gt; on the observable returned by that method. This is true for &lt;em&gt;all&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;&lt;em&gt;methods&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 당신이 호출 할 때까지 메소드는 HTTP 요청을 시작하지 않는 &lt;code&gt;subscribe()&lt;/code&gt; , 그 메소드에 의해 반환 된 관찰에. 이것은 &lt;em&gt;모든 &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; &lt;em&gt; 메소드에 해당&lt;/em&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="3486e52a9ca74e105c9d47272170fbe086672a4e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 사용 추가 비동기 유효성 검사기 등록 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="a3fc1b81c07404d7fb201c7c09fb069d006db201" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 와 함께 사용 추가적인 동기 검사기 등록 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="9acb76cd675cf3db071a0fd0b62776f333e09782" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 당신이 AngularJS와에게 핵심 서비스를 제공하기 위해 가져, 그리고 하이브리드 업그레이드 응용 프로그램을 부트 스트랩하는 데 사용되는 인스턴스 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a705ac5afb0c3c72cf40d0a78a176ebc767e55b7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 사용 추가 비동기 유효성 검사기 등록 &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="23717595533a9e7f86e6906ec79bd920cab4e792" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 와 함께 사용 추가적인 동기 검사기 등록 &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="c48cdd99d250e9b5794feac11e209b12cc845dae" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; is backed by a render-specific element. In the browser, this is usually a DOM element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 렌더 별을 요소에 의해 백업됩니다. 브라우저에서 이는 일반적으로 DOM 요소입니다.</target>
        </trans-unit>
        <trans-unit id="0902cc5f82cdfcbcb355b954a52dc73cbbfff74b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; configuration object that controls how navigation is performed.</source>
          <target state="translated">탐색 수행 방법을 제어 하는 &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; 구성 개체입니다.</target>
        </trans-unit>
        <trans-unit id="ec99dc581b15e270f8a008cf6fe23c15b13a4e6e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; is a replacement for a &lt;code&gt;new&lt;/code&gt; operator, which can automatically resolve the constructor dependencies.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; A에 대한 대체합니다 &lt;code&gt;new&lt;/code&gt; 자동으로 생성자 의존성을 해결할 수 있습니다 연산자.</target>
        </trans-unit>
        <trans-unit id="b1291a4011084cae6a49c7568f00d5c3f842045f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property should normally be initialized to an Angular &lt;a href=&quot;../api/core/eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; with values flowing out of the component as &lt;a href=&quot;template-syntax#event-binding&quot;&gt;events&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 속성은 일반적 각도로 초기화되어야 &lt;a href=&quot;../api/core/eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; 값과 같은 구성 요소의 밖으로 흐르는 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;이벤트&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c0efdf314434e0bdd77bc0f5a83a46140513339" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; instance begins publishing values only when someone subscribes to it. You subscribe by calling the &lt;code&gt;subscribe()&lt;/code&gt; method of the instance, passing an observer object to receive the notifications.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 인스턴스는 누군가에 가입 한 경우에만 값을 게시 시작합니다. 인스턴스 의 &lt;code&gt;subscribe()&lt;/code&gt; 메소드를 호출하고 관찰자 오브젝트를 전달하여 알림을 수신하여 구독 합니다.</target>
        </trans-unit>
        <trans-unit id="496291c15f69bd4995a0ab9d8aaf7bfd7fe93e3b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the URL &lt;a href=&quot;router#fragment&quot;&gt;fragment&lt;/a&gt; available to all routes.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; URL의는 &lt;a href=&quot;router#fragment&quot;&gt;단편화&lt;/a&gt; 모든 경로에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebbb34c674042ddab3f18b8288006f1608e8cb94" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the URL &lt;a href=&quot;router-tutorial-toh#fragment&quot;&gt;fragment&lt;/a&gt; available to all routes.</source>
          <target state="translated">모든 경로에서 사용할 수 있는 URL &lt;a href=&quot;router-tutorial-toh#fragment&quot;&gt;조각&lt;/a&gt; 의 &lt;code&gt;Observable&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="b4fa68903eb03e9a2e62a2a57a0c8d5942de1bfa" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the route path(s), represented as an array of strings for each part of the route path.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 라우트 경로의 각 부분 문자열 배열로 표현 라우트 경로 (S)의.</target>
        </trans-unit>
        <trans-unit id="04f30cfd0bce06b1acdce10f416a6eb14bf52ffb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 포함 &lt;a href=&quot;../api/router/parammap&quot;&gt;지도&lt;/a&gt; 의 &lt;a href=&quot;router#query-parameters&quot;&gt;쿼리 매개 변수&lt;/a&gt; 모든 경로에 사용할 수 있습니다. 맵은 쿼리 매개 변수에서 단일 및 다중 값 검색을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="1025632f96a98d4b5173ce9d2c6eed1251883f7b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the &lt;a href=&quot;router-tutorial-toh#query-parameters&quot;&gt;query parameters&lt;/a&gt; available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">모든 경로에서 사용할 수 있는 &lt;a href=&quot;router-tutorial-toh#query-parameters&quot;&gt;쿼리 매개 변수&lt;/a&gt; 의 &lt;a href=&quot;../api/router/parammap&quot;&gt;맵&lt;/a&gt; 이 포함 된 &lt;code&gt;Observable&lt;/code&gt; 입니다 . 맵은 쿼리 매개 변수에서 단일 및 다중 값 검색을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="43be0a230743764c26dd920f3024d4f1250bc9f5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the required and &lt;a href=&quot;router#optional-route-parameters&quot;&gt;optional parameters&lt;/a&gt; specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">경로 와 관련된 필수 및 &lt;a href=&quot;router#optional-route-parameters&quot;&gt;선택적 매개 변수&lt;/a&gt; 의 &lt;a href=&quot;../api/router/parammap&quot;&gt;맵&lt;/a&gt; 을 포함 하는 &lt;code&gt;Observable&lt;/code&gt; 입니다 . 맵은 동일한 매개 변수에서 단일 및 다중 값 검색을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="439965d6e53f3022fdfa1a09f892680a0a4945e2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the required and &lt;a href=&quot;router-tutorial-toh#optional-route-parameters&quot;&gt;optional parameters&lt;/a&gt; specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">경로에 특정한 필수 및 &lt;a href=&quot;router-tutorial-toh#optional-route-parameters&quot;&gt;선택적 매개 변수&lt;/a&gt; 의 &lt;a href=&quot;../api/router/parammap&quot;&gt;맵&lt;/a&gt; 이 포함 된 &lt;code&gt;Observable&lt;/code&gt; 입니다 . 맵은 동일한 매개 변수에서 단일 및 다중 값 검색을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8f7e21dd9af9c63a178fb6539d2db368c3122537" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains the &lt;code&gt;data&lt;/code&gt; object provided for the route. Also contains any resolved values from the &lt;a href=&quot;router#resolve-guard&quot;&gt;resolve guard&lt;/a&gt;.</source>
          <target state="translated">경로에 제공된 &lt;code&gt;data&lt;/code&gt; 개체 가 포함 된 &lt;code&gt;Observable&lt;/code&gt; 입니다 . 또한 확인 &lt;a href=&quot;router#resolve-guard&quot;&gt;가드&lt;/a&gt; 에서 확인 된 모든 값을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="6c577b17009c4019b5a8a7d58a36748a2c2a3ce0" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains the &lt;code&gt;data&lt;/code&gt; object provided for the route. Also contains any resolved values from the &lt;a href=&quot;router-tutorial-toh#resolve-guard&quot;&gt;resolve guard&lt;/a&gt;.</source>
          <target state="translated">경로에 제공된 &lt;code&gt;data&lt;/code&gt; 개체 를 포함 하는 &lt;code&gt;Observable&lt;/code&gt; 입니다 . 또한 &lt;a href=&quot;router-tutorial-toh#resolve-guard&quot;&gt;해결 가드&lt;/a&gt; 에서 해결 된 모든 값을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="659371a63d96eaa9846b4e62b2ecd146eb8fb3a8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;e2e/&lt;/code&gt; folder at the top level contains source files for a set of end-to-end tests that correspond to the root-level application, along with test-specific configuration files.</source>
          <target state="translated">최상위 레벨 의 &lt;code&gt;e2e/&lt;/code&gt; 폴더에는 테스트 별 구성 파일과 함께 루트 레벨 응용 프로그램에 해당하는 엔드-투-엔드 테스트 세트의 소스 파일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5f9c8ae60c205e172f05d9395ece9247067727b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ngOnInit()&lt;/code&gt; is a good place for a component to fetch its initial data. For an example, see the &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; 초기 데이터를 가져올 수있는 구성 요소에 대한 좋은 장소입니다. 예제는 &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroes 튜토리얼을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a393989fd86c0b1fb47b08868996156fe76ee83d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ngOnInit()&lt;/code&gt; is a good place for a component to fetch its initial data. The &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroes Tutorial&lt;/a&gt; guide shows how.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; 초기 데이터를 가져올 수있는 구성 요소에 대한 좋은 장소입니다. &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;영웅의 투어는 튜토리얼&lt;/a&gt; 방법 쇼를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="40bf5611d5635b162977a8f19c777ed4e7ce75d7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of body returns an observable of &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; with the same &lt;code&gt;T&lt;/code&gt; body type.</source>
          <target state="translated">body 의 &lt;code&gt;observe&lt;/code&gt; 값은 &lt;code&gt;T&lt;/code&gt; 본문 유형 이 동일한 &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 의 관찰 가능 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="09173ee04df6635197986a7dcb62f7c7941d2cfe" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of events returns an observable of the raw &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; stream, including progress events by default.</source>
          <target state="translated">&lt;code&gt;observe&lt;/code&gt; 사건의 값은 원료의 관찰 반환 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 에 기본적으로 진행 이벤트를 포함 스트림.</target>
        </trans-unit>
        <trans-unit id="c6c6a2eb3f2af282b7e5e7ba7956f7e168813b54" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of response returns an observable of &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;, where the &lt;code&gt;T&lt;/code&gt; parameter depends on the &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and any optionally provided type parameter.</source>
          <target state="translated">response 의 &lt;code&gt;observe&lt;/code&gt; 값은 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt; 의 옵저버 블을 리턴합니다 . 여기서 &lt;code&gt;T&lt;/code&gt; 매개 변수는 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; 및 선택적으로 제공된 유형 매개 변수에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="d02ab364b63f0d847dba8d71957b97935e618308" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of response returns an observable of &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;, where the &lt;code&gt;T&lt;/code&gt; parameter depends on the &lt;code&gt;responseType&lt;/code&gt; and any optionally provided type parameter.</source>
          <target state="translated">응답 의 &lt;code&gt;observe&lt;/code&gt; 값은 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt; 의 관찰 가능 항목을 반환합니다 . 여기서 &lt;code&gt;T&lt;/code&gt; 매개 변수는 &lt;code&gt;responseType&lt;/code&gt; 및 선택적으로 제공되는 형식 매개 변수에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="26ce9d0a751c4b4bca560fdfc4e8290382f4ff8b" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;Admin&lt;/em&gt; area to manage the list of crises and heroes.</source>
          <target state="translated">위기 및 영웅 목록을 관리 하는 &lt;em&gt;관리&lt;/em&gt; 영역입니다.</target>
        </trans-unit>
        <trans-unit id="b19e97dba2208f0862e676d34764de4f98f851d9" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;add schematic&lt;/em&gt; allows developers to install your library in an Angular workspace using &lt;code&gt;ng add&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;추가 회로도는&lt;/em&gt; 개발자가 사용하여 각도 작업 공간에서 라이브러리를 설치할 수 있습니다 &lt;code&gt;ng add&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6ec44fe7f1a288919612b48c15847deaef368424" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;attribute directive&lt;/em&gt; modifies the behavior of an element, component or another directive. Its name reflects the way the directive is applied: as an attribute on a host element.</source>
          <target state="translated">&lt;em&gt;속성 지시문&lt;/em&gt; 수정 요소, 구성 요소 또는 다른 지시어의 동작. 이름은 지시문이 적용되는 방식을 호스트 요소의 속성으로 반영합니다.</target>
        </trans-unit>
        <trans-unit id="0ec56b57e883f5387676814357ed484d6aaa7704" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;update schematic&lt;/em&gt; can tell the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command how to update your library's dependencies and adjust for breaking changes when you release a new version.</source>
          <target state="translated">&lt;em&gt;업데이트 설계도&lt;/em&gt; 말할 수 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; 라이브러리의 종속성을 업데이트하고 새 버전을 출시 변화를 깨는 조정하는 방법 명령을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3d974c9e9a2c3ede30e5346cca23d7a8a49874ed" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;update schematic&lt;/em&gt; can tell the &lt;code&gt;ng update&lt;/code&gt; command how to update your library's dependencies and adjust for breaking changes when you release a new version.</source>
          <target state="translated">&lt;em&gt;업데이트 설계도&lt;/em&gt; 말할 수 &lt;code&gt;ng update&lt;/code&gt; 라이브러리의 종속성을 업데이트하고 새 버전을 출시 변화를 깨는 조정하는 방법 명령을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="761f41f255dd677b107e4bd110cf2558311066df" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;Attribute&lt;/strong&gt; directive changes the appearance or behavior of a DOM element.</source>
          <target state="translated">&lt;strong&gt;속성&lt;/strong&gt; 지시어는 DOM 요소의 모양이나 동작을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="360a55bcdc221a2a622ac71ccb7b30ec33c1e145" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;../guide/event-binding&quot;&gt;event binding&lt;/a&gt; binds the button's click event to &lt;code&gt;MessageService.clear()&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/event-binding&quot;&gt;이벤트 바인딩&lt;/a&gt; 은 버튼의 클릭 이벤트를 &lt;code&gt;MessageService.clear()&lt;/code&gt; 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="ac0f1891644c942a2466a1e07ed0df2da374772f" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; binds the button's click event to &lt;code&gt;MessageService.clear()&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;이벤트 바인딩&lt;/a&gt; 은 버튼의 click 이벤트를 &lt;code&gt;MessageService.clear()&lt;/code&gt; 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="43775620687c736b758a71c493e7f6e17f5e85cc" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; packaged as a &lt;a href=&quot;glossary#custom-element&quot;&gt;custom element&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#custom-element&quot;&gt;사용자 정의 요소&lt;/a&gt; 로 패키지 된 각도 &lt;a href=&quot;glossary#component&quot;&gt;구성 &lt;/a&gt;요소 .</target>
        </trans-unit>
        <trans-unit id="f7d10a3ad012872f7ef8bb8e2bb8056b9624d030" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive in its template that displays views based on router navigations.</source>
          <target state="translated">라우터 탐색을 기반으로 뷰를 표시하는 템플릿에 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 지시문이 있는 각도 &lt;a href=&quot;glossary#component&quot;&gt;구성 요소&lt;/a&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="ae5befb0e78f74df39d0a2413426de6480b4eff1" translate="yes" xml:space="preserve">
          <source>An Angular HTML form template.</source>
          <target state="translated">Angular HTML 양식 템플릿.</target>
        </trans-unit>
        <trans-unit id="c46699afa49393f6d4cbd5edc2fb078febaadc48" translate="yes" xml:space="preserve">
          <source>An Angular NgModule is a class with the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator&amp;mdash;JavaScript modules don't have to have the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. Angular's &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; and they serve a similar purpose.</source>
          <target state="translated">Angular NgModule은 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터 가있는 클래스입니다. JavaScript 모듈에는 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터가 없어도 됩니다. Angular의 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;imports&lt;/code&gt; 과 &lt;code&gt;exports&lt;/code&gt; 을 가지고 있으며 비슷한 목적을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="318d525298ccecf3917c9882251bdba1ace41170" translate="yes" xml:space="preserve">
          <source>An Angular app needs at least one module that serves as the root module. As you add features to your app, you can add them in modules. The following are frequently used Angular modules with examples of some of the things they contain:</source>
          <target state="translated">Angular 앱에는 루트 모듈 역할을하는 하나 이상의 모듈이 필요합니다. 앱에 기능을 추가 할 때 모듈에 기능을 추가 할 수 있습니다. 다음은 자주 사용되는 앵귤러 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="17e4e945b590d3025d8261eb8ed46e27c36c3781" translate="yes" xml:space="preserve">
          <source>An Angular app runs in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays by resolving &lt;a href=&quot;glossary#data-binding&quot;&gt;data bindings&lt;/a&gt;.</source>
          <target state="translated">Angular 앱은 데이터 변경 사항을 확인하고 &lt;a href=&quot;glossary#data-binding&quot;&gt;데이터 바인딩&lt;/a&gt; 을 해결하여 표시되는 정보를 업데이트하여 비동기 이벤트에 응답 할 수있는 영역에서 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a83164b2c79029071aa75bdc4ec8a64b92ea5118" translate="yes" xml:space="preserve">
          <source>An Angular app&amp;mdash;you can generate a basic Angular app using the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;.</source>
          <target state="translated">Angular 앱 &lt;a href=&quot;cli&quot;&gt;&amp;mdash;Angular CLI를&lt;/a&gt; 사용하여 기본 Angular 앱을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5a58a2db54c37533d8743189ca00c22cff5f930" translate="yes" xml:space="preserve">
          <source>An Angular application comprises a tree of components, in which each Angular component has a specific purpose and responsibility.</source>
          <target state="translated">Angular 응용 프로그램은 구성 요소 트리로 구성되며 각 Angular 구성 요소에는 특정 목적과 책임이 있습니다.</target>
        </trans-unit>
        <trans-unit id="224c83ccdc365f0fb95c344a9b94b58e6e776da8" translate="yes" xml:space="preserve">
          <source>An Angular application consists mainly of components and their HTML templates. Because the components and templates provided by Angular cannot be understood by the browser directly, Angular applications require a compilation process before they can run in a browser.</source>
          <target state="translated">Angular 응용 프로그램은 주로 구성 요소와 해당 HTML 템플릿으로 구성됩니다. Angular에서 제공하는 구성 요소 및 템플릿은 브라우저에서 직접 이해할 수 없으므로 Angular 응용 프로그램은 브라우저에서 실행하기 전에 컴파일 프로세스가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="abdf235f2e0f6378bc1eb3fb7b12653a48e94457" translate="yes" xml:space="preserve">
          <source>An Angular application has multiple injectors, arranged in a tree hierarchy that parallels the component tree. Each injector creates a singleton instance of a dependency. That same instance is injected wherever that injector provides that service. A particular service can be provided and created at any level of the injector hierarchy, which means that there can be multiple instances of a service if it is provided by multiple injectors.</source>
          <target state="translated">Angular 응용 프로그램에는 구성 요소 트리와 비슷한 트리 계층 구조로 배열 된 여러 인젝터가 있습니다. 각 인젝터는 종속성의 단일 인스턴스를 작성합니다. 인젝터가 해당 서비스를 제공하는 모든 곳에서 동일한 인스턴스가 주입됩니다. 특정 레벨의 인젝터 계층에서 특정 서비스를 제공하고 작성할 수 있습니다. 즉, 여러 인젝터에서 서비스를 제공하는 경우 서비스 인스턴스가 여러 개있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="901f5d47e5b42b0f1b83f5de4ab44ccaaf9f4393" translate="yes" xml:space="preserve">
          <source>An Angular class or other definition that provides a dependency using the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; mechanism. An injectable &lt;a href=&quot;glossary#service&quot;&gt;service&lt;/a&gt; class must be marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. Other items, such as constant values, can also be injectable.</source>
          <target state="translated">&lt;a href=&quot;glossary#di&quot;&gt;의존성 주입&lt;/a&gt; 메커니즘을 사용하여 의존성 을 제공하는 Angular 클래스 또는 기타 정의 . 주입 가능한 &lt;a href=&quot;glossary#service&quot;&gt;서비스&lt;/a&gt; 클래스는 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;데코레이터&lt;/a&gt; 로 표시해야합니다 . 상수 값과 같은 다른 항목도 주사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca9a64e3c4625a8c6e8d002351029891fd08daa2" translate="yes" xml:space="preserve">
          <source>An Angular component can be &quot;downgraded&quot; to an AngularJS component. This is achieved by defining an AngularJS directive, which bootstraps the Angular component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular 컴포넌트는 AngularJS 컴포넌트로 &quot;다운 그레이드&quot;될 수 있습니다. 이는 Angular 컴포넌트를 DOM의 위치에 부트 스트랩하는 AngularJS 지시문을 정의하여 수행됩니다. &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="94ed2170f6f1643869b56898066095381b91d979" translate="yes" xml:space="preserve">
          <source>An Angular component can be downgraded to an AngularJS component directive. This creates an AngularJS directive, which bootstraps the Angular component in that location.</source>
          <target state="translated">Angular 구성 요소는 AngularJS 구성 요소 지시문으로 다운 그레이드 될 수 있습니다. 그러면 AngularJS 지시문이 생성되어 해당 위치에서 Angular 구성 요소를 부트 스트랩합니다.</target>
        </trans-unit>
        <trans-unit id="84e3e11bc265bb72484f1b08eb8f80c960cc9617" translate="yes" xml:space="preserve">
          <source>An Angular component class is responsible for exposing data and handling most of the view's display and user-interaction logic through &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;.</source>
          <target state="translated">Angular 컴포넌트 클래스는 &lt;a href=&quot;glossary#data-binding&quot;&gt;데이터 바인딩을&lt;/a&gt; 통해 데이터 를 노출하고 뷰의 디스플레이 및 사용자 상호 작용 로직의 대부분을 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="7e69f08f5089ce0be09fa77cc573534bb33bf463" translate="yes" xml:space="preserve">
          <source>An Angular component requires a template defined using &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt;. You cannot have both statements in a component.</source>
          <target state="translated">Angular 구성 요소에는 &lt;code&gt;template&lt;/code&gt; 또는 &lt;code&gt;templateUrl&lt;/code&gt; 을 사용하여 정의 된 템플릿이 필요합니다 . 구성 요소에 두 문을 모두 가질 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="055dd8ce39f4854631f9678e6236d3d89f44ba38" translate="yes" xml:space="preserve">
          <source>An Angular component with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; that displays views based on router navigations.</source>
          <target state="translated">라우터 탐색을 기반으로 뷰를 표시 하는 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 이 있는 각도 구성 요소입니다 .</target>
        </trans-unit>
        <trans-unit id="0583a50b83c1574e7c5305e71080338ec56fc21b" translate="yes" xml:space="preserve">
          <source>An Angular form has two parts: an HTML-based &lt;em&gt;template&lt;/em&gt; and a component &lt;em&gt;class&lt;/em&gt; to handle data and user interactions programmatically. Begin with the class because it states, in brief, what the hero editor can do.</source>
          <target state="translated">Angular 폼은 HTML 기반 &lt;em&gt;템플릿&lt;/em&gt; 과 프로그래밍 방식으로 데이터 및 사용자 상호 작용을 처리 하는 구성 요소 &lt;em&gt;클래스의&lt;/em&gt; 두 부분 으로 구성 됩니다. 영웅 편집자가 할 수있는 일을 간략하게 설명하기 때문에 수업을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="feb425f8a5e188113a133b8bf3ee82774575750d" translate="yes" xml:space="preserve">
          <source>An Angular library is an Angular &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt; that differs from an app in that it cannot run on its own. A library must be imported and used in an app.</source>
          <target state="translated">Angular 라이브러리는 자체적으로 실행할 수 없다는 점에서 앱과 다른 Angular &lt;a href=&quot;glossary#project&quot;&gt;프로젝트&lt;/a&gt; 입니다. 라이브러리는 앱에서 가져 와서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="39a17a3341ed73b84cf9c19e3784f7825b103d30" translate="yes" xml:space="preserve">
          <source>An AngularJS component can be &quot;upgraded&quot;&quot; to an Angular component. This is achieved by defining an Angular directive, which bootstraps the AngularJS component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJS와 구성 요소는 각도 구성 요소 &quot;,&quot;업그레이드 &quot;할 수 있습니다. 이것은 DOM. 페이지에서의 위치에 컴포넌트 AngularJS와 부트 스트랩 각도 지시어를 정의함으로써 달성된다 &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d7fbbc51dcdac1c27708c03be77bb73e12702b44" translate="yes" xml:space="preserve">
          <source>An AngularJS component can be upgraded to an Angular component. This creates an Angular directive, which bootstraps the AngularJS component directive in that location.</source>
          <target state="translated">AngularJS 구성 요소는 Angular 구성 요소로 업그레이드 할 수 있습니다. 그러면 Angular 지시문이 만들어져 AngularJS 구성 요소 지시문을 해당 위치에 부트 스트랩합니다.</target>
        </trans-unit>
        <trans-unit id="4a64cb5ebfd2cbf42d2f183810699373d7988f5d" translate="yes" xml:space="preserve">
          <source>An AngularJS component directive that is fully aligned with the Angular architecture may look something like this:</source>
          <target state="translated">Angular 아키텍처와 완전히 일치하는 AngularJS 구성 요소 지시문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8a975ebf31d46d77cfdf5f77c89cee15a4b405cd" translate="yes" xml:space="preserve">
          <source>An HTML file for the component template.</source>
          <target state="translated">구성 요소 템플리트의 HTML 파일.</target>
        </trans-unit>
        <trans-unit id="adeafd3c56d09b94f0aa3048fdb5f004ce4b1a22" translate="yes" xml:space="preserve">
          <source>An HTML template that declares what renders on the page</source>
          <target state="translated">페이지에서 렌더링되는 내용을 선언하는 HTML 템플릿</target>
        </trans-unit>
        <trans-unit id="a3f4bdfe7e7387bc48b45d52ab3ae4d5c67454c6" translate="yes" xml:space="preserve">
          <source>An HTTP request/response body that represents serialized parameters, per the MIME type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.</source>
          <target state="translated">MIME 유형 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 에 따라 직렬화 된 매개 변수를 나타내는 HTTP 요청 / 응답 본문입니다 .</target>
        </trans-unit>
        <trans-unit id="e3a02c74d3b66bdb47a53584bb85ba7824e6d06f" translate="yes" xml:space="preserve">
          <source>An InjectionToken that gets the current &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;createInjector()&lt;/code&gt;-style injectors.</source>
          <target state="translated">&lt;code&gt;createInjector()&lt;/code&gt; 스타일 &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 대한 현재 인젝터 를 가져 오는 InjectionToken입니다 .</target>
        </trans-unit>
        <trans-unit id="6d36e3d0c45ffd3f37a9efa12c23d595fbbad196" translate="yes" xml:space="preserve">
          <source>An InjectionToken that gets the current &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;createInjector()&lt;/code&gt;-style injectors.</source>
          <target state="translated">&lt;code&gt;createInjector()&lt;/code&gt; 스타일 &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 대한 현재 인젝터 를 가져 오는 InjectionToken입니다 .</target>
        </trans-unit>
        <trans-unit id="148344ddb54e50e9920be9a68ce56bf37e875498" translate="yes" xml:space="preserve">
          <source>An NgModule bounds &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; only. Declarables are the only classes that matter to the &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt;.</source>
          <target state="translated">NgModule은 선언 가능한 &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;클래스&lt;/a&gt; 에만 적용됩니다. 선언 형은 &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular 컴파일러에&lt;/a&gt; 중요한 유일한 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="4d727575727c196322384a842e972193fc9ad53b" translate="yes" xml:space="preserve">
          <source>An NgModule can export a combination of its own declarations, selected imported classes, and imported NgModules.</source>
          <target state="translated">NgModule은 자체 선언, 선택된 가져온 클래스 및 가져온 NgModules의 조합을 내보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4aa58c70086cf419b25738e1a24be53c81f07b1d" translate="yes" xml:space="preserve">
          <source>An NgModule can only export the &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; it owns or imports from other modules. It doesn't declare or export any other kind of class.</source>
          <target state="translated">NgModule은 자신이 소유 한 선언 가능한 &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;클래스&lt;/a&gt; 만 내보내 거나 다른 모듈에서 가져올 수 있습니다 . 다른 종류의 클래스를 선언하거나 내 보내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fb24463a305716f436894ea4dafb6375e5e171c3" translate="yes" xml:space="preserve">
          <source>An NgModule can re-export entire NgModules, which effectively re-exports all of their exported classes. Angular's own &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; exports a couple of NgModules like this:</source>
          <target state="translated">NgModule은 전체 NgModules를 다시 내 보내서 내 보낸 모든 클래스를 효과적으로 다시 내보낼 수 있습니다. Angular의 자체 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 은 다음과 같이 NgModules를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="048f4d3b7b842d7e07d1105320c9847be1e9da43" translate="yes" xml:space="preserve">
          <source>An NgModule describes how the application parts fit together. Every application has at least one Angular module, the &lt;em&gt;root&lt;/em&gt; module that you bootstrap to launch the application. By convention, it is usually called &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">NgModule은 어플리케이션 부품이 어떻게 결합되는지 설명합니다. 모든 응용 프로그램에는 응용 프로그램 을 시작하기 위해 부트 스트랩 하는 &lt;em&gt;루트&lt;/em&gt; 모듈 인 하나 이상의 Angular 모듈이 있습니다. 일반적으로 &lt;code&gt;AppModule&lt;/code&gt; 이라고 합니다.</target>
        </trans-unit>
        <trans-unit id="122e8ebc77547582400ee9d0ace68901d052aab8" translate="yes" xml:space="preserve">
          <source>An NgModule describes how the application parts fit together. Every application has at least one Angular module, the &lt;em&gt;root&lt;/em&gt; module, which must be present for bootstrapping the application on launch. By convention and by default, this NgModule is named &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">NgModule은 응용 프로그램 부분이 어떻게 결합되는지 설명합니다. 모든 애플리케이션에는 시작시 애플리케이션을 부트 스트랩하기 위해 존재해야하는 &lt;em&gt;루트&lt;/em&gt; 모듈 인 Angular 모듈이 하나 이상 있습니다. 규칙에 따라 기본적으로이 NgModule의 이름은 &lt;code&gt;AppModule&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c2a07c3d512aeae1808c13ce81a7518d850dce90" translate="yes" xml:space="preserve">
          <source>An NgModule is a class marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; takes a metadata object that describes how to compile a component's template and how to create an injector at runtime. It identifies the module's own components, directives, and pipes, making some of them public, through the &lt;code&gt;exports&lt;/code&gt; property, so that external components can use them. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; can also add service providers to the application dependency injectors.</source>
          <target state="translated">NgModule은 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터 로 표시된 클래스 입니다. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 은 컴포넌트 템플릿을 컴파일하는 방법과 런타임에 인젝터를 만드는 방법을 설명하는 메타 데이터 객체를 취합니다. 외부 컴포넌트가 사용할 수 있도록 모듈의 구성 요소, 지시문 및 파이프를 식별하여 &lt;code&gt;exports&lt;/code&gt; 특성을 통해 일부를 공개 합니다. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 은 응용 프로그램 종속성 인젝터에 서비스 공급자를 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0755b300d2bc07deab147985dc0808edcf9b55fc" translate="yes" xml:space="preserve">
          <source>An NgModule is defined by a class decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</source>
          <target state="translated">NgModule은 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 장식 된 클래스에 의해 정의됩니다 . &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 장식 속성 모듈을 기술 한 메타 데이터 오브젝트를 취하는 함수이다. 가장 중요한 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eeae2a085063e0e52b29bf2aee06c172b48c61d8" translate="yes" xml:space="preserve">
          <source>An Observable that contains a map of the query parameters available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">모든 경로에 사용 가능한 쿼리 매개 변수 맵이 포함 된 Observable입니다. 맵은 쿼리 매개 변수에서 단일 및 다중 값 검색을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="953a469034adc1d17c45b7ae97fc349098337f6a" translate="yes" xml:space="preserve">
          <source>An Observable that contains a map of the required and optional parameters specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">경로와 관련된 필수 및 선택적 매개 변수의 맵을 포함하는 Observable입니다. 맵은 동일한 매개 변수에서 단일 및 다중 값 검색을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b8ab961cde1a70f46035707afbe89037b6b39bfd" translate="yes" xml:space="preserve">
          <source>An SVG snippet template needs an &lt;code&gt;svg:&lt;/code&gt; prefix on its root element to disambiguate the SVG element from an HTML component.</source>
          <target state="translated">SVG 스 니펫 템플릿 은 HTML 요소에서 SVG 요소를 명확하게하기 위해 루트 요소에 &lt;code&gt;svg:&lt;/code&gt; 접두사 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="cd68f31ec23fc069bc97d065b7bda95baed68b56" translate="yes" xml:space="preserve">
          <source>An absolute URL. The function does not apply any delta to the current URL.</source>
          <target state="translated">절대 URL. 이 함수는 현재 URL에 델타를 적용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a263e9eee9f25c9947b72eea9d3a402cdb8053a" translate="yes" xml:space="preserve">
          <source>An absolute path for a defined route. The function does not apply any delta to the current URL.</source>
          <target state="translated">정의 된 경로에 대한 절대 경로입니다. 이 함수는 현재 URL에 델타를 적용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="000c69911cb6c7d1b91ec58dcd30afe1c065b726" translate="yes" xml:space="preserve">
          <source>An abstract class for inserting the root test component element in a platform independent way.</source>
          <target state="translated">플랫폼 독립적 인 방법으로 루트 테스트 구성 요소를 삽입하기위한 추상 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="b4296fe66f2a24f1df22fa35742a65ee2ddbb569" translate="yes" xml:space="preserve">
          <source>An abstract class is usually a base class that you can extend. In this app, however there is no class that inherits from &lt;code&gt;MinimalLogger&lt;/code&gt;. The &lt;code&gt;LoggerService&lt;/code&gt; and the &lt;code&gt;DateLoggerService&lt;/code&gt; could have inherited from &lt;code&gt;MinimalLogger&lt;/code&gt;, or they could have implemented it instead, in the manner of an interface. But they did neither. &lt;code&gt;MinimalLogger&lt;/code&gt; is used only as a dependency injection token.</source>
          <target state="translated">추상 클래스는 일반적으로 확장 할 수있는 기본 클래스입니다. 그러나이 앱에는 &lt;code&gt;MinimalLogger&lt;/code&gt; 에서 상속되는 클래스가 없습니다 . &lt;code&gt;LoggerService&lt;/code&gt; 과 &lt;code&gt;DateLoggerService&lt;/code&gt; 은 에서 상속 할 수 &lt;code&gt;MinimalLogger&lt;/code&gt; , 또는 그들이 인터페이스의 방식으로, 대신 그것을 구현 할 수있다. 그러나 그들은 그렇게하지 않았다. &lt;code&gt;MinimalLogger&lt;/code&gt; 는 종속성 주입 토큰으로 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e9ea8fa94bedea0363391bb71430a1a20bedce5c" translate="yes" xml:space="preserve">
          <source>An add schematic can also update a project with configuration changes, add additional dependencies (such as polyfills), or scaffold package-specific initialization code. For example, the &lt;code&gt;@angular/pwa&lt;/code&gt; schematic turns your application into a PWA by adding an app manifest and service worker, and the &lt;code&gt;@angular/elements&lt;/code&gt; schematic adds the &lt;code&gt;document-register-element.js&lt;/code&gt; polyfill and dependencies for Angular Elements.</source>
          <target state="translated">추가 회로도는 구성 변경으로 프로젝트를 업데이트하거나 추가 종속성 (예 : 폴리 필)을 추가하거나 스캐 폴드 패키지 특정 초기화 코드를 추가 할 수 있습니다. 예를 들어 &lt;code&gt;@angular/pwa&lt;/code&gt; 회로도는 앱 매니페스트 및 서비스 워커를 추가하여 응용 프로그램을 PWA로 변환하고 &lt;code&gt;@angular/elements&lt;/code&gt; 회로도는 Angular Elements에 대한 &lt;code&gt;document-register-element.js&lt;/code&gt; polyfill 및 종속성을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d13680ec950010fd10b49de481b4c84b7ce6a765" translate="yes" xml:space="preserve">
          <source>An add schematic is typically supplied with a library, so that the library can be added to an existing project with &lt;code&gt;ng add&lt;/code&gt;. The &lt;code&gt;add&lt;/code&gt; command uses your package manager to download new dependencies, and invokes an installation script that is implemented as a schematic.</source>
          <target state="translated">추가 회로도는 일반적으로 라이브러리와 함께 제공되므로 라이브러리를 &lt;code&gt;ng add&lt;/code&gt; 로 기존 프로젝트에 추가 할 수 있습니다 . &lt;code&gt;add&lt;/code&gt; 명령은 새 종속성을 다운로드 패키지 관리자를 사용하고, 개략적으로 구현되는 설치 스크립트를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="24978e18969beb5970538c790506a8b202bafe4b" translate="yes" xml:space="preserve">
          <source>An address is a good example of information that can be grouped together. Form groups can accept both form control and form group instances as children. This makes composing complex form models easier to maintain and logically group together. To create a nested group in &lt;code&gt;profileForm&lt;/code&gt;, add a nested &lt;code&gt;address&lt;/code&gt; element to the form group instance.</source>
          <target state="translated">주소는 함께 그룹화 할 수있는 정보의 좋은 예입니다. 양식 그룹은 양식 제어 및 양식 그룹 인스턴스를 모두 자식으로 허용 할 수 있습니다. 이를 통해 복잡한 양식 모델을보다 쉽게 ​​유지 관리하고 논리적으로 그룹화 할 수 있습니다. &lt;code&gt;profileForm&lt;/code&gt; 에서 중첩 그룹을 작성하려면 중첩 &lt;code&gt;address&lt;/code&gt; 요소를 양식 그룹 인스턴스에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="fbe686fd3d18059b9a2de729a643f10662342143" translate="yes" xml:space="preserve">
          <source>An alert or callout &lt;em&gt;must not&lt;/em&gt; contain anything &lt;em&gt;essential&lt;/em&gt; to that understanding. Don't put a critical instruction or a tutorial step in a subsection.</source>
          <target state="translated">경보 또는 설명 선 에는 해당 이해에 &lt;em&gt;필수적인&lt;/em&gt; 내용이 포함 &lt;em&gt;되어서는 안됩니다&lt;/em&gt; . 중요한 섹션이나 튜토리얼 단계를 하위 섹션에 넣지 마십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="00c713d285573373b81643d5061ba989b838ab82" translate="yes" xml:space="preserve">
          <source>An alternative way, that only requires defining each custom element's type once, is augmenting the &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt;, which TypeScript uses to infer the type of a returned element based on its tag name (for DOM methods such as &lt;code&gt;document.createElement()&lt;/code&gt;, &lt;code&gt;document.querySelector()&lt;/code&gt;, etc.):</source>
          <target state="translated">다른 방법, 한번만 맞춤 요소의 유형을 정의 요구 증대시키는 것을 &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt; 타이프는 태그 이름에 기초하여 리턴 된 요소의 형태를 추측하기 위해 사용하는 (예컨대 DOM 방법에 대한 &lt;code&gt;document.createElement()&lt;/code&gt; , &lt;code&gt;document.querySelector()&lt;/code&gt; 등) :</target>
        </trans-unit>
        <trans-unit id="74d83efe7c03fbe91b9f3bcaf5056860a5cc2f6b" translate="yes" xml:space="preserve">
          <source>An animation can influence an end user to &lt;em&gt;perceive&lt;/em&gt; the operation as faster, even when it isn't. Thus, a simple animation can be a cost-effective way to keep users happy, rather than seeking to improve the speed of a server call and having to compensate for circumstances beyond your control, such as an unreliable network connection.</source>
          <target state="translated">애니메이션은 최종 사용자에게 영향을 &lt;em&gt;미쳐도&lt;/em&gt; 작업을 더 빨리 &lt;em&gt;인식&lt;/em&gt; 하도록 영향을 줄 수 있습니다 . 따라서 간단한 애니메이션은 서버 호출 속도를 향상시키고 신뢰할 수없는 네트워크 연결과 같이 제어 할 수없는 상황을 보상하지 않고 사용자를 만족시키는 비용 효율적인 방법 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1a2cf38a615729fb3f11d85b93701a4402341a7" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 선언 의 배열을 포함하는 애니메이션 정의 객체 .</target>
        </trans-unit>
        <trans-unit id="153ea2d07efd5e1e6518224e5b06af7966325c2f" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 선언 의 배열을 포함하는 애니메이션 정의 개체 입니다.</target>
        </trans-unit>
        <trans-unit id="853f9bcb68e4ea413401f09e0440f7461b8af150" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of state and transition declarations.</source>
          <target state="translated">상태 및 전이 선언의 배열을 포함하는 애니메이션 정의 객체.</target>
        </trans-unit>
        <trans-unit id="8a821ff6927c3292569d9090589163fc3c9aa6c9" translate="yes" xml:space="preserve">
          <source>An animation reference object.</source>
          <target state="translated">애니메이션 참조 객체.</target>
        </trans-unit>
        <trans-unit id="2cf8c3e888172d6c728a4c7f3a60383d2c87ff99" translate="yes" xml:space="preserve">
          <source>An animation requires a &lt;em&gt;trigger&lt;/em&gt;, so that it knows when to start. The &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function collects the states and transitions, and gives the animation a name, so that you can attach it to the triggering element in the HTML template.</source>
          <target state="translated">애니메이션은 시작시기를 알 수 있도록 &lt;em&gt;트리거&lt;/em&gt; 가 필요합니다 . &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 함수는 상태 및 전환을 수집하고 HTML 템플릿에 트리거 요소에 첨부 할 수 있도록, 애니메이션에 이름을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3e5d760f7a3bae69c188904174ade8019ac8edb4" translate="yes" xml:space="preserve">
          <source>An app can send PUT requests using the HTTP client service. The following &lt;code&gt;HeroesService&lt;/code&gt; example, like the POST example, replaces a resource with updated data.</source>
          <target state="translated">앱은 HTTP 클라이언트 서비스를 사용하여 PUT 요청을 보낼 수 있습니다. POST 예제와 같은 다음 &lt;code&gt;HeroesService&lt;/code&gt; 예제는 리소스를 업데이트 된 데이터로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="4a41ec5f95a446f50fb15cf0bd8ce27c67f0eb3d" translate="yes" xml:space="preserve">
          <source>An app should give the user useful feedback when data access fails. A raw error object is not particularly useful as feedback. In addition to detecting that an error has occurred, you need to get error details and use those details to compose a user-friendly response.</source>
          <target state="translated">앱은 데이터 액세스가 실패 할 때 사용자에게 유용한 피드백을 제공해야합니다. 원시 오류 개체는 특히 피드백으로 유용하지 않습니다. 오류 발생을 감지하는 것 외에도 오류 세부 정보를 가져 와서 이러한 세부 정보를 사용하여 사용자 친화적 인 응답을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="f31a2cd8172701f8176647e6f4deca92daaccebe" translate="yes" xml:space="preserve">
          <source>An app will send a PUT request to completely replace a resource with updated data. The following &lt;code&gt;HeroesService&lt;/code&gt; example is just like the POST example.</source>
          <target state="translated">앱은 리소스를 업데이트 된 데이터로 완전히 교체하기 위해 PUT 요청을 보냅니다. 다음의 &lt;code&gt;HeroesService&lt;/code&gt; 예제는 POST 예제와 같습니다.</target>
        </trans-unit>
        <trans-unit id="08d1f63a5c6d8dd57d9894f60a7bfc80b1a4e371" translate="yes" xml:space="preserve">
          <source>An app's components typically define many views, arranged hierarchically. Angular provides the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to help you define navigation paths among views. The router provides sophisticated in-browser navigational capabilities.</source>
          <target state="translated">앱의 구성 요소는 일반적으로 계층 적으로 배열 된 많은보기를 정의합니다. Angular는 보기 간 탐색 경로를 정의하는 데 도움이 되는 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서비스를 제공합니다 . 라우터는 정교한 브라우저 내 탐색 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ab7bcd611c180d61f273bc0f9ef27d36dfdab3b1" translate="yes" xml:space="preserve">
          <source>An application can subscribe to &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; observable to be notified when a user clicks on a notification. For example:</source>
          <target state="translated">응용 프로그램은 &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; 를 구독하여 사용자가 알림을 클릭 할 때 알림을받을 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c9718459a067afc4d9d2901e781c24a2a67e4039" translate="yes" xml:space="preserve">
          <source>An array entry for the &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;scripts&lt;/code&gt; options can be a simple path string, or an object that points to an extra entry-point file. The associated builder will load that file and its dependencies as a separate bundle during the build. With a configuration object, you have the option of naming the bundle for the entry point, using a &lt;code&gt;bundleName&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; 및 &lt;code&gt;scripts&lt;/code&gt; 옵션 의 배열 항목 은 간단한 경로 문자열이거나 추가 진입 점 파일을 가리키는 객체 일 수 있습니다. 연관된 빌더는 빌드 중에 해당 파일 및 해당 종속성을 별도의 번들로로드합니다. 구성 오브젝트의 경우 &lt;code&gt;bundleName&lt;/code&gt; 필드를 사용하여 진입 점의 번들 이름을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6e77b0b12875d380070bf15ea40936f15a6e856" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that define the navigation paths for the application.</source>
          <target state="translated">응용 프로그램의 탐색 경로를 정의하는 &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 객체 의 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="2e17973e3b986f0fe51b0b29e8a8a3054aac454f" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that define the navigation paths for the submodule.</source>
          <target state="translated">하위 모듈의 탐색 경로를 정의하는 &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 개체 의 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="78fd4b888290426cb729569fbcc07df27c92b26d" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate a child of the component. By default, any user can activate a child.</source>
          <target state="translated">현재 사용자가 구성 요소의 자식을 활성화 할 수 있는지 확인하기 위해 &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; 처리기 를 조회하는 데 사용되는 DI 토큰 배열입니다 . 기본적으로 모든 사용자는 자식을 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ebf193ce1e81f1e29cdfa0592849a6727b6a98e" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to deactivate the component. By default, any user can deactivate.</source>
          <target state="translated">현재 사용자가 구성 요소를 비활성화 할 수 있는지 확인하기 위해 &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; 처리기 를 조회하는 데 사용되는 DI 토큰 배열입니다 . 기본적으로 모든 사용자가 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9ac0547b9e7d50ef7867b566a6ff6650ca3ea97" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to load the component. By default, any user can load.</source>
          <target state="translated">현재 사용자가 구성 요소를로드 할 수 있는지 확인하기 위해 &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; 핸들러 를 조회하는 데 사용되는 DI 토큰 배열입니다 . 기본적으로 모든 사용자가로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="873e546e1ac7df5612119d4e3ff6a29525ac34b9" translate="yes" xml:space="preserve">
          <source>An array of URL fragments with which to construct the new URL tree. If the path is static, can be the literal URL string. For a dynamic path, pass an array of path segments, followed by the parameters for each segment. The fragments are applied to the current URL tree or the one provided in the &lt;code&gt;relativeTo&lt;/code&gt; property of the options object, if supplied.</source>
          <target state="translated">새 URL 트리를 구성하는 데 사용할 URL 조각의 배열입니다. 경로가 정적이면 리터럴 URL 문자열 일 수 있습니다. 동적 경로의 경우 경로 세그먼트 배열과 각 세그먼트의 매개 변수를 전달합니다. 프래그먼트는 현재 URL 트리 또는 옵션 개체 의 &lt;code&gt;relativeTo&lt;/code&gt; 속성 ( 제공된 경우)에 제공된 트리에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="2940985d03565202a55d6a104daa669ec05d29b3" translate="yes" xml:space="preserve">
          <source>An array of URL fragments with which to construct the target URL. If the path is static, can be the literal URL string. For a dynamic path, pass an array of path segments, followed by the parameters for each segment. The fragments are applied to the current URL or the one provided in the &lt;code&gt;relativeTo&lt;/code&gt; property of the options object, if supplied.</source>
          <target state="translated">대상 URL을 구성하는 데 사용할 URL 조각의 배열입니다. 경로가 정적이면 리터럴 URL 문자열 일 수 있습니다. 동적 경로의 경우 경로 세그먼트 배열과 각 세그먼트의 매개 변수를 전달합니다. 조각은 현재 URL에 적용되거나 옵션 개체 의 &lt;code&gt;relativeTo&lt;/code&gt; 속성에 제공된 URL (제공된 경우)에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="ae39554eae86a4d64a9fdb529096eb2b79364390" translate="yes" xml:space="preserve">
          <source>An array of animation step objects.</source>
          <target state="translated">애니메이션 단계 객체의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="f99aba27ddb3e9a1611aa598c8ceb36b851409de" translate="yes" xml:space="preserve">
          <source>An array of animation styles.</source>
          <target state="translated">애니메이션 스타일의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="938fa39e1f51c4ab052524820d5860359507a2f0" translate="yes" xml:space="preserve">
          <source>An array of child &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that specifies a nested route configuration.</source>
          <target state="translated">중첩 된 경로 구성을 지정하는 자식 &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 개체 의 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="0edd9ac18793ee073ea3aabdfbcfff60f42d2100" translate="yes" xml:space="preserve">
          <source>An array of child controls or control configs. Each child control is given an index when it is registered.</source>
          <target state="translated">하위 컨트롤 또는 컨트롤 구성 배열입니다. 각 자식 컨트롤에는 등록 될 때 인덱스가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="b26827b9a483db95d70a5b32edec9f7eeb17162f" translate="yes" xml:space="preserve">
          <source>An array of child controls. Each child control is given an index where it is registered.</source>
          <target state="translated">자식 컨트롤의 배열입니다. 각 자식 컨트롤에는 등록 된 인덱스가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="9b54d3fb3ef2c358aeb1752efb0ed3c0fabe3497" translate="yes" xml:space="preserve">
          <source>An array of commands to apply.</source>
          <target state="translated">적용 할 명령 배열.</target>
        </trans-unit>
        <trans-unit id="2152bc4eb46fc4163f9c3942dc1535de09a80686" translate="yes" xml:space="preserve">
          <source>An array of dependency-injection tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate the component. By default, any user can activate.</source>
          <target state="translated">현재 사용자가 구성 요소를 활성화 할 수 있는지 확인하기 위해 &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; 처리기 를 조회하는 데 사용되는 종속성 주입 토큰 배열입니다 . 기본적으로 모든 사용자가 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e3b57d965761f24eeb916e84feb687611633061" translate="yes" xml:space="preserve">
          <source>An array of directives imported from another module. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt; because the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; already declares it.</source>
          <target state="translated">다른 모듈에서 가져온 지시문의 배열입니다. 예를 들어 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 이 이미 선언 했으므로 &lt;code&gt;@angular/forms&lt;/code&gt; 에서 &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; 를 선언하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="2e01570e046471a7a45896ef34ac7217adb7671c" translate="yes" xml:space="preserve">
          <source>An array of directives imported from another package. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt;</source>
          <target state="translated">다른 패키지에서 가져온 지시문의 배열입니다. 예를 들어 &lt;code&gt;@angular/forms&lt;/code&gt; 에서 &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; 를 선언하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="c9951be90f174b4103642b20c910d1924c5c6d73" translate="yes" xml:space="preserve">
          <source>An array of key-value style pairs.</source>
          <target state="translated">키-값 스타일 쌍의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="66295ef82d2f1ab3bcf346f0fcb4e92b84d95dcc" translate="yes" xml:space="preserve">
          <source>An array of observed attribute names for the custom element, derived by transforming input property names from the source component.</source>
          <target state="translated">소스 컴포넌트에서 입력 특성 이름을 변환하여 파생 된 사용자 정의 요소의 관찰 된 속성 이름 배열입니다.</target>
        </trans-unit>
        <trans-unit id="7afefdc87251682711b749d3eb9ba8e9cbe0656a" translate="yes" xml:space="preserve">
          <source>An array of string control names, e.g. &lt;code&gt;['address', 'street']&lt;/code&gt;</source>
          <target state="translated">문자열 제어 이름의 배열 (예 : &lt;code&gt;['address', 'street']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b76cbac2f90bdb301d7a2818c80e539a3c7976c" translate="yes" xml:space="preserve">
          <source>An array of style files to add to the global context of the project. Angular CLI supports CSS imports and all major CSS preprocessors: &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass/scss&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;, and &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">프로젝트의 글로벌 컨텍스트에 추가 할 스타일 파일의 배열입니다. Angular CLI는 CSS 가져 오기 및 모든 주요 CSS 전 처리기 ( &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass / scss&lt;/a&gt; , &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt; 및 &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus)를 지원&lt;/a&gt; 합니다. 아래의 &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;스타일 및 스크립트 구성&lt;/a&gt; 에서 자세한 내용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a33987e88de67a1793f7544151a198f4f03c2e0d" translate="yes" xml:space="preserve">
          <source>An array of tag definitions to match or create.</source>
          <target state="translated">일치하거나 만들 태그 정의의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="e27d63f99fc67d312604ea9ee9c6b65762ab5602" translate="yes" xml:space="preserve">
          <source>An array that the router interprets as a routing instruction. You can bind that array to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; or pass the array as an argument to the &lt;code&gt;Router.navigate&lt;/code&gt; method.</source>
          <target state="translated">라우터가 라우팅 명령으로 해석하는 배열입니다. 해당 배열을 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 에 바인딩 하거나 배열을 &lt;code&gt;Router.navigate&lt;/code&gt; 메서드에 인수로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="861576caffeca135d6970293ddc50aeae0da4952" translate="yes" xml:space="preserve">
          <source>An asterisk (*), to use auto-styling, where styles are derived from the element being animated and applied to the animation when it starts.</source>
          <target state="translated">자동 스타일링을 사용하기위한 별표 (*). 스타일은 애니메이션이 적용되는 요소에서 파생되어 시작시 애니메이션에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="85c093ac8ffcfa867935ecc8abfeb1ece5cb34f9" translate="yes" xml:space="preserve">
          <source>An asterisk &lt;code&gt;*&lt;/code&gt; or &lt;em&gt;wildcard&lt;/em&gt; matches any animation state. This is useful for defining transitions that apply regardless of the HTML element's start or end state.</source>
          <target state="translated">별표 &lt;code&gt;*&lt;/code&gt; 또는 &lt;em&gt;와일드 카드&lt;/em&gt; 는 모든 애니메이션 상태와 일치합니다. HTML 요소의 시작 또는 종료 상태에 관계없이 적용되는 전환을 정의하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d2c79a074e3226945b2f718538f0cac88a9d5cd4" translate="yes" xml:space="preserve">
          <source>An async &lt;code&gt;beforeEach()&lt;/code&gt; that compiles the components</source>
          <target state="translated">컴포넌트를 컴파일 하는 비동기 &lt;code&gt;beforeEach()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b30c39a90b9eb055d07e0fe54a86ab3c86a6eda9" translate="yes" xml:space="preserve">
          <source>An attribute directive minimally requires building a controller class annotated with &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, which specifies the selector that identifies the attribute. The controller class implements the desired directive behavior.</source>
          <target state="translated">속성 지시문은 최소한 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 주석이 달린 컨트롤러 클래스를 작성해야하며 , 속성을 식별하는 선택기를 지정합니다. 컨트롤러 클래스는 원하는 지시문 동작을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="abe92ff3d2c0bf40f87b15fcf882a5d02f6a804f" translate="yes" xml:space="preserve">
          <source>An attribute directive that updates styles for the containing HTML element. Sets one or more style properties, specified as colon-separated key-value pairs. The key is a style name, with an optional &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; suffix (such as 'top.px', 'font-style.em'). The value is an expression to be evaluated. The resulting non-null value, expressed in the given unit, is assigned to the given style property. If the result of evaluation is null, the corresponding style is removed.</source>
          <target state="translated">포함하는 HTML 요소의 스타일을 업데이트하는 속성 지시문입니다. 콜론으로 구분 된 키-값 쌍으로 지정된 하나 이상의 스타일 속성을 설정합니다. 키는 선택적인 &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; 접미사 (예 : 'top.px', 'font-style.em') 가있는 스타일 이름 입니다. 값은 평가할 표현식입니다. 주어진 단위로 표현 된 null이 아닌 결과 값은 주어진 스타일 속성에 할당됩니다. 평가 결과가 널이면 해당 스타일이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="00708a626fb7b0f03fc253c32c37767743db5166" translate="yes" xml:space="preserve">
          <source>An element property between enclosing square brackets identifies the target property. The target property in the following code is the image element's &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="translated">대괄호로 묶는 요소 속성은 대상 속성을 식별합니다. 다음 코드에서 target 속성은 이미지 요소의 &lt;code&gt;src&lt;/code&gt; 속성입니다.</target>
        </trans-unit>
        <trans-unit id="9b24495f5005b7c33475d93c0b8c85637f99d1d3" translate="yes" xml:space="preserve">
          <source>An element that would be a shadow DOM host in native encapsulation has a generated &lt;code&gt;_nghost&lt;/code&gt; attribute. This is typically the case for component host elements.</source>
          <target state="translated">네이티브 캡슐화에서 섀도우 DOM 호스트가되는 요소에는 생성 된 &lt;code&gt;_nghost&lt;/code&gt; 속성이 있습니다. 이것은 일반적으로 구성 요소 호스트 요소의 경우입니다.</target>
        </trans-unit>
        <trans-unit id="3f8c815124d91c2fc5997a18a121c1e43c5849b4" translate="yes" xml:space="preserve">
          <source>An element within a component's view has a &lt;code&gt;_ngcontent&lt;/code&gt; attribute that identifies to which host's emulated shadow DOM this element belongs.</source>
          <target state="translated">구성 요소보기 내의 요소에는 이 요소가 속하는 호스트의 에뮬레이트 된 shadow DOM을 식별 하는 &lt;code&gt;_ngcontent&lt;/code&gt; 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="50e94825f745e933e83821947b32eef815608bd5" translate="yes" xml:space="preserve">
          <source>An empty programmatic controller for reusable animations. Used internally when animations are disabled, to avoid checking for the null case when an animation player is expected.</source>
          <target state="translated">재사용 가능한 애니메이션을위한 빈 프로그램 컨트롤러. 애니메이션 플레이어가 예상되는 경우 null을 확인하지 않도록 애니메이션이 비활성화 된 경우 내부적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ed30450a13cb9d35e8439583113edc0ba728506e" translate="yes" xml:space="preserve">
          <source>An encapsulation policy for the template and CSS styles. One of:</source>
          <target state="translated">템플릿 및 CSS 스타일에 대한 캡슐화 정책. 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="c0d78d1758f0450a2a872695da025c9d5f74b2f8" translate="yes" xml:space="preserve">
          <source>An end-to-end (e2e) framework for Angular apps. Built on top of &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJS&lt;/a&gt;.</source>
          <target state="translated">Angular 앱을위한 엔드 투 엔드 (e2e) 프레임 워크 &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJS&lt;/a&gt; 위에 구축되었습니다 .</target>
        </trans-unit>
        <trans-unit id="21691cd602a408abe7003eba565465e96100654c" translate="yes" xml:space="preserve">
          <source>An end-to-end test project (in the e2e subfolder).</source>
          <target state="translated">엔드 투 엔드 테스트 프로젝트 (e2e 하위 폴더에 있음)</target>
        </trans-unit>
        <trans-unit id="af60cca801f9270a2ac760cef8104b5168df0bab" translate="yes" xml:space="preserve">
          <source>An entry component is any component that Angular loads &lt;em&gt;imperatively&lt;/em&gt; by type.</source>
          <target state="translated">입력 컴포넌트는 Angular 가 유형별로 &lt;em&gt;반드시&lt;/em&gt; 로드하는 컴포넌트입니다 .</target>
        </trans-unit>
        <trans-unit id="520ebcf19ed2e8582e1e23356f207f7c8557c18b" translate="yes" xml:space="preserve">
          <source>An entry component is any component that Angular loads imperatively, (which means you&amp;rsquo;re not referencing it in the template), by type. You specify an entry component by bootstrapping it in an NgModule, or including it in a routing definition.</source>
          <target state="translated">입력 구성 요소는 Angular가 유형별로 필수적으로로드하는 구성 요소입니다 (즉, 템플릿에서 구성 요소를 참조하지 않음을 의미 함). NgModule에서 부트 스트랩하거나 라우팅 정의에 포함시켜 항목 구성 요소를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="82270f943c0fc2fd25dd54fa68af7719850dddec" translate="yes" xml:space="preserve">
          <source>An event emitted when a new version of the app has been downloaded and activated.</source>
          <target state="translated">새로운 버전의 앱이 다운로드되어 활성화 될 때 생성되는 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="48d381a39eba1f1a2428a868079d462a7aeb50e8" translate="yes" xml:space="preserve">
          <source>An event emitted when a new version of the app is available.</source>
          <target state="translated">새로운 버전의 앱을 사용할 수있을 때 생성되는 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="d8b059555adbe8f67929f9bd713b460344b5c46d" translate="yes" xml:space="preserve">
          <source>An event emitted when the version of the app used by the service worker to serve this client is in a broken state that cannot be recovered from and a full page reload is required.</source>
          <target state="translated">서비스 워커가이 클라이언트를 제공하기 위해 사용하는 앱 버전이 복구 할 수없는 손상된 상태이고 전체 페이지를 다시로드해야 할 때 발생하는 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="5f859b22e49aae9499ff79db84034121aa16f513" translate="yes" xml:space="preserve">
          <source>An event indicating that the request was sent to the server. Useful when a request may be retried multiple times, to distinguish between retries on the final event stream.</source>
          <target state="translated">요청이 서버로 전송되었음을 나타내는 이벤트입니다. 최종 이벤트 스트림에서 재 시도를 구별하기 위해 요청이 여러 번 재 시도 될 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9f03c6d306c2112882c6a9ff7babb869d7b460be" translate="yes" xml:space="preserve">
          <source>An event stream for routing events in this NgModule.</source>
          <target state="translated">이 NgModule의 이벤트를 라우팅하기위한 이벤트 스트림입니다.</target>
        </trans-unit>
        <trans-unit id="3d7eb391832c5ed9e7dbb68d3c82c8ad415923bf" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the Guard phase of routing.</source>
          <target state="translated">라우팅의 보호 단계가 끝날 때 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="b5a43600d43e0d7f206b35a9f776d6d2f3d76290" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the Resolve phase of routing.</source>
          <target state="translated">라우팅 해결 단계의 끝에서 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="fe8df6a007856d3efe69109b534e4f1717bb8417" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the activation part of the Resolve phase of routing.</source>
          <target state="translated">라우팅 해결 단계의 활성화 부분 끝에 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="7c5dc3b5c6dd3914c069ea105811ad81563ab0a4" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">라우팅 해결 단계의 하위 활성화 부분 끝에서 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="15f0a189e2487ac88e2d4db8817074ffbe2aa465" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the Guard phase of routing.</source>
          <target state="translated">라우팅의 가드 단계 시작시 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="c5e5ee18107806be14081a1525e3498a3843b09e" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the activation part of the Resolve phase of routing.</source>
          <target state="translated">라우팅 해결 단계의 활성화 부분 시작시 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="9ea7570ad5b425b7d9a9e4e2875bb8e236c63db8" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">라우팅 해결 단계의 하위 활성화 부분 시작시 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="8df532e1a0fd9fd1688012d2fd01b43742a57d58" translate="yes" xml:space="preserve">
          <source>An event triggered at the the start of the Resolve phase of routing.</source>
          <target state="translated">라우팅 해결 단계 시작시 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="253d4698f507f43fb4f138e171a5603c169e6b04" translate="yes" xml:space="preserve">
          <source>An event triggered before lazy loading a route configuration.</source>
          <target state="translated">라우트 구성을 지연로드하기 전에 이벤트가 트리거되었습니다.</target>
        </trans-unit>
        <trans-unit id="76c49a5cb92ffd70c824965b9f42fd4ce45e7e75" translate="yes" xml:space="preserve">
          <source>An event triggered by scrolling.</source>
          <target state="translated">스크롤하여 트리거 된 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="ce7314f14718cef6d4f51d25b4d25720245fbf87" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation ends successfully.</source>
          <target state="translated">탐색이 성공적으로 끝나면 이벤트가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="1ee0707fd824da0de403c96b737123ba95a464d8" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation fails due to an unexpected error.</source>
          <target state="translated">예기치 않은 오류로 인해 탐색에 실패하면 트리거 된 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="4238fb65031dc9605ba87d9f0fff4bf6e9d4cbd3" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation is canceled, directly or indirectly.</source>
          <target state="translated">탐색이 직접 또는 간접적으로 취소되면 이벤트가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="2e5ceb1b4c5d718acfff7e6d601ab5914f386423" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation is canceled, directly or indirectly. This can happen when a route guard returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">탐색이 직접 또는 간접적으로 취소 될 때 트리거되는 이벤트입니다. 이는 경로 가드가 &lt;code&gt;false&lt;/code&gt; 를 반환하거나 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 를 반환하여 리디렉션을 시작할 때 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e5df78c88138a26c79a71f34606ee06d8baf0fa" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation is canceled, directly or indirectly. This can happen when a route guard returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">탐색이 직접 또는 간접적으로 취소 될 때 트리거되는 이벤트입니다. 이는 경로 가드가 &lt;code&gt;false&lt;/code&gt; 를 반환하거나 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 를 반환하여 리디렉션을 시작할 때 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="33bb43f2f8b4617aa8b509c9aa64c24d761d2224" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation starts.</source>
          <target state="translated">탐색이 시작될 때 트리거되는 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="22293e5381cfc4742bf52876ed6736a5a5826956" translate="yes" xml:space="preserve">
          <source>An event triggered when a route has been lazy loaded.</source>
          <target state="translated">라우트가 지연로드되면 이벤트가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="55363e49b885f6858dfa81382ac98d5cf71873c4" translate="yes" xml:space="preserve">
          <source>An event triggered when routes are recognized.</source>
          <target state="translated">경로가 인식되면 이벤트가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="7e1901e8c0041a6d1ea4f1605828d40b98b1883e" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;MyCustomComponent&lt;/code&gt; class, which in JavaScript is be represented by the &lt;code&gt;MyCustomComponent&lt;/code&gt; constructor function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 의 예 는 &lt;code&gt;MyCustomComponent&lt;/code&gt; 클래스이며, JavaScript에서는 &lt;code&gt;MyCustomComponent&lt;/code&gt; 생성자 함수 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="af90c4ac17e3898273f1737d8b15998b17fd8b89" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;MyCustomComponent&lt;/code&gt; class, which in JavaScript is represented by the &lt;code&gt;MyCustomComponent&lt;/code&gt; constructor function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 의 예 는 &lt;code&gt;MyCustomComponent&lt;/code&gt; 클래스이며 JavaScript에서 &lt;code&gt;MyCustomComponent&lt;/code&gt; 생성자 함수로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="21d43a6950a7e56133de93d4c9f621a2861922c7" translate="yes" xml:space="preserve">
          <source>An example of producing side effects</source>
          <target state="translated">부작용 생성의 예</target>
        </trans-unit>
        <trans-unit id="1d5adc14822f75158d6c5cd26073d6f3aa532ea8" translate="yes" xml:space="preserve">
          <source>An example of what goes into a declarations array follows:</source>
          <target state="translated">선언 배열에 들어가는 것의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aaac8a7d4859b53786074dfb913b0fcbffa894f9" translate="yes" xml:space="preserve">
          <source>An example that uses both</source>
          <target state="translated">둘 다 사용하는 예</target>
        </trans-unit>
        <trans-unit id="8f997a90370a05fd947363bc944f2091bb627c9b" translate="yes" xml:space="preserve">
          <source>An execution context for a set of asynchronous tasks. Useful for debugging, profiling, and testing apps that include asynchronous operations such as event processing, promises, and calls to remote servers.</source>
          <target state="translated">일련의 비동기 작업에 대한 실행 컨텍스트 이벤트 처리, 약속 및 원격 서버 호출과 같은 비동기 작업이 포함 된 앱을 디버깅, 프로파일 링 및 테스트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="13b6181d7b35ce64a903a0013d72e45b403c9e64" translate="yes" xml:space="preserve">
          <source>An expression may also refer to properties of the &lt;em&gt;template's&lt;/em&gt; context such as a template input variable,</source>
          <target state="translated">표현식은 템플릿 입력 변수와 같은 &lt;em&gt;템플릿&lt;/em&gt; 컨텍스트 &lt;em&gt;의&lt;/em&gt; 속성을 나타낼 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="abc3de7d68044167c106cb4666b4476c9f78e7e9" translate="yes" xml:space="preserve">
          <source>An expression that describes a state change.</source>
          <target state="translated">상태 변경을 설명하는 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="4e9dd8fe2f87c25f59015739842c4048179f4a27" translate="yes" xml:space="preserve">
          <source>An icon to use for this application in the bookmark bar.</source>
          <target state="translated">북마크 바에서이 애플리케이션에 사용할 아이콘입니다.</target>
        </trans-unit>
        <trans-unit id="010b45774596984624a0a539cd324f8a04170e87" translate="yes" xml:space="preserve">
          <source>An identifying name for the new element, unique within the namespace.</source>
          <target state="translated">네임 스페이스 내에서 고유 한 새 요소의 식별 이름입니다.</target>
        </trans-unit>
        <trans-unit id="2f2a84b30278a5736d58839d9cbed284d382fee8" translate="yes" xml:space="preserve">
          <source>An identifying string.</source>
          <target state="translated">식별 문자열.</target>
        </trans-unit>
        <trans-unit id="321ae4ea852d397f5e8c8c2ab74118963a1b5c2a" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;preload&lt;/code&gt; must return an &lt;code&gt;Observable&lt;/code&gt;. If the route does preload, it returns the observable returned by calling the loader function. If the route does not preload, it returns an &lt;code&gt;Observable&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preload&lt;/code&gt; 의 구현은 &lt;code&gt;Observable&lt;/code&gt; 을 반환해야합니다 . 경로가 미리로드되면 로더 함수를 호출하여 반환 된 관찰 가능 항목을 반환합니다. 경로가 미리로드하지 않는 경우는 반환 &lt;code&gt;Observable&lt;/code&gt; 의 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f26b26e037d4dafb2598887c06f9e13ff1dada92" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;preload&lt;/code&gt; must return an &lt;code&gt;Observable&lt;/code&gt;. If the route should preload, it returns the observable returned by calling the loader function. If the route should &lt;em&gt;not&lt;/em&gt; preload, it returns an &lt;code&gt;Observable&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preload&lt;/code&gt; 구현은 &lt;code&gt;Observable&lt;/code&gt; 을 리턴해야합니다 . 경로가 미리로드되어야하는 경우 로더 함수를 호출하여 반환 된 관찰 가능 항목을 반환합니다. 라우트가 사전로드 &lt;em&gt;되지&lt;/em&gt; 않아야 하는 경우 &lt;code&gt;Observable&lt;/code&gt; 의 &lt;code&gt;null&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="34f205e2b23ffe79df4ed0d6614e52beb270510e" translate="yes" xml:space="preserve">
          <source>An important alert.</source>
          <target state="translated">중요한 경고입니다.</target>
        </trans-unit>
        <trans-unit id="7a0aa966364fd27e3f5561134e767a3d22292508" translate="yes" xml:space="preserve">
          <source>An important part of inter-linking dependencies is linking the two main modules together. This is where &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; comes in. Use it to create an AngularJS module&amp;mdash;one that you can use as a dependency in your main AngularJS module&amp;mdash;that will bootstrap your main Angular module and kick off the Angular part of the hybrid app. In a sense, it &quot;downgrades&quot; an Angular module to an AngularJS module.</source>
          <target state="translated">상호 연결 종속성의 중요한 부분은 두 개의 주요 모듈을 서로 연결하는 것입니다. 곳입니다 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 에서 제공됩니다. 당신이 당신의 주요 AngularJS와의 종속성으로 사용할 수 있다는 AngularJS와 모듈 - 하나 만드는 데 사용 모듈, 즉 하이브리드 응용 프로그램의 각 부분 떨어져 당신의 메인 코너 모듈과 킥을 부트 스트랩합니다. 어떤 의미에서는 Angular 모듈을 AngularJS 모듈로 &quot;다운 그레이드&quot;합니다.</target>
        </trans-unit>
        <trans-unit id="ab48629b7689b97b24ca0b4882d2d3231b1a3b2b" translate="yes" xml:space="preserve">
          <source>An important point</source>
          <target state="translated">중요한 점</target>
        </trans-unit>
        <trans-unit id="ed53c740060de1f8ed241d39eeda4823a21a4860" translate="yes" xml:space="preserve">
          <source>An impure</source>
          <target state="translated">불순</target>
        </trans-unit>
        <trans-unit id="12aba83ea86ac796e838bb36582bc62046067932" translate="yes" xml:space="preserve">
          <source>An impure caching pipe</source>
          <target state="translated">불규칙한 캐싱 파이프</target>
        </trans-unit>
        <trans-unit id="1ea978cb2e1e36fb4a70cc831345c53ddda16051" translate="yes" xml:space="preserve">
          <source>An initial skeleton app project, also called &lt;code&gt;angular-tour-of-heroes&lt;/code&gt; (in the &lt;code&gt;src&lt;/code&gt; subfolder).</source>
          <target state="translated">&lt;code&gt;angular-tour-of-heroes&lt;/code&gt; ( &lt;code&gt;src&lt;/code&gt; 하위 폴더에 있음) 라고도하는 초기 골격 앱 프로젝트 .</target>
        </trans-unit>
        <trans-unit id="684d4fd3e575d1f3658b87fda7811795222f7d50" translate="yes" xml:space="preserve">
          <source>An injectable &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; for gesture recognition. Configures specific event recognition.</source>
          <target state="translated">제스처 인식을위한 주사 가능한 &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS 관리자&lt;/a&gt; . 특정 이벤트 인식을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="e57404a3f8f2b06b4a9a8d4c525e78bb9596739f" translate="yes" xml:space="preserve">
          <source>An injectable service for executing work inside or outside of the Angular zone.</source>
          <target state="translated">Angular 구역 안팎에서 작업을 수행하기위한 주사 가능한 서비스.</target>
        </trans-unit>
        <trans-unit id="14d3b55eeed336a9ad62e5019f3e2718f4231406" translate="yes" xml:space="preserve">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular 구성 요소 또는 지시문 내에서 프로그래밍 방식으로 애니메이션 시퀀스를 생성하는 주사 가능한 서비스입니다. 에 의해 제공 &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0cc6e94c0fa46ea1d4f9498c818950af4fca8285" translate="yes" xml:space="preserve">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular 구성 요소 또는 지시문 내에서 프로그래밍 방식으로 애니메이션 시퀀스를 생성하는 주사 가능한 서비스입니다. 에 의해 제공 &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36689b6e9bdc70cc4224cf76d38b74712cd514ab" translate="yes" xml:space="preserve">
          <source>An injectable service that provides event management for Angular through a browser plug-in.</source>
          <target state="translated">브라우저 플러그인을 통해 Angular에 이벤트 관리를 제공하는 주사 가능한 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="77754ebc786ee25c6412a201040016a7021c3eb2" translate="yes" xml:space="preserve">
          <source>An injectable service that provides factory methods for creating control instances.</source>
          <target state="translated">제어 인스턴스를 작성하기위한 팩토리 메소드를 제공하는 주사 가능한 서비스.</target>
        </trans-unit>
        <trans-unit id="b6db0da0e2ea0ddb022d862a7cffe1db1b964118" translate="yes" xml:space="preserve">
          <source>An injection token. (Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;).</source>
          <target state="translated">주입 토큰. 일반적으로 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 의 인스턴스 이지만 &lt;code&gt;any&lt;/code&gt; 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c26157bc44c92eb491ad786930dfb1f795c4cbb9" translate="yes" xml:space="preserve">
          <source>An injection token. Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">주입 토큰. 일반적으로 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 인스턴스 이지만 &lt;code&gt;any&lt;/code&gt; 것이 든 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="652138f88939ea014fbae7aa304e8948053f1891" translate="yes" xml:space="preserve">
          <source>An injector creates dependencies, and maintains a &lt;em&gt;container&lt;/em&gt; of dependency instances that it reuses if possible.</source>
          <target state="translated">인젝터는 종속성을 작성하고 가능한 경우 재사용하는 종속성 인스턴스 의 &lt;em&gt;컨테이너&lt;/em&gt; 를 유지 보수 합니다.</target>
        </trans-unit>
        <trans-unit id="9e27f51512e0a5635f6bf58fdb2c50c6038e307e" translate="yes" xml:space="preserve">
          <source>An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.</source>
          <target state="translated">인젝터는 종속성의 단일 인스턴스를 제공하며이 동일한 인스턴스를 여러 구성 요소에 주입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb056887b035ea4cad1a0a3629cae07df2758572" translate="yes" xml:space="preserve">
          <source>An inline template for an Angular component. If provided, do not supply a template file using &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">각도 구성 요소의 인라인 템플릿. 제공되는 경우 templateUrl을 사용하여 &lt;code&gt;templateUrl&lt;/code&gt; 파일을 제공하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="b7117a4f34cbbcdc94a365e8e29ebcb260dbafc7" translate="yes" xml:space="preserve">
          <source>An inner template can access template variables that the outer template defines.</source>
          <target state="translated">내부 템플릿은 외부 템플릿이 정의하는 템플릿 변수에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12722bfa1da4de0ba2c43d261a9de445ffeefb87" translate="yes" xml:space="preserve">
          <source>An instance of this class is returned as an event parameter when an animation callback is captured for an animation either during the start or done phase.</source>
          <target state="translated">이 클래스의 인스턴스는 시작 또는 완료 단계 중 애니메이션에 대한 애니메이션 콜백이 캡처 될 때 이벤트 매개 변수로 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="816e6be2b2fa74b464d5b2a881dae8af20cb83e3" translate="yes" xml:space="preserve">
          <source>An interceptor that alters headers can be used for a number of different operations, including:</source>
          <target state="translated">헤더를 변경하는 인터셉터는 다음을 포함하여 여러 가지 다른 조작에 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9146ec3aa23e8cf25a3395bbb20839d604c7a736" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to check if the lazy loaded module should be loaded. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">지연로드 된 모듈이로드되어야하는지 여부를 확인하기 위해 라우터가 먼저 호출해야하는 클래스를 정의하기위한 인터페이스입니다. 부울 | UrlTree 또는 부울 | UrlTree로 해석되는 Observable / Promise를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a938b52cef6ce82227e8252bf81a0112ba711aa" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should activate the child route. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">라우터가 자식 경로를 활성화해야하는지 결정하기 위해 라우터가 먼저 호출해야하는 클래스를 정의하기위한 인터페이스입니다. 부울 | UrlTree 또는 부울 | UrlTree로 해석되는 Observable / Promise를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="000a11bfba255074626058505b1d21f8b78bbe21" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should activate this component. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">라우터가이 컴포넌트를 활성화해야하는지 결정하기 위해 먼저 호출해야하는 클래스를 정의하기위한 인터페이스입니다. 부울 | UrlTree 또는 부울 | UrlTree로 해석되는 Observable / Promise를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="b4e8a5b77f471bb6811774face810e9cbf43b14d" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should deactivate this component after a navigation. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">라우터가 탐색 후이 컴포넌트를 비활성화해야하는지 판별하기 위해 먼저 호출해야하는 클래스를 정의하기위한 인터페이스입니다. 부울 | UrlTree 또는 부울 | UrlTree로 해석되는 Observable / Promise를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="3e995f1eb4c099a6b16ff48012d56d513be3a14a" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</source>
          <target state="translated">라우터가 경로를 렌더링하기 전에 경로 데이터를 해결하기 위해 먼저 호출해야하는 클래스를 정의하기위한 인터페이스입니다. 값으로 해석되는 Observable / Promise 또는 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="82597c22511f52de70969beecef4f3b3898eaa24" translate="yes" xml:space="preserve">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 지시문으로 구현 된 인터페이스 입니다.</target>
        </trans-unit>
        <trans-unit id="1a14f9da95e6f6ff982b6626eb7c8628c5efdd37" translate="yes" xml:space="preserve">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 지시문으로 구현 된 인터페이스 입니다.</target>
        </trans-unit>
        <trans-unit id="8335c6297a5a6cba86cf2d3d45984a8f36d407fb" translate="yes" xml:space="preserve">
          <source>An interface implemented by all Angular type decorators, which allows them to be used as decorators as well as Angular syntax.</source>
          <target state="translated">모든 Angular 유형 데코레이터로 구현 된 인터페이스로, Angular 구문뿐만 아니라 데코레이터로도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3251b8b344b69e19ad57135081e0c24c46b50288" translate="yes" xml:space="preserve">
          <source>An interface implemented by classes that perform asynchronous validation.</source>
          <target state="translated">비동기 유효성 검사를 수행하는 클래스로 구현 된 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="245737c8ad1fc4ff34dc1309e4af6d2a74cb1268" translate="yes" xml:space="preserve">
          <source>An interface implemented by classes that perform synchronous validation.</source>
          <target state="translated">동기 유효성 검사를 수행하는 클래스로 구현 된 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="3553332395db0f3216b86aa5d6d3855e57638927" translate="yes" xml:space="preserve">
          <source>An interface that a function passed into &lt;a href=&quot;core/forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">&lt;a href=&quot;core/forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; 에&lt;/a&gt; 전달 된 함수는 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="27ca29f9f070d1b99e4a907d433e49c3c9473f07" translate="yes" xml:space="preserve">
          <source>An interface that a function passed into &lt;a href=&quot;forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">&lt;a href=&quot;forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; 에&lt;/a&gt; 전달 된 함수는 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="bbe82c81f390998fc2ac12e6a34f4c68ebf29846" translate="yes" xml:space="preserve">
          <source>An interface that allows you to tap into the lifecycle of &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt; and &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt; as they are created, updated, and destroyed.</source>
          <target state="translated">&lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; 및 &lt;a href=&quot;glossary#component&quot;&gt;구성 요소&lt;/a&gt; 가 작성, 업데이트 및 파괴 될 때 라이프 사이클을 활용할 수있는 인터페이스입니다 .</target>
        </trans-unit>
        <trans-unit id="d84af51a9faa209f199da3634be1aa93a907fb58" translate="yes" xml:space="preserve">
          <source>An interface that is implemented by pipes in order to perform a transformation. Angular invokes the &lt;code&gt;transform&lt;/code&gt; method with the value of a binding as the first argument, and any parameters as the second argument in list form.</source>
          <target state="translated">변환을 수행하기 위해 파이프로 구현되는 인터페이스입니다. Angular는 바인딩 값을 첫 번째 인수로 사용하고 매개 변수를 두 번째 인수로 목록 형식으로 사용하여 &lt;code&gt;transform&lt;/code&gt; 메소드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="c36481e852a7d993e92e4ce11d6b4beef0f3fdd1" translate="yes" xml:space="preserve">
          <source>An internal callback method triggered before the instance is destroyed. Removes the group from its parent group.</source>
          <target state="translated">인스턴스가 파괴되기 전에 트리거 된 내부 콜백 메소드. 부모 그룹에서 그룹을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="b7240884a65be7f42acffdd93220a4238efbb924" translate="yes" xml:space="preserve">
          <source>An internal callback method triggered on the instance after the inputs are set. Registers the group with its parent group.</source>
          <target state="translated">입력이 설정된 후 인스턴스에서 내부 콜백 메소드가 트리거되었습니다. 부모 그룹에 그룹을 등록합니다.</target>
        </trans-unit>
        <trans-unit id="459b33ae0fa271dad1c7cca97ee631d68755d38d" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 사용 하는 &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 의 내부 확인 표현 .</target>
        </trans-unit>
        <trans-unit id="1d15a7d32fabd101f937535387a49e1f6c6b6998" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 사용 하는 &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 의 내부 확인 표현 .</target>
        </trans-unit>
        <trans-unit id="65e2c36a1d8f607a0d4bae22e070ff4a3a76b579" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 를 해결하여 생성 된 팩토리 함수의 내부 확인 표현입니다 .</target>
        </trans-unit>
        <trans-unit id="46810c6b6144599b1f85ccf176d9da78c21a7d6f" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 를 해결하여 생성 된 팩토리 함수의 내부 확인 표현입니다 .</target>
        </trans-unit>
        <trans-unit id="fc05d68b0ca26dd2f9ba579fc3670a3efd223e13" translate="yes" xml:space="preserve">
          <source>An introduction to a few core router concepts will help orient you to the details that follow.</source>
          <target state="translated">몇 가지 핵심 라우터 개념에 대한 소개는 다음 세부 사항을 안내하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="c5fc8580ca92e73035b10dc5866e8d34b5b6db8c" translate="yes" xml:space="preserve">
          <source>An object containing JavaScript script files to add to the global context of the project. The scripts are loaded exactly as if you had added them in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside &lt;code&gt;index.html&lt;/code&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">프로젝트의 글로벌 컨텍스트에 추가 할 JavaScript 스크립트 파일을 포함하는 오브젝트입니다. 스크립트는 &lt;code&gt;index.html&lt;/code&gt; 내의 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 에 추가 한 것처럼 정확하게로드됩니다 . 아래의 &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;스타일 및 스크립트 구성&lt;/a&gt; 에서 자세한 내용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0798b0518cd85723d5bc73026ce32f7acc7ee37e" translate="yes" xml:space="preserve">
          <source>An object containing an identifier for the app to transition. The ID must match between the client and server versions of the app.</source>
          <target state="translated">전환 할 앱의 식별자가 포함 된 객체입니다. ID는 클라이언트와 서버 버전의 앱간에 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="34a705cd2ace4927bf00eb0c703ea16e82b4ece4" translate="yes" xml:space="preserve">
          <source>An object containing any errors generated by failing validation, or null if there are no errors.</source>
          <target state="translated">유효성 검사 실패로 생성 된 오류가 포함 된 개체이거나 오류가없는 경우 null입니다.</target>
        </trans-unit>
        <trans-unit id="c8e4c11b42659fb04de7da11d6fd9484b2d147cb" translate="yes" xml:space="preserve">
          <source>An object containing files and their compile-time replacements. See more in &lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;Configure target-specific file replacements&lt;/a&gt;.</source>
          <target state="translated">파일 및 컴파일 타임 대체를 포함하는 객체입니다. &lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;대상별 파일 교체 구성&lt;/a&gt; 에서 자세한 내용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc0d6006c1674c97b20fc570175b89cf3a3b1ef7" translate="yes" xml:space="preserve">
          <source>An object containing option-value pairs to pass to style preprocessors. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">스타일 프리 프로세서에 전달할 옵션 값 쌍을 포함하는 오브젝트입니다. 아래의 &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;스타일 및 스크립트 구성&lt;/a&gt; 에서 자세한 내용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b744df23ce437f3884fe3ab329fc10884f3b60c" translate="yes" xml:space="preserve">
          <source>An object containing paths to static assets to add to the global context of the project. The default paths point to the project's icon file and its &lt;code&gt;assets&lt;/code&gt; folder. See more in &lt;a href=&quot;workspace-config#asset-config&quot;&gt;Assets configuration&lt;/a&gt; below.</source>
          <target state="translated">프로젝트의 글로벌 컨텍스트에 추가 할 정적 자산에 대한 경로가 포함 된 객체입니다. 기본 경로는 프로젝트의 아이콘 파일 및 &lt;code&gt;assets&lt;/code&gt; 폴더를 가리 킵니다 . 아래 &lt;a href=&quot;workspace-config#asset-config&quot;&gt;자산 구성&lt;/a&gt; 에서 자세한 내용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c1e5ceffe1e3f920b94a5c9ee9b8bf7c6e2c0d19" translate="yes" xml:space="preserve">
          <source>An object containing properties that modify the navigation strategy.</source>
          <target state="translated">탐색 전략을 수정하는 속성이 포함 된 개체입니다.</target>
        </trans-unit>
        <trans-unit id="454bf511ebc9e0613519ea5b260dc6ce1bee629f" translate="yes" xml:space="preserve">
          <source>An object containing properties that modify the navigation strategy. The function ignores any properties in the &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; that would change the provided URL.</source>
          <target state="translated">탐색 전략을 수정하는 속성이 포함 된 개체입니다. 이 함수는 제공된 URL을 변경하는 &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; 의 모든 속성을 무시합니다 .</target>
        </trans-unit>
        <trans-unit id="6f909378a9aeab923299b7bb339184fd3aef25aa" translate="yes" xml:space="preserve">
          <source>An object containing the &lt;code&gt;serverPublicKey&lt;/code&gt; string.</source>
          <target state="translated">&lt;code&gt;serverPublicKey&lt;/code&gt; 문자열을 포함하는 개체 입니다.</target>
        </trans-unit>
        <trans-unit id="5f857b8189df6a05941e1ba626bb7cbf578f2264" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff () 가 마지막 으로 호출 된 이후 &lt;code&gt;Iterable&lt;/code&gt; 컬렉션 의 변경 사항을 설명하는 개체 입니다.</target>
        </trans-unit>
        <trans-unit id="8c315ec84a38122ef7c3d9a113c4504cd2522faa" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff () 가 마지막 으로 호출 된 이후 &lt;code&gt;Iterable&lt;/code&gt; 컬렉션 의 변경 사항을 설명하는 개체 입니다.</target>
        </trans-unit>
        <trans-unit id="5a1b257dd7d2442d3adda69d2fa3d7cdd2995179" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff () 가 마지막 으로 호출 된 이후 &lt;code&gt;Map&lt;/code&gt; 또는 &lt;code&gt;{[k:string]: string}&lt;/code&gt; 의 변경 사항을 설명하는 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="6ac36e997ec5fd21bda35b2901d01da4f1df4548" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff () 가 마지막 으로 호출 된 이후 &lt;code&gt;Map&lt;/code&gt; 또는 &lt;code&gt;{[k:string]: string}&lt;/code&gt; 의 변경 사항을 설명하는 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="0f356d25ccaadcbb052958e84e4c538216b2666e" translate="yes" xml:space="preserve">
          <source>An object in the Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;dependency-injection&lt;/a&gt; system that can find a named dependency in its cache or create a dependency using a configured &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;. Injectors are created for NgModules automatically as part of the bootstrap process and are inherited through the component hierarchy.</source>
          <target state="translated">캐시에서 명명 된 종속성을 찾거나 구성된 &lt;a href=&quot;glossary#provider&quot;&gt;제공자를&lt;/a&gt; 사용하여 종속성을 작성할 수 있는 Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;종속성 주입&lt;/a&gt; 시스템 의 오브젝트입니다 . 인젝터는 부트 스트랩 프로세스의 일부로 NgModules에 대해 자동으로 작성되며 구성 요소 계층 구조를 통해 상속됩니다.</target>
        </trans-unit>
        <trans-unit id="cc3b15aff9557888b414af3f20c881c83fc21164" translate="yes" xml:space="preserve">
          <source>An object of configuration options</source>
          <target state="translated">구성 옵션의 개체</target>
        </trans-unit>
        <trans-unit id="55a40c09435669e6d09baa4867c14de1eba936e3" translate="yes" xml:space="preserve">
          <source>An object passed to the &lt;code&gt;subscribe()&lt;/code&gt; method for an &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt;. The object defines the callbacks for the &lt;a href=&quot;glossary#subscriber&quot;&gt;subscriber&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt; 의 &lt;code&gt;subscribe()&lt;/code&gt; 메소드에 전달 된 객체 입니다. 객체는 &lt;a href=&quot;glossary#subscriber&quot;&gt;가입자에&lt;/a&gt; 대한 콜백을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="38838b7add8c95848485a408672d3653e1be9aa8" translate="yes" xml:space="preserve">
          <source>An object specifying lazy-loaded child routes.</source>
          <target state="translated">지연로드 된 자식 경로를 지정하는 개체입니다.</target>
        </trans-unit>
        <trans-unit id="91849ac8b00c354cb7ee440dea61bd355a282235" translate="yes" xml:space="preserve">
          <source>An object that can specify either or both cookie name or header name.</source>
          <target state="translated">쿠키 이름 또는 헤더 이름 중 하나 또는 둘 다를 지정할 수있는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="e59674c185a2660e9ab9f2a6044d9674f4444c9e" translate="yes" xml:space="preserve">
          <source>An object that implements one of the &lt;a href=&quot;../api/core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt; interfaces. A provider object defines how to obtain an injectable dependency associated with a &lt;a href=&quot;glossary#token&quot;&gt;DI token&lt;/a&gt;. An &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; uses the provider to create a new instance of a dependency for a class that requires it.</source>
          <target state="translated">&lt;a href=&quot;../api/core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt; 인터페이스 중 하나를 구현하는 오브젝트입니다 . 프로 바이더 객체는 &lt;a href=&quot;glossary#token&quot;&gt;DI 토큰&lt;/a&gt; 과 관련된 주사 가능한 의존성을 얻는 방법을 정의합니다 . &lt;a href=&quot;glossary#injector&quot;&gt;인젝터는&lt;/a&gt; 그것을 필요로하는 클래스에 대한 종속성의 새 인스턴스를 만들려면 공급자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="882038f9e81095e5a1e8b2e8ac4378d8a2d5727e" translate="yes" xml:space="preserve">
          <source>An object that provides parent context for this element. Often an ancestor component instance that governs this element.</source>
          <target state="translated">이 요소에 대한 부모 컨텍스트를 제공하는 개체입니다. 종종이 요소를 관리하는 조상 구성 요소 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="c4b1689270e4d44ba822baf6c09fa4f36f7e04ec" translate="yes" xml:space="preserve">
          <source>An observable can deliver multiple values of any type&amp;mdash;literals, messages, or events, depending on the context. The API for receiving values is the same whether the values are delivered synchronously or asynchronously. Because setup and teardown logic are both handled by the observable, your application code only needs to worry about subscribing to consume values, and when done, unsubscribing. Whether the stream was keystrokes, an HTTP response, or an interval timer, the interface for listening to values and stopping listening is the same.</source>
          <target state="translated">Observable은 상황에 따라 문자, 메시지 또는 이벤트 등 모든 유형의 여러 값을 전달할 수 있습니다. 값을 수신하는 API는 값이 동 기적으로 전달되는지 비동기 적으로 전달되는지에 관계없이 동일합니다. 설정 및 해제 논리는 모두 Observable에 의해 처리되므로 애플리케이션 코드는 값을 소비하기 위해 구독하고 구독이 완료되면 구독에 대해 걱정하면됩니다. 스트림이 키 스트로크, HTTP 응답 또는 간격 타이머인지에 관계없이 값을 듣고 청취를 중지하기위한 인터페이스는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="8f7904892d5fae208a614b0e764892eb392d2990" translate="yes" xml:space="preserve">
          <source>An observable of the URL fragment shared by all the routes.</source>
          <target state="translated">모든 경로가 공유하는 URL 조각을 관찰 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9886415c12cd9cb121b3e54e248babdfc816c0c5" translate="yes" xml:space="preserve">
          <source>An observable of the URL segments matched by this route.</source>
          <target state="translated">이 경로와 일치하는 URL 세그먼트를 관찰 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78107a7f3c08dd96478ee59348f7bde390f4ab63" translate="yes" xml:space="preserve">
          <source>An observable of the matrix parameters scoped to this route.</source>
          <target state="translated">이 경로에 범위가 지정된 행렬 매개 변수를 관찰 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e605d70e4839e622078c536e593bcab71033051" translate="yes" xml:space="preserve">
          <source>An observable of the query parameters shared by all the routes.</source>
          <target state="translated">모든 경로가 공유하는 쿼리 매개 변수를 관찰 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90ec32bf2447d30094892ebd1f740f9177296b34" translate="yes" xml:space="preserve">
          <source>An observable of the static and resolved data of this route.</source>
          <target state="translated">이 경로의 정적 및 확인 된 데이터를 관찰 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85079a71024f29fac34fa9fff342e23ac05bb053" translate="yes" xml:space="preserve">
          <source>An observable produces values over time. An array is created as a static set of values. In a sense, observables are asynchronous where arrays are synchronous. In the following examples, ➞ implies asynchronous value delivery.</source>
          <target state="translated">관찰 가능 항목은 시간이 지남에 따라 값을 생성합니다. 배열은 정적 값 세트로 작성됩니다. 어떤 의미에서, 옵저버 블은 배열이 비동기 인 곳에서 비동기입니다. 다음 예에서 ➞ 비동기 값 전달을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="2b14b5c470af9577f634870ec12983a41761982f" translate="yes" xml:space="preserve">
          <source>An observer object can define any combination of these handlers. If you don't supply a handler for a notification type, the observer ignores notifications of that type.</source>
          <target state="translated">관찰자 객체는 이러한 핸들러의 조합을 정의 할 수 있습니다. 알림 유형에 대한 처리기를 제공하지 않으면 관찰자는 해당 유형의 알림을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="5588df976b6ceca9f5b806e0cfbd39a5b7ad5721" translate="yes" xml:space="preserve">
          <source>An opaque identifier used for efficient table lookup. In Angular, a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt; is used to find &lt;a href=&quot;glossary#provider&quot;&gt;providers&lt;/a&gt; of dependencies in the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; system.</source>
          <target state="translated">효율적인 테이블 조회에 사용되는 불투명 식별자입니다. Angular에서 &lt;a href=&quot;glossary#di-token&quot;&gt;DI 토큰&lt;/a&gt; 은 &lt;a href=&quot;glossary#di&quot;&gt;종속성 주입&lt;/a&gt; 시스템 에서 종속성 &lt;a href=&quot;glossary#provider&quot;&gt;공급자&lt;/a&gt; 를 찾는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="893c9913a260d7efeab0a92c7090707b5d91605d" translate="yes" xml:space="preserve">
          <source>An optional class to instantiate for the &lt;code&gt;token&lt;/code&gt;. By default, the &lt;code&gt;provide&lt;/code&gt; class is instantiated.</source>
          <target state="translated">&lt;code&gt;token&lt;/code&gt; 을 인스턴스화하는 선택적 클래스 입니다. 기본적으로 &lt;code&gt;provide&lt;/code&gt; 클래스는 인스턴스화됩니다.</target>
        </trans-unit>
        <trans-unit id="e55702fe0ed268cd72f9e80ab84594f0175eac3b" translate="yes" xml:space="preserve">
          <source>An optional custom strategy factory to use instead of the default. The strategy controls how the transformation is performed.</source>
          <target state="translated">기본값 대신 사용할 선택적 사용자 정의 전략 팩토리. 전략은 변환 수행 방법을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="745e4868ae2dec2541f06bf87f21451d7d0faeb0" translate="yes" xml:space="preserve">
          <source>An optional function passed into the &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive that defines how to track changes for items in an iterable. The function takes the iteration index and item ID. When supplied, Angular tracks changes by the return value of the function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 에서 항목의 변경 사항을 추적하는 방법을 정의하는 NgForOf 지시문에 전달 된 선택적 함수 입니다. 이 함수는 반복 색인 및 항목 ID를 사용합니다. 제공되는 경우 Angular는 함수의 반환 값에 따라 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="81174fe66b40fa07233e7e82f826582748cde349" translate="yes" xml:space="preserve">
          <source>An optional function passed into the &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive that defines how to track changes for items in an iterable. The function takes the iteration index and item ID. When supplied, Angular tracks changes by the return value of the function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 에서 항목의 변경 사항을 추적하는 방법을 정의하는 NgForOf 지시문에 전달 된 선택적 함수 입니다. 이 함수는 반복 색인 및 항목 ID를 사용합니다. 제공되는 경우 Angular는 함수의 반환 값에 따라 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="0799df23e9df2c8ad24df18164841277103dfbe6" translate="yes" xml:space="preserve">
          <source>An options object containing a delay and developer-defined parameters that provide styling defaults and can be overridden on invocation.</source>
          <target state="translated">스타일링 기본값을 제공하고 호출시 재정의 될 수있는 지연 및 개발자 정의 매개 변수를 포함하는 옵션 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="18af9da7a490397301ba60f7e43c0ea189752510" translate="yes" xml:space="preserve">
          <source>An options object containing a delay and developer-defined parameters that provide styling defaults and can be overridden on invocation. Default delay is 0.</source>
          <target state="translated">스타일링 기본값을 제공하고 호출시 재정의 될 수있는 지연 및 개발자 정의 매개 변수를 포함하는 옵션 오브젝트입니다. 기본 지연은 0입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
