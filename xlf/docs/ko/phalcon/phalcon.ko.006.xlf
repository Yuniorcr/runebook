<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="phalcon">
    <body>
      <group id="phalcon">
        <trans-unit id="98407c3e509c5c95dcc8736a8403092e60fb96d2" translate="yes" xml:space="preserve">
          <source>Simply validates specified string length constraints</source>
          <target state="translated">지정된 문자열 길이 제약 조건을 간단히 검증</target>
        </trans-unit>
        <trans-unit id="d1f446f3f16f267fb039845e7434f6e0c5d9d5ec" translate="yes" xml:space="preserve">
          <source>Since Binder object is using internally Reflection Api which can be heavy there is ability to set cache. This can be done by using second argument in &lt;code&gt;setModelBinder()&lt;/code&gt; which can also accept service name or just by passing cache instance to &lt;code&gt;Binder&lt;/code&gt; constructor.</source>
          <target state="translated">바인더 오브젝트는 무거울 수있는 내부 리플렉션 API를 사용하기 때문에 캐시를 설정하는 기능이 있습니다. 이는 서비스 이름을 수락하거나 캐시 인스턴스를 &lt;code&gt;Binder&lt;/code&gt; 생성자 에 전달 하여 &lt;code&gt;setModelBinder()&lt;/code&gt; 에서 두 번째 인수를 사용하여 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a7783875ee9966a628ea7d3cd4aeccab626c3317" translate="yes" xml:space="preserve">
          <source>Since Phalcon is highly decoupled, &lt;a href=&quot;../api/phalcon_di&quot;&gt;&lt;em&gt;Phalcon\Di&lt;/em&gt;&lt;/a&gt; is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.</source>
          <target state="translated">Phalcon은 고도로 분리되어 있으므로 Phalcon &lt;a href=&quot;../api/phalcon_di&quot;&gt;&lt;em&gt;\ Di&lt;/em&gt;&lt;/a&gt; 는 프레임 워크의 다른 구성 요소를 통합하는 데 필수적입니다. 개발자는이 구성 요소를 사용하여 종속성을 주입하고 응용 프로그램에서 사용되는 다른 클래스의 전역 인스턴스를 관리 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6eb95324fc6c55c01463f5e33eac8971bf1e1c8" translate="yes" xml:space="preserve">
          <source>Since Phalcon is highly decoupled, Phalcon\Di is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.</source>
          <target state="translated">Phalcon은 고도로 분리되어 있으므로 Phalcon \ Di는 프레임 워크의 다른 구성 요소를 통합하는 데 필수적입니다. 개발자는이 구성 요소를 사용하여 종속성을 주입하고 응용 프로그램에서 사용되는 다른 클래스의 전역 인스턴스를 관리 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbbe493414e96c4fd042bb3ae38cac2ab9f72fad" translate="yes" xml:space="preserve">
          <source>Since both relations point to the same model (Robots), obtain the records related to the relationship could not be clear:</source>
          <target state="translated">두 관계가 동일한 모델 (로봇)을 가리 키므로 관계와 관련된 레코드를 확보 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1b5d78932376c2886fd925353a6054d47124fe0c" translate="yes" xml:space="preserve">
          <source>Since the default bind-type is &lt;code&gt;Phalcon\Db\Column::BIND_PARAM_STR&lt;/code&gt;, there is no need to specify the &amp;ldquo;bindTypes&amp;rdquo; parameter if all of the columns are of that type.</source>
          <target state="translated">기본 바인드 유형은 &lt;code&gt;Phalcon\Db\Column::BIND_PARAM_STR&lt;/code&gt; 이므로 모든 열이 해당 유형 인 경우 &quot;bindTypes&quot;매개 변수를 지정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="5885be84ea7ebe6bfffbcef8092e709ad9467f8d" translate="yes" xml:space="preserve">
          <source>Since this component has no dependencies, you can create a file as shown below to test your routes:</source>
          <target state="translated">이 구성 요소에는 종속성이 없으므로 아래 표시된대로 파일을 만들어 경로를 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20e88dabba7bc6a18dfc814b945efd1197e5d3b2" translate="yes" xml:space="preserve">
          <source>Since you can add many routes as you need using the &lt;code&gt;add()&lt;/code&gt; method, the order in which routes are added indicate their relevance, latest routes added have more relevance than first added. Internally, all defined routes are traversed in reverse order until &lt;a href=&quot;../api/phalcon_mvc_router&quot;&gt;&lt;em&gt;Phalcon\Mvc\Router&lt;/em&gt;&lt;/a&gt; finds the one that matches the given URI and processes it, while ignoring the rest.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; 메소드를 사용하여 필요한만큼 많은 경로를 추가 할 수 있으므로 경로가 추가되는 순서는 관련성을 나타내며, 추가 된 최신 경로는 처음 추가 된 것보다 관련성이 높습니다. 내부적으로 정의 된 모든 경로는 &lt;a href=&quot;../api/phalcon_mvc_router&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Router&lt;/em&gt;&lt;/a&gt; 가 지정된 URI와 일치하는 경로를 찾아 처리하면서 나머지 경로는 무시할 때까지 역순으로 순회 합니다.</target>
        </trans-unit>
        <trans-unit id="56fca1080e47365d0cc8baee206822af3ec0e7b9" translate="yes" xml:space="preserve">
          <source>Single MVC applications consist of one module only. Namespaces can be used but are not necessary. An application like this would have the following file structure:</source>
          <target state="translated">단일 MVC 애플리케이션은 하나의 모듈로만 구성됩니다. 네임 스페이스는 사용할 수 있지만 필수는 아닙니다. 이와 같은 응용 프로그램은 다음과 같은 파일 구조를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="2d5bbab35576075287beec30baf55cd492f14fdb" translate="yes" xml:space="preserve">
          <source>Single Module</source>
          <target state="translated">단일 모듈</target>
        </trans-unit>
        <trans-unit id="f62912d39c922f40198abe0fc5d055c178942fb9" translate="yes" xml:space="preserve">
          <source>Single or Multi Module Applications</source>
          <target state="translated">단일 또는 다중 모듈 애플리케이션</target>
        </trans-unit>
        <trans-unit id="f4c91113496bdba17112f0744ce5f784536ad2c2" translate="yes" xml:space="preserve">
          <source>Skipping Columns</source>
          <target state="translated">열 건너 뛰기</target>
        </trans-unit>
        <trans-unit id="4ea3e1932ea4db9f2f3e54ac61bdac8ae514b113" translate="yes" xml:space="preserve">
          <source>Skips a number of results</source>
          <target state="translated">여러 결과 건너 뛰기</target>
        </trans-unit>
        <trans-unit id="5e97a1f1960df71a72fb0309defc24688c0ef863" translate="yes" xml:space="preserve">
          <source>Skips the current operation forcing a success state</source>
          <target state="translated">성공 상태를 강요하는 현재 작업을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="229d4976faf607862e06a553bd1d434f054eea70" translate="yes" xml:space="preserve">
          <source>Smooth out $_FILES to have plain array with all files uploaded</source>
          <target state="translated">모든 파일이 업로드 된 일반 배열을 갖도록 $ _FILES를 부드럽게</target>
        </trans-unit>
        <trans-unit id="042e6ab99949ccb2c6e47bbc5e936c9eabf5f50e" translate="yes" xml:space="preserve">
          <source>So far we have seen how dependency injection solved our problems. Passing dependencies as arguments instead of creating them internally in the code makes our application more maintainable and decoupled. However, in the long-term, this form of dependency injection has some disadvantages.</source>
          <target state="translated">지금까지 의존성 주입으로 문제를 해결하는 방법을 살펴 보았습니다. 코드에서 내부적으로 종속성을 생성하지 않고 인수로 종속성을 전달하면 응용 프로그램의 유지 관리 및 분리가 더 쉬워집니다. 그러나 장기적으로 이러한 형태의 의존성 주입은 몇 가지 단점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a42585982ed7425d581b77cabc093a5b847c3c47" translate="yes" xml:space="preserve">
          <source>SoftDelete</source>
          <target state="translated">SoftDelete</target>
        </trans-unit>
        <trans-unit id="7b597122afd1527e9c1d0693c86648fad04e1c62" translate="yes" xml:space="preserve">
          <source>Some HTML attributes like &amp;lsquo;href&amp;rsquo; or &amp;lsquo;url&amp;rsquo; need to be escaped differently:</source>
          <target state="translated">'href'또는 'url'과 같은 일부 HTML 속성은 다르게 이스케이프해야합니다.</target>
        </trans-unit>
        <trans-unit id="3e481d1ea72fdecb5b63b1d63281f614e71ef6cd" translate="yes" xml:space="preserve">
          <source>Some applications are session-intensive, almost any action that performs requires access to session data. There are others who access session data casually. Thanks to the service container, we can ensure that the session is accessed only when it&amp;rsquo;s clearly needed:</source>
          <target state="translated">일부 응용 프로그램은 세션 집약적이며 수행하는 거의 모든 작업에는 세션 데이터에 대한 액세스가 필요합니다. 부담없이 세션 데이터에 액세스하는 다른 사람들이 있습니다. 서비스 컨테이너 덕분에 세션이 명확하게 필요할 때만 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="588d444a4f6a3f620314d2f451c06a1b8a657586" translate="yes" xml:space="preserve">
          <source>Some applications implement multilingual on the URL such as &lt;a href=&quot;http://www.mozilla.org/&quot;&gt;http://www.mozilla.org/&lt;/a&gt;&lt;strong&gt;es-ES&lt;/strong&gt;/firefox/. Phalcon can implement this by using a &lt;a href=&quot;routing&quot;&gt;&lt;em&gt;Router&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">일부 응용 프로그램은 &lt;a href=&quot;http://www.mozilla.org/&quot;&gt;http://www.mozilla.org/ &lt;/a&gt;&lt;strong&gt;es-ES&lt;/strong&gt; / firefox / 와 같이 URL에서 다국어를 구현 합니다. Phalcon은 &lt;a href=&quot;routing&quot;&gt;&lt;em&gt;Router&lt;/em&gt;&lt;/a&gt; 를 사용하여이를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6770b4dd594e58fb8f121072c17a62a128fd6277" translate="yes" xml:space="preserve">
          <source>Some applications implement multilingual on the URL such as &lt;a href=&quot;https://www.mozilla.org/&quot;&gt;http://www.mozilla.org/&lt;/a&gt;&lt;strong&gt;es-ES&lt;/strong&gt;/firefox/. Phalcon can implement this by using a &lt;a href=&quot;routing&quot;&gt;&lt;em&gt;Router&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3099a696e38e88eb85c59891d7c478de4fcf57b2" translate="yes" xml:space="preserve">
          <source>Some autoloading strategies such as &amp;ldquo;prefixes&amp;rdquo;, &amp;ldquo;namespaces&amp;rdquo; or &amp;ldquo;directories&amp;rdquo; automatically append the &amp;ldquo;php&amp;rdquo; extension at the end of the checked file. If you are using additional extensions you could set it with the method &amp;ldquo;setExtensions&amp;rdquo;. Files are checked in the order as it were defined:</source>
          <target state="translated">&quot;접두사&quot;, &quot;네임 스페이스&quot;또는 &quot;디렉토리&quot;와 같은 일부 자동로드 전략은 확인 된 파일의 끝에 &quot;php&quot;확장자를 자동으로 추가합니다. 추가 확장을 사용하는 경우 &quot;setExtensions&quot;방법으로 확장을 설정할 수 있습니다. 파일은 정의 된 순서대로 검사됩니다.</target>
        </trans-unit>
        <trans-unit id="49e7ba2b297b935e620eb4487445d147985f6bbf" translate="yes" xml:space="preserve">
          <source>Some events return false as an indication to stop the current operation. If an event doesn&amp;rsquo;t return anything, &lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;Phalcon\Mvc\Collection&lt;/em&gt;&lt;/a&gt; will assume a true value.</source>
          <target state="translated">일부 이벤트는 현재 작업을 중지하라는 표시로 false를 반환합니다. 이벤트가 아무것도 반환하지 않으면 &lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Collection&lt;/em&gt;&lt;/a&gt; 은 true 값을 가정합니다.</target>
        </trans-unit>
        <trans-unit id="6944677def67d75ec78e82a163a89c34bd977513" translate="yes" xml:space="preserve">
          <source>Some events when returning boolean false could stop the active operation. The following events are supported:</source>
          <target state="translated">부울 false를 반환 할 때 일부 이벤트는 활성 작업을 중지 할 수 있습니다. 다음과 같은 이벤트가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="97a5aa2f143b3ba4a24886d5fbfec2026ae2b0e4" translate="yes" xml:space="preserve">
          <source>Some models may have identity columns. These columns usually are the primary key of the mapped table. &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; can recognize the identity column omitting it in the generated SQL INSERT, so the database system can generate an auto-generated value for it. Always after creating a record, the identity field will be registered with the value generated in the database system for it:</source>
          <target state="translated">일부 모델에는 식별 열이있을 수 있습니다. 이 열은 일반적으로 매핑 된 테이블의 기본 키입니다. &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt; 은 생성 된 SQL INSERT에서 식별 열을 생략하여 데이터베이스 시스템이 자동 생성 된 값을 생성 할 수 있습니다. 레코드를 작성한 후에는 항상 ID 필드가 데이터베이스 시스템에서 생성 된 값으로 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="aa6977beb59cfe0af7bf72bbc8d9206a54d9ca71" translate="yes" xml:space="preserve">
          <source>Some models may have relationships with other models. This allows us to easily check the records that relate to instances in memory:</source>
          <target state="translated">일부 모델은 다른 모델과 관계가있을 수 있습니다. 이를 통해 메모리의 인스턴스와 관련된 레코드를 쉽게 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72d9bb8666db3aeb7591bf123ea65cfa7252f85f" translate="yes" xml:space="preserve">
          <source>Some of the limitations can be overcome by passing additional variables to the closure&amp;rsquo;s environment:</source>
          <target state="translated">추가 변수를 클로저 환경에 전달하여 일부 제한을 극복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dabcd239ffa410418d3e9ac756755b99dbb538db" translate="yes" xml:space="preserve">
          <source>Some of the returns from queue methods require that the module Yaml be installed. Please refer to &lt;a href=&quot;http://php.net/manual/book.yaml.php&quot;&gt;http://php.net/manual/book.yaml.php&lt;/a&gt; for more information. For PHP &amp;lt; 7, Yaml 1.3.0 is acceptable. For PHP &amp;gt;= 7, you will need to use Yaml &amp;gt;= 2.0.0.</source>
          <target state="translated">큐 메소드에서 리턴 된 일부는 모듈 Yaml을 설치해야합니다. 자세한 내용은 &lt;a href=&quot;http://php.net/manual/book.yaml.php&quot;&gt;http://php.net/manual/book.yaml.php&lt;/a&gt; 를 참조하십시오. PHP &amp;lt;7의 경우 Yaml 1.3.0이 허용됩니다. PHP&amp;gt; = 7의 경우 Yaml&amp;gt; = 2.0.0을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="bebdcf1138e86d47d4eae3988ce3794132e1922f" translate="yes" xml:space="preserve">
          <source>Some of the returns from queue methods require that the module Yaml be installed. Please refer to &lt;a href=&quot;https://php.net/manual/book.yaml.php&quot;&gt;http://php.net/manual/book.yaml.php&lt;/a&gt; for more information. For PHP &amp;lt; 7, Yaml 1.3.0 is acceptable. For PHP &amp;gt;= 7, you will need to use Yaml &amp;gt;= 2.0.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9075710b08f0edc1e315f90dd4fc4c7fc5ff0df7" translate="yes" xml:space="preserve">
          <source>Some things to keep in mind when using PHQL:</source>
          <target state="translated">PHQL을 사용할 때 명심해야 할 사항 :</target>
        </trans-unit>
        <trans-unit id="f7ae678512d5cb22fcd92cdaf303785ec1d08960" translate="yes" xml:space="preserve">
          <source>Some things to keep in mind when using the universal autoloader:</source>
          <target state="translated">범용 오토로더를 사용할 때 명심해야 할 사항 :</target>
        </trans-unit>
        <trans-unit id="8946aa6cd33e7411c67f71570e0dbc9ed84294ed" translate="yes" xml:space="preserve">
          <source>Some type of columns like VARCHAR or INTEGER may have a specific size</source>
          <target state="translated">VARCHAR 또는 INTEGER와 같은 일부 유형의 열은 특정 크기를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6f328a722ad5b99dee0ca97adb07ccf9c9d2021" translate="yes" xml:space="preserve">
          <source>Sometimes a route could be accessed with extra/trailing slashes. Those extra slashes would lead to produce a not-found status in the dispatcher. You can set up the router to automatically remove the slashes from the end of handled route:</source>
          <target state="translated">때때로 추가 / 트레일 링 슬래시로 경로에 액세스 할 수 있습니다. 이러한 추가 슬래시는 디스패처에서 찾을 수없는 상태를 생성합니다. 처리 된 경로 끝에서 슬래시를 자동으로 제거하도록 라우터를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="652b7a855fad8c38051308c1ce40492578aac881" translate="yes" xml:space="preserve">
          <source>Sometimes a user can use the same application twice, on the same server, in the same session. Surely, if we use variables in session, we want that every application have separate session data (even though the same code and same variable names). To solve this, you can add a prefix for every session variable created in a certain application:</source>
          <target state="translated">때때로 사용자는 같은 세션에서 같은 서버에서 같은 응용 프로그램을 두 번 사용할 수 있습니다. 물론 세션에서 변수를 사용하는 경우 모든 응용 프로그램에 별도의 세션 데이터가 있어야합니다 (동일한 코드와 동일한 변수 이름 임에도 불구하고). 이를 해결하기 위해 특정 애플리케이션에서 작성된 모든 세션 변수에 접 두부를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e62c2c54e25e95d2221bddc49ce7b2ac6ed91764" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to get those attributes when working with models. You can get a metadata instance as follows:</source>
          <target state="translated">때로는 모델로 작업 할 때 이러한 속성을 가져와야합니다. 다음과 같이 메타 데이터 인스턴스를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb792c7742cb046a490489f3fea4f91ea07d758d" translate="yes" xml:space="preserve">
          <source>Sometimes records are obtained only to be presented to a user in read-only mode, in these cases it may be useful to change the way in which records are represented to facilitate their handling. The strategy used to represent objects returned in a resultset is called &amp;lsquo;hydration mode&amp;rsquo;:</source>
          <target state="translated">때로는 레코드가 읽기 전용 모드로 사용자에게만 제공되도록 확보되는 경우가 있습니다. 이러한 경우 처리를 용이하게하기 위해 레코드가 표시되는 방식을 변경하는 것이 유용 할 수 있습니다. 결과 집합에서 반환되는 개체를 나타내는 데 사용되는 전략을 '수화 모드'라고합니다.</target>
        </trans-unit>
        <trans-unit id="e418752a50fb77d65928d067b1af26715ce9c23a" translate="yes" xml:space="preserve">
          <source>Sometimes we may need to improve the loading of static elements such as images, javascript and css to improve performance. The following tools are useful to detect common bottlenecks in the client side:</source>
          <target state="translated">때로는 성능 향상을 위해 이미지, 자바 스크립트 및 CSS와 같은 정적 요소의로드를 개선해야 할 수도 있습니다. 다음 도구는 클라이언트 쪽에서 일반적인 병목 현상을 감지하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="1b0e5a8dc3a5c3b68b2e883a1b7596fba937ad1e" translate="yes" xml:space="preserve">
          <source>Sometimes when you develop dynamic websites and some areas of them are not updated very often, the output is exactly the same between requests. &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; offers caching a part or the whole rendered output to increase performance.</source>
          <target state="translated">때로는 동적 웹 사이트를 개발하고 일부 영역이 자주 업데이트되지 않는 경우 요청간에 출력이 정확히 동일합니다. &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt; 는 일부 또는 전체 렌더링 된 출력을 캐싱하여 성능을 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="c65b60485e5c937623d8615328805c9e40aa5358" translate="yes" xml:space="preserve">
          <source>Sometimes, routes should only be matched if they meet specific conditions. You can add arbitrary conditions to routes using the &lt;code&gt;beforeMatch()&lt;/code&gt; callback. If this function return &lt;code&gt;false&lt;/code&gt;, the route will be treated as non-matched:</source>
          <target state="translated">경우에 따라 경로가 특정 조건을 충족하는 경우에만 일치해야합니다. &lt;code&gt;beforeMatch()&lt;/code&gt; 콜백을 사용하여 라우트에 임의 조건을 추가 할 수 있습니다 . 이 함수가 &lt;code&gt;false&lt;/code&gt; 를 반환 하면 경로는 일치하지 않는 것으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="98ea781ae4695ae6a6fd01d3773d0715c9f7e011" translate="yes" xml:space="preserve">
          <source>Sorts an array</source>
          <target state="translated">배열을 정렬</target>
        </trans-unit>
        <trans-unit id="e25aaff5369284628e185f458ae90c79e6be2c03" translate="yes" xml:space="preserve">
          <source>Sorts an array using the PHP function &lt;a href=&quot;http://php.net/manual/en/function.asort.php&quot;&gt;asort&lt;/a&gt;</source>
          <target state="translated">PHP 함수 &lt;a href=&quot;http://php.net/manual/en/function.asort.php&quot;&gt;asort를&lt;/a&gt; 사용하여 배열을 정렬합니다</target>
        </trans-unit>
        <trans-unit id="d788f3347a28868079a68e92a6d15adb30a79776" translate="yes" xml:space="preserve">
          <source>Sorts an array using the PHP function &lt;a href=&quot;https://php.net/manual/en/function.asort.php&quot;&gt;asort&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60f2f817f1279e1160986eb4acd5e8750377b0f" translate="yes" xml:space="preserve">
          <source>Source on GitHub</source>
          <target state="translated">GitHub 소스</target>
        </trans-unit>
        <trans-unit id="5568d8ad0906ad776f8630e6e44926428c9eb7b5" translate="yes" xml:space="preserve">
          <source>Specific functions for the Mysql database system</source>
          <target state="translated">MySQL 데이터베이스 시스템을위한 특정 기능</target>
        </trans-unit>
        <trans-unit id="91e0fc7984cd187356b0cb00afda7821cca3f80a" translate="yes" xml:space="preserve">
          <source>Specific functions for the Postgresql database system</source>
          <target state="translated">PostgreSQL 데이터베이스 시스템을위한 특정 기능</target>
        </trans-unit>
        <trans-unit id="75338c0cb336ed5ae5df9ae3ccbae8b96cd1460d" translate="yes" xml:space="preserve">
          <source>Specific functions for the Sqlite database system</source>
          <target state="translated">Sqlite 데이터베이스 시스템을위한 특정 기능</target>
        </trans-unit>
        <trans-unit id="aa12f166e2502c4fc470fea98901ee6b4c8ac663" translate="yes" xml:space="preserve">
          <source>Specific models could be set to maintain a record snapshot when they&amp;rsquo;re queried. You can use this feature to implement auditing or just to know what fields are changed according to the data queried from the persistence:</source>
          <target state="translated">쿼리 할 때 레코드 스냅 샷을 유지하도록 특정 모델을 설정할 수 있습니다. 이 기능을 사용하여 감사를 구현하거나 지속성에서 쿼리 된 데이터에 따라 어떤 필드가 변경되는지 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e734286ef1adfd24a29383fe5fc7de3a9e4bc47" translate="yes" xml:space="preserve">
          <source>Specific packages for common platforms:</source>
          <target state="translated">공통 플랫폼을위한 특정 패키지 :</target>
        </trans-unit>
        <trans-unit id="8f3d6ba549f4a23fc85d31bb9c080425cf089eda" translate="yes" xml:space="preserve">
          <source>Specify it in the routes as a separate parameter in the route&amp;rsquo;s paths:</source>
          <target state="translated">경로의 경로에 별도의 매개 변수로 경로에 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="a44f00f6d2af492d1d5e896d05e87fff2e4548cd" translate="yes" xml:space="preserve">
          <source>Specifying values directly</source>
          <target state="translated">직접 값 지정</target>
        </trans-unit>
        <trans-unit id="ddbe3902f950cffd9457add0f57f2d1ba53fcdbf" translate="yes" xml:space="preserve">
          <source>Stand-Alone Component</source>
          <target state="translated">독립형 구성 요소</target>
        </trans-unit>
        <trans-unit id="394d042b0d8535d19bce6adf7df133090d008061" translate="yes" xml:space="preserve">
          <source>Stand-Alone component</source>
          <target state="translated">독립형 구성 요소</target>
        </trans-unit>
        <trans-unit id="d66cf8c231755ea88396e4562d94a1142b1c1665" translate="yes" xml:space="preserve">
          <source>Stand-alone component</source>
          <target state="translated">독립형 구성 요소</target>
        </trans-unit>
        <trans-unit id="8730ff4691f9a709f33ca7faf299a5c0bfa675b0" translate="yes" xml:space="preserve">
          <source>Standard Assignment</source>
          <target state="translated">표준 과제</target>
        </trans-unit>
        <trans-unit id="2f921afdcacc43bee03c821572aa1d3c6ab59ecd" translate="yes" xml:space="preserve">
          <source>Starting Route</source>
          <target state="translated">출발 노선</target>
        </trans-unit>
        <trans-unit id="978869b0e0c9f50af30dff7bc90bab8cf0b3a3d0" translate="yes" xml:space="preserve">
          <source>Starting from PHP 5.4 you can use &lt;a href=&quot;http://php.net/manual/en/language.oop5.traits.php&quot;&gt;Traits&lt;/a&gt; to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the Timestampable behavior:</source>
          <target state="translated">PHP 5.4부터 &lt;a href=&quot;http://php.net/manual/en/language.oop5.traits.php&quot;&gt;Traits&lt;/a&gt; 를 사용하여 클래스에서 코드를 재사용 할 수 있습니다 . 이것은 사용자 정의 동작을 구현하는 또 다른 방법입니다. 다음 특성은 간단한 버전의 타임 스탬프 가능 동작을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="4c322e06cd075f16645efdf79732d331f0440691" translate="yes" xml:space="preserve">
          <source>Starting from PHP 5.4 you can use &lt;a href=&quot;https://php.net/manual/en/language.oop5.traits.php&quot;&gt;Traits&lt;/a&gt; to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the Timestampable behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9a5b777ec43b498cd0b68022abe57156a20906" translate="yes" xml:space="preserve">
          <source>Starting the Session</source>
          <target state="translated">세션 시작</target>
        </trans-unit>
        <trans-unit id="6ed90a2e14c91398f9df10ed03bc1b2aeeef7666" translate="yes" xml:space="preserve">
          <source>Starts a cache. The keyname allows to identify the created fragment</source>
          <target state="translated">캐시를 시작합니다. 키 이름을 사용하면 생성 된 조각을 식별 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="7c9e8e5e4827d499a33c80150c6d951dd10dc40a" translate="yes" xml:space="preserve">
          <source>Starts a transaction</source>
          <target state="translated">거래를 시작합니다</target>
        </trans-unit>
        <trans-unit id="b9635422b4df6c100171749b5971bd98dec79e18" translate="yes" xml:space="preserve">
          <source>Starts a transaction in the connection</source>
          <target state="translated">연결에서 트랜잭션을 시작합니다</target>
        </trans-unit>
        <trans-unit id="a87d39d3c21365d227088d7301cb40903c1ccf75" translate="yes" xml:space="preserve">
          <source>Starts every backend</source>
          <target state="translated">모든 백엔드를 시작합니다</target>
        </trans-unit>
        <trans-unit id="8acb882ae9adf72bee17116b5ececebe5de0cfbb" translate="yes" xml:space="preserve">
          <source>Starts output frontend</source>
          <target state="translated">출력 프론트 엔드를 시작합니다</target>
        </trans-unit>
        <trans-unit id="3288f86599d31e0c131ebbc47c10e8063d040779" translate="yes" xml:space="preserve">
          <source>Starts output frontend. Actually, does nothing</source>
          <target state="translated">출력 프론트 엔드를 시작합니다. 실제로, 아무것도하지 않습니다</target>
        </trans-unit>
        <trans-unit id="25847bf1f312348d6640ccd4eda713fe765bc9f1" translate="yes" xml:space="preserve">
          <source>Starts output frontend. Actually, does nothing in this adapter</source>
          <target state="translated">출력 프론트 엔드를 시작합니다. 실제로이 어댑터에서는 아무 것도 수행하지 않습니다</target>
        </trans-unit>
        <trans-unit id="5c4cc5db4644a1db9a7aad9cc3b73380d09b02cc" translate="yes" xml:space="preserve">
          <source>Starts output frontend. Currently, does nothing</source>
          <target state="translated">출력 프론트 엔드를 시작합니다. 현재 아무것도하지 않습니다</target>
        </trans-unit>
        <trans-unit id="3d428ebff31904b2fdbcb58f14bc99040c944f8a" translate="yes" xml:space="preserve">
          <source>Starts rendering process enabling the output buffering</source>
          <target state="translated">출력 버퍼링을 가능하게하는 렌더링 프로세스를 시작합니다</target>
        </trans-unit>
        <trans-unit id="89e09a0690e1a63d448922b3964127bbad033603" translate="yes" xml:space="preserve">
          <source>Starts the profile of a SQL sentence</source>
          <target state="translated">SQL 문장의 프로파일을 시작합니다</target>
        </trans-unit>
        <trans-unit id="778fdd75ef3d94287ea7be09bfd9e0db4e8fa28a" translate="yes" xml:space="preserve">
          <source>Starts the session (if headers are already sent the session will not be started)</source>
          <target state="translated">세션을 시작합니다 (헤더가 이미 전송 된 경우 세션이 시작되지 않음)</target>
        </trans-unit>
        <trans-unit id="d7fda023501ccaaeb20b3a750eedce3a07a87f51" translate="yes" xml:space="preserve">
          <source>Starts the transaction</source>
          <target state="translated">거래를 시작합니다</target>
        </trans-unit>
        <trans-unit id="be77151d3a6699b35a47fe08a990118aca33ec1e" translate="yes" xml:space="preserve">
          <source>Static Content Helpers</source>
          <target state="translated">정적 컨텐츠 헬퍼</target>
        </trans-unit>
        <trans-unit id="cc8fa1ff5e259d5656442b1f291349b428328ff1" translate="yes" xml:space="preserve">
          <source>Static vs. Dynamic URIs</source>
          <target state="translated">정적 URI와 동적 URI</target>
        </trans-unit>
        <trans-unit id="906874db10cd0efc5d1264212a8f67f56b253183" translate="yes" xml:space="preserve">
          <source>Stop SQL operations are very useful if for example you want to implement some last-resource SQL injector checker:</source>
          <target state="translated">예를 들어 마지막 리소스 SQL 인젝터 검사기를 구현하려는 경우 SQL 중지 작업이 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="72c31196422485e49d967067a3395a915f30cd34" translate="yes" xml:space="preserve">
          <source>Stops output frontend</source>
          <target state="translated">출력 프론트 엔드 중지</target>
        </trans-unit>
        <trans-unit id="fa3eab99fb23235802d226fc9f80e0196f7da06c" translate="yes" xml:space="preserve">
          <source>Stops the active profile</source>
          <target state="translated">활성 프로파일을 중지합니다</target>
        </trans-unit>
        <trans-unit id="21214d70a3553a20be337342fc1b5b06121572c4" translate="yes" xml:space="preserve">
          <source>Stops the event preventing propagation.</source>
          <target state="translated">전파를 방지하는 이벤트를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="22116d670ed08e270d8c37842a6399ff3e53407c" translate="yes" xml:space="preserve">
          <source>Stops the frontend without store any cached content</source>
          <target state="translated">캐시 된 내용을 저장하지 않고 프론트 엔드를 중지합니다</target>
        </trans-unit>
        <trans-unit id="0ef789a3f158e41e77fe32317205bb0b6e67f069" translate="yes" xml:space="preserve">
          <source>Stops the middleware execution avoiding than other middlewares be executed</source>
          <target state="translated">다른 미들웨어를 실행하는 것보다 미들웨어 실행을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="4ae73fac483864f9b9b7ec6510194d9e457a7f00" translate="yes" xml:space="preserve">
          <source>Stores a reusable record in the internal list</source>
          <target state="translated">내부 목록에 재사용 가능한 레코드를 저장합니다</target>
        </trans-unit>
        <trans-unit id="27870b8d63ad17dca5cc1b760005a78891cc72dd" translate="yes" xml:space="preserve">
          <source>Stores cached content into all backends and stops the frontend</source>
          <target state="translated">캐시 된 컨텐츠를 모든 백엔드에 저장하고 프론트 엔드를 중지합니다</target>
        </trans-unit>
        <trans-unit id="7c2679018205e0799a9d5ede5f56a375d1b688b8" translate="yes" xml:space="preserve">
          <source>Stores cached content into the APC backend and stops the frontend</source>
          <target state="translated">캐시 된 컨텐츠를 APC 백엔드에 저장하고 프론트 엔드를 중지합니다</target>
        </trans-unit>
        <trans-unit id="cd1ca60db0703b091f4280ca022825d572807db9" translate="yes" xml:space="preserve">
          <source>Stores cached content into the backend and stops the frontend</source>
          <target state="translated">캐시 된 컨텐츠를 백엔드에 저장하고 프론트 엔드를 중지합니다</target>
        </trans-unit>
        <trans-unit id="2dea636e4b8a0cc14e7316c37ed52f868e286389" translate="yes" xml:space="preserve">
          <source>Stores cached content into the file backend and stops the frontend</source>
          <target state="translated">캐시 된 내용을 파일 백엔드에 저장하고 프론트 엔드를 중지합니다</target>
        </trans-unit>
        <trans-unit id="b5f20d5c44b468c5eaca660235aa24ccddc46086" translate="yes" xml:space="preserve">
          <source>Stores content in memory. Data is lost when the request is finished</source>
          <target state="translated">내용을 메모리에 저장합니다. 요청이 완료되면 데이터가 손실됩니다</target>
        </trans-unit>
        <trans-unit id="15cc08f8409907be1e4f91e76dab7e8f32ec6a40" translate="yes" xml:space="preserve">
          <source>Stores data in Redis</source>
          <target state="translated">Redis에 데이터를 저장</target>
        </trans-unit>
        <trans-unit id="5f2adab9f775b7f66a87e867cae87e172473aab1" translate="yes" xml:space="preserve">
          <source>Stores data in XCache</source>
          <target state="translated">XCache에 데이터를 저장</target>
        </trans-unit>
        <trans-unit id="97ffc3896709bb1bc2087f8fedea0e3957e9aca9" translate="yes" xml:space="preserve">
          <source>Stores data to Mongo Database</source>
          <target state="translated">Mongo 데이터베이스에 데이터 저장</target>
        </trans-unit>
        <trans-unit id="54ef813fde7dceb993cb9fee2707a208ae31805e" translate="yes" xml:space="preserve">
          <source>Stores data to a memcached server</source>
          <target state="translated">memcached 서버에 데이터를 저장합니다</target>
        </trans-unit>
        <trans-unit id="821f939c44272a76a86c9e10dc5a903c82819a03" translate="yes" xml:space="preserve">
          <source>Stores data to local plain files</source>
          <target state="translated">로컬 일반 파일에 데이터를 저장합니다</target>
        </trans-unit>
        <trans-unit id="97e48226d7609cb1c927e3823f35c798295c5448" translate="yes" xml:space="preserve">
          <source>Stores data to the Alternative PHP Cache (APC)</source>
          <target state="translated">대체 PHP 캐시 (APC)에 데이터 저장</target>
        </trans-unit>
        <trans-unit id="c0fb597f50f463f23298295e5edf4246cc871a9c" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in PHP files.</source>
          <target state="translated">모델 메타 데이터를 PHP 파일에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="b3f5e27bca280d6c7b036a63f263a9dfed53ef03" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in memory. Data will be erased when the request finishes</source>
          <target state="translated">모델 메타 데이터를 메모리에 저장합니다. 요청이 완료되면 데이터가 지워집니다</target>
        </trans-unit>
        <trans-unit id="410b8605ddf31d7c11b6a99fe3a2d6a344f65cb4" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in session. Data will erased when the session finishes. Meta-data are permanent while the session is active.</source>
          <target state="translated">세션에 모델 메타 데이터를 저장합니다. 세션이 끝나면 데이터가 지워집니다. 세션이 활성화되어있는 동안 메타 데이터는 영구적입니다.</target>
        </trans-unit>
        <trans-unit id="628e0032ac83b7d413ecab8f0a6fc13e6ad0eda3" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the APC cache. Data will erased if the web server is restarted</source>
          <target state="translated">모델 메타 데이터를 APC 캐시에 저장합니다. 웹 서버를 다시 시작하면 데이터가 지워집니다</target>
        </trans-unit>
        <trans-unit id="6c0caa2d754423d2eff7541716fe0df2a430a92a" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the Memcache.</source>
          <target state="translated">모델 메타 데이터를 Memcache에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="9fbf4f7616f82636fb774c96a045dff78841ac67" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the Redis.</source>
          <target state="translated">모델 메타 데이터를 Redis에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="9d76715afae8671a303ba04023bd4fb2045c02a8" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the XCache cache. Data will erased if the web server is restarted</source>
          <target state="translated">모델 메타 데이터를 XCache 캐시에 저장합니다. 웹 서버를 다시 시작하면 데이터가 지워집니다</target>
        </trans-unit>
        <trans-unit id="b474f0b6044b0ccd35dea616380da348f209e9da" translate="yes" xml:space="preserve">
          <source>Stores the messages in session</source>
          <target state="translated">세션에 메시지를 저장합니다</target>
        </trans-unit>
        <trans-unit id="35fa959d8b4c871f3aaec786b254843fd2116021" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in APC. This adapter is suitable for production</source>
          <target state="translated">구문 분석 된 주석을 APC에 저장합니다. 이 어댑터는 생산에 적합합니다</target>
        </trans-unit>
        <trans-unit id="6813e560de298fdee0841704994c7517923fc362" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in files. This adapter is suitable for production</source>
          <target state="translated">파싱 ​​된 주석을 파일에 저장합니다. 이 어댑터는 생산에 적합합니다</target>
        </trans-unit>
        <trans-unit id="8237773cfa25bf1ba3fb116d89d8410dbe0ede8c" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in memory. This adapter is the suitable development/testing</source>
          <target state="translated">구문 분석 된 주석을 메모리에 저장합니다. 이 어댑터는 적합한 개발 / 테스트입니다</target>
        </trans-unit>
        <trans-unit id="3141ba9d9f670f757e95aa1f7deefdba345bb829" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations to XCache. This adapter is suitable for production</source>
          <target state="translated">구문 분석 된 주석을 XCache에 저장합니다. 이 어댑터는 생산에 적합합니다</target>
        </trans-unit>
        <trans-unit id="fcc8ee9ff0fd170ce113cd3549956d264ec06f54" translate="yes" xml:space="preserve">
          <source>Storing Related Records</source>
          <target state="translated">관련 레코드 저장</target>
        </trans-unit>
        <trans-unit id="caa9d9430c4b2cca39a0288a4bb2d666fd0cf68d" translate="yes" xml:space="preserve">
          <source>Storing data in Session</source>
          <target state="translated">세션에 데이터 저장</target>
        </trans-unit>
        <trans-unit id="52778c4502611fe0399cd796754eaf9c6522f765" translate="yes" xml:space="preserve">
          <source>Storing data using models</source>
          <target state="translated">모델을 사용하여 데이터 저장</target>
        </trans-unit>
        <trans-unit id="2c58fe26d4f9ff645b20ee6b6ea9ddf8a1298dc2" translate="yes" xml:space="preserve">
          <source>Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods &amp;ldquo;&lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;md5&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&quot;http://php.net/manual/en/function.sha1.php&quot;&gt;sha1&lt;/a&gt;&amp;rdquo;. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as &lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;rainbow tables&lt;/a&gt;.</source>
          <target state="translated">암호를 일반 텍스트로 저장하는 것은 나쁜 보안 관행입니다. 데이터베이스에 액세스 할 수있는 사람은 즉시 모든 사용자 계정에 액세스 할 수 있으므로 무단 활동에 참여할 수 있습니다. 이를 해결하기 위해 많은 응용 프로그램에서 익숙한 단방향 해싱 방법 인 &quot; &lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;md5&lt;/a&gt; &quot;및 &quot; &lt;a href=&quot;http://php.net/manual/en/function.sha1.php&quot;&gt;sha1&lt;/a&gt; &quot;을 사용합니다. 그러나 하드웨어는 매일 진화하고 더 빨라지며 이러한 알고리즘은 무차별 대입 공격에 취약 해집니다. 이러한 공격을 &lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;레인보우 테이블&lt;/a&gt; 이라고도 합니다.</target>
        </trans-unit>
        <trans-unit id="f5a4c7d2d7c26b46d754c426a046a527c8a5530f" translate="yes" xml:space="preserve">
          <source>Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods &amp;ldquo;&lt;a href=&quot;https://php.net/manual/en/function.md5.php&quot;&gt;md5&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&quot;https://php.net/manual/en/function.sha1.php&quot;&gt;sha1&lt;/a&gt;&amp;rdquo;. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;rainbow tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4dcedb56a938b1e1a57014ee6255c14c1c6f63" translate="yes" xml:space="preserve">
          <source>Storing/Retrieving data in Session</source>
          <target state="translated">세션에서 데이터 저장 / 검색</target>
        </trans-unit>
        <trans-unit id="7d0ca5bbbfa5e2a24acfc853c016c25aa964363b" translate="yes" xml:space="preserve">
          <source>Strategies based on namespaces/prefixes are faster than the directories strategy</source>
          <target state="translated">네임 스페이스 / 접두사를 기반으로 한 전략은 디렉토리 전략보다 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="5a3da383da3c790dfba613e05cc8cb31718a93f2" translate="yes" xml:space="preserve">
          <source>Stream Logger</source>
          <target state="translated">스트림 로거</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="73380655baa7199522367c8dc81cddd93b39709d" translate="yes" xml:space="preserve">
          <source>String representation of the exception</source>
          <target state="translated">예외의 문자열 표현</target>
        </trans-unit>
        <trans-unit id="4988a588475323fe417945edd9fce105282066ec" translate="yes" xml:space="preserve">
          <source>Strings are automatically escaped using &lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot;&gt;PDO&lt;/a&gt;. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</source>
          <target state="translated">문자열은 &lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot;&gt;PDO를&lt;/a&gt; 사용하여 자동으로 이스케이프됩니다 . 이 함수는 연결 문자 집합을 고려하므로, 잘못된 문자 집합은 데이터를 저장하거나 검색 할 때 원하지 않는 효과를 생성하므로 연결 매개 변수 또는 데이터베이스 구성에서 올바른 문자 집합을 정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="02b5f962c2f2393f98c07bba6a4d8a45858e217b" translate="yes" xml:space="preserve">
          <source>Strings are automatically escaped using &lt;a href=&quot;https://php.net/manual/en/pdo.prepared-statements.php&quot;&gt;PDO&lt;/a&gt;. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31b334d852b22c74733a70e7260e6cc69dc7e46" translate="yes" xml:space="preserve">
          <source>Strings to be inserted into JavaScript code also must be properly escaped:</source>
          <target state="translated">JavaScript 코드에 삽입 할 문자열도 올바르게 이스케이프되어야합니다.</target>
        </trans-unit>
        <trans-unit id="53d55b5ff420c0816955984dd87581fd1e61ee87" translate="yes" xml:space="preserve">
          <source>Strip tags and encode HTML entities, including single and double quotes.</source>
          <target state="translated">작은 따옴표와 큰 따옴표를 포함하여 태그를 제거하고 HTML 엔티티를 인코딩하십시오.</target>
        </trans-unit>
        <trans-unit id="9482c5d5bfbed584fddcc442794dd8d3d9813064" translate="yes" xml:space="preserve">
          <source>Structure</source>
          <target state="translated">Structure</target>
        </trans-unit>
        <trans-unit id="688931069f0df1b7dcf0babe5808ec7762322394" translate="yes" xml:space="preserve">
          <source>Stylesheets</source>
          <target state="translated">Stylesheets</target>
        </trans-unit>
        <trans-unit id="c26b71ada72dda0caa098081b6d86bfd9925fa6e" translate="yes" xml:space="preserve">
          <source>Subtraction assignment</source>
          <target state="translated">빼기 할당</target>
        </trans-unit>
        <trans-unit id="0a9c88c404e840eea584b78c2e43d52616275ada" translate="yes" xml:space="preserve">
          <source>Sum examples:</source>
          <target state="translated">합계 예 :</target>
        </trans-unit>
        <trans-unit id="8e213dbbc62f3af9ac6d0d6b2a3e60481eb1e1aa" translate="yes" xml:space="preserve">
          <source>Supported parameter types include the following:</source>
          <target state="translated">지원되는 매개 변수 유형은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aab99de5b0e2aa1fe84b089a9be44764807aecd6" translate="yes" xml:space="preserve">
          <source>Syslog Logger</source>
          <target state="translated">Syslog 로거</target>
        </trans-unit>
        <trans-unit id="621ec9aeec552c6404f2e8b2fcbf58feeb4b482e" translate="yes" xml:space="preserve">
          <source>TENSILE</source>
          <target state="translated">TENSILE</target>
        </trans-unit>
        <trans-unit id="92db13efcb630c92ecf1220fd763e9d0e237c97e" translate="yes" xml:space="preserve">
          <source>Table name</source>
          <target state="translated">테이블 이름</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">목차</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="16dddf9b3f7ffb63ab6de9577fd8376b2c68584d" translate="yes" xml:space="preserve">
          <source>Tag Service</source>
          <target state="translated">태그 서비스</target>
        </trans-unit>
        <trans-unit id="05bd8a3e039c41ec95edf9ce86a05f8774ec9476" translate="yes" xml:space="preserve">
          <source>Tag::HTML5</source>
          <target state="translated">Tag::HTML5</target>
        </trans-unit>
        <trans-unit id="72368908a60e4e918e3f09acd19ec0d46f9bb494" translate="yes" xml:space="preserve">
          <source>Tag::form</source>
          <target state="translated">Tag::form</target>
        </trans-unit>
        <trans-unit id="1115dbd74d3d5e690eaf4587de1c857fe91944cb" translate="yes" xml:space="preserve">
          <source>Tag::getDI</source>
          <target state="translated">Tag::getDI</target>
        </trans-unit>
        <trans-unit id="7fe14034e30da467e00514aab9e5d1e5ecddea71" translate="yes" xml:space="preserve">
          <source>Tag::image</source>
          <target state="translated">Tag::image</target>
        </trans-unit>
        <trans-unit id="4e1c3a4df8f370f6ce1b0ee3f446c116d6171744" translate="yes" xml:space="preserve">
          <source>Tag::setDI</source>
          <target state="translated">Tag::setDI</target>
        </trans-unit>
        <trans-unit id="f86e8392aea55fea072ab303f4f0e657a02c3cb4" translate="yes" xml:space="preserve">
          <source>Take into consideration the following the next when renaming your columns:</source>
          <target state="translated">열 이름을 바꿀 때 다음을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="18bfaed5b1ce26bdb87c7de7ff4f25a4b55707ea" translate="yes" xml:space="preserve">
          <source>Take the following into consideration when using models in namespaces:</source>
          <target state="translated">네임 스페이스에서 모델을 사용할 때 다음 사항을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="29a99a5e779bd4cdcd72ffb92c34393fdfc58bff" translate="yes" xml:space="preserve">
          <source>Taking advantage of relationships</source>
          <target state="translated">관계 활용</target>
        </trans-unit>
        <trans-unit id="d08d6b799a189132167569c9b9575a9c3d1d03fb" translate="yes" xml:space="preserve">
          <source>Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:</source>
          <target state="translated">요청 본문에 삽입 된 JSON 문자열로 데이터를 가져 오려면 PHQL을 사용하여 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="9b211cc3fb0ce80a7b8879374863349b704f60f6" translate="yes" xml:space="preserve">
          <source>Tasks work similar to controllers. Any CLI application needs at least a MainTask and a mainAction and every task needs to have a mainAction which will run if no action is given explicitly.</source>
          <target state="translated">작업은 컨트롤러와 유사하게 작동합니다. 모든 CLI 애플리케이션에는 최소한 MainTask 및 mainAction이 필요하며 모든 태스크에는 조치가 명시 적으로 지정되지 않은 경우 실행될 mainAction이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="0f0e821c7af95b911b352f7ffcc3d6fdf25fbada" translate="yes" xml:space="preserve">
          <source>Tell Volt if the templates must be compiled in each request or only when they change</source>
          <target state="translated">각 요청에서 템플릿을 컴파일해야하는지 또는 변경 될 때만 템플릿을 컴파일해야하는지 Volt에 알립니다.</target>
        </trans-unit>
        <trans-unit id="51f8b618847e77f6c47abb3ec67bfc3fa3b1fb55" translate="yes" xml:space="preserve">
          <source>Tell if the resultset if fresh or an old one cached</source>
          <target state="translated">결과 집합이 신선하거나 오래된 것이면 캐시하십시오.</target>
        </trans-unit>
        <trans-unit id="07c68a987a2a82194395446be4e070aa26e043fb" translate="yes" xml:space="preserve">
          <source>Tells the event manager if it needs to collect all the responses returned by every registered listener in a single fire</source>
          <target state="translated">등록 된 모든 리스너가 리턴 한 모든 응답을 단일 화재로 수집해야하는지 이벤트 관리자에게 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="c53741f169658ed3efed0bde7907825a325adcc4" translate="yes" xml:space="preserve">
          <source>Tells to the query if only the first row in the resultset must be returned</source>
          <target state="translated">결과 집합의 첫 번째 행만 반환해야하는 경우 쿼리에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="9f0f081938b45532b9a06d2fe6ae91a6400ff65f" translate="yes" xml:space="preserve">
          <source>Template &amp;ldquo;layout.volt&amp;rdquo; extends &amp;ldquo;main.volt&amp;rdquo;</source>
          <target state="translated">템플릿 &quot;layout.volt&quot;는 &quot;main.volt&quot;를 확장합니다</target>
        </trans-unit>
        <trans-unit id="83835aacfc22a8fe5f638a1fe70168a059a2eaa0" translate="yes" xml:space="preserve">
          <source>Template Engines</source>
          <target state="translated">템플릿 엔진</target>
        </trans-unit>
        <trans-unit id="b48e7d23038b00a8503586cf24fabd3575478638" translate="yes" xml:space="preserve">
          <source>Template Engines help designers to create views without the use of a complicated syntax. Phalcon includes a powerful and fast templating engine called &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">템플릿 엔진을 사용하면 설계자가 복잡한 구문을 사용하지 않고도 뷰를 만들 수 있습니다. Phalcon에는 &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; 라는 강력하고 빠른 템플릿 엔진이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6b6bb3a1a939adefc8ad08e7880baf39f4c9d7b" translate="yes" xml:space="preserve">
          <source>Template Inheritance</source>
          <target state="translated">템플릿 상속</target>
        </trans-unit>
        <trans-unit id="710f6e8edf259591cf13929be325362a8d98ae50" translate="yes" xml:space="preserve">
          <source>Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.</source>
          <target state="translated">템플릿은 일반적인보기 코드를 공유하는 데 사용할 수있는보기입니다. 이들은 컨트롤러 레이아웃 역할을하므로 레이아웃 디렉토리에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd89ca4755469e05cfd31d69efe2d6ca435e3408" translate="yes" xml:space="preserve">
          <source>Templates can be rendered before the layout (using &lt;code&gt;$this-&amp;gt;view-&amp;gt;setTemplateBefore()&lt;/code&gt;) or they can be rendered after the layout (using &lt;code&gt;this-&amp;gt;view-&amp;gt;setTemplateAfter()&lt;/code&gt;). In the following example the template (layouts/common.phtml) is rendered after the main layout (layouts/posts.phtml):</source>
          <target state="translated">템플릿은 레이아웃 전에 렌더링 될 수 있고 ( &lt;code&gt;$this-&amp;gt;view-&amp;gt;setTemplateBefore()&lt;/code&gt; ) 레이아웃 후에 렌더링 할 수 있습니다 ( &lt;code&gt;this-&amp;gt;view-&amp;gt;setTemplateAfter()&lt;/code&gt; ). 다음 예제에서 템플릿 (layouts / common.phtml)은 기본 레이아웃 (layouts / posts.phtml) 후에 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="2d395054e7c6d2382fe6d3eb0027da7d8754d6ac" translate="yes" xml:space="preserve">
          <source>Temporarily stores the messages in session, then messages can be printed in the next request</source>
          <target state="translated">메시지를 세션에 임시 저장 한 후 다음 요청에서 메시지를 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f751f7ff2664c07ccd41030bdac28000de5b50eb" translate="yes" xml:space="preserve">
          <source>Ternary operator. The same as the PHP ternary operator</source>
          <target state="translated">삼항 연산자. PHP 3 진 연산자와 동일</target>
        </trans-unit>
        <trans-unit id="640ab2bae07bedc4c163f679a746f7ab7fb5d1fa" translate="yes" xml:space="preserve">
          <source>Test</source>
          <target state="translated">Test</target>
        </trans-unit>
        <trans-unit id="187d7f0e42c8896aec49083528a238217cfdec49" translate="yes" xml:space="preserve">
          <source>Testing for LibreSSL</source>
          <target state="translated">LibreSSL 테스트</target>
        </trans-unit>
        <trans-unit id="e267c714edaa7ae77c73ad90e2209e1c15637d60" translate="yes" xml:space="preserve">
          <source>Testing our Application</source>
          <target state="translated">응용 프로그램 테스트</target>
        </trans-unit>
        <trans-unit id="d25847938c5e0e592aa242dc61fe4085b0e63aeb" translate="yes" xml:space="preserve">
          <source>Testing your routes</source>
          <target state="translated">경로 테스트</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="fca3bec5e5be0110636120d1394f6f126524ecb0" translate="yes" xml:space="preserve">
          <source>Tests can be used to test if a variable has a valid expected value. The operator &amp;ldquo;is&amp;rdquo; is used to perform the tests:</source>
          <target state="translated">변수에 유효한 예상 값이 있는지 테스트하는 데 테스트를 사용할 수 있습니다. &quot;is&quot;연산자는 테스트를 수행하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="d7863878fdf9bfff5a31254f098f95b0ff954267" translate="yes" xml:space="preserve">
          <source>Text between double quotes or single quotes are handled as strings</source>
          <target state="translated">큰 따옴표 또는 작은 따옴표 사이의 텍스트는 문자열로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="a59b2b0709cc425881c7593938f321695ffaf092" translate="yes" xml:space="preserve">
          <source>Text::lower</source>
          <target state="translated">Text::lower</target>
        </trans-unit>
        <trans-unit id="c018d2906b3c08f2e733525a27d466d655a442e1" translate="yes" xml:space="preserve">
          <source>Text::upper</source>
          <target state="translated">Text::upper</target>
        </trans-unit>
        <trans-unit id="76bf04f1cd20d76a5d71687ac2e675f8ce2d4908" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, the underlying component of &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt;, it&amp;rsquo;s possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt; 의 기본 구성 요소 인 &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt; 덕분에 ORM이 생성 한 SQL 문을 프로파일 링하여 데이터베이스 작업의 성능을 분석 할 수 있습니다. 이를 통해 성능 문제를 진단하고 병목 현상을 발견 할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2b98bed80b3f36a2aa542bc1fc2e9c1fae99a60" translate="yes" xml:space="preserve">
          <source>Thanks to the hooks points provided by &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt; you can easily adapt your application to any URL schema:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher에서&lt;/em&gt;&lt;/a&gt; 제공하는 후크 포인트 덕분에 응용 프로그램을 모든 URL 스키마에 쉽게 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae1c98ebc213cfb61481f8af68db4b3630761d6e" translate="yes" xml:space="preserve">
          <source>That is the same as:</source>
          <target state="translated">그것은 다음과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="cd0ed545c494fce6e80c9d9d9ec09829aaa6bf14" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;_id&amp;rdquo; property is automatically updated with the &lt;a href=&quot;http://www.php.net/manual/en/class.mongoid.php&quot;&gt;MongoId&lt;/a&gt; object created by the driver:</source>
          <target state="translated">&quot;_id&quot;속성은 드라이버가 생성 한 &lt;a href=&quot;http://www.php.net/manual/en/class.mongoid.php&quot;&gt;MongoId&lt;/a&gt; 객체로 자동 업데이트됩니다 .</target>
        </trans-unit>
        <trans-unit id="01bceab06c21a4c6198886dc568d5e3ab46c3ece" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;create page&amp;rdquo; allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.</source>
          <target state="translated">&quot;페이지 만들기&quot;를 사용하면 제품 모델에서 유효성 검사를 적용하여 제품을 만들 수 있습니다. Phalcon은 필요한 경우 경고를 생성하는 null이 아닌 필드를 자동으로 확인합니다.</target>
        </trans-unit>
        <trans-unit id="9c148d8e93884d309cd23fc3895f5888152fa076" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;get&amp;rdquo; method indicates that the associated HTTP method is GET. The route &lt;code&gt;/say/hello/{name}&lt;/code&gt; also has a parameter &lt;code&gt;{$name}&lt;/code&gt; that is passed directly to the route handler (the anonymous function). Handlers are executed when a route is matched. A handler could be any callable item in the PHP userland. The following example shows how to define different types of handlers:</source>
          <target state="translated">&quot;get&quot;메소드는 연관된 HTTP 메소드가 GET임을 나타냅니다. 라우트 &lt;code&gt;/say/hello/{name}&lt;/code&gt; 에는 라우트 핸들러 (익명 함수)로 직접 전달 되는 매개 변수 &lt;code&gt;{$name}&lt;/code&gt; 있습니다. 처리기는 경로가 일치 할 때 실행됩니다. 핸들러는 PHP 사용자 영역에서 호출 가능한 항목 일 수 있습니다. 다음 예제는 다양한 유형의 핸들러를 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b5ff4b822f5ea91f1310d2c23ac4fa5605ccb4ef" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;notSave&amp;rdquo; event is triggered whenever a &amp;ldquo;creating&amp;rdquo; or &amp;ldquo;updating&amp;rdquo; action fails. We&amp;rsquo;re flashing the validation messages obtaining the &amp;ldquo;flash&amp;rdquo; service from the DI container. By doing this, we don&amp;rsquo;t have to print messages after each saving.</source>
          <target state="translated">&quot;notSave&quot;이벤트는 &quot;만들기&quot;또는 &quot;업데이트&quot;작업이 실패 할 때마다 트리거됩니다. DI 컨테이너에서 &quot;플래시&quot;서비스를받는 유효성 검사 메시지를 깜박입니다. 이렇게하면 저장 후 메시지를 인쇄 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="21d5938c8a72fc8550bee017d569e007c426e698" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;notSaved&amp;rdquo; event is triggered every time that a &amp;ldquo;create&amp;rdquo; or &amp;ldquo;update&amp;rdquo; action fails. So we&amp;rsquo;re flashing the validation messages obtaining the &amp;ldquo;flash&amp;rdquo; service from the DI container. By doing this, we don&amp;rsquo;t have to print messages after each save.</source>
          <target state="translated">&quot;notSaved&quot;이벤트는 &quot;create&quot;또는 &quot;update&quot;작업이 실패 할 때마다 트리거됩니다. DI 컨테이너에서 &quot;플래시&quot;서비스를 얻는 검증 메시지를 플래싱하고 있습니다. 이렇게하면 저장 후 메시지를 인쇄 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="77ee47a33f445448789241b680893db76e26dfa3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;robots_similar&amp;rdquo; table has the function to define what robots are similar to others:</source>
          <target state="translated">&quot;robots_similar&quot;테이블에는 다른 로봇과 유사한 로봇을 정의하는 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea2b86e4bda0f5783c49938a5dd65ba12505b41c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;search&amp;rdquo; action has two behaviors. When accessed via POST, it performs a search based on the data sent from the form but when accessed via GET it moves the current page in the paginator. To differentiate HTTP methods, we check it using the &lt;a href=&quot;request&quot;&gt;&lt;em&gt;Request&lt;/em&gt;&lt;/a&gt; component:</source>
          <target state="translated">&quot;검색&quot;작업에는 두 가지 동작이 있습니다. POST를 통해 액세스하면 양식에서 전송 된 데이터를 기반으로 검색을 수행하지만 GET을 통해 액세스하면 페이지에서 현재 페이지를 이동합니다. HTTP 메소드를 차별화하기 위해 &lt;a href=&quot;request&quot;&gt;&lt;em&gt;Request&lt;/em&gt;&lt;/a&gt; 컴포넌트를 사용하여 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="1fd6f2ce905ee0f83b80c6cd55d49bc9e6be69e4" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;break&amp;rsquo; and &amp;lsquo;continue&amp;rsquo; statements can be used to exit from a loop or force an iteration in the current block:</source>
          <target state="translated">'break'및 'continue'문을 사용하여 루프를 종료하거나 현재 블록에서 반복을 강제 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7499d27ef92b27826affe3e8405eb660574f1381" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;elseif&amp;rsquo; control flow structure can be used together with if to emulate a &amp;lsquo;switch&amp;rsquo; block:</source>
          <target state="translated">'elseif'제어 흐름 구조는 '스위치'블록을 에뮬레이션 할 경우와 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79027116a502e75b3e7ca66a8e8178ad2315a3a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_acl_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Acl\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own ACL adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_acl_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ ACL이 \ AdapterInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 ACL 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="6fc695aa57ffcffb35d9ed406ed8ef47c4236453" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_annotations_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Annotations\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own annotations adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_annotations_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ 주석 \ AdapterInterface&lt;/em&gt;&lt;/a&gt; 인터페이스 기존 자신의 주석 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="248a79e8b769c05279c613c3945adbd3c2256768" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_cache_backendinterface&quot;&gt;&lt;em&gt;Phalcon\Cache\BackendInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own backend adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_cache_backendinterface&quot;&gt;&lt;em&gt;Phalcon \ 캐시 \ BackendInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 백엔드 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="49de24ecb8b52454235e50683c74c5591fa127df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_cache_frontendinterface&quot;&gt;&lt;em&gt;Phalcon\Cache\FrontendInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own frontend adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_cache_frontendinterface&quot;&gt;&lt;em&gt;Phalcon \ 캐시 \ FrontendInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 프론트 엔드 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="bc25ef4deef406445a89d074c16b5b0db3672dd7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_db_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Db\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own database adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_db_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ DB \ AdapterInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 데이터베이스 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="8824e2b7e246a51b87e48c5be39a10a091f23929" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_db_dialectinterface&quot;&gt;&lt;em&gt;Phalcon\Db\DialectInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own database dialects or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_db_dialectinterface&quot;&gt;&lt;em&gt;Phalcon \ DB \ DialectInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 데이터베이스 방언을 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="008b3684f5fa467ac98159ab816074f7a370ff6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_diinterface&quot;&gt;&lt;em&gt;Phalcon\DiInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_diinterface&quot;&gt;&lt;em&gt;Phalcon \ DiInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 현재를 Phalcon에 의해 제공되는 하나를 교체하는 자신의 DI를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="a13ddac50478c3fca52015f18575edb94fbc33de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_events_managerinterface&quot;&gt;&lt;em&gt;Phalcon\Events\ManagerInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own EventsManager replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_events_managerinterface&quot;&gt;&lt;em&gt;Phalcon \ 이벤트 \ ManagerInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 Phalcon에 의해 제공되는 하나를 교체하는 자신의 EventsManager를 만들 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="edc3844ac3db04e78a2efa08615718a6fe9f28f3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_filter&quot;&gt;&lt;em&gt;Phalcon\Filter&lt;/em&gt;&lt;/a&gt; component provides a set of commonly used filters and data sanitizing helpers. It provides object-oriented wrappers around the PHP filter extension.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_filter&quot;&gt;&lt;em&gt;Phalcon \ 필터&lt;/em&gt;&lt;/a&gt; 구성 요소는 헬퍼 살균 일반적으로 사용되는 필터와 데이터 세트를 제공합니다. PHP 필터 확장을 중심으로 객체 지향 래퍼를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="01420fd643f8ddfab533a90c23d356dbea80761d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_filterinterface&quot;&gt;&lt;em&gt;Phalcon\FilterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own filtering service replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_filterinterface&quot;&gt;&lt;em&gt;Phalcon \ FilterInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 Phalcon에 의해 제공되는 하나를 교체하는 자신의 필터링 서비스를 만들기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="9ee65ba2023052cf456fc6668f9730107fb481cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_image_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Image\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own image adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_image_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ 이미지 \ AdapterInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 이미지 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="44c4566bcb1677a0e419a1616e34fe09abff0ad7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_logger_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Logger\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own logger adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_logger_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ 로거 \ AdapterInterface&lt;/em&gt;&lt;/a&gt; 인터페이스 기존 자신의 로거 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="5db0e924eeefb9ef71e9ef79c1aaa59a1021499c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_logger_formatterinterface&quot;&gt;&lt;em&gt;Phalcon\Logger\FormatterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own logger formatter or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_logger_formatterinterface&quot;&gt;&lt;em&gt;Phalcon \ 로거 \ FormatterInterface&lt;/em&gt;&lt;/a&gt; 인터페이스 기존 자신의 로거 포맷을 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="139a2bbf2913924532bcfdaab0e081c6dd7d3134" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_dispatcherinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\DispatcherInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own dispatcher replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_dispatcherinterface&quot;&gt;&lt;em&gt;Phalcon \ MVC \ DispatcherInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 Phalcon에 의해 제공되는 하나를 교체하는 자신의 디스패처를 만들기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="5c49976e68ee45ed7d4ec3e27a84268f62ef9161" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_routerinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\RouterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own router replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_routerinterface&quot;&gt;&lt;em&gt;Phalcon \ MVC \ RouterInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 Phalcon에 의해 제공되는 하나를 교체하는 자신의 라우터를 만들 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="fcf451dadaa517d822373c3d935aabf7bdce9fdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_urlinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\UrlInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own URL generator replacing the one provided by Phalcon.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_urlinterface&quot;&gt;&lt;em&gt;Phalcon \ MVC \ UrlInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 Phalcon에 의해 제공되는 하나를 교체하는 자신의 URL 생성기를 만들기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="e5c3fd9626b63b05835e4803e55dd6de0e3d47a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_paginator_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Paginator\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own paginator adapters or extend the existing ones:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_paginator_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ 매기기 \ AdapterInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 매기기 어댑터를 만들거나 확장하기 위해 구현해야합니다 :</target>
        </trans-unit>
        <trans-unit id="89796f9f04a1ddb2276d8ef55876111d13e26967" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_security_random&quot;&gt;&lt;em&gt;Phalcon\Security\Random&lt;/em&gt;&lt;/a&gt; class makes it really easy to generate lots of types of random data.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_security_random&quot;&gt;&lt;em&gt;Phalcon \ 보안 \ 임의의&lt;/em&gt;&lt;/a&gt; 클래스는 정말 쉽게 임의의 데이터 유형을 많이 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c48ba54a9d6e0ed604b72e7fef2e2b80ad96fcb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_session_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Session\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own session adapters or extend the existing ones.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_session_adapterinterface&quot;&gt;&lt;em&gt;Phalcon \ 세션 \ AdapterInterface의&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 세션 어댑터를 만들거나 확장하기 위해 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="3ccbb2db292060343b3570cfd0bc29bb70272a32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_translate_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Translate\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own translate adapters or extend the existing ones:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_translate_adapterinterface&quot;&gt;&lt;em&gt;\ AdapterInterface의 번역 \ Phalcon&lt;/em&gt;&lt;/a&gt; 인터페이스는 기존 자신의 변환 어댑터를 만들거나 확장하기 위해 구현해야합니다 :</target>
        </trans-unit>
        <trans-unit id="6f9c60d2d1799da10bc8985b7bda1380905ea75f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; (FastCGI Process Manager) is usually used to allow &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; to process PHP files. Nowadays, &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; is bundled with any Unix PHP distribution. Phalcon + &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; + &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; provides a powerful set of tools that offer maximum performance for your PHP applications.</source>
          <target state="translated">&lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; (FastCGI 프로세스 관리자)는 일반적으로 허용하는 데 사용됩니다 &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx에를&lt;/a&gt; 처리 PHP 파일을. 요즘 &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; 은 모든 Unix PHP 배포판과 함께 제공됩니다. Phalcon + &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; + &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; 은 PHP 응용 프로그램에 최대 성능을 제공하는 강력한 도구 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bd3ff4d4e355c38a955d2387cd7004604c00c6d4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; (FastCGI Process Manager) is usually used to allow &lt;a href=&quot;https://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; to process PHP files. Nowadays, &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; is bundled with any Unix PHP distribution. Phalcon + &lt;a href=&quot;https://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; + &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; provides a powerful set of tools that offer maximum performance for your PHP applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0ebd4185cec6f6fc2d8e775f34f681d31d3dec" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.php.net/manual/en/class.collator.php&quot;&gt;Collator&lt;/a&gt; class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:</source>
          <target state="translated">&lt;a href=&quot;http://www.php.net/manual/en/class.collator.php&quot;&gt;의 Collator&lt;/a&gt; 클래스는 적절한 로케일 구분 정렬 순서 부에 대한 지원과 문자열 비교 기능을 제공합니다. 이 클래스의 사용법에 대한 아래 예를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a9e772f2e18a90221f33af09ccbe01c99e32982f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/phalcon/php-site&quot;&gt;PHP alternative site&lt;/a&gt; is an example of implementing the caching of fragments.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/php-site&quot;&gt;PHP 대체 사이트&lt;/a&gt; 단편의 캐싱을 구현 한 예이다.</target>
        </trans-unit>
        <trans-unit id="b1f23ef9c07fd7fb2d94749f844c61009067dd08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tools&quot;&gt;&lt;em&gt;Phalcon Developer Tools&lt;/em&gt;&lt;/a&gt; provides scripts to manage migrations (generation, running and rollback).</source>
          <target state="translated">&lt;a href=&quot;tools&quot;&gt;&lt;em&gt;Phalcon 개발자 도구&lt;/em&gt;&lt;/a&gt; (세대, 실행 및 롤백) 마이그레이션을 관리하는 스크립트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f0b9efe7eac181ed3392a383d5e1ce5b6c8e6bf8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tutorial-invo&quot;&gt;&lt;em&gt;INVO&lt;/em&gt;&lt;/a&gt; tutorial shows how to take advantage of dispatching events implementing a security filter with &lt;a href=&quot;acl&quot;&gt;&lt;em&gt;Acl&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;tutorial-invo&quot;&gt;&lt;em&gt;INVO의&lt;/em&gt;&lt;/a&gt; 튜토리얼 쇼 방법에 보안 필터 구현 파견 이벤트를 활용하는 &lt;a href=&quot;acl&quot;&gt;&lt;em&gt;ACL을&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="31d25365acc53c3c39e27ac49ffb32efe5232ef7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$currentPage&lt;/code&gt; variable controls the page to be displayed. The &lt;code&gt;$paginator-&amp;gt;getPaginate()&lt;/code&gt; returns a &lt;code&gt;$page&lt;/code&gt; object that contains the paginated data. It can be used for generating the pagination:</source>
          <target state="translated">&lt;code&gt;$currentPage&lt;/code&gt; 변수는 표시 할 페이지를 제어합니다. &lt;code&gt;$paginator-&amp;gt;getPaginate()&lt;/code&gt; 반환 &lt;code&gt;$page&lt;/code&gt; 페이지가 매겨진 데이터를 포함하는 개체를. 페이지 매김을 생성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f451a7a01be383fb6f5d3a78b71d81e282befc52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$page&lt;/code&gt; object also contains navigation data:</source>
          <target state="translated">&lt;code&gt;$page&lt;/code&gt; 객체는 네비게이션 데이터를 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="0d72027df2636f41333c12a2a5328aefa5e420b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$page&lt;/code&gt; object has the following attributes:</source>
          <target state="translated">&lt;code&gt;$page&lt;/code&gt; 객체는 다음과 같은 특성이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9e89feded734eb468077b751566a7bfd7bc9dd9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NONE&lt;/code&gt; constant ignores the original image&amp;rsquo;s ratio. Neither width and height are required. If a dimension is not specified, the original dimension will be used. If the new proportions differ from the original proportions, the image may be distorted and stretched.</source>
          <target state="translated">&lt;code&gt;NONE&lt;/code&gt; 의 상수는 원래 이미지의 비율을 무시한다. 너비와 높이가 필요하지 않습니다. 치수를 지정하지 않으면 원래 치수가 사용됩니다. 새 비율이 원래 비율과 다른 경우 이미지가 왜곡되고 늘어날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="963ebaed1e76b8d66d5f70709513eb0b12801623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Db::query()&lt;/code&gt; returns an instance of &lt;a href=&quot;../api/phalcon_db_result_pdo&quot;&gt;&lt;em&gt;Phalcon\Db\Result\Pdo&lt;/em&gt;&lt;/a&gt;. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.</source>
          <target state="translated">&lt;code&gt;Phalcon\Db::query()&lt;/code&gt; 의 인스턴스를 반환 &lt;a href=&quot;../api/phalcon_db_result_pdo&quot;&gt;&lt;em&gt;Phalcon \ DB \ 결과 \ PDO를&lt;/em&gt;&lt;/a&gt; . 이러한 객체는 반환 된 결과 집합과 관련된 모든 기능, 즉 순회, 특정 레코드 찾기, 개수 등을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="7c31e3cbbb1ec7bdff29033d6f1c50304601e0ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Collection::delete()&lt;/code&gt; method allows you to delete a document. You can use it as follows:</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Collection::delete()&lt;/code&gt; 메소드를 사용하면 문서를 삭제할 수 있습니다. 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e294d1f17663ff8a329817a651be22765db80a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Collection::save()&lt;/code&gt; method allows you to create/update documents according to whether they already exist in the collection associated with a model. The &lt;code&gt;save()&lt;/code&gt; method is called internally by the create and update methods of &lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;Phalcon\Mvc\Collection&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Collection::save()&lt;/code&gt; 메소드는 그들이 이미 모델과 관련된 컬렉션에 있는지 여부에 따라 / 업데이트 문서를 만들 수 있습니다. &lt;code&gt;save()&lt;/code&gt; 메소드가의 생성 및 업데이트 방법에 의해 내부적으로 호출 &lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;Phalcon \ MVC \ 컬렉션&lt;/em&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="378098a63a48af6a9d6c7c649c464195d868701f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Model::delete()&lt;/code&gt; method allows to delete a record. You can use it as follows:</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Model::delete()&lt;/code&gt; 메소드는 기록을 삭제할 수 있습니다. 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da5d5a58620443cbf7213a635ae112abf46ccf8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; method allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt;. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.</source>
          <target state="translated">&lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; 메소드가 당신이 이미 모델과 관련된 테이블에 존재 여부에 따라 / 업데이트 기록을 만들 수 있습니다. save 메소드는 &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt; 의 create 및 update 메소드에 의해 내부적으로 호출됩니다 . 이 작업이 예상대로 작동하려면 엔터티에서 기본 키를 올바르게 정의하여 레코드를 업데이트 또는 생성해야하는지 여부를 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="9ca380c73bb35350a9e4dec6c400d4eda63d04e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Tag::form()&lt;/code&gt; method receives only one parameter for instance, a relative URI to a controller/action in the application.</source>
          <target state="translated">&lt;code&gt;Phalcon\Tag::form()&lt;/code&gt; 메소드는 애플리케이션의 제어기 / 작용을 예를 들어 하나의 파라미터, 상대 URI를 수신한다.</target>
        </trans-unit>
        <trans-unit id="3e0b30339709b1c2cc64d626a0c56b3493311c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SessionController::startAction&lt;/code&gt; function (app/controllers/SessionController.php) has the task of validating the data entered in the form including checking for a valid user in the database:</source>
          <target state="translated">&lt;code&gt;SessionController::startAction&lt;/code&gt; 기능 (응용 프로그램 / 컨트롤러 / SessionController.php)는 데이터베이스의 유효한 사용자에 대한 검사를 포함하여 양식에 입력 된 데이터를 검증하는 작업이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="2969e182118ba9160fd3715be75ef65ba3ebeb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_()&lt;/code&gt; method is returning the translated string based on the index passed. Some strings need to incorporate placeholders for calculated data i.e. Hello %name%. These placeholders can be replaced with passed parameters in the &lt;code&gt;_()&lt;/code&gt; method. The passed parameters are in the form of a key/value array, where the key matches the placeholder name and the value is the actual data to be replaced:</source>
          <target state="translated">&lt;code&gt;_()&lt;/code&gt; 메서드는 전달 된 인덱스를 기반으로 번역 된 문자열을 반환합니다. 일부 문자열은 계산 된 데이터 (예 : Hello % name %)의 자리 표시자를 포함해야합니다. 이 자리 표시자는 &lt;code&gt;_()&lt;/code&gt; 메서드 에서 전달 된 매개 변수로 바꿀 수 있습니다 . 전달 된 매개 변수는 키 / 값 배열의 형식으로, 키는 자리 표시 자 이름과 일치하고 값은 대체 할 실제 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="d129377c0bd6815a802ad3db286298e6eb3186ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_getTranslation()&lt;/code&gt; method is available for all actions that require translations. The &lt;code&gt;$t&lt;/code&gt; variable is passed to the views, and with it, we can translate strings in that layer:</source>
          <target state="translated">&lt;code&gt;_getTranslation()&lt;/code&gt; 메소드는 번역을 필요로하는 모든 행동에 대해 사용할 수 있습니다. &lt;code&gt;$t&lt;/code&gt; 변수의 의견에 전달되고, 그것으로, 우리는 그 계층에서 문자열을 번역 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="fae4d9b0996e71ae01a8407a92cb723bd2ddb1e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add()&lt;/code&gt; method receives a pattern that can optionally have predefined placeholders and regular expression modifiers. All the routing patterns must start with a forward slash character (/). The regular expression syntax used is the same as the &lt;a href=&quot;http://www.php.net/manual/en/book.pcre.php&quot;&gt;PCRE regular expressions&lt;/a&gt;. Note that, it is not necessary to add regular expression delimiters. All route patterns are case-insensitive.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; 메소드는 임의로 미리 자리 정규식 수정을 할 수있는 패턴을 수신한다. 모든 라우팅 패턴은 슬래시 문자 (/)로 시작해야합니다. 사용 된 정규식 구문은 &lt;a href=&quot;http://www.php.net/manual/en/book.pcre.php&quot;&gt;PCRE 정규식&lt;/a&gt; 과 동일 합니다 . 정규식 구분 기호를 추가 할 필요는 없습니다. 모든 경로 패턴은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="214ec92b15cc2b9a220ea18d7ff96c41b6c5369d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow()&lt;/code&gt; method designates that a particular role has granted access to a particular resource. The &lt;code&gt;deny()&lt;/code&gt; method does the opposite.</source>
          <target state="translated">&lt;code&gt;allow()&lt;/code&gt; 는 특정 역할이 특정 자원에 대한 액세스 권한이 부여되었는지 방법 나타낸다. &lt;code&gt;deny()&lt;/code&gt; 메소드는 반대한다.</target>
        </trans-unit>
        <trans-unit id="602c51283debd0ca3ec78eeb2bf073f357e9f521" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur()&lt;/code&gt; method takes a single parameter - an integer between 0 (no effect) and 100 (very blurry):</source>
          <target state="translated">&lt;code&gt;blur()&lt;/code&gt; 메소드는 단일 매개 변수를 - 0 (효과 없음) 100 (매우 흐린) 사이의 정수 :</target>
        </trans-unit>
        <trans-unit id="616853c00129638bdf7764ef5dea80502a276951" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMessages()&lt;/code&gt; method can be overridden in a model to replace/translate the default messages generated automatically by the ORM:</source>
          <target state="translated">&lt;code&gt;getMessages()&lt;/code&gt; 방법은 ORM에 의해 자동으로 생성되는 기본 메시지를 / 대체 번역 모델에서 재정의 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9c3d614b069fe50e3463f7360500b1a78853b6c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize()&lt;/code&gt; method is only called if the &amp;lsquo;beforeExecuteRoute&amp;rsquo; event is executed with success. This avoid that application logic in the initializer cannot be executed without authorization.</source>
          <target state="translated">&lt;code&gt;initialize()&lt;/code&gt; 'beforeExecuteRoute'이벤트가 성공적으로 실행되면 메소드는 호출된다. 따라서 권한 부여없이 이니셜 라이저의 응용 프로그램 논리를 실행할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="094113803fcd3e519956b1c6037393f8ed966cb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize()&lt;/code&gt; method is only called once during the request, it&amp;rsquo;s intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can use the &lt;code&gt;onConstruct()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;initialize()&lt;/code&gt; 요청시,이 응용 프로그램 내에서 생성 된 모델의 모든 인스턴스를 신청 초기화를 수행하기 위해 의도 한 번 메소드는 호출된다. 작성된 모든 인스턴스에 대해 초기화 태스크를 수행하려면 &lt;code&gt;onConstruct()&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8c841d83372e3b4388a080f64e8e8e8a7e557cb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputJs()&lt;/code&gt; and &lt;code&gt;outputCss()&lt;/code&gt; methods are available to generate the necessary HTML code according to each type of resources. You can override this method or print the resources manually in the following way:</source>
          <target state="translated">&lt;code&gt;outputJs()&lt;/code&gt; 및 &lt;code&gt;outputCss()&lt;/code&gt; 메소드는 자원의 각 유형에 따라 필요한 HTML 코드를 생성 할 수 있습니다. 이 방법을 무시하거나 다음과 같은 방법으로 리소스를 수동으로 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8827777279c34a41f52717e074d92ee380cef7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;partial()&lt;/code&gt; method does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:</source>
          <target state="translated">&lt;code&gt;partial()&lt;/code&gt; 메소드는 뜻이 부분의 범위에 있는지 변수 / 파라미터의 배열 인 제 2 파라미터를 수락하지 :</target>
        </trans-unit>
        <trans-unit id="4949ea5e5a4562f6aa5f40d56ae930b104e0f3ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pixelate()&lt;/code&gt; method takes a single parameter - the higher the integer, the more pixelated the image becomes:</source>
          <target state="translated">&lt;code&gt;pixelate()&lt;/code&gt; 메소드는 단일 파라미터 얻어 - 더 많은 이미지 픽셀 화된다 클수록 정수 :</target>
        </trans-unit>
        <trans-unit id="1757ebefe50f25661654ec55178596b924935115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;selectReadConnection()&lt;/code&gt; method is called to choose the right connection, this method intercepts any new query executed:</source>
          <target state="translated">&lt;code&gt;selectReadConnection()&lt;/code&gt; 메소드가 바로 연결, 새로운 쿼리가 실행이 방법의 차단을 선택하기 위해 호출된다 :</target>
        </trans-unit>
        <trans-unit id="af29239dee3c130d50b965bdc6c999b1487f9634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setVar()&lt;/code&gt; method allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the &lt;code&gt;$postId&lt;/code&gt; parameter to the respective view template.</source>
          <target state="translated">&lt;code&gt;setVar()&lt;/code&gt; 방법은 뷰 템플릿으로 사용할 수 있도록 우리가 필요에 따라보기 변수를 만들 수 있습니다. 위의 예는 &lt;code&gt;$postId&lt;/code&gt; 매개 변수를 각보기 템플리트 에 전달하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a65c782374f2ae72e81cee1da77cd3699008d634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sharpen()&lt;/code&gt; method takes a single parameter - an integer between 0 (no effect) and 100 (very sharp):</source>
          <target state="translated">&lt;code&gt;sharpen()&lt;/code&gt; 메소드는 단일 매개 변수를 - 0 (효과 없음) 100 (매우 날카로운) 사이의 정수 :</target>
        </trans-unit>
        <trans-unit id="a9ea6012711c89cb795bdf7ffed343307d803854" translate="yes" xml:space="preserve">
          <source>The ACL now have knowledge of the existing controllers and their related actions. Role &amp;ldquo;Users&amp;rdquo; has access to all the resources of both frontend and backend. The role &amp;ldquo;Guests&amp;rdquo; only has access to the public area:</source>
          <target state="translated">ACL은 이제 기존 컨트롤러 및 관련 조치에 대한 지식을 갖습니다. 역할 &quot;사용자&quot;는 프런트 엔드 및 백엔드의 모든 리소스에 액세스 할 수 있습니다. &quot;게스트&quot;역할은 공용 영역에만 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20573a1f950447f4fc418663b03aa4e7efb2589d" translate="yes" xml:space="preserve">
          <source>The API consists of the following methods:</source>
          <target state="translated">API는 다음 방법으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="0a5e4009919ae3c60011e43378018ea5a19209ef" translate="yes" xml:space="preserve">
          <source>The Dispatch Loop</source>
          <target state="translated">디스패치 루프</target>
        </trans-unit>
        <trans-unit id="bfe1632cbbbd1aeb51120af60301c4e5eea4b59b" translate="yes" xml:space="preserve">
          <source>The IR is converted to valid SQL according to the database system associated to the model</source>
          <target state="translated">모델과 연관된 데이터베이스 시스템에 따라 IR이 유효한 SQL로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="8f6d5fe3939c4ac95f99ed020a571dcd0ca6c48c" translate="yes" xml:space="preserve">
          <source>The MVC Architecture</source>
          <target state="translated">MVC 아키텍처</target>
        </trans-unit>
        <trans-unit id="ee5ee8733bfe4d9dd27fef0440919c5216014a98" translate="yes" xml:space="preserve">
          <source>The ORM also provides Horizontal Sharding facilities, by allowing you to implement a &amp;lsquo;shard&amp;rsquo; selection according to the current query conditions:</source>
          <target state="translated">ORM은 또한 현재 쿼리 조건에 따라 '샤드'선택을 구현할 수 있도록하여 수평 샤딩 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e63769e92de028b2301a820b04302c1ddf23d8aa" translate="yes" xml:space="preserve">
          <source>The ORM automatically escapes the input preventing SQL injections so we only need to pass the request to the &lt;code&gt;save()&lt;/code&gt; method.</source>
          <target state="translated">ORM은 SQL 인젝션을 방지하는 입력을 자동으로 이스케이프하므로 요청을 &lt;code&gt;save()&lt;/code&gt; 메소드 로 전달하기 만하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="3e1abd3779dcdd8a216fdca33a393a42a898748c" translate="yes" xml:space="preserve">
          <source>The ORM automatically validate the not null columns present in the mapped table</source>
          <target state="translated">ORM은 맵핑 된 테이블에 존재하는 널이 아닌 열을 자동으로 유효성 검증합니다.</target>
        </trans-unit>
        <trans-unit id="8f43729f0ddcb7d1f7a386bf25b144028b89dc0a" translate="yes" xml:space="preserve">
          <source>The ORM provides an API to create your own behaviors. A behavior must be a class implementing the &lt;a href=&quot;../api/phalcon_mvc_model_behaviorinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\BehaviorInterface&lt;/em&gt;&lt;/a&gt;. Also, &lt;a href=&quot;../api/phalcon_mvc_model_behavior&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Behavior&lt;/em&gt;&lt;/a&gt; provides most of the methods needed to ease the implementation of behaviors.</source>
          <target state="translated">ORM은 자신의 행동을 만들기위한 API를 제공합니다. 동작은 &lt;a href=&quot;../api/phalcon_mvc_model_behaviorinterface&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ BehaviorInterface를&lt;/em&gt;&lt;/a&gt; 구현하는 클래스 여야합니다 . 또한 &lt;a href=&quot;../api/phalcon_mvc_model_behavior&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Behavior&lt;/em&gt;&lt;/a&gt; 는 &lt;em&gt;동작&lt;/em&gt; 을 쉽게 구현하는 데 필요한 대부분의 &lt;em&gt;방법을&lt;/em&gt; 제공합니다.</target>
        </trans-unit>
        <trans-unit id="72b8f5a7fccc687d1fd8317b210cd603f2999806" translate="yes" xml:space="preserve">
          <source>The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:</source>
          <target state="translated">ORM은 독립적 인 열 맵을 지원하므로 개발자는 모델의 다른 열 이름을 테이블의 이름과 사용할 수 있습니다. Phalcon은 새 열 이름을 인식하고 데이터베이스의 각 열과 일치하도록 이름을 바꿉니다. 이것은 코드의 모든 쿼리에 대해 걱정할 필요없이 데이터베이스의 필드 이름을 바꾸어야 할 때 유용한 기능입니다. 모델에서 열 맵을 변경하면 나머지가 처리됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bff718c5a5a8b130ef20666b4a47aebc3241d3d9" translate="yes" xml:space="preserve">
          <source>The PHPunit helper file</source>
          <target state="translated">PHPunit 도우미 파일</target>
        </trans-unit>
        <trans-unit id="bf6dec633862a48857130651309b77c6e67f6972" translate="yes" xml:space="preserve">
          <source>The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system</source>
          <target state="translated">PHQL은 구문 분석되어 데이터베이스 시스템에 의해 구현 된 SQL과는 독립적 인 IR (Intermediate Representation)로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="cbf50e9263ee70e10f3dafaba154cd39a2429f4d" translate="yes" xml:space="preserve">
          <source>The Phalcon PHP extension is required to run Phalcon Tools. If you haven&amp;rsquo;t installed it yet, please see the &lt;a href=&quot;install&quot;&gt;&lt;em&gt;Installation&lt;/em&gt;&lt;/a&gt; section for instructions.</source>
          <target state="translated">Phalcon 도구를 실행하려면 Phalcon PHP 확장이 필요합니다. 아직 설치하지 않았다면 &lt;a href=&quot;install&quot;&gt;&lt;em&gt;설치&lt;/em&gt;&lt;/a&gt; 섹션에서 지침을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbb8870a54d36c8926d46e328a8cd7f68027e74e" translate="yes" xml:space="preserve">
          <source>The Phalcon extension should appear as part of the output:</source>
          <target state="translated">Phalcon 확장은 출력의 일부로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="3f6059c4243d966e2bd10e6221e3d12686cc894d" translate="yes" xml:space="preserve">
          <source>The Phalcon\Filter component provides a set of commonly needed data filters. It provides object oriented wrappers to the php filter extension. Also allows the developer to define his/her own filters</source>
          <target state="translated">Phalcon \ Filter 구성 요소는 일반적으로 필요한 데이터 필터 세트를 제공합니다. PHP 필터 확장에 객체 지향 래퍼를 제공합니다. 또한 개발자가 자신의 필터를 정의 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="4c96474e86551b2bb2ad2874c280f54c99a4dce8" translate="yes" xml:space="preserve">
          <source>The Products controller</source>
          <target state="translated">제품 컨트롤러</target>
        </trans-unit>
        <trans-unit id="d084942fc15393170283c68aa493d216fc5e9931" translate="yes" xml:space="preserve">
          <source>The Products model</source>
          <target state="translated">제품 모델</target>
        </trans-unit>
        <trans-unit id="7b84d7d242437b8ad059adc6cbe50673a1604d4c" translate="yes" xml:space="preserve">
          <source>The Response component automatically shows the date in GMT timezone as expected in an Expires header.</source>
          <target state="translated">응답 구성 요소는 Expires 헤더에 예상대로 GMT 시간대로 날짜를 자동으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="4dac4842bfd245df80e9e2e906baaca72614e53a" translate="yes" xml:space="preserve">
          <source>The RobotsPart model can be changed to demonstrate this feature:</source>
          <target state="translated">이 기능을 보여주기 위해 RobotsPart 모델을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88f4f59230105e7ac7590612263649c4a1405188" translate="yes" xml:space="preserve">
          <source>The Search Form</source>
          <target state="translated">검색 양식</target>
        </trans-unit>
        <trans-unit id="e389ba38a75d52dc02fa2e78aa50c7e886cbeaaf" translate="yes" xml:space="preserve">
          <source>The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.</source>
          <target state="translated">Volt 컴파일러를 사용하면 기존 기능에 더 많은 기능, 테스트 또는 필터를 추가하여 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f908d39a4b7e07929be8bcf4713a26dbf4f0f43a" translate="yes" xml:space="preserve">
          <source>The above auto-loader lacks any kind of security. If a function mistakenly launches the auto-loader and a malicious prepared string is used as parameter this would allow to execute any file accessible by the application:</source>
          <target state="translated">위의 자동 로더에는 모든 종류의 보안이 없습니다. 함수가 실수로 자동 로더를 시작하고 악의적 인 준비된 문자열이 매개 변수로 사용되면 응용 프로그램에서 액세스 할 수있는 모든 파일을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1afb3126a0d13465741161e97e508446121bdee3" translate="yes" xml:space="preserve">
          <source>The above class implements the method &amp;lsquo;compileFunction&amp;rsquo; which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn&amp;rsquo;t return an string the compilation is done using the default behavior provided by the engine.</source>
          <target state="translated">위의 클래스는 템플릿에서 함수 호출을 컴파일하기 전에 호출되는 'compileFunction'메소드를 구현합니다. 확장의 목적은 컴파일 할 함수가 템플릿에서 호출 할 수있는 PHP 함수인지 확인하는 것입니다. 확장 프로그램의 이벤트는 유효한 PHP 코드를 반환해야합니다. 이는 Volt에서 생성 된 코드 대신 컴파일 결과로 사용됩니다. 이벤트가 문자열을 반환하지 않으면 엔진에서 제공하는 기본 동작을 사용하여 컴파일이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="9720c9600f499b56f47dab7827ec2a059d7d9fa3" translate="yes" xml:space="preserve">
          <source>The above code produces the following:</source>
          <target state="translated">위의 코드는 다음을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="641e222caaf8eb49dae693949f9eb22119b80a56" translate="yes" xml:space="preserve">
          <source>The above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.</source>
          <target state="translated">위의 코드는 마스터 레코드 (로봇)가 삭제 된 경우 참조 된 모든 레코드 (파트)를 삭제하도록 설정되었습니다.</target>
        </trans-unit>
        <trans-unit id="998ee14c2c1e8630250397f0b08c5c615346c4b8" translate="yes" xml:space="preserve">
          <source>The above example changes slightly (especially in terms of configuration) when we are using a Memcached backend.</source>
          <target state="translated">위의 예제는 Memcached 백엔드를 사용할 때 (특히 구성 측면에서) 약간 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="640608739372a9af2b9ee4537a2576930fe25c19" translate="yes" xml:space="preserve">
          <source>The above example has been simplified for academic purposes. A developer can improve it to inject any kind of dependency or model in actions before be executed.</source>
          <target state="translated">위의 예는 학문적 목적으로 단순화되었습니다. 개발자는 실행 전에 모든 종류의 종속성 또는 모델을 작업에 주입하도록 개선 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8970b88176bf860cd77533b16c929217f6e1bce8" translate="yes" xml:space="preserve">
          <source>The above example performs a validation using the built-in validator &amp;ldquo;InclusionIn&amp;rdquo;. It checks the value of the field &amp;ldquo;type&amp;rdquo; in a domain list. If the value is not included in the method then the validator will fail and return false.</source>
          <target state="translated">위의 예는 내장 유효성 검사기 &quot;InclusionIn&quot;을 사용하여 유효성 검사를 수행합니다. 도메인 목록에서 &quot;type&quot;필드의 값을 확인합니다. 값이 메소드에 포함되지 않으면 유효성 검증 기가 실패하고 false를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="1cddbdb647c9cf3d91ab7760eb687ea08af15055" translate="yes" xml:space="preserve">
          <source>The above example produces:</source>
          <target state="translated">위 예제는 다음을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7baa14afb1f4a2376ce7b38c378d92022ee78db6" translate="yes" xml:space="preserve">
          <source>The above findByRawSql could be used as follows:</source>
          <target state="translated">위의 findByRawSql은 다음과 같이 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33e998d267e4b2b372efe4046de348544b11e369" translate="yes" xml:space="preserve">
          <source>The above recommended project structure was generated:</source>
          <target state="translated">위의 권장 프로젝트 구조가 생성되었습니다.</target>
        </trans-unit>
        <trans-unit id="739f94fc0e64c663df6c8e309d02dc4171ba3d81" translate="yes" xml:space="preserve">
          <source>The adapters available are:</source>
          <target state="translated">사용 가능한 어댑터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5dcb2f1b16c2056033a570a80c8b0558d26b28e6" translate="yes" xml:space="preserve">
          <source>The aliases allow us to rename both relationships to solve these problems:</source>
          <target state="translated">별명을 사용하면 두 관계의 이름을 바꿔 이러한 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2f1609839d5b29f0c21013dd97ccda8358c834f" translate="yes" xml:space="preserve">
          <source>The annotation @Column supports the following parameters:</source>
          <target state="translated">@Column 주석은 다음 매개 변수를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="758f73022349b310629caf499314a3f520e72d48" translate="yes" xml:space="preserve">
          <source>The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.</source>
          <target state="translated">어노테이션 읽기 프로세스는 매우 빠르지 만 성능상의 이유로 구문 분석 된 어노테이션을 어댑터를 사용하여 저장하는 것이 좋습니다. 어댑터는 처리 된 주석을 캐시하여 주석을 계속해서 구문 분석하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="5c76e8172935d5b329f08c5b299accff8c615d00" translate="yes" xml:space="preserve">
          <source>The annotations are cached only in memory. When the request ends the cache is cleaned reloading the annotations in each request. This adapter is suitable for a development stage</source>
          <target state="translated">주석은 메모리에만 캐시됩니다. 요청이 종료되면 캐시가 정리되어 각 요청에서 주석을 다시로드합니다. 이 어댑터는 개발 단계에 적합합니다</target>
        </trans-unit>
        <trans-unit id="6489c89aa81d883b6f5e7d30115e951632e6e54c" translate="yes" xml:space="preserve">
          <source>The annotations can be defined in the following way:</source>
          <target state="translated">주석은 다음과 같은 방법으로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="217a0fa6ec74990c9fc55a740b87f1fcd9517720" translate="yes" xml:space="preserve">
          <source>The annotations strategy could be set up this way:</source>
          <target state="translated">주석 전략은 다음과 같이 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b1a1d81b44d757bcb9eb9f88e7f4d77325623bd" translate="yes" xml:space="preserve">
          <source>The application is divided into two parts, a frontend, where visitors can sign up the service and a backend where administrative users can manage registered users. Both frontend and backend are combined in a single module.</source>
          <target state="translated">응용 프로그램은 방문자가 서비스에 가입 할 수있는 프론트 엔드와 관리 사용자가 등록 된 사용자를 관리 할 수있는 백엔드의 두 부분으로 나뉩니다. 프론트 엔드와 백엔드 모두 단일 모듈로 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="a103c5e2df3df30008218b767a0f8bef72a0c5df" translate="yes" xml:space="preserve">
          <source>The application is divided into two parts: a frontend and a backend. The frontend is a public area where visitors can receive information about INVO and request contact information. The backend is an administrative area where registered users can manage their products and customers.</source>
          <target state="translated">응용 프로그램은 프런트 엔드와 백엔드의 두 부분으로 나뉩니다. 프런트 엔드는 방문자가 INVO에 대한 정보를 받고 연락처 정보를 요청할 수있는 공용 영역입니다. 백엔드는 등록 된 사용자가 제품과 고객을 관리 할 수있는 관리 영역입니다.</target>
        </trans-unit>
        <trans-unit id="27f0e60f6d37271ac41d122aa11b30652511bcfe" translate="yes" xml:space="preserve">
          <source>The array syntax is also allowed to register services:</source>
          <target state="translated">배열 구문은 서비스를 등록 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9a0d5d2766bf8fe44bf74cc2c452ada5b1b3a13" translate="yes" xml:space="preserve">
          <source>The array-syntax is allowed to easily set/get services in the internal services container:</source>
          <target state="translated">배열 구문을 사용하면 내부 서비스 컨테이너에서 서비스를 쉽게 설정 / 취득 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="abb8526b44ef24e06e2347eba17fba2e572b137c" translate="yes" xml:space="preserve">
          <source>The associated entity added to the form in the initialization and custom user options are passed to the form constructor:</source>
          <target state="translated">초기화 및 사용자 정의 사용자 옵션에서 양식에 추가 된 관련 엔티티는 양식 생성자로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="32e1a1370216ee1811d0355624c36261b1d13de3" translate="yes" xml:space="preserve">
          <source>The associative array passed in &lt;code&gt;Phalcon\Db::createTable()&lt;/code&gt; can have the possible keys:</source>
          <target state="translated">&lt;code&gt;Phalcon\Db::createTable()&lt;/code&gt; 전달 된 연관 배열 은 가능한 키를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86d4c1e8b7362f7b37fb25781cecab08320eb2e5" translate="yes" xml:space="preserve">
          <source>The attribute &amp;lsquo;flashSession&amp;rsquo; is how the flash was previously set into the dependency injection container. You need to start the &lt;a href=&quot;session&quot;&gt;&lt;em&gt;session&lt;/em&gt;&lt;/a&gt; first to successfully use the flashSession messenger.</source>
          <target state="translated">'flashSession'속성은 플래시가 이전에 의존성 주입 컨테이너에 설정된 방식입니다. flashSession 메신저를 성공적으로 사용하려면 먼저 &lt;a href=&quot;session&quot;&gt;&lt;em&gt;세션&lt;/em&gt;&lt;/a&gt; 을 시작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d814687055e28b0a1816b4042f54e0cf7b63bb38" translate="yes" xml:space="preserve">
          <source>The autoloader registers a set of directories in which the application will look for the classes that it will eventually need.</source>
          <target state="translated">오토로더는 애플리케이션이 결국 필요한 클래스를 찾을 디렉토리 세트를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="57392386089b122414f354b2c8a4aab9ebcab9a9" translate="yes" xml:space="preserve">
          <source>The available frontend adapters that are used as interfaces or input sources to the cache are:</source>
          <target state="translated">캐시에 대한 인터페이스 또는 입력 소스로 사용되는 사용 가능한 프론트 엔드 어댑터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="54ed46c150718473d8504c434e30cd577b337e90" translate="yes" xml:space="preserve">
          <source>The available options are:</source>
          <target state="translated">사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cd780c7581f0647f835fbe37ae0fc02775cf0ed9" translate="yes" xml:space="preserve">
          <source>The available options for generating migrations are:</source>
          <target state="translated">마이그레이션 생성에 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="492a577b9447713db2560afab6b2ac84e1874693" translate="yes" xml:space="preserve">
          <source>The available query options are:</source>
          <target state="translated">사용 가능한 쿼리 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="43062c2300a1e8a68f6d57cbee5a67f7f9cd70ad" translate="yes" xml:space="preserve">
          <source>The available render levels are:</source>
          <target state="translated">사용 가능한 렌더링 수준은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dcf1b99c8bb38ac468afca8f27e6d74afd3a4c5e" translate="yes" xml:space="preserve">
          <source>The backend adapters available to store cache data are:</source>
          <target state="translated">캐시 데이터를 저장하는 데 사용할 수있는 백엔드 어댑터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a34dcd281686b81342de96a0ead185c94fbba819" translate="yes" xml:space="preserve">
          <source>The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren&amp;rsquo;t logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:</source>
          <target state="translated">백엔드는 등록 된 사용자 만 액세스 할 수있는 개인 영역입니다. 따라서 등록 된 사용자 만이 컨트롤러에 액세스 할 수 있는지 확인해야합니다. 응용 프로그램에 로그인하지 않은 상태에서 예를 들어 제품 컨트롤러 (비공개)에 액세스하려고하면 다음과 같은 화면이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="bbc47f6cb36efc8d9ccba4db4548bdedd6989c6f" translate="yes" xml:space="preserve">
          <source>The behavior of this component is based on the PHP&amp;rsquo;s capability of &lt;a href=&quot;http://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;autoloading classes&lt;/a&gt;. If a class that does not yet exist is used in any part of the code, a special handler will try to load it. &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; serves as the special handler for this operation. By loading classes on a need-to-load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;lazy initialization&lt;/a&gt;.</source>
          <target state="translated">이 컴포넌트의 동작은 PHP의 &lt;a href=&quot;http://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;자동로드 클래스&lt;/a&gt; 기능을 기반으로합니다 . 아직 존재하지 않는 클래스가 코드의 어느 부분에서나 사용되면 특수 핸들러가로드를 시도합니다. &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt; 는이 작업을위한 특수 처리기 역할을합니다. 로드 할 때마다 클래스를로드하면 필요한 파일에 대한 읽기만 수행되므로 전체 성능이 향상됩니다. 이 기술을 &lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;지연 초기화&lt;/a&gt; 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="4fb5d0b8bd53310e53ada398faaacd9577c2baa5" translate="yes" xml:space="preserve">
          <source>The behavior of this component is based on the PHP&amp;rsquo;s capability of &lt;a href=&quot;http://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;autoloading classes&lt;/a&gt;. If a class that does not yet exist is used in any part of the code, a special handler will try to load it. &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; serves as the special handler for this operation. By loading classes on a need-to-load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;lazy initialization&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2d350d8d50d11db8a1ead417f1eb124b2f5e9e" translate="yes" xml:space="preserve">
          <source>The best solution here is to implement background jobs. The web application puts jobs into a queue and which will be processed separately.</source>
          <target state="translated">여기서 가장 좋은 솔루션은 백그라운드 작업을 구현하는 것입니다. 웹 응용 프로그램은 작업을 대기열에 넣으며 별도로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="3f7f304234b60ec1a67f38ce4676252110b1cedb" translate="yes" xml:space="preserve">
          <source>The best way to use this guide is to follow each step in turn. You can get the complete code &lt;a href=&quot;https://github.com/phalcon/tutorial&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이 안내서를 사용하는 가장 좋은 방법은 각 단계를 차례로 따르는 것입니다. &lt;a href=&quot;https://github.com/phalcon/tutorial&quot;&gt;여기&lt;/a&gt; 에서 전체 코드를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3e4b2b54f278b9b747c7d0d271bff5e48ff50235" translate="yes" xml:space="preserve">
          <source>The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.</source>
          <target state="translated">양방향 관계는 두 모델 모두에서 관계를 구축하고 각 모델은 다른 모델의 역관계를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="eae0c2b78cdb25e725d441899d1f8fba5aaf5fa7" translate="yes" xml:space="preserve">
          <source>The browser output should remain the same. The &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; static component is automatically created when the action execution has ended. Learn more about &lt;a href=&quot;views&quot;&gt;&lt;em&gt;views usage here&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">브라우저 출력은 동일하게 유지되어야합니다. &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ MVC \보기&lt;/em&gt;&lt;/a&gt; 작업의 실행이 종료 될 때 정적 구성 요소가 자동으로 생성됩니다. &lt;a href=&quot;views&quot;&gt;&lt;em&gt;여기에서 뷰 사용&lt;/em&gt;&lt;/a&gt; 에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="b129a27dc5a0498cb8eb1af9902614353c32d2c7" translate="yes" xml:space="preserve">
          <source>The bury command puts a job into the &amp;ldquo;buried&amp;rdquo; state. Buried jobs are put into a FIFO linked list and will not be touched by the server again until a client kicks them with the &amp;ldquo;kick&amp;rdquo; command.</source>
          <target state="translated">bury 명령은 작업을 &quot;매장&quot;상태로 만듭니다. 묻힌 작업은 FIFO 연결 목록에 포함되며 클라이언트가 &quot;kick&quot;명령으로 작업을 시작할 때까지 서버가 다시 연락하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="335f0ffe68bcc5fc2746f4bb42dbaa9723a35ed6" translate="yes" xml:space="preserve">
          <source>The caching is done by the &lt;a href=&quot;cache&quot;&gt;&lt;em&gt;Phalcon\Cache&lt;/em&gt;&lt;/a&gt; component via the view component. Learn more about how this integration works in the section &lt;a href=&quot;views&quot;&gt;&lt;em&gt;&amp;ldquo;Caching View Fragments&amp;rdquo;&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">캐싱은 &lt;a href=&quot;cache&quot;&gt;&lt;em&gt;Phalcon \ Cache&lt;/em&gt;&lt;/a&gt; 구성 요소가 뷰 구성 요소를 통해 수행합니다. &lt;a href=&quot;views&quot;&gt;&lt;em&gt;&amp;ldquo;Caching View Fragments&amp;rdquo;&lt;/em&gt;&lt;/a&gt; 섹션에서이 통합이 어떻게 작동하는지 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="ff855939b43755bb953ed6627ef485ac1db5a0e9" translate="yes" xml:space="preserve">
          <source>The caching process is divided into 2 parts:</source>
          <target state="translated">캐싱 프로세스는 두 부분으로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="a26592d06aade67b6e4cd592b7700ec609f9454a" translate="yes" xml:space="preserve">
          <source>The cipher is one of the encryption algorithms supported by openssl. You can see a list &lt;a href=&quot;http://www.php.net/manual/en/function.openssl-get-cipher-methods.php&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">암호는 openssl이 지원하는 암호화 알고리즘 중 하나입니다. &lt;a href=&quot;http://www.php.net/manual/en/function.openssl-get-cipher-methods.php&quot;&gt;여기&lt;/a&gt; 에서 목록을 볼 수 있습니다</target>
        </trans-unit>
        <trans-unit id="4b092ff6523de7f09bb773159a22676adf4cb05b" translate="yes" xml:space="preserve">
          <source>The class is called &amp;ldquo;ProductsMigration_100&amp;rdquo;. Suffix 100 refers to the version 1.0.0. &lt;code&gt;morphTable()&lt;/code&gt; receives an associative array with 4 possible sections:</source>
          <target state="translated">이 클래스는&amp;ldquo;ProductsMigration_100&amp;rdquo;이라고합니다. 접미어 100은 버전 1.0.0을 나타냅니다. &lt;code&gt;morphTable()&lt;/code&gt; 은 4 개의 가능한 섹션이있는 연관 배열을받습니다.</target>
        </trans-unit>
        <trans-unit id="88009ad71950018345710cfc6b1fb63c7e9f9cda" translate="yes" xml:space="preserve">
          <source>The code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.</source>
          <target state="translated">위의 코드에는 유효성 검사, 필터 및 추가 검사가 없지만 디스패처의 정상적인 작업 흐름을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a33e8692c452d874d4895193f46dd7917c2c3082" translate="yes" xml:space="preserve">
          <source>The column map is used in the case to get real column name</source>
          <target state="translated">열 맵은 실제 열 이름을 얻기 위해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d4fbb33db4dfe92b8516d704ce0f4e73bc091263" translate="yes" xml:space="preserve">
          <source>The column&amp;rsquo;s length if any</source>
          <target state="translated">열의 길이</target>
        </trans-unit>
        <trans-unit id="f21c33ab37e48ce86c42f76a057a6e8c4917c18f" translate="yes" xml:space="preserve">
          <source>The column&amp;rsquo;s type (string, integer, decimal, boolean)</source>
          <target state="translated">열 유형 (문자열, 정수, 10 진수, 부울)</target>
        </trans-unit>
        <trans-unit id="240b986000f547b691054ee0ddf1eb97f650dfa1" translate="yes" xml:space="preserve">
          <source>The command &amp;ldquo;create-controller&amp;rdquo; generates controller skeleton structures. It&amp;rsquo;s important to invoke this command inside a directory that already has a Phalcon project.</source>
          <target state="translated">&amp;ldquo;create-controller&amp;rdquo;명령은 컨트롤러 스켈레톤 구조를 생성합니다. Phalcon 프로젝트가 이미있는 디렉토리에서이 명령을 호출하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="22758567a992d04bd6d3bec79b5c5d086494ffe5" translate="yes" xml:space="preserve">
          <source>The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:</source>
          <target state="translated">컴파일 경로는 위의 옵션에 따라 생성되며, 개발자가 컴파일 경로를 자유롭게 정의하려면 익명 함수를 사용하여 해당 경로를 생성 할 수 있습니다.이 함수는 views 디렉토리의 템플리트에 대한 상대 경로를 수신합니다. 다음 예제는 컴파일 경로를 동적으로 변경하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0a2f323cf07e70e7303548eedb3c6cc854c97c55" translate="yes" xml:space="preserve">
          <source>The component &lt;a href=&quot;../api/phalcon_translate&quot;&gt;&lt;em&gt;Phalcon\Translate&lt;/em&gt;&lt;/a&gt; aids in creating multilingual applications. Applications using this component, display content in different languages, based on the user&amp;rsquo;s chosen language supported by the application.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_translate&quot;&gt;&lt;em&gt;Phalcon \ Translate&lt;/em&gt;&lt;/a&gt; 구성 요소 는 다국어 응용 프로그램을 만드는 데 도움이됩니다. 이 구성 요소를 사용하는 응용 프로그램은 응용 프로그램에서 지원하는 사용자가 선택한 언어에 따라 다른 언어로 내용을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="037f3a0d2dcaf8618f010ebbb25b1032b4480e8f" translate="yes" xml:space="preserve">
          <source>The component can now simply access the service it requires when it needs it, if it does not require a service it is not even initialized, saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.</source>
          <target state="translated">이제 구성 요소는 필요할 때 필요한 서비스에 간단히 액세스 할 수 있으며, 서비스가 필요하지 않은 경우 초기화되지 않아 리소스를 절약 할 수 있습니다. 구성 요소가 이제 분리되었습니다. 예를 들어 연결이 생성되는 방식, 동작 또는 연결의 다른 측면을 대체 할 수 있으며 이는 구성 요소에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="26cd35b196908d68d844d7d8503bb274711d34a4" translate="yes" xml:space="preserve">
          <source>The controller &amp;lsquo;PostsController&amp;rsquo; might look like this:</source>
          <target state="translated">컨트롤러 'PostsController'는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="62e98a9d7859dd3d36707fa5bfb5a60a1a54d28e" translate="yes" xml:space="preserve">
          <source>The controller classes must have the suffix &amp;ldquo;Controller&amp;rdquo; and controller actions must have the suffix &amp;ldquo;Action&amp;rdquo;. If you access the application from your browser, you should see something like this:</source>
          <target state="translated">컨트롤러 클래스에는 접미사 &quot;Controller&quot;가 있어야하고 컨트롤러 작업에는 접미사 &quot;Action&quot;이 있어야합니다. 브라우저에서 응용 프로그램에 액세스하면 다음과 같은 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="27bc7f79ecc8f708a6973080cbae902f382666c1" translate="yes" xml:space="preserve">
          <source>The controller looks like:</source>
          <target state="translated">컨트롤러는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="695080a458c8dc299a21674792e6db9d7d25c88e" translate="yes" xml:space="preserve">
          <source>The controllers provide the &amp;ldquo;flow&amp;rdquo; between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.</source>
          <target state="translated">컨트롤러는 모델과 뷰 간의 &quot;흐름&quot;을 제공합니다. 컨트롤러는 웹 브라우저에서 들어오는 요청을 처리하고 데이터 모델을 조사한 후 해당 데이터를 뷰로 전달하여 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a043bde7e802ebf9e0287f39524cf9fa525fbb23" translate="yes" xml:space="preserve">
          <source>The controllers provide the &amp;ldquo;flow&amp;rdquo; between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. &lt;a href=&quot;controllers&quot;&gt;&lt;em&gt;Learn more&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">컨트롤러는 모델과 뷰 간의 &quot;흐름&quot;을 제공합니다. 컨트롤러는 웹 브라우저에서 들어오는 요청을 처리하고 데이터 모델을 조사한 후 해당 데이터를 뷰로 전달하여 표시합니다. &lt;a href=&quot;controllers&quot;&gt;&lt;em&gt;더 알아보기&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8ec1481b94a60e812c15283d7aeaa12db79cc8c" translate="yes" xml:space="preserve">
          <source>The core of all the work of the controller occurs when handle() is invoked:</source>
          <target state="translated">handle ()이 호출 될 때 컨트롤러의 모든 작업의 ​​핵심이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b75761bd813f44788ddffff0dbe11c55ec23f29c" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (0 indexed)</source>
          <target state="translated">루프의 현재 반복 (0 인덱스)</target>
        </trans-unit>
        <trans-unit id="2ae957376dd8bf52f87cded346b35444762a2644" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (1 indexed)</source>
          <target state="translated">루프의 현재 반복 (1 색인)</target>
        </trans-unit>
        <trans-unit id="e27ba8c82917a6694e416f728ca89e006ddad051" translate="yes" xml:space="preserve">
          <source>The current page</source>
          <target state="translated">현재 페이지</target>
        </trans-unit>
        <trans-unit id="265fe3c06f41ac0ab4c6a5bf9a0d86a4dde10c06" translate="yes" xml:space="preserve">
          <source>The data added to the session (&lt;code&gt;$this-&amp;gt;session&lt;/code&gt;) are available throughout the application, while persistent (&lt;code&gt;$this-&amp;gt;persistent&lt;/code&gt;) can only be accessed in the scope of the current class.</source>
          <target state="translated">세션에 추가 된 데이터 ( &lt;code&gt;$this-&amp;gt;session&lt;/code&gt; )는 애플리케이션 전체에서 사용 가능하지만 지속적 ( &lt;code&gt;$this-&amp;gt;persistent&lt;/code&gt; )은 현재 클래스 범위 내에서만 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e31876e03480aa2decc195335f0bd9132b1635c0" translate="yes" xml:space="preserve">
          <source>The data delete is similar to update. The &amp;ldquo;id&amp;rdquo; passed as parameter indicates what robot must be deleted:</source>
          <target state="translated">데이터 삭제는 업데이트와 유사합니다. 매개 변수로 전달 된 &quot;id&quot;는 삭제해야하는 로봇을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="31af5c90088ff139199cd6f1b57cbc89a1e15aff" translate="yes" xml:space="preserve">
          <source>The data found is bound to the form by passing the model as first parameter. Thanks to this, the user can change any value and then sent it back to the database through to the &amp;ldquo;save&amp;rdquo; action:</source>
          <target state="translated">발견 된 데이터는 모델을 첫 번째 매개 변수로 전달하여 양식에 바인드됩니다. 덕분에 사용자는 모든 값을 변경 한 다음 &quot;저장&quot;작업을 통해 데이터베이스로 다시 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9dac5debd217f13ac2afe1ea766dd5d3fae5c641" translate="yes" xml:space="preserve">
          <source>The data update is similar to insertion. The &amp;ldquo;id&amp;rdquo; passed as parameter indicates what robot must be updated:</source>
          <target state="translated">데이터 업데이트는 삽입과 유사합니다. 매개 변수로 전달 된 &quot;id&quot;는 업데이트해야하는 로봇을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="47b66defe420a397d1f8646e9628469ad4fb127f" translate="yes" xml:space="preserve">
          <source>The default component must be replaced in the service container:</source>
          <target state="translated">서비스 컨테이너에서 기본 구성 요소를 교체해야합니다.</target>
        </trans-unit>
        <trans-unit id="d8e9847c195df851fa955bb534e7c7bb655507e5" translate="yes" xml:space="preserve">
          <source>The delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.</source>
          <target state="translated">분리 문자는 응용 프로그램이 현재 실행중인 데이터베이스 시스템에 따라 유효한 분리 문자로 동적으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="8ecf8153b66916aa27a468057e37f66328bf67a0" translate="yes" xml:space="preserve">
          <source>The developer also has the option of define the metadata manually. This strategy overrides any strategy set in the metadata manager. New columns added/modified/removed to/from the mapped table must be added/modified/removed also for everything to work properly.</source>
          <target state="translated">개발자는 메타 데이터를 수동으로 정의 할 수도 있습니다. 이 전략은 메타 데이터 관리자에 설정된 모든 전략보다 우선합니다. 모든 것이 제대로 작동하려면 매핑 된 테이블에 추가 / 수정 / 제거 된 새 열을 추가 / 수정 / 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="56fd8a0a0599b40cd24a6a9dc32384edcf560fab" translate="yes" xml:space="preserve">
          <source>The dispatch loop allows us to forward the execution flow to another controller/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.</source>
          <target state="translated">디스패치 루프를 통해 실행 흐름을 다른 컨트롤러 / 액션으로 전달할 수 있습니다. 이는 사용자가 특정 옵션에 액세스 할 수 있는지, 다른 화면으로 사용자를 리디렉션하거나 단순히 코드를 재사용 할 수 있는지 확인하는 데 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="acbcc5d4d02d8ab92f318c20169bc48bbb28e29c" translate="yes" xml:space="preserve">
          <source>The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the previous example only one action was executed. Now we&amp;rsquo;ll see how the &lt;code&gt;forward()&lt;/code&gt; method can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller/action.</source>
          <target state="translated">디스패치 루프는 실행될 조치가 없을 때까지 디스패처 내에서 실행됩니다. 이전 예제에서는 하나의 작업 만 실행되었습니다. 이제 우리는 &lt;code&gt;forward()&lt;/code&gt; 메소드가 다른 컨트롤러 / 액션으로 실행을 전달함으로써 디스패치 루프에서보다 복잡한 오퍼레이션 흐름을 제공 할 수있는 방법 을 살펴볼 것 입니다.</target>
        </trans-unit>
        <trans-unit id="76886823153907bf40544494702447e5e1a325cd" translate="yes" xml:space="preserve">
          <source>The dispatcher will look for a &amp;ldquo;PostsController&amp;rdquo; and its action &amp;ldquo;showAction&amp;rdquo;. A simple controller file for this example:</source>
          <target state="translated">디스패처는 &quot;PostsController&quot;및 해당 조치 &quot;showAction&quot;을 찾습니다. 이 예제의 간단한 컨트롤러 파일 :</target>
        </trans-unit>
        <trans-unit id="4ef74f56eabf997798500112d0972ca4617268dc" translate="yes" xml:space="preserve">
          <source>The easier way to make a model react to events is to implement a method with the same name of the event in the model&amp;rsquo;s class:</source>
          <target state="translated">모델이 이벤트에 반응하도록하는 더 쉬운 방법은 모델 클래스에서 동일한 이벤트 이름을 가진 메소드를 구현하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="71cbbae88315b0023f0684d64734ca4cfbdf1c29" translate="yes" xml:space="preserve">
          <source>The easiest way to achieve this is by adding a static method to the model that chooses the right cache to be used:</source>
          <target state="translated">이를 수행하는 가장 쉬운 방법은 사용할 올바른 캐시를 선택하는 정적 메소드를 모델에 추가하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="782c40dc49cc31f80a5496eee22fdcbd14e30824" translate="yes" xml:space="preserve">
          <source>The elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null.</source>
          <target state="translated">캐시에 추가 된 요소는 키로 고유하게 식별됩니다. 파일 백엔드의 경우 키는 실제 파일 이름입니다. 캐시에서 데이터를 검색하려면 고유 키를 사용하여 데이터를 호출하면됩니다. 키가 존재하지 않으면 get 메소드는 널을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="375a36e5f73924eaf00aa8d999e1dbf8d1b2eb03" translate="yes" xml:space="preserve">
          <source>The else clause is also supported:</source>
          <target state="translated">else 절도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="11a863ac19bdc8bc671da5a6a86c18026b14fec4" translate="yes" xml:space="preserve">
          <source>The empty index action gives the clean pass to a view with the form definition (app/views/signup/index.phtml):</source>
          <target state="translated">빈 인덱스 작업은 양식 정의 (app / views / signup / index.phtml)가있는 뷰에 깔끔하게 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="f6da63b6908de3f65ab9afe52a33c6e281276dd2" translate="yes" xml:space="preserve">
          <source>The events manager can collect every response returned by every notified listener. This example explains how it works:</source>
          <target state="translated">이벤트 관리자는 모든 통지 된 리스너가 리턴 한 모든 응답을 수집 할 수 있습니다. 이 예제는 작동 방식을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="0044a2250ff99f1838c14513d0181c4b476493f5" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how to define names to route parameters:</source>
          <target state="translated">아래 예는 이름을 정의하여 매개 변수를 라우팅하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="dd7eaf10308a74f9be5c1bd38d199121a992c831" translate="yes" xml:space="preserve">
          <source>The example below shows how to change the log format:</source>
          <target state="translated">아래 예는 로그 형식을 변경하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a87f6f459009a4d8546d700de51d951e839e7c86" translate="yes" xml:space="preserve">
          <source>The example below shows how to create a log and add messages to it:</source>
          <target state="translated">아래 예는 로그를 작성하고 메시지를 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3d107c5010f6e8c180cccd434fe2d8fce60f9654" translate="yes" xml:space="preserve">
          <source>The example given above performs a validation using the built-in validator &amp;ldquo;InclusionIn&amp;rdquo;. It checks the value of the field &amp;ldquo;type&amp;rdquo; in a domain list. If the value is not included in the method, then the validator will fail and return false.</source>
          <target state="translated">위에 제공된 예제는 내장 유효성 검사기 &quot;InclusionIn&quot;을 사용하여 유효성 검사를 수행합니다. 도메인 목록에서 &quot;type&quot;필드의 값을 확인합니다. 값이 메소드에 포함되지 않으면 유효성 검증 기가 실패하고 false를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0d944ebff41e551dc367881730a51e215f7b687e" translate="yes" xml:space="preserve">
          <source>The expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. Until this date expires no new content will be requested from the server:</source>
          <target state="translated">만료 날짜는 클라이언트 (브라우저)에서 페이지를 캐시하는 가장 쉽고 효과적인 방법 중 하나입니다. 현재 날짜부터 페이지가 브라우저 캐시에 저장되는 시간이 추가됩니다. 이 날짜가 만료 될 때까지 서버에서 새로운 콘텐츠를 요청하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="84350c2d6ed57558903fa70dd517a921495b2125" translate="yes" xml:space="preserve">
          <source>The field &amp;ldquo;price&amp;rdquo; is printed by its formatted using a Volt filter:</source>
          <target state="translated">&quot;price&quot;필드는 Volt 필터를 사용하여 형식화되어 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="7924fb45026d39b023bc91ded7d7f81fca13465a" translate="yes" xml:space="preserve">
          <source>The field is an auto_increment/serial column</source>
          <target state="translated">이 필드는 자동 증분 / 직렬 열입니다.</target>
        </trans-unit>
        <trans-unit id="4040102c2d612c234b07faa096ee296ae2a16509" translate="yes" xml:space="preserve">
          <source>The final output will be the following:</source>
          <target state="translated">최종 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4f50e5975bcb7c034434ae156ec3a42bf4c365b4" translate="yes" xml:space="preserve">
          <source>The first &amp;ldquo;handler&amp;rdquo; that we will implement is which by method GET returns all available robots. Let&amp;rsquo;s use PHQL to perform this simple query returning the results as JSON:</source>
          <target state="translated">우리가 구현할 첫 번째 &quot;핸들러&quot;는 GET 방식으로 사용 가능한 모든 로봇을 반환하는 것입니다. PHQL을 사용하여 결과를 JSON으로 반환하는이 간단한 쿼리를 수행해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="1117bbb377915135371644cc4e0c10d28e69d569" translate="yes" xml:space="preserve">
          <source>The first example shows how to convert native arrays into &lt;a href=&quot;../api/phalcon_config&quot;&gt;&lt;em&gt;Phalcon\Config&lt;/em&gt;&lt;/a&gt; objects. This option offers the best performance since no files are read during this request.</source>
          <target state="translated">첫 번째 예는 기본 배열을 &lt;a href=&quot;../api/phalcon_config&quot;&gt;&lt;em&gt;Phalcon \ Config&lt;/em&gt;&lt;/a&gt; 개체 로 변환하는 방법을 보여줍니다 . 이 옵션은이 요청 중에 파일을 읽지 않으므로 최상의 성능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d2219d950a500ff3778fc9dcc313112ee94e85ff" translate="yes" xml:space="preserve">
          <source>The first file you need to create is the bootstrap file. This file is very important; since it serves as the base of your application, giving you control of all aspects of it. In this file you can implement initialization of components as well as application behavior.</source>
          <target state="translated">가장 먼저 만들어야하는 파일은 부트 스트랩 파일입니다. 이 파일은 매우 중요합니다. 응용 프로그램의 기반으로 사용되므로 응용 프로그램의 모든 측면을 제어 할 수 있습니다. 이 파일에서 응용 프로그램 동작뿐만 아니라 구성 요소의 초기화를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="725475d9c0d5071783fbc7945759bcf370b06c0e" translate="yes" xml:space="preserve">
          <source>The first is create a custom builder, so we can generate a totally customized query:</source>
          <target state="translated">첫 번째는 사용자 정의 빌더를 작성하므로 완전히 사용자 정의 된 쿼리를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3af785d8925068e11b1d45eaf8a8df5f5ab0b2aa" translate="yes" xml:space="preserve">
          <source>The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.</source>
          <target state="translated">첫 번째 매개 변수는 관계에 사용 된 로컬 모델의 필드를 나타냅니다. 두 번째는 참조 된 모델의 이름을 나타내고 세 번째는 참조 된 모델의 필드 이름을 나타냅니다. 배열을 사용하여 관계에서 여러 필드를 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="31f8c9f176d9fb9f55754c986ba99a409a8adda0" translate="yes" xml:space="preserve">
          <source>The first parameter of the &lt;code&gt;add()&lt;/code&gt; method is the pattern you want to match and, optionally, the second parameter is a set of paths. In this case, if the URI is /admin/users/my-profile, then the &amp;ldquo;users&amp;rdquo; controller with its action &amp;ldquo;profile&amp;rdquo; will be executed. It&amp;rsquo;s important to remember that the router does not execute the controller and action, it only collects this information to inform the correct component (ie. &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt;) that this is the controller/action it should execute.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; 메소드 의 첫 번째 매개 변수는 일치시키려는 패턴이며 선택적으로 두 번째 매개 변수는 경로 세트입니다. 이 경우, URI가 / admin / users / my-profile이면 조치가 &quot;profile&quot;인 &quot;users&quot;컨트롤러가 실행됩니다. 라우터는 컨트롤러와 작업을 실행하지 않으며 올바른 구성 요소 (예 : &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt; )에게 실행해야 할 컨트롤러 / 작업임을 알리기 위해이 정보 만 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="cde287917aac27b3e22cbb3b304b4b95b633ba88" translate="yes" xml:space="preserve">
          <source>The first part that we find in the bootstrap is registering an autoloader. This will be used to load classes as controllers and models in the application. For example we may register one or more directories of controllers increasing the flexibility of the application. In our example we have used the component &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">부트 스트랩에서 찾은 첫 번째 부분은 오토로더를 등록하는 것입니다. 응용 프로그램에서 클래스를 컨트롤러 및 모델로로드하는 데 사용됩니다. 예를 들어, 어플리케이션의 유연성을 높이기 위해 하나 이상의 컨트롤러 디렉토리를 등록 할 수 있습니다. 이 예에서는 &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt; 구성 요소를 사용했습니다 .</target>
        </trans-unit>
        <trans-unit id="a70e98b10b64a7d236cca419dd88c5eba70add4d" translate="yes" xml:space="preserve">
          <source>The first validator has the option &amp;lsquo;cancelOnFail&amp;rsquo; with a value of true, therefore if that validator fails the remaining validators in the chain are not executed.</source>
          <target state="translated">첫 번째 유효성 검사기에는 값이 true 인 'cancelOnFail'옵션이 있으므로 해당 유효성 검사기가 실패하면 체인의 나머지 유효성 검사기가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8c192661ae891c40c2c4dc6aa2d23784b81aadec" translate="yes" xml:space="preserve">
          <source>The following HTML is generated:</source>
          <target state="translated">다음 HTML이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="6a79a5e08d671144eb20ac02ddd2c6c35c70e4e7" translate="yes" xml:space="preserve">
          <source>The following HTML will be produced.</source>
          <target state="translated">다음 HTML이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="c7b68eee79f7970464df5d16275110a11055a7ca" translate="yes" xml:space="preserve">
          <source>The following HTML will generated:</source>
          <target state="translated">다음 HTML이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="c37ebf97320060675dab01784957db49ad95ac12" translate="yes" xml:space="preserve">
          <source>The following NoSQL databases are supported:</source>
          <target state="translated">다음과 같은 NoSQL 데이터베이스가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="36a17f56d5a7eff4dd2c7092e033ba6305566528" translate="yes" xml:space="preserve">
          <source>The following PHP is generated:</source>
          <target state="translated">다음과 같은 PHP가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="056ffe62284c716da0acd06843f2f476427886f4" translate="yes" xml:space="preserve">
          <source>The following annotations are supported:</source>
          <target state="translated">다음과 같은 주석이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="7103263c3de1403ce6e5486157265ec887bd8932" translate="yes" xml:space="preserve">
          <source>The following are examples of custom routes:</source>
          <target state="translated">다음은 사용자 지정 경로의 예입니다.</target>
        </trans-unit>
        <trans-unit id="c476eb1478af5a0ac4719ae3a2656de74d990174" translate="yes" xml:space="preserve">
          <source>The following are potential configurations you can use to setup Apache with Phalcon. These notes are primarily focused on the configuration of the mod_rewrite module allowing to use friendly URLs and the &lt;a href=&quot;routing&quot;&gt;&lt;em&gt;router component&lt;/em&gt;&lt;/a&gt;. Commonly an application has the following structure:</source>
          <target state="translated">다음은 Phalcon으로 Apache를 설정하는 데 사용할 수있는 잠재적 구성입니다. 이 노트는 주로 친숙한 URL과 &lt;a href=&quot;routing&quot;&gt;&lt;em&gt;라우터 구성 요소&lt;/em&gt;&lt;/a&gt; 를 사용할 수있는 mod_rewrite 모듈의 구성에 중점을 둡니다 . 일반적으로 응용 프로그램의 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="46b684bf814f4fd787f7b792c7356759543c503a" translate="yes" xml:space="preserve">
          <source>The following are potential configurations you can use to setup nginx with Phalcon:</source>
          <target state="translated">다음은 Phalcon으로 nginx를 설정하는 데 사용할 수있는 잠재적 구성입니다.</target>
        </trans-unit>
        <trans-unit id="96bbbbb8367c85dccb708eb013f3f45dae5b3d13" translate="yes" xml:space="preserve">
          <source>The following are the built-in filters provided by this component:</source>
          <target state="translated">이 구성 요소에서 제공하는 내장 필터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1a2471eac57641cd6d1feedf39e502784d1dcbe4" translate="yes" xml:space="preserve">
          <source>The following behavior is an example, it implements the Blameable behavior which helps identify the user that is performed operations over a model:</source>
          <target state="translated">다음 동작은 예이며, Blameable 동작을 구현하여 모델에서 작업을 수행하는 사용자를 식별하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="938575ec8e7fa75440eee1b86a632a24fd89a8d7" translate="yes" xml:space="preserve">
          <source>The following built-in behaviors are provided by the framework:</source>
          <target state="translated">프레임 워크는 다음과 같은 기본 제공 동작을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1096011c0794f94e3f2405fd01e25c73c8d86476" translate="yes" xml:space="preserve">
          <source>The following built-in functions are available in Volt:</source>
          <target state="translated">Volt에서는 다음과 같은 내장 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59540566cedd2e58b9d5ddd1accc3f81a5d74db9" translate="yes" xml:space="preserve">
          <source>The following built-in tests are available in Volt:</source>
          <target state="translated">Volt에서는 다음과 같은 내장 테스트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="96828b04cfe484f6490ca9e7f3ee81a83d0e7b79" translate="yes" xml:space="preserve">
          <source>The following code is generated by the script:</source>
          <target state="translated">다음 코드는 스크립트에 의해 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="e89ce9c96530816ce65e4ec43b256535c9bb7a06" translate="yes" xml:space="preserve">
          <source>The following comparison operators are available:</source>
          <target state="translated">다음과 같은 비교 연산자를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02d49a4a892062eac28318a072e40c0ef6738c92" translate="yes" xml:space="preserve">
          <source>The following compilation events are available to be implemented in extensions:</source>
          <target state="translated">확장에서 다음 컴파일 이벤트를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="888d47dd60f828aafca5323807c544a7340ab904" translate="yes" xml:space="preserve">
          <source>The following events are available to define custom business rules that can be executed when a delete operation is performed:</source>
          <target state="translated">삭제 조작이 수행 될 때 실행될 수있는 사용자 정의 비즈니스 규칙을 정의하기 위해 다음 이벤트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e6144552c3b65547ee5055192e3963dd1922146" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to attach listeners to this component:</source>
          <target state="translated">다음 예제는이 컴포넌트에 리스너를 첨부하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e2f6ffb0c750c58c9db09200af7e5cfcdc9a230e" translate="yes" xml:space="preserve">
          <source>The following example explains how to create additional validators for this component:</source>
          <target state="translated">다음 예제는이 구성 요소에 대한 추가 유효성 검증기를 작성하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="35c19ec7e65f13d0c065afa15b52977bcef322ea" translate="yes" xml:space="preserve">
          <source>The following example implements &lt;a href=&quot;http://xdebug.org/docs/stack_trace&quot;&gt;xdebug_print_function_stack&lt;/a&gt; to stop the execution and generate a backtrace:</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;http://xdebug.org/docs/stack_trace&quot;&gt;xdebug_print_function_stack&lt;/a&gt; 을 구현 하여 실행을 중지하고 역 추적을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="46b71d108086002d8cfbeb7368fbbf4d06121293" translate="yes" xml:space="preserve">
          <source>The following example implements &lt;a href=&quot;https://xdebug.org/docs/stack_trace&quot;&gt;xdebug_print_function_stack&lt;/a&gt; to stop the execution and generate a backtrace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fa4125661936b8ae0faaa2ef9333b634ce57d7" translate="yes" xml:space="preserve">
          <source>The following example implements an event that validates the year cannot be smaller than 0 on update or insert:</source>
          <target state="translated">다음 예제는 업데이트 또는 삽입시 연도를 0보다 작게 검증 할 수없는 이벤트를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="4ed79d99f2a2aa3f62168c130d23ae90f66c1894" translate="yes" xml:space="preserve">
          <source>The following example is a bit lengthy, but it attempts to explain why Phalcon uses service location and dependency injection. First, let&amp;rsquo;s pretend we are developing a component called SomeComponent. This performs a task that is not important now. Our component has some dependency that is a connection to a database.</source>
          <target state="translated">다음 예제는 약간 길지만 Phalcon이 서비스 위치 및 종속성 주입을 사용하는 이유를 설명하려고 시도합니다. 먼저 SomeComponent라는 컴포넌트를 개발하고 있다고 가정 해 봅시다. 이것은 지금 중요하지 않은 작업을 수행합니다. 우리의 구성 요소는 데이터베이스에 대한 연결 인 종속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d4fc6fe3d1daa7b5df27aa839e675ff9a728bc0" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a plugin that clean/repair the HTML produced by the render process using &lt;a href=&quot;http://www.php.net/manual/en/book.tidy.php&quot;&gt;Tidy&lt;/a&gt;:</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;http://www.php.net/manual/en/book.tidy.php&quot;&gt;Tidy를&lt;/a&gt; 사용하여 렌더링 프로세스에서 생성 된 HTML을 정리 / 복구하는 플러그인을 작성하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="eea363145d813c8f6f5ba5b208fe99b52e36dac5" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a table:</source>
          <target state="translated">다음 예제는 테이블을 작성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="016ee7af4c2c1178ed33fbeeef80097407e78e47" translate="yes" xml:space="preserve">
          <source>The following example shows how to define the metadata manually:</source>
          <target state="translated">다음 예제는 메타 데이터를 수동으로 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="71efad2e6b7be51cc3bf2aa1fe4c0b65f74bfa8e" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement a controller that use namespaces:</source>
          <target state="translated">다음 예제는 네임 스페이스를 사용하는 컨트롤러를 구현하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d2f8cebee311e0944cc8282a092650a4aefd8928" translate="yes" xml:space="preserve">
          <source>The following example shows how to minify a collection of resources:</source>
          <target state="translated">다음 예제는 자원 콜렉션을 축소하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d43e47ddc225405cc248a3ee3d2cea285dfca6bb" translate="yes" xml:space="preserve">
          <source>The following example shows how to use it:</source>
          <target state="translated">다음 예제는 사용 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a5567bb1e6209095e27db87f2b146796587de8f8" translate="yes" xml:space="preserve">
          <source>The following example shows how to use operators:</source>
          <target state="translated">다음 예제는 연산자를 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5942e1b1a8541035a9e380c1f55d4da5f5fc297f" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this component in stand-alone mode:</source>
          <target state="translated">다음 예제는이 구성 요소를 독립형 모드에서 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3de69a9ffbce252a9645f5a616b7f8dc1a564784" translate="yes" xml:space="preserve">
          <source>The following example shows how to write a jQuery &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;ajax request&lt;/a&gt; using a URL with the framework conventions. The service &amp;ldquo;url&amp;rdquo; (usually &lt;a href=&quot;url&quot;&gt;&lt;em&gt;Phalcon\Mvc\Url&lt;/em&gt;&lt;/a&gt;) is injected in the view by accessing a property with the same name:</source>
          <target state="translated">다음 예제는 프레임 워크 규칙이있는 URL을 사용하여 jQuery &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;ajax 요청&lt;/a&gt; 을 작성하는 방법을 보여줍니다 . &quot;url&quot;서비스 (일반적으로 &lt;a href=&quot;url&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Url&lt;/em&gt;&lt;/a&gt; )는 이름이 같은 속성에 액세스하여 뷰에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="988f87b4154b3892788aadadb6a8a53b656e5901" translate="yes" xml:space="preserve">
          <source>The following example shows how to write a jQuery &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;ajax request&lt;/a&gt; using a URL with the framework conventions. The service &amp;ldquo;url&amp;rdquo; (usually &lt;a href=&quot;url&quot;&gt;&lt;em&gt;Phalcon\Mvc\Url&lt;/em&gt;&lt;/a&gt;) is injected in the view by accessing a property with the same name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d8e80c423e8866859e2fe9a70261b0e8d8044e" translate="yes" xml:space="preserve">
          <source>The following example shows its basic usage:</source>
          <target state="translated">다음 예제는 기본 사용법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7d5f9fcdd984cdd94d67c177a6c833b0cfab8a88" translate="yes" xml:space="preserve">
          <source>The following examples show how to use aggregations in PHQL:</source>
          <target state="translated">다음 예는 PHQL에서 집계를 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3ced74a6bbe4ef2f27f066f9fe0cb655bf55a495" translate="yes" xml:space="preserve">
          <source>The following examples show the basic use of each adapter:</source>
          <target state="translated">다음 예제는 각 어댑터의 기본 사용법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="08aa594dbd84d098b5621651c51b29acbd6bce12" translate="yes" xml:space="preserve">
          <source>The following file structure is more than enough:</source>
          <target state="translated">다음과 같은 파일 구조로 충분합니다.</target>
        </trans-unit>
        <trans-unit id="84946c4972b2747bf1dfff3f55bce9afc794748b" translate="yes" xml:space="preserve">
          <source>The following is the list of available built-in filters in Volt:</source>
          <target state="translated">다음은 Volt에서 사용 가능한 내장 필터 목록입니다.</target>
        </trans-unit>
        <trans-unit id="1ad06e84018c730b225ae736038842ca2842b3c4" translate="yes" xml:space="preserve">
          <source>The following literals are supported:</source>
          <target state="translated">다음 리터럴이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="098d105043969720f5a86e25e7dd4f1b3367ac1e" translate="yes" xml:space="preserve">
          <source>The following middleware events are available:</source>
          <target state="translated">다음과 같은 미들웨어 이벤트가 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="164b6537d2474a14fef0f85a823ee99233a1f0c1" translate="yes" xml:space="preserve">
          <source>The following operators are available:</source>
          <target state="translated">다음과 같은 연산자를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad24f899602796ce93c81adbcb154217c8eeedfb" translate="yes" xml:space="preserve">
          <source>The following options are available in Volt:</source>
          <target state="translated">볼트에서는 다음과 같은 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d64a6ebec0366ee471d4004cc231da2091386a0c" translate="yes" xml:space="preserve">
          <source>The following options are available to change the encryption behavior:</source>
          <target state="translated">암호화 동작을 변경하기 위해 다음 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">다음과 같은 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65824cd3e175d3ab525e3b266ab8d83c89b948ce" translate="yes" xml:space="preserve">
          <source>The following replacement of &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; lacks of a view component making it suitable for Rest APIs:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Application을&lt;/em&gt;&lt;/a&gt; 다음과 같이 대체 하면 View 구성 요소가 &lt;em&gt;없어&lt;/em&gt; Rest API에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="62665cb920f4d4ff7e1f14fed3d0ae0d73b428b3" translate="yes" xml:space="preserve">
          <source>The following route</source>
          <target state="translated">다음 노선</target>
        </trans-unit>
        <trans-unit id="f5b64f889ffc2f5de75a44ea60a301ceedc3f2fe" translate="yes" xml:space="preserve">
          <source>The following rules can be used together with Apache to rewrite the URis:</source>
          <target state="translated">다음 규칙을 Apache와 함께 사용하여 URis를 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec2bdad2b5d69c3e1d956bda673810b8075735d9" translate="yes" xml:space="preserve">
          <source>The following schema shows 3 tables whose relations will serve us as an example regarding relationships:</source>
          <target state="translated">다음 스키마는 관계에 대한 예제로 관계가있는 3 개의 테이블을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c17907192fac506ad13748546735f0b6aa231cf6" translate="yes" xml:space="preserve">
          <source>The following screencast explains how it works:</source>
          <target state="translated">다음 스크린 캐스트는 작동 방식을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5a2f49ec85eb7950024bbd531770ef8ed900bf5c" translate="yes" xml:space="preserve">
          <source>The following screencast is a step by step guide to install Phalcon on Windows:</source>
          <target state="translated">다음 스크린 캐스트는 Windows에 Phalcon을 설치하는 단계별 가이드입니다.</target>
        </trans-unit>
        <trans-unit id="0729818f552eadea9288f705d3306d8f210601b5" translate="yes" xml:space="preserve">
          <source>The following screencast is a step-by-step guide to install Phalcon on Windows:</source>
          <target state="translated">다음 스크린 캐스트는 Windows에 Phalcon을 설치하기위한 단계별 안내서입니다.</target>
        </trans-unit>
        <trans-unit id="7499af1d7976c6dc21cdf07d251e55035fda0ff6" translate="yes" xml:space="preserve">
          <source>The following screencast shows a Xdebug session with Phalcon:</source>
          <target state="translated">다음 스크린 캐스트는 Phalcon의 Xdebug 세션을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5f640dcd926218c7155e48c1f08fcc6563e5c45b" translate="yes" xml:space="preserve">
          <source>The following simple form (app/views/session/index.volt) requests the login information. We&amp;rsquo;ve removed some HTML code to make the example more concise:</source>
          <target state="translated">다음과 같은 간단한 형식 (app / views / session / index.volt)은 로그인 정보를 요청합니다. 예제를보다 간결하게하기 위해 일부 HTML 코드를 제거했습니다.</target>
        </trans-unit>
        <trans-unit id="9cf04bd229f848b379151a1afc6d846823388f32" translate="yes" xml:space="preserve">
          <source>The form is declared using an object-oriented scheme based on the elements provided by the &lt;a href=&quot;forms&quot;&gt;&lt;em&gt;forms&lt;/em&gt;&lt;/a&gt; component. Every element follows almost the same structure:</source>
          <target state="translated">양식은 &lt;a href=&quot;forms&quot;&gt;&lt;em&gt;양식&lt;/em&gt;&lt;/a&gt; 구성 요소가 제공하는 요소를 기반으로 오브젝트 지향 체계를 사용하여 선언됩니다 . 모든 요소는 거의 동일한 구조를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="2b6bd48d33ed4aa2020afd5a4279752a5d505408" translate="yes" xml:space="preserve">
          <source>The former is a very simple behavior, but it illustrates how to create a behavior, now let&amp;rsquo;s add this behavior to a model:</source>
          <target state="translated">전자는 매우 간단한 동작이지만 동작을 만드는 방법을 보여줍니다. 이제이 동작을 모델에 추가하겠습니다.</target>
        </trans-unit>
        <trans-unit id="5bd297a0e70eb6e873df2410ed0985738ec86674" translate="yes" xml:space="preserve">
          <source>The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.</source>
          <target state="translated">프레임 워크 자체 또는 개발자가 서비스를 등록 할 수 있습니다. 컴포넌트 A가 컴포넌트 B (또는 해당 클래스의 인스턴스)가 작동해야하는 경우 새 인스턴스 컴포넌트 B를 작성하는 대신 컨테이너에서 컴포넌트 B를 요청할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36cda7152738aec75422ab1d382f9660d8d09ada" translate="yes" xml:space="preserve">
          <source>The frontend must always be &lt;a href=&quot;../api/phalcon_cache_frontend_output&quot;&gt;&lt;em&gt;Phalcon\Cache\Frontend\Output&lt;/em&gt;&lt;/a&gt; and the service &amp;lsquo;viewCache&amp;rsquo; must be registered as always open (not shared) in the services container (DI).</source>
          <target state="translated">프론트 엔드는 항상 &lt;a href=&quot;../api/phalcon_cache_frontend_output&quot;&gt;&lt;em&gt;Phalcon \ Cache \ Frontend \ Output&lt;/em&gt;&lt;/a&gt; 이어야하고 서비스 'viewCache'는 서비스 컨테이너 (DI)에서 항상 열려있는 (공유되지 않음)으로 등록되어야합니다.</target>
        </trans-unit>
        <trans-unit id="498c85f259dea9d5fb570f2c0b384b60ef081ca2" translate="yes" xml:space="preserve">
          <source>The function &amp;ldquo;url&amp;rdquo; is available in volt to generate URLs using this component:</source>
          <target state="translated">이 구성 요소를 사용하여 URL을 생성하기 위해 &quot;url&quot;기능을 볼트로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6962aaad50348f91185bb994dd9b134daf948e99" translate="yes" xml:space="preserve">
          <source>The generated HTML by the request will be:</source>
          <target state="translated">요청에 의해 생성 된 HTML은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1f2ab72292ec548dd9087e02a668a530cb0557a4" translate="yes" xml:space="preserve">
          <source>The generated HTML code displays an anchor (&amp;ldquo;a&amp;rdquo;) HTML tag linking to a new controller:</source>
          <target state="translated">생성 된 HTML 코드는 새 컨트롤러에 연결되는 앵커 (&amp;ldquo;a&amp;rdquo;) HTML 태그를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8888acecfb13dd662e4103fcee00b4dba8d07621" translate="yes" xml:space="preserve">
          <source>The height will automatically be generated to keep the proportions the same; if you specify a height, it will be ignored.</source>
          <target state="translated">비율을 동일하게 유지하기 위해 높이가 자동으로 생성됩니다. 높이를 지정하면 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="222271409e67871dcbb654a0245b3d55a21b796a" translate="yes" xml:space="preserve">
          <source>The hook events always receive a first parameter that contains contextual information of the event produced (&lt;code&gt;$event&lt;/code&gt;) and a second one that is the object that produced the event itself (&lt;code&gt;$dispatcher&lt;/code&gt;). It is not mandatory that plugins extend the class &lt;a href=&quot;../api/phalcon_mvc_user_plugin&quot;&gt;&lt;em&gt;Phalcon\Mvc\User\Plugin&lt;/em&gt;&lt;/a&gt;, but by doing this they gain easier access to the services available in the application.</source>
          <target state="translated">후크 이벤트는 항상 생성 된 이벤트의 컨텍스트 정보 ( &lt;code&gt;$event&lt;/code&gt; ) 를 포함하는 첫 번째 매개 변수 와 이벤트 자체를 생성 한 오브젝트 인 &lt;code&gt;$dispatcher&lt;/code&gt; 를 포함하는 첫 번째 매개 변수를 수신 합니다 ( $ dispatcher ). 플러그인이 &lt;a href=&quot;../api/phalcon_mvc_user_plugin&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ User \ Plugin&lt;/em&gt;&lt;/a&gt; 클래스를 확장해야하는 것은 아니지만,이를 통해 애플리케이션에서 사용 가능한 서비스에보다 쉽게 ​​액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7e69c7bc7e6e699f1567b4aca638e41c418d460" translate="yes" xml:space="preserve">
          <source>The hostname can also be passed as a regular expressions:</source>
          <target state="translated">호스트 이름은 정규 표현식으로 전달 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="11ceebdbda78b846dd3f17cb24463066d0837432" translate="yes" xml:space="preserve">
          <source>The idea is to prevent the form values from being sent outside our application. To fix this, we generate a &lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;random nonce&lt;/a&gt; (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:</source>
          <target state="translated">아이디어는 양식 값이 응용 프로그램 외부로 전송되지 않도록하는 것입니다. 이 문제를 해결하기 위해 각 양식에 &lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;임의의 논스&lt;/a&gt; (토큰)를 생성 하고 세션에 토큰을 추가 한 다음 세션에 저장된 토큰과 세션에 저장된 토큰을 비교하여 양식이 데이터를 애플리케이션에 다시 게시하면 토큰의 유효성을 검사합니다. 형태:</target>
        </trans-unit>
        <trans-unit id="35468def2ac25753728baf29a012da46a25e3cf5" translate="yes" xml:space="preserve">
          <source>The idea is to prevent the form values from being sent outside our application. To fix this, we generate a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;random nonce&lt;/a&gt; (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e32ccf8ab7341d89b65a2f3eb4aedfd35830453" translate="yes" xml:space="preserve">
          <source>The idea of creating validators is make them reusable between several models. A validator can also be as simple as:</source>
          <target state="translated">유효성 검사기를 만드는 아이디어는 여러 모델간에 재사용 가능하도록 만드는 것입니다. 유효성 검사기는 다음과 같이 간단 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b66d9a811b39ce12ac4f0a78c8a6e309922a4ee3" translate="yes" xml:space="preserve">
          <source>The implementation of this caching mechanism allows us to gain performance by not executing the helper &lt;code&gt;Phalcon\Tag::linkTo()&lt;/code&gt; call whenever this piece of code is called.</source>
          <target state="translated">이 캐싱 메커니즘을 구현하면이 코드가 호출 될 때마다 도우미 &lt;code&gt;Phalcon\Tag::linkTo()&lt;/code&gt; 호출을 실행하지 않아도 성능을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="869563099e222665ee75ec7b831c5c774d34807a" translate="yes" xml:space="preserve">
          <source>The important part is:</source>
          <target state="translated">중요한 부분은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1007d15259f25bfa736a3cd7fea04682b02c0175" translate="yes" xml:space="preserve">
          <source>The independent column map allow you to:</source>
          <target state="translated">독립 컬럼 맵을 사용하면 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4080af0e1013534d8f126c625fd12721cffc74fa" translate="yes" xml:space="preserve">
          <source>The index of the Redis database to use</source>
          <target state="translated">사용할 Redis 데이터베이스의 인덱스</target>
        </trans-unit>
        <trans-unit id="5bcbdf81eda918e42cbfa9c24226b9201a959008" translate="yes" xml:space="preserve">
          <source>The kick command applies only to the currently used tube.</source>
          <target state="translated">킥 명령은 현재 사용 된 튜브에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="ea2e0917867ca07d427a644fa2f01da8f1dea851" translate="yes" xml:space="preserve">
          <source>The last option is to register the class name and its path. This autoloader can be very useful when the folder convention of the project does not allow for easy retrieval of the file using the path and the class name. This is the fastest method of autoloading. However the more your application grows, the more classes/files need to be added to this autoloader, which will effectively make maintenance of the class list very cumbersome and it is not recommended.</source>
          <target state="translated">마지막 옵션은 클래스 이름과 경로를 등록하는 것입니다. 이 오토로더는 프로젝트의 폴더 규칙이 경로와 클래스 이름을 사용하여 파일을 쉽게 검색 할 수 없을 때 매우 유용합니다. 이것이 가장 빠른 자동 로딩 방법입니다. 그러나 응용 프로그램이 커질수록이 오토로더에 더 많은 클래스 / 파일을 추가해야하므로 클래스 목록의 유지 관리가 매우 번거롭고 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b7015af822dc3a00792f4a60e43d40f56046c23c" translate="yes" xml:space="preserve">
          <source>The last page in the set of records</source>
          <target state="translated">레코드 세트의 마지막 페이지</target>
        </trans-unit>
        <trans-unit id="ee2118b0047b275c26d109ab538d233a4ffaea11" translate="yes" xml:space="preserve">
          <source>The log generated is below:</source>
          <target state="translated">생성 된 로그는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="10ac6817f5099c3c8012aeb58f939a27e4d939c8" translate="yes" xml:space="preserve">
          <source>The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.</source>
          <target state="translated">이 컴포넌트의 느슨하게 결합 된 디자인을 사용하면 프레임 워크에서 제공하는 유효성 검증기와 함께 고유 한 유효성 검증기를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17387fea085091021c6127cd0a6738dcae08adaa" translate="yes" xml:space="preserve">
          <source>The main method is just called, at this point the application doesn&amp;rsquo;t know if there is some matched route</source>
          <target state="translated">main 메소드는 방금 호출됩니다.이 시점에서 응용 프로그램은 일치하는 경로가 있는지 알지 못합니다</target>
        </trans-unit>
        <trans-unit id="ffa0fb429c966a003cea06335f50f034f15a8485" translate="yes" xml:space="preserve">
          <source>The message itself expected to be logged</source>
          <target state="translated">메시지 자체가 기록 될 것으로 예상</target>
        </trans-unit>
        <trans-unit id="4593fb6d0f8cdd7077829b2ca8dc9c0071bdd490" translate="yes" xml:space="preserve">
          <source>The messages are sent to the handlers in the order they were registered.</source>
          <target state="translated">메시지는 등록 된 순서대로 처리기로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="fe33b3972c61249c5b200feacf61ba6947506674" translate="yes" xml:space="preserve">
          <source>The meta-data is obtained by reading the column descriptions from the database information schema</source>
          <target state="translated">메타 데이터는 데이터베이스 정보 스키마에서 열 설명을 읽어서 얻습니다.</target>
        </trans-unit>
        <trans-unit id="aaf23f9f172af4939a80bda83acecad0c00b3037" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;render()&lt;/code&gt; accepts an absolute path to the view file and the view parameters set using &lt;code&gt;$this-&amp;gt;view-&amp;gt;setVar()&lt;/code&gt;. You could read or require it when it&amp;rsquo;s necessary.</source>
          <target state="translated">&lt;code&gt;render()&lt;/code&gt; 메소드 는 뷰 파일의 절대 경로와 &lt;code&gt;$this-&amp;gt;view-&amp;gt;setVar()&lt;/code&gt; 사용하여 설정된 뷰 매개 변수를 허용합니다 . 필요할 때 읽거나 요구할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb11de9c5d33808b6bd974a3ff129c0a6421437" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Parts&amp;rdquo; has many &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">&amp;ldquo;Parts&amp;rdquo;모델에는 많은&amp;ldquo;RobotsParts&amp;rdquo;가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3919dab3fb9098bb29e1dafc60aa2df00504cb7" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Robots&amp;rdquo; has a relation many-to-many to &amp;ldquo;Parts&amp;rdquo; through &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">&quot;Robots&quot;모델은 &quot;RobotsParts&quot;를 통해 &quot;Parts&quot;와 다 대다 관계를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="3c8678d499ec6ba9faf98a5d27ceb929aad11ca4" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Robots&amp;rdquo; has many &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">&quot;로봇&quot;모델에는 많은 &quot;로봇 부품&quot;이 있습니다.</target>
        </trans-unit>
        <trans-unit id="53c43ba7b0c284cb7944f3b7c0b27039d3d5d755" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;RobotsParts&amp;rdquo; belongs to both &amp;ldquo;Robots&amp;rdquo; and &amp;ldquo;Parts&amp;rdquo; models as a many-to-one relation.</source>
          <target state="translated">&amp;ldquo;RobotsParts&amp;rdquo;모델은 다 대일 관계로&amp;ldquo;Robots&amp;rdquo;및&amp;ldquo;Parts&amp;rdquo;모델에 속합니다.</target>
        </trans-unit>
        <trans-unit id="3d6f37701acbe604c98ca7e51f2ffc1a0f6c9798" translate="yes" xml:space="preserve">
          <source>The model RobotParts now maps to &amp;ldquo;toys_robot_parts&amp;rdquo; table. The &lt;code&gt;initialize()&lt;/code&gt; method aids in setting up the model with a custom behavior i.e. a different table.</source>
          <target state="translated">이제 RobotParts 모델이&amp;ldquo;toys_robot_parts&amp;rdquo;테이블에 매핑됩니다. &lt;code&gt;initialize()&lt;/code&gt; 다른 테이블 즉, 사용자 정의 행동 모델을 설정하는 방법 원조.</target>
        </trans-unit>
        <trans-unit id="055fbbd518c555cda60a780d640babcfd88a53db" translate="yes" xml:space="preserve">
          <source>The models with their relations could be implemented as follows:</source>
          <target state="translated">관계가있는 모델은 다음과 같이 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcfe1b4eb43169359be51314a9e1125f97cd246e" translate="yes" xml:space="preserve">
          <source>The most common place to access the request environment is in an action of a controller. To access the &lt;a href=&quot;../api/phalcon_http_request&quot;&gt;&lt;em&gt;Phalcon\Http\Request&lt;/em&gt;&lt;/a&gt; object from a controller you will need to use the &lt;code&gt;$this-&amp;gt;request&lt;/code&gt; public property of the controller:</source>
          <target state="translated">요청 환경에 액세스하는 가장 일반적인 장소는 컨트롤러의 동작입니다. 컨트롤러에서 &lt;a href=&quot;../api/phalcon_http_request&quot;&gt;&lt;em&gt;Phalcon \ Http \ Request&lt;/em&gt;&lt;/a&gt; 객체에 액세스하려면 컨트롤러의 &lt;code&gt;$this-&amp;gt;request&lt;/code&gt; public 속성 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dec19fbe9072c91403411b1df4b6d19244827b60" translate="yes" xml:space="preserve">
          <source>The most common situation when inserting unsafe data is between HTML tags:</source>
          <target state="translated">안전하지 않은 데이터를 삽입 할 때 가장 일반적인 상황은 HTML 태그 사이입니다.</target>
        </trans-unit>
        <trans-unit id="de6d0a13cf598b5775bea988393fc547fa336478" translate="yes" xml:space="preserve">
          <source>The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:</source>
          <target state="translated">데이터를 필터링하는 가장 효율적인 방법은 일부 검색 기준을 설정하는 것입니다. 데이터베이스는 테이블에 설정된 인덱스를 사용하여 데이터를 더 빠르게 반환합니다. 또한 Phalcon을 사용하면 데이터베이스에서 사용할 수없는 리소스를 사용하여 PHP를 사용하여 데이터를 필터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="655ddaeb1e9988b859ff1555e4af29206ae06a20" translate="yes" xml:space="preserve">
          <source>The next example shows how to use the MySQL now() function as a field value.</source>
          <target state="translated">다음 예제는 MySQL now () 함수를 필드 값으로 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="300df99f4a40af8520f4d4ed4496f5f4f8c552d5" translate="yes" xml:space="preserve">
          <source>The next example shows you how to sanitize the action parameters within a controller action:</source>
          <target state="translated">다음 예제는 컨트롤러 조치 내에서 조치 매개 변수를 삭제하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="74445c083ec02da524f934e7b1118f77c26d3249" translate="yes" xml:space="preserve">
          <source>The next page to the current one</source>
          <target state="translated">현재 페이지의 다음 페이지</target>
        </trans-unit>
        <trans-unit id="6889afb145fa237708c104badd5670058c9aaadc" translate="yes" xml:space="preserve">
          <source>The number of items in the source data</source>
          <target state="translated">소스 데이터의 항목 수</target>
        </trans-unit>
        <trans-unit id="29c3835e9086427febe1a418ab3f41b581305542" translate="yes" xml:space="preserve">
          <source>The number of items to iterate</source>
          <target state="translated">반복 할 항목 수</target>
        </trans-unit>
        <trans-unit id="f55c0141f00d125146e625b42450cdd91a9bd7e1" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0 indexed)</source>
          <target state="translated">루프 끝부터 반복 횟수 (0 인덱스)</target>
        </trans-unit>
        <trans-unit id="e4908293726276d229be0d3d16697517841de110" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1 indexed)</source>
          <target state="translated">루프 끝에서 반복 횟수 (1 인덱스)</target>
        </trans-unit>
        <trans-unit id="a33c34f4e66cd6c15e09c8c4c91db1004534ed0c" translate="yes" xml:space="preserve">
          <source>The number of pages</source>
          <target state="translated">페이지 수</target>
        </trans-unit>
        <trans-unit id="cd82762e9bab3141dcc703011a704f3a1bce813c" translate="yes" xml:space="preserve">
          <source>The operation will result in the following data in the table:</source>
          <target state="translated">이 작업으로 인해 테이블에 다음 데이터가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="c44226fc1ccbc6d605ec42320f2e660c616c1d61" translate="yes" xml:space="preserve">
          <source>The opposite effect (avoid page caching) is achieved in this way:</source>
          <target state="translated">이와 같은 방식으로 페이지 캐싱을 피하는 반대 효과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="e95ef52f5eb685c92410561b4d9dba6efecf75d8" translate="yes" xml:space="preserve">
          <source>The order that the template engines are defined with &lt;code&gt;Phalcon\Mvc\View::registerEngines()&lt;/code&gt; defines the relevance of execution. If &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; finds two views with the same name but different extensions, it will only render the first one.</source>
          <target state="translated">템플릿 엔진이 &lt;code&gt;Phalcon\Mvc\View::registerEngines()&lt;/code&gt; 정의 된 순서는 실행의 관련성을 정의합니다. 경우 &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ MVC \보기&lt;/em&gt;&lt;/a&gt; 이름은 같지만 서로 다른 확장자를 가진 두 개의보기를 발견, 그것은 단지 첫 번째 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="0d9c825d7164f82dca8f22ee53e88a58b646e6d6" translate="yes" xml:space="preserve">
          <source>The parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.</source>
          <target state="translated">파서는 먼저 패스 PHQL 문의 구문을 확인한 다음 명령문의 중간 표현을 작성하고이를 대상 RDBMS의 해당 SQL 언어로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="74337ae4d0d9c7813bad5c0e85d87080041a0182" translate="yes" xml:space="preserve">
          <source>The parser is highly flexible, the following docblock is valid:</source>
          <target state="translated">파서는 매우 유연하며 다음과 같은 docblock이 유효합니다.</target>
        </trans-unit>
        <trans-unit id="39adb0dc278da7c36d838e17d1aeb0c2a5b1c664" translate="yes" xml:space="preserve">
          <source>The peek commands let the client inspect a job in the system.</source>
          <target state="translated">peek 명령을 사용하면 클라이언트가 시스템의 작업을 검사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c076accb0f967599bc1c727ac0fa185b9f21d61" translate="yes" xml:space="preserve">
          <source>The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.</source>
          <target state="translated">gettext ()의 복수 버전. 일부 언어는 개수에 따라 복수 메시지에 대해 둘 이상의 형식을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="f2ef676ee7e587fe7e492969ca86deccb350cd9a" translate="yes" xml:space="preserve">
          <source>The prefix &amp;ldquo;get&amp;rdquo; is used to &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt; related records. Depending on the type of relation it will use &lt;code&gt;find()&lt;/code&gt; or &lt;code&gt;findFirst()&lt;/code&gt;:</source>
          <target state="translated">접두사&amp;ldquo;get&amp;rdquo;은 &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; 관련 레코드에 사용됩니다. 관계 유형에 따라 &lt;code&gt;find()&lt;/code&gt; 또는 &lt;code&gt;findFirst()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fdc917719c66e51d0501cc8c3631c511017143ef" translate="yes" xml:space="preserve">
          <source>The previous page to the current one</source>
          <target state="translated">이전 페이지를 현재 페이지로</target>
        </trans-unit>
        <trans-unit id="9ffd39464e5dda629e4917c6874eb39307098ba9" translate="yes" xml:space="preserve">
          <source>The process of pagination takes place when we need to present big groups of arbitrary data gradually. &lt;code&gt;Phalcon\Paginator&lt;/code&gt; offers a fast and convenient way to split these sets of data into browsable pages.</source>
          <target state="translated">페이지 매김 프로세스는 큰 그룹의 임의 데이터를 점진적으로 제시해야 할 때 발생합니다. &lt;code&gt;Phalcon\Paginator&lt;/code&gt; 는 이러한 데이터 세트를 찾아 볼 수있는 페이지로 빠르고 편리하게 분할 할 수있는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5c4e9584fd73b0f13cd2b0e07649c16ebb8980fe" translate="yes" xml:space="preserve">
          <source>The produced routes would look like:</source>
          <target state="translated">생성 된 경로는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bc4f7a09df206abef1af972172d101ccb163117e" translate="yes" xml:space="preserve">
          <source>The purpose of this component is to intercept the execution of most of the other components of the framework by creating &amp;ldquo;hook points&amp;rdquo;. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.</source>
          <target state="translated">이 컴포넌트의 목적은 &quot;후크 포인트&quot;를 생성하여 프레임 워크의 다른 컴포넌트 대부분의 실행을 가로채는 것입니다. 이러한 후크 포인트를 통해 개발자는 구성 요소 프로세스 중에 상태 정보를 얻거나 데이터를 조작하거나 실행 흐름을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6427d1f8cee51c53d914db31e6f0a2bf8751f1db" translate="yes" xml:space="preserve">
          <source>The recently added virtual server must appear at the left bar of the screen. In the &amp;lsquo;Behaviors&amp;rsquo; tab you will see a set of default behaviors for this virtual server. Click the &amp;lsquo;Rule Management&amp;rsquo; button. Remove those labeled as &amp;lsquo;Directory /cherokee_themes&amp;rsquo; and &amp;lsquo;Directory /icons&amp;rsquo;:</source>
          <target state="translated">최근에 추가 한 가상 서버가 화면의 왼쪽 막대에 나타나야합니다. '비헤이비어'탭에는이 가상 서버에 대한 일련의 기본 동작이 표시됩니다. '규칙 관리'버튼을 클릭하십시오. 'Directory / cherokee_themes'및 'Directory / icons'로 표시된 항목을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="d4050674ebe892a579201b057237751afd7c12a1" translate="yes" xml:space="preserve">
          <source>The referenced table maybe is on another schema or database. This option allows you to define that.</source>
          <target state="translated">참조 된 테이블이 다른 스키마 또는 데이터베이스에있을 수 있습니다. 이 옵션을 사용하면이를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c41550b95fee4e286b038e5f683c124d82612cd" translate="yes" xml:space="preserve">
          <source>The release command puts a reserved job back into the ready queue (and marks its state as &amp;ldquo;ready&amp;rdquo;) to be run by any client. It is normally used when the job fails because of a transitory error.</source>
          <target state="translated">release 명령은 예약 된 작업을 다시 준비 대기열로 되돌리고 상태를 &quot;준비&quot;로 표시하여 클라이언트가 실행합니다. 일시적인 오류로 인해 작업이 실패 할 때 일반적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b3b53263b17bede65278a39c76d8bc83619e518e" translate="yes" xml:space="preserve">
          <source>The request object is a simple value object that is passed between the dispatcher and controller classes. It packages the HTTP request environment.</source>
          <target state="translated">요청 오브젝트는 디스패처와 컨트롤러 클래스간에 전달되는 단순 값 오브젝트입니다. HTTP 요청 환경을 패키지합니다.</target>
        </trans-unit>
        <trans-unit id="07270402619c1e3fcfcd00b2b14b963a2729e06a" translate="yes" xml:space="preserve">
          <source>The response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:</source>
          <target state="translated">응답 객체는 일반적으로 직접 사용되지는 않지만 때로는 afterDispatch 이벤트와 같이 작업을 실행하기 전에 빌드되므로 응답에 직접 액세스하는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b0108c2553b456f6b365fb0890c4d0557156382" translate="yes" xml:space="preserve">
          <source>The result in this case is an object &lt;a href=&quot;../api/phalcon_mvc_model_resultset_complex&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Complex&lt;/em&gt;&lt;/a&gt;. This allows access to both complete objects and scalars at once:</source>
          <target state="translated">이 경우 결과는 &lt;a href=&quot;../api/phalcon_mvc_model_resultset_complex&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset \ Complex&lt;/em&gt;&lt;/a&gt; 객체 입니다. 이를 통해 한 번에 완전한 객체와 스칼라에 모두 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2180157d0c021e7031d14eed7af7fcb68a967448" translate="yes" xml:space="preserve">
          <source>The resulting profile data can be obtained from the listener:</source>
          <target state="translated">결과 프로파일 데이터는 리스너에서 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="84549226db7bc9e7032c1fb58bcf6f049fc2cf71" translate="yes" xml:space="preserve">
          <source>The router allows you to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:</source>
          <target state="translated">라우터를 사용하면 호스트 이름 제약 조건을 설정할 수 있습니다. 즉, 경로가 호스트 이름 제약 조건을 충족하는 경우에만 특정 경로 또는 경로 그룹이 일치하도록 제한 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bea01b20fc829fa30ad08c99566f6901cb13fb9" translate="yes" xml:space="preserve">
          <source>The router component allows you to define routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.</source>
          <target state="translated">라우터 구성 요소를 사용하면 요청을 받아야하는 컨트롤러 또는 처리기에 매핑 된 경로를 정의 할 수 있습니다. 라우터는 단순히 URI를 구문 분석하여이 정보를 결정합니다. 라우터에는 MVC 모드와 일치 전용 모드의 두 가지 모드가 있습니다. 첫 번째 모드는 MVC 응용 프로그램 작업에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="f3c6f628ff825d3b97c91169c0a1f93c3be5fd97" translate="yes" xml:space="preserve">
          <source>The salt is generated using pseudo-random bytes with the PHP&amp;rsquo;s function &lt;a href=&quot;http://php.net/manual/en/function.openssl-random-pseudo-bytes.php&quot;&gt;openssl_random_pseudo_bytes&lt;/a&gt; so is required to have the &lt;a href=&quot;http://php.net/manual/en/book.openssl.php&quot;&gt;openssl&lt;/a&gt; extension loaded.</source>
          <target state="translated">솔트는 PHP 함수 &lt;a href=&quot;http://php.net/manual/en/function.openssl-random-pseudo-bytes.php&quot;&gt;openssl_random_pseudo_bytes&lt;/a&gt; 와 함께 의사 랜덤 바이트를 사용하여 생성 되므로 &lt;a href=&quot;http://php.net/manual/en/book.openssl.php&quot;&gt;openssl&lt;/a&gt; 확장자를로드 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e7753ef9de015b02958b4ed174771d320b4425de" translate="yes" xml:space="preserve">
          <source>The salt is generated using pseudo-random bytes with the PHP&amp;rsquo;s function &lt;a href=&quot;https://php.net/manual/en/function.openssl-random-pseudo-bytes.php&quot;&gt;openssl_random_pseudo_bytes&lt;/a&gt; so is required to have the &lt;a href=&quot;https://php.net/manual/en/book.openssl.php&quot;&gt;openssl&lt;/a&gt; extension loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f77ef71dde823162c77d9b38930f98bed08312b" translate="yes" xml:space="preserve">
          <source>The scaffold generator will build several files in your application, along with some folders. Here&amp;rsquo;s a quick overview of what will be generated:</source>
          <target state="translated">스캐 폴드 생성기는 일부 폴더와 함께 애플리케이션에 여러 파일을 빌드합니다. 생성되는 내용에 대한 간단한 개요는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f2fdc450f693256bf8c5e18edd680e2adbc7df94" translate="yes" xml:space="preserve">
          <source>The screencast below shows how to integrate developer tools with the &lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot;&gt;PhpStorm IDE&lt;/a&gt;. The configuration steps could be easily adapted to other IDEs for PHP.</source>
          <target state="translated">아래의 스크린 캐스트는 개발자 도구를 &lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot;&gt;PhpStorm IDE&lt;/a&gt; 와 통합하는 방법을 보여줍니다 . 구성 단계는 PHP의 다른 IDE에 쉽게 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7473aacfc01a21ff682debe2af4ccaab52174a6" translate="yes" xml:space="preserve">
          <source>The searching by name handler would look like:</source>
          <target state="translated">이름 핸들러로 검색하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="db7ee111afbceeca0678b201a7f5d5588c50e683" translate="yes" xml:space="preserve">
          <source>The second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (&lt;code&gt;:controller&lt;/code&gt;) is the controller part of the route, the second the action and so on.</source>
          <target state="translated">두 번째 파라미터는 일치하는 부품이 컨트롤러 / 액션 / 파라미터에 바인딩되는 방법을 정의합니다. 일치하는 부분은 괄호 (둥근 괄호)로 구분 된 자리 표시 자 또는 하위 패턴입니다. 위의 예에서 첫 번째 하위 패턴 일치 ( &lt;code&gt;:controller&lt;/code&gt; )는 경로의 컨트롤러 부분이고 두 번째는 동작 등입니다.</target>
        </trans-unit>
        <trans-unit id="a9c2c7856caa748d8385441b00891f00fa7d8050" translate="yes" xml:space="preserve">
          <source>The second parameter of &lt;code&gt;addCss()&lt;/code&gt; and &lt;code&gt;addJs()&lt;/code&gt; says whether the resource is local or not (&lt;code&gt;true&lt;/code&gt; is local, &lt;code&gt;false&lt;/code&gt; is remote). By default, the assets manager will assume the resource is local:</source>
          <target state="translated">&lt;code&gt;addCss()&lt;/code&gt; 및 &lt;code&gt;addJs()&lt;/code&gt; 의 두 번째 매개 변수는 리소스가 로컬인지 아닌지를 나타냅니다 ( &lt;code&gt;true&lt;/code&gt; 는 로컬, &lt;code&gt;false&lt;/code&gt; 는 원격). 기본적으로 자산 관리자는 자원이 로컬 인 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="2a640fbf902a77e97a110b0e315a02da4aff6f9d" translate="yes" xml:space="preserve">
          <source>The second part that appears in the bootstrap file (public/index.php) is the autoloader:</source>
          <target state="translated">부트 스트랩 파일 (public / index.php)에 나타나는 두 번째 부분은 오토로더입니다.</target>
        </trans-unit>
        <trans-unit id="a1d41c9e55b2d9adc4da93b7bcf273e75f15189b" translate="yes" xml:space="preserve">
          <source>The service &amp;ldquo;response&amp;rdquo; (&lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon\Http\Response&lt;/em&gt;&lt;/a&gt;) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.</source>
          <target state="translated">&quot;response&quot;서비스 ( &lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon \ Http \ Response&lt;/em&gt;&lt;/a&gt; )는 생성자의 첫 번째 인수로 전달되도록 확인되며, 두 번째는 그대로 전달되는 부울 값 (true)입니다.</target>
        </trans-unit>
        <trans-unit id="44c8ff2d1e2a37bdcc5a6d555e627a8cd905b245" translate="yes" xml:space="preserve">
          <source>The service can be registered this way:</source>
          <target state="translated">이 방법으로 서비스를 등록 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f34f8afbb06952201854130020cf7b5d803de79d" translate="yes" xml:space="preserve">
          <source>The session component provides object-oriented wrappers to access session data.</source>
          <target state="translated">세션 구성 요소는 객체 지향 래퍼를 제공하여 세션 데이터에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="45ddc0d19d0ce3e3c88641f9d5c7f19eece5ce72" translate="yes" xml:space="preserve">
          <source>The set of records to be displayed at the current page</source>
          <target state="translated">현재 페이지에 표시 될 레코드 세트</target>
        </trans-unit>
        <trans-unit id="68ff5f3943b9220b14c20812acb6444f0c203143" translate="yes" xml:space="preserve">
          <source>The simplest way to generate a model is:</source>
          <target state="translated">모델을 생성하는 가장 간단한 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7169a30e6fcac8a96a81d58ce29b3e996a8a69f5" translate="yes" xml:space="preserve">
          <source>The static method &lt;code&gt;query()&lt;/code&gt; returns a &lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Criteria&lt;/em&gt;&lt;/a&gt; object that is friendly with IDE autocompleters.</source>
          <target state="translated">정적 메소드 &lt;code&gt;query()&lt;/code&gt; 는 IDE 자동 완성기와 친숙한 &lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Criteria&lt;/em&gt;&lt;/a&gt; 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="206c1870c71eedf927d0d9d9b33b73e5b406e2a4" translate="yes" xml:space="preserve">
          <source>The stream logger writes messages to a valid registered stream in PHP. A list of streams is available &lt;a href=&quot;http://php.net/manual/en/wrappers.php&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">스트림 로거는 PHP에서 유효한 등록 된 스트림에 메시지를 씁니다. 스트림 목록은 &lt;a href=&quot;http://php.net/manual/en/wrappers.php&quot;&gt;여기에 있습니다&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="f34d0f3cc44d6912bebada3834d46adce0506542" translate="yes" xml:space="preserve">
          <source>The stream logger writes messages to a valid registered stream in PHP. A list of streams is available &lt;a href=&quot;https://php.net/manual/en/wrappers.php&quot;&gt;here&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e71be2a610859aea39b3283c82ec6f4ed37055" translate="yes" xml:space="preserve">
          <source>The third option is to register directories, in which classes could be found. This option is not recommended in terms of performance, since Phalcon will need to perform a significant number of file stats on each folder, looking for the file with the same name as the class. It&amp;rsquo;s important to register the directories in relevance order. Remember always add a trailing slash at the end of the paths.</source>
          <target state="translated">세 번째 옵션은 클래스를 찾을 수있는 디렉토리를 등록하는 것입니다. Phalcon은 각 폴더에서 많은 수의 파일 통계를 수행하여 클래스와 동일한 이름의 파일을 찾아야하므로이 옵션은 성능 측면에서 권장되지 않습니다. 디렉토리를 관련 순서대로 등록하는 것이 중요합니다. 항상 경로 끝에 슬래시를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="68b9e757284ab8063f70b4c319b15587dace100d" translate="yes" xml:space="preserve">
          <source>The tutorial/public/index.php file should look like:</source>
          <target state="translated">tutorial / public / index.php 파일은 다음과 같아야합니다 :</target>
        </trans-unit>
        <trans-unit id="2ede9cc265a4ae92b974fd69dbab1a4867da3137" translate="yes" xml:space="preserve">
          <source>The watch command adds the named tube to the watch list for the current connection.</source>
          <target state="translated">watch 명령은 명명 된 튜브를 현재 연결의 감시 목록에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="b7985639cc5dbecebf4f03f7e6fef048f19c2ca1" translate="yes" xml:space="preserve">
          <source>The whole &amp;lsquo;for&amp;rsquo; block provides the following:</source>
          <target state="translated">전체 'for'블록은 다음을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ad054c8adc2bb57e38e1fed871bb484f8e840b8f" translate="yes" xml:space="preserve">
          <source>The width will automatically be generated to keep the proportions the same; if you specify a width, it will be ignored.</source>
          <target state="translated">너비는 비율을 동일하게 유지하기 위해 자동으로 생성됩니다. 너비를 지정하면 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="7524e6f72459769b9b36a148116e4951f69cc97e" translate="yes" xml:space="preserve">
          <source>Then access it from a controller or view:</source>
          <target state="translated">그런 다음 컨트롤러 또는보기에서 액세스하십시오.</target>
        </trans-unit>
        <trans-unit id="ff4b6575493df8beb472461b4a1a30b4b13cba67" translate="yes" xml:space="preserve">
          <source>Then add the instance to the application:</source>
          <target state="translated">그런 다음 애플리케이션에 인스턴스를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d5b50c70f1fae058a1ee853af6fba5b7ca36dcc5" translate="yes" xml:space="preserve">
          <source>Then at the end of the file save the profiled data:</source>
          <target state="translated">그런 다음 파일 끝에서 프로파일 링 된 데이터를 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="54310a877111d1f2d52c4e8b4553f414f3ecb8ca" translate="yes" xml:space="preserve">
          <source>Then change the definition of the service &amp;lsquo;tag&amp;rsquo;:</source>
          <target state="translated">그런 다음 서비스 '태그'의 정의를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="8dc94009acacb8cf175159db42621b363f418a45" translate="yes" xml:space="preserve">
          <source>Then enter the folder where the tools were cloned and execute &amp;rdquo;. ./phalcon.sh&amp;rdquo;, (don&amp;rsquo;t forget the dot at beginning of the command):</source>
          <target state="translated">그런 다음 도구가 복제 된 폴더를 입력하고&amp;rdquo;를 실행하십시오. ./phalcon.sh&amp;rdquo;, (명령 시작시 점을 잊지 마십시오) :</target>
        </trans-unit>
        <trans-unit id="b3fc331171b0c09fd3e6682cf75f09c17b30f43e" translate="yes" xml:space="preserve">
          <source>Then in a view, these resources can be printed:</source>
          <target state="translated">그런 다음보기에서 다음 자원을 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9916530577ab1f3fb4a0cf919520abb32061a73a" translate="yes" xml:space="preserve">
          <source>Then in the controller&amp;rsquo;s action you can check if the CSRF token is valid:</source>
          <target state="translated">그런 다음 컨트롤러 작업에서 CSRF 토큰이 유효한지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8af8224d3445163f95feffb675cea7d63e3c93e" translate="yes" xml:space="preserve">
          <source>Then in the file (&amp;rdquo;../app/config/routes.php&amp;rdquo;) return the object resolved:</source>
          <target state="translated">그런 다음 파일 ( &quot;../app/config/routes.php&quot;)에서 해결 된 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="05f90620b12254709e2be5034b8872a54136e8d2" translate="yes" xml:space="preserve">
          <source>Then in the views:</source>
          <target state="translated">그런 다음보기에서 :</target>
        </trans-unit>
        <trans-unit id="8ab8d8dd4fcc76ea212b51c07a66796abf6ae9c1" translate="yes" xml:space="preserve">
          <source>Then initialize and use your own validator:</source>
          <target state="translated">그런 다음 자신의 유효성 검사기를 초기화하고 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="55939291b853bc6f6085968b04fc70c6233a6778" translate="yes" xml:space="preserve">
          <source>Then mount the group in the router:</source>
          <target state="translated">그런 다음 라우터에 그룹을 마운트하십시오.</target>
        </trans-unit>
        <trans-unit id="37e71e3e8c13501ba856fb7dc8ae0ee5425a671f" translate="yes" xml:space="preserve">
          <source>Then once the service is resolved, the &lt;code&gt;$di&lt;/code&gt; will be passed to &lt;code&gt;setDi()&lt;/code&gt; automatically:</source>
          <target state="translated">그런 다음 서비스가 해결되면 &lt;code&gt;$di&lt;/code&gt; 는 자동으로 &lt;code&gt;setDi()&lt;/code&gt; 로 전달 됩니다.</target>
        </trans-unit>
        <trans-unit id="9f47aa8758370a6e1b8fd4275d310dc68cc3ed9b" translate="yes" xml:space="preserve">
          <source>Then point your browser to &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt; to check if everything is working.</source>
          <target state="translated">그런 다음 브라우저가 &lt;a href=&quot;http://localhost:8000/&quot;&gt;http : // localhost : 8000 /&lt;/a&gt; 을 가리키면 모든 것이 작동하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="538073cd80ef8d06ab958d26036f06c560556c22" translate="yes" xml:space="preserve">
          <source>Then the messages would be printed as follows:</source>
          <target state="translated">그러면 메시지가 다음과 같이 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="cfda689fa31933494625e59195abe2c32f978d34" translate="yes" xml:space="preserve">
          <source>Then use this class as base class for each &amp;lsquo;Cacheable&amp;rsquo; model:</source>
          <target state="translated">그런 다음이 클래스를 각 'Cacheable'모델의 기본 클래스로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="afdd124d62510eb32daf08bea2c782a2d3a03c62" translate="yes" xml:space="preserve">
          <source>Then you can use it in your model as follows:</source>
          <target state="translated">그런 다음 모델에서 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="906b503bfcf6342ec99dbd223196fe688d55cd98" translate="yes" xml:space="preserve">
          <source>Then you can use the console inside of any task. Below is an example of a modified MainTask.php:</source>
          <target state="translated">그런 다음 모든 작업 내에서 콘솔을 사용할 수 있습니다. 아래는 수정 된 MainTask.php의 예입니다.</target>
        </trans-unit>
        <trans-unit id="925b299dd77d3502b2f745f8dcea94babe9c2aee" translate="yes" xml:space="preserve">
          <source>Then you can use the new names naturally in your code:</source>
          <target state="translated">그런 다음 코드에서 새 이름을 자연스럽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="306e0595f3d456f04bafedb0d313c0517b4dead5" translate="yes" xml:space="preserve">
          <source>Then you can use them in &lt;code&gt;isAllowed()&lt;/code&gt; method.</source>
          <target state="translated">그런 다음 &lt;code&gt;isAllowed()&lt;/code&gt; 메소드 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c4e7a988c7d7de2760a6805a0929a4d75393523a" translate="yes" xml:space="preserve">
          <source>Then you can validate the form according to the input entered by the user:</source>
          <target state="translated">그런 다음 사용자가 입력 한 입력에 따라 양식의 유효성을 검사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fae2094d2c0056729934905452ddd9be2c5bedd" translate="yes" xml:space="preserve">
          <source>Then, based on the built params we perform the query:</source>
          <target state="translated">그런 다음 내장 매개 변수를 기반으로 쿼리를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="966d7db8462d18e7802b380f599c5e6454d64917" translate="yes" xml:space="preserve">
          <source>Then, for example, in a controller you can use it as follows:</source>
          <target state="translated">그런 다음 예를 들어 컨트롤러에서 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f424f5e6498d52f151311f6044a0f2c82b8b2830" translate="yes" xml:space="preserve">
          <source>Then, in the &lt;code&gt;initialize()&lt;/code&gt; method, we define the connection service for the model:</source>
          <target state="translated">그런 다음 &lt;code&gt;initialize()&lt;/code&gt; 메소드에서 모델의 연결 서비스를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="e562fac41f70749489fb3e4d4398e0a303241136" translate="yes" xml:space="preserve">
          <source>Then, in the index.php file we create the following:</source>
          <target state="translated">그런 다음 index.php 파일에서 다음을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ecd1a03c064ef34dca7c1c339895bb65af68fc94" translate="yes" xml:space="preserve">
          <source>Then, using for example the component &lt;a href=&quot;../api/phalcon_mvc_url&quot;&gt;&lt;em&gt;Phalcon\Mvc\Url&lt;/em&gt;&lt;/a&gt; we can build routes from its name:</source>
          <target state="translated">그런 다음 &lt;a href=&quot;../api/phalcon_mvc_url&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Url&lt;/em&gt;&lt;/a&gt; 구성 요소를 사용하여 이름에서 경로를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59afa63f971fca28362eb60fad0121e70ac908d4" translate="yes" xml:space="preserve">
          <source>Then, we can access that service in several ways:</source>
          <target state="translated">그런 다음 여러 가지 방법으로 해당 서비스에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7446f447abca3160f234be91641477f3cb442a99" translate="yes" xml:space="preserve">
          <source>Then, we receive the parameters from the form:</source>
          <target state="translated">그런 다음 양식에서 매개 변수를받습니다.</target>
        </trans-unit>
        <trans-unit id="31ee64bf8c9cdaf438def702ad0d2c0457d6af04" translate="yes" xml:space="preserve">
          <source>There are adapters available for several template engines on the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine&quot;&gt;Phalcon Incubator의&lt;/a&gt; 여러 템플릿 엔진에 사용할 수있는 어댑터가 있습니다</target>
        </trans-unit>
        <trans-unit id="ff0fc815ad41baab0d8f4f17c8e664735080351e" translate="yes" xml:space="preserve">
          <source>There are four built-in message types supported:</source>
          <target state="translated">4 가지 기본 제공 메시지 유형이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="b5ce5a7204ec525fcfe42f6b5d9ecad0a84c80a9" translate="yes" xml:space="preserve">
          <source>There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.</source>
          <target state="translated">일대일, 일대 다, 다 대일 및 다 대다의 네 가지 유형의 관계가 있습니다. 관계는 단방향 또는 양방향 일 수 있으며, 각각 단순하거나 (일대일 모델) 또는 더 복잡 할 수 있습니다 (모델의 조합). 모델 관리자는 이러한 관계에 대한 외래 키 제약 조건을 관리하며, 이러한 정의는 참조 무결성 및 모델에 대한 관련 레코드에 쉽고 빠르게 액세스하는 데 도움이됩니다. 관계 구현을 통해 각 레코드에서 관련 모델의 데이터에 균일 한 방식으로 쉽게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0c161bf5bfe5a3eddbc40c8f4dd28b02cad78e0" translate="yes" xml:space="preserve">
          <source>There are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.</source>
          <target state="translated">자체 템플릿 엔진을 통합하거나 만들 수있는 템플릿 엔진이 많이 있습니다. 외부 템플리트 엔진 사용을 시작하는 첫 번째 단계는이를위한 어댑터를 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="00c569522300977f433a02b96854621ebecc85b5" translate="yes" xml:space="preserve">
          <source>There are many things in the above example that worth detailing. First of all, active items in the current page are traversed using a Volt&amp;rsquo;s &amp;lsquo;for&amp;rsquo;. Volt provides a simpler syntax for a PHP &amp;lsquo;foreach&amp;rsquo;.</source>
          <target state="translated">위의 예에는 자세히 설명 할 가치가있는 것들이 많이 있습니다. 우선, 현재 페이지의 활성 항목은 볼트의 'for'를 사용하여 순회합니다. Volt는 PHP 'foreach'에 대해 더 간단한 구문을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c5703657932090b6a77b0095d9951353bc6a78f3" translate="yes" xml:space="preserve">
          <source>There are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions/closures. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.</source>
          <target state="translated">컨테이너에 서비스를 등록하는 방법에는 여러 가지가 있습니다. INVO에서는 대부분의 서비스가 익명 기능 / 클로저를 사용하여 등록되었습니다. 덕분에 개체가 느리게 인스턴스화되어 응용 프로그램에 필요한 리소스가 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="49e2cedf2ec8bf8109dad5c71505b481a9d6bed7" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;Phalcon Incubator&lt;/a&gt; 에서이 구성 요소에 사용할 수있는 어댑터가 더 있습니다</target>
        </trans-unit>
        <trans-unit id="54b11530167977d1d7f96e69e502ca767cb35aa4" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt; 에서이 구성 요소에 사용할 수있는 어댑터가 더 있습니다</target>
        </trans-unit>
        <trans-unit id="0536e18658f821eeef26b28ce359e0fecad6b1d3" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt; 에서이 구성 요소에 사용할 수있는 어댑터가 더 있습니다</target>
        </trans-unit>
        <trans-unit id="00edd0039107929b21b55053efc1f94ae0155d38" translate="yes" xml:space="preserve">
          <source>There are several modes of resizing:</source>
          <target state="translated">크기 조정에는 여러 가지 모드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ad06d8a760406dd09b1f3b1ead784f16066138a" translate="yes" xml:space="preserve">
          <source>There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.</source>
          <target state="translated">모델을 작성하는 방법에는 여러 가지가 있습니다. 기본 데이터베이스 연결 또는 일부 선택적으로 모든 모델을 작성할 수 있습니다. 모델은 필드 표현에 대한 공용 속성을 가질 수 있거나 setter / getter를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f90c8e6cb71c2d02568c3a6e7a126a96359d4803" translate="yes" xml:space="preserve">
          <source>There are several ways to find out the best available locale using &lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;. One of them is to check the HTTP &amp;ldquo;Accept-Language&amp;rdquo; header:</source>
          <target state="translated">&lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl을&lt;/a&gt; 사용하여 가장 적합한 로케일을 찾는 방법에는 여러 가지가 있습니다 . 그중 하나는 HTTP &quot;Accept-Language&quot;헤더를 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="2aea3fce9258e4ea0ef7c52573320b4d0d4161fe" translate="yes" xml:space="preserve">
          <source>There are several ways to find out the best available locale using &lt;a href=&quot;https://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;. One of them is to check the HTTP &amp;ldquo;Accept-Language&amp;rdquo; header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa2c789c4dda9fcddfedb9bc78df76cc093fcfb" translate="yes" xml:space="preserve">
          <source>There are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data have been stored with.</source>
          <target state="translated">캐시 된 데이터의 업데이트로 인해 캐시 항목을 강제로 무효화해야하는 경우가 있습니다. 유일한 요구 사항은 데이터가 저장된 키를 아는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cc640701d23560bde1c179090af7d1870024608e" translate="yes" xml:space="preserve">
          <source>There is no limit on the &amp;ldquo;forwards&amp;rdquo; you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">순환 참조가되지 않는 한 응용 프로그램에서 가질 수있는 &quot;전달&quot;에 대한 제한은 없습니다.이 시점에서 응용 프로그램이 중지됩니다. 디스패치 루프에 의해 디스패치 될 다른 조치가없는 경우 디스패처는 &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt; 가 관리하는 MVC의 뷰 계층을 자동으로 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="6fc26e9224d68bfceaf2bf9bb6680286f6717a8b" translate="yes" xml:space="preserve">
          <source>These are detailed instructions on how to install the developer tools on different platforms:</source>
          <target state="translated">다른 플랫폼에 개발자 도구를 설치하는 방법에 대한 자세한 지침은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="84b8e8bf4670fde36081b87b5b3a2c0b25ed0072" translate="yes" xml:space="preserve">
          <source>These files are automatically loaded in the &lt;code&gt;register()&lt;/code&gt; method.</source>
          <target state="translated">이러한 파일은 &lt;code&gt;register()&lt;/code&gt; 메소드 에 자동으로로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="20db73437c0afcbf8da97c3717848e5d984052b6" translate="yes" xml:space="preserve">
          <source>These methods &amp;ldquo;create&amp;rdquo; and &amp;ldquo;update&amp;rdquo; also accept an array of values as parameter.</source>
          <target state="translated">이러한 메소드 &quot;create&quot;및 &quot;update&quot;도 매개 변수로 값 배열을 승인합니다.</target>
        </trans-unit>
        <trans-unit id="fe06e857db4634b6b553dacd43b41024850f0999" translate="yes" xml:space="preserve">
          <source>These objects are more powerful than standard arrays. One of the greatest features of the &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset&lt;/em&gt;&lt;/a&gt; is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.</source>
          <target state="translated">이러한 객체는 표준 배열보다 강력합니다. &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset&lt;/em&gt;&lt;/a&gt; 의 가장 큰 특징 중 하나는 언제든지 메모리에 레코드가 하나만 있다는 것입니다. 이는 특히 많은 양의 데이터로 작업 할 때 메모리 관리에 크게 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="99003b4d86374d1db754a8a05fa9b336031a7f0d" translate="yes" xml:space="preserve">
          <source>These placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:</source>
          <target state="translated">이 자리 표시자는 개발자가 더 읽기 쉽고 이해하기 쉬운 정규식을 작성하는 데 도움이됩니다. 다음과 같은 자리 표시자가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="04adcf526c1ca679ba020b063572ff500b25d78c" translate="yes" xml:space="preserve">
          <source>These services are &amp;ldquo;shared&amp;rdquo;, which means that we are always accessing the same instance regardless of the place where we invoke them.</source>
          <target state="translated">이러한 서비스는 &quot;공유&quot;되므로 서비스를 호출하는 장소에 관계없이 항상 동일한 인스턴스에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="b709aa40588ea230a4951ae58ebe0179f7e12ac7" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for Linux.</source>
          <target state="translated">이 단계는 Linux 용 Phalcon Developer Tools 설치 프로세스를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="e153b0cf1ac6d9302550217ce4aabb5398fb1a56" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for OS/X.</source>
          <target state="translated">이 단계는 Phalcon Developer Tools for OS / X 설치 프로세스를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="fc57a74fc589ddda2ae6439a445e5e59506e0d36" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for Windows.</source>
          <target state="translated">이 단계는 Windows 용 Phalcon Developer Tools 설치 프로세스를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="2e43de4e6bb39804486fff9914534c12d071166f" translate="yes" xml:space="preserve">
          <source>These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.</source>
          <target state="translated">이 도구는 스켈레톤 코드를 생성하는 데 유용한 스크립트 모음입니다. 간단한 명령으로 응용 프로그램의 핵심 구성 요소를 생성 할 수 있으므로 Phalcon을 사용하여 응용 프로그램을 쉽게 개발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98cdb2149c058a667eabccfb71880ab06044889d" translate="yes" xml:space="preserve">
          <source>These values that don&amp;rsquo;t represent complete objects are what we call scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:</source>
          <target state="translated">완전한 객체를 나타내지 않는 이러한 값을 스칼라라고합니다. PHQL을 사용하면 필드, 함수, 리터럴, 표현식 등 모든 유형의 스칼라를 쿼리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="26f3a3cbd1b01bb43f507a531e45d5df16068bee" translate="yes" xml:space="preserve">
          <source>Think if we had to create this object in many parts of our application. In the future, if we do not require any of the dependencies, we need to go through the entire code base to remove the parameter in any constructor or setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:</source>
          <target state="translated">응용 프로그램의 많은 부분에서이 객체를 만들어야하는지 생각해보십시오. 앞으로 의존성을 필요로하지 않으면 코드를 삽입 한 생성 자나 설정자에서 매개 변수를 제거하기 위해 전체 코드베이스를 거쳐야합니다. 이를 해결하기 위해 글로벌 레지스트리로 다시 돌아가서 컴포넌트를 작성합니다. 그러나 객체를 만들기 전에 새로운 추상화 계층을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e0d2d7fef2379d33a3251636b6ac166e493d28ee" translate="yes" xml:space="preserve">
          <source>This action simply pass a form instance of SignUpForm to the view, which itself is rendered to allow the user enter the login details:</source>
          <target state="translated">이 조치는 단순히 SignUpForm의 양식 인스턴스를보기로 전달하며, 사용자는 로그인 세부 사항을 입력 할 수 있도록 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="3c7108bdab1f42e451ee574de6cd54f788d3b726" translate="yes" xml:space="preserve">
          <source>This adapter allows to paginate data using a Phalcon\Mvc\Model resultset as a base.</source>
          <target state="translated">이 어댑터를 사용하면 Phalcon \ Mvc \ Model 결과 집합을 기본으로 사용하여 데이터를 페이지 매김 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7a676fff406fd66a0774db2362e2d3277e91cbb" translate="yes" xml:space="preserve">
          <source>This adapter is the default. The metadata is cached only during the request. When the request is completed, the metadata are released as part of the normal memory of the request. This adapter is perfect when the application is in development so as to refresh the metadata in each request containing the new and/or modified fields.</source>
          <target state="translated">이 어댑터가 기본값입니다. 메타 데이터는 요청 중에 만 캐시됩니다. 요청이 완료되면 메타 데이터는 요청의 일반 메모리의 일부로 해제됩니다. 이 어댑터는 애플리케이션이 개발 중일 때 완벽하며 새 필드 및 / 또는 수정 된 필드를 포함하는 각 요청에서 메타 데이터를 새로 고칩니다.</target>
        </trans-unit>
        <trans-unit id="3b8d79fb24893f0b90ee4553a4c7df953b3a7699" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in Redis</source>
          <target state="translated">이 어댑터는 Redis에서 세션을 저장합니다</target>
        </trans-unit>
        <trans-unit id="a4859dd02fc83e785c7447b63f383157b9f3c4ef" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in libmemcached</source>
          <target state="translated">이 어댑터는 세션을 libmemcached에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="c8e7b6a5442e53f751446fd561fe4151e4a0d4b9" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in memcache</source>
          <target state="translated">이 어댑터는 세션을 memcache에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="0ef9ec927d9d921a283bad925fb5381b3542da3d" translate="yes" xml:space="preserve">
          <source>This adapter stores metadata in the &lt;code&gt;$_SESSION&lt;/code&gt; superglobal. This adapter is recommended only when the application is actually using a small number of models. The metadata are refreshed every time a new session starts. This also requires the use of &lt;code&gt;session_start()&lt;/code&gt; to start the session before using any models.</source>
          <target state="translated">이 어댑터는 메타 데이터를 &lt;code&gt;$_SESSION&lt;/code&gt; 슈퍼 글로벌 에 저장합니다 . 이 어댑터는 응용 프로그램이 실제로 적은 수의 모델을 사용하는 경우에만 권장됩니다. 메타 데이터는 새 세션이 시작될 때마다 새로 고쳐집니다. 또한 모델을 사용하기 전에 &lt;code&gt;session_start()&lt;/code&gt; 를 사용하여 세션을 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="8c54a77f3d8fb22ad443613f0a0de6e7df15ffeb" translate="yes" xml:space="preserve">
          <source>This adapter uses &lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt; to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.</source>
          <target state="translated">이 어댑터는 &lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt; 를 사용하여 테이블 메타 데이터를 저장합니다. 옵션으로 메타 데이터의 수명을 지정할 수 있습니다. 응용 프로그램이 프로덕션 단계에있을 때 메타 데이터를 저장하는 가장 권장되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="e1a819989ebef00f9cea975987cbf1fa7f416c78" translate="yes" xml:space="preserve">
          <source>This adapter uses &lt;a href=&quot;https://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt; to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454247304d2cb37d9698895a5eeaa091f9a09e26" translate="yes" xml:space="preserve">
          <source>This adapter uses plain files to store metadata. By using this adapter the disk-reading is increased but the database access is reduced.</source>
          <target state="translated">이 어댑터는 일반 파일을 사용하여 메타 데이터를 저장합니다. 이 어댑터를 사용하면 디스크 읽기는 증가하지만 데이터베이스 액세스는 감소합니다.</target>
        </trans-unit>
        <trans-unit id="ac6a633007b292928b94ae4d440788afd472c176" translate="yes" xml:space="preserve">
          <source>This adapter uses the &lt;a href=&quot;http://www.php.net/manual/en/book.apc.php&quot;&gt;Alternative PHP Cache (APC)&lt;/a&gt; to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.</source>
          <target state="translated">이 어댑터는 &lt;a href=&quot;http://www.php.net/manual/en/book.apc.php&quot;&gt;APC (Alternative PHP Cache)&lt;/a&gt; 를 사용하여 테이블 메타 데이터를 저장합니다. 옵션으로 메타 데이터의 수명을 지정할 수 있습니다. 응용 프로그램이 프로덕션 단계에있을 때 메타 데이터를 저장하는 가장 권장되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="613dcec271cd0bca5d506e9e5dc25022113c0203" translate="yes" xml:space="preserve">
          <source>This adapter uses the base64_encode/base64_decode PHP&amp;rsquo;s functions</source>
          <target state="translated">이 어댑터는 base64_encode / base64_decode PHP 기능을 사용합니다</target>
        </trans-unit>
        <trans-unit id="8407319adc0108601b3ac31705dcc1fe40f9fe84" translate="yes" xml:space="preserve">
          <source>This adapter uses the json_encode/json_decode PHP&amp;rsquo;s functions</source>
          <target state="translated">이 어댑터는 json_encode / json_decode PHP 기능을 사용합니다</target>
        </trans-unit>
        <trans-unit id="a5c7a136f590c470fd4b417f248b5016a7e38a2d" translate="yes" xml:space="preserve">
          <source>This adapter uses the special memcached key &amp;ldquo;_PHCM&amp;rdquo; to store all the keys internally used by the adapter</source>
          <target state="translated">이 어댑터는 특수 memcached 키&amp;ldquo;_PHCM&amp;rdquo;을 사용하여 어댑터가 내부적으로 사용하는 모든 키를 저장합니다</target>
        </trans-unit>
        <trans-unit id="932f02077c71f103e556b3ed13bfbb7d4a5c2ee6" translate="yes" xml:space="preserve">
          <source>This adapter uses the special redis key &amp;ldquo;_PHCR&amp;rdquo; to store all the keys internally used by the adapter</source>
          <target state="translated">이 어댑터는 특수 redis 키&amp;ldquo;_PHCR&amp;rdquo;을 사용하여 어댑터가 내부적으로 사용하는 모든 키를 저장합니다</target>
        </trans-unit>
        <trans-unit id="ae6758c24cff2059f114ae5181e6d8557ad9631c" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to DELETE</source>
          <target state="translated">이 주석은 메소드를 HTTP 메소드를 DELETE로 제한하는 경로로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="3a25e503d16ee8c141af4d667b256e757f7f5b96" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to GET</source>
          <target state="translated">이 주석은 메소드를 HTTP 메소드를 GET으로 제한하는 경로로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="3aa9a48bc5c37bcf35ecc290651b8715cdc88076" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to OPTIONS</source>
          <target state="translated">이 주석은 메소드를 HTTP 메소드를 OPTIONS로 제한하는 경로로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b0c693dfac24ee45df3abc3d716fbbc9b8be74e0" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to POST</source>
          <target state="translated">이 주석은 메소드를 HTTP 메소드를 POST로 제한하는 경로로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="c9a59a6a96069c517edfb611fe9ab09371111ee6" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to PUT</source>
          <target state="translated">이 주석은 메소드를 HTTP 메소드를 PUT으로 제한하는 경로로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="5b48a807bc25cb1ae5f659e06c27fd5b00067ae6" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route. This annotation must be placed in a method docblock</source>
          <target state="translated">이 주석은 메소드를 경로로 표시합니다. 이 주석은 메소드 docblock에 배치해야합니다</target>
        </trans-unit>
        <trans-unit id="46f7e60c29c9ceed4dfe8bf927e3a8c3f7416c80" translate="yes" xml:space="preserve">
          <source>This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt;:</source>
          <target state="translated">그러나 이러한 접근 방식은 문제를 해결하지만 주문이나 조건과 같은 다른 매개 변수를 추가하려면 더 복잡한 방법을 만들어야합니다. 또한 관련 레코드 또는 &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; 를 사용하여 데이터를 얻는 경우이 메소드가 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e5a39e469e8f6bb6325aef6274da00593959ec2c" translate="yes" xml:space="preserve">
          <source>This backend will store cached content into files in the local server. The available options for this backend are:</source>
          <target state="translated">이 백엔드는 캐시 된 내용을 로컬 서버의 파일에 저장합니다. 이 백엔드에 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2ed3eb13db1459fed5baf8b485ac81c019356c37" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on Alternative PHP Cache (&lt;a href=&quot;http://php.net/apc&quot;&gt;APC&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">이 백엔드는 캐시 된 컨텐츠를 &lt;a href=&quot;http://php.net/apc&quot;&gt;APC&lt;/a&gt; (Alternative PHP Cache )에 저장합니다. 이 백엔드에 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0aa7b99dc28f8beacd2f400a3e5e4049faa2b4d5" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on Alternative PHP Cache (&lt;a href=&quot;https://php.net/apc&quot;&gt;APC&lt;/a&gt;). The available options for this backend are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5b6d56c377f767a52770c27dde4c262315f70a" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on XCache (&lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">이 백엔드는 XCache ( &lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt; ) 에 캐시 된 컨텐츠를 저장 합니다. 이 백엔드에 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c3f17f6bc11ef8c9004a478925f7c2859e8127d9" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on XCache (&lt;a href=&quot;https://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;). The available options for this backend are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bdada41ca5545b1a66be4b2b020b39d65e94ac" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a MongoDB server. The available options for this backend are:</source>
          <target state="translated">이 백엔드는 캐시 된 컨텐츠를 MongoDB 서버에 저장합니다. 이 백엔드에 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cc511a3c0b4431d2627f7457b7b348e9559bb04e" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a Redis server (&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">이 백엔드는 캐시 된 컨텐츠를 Redis 서버 ( &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; )에 저장합니다. 이 백엔드에 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="09e8bd2072de5f7e32b8cdf951e153bb18b0bbe1" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a memcached server. The available options for this backend are:</source>
          <target state="translated">이 백엔드는 캐시 된 컨텐츠를 memcached 서버에 저장합니다. 이 백엔드에 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd5dfa74e5dfced4703c2b625c7a82bc4c7f710f" translate="yes" xml:space="preserve">
          <source>This behavior accepts two options: &amp;lsquo;field&amp;rsquo; and &amp;lsquo;value&amp;rsquo;, &amp;lsquo;field&amp;rsquo; determines what field must be updated and &amp;lsquo;value&amp;rsquo; the value to be deleted. Let&amp;rsquo;s pretend the table &amp;lsquo;users&amp;rsquo; has the following data:</source>
          <target state="translated">이 동작은 'field'와 'value'의 두 가지 옵션을 허용합니다. 'field'는 업데이트 할 필드를 결정하고 삭제할 값을 'value'로 결정합니다. 'users'테이블에 다음 데이터가 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="5b222b7ae9dfefc2f2bd6d17faa445d59e3d03b0" translate="yes" xml:space="preserve">
          <source>This behavior can be used in the following way:</source>
          <target state="translated">이 동작은 다음과 같은 방식으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a19dca43cacc4d2e970fb0da09eb1bd83cd30db" translate="yes" xml:space="preserve">
          <source>This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:</source>
          <target state="translated">이 동작은 옵션 배열을 수신합니다. 첫 번째 레벨 키는 열을 할당해야하는시기를 나타내는 이벤트 이름이어야합니다.</target>
        </trans-unit>
        <trans-unit id="28d347b4ed48d3a2b8c7ceecd8625d2bd915fba7" translate="yes" xml:space="preserve">
          <source>This being the most common case, the application is installed in any directory under the document root. In this case, we use two .htaccess files, the first one to hide the application code forwarding all requests to the application&amp;rsquo;s document root (public/).</source>
          <target state="translated">가장 일반적인 경우로 응용 프로그램은 문서 루트 아래의 모든 디렉토리에 설치됩니다. 이 경우, 두 개의 .htaccess 파일을 사용합니다. 첫 번째 파일은 모든 요청을 응용 프로그램의 문서 루트 (public /)로 전달하는 응용 프로그램 코드를 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="9dea2d4f6f2833b4bf4fbd936d0817b6658313b0" translate="yes" xml:space="preserve">
          <source>This chapter explains the possible points where it is possible to implement caching to improve performance. The framework gives you the tools to implement the cache where you demand of it according to the architecture of your application.</source>
          <target state="translated">이 장에서는 성능 향상을 위해 캐싱을 구현할 수있는 가능한 지점에 대해 설명합니다. 프레임 워크는 애플리케이션 아키텍처에 따라 캐시를 요구하는 곳에 도구를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="359602167f12084580340e70d0d185dea0eeb081" translate="yes" xml:space="preserve">
          <source>This class allows to access services in the services container by just only accessing a public property with the same name of a registered service</source>
          <target state="translated">이 클래스는 동일한 이름의 등록 된 서비스로만 공용 자산에 액세스하여 서비스 컨테이너의 서비스에 액세스 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="98d85fe07e7cb9ff6790512d5dcde77adfe369a9" translate="yes" xml:space="preserve">
          <source>This class allows to get the installed version of the framework</source>
          <target state="translated">이 클래스를 사용하면 설치된 버전의 프레임 워크를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78f1581244d0ec60243b5bb84c6ce68674511e1d" translate="yes" xml:space="preserve">
          <source>This class allows to insert/update raw data without quoting or formatting.</source>
          <target state="translated">이 클래스를 사용하면 따옴표 나 형식을 지정하지 않고 원시 데이터를 삽입 / 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74b9aaa8649940873da1b9bd772f6eb9cdfb0472" translate="yes" xml:space="preserve">
          <source>This class builds instances based on complex definitions</source>
          <target state="translated">이 클래스는 복잡한 정의를 기반으로 인스턴스를 빌드합니다.</target>
        </trans-unit>
        <trans-unit id="9a8f32e7ed9387cbf3a753073bda2637b2955be4" translate="yes" xml:space="preserve">
          <source>This class defines resource entity and its description</source>
          <target state="translated">이 클래스는 자원 엔티티 및 설명을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="46099886800a795d451a3b96391177e45b3db15e" translate="yes" xml:space="preserve">
          <source>This class defines role entity and its description</source>
          <target state="translated">이 클래스는 역할 엔티티 및 설명을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="17232dbed8386c9f8d78b0d20c4017f8f28df4d7" translate="yes" xml:space="preserve">
          <source>This class extends the &lt;a href=&quot;../api/phalcon_mvc_user_component&quot;&gt;&lt;em&gt;Phalcon\Mvc\User\Component&lt;/em&gt;&lt;/a&gt;. It is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we are going to register our first user component in the services container:</source>
          <target state="translated">이 클래스는 &lt;a href=&quot;../api/phalcon_mvc_user_component&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ User \ Component를&lt;/em&gt;&lt;/a&gt; 확장합니다 . 이 클래스를 사용하여 구성 요소를 확장하지는 않지만 응용 프로그램 서비스에보다 빠르게 액세스 할 수 있습니다. 이제 첫 번째 사용자 컴포넌트를 서비스 컨테이너에 등록하겠습니다.</target>
        </trans-unit>
        <trans-unit id="a7967b846c882713793b78a5442adefc228d51cb" translate="yes" xml:space="preserve">
          <source>This class identifies each profile in a Phalcon\Db\Profiler</source>
          <target state="translated">이 클래스는 Phalcon \ Db \ Profiler에서 각 프로파일을 식별합니다.</target>
        </trans-unit>
        <trans-unit id="091f08cb4cf3b07ee8c2f8b05a578e3fd0b0e681" translate="yes" xml:space="preserve">
          <source>This class implements common functionality for backend adapters. A backend cache adapter may extend this class</source>
          <target state="translated">이 클래스는 백엔드 어댑터의 공통 기능을 구현합니다. 백엔드 캐시 어댑터는이 클래스를 확장 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="b9e3627fcf244de7360bead6dfa7616e2eb4870d" translate="yes" xml:space="preserve">
          <source>This class is a bag to manage the cookies A cookies bag is automatically registered as part of the &amp;lsquo;response&amp;rsquo; service in the DI</source>
          <target state="translated">이 클래스는 쿠키를 관리하기위한 백입니다. 쿠키 백은 DI에서 '응답'서비스의 일부로 자동 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="716e405825e91f8cc0169ab58e76abbfc8272d47" translate="yes" xml:space="preserve">
          <source>This class is a bag to manage the response headers</source>
          <target state="translated">이 클래스는 응답 헤더를 관리하기위한 백입니다.</target>
        </trans-unit>
        <trans-unit id="fcdd9aba9fa6cb2fe70972b68ca2b22b67e5da33" translate="yes" xml:space="preserve">
          <source>This class is only for backward compatibility reasons to use with Phalcon\Mvc\Collection. Otherwise please use the validators provided by Phalcon\Validation.</source>
          <target state="translated">이 클래스는 Phalcon \ Mvc \ Collection과 함께 사용해야하는 이전 버전과의 호환성을 위해서만 사용됩니다. 그렇지 않으면 Phalcon \ Validation에서 제공 한 유효성 검사기를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="39f61ef4f1999b7e3f1cfd948e6983d319f31631" translate="yes" xml:space="preserve">
          <source>This class is used to build the array parameter required by Phalcon\Mvc\Model::find() and Phalcon\Mvc\Model::findFirst() using an object-oriented interface.</source>
          <target state="translated">이 클래스는 객체 지향 인터페이스를 사용하여 Phalcon \ Mvc \ Model :: find () 및 Phalcon \ Mvc \ Model :: findFirst ()에 필요한 배열 매개 변수를 작성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cba36a0eedc905b6f646a4aa33b823e12a5331af" translate="yes" xml:space="preserve">
          <source>This class manages the objects that compose a transaction. A transaction produces a unique connection that is passed to every object part of the transaction.</source>
          <target state="translated">이 클래스는 트랜잭션을 구성하는 객체를 관리합니다. 트랜잭션은 트랜잭션의 모든 개체 부분으로 전달되는 고유 한 연결을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="d0f9a7183a44f8d969371c4637d1ff1b06b30fd4" translate="yes" xml:space="preserve">
          <source>This class offers contextual information of a fired event in the EventsManager</source>
          <target state="translated">이 클래스는 EventsManager에서 시작된 이벤트의 컨텍스트 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="148ea82ff93879fe00b01ec2cbcee467d27bc3af" translate="yes" xml:space="preserve">
          <source>This class partially borrows SecureRandom library from Ruby</source>
          <target state="translated">이 클래스는 Ruby에서 SecureRandom 라이브러리를 부분적으로 빌립니다.</target>
        </trans-unit>
        <trans-unit id="0e12f8bf99108b5cf596556402bf49c3529703eb" translate="yes" xml:space="preserve">
          <source>This class reads and compiles Volt templates into PHP plain code</source>
          <target state="translated">이 클래스는 Volt 템플릿을 읽고 PHP 일반 코드로 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="26ff527a8cbf00ea3e0fa2de97940526a1b2c2fe" translate="yes" xml:space="preserve">
          <source>This class represents a relationship between two models</source>
          <target state="translated">이 클래스는 두 모델 간의 관계를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="e6fb8a3c415089544ba83a5d567fe718e5d729af" translate="yes" xml:space="preserve">
          <source>This class represents every route added to the router</source>
          <target state="translated">이 클래스는 라우터에 추가 된 모든 경로를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="ae9b2cb497909d3a27ae689a3268c8734ec22fc0" translate="yes" xml:space="preserve">
          <source>This class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE. It offers context information and the related messages produced by the model which finally executes the operations when it fails</source>
          <target state="translated">이 클래스는 INSERT, UPDATE 또는 DELETE와 같은 PHQL 문이 리턴 한 상태를 나타냅니다. 모델이 생성 한 컨텍스트 정보 및 관련 메시지를 제공하여 실패시 작업을 최종적으로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="0b1ac4270f7af78c43a08eaa98e3022f43189a46" translate="yes" xml:space="preserve">
          <source>This class takes a PHQL intermediate representation and executes it.</source>
          <target state="translated">이 클래스는 PHQL 중간 표현을 취해 실행합니다.</target>
        </trans-unit>
        <trans-unit id="b9b523d5957a0504d6203583341a6205c3ddfa79" translate="yes" xml:space="preserve">
          <source>This class will be thrown to exit a try/catch block for isolated transactions</source>
          <target state="translated">이 클래스는 격리 된 트랜잭션에 대해 try / catch 블록을 종료하기 위해 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a65dd3bc941d55b2949f417965c47cd65cf54889" translate="yes" xml:space="preserve">
          <source>This code executes the following SQL in MySQL:</source>
          <target state="translated">이 코드는 MySQL에서 다음 SQL을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="473b5168ccd8ab26f187d274d209118dc3866027" translate="yes" xml:space="preserve">
          <source>This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).</source>
          <target state="translated">이 구성 요소는 개발자가 암호 해싱 및 CSRF (Cross-Site Request Forgery protection)와 같은 일반적인 보안 작업을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9dc8b5d404ce74e95646276c04583f6e773cc076" translate="yes" xml:space="preserve">
          <source>This component allow you to set up a different base URI for static resources in the application:</source>
          <target state="translated">이 구성 요소를 사용하면 애플리케이션에서 정적 자원에 대해 다른 기본 URI를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60de99e77ce46a6ce7a566092e127c9ce576a037" translate="yes" xml:space="preserve">
          <source>This component allows Phalcon\Mvc\Collection to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&amp;gt;x or array[x].</source>
          <target state="translated">이 구성 요소를 사용하면 Phalcon \ Mvc \ Collection이 연관된 엔티티없이 행을 리턴 할 수 있습니다. 이 객체는 ArrayAccess 인터페이스를 구현하여 객체-&amp;gt; x 또는 array [x]로 객체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fbd64c6ec777f6d87d93bd3120aa1a1bd3b797a" translate="yes" xml:space="preserve">
          <source>This component allows Phalcon\Mvc\Model to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&amp;gt;x or array[x].</source>
          <target state="translated">이 구성 요소를 사용하면 Phalcon \ Mvc \ Model이 연관된 엔티티없이 행을 리턴 할 수 있습니다. 이 객체는 ArrayAccess 인터페이스를 구현하여 객체-&amp;gt; x 또는 array [x]로 객체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb6cd78133f4615eb573574f6630e832ff8f5753" translate="yes" xml:space="preserve">
          <source>This component allows for a lower level database manipulation than using traditional models.</source>
          <target state="translated">이 구성 요소는 기존 모델을 사용하는 것보다 낮은 수준의 데이터베이스 조작을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="57955ffda639b9f9495f02aecd4310b55cc311cc" translate="yes" xml:space="preserve">
          <source>This component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; and others.</source>
          <target state="translated">이 구성 요소를 사용하면 개발자는 뷰가 렌더링되는 시점과 위치를 제어 할 수 있습니다. 또한이 구성 요소는 &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; 및 기타 와 같은 템플릿 엔진에서 사용 가능한 뷰 상속을 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f899e2efd4bab87c5eeef75386e8e6b0978a82f" translate="yes" xml:space="preserve">
          <source>This component allows to Phalcon\Mvc\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement. If a resultset is serialized it will dump all the rows into a big array. Then unserialize will retrieve the rows as they were before serializing.</source>
          <target state="translated">이 구성 요소는 Phalcon \ Mvc \ Model이 최소 메모리 소비로 큰 결과 세트를 리턴하도록 허용합니다. 표준 foreach 또는 while 문을 사용하여 결과 세트를 순회 할 수 있습니다. 결과 집합이 직렬화되면 모든 행을 큰 배열로 덤프합니다. 그런 다음 직렬화 해제는 직렬화하기 전의 행을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="29aa9758ff123fff9b470dcd7614f188311f779e" translate="yes" xml:space="preserve">
          <source>This component allows to build forms using an object-oriented interface</source>
          <target state="translated">이 구성 요소는 객체 지향 인터페이스를 사용하여 양식을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a7a6de9087fbf1f38ae20c038fd86ec757e7aed" translate="yes" xml:space="preserve">
          <source>This component allows to create CLI applications using Phalcon</source>
          <target state="translated">이 구성 요소는 Phalcon을 사용하여 CLI 응용 프로그램을 만들 수 있습니다</target>
        </trans-unit>
        <trans-unit id="abb34ff83add7eb77eecb7823a9f33f5e28d432c" translate="yes" xml:space="preserve">
          <source>This component allows to render views without hierarchical levels</source>
          <target state="translated">이 구성 요소를 사용하면 계층 레벨없이 뷰를 렌더링 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="7e9790e5d876bd18b44479d314aaf0ac156fc011" translate="yes" xml:space="preserve">
          <source>This component can be used in a plain HTML+PHP view or in a &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; template.</source>
          <target state="translated">이 구성 요소는 일반 HTML + PHP보기 또는 &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; 템플릿 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ad15f4dbf16e4acdb17f5ad6a44a01c9846b33bc" translate="yes" xml:space="preserve">
          <source>This component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired.</source>
          <target state="translated">이 구성 요소는 필요한 모든 구성 요소를 인스턴스화하고 나머지 구성 요소와 통합하여 MVC 패턴이 원하는대로 작동하도록하는 모든 복잡한 작업을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="ba5e79ff5cc358b4232729ced529d0a114038be6" translate="yes" xml:space="preserve">
          <source>This component gives you the ability to use this algorithm in a simple way:</source>
          <target state="translated">이 구성 요소는 간단한 방법으로이 알고리즘을 사용할 수있는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e7fc3a64877f951d3fa117dfb9258db003e56d03" translate="yes" xml:space="preserve">
          <source>This component helps to load your project classes automatically based on some conventions</source>
          <target state="translated">이 구성 요소는 일부 규칙에 따라 프로젝트 클래스를 자동으로로드하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="e070e940109b44807ff320b67e664c774b3e1c19" translate="yes" xml:space="preserve">
          <source>This component helps to separate session data into &amp;ldquo;namespaces&amp;rdquo;. Working by this way you can easily create groups of session variables into the application</source>
          <target state="translated">이 구성 요소는 세션 데이터를&amp;ldquo;네임 스페이스&amp;rdquo;로 분리하는 데 도움이됩니다. 이 방법으로 작업하면 응용 프로그램에 세션 변수 그룹을 쉽게 만들 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d213cda49c9ae1e533ad6b2e4c659562703f5c2c" translate="yes" xml:space="preserve">
          <source>This component implements a high level abstraction for NoSQL databases which works with documents</source>
          <target state="translated">이 구성 요소는 문서와 함께 작동하는 NoSQL 데이터베이스에 대한 높은 수준의 추상화를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="5889d45be839fbfe9ad24313fd86f22690a993bf" translate="yes" xml:space="preserve">
          <source>This component is automatically registered in the services container as &amp;lsquo;security&amp;rsquo;, you can re-register it to setup its options:</source>
          <target state="translated">이 구성 요소는 서비스 컨테이너에 'security'로 자동 등록되며 옵션을 설정하기 위해 다시 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5060d4355e0c5d915d79aaf1f0a0ba4ab661096" translate="yes" xml:space="preserve">
          <source>This component is designed to initially work in memory. This provides ease of use and speed in accessing every aspect of the list. The &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon\Acl&lt;/em&gt;&lt;/a&gt; constructor takes as its first parameter an adapter used to retrieve the information related to the control list. An example using the memory adapter is below:</source>
          <target state="translated">이 구성 요소는 처음에 메모리에서 작동하도록 설계되었습니다. 이를 통해 목록의 모든 측면에 쉽게 액세스하고 액세스 할 수 있습니다. &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon \의 ACL&lt;/em&gt;&lt;/a&gt; 생성자가 최초의 매개 변수로 제어 목록에 관한 정보를 검색하는데 사용되는 어댑터 걸린다. 메모리 어댑터를 사용하는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3848a008ccbbe55f15e7c2ac89ed7964356544ae" translate="yes" xml:space="preserve">
          <source>This component is designed to provide a very simple usage:</source>
          <target state="translated">이 구성 요소는 매우 간단한 사용법을 제공하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="65fd853b534b215347f20e65c96493b242e6a400" translate="yes" xml:space="preserve">
          <source>This component is intended to lower level database operations. If you want to interact with databases using higher level of abstraction use Phalcon\Mvc\Model.</source>
          <target state="translated">이 구성 요소는 하위 레벨 데이터베이스 조작을위한 것입니다. 더 높은 수준의 추상화를 사용하여 데이터베이스와 상호 작용하려면 Phalcon \ Mvc \ Model을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="844c07fb8c8cb6cdfcf04c379ad8a310e96a6605" translate="yes" xml:space="preserve">
          <source>This component makes use of &amp;lsquo;formatters&amp;rsquo; to format messages before sending them to the backend. The formatters available are:</source>
          <target state="translated">이 구성 요소는 메시지를 백엔드로 보내기 전에 '포매터'를 사용하여 메시지를 형식화합니다. 사용 가능한 포맷터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="88a56cd957ec22a13fa9980a15a9f9d41e74dc45" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development/testing:</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 구문 분석 및 처리 된 주석을 캐시하거나 캐시하지 않으므로 성능을 향상 시키거나 개발 / 테스트에 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="56334adc443c140a461831ec9ee7f12d6c794b33" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to define the behavior of the messages after being passed to the Flasher:</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 Flasher에 전달 된 후 메시지의 동작을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="517e14ec7a89f08d1acfe0ef6e14677d02f833f7" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate different sources of data:</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 다양한 데이터 소스를 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="3da0c844f394f08f0a5031cd073730894c94417d" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate specific database system details. Phalcon uses &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; to connect to databases. The following database engines are supported:</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 특정 데이터베이스 시스템 세부 사항을 캡슐화합니다. Phalcon은 &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; 를 사용하여 데이터베이스에 연결합니다. 다음과 같은 데이터베이스 엔진이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="787c5efada82518da613b927b0bccf18456c3001" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate specific image manipulator programs. The following image manipulator programs are supported:</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 특정 이미지 조작 프로그램을 캡슐화합니다. 다음 이미지 조작기 프로그램이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="3bfebc589c44d12bc8b6341706a00d9bf5529a03" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to read translation messages from different sources in a unified way.</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 다른 소스의 번역 메시지를 통합 된 방식으로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="933b3b7248b648cf06cea9e05a7eb935605cd065" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to store the logged messages. The use of adapters allows for a common logging interface which provides the ability to easily switch backends if necessary. The adapters supported are:</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 로그 된 메시지를 저장합니다. 어댑터를 사용하면 필요한 경우 백엔드를 쉽게 전환 할 수있는 공통 로깅 인터페이스가 가능합니다. 지원되는 어댑터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bf6a83dfb16de5400201ec766c16294f2a9d4a6d" translate="yes" xml:space="preserve">
          <source>This component only works with UTF-8. The PREG extension needs to be compiled with UTF-8 support.</source>
          <target state="translated">이 구성 요소는 UTF-8에서만 작동합니다. PREG 확장은 UTF-8 지원으로 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="4e12c85bfc194575eba8772fe50703d5e960f97b" translate="yes" xml:space="preserve">
          <source>This component provides a forms manager that can be used by the developer to register forms and access them via the service locator:</source>
          <target state="translated">이 컴포넌트는 개발자가 양식을 등록하고 서비스 로케이터를 통해 액세스 할 수있는 양식 관리자를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="75a4b9f8fdfae59ff4fcfafdb602ccca218d0c49" translate="yes" xml:space="preserve">
          <source>This component provides a set of functions to improve the security in Phalcon applications</source>
          <target state="translated">이 구성 요소는 Phalcon 응용 프로그램의 보안을 향상시키는 기능 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2aeb5f841025bc13bd8a61f244b4336c820c30e9" translate="yes" xml:space="preserve">
          <source>This component provides a variant that&amp;rsquo;s integrated with the &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;annotations&lt;/em&gt;&lt;/a&gt; service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:</source>
          <target state="translated">이 구성 요소는 &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;주석&lt;/em&gt;&lt;/a&gt; 서비스 와 통합 된 변형을 제공합니다. 이 전략을 사용하면 서비스 등록에 경로를 추가하는 대신 컨트롤러에 경로를 직접 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f8ab349e815e292a5085fe67b3765f479307ada" translate="yes" xml:space="preserve">
          <source>This component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let&amp;rsquo;s see how to do that integration.</source>
          <target state="translated">이 구성 요소는 어댑터를 사용하여 Phalcon이 외부 템플릿 엔진과 통일 된 방식으로 대화 할 수 있도록 도와줍니다. 통합을 수행하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="923658f7cd92c6657709ad391fa808d718c68d4b" translate="yes" xml:space="preserve">
          <source>This component uses by default PHP itself as the template engine, therefore views should have the .phtml extension. If the views directory is &lt;em&gt;app/views&lt;/em&gt; then view component will find automatically for these 3 view files.</source>
          <target state="translated">이 컴포넌트는 기본적으로 PHP 자체를 템플리트 엔진으로 사용하므로보기의 확장자는 .phtml이어야합니다. views 디렉토리가 &lt;em&gt;app / views&lt;/em&gt; 이면이 3 개의 뷰 파일에 대해 뷰 구성 요소가 자동으로 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="0ba79abaa8bc3f21c6954270a50f4e8887099925" translate="yes" xml:space="preserve">
          <source>This components controls the initialization of models, keeping record of relations between the different models of the application.</source>
          <target state="translated">이 구성 요소는 모델의 초기화를 제어하여 응용 프로그램의 여러 모델 간 관계를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="054f6c1a642c815bc404481c4107e391831a950f" translate="yes" xml:space="preserve">
          <source>This components helps in the generation of: URIs, URLs and Paths</source>
          <target state="translated">이 구성 요소는 URI, URL 및 경로 생성에 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="2e0b3a781af669b521cf14a3ce41ea8a0552cb1d" translate="yes" xml:space="preserve">
          <source>This example does not contain a config file, most test cases however, do need one. You can add it to the DI to get the UnitTestCase file.</source>
          <target state="translated">이 예제에는 구성 파일이 포함되어 있지 않지만 대부분의 테스트 사례에는 구성 파일이 필요합니다. DI에 추가하여 UnitTestCase 파일을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e74ee3d94516279f32e29514cabd9f52556ed4e" translate="yes" xml:space="preserve">
          <source>This example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:</source>
          <target state="translated">이 예제는 매우 간단하고 고객이 쿼리되며 이름을 표시하는 등의 필요에 따라 사용할 수 있습니다. 다음 송장에 해당하는 고객을 표시하기 위해 송장 세트를 검색하는 경우에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="20fbfec333f4c3fae2d3a558a6f47201f7cbb0ad" translate="yes" xml:space="preserve">
          <source>This exception is generated when a model fails to save a record Phalcon\Mvc\Model must be set up to have this behavior</source>
          <target state="translated">이 예외는 모델이 레코드를 저장하지 못할 때 생성됩니다. Phalcon \ Mvc \ Model이이 동작을 갖도록 설정되어야합니다.</target>
        </trans-unit>
        <trans-unit id="7e2b39c04f77cf35046d6632b65c3e6428170e9e" translate="yes" xml:space="preserve">
          <source>This feature of the cache component, allows the developer to implement a multi-level cache. This new feature is very useful because you can save the same data in several cache locations with different lifetimes, reading first from the one with the faster adapter and ending with the slowest one until the data expires:</source>
          <target state="translated">캐시 구성 요소의이 기능을 통해 개발자는 다중 레벨 캐시를 구현할 수 있습니다. 이 새로운 기능은 수명이 다른 여러 캐시 위치에 동일한 데이터를 저장하여 더 빠른 어댑터가있는 어댑터에서 먼저 읽고 데이터가 만료 될 때까지 가장 느린 것으로 끝날 수 있기 때문에 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="ca5fd106e60c429f965ed2e9d8b871253f1d1cdc" translate="yes" xml:space="preserve">
          <source>This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</source>
          <target state="translated">이 기능은 연결 문자 집합을 고려하므로, 잘못된 문자 집합은 데이터를 저장하거나 검색 할 때 원하지 않는 효과를 생성하므로 연결 매개 변수 또는 데이터베이스 서버 구성에서 올바른 문자 집합을 정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="46ed69629e29dcfc8db4ac20cb2f66ebefdb61e4" translate="yes" xml:space="preserve">
          <source>This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the &lt;code&gt;find()/:code:`findFirst()&lt;/code&gt; method to force every query to be cached:</source>
          <target state="translated">이를 통해 특정 쿼리를 자유롭게 캐시 할 수 있지만 모델에서 수행 된 모든 쿼리를 전체적으로 캐시하려면 &lt;code&gt;find()/:code:`findFirst()&lt;/code&gt; 메서드를 재정 의하여 모든 쿼리를 강제로 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a64e8b2e52980f676e4d01664bc97e642bf173e" translate="yes" xml:space="preserve">
          <source>This gives you full control on how the cache should be implemented for each model. If this strategy is common to several models you can create a base class for all of them:</source>
          <target state="translated">이를 통해 각 모델에 대해 캐시를 구현하는 방법을 완전히 제어 할 수 있습니다. 이 전략이 여러 모델에 공통 인 경우 모든 모델에 대한 기본 클래스를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95553944413a4c19699e0802809d78c431b5d899" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available helpers and their arguments. Please visit the &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt; page in the API for a complete reference.</source>
          <target state="translated">이 안내서는 사용 가능한 헬퍼 및 해당 인수에 대한 완전한 문서가 아닙니다. 자세한 내용은 API 의 &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt; 페이지를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="972d5f64e94ba9f517fe3c6f02e96c293557ecb1" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available methods and their arguments. Please visit the &lt;a href=&quot;https://docs.phalconphp.com/en/latest/api/index.html&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt; for a complete reference.</source>
          <target state="translated">이 안내서는 사용 가능한 메소드 및 인수에 대한 완전한 문서가 아닙니다. 자세한 내용은 &lt;a href=&quot;https://docs.phalconphp.com/en/latest/api/index.html&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="79e598174d7941389a0cec0834ec0d74ff072ff5" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of the &lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt; extension. Please visit its the &lt;a href=&quot;http://www.php.net/manual/en/book.intl.php&quot;&gt;documentation&lt;/a&gt; of the extension for a reference.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;국제&lt;/a&gt; 확장에 대한 완전한 문서가 아닙니다 . 그것 방문하시기 바랍니다 &lt;a href=&quot;http://www.php.net/manual/en/book.intl.php&quot;&gt;문서&lt;/a&gt; 의 참조에 대한 확장을.</target>
        </trans-unit>
        <trans-unit id="696120f508b31034d9e615a450def824f8eb23a4" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of the &lt;a href=&quot;https://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt; extension. Please visit its the &lt;a href=&quot;http://www.php.net/manual/en/book.intl.php&quot;&gt;documentation&lt;/a&gt; of the extension for a reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9221f7d158a322a1486f5e0ded6b00336daed2c9" translate="yes" xml:space="preserve">
          <source>This header provides a safer way to cache the pages served. We simply must specify a time in seconds telling the browser how long it must keep the page in its cache:</source>
          <target state="translated">이 헤더는 제공된 페이지를보다 안전하게 캐시 할 수있는 방법을 제공합니다. 브라우저가 페이지를 캐시에 얼마나 오래 보관해야하는지 알려주는 시간을 초 단위로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="b042172520ee5079c8c8a6e32acda4525f4aaf40" translate="yes" xml:space="preserve">
          <source>This injection type passes the dependencies/arguments to the class constructor. Let&amp;rsquo;s pretend we have the following component:</source>
          <target state="translated">이 주입 유형은 종속성 / 인수를 클래스 생성자로 전달합니다. 다음과 같은 구성 요소가 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="6728335fc949382ab9e6060c37f62eeb2c9f5d57" translate="yes" xml:space="preserve">
          <source>This is a base class for Phalcon\Mvc\Model validators</source>
          <target state="translated">Phalcon \ Mvc \ Model 유효성 검사기의 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="93ac1feb3a735c0aa48e71454ca5b2c62f752765" translate="yes" xml:space="preserve">
          <source>This is a base class for form elements</source>
          <target state="translated">이것은 폼 요소의 기본 클래스입니다</target>
        </trans-unit>
        <trans-unit id="3b382497354525cfcf087e3a6af2524d9e649105" translate="yes" xml:space="preserve">
          <source>This is a base class for logger formatters</source>
          <target state="translated">로거 포맷터의 기본 클래스입니다</target>
        </trans-unit>
        <trans-unit id="0e879c38c0c253de79cc69d48ffe9cc40331035b" translate="yes" xml:space="preserve">
          <source>This is a base class for validators</source>
          <target state="translated">이것은 유효성 검사기의 기본 클래스입니다</target>
        </trans-unit>
        <trans-unit id="f04c34626fe098ee852f468631503956c5eeefdd" translate="yes" xml:space="preserve">
          <source>This is a variant of the Phalcon\Flash that immediately outputs any message passed to it</source>
          <target state="translated">Phalcon \ Flash의 변형으로 전달 된 메시지를 즉시 출력합니다.</target>
        </trans-unit>
        <trans-unit id="0e5071b40d037749facf654c45ca6003940b48bb" translate="yes" xml:space="preserve">
          <source>This is a variant of the standard Phalcon\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually providing a full stack framework</source>
          <target state="translated">이것은 표준 Phalcon \ Di의 변형입니다. 기본적으로 프레임 워크에서 제공하는 모든 서비스를 자동으로 등록합니다. 이로 인해 개발자는 전체 스택 프레임 워크를 제공하는 각 서비스를 개별적으로 등록 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6ac9406ecaee3c942f18333d21e4e3ef61a978af" translate="yes" xml:space="preserve">
          <source>This is a variant of the standard Phalcon\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually. This class is specially suitable for CLI applications</source>
          <target state="translated">이것은 표준 Phalcon \ Di의 변형입니다. 기본적으로 프레임 워크에서 제공하는 모든 서비스를 자동으로 등록합니다. 이로 인해 개발자는 각 서비스를 개별적으로 등록 할 필요가 없습니다. 이 클래스는 CLI 애플리케이션에 특히 적합합니다.</target>
        </trans-unit>
        <trans-unit id="98a4d435692b40ac5a405d35ef669e3f6edc73ca" translate="yes" xml:space="preserve">
          <source>This is a very simple tutorial and as you can see, it&amp;rsquo;s easy to start building an application using Phalcon. The fact that Phalcon is an extension on your web server has not interfered with the ease of development or features available. We invite you to continue reading the manual so that you can discover additional features offered by Phalcon!</source>
          <target state="translated">이것은 매우 간단한 자습서이며, Phalcon을 사용하여 응용 프로그램을 쉽게 구축 할 수 있습니다. Phalcon이 웹 서버의 확장이라는 사실은 개발의 용이성이나 사용 가능한 기능을 방해하지 않았습니다. Phalcon이 제공하는 추가 기능을 발견 할 수 있도록 설명서를 계속 읽으십시오!</target>
        </trans-unit>
        <trans-unit id="f890b6649305471bcdb05fac8b384cf7261d4e16" translate="yes" xml:space="preserve">
          <source>This is an class for binding models into params for handler</source>
          <target state="translated">핸들러의 매개 변수에 모델을 바인딩하는 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="b76f8288491593c4919f5a43a017a463d109a1c7" translate="yes" xml:space="preserve">
          <source>This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">이것은 MVC 흐름 자체, 특히 컨트롤러 부분과 관련이있는 중요한 프로세스입니다. 이 작업은 컨트롤러 디스패처 내에서 발생합니다. 컨트롤러 파일을 읽고로드하고 인스턴스화합니다. 그런 다음 필요한 조치가 실행됩니다. 조치가 플로우를 다른 제어기 / 조치로 전달하면 제어기 디스패처가 다시 ​​시작됩니다. 이를보다 잘 설명하기 위해 다음 예제는 대략 &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt; 내에서 수행되는 프로세스를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="339ff50b6e1d69f191929ec709b7dc8598d57cf4" translate="yes" xml:space="preserve">
          <source>This is an optional base class for ORM behaviors</source>
          <target state="translated">이것은 ORM 행동에 대한 선택적 기본 클래스입니다</target>
        </trans-unit>
        <trans-unit id="778f1e2e771c01560c51d970903c4f513a79a17f" translate="yes" xml:space="preserve">
          <source>This is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.</source>
          <target state="translated">이것은 웹 사이트 및 응용 프로그램에 대한 또 다른 일반적인 공격입니다. 사용자 등록 또는 주석 추가와 같은 작업을 수행하도록 설계된 양식은이 공격에 취약합니다.</target>
        </trans-unit>
        <trans-unit id="6783275361b83c486657bbfd997dce35c6221009" translate="yes" xml:space="preserve">
          <source>This is different to &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; who&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method uses controllers and actions as parameters:</source>
          <target state="translated">&lt;code&gt;render()&lt;/code&gt; 메소드는 컨트롤러와 액션을 파라미터로 사용 하는 &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt; 와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="1323ae3621b03444ef40592d920a99e3788e04fe" translate="yes" xml:space="preserve">
          <source>This is exactly the same as:</source>
          <target state="translated">이것은 정확히 다음과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="3c10453a61f4b28f8a2bea093ecead722ddb3422" translate="yes" xml:space="preserve">
          <source>This is main action it will be shown for every controller or action executed within the application.</source>
          <target state="translated">응용 프로그램 내에서 실행되는 모든 컨트롤러 또는 작업에 대해 표시되는 기본 작업입니다.</target>
        </trans-unit>
        <trans-unit id="7dd45a8fe13eb1a6696442a16bf78160319ab740" translate="yes" xml:space="preserve">
          <source>This is the base class for Phalcon\Annotations adapters</source>
          <target state="translated">Phalcon \ Annotations 어댑터의 기본 클래스입니다</target>
        </trans-unit>
        <trans-unit id="c6d15058011c3edbf657f7cd3e13f9d5723f3539" translate="yes" xml:space="preserve">
          <source>This is the base class for Phalcon\Mvc\Dispatcher and Phalcon\Cli\Dispatcher. This class can&amp;rsquo;t be instantiated directly, you can use it to create your own dispatchers.</source>
          <target state="translated">Phalcon \ Mvc \ Dispatcher 및 Phalcon \ Cli \ Dispatcher의 기본 클래스입니다. 이 클래스는 직접 인스턴스화 할 수 없으며 자신의 디스패처를 작성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a63a2f46376f02432dd399a3e626280005d62e1" translate="yes" xml:space="preserve">
          <source>This is the base class to each database dialect. This implements common methods to transform intermediate code into its RDBMS related syntax</source>
          <target state="translated">이것은 각 데이터베이스 방언의 기본 클래스입니다. 중간 코드를 RDBMS 관련 구문으로 변환하는 일반적인 방법을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="ae180daab3cf6681e5f67f27da6605b8d4cf9703" translate="yes" xml:space="preserve">
          <source>This is the view related to the action. It only will be shown when the &amp;ldquo;show&amp;rdquo; action was executed.</source>
          <target state="translated">이것은 조치와 관련된보기입니다. &amp;ldquo;show&amp;rdquo;액션이 실행될 때만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="078602b533c42e9f995174b49ea32f3c744540cc" translate="yes" xml:space="preserve">
          <source>This is the view related to the controller. It only will be shown for every action executed within the controller &amp;ldquo;posts&amp;rdquo;. All the code implemented in the layout will be reused for all the actions in this controller.</source>
          <target state="translated">제어기와 관련된보기입니다. 컨트롤러 &quot;포스트&quot;내에서 실행 된 모든 작업에 대해서만 표시됩니다. 레이아웃에서 구현 된 모든 코드는이 컨트롤러의 모든 작업에 재사용됩니다.</target>
        </trans-unit>
        <trans-unit id="296f086b11e18e03d147e09abce9bc0fb136f68f" translate="yes" xml:space="preserve">
          <source>This is typically for an Error 404 page.</source>
          <target state="translated">일반적으로 오류 404 페이지입니다.</target>
        </trans-unit>
        <trans-unit id="edf2e70e936fea7bc0b55ba78b92471bce9274e7" translate="yes" xml:space="preserve">
          <source>This last code will generate the following HTML:</source>
          <target state="translated">이 마지막 코드는 다음 HTML을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="074754306382420c872d60c3d848ca5b455c9bc9" translate="yes" xml:space="preserve">
          <source>This logger sends messages in HTTP response headers that are displayed by &lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt;, a &lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; extension for Firefox.</source>
          <target state="translated">이 로거는 Firefox 의 &lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; 확장 인 &lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt; 에 의해 표시되는 HTTP 응답 헤더로 메시지를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="ddd3801670734fae5181231b488f7f4cbb218341" translate="yes" xml:space="preserve">
          <source>This logger sends messages in HTTP response headers that are displayed by &lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt;, a &lt;a href=&quot;https://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; extension for Firefox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbb4085e5d93e6aadd8a622ba3e88ee3598d34b" translate="yes" xml:space="preserve">
          <source>This logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.</source>
          <target state="translated">이 로거는 시스템 로거에 메시지를 보냅니다. syslog 동작은 운영 체제마다 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07f8c3d8ddadaa85446a6ec3f2d15b889fa9ff4e" translate="yes" xml:space="preserve">
          <source>This logger uses plain files to log any kind of data. By default all logger files are opened using append mode which opens the files for writing only; placing the file pointer at the end of the file. If the file does not exist, an attempt will be made to create it. You can change this mode by passing additional options to the constructor:</source>
          <target state="translated">이 로거는 일반 파일을 사용하여 모든 종류의 데이터를 기록합니다. 기본적으로 모든 로거 파일은 쓰기 전용 파일을 여는 추가 모드를 사용하여 열립니다. 파일 끝에 파일 포인터를 놓습니다. 파일이 존재하지 않으면 파일을 작성하려고 시도합니다. 생성자에게 추가 옵션을 전달하여이 모드를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ece6527fe732dfda662c3c9afc159c4492b9bf96" translate="yes" xml:space="preserve">
          <source>This marks an attribute as a mapped column</source>
          <target state="translated">이것은 속성을 매핑 된 열로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6b79b358e48cb0e4ca2449465053985869cedd70" translate="yes" xml:space="preserve">
          <source>This means that when you get a related record you could intercept how the data is obtained by implementing the corresponding method:</source>
          <target state="translated">이것은 관련 레코드를 얻을 때 해당 메소드를 구현하여 데이터를 얻는 방법을 가로 챌 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="52b125ed0f20b235e80dddbe6339f27a2b991a79" translate="yes" xml:space="preserve">
          <source>This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.</source>
          <target state="translated">이 방법은 컨트롤러 또는 상위 뷰 계층에서 호출되어 렌더링 프로세스를 방해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02f8002624e6995308ae18f1b73f35a074e2091f" translate="yes" xml:space="preserve">
          <source>This method is automatically called in Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.</source>
          <target state="translated">이 메소드는 Phalcon \ Db \ Adapter \ Pdo 생성자에서 자동으로 호출됩니다. 데이터베이스 연결을 복원해야 할 때 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="6931118845ad954b3b234f2d870b572eaab6aa9c" translate="yes" xml:space="preserve">
          <source>This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.</source>
          <target state="translated">이 메소드는 \ Phalcon \ Db \ Adapter \ Pdo 생성자에서 자동으로 호출됩니다. 데이터베이스 연결을 복원해야 할 때 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="2947348e2526cd515fa2fc10b6db7ef47e6c560a" translate="yes" xml:space="preserve">
          <source>This method is defined in the model.</source>
          <target state="translated">이 방법은 모델에서 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="4a05a1e4b20c32aa5dbffc7c19383275d9d6193c" translate="yes" xml:space="preserve">
          <source>This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:</source>
          <target state="translated">이 방법은 원하는대로 종속성을 빌드 할 수있는 더 큰 자유를 제공하지만 종속성 정의를 완전히 변경하지 않고 일부 매개 변수를 외부에서 변경하는 것은 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="dcdc165c04c56a7d62b6ed6091c0c6f8e98065ae" translate="yes" xml:space="preserve">
          <source>This method receives the notifications from the EventsManager</source>
          <target state="translated">이 메소드는 EventsManager로부터 알림을받습니다.</target>
        </trans-unit>
        <trans-unit id="c9ae1e3659012aa285d2a7017c27198ec13ab5a4" translate="yes" xml:space="preserve">
          <source>This method scales the images using liquid rescaling method. Only support Imagick</source>
          <target state="translated">이 방법은 액체 크기 조정 방법을 사용하여 이미지의 크기를 조정합니다. Imagick 만 지원</target>
        </trans-unit>
        <trans-unit id="cee14822dc1453334bbb996683bbb2049f35d4d1" translate="yes" xml:space="preserve">
          <source>This method verifies which values are different from &amp;ldquo;&amp;rdquo; (empty string) and null and takes them into account to create the search criteria:</source>
          <target state="translated">이 방법은 &quot;&quot;(빈 문자열) 및 null과 다른 값을 확인하고이를 고려하여 검색 기준을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="75984b880e523cf39008dc85797a72f99c41d7b0" translate="yes" xml:space="preserve">
          <source>This only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds.</source>
          <target state="translated">배포가 변경되거나 안정적인 빌드에서 야간 빌드로 전환하지 않는 한이 작업은 한 번만 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="6ae575ddc4f0bfa38ad163525c2b97cfef09164b" translate="yes" xml:space="preserve">
          <source>This part of the application is implemented in the component &amp;ldquo;Elements&amp;rdquo; (app/library/Elements.php).</source>
          <target state="translated">응용 프로그램의이 부분은&amp;ldquo;요소&amp;rdquo;구성 요소 (app / library / Elements.php)에서 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="b1d291fd2c806a8d9fd93db189578bd0167ef86e" translate="yes" xml:space="preserve">
          <source>This piece of code can be run using:</source>
          <target state="translated">이 코드는 다음을 사용하여 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a2b77307f40f6e987fe950b380d6677090d841d" translate="yes" xml:space="preserve">
          <source>This produces the following HTML:</source>
          <target state="translated">다음과 같은 HTML이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="b3ab1502b876ba83255b3b2c9b07616d49384d2e" translate="yes" xml:space="preserve">
          <source>This project follows a quite similar structure to INVO. Once you open the application in your browser &lt;a href=&quot;http://localhost/vokuro&quot;&gt;http://localhost/vokuro&lt;/a&gt; you&amp;rsquo;ll see something like this:</source>
          <target state="translated">이 프로젝트는 INVO와 매우 유사한 구조를 따릅니다. 브라우저 &lt;a href=&quot;http://localhost/vokuro&quot;&gt;http : // localhost / vokuro&lt;/a&gt; 에서 응용 프로그램을 열면 다음과 같은 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c93c53294bff863df933975dd1ebe66004332145" translate="yes" xml:space="preserve">
          <source>This project uses &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; to load controllers, models, forms, etc. within the project and &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt; to load the project&amp;rsquo;s dependencies. So, the first thing you have to do before execute V&amp;ouml;kur&amp;oacute; is install its dependencies via &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt;. Assuming you have it correctly installed, type the following command in the console:</source>
          <target state="translated">이 프로젝트는 &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt; 를 사용 하여 프로젝트 및 &lt;a href=&quot;https://getcomposer.org/&quot;&gt;작성기&lt;/a&gt; 내에 컨트롤러, 모델, 양식 등 을로드하고 프로젝트의 종속성을로드합니다. 따라서 V&amp;ouml;kur&amp;oacute;를 실행하기 전에 가장 먼저해야 할 일은 &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt; 를 통해 의존성을 설치하는 것 입니다. 올바르게 설치되었다고 가정하면 콘솔에 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="2ae7ca43916d1f0a39c0210ee8dde6d270108192" translate="yes" xml:space="preserve">
          <source>This strategy doesn&amp;rsquo;t require any customization and is implicitly used by all the metadata adapters.</source>
          <target state="translated">이 전략은 사용자 정의가 필요하지 않으며 모든 메타 데이터 어댑터에서 암시 적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ddf179c5fca66ac15d0e269e9aebed60899b4dca" translate="yes" xml:space="preserve">
          <source>This strategy makes use of &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;annotations&lt;/em&gt;&lt;/a&gt; to describe the columns in a model:</source>
          <target state="translated">이 전략은 &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;주석&lt;/em&gt;&lt;/a&gt; 을 사용 하여 모델의 열을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="bf4e7cf28dc691044b305d6a74c9ab85db126264" translate="yes" xml:space="preserve">
          <source>This tool is very useful because it help you to get the real time used to render the whole page including HTML parsing, Javascript evaluation and CSS styling.</source>
          <target state="translated">이 도구는 HTML 구문 분석, Javascript 평가 및 CSS 스타일링을 포함한 전체 페이지를 렌더링하는 데 사용되는 실시간 정보를 얻는 데 도움이되므로 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="51d91aa8bb94455aa75c06c78ccbbe5e7f0ebf53" translate="yes" xml:space="preserve">
          <source>This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:</source>
          <target state="translated">이 유형은 객체를 예상합니다. 객체가 이미 객체이기 때문에 객체를 해결할 필요가 없기 때문에 실제로 의존성 주입이 아니라고 말할 수 있지만 반환 된 종속성을 항상 동일한 객체 /로 유지하려는 경우 유용합니다 값:</target>
        </trans-unit>
        <trans-unit id="08ce1d12f02317c0340961a8e92f785e297101be" translate="yes" xml:space="preserve">
          <source>This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:</source>
          <target state="translated">이 유형은 유효한 클래스의 이름을 예상하고 지정된 클래스의 객체를 반환합니다. 클래스가로드되지 않은 경우 자동 로더를 사용하여 인스턴스화됩니다. 이 유형의 정의에서는 클래스 생성자 또는 매개 변수에 대한 인수를 지정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="815e82d39f7d6cfb40291ffc06b6a0f3fe8a2163" translate="yes" xml:space="preserve">
          <source>This validator is only for use with Phalcon\Mvc\Collection. If you are using Phalcon\Mvc\Model, please use the validators provided by Phalcon\Validation.</source>
          <target state="translated">이 유효성 검사기는 Phalcon \ Mvc \ Collection에만 사용됩니다. Phalcon \ Mvc \ Model을 사용하는 경우 Phalcon \ Validation에서 제공 한 유효성 검사기를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="acadb8380f8ddb1bcaff63d4c4c224151325499d" translate="yes" xml:space="preserve">
          <source>This way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:</source>
          <target state="translated">이 작업 방식을 통해 이벤트, 가상 외래 키 및 유효성 검사가 업데이트 프로세스에 참여할 수 있습니다. 요약하면 다음 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="667044c3f38d6fb8b5c0033c27c1b397807e2452" translate="yes" xml:space="preserve">
          <source>This way of working gives us many advantages:</source>
          <target state="translated">이러한 작업 방식은 많은 이점을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9700195cde7a1ce0a408f387bf9c7e181ebaa429" translate="yes" xml:space="preserve">
          <source>This way, you can use it in controllers or views:</source>
          <target state="translated">이런 식으로 컨트롤러 또는 뷰에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9be5aceae203ac8ec7bc64d329ab7c76b584dc37" translate="yes" xml:space="preserve">
          <source>This will generate the following select tag with the value &amp;ldquo;Blue&amp;rdquo; selected:</source>
          <target state="translated">그러면 &quot;Blue&quot;값이 선택된 다음 선택 태그가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="e87a39e80ea5b673fdf20b0ead9826f21f51d475" translate="yes" xml:space="preserve">
          <source>This will ignore globally these fields on each INSERT/UPDATE operation on the whole application. If you want to ignore different attributes on different INSERT/UPDATE operations, you can specify the second parameter (boolean) - true for replacement. Forcing a default value can be done in the following way:</source>
          <target state="translated">전체 응용 프로그램의 각 INSERT / UPDATE 작업에서 이러한 필드를 전체적으로 무시합니다. 다른 INSERT / UPDATE 조작에서 다른 속성을 무시하려면 두 번째 매개 변수 (부울)를 지정할 수 있습니다. 대체를 위해 true입니다. 다음과 같은 방법으로 기본값을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33afe4cb861f5adc6e23901850b6e0127addcc7e" translate="yes" xml:space="preserve">
          <source>This will run any tests under the tests/ directory.</source>
          <target state="translated">이는 tests / 디렉토리에서 모든 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="38554087b78ad00628f8a20a1d4196f43fc2e046" translate="yes" xml:space="preserve">
          <source>Though Phalcon\Registry exposes methods like __get(), offsetGet(), count() etc, it is not recommended to invoke them manually (these methods exist mainly to match the interfaces the registry implements): $registry-&amp;gt;__get(&amp;ldquo;property&amp;rdquo;) is several times slower than $registry-&amp;gt;property.</source>
          <target state="translated">Phalcon \ Registry는 __get (), offsetGet (), count () 등과 같은 메소드를 노출하지만 수동으로 호출하지 않는 것이 좋습니다 (이 메소드는 주로 레지스트리가 구현하는 인터페이스와 일치하기 위해 존재합니다). $ registry-&amp;gt; __ get ( &quot;property &amp;rdquo;)는 $ registry-&amp;gt; property보다 몇 배 느립니다.</target>
        </trans-unit>
        <trans-unit id="9b933484e92a6c129a7a30257877978f9a07f527" translate="yes" xml:space="preserve">
          <source>Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block:</source>
          <target state="translated">Phalcon 문서의 튜토리얼과 예제에는 예외를 포착하는 공통 요소가 있습니다. try / catch 블록입니다.</target>
        </trans-unit>
        <trans-unit id="d861c62f98b923688b9b92b880ed671374f9cc39" translate="yes" xml:space="preserve">
          <source>Throughout this first tutorial, we&amp;rsquo;ll walk you through the creation of an application with a simple registration form from the ground up. We will also explain the basic aspects of the framework&amp;rsquo;s behavior. If you are interested in automatic code generation tools for Phalcon, you can check our &lt;a href=&quot;tools&quot;&gt;&lt;em&gt;developer tools&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">이 첫 번째 자습서 전체에서 간단한 등록 양식을 사용하여 처음부터 응용 프로그램을 만드는 과정을 안내합니다. 프레임 워크 동작의 기본 측면도 설명합니다. Phalcon 용 자동 코드 생성 도구에 관심이있는 경우 &lt;a href=&quot;tools&quot;&gt;&lt;em&gt;개발자 도구를&lt;/em&gt;&lt;/a&gt; 확인할 수 &lt;em&gt;있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b92f659e297c6345e69b64c0a5a5095ad7190920" translate="yes" xml:space="preserve">
          <source>Throws an exception when a notice or warning is raised</source>
          <target state="translated">통지 또는 경고가 발생하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="991e3e0d8e45ec64cbd223820ae67ab323e7e15c" translate="yes" xml:space="preserve">
          <source>Throws an internal exception</source>
          <target state="translated">내부 예외 발생</target>
        </trans-unit>
        <trans-unit id="bfdba0dc305bd8fbe4070ad66a0462ef37429197" translate="yes" xml:space="preserve">
          <source>Time to run &amp;ndash; is an integer number of seconds to allow a worker to run this job. This time is counted from the moment a worker reserves this job.</source>
          <target state="translated">실행 시간 &amp;ndash; 작업자가이 작업을 실행할 수있는 정수 (초)입니다. 이 시간은 근로자가이 직업을 예약 한 순간부터 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="0153174ca6dc4520c8728a194d64aa96dc40ff58" translate="yes" xml:space="preserve">
          <source>Timestamp when the profile ended</source>
          <target state="translated">프로필이 종료 된 타임 스탬프</target>
        </trans-unit>
        <trans-unit id="6d6c67d0e04f994ae9a15b2fbe4df0fd9a9c290f" translate="yes" xml:space="preserve">
          <source>Timestamp when the profile started</source>
          <target state="translated">프로필이 시작된 타임 스탬프</target>
        </trans-unit>
        <trans-unit id="c4669833bdb680864e7acb55854a917be661e229" translate="yes" xml:space="preserve">
          <source>Timestampable</source>
          <target state="translated">Timestampable</target>
        </trans-unit>
        <trans-unit id="d0fbecf7432369f3f03b530b6b74f3bf2bdd65df" translate="yes" xml:space="preserve">
          <source>To access the HTTP method data &lt;code&gt;$app&lt;/code&gt; needs to be passed into the closure:</source>
          <target state="translated">HTTP 메소드 데이터에 액세스하려면 &lt;code&gt;$app&lt;/code&gt; 을 클로저로 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="9e9bfab430386c08104d376189546534e47eb163" translate="yes" xml:space="preserve">
          <source>To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as &lt;a href=&quot;http://en.wikipedia.org/wiki/Lemon_Parser_Generator&quot;&gt;SQLite&lt;/a&gt;. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</source>
          <target state="translated">Phalcon은 가능한 최고의 성능을 달성하기 위해 &lt;a href=&quot;http://en.wikipedia.org/wiki/Lemon_Parser_Generator&quot;&gt;SQLite&lt;/a&gt; 와 동일한 기술을 사용하는 파서를 제공합니다 . 이 기술은 스레드 안전성이 매우 높은 메모리 공간을 가진 작은 메모리 내장 파서를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="63eac65416c75580f75e6d79abd5a0955d3132de" translate="yes" xml:space="preserve">
          <source>To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as &lt;a href=&quot;https://en.wikipedia.org/wiki/Lemon_Parser_Generator&quot;&gt;SQLite&lt;/a&gt;. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069086dbb55fca04911b0b00d044f3c85dd00855" translate="yes" xml:space="preserve">
          <source>To achieve the highest performance possible, we wrote a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</source>
          <target state="translated">최고의 성능을 달성하기 위해 SQLite와 동일한 기술을 사용하는 파서를 작성했습니다. 이 기술은 스레드 안전성이 매우 높은 메모리 공간을 가진 작은 메모리 내장 파서를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3ed61dee08e97fd9d1741370edf92e999a9932db" translate="yes" xml:space="preserve">
          <source>To achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations/queries to display data in the view:</source>
          <target state="translated">이를 위해서는 키를 사용하여 각 캐시를 고유하게 식별해야합니다. 먼저 캐시가 없거나 뷰에 데이터를 표시하기 위해 계산 / 쿼리를 작성하기 위해 만료되었는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="61f390cd27026bd98be4f873e3ffe482f28f1559" translate="yes" xml:space="preserve">
          <source>To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:</source>
          <target state="translated">이를 위해서는 PHQL 파서에 의해 생성 된 IR (intermediate representation)을 가로 채서 가능한 모든 캐시를 커스터마이징해야합니다.</target>
        </trans-unit>
        <trans-unit id="652e27c6907eaf79df10671621f0e8bd2d4cdbeb" translate="yes" xml:space="preserve">
          <source>To add the repository to our distribution:</source>
          <target state="translated">배포에 저장소를 추가하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c1e15a0b91e12bbff2dc2ba730b25e90ba6fb4bd" translate="yes" xml:space="preserve">
          <source>To add the repository to your distribution:</source>
          <target state="translated">배포에 저장소를 추가하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="3ca468880d9950f2aa78f05dc9e22b0ce9a5aa49" translate="yes" xml:space="preserve">
          <source>To avoid these or most sophisticated attacks, &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; removes invalid characters from the class name, reducing the possibility of being attacked.</source>
          <target state="translated">이러한 또는 가장 복잡한 공격을 피하기 위해 &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt; 는 클래스 이름에서 잘못된 문자를 제거하여 공격 가능성을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="dd1b0bc6ff61abfee71c3315a15ff80e063f7232" translate="yes" xml:space="preserve">
          <source>To better explain how PHQL works consider the following example. We have two models &amp;ldquo;Cars&amp;rdquo; and &amp;ldquo;Brands&amp;rdquo;:</source>
          <target state="translated">PHQL 작동 방식을보다 잘 설명하려면 다음 예를 고려하십시오. 우리는 두 가지 모델 &quot;차&quot;와 &quot;브랜드&quot;가 있습니다 :</target>
        </trans-unit>
        <trans-unit id="5f0715ec3acdb5a6d1e2b8e7f86f09e7521e364c" translate="yes" xml:space="preserve">
          <source>To call a &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt; helper, you only need to call an uncamelized version of the method:</source>
          <target state="translated">통화에 &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ 태그&lt;/em&gt;&lt;/a&gt; 도우미를, 당신은 단지 방법의 uncamelized 버전을 호출해야합니다 :</target>
        </trans-unit>
        <trans-unit id="25ed8e96931eea81d59de969d56332ea08cf02c5" translate="yes" xml:space="preserve">
          <source>To check if an expression is contained into other expressions &lt;code&gt;if &quot;a&quot; in &quot;abc&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;if &quot;a&quot; in &quot;abc&quot;&lt;/code&gt; 표현식이 다른 표현식에 포함되어 있는지 확인하려면</target>
        </trans-unit>
        <trans-unit id="bdfb9be0c6a2e6b9a99c146e3abe0618cb59f95e" translate="yes" xml:space="preserve">
          <source>To create a connection it&amp;rsquo;s necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:</source>
          <target state="translated">연결을 작성하려면 어댑터 클래스를 인스턴스화해야합니다. 연결 매개 변수가있는 배열 만 필요합니다. 아래 예제는 필수 및 선택적 매개 변수를 모두 전달하는 연결을 작성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e4ed4f5ba84743da9ac7abae431a014f1ad76e8a" translate="yes" xml:space="preserve">
          <source>To enable it, add the following to your bootstrap:</source>
          <target state="translated">활성화하려면 부트 스트랩에 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="cea533b0a305a7d4f6e4c0395758b6368d6cc799" translate="yes" xml:space="preserve">
          <source>To enter the system, users must have a valid username and password. Users are stored in the table &amp;ldquo;users&amp;rdquo; in the database &amp;ldquo;invo&amp;rdquo;.</source>
          <target state="translated">시스템에 들어가려면 유효한 사용자 이름과 비밀번호가 있어야합니다. 사용자는 데이터베이스 &quot;invo&quot;의 &quot;users&quot;테이블에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="ec772510098b0aa9f1025e9dc4191dc11ed08d97" translate="yes" xml:space="preserve">
          <source>To explain better how aliases work, let&amp;rsquo;s check the following example:</source>
          <target state="translated">별칭의 작동 방식을보다 잘 설명하기 위해 다음 예제를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="44fd6ca866d0fbe1d929e905d0150fff173013d6" translate="yes" xml:space="preserve">
          <source>To finish the detailed explanation of INVO we are going to explain how to customize INVO adding UI elements and changing the title according to the controller executed.</source>
          <target state="translated">INVO에 대한 자세한 설명을 마치기 위해 UI 요소를 추가하고 실행 된 컨트롤러에 따라 제목을 변경하는 INVO를 사용자 정의하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="37600b957d7219dde1b26a326d28f6079f329b7e" translate="yes" xml:space="preserve">
          <source>To generate the tag we use the class &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;. This is a utility class that allows us to build HTML tags with framework conventions in mind. As this class is a also a service registered in the DI we use &lt;code&gt;$this-&amp;gt;tag&lt;/code&gt; to access it.</source>
          <target state="translated">태그를 생성하기 위해 &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt; 클래스를 사용합니다 . 이것은 프레임 워크 규칙을 염두에두고 HTML 태그를 작성할 수있게하는 유틸리티 클래스입니다. 이 클래스는 DI에 등록 된 서비스이므로 &lt;code&gt;$this-&amp;gt;tag&lt;/code&gt; 를 사용하여 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="26182241982e97dc8a2e1d412852ce1179b93a93" translate="yes" xml:space="preserve">
          <source>To help you build the unit tests, we made a few abstract classes you can use to bootstrap the unit tests themselves. These files exist in the Phalcon incubator @ &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;https://github.com/phalcon/incubator&lt;/a&gt;.</source>
          <target state="translated">단위 테스트를 빌드 할 수 있도록 단위 테스트 자체를 부트 스트랩하는 데 사용할 수있는 몇 가지 추상 클래스를 만들었습니다. 이 파일들은 Phalcon 인큐베이터 @ &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;https://github.com/phalcon/incubator에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="dab8089343f48252917bb494c56a038c1827e91a" translate="yes" xml:space="preserve">
          <source>To illustrate how this component works and why it is important, consider the following example:</source>
          <target state="translated">이 구성 요소의 작동 방식과 중요한 이유를 설명하려면 다음 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="0af1c8a3a4a64f306d82abb89897a4be3109465f" translate="yes" xml:space="preserve">
          <source>To improve performance &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon\Acl&lt;/em&gt;&lt;/a&gt; instances can be serialized and stored in APC, session, text files or a database table so that they can be loaded at will without having to redefine the whole list. You can do that as follows:</source>
          <target state="translated">성능 향상을 위해 &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon \ Acl&lt;/em&gt;&lt;/a&gt; 인스턴스를 직렬화하여 APC, 세션, 텍스트 파일 또는 데이터베이스 테이블에 저장하여 전체 목록을 재정의하지 않고 자유롭게로드 할 수 있습니다. 다음과 같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac03ae219ca9a5cf8bf8aa2ae18c9dbf846fa529" translate="yes" xml:space="preserve">
          <source>To insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:</source>
          <target state="translated">행을 삽입, 업데이트 또는 삭제하려면 원시 SQL을 사용하거나 클래스에서 제공하는 사전 설정 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d074982dd1c4e6eff4099cb5a1f534c92acb86f5" translate="yes" xml:space="preserve">
          <source>To install Phalcon:</source>
          <target state="translated">Phalcon을 설치하려면</target>
        </trans-unit>
        <trans-unit id="20d0e2d61b095d45c795e18704dbc2d1ad796495" translate="yes" xml:space="preserve">
          <source>To make a model to react to an event, we must to implement a method with the same name of the event:</source>
          <target state="translated">모델이 이벤트에 반응하도록하려면 이벤트 이름이 같은 메소드를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="e66563d54c2e30d266f168e610fd11be9a14db63" translate="yes" xml:space="preserve">
          <source>To render a view it&amp;rsquo;s necessary to call the render method explicitly indicating the relative path to the view you want to display:</source>
          <target state="translated">뷰를 렌더링하려면 표시하려는 뷰의 상대 경로를 명시 적으로 나타내는 render 메소드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="3759350713699f06bd6061541884a99f500d7252" translate="yes" xml:space="preserve">
          <source>To run any unit tests you need to define them. The autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.</source>
          <target state="translated">단위 테스트를 실행하려면이를 정의해야합니다. 오토로더는 올바른 파일이로드되도록하므로 파일을 생성하기 만하면 phpunit이 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="c3a808c1883119f9963bc0c3a60407ef0b07581f" translate="yes" xml:space="preserve">
          <source>To solve this problem we can use hash algorithms as &lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;. Why bcrypt? Thanks to its &amp;ldquo;&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt#Algorithm&quot;&gt;Eksblowfish&lt;/a&gt;&amp;rdquo; key setup algorithm we can make the password encryption as &amp;ldquo;slow&amp;rdquo; as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.</source>
          <target state="translated">이 문제를 해결하기 위해 해시 알고리즘을 &lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt; 로 사용할 수 있습니다 . 왜 bcrypt? &quot; &lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt#Algorithm&quot;&gt;Eksblowfish&lt;/a&gt; &quot;키 설정 알고리즘 덕분에 암호 암호화를 원하는대로 &quot;느린&quot;것으로 만들 수 있습니다. 느린 알고리즘으로 인해 해시 뒤의 실제 암호를 계산하는 프로세스가 불가능하지는 않더라도 매우 어려워집니다. 이것은 무지개 테이블을 사용하여 가능한 공격으로부터 오랫동안 당신을 보호합니다.</target>
        </trans-unit>
        <trans-unit id="e8fe8bf1058ad7e173e67d5c9af4678bad60d1b1" translate="yes" xml:space="preserve">
          <source>To solve this problem we can use hash algorithms as &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;. Why bcrypt? Thanks to its &amp;ldquo;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt#Algorithm&quot;&gt;Eksblowfish&lt;/a&gt;&amp;rdquo; key setup algorithm we can make the password encryption as &amp;ldquo;slow&amp;rdquo; as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4de767dac285a80a7f9c1a40d22809f9260736a" translate="yes" xml:space="preserve">
          <source>To solve this, we have created a setter that injects the dependency externally before using it. For now, this seems to be a good solution:</source>
          <target state="translated">이를 해결하기 위해 의존성을 사용하기 전에 외부에 주입하는 setter를 만들었습니다. 현재로서는 이것이 좋은 해결책 인 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="f87bd9bada571af7b99001f7df34d00cd912435c" translate="yes" xml:space="preserve">
          <source>To speed up development &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; helps you to query fields and constraints from tables related to models. To achieve this, &lt;a href=&quot;../api/phalcon_mvc_model_metadata&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\MetaData&lt;/em&gt;&lt;/a&gt; is available to manage and cache table metadata.</source>
          <target state="translated">개발 속도를 높이기 위해 &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt; 을 사용하면 모델 관련 테이블에서 필드 및 제약 조건을 쿼리 할 수 ​​있습니다. 이를 위해 &lt;a href=&quot;../api/phalcon_mvc_model_metadata&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ MetaData&lt;/em&gt;&lt;/a&gt; 를 사용하여 테이블 메타 데이터를 관리하고 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8f1f0940482506aaea0b6bf788a727888ef5681" translate="yes" xml:space="preserve">
          <source>To start the server type:</source>
          <target state="translated">서버 유형을 시작하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="3837251fa7d6aba69ab40fa0c93d4708f77f0e23" translate="yes" xml:space="preserve">
          <source>To tell &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:</source>
          <target state="translated">말할 &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ MVC \ 모델&lt;/em&gt;&lt;/a&gt; 항상 트리거 또는 기본적으로 값의 대입 데이터베이스 시스템을 위임하기 위해 기록의 생성 및 / 또는 업데이트에서 일부 필드를 생략 :</target>
        </trans-unit>
        <trans-unit id="780c36acfac49dfb61b51f062fc2264e4540f8c9" translate="yes" xml:space="preserve">
          <source>To use phalcon on Windows you can &lt;a href=&quot;http://phalconphp.com/en/download&quot;&gt;download&lt;/a&gt; a DLL library. Edit your php.ini file and then append at the end:</source>
          <target state="translated">Windows에서 phalcon을 사용하려면 DLL 라이브러리를 &lt;a href=&quot;http://phalconphp.com/en/download&quot;&gt;다운로드&lt;/a&gt; 할 수 있습니다 . php.ini 파일을 편집 한 다음 끝에 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="1e3281a962e6db2e54e787f796eb7d2b1582389a" translate="yes" xml:space="preserve">
          <source>Transactions</source>
          <target state="translated">Transactions</target>
        </trans-unit>
        <trans-unit id="11382adf7f930e1cf6c7df6759438407fceeedaa" translate="yes" xml:space="preserve">
          <source>Transactions and Nested Transactions</source>
          <target state="translated">거래 및 중첩 거래</target>
        </trans-unit>
        <trans-unit id="eefb3f32b18a981f2ae957a4043235e6142bfadf" translate="yes" xml:space="preserve">
          <source>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. Phalcon\Transaction is intended to be used with Phalcon_Model_Base. Phalcon Transactions should be created using Phalcon\Transaction\Manager.</source>
          <target state="translated">트랜잭션은 SQL 문이 모두 하나의 원자 적 조치로 성공할 수있는 경우에만 영구적 인 보호 블록입니다. Phalcon \ Transaction은 Phalcon_Model_Base와 함께 사용하기위한 것입니다. Phalcon 트랜잭션은 Phalcon \ Transaction \ Manager를 사용하여 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="32fe84f033c5e32cdf533a9e92bdf935b55b1b54" translate="yes" xml:space="preserve">
          <source>Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a &lt;code&gt;commit()&lt;/code&gt; or &lt;code&gt;rollback()&lt;/code&gt; is performed. You can use the service container to create the global transaction manager for the entire application:</source>
          <target state="translated">트랜잭션은 트랜잭션 오브젝트가 검색되는 위치에 관계없이 재사용됩니다. &lt;code&gt;commit()&lt;/code&gt; 또는 &lt;code&gt;rollback()&lt;/code&gt; 이 수행 될 때만 새 트랜잭션이 생성됩니다 . 서비스 컨테이너를 사용하여 전체 애플리케이션에 대한 글로벌 트랜잭션 관리자를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c654ef6c72dbf4416e10195dc7cdaae5b75be077" translate="yes" xml:space="preserve">
          <source>Transactions can be used to delete many records in a consistent way:</source>
          <target state="translated">트랜잭션은 일관된 방식으로 많은 레코드를 삭제하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d472fa3c1df986be8ef5ba049cfc4415ffad880" translate="yes" xml:space="preserve">
          <source>Transactions in Phalcon allow you to commit all operations if they were executed successfully or rollback all operations if something went wrong.</source>
          <target state="translated">Phalcon의 트랜잭션을 사용하면 성공적으로 실행 된 모든 작업을 커밋하거나 문제가 발생한 경우 모든 작업을 롤백 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b90f50d9020aeb9c40c81caeea9b6a601a228d86" translate="yes" xml:space="preserve">
          <source>Transfer values from the controller to views</source>
          <target state="translated">컨트롤러에서 뷰로 값 전송</target>
        </trans-unit>
        <trans-unit id="64e165805cfe4500c1caa1fc8d4ee87bde4c2e4a" translate="yes" xml:space="preserve">
          <source>Transform an intermediate representation of a schema/table into a database system valid expression</source>
          <target state="translated">스키마 / 테이블의 중간 표현을 데이터베이스 시스템 유효한 표현식으로 변환</target>
        </trans-unit>
        <trans-unit id="d823923fdb814280eb08288d0aa9d27921cf2539" translate="yes" xml:space="preserve">
          <source>Transforms an intermediate representation for an expression into a database system valid expression</source>
          <target state="translated">표현식의 중간 표현을 데이터베이스 시스템 유효한 표현식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="2be17aa181d8226bfad83ce993e838fa79dcce4d" translate="yes" xml:space="preserve">
          <source>Translate</source>
          <target state="translated">Translate</target>
        </trans-unit>
        <trans-unit id="906c7e761305e15578a705d785d9ff1566f2d194" translate="yes" xml:space="preserve">
          <source>Translates a number to a special release If Special release = 1 this function will return ALPHA</source>
          <target state="translated">숫자를 특별 릴리스로 변환 특별 릴리스 = 1 인 경우이 함수는 ALPHA를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="450f4444d95c81537e0426d2f725e75300dd547d" translate="yes" xml:space="preserve">
          <source>Translation strings are stored in files. The structure of these files could vary depending of the adapter used. Phalcon gives you the freedom to organize your translation strings. A simple structure could be:</source>
          <target state="translated">번역 문자열은 파일에 저장됩니다. 이러한 파일의 구조는 사용 된 어댑터에 따라 달라질 수 있습니다. Phalcon은 번역 문자열을 자유롭게 구성 할 수 있습니다. 간단한 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8c7c31764c79068f7f5e6babe81f624dce0688f8" translate="yes" xml:space="preserve">
          <source>Transliteration</source>
          <target state="translated">Transliteration</target>
        </trans-unit>
        <trans-unit id="d918d2176a004c85265664657907beec1ca4a4f6" translate="yes" xml:space="preserve">
          <source>Traverses a collection and generate its HTML</source>
          <target state="translated">컬렉션을 탐색하고 HTML을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ab0d264989633be7d8ffc51a35e0abfdbaef9b76" translate="yes" xml:space="preserve">
          <source>Traverses a collection calling the callback to generate its HTML</source>
          <target state="translated">콜백을 호출하는 컬렉션을 탐색하여 HTML을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7e63a2afc929c94b6241ae1575a1bc1d9a6ca4ee" translate="yes" xml:space="preserve">
          <source>Traverses a statement list compiling each of its nodes</source>
          <target state="translated">각 노드를 컴파일하는 명령문 목록을 탐색합니다.</target>
        </trans-unit>
        <trans-unit id="63b038591b30891f280d2f38cf327459577ec09f" translate="yes" xml:space="preserve">
          <source>Treat the arguments independently and unresolved:</source>
          <target state="translated">인수를 독립적으로 처리하고 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="5885444e4c987798290ed05fb3fbda2b638caedc" translate="yes" xml:space="preserve">
          <source>Tries to render the view with every engine registered in the component</source>
          <target state="translated">컴포넌트에 등록 된 모든 엔진으로 뷰를 렌더링하려고합니다.</target>
        </trans-unit>
        <trans-unit id="933f5e3506fb96ccd72bc34a478e861ce00143b4" translate="yes" xml:space="preserve">
          <source>Triggered</source>
          <target state="translated">Triggered</target>
        </trans-unit>
        <trans-unit id="cb532357ecb4f237ed7ad5704db288fb36739070" translate="yes" xml:space="preserve">
          <source>Triggered after checking if a role/resource has access</source>
          <target state="translated">역할 / 자원에 액세스 권한이 있는지 확인한 후 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="ddc074a6066aa034e429f20d6684b6907ebedf21" translate="yes" xml:space="preserve">
          <source>Triggered after completing the render process</source>
          <target state="translated">렌더 프로세스 완료 후 트리거</target>
        </trans-unit>
        <trans-unit id="ef7191df075dca57e229be26493b539be0c59836" translate="yes" xml:space="preserve">
          <source>Triggered after completing the whole process in a successful way</source>
          <target state="translated">전체 프로세스를 성공적으로 완료 한 후 트리거</target>
        </trans-unit>
        <trans-unit id="da0c02b71dd7addf6c8125c706da276c9a14806c" translate="yes" xml:space="preserve">
          <source>Triggered after finish the autoloading process. If this event is launched the autoloader didn&amp;rsquo;t find the class file</source>
          <target state="translated">자동 로딩 프로세스가 완료된 후 트리거됩니다. 이 이벤트가 시작되면 오토로더가 클래스 파일을 찾지 못했습니다</target>
        </trans-unit>
        <trans-unit id="5b8bcbcfd6928a897747cd31eafb5720e109411e" translate="yes" xml:space="preserve">
          <source>Triggered after models are bound but before executing the handler</source>
          <target state="translated">모델이 바인딩 된 후 핸들러를 실행하기 전에 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="2f588bd3f7eb4dc44168006f616e08ccef7f0567" translate="yes" xml:space="preserve">
          <source>Triggered after rendering an existing view</source>
          <target state="translated">기존 뷰를 렌더링 한 후 트리거</target>
        </trans-unit>
        <trans-unit id="c125835be686d247c0e309735c44fb50c3932e7a" translate="yes" xml:space="preserve">
          <source>Triggered after resolve service. Listeners receive the service name, instance, and the parameters passed to it.</source>
          <target state="translated">서비스 해결 후 트리거됩니다. 리스너는 서비스 이름, 인스턴스 및 전달 된 매개 변수를받습니다.</target>
        </trans-unit>
        <trans-unit id="68d6b219812dfe17b7402de245c6cd0115be9a15" translate="yes" xml:space="preserve">
          <source>Triggered after running the handler</source>
          <target state="translated">핸들러를 실행 한 후 트리거</target>
        </trans-unit>
        <trans-unit id="6eea1c309b23bf41243acf5d09ba88a0e3721697" translate="yes" xml:space="preserve">
          <source>Triggered before checking if a role/resource has access</source>
          <target state="translated">역할 / 자원에 액세스 권한이 있는지 확인하기 전에 트리거</target>
        </trans-unit>
        <trans-unit id="463819417be76d27e79733f311be07b509c55c58" translate="yes" xml:space="preserve">
          <source>Triggered before rendering an existing view</source>
          <target state="translated">기존 뷰를 렌더링하기 전에 트리거</target>
        </trans-unit>
        <trans-unit id="03dd7642b124e313e097b36cd1231a0927d88664" translate="yes" xml:space="preserve">
          <source>Triggered before resolve service. Listeners receive the service name and the parameters passed to it.</source>
          <target state="translated">서비스 해결 전에 트리거됩니다. 리스너는 서비스 이름 및 전달 된 매개 변수를받습니다.</target>
        </trans-unit>
        <trans-unit id="316a6e8892c4e8a052ef398b52bf1476ba61a16d" translate="yes" xml:space="preserve">
          <source>Triggered before starting the autoloading process</source>
          <target state="translated">자동 로딩 프로세스를 시작하기 전에 트리거</target>
        </trans-unit>
        <trans-unit id="eb4930b4d128cd593fd565aba31010c65561a28b" translate="yes" xml:space="preserve">
          <source>Triggered before starting the render process</source>
          <target state="translated">렌더 프로세스를 시작하기 전에 트리거</target>
        </trans-unit>
        <trans-unit id="abda0d70fa203e32d24672c60e2db3d7c68ee25e" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any expression. This allows the developer to override any statement</source>
          <target state="translated">식을 컴파일하기 전에 트리거됩니다. 이를 통해 개발자는 모든 문장을 무시할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="b551575f8bb798bc59fd5bda1189480cc37c9834" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any expression. This allows the developer to override operators</source>
          <target state="translated">식을 컴파일하기 전에 트리거됩니다. 이를 통해 개발자는 연산자를 재정의 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5b7b52275cabcbbeef1d32e08691463283bd3515" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any filter call in a template</source>
          <target state="translated">템플릿에서 필터 호출을 컴파일하기 전에 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="7120c27cd819fac6d9729f0766a0d805cba9b000" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any function call in a template</source>
          <target state="translated">템플릿에서 함수 호출을 컴파일하기 전에 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="15821d6dbce6d0d3dce5bdfc1d582ecc5c72a79d" translate="yes" xml:space="preserve">
          <source>Triggered on</source>
          <target state="translated">트리거</target>
        </trans-unit>
        <trans-unit id="86158daf77d46f3064a253b5096894a5da9e9ad9" translate="yes" xml:space="preserve">
          <source>Triggered when a view was not found</source>
          <target state="translated">보기를 찾을 수 없을 때 트리거됩니다</target>
        </trans-unit>
        <trans-unit id="a17f09938b6a70e08ba804e25b680f46936a9e44" translate="yes" xml:space="preserve">
          <source>Triggered when any data manipulation operation fails</source>
          <target state="translated">데이터 조작 조작이 실패하면 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="ebac15dcf9d12aeaad72ea91260a4b8b387dc5f8" translate="yes" xml:space="preserve">
          <source>Triggered when any of the defined routes match the requested URI</source>
          <target state="translated">정의 된 경로 중 하나가 요청 된 URI와 일치 할 때 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="14f53ce50fecd9b8172350af491801536ba2f381" translate="yes" xml:space="preserve">
          <source>Triggered when the INSERT or UPDATE operation fails for any reason</source>
          <target state="translated">어떤 이유로 든 INSERT 또는 UPDATE 작업이 실패하면 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="9b310f8f6f3620d1b0599a693bf6b084fd2f6f4f" translate="yes" xml:space="preserve">
          <source>Triggered when the insert/update operation fails for any reason</source>
          <target state="translated">어떤 이유로 든 삽입 / 업데이트 작업이 실패하면 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="6978a39c72ef60d66c8de3a0885b4f00340f4175" translate="yes" xml:space="preserve">
          <source>Triggered when the loader locate a class</source>
          <target state="translated">로더가 클래스를 찾을 때 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="7299bc9384c3f4b3f3652390b548749c6885c25c" translate="yes" xml:space="preserve">
          <source>True if in the first iteration.</source>
          <target state="translated">첫 번째 반복 인 경우 참입니다.</target>
        </trans-unit>
        <trans-unit id="f1fe047289f785e6662e651c035e055c87b5ca6a" translate="yes" xml:space="preserve">
          <source>True if in the last iteration.</source>
          <target state="translated">마지막 반복에서 true입니다.</target>
        </trans-unit>
        <trans-unit id="3dc59609dd3b6d112601a11d076b32f731529ba7" translate="yes" xml:space="preserve">
          <source>True if the column is part of the table&amp;rsquo;s primary key</source>
          <target state="translated">열이 테이블의 기본 키의 일부인 경우 참</target>
        </trans-unit>
        <trans-unit id="6fb354bb8e96930923aff8e141cd43ee49d9c6a2" translate="yes" xml:space="preserve">
          <source>Try to check if the query must invoke a finder</source>
          <target state="translated">쿼리가 파인더를 호출해야하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="eea5e79911964297e4d474c87aa35daa44e85929" translate="yes" xml:space="preserve">
          <source>Try to insert a new robot with the name of an existing robot:</source>
          <target state="translated">기존 로봇 이름으로 새 로봇을 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="0bcfcbd28dd4d293b288a30b5f9bf248ab9e7e76" translate="yes" xml:space="preserve">
          <source>Tutorial 1: Let&amp;rsquo;s learn by example</source>
          <target state="translated">튜토리얼 1 : 예제로 배우자</target>
        </trans-unit>
        <trans-unit id="bc30ce024db531465a1b512702d1c7b0e9dd6015" translate="yes" xml:space="preserve">
          <source>Tutorial 1: Let’s learn by example</source>
          <target state="translated">튜토리얼 1 : 예제로 배우자</target>
        </trans-unit>
        <trans-unit id="41d7d729359e8d2124aecc3beee907c89fbde35c" translate="yes" xml:space="preserve">
          <source>Tutorial 2: Introducing INVO</source>
          <target state="translated">튜토리얼 2 : INVO 소개</target>
        </trans-unit>
        <trans-unit id="0d58a4c1b9fa5fc405f671db9d666c62ff6006bd" translate="yes" xml:space="preserve">
          <source>Tutorial 3: Securing INVO</source>
          <target state="translated">튜토리얼 3 : INVO 보안</target>
        </trans-unit>
        <trans-unit id="7b34231465746b24f0905ad161aa97dbae4cad3c" translate="yes" xml:space="preserve">
          <source>Tutorial 4: Working with the CRUD</source>
          <target state="translated">학습서 4 : CRUD 작업</target>
        </trans-unit>
        <trans-unit id="565b204cc47bf9fec203e9f8af249ce01c3ba71a" translate="yes" xml:space="preserve">
          <source>Tutorial 5: Customizing INVO</source>
          <target state="translated">튜토리얼 5 : INVO 사용자 정의</target>
        </trans-unit>
        <trans-unit id="80e3f9aa01ad61cc355e997b00dba9b949d74204" translate="yes" xml:space="preserve">
          <source>Tutorial 6: V&amp;ouml;kur&amp;oacute;</source>
          <target state="translated">튜토리얼 6 : kur 쿠로</target>
        </trans-unit>
        <trans-unit id="db5f91c5a1448ec10b2b240cadee156ec8f9f590" translate="yes" xml:space="preserve">
          <source>Tutorial 6: Vökuró</source>
          <target state="translated">튜토리얼 6 : kur 쿠로</target>
        </trans-unit>
        <trans-unit id="ee559adbaa46bb061d9d4857d2c19a1b792786a7" translate="yes" xml:space="preserve">
          <source>Tutorial 7: Creating a Simple REST API</source>
          <target state="translated">학습서 7 : 단순 REST API 작성</target>
        </trans-unit>
        <trans-unit id="92e88e7ca29accd87dcda0f6b5cf5bc3a5c00fc1" translate="yes" xml:space="preserve">
          <source>Tutorial: Creating a custom model&amp;rsquo;s initializer with Annotations</source>
          <target state="translated">학습서 : 주석을 사용하여 사용자 정의 모델의 이니셜 라이저 작성</target>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="c2a42d00a3f5c47212f19ff3175d697f781dd834" translate="yes" xml:space="preserve">
          <source>Type &amp;ldquo;cmd&amp;rdquo; and press enter to open the windows command line utility:</source>
          <target state="translated">&amp;ldquo;cmd&amp;rdquo;를 입력하고 Enter를 눌러 Windows 명령 행 유틸리티를여십시오.</target>
        </trans-unit>
        <trans-unit id="aa5e0677877c45f227bd2eedf1da83f98bb56e28" translate="yes" xml:space="preserve">
          <source>Type of database system the adapter is used for</source>
          <target state="translated">어댑터가 사용되는 데이터베이스 시스템의 유형</target>
        </trans-unit>
        <trans-unit id="a32cb32d39ea4758b2c6279930b4310caaa1cbc1" translate="yes" xml:space="preserve">
          <source>Type the command &amp;ldquo;phalcon&amp;rdquo; and you will see something like this:</source>
          <target state="translated">&amp;ldquo;phalcon&amp;rdquo;명령을 입력하면 다음과 같이 보일 것입니다 :</target>
        </trans-unit>
        <trans-unit id="b600f85412140a288e08bc6707a8b41cef4cd646" translate="yes" xml:space="preserve">
          <source>Type the commands &amp;ldquo;php -v&amp;rdquo; and &amp;ldquo;phalcon&amp;rdquo; and you will see something like this:</source>
          <target state="translated">&quot;php -v&quot;및 &quot;phalcon&quot;명령을 입력하면 다음과 같은 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4c1566366121eae749da1b5a1f9ef2fadf786bee" translate="yes" xml:space="preserve">
          <source>Types of Annotations</source>
          <target state="translated">주석의 종류</target>
        </trans-unit>
        <trans-unit id="7716c3cb2d711937c0af826c81ad7af1398f4fa5" translate="yes" xml:space="preserve">
          <source>Types of Built-in Filters</source>
          <target state="translated">내장 필터의 종류</target>
        </trans-unit>
        <trans-unit id="425948cb3f22f2449521275f5180922bb3aa4d60" translate="yes" xml:space="preserve">
          <source>URI Sources</source>
          <target state="translated">URI 소스</target>
        </trans-unit>
        <trans-unit id="dff72e92309dedc2a99a90045b42933818b2cc70" translate="yes" xml:space="preserve">
          <source>URI_SOURCE_GET_URL</source>
          <target state="translated">URI_SOURCE_GET_URL</target>
        </trans-unit>
        <trans-unit id="396ef204b69c681c236a224dddf27607ce4a2958" translate="yes" xml:space="preserve">
          <source>URI_SOURCE_SERVER_REQUEST_URI</source>
          <target state="translated">URI_SOURCE_SERVER_REQUEST_URI</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="377515a0f4469bcb66cd5573148e14b0426064fd" translate="yes" xml:space="preserve">
          <source>URL Generator Service</source>
          <target state="translated">URL 생성기 서비스</target>
        </trans-unit>
        <trans-unit id="3b601fefed4b7cf12498641f8b3d5ce9a4864fcc" translate="yes" xml:space="preserve">
          <source>URL Prefixes</source>
          <target state="translated">URL 접두사</target>
        </trans-unit>
        <trans-unit id="f91fe8205b19d940a2c9481737ee7712afbd9375" translate="yes" xml:space="preserve">
          <source>Ultimately, it is responsible for doing 3 things:</source>
          <target state="translated">궁극적으로 3 가지 일을 담당합니다.</target>
        </trans-unit>
        <trans-unit id="f1e86724baf521ff59137620d71a2956ed26fae2" translate="yes" xml:space="preserve">
          <source>Uncamelize strings which are camelized</source>
          <target state="translated">낙타 된 끈을 벗기다</target>
        </trans-unit>
        <trans-unit id="5781388802e2bc107ab685cd34e1d2c1c7561bb3" translate="yes" xml:space="preserve">
          <source>Underscores in property names can be problematic when using getters and setters.</source>
          <target state="translated">getter 및 setter를 사용할 때 속성 이름의 밑줄이 문제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a67c5244cefc33e87dea708e27782496a777bb4" translate="yes" xml:space="preserve">
          <source>Understanding Documents To Objects</source>
          <target state="translated">객체에 대한 문서 이해</target>
        </trans-unit>
        <trans-unit id="3aa537405b51e95e49cb04ce1fadbb6c73e49a40" translate="yes" xml:space="preserve">
          <source>Understanding How Phalcon Applications Work</source>
          <target state="translated">Phalcon 응용 프로그램 작동 방식 이해</target>
        </trans-unit>
        <trans-unit id="96a75e6d29f841d597f8c948a2332be0c5fb0305" translate="yes" xml:space="preserve">
          <source>Understanding Records To Objects</source>
          <target state="translated">객체에 대한 레코드 이해</target>
        </trans-unit>
        <trans-unit id="68022da377986d04179b6302a6ce30be10770d8a" translate="yes" xml:space="preserve">
          <source>Unidirectional relations are those that are generated in relation to one another but not vice versa.</source>
          <target state="translated">단방향 관계는 서로 관련하여 생성되지만 그 반대의 관계는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="5ea25cce3dd2352dc10b35e014056ebf6560c42b" translate="yes" xml:space="preserve">
          <source>Unidirectional relationships</source>
          <target state="translated">단방향 관계</target>
        </trans-unit>
        <trans-unit id="e6bb9b2dc1ab73cf360b066ecb8c25cc770b4619" translate="yes" xml:space="preserve">
          <source>Uniqueness method used for collection</source>
          <target state="translated">수집에 사용되는 고유성 방법</target>
        </trans-unit>
        <trans-unit id="60067126f8023f4d7d68d87f2b2dd9438eaaf8cf" translate="yes" xml:space="preserve">
          <source>Uniqueness method used for model</source>
          <target state="translated">모델에 사용되는 고유성 방법</target>
        </trans-unit>
        <trans-unit id="81a4be7e010cb6daabd6b2dab1722b9ed0372269" translate="yes" xml:space="preserve">
          <source>Unit testing</source>
          <target state="translated">단위 테스트</target>
        </trans-unit>
        <trans-unit id="b13d52a947b3f3a8aea0d0276de9a6481f708103" translate="yes" xml:space="preserve">
          <source>Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.</source>
          <target state="translated">다른 템플릿 엔진과 달리 Volt 자체는 컴파일 된 템플릿을 실행할 필요가 없습니다. 템플릿이 컴파일되면 Volt에 의존하지 않습니다. 성능 독립성을 염두에두고 Volt는 PHP 템플릿의 컴파일러 역할 만합니다.</target>
        </trans-unit>
        <trans-unit id="74ac9561943638bab40b0aa8bdfbd2a88c47148b" translate="yes" xml:space="preserve">
          <source>Unregister the autoload method</source>
          <target state="translated">자동로드 방법 등록 해제</target>
        </trans-unit>
        <trans-unit id="ea95c362ff67ab8c924f97cd7ecb71f06f5fe592" translate="yes" xml:space="preserve">
          <source>Unserializes data after retrieval</source>
          <target state="translated">검색 후 데이터를 직렬화 해제</target>
        </trans-unit>
        <trans-unit id="857792f695e7bde398ffc51e5e12af3943ac4b5c" translate="yes" xml:space="preserve">
          <source>Unserializes the object from a serialized string</source>
          <target state="translated">직렬화 된 문자열에서 개체를 직렬화 해제합니다</target>
        </trans-unit>
        <trans-unit id="95925d3396a398448a83c913598afdfedbb94de6" translate="yes" xml:space="preserve">
          <source>Unserializing a resultset will allow to only works on the rows present in the saved state</source>
          <target state="translated">결과 집합을 직렬화 해제하면 저장된 상태에있는 행에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="47875f85fa1e698444f636e3f262c3907e6c06d2" translate="yes" xml:space="preserve">
          <source>Unsets a translation from the dictionary</source>
          <target state="translated">사전에서 번역을 해제합니다</target>
        </trans-unit>
        <trans-unit id="36f19a6803d9477e4829957222ba60ff2a20f9f6" translate="yes" xml:space="preserve">
          <source>Unsets an attribute using the array-syntax</source>
          <target state="translated">배열 구문을 사용하여 속성을 설정 해제합니다</target>
        </trans-unit>
        <trans-unit id="b4dce3f7a140aaa9e38c3e7e125655d63445b450" translate="yes" xml:space="preserve">
          <source>Unsets an element in the registry</source>
          <target state="translated">레지스트리에서 요소를 설정 해제합니다</target>
        </trans-unit>
        <trans-unit id="440359ee6a87bfb84c2e8fee1dd0114cb9f51428" translate="yes" xml:space="preserve">
          <source>Updates a model instance. If the instance doesn&amp;rsquo;t exist in the persistence it will throw an exception Returning true on success or false otherwise.</source>
          <target state="translated">모델 인스턴스를 업데이트합니다. 인스턴스가 지속성에 존재하지 않으면 예외가 발생합니다. 성공하면 true를 반환하고 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7102580ad22989761580fc11a70361a123ee0b25" translate="yes" xml:space="preserve">
          <source>Updates data on a table using custom RBDM SQL syntax</source>
          <target state="translated">사용자 정의 RBDM SQL 구문을 사용하여 테이블의 데이터를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="54cb61830bd584c0a66ab46fd07027989ccc4c26" translate="yes" xml:space="preserve">
          <source>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</source>
          <target state="translated">사용자 정의 RBDM SQL 구문을 사용하여 테이블의 데이터를 업데이트합니다. 더 편리한 또 다른 구문</target>
        </trans-unit>
        <trans-unit id="793ec242bb2241e46a7f74dadfc66be0fa720540" translate="yes" xml:space="preserve">
          <source>Updates every record in the resultset</source>
          <target state="translated">결과 집합의 모든 레코드를 업데이트합니다</target>
        </trans-unit>
        <trans-unit id="aff2b2c772edbef0443c8309e624b6d176624b96" translate="yes" xml:space="preserve">
          <source>Updates robots based on primary key</source>
          <target state="translated">기본 키를 기반으로 로봇 업데이트</target>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">Updating</target>
        </trans-unit>
        <trans-unit id="dd8ce06e479993fd7940ea48abaafb1c49415931" translate="yes" xml:space="preserve">
          <source>Updating Data</source>
          <target state="translated">데이터 업데이트</target>
        </trans-unit>
        <trans-unit id="acde98b288df53ae73a7100ffb565427414530ea" translate="yes" xml:space="preserve">
          <source>Updating related records</source>
          <target state="translated">관련 레코드 업데이트</target>
        </trans-unit>
        <trans-unit id="dc00a9bd433cb0364ba445dbc4d88b4f5eb76c2d" translate="yes" xml:space="preserve">
          <source>Updating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.</source>
          <target state="translated">행을 업데이트하는 것은 행을 삽입하는 것과 매우 유사합니다. 아시다시피 레코드 업데이트 명령은 UPDATE입니다. 레코드가 업데이트되면 업데이트 작업과 관련된 이벤트가 각 행에 대해 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="943e26649b772824ba55708d2fd502f15bc84dd0" translate="yes" xml:space="preserve">
          <source>Uploading Files</source>
          <target state="translated">파일 업로드</target>
        </trans-unit>
        <trans-unit id="50af22368c133d885a1686402ab432dd4db6298b" translate="yes" xml:space="preserve">
          <source>Uppercase string with message type</source>
          <target state="translated">메시지 유형의 대문자 문자열</target>
        </trans-unit>
        <trans-unit id="41985785bf31a8a5e3923d6e3fc7a220a9e5f874" translate="yes" xml:space="preserve">
          <source>Uppercases a string, this function makes use of the mbstring extension if available</source>
          <target state="translated">문자열을 대문자로합니다.이 함수는 사용 가능한 경우 mbstring 확장명을 사용합니다</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="14d7a6351adcc22650767cc1f7ee198ae2b1ccac" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;../api/phalcon_mvc_model_query_builder&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Query\Builder&lt;/em&gt;&lt;/a&gt; object as source data</source>
          <target state="translated">용도 &lt;a href=&quot;../api/phalcon_mvc_model_query_builder&quot;&gt;&lt;em&gt;Phalcon \ MVC \ 모델 \ 쿼리 \ 빌더의&lt;/em&gt;&lt;/a&gt; 소스 데이터와 같은 객체를</target>
        </trans-unit>
        <trans-unit id="6fc00fcce2b4941974d4ca3ecaaa8a854bad9a0a" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset&lt;/em&gt;&lt;/a&gt; object as source data. Since PDO doesn&amp;rsquo;t support scrollable cursors this adapter shouldn&amp;rsquo;t be used to paginate a large number of records</source>
          <target state="translated">용도 &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon \ MVC \ 모델 \ 결과 집합&lt;/em&gt;&lt;/a&gt; 소스 데이터와 같은 개체를. PDO는 스크롤 가능한 커서를 지원하지 않으므로이 어댑터를 사용하여 많은 수의 레코드를 페이지 매김해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="b70ab34d7572569f24f105a5f5a9bda8a7fc019a" translate="yes" xml:space="preserve">
          <source>Use a PHP Bytecode Cache</source>
          <target state="translated">PHP 바이트 코드 캐시 사용</target>
        </trans-unit>
        <trans-unit id="10a6eee5ae64882fdfe1c7009b211d6d743ee383" translate="yes" xml:space="preserve">
          <source>Use a PHP array as source data</source>
          <target state="translated">PHP 배열을 소스 데이터로 사용</target>
        </trans-unit>
        <trans-unit id="758cccbfcc842d3be58defb02b33adf3ec049acc" translate="yes" xml:space="preserve">
          <source>Use a recent PHP version</source>
          <target state="translated">최신 PHP 버전 사용</target>
        </trans-unit>
        <trans-unit id="c669639dd7c3641f2a1d3929fa9376fd9f67fdd4" translate="yes" xml:space="preserve">
          <source>Use an autoload strategy that takes into account the namespaces, for example with &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">네임 스페이스를 고려한 자동로드 전략을 사용하십시오 (예 : &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader 사용)&lt;/em&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b1e98c12f27064aebc399e12c8fffe5317a655b3" translate="yes" xml:space="preserve">
          <source>Use the standard &amp;rdquo;.phtml&amp;rdquo; extension:</source>
          <target state="translated">표준&amp;rdquo;.phtml&amp;rdquo;확장자를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d7e52f13f173bfcb186b02d736c570c9e14f61f6" translate="yes" xml:space="preserve">
          <source>User Components</source>
          <target state="translated">사용자 구성 요소</target>
        </trans-unit>
        <trans-unit id="d344f36624c7db42ecd83caaa46d642e7b352960" translate="yes" xml:space="preserve">
          <source>Uses INI files to store settings. Internally the adapter uses the PHP function parse_ini_file.</source>
          <target state="translated">INI 파일을 사용하여 설정을 저장합니다. 내부적으로 어댑터는 PHP 함수 parse_ini_file을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1588d242d5ad8402d0e51acefc3161494a00ce89" translate="yes" xml:space="preserve">
          <source>Uses JSON files to store settings.</source>
          <target state="translated">JSON 파일을 사용하여 설정을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="cf25bb876cb3f454b7c9486dfc8c4dd22c87f27d" translate="yes" xml:space="preserve">
          <source>Uses PHP arrays to store the messages. This is the best option in terms of performance.</source>
          <target state="translated">PHP 배열을 사용하여 메시지를 저장합니다. 이것이 성능면에서 가장 좋은 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="b886b3130f808eb47b6196131fb759b63124809c" translate="yes" xml:space="preserve">
          <source>Uses PHP multidimensional arrays to store settings. This adapter offers the best performance.</source>
          <target state="translated">PHP 다차원 배열을 사용하여 설정을 저장합니다. 이 어댑터는 최고의 성능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cdf24a6eeb448005fc6c86e216ef8eae5711c446" translate="yes" xml:space="preserve">
          <source>Uses YAML files to store settings.</source>
          <target state="translated">YAML 파일을 사용하여 설정을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="3e5fab69483d85d0637c6b3177fec6952dd950a4" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">사용 &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ MVC \보기를&lt;/em&gt;&lt;/a&gt; 독립형 모드에서 아래를 입증 할 수 :</target>
        </trans-unit>
        <trans-unit id="34e75d1ef6d457a1ed2a410e96c6436c782214af" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; you can pass variables from the controller to the views. In the above example, four variables were passed to the view: &lt;code&gt;show_navigation&lt;/code&gt;, &lt;code&gt;menu&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt; 를 사용하면 변수를 컨트롤러에서 &lt;em&gt;보기로&lt;/em&gt; 전달할 수 있습니다. 위 예제에서 &lt;code&gt;show_navigation&lt;/code&gt; , &lt;code&gt;menu&lt;/code&gt; , &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;post&lt;/code&gt; 의 네 가지 변수가보기로 전달되었습니다 .</target>
        </trans-unit>
        <trans-unit id="fefcd1d46ecea495272355aafbd32b2de35ad2b3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\View\Simple&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">사용 &lt;a href=&quot;../api/phalcon_mvc_view_simple&quot;&gt;&lt;em&gt;Phalcon \ MVC \보기 \ 간단한을&lt;/em&gt;&lt;/a&gt; 독립 실행 형 모드에서 아래를 입증 할 수 :</target>
        </trans-unit>
        <trans-unit id="fa2bd1e51e64b7795a575f7a12e3a2784f1c72a5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://en.wikipedia.org/wiki/CURL&quot;&gt;curl&lt;/a&gt; we&amp;rsquo;ll test every route in our application verifying its proper operation.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/CURL&quot;&gt;curl&lt;/a&gt; 을 사용하여 응용 프로그램의 모든 경로가 제대로 작동하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="314da5bf1f553b16db409e765e2c7ce677b4c400" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://en.wikipedia.org/wiki/CURL&quot;&gt;curl&lt;/a&gt; we&amp;rsquo;ll test every route in our application verifying its proper operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f23878b1d7e5dcc33c15971b656330b14432f4" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;models&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">사용 &lt;a href=&quot;models&quot;&gt;&lt;em&gt;Phalcon \ MVC \ 모델을&lt;/em&gt;&lt;/a&gt; 독립형 모드에서 아래를 입증 할 수 :</target>
        </trans-unit>
        <trans-unit id="57605863f91d6afc1bcf7d1ffdafe1bacf4a048c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$_GET['_url']&lt;/code&gt; as source of URIs:</source>
          <target state="translated">사용 &lt;code&gt;$_GET['_url']&lt;/code&gt; 의 URI 소스로를 :</target>
        </trans-unit>
        <trans-unit id="b50f09cafe370a77b4903e3455e1be35fbff36b2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$_SERVER['REQUEST_URI']&lt;/code&gt; as source of URIs:</source>
          <target state="translated">URI의 소스로 &lt;code&gt;$_SERVER['REQUEST_URI']&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="d1bab01d60a9e89a547752c6962b5e54e2601a39" translate="yes" xml:space="preserve">
          <source>Using Controllers</source>
          <target state="translated">컨트롤러 사용</target>
        </trans-unit>
        <trans-unit id="351aabc33d8513008e93393f1cc8419e0425c928" translate="yes" xml:space="preserve">
          <source>Using Controllers as Handlers</source>
          <target state="translated">컨트롤러를 핸들러로 사용</target>
        </trans-unit>
        <trans-unit id="588c359296585ea708ddd4793d4f606e3909661c" translate="yes" xml:space="preserve">
          <source>Using PHP Built-in webserver</source>
          <target state="translated">PHP 내장 웹 서버 사용</target>
        </trans-unit>
        <trans-unit id="dd4669ca9c2fe5d3bc7226103f94706530f82eb9" translate="yes" xml:space="preserve">
          <source>Using Partials</source>
          <target state="translated">부분 사용</target>
        </trans-unit>
        <trans-unit id="3069441f79ae6a7f25e785c04b30c78d241bd59e" translate="yes" xml:space="preserve">
          <source>Using Raw SQL</source>
          <target state="translated">원시 SQL 사용</target>
        </trans-unit>
        <trans-unit id="2dfdff9babf39b8c5711494190419fd6967d2d2b" translate="yes" xml:space="preserve">
          <source>Using Services From The DI</source>
          <target state="translated">DI의 서비스 사용</target>
        </trans-unit>
        <trans-unit id="589d42f04f1518dc454ae79b971f929c57733d04" translate="yes" xml:space="preserve">
          <source>Using Services as Controllers</source>
          <target state="translated">컨트롤러로 서비스 사용</target>
        </trans-unit>
        <trans-unit id="58cef50934545f6b19bfc272e4732512274db4c0" translate="yes" xml:space="preserve">
          <source>Using Tag Helpers</source>
          <target state="translated">태그 헬퍼 사용하기</target>
        </trans-unit>
        <trans-unit id="2bdcb486fee8f928e6c7e37223e07b0f33283cc7" translate="yes" xml:space="preserve">
          <source>Using Templates</source>
          <target state="translated">템플릿 사용</target>
        </trans-unit>
        <trans-unit id="0947a90a8e69f702eacc627176e66b602d4b3c69" translate="yes" xml:space="preserve">
          <source>Using Traits as behaviors</source>
          <target state="translated">특성으로 행동 특성 사용</target>
        </trans-unit>
        <trans-unit id="56a90897779592deadbdbc99979f674bd92a7405" translate="yes" xml:space="preserve">
          <source>Using Views</source>
          <target state="translated">뷰 사용</target>
        </trans-unit>
        <trans-unit id="c418f8ec32d68ec2f2f60f97430872d34b4dbeb1" translate="yes" xml:space="preserve">
          <source>Using Volt in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">독립형 모드에서 볼트를 사용하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6f8449787a74e1ce921d54d058cc629ca224812a" translate="yes" xml:space="preserve">
          <source>Using XDebug</source>
          <target state="translated">XDebug 사용</target>
        </trans-unit>
        <trans-unit id="7c05453f03bd0dc68f7fbd0c40b5627017c7c2e3" translate="yes" xml:space="preserve">
          <source>Using a custom Events Manager</source>
          <target state="translated">사용자 정의 이벤트 관리자 사용</target>
        </trans-unit>
        <trans-unit id="436ca32c9faf4089e26c447e696ab5b1a773be61" translate="yes" xml:space="preserve">
          <source>Using a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application will use.</source>
          <target state="translated">다른 템플릿 엔진을 사용하면 일반적으로 사용자의 최종 출력을 생성하기 위해 외부 PHP 라이브러리를 사용하여 복잡한 텍스트 파싱이 필요합니다. 일반적으로 응용 프로그램에서 사용할 리소스 수가 증가합니다.</target>
        </trans-unit>
        <trans-unit id="c7786b422ff512cc03b04a2554ab449d72d57da1" translate="yes" xml:space="preserve">
          <source>Using a tool like &lt;a href=&quot;https://github.com/jokkedk/webgrind/&quot;&gt;Webgrind&lt;/a&gt; you can see which functions/methods are slower than others:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jokkedk/webgrind/&quot;&gt;Webgrind&lt;/a&gt; 와 같은 도구를 사용하면 어떤 기능 / 방법이 다른 것보다 느린 지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c01ee9c01b6017148f9cb829ad4a6913dc10054" translate="yes" xml:space="preserve">
          <source>Using conversors</source>
          <target state="translated">대화자 사용</target>
        </trans-unit>
        <trans-unit id="e57549a4bc19901d6e510959e1c7ccc2964ad81d" translate="yes" xml:space="preserve">
          <source>Using high-level abstraction components such as &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt; to access a database, it is difficult to understand which statements are sent to the database system. &lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon\Logger&lt;/em&gt;&lt;/a&gt; interacts with &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, providing logging capabilities on the database abstraction layer.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt; 와 같은 고급 추상화 구성 요소 를 사용하여 데이터베이스에 액세스하면 데이터베이스 시스템으로 전송되는 문을 이해하기가 어렵습니다. &lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon \ Logger&lt;/em&gt;&lt;/a&gt; 는 &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt; 와 상호 작용 하여 데이터베이스 추상화 계층에서 로깅 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1d128ac661df982402abb983ac231b97884e8528" translate="yes" xml:space="preserve">
          <source>Using namespaces has some implications when loading the appropriate controller. To adjust the framework behavior to namespaces is necessary to perform one or all of the following tasks:</source>
          <target state="translated">네임 스페이스를 사용하면 적절한 컨트롤러를로드 할 때 몇 가지 의미가 있습니다. 다음 작업 중 하나 또는 모두를 수행하려면 프레임 워크 동작을 네임 스페이스로 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="8a5ba25655351e4366f72db55501f7260dc5ded1" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt; it&amp;rsquo;s possible to insert a hook point before the dispatcher throws an exception when the controller/action combination wasn&amp;rsquo;t found:</source>
          <target state="translated">&lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager를&lt;/em&gt;&lt;/a&gt; 사용하면 컨트롤러 / 액션 조합을 찾을 수 없을 때 디스패처가 예외를 throw하기 전에 후크 포인트를 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e022cbde3f76b6597bcb2be152ca8342512bf0f7" translate="yes" xml:space="preserve">
          <source>Using the unique name, forms can be accessed in any part of the application:</source>
          <target state="translated">고유 한 이름을 사용하면 응용 프로그램의 어느 부분에서나 양식에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6acdb6f02a643c7fdd2ddfd8357c54babe5d3c7c" translate="yes" xml:space="preserve">
          <source>Using this class as entity, allows the form to take the default values from it:</source>
          <target state="translated">이 클래스를 엔티티로 사용하면 양식에서 기본값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d060595ac9b24a27c2c469c945f6d549ce922240" translate="yes" xml:space="preserve">
          <source>Usually the Flash Messaging service is requested from the services container. If you&amp;rsquo;re using &lt;a href=&quot;../api/phalcon_di_factorydefault&quot;&gt;&lt;em&gt;Phalcon\Di\FactoryDefault&lt;/em&gt;&lt;/a&gt; then &lt;a href=&quot;../api/phalcon_flash_direct&quot;&gt;&lt;em&gt;Phalcon\Flash\Direct&lt;/em&gt;&lt;/a&gt; is automatically registered as &amp;ldquo;flash&amp;rdquo; service and &lt;a href=&quot;../api/phalcon_flash_session&quot;&gt;&lt;em&gt;Phalcon\Flash\Session&lt;/em&gt;&lt;/a&gt; is automatically registered as &amp;ldquo;flashSession&amp;rdquo; service. You can also manually register it:</source>
          <target state="translated">일반적으로 Flash Messaging 서비스는 서비스 컨테이너에서 요청됩니다. &lt;a href=&quot;../api/phalcon_di_factorydefault&quot;&gt;&lt;em&gt;Phalcon \ Di \ FactoryDefault&lt;/em&gt;&lt;/a&gt; 를 사용하는 경우 &lt;a href=&quot;../api/phalcon_flash_direct&quot;&gt;&lt;em&gt;Phalcon \ Flash \ Direct&lt;/em&gt;&lt;/a&gt; 가 자동으로 &quot;플래시&quot;서비스로 등록되고 &lt;a href=&quot;../api/phalcon_flash_session&quot;&gt;&lt;em&gt;Phalcon \ Flash \ Session&lt;/em&gt;&lt;/a&gt; 이 자동으로 &quot;flashSession&quot;서비스로 등록됩니다. 수동으로 등록 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="afd552a9fc7485f6bcb11d28c84e40b2740ea1bd" translate="yes" xml:space="preserve">
          <source>Usually, this component must be registered in the Dependency Injector container, so you can set up it there:</source>
          <target state="translated">일반적으로이 구성 요소는 Dependency Injector 컨테이너에 등록되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="7235465090646f5304f0a22a72a273472cdd6ff4" translate="yes" xml:space="preserve">
          <source>Utility to normalize a string&amp;rsquo;s encoding to UTF-32.</source>
          <target state="translated">문자열 인코딩을 UTF-32로 정규화하는 유틸리티</target>
        </trans-unit>
        <trans-unit id="e18f42d3097ac4903fde0081de3efaa3b3e02188" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute; is another sample application you can use to learn more about Phalcon. V&amp;ouml;kur&amp;oacute; is a small website that shows how to implement a security features and management of users and permissions. You can clone its code from &lt;a href=&quot;https://github.com/phalcon/vokuro&quot;&gt;Github&lt;/a&gt;.</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute;는 Phalcon에 대해 더 배우기 위해 사용할 수있는 또 다른 샘플 응용 프로그램입니다. V&amp;ouml;kur&amp;oacute;는 보안 기능을 구현하고 사용자 및 권한을 관리하는 방법을 보여주는 작은 웹 사이트입니다. &lt;a href=&quot;https://github.com/phalcon/vokuro&quot;&gt;Github&lt;/a&gt; 에서 코드를 복제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="03557dc8a5e878b3d82989cd0d208e8c15ff9291" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute; sends emails to confirm the sign up of registered users using Swift, the composer.json looks like:</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute;는 Swift를 사용하여 등록 된 사용자의 가입을 확인하기 위해 이메일을 보냅니다. composer.json은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="48740c2e0eba7a4489cd530438565f589a7f9f78" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute;: Security, Authentication, Authorization and more</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute; : 보안, 인증, 인증 등</target>
        </trans-unit>
        <trans-unit id="7672694253ca92e0dce69184fdeec37f709db3c3" translate="yes" xml:space="preserve">
          <source>VERSION_MAJOR</source>
          <target state="translated">VERSION_MAJOR</target>
        </trans-unit>
        <trans-unit id="9f4043bc6087635a4144a1b9e9481b30e44b62ee" translate="yes" xml:space="preserve">
          <source>VERSION_MEDIUM</source>
          <target state="translated">VERSION_MEDIUM</target>
        </trans-unit>
        <trans-unit id="3225bf508a5f7898b6242e8edb4d3664899f1c67" translate="yes" xml:space="preserve">
          <source>VERSION_MINOR</source>
          <target state="translated">VERSION_MINOR</target>
        </trans-unit>
        <trans-unit id="ca59e520f4a9c68edf021711bd307d285c599494" translate="yes" xml:space="preserve">
          <source>VERSION_SPECIAL</source>
          <target state="translated">VERSION_SPECIAL</target>
        </trans-unit>
        <trans-unit id="ddc72638e6da7c773007a44ac58c1b250f69f173" translate="yes" xml:space="preserve">
          <source>VERSION_SPECIAL_NUMBER</source>
          <target state="translated">VERSION_SPECIAL_NUMBER</target>
        </trans-unit>
        <trans-unit id="433bc92f0786ed6903790ac07a5aa6aac6fcf35c" translate="yes" xml:space="preserve">
          <source>VERTICAL</source>
          <target state="translated">VERTICAL</target>
        </trans-unit>
        <trans-unit id="648dd0d84cb56188904dc8a7f1b1f05dd0288f21" translate="yes" xml:space="preserve">
          <source>Validate a set of data according to a set of rules</source>
          <target state="translated">규칙 집합에 따라 데이터 집합의 유효성을 검사합니다</target>
        </trans-unit>
        <trans-unit id="2f1b38e434103e4cd88b17cf35e500d1dbf27b52" translate="yes" xml:space="preserve">
          <source>Validates that a field or a combination of a set of fields are not present more than once in the existing records of the related table</source>
          <target state="translated">필드 또는 필드 세트의 조합이 관련 테이블의 기존 레코드에 두 번 이상 존재하지 않는지 검증합니다.</target>
        </trans-unit>
        <trans-unit id="09954265ae786532ceffb5502e9f1cc0152b31a1" translate="yes" xml:space="preserve">
          <source>Validates that a string has the specified maximum and minimum constraints The test is passed if for a string&amp;rsquo;s length L, min&amp;lt;=L&amp;lt;=max, i.e. L must be at least min, and at most max.</source>
          <target state="translated">문자열에 지정된 최대 및 최소 제약 조건이 있는지 확인합니다. 문자열의 길이가 L, min &amp;lt;= L &amp;lt;= max 인 경우, 즉 L이 최소값, 최대 값이어야하는 경우 테스트가 통과됩니다.</target>
        </trans-unit>
        <trans-unit id="49467d80d7d2350ce8b5a3a3b2f5ece88e0c45a4" translate="yes" xml:space="preserve">
          <source>Validates that a value is between an inclusive range of two values. For a value x, the test is passed if minimum&amp;lt;=x&amp;lt;=maximum.</source>
          <target state="translated">값이 두 값의 포함 범위 사이인지 검증합니다. 값 x의 경우, 최소 &amp;lt;= x &amp;lt;= 최대 인 경우 테스트가 통과됩니다.</target>
        </trans-unit>
        <trans-unit id="be6f99a44675c56da59d2c2c8387de6f19cb7040" translate="yes" xml:space="preserve">
          <source>Validates that a value is ipv4 address in valid range</source>
          <target state="translated">값이 유효한 범위의 ipv4 주소인지 확인</target>
        </trans-unit>
        <trans-unit id="c31bf4a8ab5e77008ba24f8d78ce48fa187b74cd" translate="yes" xml:space="preserve">
          <source>Validates that a value is not null or empty string</source>
          <target state="translated">값이 null이거나 비어있는 문자열이 아닌지 확인</target>
        </trans-unit>
        <trans-unit id="eb86e39b625cc355f8fd303e616b77bfc6e3b88b" translate="yes" xml:space="preserve">
          <source>Validates the form</source>
          <target state="translated">양식을 확인합니다</target>
        </trans-unit>
        <trans-unit id="3f025ac4cddf2343fd061b333fd0f1bd45353a90" translate="yes" xml:space="preserve">
          <source>Validating Data Integrity</source>
          <target state="translated">데이터 무결성 검증</target>
        </trans-unit>
        <trans-unit id="8bb20ec2ad79ee9bedf554ba015b63a8388aec1e" translate="yes" xml:space="preserve">
          <source>Validating Models</source>
          <target state="translated">모델 검증</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="7c3ffd6c63c688ef2084a3c36c96682569d2dcbb" translate="yes" xml:space="preserve">
          <source>Validation Events</source>
          <target state="translated">검증 이벤트</target>
        </trans-unit>
        <trans-unit id="900aacdde971f44b1426d3b6340bd08cbd3b4dd7" translate="yes" xml:space="preserve">
          <source>Validation Events and Events Manager</source>
          <target state="translated">유효성 검사 이벤트 및 이벤트 관리자</target>
        </trans-unit>
        <trans-unit id="7e557e2d327fddfa102d879d6bdc30443e867e89" translate="yes" xml:space="preserve">
          <source>Validation Failed Events</source>
          <target state="translated">검증 실패 이벤트</target>
        </trans-unit>
        <trans-unit id="5366680967ce29b04fb76e3e149a5470eb6ac85c" translate="yes" xml:space="preserve">
          <source>Validation Messages</source>
          <target state="translated">유효성 검사 메시지</target>
        </trans-unit>
        <trans-unit id="ce98834f2a88e04569c9daef3bce486b573f341b" translate="yes" xml:space="preserve">
          <source>Validation chains can be initialized in a direct manner by just adding validators to the &lt;a href=&quot;../api/phalcon_validation&quot;&gt;&lt;em&gt;Phalcon\Validation&lt;/em&gt;&lt;/a&gt; object. You can put your validations in a separate file for better re-use code and organization:</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_validation&quot;&gt;&lt;em&gt;Phalcon \ Validation&lt;/em&gt;&lt;/a&gt; 개체에 &lt;em&gt;유효성&lt;/em&gt; 검사기를 추가하여 유효성 검사 체인을 직접 방식으로 초기화 할 수 있습니다 . 더 나은 재사용 코드 및 구성을 위해 유효성 검사를 별도의 파일에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd3cabda743ab6483370dceda59fb215daccbbe9" translate="yes" xml:space="preserve">
          <source>Validation::add</source>
          <target state="translated">Validation::add</target>
        </trans-unit>
        <trans-unit id="6c9b30a09c38d59d9bf0bf1bc804e012aac46126" translate="yes" xml:space="preserve">
          <source>Validation::bind</source>
          <target state="translated">Validation::bind</target>
        </trans-unit>
        <trans-unit id="9c063eb19cc440d0c9caa2de461fcd34e7cd3684" translate="yes" xml:space="preserve">
          <source>Validation::rule</source>
          <target state="translated">Validation::rule</target>
        </trans-unit>
        <trans-unit id="3e84ed0cd5c796ba2eb4714c69cc8ec35372caf0" translate="yes" xml:space="preserve">
          <source>Validation::rules</source>
          <target state="translated">Validation::rules</target>
        </trans-unit>
        <trans-unit id="159641a1957efa3a36a65b6c5b7c0b7488185b43" translate="yes" xml:space="preserve">
          <source>ValidationInterface</source>
          <target state="translated">ValidationInterface</target>
        </trans-unit>
        <trans-unit id="dd59033aa12ada554a1c25f8851bc3d6e3a2d956" translate="yes" xml:space="preserve">
          <source>ValidationInterface::add</source>
          <target state="translated">ValidationInterface::add</target>
        </trans-unit>
        <trans-unit id="f1f23d405e2387721e5f18e46aa204eb202c56f5" translate="yes" xml:space="preserve">
          <source>ValidationInterface::bind</source>
          <target state="translated">ValidationInterface::bind</target>
        </trans-unit>
        <trans-unit id="eee63c67f859d993f0b4ee2656290d3d2500f2de" translate="yes" xml:space="preserve">
          <source>ValidationInterface::rule</source>
          <target state="translated">ValidationInterface::rule</target>
        </trans-unit>
        <trans-unit id="fba406979e79121cd8379fa33a77da57f9b29c70" translate="yes" xml:space="preserve">
          <source>ValidationInterface::rules</source>
          <target state="translated">ValidationInterface::rules</target>
        </trans-unit>
        <trans-unit id="fde59d48335d49f417fc33cd95a5a3142c134b76" translate="yes" xml:space="preserve">
          <source>Validator for constructor</source>
          <target state="translated">생성자에 대한 유효성 검사기</target>
        </trans-unit>
        <trans-unit id="762f13c2259b5fbab6d8f1bdbab081fc48bc558f" translate="yes" xml:space="preserve">
          <source>Validators</source>
          <target state="translated">Validators</target>
        </trans-unit>
        <trans-unit id="55c30890de2d7c85ab7e07ceb6f8a58a307aee46" translate="yes" xml:space="preserve">
          <source>Validators are executed in the same order as they were registered.</source>
          <target state="translated">유효성 검사기는 등록 된 순서와 동일한 순서로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="8b7671b4544a1d24b546c8a61c280ac36052cdff" translate="yes" xml:space="preserve">
          <source>Values assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:</source>
          <target state="translated">직접 또는 속성 배열을 통해 할당 된 값은 관련 속성 데이터 유형에 따라 이스케이프 / 위생됩니다. 따라서 가능한 SQL 주입에 대해 걱정하지 않고 안전하지 않은 배열을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="cf664dcb3f96e917eac3ac7c908c6636e242c5e9" translate="yes" xml:space="preserve">
          <source>Variables can be formatted or modified using filters. The pipe operator &lt;code&gt;|&lt;/code&gt; is used to apply filters to variables:</source>
          <target state="translated">변수는 필터를 사용하여 형식을 지정하거나 수정할 수 있습니다. 파이프 운영자 &lt;code&gt;|&lt;/code&gt; 변수에 필터를 적용하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a1a41d011bab75f71a15cbcbb3d94b28d344505e" translate="yes" xml:space="preserve">
          <source>Variables may be changed in a template using the instruction &amp;ldquo;set&amp;rdquo;:</source>
          <target state="translated">&quot;set&quot;명령을 사용하여 템플릿에서 변수를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="04ffb3231e59562188fc8f108c230ac222d9437a" translate="yes" xml:space="preserve">
          <source>Version::get</source>
          <target state="translated">Version::get</target>
        </trans-unit>
        <trans-unit id="8940b448766b16ed73688efb8b28b7702b7a9386" translate="yes" xml:space="preserve">
          <source>Version::getId</source>
          <target state="translated">Version::getId</target>
        </trans-unit>
        <trans-unit id="a77e6decaadbd6c9dba17ef5c3aebc35f9567bb7" translate="yes" xml:space="preserve">
          <source>View Events</source>
          <target state="translated">이벤트보기</target>
        </trans-unit>
        <trans-unit id="da3633a5062991c64406645f3085c2afb88d974c" translate="yes" xml:space="preserve">
          <source>View Helpers (Tags)</source>
          <target state="translated">헬퍼 (태그)보기</target>
        </trans-unit>
        <trans-unit id="df87007ce55fe78b1319363d1af1e25cfbe4e64f" translate="yes" xml:space="preserve">
          <source>View Integration</source>
          <target state="translated">통합보기</target>
        </trans-unit>
        <trans-unit id="92bb86680269cfc3c05ec1efe0677acb8488357d" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;edit&amp;rdquo;</source>
          <target state="translated">액션&amp;ldquo;편집&amp;rdquo;보기</target>
        </trans-unit>
        <trans-unit id="5d481a1e5f54e5121d29b7fa23c21e33f56b69a8" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;new&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;신규&amp;rdquo;행동에 대한 견해</target>
        </trans-unit>
        <trans-unit id="d0a26a1d1073393d8537e46bde795d21d124d33c" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;search&amp;rdquo;</source>
          <target state="translated">&quot;검색&quot;작업보기</target>
        </trans-unit>
        <trans-unit id="80332c88172f9213f51a820b8882d3d3adbdd3c6" translate="yes" xml:space="preserve">
          <source>Viewing the form in your browser will show something like this:</source>
          <target state="translated">브라우저에서 양식을 보면 다음과 같이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="translated">Views</target>
        </trans-unit>
        <trans-unit id="d6f947482b9450eb74d3204d5cc2058bdc206164" translate="yes" xml:space="preserve">
          <source>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.</source>
          <target state="translated">뷰는 응용 프로그램의 사용자 인터페이스를 나타냅니다. 뷰는 종종 데이터 표시와 관련된 작업을 수행하는 PHP 코드가 포함 된 HTML 파일입니다. 뷰는 웹 브라우저 또는 응용 프로그램에서 요청하는 데 사용되는 기타 도구에 데이터를 제공하는 작업을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="863c19a1bce484a4a2cbf9c819cfda6fee47b454" translate="yes" xml:space="preserve">
          <source>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. &lt;a href=&quot;views&quot;&gt;&lt;em&gt;Learn more&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">뷰는 응용 프로그램의 사용자 인터페이스를 나타냅니다. 뷰는 종종 데이터 표시와 관련된 작업을 수행하는 PHP 코드가 포함 된 HTML 파일입니다. 뷰는 웹 브라우저 또는 응용 프로그램에서 요청하는 데 사용되는 기타 도구에 데이터를 제공하는 작업을 처리합니다. &lt;a href=&quot;views&quot;&gt;&lt;em&gt;더 알아보기&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8d3bdc9e0aa545f3d7ed337c515034b08b1f93e9" translate="yes" xml:space="preserve">
          <source>Virtual Foreign Keys</source>
          <target state="translated">가상 외래 키</target>
        </trans-unit>
        <trans-unit id="80e002ac7b12d3f2cdf65aa829a437c692675c0a" translate="yes" xml:space="preserve">
          <source>Virtual Hosts</source>
          <target state="translated">가상 호스트</target>
        </trans-unit>
        <trans-unit id="47c87dcdeab336547b1440686574aa3e94242f2f" translate="yes" xml:space="preserve">
          <source>Volt Syntax:</source>
          <target state="translated">볼트 구문 :</target>
        </trans-unit>
        <trans-unit id="d44c73bc03848019950b28084d702fd40073a3de" translate="yes" xml:space="preserve">
          <source>Volt extensions must be in registered in the compiler making them available in compile time:</source>
          <target state="translated">볼트 확장은 컴파일 타임에 사용할 수 있도록 컴파일러에 등록되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="718b4897f7ab62cfcc4c95d9ec69a8961addcade" translate="yes" xml:space="preserve">
          <source>Volt function</source>
          <target state="translated">볼트 기능</target>
        </trans-unit>
        <trans-unit id="171f261607f9e9ed2076709b44a8a1c1314dfbee" translate="yes" xml:space="preserve">
          <source>Volt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.</source>
          <target state="translated">Volt는 PHP를 위해 C로 작성된 초고속 디자이너 친화적 인 템플릿 언어입니다. 뷰를 쉽게 작성할 수있는 헬퍼 세트를 제공합니다. 볼트는 응용 프로그램에서 독립형 구성 요소로 사용할 수있는 것처럼 Phalcon의 다른 구성 요소와 고도로 통합됩니다.</target>
        </trans-unit>
        <trans-unit id="7fbe6d43364c9af50b25f30e7cdab05c17cf4306" translate="yes" xml:space="preserve">
          <source>Volt is highly integrated with &lt;a href=&quot;tags&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;, so it&amp;rsquo;s easy to use the helpers provided by that component in a Volt template:</source>
          <target state="translated">Volt는 &lt;a href=&quot;tags&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt; 와 고도로 통합되어 있으므로 Volt 템플릿에서 해당 구성 요소가 제공하는 도우미를 쉽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f1573239882775081ffcf6a2a75112153b9c1fb" translate="yes" xml:space="preserve">
          <source>Volt is inspired by &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja&lt;/a&gt;, originally created by &lt;a href=&quot;https://github.com/mitsuhiko&quot;&gt;Armin Ronacher&lt;/a&gt;. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt&amp;rsquo;s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.</source>
          <target state="translated">볼트는 &lt;a href=&quot;https://github.com/mitsuhiko&quot;&gt;Armin Ronacher가&lt;/a&gt; 처음 제작 한 &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja&lt;/a&gt; 에서 영감을 받았습니다 . 따라서 많은 개발자들이 비슷한 템플릿 엔진과 동일한 구문을 사용하여 익숙한 영역에있게됩니다. 볼트의 구문과 기능은 더 많은 요소와 물론 Phalcon을 사용하는 동안 개발자에게 익숙한 성능으로 향상되었습니다.</target>
        </trans-unit>
        <trans-unit id="c09c8ea2c5624bedf366e6757e65b13e9d3933a2" translate="yes" xml:space="preserve">
          <source>Volt provides a basic set of expression support, including literals and common operators.</source>
          <target state="translated">Volt는 리터럴과 일반 연산자를 포함하여 기본적인 식 지원 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fa8efd625bffd44725937e19994cc3fd3db8aa11" translate="yes" xml:space="preserve">
          <source>Volt provides a set of basic but powerful control structures for use in templates:</source>
          <target state="translated">Volt는 템플릿에 사용하기위한 기본이지만 강력한 제어 구조 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d2d6b19d64ebb1ed52ab54681fe12b5d0345c985" translate="yes" xml:space="preserve">
          <source>Volt replaces the directory separators / and \ by this separator in order to create a single file in the compiled directory</source>
          <target state="translated">Volt는 디렉토리 구분 기호 /와 \를이 구분 기호로 대체하여 컴파일 된 디렉토리에 단일 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="99d6de0808fa5b25bcd868554b81132c038cf55c" translate="yes" xml:space="preserve">
          <source>Volt syntax for above example:</source>
          <target state="translated">위 예제의 볼트 구문 :</target>
        </trans-unit>
        <trans-unit id="b442d8d2ab0e3968889e9050bcd7b9f4d113f740" translate="yes" xml:space="preserve">
          <source>Volt syntax:</source>
          <target state="translated">볼트 구문 :</target>
        </trans-unit>
        <trans-unit id="7c62a74f4f15525b20a0882d892436c503cafb70" translate="yes" xml:space="preserve">
          <source>Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:</source>
          <target state="translated">볼트보기는 순수 PHP 코드로 컴파일되므로 기본적으로 PHP 코드를 수동으로 작성하는 노력을 절약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="abea67996538f26cdbb8b3c042969e4610100054" translate="yes" xml:space="preserve">
          <source>Volt: Template Engine</source>
          <target state="translated">볼트 : 템플릿 엔진</target>
        </trans-unit>
        <trans-unit id="eed413c23de930642a8830a5163813faffd163f7" translate="yes" xml:space="preserve">
          <source>WAMP has both 32 and 64 bit versions. From the download section, you can choose the Phalcon for Windows accordingly to your desired architecture.</source>
          <target state="translated">WAMP에는 32 비트와 64 비트 버전이 있습니다. 다운로드 섹션에서 원하는 아키텍처에 따라 Windows 용 Phalcon을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd3edc641024a335a508fdacefb5f51ded5905cc" translate="yes" xml:space="preserve">
          <source>WARNING</source>
          <target state="translated">WARNING</target>
        </trans-unit>
        <trans-unit id="2ab399961fd26c807a88e24b93a90dbd5e9c4828" translate="yes" xml:space="preserve">
          <source>Warning! If $whereCondition is string it not escaped.</source>
          <target state="translated">경고! $ whereCondition이 문자열이면 이스케이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a6a4c8779b4638d9db523ac724e341adbb438987" translate="yes" xml:space="preserve">
          <source>We are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resultset of type &lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Simple&lt;/em&gt;&lt;/a&gt;. However, each element is a standard object that only contain the two columns that were requested.</source>
          <target state="translated">테이블의 일부 필드 만 요청하므로 전체 오브젝트로 간주 할 수 없으므로 리턴 된 오브젝트는 여전히 &lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset \ Simple&lt;/em&gt;&lt;/a&gt; 유형의 결과 세트입니다 . 그러나 각 요소는 요청 된 두 개의 열만 포함하는 표준 개체입니다.</target>
        </trans-unit>
        <trans-unit id="6dc5e527ad908d431aff76e1e3057d93353909f5" translate="yes" xml:space="preserve">
          <source>We can easily replace a component with one created by ourselves or a third party.</source>
          <target state="translated">우리는 자신이나 제 3자가 만든 구성 요소로 쉽게 구성 요소를 교체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8487fa49fd46d5d4890fbd5cf7f033823e6fcc8e" translate="yes" xml:space="preserve">
          <source>We can get global instances of components in a structured and unified way.</source>
          <target state="translated">우리는 구조적이고 통합 된 방식으로 컴포넌트의 글로벌 인스턴스를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b35a97299e7e593f88ee7e9eed86ceb8f1055da0" translate="yes" xml:space="preserve">
          <source>We can then run the following command:</source>
          <target state="translated">그런 다음 다음 명령을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64a4453fce2d2e5a038b3d755131f48af305ef87" translate="yes" xml:space="preserve">
          <source>We designed this component based on the &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;XSS (Cross Site Scripting) Prevention Cheat Sheet&lt;/a&gt; created by the &lt;a href=&quot;https://www.owasp.org&quot;&gt;OWASP&lt;/a&gt;.</source>
          <target state="translated">이 구성 요소 는 &lt;a href=&quot;https://www.owasp.org&quot;&gt;OWASP에서&lt;/a&gt; 만든 &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;XSS (Cross Site Scripting) 방지 치트 시트를&lt;/a&gt; 기반으로 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="4ca3d01eb07dbc10b588c408884a252d0fabe687" translate="yes" xml:space="preserve">
          <source>We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components.</source>
          <target state="translated">우리는 객체 초기화를 완벽하게 제어 할 수있어 컴포넌트에 전달하기 전에 필요에 따라 이러한 객체를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60032c772215d295fdf6747b75f8a69b36eb8141" translate="yes" xml:space="preserve">
          <source>We have seen how Phalcon lets you create forms and bind data from a database in a structured way. In next chapter, we will see how to add custom HTML elements like a menu.</source>
          <target state="translated">Phalcon을 사용하여 데이터베이스에서 양식을 작성하고 데이터를 구조화 된 방식으로 바인딩하는 방법을 살펴 보았습니다. 다음 장에서는 메뉴와 같은 사용자 정의 HTML 요소를 추가하는 방법을 살펴 봅니다.</target>
        </trans-unit>
        <trans-unit id="fdc8023ffd1ed509710069e501840ef11718420a" translate="yes" xml:space="preserve">
          <source>We have three properties to work with here: &lt;code&gt;$id&lt;/code&gt;, &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;$price&lt;/code&gt;. So, let&amp;rsquo;s say you want to retrieve the first record in the table with the name &amp;lsquo;Terminator&amp;rsquo;. This could be written like:</source>
          <target state="translated">여기에는 &lt;code&gt;$id&lt;/code&gt; , &lt;code&gt;$name&lt;/code&gt; 및 &lt;code&gt;$price&lt;/code&gt; 세 가지 속성이 있습니다 . 테이블에서 이름이 'Terminator'인 첫 번째 레코드를 검색하려고한다고 가정하겠습니다. 이것은 다음과 같이 쓸 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="ba53ea8a96bc92a21ee78e4d19c66857d5d2fd21" translate="yes" xml:space="preserve">
          <source>We have to cast values manually because parse_ini_file() has a poor implementation.</source>
          <target state="translated">parse_ini_file ()의 구현이 좋지 않기 때문에 수동으로 값을 캐스트해야합니다.</target>
        </trans-unit>
        <trans-unit id="101f02e76e3961165c981bdd2dee708e7ce0e9f2" translate="yes" xml:space="preserve">
          <source>We highly recommend use at least XDebug 2.2.3 for a better compatibility with Phalcon</source>
          <target state="translated">Phalcon과의 호환성을 높이려면 XDebug 2.2.3 이상을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e5ab3ec73b979fb665134e5eb25bfa72a9866b15" translate="yes" xml:space="preserve">
          <source>We now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called &lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt; allows us to intercept the events produced by a component, routing the events to listeners.</source>
          <target state="translated">이제 애플리케이션에 사용 된 디스패처를 완전히 제어 할 수 있습니다. 프레임 워크의 많은 구성 요소는 내부 작동 흐름을 수정할 수있는 이벤트를 트리거합니다. Dependency Injector 구성 요소가 구성 요소의 접착제 역할을하는 경우 &lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt; 라는 새 구성 요소 를 통해 구성 요소에서 생성 된 이벤트를 가로 채서 이벤트를 리스너로 라우팅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b478404bc66a4a86803031b387b99ce4dc40508c" translate="yes" xml:space="preserve">
          <source>We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.</source>
          <target state="translated">비즈니스 로직 구현이 공개적으로 노출되지 않도록 유효성 검증 방법을 보호 된 것으로 선언하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4ae108358e5e7ca2b27a24c918f0fe4f40f9b800" translate="yes" xml:space="preserve">
          <source>We saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:</source>
          <target state="translated">기본 작업 요소로 해시 된 비밀번호를 저장했습니다. 작업 요소가 높을수록 암호화 속도가 느려 비밀번호의 취약성이 줄어 듭니다. 다음과 같이 비밀번호가 올바른지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00f6e189471a0234ca8d48b9c3b67aa322762e6e" translate="yes" xml:space="preserve">
          <source>We then instantiate the Users class, which corresponds to a User record. The class public properties map to the fields of the record in the users table. Setting the relevant values in the new record and calling &lt;code&gt;save()&lt;/code&gt; will store the data in the database for that record. The &lt;code&gt;save()&lt;/code&gt; method returns a boolean value which indicates whether the storing of the data was successful or not.</source>
          <target state="translated">그런 다음 사용자 레코드에 해당하는 Users 클래스를 인스턴스화합니다. 클래스 공용 속성은 users 테이블의 레코드 필드에 매핑됩니다. 새 레코드에서 관련 값을 설정하고 &lt;code&gt;save()&lt;/code&gt; 를 호출 하면 해당 레코드의 데이터베이스에 데이터가 저장됩니다. &lt;code&gt;save()&lt;/code&gt; 메소드는 데이터의 저장이 성공적 이었는지 여부를 나타내는 부울 값을 반환한다.</target>
        </trans-unit>
        <trans-unit id="213afb66383780cdfcaced5e887cbfa83be867f9" translate="yes" xml:space="preserve">
          <source>We will discuss this file in depth later.</source>
          <target state="translated">이 파일에 대해서는 나중에 자세히 설명하겠습니다.</target>
        </trans-unit>
        <trans-unit id="a12d67b5faebe21420c30ef4dc2ffc828ae1c90e" translate="yes" xml:space="preserve">
          <source>Web Interface to Tools</source>
          <target state="translated">도구에 대한 웹 인터페이스</target>
        </trans-unit>
        <trans-unit id="1394e7b6f6a882f83b939bd25fe6045be3137ede" translate="yes" xml:space="preserve">
          <source>Websites and web applications are vulnerable to &lt;a href=&quot;https://www.owasp.org/index.php/XSS&quot;&gt;XSS&lt;/a&gt; attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate. &lt;a href=&quot;../api/phalcon_escaper&quot;&gt;&lt;em&gt;Phalcon\Escaper&lt;/em&gt;&lt;/a&gt; provides contextual escaping and is written in Zephir, providing the minimal overhead when escaping different kinds of texts.</source>
          <target state="translated">웹 사이트와 웹 응용 프로그램은 &lt;a href=&quot;https://www.owasp.org/index.php/XSS&quot;&gt;XSS&lt;/a&gt; 공격에 취약하며 PHP는 탈출 기능을 제공하지만 일부 상황에서는 충분하지 않습니다. &lt;a href=&quot;../api/phalcon_escaper&quot;&gt;&lt;em&gt;Phalcon \ Escaper&lt;/em&gt;&lt;/a&gt; 는 상황 별 이스케이프 기능을 제공하며 &lt;em&gt;Zephir&lt;/em&gt; 로 작성되어 다른 종류의 텍스트를 이스케이프 처리 할 때 최소한의 오버 헤드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5a879434c5b881453fe7cc36b00a5e77e2a4d03e" translate="yes" xml:space="preserve">
          <source>Welcome to Phalcon framework. Our mission is to give you an advanced tool for developing the faster web sites and applications with PHP.</source>
          <target state="translated">Phalcon 프레임 워크에 오신 것을 환영합니다. 우리의 임무는 PHP로 더 빠른 웹 사이트와 응용 프로그램을 개발할 수있는 고급 도구를 제공하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="48b2a0860f516f17b913a9ef7e464c196ffe7efc" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: registerAutoloaders() and registerServices(), they will be called by &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; according to the module to be executed.</source>
          <target state="translated">때 &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ MVC \ 응용 프로그램이&lt;/em&gt;&lt;/a&gt; 등록 된 모듈이 항상 모든 일치하는 경로가 유효한 모듈을 반환 할 필요가있다. 등록 된 각 모듈에는 모듈 자체를 설정하는 기능을 제공하는 관련 클래스가 있습니다. 각 모듈 클래스 정의는 registerAutoloaders () 및 registerServices ()의 두 가지 메소드를 구현해야 하며 실행할 모듈에 따라 &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Application&lt;/em&gt;&lt;/a&gt; 에 의해 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="ed7590ad45bfe779b48c989fb4557ae448739d9b" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; requires a service to cache resultsets, it will request it to the Dependency Injector Container with the convention name &amp;ldquo;modelsCache&amp;rdquo;.</source>
          <target state="translated">때 &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ MVC \ 모델&lt;/em&gt;&lt;/a&gt; 캐시 결과 집합에 서비스가 필요, 그것은 규칙 이름 &quot;modelsCache&quot;로 종속성 인젝터 컨테이너에 요청합니다.</target>
        </trans-unit>
        <trans-unit id="66da09db49599d47b2fdd910d705bdfe6e56fc56" translate="yes" xml:space="preserve">
          <source>When a &amp;ldquo;beforeException&amp;rdquo; is triggered then other plugin is notified:</source>
          <target state="translated">&quot;beforeException&quot;이 트리거되면 다른 플러그인에 통지됩니다.</target>
        </trans-unit>
        <trans-unit id="81450a68f459508d0308b3b4bda5d83d41491d30" translate="yes" xml:space="preserve">
          <source>When a cached resultset needs to be invalidated, you can simply delete it from the cache using the previously specified key.</source>
          <target state="translated">캐시 된 결과 집합을 무효화해야하는 경우 이전에 지정된 키를 사용하여 캐시에서 간단히 결과 집합을 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93ff54f94640ed8d5a8514b8abd3b2ea4030551c" translate="yes" xml:space="preserve">
          <source>When a defined route matches the requested URI then the application executes the corresponding handler.</source>
          <target state="translated">정의 된 경로가 요청 된 URI와 일치하면 애플리케이션은 해당 핸들러를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="1b7fab5e643427d626439833c19237ade0fe0a86" translate="yes" xml:space="preserve">
          <source>When a migration is generated a set of classes are created to describe how your database is structured at that particular moment. These classes can be used to synchronize the schema structure on remote databases setting your database ready to work with the new changes that your application implements. Migrations describe these transformations using plain PHP.</source>
          <target state="translated">마이그레이션이 생성되면 특정 순간에 데이터베이스가 구성되는 방식을 설명하는 클래스 세트가 작성됩니다. 이 클래스를 사용하면 원격 데이터베이스에서 스키마 구조를 동기화하여 데이터베이스가 응용 프로그램이 구현하는 새로운 변경 사항을 처리 할 수 ​​있도록 설정합니다. 마이그레이션은 일반 PHP를 사용하여 이러한 변환을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7a117e8f0284043f8f2ed5e4d374f96be60d6401" translate="yes" xml:space="preserve">
          <source>When a migration is generated, instructions are displayed on the console to describe the different steps of the migration and the execution time of those statements. At the end, a migration version is generated.</source>
          <target state="translated">마이그레이션이 생성되면 콘솔에 마이그레이션의 다른 단계와 해당 명령문의 실행 시간을 설명하는 지시 사항이 표시됩니다. 결국 마이그레이션 버전이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="79b9e95b09c0e01026c813f47087d535012422f4" translate="yes" xml:space="preserve">
          <source>When a process performs multiple database operations, it might be important that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data is committed to the database.</source>
          <target state="translated">프로세스가 여러 데이터베이스 작업을 수행 할 때 데이터 무결성을 유지하려면 각 단계를 성공적으로 완료해야합니다. 트랜잭션은 데이터가 데이터베이스에 커밋되기 전에 모든 데이터베이스 작업이 성공적으로 실행되도록하는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="83d8481043d76b2ee30a0021395065329e166852" translate="yes" xml:space="preserve">
          <source>When a project is generated using developer tools. A configuration file can be found in &lt;em&gt;app/config/config.ini&lt;/em&gt; To generate models or scaffold, you will need to change the settings used to connect to your database.</source>
          <target state="translated">개발자 도구를 사용하여 프로젝트를 생성 한 경우 구성 파일은 &lt;em&gt;app / config / config.ini에 있습니다.&lt;/em&gt; 모델 또는 스캐 폴드를 생성하려면 데이터베이스 연결에 사용 된 설정을 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="9abdb8793956c91fcef548daf7794e4b7abb4207" translate="yes" xml:space="preserve">
          <source>When a record is deleted the events related to the delete operation will be executed for each row:</source>
          <target state="translated">레코드가 삭제되면 삭제 작업과 관련된 이벤트가 각 행에 대해 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="53ac2eb71b16d6a3bcdf3374ba548256b038323a" translate="yes" xml:space="preserve">
          <source>When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt; in the target model according to the following table:</source>
          <target state="translated">관련 레코드가 조회 될 때 ORM은 내부적으로 적절한 조건을 빌드 하고 다음 표에 따라 대상 모델에서 &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; 를 사용하여 필요한 레코드를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="f9f91827fe3aea528053a947e385c41b4eaea2e1" translate="yes" xml:space="preserve">
          <source>When a route provides named parameters you can receive them in a controller, a view or any other component that extends &lt;a href=&quot;../api/phalcon_di_injectable&quot;&gt;&lt;em&gt;Phalcon\Di\Injectable&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">경로가 명명 된 매개 변수를 제공하면 컨트롤러, 뷰 또는 &lt;a href=&quot;../api/phalcon_di_injectable&quot;&gt;&lt;em&gt;Phalcon \ Di \ Injectable&lt;/em&gt;&lt;/a&gt; 을 확장하는 다른 구성 요소에서 매개 변수를받을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f3f639dd02c2fae8127af70190790d7e33b38a37" translate="yes" xml:space="preserve">
          <source>When a user tries to access a route that is not defined, the micro application will try to execute the &amp;ldquo;Not-Found&amp;rdquo; handler. An example of that behavior is below:</source>
          <target state="translated">사용자가 정의되지 않은 경로에 액세스하려고하면 마이크로 응용 프로그램은 &quot;Not-Found&quot;핸들러를 실행하려고 시도합니다. 그 동작의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e1302708d125a1d1494fdf0afece1a9b8d85b82b" translate="yes" xml:space="preserve">
          <source>When activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed:</source>
          <target state="translated">이 기능을 활성화하면 애플리케이션은 지속성에서 얻은 원래 값을 추적하기 위해 약간의 메모리를 더 소비합니다. 이 기능이 활성화 된 모델에서는 변경된 필드를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a66a8ba1457958d3970a66adcdd6ef1bf026312c" translate="yes" xml:space="preserve">
          <source>When an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the &lt;code&gt;save()&lt;/code&gt; call with &lt;code&gt;create()&lt;/code&gt; or &lt;code&gt;update()&lt;/code&gt;:</source>
          <target state="translated">응용 프로그램의 경쟁이 치열할 경우 레코드를 만들 것으로 예상 할 수 있지만 실제로 업데이트됩니다. &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; 를 사용하여 데이터베이스에 레코드를 유지하는 경우이 문제가 발생할 수 있습니다. 레코드가 생성 또는 업데이트되도록 &lt;code&gt;save()&lt;/code&gt; &lt;code&gt;create()&lt;/code&gt; 또는 &lt;code&gt;update()&lt;/code&gt; save () 호출을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1dce8aec9f5e9e2f5c14631c397228ef7b01d92e" translate="yes" xml:space="preserve">
          <source>When an event called &amp;ldquo;beforeExecuteRoute&amp;rdquo; is triggered the following plugin will be notified:</source>
          <target state="translated">&amp;ldquo;beforeExecuteRoute&amp;rdquo;라는 이벤트가 트리거되면 다음 플러그인이 통지됩니다.</target>
        </trans-unit>
        <trans-unit id="f70ccec20c61618e4e1059449b34ddbd092cd739" translate="yes" xml:space="preserve">
          <source>When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.</source>
          <target state="translated">삽입, 업데이트 또는 삭제가 실행될 때 모델은 위 표에 나열된 이벤트 이름을 가진 메소드가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="8a072b22e0402fdb6130f12448bff9fd168f10d0" translate="yes" xml:space="preserve">
          <source>When attaching event listeners to the events manager, you can use &amp;ldquo;component&amp;rdquo; to catch all events from that component (eg. &amp;ldquo;db&amp;rdquo; to catch all of the &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt; events) or &amp;ldquo;component:event&amp;rdquo; to target a specific event (eg. &amp;ldquo;db:afterQuery&amp;rdquo;).</source>
          <target state="translated">이벤트 리스너를 이벤트 관리자에 연결할 때&amp;ldquo;component&amp;rdquo;를 사용하여 해당 컴포넌트에서 모든 이벤트를 잡을 수 있습니다 (예 :&amp;ldquo;db&amp;rdquo;는 모든 &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt; 이벤트 를 잡기 위해 ) 또는&amp;ldquo;component : event&amp;rdquo;는 특정 이벤트를 대상으로 할 수 있습니다 ( 예 :&amp;ldquo;db : afterQuery&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="1892e9d28f351af1945cddeee3b22114cd4f49fe" translate="yes" xml:space="preserve">
          <source>When attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:</source>
          <target state="translated">리스너를 연결할 때 특정 우선 순위를 설정할 수 있습니다. 이 기능을 사용하면 호출 순서를 나타내는 리스너를 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d37edcdc619066b9f070f376210d8a9941305f88" translate="yes" xml:space="preserve">
          <source>When binding parameters, you can use this parameter to define additional casting to the bound parameters increasing even more the security</source>
          <target state="translated">매개 변수를 바인딩 할 때이 매개 변수를 사용하여 바인딩 된 매개 변수에 대한 추가 캐스팅을 정의하여 보안을 더욱 강화할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="f06239b7fc2b18c290b17b16d4892ed94c895d10" translate="yes" xml:space="preserve">
          <source>When browsing the recently generated controller, you will see a search form and a link to create a new Product:</source>
          <target state="translated">최근에 생성 된 컨트롤러를 탐색하면 검색 양식과 새 제품을 생성 할 수있는 링크가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a6e0a4658eedab23d0867226d7a45d482a0d8d30" translate="yes" xml:space="preserve">
          <source>When calling macros, parameters can be passed by name:</source>
          <target state="translated">매크로를 호출 할 때 이름으로 매개 변수를 전달할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
