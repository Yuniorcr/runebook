<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="codeceptjs">
    <body>
      <group id="codeceptjs">
        <trans-unit id="1ba6fe8243a3ebabcc11c253302fb999ae8bb067" translate="yes" xml:space="preserve">
          <source>Both CSS and XPath is supported. Usually CodeceptJS can guess locator's type:</source>
          <target state="translated">CSS와 XPath가 모두 지원됩니다. 일반적으로 CodeceptJS는 로케이터 유형을 추측 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31a4197bdf9071dbd060a85fd0bfb1e944458f1e" translate="yes" xml:space="preserve">
          <source>Both tasks can be achieved with &lt;a href=&quot;https://codecept.io/commands/#run-rerun&quot;&gt;&lt;code&gt;run-rerun&lt;/code&gt; command&lt;/a&gt; which runs tests multiple times until all tests are passed.</source>
          <target state="translated">모든 테스트가 통과 될 때까지 테스트를 여러 번 실행하는 &lt;a href=&quot;https://codecept.io/commands/#run-rerun&quot;&gt; &lt;code&gt;run-rerun&lt;/code&gt; 명령으로&lt;/a&gt; 두 작업을 모두 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ec9bd14842100f29482b16d12ce3cd8a43e52464" translate="yes" xml:space="preserve">
          <source>Break a long test into few. Long test can be fragile and complicated to follow and update.</source>
          <target state="translated">긴 테스트를 몇 개로 나누십시오. 긴 테스트는 깨지기 쉽고 따르고 업데이트하기가 복잡 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="781b0bd77efa9402179a5881f3e6bb3216745f77" translate="yes" xml:space="preserve">
          <source>Browser request control</source>
          <target state="translated">브라우저 요청 제어</target>
        </trans-unit>
        <trans-unit id="40547f79e62f9e4e3940e617a998ab3ba2c9a621" translate="yes" xml:space="preserve">
          <source>BrowserStack</source>
          <target state="translated">BrowserStack</target>
        </trans-unit>
        <trans-unit id="61d51540addb4a58a4a3d5322ed5c48e7be2647d" translate="yes" xml:space="preserve">
          <source>BrowserStack Configuration</source>
          <target state="translated">BrowserStack 구성</target>
        </trans-unit>
        <trans-unit id="29d00701441e63cc87ebb5ae9716302f377ab2f2" translate="yes" xml:space="preserve">
          <source>BrowserStack can be configured via wdio service, which should be installed additionally:</source>
          <target state="translated">BrowserStack은 wdio 서비스를 통해 구성 할 수 있으며 추가로 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="a00979b39413f7ddf781bf1c171d336a465e32cd" translate="yes" xml:space="preserve">
          <source>Browsers can be executed in Docker containers. This is useful when testing on Continous Integration server. We recommend using &lt;a href=&quot;https://aerokube.com/selenoid/&quot;&gt;Selenoid (opens new window)&lt;/a&gt; to run browsers in container.</source>
          <target state="translated">브라우저는 Docker 컨테이너에서 실행할 수 있습니다. Continous Integration 서버에서 테스트 할 때 유용합니다. 컨테이너에서 브라우저를 실행하려면 &lt;a href=&quot;https://aerokube.com/selenoid/&quot;&gt;Selenoid (새 창에서 열림)&lt;/a&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="bbd80cf7e2ded5efed8f4ee9151ab57a8ab66392" translate="yes" xml:space="preserve">
          <source>Build</source>
          <target state="translated">Build</target>
        </trans-unit>
        <trans-unit id="4fe8c79f73f481726610b8b1cd1a89e84f415cf6" translate="yes" xml:space="preserve">
          <source>But how to get all those locators? We recommend to use &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspector (opens new window)&lt;/a&gt;.</source>
          <target state="translated">그러나 모든 로케이터를 얻는 방법은 무엇입니까? &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspector (새 창에서 열림)&lt;/a&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a8bde20284929412d273ec2544ab41f46323c139" translate="yes" xml:space="preserve">
          <source>But how to get all those locators? We recommend to use &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspector&lt;/a&gt;.</source>
          <target state="translated">그러나 모든 로케이터를 얻는 방법? &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspector&lt;/a&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="80cc533d523b8eba2d4fa34cb6a985f636827430" translate="yes" xml:space="preserve">
          <source>Buttons can be matched by their visible text:</source>
          <target state="translated">보이는 텍스트로 버튼을 일치시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03d4118cdb3deabd049f02f78018bf8ece3af9f4" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;I.have()&lt;/code&gt; returns a promise with a created data:</source>
          <target state="translated">기본적으로 &lt;code&gt;I.have()&lt;/code&gt; 는 생성 된 데이터로 promise를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3439abf55848e24aea09de20e04cd7516b720614" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;I.mutateData()&lt;/code&gt; returns a promise with created data as specified in operation query string:</source>
          <target state="translated">기본적으로 &lt;code&gt;I.mutateData()&lt;/code&gt; 는 작업 쿼리 문자열에 지정된대로 생성 된 데이터와 함께 promise를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e4c42951ea500640c22350a16cdc9bdbc903b6b0" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;codecept.json&lt;/code&gt; is used for configuration. You can override its values in runtime by using &lt;code&gt;--override&lt;/code&gt; or &lt;code&gt;-o&lt;/code&gt; option in command line, passing valid JSON as a value:</source>
          <target state="translated">기본적으로 &lt;code&gt;codecept.json&lt;/code&gt; 이 구성에 사용됩니다. 유효한 JSON을 값으로 전달하여 명령 행에서 &lt;code&gt;--override&lt;/code&gt; 또는 &lt;code&gt;-o&lt;/code&gt; 옵션 을 사용하여 런타임에서 해당 값을 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3191e25cd5268a49b6a364498e2ba0302ead5a4" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;id&lt;/code&gt; property of response is taken. This behavior can be changed by setting &lt;code&gt;fetchId&lt;/code&gt; function in a factory config.</source>
          <target state="translated">기본적 으로 응답의 &lt;code&gt;id&lt;/code&gt; 속성이 사용됩니다. 이 동작은 공장 구성에서 &lt;code&gt;fetchId&lt;/code&gt; 함수를 설정하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c6f24a119ae211a2205d80f31e42273c4b6b77aa" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS is already configured to run WebDriver tests locally with Chrome or Firefox. If you just need to start running tests - proceed to the next chapter.</source>
          <target state="translated">기본적으로 CodeceptJS는 Chrome 또는 Firefox를 사용하여 로컬에서 WebDriver 테스트를 실행하도록 이미 구성되어 있습니다. 테스트 실행을 시작해야하는 경우-다음 장으로 진행하십시오.</target>
        </trans-unit>
        <trans-unit id="959941d8265ba934057a96b01b59bba40dc12589" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS provides cli reporter with console output. Test names and failures will be printed to screen.</source>
          <target state="translated">기본적으로 CodeceptJS는 cli reporter에 콘솔 출력을 제공합니다. 테스트 이름과 실패가 화면에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="09f7c93962331d66ca14198349d82385538d09ef" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS runs tests in the same browser window but clears cookies and local storage after each test. This behavior can be changed with these options:</source>
          <target state="translated">기본적으로 CodeceptJS는 동일한 브라우저 창에서 테스트를 실행하지만 각 테스트 후에 쿠키와 로컬 저장소를 지 웁니다. 이 동작은 다음 옵션으로 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ea6cdf3e5aafb059f591deacb8235cdbb14dcac" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS saves a screenshot of a failed test. This can be configured in &lt;a href=&quot;https://codecept.io/plugins/#screenshotonfail&quot;&gt;screenshotOnFail Plugin&lt;/a&gt;</source>
          <target state="translated">기본적으로 CodeceptJS는 실패한 테스트의 스크린 샷을 저장합니다. 이것은 &lt;a href=&quot;https://codecept.io/plugins/#screenshotonfail&quot;&gt;screenshotOnFail 플러그인&lt;/a&gt; 에서 구성 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="dde71849fb69be3686ad9d173e5046e0a62fb2c2" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to find button or link with exact text on it</source>
          <target state="translated">기본적으로 CodeceptJS는 정확한 텍스트가있는 단추 또는 링크를 찾으려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="81bf908bede58e544434295d8c05b1e2cedf9ebf" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to find the button or link with the exact text on it</source>
          <target state="translated">기본적으로 CodeceptJS는 정확한 텍스트가있는 버튼 또는 링크를 찾으려고합니다.</target>
        </trans-unit>
        <trans-unit id="1bdc6203d6d5b8f1835870f2c7aef9784d044dd7" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to guess the locator type. In order to specify exact locator type you can pass a hash called &lt;strong&gt;strict locator&lt;/strong&gt;.</source>
          <target state="translated">기본적으로 CodeceptJS는 로케이터 유형을 추측하려고합니다. 정확한 로케이터 유형을 지정하기 위해 &lt;strong&gt;strict locator&lt;/strong&gt; 라는 해시를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e43c41a69419528edcb886ba063ee9da4da75a3d" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to guess the locator type. In order to specify the exact locator type you can pass an object called &lt;strong&gt;strict locator&lt;/strong&gt;.</source>
          <target state="translated">기본적으로 CodeceptJS는 로케이터 유형을 추측합니다. 정확한 로케이터 유형을 지정하려면 &lt;strong&gt;strict locator&lt;/strong&gt; 라는 객체를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="996d709757b86baaf6d446a55eb0e25598efbcc2" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS uses &lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/&quot;&gt;WebDriverIO&lt;/a&gt; helper and &lt;strong&gt;Selenium&lt;/strong&gt; to automate browser. Within web page you can locate elements, interact with them, and check that expected elements are present on a page. However, you can also choose &lt;a href=&quot;https://codecept.io/helpers/Nightmare&quot;&gt;Nightmare&lt;/a&gt; or &lt;a href=&quot;https://codecept.io/helpers/Protractor&quot;&gt;Protractor&lt;/a&gt; helpers, driven by corresponding libraries. No matter of helper and library you use for acceptance testing, CodeceptJS should execute same actions in similar manner.</source>
          <target state="translated">기본적으로 CodeceptJS는 &lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/&quot;&gt;WebDriverIO&lt;/a&gt; 도우미와 &lt;strong&gt;Selenium&lt;/strong&gt; 을 사용 하여 브라우저를 자동화합니다. 웹 페이지 내에서 요소를 찾고 상호 작용하며 페이지에 예상 요소가 있는지 확인할 수 있습니다. 그러나 해당 라이브러리로 구동되는 &lt;a href=&quot;https://codecept.io/helpers/Nightmare&quot;&gt;Nightmare&lt;/a&gt; 또는 &lt;a href=&quot;https://codecept.io/helpers/Protractor&quot;&gt;Protractor&lt;/a&gt; 도우미를 선택할 수도 있습니다 . 승인 테스트에 사용하는 헬퍼 및 라이브러리에 상관없이 CodeceptJS는 유사한 방식으로 동일한 조치를 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="629d6c64d2e3e55e36efdbc080c502bd30500c7d" translate="yes" xml:space="preserve">
          <source>By default files are saved to &lt;code&gt;output/downloads&lt;/code&gt;. This directory is cleaned on every &lt;code&gt;handleDownloads&lt;/code&gt; call, to ensure no old files are kept.</source>
          <target state="translated">기본적으로 파일은 &lt;code&gt;output/downloads&lt;/code&gt; 저장됩니다 . 이 디렉토리는 모든 &lt;code&gt;handleDownloads&lt;/code&gt; 호출에서 정리되어 이전 파일이 유지되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="e3a60c2a08b5ab2213620c516151f358c04dc89d" translate="yes" xml:space="preserve">
          <source>By default it is set to &lt;code&gt;domcontentloaded&lt;/code&gt; which waits for &lt;code&gt;DOMContentLoaded&lt;/code&gt; event being fired. However, for Single Page Applications it's more useful to set this value to &lt;code&gt;networkidle0&lt;/code&gt; which waits for all network connections to be finished.</source>
          <target state="translated">기본적으로 &lt;code&gt;DOMContentLoaded&lt;/code&gt; 이벤트가 발생 하기를 기다리는 &lt;code&gt;domcontentloaded&lt;/code&gt; 로 설정됩니다 . 그러나 단일 페이지 응용 프로그램의 경우이 값을 &lt;code&gt;networkidle0&lt;/code&gt; 으로 설정하면 모든 네트워크 연결이 완료 될 때까지 기다리는 것이 더 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="3723e14ee44018e95e415270822cfcca2f756b1f" translate="yes" xml:space="preserve">
          <source>By default the tests are assigned one by one to the avaible workers this may lead to multiple execution of &lt;code&gt;BeforeSuite()&lt;/code&gt;. Use the option &lt;code&gt;--suites&lt;/code&gt; to assigne the suites one by one to the workers.</source>
          <target state="translated">기본적으로 테스트는 사용 가능한 작업자에게 하나씩 할당되며 이는 &lt;code&gt;BeforeSuite()&lt;/code&gt; 의 여러 실행으로 이어질 수 있습니다 . &lt;code&gt;--suites&lt;/code&gt; 옵션을 사용하여 스위트를 작업자 에게 하나씩 할당합니다.</target>
        </trans-unit>
        <trans-unit id="b565f9f021920720542ff5cefc884fd22f176bac" translate="yes" xml:space="preserve">
          <source>By default there is no timeout for tests, however you can change this value for a specific suite:</source>
          <target state="translated">기본적으로 테스트 시간 제한은 없지만 특정 제품군에 대해이 값을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f72abf2c1b282644d3491542b00bd40d233dae7" translate="yes" xml:space="preserve">
          <source>By default to create a record ApiDataFactory will use endpoint and plural factory name:</source>
          <target state="translated">기본적으로 레코드를 작성하기 위해 ApiDataFactory는 엔드 포인트 및 복수 팩토리 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d8a5e70b4f50e663ce57de80a35acb9b4eefb0e3" translate="yes" xml:space="preserve">
          <source>By default, allure reports are saved to &lt;code&gt;output&lt;/code&gt; directory. Launch Allure server and see the report like on a screenshot above:</source>
          <target state="translated">기본적으로 매력 보고서는 &lt;code&gt;output&lt;/code&gt; 디렉토리에 저장됩니다 . Allure 서버를 시작하고 위의 스크린 샷과 같은 보고서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="68bbea4c02a679b19dc361100668a9792c2a083b" translate="yes" xml:space="preserve">
          <source>By default, they will wait for 1 second. This number can be changed in WebDriver configuration:</source>
          <target state="translated">기본적으로 1 초 동안 대기합니다. 이 번호는 WebDriver 구성에서 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46daea295982d8bda6b5e2b0c5b79547ad3b3d1f" translate="yes" xml:space="preserve">
          <source>By default, those parameters are set to connect to local Selenium Server but they should be changed if you want to run tests via &lt;a href=&quot;https://codecept.io/helpers/WebDriver#cloud-providers&quot;&gt;Cloud Providers&lt;/a&gt;. You may also need &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; parameters to authenticate on cloud service.</source>
          <target state="translated">기본적으로 이러한 매개 변수는 로컬 Selenium 서버에 연결하도록 설정되어 있지만 &lt;a href=&quot;https://codecept.io/helpers/WebDriver#cloud-providers&quot;&gt;클라우드 제공 업체&lt;/a&gt; 를 통해 테스트를 실행하려면 변경해야합니다 . 클라우드 서비스에서 인증 하려면 &lt;code&gt;user&lt;/code&gt; 및 &lt;code&gt;key&lt;/code&gt; 매개 변수 가 필요할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3412ed8a3dbcefcbb95cc560e331f773d01f5fa7" translate="yes" xml:space="preserve">
          <source>By defining a factory you set the rules of how data is generated. This data will be saved on server via GraphQL queries and deleted in the end of a test.</source>
          <target state="translated">공장을 정의하여 데이터 생성 방법에 대한 규칙을 설정합니다. 이 데이터는 GraphQL 쿼리를 통해 서버에 저장되고 테스트가 끝나면 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="3647de0dec81914980d6546302416031dccdaea4" translate="yes" xml:space="preserve">
          <source>By defining a factory you set the rules of how data is generated. This data will be saved on server via REST API and deleted in the end of a test.</source>
          <target state="translated">팩토리를 정의하여 데이터 생성 방법의 규칙을 설정합니다. 이 데이터는 REST API를 통해 서버에 저장되고 테스트가 끝나면 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="8ea70a5bc0bc0926e33c938b53d03c7938d10a79" translate="yes" xml:space="preserve">
          <source>By making tests to be a part of User Story, BDD allows non-technical personnel to write (or edit) Acceptance tests.</source>
          <target state="translated">BDD는 테스트를 사용자 스토리의 일부로 만들어 기술 전문가가 아닌 사람이 수락 테스트를 작성 (또는 편집) 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="7dc794315f4f02ac32c9400131a4be1d67b9c4e3" translate="yes" xml:space="preserve">
          <source>By now, you should have a test similar to the one shown in the beginning of this guide. We probably want to have multiple tests though, like testing the editing of todo items, checking todo items, etc.</source>
          <target state="translated">지금 쯤이면이 가이드의 시작 부분에 표시된 것과 유사한 테스트가있을 것입니다. 하지만 우리는 할 일 항목 편집 테스트, 할 일 항목 확인 등과 같은 여러 테스트를 원할 것입니다.</target>
        </trans-unit>
        <trans-unit id="57eee008e1da5606d280b6402899cfcf313463df" translate="yes" xml:space="preserve">
          <source>By passing value to &lt;code&gt;done()&lt;/code&gt; function you can return values. Additional arguments can be passed as well, while &lt;code&gt;done&lt;/code&gt; function is always last parameter in arguments list.</source>
          <target state="translated">&lt;code&gt;done()&lt;/code&gt; 함수에 값을 전달하면 값을 반환 할 수 있습니다. 추가 인수도 전달할 수 있지만 &lt;code&gt;done&lt;/code&gt; 함수는 항상 인수 목록의 마지막 매개 변수입니다.</target>
        </trans-unit>
        <trans-unit id="89b6763b377e546fa26c21e8cfe5da267ff05ab2" translate="yes" xml:space="preserve">
          <source>By writing a test in similar manner we will have a test shown in the beginning of this guide. Probably we would like not to finish with one test, but have more, for testing editing of todo items, checking todo items, and more.</source>
          <target state="translated">비슷한 방식으로 테스트를 작성함으로써이 안내서의 시작 부분에 테스트가 표시됩니다. 아마도 우리는 한 번의 테스트로 끝내지 않고 Todo 항목의 편집 테스트, Todo 항목 확인 등을 위해 더 많은 테스트를 수행하려고합니다.</target>
        </trans-unit>
        <trans-unit id="362a27e8b217c8af38ea1ff88c14f0280fac4303" translate="yes" xml:space="preserve">
          <source>By writing every feature in User Story format that is automatically executable as a test we ensure that: business, developers, QAs and managers are in the same boat.</source>
          <target state="translated">테스트로 자동 실행 가능한 User Story 형식의 모든 기능을 작성하여 비즈니스, 개발자, QA 및 관리자가 동일한 보트에 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="d3b4f917b7485e37712705b52ae124f856066a6c" translate="yes" xml:space="preserve">
          <source>CSS and XPath</source>
          <target state="translated">CSS와 XPath</target>
        </trans-unit>
        <trans-unit id="3cbbdaf031ce41f8a45fc0c541575095a58e4366" translate="yes" xml:space="preserve">
          <source>CSS and XPath locators</source>
          <target state="translated">CSS 및 XPath 로케이터</target>
        </trans-unit>
        <trans-unit id="4aa73658560730bbc290d3e82bc4f8324f2ff5f5" translate="yes" xml:space="preserve">
          <source>CSS locators are not supported in native mobile apps, you need to switch to web context to use them.</source>
          <target state="translated">CSS 로케이터는 기본 모바일 앱에서 지원되지 않으므로이를 사용하려면 웹 컨텍스트로 전환해야합니다.</target>
        </trans-unit>
        <trans-unit id="7ab23b11c3d3f492b734dd256d7e4e9169eebd21" translate="yes" xml:space="preserve">
          <source>Call Testcafe methods directly using the testcafe controller.</source>
          <target state="translated">testcafe 컨트롤러를 사용하여 Testcafe 메서드를 직접 호출합니다.</target>
        </trans-unit>
        <trans-unit id="e05deb34d9c7c2e43b6311ff70d6616ae1645a9a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;mockRequest&lt;/code&gt; or &lt;code&gt;mockServer&lt;/code&gt; will start mocking, if it was not enabled yet.</source>
          <target state="translated">&lt;code&gt;mockRequest&lt;/code&gt; 또는 &lt;code&gt;mockServer&lt;/code&gt; 를 호출 하면 아직 활성화되지 않은 경우 조롱이 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="b38ec30cc15cf041851b0a1ad491e35251cce770" translate="yes" xml:space="preserve">
          <source>Can be a single cookie object or an array of cookies:</source>
          <target state="translated">단일 쿠키 객체 또는 쿠키 배열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="565591bf3246df594eb5e76550b8744f2ceb9366" translate="yes" xml:space="preserve">
          <source>Can return values. Don't forget to use &lt;code&gt;await&lt;/code&gt; to get them.</source>
          <target state="translated">값을 반환 할 수 있습니다. 그들을 &lt;code&gt;await&lt;/code&gt; 데 사용하는 것을 잊지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="cb9f0b0f67eb7a28ad672cd1f3a892cba4e986d6" translate="yes" xml:space="preserve">
          <source>Changes headers to default if reset headers option is true</source>
          <target state="translated">헤더 재설정 옵션이 true 인 경우 헤더를 기본값으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="26b279cf0cb60833e061c2e97120694b987319c7" translate="yes" xml:space="preserve">
          <source>Check current activity on an Android device.</source>
          <target state="translated">Android 기기에서 현재 활동을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="aef13a6acb5e1943f77465505867e03dd0bf8b8e" translate="yes" xml:space="preserve">
          <source>Check if an app is installed.</source>
          <target state="translated">앱이 설치되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="1871b4b6a87e4071c8c3eb943fc2027e67194b16" translate="yes" xml:space="preserve">
          <source>Check if an app is not installed.</source>
          <target state="translated">앱이 설치되어 있지 않은지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ffdd5407b61e16d5462456ecdd14520e6872147c" translate="yes" xml:space="preserve">
          <source>Check if locator is type of &quot;Shadow&quot;</source>
          <target state="translated">로케이터가 &quot;그림자&quot;유형인지 확인</target>
        </trans-unit>
        <trans-unit id="8b4417ef4b1ebbec03ae6c70ef45963805381254" translate="yes" xml:space="preserve">
          <source>Check the device orientation</source>
          <target state="translated">장치 방향 확인</target>
        </trans-unit>
        <trans-unit id="baf8b5e0086df1dab3dfe8417571ece89f8b5ecd" translate="yes" xml:space="preserve">
          <source>Check the newly created &lt;code&gt;codecept.conf.js&lt;/code&gt; configuration file. You may want to set some additional Appium settings via &lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;desiredCapabilities (opens new window)&lt;/a&gt;</source>
          <target state="translated">새로 생성 된 &lt;code&gt;codecept.conf.js&lt;/code&gt; 구성 파일을 확인 합니다. desiredCapabilities를 통해 몇 가지 추가 Appium 설정을 &lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;지정할 수 있습니다 (새 창에서 열림).&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa1bb05dd09577430c6fe8dbc6f78dbad285fff3" translate="yes" xml:space="preserve">
          <source>Check the newly created &lt;code&gt;codecept.json&lt;/code&gt; configuration file. You may want to set some additional Appium settings via &lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;desiredCapabilities&lt;/a&gt;</source>
          <target state="translated">새로 작성된 &lt;code&gt;codecept.json&lt;/code&gt; 구성 파일을 확인하십시오 . 원하는 기능을 통해 추가 Appium 설정을 &lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;지정할 수 있습니다&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ffa8bd7737d0cb45adfb253a42251a2cdb13fc93" translate="yes" xml:space="preserve">
          <source>Check whether the device is locked.</source>
          <target state="translated">장치가 잠겨 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4ee7fc02e704798b82d5bb927b3b4b4f91ca56bc" translate="yes" xml:space="preserve">
          <source>Check whether the device is not locked.</source>
          <target state="translated">장치가 잠겨 있지 않은지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="02657f46916f1c23a2a9a566ef38e192ef316976" translate="yes" xml:space="preserve">
          <source>Checks for existence of an element. An element can be visible or not. Use second parameter to narrow down the search.</source>
          <target state="translated">요소의 존재를 확인합니다. 요소는 표시되거나 표시되지 않을 수 있습니다. 두 번째 매개 변수를 사용하여 검색 범위를 좁 힙니다.</target>
        </trans-unit>
        <trans-unit id="e5d8c6923ac05faadc4ddfd4840add67394c4c74" translate="yes" xml:space="preserve">
          <source>Checks for visibility of an element. Use second parameter to narrow down the search.</source>
          <target state="translated">요소의 가시성을 확인합니다. 두 번째 매개 변수를 사용하여 검색 범위를 좁 힙니다.</target>
        </trans-unit>
        <trans-unit id="b0105ebc9d99ab38af3796e69b1e5d44980d3735" translate="yes" xml:space="preserve">
          <source>Checks text not to be visible. Use second parameter to narrow down the search.</source>
          <target state="translated">텍스트가 보이지 않도록 확인합니다. 두 번째 매개 변수를 사용하여 검색 범위를 좁 힙니다.</target>
        </trans-unit>
        <trans-unit id="03c657d5905a9c3a2d6cb25f7c5fba9b334eb706" translate="yes" xml:space="preserve">
          <source>Checks text to be visible. Use second parameter to narrow down the search.</source>
          <target state="translated">표시 할 텍스트를 확인합니다. 두 번째 매개 변수를 사용하여 검색 범위를 좁 힙니다.</target>
        </trans-unit>
        <trans-unit id="e3f6bd924fbf0ef8257702b83e2e86e6cf1a3957" translate="yes" xml:space="preserve">
          <source>Checks that a given Element is present in the DOM Element is located by CSS or XPath.</source>
          <target state="translated">주어진 요소가 DOM 요소에 있는지 확인합니다. CSS 또는 XPath로 위치합니다.</target>
        </trans-unit>
        <trans-unit id="ee78339f227b7ffd609aa82a07a5391c7f17d8aa" translate="yes" xml:space="preserve">
          <source>Checks that a given Element is visible Element is located by CSS or XPath.</source>
          <target state="translated">주어진 요소가 보이는지 확인 요소는 CSS 또는 XPath에 의해 위치합니다.</target>
        </trans-unit>
        <trans-unit id="367df727ea1c92b338f8d18982e122c74ce5bb14" translate="yes" xml:space="preserve">
          <source>Checks that a page contains a visible text. Use context parameter to narrow down the search.</source>
          <target state="translated">페이지에 보이는 텍스트가 포함되어 있는지 확인합니다. 컨텍스트 매개 변수를 사용하여 검색 범위를 좁히십시오.</target>
        </trans-unit>
        <trans-unit id="fb9f8423a3fa6d3ba1785744783b62faa5607643" translate="yes" xml:space="preserve">
          <source>Checks that all elements with given locator have given CSS properties.</source>
          <target state="translated">지정된 로케이터가있는 모든 요소에 CSS 특성이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="47f4afefedcae7e3917482683d0efb30bd6f15a4" translate="yes" xml:space="preserve">
          <source>Checks that all elements with given locator have given attributes.</source>
          <target state="translated">지정된 로케이터가있는 모든 요소에 속성이 부여되었는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ba17373e9f7e28e72d567143742c683bc7933ce1" translate="yes" xml:space="preserve">
          <source>Checks that contents of file found by &lt;code&gt;seeFile&lt;/code&gt; doesn't equal to text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; 이 찾은 파일의 내용이 텍스트와 다른지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="addb79ca2d7c05f0845a4f7aaf21d8d44f9067c8" translate="yes" xml:space="preserve">
          <source>Checks that contents of file found by &lt;code&gt;seeFile&lt;/code&gt; equal to text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; 이 찾은 파일의 내용이 텍스트와 같은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="67690dcb573ffa775bd151021c288a18f40e03cb" translate="yes" xml:space="preserve">
          <source>Checks that contents of the file found by &lt;code&gt;seeFile&lt;/code&gt; equal to contents of the file at &lt;code&gt;pathToReferenceFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; 에서 &lt;code&gt;pathToReferenceFile&lt;/code&gt; 파일의 내용이 pathToReferenceFile 의 파일 내용과 같은지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="aaac892b2f5763ab83d224c141987df09fd9c5be" translate="yes" xml:space="preserve">
          <source>Checks that cookie with given name does not exist.</source>
          <target state="translated">지정된 이름의 쿠키가 존재하지 않는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="8a18e60b87ca0b877f301b333d6982f2cf508ce4" translate="yes" xml:space="preserve">
          <source>Checks that cookie with given name exists.</source>
          <target state="translated">지정된 이름의 쿠키가 존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f9a872845c5a5f6388309d4c6b200c3c86b247ae" translate="yes" xml:space="preserve">
          <source>Checks that current url contains a provided fragment.</source>
          <target state="translated">현재 URL에 제공된 조각이 포함되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="41e192262b9828fdcc1c3110c9acde35d83d4baf" translate="yes" xml:space="preserve">
          <source>Checks that current url does not contain a provided fragment.</source>
          <target state="translated">현재 URL에 제공된 조각이 포함되어 있지 않은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="afc78fa647ae49f0e82ee4263faa47148dcde438" translate="yes" xml:space="preserve">
          <source>Checks that current url is equal to provided one. If a relative url provided, a configured url will be prepended to it. So both examples will work:</source>
          <target state="translated">현재 URL이 제공된 URL과 같은지 확인합니다. 상대 URL이 제공되면 구성된 URL이 앞에 추가됩니다. 따라서 두 예제 모두 작동합니다.</target>
        </trans-unit>
        <trans-unit id="b019ebaa9d1bd628eba0b5b263a13d217c013777" translate="yes" xml:space="preserve">
          <source>Checks that current url is not equal to provided one. If a relative url provided, a configured url will be prepended to it.</source>
          <target state="translated">현재 URL이 제공된 URL과 다른지 확인합니다. 상대 URL이 제공되면 구성된 URL이 앞에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="0e6d98a106d08400022f00d92965dab5a0eb8492" translate="yes" xml:space="preserve">
          <source>Checks that element is not visible. Use second parameter to narrow down the search.</source>
          <target state="translated">요소가 보이지 않는지 확인합니다. 두 번째 매개 변수를 사용하여 검색 범위를 좁 힙니다.</target>
        </trans-unit>
        <trans-unit id="2c6543938fea8fe0835a036cf46e689fec9d0494" translate="yes" xml:space="preserve">
          <source>Checks that element not exists. Use second parameter to narrow down the search.</source>
          <target state="translated">요소가 존재하지 않는지 확인합니다. 두 번째 매개 변수를 사용하여 검색 범위를 좁 힙니다.</target>
        </trans-unit>
        <trans-unit id="8a6ba0aa6f0a3aa7f40999d9f3c6a796f9b0749b" translate="yes" xml:space="preserve">
          <source>Checks that file exists</source>
          <target state="translated">파일이 존재하는지 확인</target>
        </trans-unit>
        <trans-unit id="3379083ec528b0b99c538fc6abf7e986b5559c70" translate="yes" xml:space="preserve">
          <source>Checks that file found by &lt;code&gt;seeFile&lt;/code&gt; doesn't include text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; 에서 찾은 파일에 텍스트가 포함되어 있지 않은지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="9505de3387710dcfaa50a7158bcee3c57ac86560" translate="yes" xml:space="preserve">
          <source>Checks that file found by &lt;code&gt;seeFile&lt;/code&gt; includes a text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; 이 찾은 파일 에 텍스트가 포함되어 있는지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="ff9a031cd1ac31344d8a3d06d665e9de6cfce028" translate="yes" xml:space="preserve">
          <source>Checks that file with a name including given text exists in the current directory.</source>
          <target state="translated">주어진 텍스트가 포함 된 이름의 파일이 현재 디렉토리에 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="dbd2537af3062a19be0cddc69025f891eded4cb3" translate="yes" xml:space="preserve">
          <source>Checks that text is equal to provided one.</source>
          <target state="translated">텍스트가 제공된 텍스트와 같은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f5baee1748a326c0ff46ccbbdbdfccc6435933da" translate="yes" xml:space="preserve">
          <source>Checks that the active JavaScript popup, as created by &lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt;, contains the given string.</source>
          <target state="translated">&lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt; 의해 생성 된 활성 JavaScript 팝업 에 지정된 문자열이 포함되어 있는지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="6050ba10acd3c125e86e64b541c91af20b24d573" translate="yes" xml:space="preserve">
          <source>Checks that the active JavaScript popup, as created by &lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt;, contains the given string. Appium: support only web testing</source>
          <target state="translated">&lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt; 의해 생성 된 활성 JavaScript 팝업 에 지정된 문자열이 포함되어 있는지 확인 합니다. Appium : 웹 테스트 만 지원</target>
        </trans-unit>
        <trans-unit id="236fc5fbe09554333c1b6a340fb812f519666f38" translate="yes" xml:space="preserve">
          <source>Checks that the current page contains the given string in its raw source code</source>
          <target state="translated">현재 페이지의 원시 소스 코드에 지정된 문자열이 포함되어 있는지 확인</target>
        </trans-unit>
        <trans-unit id="1f30e7deaf8781d575fe2375033b005eba2016f2" translate="yes" xml:space="preserve">
          <source>Checks that the current page contains the given string in its raw source code.</source>
          <target state="translated">현재 페이지의 원시 소스 코드에 지정된 문자열이 포함되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ca4ab5e58ba9bd5787dd5793508304001f06d4bc" translate="yes" xml:space="preserve">
          <source>Checks that the current page does not contains the given string in its raw source code.</source>
          <target state="translated">현재 페이지의 원시 소스 코드에 지정된 문자열이 포함되어 있지 않은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b0c11ec1c2f0a12a173273b5bf784dd26774861c" translate="yes" xml:space="preserve">
          <source>Checks that the given input field or textarea equals to given value. For fuzzy locators, fields are matched by label text, the &quot;name&quot; attribute, CSS, and XPath.</source>
          <target state="translated">주어진 입력 필드 또는 텍스트 영역이 주어진 값과 같은지 확인합니다. 퍼지 로케이터의 경우 필드는 레이블 텍스트, &quot;name&quot;속성, CSS 및 XPath와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="641b5789f85464ea0efe78c51e8176109434c593" translate="yes" xml:space="preserve">
          <source>Checks that title contains text.</source>
          <target state="translated">제목에 텍스트가 포함되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ae854f65ab8d4db1f57a83446b13951910da7b2b" translate="yes" xml:space="preserve">
          <source>Checks that title does not contain text.</source>
          <target state="translated">제목에 텍스트가 포함되어 있지 않은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e0c4b15943fd9cba190dd18f8e5987d4588b2b57" translate="yes" xml:space="preserve">
          <source>Checks that title is equal to provided one.</source>
          <target state="translated">제목이 제공된 제목과 같은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f0ffec44f336ac009bfe7329dcf271da32d4504c" translate="yes" xml:space="preserve">
          <source>Checks that value of input field or textare doesn't equal to given value Opposite to &lt;code&gt;seeInField&lt;/code&gt;.</source>
          <target state="translated">입력 필드 또는 텍스트 값이 지정된 값과 같지 &lt;code&gt;seeInField&lt;/code&gt; 합니다. seeInField와 반대 입니다.</target>
        </trans-unit>
        <trans-unit id="5372558ded3e67de0203cafc9477c3b01b53a01e" translate="yes" xml:space="preserve">
          <source>Checks that value of input field or textarea doesn't equal to given value Opposite to &lt;code&gt;seeInField&lt;/code&gt;.</source>
          <target state="translated">입력 필드 또는 텍스트 영역의 값이 주어진 값과 같지 &lt;code&gt;seeInField&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="19afec7d342487be1f0edda62780670554c73f2e" translate="yes" xml:space="preserve">
          <source>Checks types - thanks to TypeScript support in CodeceptJS now allow to tests your tests. TypeScript can prevent some errors:</source>
          <target state="translated">유형 검사-CodeceptJS의 TypeScript 지원 덕분에 이제 테스트를 테스트 할 수 있습니다. TypeScript는 일부 오류를 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15dc18865567bcc98554a72a8036e1b64a8b85d5" translate="yes" xml:space="preserve">
          <source>Chinese</source>
          <target state="translated">Chinese</target>
        </trans-unit>
        <trans-unit id="251c2cf255a656dc79524134068285ab48c631c9" translate="yes" xml:space="preserve">
          <source>ChromeDriver or GeckoDriver - to allow browsers to run in automated mode.</source>
          <target state="translated">ChromeDriver 또는 GeckoDriver-브라우저가 자동 모드로 실행되도록합니다.</target>
        </trans-unit>
        <trans-unit id="8699c8353f5ed1976e8d300913ed2a3c7ccd512f" translate="yes" xml:space="preserve">
          <source>ChromeDriver without Selenium</source>
          <target state="translated">Selenium이없는 ChromeDriver</target>
        </trans-unit>
        <trans-unit id="32166e83eed3818d45d2cbecbe2e6cf85528e265" translate="yes" xml:space="preserve">
          <source>Chromium</source>
          <target state="translated">Chromium</target>
        </trans-unit>
        <trans-unit id="5f6f8beacd6a51b14010c54e1a4e4886e39f0f8f" translate="yes" xml:space="preserve">
          <source>Clears a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; or text &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element's value.</source>
          <target state="translated">&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 또는 text &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소의 값을 지 웁니다 .</target>
        </trans-unit>
        <trans-unit id="ec15d050bcc850b40bf08c1a5c2c424be0c24539" translate="yes" xml:space="preserve">
          <source>Clears a cookie by name, if none provided clears all cookies</source>
          <target state="translated">제공된 쿠키가 없으면 쿠키를 이름으로 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="931ad09669dd656612269c798322abb881893675" translate="yes" xml:space="preserve">
          <source>Clears a cookie by name, if none provided clears all cookies.</source>
          <target state="translated">제공된 쿠키가 없으면 이름으로 쿠키를 지 웁니다. 모든 쿠키가 지워집니다.</target>
        </trans-unit>
        <trans-unit id="eb47275ae1f7f8a1bb73f1522752306672ae8165" translate="yes" xml:space="preserve">
          <source>Clears a text field. A field can be located by text, accessibility id, id.</source>
          <target state="translated">텍스트 필드를 지 웁니다. 필드는 텍스트, 접근성 ID, ID로 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53a98298fb455348c338555baa18286b2da270c8" translate="yes" xml:space="preserve">
          <source>Cli</source>
          <target state="translated">Cli</target>
        </trans-unit>
        <trans-unit id="09703d1ff01a59ef498218efeacdae1639095d1f" translate="yes" xml:space="preserve">
          <source>Clicking</source>
          <target state="translated">Clicking</target>
        </trans-unit>
        <trans-unit id="743bd0112b2927204544db4f502b4fb7af9ee237" translate="yes" xml:space="preserve">
          <source>Clicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most routine waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.</source>
          <target state="translated">링크를 클릭하는 것이 웹 사이트를 테스트하는 데 가장 많은 시간이 걸리지 않습니다. 사이트가 링크로만 구성된 경우 테스트 자동화를 건너 뛸 수 있습니다. 가장 일상적인 시간 낭비는 양식 테스트에 사용됩니다. CodeceptJS는 여러 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="125562553f46edafd8fa1b6e00188a4ab192095c" translate="yes" xml:space="preserve">
          <source>Clicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.</source>
          <target state="translated">링크를 클릭하는 것은 웹 사이트를 테스트하는 동안 가장 많은 시간이 걸리는 것이 아닙니다. 사이트가 링크로만 구성된 경우 테스트 자동화를 건너 뛸 수 있습니다. 대부분의 시간 낭비는 양식 테스트에 사용됩니다. CodeceptJS는 여러 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="10dd4e269985c28faff5463b10c3a47be9158307" translate="yes" xml:space="preserve">
          <source>Clicks link and waits for navigation (deprecated)</source>
          <target state="translated">링크를 클릭하고 탐색 대기 (지원 중단됨)</target>
        </trans-unit>
        <trans-unit id="7b8169cd2becc0e2831863dba8dd038d6ec775f1" translate="yes" xml:space="preserve">
          <source>Clicks on an element. Element can be located by its text or id or accessibility id</source>
          <target state="translated">요소를 클릭합니다. 요소는 텍스트 또는 ID 또는 접근성 ID로 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2abe19c1a3fff37743b7702c1cb8bc78a3876c9c" translate="yes" xml:space="preserve">
          <source>Client Functions</source>
          <target state="translated">클라이언트 기능</target>
        </trans-unit>
        <trans-unit id="4be8c94b1faacd123ff388d02619354b500236f9" translate="yes" xml:space="preserve">
          <source>Close all tabs except for the current one.</source>
          <target state="translated">현재 탭을 제외한 모든 탭을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="5cf91e9e70d992f226814c8f1174291f86d0f3a8" translate="yes" xml:space="preserve">
          <source>Close all tabs except for the current one. Appium: support web test</source>
          <target state="translated">현재 탭을 제외한 모든 탭을 닫습니다. Appium : 웹 테스트 지원</target>
        </trans-unit>
        <trans-unit id="88b3b75ed2d4730635e1c54e3d28d8edf33cd632" translate="yes" xml:space="preserve">
          <source>Close current tab</source>
          <target state="translated">현재 탭 닫기</target>
        </trans-unit>
        <trans-unit id="ca5f014b1ee13b25a50db2810e436b9596cf9d13" translate="yes" xml:space="preserve">
          <source>Close current tab and switches to previous.</source>
          <target state="translated">현재 탭을 닫고 이전으로 전환하십시오.</target>
        </trans-unit>
        <trans-unit id="8952eb0e3e78146d7f425e47f8cbaa06e2670803" translate="yes" xml:space="preserve">
          <source>Close current tab.</source>
          <target state="translated">현재 탭을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="aae677e8ec920c4fa5723adc33be6129437e918b" translate="yes" xml:space="preserve">
          <source>Close the given application.</source>
          <target state="translated">주어진 응용 프로그램을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="36f7897b2bae0040ed3ab3f6fe07b501caee499f" translate="yes" xml:space="preserve">
          <source>Cloud Providers</source>
          <target state="translated">클라우드 제공 업체</target>
        </trans-unit>
        <trans-unit id="87677b93a43a3c1f901ed64766e8df53b9373218" translate="yes" xml:space="preserve">
          <source>Cloud Providers (WebDriverIO)</source>
          <target state="translated">클라우드 제공자 (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="41b8c5c402ac86bd9e69f6bfb6277bb2c717a926" translate="yes" xml:space="preserve">
          <source>CodeceptJS</source>
          <target state="translated">CodeceptJS</target>
        </trans-unit>
        <trans-unit id="341a6ddc807f840d8252dfba14eb9aa839e64c38" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to create custom locator strategies and use them in tests. This way you can define your own handling of elements using specially prepared attributes of elements.</source>
          <target state="translated">CodeceptJS를 사용하면 맞춤형 로케이터 전략을 생성하고이를 테스트에 사용할 수 있습니다. 이렇게하면 특별히 준비된 요소 속성을 사용하여 요소의 고유 한 처리를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61020fc16cde873112bd3b63af325f9cb0bf51c9" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to run several browser sessions inside a test. This can be useful for testing communication between users inside a chat or other systems. To open another browser use the &lt;code&gt;session()&lt;/code&gt; function as shown in the example:</source>
          <target state="translated">CodeceptJS는 테스트 내에서 여러 브라우저 세션을 실행할 수 있습니다. 이것은 채팅 또는 다른 시스템 내에서 사용자 간의 통신을 테스트하는 데 유용 할 수 있습니다. 다른 브라우저를 열려면 예제에 표시된대로 &lt;code&gt;session()&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4ea8f596f8f927969882bfcb168fceeec74351b2" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to run several browser sessions inside a test. This can be useful for testing communication between users inside a system, for instance in chats. To open another browser use &lt;code&gt;session()&lt;/code&gt; function as shown in example:</source>
          <target state="translated">CodeceptJS를 사용하면 테스트 내에서 여러 브라우저 세션을 실행할 수 있습니다. 이는 채팅과 같이 시스템 내부의 사용자 간 통신을 테스트하는 데 유용 할 수 있습니다. 다른 브라우저를 열려면 다음 과 같이 &lt;code&gt;session()&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="12fe4ac070a85c631931cfa5d905409ff1117f8b" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to test mobile and hybrid apps in a similar manner web applications are tested. Such tests are executed using &lt;a href=&quot;http://appium.io&quot;&gt;Appium (opens new window)&lt;/a&gt; on emulated or physical devices. Also, Appium allows to test web application on mobile devices.</source>
          <target state="translated">CodeceptJS를 사용하면 웹 애플리케이션을 테스트하는 것과 유사한 방식으로 모바일 및 하이브리드 앱을 테스트 할 수 있습니다. 이러한 테스트는 에뮬레이션 또는 물리적 장치에서 &lt;a href=&quot;http://appium.io&quot;&gt;Appium (새 창에서 열림)&lt;/a&gt; 을 사용하여 실행 됩니다. 또한 Appium은 모바일 장치에서 웹 애플리케이션을 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4066871e6a03c5401b58a891a44e0dc7022f7703" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to test mobile and hybrid apps in a similar manner web applications are tested. Such tests are executed using &lt;a href=&quot;http://appium.io&quot;&gt;Appium&lt;/a&gt; on emulated or physical devices. Also, Appium allows to test web application on mobile devices.</source>
          <target state="translated">CodeceptJS를 사용하면 웹 애플리케이션을 테스트하는 것과 유사한 방식으로 모바일 및 하이브리드 애플리케이션을 테스트 할 수 있습니다. 이러한 테스트는 에뮬레이션 또는 물리적 장치에서 &lt;a href=&quot;http://appium.io&quot;&gt;Appium&lt;/a&gt; 을 사용하여 실행 됩니다. 또한 Appium을 사용하면 모바일 장치에서 웹 응용 프로그램을 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f39f021aa9420a09a9817dbbd208c1dd4125f0dd" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to use several browser windows inside a test. Sometimes we are testing the functionality of websites that we cannot control, such as a closed-source managed package, and there are popups that either remain open for configuring data on the screen, or close as a result of clicking a window. We can use these functions in order to gain more control over which page is being tested with Codecept at any given time. For example:</source>
          <target state="translated">CodeceptJS는 테스트 내에서 여러 브라우저 창을 사용할 수 있습니다. 때때로 우리는 폐쇄 소스 관리 패키지와 같이 제어 할 수없는 웹 사이트의 기능을 테스트하고 있으며, 화면에서 데이터를 구성하기 위해 열려 있거나 창을 클릭하면 닫히는 팝업이 있습니다. 주어진 시간에 Codecept로 테스트되는 페이지를 더 잘 제어하기 위해 이러한 기능을 사용할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="54d542f67d8cff7f37673282e9a667e405b79b2d" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to write and debug tests on the fly while keeping your browser opened. By using interactive shell you can stop execution at any point and type in CodeceptJS commands.</source>
          <target state="translated">CodeceptJS를 사용하면 브라우저를 열어 둔 채 테스트를 즉시 작성하고 디버그 할 수 있습니다. 대화식 쉘을 사용하면 언제든지 CodeceptJS 명령을 입력하고 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ddc14a9eb74a334db9917f62c7c5a457929cb37" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to write and debug tests on the fly while keeping your browser opened. By using the interactive shell you can stop execution at any point and type in any CodeceptJS commands.</source>
          <target state="translated">CodeceptJS를 사용하면 브라우저를 열어 두면서 즉시 테스트를 작성하고 디버깅 할 수 있습니다. 대화 형 셸을 사용하면 언제든지 실행을 중지하고 CodeceptJS 명령을 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf8bbdc7954b211722483955c18f1acaf768a80a" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows you to define and connect own helpers. If some functionality of Nightmare helper is missing you can easily create &lt;code&gt;ExtendedNightmare&lt;/code&gt; helper by running:</source>
          <target state="translated">CodeceptJS를 사용하면 자체 도우미를 정의하고 연결할 수 있습니다. Nightmare 도우미의 일부 기능이 누락 된 경우 다음 을 실행 하여 &lt;code&gt;ExtendedNightmare&lt;/code&gt; 도우미를 쉽게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82e91aa3cf396b64d9a471f909a060c6e8c7b627" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows you to implement custom actions like &lt;code&gt;I.createTodo&lt;/code&gt; or use &lt;strong&gt;PageObjects&lt;/strong&gt;. Learn how to improve your tests in &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects (opens new window)&lt;/a&gt; guide.</source>
          <target state="translated">CodeceptJS는 같은 사용자 지정 작업 구현할 수 있습니다 &lt;code&gt;I.createTodo&lt;/code&gt; 또는 사용 &lt;strong&gt;PageObjects을&lt;/strong&gt; . &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects (새 창에서 열림)&lt;/a&gt; 가이드 에서 테스트를 개선하는 방법을 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="2ab776e3d946a89044159d997c55e2eac732209a" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows you to implement custom actions like &lt;code&gt;I.createTodo&lt;/code&gt; or use &lt;strong&gt;PageObjects&lt;/strong&gt;. Learn how to improve your tests in &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects&lt;/a&gt; guide.</source>
          <target state="translated">CodeceptJS는 같은 사용자 지정 작업 구현할 수 있습니다 &lt;code&gt;I.createTodo&lt;/code&gt; 또는 사용 &lt;strong&gt;PageObjects을&lt;/strong&gt; . &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects&lt;/a&gt; 안내서 에서 테스트 개선 방법에 대해 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="0e530325d2ca24ad9023efc173ac144ee6957a9d" translate="yes" xml:space="preserve">
          <source>CodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will need to update the &lt;code&gt;helpers.WebDriver.capabilities.proxy&lt;/code&gt; key.</source>
          <target state="translated">CodeceptJS는 프록시를 통해 Selenium 서버에 대한 테스트를 실행할 때 유연한 옵션을 제공합니다. &lt;code&gt;helpers.WebDriver.capabilities.proxy&lt;/code&gt; 키 를 업데이트해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a53d5d9fb9555e694f12a1494a3bf174893c837d" translate="yes" xml:space="preserve">
          <source>CodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will need to update the &lt;code&gt;helpers.WebDriverIO.desiredCapabilities.proxy&lt;/code&gt; key.</source>
          <target state="translated">CodeceptJS는 프록시를 통해 Selenium 서버에 테스트를 실행하려는 경우에도 유연한 옵션을 제공합니다. &lt;code&gt;helpers.WebDriverIO.desiredCapabilities.proxy&lt;/code&gt; 키 를 업데이트해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dc6492b895c9d819e08f45efe04dbb6e43b9fcdb" translate="yes" xml:space="preserve">
          <source>CodeceptJS bypasses execution commands to helpers. Depending on helper enabled your tests will be executed differently. If you need cross-browser support you should choose Selenium-based WebDriverIO or Protractor, if you are interested in speed - use Chrome-based Puppeteer, or Electron-based Nightmare. Those engines can run tests in window mode or headlessly and doesn't require additional tools to be installed.</source>
          <target state="translated">CodeceptJS는 도우미에게 실행 명령을 무시합니다. 헬퍼 활성화에 따라 테스트가 다르게 실행됩니다. 크로스 브라우저 지원이 필요한 경우 속도에 관심이있는 경우 Selenium 기반 WebDriverIO 또는 각도기를 선택해야합니다 (Chrome 기반 Puppeteer 또는 Electron 기반 Nightmare 사용). 이러한 엔진은 창 모드 또는 헤드리스 테스트를 실행할 수 있으며 추가 도구를 설치할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="9595ec80a294a7b026301a36a784a3d81ac64a30" translate="yes" xml:space="preserve">
          <source>CodeceptJS bypasses execution commands to helpers. Depending on the helper enabled, your tests will be executed differently. If you need cross-browser support you should choose Selenium-based WebDriver or TestCaf&amp;eacute;. If you are interested in speed - you should use Chrome-based Puppeteer.</source>
          <target state="translated">CodeceptJS는 헬퍼에게 실행 명령을 우회합니다. 활성화 된 도우미에 따라 테스트가 다르게 실행됩니다. 브라우저 간 지원이 필요한 경우 Selenium 기반 WebDriver 또는 TestCaf&amp;eacute;를 선택해야합니다. 속도에 관심이 있다면 Chrome 기반 Puppeteer를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b44256a80c94947552cc1b73fa9b14e0dd871c34" translate="yes" xml:space="preserve">
          <source>CodeceptJS can be configured to run tests in parallel.</source>
          <target state="translated">CodeceptJS는 테스트를 병렬로 실행하도록 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f685b7fdcf2b687113f790efb593647709c8bdc" translate="yes" xml:space="preserve">
          <source>CodeceptJS can be imported and used in custom runners. To initialize Codecept you need to create Config and Container objects.</source>
          <target state="translated">CodeceptJS를 가져 와서 사용자 정의 러너에서 사용할 수 있습니다. Codecept를 초기화하려면 구성 및 컨테이너 개체를 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="3efaa9136b7150d73882a9338556273adfda5bde" translate="yes" xml:space="preserve">
          <source>CodeceptJS can be installed via NPM globally:</source>
          <target state="translated">CodeceptJS는 전 세계적으로 NPM을 통해 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74c3858c45e4a109e3f409f064cdeec1073c1dea" translate="yes" xml:space="preserve">
          <source>CodeceptJS can guess an element's locator from context. For example, when clicking CodeceptJS will try to find a link or button by their text When typing into a field this field can be located by its name, placeholder.</source>
          <target state="translated">CodeceptJS는 컨텍스트에서 요소의 로케이터를 추측 할 수 있습니다. 예를 들어, CodeceptJS를 클릭하면 텍스트로 링크 또는 단추를 찾으려고합니다. 필드에 입력 할 때이 필드는 이름, 자리 표시 자에 의해 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="49f3cbd7600efbdaca57e1097365648a0b5471c6" translate="yes" xml:space="preserve">
          <source>CodeceptJS config can be accessed from &lt;code&gt;require('codeceptjs').config.get()&lt;/code&gt;:</source>
          <target state="translated">CodeceptJS 구성은 &lt;code&gt;require('codeceptjs').config.get()&lt;/code&gt; 에서 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4908de631f65d243fdd854b8e1a39730a16afba7" translate="yes" xml:space="preserve">
          <source>CodeceptJS configuration is set in &lt;code&gt;codecept.conf.js&lt;/code&gt; file.</source>
          <target state="translated">CodeceptJS 구성은 &lt;code&gt;codecept.conf.js&lt;/code&gt; 파일 에서 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="3cafb6bc97612a799b60451ea57339a41bce2048" translate="yes" xml:space="preserve">
          <source>CodeceptJS configuration is set in &lt;code&gt;codecept.json&lt;/code&gt; file.</source>
          <target state="translated">CodeceptJS 구성은 &lt;code&gt;codecept.json&lt;/code&gt; 파일 에서 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="639cce8f6f3d8406958ddfdb0df87b7208a882f7" translate="yes" xml:space="preserve">
          <source>CodeceptJS doesn't aim to embrace all possible functionality of WebDriver. At some points you may find that some actions do not exist, however it is easy to add one. You will need to use WebDriver API from &lt;a href=&quot;https://webdriver.io&quot;&gt;webdriver.io (opens new window)&lt;/a&gt; library.</source>
          <target state="translated">CodeceptJS는 WebDriver의 가능한 모든 기능을 수용하는 것을 목표로하지 않습니다. 어떤 시점에서 일부 작업이 존재하지 않는 것을 알 수 있지만 쉽게 추가 할 수 있습니다. &lt;a href=&quot;https://webdriver.io&quot;&gt;webdriver.io (새 창&lt;/a&gt; 에서 열림) 라이브러리의 WebDriver API를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="8b36cd4084f4228afd1067b83a703e0e6126ce71" translate="yes" xml:space="preserve">
          <source>CodeceptJS has &lt;a href=&quot;https://codecept.io/plugins#selenoid&quot;&gt;Selenoid plugin&lt;/a&gt; which can automagically load browser container setup.</source>
          <target state="translated">CodeceptJS에는 브라우저 컨테이너 설정을 자동으로로드 할 수있는 &lt;a href=&quot;https://codecept.io/plugins#selenoid&quot;&gt;Selenoid 플러그인&lt;/a&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="be3fce7b669484b1d3788304161c0cc86944e93e" translate="yes" xml:space="preserve">
          <source>CodeceptJS has a dependency injection container with Helpers and Support objects. They can be retrieved from the container:</source>
          <target state="translated">CodeceptJS에는 도우미 및 지원 개체가 포함 된 종속성 주입 컨테이너가 있습니다. 컨테이너에서 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6fb3f37087f83585fdaa929df61e267ca8cd790" translate="yes" xml:space="preserve">
          <source>CodeceptJS has an interactive, graphical test runner. We call it CodeceptUI. It works in your browser and helps you to manage your tests.</source>
          <target state="translated">CodeceptJS에는 대화 형 그래픽 테스트 실행기가 있습니다. CodeceptUI라고합니다. 브라우저에서 작동하며 테스트를 관리하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="f963559f178e0aba175c22b1c47b043814fa5235" translate="yes" xml:space="preserve">
          <source>CodeceptJS has two engines for running tests in parallel:</source>
          <target state="translated">CodeceptJS에는 테스트를 병렬로 실행하기위한 두 개의 엔진이 있습니다.</target>
        </trans-unit>
        <trans-unit id="31f2db5d2c12132b04a3264229173758d4831faf" translate="yes" xml:space="preserve">
          <source>CodeceptJS implements retries the same way &lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha do&lt;/a&gt;; You can set number of a retries for a feature:</source>
          <target state="translated">CodeceptJS는 &lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha&lt;/a&gt; 와 같은 방식으로 재 시도를 구현합니다 . 기능에 대한 재시도 횟수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71f6c56e8e8b0318923686746f547ceb2b2bbd22" translate="yes" xml:space="preserve">
          <source>CodeceptJS implements retries the same way &lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha does (opens new window)&lt;/a&gt;; You can set the number of a retries for a feature:</source>
          <target state="translated">CodeceptJS는 &lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha&lt;/a&gt; 와 동일한 방식으로 재 시도를 구현합니다 (새 창 열기 ) . 기능에 대한 재시도 횟수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a03faddfc5ef02683bccf699ac041bad4a2e567d" translate="yes" xml:space="preserve">
          <source>CodeceptJS includes &lt;a href=&quot;https://codecept.io/plugins/&quot;&gt;built-in plugins&lt;/a&gt; which extend basic functionality and can be turned on and off on purpose. Taking them as &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/plugin&quot;&gt;examples&lt;/a&gt; you can develop your custom plugins.</source>
          <target state="translated">CodeceptJS에는 기본 기능을 확장하고 의도적으로 켜고 끌 수있는 &lt;a href=&quot;https://codecept.io/plugins/&quot;&gt;내장 플러그인&lt;/a&gt; 이 포함되어 있습니다. 로 촬영 &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/plugin&quot;&gt;예&lt;/a&gt; 는 사용자 정의 플러그인을 개발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0801859e1167fd8e42347dd0f185f14b71b9902a" translate="yes" xml:space="preserve">
          <source>CodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The test is written as a linear scenario of user's action on a site.</source>
          <target state="translated">CodeceptJS는 특별한 BDD 스타일 구문을 사용하는 최신 엔드 투 엔드 테스트 프레임 워크입니다. 이 테스트는 사이트에서의 사용자 행동에 대한 선형 시나리오로 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="cd23ea59e40b9e3b5f0907438cf163e241c85075" translate="yes" xml:space="preserve">
          <source>CodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The tests are written as a linear scenario of the user's action on a site.</source>
          <target state="translated">CodeceptJS는 특수 BDD 스타일 구문을 사용하는 최신 엔드 투 엔드 테스트 프레임 워크입니다. 테스트는 사이트에서 사용자의 행동에 대한 선형 시나리오로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="d8a6e7c84bcd50629a18f34e2100363d52d62d9a" translate="yes" xml:space="preserve">
          <source>CodeceptJS is a rich testing frameworks which also provides features missing in original TestCafe:</source>
          <target state="translated">CodeceptJS는 원본 TestCafe에없는 기능도 제공하는 풍부한 테스트 프레임 워크입니다.</target>
        </trans-unit>
        <trans-unit id="8b2a4c324111c4c20fb2555a00a12be3e32a7319" translate="yes" xml:space="preserve">
          <source>CodeceptJS is an acceptance testing framework. In diversified world of JavaScript testing libraries it aims to create a unified high level API for end-to-end testing, powered by different backends. CodeceptJS allows you to write a test and switch in config execution drivers: will it be &lt;em&gt;wedriverio&lt;/em&gt;, &lt;em&gt;puppeteer&lt;/em&gt;, or &lt;em&gt;protractor&lt;/em&gt; depends on you. This way you aren't be bound to implementation, and your acceptance tests will work no matter of framework running them.</source>
          <target state="translated">CodeceptJS는 승인 테스트 프레임 워크입니다. 다양한 JavaScript 테스트 라이브러리 세계에서 다양한 백엔드로 구동되는 엔드 투 엔드 테스트를위한 통합 된 고급 API를 만드는 것을 목표로합니다. CodeceptJS를 사용하면 구성 실행 드라이버에서 테스트를 작성하고 전환 할 수 있습니다. &lt;em&gt;wedriverio&lt;/em&gt; , &lt;em&gt;puppeteer&lt;/em&gt; 또는 &lt;em&gt;각도기&lt;/em&gt; 는 사용자에 따라 다릅니다. 이렇게하면 구현에 구속되지 않으며 승인 테스트는 프레임 워크를 실행해도 상관없이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7468ccd150d3b5630d3f81993da707763b2d0947" translate="yes" xml:space="preserve">
          <source>CodeceptJS is an acceptance testing framework. In the diversified world of JavaScript testing libraries, it aims to create a unified high-level API for end-to-end testing, powered by a variety of backends. CodeceptJS allows you to write a test and switch the execution driver via config: whether it's &lt;em&gt;wedriverio&lt;/em&gt;, &lt;em&gt;puppeteer&lt;/em&gt;, or &lt;em&gt;protractor&lt;/em&gt; depends on you. This way you aren't bound to a specific implementation, and your acceptance tests will work no matter what framework is running them.</source>
          <target state="translated">CodeceptJS는 수락 테스트 프레임 워크입니다. 자바 스크립트 테스트 라이브러리의 다양한 세계에서 다양한 백엔드로 구동되는 엔드 투 엔드 테스트를위한 통합 된 고수준 API를 만드는 것을 목표로합니다. CodeceptJS를 사용하면 테스트를 작성하고 config를 통해 실행 드라이버를 전환 할 수 있습니다. &lt;em&gt;wedriverio&lt;/em&gt; , &lt;em&gt;puppeteer&lt;/em&gt; 또는 &lt;em&gt;protractor&lt;/em&gt; 여부는 사용자에 따라 다릅니다. 이렇게하면 특정 구현에 얽매이지 않고 어떤 프레임 워크에서 실행 중인지에 관계없이 수락 테스트가 작동합니다.</target>
        </trans-unit>
        <trans-unit id="efd4f789830badbcd455c62a338ba9335e7a1b5c" translate="yes" xml:space="preserve">
          <source>CodeceptJS packed into container with the Nightmare, Protractor, Puppeteer, and WebDriverIO drivers.</source>
          <target state="translated">CodeceptJS는 Nightmare, Protractor, Puppeteer 및 WebDriverIO 드라이버와 함께 컨테이너에 포장되었습니다.</target>
        </trans-unit>
        <trans-unit id="df5b5d1d8125461cbd541e6c0b913541e8802978" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides API to run custom code before and after the test and inject custom listeners into the event system.</source>
          <target state="translated">CodeceptJS는 테스트 전후에 사용자 정의 코드를 실행하고 사용자 정의 리스너를 이벤트 시스템에 주입하는 API를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0852cf9c29113a39ea4427ad8709976f7b8b3dd2" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a debug mode in which additional information is printed. It can be turned on with &lt;code&gt;--debug&lt;/code&gt; flag.</source>
          <target state="translated">CodeceptJS는 추가 정보가 인쇄되는 디버그 모드를 제공합니다. &lt;code&gt;--debug&lt;/code&gt; 플래그 를 사용하여 켤 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="44c53c8875096a9fc84dd9e8a90feef38c253175" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a flexible syntax to specify an element to click.</source>
          <target state="translated">CodeceptJS는 클릭 할 요소를 지정하는 유연한 구문을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ea9f14b3c43f7515f3c88cab408c5eff0fae2ee9" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a fluent builder to compose custom locators in JavaScript. Use &lt;code&gt;locate&lt;/code&gt; function to start.</source>
          <target state="translated">CodeceptJS는 JavaScript에서 사용자 정의 로케이터를 작성하는 유창한 빌더를 제공합니다. &lt;code&gt;locate&lt;/code&gt; 기능을 사용 하여 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="00dac64e74839ed5fac88c4754040da8cf9d5896" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a module with &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/event.js&quot;&gt;event dispatcher and set of predefined events&lt;/a&gt;.</source>
          <target state="translated">CodeceptJS는 &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/event.js&quot;&gt;이벤트 디스패처 및 사전 정의 된 이벤트 세트가&lt;/a&gt; 있는 모듈을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="7560b6a3b653903ee4caa5a3faae2b0502764b53" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides an API which can be loaded via &lt;code&gt;require('codeceptjs')&lt;/code&gt; when CodeceptJS is installed locally. These internal objects are available:</source>
          <target state="translated">CodeceptJS는 CodeceptJS가 로컬로 설치 될 때 &lt;code&gt;require('codeceptjs')&lt;/code&gt; 를 통해로드 할 수있는 API를 제공합니다 . 다음과 같은 내부 객체를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea5ef37d66a3f469f78a1b47ee65da211830a596" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides flexible strategies for locating elements:</source>
          <target state="translated">CodeceptJS는 요소를 찾기위한 유연한 전략을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e7b2f819389d3eaf4c91b11a37d7f28f19c27b37" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides high-level API on top of WebDriver protocol. While most standard implementations focus on dealing with WebElements on page, CodeceptJS is about user scenarios and interactions. That's why you don't have a direct access to web elements inside a test, but it is proved that in majority of cases you don't need it. Tests written from user's perspective are simpler to write, understand, log and debug.</source>
          <target state="translated">CodeceptJS는 WebDriver 프로토콜 위에 높은 수준의 API를 제공합니다. 대부분의 표준 구현은 페이지에서 WebElements를 다루는 데 중점을 두지 만 CodeceptJS는 사용자 시나리오 및 상호 작용에 관한 것입니다. 그렇기 때문에 테스트 내에서 웹 요소에 직접 액세스 할 수 없지만 대부분의 경우 필요하지 않음이 입증되었습니다. 사용자 관점에서 작성된 테스트는 작성, 이해, 기록 및 디버그가 더 간단합니다.</target>
        </trans-unit>
        <trans-unit id="e97e2127a2e46e82a8836366ee8b8a57d5669f78" translate="yes" xml:space="preserve">
          <source>CodeceptJS runner is available inside container as &lt;code&gt;codeceptjs&lt;/code&gt;.</source>
          <target state="translated">CodeceptJS 러너는 컨테이너 내에서 &lt;code&gt;codeceptjs&lt;/code&gt; 로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b95c74019643a3491e2e8d96cd2dd168b217fabd" translate="yes" xml:space="preserve">
          <source>CodeceptJS should be installed with webdriverio support:</source>
          <target state="translated">CodeceptJS는 webdriverio 지원과 함께 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="8f38d5f0bd3b246365e3109c0ba09a34b6f01179" translate="yes" xml:space="preserve">
          <source>CodeceptJS supports &lt;a href=&quot;https://github.com/codecept-js/CodeceptJS/tree/master/typings&quot;&gt;type declaration (opens new window)&lt;/a&gt; for &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript (opens new window)&lt;/a&gt;. It means that you can write your tests in TS. Also, all of your custom steps can be written in TS</source>
          <target state="translated">CodeceptJS는 &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript (새 창 열기 &lt;/a&gt;&lt;a href=&quot;https://github.com/codecept-js/CodeceptJS/tree/master/typings&quot;&gt;)에&lt;/a&gt; 대한 유형 선언 (새 창 열기)을 지원합니다 . 이는 TS에서 테스트를 작성할 수 있음을 의미합니다. 또한 모든 사용자 지정 단계를 TS로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="078c8a6b48a2b2210f51cc17c665b298cf761db9" translate="yes" xml:space="preserve">
          <source>CodeceptJS supports various engines for running browser tests. By default we recommend using &lt;strong&gt;Playwright&lt;/strong&gt; which is cross-browser and performant solution.</source>
          <target state="translated">CodeceptJS는 브라우저 테스트 실행을위한 다양한 엔진을 지원합니다. 기본적 으로 브라우저 간 성능이 뛰어난 솔루션 인 &lt;strong&gt;Playwright&lt;/strong&gt; 를 사용 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a188e3ee1a757e6f7dc2dd1e743f4062eaef8f9f" translate="yes" xml:space="preserve">
          <source>CodeceptJS test should be created with &lt;code&gt;gt&lt;/code&gt; command:</source>
          <target state="translated">CodeceptJS 테스트는 &lt;code&gt;gt&lt;/code&gt; 명령 으로 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e7ee0cc24ccdc16a9ca894c6e1b7fe81470fb409" translate="yes" xml:space="preserve">
          <source>CodeceptJS through helpers provides user friendly API to interact with a webpage. In this section we described using WebDriverIO helper which allows to control browser through Selenium WebDriver.</source>
          <target state="translated">헬퍼를 통한 CodeceptJS는 웹 페이지와 상호 작용하기위한 사용자 친화적 인 API를 제공합니다. 이 섹션에서는 Selenium WebDriver를 통해 브라우저를 제어 할 수있는 WebDriverIO 도우미를 사용하여 설명했습니다.</target>
        </trans-unit>
        <trans-unit id="81a31ff3ab09bb8c343a87ccb3b32701264f1a6a" translate="yes" xml:space="preserve">
          <source>CodeceptJS uses Puppeteer to improve end to end testing experience. No need to learn the syntax of a new tool, all drivers in CodeceptJS share the same API.</source>
          <target state="translated">CodeceptJS는 Puppeteer를 사용하여 엔드 투 엔드 테스트 경험을 향상시킵니다. 새로운 툴의 구문을 배울 필요가 없습니다. CodeceptJS의 모든 드라이버는 동일한 API를 공유합니다.</target>
        </trans-unit>
        <trans-unit id="d094cd531f304a4ea9c8200bdae28740a52aa1ff" translate="yes" xml:space="preserve">
          <source>CodeceptUI</source>
          <target state="translated">CodeceptUI</target>
        </trans-unit>
        <trans-unit id="2ac528aeab0ddd0b5276c3c6a5f7b367af6239e8" translate="yes" xml:space="preserve">
          <source>CodeceptUI can be started in two modes:</source>
          <target state="translated">CodeceptUI는 두 가지 모드로 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9edc2c44631d96fc658334f3088e6c6d90a57491" translate="yes" xml:space="preserve">
          <source>CodeceptUI can be used for</source>
          <target state="translated">CodeceptUI는 다음에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b41c166a9edfece8490aaf9b378cff7f4d44b35c" translate="yes" xml:space="preserve">
          <source>CodeceptUI is already installed with &lt;code&gt;create-codeceptjs&lt;/code&gt; command but you can install it manually via:</source>
          <target state="translated">CodeceptUI는 &lt;code&gt;create-codeceptjs&lt;/code&gt; 명령으로 이미 설치되어 있지만 다음을 통해 수동으로 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="237791adb3cd5613ae9dbbe12b234ef111d09640" translate="yes" xml:space="preserve">
          <source>Codeceptjs Docker</source>
          <target state="translated">Codeceptjs 도커</target>
        </trans-unit>
        <trans-unit id="84035fc962b4dda5cb5511c67d99c2e85ae6d1f1" translate="yes" xml:space="preserve">
          <source>Combining record/replay modes allows testing websites with large datasets.</source>
          <target state="translated">기록 / 재생 모드를 결합하면 대규모 데이터 세트가있는 웹 사이트를 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="d95ebc10a700eefefc4d8b94306157c80c4627b0" translate="yes" xml:space="preserve">
          <source>Commands affected (by default):</source>
          <target state="translated">영향을받는 명령 (기본) :</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="26ff498fe5269e765d3aa2d6c020cc471cd3e942" translate="yes" xml:space="preserve">
          <source>Common Configuration Patterns</source>
          <target state="translated">일반적인 구성 패턴</target>
        </trans-unit>
        <trans-unit id="b61a98a8d2111ecc5ef96c8a5492e8ade9cc0b26" translate="yes" xml:space="preserve">
          <source>Common preparation steps like opening a web page or logging in a user, can be placed in the &lt;code&gt;Before&lt;/code&gt; or &lt;code&gt;Background&lt;/code&gt; hooks:</source>
          <target state="translated">웹 페이지 열기 또는 사용자 로그인과 같은 일반적인 준비 단계는 &lt;code&gt;Before&lt;/code&gt; 또는 &lt;code&gt;Background&lt;/code&gt; 후크에 배치 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="784f2fe9e706ab9351a8b624644514675b305fb6" translate="yes" xml:space="preserve">
          <source>Common preparation steps like opening a web page, logging in a user, can be placed in &lt;code&gt;Before&lt;/code&gt; or &lt;code&gt;Background&lt;/code&gt; hook:</source>
          <target state="translated">웹 페이지 열기, 사용자 로그인과 같은 일반적인 준비 단계는 &lt;code&gt;Before&lt;/code&gt; 또는 &lt;code&gt;Background&lt;/code&gt; 후크에 배치 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f06967af7eeb8004a985a56ea0c359600fa56903" translate="yes" xml:space="preserve">
          <source>Community Helpers</source>
          <target state="translated">커뮤니티 도우미</target>
        </trans-unit>
        <trans-unit id="5b04f2bab690caf16dd8be1fd04dc3ba4fee51ee" translate="yes" xml:space="preserve">
          <source>Compare a test written using Nightmare API:</source>
          <target state="translated">Nightmare API를 사용하여 작성된 테스트를 비교하십시오.</target>
        </trans-unit>
        <trans-unit id="14db6e0a871cd6d40cb8db9c5d0abe8f63721706" translate="yes" xml:space="preserve">
          <source>Compared to the API proposed by CodeceptJS, the Protractor code looks more complicated. Even more important, it's harder to read and follow the logic of the Protractor test. Readability is a crucial part of acceptance testing. Tests should be easy to modify when there are changes in the specification or design. If the test is written in Protractor, it would likely require someone familiar with Protractor to make the change, whereas CodeceptJS allows anyone to understand and modify the test. CodeceptJS provides scenario-driven approach, so a test is just a step-by-step representation of real user actions. This means you can easily read and understand the steps in a test scenario, and edit the steps when the test needs to be changed.</source>
          <target state="translated">CodeceptJS가 제안한 API에 비해 Protractor 코드는 더 복잡해 보입니다. 더 중요한 것은 각도기 테스트의 논리를 읽고 따르는 것이 더 어렵다는 것입니다. 가독성은 승인 테스트의 중요한 부분입니다. 사양이나 디자인이 변경되면 테스트를 쉽게 수정할 수 있어야합니다. 테스트가 Protractor로 작성된 경우 변경하려면 Protractor에 익숙한 사람이 필요할 수 있지만 CodeceptJS를 사용하면 누구나 테스트를 이해하고 수정할 수 있습니다. CodeceptJS는 시나리오 기반 접근 방식을 제공하므로 테스트는 실제 사용자 작업의 단계별 표현 일뿐입니다. 즉, 테스트 시나리오의 단계를 쉽게 읽고 이해할 수 있으며 테스트를 변경해야하는 경우 단계를 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f6372d089ab011e45ad8b22335dc209ef36687c" translate="yes" xml:space="preserve">
          <source>Comparing to Appium, Detox runs faster and more stable but requires an additional setup for build.</source>
          <target state="translated">Appium과 비교하여 Detox는 더 빠르고 안정적으로 실행되지만 빌드를위한 추가 설정이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="1c22e213d882b6ab78c74b84d43a9c4b938fd342" translate="yes" xml:space="preserve">
          <source>Comparing to the API proposed by CodeceptJS, this code looks a bit more complicated. But what the more important, it's really really hard to read and follow its logic. Readability is the most crucial part in acceptance testing. You should easily change tests when changes specification or design. Probably, only a person who writes Protractor tests in your company, could do those changes, while CodeceptJS allows anyone to work with tests. Contrary, CodeceptJS provides CodeceptJS provides scenario-driven approach, so test is just a step-by-step representation of real user actions. This way you can easily read, and follow test scenario, and edit it when you need it to be changed.</source>
          <target state="translated">CodeceptJS가 제안한 API와 비교하면이 코드는 조금 더 복잡해 보입니다. 그러나 더 중요한 것은 논리를 읽고 따르는 것이 실제로 어렵다. 가독성은 합격 시험에서 가장 중요한 부분입니다. 사양이나 디자인을 변경할 때 테스트를 쉽게 변경해야합니다. 아마도 회사에서 각도기 테스트를 작성하는 사람 만 이러한 변경을 수행 할 수 있지만 CodeceptJS는 누구나 테스트 작업을 수행 할 수 있습니다. 반대로 CodeceptJS는 시나리오 중심의 접근 방식을 제공하는 CodeceptJS를 제공하므로 테스트는 실제 사용자 작업의 단계별 표현입니다. 이렇게하면 테스트 시나리오를 쉽게 읽고 따르며 필요할 때 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9217329601af44b7981cb09034f6e4b7c065b07b" translate="yes" xml:space="preserve">
          <source>Concept is similar to page objects but Data access objects can act like factories or data providers for tests</source>
          <target state="translated">개념은 페이지 개체와 유사하지만 데이터 액세스 개체는 테스트를 위해 팩토리 또는 데이터 공급자처럼 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfb318997a268bf1ad02002d89eab47e3c4b7488" translate="yes" xml:space="preserve">
          <source>Conditional Actions</source>
          <target state="translated">조건부 동작</target>
        </trans-unit>
        <trans-unit id="8a9ba197d8c81297f1db0d7239e5ae45ddc63718" translate="yes" xml:space="preserve">
          <source>Conditional Retries</source>
          <target state="translated">조건부 재시도</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="cc853f31414fc473eeab640dff7a9e1b89066037" translate="yes" xml:space="preserve">
          <source>Config can also be set by a function, in this case you can get a test object and specify config values based on it. This is very useful when running tests against cloud providers, like BrowserStack.</source>
          <target state="translated">기능은 구성을 설정할 수도 있습니다.이 경우 테스트 객체를 가져 와서이를 기반으로 구성 값을 지정할 수 있습니다. 이는 BrowserStack과 같은 클라우드 공급자에 대해 테스트를 실행할 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5dc388598988b7ab05ba72e9cc709546ccb7bef9" translate="yes" xml:space="preserve">
          <source>Config can also be set by a function, in this case you can get a test object and specify config values based on it. This is very useful when running tests against cloud providers, like BrowserStack. This function can also be asynchronous.</source>
          <target state="translated">구성은 함수로도 설정할 수 있습니다.이 경우 테스트 개체를 가져와이를 기반으로 구성 값을 지정할 수 있습니다. 이것은 BrowserStack과 같은 클라우드 공급자에 대한 테스트를 실행할 때 매우 유용합니다. 이 함수는 비동기식 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="534edde9e41e41f9db7456efa2b6bbff562523b1" translate="yes" xml:space="preserve">
          <source>Config changes can be applied to all tests in suite:</source>
          <target state="translated">제품군의 모든 테스트에 구성 변경 사항을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53ee24612362a15e2b9baaa23fc0b2c31be8ba83" translate="yes" xml:space="preserve">
          <source>Config for Headless Chrome</source>
          <target state="translated">헤드리스 크롬 구성</target>
        </trans-unit>
        <trans-unit id="5260c3ad34715ce57cc926017cad21d19e1131b2" translate="yes" xml:space="preserve">
          <source>Config for Non-Angular application:</source>
          <target state="translated">비 앵글 애플리케이션 구성 :</target>
        </trans-unit>
        <trans-unit id="df2e06a8caeaeb9af9657c2d3b0c66541f43fd14" translate="yes" xml:space="preserve">
          <source>Config values will be stored inside helper in &lt;code&gt;this.config&lt;/code&gt;. To get &lt;code&gt;defaultHost&lt;/code&gt; value you can use</source>
          <target state="translated">구성 값은 &lt;code&gt;this.config&lt;/code&gt; 의 헬퍼 안에 저장됩니다 . &lt;code&gt;defaultHost&lt;/code&gt; 값 을 얻으려면 다음을 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="57e9ad30448d36d2afe4b732c487899f58be10c5" translate="yes" xml:space="preserve">
          <source>Configuration (ApiDataFactory)</source>
          <target state="translated">구성 (ApiDataFactory)</target>
        </trans-unit>
        <trans-unit id="5bd70dd4a96bd7fd12038204d3434aee135fc841" translate="yes" xml:space="preserve">
          <source>Configuration (Nightmare)</source>
          <target state="translated">구성 (Nightmare)</target>
        </trans-unit>
        <trans-unit id="07fe29b24f0717673eb796f92dfadb231bced1c9" translate="yes" xml:space="preserve">
          <source>Configuration (Protractor)</source>
          <target state="translated">구성 (분도기)</target>
        </trans-unit>
        <trans-unit id="524be0016b896a36f978f3585b2c0f0e35379efb" translate="yes" xml:space="preserve">
          <source>Configuration (Puppeteer)</source>
          <target state="translated">구성 (인형)</target>
        </trans-unit>
        <trans-unit id="09864e600cccbf4cbef3c59ecf56aac5ce46b83a" translate="yes" xml:space="preserve">
          <source>Configuration (REST)</source>
          <target state="translated">구성 (REST)</target>
        </trans-unit>
        <trans-unit id="51d9d70b096016b2015172fc6e8a67dd3a5911b7" translate="yes" xml:space="preserve">
          <source>Configuration (WebDriverIO)</source>
          <target state="translated">구성 (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="43aba51ed8f26776bebefb2cf93d1cb5c52099a0" translate="yes" xml:space="preserve">
          <source>Configuration can either be taken from a corresponding helper (deprecated) or a from plugin config (recommended).</source>
          <target state="translated">해당 헬퍼 (더 이상 사용되지 않음) 또는 플러그인 구성 (권장)에서 구성을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3104edd76f46c2dd226b5dcdd513d9d7c9a73c6" translate="yes" xml:space="preserve">
          <source>Configuration changes will be reverted after a test or a suite.</source>
          <target state="translated">테스트 또는 스위트 후에 구성 변경 사항이 되돌려집니다.</target>
        </trans-unit>
        <trans-unit id="93c49325278f6b95c01caee704d29487879fcc58" translate="yes" xml:space="preserve">
          <source>Configuration for WebDriver should be provided inside &lt;code&gt;codecept.conf.js&lt;/code&gt; file under &lt;code&gt;helpers: WebDriver&lt;/code&gt; section:</source>
          <target state="translated">WebDriver에 대한 구성은 &lt;code&gt;helpers: WebDriver&lt;/code&gt; 섹션의 &lt;code&gt;codecept.conf.js&lt;/code&gt; 파일 내에 제공되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="0c37408e6ea6b05e6a8c60fd440aa3ee1210caed" translate="yes" xml:space="preserve">
          <source>Configuration is set in the &lt;code&gt;codecept.conf.js&lt;/code&gt; file which was created during the &lt;code&gt;init&lt;/code&gt; process. Inside the config file you can enable and configure helpers and plugins, and set bootstrap and teardown scripts.</source>
          <target state="translated">설정은 &lt;code&gt;init&lt;/code&gt; 과정 에서 생성 된 &lt;code&gt;codecept.conf.js&lt;/code&gt; 파일 에서 설정 됩니다. 구성 파일 내에서 도우미 및 플러그인을 활성화 및 구성하고 부트 스트랩 및 분해 스크립트를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce8ad60d0c979a0f80c94134665276dff24f4293" translate="yes" xml:space="preserve">
          <source>Configuration:</source>
          <target state="translated">Configuration:</target>
        </trans-unit>
        <trans-unit id="861b65660947ecc035601f23f9a0f0b0d3775ebe" translate="yes" xml:space="preserve">
          <source>Configure codecept.conf.js</source>
          <target state="translated">codecept.conf.js 구성</target>
        </trans-unit>
        <trans-unit id="e388197d107b8a884963f7430ace672030b3c33e" translate="yes" xml:space="preserve">
          <source>Configure it to use &lt;code&gt;output&lt;/code&gt; directory to print HTML reports:</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 디렉토리 를 사용 하여 HTML 보고서를 인쇄 하도록 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a10db8a479e34450afaeb406abdd9bea945917f" translate="yes" xml:space="preserve">
          <source>Configure mocha-multi with reports that you want:</source>
          <target state="translated">원하는 보고서로 mocha-multi를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="834b811351966050574089ced73dfbdb7ca6848a" translate="yes" xml:space="preserve">
          <source>Configure tsconfig.json</source>
          <target state="translated">tsconfig.json 구성</target>
        </trans-unit>
        <trans-unit id="32bc3c22148beccab28adad18f452f24bed405a4" translate="yes" xml:space="preserve">
          <source>Configuring</source>
          <target state="translated">Configuring</target>
        </trans-unit>
        <trans-unit id="045e91283529b1fe207245276967452e21d81e0c" translate="yes" xml:space="preserve">
          <source>Configuring CI</source>
          <target state="translated">CI 구성</target>
        </trans-unit>
        <trans-unit id="a3353bfbe3b5bc5ef43f2dbc929cbf17fda5c65f" translate="yes" xml:space="preserve">
          <source>Configuring Nightmare</source>
          <target state="translated">악몽 구성</target>
        </trans-unit>
        <trans-unit id="ba61a64aea55b9692c42f98ba75505a66e661783" translate="yes" xml:space="preserve">
          <source>Configuring WebDriver</source>
          <target state="translated">WebDriver 구성</target>
        </trans-unit>
        <trans-unit id="ffa640ffc0dc226e9613bbfee5c8c5191c46a3dd" translate="yes" xml:space="preserve">
          <source>Configuring the &lt;code&gt;tsconfig.json&lt;/code&gt; and &lt;code&gt;codecept.conf.js&lt;/code&gt; is not enough, you will need to configure the &lt;code&gt;steps.d.ts&lt;/code&gt; file for custom steps. Just simply do this by running this command::</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; 및 &lt;code&gt;codecept.conf.js&lt;/code&gt; 를 구성하는 것만으로 는 충분하지 않습니다 . 사용자 정의 단계에 대한 &lt;code&gt;steps.d.ts&lt;/code&gt; 파일 을 구성해야 합니다. 다음 명령을 실행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="af92120f42f04bd6d7b8572977665134b6cbed13" translate="yes" xml:space="preserve">
          <source>Connect Through proxy</source>
          <target state="translated">프록시를 통해 연결</target>
        </trans-unit>
        <trans-unit id="6e733ce1d658a9f855a315c19341b91bfc6d737a" translate="yes" xml:space="preserve">
          <source>Connect through proxy</source>
          <target state="translated">프록시를 통해 연결</target>
        </trans-unit>
        <trans-unit id="29634c6654a18dbf3125bee354a81bf388f2275d" translate="yes" xml:space="preserve">
          <source>Connect through proxy (WebDriverIO)</source>
          <target state="translated">프록시를 통해 연결 (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="601bdc3cbe3821e682395be27ed410df8165fde8" translate="yes" xml:space="preserve">
          <source>Connecting to &lt;code&gt;BrowserStack&lt;/code&gt; and &lt;code&gt;Sauce Labs&lt;/code&gt; is simple. All you need to do is set the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; parameters. WebDriver automatically know which service provider to connect to.</source>
          <target state="translated">&lt;code&gt;BrowserStack&lt;/code&gt; 및 &lt;code&gt;Sauce Labs&lt;/code&gt; 에 연결하는 것은 간단합니다. &lt;code&gt;user&lt;/code&gt; 와 &lt;code&gt;key&lt;/code&gt; 매개 변수를 설정하기 만하면 됩니다. WebDriver는 연결할 서비스 제공 업체를 자동으로 인식합니다.</target>
        </trans-unit>
        <trans-unit id="b90c101eb621b683e83ff7741d040cb052f2b714" translate="yes" xml:space="preserve">
          <source>Connecting to &lt;code&gt;BrowserStack&lt;/code&gt; and &lt;code&gt;Sauce Labs&lt;/code&gt; is simple. All you need to do is set the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; parameters. WebDriverIO automatically know which service provider to connect to.</source>
          <target state="translated">&lt;code&gt;BrowserStack&lt;/code&gt; 및 &lt;code&gt;Sauce Labs&lt;/code&gt; 연결하는 것은 간단합니다. &lt;code&gt;user&lt;/code&gt; 및 &lt;code&gt;key&lt;/code&gt; 매개 변수를 설정하기 만하면 됩니다. WebDriverIO는 연결할 서비스 제공자를 자동으로 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fce782e49b19de850642908a7ec08707b6cfa53" translate="yes" xml:space="preserve">
          <source>Cons</source>
          <target state="translated">Cons</target>
        </trans-unit>
        <trans-unit id="e6443af99d2f470f50affd5057bf48db2d09dae4" translate="yes" xml:space="preserve">
          <source>Container</source>
          <target state="translated">Container</target>
        </trans-unit>
        <trans-unit id="8edfad7595291b9082628fafb8e6d8693ae3f558" translate="yes" xml:space="preserve">
          <source>Container also contains current Mocha instance:</source>
          <target state="translated">컨테이너에는 현재 Mocha 인스턴스도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="cf2cadc5c224b06730871ca48c5951adf51a68da" translate="yes" xml:space="preserve">
          <source>Corresponding examples provided in next sections.</source>
          <target state="translated">다음 섹션에서 제공되는 해당 예제.</target>
        </trans-unit>
        <trans-unit id="ce24595f58f0520d68c92320e90c30496aa3956a" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;browsers.json&lt;/code&gt; file in the same directory &lt;code&gt;codecept.conf.js&lt;/code&gt; is located &lt;a href=&quot;https://aerokube.com/selenoid/latest/#_prepare_configuration&quot;&gt;Refer to Selenoid documentation (opens new window)&lt;/a&gt; to know more about browsers.json.</source>
          <target state="translated">동일한 디렉토리에 &lt;code&gt;browsers.json&lt;/code&gt; 파일을 생성하십시오. &lt;code&gt;codecept.conf.js&lt;/code&gt; 가 위치한 곳 입니다 . browsers.json에 대한 자세한 내용은 &lt;a href=&quot;https://aerokube.com/selenoid/latest/#_prepare_configuration&quot;&gt;Selenoid 설명서 (새 창에서 열림)&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="966a9e47377c35f75328dd2b135860df76703e2f" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;multiple&lt;/code&gt; section in configuration file, and fill it with run suites. Each suite should have &lt;code&gt;browser&lt;/code&gt; array with browser names or driver helper's configuration:</source>
          <target state="translated">만들기 &lt;code&gt;multiple&lt;/code&gt; 구성 파일의 섹션 및 실행 스위트 룸을 입력합니다. 각 제품군 에는 브라우저 이름 또는 드라이버 도우미 구성 이 포함 된 &lt;code&gt;browser&lt;/code&gt; 배열이 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="91d8b0c1456607e37ed392df8fee754c08337130" translate="yes" xml:space="preserve">
          <source>Create Selenoid container</source>
          <target state="translated">셀레 노이드 컨테이너 만들기</target>
        </trans-unit>
        <trans-unit id="961ea1200f06b7051ca6858934213115cda7aad9" translate="yes" xml:space="preserve">
          <source>Create a custom helper, define methods for it, and use it inside the I object. Your Helper can access &lt;code&gt;browser&lt;/code&gt; from Protractor by accessing the Protractor helper:</source>
          <target state="translated">사용자 지정 도우미를 만들고 이에 대한 메서드를 정의하고 I 개체 내에서 사용합니다. 도우미는 Protractor 도우미에 액세스하여 Protractor에서 &lt;code&gt;browser&lt;/code&gt; 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88366366060b8dfda3b9d169dd4ed75c9ddc502c" translate="yes" xml:space="preserve">
          <source>Create a factory file for a resource.</source>
          <target state="translated">자원에 대한 팩토리 파일을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="e1e0ffc0bcba147dfa368ad8712d24541d0b01bf" translate="yes" xml:space="preserve">
          <source>Create a file called &lt;code&gt;jsconfig.json&lt;/code&gt; in your project root directory, unless you already have one.</source>
          <target state="translated">프로젝트 루트 디렉터리에 &lt;code&gt;jsconfig.json&lt;/code&gt; 이라는 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="56c8128f9f7dcc8cbc785611afc72f3735a0bd00" translate="yes" xml:space="preserve">
          <source>Create a helper using &lt;code&gt;codecepjs gh&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;codecepjs gh&lt;/code&gt; 명령을 사용하여 도우미를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="9c6f6e8ea7223a224f56472cc0cb3bcf5da5fc5e" translate="yes" xml:space="preserve">
          <source>Create a placeholder in file:</source>
          <target state="translated">파일에 자리 표시자를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2e119578665eee9d26b5be04faed13cee2c0e33b" translate="yes" xml:space="preserve">
          <source>Create custom helper, define methods for it, and use it inside the I object. Your Helper can access &lt;code&gt;browser&lt;/code&gt; from Protractor by accessing Protractor helper:</source>
          <target state="translated">사용자 정의 헬퍼를 작성하고 메소드를 정의한 후 I 오브젝트 내부에서 사용하십시오. 도우미가 &lt;code&gt;browser&lt;/code&gt; 액세스 할 수 있습니다 각도기 도우미에 액세스하여 각도기에서 .</target>
        </trans-unit>
        <trans-unit id="1018a63a1bf600ccd29b05c8584ae324d84176d4" translate="yes" xml:space="preserve">
          <source>Create first feature and test when asked. Open a newly created file in your favorite JavaScript editor. The file should look like this:</source>
          <target state="translated">첫 번째 기능을 만들고 요청이있을 때 테스트합니다. 자주 사용하는 JavaScript 편집기에서 새로 만든 파일을 엽니 다. 파일은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="96f3dc24456750b675efb7a5fa2f3cef07b359cd" translate="yes" xml:space="preserve">
          <source>Create new helper</source>
          <target state="translated">새로운 도우미 만들기</target>
        </trans-unit>
        <trans-unit id="faade754f62bb3f3f6d667ed1e0932fe74b959f3" translate="yes" xml:space="preserve">
          <source>Create new pageobject</source>
          <target state="translated">새 페이지 객체 만들기</target>
        </trans-unit>
        <trans-unit id="bde5a3ade415a878c8a4537c543b600cf07f24a1" translate="yes" xml:space="preserve">
          <source>Create new test</source>
          <target state="translated">새로운 테스트 만들기</target>
        </trans-unit>
        <trans-unit id="3a89aa7417049fa900a4b5f317ac12b1951ccbf5" translate="yes" xml:space="preserve">
          <source>Create translation file like this:</source>
          <target state="translated">다음과 같은 번역 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9c7106ef65f299ed2a4b2903aa03a0e77080ed39" translate="yes" xml:space="preserve">
          <source>Creates &lt;code&gt;codecept.conf.js&lt;/code&gt; file in current directory:</source>
          <target state="translated">현재 디렉토리에 &lt;code&gt;codecept.conf.js&lt;/code&gt; 파일을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="d6effd8cb03bff23bf686db96fdaa78676b4d44c" translate="yes" xml:space="preserve">
          <source>Creates &lt;code&gt;codecept.json&lt;/code&gt; file in current directory:</source>
          <target state="translated">작성 &lt;code&gt;codecept.json&lt;/code&gt; 현재 디렉토리에있는 파일을 :</target>
        </trans-unit>
        <trans-unit id="b9d014877704bec779be6e66c580e0f6baddfda5" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;https://codecept.io/locators#custom-locators&quot;&gt;custom locator (opens new window)&lt;/a&gt; by using special attributes in HTML.</source>
          <target state="translated">HTML의 특수 속성을 사용하여 &lt;a href=&quot;https://codecept.io/locators#custom-locators&quot;&gt;사용자 지정 로케이터를&lt;/a&gt; 만듭니다 (새 창에서 열림) .</target>
        </trans-unit>
        <trans-unit id="28128d3ff4ce6cfc98fb173e4dc7fb871deaddb4" translate="yes" xml:space="preserve">
          <source>Creates screenshot on failure. Screenshot is saved into &lt;code&gt;output&lt;/code&gt; directory.</source>
          <target state="translated">실패시 스크린 샷을 만듭니다. 스크린 샷은 &lt;code&gt;output&lt;/code&gt; 디렉토리에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="ab2f51b8080b751180a8da0f7875f0f650e8a081" translate="yes" xml:space="preserve">
          <source>Creating a new project via &lt;a href=&quot;https://github.com/codeceptjs/create-codeceptjs&quot;&gt;&lt;code&gt;create-codeceptjs&lt;/code&gt; installer (opens new window)&lt;/a&gt; is the simplest way to start</source>
          <target state="translated">&lt;a href=&quot;https://github.com/codeceptjs/create-codeceptjs&quot;&gt; &lt;code&gt;create-codeceptjs&lt;/code&gt; 설치 프로그램 (새 창 열림)을&lt;/a&gt; 통해 새 프로젝트를 만드는 것이 가장 간단한 시작 방법입니다.</target>
        </trans-unit>
        <trans-unit id="0e557247c53d5a86c733f30ad81b57894a084e88" translate="yes" xml:space="preserve">
          <source>Cross-Platform Testing</source>
          <target state="translated">플랫폼 간 테스트</target>
        </trans-unit>
        <trans-unit id="f64581c4962edb894fb3054728d83483a2af4832" translate="yes" xml:space="preserve">
          <source>Cucumber integration</source>
          <target state="translated">오이 통합</target>
        </trans-unit>
        <trans-unit id="14662ba0bd860469487e8b7cb5fa5a11fa760bf0" translate="yes" xml:space="preserve">
          <source>Custom Hooks</source>
          <target state="translated">커스텀 훅</target>
        </trans-unit>
        <trans-unit id="284ec02a0dcd5443a4053f30fd150eed20a550c6" translate="yes" xml:space="preserve">
          <source>Custom Locators</source>
          <target state="translated">커스텀 로케이터</target>
        </trans-unit>
        <trans-unit id="ea2e9495b648de659ee5627dddc7f5e3a7377733" translate="yes" xml:space="preserve">
          <source>Custom Parallel Execution</source>
          <target state="translated">사용자 지정 병렬 실행</target>
        </trans-unit>
        <trans-unit id="a551233ce4d33c2af99e28de7db8970c72e7183a" translate="yes" xml:space="preserve">
          <source>Custom Runner</source>
          <target state="translated">커스텀 러너</target>
        </trans-unit>
        <trans-unit id="562833f3ac2b701ecbcbe04c0a123608494ee05c" translate="yes" xml:space="preserve">
          <source>Custom Strict Locators</source>
          <target state="translated">사용자 지정 엄격한 로케이터</target>
        </trans-unit>
        <trans-unit id="b1deaa58268f7dd9ca24cc9ceb27ab0a9a6c311e" translate="yes" xml:space="preserve">
          <source>Custom String Locators</source>
          <target state="translated">사용자 지정 문자열 로케이터</target>
        </trans-unit>
        <trans-unit id="2dcb05920d077242c80053d2d75b842e2994784b" translate="yes" xml:space="preserve">
          <source>Custom locators should be implemented in a plugin or a bootstrap script using internal CodeceptJS API:</source>
          <target state="translated">사용자 지정 로케이터는 내부 CodeceptJS API를 사용하여 플러그인 또는 부트 스트랩 스크립트에서 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="77948e089c055865008695405d798b980e055e09" translate="yes" xml:space="preserve">
          <source>Customize it from custom Helper file:</source>
          <target state="translated">사용자 정의 헬퍼 파일에서이를 사용자 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="79640afd67efa643e1657be9dd5e2567728c6663" translate="yes" xml:space="preserve">
          <source>Data Access Objects</source>
          <target state="translated">데이터 액세스 개체</target>
        </trans-unit>
        <trans-unit id="df8fe505a31e4d831fd356e5dbc4fff778c30a5c" translate="yes" xml:space="preserve">
          <source>Data Driven Tests</source>
          <target state="translated">데이터 기반 테스트</target>
        </trans-unit>
        <trans-unit id="541a14207677215070969758554886506e81455d" translate="yes" xml:space="preserve">
          <source>Data Generation with Factories</source>
          <target state="translated">공장을 이용한 데이터 생성</target>
        </trans-unit>
        <trans-unit id="d5d83b763809dbf1782ea117dc9885e64311acdd" translate="yes" xml:space="preserve">
          <source>Data Management</source>
          <target state="translated">데이터 관리</target>
        </trans-unit>
        <trans-unit id="68c9a915327c20c2720c0da15a0122624055b08b" translate="yes" xml:space="preserve">
          <source>Data Management via API</source>
          <target state="translated">API를 통한 데이터 관리</target>
        </trans-unit>
        <trans-unit id="1d5e69321482c37f52fc76ae7e5af10b483925c9" translate="yes" xml:space="preserve">
          <source>Data Objects require REST or GraphQL helpers to be enabled for data interaction</source>
          <target state="translated">데이터 개체는 데이터 상호 작용을 위해 REST 또는 GraphQL 도우미를 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="5e43d6bba8cb4d73f64d4d6a2fcf04c26cfb6bb1" translate="yes" xml:space="preserve">
          <source>Data Sources</source>
          <target state="translated">데이터 소스</target>
        </trans-unit>
        <trans-unit id="4fd56d31a08dd0f1587f4449f5d57b664c4042fb" translate="yes" xml:space="preserve">
          <source>Data of created records are collected and used in the end of a test for the cleanup.</source>
          <target state="translated">생성 된 레코드의 데이터는 정리 테스트가 끝날 때 수집되어 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="db99b945f646039277802184e04cfb0a679c01e8" translate="yes" xml:space="preserve">
          <source>Data sets can also be defined with array, generator, or a function.</source>
          <target state="translated">배열, 생성기 또는 함수로 데이터 세트를 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd604d99e75e45d38bc7ac8fc714cde0097d901f" translate="yes" xml:space="preserve">
          <source>Debug</source>
          <target state="translated">Debug</target>
        </trans-unit>
        <trans-unit id="1d82bfe2f9002f40e25999e91e79cb855e409d3f" translate="yes" xml:space="preserve">
          <source>Define how users are logged in and how to check that user is logged in</source>
          <target state="translated">사용자 로그인 방법 및 사용자 로그인 확인 방법 정의</target>
        </trans-unit>
        <trans-unit id="476e3c6d4b2ae266a547187884474954fa953347" translate="yes" xml:space="preserve">
          <source>Define user session names (example: &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;editor&lt;/code&gt;, &lt;code&gt;admin&lt;/code&gt;, etc).</source>
          <target state="translated">사용자 세션 이름 (예 : &lt;code&gt;user&lt;/code&gt; , &lt;code&gt;editor&lt;/code&gt; , &lt;code&gt;admin&lt;/code&gt; 등)을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="5cd60c4fd2950b489d0ec33e318559ab0726e8d9" translate="yes" xml:space="preserve">
          <source>Delete video and logs of passed tests (default : true)</source>
          <target state="translated">통과 한 테스트의 비디오 및 로그 삭제 (기본값 : true)</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">의존성 주입</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="2da8d2faf7d01464305efc874419b72ff8224c86" translate="yes" xml:space="preserve">
          <source>Desired Capabilities</source>
          <target state="translated">원하는 기능</target>
        </trans-unit>
        <trans-unit id="d0aa3492f9e72b864dde4767e71ec13a4cf1b18e" translate="yes" xml:space="preserve">
          <source>Despite showing XPath in this guide we **do not recommend using XPath for testing iOS native apps. XPath runs very slow on iOS. Consider using ID or Accessibility ID locators instead.</source>
          <target state="translated">이 가이드에 XPath를 표시 했음에도 불구하고 ** iOS 네이티브 앱 테스트에 XPath를 사용하지 않는 것이 좋습니다. XPath는 iOS에서 매우 느리게 실행됩니다. 대신 ID 또는 접근성 ID 로케이터를 사용해보세요.</target>
        </trans-unit>
        <trans-unit id="7f76fef7ea0f8fe4593bbf3fb15137ecd48f94cd" translate="yes" xml:space="preserve">
          <source>Detect flaky tests in our suite</source>
          <target state="translated">스위트에서 비정상적인 테스트 감지</target>
        </trans-unit>
        <trans-unit id="ab5c851897752ea442786efeac5fb866c23ec3dc" translate="yes" xml:space="preserve">
          <source>Detox</source>
          <target state="translated">Detox</target>
        </trans-unit>
        <trans-unit id="6a64dc2c4280cc763dc860a0cb981ffa4d485fb0" translate="yes" xml:space="preserve">
          <source>Detox configuration is required in &lt;code&gt;package.json&lt;/code&gt; under &lt;code&gt;detox&lt;/code&gt; section.</source>
          <target state="translated">&lt;code&gt;detox&lt;/code&gt; 섹션의 &lt;code&gt;package.json&lt;/code&gt; 에 해독 구성이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="51c334a550dfbcf724d97d29fbd6328330fa384d" translate="yes" xml:space="preserve">
          <source>Detox plays quite differently from Appium. To establish detox testing you need to build a mobile application in a special way to inject Detox code. This why &lt;strong&gt;Detox is grey box testing&lt;/strong&gt; solution, so you need an access to application source code, and a way to build and execute it on emulator.</source>
          <target state="translated">Detox는 Appium과는 완전히 다릅니다. 해독 테스트를 설정하려면 Detox 코드를 삽입하는 특별한 방법으로 모바일 애플리케이션을 빌드해야합니다. 이것이 &lt;strong&gt;Detox가 그레이 박스 테스트&lt;/strong&gt; 솔루션 인 이유 이므로 애플리케이션 소스 코드에 대한 액세스와이를 에뮬레이터에서 빌드하고 실행하는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="c4e1b4722de9d085952367dc2284464ee48114e5" translate="yes" xml:space="preserve">
          <source>Device Emulation</source>
          <target state="translated">장치 에뮬레이션</target>
        </trans-unit>
        <trans-unit id="6e41b1f6d6df764efe32869ac5713e07bf01e26a" translate="yes" xml:space="preserve">
          <source>Device emulation can be enabled in CodeceptJS globally in a config or per session.</source>
          <target state="translated">장치 에뮬레이션은 구성 또는 세션별로 CodeceptJS에서 전역 적으로 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99946884377a9fee47f0a9dadc16a697de435a38" translate="yes" xml:space="preserve">
          <source>Directory Structure</source>
          <target state="translated">디렉토리 구조</target>
        </trans-unit>
        <trans-unit id="13ff7730384a3396d9731d3b6007166e72ac6cc4" translate="yes" xml:space="preserve">
          <source>Disable Per Test</source>
          <target state="translated">테스트 당 비활성화</target>
        </trans-unit>
        <trans-unit id="8900a4ddc21188f3d4c2c15fbe15418ef06bc3e6" translate="yes" xml:space="preserve">
          <source>Disables retryFailedStep plugin for steps inside a block;</source>
          <target state="translated">블록 내부의 단계에 대해 retryFailedStep 플러그인을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="1d5875afb82105bfdb7dad3f0b0b749b3095abfa" translate="yes" xml:space="preserve">
          <source>Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.</source>
          <target state="translated">window.alert | window.confirm | window.prompt에 의해 생성 된 활성 JavaScript 팝업을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="39a90e0681198d34a90002eaafaf9320eb00eb75" translate="yes" xml:space="preserve">
          <source>Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt. Appium: support only web testing</source>
          <target state="translated">window.alert | window.confirm | window.prompt에 의해 생성 된 활성 JavaScript 팝업을 해제합니다. Appium : 웹 테스트 만 지원</target>
        </trans-unit>
        <trans-unit id="854d58e8f8e5f86b981ee7bbf24beb96691da584" translate="yes" xml:space="preserve">
          <source>Docker Compose</source>
          <target state="translated">도커 작성</target>
        </trans-unit>
        <trans-unit id="225ac9300ac48f41860ff29ea8e9cb1154960738" translate="yes" xml:space="preserve">
          <source>Does the locator look like an ID selector (e.g. &quot;#foo&quot;)? If so, try to find an input element matching that ID.</source>
          <target state="translated">로케이터가 ID 선택기처럼 보입니까 (예 : &quot;#foo&quot;)? 그렇다면 해당 ID와 일치하는 입력 요소를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="1df6bb4d5c769991bae49c39d03babd8248124e1" translate="yes" xml:space="preserve">
          <source>Download and install &lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt; 다운로드 및 설치</target>
        </trans-unit>
        <trans-unit id="d502d98622181f59bd5769064f5e68dc5fbdd8d8" translate="yes" xml:space="preserve">
          <source>Drag an item to a destination element.</source>
          <target state="translated">항목을 대상 요소로 끕니다.</target>
        </trans-unit>
        <trans-unit id="8d9d93af231eaae0438ce58d9758a7e399f38fd8" translate="yes" xml:space="preserve">
          <source>Drag an item to a destination element. Appium: not tested</source>
          <target state="translated">항목을 대상 요소로 끕니다. Appium : 테스트되지 않음</target>
        </trans-unit>
        <trans-unit id="2bc8bf7a00fd5715bc0f8309708a2c1ca4c99f28" translate="yes" xml:space="preserve">
          <source>Drag the scrubber of a slider to a given position For fuzzy locators, fields are matched by label text, the &quot;name&quot; attribute, CSS, and XPath.</source>
          <target state="translated">슬라이더의 스크러버를 지정된 위치로 드래그 퍼지 로케이터의 경우 필드는 레이블 텍스트, &quot;이름&quot;속성, CSS 및 XPath로 일치됩니다.</target>
        </trans-unit>
        <trans-unit id="9dbf2fc15a62cf57d0eca3b19bceaee8e3e65511" translate="yes" xml:space="preserve">
          <source>Dry Run</source>
          <target state="translated">드라 이런</target>
        </trans-unit>
        <trans-unit id="119142fb92b287ca3263f3f58e84891dd2bea9ea" translate="yes" xml:space="preserve">
          <source>Dumps puppeteers code coverage after every test.</source>
          <target state="translated">모든 테스트 후 인형극 코드 커버리지를 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="096c9809fdc0538b50d5a68da39154922316935a" translate="yes" xml:space="preserve">
          <source>Dynamic Configuration</source>
          <target state="translated">동적 구성</target>
        </trans-unit>
        <trans-unit id="499c03ade376209306e2f74eece2f16bb4cb9bec" translate="yes" xml:space="preserve">
          <source>Dynamic Injection</source>
          <target state="translated">동적 주입</target>
        </trans-unit>
        <trans-unit id="de893a7cde5431349423f51d2bad5595b76eb72f" translate="yes" xml:space="preserve">
          <source>Each executed process uses custom folder for reports and output. It is stored in subfolder inside an output directory. Subfolders will be named in &lt;code&gt;suite_browser&lt;/code&gt; format.</source>
          <target state="translated">실행 된 각 프로세스는 보고서 및 출력에 사용자 정의 폴더를 사용합니다. 출력 디렉토리 내의 하위 폴더에 저장됩니다. 하위 폴더는 &lt;code&gt;suite_browser&lt;/code&gt; 형식 으로 이름이 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="f073bc5a3ac1522d7ae0eb17962b1cdb4ee5807d" translate="yes" xml:space="preserve">
          <source>Each feature of a product should be born from a talk between</source>
          <target state="translated">제품의 각 기능은</target>
        </trans-unit>
        <trans-unit id="09f11478f6137563376daef168805aafe11df5ec" translate="yes" xml:space="preserve">
          <source>Each implemented method should return a value as they will be added to global promise chain as well.</source>
          <target state="translated">구현 된 각 메소드는 글로벌 약속 체인에도 추가되므로 값을 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="5550fdda60a4130fbfd92a678011ffb8cac5fcaf" translate="yes" xml:space="preserve">
          <source>Each operation must have the following:</source>
          <target state="translated">각 작업에는 다음이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="05e997ade3a54964d3c8a02596ea2c9dce3528e5" translate="yes" xml:space="preserve">
          <source>Each test is described inside a &lt;code&gt;Scenario&lt;/code&gt; function with &lt;code&gt;I&lt;/code&gt; object passed into it. I object is an &lt;strong&gt;actor&lt;/strong&gt;, an abstraction for a testing user. I is a proxy object for currently enabled &lt;strong&gt;Helpers&lt;/strong&gt;.</source>
          <target state="translated">각 테스트는 &lt;code&gt;I&lt;/code&gt; 객체가 전달 된 &lt;code&gt;Scenario&lt;/code&gt; 함수 내부에 설명 되어 있습니다. 나는 객체는이다 &lt;strong&gt;배우&lt;/strong&gt; , 테스트 사용자에 대한 추상화입니다. 현재 활성화 된 &lt;strong&gt;헬퍼를&lt;/strong&gt; 위한 프록시 객체입니다&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="fdf012f0709741268d498ec73a5f0f07fe91d1fb" translate="yes" xml:space="preserve">
          <source>Each test is described inside a &lt;code&gt;Scenario&lt;/code&gt; function with the &lt;code&gt;I&lt;/code&gt; object passed into it. The &lt;code&gt;I&lt;/code&gt; object is an &lt;strong&gt;actor&lt;/strong&gt;, an abstraction for a testing user. The &lt;code&gt;I&lt;/code&gt; is a proxy object for currently enabled &lt;strong&gt;Helpers&lt;/strong&gt;.</source>
          <target state="translated">각 테스트는 &lt;code&gt;I&lt;/code&gt; 개체가 전달 된 &lt;code&gt;Scenario&lt;/code&gt; 함수 내에서 설명 됩니다. &lt;code&gt;I&lt;/code&gt; 의 객체는이다 &lt;strong&gt;배우&lt;/strong&gt; , 테스트 사용자에 대한 추상화입니다. &lt;code&gt;I&lt;/code&gt; 현재 사용에 대한 프록시 객체이다 &lt;strong&gt;도우미&lt;/strong&gt; .&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb4a98c0247d63d3bc771d07626b3e837cfb7f00" translate="yes" xml:space="preserve">
          <source>Each worker spins an instance of CodeceptJS, executes a group of tests, and sends back report to the main process.</source>
          <target state="translated">각 작업자는 CodeceptJS의 인스턴스를 회전하고 테스트 그룹을 실행 한 다음 보고서를 주 프로세스로 다시 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3d7845e047a8c583311c7316385ac8234c9c8683" translate="yes" xml:space="preserve">
          <source>Educational videos provided by our community member &lt;strong&gt;&lt;a href=&quot;https://github.com/ontytoom&quot;&gt;@ontytoom&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">커뮤니티 회원 &lt;strong&gt;&lt;a href=&quot;https://github.com/ontytoom&quot;&gt;@ontytoom에서&lt;/a&gt;&lt;/strong&gt; 제공하는 교육용 비디오 .</target>
        </trans-unit>
        <trans-unit id="a7f668caeb16547d55b6877aa34788c3dc5c7c55" translate="yes" xml:space="preserve">
          <source>Element can be found by CSS or XPath locators.</source>
          <target state="translated">요소는 CSS 또는 XPath 로케이터로 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee2675d84e17dc4fc678399b11d8b9d5ac05ab53" translate="yes" xml:space="preserve">
          <source>Element can be found by CSS or XPath locators. Practically every steps in WebDriverIO helper accept them both.</source>
          <target state="translated">CSS 또는 XPath 로케이터에서 요소를 찾을 수 있습니다. 실제로 WebDriverIO 도우미의 모든 단계는 두 단계를 모두 허용합니다.</target>
        </trans-unit>
        <trans-unit id="c3060294b4cf31e5322894bd959f3ac72049ac5a" translate="yes" xml:space="preserve">
          <source>Elements can also be located by their accessability id, available both at Android and iOS. Accessibility id is recommended to use for locating element, as it rarely changed.</source>
          <target state="translated">요소는 접근성 ID로 찾을 수 있으며 Android 및 iOS에서 모두 사용할 수 있습니다. 접근성 ID는 거의 변경되지 않으므로 요소를 찾는 데 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="37d565ca65545b8fa2fd8f05503e851fdc62bf7a" translate="yes" xml:space="preserve">
          <source>Elements can also have ids, which can be located with &lt;code&gt;#&lt;/code&gt; prefix. On Android it it is important to keep full package name in id locator:</source>
          <target state="translated">요소는 ID를 가질 수 있으며 &lt;code&gt;#&lt;/code&gt; 접두사로 찾을 수 있습니다 . 안드로이드에서는 id 로케이터에 전체 패키지 이름을 유지하는 것이 중요합니다 :</target>
        </trans-unit>
        <trans-unit id="ec1ce2eb91a1e324f83aa64deb5a3e2d65d60a6a" translate="yes" xml:space="preserve">
          <source>Email Checking</source>
          <target state="translated">이메일 확인</target>
        </trans-unit>
        <trans-unit id="285419a58f35bd59ca0c7ec81da591980849bebb" translate="yes" xml:space="preserve">
          <source>Emulates right click on an element. Unlike normal click instead of sending native event, emulates a click with JavaScript. This works on hidden, animated or inactive elements as well.</source>
          <target state="translated">요소를 마우스 오른쪽 버튼으로 클릭합니다. 네이티브 이벤트를 보내는 대신 일반 클릭과 달리 JavaScript로 클릭을 에뮬레이트합니다. 이것은 숨김, 애니메이션 또는 비활성 요소에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="0135c299f746cf54d0617faa5505829bb678b9e2" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;Nightmare&lt;/code&gt; helper in &lt;code&gt;codecept.json&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.json&lt;/code&gt; 구성 에서 &lt;code&gt;Nightmare&lt;/code&gt; 도우미 사용 :</target>
        </trans-unit>
        <trans-unit id="c128ff0c34f0f4eb73eccea102ad0afc1e523aae" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in config</source>
          <target state="translated">구성에서 &lt;code&gt;wdio&lt;/code&gt; 플러그인 활성화</target>
        </trans-unit>
        <trans-unit id="68883bae5c77794671ac04f4cee405dc71edfac0" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;browserstack&lt;/code&gt; service:</source>
          <target state="translated">플러그인 목록에서 &lt;code&gt;wdio&lt;/code&gt; 플러그인을 활성화 하고 &lt;code&gt;browserstack&lt;/code&gt; 서비스를 추가 합니다 .</target>
        </trans-unit>
        <trans-unit id="6677695fd0c138f2b83674f63d95403a4a7825fa" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;sauce&lt;/code&gt; service:</source>
          <target state="translated">플러그인 목록에서 &lt;code&gt;wdio&lt;/code&gt; 플러그인을 활성화 하고 &lt;code&gt;sauce&lt;/code&gt; 서비스를 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="cfd6dd718f5f629dcef250c5f8bbd5372fed5511" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;selenium-standalone&lt;/code&gt; service:</source>
          <target state="translated">플러그인 목록에서 &lt;code&gt;wdio&lt;/code&gt; 플러그인을 활성화 하고 &lt;code&gt;selenium-standalone&lt;/code&gt; 서비스를 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="4cdb8322b482618279ed3cd1e3101aec3ac7986c" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;testingbot&lt;/code&gt; service:</source>
          <target state="translated">플러그인 목록에서 &lt;code&gt;wdio&lt;/code&gt; 플러그인을 활성화 하고 &lt;code&gt;testingbot&lt;/code&gt; 서비스를 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="b6a5431c6d17c49c1417eb410fce2eed095d0200" translate="yes" xml:space="preserve">
          <source>Enable GraphQL helper in the config. It is recommended to set &lt;code&gt;endpoint&lt;/code&gt;, the URL to which the requests go to. If you need some authorization you can optionally set default headers too.</source>
          <target state="translated">구성에서 GraphQL 도우미를 활성화합니다. 요청이 이동하는 URL 인 &lt;code&gt;endpoint&lt;/code&gt; 를 설정하는 것이 좋습니다 . 권한이 필요한 경우 선택적으로 기본 헤더도 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19f21860317df8c547396f2136a121ba3c436ce4" translate="yes" xml:space="preserve">
          <source>Enable REST helper in global config. It is recommended to set &lt;code&gt;endpoint&lt;/code&gt;, a base URL for all API requests. If you need some authorization you can optionally set default headers too.</source>
          <target state="translated">글로벌 구성에서 REST 헬퍼를 사용하십시오. 모든 API 요청의 기본 URL 인 &lt;code&gt;endpoint&lt;/code&gt; 를 설정하는 것이 좋습니다 . 인증이 필요한 경우 선택적으로 기본 헤더를 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f48d77bb61e0bb57f79d1fb65ea2c198115df6af" translate="yes" xml:space="preserve">
          <source>Enable REST helper in the config. It is recommended to set &lt;code&gt;endpoint&lt;/code&gt;, a base URL for all API requests. If you need some authorization you can optionally set default headers too.</source>
          <target state="translated">구성에서 REST 도우미를 활성화합니다. 모든 API 요청에 대한 기본 URL 인 &lt;code&gt;endpoint&lt;/code&gt; 를 설정하는 것이 좋습니다 . 권한이 필요한 경우 선택적으로 기본 헤더도 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74853a5b184399940d7b76cc4baeff3e80f7ecd7" translate="yes" xml:space="preserve">
          <source>Enable helper in config file:</source>
          <target state="translated">구성 파일에서 도우미 활성화 :</target>
        </trans-unit>
        <trans-unit id="c38092cea0ba2e5b3280f69d83171be695074766" translate="yes" xml:space="preserve">
          <source>Enable it in config inside plugins section:</source>
          <target state="translated">플러그인 섹션 내 구성에서 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="1ba4bdeb48bbea521cb02b6cc6c205c848899576" translate="yes" xml:space="preserve">
          <source>Enable it in the &lt;code&gt;codecept.conf.js&lt;/code&gt; file, inside the plugins section:</source>
          <target state="translated">플러그인 섹션 의 &lt;code&gt;codecept.conf.js&lt;/code&gt; 파일 에서 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="c74a6e2fefe1af23f425a68ca032f6f532338428" translate="yes" xml:space="preserve">
          <source>Enable log recording and use &lt;code&gt;logs&lt;/code&gt; folder of output (default: false)</source>
          <target state="translated">로그 기록 활성화 및 출력의 &lt;code&gt;logs&lt;/code&gt; 폴더 사용 (기본값 : false)</target>
        </trans-unit>
        <trans-unit id="deabe175b9606fa1cace71fbf52769394df423f0" translate="yes" xml:space="preserve">
          <source>Enable this plugin and configure as described below</source>
          <target state="translated">이 플러그인을 활성화하고 아래에 설명 된대로 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="08c8ad5134219d02a75600cf3c0617bcc7a16792" translate="yes" xml:space="preserve">
          <source>Enable this plugin in &lt;code&gt;codecept.conf.js&lt;/code&gt; (enabled by default for new setups):</source>
          <target state="translated">&lt;code&gt;codecept.conf.js&lt;/code&gt; 에서이 플러그인을 활성화합니다 (새 설정에 대해 기본적으로 활성화 됨).</target>
        </trans-unit>
        <trans-unit id="fcd1c7f9f04fe19873b3cac944c98ed965dba7f2" translate="yes" xml:space="preserve">
          <source>Enable video recording and use &lt;code&gt;video&lt;/code&gt; folder of output (default: false)</source>
          <target state="translated">비디오 녹화 활성화 및 출력 &lt;code&gt;video&lt;/code&gt; 폴더 사용 (기본값 : false)</target>
        </trans-unit>
        <trans-unit id="777d56d609a1831b04fdbf03d7d87435b0b6523a" translate="yes" xml:space="preserve">
          <source>Enables Allure reporter.</source>
          <target state="translated">Allure 기자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f979903a0149ac5e97b198d165c0c8f3938c3f37" translate="yes" xml:space="preserve">
          <source>End to End tests can cover standard but complex scenarios from a user's perspective. With e2e tests you can be confident that users, following all defined scenarios, won't get errors. We check &lt;strong&gt;functionality of application and a user interface&lt;/strong&gt; (UI) as well.</source>
          <target state="translated">종단 간 테스트는 사용자 관점에서 표준이지만 복잡한 시나리오를 다룰 수 있습니다. e2e 테스트를 사용하면 정의 된 모든 시나리오를 따르는 사용자에게 오류가 발생하지 않을 것이라고 확신 할 수 있습니다. 우리는 확인 &lt;strong&gt;응용 프로그램과 사용자 인터페이스의 기능&lt;/strong&gt; 뿐만 아니라 (UI)를.</target>
        </trans-unit>
        <trans-unit id="273d934d5d8b4aa6b781174bb417f8187d8438bf" translate="yes" xml:space="preserve">
          <source>End to end tests can be flaky for various reasons. Even when we can't do anything to solve this problem it we can do next two things:</source>
          <target state="translated">종단 간 테스트는 다양한 이유로 불안정 할 수 있습니다. 이 문제를 해결하기 위해 아무것도 할 수없는 경우에도 다음 두 가지를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7230ed4754037a80673c208320ec0e4f2a0fc0ac" translate="yes" xml:space="preserve">
          <source>Enjoy testing!</source>
          <target state="translated">테스트를 즐기십시오!</target>
        </trans-unit>
        <trans-unit id="f70df357cc5ff0cfd2bf355e4d1f2eccb2589b28" translate="yes" xml:space="preserve">
          <source>Ensure that you have &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJS installed (opens new window)&lt;/a&gt;. You will also need to install &lt;a href=&quot;http://appium.io/&quot;&gt;Appium (opens new window)&lt;/a&gt;. We suggest to use &lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor (opens new window)&lt;/a&gt; to check if your system is ready for mobile testing.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJS가 설치되어&lt;/a&gt; 있는지 확인하십시오 (새 창에서 열림) . &lt;a href=&quot;http://appium.io/&quot;&gt;Appium (새 창에서 열림)도&lt;/a&gt; 설치해야합니다 . &lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor (새 창에서 열림)&lt;/a&gt; 를 사용하여 시스템이 모바일 테스트 준비가되었는지 확인하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="837c567bc9aab352fbe71ccda056c58bf0caaa90" translate="yes" xml:space="preserve">
          <source>Ensure that you have &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJS installed&lt;/a&gt;. You will also need to install &lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;. We suggest to use &lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor&lt;/a&gt; to check if your system is ready for mobile testing.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJS가 설치되어&lt;/a&gt; 있는지 확인하십시오 . &lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt; 도 설치해야합니다 . &lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor&lt;/a&gt; 를 사용 하여 시스템이 모바일 테스트를 수행 할 준비가되었는지 확인하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="89ee88f618997ad052b8f98356aa707abfb7729d" translate="yes" xml:space="preserve">
          <source>Enters Angular mode (switched on by default) Should be used after &quot;amOutsideAngularApp&quot;</source>
          <target state="translated">각도 모드로 들어갑니다 (기본적으로 켜져 있음) &quot;amOutsideAngularApp&quot;다음에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="6c092524fd05a90bdfd187d2742aa8a0a110d9ba" translate="yes" xml:space="preserve">
          <source>Enters a directory In local filesystem. Starts from a current directory</source>
          <target state="translated">로컬 파일 시스템에 디렉토리를 입력합니다. 현재 디렉토리에서 시작</target>
        </trans-unit>
        <trans-unit id="5f7b6e737b0e4fe92f5ed34df0771daba8f5e2ec" translate="yes" xml:space="preserve">
          <source>Even better if you have a convention on active elements with special attributes like &lt;code&gt;data-test&lt;/code&gt; or &lt;code&gt;data-qa&lt;/code&gt;. Use &lt;code&gt;customLocator&lt;/code&gt; plugin to easily add them to tests.</source>
          <target state="translated">&lt;code&gt;data-test&lt;/code&gt; 또는 &lt;code&gt;data-qa&lt;/code&gt; 와 같은 특수 속성이있는 활성 요소에 대한 규칙이있는 경우 더욱 좋습니다 . &lt;code&gt;customLocator&lt;/code&gt; 플러그인을 사용 하여 테스트에 쉽게 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="842377156503364f6a89a012c72844568f08f8b6" translate="yes" xml:space="preserve">
          <source>Event Listeners</source>
          <target state="translated">이벤트 리스너</target>
        </trans-unit>
        <trans-unit id="7064d89574ec13bcecd8a38c49d4b251c411b686" translate="yes" xml:space="preserve">
          <source>Every Scenario inside this feature will be rerun 3 times. You can make an exception for a specific scenario by passing &lt;code&gt;retries&lt;/code&gt; option to a Scenario.</source>
          <target state="translated">이 기능 내의 모든 시나리오는 3 번 다시 실행됩니다. &lt;code&gt;retries&lt;/code&gt; 옵션을 시나리오에 전달하여 특정 시나리오에 대한 예외를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f321b43b95dc1090c5558a73586c4b8a09dfc91d" translate="yes" xml:space="preserve">
          <source>Every Scenario inside this feature will be rerun 3 times. You can make an exception for a specific scenario by passing the &lt;code&gt;retries&lt;/code&gt; option to a Scenario.</source>
          <target state="translated">이 기능의 모든 시나리오는 3 번 재실행됩니다. &lt;code&gt;retries&lt;/code&gt; 옵션을 시나리오에 전달하여 특정 시나리오에 대한 예외를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="84973f83e987f0f19651e2ef2af4db8603363d93" translate="yes" xml:space="preserve">
          <source>Example #1: Show chrome browser window</source>
          <target state="translated">예제 # 1 : 크롬 브라우저 창 표시</target>
        </trans-unit>
        <trans-unit id="974f4f7a3e6a1b1f2c60a96dc5b4eed60fe74a1b" translate="yes" xml:space="preserve">
          <source>Example #1: Wait for 0 network connections.</source>
          <target state="translated">예 # 1 : 0 네트워크 연결을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="f6c177849819237a06e39a65c4079b80e029a63d" translate="yes" xml:space="preserve">
          <source>Example #2: Remote browser connection</source>
          <target state="translated">예제 # 2 : 원격 브라우저 연결</target>
        </trans-unit>
        <trans-unit id="74b25fc58a58dd579255cc83816a2d7a16a028b4" translate="yes" xml:space="preserve">
          <source>Example #2: Wait for DOMContentLoaded event</source>
          <target state="translated">예제 # 2 : DOMContentLoaded 이벤트 대기</target>
        </trans-unit>
        <trans-unit id="b130dc4c616121ade2e2655dcf125ff293195c2b" translate="yes" xml:space="preserve">
          <source>Example #2: Wait for DOMContentLoaded event and 0 network connections</source>
          <target state="translated">예 # 2 : DOMContentLoaded 이벤트 및 0 개의 네트워크 연결 대기</target>
        </trans-unit>
        <trans-unit id="c6ea025f5a8cefbd3cfc48b0b449c4ca9d0bef33" translate="yes" xml:space="preserve">
          <source>Example #3: Debug in window mode</source>
          <target state="translated">예제 # 3 : 창 모드에서 디버그</target>
        </trans-unit>
        <trans-unit id="498a43887ceeee51e72caac6d5d4f41e35644227" translate="yes" xml:space="preserve">
          <source>Example #4: Connect to remote browser by specifying &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target&quot;&gt;websocket endpoint (opens new window)&lt;/a&gt;</source>
          <target state="translated">예제 # 4 : &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target&quot;&gt;websocket 끝점&lt;/a&gt; 을 지정하여 원격 브라우저에 연결 (새 창에서 열림)</target>
        </trans-unit>
        <trans-unit id="4c90362e0715f7e15d074fa159704e2470da9c95" translate="yes" xml:space="preserve">
          <source>Example #5: Target URL with provided basic authentication</source>
          <target state="translated">예제 # 5 : 기본 인증이 제공된 대상 URL</target>
        </trans-unit>
        <trans-unit id="a04ddf46f7363c73008727be8649be31e1b36583" translate="yes" xml:space="preserve">
          <source>Example #5: Testing with Chromium extensions</source>
          <target state="translated">예제 # 5 : Chromium 확장 프로그램으로 테스트</target>
        </trans-unit>
        <trans-unit id="902ee93c62c1ab8f8abed0c50391d261f2296a9c" translate="yes" xml:space="preserve">
          <source>Example #6: Launch tests emulating iPhone 6</source>
          <target state="translated">예제 # 6 : iPhone 6을 에뮬레이트하는 시작 테스트</target>
        </trans-unit>
        <trans-unit id="795c3ef48a125c0828802cb421a408b855044dc7" translate="yes" xml:space="preserve">
          <source>Example (&lt;code&gt;endpoint&lt;/code&gt;: &lt;code&gt;http://app.com/api&lt;/code&gt;):</source>
          <target state="translated">예 ( &lt;code&gt;endpoint&lt;/code&gt; : &lt;code&gt;http://app.com/api&lt;/code&gt; ) :</target>
        </trans-unit>
        <trans-unit id="c5d7bb5db87eb76d2cc8726b6f78f8a92074b5bd" translate="yes" xml:space="preserve">
          <source>Example with basic authentication</source>
          <target state="translated">기본 인증의 예</target>
        </trans-unit>
        <trans-unit id="bf02117dce9ae813f1c81d175bba75abd9f01987" translate="yes" xml:space="preserve">
          <source>Example with jQuery DatePicker:</source>
          <target state="translated">jQuery DatePicker를 사용한 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="f746d333456637127a33afbca6d27c23de42c3a1" translate="yes" xml:space="preserve">
          <source>Example: Async Bootstrap in a Function</source>
          <target state="translated">예 : 함수의 비동기 부트 스트랩</target>
        </trans-unit>
        <trans-unit id="93c5b0d72358ab87ef8418112f3fdb606cd78253" translate="yes" xml:space="preserve">
          <source>Example: Async Teardown in a Function</source>
          <target state="translated">예 : 함수에서 비동기 테어 다운</target>
        </trans-unit>
        <trans-unit id="b85137a7ed95f1126efa9f9682b4c8c3a02f40f7" translate="yes" xml:space="preserve">
          <source>Example: Bootstrap &amp;amp; Teardown Inside Config</source>
          <target state="translated">예 : 구성 내 부트 스트랩 및 테어 다운</target>
        </trans-unit>
        <trans-unit id="f0223d589441365ff73b372d69ed0ba1ca2a5ba5" translate="yes" xml:space="preserve">
          <source>Example: Bootstrap &amp;amp; Teardown Inside an Object</source>
          <target state="translated">예 : 객체 내부의 부트 스트랩 및 테어 다운</target>
        </trans-unit>
        <trans-unit id="c994e5535d0a38a34dad78312cc0aed6bae6a0d3" translate="yes" xml:space="preserve">
          <source>Example: BootstrapAll &amp;amp; TeardownAll Inside Config</source>
          <target state="translated">예 : BootstrapAll &amp;amp; TeardownAll 구성 내부</target>
        </trans-unit>
        <trans-unit id="025f877955cfbf88f6ad791c950cc975f4cbf9ae" translate="yes" xml:space="preserve">
          <source>Example: Execute code for a specific group of tests</source>
          <target state="translated">예 : 특정 테스트 그룹에 대한 코드 실행</target>
        </trans-unit>
        <trans-unit id="be9f9755f7a36c8d68a6b6bc62cedc6d28578bdc" translate="yes" xml:space="preserve">
          <source>Example: Getting sessions from local storage</source>
          <target state="translated">예 : 로컬 저장소에서 세션 가져 오기</target>
        </trans-unit>
        <trans-unit id="2fde1a159372e6bdb65e1d6e0a54e3e536cfa5c1" translate="yes" xml:space="preserve">
          <source>Example: In Vue.js to make components completely rendered we are waiting for &lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick (opens new window)&lt;/a&gt;.</source>
          <target state="translated">예 : Vue.js에서 컴포넌트를 완전히 렌더링하기 위해 우리는 &lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick (새 창 열림)을&lt;/a&gt; 기다리고 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e7619080cfc2199d8e5b4428701355ed38056b8" translate="yes" xml:space="preserve">
          <source>Example: In Vue.js to make components completely rendered we are waiting for &lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick&lt;/a&gt;.</source>
          <target state="translated">예 :에서 Vue.js 완전히 우리가 기다리고 있습니다 렌더링 구성 요소를 만들려면 &lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="706dda6db24f09558f6f47bc71e7da2bf8622162" translate="yes" xml:space="preserve">
          <source>Example: Keep cookies between tests</source>
          <target state="translated">예 : 테스트 사이에 쿠키 유지</target>
        </trans-unit>
        <trans-unit id="01137375b75f20d4a4e89bc6bb2f3d97b20fb6d7" translate="yes" xml:space="preserve">
          <source>Example: Multiple users</source>
          <target state="translated">예 : 여러 사용자</target>
        </trans-unit>
        <trans-unit id="29a6ba5ea9f671f0c90e6e59d63da78986e9e3fe" translate="yes" xml:space="preserve">
          <source>Example: Retrying rendering errors in Puppeteer.</source>
          <target state="translated">예 : Puppeteer에서 렌더링 오류 재시도</target>
        </trans-unit>
        <trans-unit id="1e2f107f05676c0894c0a0b879faaf5939071752" translate="yes" xml:space="preserve">
          <source>Example: Running Tests Split By A Custom Function</source>
          <target state="translated">예 : 사용자 지정 함수로 분할 된 테스트 실행</target>
        </trans-unit>
        <trans-unit id="5de4652789fdea73ae886a0d6a80b3579f6fe12b" translate="yes" xml:space="preserve">
          <source>Example: Running tests in 2 browsers in 4 threads</source>
          <target state="translated">예 : 4 개의 스레드에서 2 개의 브라우저에서 테스트 실행</target>
        </trans-unit>
        <trans-unit id="70868d3d5f764d8de8b7d0af00824c3f1067a73f" translate="yes" xml:space="preserve">
          <source>Example: Simple login</source>
          <target state="translated">예 : 단순 로그인</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="3aa2550ed9cc1cd58bde281f2a9c4a5b5a035f22" translate="yes" xml:space="preserve">
          <source>Examples above can be combined into one file.</source>
          <target state="translated">위의 예는 하나의 파일로 결합 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="1a4c16de436878ac88aca79050e36fcdfcd96c6b" translate="yes" xml:space="preserve">
          <source>Execute CodeceptJS with HTML reporter:</source>
          <target state="translated">HTML 리포터로 CodeceptJS를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="42634eb1d0f2b2c1d5b3982f6703cba859dbda66" translate="yes" xml:space="preserve">
          <source>Execute CodeceptJS with JUnit reporter:</source>
          <target state="translated">JUnit 기자와 함께 CodeceptJS를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="163771ecee75f9b346ecc36ee6e945a383cb287a" translate="yes" xml:space="preserve">
          <source>Execute CodeceptJS with mocha-multi reporter:</source>
          <target state="translated">mocha-multi reporter로 CodeceptJS를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="918babdec0cd26574027399d696b441528754438" translate="yes" xml:space="preserve">
          <source>Execute a test &amp;amp; use interactive pause to see how CodeceptJS works</source>
          <target state="translated">테스트를 실행하고 대화식 일시 중지를 사용하여 CodeceptJS의 작동 방식 확인</target>
        </trans-unit>
        <trans-unit id="af52779a8da1d280d635eb20f5e95da954ac7603" translate="yes" xml:space="preserve">
          <source>Execute code only in Web mode.</source>
          <target state="translated">웹 모드에서만 코드를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="852722f39a3efb4993fd75420e67cff5cf421837" translate="yes" xml:space="preserve">
          <source>Execute code only on Android</source>
          <target state="translated">Android에서만 코드 실행</target>
        </trans-unit>
        <trans-unit id="b3c3d1c320f0389a41bab5a236a0fb9118be4d6e" translate="yes" xml:space="preserve">
          <source>Execute code only on iOS</source>
          <target state="translated">iOS에서만 코드 실행</target>
        </trans-unit>
        <trans-unit id="573cada6bf4847b6a31866c5025dccdb3af6ab47" translate="yes" xml:space="preserve">
          <source>Execute the same scenario on a different data set.</source>
          <target state="translated">다른 데이터 세트에서 동일한 시나리오를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="fe0ca8fcb3be46342993a4d29b13b4ac7e45b325" translate="yes" xml:space="preserve">
          <source>Executes a script on the page:</source>
          <target state="translated">페이지에서 스크립트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="0784d6958bc6e86666f8a5bf9bbcb2418913fac5" translate="yes" xml:space="preserve">
          <source>Executes async script on page. Provided function should execute a passed callback (as first argument) to signal it is finished.</source>
          <target state="translated">페이지에서 비동기 스크립트를 실행합니다. 제공된 함수는 전달 된 콜백 (첫 번째 인수)을 실행하여 완료되었음을 알립니다.</target>
        </trans-unit>
        <trans-unit id="bd6e1be3c092f8f93836a8e0079c4158cc094fa3" translate="yes" xml:space="preserve">
          <source>Executes axios request</source>
          <target state="translated">axios 요청을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="7878c4912602adf25ac94da6132835bfdbcec7d5" translate="yes" xml:space="preserve">
          <source>Executes query via axios call</source>
          <target state="translated">axios 호출을 통해 쿼리를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="e32c18964551903e96a90709c8c7a3922461c711" translate="yes" xml:space="preserve">
          <source>Executes request to create a record in API. Can be replaced from a in custom helper.</source>
          <target state="translated">API에서 레코드 작성 요청을 실행합니다. 사용자 지정 도우미에서 교체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1024bb75ae84e495d1b2c7f36bc61299a101478" translate="yes" xml:space="preserve">
          <source>Executes request to create a record to the GraphQL endpoint. Can be replaced from a custom helper.</source>
          <target state="translated">GraphQL 엔드 포인트에 대한 레코드 생성 요청을 실행합니다. 사용자 지정 도우미에서 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bc2960d5947d18be247de1f6dbdc6539fdf4517" translate="yes" xml:space="preserve">
          <source>Executes request to delete a record in API Can be replaced from a custom helper.</source>
          <target state="translated">API에서 레코드 삭제 요청을 실행합니다. 사용자 정의 헬퍼에서 교체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2700272c1fb16752ff4a1215da5c2904c86ffefe" translate="yes" xml:space="preserve">
          <source>Executes request to delete a record to the GraphQL endpoint. Can be replaced from a custom helper.</source>
          <target state="translated">GraphQL 엔드 포인트에 대한 레코드 삭제 요청을 실행합니다. 사용자 지정 도우미에서 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8591200d7f3aae265761b5934ae2fb6993289668" translate="yes" xml:space="preserve">
          <source>Executes sync script on a page. Pass arguments to function as additional parameters. Will return execution result to a test. In this case you should use async function and await to receive results.</source>
          <target state="translated">페이지에서 동기화 스크립트를 실행합니다. 추가 매개 변수로 기능하도록 인수를 전달하십시오. 실행 결과를 테스트로 반환합니다. 이 경우 비동기 기능을 사용하고 결과를 받기 위해 기다려야합니다.</target>
        </trans-unit>
        <trans-unit id="03df8bd0ccd3c1d073b7dc335808c534d2563b46" translate="yes" xml:space="preserve">
          <source>Executes tests. Requires &lt;code&gt;codecept.conf.js&lt;/code&gt; config to be present in provided path.</source>
          <target state="translated">테스트를 실행합니다. 필요 &lt;code&gt;codecept.conf.js&lt;/code&gt; 구성 제공 경로에 존재한다.</target>
        </trans-unit>
        <trans-unit id="cb3336b08004bcc0244ec67cb4fe7eda323d63a2" translate="yes" xml:space="preserve">
          <source>Executes tests. Requires &lt;code&gt;codecept.json&lt;/code&gt; config to be present in provided path.</source>
          <target state="translated">테스트를 실행합니다. 제공된 경로에 &lt;code&gt;codecept.json&lt;/code&gt; 구성이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="008ef1571df3d0c6b17b5fc938f5918d15538c9b" translate="yes" xml:space="preserve">
          <source>Executes unirest request</source>
          <target state="translated">유니 레스트 요청 실행</target>
        </trans-unit>
        <trans-unit id="37ca62594e54440404d580c99700f28a202d3b93" translate="yes" xml:space="preserve">
          <source>Experimental Firefox support &lt;a href=&quot;https://codecept.io/helpers/Puppeteer-firefox&quot;&gt;can be activated (opens new window)&lt;/a&gt;.</source>
          <target state="translated">시험용 Firefox 지원 &lt;a href=&quot;https://codecept.io/helpers/Puppeteer-firefox&quot;&gt;을 활성화 할 수 있습니다 (새 창에서 열림)&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="63aca66709254bbd01bb413414ca0c828dde5fef" translate="yes" xml:space="preserve">
          <source>Export a function in your bootstrap file:</source>
          <target state="translated">부트 스트랩 파일에서 함수를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="4be9a4abd6d7c8083fc1a7bf9004e653250a9ba5" translate="yes" xml:space="preserve">
          <source>Extending</source>
          <target state="translated">Extending</target>
        </trans-unit>
        <trans-unit id="9b061eda3a9723a34d305dea85a4f735821bc11c" translate="yes" xml:space="preserve">
          <source>Extending CodeceptJS With Custom Helpers</source>
          <target state="translated">사용자 지정 도우미로 CodeceptJS 확장</target>
        </trans-unit>
        <trans-unit id="ed7c8a4c0bd00228b9e4dac6c3d39b5da66efbc0" translate="yes" xml:space="preserve">
          <source>Extending Helper</source>
          <target state="translated">도우미 확장</target>
        </trans-unit>
        <trans-unit id="1ff5eb9d74262d22e846ce9e5a89b743f7b5bca2" translate="yes" xml:space="preserve">
          <source>Extending Nightmare Helper</source>
          <target state="translated">악몽 도우미 확장</target>
        </trans-unit>
        <trans-unit id="a747ab1adb565f0428f5525fda503d8d95dc9f43" translate="yes" xml:space="preserve">
          <source>Extending WebDriver</source>
          <target state="translated">WebDriver 확장</target>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="83fd8dd40290a5d0013d0d883a192929d5253f82" translate="yes" xml:space="preserve">
          <source>Factory contains operations -</source>
          <target state="translated">공장 운영-</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="124560019bec9fd8e042cfb639c612be772c786f" translate="yes" xml:space="preserve">
          <source>Features and Scenarios have their options that can be set by passing a hash after their names:</source>
          <target state="translated">기능 및 시나리오에는 이름 뒤에 해시를 전달하여 설정할 수있는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b839ad3493d406351d352cf1b14b94b43e349ff" translate="yes" xml:space="preserve">
          <source>Fetches id of a record after it was created by &lt;code&gt;have&lt;/code&gt;. By default fetched &lt;code&gt;id&lt;/code&gt; attribute from JSON body.</source>
          <target state="translated">&lt;code&gt;have&lt;/code&gt; 에 의해 생성 된 레코드의 ID를 가져옵니다 . 기본적으로 JSON 본문에서 가져온 &lt;code&gt;id&lt;/code&gt; 속성입니다.</target>
        </trans-unit>
        <trans-unit id="c3608a99d56a768b532538fc02930d3ff701d84a" translate="yes" xml:space="preserve">
          <source>FileSystem</source>
          <target state="translated">FileSystem</target>
        </trans-unit>
        <trans-unit id="ba402ea6ba5e49f98e82d0fa1a40baadaf09338c" translate="yes" xml:space="preserve">
          <source>Filename or directory can be customized. You are creating your own custom runner so take this paragraph as an example.</source>
          <target state="translated">파일 이름 또는 디렉터리를 사용자 지정할 수 있습니다. 사용자 지정 러너를 만들고 있으므로이 단락을 예로 들어보십시오.</target>
        </trans-unit>
        <trans-unit id="7922019330a2a1fe840afff3e18d2115f710f102" translate="yes" xml:space="preserve">
          <source>Filling Fields</source>
          <target state="translated">필링 필드</target>
        </trans-unit>
        <trans-unit id="9ed781de30d230f9def709cbfbc0050aa3dc3e16" translate="yes" xml:space="preserve">
          <source>Fills a text field or textarea, after clearing its value, with the given string. Field is located by name, label, CSS, or XPath.</source>
          <target state="translated">지정된 문자열로 값을 지운 후 텍스트 필드 또는 텍스트 영역을 채 웁니다. 필드는 이름, 레이블, CSS 또는 XPath로 위치합니다.</target>
        </trans-unit>
        <trans-unit id="4260211de297b66d2c28ec4c1dee34e01adae920" translate="yes" xml:space="preserve">
          <source>Fills in text field in an app. A field can be located by text, accessibility id, id.</source>
          <target state="translated">앱의 텍스트 필드를 채 웁니다. 필드는 텍스트, 접근성 ID, ID로 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="ef815523161440f436f0270f8714169408e5b6b9" translate="yes" xml:space="preserve">
          <source>Find a checkbox by providing human readable text:</source>
          <target state="translated">사람이 읽을 수있는 텍스트를 제공하여 확인란을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="e57ab832d2f2bec1a527ca754f2c75729e64c66e" translate="yes" xml:space="preserve">
          <source>Find a checkbox by providing human readable text: NOTE: Assumes the checkable element exists</source>
          <target state="translated">사람이 읽을 수있는 텍스트를 제공하여 확인란을 찾습니다. 참고 : 확인 가능한 요소가 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="ec70ae9300c4e4d1887d081018468d8a6b76ad91" translate="yes" xml:space="preserve">
          <source>Find a clickable element by providing human readable text:</source>
          <target state="translated">사람이 읽을 수있는 텍스트를 제공하여 클릭 가능한 요소를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="0131672cf1183b78b239d280d3bd694bb7c563f5" translate="yes" xml:space="preserve">
          <source>Find an element with provided attributes</source>
          <target state="translated">제공된 속성을 가진 요소 찾기</target>
        </trans-unit>
        <trans-unit id="b7d1a4fc51ae6e2b4a2dfef72d7bf0eb07b569f5" translate="yes" xml:space="preserve">
          <source>Find field elements by providing human readable text:</source>
          <target state="translated">사람이 읽을 수있는 텍스트를 제공하여 필드 요소를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="ec229e87ef518cf91751ebb5627e5a5877cc9457" translate="yes" xml:space="preserve">
          <source>Finds an element inside a located.</source>
          <target state="translated">위치 안에서 요소를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="50b13e4858e0375536ca2620aa65c97baa39da6b" translate="yes" xml:space="preserve">
          <source>Finds an element which contains a child element provided:</source>
          <target state="translated">제공된 하위 요소가 포함 된 요소를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="b87dbd3e6af45f086d688c13501957496997680e" translate="yes" xml:space="preserve">
          <source>Finds an element which contains a descendant element provided:</source>
          <target state="translated">제공된 하위 요소가 포함 된 요소를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="312d4c8b0f393000c81bdb691071670ef9306e6d" translate="yes" xml:space="preserve">
          <source>Finds an element which contains an provided ancestor:</source>
          <target state="translated">제공된 조상을 포함하는 요소를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="60046dc7ca02d13ac7f8b935e4abfc2dc8af28da" translate="yes" xml:space="preserve">
          <source>Finds element containing a text</source>
          <target state="translated">텍스트를 포함하는 요소를 찾습니다</target>
        </trans-unit>
        <trans-unit id="a6cd2753909f66d5e3bb00974d70e4df7d256f30" translate="yes" xml:space="preserve">
          <source>Finds element located after the provided one</source>
          <target state="translated">제공된 요소 뒤에있는 요소를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="a0c4b55dd0a6dfaedddc67549649e3c71acd5465" translate="yes" xml:space="preserve">
          <source>Finds element located before the provided one</source>
          <target state="translated">제공된 요소 앞에있는 요소를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="0f157bba48b225c907d1b829951adbc37d3c8ab1" translate="yes" xml:space="preserve">
          <source>First argument is a description of an action. Second argument is async function that gets this helper as parameter.</source>
          <target state="translated">첫 번째 인수는 작업에 대한 설명입니다. 두 번째 인수는이 도우미를 매개 변수로 가져 오는 비동기 함수입니다.</target>
        </trans-unit>
        <trans-unit id="53ba5db881b82e35bf23f985955c1463a78a3ce9" translate="yes" xml:space="preserve">
          <source>First of all, your mileage may vary!</source>
          <target state="translated">우선 마일리지가 다를 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="a44c05013e70851894145371ec5340ba4e15b449" translate="yes" xml:space="preserve">
          <source>First test can be generated with &lt;code&gt;gt&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;gt&lt;/code&gt; 명령 으로 첫 번째 테스트를 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4cf18384ba4b93b8535aa4a9f7ae8fbeb1dfe1a5" translate="yes" xml:space="preserve">
          <source>Fix flaky tests by rerunning them.</source>
          <target state="translated">비정상적인 테스트를 다시 실행하여 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="33d464c7750f24ad09d58f9c1c93108cbaba2b2e" translate="yes" xml:space="preserve">
          <source>Focus on Readability</source>
          <target state="translated">가독성에 초점</target>
        </trans-unit>
        <trans-unit id="60369a4aa817bf9b7a762b4afaf1aaca51ef3447" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://codecept.io/mobile-react-native-locators&quot;&gt;React Native for Android see our special guide&lt;/a&gt;.</source>
          <target state="translated">들어 &lt;a href=&quot;https://codecept.io/mobile-react-native-locators&quot;&gt;안드로이드에 대한 기본 반응 특별 설명서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="84e46b99cfe15e7b6b74ffc45925d529aa497cc8" translate="yes" xml:space="preserve">
          <source>For Android you can use &lt;strong&gt;UI Automator Viewer&lt;/strong&gt; bundled with Android SDK:</source>
          <target state="translated">Android의 경우 Android SDK와 함께 번들로 제공되는 &lt;strong&gt;UI Automator Viewer를&lt;/strong&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e84b67bae4f2881a219056ccf627fcfb609c196a" translate="yes" xml:space="preserve">
          <source>For React apps a special &lt;code&gt;react&lt;/code&gt; locator is available. It allows to select an element by its component name, props and state.</source>
          <target state="translated">React 앱의 경우 특별한 &lt;code&gt;react&lt;/code&gt; 로케이터를 사용할 수 있습니다. 구성 요소 이름, 소품 및 상태로 요소를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50787e4299832274c39753496eb7ed2ddef0968e" translate="yes" xml:space="preserve">
          <source>For TodoMVC application you will have following config created in &lt;code&gt;codecept.json&lt;/code&gt; file:</source>
          <target state="translated">TodoMVC 응용 프로그램의 경우에서 만든 설정 다음과 같은 것이다 &lt;code&gt;codecept.json&lt;/code&gt; 의 파일을 :</target>
        </trans-unit>
        <trans-unit id="9a83e175fc70164c5658a96beafc885682c1206a" translate="yes" xml:space="preserve">
          <source>For TodoMVC application, you will have following config created in the &lt;code&gt;codecept.conf.js&lt;/code&gt; file:</source>
          <target state="translated">TodoMVC 애플리케이션의 경우 &lt;code&gt;codecept.conf.js&lt;/code&gt; 파일 에 다음 구성이 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="400d9547e7358bee707c338242b28d3ac9e217c4" translate="yes" xml:space="preserve">
          <source>For Visual Studio Code, add the following configuration in launch.json:</source>
          <target state="translated">Visual Studio Code의 경우 launch.json에 다음 구성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="0437b78c7521bbe5c0bc585e437e6d50d413cc6e" translate="yes" xml:space="preserve">
          <source>For advanced debugging use NodeJS debugger. In WebStorm IDE:</source>
          <target state="translated">고급 디버깅의 경우 NodeJS 디버거를 사용하십시오. WebStorm IDE에서 :</target>
        </trans-unit>
        <trans-unit id="167f48e28cf91713d1ed33c720fb3e9eea3bad1a" translate="yes" xml:space="preserve">
          <source>For better development experience cookies can be saved into file, so a session can be reused while writing tests.</source>
          <target state="translated">더 나은 개발 경험을 위해 쿠키를 파일에 저장할 수 있으므로 테스트를 작성하는 동안 세션을 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be05b48762d776da22c184be625b25ef297b3678" translate="yes" xml:space="preserve">
          <source>For dynamic step-by-step output add &lt;code&gt;--steps&lt;/code&gt; option to &lt;code&gt;run&lt;/code&gt; command:</source>
          <target state="translated">동적 단계별 출력의 경우 &lt;code&gt;--steps&lt;/code&gt; 옵션을 추가 하여 명령 을 &lt;code&gt;run&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="58e471ab3d2f68d7828bd8e2dbcf7005d51ada39" translate="yes" xml:space="preserve">
          <source>For example, here's the heuristic used for the &lt;code&gt;fillField&lt;/code&gt; method:</source>
          <target state="translated">예를 들어, 다음은 &lt;code&gt;fillField&lt;/code&gt; 메소드에 사용되는 휴리스틱입니다 .</target>
        </trans-unit>
        <trans-unit id="fa0866c55ce55b93803eb910826b300ab1076b4c" translate="yes" xml:space="preserve">
          <source>For example, if you add the new step &lt;code&gt;printMessage&lt;/code&gt; for your custom helper like this:</source>
          <target state="translated">예를 들어 다음 과 같이 사용자 지정 도우미에 대한 새 단계 &lt;code&gt;printMessage&lt;/code&gt; 를 추가하는 경우 :</target>
        </trans-unit>
        <trans-unit id="b5ea285c804baa2ecb90059809d4bd3767c6fa8c" translate="yes" xml:space="preserve">
          <source>For further reference look for &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/listener&quot;&gt;currently available listeners&lt;/a&gt; using event system.</source>
          <target state="translated">추가 참조를 위해 이벤트 시스템을 사용하여 &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/listener&quot;&gt;현재 사용 가능한 리스너&lt;/a&gt; 를 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="a3ffe753eeda5a8796ab59ecfa4fe9ec55377762" translate="yes" xml:space="preserve">
          <source>For instance, if you click a button and nothing happens - probably JS event is not attached to this button yet Also, if you fill field and input validation doesn't accept your input - maybe because you typed value too fast.</source>
          <target state="translated">예를 들어, 버튼을 클릭해도 아무 일도 일어나지 않는 경우-JS 이벤트가이 버튼에 아직 연결되지 않았을 수 있습니다. 또한 필드를 채우고 입력 유효성 검사가 입력을 수락하지 않으면 값을 너무 빨리 입력했기 때문일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18cc4443d8e08c991540d70a25ea62c0ef513dec" translate="yes" xml:space="preserve">
          <source>For instance, to perform a click with Playwright helper, do it like this:</source>
          <target state="translated">예를 들어 극작가 도우미로 클릭을 수행하려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="6a2f10fc94232e7c4ba8a609ef4220017916d7b6" translate="yes" xml:space="preserve">
          <source>For instance, with the config above we can change browser value using &lt;code&gt;profile&lt;/code&gt; option</source>
          <target state="translated">예를 들어, 위의 구성으로 &lt;code&gt;profile&lt;/code&gt; 옵션을 사용하여 브라우저 값을 변경할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="0a50461138513a00928fb0e8ea534b506181e823" translate="yes" xml:space="preserve">
          <source>For instance, you can set the window size or toggle headless mode, no matter of which helpers are actually used.</source>
          <target state="translated">예를 들어, 실제로 사용되는 도우미에 관계없이 창 크기를 설정하거나 헤드리스 모드를 전환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d24c11b96441821ea9b3fb589ac7067478e41ab" translate="yes" xml:space="preserve">
          <source>For more details on locator object see &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/locator.js&quot;&gt;Locator (opens new window)&lt;/a&gt; class implementation.</source>
          <target state="translated">로케이터 객체에 대한 자세한 내용은 로케이터 &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/locator.js&quot;&gt;(새 창에서 열림)&lt;/a&gt; 클래스 구현을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="deb734b9fdf0577f92e02b3f6a106a07db39eb48" translate="yes" xml:space="preserve">
          <source>For more options see &lt;a href=&quot;https://codecept.io/commands/#run&quot;&gt;full reference of &lt;code&gt;run&lt;/code&gt; command&lt;/a&gt;.</source>
          <target state="translated">자세한 옵션은 &lt;a href=&quot;https://codecept.io/commands/#run&quot;&gt; &lt;code&gt;run&lt;/code&gt; &lt;/a&gt; 명령의 전체 참조를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f3217ce17d04bee92d9b044f3f3a25cfe353e2b" translate="yes" xml:space="preserve">
          <source>For more options see &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie documentation (opens new window)&lt;/a&gt;.</source>
          <target state="translated">더 많은 옵션은 &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie 문서 (새 창에서 열림)를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ea39ae52a1e25abda1d96aa3ab23bece180f404" translate="yes" xml:space="preserve">
          <source>For more options see &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie documentation&lt;/a&gt;.</source>
          <target state="translated">자세한 옵션은 &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie documentation&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="13686c4d0313b5c054ebd045b99fcffea4dcc1ba" translate="yes" xml:space="preserve">
          <source>For most helpers basic actions like &lt;code&gt;amOnPage&lt;/code&gt;, &lt;code&gt;fillField&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt; are the same. Proceed to &lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;Acceptance Testing Chapter&lt;/a&gt; to learn how to use them.</source>
          <target state="translated">&lt;code&gt;amOnPage&lt;/code&gt; , &lt;code&gt;fillField&lt;/code&gt; 와 같은 대부분의 도우미 기본 동작의 경우 &lt;code&gt;click&lt;/code&gt; 은 동일합니다. &lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;승인 테스트 장&lt;/a&gt; 으로 진행하여 사용법을 익히십시오.</target>
        </trans-unit>
        <trans-unit id="14bfd75a8c3b3522c6e317ccc2c3be4ce2d99fb3" translate="yes" xml:space="preserve">
          <source>For specifying operation modifier key based on operating system it is suggested to use &lt;code&gt;'CommandOrControl'&lt;/code&gt;. This will press &lt;code&gt;'Command'&lt;/code&gt; (also known as &lt;code&gt;'Meta'&lt;/code&gt;) on macOS machines and &lt;code&gt;'Control'&lt;/code&gt; on non-macOS machines.</source>
          <target state="translated">운영 체제에 따라 오퍼레이션 수정 자 키를 지정하려면 &lt;code&gt;'CommandOrControl'&lt;/code&gt; 을 사용하는 것이 좋습니다 . macOS 컴퓨터에서는 &lt;code&gt;'Command'&lt;/code&gt; ( &lt;code&gt;'Meta'&lt;/code&gt; 라고도 함)를 누르고 macOS 가 아닌 컴퓨터에서는 &lt;code&gt;'Control'&lt;/code&gt; 을 누릅니다 .</target>
        </trans-unit>
        <trans-unit id="33ef078cd936b3f847a25ffdec45a6ad4a1a62b6" translate="yes" xml:space="preserve">
          <source>For this command configuration is required:</source>
          <target state="translated">이 명령 구성이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="af128e9f69f8002658b0f70da6643e57f90baa4b" translate="yes" xml:space="preserve">
          <source>For writing tests in TypeScript you'll need to install &lt;code&gt;typescript&lt;/code&gt; and &lt;code&gt;ts-node&lt;/code&gt; into your project.</source>
          <target state="translated">TypeScript로 테스트를 작성하려면 프로젝트에 &lt;code&gt;typescript&lt;/code&gt; 와 &lt;code&gt;ts-node&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="489c1dec14b65b5ffed2eacc5fede99dab9a4ccb" translate="yes" xml:space="preserve">
          <source>Force clicks an element without waiting for it to become visible and not animating.</source>
          <target state="translated">요소가 표시 될 때까지 기다리지 않고 애니메이션하지 않고 강제로 클릭합니다.</target>
        </trans-unit>
        <trans-unit id="1c75bfc80979b731937657a6fd8dcccbec9ffa87" translate="yes" xml:space="preserve">
          <source>Forces passthrough mode for mocking. Requires mocking to be started.</source>
          <target state="translated">조롱을 위해 통과 모드를 강제합니다. 시작하려면 조롱이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c3cf4ad47b7d0a3b3c73476a50f630c1e8c66bd3" translate="yes" xml:space="preserve">
          <source>Forces record mode for mocking. Requires mocking to be started.</source>
          <target state="translated">조롱을 위해 기록 모드를 강제합니다. 시작하려면 조롱이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a8d03a68493b3f574085f005c0779ab84ed76156" translate="yes" xml:space="preserve">
          <source>Forces replay mode for mocking. Requires mocking to be started.</source>
          <target state="translated">조롱을 위해 재생 모드를 강제 실행합니다. 시작하려면 조롱이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="44389f6a466eaabf5c1db729e369511134e2b03b" translate="yes" xml:space="preserve">
          <source>French</source>
          <target state="translated">French</target>
        </trans-unit>
        <trans-unit id="2984a0e891da59da4507fca8d54bbaeda013365e" translate="yes" xml:space="preserve">
          <source>Function passed into session can use &lt;code&gt;I&lt;/code&gt;, page objects, and any objects declared for the scenario. This function can also be declared as async (but doesn't work as generator).</source>
          <target state="translated">세션으로 전달 된 함수는 &lt;code&gt;I&lt;/code&gt; , 페이지 객체 및 시나리오에 대해 선언 된 객체를 사용할 수 있습니다 . 이 함수는 비동기로 선언 할 수도 있지만 생성기로 작동하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="bc4875ef2cb1775f1e67896520556072d52606c3" translate="yes" xml:space="preserve">
          <source>Functions passed into a session can use the &lt;code&gt;I&lt;/code&gt; object, page objects, and any other objects declared for the scenario. This function can also be declared as async (but doesn't work as generator).</source>
          <target state="translated">세션에 전달 된 함수는 &lt;code&gt;I&lt;/code&gt; 개체, 페이지 개체 및 시나리오에 대해 선언 된 기타 개체를 사용할 수 있습니다. 이 함수는 비동기로 선언 할 수도 있습니다 (생성기로 작동하지 않음).</target>
        </trans-unit>
        <trans-unit id="36f91bae0b6c6856c572f19edae1b78e43cd5825" translate="yes" xml:space="preserve">
          <source>Generate step definitions with:</source>
          <target state="translated">다음을 사용하여 단계 정의를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="593f4b38be3905d6a14e00f663fec1fa4f4f1fa8" translate="yes" xml:space="preserve">
          <source>Generated HTML code may often look like this:</source>
          <target state="translated">생성 된 HTML 코드는 다음과 같이 보일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7229e2630aff70bfd7e870ebbda3124d5015f508" translate="yes" xml:space="preserve">
          <source>Generates a new record using factory and saves API request to store it.</source>
          <target state="translated">팩토리를 사용하여 새 레코드를 생성하고 API 요청을 저장하여 저장합니다.</target>
        </trans-unit>
        <trans-unit id="af054506bba0d200d130a2c70944e0fb6aa5509a" translate="yes" xml:space="preserve">
          <source>Generates a new record using factory, sends a GraphQL mutation to store it.</source>
          <target state="translated">팩토리를 사용하여 새 레코드를 생성하고이를 저장하기 위해 GraphQL 변형을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="82ff7b50c2533e578a44c3d24c0b97cd1317f1f0" translate="yes" xml:space="preserve">
          <source>Generates bunch of records and saves multiple API requests to store them.</source>
          <target state="translated">많은 레코드를 생성하고 여러 API 요청을 저장하여 저장합니다.</target>
        </trans-unit>
        <trans-unit id="18ccafabb0ece90677f2ea146a324fb6df1aed4d" translate="yes" xml:space="preserve">
          <source>Generates bunch of records and sends multiple GraphQL mutation requests to store them.</source>
          <target state="translated">여러 레코드를 생성하고이를 저장하기 위해 여러 GraphQL 변형 요청을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="a6b7697e24faae761e10239176613da7b51e0e3f" translate="yes" xml:space="preserve">
          <source>Generates step by step report for a test. After each step in a test a screenshot is created. After test executed screenshots are combined into slideshow. By default, reports are generated only for failed tests.</source>
          <target state="translated">테스트에 대한 단계별 보고서를 생성합니다. 테스트의 각 단계 후에 스크린 샷이 생성됩니다. 테스트 실행 후 스크린 샷은 슬라이드 쇼로 결합됩니다. 기본적으로 보고서는 실패한 테스트에 대해서만 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="9b7adfc269789220b852ccfbc805210eb43ee08e" translate="yes" xml:space="preserve">
          <source>Generates url based on format sent (takes endpoint + url if latter lacks 'http')</source>
          <target state="translated">전송 된 형식을 기반으로 URL을 생성합니다 (후자가 'http'가없는 경우 엔드 포인트 + URL을 취함)</target>
        </trans-unit>
        <trans-unit id="a0febd6de35e4074c3b734d945dd69200d76014c" translate="yes" xml:space="preserve">
          <source>Generation types for PageObject looks like for a custom helper, but &lt;code&gt;steps.d.ts&lt;/code&gt; will look like:</source>
          <target state="translated">PageObject의 생성 유형은 사용자 지정 도우미와 비슷하지만 &lt;code&gt;steps.d.ts&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c6f5d3d86da4e5e4cacd257bce8f870f402b678a" translate="yes" xml:space="preserve">
          <source>Generator has created these files:</source>
          <target state="translated">Generator는 다음 파일을 생성했습니다.</target>
        </trans-unit>
        <trans-unit id="a3e705cc61a19f33d7c9c030f107a70569966485" translate="yes" xml:space="preserve">
          <source>Generators</source>
          <target state="translated">Generators</target>
        </trans-unit>
        <trans-unit id="aa9f57607114c33c325fd1c286aef372b1125d44" translate="yes" xml:space="preserve">
          <source>Get HAR</source>
          <target state="translated">HAR 받기</target>
        </trans-unit>
        <trans-unit id="fbae0a3892194ffa55d779df9f9303c967dd2613" translate="yes" xml:space="preserve">
          <source>Get JS log from browser.</source>
          <target state="translated">브라우저에서 JS 로그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0d70fe75213c76b633f85772565802a191b4fb9d" translate="yes" xml:space="preserve">
          <source>Get JS log from browser. Log buffer is reset after each request.</source>
          <target state="translated">브라우저에서 JS 로그를 가져옵니다. 각 요청 후에 로그 버퍼가 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="dc9b3d99e7500690eccc79b7b2f0a04855a8855b" translate="yes" xml:space="preserve">
          <source>Get JS log from browser. Log buffer is reset after each request. Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">브라우저에서 JS 로그를 가져옵니다. 각 요청 후에 로그 버퍼가 재설정됩니다. 테스트 실행을 재개하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자 &lt;strong&gt;와 함께 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b0423dbd0ced46bda055981a089f3f71630a2587" translate="yes" xml:space="preserve">
          <source>Get all Window Handles. Useful for referencing a specific handle when calling &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt;</source>
          <target state="translated">모든 창 핸들을 가져옵니다. &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt; 호출 할 때 특정 핸들을 참조하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="263ae484fdfc6e514b3e6504d716234e1e9bbb72" translate="yes" xml:space="preserve">
          <source>Get all the currently specified settings.</source>
          <target state="translated">현재 지정된 모든 설정을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="32ca908ea4ba7a926ccf306a449d440778cbba13" translate="yes" xml:space="preserve">
          <source>Get current URL from browser. Resumes test execution, so should be used inside an async function.</source>
          <target state="translated">브라우저에서 현재 URL을 가져옵니다. 테스트 실행을 재개하므로 비동기 함수 내에서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="56a4fc699026b559df41a30f50a634472e603cab" translate="yes" xml:space="preserve">
          <source>Get current device activity.</source>
          <target state="translated">현재 장치 활동을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="24c9a5c4f762da2eca0e273e85f953d6a5e0104c" translate="yes" xml:space="preserve">
          <source>Get current orientation.</source>
          <target state="translated">현재 방향을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ccb9aeecc2a5dda11d7655107d362101eb689400" translate="yes" xml:space="preserve">
          <source>Get element at position:</source>
          <target state="translated">위치에 요소를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="5e107fe0fb32c2cb29d532532680f1566e7555ac" translate="yes" xml:space="preserve">
          <source>Get elements by different locator types, including strict locator Should be used in custom helpers:</source>
          <target state="translated">엄격한 로케이터를 포함하여 다른 로케이터 유형별로 요소 가져 오기 사용자 정의 도우미에서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="07dd10907331c511671e6ec7bac84553fce11509" translate="yes" xml:space="preserve">
          <source>Get elements by different locator types, including strict locator. Should be used in custom helpers:</source>
          <target state="translated">엄격한 로케이터를 포함하여 다양한 로케이터 유형별로 요소를 가져옵니다. 사용자 지정 도우미에서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="13772096ac6b28b07014422576d49fdfe756afe8" translate="yes" xml:space="preserve">
          <source>Get first element:</source>
          <target state="translated">첫 번째 요소를 얻으십시오 :</target>
        </trans-unit>
        <trans-unit id="312972ba5d34219ffdb4b5257dbebde263c6ae63" translate="yes" xml:space="preserve">
          <source>Get information about the current network connection (Data/WIFI/Airplane). The actual server value will be a number. However WebdriverIO additional properties to the response object to allow easier assertions.</source>
          <target state="translated">현재 네트워크 연결에 대한 정보를 얻습니다 (데이터 / WIFI / 비행기). 실제 서버 값은 숫자입니다. 그러나 WebdriverIO는 응답 개체에 대한 추가 속성을 사용하여보다 쉬운 어설 션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="dc2f4dd2ab9ee110ed0e95b2bfa2cc298cfcf5b2" translate="yes" xml:space="preserve">
          <source>Get last element:</source>
          <target state="translated">마지막 요소를 얻는다 :</target>
        </trans-unit>
        <trans-unit id="728e8c67234c2bfd04a4d419985bce1caee3ee4b" translate="yes" xml:space="preserve">
          <source>Get list of all available contexts</source>
          <target state="translated">사용 가능한 모든 컨텍스트 목록 가져 오기</target>
        </trans-unit>
        <trans-unit id="8a32bb3ab8e153795d82addf0fda7bde26394d65" translate="yes" xml:space="preserve">
          <source>Get the current Window Handle. Useful for referencing it when calling &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt;</source>
          <target state="translated">현재 창 핸들을 가져옵니다. &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt; 호출 할 때 참조하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="310469acda71df67a30aee4316ee21d8f8960525" translate="yes" xml:space="preserve">
          <source>Get the window handle relative to the current handle. i.e. the next handle or the previous.</source>
          <target state="translated">현재 핸들을 기준으로 창 핸들을 가져옵니다. 즉, 다음 핸들 또는 이전 핸들.</target>
        </trans-unit>
        <trans-unit id="f5cd8ab2f3a480f3619cee2de59ae0983434dc07" translate="yes" xml:space="preserve">
          <source>Gets a cookie object by name Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">이름으로 쿠키 개체를 가져옵니다. 테스트 실행을 다시 시작하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자 &lt;strong&gt;와 함께 비동기 내부에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="294daae094f72556e68569bf31a00ac80f57db2b" translate="yes" xml:space="preserve">
          <source>Gets a cookie object by name. If none provided gets all cookies. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">이름으로 쿠키 개체를 가져옵니다. 제공된 것이 없으면 모든 쿠키를 가져옵니다. 테스트 실행을 재개하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자 &lt;strong&gt;와 함께 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="2a4de89c12c9b3cabbe29ee4da5ed134a3347920" translate="yes" xml:space="preserve">
          <source>Gets page URL including hash.</source>
          <target state="translated">해시를 포함한 페이지 URL을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="780483cc1f6d59df26ad28d7d8c2a351a2ebfc46" translate="yes" xml:space="preserve">
          <source>Gherkin</source>
          <target state="translated">Gherkin</target>
        </trans-unit>
        <trans-unit id="122c45f15f3f6e4c27c3028aa0337823dab75320" translate="yes" xml:space="preserve">
          <source>Gherkin scenarios and features can contain tags marked with &lt;code&gt;@&lt;/code&gt;. Tags are appended to feature titles so you can easily filter by them when running tests:</source>
          <target state="translated">작은 오이 시나리오 및 기능에는 &lt;code&gt;@&lt;/code&gt; 로 표시된 태그가 포함될 수 있습니다 . 기능 제목에 태그가 추가되어 테스트를 실행할 때 태그별로 쉽게 필터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="39540900bbfc1f3ea7b080c0579b9c08789f8f23" translate="yes" xml:space="preserve">
          <source>GitHub Actions</source>
          <target state="translated">GitHub 작업</target>
        </trans-unit>
        <trans-unit id="5f1184f7df96c5928092ad9c6b550699bf887826" translate="yes" xml:space="preserve">
          <source>Global</source>
          <target state="translated">Global</target>
        </trans-unit>
        <trans-unit id="2d2eb66f5561d0d2951297af23e853620e59cf26" translate="yes" xml:space="preserve">
          <source>Goes back on Android</source>
          <target state="translated">Android로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="147da4a41efc8547482bcb0d17b837143324bfe4" translate="yes" xml:space="preserve">
          <source>Grab CSS property for given locator Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">지정된 로케이터에 대한 CSS 속성 가져 오기 테스트 실행을 재개하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자를 &lt;strong&gt;사용하여 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="569ea6e163c7c663e94c38d54972cbd7c8e83993" translate="yes" xml:space="preserve">
          <source>Grab CSS property for given locator Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator. If more than one element is found - value of first element is returned.</source>
          <target state="translated">주어진 로케이터에 대한 CSS 속성 가져 오기 테스트 실행을 다시 시작하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자가 &lt;strong&gt;있는 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; . 둘 이상의 요소가 발견되면 첫 번째 요소의 값이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="bf071012ab8b3e5047c72ed0588c105614812a55" translate="yes" xml:space="preserve">
          <source>Grab array of CSS properties for given locator Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">주어진 로케이터에 대한 CSS 속성 배열 가져 오기 테스트 실행을 다시 시작하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자가 &lt;strong&gt;있는 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="98fade46b9cd9891cac24cde7991f7166995522f" translate="yes" xml:space="preserve">
          <source>Grab number of open tabs</source>
          <target state="translated">열린 탭 수 확보</target>
        </trans-unit>
        <trans-unit id="098ca30bbb62960788b3df1e01b0401fee86198e" translate="yes" xml:space="preserve">
          <source>Grab number of open tabs. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">열린 탭의 수를 잡아라. 테스트 실행을 재개하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자 &lt;strong&gt;와 함께 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="853c50c13105606a1eb2c4ea622bbce89a66399c" translate="yes" xml:space="preserve">
          <source>Grab number of visible elements by locator</source>
          <target state="translated">로케이터별로 보이는 요소 수 확보</target>
        </trans-unit>
        <trans-unit id="8fb7597a0905cb5ef0b08a951bcfea530490ed43" translate="yes" xml:space="preserve">
          <source>Grab number of visible elements by locator. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">로케이터로 보이는 요소의 수를 파악합니다. 테스트 실행을 재개하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자 &lt;strong&gt;와 함께 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="f81c38a4b6f614a5add0eddd7ddcb65bf71ae041" translate="yes" xml:space="preserve">
          <source>Grab the data from performance timing using Navigation Timing API. The returned data will contain following things in ms:</source>
          <target state="translated">Navigation Timing API를 사용하여 성능 타이밍에서 데이터를 가져옵니다. 반환 된 데이터는 ms 단위로 다음 항목을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="5564d88d718e3585e9c40d1566da24bd79a31347" translate="yes" xml:space="preserve">
          <source>Grab the text within the popup. If no popup is visible then it will return null</source>
          <target state="translated">팝업 내에서 텍스트를 가져옵니다. 팝업이 보이지 않으면 null을 반환합니다</target>
        </trans-unit>
        <trans-unit id="0686306b7a9cb090976a8042a8a9982a656937cd" translate="yes" xml:space="preserve">
          <source>Grab the text within the popup. If no popup is visible then it will return null.</source>
          <target state="translated">팝업 내에서 텍스트를 잡습니다. 팝업이 표시되지 않으면 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4fc05a8f5c0fca425eb08c5551e98d179cf2916c" translate="yes" xml:space="preserve">
          <source>Grab the width, height, location of given locator. Provide &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;as second param to get your desired prop. Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">주어진 로케이터의 너비, 높이, 위치를 잡습니다. 원하는 소품을 얻기 위해 두 번째 매개 변수로 &lt;code&gt;width&lt;/code&gt; 또는 &lt;code&gt;height&lt;/code&gt; 를 제공합니다 . 테스트 실행을 재개하므로 &lt;strong&gt; &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt; 연산자가 &lt;strong&gt;있는 비동기 함수 내에서 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="ecccd585cb761ae8c732001b1132af2ef2b279e9" translate="yes" xml:space="preserve">
          <source>Grabbers</source>
          <target state="translated">Grabbers</target>
        </trans-unit>
        <trans-unit id="007d158de9956ed41ebee1bab15f7d58d7c58919" translate="yes" xml:space="preserve">
          <source>Grabbing</source>
          <target state="translated">Grabbing</target>
        </trans-unit>
        <trans-unit id="e4eb1ab683c392399fa825b2dea3b7e5f8189912" translate="yes" xml:space="preserve">
          <source>GraphQL</source>
          <target state="translated">GraphQL</target>
        </trans-unit>
        <trans-unit id="e67d1019fea93d08f2efbdd245c30b2764d43cb5" translate="yes" xml:space="preserve">
          <source>GraphQL Data Factory</source>
          <target state="translated">GraphQL 데이터 팩토리</target>
        </trans-unit>
        <trans-unit id="f78d7af785d2be3618edf6a32e464558c87c72aa" translate="yes" xml:space="preserve">
          <source>GraphQL endpoint which allows to perform create / delete requests and</source>
          <target state="translated">생성 / 삭제 요청을 수행 할 수있는 GraphQL 엔드 포인트 및</target>
        </trans-unit>
        <trans-unit id="b89f40e49a9965c9baf8fc13667642910c91fe76" translate="yes" xml:space="preserve">
          <source>GraphQL helper allows to send additional requests to a GraphQl endpoint during acceptance tests. &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios (opens new window)&lt;/a&gt; library is used to perform requests.</source>
          <target state="translated">GraphQL 도우미는 수락 테스트 중에 GraphQl 엔드 포인트에 추가 요청을 보낼 수 있습니다. &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios (새 창 열기)&lt;/a&gt; 라이브러리는 요청을 수행하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="de21dce02dd13eb82d7da4c10b7933db30258ce5" translate="yes" xml:space="preserve">
          <source>GraphQL helper provides two basic methods to queries and mutations to application:</source>
          <target state="translated">GraphQL 도우미는 응용 프로그램에 대한 쿼리 및 변형에 대한 두 가지 기본 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3ecc3cc60c679bcc230ca59b2d0766d184eb4d75" translate="yes" xml:space="preserve">
          <source>GraphQLDataFactory</source>
          <target state="translated">GraphQLDataFactory</target>
        </trans-unit>
        <trans-unit id="f4cf195da3eca190eecf4e116ffceee2b14d978c" translate="yes" xml:space="preserve">
          <source>GraphQLDataFactory has following config options:</source>
          <target state="translated">GraphQLDataFactory에는 다음 구성 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="de40190ee89a9dd83f74ffd900d59fda1d730a6e" translate="yes" xml:space="preserve">
          <source>Grep and multiple browsers are supported. Passing more than one browser will multiply the amount of suites by the amount of browsers passed. The following example will lead to four parallel runs.</source>
          <target state="translated">Grep 및 여러 브라우저가 지원됩니다. 둘 이상의 브라우저를 전달하면 스위트 수와 전달 된 브라우저 수가 곱해집니다. 다음 예제는 4 개의 병렬 실행으로 이어집니다.</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="488be2e36926b40eb75c19cf48f718fc7ccaee62" translate="yes" xml:space="preserve">
          <source>Handles a file download.Aa file name is required to save the file on disk. Files are saved to &quot;output&quot; directory.</source>
          <target state="translated">파일 다운로드를 처리합니다. 디스크에 파일을 저장하려면 파일 이름이 필요합니다. 파일은 &quot;출력&quot;디렉토리에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="709c9a1e18ba0f46c20cd1531ff2329aeb574fd1" translate="yes" xml:space="preserve">
          <source>Headless Chrome</source>
          <target state="translated">헤드리스 크롬</target>
        </trans-unit>
        <trans-unit id="2ce5a2d06273b54d8b6a91e9556184426c0726c1" translate="yes" xml:space="preserve">
          <source>Headless Chrome (WebDriverIO)</source>
          <target state="translated">헤드리스 크롬 (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="658ed1057281c05c82b085fa8d64a8519095c1e7" translate="yes" xml:space="preserve">
          <source>Headless Mode</source>
          <target state="translated">헤드리스 모드</target>
        </trans-unit>
        <trans-unit id="71d9151f633fa0fbe4441837456566b1bdf36e32" translate="yes" xml:space="preserve">
          <source>Helper Examples</source>
          <target state="translated">도우미 예</target>
        </trans-unit>
        <trans-unit id="d2f28583666ff17b9cf2cf1468644ede091cd884" translate="yes" xml:space="preserve">
          <source>Helper configuration</source>
          <target state="translated">도우미 구성</target>
        </trans-unit>
        <trans-unit id="7279003985e86b0bb5a1785325cf20e2457015e5" translate="yes" xml:space="preserve">
          <source>Helper configuration (Appium)</source>
          <target state="translated">도우미 구성 (Appium)</target>
        </trans-unit>
        <trans-unit id="541ed8224283d9f132568c56b0724eea3914f4f0" translate="yes" xml:space="preserve">
          <source>Helper for managing remote data using GraphQL queries. Uses data generators like &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie (opens new window)&lt;/a&gt; or factory girl to create new record.</source>
          <target state="translated">GraphQL 쿼리를 사용하여 원격 데이터를 관리하기위한 도우미입니다. &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie (새 창에서 열림)&lt;/a&gt; 또는 factory girl 과 같은 데이터 생성기 를 사용하여 새 레코드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6a686de98f9859ce9b53a0dac1c42e05a96b6d94" translate="yes" xml:space="preserve">
          <source>Helper for managing remote data using REST API. Uses data generators like &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie (opens new window)&lt;/a&gt; or factory girl to create new record.</source>
          <target state="translated">REST API를 사용하여 원격 데이터를 관리하기위한 도우미입니다. &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie (새 창에서 열림)&lt;/a&gt; 또는 factory girl 과 같은 데이터 생성기 를 사용하여 새 레코드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ac0abe42092225807406a8cad179435c4d33b65a" translate="yes" xml:space="preserve">
          <source>Helper for managing remote data using REST API. Uses data generators like &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie&lt;/a&gt; or factory girl to create new record.</source>
          <target state="translated">REST API를 사용하여 원격 데이터를 관리하기위한 도우미 &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie&lt;/a&gt; 또는 factory girl 과 같은 데이터 생성기 를 사용하여 새 레코드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8bbdf83ef89c0a928b736bc2aa503ec161864859" translate="yes" xml:space="preserve">
          <source>Helper for testing filesystem. Can be easily used to check file structures:</source>
          <target state="translated">파일 시스템 테스트를위한 도우미 파일 구조를 확인하는 데 쉽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc920b186ac5653b91cc3260cc12f018110a459f" translate="yes" xml:space="preserve">
          <source>Helper is the core concept of CodeceptJS. Helper is a wrapper on top of various libraries providing unified interface around them. When &lt;code&gt;I&lt;/code&gt; object is used in tests it delegates execution of its functions to currently enabled helper classes.</source>
          <target state="translated">Helper는 CodeceptJS의 핵심 개념입니다. Helper는 다양한 라이브러리 위에 통합 된 인터페이스를 제공하는 래퍼입니다. &lt;code&gt;I&lt;/code&gt; object가 테스트에서 사용 되면 현재 활성화 된 도우미 클래스에 함수 실행을 위임합니다.</target>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="c80c93b0e2a50d315b88bcd6583b1b5e3793672a" translate="yes" xml:space="preserve">
          <source>Helpers are ES6 classes inherited from &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/helper.js&quot;&gt;corresponding abstract class&lt;/a&gt;. Generated Helper will be added to &lt;code&gt;codecept.json&lt;/code&gt; config. It should look like this:</source>
          <target state="translated">헬퍼는 &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/helper.js&quot;&gt;해당 추상 클래스&lt;/a&gt; 에서 상속 된 ES6 클래스 입니다. 생성 된 헬퍼가 &lt;code&gt;codecept.json&lt;/code&gt; 구성에 추가됩니다 . 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="a61e8319e092d9c8b797c71b8ba35981d0acd98b" translate="yes" xml:space="preserve">
          <source>Helpers are classes inherited from &lt;a href=&quot;https://github.com/codeceptjs/helper&quot;&gt;corresponding abstract class (opens new window)&lt;/a&gt;. Created helper file should look like this:</source>
          <target state="translated">헬퍼는 &lt;a href=&quot;https://github.com/codeceptjs/helper&quot;&gt;해당 추상 클래스&lt;/a&gt; 에서 상속 된 클래스입니다 (새 창에서 열림) . 생성 된 도우미 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3276d3d2f09c22636873a47e7ac6232e15904105" translate="yes" xml:space="preserve">
          <source>Helpers can also be installed as Node packages and required by corresponding Node modules</source>
          <target state="translated">헬퍼는 노드 패키지로 설치 될 수 있으며 해당 노드 모듈에 필요</target>
        </trans-unit>
        <trans-unit id="368abdbe7cbdc2e1f098b3f7729fb5010bd24904" translate="yes" xml:space="preserve">
          <source>Helpers can be created by running a generator command:</source>
          <target state="translated">생성기 명령을 실행하여 도우미를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78fbd74f27ebfe2ab2de1852d2cedc9eefdd8d31" translate="yes" xml:space="preserve">
          <source>Helpers can be reconfigured per scenario or per feature. This might be useful when some tests should be executed with different settings than others. In order to reconfigure tests use &lt;code&gt;.config()&lt;/code&gt; method of &lt;code&gt;Scenario&lt;/code&gt; or &lt;code&gt;Feature&lt;/code&gt;.</source>
          <target state="translated">시나리오 또는 기능별로 도우미를 재구성 할 수 있습니다. 이는 일부 테스트가 다른 테스트와 다른 설정으로 실행되어야 할 때 유용 할 수 있습니다. 테스트를 재구성하려면 &lt;code&gt;Scenario&lt;/code&gt; 또는 &lt;code&gt;Feature&lt;/code&gt; 의 &lt;code&gt;.config()&lt;/code&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="407255e05795b7b6f59cefff9ff1f59db1ce939d" translate="yes" xml:space="preserve">
          <source>Helpers is a core concept of CodeceptJS. Helper is a wrapper around various libraries providing unified interface around them. Methods of Helper class will be available in tests in &lt;code&gt;I&lt;/code&gt; object. This abstracts test scenarios from the implementation and allows easy switching between backends. Functionality of CodeceptJS should be extended by writing a custom helpers.</source>
          <target state="translated">헬퍼는 CodeceptJS의 핵심 개념입니다. 도우미는 다양한 라이브러리를 둘러싼 통합 된 인터페이스를 제공하는 래퍼입니다. 도우미 클래스의 메소드는 &lt;code&gt;I&lt;/code&gt; 객체의 테스트에서 사용할 수 있습니다 . 이를 통해 구현에서 테스트 시나리오를 추상화하고 백엔드간에 쉽게 전환 할 수 있습니다. CodeceptJS의 기능은 사용자 정의 헬퍼를 작성하여 확장해야합니다.</target>
        </trans-unit>
        <trans-unit id="eb0976bba6fafe8579360a255f9b1ab296e96d36" translate="yes" xml:space="preserve">
          <source>Helpers may contain several hooks you can use to handle events of a test. Implement corresponding methods to them.</source>
          <target state="translated">도우미에는 테스트 이벤트를 처리하는 데 사용할 수있는 몇 가지 후크가 포함될 수 있습니다. 그들에게 해당하는 방법을 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="0a2629fbb730d25ff3de3cc4978a560cc71c8865" translate="yes" xml:space="preserve">
          <source>Helpers should be enabled inside &lt;code&gt;codecept.json&lt;/code&gt; or &lt;code&gt;codecept.conf.js&lt;/code&gt; files. Command &lt;code&gt;generate helper&lt;/code&gt; does that for you, however you can enable them manually by placing helper to &lt;code&gt;helpers&lt;/code&gt; section inside config file. You can also pass additional config options to your helper from a config - &lt;strong&gt;(please note, this example contains comments, while JSON format doesn't support them)&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;codecept.json&lt;/code&gt; 또는 &lt;code&gt;codecept.conf.js&lt;/code&gt; 파일 내에서 도우미를 활성화해야 합니다. Command &lt;code&gt;generate helper&lt;/code&gt; 가이를 수행하지만, helper to &lt;code&gt;helpers&lt;/code&gt; 섹션을 구성 파일 내에 배치하여 수동으로 사용할 수 있습니다 . 구성에서 도우미에 추가 구성 옵션을 전달할 수도 있습니다. &lt;strong&gt;(이 예제에는 주석이 포함되어 있지만 JSON 형식에서는 지원하지 않습니다&lt;/strong&gt; .)</target>
        </trans-unit>
        <trans-unit id="65b4ceb84defbcf10cb47e260c2ea257896ed6c4" translate="yes" xml:space="preserve">
          <source>Helpers: ApiDataFactory</source>
          <target state="translated">도우미 : ApiDataFactory</target>
        </trans-unit>
        <trans-unit id="f8ad0afae628b3d1d76a631b602353fc318f3095" translate="yes" xml:space="preserve">
          <source>Helpers: Appium</source>
          <target state="translated">도우미 : Appium</target>
        </trans-unit>
        <trans-unit id="c88e375960d4dfdf181c516b8b2380b87a47eb91" translate="yes" xml:space="preserve">
          <source>Helpers: FileSystem</source>
          <target state="translated">헬퍼 : FileSystem</target>
        </trans-unit>
        <trans-unit id="b9e9633721ea59d0ffe5bef7c2f43a54c837a916" translate="yes" xml:space="preserve">
          <source>Helpers: Nightmare</source>
          <target state="translated">도우미 : 악몽</target>
        </trans-unit>
        <trans-unit id="6c7f72bb5e3ee82b858bf4025369bde74ecc9096" translate="yes" xml:space="preserve">
          <source>Helpers: Protractor</source>
          <target state="translated">도우미 : 각도기</target>
        </trans-unit>
        <trans-unit id="a3476d42f92e32ec100208db221afa1f56b4d3c7" translate="yes" xml:space="preserve">
          <source>Helpers: Puppeteer</source>
          <target state="translated">도우미 : 인형극</target>
        </trans-unit>
        <trans-unit id="9fe787dfa9f01fac040b17d670d953ab8d4e6f9c" translate="yes" xml:space="preserve">
          <source>Helpers: REST</source>
          <target state="translated">도우미 : REST</target>
        </trans-unit>
        <trans-unit id="eb31b8d45c1db8f82f2812c438f92d535826870b" translate="yes" xml:space="preserve">
          <source>Helpers: WebDriverIO</source>
          <target state="translated">헬퍼 : WebDriverIO</target>
        </trans-unit>
        <trans-unit id="6128f1eb4dd976e365185b368247d27089d9f317" translate="yes" xml:space="preserve">
          <source>Here is a recommended strategy what to store where:</source>
          <target state="translated">다음은 어디에 저장할지 권장되는 전략입니다.</target>
        </trans-unit>
        <trans-unit id="d6d832200fd64e3fd55eb7e7c030ed94d0c9c6b9" translate="yes" xml:space="preserve">
          <source>Here is a sample BrowserStack config for running tests on iOS mobile browser:</source>
          <target state="translated">다음은 iOS 모바일 브라우저에서 테스트를 실행하기위한 BrowserStack 구성 샘플입니다.</target>
        </trans-unit>
        <trans-unit id="cb0c075a60c4e8a2645b3984e4380d3c1f222aed" translate="yes" xml:space="preserve">
          <source>Here is a test checking basic &lt;a href=&quot;http://todomvc.com/&quot;&gt;todo application (opens new window)&lt;/a&gt;.</source>
          <target state="translated">다음은 기본 &lt;a href=&quot;http://todomvc.com/&quot;&gt;할일 애플리케이션을&lt;/a&gt; 검사하는 테스트입니다 (새 창에서 열림) .</target>
        </trans-unit>
        <trans-unit id="da9291cb119f102218681b72119ede84a1e93115" translate="yes" xml:space="preserve">
          <source>Here is a usage example:</source>
          <target state="translated">사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3abe830fc4e7bb387970e428e804c3eb2c2f7d06" translate="yes" xml:space="preserve">
          <source>Here is an example of declaring page object as a class:</source>
          <target state="translated">다음은 페이지 개체를 클래스로 선언하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="b9583d3b520854dfa531b3a2f9a902b345e11c07" translate="yes" xml:space="preserve">
          <source>Here is an overview of available options with their defaults:</source>
          <target state="translated">다음은 기본값으로 사용 가능한 옵션에 대한 개요입니다.</target>
        </trans-unit>
        <trans-unit id="b2eeac2f1e55adb5ec0da4da8778e57f4100e2ff" translate="yes" xml:space="preserve">
          <source>Here is the &lt;a href=&quot;http://webdriver.io/guide/usage/multiremote&quot;&gt;webdriverio docs (opens new window)&lt;/a&gt; on the subject</source>
          <target state="translated">주제에 대한 &lt;a href=&quot;http://webdriver.io/guide/usage/multiremote&quot;&gt;webdriverio 문서 (새 창에서 열림)&lt;/a&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="834e91adf2e5cce204c72e4897eace3a82b5a1f7" translate="yes" xml:space="preserve">
          <source>Here is the &lt;a href=&quot;http://webdriver.io/guide/usage/multiremote.html&quot;&gt;webdriverio docs&lt;/a&gt; on the subject</source>
          <target state="translated">여기 주제에 관한 &lt;a href=&quot;http://webdriver.io/guide/usage/multiremote.html&quot;&gt;webdriverio 문서&lt;/a&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="100db436fc0e183226731ebbe4a6a3864730ff65" translate="yes" xml:space="preserve">
          <source>Here is the diagram of CodeceptJS architecture</source>
          <target state="translated">다음은 CodeceptJS 아키텍처 다이어그램입니다</target>
        </trans-unit>
        <trans-unit id="bfa3c6fc3136b97d2e6cd59cdd0d83d6e9e3fb06" translate="yes" xml:space="preserve">
          <source>Here is the full list of &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;capabilities (opens new window)&lt;/a&gt;.</source>
          <target state="translated">다음은 전체 &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;기능&lt;/a&gt; 목록입니다 (새 창에서 열림) .</target>
        </trans-unit>
        <trans-unit id="8a90586bce4d589b8115742a29b57d8f56008230" translate="yes" xml:space="preserve">
          <source>Here is the full list of &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;capabilities&lt;/a&gt;.</source>
          <target state="translated">다음은 전체 &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;기능&lt;/a&gt; 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="7af35d3401be48c15b82a6a16bb6006d5f9aed7d" translate="yes" xml:space="preserve">
          <source>Here is the list of helpers created by our community. Please &lt;strong&gt;add your own&lt;/strong&gt; by editing this page.</source>
          <target state="translated">다음은 커뮤니티에서 만든 도우미 목록입니다. 제발 &lt;strong&gt;자신을 추가&lt;/strong&gt; 이 페이지를 편집하여.</target>
        </trans-unit>
        <trans-unit id="ab818eb857f1d76575e858d9ddbda95e82489a9d" translate="yes" xml:space="preserve">
          <source>Here we also use word &lt;strong&gt;And&lt;/strong&gt; to extend the Given and not to repeat it in each line.</source>
          <target state="translated">또한 &lt;strong&gt;And&lt;/strong&gt; 라는 단어 를 사용하여 Given을 확장하고 각 줄에서 반복하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="254c6239374c28d4b24f64d04a9391be95cb7954" translate="yes" xml:space="preserve">
          <source>Hide the keyboard.</source>
          <target state="translated">키보드를 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="3dbe9e30bdcea5d90ac4cde6c40e9d6023cf238f" translate="yes" xml:space="preserve">
          <source>Hook Usage Examples</source>
          <target state="translated">후크 사용 예</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="c7347716015d16f5447564a95b6f52b6d57f8da0" translate="yes" xml:space="preserve">
          <source>Hooks are JavaScript files same as for bootstrap and teardown, which can be registered inside &lt;code&gt;hooks&lt;/code&gt; section of config. Unlike &lt;code&gt;bootstrap&lt;/code&gt; you can have multiple hooks registered:</source>
          <target state="translated">후크는 부트 스트랩 및 분리와 동일한 JavaScript 파일 이며 구성의 &lt;code&gt;hooks&lt;/code&gt; 섹션 내에 등록 할 수 있습니다 . &lt;code&gt;bootstrap&lt;/code&gt; 과 달리 여러 후크를 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3254132bcaed58d05c41bc76b9b73ad210df7fe2" translate="yes" xml:space="preserve">
          <source>Hooks are available when using the &lt;code&gt;run-multiple&lt;/code&gt; command to perform actions before the test suites start and after the test suites have finished. See &lt;a href=&quot;https://codecept.io/hooks/#bootstrap-teardown&quot;&gt;Hooks&lt;/a&gt; for an example.</source>
          <target state="translated">&lt;code&gt;run-multiple&lt;/code&gt; 명령을 사용하여 테스트 스위트가 시작되기 전과 테스트 스위트가 완료된 후 조치를 수행 할 때 후크를 사용할 수 있습니다 . 예를 보려면 &lt;a href=&quot;https://codecept.io/hooks/#bootstrap-teardown&quot;&gt;후크&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="097963f2766d084e229481c18d3c9686d836e3eb" translate="yes" xml:space="preserve">
          <source>How Fast Is Nightmare JS?</source>
          <target state="translated">악몽 JS는 얼마나 빠릅니까?</target>
        </trans-unit>
        <trans-unit id="8cecc82d72d68f9151cb0901cfe40eeac15bfca6" translate="yes" xml:space="preserve">
          <source>How It Works</source>
          <target state="translated">작동 원리</target>
        </trans-unit>
        <trans-unit id="3f53c8a20919264f2e8e88ce83decf2d0e660bc7" translate="yes" xml:space="preserve">
          <source>How does your client, manager, or tester, or any other non-technical person, know your web application is working? By opening the browser, accessing a site, clicking on links, filling in the forms, and actually seeing the content on a web page.</source>
          <target state="translated">고객, 관리자 또는 테스터 또는 기타 기술이 아닌 사람이 웹 응용 프로그램이 작동하고 있음을 어떻게 알 수 있습니까? 브라우저를 열고, 사이트에 액세스하고, 링크를 클릭하고, 양식을 작성하고, 실제로 웹 페이지에서 컨텐츠를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="962248bc7070fb23a6587dc08ad315cf7351e512" translate="yes" xml:space="preserve">
          <source>How to Use</source>
          <target state="translated">사용하는 방법</target>
        </trans-unit>
        <trans-unit id="8e6fd2e40ad6f8474437ee1a506398b47dfb6802" translate="yes" xml:space="preserve">
          <source>How to try it?</source>
          <target state="translated">그것을 시도하는 방법?</target>
        </trans-unit>
        <trans-unit id="b6b349e5d7bafd6ccdc8339c02c044c05401defd" translate="yes" xml:space="preserve">
          <source>How to write tests?</source>
          <target state="translated">테스트를 작성하는 방법?</target>
        </trans-unit>
        <trans-unit id="507edb102684aac1273345d49d787c7218828297" translate="yes" xml:space="preserve">
          <source>However this behavior can be configured with following options:</source>
          <target state="translated">그러나이 동작은 다음 옵션으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b52b3d24ed78d9ef6bf7050db35915199cc72f0" translate="yes" xml:space="preserve">
          <source>However, behind the scene &lt;strong&gt;all actions are wrapped in promises&lt;/strong&gt; inside the &lt;code&gt;I&lt;/code&gt; object. &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;Global promise&lt;/a&gt; chain is initialized before each test and all &lt;code&gt;I.*&lt;/code&gt; calls will be appended to it as well as setup and teardown.</source>
          <target state="translated">그러나 뒤에서 &lt;strong&gt;모든 작업은 &lt;/strong&gt; &lt;code&gt;I&lt;/code&gt; 객체 내부의 &lt;strong&gt;약속에 싸여&lt;/strong&gt; 있습니다. &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;글로벌 약속&lt;/a&gt; 체인은 각 테스트 전에 초기화되며 모든 &lt;code&gt;I.*&lt;/code&gt; 통화가 추가되고 설정 및 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="2389e3f82cd27c845828f772ae1b10e7f61cca45" translate="yes" xml:space="preserve">
          <source>However, behind the scenes &lt;strong&gt;all actions are wrapped in promises&lt;/strong&gt;, inside of the &lt;code&gt;I&lt;/code&gt; object. &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;Global promise (opens new window)&lt;/a&gt; chain is initialized before each test and all &lt;code&gt;I.*&lt;/code&gt; calls will be appended to it, as well as setup and teardown.</source>
          <target state="translated">그러나 배후에서 &lt;strong&gt;모든 작업은 &lt;/strong&gt; &lt;code&gt;I&lt;/code&gt; 객체 내부의 &lt;strong&gt;promise로 래핑됩니다&lt;/strong&gt; . &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;전역 약속 (새 창&lt;/a&gt; 열기 ) 체인은 각 테스트 전에 초기화되고 모든 &lt;code&gt;I.*&lt;/code&gt; 호출이 여기에 추가되고 설정 및 해체가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="9a3309ec6c720ff72177df7ff022adca9ed32eea" translate="yes" xml:space="preserve">
          <source>However, if you can't update the code you can go to the second option. In this case, you should bind your locators to visible text on page and available semantic attribues. For instance, instead of using generated locator as this one:</source>
          <target state="translated">그러나 코드를 업데이트 할 수없는 경우 두 번째 옵션으로 이동할 수 있습니다. 이 경우 로케이터를 페이지에 표시되는 텍스트와 사용 가능한 의미 속성에 바인딩해야합니다. 예를 들어 생성 된 로케이터를 다음과 같이 사용하는 대신 :</target>
        </trans-unit>
        <trans-unit id="9a53891285aeacfad664d315ada5599176048dee" translate="yes" xml:space="preserve">
          <source>However, it's recommended to not overengineer and keep tests simple. If a test code doesn't require reusage at this point it should not be transformed to use page objects.</source>
          <target state="translated">그러나 과도하게 엔지니어링하지 않고 테스트를 단순하게 유지하는 것이 좋습니다. 이 시점에서 테스트 코드를 재사용 할 필요가 없다면 페이지 개체를 사용하도록 변환해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="de408dbba0dc1732582a4f54a11c5d5db938daa9" translate="yes" xml:space="preserve">
          <source>However, you can't access uninitialized data from a container, so to start, you need to initialized data first. Inside &lt;code&gt;bootstrap&lt;/code&gt; function of the config we execute the &lt;code&gt;share&lt;/code&gt; function with &lt;code&gt;local: true&lt;/code&gt; to initialize value locally:</source>
          <target state="translated">그러나 컨테이너에서 초기화되지 않은 데이터에 액세스 할 수 없으므로 시작하려면 먼저 데이터를 초기화해야합니다. 구성의 &lt;code&gt;bootstrap&lt;/code&gt; 함수 내 에서 &lt;code&gt;local: true&lt;/code&gt; 로 &lt;code&gt;share&lt;/code&gt; 함수를 실행하여 값을 로컬로 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="e4d5ebe01dfadab7c70f17122ef7cd34dd84d2c8" translate="yes" xml:space="preserve">
          <source>Html</source>
          <target state="translated">Html</target>
        </trans-unit>
        <trans-unit id="8bbeaf1ff076e67f1fe45507be8d32265e3e7fc6" translate="yes" xml:space="preserve">
          <source>Hybrid Apps and Contexts</source>
          <target state="translated">하이브리드 앱 및 컨텍스트</target>
        </trans-unit>
        <trans-unit id="0e9f5c15bc6549e57568e937c9756b79fb5fcde1" translate="yes" xml:space="preserve">
          <source>ID Locators</source>
          <target state="translated">ID 로케이터</target>
        </trans-unit>
        <trans-unit id="f547e8786394ca37ea6aea53d1ad95e9390254b6" translate="yes" xml:space="preserve">
          <source>ID locators are best to select the exact semantic element in web and mobile testing:</source>
          <target state="translated">ID 로케이터는 웹 및 모바일 테스트에서 정확한 의미 요소를 선택하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="52f42adee0a7f85f60b816ceb0898ecc9f85ca16" translate="yes" xml:space="preserve">
          <source>IFrames</source>
          <target state="translated">IFrames</target>
        </trans-unit>
        <trans-unit id="096a3585f58ee0f5e8017664a4dc999ac568db8f" translate="yes" xml:space="preserve">
          <source>Ids of created records are collected and used in the end of a test for the cleanup. If you need to receive &lt;code&gt;id&lt;/code&gt; instead of full response enable &lt;code&gt;returnId&lt;/code&gt; in a helper config:</source>
          <target state="translated">생성 된 레코드의 ID가 수집되어 정리 테스트가 끝날 때 사용됩니다. 전체 응답 대신 &lt;code&gt;id&lt;/code&gt; 를 받아야 하는 경우 도우미 구성에서 &lt;code&gt;returnId&lt;/code&gt; 를 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="85e640575ddab45c095c068e19d9092a587f6ca4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;registerGlobal&lt;/code&gt; is false you can use tryTo from the plugin:</source>
          <target state="translated">경우 &lt;code&gt;registerGlobal&lt;/code&gt; 이 거짓 당신은 플러그인에서 데로 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="e9d2d31175e07f95f3bcd9ea75ca02f192c4c2f8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;restore&lt;/code&gt; and &lt;code&gt;check&lt;/code&gt; were not successful, &lt;code&gt;login&lt;/code&gt; is executed</source>
          <target state="translated">경우 &lt;code&gt;restore&lt;/code&gt; 및 &lt;code&gt;check&lt;/code&gt; 실패했다, &lt;code&gt;login&lt;/code&gt; 실행됩니다</target>
        </trans-unit>
        <trans-unit id="0ee792bd956e08f701eee5259777e90702c2621c" translate="yes" xml:space="preserve">
          <source>If Allure plugin is enabled this plugin attaches each saved screenshot to allure report.</source>
          <target state="translated">Allure 플러그인이 활성화 된 경우이 플러그인은 저장된 각 스크린 샷을 Allure 보고서에 첨부합니다.</target>
        </trans-unit>
        <trans-unit id="0c74fb24f7000fc90954047c780d3767dfe8b85b" translate="yes" xml:space="preserve">
          <source>If a function returns a Promise it will wait for its resolution.</source>
          <target state="translated">함수가 Promise를 반환하면 해결 될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="4ece2584654c818ff3c20e83930ca5ea47d2405b" translate="yes" xml:space="preserve">
          <source>If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string. For buttons, the &quot;value&quot; attribute, &quot;name&quot; attribute, and inner text are searched. For links, the link text is searched. For images, the &quot;alt&quot; attribute and inner text of any parent links are searched.</source>
          <target state="translated">퍼지 로케이터가 제공되면 페이지에서 로케이터 문자열과 일치하는 버튼, 링크 또는 이미지를 검색합니다. 버튼의 경우 &quot;값&quot;속성, &quot;이름&quot;속성 및 내부 텍스트가 검색됩니다. 링크의 경우 링크 텍스트가 검색됩니다. 이미지의 경우 &quot;alt&quot;속성과 상위 링크의 내부 텍스트가 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="13b09ad343ff6939493be83ec73566f995718fc5" translate="yes" xml:space="preserve">
          <source>If a group of scenarios have the same initial steps, let's that for dashboard we need always need to be logged in as administrator. We can use &lt;em&gt;Background&lt;/em&gt; section to do the required preparations and not to repeat same steps across scenarios.</source>
          <target state="translated">시나리오 그룹에 동일한 초기 단계가있는 경우 대시 보드의 경우 항상 관리자로 로그인해야합니다. &lt;em&gt;백그라운드&lt;/em&gt; 섹션을 사용 하여 필요한 준비를 수행하고 시나리오 전체에서 동일한 단계를 반복하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="2356a98d060aedab43dc3c8639a245010a71063a" translate="yes" xml:space="preserve">
          <source>If a plugin is disabled (&lt;code&gt;enabled&lt;/code&gt; is not set or false) this plugin can be enabled from command line:</source>
          <target state="translated">플러그인이 비활성화 된 경우 ( &lt;code&gt;enabled&lt;/code&gt; 가 설정 되어 있지 않거나 false 인 경우) 명령 행에서이 플러그인을 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="063339ae438f3d0fef57c0863b99466ccd9107f0" translate="yes" xml:space="preserve">
          <source>If a plugin needs to be enabled in &lt;code&gt;dry-run&lt;/code&gt; mode, pass its name in &lt;code&gt;-p&lt;/code&gt; option:</source>
          <target state="translated">플러그인을 활성화해야하는 경우 &lt;code&gt;dry-run&lt;/code&gt; 모드에서 그 이름 통과 &lt;code&gt;-p&lt;/code&gt; 옵션 :</target>
        </trans-unit>
        <trans-unit id="3ddffba98851b73e5c1ef12443277051c83ad72e" translate="yes" xml:space="preserve">
          <source>If a test is failing you can prevent browser from closing by putting &lt;code&gt;pause()&lt;/code&gt; command into &lt;code&gt;After()&lt;/code&gt; hook. This is very helpful to debug failing tests. This way you can keep the same session and try different actions on a page to get the idea what went wrong.</source>
          <target state="translated">테스트가 실패하면 &lt;code&gt;pause()&lt;/code&gt; 명령을 &lt;code&gt;After()&lt;/code&gt; 후크 에 넣어 브라우저가 닫히지 않도록 할 수 있습니다 . 이는 실패한 테스트를 디버깅하는 데 매우 유용합니다. 이렇게하면 같은 세션을 유지하고 페이지에서 다른 작업을 시도하여 무엇이 잘못되었는지 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6da433caf4e9a08fa1bc29e371616cdd077ea299" translate="yes" xml:space="preserve">
          <source>If an application has different pages (login, admin, etc) you should use a page object. CodeceptJS can generate a template for it with the following command:</source>
          <target state="translated">응용 프로그램에 다른 페이지 (로그인, 관리자 등)가있는 경우 페이지 개체를 사용해야합니다. CodeceptJS는 다음 명령을 사용하여 템플릿을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d8b4f58066006c7599c4f10232eeac69ae34be8" translate="yes" xml:space="preserve">
          <source>If data is required for a test, try to create that data via API. See how to do it in &lt;a href=&quot;https://codecept.io/data&quot;&gt;Data Management&lt;/a&gt; chapter.</source>
          <target state="translated">테스트에 데이터가 필요한 경우 API를 통해 해당 데이터를 생성 해보십시오. &lt;a href=&quot;https://codecept.io/data&quot;&gt;데이터 관리&lt;/a&gt; 장 에서 방법을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="22cb2d8acd6446c4d6ea8e02ab3dee513a893bfe" translate="yes" xml:space="preserve">
          <source>If disabled start the container manually before running tests (default : true)</source>
          <target state="translated">비활성화 된 경우 테스트를 실행하기 전에 컨테이너를 수동으로 시작합니다 (기본값 : true).</target>
        </trans-unit>
        <trans-unit id="bfb1ccbe3b0b8aec94e2cdfefbcd5692e791cdea" translate="yes" xml:space="preserve">
          <source>If everything is OK, continue with installing Appium. If not, consider using cloud based alternatives like &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs (opens new window)&lt;/a&gt; or &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack (opens new window)&lt;/a&gt;. Cloud services provide hosted appium with real and emulated mobile devices.</source>
          <target state="translated">모든 것이 정상이면 Appium 설치를 계속하십시오. 그렇지 않은 경우 &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs (새 창에서 열림)&lt;/a&gt; 또는 &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack (새 창에서 열림 &lt;/a&gt;) 과 같은 클라우드 기반 대안을 사용하는 것이 좋습니다 . 클라우드 서비스는 실제 및 에뮬레이트 된 모바일 장치와 함께 호스팅 된 Appium을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a75235bc5c76856d5d1c1716df13186be5da0384" translate="yes" xml:space="preserve">
          <source>If everything is OK, continue with installing Appium. If not, consider using cloud based alternatives like &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs&lt;/a&gt; or &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack&lt;/a&gt;. Cloud services provide hosted appium with real and emulated mobile devices.</source>
          <target state="translated">모든 것이 정상이면 Appium 설치를 계속하십시오. 그렇지 않은 경우 &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs&lt;/a&gt; 또는 &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack&lt;/a&gt; 과 같은 클라우드 기반 대안을 사용해보십시오 . 클라우드 서비스는 호스팅 된 appium에 실제 및 에뮬레이트 된 모바일 장치를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ba2b99f103a86a42923b39a393956e4acb6ea3e5" translate="yes" xml:space="preserve">
          <source>If everything is done right, you will see in console:</source>
          <target state="translated">모든 것이 올바르게 끝나면 콘솔에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4421a3cd063bdcd13c1a018d9eb5cb39449f6f10" translate="yes" xml:space="preserve">
          <source>If inside one test you plan to record/replay requests in several places, provide &lt;a href=&quot;https://netflix.github.io/pollyjs/#/api?id=recordingname&quot;&gt;recording name (opens new window)&lt;/a&gt; as the parameter.</source>
          <target state="translated">한 테스트 내에서 여러 위치에서 요청을 기록 / 재생하려는 경우 매개 변수로 &lt;a href=&quot;https://netflix.github.io/pollyjs/#/api?id=recordingname&quot;&gt;기록 이름 (새 창에서 열림)&lt;/a&gt; 을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d3f81f920113f784d43c57e164b3fe4b05166c76" translate="yes" xml:space="preserve">
          <source>If it's hard to define what to wait, it is recommended to use &lt;a href=&quot;https://codecept.io/basics/#retries&quot;&gt;retries&lt;/a&gt; to rerun flaky steps.</source>
          <target state="translated">대기 대상을 정의하기 어려운 경우 &lt;a href=&quot;https://codecept.io/basics/#retries&quot;&gt;재 시도&lt;/a&gt; 를 사용 하여 비정상적인 단계를 다시 실행 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="77ab370cf15683e9f08143e13547902dadf678f1" translate="yes" xml:space="preserve">
          <source>If multiple elements found returns an array of texts.</source>
          <target state="translated">여러 요소가 발견되면 텍스트 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4a160b8d5dec036d87b5936b347f38a55f679072" translate="yes" xml:space="preserve">
          <source>If multiple elements found returns first element.</source>
          <target state="translated">여러 요소가 발견되면 첫 번째 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="62724d76b1d949c7fc96de02a059f6eab509f698" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; provided and &lt;code&gt;RUN_MULTIPLE&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, tests will proceed with &lt;code&gt;CODECEPT_ARGS=--all&lt;/code&gt;</source>
          <target state="translated">어떤 경우 &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; 이 제공되지 및 &lt;code&gt;RUN_MULTIPLE&lt;/code&gt; 이 있다 &lt;code&gt;true&lt;/code&gt; , 테스트를 진행합니다 &lt;code&gt;CODECEPT_ARGS=--all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="62996de8bcfbec39e22ca563bb21a266fea81b3a" translate="yes" xml:space="preserve">
          <source>If none found, CodeceptJS tries to find link or button containing that text. In case an image is clickable its &lt;code&gt;alt&lt;/code&gt; attribute will be checked for text inclusion. Form buttons will also be searched by name.</source>
          <target state="translated">찾을 수없는 경우 CodeceptJS는 해당 텍스트가 포함 된 링크 또는 단추를 찾으려고 시도합니다. 이미지를 클릭 할 수 있는 경우 &lt;code&gt;alt&lt;/code&gt; 속성이 텍스트 포함을 확인합니다. 양식 버튼도 이름으로 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="85bc9dd5253b516012fc53aa0b82a58614b49832" translate="yes" xml:space="preserve">
          <source>If none was found, CodeceptJS tries to find a link or button containing that text. In case an image is clickable its &lt;code&gt;alt&lt;/code&gt; attribute will be checked for text inclusion. Form buttons will also be searched by name.</source>
          <target state="translated">아무것도 발견되지 않으면 CodeceptJS는 해당 텍스트가 포함 된 링크 나 버튼을 찾으려고합니다. 이미지를 클릭 할 수있는 경우 텍스트 포함을 위해 &lt;code&gt;alt&lt;/code&gt; 속성이 확인됩니다. 양식 버튼도 이름으로 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="a150629e125fee676f88d003d02e759756038919" translate="yes" xml:space="preserve">
          <source>If nothing found, check if locator looks like a CSS selector. If so, run it.</source>
          <target state="translated">아무것도 발견되지 않으면 로케이터가 CSS 선택기처럼 보이는지 확인하십시오. 그렇다면 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="8d191edeeb2f7528441cdddb03fa5eac3b5231f5" translate="yes" xml:space="preserve">
          <source>If nothing found, check if locator looks like an XPath expression. If so, run it.</source>
          <target state="translated">아무것도 발견되지 않으면 로케이터가 XPath 표현식처럼 보이는지 확인하십시오. 그렇다면 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="60616e3db3c038ea0a953c1083ccd98e7482a8b2" translate="yes" xml:space="preserve">
          <source>If nothing found, check if there is a label with specified text for input element.</source>
          <target state="translated">아무것도 발견되지 않으면 입력 요소에 지정된 텍스트가있는 레이블이 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="5d48b68ada9c7cef738a6e62fcd1dccaf51dde83" translate="yes" xml:space="preserve">
          <source>If nothing found, check if there is an input element with a corresponding name.</source>
          <target state="translated">아무것도 발견되지 않으면 해당 이름의 입력 요소가 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="087f7db0529a56d8cfaa6e4e27adc319d208d0ce" translate="yes" xml:space="preserve">
          <source>If nothing found, throw an &lt;code&gt;ElementNotFound&lt;/code&gt; exception.</source>
          <target state="translated">아무것도 발견되지 않으면 &lt;code&gt;ElementNotFound&lt;/code&gt; 예외를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="4bc75e999edc5c26641c26b6691d1a8a9900fe8f" translate="yes" xml:space="preserve">
          <source>If the locator is an object, it should have a single element, with the key signifying the locator type (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;xpath&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;react&lt;/code&gt;, or &lt;code&gt;class&lt;/code&gt;) and the value being the locator itself. This is called a &quot;strict&quot; locator.</source>
          <target state="translated">로케이터가 객체 인 경우 로케이터 유형 ( &lt;code&gt;id&lt;/code&gt; , &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;css&lt;/code&gt; , &lt;code&gt;xpath&lt;/code&gt; , &lt;code&gt;link&lt;/code&gt; , &lt;code&gt;react&lt;/code&gt; 또는 &lt;code&gt;class&lt;/code&gt; )을 나타내는 키 와 값이 로케이터 자체 인 단일 요소가 있어야 합니다. 이를 &quot;엄격한&quot;로케이터라고합니다.</target>
        </trans-unit>
        <trans-unit id="c7252fea85b2869f8748c4dae87dd49ca556bb17" translate="yes" xml:space="preserve">
          <source>If the locator is an object, it should have a single element, with the key signifying the locator type (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;xpath&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, or &lt;code&gt;class&lt;/code&gt;) and the value being the locator itself. This is called a &quot;strict&quot; locator.</source>
          <target state="translated">로케이터가 객체 인 경우 로케이터 유형 ( &lt;code&gt;id&lt;/code&gt; , &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;css&lt;/code&gt; , &lt;code&gt;xpath&lt;/code&gt; , &lt;code&gt;link&lt;/code&gt; 또는 &lt;code&gt;class&lt;/code&gt; 를 나타내는 키가있는 단일 요소가 있어야합니다. )와 값이 로케이터 자체 인 합니다. 이것을 &quot;엄격한&quot;로케이터라고합니다.</target>
        </trans-unit>
        <trans-unit id="7dd1bc535a16f85d530814882ed5291950ee3675" translate="yes" xml:space="preserve">
          <source>If use locators of &lt;code&gt;data-element&lt;/code&gt; attribute you can implement a strategy, which will allow you to use &lt;code&gt;{ data: 'my-element' }&lt;/code&gt; as a valid locator.</source>
          <target state="translated">&lt;code&gt;data-element&lt;/code&gt; 속성의 로케이터 를 사용하는 경우 &lt;code&gt;{ data: 'my-element' }&lt;/code&gt; 를 유효한 로케이터 로 사용할 수있는 전략을 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71ebdf423a82891ced163d81b0b087de963c8567" translate="yes" xml:space="preserve">
          <source>If user login is required, use &lt;a href=&quot;https://codecept.io/plugins#autoLogin&quot;&gt;autoLogin plugin&lt;/a&gt; instead of putting login steps inside a test.</source>
          <target state="translated">사용자 로그인이 필요한 경우 로그인 단계를 테스트에 넣는 대신 &lt;a href=&quot;https://codecept.io/plugins#autoLogin&quot;&gt;autoLogin 플러그인을&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0b7c18242e5e2eccba3b59cc416e24f9d226800e" translate="yes" xml:space="preserve">
          <source>If using the Protractor or WebDriverIO drivers, link the container with a Selenium Standalone docker container with an alias of &lt;code&gt;selenium&lt;/code&gt;. Additionally, make sure your &lt;code&gt;codeceptjs.conf.js&lt;/code&gt; contains the following to allow CodeceptJS to identify where Selenium is running.</source>
          <target state="translated">각도기 또는 WebDriverIO 드라이버를 사용하는 경우의 별칭이있는 셀레늄 독립 고정 표시기 컨테이너와 컨테이너를 연결 &lt;code&gt;selenium&lt;/code&gt; . 또한 &lt;code&gt;codeceptjs.conf.js&lt;/code&gt; 에 CodeceptJS 가 Selenium이 실행중인 위치를 식별 할 수 있도록 다음 내용이 포함되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="1174ba3389b036d41c091d371b209485e77eb916" translate="yes" xml:space="preserve">
          <source>If we replace raw CSS selector with a button title we can improve readability of such test. Even if the text on the button changes, it's much easier to update it.</source>
          <target state="translated">원시 CSS 선택기를 버튼 제목으로 바꾸면 이러한 테스트의 가독성을 높일 수 있습니다. 버튼의 텍스트가 변경 되더라도 업데이트하기가 훨씬 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="2d4d8ed8f806ec98349dacf7bcd8fc58d27586bd" translate="yes" xml:space="preserve">
          <source>If we use hashes() with the previous exemple :</source>
          <target state="translated">이전 예제와 함께 hashes ()를 사용하면 :</target>
        </trans-unit>
        <trans-unit id="de1e363d139be70afd32b50bc526db19e83c8f1e" translate="yes" xml:space="preserve">
          <source>If you agreed to create a demo component, you will also see &lt;code&gt;TestMe&lt;/code&gt; component in &lt;code&gt;src/components&lt;/code&gt; folder.</source>
          <target state="translated">데모 구성 요소를 만들기로 동의 한 경우 &lt;code&gt;src/components&lt;/code&gt; 폴더 에 &lt;code&gt;TestMe&lt;/code&gt; 구성 요소 도 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="c3b2397cf6f3ceacb4a5e0af167425a6814558cc" translate="yes" xml:space="preserve">
          <source>If you already have CodeceptJS project, just install &lt;code&gt;playwright&lt;/code&gt; package and enable a helper it in config.</source>
          <target state="translated">CodeceptJS 프로젝트가 이미 있다면 &lt;code&gt;playwright&lt;/code&gt; 패키지를 설치 하고 config에서 도우미를 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="54b28b97a6c15a211d85afbc5cbea57a7dff697f" translate="yes" xml:space="preserve">
          <source>If you already have CodeceptJS project, just install &lt;code&gt;puppeteer&lt;/code&gt; package and enable a helper it in config.</source>
          <target state="translated">CodeceptJS 프로젝트가 이미있는 경우 &lt;code&gt;puppeteer&lt;/code&gt; 패키지를 설치 하고 config에서 도우미를 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="d51f2fe971100a29238559fbf966a4d235d21c1a" translate="yes" xml:space="preserve">
          <source>If you are familiar with Selenium, you can choose classical &lt;a href=&quot;#using-selenium-webdriver&quot;&gt;&lt;strong&gt;Selenium WebDriver&lt;/strong&gt; setup&lt;/a&gt;.</source>
          <target state="translated">Selenium에 익숙한 경우 클래식 &lt;a href=&quot;#using-selenium-webdriver&quot;&gt;&lt;strong&gt;Selenium WebDriver&lt;/strong&gt; 설정을&lt;/a&gt; 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a141b918fce5d393c87aaac67970e8f25232011d" translate="yes" xml:space="preserve">
          <source>If you are new to Selenoid and you want plug and play setup use automatic mode.</source>
          <target state="translated">Selenoid를 처음 사용하고 플러그 앤 플레이 설정을 원하는 경우 자동 모드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1244e749513ae1fbf2f928b1ead9d9586e23ee45" translate="yes" xml:space="preserve">
          <source>If you are using JavaScript-style config &lt;code&gt;codecept.conf.js&lt;/code&gt;, bootstrap and teardown functions can be placed inside of it:</source>
          <target state="translated">JavaScript 스타일 구성 &lt;code&gt;codecept.conf.js&lt;/code&gt; 사용하는 경우 codecept.conf.js 경우 부트 스트랩 및 해제 기능을 그 안에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e33097e0e89d99ab314da9e69637eb776f7e2f88" translate="yes" xml:space="preserve">
          <source>If you are using Visual Studio Code or other IDE that supports TypeScript Definitions, you can generate step definitions with</source>
          <target state="translated">Visual Studio Code 또는 TypeScript 정의를 지원하는 다른 IDE를 사용하는 경우 다음을 사용하여 단계 정의를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03261a2d9e133779cfc5cf322d507f58ec1046d6" translate="yes" xml:space="preserve">
          <source>If you come from Java, Python or Ruby don't be afraid of a new syntax. It is more flexible than you think!</source>
          <target state="translated">Java, Python 또는 Ruby에서 온 경우 새로운 구문을 두려워하지 마십시오. 생각보다 유연합니다!</target>
        </trans-unit>
        <trans-unit id="4014ad10418ae64ff88887377d847ca287adc315" translate="yes" xml:space="preserve">
          <source>If you completed step 1 and step 2 you should have a configuration similar this:</source>
          <target state="translated">1 단계와 2 단계를 완료 한 경우 다음과 유사한 구성이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="56b91d013a1975025f45412f944d9afab98d6c1e" translate="yes" xml:space="preserve">
          <source>If you decide to keep cookies between tests you don't need to save/retrieve cookies between tests. But you need to login once work until session expires. For this case, disable &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;restore&lt;/code&gt; methods.</source>
          <target state="translated">테스트 사이에 쿠키를 유지하기로 결정한 경우 테스트 사이에 쿠키를 저장 / 검색 할 필요가 없습니다. 그러나 세션이 만료 될 때까지 작업 한 후에는 로그인해야합니다. 이 경우 &lt;code&gt;fetch&lt;/code&gt; 및 &lt;code&gt;restore&lt;/code&gt; 방법을 비활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="a7967e7447e6477d04ff3b9c98315e661d0d4710" translate="yes" xml:space="preserve">
          <source>If you don't have &lt;code&gt;package.json&lt;/code&gt; in your project, create it with &lt;code&gt;npm init -y&lt;/code&gt;.</source>
          <target state="translated">프로젝트에 &lt;code&gt;package.json&lt;/code&gt; 이없는 경우 &lt;code&gt;npm init -y&lt;/code&gt; 로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d7780a7244ffaee02f008f8dfb94f7c95da0120f" translate="yes" xml:space="preserve">
          <source>If you don't use multi-lingual website or you don't update texts often it is OK to click on links by their texts or match fields by their placeholders.</source>
          <target state="translated">다국어 웹 사이트를 사용하지 않거나 텍스트를 자주 업데이트하지 않는 경우 텍스트로 링크를 클릭하거나 자리 표시 자로 필드를 일치시키는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c50bcc02521789874f41f9ffaf420e2a1f7cb29c" translate="yes" xml:space="preserve">
          <source>If you don't want to rely on guessing locators, specify them manually with &lt;code&gt;{ css: 'button' }&lt;/code&gt; or &lt;code&gt;{ xpath: '//button' }&lt;/code&gt;. We call them strict locators. Those locators will be faster but less readable.</source>
          <target state="translated">로케이터 추측에 의존하지 않으려면 &lt;code&gt;{ css: 'button' }&lt;/code&gt; 또는 &lt;code&gt;{ xpath: '//button' }&lt;/code&gt; 사용하여 수동으로 지정하십시오 . 우리는 그것들을 엄격한 로케이터라고 부릅니다. 이러한 로케이터는 더 빠르지 만 가독성은 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="65e74d7bfd17d94b29b2c780b9febeef2faee01f" translate="yes" xml:space="preserve">
          <source>If you face issues connecting to WebDriver, please check that corresponding server is running on a specified port. If host is other than &lt;code&gt;localhost&lt;/code&gt; or port is other than &lt;code&gt;4444&lt;/code&gt;, update the configuration.</source>
          <target state="translated">WebDriver 연결에 문제가 발생하면 해당 서버가 지정된 포트에서 실행 중인지 확인하십시오. host가 &lt;code&gt;localhost&lt;/code&gt; 가 아니거나 port가 &lt;code&gt;4444&lt;/code&gt; 가 아닌 경우 구성을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="4fa375d59c8139ed136119668af3e61af4855159" translate="yes" xml:space="preserve">
          <source>If you get an error like this</source>
          <target state="translated">이와 같은 오류가 발생하면</target>
        </trans-unit>
        <trans-unit id="98815f5b049051e9177e9268d95ba72346408486" translate="yes" xml:space="preserve">
          <source>If you have a convention to use &lt;code&gt;data-test-id&lt;/code&gt; or &lt;code&gt;data-qa&lt;/code&gt; attributes to mark active elements for e2e tests, you can enable this plugin to simplify matching elements with these attributes:</source>
          <target state="translated">&lt;code&gt;data-test-id&lt;/code&gt; 또는 &lt;code&gt;data-qa&lt;/code&gt; 속성을 사용하여 e2e 테스트에 대한 활성 요소를 표시 하는 규칙이있는 경우이 플러그인을 활성화하여 다음 속성과 일치하는 요소를 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa0991d02bbf537feacaa0d8745808d19b87850c" translate="yes" xml:space="preserve">
          <source>If you have a step which often fails you can retry execution for this single step. Use &lt;code&gt;retry()&lt;/code&gt; function before an action to ask CodeceptJS to retry this step on failure:</source>
          <target state="translated">자주 실패하는 단계가있는 경우이 단일 단계에 대한 실행을 재 시도 할 수 있습니다. 사용 &lt;code&gt;retry()&lt;/code&gt; 작업 이전에 기능 장애에서이 단계를 다시 시도 CodeceptJS을 물어 :</target>
        </trans-unit>
        <trans-unit id="34c2b90851ac9c6f075b1b7efb0e029f85aa0717" translate="yes" xml:space="preserve">
          <source>If you have a step which often fails, you can retry execution for this single step. Use the &lt;code&gt;retry()&lt;/code&gt; function before an action to ask CodeceptJS to retry it on failure:</source>
          <target state="translated">자주 실패하는 단계가있는 경우이 단일 단계에 대한 실행을 다시 시도 할 수 있습니다. 작업 전에 &lt;code&gt;retry()&lt;/code&gt; 함수를 사용하여 CodeceptJS에 실패시 다시 시도하도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="ff7e29a472a9f65063ad44937ad5e9f8cae2de41" translate="yes" xml:space="preserve">
          <source>If you have issues starting Selenoid with this plugin consider using the official &lt;a href=&quot;https://aerokube.com/cm/latest/&quot;&gt;Configuration Manager (opens new window)&lt;/a&gt; tool from Selenoid</source>
          <target state="translated">이 플러그인으로 Selenoid를 시작하는 데 문제가있는 경우 Selenoid의 공식 &lt;a href=&quot;https://aerokube.com/cm/latest/&quot;&gt;구성 관리자 (새 창&lt;/a&gt; 에서 열림 ) 도구를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5952ab5ded009ba42f12d9beee87c591650975e8" translate="yes" xml:space="preserve">
          <source>If you need more control over custom locators see how declare them manually without using a customLocator plugin.</source>
          <target state="translated">커스텀 로케이터에 대한 더 많은 제어가 필요한 경우 customLocator 플러그인을 사용하지 않고 수동으로 선언하는 방법을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="78822759a24f8c57d809f94d1a0dbe13e8d4f4a7" translate="yes" xml:space="preserve">
          <source>If you need to execute some code before a group of tests, you can &lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;mark these tests with a same tag&lt;/a&gt;. Then to listen for tests where this tag is included (see &lt;a href=&quot;#test-object&quot;&gt;test object api&lt;/a&gt;).</source>
          <target state="translated">테스트 그룹 전에 일부 코드를 실행해야하는 경우 &lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;이러한 테스트를 동일한 태그로 표시&lt;/a&gt; 할 수 있습니다 . 그런 다음이 태그가 포함 된 테스트를 청취하십시오 ( &lt;a href=&quot;#test-object&quot;&gt;test 오브젝트 api&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="299ec487b04fff9ad42cef734cbf367b39e75fa9" translate="yes" xml:space="preserve">
          <source>If you need to get element's value inside a test you can use &lt;code&gt;grab*&lt;/code&gt; methods. They should be used with &lt;code&gt;await&lt;/code&gt; operator inside &lt;code&gt;async&lt;/code&gt; function:</source>
          <target state="translated">테스트 내에서 요소 값을 &lt;code&gt;grab*&lt;/code&gt; 할 경우 grab * 메소드를 사용할 수 있습니다 . &lt;code&gt;async&lt;/code&gt; 함수 내 에서 &lt;code&gt;await&lt;/code&gt; 연산자 와 함께 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1db6d4e265a9e13b6144b630daf868939ff148be" translate="yes" xml:space="preserve">
          <source>If you need to run complex a setup before all tests and have to teardown this afterwards, you can use the &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; functions. &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; have access to the &lt;code&gt;I&lt;/code&gt; object, but &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; don't have any access to the browser, because it's not running at this moment. You can use them to execute handlers that will setup your environment. &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; will work only for the file it was declared in (so you can declare different setups for files)</source>
          <target state="translated">모든 테스트 전에 복잡한 설정을 실행해야하고 나중에이를 분해 &lt;code&gt;BeforeSuite&lt;/code&gt; 경우 BeforeSuite 및 &lt;code&gt;AfterSuite&lt;/code&gt; 기능을 사용할 수 있습니다 . &lt;code&gt;BeforeSuite&lt;/code&gt; 및 &lt;code&gt;AfterSuite&lt;/code&gt; 는 &lt;code&gt;I&lt;/code&gt; 개체에 액세스 할 수 있지만, &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; 는 브라우저에 대한 액세스 권한이 없습니다. 현재 실행 중이 아니기 때문입니다. 이를 사용하여 환경을 설정하는 핸들러를 실행할 수 있습니다. &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; 는 선언 된 파일에 대해서만 작동합니다 (따라서 파일에 대해 다른 설정을 선언 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="6a2d83a55cedf85810d1176c0df2ea68421d92db" translate="yes" xml:space="preserve">
          <source>If you need to run complex setup before all tests and teardown this afterwards you can use &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; functions. &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; have access to &lt;code&gt;I&lt;/code&gt; object, but &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; don't have an access to the browser because it's not running at this moment. You can use them to execute handlers that will setup your environment. &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; will work only for a file where it was declared (so you can declare different setups for files)</source>
          <target state="translated">모든 테스트 및 분해 전에 복잡한 설정을 실행해야하는 경우 &lt;code&gt;BeforeSuite&lt;/code&gt; 및 &lt;code&gt;AfterSuite&lt;/code&gt; 기능을 사용할 수 있습니다 . &lt;code&gt;BeforeSuite&lt;/code&gt; 및 &lt;code&gt;AfterSuite&lt;/code&gt; 는 &lt;code&gt;I&lt;/code&gt; 객체에 액세스 할 수 있지만 &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; 는 현재 실행되고 있지 않으므로 브라우저에 액세스 할 수 없습니다. 그것들을 사용하여 환경을 설정하는 핸들러를 실행할 수 있습니다. &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; 는 선언 된 파일에 대해서만 작동하므로 파일에 대해 다른 설정을 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3de09631352dbb7876328c63a2f5012706f7a728" translate="yes" xml:space="preserve">
          <source>If you prefer to store your configuration files in a different location, or with a different name, you can do that with &lt;code&gt;--config&lt;/code&gt; or `-c:</source>
          <target state="translated">설정 파일을 다른 위치 또는 다른 이름으로 저장하려면 &lt;code&gt;--config&lt;/code&gt; 또는`-c 를 사용하여 구성 파일을 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dacaedddc64174efec50d3f287c917a8935acc3d" translate="yes" xml:space="preserve">
          <source>If you prefer, you may also pass a string for the locator. This is called a &quot;fuzzy&quot; locator. In this case, CodeceptJS uses a variety of heuristics (depending on the exact method called) to determine what element you're referring to. If you are locating a clickable element or an input element, CodeceptJS will use &lt;a href=&quot;#semantic-locators&quot;&gt;semantic locators&lt;/a&gt;.</source>
          <target state="translated">원하는 경우 로케이터에 문자열을 전달할 수도 있습니다. 이것을 &quot;퍼지&quot;로케이터라고합니다. 이 경우 CodeceptJS는 다양한 휴리스틱 (정확한 메서드에 따라 다름)을 사용하여 참조하는 요소를 결정합니다. 클릭 가능한 요소 또는 입력 요소를 찾는 경우 CodeceptJS는 &lt;a href=&quot;#semantic-locators&quot;&gt;시맨틱 로케이터&lt;/a&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="4aede733afc7415838cbde85e862efb8ce06213d" translate="yes" xml:space="preserve">
          <source>If you test React Native application, consider using &lt;a href=&quot;https://codecept.io/detox&quot;&gt;Detox helper&lt;/a&gt; for faster tests.</source>
          <target state="translated">React Native 애플리케이션을 테스트하는 경우 더 빠른 테스트를 위해 &lt;a href=&quot;https://codecept.io/detox&quot;&gt;Detox 도우미&lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b209d83aa26e98ce8880d2fbe9898d3dca93db9" translate="yes" xml:space="preserve">
          <source>If you use async functions in the autoLogin plugin, login function should be used with &lt;code&gt;await&lt;/code&gt; keyword.</source>
          <target state="translated">autoLogin 플러그인에서 비동기 기능을 사용하는 경우 &lt;code&gt;await&lt;/code&gt; 키워드 와 함께 로그인 기능을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="09c315158ddcdff0405a0c8edbbef971886e3864" translate="yes" xml:space="preserve">
          <source>If you want to check all your tests for stability you can set high boundaries for minimal success:</source>
          <target state="translated">모든 테스트의 안정성을 확인하려면 최소한의 성공을 위해 높은 경계를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bdd5540c38ee9a1284fdd96f75896f04361d03d" translate="yes" xml:space="preserve">
          <source>If you want to get information from a running test you can use &lt;code&gt;await&lt;/code&gt; inside &lt;strong&gt;async function&lt;/strong&gt; and special methods of helpers started with &lt;code&gt;grab&lt;/code&gt; prefix.</source>
          <target state="translated">실행중인 테스트에서 정보를 얻으려면 &lt;strong&gt;비동기 함수&lt;/strong&gt; 내부에서 &lt;code&gt;await&lt;/code&gt; 를 사용 하고 &lt;code&gt;grab&lt;/code&gt; 접두어로 시작하는 도우미의 특수 메소드를 사용할 수 있습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="112bd888e98478b39be85002f40e183c24c6885a" translate="yes" xml:space="preserve">
          <source>If you want to get information from a running test you can use &lt;code&gt;await&lt;/code&gt; inside the &lt;strong&gt;async function&lt;/strong&gt;, and utilize special methods of helpers started with the &lt;code&gt;grab&lt;/code&gt; prefix.</source>
          <target state="translated">실행중인 테스트에서 정보를 얻으려면 &lt;strong&gt;async 함수&lt;/strong&gt; 내에서 &lt;code&gt;await&lt;/code&gt; 를 사용 하고 &lt;code&gt;grab&lt;/code&gt; 접두사로 시작하는 도우미의 특수 메서드를 활용할 수 있습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12c9509071d95fa005446bec3ab5a8a53810dc18" translate="yes" xml:space="preserve">
          <source>If you want to get types for your &lt;a href=&quot;https://codecept.io/helpers/#configuration&quot;&gt;custom helper (opens new window)&lt;/a&gt;, you can add their automatically with CodeceptJS command &lt;code&gt;npx codeceptjs def&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/#configuration&quot;&gt;사용자 지정 도우미 (새 창&lt;/a&gt; 열기 )에 대한 유형을 얻으려면 CodeceptJS 명령 &lt;code&gt;npx codeceptjs def&lt;/code&gt; 를 사용 하여 자동으로 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74fd9589eb12a76af35a823a55b5bfed95e78940" translate="yes" xml:space="preserve">
          <source>If you want to run tests using raw ChromeDriver (which also supports WebDriver protocol) avoiding Selenium Server, you should provide following configuration:</source>
          <target state="translated">Selenium Server를 피하고 원시 ChromeDriver (WebDriver 프로토콜도 지원)를 사용하여 테스트를 실행하려면 다음 구성을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="19e0aa17f12e0b6e54b7a7e7f4f70f883ccbc26d" translate="yes" xml:space="preserve">
          <source>If you want to use TestCafe API inside your tests you can put them into actions of &lt;code&gt;I&lt;/code&gt; object. To do so you can generate a new helper, access TestCafe helper, and get the test controller.</source>
          <target state="translated">테스트 내에서 TestCafe API를 사용하려면 &lt;code&gt;I&lt;/code&gt; 개체의 작업에 넣을 수 있습니다 . 이를 위해 새 도우미를 생성하고 TestCafe 도우미에 액세스 한 다음 테스트 컨트롤러를 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9dc1821c9f1494c1da4730ab6f9f5f1979eeb94d" translate="yes" xml:space="preserve">
          <source>If you want your tests to split according to your need this method is suited for you. For example: If you have 4 long running test files and 4 normal test files there chance all 4 tests end up in same worker thread. For these cases custom function will be helpful.</source>
          <target state="translated">필요에 따라 테스트를 분할하려는 경우이 방법이 적합합니다. 예 : 장기 실행 테스트 파일 4 개와 일반 테스트 파일 4 개가있는 경우 4 개의 테스트가 모두 동일한 작업자 스레드에서 끝날 가능성이 있습니다. 이러한 경우 사용자 정의 기능이 도움이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="2552c9d496021c58c0c3b0ca153abfc09f28d030" translate="yes" xml:space="preserve">
          <source>If you wish to use BrowserStack's &lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;Automated Mobile App Testing (opens new window)&lt;/a&gt; platform. Configure the Appium helper like this:</source>
          <target state="translated">BrowserStack의 &lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;자동화 된 모바일 앱 테스트 (새 창에서 열림)&lt;/a&gt; 플랫폼 을 사용하려는 경우 . 다음과 같이 Appium 도우미를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="108985ff5b9c833486e7fc488da2048b3fb5c8ee" translate="yes" xml:space="preserve">
          <source>If you wish to use BrowserStack's &lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;Automated Mobile App Testing&lt;/a&gt; platform. Configure the Appium helper like this:</source>
          <target state="translated">BrowserStack의 &lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;자동 모바일 앱 테스트&lt;/a&gt; 플랫폼 을 사용하려는 경우 . 다음과 같이 Appium 헬퍼를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="c4bc8516dbca8dcbab0e59fd15f9a2574eccfef5" translate="yes" xml:space="preserve">
          <source>If you'd like to retry a step more than once, pass the amount as a parameter:</source>
          <target state="translated">한 단계를 두 번 이상 다시 시도하려면 금액을 매개 변수로 전달하세요.</target>
        </trans-unit>
        <trans-unit id="cd93e599bbbb1b4fc11db51a3f722fd84b4c0665" translate="yes" xml:space="preserve">
          <source>If you'd like to retry step more than once pass the amount as parameter:</source>
          <target state="translated">단계를 두 번 이상 다시 시도하려면 금액을 매개 변수로 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="da46b0bb37dec6814b4643bf19b1abb53c92783e" translate="yes" xml:space="preserve">
          <source>If your code goes beyond using &lt;code&gt;I&lt;/code&gt; object or page objects, you are probably doing something wrong.</source>
          <target state="translated">코드가 &lt;code&gt;I&lt;/code&gt; 객체 또는 페이지 객체 를 사용 하는 것 이상이라면 아마도 뭔가 잘못하고있는 것입니다.</target>
        </trans-unit>
        <trans-unit id="61d43410dc8f293cca8d9a10b912677874a9472b" translate="yes" xml:space="preserve">
          <source>If your session is stored in local storage instead of cookies you still can obtain sessions.</source>
          <target state="translated">세션이 쿠키 대신 로컬 저장소에 저장되어있는 경우에도 세션을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="739d701394ccbdb0299026cb34d42db16af42f50" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;setSharedCookies&lt;/code&gt; function and call it inside a config:</source>
          <target state="translated">&lt;code&gt;setSharedCookies&lt;/code&gt; 함수를 가져 와서 구성 내에서 호출합니다.</target>
        </trans-unit>
        <trans-unit id="77e4d26fa3ef5a0f92a8070c5ae41b82fc8d7f6d" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;mobile testing (opens new window)&lt;/a&gt; you can use &lt;code&gt;~&lt;/code&gt; to specify the accessibility id to locate an element. In web application you can locate elements by their &lt;code&gt;aria-label&lt;/code&gt; value.</source>
          <target state="translated">에서 &lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;모바일 테스트 (새 창을 엽니 다)&lt;/a&gt; 당신이 사용할 수있는 &lt;code&gt;~&lt;/code&gt; 요소를 찾기 위해 접근성 ID를 지정할 수 있습니다. 웹 애플리케이션에서 &lt;code&gt;aria-label&lt;/code&gt; 값으로 요소를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35709666889886a1bba450dae4d29a1bbd6810bd" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;mobile testing&lt;/a&gt; you can use &lt;code&gt;~&lt;/code&gt; to specify accessibility id to locate an element. In web application you can locate element by their &lt;code&gt;aria-label&lt;/code&gt; value.</source>
          <target state="translated">에서 &lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;모바일 테스트&lt;/a&gt; 당신은 사용할 수 있습니다 &lt;code&gt;~&lt;/code&gt; 요소를 찾을 접근성 ID를 지정할 수 있습니다. 웹 애플리케이션에서 &lt;code&gt;aria-label&lt;/code&gt; 값으로 요소를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="363f1d92a66d2aa5c13fc91bc8f2112617dbc23c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;codecept.conf.js&lt;/code&gt; enable Detox helper:</source>
          <target state="translated">에서 &lt;code&gt;codecept.conf.js&lt;/code&gt; 해독 도우미를 사용 :</target>
        </trans-unit>
        <trans-unit id="62edfb1a7e5791b7345931744ea02721169d6072" translate="yes" xml:space="preserve">
          <source>In CodeceptJS we encourage users to follow semantic elements on page while writing tests. Instead of CSS/XPath locators try to stick to visible keywords on page.</source>
          <target state="translated">CodeceptJS에서는 사용자가 테스트를 작성하는 동안 페이지의 의미 요소를 따르도록 권장합니다. CSS / XPath 로케이터 대신 페이지에 보이는 키워드를 고수하려고합니다.</target>
        </trans-unit>
        <trans-unit id="aacde693b25033c902834997da761ad91638880e" translate="yes" xml:space="preserve">
          <source>In CodeceptJS you can combine tests written in Gherkin format with classical acceptance tests. This way you can keep your feature files compact with minimal set of scenarios, and write regular tests to cover all cases. Please note, feature files will be executed before tests.</source>
          <target state="translated">CodeceptJS에서는 Gherkin 형식으로 작성된 테스트를 기존 승인 테스트와 결합 할 수 있습니다. 이렇게하면 최소한의 시나리오 세트로 기능 파일을 압축 할 수 있으며 모든 경우를 다루기 위해 정기적 인 테스트를 작성할 수 있습니다. 기능 파일은 테스트 전에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="5a31a95dca19c4ba5452bdf1d3a303a5795ff1ea" translate="yes" xml:space="preserve">
          <source>In WebDriver and Puppeteer you can use React locators in any method where locator is required:</source>
          <target state="translated">WebDriver 및 Puppeteer에서는 로케이터가 필요한 모든 방법에서 React 로케이터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9dbfe263a93a2b2a77b67205c9780896043a7ef5" translate="yes" xml:space="preserve">
          <source>In WebDriver mocking is disabled every time a new page is loaded. Hence, &lt;code&gt;startMocking&lt;/code&gt; method should be called and the mocks should be updated, after navigating to a new page. This is a limitation of WebDriver. Consider using Puppeteer with MockRequest instead.</source>
          <target state="translated">WebDriver에서는 새 페이지가로드 될 때마다 조롱이 비활성화됩니다. 따라서 새 페이지로 이동 한 후 &lt;code&gt;startMocking&lt;/code&gt; 메서드를 호출하고 모의 개체를 업데이트해야합니다. 이것은 WebDriver의 제한 사항입니다. 대신 MockRequest와 함께 Puppeteer를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ac1cd0937a68ef9145c21fabd41825c808eab4d5" translate="yes" xml:space="preserve">
          <source>In a similar manner CodeceptJS allows you to generate &lt;strong&gt;PageFragments&lt;/strong&gt; and any other are abstraction by running &lt;code&gt;go&lt;/code&gt; command with &lt;code&gt;--type&lt;/code&gt; (or &lt;code&gt;-t&lt;/code&gt;) option:</source>
          <target state="translated">비슷한 방식으로 CodeceptJS를 사용하면 &lt;code&gt;--type&lt;/code&gt; (또는 &lt;code&gt;-t&lt;/code&gt; ) 옵션 과 함께 &lt;code&gt;go&lt;/code&gt; 명령을 실행 하여 &lt;strong&gt;PageFragments&lt;/strong&gt; 를 생성 하고 다른 것은 추상화합니다 .</target>
        </trans-unit>
        <trans-unit id="1f7f3fad738b432634a6b36839a5db97af75369c" translate="yes" xml:space="preserve">
          <source>In a test:</source>
          <target state="translated">테스트에서 :</target>
        </trans-unit>
        <trans-unit id="88675bba8050b45b8f61687d8ef602f1dc1c8fc5" translate="yes" xml:space="preserve">
          <source>In automatic mode the latest version of browser will be used for tests. It is recommended to specify exact version of each browser inside &lt;code&gt;browsers.json&lt;/code&gt; file.</source>
          <target state="translated">자동 모드에서는 최신 버전의 브라우저가 테스트에 사용됩니다. &lt;code&gt;browsers.json&lt;/code&gt; 파일 내에 각 브라우저의 정확한 버전을 지정하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="6a9fc2a46e3b5cf8c848b97ac877c280d5187b1e" translate="yes" xml:space="preserve">
          <source>In case an application has different pages (login, admin, etc) you should use a page object. CodeceptJS can generate a template for it with the command:</source>
          <target state="translated">응용 프로그램에 다른 페이지 (로그인, 관리자 등)가있는 경우 페이지 객체를 사용해야합니다. CodeceptJS는 다음 명령으로 템플릿을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdf34e8a67cc55b9fa2283713c38707833cd1daf" translate="yes" xml:space="preserve">
          <source>In case of CodeceptJS you can be sure that in code it will be as easy as it sounds. You just describe a test scenario with JavaScript DSL and allow the framework to handle the rest.</source>
          <target state="translated">CodeceptJS의 경우 코드에서 들리는 것처럼 쉬울 것입니다. JavaScript DSL로 테스트 시나리오를 설명하고 프레임 워크가 나머지를 처리하도록 허용합니다.</target>
        </trans-unit>
        <trans-unit id="0b0a5528d38413b179131fb08d8cd29eb1b8ce63" translate="yes" xml:space="preserve">
          <source>In case scenarios represent the same logic but differ on data, we can use &lt;em&gt;Scenario Outline&lt;/em&gt; to provide different examples for the same behavior. Scenario outline is just like a basic scenario with some values replaced with placeholders, which are filled from a table. Each set of values is executed as a different test.</source>
          <target state="translated">시나리오가 동일한 논리를 나타내지 만 데이터가 다른 경우 &lt;em&gt;시나리오 개요&lt;/em&gt; 를 사용 하여 동일한 동작에 대해 다른 예를 제공 할 수 있습니다 . 시나리오 개요는 테이블에서 채워지는 자리 표시 자로 대체 된 일부 값이있는 기본 시나리오와 같습니다. 각 값 세트는 다른 테스트로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="6e4c73bee7a0bd4da08209dc9fde83d8120d55c3" translate="yes" xml:space="preserve">
          <source>In case some actions should be taken inside one element (a container or modal window or iframe) you can use &lt;code&gt;within&lt;/code&gt; block to narrow the scope. Please take a note that you can't use within inside another within in Playwright helper:</source>
          <target state="translated">하나의 요소 (컨테이너, 모달 창 또는 iframe) &lt;code&gt;within&lt;/code&gt; 일부 작업을 수행해야하는 경우 블록 내에서 사용 하여 범위를 좁힐 수 있습니다 . 극작가 도우미 내에서 다른 내부에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1f0d2fbbefc7e9f6b561ed1aea7bc5c17f5a32f3" translate="yes" xml:space="preserve">
          <source>In case some actions should be taken inside one element (a container or modal window or iframe) you can use &lt;code&gt;within&lt;/code&gt; block to narrow the scope. Please take a note that you can't use within inside another within in Puppeteer helper:</source>
          <target state="translated">하나의 요소 (컨테이너, 모달 창 또는 iframe) &lt;code&gt;within&lt;/code&gt; 일부 작업을 수행해야하는 경우 블록 내에서 사용 하여 범위를 좁힐 수 있습니다 . Puppeteer 도우미 내에서 다른 내부에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="658d9b818f29e6b0e053e53beef056f8dcabce40" translate="yes" xml:space="preserve">
          <source>In case some actions should be taken inside one element (a container or modal window) you can use &lt;code&gt;within&lt;/code&gt; block to narrow the scope. Please take a note that you can't use within inside another within in Puppeteer helper:</source>
          <target state="translated">하나의 요소 (컨테이너 또는 모달 창) &lt;code&gt;within&lt;/code&gt; 일부 작업을 수행해야하는 경우 블록 내 에서 범위를 좁힐 수 있습니다 . Puppeteer 도우미의 다른 내부에서는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="08bb23e95df0f56cfbcb65f14b3a1226b622cf98" translate="yes" xml:space="preserve">
          <source>In case some code should be executed on one platform and ignored on others use &lt;code&gt;runOnAndroid&lt;/code&gt; and &lt;code&gt;runOnIOS&lt;/code&gt; methods:</source>
          <target state="translated">일부 코드가 한 플랫폼에서 실행되고 다른 플랫폼에서는 무시되는 경우 &lt;code&gt;runOnAndroid&lt;/code&gt; 및 &lt;code&gt;runOnIOS&lt;/code&gt; 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7427a4af31bcb3fd8bd58cad654ad2e40c5916fe" translate="yes" xml:space="preserve">
          <source>In case you need to execute arbitrary code before or after the tests, you can use &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; config. Use it to start and stop webserver, Selenium, etc.</source>
          <target state="translated">테스트 전후에 임의의 코드를 실행해야하는 경우 &lt;code&gt;bootstrap&lt;/code&gt; 및 &lt;code&gt;teardown&lt;/code&gt; 구성을 사용할 수 있습니다 . 웹 서버, 셀레늄 등을 시작하고 중지하는 데 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9a4492f07576e454719d620336fd3e91b5cf5525" translate="yes" xml:space="preserve">
          <source>In modern web applications rendering is happen on client side. Sometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet. To handle this cases &lt;code&gt;wait*&lt;/code&gt; methods introduced.</source>
          <target state="translated">현대 웹 애플리케이션에서 렌더링은 클라이언트 측에서 이루어집니다. 때로는 지연이 발생할 수 있습니다. 아직 페이지에 나타나지 않은 요소를 클릭하려고하면 테스트가 실패 할 수 있습니다. 이 경우를 처리하기 위해 &lt;code&gt;wait*&lt;/code&gt; 메소드가 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="ae9eebd9be0a366c59dea10e9862d83bf88f77e5" translate="yes" xml:space="preserve">
          <source>In modern web applications, rendering is done on the client-side. Sometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet. To handle these cases, the &lt;code&gt;wait*&lt;/code&gt; methods has been introduced.</source>
          <target state="translated">최신 웹 응용 프로그램에서 렌더링은 클라이언트 측에서 수행됩니다. 때로는 지연이 발생할 수 있습니다. 아직 페이지에 표시되지 않은 요소를 클릭하려고하면 테스트가 실패 할 수 있습니다. 이러한 경우를 처리하기 위해 &lt;code&gt;wait*&lt;/code&gt; 메서드가 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="192f4790d1d1542eed72b176919ed5d9ea10926d" translate="yes" xml:space="preserve">
          <source>In order to verify the expected behavior of a web application, its content should be checked. CodeceptJS provides built-in assertions for that. They start with a &lt;code&gt;see&lt;/code&gt; (or &lt;code&gt;dontSee&lt;/code&gt;) prefix.</source>
          <target state="translated">웹 애플리케이션의 예상 동작을 확인하려면 해당 콘텐츠를 확인해야합니다. CodeceptJS는이를위한 내장 어설 션을 제공합니다. 그들은 &lt;code&gt;see&lt;/code&gt; (또는 &lt;code&gt;dontSee&lt;/code&gt; ) 접두사로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="512065fc7903f237f18d30acdc1a47e85c57a020" translate="yes" xml:space="preserve">
          <source>In order to verify the expected behavior of a web application, web page connects should be checked. CodeceptJS provides built-in assertions for that. They start with &lt;code&gt;see&lt;/code&gt; (or &lt;code&gt;dontSee&lt;/code&gt;) prefix, as they describe user's current vision.</source>
          <target state="translated">웹 응용 프로그램의 예상 동작을 확인하려면 웹 페이지 연결을 확인해야합니다. CodeceptJS는이를 위해 내장 된 어설 션을 제공합니다. 그들은으로 시작 &lt;code&gt;see&lt;/code&gt; (또는 &lt;code&gt;dontSee&lt;/code&gt; 가 사용자의 현재의 비전을 설명하는 등,) 접두사.</target>
        </trans-unit>
        <trans-unit id="1ff445b252fc37c3fd56f5315e83a45069dd6cdd" translate="yes" xml:space="preserve">
          <source>In previous examples, we've moved actions into &lt;code&gt;createTodo&lt;/code&gt; function. Is there a more elegant way of refactoring? Can we have something like &lt;code&gt;I.createTodo()&lt;/code&gt; to be used in code? Sure, we can do so by editing &lt;code&gt;steps_file.js&lt;/code&gt; created by init command.</source>
          <target state="translated">이전 예제에서는 액션을 &lt;code&gt;createTodo&lt;/code&gt; 함수 로 옮겼습니다 . 더 우아한 리팩토링 방법이 있습니까? 코드에서 &lt;code&gt;I.createTodo()&lt;/code&gt; 와 같은 것을 사용할 수 있습니까 ? 물론, init 명령으로 작성된 &lt;code&gt;steps_file.js&lt;/code&gt; 를 편집 하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="2aa1d38315290734dbe998f8c505a216490d0d37" translate="yes" xml:space="preserve">
          <source>In record replay mode you can define which routes should be recorded and where to store them:</source>
          <target state="translated">기록 재생 모드에서는 기록 할 경로와 저장할 위치를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bed0e91f0d22e70b70a91f136a45e80027bb9bf5" translate="yes" xml:space="preserve">
          <source>In record-replay mode start mocking to make HTTP requests recorded/replayed, and stop when you don't need to block requests anymore:</source>
          <target state="translated">기록 재생 모드에서 모의를 시작하여 HTTP 요청을 기록 / 재생하고 더 이상 요청을 차단할 필요가 없으면 중지합니다.</target>
        </trans-unit>
        <trans-unit id="3d75391a182c024360d15e33382f4c804ad4fa68" translate="yes" xml:space="preserve">
          <source>In the next example we will &lt;a href=&quot;http://todomvc.com/examples/angularjs/#/&quot;&gt;TodoMVC application (opens new window)&lt;/a&gt;. So let's create a test which will fill in todo list:</source>
          <target state="translated">다음 예제에서는 &lt;a href=&quot;http://todomvc.com/examples/angularjs/#/&quot;&gt;TodoMVC 응용 프로그램 (새 창에서 열림)&lt;/a&gt; 입니다. 이제 할일 목록을 채울 테스트를 만들어 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="b3fe10357cca5d4713631030f365970c48da59b0" translate="yes" xml:space="preserve">
          <source>In the previous examples, we moved actions into the &lt;code&gt;createTodo&lt;/code&gt; function. Is there a more elegant way of refactoring? Can we instead write a function like &lt;code&gt;I.createTodo()&lt;/code&gt; which we can reuse? In fact, we can do so by editing the &lt;code&gt;steps_file.js&lt;/code&gt; file created by the init command.</source>
          <target state="translated">이전 예제에서는 작업을 &lt;code&gt;createTodo&lt;/code&gt; 함수 로 이동했습니다 . 보다 우아한 리팩토링 방법이 있습니까? 대신 재사용 할 수있는 &lt;code&gt;I.createTodo()&lt;/code&gt; 와 같은 함수를 작성할 수 있습니까? 실제로 init 명령으로 만든 &lt;code&gt;steps_file.js&lt;/code&gt; 파일 을 편집하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="2d8f57450e60b6ff738cfe7567e55f7bbe68f763" translate="yes" xml:space="preserve">
          <source>In the same manner additional services from webdriverio can be installed, enabled, and configured.</source>
          <target state="translated">동일한 방식으로 webdriverio의 추가 서비스를 설치, 활성화 및 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e71dd95024f19ca98df8099236fbb192d7d20fdc" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;config&lt;/code&gt; overrides current config of the first helper. To change config of specific helper pass two arguments: helper name and config values:</source>
          <target state="translated">이 경우 &lt;code&gt;config&lt;/code&gt; 는 첫 번째 도우미의 현재 구성 보다 우선합니다. 특정 도우미의 구성을 변경하려면 도우미 이름과 구성 값의 두 가지 인수를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="4fab1481b5c8e165052ed8e318ae77effa850584" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;el&lt;/code&gt; will be an instance of &lt;a href=&quot;https://playwright.dev/#version=master&amp;amp;path=docs%2Fapi.md&amp;amp;q=class-elementhandle&quot;&gt;ElementHandle (opens new window)&lt;/a&gt; which is similar for Playwright &amp;amp; &lt;a href=&quot;https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-class-elementhandle&quot;&gt;Puppeteer (opens new window)&lt;/a&gt;.</source>
          <target state="translated">이 경우 &lt;code&gt;el&lt;/code&gt; 은 Playwright &amp;amp; &lt;a href=&quot;https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-class-elementhandle&quot;&gt;Puppeteer (새 창 열기&lt;/a&gt; )와 유사한 &lt;a href=&quot;https://playwright.dev/#version=master&amp;amp;path=docs%2Fapi.md&amp;amp;q=class-elementhandle&quot;&gt;ElementHandle (새 창 열기)&lt;/a&gt; 의 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="a686a04fbf2058567a11768a6b8262f701bce4fc" translate="yes" xml:space="preserve">
          <source>In this case an an instance of webdriverio element is used. To get a &lt;a href=&quot;https://webdriver.io/docs/api/&quot;&gt;complete API of an element (opens new window)&lt;/a&gt; refer to webdriverio docs.</source>
          <target state="translated">이 경우 webdriverio 요소의 인스턴스가 사용됩니다. &lt;a href=&quot;https://webdriver.io/docs/api/&quot;&gt;요소&lt;/a&gt; 의 완전한 API 를 얻으려면 (새 창에서 열림) webdriverio 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e1565422c6280196269b7f1f5e97f428dc791298" translate="yes" xml:space="preserve">
          <source>In this case test engineers have two options:</source>
          <target state="translated">이 경우 테스트 엔지니어에는 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="06c2dadb4c87351dd29d719a8779820613f16bd2" translate="yes" xml:space="preserve">
          <source>In this case we are accessing WebDriver helper. However, you can replace WebDriver with any helper you use.</source>
          <target state="translated">이 경우 WebDriver 도우미에 액세스하고 있습니다. 그러나 WebDriver를 사용하는 도우미로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5cb824f23356ffa4dbe19a5208486a127b9ca06" translate="yes" xml:space="preserve">
          <source>In this config config all methods of &lt;code&gt;I&lt;/code&gt; will be taken from &lt;code&gt;WebDriverIO&lt;/code&gt; helper.</source>
          <target state="translated">모든 방법을 config (설정)이 설정에서 &lt;code&gt;I&lt;/code&gt; 을 에서 이동합니다 &lt;code&gt;WebDriverIO&lt;/code&gt; 도우미.</target>
        </trans-unit>
        <trans-unit id="017c73f9593c89298c7455fed697856dca2ae3ac" translate="yes" xml:space="preserve">
          <source>In this example we take the power of Playwright to change geolocation in our tests:</source>
          <target state="translated">이 예에서는 Playwright의 힘을 사용하여 테스트에서 지리적 위치를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="81542edbc64d01d3f3d729a14ae7294cc7472390" translate="yes" xml:space="preserve">
          <source>In this guide we will use &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Google Chrome &lt;strong&gt;Puppeteer&lt;/strong&gt;&lt;/a&gt; as a driver for browsers. This allows us to start in a minutes with no extra tools installed.</source>
          <target state="translated">이 가이드에서는 &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Chrome &lt;strong&gt;Puppeteer&lt;/strong&gt;&lt;/a&gt; 를 브라우저 용 드라이버로 사용합니다. 이를 통해 추가 도구를 설치하지 않고도 몇 분 안에 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e55a35f6766f290f3ff89dd76845e0115007fd5" translate="yes" xml:space="preserve">
          <source>In this way Codecept runner class can be extended.</source>
          <target state="translated">이러한 방식으로 Codecept 러너 클래스를 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5cf44273af79edce59964b0e71f79c83f2125ea0" translate="yes" xml:space="preserve">
          <source>In this way CodeceptJS is more similar to Cucumber, so if you run a test with &lt;code&gt;--steps&lt;/code&gt; option you will see this output:</source>
          <target state="translated">이런 식으로 CodeceptJS는 Cucumber와 더 유사하므로 &lt;code&gt;--steps&lt;/code&gt; 옵션 으로 테스트를 실행하면 다음과 같은 출력이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="94f03934128aed7ad6f444a3fae72d289265e7c6" translate="yes" xml:space="preserve">
          <source>In this way, CodeceptJS is similar to Cucumber. If you run a test with &lt;code&gt;--steps&lt;/code&gt; option you will see this output:</source>
          <target state="translated">이런 식으로 CodeceptJS는 Cucumber와 유사합니다. &lt;code&gt;--steps&lt;/code&gt; 옵션 으로 테스트를 실행하면 다음 출력이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="19682bdb9185a5fa9d763d414d0443d3a0bc2456" translate="yes" xml:space="preserve">
          <source>Init</source>
          <target state="translated">Init</target>
        </trans-unit>
        <trans-unit id="541f586efc59c7f211d6c0c591f44a63d97c7064" translate="yes" xml:space="preserve">
          <source>Initialize CodeceptJS with &lt;code&gt;init&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 명령으로 CodeceptJS를 초기화하십시오 .</target>
        </trans-unit>
        <trans-unit id="acb2c3ecf85e27fa2148b9c5192d6ffefb423206" translate="yes" xml:space="preserve">
          <source>Initially this functionality was part of corresponding helper but has been moved into plugin since 1.4</source>
          <target state="translated">처음에이 기능은 해당 헬퍼의 일부이지만 1.4 이후 플러그인으로 이동되었습니다.</target>
        </trans-unit>
        <trans-unit id="441e9f7e908020df9faffebd6213f281eec92fca" translate="yes" xml:space="preserve">
          <source>Injects Angular module.</source>
          <target state="translated">각도 모듈을 주입합니다.</target>
        </trans-unit>
        <trans-unit id="f51e269e651062ff352921d0189405afad497e9e" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;event.all.result&lt;/code&gt; you can obtain test results from all workers, so you can customize the report:</source>
          <target state="translated">&lt;code&gt;event.all.result&lt;/code&gt; 내 에서 모든 작업자로부터 테스트 결과를 얻을 수 있으므로 보고서를 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aef7385cd0573e3c888ccb255e3d4d4b99862b7f" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;stop_server.js&lt;/code&gt;:</source>
          <target state="translated">내부 &lt;code&gt;stop_server.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="44d0edb14a7b601779c54c4a45ba990a499d2497" translate="yes" xml:space="preserve">
          <source>Inside JS config file</source>
          <target state="translated">내부 JS 구성 파일</target>
        </trans-unit>
        <trans-unit id="c0dc5c3d66f6fa35efd118a4125ef0ce7534d403" translate="yes" xml:space="preserve">
          <source>Inside a pause mode you can use &lt;code&gt;loginPage&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;func&lt;/code&gt; variables. Arbitrary JavaScript code can be executed when used &lt;code&gt;=&amp;gt;&lt;/code&gt; prefix:</source>
          <target state="translated">일시 중지 모드에서는 &lt;code&gt;loginPage&lt;/code&gt; , &lt;code&gt;data&lt;/code&gt; , &lt;code&gt;func&lt;/code&gt; 변수를 사용할 수 있습니다 . &lt;code&gt;=&amp;gt;&lt;/code&gt; 접두사를 사용하면 임의의 JavaScript 코드를 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0a8eb6f02c53d5229db19f4921d87348dccefd70" translate="yes" xml:space="preserve">
          <source>Inside those JS files you can use CodeceptJS API (see below) to access its internals.</source>
          <target state="translated">이러한 JS 파일 내에서 CodeceptJS API (아래 참조)를 사용하여 내부에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59197420b1396c694c4993d24171d55c15f9b889" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://codecept.io&quot;&gt;CodeceptJS (opens new window)&lt;/a&gt; and detox-helper:</source>
          <target state="translated">설치 &lt;a href=&quot;https://codecept.io&quot;&gt;CodeceptJS (새 창구를 연다)&lt;/a&gt; 및 해독 - 도우미 :</target>
        </trans-unit>
        <trans-unit id="950f6b92af2e69dd04e6d86ccf1e4745b3b4ee7f" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie (opens new window)&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker (opens new window)&lt;/a&gt; libraries.</source>
          <target state="translated">설치 &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;로지 (새 창을 엽니 다)&lt;/a&gt; 와 &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;위조자는 (새 창에서 열림)&lt;/a&gt; 라이브러리를.</target>
        </trans-unit>
        <trans-unit id="391e83ce6af8aae019fcc76a5817215d18f15321" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker&lt;/a&gt; libraries.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie&lt;/a&gt; 및 &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker&lt;/a&gt; 라이브러리를 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="61c66482b40067692396994f0f2bc60753f84766" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;@wdio/sauce-service&lt;/code&gt; package, as &lt;a href=&quot;https://webdriver.io/docs/sauce-service&quot;&gt;described here (opens new window)&lt;/a&gt;. It is important to make sure it is compatible with current webdriverio version.</source>
          <target state="translated">&lt;a href=&quot;https://webdriver.io/docs/sauce-service&quot;&gt;여기에 설명 된대로 &lt;/a&gt; &lt;code&gt;@wdio/sauce-service&lt;/code&gt; 패키지를 설치합니다 (새 창에서 열림) . 현재 webdriverio 버전과 호환되는지 확인하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="197cfb80dd5c8da1082f551bc76091d0787a0e74" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt; package, as &lt;a href=&quot;https://webdriver.io/docs/selenium-standalone-service&quot;&gt;described here (opens new window)&lt;/a&gt;. It is important to make sure it is compatible with current webdriverio version.</source>
          <target state="translated">&lt;a href=&quot;https://webdriver.io/docs/selenium-standalone-service&quot;&gt;여기에 설명 된대로 &lt;/a&gt; &lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt; 패키지를 설치합니다 (새 창에서 열림) . 현재 webdriverio 버전과 호환되는지 확인하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="66beb467b2adb7a3fdf8bb9ede3a62c06882f853" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + Playwright into current directory</source>
          <target state="translated">현재 디렉토리에 CodeceptJS + Playwright 설치</target>
        </trans-unit>
        <trans-unit id="8103dc0defe901105c45e72902ac3b20d9664d17" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + Puppeteer into current directory</source>
          <target state="translated">현재 디렉토리에 CodeceptJS + Puppeteer 설치</target>
        </trans-unit>
        <trans-unit id="04f34ecbd9e0c7c0c2a3852da681a2bef903d7a4" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + webdriverio into &lt;code&gt;e2e-tests&lt;/code&gt; directory:</source>
          <target state="translated">CodeceptJS + webdriverio를 &lt;code&gt;e2e-tests&lt;/code&gt; 디렉토리에 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="bee62411d8e08721951bc3ba399308b6d501ed86" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + webdriverio into current directory</source>
          <target state="translated">현재 디렉토리에 CodeceptJS + webdriverio 설치</target>
        </trans-unit>
        <trans-unit id="46ceae6315e892ad7d2f3b5050905bfdd66a086e" translate="yes" xml:space="preserve">
          <source>Install TypeScipt</source>
          <target state="translated">TypeScipt 설치</target>
        </trans-unit>
        <trans-unit id="69660255e943f74bfb3354f69e71ec60c504e4b2" translate="yes" xml:space="preserve">
          <source>Install a webdriverio service</source>
          <target state="translated">webdriverio 서비스 설치</target>
        </trans-unit>
        <trans-unit id="007e3ec250bf286e0dd3c9448e3c0775dfe9476f" translate="yes" xml:space="preserve">
          <source>Install an app on device.</source>
          <target state="translated">장치에 앱을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="31cce3c3aac3d7cc2d2a7288962cb8d899b37747" translate="yes" xml:space="preserve">
          <source>Install it and enable to easily switch to headless/window mode, change window size, etc.</source>
          <target state="translated">이를 설치하고 헤드리스 / 창 모드로 쉽게 전환하고 창 크기를 변경하는 등의 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fb8ae7e5a4f9b643f047667e753ba068d6faa33" translate="yes" xml:space="preserve">
          <source>Install it via NPM (locally or globally, depending on CodeceptJS installation type):</source>
          <target state="translated">NPM을 통해 설치하십시오 (CodeceptJS 설치 유형에 따라 로컬 또는 글로벌로).</target>
        </trans-unit>
        <trans-unit id="a2990f8d506589999980af98dd04647970eaa8f0" translate="yes" xml:space="preserve">
          <source>Install it via NPM:</source>
          <target state="translated">NPM을 통해 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="4d29f8e830a4a8f77d407201c3252e30ca501406" translate="yes" xml:space="preserve">
          <source>Install rosie and faker to create a first factory:</source>
          <target state="translated">rosie 및 faker를 설치하여 첫 번째 팩토리를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="e5426e1f97ffa774b6b67d357d9617aeb60ce771" translate="yes" xml:space="preserve">
          <source>Installations</source>
          <target state="translated">Installations</target>
        </trans-unit>
        <trans-unit id="a259cec7e3e5bfc36a635f233ade5946e35642b8" translate="yes" xml:space="preserve">
          <source>Installs a configured application. Application is installed by default.</source>
          <target state="translated">구성된 응용 프로그램을 설치합니다. 애플리케이션은 기본적으로 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="12a7fb5da60214d476bfb717ced4e8588fdc4274" translate="yes" xml:space="preserve">
          <source>Instead of writing a full CSS locator like &lt;code&gt;[data-qa-id=user_name]&lt;/code&gt; simplify it to &lt;code&gt;$user_name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[data-qa-id=user_name]&lt;/code&gt; 과 같은 전체 CSS 로케이터를 작성하는 대신 &lt;code&gt;$user_name&lt;/code&gt; 단순화하십시오 .</target>
        </trans-unit>
        <trans-unit id="a7881cac6e64abca5eafd172df6eb31fe0b84c88" translate="yes" xml:space="preserve">
          <source>Integrations</source>
          <target state="translated">Integrations</target>
        </trans-unit>
        <trans-unit id="427ba68970ec18007e5ab1505b7b2b1fecfecca0" translate="yes" xml:space="preserve">
          <source>IntelliSense</source>
          <target state="translated">IntelliSense</target>
        </trans-unit>
        <trans-unit id="387b6b5c1b6ba7fa6163b921553b7ab4bf68bc72" translate="yes" xml:space="preserve">
          <source>Interactions between &lt;code&gt;I.startMocking()&lt;/code&gt; and &lt;code&gt;I.stopMocking()&lt;/code&gt; will be recorded and saved to &lt;code&gt;data/requests&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;I.startMocking()&lt;/code&gt; 과 &lt;code&gt;I.stopMocking()&lt;/code&gt; 간의 상호 작용 이 기록되고 &lt;code&gt;data/requests&lt;/code&gt; 디렉토리에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="ee9863dabdf00611ce9612b8d2853c80323b736f" translate="yes" xml:space="preserve">
          <source>Interactive Pause</source>
          <target state="translated">대화 형 일시 중지</target>
        </trans-unit>
        <trans-unit id="c7c64d916e772ba673003002b6f9af5e1f020ff0" translate="yes" xml:space="preserve">
          <source>Interactive shell can be started outside the test context by running</source>
          <target state="translated">대화식 쉘은 다음을 실행하여 테스트 컨텍스트 외부에서 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ac347352efd2ddfa91f2f970280919d826c376f" translate="yes" xml:space="preserve">
          <source>Interactive shell. Allows to try &lt;code&gt;I.&lt;/code&gt; commands in runtime</source>
          <target state="translated">대화식 쉘. 런타임에서 &lt;code&gt;I.&lt;/code&gt; 명령 을 시도 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="76d5733b82b9b85e7c7c9538c8b1cbf395dc743e" translate="yes" xml:space="preserve">
          <source>Internet Explorer</source>
          <target state="translated">인터넷 익스플로러</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c23029050858e92bc25cbc85e60ce01a4b4802c6" translate="yes" xml:space="preserve">
          <source>Is there a sane alternative to Selenium?</source>
          <target state="translated">셀레늄에 대한 훌륭한 대안이 있습니까?</target>
        </trans-unit>
        <trans-unit id="1507aba4558a0ce7512766851a1cb27a4a98d469" translate="yes" xml:space="preserve">
          <source>It can be required from codeceptjs package if it is installed locally.</source>
          <target state="translated">로컬로 설치된 경우 codeceptjs 패키지에서 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5650850eb11d138e7f3a0d651e8f06ebf38c38a" translate="yes" xml:space="preserve">
          <source>It can be used in tests like:</source>
          <target state="translated">다음과 같은 테스트에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b02892636257ce37fa6801e394333e805c7ce3e" translate="yes" xml:space="preserve">
          <source>It is common to think that BDD scenario is equal to test. But it's actually not. Not every test should be described as a feature. Not every test is written to test real business value. For instance, regression tests or negative scenario tests are not bringing any value to business. Business analysts don't care about scenario reproducing bug #13, or what error message is displayed when user tries to enter wrong password on login screen. Writing all the tests inside a feature files creates informational overflow.</source>
          <target state="translated">BDD 시나리오는 테스트와 동일하다고 생각하는 것이 일반적입니다. 그러나 실제로는 아닙니다. 모든 테스트가 기능으로 설명되는 것은 아닙니다. 실제 비즈니스 가치를 테스트하기 위해 모든 테스트가 작성된 것은 아닙니다. 예를 들어 회귀 테스트 나 부정적인 시나리오 테스트는 비즈니스에 가치를 가져 오지 않습니다. 비즈니스 분석가는 시나리오 # 13 재생 시나리오 나 사용자가 로그인 화면에 잘못된 비밀번호를 입력하려고 할 때 표시되는 오류 메시지에 신경 쓰지 않습니다. 기능 파일 내에 모든 테스트를 작성하면 정보 오버 플로우가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ee343c68fa212c3e1002755c6573e429733fcd15" translate="yes" xml:space="preserve">
          <source>It is easy to run tests in parallel if you have a lots of tests and free CPU cores. Just execute your tests using &lt;code&gt;run-workers&lt;/code&gt; command specifying the number of workers to spawn:</source>
          <target state="translated">많은 테스트와 여유 CPU 코어가 있으면 병렬로 테스트를 실행하기 쉽습니다. 생성 할 작업자 수를 지정하는 &lt;code&gt;run-workers&lt;/code&gt; 명령을 사용하여 테스트를 실행하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="7dc9f4306f7e13798b04e168363dba1125ca4e4a" translate="yes" xml:space="preserve">
          <source>It is important to make sure it is compatible with current webdriverio version.</source>
          <target state="translated">현재 webdriverio 버전과 호환되는지 확인하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="7499400148ab62addc107aa04a4f96a5d2f775e5" translate="yes" xml:space="preserve">
          <source>It is important to understand that Nightmare executes JavaScript on client and on server side. If you need to find an element you should search for it using client side script, but if you want to do an assertion you should return a data to server side.</source>
          <target state="translated">Nightmare는 클라이언트와 서버 측에서 JavaScript를 실행한다는 것을 이해하는 것이 중요합니다. 요소를 찾아야하는 경우 클라이언트 쪽 스크립트를 사용하여 검색해야하지만 어설 션을 수행하려면 데이터를 서버쪽으로 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="dc73e4d8abd08a168be76b3bece7ad0fe582400c" translate="yes" xml:space="preserve">
          <source>It is modern Electron based testing framework which allows to execute tests in headless mode as well as in window mode for debug purposes. This makes Nightmare very useful, much more handy than PhantomJS. Nightmare is in active development and has nice API for writing acceptance tests. Unfortunately, as all other JavaScript testing frameworks it has its own very custom API. What if you choose it for a project and suddenly you realize that you need something more powerful, like Selenium? Yes, that might be a problem if you are not using CodeceptJS. The one idea behind CodeceptJS is to unify different testing backends under one API, so you could easily write tests the same way no matter what engines you use: webdriverio, Protractor, or Nightmare.</source>
          <target state="translated">최신 Electron 기반 테스트 프레임 워크로 헤드리스 모드와 디버그 모드로 창 모드에서 테스트를 실행할 수 있습니다. 이것은 Nightmare를 PhantomJS보다 훨씬 유용하게 만듭니다. Nightmare는 활발한 개발 단계에 있으며 수용 테스트 작성을위한 훌륭한 API를 가지고 있습니다. 불행히도 다른 모든 JavaScript 테스트 프레임 워크와 마찬가지로 고유 한 사용자 지정 API가 있습니다. 프로젝트를 위해 그것을 선택하고 갑자기 Selenium과 같은 더 강력한 것이 필요하다는 것을 알고 있다면 어떨까요? 예, CodeceptJS를 사용하지 않는 경우 문제가 될 수 있습니다. CodeceptJS의 기본 아이디어는 하나의 API에서 서로 다른 테스트 백엔드를 통합하는 것이므로 webdriverio, Protractor 또는 Nightmare 등 어떤 엔진을 사용하든 동일한 방식으로 테스트를 쉽게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0f0c0bc8bd79f73a8b18002b1fc49af08885e60" translate="yes" xml:space="preserve">
          <source>It is often happen that mobile applications behave similarly on different platforms. Can we build one test for them? Yes! CodeceptJS provides a way to specify different locators for Android and iOS platforms:</source>
          <target state="translated">모바일 응용 프로그램이 다른 플랫폼에서 비슷하게 작동하는 경우가 종종 있습니다. 하나의 테스트를 만들 수 있습니까? 예! CodeceptJS는 Android 및 iOS 플랫폼에 다른 로케이터를 지정하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c4fb1cccf96f1df640995303852436da954c6b49" translate="yes" xml:space="preserve">
          <source>It is possible to execute global conditional retries to handle unforseen errors. Lost connections and network issues are good candidates to be retried whenever they appear.</source>
          <target state="translated">예상치 못한 오류를 처리하기 위해 전역 조건부 재 시도를 실행할 수 있습니다. 연결이 끊어지면 네트워크 문제가 발생할 때마다 다시 시도하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a0f0744acb953e9c1bc76d619168e740cf413aa5" translate="yes" xml:space="preserve">
          <source>It is possible to wait for elements pragmatically. If a test uses element which is not on a page yet, CodeceptJS will wait for few extra seconds before failing. This feature is based on &lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;Implicit Wait (opens new window)&lt;/a&gt; of Selenium. CodeceptJS enables implicit wait only when searching for a specific element and disables in all other cases. Thus, the performance of a test is not affected.</source>
          <target state="translated">실용적으로 요소를 기다릴 수 있습니다. 테스트가 아직 페이지에없는 요소를 사용하는 경우 CodeceptJS는 실패하기 전에 몇 초 동안 추가로 대기합니다. 이 기능은 Selenium의 &lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;암시 적 대기 (새 창에서 열림&lt;/a&gt; )를 기반으로 합니다. CodeceptJS는 특정 요소를 검색 할 때만 암시 적 대기를 활성화하고 다른 모든 경우에는 비활성화합니다. 따라서 테스트 성능은 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="452ed2e046c1ecac42b31c22373a8c238a5358d8" translate="yes" xml:space="preserve">
          <source>It is possible to wait for elements pragmatically. If a test uses element which is not on a page yet, CodeceptJS will wait for few extra seconds before failing. This feature is based on &lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;Implicit Wait&lt;/a&gt; of Selenium. CodeceptJS enables implicit wait only when searching for a specific element and disables in all other cases. Thus, the performance of a test is not affected.</source>
          <target state="translated">요소를 실용적으로 기다릴 수 있습니다. 테스트에서 아직 페이지에없는 요소를 사용하는 경우 CodeceptJS는 몇 초 더 기다렸다가 실패합니다. 이 기능은 &lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;암시 적 대기&lt;/a&gt; 셀레늄을 기반으로 합니다. CodeceptJS는 특정 요소를 검색 할 때만 암시 적 대기를 활성화하고 다른 모든 경우에는 비활성화합니다. 따라서 테스트 성능에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e0c3410dd36f828503605a6490a03519bae768f" translate="yes" xml:space="preserve">
          <source>It is recommended to &lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;filter tests by tags&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;태그별로 테스트&lt;/a&gt; 를 필터링하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="87bcd5d106c48abc021393d2054927158f7994fe" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid &lt;code&gt;console.log&lt;/code&gt; and use output.* methods for printing.</source>
          <target state="translated">&lt;code&gt;console.log&lt;/code&gt; 를 피하고 output. * 인쇄 방법을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="3b8e81c98c93f8b0bf82938280907e78cd98c8cc" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid using implicit CSS locators in methods like &lt;code&gt;fillField&lt;/code&gt; or &lt;code&gt;click&lt;/code&gt;, where semantic locators are allowed. Use locator type to speed up search by various locator strategies.</source>
          <target state="translated">시맨틱 로케이터가 허용되는 &lt;code&gt;fillField&lt;/code&gt; 또는 &lt;code&gt;click&lt;/code&gt; 과 같은 메서드에서 암시 적 CSS 로케이터를 사용하지 않는 것이 좋습니다 . 로케이터 유형을 사용하여 다양한 로케이터 전략으로 검색 속도를 높입니다.</target>
        </trans-unit>
        <trans-unit id="655742c732a4caa4a9d719f7b35fc7ada3562c68" translate="yes" xml:space="preserve">
          <source>It is recommended to use &lt;code&gt;@codeceptjs/configure&lt;/code&gt; package to easily toggle headless mode for WebDriver:</source>
          <target state="translated">WebDriver의 헤드리스 모드를 쉽게 전환 하려면 &lt;code&gt;@codeceptjs/configure&lt;/code&gt; 패키지 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="289c70dc454df045ce2c0089e09bd4c1eb1a010f" translate="yes" xml:space="preserve">
          <source>It is recommended to use a relative URL and keep the base URL in the config file, so you can easily switch between development, stage, and production environments.</source>
          <target state="translated">상대 URL을 사용하고 구성 파일에 기본 URL을 유지하는 것이 좋습니다. 그러면 개발, 준비 및 프로덕션 환경간에 쉽게 전환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c52a609a6d29ab0adf870986bba37d3ffe4afe3d" translate="yes" xml:space="preserve">
          <source>It is recommended to use specific versions of browsers in &lt;code&gt;browsers.json&lt;/code&gt; instead of latest. This will prevent tests fail when browsers will be updated.</source>
          <target state="translated">에서 브라우저의 특정 버전을 사용하는 것이 좋습니다 &lt;code&gt;browsers.json&lt;/code&gt; 대신 최신의. 이렇게하면 브라우저가 업데이트 될 때 테스트가 실패하는 것을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b61bc8c3751e93b857c201974445ce18826ff7d5" translate="yes" xml:space="preserve">
          <source>It is required to set GraphQL &lt;code&gt;endpoint&lt;/code&gt; which is the URL to which all the queries go to. Factory file is expected to be passed via &lt;code&gt;factory&lt;/code&gt; option.</source>
          <target state="translated">모든 쿼리가 이동하는 URL 인 GraphQL &lt;code&gt;endpoint&lt;/code&gt; 을 설정해야 합니다 . 공장 파일은 &lt;code&gt;factory&lt;/code&gt; 옵션을 통해 전달 될 것으로 예상됩니다 .</target>
        </trans-unit>
        <trans-unit id="38a00e84b6e7abd43214493c50b9fd7e6ca7bced" translate="yes" xml:space="preserve">
          <source>It is required to set REST API &lt;code&gt;endpoint&lt;/code&gt; which is the baseURL for all API requests. Factory file is expected to be passed via &lt;code&gt;factory&lt;/code&gt; option.</source>
          <target state="translated">모든 API 요청에 대한 baseURL 인 REST API &lt;code&gt;endpoint&lt;/code&gt; 를 설정해야 합니다. 공장 파일은 &lt;code&gt;factory&lt;/code&gt; 옵션을 통해 전달 될 것으로 예상됩니다 .</target>
        </trans-unit>
        <trans-unit id="0991288d3b9d14661979a56ba5f8238201fb75b6" translate="yes" xml:space="preserve">
          <source>It is required to set REST API &lt;code&gt;endpoint&lt;/code&gt; which is the baseUrl for all API requests. Factory file is expected to be passed via &lt;code&gt;factory&lt;/code&gt; option.</source>
          <target state="translated">모든 API 요청에 대한 baseUrl 인 REST API &lt;code&gt;endpoint&lt;/code&gt; 를 설정해야 합니다. 팩토리 파일은 &lt;code&gt;factory&lt;/code&gt; 옵션을 통해 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="9cf78424fa89a4d02720674816aea3fd29d5c947" translate="yes" xml:space="preserve">
          <source>It will add &lt;code&gt;gherkin&lt;/code&gt; section to the current config. It will also prepare directories for features and step definition. And it will create the first feature file for you.</source>
          <target state="translated">현재 구성에 &lt;code&gt;gherkin&lt;/code&gt; 섹션 이 추가됩니다 . 또한 기능 및 단계 정의를 위해 디렉토리를 준비합니다. 그리고 첫 번째 기능 파일이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="55564481c1c5407f6628c1c8d15b9f08b148bccb" translate="yes" xml:space="preserve">
          <source>It will locate first available webview, switch to it, and switch back to native application after. Inside WebView all browser features are enabled: CSS locators, JavaScript, etc.</source>
          <target state="translated">사용 가능한 첫 번째 웹보기를 찾아서 전환 한 다음 기본 응용 프로그램으로 다시 전환합니다. WebView에서는 CSS 로케이터, JavaScript 등 모든 브라우저 기능이 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="97486e1f3536adff73bb91106960bff1476089e4" translate="yes" xml:space="preserve">
          <source>It's easy to start writing a test if you use &lt;a href=&quot;https://codecept.io/basics#debug&quot;&gt;interactive pause&lt;/a&gt;. Just open a web page and pause execution.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/basics#debug&quot;&gt;Interactive pause&lt;/a&gt; 를 사용하면 테스트 작성을 쉽게 시작할 수 있습니다 . 웹 페이지를 열고 실행을 일시 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="ad930aae29815e48e4403961afb078378775272c" translate="yes" xml:space="preserve">
          <source>It's important to specify a package name under &lt;code&gt;require&lt;/code&gt; section and current detox configuration taken from &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 섹션 에서 패키지 이름을 지정하고 &lt;code&gt;package.json&lt;/code&gt; 에서 가져온 현재 해독 구성 을 지정하는 것이 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="bc216df2631773bd448e3abb9d556513c546e4ce" translate="yes" xml:space="preserve">
          <source>It's quite common that clickable elements are not actual &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;button&lt;/code&gt; elements. This way &lt;code&gt;I.click('Click Me!');&lt;/code&gt; won't work, as well as &lt;code&gt;fillField('name', 'value)&lt;/code&gt;. Finding a correct locator for such cases turns to be almost impossible.</source>
          <target state="translated">클릭 가능한 요소가 실제 &lt;code&gt;a&lt;/code&gt; 또는 &lt;code&gt;button&lt;/code&gt; 요소 가 아닌 것은 매우 일반적입니다 . 이렇게 &lt;code&gt;I.click('Click Me!');&lt;/code&gt; &lt;code&gt;fillField('name', 'value)&lt;/code&gt; 뿐만 아니라 작동하지 않습니다 . 이러한 경우에 대한 올바른 위치 지정자를 찾는 것은 거의 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="f96f0696a3f694e0069b494ba2fc984f2223855f" translate="yes" xml:space="preserve">
          <source>It's readable and simple and working using Playwright API!</source>
          <target state="translated">읽기 쉽고 간단하며 Playwright API를 사용하여 작동합니다!</target>
        </trans-unit>
        <trans-unit id="8549072ce48702e536256da88406bfb515d98ee0" translate="yes" xml:space="preserve">
          <source>It's readable and simple and works using Puppeteer API!</source>
          <target state="translated">읽기 쉽고 간단하며 Puppeteer API를 사용하여 작동합니다!</target>
        </trans-unit>
        <trans-unit id="485b57adcc80650a0f376fe516e0ea35fef68007" translate="yes" xml:space="preserve">
          <source>Italian</source>
          <target state="translated">Italian</target>
        </trans-unit>
        <trans-unit id="2aa75e764723325dfde398ae15df6e3521cd2249" translate="yes" xml:space="preserve">
          <source>JS file executed as is (synchronously).</source>
          <target state="translated">JS 파일은 그대로 (동기식으로) 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="6fd64ad3edc4a3636360a9cc2093ea76a8756af7" translate="yes" xml:space="preserve">
          <source>JS file exporting an object with &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; methods.</source>
          <target state="translated">가진 개체 내보내기 JS 파일 &lt;code&gt;bootstrap&lt;/code&gt; 및 &lt;code&gt;teardown&lt;/code&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="f8a0fa2d9c5834455f3aa640e653939803606b0b" translate="yes" xml:space="preserve">
          <source>JS file exporting function with optional callback for async execution.</source>
          <target state="translated">비동기 실행을위한 선택적 콜백이있는 JS 파일 내보내기 기능</target>
        </trans-unit>
        <trans-unit id="322fc54b342e4cced0eb0ff6bddb04e610200b6e" translate="yes" xml:space="preserve">
          <source>JSON Wire - an older version of such protocol</source>
          <target state="translated">JSON Wire-이러한 프로토콜의 이전 버전</target>
        </trans-unit>
        <trans-unit id="9239c22d1d1c990ca8c206cb408b345a3ec8114c" translate="yes" xml:space="preserve">
          <source>Japanese</source>
          <target state="translated">Japanese</target>
        </trans-unit>
        <trans-unit id="46497f7cf09e80137c1407e9f11384336e4b30de" translate="yes" xml:space="preserve">
          <source>Just as you can specify android, and ios-specific locators, you can do so for web:</source>
          <target state="translated">Android 및 iOS 별 로케이터를 지정할 수있는 것처럼 웹에 대해서도 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec4e4a61535561e82c6d096ccba18432c471340c" translate="yes" xml:space="preserve">
          <source>Just define how many items of any kind you need and ApiDataFactory will create them for you. However, to make this work some preparations required.</source>
          <target state="translated">필요한 모든 종류의 항목을 정의하면 ApiDataFactory에서 해당 항목을 생성합니다. 그러나이 작업을 수행하려면 몇 가지 준비가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c4c8830693708ca0013bac57238ed3d2144cd8ae" translate="yes" xml:space="preserve">
          <source>Just define how many items of any kind you need and the data factory helper will create them for you.</source>
          <target state="translated">필요한 항목의 수를 정의하면 데이터 팩터 리 도우미가 해당 항목을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="480e1adf6455c6ad0d706a8068b19a4856ce4e44" translate="yes" xml:space="preserve">
          <source>Keep tests readable which will make them maintainable.</source>
          <target state="translated">테스트를 읽기 쉽게 유지하여 유지 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="61a8ffdcbb31609d9a5a9bd24c5b8f563f9ff21c" translate="yes" xml:space="preserve">
          <source>Launch Allure server and see the report like on a screenshot above:</source>
          <target state="translated">Allure 서버를 시작하고 위의 스크린 샷과 같은 보고서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e38012f2c9853d683d73a64317e5ebb239475095" translate="yes" xml:space="preserve">
          <source>Launch Selenium with Chrome browser inside a Docker container:</source>
          <target state="translated">Docker 컨테이너 내에서 Chrome 브라우저로 Selenium을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="7d005bd930a47ebf79bb55c8e7bb08d3cd79d063" translate="yes" xml:space="preserve">
          <source>Launch the daemon: &lt;code&gt;appium&lt;/code&gt;</source>
          <target state="translated">데몬을 시작하십시오 : &lt;code&gt;appium&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="311652c7344ff1bed03ab0fafd4b2ef4aefad9ce" translate="yes" xml:space="preserve">
          <source>Launches an application. If application instance already exists, use &lt;a href=&quot;#relaunchApp&quot;&gt;relaunchApp&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램을 시작합니다. 애플리케이션 인스턴스가 이미있는 경우 &lt;a href=&quot;#relaunchApp&quot;&gt;relaunchApp을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d03a3341942dd45f7c50133b73f3513f016630a0" translate="yes" xml:space="preserve">
          <source>Learn CodeceptJS basics</source>
          <target state="translated">CodeceptJS 기본 사항 알아보기</target>
        </trans-unit>
        <trans-unit id="a0dee74c4714842c93b803e5d1c3aa00140efee6" translate="yes" xml:space="preserve">
          <source>Learn how to write CodeceptJS tests with Puppeteer</source>
          <target state="translated">Puppeteer로 CodeceptJS 테스트를 작성하는 방법 알아보기</target>
        </trans-unit>
        <trans-unit id="c033d5370feb09e5c5565fe634bbf43f05a3303d" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;Helpers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;도우미에&lt;/a&gt; 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="55dee9c7824db5e51dee53a4208fc6efb14990e2" translate="yes" xml:space="preserve">
          <source>Let's clarify the terms:</source>
          <target state="translated">용어를 명확히하겠습니다.</target>
        </trans-unit>
        <trans-unit id="96b09004f9adc15d14e58b39f7ad4189734a4fa7" translate="yes" xml:space="preserve">
          <source>Let's execute the test above within WebDriverIO using headless Firefox + Selenium Server packed in Docker container.</source>
          <target state="translated">Docker 컨테이너에 포함 된 헤드리스 Firefox + Selenium 서버를 사용하여 WebDriverIO에서 위의 테스트를 실행 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="d6fc7f03be0b277f8bfc5e45a3d0743dfe21ec72" translate="yes" xml:space="preserve">
          <source>Let's improve our BDD suite by using the advanced features of Gherkin language.</source>
          <target state="translated">Gherkin 언어의 고급 기능을 사용하여 BDD 제품군을 향상 시키십시오.</target>
        </trans-unit>
        <trans-unit id="04bfcde921c04dae9b39dad630e28411daef8d0b" translate="yes" xml:space="preserve">
          <source>Let's learn some more about Gherkin format and then we will see how to execute it with CodeceptJS. We can enable Gherkin for current project by running &lt;code&gt;gherkin:init&lt;/code&gt; command on &lt;strong&gt;already initialized project&lt;/strong&gt;:</source>
          <target state="translated">Gherkin 형식에 대해 자세히 알아보고 CodeceptJS로 형식을 실행하는 방법을 살펴 보겠습니다. &lt;strong&gt;이미 초기화 된 프로젝트&lt;/strong&gt; 에서 &lt;code&gt;gherkin:init&lt;/code&gt; 명령을 실행하여 현재 프로젝트에 Gherkin을 활성화 할 수 있습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3084082d252819023489b17defd0f922f14da23b" translate="yes" xml:space="preserve">
          <source>Let's prepare our test for multiple scenarios. All test scenarios will need to open main page of application, so &lt;code&gt;amOnPage&lt;/code&gt; can be moved into the &lt;code&gt;Before&lt;/code&gt; hook: Scenarios will probably deal with created todo items, so we can move logic of crating new todo into a function.</source>
          <target state="translated">여러 시나리오에 대한 테스트를 준비하겠습니다. 모든 테스트 시나리오는 응용 프로그램의 기본 페이지를 열어야하므로 &lt;code&gt;amOnPage&lt;/code&gt; 를 &lt;code&gt;Before&lt;/code&gt; 후크 로 옮길 수 있습니다 . 시나리오는 생성 된 할 일 항목을 처리하므로 새 할 일을 작성하는 논리를 함수로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ea40c43ac46768bed4247267c52600d1493e600" translate="yes" xml:space="preserve">
          <source>Let's prepare our test to contain multiple scenarios. All of our test scenarios will need to to start with with the main page of application open, so &lt;code&gt;amOnPage&lt;/code&gt; can be moved into the &lt;code&gt;Before&lt;/code&gt; hook: Our scenarios will also probably deal with created todo items, so we can move the logic of creating a new todo into a function.</source>
          <target state="translated">여러 시나리오를 포함하도록 테스트를 준비하겠습니다. 모든 테스트 시나리오는 애플리케이션의 메인 페이지가 열려있는 상태에서 시작해야합니다. 따라서 &lt;code&gt;amOnPage&lt;/code&gt; 는 &lt;code&gt;Before&lt;/code&gt; 후크 로 이동할 수 있습니다 . 함수로 할 일.</target>
        </trans-unit>
        <trans-unit id="6d5c3125a09a284275429fc49cb7d54850da3f33" translate="yes" xml:space="preserve">
          <source>Let's say we need to populate database for a group of tests.</source>
          <target state="translated">테스트 그룹을 위해 데이터베이스를 채워야한다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="960501b1d7981f7f72293641a252d9d193ddab58" translate="yes" xml:space="preserve">
          <source>Let's say you want to test login for different user accounts. In this case, you need to create a datatable and fill it in with credentials. Then use &lt;code&gt;Data().Scenario&lt;/code&gt; to include this data and generate multiple scenarios:</source>
          <target state="translated">다른 사용자 계정에 대한 로그인을 테스트하려고한다고 가정 해 봅시다. 이 경우 데이터 테이블을 작성하고 신임 정보로 채우십시오. 그런 다음 &lt;code&gt;Data().Scenario&lt;/code&gt; 를 사용하여이 데이터를 포함하고 여러 시나리오를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="9681e94777fa060f8b9b5cf5b1568ddb9ce9ad39" translate="yes" xml:space="preserve">
          <source>Let's see how we can use &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pageemulateoptions&quot;&gt;emulate (opens new window)&lt;/a&gt; function to emulate iPhone browser in a test.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pageemulateoptions&quot;&gt;에뮬레이트 (새 창&lt;/a&gt; 열기 ) 기능을 사용하여 테스트에서 iPhone 브라우저를 에뮬레이트 하는 방법을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="464effdbad81227422d048023d28c64f2331268e" translate="yes" xml:space="preserve">
          <source>Let's submit this sample form for a test:</source>
          <target state="translated">테스트를 위해이 샘플 양식을 제출하십시오.</target>
        </trans-unit>
        <trans-unit id="cfbeece8f02da3aa45c0a581b0b33b4f7c2035e4" translate="yes" xml:space="preserve">
          <source>Level of Detail</source>
          <target state="translated">디테일의 정도</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="4ba14e12ba4fd1c58349ed160fe3f97b4909e3eb" translate="yes" xml:space="preserve">
          <source>Like in Mocha you can use &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;only&lt;/code&gt; to skip tests or making a single test to run.</source>
          <target state="translated">모카에서와 마찬가지로 당신이 사용할 수있는 &lt;code&gt;x&lt;/code&gt; 하고 &lt;code&gt;only&lt;/code&gt; 검사를 생략하거나 실행하는 하나의 시험을 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c47c8a1ff832f9f0922b83ccd9e5b263dfd17bc2" translate="yes" xml:space="preserve">
          <source>Like in Mocha you can use &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;only&lt;/code&gt; to skip tests or to run a single test.</source>
          <target state="translated">모카에서와 마찬가지로 당신이 사용할 수있는 &lt;code&gt;x&lt;/code&gt; 하고 &lt;code&gt;only&lt;/code&gt; 검사를 생략하거나 하나의 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="720928e3ef69685c9c203028b449c7e8e91bc032" translate="yes" xml:space="preserve">
          <source>Like you may have noticed, CodeceptJS doesn't use &lt;code&gt;by.*&lt;/code&gt; locators similar to Protractor or Selenium Webdriver. Instead most of methods expect you to pass valid CSS or XPath. In case you don't want CodeceptJS to guess the type of locator, you can specify them using so-called strict locators. This is an absolute analogy of &lt;code&gt;by&lt;/code&gt;, so you can use angular specific locators (like models, repeaters, bindings, etc) in it:</source>
          <target state="translated">당신이 발견 한 수처럼 CodeceptJS는 사용하지 않습니다 &lt;code&gt;by.*&lt;/code&gt; 각도기 또는 셀레늄 Webdriver 유사 로케이터를. 대신 대부분의 메소드는 유효한 CSS 또는 XPath를 전달해야합니다. CodeceptJS가 로케이터 유형을 추측하지 않게하려면 소위 엄격한 로케이터를 사용하여 로케이터를 지정할 수 있습니다. 이것은 &lt;code&gt;by&lt;/code&gt; 의 절대적인 비유 이므로 각도 별 로케이터 (예 : 모델, 리피터, 바인딩 등)를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="39e01aa357475618bb9ef4ff93edffc8a5f70edf" translate="yes" xml:space="preserve">
          <source>Linking Containers</source>
          <target state="translated">컨테이너 연결</target>
        </trans-unit>
        <trans-unit id="5998bbf8f6ecfb6cac315c8921a4e26da7e3bda3" translate="yes" xml:space="preserve">
          <source>Links:</source>
          <target state="translated">Links:</target>
        </trans-unit>
        <trans-unit id="ac8f82335671071c5371f3f6c08baf58bde0d8b7" translate="yes" xml:space="preserve">
          <source>List Commands</source>
          <target state="translated">명령 목록</target>
        </trans-unit>
        <trans-unit id="aac1c9394cc15b83d529d4831acfd8e2e30a9328" translate="yes" xml:space="preserve">
          <source>Load config and run tests from &lt;code&gt;test&lt;/code&gt; dir</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 디렉토리 에서 구성로드 및 테스트 실행</target>
        </trans-unit>
        <trans-unit id="dc99d54d9990e3c134420be3918e88f28531e630" translate="yes" xml:space="preserve">
          <source>Local</source>
          <target state="translated">Local</target>
        </trans-unit>
        <trans-unit id="90ca4018dc479a6393b88b64053da8975208e1db" translate="yes" xml:space="preserve">
          <source>Local Environment Information</source>
          <target state="translated">지역 환경 정보</target>
        </trans-unit>
        <trans-unit id="e93141d83b8039749e1ed013e1831599e1264246" translate="yes" xml:space="preserve">
          <source>Locally</source>
          <target state="translated">Locally</target>
        </trans-unit>
        <trans-unit id="c6dae4952dbdefc8d1d99c838c107bd02f0f3701" translate="yes" xml:space="preserve">
          <source>Locate Element within the Shadow Dom</source>
          <target state="translated">Shadow Dom 내에서 요소 찾기</target>
        </trans-unit>
        <trans-unit id="1bf5fff85d5c97b65fb855f40872bfce7a820280" translate="yes" xml:space="preserve">
          <source>Locate elements by different locator types, including strict locator. Should be used in custom helpers.</source>
          <target state="translated">엄격한 로케이터를 포함하여 다른 로케이터 유형별로 요소를 찾습니다. 사용자 지정 도우미에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="59b5717b200361a58da43745dfa456c8e29bdb5a" translate="yes" xml:space="preserve">
          <source>Locating Element</source>
          <target state="translated">위치 요소</target>
        </trans-unit>
        <trans-unit id="62665d7c3d6cf04792e337332587e03f16094f05" translate="yes" xml:space="preserve">
          <source>Locating Elements</source>
          <target state="translated">위치 요소</target>
        </trans-unit>
        <trans-unit id="00d38aa625673140780b2f90bbc4b8a8d75a6f8a" translate="yes" xml:space="preserve">
          <source>Locator Builder</source>
          <target state="translated">로케이터 빌더</target>
        </trans-unit>
        <trans-unit id="d19e7e05760860ccf59deeaad68e42851c355970" translate="yes" xml:space="preserve">
          <source>Locator builder accepts both XPath and CSS as parameters but converts them to XPath as more feature-rich format. Sometimes provided locators can get very long so it's recommended to simplify the output by providing a brief description for generated XPath:</source>
          <target state="translated">로케이터 빌더는 XPath 및 CSS를 매개 변수로 허용하지만보다 기능이 풍부한 형식으로 XPath로 변환합니다. 제공된 로케이터가 너무 길어질 수 있으므로 생성 된 XPath에 대한 간단한 설명을 제공하여 출력을 단순화하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="52bf20e31c1011d6c474f86447e769778d5207a0" translate="yes" xml:space="preserve">
          <source>Locators</source>
          <target state="translated">Locators</target>
        </trans-unit>
        <trans-unit id="9c8897915f61b909903802bef6d092bfd61b6e80" translate="yes" xml:space="preserve">
          <source>Logs user in for the first test and reuses session for next tests. Works by saving cookies into memory or file. If a session expires automatically logs in again.</source>
          <target state="translated">첫 번째 테스트를 위해 사용자를 로그인하고 다음 테스트를 위해 세션을 재사용합니다. 쿠키를 메모리 또는 파일에 저장하여 작동합니다. 세션이 만료되면 자동으로 다시 로그인합니다.</target>
        </trans-unit>
        <trans-unit id="53175b2a8d1b033f3db0420d2b1a8986898a95fc" translate="yes" xml:space="preserve">
          <source>Long Strings</source>
          <target state="translated">긴 줄</target>
        </trans-unit>
        <trans-unit id="22d3d99dd5ff5e1027c5ab6b1f8f7b76eed8fa2e" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;Playwright&lt;/code&gt; helper is enabled in &lt;code&gt;codecept.conf.js&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.conf.js&lt;/code&gt; 구성 에서 &lt;code&gt;Playwright&lt;/code&gt; 도우미가 활성화되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="85be6c4cb360a7f554afbef9c4ae62b55f74a3d8" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;Puppeteer&lt;/code&gt; helper is enabled in &lt;code&gt;codecept.conf.js&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.conf.js&lt;/code&gt; 구성 에서 &lt;code&gt;Puppeteer&lt;/code&gt; 도우미가 활성화되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="44ab9f620fa5507c6206e3903c432744306f43f8" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;Puppeteer&lt;/code&gt; helper is enabled in &lt;code&gt;codecept.json&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.json&lt;/code&gt; 구성 에서 &lt;code&gt;Puppeteer&lt;/code&gt; 도우미가 활성화되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="bedcfdd998ee980c02d9c4fd504ce8b8ac40f230" translate="yes" xml:space="preserve">
          <source>Make sure to have mocha installed or install it:</source>
          <target state="translated">모카가 설치되어 있거나 설치되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="732a2902091f3108fce0dcbdda8a24b0e693a2bf" translate="yes" xml:space="preserve">
          <source>Make test as simple as:</source>
          <target state="translated">다음과 같이 간단하게 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="9d34a9a7cc1f7032f7ac94e73a5e2756ed464db7" translate="yes" xml:space="preserve">
          <source>Managing data for tests is always a tricky issue. How isolate data between tests, how to prepare data for different tests, etc. There are different approaches to solve it:</source>
          <target state="translated">테스트를위한 데이터 관리는 항상 까다로운 문제입니다. 테스트간에 데이터를 분리하는 방법, 다른 테스트를 위해 데이터를 준비하는 방법 등 다양한 해결 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="85eaa73cf22e8103fec64c238b172f88c9430aff" translate="yes" xml:space="preserve">
          <source>Manipulating Web Page</source>
          <target state="translated">웹 페이지 조작</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="c42e1604eb50f1b42722a49d2633d75d623840b5" translate="yes" xml:space="preserve">
          <source>Methods starting with &lt;code&gt;_&lt;/code&gt; are considered special and won't available in &lt;code&gt;I&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; 로 시작하는 메서드 는 특수한 것으로 간주되며 &lt;code&gt;I&lt;/code&gt; 개체 에서 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="929ecd9d6ef73dbc8009fb8a22a2b36058462667" translate="yes" xml:space="preserve">
          <source>Migrate</source>
          <target state="translated">Migrate</target>
        </trans-unit>
        <trans-unit id="26ef5a2e96319ae15125f82b1aaa5bb2e782c19a" translate="yes" xml:space="preserve">
          <source>Migrate your current &lt;code&gt;codecept.json&lt;/code&gt; to &lt;code&gt;codecept.conf.js&lt;/code&gt;</source>
          <target state="translated">현재 &lt;code&gt;codecept.json&lt;/code&gt; 을 &lt;code&gt;codecept.conf.js&lt;/code&gt; 로 마이그레이션</target>
        </trans-unit>
        <trans-unit id="920dd57e7db1ebeb1fa86a9bf3b1e4bf9701f295" translate="yes" xml:space="preserve">
          <source>Mobile Testing</source>
          <target state="translated">모바일 테스팅</target>
        </trans-unit>
        <trans-unit id="7f4a8a0fbdb9c16505d7df61b9f0544b647dec0e" translate="yes" xml:space="preserve">
          <source>Mobile Testing with Appium</source>
          <target state="translated">Appium을 사용한 모바일 테스트</target>
        </trans-unit>
        <trans-unit id="4784125acaadea4efb94691fa10014f6b7fc2210" translate="yes" xml:space="preserve">
          <source>Mobile applications may have different contexts. For instance, there can be native view and web view with a browser instance in it.</source>
          <target state="translated">모바일 애플리케이션은 다른 컨텍스트를 가질 수 있습니다. 예를 들어 브라우저 인스턴스가 포함 된 기본보기 및 웹보기가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d846386b45743bbe14cdc3d2982c8bf1c5675276" translate="yes" xml:space="preserve">
          <source>Mobile test is pretty similar to a web test. And it is much the same, if you test hybrid app with a web view context inside. However, mobile apps do not have URLs, Cookies, they have other features which may vary on a running platform.</source>
          <target state="translated">모바일 테스트는 웹 테스트와 매우 유사합니다. 내부에서 웹보기 컨텍스트로 하이브리드 앱을 테스트하는 경우에도 거의 동일합니다. 그러나 모바일 앱에는 URL, 쿠키가 없으며 실행중인 플랫폼에 따라 다른 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bc742b1ba7b85ee7099025c31c4b8001358324b" translate="yes" xml:space="preserve">
          <source>Mock response status</source>
          <target state="translated">모의 응답 상태</target>
        </trans-unit>
        <trans-unit id="a9ab5eaa9fb3b319cbafbf3e58b430df15305726" translate="yes" xml:space="preserve">
          <source>MockRequest</source>
          <target state="translated">MockRequest</target>
        </trans-unit>
        <trans-unit id="9a022fca526d139390c90ab4a5bf85c2621f677d" translate="yes" xml:space="preserve">
          <source>MockRequest helper works in these &lt;a href=&quot;https://netflix.github.io/pollyjs/#/configuration?id=mode&quot;&gt;modes (opens new window)&lt;/a&gt;:</source>
          <target state="translated">MockRequest 도우미는 다음 &lt;a href=&quot;https://netflix.github.io/pollyjs/#/configuration?id=mode&quot;&gt;모드&lt;/a&gt; 에서 작동 합니다 (새 창에서 열림) .</target>
        </trans-unit>
        <trans-unit id="d75b64bcf58e87848bed2f610db01e8b70a9a615" translate="yes" xml:space="preserve">
          <source>Mocking Requests</source>
          <target state="translated">조롱 요청</target>
        </trans-unit>
        <trans-unit id="65c790d9e6049590b8419ceb10eadf5015e49ee6" translate="yes" xml:space="preserve">
          <source>Mocking rules will be kept while a test is running. To stop mocking use &lt;code&gt;I.stopMocking()&lt;/code&gt; command</source>
          <target state="translated">모의 규칙은 테스트가 실행되는 동안 유지됩니다. 조롱을 중지하려면 &lt;code&gt;I.stopMocking()&lt;/code&gt; 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="fe13368b017dd0141668aedd62a5de6747898703" translate="yes" xml:space="preserve">
          <source>More commands available in &lt;a href=&quot;https://codecept.io/commands/&quot;&gt;CodeceptJS CLI runner (opens new window)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/commands/&quot;&gt;CodeceptJS CLI runner&lt;/a&gt; 에서 더 많은 명령을 사용할 수 있습니다 (새 창에서 열림) .</target>
        </trans-unit>
        <trans-unit id="6b49e28217c1f32666ad2f3052c8d44a48ac3223" translate="yes" xml:space="preserve">
          <source>More wait actions can be found in helper's reference.</source>
          <target state="translated">더 많은 대기 조치는 도우미 참조에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9edbc959ca2c07544d421c46fe1077c57a7dbd91" translate="yes" xml:space="preserve">
          <source>Moreover, alternatively arguments to &lt;code&gt;codecept run-multiple&lt;/code&gt; command can be passed via &lt;code&gt;RUN_MULTIPLE&lt;/code&gt; and &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; environment variable. For example this is what looks like in your codeceptjs.conf.js</source>
          <target state="translated">또한 &lt;code&gt;codecept run-multiple&lt;/code&gt; 명령 을 codecept하는 인수 를 &lt;code&gt;RUN_MULTIPLE&lt;/code&gt; 및 &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; 환경 변수 를 통해 전달할 수 있습니다 . 예를 들어 이것은 codeceptjs.conf.js에서 보이는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1447f0c44fb0f14e94ba1cd2593592b8579b7d8d" translate="yes" xml:space="preserve">
          <source>Most methods in CodeceptJS use locators which can be either a string or an object.</source>
          <target state="translated">CodeceptJS의 대부분의 메소드는 문자열 또는 객체 일 수있는 로케이터를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7f547fd5d85c5a87d7a70e5e9de520048c02b803" translate="yes" xml:space="preserve">
          <source>Most popular &quot;waiters&quot; are:</source>
          <target state="translated">가장 인기있는 &quot;웨이터&quot;는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2f952d096b61cdf80dec88d7021979e7c11e492d" translate="yes" xml:space="preserve">
          <source>Move page-based actions and selectors into &lt;strong&gt;Page Object&lt;/strong&gt;. All acitivities made on that page can go into methods of page object. If you test Single Page Application a PageObject should represent a screen of your application.</source>
          <target state="translated">페이지 기반 작업 및 선택기를 &lt;strong&gt;페이지 개체&lt;/strong&gt; 로 이동합니다 . 해당 페이지에서 만든 모든 활동은 페이지 개체의 메서드로 이동할 수 있습니다. 단일 페이지 애플리케이션을 테스트하는 경우 PageObject는 애플리케이션의 화면을 나타내야합니다.</target>
        </trans-unit>
        <trans-unit id="9c38d707ce3ea9189ceec80ff3491b68379b0901" translate="yes" xml:space="preserve">
          <source>Move site-wide actions into an &lt;strong&gt;Actor&lt;/strong&gt; file (&lt;code&gt;custom_steps.js&lt;/code&gt; file). Such actions like &lt;code&gt;login&lt;/code&gt;, using site-wide common controls, like drop-downs, rich text editors, calendars.</source>
          <target state="translated">사이트 전체 작업을 &lt;strong&gt;Actor&lt;/strong&gt; 파일 ( &lt;code&gt;custom_steps.js&lt;/code&gt; 파일)로 이동합니다. &lt;code&gt;login&lt;/code&gt; 과 같은 작업은 드롭 다운, 서식있는 텍스트 편집기, 캘린더와 같은 사이트 전체의 공통 컨트롤을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5dcf3399c046f19bfd0b3b7c0dbba1c86c5a1fed" translate="yes" xml:space="preserve">
          <source>Moves cursor to element matched by locator. Extra shift can be set with offsetX and offsetY options</source>
          <target state="translated">로케이터와 일치하는 요소로 커서를 이동합니다. offsetX 및 offsetY 옵션으로 추가 시프트를 설정할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="a4a231fe74e1f3fb9efbaca2a90c5adae2d34ba3" translate="yes" xml:space="preserve">
          <source>Moves cursor to element matched by locator. Extra shift can be set with offsetX and offsetY options.</source>
          <target state="translated">로케이터와 일치하는 요소로 커서를 이동합니다. offsetX 및 offsetY 옵션을 사용하여 추가 이동을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c2bb4c06f43c51226c71b6a2843a24d6d7d4609" translate="yes" xml:space="preserve">
          <source>Moves to url</source>
          <target state="translated">URL로 이동</target>
        </trans-unit>
        <trans-unit id="8ff5be1fa1c98523961d77d211cb9e88954853d1" translate="yes" xml:space="preserve">
          <source>Multi Reports</source>
          <target state="translated">여러 보고서</target>
        </trans-unit>
        <trans-unit id="f791d73cb2fefd38cf0892cd98dd47e9d40cc22b" translate="yes" xml:space="preserve">
          <source>Multi Session Testing</source>
          <target state="translated">다중 세션 테스트</target>
        </trans-unit>
        <trans-unit id="2af4aff976d8180d2d3ba3e2f956a79c40bb6574" translate="yes" xml:space="preserve">
          <source>Multi taps on an element. Element can be located by its text or id or accessibility id.</source>
          <target state="translated">요소를 다중 탭합니다. 요소는 텍스트 또는 ID 또는 접근성 ID로 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97ea8107b5ad8285200980522626d836895b743e" translate="yes" xml:space="preserve">
          <source>Multiple Browsers Execution</source>
          <target state="translated">여러 브라우저 실행</target>
        </trans-unit>
        <trans-unit id="7cac3bae75000230c7f1e6445a092cb67a531d5d" translate="yes" xml:space="preserve">
          <source>Multiple Conditional Assertions</source>
          <target state="translated">여러 조건부 어설 션</target>
        </trans-unit>
        <trans-unit id="7666affaf988e1fde99845201a933fb65cda4245" translate="yes" xml:space="preserve">
          <source>Multiple Sessions</source>
          <target state="translated">여러 세션</target>
        </trans-unit>
        <trans-unit id="dbd5e03f2cabed665b959bfcd34da47eace49590" translate="yes" xml:space="preserve">
          <source>Multiple Windows</source>
          <target state="translated">여러 창</target>
        </trans-unit>
        <trans-unit id="1d6aa05c97c9baa680d1358fb76d5a1cb1378ca1" translate="yes" xml:space="preserve">
          <source>Multiple requests</source>
          <target state="translated">여러 요청</target>
        </trans-unit>
        <trans-unit id="9173c24b8e54eb7552458d097c135b75f8018be1" translate="yes" xml:space="preserve">
          <source>Multiple tests can be refactored to share some logic and locators. It is recommended to use PageObjects for this. For instance, in example above, we could create special actions for creating todos and checking them. If we move such methods in a corresponding object a test would look even clearer:</source>
          <target state="translated">여러 테스트를 리팩토링하여 일부 로직과 로케이터를 공유 할 수 있습니다. 이를 위해 PageObjects를 사용하는 것이 좋습니다. 예를 들어, 위의 예에서 우리는 할 일을 만들고 확인하기위한 특별한 작업을 만들 수 있습니다. 이러한 메서드를 해당 객체로 이동하면 테스트가 더 명확 해집니다.</target>
        </trans-unit>
        <trans-unit id="ab499ae87df0b2103e10772697ddd9a8f8573f9b" translate="yes" xml:space="preserve">
          <source>Multiremote Capabilities</source>
          <target state="translated">다중 원격 기능</target>
        </trans-unit>
        <trans-unit id="f60b569643f256db17904edea7f04c7aa897ee06" translate="yes" xml:space="preserve">
          <source>Multiremote Capabilities (WebDriverIO)</source>
          <target state="translated">다중 원격 기능 (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="2a845a0fad8508ec214837a9f1720684bff0d847" translate="yes" xml:space="preserve">
          <source>NPM / Yarn</source>
          <target state="translated">NPM / 원사</target>
        </trans-unit>
        <trans-unit id="979e32578bea316f3e08f448a04b3fae40de4413" translate="yes" xml:space="preserve">
          <source>Name a new helper &quot;Web&quot;. Now each method of a created class can be added to I object. Be sure to enable this helper in config:</source>
          <target state="translated">새 도우미 이름을 &quot;웹&quot;으로 지정합니다. 이제 생성 된 클래스의 각 메서드를 I 개체에 추가 할 수 있습니다. 구성에서이 도우미를 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="226a91e48e84216526173b19d3eb0b5b630b0c01" translate="yes" xml:space="preserve">
          <source>Name of the container (default : selenoid)</source>
          <target state="translated">컨테이너 이름 (기본값 : 셀레 노이드)</target>
        </trans-unit>
        <trans-unit id="62642e0bd9de1704fc6a76b8c39a6dba8cdca819" translate="yes" xml:space="preserve">
          <source>Native iOS/Android locators can be used with &lt;code&gt;android=&lt;/code&gt; and &lt;code&gt;ios=&lt;/code&gt; prefixes. &lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;Learn more (opens new window)&lt;/a&gt;.</source>
          <target state="translated">기본 iOS / Android 로케이터는 &lt;code&gt;android=&lt;/code&gt; 및 &lt;code&gt;ios=&lt;/code&gt; 접두사 와 함께 사용할 수 있습니다 . &lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;자세히 알아보기 (새 창에서 열림)&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c06f1019f66bfa744bb9b8bdd7feea7401ab56e5" translate="yes" xml:space="preserve">
          <source>Native iOS/Android locators can be used with &lt;code&gt;android=&lt;/code&gt; and &lt;code&gt;ios=&lt;/code&gt; prefixes. &lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;Learn more&lt;/a&gt;.</source>
          <target state="translated">기본 iOS / Android 로케이터는 &lt;code&gt;android=&lt;/code&gt; 및 &lt;code&gt;ios=&lt;/code&gt; 접두사 와 함께 사용할 수 있습니다 . &lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;자세히 알아보십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2cb0a117caafbdead925f90b8bd428adcfb92334" translate="yes" xml:space="preserve">
          <source>Nested IFrames can be set by passing an array &lt;em&gt;(WebDriver, Nightmare &amp;amp; Puppeteer only)&lt;/em&gt;:</source>
          <target state="translated">중첩 된 IFrame은 배열을 전달하여 설정할 수 있습니다 &lt;em&gt;(WebDriver, Nightmare 및 Puppeteer 만 해당)&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2e95960a5c11995494f66737b0c7308893fd1ca9" translate="yes" xml:space="preserve">
          <source>Nested IFrames can be set by passing array &lt;em&gt;(WebDriverIO, Nightmare &amp;amp; Puppeteer only)&lt;/em&gt;:</source>
          <target state="translated">배열을 전달하여 중첩 된 IFrame을 설정할 수 있습니다 &lt;em&gt;(WebDriverIO, Nightmare &amp;amp; Puppeteer 만 해당)&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d58c4386d2c0ac0427fb283b93bb489420ff92ac" translate="yes" xml:space="preserve">
          <source>New locator strategy is ready to use:</source>
          <target state="translated">새로운 로케이터 전략을 사용할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="9c9e29cdf50514a8eca8ce1ae500477de2de8e00" translate="yes" xml:space="preserve">
          <source>New objects can also be added to container in runtime:</source>
          <target state="translated">런타임에 컨테이너에 새 객체를 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1308a915b30d9a7913e583ca86866344c8e91f30" translate="yes" xml:space="preserve">
          <source>Next example demonstrates how to use WebDriver library to create your own test action. Method &lt;code&gt;seeAuthentication&lt;/code&gt; will use &lt;code&gt;browser&lt;/code&gt; instance of WebDriver to get access to cookies. Standard NodeJS assertion library will be used (you can use any).</source>
          <target state="translated">다음 예제는 WebDriver 라이브러리를 사용하여 고유 한 테스트 작업을 만드는 방법을 보여줍니다. 메소드 &lt;code&gt;seeAuthentication&lt;/code&gt; 은 WebDriver의 &lt;code&gt;browser&lt;/code&gt; 인스턴스를 사용 하여 쿠키에 액세스합니다. 표준 NodeJS 어설 션 라이브러리가 사용됩니다 (모든 것을 사용할 수 있음).</target>
        </trans-unit>
        <trans-unit id="15e9eff0b36839a9d5761da8d2489852ba577e3e" translate="yes" xml:space="preserve">
          <source>Next example demonstrates how to use WebDriverIO library to create your own test action. Method &lt;code&gt;seeAuthentication&lt;/code&gt; will use &lt;code&gt;client&lt;/code&gt; instance of WebDriverIO to get access to cookies. Standard NodeJS assertion library will be used (you can use any).</source>
          <target state="translated">다음 예제는 WebDriverIO 라이브러리를 사용하여 자체 테스트 조치를 작성하는 방법을 보여줍니다. 방법 &lt;code&gt;seeAuthentication&lt;/code&gt; 는 사용할 &lt;code&gt;client&lt;/code&gt; 쿠키에 대한 액세스 권한을 얻을 수 WebDriverIO의 인스턴스를. 표준 NodeJS 어설 션 라이브러리가 사용됩니다 (임의로 사용할 수 있음).</target>
        </trans-unit>
        <trans-unit id="df0a572490af28130369da7be3e47e52e90f8f63" translate="yes" xml:space="preserve">
          <source>Next is to configure helper to match factories with API:</source>
          <target state="translated">다음은 팩토리를 API와 일치하도록 헬퍼를 구성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="296692f27911cd0a852be32d24c5efeb231d336e" translate="yes" xml:space="preserve">
          <source>Next popular use case for capabilities is configuring what to do with unhandled alert popups.</source>
          <target state="translated">다음으로 인기있는 기능 사용 사례는 처리되지 않은 경고 팝업으로 수행 할 작업을 구성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="46a15e823f35dd7061cf4fe3feba75d85139b31d" translate="yes" xml:space="preserve">
          <source>Next, is to launch the emulator or connect physical device. Once they are prepared, launch Appium:</source>
          <target state="translated">다음은 에뮬레이터를 시작하거나 물리적 장치를 연결하는 것입니다. 준비가되면 Appium을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="323f607ffa2a112ff3d82ca45b193fc32426e064" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;Acceptance Testing in CodeceptJS &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</source>
          <target state="translated">다음 : &lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;CodeceptJS의 수락 테스트 &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="216e7db5afef9daaa3254c356c30158f9a4b151b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;https://codecept.io/basics/&quot;&gt;CodeceptJS Basics &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</source>
          <target state="translated">다음 : &lt;a href=&quot;https://codecept.io/basics/&quot;&gt;CodeceptJS 기본 사항 &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e5123709f8545f73e1fff6d3196ca9b90b1410db" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;https://codecept.io/puppeteer/&quot;&gt;CodeceptJS with Puppeteer &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</source>
          <target state="translated">다음 : &lt;a href=&quot;https://codecept.io/puppeteer/&quot;&gt;Puppeteer가있는 CodeceptJS &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43574e2f933bbefd377b17ec2c3fe92541a97d86" translate="yes" xml:space="preserve">
          <source>Nightmare</source>
          <target state="translated">Nightmare</target>
        </trans-unit>
        <trans-unit id="b141b6a57cf84b29b3de818917b2abb3107b68ef" translate="yes" xml:space="preserve">
          <source>Nightmare helper is supposed to work in the same manner as WebDriverIO or Protractor. This means that all CodeceptJS actions like &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;fillField&lt;/code&gt;, &lt;code&gt;selectOption&lt;/code&gt; and others are supposed to work in the very same manner. They are expressive and flexible to accept CSS, XPath, names, values, or strict locators. Follow the helper reference for detailed description.</source>
          <target state="translated">악몽 도우미는 WebDriverIO 또는 각도기와 같은 방식으로 작동합니다. 이것은 &lt;code&gt;click&lt;/code&gt; , &lt;code&gt;fillField&lt;/code&gt; , &lt;code&gt;selectOption&lt;/code&gt; 및 기타와 같은 모든 CodeceptJS 작업 이 매우 동일한 방식으로 작동해야 함을 의미합니다. CSS, XPath, 이름, 값 또는 엄격한 로케이터를 수용 할 수있는 표현적이고 유연합니다. 자세한 설명은 도우미 참조를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="8627c8b79808743ff2b61f9676c50f41c05b912f" translate="yes" xml:space="preserve">
          <source>Nightmare helper wraps &lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;Nightmare (opens new window)&lt;/a&gt; library to provide fastest headless testing using Electron engine. Unlike Selenium-based drivers this uses Chromium-based browser with Electron with lots of client side scripts, thus should be less stable and less trusted.</source>
          <target state="translated">악몽 도우미는 &lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;악몽 (새 창에서 열림)&lt;/a&gt; 라이브러리를 래핑 하여 Electron 엔진을 사용하여 가장 빠른 헤드리스 테스트를 제공합니다. Selenium 기반 드라이버와 달리 이것은 많은 클라이언트 측 스크립트와 함께 Electron과 함께 Chromium 기반 브라우저를 사용하므로 덜 안정적이고 덜 신뢰할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1331d4069d372f951acd3a8613cdc19c07ab9c27" translate="yes" xml:space="preserve">
          <source>Nightmare helper wraps &lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;Nightmare&lt;/a&gt; library to provide fastest headless testing using Electron engine. Unlike Selenium-based drivers this uses Chromium-based browser with Electron with lots of client side scripts, thus should be less stable and less trusted.</source>
          <target state="translated">Nightmare 도우미는 &lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;Nightmare&lt;/a&gt; 라이브러리를 래핑 하여 Electron 엔진을 사용하여 가장 빠른 헤드리스 테스트를 제공합니다. Selenium 기반 드라이버와 달리 이것은 많은 클라이언트 측 스크립트와 함께 Electron과 함께 Chromium 기반 브라우저를 사용하므로 안정성이 떨어지고 신뢰도가 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="b2e276e1059ea6fcd0b97f417c0e9598eebe3a1f" translate="yes" xml:space="preserve">
          <source>Nightmare instance can be accessed by custom helper:</source>
          <target state="translated">사용자 정의 도우미가 Nightmare 인스턴스에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f44f5f7e331e77a89a89e96e0b0c8f38415418dc" translate="yes" xml:space="preserve">
          <source>Nightmare provides &lt;code&gt;evaluate&lt;/code&gt; method to execute client-side JavaScript. CodeceptJS registers &lt;code&gt;codeceptjs&lt;/code&gt; object globally on client side with &lt;code&gt;findElement&lt;/code&gt; and &lt;code&gt;findElements&lt;/code&gt; methods in it. They return IDs of matched elements so you can access them in next calls to &lt;code&gt;evaluate&lt;/code&gt;:</source>
          <target state="translated">Nightmare는 클라이언트 측 JavaScript를 실행하기 위한 &lt;code&gt;evaluate&lt;/code&gt; 방법을 제공합니다 . CodeceptJS 는 클라이언트 측에서 &lt;code&gt;findElement&lt;/code&gt; 및 &lt;code&gt;findElements&lt;/code&gt; 메소드를 사용하여 &lt;code&gt;codeceptjs&lt;/code&gt; 객체를 전역 적으로 등록 합니다. 일치하는 요소의 ID를 반환하므로 다음 호출에서 액세스하여 &lt;code&gt;evaluate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40dd41273b67b6e7fbbddb7ef092de631bc1b3cc" translate="yes" xml:space="preserve">
          <source>Nightmare provides you with more control to browser engine than Selenium does. This allows you to use headers in your tests. For instance, CodeceptJS provides &lt;code&gt;haveHeader&lt;/code&gt; method to set default headers for all your HTTP requests:</source>
          <target state="translated">Nightmare는 Selenium보다 브라우저 엔진에 더 많은 제어 기능을 제공합니다. 이를 통해 테스트에서 헤더를 사용할 수 있습니다. 예를 들어 CodeceptJS는 모든 HTTP 요청에 대한 기본 헤더를 설정 하는 &lt;code&gt;haveHeader&lt;/code&gt; 메소드를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="9f44071148112dbaa4c0e42b147e26f7c33875c8" translate="yes" xml:space="preserve">
          <source>NightmareJS support only CSS locators for web elements, while CodeceptJS improves it to use XPath as well. This is how form can be located by labels, and buttons by text in examples above. It is done by injecting client-side scrips (for element location) to every loaded page. Also all events like click, doubleClick, keyPress are &lt;strong&gt;simulated&lt;/strong&gt; by JavaScript, this makes testing less relevant, as they are not native to operating systems.</source>
          <target state="translated">NightmareJS는 웹 요소에 대한 CSS 로케이터 만 지원하는 반면 CodeceptJS는 XPath를 사용하도록 개선합니다. 위 예제에서 레이블로 텍스트를 배치하고 텍스트로 단추를 배치하는 방법입니다. 로드 된 모든 페이지에 클라이언트 측 스크립 (요소 위치 용)을 주입하여 수행됩니다. 또한 click, doubleClick, keyPress와 같은 모든 이벤트는 JavaScript 로 &lt;strong&gt;시뮬레이션&lt;/strong&gt; 되므로 운영 체제에 고유하지 않으므로 테스트의 관련성이 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="2194bc0a5f68ccbc6ac3de513c6bc03db20b03b4" translate="yes" xml:space="preserve">
          <source>NodeJS &amp;gt;= 8.9</source>
          <target state="translated">NodeJS &amp;gt;= 8.9</target>
        </trans-unit>
        <trans-unit id="2f5ba7b67fd810b27bc1b0a1e51aba5c15b7b3cc" translate="yes" xml:space="preserve">
          <source>NodeJS Workers can communicate between each other via messaging system. It may happen that you want to pass some data from one of workers to other. For instance, you may want to share user credentials accross all tests. Data will be appended to a container.</source>
          <target state="translated">NodeJS 작업자는 메시징 시스템을 통해 서로 통신 할 수 있습니다. 작업자 중 하나에서 다른 작업자로 일부 데이터를 전달하려고 할 수 있습니다. 예를 들어 모든 테스트에서 사용자 자격 증명을 공유 할 수 있습니다. 데이터가 컨테이너에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="2eef98e1d1590b3345f7ce9dbddcc3c8d86645e1" translate="yes" xml:space="preserve">
          <source>Note: Chunking will be most effective if you have many individual test files that contain only a small amount of scenarios. Otherwise the combined execution time of many scenarios or big scenarios in one single test file potentially lead to an uneven execution time.</source>
          <target state="translated">참고 : 소량의 시나리오 만 포함 된 개별 테스트 파일이 많은 경우 청킹이 가장 효과적입니다. 그렇지 않으면 하나의 단일 테스트 파일에서 여러 시나리오 또는 큰 시나리오의 결합 된 실행 시간으로 인해 실행 시간이 고르지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bca2e2bc86dffc00701b4bd9f755bdc3c5a83b9e" translate="yes" xml:space="preserve">
          <source>Note: When connecting to remote browser &lt;code&gt;show&lt;/code&gt; and specific &lt;code&gt;chrome&lt;/code&gt; options (e.g. &lt;code&gt;headless&lt;/code&gt; or &lt;code&gt;devtools&lt;/code&gt;) are ignored.</source>
          <target state="translated">참고 : 원격 브라우저 &lt;code&gt;show&lt;/code&gt; 연결할 때 특정 &lt;code&gt;chrome&lt;/code&gt; 옵션 (예 : &lt;code&gt;headless&lt;/code&gt; 또는 &lt;code&gt;devtools&lt;/code&gt; )은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="5015d20b39fc3bb991bf1edb0d8f7be3993ec31b" translate="yes" xml:space="preserve">
          <source>Now each worker has &lt;code&gt;userData&lt;/code&gt; inside a container. However, it is empty. When you obtain real data in one of tests you can this data accross tests. Use &lt;code&gt;inject&lt;/code&gt; function to access data inside a container:</source>
          <target state="translated">이제 각 작업자는 컨테이너 내부에 &lt;code&gt;userData&lt;/code&gt; 를 갖습니다 . 그러나 비어 있습니다. 테스트 중 하나에서 실제 데이터를 얻을 때 테스트를 통해이 데이터를 얻을 수 있습니다. &lt;code&gt;inject&lt;/code&gt; 기능을 사용 하여 컨테이너 내부의 데이터에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="cd4b0af1ccece2fa1abec3a08147daa33181356e" translate="yes" xml:space="preserve">
          <source>Now execute tests with &lt;code&gt;run-rerun&lt;/code&gt; command:</source>
          <target state="translated">이제 &lt;code&gt;run-rerun&lt;/code&gt; 명령으로 테스트를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="4414f6bd14b6771cde7d5e7e60c548053b38715a" translate="yes" xml:space="preserve">
          <source>Now let's see how to update this file for different parallelization modes:</source>
          <target state="translated">이제 다른 병렬화 모드에 대해이 파일을 업데이트하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="a3854c94ada9a768e304b4fa1ffe876f7ee76dfd" translate="yes" xml:space="preserve">
          <source>Now this objects can be retrieved by the name specified in configuration. CodeceptJS generator commands (like &lt;code&gt;codeceptjs gpo&lt;/code&gt;) will update configuration for you.</source>
          <target state="translated">이제이 오브젝트는 구성에 지정된 이름으로 검색 할 수 있습니다. CodeceptJS 생성기 명령 (예 : &lt;code&gt;codeceptjs gpo&lt;/code&gt; )이 구성을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="d2803e7f5ce7f669dff787ae4d1afe1218245ead" translate="yes" xml:space="preserve">
          <source>Now you can write test like this:</source>
          <target state="translated">이제 다음과 같이 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a9dd9f35862f36f7832c7624fc4504526397df0" translate="yes" xml:space="preserve">
          <source>Now you can write tests like this:</source>
          <target state="translated">이제 다음과 같은 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d36cabeccab5452b643072a1f49f57939a069bc7" translate="yes" xml:space="preserve">
          <source>Now you should include &lt;code&gt;/// &amp;lt;reference path=&quot;./steps.d.ts&quot; /&amp;gt;&lt;/code&gt; into your test files to get method autocompletion while writing tests.</source>
          <target state="translated">이제 테스트를 작성하는 동안 메소드 자동 완성을 얻으려면 &lt;code&gt;/// &amp;lt;reference path=&quot;./steps.d.ts&quot; /&amp;gt;&lt;/code&gt; 를 테스트 파일에 포함시켜야 합니다.</target>
        </trans-unit>
        <trans-unit id="9bd533173ee0896d69a76b0c753d744699f05e67" translate="yes" xml:space="preserve">
          <source>On MacOS/Linux run following commands:</source>
          <target state="translated">MacOS / Linux에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="f410197b8f9ee05cbc5a2063df86700a5920239f" translate="yes" xml:space="preserve">
          <source>Once you configured Appium, create the first test by running</source>
          <target state="translated">Appium을 구성한 후 다음을 실행하여 첫 번째 테스트를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="bf0579943cfaa10c9ed1d6456b903ba3ca9cebc4" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;tests/e2e/app_js&lt;/code&gt; and see the demo test</source>
          <target state="translated">&lt;code&gt;tests/e2e/app_js&lt;/code&gt; 를 열고 데모 테스트보기</target>
        </trans-unit>
        <trans-unit id="03bf045df8c00b56171b51ace3b6952e4e8d86c9" translate="yes" xml:space="preserve">
          <source>Open new tab and automatically switched to new tab</source>
          <target state="translated">새 탭을 열고 자동으로 새 탭으로 전환</target>
        </trans-unit>
        <trans-unit id="3e1fe5186d355a07561fc61872bddfa883fe941f" translate="yes" xml:space="preserve">
          <source>Open new tab and switch to it</source>
          <target state="translated">새 탭을 열고 전환하십시오</target>
        </trans-unit>
        <trans-unit id="92c0fb5aca6fde45ed5a0f97fc32b555297e7a44" translate="yes" xml:space="preserve">
          <source>Open new tab and switch to it.</source>
          <target state="translated">새 탭을 열고 전환하십시오.</target>
        </trans-unit>
        <trans-unit id="a28270e2b7cf79e3cc3116a9cfbcd092992bdf96" translate="yes" xml:space="preserve">
          <source>Open the notifications panel on the device.</source>
          <target state="translated">장치에서 알림 패널을 엽니 다.</target>
        </trans-unit>
        <trans-unit id="64af49060a4a121083b3d9202f554783dd297530" translate="yes" xml:space="preserve">
          <source>Opening a Page</source>
          <target state="translated">페이지 열기</target>
        </trans-unit>
        <trans-unit id="76b336c7b278afc21f1dff4b6eb852fca9db5868" translate="yes" xml:space="preserve">
          <source>Opening a Web Page</source>
          <target state="translated">웹 페이지 열기</target>
        </trans-unit>
        <trans-unit id="47246f41e1dd6972dccc2e4ca4d082212558b907" translate="yes" xml:space="preserve">
          <source>Opens a web page in a browser. Requires relative or absolute url. If url starts with &lt;code&gt;/&lt;/code&gt;, opens a web page of a site defined in &lt;code&gt;url&lt;/code&gt; config parameter.</source>
          <target state="translated">브라우저에서 웹 페이지를 엽니 다. 상대 또는 절대 URL이 필요합니다. URL로 시작하는 경우 &lt;code&gt;/&lt;/code&gt; ,에 정의 된 사이트의 웹 페이지가 열립니다 &lt;code&gt;url&lt;/code&gt; 설정 매개 변수를.</target>
        </trans-unit>
        <trans-unit id="61671a7e71eadbb986b88c9f0323cf908808d140" translate="yes" xml:space="preserve">
          <source>Opposite to &lt;code&gt;see&lt;/code&gt;. Checks that a text is not present on a page. Use context parameter to narrow down the search.</source>
          <target state="translated">&lt;code&gt;see&lt;/code&gt; 반대 . 페이지에 텍스트가 없는지 확인합니다. 컨텍스트 매개 변수를 사용하여 검색 범위를 좁히십시오.</target>
        </trans-unit>
        <trans-unit id="9896ba60cc2547225051dff4a875e959e798cba8" translate="yes" xml:space="preserve">
          <source>Opposite to &lt;code&gt;seeElement&lt;/code&gt;. Checks that element is not visible (or in DOM)</source>
          <target state="translated">&lt;code&gt;seeElement&lt;/code&gt; 와 반대 입니다. 요소가 보이지 않는지 (또는 DOM에서) 확인</target>
        </trans-unit>
        <trans-unit id="c7e7ff41d5d5d7f8f06f07a387d9a5541afd679c" translate="yes" xml:space="preserve">
          <source>Opposite to &lt;code&gt;seeElementInDOM&lt;/code&gt;. Checks that element is not on page.</source>
          <target state="translated">&lt;code&gt;seeElementInDOM&lt;/code&gt; 과 반대 입니다. 요소가 페이지에 없는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="bdcc5504f4d991893da05ca64a74caccde22b9f8" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;waitForAction&lt;/code&gt; defines how long to wait after a click, doubleClick or pressKey action is performed. Test execution may happen much faster than the response is rendered, so make sure you set a proper delay value. By default CodeceptJS waits for 500ms.</source>
          <target state="translated">&lt;code&gt;waitForAction&lt;/code&gt; 옵션 은 클릭, doubleClick 또는 pressKey 조치가 수행 된 후 대기하는 시간을 정의합니다. 테스트 실행은 응답이 렌더링되는 것보다 훨씬 빠를 수 있으므로 적절한 지연 값을 설정하십시오. 기본적으로 CodeceptJS는 500ms 동안 기다립니다.</target>
        </trans-unit>
        <trans-unit id="313f6a08861648abf55d40b0462069d48b4ef209" translate="yes" xml:space="preserve">
          <source>Optional click</source>
          <target state="translated">선택적 클릭</target>
        </trans-unit>
        <trans-unit id="e0c42c2296e3c659809e930d649cdd357abc883e" translate="yes" xml:space="preserve">
          <source>Options can be passed by calling &lt;code&gt;codeceptjs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;codeceptjs&lt;/code&gt; 를 호출하여 옵션을 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="06f0d9c50d54c6a44a0e811bbbd425df4a2a4acd" translate="yes" xml:space="preserve">
          <source>Or even without a test body:</source>
          <target state="translated">또는 테스트 기관 없이도 :</target>
        </trans-unit>
        <trans-unit id="96bb2374a83900b916d3baf573ea2f1829a44648" translate="yes" xml:space="preserve">
          <source>Or in provided path</source>
          <target state="translated">또는 제공된 경로에서</target>
        </trans-unit>
        <trans-unit id="66f05bc834fe40972ad70aa4a20aa7bf891a0f5d" translate="yes" xml:space="preserve">
          <source>Or see &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;alternative installation options (opens new window)&lt;/a&gt;</source>
          <target state="translated">또는 &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;다른 설치 옵션보기 (새 창에서 열림)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d0d92ff465685e47177da5b903470844574c0e54" translate="yes" xml:space="preserve">
          <source>Or see &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;alternative installation options&lt;/a&gt; If you already have CodeceptJS project, just install &lt;code&gt;puppeteer&lt;/code&gt; package and enable it in config.</source>
          <target state="translated">또는 &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;대체 설치 옵션을&lt;/a&gt; 참조하십시오. CodeceptJS 프로젝트가 이미 있으면 &lt;code&gt;puppeteer&lt;/code&gt; 패키지를 설치 하고 구성에서 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="f6a2b3137e2f1d839c149498d20ba930934ef41a" translate="yes" xml:space="preserve">
          <source>Otherwise, follow next steps to introduce TypeScript into the project.</source>
          <target state="translated">그렇지 않으면 다음 단계에 따라 TypeScript를 프로젝트에 도입하십시오.</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="40e8f9b6387804ad2404baacc201969fc9adf8dd" translate="yes" xml:space="preserve">
          <source>Output is printed for all running processes. Each line is tagged with a suite and browser name:</source>
          <target state="translated">실행중인 모든 프로세스에 대해 출력이 인쇄됩니다. 각 라인에는 제품군 및 브라우저 이름이 태그됩니다.</target>
        </trans-unit>
        <trans-unit id="13a62f730a0e26b4fcacd0a4b83936feb9bb2db5" translate="yes" xml:space="preserve">
          <source>Output module provides 4 verbosity levels. Depending on the mode you can have different information printed using corresponding functions.</source>
          <target state="translated">출력 모듈은 4 가지 세부 레벨을 제공합니다. 모드에 따라 해당 기능을 사용하여 다른 정보를 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="d4a122c76ddc90ef42936ca215ff4887a7e939e7" translate="yes" xml:space="preserve">
          <source>Override config on the fly. Provide valid JSON which will be merged into current config:</source>
          <target state="translated">구성을 즉시 재정의하십시오. 현재 구성으로 병합 될 유효한 JSON을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="9c7e9494acb57670c4395cfd2599ae9349d79109" translate="yes" xml:space="preserve">
          <source>Page Fragments</source>
          <target state="translated">페이지 조각</target>
        </trans-unit>
        <trans-unit id="3637b88b78dd96f1d06c042a982511affe107178" translate="yes" xml:space="preserve">
          <source>Page Fragments represent autonomous parts of a page, like modal boxes, components, widgets. Technically they are the same as PageObject but conceptually they are a bit different. For instance, it is recommended that Page Fragment to include a root locator of a component. Methods of page fragment can use &lt;code&gt;within&lt;/code&gt; block to narrow scope to a root locator:</source>
          <target state="translated">페이지 조각은 모달 상자, 구성 요소, 위젯과 같은 페이지의 자율 부분을 나타냅니다. 기술적으로 이들은 PageObject와 동일하지만 개념 상 약간 다릅니다. 예를 들어, Page Fragment는 구성 요소의 루트 로케이터를 포함하는 것이 좋습니다. 페이지 조각화 방법은 블록 &lt;code&gt;within&lt;/code&gt; 범위를 루트 로케이터로 좁힐 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ecdaf79edc200525b1e90f72ba93b4ac58415309" translate="yes" xml:space="preserve">
          <source>Page Fragments represent autonomous parts of a page, like modal boxes, components, widgets. Technically, they are the same as PageObject but conceptually they are a bit different. For instance, it is recommended that Page Fragment includes a root locator of a component. Methods of page fragments can use &lt;code&gt;within&lt;/code&gt; block to narrow scope to a root locator:</source>
          <target state="translated">페이지 조각은 모달 상자, 구성 요소, 위젯과 같은 페이지의 자율적 인 부분을 나타냅니다. 기술적으로는 PageObject와 동일하지만 개념적으로는 약간 다릅니다. 예를 들어 페이지 조각에는 구성 요소의 루트 로케이터가 포함되는 것이 좋습니다. 페이지 조각의 메서드는 블록 &lt;code&gt;within&lt;/code&gt; 사용 하여 범위를 루트 로케이터로 좁힐 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ebaffd1ddbaebe85d6df5d5cdd306e48e8a8ecce" translate="yes" xml:space="preserve">
          <source>Page Object</source>
          <target state="translated">페이지 객체</target>
        </trans-unit>
        <trans-unit id="58b53ac2103a1a696e3328a6a7500fe5857d5f5e" translate="yes" xml:space="preserve">
          <source>Page Object Code Generator</source>
          <target state="translated">페이지 개체 코드 생성기</target>
        </trans-unit>
        <trans-unit id="6f6fed1d0200989b6e3e94de10d6d0ed652cfd7a" translate="yes" xml:space="preserve">
          <source>Page Objects</source>
          <target state="translated">페이지 개체</target>
        </trans-unit>
        <trans-unit id="005459d57fdb90640ab2af38aec9c3e1047ea64b" translate="yes" xml:space="preserve">
          <source>Page Objects can be be functions, arrays or classes. When declared as classes you can easily extend them in other page objects.</source>
          <target state="translated">페이지 개체는 함수, 배열 또는 클래스 일 수 있습니다. 클래스로 선언하면 다른 페이지 개체에서 쉽게 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7675015f0524f489b145693a13c9d5c77708e556" translate="yes" xml:space="preserve">
          <source>PageObject</source>
          <target state="translated">PageObject</target>
        </trans-unit>
        <trans-unit id="fcc5ab0ecc3a3e681fb917aa411d039eafd0c966" translate="yes" xml:space="preserve">
          <source>PageObject and PageFragment names are declared inside &lt;code&gt;include&lt;/code&gt; section of &lt;code&gt;codecept.conf.js&lt;/code&gt;. See &lt;a href=&quot;#dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt;</source>
          <target state="translated">PageObject 및 PageFragment 이름은 내부에 선언 &lt;code&gt;include&lt;/code&gt; 의 섹션 &lt;code&gt;codecept.conf.js&lt;/code&gt; 을 . &lt;a href=&quot;#dependency-injection&quot;&gt;의존성 주입&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="8c279b1e11747efb218f24c8c8aa639b6d0fa5dc" translate="yes" xml:space="preserve">
          <source>PageObjects and other variables can also be passed to as object:</source>
          <target state="translated">PageObjects 및 기타 변수도 객체로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b338af39aea20defe562c404d22d384da1fb4d9" translate="yes" xml:space="preserve">
          <source>Parallel Execution</source>
          <target state="translated">병렬 실행</target>
        </trans-unit>
        <trans-unit id="b39b4e2198a91bfb7d467d9a94c9a03a9cf46391" translate="yes" xml:space="preserve">
          <source>Parallel Execution by Workers</source>
          <target state="translated">작업자의 병렬 실행</target>
        </trans-unit>
        <trans-unit id="60ed18d7d5e4eff4dd9796d52282f10ddf245e96" translate="yes" xml:space="preserve">
          <source>Parallel Run</source>
          <target state="translated">병렬 실행</target>
        </trans-unit>
        <trans-unit id="0f332eeefd007bb0043ccb46738196508c6a602b" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="ed0e5700d7ce87646a09dd5a762411c98330ac4e" translate="yes" xml:space="preserve">
          <source>Parameters (ApiDataFactory)</source>
          <target state="translated">매개 변수 (ApiDataFactory)</target>
        </trans-unit>
        <trans-unit id="50b7c22cc891899be5dce6a5e971b905e16367c7" translate="yes" xml:space="preserve">
          <source>Parameters (Appium)</source>
          <target state="translated">매개 변수 (Appium)</target>
        </trans-unit>
        <trans-unit id="90e892db0eb750a83e189f1428dbdf9dc8c3e379" translate="yes" xml:space="preserve">
          <source>Parameters (FileSystem)</source>
          <target state="translated">매개 변수 (파일 시스템)</target>
        </trans-unit>
        <trans-unit id="2021385dc4bcc7cb809a260607141698f6b58b9d" translate="yes" xml:space="preserve">
          <source>Parameters (Nightmare)</source>
          <target state="translated">매개 변수 (Nightmare)</target>
        </trans-unit>
        <trans-unit id="196b1cbde87e65f500d021de0336143fa40330aa" translate="yes" xml:space="preserve">
          <source>Parameters (Protractor)</source>
          <target state="translated">매개 변수 (분도기)</target>
        </trans-unit>
        <trans-unit id="e51bb02db41b76881a1d3ff4bea45a307dd6c6ea" translate="yes" xml:space="preserve">
          <source>Parameters (Puppeteer)</source>
          <target state="translated">매개 변수 (인형)</target>
        </trans-unit>
        <trans-unit id="59b79ac421c5b0874dac6c7f2c3dc5d4f0171faa" translate="yes" xml:space="preserve">
          <source>Parameters (REST)</source>
          <target state="translated">매개 변수 (REST)</target>
        </trans-unit>
        <trans-unit id="bfb863f474ececaea58d7539342f6dd7cf017e42" translate="yes" xml:space="preserve">
          <source>Parameters (WebDriverIO)</source>
          <target state="translated">매개 변수 (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="7a5c99c0ce501cd2ffbc95997b1adb1366b6726c" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;--steps&lt;/code&gt; or &lt;code&gt;--debug&lt;/code&gt; option as in &lt;code&gt;run&lt;/code&gt; command to also get steps and substeps to be printed. In this mode &lt;strong&gt;tests will be executed&lt;/strong&gt; but all helpers and plugins disabled, so no real actions will be performed.</source>
          <target state="translated">패스 &lt;code&gt;--steps&lt;/code&gt; 또는 &lt;code&gt;--debug&lt;/code&gt; 와 같이 옵션을 &lt;code&gt;run&lt;/code&gt; 또한 단계와 하위 단계를 인쇄 할 수 명령. 이 모드에서는 &lt;strong&gt;테스트가 실행&lt;/strong&gt; 되지만 모든 헬퍼와 플러그인이 비활성화되어 실제 작업이 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a65d52afa5ed2a236bee922d2a7f6a607e5c3c9" translate="yes" xml:space="preserve">
          <source>Pass a function to &lt;code&gt;when&lt;/code&gt; option to retry only when error matches the expected one.</source>
          <target state="translated">오류가 예상 한 것과 일치 할 때만 재 시도 하도록 옵션 을 &lt;code&gt;when&lt;/code&gt; 옵션에 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="7caa414a3500d57d299b2b75de079d8e928336f3" translate="yes" xml:space="preserve">
          <source>Pass a function to the &lt;code&gt;when&lt;/code&gt; option to retry only when an error matches the expected one.</source>
          <target state="translated">오류가 예상 한 오류와 일치 할 때만 재 시도 하려면 &lt;code&gt;when&lt;/code&gt; 옵션에 함수를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="fa2b1d21f91d8f6e5c3313c0ce4a3427aa65feae" translate="yes" xml:space="preserve">
          <source>Passing Options</source>
          <target state="translated">전달 옵션</target>
        </trans-unit>
        <trans-unit id="718c85377eaef04d2bd92a0f340ce63dcf66cf93" translate="yes" xml:space="preserve">
          <source>Passing a function will enable you to provide your own chunking algorithm. The first argument passed to you function is an array of all test files, if you enabled grep the test files passed are already filtered to match the grep pattern.</source>
          <target state="translated">기능을 전달하면 자체 청킹 알고리즘을 제공 할 수 있습니다. 함수에 전달 된 첫 번째 인수는 모든 테스트 파일의 배열입니다. grep을 활성화하면 전달 된 테스트 파일이 grep 패턴과 일치하도록 이미 필터링됩니다.</target>
        </trans-unit>
        <trans-unit id="781961bc81c25697841ecce5d4d9dad9f6b261c6" translate="yes" xml:space="preserve">
          <source>Pause</source>
          <target state="translated">Pause</target>
        </trans-unit>
        <trans-unit id="14517935971dca69a9fb78f381ca48fcf107b113" translate="yes" xml:space="preserve">
          <source>Pause on Fail</source>
          <target state="translated">실패시 일시 중지</target>
        </trans-unit>
        <trans-unit id="c8a4a55c6863045818ee0d0c0d7101f958d533a7" translate="yes" xml:space="preserve">
          <source>Pauses execution for a number of seconds.</source>
          <target state="translated">몇 초 동안 실행을 일시 중지합니다.</target>
        </trans-unit>
        <trans-unit id="9facce987399d558ed7206c62e42b770ec17ecb6" translate="yes" xml:space="preserve">
          <source>Perform a click on a link or a button, given by a locator. If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string. For buttons, the &quot;value&quot; attribute, &quot;name&quot; attribute, and inner text are searched. For links, the link text is searched. For images, the &quot;alt&quot; attribute and inner text of any parent links are searched.</source>
          <target state="translated">로케이터가 제공하는 링크 또는 버튼을 클릭하십시오. 퍼지 로케이터가 제공되면 로케이터 문자열과 일치하는 단추, 링크 또는 이미지가 페이지에서 검색됩니다. 버튼의 경우 &quot;값&quot;속성, &quot;이름&quot;속성 및 내부 텍스트가 검색됩니다. 링크의 경우 링크 텍스트가 검색됩니다. 이미지의 경우, &quot;alt&quot;속성 및 상위 링크의 내부 텍스트가 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="87f84ef4175df84f873458465879e995f3886b3e" translate="yes" xml:space="preserve">
          <source>Perform a rotation gesture centered on the specified element.</source>
          <target state="translated">지정된 요소를 중심으로 회전 제스처를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="79e9652b7d55185576a61e487c8c4311fe4ce68e" translate="yes" xml:space="preserve">
          <source>Perform a shake action on the device.</source>
          <target state="translated">장치에서 흔들림 동작을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="559f2417ff77dc02afaf38f1e1c127a4f2a1e869" translate="yes" xml:space="preserve">
          <source>Perform a swipe down on an element.</source>
          <target state="translated">요소를 아래로 살짝 밉니다.</target>
        </trans-unit>
        <trans-unit id="edeb293f5d5fd805e739cb77322fb47b3f331125" translate="yes" xml:space="preserve">
          <source>Perform a swipe in selected direction on an element to searchable element.</source>
          <target state="translated">요소를 검색 가능한 요소로 선택한 방향으로 스 와이프합니다.</target>
        </trans-unit>
        <trans-unit id="a76aa75a792aca56bb48628c779f0f41df58a9af" translate="yes" xml:space="preserve">
          <source>Perform a swipe left on an element.</source>
          <target state="translated">요소를 왼쪽으로 스 와이프합니다.</target>
        </trans-unit>
        <trans-unit id="63c1f3262968fc14a71a34055e78cbfa8043ea44" translate="yes" xml:space="preserve">
          <source>Perform a swipe on the screen or an element.</source>
          <target state="translated">화면이나 요소를 스 와이프합니다.</target>
        </trans-unit>
        <trans-unit id="f2ec465ca0b55974fbd85298a1dd7fa9112aa86e" translate="yes" xml:space="preserve">
          <source>Perform a swipe right on an element.</source>
          <target state="translated">요소를 오른쪽으로 살짝 밉니다.</target>
        </trans-unit>
        <trans-unit id="a160992b56889c44dd1c9e03465e6b6ad10cc172" translate="yes" xml:space="preserve">
          <source>Perform a swipe up on an element.</source>
          <target state="translated">요소를 위로 스 와이프합니다.</target>
        </trans-unit>
        <trans-unit id="6284024204ee568701f5dad6ea282c6ec94042b3" translate="yes" xml:space="preserve">
          <source>Perform an emulated click on a link or a button, given by a locator. Unlike normal click instead of sending native event, emulates a click with JavaScript. This works on hidden, animated or inactive elements as well.</source>
          <target state="translated">로케이터가 제공하는 링크 또는 버튼에 대한 에뮬레이트 된 클릭을 수행합니다. 네이티브 이벤트를 보내는 대신 일반 클릭과 달리 JavaScript로 클릭을 에뮬레이트합니다. 이것은 숨김, 애니메이션 또는 비활성 요소에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="144b3eeab0760346a687a7714385f53a610fadf8" translate="yes" xml:space="preserve">
          <source>Performs a click on a link and waits for navigation before moving on.</source>
          <target state="translated">링크를 클릭하고 이동하기 전에 탐색을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="5bb911a54c6c1c71aefd99da70f33a4454172d8a" translate="yes" xml:space="preserve">
          <source>Performs a double-click on an element matched by link|button|label|CSS or XPath. Context can be specified as second parameter to narrow search.</source>
          <target state="translated">link | button | label | CSS 또는 XPath와 일치하는 요소를 두 번 클릭합니다. 검색 범위를 좁히기 위해 컨텍스트를 두 번째 매개 변수로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff7c72fa0f10ffb1f7c1dee7f918eb83a6e4bc0a" translate="yes" xml:space="preserve">
          <source>Performs a specific touch action. The action object need to contain the action name, x/y coordinates</source>
          <target state="translated">특정 터치 동작을 수행합니다. 액션 객체는 액션 이름 x / y 좌표를 포함해야합니다</target>
        </trans-unit>
        <trans-unit id="5d3769c57d5c9c9e0e9915247503e71539e62d73" translate="yes" xml:space="preserve">
          <source>Performs a swipe up inside an element. Can be &lt;code&gt;slow&lt;/code&gt; or &lt;code&gt;fast&lt;/code&gt; swipe.</source>
          <target state="translated">요소 내부에서 위로 스 와이프를 수행합니다. &lt;code&gt;slow&lt;/code&gt; 거나 &lt;code&gt;fast&lt;/code&gt; 스 와이프 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9e5bd76063c1a628902f88469d40dac2775cb367" translate="yes" xml:space="preserve">
          <source>Performs click on element with horizontal and vertical offset. An element is located by text, id, accessibility id.</source>
          <target state="translated">수평 및 수직 오프셋이있는 요소를 클릭합니다. 요소는 텍스트, ID, 접근성 ID별로 위치합니다.</target>
        </trans-unit>
        <trans-unit id="ff23b53a4038c7153d4fbe46d5c9036103d8d82f" translate="yes" xml:space="preserve">
          <source>Performs right click on a clickable element matched by semantic locator, CSS or XPath.</source>
          <target state="translated">시맨틱 로케이터, CSS 또는 XPath와 일치하는 클릭 가능한 요소를 마우스 오른쪽 버튼으로 클릭합니다.</target>
        </trans-unit>
        <trans-unit id="a5a4e2527b40de1f7e660abb9f134a4a9bfb25eb" translate="yes" xml:space="preserve">
          <source>Performs right click on an element matched by CSS or XPath.</source>
          <target state="translated">CSS 또는 XPath와 일치하는 요소를 마우스 오른쪽 단추로 클릭합니다.</target>
        </trans-unit>
        <trans-unit id="d96bd16a71797f41517f572d7de487c399ec5f9f" translate="yes" xml:space="preserve">
          <source>Performs right click on an element matched by CSS or XPath. Appium: support, but in apps works as usual click</source>
          <target state="translated">CSS 또는 XPath와 일치하는 요소를 마우스 오른쪽 단추로 클릭합니다. Appium : 지원하지만 앱에서 평소 클릭으로 작동</target>
        </trans-unit>
        <trans-unit id="0d81948f5eb794eb6e640218907c89f07d37ac9c" translate="yes" xml:space="preserve">
          <source>Placeholder for ~ locator only test case write once run on both Appium and WebDriver.</source>
          <target state="translated">~ 로케이터 전용 테스트 케이스에 대한 자리 표시자는 Appium 및 WebDriver 모두에서 한 번 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="c2115d99c0684aea6ae44b4a649d6b8242e8577a" translate="yes" xml:space="preserve">
          <source>Playwright</source>
          <target state="translated">Playwright</target>
        </trans-unit>
        <trans-unit id="29ffe54163d980747f49fa324c07300ac7ada92a" translate="yes" xml:space="preserve">
          <source>Playwright Example</source>
          <target state="translated">극작가의 예</target>
        </trans-unit>
        <trans-unit id="c4061af985cee05a4087dc1e1b1891814d3145ca" translate="yes" xml:space="preserve">
          <source>Playwright can be added to GitHub Actions using &lt;a href=&quot;https://github.com/microsoft/playwright-github-action&quot;&gt;official action (opens new window)&lt;/a&gt;. Use it before starting CodeceptJS tests to install all dependencies. It is important to run tests in headless mode (&lt;a href=&quot;https://github.com/microsoft/playwright-github-action#run-in-headful-mode&quot;&gt;otherwise you will need to enable xvfb to emulate desktop (opens new window)&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://github.com/microsoft/playwright-github-action&quot;&gt;공식 액션을&lt;/a&gt; 사용하여 극작가를 GitHub 액션에 추가 할 수 있습니다 (새 창에서 열림) . CodeceptJS 테스트를 시작하기 전에 사용하여 모든 종속성을 설치하십시오. 헤드리스 모드에서 테스트를 실행하는 것이 중요합니다 ( &lt;a href=&quot;https://github.com/microsoft/playwright-github-action#run-in-headful-mode&quot;&gt;그렇지 않으면 xvfb를 활성화하여 데스크톱을 에뮬레이트해야합니다 (새 창 열기)&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="440d89e0ddcee56260f2aa3ff4023f7397e5d1ae" translate="yes" xml:space="preserve">
          <source>Playwright can emulate browsers of mobile devices. Instead of paying for expensive devices for mobile tests you can adjust Playwright settings so it could emulate mobile browsers on iPhone, Samsung Galaxy, etc.</source>
          <target state="translated">극작가는 모바일 장치의 브라우저를 에뮬레이트 할 수 있습니다. 모바일 테스트를 위해 값 비싼 장치에 비용을 지불하는 대신 Playwright 설정을 조정하여 iPhone, Samsung Galaxy 등에서 모바일 브라우저를 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82b3f30318efbd51abe5cc3e6ac1e7764d437f45" translate="yes" xml:space="preserve">
          <source>Playwright commands are asynchronous so a callback function must be async.</source>
          <target state="translated">극작가 명령은 비동기식이므로 콜백 함수는 비동기식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="f068e0c8a6c99d1370c501f7a166afe6ba0a1e39" translate="yes" xml:space="preserve">
          <source>Playwright contains a &lt;a href=&quot;https://github.com/Microsoft/playwright/blob/master/src/deviceDescriptors.ts&quot;&gt;list of predefined devices (opens new window)&lt;/a&gt; to emulate, for instance this is how you can enable iPhone 6 emulation for all tests:</source>
          <target state="translated">Playwright에는 에뮬레이션 할 &lt;a href=&quot;https://github.com/Microsoft/playwright/blob/master/src/deviceDescriptors.ts&quot;&gt;미리 정의 된 장치 (새 창에서 열림) 목록이&lt;/a&gt; 포함되어 있습니다. 예를 들어 다음은 모든 테스트에 대해 iPhone 6 에뮬레이션을 활성화하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="095a86fcebf3d5ac12ec97f685211414806bddfd" translate="yes" xml:space="preserve">
          <source>Playwright is a Node library to automate the &lt;a href=&quot;https://www.chromium.org/Home&quot;&gt;Chromium (opens new window)&lt;/a&gt;, &lt;a href=&quot;https://webkit.org/&quot;&gt;WebKit (opens new window)&lt;/a&gt; and &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox (opens new window)&lt;/a&gt; browsers with a single API. It enables &lt;strong&gt;cross-browser&lt;/strong&gt; web automation that is &lt;strong&gt;ever-green&lt;/strong&gt;, &lt;strong&gt;capable&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt;.</source>
          <target state="translated">Playwright는 단일 API로 &lt;a href=&quot;https://www.chromium.org/Home&quot;&gt;Chromium (새 창에서 열림)&lt;/a&gt; , &lt;a href=&quot;https://webkit.org/&quot;&gt;WebKit (새 창에서 열림)&lt;/a&gt; 및 &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox (새 창에서 열림)&lt;/a&gt; 브라우저 를 자동화하는 노드 라이브러리 입니다. 이를 통해 &lt;strong&gt;항상 친환경적&lt;/strong&gt; 이며 &lt;strong&gt;성능&lt;/strong&gt; 이 &lt;strong&gt;뛰어나고 신뢰할 수&lt;/strong&gt; 있고 &lt;strong&gt;빠른 &lt;/strong&gt;&lt;strong&gt;브라우저 간&lt;/strong&gt; 웹 자동화가 &lt;strong&gt;가능&lt;/strong&gt; 합니다.&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a40a816cdcc74a7a6f30a6ccf8029295c6b7e929" translate="yes" xml:space="preserve">
          <source>Playwright uses different strategies to detect if a page is loaded. In configuration use &lt;code&gt;waitForNavigation&lt;/code&gt; option for that:</source>
          <target state="translated">극작가는 페이지가로드되었는지 감지하기 위해 다양한 전략을 사용합니다. 구성에서 &lt;code&gt;waitForNavigation&lt;/code&gt; 옵션을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a69f2ee221a64874e745647b591f44e5de1bb45" translate="yes" xml:space="preserve">
          <source>Playwright was built similarly to &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer (opens new window)&lt;/a&gt;, using its API and so is very different in usage. However, Playwright has cross browser support with better design for test automaiton.</source>
          <target state="translated">Playwright는 API를 사용하여 &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer (새 창에서 열림)&lt;/a&gt; 와 유사하게 빌드 되었으므로 사용법이 매우 다릅니다. 그러나 Playwright는 테스트 자동화를 위해 더 나은 디자인으로 브라우저 간 지원을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b8af1f7f372eb839081e3fb32f00ecf6d6fae31f" translate="yes" xml:space="preserve">
          <source>Please look at the respective Factory sections for examples for factory modules and configuration.</source>
          <target state="translated">공장 모듈 및 구성에 대한 예제는 각 공장 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ba2574ae78761d694669c7d80d500eaf0cc6238c" translate="yes" xml:space="preserve">
          <source>Please note that some config changes can't be applied on the fly. For instance, if you set &lt;code&gt;restart: false&lt;/code&gt; in your config and then changing value &lt;code&gt;browser&lt;/code&gt; won't take an effect as browser is already started and won't be closed untill all tests finish.</source>
          <target state="translated">일부 구성 변경 사항은 즉시 적용 할 수 없습니다. 예를 들어, 구성에서 &lt;code&gt;restart: false&lt;/code&gt; 를 설정 한 후 값 &lt;code&gt;browser&lt;/code&gt; 를 변경해 도 브라우저가 이미 시작되어 모든 테스트가 완료 될 때까지 닫히지 않습니다.</target>
        </trans-unit>
        <trans-unit id="01a01d53e23884496214e4bb70d0dce2eff29915" translate="yes" xml:space="preserve">
          <source>Please note, &lt;code&gt;I&lt;/code&gt; object can't be used helper class. As &lt;code&gt;I&lt;/code&gt; object delegates its calls to helper classes, you can't make a circular dependency on it. Instead of calling &lt;code&gt;I&lt;/code&gt; inside a helper, you can get access to other helpers by using &lt;code&gt;helpers&lt;/code&gt; property of a helper. This allows you to access any other enabled helper by its name.</source>
          <target state="translated">참고하시기 바랍니다 &lt;code&gt;I&lt;/code&gt; 의 객체는 사용되는 도우미 클래스가 될 수 없습니다. 마찬가지로 &lt;code&gt;I&lt;/code&gt; 헬퍼 클래스 대표에게 그것의 호출을 개체, 당신은에 순환 종속성을 만들 수 없습니다. 도우미 내부에서 &lt;code&gt;I&lt;/code&gt; 를 호출하는 대신 도우미의 &lt;code&gt;helpers&lt;/code&gt; 속성을 사용하여 다른 도우미에 액세스 할 수 있습니다 . 이렇게하면 이름으로 활성화 된 다른 도우미에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c17ce9ad1f0d339c82d5aca122fc7fd622e122bd" translate="yes" xml:space="preserve">
          <source>Please note, this service can be used with Protractor helper as well!</source>
          <target state="translated">이 서비스는 각도기 도우미에서도 사용할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="d257f5d77ff694f78776e16e6a115707274dead0" translate="yes" xml:space="preserve">
          <source>Please note, you can't run tests by different helpers at once. You can't use some APIs from WebDriverIO and some from Nightmare. You should &lt;strong&gt;pick one helper, as it definses how tests are executed.&lt;/strong&gt; If requirements change it's easy to migrate to another, but don't use few helpers at once. It's just not possible.</source>
          <target state="translated">다른 도우미가 한 번에 테스트를 실행할 수는 없습니다. WebDriverIO의 일부 API와 Nightmare의 일부 API를 사용할 수 없습니다. &lt;strong&gt;테스트 실행 방법을 정의하는 한 명의 도우미를 선택&lt;/strong&gt; 해야합니다 &lt;strong&gt;. &lt;/strong&gt;요구 사항이 변경되면 다른 것으로 쉽게 마이그레이션 할 수 있지만 한 번에 도우미를 거의 사용하지 마십시오. 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="d3c0e2ab52bb04000cae1845651a80939510580b" translate="yes" xml:space="preserve">
          <source>Please notice that instead of &lt;code&gt;I&lt;/code&gt; you should use &lt;code&gt;this&lt;/code&gt; in current context.</source>
          <target state="translated">&lt;code&gt;I&lt;/code&gt; 대신 현재 상황에서 &lt;code&gt;this&lt;/code&gt; 사용해야한다는 점에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="1170dc2a574d73da8b7ddddac7a72d98d091dd77" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;Selenium - Proxy Object (opens new window)&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;Selenium-Proxy Object (새 창에서 열림)&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ff882284f676d9154cc3d8b7968c8f79179672ff" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;Selenium - Proxy Object&lt;/a&gt; for more information.</source>
          <target state="translated">를 참조하십시오 &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;셀레늄 - 프록시 개체&lt;/a&gt; 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="67adb2de81d9870ed69b4291182914d297a25d45" translate="yes" xml:space="preserve">
          <source>Please refer to translated steps inside translation files and send Pull Requests to add missing.</source>
          <target state="translated">번역 파일 내에서 번역 된 단계를 참조하고 누락을 추가하기 위해 풀 요청을 보내십시오.</target>
        </trans-unit>
        <trans-unit id="3e785f68f5c6618ddb668cb7c39e9b285f54dce5" translate="yes" xml:space="preserve">
          <source>Please use &lt;code&gt;handleDownloads()&lt;/code&gt; instead.</source>
          <target state="translated">사용하세요 &lt;code&gt;handleDownloads()&lt;/code&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="e6ad450a04d6f9b1dfec9ffb57e2e63bb268cb79" translate="yes" xml:space="preserve">
          <source>Please use verbose output when reporting issues to GitHub.</source>
          <target state="translated">GitHub에 문제를보고 할 때는 상세 출력을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8c804b65e2bdc4fa1145324216005fdda57ab75e" translate="yes" xml:space="preserve">
          <source>Plugin can register event listeners or hook into promise chain with recorder. See &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/helper&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">플러그인은 이벤트 리스너를 등록하거나 레코더로 약속 체인에 연결할 수 있습니다. &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/helper&quot;&gt;API 참조를 참조&lt;/a&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="22fc231c3739697ad94179582e420368a1600253" translate="yes" xml:space="preserve">
          <source>Plugins allow to use CodeceptJS internal API to extend functionality. Use internal event dispatcher, container, output, promise recorder, to create your own reporters, test listeners, etc.</source>
          <target state="translated">플러그인은 CodeceptJS 내부 API를 사용하여 기능을 확장 할 수 있습니다. 내부 이벤트 디스패처, 컨테이너, 출력, 약속 레코더를 사용하여 자신의 리포터, 테스트 리스너 등을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="d011986407b1110e57283981ea38a369075023b8" translate="yes" xml:space="preserve">
          <source>Polish</source>
          <target state="translated">Polish</target>
        </trans-unit>
        <trans-unit id="c9f57a34f254e1dcad5bba669d26b474bfefdb7e" translate="yes" xml:space="preserve">
          <source>Popular tool &lt;a href=&quot;https://codecept.io/angular&quot;&gt;Protractor&lt;/a&gt; also uses WebDriver for running end 2 end tests.</source>
          <target state="translated">인기있는 도구 인 &lt;a href=&quot;https://codecept.io/angular&quot;&gt;Protractor&lt;/a&gt; 는 엔드 2 최종 테스트를 실행하기 위해 WebDriver도 사용합니다.</target>
        </trans-unit>
        <trans-unit id="dc0b1def5441c523c17cfc68aaeb97c0350e8aa4" translate="yes" xml:space="preserve">
          <source>Port of selenium server (default : 4444)</source>
          <target state="translated">셀레늄 서버 포트 (기본값 : 4444)</target>
        </trans-unit>
        <trans-unit id="23882c575954a0789bf02aba9e6dd01f539bc738" translate="yes" xml:space="preserve">
          <source>Portuguese</source>
          <target state="translated">Portuguese</target>
        </trans-unit>
        <trans-unit id="6ba8445a482ccb849c6057fdf9ad31c38a5a1e3e" translate="yes" xml:space="preserve">
          <source>Possible config options:</source>
          <target state="translated">가능한 구성 옵션 :</target>
        </trans-unit>
        <trans-unit id="17b4f51e29002a92fb61db6cff3de3f5c61a9df8" translate="yes" xml:space="preserve">
          <source>Prepares request for axios call</source>
          <target state="translated">axios 통화 요청 준비</target>
        </trans-unit>
        <trans-unit id="7039fbec6d98cbb83c02b32068804d7eba0f9db7" translate="yes" xml:space="preserve">
          <source>Prerequisite</source>
          <target state="translated">Prerequisite</target>
        </trans-unit>
        <trans-unit id="2396dfc80828883a3535e6e1c73ab1ea531cf62d" translate="yes" xml:space="preserve">
          <source>Press &lt;code&gt;ENTER&lt;/code&gt; to resume test execution.</source>
          <target state="translated">테스트 실행을 재개하려면 &lt;code&gt;ENTER&lt;/code&gt; 를 누르 십시오 .</target>
        </trans-unit>
        <trans-unit id="df85a402cf6db2842892b00a5ef1bdf02db8183a" translate="yes" xml:space="preserve">
          <source>Presses a key in the browser (on a focused element).</source>
          <target state="translated">브라우저에서 키를 누릅니다 (포커스 된 요소에서).</target>
        </trans-unit>
        <trans-unit id="71fcd0867bdded2df6bcf0afb7d89064b10baaa4" translate="yes" xml:space="preserve">
          <source>Presses a key in the browser and leaves it in a down state.</source>
          <target state="translated">브라우저에서 키를 누르고 다운 상태로 둡니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
