<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="babel">
    <body>
      <group id="babel">
        <trans-unit id="f4d0cc9da56aea644a9c784cda478408f0662c37" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeQuery(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeQuery(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTSTypeQuery(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTSTypeQuery(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="491df688352070024af5942726a6551cf5622df2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeReference(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeReference(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTSTypeReference(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTSTypeReference(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="513594ecbc6aa43accdf851d9f4edbac2858c2f4" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSUndefinedKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSUndefinedKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTSUndefinedKeyword(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTSUndefinedKeyword(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4f02aa68b104897d205fa361a2ec55ab77722040" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSUnionType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSUnionType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTSUnionType(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTSUnionType(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c558dad3f19b0d369fecefe7c8110dd22b0ac8b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSUnknownType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSUnknownType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTSUnknownType(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTSUnknownType(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b3c70f360553fad011ce65321faeedf88c434d9" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSVoidKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSVoidKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTSVoidKeyword(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTSVoidKeyword(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1c090c59ef8314ac04fd8638fa434a1fa76bf05" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTaggedTemplateExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTaggedTemplateExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTaggedTemplateExpression(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTaggedTemplateExpression(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c87b50962930d97e58cfbfe2a5fc41ac4b5972b8" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTemplateElement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTemplateElement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTemplateElement(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTemplateElement(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f99b63da150e01a34753b251931fc4114925b69d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTemplateLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTemplateLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTemplateLiteral(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTemplateLiteral(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f3f7cc364ebeaec92908a17bdf4f6c1f805871d2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isThisExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertThisExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isThisExpression(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertThisExpression(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="601bf44db968c0b29e912f8e0f22c5af8d81c9d6" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isThisTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertThisTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isThisTypeAnnotation(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertThisTypeAnnotation(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ed4c60f388bd60e488562f32ea4c127222b20c7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isThrowStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertThrowStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isThrowStatement(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertThrowStatement(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="91e0f1407b84ab9da4c19e56c7fe5add39d0f7a4" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTryStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTryStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTryStatement(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTryStatement(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="44e82ef55a5dbfbad126cc2fc372797d5c563056" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTupleTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTupleTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTupleTypeAnnotation(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTupleTypeAnnotation(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1327114cd4820e95a28e75a864aaedc03801006e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTypeAlias(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTypeAlias(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTypeAlias(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTypeAlias(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cb3ff04cbc1e307e9b84150f2549dc5054715b1f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTypeAnnotation(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTypeAnnotation(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e62466221b180d879fd32918e8cdb7134f470db1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTypeCastExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTypeCastExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTypeCastExpression(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTypeCastExpression(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3315c234bd6535c7d7ac3405b1d2a87cfc70d520" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTypeParameter(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTypeParameter(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTypeParameter(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTypeParameter(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="46283efd6b11592d334274e70c96dee40c4344e7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTypeParameterDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTypeParameterDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTypeParameterDeclaration(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTypeParameterDeclaration(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3317d126d8c3073f89c595283f229696fc774b4" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTypeParameterInstantiation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTypeParameterInstantiation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTypeParameterInstantiation(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTypeParameterInstantiation(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="488f2adc8fbfdccf07644c0ff1f7400600bbc814" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTypeofTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTypeofTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isTypeofTypeAnnotation(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertTypeofTypeAnnotation(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb33ed10e10f5dfed0eca380f42dca96d860e5aa" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isUnaryExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertUnaryExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isUnaryExpression(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertUnaryExpression(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="592b1e3d13718b7df7c94c6a6aca56feef902f15" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isUnionTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertUnionTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isUnionTypeAnnotation(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertUnionTypeAnnotation(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6677ecdca343045705d51d76bf074078c493bc2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isUpdateExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertUpdateExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isUpdateExpression(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertUpdateExpression(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b240e6337873bf61d34cca3b845f24f567630f69" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isVariableDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertVariableDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isVariableDeclaration(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertVariableDeclaration(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6242d7d9fc95689f85fc4af426926dac642d1ebc" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isVariableDeclarator(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertVariableDeclarator(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isVariableDeclarator(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertVariableDeclarator(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c58b9a463773d0807685d8ce7085b219fbdc1aa" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isVariance(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertVariance(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isVariance(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertVariance(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="50591d58f7a78063b1ad1ef6be796b877d6039be" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isVoidTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertVoidTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isVoidTypeAnnotation(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertVoidTypeAnnotation(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="df2652a938bd35a4b63e0e8e59441ff9c7eba267" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isWhileStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertWhileStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isWhileStatement(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertWhileStatement(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="90e96c1147e0dfc135e12a518b92c6d4678d5a45" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isWithStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertWithStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isWithStatement(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertWithStatement(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="862b5a9952e8b68e8a572aa005e35f4f19719178" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isYieldExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertYieldExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t.isYieldExpression(node, opts)&lt;/code&gt; 및 &lt;code&gt;t.assertYieldExpression(node, opts)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="522ab75b6d5556fbf558969b2e94aec52b3e952c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../babel-runtime-corejs2/index&quot;&gt;&lt;code&gt;@babel/runtime-corejs2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">참조 : &lt;a href=&quot;../babel-runtime-corejs2/index&quot;&gt; &lt;code&gt;@babel/runtime-corejs2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="273fd71a97b3eb5db3c4bc96a15c7a887397c11d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../babel-runtime/index&quot;&gt;&lt;code&gt;@babel/runtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">참조 : &lt;a href=&quot;../babel-runtime/index&quot;&gt; &lt;code&gt;@babel/runtime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d437ada6b6ea0cf281dbd8c56fd7745eef0bdb95" translate="yes" xml:space="preserve">
          <source>See options for &lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cdda1c0a63d73709d70e45ce45a5461d79dbf88c" translate="yes" xml:space="preserve">
          <source>See options for &lt;code&gt;babel-plugin-transform-es2015-commonjs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;babel-plugin-transform-es2015-commonjs&lt;/code&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b8ad32ff4f194cbc45313d8c3ca01d1647bbc8d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#monorepos&quot;&gt;monorepo&lt;/a&gt; documentation for more discussion on how to configure monorepos that have many packages. File-relative configs can also be disabled by setting &lt;a href=&quot;../options/index#babelrc&quot;&gt;&quot;babelrc&quot;&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">많은 패키지가있는 monorepo를 구성하는 방법에 대한 자세한 내용은 &lt;a href=&quot;#monorepos&quot;&gt;monorepo&lt;/a&gt; 문서를 참조하십시오 . 파일 기준 구성은 &lt;a href=&quot;../options/index#babelrc&quot;&gt;&quot;babelrc&quot;&lt;/a&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 비활성화 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="39d0e90af5159839077a94769fc4a881e13394ea" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#technical-details&quot;&gt;technical details&lt;/a&gt; section for more information on how this works and the types of transformations that occur.</source>
          <target state="translated">작동 방식 및 발생하는 변환 유형에 대한 자세한 내용은 &lt;a href=&quot;#technical-details&quot;&gt;기술 정보&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="688b8b2f5a9178992acf71e77392585859700e81" translate="yes" xml:space="preserve">
          <source>Semver</source>
          <target state="translated">Semver</target>
        </trans-unit>
        <trans-unit id="6a16e7635a8338f5c2251be42fa2b8ff8d77f6b1" translate="yes" xml:space="preserve">
          <source>Separately, it is also important to decide if you want to use &lt;a href=&quot;#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; files or just a central &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; files are not required for subfolder-specific configuration like they were in Babel 6, so often they are not needed in Babel 7, in favor of &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이와 별도로 &lt;a href=&quot;#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt; 파일 을 사용할 것인지 아니면 중앙 &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; 만 사용할 것인지 결정하는 것도 중요합니다 . &lt;a href=&quot;#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt; 파일은 Babel 6에서와 같이 하위 폴더 별 구성에 필요하지 않으므로 종종 Babel 7에서 필요하지 않고 &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; 을 선호 합니다.</target>
        </trans-unit>
        <trans-unit id="7c266f9189a8f27825f134fe914d8a0a09469863" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;file&lt;/code&gt; on returned source map.</source>
          <target state="translated">리턴 된 소스 맵에서 &lt;code&gt;file&lt;/code&gt; 을 설정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="007fa7d845a390681c3e29b38ec69f5b732ea48a" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;sources[0]&lt;/code&gt; on returned source map.</source>
          <target state="translated">리턴 된 소스 맵에서 &lt;code&gt;sources[0]&lt;/code&gt; 을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="6df89c9ecb7b0c1c3a0b9e55243217f417ed66f6" translate="yes" xml:space="preserve">
          <source>Set File Extensions</source>
          <target state="translated">파일 확장자 설정</target>
        </trans-unit>
        <trans-unit id="9d6bbfb65acbcff313fdf0a73e97146eed262052" translate="yes" xml:space="preserve">
          <source>Set output format: &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;umd&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt;</source>
          <target state="translated">출력 형식 설정 : &lt;code&gt;global&lt;/code&gt; , &lt;code&gt;umd&lt;/code&gt; 또는 &lt;code&gt;var&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cb8f64f89e4bfab608bba8f1a07a612f1213eff" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to preserve any comments from the &lt;code&gt;code&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;code&lt;/code&gt; 매개 변수의 주석을 유지 하려면 이것을 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8eeb296041581f9b8560f90a2510dffbeb52dd41" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to avoid adding whitespace for formatting</source>
          <target state="translated">서식 지정을 위해 공백을 추가하지 않으 려면 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="e4c137ddf6b396f6d5164aacbf13222da042bdff" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to print decorators before &lt;code&gt;export&lt;/code&gt; in output.</source>
          <target state="translated">출력으로 &lt;code&gt;export&lt;/code&gt; 전에 데코레이터를 인쇄 하려면 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="71c78a164ed46c42eb09a38f1c79cb6f7be490a1" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to reduce whitespace (but not as much as &lt;code&gt;opts.compact&lt;/code&gt;)</source>
          <target state="translated">공백을 줄이려면 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 ( &lt;code&gt;opts.compact&lt;/code&gt; 만큼은 아님 ).</target>
        </trans-unit>
        <trans-unit id="c083417bccace4753cc195c1f77a1fbfac4824c0" translate="yes" xml:space="preserve">
          <source>Set to true to run &lt;code&gt;jsesc&lt;/code&gt; with &quot;json&quot;: true to print &quot;\u00A9&quot; vs. &quot;&amp;copy;&quot;;</source>
          <target state="translated">&quot;json&quot;과 함께 &lt;code&gt;jsesc&lt;/code&gt; 를 실행하려면 true로 설정하십시오 . &quot;\ u00A9&quot;대 &quot;&amp;copy;&quot;를 인쇄하려면 true;</target>
        </trans-unit>
        <trans-unit id="98d534c935762ac23ab63fd6189225bfa6e1f765" translate="yes" xml:space="preserve">
          <source>Sets the name/path of the module used when importing helpers.</source>
          <target state="translated">헬퍼를 가져올 때 사용되는 모듈의 이름 / 경로를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d4847a6f59ef68db7f49b954ae3619d1a54be9d5" translate="yes" xml:space="preserve">
          <source>Setting this to &lt;code&gt;false&lt;/code&gt; will not transform modules.</source>
          <target state="translated">이것을 &lt;code&gt;false&lt;/code&gt; 로 설정하면 모듈이 변환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="43094976da652aded8974af173e53a07efadc2b9" translate="yes" xml:space="preserve">
          <source>Setting this to &lt;code&gt;false&lt;/code&gt; will preserve ES modules. Use this only if you intend to ship native ES Modules to browsers. If you are using a bundler with Babel, the default &lt;code&gt;modules: &quot;auto&quot;&lt;/code&gt; is always preferred.</source>
          <target state="translated">이것을 &lt;code&gt;false&lt;/code&gt; 로 설정하면 ES 모듈이 보존됩니다. 기본 ES 모듈을 브라우저에 제공하려는 경우에만 사용하십시오. Babel과 함께 번 들러를 사용하는 경우 기본 &lt;code&gt;modules: &quot;auto&quot;&lt;/code&gt; 가 항상 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="7d52f9462b4b3a2460320602de357569dee74a1e" translate="yes" xml:space="preserve">
          <source>Setting this to true will only strip annotations and declarations from files that contain the &lt;code&gt;// @flow&lt;/code&gt; directive. It will also throw errors for any Flow annotations found in files without the directive.</source>
          <target state="translated">이를 true로 설정하면 &lt;code&gt;// @flow&lt;/code&gt; 지시문 이 포함 된 파일에서 주석과 선언 만 제거됩니다 . 또한 지시문이없는 파일에서 발견 된 모든 Flow 주석에 대해 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4c98e34c08b10f1a9218fc5a3d6519559b1363bb" translate="yes" xml:space="preserve">
          <source>Settings options for presets works exactly the same:</source>
          <target state="translated">사전 설정에 대한 설정 옵션은 정확히 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b33c88031df4ddccd8daaacaff4bcb24d1b2f5ef" translate="yes" xml:space="preserve">
          <source>Several Babel options perform tests against file paths. In general, these options support a common pattern approach where each pattern can be</source>
          <target state="translated">여러 Babel 옵션은 파일 경로에 대한 테스트를 수행합니다. 일반적으로 이러한 옵션은 각 패턴이 다음과 같은 공통 패턴 접근 방식을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="374e6b54e8f5490d23522961b37d377e7ebb7dae" translate="yes" xml:space="preserve">
          <source>Shortening of numeric literals via scientific notation</source>
          <target state="translated">과학적 표기법을 통한 숫자 리터럴 단축</target>
        </trans-unit>
        <trans-unit id="0116727d283e6333f7000ef9b4219f22e3d2978d" translate="yes" xml:space="preserve">
          <source>Should comments be included in output</source>
          <target state="translated">출력에 주석이 포함되어야 함</target>
        </trans-unit>
        <trans-unit id="decd2ac29436f22ac0384ea7e875dbc964da7ecf" translate="yes" xml:space="preserve">
          <source>Should the output be minified</source>
          <target state="translated">출력을 축소해야</target>
        </trans-unit>
        <trans-unit id="28f66769ad2f61e11dd10c4a26b6aa6f8d39e656" translate="yes" xml:space="preserve">
          <source>Should the output be minified (not printing last semicolons in blocks, printing literal string values instead of escaped ones, stripping &lt;code&gt;()&lt;/code&gt; from &lt;code&gt;new&lt;/code&gt; when safe)</source>
          <target state="translated">출력이 축소 된해야한다 (제거, 탈출 것들 대신 리터럴 문자열 값을 인쇄 블록에서 마지막 세미콜론을 인쇄하지 &lt;code&gt;()&lt;/code&gt; 에서 &lt;code&gt;new&lt;/code&gt; 경우 안전)</target>
        </trans-unit>
        <trans-unit id="1d5b757d243044a12161f974ba62b8a2d59dff11" translate="yes" xml:space="preserve">
          <source>Show debug output</source>
          <target state="translated">디버그 출력 표시</target>
        </trans-unit>
        <trans-unit id="ff8504782b9a776831af6c2b532f327a1fc972a6" translate="yes" xml:space="preserve">
          <source>Side-effect imports are automatically non-lazy since their very existence means that there is no binding to later kick off initialization.</source>
          <target state="translated">부작용 가져 오기는 그 존재 자체가 나중에 초기화를 시작할 바인딩이 없음을 의미하므로 자동으로 지연되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="439cd4e53e810f153ced3f0e70415f86314454e1" translate="yes" xml:space="preserve">
          <source>Similar to the the way &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; files are required to be in the &lt;a href=&quot;../options/index#root&quot;&gt;&quot;root&quot;&lt;/a&gt;, &lt;a href=&quot;#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; files must be in the root &lt;em&gt;package&lt;/em&gt;, by default. This means that, the same way the working directory affects &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; loading, it also affects &lt;a href=&quot;#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; loading.</source>
          <target state="translated">받는 비슷한 방식 &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; 의&lt;/a&gt; 파일이 될해야한다 &lt;a href=&quot;../options/index#root&quot;&gt;&quot;루트&quot;&lt;/a&gt; , &lt;a href=&quot;#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt; 파일이 루트에 있어야합니다 &lt;em&gt;패키지에&lt;/em&gt; 기본적으로. 작업 디렉토리가 영향을 같은 방법으로,이 방법 &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; 의&lt;/a&gt; 로딩, 또한 영향을 &lt;a href=&quot;#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt; 로드.</target>
        </trans-unit>
        <trans-unit id="2b1db816a51116a85a26c40637011d14004ba5ec" translate="yes" xml:space="preserve">
          <source>Similarly, if you&amp;rsquo;re targeting Node.js instead of the browser, you can configure babel-preset-env to only include the polyfills and transforms necessary for a particular version:</source>
          <target state="translated">마찬가지로 브라우저 대신 Node.js를 대상으로하는 경우 특정 버전에 필요한 폴리 필 및 변환 만 포함하도록 babel-preset-env를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6f6c25a4da6e7194d35a15369bf388838576a77" translate="yes" xml:space="preserve">
          <source>Simple class decorator</source>
          <target state="translated">간단한 클래스 데코레이터</target>
        </trans-unit>
        <trans-unit id="2b1dcfa58b203c134fdb133701bc80ba8ae2cd57" translate="yes" xml:space="preserve">
          <source>Simplify comparison operator transform</source>
          <target state="translated">비교 연산자 변환 간소화</target>
        </trans-unit>
        <trans-unit id="cb130ba31a171a1b276cc65e9215a419ec6752a1" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;@babel/polyfill&lt;/code&gt; was deprecated in 7.4.0, we recommend directly adding &lt;code&gt;core-js&lt;/code&gt; and setting the version via the &lt;a href=&quot;#corejs&quot;&gt;&lt;code&gt;corejs&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">이후 &lt;code&gt;@babel/polyfill&lt;/code&gt; 7.4.0에서 사용되지 않습니다, 우리는 직접 추가하는 것이 좋습니다 &lt;code&gt;core-js&lt;/code&gt; 하고를 통해 버전을 설정 &lt;a href=&quot;#corejs&quot;&gt; &lt;code&gt;corejs&lt;/code&gt; &lt;/a&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="69414223d02798109c660edd6b050093d457741b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;NODE_ENV&lt;/code&gt; is a fairly common way to toggle behavior, Babel also includes an API function meant specifically for that. This API is used as a quick way to check the &lt;a href=&quot;../options/index#envname&quot;&gt;&quot;envName&quot;&lt;/a&gt; that Babel was loaded with, which takes &lt;code&gt;NODE_ENV&lt;/code&gt; into account if no other overriding environment is set.</source>
          <target state="translated">이후 &lt;code&gt;NODE_ENV&lt;/code&gt; 가 토글 행동에 매우 일반적인 방법입니다, 바벨은 또한 특별히 의미하는 API 기능을 포함하고 있습니다. 이 API는 Babel이로드 된 &lt;a href=&quot;../options/index#envname&quot;&gt;&quot;envName&quot;&lt;/a&gt; 을 확인하는 빠른 방법으로 사용되며, 다른 재정의 환경이 설정되지 않은 경우 &lt;code&gt;NODE_ENV&lt;/code&gt; 를 고려합니다.</target>
        </trans-unit>
        <trans-unit id="cd48293b7d5d69032cf980771ab5257ce3123743" translate="yes" xml:space="preserve">
          <source>Since Babel assumes that your code will run in an ES5 environment it uses ES5 functions. So if you&amp;rsquo;re using an environment that has limited or no support for ES5 such as lower versions of IE then using &lt;a href=&quot;../polyfill/index&quot;&gt;babel-polyfill&lt;/a&gt; will add support for these methods.</source>
          <target state="translated">Babel은 코드가 ES5 환경에서 실행될 것이라고 가정하므로 ES5 기능을 사용합니다. 따라서 낮은 버전의 IE와 같이 ES5에 대한 지원이 제한되거나 지원되지 않는 환경을 사용하는 경우 &lt;a href=&quot;../polyfill/index&quot;&gt;babel-polyfill&lt;/a&gt; 을 사용 하면 이러한 방법에 대한 지원이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="dbdc4117f72166b354bc1b008a1f7fb9ade8e126" translate="yes" xml:space="preserve">
          <source>Since Babel does not type-check, code which is syntactically correct, but would fail the TypeScript type-checking may successfully get transformed, and often in unexpected or invalid ways.</source>
          <target state="translated">Babel은 유형 검사를하지 않기 때문에 구문 상 정확하지만 TypeScript 유형 검사에 실패하는 코드는 성공적으로 변환 될 수 있으며 종종 예기치 않거나 잘못된 방식으로 변환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0790d6bdae5b34d39846027ac92749b25a83e5d0" translate="yes" xml:space="preserve">
          <source>Since merging is based on identity + name, it is considered an error to use the same plugin with the same name twice in the same &lt;code&gt;plugins&lt;/code&gt;/&lt;code&gt;presets&lt;/code&gt; array. For example</source>
          <target state="translated">병합은 신원 + 이름을 기준으로하기 때문에 동일한 &lt;code&gt;plugins&lt;/code&gt; / &lt;code&gt;presets&lt;/code&gt; 배열 에서 동일한 이름의 동일한 플러그인을 두 번 사용하는 것은 오류로 간주 됩니다. 예를 들면</target>
        </trans-unit>
        <trans-unit id="546d41d1246e4ab5ac93f8dcff32b8a7e9b0c2f3" translate="yes" xml:space="preserve">
          <source>Since one of the original goals of &lt;code&gt;preset-env&lt;/code&gt; was to help users easily transition from using &lt;code&gt;preset-latest&lt;/code&gt;, it behaves similarly when no targets are specified: &lt;code&gt;preset-env&lt;/code&gt; will transform all ES2015-ES2020 code to be ES5 compatible.</source>
          <target state="translated">&lt;code&gt;preset-env&lt;/code&gt; 의 원래 목표 중 하나는 사용자가 &lt;code&gt;preset-latest&lt;/code&gt; 사용에서 쉽게 전환 할 수 있도록하는 것이 었기 때문에 대상이 지정되지 않은 경우에도 유사하게 작동 합니다 .preset- &lt;code&gt;preset-env&lt;/code&gt; 는 모든 ES2015-ES2020 코드를 ES5와 호환되도록 변환합니다.</target>
        </trans-unit>
        <trans-unit id="8db492a6dd482df78230873d24f319afee9d5baa" translate="yes" xml:space="preserve">
          <source>Since the actual callback result is used to check if the cache entry is valid, it is recommended that:</source>
          <target state="translated">실제 콜백 결과는 캐시 항목이 유효한지 확인하는 데 사용되므로 다음을 권장합니다.</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="5be6dc0c7fabd601b7e44f094a174c333657a563" translate="yes" xml:space="preserve">
          <source>Some built-in functions (like &lt;code&gt;Array&lt;/code&gt;) always return a new object. Instead of returning it, Babel should treat it as the new &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">일부 내장 함수 (예 : &lt;code&gt;Array&lt;/code&gt; )는 항상 새 객체를 반환합니다. 반환하는 대신 Babel &lt;code&gt;this&lt;/code&gt; 새로운 this 로 취급해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="20f847b97aef5ccf1b6d30d1bf13aac51c037011" translate="yes" xml:space="preserve">
          <source>Some words were reserved in ES3 as potential future keywords but were not reserved in ES5 and later. This plugin, to be used when targeting ES3 environments, renames variables from that set of words.</source>
          <target state="translated">일부 단어는 ES3에서 잠재적 미래 키워드로 예약되었지만 ES5 이상에서는 예약되지 않았습니다. ES3 환경을 대상으로 할 때 사용되는이 플러그인은 해당 단어 집합에서 변수의 이름을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="28210d40666303b0593e2c4885dc9dc25130317b" translate="yes" xml:space="preserve">
          <source>Sometimes Babel may inject some code in the output that is the same across files, and thus can be potentially re-used.</source>
          <target state="translated">때때로 Babel은 파일간에 동일한 코드를 출력에 삽입하여 잠재적으로 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de7d56c9b5c41b18acd284804bf639168604f21a" translate="yes" xml:space="preserve">
          <source>Sometimes Babel may inject some code in the output that is the same and thus can be potentially re-used.</source>
          <target state="translated">때때로 Babel은 동일한 코드를 출력에 삽입하여 잠재적으로 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1832aef9d92586f0f53ed39603bad43088594f38" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to use new built-ins such as &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;Promise&lt;/code&gt; etc. Your only way to use these is usually to include a globally polluting polyfill.</source>
          <target state="translated">때로는 &lt;code&gt;Map&lt;/code&gt; , &lt;code&gt;Set&lt;/code&gt; , &lt;code&gt;Promise&lt;/code&gt; 등과 같은 새로운 내장 기능을 사용할 수도 있습니다. 이것을 사용하는 유일한 방법은 일반적으로 전 세계적으로 오염되는 폴리 필을 포함하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="24a0238b1775d500e5744e78699e3e7b0ce5dc86" translate="yes" xml:space="preserve">
          <source>Source Map options</source>
          <target state="translated">소스 맵 옵션</target>
        </trans-unit>
        <trans-unit id="05bf95e67d0dac1de55ac8a93f08bb44df80590a" translate="yes" xml:space="preserve">
          <source>Source code transformations (codemods)</source>
          <target state="translated">소스 코드 변환 (codemods)</target>
        </trans-unit>
        <trans-unit id="8d89530314527c8d7d9d9cb95ec6f5bdd921a1b9" translate="yes" xml:space="preserve">
          <source>Spec</source>
          <target state="translated">Spec</target>
        </trans-unit>
        <trans-unit id="c1a804b4d580091627a39dc5a67f469b7c0580ae" translate="yes" xml:space="preserve">
          <source>Spec Compliant</source>
          <target state="translated">사양 준수</target>
        </trans-unit>
        <trans-unit id="e2ab410a20293d8e53740fd472d1445a5e9ea7eb" translate="yes" xml:space="preserve">
          <source>Spec: Exponential Operator</source>
          <target state="translated">스펙 : 지수 연산자</target>
        </trans-unit>
        <trans-unit id="49689f89e4c1599ba43f86345cf3cea2f3a522b5" translate="yes" xml:space="preserve">
          <source>Spec: Exponentiation Operator</source>
          <target state="translated">사양 : 지수 연산자</target>
        </trans-unit>
        <trans-unit id="0408815d9ae20045cca838239ea0eaaed2a69ffc" translate="yes" xml:space="preserve">
          <source>Specify a custom callback to generate a module id with. Called as &lt;code&gt;getModuleId(moduleName)&lt;/code&gt;. If falsy value is returned then the generated module id is used.</source>
          <target state="translated">모듈 ID를 생성 할 사용자 정의 콜백을 지정하십시오. &lt;code&gt;getModuleId(moduleName)&lt;/code&gt; 로 호출됩니다 . 잘못된 값이 반환되면 생성 된 모듈 ID가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3aef55efb1e5b5e14ed34504d5fd9d662a553412" translate="yes" xml:space="preserve">
          <source>Specify a custom name for module ids.</source>
          <target state="translated">모듈 ID의 사용자 정의 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="fffe6605f81d95d57a90c6601a1928d2a88d41a8" translate="yes" xml:space="preserve">
          <source>Specify a different cache location.</source>
          <target state="translated">다른 캐시 위치를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="4c2f08f1dabe0f2abbb0e213f0754cce72a487a3" translate="yes" xml:space="preserve">
          <source>Specify whether or not to use .babelrc and .babelignore files. Not available when using the CLI, &lt;a href=&quot;https://babeljs.io/docs/usage/cli/#babel-ignoring-babelrc&quot;&gt;use &lt;code&gt;--no-babelrc&lt;/code&gt; instead&lt;/a&gt;.</source>
          <target state="translated">.babelrc 및 .babelignore 파일 사용 여부를 지정하십시오. 사용할 수 없음 CLI를 사용하는 경우, &lt;a href=&quot;https://babeljs.io/docs/usage/cli/#babel-ignoring-babelrc&quot;&gt;사용 &lt;code&gt;--no-babelrc&lt;/code&gt; 을 대신&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5b20de027ffbb6672b4eab2863fd9f776e4ef1ec" translate="yes" xml:space="preserve">
          <source>Specifying a number will rewrite the helpers that need polyfillable APIs to reference helpers from that (major) version of &lt;code&gt;core-js&lt;/code&gt; instead Please note that &lt;code&gt;corejs: 2&lt;/code&gt; only supports global variables (e.g. &lt;code&gt;Promise&lt;/code&gt;) and static properties (e.g. &lt;code&gt;Array.from&lt;/code&gt;), while &lt;code&gt;corejs: 3&lt;/code&gt; also supports instance properties (e.g. &lt;code&gt;[].includes&lt;/code&gt;).</source>
          <target state="translated">숫자를 지정하면 polyfillable API가 필요한 도우미가 대신 &lt;code&gt;core-js&lt;/code&gt; 의 (주) 버전에서 도우미를 참조하도록 다시 작성됩니다. &lt;code&gt;corejs: 2&lt;/code&gt; 는 전역 변수 (예 : &lt;code&gt;Promise&lt;/code&gt; ) 및 정적 속성 (예 : &lt;code&gt;Array.from&lt;/code&gt; ) 만 지원합니다. &lt;code&gt;corejs: 3&lt;/code&gt; 은 인스턴스 속성 (예 : &lt;code&gt;[].includes&lt;/code&gt; ) 도 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="79134491a6808d18e821d940b09edf19cb951d84" translate="yes" xml:space="preserve">
          <source>Specifying options</source>
          <target state="translated">옵션 지정</target>
        </trans-unit>
        <trans-unit id="2bde101117a83786a9fe359d813c1badf4a6b2ee" translate="yes" xml:space="preserve">
          <source>Spread</source>
          <target state="translated">Spread</target>
        </trans-unit>
        <trans-unit id="d3d3978ab00b38984312f8687725acc65c750b1d" translate="yes" xml:space="preserve">
          <source>Spread Properties</source>
          <target state="translated">스프레드 속성</target>
        </trans-unit>
        <trans-unit id="c60a21801e562c2b26e62ca1fc7f9d0bb994e090" translate="yes" xml:space="preserve">
          <source>Spread VS. Object.assign</source>
          <target state="translated">확산 VS. Object.assign</target>
        </trans-unit>
        <trans-unit id="aeb1c5ea744682051a3e0a9baedd166dd481fea5" translate="yes" xml:space="preserve">
          <source>Stage 0 preset</source>
          <target state="translated">0 단계 사전 설정</target>
        </trans-unit>
        <trans-unit id="1e5b250e33c4cc687aeaa61842e54bc517f8ec35" translate="yes" xml:space="preserve">
          <source>Stage 1 preset</source>
          <target state="translated">1 단계 사전 설정</target>
        </trans-unit>
        <trans-unit id="6dc5613788d29dc4723d0b467a2130e630b2c7fa" translate="yes" xml:space="preserve">
          <source>Stage 2 decorators are in progress &lt;a href=&quot;https://github.com/babel/babel/issues/2645&quot;&gt;babel/babel#2645&lt;/a&gt;. Patches welcome!</source>
          <target state="translated">2 단계 데코레이터가 &lt;a href=&quot;https://github.com/babel/babel/issues/2645&quot;&gt;babel / babel # 2645&lt;/a&gt; 진행 중 입니다. 패치 환영합니다!</target>
        </trans-unit>
        <trans-unit id="a66d4132ed9a7306ecccc418dedd8830856866d3" translate="yes" xml:space="preserve">
          <source>Stage 2 preset</source>
          <target state="translated">2 단계 사전 설정</target>
        </trans-unit>
        <trans-unit id="d1bd5c71e406e304e02b361ba357d2a7ab3a0fb9" translate="yes" xml:space="preserve">
          <source>Stage 3 preset</source>
          <target state="translated">3 단계 사전 설정</target>
        </trans-unit>
        <trans-unit id="8522d5a3588def4985ca4b4536f9d2b425a2751b" translate="yes" xml:space="preserve">
          <source>Stage 4 - Finished: will be added to the next yearly release.</source>
          <target state="translated">4 단계-완료 : 다음 해 릴리스에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="b9878923acc38bdcd79bd65dafcdd1ce5284e69d" translate="yes" xml:space="preserve">
          <source>Stage-X (Experimental Presets)</source>
          <target state="translated">Stage-X (실험 사전 설정)</target>
        </trans-unit>
        <trans-unit id="569c72de56abeb6de23327c036187e9984c91847" translate="yes" xml:space="preserve">
          <source>Status: &lt;em&gt;Deprecated&lt;/em&gt;</source>
          <target state="translated">상태 : 지원 &lt;em&gt;중단&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="81f3d88f4e17711b01fb1984fc08f50ee13cf760" translate="yes" xml:space="preserve">
          <source>Strict mode transform</source>
          <target state="translated">엄격한 모드 변환</target>
        </trans-unit>
        <trans-unit id="e1ca1f425e0d29487d7dfec231a1c3c9e309ae1c" translate="yes" xml:space="preserve">
          <source>String Usage</source>
          <target state="translated">문자열 사용</target>
        </trans-unit>
        <trans-unit id="adf95c335cdbf60f174c3cad5d1986ae55318cf0" translate="yes" xml:space="preserve">
          <source>Strip all flow type annotations and declarations from your output code</source>
          <target state="translated">출력 코드에서 모든 흐름 유형 주석 및 선언 제거</target>
        </trans-unit>
        <trans-unit id="dd96b778d19d1e2a7f38b41fe1b7cedcf2d4cfd9" translate="yes" xml:space="preserve">
          <source>Strip flow types and transform JSX into createElement calls.</source>
          <target state="translated">플로우 유형을 제거하고 JSX를 createElement 호출로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="faaaa3d2dd67a36a5ed4f623a221f2827d112957" translate="yes" xml:space="preserve">
          <source>Strip flow types transform</source>
          <target state="translated">스트립 흐름 유형 변환</target>
        </trans-unit>
        <trans-unit id="78e9a6a5c8a13f3ecd1963eb56a0d3cf505191a8" translate="yes" xml:space="preserve">
          <source>Subject to change</source>
          <target state="translated">변경 될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5d2ea8c9aae275ffb0d494f87e1af9bc616a0191" translate="yes" xml:space="preserve">
          <source>Subpackage &lt;code&gt;.babelrc.json&lt;/code&gt; files</source>
          <target state="translated">하위 패키지 &lt;code&gt;.babelrc.json&lt;/code&gt; 파일</target>
        </trans-unit>
        <trans-unit id="f2520ff13285b1d06db0b947a41c208a6df5a1eb" translate="yes" xml:space="preserve">
          <source>Support &lt;code&gt;.babelrc.json&lt;/code&gt;, &lt;code&gt;.babelrc.cjs&lt;/code&gt;, &lt;code&gt;babel.config.json&lt;/code&gt;, &lt;code&gt;babel.config.cjs&lt;/code&gt;</source>
          <target state="translated">지원 &lt;code&gt;.babelrc.json&lt;/code&gt; , &lt;code&gt;.babelrc.cjs&lt;/code&gt; , &lt;code&gt;babel.config.json&lt;/code&gt; , &lt;code&gt;babel.config.cjs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f6496f4ef7920964f70ed50f975b2980f6b4214" translate="yes" xml:space="preserve">
          <source>Support &lt;code&gt;.babelrc.mjs&lt;/code&gt; and &lt;code&gt;babel.config.mjs&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.babelrc.mjs&lt;/code&gt; 및 &lt;code&gt;babel.config.mjs&lt;/code&gt; 지원</target>
        </trans-unit>
        <trans-unit id="55c146a21977bb6596e1dd0627618f3b7be8ada5" translate="yes" xml:space="preserve">
          <source>Support a &lt;code&gt;browsers&lt;/code&gt; option like autoprefixer</source>
          <target state="translated">자동 접두사와 같은 &lt;code&gt;browsers&lt;/code&gt; 옵션 지원</target>
        </trans-unit>
        <trans-unit id="76fb77c7440114029c122d81ef04af57d95f91dc" translate="yes" xml:space="preserve">
          <source>Support a target option &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt; to compile for the currently running node version.</source>
          <target state="translated">현재 실행중인 노드 버전에 대해 컴파일하려면 대상 옵션 &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt; 를 지원하십시오.</target>
        </trans-unit>
        <trans-unit id="8e7a618b984700b1b3601de9982696b65dd7ed3d" translate="yes" xml:space="preserve">
          <source>Support all plugins in Babel that are considered &lt;code&gt;latest&lt;/code&gt;</source>
          <target state="translated">Babel에서 &lt;code&gt;latest&lt;/code&gt; 으로 간주되는 모든 플러그인 지원</target>
        </trans-unit>
        <trans-unit id="a20ba0935ae98f44458b885ebad00a45f488ec1b" translate="yes" xml:space="preserve">
          <source>Support for JSX, Flow, Typescript.</source>
          <target state="translated">JSX, Flow, Typescript 지원.</target>
        </trans-unit>
        <trans-unit id="58539cfe5e4982be5250b6051319845be62ab77b" translate="yes" xml:space="preserve">
          <source>Support for experimental language proposals (accepting PRs for anything at least &lt;a href=&quot;https://github.com/tc39/proposals/blob/master/stage-0-proposals.md&quot;&gt;stage-0&lt;/a&gt;).</source>
          <target state="translated">실험적 언어 제안 지원 (최소 &lt;a href=&quot;https://github.com/tc39/proposals/blob/master/stage-0-proposals.md&quot;&gt;단계 0에&lt;/a&gt; 대한 PR 수락 ).</target>
        </trans-unit>
        <trans-unit id="26d1f554dc59971f8ecddb54b6ef14ef6522323c" translate="yes" xml:space="preserve">
          <source>Support injecting &lt;code&gt;core-js@3&lt;/code&gt; polyfills</source>
          <target state="translated">&lt;code&gt;core-js@3&lt;/code&gt; 폴리 필 주입 지원</target>
        </trans-unit>
        <trans-unit id="ee5695421c0864ca71227f8b748c5dcf9a50b439" translate="yes" xml:space="preserve">
          <source>Support private accessors (getters and setters)</source>
          <target state="translated">개인 접근 자 지원 (getter 및 setter)</target>
        </trans-unit>
        <trans-unit id="c2e3464e3e2954f6c67c23a2e753e72ce42873be" translate="yes" xml:space="preserve">
          <source>Supported file extensions</source>
          <target state="translated">지원되는 파일 확장자</target>
        </trans-unit>
        <trans-unit id="7cdecf1f350a253c333ca796ab3c03e15fd0350d" translate="yes" xml:space="preserve">
          <source>Supports &lt;code&gt;static&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; 지원</target>
        </trans-unit>
        <trans-unit id="ea59307cfb84c1ae34b549873d662d1f58576ee3" translate="yes" xml:space="preserve">
          <source>Supports &lt;code&gt;{ proposals: boolean }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{ proposals: boolean }&lt;/code&gt; 지원</target>
        </trans-unit>
        <trans-unit id="6c9d604bc32771d771538f69f6a2fb68d2a94693" translate="yes" xml:space="preserve">
          <source>Synchronous version of &lt;code&gt;babel.transformFile&lt;/code&gt;. Returns the transformed contents of the &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="translated">의 동기 버전 &lt;code&gt;babel.transformFile&lt;/code&gt; . &lt;code&gt;filename&lt;/code&gt; 의 변환 된 내용을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="49512fe847a027e9947b5af73a74d529c29c976f" translate="yes" xml:space="preserve">
          <source>Syntax Dynamic Import</source>
          <target state="translated">구문 동적 가져 오기</target>
        </trans-unit>
        <trans-unit id="38bee1308bb0911adb8d59761ba09abc77adf141" translate="yes" xml:space="preserve">
          <source>Syntax JSX</source>
          <target state="translated">구문 JSX</target>
        </trans-unit>
        <trans-unit id="de8af217e9ea1679ff42c4c834e9ae7d587730fb" translate="yes" xml:space="preserve">
          <source>Syntax Plugins</source>
          <target state="translated">구문 플러그인</target>
        </trans-unit>
        <trans-unit id="919d5085f16e13df6617da7fab8f4a7bb1ed9961" translate="yes" xml:space="preserve">
          <source>Syntax async functions</source>
          <target state="translated">구문 비동기 함수</target>
        </trans-unit>
        <trans-unit id="57d40544d720164d968615e19dfcc7f46d11de1b" translate="yes" xml:space="preserve">
          <source>Syntax async generators</source>
          <target state="translated">구문 비동기 생성기</target>
        </trans-unit>
        <trans-unit id="db830b00872eaf4b1a5f7b138d2014b14fb9f010" translate="yes" xml:space="preserve">
          <source>Syntax class properties</source>
          <target state="translated">구문 클래스 속성</target>
        </trans-unit>
        <trans-unit id="5307e47032f0db80cb657265d3176af8e429d92d" translate="yes" xml:space="preserve">
          <source>Syntax decorators</source>
          <target state="translated">구문 데코레이터</target>
        </trans-unit>
        <trans-unit id="60a5b2941ae74837bbeaf42bdd02a81ffb8c0287" translate="yes" xml:space="preserve">
          <source>Syntax do expressions</source>
          <target state="translated">구문 수행 표현식</target>
        </trans-unit>
        <trans-unit id="6da32aedea94ffe649733f3f99c2229ec1f57ef1" translate="yes" xml:space="preserve">
          <source>Syntax exponentiation operator</source>
          <target state="translated">구문 지수 연산자</target>
        </trans-unit>
        <trans-unit id="55bb3567678d565c3ac76fa12dff96f65afb16b8" translate="yes" xml:space="preserve">
          <source>Syntax export extensions</source>
          <target state="translated">구문 내보내기 확장</target>
        </trans-unit>
        <trans-unit id="4e47dac0f2b2f0b56f7f307cc4f8f2a48a3ba37c" translate="yes" xml:space="preserve">
          <source>Syntax flow</source>
          <target state="translated">구문 흐름</target>
        </trans-unit>
        <trans-unit id="62db5bdfce01456b9546a3bde786b1e36de04523" translate="yes" xml:space="preserve">
          <source>Syntax function bind</source>
          <target state="translated">구문 함수 바인드</target>
        </trans-unit>
        <trans-unit id="568ee1ca23695f7e7cb1ab8a7a9ee87b13b35c24" translate="yes" xml:space="preserve">
          <source>Syntax function.sent</source>
          <target state="translated">구문 함수</target>
        </trans-unit>
        <trans-unit id="dd78ac5f4822993bdbf7ff592a6f5da2f5c42d51" translate="yes" xml:space="preserve">
          <source>Syntax object rest spread</source>
          <target state="translated">구문 객체 나머지 스프레드</target>
        </trans-unit>
        <trans-unit id="6e52b7dda9ea458812a02f81aea368b0f8d947c5" translate="yes" xml:space="preserve">
          <source>Syntax only</source>
          <target state="translated">구문 만</target>
        </trans-unit>
        <trans-unit id="f584e1d1ad86eeb14d85c61d6b13110ec5ca3f2e" translate="yes" xml:space="preserve">
          <source>Syntax trailing function commas</source>
          <target state="translated">구문 후행 함수 쉼표</target>
        </trans-unit>
        <trans-unit id="6e8b1c1a9e1512e604f40e9fd6913aa95b1a63bb" translate="yes" xml:space="preserve">
          <source>SyntaxType</source>
          <target state="translated">SyntaxType</target>
        </trans-unit>
        <trans-unit id="636a5325a6f53d47d5297805155e5283ead33410" translate="yes" xml:space="preserve">
          <source>SystemJS</source>
          <target state="translated">SystemJS</target>
        </trans-unit>
        <trans-unit id="910732bf5d075c9f6e6f11490c0cfbfb1963955f" translate="yes" xml:space="preserve">
          <source>TC39 Proposals</source>
          <target state="translated">TC39 제안</target>
        </trans-unit>
        <trans-unit id="39ed6aa541a257328045b27ba8052feb93dafc40" translate="yes" xml:space="preserve">
          <source>Takes an object of environment versions to support.</source>
          <target state="translated">환경 버전의 객체를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d781ac93d23dbea9864b7e0c5e1116c4c9270019" translate="yes" xml:space="preserve">
          <source>Target Chrome 52 with webpack 2/rollup and loose mode</source>
          <target state="translated">웹팩 2 / 롤업 및 느슨하게 모드가있는 대상 Chrome 52</target>
        </trans-unit>
        <trans-unit id="8232affc6e35863cdfb07b3c4806734ad9f8b5e9" translate="yes" xml:space="preserve">
          <source>Target latest node via &lt;code&gt;node: true&lt;/code&gt; or &lt;code&gt;node: &quot;current&quot;&lt;/code&gt;</source>
          <target state="translated">노드를 통해 최신 노드를 대상 &lt;code&gt;node: true&lt;/code&gt; 또는 &lt;code&gt;node: &quot;current&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fca05f940ebb6a2ecea2890d1a4bcd46b50abfd8" translate="yes" xml:space="preserve">
          <source>Target only Chrome 52</source>
          <target state="translated">Chrome 만 타겟팅 52</target>
        </trans-unit>
        <trans-unit id="e3ae7fc18fdbeab819cde5dc07a0a60d4a9a0221" translate="yes" xml:space="preserve">
          <source>Target specific browsers via browserslist</source>
          <target state="translated">브라우저 목록을 통해 특정 브라우저를 타겟팅</target>
        </trans-unit>
        <trans-unit id="4be37be90bfccb09eab627d2a5d3f9b1c85287e5" translate="yes" xml:space="preserve">
          <source>Technical details</source>
          <target state="translated">기술적 세부 사항</target>
        </trans-unit>
        <trans-unit id="1dda20112ff8289f73cc443eb02eef3717408529" translate="yes" xml:space="preserve">
          <source>Template Literal Usage</source>
          <target state="translated">템플릿 리터럴 사용</target>
        </trans-unit>
        <trans-unit id="e879a71b46149c675e13d2c8e8e902e9114d6847" translate="yes" xml:space="preserve">
          <source>That can be a little hard to read, so as an example:</source>
          <target state="translated">읽기가 약간 어려울 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a9a9e753763be816d1e8fcceb585df8e749a4404" translate="yes" xml:space="preserve">
          <source>That means that the following code:</source>
          <target state="translated">이는 다음 코드를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e32982574a408ecbe5d6039f503232a663fecec5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../options/index#filename&quot;&gt;&quot;filename&quot;&lt;/a&gt; being compiled must be inside of &lt;a href=&quot;../options/index#babelrcroots&quot;&gt;&quot;babelrcRoots&quot;&lt;/a&gt; packages, or else searching will be skipped entirely.</source>
          <target state="translated">&lt;a href=&quot;../options/index#filename&quot;&gt;&quot;파일 이름&quot;&lt;/a&gt; 컴파일되는이 내부해야한다 &lt;a href=&quot;../options/index#babelrcroots&quot;&gt;&quot;babelrcRoots&quot;&lt;/a&gt; 패키지, 또는 다른 검색은 완전히 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="89b9de910965b003fb1a73e87e2100009b2e5652" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugins.json&quot;&gt;data&lt;/a&gt; for this is generated by running the &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js&quot;&gt;build-data script&lt;/a&gt; which pulls in data from &lt;a href=&quot;https://kangax.github.io/compat-table&quot;&gt;compat-table&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugins.json&quot;&gt;데이터&lt;/a&gt; 이것의 실행에 의해 생성되는 &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js&quot;&gt;빌드 데이터 스크립트&lt;/a&gt; 에서 데이터를 가져옵니다 &lt;a href=&quot;https://kangax.github.io/compat-table&quot;&gt;의 compat-테이블을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="180e273f2f234e6b3a5f77c2839953324cde8f69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/browserslist/browserslist#configuring-for-different-environments&quot;&gt;Browserslist environment&lt;/a&gt; to use.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/browserslist/browserslist#configuring-for-different-environments&quot;&gt;Browserslist environment&lt;/a&gt; to use.</target>
        </trans-unit>
        <trans-unit id="a2acf656287dd5606911cc2aa9e5a8e0c8b5903e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/tc39&quot;&gt;TC39&lt;/a&gt; categorizes proposals into the following stages:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39&quot;&gt;TC39은&lt;/a&gt; 다음 단계로 제안 분류 :</target>
        </trans-unit>
        <trans-unit id="9686862cebb3bbc08eaf8a4bd64ed67bc5b36458" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@babel/template&lt;/code&gt; API exposes a few flexible APIs to make it as easy as possible to create ASTs with an expected structure. Each of these also has the &lt;code&gt;.ast&lt;/code&gt; property mentioned above.</source>
          <target state="translated">The &lt;code&gt;@babel/template&lt;/code&gt; API exposes a few flexible APIs to make it as easy as possible to create ASTs with an expected structure. Each of these also has the &lt;code&gt;.ast&lt;/code&gt; property mentioned above.</target>
        </trans-unit>
        <trans-unit id="c8aa7797ee4cafa4283c55f6043ebac8a266f4e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;api&lt;/code&gt; object exposes everything Babel itself exposes from its index module, along with config-file specific APIs:</source>
          <target state="translated">The &lt;code&gt;api&lt;/code&gt; object exposes everything Babel itself exposes from its index module, along with config-file specific APIs:</target>
        </trans-unit>
        <trans-unit id="0fe51396abdb547437fd2f24d613590738e108d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caller&lt;/code&gt; value is available as the first parameter of the callback function. It is best used with something like</source>
          <target state="translated">The &lt;code&gt;caller&lt;/code&gt; value is available as the first parameter of the callback function. It is best used with something like</target>
        </trans-unit>
        <trans-unit id="9ecdbb3bf8301cb69cf2318c743dea2f81aac04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;columnNumber&lt;/code&gt; is emitted since &lt;code&gt;v7.9.0&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;columnNumber&lt;/code&gt; is emitted since &lt;code&gt;v7.9.0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65ca682bac84cf0a047840bd027a38798c30e870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do { .. }&lt;/code&gt; expression executes a block (with one or many statements in it), and the final statement completion value inside the block becomes the completion value of the do expression.</source>
          <target state="translated">&lt;code&gt;do { .. }&lt;/code&gt; (식 그것에 하나 이상의 명령문으로) 블록을 실행하고, 블록 내부의 최종 문 완성 값이 표현을 완성 값이된다.</target>
        </trans-unit>
        <trans-unit id="25f86653f04ce6e2769ac386097332820bb02452" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;env&lt;/code&gt; key will be taken from &lt;code&gt;process.env.BABEL_ENV&lt;/code&gt;, when this is not available then it uses &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; if even that is not available then it defaults to &lt;code&gt;&quot;development&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; 키에서 이동합니다 &lt;code&gt;process.env.BABEL_ENV&lt;/code&gt; 이 사용할 수 없을 때하는 것은, 그것은 사용 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 을 심지어는에 기본값으로 다음을 사용할 수없는 경우 &lt;code&gt;&quot;development&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae8b3e760cb2c64130ee833be612e432a4586c5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loose&lt;/code&gt; implementation is a more performant solution as JavaScript engines will fully optimize a function that doesn't reference &lt;code&gt;arguments&lt;/code&gt;. Please do your own benchmarking and determine if this option is the right fit for your application.</source>
          <target state="translated">The &lt;code&gt;loose&lt;/code&gt; implementation is a more performant solution as JavaScript engines will fully optimize a function that doesn't reference &lt;code&gt;arguments&lt;/code&gt; . Please do your own benchmarking and determine if this option is the right fit for your application.</target>
        </trans-unit>
        <trans-unit id="bfba1e8d88aa9303301759908985e54adb655f98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;overrides&lt;/code&gt; item will be merged on top of the top-level plugins. Importantly, the &lt;code&gt;plugins&lt;/code&gt; array as a whole doesn't just replace the top-level one. The merging logic will see that &lt;code&gt;&quot;./plug&quot;&lt;/code&gt; is the same plugin in both cases, and &lt;code&gt;{ thing: false, field2: true }&lt;/code&gt; will replace the original options, resulting in a config as</source>
          <target state="translated">The &lt;code&gt;overrides&lt;/code&gt; item will be merged on top of the top-level plugins. Importantly, the &lt;code&gt;plugins&lt;/code&gt; array as a whole doesn't just replace the top-level one. The merging logic will see that &lt;code&gt;&quot;./plug&quot;&lt;/code&gt; is the same plugin in both cases, and &lt;code&gt;{ thing: false, field2: true }&lt;/code&gt; will replace the original options, resulting in a config as</target>
        </trans-unit>
        <trans-unit id="52320681644791000fed795e770ae342cad2cf4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;runtime&lt;/code&gt; transformer plugin does three things:</source>
          <target state="translated">&lt;code&gt;runtime&lt;/code&gt; 변압기 플러그인은 세 가지를 수행합니다</target>
        </trans-unit>
        <trans-unit id="624009e06f3595eaa584fdddb387ade2810f3462" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceRoot&lt;/code&gt; fields to set in the generated source map, if one is desired.</source>
          <target state="translated">The &lt;code&gt;sourceRoot&lt;/code&gt; fields to set in the generated source map, if one is desired.</target>
        </trans-unit>
        <trans-unit id="e98e37fcaead1396550ecf7ae9689fd6f97df522" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform-runtime&lt;/code&gt; transformer plugin does three things:</source>
          <target state="translated">The &lt;code&gt;transform-runtime&lt;/code&gt; transformer plugin does three things:</target>
        </trans-unit>
        <trans-unit id="0057e6bb916b2dff2a324e1ddd8d252a8f10d95a" translate="yes" xml:space="preserve">
          <source>The Babel Parser follows semver in most situations. The only thing to note is that some spec-compliancy bug fixes may be released under patch versions.</source>
          <target state="translated">The Babel Parser follows semver in most situations. The only thing to note is that some spec-compliancy bug fixes may be released under patch versions.</target>
        </trans-unit>
        <trans-unit id="3eb1d34e7b46e179ab49d1431e9d95bd1c1496fd" translate="yes" xml:space="preserve">
          <source>The Babel parser (previously Babylon) is a JavaScript parser used in &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt;.</source>
          <target state="translated">The Babel parser (previously Babylon) is a JavaScript parser used in &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="463a06096146244be46414742a54e69e0621d5e9" translate="yes" xml:space="preserve">
          <source>The Babel parser generates AST according to &lt;a href=&quot;https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md&quot;&gt;Babel AST format&lt;/a&gt;. It is based on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree spec&lt;/a&gt; with the following deviations:</source>
          <target state="translated">The Babel parser generates AST according to &lt;a href=&quot;https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md&quot;&gt;Babel AST format&lt;/a&gt;. It is based on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree spec&lt;/a&gt; with the following deviations:</target>
        </trans-unit>
        <trans-unit id="254fb827eb4727bb36de63457c39e850d86c6ae1" translate="yes" xml:space="preserve">
          <source>The Babel repo is managed as a monorepo; it's composed of many npm packages</source>
          <target state="translated">바벨 레포는 모노 레포로 관리됩니다. 많은 npm 패키지로 구성되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3e5d50d9b02912d9fb22772e03995f208012835" translate="yes" xml:space="preserve">
          <source>The Pipeline Proposal is one of three competing implementations. Which implementation the plugin should use is configured with the &lt;code&gt;&quot;proposal&quot;&lt;/code&gt; option. This option is required and should be one of:</source>
          <target state="translated">The Pipeline Proposal is one of three competing implementations. Which implementation the plugin should use is configured with the &lt;code&gt;&quot;proposal&quot;&lt;/code&gt; option. This option is required and should be one of:</target>
        </trans-unit>
        <trans-unit id="e39ee4075faedb0d5af87f43c3cbc2ec307f6a57" translate="yes" xml:space="preserve">
          <source>The TC39 stage process is also explained in detail across a few posts by Yehuda Katz (@wycatz) over at &lt;a href=&quot;https://thefeedbackloop.xyz&quot;&gt;thefeedbackloop.xyz&lt;/a&gt;: &lt;a href=&quot;https://thefeedbackloop.xyz/tc39-a-process-sketch-stages-0-and-1/&quot;&gt;Stage 0 and 1&lt;/a&gt;, &lt;a href=&quot;https://thefeedbackloop.xyz/tc39-process-sketch-stage-2/&quot;&gt;Stage 2&lt;/a&gt;, &lt;a href=&quot;https://thefeedbackloop.xyz/tc39-process-sketch-stage-3/&quot;&gt;Stage 3&lt;/a&gt;, and Stage 4 coming soon.</source>
          <target state="translated">TC39 단계 프로세스는 예후 이상에서 카츠 (@wycatz)에 의해 몇 게시물을 통해 상세하게 설명한다 &lt;a href=&quot;https://thefeedbackloop.xyz&quot;&gt;thefeedbackloop.xyz&lt;/a&gt; : &lt;a href=&quot;https://thefeedbackloop.xyz/tc39-a-process-sketch-stages-0-and-1/&quot;&gt;0 기 및 1&lt;/a&gt; , &lt;a href=&quot;https://thefeedbackloop.xyz/tc39-process-sketch-stage-2/&quot;&gt;2 단계&lt;/a&gt; , &lt;a href=&quot;https://thefeedbackloop.xyz/tc39-process-sketch-stage-3/&quot;&gt;3 단계&lt;/a&gt; 곧, 그리고 4 단계.</target>
        </trans-unit>
        <trans-unit id="3101eea179642e3c0dc80e8437fe59ab0e9272aa" translate="yes" xml:space="preserve">
          <source>The TypeScript compiler compiles it to something like this:</source>
          <target state="translated">The TypeScript compiler compiles it to something like this:</target>
        </trans-unit>
        <trans-unit id="1fc4a9609cbd936ce57d22d59dad7a310506147a" translate="yes" xml:space="preserve">
          <source>The base directory when checking for the default &lt;a href=&quot;#configfile&quot;&gt;&lt;code&gt;&quot;configFile&quot;&lt;/code&gt;&lt;/a&gt; value</source>
          <target state="translated">The base directory when checking for the default &lt;a href=&quot;#configfile&quot;&gt; &lt;code&gt;&quot;configFile&quot;&lt;/code&gt; &lt;/a&gt; value</target>
        </trans-unit>
        <trans-unit id="27bfb33eed2c8e82aa0c863d006ba69b80e6d775" translate="yes" xml:space="preserve">
          <source>The class constructor call proposal has been withdrawn (&lt;a href=&quot;https://github.com/tc39/ecma262/blob/master/withdrawn-proposals.md#withdrawn-proposals&quot;&gt;Withdrawn Proposals&lt;/a&gt;) and &lt;a href=&quot;https://github.com/babel/babel/wiki/Babel-7&quot;&gt;it will be removed in Babel 7&lt;/a&gt;.</source>
          <target state="translated">클래스 생성자 호출 제안이 철회되었으며 ( &lt;a href=&quot;https://github.com/tc39/ecma262/blob/master/withdrawn-proposals.md#withdrawn-proposals&quot;&gt;철회 제안서&lt;/a&gt; ) &lt;a href=&quot;https://github.com/babel/babel/wiki/Babel-7&quot;&gt;Babel 7에서 제거됩니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="16952704cc1377285893b0aaba441cd409d88001" translate="yes" xml:space="preserve">
          <source>The crux of it is that your own code needs to load the plugin/preset first. Assuming the plugin/preset loads all of its dependencies up front, what you'll want to do is:</source>
          <target state="translated">The crux of it is that your own code needs to load the plugin/preset first. Assuming the plugin/preset loads all of its dependencies up front, what you'll want to do is:</target>
        </trans-unit>
        <trans-unit id="4968c841508eb5fd7df3e65b6257b7dcbde48848" translate="yes" xml:space="preserve">
          <source>The current active environment used during configuration loading. This value is used as the key when resolving &lt;a href=&quot;#env&quot;&gt;&lt;code&gt;&quot;env&quot;&lt;/code&gt;&lt;/a&gt; configs, and is also available inside configuration functions, plugins, and presets, via the &lt;a href=&quot;../config-files/index#apienv&quot;&gt;&lt;code&gt;api.env()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">The current active environment used during configuration loading. This value is used as the key when resolving &lt;a href=&quot;#env&quot;&gt; &lt;code&gt;&quot;env&quot;&lt;/code&gt; &lt;/a&gt; configs, and is also available inside configuration functions, plugins, and presets, via the &lt;a href=&quot;../config-files/index#apienv&quot;&gt; &lt;code&gt;api.env()&lt;/code&gt; &lt;/a&gt; function.</target>
        </trans-unit>
        <trans-unit id="d57f1247f2c0f10b2258ca5a416e657142e24d30" translate="yes" xml:space="preserve">
          <source>The default behavior without options runs all transforms (behaves the same as &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-latest/&quot;&gt;babel-preset-latest&lt;/a&gt;).</source>
          <target state="translated">옵션이없는 기본 동작은 모든 변환을 실행합니다 ( &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-latest/&quot;&gt;babel-preset-latest&lt;/a&gt; 와 동일 ).</target>
        </trans-unit>
        <trans-unit id="158580f0755f0e3e6d982c0ce7d47b9cfdd5ce10" translate="yes" xml:space="preserve">
          <source>The default value for &lt;a href=&quot;#babelrcroots&quot;&gt;&lt;code&gt;&quot;babelrcRoots&quot;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The default value for &lt;a href=&quot;#babelrcroots&quot;&gt; &lt;code&gt;&quot;babelrcRoots&quot;&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7b347f7c647f68a16bf2ccccdb81e8fd73ae8a36" translate="yes" xml:space="preserve">
          <source>The filename associated with the code currently being compiled, if there is one. The filename is optional, but not all of Babel's functionality is available when the filename is unknown, because a subset of options rely on the filename for their functionality.</source>
          <target state="translated">The filename associated with the code currently being compiled, if there is one. The filename is optional, but not all of Babel's functionality is available when the filename is unknown, because a subset of options rely on the filename for their functionality.</target>
        </trans-unit>
        <trans-unit id="de16b4cd6e363f8401db51ec5421a45649ee21a7" translate="yes" xml:space="preserve">
          <source>The filename for the source code (i.e. the code in the &lt;code&gt;code&lt;/code&gt; argument). This will only be used if &lt;code&gt;code&lt;/code&gt; is a string.</source>
          <target state="translated">The filename for the source code (i.e. the code in the &lt;code&gt;code&lt;/code&gt; argument). This will only be used if &lt;code&gt;code&lt;/code&gt; is a string.</target>
        </trans-unit>
        <trans-unit id="7ff4ecfa8fed0b2ee6883713f4faa3a2ed29d9ab" translate="yes" xml:space="preserve">
          <source>The filename is exposed to plugins. Some plugins may require the presence of the filename.</source>
          <target state="translated">The filename is exposed to plugins. Some plugins may require the presence of the filename.</target>
        </trans-unit>
        <trans-unit id="51cfd662c5d5de2bb771c34026338c83965cb891" translate="yes" xml:space="preserve">
          <source>The first issue you'll likely run into is that by default, Babel expects to load &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; files from the directory set as its &lt;a href=&quot;../options/index#root&quot;&gt;&quot;root&quot;&lt;/a&gt;, which means that if you create a &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt;, but run Babel inside an individual package, e.g.</source>
          <target state="translated">The first issue you'll likely run into is that by default, Babel expects to load &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; files from the directory set as its &lt;a href=&quot;../options/index#root&quot;&gt;&quot;root&quot;&lt;/a&gt;, which means that if you create a &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt;, but run Babel inside an individual package, e.g.</target>
        </trans-unit>
        <trans-unit id="cf290f0c48605c3b8b841537c9a62ec8a5b4f2cc" translate="yes" xml:space="preserve">
          <source>The first step in any monorepo structure should be to create a &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; file in repository root. This establishes Babel's core concept of the base directory of your repository. Even if you want to use &lt;a href=&quot;#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; files to configure each separate package, it is important to have as a place for repo-level options.</source>
          <target state="translated">The first step in any monorepo structure should be to create a &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; file in repository root. This establishes Babel's core concept of the base directory of your repository. Even if you want to use &lt;a href=&quot;#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt; files to configure each separate package, it is important to have as a place for repo-level options.</target>
        </trans-unit>
        <trans-unit id="a8d8efd68e4584514e2d59dc0f48c2c1e3df6090" translate="yes" xml:space="preserve">
          <source>The following are currently supported:</source>
          <target state="translated">The following are currently supported:</target>
        </trans-unit>
        <trans-unit id="2a6b05e12db6f96811f6c71318dfb676d7653498" translate="yes" xml:space="preserve">
          <source>The following features are already enabled on the latest version of &lt;code&gt;@babel/parser&lt;/code&gt;, and cannot be disabled because they are part of the language. You should enable these features only if you are using an older version.</source>
          <target state="translated">The following features are already enabled on the latest version of &lt;code&gt;@babel/parser&lt;/code&gt; , and cannot be disabled because they are part of the language. You should enable these features only if you are using an older version.</target>
        </trans-unit>
        <trans-unit id="28e5e37b9515f77dde625dc36232d0fc5bf9bca0" translate="yes" xml:space="preserve">
          <source>The gist of Stage 1 is:</source>
          <target state="translated">1 단계의 요지는 :</target>
        </trans-unit>
        <trans-unit id="db3d1cc767665de8aa532256295dd638caab9341" translate="yes" xml:space="preserve">
          <source>The gist of Stage 2 is:</source>
          <target state="translated">2 단계의 요지는 :</target>
        </trans-unit>
        <trans-unit id="4edde476c1cdd0834517cb58d5a0e1a3bf1f4087" translate="yes" xml:space="preserve">
          <source>The gist of Stage 3 is:</source>
          <target state="translated">3 단계의 요지는 :</target>
        </trans-unit>
        <trans-unit id="20a39044a6f678ded9a77a23e53918eae547bde0" translate="yes" xml:space="preserve">
          <source>The initial path that will be processed based on the &lt;a href=&quot;#rootmode&quot;&gt;&lt;code&gt;&quot;rootMode&quot;&lt;/code&gt;&lt;/a&gt; to determine the conceptual root folder for the current Babel project. This is used in two primary cases:</source>
          <target state="translated">The initial path that will be processed based on the &lt;a href=&quot;#rootmode&quot;&gt; &lt;code&gt;&quot;rootMode&quot;&lt;/code&gt; &lt;/a&gt; to determine the conceptual root folder for the current Babel project. This is used in two primary cases:</target>
        </trans-unit>
        <trans-unit id="4343fd6e3867000931eb76c41073fec0034ebd90" translate="yes" xml:space="preserve">
          <source>The javascript &lt;a href=&quot;http://mdn.io/date&quot;&gt;Date&lt;/a&gt; works this way:</source>
          <target state="translated">자바 스크립트 &lt;a href=&quot;http://mdn.io/date&quot;&gt;날짜&lt;/a&gt; 는 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="609c9f9712cbf9a1582e95137d8cef0acc226feb" translate="yes" xml:space="preserve">
          <source>The latest ECMAScript version enabled by default (ES2020).</source>
          <target state="translated">The latest ECMAScript version enabled by default (ES2020).</target>
        </trans-unit>
        <trans-unit id="7946241b2385fa6293651f1305883c832e8ab81d" translate="yes" xml:space="preserve">
          <source>The main part is creating a custom jest transformer file that wraps &lt;code&gt;babel-jest&lt;/code&gt;'s default behavior in order to set the option, e.g.</source>
          <target state="translated">The main part is creating a custom jest transformer file that wraps &lt;code&gt;babel-jest&lt;/code&gt; 's default behavior in order to set the option, e.g.</target>
        </trans-unit>
        <trans-unit id="96f66e25bbbf634c2a2f9eae92ce902796678075" translate="yes" xml:space="preserve">
          <source>The move makes it much easier to release and develop in sync with the rest of Babel!</source>
          <target state="translated">이로 인해 나머지 Babel과 동기화하여 릴리스 및 개발이 훨씬 쉬워졌습니다!</target>
        </trans-unit>
        <trans-unit id="278b96da1a6e25d423e62e6662f3cb77e5fece10" translate="yes" xml:space="preserve">
          <source>The name to use for the file inside the source map object.</source>
          <target state="translated">The name to use for the file inside the source map object.</target>
        </trans-unit>
        <trans-unit id="9bebe40257332aee4d1af036e9bf328fdf4082a2" translate="yes" xml:space="preserve">
          <source>The new API takes a &lt;code&gt;location&lt;/code&gt; object, similar to what is available in an AST.</source>
          <target state="translated">The new API takes a &lt;code&gt;location&lt;/code&gt; object, similar to what is available in an AST.</target>
        </trans-unit>
        <trans-unit id="e08f0281889c166ec7ea7555b243296fa958fce3" translate="yes" xml:space="preserve">
          <source>The official TypeScript compiler has many &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;options&lt;/a&gt; for configuring how it compiles and type checks. While many don't apply, some behaviors might be useful and their equivalents in Babel can be enabled by some configuration options or plugins.</source>
          <target state="translated">The official TypeScript compiler has many &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;options&lt;/a&gt; for configuring how it compiles and type checks. While many don't apply, some behaviors might be useful and their equivalents in Babel can be enabled by some configuration options or plugins.</target>
        </trans-unit>
        <trans-unit id="cbcb18901932563e6a9a709503f4c11a51b6c23f" translate="yes" xml:space="preserve">
          <source>The plugin defaults to assuming that all polyfillable APIs will be provided by the user. Otherwise the &lt;a href=&quot;#corejs&quot;&gt;&lt;code&gt;corejs&lt;/code&gt;&lt;/a&gt; option needs to be specified.</source>
          <target state="translated">The plugin defaults to assuming that all polyfillable APIs will be provided by the user. Otherwise the &lt;a href=&quot;#corejs&quot;&gt; &lt;code&gt;corejs&lt;/code&gt; &lt;/a&gt; option needs to be specified.</target>
        </trans-unit>
        <trans-unit id="fdfeae270b171e9b5e6031b7c24b61a1ddbeeb51" translate="yes" xml:space="preserve">
          <source>The plugin transforms the following:</source>
          <target state="translated">The plugin transforms the following:</target>
        </trans-unit>
        <trans-unit id="79519e4f77720bea0183c33b8b8ce4dc4f43f802" translate="yes" xml:space="preserve">
          <source>The polyfill is provided as a convenience but you should use it with &lt;a href=&quot;../babel-preset-env/index&quot;&gt;&lt;code&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../babel-preset-env/index#usebuiltins&quot;&gt;&lt;code&gt;useBuiltIns&lt;/code&gt; option&lt;/a&gt; so that it doesn't include the whole polyfill which isn't always needed. Otherwise, we would recommend you import the individual polyfills manually.</source>
          <target state="translated">The polyfill is provided as a convenience but you should use it with &lt;a href=&quot;../babel-preset-env/index&quot;&gt; &lt;code&gt;@babel/preset-env&lt;/code&gt; &lt;/a&gt; and the &lt;a href=&quot;../babel-preset-env/index#usebuiltins&quot;&gt; &lt;code&gt;useBuiltIns&lt;/code&gt; option&lt;/a&gt; so that it doesn't include the whole polyfill which isn't always needed. Otherwise, we would recommend you import the individual polyfills manually.</target>
        </trans-unit>
        <trans-unit id="2eabe7c3985106a9225dc268a0a952c9c517d36f" translate="yes" xml:space="preserve">
          <source>The possible options are the same as the &lt;code&gt;include&lt;/code&gt; option.</source>
          <target state="translated">가능한 옵션은 &lt;code&gt;include&lt;/code&gt; 옵션 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="80bf76a0739fa4b188c8dcb0bfec553856db2f25" translate="yes" xml:space="preserve">
          <source>The primary downside of this project-wide config is that, because it relies on the working directory, it can be more painful to use in monorepos if the working directory is not the monorepo root. See the &lt;a href=&quot;#monorepos&quot;&gt;monorepo&lt;/a&gt; documentation for examples of how to use config files in that context.</source>
          <target state="translated">The primary downside of this project-wide config is that, because it relies on the working directory, it can be more painful to use in monorepos if the working directory is not the monorepo root. See the &lt;a href=&quot;#monorepos&quot;&gt;monorepo&lt;/a&gt; documentation for examples of how to use config files in that context.</target>
        </trans-unit>
        <trans-unit id="d444dc0f36539cf1694fb0b475f0ebf9a9965a85" translate="yes" xml:space="preserve">
          <source>The require hook will bind itself to node's require and automatically compile files on the fly.</source>
          <target state="translated">require 훅은 노드의 require에 바인딩되고 파일을 자동으로 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="bdbe2b2ecd38dbb5620219054aaed16c93be8daa" translate="yes" xml:space="preserve">
          <source>The root from which all sources are relative.</source>
          <target state="translated">모든 출처가 상대적인 근</target>
        </trans-unit>
        <trans-unit id="c53ced849dd18e58d7c0159b1b5338c102b8616f" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;EntryTarget&lt;/code&gt; may be used multiple times unless each one is given a different name, and doing so will result in a duplicate-plugin/preset error.</source>
          <target state="translated">The same &lt;code&gt;EntryTarget&lt;/code&gt; may be used multiple times unless each one is given a different name, and doing so will result in a duplicate-plugin/preset error.</target>
        </trans-unit>
        <trans-unit id="076e4c174cdc7e2cae47220c7f1a86a246e83428" translate="yes" xml:space="preserve">
          <source>The same option passed to multiple plugins</source>
          <target state="translated">The same option passed to multiple plugins</target>
        </trans-unit>
        <trans-unit id="6272275ef77c1e8a76f92da2301604d19fcba20d" translate="yes" xml:space="preserve">
          <source>The simple plugin that reverses names (from the homepage):</source>
          <target state="translated">홈페이지에서 이름을 바꾸는 간단한 플러그인 :</target>
        </trans-unit>
        <trans-unit id="34a5eaf36391642ffd4aa6ab505ce1027206a2e8" translate="yes" xml:space="preserve">
          <source>The starting point where the config search for browserslist will start, and ascend to the system root until found.</source>
          <target state="translated">The starting point where the config search for browserslist will start, and ascend to the system root until found.</target>
        </trans-unit>
        <trans-unit id="f738179148655a8fa2b0ce65e92eac059a311086" translate="yes" xml:space="preserve">
          <source>The three primary cases users could run into are:</source>
          <target state="translated">The three primary cases users could run into are:</target>
        </trans-unit>
        <trans-unit id="d1a99cac4c6e8f59c4226b95b280f3a91a44aa49" translate="yes" xml:space="preserve">
          <source>The transformation plugin is typically used only in development, but the runtime itself will be depended on by your deployed code. See the examples below for more details.</source>
          <target state="translated">The transformation plugin is typically used only in development, but the runtime itself will be depended on by your deployed code. See the examples below for more details.</target>
        </trans-unit>
        <trans-unit id="11cad8b8b5f43aedb3ae8d78487fd491d4c6e030" translate="yes" xml:space="preserve">
          <source>The transformation plugin is typically used only in development, but the runtime itself will be depended on by your deployed/published code. See the examples below for more details.</source>
          <target state="translated">변환 플러그인은 일반적으로 개발에서만 사용되지만 런타임 자체는 배포 / 게시 된 코드에 따라 다릅니다. 자세한 내용은 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aa086532e01e09d8392a5225ed1604ec2f5e180f" translate="yes" xml:space="preserve">
          <source>The transformer will alias these built-ins to &lt;code&gt;core-js&lt;/code&gt; so you can use them seamlessly without having to require the polyfill.</source>
          <target state="translated">트랜스포머는 이러한 내장 기능을 &lt;code&gt;core-js&lt;/code&gt; 로 별칭 지정 하므로 polyfill을 요구하지 않고 원활하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2d862a7960b04c072dd6a04c474f0b54614a0c8" translate="yes" xml:space="preserve">
          <source>The two cases where imports can never be lazy are:</source>
          <target state="translated">The two cases where imports can never be lazy are:</target>
        </trans-unit>
        <trans-unit id="9826f18cb081905cad3ed7534965f05cf2bb8361" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;lazy&lt;/code&gt; has a few possible effects:</source>
          <target state="translated">The value of &lt;code&gt;lazy&lt;/code&gt; has a few possible effects:</target>
        </trans-unit>
        <trans-unit id="2c010dd9d1098d2ea8d5614d05875d1ed4534440" translate="yes" xml:space="preserve">
          <source>The version string for the Babel version that is loading the config file.</source>
          <target state="translated">The version string for the Babel version that is loading the config file.</target>
        </trans-unit>
        <trans-unit id="d78ada5d9c45a60f1acf759ebb33475b8aec1ed8" translate="yes" xml:space="preserve">
          <source>The working directory that all paths in the programmatic options will be resolved relative to.</source>
          <target state="translated">The working directory that all paths in the programmatic options will be resolved relative to.</target>
        </trans-unit>
        <trans-unit id="94fb41e898a35661c4758fab47e2f57f8442a268" translate="yes" xml:space="preserve">
          <source>The wrapper works on IE11 and every other browser with &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; or &lt;code&gt;__proto__&lt;/code&gt; as fallback. There is &lt;strong&gt;NO IE &amp;lt;= 10 support&lt;/strong&gt;. If you need IE &amp;lt;= 10 it's recommended that you don't extend natives.</source>
          <target state="translated">The wrapper works on IE11 and every other browser with &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; or &lt;code&gt;__proto__&lt;/code&gt; as fallback. There is &lt;strong&gt;NO IE &amp;lt;= 10 support&lt;/strong&gt;. If you need IE &amp;lt;= 10 it's recommended that you don't extend natives.</target>
        </trans-unit>
        <trans-unit id="b0620d61a28554e07f565e68164a5c658cf3a53a" translate="yes" xml:space="preserve">
          <source>There are a few edge cases to consider when using a file-relative config:</source>
          <target state="translated">There are a few edge cases to consider when using a file-relative config:</target>
        </trans-unit>
        <trans-unit id="f3a1f7e396e38e04c9d6397fca7411df31d1dccf" translate="yes" xml:space="preserve">
          <source>There are a few things to note about the default semantics.</source>
          <target state="translated">기본 의미에 대해 몇 가지주의 할 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2734d5b27c149920dbf68b117ce8da2c1c6c7e7" translate="yes" xml:space="preserve">
          <source>There are many more options available in the babel CLI, see &lt;a href=&quot;../api/index#options&quot;&gt;options&lt;/a&gt;, &lt;code&gt;babel --help&lt;/code&gt; and other sections for more information.</source>
          <target state="translated">babel CLI에는 더 많은 옵션이 있습니다 . 자세한 내용 은 &lt;a href=&quot;../api/index#options&quot;&gt;options&lt;/a&gt; , &lt;code&gt;babel --help&lt;/code&gt; 및 기타 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2fcc97bec7b56e54575c03ae42d0f274dfec3e6d" translate="yes" xml:space="preserve">
          <source>There are many more options available, see &lt;a href=&quot;../options/index&quot;&gt;options&lt;/a&gt;, &lt;code&gt;babel --help&lt;/code&gt; and other sections for more information.</source>
          <target state="translated">There are many more options available, see &lt;a href=&quot;../options/index&quot;&gt;options&lt;/a&gt;, &lt;code&gt;babel --help&lt;/code&gt; and other sections for more information.</target>
        </trans-unit>
        <trans-unit id="5d387d2039e83048f54c05c0f1f05e122f09be5d" translate="yes" xml:space="preserve">
          <source>There are some caveats, but you can use &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-add-module-exports&quot;&gt;babel-plugin-add-module-exports&lt;/a&gt;, so that updating to Babel 6 isn't a breaking change since users that don't use ES modules don't have to do &lt;code&gt;require(&quot;your-module&quot;).default&lt;/code&gt;.</source>
          <target state="translated">이 몇 가지주의 사항이있다, 그러나 당신이 사용할 수있는 &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-add-module-exports&quot;&gt;바벨 - 플러그인 - 추가 모듈 수출&lt;/a&gt; 바벨 6 해당 업데이트 할 필요가 없습니다 ES 모듈을 사용하지 않는 사용자 이후 주요 변경되지 않도록, &lt;code&gt;require(&quot;your-module&quot;).default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d612b14e7e90b2fb5452a0dabad06b4902de392" translate="yes" xml:space="preserve">
          <source>There are tons of tools, but at the core of it is that they need the &lt;code&gt;rootMode&lt;/code&gt; option enabled if the working directory is not already the monorepo root.</source>
          <target state="translated">There are tons of tools, but at the core of it is that they need the &lt;code&gt;rootMode&lt;/code&gt; option enabled if the working directory is not already the monorepo root.</target>
        </trans-unit>
        <trans-unit id="c92dd3eda97b7bdaf31b1c026e7d224c563fefa9" translate="yes" xml:space="preserve">
          <source>There are two primary reasons for this.</source>
          <target state="translated">여기에는 두 가지 주요 이유가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1979c23801456c7a0ec7b500a8ec81e6147afcaf" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;loose&lt;/code&gt; option for some of these plugins.</source>
          <target state="translated">이러한 플러그인 중 일부 에는 &lt;code&gt;loose&lt;/code&gt; 옵션 도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c69cad9c5171c6f424530fc50c70ead2c415f615" translate="yes" xml:space="preserve">
          <source>There is now an &lt;code&gt;estree&lt;/code&gt; plugin which reverts these deviations</source>
          <target state="translated">There is now an &lt;code&gt;estree&lt;/code&gt; plugin which reverts these deviations</target>
        </trans-unit>
        <trans-unit id="e54b159753722946f6b65cd8b3b23190361f890f" translate="yes" xml:space="preserve">
          <source>These &lt;a href=&quot;plugins/index&quot;&gt;plugins&lt;/a&gt; allow you to use new syntax, &lt;strong&gt;right now&lt;/strong&gt; without waiting for browser support. Check out our &lt;a href=&quot;https://babeljs.io/docs/en/usage&quot;&gt;usage guide&lt;/a&gt; to get started.</source>
          <target state="translated">These &lt;a href=&quot;plugins/index&quot;&gt;plugins&lt;/a&gt; allow you to use new syntax, &lt;strong&gt;right now&lt;/strong&gt; without waiting for browser support. Check out our &lt;a href=&quot;https://babeljs.io/docs/en/usage&quot;&gt;usage guide&lt;/a&gt; to get started.</target>
        </trans-unit>
        <trans-unit id="540f78d9383865ebd2ed0c185fdbe4afb708f9b3" translate="yes" xml:space="preserve">
          <source>These are only usable if you enable their syntax plugin. See &lt;a href=&quot;../syntax-async-functions/index&quot;&gt;syntax-async-functions&lt;/a&gt; for information.</source>
          <target state="translated">구문 플러그인을 활성화 한 경우에만 사용할 수 있습니다. 자세한 내용은 &lt;a href=&quot;../syntax-async-functions/index&quot;&gt;구문 비동기 기능&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6e79fdd20b6079446209cec3bc961721648c1aee" translate="yes" xml:space="preserve">
          <source>These cases will &lt;em&gt;primarily&lt;/em&gt; cause issues for users with a monorepo structure, because if you have</source>
          <target state="translated">These cases will &lt;em&gt;primarily&lt;/em&gt; cause issues for users with a monorepo structure, because if you have</target>
        </trans-unit>
        <trans-unit id="6b1357a0a2d69f305a9f306d0d7a0000ff785a3b" translate="yes" xml:space="preserve">
          <source>These caveats mean that:</source>
          <target state="translated">These caveats mean that:</target>
        </trans-unit>
        <trans-unit id="f3b013206ddbc9a752a467221e5cfb4104be2f54" translate="yes" xml:space="preserve">
          <source>These options are only allowed as part of Babel's programmatic options, so they are primarily for use by tools that wrap around Babel, or people calling &lt;code&gt;babel.transform&lt;/code&gt; directly. Users of Babel's integrations, like &lt;code&gt;babel-loader&lt;/code&gt; or &lt;a href=&quot;../babel-core/index#options&quot;&gt;&lt;code&gt;@babel/register&lt;/code&gt;&lt;/a&gt; are unlikely to use these.</source>
          <target state="translated">These options are only allowed as part of Babel's programmatic options, so they are primarily for use by tools that wrap around Babel, or people calling &lt;code&gt;babel.transform&lt;/code&gt; directly. Users of Babel's integrations, like &lt;code&gt;babel-loader&lt;/code&gt; or &lt;a href=&quot;../babel-core/index#options&quot;&gt; &lt;code&gt;@babel/register&lt;/code&gt; &lt;/a&gt; are unlikely to use these.</target>
        </trans-unit>
        <trans-unit id="1aeb270a03dee744d692b4e589b7fc301b60a616" translate="yes" xml:space="preserve">
          <source>These plugins allow Babel to &lt;strong&gt;parse&lt;/strong&gt; specific types of syntax (not transform).</source>
          <target state="translated">이 플러그인에 바벨을 허용 &lt;strong&gt;구문 분석&lt;/strong&gt; 구문의 특정 유형 (변환되지 않음).</target>
        </trans-unit>
        <trans-unit id="e2aeee9eef06ae300f2aff97e261e0f328271b2b" translate="yes" xml:space="preserve">
          <source>These plugins apply transformations to your code.</source>
          <target state="translated">이 플러그인은 코드에 변환을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="7b487e5c9b93ecb9e4f4b099238ada2ee791a142" translate="yes" xml:space="preserve">
          <source>These plugins are in the minify repo.</source>
          <target state="translated">이 플러그인은 축소 저장소에 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e6b6e7da43f3b4302e4c436c3cd82bd15d6647f" translate="yes" xml:space="preserve">
          <source>These plugins have no effect anymore, as a newer babylon version enabled them by default</source>
          <target state="translated">최신 바빌론 버전이 기본적으로 활성화되어 있으므로 이러한 플러그인은 더 이상 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ef6a514c2bfd158dc63a18e61a0ec29935949bbf" translate="yes" xml:space="preserve">
          <source>These plugins only allow Babel to &lt;strong&gt;parse&lt;/strong&gt; specific types of syntax (not transform).</source>
          <target state="translated">These plugins only allow Babel to &lt;strong&gt;parse&lt;/strong&gt; specific types of syntax (not transform).</target>
        </trans-unit>
        <trans-unit id="f0ee95090fd3b33af4e48fbefe5cb3370885d194" translate="yes" xml:space="preserve">
          <source>These proposals are subject to change so &lt;strong&gt;&lt;em&gt;use with extreme caution&lt;/em&gt;&lt;/strong&gt;, especially for anything pre stage-3. We plan to update stage-x presets when proposals change after each TC39 meeting when possible.</source>
          <target state="translated">이러한 제안은 변경 될 수 있으므로 특히 3 단계 이전의 경우 &lt;strong&gt;&lt;em&gt;매우주의해서 사용하십시오&lt;/em&gt;&lt;/strong&gt; . 우리는 가능할 때마다 각 TC39 회의 후에 제안서가 변경 될 때 스테이지 x 사전 설정을 업데이트 할 계획입니다.</target>
        </trans-unit>
        <trans-unit id="c77bc93d115723107081fe39a12cdc1b86e61f3a" translate="yes" xml:space="preserve">
          <source>They can import other helpers, exclusively by using default imports.</source>
          <target state="translated">They can import other helpers, exclusively by using default imports.</target>
        </trans-unit>
        <trans-unit id="6c13acbb3939fe360a68c245a2cc30c2289c0564" translate="yes" xml:space="preserve">
          <source>They can't have named exports.</source>
          <target state="translated">They can't have named exports.</target>
        </trans-unit>
        <trans-unit id="2b419e15fc3807e35f890d891c2efe0faba08c61" translate="yes" xml:space="preserve">
          <source>They must have a default export, which is their entry-point.</source>
          <target state="translated">They must have a default export, which is their entry-point.</target>
        </trans-unit>
        <trans-unit id="b10e500aa6155fac2665f90deae42a5b500be602" translate="yes" xml:space="preserve">
          <source>This API is used as a way to access the &lt;code&gt;caller&lt;/code&gt; data that has been passed to Babel. Since many instances of Babel may be running in the same process with different &lt;code&gt;caller&lt;/code&gt; values, this API is designed to automatically configure &lt;code&gt;api.cache&lt;/code&gt;, the same way &lt;code&gt;api.env()&lt;/code&gt; does.</source>
          <target state="translated">This API is used as a way to access the &lt;code&gt;caller&lt;/code&gt; data that has been passed to Babel. Since many instances of Babel may be running in the same process with different &lt;code&gt;caller&lt;/code&gt; values, this API is designed to automatically configure &lt;code&gt;api.cache&lt;/code&gt; , the same way &lt;code&gt;api.env()&lt;/code&gt; does.</target>
        </trans-unit>
        <trans-unit id="6e93b03aa7fd09d204fe8aaf00e0307d917b3917" translate="yes" xml:space="preserve">
          <source>This allows users to run &lt;code&gt;transform-runtime&lt;/code&gt; broadly across a whole project. By default, &lt;code&gt;transform-runtime&lt;/code&gt; imports from &lt;code&gt;@babel/runtime/foo&lt;/code&gt; directly, but that only works if &lt;code&gt;@babel/runtime&lt;/code&gt; is in the &lt;code&gt;node_modules&lt;/code&gt; of the file that is being compiled. This can be problematic for nested &lt;code&gt;node_modules&lt;/code&gt;, npm-linked modules, or CLIs that reside outside the user's project, among other cases. To avoid worrying about how the runtime module's location is resolved, this allows users to resolve the runtime once up front, and then insert absolute paths to the runtime into the output code.</source>
          <target state="translated">This allows users to run &lt;code&gt;transform-runtime&lt;/code&gt; broadly across a whole project. By default, &lt;code&gt;transform-runtime&lt;/code&gt; imports from &lt;code&gt;@babel/runtime/foo&lt;/code&gt; directly, but that only works if &lt;code&gt;@babel/runtime&lt;/code&gt; is in the &lt;code&gt;node_modules&lt;/code&gt; of the file that is being compiled. This can be problematic for nested &lt;code&gt;node_modules&lt;/code&gt; , npm-linked modules, or CLIs that reside outside the user's project, among other cases. To avoid worrying about how the runtime module's location is resolved, this allows users to resolve the runtime once up front, and then insert absolute paths to the runtime into the output code.</target>
        </trans-unit>
        <trans-unit id="f1e0fdb92d8665adadf4e3bfe738213252f78ccd" translate="yes" xml:space="preserve">
          <source>This also works with scoped packages:</source>
          <target state="translated">범위가 지정된 패키지에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f7d9c852a0b6492df19907e3933b4beb561c86bb" translate="yes" xml:space="preserve">
          <source>This can be used instead of a polyfill for any non-instance methods. It will replace things like &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;Symbol&lt;/code&gt; with the library functions in &lt;code&gt;core-js&lt;/code&gt;.</source>
          <target state="translated">This can be used instead of a polyfill for any non-instance methods. It will replace things like &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;Symbol&lt;/code&gt; with the library functions in &lt;code&gt;core-js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="903c5d0f3f2c2e705ad5329e74e34f00c212be7e" translate="yes" xml:space="preserve">
          <source>This can either be a &lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist-compatible&lt;/a&gt; query (with &lt;a href=&quot;#ineffective-browserslist-queries&quot;&gt;caveats&lt;/a&gt;):</source>
          <target state="translated">This can either be a &lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist-compatible&lt;/a&gt; query (with &lt;a href=&quot;#ineffective-browserslist-queries&quot;&gt;caveats&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="27c63407f89d53f5583382faf20a4fa4a39143fc" translate="yes" xml:space="preserve">
          <source>This can improve initial load time of your module because evaluating dependencies up front is sometimes entirely un-necessary. This is especially the case when implementing a library module.</source>
          <target state="translated">This can improve initial load time of your module because evaluating dependencies up front is sometimes entirely un-necessary. This is especially the case when implementing a library module.</target>
        </trans-unit>
        <trans-unit id="9f1b4243d77c6fd36a92bf302751138fe7c856b6" translate="yes" xml:space="preserve">
          <source>This changes RegExp constructors into literals if the RegExp arguments are strings</source>
          <target state="translated">RegExp 인수가 문자열 인 경우 RegExp 생성자가 리터럴로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="ff064156cf53b11af021ca6cb57e1c86f98b0d60" translate="yes" xml:space="preserve">
          <source>This check will only validate consts. If you need it to compile down to &lt;code&gt;var&lt;/code&gt; then you must also install and enable &lt;a href=&quot;../transform-es2015-block-scoping/index&quot;&gt;&lt;code&gt;transform-es2015-block-scoping&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 검사는 const 만 검증합니다. &lt;code&gt;var&lt;/code&gt; 로 컴파일 해야하는 경우 &lt;a href=&quot;../transform-es2015-block-scoping/index&quot;&gt; &lt;code&gt;transform-es2015-block-scoping&lt;/code&gt; &lt;/a&gt; 도 설치하고 활성화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b8af38d553337e5ef611335c626adaddaa2d47ee" translate="yes" xml:space="preserve">
          <source>This check will only validate consts. If you need it to compile down to `var` then you must also install and enable &lt;a href=&quot;../transform-es2015-block-scoping/index&quot;&gt;transform-es2015-block-scoping&lt;/a&gt;.</source>
          <target state="translated">이 검사는 const 만 검증합니다. `var`로 컴파일해야한다면 &lt;a href=&quot;../transform-es2015-block-scoping/index&quot;&gt;transform-es2015-block-scoping을&lt;/a&gt; 설치하고 활성화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e4b3d5e0d70ce8c176ec2a1cd9a05ac38a8cee5e" translate="yes" xml:space="preserve">
          <source>This example is not the best usage because it is too simple and using a ternary operator is a better option but you can have a much more complex condition in the &lt;code&gt;do { ... }&lt;/code&gt; expression with several &lt;code&gt;if ... else&lt;/code&gt; chains:</source>
          <target state="translated">이 예제는 너무 단순하고 삼항 연산자를 사용하는 것이 더 좋은 옵션이므로 최상의 사용법이 아니지만 여러 &lt;code&gt;if ... else&lt;/code&gt; 체인 을 사용하여 &lt;code&gt;do { ... }&lt;/code&gt; 표현식 에서 훨씬 더 복잡한 조건을 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0f85668deb2aea4aaa89b4eaf0f7fed255b0834" translate="yes" xml:space="preserve">
          <source>This example only includes the polyfills and code transforms needed for the last two versions of each browser, and versions of Safari greater than or equal to 7. We use &lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist&lt;/a&gt; to parse this information, so you can use &lt;a href=&quot;https://github.com/ai/browserslist#queries&quot;&gt;any valid query format supported by browserslist&lt;/a&gt;.</source>
          <target state="translated">이 예제에는 각 브라우저의 마지막 두 버전 및 7 이상의 Safari 버전에 필요한 폴리 필 및 코드 변환 만 포함됩니다. 우리는 &lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist&lt;/a&gt; 를 사용 하여이 정보를 구문 분석하므로 &lt;a href=&quot;https://github.com/ai/browserslist#queries&quot;&gt;browserslist가 지원하는 유효한 쿼리 형식을&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="771047c570d786bd7db556177e367352017e3775" translate="yes" xml:space="preserve">
          <source>This function accepts one additional option as part of the options object in addition to the standard &lt;a href=&quot;#options&quot;&gt;options&lt;/a&gt;: &lt;code&gt;showIgnoredFiles&lt;/code&gt;. When set to true, &lt;code&gt;loadPartialConfig&lt;/code&gt; always returns a result when a file is ignored, rather than &lt;code&gt;null&lt;/code&gt;. This is useful in order to allow the caller to access the list of files that influenced this outcome, e.g. for watch mode. The caller can determine whether a file was ignored based on the returned &lt;code&gt;fileHandling&lt;/code&gt; property.</source>
          <target state="translated">This function accepts one additional option as part of the options object in addition to the standard &lt;a href=&quot;#options&quot;&gt;options&lt;/a&gt;: &lt;code&gt;showIgnoredFiles&lt;/code&gt; . When set to true, &lt;code&gt;loadPartialConfig&lt;/code&gt; always returns a result when a file is ignored, rather than &lt;code&gt;null&lt;/code&gt; . This is useful in order to allow the caller to access the list of files that influenced this outcome, e.g. for watch mode. The caller can determine whether a file was ignored based on the returned &lt;code&gt;fileHandling&lt;/code&gt; property.</target>
        </trans-unit>
        <trans-unit id="352cc5c09e402ba61dc5caaeb507654184ea8f07" translate="yes" xml:space="preserve">
          <source>This injects the external helpers into &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">이것은 외부 헬퍼를 &lt;code&gt;global&lt;/code&gt; 주입합니다 .</target>
        </trans-unit>
        <trans-unit id="df1b3a57e67f4ab38f89d193e46544273dcb61fb" translate="yes" xml:space="preserve">
          <source>This is a case that you have to be aware of if you intend to use this plugin.</source>
          <target state="translated">이 플러그인을 사용하려면 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="2a6c165690300e838f42804fed27c0440c0bf352" translate="yes" xml:space="preserve">
          <source>This is a special preset that will contain all yearly presets so user&amp;rsquo;s won&amp;rsquo;t need to specify each one individually.</source>
          <target state="translated">이것은 매년 모든 사전 설정을 포함하는 특수 사전 설정이므로 사용자가 각 사전 설정을 개별적으로 지정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="a36529a7d7340d92e1ab636181ade4d2725c003e" translate="yes" xml:space="preserve">
          <source>This is an example from the &lt;a href=&quot;https://github.com/jeffmo/es-trailing-function-commas&quot;&gt;Proposal&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jeffmo/es-trailing-function-commas&quot;&gt;제안서&lt;/a&gt; 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="8046fc6be5c87f6c8a7b837b22e473f3d3a9670a" translate="yes" xml:space="preserve">
          <source>This is an example of the deprecated (but still available) API:</source>
          <target state="translated">This is an example of the deprecated (but still available) API:</target>
        </trans-unit>
        <trans-unit id="02a159c7395ea9afe072701c5e374565e05382d5" translate="yes" xml:space="preserve">
          <source>This is an object of keys that represent different environments. For example, you may have: &lt;code&gt;{env:{production:{/*specificoptions*/}}}&lt;/code&gt; which will use those options when the environment variable &lt;code&gt;BABEL_ENV&lt;/code&gt; is set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;. If &lt;code&gt;BABEL_ENV&lt;/code&gt; isn&amp;rsquo;t set then &lt;code&gt;NODE_ENV&lt;/code&gt; will be used, if it&amp;rsquo;s not set then it defaults to &lt;code&gt;&quot;development&quot;&lt;/code&gt;</source>
          <target state="translated">이것은 서로 다른 환경을 나타내는 키의 개체입니다. 예를 들어, 환경 변수 &lt;code&gt;BABEL_ENV&lt;/code&gt; 가 &lt;code&gt;&quot;production&quot;&lt;/code&gt; 으로 설정된 경우 해당 옵션을 사용하는 &lt;code&gt;{env:{production:{/*specificoptions*/}}}&lt;/code&gt; 이있을 수 있습니다 . 경우 &lt;code&gt;BABEL_ENV&lt;/code&gt; 가 설정되지 않는 &lt;code&gt;NODE_ENV&lt;/code&gt; 가로 기본 설정되어 있지 않은 경우, 사용되는 &lt;code&gt;&quot;development&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f30d71d526a7dbea9cf220e0d4190554c4f238f" translate="yes" xml:space="preserve">
          <source>This is an synonym for &lt;code&gt;sourceMaps&lt;/code&gt;. Using &lt;code&gt;sourceMaps&lt;/code&gt; is recommended.</source>
          <target state="translated">This is an synonym for &lt;code&gt;sourceMaps&lt;/code&gt; . Using &lt;code&gt;sourceMaps&lt;/code&gt; is recommended.</target>
        </trans-unit>
        <trans-unit id="1cbaf06cb68dfe4403b1046908ea8761fe8a8281" translate="yes" xml:space="preserve">
          <source>This is meant to be used as a runtime &lt;code&gt;dependency&lt;/code&gt; along with the Babel plugin &lt;a href=&quot;../babel-plugin-transform-runtime/index&quot;&gt;&lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt;&lt;/a&gt;. Please check out the documentation in that package for usage.</source>
          <target state="translated">This is meant to be used as a runtime &lt;code&gt;dependency&lt;/code&gt; along with the Babel plugin &lt;a href=&quot;../babel-plugin-transform-runtime/index&quot;&gt; &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; &lt;/a&gt;. Please check out the documentation in that package for usage.</target>
        </trans-unit>
        <trans-unit id="c2f70d58c5fc4df94c62dbeab16f7f4dd664594c" translate="yes" xml:space="preserve">
          <source>This is mostly for ensuring backwards compatibility, since most users list &amp;ldquo;es2015&amp;rdquo; before &amp;ldquo;stage-0&amp;rdquo;. For more information, see &lt;a href=&quot;https://github.com/babel/notes/blob/master/2016/2016-08/august-01.md#potential-api-changes-for-traversal&quot;&gt;notes on potential traversal API changes&lt;/a&gt;.</source>
          <target state="translated">대부분의 사용자가 &quot;stage-0&quot;앞에 &quot;es2015&quot;를 표시하므로 대부분 이전 버전과의 호환성을 보장하기위한 것입니다. 자세한 정보 &lt;a href=&quot;https://github.com/babel/notes/blob/master/2016/2016-08/august-01.md#potential-api-changes-for-traversal&quot;&gt;는 잠재적 traversal API 변경 사항에&lt;/a&gt; 대한 참고 사항을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cf7787d7b4ce76f1b27e2abb30c4b3db4892915a" translate="yes" xml:space="preserve">
          <source>This is the same as the default &lt;code&gt;template&lt;/code&gt; API, returning either a single node, or an array of nodes, depending on the parsed result.</source>
          <target state="translated">This is the same as the default &lt;code&gt;template&lt;/code&gt; API, returning either a single node, or an array of nodes, depending on the parsed result.</target>
        </trans-unit>
        <trans-unit id="712cfc8646af0bcfb7bf4e2c798df559d583b8d3" translate="yes" xml:space="preserve">
          <source>This is the same for &lt;code&gt;core-js@2&lt;/code&gt;, except the imports paths are slightly different:</source>
          <target state="translated">This is the same for &lt;code&gt;core-js@2&lt;/code&gt; , except the imports paths are slightly different:</target>
        </trans-unit>
        <trans-unit id="2bc3e1c529de185c12aef25cddb936fb4b100f26" translate="yes" xml:space="preserve">
          <source>This is useful when combined with the &lt;a href=&quot;../options/index#env&quot;&gt;env option&lt;/a&gt; configuration or &lt;a href=&quot;../config-files/index#javascript&quot;&gt;js config files&lt;/a&gt;.</source>
          <target state="translated">This is useful when combined with the &lt;a href=&quot;../options/index#env&quot;&gt;env option&lt;/a&gt; configuration or &lt;a href=&quot;../config-files/index#javascript&quot;&gt;js config files&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e4cacaf5347eac21e819aaf1f4a2a93bc1507dd0" translate="yes" xml:space="preserve">
          <source>This is where the &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; plugin comes in: all of the helpers will reference the module &lt;code&gt;@babel/runtime&lt;/code&gt; to avoid duplication across your compiled output. The runtime will be compiled into your build.</source>
          <target state="translated">This is where the &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; plugin comes in: all of the helpers will reference the module &lt;code&gt;@babel/runtime&lt;/code&gt; to avoid duplication across your compiled output. The runtime will be compiled into your build.</target>
        </trans-unit>
        <trans-unit id="fa3b15a17e1e360463e2ad01bfe48499ea2c89fe" translate="yes" xml:space="preserve">
          <source>This is where the &lt;code&gt;transform-runtime&lt;/code&gt; plugin comes in: all of the helpers will reference the module &lt;code&gt;babel-runtime&lt;/code&gt; to avoid duplication across your compiled output. The runtime will be compiled into your build.</source>
          <target state="translated">여기에서 &lt;code&gt;transform-runtime&lt;/code&gt; 플러그인이 제공됩니다. 모든 도우미는 컴파일 된 출력에서 ​​중복을 피하기 위해 &lt;code&gt;babel-runtime&lt;/code&gt; 모듈을 참조합니다 . 런타임은 빌드로 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="06a20456f58cede5455ffc32ad68cd73c466d3f3" translate="yes" xml:space="preserve">
          <source>This is with the &lt;code&gt;corejs&lt;/code&gt; option.</source>
          <target state="translated">This is with the &lt;code&gt;corejs&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="bcaeb8f6fdeea1a650b66e5d775f88ce96a80f2f" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t ideal since it relies on the regenerator runtime being included, which pollutes the global scope.</source>
          <target state="translated">이것은 전역 범위를 오염시키는 재생기 런타임에 의존하기 때문에 이상적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="60778c03b67920d56609aadcb38919789c55fca5" translate="yes" xml:space="preserve">
          <source>This isn't ideal since it relies on the regenerator runtime being included, which pollutes the global scope.</source>
          <target state="translated">This isn't ideal since it relies on the regenerator runtime being included, which pollutes the global scope.</target>
        </trans-unit>
        <trans-unit id="b114e51c1aac0fb18feac388943edccdb9f5c26b" translate="yes" xml:space="preserve">
          <source>This may be difficult to do in cases, and there are &quot;loose&quot; options for specific transforms that may tradeoff spec compliancy for readability, file size, and speed.</source>
          <target state="translated">This may be difficult to do in cases, and there are &quot;loose&quot; options for specific transforms that may tradeoff spec compliancy for readability, file size, and speed.</target>
        </trans-unit>
        <trans-unit id="cb2b96ea83511d4b0745584128098ae2417c4680" translate="yes" xml:space="preserve">
          <source>This means if two transforms both visit the &quot;Program&quot; node, the transforms will run in either plugin or preset order.</source>
          <target state="translated">This means if two transforms both visit the &quot;Program&quot; node, the transforms will run in either plugin or preset order.</target>
        </trans-unit>
        <trans-unit id="dd154de1704f42d2fb4672474a4a6038ac0e44b4" translate="yes" xml:space="preserve">
          <source>This means if two transforms both visit the &amp;ldquo;Program&amp;rdquo; node, the transforms will run in either plugin or preset order.</source>
          <target state="translated">즉, 두 변환이 모두 &quot;프로그램&quot;노드를 방문하면 변환이 플러그인 또는 사전 설정 순서로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="66e847b5fc604a4ad160c230ea83bfbf97d12d11" translate="yes" xml:space="preserve">
          <source>This means is that you can seamlessly use these native built-ins and methods without worrying about where they come from.</source>
          <target state="translated">This means is that you can seamlessly use these native built-ins and methods without worrying about where they come from.</target>
        </trans-unit>
        <trans-unit id="810c9001a9122b20fde788a0bf34ddeaccd6a259" translate="yes" xml:space="preserve">
          <source>This means is that you can seamlessly use these native built-ins and static methods without worrying about where they come from.</source>
          <target state="translated">즉, 이러한 기본 제공 및 정적 메소드의 출처를 걱정하지 않고 원활하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="166529cc29a08435e3d580eb867134287d8938ec" translate="yes" xml:space="preserve">
          <source>This means that the following &lt;strong&gt;will&lt;/strong&gt; work:</source>
          <target state="translated">이는 다음 &lt;strong&gt;이&lt;/strong&gt; 작동 함을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="b1925451989dbd40cd87913b7122216014057d06" translate="yes" xml:space="preserve">
          <source>This means that you can use the regenerator runtime without polluting your current environment.</source>
          <target state="translated">이것은 현재 환경을 오염시키지 않고 재생기 런타임을 사용할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="3bcd1c5226f16f6ff8fd2b7d8c7a09240c0e0fcb" translate="yes" xml:space="preserve">
          <source>This means you can use new built-ins like &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;WeakMap&lt;/code&gt;, static methods like &lt;code&gt;Array.from&lt;/code&gt; or &lt;code&gt;Object.assign&lt;/code&gt;, instance methods like &lt;code&gt;Array.prototype.includes&lt;/code&gt;, and generator functions (provided you use the &lt;a href=&quot;../../plugins/transform-regenerator/index&quot;&gt;regenerator&lt;/a&gt; plugin). The polyfill adds to the global scope as well as native prototypes like &lt;code&gt;String&lt;/code&gt; in order to do this.</source>
          <target state="translated">이는 &lt;code&gt;Promise&lt;/code&gt; 또는 &lt;code&gt;WeakMap&lt;/code&gt; 과 같은 새로운 내장 기능 , &lt;code&gt;Array.from&lt;/code&gt; 또는 &lt;code&gt;Object.assign&lt;/code&gt; 과 같은 정적 메소드 , &lt;code&gt;Array.prototype.includes&lt;/code&gt; 와 같은 인스턴스 메소드 및 생성기 함수 ( &lt;a href=&quot;../../plugins/transform-regenerator/index&quot;&gt;재생기&lt;/a&gt; 플러그인 사용시)를 사용할 수 있음을 의미합니다 . 폴리 필 은이를 위해 &lt;code&gt;String&lt;/code&gt; 과 같은 기본 프로토 타입뿐만 아니라 전역 범위에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="8209d96c9e43d3f4110070628914e58cf7bdd95b" translate="yes" xml:space="preserve">
          <source>This means you can use new built-ins like &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;WeakMap&lt;/code&gt;, static methods like &lt;code&gt;Array.from&lt;/code&gt; or &lt;code&gt;Object.assign&lt;/code&gt;, instance methods like &lt;code&gt;Array.prototype.includes&lt;/code&gt;, and generator functions (provided you use the &lt;a href=&quot;../babel-plugin-transform-regenerator/index&quot;&gt;regenerator&lt;/a&gt; plugin). The polyfill adds to the global scope as well as native prototypes like &lt;code&gt;String&lt;/code&gt; in order to do this.</source>
          <target state="translated">This means you can use new built-ins like &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;WeakMap&lt;/code&gt; , static methods like &lt;code&gt;Array.from&lt;/code&gt; or &lt;code&gt;Object.assign&lt;/code&gt; , instance methods like &lt;code&gt;Array.prototype.includes&lt;/code&gt; , and generator functions (provided you use the &lt;a href=&quot;../babel-plugin-transform-regenerator/index&quot;&gt;regenerator&lt;/a&gt; plugin). The polyfill adds to the global scope as well as native prototypes like &lt;code&gt;String&lt;/code&gt; in order to do this.</target>
        </trans-unit>
        <trans-unit id="bda80836b0a4f43bfeac8babff67be1105f95170" translate="yes" xml:space="preserve">
          <source>This option allows destructuring array-like objects using the array destructuring syntax.</source>
          <target state="translated">This option allows destructuring array-like objects using the array destructuring syntax.</target>
        </trans-unit>
        <trans-unit id="283d8dbdf4c8a61bd174739d7f07f2f4aae1da01" translate="yes" xml:space="preserve">
          <source>This option allows for-of to be used with array-like objects.</source>
          <target state="translated">This option allows for-of to be used with array-like objects.</target>
        </trans-unit>
        <trans-unit id="b0d9d2465f13fcb1bfd87b80d7178dbac99661c7" translate="yes" xml:space="preserve">
          <source>This option allows spreading array-like objects as if they were arrays.</source>
          <target state="translated">This option allows spreading array-like objects as if they were arrays.</target>
        </trans-unit>
        <trans-unit id="3ce3d089eefb4aa7ebb244e783e4a36450e9f429" translate="yes" xml:space="preserve">
          <source>This option allows users to provide a list of other packages that should be considered &quot;root&quot; packages when considering whether to load &lt;code&gt;.babelrc.json&lt;/code&gt; files.</source>
          <target state="translated">This option allows users to provide a list of other packages that should be considered &quot;root&quot; packages when considering whether to load &lt;code&gt;.babelrc.json&lt;/code&gt; files.</target>
        </trans-unit>
        <trans-unit id="61fa6120660a8acc120a1614e3c613e23c4a8282" translate="yes" xml:space="preserve">
          <source>This option configures how &lt;code&gt;@babel/preset-env&lt;/code&gt; handles polyfills.</source>
          <target state="translated">This option configures how &lt;code&gt;@babel/preset-env&lt;/code&gt; handles polyfills.</target>
        </trans-unit>
        <trans-unit id="01b4bac642a40bf2ae2ba3d7a1b65a6d1ef63881" translate="yes" xml:space="preserve">
          <source>This option enables a new plugin that replaces the &lt;code&gt;import &quot;core-js/stable&quot;;&lt;/code&gt; and &lt;code&gt;import &quot;regenerator-runtime/runtime&quot;&lt;/code&gt; statements (or &lt;code&gt;require(&quot;core-js&quot;)&lt;/code&gt; and &lt;code&gt;require(&quot;regenerator-runtime/runtime&quot;)&lt;/code&gt;) with individual requires to different &lt;code&gt;core-js&lt;/code&gt; entry points based on environment.</source>
          <target state="translated">This option enables a new plugin that replaces the &lt;code&gt;import &quot;core-js/stable&quot;;&lt;/code&gt; and &lt;code&gt;import &quot;regenerator-runtime/runtime&quot;&lt;/code&gt; statements (or &lt;code&gt;require(&quot;core-js&quot;)&lt;/code&gt; and &lt;code&gt;require(&quot;regenerator-runtime/runtime&quot;)&lt;/code&gt; ) with individual requires to different &lt;code&gt;core-js&lt;/code&gt; entry points based on environment.</target>
        </trans-unit>
        <trans-unit id="ae8233b99178c18a7fd46a5428d3e6a215c79cc7" translate="yes" xml:space="preserve">
          <source>This option enables a new plugin that replaces the statement &lt;code&gt;import &quot;babel-polyfill&quot;&lt;/code&gt; or &lt;code&gt;require(&quot;babel-polyfill&quot;)&lt;/code&gt; with individual requires for &lt;code&gt;babel-polyfill&lt;/code&gt; based on environment.</source>
          <target state="translated">이 옵션을 사용하면 &lt;code&gt;import &quot;babel-polyfill&quot;&lt;/code&gt; 또는 &lt;code&gt;require(&quot;babel-polyfill&quot;)&lt;/code&gt; &lt;code&gt;babel-polyfill&lt;/code&gt; 을 환경에 따라 babel-polyfill에 대한 개별 요구 사항으로 바꾸는 새로운 플러그인을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="931eb2bd4915aa2de6e98544a8a911aeeeb17ab5" translate="yes" xml:space="preserve">
          <source>This option enables the following:</source>
          <target state="translated">This option enables the following:</target>
        </trans-unit>
        <trans-unit id="9bcb2322a446115e5ad1670fc5b434917d59d9ae" translate="yes" xml:space="preserve">
          <source>This option is a synonym for &lt;a href=&quot;#test&quot;&gt;&lt;code&gt;&quot;test&quot;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This option is a synonym for &lt;a href=&quot;#test&quot;&gt; &lt;code&gt;&quot;test&quot;&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="675d6f42a00c93be748f4a9298721a9e93aa7a2a" translate="yes" xml:space="preserve">
          <source>This option is important because the type of the current file affects both parsing of input files, and certain transforms that may wish to add &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;require&lt;/code&gt; usage to the current file.</source>
          <target state="translated">This option is important because the type of the current file affects both parsing of input files, and certain transforms that may wish to add &lt;code&gt;import&lt;/code&gt; / &lt;code&gt;require&lt;/code&gt; usage to the current file.</target>
        </trans-unit>
        <trans-unit id="b4fe09ec9e0c438a154bb07c75b0f642ad928c4a" translate="yes" xml:space="preserve">
          <source>This option is not compatible with &lt;code&gt;syntacticPlaceholders: true&lt;/code&gt;</source>
          <target state="translated">This option is not compatible with &lt;code&gt;syntacticPlaceholders: true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d0b99a5ba8765d22c37865879f70f9dd08a55f1" translate="yes" xml:space="preserve">
          <source>This option is useful for &quot;blacklisting&quot; a transform like &lt;code&gt;@babel/plugin-transform-regenerator&lt;/code&gt; if you don't use generators and don't want to include &lt;code&gt;regeneratorRuntime&lt;/code&gt; (when using &lt;code&gt;useBuiltIns&lt;/code&gt;) or for using another plugin like &lt;a href=&quot;https://github.com/MatAtBread/fast-async&quot;&gt;fast-async&lt;/a&gt; instead of &lt;a href=&quot;../babel-plugin-proposal-async-generator-functions/index&quot;&gt;Babel's async-to-gen&lt;/a&gt;.</source>
          <target state="translated">This option is useful for &quot;blacklisting&quot; a transform like &lt;code&gt;@babel/plugin-transform-regenerator&lt;/code&gt; if you don't use generators and don't want to include &lt;code&gt;regeneratorRuntime&lt;/code&gt; (when using &lt;code&gt;useBuiltIns&lt;/code&gt; ) or for using another plugin like &lt;a href=&quot;https://github.com/MatAtBread/fast-async&quot;&gt;fast-async&lt;/a&gt; instead of &lt;a href=&quot;../babel-plugin-proposal-async-generator-functions/index&quot;&gt;Babel's async-to-gen&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f943b66817095966fc6628e9dcd690fde0ec0d11" translate="yes" xml:space="preserve">
          <source>This option is useful for &amp;ldquo;blacklisting&amp;rdquo; a transform like &lt;code&gt;transform-regenerator&lt;/code&gt; if you don&amp;rsquo;t use generators and don&amp;rsquo;t want to include &lt;code&gt;regeneratorRuntime&lt;/code&gt; (when using &lt;code&gt;useBuiltIns&lt;/code&gt;) or for using another plugin like &lt;a href=&quot;https://github.com/MatAtBread/fast-async&quot;&gt;fast-async&lt;/a&gt; instead of &lt;a href=&quot;../transform-async-generator-functions/index&quot;&gt;Babel&amp;rsquo;s async-to-gen&lt;/a&gt;.</source>
          <target state="translated">이 옵션은 생성기를 사용하지 않고 &lt;code&gt;regeneratorRuntime&lt;/code&gt; 을 포함하지 않으려는 경우 ( &lt;code&gt;useBuiltIns&lt;/code&gt; 사용시 ) 또는 &lt;a href=&quot;../transform-async-generator-functions/index&quot;&gt;Babel의 비동기식&lt;/a&gt; 대신 &lt;a href=&quot;https://github.com/MatAtBread/fast-async&quot;&gt;빠른 비동기식&lt;/a&gt; 과 같은 다른 플러그인을 사용 하지 않으려는 경우 &lt;code&gt;transform-regenerator&lt;/code&gt; 와 같은 변환 을 &quot;블랙리스트&quot;에 유용합니다. gen .</target>
        </trans-unit>
        <trans-unit id="b42bc54e52c06465fd8e91acdb0fbd48b9359336" translate="yes" xml:space="preserve">
          <source>This option is useful if there is a bug in a native implementation, or a combination of a non-supported feature + a supported one doesn&amp;rsquo;t work.</source>
          <target state="translated">이 옵션은 기본 구현에 버그가 있거나 지원되지 않는 기능 + 지원되는 기능의 조합이 작동하지 않는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c1f8102657be66b76ac1734085bfcc1ce172c473" translate="yes" xml:space="preserve">
          <source>This option is useful if there is a bug in a native implementation, or a combination of a non-supported feature + a supported one doesn't work.</source>
          <target state="translated">This option is useful if there is a bug in a native implementation, or a combination of a non-supported feature + a supported one doesn't work.</target>
        </trans-unit>
        <trans-unit id="85451330a0b1f2d6a74304d4172f2cd268d5c66e" translate="yes" xml:space="preserve">
          <source>This option only has an effect when used alongside &lt;code&gt;useBuiltIns: usage&lt;/code&gt; or &lt;code&gt;useBuiltIns: entry&lt;/code&gt;, and ensures &lt;code&gt;@babel/preset-env&lt;/code&gt; injects the correct imports for your &lt;code&gt;core-js&lt;/code&gt; version.</source>
          <target state="translated">This option only has an effect when used alongside &lt;code&gt;useBuiltIns: usage&lt;/code&gt; or &lt;code&gt;useBuiltIns: entry&lt;/code&gt; , and ensures &lt;code&gt;@babel/preset-env&lt;/code&gt; injects the correct imports for your &lt;code&gt;core-js&lt;/code&gt; version.</target>
        </trans-unit>
        <trans-unit id="294efd48d4d57a7a1ec91f35f72625e66ae33b5c" translate="yes" xml:space="preserve">
          <source>This option requires changing the dependency used to provide the necessary runtime helpers:</source>
          <target state="translated">This option requires changing the dependency used to provide the necessary runtime helpers:</target>
        </trans-unit>
        <trans-unit id="9f872beb87d30f90fe5fc27b815bae771b4f71f4" translate="yes" xml:space="preserve">
          <source>This option was added to help tc39 collect feedback from the community by allowing experimentation with both possible syntaxes.</source>
          <target state="translated">This option was added to help tc39 collect feedback from the community by allowing experimentation with both possible syntaxes.</target>
        </trans-unit>
        <trans-unit id="b679b6d55e69e651c5f342152314e807e3099b98" translate="yes" xml:space="preserve">
          <source>This option was removed in v7 by just making it the default.</source>
          <target state="translated">This option was removed in v7 by just making it the default.</target>
        </trans-unit>
        <trans-unit id="4a7865156860f1c598c983eaedcb4b7879599554" translate="yes" xml:space="preserve">
          <source>This option wraps all template literal expressions with &lt;code&gt;String&lt;/code&gt;. See &lt;a href=&quot;https://github.com/babel/babel/issues/1065&quot;&gt;babel/babel#1065&lt;/a&gt; for more info.</source>
          <target state="translated">이 옵션은 모든 템플릿 리터럴 표현식을 &lt;code&gt;String&lt;/code&gt; 으로 래핑합니다 . 자세한 내용은 &lt;a href=&quot;https://github.com/babel/babel/issues/1065&quot;&gt;babel / babel # 1065&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="483c48cd7ffe8be916c564f6fec1b0404c6f1d0d" translate="yes" xml:space="preserve">
          <source>This option wraps the generated function in &lt;code&gt;.bind(this)&lt;/code&gt; and keeps uses of &lt;code&gt;this&lt;/code&gt; inside the function as-is, instead of using a renamed &lt;code&gt;this&lt;/code&gt;. It also adds a runtime check to ensure the functions are not instantiated.</source>
          <target state="translated">이 옵션은 상기 생성 함수를 래핑 &lt;code&gt;.bind(this)&lt;/code&gt; 과의 계속 사용 &lt;code&gt;this&lt;/code&gt; A가 변경 사용하는 대신, 그대로 함수 내 &lt;code&gt;this&lt;/code&gt; . 또한 함수가 인스턴스화되지 않도록 런타임 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="418d5b39e30ac58364059907320cbaa760245924" translate="yes" xml:space="preserve">
          <source>This option, combined with the &lt;a href=&quot;#root&quot;&gt;&lt;code&gt;&quot;root&quot;&lt;/code&gt;&lt;/a&gt; value, defines how Babel chooses its project root. The different modes define different ways that Babel can process the &lt;a href=&quot;#root&quot;&gt;&lt;code&gt;&quot;root&quot;&lt;/code&gt;&lt;/a&gt; value to get the final project root.</source>
          <target state="translated">This option, combined with the &lt;a href=&quot;#root&quot;&gt; &lt;code&gt;&quot;root&quot;&lt;/code&gt; &lt;/a&gt; value, defines how Babel chooses its project root. The different modes define different ways that Babel can process the &lt;a href=&quot;#root&quot;&gt; &lt;code&gt;&quot;root&quot;&lt;/code&gt; &lt;/a&gt; value to get the final project root.</target>
        </trans-unit>
        <trans-unit id="1fd1e095825ae086a9625a582a18a2aab3d34e6f" translate="yes" xml:space="preserve">
          <source>This plugin actually converts duplicate keys in objects to be computed properties, which then must be handled by the &lt;a href=&quot;../babel-plugin-transform-computed-properties/index&quot;&gt;@babel/plugin-transform-computed-properties&lt;/a&gt; plugin. The final result won't contain any object literals with duplicate keys.</source>
          <target state="translated">This plugin actually converts duplicate keys in objects to be computed properties, which then must be handled by the &lt;a href=&quot;../babel-plugin-transform-computed-properties/index&quot;&gt;@babel/plugin-transform-computed-properties&lt;/a&gt; plugin. The final result won't contain any object literals with duplicate keys.</target>
        </trans-unit>
        <trans-unit id="e328a01539eac72918602ea2b0f6fb8505efdc08" translate="yes" xml:space="preserve">
          <source>This plugin actually converts duplicate keys in objects to be computed properties, which then must be handled by the &lt;a href=&quot;../transform-es2015-computed-properties/index&quot;&gt;transform-es2015-computed-properties&lt;/a&gt; plugin. The final result won&amp;rsquo;t contain any object literals with duplicate keys.</source>
          <target state="translated">이 플러그인은 실제로 객체의 중복 키를 계산 된 속성으로 &lt;a href=&quot;../transform-es2015-computed-properties/index&quot;&gt;변환&lt;/a&gt; 한 다음 transform-es2015-computed-properties 플러그인 으로 처리해야합니다 . 최종 결과에는 중복 키가있는 객체 리터럴이 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b4026f7488aea35be13820566fe06688d1ea8cf1" translate="yes" xml:space="preserve">
          <source>This plugin adds support for the syntax used by the &lt;a href=&quot;https://www.typescriptlang.org&quot;&gt;TypeScript programming language&lt;/a&gt;. However, this plugin does not add the ability to type-check the JavaScript passed to it. For that, you will need to install and set up TypeScript.</source>
          <target state="translated">This plugin adds support for the syntax used by the &lt;a href=&quot;https://www.typescriptlang.org&quot;&gt;TypeScript programming language&lt;/a&gt;. However, this plugin does not add the ability to type-check the JavaScript passed to it. For that, you will need to install and set up TypeScript.</target>
        </trans-unit>
        <trans-unit id="df3bca394c1b5420f2fc061e425263e6ac74d8d0" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;http://flowtype.org/docs/quick-reference.html#_&quot;&gt;flow syntax&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel에서 &lt;a href=&quot;http://flowtype.org/docs/quick-reference.html#_&quot;&gt;흐름 구문&lt;/a&gt; 을 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5ba22d23ce86c288ee1afc2cbd93149125a3be99" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=strawman:do_expressions&quot;&gt;do-expressions&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=strawman:do_expressions&quot;&gt;do-expressions&lt;/a&gt; 를 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f890ec9c8dbeb44526c7ea215d170e53e98142e7" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt; 를 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c9376469239b2af614785743d19bf2449932782d" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://github.com/jeffmo/es-trailing-function-commas&quot;&gt;trailing function commas&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;https://github.com/jeffmo/es-trailing-function-commas&quot;&gt;후행 함수 쉼표&lt;/a&gt; 를 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="406d702174f9aa0a974f05bb66f469490e467943" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://github.com/leebyron/ecmascript-more-export-from&quot;&gt;export extensions&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel에서 &lt;a href=&quot;https://github.com/leebyron/ecmascript-more-export-from&quot;&gt;내보내기 확장 프로그램&lt;/a&gt; 을 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d822b22d43a1760eedc47e2c26d730f00c2c3549" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://github.com/rwaldron/exponentiation-operator&quot;&gt;exponentiation operators&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;https://github.com/rwaldron/exponentiation-operator&quot;&gt;지수 연산자&lt;/a&gt; 를 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e797f2ead855f40e6be15663707a60dbc337300c" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;object rest spread syntax&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;오브젝트 레스트 스프레드 구문&lt;/a&gt; 을 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0bf0aedb7c079ed4a777a0ec55555e2b3a3d4a81" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://github.com/tc39/proposal-class-public-fields&quot;&gt;class properties&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel에서 &lt;a href=&quot;https://github.com/tc39/proposal-class-public-fields&quot;&gt;클래스 속성&lt;/a&gt; 을 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2319fc3663865cdce3d7734b87df1d32791d3534" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://github.com/wycats/javascript-decorators/blob/master/README.md&quot;&gt;decorators&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;https://github.com/wycats/javascript-decorators/blob/master/README.md&quot;&gt;데코레이터&lt;/a&gt; 를 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ecab27bada6236c230d78dea98b28b7b0cc2a205" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse &lt;a href=&quot;https://github.com/zenparsing/es-function-bind&quot;&gt;function bind syntax&lt;/a&gt;.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;https://github.com/zenparsing/es-function-bind&quot;&gt;함수 바인딩 구문&lt;/a&gt; 을 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8fdedf2f09220c1b24f8caa831c24fd1f3746569" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to parse the &lt;a href=&quot;https://github.com/allenwb/ESideas/blob/master/Generator%20metaproperty.md&quot;&gt;&lt;code&gt;function.sent&lt;/code&gt; meta property&lt;/a&gt;</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 &lt;a href=&quot;https://github.com/allenwb/ESideas/blob/master/Generator%20metaproperty.md&quot;&gt; &lt;code&gt;function.sent&lt;/code&gt; &lt;/a&gt; 메타 속성 을 구문 분석 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="487cd49eec0da9e6d3ab4ca308d4bc8e769466b6" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to transform all `__proto__` assignments to a method that will do a shallow copy of all properties.</source>
          <target state="translated">이 플러그인을 통해 Babel은 모든`__proto__` 할당을 모든 속성의 얕은 사본을 수행하는 메소드로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4a4123d6ec2368add606e240de21be306bcf600" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to transform async functions into a Bluebird coroutine.</source>
          <target state="translated">이 플러그인을 통해 Babel은 비동기 함수를 블루 버드 코 루틴으로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe54e060b0ee18f633c72a56a7e2d6ba8c93b432" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to transform boolean literals into !0 for true and !1 for false</source>
          <target state="translated">이 플러그인을 사용하면 Babel에서 부울 리터럴을! 0으로 true,! 1으로 false로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fce9d848d7a2fcdaf0a87ffb4b95d190a517a710" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to transform class constructors.</source>
          <target state="translated">이 플러그인을 통해 Babel은 클래스 생성자를 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="447355ae8595805f2492650f7cc0a595c03ea217" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to transform named function expressions into function declarations to get around some particularly nasty JScript bugs related to name function expressions.</source>
          <target state="translated">이 플러그인을 사용하면 Babel이 명명 된 함수 표현식을 함수 선언으로 변환하여 이름 함수 표현식과 관련된 일부 불쾌한 JScript 버그를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac6e4ef909b9d015626ffc3cecb2297861e4ad08" translate="yes" xml:space="preserve">
          <source>This plugin allows Babel to transform valid identifier property key literals into identifiers</source>
          <target state="translated">이 플러그인을 통해 Babel은 유효한 식별자 속성 키 리터럴을 식별자로 변환 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="06bc945f8b67b2543754961d735dbb3619a48c3d" translate="yes" xml:space="preserve">
          <source>This plugin also validates all &lt;code&gt;const&lt;/code&gt; variables. Reassignment of constants is a runtime error and it will insert the necessary error code for those.</source>
          <target state="translated">This plugin also validates all &lt;code&gt;const&lt;/code&gt; variables. Reassignment of constants is a runtime error and it will insert the necessary error code for those.</target>
        </trans-unit>
        <trans-unit id="d7399ae5890b7c21d1c3ff77cf50563a79c16779" translate="yes" xml:space="preserve">
          <source>This plugin can speed up reconciliation and reduce garbage collection pressure by hoisting React elements to the highest possible scope, preventing multiple unnecessary reinstantiations.</source>
          <target state="translated">This plugin can speed up reconciliation and reduce garbage collection pressure by hoisting React elements to the highest possible scope, preventing multiple unnecessary reinstantiations.</target>
        </trans-unit>
        <trans-unit id="f424b152540aaa3e828c4d6edd3ceeedfb28d7ed" translate="yes" xml:space="preserve">
          <source>This plugin does not support &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/enums.html#const-enums&quot;&gt;&lt;code&gt;const enum&lt;/code&gt;&lt;/a&gt;s because those require type information to compile.</source>
          <target state="translated">This plugin does not support &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/enums.html#const-enums&quot;&gt; &lt;code&gt;const enum&lt;/code&gt; &lt;/a&gt;s because those require type information to compile.</target>
        </trans-unit>
        <trans-unit id="6894404f84c57ed842e884b88d14bb101da4e079" translate="yes" xml:space="preserve">
          <source>This plugin does not support &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require&quot;&gt;&lt;code&gt;export =&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require&quot;&gt;&lt;code&gt;import =&lt;/code&gt;&lt;/a&gt;, because those cannot be compiled to ES.next. These are a TypeScript only form of &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt;.</source>
          <target state="translated">This plugin does not support &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require&quot;&gt; &lt;code&gt;export =&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require&quot;&gt; &lt;code&gt;import =&lt;/code&gt; &lt;/a&gt;, because those cannot be compiled to ES.next. These are a TypeScript only form of &lt;code&gt;import&lt;/code&gt; / &lt;code&gt;export&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="beedb55274274710b6dc2cbedd968c404db66bc2" translate="yes" xml:space="preserve">
          <source>This plugin inlines consecutive property assignments, array pushes, etc</source>
          <target state="translated">이 플러그인은 연속적인 속성 할당, 배열 푸시 등을 인라인합니다.</target>
        </trans-unit>
        <trans-unit id="34a29253b999a810e26f6f8d84ad3bc8cddd6484" translate="yes" xml:space="preserve">
          <source>This plugin is recommended in a library/tool.</source>
          <target state="translated">이 플러그인은 라이브러리 / 도구에서 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="29ca91211da88cd894fe72e55f0cb81ca7c297f5" translate="yes" xml:space="preserve">
          <source>This plugin may be enabled via &lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt;. If you wish to disable it you can either turn &lt;code&gt;strict&lt;/code&gt; off or pass &lt;code&gt;strictMode: false&lt;/code&gt; as an option to the commonjs transform.</source>
          <target state="translated">This plugin may be enabled via &lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt; . If you wish to disable it you can either turn &lt;code&gt;strict&lt;/code&gt; off or pass &lt;code&gt;strictMode: false&lt;/code&gt; as an option to the commonjs transform.</target>
        </trans-unit>
        <trans-unit id="df09c81930d3d5d5687940f118bf2595d9b2a631" translate="yes" xml:space="preserve">
          <source>This plugin may be enabled via &lt;code&gt;babel-plugin-transform-es2015-modules-commonjs&lt;/code&gt;. If you wish to disable it you can either turn &lt;code&gt;strict&lt;/code&gt; off or pass &lt;code&gt;strictMode: false&lt;/code&gt; as an option to the commonjs transform.</source>
          <target state="translated">이 플러그인은 &lt;code&gt;babel-plugin-transform-es2015-modules-commonjs&lt;/code&gt; 를 통해 활성화 될 수 있습니다 . 비활성화하려면 &lt;code&gt;strict&lt;/code&gt; 끄거나 commonjs 변환에 대한 옵션으로 &lt;code&gt;strictMode: false&lt;/code&gt; 를 전달 하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce7af9d62805c2199e4b215e74ecfc18239bfa32" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-async-generator-functions/index&quot;&gt;async-generator-functions&lt;/a&gt; and &lt;a href=&quot;../transform-regenerator/index&quot;&gt;transform-regenerator&lt;/a&gt; if generator support is not supported natively.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환을 원한다면 생성기 지원이 기본적으로 지원되지 않으면 &lt;a href=&quot;../transform-async-generator-functions/index&quot;&gt;async-generator-functions&lt;/a&gt; 및 &lt;a href=&quot;../transform-regenerator/index&quot;&gt;transform-regenerator&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="22c46cbc2bea11c0236ed8288a94b2323a48108f" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-class-constructor-call/index&quot;&gt;transform-class-constructor-call&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-class-constructor-call/index&quot;&gt;transform-class-constructor-call&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3900bdc5b9309a0826e53cdd03f08404962d1a3e" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-class-properties/index&quot;&gt;transform-class-properties&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-class-properties/index&quot;&gt;transform-class-properties&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b800963e2d58219c3d1dfd30bc8dd3cef0ee752" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-decorators/index&quot;&gt;transform-decorators&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-decorators/index&quot;&gt;transform-decorators&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="97aa3c61ae52e87ba3c99941270bfa032a9a348d" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-do-expressions/index&quot;&gt;transform-do-expressions&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-do-expressions/index&quot;&gt;transform-do-expressions&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e5154bfc5032e1d49d12085777e945477e2daea" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-exponentiation-operator/index&quot;&gt;transform-exponentiation-operator&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-exponentiation-operator/index&quot;&gt;transform-exponentiation-operator&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e82fe0d35bd25a89b479acc39be01a7c6e29b4c0" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-export-extensions/index&quot;&gt;export-extensions&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-export-extensions/index&quot;&gt;export-extensions&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf830ff08c993a007870f1536f17d25929cdf631" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-flow-strip-types/index&quot;&gt;transform-flow-strip-types&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-flow-strip-types/index&quot;&gt;transform-flow-strip-types&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0eb9a87d28dcea464545eb09b40497f427c2706" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-function-bind/index&quot;&gt;transform-function-bind&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-function-bind/index&quot;&gt;transform-function-bind&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad471a0fe44ff6586054e7b7bbedc74fa6e8b84c" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-object-rest-spread/index&quot;&gt;transform-object-rest-spread&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-object-rest-spread/index&quot;&gt;transform-object-rest-spread&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2b42cee99a54c18ff9b57a39816491eeae70a62a" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-react-jsx/index&quot;&gt;transform-react-jsx&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-react-jsx/index&quot;&gt;transform-react-jsx&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d865bd7ed4353c390be39d26f96f48108b5bc753" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;../transform-regenerator/index&quot;&gt;transform-regenerator&lt;/a&gt;, &lt;a href=&quot;../transform-async-to-generator/index&quot;&gt;transform-async-to-generator&lt;/a&gt;, or &lt;a href=&quot;../transform-async-to-module-method/index&quot;&gt;transform-async-to-module-method&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;../transform-regenerator/index&quot;&gt;transform-regenerator&lt;/a&gt; , &lt;a href=&quot;../transform-async-to-generator/index&quot;&gt;transform-async-to-generator&lt;/a&gt; 또는 &lt;a href=&quot;../transform-async-to-module-method/index&quot;&gt;transform-async-to-module-method를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2f1d20e2267a7fe5b2c2c3b4d0f505f0043e174a" translate="yes" xml:space="preserve">
          <source>This plugin only allows Babel to parse this syntax. If you want to transform it then see &lt;a href=&quot;https://github.com/airbnb/babel-plugin-dynamic-import-webpack&quot;&gt;dynamic-import-webpack&lt;/a&gt; or &lt;a href=&quot;https://github.com/airbnb/babel-plugin-dynamic-import-node&quot;&gt;dynamic-import-node&lt;/a&gt;.</source>
          <target state="translated">이 플러그인은 Babel에서만이 구문을 구문 분석 할 수 있습니다. 변환하려면 &lt;a href=&quot;https://github.com/airbnb/babel-plugin-dynamic-import-webpack&quot;&gt;dynamic-import-webpack&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/airbnb/babel-plugin-dynamic-import-node&quot;&gt;dynamic-import-node&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ea977ae31048808e8a12772b128cb52eabd3724" translate="yes" xml:space="preserve">
          <source>This plugin only removes flow types. It doesn't actually check if the types are valid itself. You'll need to use flow itself or a different babel plugin.</source>
          <target state="translated">이 플러그인은 흐름 유형 만 제거합니다. 실제로 유형 자체가 유효한지 확인하지 않습니다. 흐름 자체 또는 다른 babel 플러그인을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="4f1846511ae5e80b9e461077086e24400aef332d" translate="yes" xml:space="preserve">
          <source>This plugin places a &quot;use strict&quot;; directive at the top of all files to enable strict mode</source>
          <target state="translated">이 플러그인은 &quot;사용이 엄격합니다&quot;; 엄격 모드를 사용하도록 모든 파일의 맨 위에 지시문</target>
        </trans-unit>
        <trans-unit id="2f8b29f323dad163b70d34ce078d67adb07cb3cf" translate="yes" xml:space="preserve">
          <source>This plugin relies on &lt;code&gt;this.constructor&lt;/code&gt;, which means &lt;code&gt;super&lt;/code&gt; must already have been called when using untransformed classes.</source>
          <target state="translated">이 플러그인은 &lt;code&gt;this.constructor&lt;/code&gt; 에 의존합니다. 즉, 변환되지 않은 클래스를 사용할 때 &lt;code&gt;super&lt;/code&gt; 가 이미 호출되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="981de2db5b0383fbac4772d6fa5e88555081d2be" translate="yes" xml:space="preserve">
          <source>This plugin removes all console.* calls</source>
          <target state="translated">이 플러그인은 모든 콘솔을 제거합니다. *</target>
        </trans-unit>
        <trans-unit id="02deb564327c8e9dc963ff22f1f9273955344ce4" translate="yes" xml:space="preserve">
          <source>This plugin removes all debugger; statements</source>
          <target state="translated">이 플러그인은 모든 디버거를 제거합니다. 진술</target>
        </trans-unit>
        <trans-unit id="96a07f39b61893d3a866fe38b2e65675d5fa8004" translate="yes" xml:space="preserve">
          <source>This plugin transforms &lt;code&gt;undefined&lt;/code&gt; into &lt;code&gt;void 0&lt;/code&gt; which returns undefined regardless of if it&amp;rsquo;s been reassigned.</source>
          <target state="translated">이 플러그인은 &lt;code&gt;undefined&lt;/code&gt; 를 &lt;code&gt;void 0&lt;/code&gt; 으로 변환 하여 재 할당 여부에 관계없이 undefined를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b50a3281bdc5aa85ff23e7d58b564a6d1ce8e840" translate="yes" xml:space="preserve">
          <source>This plugin transforms &lt;code&gt;undefined&lt;/code&gt; into &lt;code&gt;void 0&lt;/code&gt; which returns undefined regardless of if it's been reassigned.</source>
          <target state="translated">이 플러그인은 &lt;code&gt;undefined&lt;/code&gt; 를 &lt;code&gt;void 0&lt;/code&gt; 으로 변환 하여 재 할당 여부에 관계없이 undefined를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a21a9768f0a620686476fa685b53523fb9ece479" translate="yes" xml:space="preserve">
          <source>This plugin transforms ECMAScript modules to &lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/1.1&quot;&gt;CommonJS&lt;/a&gt;. Note that only the &lt;em&gt;syntax&lt;/em&gt; of import/export statements (&lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt;) and import expressions (&lt;code&gt;import('./mod.js')&lt;/code&gt;) is transformed, as Babel is unaware of different resolution algorithms between implementations of ECMAScript modules and CommonJS.</source>
          <target state="translated">이 플러그인은 ECMAScript 모듈을 &lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/1.1&quot;&gt;CommonJS로&lt;/a&gt; 변환합니다 . Babel은 ECMAScript 구현 간의 다른 해결 알고리즘을 인식하지 못하므로 import / export 문 ( &lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt; ) 및 import 표현식 ( &lt;code&gt;import('./mod.js')&lt;/code&gt; ) 의 &lt;em&gt;구문&lt;/em&gt; 만 변환됩니다. 모듈 및 CommonJS.</target>
        </trans-unit>
        <trans-unit id="6c602b79fa16a78fe6a581b2d3822cffe6dc9feb" translate="yes" xml:space="preserve">
          <source>This plugin transforms ECMAScript modules to &lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/AMD.md&quot;&gt;AMD&lt;/a&gt;. Note that only the &lt;em&gt;syntax&lt;/em&gt; of import/export statements (&lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt;) and import expressions (&lt;code&gt;import('./mod.js')&lt;/code&gt;) is transformed, as Babel is unaware of the different resolution algorithms between implementations of ECMAScript modules and AMD.</source>
          <target state="translated">이 플러그인은 ECMAScript 모듈을 &lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/AMD.md&quot;&gt;AMD로&lt;/a&gt; 변환합니다 . 오직주의 &lt;em&gt;구문&lt;/em&gt; 가져 오기 / 내보내기 문 (의 &lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt; )과 수입 식 ( &lt;code&gt;import('./mod.js')&lt;/code&gt; ) 바벨로 변환이 구현 사이의 서로 다른 해상도 알고리즘을 인식하지 못합니다 ECMAScript 모듈 및 AMD.</target>
        </trans-unit>
        <trans-unit id="208ebca8434cd528288e666d2e9fdd1c706ab397" translate="yes" xml:space="preserve">
          <source>This plugin transforms ECMAScript modules to &lt;a href=&quot;https://github.com/systemjs/systemjs/blob/master/docs/system-register.md&quot;&gt;SystemJS&lt;/a&gt;. Note that only the &lt;em&gt;syntax&lt;/em&gt; of import/export statements (&lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt;) and import expressions (&lt;code&gt;import('./mod.js')&lt;/code&gt;) is transformed, as Babel is unaware of different resolution algorithms between implementations of ECMAScript modules and SystemJS.</source>
          <target state="translated">이 플러그인은 ECMAScript 모듈을 &lt;a href=&quot;https://github.com/systemjs/systemjs/blob/master/docs/system-register.md&quot;&gt;SystemJS로&lt;/a&gt; 변환합니다 . Babel은 ECMAScript 구현 간의 다른 해결 알고리즘을 인식하지 못하므로 import / export 문 ( &lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt; ) 및 import 표현식 ( &lt;code&gt;import('./mod.js')&lt;/code&gt; ) 의 &lt;em&gt;구문&lt;/em&gt; 만 변환됩니다. 모듈 및 SystemJS.</target>
        </trans-unit>
        <trans-unit id="5dee0e22ac3e1f7d47584e1eef01423c55a7c1ce" translate="yes" xml:space="preserve">
          <source>This plugin transforms ES2015 modules to &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD&lt;/a&gt;. Note that only the &lt;em&gt;syntax&lt;/em&gt; of import/export statements (&lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt;) is transformed, as Babel is unaware of different resolution algorithms between implementations of ES2015 modules and UMD.</source>
          <target state="translated">이 플러그인은 ES2015 모듈을 &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD로&lt;/a&gt; 변환합니다 . 만 유의 &lt;em&gt;구문&lt;/em&gt; 수입 / 수출 문 (의 &lt;code&gt;import &quot;./mod.js&quot;&lt;/code&gt; 바벨 ES2015 모듈 UMD 구현 사이의 상이한 해상도 알고리즘 알지 못한다으로) 변환된다.</target>
        </trans-unit>
        <trans-unit id="91dbb2b2aad2e5eefdde7581794bc31305e3e12d" translate="yes" xml:space="preserve">
          <source>This plugin transforms ES2015 modules to AMD.</source>
          <target state="translated">이 플러그인은 ES2015 모듈을 AMD로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="2b576883b92e5236017c11c040d655e7fe37028f" translate="yes" xml:space="preserve">
          <source>This plugin transforms ES2015 modules to CommonJS.</source>
          <target state="translated">이 플러그인은 ES2015 모듈을 CommonJS로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e1af9b572bc692766b59ad585e4ca9803529aae1" translate="yes" xml:space="preserve">
          <source>This plugin transforms ES2015 modules to SystemJS.</source>
          <target state="translated">이 플러그인은 ES2015 모듈을 SystemJS로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="15ca47c643a5b118ad1cd98791b60f4155279dfb" translate="yes" xml:space="preserve">
          <source>This plugin transforms ES2015 modules to UMD.</source>
          <target state="translated">이 플러그인은 ES2015 모듈을 UMD로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="b384a01dac23eedad8e4b79379a1552ca92b3493" translate="yes" xml:space="preserve">
          <source>This plugin transforms ES2015 parameters to ES5, this includes:</source>
          <target state="translated">이 플러그인은 ES2015 매개 변수를 ES5로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="ffbb71223211f387c6ff1a76e2782a7a76e2a758" translate="yes" xml:space="preserve">
          <source>This plugin transforms undefined into void 0 which returns undefined regardless of if it's been reassigned</source>
          <target state="translated">이 플러그인은 undefined를 void 0으로 변환하여 재 할당 여부에 관계없이 undefined를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="21dbf0fd790f355fb5e248d1089dbd3ba1670d06" translate="yes" xml:space="preserve">
          <source>This plugin uses the &lt;a href=&quot;https://github.com/facebook/regenerator&quot;&gt;regenerator&lt;/a&gt; module to transform async and generator functions. &lt;code&gt;regeneratorRuntime&lt;/code&gt; is not included.</source>
          <target state="translated">이 플러그인은 &lt;a href=&quot;https://github.com/facebook/regenerator&quot;&gt;재생기&lt;/a&gt; 모듈을 사용하여 비동기 및 생성기 기능을 변환합니다. &lt;code&gt;regeneratorRuntime&lt;/code&gt; 은 포함되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="70d3af1761ebf3a7b065296e823e08eee6cd37ae" translate="yes" xml:space="preserve">
          <source>This plugin will transform all `Object.setPrototypeOf` calls to a method that will do a shallow defaults of all properties.</source>
          <target state="translated">이 플러그인은 모든`Object.setPrototypeOf` 호출을 모든 속성의 얕은 기본값을 수행하는 메소드로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="bcd9e149fd2b6301e4609a57f4a493d2d1128745" translate="yes" xml:space="preserve">
          <source>This plugin will transform code in mainly two ways - 1) Reduce as much statements as possible into expressions, and 2) Make expressions as uniform as possible for better compressibility</source>
          <target state="translated">이 플러그인은 코드를 주로 두 가지 방식으로 변환합니다.-1) 가능한 많은 명령문을 표현식으로 줄이고 2)보다 나은 압축성을 위해 표현식을 가능한 한 균일하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="04abd51699a1ed5692e0fd3ee0447e7d6dc3b056" translate="yes" xml:space="preserve">
          <source>This preset always includes the following plugins:</source>
          <target state="translated">이 사전 설정에는 항상 다음 플러그인이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="fee42aa0850050c9e812a60ad74ceb7c85a8e5fc" translate="yes" xml:space="preserve">
          <source>This preset includes the following plugins/presets:</source>
          <target state="translated">이 사전 설정에는 다음과 같은 플러그인 / 사전 설정이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="22c120bf16c52c5de5134319d0a228895c8b3408" translate="yes" xml:space="preserve">
          <source>This preset includes the following plugins:</source>
          <target state="translated">이 사전 설정에는 다음 플러그인이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="34305aa2b4c3fb43b4f7c055193e66dc50c47241" translate="yes" xml:space="preserve">
          <source>This preset is recommended if you use &lt;a href=&quot;https://flow.org/en/docs/getting-started/&quot;&gt;Flow&lt;/a&gt;, a static type checker for JavaScript code. It includes the following plugins:</source>
          <target state="translated">이 사전 설정은 JavaScript 코드에 대한 정적 유형 검사기 인 &lt;a href=&quot;https://flow.org/en/docs/getting-started/&quot;&gt;Flow&lt;/a&gt; 를 사용하는 경우 권장됩니다 . 여기에는 다음 플러그인이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="5d345b84beea15aff7e33712a83fdd19585e2065" translate="yes" xml:space="preserve">
          <source>This preset is recommended if you use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html&quot;&gt;TypeScript&lt;/a&gt;, a typed superset of JavaScript. It includes the following plugins:</source>
          <target state="translated">이 사전 설정은 JavaScript의 입력 된 상위 집합 인 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html&quot;&gt;TypeScript&lt;/a&gt; 를 사용하는 경우 권장됩니다 . 여기에는 다음 플러그인이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b2c1f870693dec24233f5925c8fdc9ef2c6ff8f0" translate="yes" xml:space="preserve">
          <source>This repo will be made read-only, as all of the issues/labels have been moved over as well. Please report any bugs and open pull requests over on the &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;main mono-repo&lt;/a&gt;.</source>
          <target state="translated">이 문제는 모든 이슈 / 라벨도 옮겨 졌기 때문에 읽기 전용으로 만들어 질 것입니다. &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;기본 모노 레포&lt;/a&gt; 에서 버그 및 오픈 풀 요청을보고하십시오 .</target>
        </trans-unit>
        <trans-unit id="41d3d12cc5d9b383d4ca9dafdd0ef92ade0be48a" translate="yes" xml:space="preserve">
          <source>This should be straightforward to do in most cases. There might be cases where plugins should be split up more or certain plugins aren&amp;rsquo;t standalone enough (or impossible to do).</source>
          <target state="translated">대부분의 경우이 작업은 간단해야합니다. 플러그인을 더 많이 분할하거나 특정 플러그인이 독립형이 아니거나 불가능한 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0f3379f9244800a57cdd7f5bd9bd1f45a9fe675" translate="yes" xml:space="preserve">
          <source>This toggles behavior specific to development, such as adding &lt;code&gt;__source&lt;/code&gt; and &lt;code&gt;__self&lt;/code&gt;.</source>
          <target state="translated">이렇게하면 &lt;code&gt;__source&lt;/code&gt; 및 &lt;code&gt;__self&lt;/code&gt; 추가와 같은 개발 관련 동작이 전환 됩니다.</target>
        </trans-unit>
        <trans-unit id="47f64d6a2d716a84eac85982ce90821e3e2400c5" translate="yes" xml:space="preserve">
          <source>This transform &lt;strong&gt;should be enabled only in production&lt;/strong&gt; (e.g., just before minifying your code) because although it improves runtime performance, it makes warning messages more cryptic.</source>
          <target state="translated">이 변환 &lt;strong&gt;은&lt;/strong&gt; 런타임 성능을 향상 시키지만 경고 메시지를보다 암호화하기 때문에 &lt;strong&gt;프로덕션에서만&lt;/strong&gt; (예를 들어, 코드를 축소하기 직전 &lt;strong&gt;에) 활성화해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="f4bfeee88874d56d89699631769a1d67c8c3d0b3" translate="yes" xml:space="preserve">
          <source>This transform &lt;strong&gt;should be enabled only in production&lt;/strong&gt; (e.g., just before minifying your code) because, although it improves runtime performance, it makes warning messages more cryptic and skips important checks that happen in development mode, including propTypes.</source>
          <target state="translated">이 변환 &lt;strong&gt;은&lt;/strong&gt; 런타임 성능을 향상 시키지만 경고 메시지를 더 알기 쉽게 만들고 propTypes를 포함하여 개발 모드에서 발생하는 중요한 검사를 건너 뛰기 때문에 &lt;strong&gt;프로덕션에서만 활성화되어야합니다&lt;/strong&gt; (예 : 코드 축소 직전).</target>
        </trans-unit>
        <trans-unit id="ea2605c43953279e6dc0876f0cd9dfba88faa8cc" translate="yes" xml:space="preserve">
          <source>This transformation is also applied for Babel's helpers.</source>
          <target state="translated">이 변환은 Babel의 도우미에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2031adfbc7d474039d4d228b0e6f519606840c65" translate="yes" xml:space="preserve">
          <source>This transformer wraps all `typeof` expressions with a method that replicates native behaviour. (ie. returning &quot;symbol&quot; for symbols)</source>
          <target state="translated">이 변환기는 모든`typeof` 표현식을 기본 동작을 복제하는 메소드로 랩핑합니다. (예 : 기호에 대해 &quot;기호&quot;반환)</target>
        </trans-unit>
        <trans-unit id="c629508fca045e8105c9915d1ec5a5cc15eda2f5" translate="yes" xml:space="preserve">
          <source>This will add &lt;code&gt;babel-external-helpers&lt;/code&gt; to your .bin.</source>
          <target state="translated">그러면 .bin 에 &lt;code&gt;babel-external-helpers&lt;/code&gt; 가 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="026a1b51141f4ae9210d00418354632033de3bfa" translate="yes" xml:space="preserve">
          <source>This will also work for &lt;code&gt;core-js&lt;/code&gt; directly (&lt;code&gt;import &quot;core-js&quot;;&lt;/code&gt;)</source>
          <target state="translated">이것은 &lt;code&gt;core-js&lt;/code&gt; 에서도 직접 작동합니다 ( &lt;code&gt;import &quot;core-js&quot;;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="35fe407d2182a609800184dc2989e5874ed05e33" translate="yes" xml:space="preserve">
          <source>This will apply the optimization shown below to all for-of loops by assuming that &lt;em&gt;all&lt;/em&gt; loops are arrays.</source>
          <target state="translated">이는 &lt;em&gt;모든&lt;/em&gt; 루프가 배열 이라고 가정하여 모든 for-of 루프에 아래 표시된 최적화를 적용합니다 .</target>
        </trans-unit>
        <trans-unit id="847dc62f856033738ab7ed7be0d33efcd18469f7" translate="yes" xml:space="preserve">
          <source>This will emulate a full ES2015+ environment (no &amp;lt; Stage 4 proposals) and is intended to be used in an application rather than a library/tool. (this polyfill is automatically loaded when using &lt;code&gt;babel-node&lt;/code&gt;).</source>
          <target state="translated">이는 전체 ES2015 + 환경 (&amp;lt;Stage 4 제안 없음)을 에뮬레이트하며 라이브러리 / 도구가 아닌 애플리케이션에서 사용하도록 의도되었습니다. (이 polyfill은 &lt;code&gt;babel-node&lt;/code&gt; 를 사용할 때 자동으로로드됩니다 .)</target>
        </trans-unit>
        <trans-unit id="8da64d9a45fed60d097c6a4fbcb4a15e724afe22" translate="yes" xml:space="preserve">
          <source>This will emulate a full ES2015+ environment and is intended to be used in an application rather than a library/tool. This polyfill is automatically loaded when using &lt;code&gt;babel-node&lt;/code&gt;.</source>
          <target state="translated">이는 완전한 ES2015 + 환경을 에뮬레이트하며 라이브러리 / 도구가 아닌 응용 프로그램에서 사용되도록 고안되었습니다. 이 polyfill은 &lt;code&gt;babel-node&lt;/code&gt; 사용시 자동으로로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="efd2d0dd9c1356fcbb44a699a33ee85032b21f7c" translate="yes" xml:space="preserve">
          <source>This will heavily improve with the startup and compilation of your files. There are however scenarios where you want to change this behaviour and there are environment variables exposed to allow you to do this.</source>
          <target state="translated">파일을 시작하고 컴파일하면 크게 향상됩니다. 그러나이 동작을 변경하려는 시나리오가 있으며이를 수행 할 수있는 환경 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7175e84cfbad2a16f708aec4d1ff3112d0867aa1" translate="yes" xml:space="preserve">
          <source>This will skip the &lt;code&gt;Mutable Properties&lt;/code&gt; deopt.</source>
          <target state="translated">이것은 Mutable &lt;code&gt;Mutable Properties&lt;/code&gt; deopt를 건너 뛸 것 입니다.</target>
        </trans-unit>
        <trans-unit id="c31d1b87dbba07432806407154227311385df85b" translate="yes" xml:space="preserve">
          <source>Though the JSX spec allows this, it is disabled by default since React's JSX does not currently have support for it.</source>
          <target state="translated">JSX 사양이이를 허용하지만 React의 JSX가 현재이를 지원하지 않기 때문에 기본적으로 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdc854f347be70f1b54e9ff5979cb3f6809ab11b" translate="yes" xml:space="preserve">
          <source>Thus, if you set &lt;code&gt;exactGlobals&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and do not pass any overrides, the first example of:</source>
          <target state="translated">따라서 &lt;code&gt;exactGlobals&lt;/code&gt; 를 &lt;code&gt;true&lt;/code&gt; 로 설정 하고 대체를 전달하지 않으면 다음의 첫 번째 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b5a61404e3a7be61149361a81479396b30716c03" translate="yes" xml:space="preserve">
          <source>To allow systems to easily manipulate and validate a user's config, this function resolves the plugins and presets and proceeds no further. The expectation is that callers will take the config's &lt;code&gt;.options&lt;/code&gt;, manipulate it as they see fit and pass it back to Babel again.</source>
          <target state="translated">시스템이 사용자의 구성을 쉽게 조작하고 검증 할 수 있도록이 기능은 플러그인과 사전 설정을 해결하고 더 이상 진행하지 않습니다. 호출자는 구성의 &lt;code&gt;.options&lt;/code&gt; 를 가져 와서 적절하다고 판단되는대로 조작 한 다음 다시 Babel에 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="c33e0fec418b2508c1faace728985067df6a353b" translate="yes" xml:space="preserve">
          <source>To avoid this problem, this module explicitly disallows re-entrant compilation, e.g. Babel's own compilation logic explicitly cannot trigger further compilation of any other files on the fly. The downside of this is that if you want to define a plugin or preset that is itself live-compiled, the process is complicated.</source>
          <target state="translated">이 문제를 피하기 위해이 모듈은 명시 적으로 재진입 컴파일을 허용하지 않습니다. 예를 들어 Babel의 자체 컴파일 로직은 명시 적으로 다른 파일의 추가 컴파일을 즉시 트리거 할 수 없습니다. 단점은 라이브 컴파일 된 플러그인이나 사전 설정을 정의하려는 경우 프로세스가 복잡하다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5a9cb7392962fa3d901b842f68dd2ea99116eaa2" translate="yes" xml:space="preserve">
          <source>To avoid this, Babel expects users of config functions to tell it how to manage caching within a config file.</source>
          <target state="translated">이를 방지하기 위해 Babel은 구성 기능 사용자가 구성 파일 내에서 캐싱을 관리하는 방법을 알려줄 것을 기대합니다.</target>
        </trans-unit>
        <trans-unit id="e7c621fd9490220a8c66ce9ea1fcb04010451174" translate="yes" xml:space="preserve">
          <source>To build the helpers, you will need to use &lt;code&gt;babel-cli&lt;/code&gt;. You can install &lt;code&gt;babel-cli&lt;/code&gt; with:</source>
          <target state="translated">헬퍼를 빌드하려면 &lt;code&gt;babel-cli&lt;/code&gt; 를 사용해야 합니다. 다음 과 같이 &lt;code&gt;babel-cli&lt;/code&gt; 를 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="837325bc0ccd5a69f889c223083e18a9b24918ed" translate="yes" xml:space="preserve">
          <source>To compile a file &lt;strong&gt;every time that you change it&lt;/strong&gt;, use the &lt;code&gt;--watch&lt;/code&gt; or &lt;code&gt;-w&lt;/code&gt; option:</source>
          <target state="translated">파일 &lt;strong&gt;을 변경할 때마다&lt;/strong&gt; 파일을 컴파일하려면 &lt;code&gt;--watch&lt;/code&gt; 또는 &lt;code&gt;-w&lt;/code&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a227f366ba55a30c8e41f84a28f9b342e0cbd1b" translate="yes" xml:space="preserve">
          <source>To consume your custom parser, you can add a plugin to your &lt;a href=&quot;../options/index#plugins&quot;&gt;options&lt;/a&gt; to call the parser via its npm package name or require it if using JavaScript,</source>
          <target state="translated">사용자 지정 파서를 사용하려면 &lt;a href=&quot;../options/index#plugins&quot;&gt;옵션&lt;/a&gt; 에 플러그인을 추가하여 npm 패키지 이름을 통해 파서를 호출하거나 JavaScript를 사용하는 경우 요구할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be04e26c7ec49d91bcf3e4490cdd6876f27b9ee4" translate="yes" xml:space="preserve">
          <source>To enable processing of that &lt;a href=&quot;#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt;, you will want to use the &lt;a href=&quot;../options/index#babelrcroots&quot;&gt;&quot;babelrcRoots&quot;&lt;/a&gt; option from inside your &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; file to do</source>
          <target state="translated">해당 &lt;a href=&quot;#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt; 처리를 활성화하려면 &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; 파일 내부에서 &lt;a href=&quot;../options/index#babelrcroots&quot;&gt;&quot;babelrcRoots&quot;&lt;/a&gt; 옵션 을 사용하여 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cf57ea0a996ba64314468d17d82fe4e29b4801b" translate="yes" xml:space="preserve">
          <source>To get the same highlighting using the new API:</source>
          <target state="translated">새 API를 사용하여 동일한 강조 표시를 얻으려면 :</target>
        </trans-unit>
        <trans-unit id="1b7ff286542252a979dbe9088dd55e7df91cc728" translate="yes" xml:space="preserve">
          <source>To include the polyfill you need to require it at the top of the &lt;strong&gt;entry point&lt;/strong&gt; to your application.</source>
          <target state="translated">폴리 필을 포함하려면 응용 프로그램 의 &lt;strong&gt;진입 점&lt;/strong&gt; 상단에 폴리 필이 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="81826bda8e672670d3823fe080c54ff839078282" translate="yes" xml:space="preserve">
          <source>To make your own preset, you just need to export a config.</source>
          <target state="translated">자신의 사전 설정을 만들려면 구성을 내 보내면됩니다.</target>
        </trans-unit>
        <trans-unit id="bc9cd68c97e879973147f4473588cc73f27e8dd4" translate="yes" xml:space="preserve">
          <source>To preserve the original file extension you can pass the &lt;code&gt;--keep-file-extension&lt;/code&gt;.</source>
          <target state="translated">원래 파일 확장자를 유지하려면 &lt;code&gt;--keep-file-extension&lt;/code&gt; 을 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88b01154308a7a0a8f36fdca6059b1853f87071f" translate="yes" xml:space="preserve">
          <source>To prevent these errors - set the &lt;code&gt;uglify&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;, which enables all transformation plugins and as a result, your code is fully compiled to ES5. However, the &lt;code&gt;useBuiltIns&lt;/code&gt; option will still work as before and only include the polyfills that your target(s) need.</source>
          <target state="translated">이러한 오류를 방지하려면 &lt;code&gt;uglify&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정 하면 모든 변환 플러그인이 활성화되어 결과적으로 코드가 ES5로 완전히 컴파일됩니다. 그러나 &lt;code&gt;useBuiltIns&lt;/code&gt; 옵션은 여전히 ​​이전과 같이 작동하며 대상에 필요한 폴리 필 만 포함합니다.</target>
        </trans-unit>
        <trans-unit id="bba4407f8017842c438caef34f09321e33a52edb" translate="yes" xml:space="preserve">
          <source>To specify an option, pass an object with the keys as the option names.</source>
          <target state="translated">옵션을 지정하려면 옵션 이름으로 키를 사용하여 객체를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="d3f985717454977f5c7b9c0b328315b5e762a3c2" translate="yes" xml:space="preserve">
          <source>To transpile to ES6/ES2015:</source>
          <target state="translated">ES6 / ES2015로 트랜스 파일하려면 :</target>
        </trans-unit>
        <trans-unit id="b9c213f9d60a3be59e586ebfc7da59be05af709c" translate="yes" xml:space="preserve">
          <source>To workaround this limitation, you can add another class in the inheritance chain so that Babel can wrap the native class:</source>
          <target state="translated">이 제한을 해결하려면 Babel이 네이티브 클래스를 래핑 할 수 있도록 상속 체인에 다른 클래스를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b84ae716068417b931ccf43dadfffb78d067029" translate="yes" xml:space="preserve">
          <source>Toggles enabling support for builtin/feature proposals that have shipped in browsers. If your target environments have native support for a feature proposal, its matching parser syntax plugin is enabled instead of performing any transform. Note that this &lt;em&gt;does not&lt;/em&gt; enable the same transformations as &lt;a href=&quot;../babel-preset-stage-3/index&quot;&gt;&lt;code&gt;@babel/preset-stage-3&lt;/code&gt;&lt;/a&gt;, since proposals can continue to change before landing in browsers.</source>
          <target state="translated">브라우저에 제공된 내장 / 기능 제안에 대한 지원을 활성화합니다. 대상 환경에 기능 제안에 대한 기본 지원이있는 경우 변환을 수행하는 대신 일치하는 구문 분석기 구문 플러그인이 활성화됩니다. 이 점에 유의 &lt;em&gt;하지 않는&lt;/em&gt; 같은 변환을 가능하게 &lt;a href=&quot;../babel-preset-stage-3/index&quot;&gt; &lt;code&gt;@babel/preset-stage-3&lt;/code&gt; &lt;/a&gt; 제안 브라우저에서 착륙 전에 변경을 계속할 수 있기 때문에.</target>
        </trans-unit>
        <trans-unit id="db9a815345b695a4fbfa00dde2ce4f574362aa7f" translate="yes" xml:space="preserve">
          <source>Toggles including plugins from the &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2015/&quot;&gt;es2015 preset&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2015/&quot;&gt;es2015 사전 설정&lt;/a&gt; 에서 플러그인 포함을 토글 합니다 .</target>
        </trans-unit>
        <trans-unit id="b03d175459a88b6e64a9dfb8a906ef7b8c57f9ec" translate="yes" xml:space="preserve">
          <source>Toggles including plugins from the &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2016/&quot;&gt;es2016 preset&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2016/&quot;&gt;es2016 사전 설정&lt;/a&gt; 에서 플러그인 포함을 토글 합니다 .</target>
        </trans-unit>
        <trans-unit id="76c32905abc64b71454993d783af236a90c76642" translate="yes" xml:space="preserve">
          <source>Toggles including plugins from the &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2017/&quot;&gt;es2017 preset&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2017/&quot;&gt;es2017 사전 설정&lt;/a&gt; 에서 플러그인 포함을 토글 합니다 .</target>
        </trans-unit>
        <trans-unit id="e6c78e5932e2c2bb51b2c6604c2c2032985ef602" translate="yes" xml:space="preserve">
          <source>Toggles syntax highlighting the code as JavaScript for terminals.</source>
          <target state="translated">터미널 용 JavaScript로 코드를 강조 표시하는 구문을 토글합니다.</target>
        </trans-unit>
        <trans-unit id="88f40cdee70e8aa3f9778421d029c66b217450b7" translate="yes" xml:space="preserve">
          <source>Toggles whether or not &lt;a href=&quot;https://github.com/ai/browserslist#queries&quot;&gt;browserslist config sources&lt;/a&gt; are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json. This is useful for projects that use a browserslist config for files that won't be compiled with Babel.</source>
          <target state="translated">browserslist 파일을 검색하거나 package.json 내부의 browserslist 키를 참조하는 것을 포함하여 &lt;a href=&quot;https://github.com/ai/browserslist#queries&quot;&gt;browserslist 구성 소스&lt;/a&gt; 를 사용 할지 여부를 전환합니다 . 이는 Babel로 컴파일되지 않는 파일에 대해 browserslist 구성을 사용하는 프로젝트에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="70026fcb5177a88428d154068260031ba6897577" translate="yes" xml:space="preserve">
          <source>Toggles whether or not generator functions are transformed to use a regenerator runtime that does not pollute the global scope.</source>
          <target state="translated">글로벌 범위를 오염시키지 않는 재생기 런타임을 사용하도록 생성기 함수를 변환할지 여부를 토글합니다.</target>
        </trans-unit>
        <trans-unit id="efc53b130cd17879093d457c4fd9c138a5660419" translate="yes" xml:space="preserve">
          <source>Toggles whether or not inlined Babel helpers (&lt;code&gt;classCallCheck&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, etc.) are replaced with calls to &lt;code&gt;moduleName&lt;/code&gt;.</source>
          <target state="translated">인라인 된 Babel 헬퍼 ( &lt;code&gt;classCallCheck&lt;/code&gt; , &lt;code&gt;extends&lt;/code&gt; 등)가 &lt;code&gt;moduleName&lt;/code&gt; 에 대한 호출로 대체 되는지 여부를 토글합니다 .</target>
        </trans-unit>
        <trans-unit id="dbb09ee13af83c105405aff28525a15f53c4232b" translate="yes" xml:space="preserve">
          <source>Toggles whether or not new built-ins (&lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, etc.) are transformed to use a non-global polluting polyfill.</source>
          <target state="translated">새로운 내장 ( &lt;code&gt;Promise&lt;/code&gt; , &lt;code&gt;Set&lt;/code&gt; , &lt;code&gt;Map&lt;/code&gt; 등)이 비전 역 오염 폴리 필을 사용하도록 변환 되는지 여부를 토글합니다 .</target>
        </trans-unit>
        <trans-unit id="341826a5d17b0dc6fd9250598380af2bc7a64031" translate="yes" xml:space="preserve">
          <source>Toggles whether or not to throw an error if a XML namespaced tag name is used. For example:</source>
          <target state="translated">XML 네임 스페이스 태그 이름이 사용되는 경우 오류를 발생 시킬지 여부를 토글합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="7c1fb1d51d5e1e3a33b800579b192d13df7e7b05" translate="yes" xml:space="preserve">
          <source>Toggles whether or not to throw an error if an XML namespaced tag name is used. For example:</source>
          <target state="translated">XML 네임 스페이스 태그 이름이 사용되는 경우 오류를 발생 시킬지 여부를 토글합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="4fc60ef5d69079c451ea67854c51808d9ec41c01" translate="yes" xml:space="preserve">
          <source>Tooling</source>
          <target state="translated">Tooling</target>
        </trans-unit>
        <trans-unit id="5a6ecd6094dd71ce92160cc8fd42b4628ba1b102" translate="yes" xml:space="preserve">
          <source>Transform Plugins</source>
          <target state="translated">플러그인 플러그인</target>
        </trans-unit>
        <trans-unit id="5f40463652acd8e1315a367d98d845b93984db15" translate="yes" xml:space="preserve">
          <source>Transform object initializer mutators into Object.defineProperties</source>
          <target state="translated">객체 이니셜 라이저 뮤 테이터를 Object.defineProperties로 변환</target>
        </trans-unit>
        <trans-unit id="762741251c181b297635134b9535702b030f867b" translate="yes" xml:space="preserve">
          <source>Transform plugins will enable the corresponding syntax plugin so you don't have to specify both.</source>
          <target state="translated">변환 플러그인은 해당 구문 플러그인을 사용하므로 둘 다 지정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e4acaad501e695ffe3e9b658c49973714167b387" translate="yes" xml:space="preserve">
          <source>Transform rest properties for object destructuring assignment and spread properties for object literals</source>
          <target state="translated">객체 파괴 할당에 대한 변형 나머지 속성과 객체 리터럴에 대한 확산 속성</target>
        </trans-unit>
        <trans-unit id="a95191e26a4a7d5670b399bb670e262a7726fbad" translate="yes" xml:space="preserve">
          <source>Transform syntax</source>
          <target state="translated">변환 구문</target>
        </trans-unit>
        <trans-unit id="25b08d1a35edf68e61367cd6034b790035393df5" translate="yes" xml:space="preserve">
          <source>Transforms class properties</source>
          <target state="translated">클래스 속성 변환</target>
        </trans-unit>
        <trans-unit id="613a95826e10ef09c5ae229534248730676a5b2f" translate="yes" xml:space="preserve">
          <source>Transforms the passed in &lt;code&gt;code&lt;/code&gt;. Calling a callback with an object with the generated code, source map, and AST.</source>
          <target state="translated">전달 된 &lt;code&gt;code&lt;/code&gt; 변환합니다 . 생성 된 코드, 소스 맵 및 AST가있는 객체로 콜백 호출.</target>
        </trans-unit>
        <trans-unit id="7494f19d66dff6def987c451dd42bf3cca6afa4b" translate="yes" xml:space="preserve">
          <source>Transforms the passed in &lt;code&gt;code&lt;/code&gt;. Returning an object with the generated code, source map, and AST.</source>
          <target state="translated">전달 된 &lt;code&gt;code&lt;/code&gt; 변환합니다 . 생성 된 코드, 소스 맵 및 AST가 포함 된 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aed0539224f107cd6033d998ae431d634c59db76" translate="yes" xml:space="preserve">
          <source>Transforms the passed in &lt;code&gt;code&lt;/code&gt;. Returning an promise for an object with the generated code, source map, and AST.</source>
          <target state="translated">전달 된 &lt;code&gt;code&lt;/code&gt; 변환합니다 . 생성 된 코드, 소스 맵 및 AST를 사용하여 객체에 대한 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ac2eb13d2f2a86f9d68b40a32244b2a214e1b8f6" translate="yes" xml:space="preserve">
          <source>Treat React JSX elements as value types and hoist them to the highest scope.</source>
          <target state="translated">React JSX 요소를 값 유형으로 취급하고이를 최대 범위로 끌어 올리십시오.</target>
        </trans-unit>
        <trans-unit id="7abe6704dc0340e53da6327dc83ce31abb4e861f" translate="yes" xml:space="preserve">
          <source>Tries to evaluate expressions and inline the result. For now only deals with numbers and strings</source>
          <target state="translated">식을 평가하고 결과를 인라인하려고합니다. 지금은 숫자와 문자열 만 다룹니다</target>
        </trans-unit>
        <trans-unit id="550ec89d533e8a398d76c928b1379cbaa6bdd311" translate="yes" xml:space="preserve">
          <source>Try it Out in the REPL</source>
          <target state="translated">REPL에서 사용해보십시오</target>
        </trans-unit>
        <trans-unit id="f40e73a23460ebdb3c25e6018ab1aca91a728d87" translate="yes" xml:space="preserve">
          <source>Tuple Example</source>
          <target state="translated">튜플 예</target>
        </trans-unit>
        <trans-unit id="21d6fe0b06380304878fccab9e4b8dbcfb062906" translate="yes" xml:space="preserve">
          <source>Turn JSX into React Pre-0.12 function calls.</source>
          <target state="translated">JSX를 React Pre-0.12 함수 호출로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="8eb4c76547c75c0ae2ace50262abe9f0a8a96ef9" translate="yes" xml:space="preserve">
          <source>Turn JSX into React function calls</source>
          <target state="translated">JSX를 React 함수 호출로 전환</target>
        </trans-unit>
        <trans-unit id="3abcbe7c07b553fbd1627d1182cfd1e2b2be4ca9" translate="yes" xml:space="preserve">
          <source>Turn JSX into React function calls.</source>
          <target state="translated">JSX를 React 함수 호출로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="5e519c6acc00ab176fad4bceca99bccc17448bfd" translate="yes" xml:space="preserve">
          <source>Turn async functions into ES2015 generators</source>
          <target state="translated">비동기 기능을 ES2015 생성기로 전환</target>
        </trans-unit>
        <trans-unit id="b2d795b907ce8b33f49df0723fa1414478a2f76c" translate="yes" xml:space="preserve">
          <source>Turn async functions into a Bluebird coroutine (&lt;a href=&quot;#bluebird-non-promise-runtime-error&quot;&gt;caveats&lt;/a&gt;)</source>
          <target state="translated">비동기 함수를 Bluebird 코 루틴으로 변환 ( &lt;a href=&quot;#bluebird-non-promise-runtime-error&quot;&gt;주의 사항&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="60079ad5f671ec53187007eece2ecd08da49e8b9" translate="yes" xml:space="preserve">
          <source>Turn async generator functions and for-await statements to ES2015 generators</source>
          <target state="translated">비동기 생성기 함수 및 for-await 문을 ES2015 생성기로 전환</target>
        </trans-unit>
        <trans-unit id="6d134f6525f1724c9ef542787d213258484a0f15" translate="yes" xml:space="preserve">
          <source>Turn flow type annotations into comments</source>
          <target state="translated">흐름 유형 주석을 주석으로 변환</target>
        </trans-unit>
        <trans-unit id="896cae08745a30fbf9c8a9a5732bfb09a8974eb0" translate="yes" xml:space="preserve">
          <source>Turn valid member expression property literals into plain identifiers</source>
          <target state="translated">유효한 멤버 표현식 속성 리터럴을 일반 식별자로 변환</target>
        </trans-unit>
        <trans-unit id="594fa567e63765895ac812c2ca7969b9921d0021" translate="yes" xml:space="preserve">
          <source>Two types of options:</source>
          <target state="translated">두 가지 유형의 옵션 :</target>
        </trans-unit>
        <trans-unit id="6d178a3830ebe8aebfea1a53bd122e39d80983fe" translate="yes" xml:space="preserve">
          <source>Type Annotations (Flow and TypeScript)</source>
          <target state="translated">유형 주석 (Flow 및 TypeScript)</target>
        </trans-unit>
        <trans-unit id="cdfba5d94aae4e6b7b1d67bcec9de3ffa654aa6c" translate="yes" xml:space="preserve">
          <source>Type-only &lt;code&gt;namespace&lt;/code&gt;s should be marked with &lt;code&gt;declare&lt;/code&gt; and will subsequently be safely removed.</source>
          <target state="translated">유형 전용 &lt;code&gt;namespace&lt;/code&gt; 는 &lt;code&gt;declare&lt;/code&gt; 으로 표시되어야하며 이후에 안전하게 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="7f394a095ab7669a5bd923d2e3f0872669065aac" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;&quot;root&quot; | &quot;upward&quot; | &quot;upward-optional&quot;&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;&quot;root&quot; | &quot;upward&quot; | &quot;upward-optional&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="215066e51ce231be7ae3b140797ee242d03acd5b" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;&quot;script&quot; | &quot;module&quot; | &quot;unambiguous&quot;&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;&quot;script&quot; | &quot;module&quot; | &quot;unambiguous&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88f20d1f540e308c85aac2d3222213c2aeae0525" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;(key: string, nodeType: string, fn: Function) =&amp;gt; Function&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;(key: string, nodeType: string, fn: Function) =&amp;gt; Function&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b307c4b709720dd148e975dbfbd135738a4e23dd" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;(name: string) =&amp;gt; string&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;(name: string) =&amp;gt; string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb1be378befa6dae71b02e7d16d40be8363eaa8d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;(value: string) =&amp;gt; boolean&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;(value: string) =&amp;gt; boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77a229018dd8050e78ccc974c9f046b3285448e8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&amp;lt;MatchPattern&amp;gt;&lt;/code&gt; (&lt;a href=&quot;#matchpattern&quot;&gt;&lt;code&gt;MatchPattern&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : &lt;code&gt;Array&amp;lt;MatchPattern&amp;gt;&lt;/code&gt; ( &lt;a href=&quot;#matchpattern&quot;&gt; &lt;code&gt;MatchPattern&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="2cc26da3dcaede2168b563e514c3722ba4ff6954" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&amp;lt;Options&amp;gt;&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Array&amp;lt;Options&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="998c5020bc21847dcdb7adfbc3f73717b2a4f99f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&amp;lt;PluginEntry | Plugin&amp;gt;&lt;/code&gt; (&lt;a href=&quot;#plugin-preset-entries&quot;&gt;&lt;code&gt;PluginEntry&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : &lt;code&gt;Array&amp;lt;PluginEntry | Plugin&amp;gt;&lt;/code&gt; ( &lt;a href=&quot;#plugin-preset-entries&quot;&gt; &lt;code&gt;PluginEntry&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="6063d9aad323ad5907ef1284d995f02d98a1acc7" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&amp;lt;PresetEntry&amp;gt;&lt;/code&gt; (&lt;a href=&quot;#plugin-preset-entries&quot;&gt;&lt;code&gt;PresetEntry&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : &lt;code&gt;Array&amp;lt;PresetEntry&amp;gt;&lt;/code&gt; ( &lt;a href=&quot;#plugin-preset-entries&quot;&gt; &lt;code&gt;PresetEntry&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="b092a27d72109008c35152395a39145b93c31c45" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;MatchPattern | Array&amp;lt;MatchPattern&amp;gt;&lt;/code&gt; (&lt;a href=&quot;#matchpattern&quot;&gt;&lt;code&gt;MatchPattern&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : &lt;code&gt;MatchPattern | Array&amp;lt;MatchPattern&amp;gt;&lt;/code&gt; ( &lt;a href=&quot;#matchpattern&quot;&gt; &lt;code&gt;MatchPattern&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="421563bfe37f4b008f7d56a19eb487d346aa2da6" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;RegExp | false&lt;/code&gt; Default: &lt;code&gt;/^[_$A-Z0-9]+$/&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;RegExp | false&lt;/code&gt; 기본값 : &lt;code&gt;/^[_$A-Z0-9]+$/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df97d01cd172c2c18ccb18d28200229f5d4567e9" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Set&amp;lt;string&amp;gt;&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Set&amp;lt;string&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="373d383017549cded57549a7179c7d9ceb0434f2" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;boolean | &quot;auto&quot;&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;boolean | &quot;auto&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f682b363ce8c0d1ca079754f0f3e19a6fe7e068e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;boolean | &quot;inline&quot; | &quot;both&quot;&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;boolean | &quot;inline&quot; | &quot;both&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bf648e0afd20e05beb4e7da3e8770ba2856f793" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;boolean | MatchPattern | Array&amp;lt;MatchPattern&amp;gt;&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;boolean | MatchPattern | Array&amp;lt;MatchPattern&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25b2d3703226e62c8cb40bde4e249324bb21d169" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;boolean | SourceMap&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;boolean | SourceMap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14a515b50af7c63ac2d08669f57e2fea411c6b39" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0417a20eed9a2bdc5f52ac9a59f93baca7c0371" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;boolean&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;boolean&lt;/code&gt; 기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="833e3e2dba4de91ed77957a3dc7e566a56b9db63" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;boolean&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;%%foo%%&lt;/code&gt;-style placeholders are used; &lt;code&gt;false&lt;/code&gt; otherwise. Added in: &lt;code&gt;v7.4.0&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;boolean&lt;/code&gt; 기본값 : &lt;code&gt;%%foo%%&lt;/code&gt; 스타일 자리 표시자가 사용되는 경우 &lt;code&gt;true&lt;/code&gt; 입니다 . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; . 추가 : &lt;code&gt;v7.4.0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="62bc0c68682228ed1eaebe84c8010f56ac4c96e7" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;string | RegExp | (filename: string | void, context: { caller: { name: string } | void, envName: string, dirname: string ) =&amp;gt; boolean&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;string | RegExp | (filename: string | void, context: { caller: { name: string } | void, envName: string, dirname: string ) =&amp;gt; boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ecbf872bbb06e8263c5e5ae6b2607c56f9aac3b7" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;string | boolean&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;string | boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64c274c94bb5d274c98d6a6b3a3c21373234e659" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;string | {} | Function&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;string | {} | Function&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efe869ac0809a32605659081106354bf706927c0" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1351ca7a92b8de38050ee7cf0f0d6935330a3894" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;undefined | {} | false&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;undefined | {} | false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e771583097bfe05ba72f446740cf34a2e359b17" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;{ [envKey: string]: Options }&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;{ [envKey: string]: Options }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ffadfff84d86134146e5dc50836142819d6a9299" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;{}&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;{}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d215245cb05031711478320aec3234bf5595af06" translate="yes" xml:space="preserve">
          <source>Type: An object with the shape of</source>
          <target state="translated">유형 : 모양의 개체</target>
        </trans-unit>
        <trans-unit id="2b583e2068c184d2b5275d744bef73d26f9d772a" translate="yes" xml:space="preserve">
          <source>TypeScript Compiler Options</source>
          <target state="translated">TypeScript 컴파일러 옵션</target>
        </trans-unit>
        <trans-unit id="b9d2c26e4b9f0065fc6aea48e91f33660deb1bcb" translate="yes" xml:space="preserve">
          <source>Uglify has support for ES2015 syntax via &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;uglify-es&lt;/a&gt;. If you are using syntax unsupported by &lt;code&gt;uglify-es&lt;/code&gt;, we recommend using &lt;a href=&quot;https://github.com/babel/minify&quot;&gt;babel-minify&lt;/a&gt;.</source>
          <target state="translated">Uglify는 &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;uglify-es&lt;/a&gt; 를 통해 ES2015 구문을 지원합니다 . &lt;code&gt;uglify-es&lt;/code&gt; 가 지원하지 않는 구문을 사용하는 경우 &lt;a href=&quot;https://github.com/babel/minify&quot;&gt;babel- &lt;/a&gt;minify를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a32990927e0551bc7afc670f864f50bdbfa3ddd1" translate="yes" xml:space="preserve">
          <source>Undefined to void transform</source>
          <target state="translated">정의되지 않은 void 변환</target>
        </trans-unit>
        <trans-unit id="adddbb7e71b65495eede8bbd78c935b388257960" translate="yes" xml:space="preserve">
          <source>Under loose mode, methods are defined on the class prototype with simple assignments instead of being defined. This can result in the following not working:</source>
          <target state="translated">풀림 모드에서 메소드는 정의되지 않고 간단한 지정으로 클래스 프로토 타입에 정의됩니다. 이로 인해 다음이 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9478a1153760affd61e51a61ffdb320eecad4dc" translate="yes" xml:space="preserve">
          <source>Unfortunately, this approach can be a bit repetitive, and depending on how Babel is being used, could require setting &lt;a href=&quot;../options/index#babelrcroots&quot;&gt;&quot;babelrcRoots&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../options/index#babelrcroots&quot;&gt;안타깝게도이&lt;/a&gt; 접근법은 약간 반복적 일 수 있으며 Babel이 사용되는 방식에 따라 &quot;babelrcRoots&quot; 설정이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="802089dd1f079609cc0d4a407ef19839fab1f3e8" translate="yes" xml:space="preserve">
          <source>Universal Module Definition (UMD)</source>
          <target state="translated">범용 모듈 정의 (UMD)</target>
        </trans-unit>
        <trans-unit id="8f4b2f806efecdb808e7c29bb227312f29132bd8" translate="yes" xml:space="preserve">
          <source>Upgrading from prior versions</source>
          <target state="translated">이전 버전에서 업그레이드</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="86af0eadc92a3466be16956b3ef897cfba227287" translate="yes" xml:space="preserve">
          <source>Usage in Browser</source>
          <target state="translated">브라우저에서의 사용법</target>
        </trans-unit>
        <trans-unit id="fe14ff67310173ba989b6bb05d907bb99c6fd1a7" translate="yes" xml:space="preserve">
          <source>Usage in Node / Browserify / Webpack</source>
          <target state="translated">Node / Browserify / Webpack에서의 사용법</target>
        </trans-unit>
        <trans-unit id="e6e8ba01898d0fa2f2f4d3a539065f4b1e336ebc" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../preset-env/index&quot;&gt;preset-env&lt;/a&gt; instead.</source>
          <target state="translated">대신 &lt;a href=&quot;../preset-env/index&quot;&gt;preset-env&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7675763e4a344330f6b3e563edd2f1d41f932a53" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist&lt;/a&gt; to declare supported environments by performing queries like &lt;code&gt;&amp;gt; 1%, last 2 versions&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist&lt;/a&gt; 를 사용 하여 &lt;code&gt;&amp;gt; 1%, last 2 versions&lt;/code&gt; 과 같은 쿼리를 수행하여 지원되는 환경을 선언 하십시오 .</target>
        </trans-unit>
        <trans-unit id="56e0b50b0e1dedd8ae55f5faef2770241258c3f4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&quot;babelrc&quot;: false&lt;/code&gt; in &lt;a href=&quot;../api/index#options&quot;&gt;options&lt;/a&gt; to stop lookup behavior, or provide the &lt;a href=&quot;../cli/index#babel-ignoring-babelrc&quot;&gt;&lt;code&gt;--no-babelrc&lt;/code&gt; CLI flag&lt;/a&gt;.</source>
          <target state="translated">조회 동작을 중지하거나 &lt;a href=&quot;../cli/index#babel-ignoring-babelrc&quot;&gt; &lt;code&gt;--no-babelrc&lt;/code&gt; &lt;/a&gt; CLI 플래그를 제공하려면 &lt;a href=&quot;../api/index#options&quot;&gt;옵션&lt;/a&gt; 에서 &lt;code&gt;&quot;babelrc&quot;: false&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="21ff7f87d17686490690a8ba947ea58312b0ddee" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;jsesc&lt;/code&gt; to process literals. &lt;code&gt;jsesc&lt;/code&gt; is applied to numbers only if &lt;code&gt;jsescOption.numbers&lt;/code&gt; (added in &lt;code&gt;v7.9.0&lt;/code&gt;) is present. You can customize &lt;code&gt;jsesc&lt;/code&gt; by &lt;a href=&quot;https://github.com/mathiasbynens/jsesc#api&quot;&gt;passing options&lt;/a&gt; to it.</source>
          <target state="translated">&lt;code&gt;jsesc&lt;/code&gt; 를 사용 하여 리터럴을 처리합니다. &lt;code&gt;jsesc&lt;/code&gt; 는 &lt;code&gt;jsescOption.numbers&lt;/code&gt; ( &lt;code&gt;v7.9.0&lt;/code&gt; 에 추가됨 )가 있는 경우에만 숫자에 적용됩니다 . &lt;a href=&quot;https://github.com/mathiasbynens/jsesc#api&quot;&gt;옵션&lt;/a&gt; 을 전달 하여 &lt;code&gt;jsesc&lt;/code&gt; 를 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce496f59a33970927dacfb4d858b2e8051a414c6" translate="yes" xml:space="preserve">
          <source>Use external data such as &lt;a href=&quot;https://github.com/kangax/compat-table&quot;&gt;&lt;code&gt;compat-table&lt;/code&gt;&lt;/a&gt; to determine browser support. (We should create PRs there when necessary)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/kangax/compat-table&quot;&gt; &lt;code&gt;compat-table&lt;/code&gt; &lt;/a&gt; 과 같은 외부 데이터를 사용 하여 브라우저 지원을 결정하십시오. (필요한 경우 PR을 만들어야합니다)</target>
        </trans-unit>
        <trans-unit id="67344c219a97897794470ddf0efe896ab3fc6aff" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--plugins&lt;/code&gt; option to specify plugins to use in compilation</source>
          <target state="translated">컴파일에 사용할 플러그인을 지정 하려면 &lt;code&gt;--plugins&lt;/code&gt; 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4a910d50096c1a07a19f269815418beef49fd986" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--presets&lt;/code&gt; option to specify plugins to use in compilation</source>
          <target state="translated">컴파일에 사용할 플러그인을 지정 하려면 &lt;code&gt;--presets&lt;/code&gt; 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8dcf3afad8cb182b4df03c4b55059f2c92399c94" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--presets&lt;/code&gt; option to specify presets to use in compilation</source>
          <target state="translated">사용 &lt;code&gt;--presets&lt;/code&gt; 의 편집에 사용하는 프리셋을 지정하는 옵션을</target>
        </trans-unit>
        <trans-unit id="b08a4f158890cf59b1968f1c05f094823b6368a5" translate="yes" xml:space="preserve">
          <source>Use the legacy (stage 1) decorators syntax and behavior.</source>
          <target state="translated">레거시 (1 단계) 데코레이터 구문 및 동작을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5ba21f4cf5023cb12ffaf3cd162a00a36a26b1dd" translate="yes" xml:space="preserve">
          <source>Use the plugin &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-const-enum&quot;&gt;babel-plugin-const-enum&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-const-enum&quot;&gt;babel-plugin-const-enum 플러그인을&lt;/a&gt; 사용하세요 .</target>
        </trans-unit>
        <trans-unit id="e79b2d94f37194689fb9fc599a28e8a949330612" translate="yes" xml:space="preserve">
          <source>Use the plugin &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-replace-ts-export-assignment&quot;&gt;babel-plugin-replace-ts-export-assignment&lt;/a&gt; to transform &lt;code&gt;export =&lt;/code&gt;.</source>
          <target state="translated">플러그인 사용 &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-replace-ts-export-assignment&quot;&gt;바벨 - 플러그인을-교체-TS-수출 할당을&lt;/a&gt; 변환하는 &lt;code&gt;export =&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b47f753782c9d1f2d3a7d382ecbe502582595533" translate="yes" xml:space="preserve">
          <source>Use via &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 을 통해 사용</target>
        </trans-unit>
        <trans-unit id="db0ac2b28769deb74487958f7550005746bff944" translate="yes" xml:space="preserve">
          <source>Used as the default value for Babel's &lt;code&gt;sourceFileName&lt;/code&gt; option, and used as part of generation of filenames for the AMD / UMD / SystemJS module transforms.</source>
          <target state="translated">Babel의 &lt;code&gt;sourceFileName&lt;/code&gt; 옵션에 대한 기본값으로 사용되며 AMD / UMD / SystemJS 모듈 변환을위한 파일 이름 생성의 일부로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="599bdbe4f0a43b6626afd3f6bc93d2aad4aaa0b4" translate="yes" xml:space="preserve">
          <source>Used in warning messages</source>
          <target state="translated">경고 메시지에 사용</target>
        </trans-unit>
        <trans-unit id="9d9e8f236c3dd1c7562183f0fafa2c54f6de91e2" translate="yes" xml:space="preserve">
          <source>Users can return a replacement function that should call the original function after performing whatever logging and analysis they wish to do.</source>
          <target state="translated">사용자는 원하는 로깅 및 분석을 수행 한 후 원래 함수를 호출해야하는 대체 함수를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6621843eaeb82fc5ee14c58019313cd755c9ef95" translate="yes" xml:space="preserve">
          <source>Users coming from Babel 6.x will likely trip up on these two edge cases, which are new in Babel 7.x. These two restrictions were added to address common footguns in Babel 6.x:</source>
          <target state="translated">Babel 6.x에서 오는 사용자는 Babel 7.x에 새로 추가 된이 두 가지 엣지 케이스에 걸리게 될 것입니다. Babel 6.x의 일반적인 풋건을 해결하기 위해 다음 두 가지 제한이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="7bd29c88f000ae53a70607195819600b9c90ab10" translate="yes" xml:space="preserve">
          <source>Users with monorepo project structures that run builds/tests on a per-package basis may well want to use &lt;code&gt;&quot;upward&quot;&lt;/code&gt; since monorepos often have a &lt;a href=&quot;../config-files/index#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; in the project root. Running Babel in a monorepo subdirectory without &lt;code&gt;&quot;upward&quot;&lt;/code&gt;, will cause Babel to skip loading any &lt;a href=&quot;../config-files/index#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; files in the project root, which can lead to unexpected errors and compilation failure.</source>
          <target state="translated">패키지 단위로 빌드 / 테스트를 실행하는 monorepo 프로젝트 구조를 가진 사용자는 monorepos가 종종 프로젝트 루트에 &lt;a href=&quot;../config-files/index#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; 을 가지고 있기 때문에 &lt;code&gt;&quot;upward&quot;&lt;/code&gt; 를 사용 하는 것이 좋습니다 . &lt;code&gt;&quot;upward&quot;&lt;/code&gt; 없이 monorepo 하위 디렉토리에서 Babel을 실행 하면 Babel 이 프로젝트 루트의 &lt;a href=&quot;../config-files/index#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; 파일 로드를 건너 뛰게 되어 예기치 않은 오류와 컴파일 실패가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="254550be6f0ce4335476259029c3eaa67808f04e" translate="yes" xml:space="preserve">
          <source>Using Plugins</source>
          <target state="translated">플러그인 사용</target>
        </trans-unit>
        <trans-unit id="9c8d8c946fed5a9bdeb9912a75d48ee4dd85edc7" translate="yes" xml:space="preserve">
          <source>Using Presets</source>
          <target state="translated">사전 설정 사용</target>
        </trans-unit>
        <trans-unit id="72073604c9c4bc9ed4dbc8ad358bdbfbaae79ce5" translate="yes" xml:space="preserve">
          <source>Using a do expression you can add logic inside JSX:</source>
          <target state="translated">do 표현식을 사용하면 JSX 내부에 로직을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10aa5b5c738499c9bab60a5f1d4f8b42d5af53c3" translate="yes" xml:space="preserve">
          <source>Using absolute paths is not desirable if files are compiled for use at a later time, but in contexts where a file is compiled and then immediately consumed, they can be quite helpful.</source>
          <target state="translated">나중에 사용하기 위해 파일을 컴파일하는 경우 절대 경로를 사용하는 것은 바람직하지 않지만 파일이 컴파일 된 후 즉시 사용되는 컨텍스트에서는 매우 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9996846785248ea7a89ee26dd0a759d2be0decc" translate="yes" xml:space="preserve">
          <source>Using spec mode with the above example produces:</source>
          <target state="translated">위의 예에서 사양 모드를 사용하면 다음이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="5aa21a59ae1dca94a9e4a9bf8787d301e2403ed8" translate="yes" xml:space="preserve">
          <source>Using with &lt;code&gt;document.querySelectorAll&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;document.querySelectorAll&lt;/code&gt; 과 함께 사용</target>
        </trans-unit>
        <trans-unit id="f8bd3aa4a3e0261dc08ace935eab2e9edddf7a59" translate="yes" xml:space="preserve">
          <source>Usually Babel will place helpers at the top of your file to do common tasks to avoid duplicating the code around in the current file. Sometimes these helpers can get a little bulky and add unnecessary duplication across files. The &lt;code&gt;runtime&lt;/code&gt; transformer replaces all the helper calls to a module.</source>
          <target state="translated">일반적으로 Babel은 파일 상단에 도우미를 배치하여 현재 파일에서 코드를 복제하지 않도록 일반적인 작업을 수행합니다. 때로는 이러한 도우미가 약간 커져 파일 전체에 불필요한 복제가 추가 될 수 있습니다. &lt;code&gt;runtime&lt;/code&gt; 변압기 모듈에 대한 모든 도우미 호출을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="290dac456564908b6944ed584e8bef19638c6fdc" translate="yes" xml:space="preserve">
          <source>Utilities may pass a &lt;code&gt;caller&lt;/code&gt; object to identify themselves to Babel and pass capability-related flags for use by configs, presets and plugins. For example</source>
          <target state="translated">유틸리티는 &lt;code&gt;caller&lt;/code&gt; 객체를 전달하여 Babel에 자신을 식별하고 구성, 사전 설정 및 플러그인에서 사용할 수 있도록 기능 관련 플래그를 전달할 수 있습니다. 예를 들면</target>
        </trans-unit>
        <trans-unit id="1c3502847ac7497cb7abc47b23ce42807e674414" translate="yes" xml:space="preserve">
          <source>Valid Usage</source>
          <target state="translated">유효한 사용법</target>
        </trans-unit>
        <trans-unit id="fc7cfb6c4b38b8f685840aceb43c8381b73ecf99" translate="yes" xml:space="preserve">
          <source>Valid options include any:</source>
          <target state="translated">유효한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bba5ca923905ea7020283b3f47e33aca8b5e78e4" translate="yes" xml:space="preserve">
          <source>Validate ES2015 constants</source>
          <target state="translated">ES2015 상수 검증</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="5054ca9858ffab20b9d1dad5f47771dbd559feb3" translate="yes" xml:space="preserve">
          <source>Very handy for conditions inside JSX: &lt;a href=&quot;https://github.com/reactjs/react-future/issues/35#issuecomment-120009203&quot;&gt;reactjs/react-future#35&lt;/a&gt;</source>
          <target state="translated">JSX 내부 조건에 매우 편리합니다 : &lt;a href=&quot;https://github.com/reactjs/react-future/issues/35#issuecomment-120009203&quot;&gt;reactjs / react-future # 35&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0a4405c792ed50fa36373e59a216bef4c54fb317" translate="yes" xml:space="preserve">
          <source>Via &lt;code&gt;.babelrc&lt;/code&gt; (Recommended)</source>
          <target state="translated">&lt;code&gt;.babelrc&lt;/code&gt; 를 통해 (권장)</target>
        </trans-unit>
        <trans-unit id="bde3bf5863ab1bfad9da31e26d8182ba9f947e4d" translate="yes" xml:space="preserve">
          <source>Via CLI</source>
          <target state="translated">CLI를 통해</target>
        </trans-unit>
        <trans-unit id="d421a131c2d3aba786670411141757ce88f431e7" translate="yes" xml:space="preserve">
          <source>Via Node API</source>
          <target state="translated">노드 API를 통해</target>
        </trans-unit>
        <trans-unit id="46a0ed375b3e7057b755a780ed82c2eea340faa9" translate="yes" xml:space="preserve">
          <source>Via Node.js API</source>
          <target state="translated">Node.js API를 통해</target>
        </trans-unit>
        <trans-unit id="fb0ad805cff3aa7d74ec9095dd4a6347697ef898" translate="yes" xml:space="preserve">
          <source>View the output</source>
          <target state="translated">출력보기</target>
        </trans-unit>
        <trans-unit id="05a90b03795aa47319db1655e7316ffd52e0d18c" translate="yes" xml:space="preserve">
          <source>We can install Babel CLI locally by running:</source>
          <target state="translated">다음을 실행하여 Babel CLI를 로컬로 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e48d3a5cf7b590e91b9fd1b5225dbfdeb6f07ce2" translate="yes" xml:space="preserve">
          <source>We can periodically run &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js&quot;&gt;build-data.js&lt;/a&gt; which generates &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugins.json&quot;&gt;plugins.json&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugins.json&quot;&gt;plugins.json&lt;/a&gt; 을 생성 하는 &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js&quot;&gt;build-data.js&lt;/a&gt; 를 주기적으로 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3fe6eb3dce39cf1178a8abf2f3ffc0bbc3c8b1e" translate="yes" xml:space="preserve">
          <source>We can use it alongside the babel parser to traverse and update nodes:</source>
          <target state="translated">babel 파서와 함께 사용하여 노드를 탐색하고 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7e02d2741e744f65dab6b976c0f4e07bffa07af" translate="yes" xml:space="preserve">
          <source>We currently aren't willing to commit to supporting the API for plugins or the resulting ecosystem (there is already enough work maintaining Babel's own plugin system). It's not clear how to make that API effective, and it would limit our ability to refactor and optimize the codebase.</source>
          <target state="translated">우리는 현재 플러그인 또는 결과 생태계에 대한 API 지원을 약속하지 않습니다 (이미 Babel 자체 플러그인 시스템을 유지 관리하는 작업이 충분합니다). API를 효과적으로 만드는 방법은 명확하지 않으며 코드베이스를 리팩터링하고 최적화하는 능력이 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="a5727fde553b35c22e7bec7276c3130e3c515392" translate="yes" xml:space="preserve">
          <source>We do not recommend that you import the whole polyfill directly: either try the &lt;code&gt;useBuiltIns&lt;/code&gt; options or import only the polyfills you need manually (either from this package or somewhere else).</source>
          <target state="translated">전체 폴리 필을 직접 가져 오는 것은 권장하지 않습니다. &lt;code&gt;useBuiltIns&lt;/code&gt; 옵션을 시도 하거나 필요한 폴리 필 만 수동으로 가져 오세요 (이 패키지 또는 다른 곳에서).</target>
        </trans-unit>
        <trans-unit id="be6c8390d1b54e3cddefdb0ea4ebdd70b19fbcc7" translate="yes" xml:space="preserve">
          <source>We don't recommend using &lt;code&gt;preset-env&lt;/code&gt; this way because it doesn't take advantage of its ability to target specific environments/versions.</source>
          <target state="translated">특정 환경 / 버전을 대상으로하는 기능을 활용하지 않기 때문에 이러한 방식으로 &lt;code&gt;preset-env&lt;/code&gt; 를 사용하지 않는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="98faa4d649cc0ce54450830fa2b5100b3e69ab58" translate="yes" xml:space="preserve">
          <source>We leverage these data sources to maintain &lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-compat-data/data/plugins.json&quot;&gt;mappings of which version&lt;/a&gt; of our supported target environments gained support of a JavaScript syntax or browser feature, as well as a mapping of those syntaxes and features to Babel transform plugins and core-js polyfills.</source>
          <target state="translated">이러한 데이터 소스를 활용하여 지원되는 대상 환경 &lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-compat-data/data/plugins.json&quot;&gt;의 어떤 버전&lt;/a&gt; 이 JavaScript 구문 또는 브라우저 기능을 지원 했는지 에 대한 매핑 을 유지하고 이러한 구문과 기능을 Babel 변환 플러그인 및 core-js 폴리 필에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="f341d35bdc83f0e2a3d9d22085265e6a11c7ec14" translate="yes" xml:space="preserve">
          <source>We recognize this isn&amp;rsquo;t ideal and will be revisiting this in Babel v8.</source>
          <target state="translated">이것이 이상적이지 않다는 것을 알고 있으며 Babel v8에서 다시 검토 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="b19a754f328d85e72b48e7b879205f2bc98a2971" translate="yes" xml:space="preserve">
          <source>We recommend using this file type wherever possible: JS config files are handy if you have complex configuration that is conditional or otherwise computed at build time. However, the downside is that JS configs are less statically analyzable, and therefore have negative effects on cacheability, linting, IDE autocomplete, etc. Since &lt;code&gt;babel.config.json&lt;/code&gt; and &lt;code&gt;.babelrc.json&lt;/code&gt; are static JSON files, it allows other tools that use Babel such as bundlers to cache the results of Babel safely, which can be a huge build performance win.</source>
          <target state="translated">가능하면이 파일 유형을 사용하는 것이 좋습니다. JS 구성 파일은 조건부 구성이 있거나 빌드시 계산되는 복잡한 구성이있는 경우 편리합니다. 그러나 단점은 JS 구성이 정적으로 분석하기 &lt;code&gt;babel.config.json&lt;/code&gt; 때문에 캐시 가능성, Linting, IDE 자동 완성 등에 부정적인 영향을 &lt;code&gt;.babelrc.json&lt;/code&gt; 는 것입니다 . babel.config.json 및 .babelrc.json 은 정적 JSON 파일이므로 다음을 사용하는 다른 도구를 사용할 수 있습니다. Babel의 결과를 안전하게 캐시하는 번 들러와 같은 Babel은 빌드 성능이 크게 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9417b564c5d49c85c74f9ae28ab53ca447b563a" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve assembled some for common environments:</source>
          <target state="translated">우리는 일반적인 환경을 위해 몇 가지를 조립했습니다.</target>
        </trans-unit>
        <trans-unit id="642803d03826095e048310e6f6fdb2336f081224" translate="yes" xml:space="preserve">
          <source>Webpack</source>
          <target state="translated">Webpack</target>
        </trans-unit>
        <trans-unit id="042adfdaabd1425f58a0b59a2280650b6dc0bafd" translate="yes" xml:space="preserve">
          <source>What does this actually mean though? Basically, you can use built-ins such as &lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, etc., as well use all the Babel features that require a polyfill seamlessly, without global pollution, making it extremely suitable for libraries.</source>
          <target state="translated">이것이 실제로 무엇을 의미합니까? 기본적으로 &lt;code&gt;Promise&lt;/code&gt; , &lt;code&gt;Set&lt;/code&gt; , &lt;code&gt;Symbol&lt;/code&gt; 등과 같은 내장 기능을 사용할 수 있으며 전역 오염없이 완벽하게 폴리 필이 필요한 모든 Babel 기능을 사용할 수 있으므로 라이브러리에 매우 적합합니다.</target>
        </trans-unit>
        <trans-unit id="a4a329952bfe7e14197d549b032ddbbe10927ec3" translate="yes" xml:space="preserve">
          <source>What is Babel?</source>
          <target state="translated">Babel은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="b6058a99d9bc1a11e5c9957a8649df5906380808" translate="yes" xml:space="preserve">
          <source>What the &lt;code&gt;runtime&lt;/code&gt; transformer does is transform the following:</source>
          <target state="translated">무엇 &lt;code&gt;runtime&lt;/code&gt; 변압기가하는 일은 다음 변환입니다 :</target>
        </trans-unit>
        <trans-unit id="ccf7e1155d570d64a97965333a7692b4a5001f9c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Bar.prototype.foo&lt;/code&gt; is defined it triggers the setter on &lt;code&gt;Foo&lt;/code&gt;. This is a case that is very unlikely to appear in production code however it&amp;rsquo;s something to keep in mind.</source>
          <target state="translated">&lt;code&gt;Bar.prototype.foo&lt;/code&gt; 가 정의 되면 &lt;code&gt;Foo&lt;/code&gt; 에서 setter를 트리거합니다 . 이것은 프로덕션 코드에 나타날 가능성이 거의 없지만 명심해야 할 사항입니다.</target>
        </trans-unit>
        <trans-unit id="253440d8c16cb8ebe4bb92e8a89196d6b9979327" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Bar.prototype.foo&lt;/code&gt; is defined it triggers the setter on &lt;code&gt;Foo&lt;/code&gt;. This is a case that is very unlikely to appear in production code however it's something to keep in mind.</source>
          <target state="translated">&lt;code&gt;Bar.prototype.foo&lt;/code&gt; 가 정의 되면 &lt;code&gt;Foo&lt;/code&gt; 에서 setter를 트리거합니다 . 이것은 프로덕션 코드에 나타날 가능성이 거의없는 경우이지만 명심해야 할 사항입니다.</target>
        </trans-unit>
        <trans-unit id="ffccd6ee5cea658d566dc62641c020e8b52af6b5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt; or not set, all template literal expressions and quasis are combined with &lt;code&gt;String.prototype.concat&lt;/code&gt;. It will handle cases with &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; correctly and throw correctly if template literal expression is a &lt;code&gt;Symbol()&lt;/code&gt;. See &lt;a href=&quot;https://github.com/babel/babel/pull/5791&quot;&gt;babel/babel#5791&lt;/a&gt;.</source>
          <target state="translated">때 &lt;code&gt;false&lt;/code&gt; 설정없이 모든 템플릿 문자 표현과 quasis 함께 결합되어 &lt;code&gt;String.prototype.concat&lt;/code&gt; . &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; 로 케이스를 올바르게 처리 하고 템플릿 리터럴 표현식이 &lt;code&gt;Symbol()&lt;/code&gt; 경우 올바르게 throw됩니다 . &lt;a href=&quot;https://github.com/babel/babel/pull/5791&quot;&gt;babel / babel # 5791을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a526695de725496d37284fc9420d8cdf8abe3448" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, class properties are compiled to use an assignment expression instead of &lt;code&gt;Object.defineProperty&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;true&lt;/code&gt; , 클래스 속성 대신의 대입 표현식 사용하도록 컴파일되어 &lt;code&gt;Object.defineProperty&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="d770379b9548a7be6117dd3e6e320af4cedc92ba" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, tagged template literal objects aren't frozen. All template literal expressions and quasis are combined with the &lt;code&gt;+&lt;/code&gt; operator instead of with &lt;code&gt;String.prototype.concat&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;true&lt;/code&gt; , 태그 템플릿 문자 객체는 냉동하지 않습니다. 모든 템플릿 리터럴 표현식과 quasis는 &lt;code&gt;String.prototype.concat&lt;/code&gt; 대신 &lt;code&gt;+&lt;/code&gt; 연산자 로 결합됩니다 .</target>
        </trans-unit>
        <trans-unit id="2dba4e29943c89fa77b29c0910490c10422ef3d8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, this transform will pretend &lt;code&gt;document.all&lt;/code&gt; does not exist, and perform loose equality checks with &lt;code&gt;null&lt;/code&gt; instead of strict equality checks against both &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;true&lt;/code&gt; ,이 척 것이다 변환 &lt;code&gt;document.all&lt;/code&gt; 존재하지 않으며, 느슨하게 평등 검사를 수행 &lt;code&gt;null&lt;/code&gt; 대신 모두에 대한 엄격한 평등 검사의 &lt;code&gt;null&lt;/code&gt; 와 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="114d14dcae99fd4112bd9e8fd38f67f11d56504a" translate="yes" xml:space="preserve">
          <source>When arguments for user script have names conflicting with node options, double dash placed before script name can be used to resolve ambiguities</source>
          <target state="translated">사용자 스크립트에 대한 인수의 이름이 노드 옵션과 충돌하는 경우 스크립트 이름 앞에 이중 대시를 사용하여 모호성을 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f055a7b66b61397a84095ad67c967fe2b122f3b9" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;template&lt;/code&gt; as a function with a string argument, you can provide &lt;em&gt;placeholders&lt;/em&gt; which will get substituted when the template is used.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; 을 문자열 인수가있는 함수로 호출 할 때 템플릿이 사용될 때 대체 될 &lt;em&gt;자리 표시자를&lt;/em&gt; 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f7f4131259972c545447f8652b2f7a69d3c5486f" translate="yes" xml:space="preserve">
          <source>When disabled with &lt;code&gt;false&lt;/code&gt;, the transform converts Unicode regexes to non-Unicode regexes for wider support, removing the &lt;code&gt;u&lt;/code&gt; flag. See &lt;a href=&quot;https://github.com/mathiasbynens/regexpu-core#useunicodeflag-default-false&quot;&gt;https://github.com/mathiasbynens/regexpu-core#useunicodeflag-default-false&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 비활성화 하면 변환은 더 넓은 지원을 위해 유니 코드 정규식을 비 유니 코드 정규식으로 변환하여 &lt;code&gt;u&lt;/code&gt; 플래그를 제거합니다 . 자세한 내용은 &lt;a href=&quot;https://github.com/mathiasbynens/regexpu-core#useunicodeflag-default-false&quot;&gt;https://github.com/mathiasbynens/regexpu-core#useunicodeflag-default-false&lt;/a&gt; 를 참조 하세요 .</target>
        </trans-unit>
        <trans-unit id="88159d98c570a4b6ff1126d9285f19c8f0e27df3" translate="yes" xml:space="preserve">
          <source>When either the &lt;code&gt;usage&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt; options are used, &lt;code&gt;@babel/preset-env&lt;/code&gt; will add direct references to &lt;code&gt;core-js&lt;/code&gt; modules as bare imports (or requires). This means &lt;code&gt;core-js&lt;/code&gt; will be resolved relative to the file itself and needs to be accessible.</source>
          <target state="translated">중 하나를 할 때 &lt;code&gt;usage&lt;/code&gt; 또는 &lt;code&gt;entry&lt;/code&gt; 옵션을 사용, &lt;code&gt;@babel/preset-env&lt;/code&gt; 직접 참조를 추가합니다 &lt;code&gt;core-js&lt;/code&gt; 베어 수입 등의 모듈 (또는 필요). 즉, &lt;code&gt;core-js&lt;/code&gt; 는 파일 자체에 대해 상대적으로 확인되고 액세스 가능해야합니다.</target>
        </trans-unit>
        <trans-unit id="3481d9cca8b3d801f89c93b989d10e821b7f6906" translate="yes" xml:space="preserve">
          <source>When enabled, the transform will use helpers that do not get run through &lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt;. This allows for smaller builds in module systems like webpack, since it doesn't need to preserve commonjs semantics.</source>
          <target state="translated">활성화되면 변환은 &lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt; 통해 실행되지 않는 도우미를 사용합니다 . 이것은 commonjs 의미 체계를 보존 할 필요가 없기 때문에 webpack과 같은 모듈 시스템에서 더 작은 빌드를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8b6f9ecc2e4ce8254c5619bcec9c22fe2a000600" translate="yes" xml:space="preserve">
          <source>When enabled, type-only class fields are only removed if they are prefixed with the &lt;code&gt;declare&lt;/code&gt; modifier:</source>
          <target state="translated">활성화되면 유형 전용 클래스 필드는 &lt;code&gt;declare&lt;/code&gt; 수정자가 접두사로 붙은 경우에만 제거됩니다 .</target>
        </trans-unit>
        <trans-unit id="e70e1731223c16aeac1158670bf4c5276ed4298c" translate="yes" xml:space="preserve">
          <source>When extending a native class (e.g., &lt;code&gt;class extends Array {}&lt;/code&gt;), the super class needs to be wrapped. This is needed to workaround two problems:</source>
          <target state="translated">네이티브 클래스를 확장 할 때 (예 : &lt;code&gt;class extends Array {}&lt;/code&gt; ) 수퍼 클래스를 래핑해야합니다. 이는 두 가지 문제를 해결하는 데 필요합니다.</target>
        </trans-unit>
        <trans-unit id="7cb0baa77d079cec45b0d10f8e0f78e6ae278f4c" translate="yes" xml:space="preserve">
          <source>When multiple plugins require the same option, it's easier to declare it in one place. These options are passed on to two or more plugins.</source>
          <target state="translated">여러 플러그인에 동일한 옵션이 필요한 경우 한곳에서 선언하는 것이 더 쉽습니다. 이러한 옵션은 둘 이상의 플러그인에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8e7fcd99bbc7aa7e586e518dd0e7d232384ff78c" translate="yes" xml:space="preserve">
          <source>When nothing is specified before the &lt;code&gt;::&lt;/code&gt; operator, the function is bound to its object:</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; 연산자 앞에 아무 것도 지정하지 않으면 함수가 해당 객체에 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="367f6d8bec8667d60ae0ab154097472da5fb9c54" translate="yes" xml:space="preserve">
          <source>When one of the implementations is accepted, it will become the default and the &lt;code&gt;&quot;proposal&quot;&lt;/code&gt; option will no longer be required.</source>
          <target state="translated">구현 중 하나가 수락되면 기본값이되고 &lt;code&gt;&quot;proposal&quot;&lt;/code&gt; 옵션이 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dbeefce42ff7526ac350781e8df8b3d1285ece69" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, the transform will only remove &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-exports&quot;&gt;type-only imports&lt;/a&gt; (introduced in TypeScript 3.8). This should only be used if you are using TypeScript &amp;gt;= 3.8.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정 하면 변환은 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-exports&quot;&gt;유형 전용 가져&lt;/a&gt; 오기만 제거 합니다 (TypeScript 3.8에 도입 됨). TypeScript&amp;gt; = 3.8을 사용하는 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="f7349531366f162cf8febfd70846f99dab5bc8d0" translate="yes" xml:space="preserve">
          <source>When spreading props, use &lt;code&gt;Object.assign&lt;/code&gt; directly instead of Babel&amp;rsquo;s extend helper.</source>
          <target state="translated">소품을 &lt;code&gt;Object.assign&lt;/code&gt; 때 Babel의 확장 도우미 대신 Object.assign을 직접 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d179f44e232b086cce9e7a7ae1ebba2f09d47a16" translate="yes" xml:space="preserve">
          <source>When spreading props, use &lt;code&gt;Object.assign&lt;/code&gt; directly instead of Babel's extend helper.</source>
          <target state="translated">소품을 퍼뜨릴 때 Babel의 확장 도우미 대신 &lt;code&gt;Object.assign&lt;/code&gt; 을 직접 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="485accfc525d574dcabec949c56795b245eadec7" translate="yes" xml:space="preserve">
          <source>When spreading props, use inline object with spread elements directly instead of Babel's extend helper or &lt;code&gt;Object.assign&lt;/code&gt;.</source>
          <target state="translated">props를 펼칠 때 Babel의 extend helper 또는 &lt;code&gt;Object.assign&lt;/code&gt; 대신 직접 스프레드 요소가있는 인라인 객체를 사용 하세요.</target>
        </trans-unit>
        <trans-unit id="c1cb37f8e0f9f66fe0637992150bb4f87b2bf54c" translate="yes" xml:space="preserve">
          <source>When this option is &lt;code&gt;true&lt;/code&gt;, you can use &lt;code&gt;%%foo%%&lt;/code&gt; to mark placeholders in your templates. When it is &lt;code&gt;false&lt;/code&gt;, placeholders are identifiers determined by the &lt;code&gt;placeholderWhitelist&lt;/code&gt; and &lt;code&gt;placeholderPattern&lt;/code&gt; options.</source>
          <target state="translated">이 옵션이 &lt;code&gt;true&lt;/code&gt; 이면 &lt;code&gt;%%foo%%&lt;/code&gt; 를 사용 하여 템플릿에서 자리 표시자를 표시 할 수 있습니다 . 이 경우 &lt;code&gt;false&lt;/code&gt; , 자리는에 의해 결정 식별자 &lt;code&gt;placeholderWhitelist&lt;/code&gt; 및 &lt;code&gt;placeholderPattern&lt;/code&gt; 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="78413a6d6eeabb860a8b1bac5e9daf04ebe84642" translate="yes" xml:space="preserve">
          <source>When this option is disabled, Babel doesn't wrap RegExps with the &lt;code&gt;_wrapRegExp&lt;/code&gt; helper. The output only supports internal group references, and not runtime properties:</source>
          <target state="translated">이 옵션이 비활성화되면 Babel은 &lt;code&gt;_wrapRegExp&lt;/code&gt; 도우미로 RegExps를 래핑하지 않습니다 . 출력은 내부 그룹 참조 만 지원하고 런타임 속성은 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6397bb8e4796eeb5f0c66d2d1a5dc7d14815a6c5" translate="yes" xml:space="preserve">
          <source>When this option is enabled, &lt;code&gt;@babel/preset-env&lt;/code&gt; tries to compile the broken syntax to the closest &lt;em&gt;non-broken modern syntax&lt;/em&gt; supported by your target browsers. Depending on your &lt;code&gt;targets&lt;/code&gt; and on how many modern syntax you are using, this can lead to a significant size reduction in the compiled app. This option merges the features of &lt;a href=&quot;https://github.com/babel/preset-modules&quot;&gt;&lt;code&gt;@babel/preset-modules&lt;/code&gt;&lt;/a&gt; without having to use another preset.</source>
          <target state="translated">이 옵션이 활성화되면 &lt;code&gt;@babel/preset-env&lt;/code&gt; 는 손상된 구문을 대상 브라우저에서 지원 하는 가장 가까운 &lt;em&gt;손상되지 않은 최신 구문&lt;/em&gt; 으로 컴파일하려고 시도 합니다. 당신에 따라 &lt;code&gt;targets&lt;/code&gt; 및 사용 방법 많은 현대 구문,이 컴파일 된 응용에 상당한 크기 감소로 이어질 수 있습니다. 이 옵션은 다른 사전 설정을 사용할 필요없이 &lt;a href=&quot;https://github.com/babel/preset-modules&quot;&gt; &lt;code&gt;@babel/preset-modules&lt;/code&gt; &lt;/a&gt; 의 기능을 병합합니다 .</target>
        </trans-unit>
        <trans-unit id="aabbd0709749548062f8e6fb7bb3f430b05d5485" translate="yes" xml:space="preserve">
          <source>When true, private methods will be assigned directly on its parent via &lt;code&gt;Object.defineProperty&lt;/code&gt; rather than a &lt;code&gt;WeakSet&lt;/code&gt;. This results in improved performance and debugging (normal property access vs &lt;code&gt;.get()&lt;/code&gt;) at the expense of potentially leaking &quot;privates&quot; via things like &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;.</source>
          <target state="translated">사실, 개인 방법을 통해 부모에 직접 할당 할 때 &lt;code&gt;Object.defineProperty&lt;/code&gt; 보다는 &lt;code&gt;WeakSet&lt;/code&gt; . 이로 인해 &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; 와 같은 것을 통해 잠재적으로 &quot;개인 정보&quot;가 유출되는 대신 성능 및 디버깅 (일반 속성 액세스 대 &lt;code&gt;.get()&lt;/code&gt; ) 이 향상됩니다 .</target>
        </trans-unit>
        <trans-unit id="ecfa33be44ab8606b5666a298893b23dbf069637" translate="yes" xml:space="preserve">
          <source>When true, private property &lt;code&gt;in&lt;/code&gt; expressions will check own properties (as opposed to inherited ones) on the object, instead of checking for presence inside a &lt;code&gt;WeakSet&lt;/code&gt;. This results in improved performance and debugging (normal property access vs &lt;code&gt;.get()&lt;/code&gt;) at the expense of potentially leaking &quot;privates&quot; via things like &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;.</source>
          <target state="translated">사실, 개인 재산 때 &lt;code&gt;in&lt;/code&gt; 대신 내부에 존재 확인의 객체에 (상속 된 반대) 표현은 자신의 속성을 확인합니다 &lt;code&gt;WeakSet&lt;/code&gt; . 이로 인해 &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; 와 같은 것을 통해 잠재적으로 &quot;개인 정보&quot;가 유출되는 대신 성능 및 디버깅 (일반 속성 액세스 대 &lt;code&gt;.get()&lt;/code&gt; ) 이 향상됩니다 .</target>
        </trans-unit>
        <trans-unit id="055e2b7e3de31a24956f8a4bdd952bd8a0f6839a" translate="yes" xml:space="preserve">
          <source>When used alongside &lt;a href=&quot;../babel-preset-env/index&quot;&gt;&lt;code&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt;,</source>
          <target state="translated">함께 사용하는 경우 &lt;a href=&quot;../babel-preset-env/index&quot;&gt; &lt;code&gt;@babel/preset-env&lt;/code&gt; &lt;/a&gt; ,</target>
        </trans-unit>
        <trans-unit id="6dd3e6f18c528faf7295ee38f0294a0778445fa2" translate="yes" xml:space="preserve">
          <source>When used alongside &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt;, polyfills (by default including &lt;code&gt;Symbol&lt;/code&gt;) are specifically scoped to not pollute the global scope. This breaks usage with React, as it won't have access to that polyfill and will cause your application to fail in legacy browsers.</source>
          <target state="translated">&lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; 과 함께 사용되는 경우 polyfill (기본적으로 &lt;code&gt;Symbol&lt;/code&gt; 포함 )은 전역 범위를 오염시키지 않도록 범위가 지정됩니다. 이로 인해 해당 폴리 필에 액세스 할 수없고 레거시 브라우저에서 애플리케이션이 실패하게되므로 React 사용이 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="4154ba7d9c5d67a87811a2f97d9837a112e61e30" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;.ast&lt;/code&gt;, the AST will be returned directly.</source>
          <target state="translated">&lt;code&gt;.ast&lt;/code&gt; 를 사용 하면 AST가 직접 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="abcecd879721ba8edcc06a21f25a8a4202d71840" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;await&lt;/code&gt; with non-promise values, Bluebird will throw &quot;Error: A value was yielded that could not be treated as a promise&quot;. Since Babel cannot automatically handle this runtime error, you should manually transform it to a promise.</source>
          <target state="translated">약속이 아닌 값으로 &lt;code&gt;await&lt;/code&gt; 를 사용할 때 Bluebird는 &quot;오류 : 약속으로 처리 할 수없는 값이 산출되었습니다&quot;를 던집니다. Babel은이 런타임 오류를 자동으로 처리 할 수 ​​없으므로 수동으로이를 promise로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="5b4733a18175013db8ae2fea927f0a93744163ef" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;uglify-js&lt;/code&gt; to minify your code, you may run into syntax errors when targeting later browsers since &lt;code&gt;uglify-js&lt;/code&gt; does not support any ES2015+ syntax.</source>
          <target state="translated">&lt;code&gt;uglify-js&lt;/code&gt; 를 사용 하여 코드를 축소하면 &lt;code&gt;uglify-js&lt;/code&gt; 가 ES2015 + 구문을 지원하지 않으므로 이후 브라우저를 대상으로 지정할 때 구문 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8ddd3dffe42a5e1b3d811cedd1dcf4efc682fd29" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;legacy: true&lt;/code&gt; mode, &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt; must be used in &lt;code&gt;loose&lt;/code&gt; mode to support the &lt;code&gt;@babel/plugin-proposal-decorators&lt;/code&gt;.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;legacy: true&lt;/code&gt; 모드, &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt; 사용해야합니다 &lt;code&gt;loose&lt;/code&gt; 모드가를 지원하기 &lt;code&gt;@babel/plugin-proposal-decorators&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f33830e3ba936d4042ef695bf96fd1afc80613c" translate="yes" xml:space="preserve">
          <source>Whenever you use a generator function or async function:</source>
          <target state="translated">생성기 함수 또는 비동기 함수를 사용할 때마다 :</target>
        </trans-unit>
        <trans-unit id="76651445218fd63ab6f6b24b22cd5ef022466fda" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;api.version&lt;/code&gt; can be useful in general, it's sometimes nice to just declare your version. This API exposes a simple way to do that with:</source>
          <target state="translated">&lt;code&gt;api.version&lt;/code&gt; 은 일반적으로 유용 할 수 있지만 버전을 선언하는 것이 좋을 때도 있습니다. 이 API는 다음과 같은 간단한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a22ba52c2a5e6092b48aff2557ca73a6465f6d8a" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;op_mini all&lt;/code&gt; is a valid browserslist query, preset-env currently ignores it due to &lt;a href=&quot;https://github.com/kangax/compat-table/issues/1057&quot;&gt;lack of support data&lt;/a&gt; for Opera Mini.</source>
          <target state="translated">하지만 &lt;code&gt;op_mini all&lt;/code&gt; 유효한 browserslist 쿼리, 사전-ENV 현재 인해이를 무시입니다 &lt;a href=&quot;https://github.com/kangax/compat-table/issues/1057&quot;&gt;지원 데이터의 부족&lt;/a&gt; 오페라 미니에 대한.</target>
        </trans-unit>
        <trans-unit id="aa24051a4424071c756e90e429cc98ec6fd5ab09" translate="yes" xml:space="preserve">
          <source>While Babel will transform it to something like this:</source>
          <target state="translated">Babel은이를 다음과 같이 변환합니다.</target>
        </trans-unit>
        <trans-unit id="942e4beb7893cd0cc8aee496e52d24db2a2c1c64" translate="yes" xml:space="preserve">
          <source>While it is &lt;em&gt;not&lt;/em&gt; spec-compliant to destructure array-like objects as if they were arrays, there are many objects that would be &lt;em&gt;iterables&lt;/em&gt; in modern browsers with &lt;code&gt;Symbol.iterator&lt;/code&gt; support. Some notable examples are the DOM collections, like &lt;code&gt;document.querySelectorAll(&quot;img.big&quot;)&lt;/code&gt;, which are the main use case for this option.</source>
          <target state="translated">그 동안 &lt;em&gt;하지&lt;/em&gt; destructure에 사양을 준수하는 배열은 같은 그들이 배열 것처럼 객체 것이다 많은 개체가 &lt;em&gt;반복 가능 객체&lt;/em&gt; 현대적인 브라우저에서 &lt;code&gt;Symbol.iterator&lt;/code&gt; 의 지원. 주목할만한 몇 가지 예는 이 옵션의 주요 사용 사례 인 &lt;code&gt;document.querySelectorAll(&quot;img.big&quot;)&lt;/code&gt; 과 같은 DOM 컬렉션 입니다.</target>
        </trans-unit>
        <trans-unit id="f8762e35c3367277ab1fea542eac71c53fda338f" translate="yes" xml:space="preserve">
          <source>While it is &lt;em&gt;not&lt;/em&gt; spec-compliant to iterate array-like objects as if they were arrays, there are many objects that would be &lt;em&gt;iterables&lt;/em&gt; in modern browsers with &lt;code&gt;Symbol.iterator&lt;/code&gt; support. Some notable examples are the DOM collections, like &lt;code&gt;document.querySelectorAll(&quot;img.big&quot;)&lt;/code&gt;, which are the main use case for this option.</source>
          <target state="translated">그 동안 &lt;em&gt;하지&lt;/em&gt; 반복하는 사양을 준수하는 배열이 같은 그들이 배열 것처럼 객체 것이다 많은 개체가 &lt;em&gt;반복 가능 객체&lt;/em&gt; 현대적인 브라우저에서 &lt;code&gt;Symbol.iterator&lt;/code&gt; 의 지원. 주목할만한 몇 가지 예는 이 옵션의 주요 사용 사례 인 &lt;code&gt;document.querySelectorAll(&quot;img.big&quot;)&lt;/code&gt; 과 같은 DOM 컬렉션 입니다.</target>
        </trans-unit>
        <trans-unit id="f9c9c96da62ef1327412ca276daff170732d75ff" translate="yes" xml:space="preserve">
          <source>While it is &lt;em&gt;not&lt;/em&gt; spec-compliant to spread array-like objects as if they were arrays, there are many objects that would be &lt;em&gt;iterables&lt;/em&gt; in modern browsers with &lt;code&gt;Symbol.iterator&lt;/code&gt; support. Some notable examples are the DOM collections, like &lt;code&gt;document.querySelectorAll(&quot;img.big&quot;)&lt;/code&gt;, which are the main use case for this option.</source>
          <target state="translated">그 동안 &lt;em&gt;하지&lt;/em&gt; 확산에 사양을 준수하는 배열처럼 그들이 배열 것처럼 객체 것이다 많은 개체가 &lt;em&gt;반복 가능 객체&lt;/em&gt; 현대적인 브라우저에서 &lt;code&gt;Symbol.iterator&lt;/code&gt; 의 지원. 주목할만한 몇 가지 예는 이 옵션의 주요 사용 사례 인 &lt;code&gt;document.querySelectorAll(&quot;img.big&quot;)&lt;/code&gt; 과 같은 DOM 컬렉션 입니다.</target>
        </trans-unit>
        <trans-unit id="c1e8123023addb3fb104a72b806ab476212fb4ac" translate="yes" xml:space="preserve">
          <source>While this plugin doesn&amp;rsquo;t shorten the output in any way, it does optimize it for repetition-based compression algorithms such as gzip</source>
          <target state="translated">이 플러그인은 어떤 식 으로든 출력을 줄이지 않지만 gzip과 같은 반복 기반 압축 알고리즘에 맞게 최적화합니다.</target>
        </trans-unit>
        <trans-unit id="0716e5cdddedb753c7a3151a3856d779c856297f" translate="yes" xml:space="preserve">
          <source>While you &lt;em&gt;can&lt;/em&gt; install Babel CLI globally on your machine, it&amp;rsquo;s much better to install it &lt;strong&gt;locally&lt;/strong&gt; project by project.</source>
          <target state="translated">컴퓨터에 Babel CLI를 전체적으로 설치할 수 &lt;em&gt;는&lt;/em&gt; 있지만 프로젝트별로 &lt;strong&gt;로컬로&lt;/strong&gt; 프로젝트 를 설치하는 것이 훨씬 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="79a561d9e466099ed08e72c0eccaffbde44daa71" translate="yes" xml:space="preserve">
          <source>While you &lt;em&gt;can&lt;/em&gt; install Babel CLI globally on your machine, it's much better to install it &lt;strong&gt;locally&lt;/strong&gt; project by project.</source>
          <target state="translated">컴퓨터에 Babel CLI를 전역으로 설치할 &lt;em&gt;수&lt;/em&gt; 있지만 프로젝트별로 &lt;strong&gt;로컬로&lt;/strong&gt; 설치하는 것이 훨씬 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="1a745cc4f8050526614eeab20b51161bab69b244" translate="yes" xml:space="preserve">
          <source>Whitelist of helpers to ONLY include</source>
          <target state="translated">헬퍼 허용 목록 만 포함</target>
        </trans-unit>
        <trans-unit id="21e2caea4476d26af34541ca7c909c7ff2fa4a7f" translate="yes" xml:space="preserve">
          <source>Why</source>
          <target state="translated">Why</target>
        </trans-unit>
        <trans-unit id="6b6fb06564a0fea8e2fa0ed3e3790d8910ba8e02" translate="yes" xml:space="preserve">
          <source>Why you should enforce Dangling Commas for Multiline Statements</source>
          <target state="translated">여러 줄로 된 문장에 댕글 링 쉼표를 적용해야하는 이유</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="829eba028f78ea2da9b95d2c5d4d50bcb0e5501f" translate="yes" xml:space="preserve">
          <source>Will only work with code of the form &lt;code&gt;Object.assign&lt;/code&gt; or &lt;code&gt;Object['assign']&lt;/code&gt;. The following patterns are not supported:</source>
          <target state="translated">&lt;code&gt;Object.assign&lt;/code&gt; 또는 &lt;code&gt;Object['assign']&lt;/code&gt; 형식의 코드에서만 작동 합니다 . 다음 패턴이 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bbb3e3a8f514b74d6f7b4454be8fff47c9bf827" translate="yes" xml:space="preserve">
          <source>Will run &lt;code&gt;transform-decorators-legacy&lt;/code&gt; then &lt;code&gt;transform-class-properties&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;transform-decorators-legacy&lt;/code&gt; 를 실행 한 다음 &lt;code&gt;transform-class-properties&lt;/code&gt; 를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="8d2dfd044e4673050f05c4673369e710ce344f10" translate="yes" xml:space="preserve">
          <source>Will run in the following order: &lt;code&gt;@babel/preset-react&lt;/code&gt; then &lt;code&gt;@babel/preset-env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@babel/preset-react&lt;/code&gt; 다음 &lt;code&gt;@babel/preset-env&lt;/code&gt; 순서로 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="16970e60e41aa68bbc8cb4b753aa12a2d747b162" translate="yes" xml:space="preserve">
          <source>Will run in the following order: &lt;code&gt;stage-2&lt;/code&gt;, &lt;code&gt;react&lt;/code&gt;, then &lt;code&gt;es2015&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stage-2&lt;/code&gt; , &lt;code&gt;react&lt;/code&gt; , &lt;code&gt;es2015&lt;/code&gt; 순서로 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="dd445529ead42cb5c502263f97e947d75f5ca777" translate="yes" xml:space="preserve">
          <source>Will the Babel parser support a plugin system?</source>
          <target state="translated">Babel 파서가 플러그인 시스템을 지원합니까?</target>
        </trans-unit>
        <trans-unit id="1f61e10176354ab2fcc464bc7849945d54d3cb04" translate="yes" xml:space="preserve">
          <source>Will use the native built-in instead of trying to polyfill behavior for any plugins that require one.</source>
          <target state="translated">플러그인이 필요한 플러그인에 대해 폴리 필 동작을 시도하는 대신 기본 내장 기능을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b94412239c90bacf98013f579ae3c475b395f3d0" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm&lt;/a&gt;:</source>
          <target state="translated">와 &lt;a href=&quot;https://www.npmjs.com&quot;&gt;NPM&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="f960326e740b6bbbde73df678e3bad4169668330" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt;, it would replace the reference to the function to the &lt;code&gt;@babel/runtime-corejs2&lt;/code&gt; version.</source>
          <target state="translated">와 &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; , 그것은 할 수있는 기능에 대한 참조를 대체 할 &lt;code&gt;@babel/runtime-corejs2&lt;/code&gt; 버전.</target>
        </trans-unit>
        <trans-unit id="18cefb42cd07fcdb142d4bb4db9104f4b8c3ac85" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt;, it would replace the reference to the function to the &lt;code&gt;@babel/runtime&lt;/code&gt; version.</source>
          <target state="translated">함께 &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; ,이에 기능에 대한 참조를 대체 할 &lt;code&gt;@babel/runtime&lt;/code&gt; 버전을.</target>
        </trans-unit>
        <trans-unit id="f600945afad9df68aa6615a566db4804b8823d28" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;webpack.config.js&lt;/code&gt;, add &lt;code&gt;babel-polyfill&lt;/code&gt; to your entry array:</source>
          <target state="translated">로 &lt;code&gt;webpack.config.js&lt;/code&gt; , 추가 &lt;code&gt;babel-polyfill&lt;/code&gt; 귀하의 항목 배열 :</target>
        </trans-unit>
        <trans-unit id="3448ac2a0ce7b0928e1c28e27dc5c2df405865e9" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;{ loose: true }&lt;/code&gt;, it becomes:</source>
          <target state="translated">함께 &lt;code&gt;{ loose: true }&lt;/code&gt; , 그것은된다 :</target>
        </trans-unit>
        <trans-unit id="bae5b4d40b1ed18fed24c7877e51863516275c5c" translate="yes" xml:space="preserve">
          <source>With Babel 7's &lt;a href=&quot;config-files/index#javascript&quot;&gt;JavaScript config file&lt;/a&gt; support, you can force all transforms to be run if env is set to &lt;code&gt;production&lt;/code&gt;.</source>
          <target state="translated">Babel 7의 &lt;a href=&quot;config-files/index#javascript&quot;&gt;JavaScript 구성 파일&lt;/a&gt; 지원을 사용하면 env가 &lt;code&gt;production&lt;/code&gt; 으로 설정된 경우 모든 변환을 강제로 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="862a82730395f811cf018c14e4bb011a0ff8cfe9" translate="yes" xml:space="preserve">
          <source>With a configuration file (Recommended)</source>
          <target state="translated">구성 파일 사용 (권장)</target>
        </trans-unit>
        <trans-unit id="9fb0f13639c470a5e39561780f55d5254428599a" translate="yes" xml:space="preserve">
          <source>With monorepo setups, the core thing to understand is that Babel treats your working directory as its logical &lt;a href=&quot;../options/index#root&quot;&gt;&quot;root&quot;&lt;/a&gt;, which causes problems if you want to run Babel tools within a specific sub-package without having Babel apply to the repo as a whole.</source>
          <target state="translated">monorepo 설정에서 이해해야 할 핵심은 Babel이 작업 디렉토리를 논리적 &lt;a href=&quot;../options/index#root&quot;&gt;&quot;루트&quot;&lt;/a&gt; 로 취급한다는 것입니다. 이는 Babel 이 전체 저장소에 적용되지 않고 특정 하위 패키지 내에서 Babel 도구를 실행하려는 경우 문제를 일으 킵니다.</target>
        </trans-unit>
        <trans-unit id="3375f07c94934de22a14605730e36b18e81e9ac6" translate="yes" xml:space="preserve">
          <source>With options (and their defaults):</source>
          <target state="translated">옵션 (및 기본값) 포함 :</target>
        </trans-unit>
        <trans-unit id="6bf60a08d100412a557c9ec4468e26a3fc8d3190" translate="yes" xml:space="preserve">
          <source>With options:</source>
          <target state="translated">옵션 포함 :</target>
        </trans-unit>
        <trans-unit id="2c7eb270960aa3ac6e52e054d8c057afaa88ba9f" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;runtime&lt;/code&gt; transformer, however, it is compiled to:</source>
          <target state="translated">그러나 &lt;code&gt;runtime&lt;/code&gt; 변환기를 사용하면 다음과 같이 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="ff8d5765fe602daa046245742c517a578cb60258" translate="yes" xml:space="preserve">
          <source>With webpack, there are multiple ways to include the polyfills:</source>
          <target state="translated">webpack을 사용하면 polyfill을 포함하는 여러 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b6d9caf22a8db71c82988865c82a931452f3843" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;{ &quot;loose&quot;: true }&lt;/code&gt;, the above code will compile to the following, using &lt;code&gt;Object.defineProperty&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{ &quot;loose&quot;: true }&lt;/code&gt; 없으면 위 코드는 &lt;code&gt;Object.defineProperty&lt;/code&gt; 를 사용하여 다음과 같이 컴파일됩니다 .</target>
        </trans-unit>
        <trans-unit id="284472a16763efe49cd65bada9c3fb4caaf780c5" translate="yes" xml:space="preserve">
          <source>Without any configuration options, babel-preset-env behaves exactly the same as babel-preset-latest (or babel-preset-es2015, babel-preset-es2016, and babel-preset-es2017 together).</source>
          <target state="translated">구성 옵션이 없으면 babel-preset-env는 babel-preset-latest와 동일하게 작동합니다 (또는 babel-preset-es2015, babel-preset-es2016 및 babel-preset-es2017).</target>
        </trans-unit>
        <trans-unit id="703c6eb398214673f74fdca9cf5f8628a7a7dd05" translate="yes" xml:space="preserve">
          <source>Without options:</source>
          <target state="translated">옵션이없는 경우 :</target>
        </trans-unit>
        <trans-unit id="c43b4dc575737c1bca05de0d1b4ccd86777efa2e" translate="yes" xml:space="preserve">
          <source>Working with Webpack and @babel/preset-env</source>
          <target state="translated">Webpack 및 @ babel / preset-env 작업</target>
        </trans-unit>
        <trans-unit id="e436c258f74495809ec1b6beccbcc6006081bb69" translate="yes" xml:space="preserve">
          <source>Would get parsed as a nested binary expression:</source>
          <target state="translated">중첩 된 이진 표현식으로 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="b5c05d4f631253b2012b5782096d66f6fb8ff9a7" translate="yes" xml:space="preserve">
          <source>Wrap the generated function in &lt;code&gt;.bind(this)&lt;/code&gt; and keeps uses of &lt;code&gt;this&lt;/code&gt; inside the function as-is, instead of using a renamed &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">상기 생성 함수를 래핑 &lt;code&gt;.bind(this)&lt;/code&gt; 및 용도의 유지 &lt;code&gt;this&lt;/code&gt; 그대로 A는 변경 사용하는 대신, 함수 내 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74c063af2db81640da30a0a0e6278cc4cda4b874" translate="yes" xml:space="preserve">
          <source>Wrong:</source>
          <target state="translated">Wrong:</target>
        </trans-unit>
        <trans-unit id="9ed3bc56e59bbae6788ce24db8003627deb910b3" translate="yes" xml:space="preserve">
          <source>You Don&amp;rsquo;t Know JS</source>
          <target state="translated">당신은 JS를 모른다</target>
        </trans-unit>
        <trans-unit id="28976e29c71a6df81a4a84a475cf966fcde9be3f" translate="yes" xml:space="preserve">
          <source>You Don't Know JS</source>
          <target state="translated">당신은 JS를 모른다</target>
        </trans-unit>
        <trans-unit id="cf2fb8adb2d7cbbc5b342e6b1da53b7a4fa68a07" translate="yes" xml:space="preserve">
          <source>You can also check out the React &lt;a href=&quot;https://facebook.github.io/react/docs/hello-world.html&quot;&gt;Getting Started page&lt;/a&gt;</source>
          <target state="translated">React &lt;a href=&quot;https://facebook.github.io/react/docs/hello-world.html&quot;&gt;Getting Started 페이지를&lt;/a&gt; 확인 하십시오</target>
        </trans-unit>
        <trans-unit id="ebf3d35ecba6e2418639c768375950f43f2de5fc" translate="yes" xml:space="preserve">
          <source>You can also configure it to only include the polyfills and transforms needed for the browsers you support. Compiling only what&amp;rsquo;s needed can make your bundles smaller and your life easier.</source>
          <target state="translated">지원하는 브라우저에 필요한 폴리 필 및 변환 만 포함하도록 구성 할 수도 있습니다. 필요한 것만 컴파일하면 번들 크기가 작고 생활이 더 쉬워 질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac09bf2f6a1877cb3871319b096c8f2cea0f1d60" translate="yes" xml:space="preserve">
          <source>You can also control what file extension is used with &lt;code&gt;--out-file-extension .example-extension&lt;/code&gt; e.g. &lt;code&gt;babel src/ lib/ --out-file-extension .mjs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--out-file-extension .example-extension&lt;/code&gt; 예를 들어 &lt;code&gt;babel src/ lib/ --out-file-extension .mjs&lt;/code&gt; 와 함께 사용되는 파일 확장자를 제어 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e4ead46136cb88b663a524f0a97ee07a4b15b43" translate="yes" xml:space="preserve">
          <source>You can also override the names of particular libraries when this module is running in the browser. For example the &lt;code&gt;es6-promise&lt;/code&gt; library exposes itself as &lt;code&gt;global.Promise&lt;/code&gt; rather than &lt;code&gt;global.es6Promise&lt;/code&gt;. This can be accommodated by:</source>
          <target state="translated">이 모듈이 브라우저에서 실행될 때 특정 라이브러리의 이름을 대체 할 수도 있습니다. 예를 들어 &lt;code&gt;es6-promise&lt;/code&gt; 라이브러리는 &lt;code&gt;global.Promise&lt;/code&gt; 가 아닌 &lt;code&gt;global.es6Promise&lt;/code&gt; 로 노출됩니다 . 이것은 다음에 의해 수용 될 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="d786892c963d08d19c2507961e4986a9cad4535d" translate="yes" xml:space="preserve">
          <source>You can also pass an &lt;code&gt;end&lt;/code&gt; hash in &lt;code&gt;location&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;location&lt;/code&gt; &lt;code&gt;end&lt;/code&gt; 해시를 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72455140be58bf5100feade06bd2fd53b56d0120" translate="yes" xml:space="preserve">
          <source>You can also pass options down to the &lt;code&gt;es2015&lt;/code&gt; preset.</source>
          <target state="translated">옵션을 &lt;code&gt;es2015&lt;/code&gt; 사전 설정으로 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba80c278399f772dc195509117f6b0b4858e7fb7" translate="yes" xml:space="preserve">
          <source>You can also provide any &lt;a href=&quot;https://github.com/babel/babylon/#plugins&quot;&gt;&lt;code&gt;plugins&lt;/code&gt; option&lt;/a&gt; from babylon:</source>
          <target state="translated">babylon에서 &lt;a href=&quot;https://github.com/babel/babylon/#plugins&quot;&gt; &lt;code&gt;plugins&lt;/code&gt; 옵션&lt;/a&gt; 을 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f35c5b5d3cd67a9406e64ceb9e7c96cf912ca8c4" translate="yes" xml:space="preserve">
          <source>You can also specify an relative/absolute path to your plugin.</source>
          <target state="translated">플러그인에 대한 상대 / 절대 경로를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c19ef343570bd2995e8b624cba777b0fa854f352" translate="yes" xml:space="preserve">
          <source>You can also specify an relative/absolute path to your plugin/preset.</source>
          <target state="translated">플러그인 / 사전 설정의 상대 / 절대 경로를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="152458f4e739f56ec9cc4904afc76bb9a908776b" translate="yes" xml:space="preserve">
          <source>You can also use React without using Babel: &lt;a href=&quot;https://facebook.github.io/react/docs/react-without-jsx.html&quot;&gt;React Without JSX&lt;/a&gt;</source>
          <target state="translated">Babel을 사용하지 않고 React를 사용할 수도 있습니다. &lt;a href=&quot;https://facebook.github.io/react/docs/react-without-jsx.html&quot;&gt;JSX없이 React&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ebb7946e4475e6a6d12e8b98b718a793a927529d" translate="yes" xml:space="preserve">
          <source>You can alternatively choose to specify your &lt;code&gt;.babelrc&lt;/code&gt; config from within &lt;code&gt;package.json&lt;/code&gt; like so:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;package.json&lt;/code&gt; 내에서 &lt;code&gt;.babelrc&lt;/code&gt; 구성 을 지정하도록 선택할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e46fe111fbbf9987794d0c5b5acc9fb50678a834" translate="yes" xml:space="preserve">
          <source>You can install the flow preset with</source>
          <target state="translated">다음을 사용하여 흐름 사전 설정을 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97eda3c568f8df70255fa96bc81dbddb0c1592cb" translate="yes" xml:space="preserve">
          <source>You can install this preset with</source>
          <target state="translated">이 사전 설정은 다음을 사용하여 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44347baade61975696d83a26e835ea8854edb5b4" translate="yes" xml:space="preserve">
          <source>You can often place all of your repo configuration in the root &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../options/index#overrides&quot;&gt;&quot;overrides&quot;&lt;/a&gt;, you can easily specify configuration that only applies to certain subfolders of your repository, which can often be easier to follow than creating many &lt;code&gt;.babelrc.json&lt;/code&gt; files across the repo.</source>
          <target state="translated">종종 모든 저장소 구성을 루트 &lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; 에 배치 할 수 있습니다 . 으로 &lt;a href=&quot;../options/index#overrides&quot;&gt;&quot;무시&quot;&lt;/a&gt; , 당신은 쉽게에만 종종 많은 만들어보다 쉽게 따라 할 수있는 저장소의 특정 하위 폴더에 적용 구성 지정할 수 있습니다 &lt;code&gt;.babelrc.json&lt;/code&gt; 의 REPO를 통해 파일을.</target>
        </trans-unit>
        <trans-unit id="9605a26d2fb7a716b8196b2674551462e2c7f81d" translate="yes" xml:space="preserve">
          <source>You can output the file using</source>
          <target state="translated">사용하여 파일을 출력 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="003ade24039ec5d8732a0a5870dcdec0e33f63e2" translate="yes" xml:space="preserve">
          <source>You can pass in all other &lt;a href=&quot;../options/index&quot;&gt;options&lt;/a&gt; as well, including &lt;code&gt;plugins&lt;/code&gt; and &lt;code&gt;presets&lt;/code&gt;. Note that &lt;a href=&quot;../config-files/index&quot;&gt;config files&lt;/a&gt; will also be loaded and the programmatic config will be merged over top of the file config options.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; 및 &lt;code&gt;presets&lt;/code&gt; 포함하여 다른 모든 &lt;a href=&quot;../options/index&quot;&gt;옵션&lt;/a&gt; 도 전달할 수 있습니다 . 참고 &lt;a href=&quot;../config-files/index&quot;&gt;설정 파일&lt;/a&gt; 도로드되고 프로그램 설정은 파일 설정 옵션의 맨 위에 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="b8e6fc8a2b25deb28c06caa83cfbac4a425be594" translate="yes" xml:space="preserve">
          <source>You can pass in all other &lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;options&lt;/a&gt; as well, including &lt;code&gt;plugins&lt;/code&gt; and &lt;code&gt;presets&lt;/code&gt;. But note that the closest &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;/a&gt; to each file still applies, and takes precedence over any options you pass in here.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; 및 &lt;code&gt;presets&lt;/code&gt; 포함한 다른 모든 &lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;옵션&lt;/a&gt; 도 전달할 수 있습니다 . 그러나 각 파일에 가장 가까운 &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt; &lt;code&gt;.babelrc&lt;/code&gt; &lt;/a&gt; 는 여전히 적용되며 여기에 전달하는 옵션보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="e78aa89bf9dc0db976e3b2a59b02b897858b614f" translate="yes" xml:space="preserve">
          <source>You can pass these options from the Babel CLI like so:</source>
          <target state="translated">Babel CLI에서 이러한 옵션을 다음과 같이 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea56b6e079db7d1fe193c4f4a697748861c904aa" translate="yes" xml:space="preserve">
          <source>You can read &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt;'s documentation for more information about the different entry points.</source>
          <target state="translated">다른 진입 점에 대한 자세한 정보는 &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt; 문서를 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c868de7c851fe59229c85957fb3a328246031a54" translate="yes" xml:space="preserve">
          <source>You can read more about configuring plugin options &lt;a href=&quot;../plugins/index#plugin-options&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../plugins/index#plugin-options&quot;&gt;여기에서&lt;/a&gt; 플러그인 옵션 구성에 대한 자세한 내용을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79460d381618ec60723abbd85636bdc99b8a045c" translate="yes" xml:space="preserve">
          <source>You can read more about configuring preset options &lt;a href=&quot;https://babeljs.io/docs/en/presets#preset-options&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/docs/en/presets#preset-options&quot;&gt;여기에서&lt;/a&gt; 사전 설정 옵션 구성에 대해 자세히 알아볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c22096d21c1a3a725251bd309f5b2081d224bbf1" translate="yes" xml:space="preserve">
          <source>You can read more about configuring preset options &lt;a href=&quot;https://babeljs.io/docs/en/presets#preset-options&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/docs/en/presets#preset-options&quot;&gt;여기에서&lt;/a&gt; 사전 설정 옵션 구성에 대해 자세히 알아볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="958569ce5383c38526196d0b52b3ca98cfd1f00f" translate="yes" xml:space="preserve">
          <source>You can set this environment variable with the following:</source>
          <target state="translated">이 환경 변수는 다음과 같이 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c977719f0c38ed5dff0e5b9d26dc6e444700ad7a" translate="yes" xml:space="preserve">
          <source>You can tell Babel to not place any declarations at the top of your files and instead just point them to a reference contained within the external helpers.</source>
          <target state="translated">파일 상단에 선언을 배치하지 말고 외부 헬퍼에 포함 된 참조를 가리 키도록 Babel에 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81c9e9ce29bfa272886f66054c0806ed443f6b23" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;env&lt;/code&gt; option to set specific options when in a certain environment:</source>
          <target state="translated">특정 환경에있을 때 &lt;code&gt;env&lt;/code&gt; 옵션을 사용하여 특정 옵션을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33156d7e42e588f310dd1227c14270a9853e3dfa" translate="yes" xml:space="preserve">
          <source>You can use two different kinds of placeholders: syntactic placeholders (e.g. &lt;code&gt;%%name%%&lt;/code&gt;) or identifier placeholders (e.g. &lt;code&gt;NAME&lt;/code&gt;). &lt;code&gt;@babel/template&lt;/code&gt; supports both those approaches by default, but they can't be mixed. If you need to be explicit about what syntax you are using, you can use the &lt;a href=&quot;#syntacticplaceholders&quot;&gt;&lt;code&gt;syntacticPlaceholders&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">두 가지 다른 종류의 자리 표시자를 사용할 수 있습니다 : 구문 자리 표시 자 (예 : &lt;code&gt;%%name%%&lt;/code&gt; ) 또는 식별자 자리 표시 자 (예 : &lt;code&gt;NAME&lt;/code&gt; ). &lt;code&gt;@babel/template&lt;/code&gt; 은 기본적으로 두 가지 접근 방식을 모두 지원하지만 혼합 할 수는 없습니다. 사용중인 구문을 명시해야하는 경우 &lt;a href=&quot;#syntacticplaceholders&quot;&gt; &lt;code&gt;syntacticPlaceholders&lt;/code&gt; &lt;/a&gt; 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e89dec20c336f38428ee35c44362b2284cb10316" translate="yes" xml:space="preserve">
          <source>You may also target browsers supporting ES Modules (&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-modules&quot;&gt;https://www.ecma-international.org/ecma-262/6.0/#sec-modules&lt;/a&gt;). When specifying this option, the browsers field will be ignored. You can use this approach in combination with &lt;code&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; to conditionally serve smaller scripts to users (&lt;a href=&quot;https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility&quot;&gt;https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility&lt;/a&gt;).</source>
          <target state="translated">ES 모듈 ( &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-modules&quot;&gt;https://www.ecma-international.org/ecma-262/6.0/#sec-modules&lt;/a&gt; )을 지원하는 브라우저를 대상으로 할 수도 있습니다 . 이 옵션을 지정하면 브라우저 필드가 무시됩니다. 이 접근 방식을 &lt;code&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 와 함께 사용하여 사용자에게 더 작은 스크립트를 조건부로 제공 할 수 있습니다 ( &lt;a href=&quot;https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility&quot;&gt;https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for -역 호환성&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="d470c98b591f2c19f872b12aad9e0a385159703e" translate="yes" xml:space="preserve">
          <source>You may alternatively/selectively include what you need:</source>
          <target state="translated">필요한 것을 대안 적으로 / 선택적으로 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b0cf008f44e60b02f913b18ecb9c3b89d79022" translate="yes" xml:space="preserve">
          <source>You must include the &lt;a href=&quot;babel-polyfill.html/index&quot;&gt;polyfill&lt;/a&gt; separately when using features that require it, like generators.</source>
          <target state="translated">생성기와 같이 &lt;a href=&quot;babel-polyfill.html/index&quot;&gt;폴리 필&lt;/a&gt; 이 필요한 기능을 사용할 때는 폴리 필을 별도로 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="fe68177c6328578e150534bdde1c0dd4b4711197" translate="yes" xml:space="preserve">
          <source>You must include the &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt;polyfill&lt;/a&gt; separately when using features that require it, like generators.</source>
          <target state="translated">생성기와 같이 &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt;폴리 필&lt;/a&gt; 이 필요한 기능을 사용할 때는 폴리 필을 별도로 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="cbdbd548e5a3291bbc9bc89545b9b3b33488fe35" translate="yes" xml:space="preserve">
          <source>You need to import/inject this file before executing your own code (instructions below).</source>
          <target state="translated">자체 코드를 실행하기 전에이 파일을 가져 오거나 주입해야합니다 (아래 지침).</target>
        </trans-unit>
        <trans-unit id="f85ce322453eba3d3797e43c95391cd993356828" translate="yes" xml:space="preserve">
          <source>You need to use either the &lt;a href=&quot;../../usage/polyfill/index&quot;&gt;Babel polyfill&lt;/a&gt; or the &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;regenerator runtime&lt;/a&gt; so that &lt;code&gt;regeneratorRuntime&lt;/code&gt; will be defined.</source>
          <target state="translated">&lt;code&gt;regeneratorRuntime&lt;/code&gt; 이 정의 되도록 &lt;a href=&quot;../../usage/polyfill/index&quot;&gt;Babel 폴리 필&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;재생성 런타임&lt;/a&gt; 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1dbb634ad67c9689efb0feaaa2b7e86c8244ed8c" translate="yes" xml:space="preserve">
          <source>You should be able to use this plugin instead of &lt;code&gt;babel-plugin-flow-strip-types&lt;/code&gt; to preserve the &lt;code&gt;/* @flow */&lt;/code&gt; directive and still use flow.</source>
          <target state="translated">&lt;code&gt;/* @flow */&lt;/code&gt; 지시문 을 보존 하고 여전히 flow를 사용 하기 위해 &lt;code&gt;babel-plugin-flow-strip-types&lt;/code&gt; 대신이 플러그인을 사용할 수 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="d47778d3f6b6b256cd1ec83d1c2865c1ae2aeb1f" translate="yes" xml:space="preserve">
          <source>You should not be using &lt;code&gt;babel-node&lt;/code&gt; in production. It is unnecessarily heavy, with high memory usage due to the cache being stored in memory. You will also always experience a startup performance penalty as the entire app needs to be compiled on the fly.</source>
          <target state="translated">프로덕션 환경에서 &lt;code&gt;babel-node&lt;/code&gt; 를 사용하지 않아야합니다 . 캐시가 메모리에 저장되어 메모리 사용량이 많으므로 불필요하게 무겁습니다. 또한 전체 앱을 즉시 컴파일해야하므로 항상 시작 성능 저하가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b47fcbd9db7c1b0617d6ac3bc5c7a924e33e297b" translate="yes" xml:space="preserve">
          <source>You will need to add some plugins for Babel to do anything (they affect the 2nd stage, transformation).</source>
          <target state="translated">Babel이 플러그인을 추가해야 할 수도 있습니다 (2 단계, 변형에 영향을 미침).</target>
        </trans-unit>
        <trans-unit id="dda8ac25ff1b784b5c8383e3f1c9aff138e82a11" translate="yes" xml:space="preserve">
          <source>You will need to specify &lt;code&gt;--extensions &quot;.ts&quot;&lt;/code&gt; for &lt;code&gt;@babel/cli&lt;/code&gt; &amp;amp; &lt;code&gt;@babel/node&lt;/code&gt; cli's to handle &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;.ts&lt;/code&gt; 파일 을 처리하려면 &lt;code&gt;@babel/cli&lt;/code&gt; 및 &lt;code&gt;@babel/node&lt;/code&gt; cli에 대해 &lt;code&gt;--extensions &quot;.ts&quot;&lt;/code&gt; 를 지정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="a55c4e9a92ae5b2bc8089c6ae0715b2f62d9dc1b" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;.babelrc&lt;/code&gt;:</source>
          <target state="translated">귀하의 &lt;code&gt;.babelrc&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="85848d3abe9ea57bf6e58830e7171193e0ec8a3e" translate="yes" xml:space="preserve">
          <source>[Try it Out in the REPL](&lt;a href=&quot;https://babeljs.io/repl/#?babili=false&amp;amp;evaluate=true&amp;amp;lineWrap=false&amp;amp;presets=stage-3&amp;amp;code=async%20function*%20genAnswers()%20%7B%0A%20%20var%20stream%20%3D%20%5B%20Promise.resolve(4)%2C%20Promise.resolve(9)%2C%20Promise.resolve(12)%20%5D%3B%0A%20%20var%20total%20%3D%200%3B%0A%20%20for%20await%20(let%20val%20of%20stream)%20%7B%0A%20%20%20%20total%20%2B%3D%20await%20val%3B%0A%20%20%20%20yield%20total%3B%0A%20%20%7D%0A%7D%0A%0Afunction%20forEach(ai%2C%20fn)%20%7B%0A%20%20return%20ai.next().then(function%20(r)%20%7B%0A%20%20%20%20if%20(!r.done)%20%7B%0A%20%20%20%20%20%20fn(r)%3B%0A%20%20%20%20%20%20return%20forEach(ai%2C%20fn)%3B%0A%20%20%20%20%7D%0A%20%20%7D)%3B%0A%7D%0A%0Avar%20output%20%3D%200%3B%0AforEach(genAnswers()%2C%20function(val)%20%7B%20output%20%2B%3D%20val.value%20%7D)%0A.then(function%20()%20%7B%0A%20%20console.log(output)%3B%20%2F%2F%2042%0A%7D)%3B&amp;amp;experimental=true&amp;amp;loose=false&amp;amp;spec=false&amp;amp;playground=true&amp;amp;stage=0&quot;&gt;https://babeljs.io/repl/#?babili=false&amp;amp;evaluate=true&amp;amp;lineWrap=false&amp;amp;presets=stage-3&amp;amp;code=async%20function*%20genAnswers()%20%7B%0A%20%20var%20stream%20%3D%20%5B%20Promise.resolve(4)%2C%20Promise.resolve(9)%2C%20Promise.resolve(12)%20%5D%3B%0A%20%20var%20total%20%3D%200%3B%0A%20%20for%20await%20(let%20val%20of%20stream)%20%7B%0A%20%20%20%20total%20%2B%3D%20await%20val%3B%0A%20%20%20%20yield%20total%3B%0A%20%20%7D%0A%7D%0A%0Afunction%20forEach(ai%2C%20fn)%20%7B%0A%20%20return%20ai.next().then(function%20(r)%20%7B%0A%20%20%20%20if%20(!r.done)%20%7B%0A%20%20%20%20%20%20fn(r)%3B%0A%20%20%20%20%20%20return%20forEach(ai%2C%20fn)%3B%0A%20%20%20%20%7D%0A%20%20%7D)%3B%0A%7D%0A%0Avar%20output%20%3D%200%3B%0AforEach(genAnswers()%2C%20function(val)%20%7B%20output%20%2B%3D%20val.value%20%7D)%0A.then(function%20()%20%7B%0A%20%20console.log(output)%3B%20%2F%2F%2042%0A%7D)%3B&amp;amp;experimental=true&amp;amp;loose=false&amp;amp;spec=false&amp;amp;playground=true&amp;amp;stage=0&lt;/a&gt;)</source>
          <target state="translated">[REPL에서 사용해보기] (&lt;a href=&quot;https://babeljs.io/repl/#?babili=false&amp;amp;evaluate=true&amp;amp;lineWrap=false&amp;amp;presets=stage-3&amp;amp;code=async%20function*%20genAnswers()%20%7B%0A%20%20var%20stream%20%3D%20%5B%20Promise.resolve(4)%2C%20Promise.resolve(9)%2C%20Promise.resolve(12)%20%5D%3B%0A%20%20var%20total%20%3D%200%3B%0A%20%20for%20await%20(let%20val%20of%20stream)%20%7B%0A%20%20%20%20total%20%2B%3D%20await%20val%3B%0A%20%20%20%20yield%20total%3B%0A%20%20%7D%0A%7D%0A%0Afunction%20forEach(ai%2C%20fn)%20%7B%0A%20%20return%20ai.next().then(function%20(r)%20%7B%0A%20%20%20%20if%20(!r.done)%20%7B%0A%20%20%20%20%20%20fn(r)%3B%0A%20%20%20%20%20%20return%20forEach(ai%2C%20fn)%3B%0A%20%20%20%20%7D%0A%20%20%7D)%3B%0A%7D%0A%0Avar%20output%20%3D%200%3B%0AforEach(genAnswers()%2C%20function(val)%20%7B%20output%20%2B%3D%20val.value%20%7D)%0A.then(function%20()%20%7B%0A%20%20console.log(output)%3B%20%2F%2F%2042%0A%7D)%3B&amp;amp;experimental=true&amp;amp;loose=false&amp;amp;spec=false&amp;amp;playground=true&amp;amp;stage=0&quot;&gt;https://babeljs.io/repl/#?babili=false&amp;amp;evaluate=true&amp;amp;lineWrap=false&amp;amp;presets=stage-3&amp;amp;code=async%20function*%20genAnswers()%20%7B%0A%20%20var%20stream%20%3D%20 % 5B % 20Promise.resolve (4) % 2C % 20Promise.resolve (9) % 2C % 20Promise.resolve (12) % 20 % 5D % 3B % 0A % 20 % 20var % 20total % 20 % 3D % 200 % 3B % 0A % 20 % 20for % 20await % 20 (let % 20val % 20of % 20stream) % 20 % 7B % 0A % 20 % 20 % 20 % 20total % 20 % 2B % 3D % 20await % 20val % 3B % 0A % 20 % 20 % 20 % 20yield % 20total % 3B % 0A % 20 % 20 % 7D % 0A % 7D % 0A % 0Afunction % 20forEach (ai % 2C % 20fn) % 20 % 7B % 0A % 20 % 20return % 20ai.next (). then (function % 20 (r) % 20 % 7B % 0A % 20 % 20 % 20 % 20if % 20 (! r.done) % 20 % 7B % 0A % 20 % 20 % 20 % 20 % 20 % 20fn (r ) % 3B % 0A % 20 % 20 % 20 % 20 % 20 % 20return % 20forEach (ai % 2C % 20fn) % 3B % 0A % 20 % 20 % 20 % 20 % 7D % 0A % 20 % 20 % 7D) % 3B % 0A % 7D % 0A % 0Avar % 20output % 20 % 3D % 200 % 3B % 0AforEach (genAnswers () % 2C % 20function (val) % 20 % 7B % 20output % 20 % 2B % 3D % 20val.value % 20 % 7D) % 0A.then (function % 20 () % 20 % 7B % 0A % 20 % 20console.log (출력) % 3B % 20 % 2F % 2F % 2042 % 0A % 7D) % 3B &amp;amp; experimental = true &amp;amp; loose = false &amp;amp; spec = false &amp;amp; playground = true &amp;amp; stage = 0&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="00ca148658dc48e94913d34208f28e71e40ef326" translate="yes" xml:space="preserve">
          <source>[facebook/react#3226] Optimizing Compiler: Reuse Constant Value Types like ReactElement</source>
          <target state="translated">[facebook / react # 3226] 컴파일러 최적화 : ReactElement와 같은 상수 값 유형 재사용</target>
        </trans-unit>
        <trans-unit id="f823e65e5e088a8e6f6d4e87540d9bfafb0ddbcd" translate="yes" xml:space="preserve">
          <source>[facebook/react#3228] Optimizing Compiler: Inline React Elements</source>
          <target state="translated">[facebook / react # 3228] 컴파일러 최적화 : 인라인 반응 요소</target>
        </trans-unit>
        <trans-unit id="1958efef84c9770fd40537d6f7327d077c301c0b" translate="yes" xml:space="preserve">
          <source>a.js</source>
          <target state="translated">a.js</target>
        </trans-unit>
        <trans-unit id="b859c02e14c4d66cce479ee37cb2812926a22b30" translate="yes" xml:space="preserve">
          <source>allow the exported global name to be overridden via the &lt;code&gt;globals&lt;/code&gt; map. Any override must again be a valid identifier or valid member expression.</source>
          <target state="translated">&lt;code&gt;globals&lt;/code&gt; 맵을 통해 내 보낸 글로벌 이름을 재정의 할 수 있습니다. 재정의는 다시 유효한 식별자 또는 유효한 멤버 식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="c411f04d5c37acd73f129a9af9384a6b76b0894b" translate="yes" xml:space="preserve">
          <source>always include arrow functions, explicitly exclude generators</source>
          <target state="translated">항상 화살표 기능을 포함하고 명시 적으로 생성기를 제외</target>
        </trans-unit>
        <trans-unit id="a9b91ebc25205b3604d85904482bdfc50ba47f64" translate="yes" xml:space="preserve">
          <source>always use the full import string instead of the basename when generating the global names</source>
          <target state="translated">전역 이름을 생성 할 때는 항상 기본 이름 대신 전체 가져 오기 문자열을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="988e3fbf53cf20d5eb5bb8c3d1644e1cef4554d9" translate="yes" xml:space="preserve">
          <source>and &lt;a href=&quot;../babel-runtime/index&quot;&gt;&lt;code&gt;@babel/runtime&lt;/code&gt;&lt;/a&gt; as a production dependency (since it's for the &quot;runtime&quot;).</source>
          <target state="translated">및 &lt;a href=&quot;../babel-runtime/index&quot;&gt; &lt;code&gt;@babel/runtime&lt;/code&gt; &lt;/a&gt; 을 프로덕션 종속성으로 사용합니다 ( &quot;런타임&quot;을위한 것이므로).</target>
        </trans-unit>
        <trans-unit id="f08d145ec5123014ec279e72ed61a11bb0ece95a" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;babel-runtime&lt;/code&gt; as a production dependency (with &lt;code&gt;--save&lt;/code&gt;).</source>
          <target state="translated">및 &lt;code&gt;babel-runtime&lt;/code&gt; (함께 생산 의존의 &lt;code&gt;--save&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c039f409ce5d5b12c279c148a2c53fb6c93df6af" translate="yes" xml:space="preserve">
          <source>and add &lt;code&gt;@babel/preset-react&lt;/code&gt; to your Babel configuration.</source>
          <target state="translated">및 추가 &lt;code&gt;@babel/preset-react&lt;/code&gt; 당신의 바벨 구성에.</target>
        </trans-unit>
        <trans-unit id="20e7fb139ef4b351001833c1bfecf22d44ac90f8" translate="yes" xml:space="preserve">
          <source>and with that saved somewhere, you'd then use that file in the place of &lt;code&gt;babel-jest&lt;/code&gt; in your Jest options via the &lt;a href=&quot;https://jestjs.io/docs/en/configuration#transform-object-string-string&quot;&gt;transform option&lt;/a&gt;:</source>
          <target state="translated">어딘가에 저장 하면 &lt;a href=&quot;https://jestjs.io/docs/en/configuration#transform-object-string-string&quot;&gt;transform 옵션&lt;/a&gt; 을 통해 Jest 옵션 의 &lt;code&gt;babel-jest&lt;/code&gt; 대신 해당 파일을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="c49344ca2044e139c9c524f4d6e16c1714f041ba" translate="yes" xml:space="preserve">
          <source>anyTypeAnnotation</source>
          <target state="translated">anyTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="be9c91c53652dfe37907dcf6ca1f869be0e1f8df" translate="yes" xml:space="preserve">
          <source>argumentPlaceholder</source>
          <target state="translated">argumentPlaceholder</target>
        </trans-unit>
        <trans-unit id="c8e9d3e0c6efc85c0ae397f44dfa481f29e4b877" translate="yes" xml:space="preserve">
          <source>arrayExpression</source>
          <target state="translated">arrayExpression</target>
        </trans-unit>
        <trans-unit id="bd21952389fa0a362c7ece326dc0f5dc077524e8" translate="yes" xml:space="preserve">
          <source>arrayPattern</source>
          <target state="translated">arrayPattern</target>
        </trans-unit>
        <trans-unit id="3a2c98b0713311b6563e732fe9ae0efae80e2e90" translate="yes" xml:space="preserve">
          <source>arrayTypeAnnotation</source>
          <target state="translated">arrayTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="c33ab008065c27577be95f57d6237b6719a22666" translate="yes" xml:space="preserve">
          <source>arrow-functions</source>
          <target state="translated">arrow-functions</target>
        </trans-unit>
        <trans-unit id="c39dc4f12ff4934139794389eb44df5819df7ff2" translate="yes" xml:space="preserve">
          <source>arrowFunctionExpression</source>
          <target state="translated">arrowFunctionExpression</target>
        </trans-unit>
        <trans-unit id="a5266761e75e3b7f5e614de997e940d854dca064" translate="yes" xml:space="preserve">
          <source>assignmentExpression</source>
          <target state="translated">assignmentExpression</target>
        </trans-unit>
        <trans-unit id="7c41403fd6261bde0509c2d789daf44c3e7887bd" translate="yes" xml:space="preserve">
          <source>assignmentPattern</source>
          <target state="translated">assignmentPattern</target>
        </trans-unit>
        <trans-unit id="b7e04b33fdd186ab6bd2deace04ea6b551b9bd4a" translate="yes" xml:space="preserve">
          <source>async</source>
          <target state="translated">async</target>
        </trans-unit>
        <trans-unit id="4d6be6d5de817d604556a34f11d0dc27c3fbdb08" translate="yes" xml:space="preserve">
          <source>async generator transform</source>
          <target state="translated">비동기 생성기 변환</target>
        </trans-unit>
        <trans-unit id="c79e584ec7e1c9e37ae2d1e2ba302a45d653e810" translate="yes" xml:space="preserve">
          <source>async-generator-functions</source>
          <target state="translated">async-generator-functions</target>
        </trans-unit>
        <trans-unit id="4ca996194182aaa53f9a0b2e4d2ad8a3188d9dbd" translate="yes" xml:space="preserve">
          <source>async-generators</source>
          <target state="translated">async-generators</target>
        </trans-unit>
        <trans-unit id="97a7ae8be104c21ab6284c944e3a363aca958a44" translate="yes" xml:space="preserve">
          <source>async-to-generator</source>
          <target state="translated">async-to-generator</target>
        </trans-unit>
        <trans-unit id="319ea96708b438928141ff0e25a316c27675f586" translate="yes" xml:space="preserve">
          <source>async-to-module-method</source>
          <target state="translated">async-to-module-method</target>
        </trans-unit>
        <trans-unit id="76b6d04ce9043b9d560c2e27bdd14784b8cb08d9" translate="yes" xml:space="preserve">
          <source>asyncGenerators</source>
          <target state="translated">asyncGenerators</target>
        </trans-unit>
        <trans-unit id="d87a47f55f3ebee5ee6cfd1e38e5e96535d86cdb" translate="yes" xml:space="preserve">
          <source>auxiliaryCommentAfter</source>
          <target state="translated">auxiliaryCommentAfter</target>
        </trans-unit>
        <trans-unit id="bd7566c94fd2e9cb6367005bbf707489f9b122b5" translate="yes" xml:space="preserve">
          <source>auxiliaryCommentBefore</source>
          <target state="translated">auxiliaryCommentBefore</target>
        </trans-unit>
        <trans-unit id="2d4404ecb0c2ad1d43b5d2725d3340918907eb63" translate="yes" xml:space="preserve">
          <source>awaitExpression</source>
          <target state="translated">awaitExpression</target>
        </trans-unit>
        <trans-unit id="165bd06bafa5e800a3491dffe701e38f4bf879a8" translate="yes" xml:space="preserve">
          <source>b.js</source>
          <target state="translated">b.js</target>
        </trans-unit>
        <trans-unit id="cad160f3d4cd7c33896f42a479eeaa1b5bedc5fb" translate="yes" xml:space="preserve">
          <source>babel</source>
          <target state="translated">babel</target>
        </trans-unit>
        <trans-unit id="8699053435fb5b35e824818ac53f43eae4a2dcbb" translate="yes" xml:space="preserve">
          <source>babel comes with a second CLI which works exactly the same as Node.js&amp;rsquo;s CLI, only it will compile ES6 code before running it.</source>
          <target state="translated">babel은 Node.js의 CLI와 똑같이 작동하는 두 번째 CLI와 함께 제공되며 ES6 코드를 실행하기 전에 컴파일 만합니다.</target>
        </trans-unit>
        <trans-unit id="ada5216478d316f122cbb620864f482d0cb38719" translate="yes" xml:space="preserve">
          <source>babel-node</source>
          <target state="translated">babel-node</target>
        </trans-unit>
        <trans-unit id="6dcb770e83cec6bda9c1ab34066a94dfda4e13de" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-builtins</source>
          <target state="translated">babel-plugin-minify-builtins</target>
        </trans-unit>
        <trans-unit id="1cfdc081472d8a3b785a670e81f9c132e1c128c8" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-constant-folding</source>
          <target state="translated">babel-plugin-minify-constant-folding</target>
        </trans-unit>
        <trans-unit id="1e478e407f2c1b024e3168ae0c7d534a2d4299dc" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-dead-code-elimination</source>
          <target state="translated">babel-plugin-minify-dead-code-elimination</target>
        </trans-unit>
        <trans-unit id="67f77580c1fb0669a4546148d651dfb17abdd28e" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-flip-comparisons</source>
          <target state="translated">babel-plugin-minify-flip-comparisons</target>
        </trans-unit>
        <trans-unit id="711eb956a4dc5374e1f414e5fd1090499fcade15" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-guarded-expressions</source>
          <target state="translated">babel-plugin-minify-guarded-expressions</target>
        </trans-unit>
        <trans-unit id="c159b9ad0b0da6d78eae8b22c7b8d573fd3c0b45" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-infinity</source>
          <target state="translated">babel-plugin-minify-infinity</target>
        </trans-unit>
        <trans-unit id="d29d47a47f836d5388b73ac351ef5af567d792db" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-mangle-names</source>
          <target state="translated">babel-plugin-minify-mangle-names</target>
        </trans-unit>
        <trans-unit id="9a6b861309beeaa236005c885c0c62d547b20472" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-numeric-literals</source>
          <target state="translated">babel-plugin-minify-numeric-literals</target>
        </trans-unit>
        <trans-unit id="ed43c52f66e36ee7cb4be83d0000eccd2bef8a06" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-replace</source>
          <target state="translated">babel-plugin-minify-replace</target>
        </trans-unit>
        <trans-unit id="1695c0f586472667437a18fc3e7c883f7015d2d4" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-simplify</source>
          <target state="translated">babel-plugin-minify-simplify</target>
        </trans-unit>
        <trans-unit id="15d12d6dc65a04342472d1da676720f3439c7c63" translate="yes" xml:space="preserve">
          <source>babel-plugin-minify-type-constructors</source>
          <target state="translated">babel-plugin-minify-type-constructors</target>
        </trans-unit>
        <trans-unit id="0062cc31384824ad59df1c76a066658571127483" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-inline-environment-variables</source>
          <target state="translated">babel-plugin-transform-inline-environment-variables</target>
        </trans-unit>
        <trans-unit id="7a9b23af2566aa56f325ab90f2593e85484fbaf5" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-merge-sibling-variables</source>
          <target state="translated">babel-plugin-transform-merge-sibling-variables</target>
        </trans-unit>
        <trans-unit id="758b8cdc1ddfac6204894004c60254a66fb89dc5" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-minify-booleans</source>
          <target state="translated">babel-plugin-transform-minify-booleans</target>
        </trans-unit>
        <trans-unit id="179a54bcda0af9ca3fd3d6319a39d647b6415328" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-node-env-inline</source>
          <target state="translated">babel-plugin-transform-node-env-inline</target>
        </trans-unit>
        <trans-unit id="3117a6203a5049c61b033c60f0053cb0bc5e148f" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-regexp-constructors</source>
          <target state="translated">babel-plugin-transform-regexp-constructors</target>
        </trans-unit>
        <trans-unit id="92543052874956ba547428d6b87a847cc2e2632d" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-remove-console</source>
          <target state="translated">babel-plugin-transform-remove-console</target>
        </trans-unit>
        <trans-unit id="edad2e11b651c5cd96e2058456fbfb2501197659" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-remove-debugger</source>
          <target state="translated">babel-plugin-transform-remove-debugger</target>
        </trans-unit>
        <trans-unit id="33c2c1fd5bdf4fbfbad60dfff13c8556b3215178" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-remove-undefined</source>
          <target state="translated">babel-plugin-transform-remove-undefined</target>
        </trans-unit>
        <trans-unit id="20df472393aff0b85621af95646190ed55d996ed" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-simplify-comparison-operators</source>
          <target state="translated">babel-plugin-transform-simplify-comparison-operators</target>
        </trans-unit>
        <trans-unit id="e26722fdb47f9191770925b3503526f697e43e91" translate="yes" xml:space="preserve">
          <source>babel-plugin-transform-undefined-to-void</source>
          <target state="translated">babel-plugin-transform-undefined-to-void</target>
        </trans-unit>
        <trans-unit id="cb5002ba4f3a9b049052eaa5a96235378d636a00" translate="yes" xml:space="preserve">
          <source>babel-preset-minify</source>
          <target state="translated">babel-preset-minify</target>
        </trans-unit>
        <trans-unit id="586cf48f6baecce6b72405e1fd706e71d100e08c" translate="yes" xml:space="preserve">
          <source>babel-preset-modern-browsers</source>
          <target state="translated">babel-preset-modern-browsers</target>
        </trans-unit>
        <trans-unit id="82a81278c2e0259a46c0bc16004216ca299c4b54" translate="yes" xml:space="preserve">
          <source>babel.DEFAULT_EXTENSIONS: ReadonlyArray</source>
          <target state="translated">babel.DEFAULT_EXTENSIONS : ReadonlyArray</target>
        </trans-unit>
        <trans-unit id="8f248f0438bba0b6ace3ce519651889714a5c9af" translate="yes" xml:space="preserve">
          <source>babel.createConfigItem(value: string | {} | Function | [string | {} | Function, {} | void], { dirname?: string, type?: &quot;preset&quot; | &quot;plugin&quot; }): ConfigItem</source>
          <target state="translated">babel.createConfigItem (value : string | {} | Function | [string | {} | Function, {} | void], {dirname ?: string, type ?: &quot;preset&quot;| &quot;plugin&quot;}) : ConfigItem</target>
        </trans-unit>
        <trans-unit id="a16074c9535be3fd196789c845bbe3dc9e4f9fbe" translate="yes" xml:space="preserve">
          <source>babel.loadOptions(&lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.loadOptions ( &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object)</target>
        </trans-unit>
        <trans-unit id="22a162355b13bcf444b0e3bb8356a37bb5d9eca8" translate="yes" xml:space="preserve">
          <source>babel.loadPartialConfig(&lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object): PartialConfig</source>
          <target state="translated">babel.loadPartialConfig ( &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object) : PartialConfig</target>
        </trans-unit>
        <trans-unit id="0cb00565be6a3e2e53eec0f01bca43fa1e418aa5" translate="yes" xml:space="preserve">
          <source>babel.parse(code: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object, callback: Function)</source>
          <target state="translated">babel.parse (코드 : 문자열, &lt;a href=&quot;#options&quot;&gt;옵션?&lt;/a&gt; : 객체, 콜백 : 함수)</target>
        </trans-unit>
        <trans-unit id="17a13d22e395ad8ab19b07e1dd54dd6585f8b3aa" translate="yes" xml:space="preserve">
          <source>babel.parseAsync(code: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.parseAsync (code : string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object)</target>
        </trans-unit>
        <trans-unit id="988d7a6a1a2a35196c6d4b58ccb589b9b49771ff" translate="yes" xml:space="preserve">
          <source>babel.parseSync(code: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.parseSync (코드 : 문자열, &lt;a href=&quot;#options&quot;&gt;옵션?&lt;/a&gt; : 객체)</target>
        </trans-unit>
        <trans-unit id="3e33467403644b87e797bc6f5d7930e5e1be46f0" translate="yes" xml:space="preserve">
          <source>babel.transform()</source>
          <target state="translated">babel.transform()</target>
        </trans-unit>
        <trans-unit id="c3d62788169882a584ef80a79e4ff665740549c6" translate="yes" xml:space="preserve">
          <source>babel.transform(code: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object, callback: Function)</source>
          <target state="translated">babel.transform (code : string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object, callback : Function)</target>
        </trans-unit>
        <trans-unit id="7fbd09c4bb61a9def541fe4f5c4b5a18037ee08c" translate="yes" xml:space="preserve">
          <source>babel.transform(code: string, options?: Object)</source>
          <target state="translated">babel.transform (코드 : 문자열, 옵션? : 객체)</target>
        </trans-unit>
        <trans-unit id="aaf159ee7d0eef4c9a5271d8b4d6b07ce48957ef" translate="yes" xml:space="preserve">
          <source>babel.transformAsync(code: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.transformAsync (code : string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object)</target>
        </trans-unit>
        <trans-unit id="46b938c286c8d8889e3bb98d6cf11ba5d86ec308" translate="yes" xml:space="preserve">
          <source>babel.transformFile()</source>
          <target state="translated">babel.transformFile()</target>
        </trans-unit>
        <trans-unit id="81a9dc961d0d3b21980439a5d87aa96b58119f27" translate="yes" xml:space="preserve">
          <source>babel.transformFile(filename: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object, callback: Function)</source>
          <target state="translated">babel.transformFile (filename : string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object, callback : Function)</target>
        </trans-unit>
        <trans-unit id="8f60fd35d1287c726c464cbcb9370e6a9ffbbac5" translate="yes" xml:space="preserve">
          <source>babel.transformFile(filename: string, options?: Object, callback: Function)</source>
          <target state="translated">babel.transformFile (파일 이름 : 문자열, 옵션? : 개체, 콜백 : 함수)</target>
        </trans-unit>
        <trans-unit id="3de50fb535e367cc37c979487af1da0e7ea18506" translate="yes" xml:space="preserve">
          <source>babel.transformFileAsync(filename: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.transformFileAsync (filename : string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object)</target>
        </trans-unit>
        <trans-unit id="82628334f2e7c5b2a1d5b7c333abf1418f216232" translate="yes" xml:space="preserve">
          <source>babel.transformFileSync()</source>
          <target state="translated">babel.transformFileSync()</target>
        </trans-unit>
        <trans-unit id="a4dc5533e4f1b74efafde9eff54124df9b6b1b7b" translate="yes" xml:space="preserve">
          <source>babel.transformFileSync(filename: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.transformFileSync (파일 이름 : 문자열, &lt;a href=&quot;#options&quot;&gt;옵션?&lt;/a&gt; : 개체)</target>
        </trans-unit>
        <trans-unit id="f41f3f7dadafc8cc778a32a0bd56b0609d8ec964" translate="yes" xml:space="preserve">
          <source>babel.transformFileSync(filename: string, options?: Object)</source>
          <target state="translated">babel.transformFileSync (파일 이름 : 문자열, 옵션? : 개체)</target>
        </trans-unit>
        <trans-unit id="4077b085b97a9818973c5b371a2504eb6cc5b292" translate="yes" xml:space="preserve">
          <source>babel.transformFromAst()</source>
          <target state="translated">babel.transformFromAst()</target>
        </trans-unit>
        <trans-unit id="7eeceefd1b7860de9e3cb5d11d176c69268f7c0f" translate="yes" xml:space="preserve">
          <source>babel.transformFromAst(ast: Object, code?: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object, callback: Function): FileNode | null</source>
          <target state="translated">babel.transformFromAst (ast : 객체, 코드? : 문자열, &lt;a href=&quot;#options&quot;&gt;옵션?&lt;/a&gt; : 객체, 콜백 : 함수) : FileNode | 없는</target>
        </trans-unit>
        <trans-unit id="0ce19ae09881054af194e3bf7438d0d95f635c4c" translate="yes" xml:space="preserve">
          <source>babel.transformFromAst(ast: Object, code?: string, options?: Object)</source>
          <target state="translated">babel.transformFromAst (ast : Object, code ?: 문자열, 옵션? : Object)</target>
        </trans-unit>
        <trans-unit id="6a1064ebdf7f1c1e7b66a137770774485eac11cd" translate="yes" xml:space="preserve">
          <source>babel.transformFromAstAsync(ast: Object, code?: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.transformFromAstAsync (ast : Object, code ?: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object)</target>
        </trans-unit>
        <trans-unit id="9246b85f48a7d6e58e6b7f9c0215b49e2221c085" translate="yes" xml:space="preserve">
          <source>babel.transformFromAstSync(ast: Object, code?: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.transformFromAstSync (ast : Object, code ?: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt; : Object)</target>
        </trans-unit>
        <trans-unit id="bd7c98ff960fdf476340f0a7b31766c61be6551b" translate="yes" xml:space="preserve">
          <source>babel.transformSync(code: string, &lt;a href=&quot;#options&quot;&gt;options?&lt;/a&gt;: Object)</source>
          <target state="translated">babel.transformSync (코드 : 문자열, &lt;a href=&quot;#options&quot;&gt;옵션?&lt;/a&gt; : 객체)</target>
        </trans-unit>
        <trans-unit id="8c936aebb597679cca9d59d79ddb8d915354142a" translate="yes" xml:space="preserve">
          <source>because again the transform is only using the basename of the import.</source>
          <target state="translated">다시 변환은 가져 오기의 기본 이름 만 사용하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="f4b95c5e12fb2f0218b651f2b5822fa074a6bac8" translate="yes" xml:space="preserve">
          <source>because each instance has been given a unique name and this a unique identity.</source>
          <target state="translated">각 인스턴스에는 고유 한 이름이 지정되었고 이것은 고유 한 ID이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="c44e764b3c544c4bf3fb6b2e0856c7a89c0d8ccc" translate="yes" xml:space="preserve">
          <source>bigIntLiteral</source>
          <target state="translated">bigIntLiteral</target>
        </trans-unit>
        <trans-unit id="4b81e7a1297622fb04be8b4c124bd347a06ef025" translate="yes" xml:space="preserve">
          <source>binaryExpression</source>
          <target state="translated">binaryExpression</target>
        </trans-unit>
        <trans-unit id="5a307c1a3cd6970d690906d3549dc16aaf810b13" translate="yes" xml:space="preserve">
          <source>bindExpression</source>
          <target state="translated">bindExpression</target>
        </trans-unit>
        <trans-unit id="c57f802d45cde96a3359a1ffaa659d9067f5120f" translate="yes" xml:space="preserve">
          <source>block-scoped-functions</source>
          <target state="translated">block-scoped-functions</target>
        </trans-unit>
        <trans-unit id="c2a8e8667edc1a4923daee63d9d18620c3d4c6c6" translate="yes" xml:space="preserve">
          <source>block-scoping</source>
          <target state="translated">block-scoping</target>
        </trans-unit>
        <trans-unit id="fb1e13a7f3c6dd71000b5645307c46c68955c32b" translate="yes" xml:space="preserve">
          <source>blockStatement</source>
          <target state="translated">blockStatement</target>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="a2da6d7e65534c58c0e81fa81002e7c63fabc7d4" translate="yes" xml:space="preserve">
          <source>boolean or &lt;code&gt;'auto'&lt;/code&gt;</source>
          <target state="translated">부울 또는 &lt;code&gt;'auto'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4f18be30bcb738f22c2db0f39a72b3f33ef77d1" translate="yes" xml:space="preserve">
          <source>booleanLiteral</source>
          <target state="translated">booleanLiteral</target>
        </trans-unit>
        <trans-unit id="66eb2c401c18a6978a2625712f871b99f1ffedd2" translate="yes" xml:space="preserve">
          <source>booleanLiteralTypeAnnotation</source>
          <target state="translated">booleanLiteralTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="db88926b77ad4dcb0e1f7bbfb4096e1407888b6b" translate="yes" xml:space="preserve">
          <source>booleanTypeAnnotation</source>
          <target state="translated">booleanTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="80a25bf9e5d787c109376c0b79d204a87d3b2159" translate="yes" xml:space="preserve">
          <source>booleans</source>
          <target state="translated">booleans</target>
        </trans-unit>
        <trans-unit id="099e8a7f93f38518b0fd864a4d866c5c09a18ce6" translate="yes" xml:space="preserve">
          <source>breakStatement</source>
          <target state="translated">breakStatement</target>
        </trans-unit>
        <trans-unit id="2686f0c88f77458d330399c5b352235de0dc2bd3" translate="yes" xml:space="preserve">
          <source>builtIns</source>
          <target state="translated">builtIns</target>
        </trans-unit>
        <trans-unit id="0425602a818409c2ab4120c3a91030bfbc9842c1" translate="yes" xml:space="preserve">
          <source>callExpression</source>
          <target state="translated">callExpression</target>
        </trans-unit>
        <trans-unit id="af3f9bf534ffc651023e209bd92c9526a0ffc124" translate="yes" xml:space="preserve">
          <source>catchClause</source>
          <target state="translated">catchClause</target>
        </trans-unit>
        <trans-unit id="9ce28666816687f0fe7d5c659e66ec597a6768b6" translate="yes" xml:space="preserve">
          <source>check-es2015-constants</source>
          <target state="translated">check-es2015-constants</target>
        </trans-unit>
        <trans-unit id="2e187c217b0cf3be856cf89ff6d23d25bbea5242" translate="yes" xml:space="preserve">
          <source>class properties</source>
          <target state="translated">클래스 속성</target>
        </trans-unit>
        <trans-unit id="535165be142db28b6ff5da0ee05538bde599b452" translate="yes" xml:space="preserve">
          <source>class-constructor-call</source>
          <target state="translated">class-constructor-call</target>
        </trans-unit>
        <trans-unit id="682d853d146d7fa138501ffb16b2d9695464c287" translate="yes" xml:space="preserve">
          <source>class-properties</source>
          <target state="translated">class-properties</target>
        </trans-unit>
        <trans-unit id="9cb5d5d69a8c06fb4592acfef7af519b1e00fb68" translate="yes" xml:space="preserve">
          <source>class-static-block</source>
          <target state="translated">class-static-block</target>
        </trans-unit>
        <trans-unit id="b80fe2c01638105674f1999ed42154f78bdde803" translate="yes" xml:space="preserve">
          <source>classBody</source>
          <target state="translated">classBody</target>
        </trans-unit>
        <trans-unit id="f5787b06aff55a53f5079abcee3524707dfb4092" translate="yes" xml:space="preserve">
          <source>classDeclaration</source>
          <target state="translated">classDeclaration</target>
        </trans-unit>
        <trans-unit id="f45b7b3a042594a3aa1133e446db4a518a492177" translate="yes" xml:space="preserve">
          <source>classExpression</source>
          <target state="translated">classExpression</target>
        </trans-unit>
        <trans-unit id="3414ecfd9cf247d997e5824a250c0eeb31d6a370" translate="yes" xml:space="preserve">
          <source>classImplements</source>
          <target state="translated">classImplements</target>
        </trans-unit>
        <trans-unit id="a28abbe15406faddf7659ca2fccf1451acc39cbf" translate="yes" xml:space="preserve">
          <source>classMethod</source>
          <target state="translated">classMethod</target>
        </trans-unit>
        <trans-unit id="ed87b46b6857272c8f9ecb3799a53ecce8e4a51d" translate="yes" xml:space="preserve">
          <source>classPrivateProperty</source>
          <target state="translated">classPrivateProperty</target>
        </trans-unit>
        <trans-unit id="50f5c5caab5fe50d5fd29fd4776150439e4a0fef" translate="yes" xml:space="preserve">
          <source>classProperty</source>
          <target state="translated">classProperty</target>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="translated">classes</target>
        </trans-unit>
        <trans-unit id="e6fb06210fafc02fd7479ddbed2d042cc3a5155e" translate="yes" xml:space="preserve">
          <source>code</source>
          <target state="translated">code</target>
        </trans-unit>
        <trans-unit id="5b17a6c606a82dafd93db84a19945afe2d559ed4" translate="yes" xml:space="preserve">
          <source>comments</source>
          <target state="translated">comments</target>
        </trans-unit>
        <trans-unit id="4f44e2cffa8f7b516c9e499285c951d788431a28" translate="yes" xml:space="preserve">
          <source>compact</source>
          <target state="translated">compact</target>
        </trans-unit>
        <trans-unit id="321caebdefb7093994e292da251789106ca077e0" translate="yes" xml:space="preserve">
          <source>compiling the &lt;code&gt;packages/mod/index.js&lt;/code&gt; file will not load &lt;code&gt;packages/mod/.babelrc.json&lt;/code&gt; because this &lt;a href=&quot;#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; is within a sub-package, not the root package.</source>
          <target state="translated">이 &lt;a href=&quot;#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt; 은 루트 패키지가 아닌 하위 패키지 내에 있기 때문에 &lt;code&gt;packages/mod/index.js&lt;/code&gt; 파일을 컴파일하면 packages / mod / &lt;code&gt;packages/mod/.babelrc.json&lt;/code&gt; 이로 드 되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="94eadbed229a3358503a20c959632a64fc11f8c5" translate="yes" xml:space="preserve">
          <source>computed-properties</source>
          <target state="translated">computed-properties</target>
        </trans-unit>
        <trans-unit id="f6059ac26400cd436faf9a8327f3541977f01e9c" translate="yes" xml:space="preserve">
          <source>concise</source>
          <target state="translated">concise</target>
        </trans-unit>
        <trans-unit id="fcb3e608283f105f77b5c06975a119832dcf534a" translate="yes" xml:space="preserve">
          <source>conditionalExpression</source>
          <target state="translated">conditionalExpression</target>
        </trans-unit>
        <trans-unit id="8268515f9ea5a39dfbe0460d481d45f057cc7973" translate="yes" xml:space="preserve">
          <source>consecutiveAdds</source>
          <target state="translated">consecutiveAdds</target>
        </trans-unit>
        <trans-unit id="e338884dd974d37ca743083ec4a7682b0fea5a30" translate="yes" xml:space="preserve">
          <source>continueStatement</source>
          <target state="translated">continueStatement</target>
        </trans-unit>
        <trans-unit id="2cb146e5db8de11d38ff82354cc8272128589d80" translate="yes" xml:space="preserve">
          <source>could be used to enable the &lt;code&gt;compact&lt;/code&gt; option for one specific file that is known to be large and minified, and tell Babel not to bother trying to print the file nicely.</source>
          <target state="translated">크기가 크고 축소 된 것으로 알려진 특정 파일에 대해 &lt;code&gt;compact&lt;/code&gt; 옵션 을 활성화하고 Babel에게 파일을 멋지게 인쇄하려고하지 않도록 지시하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a7133b16f212ebd6e41a0f23f71dff1607a6a11" translate="yes" xml:space="preserve">
          <source>createConfigItem</source>
          <target state="translated">createConfigItem</target>
        </trans-unit>
        <trans-unit id="13a35a4956b3d602cfc8e6c095fd0760e6407fd6" translate="yes" xml:space="preserve">
          <source>deadcode</source>
          <target state="translated">deadcode</target>
        </trans-unit>
        <trans-unit id="a2140086284dca2ca9149b86f9f738149c557e12" translate="yes" xml:space="preserve">
          <source>debuggerStatement</source>
          <target state="translated">debuggerStatement</target>
        </trans-unit>
        <trans-unit id="528e552e3fc7d119e739bd5a2f09e4e5f354e362" translate="yes" xml:space="preserve">
          <source>declareClass</source>
          <target state="translated">declareClass</target>
        </trans-unit>
        <trans-unit id="7d51731126dfe58b3e0c548d4e28da403b0b94f8" translate="yes" xml:space="preserve">
          <source>declareExportAllDeclaration</source>
          <target state="translated">declareExportAllDeclaration</target>
        </trans-unit>
        <trans-unit id="7db1d04e70000ea45d005c6314f2d6fbdd2839dc" translate="yes" xml:space="preserve">
          <source>declareExportDeclaration</source>
          <target state="translated">declareExportDeclaration</target>
        </trans-unit>
        <trans-unit id="86ce8220128a9f6d03b7b42bf2510a65b0ff6f4e" translate="yes" xml:space="preserve">
          <source>declareFunction</source>
          <target state="translated">declareFunction</target>
        </trans-unit>
        <trans-unit id="1d312cf314dc8625323d029d97e218de7bff1fb7" translate="yes" xml:space="preserve">
          <source>declareInterface</source>
          <target state="translated">declareInterface</target>
        </trans-unit>
        <trans-unit id="4e2a5e1b4a06abeff6ff355e5fac7026c3ee239d" translate="yes" xml:space="preserve">
          <source>declareModule</source>
          <target state="translated">declareModule</target>
        </trans-unit>
        <trans-unit id="9ba443960cf517aa0b530052f207888a316802af" translate="yes" xml:space="preserve">
          <source>declareModuleExports</source>
          <target state="translated">declareModuleExports</target>
        </trans-unit>
        <trans-unit id="42e338807ec1965391b9ae185e27ad8e57beecfa" translate="yes" xml:space="preserve">
          <source>declareOpaqueType</source>
          <target state="translated">declareOpaqueType</target>
        </trans-unit>
        <trans-unit id="9beb788b95c56dc23c6202b6244b90ac2e9d7ef4" translate="yes" xml:space="preserve">
          <source>declareTypeAlias</source>
          <target state="translated">declareTypeAlias</target>
        </trans-unit>
        <trans-unit id="184489f488d38a6d6d1c40a24b5ba37839e841e7" translate="yes" xml:space="preserve">
          <source>declareVariable</source>
          <target state="translated">declareVariable</target>
        </trans-unit>
        <trans-unit id="e0c93eb3ad863152beecf2fc6e63daeafa3a842d" translate="yes" xml:space="preserve">
          <source>declaredPredicate</source>
          <target state="translated">declaredPredicate</target>
        </trans-unit>
        <trans-unit id="ee329fb660d413c67e1d067f80ee172e6e8b17ed" translate="yes" xml:space="preserve">
          <source>decorator</source>
          <target state="translated">decorator</target>
        </trans-unit>
        <trans-unit id="fd7fb081046c7d4af0a878e9da15da0ceab884bb" translate="yes" xml:space="preserve">
          <source>decorators</source>
          <target state="translated">decorators</target>
        </trans-unit>
        <trans-unit id="85e94e0d4b026a224213c0d996046519070706ff" translate="yes" xml:space="preserve">
          <source>decoratorsBeforeExport</source>
          <target state="translated">decoratorsBeforeExport</target>
        </trans-unit>
        <trans-unit id="7505d64a54e061b7acd54ccd58b49dc43500b635" translate="yes" xml:space="preserve">
          <source>default</source>
          <target state="translated">default</target>
        </trans-unit>
        <trans-unit id="8c6aa25e6cb9026a984b4aa1baf5206dea83a8c4" translate="yes" xml:space="preserve">
          <source>default value</source>
          <target state="translated">기본값</target>
        </trans-unit>
        <trans-unit id="cb329146a0dd0d566b0628744d67936558741ffa" translate="yes" xml:space="preserve">
          <source>description</source>
          <target state="translated">description</target>
        </trans-unit>
        <trans-unit id="9a5693e54ebd7683088be59203ea23d4e8270124" translate="yes" xml:space="preserve">
          <source>destructuring</source>
          <target state="translated">destructuring</target>
        </trans-unit>
        <trans-unit id="3d981bf920ab98c455a9796d062745b9d6b5cbfb" translate="yes" xml:space="preserve">
          <source>directive</source>
          <target state="translated">directive</target>
        </trans-unit>
        <trans-unit id="b6b1abe1e8fd7c1321c930f873c359251c4ff84b" translate="yes" xml:space="preserve">
          <source>directiveLiteral</source>
          <target state="translated">directiveLiteral</target>
        </trans-unit>
        <trans-unit id="4fb43da463630634ba7bf73abe3f33a693bf9b27" translate="yes" xml:space="preserve">
          <source>do-expressions</source>
          <target state="translated">do-expressions</target>
        </trans-unit>
        <trans-unit id="863e35967242f9d277654876edebf20d5c4bb7bc" translate="yes" xml:space="preserve">
          <source>doExpression</source>
          <target state="translated">doExpression</target>
        </trans-unit>
        <trans-unit id="2f957f0bc60f9a6fb6a585fb887f091ccfa7fc8c" translate="yes" xml:space="preserve">
          <source>doWhileStatement</source>
          <target state="translated">doWhileStatement</target>
        </trans-unit>
        <trans-unit id="8b4008df4639992666e296fa1f1c57eb282d995c" translate="yes" xml:space="preserve">
          <source>dotall-regex</source>
          <target state="translated">dotall-regex</target>
        </trans-unit>
        <trans-unit id="78aed640f03aa290e1ab60dbfbb3d1ac8a73c7f4" translate="yes" xml:space="preserve">
          <source>duplicate-keys</source>
          <target state="translated">duplicate-keys</target>
        </trans-unit>
        <trans-unit id="84fc50220ede69f2f7d823fd283052aef56d4ad2" translate="yes" xml:space="preserve">
          <source>dynamic-import</source>
          <target state="translated">dynamic-import</target>
        </trans-unit>
        <trans-unit id="4e6b750d9d8fc94470b897c713deb14b95182c7c" translate="yes" xml:space="preserve">
          <source>e.g. &lt;code&gt;['@babel/plugin-transform-runtime', { corejs: 3 }],&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;['@babel/plugin-transform-runtime', { corejs: 3 }],&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb7af8d2f4661d22663b7b321044557afa9dd60a" translate="yes" xml:space="preserve">
          <source>emptyStatement</source>
          <target state="translated">emptyStatement</target>
        </trans-unit>
        <trans-unit id="395b60984a77731751224767cd2a7115730a70fd" translate="yes" xml:space="preserve">
          <source>emptyTypeAnnotation</source>
          <target state="translated">emptyTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="920f8f5815b381ea692e9e7c2f7119f2b1aa620a" translate="yes" xml:space="preserve">
          <source>env</source>
          <target state="translated">env</target>
        </trans-unit>
        <trans-unit id="2bddb453f91528c5bca5ac42f85c2002b5102cbf" translate="yes" xml:space="preserve">
          <source>es2015</source>
          <target state="translated">es2015</target>
        </trans-unit>
        <trans-unit id="d05e16721e099911412ccf26bf91287cc7abfbd1" translate="yes" xml:space="preserve">
          <source>es2015-arrow-functions</source>
          <target state="translated">es2015-arrow-functions</target>
        </trans-unit>
        <trans-unit id="b3ac0b520bf8f77bdd0b088f53fbacda9cd3ef68" translate="yes" xml:space="preserve">
          <source>es2015-block-scoped-functions</source>
          <target state="translated">es2015-block-scoped-functions</target>
        </trans-unit>
        <trans-unit id="8112b6dbc309e0c0fbe07c650a0185d9850a51bb" translate="yes" xml:space="preserve">
          <source>es2015-block-scoping</source>
          <target state="translated">es2015-block-scoping</target>
        </trans-unit>
        <trans-unit id="f0ee5aba023344bf3c580795459b1f33123a6c57" translate="yes" xml:space="preserve">
          <source>es2015-classes</source>
          <target state="translated">es2015-classes</target>
        </trans-unit>
        <trans-unit id="c6c168922f47c023422bd88454251599bd1bd172" translate="yes" xml:space="preserve">
          <source>es2015-computed-properties</source>
          <target state="translated">es2015-computed-properties</target>
        </trans-unit>
        <trans-unit id="9847227b2d21acd71c608e2686d25a5acfeace9f" translate="yes" xml:space="preserve">
          <source>es2015-destructuring</source>
          <target state="translated">es2015-destructuring</target>
        </trans-unit>
        <trans-unit id="2df878556a15001c2ca422f36ccbe6ea26e1a611" translate="yes" xml:space="preserve">
          <source>es2015-duplicate-keys</source>
          <target state="translated">es2015-duplicate-keys</target>
        </trans-unit>
        <trans-unit id="8b5c990dc3e717d67db2b4d3b83c6d204455fb78" translate="yes" xml:space="preserve">
          <source>es2015-for-of</source>
          <target state="translated">es2015-for-of</target>
        </trans-unit>
        <trans-unit id="0886e4c32976fbf969a91153984ce788c27b9967" translate="yes" xml:space="preserve">
          <source>es2015-function-name</source>
          <target state="translated">es2015-function-name</target>
        </trans-unit>
        <trans-unit id="fcd07de845e9b22a8d9ddbfd5a3713de9efe78ce" translate="yes" xml:space="preserve">
          <source>es2015-literals</source>
          <target state="translated">es2015-literals</target>
        </trans-unit>
        <trans-unit id="4a50064a8612cf51c7437d3b3fa85578053c53f4" translate="yes" xml:space="preserve">
          <source>es2015-modules-amd</source>
          <target state="translated">es2015-modules-amd</target>
        </trans-unit>
        <trans-unit id="56b82ff8b7ddbf2b763b0077f22877fee28e5cd5" translate="yes" xml:space="preserve">
          <source>es2015-modules-commonjs</source>
          <target state="translated">es2015-modules-commonjs</target>
        </trans-unit>
        <trans-unit id="26b89cfadfbb6d3819dd7ed16879fef2c6d0e6d8" translate="yes" xml:space="preserve">
          <source>es2015-modules-systemjs</source>
          <target state="translated">es2015-modules-systemjs</target>
        </trans-unit>
        <trans-unit id="5c688b4643dc8cb45f17cc6085a4215f579881ee" translate="yes" xml:space="preserve">
          <source>es2015-modules-umd</source>
          <target state="translated">es2015-modules-umd</target>
        </trans-unit>
        <trans-unit id="7c84d558e65ccf7285e035ea49d6783342f0c9f9" translate="yes" xml:space="preserve">
          <source>es2015-object-super</source>
          <target state="translated">es2015-object-super</target>
        </trans-unit>
        <trans-unit id="e63e25fa2caff00b7813f3d25c4936200bf7e427" translate="yes" xml:space="preserve">
          <source>es2015-parameters</source>
          <target state="translated">es2015-parameters</target>
        </trans-unit>
        <trans-unit id="be84424530936276d1692e040019d1c7e5126be8" translate="yes" xml:space="preserve">
          <source>es2015-shorthand-properties</source>
          <target state="translated">es2015-shorthand-properties</target>
        </trans-unit>
        <trans-unit id="6d78dc61c8a4adc9d45c64491c80ad0d7c976ead" translate="yes" xml:space="preserve">
          <source>es2015-spread</source>
          <target state="translated">es2015-spread</target>
        </trans-unit>
        <trans-unit id="b38e2e2aa2a3abc48ee8d7b4d8650ad397dac898" translate="yes" xml:space="preserve">
          <source>es2015-sticky-regex</source>
          <target state="translated">es2015-sticky-regex</target>
        </trans-unit>
        <trans-unit id="3da2136e7164efe55d2579b74882894edf22ca16" translate="yes" xml:space="preserve">
          <source>es2015-template-literals</source>
          <target state="translated">es2015-template-literals</target>
        </trans-unit>
        <trans-unit id="a618119d4b2a408475be879ad4299e6b4186f8e5" translate="yes" xml:space="preserve">
          <source>es2015-typeof-symbol</source>
          <target state="translated">es2015-typeof-symbol</target>
        </trans-unit>
        <trans-unit id="91a9f969055b691148d5178ef57203bf01ab3e6b" translate="yes" xml:space="preserve">
          <source>es2015-unicode-regex</source>
          <target state="translated">es2015-unicode-regex</target>
        </trans-unit>
        <trans-unit id="139a6dc78bee16dab8bae5ac789d730b614b917b" translate="yes" xml:space="preserve">
          <source>es2016</source>
          <target state="translated">es2016</target>
        </trans-unit>
        <trans-unit id="911015d28bbfae967ffe9225bd0fbdb225773f33" translate="yes" xml:space="preserve">
          <source>es2017</source>
          <target state="translated">es2017</target>
        </trans-unit>
        <trans-unit id="f60f076e11849e27431010dca7e1665144518ac3" translate="yes" xml:space="preserve">
          <source>es3-member-expression-literals</source>
          <target state="translated">es3-member-expression-literals</target>
        </trans-unit>
        <trans-unit id="77a8351c726e07bc072fd9efc2fb378467e61bcf" translate="yes" xml:space="preserve">
          <source>es3-property-literals</source>
          <target state="translated">es3-property-literals</target>
        </trans-unit>
        <trans-unit id="1e36d7d72d760621bc84fb7db110eeafda4fafd1" translate="yes" xml:space="preserve">
          <source>es5-property-mutators</source>
          <target state="translated">es5-property-mutators</target>
        </trans-unit>
        <trans-unit id="822bc13e2d55b402eb4233cb23c9d414a7a03bc1" translate="yes" xml:space="preserve">
          <source>eval</source>
          <target state="translated">eval</target>
        </trans-unit>
        <trans-unit id="3709214fb349c5b535a50e29c91d218f5afd8de8" translate="yes" xml:space="preserve">
          <source>evaluate</source>
          <target state="translated">evaluate</target>
        </trans-unit>
        <trans-unit id="506c2bc94b6b36144dfbe59caef1c72f41e0143d" translate="yes" xml:space="preserve">
          <source>existentialTypeParam</source>
          <target state="translated">existentialTypeParam</target>
        </trans-unit>
        <trans-unit id="790d7cd3117a8d3c875a86563a6cac2a8dc7f364" translate="yes" xml:space="preserve">
          <source>existsTypeAnnotation</source>
          <target state="translated">existsTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="582a24f961c6cfbb94cfe409575033a564037b55" translate="yes" xml:space="preserve">
          <source>exponentiation-operator</source>
          <target state="translated">exponentiation-operator</target>
        </trans-unit>
        <trans-unit id="4ffd200110c4a94d7a6afb7662a5db61f0efe94c" translate="yes" xml:space="preserve">
          <source>export-default-from</source>
          <target state="translated">export-default-from</target>
        </trans-unit>
        <trans-unit id="df87bbe47417a3c8c0be4f807d33c66c903859d5" translate="yes" xml:space="preserve">
          <source>export-extensions</source>
          <target state="translated">export-extensions</target>
        </trans-unit>
        <trans-unit id="9f839dd526e17ebbdc5d5e600352a8f7a30f115e" translate="yes" xml:space="preserve">
          <source>export-namespace-from</source>
          <target state="translated">export-namespace-from</target>
        </trans-unit>
        <trans-unit id="5e8cdc1d5a9f3d1ae894153781736b15b9101230" translate="yes" xml:space="preserve">
          <source>exportAllDeclaration</source>
          <target state="translated">exportAllDeclaration</target>
        </trans-unit>
        <trans-unit id="d2cddec9eccb66a68dc376fc2f761e4d2c57cec6" translate="yes" xml:space="preserve">
          <source>exportDefaultDeclaration</source>
          <target state="translated">exportDefaultDeclaration</target>
        </trans-unit>
        <trans-unit id="a421884b7c78fea2ae754785eafb7ec321844d74" translate="yes" xml:space="preserve">
          <source>exportDefaultSpecifier</source>
          <target state="translated">exportDefaultSpecifier</target>
        </trans-unit>
        <trans-unit id="bcbfdf574c382527f2ad67cd06dbcf873300da80" translate="yes" xml:space="preserve">
          <source>exportNamedDeclaration</source>
          <target state="translated">exportNamedDeclaration</target>
        </trans-unit>
        <trans-unit id="5b3db3c5620706b822d8a0d70a90db443a90fb3f" translate="yes" xml:space="preserve">
          <source>exportNamespaceSpecifier</source>
          <target state="translated">exportNamespaceSpecifier</target>
        </trans-unit>
        <trans-unit id="a1a83bb9fd249b34543abb78891b80e0c5f69086" translate="yes" xml:space="preserve">
          <source>exportSpecifier</source>
          <target state="translated">exportSpecifier</target>
        </trans-unit>
        <trans-unit id="17cb48d0bc0ba0bdafe3ea8a6f1d1894597345f0" translate="yes" xml:space="preserve">
          <source>expressionStatement</source>
          <target state="translated">expressionStatement</target>
        </trans-unit>
        <trans-unit id="72cae668e2b756da38fe179c26e838e05e1053e6" translate="yes" xml:space="preserve">
          <source>external-helpers</source>
          <target state="translated">external-helpers</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="971c419dd609331343dee105fffd0f4608dc0bf2" translate="yes" xml:space="preserve">
          <source>file</source>
          <target state="translated">file</target>
        </trans-unit>
        <trans-unit id="08deae8d9ea9bc0b84f94475d868351830e9f7e7" translate="yes" xml:space="preserve">
          <source>filename</source>
          <target state="translated">filename</target>
        </trans-unit>
        <trans-unit id="d59f867f4dbf56408355b3556be81fd91cb689b2" translate="yes" xml:space="preserve">
          <source>flipComparisons</source>
          <target state="translated">flipComparisons</target>
        </trans-unit>
        <trans-unit id="d8f7e9c783be82328ffc2f348b0f257b671c1107" translate="yes" xml:space="preserve">
          <source>flow</source>
          <target state="translated">flow</target>
        </trans-unit>
        <trans-unit id="8ea1ce94e1646af4d7bbfa9df2c39190452dcd77" translate="yes" xml:space="preserve">
          <source>flow-comments</source>
          <target state="translated">flow-comments</target>
        </trans-unit>
        <trans-unit id="7b1330af389b148c754cb832addd6334b4852e42" translate="yes" xml:space="preserve">
          <source>flow-strip-types</source>
          <target state="translated">flow-strip-types</target>
        </trans-unit>
        <trans-unit id="ff0e97b4e4ff84aa6a25c0079427071f4ee8aa25" translate="yes" xml:space="preserve">
          <source>for-of</source>
          <target state="translated">for-of</target>
        </trans-unit>
        <trans-unit id="98c5c3db301c05ceb7ca735ec5da5a7582d00f1e" translate="yes" xml:space="preserve">
          <source>forAwaitStatement</source>
          <target state="translated">forAwaitStatement</target>
        </trans-unit>
        <trans-unit id="38741ccfd7155879ddb52462f095e0fab1cac43e" translate="yes" xml:space="preserve">
          <source>forInStatement</source>
          <target state="translated">forInStatement</target>
        </trans-unit>
        <trans-unit id="bcfe8bffc2250f7bf914b8001fa4d5aa2a59451a" translate="yes" xml:space="preserve">
          <source>forOfStatement</source>
          <target state="translated">forOfStatement</target>
        </trans-unit>
        <trans-unit id="98c803b1a5b150a08aae07a8428a4f0a93b1dafa" translate="yes" xml:space="preserve">
          <source>forStatement</source>
          <target state="translated">forStatement</target>
        </trans-unit>
        <trans-unit id="e57c7e42259a8c1aeea9303142cac08d54a5103b" translate="yes" xml:space="preserve">
          <source>from &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch5.md#statement-completion-values&quot;&gt;You Don't Know JS&lt;/a&gt;, Types &amp;amp; Grammar -&amp;gt; Chapter 5 -&amp;gt; Section Statement Completion Values</source>
          <target state="translated">에서 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch5.md#statement-completion-values&quot;&gt;당신 모르겠 음 JS&lt;/a&gt; &amp;gt; 제 5 장 - -&amp;gt; 섹션의 문 완성 값, 유형 및 문법</target>
        </trans-unit>
        <trans-unit id="e80fe57f11f25d23c2b701bd1d83cc4e3e5d3bde" translate="yes" xml:space="preserve">
          <source>from &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md#statement-completion-values&quot;&gt;You Don&amp;rsquo;t Know JS&lt;/a&gt;</source>
          <target state="translated">에서 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md#statement-completion-values&quot;&gt;당신 모르겠 음 JS&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="1d8f1fe255e66a5007cf4ec087f57e5588f7538a" translate="yes" xml:space="preserve">
          <source>function-bind</source>
          <target state="translated">function-bind</target>
        </trans-unit>
        <trans-unit id="0fe452b4587fbd1501fe8509ac8cb7999c6353e8" translate="yes" xml:space="preserve">
          <source>function-name</source>
          <target state="translated">function-name</target>
        </trans-unit>
        <trans-unit id="54cc08aa9e71c593439ec175a33ecf1dc2f9dacd" translate="yes" xml:space="preserve">
          <source>function-sent</source>
          <target state="translated">function-sent</target>
        </trans-unit>
        <trans-unit id="a7f404b2fd0d36364a70b1cbb5349d464ae12dc4" translate="yes" xml:space="preserve">
          <source>functionDeclaration</source>
          <target state="translated">functionDeclaration</target>
        </trans-unit>
        <trans-unit id="5fbfb4dc5d51132c2b0b318fbb251680f627729e" translate="yes" xml:space="preserve">
          <source>functionExpression</source>
          <target state="translated">functionExpression</target>
        </trans-unit>
        <trans-unit id="a90e220571ac6642e2c94aaf8974e6a322b26e85" translate="yes" xml:space="preserve">
          <source>functionTypeAnnotation</source>
          <target state="translated">functionTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="cd61d9aa2ff281abff59da18bc7ace9fda428535" translate="yes" xml:space="preserve">
          <source>functionTypeParam</source>
          <target state="translated">functionTypeParam</target>
        </trans-unit>
        <trans-unit id="c6f5e4cf08e4a200a344ac68363ae64972eb1740" translate="yes" xml:space="preserve">
          <source>generators</source>
          <target state="translated">generators</target>
        </trans-unit>
        <trans-unit id="7f7563c5e55adc8b505394c986acd5d8e914d39d" translate="yes" xml:space="preserve">
          <source>genericTypeAnnotation</source>
          <target state="translated">genericTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="9027cc5a2c1321de60a2d71ccde6229d1152d6d3" translate="yes" xml:space="preserve">
          <source>global</source>
          <target state="translated">global</target>
        </trans-unit>
        <trans-unit id="9d06975f58c836f0e8778cf33e78fe3028643dcc" translate="yes" xml:space="preserve">
          <source>guards</source>
          <target state="translated">guards</target>
        </trans-unit>
        <trans-unit id="fe496ef16b61f1ca59c6ad116819de7c38fb43c0" translate="yes" xml:space="preserve">
          <source>however the following &lt;strong&gt;will not&lt;/strong&gt;:</source>
          <target state="translated">그러나 다음 &lt;strong&gt;은 그렇지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="fae9fd39301eb7e657d4dad32a828cda5d7399e5" translate="yes" xml:space="preserve">
          <source>identifier</source>
          <target state="translated">identifier</target>
        </trans-unit>
        <trans-unit id="439835363cb66a8f6e222388b6c55d3d3c3eaffa" translate="yes" xml:space="preserve">
          <source>ifStatement</source>
          <target state="translated">ifStatement</target>
        </trans-unit>
        <trans-unit id="62fdfbd55d19b2a4671102ad7bca17d875f8207a" translate="yes" xml:space="preserve">
          <source>import</source>
          <target state="translated">import</target>
        </trans-unit>
        <trans-unit id="b3cae324797488e0dc2b6e99f4258ba5e7ff9b5c" translate="yes" xml:space="preserve">
          <source>importDeclaration</source>
          <target state="translated">importDeclaration</target>
        </trans-unit>
        <trans-unit id="e8e3064e0072c55500619b4eb594d569ee0be127" translate="yes" xml:space="preserve">
          <source>importDefaultSpecifier</source>
          <target state="translated">importDefaultSpecifier</target>
        </trans-unit>
        <trans-unit id="fc36502b077ce8707a2f99a9a431aabb89615e1a" translate="yes" xml:space="preserve">
          <source>importNamespaceSpecifier</source>
          <target state="translated">importNamespaceSpecifier</target>
        </trans-unit>
        <trans-unit id="56131b1f09a1e4428c0f7969a19d4fb7b4ac5e74" translate="yes" xml:space="preserve">
          <source>importSource</source>
          <target state="translated">importSource</target>
        </trans-unit>
        <trans-unit id="c815f52e57af180185ff669be0423f6b7fc4771d" translate="yes" xml:space="preserve">
          <source>importSpecifier</source>
          <target state="translated">importSpecifier</target>
        </trans-unit>
        <trans-unit id="b9bafb44d5490fd4f4fad5f5665f86cf81b906a3" translate="yes" xml:space="preserve">
          <source>inferredPredicate</source>
          <target state="translated">inferredPredicate</target>
        </trans-unit>
        <trans-unit id="0c4c6b12888e68a0828006f4e252af0b387cc357" translate="yes" xml:space="preserve">
          <source>infinity</source>
          <target state="translated">infinity</target>
        </trans-unit>
        <trans-unit id="fe4b0042b5d2afd4554a086f1fe219810e622493" translate="yes" xml:space="preserve">
          <source>inline-consecutive-adds</source>
          <target state="translated">inline-consecutive-adds</target>
        </trans-unit>
        <trans-unit id="9083be87375a321f340d1c307ff86d5773045761" translate="yes" xml:space="preserve">
          <source>inline-environment-variables</source>
          <target state="translated">inline-environment-variables</target>
        </trans-unit>
        <trans-unit id="d5845f52f72cdd0a224349f90b9df42a2b0e0e02" translate="yes" xml:space="preserve">
          <source>instanceof</source>
          <target state="translated">instanceof</target>
        </trans-unit>
        <trans-unit id="9932602590a211e4212d37bce91e6ff51c4ad16b" translate="yes" xml:space="preserve">
          <source>interfaceDeclaration</source>
          <target state="translated">interfaceDeclaration</target>
        </trans-unit>
        <trans-unit id="6c97859da13c5cc33fb47a6f61a07fdbef216aca" translate="yes" xml:space="preserve">
          <source>interfaceExtends</source>
          <target state="translated">interfaceExtends</target>
        </trans-unit>
        <trans-unit id="e4d3d60cee30087ad8405c9581287a9dea2d8cc7" translate="yes" xml:space="preserve">
          <source>interfaceTypeAnnotation</source>
          <target state="translated">interfaceTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="7180b637abe21d9a199a9808469d2657c4ff4806" translate="yes" xml:space="preserve">
          <source>interpreterDirective</source>
          <target state="translated">interpreterDirective</target>
        </trans-unit>
        <trans-unit id="0b90284fac4a699b12c65be3fdb3b5bf117988eb" translate="yes" xml:space="preserve">
          <source>intersectionTypeAnnotation</source>
          <target state="translated">intersectionTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="f321bb51407fecc5d2801890431ad1e0f9922dbf" translate="yes" xml:space="preserve">
          <source>into the following:</source>
          <target state="translated">다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="ea9bba07c7f3520bb0f706daf0c83b5d8518b815" translate="yes" xml:space="preserve">
          <source>is considered an error, because it's identical to &lt;code&gt;plugins: ['./plug']&lt;/code&gt;. Additionally, even</source>
          <target state="translated">&lt;code&gt;plugins: ['./plug']&lt;/code&gt; 과 동일하므로 오류로 간주됩니다 : [ './plug'] . 또한</target>
        </trans-unit>
        <trans-unit id="f881be0d08275a4188099540efb3406e14bacb49" translate="yes" xml:space="preserve">
          <source>is considered an error, because the second one would just always replace the first one.</source>
          <target state="translated">두 번째는 항상 첫 번째를 대체하기 때문에 오류로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="92faafca1fe03556e2b26b6a5896f4a8d255ee10" translate="yes" xml:space="preserve">
          <source>it will still transpile both to one browser global:</source>
          <target state="translated">여전히 두 브라우저를 모두 하나의 브라우저로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="36a8a5bd6d3266169336732f1eded03b65a5a496" translate="yes" xml:space="preserve">
          <source>it will transpile into two references to the same browser global:</source>
          <target state="translated">동일한 브라우저 전역에 대한 두 개의 참조로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="4a954927e82fa73ae837841ab25ff200d9a8fe17" translate="yes" xml:space="preserve">
          <source>it will transpile to:</source>
          <target state="translated">그것은 다음과 같이 번역 될 것이다 :</target>
        </trans-unit>
        <trans-unit id="f8bdac675fd45ab04ccb8d41878891f821ad700c" translate="yes" xml:space="preserve">
          <source>jSXAttribute</source>
          <target state="translated">jSXAttribute</target>
        </trans-unit>
        <trans-unit id="4eafa456cf080266332833bea1b214ad76218d27" translate="yes" xml:space="preserve">
          <source>jSXClosingElement</source>
          <target state="translated">jSXClosingElement</target>
        </trans-unit>
        <trans-unit id="aaa953978224b830beb26a557adbe9fa58e03bc0" translate="yes" xml:space="preserve">
          <source>jSXClosingFragment</source>
          <target state="translated">jSXClosingFragment</target>
        </trans-unit>
        <trans-unit id="35f4204218ce1009aa31e74ac8f2e9a720090e5a" translate="yes" xml:space="preserve">
          <source>jSXElement</source>
          <target state="translated">jSXElement</target>
        </trans-unit>
        <trans-unit id="6d44ea46c873aa395309a2945d4ea4d9743229c3" translate="yes" xml:space="preserve">
          <source>jSXEmptyExpression</source>
          <target state="translated">jSXEmptyExpression</target>
        </trans-unit>
        <trans-unit id="ad972917e2825938ce85513876c5ecbdb508acaf" translate="yes" xml:space="preserve">
          <source>jSXExpressionContainer</source>
          <target state="translated">jSXExpressionContainer</target>
        </trans-unit>
        <trans-unit id="63d4ceb097dde02f6de9c312b9f50d22923b122e" translate="yes" xml:space="preserve">
          <source>jSXFragment</source>
          <target state="translated">jSXFragment</target>
        </trans-unit>
        <trans-unit id="cfeb19f88c341a4857f4deea816778bae8cf3aa0" translate="yes" xml:space="preserve">
          <source>jSXIdentifier</source>
          <target state="translated">jSXIdentifier</target>
        </trans-unit>
        <trans-unit id="abd1c51417fbda9461a194566242c6e0485c952b" translate="yes" xml:space="preserve">
          <source>jSXMemberExpression</source>
          <target state="translated">jSXMemberExpression</target>
        </trans-unit>
        <trans-unit id="0621d98f75bdc9eea74520f9b6ff17942d59a714" translate="yes" xml:space="preserve">
          <source>jSXNamespacedName</source>
          <target state="translated">jSXNamespacedName</target>
        </trans-unit>
        <trans-unit id="1438e7bdf2b744997d6942f7a446a14ae8c3564d" translate="yes" xml:space="preserve">
          <source>jSXOpeningElement</source>
          <target state="translated">jSXOpeningElement</target>
        </trans-unit>
        <trans-unit id="1cd448a5502de640494394c87528e76334bf3082" translate="yes" xml:space="preserve">
          <source>jSXOpeningFragment</source>
          <target state="translated">jSXOpeningFragment</target>
        </trans-unit>
        <trans-unit id="cc970abc16b0d9ff0326ccef27350898490dc0ea" translate="yes" xml:space="preserve">
          <source>jSXSpreadAttribute</source>
          <target state="translated">jSXSpreadAttribute</target>
        </trans-unit>
        <trans-unit id="de86df4acab07a79482bc3b0ff872d5ea34fe02c" translate="yes" xml:space="preserve">
          <source>jSXSpreadChild</source>
          <target state="translated">jSXSpreadChild</target>
        </trans-unit>
        <trans-unit id="e190c211d7c4e1066a3deb91ccf34291dcb88ff9" translate="yes" xml:space="preserve">
          <source>jSXText</source>
          <target state="translated">jSXText</target>
        </trans-unit>
        <trans-unit id="85db84918d245d59d83d49ac118b5cc958c6f7b8" translate="yes" xml:space="preserve">
          <source>jscript</source>
          <target state="translated">jscript</target>
        </trans-unit>
        <trans-unit id="c37f4e155b25f141881164f00be11d0845f655ea" translate="yes" xml:space="preserve">
          <source>jsescOption</source>
          <target state="translated">jsescOption</target>
        </trans-unit>
        <trans-unit id="276323ae92ec991e12558b0189f789d87db4db53" translate="yes" xml:space="preserve">
          <source>jsonCompatibleStrings</source>
          <target state="translated">jsonCompatibleStrings</target>
        </trans-unit>
        <trans-unit id="1ceda45a552fbddb3a16b9e6bda6847bb7c076dc" translate="yes" xml:space="preserve">
          <source>jsx</source>
          <target state="translated">jsx</target>
        </trans-unit>
        <trans-unit id="e69f59709f2ccb49b69a839b723eb5b80179b664" translate="yes" xml:space="preserve">
          <source>keepClassName</source>
          <target state="translated">keepClassName</target>
        </trans-unit>
        <trans-unit id="f791383b2edc9afdbeeaa3a3ecb36d6a935cdf8c" translate="yes" xml:space="preserve">
          <source>keepFnName</source>
          <target state="translated">keepFnName</target>
        </trans-unit>
        <trans-unit id="f3f9ec226cf3b5bdd6baf5b71ea156e7c0ebcdcd" translate="yes" xml:space="preserve">
          <source>labeledStatement</source>
          <target state="translated">labeledStatement</target>
        </trans-unit>
        <trans-unit id="be336033ff87d8f0b8b0b782f27723916b75dbaf" translate="yes" xml:space="preserve">
          <source>literals</source>
          <target state="translated">literals</target>
        </trans-unit>
        <trans-unit id="22203b8256551ee5a1ef1142c1b53808598f53dc" translate="yes" xml:space="preserve">
          <source>loadOptions</source>
          <target state="translated">loadOptions</target>
        </trans-unit>
        <trans-unit id="41214acb45719a9f8636d6038a2a3b6753bb8a1c" translate="yes" xml:space="preserve">
          <source>loadPartialConfig</source>
          <target state="translated">loadPartialConfig</target>
        </trans-unit>
        <trans-unit id="6b1c058ff4e4266ddd775c91722c5c9d65beb3ba" translate="yes" xml:space="preserve">
          <source>logical-assignment-operators</source>
          <target state="translated">logical-assignment-operators</target>
        </trans-unit>
        <trans-unit id="f255391fb5988b15b0a434a83f380954a3c2a7c8" translate="yes" xml:space="preserve">
          <source>logicalExpression</source>
          <target state="translated">logicalExpression</target>
        </trans-unit>
        <trans-unit id="28bbe1eddeeae8a49bba6c36da0872e21e2d5a8d" translate="yes" xml:space="preserve">
          <source>mangle</source>
          <target state="translated">mangle</target>
        </trans-unit>
        <trans-unit id="011a49ff944f130af22cc314b7f3af17b242cc2c" translate="yes" xml:space="preserve">
          <source>member-expression-literals</source>
          <target state="translated">member-expression-literals</target>
        </trans-unit>
        <trans-unit id="fb793e7799db448c719c9b2a5feeaa4ad5a6b53a" translate="yes" xml:space="preserve">
          <source>memberExpression</source>
          <target state="translated">memberExpression</target>
        </trans-unit>
        <trans-unit id="246c1d164142a48de10f6864e9f4e4df9e2c6d93" translate="yes" xml:space="preserve">
          <source>memberExpressions</source>
          <target state="translated">memberExpressions</target>
        </trans-unit>
        <trans-unit id="45995fb8ee4728557e1004152ce29fb0b862826a" translate="yes" xml:space="preserve">
          <source>merge-sibling-variables</source>
          <target state="translated">merge-sibling-variables</target>
        </trans-unit>
        <trans-unit id="9cfc3bfd3037c93c4b8ccf88fb696e647257ace3" translate="yes" xml:space="preserve">
          <source>mergeVars</source>
          <target state="translated">mergeVars</target>
        </trans-unit>
        <trans-unit id="72d07cf4458f8df2c5df8063ef7af7c896d7078e" translate="yes" xml:space="preserve">
          <source>metaProperty</source>
          <target state="translated">metaProperty</target>
        </trans-unit>
        <trans-unit id="ec7ed78ea4883277dec7adfe35a25beb9d96285f" translate="yes" xml:space="preserve">
          <source>minified</source>
          <target state="translated">minified</target>
        </trans-unit>
        <trans-unit id="1827aa4f492637b3c008f0ee1cf27aa1c4143d9a" translate="yes" xml:space="preserve">
          <source>minify-booleans</source>
          <target state="translated">minify-booleans</target>
        </trans-unit>
        <trans-unit id="81dc5c2c56da1fba8611bf7e89583fb72f25bf0d" translate="yes" xml:space="preserve">
          <source>minify-builtins</source>
          <target state="translated">minify-builtins</target>
        </trans-unit>
        <trans-unit id="f28b2ce675607434398d5ff00960e9f079139515" translate="yes" xml:space="preserve">
          <source>minify-constant-folding</source>
          <target state="translated">minify-constant-folding</target>
        </trans-unit>
        <trans-unit id="b01acbfa053ee0af658ebffbf90f3f697bd3021b" translate="yes" xml:space="preserve">
          <source>minify-dead-code-elimination</source>
          <target state="translated">minify-dead-code-elimination</target>
        </trans-unit>
        <trans-unit id="ee8ad586fc2994d52e19f91af67fabb23834442d" translate="yes" xml:space="preserve">
          <source>minify-flip-comparisons</source>
          <target state="translated">minify-flip-comparisons</target>
        </trans-unit>
        <trans-unit id="b97fde7b2d2fcc3634c64f7231febbaab8382b90" translate="yes" xml:space="preserve">
          <source>minify-guarded-expressions</source>
          <target state="translated">minify-guarded-expressions</target>
        </trans-unit>
        <trans-unit id="ffbbce0f4f0acf1369599efeb1b4cd66761608da" translate="yes" xml:space="preserve">
          <source>minify-infinity</source>
          <target state="translated">minify-infinity</target>
        </trans-unit>
        <trans-unit id="f30c32fc6819131f788ca6bcaa3a7aeceeb8a070" translate="yes" xml:space="preserve">
          <source>minify-mangle-names</source>
          <target state="translated">minify-mangle-names</target>
        </trans-unit>
        <trans-unit id="7dfcb595de62117f2fddedc9edaa5e736035ee87" translate="yes" xml:space="preserve">
          <source>minify-numeric-literals</source>
          <target state="translated">minify-numeric-literals</target>
        </trans-unit>
        <trans-unit id="5c84ca859f5bdf2bcf02a727ac34ba1b1bdc0d87" translate="yes" xml:space="preserve">
          <source>minify-replace</source>
          <target state="translated">minify-replace</target>
        </trans-unit>
        <trans-unit id="b91fb7a2f0f7a7a4af1879e28ba1a5c66ea51767" translate="yes" xml:space="preserve">
          <source>minify-simplify</source>
          <target state="translated">minify-simplify</target>
        </trans-unit>
        <trans-unit id="e270cda95f281296b13273daaf885818cbca510b" translate="yes" xml:space="preserve">
          <source>minify-type-constructors</source>
          <target state="translated">minify-type-constructors</target>
        </trans-unit>
        <trans-unit id="c4065e13ed6d5dfde521a2e9201c319ec052886f" translate="yes" xml:space="preserve">
          <source>mixedTypeAnnotation</source>
          <target state="translated">mixedTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="77b0681fd7927534d6a9adb4f8f1299852b42c87" translate="yes" xml:space="preserve">
          <source>modules-amd</source>
          <target state="translated">modules-amd</target>
        </trans-unit>
        <trans-unit id="6a14a10b537eac9af2d82598646e9ea2b4806f9e" translate="yes" xml:space="preserve">
          <source>modules-commonjs</source>
          <target state="translated">modules-commonjs</target>
        </trans-unit>
        <trans-unit id="0875ab751c872c4b3fc13a0e38f718e1399bbaeb" translate="yes" xml:space="preserve">
          <source>modules-systemjs</source>
          <target state="translated">modules-systemjs</target>
        </trans-unit>
        <trans-unit id="860787466904588da374b752a5cf7672d3246358" translate="yes" xml:space="preserve">
          <source>modules-umd</source>
          <target state="translated">modules-umd</target>
        </trans-unit>
        <trans-unit id="50f013532a9770a2c2cfdc38b7581dd01df69b70" translate="yes" xml:space="preserve">
          <source>n/a</source>
          <target state="translated">n/a</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="c423898ecbc868e027e7a92191d3e3f72456f9db" translate="yes" xml:space="preserve">
          <source>named-capturing-groups-regex</source>
          <target state="translated">named-capturing-groups-regex</target>
        </trans-unit>
        <trans-unit id="d2c8197063ec5bb6d582dded3dec84daabd9547b" translate="yes" xml:space="preserve">
          <source>new-target</source>
          <target state="translated">new-target</target>
        </trans-unit>
        <trans-unit id="c16d9b29506b5f44c2cc46b29deb05837ec0d5b2" translate="yes" xml:space="preserve">
          <source>newExpression</source>
          <target state="translated">newExpression</target>
        </trans-unit>
        <trans-unit id="05bb54181c0423c2e0d78872a59b512fc6fa3ebc" translate="yes" xml:space="preserve">
          <source>node-env-inline</source>
          <target state="translated">node-env-inline</target>
        </trans-unit>
        <trans-unit id="bd9b6fa6ff953cbee48ce28a3f6c91859e53be7d" translate="yes" xml:space="preserve">
          <source>noop</source>
          <target state="translated">noop</target>
        </trans-unit>
        <trans-unit id="b72b00b6f91b19e446dbeb54a1d31e183dd7415b" translate="yes" xml:space="preserve">
          <source>nullLiteral</source>
          <target state="translated">nullLiteral</target>
        </trans-unit>
        <trans-unit id="4f57a27f2b843a88d1d6a9295036234e50bb0721" translate="yes" xml:space="preserve">
          <source>nullLiteralTypeAnnotation</source>
          <target state="translated">nullLiteralTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="fe54af78ef390287a0feafcdb5e61522b3d603d3" translate="yes" xml:space="preserve">
          <source>nullableTypeAnnotation</source>
          <target state="translated">nullableTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="47790454f26b29d8b1a554f71ee47f5b7231c0a4" translate="yes" xml:space="preserve">
          <source>nullish-coalescing-operator</source>
          <target state="translated">nullish-coalescing-operator</target>
        </trans-unit>
        <trans-unit id="043cbe966fcf26ddf119e77d7503bbc20fae9ab8" translate="yes" xml:space="preserve">
          <source>numberLiteralTypeAnnotation</source>
          <target state="translated">numberLiteralTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="bd90e86ae4e41bd0b1970451a25f6c138112a8d3" translate="yes" xml:space="preserve">
          <source>numberTypeAnnotation</source>
          <target state="translated">numberTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="1e0d9ffe1ed6c43119651d41f29a1353fb6bb4cc" translate="yes" xml:space="preserve">
          <source>numeric separator</source>
          <target state="translated">숫자 구분자</target>
        </trans-unit>
        <trans-unit id="a5127b10e0459645d149c2c05a2e340e43789d3d" translate="yes" xml:space="preserve">
          <source>numeric-separator</source>
          <target state="translated">numeric-separator</target>
        </trans-unit>
        <trans-unit id="c6d2bde2b7289710a99cc7c858b6a158e6e7f794" translate="yes" xml:space="preserve">
          <source>numericLiteral</source>
          <target state="translated">numericLiteral</target>
        </trans-unit>
        <trans-unit id="f6655bd4a24326215068226b6b8156c8dd5989d3" translate="yes" xml:space="preserve">
          <source>numericLiteralTypeAnnotation</source>
          <target state="translated">numericLiteralTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="a015607b51a5f86a17c822e9ea79a86388aac208" translate="yes" xml:space="preserve">
          <source>numericLiterals</source>
          <target state="translated">numericLiterals</target>
        </trans-unit>
        <trans-unit id="1615307cc4523f183e777df67f168c86908e8007" translate="yes" xml:space="preserve">
          <source>object</source>
          <target state="translated">object</target>
        </trans-unit>
        <trans-unit id="8e4f6f89f995393abe85a1ca7bdb59237dec9949" translate="yes" xml:space="preserve">
          <source>object-assign</source>
          <target state="translated">object-assign</target>
        </trans-unit>
        <trans-unit id="845bbf2195b8f2981678d17a747d41e8776de5f1" translate="yes" xml:space="preserve">
          <source>object-rest-spread</source>
          <target state="translated">object-rest-spread</target>
        </trans-unit>
        <trans-unit id="eba7fb2d7826dcc06854f88a07ebe6ce1d2735c0" translate="yes" xml:space="preserve">
          <source>object-set-prototype-of-to-assign</source>
          <target state="translated">object-set-prototype-of-to-assign</target>
        </trans-unit>
        <trans-unit id="21ba0b361bd5de53fefc2a5027af1573dea343ec" translate="yes" xml:space="preserve">
          <source>object-super</source>
          <target state="translated">object-super</target>
        </trans-unit>
        <trans-unit id="169002a56678b701c013a358d724886bc7e7ad4e" translate="yes" xml:space="preserve">
          <source>objectExpression</source>
          <target state="translated">objectExpression</target>
        </trans-unit>
        <trans-unit id="6fa71dd27b6536340bcf202ec8e56898cdd1cb89" translate="yes" xml:space="preserve">
          <source>objectMethod</source>
          <target state="translated">objectMethod</target>
        </trans-unit>
        <trans-unit id="0f82a9429acb32fa8e253c09dd155ff735140475" translate="yes" xml:space="preserve">
          <source>objectPattern</source>
          <target state="translated">objectPattern</target>
        </trans-unit>
        <trans-unit id="652523aaa67abb906c971400a1eb19e8d387a279" translate="yes" xml:space="preserve">
          <source>objectProperty</source>
          <target state="translated">objectProperty</target>
        </trans-unit>
        <trans-unit id="8e03d1000917c0dfc5c8272cb0032e4a7448553f" translate="yes" xml:space="preserve">
          <source>objectTypeAnnotation</source>
          <target state="translated">objectTypeAnnotation</target>
        </trans-unit>
        <trans-unit id="59fdf10d2e91ad761499f517fddcb9071e4861e0" translate="yes" xml:space="preserve">
          <source>objectTypeCallProperty</source>
          <target state="translated">objectTypeCallProperty</target>
        </trans-unit>
        <trans-unit id="71aeea290517f5df2869831f5a3ff3dca944dbe6" translate="yes" xml:space="preserve">
          <source>objectTypeIndexer</source>
          <target state="translated">objectTypeIndexer</target>
        </trans-unit>
        <trans-unit id="09dc69ba1cb85c2cc8835a950dcdbdb5bde494c3" translate="yes" xml:space="preserve">
          <source>objectTypeInternalSlot</source>
          <target state="translated">objectTypeInternalSlot</target>
        </trans-unit>
        <trans-unit id="bc7337101dbd6c74de136cfde2c597dfbd080a7c" translate="yes" xml:space="preserve">
          <source>objectTypeProperty</source>
          <target state="translated">objectTypeProperty</target>
        </trans-unit>
        <trans-unit id="99c190342bdbc157950f158bba2306587a774632" translate="yes" xml:space="preserve">
          <source>objectTypeSpreadProperty</source>
          <target state="translated">objectTypeSpreadProperty</target>
        </trans-unit>
        <trans-unit id="2921cab52a7452ed36f2ec0b7571c4e68200e0a1" translate="yes" xml:space="preserve">
          <source>opaqueType</source>
          <target state="translated">opaqueType</target>
        </trans-unit>
        <trans-unit id="ce5fd2471ec9cc7abb656731e9be83a425107a0a" translate="yes" xml:space="preserve">
          <source>optional-catch-binding</source>
          <target state="translated">optional-catch-binding</target>
        </trans-unit>
        <trans-unit id="3f9027e49962f18bd34c34b5b4933c906f0e37b3" translate="yes" xml:space="preserve">
          <source>optional-chaining</source>
          <target state="translated">optional-chaining</target>
        </trans-unit>
        <trans-unit id="85ba27feba4816ee725b64f8a290609c7419a111" translate="yes" xml:space="preserve">
          <source>optionalCallExpression</source>
          <target state="translated">optionalCallExpression</target>
        </trans-unit>
        <trans-unit id="d9a283e5908dd4890f2bcdc6cda60b6016273748" translate="yes" xml:space="preserve">
          <source>optionalMemberExpression</source>
          <target state="translated">optionalMemberExpression</target>
        </trans-unit>
        <trans-unit id="513f8de9259fe7658fe14d1352c54ccf070e911f" translate="yes" xml:space="preserve">
          <source>options</source>
          <target state="translated">options</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="3d170a120059e326c2975fdda786a77e0412777d" translate="yes" xml:space="preserve">
          <source>or pass in options -</source>
          <target state="translated">또는 옵션 전달-</target>
        </trans-unit>
        <trans-unit id="b1e3e97f282b2005c3d62f91f4724303b79824f2" translate="yes" xml:space="preserve">
          <source>or the typescript preset with</source>
          <target state="translated">또는 typescript 사전 설정</target>
        </trans-unit>
        <trans-unit id="f1f1425b65e5770c87be308dd6bfee4b3fa1b113" translate="yes" xml:space="preserve">
          <source>parameters</source>
          <target state="translated">parameters</target>
        </trans-unit>
        <trans-unit id="9dac371dbaf39902676f9c063f2d5fd6b79f54fa" translate="yes" xml:space="preserve">
          <source>parenthesizedExpression</source>
          <target state="translated">parenthesizedExpression</target>
        </trans-unit>
        <trans-unit id="89add9adcae083e806e85d1955e79839776fec33" translate="yes" xml:space="preserve">
          <source>parse</source>
          <target state="translated">parse</target>
        </trans-unit>
        <trans-unit id="b577aeae32e9261275edbb164c8367b535f3d10d" translate="yes" xml:space="preserve">
          <source>parseAsync</source>
          <target state="translated">parseAsync</target>
        </trans-unit>
        <trans-unit id="18386451e3dda4e05eaa868e2e2e9f5930aa02ce" translate="yes" xml:space="preserve">
          <source>parseSync</source>
          <target state="translated">parseSync</target>
        </trans-unit>
        <trans-unit id="b5f1de8fa32b707f3542acf19cbf53c7ec78de7f" translate="yes" xml:space="preserve">
          <source>partial-application</source>
          <target state="translated">partial-application</target>
        </trans-unit>
        <trans-unit id="cb0c528c8326df16fe46acabe2b61d86289641f6" translate="yes" xml:space="preserve">
          <source>pipeline-operator</source>
          <target state="translated">pipeline-operator</target>
        </trans-unit>
        <trans-unit id="a900db766181f666dbe9e02356e39a446325844e" translate="yes" xml:space="preserve">
          <source>placeholderPattern</source>
          <target state="translated">placeholderPattern</target>
        </trans-unit>
        <trans-unit id="884ad2d2e94d2a8aebfdb3be2da57a3b14bfdfd3" translate="yes" xml:space="preserve">
          <source>placeholderWhitelist</source>
          <target state="translated">placeholderWhitelist</target>
        </trans-unit>
        <trans-unit id="7aa4803a408d9148285db183db9a255c52b44106" translate="yes" xml:space="preserve">
          <source>preserveComments</source>
          <target state="translated">preserveComments</target>
        </trans-unit>
        <trans-unit id="33a7e081fff06ba342ece7695fbf072473205fa5" translate="yes" xml:space="preserve">
          <source>preset-flow</source>
          <target state="translated">preset-flow</target>
        </trans-unit>
        <trans-unit id="ad76094d516ddb3f9f355f832801c18f691bdd90" translate="yes" xml:space="preserve">
          <source>preset-latest is deprecated</source>
          <target state="translated">사전 설정은 더 이상 사용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="e967f1d2f06082facad846d1e4676be155fb0bb8" translate="yes" xml:space="preserve">
          <source>preset-stage-1</source>
          <target state="translated">preset-stage-1</target>
        </trans-unit>
        <trans-unit id="83d75d6d8a4ac9bcef68af2748f91894695ed139" translate="yes" xml:space="preserve">
          <source>preset-stage-2</source>
          <target state="translated">preset-stage-2</target>
        </trans-unit>
        <trans-unit id="5aadacfeee79d5d0d579df8d47d531a4e3226bc6" translate="yes" xml:space="preserve">
          <source>preset-stage-3</source>
          <target state="translated">preset-stage-3</target>
        </trans-unit>
        <trans-unit id="e718604811ebd7c93103e5f0f125e0f89501069a" translate="yes" xml:space="preserve">
          <source>private methods</source>
          <target state="translated">개인 방법</target>
        </trans-unit>
        <trans-unit id="5ee6cb719208640aaf00fc4112812c799f425750" translate="yes" xml:space="preserve">
          <source>private-methods</source>
          <target state="translated">private-methods</target>
        </trans-unit>
        <trans-unit id="b44a55fdc6f989706500141a5c4e339ab774afe3" translate="yes" xml:space="preserve">
          <source>private-property-in-object</source>
          <target state="translated">private-property-in-object</target>
        </trans-unit>
        <trans-unit id="48198d86a8b65a39c3b51067f1496dab941e58bc" translate="yes" xml:space="preserve">
          <source>privateName</source>
          <target state="translated">privateName</target>
        </trans-unit>
        <trans-unit id="81d9aeea0e1a408d65b6660a176c5de83dc98e7b" translate="yes" xml:space="preserve">
          <source>program</source>
          <target state="translated">program</target>
        </trans-unit>
        <trans-unit id="76c8e36fda875781ab3b36fda9b94ab96a338238" translate="yes" xml:space="preserve">
          <source>property-literals</source>
          <target state="translated">property-literals</target>
        </trans-unit>
        <trans-unit id="a0c02331d3aba76b0956d8aeea955e9b85b7b217" translate="yes" xml:space="preserve">
          <source>property-mutators</source>
          <target state="translated">property-mutators</target>
        </trans-unit>
        <trans-unit id="2e5109f059a4eb4ad636ff51ed8323764ba572ed" translate="yes" xml:space="preserve">
          <source>propertyLiterals</source>
          <target state="translated">propertyLiterals</target>
        </trans-unit>
        <trans-unit id="1d5fda58578fd7fc46a0f11d2d71eb23de3a24b1" translate="yes" xml:space="preserve">
          <source>proto-to-assign</source>
          <target state="translated">proto-to-assign</target>
        </trans-unit>
        <trans-unit id="7ed81edcc8cc4c98198be2082f1ab8f9188c364d" translate="yes" xml:space="preserve">
          <source>qualifiedTypeIdentifier</source>
          <target state="translated">qualifiedTypeIdentifier</target>
        </trans-unit>
        <trans-unit id="6b810c90aa9a99858230c3d5ed479096a190fa4b" translate="yes" xml:space="preserve">
          <source>react</source>
          <target state="translated">react</target>
        </trans-unit>
        <trans-unit id="9b6b5a7b7ee7497a0cebea211d7ac99c137f220c" translate="yes" xml:space="preserve">
          <source>react-constant-elements</source>
          <target state="translated">react-constant-elements</target>
        </trans-unit>
        <trans-unit id="19daf8cc553c9709b0b096d19ff8a6ec4d4c36e4" translate="yes" xml:space="preserve">
          <source>react-display-name</source>
          <target state="translated">react-display-name</target>
        </trans-unit>
        <trans-unit id="193e7d3ceef708fcf1f204bc3b24a528322733c0" translate="yes" xml:space="preserve">
          <source>react-inline-elements</source>
          <target state="translated">react-inline-elements</target>
        </trans-unit>
        <trans-unit id="92e008088b7beb002325e5b1d7f6ed8801edc72e" translate="yes" xml:space="preserve">
          <source>react-jsx</source>
          <target state="translated">react-jsx</target>
        </trans-unit>
        <trans-unit id="0e4f979ace31f9096e02e11dbdbc07466c5c56a2" translate="yes" xml:space="preserve">
          <source>react-jsx-compat</source>
          <target state="translated">react-jsx-compat</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
