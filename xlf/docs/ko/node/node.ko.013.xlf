<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="aeb21b2c31f6138a4349f1a26ef1d10d1b5ff1a6" translate="yes" xml:space="preserve">
          <source>The following example compiles and executes different scripts using a single &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt; object:</source>
          <target state="translated">다음 예제는 단일 &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;컨텍스트 화 된&lt;/a&gt; 오브젝트를 사용하여 다른 스크립트를 컴파일하고 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="8f13b054eec7d30bcee88681b33d31aab6a969d5" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a &lt;code&gt;global&lt;/code&gt; variable then executes that code multiple times:</source>
          <target state="translated">다음 예제는 &lt;code&gt;global&lt;/code&gt; 변수를 증가시키는 코드를 컴파일 한 다음 해당 코드를 여러 번 실행합니다.</target>
        </trans-unit>
        <trans-unit id="033ddb37af06940fdfca9e1c7a5b5c7c2dfe050a" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the &lt;code&gt;context&lt;/code&gt; object.</source>
          <target state="translated">다음 예제에서는 전역 변수를 증가시키는 코드를 컴파일하고 다른 전역 변수의 값을 설정 한 다음 코드를 여러 번 실행합니다. 전역은 &lt;code&gt;context&lt;/code&gt; 개체에 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="c9fb83581f94c76b9a4108a24f049b5e7c53bec4" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the &lt;code&gt;sandbox&lt;/code&gt; object.</source>
          <target state="translated">다음 예제는 전역 변수를 증가시키고 다른 전역 변수의 값을 설정 한 다음 코드를 여러 번 실행하는 코드를 컴파일합니다. 전역은 &lt;code&gt;sandbox&lt;/code&gt; 객체에 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="c30a474bf85aab9a3621e91ad586681f6b319dc3" translate="yes" xml:space="preserve">
          <source>The following example compiles code that sets a global variable, then executes the code multiple times in different contexts. The globals are set on and contained within each individual &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 전역 변수를 설정하는 코드를 컴파일 한 다음 다른 컨텍스트에서 코드를 여러 번 실행합니다. 전역은 각 개별 &lt;code&gt;context&lt;/code&gt; 에 설정되고 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="fb8961b14a215e78e30d4006961e83cb3d04b94d" translate="yes" xml:space="preserve">
          <source>The following example compiles code that sets a global variable, then executes the code multiple times in different contexts. The globals are set on and contained within each individual &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 전역 변수를 설정하는 코드를 컴파일 한 다음 다른 컨텍스트에서 코드를 여러 번 실행합니다. 전역은 각 개별 &lt;code&gt;sandbox&lt;/code&gt; 내에 설정되고 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="b6f986012547f55866f8561b75f9f2da61192ba5" translate="yes" xml:space="preserve">
          <source>The following example creates a server that supports both protocols:</source>
          <target state="translated">다음 예제는 두 프로토콜을 모두 지원하는 서버를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8d5bd432616e2fe84714c6f75ee1a73d75ab165a" translate="yes" xml:space="preserve">
          <source>The following example creates an HTTP/2 server using the compatibility API:</source>
          <target state="translated">다음 예제는 호환성 API를 사용하여 HTTP / 2 서버를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="01801e4e9732878c6e3ab9f18eb68e69d7d0ed10" translate="yes" xml:space="preserve">
          <source>The following example does not throw an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; because the primitives are considered equal by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="translated">다음 예제에서는 기본 요소가 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;추상 같음 비교&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; )에 의해 동일한 것으로 간주되기 때문에 &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt; 를 발생시키지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5fdc377e86e677c416598d64a5cdb1c3693d42a9" translate="yes" xml:space="preserve">
          <source>The following example does not throw an &lt;code&gt;AssertionError&lt;/code&gt; because the primitives are considered equal by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="translated">프리미티브는 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; )에 의해 동일하게 간주되므로 다음 예제는 &lt;code&gt;AssertionError&lt;/code&gt; 를 발생시키지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f4910ba61ee0506c832df25c6d6d2b10e0d93c59" translate="yes" xml:space="preserve">
          <source>The following example highlights the effect of the &lt;code&gt;compact&lt;/code&gt; option:</source>
          <target state="translated">다음 예제는 &lt;code&gt;compact&lt;/code&gt; 옵션 의 효과를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a3cceb0a29e3538da1352100db1b933d040903e8" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to read function arguments passed from JavaScript and how to return a result:</source>
          <target state="translated">다음 예제는 JavaScript에서 전달 된 함수 인수를 읽는 방법 및 결과를 리턴하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e8d76a07c420ceb5f2c6bd3c8d7ed97b0dd6c6ce" translate="yes" xml:space="preserve">
          <source>The following example illustrates the implementation of a context-aware addon:</source>
          <target state="translated">다음 예는 상황 인식 애드온의 구현을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3bde9b74bffc2aa8a07a370885dc11bc36948754" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;code&gt;readline.Interface&lt;/code&gt; class to implement a small command-line interface:</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;readline.Interface&lt;/code&gt; 클래스를 사용하여 작은 명령 줄 인터페이스를 구현하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0ca7e485a9304684ecdb6dc7e265702277ba1084" translate="yes" xml:space="preserve">
          <source>The following example illustrates the warning that is printed to &lt;code&gt;stderr&lt;/code&gt; when too many listeners have been added to an event:</source>
          <target state="translated">다음 예제는 너무 많은 리스너가 이벤트에 추가 된 경우 &lt;code&gt;stderr&lt;/code&gt; 에 인쇄되는 경고를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="c2c0eed2e03aa1a50cbb2152ccfcb53aa848063d" translate="yes" xml:space="preserve">
          <source>The following example illustrates using both &lt;code&gt;vm.runInThisContext()&lt;/code&gt; and the JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function to run the same code:</source>
          <target state="translated">다음 예제는 &lt;code&gt;vm.runInThisContext()&lt;/code&gt; 및 JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 동일한 코드를 실행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="44a4f9b856247d478fe10097bd422d102e448df8" translate="yes" xml:space="preserve">
          <source>The following example inspects all properties of the &lt;code&gt;util&lt;/code&gt; object:</source>
          <target state="translated">다음 예제는 &lt;code&gt;util&lt;/code&gt; 객체 의 모든 속성을 검사 합니다.</target>
        </trans-unit>
        <trans-unit id="32b8fa73b8f407954ac2a664ce62506942474b5e" translate="yes" xml:space="preserve">
          <source>The following example measures the duration of &lt;code&gt;require()&lt;/code&gt; operations to load dependencies:</source>
          <target state="translated">다음 예제는 종속성을로드하기 위해 &lt;code&gt;require()&lt;/code&gt; 작업 의 지속 시간을 측정합니다 .</target>
        </trans-unit>
        <trans-unit id="ffe20b77ecdc88ce611eba4945ab9591bd34956b" translate="yes" xml:space="preserve">
          <source>The following example of an ES module exports a function:</source>
          <target state="translated">ES 모듈의 다음 예는 함수를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="a92600e7d0fb3463a2a8166fb0fbaa2cc2528188" translate="yes" xml:space="preserve">
          <source>The following example of an ES module imports the function from &lt;code&gt;addTwo.mjs&lt;/code&gt;:</source>
          <target state="translated">ES 모듈의 다음 예제는 &lt;code&gt;addTwo.mjs&lt;/code&gt; 에서 함수를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="c1c9dcf75697e35586b5a5bb4b1ec0edd1f63f75" translate="yes" xml:space="preserve">
          <source>The following example pipes all of the data from the &lt;code&gt;readable&lt;/code&gt; into a file named &lt;code&gt;file.txt&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;readable&lt;/code&gt; 모든 데이터를 &lt;code&gt;file.txt&lt;/code&gt; 라는 파일로 파이프합니다 .</target>
        </trans-unit>
        <trans-unit id="c41becda6c6ddadb16cb7c297ead592bada0bfdb" translate="yes" xml:space="preserve">
          <source>The following example shows a simple &lt;code&gt;EventEmitter&lt;/code&gt; instance with a single listener. The &lt;code&gt;eventEmitter.on()&lt;/code&gt; method is used to register listeners, while the &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method is used to trigger the event.</source>
          <target state="translated">다음 예제는 단일 리스너가 있는 간단한 &lt;code&gt;EventEmitter&lt;/code&gt; 인스턴스 를 보여줍니다 . &lt;code&gt;eventEmitter.on()&lt;/code&gt; 그동안 방법은 청취자를 등록하는 데 사용되는 &lt;code&gt;eventEmitter.emit()&lt;/code&gt; 메소드는, 이벤트를 트리거하는 데 사용된다.</target>
        </trans-unit>
        <trans-unit id="b1e0d5b2d0494b2a5b663eced98cf1623d0cd438" translate="yes" xml:space="preserve">
          <source>The following example shows how these can be set up. Some class names are from the &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;v8&lt;/code&gt; C++ namespaces, respectively.</source>
          <target state="translated">다음 예는 이러한 설정 방법을 보여줍니다. 일부 클래스 이름은 각각 &lt;code&gt;node&lt;/code&gt; 및 &lt;code&gt;v8&lt;/code&gt; C ++ 네임 스페이스 에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="77cc6a960e261ea5fe0a8851994c70667c7dbf65" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the &lt;code&gt;AsyncResource&lt;/code&gt; class to properly associate an event listener with the correct execution context. The same approach can be applied to a &lt;a href=&quot;stream#stream_stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; or a similar event-driven class.</source>
          <target state="translated">다음 예제는 &lt;code&gt;AsyncResource&lt;/code&gt; 클래스 를 사용하여 이벤트 리스너를 올바른 실행 컨텍스트와 올바르게 연결하는 방법을 보여줍니다 . 동일한 접근 방식을 &lt;a href=&quot;stream#stream_stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; 또는 유사한 이벤트 기반 클래스에 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d0cc0d557e4540fd1a8ec224fa26115df645a069" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the &lt;code&gt;AsyncResource&lt;/code&gt; class to properly provide async tracking for a &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; pool. Other resource pools, such as database connection pools, can follow a similar model.</source>
          <target state="translated">다음 예제는 &lt;code&gt;AsyncResource&lt;/code&gt; 클래스 를 사용하여 &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 풀에 대한 비동기 추적을 올바르게 제공 하는 방법을 보여줍니다 . 데이터베이스 연결 풀과 같은 다른 자원 풀은 유사한 모델을 따를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2ad747c3e73cbd8af737ecbbdd22c1b787abaf4" translate="yes" xml:space="preserve">
          <source>The following example shows the basic use of the &lt;code&gt;StringDecoder&lt;/code&gt; class.</source>
          <target state="translated">다음 예제는 &lt;code&gt;StringDecoder&lt;/code&gt; 클래스 의 기본 사용법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="1551aa3acf990613538e77ac486dca4770207f7d" translate="yes" xml:space="preserve">
          <source>The following example shows two new commands added to the REPL instance:</source>
          <target state="translated">다음 예제는 REPL 인스턴스에 추가 된 두 가지 새로운 명령을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="31b7cf0757ca94b16ecb681a09b153f7b1cc69ee" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;AsyncLocalStorage&lt;/code&gt; to build a simple logger that assigns IDs to incoming HTTP requests and includes them in messages logged within each request.</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;AsyncLocalStorage&lt;/code&gt; 를 사용 하여 수신 HTTP 요청에 ID를 할당하고 각 요청에 기록 된 메시지에 ID를 포함하는 간단한 로거를 빌드합니다.</target>
        </trans-unit>
        <trans-unit id="96a9bcfb92a0b7ab67cff41af2105cc6ae699957" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt; and Performance APIs to measure the actual duration of a Timeout operation (including the amount of time it to execute the callback).</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;async_hooks&quot;&gt;비동기 후크&lt;/a&gt; 및 성능 API를 사용하여 타임 아웃 작업의 실제 지속 시간 (콜백을 실행하는 시간 포함)을 측정합니다.</target>
        </trans-unit>
        <trans-unit id="57452bee9d2dd671ae96443564724740da3fdf5f" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt; and Performance APIs to measure the actual duration of a Timeout operation (including the amount of time it took to execute the callback).</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt; 및 Performance API를 사용하여 Timeout 작업의 실제 기간 (콜백을 실행하는 데 걸린 시간 포함)을 측정합니다.</target>
        </trans-unit>
        <trans-unit id="754e48d5c1d68cbdb209a06be78e522c57e6261b" translate="yes" xml:space="preserve">
          <source>The following example, for instance, provides separate REPLs on &lt;code&gt;stdin&lt;/code&gt;, a Unix socket, and a TCP socket:</source>
          <target state="translated">예를 들어 다음 예는 &lt;code&gt;stdin&lt;/code&gt; , Unix 소켓 및 TCP 소켓 에 별도의 REPL을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="9bc222382a2fde60cd8be2c8364dcbf4c457ed07" translate="yes" xml:space="preserve">
          <source>The following example, would allow access to &lt;code&gt;fs&lt;/code&gt; for all &lt;code&gt;data:&lt;/code&gt; resources:</source>
          <target state="translated">다음 예에서는 모든 &lt;code&gt;data:&lt;/code&gt; 대해 &lt;code&gt;fs&lt;/code&gt; 에 대한 액세스를 허용합니다 . 리소스 :</target>
        </trans-unit>
        <trans-unit id="a898290ebd369fbfc83b297e55a672221417ee31" translate="yes" xml:space="preserve">
          <source>The following example, would allow access to &lt;code&gt;fs&lt;/code&gt; for all resources within &lt;code&gt;./app/&lt;/code&gt;:</source>
          <target state="translated">다음 예에서는 &lt;code&gt;./app/&lt;/code&gt; 내의 모든 리소스에 대해 &lt;code&gt;fs&lt;/code&gt; 에 대한 액세스를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="47d4020d4b2c5df833275503f11d8bfe8b6a062a" translate="yes" xml:space="preserve">
          <source>The following fields in &lt;code&gt;package.json&lt;/code&gt; files are used in Node.js:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 파일 의 다음 필드 는 Node.js에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cf5ff269334eb6c7517b0c927c79fe7139b193e8" translate="yes" xml:space="preserve">
          <source>The following flags are available wherever the &lt;code&gt;flag&lt;/code&gt; option takes a string.</source>
          <target state="translated">다음 플래그는 &lt;code&gt;flag&lt;/code&gt; 옵션이 문자열을 취하는 모든 곳에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4d9c42618de47c08d507d4fd8b458fff43a93df5" translate="yes" xml:space="preserve">
          <source>The following flags are available wherever the &lt;code&gt;flag&lt;/code&gt; option takes a string:</source>
          <target state="translated">&lt;code&gt;flag&lt;/code&gt; 옵션이 문자열을 취하는 모든 위치에서 다음 플래그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7a1c76d837f36a3ef7e701cb998880b118d16c09" translate="yes" xml:space="preserve">
          <source>The following flags can be passed as hints to &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 플래그는 &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 힌트로 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a38f3d5894a095d8dc07f60288425cccca1e58c" translate="yes" xml:space="preserve">
          <source>The following flags can be set for advanced control over the compression algorithm and memory usage tuning:</source>
          <target state="translated">압축 알고리즘 및 메모리 사용량 조정에 대한 고급 제어를 위해 다음 플래그를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4019f64a0bae27f5870fc15735a413e010398918" translate="yes" xml:space="preserve">
          <source>The following illustrates a client for the echo server example from &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; &lt;/a&gt; 의 에코 서버 예제에 대한 클라이언트를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="d983e488f945092b2073ba9beaf4353b05639e59" translate="yes" xml:space="preserve">
          <source>The following illustrates a hypothetical example of a REPL that performs translation of text from one language to another:</source>
          <target state="translated">다음은 한 언어에서 다른 언어로 텍스트를 번역하는 REPL의 가상 예를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="fc3d12a58aaf804115d14b65f68e56175aecdec4" translate="yes" xml:space="preserve">
          <source>The following illustrates a rather simplistic (and somewhat pointless) custom &lt;code&gt;Writable&lt;/code&gt; stream implementation. While this specific &lt;code&gt;Writable&lt;/code&gt; stream instance is not of any real particular usefulness, the example illustrates each of the required elements of a custom &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream instance:</source>
          <target state="translated">다음은 다소 단순한 (그리고 다소 의미없는) 커스텀 &lt;code&gt;Writable&lt;/code&gt; 스트림 구현을 보여줍니다. 이 특정 &lt;code&gt;Writable&lt;/code&gt; 스트림 인스턴스는 실제로 유용하지는 않지만이 예제는 사용자 정의 &lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt; 스트림 인스턴스 의 각 필수 요소를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="ab0b3748bcc9f54c4bae9761c0f15c2ce5f381bc" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple HTTP/2 server using the Core API. Since there are no browsers known that support &lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;unencrypted HTTP/2&lt;/a&gt;, the use of &lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt;&lt;code&gt;http2.createSecureServer()&lt;/code&gt;&lt;/a&gt; is necessary when communicating with browser clients.</source>
          <target state="translated">다음은 Core API를 사용하는 간단한 HTTP / 2 서버를 보여줍니다. 지원하는 것으로 알려져 어떤 브라우저가 없기 때문에 &lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;암호화되지 않은 HTTP / 2&lt;/a&gt; 의 사용 &lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt; &lt;code&gt;http2.createSecureServer()&lt;/code&gt; &lt;/a&gt; 브라우저 클라이언트와 통신 할 때 필요하다.</target>
        </trans-unit>
        <trans-unit id="af191c6114a1642c6a84dbbd336a0f54f29f788f" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple echo server:</source>
          <target state="translated">다음은 간단한 에코 서버를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4341b6b6e9ceda6da3825b7318e4cb410bd82903" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple example of a &lt;code&gt;Duplex&lt;/code&gt; stream that wraps a hypothetical lower-level source object to which data can be written, and from which data can be read, albeit using an API that is not compatible with Node.js streams. The following illustrates a simple example of a &lt;code&gt;Duplex&lt;/code&gt; stream that buffers incoming written data via the &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interface that is read back out via the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">다음 은 Node.js 스트림과 호환되지 않는 API를 사용하더라도 데이터를 쓸 수 있고 데이터를 읽을 수있는 가상의 하위 수준 소스 개체를 래핑 하는 &lt;code&gt;Duplex&lt;/code&gt; 스트림 의 간단한 예입니다 . 다음 은 &lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 인터페이스 를 통해 다시 읽는 &lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt; 인터페이스를 통해 들어오는 쓰기 데이터를 버퍼링 하는 &lt;code&gt;Duplex&lt;/code&gt; 스트림 의 간단한 예를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="ad5273689c2d2292d7ff4ac3bb67b226d3d1e973" translate="yes" xml:space="preserve">
          <source>The following illustrates an HTTP/2 client:</source>
          <target state="translated">다음은 HTTP / 2 클라이언트를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="09d2a922ad3dab12111210bf177cd900efbbaafc" translate="yes" xml:space="preserve">
          <source>The following illustrates resuming a TLS session:</source>
          <target state="translated">다음은 TLS 세션 재개를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="278f598f1053fbfcdd5ef1743a8a49fb3459a4b2" translate="yes" xml:space="preserve">
          <source>The following is a basic example of a &lt;code&gt;Readable&lt;/code&gt; stream that emits the numerals from 1 to 1,000,000 in ascending order, and then ends.</source>
          <target state="translated">다음은 1에서 1,000,000 사이의 숫자를 오름차순으로 내 보낸 후 끝나는 &lt;code&gt;Readable&lt;/code&gt; 스트림 의 기본 예입니다 .</target>
        </trans-unit>
        <trans-unit id="867f597fcc104be5181f22b330bf67d8352af244" translate="yes" xml:space="preserve">
          <source>The following is a simple demonstration of &lt;code&gt;triggerAsyncId&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;triggerAsyncId&lt;/code&gt; 의 간단한 데모입니다 .</target>
        </trans-unit>
        <trans-unit id="260f262e327d647faa2a4e5840f83101f8eba105" translate="yes" xml:space="preserve">
          <source>The following is an example with additional information about the calls to &lt;code&gt;init&lt;/code&gt; between the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; calls, specifically what the callback to &lt;code&gt;listen()&lt;/code&gt; will look like. The output formatting is slightly more elaborate to make calling context easier to see.</source>
          <target state="translated">다음은 &lt;code&gt;before&lt;/code&gt; 호출 과 &lt;code&gt;after&lt;/code&gt; 호출 사이의 &lt;code&gt;init&lt;/code&gt; 호출에 대한 추가 정보 , 특히 &lt;code&gt;listen()&lt;/code&gt; 대한 콜백의 모양에 대한 추가 정보가있는 예입니다 . 출력 형식은 호출 컨텍스트를보다 쉽게 ​​볼 수 있도록 조금 더 정교합니다.</target>
        </trans-unit>
        <trans-unit id="1256eca8571fc116738506ae5b4d0e9994bd1d62" translate="yes" xml:space="preserve">
          <source>The following is an overview of the &lt;code&gt;AsyncResource&lt;/code&gt; API.</source>
          <target state="translated">다음은 &lt;code&gt;AsyncResource&lt;/code&gt; API 의 개요입니다 .</target>
        </trans-unit>
        <trans-unit id="e4bc83cc4db6270d1ad82593b194f6f877bcf5a6" translate="yes" xml:space="preserve">
          <source>The following is the approximate equivalent of the N-API counterpart:</source>
          <target state="translated">다음은 N-API에 해당하는 대략적인 내용입니다.</target>
        </trans-unit>
        <trans-unit id="6d649a0ac4bec9151f47c63711d19dadbe0acbb7" translate="yes" xml:space="preserve">
          <source>The following key combinations in the REPL have these special effects:</source>
          <target state="translated">REPL의 다음 키 조합은 이러한 특수 효과를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="64d7d8e310bc919990b2824c08a86076aaf5ac1c" translate="yes" xml:space="preserve">
          <source>The following legacy character encodings are also supported:</source>
          <target state="translated">다음 레거시 문자 인코딩도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="49c2fdba97add89a1173ca36a3193d8ce2992ef9" translate="yes" xml:space="preserve">
          <source>The following methods are exposed by the V8 engine in the general API but do not display anything unless used in conjunction with the &lt;a href=&quot;debugger&quot;&gt;inspector&lt;/a&gt; (&lt;code&gt;--inspect&lt;/code&gt; flag).</source>
          <target state="translated">다음 메소드는 일반 API에서 V8 엔진에 의해 노출되지만 &lt;a href=&quot;debugger&quot;&gt;인스펙터&lt;/a&gt; ( &lt;code&gt;--inspect&lt;/code&gt; 플래그) 와 함께 사용되지 않으면 아무 것도 표시하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="df2f010a82793abfb4a9d63d3276fee7701f3dcd" translate="yes" xml:space="preserve">
          <source>The following methods from the &lt;code&gt;dns&lt;/code&gt; module are available:</source>
          <target state="translated">&lt;code&gt;dns&lt;/code&gt; 모듈 에서 다음 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b6cdbd66510df63c1ecb7d5213f3039eedea610" translate="yes" xml:space="preserve">
          <source>The following methods from the &lt;code&gt;dnsPromises&lt;/code&gt; API are available:</source>
          <target state="translated">&lt;code&gt;dnsPromises&lt;/code&gt; API 에서 다음 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b1984db9a35068fa08e4ea234970603e837d517" translate="yes" xml:space="preserve">
          <source>The following process scheduling constants are exported by &lt;code&gt;os.constants.priority&lt;/code&gt;.</source>
          <target state="translated">다음 프로세스 스케줄링 상수는 &lt;code&gt;os.constants.priority&lt;/code&gt; 에 의해 내보내집니다 .</target>
        </trans-unit>
        <trans-unit id="eac28d8f1b469011af588c78e77fb6ab775d28c2" translate="yes" xml:space="preserve">
          <source>The following process scheduling constants are exported by &lt;code&gt;os.constants.priority&lt;/code&gt;:</source>
          <target state="translated">다음 프로세스 스케줄링 상수는 &lt;code&gt;os.constants.priority&lt;/code&gt; 에 의해 익스포트됩니다 .</target>
        </trans-unit>
        <trans-unit id="05e8e35bc8738a6c9e6ba2f51d2e103a8fe9ff86" translate="yes" xml:space="preserve">
          <source>The following sections will provide an overview over how to use these APIs to create an application from scratch that will perform the equivalent of &lt;code&gt;node -e &amp;lt;code&amp;gt;&lt;/code&gt;, i.e. that will take a piece of JavaScript and run it in a Node.js-specific environment.</source>
          <target state="translated">다음 섹션에 해당하는 수행 할 처음부터 응용 프로그램을 만들려면 다음 API를 사용하는 방법을 통해 개요를 제공 할 것입니다 &lt;code&gt;node -e &amp;lt;code&amp;gt;&lt;/code&gt; 자바 스크립트의 조각을하고 Node.js를 별에서 실행됩니다, 즉 환경.</target>
        </trans-unit>
        <trans-unit id="3a03d721aedc7dfabfb213b9567f34b8b8ff2d75" translate="yes" xml:space="preserve">
          <source>The following signal constants are exported by &lt;code&gt;os.constants.signals&lt;/code&gt;.</source>
          <target state="translated">다음 신호 상수는 &lt;code&gt;os.constants.signals&lt;/code&gt; 에 의해 내보내집니다 .</target>
        </trans-unit>
        <trans-unit id="c23710ea5bb9ea17b12e61f234bea0f2bdf42b4d" translate="yes" xml:space="preserve">
          <source>The following signal constants are exported by &lt;code&gt;os.constants.signals&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;os.constants.signals&lt;/code&gt; 는 다음과 같은 신호 상수를 내 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="fe0c0661c70aca40b78bbbed90aaded64a1d7b2b" translate="yes" xml:space="preserve">
          <source>The following simple example illustrates the basic use of the &lt;code&gt;readline&lt;/code&gt; module.</source>
          <target state="translated">다음의 간단한 예제는 &lt;code&gt;readline&lt;/code&gt; 모듈 의 기본 사용법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="8b095df75d6e5f3132d17f5e1853a984cc4a69d7" translate="yes" xml:space="preserve">
          <source>The following snippet installs a listener on the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused&quot;&gt;&lt;code&gt;'Debugger.paused'&lt;/code&gt;&lt;/a&gt; event, and prints the reason for program suspension whenever program execution is suspended (through breakpoints, for example):</source>
          <target state="translated">다음 스 니펫은 &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused&quot;&gt; &lt;code&gt;'Debugger.paused'&lt;/code&gt; &lt;/a&gt; 이벤트 에 리스너를 설치하고 프로그램 실행이 일시 중단 될 때마다 (예 : 중단 점을 통해) 프로그램 일시 중단 이유를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="02e62b9cc67d1377899aa5cca1cf3adcd03bb0ba" translate="yes" xml:space="preserve">
          <source>The following special commands are supported by all REPL instances:</source>
          <target state="translated">다음 특수 명령은 모든 REPL 인스턴스에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="f011333da1f4a77a0b91e406152a711edff558ba" translate="yes" xml:space="preserve">
          <source>The following three variables may be used inside the function body following an invocation of &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt; 호출에 따라 함수 본문 내에서 다음 세 가지 변수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="24b55f4e401abc1ed4f27290d5b75f7d33dac225" translate="yes" xml:space="preserve">
          <source>The following utility functions are also available in case native code needs to create an &lt;code&gt;Error&lt;/code&gt; object: &lt;a href=&quot;#n_api_napi_create_error&quot;&gt;&lt;code&gt;napi_create_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_create_type_error&quot;&gt;&lt;code&gt;napi_create_type_error&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#n_api_napi_create_range_error&quot;&gt;&lt;code&gt;napi_create_range_error&lt;/code&gt;&lt;/a&gt;, where result is the &lt;code&gt;napi_value&lt;/code&gt; that refers to the newly created JavaScript &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">원시 코드가 &lt;code&gt;Error&lt;/code&gt; 오브젝트 를 작성해야하는 경우 &lt;a href=&quot;#n_api_napi_create_error&quot;&gt; &lt;code&gt;napi_create_error&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#n_api_napi_create_type_error&quot;&gt; &lt;code&gt;napi_create_type_error&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#n_api_napi_create_range_error&quot;&gt; &lt;code&gt;napi_create_range_error&lt;/code&gt; &lt;/a&gt; 와 같은 유틸리티 함수도 사용할 수 있습니다 . 여기서 결과는 새로 작성된 JavaScript &lt;code&gt;Error&lt;/code&gt; 오브젝트 를 나타내는 &lt;code&gt;napi_value&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="1621e464e04069d36635d065a53f19f9b7f89297" translate="yes" xml:space="preserve">
          <source>The following utility functions are also available in case native code needs to throw an exception or determine if a &lt;code&gt;napi_value&lt;/code&gt; is an instance of a JavaScript &lt;code&gt;Error&lt;/code&gt; object: &lt;a href=&quot;#n_api_napi_throw_error&quot;&gt;&lt;code&gt;napi_throw_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_throw_type_error&quot;&gt;&lt;code&gt;napi_throw_type_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_throw_range_error&quot;&gt;&lt;code&gt;napi_throw_range_error&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_is_error&quot;&gt;&lt;code&gt;napi_is_error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">원시 코드에서 예외를 발생 시키거나 &lt;code&gt;napi_value&lt;/code&gt; 가 JavaScript &lt;code&gt;Error&lt;/code&gt; 오브젝트 의 인스턴스 인지 판별해야하는 경우에도 다음 유틸리티 함수를 사용할 수 있습니다 ( &lt;a href=&quot;#n_api_napi_throw_error&quot;&gt; &lt;code&gt;napi_throw_error&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#n_api_napi_throw_type_error&quot;&gt; &lt;code&gt;napi_throw_type_error&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#n_api_napi_throw_range_error&quot;&gt; &lt;code&gt;napi_throw_range_error&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#n_api_napi_is_error&quot;&gt; &lt;code&gt;napi_is_error&lt;/code&gt; )&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cdd856e5e213c478e5acd13b2d714aebc9d6ad2d" translate="yes" xml:space="preserve">
          <source>The following values are valid flush operations for Brotli-based streams:</source>
          <target state="translated">다음 값은 Brotli 기반 스트림에 유효한 플러시 조작입니다.</target>
        </trans-unit>
        <trans-unit id="3f3a4515c9bdd9d75efcfd65fcf52a6b5a6fde1f" translate="yes" xml:space="preserve">
          <source>The following values are valid for &lt;code&gt;mode&lt;/code&gt;:</source>
          <target state="translated">다음 값은 &lt;code&gt;mode&lt;/code&gt; 유효 합니다 .</target>
        </trans-unit>
        <trans-unit id="738a7c908290a06b8479e3e2410554e41554f7c5" translate="yes" xml:space="preserve">
          <source>The following values are valid for this property (as defined in &lt;code&gt;constants&lt;/code&gt; module):</source>
          <target state="translated">&lt;code&gt;constants&lt;/code&gt; 모듈에 정의 된 대로이 특성에 다음 값이 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="49edf49d19b5c17b9340b245b83c7fca4b031913" translate="yes" xml:space="preserve">
          <source>The following will also trigger the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted:</source>
          <target state="translated">다음은 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 이벤트가 발생하도록 트리거합니다 .</target>
        </trans-unit>
        <trans-unit id="7016b7143d75a886c451f603cf021c125c604f1b" translate="yes" xml:space="preserve">
          <source>The following, for instance, will throw the &lt;a href=&quot;errors#errors_class_typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; because there is no matching error type in the assertion:</source>
          <target state="translated">예를 들어, 어설 션에 일치하는 오류 유형이 없으므로 다음은 &lt;a href=&quot;errors#errors_class_typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1239b452afe3e8c9353f8cf2237202dd13539cb8" translate="yes" xml:space="preserve">
          <source>The format is backward-compatible (i.e. safe to store to disk). Equal JavaScript values may result in different serialized output.</source>
          <target state="translated">형식은 이전 버전과 호환됩니다 (즉, 디스크에 안전하게 저장). 동일한 JavaScript 값은 다른 직렬화 된 출력을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7cb81ba7cf7f60d6a47251a809d57c4185d8503f" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;alt&lt;/code&gt; parameter is strictly defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7838&quot;&gt;RFC 7838&lt;/a&gt; as an ASCII string containing a comma-delimited list of &quot;alternative&quot; protocols associated with a specific host and port.</source>
          <target state="translated">&lt;code&gt;alt&lt;/code&gt; 매개 변수 의 형식은 &lt;a href=&quot;https://tools.ietf.org/html/rfc7838&quot;&gt;RFC 7838에&lt;/a&gt; 의해 특정 호스트 및 포트와 연관된 &quot;대체&quot;프로토콜의 쉼표로 구분 된 목록을 포함하는 ASCII 문자열로 엄격하게 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="c8075960e310ff5b1e3a882d6650a2409b78086b" translate="yes" xml:space="preserve">
          <source>The format of the object that the returned Promise may resolve with is specific to the V8 engine and may change from one version of V8 to the next.</source>
          <target state="translated">반환 된 Promise가 확인할 수있는 개체의 형식은 V8 엔진에 따라 다르며 V8의 한 버전에서 다음 버전으로 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad732213f9b3400abc0c0e9b66ef4d024bf4da4c" translate="yes" xml:space="preserve">
          <source>The formatting process operates as follows:</source>
          <target state="translated">포맷 프로세스는 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="30abb2b37913e247d0ec5e3759ca44af61effca5" translate="yes" xml:space="preserve">
          <source>The fulfilled value of a linking promise is not a &lt;code&gt;vm.Module&lt;/code&gt; object.</source>
          <target state="translated">연결 약속의 이행 된 값은 &lt;code&gt;vm.Module&lt;/code&gt; 개체 가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="f337814fcd91de3a7556e75eda9add23e7ee1277" translate="yes" xml:space="preserve">
          <source>The fulfilled value of a linking promise is not a &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object.</source>
          <target state="translated">연결 약속의 이행 된 가치는 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 객체 가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="eb7f4cc5ccf8ca2620d736b7829436f81776654e" translate="yes" xml:space="preserve">
          <source>The full code can be found &lt;a href=&quot;https://github.com/nodejs/node/blob/master/test/embedding/embedtest.cc&quot;&gt;in the Node.js source tree&lt;/a&gt;.</source>
          <target state="translated">전체 코드는 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/test/embedding/embedtest.cc&quot;&gt;Node.js 소스 트리에서&lt;/a&gt; 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="50b13dc828820a8586bad1f2362690306cda5b10" translate="yes" xml:space="preserve">
          <source>The full set of possible &lt;code&gt;napi_status&lt;/code&gt; values is defined in &lt;code&gt;napi_api_types.h&lt;/code&gt;.</source>
          <target state="translated">가능한 &lt;code&gt;napi_status&lt;/code&gt; 값 의 전체 세트는 napi_api_types.h 에 정의되어 &lt;code&gt;napi_api_types.h&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c714d055cf64b4d18934498a66680f7181dff0ed" translate="yes" xml:space="preserve">
          <source>The fully resolved filename of the module.</source>
          <target state="translated">완전히 해결 된 모듈의 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9b507486ca1a6dcd2b0885675ab7c24ab99d378e" translate="yes" xml:space="preserve">
          <source>The function call does not return, the process will be terminated.</source>
          <target state="translated">함수 호출이 반환되지 않고 프로세스가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="b122914b230c847485ca349abc7360f05a5492f8" translate="yes" xml:space="preserve">
          <source>The function is expected to return a &lt;code&gt;Module&lt;/code&gt; object or a &lt;code&gt;Promise&lt;/code&gt; that eventually resolves to a &lt;code&gt;Module&lt;/code&gt; object. The returned &lt;code&gt;Module&lt;/code&gt; must satisfy the following two invariants:</source>
          <target state="translated">이 함수는 &lt;code&gt;Module&lt;/code&gt; 객체 또는 &lt;code&gt;Promise&lt;/code&gt; 를 반환하여 결국 &lt;code&gt;Module&lt;/code&gt; 객체 로 해석됩니다 . 반환 된 &lt;code&gt;Module&lt;/code&gt; 은 다음 두 가지 변형을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="3a6d8c40f84a833fb329f2cae8f5efb837bf68c4" translate="yes" xml:space="preserve">
          <source>The function must have originally been registered with &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt;, otherwise the process will abort.</source>
          <target state="translated">함수는 원래 &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt; 에 등록되어 있어야합니다 . 그렇지 않으면 프로세스가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="f268afb017b2dfe54dae374d2c1d5066522cf9d7" translate="yes" xml:space="preserve">
          <source>The function must return &lt;code&gt;true&lt;/code&gt; to indicate all internal validations passed. It will otherwise fail with an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">함수 는 모든 내부 유효성 검사가 통과되었음을 나타 내기 위해 &lt;code&gt;true&lt;/code&gt; 를 반환해야합니다 . 그렇지 않으면 &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; 로&lt;/a&gt; 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="74b9b9f191b8a04197be696e6514330b1c5ba291" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;this&lt;/code&gt; for consistency with other Readable streams.</source>
          <target state="translated">이 함수는 다른 읽기 가능한 스트림과의 일관성을 위해 &lt;code&gt;this&lt;/code&gt; 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="2e6bbef96f8b05fe994e169f24ac0b9bcca8e67b" translate="yes" xml:space="preserve">
          <source>The functions available and how to use them are documented in &lt;a href=&quot;n-api&quot;&gt;C/C++ addons with N-API&lt;/a&gt;.</source>
          <target state="translated">사용 가능한 기능과 사용 방법은 &lt;a href=&quot;n-api&quot;&gt;N-API가&lt;/a&gt; 있는 C / C ++ 애드온에 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c483586a4f9507cbc3d3fd24d9b71ec8af1eb54" translate="yes" xml:space="preserve">
          <source>The functions available and how to use them are documented in the section titled &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt;.</source>
          <target state="translated">사용 가능한 기능 및 사용 방법은 &lt;a href=&quot;n-api&quot;&gt;C / C ++ 애드온-N-API&lt;/a&gt; 섹션에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c73e5b48c342bebc80a4170c898186da78c1202a" translate="yes" xml:space="preserve">
          <source>The given callback is registered as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event.</source>
          <target state="translated">주어진 콜백은 &lt;code&gt;'timeout'&lt;/code&gt; 이벤트 에서 리스너로 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="a0434bbb6d598e35c8b0d5e01cd6743bb08d18b3" translate="yes" xml:space="preserve">
          <source>The given crypto key object's type is invalid for the attempted operation.</source>
          <target state="translated">지정된 암호화 키 객체 유형이 시도한 작업에 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c643bb78ec82b592d55c33129cdd02c0ee3eb507" translate="yes" xml:space="preserve">
          <source>The given crypto keys are incompatible with the attempted operation.</source>
          <target state="translated">주어진 암호화 키가 시도한 작업과 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ac3e3f397f73d5e18840408ac7c7de7a4f0bfb44" translate="yes" xml:space="preserve">
          <source>The given sequence of paths is processed from right to left, with each subsequent &lt;code&gt;path&lt;/code&gt; prepended until an absolute path is constructed. For instance, given the sequence of path segments: &lt;code&gt;/foo&lt;/code&gt;, &lt;code&gt;/bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;, calling &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; would return &lt;code&gt;/bar/baz&lt;/code&gt; because &lt;code&gt;'baz'&lt;/code&gt; is not an absolute path but &lt;code&gt;'/bar' + '/' + 'baz'&lt;/code&gt; is.</source>
          <target state="translated">주어진 경로 시퀀스는 오른쪽에서 왼쪽으로 처리되며 절대 경로가 구성 될 때까지 각 후속 &lt;code&gt;path&lt;/code&gt; 앞에 추가됩니다. 예를 들어 경로 세그먼트의 시퀀스가 ​​주어지면 &lt;code&gt;/foo&lt;/code&gt; , &lt;code&gt;/bar&lt;/code&gt; , &lt;code&gt;baz&lt;/code&gt; , &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; 호출 은 &lt;code&gt;'baz'&lt;/code&gt; 가 아니기 때문에 &lt;code&gt;/bar/baz&lt;/code&gt; 를 반환 합니다. 절대 경로이지만 &lt;code&gt;'/bar' + '/' + 'baz'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="15355f464703eae74bd506a06b7ddeaa6e863a42" translate="yes" xml:space="preserve">
          <source>The given sequence of paths is processed from right to left, with each subsequent &lt;code&gt;path&lt;/code&gt; prepended until an absolute path is constructed. For instance, given the sequence of path segments: &lt;code&gt;/foo&lt;/code&gt;, &lt;code&gt;/bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;, calling &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; would return &lt;code&gt;/bar/baz&lt;/code&gt;.</source>
          <target state="translated">주어진 경로 순서는 오른쪽에서 왼쪽으로 처리되며 , 절대 경로가 구성 될 때까지 각 후속 &lt;code&gt;path&lt;/code&gt; 앞에 추가됩니다. 예를 들어, 경로 세그먼트 시퀀스가 &lt;code&gt;/foo&lt;/code&gt; , &lt;code&gt;/bar&lt;/code&gt; , &lt;code&gt;baz&lt;/code&gt; 인 경우 &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; 호출 하면 &lt;code&gt;/bar/baz&lt;/code&gt; 가 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="116c1174f7b0374b189bdc248ad51e1a1c759ce8" translate="yes" xml:space="preserve">
          <source>The global &lt;code&gt;console&lt;/code&gt; is a special &lt;code&gt;Console&lt;/code&gt; whose output is sent to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt;. It is equivalent to calling:</source>
          <target state="translated">글로벌 &lt;code&gt;console&lt;/code&gt; 은 출력이 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 로&lt;/a&gt; 전송 되는 특수 &lt;code&gt;Console&lt;/code&gt; 입니다 . 다음을 호출하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c8071093900b9cffe0f9d5d764501c77193fb3b5" translate="yes" xml:space="preserve">
          <source>The graph only shows &lt;em&gt;when&lt;/em&gt; a resource was created, not &lt;em&gt;why&lt;/em&gt;, so to track the &lt;em&gt;why&lt;/em&gt; use &lt;code&gt;triggerAsyncId&lt;/code&gt;.</source>
          <target state="translated">그래프 는 자원이 작성된 &lt;em&gt;시기&lt;/em&gt; 만 표시 하며 &lt;em&gt;이유&lt;/em&gt; 는 아니므로 &lt;code&gt;triggerAsyncId&lt;/code&gt; 사용 &lt;em&gt;이유&lt;/em&gt; 를 추적하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d61da0b479d948a06a70f90da06d8355d300955" translate="yes" xml:space="preserve">
          <source>The graph only shows &lt;em&gt;when&lt;/em&gt; a resource was created, not &lt;em&gt;why&lt;/em&gt;, so to track the &lt;em&gt;why&lt;/em&gt; use &lt;code&gt;triggerAsyncId&lt;/code&gt;. Which can be represented with the following graph:</source>
          <target state="translated">그래프 는 리소스가 생성 된 &lt;em&gt;시기&lt;/em&gt; 만 표시 하고 &lt;em&gt;이유&lt;/em&gt; 는 표시 하지 않으므로 &lt;code&gt;triggerAsyncId&lt;/code&gt; 를 사용 하는 &lt;em&gt;이유&lt;/em&gt; 를 추적 할 &lt;em&gt;수&lt;/em&gt; 있습니다 . 다음 그래프로 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78c2df2630147331ef167e43f5bfee36cfe7ff49" translate="yes" xml:space="preserve">
          <source>The group may read and write the file.</source>
          <target state="translated">그룹은 파일을 읽고 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de647ee3bee7edc8c8e05a3fc4ad18d8916c3943" translate="yes" xml:space="preserve">
          <source>The handler function will be invoked with two arguments:</source>
          <target state="translated">핸들러 함수는 두 개의 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f120041c159476fa76d1281443ab71e42f4fb65f" translate="yes" xml:space="preserve">
          <source>The hazards described in the previous section are avoided or minimized.</source>
          <target state="translated">이전 섹션에서 설명한 위험은 피하거나 최소화됩니다.</target>
        </trans-unit>
        <trans-unit id="ba78c097f5014bcc5443343dc28bab106befcb25" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js environment was initialized.</source>
          <target state="translated">Node.js 환경이 초기화 된 고해상도 밀리 초 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="64b8c9ee8fc1b0b78b060b35f917660bed2faee1" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js event loop exited. If the event loop has not yet exited, the property has the value of -1. It can only have a value of not -1 in a handler of the &lt;a href=&quot;process#process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">Node.js 이벤트 루프가 종료 된 고해상도 밀리 초 타임 스탬프입니다. 이벤트 루프가 아직 종료되지 않은 경우 특성 값은 -1입니다. &lt;a href=&quot;process#process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt; 이벤트 핸들러에서 -1이 아닌 값만 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="04181966da212756623d143ee5508e37cfa98637" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js event loop started. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of -1.</source>
          <target state="translated">Node.js 이벤트 루프가 시작된 고해상도 밀리 초 타임 스탬프입니다. 이벤트 루프가 아직 시작되지 않은 경우 (예 : 기본 스크립트의 첫 틱에서) 속성의 값은 -1입니다.</target>
        </trans-unit>
        <trans-unit id="a8ae321117af7a2e6dc9e7505340ff9e12463a1c" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js process completed bootstrapping. If bootstrapping has not yet finished, the property has the value of -1.</source>
          <target state="translated">Node.js 프로세스가 부트 스트랩을 완료 한 고해상도 밀리 초 타임 스탬프입니다. 부트 스트랩이 아직 완료되지 않은 경우 특성 값은 -1입니다.</target>
        </trans-unit>
        <trans-unit id="071df5fd57717fbd6090f443bfda8ce228353c66" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js process was initialized.</source>
          <target state="translated">Node.js 프로세스가 초기화 된 고해상도 밀리 초 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="4c67dbbf7296ae4aa2f9c5436c0e093271dafc64" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the V8 platform was initialized.</source>
          <target state="translated">V8 플랫폼이 초기화 된 고해상도 밀리 초 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="70f903809143489fbc93090cbbcce31200a3d632" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp marking the starting time of the Performance Entry.</source>
          <target state="translated">Performance Entry의 시작 시간을 표시하는 고해상도 밀리 초 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="b552b812c8d4eb7775ff7d7c0096788c1219ffa7" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp of the amount of time the event loop has been idle within the event loop's event provider (e.g. &lt;code&gt;epoll_wait&lt;/code&gt;). This does not take CPU usage into consideration. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of 0.</source>
          <target state="translated">이벤트 루프의 이벤트 공급자 (예 : &lt;code&gt;epoll_wait&lt;/code&gt; ) 내에서 이벤트 루프가 유휴 상태였던 시간의 고해상도 밀리 초 타임 스탬프입니다 . 이것은 CPU 사용량을 고려하지 않습니다. 이벤트 루프가 아직 시작되지 않은 경우 (예 : 기본 스크립트의 첫 번째 틱에서) 속성 값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="de4e70665d46e6d1357630ab3e77e4fa6d270e20" translate="yes" xml:space="preserve">
          <source>The highest acknowledged data offset received for this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicStream&lt;/code&gt; 에 대해 수신 된 가장 높은 승인 데이터 오프셋 입니다.</target>
        </trans-unit>
        <trans-unit id="0296958ef85e1f2b12f2a8e3864fc6d548324150" translate="yes" xml:space="preserve">
          <source>The highest cumulative number of bidirectional and unidirectional streams that can currently be opened. The values are set initially by configuration parameters when the &lt;code&gt;QuicSession&lt;/code&gt; is created, then updated over the lifespan of the &lt;code&gt;QuicSession&lt;/code&gt; as the connected peer allows new streams to be created.</source>
          <target state="translated">현재 열 수있는 양방향 및 단방향 스트림의 최대 누적 수입니다. &lt;code&gt;QuicSession&lt;/code&gt; 이 생성 될 때 초기에 구성 매개 변수에 의해 값이 설정 되고 연결된 피어가 새 스트림을 생성 할 수 있으므로 &lt;code&gt;QuicSession&lt;/code&gt; 의 수명 동안 업데이트됩니다 .</target>
        </trans-unit>
        <trans-unit id="3d718b76cc617048137f79b76b3096eb28ab803f" translate="yes" xml:space="preserve">
          <source>The highest process scheduling priority. This corresponds to &lt;code&gt;REALTIME_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-20&lt;/code&gt; on all other platforms.</source>
          <target state="translated">프로세스 스케줄링 우선 순위가 가장 높습니다. 이것은 Windows의 &lt;code&gt;REALTIME_PRIORITY_CLASS&lt;/code&gt; 에 해당하며 다른 모든 플랫폼 에서는 &lt;code&gt;-20&lt;/code&gt; 의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="88efed373aad8c0a32d816872573d22440d5f941" translate="yes" xml:space="preserve">
          <source>The hooks will be called in reverse order, i.e. the most recently added one will be called first.</source>
          <target state="translated">후크는 역순으로 호출됩니다. 즉 가장 최근에 추가 된 것이 먼저 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fbe35588d2e0f56ae4c4254cfae039f3d4a9c4e1" translate="yes" xml:space="preserve">
          <source>The host is not accessible from public networks.</source>
          <target state="translated">공용 네트워크에서 호스트에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="70c45254dfbe7a98e1f87576c63ddee48c0ed2ca" translate="yes" xml:space="preserve">
          <source>The identifier for the module. Typically this is the fully resolved filename.</source>
          <target state="translated">모듈의 식별자입니다. 일반적으로 이것은 완전히 확인 된 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3e1f78558e83eb29a15f6d30742ba0cef1977a01" translate="yes" xml:space="preserve">
          <source>The identifier of the current module, as set in the constructor.</source>
          <target state="translated">생성자에 설정된 현재 모듈의 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="4e46e4c795af885884ca96415b2f4fd958aa35fa" translate="yes" xml:space="preserve">
          <source>The implementation code for a stream should &lt;em&gt;never&lt;/em&gt; call the &quot;public&quot; methods of a stream that are intended for use by consumers (as described in the &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;API for Stream Consumers&lt;/a&gt; section). Doing so may lead to adverse side effects in application code consuming the stream.</source>
          <target state="translated">스트림의 구현 코드는 소비자가 사용하도록 의도 된 스트림의 &quot;공용&quot;메소드를 호출 해서는 &lt;em&gt;안됩니다&lt;/em&gt; ( &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;스트림 소비자 용 API&lt;/a&gt; 섹션에 설명 된대로 ). 그렇게하면 응용 프로그램 코드에서 스트림을 소비하는 부작용이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1197a4b12b03caf7b97c692a4469a4dde201f02" translate="yes" xml:space="preserve">
          <source>The implementation code for a stream should &lt;em&gt;never&lt;/em&gt; call the &quot;public&quot; methods of a stream that are intended for use by consumers (as described in the &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;API for stream consumers&lt;/a&gt; section). Doing so may lead to adverse side effects in application code consuming the stream.</source>
          <target state="translated">스트림에 대한 구현 코드는 소비자가 사용하도록 의도 된 스트림의 &quot;공용&quot;메서드를 호출 해서는 &lt;em&gt;안됩니다&lt;/em&gt; ( &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;스트림 소비자 용 API&lt;/a&gt; 섹션에 설명 됨). 그렇게하면 스트림을 소비하는 애플리케이션 코드에 부작용이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7b68703a9e2dcb076edca10edad1d01a02d8f51" translate="yes" xml:space="preserve">
          <source>The implementation in &lt;code&gt;myobject.cc&lt;/code&gt; is similar to the previous example:</source>
          <target state="translated">&lt;code&gt;myobject.cc&lt;/code&gt; 의 구현 은 이전 예제와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="0a52a7d9fa897ef7b7e7265d41af6393190e98f2" translate="yes" xml:space="preserve">
          <source>The implementation is now spec compliant and does not throw anymore.</source>
          <target state="translated">구현은 이제 사양을 준수하며 더 이상 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6e06a2129159e07eb26204cbfea1eda2335fc973" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;crypto.createCipher()&lt;/code&gt; derives keys using the OpenSSL function &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</source>
          <target state="translated">&lt;code&gt;crypto.createCipher()&lt;/code&gt; 의 구현은 다이제스트 알고리즘을 MD5로 설정하고 반복없이 소금없이 OpenSSL 함수 &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt; &lt;code&gt;EVP_BytesToKey&lt;/code&gt; &lt;/a&gt; 를 사용하여 키를 파생합니다 . 소금이 없으면 동일한 암호가 항상 같은 키를 생성하므로 사전 공격이 가능합니다. 반복 횟수가 적고 암호화되지 않은 보안 해시 알고리즘을 사용하면 암호를 매우 빠르게 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca7f9e52a3626b1b50d6b554e45c94d3cc8682bf" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;crypto.createDecipher()&lt;/code&gt; derives keys using the OpenSSL function &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</source>
          <target state="translated">&lt;code&gt;crypto.createDecipher()&lt;/code&gt; 의 구현은 다이제스트 알고리즘을 MD5로 설정하고 반복없이 소금없이 OpenSSL 함수 &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt; &lt;code&gt;EVP_BytesToKey&lt;/code&gt; &lt;/a&gt; 를 사용하여 키를 파생합니다 . 소금이 없으면 동일한 암호가 항상 같은 키를 생성하므로 사전 공격이 가능합니다. 반복 횟수가 적고 비암 호적으로 안전한 해시 알고리즘을 사용하면 암호를 매우 빠르게 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="822ad7efe07c30c235e9d7962160db8b807dca79" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;myobject.cc&lt;/code&gt; is similar to before:</source>
          <target state="translated">&lt;code&gt;myobject.cc&lt;/code&gt; 의 구현은 이전과 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="51779778d26eca6a63eb3f028558111d37c56cec" translate="yes" xml:space="preserve">
          <source>The implications of this are a common source of confusion. In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.</source>
          <target state="translated">이것의 의미는 일반적인 혼란의 원인입니다. 파일 디스크립터의 경우 파일이 대체되지 않습니다! 데이터는 반드시 파일의 시작 부분에 기록 될 필요는 없으며, 파일의 원래 데이터는 새로 작성된 데이터 이전 및 / 또는 이후에 남아있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="524e8d550227d344d26a7706fc43d6ded573a77c" translate="yes" xml:space="preserve">
          <source>The importance of the distinction between &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; can vary based on platform. On Unix-type operating systems (Unix, Linux, macOS) &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; can be more efficient because it does not spawn a shell by default. On Windows, however, &lt;code&gt;.bat&lt;/code&gt; and &lt;code&gt;.cmd&lt;/code&gt; files are not executable on their own without a terminal, and therefore cannot be launched using &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt;. When running on Windows, &lt;code&gt;.bat&lt;/code&gt; and &lt;code&gt;.cmd&lt;/code&gt; files can be invoked using &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;shell&lt;/code&gt; option set, with &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, or by spawning &lt;code&gt;cmd.exe&lt;/code&gt; and passing the &lt;code&gt;.bat&lt;/code&gt; or &lt;code&gt;.cmd&lt;/code&gt; file as an argument (which is what the &lt;code&gt;shell&lt;/code&gt; option and &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; do). In any case, if the script filename contains spaces it needs to be quoted.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt; 의 구별의 중요성은 플랫폼에 따라 달라질 수 있습니다. Unix 유형 운영 체제 (Unix, Linux, macOS)에서 &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt; 은 기본적으로 쉘을 생성하지 않기 때문에보다 효율적일 수 있습니다. 그러나 Windows에서 &lt;code&gt;.bat&lt;/code&gt; 및 &lt;code&gt;.cmd&lt;/code&gt; 파일은 터미널없이 &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt; 으로 실행할 수 없으므로 child_process.execFile ()을 사용하여 시작할 수 없습니다 . 윈도우에서 실행하면 &lt;code&gt;.bat&lt;/code&gt; 와 &lt;code&gt;.cmd&lt;/code&gt; 파일을 사용하여 호출 할 수 &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;shell&lt;/code&gt; 과 함께, 옵션 설정 &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;또는 &lt;code&gt;cmd.exe&lt;/code&gt; 를 생성 하고 &lt;code&gt;.bat&lt;/code&gt; 또는 &lt;code&gt;.cmd&lt;/code&gt; 파일을 인수 ( &lt;code&gt;shell&lt;/code&gt; 옵션 및 &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt; 가 수행하는 작업)로 전달합니다. 어쨌든 스크립트 파일 이름에 공백이 있으면 따옴표로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="068740fb1221112979549812bcb846baefe051e1" translate="yes" xml:space="preserve">
          <source>The important concept to remember is that a &lt;code&gt;Readable&lt;/code&gt; will not generate data until a mechanism for either consuming or ignoring that data is provided. If the consuming mechanism is disabled or taken away, the &lt;code&gt;Readable&lt;/code&gt; will &lt;em&gt;attempt&lt;/em&gt; to stop generating the data.</source>
          <target state="translated">기억해야 할 중요한 개념은 &lt;code&gt;Readable&lt;/code&gt; 은 해당 데이터를 소비하거나 무시하는 메커니즘이 제공 될 때까지 데이터를 생성하지 않는다는 것입니다. 소비 메커니즘이 비활성화되거나 제거 된 경우 &lt;code&gt;Readable&lt;/code&gt; 은 데이터 생성을 중지 &lt;em&gt;하려고 시도&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="93273fa910f64fa7a93e386a6b91c90451e5c871" translate="yes" xml:space="preserve">
          <source>The imported JSON only exposes a &lt;code&gt;default&lt;/code&gt;. There is no support for named exports. A cache entry is created in the CommonJS cache, to avoid duplication. The same object will be returned in CommonJS if the JSON module has already been imported from the same path.</source>
          <target state="translated">가져온 JSON은 &lt;code&gt;default&lt;/code&gt; 만 공개합니다 . 명명 된 내보내기는 지원되지 않습니다. 중복을 피하기 위해 CommonJS 캐시에 캐시 항목이 작성됩니다. 동일한 경로에서 JSON 모듈을 이미 가져온 경우 CommonJS에서 동일한 오브젝트가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="ecca56901d1b3c35ef96c4a1d6e394d8409589d6" translate="yes" xml:space="preserve">
          <source>The imported module string is an invalid URL, package name, or package subpath specifier.</source>
          <target state="translated">가져온 모듈 문자열이 잘못된 URL, 패키지 이름 또는 패키지 하위 경로 지정자입니다.</target>
        </trans-unit>
        <trans-unit id="5bfeded4e40086fb8d54687b4f3019eb1ad6070e" translate="yes" xml:space="preserve">
          <source>The index operator &lt;code&gt;[index]&lt;/code&gt; can be used to get and set the octet at position &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;buf&lt;/code&gt;. The values refer to individual bytes, so the legal value range is between &lt;code&gt;0x00&lt;/code&gt; and &lt;code&gt;0xFF&lt;/code&gt; (hex) or &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt; (decimal).</source>
          <target state="translated">지수 연산자 &lt;code&gt;[index]&lt;/code&gt; 하세요 위치에서 옥텟 설정하는 데 사용할 수있는 &lt;code&gt;index&lt;/code&gt; 에서 &lt;code&gt;buf&lt;/code&gt; . 값은 개별 바이트를 나타내므로 유효한 값 범위는 &lt;code&gt;0x00&lt;/code&gt; 과 &lt;code&gt;0xFF&lt;/code&gt; (16 진수) 또는 &lt;code&gt;0&lt;/code&gt; 과 &lt;code&gt;255&lt;/code&gt; (10 진수) 사이입니다.</target>
        </trans-unit>
        <trans-unit id="aa8783bd5a72320d3042c6afeac6f466ffaac6d1" translate="yes" xml:space="preserve">
          <source>The initial value of &lt;code&gt;process.throwDeprecation&lt;/code&gt; indicates whether the &lt;code&gt;--throw-deprecation&lt;/code&gt; flag is set on the current Node.js process. &lt;code&gt;process.throwDeprecation&lt;/code&gt; is mutable, so whether or not deprecation warnings result in errors may be altered at runtime. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;process.throwDeprecation&lt;/code&gt; 의 초기 값은 현재 Node.js 프로세스에 &lt;code&gt;--throw-deprecation&lt;/code&gt; 플래그가 설정되어 있는지 여부를 나타냅니다 . &lt;code&gt;process.throwDeprecation&lt;/code&gt; 은 변경 가능하므로 사용 중단 경고로 인해 오류가 발생하는지 여부는 런타임에 변경 될 수 있습니다. 자세한 내용은 &lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; 이벤트&lt;/a&gt; 및 &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; 메서드에&lt;/a&gt; 대한 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2c9aa8e521694fac24a9f4d3007352fe01738e0c" translate="yes" xml:space="preserve">
          <source>The initial value of the counter block. This must be exactly 16 bytes long.</source>
          <target state="translated">카운터 블록의 초기 값입니다. 길이는 정확히 16 바이트 여야합니다.</target>
        </trans-unit>
        <trans-unit id="d5d1bc7a978c5a6ebd7e5c67234a0454072f41c9" translate="yes" xml:space="preserve">
          <source>The initialization of a TTY failed due to a system error.</source>
          <target state="translated">시스템 오류로 인해 TTY 초기화에 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="522b3167c9f2ef2260c5d3d191d063b5a24982bb" translate="yes" xml:space="preserve">
          <source>The initialization vector must be unique for every encryption operation using a given key. It is recommended by the AES-GCM specification that this contain at least 12 random bytes.</source>
          <target state="translated">초기화 벡터는 주어진 키를 사용하는 모든 암호화 작업에 대해 고유해야합니다. AES-GCM 사양에서는 여기에 최소 12 개의 임의 바이트가 포함되도록 권장합니다.</target>
        </trans-unit>
        <trans-unit id="4b928ce33eba8c7ba3b1cbf7ff98058e999c34bc" translate="yes" xml:space="preserve">
          <source>The input may not be used in the &lt;a href=&quot;repl&quot;&gt;&lt;code&gt;REPL&lt;/code&gt;&lt;/a&gt;. All prohibited inputs are documented in the &lt;a href=&quot;repl&quot;&gt;&lt;code&gt;REPL&lt;/code&gt;&lt;/a&gt;'s documentation.</source>
          <target state="translated">&lt;a href=&quot;repl&quot;&gt; &lt;code&gt;REPL&lt;/code&gt; &lt;/a&gt; 에서는 입력을 사용할 수 없습니다 . 모든 금지 된 입력은 &lt;a href=&quot;repl&quot;&gt; &lt;code&gt;REPL&lt;/code&gt; &lt;/a&gt; 문서에 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e7964aa0613bd0f93baa04a82c9130ed51a122b" translate="yes" xml:space="preserve">
          <source>The inspection output is now limited to about 128 MB. Data above that size will not be fully inspected.</source>
          <target state="translated">검사 출력은 이제 약 128MB로 제한됩니다. 해당 크기 이상의 데이터는 완전히 검사되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0b37df37c8a857d71e292563896d967bae6c8fd4" translate="yes" xml:space="preserve">
          <source>The inspector console does not have API parity with Node.js console.</source>
          <target state="translated">인스펙터 콘솔에는 Node.js 콘솔과 API 패리티가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6d1d24c1edf52323ba588ddcf5bd806599c68a19" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;path._makeLong()&lt;/code&gt; was not intended for public use. However, userland modules have found it useful. The internal API is deprecated and replaced with an identical, public &lt;code&gt;path.toNamespacedPath()&lt;/code&gt; method.</source>
          <target state="translated">내부 &lt;code&gt;path._makeLong()&lt;/code&gt; 은 공개용 이 아닙니다. 그러나 사용자 영역 모듈이 유용하다는 것을 알았습니다. 내부 API는 더 이상 사용되지 않으며 동일한 public &lt;code&gt;path.toNamespacedPath()&lt;/code&gt; 메소드 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="1e578f1d016d9eb07bdba0965c0f4724a9faff93" translate="yes" xml:space="preserve">
          <source>The key can also be an ArrayBuffer or CryptoKey. The encoding option was added. The key cannot contain more than 2 ** 32 - 1 bytes.</source>
          <target state="translated">키는 ArrayBuffer 또는 CryptoKey 일 수도 있습니다. 인코딩 옵션이 추가되었습니다. 키는 2 ** 32-1 바이트를 초과 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="78821379fcad26564201d21dcc4208081721bd53" translate="yes" xml:space="preserve">
          <source>The key can also be an ArrayBuffer or string. The encoding argument was added. The key cannot contain more than 2 ** 32 - 1 bytes.</source>
          <target state="translated">키는 ArrayBuffer 또는 문자열 일 수도 있습니다. 인코딩 인수가 추가되었습니다. 키는 2 ** 32-1 바이트를 초과 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0fb67165e86b968195550d65a2c4666dad756b06" translate="yes" xml:space="preserve">
          <source>The key can also be an ArrayBuffer. The encoding option was added. The key cannot contain more than 2 ** 32 - 1 bytes.</source>
          <target state="translated">키는 ArrayBuffer 일 수도 있습니다. 인코딩 옵션이 추가되었습니다. 키는 2 ** 32-1 바이트를 초과 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e43746a4a6e9a39d1451d57a3a425511033f2b46" translate="yes" xml:space="preserve">
          <source>The key can now be a private key.</source>
          <target state="translated">키는 이제 개인 키가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdfa394de2adea1a9dffe9daa48cb7c8f6bea746" translate="yes" xml:space="preserve">
          <source>The key used with RSA, DSA, and DH algorithms is recommended to have at least 2048 bits and that of the curve of ECDSA and ECDH at least 224 bits, to be safe to use for several years.</source>
          <target state="translated">RSA, DSA 및 DH 알고리즘과 함께 사용되는 키는 몇 년 동안 안전하게 사용할 수 있도록 최소 2048 비트와 ECDSA 및 ECDH 곡선의 키를 224 비트 이상으로 설정하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="682daccc97ee42ee651db4bcf2c6e94124c3b1fc" translate="yes" xml:space="preserve">
          <source>The keys and values are in the same list. It is &lt;em&gt;not&lt;/em&gt; a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets are the associated values.</source>
          <target state="translated">키와 값은 같은 목록에 있습니다. 튜플 목록 이 &lt;em&gt;아닙니다&lt;/em&gt; . 따라서 짝수 번째 오프셋은 키 값이고 홀수 번째 오프셋은 관련 값입니다.</target>
        </trans-unit>
        <trans-unit id="1ee648142cd6bc2a91d3ff824c7754d33d3fb978" translate="yes" xml:space="preserve">
          <source>The last three bytes are null bytes (&lt;code&gt;'\0'&lt;/code&gt;), to compensate the over-truncation.</source>
          <target state="translated">마지막 3 바이트는 널 잘림을 보상하기 위해 널 바이트 ( &lt;code&gt;'\0'&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="a1a047e356026001e5862f4364bf432f3f5b8f57" translate="yes" xml:space="preserve">
          <source>The latest version of the V8 inspector protocol is published on the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/&quot;&gt;Chrome DevTools Protocol Viewer&lt;/a&gt;.</source>
          <target state="translated">V8 인스펙터 프로토콜의 최신 버전은 &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/&quot;&gt;Chrome DevTools 프로토콜 뷰어&lt;/a&gt; 에 게시되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="029ac052f9dfea1ffb83480d085a03712a847eb9" translate="yes" xml:space="preserve">
          <source>The left hand matching pattern must always end in &lt;code&gt;*&lt;/code&gt;. All instances of &lt;code&gt;*&lt;/code&gt; on the right hand side will then be replaced with this value, including if it contains any &lt;code&gt;/&lt;/code&gt; separators.</source>
          <target state="translated">왼손 일치 패턴은 항상 &lt;code&gt;*&lt;/code&gt; 로 끝나야합니다 . 오른쪽에있는 &lt;code&gt;*&lt;/code&gt; 의 모든 인스턴스는 &lt;code&gt;/&lt;/code&gt; 구분 기호를 포함하는 경우를 포함하여이 값으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="a2f65f898a1cabdd99c1f9b5338355a88f889890" translate="yes" xml:space="preserve">
          <source>The legacy &lt;code&gt;node debug&lt;/code&gt; command was removed.</source>
          <target state="translated">레거시 &lt;code&gt;node debug&lt;/code&gt; 명령이 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="ab6fe4cc54f3bbbf6cc2f2a8e1a7af78f281efdc" translate="yes" xml:space="preserve">
          <source>The legacy &lt;code&gt;urlObject&lt;/code&gt; (&lt;code&gt;require('url').Url&lt;/code&gt;) is created and returned by the &lt;code&gt;url.parse()&lt;/code&gt; function.</source>
          <target state="translated">레거시 &lt;code&gt;urlObject&lt;/code&gt; ( &lt;code&gt;require('url').Url&lt;/code&gt; )는 &lt;code&gt;url.parse()&lt;/code&gt; 함수에 의해 생성되고 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="58c6a85d434b83fbb1efbf358a6c2cba85b1ec53" translate="yes" xml:space="preserve">
          <source>The legacy HTTP parser, used by default in versions of Node.js prior to 12.0.0, is deprecated and has been removed in v13.0.0. Prior to v13.0.0, the &lt;code&gt;--http-parser=legacy&lt;/code&gt; command-line flag could be used to revert to using the legacy parser.</source>
          <target state="translated">12.0.0 이전의 Node.js 버전에서 기본적으로 사용되는 레거시 HTTP 파서는 더 이상 사용되지 않으며 v13.0.0에서 제거되었습니다. v13.0.0 이전에는 &lt;code&gt;--http-parser=legacy&lt;/code&gt; 명령 줄 플래그를 사용하여 레거시 파서를 사용하도록 되돌릴 수있었습니다.</target>
        </trans-unit>
        <trans-unit id="b59b0da974ef3079a4d02ad543fa1a44b9facbea" translate="yes" xml:space="preserve">
          <source>The legacy HTTP parser, used by default in versions of Node.js prior to 12.0.0, is deprecated. This deprecation applies to users of the &lt;a href=&quot;cli#cli_http_parser_library&quot;&gt;&lt;code&gt;--http-parser=legacy&lt;/code&gt;&lt;/a&gt; command-line flag.</source>
          <target state="translated">12.0.0 이전의 Node.js 버전에서 기본적으로 사용되는 레거시 HTTP 파서는 더 이상 사용되지 않습니다. 이 지원 중단은 &lt;a href=&quot;cli#cli_http_parser_library&quot;&gt; &lt;code&gt;--http-parser=legacy&lt;/code&gt; &lt;/a&gt; 명령 줄 플래그 사용자에게 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6bbe7e69c63f7e6b32f81f17886f135b752649d0" translate="yes" xml:space="preserve">
          <source>The length (in bytes) of the random salt to use.</source>
          <target state="translated">사용할 임의 솔트의 길이 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="68b0510d2a6ce01bd134853b5379592f7fa5e53d" translate="yes" xml:space="preserve">
          <source>The length in bits of the DSA modulus. As a best practice, this should be at least &lt;code&gt;2048&lt;/code&gt;.</source>
          <target state="translated">DSA 모듈러스의 길이 (비트)입니다. 모범 사례로서 최소 &lt;code&gt;2048&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="fe142b986868d01a9929e27dc821bf4fc8044df3" translate="yes" xml:space="preserve">
          <source>The length in bits of the RSA modulus. As a best practice, this should be at least &lt;code&gt;2048&lt;/code&gt;.</source>
          <target state="translated">RSA 모듈러스의 길이 (비트)입니다. 모범 사례로서 최소 &lt;code&gt;2048&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="1fdce0746d97b2bc04aa61c6ce847e5b294bb612" translate="yes" xml:space="preserve">
          <source>The length of the AES key to be generated. This must be either &lt;code&gt;128&lt;/code&gt;, &lt;code&gt;192&lt;/code&gt;, or &lt;code&gt;256&lt;/code&gt;.</source>
          <target state="translated">생성 할 AES 키의 길이입니다. &lt;code&gt;128&lt;/code&gt; , &lt;code&gt;192&lt;/code&gt; 또는 &lt;code&gt;256&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="b839c62c200fcce6c9f9f11222c1ee0341b1bf83" translate="yes" xml:space="preserve">
          <source>The length of the initialization vector (nonce) &lt;code&gt;N&lt;/code&gt; must be between 7 and 13 bytes (&lt;code&gt;7 &amp;le; N &amp;le; 13&lt;/code&gt;).</source>
          <target state="translated">초기화 벡터 (없음) &lt;code&gt;N&lt;/code&gt; 의 길이는 7 바이트에서 13 바이트 사이 여야합니다 ( &lt;code&gt;7 &amp;le; N &amp;le; 13&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e5f8159583783dde7b4028e859056232836bcfe3" translate="yes" xml:space="preserve">
          <source>The length of the plaintext is limited to &lt;code&gt;2 ** (8 * (15 - N))&lt;/code&gt; bytes.</source>
          <target state="translated">평문의 길이는 &lt;code&gt;2 ** (8 * (15 - N))&lt;/code&gt; 바이트로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="44311c2c680818ab60609335245e7fecece40098" translate="yes" xml:space="preserve">
          <source>The length of time taken to complete the TLS handshake.</source>
          <target state="translated">TLS 핸드 셰이크를 완료하는 데 걸린 시간입니다.</target>
        </trans-unit>
        <trans-unit id="6b6f7fa9b5f4d3215529fb1ac8d3f6af26d58092" translate="yes" xml:space="preserve">
          <source>The length of time the &lt;code&gt;QuicSession&lt;/code&gt; was active.</source>
          <target state="translated">&lt;code&gt;QuicSession&lt;/code&gt; 이 활성화 된 시간 입니다.</target>
        </trans-unit>
        <trans-unit id="cabf5569d05ea5e98f7b7208240a2f0408f028f3" translate="yes" xml:space="preserve">
          <source>The length of time the &lt;code&gt;QuicStream&lt;/code&gt; has been active.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; 이 활성화 된 시간 입니다.</target>
        </trans-unit>
        <trans-unit id="13707eeb5173bdf8520f07114b4e5bc1599e10c7" translate="yes" xml:space="preserve">
          <source>The length of time this &lt;code&gt;QuicSocket&lt;/code&gt; has been active,</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 이 활성화 된 시간 ,</target>
        </trans-unit>
        <trans-unit id="d20284b93553b189150e66b2fddfa0318d161243" translate="yes" xml:space="preserve">
          <source>The length of time this &lt;code&gt;QuicSocket&lt;/code&gt; has been bound to a local port.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 이 로컬 포트에 바인딩 된 시간 입니다.</target>
        </trans-unit>
        <trans-unit id="00d38eb8e755a3a994c5682275563d4352b99345" translate="yes" xml:space="preserve">
          <source>The length of time this &lt;code&gt;QuicSocket&lt;/code&gt; has been listening for connections.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 이 연결을 수신 한 시간 입니다.</target>
        </trans-unit>
        <trans-unit id="79c10884ec660ee1fbd32c6308348d654832331d" translate="yes" xml:space="preserve">
          <source>The linker function is allowed to be asynchronous while &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is synchronous.</source>
          <target state="translated">링커 함수는 비동기적일 수 있지만 &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; 은 동기식입니다.</target>
        </trans-unit>
        <trans-unit id="d963973bdd341e8c9654a7439d48f73aa9ce4c3c" translate="yes" xml:space="preserve">
          <source>The linker function is allowed to be asynchronous while &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is synchronous.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; 이 동기 적인 동안 링커 함수는 비동기식으로 허용됩니다 .</target>
        </trans-unit>
        <trans-unit id="715536f634e876d37fa2fab56b440dbae4eab00f" translate="yes" xml:space="preserve">
          <source>The linker function is executed during linking, a Node.js-specific stage before instantiation, while &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is called during instantiation.</source>
          <target state="translated">링커 함수는 인스턴스화 전에 Node.js 특정 단계 인 링크 중에 실행되며 인스턴스화 중에 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7e1c54f4d0339ef4fb4064416f1d268d5b877ada" translate="yes" xml:space="preserve">
          <source>The linker function returned a module for which linking has failed.</source>
          <target state="translated">링커 함수가 연결에 실패한 모듈을 반환했습니다.</target>
        </trans-unit>
        <trans-unit id="8ea2cca89fe5f4c5f58820b496f469742151fc50" translate="yes" xml:space="preserve">
          <source>The linker function roughly corresponds to the implementation-defined &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; abstract operation in the ECMAScript specification, with a few key differences:</source>
          <target state="translated">링커 함수 는 ECMAScript 사양 의 구현 정의 &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; 추상 작업과 대략 일치 하지만 몇 가지 주요 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bc61c4465b811b422205aff9e099a7532eea396" translate="yes" xml:space="preserve">
          <source>The linker function roughly corresponds to the implementation-defined &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; abstract operation in the ECMAScript specification, with a few key differences:</source>
          <target state="translated">링커 함수 는 ECMAScript 사양 의 구현 정의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; 추상 작업과 대략 일치 하지만 몇 가지 주요 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d230ead665d331eb10732b52823f902a70923db" translate="yes" xml:space="preserve">
          <source>The list of rules added to the blocklist.</source>
          <target state="translated">차단 목록에 추가 된 규칙 목록입니다.</target>
        </trans-unit>
        <trans-unit id="fb5cdf801db65ab26ab02fec82d66df22c6e7c37" translate="yes" xml:space="preserve">
          <source>The listener callback function is invoked with the exit code specified either by the &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; property, or the &lt;code&gt;exitCode&lt;/code&gt; argument passed to the &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">리스너 콜백 함수는 &lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt; 특성 또는 &lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt; 메소드에 전달 된 &lt;code&gt;exitCode&lt;/code&gt; 인수로 지정된 종료 코드를 사용하여 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="d70ff3ea096a9215253d68eeebe5c29488a92a9f" translate="yes" xml:space="preserve">
          <source>The listener callback function is invoked with the value of &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; passed as the only argument.</source>
          <target state="translated">리스너 콜백 함수는 유일한 인수로 전달 된 &lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt; 값으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="055837d3b4ae741c1c2bb6eeb05d26cac3fdcde4" translate="yes" xml:space="preserve">
          <source>The listener callback gets two arguments &lt;code&gt;(eventType, filename)&lt;/code&gt;. &lt;code&gt;eventType&lt;/code&gt; is either &lt;code&gt;'rename'&lt;/code&gt; or &lt;code&gt;'change'&lt;/code&gt;, and &lt;code&gt;filename&lt;/code&gt; is the name of the file which triggered the event.</source>
          <target state="translated">리스너 콜백은 두 개의 인수 &lt;code&gt;(eventType, filename)&lt;/code&gt; 가져 옵니다 . &lt;code&gt;eventType&lt;/code&gt; 은 &lt;code&gt;'rename'&lt;/code&gt; 또는 &lt;code&gt;'change'&lt;/code&gt; 이고 &lt;code&gt;filename&lt;/code&gt; 은 이벤트를 트리거 한 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="0d25269254663bac508549031b78553911b28a42" translate="yes" xml:space="preserve">
          <source>The listener callback is attached to the &lt;code&gt;'change'&lt;/code&gt; event fired by &lt;a href=&quot;#fs_class_fs_fswatcher&quot;&gt;&lt;code&gt;fs.FSWatcher&lt;/code&gt;&lt;/a&gt;, but it is not the same thing as the &lt;code&gt;'change'&lt;/code&gt; value of &lt;code&gt;eventType&lt;/code&gt;.</source>
          <target state="translated">리스너 콜백은 &lt;a href=&quot;#fs_class_fs_fswatcher&quot;&gt; &lt;code&gt;fs.FSWatcher&lt;/code&gt; &lt;/a&gt; 가 시작한 &lt;code&gt;'change'&lt;/code&gt; 이벤트에 연결 되지만 &lt;code&gt;eventType&lt;/code&gt; 의 &lt;code&gt;'change'&lt;/code&gt; 값과 동일하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3428a49f4a9aef927962af400c0a27d96f893bb5" translate="yes" xml:space="preserve">
          <source>The listener callback is passed three arguments when called:</source>
          <target state="translated">리스너 콜백은 호출 될 때 세 개의 인수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="0bd489f8ec0206d465fe90b95b4b651b6b4e3293" translate="yes" xml:space="preserve">
          <source>The listener callback will be passed a single &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">리스너 콜백에는 단일 &lt;code&gt;Error&lt;/code&gt; 객체 가 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="ab5b9928c3b053bac6cf69ed39e46e765a674622" translate="yes" xml:space="preserve">
          <source>The listener callback will be passed the chunk of data as a string if a default encoding has been specified for the stream using the &lt;code&gt;readable.setEncoding()&lt;/code&gt; method; otherwise the data will be passed as a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readable.setEncoding()&lt;/code&gt; 메소드를 사용하여 스트림에 기본 인코딩이 지정된 경우 리스너 콜백에 데이터 청크가 문자열로 전달됩니다 . 그렇지 않으면 데이터가 &lt;code&gt;Buffer&lt;/code&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="8cb29c94ac667b5168cac94eb1be7ed4650a37d8" translate="yes" xml:space="preserve">
          <source>The listener function is called with a string containing the single line of received input.</source>
          <target state="translated">리스너 함수는 수신 된 한 줄의 입력을 포함하는 문자열로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="75c52c037d844d9260cda2c263ecc1633937eb4a" translate="yes" xml:space="preserve">
          <source>The listener function is called without passing any arguments.</source>
          <target state="translated">리스너 함수는 인수를 전달하지 않고 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4eec06a2464b63bfe43f85145310f598d4dd67e9" translate="yes" xml:space="preserve">
          <source>The listener function is invoked without passing any arguments.</source>
          <target state="translated">리스너 함수는 인수를 전달하지 않고 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="6aae998a9956fa4170ac3e55b9cc618bd7d7dcbc" translate="yes" xml:space="preserve">
          <source>The literal string &lt;code&gt;:&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;, and</source>
          <target state="translated">리터럴 문자열 &lt;code&gt;:&lt;/code&gt; 에 추가됩니다 &lt;code&gt;result&lt;/code&gt; 및</target>
        </trans-unit>
        <trans-unit id="8c0f261769e8eadc7e0487404f29a1a8ee87daf3" translate="yes" xml:space="preserve">
          <source>The load average is a Unix-specific concept with no real equivalent on Windows platforms. On Windows, the return value is always &lt;code&gt;[0, 0, 0]&lt;/code&gt;.</source>
          <target state="translated">로드 평균은 Windows 플랫폼에서 실질적으로 동등한 유닉스 전용 개념입니다. Windows에서 리턴 값은 항상 &lt;code&gt;[0, 0, 0]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="79de82bb559d39f0837e25e2dbe2e15b4146db2f" translate="yes" xml:space="preserve">
          <source>The load average is a Unix-specific concept. On Windows, the return value is always &lt;code&gt;[0, 0, 0]&lt;/code&gt;.</source>
          <target state="translated">로드 평균은 Unix 관련 개념입니다. Windows에서 반환 값은 항상 &lt;code&gt;[0, 0, 0]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5220aad6715b03d4155641d22d38555a93ae8727" translate="yes" xml:space="preserve">
          <source>The load average is a measure of system activity calculated by the operating system and expressed as a fractional number.</source>
          <target state="translated">로드 평균은 운영 체제에서 계산 된 시스템 활동의 측정 값이며 분수로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e35d013f19eb56251ea330d71e084299ad93abf7" translate="yes" xml:space="preserve">
          <source>The load average is a measure of system activity, calculated by the operating system and expressed as a fractional number. As a rule of thumb, the load average should ideally be less than the number of logical CPUs in the system.</source>
          <target state="translated">로드 평균은 운영 체제에서 계산하고 분수로 표현한 시스템 활동의 측정치입니다. 일반적으로로드 평균은 시스템의 논리적 CPU 수보다 적어야합니다.</target>
        </trans-unit>
        <trans-unit id="70f0d18d4c3698c55e755528941f4ab02364f269" translate="yes" xml:space="preserve">
          <source>The location information will be one of:</source>
          <target state="translated">위치 정보는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="2eed34e4bcd621bb071798baa263b1f365323ad1" translate="yes" xml:space="preserve">
          <source>The logging file is by default called &lt;code&gt;node_trace.${rotation}.log&lt;/code&gt;, where &lt;code&gt;${rotation}&lt;/code&gt; is an incrementing log-rotation id. The filepath pattern can be specified with &lt;code&gt;--trace-event-file-pattern&lt;/code&gt; that accepts a template string that supports &lt;code&gt;${rotation}&lt;/code&gt; and &lt;code&gt;${pid}&lt;/code&gt;:</source>
          <target state="translated">로깅 파일은 기본적으로 &lt;code&gt;node_trace.${rotation}.log&lt;/code&gt; 이며 여기서 &lt;code&gt;${rotation}&lt;/code&gt; 은 증분 로그 회전 ID입니다. 파일 경로 패턴은 &lt;code&gt;--trace-event-file-pattern&lt;/code&gt; 으로 지정하여 &lt;code&gt;${rotation}&lt;/code&gt; 및 &lt;code&gt;${pid}&lt;/code&gt; 를 지원하는 템플릿 문자열을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="800bc2d84885d9da35fe90b70427fd11a65d6618" translate="yes" xml:space="preserve">
          <source>The lowest process scheduling priority. This corresponds to &lt;code&gt;IDLE_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;19&lt;/code&gt; on all other platforms.</source>
          <target state="translated">프로세스 스케줄링 우선 순위가 가장 낮습니다. 이것은 Windows의 &lt;code&gt;IDLE_PRIORITY_CLASS&lt;/code&gt; 에 해당하며 다른 모든 플랫폼 에서는 &lt;code&gt;19&lt;/code&gt; 의 좋은 값입니다 .</target>
        </trans-unit>
        <trans-unit id="2c302db5d052a1fa5e3772f8e3404338707c0ae6" translate="yes" xml:space="preserve">
          <source>The maximum extended data offset that has been reported to the connected peer.</source>
          <target state="translated">연결된 피어에보고 된 최대 확장 데이터 오프셋입니다.</target>
        </trans-unit>
        <trans-unit id="b760f7ccb1d6be2e047bdcc423ab12ccf111d220" translate="yes" xml:space="preserve">
          <source>The maximum length of a string instance (in UTF-16 code units) is available as &lt;a href=&quot;#buffer_buffer_constants_max_string_length&quot;&gt;&lt;code&gt;buffer.constants.MAX_STRING_LENGTH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열 인스턴스의 최대 길이 (UTF-16 코드 단위)는 &lt;a href=&quot;#buffer_buffer_constants_max_string_length&quot;&gt; &lt;code&gt;buffer.constants.MAX_STRING_LENGTH&lt;/code&gt; &lt;/a&gt; 로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7710b91b4e824721af667b53f202a7871d88bd9f" translate="yes" xml:space="preserve">
          <source>The maximum number of in-flight bytes recorded for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에 대해 기록 된 진행중인 최대 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="75b02915ee04745312429bee12a59d46f9b7698d" translate="yes" xml:space="preserve">
          <source>The maximum number of outstanding (unacknowledged) pings is determined by the &lt;code&gt;maxOutstandingPings&lt;/code&gt; configuration option. The default maximum is 10.</source>
          <target state="translated">처리되지 않은 (알려지지 않은) 핑의 최대 수는 &lt;code&gt;maxOutstandingPings&lt;/code&gt; 구성 옵션에 의해 결정됩니다 . 기본 최대 값은 10입니다.</target>
        </trans-unit>
        <trans-unit id="d26eb8053627d47554ec8e4748dd4a8bcdd49e7f" translate="yes" xml:space="preserve">
          <source>The maximum number of symbolic links is platform-independent and generally (much) higher than what the native &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt; implementation supports.</source>
          <target state="translated">심볼릭 링크의 최대 수는 플랫폼 독립적이며 일반적으로 native &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt; 구현이 지원 하는 것보다 훨씬 높습니다 .</target>
        </trans-unit>
        <trans-unit id="7551489ca91d948e80c3cc8c57954d2e3e6c5eb9" translate="yes" xml:space="preserve">
          <source>The maximum received offset for this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicStream&lt;/code&gt; 에 대해 수신 된 최대 오프셋입니다 .</target>
        </trans-unit>
        <trans-unit id="f94ad0cb0a50f3f5bdf9cda632f12e11fe8b2d3c" translate="yes" xml:space="preserve">
          <source>The maximum recorded event loop delay.</source>
          <target state="translated">기록 된 최대 이벤트 루프 지연</target>
        </trans-unit>
        <trans-unit id="647c52fe290a7aa0392bcd60aa3e9e2f4dab2700" translate="yes" xml:space="preserve">
          <source>The maximum size of an &lt;code&gt;IPv4/v6&lt;/code&gt; datagram depends on the &lt;code&gt;MTU&lt;/code&gt; (&lt;em&gt;Maximum Transmission Unit&lt;/em&gt;) and on the &lt;code&gt;Payload Length&lt;/code&gt; field size.</source>
          <target state="translated">&lt;code&gt;IPv4/v6&lt;/code&gt; 데이터 그램 의 최대 크기는 &lt;code&gt;MTU&lt;/code&gt; ( &lt;em&gt;최대 전송 단위&lt;/em&gt; ) 및 &lt;code&gt;Payload Length&lt;/code&gt; 필드 크기 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="0d464d166d747ed47c4d6acd41204b884aa6bb55" translate="yes" xml:space="preserve">
          <source>The maximum size of an IPv4/v6 datagram depends on the &lt;code&gt;MTU&lt;/code&gt; (Maximum Transmission Unit) and on the &lt;code&gt;Payload Length&lt;/code&gt; field size.</source>
          <target state="translated">IPv4 / v6 데이터 그램의 최대 크기는 &lt;code&gt;MTU&lt;/code&gt; (최대 전송 단위) 및 &lt;code&gt;Payload Length&lt;/code&gt; 필드 크기 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="02c3f8c7f0bd7f8db827a8ebcb0ca9509efeb97a" translate="yes" xml:space="preserve">
          <source>The mean of the recorded event loop delays.</source>
          <target state="translated">기록 된 이벤트 루프 지연의 평균입니다.</target>
        </trans-unit>
        <trans-unit id="5f193e4b5fc479c115e65c9999a21010d722c79d" translate="yes" xml:space="preserve">
          <source>The memory requirements for deflate are (in bytes):</source>
          <target state="translated">수축에 필요한 메모리 요구 사항은 다음과 같습니다 (바이트).</target>
        </trans-unit>
        <trans-unit id="6eacc04002b65ca67778dff1de5027c712ab8e1a" translate="yes" xml:space="preserve">
          <source>The memory requirements for inflate are (in bytes) &lt;code&gt;1 &amp;lt;&amp;lt; windowBits&lt;/code&gt;. That is, 32K for &lt;code&gt;windowBits&lt;/code&gt; = 15 (default value) plus a few kilobytes for small objects.</source>
          <target state="translated">팽창을위한 메모리 요구 사항은 (바이트 단위) &lt;code&gt;1 &amp;lt;&amp;lt; windowBits&lt;/code&gt; 입니다. 즉, &lt;code&gt;windowBits&lt;/code&gt; = 32 (기본값)의 경우 32K 에 작은 객체의 경우 몇 킬로바이트가 더해집니다.</target>
        </trans-unit>
        <trans-unit id="7c881f56c61219eddbd5d1710886ef6e2c313ce3" translate="yes" xml:space="preserve">
          <source>The message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.</source>
          <target state="translated">메시지는 직렬화 및 구문 분석을 거칩니다. 결과 메시지는 원래 전송 된 메시지와 같지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e16e104e27f59656b3b7eb456a8a9c66415b600f" translate="yes" xml:space="preserve">
          <source>The message object is cloned immediately, and can be modified after posting without having side effects.</source>
          <target state="translated">메시지 객체는 즉시 복제되며, 게시 후 부작용없이 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e37151c2ac4132bcfb25dd3c68d1938f51160451" translate="yes" xml:space="preserve">
          <source>The message object will be cloned immediately, and can be modified after posting without having side effects.</source>
          <target state="translated">메시지 객체는 즉시 복제되며 부작용없이 게시 후 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0d1ac7e35b326d112fee222e33f843490785590" translate="yes" xml:space="preserve">
          <source>The method takes an optional callback argument which will be called when finished.</source>
          <target state="translated">이 메소드는 선택적 콜백 인수를 사용하며 완료되면 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="58f75c96647031bfac78ad1d4823f09b1f79aebc" translate="yes" xml:space="preserve">
          <source>The method was changed to an asynchronous execution model. Legacy code would need to be changed to pass a callback function to the method call.</source>
          <target state="translated">메서드가 비동기 실행 모델로 변경되었습니다. 메서드 호출에 콜백 함수를 전달하려면 레거시 코드를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="e0afa109747da35e840872d11340eff9b15a2a35" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt; of &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; do nothing, and will fail silently.</source>
          <target state="translated">방법은 &lt;code&gt;add()&lt;/code&gt; , &lt;code&gt;clear()&lt;/code&gt; 및 &lt;code&gt;delete()&lt;/code&gt; 의 &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; 아무것도하지 않고, 조용히 실패합니다.</target>
        </trans-unit>
        <trans-unit id="a65996ffdf606c98d77d22fda6e8263c7bed158b" translate="yes" xml:space="preserve">
          <source>The methods available to open/close escapable scopes are &lt;a href=&quot;#n_api_napi_open_escapable_handle_scope&quot;&gt;&lt;code&gt;napi_open_escapable_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_escapable_handle_scope&quot;&gt;&lt;code&gt;napi_close_escapable_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_open_escapable_handle_scope&quot;&gt; &lt;code&gt;napi_open_escapable_handle_scope&lt;/code&gt; &lt;/a&gt; 가능한 범위를 열고 닫을 수있는 방법은 napi_open_escapable_handle_scope 및 &lt;a href=&quot;#n_api_napi_close_escapable_handle_scope&quot;&gt; &lt;code&gt;napi_close_escapable_handle_scope&lt;/code&gt; 입니다.&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6f7f17950f4eb3a239490edb84d05cd598355449" translate="yes" xml:space="preserve">
          <source>The microtask queue is managed by V8 and may be used in a similar manner to the &lt;a href=&quot;process#process_process_nexttick_callback_args&quot;&gt;&lt;code&gt;process.nextTick()&lt;/code&gt;&lt;/a&gt; queue, which is managed by Node.js. The &lt;code&gt;process.nextTick()&lt;/code&gt; queue is always processed before the microtask queue within each turn of the Node.js event loop.</source>
          <target state="translated">마이크로 태스크 큐는 V8에 의해 관리되며 Node.js에 의해 관리되는 &lt;a href=&quot;process#process_process_nexttick_callback_args&quot;&gt; &lt;code&gt;process.nextTick()&lt;/code&gt; &lt;/a&gt; 큐 와 유사한 방식으로 사용될 수 있습니다 . &lt;code&gt;process.nextTick()&lt;/code&gt; 큐는 항상 Node.js를 이벤트 루프의 각 턴 내의 microtask 큐 전에 처리된다.</target>
        </trans-unit>
        <trans-unit id="48978cb836606d29afe552cc44843b645d6fd309" translate="yes" xml:space="preserve">
          <source>The millisecond timestamp when the &lt;code&gt;Event&lt;/code&gt; object was created.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 객체가 생성 된 밀리 초 타임 스탬프 입니다.</target>
        </trans-unit>
        <trans-unit id="3cd62f6b358ecfd9441cc015b81b41f31b4033ac" translate="yes" xml:space="preserve">
          <source>The minimum RTT recorded so far for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에 대해 지금까지 기록 된 최소 RTT 입니다.</target>
        </trans-unit>
        <trans-unit id="05947aeb4f6c9d9feac9d8917230029f87168411" translate="yes" xml:space="preserve">
          <source>The minimum recorded event loop delay.</source>
          <target state="translated">기록 된 최소 이벤트 루프 지연</target>
        </trans-unit>
        <trans-unit id="c8ab56714435040a644302000b0772076b3a18cc" translate="yes" xml:space="preserve">
          <source>The modified RTT calculated for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에 대해 계산 된 수정 된 RTT 입니다.</target>
        </trans-unit>
        <trans-unit id="3be72cf9e2e6df44acaf71ac6c27e3da259cdcc2" translate="yes" xml:space="preserve">
          <source>The module &lt;code&gt;circle.js&lt;/code&gt; has exported the functions &lt;code&gt;area()&lt;/code&gt; and &lt;code&gt;circumference()&lt;/code&gt;. Functions and objects are added to the root of a module by specifying additional properties on the special &lt;code&gt;exports&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;circle.js&lt;/code&gt; 모듈 은 함수 &lt;code&gt;area()&lt;/code&gt; 및 &lt;code&gt;circumference()&lt;/code&gt; 내보냈습니다 . 특수 &lt;code&gt;exports&lt;/code&gt; 에서 추가 속성을 지정하여 함수와 객체가 모듈의 루트에 추가됩니다. 개체 .</target>
        </trans-unit>
        <trans-unit id="3dd317962ef868748c6e477d31e0f52215463c2e" translate="yes" xml:space="preserve">
          <source>The module attempted to be linked is not eligible for linking, because of one of the following reasons:</source>
          <target state="translated">링크를 시도한 모듈은 다음 이유 중 하나로 인해 링크 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6117dfe73589e1d686592596ca5b97da3586b173" translate="yes" xml:space="preserve">
          <source>The module being returned from the linker function is from a different context than the parent module. Linked modules must share the same context.</source>
          <target state="translated">링커 함수에서 반환되는 모듈은 상위 모듈과 다른 컨텍스트에서 제공됩니다. 링크 된 모듈은 동일한 컨텍스트를 공유해야합니다.</target>
        </trans-unit>
        <trans-unit id="4be65968fa64f9f3415d7e7899fb6ad4d2a42a64" translate="yes" xml:space="preserve">
          <source>The module exports two specific components:</source>
          <target state="translated">이 모듈은 두 가지 특정 구성 요소를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="5e3241b3dc4fc159dd6e2590373d2f6edcaca405" translate="yes" xml:space="preserve">
          <source>The module must be successfully linked before instantiation.</source>
          <target state="translated">인스턴스화하기 전에 모듈이 성공적으로 연결되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="edecdd64b4818b59b9da919865b135b48e57f0bb" translate="yes" xml:space="preserve">
          <source>The module objects required for the first time by this one.</source>
          <target state="translated">이것에 의해 처음으로 필요한 모듈 객체.</target>
        </trans-unit>
        <trans-unit id="fa0efd9dd4962ae01761dcb591cc702fc4f262e3" translate="yes" xml:space="preserve">
          <source>The module scope</source>
          <target state="translated">모듈 범위</target>
        </trans-unit>
        <trans-unit id="783407a2289306a27cdc3bf69c55122205f1e40d" translate="yes" xml:space="preserve">
          <source>The module system is implemented in the &lt;code&gt;require('module')&lt;/code&gt; module.</source>
          <target state="translated">모듈 시스템은 &lt;code&gt;require('module')&lt;/code&gt; 모듈 에서 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="6971340cb6f1d59cb77b1d572ec263f32087c9e5" translate="yes" xml:space="preserve">
          <source>The module that first required this one, or &lt;code&gt;null&lt;/code&gt; if the current module is the entry point of the current process, or &lt;code&gt;undefined&lt;/code&gt; if the module was loaded by something that is not a CommonJS module (E.G.: REPL or &lt;code&gt;import&lt;/code&gt;).</source>
          <target state="translated">이 모듈을 처음으로 필요로하는 모듈 . 현재 모듈이 현재 프로세스의 진입 점 인 경우 &lt;code&gt;null&lt;/code&gt; , CommonJS 모듈이 아닌 모듈 (예 : REPL 또는 &lt;code&gt;import&lt;/code&gt; )에 의해 모듈이로드 된 경우 &lt;code&gt;undefined&lt;/code&gt; 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ca030e9e59563188e9d15b093eec01f36cca3aa6" translate="yes" xml:space="preserve">
          <source>The module that first required this one.</source>
          <target state="translated">이것을 처음 요구 한 모듈.</target>
        </trans-unit>
        <trans-unit id="0ad9c14b8f764d47a4fb23c7484512d125b92fd5" translate="yes" xml:space="preserve">
          <source>The module was just created.</source>
          <target state="translated">모듈이 방금 생성되었습니다.</target>
        </trans-unit>
        <trans-unit id="082e3484f6cb16e77ed0dc3f94403f9c18a5ec0a" translate="yes" xml:space="preserve">
          <source>The module wrapper</source>
          <target state="translated">모듈 래퍼</target>
        </trans-unit>
        <trans-unit id="18aaff3433da4c58d496f8db6bf908cfd48e4f29" translate="yes" xml:space="preserve">
          <source>The most important aspect of a &lt;code&gt;Duplex&lt;/code&gt; stream is that the &lt;code&gt;Readable&lt;/code&gt; and &lt;code&gt;Writable&lt;/code&gt; sides operate independently of one another despite co-existing within a single object instance.</source>
          <target state="translated">&lt;code&gt;Duplex&lt;/code&gt; 스트림 의 가장 중요한 측면은 단일 객체 인스턴스 내에 공존하더라도 &lt;code&gt;Readable&lt;/code&gt; 및 &lt;code&gt;Writable&lt;/code&gt; 가능 면이 서로 독립적으로 작동 한다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="99f36b77ff922a2403a1b2438e1910c61bbb93ec" translate="yes" xml:space="preserve">
          <source>The most important options are:</source>
          <target state="translated">가장 중요한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1232e3ea25059583d07d1ec1b191aa093f524eb2" translate="yes" xml:space="preserve">
          <source>The most recently recorded RTT for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에 대해 가장 최근에 기록 된 RTT입니다 .</target>
        </trans-unit>
        <trans-unit id="7a91b5a7f101c727c39dcfae1c0be6d89c0e6303" translate="yes" xml:space="preserve">
          <source>The name of each event will be the uppercase common name for the signal (e.g. &lt;code&gt;'SIGINT'&lt;/code&gt; for &lt;code&gt;SIGINT&lt;/code&gt; signals).</source>
          <target state="translated">각 이벤트의 이름은 신호의 대문자 공통 이름입니다 (예 : &lt;code&gt;SIGINT&lt;/code&gt; 신호 &lt;code&gt;'SIGINT'&lt;/code&gt; 경우 'SIGINT' ).</target>
        </trans-unit>
        <trans-unit id="34cd701586e7eaa9dfde58572cc7c8d826dd60dc" translate="yes" xml:space="preserve">
          <source>The name of the performance entry.</source>
          <target state="translated">성능 항목의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3ec39d8bbebcb83f8210715189a3aea03a7b994d" translate="yes" xml:space="preserve">
          <source>The namespace object of the module. This is only available after instantiation (&lt;code&gt;module.instantiate()&lt;/code&gt;) has completed.</source>
          <target state="translated">모듈의 네임 스페이스 객체. 인스턴스화 ( &lt;code&gt;module.instantiate()&lt;/code&gt; )가 완료된 후에 만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b4b639052abd770744009595bada860b5a488d0" translate="yes" xml:space="preserve">
          <source>The namespace object of the module. This is only available after linking (&lt;code&gt;module.link()&lt;/code&gt;) has completed.</source>
          <target state="translated">모듈의 네임 스페이스 개체입니다. 연결 ( &lt;code&gt;module.link()&lt;/code&gt; )이 완료된 후에 만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd84ef951114b730ce5684383645649d6a6845e0" translate="yes" xml:space="preserve">
          <source>The native call from &lt;code&gt;process.cpuUsage&lt;/code&gt; could not be processed.</source>
          <target state="translated">&lt;code&gt;process.cpuUsage&lt;/code&gt; 의 기본 호출을 처리 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6e9a568acffaeb1567db940433c6597ecc643f6c" translate="yes" xml:space="preserve">
          <source>The nearest parent &lt;code&gt;package.json&lt;/code&gt; is defined as the first &lt;code&gt;package.json&lt;/code&gt; found when searching in the current folder, that folder&amp;rsquo;s parent, and so on up until a node_modules folder or the volume root is reached.</source>
          <target state="translated">가장 가까운 상위 &lt;code&gt;package.json&lt;/code&gt; 은 node_modules 폴더 또는 볼륨 루트에 도달 할 때까지 현재 폴더, 해당 폴더의 상위 등에서 검색 할 때 찾은 첫 번째 &lt;code&gt;package.json&lt;/code&gt; 으로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="2b7b61be8fe480e6e6c7b99bd03833436cc52bb9" translate="yes" xml:space="preserve">
          <source>The nearest parent &lt;code&gt;package.json&lt;/code&gt; is defined as the first &lt;code&gt;package.json&lt;/code&gt; found when searching in the current folder, that folder&amp;rsquo;s parent, and so on up until the root of the volume is reached.</source>
          <target state="translated">가장 가까운 상위 &lt;code&gt;package.json&lt;/code&gt; 은 볼륨의 루트에 도달 할 때까지 현재 폴더, 해당 폴더의 상위 등을 검색 할 때 발견 된 첫 번째 &lt;code&gt;package.json&lt;/code&gt; 으로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="47af3d50d7c8bfe981c9b403f0861c45f375cb81" translate="yes" xml:space="preserve">
          <source>The new commands can then be used from within the REPL instance:</source>
          <target state="translated">그런 다음 REPL 인스턴스 내에서 새 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="104e36e764dd9d0fb07447c31dcb417f6bea33e2" translate="yes" xml:space="preserve">
          <source>The new settings will not become effective until the &lt;code&gt;SETTINGS&lt;/code&gt; acknowledgment is received and the &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted. It is possible to send multiple &lt;code&gt;SETTINGS&lt;/code&gt; frames while acknowledgment is still pending.</source>
          <target state="translated">새로운 설정은 &lt;code&gt;SETTINGS&lt;/code&gt; 승인을 받고 &lt;code&gt;'localSettings'&lt;/code&gt; 이벤트가 생성 될 때까지 적용되지 않습니다 . 승인이 아직 보류중인 동안 여러 &lt;code&gt;SETTINGS&lt;/code&gt; 프레임 을 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="010aa406081834f99277106d0000f1552dc8125a" translate="yes" xml:space="preserve">
          <source>The new stream class must then implement one or more specific methods, depending on the type of stream being created, as detailed in the chart below:</source>
          <target state="translated">그런 다음 새 스트림 클래스는 아래 차트에 설명 된대로 작성중인 스트림 유형에 따라 하나 이상의 특정 메소드를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="bc4c6fb13126abaa4bc413e810cd00b6053f1ddd" translate="yes" xml:space="preserve">
          <source>The newly created function is not automatically visible from script after this call. Instead, a property must be explicitly set on any object that is visible to JavaScript, in order for the function to be accessible from script.</source>
          <target state="translated">이 호출 후 새로 작성된 함수는 스크립트에서 자동으로 표시되지 않습니다. 대신 스크립트에서 함수에 액세스 할 수 있으려면 JavaScript에 표시되는 모든 객체에 속성을 명시 적으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="27b9c478ea5e686312bd5f0cfbbb2ae1c6a164ca" translate="yes" xml:space="preserve">
          <source>The newly created socket can be either a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint, depending on what it &lt;a href=&quot;#net_socket_connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">새로 작성된 소켓은 &lt;a href=&quot;#net_socket_connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; 에 따라 TCP 소켓 또는 스트리밍 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 엔드 포인트 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="762b7516f06acc39fd303e873da3eae3984842c2" translate="yes" xml:space="preserve">
          <source>The next difference is the signature for the &lt;code&gt;Init&lt;/code&gt; method. For a N-API module it is as follows:</source>
          <target state="translated">다음 차이점은 &lt;code&gt;Init&lt;/code&gt; 메소드 의 서명입니다 . N-API 모듈의 경우 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="51f47c77d786656094e158322f5944ac67692ac6" translate="yes" xml:space="preserve">
          <source>The next program will check for the stats of the given paths:</source>
          <target state="translated">다음 프로그램은 주어진 경로의 통계를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b79627d819fdf1ba438e5679d480db0ea9d3d58f" translate="yes" xml:space="preserve">
          <source>The number of &lt;code&gt;QuicSession&lt;/code&gt; instances rejected due to server busy status.</source>
          <target state="translated">서버 사용 중 상태로 인해 거부 된 &lt;code&gt;QuicSession&lt;/code&gt; 인스턴스 수입니다 .</target>
        </trans-unit>
        <trans-unit id="00dcde3350568519617569602e42884411ad01fd" translate="yes" xml:space="preserve">
          <source>The number of bits to generate for the HMAC key. If omitted, the length will be determined by the hash algorithm used. This is optional and should be omitted for most cases.</source>
          <target state="translated">HMAC 키에 대해 생성 할 비트 수입니다. 생략하면 사용 된 해시 알고리즘에 따라 길이가 결정됩니다. 이것은 선택 사항이며 대부분의 경우 생략해야합니다.</target>
        </trans-unit>
        <trans-unit id="707e00467eb1024ad6a41e2d7fd76cd835c436ed" translate="yes" xml:space="preserve">
          <source>The number of blocks allocated for this file.</source>
          <target state="translated">이 파일에 할당 된 블록 수</target>
        </trans-unit>
        <trans-unit id="d6e9890c34bed9796b4ceb97682790f3922219b9" translate="yes" xml:space="preserve">
          <source>The number of bytes received by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 에 의해 수신 된 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="451b27e016cce4c0bc96b5118b87e6d20a59ba4d" translate="yes" xml:space="preserve">
          <source>The number of bytes sent by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 에서 보낸 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="90a2027f23d852082230368e8e225b949453c0da" translate="yes" xml:space="preserve">
          <source>The number of bytes that have been read so far.</source>
          <target state="translated">지금까지 읽은 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="95a86f54b7a1f2469bc5f5667c33947867d66d1f" translate="yes" xml:space="preserve">
          <source>The number of bytes written so far. Does not include data that is still queued for writing.</source>
          <target state="translated">지금까지 쓴 바이트 수 쓰기 대기중인 데이터는 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e0e41268616721f1fca89739ee51de57404e4fb1" translate="yes" xml:space="preserve">
          <source>The number of client &lt;code&gt;QuicSession&lt;/code&gt; instances that have been associated with this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 과 연결된 클라이언트 &lt;code&gt;QuicSession&lt;/code&gt; 인스턴스 수입니다 .</target>
        </trans-unit>
        <trans-unit id="83db9368d81b7eaf94d6048ec32eddfadddf804d" translate="yes" xml:space="preserve">
          <source>The number of concurrent connections on the server.</source>
          <target state="translated">서버의 동시 연결 수</target>
        </trans-unit>
        <trans-unit id="b897cc45a35e5f5bff42b399899953585ae33b16" translate="yes" xml:space="preserve">
          <source>The number of frames captured by the stack trace is bounded by the smaller of &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; or the number of available frames on the current event loop tick.</source>
          <target state="translated">스택 추적에 의해 캡처 된 프레임 수는 더 작은 &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; 의해 제한됩니다. 또는 현재 이벤트 루프 틱에서 사용 가능한 프레임 수에 .</target>
        </trans-unit>
        <trans-unit id="6549fcc0f129140e66512a1427b7f4614faf5cbc" translate="yes" xml:space="preserve">
          <source>The number of hard-links that exist for the file.</source>
          <target state="translated">파일에 존재하는 하드 링크 수입니다.</target>
        </trans-unit>
        <trans-unit id="78bc2183886d295e0dfc4c9a45139251fa0866f5" translate="yes" xml:space="preserve">
          <source>The number of iterations the PBKDF2 algorithm should make when deriving bits.</source>
          <target state="translated">비트를 파생 할 때 PBKDF2 알고리즘이 수행해야하는 반복 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="75ea2a989eab02b42949109ba5ea2b821d783082" translate="yes" xml:space="preserve">
          <source>The number of key update operations that have occurred.</source>
          <target state="translated">발생한 키 업데이트 작업의 수입니다.</target>
        </trans-unit>
        <trans-unit id="666280d68d6a792c31cb2051481e2a0a83229e9e" translate="yes" xml:space="preserve">
          <source>The number of lost-packet retransmissions that have been performed on this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에서 수행 된 손실 패킷 재전송 수입니다 .</target>
        </trans-unit>
        <trans-unit id="adda133b3952499899f6f3919881bfa0307c4d10" translate="yes" xml:space="preserve">
          <source>The number of milliseconds of inactivity a server needs to wait for additional incoming data, after it has finished writing the last response, before a socket will be destroyed. If the server receives new data before the keep-alive timeout has fired, it will reset the regular inactivity timeout, i.e., &lt;a href=&quot;#http_server_timeout&quot;&gt;&lt;code&gt;server.timeout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">소켓이 소멸되기 전에 마지막 응답 쓰기를 완료 한 후 서버가 추가 수신 데이터를 기다려야하는 비활성 시간 (밀리 초)입니다. 연결 유지 시간 초과가 발생하기 전에 서버가 새 데이터를 수신하면 일반 비활성 시간 초과 (예 : &lt;a href=&quot;#http_server_timeout&quot;&gt; &lt;code&gt;server.timeout&lt;/code&gt; )&lt;/a&gt; 가 재설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="03ad62fcca99d252c1246acfaf3c6b73cd75231d" translate="yes" xml:space="preserve">
          <source>The number of milliseconds of inactivity before a socket is presumed to have timed out.</source>
          <target state="translated">소켓이 시간 종료 된 것으로 추정되기 전의 비활성 시간 (밀리 초).</target>
        </trans-unit>
        <trans-unit id="3977e5c0af88431e5b4e33b9e2dbc4b5de0879ae" translate="yes" xml:space="preserve">
          <source>The number of packets received by this &lt;code&gt;QuicSocket&lt;/code&gt; that have been ignored.</source>
          <target state="translated">무시 된이 &lt;code&gt;QuicSocket&lt;/code&gt; 에서 수신 한 패킷 수입니다 .</target>
        </trans-unit>
        <trans-unit id="88dfd671fda640fb284dea057c9fc3bda63c3cd5" translate="yes" xml:space="preserve">
          <source>The number of packets sent by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 에서 보낸 패킷 수입니다 .</target>
        </trans-unit>
        <trans-unit id="57c2ce7c604c61cc73961e484de47af48608ac24" translate="yes" xml:space="preserve">
          <source>The number of packets successfully received by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 에서 성공적으로 수신 한 패킷 수입니다 .</target>
        </trans-unit>
        <trans-unit id="da8ac587e867ec7b873ba123e43810a9f2c4b30d" translate="yes" xml:space="preserve">
          <source>The number of retransmissions caused by delayed acknowledgments.</source>
          <target state="translated">지연된 승인으로 인한 재전송 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="137be968007ab2546a36979ca3b6cb65cd52e77a" translate="yes" xml:space="preserve">
          <source>The number of server &lt;code&gt;QuicSession&lt;/code&gt; instances that have been associated with this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSocket&lt;/code&gt; 과 연관된 서버 &lt;code&gt;QuicSession&lt;/code&gt; 인스턴스 수입니다 .</target>
        </trans-unit>
        <trans-unit id="86e7462480a7d0627eea84f3d1a614b44db3e9d9" translate="yes" xml:space="preserve">
          <source>The number of stateless resets that have been sent.</source>
          <target state="translated">전송 된 상태 비 저장 재설정 수입니다.</target>
        </trans-unit>
        <trans-unit id="e172dc32b60a311b65c6eb277f6b79d272de8ad1" translate="yes" xml:space="preserve">
          <source>The number of streams created on a single HTTP/2 session reached the maximum limit.</source>
          <target state="translated">단일 HTTP / 2 세션에서 작성된 스트림 수가 최대 한계에 도달했습니다.</target>
        </trans-unit>
        <trans-unit id="485571648f798cc1149fe3dc79decc281b4c7db7" translate="yes" xml:space="preserve">
          <source>The number of times the event loop delay exceeded the maximum 1 hour event loop delay threshold.</source>
          <target state="translated">이벤트 루프 지연이 최대 1 시간 이벤트 루프 지연 임계 값을 초과 한 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="ac86f8862e149dadb72b2dbeec6eb8381b8ba41a" translate="yes" xml:space="preserve">
          <source>The numeric group identifier of the group that owns the file (POSIX).</source>
          <target state="translated">파일을 소유 한 그룹의 숫자 그룹 식별자 (POSIX).</target>
        </trans-unit>
        <trans-unit id="0515e305805e98af62a3f52bc545b427528c9133" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; 의 숫자 식별자입니다 .</target>
        </trans-unit>
        <trans-unit id="95fbb303d7117ac0cc3ddd8c21e8aa6323d739de" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the device containing the file.</source>
          <target state="translated">파일이 포함 된 장치의 숫자 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="5bcfd36761a1de493eeb09cab611d6b7581ca7fe" translate="yes" xml:space="preserve">
          <source>The numeric representation of the local port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">로컬 포트의 숫자 표현. 예를 들어, &lt;code&gt;80&lt;/code&gt; 또는 &lt;code&gt;21&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="042883a8dd9e1f35f72278a7a8626cb40d0978ea" translate="yes" xml:space="preserve">
          <source>The numeric representation of the remote port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">원격 포트의 숫자 표현. 예를 들어, &lt;code&gt;80&lt;/code&gt; 또는 &lt;code&gt;21&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b62dd787bc222e91a4a0ed4bf6ba392d5a6fb778" translate="yes" xml:space="preserve">
          <source>The numeric stream identifier of this &lt;code&gt;Http2Stream&lt;/code&gt; instance. Set to &lt;code&gt;undefined&lt;/code&gt; if the stream identifier has not yet been assigned.</source>
          <target state="translated">이 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스 의 숫자 스트림 식별자입니다 . 스트림 식별자가 아직 할당 &lt;code&gt;undefined&lt;/code&gt; 경우 undefined로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa8f383702a5ceae99ce4b389c67ad72755ba3f7" translate="yes" xml:space="preserve">
          <source>The numeric user identifier of the user that owns the file (POSIX).</source>
          <target state="translated">파일을 소유 한 사용자의 숫자 사용자 식별자 (POSIX).</target>
        </trans-unit>
        <trans-unit id="d4d406b789ddb9b5e19c751f22e7d2dcb831b944" translate="yes" xml:space="preserve">
          <source>The object can also be an ArrayBuffer and CryptoKey.</source>
          <target state="translated">객체는 ArrayBuffer 및 CryptoKey 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5cb1b68058d104a308062e11d73d1e40f866b4ff" translate="yes" xml:space="preserve">
          <source>The object no longer accidentally exposes native C++ bindings.</source>
          <target state="translated">개체가 더 이상 실수로 네이티브 C ++ 바인딩을 노출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9383b10ddf25c0ce6d97c93198a1bf00d5916ca1" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;querystring.parse()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.parse()&lt;/code&gt; 메소드 &lt;em&gt;가&lt;/em&gt; 리턴 한 오브젝트 는 JavaScript &lt;code&gt;Object&lt;/code&gt; 로부터 프로토 타입으로 상속 &lt;em&gt;되지 않습니다&lt;/em&gt; . 즉 , &lt;code&gt;obj.toString()&lt;/code&gt; , &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; 등의 일반적인 &lt;code&gt;Object&lt;/code&gt; 메서드 는 정의되어 &lt;em&gt;있지 않으며 작동하지 않습니다&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="be819bdae9121513238d1f9a8e195544167c627a" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;response.getHeaders()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;response.getHeaders()&lt;/code&gt; 메소드 &lt;em&gt;가&lt;/em&gt; 리턴 한 오브젝트 는 JavaScript &lt;code&gt;Object&lt;/code&gt; 로부터 프로토 타입으로 상속 &lt;em&gt;되지 않습니다&lt;/em&gt; . 즉 , &lt;code&gt;obj.toString()&lt;/code&gt; , &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; 등의 일반적인 &lt;code&gt;Object&lt;/code&gt; 메서드 는 정의되어 &lt;em&gt;있지 않으며 작동하지 않습니다&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ebb203e4256fb19d4ef99599ca9b09d60bab677" translate="yes" xml:space="preserve">
          <source>The object that acts as the namespace for all W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; related functionality. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla Developer Network&lt;/a&gt; for usage and compatibility.</source>
          <target state="translated">모든 W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; 관련 기능 의 네임 스페이스 역할을하는 개체입니다 . &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla 개발자 네트워크&lt;/a&gt; 참조사용법과 호환성에 대해서는 를 .</target>
        </trans-unit>
        <trans-unit id="74489c6bc5e2589b31724813aed93341ee4501d7" translate="yes" xml:space="preserve">
          <source>The object will contain the properties:</source>
          <target state="translated">개체에는 다음 속성이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b541c74cc18aaa314b7c832f7d31793b35808668" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">여기에 나열된 객체는 Node.js에만 해당됩니다. 가 있습니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;내장 된 객체&lt;/a&gt; 또한 전 세계적으로 액세스 할 수있는 자바 스크립트 언어 자체의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="a5307f8ae4e7b8daeba7438d364931e5ea281096" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are a number of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">여기에 나열된 객체는 Node.js에만 해당됩니다. JavaScript 언어 자체의 일부인 전 세계적으로 액세스 할 수 있는 많은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;내장 객체&lt;/a&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="499501b23d67779dbab01a6a26119c1c65a4262b" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.setupMaster()&lt;/code&gt; 를 통해 설정할 수없는 워커의 유일한 속성은 &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; &lt;/a&gt; 전달 된 &lt;code&gt;env&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dc78f21c4e5c2db90b51724d6195216ddadfbc62" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;code&gt;.fork()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.setupMaster()&lt;/code&gt; 를 통해 설정할 수없는 작업자의 유일한 속성은 &lt;code&gt;.fork()&lt;/code&gt; 전달 된 &lt;code&gt;env&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c18120e27e4c6e292bcb271ec4406958e025cda8" translate="yes" xml:space="preserve">
          <source>The only way to know for sure that the datagram has been sent is by using a &lt;code&gt;callback&lt;/code&gt;. If an error occurs and a &lt;code&gt;callback&lt;/code&gt; is given, the error will be passed as the first argument to the &lt;code&gt;callback&lt;/code&gt;. If a &lt;code&gt;callback&lt;/code&gt; is not given, the error is emitted as an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;socket&lt;/code&gt; object.</source>
          <target state="translated">데이터 그램이 전송되었는지 확인하는 유일한 방법은 &lt;code&gt;callback&lt;/code&gt; 을 사용하는 것 입니다. 에러가 발생하고 &lt;code&gt;callback&lt;/code&gt; 이 주어지면, 에러는 &lt;code&gt;callback&lt;/code&gt; 대한 첫 번째 인수로 전달됩니다 . 경우 &lt;code&gt;callback&lt;/code&gt; 주어지지 않는 오류는로 방출되는 &lt;code&gt;'error'&lt;/code&gt; 온 이벤트 &lt;code&gt;socket&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="7647e89cb4fdb8b632085740a5be4e8b940e567a" translate="yes" xml:space="preserve">
          <source>The operating system CPU architecture for which the Node.js binary was compiled. Possible values are: &lt;code&gt;'arm'&lt;/code&gt;, &lt;code&gt;'arm64'&lt;/code&gt;, &lt;code&gt;'ia32'&lt;/code&gt;, &lt;code&gt;'mips'&lt;/code&gt;,&lt;code&gt;'mipsel'&lt;/code&gt;, &lt;code&gt;'ppc'&lt;/code&gt;, &lt;code&gt;'ppc64'&lt;/code&gt;, &lt;code&gt;'s390'&lt;/code&gt;, &lt;code&gt;'s390x'&lt;/code&gt;, &lt;code&gt;'x32'&lt;/code&gt;, and &lt;code&gt;'x64'&lt;/code&gt;.</source>
          <target state="translated">Node.js 바이너리가 컴파일 된 운영 체제 CPU 아키텍처입니다. 가능한 값은 &lt;code&gt;'arm'&lt;/code&gt; , &lt;code&gt;'arm64'&lt;/code&gt; , &lt;code&gt;'ia32'&lt;/code&gt; , &lt;code&gt;'mips'&lt;/code&gt; , &lt;code&gt;'mipsel'&lt;/code&gt; , &lt;code&gt;'ppc'&lt;/code&gt; , &lt;code&gt;'ppc64'&lt;/code&gt; , &lt;code&gt;'s390'&lt;/code&gt; , &lt;code&gt;'s390x'&lt;/code&gt; , &lt;code&gt;'x32'&lt;/code&gt; 및 &lt;code&gt;'x64'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="576168f18bf6a9c771bad8bf0ef707c41bacf3dc" translate="yes" xml:space="preserve">
          <source>The operating system-specific end-of-line marker.</source>
          <target state="translated">운영 체제 별 라인 끝 마커입니다.</target>
        </trans-unit>
        <trans-unit id="7ad3e7e145c0e7190f2d6920ff4570771b7cd38d" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;a href=&quot;#domain_domain_add_emitter&quot;&gt;&lt;code&gt;domain.add(emitter)&lt;/code&gt;&lt;/a&gt;. Removes domain handling from the specified emitter.</source>
          <target state="translated">&lt;a href=&quot;#domain_domain_add_emitter&quot;&gt; &lt;code&gt;domain.add(emitter)&lt;/code&gt; &lt;/a&gt; 의 반대입니다 . 지정된 이미 터에서 도메인 처리를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="caab31fb22afb4b240d3935cb5134e9f4f33d038" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; arguments specify a memory range within the &lt;code&gt;arrayBuffer&lt;/code&gt; that will be shared by the &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">선택적인 &lt;code&gt;byteOffset&lt;/code&gt; 및 &lt;code&gt;length&lt;/code&gt; 인수 는 &lt;code&gt;Buffer&lt;/code&gt; 가 공유 할 &lt;code&gt;arrayBuffer&lt;/code&gt; 내의 메모리 범위를 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="f4cce0bb94cb39d36b419142e4a7c61c1067e805" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; argument can be used to replace the logging function with a different function that doesn't have any initialization or unnecessary wrapping.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 인수를 사용하여 로깅 함수를 초기화 나 불필요한 래핑이없는 다른 함수로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b96aca949c2dfad90f34208e151d92d5c4e3782" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; is a function that is invoked after the message is sent but before the child may have received it. The function is called with a single argument: &lt;code&gt;null&lt;/code&gt; on success, or an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object on failure.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 은 메시지가 전송 된 후 아이가 수신하기 전에 호출되는 함수입니다. 함수는 성공시 &lt;code&gt;null&lt;/code&gt; 또는 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 라는 단일 인수로 호출됩니다. 실패시 객체 .</target>
        </trans-unit>
        <trans-unit id="0f4bda021a4230b873e23262d38a21e96fd815c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 이벤트에 대한 일회성 리스너로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f75dfbd1ccb81dcb45cc7787f70bf228fab77d5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 &lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt; 이벤트에 대한 일회성 리스너로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="7a388a3c8ef1c6891f4bc45f8cf75c4ca428eb38" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out - this may not be immediately.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 데이터가 최종적으로 기록 될 때 실행되며 이는 즉시 수행되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f398da22b9a537a80ef95f6587773ea48b8d1eb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out, which may not be immediately.</source>
          <target state="translated">선택적인 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 데이터가 최종적으로 기록 될 때 실행되며 즉시 작성되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4848a2877fc4fdda35fdaabacb12c2f613d9bff6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;constructorOpt&lt;/code&gt; argument accepts a function. If given, all frames above &lt;code&gt;constructorOpt&lt;/code&gt;, including &lt;code&gt;constructorOpt&lt;/code&gt;, will be omitted from the generated stack trace.</source>
          <target state="translated">선택적 &lt;code&gt;constructorOpt&lt;/code&gt; 인수는 함수를 허용합니다. 주어진 경우 &lt;code&gt;constructorOpt&lt;/code&gt; 를 포함하여 &lt;code&gt;constructorOpt&lt;/code&gt; 위의 모든 프레임 은 생성 된 스택 추적에서 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="1ad586a6a1c5973d95690ca8fdc184bb4c8b9ce9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. &lt;code&gt;endMark&lt;/code&gt; will be &lt;code&gt;performance.now()&lt;/code&gt; if no parameter is passed, otherwise if the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">선택적 &lt;code&gt;endMark&lt;/code&gt; 인수는 Performance Timeline의 &lt;em&gt;기존 &lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; 또는 &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; 클래스에서 제공하는 타임 스탬프 속성을 식별해야합니다 . 매개 변수가 전달되지 않으면 &lt;code&gt;endMark&lt;/code&gt; 는 &lt;code&gt;performance.now()&lt;/code&gt; 이고, 그렇지 않으면 이름이 지정된 &lt;code&gt;endMark&lt;/code&gt; 가 없으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ebd4f60ba39ba1f7450156da76a6991f33b60f2b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;flags&lt;/code&gt; argument uses &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; by default. The &lt;code&gt;flags&lt;/code&gt; is a bit field taking one of or a mix of the following flags (defined in &lt;code&gt;crypto.constants&lt;/code&gt;):</source>
          <target state="translated">선택적 &lt;code&gt;flags&lt;/code&gt; 인자는 기본적으로 &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; 을 사용합니다 . &lt;code&gt;flags&lt;/code&gt; 의 비트 필드 복용 하나 (에 정의 된 다음 플래그의 혼합이다 &lt;code&gt;crypto.constants&lt;/code&gt; ) :</target>
        </trans-unit>
        <trans-unit id="cc9f65c30553afbd1b4d82c484f88aa304441ee3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given fd. If the &lt;code&gt;statCheck&lt;/code&gt; function is provided, the &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; method will perform an &lt;code&gt;fs.fstat()&lt;/code&gt; call to collect details on the provided file descriptor.</source>
          <target state="translated">선택적 &lt;code&gt;options.statCheck&lt;/code&gt; 함수는 지정된 fd 의 &lt;code&gt;fs.Stat&lt;/code&gt; 세부 사항을 기반으로 추가 컨텐츠 헤더를 설정할 수있는 기회를 사용자 코드에 제공하도록 지정 될 수 있습니다 . 경우] &lt;code&gt;statCheck&lt;/code&gt; 의 기능이 제공되는 상기 &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; 메소드는 수행 &lt;code&gt;fs.fstat()&lt;/code&gt; 제공된 파일 디스크립터에 수집 세부 통화.</target>
        </trans-unit>
        <trans-unit id="b8ca99509b25a6ab5ee70308bafe39a1b71f3d06" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given file:</source>
          <target state="translated">옵션 &lt;code&gt;options.statCheck&lt;/code&gt; 함수는 지정된 파일 의 &lt;code&gt;fs.Stat&lt;/code&gt; 세부 사항을 기반으로 추가 컨텐츠 헤더를 설정할 수있는 기회를 사용자 코드에 제공하도록 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30b397372595487a1e26df98289fea04b5b45c5e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 콜백에 전달 된 파일 이름에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 파일 이름이 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="72091fa8c95571c209adee473c28da126c9baae6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 반환 된 파일 이름에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 파일 이름이 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="1a3104057b5c38fd9e4bdac45532ce193dd2ed26" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 파일 이름에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 파일 이름이 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="3fb2522fc8cd80845e2a3e2842ca468e7ddb1fc0" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열 또는 &lt;code&gt;encoding&lt;/code&gt; 콜백에 전달 된 링크 경로에 사용할 문자 인코딩을 지정 인코딩 속성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정된 경우, 반환 된 링크 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="bc5b6bb3218a1bc4526850c82e33474df9261f0f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열 또는 &lt;code&gt;encoding&lt;/code&gt; 리턴 된 링크 경로에 사용할 문자 인코딩을 지정 인코딩 특성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정된 경우, 반환 된 링크 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="4eb7ec41225ab0c4c453df7c72a1c959224af868" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">옵션 &lt;code&gt;options&lt;/code&gt; 인수는와 인코딩을 지정하는 문자열, 또는 객체가 될 수 &lt;code&gt;encoding&lt;/code&gt; 콜백에 전달 된 경로에 사용할 문자 인코딩을 지정 속성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="cbb0aa1d9d2894d118c49c7e7622ffb29c1d85fd" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">옵션 &lt;code&gt;options&lt;/code&gt; 인수는와 인코딩을 지정하는 문자열, 또는 객체가 될 수 &lt;code&gt;encoding&lt;/code&gt; 리턴 된 경로에 사용할 문자 인코딩을 지정 특성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="e5a60b46a69ed6136f940f53c21b10d9760164ad" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 경로에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . 만약 &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 반환 된 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="e9b1ce0f8bd5bffe9b99b0262eb3a242c5e14124" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aadca4acdf449aec7197e7dc17a104a173c63dbb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 &lt;code&gt;mode&lt;/code&gt; (권한 및 고정 비트)를 지정하는 정수 이거나 부모 디렉터리를 만들어야하는지 여부를 나타내는 &lt;code&gt;mode&lt;/code&gt; 속성 및 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체 일 수 있습니다. &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 일 때 &lt;code&gt;fs.mkdir()&lt;/code&gt; 호출 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="c72f65bfd27c29868388c460c4fee4a3c00dfdde" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 &lt;code&gt;mode&lt;/code&gt; (권한 및 고정 비트)를 지정하는 정수 이거나 부모 디렉터리를 만들어야하는지 여부를 나타내는 &lt;code&gt;mode&lt;/code&gt; 속성 및 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체 일 수 있습니다. &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 일 때 &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; 호출 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 거부됩니다 .</target>
        </trans-unit>
        <trans-unit id="c29432448e6ca0758f3927cc455e95393816652f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적인 &lt;code&gt;options&lt;/code&gt; 인수는 정수 지정 모드 (권한 및 고정 비트) 또는 &lt;code&gt;mode&lt;/code&gt; 속성과 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체로 부모 폴더를 만들지 여부를 나타냅니다. 때 &lt;code&gt;fs.mkdir()&lt;/code&gt; 호출 &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 일 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="fe44a69d963c148c4578bad831ce5ae5a6ff0b73" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적인 &lt;code&gt;options&lt;/code&gt; 인수는 정수 지정 모드 (권한 및 고정 비트) 또는 &lt;code&gt;mode&lt;/code&gt; 속성과 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체로 부모 폴더를 만들지 여부를 나타냅니다. &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; 호출 &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 인 경우 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 거부됩니다 .</target>
        </trans-unit>
        <trans-unit id="8df1775ddf99a0878d244350e8f9f93ec0727826" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument controls stream behavior. For XOF hash functions such as &lt;code&gt;'shake256'&lt;/code&gt;, the &lt;code&gt;outputLength&lt;/code&gt; option can be used to specify the desired output length in bytes.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 스트림 동작을 제어합니다. &lt;code&gt;'shake256'&lt;/code&gt; 과 같은 XOF 해시 함수의 경우 &lt;code&gt;outputLength&lt;/code&gt; 옵션을 사용하여 원하는 출력 길이를 바이트 단위로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="261827080f081a265d9518c196a9756632d4c999" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;sendHandle&lt;/code&gt; argument that may be passed to &lt;code&gt;subprocess.send()&lt;/code&gt; is for passing a TCP server or socket object to the child process. The child will receive the object as the second argument passed to the callback function registered on the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Any data that is received and buffered in the socket will not be sent to the child.</source>
          <target state="translated">&lt;code&gt;subprocess.send()&lt;/code&gt; 전달 될 수있는 선택적 &lt;code&gt;sendHandle&lt;/code&gt; 인수 는 TCP 서버 또는 소켓 객체를 자식 프로세스로 전달하기위한 것입니다. 자식은 &lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt; 이벤트 에 등록 된 콜백 함수에 전달 된 두 번째 인수로 객체를받습니다 . 소켓에서 수신 및 버퍼링 된 데이터는 자식에게 전송되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="21776c2a95a91147668e079bc279b294e52498a6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;size&lt;/code&gt; argument specifies a specific number of bytes to read. If &lt;code&gt;size&lt;/code&gt; bytes are not available to be read, &lt;code&gt;null&lt;/code&gt; will be returned &lt;em&gt;unless&lt;/em&gt; the stream has ended, in which case all of the data remaining in the internal buffer will be returned.</source>
          <target state="translated">선택적인 &lt;code&gt;size&lt;/code&gt; 인수는 읽을 특정 바이트 수를 지정합니다. &lt;code&gt;size&lt;/code&gt; 바이트를 읽을 수없는 경우 &lt;code&gt;null&lt;/code&gt; 반환됩니다 &lt;em&gt;않는&lt;/em&gt; 스트림이 종료 된 내부 버퍼에 남아있는 모든 데이터가 반환 될 경우.</target>
        </trans-unit>
        <trans-unit id="7dcc1ff991ba74f3e2341e794b5bd2a7209b9bd5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;targetStart&lt;/code&gt;, &lt;code&gt;targetEnd&lt;/code&gt;, &lt;code&gt;sourceStart&lt;/code&gt;, and &lt;code&gt;sourceEnd&lt;/code&gt; arguments can be used to limit the comparison to specific ranges within &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; respectively.</source>
          <target state="translated">선택적 &lt;code&gt;targetStart&lt;/code&gt; , &lt;code&gt;targetEnd&lt;/code&gt; , &lt;code&gt;sourceStart&lt;/code&gt; 및 &lt;code&gt;sourceEnd&lt;/code&gt; 인수를 사용하여 비교를 특정 범위 내로 제한 할 수 있습니다 &lt;code&gt;target&lt;/code&gt; 및 &lt;code&gt;buf&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ae334afbff89ea524e6a92b60e3ba277d8fe499" translate="yes" xml:space="preserve">
          <source>The optional length in bits of the DSA divisor.</source>
          <target state="translated">DSA 제수 비트 단위의 선택적 길이입니다.</target>
        </trans-unit>
        <trans-unit id="50f2a22b0119c9c0ee62a594dab9c340c71fcf3f" translate="yes" xml:space="preserve">
          <source>The optional number of bits in the HMAC key. This is optional and should be omitted for most cases.</source>
          <target state="translated">HMAC 키의 선택적 비트 수입니다. 이것은 선택 사항이며 대부분의 경우 생략해야합니다.</target>
        </trans-unit>
        <trans-unit id="de8fd304a1c7493a27d13d17ca2a7665914145e8" translate="yes" xml:space="preserve">
          <source>The optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid.</source>
          <target state="translated">선택적 반환 된 참조는 초기에 약한 참조로, 참조 카운트가 0임을 의미합니다. 일반적으로이 참조 카운트는 인스턴스가 유효한 상태를 유지해야하는 비동기 작업 중에 일시적으로 증가합니다.</target>
        </trans-unit>
        <trans-unit id="95012178c5c225ea89ef66f257a490e5add9d4a7" translate="yes" xml:space="preserve">
          <source>The options argument may include an AbortSignal to abort an ongoing readFile request.</source>
          <target state="translated">options 인수에는 진행중인 readFile 요청을 중단하기위한 AbortSignal이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d065929bd052704ead38211ed19949b20dc647b" translate="yes" xml:space="preserve">
          <source>The options argument may include an AbortSignal to abort an ongoing writeFile request.</source>
          <target state="translated">options 인수에는 진행중인 writeFile 요청을 중단하기위한 AbortSignal이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bf5d71ef6bb11c383df71dca6fed4c4d1e8880f" translate="yes" xml:space="preserve">
          <source>The output of running this script is:</source>
          <target state="translated">이 스크립트를 실행 한 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="45989adee27623dee9b58303d643cfed64b9aa3e" translate="yes" xml:space="preserve">
          <source>The owner may read, write and execute the file.</source>
          <target state="translated">소유자는 파일을 읽고 쓰고 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="517ac29bd131c47e197bd8fc05c9d28ca40c950c" translate="yes" xml:space="preserve">
          <source>The package has other packages that depend on it, and the end user might install both this package and those other packages. For example a &lt;code&gt;utilities&lt;/code&gt; package is used directly in an application, and a &lt;code&gt;utilities-plus&lt;/code&gt; package adds a few more functions to &lt;code&gt;utilities&lt;/code&gt;. Because the wrapper exports underlying CommonJS files, it doesn&amp;rsquo;t matter if &lt;code&gt;utilities-plus&lt;/code&gt; is written in CommonJS or ES module syntax; it will work either way.</source>
          <target state="translated">패키지에는 종속 된 다른 패키지가 있으며 최종 사용자는이 패키지와 다른 패키지를 모두 설치할 수 있습니다. 예를 들어, &lt;code&gt;utilities&lt;/code&gt; 패키지는 응용 프로그램에서 직접 사용 및 &lt;code&gt;utilities-plus&lt;/code&gt; 패키지에 몇 가지 더 많은 기능을 추가하는 &lt;code&gt;utilities&lt;/code&gt; . 래퍼는 기본 CommonJS 파일을 내보내기 때문에 &lt;code&gt;utilities-plus&lt;/code&gt; 가 CommonJS 또는 ES 모듈 구문으로 작성 되었는지는 중요하지 않습니다 . 어느 쪽이든 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3c7c3379f9a3a1dd43b0b8ecadf6bccf074d2619" translate="yes" xml:space="preserve">
          <source>The package is currently written in CommonJS and the author would prefer not to refactor it into ES module syntax, but wishes to provide named exports for ES module consumers.</source>
          <target state="translated">패키지는 현재 CommonJS로 작성되었으며 작성자는이를 ES 모듈 구문으로 리팩토링하는 것을 선호하지 않지만 ES 모듈 소비자를 위해 명명 된 내보내기를 제공하고자합니다.</target>
        </trans-unit>
        <trans-unit id="31b0024acb48a149085084509c8a806870ff66f8" translate="yes" xml:space="preserve">
          <source>The package is currently written in ES module syntax and the package author wants that version to be used wherever such syntax is supported.</source>
          <target state="translated">패키지는 현재 ES 모듈 구문으로 작성되었으며 패키지 작성자는 해당 구문이 지원되는 모든 곳에서 해당 버전을 사용하기를 원합니다.</target>
        </trans-unit>
        <trans-unit id="1653061800bc7124d50604a932bd1ca7ec2660bf" translate="yes" xml:space="preserve">
          <source>The package is potentially usable in other ES module environments such as browsers.</source>
          <target state="translated">이 패키지는 브라우저와 같은 다른 ES 모듈 환경에서 잠재적으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54d3f256e54bf6fe0ab2aa1953baa1017f5e2eb6" translate="yes" xml:space="preserve">
          <source>The package is stateless or its state can be isolated without too much difficulty.</source>
          <target state="translated">패키지가 상태 비 저장이거나 너무 어렵지 않게 상태를 격리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="dfbd06db2467295627871b765dc528c77dec8951" translate="yes" xml:space="preserve">
          <source>The package is unlikely to have other public packages that depend on it, or if it does, the package is stateless or has state that need not be shared between dependencies or with the overall application.</source>
          <target state="translated">패키지에 종속 된 다른 공용 패키지가있을 가능성이 낮습니다. 그렇지 않은 경우 패키지는 상태 비 저장이거나 종속성간에 또는 전체 응용 프로그램과 공유 할 필요가없는 상태를 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="59c8d206740a43c94700e96a8931ad57c9ba90c5" translate="yes" xml:space="preserve">
          <source>The package is usable in both current Node.js and older versions of Node.js that lack support for ES modules.</source>
          <target state="translated">이 패키지는 현재 Node.js와 ES 모듈을 지원하지 않는 이전 버전의 Node.js 모두에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7450ca0d9ad8be5b3a960f82133a52e42f67a0c" translate="yes" xml:space="preserve">
          <source>The package is usable via both &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">패키지는 &lt;code&gt;require&lt;/code&gt; 및 &lt;code&gt;import&lt;/code&gt; 모두를 통해 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e56fadbaf7c7d71c8ec96e1cc5b81e4fbcac2193" translate="yes" xml:space="preserve">
          <source>The package main entry point, e.g. &lt;code&gt;'pkg'&lt;/code&gt; can be used by both &lt;code&gt;require&lt;/code&gt; to resolve to a CommonJS file and by &lt;code&gt;import&lt;/code&gt; to resolve to an ES module file. (And likewise for exported paths, e.g. &lt;code&gt;'pkg/feature'&lt;/code&gt;.)</source>
          <target state="translated">패키지 기본 진입 점, 예를 들어 &lt;code&gt;'pkg'&lt;/code&gt; 는 CommonJS 파일로 해석 &lt;code&gt;require&lt;/code&gt; 와 ES 모듈 파일로 해석하기 위해 &lt;code&gt;import&lt;/code&gt; 를 통해 사용할 수 있습니다 . (내 보낸 경로의 경우도 마찬가지입니다 (예 : &lt;code&gt;'pkg/feature'&lt;/code&gt; ) .)</target>
        </trans-unit>
        <trans-unit id="d03a77440027451b07d4ef43d40339d99f11570a" translate="yes" xml:space="preserve">
          <source>The package provides named exports, e.g. &lt;code&gt;import { name } from 'pkg'&lt;/code&gt; rather than &lt;code&gt;import pkg from 'pkg'; pkg.name&lt;/code&gt;.</source>
          <target state="translated">패키지는 이름이 지정된 내보내기를 제공합니다. 예를 들어 &lt;code&gt;import { name } from 'pkg'&lt;/code&gt; &lt;code&gt;import pkg from 'pkg'; pkg.name&lt;/code&gt; 아닌 'pkg'에서 가져 오기 {이름} ; pkg.name .</target>
        </trans-unit>
        <trans-unit id="705e766de26998db30b9b74945357c8783455fd0" translate="yes" xml:space="preserve">
          <source>The package scope applies not only to initial entry points (&lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt;) but also to files referenced by &lt;code&gt;import&lt;/code&gt; statements and &lt;code&gt;import()&lt;/code&gt; expressions.</source>
          <target state="translated">패키지 범위는 초기 진입 점 ( &lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt; )뿐만 아니라 &lt;code&gt;import&lt;/code&gt; 문 및 &lt;code&gt;import()&lt;/code&gt; 의해 참조되는 파일에도 적용됩니다 표현식에서 .</target>
        </trans-unit>
        <trans-unit id="93032b37cb39b3833c5570355d978a112bc70c06" translate="yes" xml:space="preserve">
          <source>The package stores internal state, and the package author would prefer not to refactor the package to isolate its state management. See the next section.</source>
          <target state="translated">패키지는 내부 상태를 저장하고 패키지 작성자는 상태 관리를 격리하기 위해 패키지를 리팩터링하지 않는 것을 선호합니다. 다음 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f7564c3f9eff583a58e8d21cd99ee8d14688a3bf" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object can be a string now.</source>
          <target state="translated">전달 된 &lt;code&gt;options&lt;/code&gt; 객체는 이제 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b59339c89766317598c7665c33ea20dd610e99de" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object will never be modified.</source>
          <target state="translated">전달 된 &lt;code&gt;options&lt;/code&gt; 개체는 절대 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="939527b58789779d9d34145343a0e6334803be84" translate="yes" xml:space="preserve">
          <source>The password and iv arguments can be an ArrayBuffer and are each limited to a maximum of 2 ** 31 - 1 bytes.</source>
          <target state="translated">암호 및 iv 인수는 ArrayBuffer 일 수 있으며 각각 최대 2 ** 31-1 바이트로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="d534ec7b3822d754232fa5b3593c154f79889a25" translate="yes" xml:space="preserve">
          <source>The password and salt arguments can also be ArrayBuffer instances.</source>
          <target state="translated">암호 및 솔트 인수는 ArrayBuffer 인스턴스 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5e1164fa9f95d40ca3c91b7e6ec1e9743cca5e2" translate="yes" xml:space="preserve">
          <source>The password argument can be an ArrayBuffer and is limited to a maximum of 2 ** 31 - 1 bytes.</source>
          <target state="translated">암호 인수는 ArrayBuffer 일 수 있으며 최대 2 ** 31-1 바이트로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="fb2d39c4340f5b4b6c986cba1d575aa90762c3be" translate="yes" xml:space="preserve">
          <source>The path for the main script of a worker is neither an absolute path nor a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;.</source>
          <target state="translated">작업자의 기본 스크립트 경로는 절대 경로도 아니고 &lt;code&gt;./&lt;/code&gt; 또는 &lt;code&gt;../&lt;/code&gt; 로 시작하는 상대 경로도 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="3a68f2ecb4bd3f38847a7eeccce766303a522feb" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is reading from as specified in the first argument to &lt;code&gt;fs.createReadStream()&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;readStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;readStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">첫 번째 인수에서 &lt;code&gt;fs.createReadStream()&lt;/code&gt; 지정된대로 스트림이 읽고있는 파일의 경로 입니다. &lt;code&gt;path&lt;/code&gt; 가 문자열로 전달 되면 &lt;code&gt;readStream.path&lt;/code&gt; 는 문자열이됩니다. 경우 &lt;code&gt;path&lt;/code&gt; A와 전달 &lt;code&gt;Buffer&lt;/code&gt; , 다음 &lt;code&gt;readStream.path&lt;/code&gt; 는 될 것입니다 &lt;code&gt;Buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3bb0d95641a2afd52bb195881c3abca28b19aa5" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is writing to as specified in the first argument to &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt; 의 첫 번째 인수에 지정된대로 스트림이 쓰고있는 파일의 경로 입니다. &lt;code&gt;path&lt;/code&gt; 가 문자열로 전달 되면 &lt;code&gt;writeStream.path&lt;/code&gt; 는 문자열이됩니다. 경우 &lt;code&gt;path&lt;/code&gt; A와 전달 &lt;code&gt;Buffer&lt;/code&gt; , 다음 &lt;code&gt;writeStream.path&lt;/code&gt; 는 됩니다 &lt;code&gt;Buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5303b9030ddafd814201239d3425172e5de09971" translate="yes" xml:space="preserve">
          <source>The pathname used for the main script of a worker has an unknown file extension.</source>
          <target state="translated">작업자의 기본 스크립트에 사용 된 경로 이름은 알 수없는 파일 확장자입니다.</target>
        </trans-unit>
        <trans-unit id="842995cd8000d0efb4e4627b63f283405c9de9df" translate="yes" xml:space="preserve">
          <source>The policy manifest will be used to enforce constraints on code loaded by Node.js.</source>
          <target state="translated">정책 매니페스트는 Node.js가로드 한 코드에 제약 조건을 적용하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f37ced12d39d64c1acd89371245e9dd2d45e0ac9" translate="yes" xml:space="preserve">
          <source>The port used by Node.js's debugger when enabled.</source>
          <target state="translated">활성화 된 경우 Node.js의 디버거에서 사용하는 포트입니다.</target>
        </trans-unit>
        <trans-unit id="dec6b7a7b66dcadd093ce17f9ff0d5581242e4cb" translate="yes" xml:space="preserve">
          <source>The port used by the Node.js debugger when enabled.</source>
          <target state="translated">활성화 된 경우 Node.js 디버거에서 사용하는 포트입니다.</target>
        </trans-unit>
        <trans-unit id="e95b5aab3ab3fba91f054dea6c27fd9fd3c7181c" translate="yes" xml:space="preserve">
          <source>The port value can be an empty string in which case the port depends on the protocol/scheme:</source>
          <target state="translated">포트 값은 빈 문자열 일 수 있으며이 경우 포트는 프로토콜 / 구성표에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="35240f5bbe9b687669eb3a21a6d605183b197a00" translate="yes" xml:space="preserve">
          <source>The port value may be a number or a string containing a number in the range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt; (inclusive). Setting the value to the default port of the &lt;code&gt;URL&lt;/code&gt; objects given &lt;code&gt;protocol&lt;/code&gt; will result in the &lt;code&gt;port&lt;/code&gt; value becoming the empty string (&lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">포트 값은 숫자 또는 &lt;code&gt;0&lt;/code&gt; 범위의 숫자를 포함하는 문자열 일 수 있습니다. 행 &lt;code&gt;65535&lt;/code&gt; (포함). &lt;code&gt;protocol&lt;/code&gt; 이 지정된 &lt;code&gt;URL&lt;/code&gt; 객체 의 기본 포트로 값을 설정하면 &lt;code&gt;port&lt;/code&gt; 값이 빈 문자열 ( &lt;code&gt;''&lt;/code&gt; )이됩니다.</target>
        </trans-unit>
        <trans-unit id="898d07f22023448193f5c32c21494c7cc90a1be1" translate="yes" xml:space="preserve">
          <source>The possible usages are:</source>
          <target state="translated">가능한 사용법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="495be20fbcb5125b43428178be42b36d58c99204" translate="yes" xml:space="preserve">
          <source>The preceding example uses explicit extensions &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt;. If your files use the &lt;code&gt;.js&lt;/code&gt; extension, &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; will cause such files to be treated as ES modules, just as &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; would cause them to be treated as CommonJS. See &lt;a href=&quot;#esm_enabling&quot;&gt;Enabling&lt;/a&gt;.</source>
          <target state="translated">앞의 예제는 명시 적 확장자 &lt;code&gt;.mjs&lt;/code&gt; 및 &lt;code&gt;.cjs&lt;/code&gt; 를 사용 합니다. 파일이 &lt;code&gt;.js&lt;/code&gt; 확장자를 사용하는 경우 &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; 은 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 인해 CommonJS로 처리되는 것처럼 해당 파일이 ES 모듈 로 처리되도록합니다. &lt;a href=&quot;#esm_enabling&quot;&gt;활성화를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="516b367bb725dc118632a0063079984861a1c67f" translate="yes" xml:space="preserve">
          <source>The preceding module supports named imports in ES modules:</source>
          <target state="translated">이전 모듈은 ES 모듈에서 명명 된 가져 오기를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f5e1752bb85ccb2347cdba3385d98029d5ceffb3" translate="yes" xml:space="preserve">
          <source>The predefined color codes are: &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;yellow&lt;/code&gt;. There are also &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt; and &lt;code&gt;inverse&lt;/code&gt; codes.</source>
          <target state="translated">사전 정의 된 색상 코드는 &lt;code&gt;white&lt;/code&gt; , &lt;code&gt;grey&lt;/code&gt; , &lt;code&gt;black&lt;/code&gt; , &lt;code&gt;blue&lt;/code&gt; , &lt;code&gt;cyan&lt;/code&gt; , &lt;code&gt;green&lt;/code&gt; , &lt;code&gt;magenta&lt;/code&gt; , &lt;code&gt;red&lt;/code&gt; 및 &lt;code&gt;yellow&lt;/code&gt; 입니다. 도 있습니다 &lt;code&gt;bold&lt;/code&gt; , &lt;code&gt;italic&lt;/code&gt; , &lt;code&gt;underline&lt;/code&gt; 및 &lt;code&gt;inverse&lt;/code&gt; 코드.</target>
        </trans-unit>
        <trans-unit id="a8feec306734bdd21e98aea495e525ccece43f81" translate="yes" xml:space="preserve">
          <source>The previously undocumented &lt;code&gt;timers.active()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If re-referencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_ref&quot;&gt;&lt;code&gt;timeout.ref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">이전에 문서화되지 않은 &lt;code&gt;timers.active()&lt;/code&gt; 는 더 이상 사용되지 않습니다. 공개적으로 문서화 된 &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; &lt;/a&gt; 대신 사용하십시오. 시간 초과를 다시 참조 &lt;a href=&quot;timers#timers_timeout_ref&quot;&gt; &lt;code&gt;timeout.ref()&lt;/code&gt; &lt;/a&gt; 경우 timeout.ref () 를 Node.js 10부터 성능에 영향을주지 않고 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fa2c8b129174c0fc077a4918a3e4b0112acc742" translate="yes" xml:space="preserve">
          <source>The previously undocumented and &quot;private&quot; &lt;code&gt;timers._unrefActive()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If unreferencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_unref&quot;&gt;&lt;code&gt;timeout.unref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">이전에 문서화되지 않은 &quot;비공개&quot; &lt;code&gt;timers._unrefActive()&lt;/code&gt; 는 더 이상 사용되지 않습니다. 공개적으로 문서화 된 &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; &lt;/a&gt; 대신 사용하십시오. 시간 초과를 참조 해제 &lt;a href=&quot;timers#timers_timeout_unref&quot;&gt; &lt;code&gt;timeout.unref()&lt;/code&gt; &lt;/a&gt; 경우 timeout.unref () Node.js 10부터 를 성능 영향없이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7e811ac507e899887eadb3b761ab472eb68ab19" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to accommodate a situation in which several small chunks are written to the stream in rapid succession. Instead of immediately forwarding them to the underlying destination, &lt;code&gt;writable.cork()&lt;/code&gt; buffers all the chunks until &lt;code&gt;writable.uncork()&lt;/code&gt; is called, which will pass them all to &lt;code&gt;writable._writev()&lt;/code&gt;, if present. This prevents a head-of-line blocking situation where data is being buffered while waiting for the first small chunk to be processed. However, use of &lt;code&gt;writable.cork()&lt;/code&gt; without implementing &lt;code&gt;writable._writev()&lt;/code&gt; may have an adverse effect on throughput.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; 의 주요 목적은 여러 개의 작은 청크가 연속적으로 스트림에 기록되는 상황을 수용하는 것입니다. 대신에 즉시 기본 목적지로 포워딩, &lt;code&gt;writable.cork()&lt;/code&gt; 까지 모든 청크 버퍼 &lt;code&gt;writable.uncork()&lt;/code&gt; 에 모두 합격이라고, &lt;code&gt;writable._writev()&lt;/code&gt; 이 존재하는 경우를. 이렇게하면 첫 번째 작은 청크가 처리되기를 기다리는 동안 데이터가 버퍼링되는 헤드 오브 라인 차단 상황을 방지 할 수 있습니다. 그러나, 사용 &lt;code&gt;writable.cork()&lt;/code&gt; 구현이없는 &lt;code&gt;writable._writev()&lt;/code&gt; 처리량에 좋지 않은 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="301d6f86720b7caebae0c21957576c82619859d7" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to avoid a situation where writing many small chunks of data to a stream do not cause a backup in the internal buffer that would have an adverse impact on performance. In such situations, implementations that implement the &lt;code&gt;writable._writev()&lt;/code&gt; method can perform buffered writes in a more optimized manner.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; 의 주요 목적은 많은 작은 데이터 청크를 스트림에 쓰더라도 성능에 부정적인 영향을 미치는 내부 버퍼의 백업을 유발하지 않는 상황을 피하는 것입니다. 이러한 상황에서, &lt;code&gt;writable._writev()&lt;/code&gt; 메소드를 구현하는 구현은 보다 최적화 된 방식으로 버퍼 된 쓰기를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63b684f9ac0d7ab67676394b5e6d4348d8377d2f" translate="yes" xml:space="preserve">
          <source>The privateKey can also be an ArrayBuffer and CryptoKey.</source>
          <target state="translated">privateKey는 ArrayBuffer 및 CryptoKey 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="64985acfc6f181ff488fc6817834027a19e84721" translate="yes" xml:space="preserve">
          <source>The process could not be killed, or</source>
          <target state="translated">프로세스를 종료 할 수 없거나</target>
        </trans-unit>
        <trans-unit id="e873e5b18616841f05efdd386c89f6ba201225db" translate="yes" xml:space="preserve">
          <source>The process could not be spawned, or</source>
          <target state="translated">프로세스를 스폰 할 수 없거나</target>
        </trans-unit>
        <trans-unit id="4bfa64f515a1b0181d935c05f6c69ffff6fbfd05" translate="yes" xml:space="preserve">
          <source>The process object. See the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt; section.</source>
          <target state="translated">프로세스 객체. 참조&lt;a href=&quot;process#process_process&quot;&gt; &lt;code&gt;process&lt;/code&gt; 객체&lt;/a&gt; 섹션을 .</target>
        </trans-unit>
        <trans-unit id="19a87c186d9fc90f05f38ed4cba9e32faeadbae9" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt;. This corresponds to &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-14&lt;/code&gt; on all other platforms.</source>
          <target state="translated">&lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; 초과 및 &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; 미만 의 프로세스 스케줄링 우선 순위 입니다. 이것은 &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; Windows의 HIGH_PRIORITY_CLASS 에 다른 모든 플랫폼 에서는 &lt;code&gt;-14&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a8b5e718648dcd24e1f04e65ec6ef9126189b362" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_LOW&lt;/code&gt; and below &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt;. This corresponds to &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;10&lt;/code&gt; on all other platforms.</source>
          <target state="translated">&lt;code&gt;PRIORITY_LOW&lt;/code&gt; 초과 및 &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 미만 의 프로세스 스케줄링 우선 순위 입니다. 이것은 &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; Windows의 BELOW_NORMAL_PRIORITY_CLASS 에 다른 모든 플랫폼 에서는 &lt;code&gt;10&lt;/code&gt; 의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="07f606e78cf90aabba4bf4bb1ef36128cea4c14f" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;. This corresponds to &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-7&lt;/code&gt; on all other platforms.</source>
          <target state="translated">&lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 초과 및 &lt;code&gt;PRIORITY_HIGH&lt;/code&gt; 미만 의 프로세스 스케줄링 우선 순위 입니다. 이것은 Windows의 &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; 에 해당 하며 좋은 값은 &lt;code&gt;-7&lt;/code&gt; 입니다. 다른 모든 플랫폼 입니다.</target>
        </trans-unit>
        <trans-unit id="681821ab96576ebe60cbcdd765ffba967ab60b31" translate="yes" xml:space="preserve">
          <source>The properties available on the assigned network address object include:</source>
          <target state="translated">할당 된 네트워크 주소 개체에서 사용할 수있는 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="15089f6598bc6c72817c26575069415cd75bbb85" translate="yes" xml:space="preserve">
          <source>The properties included on each object include:</source>
          <target state="translated">각 객체에 포함 된 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="819ed450a8f3e467ad95194cc6e4b3855ad9ff3c" translate="yes" xml:space="preserve">
          <source>The property of exports being statically enumerable is maintained with exports patterns since the individual exports for a package can be determined by treating the right hand side target pattern as a &lt;code&gt;**&lt;/code&gt; glob against the list of files within the package. Because &lt;code&gt;node_modules&lt;/code&gt; paths are forbidden in exports targets, this expansion is dependent on only the files of the package itself.</source>
          <target state="translated">패키지에 대한 개별 내보내기는 오른쪽 대상 패턴을 패키지 내의 파일 목록에 대해 &lt;code&gt;**&lt;/code&gt; glob 으로 처리하여 결정할 수 있으므로 정적으로 열거 가능한 내보내기 속성은 내보내기 패턴으로 유지 됩니다. 때문에 &lt;code&gt;node_modules&lt;/code&gt; 의 경로가 수출 목표에 금지되어,이 확장은 패키지 자체의 파일에 따라 달라집니다.</target>
        </trans-unit>
        <trans-unit id="32cbb03653d9c062d765fd9dedb500b4ce391d11" translate="yes" xml:space="preserve">
          <source>The protocol identifier (&lt;code&gt;'h2'&lt;/code&gt; in the examples) may be any valid &lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN Protocol ID&lt;/a&gt;.</source>
          <target state="translated">프로토콜 식별자 ( 예에서 &lt;code&gt;'h2'&lt;/code&gt; )는 유효한 &lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN 프로토콜 ID&lt;/a&gt; 일 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="682dd72da7ec2fc2dd775aaa85fc979fb00717b6" translate="yes" xml:space="preserve">
          <source>The provided &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt; of the context are made visible through the Inspector API.</source>
          <target state="translated">제공된 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;origin&lt;/code&gt; 컨텍스트 는 Inspector API를 통해 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0c874b3f599c2f388ee9adaf7c51cc16c6ca9ab2" translate="yes" xml:space="preserve">
          <source>The provided address family is not understood by the Node.js API.</source>
          <target state="translated">제공된 주소 계열은 Node.js API에 의해 이해되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0d5a7141a0afa24f729a66e2573aa9e735d8af9e" translate="yes" xml:space="preserve">
          <source>The range (&lt;code&gt;max - min&lt;/code&gt;) must be less than 2&lt;sup&gt;48&lt;/sup&gt;. &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; must be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;safe integers&lt;/a&gt;.</source>
          <target state="translated">범위 ( &lt;code&gt;max - min&lt;/code&gt; )는 2 &lt;sup&gt;48&lt;/sup&gt; 미만이어야합니다 . &lt;code&gt;min&lt;/code&gt; 및 &lt;code&gt;max&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;안전한 정수&lt;/a&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="a6ce53307f0479c8ec03dffd96128613abfed0ef" translate="yes" xml:space="preserve">
          <source>The raw headers as they were received are retained in the &lt;code&gt;rawHeaders&lt;/code&gt; property, which is an array of &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt;. For example, the previous message header object might have a &lt;code&gt;rawHeaders&lt;/code&gt; list like the following:</source>
          <target state="translated">수신 된 원시 헤더는 &lt;code&gt;rawHeaders&lt;/code&gt; 속성에 유지되며 이는 &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt; 의 배열입니다 . 예를 들어, 이전 메시지 헤더 객체에는 &lt;code&gt;rawHeaders&lt;/code&gt; 가있을 수 있습니다. 에는 다음과 같은 목록 .</target>
        </trans-unit>
        <trans-unit id="83f581d673868d237fedae3567c8e5ca1905d79d" translate="yes" xml:space="preserve">
          <source>The raw request/response headers list exactly as they were received.</source>
          <target state="translated">원시 요청 / 응답 헤더는 수신 한 그대로 나열합니다.</target>
        </trans-unit>
        <trans-unit id="b985d4474679d7d8436722ff0ebeff67e3eb82aa" translate="yes" xml:space="preserve">
          <source>The raw request/response trailer keys and values exactly as they were received. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">원시 요청 / 응답 예고편 키 및 값은 정확히 그대로 받았습니다. &lt;code&gt;'end'&lt;/code&gt; 에서만 채워짐 이벤트 .</target>
        </trans-unit>
        <trans-unit id="5d9dff5cd0c71c07633537409b66578e6b80505c" translate="yes" xml:space="preserve">
          <source>The read-only path of this directory as was provided to &lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt;&lt;code&gt;fs.opendir()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt;&lt;code&gt;fs.opendirSync()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt;&lt;code&gt;fsPromises.opendir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt; &lt;code&gt;fs.opendir()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt; &lt;code&gt;fs.opendirSync()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt; &lt;code&gt;fsPromises.opendir()&lt;/code&gt; &lt;/a&gt; 에 제공된이 디렉토리의 읽기 전용 경로입니다 .</target>
        </trans-unit>
        <trans-unit id="34df59cd5882c36bd6c67c750c332e85dde52821" translate="yes" xml:space="preserve">
          <source>The reading will begin at the current position. For example, if the file already had &lt;code&gt;'Hello World&lt;/code&gt;' and six bytes are read with the file descriptor, the call to &lt;code&gt;fs.readFile()&lt;/code&gt; with the same file descriptor, would give &lt;code&gt;'World'&lt;/code&gt;, rather than &lt;code&gt;'Hello World'&lt;/code&gt;.</source>
          <target state="translated">판독은 현재 위치에서 시작됩니다. 예를 들어, 파일에 이미 &lt;code&gt;'Hello World&lt;/code&gt; '가 있고 파일 디스크립터를 사용하여 6 바이트를 읽는 경우 동일한 파일 디스크립터를 사용하여 &lt;code&gt;fs.readFile()&lt;/code&gt; 을 호출하면 &lt;code&gt;'Hello World'&lt;/code&gt; 대신 &lt;code&gt;'World'&lt;/code&gt; 가 제공 됩니다.</target>
        </trans-unit>
        <trans-unit id="4a5389685a663870c4323e668ef2d2e417308f1a" translate="yes" xml:space="preserve">
          <source>The reason for this error handling behavior is that these callbacks are running at potentially volatile points in an object's lifetime, for example during class construction and destruction. Because of this, it is deemed necessary to bring down the process quickly in order to prevent an unintentional abort in the future. This is subject to change in the future if a comprehensive analysis is performed to ensure an exception can follow the normal control flow without unintentional side effects.</source>
          <target state="translated">이 오류 처리 동작의 이유는 이러한 콜백이 개체 수명의 잠재적 변동성 지점 (예 : 클래스 구성 및 소멸 중)에서 실행되기 때문입니다. 이로 인해 미래에 의도하지 않은 중단을 방지하기 위해 프로세스를 신속하게 중단해야합니다. 예외가 의도하지 않은 부작용없이 정상적인 제어 흐름을 따를 수 있도록 포괄적 인 분석을 수행하는 경우 향후 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fee581e1391dedfda9cb1c8042e894cd3728419" translate="yes" xml:space="preserve">
          <source>The reason that state is an issue is because both the CommonJS and ES module versions of the package might get used within an application; for example, the user&amp;rsquo;s application code could &lt;code&gt;import&lt;/code&gt; the ES module version while a dependency &lt;code&gt;require&lt;/code&gt;s the CommonJS version. If that were to occur, two copies of the package would be loaded in memory and therefore two separate states would be present. This would likely cause hard-to-troubleshoot bugs.</source>
          <target state="translated">상태가 문제인 이유는 패키지의 CommonJS 및 ES 모듈 버전이 모두 애플리케이션 내에서 사용될 수 있기 때문입니다. 예를 들어 사용자의 응용 프로그램 코드 는 ES 모듈 버전을 &lt;code&gt;import&lt;/code&gt; 수 있지만 종속성 &lt;code&gt;require&lt;/code&gt; CommonJS 버전이 필요합니다 . 이 경우 패키지의 두 복사본이 메모리에로드되므로 두 개의 개별 상태가 나타납니다. 이로 인해 문제를 해결하기 어려운 버그가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e95038a9c64315188042fc9eab57e4956f07d72" translate="yes" xml:space="preserve">
          <source>The reason this is problematic is because writes to &lt;code&gt;process.stdout&lt;/code&gt; in Node.js are sometimes &lt;em&gt;asynchronous&lt;/em&gt; and may occur over multiple ticks of the Node.js event loop. Calling &lt;code&gt;process.exit()&lt;/code&gt;, however, forces the process to exit &lt;em&gt;before&lt;/em&gt; those additional writes to &lt;code&gt;stdout&lt;/code&gt; can be performed.</source>
          <target state="translated">이것이 문제가되는 이유는 Node.js의 &lt;code&gt;process.stdout&lt;/code&gt; 에 대한 쓰기가 &lt;em&gt;비동기 적&lt;/em&gt; 이며 Node.js 이벤트 루프의 여러 틱에서 발생할 수 있기 때문 입니다. 그러나 &lt;code&gt;process.exit()&lt;/code&gt; 호출 하면 &lt;code&gt;stdout&lt;/code&gt; 에 대한 추가 쓰기를 수행 &lt;em&gt;하기 전에&lt;/em&gt; 프로세스가 강제 종료 됩니다.</target>
        </trans-unit>
        <trans-unit id="882e863942bbfdb2c275d570776a56f3cb7eed13" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows.</source>
          <target state="translated">재귀 옵션은 macOS 및 Windows에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="0d5da93cf7c47ffd68713f07c2a2d70da3b7c85f" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows. An &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; exception will be thrown when the option is used on a platform that does not support it.</source>
          <target state="translated">재귀 옵션은 macOS 및 Windows에서만 지원됩니다. &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; 의 옵션을 지원하지 않는 플랫폼에서 사용하는 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="96411a8d35be2600a6fa3cb907c90d1ed0ea5379" translate="yes" xml:space="preserve">
          <source>The reference must be freed once it is no longer needed.</source>
          <target state="translated">더 이상 필요하지 않은 참조는 해제해야합니다.</target>
        </trans-unit>
        <trans-unit id="6cc848b653807d38e0a4cbaec6143db941486dc6" translate="yes" xml:space="preserve">
          <source>The registered event listeners is synchronously invoked in the order they were registered.</source>
          <target state="translated">등록 된 이벤트 리스너는 등록 된 순서대로 동 기적으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="6da8026af719b1ab6b55c12dbb1cb53a3be6fd63" translate="yes" xml:space="preserve">
          <source>The report is intended for development, test and production use, to capture and preserve information for problem determination. It includes JavaScript and native stack traces, heap statistics, platform information, resource usage etc. With the report option enabled, diagnostic reports can be triggered on unhandled exceptions, fatal errors and user signals, in addition to triggering programmatically through API calls.</source>
          <target state="translated">이 보고서는 개발, 테스트 및 프로덕션 용도로 사용되어 문제를 파악하기위한 정보를 수집하고 보존합니다. 여기에는 JavaScript 및 기본 스택 추적, 힙 통계, 플랫폼 정보, 리소스 사용량 등이 포함됩니다. 보고서 옵션을 사용하면 API 호출을 통해 프로그래밍 방식으로 트리거 할뿐만 아니라 처리되지 않은 예외, 치명적 오류 및 사용자 신호에 대해 진단 보고서를 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf4ab5f8ad9a5033c480cb18cedbac706e596643" translate="yes" xml:space="preserve">
          <source>The request authority pseudo header field. Because HTTP/2 allows requests to set either &lt;code&gt;:authority&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt;, this value is derived from &lt;code&gt;req.headers[':authority']&lt;/code&gt; if present. Otherwise, it is derived from &lt;code&gt;req.headers['host']&lt;/code&gt;.</source>
          <target state="translated">요청 권한 의사 헤더 필드입니다. HTTP / 2는 요청이 &lt;code&gt;:authority&lt;/code&gt; 또는 &lt;code&gt;host&lt;/code&gt; 를 설정할 수 있도록 허용 &lt;code&gt;req.headers[':authority']&lt;/code&gt; 값은 req.headers [ ': authority'] (있는 경우) 에서 파생됩니다 . 그렇지 않으면 &lt;code&gt;req.headers['host']&lt;/code&gt; 에서 파생됩니다 .</target>
        </trans-unit>
        <trans-unit id="02f104dfa09be26fcee1ec1287c9793da8d202a7" translate="yes" xml:space="preserve">
          <source>The request authority pseudo header field. It can also be accessed via &lt;code&gt;req.headers[':authority']&lt;/code&gt;.</source>
          <target state="translated">요청 권한 의사 헤더 필드 &lt;code&gt;req.headers[':authority']&lt;/code&gt; 를 통해 액세스 할 수도 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="f8cc8ec77eab284c5b1d9a9e8bee79b0a4e96211" translate="yes" xml:space="preserve">
          <source>The request inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">요청은 &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt; 에서 상속 에서 다음을 추가로 구현합니다.</target>
        </trans-unit>
        <trans-unit id="d2f1ed5fc05d92917b60ebf9072ab11385b53fc9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">문자열로 요청 메소드. 읽기 전용. 예 : &lt;code&gt;'GET'&lt;/code&gt; , &lt;code&gt;'DELETE'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0b820a151f8af96f9a8410852cebe4b9fce928d9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read-only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">문자열로 요청 메소드. 읽기 전용 예 : &lt;code&gt;'GET'&lt;/code&gt; , &lt;code&gt;'DELETE'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf2b93920ae2dda23261c83e7efa9025f30a8059" translate="yes" xml:space="preserve">
          <source>The request scheme pseudo header field indicating the scheme portion of the target URL.</source>
          <target state="translated">대상 URL의 체계 부분을 나타내는 요청 체계 의사 헤더 필드입니다.</target>
        </trans-unit>
        <trans-unit id="d62ea70efeb08e31455b4542aaf477b0d2b0fbb4" translate="yes" xml:space="preserve">
          <source>The request to promote a handle is made through &lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt;&lt;code&gt;napi_escape_handle&lt;/code&gt;&lt;/a&gt; which can only be called once.</source>
          <target state="translated">핸들 승격 요청 은 한 번만 호출 할 수있는 &lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt; &lt;code&gt;napi_escape_handle&lt;/code&gt; &lt;/a&gt; 을 통해 이루어집니다 .</target>
        </trans-unit>
        <trans-unit id="c35bb861539c1d20772a3a4da4e40cab1b2864ac" translate="yes" xml:space="preserve">
          <source>The request/response headers object.</source>
          <target state="translated">요청 / 응답 헤더 개체</target>
        </trans-unit>
        <trans-unit id="efa13e0d6f5d17d44de1820e6c6f833cd6533735" translate="yes" xml:space="preserve">
          <source>The request/response trailers object. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">요청 / 응답 트레일러 개체입니다. &lt;code&gt;'end'&lt;/code&gt; 이벤트 에서만 채워집니다 .</target>
        </trans-unit>
        <trans-unit id="76afa09b3c9e4455c22d150e86e0a878c83b5f18" translate="yes" xml:space="preserve">
          <source>The requested functionality is not supported in worker threads.</source>
          <target state="translated">요청 된 기능은 작업자 스레드에서 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="023f045e1ba7c064b230a5815cf96e2c57cfb567" translate="yes" xml:space="preserve">
          <source>The resolution rules for the imports field are otherwise analogous to the exports field.</source>
          <target state="translated">가져 오기 필드에 대한 해결 규칙은 그렇지 않으면 내보내기 필드와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="130c49b75db4d5f28d69526125533d14026a98f8" translate="yes" xml:space="preserve">
          <source>The resolve hook returns the resolved file URL and module format for a given module specifier and parent file URL:</source>
          <target state="translated">resolve 훅은 주어진 모듈 지정자와 부모 파일 URL에 대한 해결 된 파일 URL과 모듈 형식을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="01c7f5cd9e64e948205f4e8da34e92946ac36c24" translate="yes" xml:space="preserve">
          <source>The resolver can throw the following errors:</source>
          <target state="translated">리졸버는 다음 오류를 발생시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ad6fadfeabaeb9c9c66df7b9fd54f216fa3d3aa" translate="yes" xml:space="preserve">
          <source>The resolver has the following properties:</source>
          <target state="translated">리졸버에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0438675d90a63b76080df556206479f1a06b4dbd" translate="yes" xml:space="preserve">
          <source>The resolver instance will send its requests from the specified IP address. This allows programs to specify outbound interfaces when used on multi-homed systems.</source>
          <target state="translated">해석기 인스턴스는 지정된 IP 주소에서 요청을 보냅니다. 이를 통해 프로그램은 멀티 홈 시스템에서 사용될 때 아웃 바운드 인터페이스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d33ef3bb76a3d98e8f08717970d86722bbc1a3ef" translate="yes" xml:space="preserve">
          <source>The resolver will use the v4 local address when making requests to IPv4 DNS servers, and the v6 local address when making requests to IPv6 DNS servers. The &lt;code&gt;rrtype&lt;/code&gt; of resolution requests has no impact on the local address used.</source>
          <target state="translated">해석기는 IPv4 DNS 서버에 요청할 때 v4 로컬 주소를 사용하고 IPv6 DNS 서버에 요청할 때 v6 로컬 주소를 사용합니다. 해결 요청 의 &lt;code&gt;rrtype&lt;/code&gt; 은 사용 된 로컬 주소에 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="965055eab4b20e712cee07e74d7e15f1dc310a7e" translate="yes" xml:space="preserve">
          <source>The response inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">응답은 &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt; 에서 상속되며 다음을 추가로 구현합니다.</target>
        </trans-unit>
        <trans-unit id="b18e030ec3ca1714e02a7b098543adb935c78705" translate="yes" xml:space="preserve">
          <source>The result generally does not make any guarantees about what kinds of properties or behavior a value exposes in JavaScript. They are primarily useful for addon developers who prefer to do type checking in JavaScript.</source>
          <target state="translated">결과는 일반적으로 JavaScript에서 값이 어떤 종류의 속성이나 노출을 나타내는 지 보증하지 않습니다. JavaScript에서 형식 검사를 선호하는 애드온 개발자에게 주로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b8b8022504a26ffb5513f898bea8594dd091a830" translate="yes" xml:space="preserve">
          <source>The result of a previous call to &lt;code&gt;process.cpuUsage()&lt;/code&gt; can be passed as the argument to the function, to get a diff reading.</source>
          <target state="translated">&lt;code&gt;process.cpuUsage()&lt;/code&gt; 에 대한 이전 호출의 결과 는 diff 판독 값을 얻기 위해 함수에 인수로 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c970c11e0a87e0dc98113377ad10bd2ef4c395a" translate="yes" xml:space="preserve">
          <source>The result of this function no longer contains a fraction component on Windows.</source>
          <target state="translated">이 함수의 결과는 더 이상 Windows에서 분수 구성 요소를 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="350b994c82684bd0c40d5f8bba62015f9d892265" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;BigInt&lt;/code&gt; is calculated as: (&amp;ndash;1)&lt;sup&gt;&lt;code&gt;sign_bit&lt;/code&gt;&lt;/sup&gt; (&lt;code&gt;words[0]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;1&lt;/sup&gt; + &amp;hellip;)</source>
          <target state="translated">결과 &lt;code&gt;BigInt&lt;/code&gt; 는 다음과 같이 계산됩니다. (&amp;ndash;1) &lt;sup&gt; &lt;code&gt;sign_bit&lt;/code&gt; &lt;/sup&gt; ( &lt;code&gt;words[0]&lt;/code&gt; &amp;times; (2 &lt;sup&gt;64&lt;/sup&gt; ) &lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times; (2 &lt;sup&gt;64&lt;/sup&gt; ) &lt;sup&gt;1&lt;/sup&gt; +&amp;hellip;)</target>
        </trans-unit>
        <trans-unit id="090264918bf0db3d97f15783938c5710acd286f9" translate="yes" xml:space="preserve">
          <source>The resulting output will resemble:</source>
          <target state="translated">결과 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6592f1ecacf5d99cad7d854240afeddc010dff43" translate="yes" xml:space="preserve">
          <source>The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.</source>
          <target state="translated">경로가 루트 디렉토리로 해석되지 않으면 결과 경로가 정규화되고 후행 슬래시가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="6755c8e673605ed2b394bffd53b16e00aa04ed50" translate="yes" xml:space="preserve">
          <source>The return value &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; represents the generated key pair. When PEM encoding was selected, the respective key will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="translated">리턴 값 &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; 는 생성 된 키 쌍을 나타냅니다. PEM 인코딩을 선택하면 해당 키가 문자열이되고, 그렇지 않으면 DER로 인코딩 된 데이터가 포함 된 버퍼가됩니다.</target>
        </trans-unit>
        <trans-unit id="8540d6f242c1449e741beb63b74e073fc037812e" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns &lt;code&gt;NULL&lt;/code&gt;, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; 의 반환 값 은 모듈 의 &lt;code&gt;exports&lt;/code&gt; 개체 로 처리됩니다 . &lt;code&gt;Init&lt;/code&gt; 방법은 통해 빈 객체를 전달 &lt;code&gt;exports&lt;/code&gt; 편의를 매개 변수입니다. 경우 &lt;code&gt;Init&lt;/code&gt; 반환 &lt;code&gt;NULL&lt;/code&gt; 을 ,로 전달 된 매개 변수를 &lt;code&gt;exports&lt;/code&gt; 모듈로 내 보냅니다. N-API 모듈은 &lt;code&gt;module&lt;/code&gt; 개체를 수정할 수 없지만 모듈 의 &lt;code&gt;exports&lt;/code&gt; 속성으로 무엇이든 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74d46df7105ceb22c98097c79674b8da75df0880" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns NULL, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; 의 반환 값 은 모듈 의 &lt;code&gt;exports&lt;/code&gt; 개체 로 처리됩니다 . &lt;code&gt;Init&lt;/code&gt; 방법은 통해 빈 객체를 전달 &lt;code&gt;exports&lt;/code&gt; 편의를 매개 변수입니다. 경우 &lt;code&gt;Init&lt;/code&gt; NULL을 반환로 전달 된 매개 변수를 &lt;code&gt;exports&lt;/code&gt; 모듈로 내 보냅니다. N-API 모듈은 &lt;code&gt;module&lt;/code&gt; 객체를 수정할 수 없지만 &lt;code&gt;exports&lt;/code&gt; 로 아무것도 지정할 수 있습니다 속성으로 .</target>
        </trans-unit>
        <trans-unit id="b7768bae4378835321f00405e40f7b2cd7232e22" translate="yes" xml:space="preserve">
          <source>The return value includes fractions of a second. Use &lt;code&gt;Math.floor()&lt;/code&gt; to get whole seconds.</source>
          <target state="translated">반환 값은 1 분의 1 초를 포함합니다. 전체 초를 얻으려면 &lt;code&gt;Math.floor()&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="97d244151a2074f335e80ec7c64b042a2a7bf155" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;true&lt;/code&gt; if the internal buffer is less than the &lt;code&gt;highWaterMark&lt;/code&gt; configured when the stream was created after admitting &lt;code&gt;chunk&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; is returned, further attempts to write data to the stream should stop until the &lt;a href=&quot;#stream_event_drain&quot;&gt;&lt;code&gt;'drain'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">내부 버퍼가 &lt;code&gt;chunk&lt;/code&gt; 를 승인 한 후 스트림을 작성할 때 구성된 &lt;code&gt;highWaterMark&lt;/code&gt; 보다 작 으면 리턴 값이 &lt;code&gt;true&lt;/code&gt; 입니다. 경우 &lt;code&gt;false&lt;/code&gt; 때까지 중지해야 스트림에 데이터를 기록하기 위해, 더 시도 반환 &lt;a href=&quot;#stream_event_drain&quot;&gt; &lt;code&gt;'drain'&lt;/code&gt; &lt;/a&gt; 이벤트가 방출됩니다.</target>
        </trans-unit>
        <trans-unit id="26d76acade904502d2ab1c10b9e6ee013a9e7a40" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_arch&quot;&gt;&lt;code&gt;process.arch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 값은 &lt;a href=&quot;process#process_process_arch&quot;&gt; &lt;code&gt;process.arch&lt;/code&gt; &lt;/a&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="d2cc4b1ac76c7772ee2e1e982aae790cb286904e" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_platform&quot;&gt;&lt;code&gt;process.platform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 값은 &lt;a href=&quot;process#process_process_platform&quot;&gt; &lt;code&gt;process.platform&lt;/code&gt; &lt;/a&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="3e1ee035941771511703ba74230eaf82a6d8a77f" translate="yes" xml:space="preserve">
          <source>The return value of a handler function is ignored.</source>
          <target state="translated">핸들러 함수의 반환 값은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="5a297e4c1534ad58591aefd1896f05fb34a3b663" translate="yes" xml:space="preserve">
          <source>The return value will be &lt;code&gt;napi_ok&lt;/code&gt; if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the &lt;code&gt;napi_status&lt;/code&gt; value for the error will be returned. If an exception was thrown, and no error occurred, &lt;code&gt;napi_pending_exception&lt;/code&gt; will be returned.</source>
          <target state="translated">요청이 성공하고 catch되지 않은 JavaScript 예외가 발생하지 않으면 반환 값은 &lt;code&gt;napi_ok&lt;/code&gt; 입니다. 오류가 발생하고 예외가 발생 하면 오류에 대한 &lt;code&gt;napi_status&lt;/code&gt; 값이 리턴됩니다. 예외가 발생하고 오류가 발생하지 않으면 &lt;code&gt;napi_pending_exception&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="2bed1a6886c03f40d8370bf7edbf2cdfc154c254" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;MessagePort&lt;/code&gt; is an object in the target context and inherits from its global &lt;code&gt;Object&lt;/code&gt; class. Objects passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt;&lt;code&gt;port.onmessage()&lt;/code&gt;&lt;/a&gt; listener are also created in the target context and inherit from its global &lt;code&gt;Object&lt;/code&gt; class.</source>
          <target state="translated">반환 된 &lt;code&gt;MessagePort&lt;/code&gt; 는 대상 컨텍스트의 개체이며 전역 &lt;code&gt;Object&lt;/code&gt; 클래스 에서 상속됩니다 . &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt; &lt;code&gt;port.onmessage()&lt;/code&gt; &lt;/a&gt; 리스너에 전달 된 객체 도 대상 컨텍스트에서 생성되고 전역 &lt;code&gt;Object&lt;/code&gt; 클래스 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="a30bf17d9b1e59d4e5f5069fa0021e31e3506815" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;MessagePort&lt;/code&gt; will be an object in the target context, and will inherit from its global &lt;code&gt;Object&lt;/code&gt; class. Objects passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt;&lt;code&gt;port.onmessage()&lt;/code&gt;&lt;/a&gt; listener will also be created in the target context and inherit from its global &lt;code&gt;Object&lt;/code&gt; class.</source>
          <target state="translated">반환 된 &lt;code&gt;MessagePort&lt;/code&gt; 는 대상 컨텍스트의 객체이며 전역 &lt;code&gt;Object&lt;/code&gt; 클래스 에서 상속됩니다 . &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt; &lt;code&gt;port.onmessage()&lt;/code&gt; &lt;/a&gt; 리스너에 전달 된 객체 는 대상 컨텍스트에서 생성되며 전역 &lt;code&gt;Object&lt;/code&gt; 클래스 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="dfc70b1227f01401a4b050e13257206410687bd0" translate="yes" xml:space="preserve">
          <source>The returned buffer is statically allocated and does not need to be freed.</source>
          <target state="translated">리턴 된 버퍼는 정적으로 할당되며 해제 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="38fcc6c2ece2cf3c7e594688e04adf2e09823305" translate="yes" xml:space="preserve">
          <source>The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">반환 된 함수는 제공된 콜백 함수 주위의 래퍼입니다. 반환 된 함수가 호출되면 발생하는 모든 오류가 도메인의 &lt;code&gt;'error'&lt;/code&gt; 이벤트 로 라우팅됩니다 .</target>
        </trans-unit>
        <trans-unit id="2d318eb946457587672c9d9705f3cc85af1dd775" translate="yes" xml:space="preserve">
          <source>The returned function will have an &lt;code&gt;asyncResource&lt;/code&gt; property referencing the &lt;code&gt;AsyncResource&lt;/code&gt; to which the function is bound.</source>
          <target state="translated">반환 된 함수 에는 함수가 바인딩 된 &lt;code&gt;AsyncResource&lt;/code&gt; 를 참조 하는 &lt;code&gt;asyncResource&lt;/code&gt; 속성 이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a03e4b5f6edfce2e491d26c75c656ecf3f9be2a9" translate="yes" xml:space="preserve">
          <source>The returned object no longer inherits from &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">반환 된 객체는 더 이상 &lt;code&gt;Object.prototype&lt;/code&gt; 을 상속받지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="efca954612151fbe49aeec68bf42cb1165e6aba5" translate="yes" xml:space="preserve">
          <source>The returned object will have the following properties:</source>
          <target state="translated">반환 된 객체는 다음과 같은 속성을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="44bb5d6c3855220369956ba8708ec28034c18d86" translate="yes" xml:space="preserve">
          <source>The returned result is different from the statistics returned by &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; in that &lt;code&gt;vm.measureMemory()&lt;/code&gt; measure the memory reachable by each V8 specific contexts in the current instance of the V8 engine, while the result of &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; measure the memory occupied by each heap space in the current V8 instance.</source>
          <target state="translated">리턴 된 결과에 의해 반환 된 통계 상이한 &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; 는 점에서 &lt;code&gt;vm.measureMemory()&lt;/code&gt; 상기 V8 엔진의 현재 인스턴스의 각 V8의 특정 컨텍스트에 의해 상기 메모리 도달 측정 결과 동안 &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; 계수 현재 V8 인스턴스의 각 힙 공간이 차지하는 메모리입니다.</target>
        </trans-unit>
        <trans-unit id="2663bc23f657359a1e5a0d9802b2b8ab09e2c133" translate="yes" xml:space="preserve">
          <source>The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.</source>
          <target state="translated">발생 된 오류에 응답하는 가장 안전한 방법은 프로세스를 종료하는 것입니다. 물론 일반 웹 서버에는 열려있는 연결이 많을 수 있으며 다른 사람이 오류를 일으켜 갑자기 연결을 종료하는 것은 합리적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b7ee599fb3ddb2bcc3b0c4f04382a22f7cf99d6b" translate="yes" xml:space="preserve">
          <source>The salt value significantly improves the strength of the HKDF algorithm. It should be random or pseudo-random and should be the same length as the output of the digest function (for instance, if using &lt;code&gt;'SHA-256'&lt;/code&gt; as the digest, the salt should be 256-bits of random data).</source>
          <target state="translated">소금 값은 HKDF 알고리즘의 강도를 크게 향상시킵니다. 랜덤 또는 의사 랜덤이어야하며 다이제스트 함수의 출력과 길이가 같아야합니다 (예 : 다이제스트로 &lt;code&gt;'SHA-256'&lt;/code&gt; 을 사용하는 경우 솔트는 256 비트의 랜덤 데이터 여야 함).</target>
        </trans-unit>
        <trans-unit id="2e3944f7c88aadcaffed0ee6e91d5164e0bc64f0" translate="yes" xml:space="preserve">
          <source>The same call as &lt;a href=&quot;perf_hooks#perf_hooks_performance_eventlooputilization_utilization1_utilization2&quot;&gt;&lt;code&gt;perf_hooks&lt;/code&gt; &lt;code&gt;eventLoopUtilization()&lt;/code&gt;&lt;/a&gt;, except the values of the worker instance are returned.</source>
          <target state="translated">작업자 인스턴스의 값이 반환된다는 점을 제외하고는 &lt;a href=&quot;perf_hooks#perf_hooks_performance_eventlooputilization_utilization1_utilization2&quot;&gt; &lt;code&gt;perf_hooks&lt;/code&gt; &lt;code&gt;eventLoopUtilization()&lt;/code&gt; &lt;/a&gt; 과 동일한 호출 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="17642e3dfd2688c6cd67e72a34c50952e74d46ec" translate="yes" xml:space="preserve">
          <source>The same options as &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; are supported. Since a shell is not spawned, behaviors such as I/O redirection and file globbing are not supported.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt; 와 동일한 옵션 이 지원됩니다. 쉘이 생성되지 않기 때문에 I / O 리디렉션 및 파일 글 로빙과 같은 동작은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b5c131d6859b462a4ccc2f3ff1ca448377cb2782" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt;&lt;code&gt;.setupMaster()&lt;/code&gt;&lt;/a&gt; is called, whichever comes first.</source>
          <target state="translated">스케줄링 정책 중 하나 &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; 라운드 로빈 또는에 대한 &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; 는 운영 체제에두고있다. 이것은 전역 설정이며 첫 번째 워커가 생성되거나 &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt; &lt;code&gt;.setupMaster()&lt;/code&gt; &lt;/a&gt; 가 호출되면 둘 중 먼저 발생하는 시점에 효과적으로 고정 됩니다.</target>
        </trans-unit>
        <trans-unit id="61aae47bb566b3e756d07254aa9ebf2e27b0d263" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;code&gt;cluster.setupMaster()&lt;/code&gt; is called, whichever comes first.</source>
          <target state="translated">라운드 로빈에 대한 &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; 또는 운영 체제에 남겨 두는 &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; 스케줄링 정책 . 이것은 전역 설정이며, 첫 번째 작업자가 생성되거나 &lt;code&gt;cluster.setupMaster()&lt;/code&gt; 가 호출 될 때 효과적으로 고정 됩니다.</target>
        </trans-unit>
        <trans-unit id="63a1fd5ff7e904920063e0290d10c7a247d4d75f" translate="yes" xml:space="preserve">
          <source>The scheme &quot;gopher&quot; is no longer special and &lt;code&gt;url.origin&lt;/code&gt; now returns &lt;code&gt;'null'&lt;/code&gt; for it.</source>
          <target state="translated">&quot;gopher&quot;체계는 더 이상 특별하지 않으며 &lt;code&gt;url.origin&lt;/code&gt; 은 이제 &lt;code&gt;'null'&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="72999a4403b7836c32c156209372d0352bc0043c" translate="yes" xml:space="preserve">
          <source>The scheme &quot;gopher&quot; is no longer special.</source>
          <target state="translated">계획 &quot;gopher&quot;는 더 이상 특별하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a1108ba05be7f85b2c2a446fb6ad5e88bb3a3f9d" translate="yes" xml:space="preserve">
          <source>The script can access the &lt;a href=&quot;globals&quot;&gt;global scope&lt;/a&gt;. Function and &lt;code&gt;var&lt;/code&gt; declarations in the script will be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object. Variable declarations made using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; will be visible globally, but will not be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">스크립트는 &lt;a href=&quot;globals&quot;&gt;전역 범위에&lt;/a&gt; 액세스 할 수 있습니다 . 스크립트의 함수 및 &lt;code&gt;var&lt;/code&gt; 선언이 &lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; 개체에 추가됩니다 . &lt;code&gt;let&lt;/code&gt; 및 &lt;code&gt;const&lt;/code&gt; 를 사용하여 만든 변수 선언은 전역 적으로 표시되지만 &lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; 개체에 추가되지는 않습니다 .</target>
        </trans-unit>
        <trans-unit id="478005d19999ae183e0f7a9bb0ae6f007bd16fbb" translate="yes" xml:space="preserve">
          <source>The search paths for the module.</source>
          <target state="translated">모듈의 검색 경로</target>
        </trans-unit>
        <trans-unit id="0cfd0df8336c867963656caf2b437c62fdf98b4d" translate="yes" xml:space="preserve">
          <source>The second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases &lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt;&lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt;&lt;/a&gt; can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript &lt;code&gt;Object&lt;/code&gt; thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with &lt;a href=&quot;#n_api_napi_throw&quot;&gt;&lt;code&gt;napi_throw&lt;/code&gt;&lt;/a&gt; where error is the JavaScript &lt;code&gt;Error&lt;/code&gt; object to be thrown.</source>
          <target state="translated">두 번째 방법은 예외를 처리하는 것입니다. 원시 코드가 예외를 포착하고 적절한 조치를 취한 후 계속할 수있는 경우가 있습니다. 예외를 안전하게 처리 할 수있는 특정 경우에만 권장됩니다. 이 경우 &lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt; &lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt; &lt;/a&gt; 을 사용하여 예외를 가져오고 지울 수 있습니다. 성공하면 결과에는 마지막으로 발생한 JavaScript &lt;code&gt;Object&lt;/code&gt; 대한 핸들이 포함됩니다 . 판별 된 경우, 예외를 검색 한 후, 예외는 &lt;a href=&quot;#n_api_napi_throw&quot;&gt; &lt;code&gt;napi_throw&lt;/code&gt; 를 사용&lt;/a&gt; 하여 다시 발생시킬 수 있으며 예외는 오류가 발생하는 JavaScript &lt;code&gt;Error&lt;/code&gt; 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="dc926d997d4c579499bbdcda07f643f7920bddbb" translate="yes" xml:space="preserve">
          <source>The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.</source>
          <target state="translated">두 번째 방법은 마스터 프로세스가 청취 소켓을 만들어 관심있는 작업자에게 보내는 것입니다. 작업자는 들어오는 연결을 직접 수락합니다.</target>
        </trans-unit>
        <trans-unit id="338ae710bded6a0f6fd004eec96b553cb3dbb378" translate="yes" xml:space="preserve">
          <source>The second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight.</source>
          <target state="translated">이론적으로 두 번째 방법은 최상의 성능을 제공해야합니다. 그러나 실제로는 운영 체제 스케줄러의 차이로 인해 분배가 불균형하는 경향이 있습니다. 모든 연결의 70 % 이상이 총 8 개의 프로세스 중 2 개의 프로세스로 끝나는 부하가 관찰되었습니다.</target>
        </trans-unit>
        <trans-unit id="a15f3c8ca4baed085ff4f00bb83df9df5112dc61" translate="yes" xml:space="preserve">
          <source>The second argument can now be an &lt;code&gt;options&lt;/code&gt; object with &lt;code&gt;recursive&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; properties.</source>
          <target state="translated">두 번째 인수는 이제 &lt;code&gt;recursive&lt;/code&gt; 및 &lt;code&gt;mode&lt;/code&gt; 속성을 가진 &lt;code&gt;options&lt;/code&gt; 객체가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="056385b629217bf4d47083a5cf61e4dbc958e791" translate="yes" xml:space="preserve">
          <source>The second argument is optional. If &lt;code&gt;options&lt;/code&gt; is provided as a string, it specifies the &lt;code&gt;encoding&lt;/code&gt;. Otherwise &lt;code&gt;options&lt;/code&gt; should be passed as an object.</source>
          <target state="translated">두 번째 인수는 선택 사항입니다. 경우 &lt;code&gt;options&lt;/code&gt; 문자열로 제공되는데, 그것은 지정 &lt;code&gt;encoding&lt;/code&gt; . 그렇지 않으면 &lt;code&gt;options&lt;/code&gt; 이 객체로 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="9dafbecade7b94f6c57417ea5afec4a5bc9790e3" translate="yes" xml:space="preserve">
          <source>The sections below describe the additional tools available for developing and deploying Node.js native addons.</source>
          <target state="translated">아래 섹션에서는 Node.js 네이티브 애드온을 개발하고 배포하는 데 사용할 수있는 추가 도구를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="9e19e2fd3684a2ee8b1c503085e8dc2cb74704b7" translate="yes" xml:space="preserve">
          <source>The selected public or private key encoding is incompatible with other options.</source>
          <target state="translated">선택한 공개 또는 개인 키 인코딩이 다른 옵션과 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2b9aebdd568a045c5581d3668edfbe15a6a2bea" translate="yes" xml:space="preserve">
          <source>The semantics of Node.js's &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support a number of reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.js의 &lt;code&gt;require()&lt;/code&gt; 함수 의 의미는 여러 가지 합리적인 디렉토리 구조를 지원하기에 충분히 일반적으로 설계되었습니다. &lt;code&gt;dpkg&lt;/code&gt; , &lt;code&gt;rpm&lt;/code&gt; 및 &lt;code&gt;npm&lt;/code&gt; 과 같은 패키지 관리자 프로그램 은 수정없이 Node.js 모듈에서 기본 패키지를 빌드 할 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="c9e7e477b28102f006aa9e1ae786b6e5fff1d8ea" translate="yes" xml:space="preserve">
          <source>The semantics of the Node.js &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.js &lt;code&gt;require()&lt;/code&gt; 함수 의 의미는 합리적인 디렉토리 구조를 지원하기에 충분히 일반적으로 설계되었습니다. &lt;code&gt;dpkg&lt;/code&gt; , &lt;code&gt;rpm&lt;/code&gt; , &lt;code&gt;npm&lt;/code&gt; 과 같은 패키지 관리자 프로그램 은 수정없이 Node.js 모듈에서 네이티브 패키지를 빌드 할 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="765c907408a72b7c359b1e6e3c2a44d833e954e0" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;.</source>
          <target state="translated">직렬화 API는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML 구조화 된 복제 알고리즘&lt;/a&gt; 과 호환되는 방식으로 JavaScript 값을 직렬화하는 수단을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="1dd892ccc6dffe2bd093abfe21edcd6594062c97" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;. The format is backward-compatible (i.e. safe to store to disk).</source>
          <target state="translated">직렬화 API는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML 구조화 된 클론 알고리즘&lt;/a&gt; 과 호환되는 방식으로 JavaScript 값을 직렬화하는 수단을 제공 합니다 . 형식은 이전 버전과 호환됩니다 (즉, 디스크에 저장하기에 안전).</target>
        </trans-unit>
        <trans-unit id="6375e172794a973dd431fe6fb6d9d47672ad78be" translate="yes" xml:space="preserve">
          <source>The server can be a TCP server or an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server, depending on what it &lt;a href=&quot;#net_server_listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">서버는 &lt;a href=&quot;#net_server_listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt; 에 따라 TCP 서버 또는 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 서버 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2404f9b86c98cba231fff8bebda45b2ca16649b5" translate="yes" xml:space="preserve">
          <source>The server can be tested by connecting to it using the example client from &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; &lt;/a&gt; 의 예제 클라이언트를 사용하여 서버에 연결하여 서버를 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aede112d180e1d47ab7a08eaa5b0ea3c6ed75bc2" translate="yes" xml:space="preserve">
          <source>The server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, &lt;code&gt;callback(null, resp)&lt;/code&gt; is then invoked, where &lt;code&gt;resp&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; instance containing the OCSP response. Both &lt;code&gt;certificate&lt;/code&gt; and &lt;code&gt;issuer&lt;/code&gt; are &lt;code&gt;Buffer&lt;/code&gt; DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.</source>
          <target state="translated">OCSP URL 및 인증서 ID를 얻기 위해 서버의 현재 인증서를 구문 분석 할 수 있습니다. OCSP 응답을 얻은 후 &lt;code&gt;callback(null, resp)&lt;/code&gt; 이 호출됩니다. 여기서 &lt;code&gt;resp&lt;/code&gt; 는 OCSP 응답을 포함 하는 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스입니다. 모두 &lt;code&gt;certificate&lt;/code&gt; 와 &lt;code&gt;issuer&lt;/code&gt; 있는 &lt;code&gt;Buffer&lt;/code&gt; 기본 및 발행자의 인증서 DER-표현. 이들은 OCSP 인증서 ID 및 OCSP 엔드 포인트 URL을 얻는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea711def7d72186a6796edc378b6d6298bc4d28d" translate="yes" xml:space="preserve">
          <source>The servers encrypt the entire session state and send it to the client as a &quot;ticket&quot;. When reconnecting, the state is sent to the server in the initial connection. This mechanism avoids the need for server-side session cache. If the server doesn't use the ticket, for any reason (failure to decrypt it, it's too old, etc.), it will create a new session and send a new ticket. See &lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC 5077&lt;/a&gt; for more information.</source>
          <target state="translated">서버는 전체 세션 상태를 암호화하여 &quot;티켓&quot;으로 클라이언트에 보냅니다. 다시 연결하면 초기 연결시 상태가 서버로 전송됩니다. 이 메커니즘은 서버 측 세션 캐시가 필요하지 않습니다. 서버가 어떤 이유로 든 (복호화 실패, 너무 오래됨 등) 티켓을 사용하지 않으면 새 세션을 만들고 새 티켓을 보냅니다. 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC 5077&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="76accd0d371c0c87373d40be1eddae24ddb6507b" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command line parsing should be compatible.</source>
          <target state="translated">쉘은 &lt;code&gt;-c&lt;/code&gt; 스위치를 이해해야합니다 . 셸이 &lt;code&gt;'cmd.exe'&lt;/code&gt; 이면 &lt;code&gt;/d /s /c&lt;/code&gt; 스위치를 이해 하고 명령 줄 구문 분석이 호환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="aeb000fbdb4d2424b01088fd13f9a5381e396488" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command-line parsing should be compatible.</source>
          <target state="translated">쉘은 &lt;code&gt;-c&lt;/code&gt; 스위치를 이해해야합니다 . 셸이 &lt;code&gt;'cmd.exe'&lt;/code&gt; 인 경우 &lt;code&gt;/d /s /c&lt;/code&gt; 스위치를 이해 하고 명령 줄 구문 분석이 호환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="21be831d3adf2892b25eaf65824eb2c524ecba41" translate="yes" xml:space="preserve">
          <source>The shell that executed Node.js should see the exit code as &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">Node.js를 실행 한 쉘은 종료 코드를 &lt;code&gt;1&lt;/code&gt; 로보아야합니다 .</target>
        </trans-unit>
        <trans-unit id="05c0d6d3b494c3c20fef212dff014249c946a65b" translate="yes" xml:space="preserve">
          <source>The signal handler will receive the signal's name (&lt;code&gt;'SIGINT'&lt;/code&gt;, &lt;code&gt;'SIGTERM'&lt;/code&gt;, etc.) as the first argument.</source>
          <target state="translated">신호 처리기는 첫 번째 인수로 신호 이름 ( &lt;code&gt;'SIGINT'&lt;/code&gt; , &lt;code&gt;'SIGTERM'&lt;/code&gt; 등)을 수신합니다.</target>
        </trans-unit>
        <trans-unit id="47e574501f3a0d99059119864ec3279d3f9294c3" translate="yes" xml:space="preserve">
          <source>The signal used to trigger the creation of a diagnostic report. Defaults to &lt;code&gt;'SIGUSR2'&lt;/code&gt;.</source>
          <target state="translated">진단 보고서 작성을 트리거하는 데 사용되는 신호입니다. 기본값은 &lt;code&gt;'SIGUSR2'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d52541ad62fc4e1c6ca8683f187715851a92c6fd" translate="yes" xml:space="preserve">
          <source>The simple asynchronous work APIs above may not be appropriate for every scenario. When using any other asynchronous mechanism, the following APIs are necessary to ensure an asynchronous operation is properly tracked by the runtime.</source>
          <target state="translated">위의 간단한 비동기 작업 API가 모든 시나리오에 적합한 것은 아닙니다. 다른 비동기 메커니즘을 사용하는 경우 런타임에서 비동기 작업을 올바르게 추적하려면 다음 API가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="translated">파일 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="ad6acc1011912704e9b85abb2b99512ef52fda88" translate="yes" xml:space="preserve">
          <source>The socket timeout in milliseconds as set by &lt;a href=&quot;#net_socket_settimeout_timeout_callback&quot;&gt;&lt;code&gt;socket.setTimeout()&lt;/code&gt;&lt;/a&gt;. It is &lt;code&gt;undefined&lt;/code&gt; if a timeout has not been set.</source>
          <target state="translated">&lt;a href=&quot;#net_socket_settimeout_timeout_callback&quot;&gt; &lt;code&gt;socket.setTimeout()&lt;/code&gt; &lt;/a&gt; 의해 설정된 소켓 제한 시간 (밀리 초 ) 입니다. 그것은되는 &lt;code&gt;undefined&lt;/code&gt; 시간 제한이 설정되어 있지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="2a5cdd3536fe2bed3772a134a40f524b1ba55908" translate="yes" xml:space="preserve">
          <source>The socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.</source>
          <target state="translated">소켓 시간 종료 로직은 연결시 설정되므로이 값을 변경하면 기존 연결이 아닌 서버에 대한 새 연결에만 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="a7bb8f2e0eabe5972b0e59beda073808bf66d7ba" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;'node.keyObject'&lt;/code&gt; value for &lt;code&gt;format&lt;/code&gt; is a Node.js-specific extension that allows converting a &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; into a Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 에 대한 특별한 &lt;code&gt;'node.keyObject'&lt;/code&gt; 값 은 &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 를 Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt; 로 변환 할 수있는 Node.js 특정 확장입니다 .</target>
        </trans-unit>
        <trans-unit id="687b0f4473f640453c7fbad3cd71f2dc3b2451df" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;'node.keyObject'&lt;/code&gt; value for &lt;code&gt;format&lt;/code&gt; is a Node.js-specific extension that allows converting a Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt; into a &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 에 대한 특수 &lt;code&gt;'node.keyObject'&lt;/code&gt; 값 은 Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt; 를 &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 로 변환 할 수있는 Node.js 특정 확장입니다 .</target>
        </trans-unit>
        <trans-unit id="6c1c5af86acdb2cbdf7981b86ae3b974f13c3df2" translate="yes" xml:space="preserve">
          <source>The special handling of the &lt;code&gt;'error'&lt;/code&gt; event is only used when &lt;code&gt;events.once()&lt;/code&gt; is used to wait for another event. If &lt;code&gt;events.once()&lt;/code&gt; is used to wait for the '&lt;code&gt;error'&lt;/code&gt; event itself, then it is treated as any other kind of event without special handling:</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; 이벤트 의 특수 처리는 &lt;code&gt;events.once()&lt;/code&gt; 가 다른 이벤트를 기다리는 데 사용 되는 경우에만 사용됩니다 . 경우 &lt;code&gt;events.once()&lt;/code&gt; '대기하는 데 사용됩니다 &lt;code&gt;error'&lt;/code&gt; 이벤트 자체, 다음은 특별한 처리없이 이벤트의 다른 종류로 취급된다 :</target>
        </trans-unit>
        <trans-unit id="471976270e8935af1d178909e020a76781b88bf1" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">특정 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 객체는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dfcfaca3f84262ad37f21835b36d6a8ca0a1720e" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">특정 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 객체는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e9568eb7140ccc6f348c4550a9426056f00bc293" translate="yes" xml:space="preserve">
          <source>The specific operation of &lt;code&gt;console.clear()&lt;/code&gt; can vary across operating systems and terminal types. For most Linux operating systems, &lt;code&gt;console.clear()&lt;/code&gt; operates similarly to the &lt;code&gt;clear&lt;/code&gt; shell command. On Windows, &lt;code&gt;console.clear()&lt;/code&gt; will clear only the output in the current terminal viewport for the Node.js binary.</source>
          <target state="translated">&lt;code&gt;console.clear()&lt;/code&gt; 의 특정 작업은 운영 체제 및 터미널 유형에 따라 다를 수 있습니다. 대부분의 Linux 운영 체제에서 &lt;code&gt;console.clear()&lt;/code&gt; 는 &lt;code&gt;clear&lt;/code&gt; shell 명령 과 유사하게 작동합니다 . Windows에서 &lt;code&gt;console.clear()&lt;/code&gt; 는 Node.js 바이너리에 대한 현재 터미널 뷰포트의 출력 만 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="26f56414b822e235f350940f03c7fed02c4a3f19" translate="yes" xml:space="preserve">
          <source>The specified &lt;code&gt;secureProtocol&lt;/code&gt; method is invalid. It is either unknown, or disabled because it is insecure.</source>
          <target state="translated">지정된 &lt;code&gt;secureProtocol&lt;/code&gt; 메소드가 유효하지 않습니다. 알 수 없거나 안전하지 않기 때문에 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4404d9ad06af7978ed7f6400d6bff8448f52f29" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if it uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">지정자 문자열은 검색을 수행하지 않으며 &lt;code&gt;require()&lt;/code&gt; 또는 &lt;code&gt;import&lt;/code&gt; 에 제공된 것과 정확히 일치해야합니다 . 따라서 동일한 모듈을 가리 키기 위해 여러 개의 다른 문자열을 사용하는 경우 (예 : 확장 제외) 정책에 여러 지정자가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d1dd38b3953bad12ed9a2d4c03e49e9322e0421" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if &lt;code&gt;require()&lt;/code&gt; uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">지정자 문자열은 검색을 수행하지 않으며 &lt;code&gt;require()&lt;/code&gt; 제공된 것과 정확히 일치해야합니다 . 따라서 &lt;code&gt;require()&lt;/code&gt; 가 여러 개의 다른 문자열을 사용하여 동일한 모듈을 가리키는 경우 (예 : 확장 제외 ) 정책에 여러 지정자가 필요할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71c55e13b6ab04144ed0ca0148cd676f281a362f" translate="yes" xml:space="preserve">
          <source>The specifiers of all dependencies of this module. The returned array is frozen to disallow any changes to it.</source>
          <target state="translated">이 모듈의 모든 종속성의 지정자 반환 된 배열은 고정되어 변경 사항이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6712a27a78d38007f4db6badef0327b5c9f247ac" translate="yes" xml:space="preserve">
          <source>The speed of &lt;code&gt;zlib&lt;/code&gt; compression is affected most dramatically by the &lt;code&gt;level&lt;/code&gt; setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; 압축 속도 는 &lt;code&gt;level&lt;/code&gt; 설정에 가장 큰 영향을받습니다 . 레벨이 높을수록 압축률은 높아지지만 완료하는 데 시간이 더 걸립니다. 수준이 낮을수록 압축률은 낮아 지지만 훨씬 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="9f140bd77b59dd2bfa3880ec33f46f0f9a65f847" translate="yes" xml:space="preserve">
          <source>The spkac argument can be an ArrayBuffer. Added encoding. Limited the size of the spkac argument to a maximum of 2**31 - 1 bytes.</source>
          <target state="translated">spkac 인수는 ArrayBuffer 일 수 있습니다. 인코딩이 추가되었습니다. spkac 인수의 크기를 최대 2 ** 31-1 바이트로 제한했습니다.</target>
        </trans-unit>
        <trans-unit id="f3c3471750476207bc92fe6af34fa69f0f5ad275" translate="yes" xml:space="preserve">
          <source>The spkac argument can be an ArrayBuffer. Limited the size of the spkac argument to a maximum of 2**31 - 1 bytes.</source>
          <target state="translated">spkac 인수는 ArrayBuffer 일 수 있습니다. spkac 인수의 크기를 최대 2 ** 31-1 바이트로 제한했습니다.</target>
        </trans-unit>
        <trans-unit id="baae50c19885878970af46308a9fcef6e3ca5413" translate="yes" xml:space="preserve">
          <source>The stack trace is extended to include the point in time at which the &lt;code&gt;domain&lt;/code&gt; module had been loaded.</source>
          <target state="translated">스택 추적은 &lt;code&gt;domain&lt;/code&gt; 모듈이로드 된 특정 시점을 포함하도록 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="d04dab8c062b60270fff8951733a2c1bf12db8dc" translate="yes" xml:space="preserve">
          <source>The standard deviation of the recorded event loop delays.</source>
          <target state="translated">기록 된 이벤트 루프의 표준 편차가 지연됩니다.</target>
        </trans-unit>
        <trans-unit id="12d4241096406199958bcd38c41ce903d3de3859" translate="yes" xml:space="preserve">
          <source>The stream is closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;false&lt;/code&gt; when creating the stream.</source>
          <target state="translated">스트림을 생성 할 때 &lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt; 옵션이 &lt;code&gt;false&lt;/code&gt; 로 설정 되지 않은 경우 &lt;code&gt;'error'&lt;/code&gt; 이벤트가 발생 하면 스트림이 닫힙니다 .</target>
        </trans-unit>
        <trans-unit id="2f2ac76df98dbcdd434e991056889f9574990f71" translate="yes" xml:space="preserve">
          <source>The stream is not closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;true&lt;/code&gt; when creating the stream.</source>
          <target state="translated">스트림을 작성할 때 &lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt; 옵션이 &lt;code&gt;true&lt;/code&gt; 로 설정되어 있지 않으면 &lt;code&gt;'error'&lt;/code&gt; 이벤트가 발생 하면 스트림이 닫히지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a44550d4120786eeeb6f0da72c77067c943d5e7f" translate="yes" xml:space="preserve">
          <source>The stream is not piped to any writable destination.</source>
          <target state="translated">스트림은 쓰기 가능한 대상으로 파이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="138b0e7f3ba481dfbd0c57d82fdbac0b326fefae" translate="yes" xml:space="preserve">
          <source>The stream's write() callback and return value are exposed.</source>
          <target state="translated">스트림의 write () 콜백 및 반환 값이 노출됩니다.</target>
        </trans-unit>
        <trans-unit id="350def31fd9875bd3d581c4fbb2b29aebcde0c4d" translate="yes" xml:space="preserve">
          <source>The string passed to &lt;code&gt;require()&lt;/code&gt; is the name of the target in &lt;code&gt;binding.gyp&lt;/code&gt; responsible for creating the &lt;code&gt;.node&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; 전달 된 문자열 은 &lt;code&gt;.node&lt;/code&gt; 파일 작성을 담당하는 &lt;code&gt;binding.gyp&lt;/code&gt; 의 대상 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="1f4858a294cb8f6108238742da8a2f702b4e7800" translate="yes" xml:space="preserve">
          <source>The string representation of the local IP address the remote client is connecting on. For example, in a server listening on &lt;code&gt;'0.0.0.0'&lt;/code&gt;, if a client connects on &lt;code&gt;'192.168.1.1'&lt;/code&gt;, the value of &lt;code&gt;socket.localAddress&lt;/code&gt; would be &lt;code&gt;'192.168.1.1'&lt;/code&gt;.</source>
          <target state="translated">원격 클라이언트가 연결중인 로컬 IP 주소의 문자열 표현. 예를 들어 &lt;code&gt;'0.0.0.0'&lt;/code&gt; 을 수신 대기하는 서버 에서 클라이언트가 &lt;code&gt;'192.168.1.1'&lt;/code&gt; 는 의 값 &lt;code&gt;socket.localAddress&lt;/code&gt; 이 될 것 &lt;code&gt;'192.168.1.1'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c907e196491aec5b81c0d022d86f6e906bde2939" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP address. For example, &lt;code&gt;'74.125.127.100'&lt;/code&gt; or &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt;. Value may be &lt;code&gt;undefined&lt;/code&gt; if the socket is destroyed (for example, if the client disconnected).</source>
          <target state="translated">원격 IP 주소의 문자열 표현 예를 들어 &lt;code&gt;'74.125.127.100'&lt;/code&gt; 또는 &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt; 입니다. 소켓이 파손 된 경우 (예 : 클라이언트 연결이 끊긴 경우) 값이 &lt;code&gt;undefined&lt;/code&gt; 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2179deb625958e34cb0c9470426542821e19d005" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP family. &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;.</source>
          <target state="translated">원격 IP 제품군의 문자열 표현 &lt;code&gt;'IPv4'&lt;/code&gt; 또는 &lt;code&gt;'IPv6'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b14d2cbabe1d821f1fe19c891d331b602e974058" translate="yes" xml:space="preserve">
          <source>The string representing the stack trace is lazily generated when the &lt;code&gt;error.stack&lt;/code&gt; property is &lt;strong&gt;accessed&lt;/strong&gt;.</source>
          <target state="translated">스택 추적을 나타내는 문자열은 &lt;code&gt;error.stack&lt;/code&gt; 속성에 &lt;strong&gt;액세스&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="98fe85fdbe508ef6c827c907e5d2f1831bd9b29d" translate="yes" xml:space="preserve">
          <source>The substring that was used for the matching.</source>
          <target state="translated">일치에 사용 된 부분 문자열.</target>
        </trans-unit>
        <trans-unit id="18a71b7db5e7d874fe3ff9bf678c83abda8ee04e" translate="yes" xml:space="preserve">
          <source>The successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be returned as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">성공적으로 생성 &lt;code&gt;derivedKey&lt;/code&gt; 은 int로서 반환됩니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d4576fd7cf24c54c52dedbc9e9bd4dfe7af6d9fe" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. If an error occurs while deriving the key, &lt;code&gt;err&lt;/code&gt; will be set; otherwise &lt;code&gt;err&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. By default, the successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. An error will be thrown if any of the input arguments specify invalid values or types.</source>
          <target state="translated">제공된 &lt;code&gt;callback&lt;/code&gt; 함수는 &lt;code&gt;err&lt;/code&gt; 및 &lt;code&gt;derivedKey&lt;/code&gt; 는 두 개의 인수와 함께 호출됩니다 . 키를 파생시키는 동안 오류가 발생하면 &lt;code&gt;err&lt;/code&gt; 이 설정됩니다. 그렇지 않으면 &lt;code&gt;err&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; 입니다. 기본적으로 성공적으로 생성 된 &lt;code&gt;derivedKey&lt;/code&gt; 는 콜백에&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;. 입력 인수가 유효하지 않은 값 또는 유형을 지정하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e92c186f0d3e427b1fda626ba5b74b244585c6c2" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. If an errors occurs while deriving the key, &lt;code&gt;err&lt;/code&gt; will be set; otherwise &lt;code&gt;err&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. The successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be passed to the callback as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt;. An error will be thrown if any of the input aguments specify invalid values or types.</source>
          <target state="translated">제공된 &lt;code&gt;callback&lt;/code&gt; 함수는 &lt;code&gt;err&lt;/code&gt; 및 &lt;code&gt;derivedKey&lt;/code&gt; 두 인수를 사용하여 호출됩니다 . 키를 추출하는 동안 오류가 발생하면 &lt;code&gt;err&lt;/code&gt; 이 설정됩니다. 그렇지 않으면 &lt;code&gt;err&lt;/code&gt; 은 &lt;code&gt;null&lt;/code&gt; 이 됩니다. 성공적으로 생성 &lt;code&gt;derivedKey&lt;/code&gt; 는 AS를 콜백에 전달 될 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; . 입력 인수가 유효하지 않은 값 또는 유형을 지정하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0957fe6b3d636aed70380ea3ee84cc5c69bf4bee" translate="yes" xml:space="preserve">
          <source>The synchronous form blocks the Node.js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using &lt;code&gt;try&amp;hellip;catch&lt;/code&gt;, or can be allowed to bubble up.</source>
          <target state="translated">동기 양식은 작업이 완료 될 때까지 Node.js 이벤트 루프와 추가 JavaScript 실행을 차단합니다. 예외는 즉시 발생하며 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 사용하여 처리 하거나 버블 링을 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13b6f6c400f32e4c15818f48380024fa6f42a8c5" translate="yes" xml:space="preserve">
          <source>The syntax of these values is not validated by the Node.js implementation and are passed through as provided by the user or received from the peer.</source>
          <target state="translated">이러한 값의 구문은 Node.js 구현에 의해 검증되지 않으며 사용자가 제공하거나 피어로부터 수신 한대로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="44801cbc2f250176d3045ff342a32034dd4a8bbc" translate="yes" xml:space="preserve">
          <source>The system file descriptor the &lt;code&gt;QuicEndpoint&lt;/code&gt; is bound to. This property is not set on Windows.</source>
          <target state="translated">&lt;code&gt;QuicEndpoint&lt;/code&gt; 가 바인딩 된 시스템 파일 설명자 입니다. 이 속성은 Windows에서 설정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d09f488f14ab2a8621a7dca26286a0858222bd2c" translate="yes" xml:space="preserve">
          <source>The table details the algorithms supported by the Node.js Web Crypto API implementation and the APIs supported for each:</source>
          <target state="translated">이 표는 Node.js 웹 암호화 API 구현에서 지원하는 알고리즘과 각각에 대해 지원되는 API를 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="6225c4c4ebdc288d3a2d4ec23c52209f6023bf46" translate="yes" xml:space="preserve">
          <source>The term &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;Forward Secrecy&lt;/a&gt;&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">&quot; &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;순방향 비밀&lt;/a&gt; &quot;이라는 용어 &quot;또는 &quot;완벽한 &quot; 는 키-협약 (즉, 키 교환) 방법의 특징을 설명한다. 즉, 서버 및 클라이언트 키는 현재 통신 세션에만 사용되는 새 임시 키를 협상하는 데 사용됩니다. 실제로 이것은 서버의 개인 키가 손상 되더라도 공격자가 세션에 대해 특별히 생성 된 키 쌍을 확보 할 수있는 경우에만 도청자가 통신을 해독 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e930ba3f37adc9345f4bcca9cb555bc0b2e00b12" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;forward secrecy&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;perfect forward secrecy&lt;/em&gt; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;순방향 비밀&lt;/a&gt;&lt;/em&gt; 또는 &lt;em&gt;완전 순방향 비밀&lt;/em&gt; 이라는 용어 는 키 동의 (즉, 키 교환) 방법의 기능을 설명합니다. 즉, 서버 및 클라이언트 키는 현재 통신 세션에만 사용되는 새 임시 키를 협상하는 데 사용됩니다. 실제로 이것은 서버의 개인 키가 손상 되더라도 공격자가 세션에 대해 특별히 생성 된 키 쌍을 확보 할 수있는 경우에만 도청자가 통신을 해독 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0bad6d5ba86517581ea93518756b284caea90d77" translate="yes" xml:space="preserve">
          <source>The thread id as given by &lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt;&lt;code&gt;worker_threads.threadId&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt; &lt;code&gt;worker_threads.threadId&lt;/code&gt; 에&lt;/a&gt; 의해 주어진 스레드 ID</target>
        </trans-unit>
        <trans-unit id="644b7390ff4919cf711608e29230a6b5cd65c540" translate="yes" xml:space="preserve">
          <source>The thread which is generating the report will wait for the reports from Worker threads to finish. However, the latency for this will usually be low, as both running JavaScript and the event loop are interrupted to generate the report.</source>
          <target state="translated">보고서를 생성하는 스레드는 작업자 스레드의 보고서가 완료 될 때까지 기다립니다. 그러나 보고서를 생성하기 위해 실행중인 JavaScript와 이벤트 루프가 모두 중단되기 때문에 이에 대한 지연 시간은 일반적으로 낮습니다.</target>
        </trans-unit>
        <trans-unit id="5027f2889856b5eff5759ff3a0048ebbb10df85e" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must make no further use of the thread-safe function because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_tsfn_abort&lt;/code&gt; 값 을 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 에 제공하여 스레드 안전 함수를 &quot;중지&quot;할 수 있습니다 . 그러면 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 을 제외한 스레드 안전 함수와 관련된 모든 후속 API 가 참조 횟수가 0에 도달하기 전에도 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 합니다. 특히 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 은 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 하므로 스레드 안전 기능에 대한 비동기 호출을 더 이상 수행 할 수 없음을 스레드에 알립니다. 스레드 종료 기준으로 사용할 수 있습니다. &lt;strong&gt;리턴 값 수신시 &lt;code&gt;napi_closing&lt;/code&gt; 에서 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 스레드는 더 이상 할당이 보장되지 않으므로 스레드 안전 기능을 더 이상 사용하지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c593e7d8b94b3676794e201f5b57070222f901e3" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must not use the thread-safe function anymore because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">스레드로부터 안전한 함수는 &lt;code&gt;napi_tsfn_abort&lt;/code&gt; 값 을 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 에 제공하여 &quot;중단&quot;될 수 있습니다 . 이로 인해 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 을 제외한 스레드 안전 함수와 관련된 모든 후속 API 는 참조 횟수가 0에 도달하기 전에 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 합니다. 특히, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 은 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 하여 스레드에 안전한 함수에 대한 비동기 호출을 더 이상 수행 할 수 없음을 스레드에 알립니다. 스레드를 종료하는 기준으로 사용할 수 있습니다. &lt;strong&gt; &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 에서 &lt;/strong&gt;&lt;strong&gt;napi_closing&lt;/strong&gt;&lt;strong&gt; 의 반환 값을 &lt;code&gt;napi_closing&lt;/code&gt; 스레드는 더 이상 할당이 보장되지 않으므로 스레드 안전 함수를 더 이상 사용하지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63541238aa26564d51eb28716b3e8da2eb477a58" translate="yes" xml:space="preserve">
          <source>The three tools listed here permit native addon developers and maintainers to create and upload binaries to public or private servers. These tools are typically integrated with CI/CD build systems like &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; and &lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt; to build and upload binaries for a variety of platforms and architectures. These binaries are then available for download by users who do not need to have a C/C++ toolchain installed.</source>
          <target state="translated">여기에 나열된 세 가지 도구를 사용하면 네이티브 애드온 개발자 및 유지 관리자가 바이너리를 만들고 공용 또는 개인 서버에 업로드 할 수 있습니다. 이러한 도구는 일반적으로 &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; 및 &lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt; 와 같은 CI / CD 빌드 시스템과 통합되어 다양한 플랫폼 및 아키텍처를위한 바이너리를 빌드하고 업로드합니다. 이 바이너리는 C / C ++ 도구 모음을 설치할 필요가없는 사용자가 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae69600838324998125805013d93da028ccbe298" translate="yes" xml:space="preserve">
          <source>The timeout passed to &lt;code&gt;Atomics.wait&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Atomics.wait&lt;/code&gt; 에 전달 된 제한 시간</target>
        </trans-unit>
        <trans-unit id="5e67c9640ec1fa6137f83769ae5b65b87eb23576" translate="yes" xml:space="preserve">
          <source>The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;Event Loop&lt;/a&gt;.</source>
          <target state="translated">Node.js의 타이머 함수는 웹 브라우저에서 제공하는 타이머 API와 유사한 API를 구현하지만 Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;이벤트 루프를&lt;/a&gt; 기반으로하는 다른 내부 구현을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="24142a2f59af56bc69ad24cdd8ff0eb028144072" translate="yes" xml:space="preserve">
          <source>The times in the stat object have the following semantics:</source>
          <target state="translated">stat 객체의 시간은 다음과 같은 의미를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="11338b33321f7c1210af69f2e5b2929e07ab4a7f" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">이 파일의 작성 시간을 나타내는 시간 소인은 POSIX Epoch 이후 밀리 초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="17b34123fd039eac484c0932d35c7d243a87f909" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file.</source>
          <target state="translated">이 파일의 작성 시간을 나타내는 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="724e46ddf25f0bcf42fa24bc37ddf8c0097582d7" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">POSIX Epoch 이후 파일 상태가 마지막으로 변경된 시간을 나타내는 시간 소인 (밀리 초).</target>
        </trans-unit>
        <trans-unit id="61773109ba1c85f4ebece132711c5158b722aa5c" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed.</source>
          <target state="translated">파일 상태가 마지막으로 변경된 시간을 나타내는 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="069fd01b27a0105d764e62a925be9ce027926e36" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">이 파일에 마지막으로 액세스 한 시간을 나타내는 시간 소인은 POSIX Epoch 이후 밀리 초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bb6699921685ac3e2dd128110a9aa9134e05fa52" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed.</source>
          <target state="translated">이 파일에 마지막으로 액세스 한 시간을 나타내는 시간 소인.</target>
        </trans-unit>
        <trans-unit id="97c50105501bb2bfd22cb492162a0f85fc156c0e" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">이 파일이 마지막으로 수정 된 시간을 나타내는 시간 소인은 POSIX Epoch 이후 밀리 초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="d04d4005b317a67d275b64117bfd954f165821eb" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified.</source>
          <target state="translated">이 파일이 마지막으로 수정 된 시간을 나타내는 시간 소인.</target>
        </trans-unit>
        <trans-unit id="fa4ea6618725082058aed69700de61738cdcb766" translate="yes" xml:space="preserve">
          <source>The total number of &lt;code&gt;QuicStream&lt;/code&gt; instances initiated by this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에 의해 시작된 총 &lt;code&gt;QuicStream&lt;/code&gt; 인스턴스 수입니다 .</target>
        </trans-unit>
        <trans-unit id="f80e50ad05f84120e3f82d9edb13ee8b9bf8db30" translate="yes" xml:space="preserve">
          <source>The total number of &lt;code&gt;QuicStreams&lt;/code&gt; initiated by the connected peer.</source>
          <target state="translated">연결된 피어가 시작한 총 &lt;code&gt;QuicStreams&lt;/code&gt; 수입니다 .</target>
        </trans-unit>
        <trans-unit id="ed9310449a1c923f9594c7b9b3e0d6f018ffdde1" translate="yes" xml:space="preserve">
          <source>The total number of bidirectional streams created for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에 대해 생성 된 양방향 스트림의 총 수입니다 .</target>
        </trans-unit>
        <trans-unit id="3c277c6c2e9062d3c4b2cbd21de24a70a38eb2bc" translate="yes" xml:space="preserve">
          <source>The total number of bytes received for this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicStream&lt;/code&gt; 에 대해 수신 된 총 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="e36702511f4f441012c25987ca73257efd6133c0" translate="yes" xml:space="preserve">
          <source>The total number of bytes received from the peer.</source>
          <target state="translated">피어에서받은 총 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="dcc81a97e64406ee68f0964a4d72b73fa842e5d5" translate="yes" xml:space="preserve">
          <source>The total number of bytes sent by this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicStream&lt;/code&gt; 에서 보낸 총 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="6bf5d1e89e865692221c84e09c917fe61b4235c0" translate="yes" xml:space="preserve">
          <source>The total number of bytes sent to the peer.</source>
          <target state="translated">피어에 전송 된 총 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="e3a6c7b85aebeca99e33b8f243261b1ebb8b27d0" translate="yes" xml:space="preserve">
          <source>The total number of bytes successfully received by the &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; 에서 성공적으로 수신 한 총 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="9dbb9f1bf89467a1935b1e2851b35542f463ba39" translate="yes" xml:space="preserve">
          <source>The total number of bytes the &lt;code&gt;QuicSession&lt;/code&gt; is &lt;em&gt;currently&lt;/em&gt; allowed to send to the connected peer.</source>
          <target state="translated">&lt;code&gt;QuicSession&lt;/code&gt; 이 &lt;em&gt;현재&lt;/em&gt; 연결된 피어에 전송할 수있는 총 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="4ee4420a40bacb4b309040070a2a109b60250f40" translate="yes" xml:space="preserve">
          <source>The total number of milliseconds elapsed for this entry. This value will not be meaningful for all Performance Entry types.</source>
          <target state="translated">이 항목에 소요 된 총 밀리 초 수입니다. 이 값은 모든 퍼포먼스 입력 유형에 의미가있는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="6ffcad6baa7c9ab26cd45de6a0b3b953f96da782" translate="yes" xml:space="preserve">
          <source>The total number of times the &lt;code&gt;QuicSession&lt;/code&gt; has been blocked from sending stream data due to flow control.</source>
          <target state="translated">흐름 제어로 인해 &lt;code&gt;QuicSession&lt;/code&gt; 이 스트림 데이터 전송을 차단 한 총 횟수입니다 .</target>
        </trans-unit>
        <trans-unit id="2aa09ac906eb5cb5ca920f79c7af8ba4ab849087" translate="yes" xml:space="preserve">
          <source>The total number of unacknowledged bytes this QUIC endpoint has transmitted to the connected peer.</source>
          <target state="translated">이 QUIC 엔드 포인트가 연결된 피어로 전송 한 확인되지 않은 총 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="953b42ada5f329f49daadb64f49e565478963451" translate="yes" xml:space="preserve">
          <source>The total number of unidirectional streams created on this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;QuicSession&lt;/code&gt; 에서 작성된 총 단방향 스트림 수입니다 .</target>
        </trans-unit>
        <trans-unit id="dceaa4442e4a67a592b8e691c590ea3c3a720f78" translate="yes" xml:space="preserve">
          <source>The tracing system uses the same time source as the one used by &lt;code&gt;process.hrtime()&lt;/code&gt;. However the trace-event timestamps are expressed in microseconds, unlike &lt;code&gt;process.hrtime()&lt;/code&gt; which returns nanoseconds.</source>
          <target state="translated">추적 시스템은 &lt;code&gt;process.hrtime()&lt;/code&gt; 사용하는 것과 동일한 시간 원본을 사용합니다 . 그러나 추적 이벤트 타임 스탬프는 나노초를 반환하는 &lt;code&gt;process.hrtime()&lt;/code&gt; 과 달리 마이크로 초로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="abafe3c3983a12616d3ab9d5970201bbaeddb49e" translate="yes" xml:space="preserve">
          <source>The transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance:</source>
          <target state="translated">트랜스 코딩 프로세스는 주어진 바이트 시퀀스가 ​​대상 인코딩에서 적절하게 표현 될 수없는 경우 대체 문자를 사용합니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="580e806012432ab96eb065a247141bef72a7f774" translate="yes" xml:space="preserve">
          <source>The type of an asynchronous resource was invalid. Users are also able to define their own types if using the public embedder API.</source>
          <target state="translated">비동기 자원의 유형이 유효하지 않습니다. 공용 임 베더 API를 사용하는 경우 사용자는 자신의 유형을 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4fe24a1a4412575d21267293d8a210703d96afd" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. Currently it may be one of: &lt;code&gt;'node'&lt;/code&gt;, &lt;code&gt;'mark'&lt;/code&gt;, &lt;code&gt;'measure'&lt;/code&gt;, &lt;code&gt;'gc'&lt;/code&gt;, &lt;code&gt;'function'&lt;/code&gt;, &lt;code&gt;'http2'&lt;/code&gt; or &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="translated">성능 항목의 유형입니다. 현재 &lt;code&gt;'node'&lt;/code&gt; , &lt;code&gt;'mark'&lt;/code&gt; , &lt;code&gt;'measure'&lt;/code&gt; , &lt;code&gt;'gc'&lt;/code&gt; , &lt;code&gt;'function'&lt;/code&gt; , &lt;code&gt;'http2'&lt;/code&gt; 또는 &lt;code&gt;'http'&lt;/code&gt; 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a75304b33d14797ab764eb8c4c7d32f6e108038" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. It may be one of:</source>
          <target state="translated">성능 항목의 유형입니다. 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b5e053536c481a8b50ecd5b068ee7fcf0ba2c2e" translate="yes" xml:space="preserve">
          <source>The type tags are now properly compared and there are a couple minor comparison adjustments to make the check less surprising.</source>
          <target state="translated">유형 태그가 이제 제대로 비교되고 수표를 덜 경미하게하기 위해 몇 가지 사소한 비교 조정이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1ae4d26f68ff9e770ba1c7b9fe1bb317ab919ab" translate="yes" xml:space="preserve">
          <source>The typical flow of an OCSP Request is as follows:</source>
          <target state="translated">OCSP 요청의 일반적인 흐름은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed60e000342dc962c9266db500477f9e994c8a86" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize such &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">이 방법으로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 기본 메모리 는 &lt;em&gt;초기화되지 않습니다&lt;/em&gt; . 새로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 의 내용을 알 &lt;em&gt;수 없으며 민감한 데이터를 포함 할 수 있습니다&lt;/em&gt; . 이러한 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스를 0 으로 초기화 하려면 &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="58b7a5f60ed15b149caff061065151e09d20b14b" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">이 방법으로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 기본 메모리 는 &lt;em&gt;초기화되지 않습니다&lt;/em&gt; . 새로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 의 내용을 알 &lt;em&gt;수 없으며 민감한 데이터를 포함 할 수 있습니다&lt;/em&gt; . 사용 &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 대신 초기화 &lt;code&gt;Buffer&lt;/code&gt; 제로로 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="4ef9fd7dad9eaa34841c0f3a9cab53f8a8cb3e58" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">이러한 방식으로 생성 된 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 기본 메모리 는 &lt;em&gt;초기화되지 않습니다&lt;/em&gt; . 새로 생성 된 &lt;code&gt;Buffer&lt;/code&gt; 의 내용 은 알 &lt;em&gt;수 없으며 민감한 데이터를 포함 할 수 있습니다&lt;/em&gt; . 사용 &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 대신 초기화 &lt;code&gt;Buffer&lt;/code&gt; 제로로 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="8a787b77e22fb6f3e77127ec8593459c30794b75" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;SlowBuffer&lt;/code&gt; instances is &lt;em&gt;not initialized&lt;/em&gt;. The contents of a newly created &lt;code&gt;SlowBuffer&lt;/code&gt; are unknown and may contain sensitive data. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize a &lt;code&gt;SlowBuffer&lt;/code&gt; with zeroes.</source>
          <target state="translated">&lt;code&gt;SlowBuffer&lt;/code&gt; 인스턴스 의 기본 메모리 가 &lt;em&gt;초기화되지 않았습니다&lt;/em&gt; . 새로 작성된 &lt;code&gt;SlowBuffer&lt;/code&gt; 의 내용 은 알 수 없으며 민감한 데이터를 포함 할 수 있습니다. &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt; 을 사용 하여 &lt;code&gt;SlowBuffer&lt;/code&gt; 를 0 으로 초기화하십시오 .</target>
        </trans-unit>
        <trans-unit id="867a8f54f53cc42a74637197afdab6fff988978b" translate="yes" xml:space="preserve">
          <source>The undocumented &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; function was originally intended for debugging and performance tuning when using the &lt;code&gt;child_process&lt;/code&gt; and &lt;code&gt;cluster&lt;/code&gt; modules on Windows. The function is not generally useful and is being removed. See discussion here: &lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https://github.com/nodejs/node/issues/18391&lt;/a&gt;</source>
          <target state="translated">문서화되지 않은 &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; 함수는 원래 Windows 에서 &lt;code&gt;child_process&lt;/code&gt; 및 &lt;code&gt;cluster&lt;/code&gt; 모듈을 사용할 때 디버깅 및 성능 조정을위한 것입니다 . 이 기능은 일반적으로 유용하지 않으며 제거되고 있습니다. 여기 토론을 참조하십시오 : &lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https://github.com/nodejs/node/issues/18391&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f23d948afe211552dd615d56c748e645934ac592" translate="yes" xml:space="preserve">
          <source>The unwrapped key algorithms supported include:</source>
          <target state="translated">지원되는 래핑되지 않은 키 알고리즘은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4b521521f75103faccb7d51cd9d2f1b5e0e6ccaf" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;readable.setEncoding()&lt;/code&gt; will change the behavior of how the &lt;code&gt;highWaterMark&lt;/code&gt; operates in non-object mode.</source>
          <target state="translated">&lt;code&gt;readable.setEncoding()&lt;/code&gt; 사용 하면 &lt;code&gt;highWaterMark&lt;/code&gt; 가 비 객체 모드에서 작동 하는 방식의 동작이 변경 됩니다.</target>
        </trans-unit>
        <trans-unit id="27af502777cc48272ed80adad79f83defdbec1fe" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;'error'&lt;/code&gt; event mechanism is most common for &lt;a href=&quot;stream&quot;&gt;stream-based&lt;/a&gt; and &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;event emitter-based&lt;/a&gt; APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail).</source>
          <target state="translated">의 사용은 &lt;code&gt;'error'&lt;/code&gt; 이벤트 메커니즘에 대해 가장 보편적 인 &lt;a href=&quot;stream&quot;&gt;스트림 기반&lt;/a&gt; 및 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;이벤트 방출 계&lt;/a&gt; (통과 또는 실패 할 수 단일 조작 대조적으로) 자신의 시간에 걸쳐 비동기 일련의 동작을 대표하는 API.</target>
        </trans-unit>
        <trans-unit id="f9afa630637657eabbb89a3f52ab510d1fb28688" translate="yes" xml:space="preserve">
          <source>The use of the Extended CONNECT Protocol is enabled by HTTP/2 servers by using the &lt;code&gt;enableConnectProtocol&lt;/code&gt; setting:</source>
          <target state="translated">&lt;code&gt;enableConnectProtocol&lt;/code&gt; 설정 을 사용하여 HTTP / 2 서버에서 확장 CONNECT 프로토콜을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="300d2118e20daa8e0f1e2f8f53ad243a96013499" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if Node.js is built on the Android operating system. &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Android support is experimental&lt;/a&gt;.</source>
          <target state="translated">Node.js가 Android 운영 체제에 빌드 된 경우 &lt;code&gt;'android'&lt;/code&gt; 값 도 반환 될 수 있습니다. &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Android 지원은 실험적&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="59f4a988511ad2f772cdb10a461f62d9115d066c" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;is experimental&lt;/a&gt;.</source>
          <target state="translated">Node.js가 Android 운영 체제에서 빌드 된 경우 &lt;code&gt;'android'&lt;/code&gt; 값 이 리턴 될 수도 있습니다. 그러나 Node.js의 Android 지원 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;은 실험적&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c07b4ef549b464279da1a098d4302bead0c3d309" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is considered &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;to be experimental&lt;/a&gt; at this time.</source>
          <target state="translated">Node.js가 Android 운영 체제에서 빌드 된 경우 &lt;code&gt;'android'&lt;/code&gt; 값 이 리턴 될 수도 있습니다. 그러나 현재 Node.js의 Android 지원은 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;실험적인&lt;/a&gt; 것으로 간주 됩니다 .</target>
        </trans-unit>
        <trans-unit id="941fe2cec88cb061344cd4ca3f47041ec7d3d800" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;0&lt;/code&gt; is now accepted as a file descriptor.</source>
          <target state="translated">값 &lt;code&gt;0&lt;/code&gt; 은 이제 파일 디스크립터로 승인됩니다.</target>
        </trans-unit>
        <trans-unit id="ddbfd621c854ebb6c9668e80ef6194f125b93fb8" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;undefined&lt;/code&gt; cannot be used for cases where there is not a thrown exception due to possible ambiguity with &lt;code&gt;throw undefined;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 값 은 &lt;code&gt;throw undefined;&lt;/code&gt; 대한 모호성으로 인해 예외가 발생하지 않는 경우 사용할 수 없습니다 . .</target>
        </trans-unit>
        <trans-unit id="6a47e663aba60ac6e53c0368dd88e44d713b4b29" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;clientHelloHandler&lt;/code&gt; is an async function that is called at the start of a new &lt;code&gt;QuicServerSession&lt;/code&gt;. It is invoked with three arguments:</source>
          <target state="translated">&lt;code&gt;clientHelloHandler&lt;/code&gt; 의 값은 새 &lt;code&gt;QuicServerSession&lt;/code&gt; 시작시 호출되는 비동기 함수입니다 . 세 가지 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="d78b331e35be7b21a30c47f32e06a07819b550e7" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; 가 반환 한 &lt;code&gt;homedir&lt;/code&gt; 의 값은 운영 체제에서 제공합니다. 이는 운영 체제 응답으로 돌아 가기 전에 홈 디렉토리에 대한 환경 변수를 쿼리하는 &lt;code&gt;os.homedir()&lt;/code&gt; 의 결과와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="c22adcf410f61546f4cf7752ab0362f5a6a5606a" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries several environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; 의해 리턴 된 &lt;code&gt;homedir&lt;/code&gt; 의 값은 운영 체제에서 제공합니다. 이는 운영 체제 응답으로 돌아 가기 전에 홈 디렉토리에 대한 여러 환경 변수를 쿼리하는 &lt;code&gt;os.homedir()&lt;/code&gt; 의 결과와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="6329830cca711ff7e90b6ad78fe1cb5caa3423e1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; is &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; within the script.</source>
          <target state="translated">의 값 &lt;code&gt;this&lt;/code&gt; 인 &lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; 스크립트 내에서.</target>
        </trans-unit>
        <trans-unit id="f4c400444128a7253063ab3d3ca508cbfb8b9928" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.hash&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">값 &lt;code&gt;urlObject.hash&lt;/code&gt; 이 추가되어 &lt;code&gt;result&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f11b40efff2f11ec85da3f23b35a76cc6588c477" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.pathname&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">값 &lt;code&gt;urlObject.pathname&lt;/code&gt; 이 추가되어 &lt;code&gt;result&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e5ee59ce8058895b38d6200c77460df3494139ea" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.port&lt;/code&gt; is coerced to a string and appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlObject.port&lt;/code&gt; 의 값은 문자열에 강제되고 &lt;code&gt;result&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="f9a81e556419112a8d0a931ecf395dd3247be233" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.search&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">값 &lt;code&gt;urlObject.search&lt;/code&gt; 이 추가되어 &lt;code&gt;result&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e7948e802953d66c2402ca8fa5d1b25f66c1e5b8" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;code&gt;postMessage()&lt;/code&gt; contained an object that is not supported for transferring.</source>
          <target state="translated">&lt;code&gt;postMessage()&lt;/code&gt; 전달 된 값 에 전송이 지원되지 않는 객체가 포함되었습니다.</target>
        </trans-unit>
        <trans-unit id="e79bd05eced9303cb66ff355ac9f577ee93b88c0" translate="yes" xml:space="preserve">
          <source>The value returned is an array of objects containing the following properties:</source>
          <target state="translated">리턴 된 값은 다음 특성을 포함하는 오브젝트의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="ca7dd665e8fdfe267d513d08093ce8bedbca4171" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if decoding errors result in a &lt;code&gt;TypeError&lt;/code&gt; being thrown.</source>
          <target state="translated">디코딩 오류로 인해 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 하면 값이 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f1ca85b3627e52d634af29f4b8a623574861fb2b" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if the decoding result will include the byte order mark.</source>
          <target state="translated">디코딩 결과에 바이트 순서 마크가 포함되면 이 값이 &lt;code&gt;true&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="104132237db0b7ecb17081ab083c9af7c1d419d4" translate="yes" xml:space="preserve">
          <source>The variables &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; will be available inside the function body following the macro invocation.</source>
          <target state="translated">변수 &lt;code&gt;env&lt;/code&gt; 및 &lt;code&gt;exports&lt;/code&gt; 는 매크로 호출에 따라 함수 본문 내에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="1ca2642bb4155ee750ac00797ce4a46dc67ac445" translate="yes" xml:space="preserve">
          <source>The various loader hooks can be used together to accomplish wide-ranging customizations of Node.js&amp;rsquo; code loading and evaluation behaviors.</source>
          <target state="translated">다양한 로더 후크를 함께 사용하여 Node.js의 코드로드 및 평가 동작에 대한 광범위한 사용자 정의를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4d706806806ea43c9c128b45cdecd01ed8d570e" translate="yes" xml:space="preserve">
          <source>The vm context passed into the API is not yet initialized. This could happen when an error occurs (and is caught) during the creation of the context, for example, when the allocation fails or the maximum call stack size is reached when the context is created.</source>
          <target state="translated">API에 전달 된 vm 컨텍스트가 아직 초기화되지 않았습니다. 이는 컨텍스트를 생성하는 동안 오류가 발생하고 포착되었을 때 (예 : 할당이 실패하거나 컨텍스트가 생성 될 때 최대 호출 스택 크기에 도달 한 경우) 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5db8a3896318b6c0ba6edb751fb3c96e7c3235a0" translate="yes" xml:space="preserve">
          <source>The volume root may be referenced via &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;file:///&lt;/code&gt;. Given the differences between &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;URL&lt;/a&gt; and path resolution (such as percent encoding details), it is recommended to use &lt;a href=&quot;url#url_url_pathtofileurl_path&quot;&gt;url.pathToFileURL&lt;/a&gt; when importing a path.</source>
          <target state="translated">볼륨 루트는 &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;//&lt;/code&gt; 또는 &lt;code&gt;file:///&lt;/code&gt; 을 통해 참조 할 수 있습니다 . &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;URL&lt;/a&gt; 과 경로 확인 (예 : 인코딩 세부 정보 비율) 의 차이를 고려할 때 경로 를 가져올 때 &lt;a href=&quot;url#url_url_pathtofileurl_path&quot;&gt;url.pathToFileURL&lt;/a&gt; 을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="1a3768d673fbfe9fe1a8bf340a95d76c85f8f437" translate="yes" xml:space="preserve">
          <source>The workaround in this situation is to call the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method to begin the flow of data:</source>
          <target state="translated">이 상황에서 해결 방법은 &lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 데이터 흐름을 시작하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4d6edeb8cb0fc86e77857d0fda8d129467b2e13b" translate="yes" xml:space="preserve">
          <source>The worker processes are spawned using the &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.</source>
          <target state="translated">워커 프로세스는 &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 생성 되므로 IPC를 통해 상위와 통신하고 서버 핸들을 앞뒤로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aaa2d3ce72e4b3a43da91c13bc4934c0350da0af" translate="yes" xml:space="preserve">
          <source>The wrapper function is expected to be called exactly &lt;code&gt;exact&lt;/code&gt; times. If the function has not been called exactly &lt;code&gt;exact&lt;/code&gt; times when &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; is called, then &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; will throw an error.</source>
          <target state="translated">래퍼 함수는 정확히 &lt;code&gt;exact&lt;/code&gt; 시간에 호출 될 것으로 예상됩니다 . 함수가 정확히 호출되지 않은 경우 &lt;code&gt;exact&lt;/code&gt; 시간을 때 &lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; &lt;/a&gt; 호출, 다음 &lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c9e54715173213ef9c83146469b98fdbe2d4b0be" translate="yes" xml:space="preserve">
          <source>The wrapping algorithms currently supported include:</source>
          <target state="translated">현재 지원되는 래핑 알고리즘은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="052d8814bbbc21731431f0d8bff6bf49f919c5ba" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;request.url&lt;/code&gt; will be:</source>
          <target state="translated">그러면 &lt;code&gt;request.url&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a61cfdea6d9cf8368ee65114d036782e86c7ccd2" translate="yes" xml:space="preserve">
          <source>Then any module &lt;em&gt;in that package&lt;/em&gt; can reference an export in the package itself:</source>
          <target state="translated">그러면 &lt;em&gt;해당 패키지의&lt;/em&gt; 모든 모듈 이 패키지 자체의 내보내기를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c414cc316bb380ca834b2610259a592dc194ac7" translate="yes" xml:space="preserve">
          <source>Then in another file we could do:</source>
          <target state="translated">그런 다음 다른 파일에서 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bfbe586e02fe7477b1253341534ea2bb9055af6" translate="yes" xml:space="preserve">
          <source>Then, in &lt;code&gt;myobject.h&lt;/code&gt;, the wrapper class inherits from &lt;code&gt;node::ObjectWrap&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;myobject.h&lt;/code&gt; 에서 래퍼 클래스는 &lt;code&gt;node::ObjectWrap&lt;/code&gt; 에서 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="90426bdb684915cfaf8776137e646120a460c1af" translate="yes" xml:space="preserve">
          <source>Then, the above function can be invoked from a native add-on using the following code:</source>
          <target state="translated">그런 다음 다음 코드를 사용하여 기본 애드온에서 위 함수를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73571d4285a148f8c850321e41ee7538063e9a0e" translate="yes" xml:space="preserve">
          <source>There are a few design considerations when declaring a module that may be loaded multiple times. The documentation of &lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;context-aware addons&lt;/a&gt; provides more details.</source>
          <target state="translated">여러 번로드 될 수있는 모듈을 선언 할 때 몇 가지 설계 고려 사항이 있습니다. &lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;상황 인식 애드온&lt;/a&gt; 설명서 는 자세한 내용을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ba61ede2581496949913fe44efcbd9784cfd62d9" translate="yes" xml:space="preserve">
          <source>There are a few special headers that should be noted.</source>
          <target state="translated">주목해야 할 몇 가지 특수 헤더가 있습니다.</target>
        </trans-unit>
        <trans-unit id="136d6e7557a4d34635921dd2991584bcb620088d" translate="yes" xml:space="preserve">
          <source>There are cases (for example, resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain N-API calls. If there is no other script on the stack the &lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt;&lt;code&gt;napi_open_callback_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt;&lt;code&gt;napi_close_callback_scope&lt;/code&gt;&lt;/a&gt; functions can be used to open/close the required scope.</source>
          <target state="translated">특정 N-API 호출을 수행 할 때 콜백과 연관된 범위와 동등한 범위를 가져야하는 경우 (예 : 약속 해결)가 있습니다. 스택에 다른 스크립트가 없으면 &lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt; &lt;code&gt;napi_open_callback_scope&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt; &lt;code&gt;napi_close_callback_scope&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 필요한 범위를 열거 나 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dbf25be1fb4ee565e1f98036a323d619cf26ae97" translate="yes" xml:space="preserve">
          <source>There are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; runtime runs multiple instances of Node.js in a single process. Each instance will have its own &lt;code&gt;require()&lt;/code&gt; cache, and thus each instance will need a native addon to behave correctly when loaded via &lt;code&gt;require()&lt;/code&gt;. From the addon's perspective, this means that it must support multiple initializations.</source>
          <target state="translated">Node.js 애드온을 여러 컨텍스트에서 여러 번로드해야하는 환경이 있습니다. 예를 들어, &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; 런타임은 단일 프로세스에서 Node.js의 여러 인스턴스를 실행합니다. 각 인스턴스에는 자체 &lt;code&gt;require()&lt;/code&gt; 캐시가 있으므로 &lt;code&gt;require()&lt;/code&gt; 를 통해로드 할 때 각 인스턴스가 올바르게 작동하려면 기본 애드온이 필요합니다 . 애드온의 관점에서 보면 다중 초기화를 지원해야합니다.</target>
        </trans-unit>
        <trans-unit id="02916d0d2e172dc9132cfe0f3dc885c486e1871f" translate="yes" xml:space="preserve">
          <source>There are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; runtime runs multiple instances of Node.js in a single process. Each instance will have its own &lt;code&gt;require()&lt;/code&gt; cache, and thus each instance will need a native addon to behave correctly when loaded via &lt;code&gt;require()&lt;/code&gt;. This means that the addon must support multiple initializations.</source>
          <target state="translated">Node.js 애드온을 여러 컨텍스트에서 여러 번로드해야하는 환경이 있습니다. 예를 들어 &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; 런타임은 단일 프로세스에서 Node.js의 여러 인스턴스를 실행합니다. 각 인스턴스에는 자체 &lt;code&gt;require()&lt;/code&gt; 캐시가 있으므로 각 인스턴스는 &lt;code&gt;require()&lt;/code&gt; 를 통해로드 될 때 올바르게 작동하기 위해 네이티브 애드온이 필요합니다 . 이는 애드온이 여러 초기화를 지원해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="efb4ff938e74b88ea0e6e30ab328bd442468ef8f" translate="yes" xml:space="preserve">
          <source>There are equivalents to the zlib options for Brotli-based streams, although these options have different ranges than the zlib ones:</source>
          <target state="translated">Brotli 기반 스트림에 대한 zlib 옵션과 동일하지만 이러한 옵션은 zlib와 다른 범위를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="9941613492520ff34cf0deb38e791800ee7a5c07" translate="yes" xml:space="preserve">
          <source>There are four fundamental stream types within Node.js:</source>
          <target state="translated">Node.js에는 네 가지 기본 스트림 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc4dbbcc7e66991e2b95ea58b7a4fa29fa2b495b" translate="yes" xml:space="preserve">
          <source>There are four kinds of headers that the Node.js QUIC implementation is capable of handling dependent entirely on known application protocol support:</source>
          <target state="translated">Node.js QUIC 구현이 전적으로 알려진 애플리케이션 프로토콜 지원에 따라 처리 할 수있는 4 가지 종류의 헤더가 있습니다.</target>
        </trans-unit>
        <trans-unit id="dde1500fca17353440ae8484822501b542d81fb1" translate="yes" xml:space="preserve">
          <source>There are four types of specifiers:</source>
          <target state="translated">지정자에는 네 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a931ff5d55f1c3afbe2f95105c6e77b48277bb0" translate="yes" xml:space="preserve">
          <source>There are many stream objects provided by Node.js. For instance, a &lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;request to an HTTP server&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; are both stream instances.</source>
          <target state="translated">Node.js가 제공하는 많은 스트림 객체가 있습니다. 예를 들어, &lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;HTTP 서버&lt;/a&gt; 및 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 에&lt;/a&gt; 대한 요청 은 모두 스트림 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="489828fe1e889442eeda5f8face869dde3d76a80" translate="yes" xml:space="preserve">
          <source>There are occasions where &lt;code&gt;napi_instanceof()&lt;/code&gt; is insufficient for ensuring that a JavaScript object is a wrapper for a certain native type. This is the case especially when wrapped JavaScript objects are passed back into the addon via static methods rather than as the &lt;code&gt;this&lt;/code&gt; value of prototype methods. In such cases there is a chance that they may be unwrapped incorrectly.</source>
          <target state="translated">경우가 있습니다 &lt;code&gt;napi_instanceof()&lt;/code&gt; 자바 스크립트 객체를 특정 기본 유형의 래퍼가 보장 불충분는. 이것은 특히 래핑 된 JavaScript 객체가 프로토 타입 메서드 의 &lt;code&gt;this&lt;/code&gt; 값 이 아닌 정적 메서드를 통해 애드온으로 다시 전달되는 경우 입니다. 이러한 경우 포장이 잘못 풀릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b08753e896dc3b6a7c1f8c73d6f29652afc9286" translate="yes" xml:space="preserve">
          <source>There are ongoing efforts to make the latter code possible.</source>
          <target state="translated">후자의 코드를 가능하게하기위한 지속적인 노력이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cca70f7a24329f2fb4b95221882a8404c5c05645" translate="yes" xml:space="preserve">
          <source>There are only 5 TLSv1.3 cipher suites:</source>
          <target state="translated">TLSv1.3 암호 스위트는 5 개뿐입니다.</target>
        </trans-unit>
        <trans-unit id="5431d0afa6129bcba426cef1e17c022c359e7b17" translate="yes" xml:space="preserve">
          <source>There are several options and other constants available for Brotli-based streams:</source>
          <target state="translated">Brotli 기반 스트림에 사용할 수있는 몇 가지 옵션 및 기타 상수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="42e16077da0035c3069c49856eb3033b4b72553d" translate="yes" xml:space="preserve">
          <source>There are several options that can be set on Brotli encoders, affecting compression efficiency and speed. Both the keys and the values can be accessed as properties of the &lt;code&gt;zlib.constants&lt;/code&gt; object.</source>
          <target state="translated">Brotli 엔코더에서 설정할 수있는 몇 가지 옵션이 있으며 압축 효율과 속도에 영향을줍니다. 키와 값 모두 &lt;code&gt;zlib.constants&lt;/code&gt; 오브젝트의 특성으로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="68a19ad87ed88b1d5cfb1b645ade3d15711bd59d" translate="yes" xml:space="preserve">
          <source>There are several types of error conditions that may arise when using the &lt;code&gt;http2&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;http2&lt;/code&gt; 모듈을 사용할 때 발생할 수있는 몇 가지 유형의 오류 조건이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26c7f747d478773cb0c7b9fd07d4c61acf3a4a1f" translate="yes" xml:space="preserve">
          <source>There are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call &lt;code&gt;readable.read(0)&lt;/code&gt;, which will always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">실제로 데이터를 소비하지 않고 기본적으로 읽을 수있는 스트림 메커니즘의 새로 고침을 트리거해야하는 경우가 있습니다. 이러한 경우 &lt;code&gt;readable.read(0)&lt;/code&gt; 을 호출 할 수 있으며 항상 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="dd9ef41883fe3bdd2c2207efb8d44bad0186fe1c" translate="yes" xml:space="preserve">
          <source>There are subtle consequences in choosing one over the other, please consult the &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;Implementation considerations section&lt;/a&gt; for more information.</source>
          <target state="translated">다른 것을 선택하면 미묘한 결과가 발생 합니다. 자세한 내용 은 &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;구현 고려 사항 섹션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6d6fbe184691d2e54bbf5609f598f34c9f95c95a" translate="yes" xml:space="preserve">
          <source>There are three options for implementing Addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless you need direct access to functionality which is not exposed by N-API, use N-API. Refer to the section &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">애드온을 구현하기위한 세 가지 옵션이 있습니다 : N-API, nan 또는 내부 V8, libuv 및 Node.js 라이브러리의 직접 사용. N-API에 의해 노출되지 않은 기능에 직접 액세스해야하는 경우가 아니라면 N-API를 사용하십시오. &lt;a href=&quot;n-api&quot;&gt;N-API에&lt;/a&gt; 대한 자세한 내용은 C / C ++ 애드온-N-API 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a84e67ac6afa19b0bb7e32d3243ac6912e617a6" translate="yes" xml:space="preserve">
          <source>There are three options for implementing addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless there is a need for direct access to functionality which is not exposed by N-API, use N-API. Refer to &lt;a href=&quot;n-api&quot;&gt;C/C++ addons with N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">애드온 구현에는 N-API, nan 또는 내부 V8, libuv 및 Node.js 라이브러리의 직접 사용의 세 가지 옵션이 있습니다. N-API에 의해 노출되지 않는 기능에 직접 액세스 할 필요가없는 경우 N-API를 사용하십시오. &lt;a href=&quot;n-api&quot;&gt;N-API에&lt;/a&gt; 대한 자세한 내용은 N-API 가있는 C / C ++ 애드온을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="251427a9d9da4e15ad8dfa31a1e443fc8d8344b9" translate="yes" xml:space="preserve">
          <source>There are three types of specifiers:</source>
          <target state="translated">세 가지 유형의 지정자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e769f43d8b2c2a24eea5250cfae5e60ed961a3d5" translate="yes" xml:space="preserve">
          <source>There are two key differences between the Node.js &lt;code&gt;EventTarget&lt;/code&gt; and the &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt; Web API&lt;/a&gt;:</source>
          <target state="translated">Node.js &lt;code&gt;EventTarget&lt;/code&gt; 과 &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; 웹 API&lt;/a&gt; 에는 두 가지 주요 차이점이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9db4014699f46bd5890e62e4dba34c251b486d78" translate="yes" xml:space="preserve">
          <source>There are two ways to create new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instances from a &lt;code&gt;Buffer&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 에서 새 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 인스턴스 를 만드는 방법에는 두 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8f793dc4fcaeca43b4ba873686274c2e8f8925a7" translate="yes" xml:space="preserve">
          <source>There can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count.</source>
          <target state="translated">동일한 객체를 참조하는 여러 개의 영구 참조가 생성 될 수 있으며, 각각의 객체는 개별 개수를 기준으로 객체를 활성 상태로 유지하거나 유지하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0fe3f1751523750e75dcc6278c56537ba6011fcb" translate="yes" xml:space="preserve">
          <source>There is a special case when sending a &lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; message. Messages containing a &lt;code&gt;NODE_&lt;/code&gt; prefix in the &lt;code&gt;cmd&lt;/code&gt; property are reserved for use within Node.js core and will not be emitted in the child's &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Rather, such messages are emitted using the &lt;code&gt;'internalMessage'&lt;/code&gt; event and are consumed internally by Node.js. Applications should avoid using such messages or listening for &lt;code&gt;'internalMessage'&lt;/code&gt; events as it is subject to change without notice.</source>
          <target state="translated">&lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; 메시지를 보낼 때 특별한 경우 가 있습니다. &lt;code&gt;cmd&lt;/code&gt; 특성 에 &lt;code&gt;NODE_&lt;/code&gt; 접 두부를 포함하는 메시지 는 Node.js 코어 내에서 사용하도록 예약되어 있으며 하위의 &lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt; 이벤트 에서 생성되지 않습니다 . 오히려 이러한 메시지는 &lt;code&gt;'internalMessage'&lt;/code&gt; 이벤트를 사용하여 생성 되며 Node.js에 의해 내부적으로 사용됩니다. 응용 프로그램은 예고없이 변경 될 수 있으므로 이러한 메시지를 사용하거나 &lt;code&gt;'internalMessage'&lt;/code&gt; 이벤트를 수신하지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="7f4a67800306ac64b920c2be0c83ae4d3007f584" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;PROMISE&lt;/code&gt; resource type, which is used to track &lt;code&gt;Promise&lt;/code&gt; instances and asynchronous work scheduled by them.</source>
          <target state="translated">&lt;code&gt;PROMISE&lt;/code&gt; 리소스 유형 도 있습니다.이 리소스 유형은 &lt;code&gt;Promise&lt;/code&gt; 인스턴스 및 예약 된 비동기 작업 을 추적하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e31048695af7ec9e8cc2c7c604352f23bc3184d4" translate="yes" xml:space="preserve">
          <source>There is an edge case worth noting when using the &lt;code&gt;events.once()&lt;/code&gt; function to await multiple events emitted on in the same batch of &lt;code&gt;process.nextTick()&lt;/code&gt; operations, or whenever multiple events are emitted synchronously. Specifically, because the &lt;code&gt;process.nextTick()&lt;/code&gt; queue is drained before the &lt;code&gt;Promise&lt;/code&gt; microtask queue, and because &lt;code&gt;EventEmitter&lt;/code&gt; emits all events synchronously, it is possible for &lt;code&gt;events.once()&lt;/code&gt; to miss an event.</source>
          <target state="translated">&lt;code&gt;events.once()&lt;/code&gt; 함수를 사용하여 &lt;code&gt;process.nextTick()&lt;/code&gt; 작업 의 동일한 일괄 처리에서 생성 된 여러 이벤트를 대기 하거나 여러 이벤트가 동 기적으로 생성 될 때마다 주목할 가치가있는 경우가 있습니다 . 특히, &lt;code&gt;process.nextTick()&lt;/code&gt; 큐가 &lt;code&gt;Promise&lt;/code&gt; 마이크로 태스크 큐 보다 먼저 비워 지고 &lt;code&gt;EventEmitter&lt;/code&gt; 가 모든 이벤트를 동 기적으로 방출 하기 때문에 &lt;code&gt;events.once()&lt;/code&gt; 가 이벤트를 놓칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="741d73c54f957fe61e35c6abd8637dba21b785cc" translate="yes" xml:space="preserve">
          <source>There is no equivalent to this API in browsers.</source>
          <target state="translated">브라우저에는이 API에 해당하는 것이 없습니다.</target>
        </trans-unit>
        <trans-unit id="3a7ccafeacce74e97b6782160f11feb38555669c" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using asynchronous methods. So the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation may complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">비동기 메서드를 사용할 때는 순서가 보장되지 않습니다. 다음은 오류 때문에하는 경향이있다 그래서 &lt;code&gt;fs.stat()&lt;/code&gt; 작업이 전에 완료 할 수 &lt;code&gt;fs.rename()&lt;/code&gt; 작동 :</target>
        </trans-unit>
        <trans-unit id="70935f1d3d5e4fd62d42c2c159e6aea9b6c95079" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using either the callback or promise-based methods. For example, the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation might complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">콜백 또는 약속 기반 메서드를 사용할 때 보장 된 순서는 없습니다. 예를 들어, 다음은 오류 때문에하는 경향이 &lt;code&gt;fs.stat()&lt;/code&gt; 작업이 전에 완료 할 수 &lt;code&gt;fs.rename()&lt;/code&gt; 작동 :</target>
        </trans-unit>
        <trans-unit id="9499af4d83f7a3933b926f5089a91e801e6f9b3b" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time &amp;mdash; possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">거부를 항상 처리 할 수 있는 &lt;code&gt;Promise&lt;/code&gt; 체인에 대한 최상위 개념은 없습니다 . 본질적으로 비동기식이기 때문에 &lt;code&gt;Promise&lt;/code&gt; 거부는 미래의 시점에서 처리 될 수 있습니다. 아마도 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 이벤트가 발생 하는 데 걸리는 이벤트 루프 턴보다 훨씬 늦습니다.</target>
        </trans-unit>
        <trans-unit id="3485b253ac4903049655572c6b7db990c6f6ad19" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time, possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">거부를 항상 처리 할 수 있는 &lt;code&gt;Promise&lt;/code&gt; 체인에 대한 최상위 개념은 없습니다 . 본질적으로 비동기식이기 때문에 &lt;code&gt;Promise&lt;/code&gt; 거부는 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 이벤트가 발생 하는 데 걸리는 이벤트 루프 턴보다 훨씬 늦게 미래 시점에서 처리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d41af3e735ab2e346b33ec05065393fa3da84547" translate="yes" xml:space="preserve">
          <source>There is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a &lt;code&gt;Hash&lt;/code&gt; stream will only ever have a single chunk of output which is provided when the input is ended. A &lt;code&gt;zlib&lt;/code&gt; stream will produce output that is either much smaller or much larger than its input.</source>
          <target state="translated">출력이 입력과 동일한 크기, 동일한 수의 청크 또는 동시에 도착할 필요는 없습니다. 예를 들어, &lt;code&gt;Hash&lt;/code&gt; 스트림에는 입력이 끝날 때 제공되는 단일 출력 청크 만 있습니다. &lt;code&gt;zlib&lt;/code&gt; 스트림 중 더 작은 또는 입력보다 더 큰 출력을 생산한다.</target>
        </trans-unit>
        <trans-unit id="f6752fbe1232a75370c52187c18b0bfebe5cef5a" translate="yes" xml:space="preserve">
          <source>There is no semi-colon after &lt;code&gt;NODE_MODULE&lt;/code&gt; as it's not a function (see &lt;code&gt;node.h&lt;/code&gt;).</source>
          <target state="translated">함수가 &lt;code&gt;NODE_MODULE&lt;/code&gt; 로 NODE_MODULE 뒤에 세미콜론이 없습니다 ( &lt;code&gt;node.h&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="1761405f7560e0613a6cad3aca984566accc5d24" translate="yes" xml:space="preserve">
          <source>There is no way to prevent the exiting of the event loop at this point, and once all &lt;code&gt;'exit'&lt;/code&gt; listeners have finished running the Node.js process will terminate.</source>
          <target state="translated">이 시점에서 이벤트 루프가 종료되는 것을 막을 방법이 없으며 모든 &lt;code&gt;'exit'&lt;/code&gt; 리스너가 실행을 마치면 Node.js 프로세스가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="c8d9cd97680b932da70dad66e0e134e8da83ab30" translate="yes" xml:space="preserve">
          <source>There is not normally a reason to call this method because &lt;code&gt;ECDH&lt;/code&gt; only requires a private key and the other party's public key to compute the shared secret. Typically either &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; will be called. The &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; method attempts to generate the public point/key associated with the private key being set.</source>
          <target state="translated">&lt;code&gt;ECDH&lt;/code&gt; 가 공유 비밀을 계산하기 위해 개인 키와 상대방의 공개 키만 필요 하기 때문에이 메소드를 호출 할 이유는 없습니다 . 일반적으로 &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt; &lt;code&gt;ecdh.generateKeys()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 가 호출됩니다. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 메소드 시도는 개인 키의 존재 세트와 연관된 공개 포인트 / 키를 생성한다.</target>
        </trans-unit>
        <trans-unit id="3f3585e14ee5cd0674d2bfffe8a62484838e8f1d" translate="yes" xml:space="preserve">
          <source>There may be a delay between the &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'exit'&lt;/code&gt; events. These events can be used to detect if the process is stuck in a cleanup or if there are long-living connections.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; 와 &lt;code&gt;'exit'&lt;/code&gt; 이벤트 사이에 지연이있을 수 있습니다 . 이러한 이벤트는 프로세스가 정리에 걸리는지 또는 오래 지속되는 연결이 있는지 감지하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bba3543dee9ea91f94206f53de987930f9874179" translate="yes" xml:space="preserve">
          <source>There was a bug in Node.js or incorrect usage of Node.js internals. To fix the error, open an issue at &lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt;.</source>
          <target state="translated">Node.js에 버그가 있거나 Node.js 내부를 잘못 사용했습니다. 오류를 해결하려면 &lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt; 에서 문제를여십시오 .</target>
        </trans-unit>
        <trans-unit id="db2fa69bb8b4d9e6a5a4775222f61ead5ed51450" translate="yes" xml:space="preserve">
          <source>There was an attempt to use a &lt;code&gt;MessagePort&lt;/code&gt; instance in a closed state, usually after &lt;code&gt;.close()&lt;/code&gt; has been called.</source>
          <target state="translated">일반적으로 &lt;code&gt;.close()&lt;/code&gt; 가 호출 된 후 닫힌 상태에서 &lt;code&gt;MessagePort&lt;/code&gt; 인스턴스 를 사용하려고했습니다 .</target>
        </trans-unit>
        <trans-unit id="8c2872699c52fca493a736da697cd1c55a7b7f65" translate="yes" xml:space="preserve">
          <source>Therefore to read a file's whole contents from a &lt;code&gt;readable&lt;/code&gt;, it is necessary to collect chunks across multiple &lt;code&gt;'readable'&lt;/code&gt; events:</source>
          <target state="translated">따라서에서 파일의 전체 내용을 읽어 &lt;code&gt;readable&lt;/code&gt; , 여러 걸쳐 덩어리를 수집 할 필요가있다 &lt;code&gt;'readable'&lt;/code&gt; 이벤트 :</target>
        </trans-unit>
        <trans-unit id="754f342c55d3348d9516f90760098a1bea3cfcb1" translate="yes" xml:space="preserve">
          <source>These APIs provide the type &lt;code&gt;napi_threadsafe_function&lt;/code&gt; as well as APIs to create, destroy, and call objects of this type. &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; creates a persistent reference to a &lt;code&gt;napi_value&lt;/code&gt; that holds a JavaScript function which can be called from multiple threads. The calls happen asynchronously. This means that values with which the JavaScript callback is to be called will be placed in a queue, and, for each value in the queue, a call will eventually be made to the JavaScript function.</source>
          <target state="translated">이 API는 &lt;code&gt;napi_threadsafe_function&lt;/code&gt; 유형 과이 유형의 오브젝트 를 작성, 파기 및 호출 하는 API를 제공합니다 . &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; 은 여러 스레드에서 호출 할 수있는 JavaScript 함수를 보유하는 &lt;code&gt;napi_value&lt;/code&gt; 에 대한 지속적 참조를 작성 합니다. 호출은 비동기 적으로 발생합니다. 이는 JavaScript 콜백이 호출 될 값이 큐에 배치되고 큐의 각 값에 대해 결국 JavaScript 함수가 호출됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a36e985e57f05c7e84c751dd0c4673cc6bb7e955" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following:</source>
          <target state="translated">이러한 API는 다음 중 하나를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="ab3247d3394f4459aabb0d5e7cfa8d13e0f7db8b" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following: 1. Coerce JavaScript values to specific JavaScript types (such as &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;). 2. Check the type of a JavaScript value. 3. Check for equality between two JavaScript values.</source>
          <target state="translated">이 API는 다음 중 하나를 수행하도록 지원합니다. 1. JavaScript 값을 특정 JavaScript 유형 (예 : &lt;code&gt;Number&lt;/code&gt; 또는 &lt;code&gt;String&lt;/code&gt; ) 으로 강제 변환하십시오 . 2. JavaScript 값의 유형을 확인하십시오. 3. 두 JavaScript 값이 동일한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f7a10234d3fe5a51cc4325ae088318cfc712a583" translate="yes" xml:space="preserve">
          <source>These CommonJS variables are not available in ES modules.</source>
          <target state="translated">이러한 CommonJS 변수는 ES 모듈에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="749928e253ba002f7186e912db98b776c93c0d85" translate="yes" xml:space="preserve">
          <source>These advanced options are available for controlling decompression:</source>
          <target state="translated">다음과 같은 고급 옵션을 사용하여 감압을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b9f62edc3aaf20d90f4845d04676a42b04260ea" translate="yes" xml:space="preserve">
          <source>These are mostly for historic reasons.</source>
          <target state="translated">이것들은 대부분 역사적인 이유로 인한 것입니다.</target>
        </trans-unit>
        <trans-unit id="487b22b66f8d184a53a9dcfbab6f9a187dd0c70a" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backward incompatibility, but they are also expected by some users.</source>
          <target state="translated">이러한 동작은 부분적으로 역사적 이유 때문입니다. 변경하면 이전 버전과의 비 호환성이 생성되지만 일부 사용자도 예상합니다.</target>
        </trans-unit>
        <trans-unit id="f723d23d902d3dc9557352556e6b5d454055d450" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backwards incompatibility, but they are also expected by some users.</source>
          <target state="translated">이러한 동작은 변경으로 인해 이전 버전과의 비 호환성을 야기 할 수 있지만 일부 사용자에게도 예상되므로 역사적 이유로 일부 있습니다.</target>
        </trans-unit>
        <trans-unit id="6601594dc0d69faf63c5eff08f5605677bfc46ff" translate="yes" xml:space="preserve">
          <source>These categories correlate exactly with the equivalent HTTP concepts:</source>
          <target state="translated">이러한 범주는 상응하는 HTTP 개념과 정확히 연관됩니다.</target>
        </trans-unit>
        <trans-unit id="6a5b136b6b60c4ed00d8df2d82c0a6a7ad030249" translate="yes" xml:space="preserve">
          <source>These errors have never been released, but had been present on master between releases.</source>
          <target state="translated">이 오류는 릴리스 된 적이 없지만 릴리스간에 마스터에 존재했습니다.</target>
        </trans-unit>
        <trans-unit id="d444a6c59b18503b6828306190b3da244c05eaa9" translate="yes" xml:space="preserve">
          <source>These functions are implemented quite differently than &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;. They do not use &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; and they &lt;em&gt;always&lt;/em&gt; perform a DNS query on the network. This network communication is always done asynchronously, and does not use libuv's threadpool.</source>
          <target state="translated">이러한 함수는 &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 과는 상당히 다르게 구현 됩니다. 그들은 사용하지 마십시오 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt; 그들은 &lt;em&gt;항상&lt;/em&gt; 네트워크의 DNS 쿼리를 수행합니다. 이 네트워크 통신은 항상 비동기 적으로 이루어지며 libuv의 스레드 풀을 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="24cdde9c4ce42694fdfee71a149f5983befb138f" translate="yes" xml:space="preserve">
          <source>These functions implement the following interfaces:</source>
          <target state="translated">이러한 기능은 다음과 같은 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="067e9ba51bba0fff71ca73b5284b6b724824a791" translate="yes" xml:space="preserve">
          <source>These objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the &lt;a href=&quot;modules&quot;&gt;module system documentation&lt;/a&gt;:</source>
          <target state="translated">이러한 객체는 모든 모듈에서 사용할 수 있습니다. 다음 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. 그것들은 모듈의 범위에만 존재합니다. &lt;a href=&quot;modules&quot;&gt;모듈 시스템 문서를&lt;/a&gt; 참조하십시오 :</target>
        </trans-unit>
        <trans-unit id="a92a2040e1759234554eb3d95876ef117287affb" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;.</source>
          <target state="translated">이 stat 객체는 &lt;code&gt;fs.Stat&lt;/code&gt; 의 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="81ffaa5610a923a366ff2fb68c7b7ae7e89cef81" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;. If the &lt;code&gt;bigint&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, the numeric values in these objects are specified as &lt;code&gt;BigInt&lt;/code&gt;s.</source>
          <target state="translated">이러한 stat 객체는 &lt;code&gt;fs.Stat&lt;/code&gt; 의 인스턴스입니다 . 경우 &lt;code&gt;bigint&lt;/code&gt; 옵션은 &lt;code&gt;true&lt;/code&gt; , 이러한 개체의 숫자 값으로 지정됩니다 &lt;code&gt;BigInt&lt;/code&gt; 의.</target>
        </trans-unit>
        <trans-unit id="a7f5c6bb153f7ecd9533f0a1d47aa3444a5f2641" translate="yes" xml:space="preserve">
          <source>These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals:</source>
          <target state="translated">이 시간은 과거의 임의 시간과 관련이 있으며 시간과 관련이 없으므로 클럭 드리프트가 적용되지 않습니다. 주요 용도는 간격 사이의 성능을 측정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3a4c89847fdcc01daf5d153c985d924f1c40748c" translate="yes" xml:space="preserve">
          <source>These will also be available using the &lt;code&gt;quicsession.servername&lt;/code&gt;, &lt;code&gt;quicsession.alpnProtocol&lt;/code&gt;, and &lt;code&gt;quicsession.cipher&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;quicsession.servername&lt;/code&gt; , &lt;code&gt;quicsession.alpnProtocol&lt;/code&gt; 및 &lt;code&gt;quicsession.cipher&lt;/code&gt; 속성을 사용하여 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0406dde620b7e64bbd32e4cb8c0bbc3121260bb2" translate="yes" xml:space="preserve">
          <source>They are used internally by &lt;a href=&quot;console#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">이들은 각각 &lt;a href=&quot;console#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;console#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt; 의해 내부적으로 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="b30b2dac4cfcbca285a7b7116de61f5f1237d363" translate="yes" xml:space="preserve">
          <source>They do not use the same set of configuration files than what &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses. For instance, &lt;em&gt;they do not use the configuration from &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 이 사용하는 것과 동일한 구성 파일 세트를 사용하지 않습니다 . 예를 들어, &lt;em&gt;그들은 &lt;code&gt;/etc/hosts&lt;/code&gt; &lt;/em&gt;&lt;em&gt; 의 구성을 사용하지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2ea56235428b28cef1f2f9acfba69b76b619221b" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">이 &quot;Hello world&quot;예제는 C ++로 작성된 간단한 Addon이며 다음 JavaScript 코드와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="692dfc84db615cfec92e46e7af4aeebc4271f4fe" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">이 &quot;Hello world&quot;예제는 다음 JavaScript 코드와 동일한 C ++로 작성된 간단한 추가 기능입니다.</target>
        </trans-unit>
        <trans-unit id="b9a3d5020dd4ab8583f35392a361607c39fac607" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;'busy'&lt;/code&gt; event may be emitted multiple times.</source>
          <target state="translated">이 &lt;code&gt;'busy'&lt;/code&gt; 이벤트는 여러 번 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66e9a4260b22fdad1a565eaa4103d9039fdbf381" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;ArrayBuffer&lt;/code&gt; is not guaranteed to correspond exactly to the original &lt;code&gt;Buffer&lt;/code&gt;. See the notes on &lt;code&gt;buf.byteOffset&lt;/code&gt; for details.</source>
          <target state="translated">이 &lt;code&gt;ArrayBuffer&lt;/code&gt; 는 원래 &lt;code&gt;Buffer&lt;/code&gt; 와 정확히 일치한다고 보장 할 수 없습니다 . 자세한 내용은 &lt;code&gt;buf.byteOffset&lt;/code&gt; 에 대한 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2512370bd56df49b594b7a713133b58f497c3cd9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Error&lt;/code&gt; is thrown when a read is attempted on a TTY &lt;code&gt;WriteStream&lt;/code&gt;, such as &lt;code&gt;process.stdout.on('data')&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Error&lt;/code&gt; 는 &lt;code&gt;process.stdout.on('data')&lt;/code&gt; 와 같은 TTY &lt;code&gt;WriteStream&lt;/code&gt; 에서 읽기를 시도 할 때 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="39742e84897b18f0eedc2af5e9fd8236a7c65b9b" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 객체를 할당 하고 전달 된 버퍼가 지원하는 데이터로 초기화합니다. 이것은 여전히 ​​완전히 지원되는 데이터 구조이지만 대부분의 경우 &lt;code&gt;TypedArray&lt;/code&gt; 를 사용 하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="9f9f6383f8d100211478dc2ef9a8cec62954908a" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 객체를 할당 하고 전달 된 버퍼에서 복사 한 데이터로 초기화합니다. 이것은 여전히 ​​완전히 지원되는 데이터 구조이지만 대부분의 경우 &lt;code&gt;TypedArray&lt;/code&gt; 를 사용 하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="735a91d83874cde7676b3e25ee0191cf41805cb1" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 객체를 할당 합니다. 이것은 여전히 ​​완전히 지원되는 데이터 구조이지만 대부분의 경우 &lt;code&gt;TypedArray&lt;/code&gt; 를 사용 하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="6b77dc094889eb2692e801516cd866717730e4b3" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Date&lt;/code&gt; 객체를 할당 합니다.</target>
        </trans-unit>
        <trans-unit id="c196cb0b40fe69112ca66200c4a74b7260d08ead" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code using &lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt;&lt;code&gt;napi_get_value_external&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 API는 외부 데이터가 첨부 된 JavaScript 값을 할당합니다. 자바 스크립트 코드를 통해 외부 데이터를 전달하는 데 사용되므로 나중에 &lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt; &lt;code&gt;napi_get_value_external&lt;/code&gt; 을&lt;/a&gt; 사용하여 네이티브 코드로 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7998ea99d1cc838811e0d8df86d28e4a62bc8591" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code. The API allows the caller to pass in a finalize callback, in case the underlying native resource needs to be cleaned up when the external JavaScript value gets collected.</source>
          <target state="translated">이 API는 외부 데이터가 첨부 된 JavaScript 값을 할당합니다. 이것은 JavaScript 코드를 통해 외부 데이터를 전달하는 데 사용되므로 나중에 기본 코드로 검색 할 수 있습니다. API는 외부 JavaScript 값이 수집 될 때 기본 고유 자원을 정리해야하는 경우 호출자가 최종 콜백을 전달할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="363266f752f8dea9471bad2f288fed6c4c06c654" translate="yes" xml:space="preserve">
          <source>This API allocates a default JavaScript &lt;code&gt;Object&lt;/code&gt;. It is the equivalent of doing &lt;code&gt;new Object()&lt;/code&gt; in JavaScript.</source>
          <target state="translated">이 API는 기본 JavaScript &lt;code&gt;Object&lt;/code&gt; 할당합니다 . JavaScript에서 &lt;code&gt;new Object()&lt;/code&gt; 를 수행하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a39488fe93d490d5976e523becbfa7322dd2f6d7" translate="yes" xml:space="preserve">
          <source>This API allocates a work object that is used to execute logic asynchronously. It should be freed using &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt; once the work is no longer required.</source>
          <target state="translated">이 API는 논리를 비동기 적으로 실행하는 데 사용되는 작업 오브젝트를 할당합니다. 작업이 더 이상 필요하지 않으면 &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt; &lt;code&gt;napi_delete_async_work&lt;/code&gt; 를&lt;/a&gt; 사용하여 해제해야 합니다.</target>
        </trans-unit>
        <trans-unit id="d63e8ba62f11bb852241a2b0aa7b58d201a30b7b" translate="yes" xml:space="preserve">
          <source>This API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling &lt;em&gt;into&lt;/em&gt; the add-on's native code &lt;em&gt;from&lt;/em&gt; JavaScript.</source>
          <target state="translated">이 API를 사용하면 추가 기능 작성자가 고유 코드로 함수 객체를 작성할 수 있습니다. 이 호출 허용하는 기본 메커니즘입니다 &lt;em&gt;에&lt;/em&gt; 부가 기능의 네이티브 코드 &lt;em&gt;에서&lt;/em&gt; 자바 스크립트.</target>
        </trans-unit>
        <trans-unit id="8dd5fc62dd12610ddf00da4580f78086ea7a8a67" translate="yes" xml:space="preserve">
          <source>This API associates &lt;code&gt;data&lt;/code&gt; with the currently running Agent. &lt;code&gt;data&lt;/code&gt; can later be retrieved using &lt;code&gt;napi_get_instance_data()&lt;/code&gt;. Any existing data associated with the currently running Agent which was set by means of a previous call to &lt;code&gt;napi_set_instance_data()&lt;/code&gt; will be overwritten. If a &lt;code&gt;finalize_cb&lt;/code&gt; was provided by the previous call, it will not be called.</source>
          <target state="translated">이 API 는 현재 실행중인 에이전트 와 &lt;code&gt;data&lt;/code&gt; 를 연결 합니다 . 나중에 &lt;code&gt;napi_get_instance_data()&lt;/code&gt; 사용하여 &lt;code&gt;data&lt;/code&gt; 를 검색 할 수 있습니다 . 이전에 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; 호출하여 설정 한 현재 실행중인 에이전트와 관련된 기존 데이터를 덮어 씁니다. 경우 &lt;code&gt;finalize_cb&lt;/code&gt; 이 이전 호출에 의해 제공되었다, 그것은 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb9807accb784346da4b294170dca41195385db4" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the &lt;code&gt;key&lt;/code&gt; own property from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;object&lt;/code&gt; 에서 &lt;code&gt;key&lt;/code&gt; 자체 속성 을 삭제하려고 시도 합니다 .</target>
        </trans-unit>
        <trans-unit id="c14effd61c957bf8b764c352d4e546b6d39372bb" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the specified &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">이 API는 지정된 삭제하려고 시도 &lt;code&gt;index&lt;/code&gt; 에서 &lt;code&gt;object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eefd9d0b3eff1797f4ec8fa9a473e7edc0d2a2cb" translate="yes" xml:space="preserve">
          <source>This API can be called even if there is a pending JavaScript exception.</source>
          <target state="translated">보류중인 JavaScript 예외가있는 경우에도이 API를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2de8f84612348b342d10646507923c0aa5b2c0a3" translate="yes" xml:space="preserve">
          <source>This API cancels queued work if it has not yet been started. If it has already started executing, it cannot be cancelled and &lt;code&gt;napi_generic_failure&lt;/code&gt; will be returned. If successful, the &lt;code&gt;complete&lt;/code&gt; callback will be invoked with a status value of &lt;code&gt;napi_cancelled&lt;/code&gt;. The work should not be deleted before the &lt;code&gt;complete&lt;/code&gt; callback invocation, even if it has been successfully cancelled.</source>
          <target state="translated">이 API는 대기중인 작업이 아직 시작되지 않은 경우 취소합니다. 이미 실행을 시작한 경우 취소 할 수 없으며 &lt;code&gt;napi_generic_failure&lt;/code&gt; 가 반환됩니다. 성공 하면 상태 값 &lt;code&gt;napi_cancelled&lt;/code&gt; 로 &lt;code&gt;complete&lt;/code&gt; 콜백이 호출됩니다 . 콜백을 &lt;code&gt;complete&lt;/code&gt; 호출 하기 전에 작업 이 성공적으로 취소 되더라도 작업을 삭제해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="57431dbca7e08b81d45fb5a6037ae282b5c085fc" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named own property. &lt;code&gt;key&lt;/code&gt; must be a string or a &lt;code&gt;Symbol&lt;/code&gt;, or an error will be thrown. N-API will not perform any conversion between data types.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 명명 된 고유 속성 이 있는지 확인합니다 . &lt;code&gt;key&lt;/code&gt; 는 문자열 또는 &lt;code&gt;Symbol&lt;/code&gt; 이어야합니다. 그렇지 않으면 오류가 발생합니다. N-API는 데이터 유형간에 변환을 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="df00668a39c6c8f23284d619d34702ee2bdec177" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named property.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 명명 된 속성 이 있는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="77017a1b76496c7920bf9d3ddbbe51f4eec0e781" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 &lt;code&gt;DataView&lt;/code&gt; 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="85cd50d093b265fd67db2b9b8fc771fec5f784aa" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a buffer.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 버퍼 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="8b04720a7d7ea49d3d60de79014fb69fa8491a06" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a date.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 날짜 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="5e43a0f69097cd9621e0e8616fc96ff13206b854" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a typed array.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 유형이 지정된 배열인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b1512ceb15a56445f12edb557bed0d491dd21b2b" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 &lt;code&gt;Error&lt;/code&gt; 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="23864b8fd9618610d06ad4c9de555c8fc662e0f9" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an array buffer.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 배열 버퍼인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e8c7e3fe1e7df4ee3d1c160136ec8c8b57a30461" translate="yes" xml:space="preserve">
          <source>This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.</source>
          <target state="translated">이 API는 전달 된 범위를 닫습니다. 범위는 생성 된 역순으로 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="5d1aae2a2f436ea48d9c7acff12819c96b4925cc" translate="yes" xml:space="preserve">
          <source>This API converts a single &lt;code&gt;BigInt&lt;/code&gt; value into a sign bit, 64-bit little-endian array, and the number of elements in the array. &lt;code&gt;sign_bit&lt;/code&gt; and &lt;code&gt;words&lt;/code&gt; may be both set to &lt;code&gt;NULL&lt;/code&gt;, in order to get only &lt;code&gt;word_count&lt;/code&gt;.</source>
          <target state="translated">이 API는 단일 &lt;code&gt;BigInt&lt;/code&gt; 값을 부호 비트, 64 비트 리틀 엔디안 배열 및 배열의 ​​요소 수로 변환합니다. &lt;code&gt;word_count&lt;/code&gt; 만 얻기 위해 &lt;code&gt;sign_bit&lt;/code&gt; 및 &lt;code&gt;words&lt;/code&gt; 가 모두 &lt;code&gt;NULL&lt;/code&gt; 로 설정 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce0e25291cf2e6b501788d49eeebff5721c4a9c8" translate="yes" xml:space="preserve">
          <source>This API converts an array of unsigned 64-bit words into a single &lt;code&gt;BigInt&lt;/code&gt; value.</source>
          <target state="translated">이 API는 부호없는 64 비트 단어 배열을 단일 &lt;code&gt;BigInt&lt;/code&gt; 값으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="4dacc40682bb28b50a6f0c8a84eaeb75999988ac" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;int64_t&lt;/code&gt; 유형을 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 유형으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="39a65c954085e0b75e67379733eefa4137788a57" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;uint64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;uint64_t&lt;/code&gt; 유형을 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 유형으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="872b6fbfcb10c1766c01c033a11510d812c343c5" translate="yes" xml:space="preserve">
          <source>This API create a new reference with the specified reference count to the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 지정된 참조 횟수를 사용하여 새 참조를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="bb7a9e00501915d315dc9db028de926ed4735c81" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;DataView&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;DataView&lt;/code&gt; objects provide an array-like view over an underlying data buffer, but one which allows items of different size and type in the &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">이 API 는 기존 &lt;code&gt;ArrayBuffer&lt;/code&gt; 위에 JavaScript &lt;code&gt;DataView&lt;/code&gt; 객체를 만듭니다 . &lt;code&gt;DataView&lt;/code&gt; 객체는 기본 데이터 버퍼에 대해 배열과 유사한 뷰를 제공하지만 &lt;code&gt;ArrayBuffer&lt;/code&gt; 에서 크기와 유형이 다른 항목을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="c2689ecf9af46ba39953d951567d6520bf653ba1" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF16-LE-encoded C string. The native string is copied.</source>
          <target state="translated">이 API 는 UTF16-LE로 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;String&lt;/code&gt; 객체를 만듭니다 . 기본 문자열이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="5d7c7b178115d5c2e4337be18e30534c47276b07" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF8-encoded C string. The native string is copied.</source>
          <target state="translated">이 API 는 UTF8로 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;String&lt;/code&gt; 객체를 만듭니다 . 기본 문자열이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="f8feb6065755866e5b518ec3409fce83787d5f3d" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from an ISO-8859-1-encoded C string. The native string is copied.</source>
          <target state="translated">이 API 는 ISO-8859-1- 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;String&lt;/code&gt; 객체를 만듭니다 . 기본 문자열이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="78e932bf060993a76782b2993b8d0e5d90ca6cbe" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;Symbol&lt;/code&gt; object from a UTF8-encoded C string.</source>
          <target state="translated">이 API 는 UTF8로 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;Symbol&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="dd3e74bf0ee6bf2199a6c976eeb4432bd41d78cf" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;TypedArray&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;TypedArray&lt;/code&gt; objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype.</source>
          <target state="translated">이 API 는 기존 &lt;code&gt;ArrayBuffer&lt;/code&gt; 위에 JavaScript &lt;code&gt;TypedArray&lt;/code&gt; 객체를 만듭니다 . &lt;code&gt;TypedArray&lt;/code&gt; 객체는 각 요소가 동일한 기본 이진 스칼라 데이터 형식을 갖는 기본 데이터 버퍼에 대해 배열과 같은 뷰를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="eb7871e3b46d5ec2a3996e81a299debc3b8ecc76" translate="yes" xml:space="preserve">
          <source>This API creates a deferred object and a JavaScript promise.</source>
          <target state="translated">이 API는 지연된 오브젝트와 JavaScript 약속을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="25573620c7961f244c4fcf1ec2dc339f590285c9" translate="yes" xml:space="preserve">
          <source>This API decrements the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">이 API는 전달 된 참조의 참조 수를 줄이고 결과 참조 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8eff332e350a0e574536ca03420ca38be0ab632a" translate="yes" xml:space="preserve">
          <source>This API deletes the reference passed in.</source>
          <target state="translated">이 API는 전달 된 참조를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="23a2cb69e25f56f3c362034320b9ab3929281f96" translate="yes" xml:space="preserve">
          <source>This API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.</source>
          <target state="translated">이 API는 윤초를 관찰하지 않습니다. ECMAScript는 POSIX 시간 사양과 일치하므로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="dd6fca0a073178b69d2f39a3d83f5c7410fddeac" translate="yes" xml:space="preserve">
          <source>This API frees a previously allocated work object.</source>
          <target state="translated">이 API는 이전에 할당 된 작업 오브젝트를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="dd8d73286c93051c5ede6fc340006b9e8edcb1b1" translate="yes" xml:space="preserve">
          <source>This API gets the element at the requested index.</source>
          <target state="translated">이 API는 요청 된 인덱스에서 요소를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7f0b9e72b1ac3277c4602c64072072238f09ab14" translate="yes" xml:space="preserve">
          <source>This API gets the requested property from the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에서 요청 된 속성을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="98a5e0c385afa6d2fa9a179e263dfa1942ac13cb" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToBoolean()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;Section 7.1.2&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;섹션 7.1.2&lt;/a&gt; 에 정의 된대로 추상 작업 &lt;code&gt;ToBoolean()&lt;/code&gt; 을 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d25a05e4ed2a43028a62b36f7a945008651ab9c6" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToNumber()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;Section 7.1.3&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;섹션 7.1.3&lt;/a&gt; 에 정의 된 추상 작업 &lt;code&gt;ToNumber()&lt;/code&gt; 를 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4dcbf1148507fc0d2cb75126a083441bb025a61e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToObject()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;섹션 7.1.13&lt;/a&gt; 에 정의 된 추상 작업 &lt;code&gt;ToObject()&lt;/code&gt; 를 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fddc49ca9e6f7884f4f7402d158c3562d69f3dad" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;섹션 7.1.13&lt;/a&gt; 에 정의 된 추상 연산 &lt;code&gt;ToString()&lt;/code&gt; 을 구현합니다 . 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 게터가 정의 된 경우이 API는 재진입 할 ​​수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="96806471eb397aab399550c79244f2cb6c1c198e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;섹션 7.1.13&lt;/a&gt; 에 정의 된 추상 작업 &lt;code&gt;ToString()&lt;/code&gt; 을 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f06230c0740f7b63f1615ff39e6c8deed4c8847d" translate="yes" xml:space="preserve">
          <source>This API increments the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">이 API는 전달 된 참조의 참조 수를 증가시키고 결과 참조 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b8c58ad460418d4b4b95ff2da9afea0a0ec2d635" translate="yes" xml:space="preserve">
          <source>This API is hazardous because in the following case:</source>
          <target state="translated">이 API는 다음과 같은 경우에 위험합니다.</target>
        </trans-unit>
        <trans-unit id="bb85535a8220d4eff8e0e3a7ee1e3a079d312053" translate="yes" xml:space="preserve">
          <source>This API is no longer deprecated.</source>
          <target state="translated">이 API는 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0c5024828803462de5995e87af9efa3f1777afa" translate="yes" xml:space="preserve">
          <source>This API is no longer experimental.</source>
          <target state="translated">이 API는 더 이상 실험적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b50ba3deb9c757f50c565d78f7795d1c47285df" translate="yes" xml:space="preserve">
          <source>This API is optional but helpful when trying to publish messages from very performance-senstive code.</source>
          <target state="translated">이 API는 선택 사항이지만 성능에 매우 민감한 코드에서 메시지를 게시하려고 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="cd41e783eaf560ec51e472abe82e76eb74feeda5" translate="yes" xml:space="preserve">
          <source>This API is under development, and changes (including incompatible changes to the API or wire format) may occur until this warning is removed.</source>
          <target state="translated">이 API는 개발 중이며이 경고가 제거 될 때까지 변경 사항 (API 또는 유선 형식의 호환되지 않는 변경 포함)이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dfa3ff17965f642d6a192310726a8f5b8b20e85" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;double&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;double&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="49877d21ef96ccd14727aaa7c002c5ffab88048a" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;int32_t&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="92bc6f15a322ff8b07f019e96a8cdf7d530c3029" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;int64_t&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6503e99b292474ebaf2bcc59e2356b6df0fa3d82" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;uint32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;uint32_t&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="942e3ae495c5a4657aae15a037f4e246e6f8be57" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 되기 전에 기본 스레드에서 실행중인 이벤트 루프가 종료 될 수 있음을 나타내는 데 사용됩니다 . &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt; 와 유사하게 dem 등원 입니다.</target>
        </trans-unit>
        <trans-unit id="69d5e56003b7f8cb4d12ffc8eab17a293a3dc17b" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 되기 전에 메인 스레드에서 실행중인 이벤트 루프가 종료 될 수 있음을 나타내는 데 사용됩니다 . &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt; 와 유사하게 멱 등성입니다.</target>
        </trans-unit>
        <trans-unit id="0b33e42364a61da332e3e2db27d345503de5d1d5" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 될 때까지 기본 스레드에서 실행중인 이벤트 루프가 종료되지 않아야 함을 나타내는 데 사용됩니다 . &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt; 와 유사하게 dem 등원 입니다.</target>
        </trans-unit>
        <trans-unit id="0c0b66e358caa382c17ce63f4a5db0114fdfabe6" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 될 때까지 메인 스레드에서 실행중인 이벤트 루프가 종료되지 않아야 함을 나타내는 데 사용됩니다 . &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt; 와 유사하게 멱 등성입니다.</target>
        </trans-unit>
        <trans-unit id="587cd767b10603c8d3213430b7152df4d2279b2e" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of a &lt;code&gt;node::Buffer&lt;/code&gt; and it's length.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 의 기본 데이터 버퍼를 검색하는 데 사용되며 길이입니다.</target>
        </trans-unit>
        <trans-unit id="0254baecc8eba4b547466faecb90c78e6d68158b" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of an &lt;code&gt;ArrayBuffer&lt;/code&gt; and its length.</source>
          <target state="translated">이 API는 &lt;code&gt;ArrayBuffer&lt;/code&gt; 의 기본 데이터 버퍼 와 길이 를 검색하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="36b58192525902070d2c0a7c428788e7464512e3" translate="yes" xml:space="preserve">
          <source>This API is used to return the JavaScript singleton object that is used to represent the given boolean value.</source>
          <target state="translated">이 API는 주어진 부울 값을 나타내는 데 사용되는 JavaScript 싱글 톤 객체를 반환하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2b8a478e9e4ad0ba2b83ceb79f6fe8b2726590f0" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which makes use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 를 사용하는 모든 스레드에서 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3a193c4c7abe861db8905fcb50538ab5a608deb2" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will start making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 를 사용하기 시작하는 모든 스레드에서 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6266d5dc6d62f9a22ff00a8bf12ea4d6477e4048" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will stop making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 사용을 중지하는 모든 스레드에서 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ab533709169cd3a484819689ba1c7142adf5ce42" translate="yes" xml:space="preserve">
          <source>This API may only be called from the main thread.</source>
          <target state="translated">이 API는 기본 스레드에서만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="319b4e36a7ead231d4ea80e0de94d083ff5268fa" translate="yes" xml:space="preserve">
          <source>This API open a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">이 API는 하나의 객체를 외부 범위로 승격 할 수있는 새로운 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="1d428023fa95497e48d68ac408f843d544e50ef9" translate="yes" xml:space="preserve">
          <source>This API open a new scope.</source>
          <target state="translated">이 API는 새로운 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="a93e16643b3e03345deb8f8210fcb379c0d37099" translate="yes" xml:space="preserve">
          <source>This API opens a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">이 API는 한 개체를 외부 범위로 승격 할 수있는 새 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="52465275dd21628e32d7a1dd63399f75db334558" translate="yes" xml:space="preserve">
          <source>This API opens a new scope.</source>
          <target state="translated">이 API는 새 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="12f3e0e9a51f400dccede73be29a7a7dc94bdbcc" translate="yes" xml:space="preserve">
          <source>This API promotes the handle to the JavaScript object so that it is valid for the lifetime of the outer scope. It can only be called once per scope. If it is called more than once an error will be returned.</source>
          <target state="translated">이 API는 외부 오브젝트의 수명 동안 유효하도록 JavaScript 오브젝트에 대한 핸들을 승격시킵니다. 범위 당 한 번만 호출 할 수 있습니다. 두 번 이상 호출되면 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c5d285a239d764c227e486f18daf3332cdb1bfa0" translate="yes" xml:space="preserve">
          <source>This API queries a &lt;code&gt;napi_value&lt;/code&gt; to check if it represents an error object.</source>
          <target state="translated">이 API는 &lt;code&gt;napi_value&lt;/code&gt; 를 쿼리 하여 오류 객체를 나타내는 지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="07a858ab5884aa274ef23a00e2dbfc7bb56465d0" translate="yes" xml:space="preserve">
          <source>This API rejects a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">이 API는 연관된 지연된 오브젝트를 통해 JavaScript 약속을 거부합니다. 따라서 해당 지연 오브젝트를 사용할 수있는 JavaScript 약속을 거부하는 데만 사용할 수 있습니다. 이는 효과적으로 &lt;code&gt;napi_create_promise()&lt;/code&gt; 사용하여 약속을 작성 하고 해당 API에서 전달되도록 해당 호출에서 리턴 된 지연된 오브젝트를 보유해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="bdfac549e19d0fd3951aa268d2754e865e81e0fd" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, it has support for detecting an External value. If &lt;code&gt;value&lt;/code&gt; has a type that is invalid, an error is returned.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;12.5.5 절에&lt;/a&gt; 정의 된대로 객체 에서 &lt;code&gt;typeof&lt;/code&gt; 연산자 를 호출하는 것과 유사한 동작을 나타냅니다 . 그러나 외부 값 감지를 지원합니다. 경우 &lt;code&gt;value&lt;/code&gt; 유효하지 않은 유형이 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="37b45f96b0b997e3a98523c6bb3d2db3bf4f8b51" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, there are some differences:</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;섹션 12.5.5&lt;/a&gt; 에 정의 된대로 객체 에서 &lt;code&gt;typeof&lt;/code&gt; 연산자 를 호출하는 것과 유사한 동작을 나타냅니다 . 그러나 몇 가지 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d52bdf433c534f2133fcb54ff7c6f2707cbe4de1" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;IsArray&lt;/code&gt; operation on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;Section 7.2.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;7.2.2 섹션에&lt;/a&gt; 정의 된대로 객체 에서 &lt;code&gt;IsArray&lt;/code&gt; 작업을 호출하는 것을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="071bc6a2988b5ec1974c804b6e1314b62d4f8f5f" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;instanceof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;Section 12.10.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;12.10.4 단원에&lt;/a&gt; 정의 된대로 객체에서 연산자 의 &lt;code&gt;instanceof&lt;/code&gt; 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="0c169ebc6223ec0195007a1a8dddc814e6e1bb9f" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt; detach operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;Section 24.1.1.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;섹션 24.1.1.3&lt;/a&gt; 에 정의 된 &lt;code&gt;ArrayBuffer&lt;/code&gt; 분리 작업 의 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="cb8244e2d276441f1fdca1221750307d283ca0d4" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;code&gt;IsDetachedBuffer&lt;/code&gt; operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;Section 24.1.1.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;섹션 24.1.1.2&lt;/a&gt; 에 정의 된 &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;code&gt;IsDetachedBuffer&lt;/code&gt; 작업 의 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="1d161386d078bae13e76126f77747e5f73c7af9e" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the Strict Equality algorithm as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;Section 7.2.14&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;7.2.14 절에&lt;/a&gt; 정의 된 Squalt Equality 알고리즘의 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="9985bed5b2b909c86b4c219b81b72403588f5ec9" translate="yes" xml:space="preserve">
          <source>This API requests that the previously allocated work be scheduled for execution. Once it returns successfully, this API must not be called again with the same &lt;code&gt;napi_async_work&lt;/code&gt; item or the result will be undefined.</source>
          <target state="translated">이 API는 이전에 할당 된 작업이 실행되도록 예약되도록 요청합니다. 성공적으로 리턴되면 동일한 &lt;code&gt;napi_async_work&lt;/code&gt; 항목 으로이 API를 다시 호출하면 안됩니다. 그렇지 않으면 결과가 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="06d16e5f9910adb2bd8786d4e2bb452ed0ff9dff" translate="yes" xml:space="preserve">
          <source>This API resolves a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to resolve JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">이 API는 연관된 지연된 오브젝트를 통해 JavaScript 약속을 해결합니다. 따라서 해당 지연 오브젝트를 사용할 수있는 JavaScript 약속을 해결하는 데만 사용할 수 있습니다. 이는 효과적으로 &lt;code&gt;napi_create_promise()&lt;/code&gt; 사용하여 약속을 작성 하고 해당 API에서 전달되도록 해당 호출에서 리턴 된 지연된 오브젝트를 보유해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="27002effa854efa84116cc6ba528e82a613dccf1" translate="yes" xml:space="preserve">
          <source>This API retrieves a &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure with information about the last error that occurred.</source>
          <target state="translated">이 API 는 마지막으로 발생한 오류에 대한 정보가 있는 &lt;code&gt;napi_extended_error_info&lt;/code&gt; 구조를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="c54fae2ce18788face29f37c323cbd4a9728444f" translate="yes" xml:space="preserve">
          <source>This API retrieves data that was previously associated with the currently running Agent via &lt;code&gt;napi_set_instance_data()&lt;/code&gt;. If no data is set, the call will succeed and &lt;code&gt;data&lt;/code&gt; will be set to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; 를 통해 현재 실행중인 에이전트와 이전에 연결된 데이터를 검색합니다 . 데이터가 설정되지 않으면 호출이 성공하고 &lt;code&gt;data&lt;/code&gt; 가 &lt;code&gt;NULL&lt;/code&gt; 로 설정 됩니다 .</target>
        </trans-unit>
        <trans-unit id="65239448f493d9f6ef4cbb9fa475b6583cc8a2fc" translate="yes" xml:space="preserve">
          <source>This API retrieves the external data pointer that was previously passed to &lt;code&gt;napi_create_external()&lt;/code&gt;.</source>
          <target state="translated">이 API는 이전에 &lt;code&gt;napi_create_external()&lt;/code&gt; 전달 된 외부 데이터 포인터를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="f0eee031ab3af3225681355d84afe4145095683c" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;Error&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="db44d290a91d87cc4443be06ede8203a66b55369" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;RangeError&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fa81b73ac735abebb0edffd8561f17aa7d32742e" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;TypeError&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eac49581d384370c2fd8061e8992f383a07a12f6" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Array&lt;/code&gt; 유형에 해당하는 N-API 값을 반환합니다 . JavaScript 배열은 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;섹션 22.1&lt;/a&gt; 에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ebdcd06ac50a711b98eac9ad3ba26e473236254" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created - that behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Array&lt;/code&gt; 유형에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;Array&lt;/code&gt; 의 길이 속성은 전달 된 길이 매개 변수로 설정됩니다. 그러나 기본 버퍼는 어레이가 생성 될 때 VM에 의해 사전 할당되는 것이 보장되지 않습니다.이 동작은 기본 VM 구현에 맡겨집니다. 버퍼가 C를 통해 직접 읽고 쓸 수있는 연속적인 메모리 블록이어야하는 경우 &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; &lt;/a&gt; 사용을 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6f1e1ad010526c6b95577249e9d20e0bd898f13" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created. That behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Array&lt;/code&gt; 유형에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;Array&lt;/code&gt; 의 길이 속성은 전달 된 길이 매개 변수로 설정됩니다. 그러나 기본 버퍼는 어레이가 생성 될 때 VM에 의해 사전 할당된다는 보장이 없습니다. 이 동작은 기본 VM 구현에 맡겨집니다. 버퍼가 C를 통해 직접 읽고 쓸 수있는 연속적인 메모리 블록이어야하는 경우 &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; &lt;/a&gt; 사용을 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="74bae849b3abb7d0a846a00b3211719de9de8557" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;ArrayBuffer&lt;/code&gt;s are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for &lt;code&gt;TypedArray&lt;/code&gt; objects. The &lt;code&gt;ArrayBuffer&lt;/code&gt; allocated will have an underlying byte buffer whose size is determined by the &lt;code&gt;length&lt;/code&gt; parameter that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or &lt;code&gt;DataView&lt;/code&gt; object would need to be created.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; 에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;ArrayBuffer&lt;/code&gt; 는 고정 길이 이진 데이터 버퍼를 나타내는 데 사용됩니다. 일반적으로 &lt;code&gt;TypedArray&lt;/code&gt; 객체 의 백업 버퍼로 사용됩니다 . &lt;code&gt;ArrayBuffer&lt;/code&gt; 은 그 크기에 의해 결정되는 하부 바이트 버퍼 것이다 할당 &lt;code&gt;length&lt;/code&gt; 에있어 전달 파라미터. 근본적인 버퍼 임의로 경우 호출자에게 반환 호출자가 직접 버퍼를 조작하고자한다. 이 버퍼는 네이티브 코드에서만 직접 쓸 수 있습니다. JavaScript에서이 버퍼에 쓰려면 형식화 된 배열 또는 &lt;code&gt;DataView&lt;/code&gt; 객체를 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="5abde2fefb489242a6fbaf801b7da355c609cf82" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. The underlying byte buffer of the &lt;code&gt;ArrayBuffer&lt;/code&gt; is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; 에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;ArrayBuffer&lt;/code&gt; 의 기본 바이트 버퍼 는 외부에서 할당 및 관리됩니다. 호출자는 finalize 콜백이 호출 될 때까지 바이트 버퍼가 유효한 상태를 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="54dc707b3f198fc07141776bb634e4e4e63b2b8f" translate="yes" xml:space="preserve">
          <source>This API returns an array containing the names of the available properties of this object.</source>
          <target state="translated">이 API는이 개체의 사용 가능한 속성 이름이 포함 된 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aa79ae1b37565525274506b36dd7fc40477368cb" translate="yes" xml:space="preserve">
          <source>This API returns if the &lt;code&gt;Object&lt;/code&gt; passed in has an element at the requested index.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 요청 된 인덱스에 요소가 있는지 여부를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="c604c612d96a87d8101af3ddf6bfc01f4b4d68ec" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;global&lt;/code&gt; object.</source>
          <target state="translated">이 API는 &lt;code&gt;global&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="48a7f0383f00e9573b596f72e50a2cb7b8d0000d" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;new.target&lt;/code&gt; of the constructor call. If the current callback is not a constructor call, the result is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">이 API는 생성자 호출 의 &lt;code&gt;new.target&lt;/code&gt; 을 반환합니다 . 현재 콜백이 생성자 호출이 아닌 경우 결과는 &lt;code&gt;NULL&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ca0876caff75d7fcb5c27bc7d32784621271953f" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">이 API는 &lt;code&gt;null&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="6f4b499dfda4f2e7f389bb8a459c0442468d26c5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int32&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Number&lt;/code&gt; 와 동등한 C &lt;code&gt;int32&lt;/code&gt; 프리미티브를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="827d0e5a4fe902762d8fdbd2a59f01ff491412f5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Number&lt;/code&gt; 와 동등한 C &lt;code&gt;int64&lt;/code&gt; 프리미티브를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2df8e3cc2f4a8dd457d5502a718bb8bd98790b34" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 와 동등한 C &lt;code&gt;int64_t&lt;/code&gt; 프리미티브를 리턴합니다 . 필요한 경우 &lt;code&gt;lossless&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 값을 자릅니다 .</target>
        </trans-unit>
        <trans-unit id="accfb9b3a000444a53160665ebc8ad9cca255ff1" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;uint64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 와 동등한 C &lt;code&gt;uint64_t&lt;/code&gt; 프리미티브를 리턴합니다 . 필요한 경우 &lt;code&gt;lossless&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 값을 자릅니다 .</target>
        </trans-unit>
        <trans-unit id="3a1a204e8e4a5df3c6cc124c41060a09c140f51d" translate="yes" xml:space="preserve">
          <source>This API returns the C boolean primitive equivalent of the given JavaScript &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Boolean&lt;/code&gt; 과 동등한 C 부울 프리미티브를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="ca2b5220b79fdd14c56eb3008d7a5c1f99fb540c" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Number&lt;/code&gt; 와 동등한 C 이중 기본 요소를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="76fc91334d0e8e6d7cd76625caa8bac8a9d82ab4" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive of time value for the given JavaScript &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">이 API는 지정된 JavaScript &lt;code&gt;Date&lt;/code&gt; 에 대한 C double 프리미티브 시간 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a89a951199f81c03153d5318b6b870955ad2668b" translate="yes" xml:space="preserve">
          <source>This API returns the C primitive equivalent of the given &lt;code&gt;napi_value&lt;/code&gt; as a &lt;code&gt;uint32_t&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 &lt;code&gt;napi_value&lt;/code&gt; 에 해당하는 C 프리미티브를 &lt;code&gt;uint32_t&lt;/code&gt; 로 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="252de5913968c0e14b8dc66ec544741c0d2689fb" translate="yes" xml:space="preserve">
          <source>This API returns the ISO-8859-1-encoded string corresponding the value passed in.</source>
          <target state="translated">이 API는 전달 된 값에 해당하는 ISO-8859-1- 인코딩 된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="84ae74192a0873baca176de8e267018dc4cfbd5a" translate="yes" xml:space="preserve">
          <source>This API returns the UTF16-encoded string corresponding the value passed in.</source>
          <target state="translated">이 API는 전달 된 값에 해당하는 UTF16 인코딩 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2c87b6403f35f26e7404749f214ce41091747843" translate="yes" xml:space="preserve">
          <source>This API returns the UTF8-encoded string corresponding the value passed in.</source>
          <target state="translated">이 API는 전달 된 값에 해당하는 UTF8로 인코딩 된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c0b748b497bba3eb1c898153dfbd929b87db172b" translate="yes" xml:space="preserve">
          <source>This API returns the Undefined object.</source>
          <target state="translated">이 API는 정의되지 않은 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="adba2f90399935e0690e7ea6510c317990dbccfb" translate="yes" xml:space="preserve">
          <source>This API returns the highest N-API version supported by the Node.js runtime. N-API is planned to be additive such that newer releases of Node.js may support additional API functions. In order to allow an addon to use a newer function when running with versions of Node.js that support it, while providing fallback behavior when running with Node.js versions that don't support it:</source>
          <target state="translated">이 API는 Node.js 런타임에서 지원하는 최고 N-API 버전을 반환합니다. N-API는 Node.js의 최신 릴리스가 추가 API 기능을 지원할 수 있도록 추가 될 예정입니다. 이를 지원하는 Node.js 버전으로 실행할 때 애드온이 최신 기능을 사용할 수 있도록 지원하지 않는 Node.js 버전으로 실행할 때는 대체 동작을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="522d2a776db00199579b4671e9a78264576e9097" translate="yes" xml:space="preserve">
          <source>This API returns the length of an array.</source>
          <target state="translated">이 API는 배열의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="62dde4493dbecb32a8daa6b7073d93a0a48999a4" translate="yes" xml:space="preserve">
          <source>This API returns the names of the enumerable properties of &lt;code&gt;object&lt;/code&gt; as an array of strings. The properties of &lt;code&gt;object&lt;/code&gt; whose key is a symbol will not be included.</source>
          <target state="translated">이 API는 열거 가능한 &lt;code&gt;object&lt;/code&gt; 속성 이름 을 문자열 배열로 반환합니다. 키가 심볼 인 &lt;code&gt;object&lt;/code&gt; 의 속성은 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="40720472b0f1b38ae83da6f85669c9b6c99e9e15" translate="yes" xml:space="preserve">
          <source>This API returns true if an exception is pending.</source>
          <target state="translated">이 API는 예외가 보류중인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="70f8fc304edc0eb1ff4bd3a9bd31242f6e63b866" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;DataView&lt;/code&gt; 의 다양한 속성을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="094bf686b8d41acd51551e48f0d5506a78066bcd" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a typed array.</source>
          <target state="translated">이 API는 유형이 지정된 배열의 다양한 속성을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8443a100e796e230e9a632cdd639d47a8dd0c30e" translate="yes" xml:space="preserve">
          <source>This API set a property on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 의 속성을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="055ca98bb19b6d2b39f8280d72632e38436dcde6" translate="yes" xml:space="preserve">
          <source>This API sets and element on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API 세트 및 전달 된 &lt;code&gt;Object&lt;/code&gt; 요소</target>
        </trans-unit>
        <trans-unit id="f3259243731814fd2604630f35f7dc1e7cb7967f" translate="yes" xml:space="preserve">
          <source>This API should not be called with &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; from a JavaScript thread, because, if the queue is full, it may cause the JavaScript thread to deadlock.</source>
          <target state="translated">이 API는 JavaScript 스레드에서 &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; 으로 호출하면 안됩니다 . 큐가 가득 차면 JavaScript 스레드가 교착 상태가 될 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d1442d6affa3740f89af3af8d557d700b4757238" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;Error&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="b3dd51c041226d76a52e71a99edd9a2f1b9f2b71" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;RangeError&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="be4f91f940ec94f29555da2de8b293137ec65b17" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;TypeError&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1e9614bea2e91f427dd259be89411bcf53308e40" translate="yes" xml:space="preserve">
          <source>This API throws the JavaScript value provided.</source>
          <target state="translated">이 API는 제공된 JavaScript 값을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="99f41202181c70e315d0fe22903a8a88e874c6f3" translate="yes" xml:space="preserve">
          <source>This API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">이 API는 libuv의 스레드 풀을 사용하는데, 이는 일부 응용 프로그램에 놀랍고 부정적인 성능 영향을 미칠 수 있습니다. 자세한 내용은 &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5421be1b58e3a5f37657e78acf463c299fc19571" translate="yes" xml:space="preserve">
          <source>This API will return &lt;code&gt;napi_closing&lt;/code&gt; if &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; was called with &lt;code&gt;abort&lt;/code&gt; set to &lt;code&gt;napi_tsfn_abort&lt;/code&gt; from any thread. The value is only added to the queue if the API returns &lt;code&gt;napi_ok&lt;/code&gt;.</source>
          <target state="translated">이 API는 반환 &lt;code&gt;napi_closing&lt;/code&gt; 을 경우 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 호출되었습니다 &lt;code&gt;abort&lt;/code&gt; 으로 설정 &lt;code&gt;napi_tsfn_abort&lt;/code&gt; 모든 스레드에서. API가 &lt;code&gt;napi_ok&lt;/code&gt; 를 반환하는 경우에만 값이 큐에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="ca4d7acb60577ff5a3d284f73b617fe9d4f84288" translate="yes" xml:space="preserve">
          <source>This Module Namespace Exotic Object can be directly observed either when using &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; or a dynamic import:</source>
          <target state="translated">이 모듈 네임 스페이스 Exotic Object는 &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; 또는 동적 가져 오기를 사용할 때 직접 관찰 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0484acdcfb56a632e947996df777e0189ffd6889" translate="yes" xml:space="preserve">
          <source>This allows programs to localize their dependencies, so that they do not clash.</source>
          <target state="translated">이를 통해 프로그램은 종속성을 현지화하여 충돌하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8849f713925ba1f9a6b09df33af235ddaf81cd16" translate="yes" xml:space="preserve">
          <source>This also works with timers that are returned from &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;. If their callback function throws, it will be caught by the domain &lt;code&gt;'error'&lt;/code&gt; handler.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt; 에서 반환되는 타이머에서도 작동합니다 . 콜백 함수가 &lt;code&gt;'error'&lt;/code&gt; 하면 도메인 'error' 처리기에 의해 포착됩니다 .</target>
        </trans-unit>
        <trans-unit id="ea76098f7bf18a2c68b3090aef859627c5b998c5" translate="yes" xml:space="preserve">
          <source>This approach is appropriate for any of the following use cases:</source>
          <target state="translated">이 접근 방식은 다음 사용 사례에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="820157915a230f72b4dfebbb307e744ce07bc105" translate="yes" xml:space="preserve">
          <source>This becomes &lt;code&gt;null&lt;/code&gt; when sending a socket to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;. To poll forks and get current number of active connections, use asynchronous &lt;a href=&quot;#net_server_getconnections_callback&quot;&gt;&lt;code&gt;server.getConnections()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; 가있는 자식에게 소켓을 보낼 때 이것은 &lt;code&gt;null&lt;/code&gt; 이됩니다 . 포크를 폴링하고 현재 활성 연결 수를 얻으려면 대신 비동기 &lt;a href=&quot;#net_server_getconnections_callback&quot;&gt; &lt;code&gt;server.getConnections()&lt;/code&gt; &lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0403c54b19cf7c518c743ac412f170084964d2d4" translate="yes" xml:space="preserve">
          <source>This behavior can be observed by doing something like opening a resource then closing it before the resource can be used. The following snippet demonstrates this.</source>
          <target state="translated">자원을 사용하기 전에 자원을 열고 닫는 등의 작업을 수행하여이 동작을 관찰 할 수 있습니다. 다음 스 니펫이이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4d3be871fb0a41430f8168f7829d357513f35f9e" translate="yes" xml:space="preserve">
          <source>This behavior matches how &lt;code&gt;import&lt;/code&gt; behaves in browser environments, assuming a typically configured server.</source>
          <target state="translated">이 동작 은 일반적으로 구성된 서버를 가정하여 브라우저 환경에서 &lt;code&gt;import&lt;/code&gt; 작동 하는 방식과 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="88491dff6c51b120ea1b1d70767ea3bf8c1f612b" translate="yes" xml:space="preserve">
          <source>This can be addressed by passing &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; to the code that creates the &lt;code&gt;Context&lt;/code&gt;:</source>
          <target state="translated">이는 &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; 를 &lt;code&gt;Context&lt;/code&gt; 를 생성하는 코드 에 전달하여 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c09d684d7a4d21b175c08bdd339dca1134e4b755" translate="yes" xml:space="preserve">
          <source>This can be called many times with new data as it is streamed.</source>
          <target state="translated">스트리밍 될 때 새 데이터를 사용하여 여러 번 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22a8e93c7e3dbc06e636a58f0d2909de2f9f3464" translate="yes" xml:space="preserve">
          <source>This can be done if both the CommonJS and ES module versions of the package are equivalent, for example because one is the transpiled output of the other; and the package&amp;rsquo;s management of state is carefully isolated (or the package is stateless).</source>
          <target state="translated">패키지의 CommonJS 및 ES 모듈 버전이 모두 동일한 경우에이를 수행 할 수 있습니다. 예를 들어 하나는 다른 하나의 트랜스 파일 된 출력이기 때문입니다. 패키지의 상태 관리는 신중하게 격리됩니다 (또는 패키지가 상태 비 저장).</target>
        </trans-unit>
        <trans-unit id="7c491563022589b8a9b5c79a33442425c69e8e3b" translate="yes" xml:space="preserve">
          <source>This can be overridden for servers and client requests by passing the &lt;code&gt;maxHeaderSize&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;maxHeaderSize&lt;/code&gt; 옵션 을 전달하여 서버 및 클라이언트 요청에 대해 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c880dd4ffae1216437534bad1ef14743456d2388" translate="yes" xml:space="preserve">
          <source>This can be used primarily to re-initialize REPL context to some pre-defined state:</source>
          <target state="translated">이는 주로 REPL 컨텍스트를 사전 정의 된 상태로 다시 초기화하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdf292923a244ea9d67a38073716924be27282d5" translate="yes" xml:space="preserve">
          <source>This can be used to implement continuation local storage without the use of a tracking &lt;code&gt;Map&lt;/code&gt; to store the metadata:</source>
          <target state="translated">이것은 메타 데이터를 저장하기 위해 추적 &lt;code&gt;Map&lt;/code&gt; 을 사용하지 않고 연속 로컬 저장소를 구현하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f813d16b38829c4c7b83c4595769721b0e2f9aa" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt; again.</source>
          <target state="translated">&lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; &lt;/a&gt; 다시 호출하여 작업자를 다시 시작하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="884b5d2f2fb4791a811ef2a6aa11b44f1d059e43" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;code&gt;.fork()&lt;/code&gt; again.</source>
          <target state="translated">&lt;code&gt;.fork()&lt;/code&gt; 다시 호출하여 작업자를 다시 시작하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="adb47d3b708ed81016472d29ae643286daa0d023" translate="yes" xml:space="preserve">
          <source>This can be used when collecting input from a TTY stream to retrieve the current value that has been processed thus far, prior to the &lt;code&gt;line&lt;/code&gt; event being emitted. Once the &lt;code&gt;line&lt;/code&gt; event has been emitted, this property will be an empty string.</source>
          <target state="translated">&lt;code&gt;line&lt;/code&gt; 이벤트가 발생 하기 전에 지금까지 처리 된 현재 값을 검색하기 위해 TTY 스트림에서 입력을 수집 할 때 사용할 수 있습니다 . 일단 &lt;code&gt;line&lt;/code&gt; 이벤트가 방출되어,이 속성은 빈 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="81cb9ba6df123ad25e5c1f7880d8d7faab015f8c" translate="yes" xml:space="preserve">
          <source>This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.</source>
          <target state="translated">이는 원래 함수가 오류 우선 콜백을 마지막 인수로 사용하는 표준 형식을 따르지 않는 경우에 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc26040f8f9ecbf7bbd37bcaa328d37dfb1dd0f1" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as other parts of the &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;Buffer&lt;/code&gt; object itself.</source>
          <target state="translated">이로 인해 &lt;code&gt;ArrayBuffer&lt;/code&gt; 를 사용하여 기본 ArrayBuffer에 직접 액세스 할 때 문제가 발생할 수 있습니다. &lt;code&gt;buf.buffer&lt;/code&gt; 다른 부분은 &lt;code&gt;Buffer&lt;/code&gt; 객체 자체 와 관련 이 &lt;code&gt;ArrayBuffer&lt;/code&gt; 수 있기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="6a2698ef50db0dc91fafb011a769f5cfdfc45098" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as the first bytes in this &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;buf&lt;/code&gt; object itself.</source>
          <target state="translated">이 &lt;code&gt;buf.buffer&lt;/code&gt; 의 첫 바이트 가 &lt;code&gt;buf&lt;/code&gt; 객체 자체 와 관련 이 &lt;code&gt;ArrayBuffer&lt;/code&gt; 때문에 &lt;code&gt;ArrayBuffer&lt;/code&gt; 를 사용하여 기본 ArrayBuffer에 직접 액세스 할 때 문제가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="94c39157bbaadfeac0740fd2bddc3c5a9e18fe2b" translate="yes" xml:space="preserve">
          <source>This can only be called from the master process.</source>
          <target state="translated">마스터 프로세스에서만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bf60ae930ac6615a4d1242e8315c9eb04f632ba" translate="yes" xml:space="preserve">
          <source>This can only happen when native addons create &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s in &quot;externalized&quot; mode, or put existing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; into externalized mode.</source>
          <target state="translated">이것은 네이티브 애드온 이 &quot;외부화 된&quot;모드에서 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 를 만들 거나 기존 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 를 외부화 된 모드로 만들 때만 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6199ec1544ac620470d1eb68d66a477d9db98885" translate="yes" xml:space="preserve">
          <source>This change was made while &lt;code&gt;async_hooks&lt;/code&gt; was an experimental API.</source>
          <target state="translated">&lt;code&gt;async_hooks&lt;/code&gt; 가 실험적인 API 인 동안이 변경이 이루어졌습니다 .</target>
        </trans-unit>
        <trans-unit id="f5c8587a30eab7a428dcbb7513f0b815a15706fa" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt; and has the following additional events:</source>
          <target state="translated">이 클래스는 &lt;a href=&quot;net#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; &lt;/a&gt; 에서 상속되며 다음과 같은 추가 이벤트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb154621216808fa548d91e360e57e7c8109d9f7" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt;&lt;code&gt;stream.Transform&lt;/code&gt;&lt;/a&gt;, allowing &lt;code&gt;zlib&lt;/code&gt; objects to be used in pipes and similar stream operations.</source>
          <target state="translated">이 클래스는 &lt;code&gt;zlib&lt;/code&gt; 객체를 파이프 및 유사한 스트림 작업에 사용할 수 있도록 &lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt; &lt;code&gt;stream.Transform&lt;/code&gt; 을&lt;/a&gt; 상속 합니다.</target>
        </trans-unit>
        <trans-unit id="8e88b64435ae0d469109330906f76139a67a2d71" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;code&gt;tls.Server&lt;/code&gt; and emits events same as &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">이 클래스는 &lt;code&gt;tls.Server&lt;/code&gt; 의 서브 클래스이며 http.Server 와 동일한 이벤트를 &lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt; 합니다. 자세한 내용은 &lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="16c329449b1b3c4b04d85f37f6e6b48c47ddc4d5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). A &lt;code&gt;net.Socket&lt;/code&gt; is also a &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;duplex stream&lt;/a&gt;, so it can be both readable and writable, and it is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스는 TCP 소켓 또는 스트리밍 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 엔드 포인트 (Windows에서는 명명 된 파이프를 사용하고 그렇지 않으면 Unix 도메인 소켓을 사용함 )의 추상화입니다 . &lt;code&gt;net.Socket&lt;/code&gt; 는 또한 인 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;이중 스트림&lt;/a&gt; 은 읽기 및 쓰기 모두가 될 수 있도록하고, 또한 인 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bb6db2a0d099fbb5e70fab688511fc3b030d22f5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). It is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스는 TCP 소켓 또는 스트리밍 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 끝점 의 추상화입니다 (Windows에서는 명명 된 파이프를 사용하고 그렇지 않으면 Unix 도메인 소켓을 사용함). 또한 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9cb39e860eb677e256cb393655fda70a7c3d4eaa" translate="yes" xml:space="preserve">
          <source>This class is now exported.</source>
          <target state="translated">이 클래스는 이제 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="44e839a369fec339f5305657a162e8136375a579" translate="yes" xml:space="preserve">
          <source>This class is used to create a TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server.</source>
          <target state="translated">이 클래스는 TCP 또는 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 서버 를 만드는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd4c4aa236c69d8176bdaffd55ffe16275814e30" translate="yes" xml:space="preserve">
          <source>This class is used to create asynchronous state within callbacks and promise chains. It allows storing data throughout the lifetime of a web request or any other asynchronous duration. It is similar to thread-local storage in other languages.</source>
          <target state="translated">이 클래스는 콜백 및 약속 체인 내에서 비동기 상태를 만드는 데 사용됩니다. 웹 요청의 수명 또는 기타 비동기 기간 동안 데이터를 저장할 수 있습니다. 다른 언어의 스레드 로컬 저장소와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="42f1546ea4056ef007c2a73d3fbe93902826cb60" translate="yes" xml:space="preserve">
          <source>This class now inherits from &lt;code&gt;EventTarget&lt;/code&gt; rather than from &lt;code&gt;EventEmitter&lt;/code&gt;.</source>
          <target state="translated">이 클래스는 이제 &lt;code&gt;EventEmitter&lt;/code&gt; 가 아닌 &lt;code&gt;EventTarget&lt;/code&gt; 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="a92b7b6bb57bdc44b8ea493af6aace2149818803" translate="yes" xml:space="preserve">
          <source>This class was renamed from &lt;code&gt;Zlib&lt;/code&gt; to &lt;code&gt;ZlibBase&lt;/code&gt;.</source>
          <target state="translated">이 클래스는 &lt;code&gt;Zlib&lt;/code&gt; 에서 &lt;code&gt;ZlibBase&lt;/code&gt; 로 이름이 변경되었습니다 .</target>
        </trans-unit>
        <trans-unit id="ca97ea3802a37189503195b033c0894a87a14b4c" translate="yes" xml:space="preserve">
          <source>This code does not use the regular &lt;code&gt;ERR_*&lt;/code&gt; convention Node.js errors use in order to be compatible with the web platform's &lt;code&gt;AbortError&lt;/code&gt;.</source>
          <target state="translated">이 코드는 웹 플랫폼의 &lt;code&gt;AbortError&lt;/code&gt; 와 호환되도록 Node.js 오류가 사용하는 일반적인 &lt;code&gt;ERR_*&lt;/code&gt; 규칙을 사용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="de024a70044896351480dcb7c1b1ad560f5c6459" translate="yes" xml:space="preserve">
          <source>This configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt;, or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">이것은 문자열 입력을 CommonJS 또는 ES 모듈로 해석하도록 Node.js를 구성합니다. 문자열 입력은 &lt;code&gt;--eval&lt;/code&gt; , &lt;code&gt;--print&lt;/code&gt; 또는 &lt;code&gt;STDIN&lt;/code&gt; 을 통해 입력됩니다 .</target>
        </trans-unit>
        <trans-unit id="244101b103efaee2124df7a27e0b69d17a4c72b4" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 메모리를 복사하지 않고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; 의 뷰를 작성합니다 . 예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 인스턴스 의 &lt;code&gt;.buffer&lt;/code&gt; 속성에 대한 참조를 전달 하면 새로 만든 &lt;code&gt;Buffer&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 와 동일한 할당 된 메모리를 공유합니다 .</target>
        </trans-unit>
        <trans-unit id="642feea22e99d5b86e730cd2666b24ed829c2acf" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 메모리를 복사하지 않고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 의 뷰를 작성합니다 . 예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 인스턴스 의 &lt;code&gt;.buffer&lt;/code&gt; 속성에 대한 참조를 전달 하면 새로 만든 &lt;code&gt;Buffer&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 와 동일한 할당 된 메모리를 공유합니다 .</target>
        </trans-unit>
        <trans-unit id="f70a9e943eb437948e2007e44c804669a3a635f8" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">이 기본값은 &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt; 명령 행 스위치를 사용하여 (직접 또는 &lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt; 환경 변수 를 통해) 완전히 대체 할 수 있습니다 . 예를 들어, 다음은 &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; 를 기본 TLS 암호 제품군으로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="c3e306cc187ad3b8c8c5117038d5c054feb07697" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command-line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">이 기본값은 &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt; 명령 줄 스위치를 사용하여 (직접 또는 &lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt; 환경 변수 를 통해) 완전히 바꿀 수 있습니다. 예를 들어 다음은 &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; 를 기본 TLS 암호 제품군으로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d52314f1ca567086d94d0b2153e5c443a8d5ccef" translate="yes" xml:space="preserve">
          <source>This deprecation has been superseded by the deprecation of the &lt;code&gt;process.binding()&lt;/code&gt; API (&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;).</source>
          <target state="translated">이 지원 중단은 &lt;code&gt;process.binding()&lt;/code&gt; API ( &lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt; ) 의 지원 중단으로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="8c190b3f34fae908925a1a6be8e8afe5048e36e2" translate="yes" xml:space="preserve">
          <source>This document contains two primary sections and a third section for notes. The first section explains how to use existing streams within an application. The second section explains how to create new types of streams.</source>
          <target state="translated">이 문서에는 두 가지 기본 섹션과 메모에 대한 세 번째 섹션이 포함되어 있습니다. 첫 번째 섹션에서는 응용 프로그램 내에서 기존 스트림을 사용하는 방법에 대해 설명합니다. 두 번째 섹션에서는 새로운 유형의 스트림을 만드는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="62e0d03e950af6c192f429106a4d7a544db728f4" translate="yes" xml:space="preserve">
          <source>This doesn't turn &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt; into a synchronous blocking call. If synchronous operation is desired, something like &lt;code&gt;fs.openSync()&lt;/code&gt; should be used.</source>
          <target state="translated">이것은 &lt;code&gt;fs.open()&lt;/code&gt; 또는 &lt;code&gt;fsPromises.open()&lt;/code&gt; 을 동기식 차단 호출로 바꾸지 않습니다 . 동기 작업이 필요한 경우 &lt;code&gt;fs.openSync()&lt;/code&gt; 와 같은 것을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="7d7155916c3b5f40672e5071e001ad88f1433bf7" translate="yes" xml:space="preserve">
          <source>This enables useful patterns such as relative file loading:</source>
          <target state="translated">이를 통해 상대 파일로드와 같은 유용한 패턴을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a7d3a4824a32afb05e10223ba91eb879a7fd252" translate="yes" xml:space="preserve">
          <source>This encapsulation of exports provides more reliable guarantees about package interfaces for tools and when handling semver upgrades for a package. It is not a strong encapsulation since a direct require of any absolute subpath of the package such as &lt;code&gt;require('/path/to/node_modules/pkg/subpath.js')&lt;/code&gt; will still load &lt;code&gt;subpath.js&lt;/code&gt;.</source>
          <target state="translated">이 내보내기 캡슐화는 도구 및 패키지에 대한 semver 업그레이드를 처리 할 때 패키지 인터페이스에 대한보다 안정적인 보증을 제공합니다. &lt;code&gt;require('/path/to/node_modules/pkg/subpath.js')&lt;/code&gt; 와 같은 패키지의 절대 하위 경로를 직접 요구 하면 여전히 &lt;code&gt;subpath.js&lt;/code&gt; 를 로드 하므로 강력한 캡슐화가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="511c5720a26dc7d320da43671cc5b1fecc46d7b6" translate="yes" xml:space="preserve">
          <source>This environment variable is ignored when &lt;code&gt;node&lt;/code&gt; runs as setuid root or has Linux file capabilities set.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 가 setuid 루트로 실행되거나 Linux 파일 기능이 설정된 경우이 환경 변수는 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="9ebd080238c77b1ee805c11a34bb22abc42b3369" translate="yes" xml:space="preserve">
          <source>This error code was replaced by &lt;a href=&quot;#ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&quot;&gt;&lt;code&gt;ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&lt;/code&gt;&lt;/a&gt; in Node.js v15.0.0, because it is no longer accurate as other types of transferable objects also exist now.</source>
          <target state="translated">이 오류 코드는 Node.js &lt;a href=&quot;#ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&quot;&gt; &lt;code&gt;ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&lt;/code&gt; &lt;/a&gt; 에서 ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST 로 대체되었습니다. 다른 유형의 전송 가능한 객체도 현재 존재하므로 더 이상 정확하지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="6e6ca02ed62b1234e7dfc3664b35ddb769fa981f" translate="yes" xml:space="preserve">
          <source>This error is designed to prevent accidentally overwriting a callback registered from another module.</source>
          <target state="translated">이 오류는 다른 모듈에서 등록 된 콜백을 실수로 덮어 쓰지 않도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="b9977cdce2fd4b47c0997cc9ad3729a7f41f972a" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">이 이벤트는 사용자가 HTTP 서버에 연결을 주입하기 위해 명시 적으로 생성 할 수도 있습니다. 이 경우 모든 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c553b5e91dff230374b24a70b3a2617cfe02603" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the TLS server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">이 이벤트는 사용자가 TLS 서버에 연결을 삽입하기 위해 명시 적으로 생성 할 수도 있습니다. 이 경우 모든 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10a0c432576c88ea7fd6ac6682ca82473146468d" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established, before the TLS handshake begins. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">이 이벤트는 TLS 핸드 셰이크가 시작되기 전에 새 TCP 스트림이 설정 될 때 발생합니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하기를 원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b8b0d428fb2bcfd24f28cd7691efd806371c187e" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">이 이벤트는 새 TCP 스트림이 설정 될 때 발생합니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하기를 원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0e2d4b6cd4a5729a1807f57603f4e80b4da71d69" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.connection&lt;/code&gt;.</source>
          <target state="translated">이 이벤트는 새로운 TCP 스트림이 설정 될 때 생성됩니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하고 싶지 않습니다. 특히, 소켓은 프로토콜 파서가 소켓에 연결하는 방식 때문에 &lt;code&gt;'readable'&lt;/code&gt; 이벤트를 생성 하지 않습니다 . &lt;code&gt;socket&lt;/code&gt; 또한에 액세스 할 수 있습니다 &lt;code&gt;request.connection&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="66fa4ee297e42f821aa6c5e39bfbf8cf100dc851" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.socket&lt;/code&gt;.</source>
          <target state="translated">이 이벤트는 새 TCP 스트림이 설정 될 때 발생합니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하기를 원하지 않습니다. 특히, 소켓은 프로토콜 파서가 소켓에 연결되는 방식 때문에 &lt;code&gt;'readable'&lt;/code&gt; 이벤트를 생성 하지 않습니다 . &lt;code&gt;socket&lt;/code&gt; 또한에 액세스 할 수 있습니다 &lt;code&gt;request.socket&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f345cc8a09df280597dfb6653ff618e979ce58bb" translate="yes" xml:space="preserve">
          <source>This event is guaranteed to be passed an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">이 이벤트는 사용자가 &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; 이외의 소켓 유형을 지정하지 않는 한 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt; 의 하위 클래스 인 &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; 클래스 의 인스턴스로 전달 됩니다.</target>
        </trans-unit>
        <trans-unit id="75422882f2f82b5d0be7feca6a3f569c0c1ba060" translate="yes" xml:space="preserve">
          <source>This event is purely informational and will be emitted only when &lt;code&gt;preferredAddressPolicy&lt;/code&gt; is set to &lt;code&gt;'accept'&lt;/code&gt;.</source>
          <target state="translated">이 이벤트는 순전히 정보 용이며 &lt;code&gt;preferredAddressPolicy&lt;/code&gt; 가 &lt;code&gt;'accept'&lt;/code&gt; 로 설정된 경우에만 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="a8a890977d51324cd393c8898f763d1cb6d447e8" translate="yes" xml:space="preserve">
          <source>This event is the same as the one provided by &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 이벤트는 &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; 제공하는 이벤트와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="8091d5c0132da2ce578d23516bf7b26daf3174a5" translate="yes" xml:space="preserve">
          <source>This event might not be emitted if &lt;code&gt;http2stream.end()&lt;/code&gt; is called before trailers are received and the incoming data is not being read or listened for.</source>
          <target state="translated">트레일러를 수신하기 전에 &lt;code&gt;http2stream.end()&lt;/code&gt; 를 호출하고 수신 데이터를 읽거나 수신 하지 않으면이 이벤트가 생성되지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e42e31a1c6291ea1620368f27b2644f12f5bfaa" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the Addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">이 예에서는 전체 &lt;code&gt;module&lt;/code&gt; 객체를 두 번째 인수로 받는 두 인수 형식의 &lt;code&gt;Init()&lt;/code&gt; 합니다 . 이를 통해 애드온 은 함수를 &lt;code&gt;exports&lt;/code&gt; 속성으로 추가하는 대신 단일 함수로 &lt;code&gt;exports&lt;/code&gt; 를 완전히 덮어 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d0a35cc513f8432ce78b0f093625a881d170862" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">이 예제에서는 두 번째 인수로 전체 &lt;code&gt;module&lt;/code&gt; 객체 를받는 &lt;code&gt;Init()&lt;/code&gt; 의 두 인수 형식을 사용합니다 . 이것은 완전히 덮어 쓰기에 부가 할 수 있습니다 &lt;code&gt;exports&lt;/code&gt; 대신 속성으로 기능을 추가 한 기능 &lt;code&gt;exports&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c53e228887749d0c0419e29bc7e571d4700538a6" translate="yes" xml:space="preserve">
          <source>This example will echo back all messages from the master:</source>
          <target state="translated">이 예는 마스터의 모든 메시지를 에코합니다.</target>
        </trans-unit>
        <trans-unit id="a85c797866ee7d1ad692e8f7298750e061674f0a" translate="yes" xml:space="preserve">
          <source>This feature depends on the underlying operating system providing a way to be notified of filesystem changes.</source>
          <target state="translated">이 기능은 파일 시스템 변경 사항을 알리는 방법을 제공하는 기본 운영 체제에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="eacad87587423d69625ed5d43b2a928821b829b6" translate="yes" xml:space="preserve">
          <source>This feature has been removed.</source>
          <target state="translated">이 기능은 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="0fe4cf3e3f69627b03a85ed87c00d5a21b561899" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and behavior might still change.</source>
          <target state="translated">이 기능은 현재 실험적이며 동작은 계속 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b9672c5c130d16069c2cb01cb9a6fb0915f6961" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and the name might change or it might be completely removed again.</source>
          <target state="translated">이 기능은 현재 실험적이며 이름이 변경되거나 완전히 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de2bb0948bf98b0d72951fab0d71632f50f1639c" translate="yes" xml:space="preserve">
          <source>This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드 에서는이 기능을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="318da36545ca71c8357ead6931515e132410af72" translate="yes" xml:space="preserve">
          <source>This feature is only available if the &lt;code&gt;node&lt;/code&gt; executable was compiled with &lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU&lt;/a&gt; enabled. If not, the domain names are passed through unchanged.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU가&lt;/a&gt; 활성화 된 상태 에서 &lt;code&gt;node&lt;/code&gt; 실행 파일이 컴파일 된 경우에만 사용할 수 있습니다 . 그렇지 않은 경우 도메인 이름은 변경되지 않은 상태로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="24575865cd6d6f55d849bfe1f2634b05ebf883a9" translate="yes" xml:space="preserve">
          <source>This field defines &lt;a href=&quot;#packages_subpath_imports&quot;&gt;subpath imports&lt;/a&gt; for the current package.</source>
          <target state="translated">이 필드는 현재 패키지에 대한 &lt;a href=&quot;#packages_subpath_imports&quot;&gt;하위 경로 가져 오기&lt;/a&gt; 를 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="353351e40895571a9fe1a94d54ee8ac76890b44d" translate="yes" xml:space="preserve">
          <source>This flag exists so that the main module can be opted-in to the same behavior that &lt;code&gt;--preserve-symlinks&lt;/code&gt; gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.</source>
          <target state="translated">이 플래그는 기본 모듈이 &lt;code&gt;--preserve-symlinks&lt;/code&gt; 가 다른 모든 가져 오기에 제공 하는 것과 동일한 동작을 수행 할 수 있도록하기 위해 존재합니다 . 그러나 이전 Node.js 버전과의 호환성을 위해 별도의 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="22fd36e23827a3db1f425306badbacaded4ffb64" translate="yes" xml:space="preserve">
          <source>This flag exists to aid in experimentation with the internal implementation of the Node.js http parser. This flag is likely to become a no-op and removed at some point in the future.</source>
          <target state="translated">이 플래그는 Node.js http 파서의 내부 구현을 실험하는 데 도움을주기 위해 존재합니다. 이 플래그는 아무런 문제가 없어 향후 어느 시점에서 제거 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="62d2caffde3a99f9ad79f9ef28e6d3f1fc2ba015" translate="yes" xml:space="preserve">
          <source>This flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release.</source>
          <target state="translated">This flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release.</target>
        </trans-unit>
        <trans-unit id="0ef0d9ec3e79a5d118740d96d95026bba3f19b0a" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Readable&lt;/code&gt; class methods only.</source>
          <target state="translated">이 함수는 응용 프로그램 코드에서 직접 호출해서는 안됩니다. 하위 클래스로 구현해야하며 내부 &lt;code&gt;Readable&lt;/code&gt; 클래스 메소드에서만 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="49a676e99b324309fcea6e9319c1afc529b01374" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">이 함수는 응용 프로그램 코드에서 직접 호출해서는 안됩니다. 자식 클래스로 구현해야하며 내부 &lt;code&gt;Writable&lt;/code&gt; 클래스 메서드 만 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1f33ccfcd0f74d271bd116cb4c56da77fb246945" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt;, which has the same signature. Callbacks are run in last-in first-out order.</source>
          <target state="translated">This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; , which has the same signature. Callbacks are run in last-in first-out order.</target>
        </trans-unit>
        <trans-unit id="3de80300bdb948c051cf6cc4090a49b1df7ff897" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; before they are run, which has the same signature.</source>
          <target state="translated">이 함수는 주어진 Node.js 인스턴스가 종료되기 전에 실행될 후크를 추가합니다. 필요한 경우, 같은 후크를 실행하기 전에 &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; 사용하여 이러한 후크를 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="90ca9c092fb3cd108c85d11cc79640ed5f5ff9ea" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;, with some exceptions:</source>
          <target state="translated">이 함수는 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt; 과 같이 작동하지만 몇 가지 예외가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b68ec689236f9a0971c9dc975d6d90cad1215953" translate="yes" xml:space="preserve">
          <source>This function can be overwritten by providing alternative function as part of the &lt;code&gt;options.checkServerIdentity&lt;/code&gt; option passed to &lt;code&gt;tls.connect()&lt;/code&gt;. The overwriting function can call &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; of course, to augment the checks done with additional verification.</source>
          <target state="translated">&lt;code&gt;tls.connect()&lt;/code&gt; 전달 된 &lt;code&gt;options.checkServerIdentity&lt;/code&gt; 옵션의 일부로 대체 함수를 제공 하여이 함수를 겹쳐 쓸 수 있습니다 . 덮어 쓰기 기능 은 물론 &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; 를 호출 하여 추가 확인으로 수행 된 검사를 보강 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19be6f8a2996df1dc3d420cff41c083dff365e49" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt;&lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">이 함수 는 모든 옵션이 기본값으로 설정된 새 &lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 을 생성하고 즉시 &lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt; &lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt; &lt;/a&gt; 연결을 시작한 다음 연결을 시작하는 &lt;code&gt;net.Socket&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e1ad29049dcb1287306ecc15dd61f9a7c9096e21" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt;&lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">이 함수 는 모든 옵션이 기본값으로 설정된 새 &lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 을 생성하고 즉시 &lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt; &lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt; &lt;/a&gt; 연결을 시작한 다음 연결을 시작하는 &lt;code&gt;net.Socket&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cb7a012e16cda321f95feeb4747e891fbb16db52" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will resolve the &lt;code&gt;Promise&lt;/code&gt; with an error using code &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">이 기능은 7.1 이전의 AIX 버전에서는 작동하지 않으며 &lt;code&gt;UV_ENOSYS&lt;/code&gt; 코드를 사용하여 오류로 &lt;code&gt;Promise&lt;/code&gt; 을 해결합니다 .</target>
        </trans-unit>
        <trans-unit id="42b8c900f932b0d2bf423ef68b4068f49e84544a" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will return the error &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">이 기능은 7.1 이전의 AIX 버전에서는 작동하지 않으며 &lt;code&gt;UV_ENOSYS&lt;/code&gt; 오류를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5697cdda4de768e2cf54b723a122efe5653b963a" translate="yes" xml:space="preserve">
          <source>This function ensures that &lt;code&gt;path&lt;/code&gt; is resolved absolutely, and that the URL control characters are correctly encoded when converting into a File URL.</source>
          <target state="translated">이 기능을 사용하면 &lt;code&gt;path&lt;/code&gt; 를 절대적으로 확인하고 파일 URL로 변환 할 때 URL 제어 문자가 올바르게 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="1108aee998992248b38802c507c72b2ed7d96209" translate="yes" xml:space="preserve">
          <source>This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.</source>
          <target state="translated">이 기능은 퍼센트로 인코딩 된 문자의 올바른 디코딩을 보장 할뿐만 아니라 플랫폼 간 유효한 절대 경로 문자열을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="a70fc6c3e16322065cdff0ce2620dd70b68cc89b" translate="yes" xml:space="preserve">
          <source>This function executes a string of JavaScript code and returns its result with the following caveats:</source>
          <target state="translated">This function executes a string of JavaScript code and returns its result with the following caveats:</target>
        </trans-unit>
        <trans-unit id="c6da0e5af272e064260e3498115fb5e36dc75e6f" translate="yes" xml:space="preserve">
          <source>This function fills the &lt;code&gt;version&lt;/code&gt; struct with the major, minor, and patch version of Node.js that is currently running, and the &lt;code&gt;release&lt;/code&gt; field with the value of &lt;a href=&quot;process#process_process_release&quot;&gt;&lt;code&gt;process.release.name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수 는 현재 실행중인 Node.js의 주 &lt;code&gt;version&lt;/code&gt; , 부 버전 및 패치 버전으로 version 구조체를 채우고 &lt;a href=&quot;process#process_process_release&quot;&gt; &lt;code&gt;process.release.name&lt;/code&gt; &lt;/a&gt; 값으로 &lt;code&gt;release&lt;/code&gt; 필드를 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="4badebe3055deecf26d575320a5dc0d908bb82ac" translate="yes" xml:space="preserve">
          <source>This function gives V8 an indication of the amount of externally allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript object that points to its own memory allocated by a native module). Registering externally allocated memory will trigger global garbage collections more often than it would otherwise.</source>
          <target state="translated">이 함수는 V8에 JavaScript 객체 (즉, 고유 모듈이 할당 한 자체 메모리를 가리키는 JavaScript 객체)에 의해 유지되는 외부 할당 메모리의 양을 표시합니다. 외부 할당 메모리를 등록하면 그렇지 않은 경우보다 전역 가비지 콜렉션이 더 자주 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="b17195473e810af1aa1ea35771a8d98831afcd81" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="daa92f9057f7e94696ed20cc3e8e5783964bde9d" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c87095fe78fe415ecf76676138daab46f795497" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint16BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a599fe2ebb6e0c90f94e70d45ed6a6288849ec55" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint16LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ddf061751bfc021947a9bb28f05d5f92b30e724" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint32BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d062235ab556e4b8b487be4c2cbf719bc71bb59c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint32LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ca68f13ed6e5def2798c66c6ee71a5996cfd8f9" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint8()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint8()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba4f4188ecc0c8acd718f14536ebb52296b31683" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintBE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUintBE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="acda940e611ac5151444acf58a6c596bc91a4ff5" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintLE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUintLE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eae0c648e7e8b4c6c06ab3bdc166c10fd01a29bc" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d989597ca83ce92b2ebc974227e030f79836246b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7882fe6b12a08ba2ecedc0ac073aa0c6926d56e8" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint16BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd4ede003e84631aa7ba9cf2c18f90f4daa2ea5b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint16LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ca2a193ac4613205dba1af950bb14e9c274d1578" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint32BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc823e61d2d24573479596ab4f4b6978195712b4" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint32LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41d2df3a4f68377357ed939a55b364d4097c457c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint8()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint8()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="402a6fa5e58d03fc7bbe60b46e8a7c35f0c26ebd" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintBE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUintBE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03a24117e8fc9cb06efe4145ec7da0fd24e48708" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintLE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUintLE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b21315d0885d32ae17e3f8adb7e9b7d15b184de6" translate="yes" xml:space="preserve">
          <source>This function is asynchronous because the ES module resolver in Node.js is allowed to be asynchronous.</source>
          <target state="translated">이 함수는 Node.js의 ES 모듈 리졸버가 비동기식 일 수 있기 때문에 비동기식입니다.</target>
        </trans-unit>
        <trans-unit id="857c61c4553c47ab5c22be99637b828b0046272f" translate="yes" xml:space="preserve">
          <source>This function is asynchronous because the ES module resolver in Node.js is asynchronous. With the introduction of &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-Level Await&lt;/a&gt;, these use cases will be easier as they won't require an async function wrapper.</source>
          <target state="translated">This function is asynchronous because the ES module resolver in Node.js is asynchronous. With the introduction of &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-Level Await&lt;/a&gt;, these use cases will be easier as they won't require an async function wrapper.</target>
        </trans-unit>
        <trans-unit id="aa1a128b76492cea694295767529e32daed47241" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the connection is established, the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted. If there is a problem connecting, instead of a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event, an &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event will be emitted with the error passed to the &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; listener. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="translated">이 기능은 비동기식입니다. 연결이 설정되면 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성됩니다. 연결에 문제가 있으면 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트 대신 &lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt; 리스너에 전달 된 오류와 함께 &lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성됩니다 . 제공된 경우 마지막 매개 변수 &lt;code&gt;connectListener&lt;/code&gt; 가 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트 의 리스너로 &lt;strong&gt;한 번 추가&lt;/strong&gt; 됩니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04d4248379ca91265c113f72fb881941a2bc6374" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the server starts listening, the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event will be emitted. The last parameter &lt;code&gt;callback&lt;/code&gt; will be added as a listener for the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">이 기능은 비동기식입니다. 서버가 청취를 시작하면 &lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성됩니다. 마지막 매개 변수 &lt;code&gt;callback&lt;/code&gt; 은 &lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt; 이벤트에 대한 리스너로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="2bee66a03f4e0be219c5798f053d5e9b9c3e847d" translate="yes" xml:space="preserve">
          <source>This function is based on a constant-time algorithm. Returns true if &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;b&lt;/code&gt;, without leaking timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or &lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;capability urls&lt;/a&gt;.</source>
          <target state="translated">이 기능은 상수 시간 알고리즘을 기반으로합니다. true의 경우 반환 &lt;code&gt;a&lt;/code&gt; 동일 &lt;code&gt;b&lt;/code&gt; 공격자가 값 중 하나를 추측 할 수 있도록 할 타이밍 정보를 누출하지 않고. 인증 쿠키 또는 &lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;기능 URL&lt;/a&gt; 과 같은 HMAC 다이제스트 또는 비밀 값을 비교하는 데 적합합니다 .</target>
        </trans-unit>
        <trans-unit id="7f26bf91d7cc00bfeb0aad8763630fd384b5df2c" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;a href=&quot;#util_util_format_format_args&quot;&gt;&lt;code&gt;util.format()&lt;/code&gt;&lt;/a&gt;, except in that it takes an &lt;code&gt;inspectOptions&lt;/code&gt; argument which specifies options that are passed along to &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기능은 동일하다 &lt;a href=&quot;#util_util_format_format_args&quot;&gt; &lt;code&gt;util.format()&lt;/code&gt; &lt;/a&gt; 그것이 걸리는 제외 &lt;code&gt;inspectOptions&lt;/code&gt; 의 인자에 따라 어떤 전달되는 지정 옵션 &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="617bb9f000f555b14d080241e1d35366b287a613" translate="yes" xml:space="preserve">
          <source>This function is not completely equivalent to &lt;code&gt;querystring.parse()&lt;/code&gt;. One difference is that &lt;code&gt;querystring.parse()&lt;/code&gt; does url decoding:</source>
          <target state="translated">이 함수는 &lt;code&gt;querystring.parse()&lt;/code&gt; 와 완전히 동일하지 않습니다 . 한 가지 차이점은 &lt;code&gt;querystring.parse()&lt;/code&gt; 가 URL 디코딩을 수행 한다는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="eb6a3e28055b4eb1c155f9eed1a1ea921b27b662" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform</source>
          <target state="translated">이 함수는 이제 플랫폼 간 일관성을 유지하며 더 이상 플랫폼에서 슬래시가있는 경로를 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="547b61aa8084b6f0d2b8892c94a1327d80d9a29d" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform.</source>
          <target state="translated">This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform.</target>
        </trans-unit>
        <trans-unit id="e0d18b4c1d734142a1855c74af4c046ac1c0027b" translate="yes" xml:space="preserve">
          <source>This function is only available for zlib-based streams, i.e. not Brotli.</source>
          <target state="translated">이 기능은 zlib 기반 스트림에만 사용할 수 있습니다 (예 : Brotli).</target>
        </trans-unit>
        <trans-unit id="8a50b04599b1f0639a100cf46f5d1c6f9b45123c" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android).</source>
          <target state="translated">이 기능은 POSIX 플랫폼에서만 사용할 수 있습니다 (예 : Windows 또는 Android 제외).</target>
        </trans-unit>
        <trans-unit id="dcddf4c38c715eb9dc19e1f8b915629007eb9f86" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">이 기능은 POSIX 플랫폼에서만 사용할 수 있습니다 (예 : Windows 또는 Android 제외). &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드 에서는이 기능을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9b8337051652d8cca59af0a3ee06f51154cfa9f8" translate="yes" xml:space="preserve">
          <source>This function is only called if the certificate passed all other checks, such as being issued by trusted CA (&lt;code&gt;options.ca&lt;/code&gt;).</source>
          <target state="translated">이 기능은 인증서가 신뢰할 수있는 CA ( &lt;code&gt;options.ca&lt;/code&gt; ) 에서 발급 한 것과 같은 다른 모든 검사를 통과 한 경우에만 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="4dd8d9762971f53a0f4b9c54c5b91e951886daa4" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; but requires the first argument to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; that will be filled. It also requires that a callback is passed in.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt; &lt;code&gt;crypto.randomBytes()&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 첫 번째 인수 는 채워질 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; 여야합니다 . 또한 콜백이 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="a0be84b52a05de61cb37d8e8aafedfc9056c383b" translate="yes" xml:space="preserve">
          <source>This function now returns a Promise. Passing a callback is deprecated, and was useless up to this version, as the Worker was actually terminated synchronously. Terminating is now a fully asynchronous operation.</source>
          <target state="translated">이 함수는 이제 약속을 반환합니다. 작업자가 실제로 동기식으로 종료되었으므로 콜백 전달은 더 이상 사용되지 않으며이 버전까지는 쓸모가 없었습니다. 종료는 이제 완전히 비동기 작업입니다.</target>
        </trans-unit>
        <trans-unit id="adc390dbb0e012efb77ff501c95f1aa407517c06" translate="yes" xml:space="preserve">
          <source>This function now supports IEEE-P1363 DSA and ECDSA signatures.</source>
          <target state="translated">이 기능은 이제 IEEE-P1363 DSA 및 ECDSA 서명을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="894173e491bab80c84c852bbf2fd895d54ca239e" translate="yes" xml:space="preserve">
          <source>This function now supports RSA-PSS keys.</source>
          <target state="translated">이 기능은 이제 RSA-PSS 키를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="1d299f2177608180223cfccb77b867a0f516eab6" translate="yes" xml:space="preserve">
          <source>This function now supports key objects.</source>
          <target state="translated">이 기능은 이제 주요 객체를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="91771921fecce0493df003c3b93efccae8cfb43d" translate="yes" xml:space="preserve">
          <source>This function operates asynchronously. The &lt;code&gt;'close'&lt;/code&gt; event will be emitted when the server has no more open connections.</source>
          <target state="translated">이 기능은 비동기 적으로 작동합니다. &lt;code&gt;'close'&lt;/code&gt; 서버가 더 이상 열린 연결이있는 경우 이벤트가 방출됩니다.</target>
        </trans-unit>
        <trans-unit id="0516587396d5bc4b5aea745b473a81786e9cfdf7" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker is connected to its master via its IPC channel, &lt;code&gt;false&lt;/code&gt; otherwise. A worker is connected to its master after it has been created. It is disconnected after the &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted.</source>
          <target state="translated">이 함수는 작업자가 IPC 채널을 통해 마스터에 연결되어 있으면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다. 작업자는 생성 된 후 마스터에 연결됩니다. &lt;code&gt;'disconnect'&lt;/code&gt; 이벤트가 생성 된 후 연결이 끊어 집니다.</target>
        </trans-unit>
        <trans-unit id="a3544713b214d05ed5bf6d144fbd49ea7c59cdb9" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker's process has terminated (either because of exiting or being signaled). Otherwise, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 함수는 작업자 프로세스가 종료되거나 종료되어 신호를 보내면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="28d972587f7fd8928ac54fe47aed457c4167ba5b" translate="yes" xml:space="preserve">
          <source>This function should only be used for reconnecting a socket after &lt;code&gt;'close'&lt;/code&gt; has been emitted or otherwise it may lead to undefined behavior.</source>
          <target state="translated">This function should only be used for reconnecting a socket after &lt;code&gt;'close'&lt;/code&gt; has been emitted or otherwise it may lead to undefined behavior.</target>
        </trans-unit>
        <trans-unit id="af382458c7c1694962f7272d5dc6257cee21c759" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">이 기능은 옵션으로 추가 인수에 소요 &lt;code&gt;err&lt;/code&gt; - &lt;code&gt;Error&lt;/code&gt; 보고서에 인쇄 된 자바 스크립트 스택의 컨텍스트로 사용됩니다 개체를.</target>
        </trans-unit>
        <trans-unit id="85a6696b2b5e9ad1b7f6b1c4ddafeb81b81510f6" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">이 기능은 옵션으로 추가 인수에 소요 &lt;code&gt;err&lt;/code&gt; - &lt;code&gt;Error&lt;/code&gt; 보고서에 인쇄 된 자바 스크립트 스택의 컨텍스트로 사용됩니다 개체를. 콜백 또는 예외 처리기에서 오류를 처리하기 위해 보고서를 사용할 때 보고서는 원래 오류의 위치와 처리 된 위치를 보고서에 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2598594008e308c577b78ccab80128ea1021d684" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</target>
        </trans-unit>
        <trans-unit id="5aed6487576d7dd9ad1eb9e85fc412600a086575" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt;, which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; , which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</target>
        </trans-unit>
        <trans-unit id="77ea37c691223737f81084a936fc91467e04f445" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;filename&lt;/code&gt;, which is the name of a file into which the report is written.</source>
          <target state="translated">이 함수는 보고서를 작성하는 파일의 이름 인 선택적 추가 인수 &lt;code&gt;filename&lt;/code&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5f1d19a17165c41d2e0284a1b5c28f86bd5da3dc" translate="yes" xml:space="preserve">
          <source>This function will kill the worker. In the master, it does this by disconnecting the &lt;code&gt;worker.process&lt;/code&gt;, and once disconnected, killing with &lt;code&gt;signal&lt;/code&gt;. In the worker, it does it by disconnecting the channel, and then exiting with code &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">이 기능은 작업자를 죽일 것입니다. 마스터에서는 &lt;code&gt;worker.process&lt;/code&gt; 의 연결을 끊고 일단 연결이 끊기면 &lt;code&gt;signal&lt;/code&gt; 로 종료 됩니다. 작업자는 채널 연결을 끊고 코드 &lt;code&gt;0&lt;/code&gt; 으로 종료하여 작업을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="fc334c0e240796cb69b50cfdf422e85bbfb6b48c" translate="yes" xml:space="preserve">
          <source>This functionality has been removed.</source>
          <target state="translated">이 기능은 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="36e8179328462918849467415bc6e47b53741e6f" translate="yes" xml:space="preserve">
          <source>This happens when:</source>
          <target state="translated">다음과 같은 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c6a7c9955e027e73c53547cdbc2c54fa7e69027d" translate="yes" xml:space="preserve">
          <source>This has the same false positives and negatives as described in &lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt;&lt;code&gt;writeStream.getColorDepth()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt; &lt;code&gt;writeStream.getColorDepth()&lt;/code&gt; &lt;/a&gt; 설명 된 것과 같은 오 탐지와 오 탐지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="af19c7ad3abc63f1d8cfd897e2ce7c93b37d4059" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also currently no way to interact with the Loader, though support is planned.</source>
          <target state="translated">이 구현은 &lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript 모듈 로더&lt;/a&gt; 보다 낮은 레벨에 있습니다. 지원이 계획되어 있지만 현재 로더와 상호 작용할 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="4cc43cf5c93c4064080045c3dcadfc716ce173eb" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also no way to interact with the Loader yet, though support is planned.</source>
          <target state="translated">This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also no way to interact with the Loader yet, though support is planned.</target>
        </trans-unit>
        <trans-unit id="21807510feb784cd93fc683e3bd54b0664e06913" translate="yes" xml:space="preserve">
          <source>This implementation matches &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;browser &lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">이 구현은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;브라우저 &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt; 와 일치 합니다 .</target>
        </trans-unit>
        <trans-unit id="7a7d6f9a64fbfdcb7e7c59dad106536b0e46b04e" translate="yes" xml:space="preserve">
          <source>This integration is in line with the &lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;ES Module Integration Proposal for Web Assembly&lt;/a&gt;.</source>
          <target state="translated">이 통합은 &lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;웹 어셈블리를위한 ES 모듈 통합 제안&lt;/a&gt; 과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="6b04d8ad3ebc5af27ac4b4e1c10756739a2d2124" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the socket is not connected yet, either because &lt;code&gt;.connect()&lt;/code&gt; has not yet been called or because it is still in the process of connecting (see &lt;a href=&quot;#net_socket_connecting&quot;&gt;&lt;code&gt;socket.connecting&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이다 &lt;code&gt;true&lt;/code&gt; 소켓이 아직 접속되어 있지 않은 경우 하나 때문에, &lt;code&gt;.connect()&lt;/code&gt; 아직 호출되지 않았거나이 (참조 연결하는 과정에서 여전히 있기 때문에 &lt;a href=&quot;#net_socket_connecting&quot;&gt; &lt;code&gt;socket.connecting&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="44a2b92c720faf1d8972e612940550448cb632ce" translate="yes" xml:space="preserve">
          <source>This is a direct static replacement without any special handling for file extensions. In the previous example, &lt;code&gt;pkg/features/x.json&lt;/code&gt; would be resolved to &lt;code&gt;./src/features/x.json.js&lt;/code&gt; in the mapping.</source>
          <target state="translated">이것은 파일 확장자에 대한 특별한 처리가없는 직접적인 정적 대체입니다. 이전 예에서 &lt;code&gt;pkg/features/x.json&lt;/code&gt; 은 매핑에서 &lt;code&gt;./src/features/x.json.js&lt;/code&gt; 로 확인됩니다 .</target>
        </trans-unit>
        <trans-unit id="c6a303413dae5cf2f56522f80094d23bc472745a" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">Node.js 프로그램을 작성할 때 일반적으로 발생하는 시스템 오류 목록입니다. 전체 목록은 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; (3) 매뉴얼 페이지를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6384af73049677961508c308274b10195affbf33" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; (3) man page&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="615981803bb95c92778608ec98aa86e6b7bec7bb" translate="yes" xml:space="preserve">
          <source>This is a property on the &lt;code&gt;buffer&lt;/code&gt; module returned by &lt;code&gt;require('buffer')&lt;/code&gt;, not on the &lt;code&gt;Buffer&lt;/code&gt; global or a &lt;code&gt;Buffer&lt;/code&gt; instance.</source>
          <target state="translated">이것은 &lt;code&gt;Buffer&lt;/code&gt; 전역 또는 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스가 아닌 &lt;code&gt;require('buffer')&lt;/code&gt; 가 반환 한 &lt;code&gt;buffer&lt;/code&gt; 모듈 의 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="8e9c8d44f5ae37ba8f8822ae889f6fbab37889e9" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stderr: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data is piped to the parent thread's &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">이것은 작업자 스레드 내의 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 에&lt;/a&gt; 기록 된 데이터를 포함하는 읽을 수있는 스트림입니다 . &lt;code&gt;stderr: true&lt;/code&gt; 가 &lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자에 전달되지 않은 경우 데이터는 부모 스레드의 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt; 스트림으로 파이프됩니다 .</target>
        </trans-unit>
        <trans-unit id="22812016d42b8d66cb470ae9bc87b4d2aece8842" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stderr: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">이것은 작업자 스레드 내부에서 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 에&lt;/a&gt; 기록 된 데이터를 포함하는 읽기 가능한 스트림입니다 . 경우 &lt;code&gt;stderr: true&lt;/code&gt; 에 전달되지 않은 &lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자, 다음 데이터는 상위 스레드의에 파이프됩니다 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 의&lt;/a&gt; 스트림입니다.</target>
        </trans-unit>
        <trans-unit id="4977112dc8895492fcdb336f69df176a64b12c69" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stdout: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data is piped to the parent thread's &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">이것은 작업자 스레드 내의 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 에&lt;/a&gt; 기록 된 데이터를 포함하는 읽기 가능한 스트림입니다 . &lt;code&gt;stdout: true&lt;/code&gt; 가 &lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자에 전달되지 않은 경우 데이터는 부모 스레드의 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt; 스트림으로 파이프됩니다 .</target>
        </trans-unit>
        <trans-unit id="ef6edca8b742a017994b5d4c4977f24985399057" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stdout: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">이것은 작업자 스레드 내부에서 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 에&lt;/a&gt; 기록 된 데이터를 포함하는 읽기 가능한 스트림입니다 . 경우 &lt;code&gt;stdout: true&lt;/code&gt; 에 전달되지 않은 &lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자, 다음 데이터는 상위 스레드의에 파이프됩니다 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 의&lt;/a&gt; 스트림입니다.</target>
        </trans-unit>
        <trans-unit id="6afd75c5ddd399af67dafff5027ffe863f1e6152" translate="yes" xml:space="preserve">
          <source>This is also emitted in case this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream emits an error when a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream pipes into it.</source>
          <target state="translated">&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 스트림이 파이프에 들어갈 때이 &lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;가능 스트림 에서 오류가 발생하는 경우에도 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="7266000cead4bb9d2f0e14e9324975faa9eb3a46" translate="yes" xml:space="preserve">
          <source>This is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, N-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, N-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.</source>
          <target state="translated">이것은 특정 범위 내에서 생성 된 객체의 수명을 제어하고 수정하는 데 사용되는 추상화입니다. 일반적으로 N-API 값은 핸들 범위의 컨텍스트 내에서 작성됩니다. JavaScript에서 기본 메소드를 호출하면 기본 핸들 범위가 존재합니다. 사용자가 새 핸들 범위를 명시 적으로 작성하지 않으면 기본 핸들 범위에서 N-API 값이 작성됩니다. 원시 메소드 실행 이외의 코드 호출 (예 : libuv 콜백 호출 중)의 경우, 모듈은 JavaScript 값을 작성할 수있는 함수를 호출하기 전에 범위를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="ac28259e1a0df374cd212eac367f298bb33dcf21" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that is used to represent a JavaScript value.</source>
          <target state="translated">JavaScript 값을 나타내는 데 사용되는 불투명 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="9f727952d85916df43ab81b94013dad46a0ffb66" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that represents a JavaScript function which can be called asynchronously from multiple threads via &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 통해 여러 스레드에서 비동기 적으로 호출 할 수있는 JavaScript 함수를 나타내는 불투명 포인터입니다 .</target>
        </trans-unit>
        <trans-unit id="a4d7f80ddbb26766196c61aca550b0031231b661" translate="yes" xml:space="preserve">
          <source>This is automatically called by any readline instance on its &lt;code&gt;input&lt;/code&gt; if the &lt;code&gt;input&lt;/code&gt; is a terminal. Closing the &lt;code&gt;readline&lt;/code&gt; instance does not stop the &lt;code&gt;input&lt;/code&gt; from emitting &lt;code&gt;'keypress'&lt;/code&gt; events.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 이 터미널 인 경우 &lt;code&gt;input&lt;/code&gt; 에서 readline 인스턴스가 자동으로 호출합니다 . 폐문 &lt;code&gt;readline&lt;/code&gt; 예를하면 멈추지 않는다 &lt;code&gt;input&lt;/code&gt; 발광에서 &lt;code&gt;'keypress'&lt;/code&gt; 이벤트를.</target>
        </trans-unit>
        <trans-unit id="7e70153317996f40a0e9f1af6e059c6c6470fbd1" translate="yes" xml:space="preserve">
          <source>This is defined exactly the same as it is in browsers providing the URL of the current module file.</source>
          <target state="translated">이것은 현재 모듈 파일의 URL을 제공하는 브라우저에서와 똑같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="513ca07430a1834e15b4c394a7795cf89cbe75bd" translate="yes" xml:space="preserve">
          <source>This is important when developing APIs in order to give users the opportunity to assign event handlers &lt;em&gt;after&lt;/em&gt; an object has been constructed but before any I/O has occurred:</source>
          <target state="translated">이는 객체를 생성 &lt;em&gt;한 후&lt;/em&gt; I / O가 발생하기 전에 사용자에게 이벤트 핸들러를 할당 할 수있는 기회를 제공하기 위해 API를 개발할 때 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="357a4cb22700e3b307528201a96ec4a2b0b9733a" translate="yes" xml:space="preserve">
          <source>This is in addition to a single internal output slab buffer of size &lt;code&gt;chunkSize&lt;/code&gt;, which defaults to 16K.</source>
          <target state="translated">이것은 &lt;code&gt;chunkSize&lt;/code&gt; 크기의 단일 내부 출력 슬래브 버퍼에 추가 되며 기본값은 16K입니다.</target>
        </trans-unit>
        <trans-unit id="0e3d91f0352da1646e45574d84c00b75bddafb4b" translate="yes" xml:space="preserve">
          <source>This is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.</source>
          <target state="translated">This is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.</target>
        </trans-unit>
        <trans-unit id="07ba21f3ad7e7c13655130ea573064167080a992" translate="yes" xml:space="preserve">
          <source>This is not a hard limit. The &lt;code&gt;EventEmitter&lt;/code&gt; instance will allow more listeners to be added but will output a trace warning to stderr indicating that a &quot;possible EventEmitter memory leak&quot; has been detected. For any single &lt;code&gt;EventEmitter&lt;/code&gt;, the &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; and &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; methods can be used to temporarily avoid this warning:</source>
          <target state="translated">이것은 하드 제한이 아닙니다. &lt;code&gt;EventEmitter&lt;/code&gt; 의 인스턴스보다 청취자 첨가하지만 열려진에 출력 할 것이다 추적 경고는 &quot;가능한 EventEmitter 메모리 누출&quot;검출되었다는 것을 표시 할 수 있도록한다. 단일 &lt;code&gt;EventEmitter&lt;/code&gt; 의 경우 &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; 및 &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; 메소드를 사용하여이 경고를 일시적으로 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d247546ea140a0078a900e014d8747b999296d6" translate="yes" xml:space="preserve">
          <source>This is not a problem in common cases with &lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;ascii&lt;/code&gt;. But it is advised to be mindful about this behavior when working with strings that could contain multi-byte characters.</source>
          <target state="translated">&lt;code&gt;latin1&lt;/code&gt; 또는 &lt;code&gt;ascii&lt;/code&gt; 의 일반적인 경우에는 문제가되지 않습니다 . 그러나 멀티 바이트 문자를 포함 할 수있는 문자열로 작업 할 때는이 동작에주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="3d02f8a61048e89839ba3d326aaa6f920c92db2d" translate="yes" xml:space="preserve">
          <source>This is not used in Node.js and is provided purely for completeness.</source>
          <target state="translated">This is not used in Node.js and is provided purely for completeness.</target>
        </trans-unit>
        <trans-unit id="1c66676dbad5fdaa521ab930e256e4fa335eadac" translate="yes" xml:space="preserve">
          <source>This is now defined as a shared symbol.</source>
          <target state="translated">이것은 이제 공유 심볼로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f5242dbc0ccf6b9ae1f9550732bf4ac3daf1ddd8" translate="yes" xml:space="preserve">
          <source>This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.</source>
          <target state="translated">이는 잠재적으로 오래된 로컬 캐시를 건너 뛸 수 있으므로 NFS 마운트에서 파일을 여는 데 주로 유용합니다. I / O 성능에 매우 큰 영향을 미치므로이 플래그를 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="13659d9d635a0bb9731d74ddaa44ccbacf7114d8" translate="yes" xml:space="preserve">
          <source>This is the abstraction to use to reference a &lt;code&gt;napi_value&lt;/code&gt;. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly.</source>
          <target state="translated">이것은 &lt;code&gt;napi_value&lt;/code&gt; 참조에 사용하는 추상화 입니다. 이를 통해 사용자는 최소 수명을 명시 적으로 정의하는 것을 포함하여 JavaScript 값의 수명을 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="34a774ab2a4921da0fd743e3684fff94908d9756" translate="yes" xml:space="preserve">
          <source>This is the extent of Node.js's awareness of &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="translated">이것은 &lt;code&gt;package.json&lt;/code&gt; 파일에 대한 Node.js의 인식 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="1b5770f4a8b8d2b91b8b89200402bfc85d1d9ae4" translate="yes" xml:space="preserve">
          <source>This is the extent of the awareness of &lt;code&gt;package.json&lt;/code&gt; files within Node.js.</source>
          <target state="translated">This is the extent of the awareness of &lt;code&gt;package.json&lt;/code&gt; files within Node.js.</target>
        </trans-unit>
        <trans-unit id="3d91ef4e57195bccfb6358ea28c6511e77bda4df" translate="yes" xml:space="preserve">
          <source>This is the final event emitted by any &lt;code&gt;Worker&lt;/code&gt; instance.</source>
          <target state="translated">This is the final event emitted by any &lt;code&gt;Worker&lt;/code&gt; instance.</target>
        </trans-unit>
        <trans-unit id="7b4dc164d26c00c2e0663b4d38c3db42c8434ee4" translate="yes" xml:space="preserve">
          <source>This is the legacy version of &lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt;&lt;code&gt;process.hrtime.bigint()&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;bigint&lt;/code&gt; was introduced in JavaScript.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; 가 JavaScript에 도입 되기 전의 기존 버전 인 &lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt; &lt;code&gt;process.hrtime.bigint()&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2525459183823536083e4ebd1435d86bbd1b85ed" translate="yes" xml:space="preserve">
          <source>This is the most basic way to use a domain.</source>
          <target state="translated">이것이 도메인을 사용하는 가장 기본적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="1676fe37f0f693d20c9747f533e8a540bc92910a" translate="yes" xml:space="preserve">
          <source>This is the primary entry-point for anyone wanting to interact with a named channel. It produces a channel object which is optimized to reduce overhead at publish time as much as possible.</source>
          <target state="translated">이것은 명명 된 채널과 상호 작용하려는 모든 사람을위한 기본 진입 점입니다. 가능한 한 게시 시간에 오버 헤드를 줄 이도록 최적화 된 채널 개체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="80b89f0e469cc98dfba15cb1d10494441d90a747" translate="yes" xml:space="preserve">
          <source>This is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.</source>
          <target state="translated">이것은 원시 HTTP 본문이며 사용될 수있는 상위 수준의 다중 부분 본문 인코딩과는 아무런 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="538139721ac2a46c540659479840eaa7091999c5" translate="yes" xml:space="preserve">
          <source>This is the same behavior as &lt;code&gt;buf.subarray()&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;buf.subarray()&lt;/code&gt; 와 동일한 동작 입니다.</target>
        </trans-unit>
        <trans-unit id="8885bf9fac1f550c45c516012648aa0d3c485186" translate="yes" xml:space="preserve">
          <source>This is the size (in bytes) of pre-allocated internal &lt;code&gt;Buffer&lt;/code&gt; instances used for pooling. This value may be modified.</source>
          <target state="translated">풀링에 사용되는 사전 할당 된 내부 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 크기 (바이트)입니다 . 이 값은 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48967cae6d1c2b0c2a13e4b791916ed7e65a4ccd" translate="yes" xml:space="preserve">
          <source>This is useful for tracking potential errors in an application while using the &lt;code&gt;Promise&lt;/code&gt; constructor, as multiple resolutions are silently swallowed. However, the occurrence of this event does not necessarily indicate an error. For example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt;&lt;code&gt;Promise.race()&lt;/code&gt;&lt;/a&gt; can trigger a &lt;code&gt;'multipleResolves'&lt;/code&gt; event.</source>
          <target state="translated">여러 해상도를 자동으로 삼키 므로 &lt;code&gt;Promise&lt;/code&gt; 생성자 를 사용하는 동안 응용 프로그램의 잠재적 오류를 추적하는 데 유용합니다 . 그러나이 이벤트가 반드시 오류를 나타내는 것은 아닙니다. 예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt; &lt;code&gt;Promise.race()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;'multipleResolves'&lt;/code&gt; 이벤트를 트리거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="01763a87bcd722e13be0664e3816427229bb3d32" translate="yes" xml:space="preserve">
          <source>This issue also occurs when the &lt;code&gt;loop()&lt;/code&gt; call is scheduled using the &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;queueMicrotask()&lt;/code&gt; functions.</source>
          <target state="translated">이 문제는 &lt;code&gt;process.nextTick()&lt;/code&gt; 및 &lt;code&gt;queueMicrotask()&lt;/code&gt; 함수를 사용하여 &lt;code&gt;loop()&lt;/code&gt; 호출이 예약 된 경우에도 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="c84e6ba5ec93b3229b046976c5bb2ea3de0008df" translate="yes" xml:space="preserve">
          <source>This issue occurs because all contexts share the same microtask and nextTick queues.</source>
          <target state="translated">이 문제는 모든 컨텍스트가 동일한 마이크로 태스크 및 nextTick 큐를 공유하기 때문에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="087b80944dc12b408a7190bd19a55dd80487fba1" translate="yes" xml:space="preserve">
          <source>This macro includes &lt;code&gt;NAPI_MODULE&lt;/code&gt;, and declares an &lt;code&gt;Init&lt;/code&gt; function with a special name and with visibility beyond the addon. This will allow Node.js to initialize the module even if it is loaded multiple times.</source>
          <target state="translated">이 매크로는 &lt;code&gt;NAPI_MODULE&lt;/code&gt; 을 포함 하고 특별한 이름과 애드온 이외의 가시성을 가진 &lt;code&gt;Init&lt;/code&gt; 함수를 선언합니다 . 이를 통해 Node.js가 여러 번로드 된 경우에도 모듈을 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65b6d753134ef1843140e701dbcf7c6cf6f1c011" translate="yes" xml:space="preserve">
          <source>This mainly adds some input validation on top of &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt;. As an additional convenience, &lt;code&gt;superConstructor&lt;/code&gt; will be accessible through the &lt;code&gt;constructor.super_&lt;/code&gt; property.</source>
          <target state="translated">이것은 주로 &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt; 위에 입력 유효성 검사를 추가합니다 . 편의상 &lt;code&gt;superConstructor&lt;/code&gt; 는 &lt;code&gt;constructor.super_&lt;/code&gt; 속성을 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bbe38e8ab91654a3718be6a69fd1e9049d8a23cf" translate="yes" xml:space="preserve">
          <source>This method adds HTTP trailing headers (a header but at the end of the message) to the response.</source>
          <target state="translated">이 메소드는 HTTP 후행 헤더 (메일의 끝에 있지만 헤더)를 응답에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="65a6ac889d5d3a2216eb8e367915333b528d1f56" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This API is similar to &lt;code&gt;napi_call_function&lt;/code&gt;. However, it is used to call &lt;em&gt;from&lt;/em&gt; native code back &lt;em&gt;into&lt;/em&gt; JavaScript &lt;em&gt;after&lt;/em&gt; returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around &lt;code&gt;node::MakeCallback&lt;/code&gt;.</source>
          <target state="translated">이 메소드를 사용하면 JavaScript 추가 기능에서 JavaScript 함수 오브젝트를 호출 할 수 있습니다. 이 API는 &lt;code&gt;napi_call_function&lt;/code&gt; 과 유사합니다 . 그러나 비동기 작업에서 돌아온 &lt;em&gt;후&lt;/em&gt; (스택에 다른 스크립트가없는 경우) 원시 코드 &lt;em&gt;에서&lt;/em&gt; JavaScript &lt;em&gt;로&lt;/em&gt; 다시 호출하는 데 사용됩니다 . &lt;code&gt;node::MakeCallback&lt;/code&gt; 주위에 상당히 간단한 래퍼 입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="314d268cd28ce9b140b0dded93860db9fb90479e" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This is the primary mechanism of calling back &lt;em&gt;from&lt;/em&gt; the add-on's native code &lt;em&gt;into&lt;/em&gt; JavaScript. For the special case of calling into JavaScript after an async operation, see &lt;a href=&quot;#n_api_napi_make_callback&quot;&gt;&lt;code&gt;napi_make_callback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드를 사용하면 JavaScript 추가 기능에서 JavaScript 함수 오브젝트를 호출 할 수 있습니다. 이것은 다시 호출하는 기본 메커니즘입니다 &lt;em&gt;에서&lt;/em&gt; 부가 기능의 네이티브 코드 &lt;em&gt;에&lt;/em&gt; 자바 스크립트를. 비동기 작업 후 JavaScript를 호출하는 특별한 경우는 &lt;a href=&quot;#n_api_napi_make_callback&quot;&gt; &lt;code&gt;napi_make_callback&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5b47fa157850c2f5703ae846bb53e6699d8248ed" translate="yes" xml:space="preserve">
          <source>This method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (see &lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt;&lt;code&gt;napi_property_descriptor&lt;/code&gt;&lt;/a&gt;). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by &lt;code&gt;DefineOwnProperty()&lt;/code&gt; (described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;Section 9.1.6&lt;/a&gt; of the ECMA-262 specification).</source>
          <target state="translated">이 방법을 사용하면 주어진 객체에서 여러 속성을 효율적으로 정의 할 수 있습니다. 속성은 속성 설명자를 사용하여 정의됩니다 ( &lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt; &lt;code&gt;napi_property_descriptor&lt;/code&gt; &lt;/a&gt; 참조 ). 이러한 속성 설명 자의 배열이 주어지면이 API는 &lt;code&gt;DefineOwnProperty()&lt;/code&gt; ( ECMA-262 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;섹션 9.1.6&lt;/a&gt; 에서 설명 )에 정의 된대로 한 번에 하나씩 객체의 속성을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="3024bc40da0e8b2f8456ff7b850738108b0ba432" translate="yes" xml:space="preserve">
          <source>This method calls &lt;code&gt;console.log()&lt;/code&gt; passing it the arguments received. This method does not produce any XML formatting.</source>
          <target state="translated">이 메소드는 수신 된 인수를 전달하여 &lt;code&gt;console.log()&lt;/code&gt; 를 호출합니다 . 이 방법은 XML 형식을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a58dad5fbe14785fff61707964fc0d135efd16a6" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass.</source>
          <target state="translated">이 메소드는 특정 &lt;code&gt;Agent&lt;/code&gt; 서브 클래스에 의해 대체 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="044476cda3ae03b23c22f5aa1722fe2c9153e73c" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass. If this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.</source>
          <target state="translated">이 메소드는 특정 &lt;code&gt;Agent&lt;/code&gt; 서브 클래스에 의해 대체 될 수 있습니다 . 이 메소드가 잘못된 값을 리턴하면 다음 요청에 사용하기 위해 소켓이 지속되지 않고 소멸됩니다.</target>
        </trans-unit>
        <trans-unit id="411dbf433a68f70422dbaf488ba5f65a2beaeff4" translate="yes" xml:space="preserve">
          <source>This method can be used to request a peer's certificate after the secure connection has been established.</source>
          <target state="translated">이 방법은 보안 연결이 설정된 후 피어의 인증서를 요청하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="880393178dbd75cbd21c9662d8dee3698a77a077" translate="yes" xml:space="preserve">
          <source>This method can be used, in particular, to increase cache hits.</source>
          <target state="translated">이 방법은 특히 캐시 적중을 늘리기 위해 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f4cb1d7d9a937c696a9d3a130cc76d5f3a14117" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;) to prevent infinite recursion.</source>
          <target state="translated">무한 재귀를 방지하기 위해 모듈을 평가하는 동안 ( &lt;code&gt;module.status&lt;/code&gt; 는 &lt;code&gt;'evaluating'&lt;/code&gt; ) 이 메소드를 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ae61ef6fb5c5e0b2e4e9dd9285bb0ec91b77d7af" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;).</source>
          <target state="translated">This method cannot be called while the module is being evaluated ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ce10b9da65b616da4694a90a9e7a21235864fb9b" translate="yes" xml:space="preserve">
          <source>This method defaults to the &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; constructor and can be overridden on subclasses.</source>
          <target state="translated">이 메소드는 기본적으로 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 생성자로 설정되며 서브 클래스에서 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe24c9359e77ab155e2cf5807443c493af258ac7" translate="yes" xml:space="preserve">
          <source>This method disables the instance of &lt;code&gt;AsyncLocalStorage&lt;/code&gt;. All subsequent calls to &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; until &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; is called again.</source>
          <target state="translated">This method disables the instance of &lt;code&gt;AsyncLocalStorage&lt;/code&gt; . All subsequent calls to &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; until &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; is called again.</target>
        </trans-unit>
        <trans-unit id="d59adf1d819f06dbe25fb548331d4b223442948c" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. Stops the current JavaScript CPU profiling session if one has been started and prints the report to the &lt;strong&gt;Profiles&lt;/strong&gt; panel of the inspector. See &lt;a href=&quot;#console_console_profile_label&quot;&gt;&lt;code&gt;console.profile()&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. 현재 JavaScript CPU 프로파일 링 세션이 시작된 경우이를 중지하고 보고서를 관리자 의 &lt;strong&gt;프로파일&lt;/strong&gt; 패널에 인쇄합니다 . 예제는 &lt;a href=&quot;#console_console_profile_label&quot;&gt; &lt;code&gt;console.profile()&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ec4a52764354b50bcb9a5cfff971e55a8182917" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.markTimeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timestamp_label&quot;&gt;&lt;code&gt;console.timeStamp()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.markTimeline()&lt;/code&gt; 메소드의 중단 된 형태 &lt;a href=&quot;#console_console_timestamp_label&quot;&gt; &lt;code&gt;console.timeStamp()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c9644bae39bdc4b2a06283995736aff4accc9db" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.profile()&lt;/code&gt; method starts a JavaScript CPU profile with an optional label until &lt;a href=&quot;#console_console_profileend_label&quot;&gt;&lt;code&gt;console.profileEnd()&lt;/code&gt;&lt;/a&gt; is called. The profile is then added to the &lt;strong&gt;Profile&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.profile()&lt;/code&gt; 메소드까지 옵션 레이블 자바 스크립트 CPU 프로파일 시작 &lt;a href=&quot;#console_console_profileend_label&quot;&gt; &lt;code&gt;console.profileEnd()&lt;/code&gt; &lt;/a&gt; 를 호출합니다. 그런 다음 프로파일이 인스펙터 의 &lt;strong&gt;프로파일&lt;/strong&gt; 패널에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="66b73ac52f9f87f1e288fc8b5563d582410feaa9" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeStamp()&lt;/code&gt; method adds an event with the label &lt;code&gt;'label'&lt;/code&gt; to the &lt;strong&gt;Timeline&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.timeStamp()&lt;/code&gt; 메소드는 라벨 추가 이벤트 &lt;code&gt;'label'&lt;/code&gt; 받는 &lt;strong&gt;타임 라인&lt;/strong&gt; 검사자의 패널.</target>
        </trans-unit>
        <trans-unit id="902c866e4222a0e01ce48bdc721e0e086336e617" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_time_label&quot;&gt;&lt;code&gt;console.time()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.timeline()&lt;/code&gt; 메소드의 중단 된 형태 &lt;a href=&quot;#console_console_time_label&quot;&gt; &lt;code&gt;console.time()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="89dc19b7a95d7304b45400b37628fe89d51d2642" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timelineEnd()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timeend_label&quot;&gt;&lt;code&gt;console.timeEnd()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.timelineEnd()&lt;/code&gt; 메소드의 중단 된 형태 &lt;a href=&quot;#console_console_timeend_label&quot;&gt; &lt;code&gt;console.timeEnd()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8f0d63d0d5a3ff9814f2a3fcabd14a01c8fd9857" translate="yes" xml:space="preserve">
          <source>This method exists for parity with the Web &lt;code&gt;MessagePort&lt;/code&gt; API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of &lt;code&gt;.onmessage&lt;/code&gt;. Setting it automatically calls &lt;code&gt;.start()&lt;/code&gt;, but unsetting it lets messages queue up until a new handler is set or the port is discarded.</source>
          <target state="translated">이 메소드는 Web &lt;code&gt;MessagePort&lt;/code&gt; API 와의 패리티를 위해 존재합니다 . Node.js에서는 이벤트 리스너가 없을 때 메시지를 무시하는 데만 유용합니다. Node.js는 &lt;code&gt;.onmessage&lt;/code&gt; 처리도 다릅니다 . 이를 설정하면 &lt;code&gt;.start()&lt;/code&gt; 자동으로 호출 하지만 설정을 해제하면 새 핸들러가 설정되거나 포트가 삭제 될 때까지 메시지가 대기 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ee1a742255ec0013c5a3a66d547b57b65aa47b9" translate="yes" xml:space="preserve">
          <source>This method exists for parity with the Web &lt;code&gt;MessagePort&lt;/code&gt; API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of &lt;code&gt;.onmessage&lt;/code&gt;. Setting it will automatically call &lt;code&gt;.start()&lt;/code&gt;, but unsetting it will let messages queue up until a new handler is set or the port is discarded.</source>
          <target state="translated">이 메소드는 Web &lt;code&gt;MessagePort&lt;/code&gt; API 와 동등 합니다. Node.js에서는 이벤트 리스너가 없을 때 메시지를 무시하는 데만 유용합니다. Node.js는 &lt;code&gt;.onmessage&lt;/code&gt; 처리도 다양 합니다. 설정하면 자동으로 &lt;code&gt;.start()&lt;/code&gt; 호출 되지만 설정을 해제하면 새 처리기가 설정되거나 포트가 삭제 될 때까지 메시지가 대기열에있게됩니다.</target>
        </trans-unit>
        <trans-unit id="1bd0e8798533a40b472a574de3407e9a7b72f42b" translate="yes" xml:space="preserve">
          <source>This method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;Section 19.1.2.6&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">This method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;Section 19.1.2.6&lt;/a&gt; of the ECMA-262 specification.</target>
        </trans-unit>
        <trans-unit id="3bfb7ad344e3264e6f56ee6b803df6669da02258" translate="yes" xml:space="preserve">
          <source>This method has a custom variant for promises that is available using &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 메소드에는 &lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt; 사용하여 사용할 수있는 약속에 대한 사용자 정의 변형이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ebe369db9ddb8e7879390ef6464dc095b38a390a" translate="yes" xml:space="preserve">
          <source>This method is &lt;em&gt;not&lt;/em&gt; to be used in production applications.</source>
          <target state="translated">이 방법은 프로덕션 응용 프로그램에서 사용 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d57d1e099a57589123cef0225673441664e1e377" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backward compatibility.</source>
          <target state="translated">This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backward compatibility.</target>
        </trans-unit>
        <trans-unit id="eb57dbb6c324bb36be5d114bc6d97130ad87632c" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backwards compatibility.</source>
          <target state="translated">이 메서드는 이전 버전과의 호환성을 위해 &lt;code&gt;worker.destroy()&lt;/code&gt; 로 별칭이 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="e775a3566b8847c710d9cc718838379fe8af31e8" translate="yes" xml:space="preserve">
          <source>This method is almost identical to &lt;a href=&quot;#domain_domain_bind_callback&quot;&gt;&lt;code&gt;domain.bind(callback)&lt;/code&gt;&lt;/a&gt;. However, in addition to catching thrown errors, it will also intercept &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; objects sent as the first argument to the function.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#domain_domain_bind_callback&quot;&gt; &lt;code&gt;domain.bind(callback)&lt;/code&gt; &lt;/a&gt; 과 거의 동일합니다 . 그러나 발생 된 오류를 포착 할뿐 아니라 함수에 대한 첫 번째 인수로 전송 된 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 객체 도 가로 챌 것 입니다.</target>
        </trans-unit>
        <trans-unit id="55fe8b47083e44662b3b21e0205abdb2450ff04a" translate="yes" xml:space="preserve">
          <source>This method is automatically called when an &lt;code&gt;URL&lt;/code&gt; object is serialized with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;URL&lt;/code&gt; 객체가 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; 직렬화 될 때 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="28801c3e02284a4ad1c8e05607ca10e063aca0d7" translate="yes" xml:space="preserve">
          <source>This method is called to generate error objects that will be thrown when an object can not be cloned.</source>
          <target state="translated">이 메소드는 오브젝트를 복제 할 수 없을 때 발생하는 오류 오브젝트를 생성하기 위해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="700f32b0f67ecb7c4ac4e3ae91ec634c886d4a35" translate="yes" xml:space="preserve">
          <source>This method is called to read some kind of host object, i.e. an object that is created by native C++ bindings. If it is not possible to deserialize the data, a suitable exception should be thrown.</source>
          <target state="translated">이 메소드는 일종의 호스트 오브젝트, 즉 원시 C ++ 바인딩으로 작성된 오브젝트를 읽기 위해 호출됩니다. 데이터를 직렬화 해제 할 수 없으면 적절한 예외가 발생해야합니다.</target>
        </trans-unit>
        <trans-unit id="b50d7fb37c7e66d40b59fce47a8cf43fd69d830e" translate="yes" xml:space="preserve">
          <source>This method is called to write some kind of host object, i.e. an object created by native C++ bindings. If it is not possible to serialize &lt;code&gt;object&lt;/code&gt;, a suitable exception should be thrown.</source>
          <target state="translated">이 메소드는 일종의 호스트 객체, 즉 네이티브 C ++ 바인딩에 의해 생성 된 객체를 작성하기 위해 호출됩니다. &lt;code&gt;object&lt;/code&gt; 를 직렬화 할 수없는 경우 , 적절한 예외를 throw 할 필요가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc90c26b3f24d636637240e71fd082c904e9c070" translate="yes" xml:space="preserve">
          <source>This method is called when the serializer is going to serialize a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object. It must return an unsigned 32-bit integer ID for the object, using the same ID if this &lt;code&gt;SharedArrayBuffer&lt;/code&gt; has already been serialized. When deserializing, this ID will be passed to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 직렬 변환기가 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 객체 를 직렬화하려고 할 때 호출됩니다 . 이 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 가 이미 직렬화 된 경우 동일한 ID를 사용하여 오브젝트에 대해 부호없는 32 비트 정수 ID를 리턴해야합니다 . 직렬화 해제시이 ID는 &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt; &lt;/a&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="a90ca117688b90f4f93a88c2020c612e45a213fe" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_get_property&quot;&gt;&lt;code&gt;napi_get_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">이 방법을 호출하는 것과 &lt;a href=&quot;#n_api_napi_get_property&quot;&gt; &lt;code&gt;napi_get_property&lt;/code&gt; &lt;/a&gt; A의 &lt;code&gt;napi_value&lt;/code&gt; 로 전달 된 열로부터 생성 &lt;code&gt;utf8Name&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="ff0f235c75ab596d17873611663abac578a666d2" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_has_property&quot;&gt;&lt;code&gt;napi_has_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">이 방법을 호출하는 것과 &lt;a href=&quot;#n_api_napi_has_property&quot;&gt; &lt;code&gt;napi_has_property&lt;/code&gt; &lt;/a&gt; A의 &lt;code&gt;napi_value&lt;/code&gt; 로 전달 된 열로부터 생성 &lt;code&gt;utf8Name&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="5fffe0150f23e478ffc2985c081f396a015cdadd" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_set_property&quot;&gt;&lt;code&gt;napi_set_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">이 방법을 호출하는 것과 &lt;a href=&quot;#n_api_napi_set_property&quot;&gt; &lt;code&gt;napi_set_property&lt;/code&gt; &lt;/a&gt; A의 &lt;code&gt;napi_value&lt;/code&gt; 로 전달 된 열로부터 생성 &lt;code&gt;utf8Name&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="19464a10e7ec85fab298874a00280da292ea3dfb" translate="yes" xml:space="preserve">
          <source>This method is guaranteed to return an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">This method is guaranteed to return an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="79406247f664fad5db62dc93aae5d2cdf35f025d" translate="yes" xml:space="preserve">
          <source>This method is inherited from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt;&lt;code&gt;TypedArray#subarray()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This method is inherited from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt; &lt;code&gt;TypedArray#subarray()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b2b2abbf6b99b52821177c95dfb1032a424b6a78" translate="yes" xml:space="preserve">
          <source>This method is intentionally generic and works with the web platform &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt; interface, which has no special &lt;code&gt;'error'&lt;/code&gt; event semantics and does not listen to the &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">This method is intentionally generic and works with the web platform &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt; interface, which has no special &lt;code&gt;'error'&lt;/code&gt; event semantics and does not listen to the &lt;code&gt;'error'&lt;/code&gt; event.</target>
        </trans-unit>
        <trans-unit id="3517d618f187f767a89b4300a1b63a8e5b17cacd" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows system. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">이 방법은 Windows 시스템에서만 의미가 있습니다. POSIX 시스템에서이 방법은 작동 하지 않으며 항상 수정없이 &lt;code&gt;path&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="25056a0846e91f46d370fe64132434ed4f7def8b" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</target>
        </trans-unit>
        <trans-unit id="c983f46e76b9dd0433799a448f5bdb19ed94b9c5" translate="yes" xml:space="preserve">
          <source>This method is not compatible with the &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;, which is a superclass of &lt;code&gt;Buffer&lt;/code&gt;. To copy the slice, use &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Buffer&lt;/code&gt; 의 슈퍼 클래스 인 &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; 와 호환되지 않습니다 . 슬라이스를 복사하려면 &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b32b22b8c3858f8f2465d3884aa82bd24680b6ec" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Deserializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Deserializer&lt;/code&gt; 클래스 자체에는 없지만 서브 클래스에서 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f595b58310133998e11cc3f534439b34974ab0b" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Serializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Serializer&lt;/code&gt; 클래스 자체에는 없지만 서브 클래스에서 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c26e9b3b06705355d77378147bd81e2be0268ac9" translate="yes" xml:space="preserve">
          <source>This method is only available if &lt;code&gt;http2session.type&lt;/code&gt; is equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt;.</source>
          <target state="translated">경우이 방법 만 사용할 수 있습니다 &lt;code&gt;http2session.type&lt;/code&gt; 이 동일 &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1cc56a973921f1c8e3418ef2a7ab83893408b1d1" translate="yes" xml:space="preserve">
          <source>This method is only valid when using &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt; &lt;code&gt;fs.lstat()&lt;/code&gt; &lt;/a&gt; 사용할 때만 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="0f78dbde2f747ddef4d4559acc66df6ead53e6a5" translate="yes" xml:space="preserve">
          <source>This method is to be used when the &lt;code&gt;asyncLocalStorage&lt;/code&gt; is not in use anymore in the current process.</source>
          <target state="translated">This method is to be used when the &lt;code&gt;asyncLocalStorage&lt;/code&gt; is not in use anymore in the current process.</target>
        </trans-unit>
        <trans-unit id="bf2ae0bdcbd8efcf11842d83c6ae7c582606fc85" translate="yes" xml:space="preserve">
          <source>This method is used after the module is linked to set the values of exports. If it is called before the module is linked, an &lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt;&lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt;&lt;/a&gt; error will be thrown.</source>
          <target state="translated">This method is used after the module is linked to set the values of exports. If it is called before the module is linked, an &lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt; &lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt; &lt;/a&gt; error will be thrown.</target>
        </trans-unit>
        <trans-unit id="c79bf54fc2158426a1f13109023fc9410f485037" translate="yes" xml:space="preserve">
          <source>This method is used to instantiate a new JavaScript value using a given &lt;code&gt;napi_value&lt;/code&gt; that represents the constructor for the object. For example, consider the following snippet:</source>
          <target state="translated">이 메소드는 객체의 생성자를 나타내는 지정된 &lt;code&gt;napi_value&lt;/code&gt; 를 사용하여 새 JavaScript 값을 인스턴스화하는 데 사용됩니다 . 예를 들어 다음 스 니펫을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="137f79d3611d70d649552c51bbc155deba38dbc3" translate="yes" xml:space="preserve">
          <source>This method is used within a callback function to retrieve details about the call like the arguments and the &lt;code&gt;this&lt;/code&gt; pointer from a given callback info.</source>
          <target state="translated">이 메소드는 콜백 함수 내 에서 주어진 콜백 정보에서 인수 및 &lt;code&gt;this&lt;/code&gt; 포인터 와 같은 호출에 대한 세부 사항을 검색하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="60fde3ca8666014eb1362597c31de1875933d209" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the parent process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">This method makes the IPC channel keep the event loop of the parent process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</target>
        </trans-unit>
        <trans-unit id="251db73775a8b3eb3fd6d9fbf270dcd66e16a1b7" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">This method makes the IPC channel keep the event loop of the process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</target>
        </trans-unit>
        <trans-unit id="81a4b339f84ffd2a9b0ba60d97efea903da7fe04" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the parent process running, and lets it finish even while the channel is open.</source>
          <target state="translated">This method makes the IPC channel not keep the event loop of the parent process running, and lets it finish even while the channel is open.</target>
        </trans-unit>
        <trans-unit id="df073da75d6db77d3f3df5fbdcc741763d5d7bc9" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.</source>
          <target state="translated">This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.</target>
        </trans-unit>
        <trans-unit id="f55f033607e44dce887582c62c0f096d380f7f0b" translate="yes" xml:space="preserve">
          <source>This method may be called at most one time on a message before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt; 를 호출 하기 전에 메시지에서이 메소드를 최대 한 번만 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3526009bcd91f17d5aa041034e585a5c485866dd" translate="yes" xml:space="preserve">
          <source>This method must only be called once on a message and it must be called before &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">이 메소드는 메시지에서 한 번만 호출해야하며 &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt; 가 호출 되기 전에 호출되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="dec2a56a8fed198bcdf723bd5b7ecf90cb7dc580" translate="yes" xml:space="preserve">
          <source>This method no longer supports multiple calls that don&amp;rsquo;t map to individual &lt;code&gt;console.time()&lt;/code&gt; calls; see below for details.</source>
          <target state="translated">이 메소드는 더 이상 개별 &lt;code&gt;console.time()&lt;/code&gt; 호출에 매핑되지 않는 여러 호출을 지원하지 않습니다 . 자세한 내용은 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f6f47d3b4379f25f04e6a25df0b8f764ba8d8b4d" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ClientRequest&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;ClientRequest&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a29f826336bbe3debd8646a229b260cfd3ea8a80" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ServerResponse&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;ServerResponse&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2bead6ce0f903b94b3581fba9b0c460760d9b196" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;decipher&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;decipher&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="326608dac58b4293b056bd095e3a8d421c4657b5" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;worker&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;worker&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="eccd72d8d3bfb8524959d772fbf00e2e2ccd4284" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;writable&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;writable&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f736dde7b82e9ca5487f277a3fc447dc5f614522" translate="yes" xml:space="preserve">
          <source>This method now supports passing &lt;code&gt;options&lt;/code&gt;, specifically &lt;code&gt;options.ttl&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;options&lt;/code&gt; 전달 , 특히 &lt;code&gt;options.ttl&lt;/code&gt; 을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="edb4af30902bebe24d30824096149434c6b8e2b5" translate="yes" xml:space="preserve">
          <source>This method now throws if the GCM tag length is invalid.</source>
          <target state="translated">이 메소드는 이제 GCM 태그 길이가 유효하지 않은 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0970dd484b399eb1d57fb730f0ead071cb410ad4" translate="yes" xml:space="preserve">
          <source>This method relies on &lt;code&gt;Object.prototype.toString()&lt;/code&gt; behavior. It is possible to obtain an incorrect result when the &lt;code&gt;object&lt;/code&gt; argument manipulates &lt;code&gt;@@toStringTag&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; 동작 에 의존합니다 . &lt;code&gt;object&lt;/code&gt; 인수가 &lt;code&gt;@@toStringTag&lt;/code&gt; 조작 할 때 잘못된 결과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e9bf5991fa9c748c4ddd11e088d41c09880c593" translate="yes" xml:space="preserve">
          <source>This method returns a boolean for flow control now.</source>
          <target state="translated">이 메소드는 흐름 제어를위한 부울을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="049623077d54205258c2f93454b1d1ee06027dbc" translate="yes" xml:space="preserve">
          <source>This method returns the current store. If this method is called outside of an asynchronous context initialized by calling &lt;code&gt;asyncLocalStorage.run&lt;/code&gt;, it will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">This method returns the current store. If this method is called outside of an asynchronous context initialized by calling &lt;code&gt;asyncLocalStorage.run&lt;/code&gt; , it will return &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="718308cf0c5761b550f5d72b6cf7018c6b6197ad" translate="yes" xml:space="preserve">
          <source>This method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;Section 19.1.2.20&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">This method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;Section 19.1.2.20&lt;/a&gt; of the ECMA-262 specification.</target>
        </trans-unit>
        <trans-unit id="b9df835392f53f83cbf43706f5a9c14ab012c2f6" translate="yes" xml:space="preserve">
          <source>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, &lt;code&gt;response.end()&lt;/code&gt;, MUST be called on each response.</source>
          <target state="translated">이 메소드는 모든 응답 헤더와 본문이 전송되었음을 서버에 알립니다. 해당 서버는이 메시지가 완료된 것으로 간주해야합니다. 각 응답 에서 &lt;code&gt;response.end()&lt;/code&gt; 메소드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="ed78b55e754e7fa16630f5733386b1ad180489e2" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt;&lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt; &lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt; &lt;/a&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="3e295612b73a29336c23b8ca6f269cd989dccbf9" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt;&lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt; &lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt; &lt;/a&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="cfa965434bb457984be24fcb690fab82b4955073" translate="yes" xml:space="preserve">
          <source>This method throws &lt;code&gt;EBADF&lt;/code&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;code&gt;EBADF&lt;/code&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="91894603a2d6878685230629c869c5cc4c825298" translate="yes" xml:space="preserve">
          <source>This method will throw an error if the target &lt;code&gt;pid&lt;/code&gt; does not exist. As a special case, a signal of &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Windows platforms will throw an error if the &lt;code&gt;pid&lt;/code&gt; is used to kill a process group.</source>
          <target state="translated">대상 &lt;code&gt;pid&lt;/code&gt; 가 존재하지 않으면 이 메소드는 오류를 발생시킵니다 . 특별한 경우로서, 프로세스의 존재를 테스트하기 위해 &lt;code&gt;0&lt;/code&gt; 의 신호 가 사용될 수있다. &lt;code&gt;pid&lt;/code&gt; 를 사용하여 프로세스 그룹을 종료 하면 Windows 플랫폼에서 오류가 발생합니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
