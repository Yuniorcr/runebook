<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="d7a1dc1cbb67ff0479ab2d4ec138ffb994e39f33" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">이 방법은 &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt; 와 매우 유사 합니다 . 즉, 제공된 첫 번째 서버로 분석하려고하면 &lt;code&gt;NOTFOUND&lt;/code&gt; 오류가 발생하면 &lt;code&gt;resolve()&lt;/code&gt; 메소드는 제공된 후속 서버로 분석을 시도 &lt;em&gt;하지 않습니다&lt;/em&gt; . 대체 DNS 서버는 이전 서버가 시간 초과되거나 다른 오류가 발생하는 경우에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="338d35f90fcbabeed9638d0994745e773b223f83" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</target>
        </trans-unit>
        <trans-unit id="da5d4255578cc98dd0bf8203ac9635b394724a79" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously outside of a context and return its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">This methods runs a function synchronously outside of a context and return its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback.</target>
        </trans-unit>
        <trans-unit id="44bd57aad2273e41bbc9d4b198d65622d5de140c" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously within a context and return its return value. The store is not accessible outside of the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">This methods runs a function synchronously within a context and return its return value. The store is not accessible outside of the callback function or the asynchronous operations created within the callback.</target>
        </trans-unit>
        <trans-unit id="80ac9951e9c15f0ad4db6383a1db28445d3d11d9" translate="yes" xml:space="preserve">
          <source>This mode provides a balance between features and binary size.</source>
          <target state="translated">This mode provides a balance between features and binary size.</target>
        </trans-unit>
        <trans-unit id="31b0496aa78380171e1c86de496fc1c12964b92b" translate="yes" xml:space="preserve">
          <source>This mode provides a good balance between features and binary size, and it is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">이 모드는 기능과 이진 크기 사이의 균형이 양호하며 &lt;code&gt;--with-intl&lt;/code&gt; 플래그가 전달 되지 않은 경우 기본 동작 입니다. 공식 바이너리도이 모드에서 빌드됩니다.</target>
        </trans-unit>
        <trans-unit id="58478d1f06fd4faab8d57954c1994c2807d9e162" translate="yes" xml:space="preserve">
          <source>This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</source>
          <target state="translated">This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</target>
        </trans-unit>
        <trans-unit id="61829d000837d81bc1af29b5a18d65d68b23b06e" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been instantiated; otherwise it will throw an error. It could be called also when the module has already been evaluated, in which case it will do one of the following two things:</source>
          <target state="translated">모듈을 인스턴스화 한 후에 호출해야합니다. 그렇지 않으면 오류가 발생합니다. 모듈이 이미 평가 된 경우에도 호출 될 수 있으며,이 경우 다음 두 가지 중 하나를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="6f7e3676799bc8a3bb8082ebb54448a8f098105d" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt;) or it will re-throw the exception that the initial evaluation resulted in (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;).</source>
          <target state="translated">This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt; ) or it will re-throw the exception that the initial evaluation resulted in ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4e9b793d8f4835801a2e03d986f43b29e0294b7f" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;. It can be passed to &lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt;&lt;code&gt;clearImmediate()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">이 객체는 내부적으로 작성되어 &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt; 에서 반환됩니다 . 스케줄 된 조치를 취소하기 위해 &lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt; &lt;code&gt;clearImmediate()&lt;/code&gt; &lt;/a&gt; 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30df376bcf445e9ea2fd9f87e4e31b34c96b80ed" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;. It can be passed to either &lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt;&lt;code&gt;clearTimeout()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt;&lt;code&gt;clearInterval()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">이 객체는 내부적으로 생성되어 &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt; 에서 반환됩니다 . 스케줄 된 조치를 취소하기 위해 &lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt; &lt;code&gt;clearTimeout()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt; &lt;code&gt;clearInterval()&lt;/code&gt; &lt;/a&gt; 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="11bcec38f2abde0cda814ffe6df5a8ef30f2d46d" translate="yes" xml:space="preserve">
          <source>This object is created internally and returned from &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt;. It represents an &lt;em&gt;in-progress&lt;/em&gt; request whose header has already been queued. The header is still mutable using the &lt;a href=&quot;#http_request_setheader_name_value&quot;&gt;&lt;code&gt;setHeader(name, value)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_getheader_name&quot;&gt;&lt;code&gt;getHeader(name)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_removeheader_name&quot;&gt;&lt;code&gt;removeHeader(name)&lt;/code&gt;&lt;/a&gt; API. The actual header will be sent along with the first data chunk or when calling &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 객체는 내부적으로 생성되어 &lt;a href=&quot;#http_http_request_options_callback&quot;&gt; &lt;code&gt;http.request()&lt;/code&gt; &lt;/a&gt; 에서 반환됩니다 . 헤더가 이미 대기중인 &lt;em&gt;진행중인&lt;/em&gt; 요청을 나타냅니다 . 헤더는 여전히 &lt;a href=&quot;#http_request_setheader_name_value&quot;&gt; &lt;code&gt;setHeader(name, value)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#http_request_getheader_name&quot;&gt; &lt;code&gt;getHeader(name)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#http_request_removeheader_name&quot;&gt; &lt;code&gt;removeHeader(name)&lt;/code&gt; &lt;/a&gt; API를 사용하여 변경할 수 있습니다. 실제 헤더는 첫 번째 데이터 청크와 함께 또는 &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; &lt;/a&gt; 호출 할 때 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="276727d393a49049986a6764a6b9df30b3c6e8d1" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">이 객체는 사용자가 아닌 HTTP 서버에 의해 내부적으로 생성됩니다. &lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; 이벤트에 두 번째 매개 변수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b243244bb0ee3d29d16ef5c4abcf7c8294d4366" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">이 객체는 사용자가 아닌 HTTP 서버에 의해 내부적으로 생성됩니다. &lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; 이벤트에 두 번째 매개 변수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="6d42c4c77f2412e6c0e13465d846324fb36177a5" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="6828f42c873a55b00234dc584cf52b644aef0a4c" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="b590c4862d8c62879d75abd1aa21bce18d4bbd42" translate="yes" xml:space="preserve">
          <source>This object is not intended to be changed or set manually.</source>
          <target state="translated">이 개체는 수동으로 변경하거나 설정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="39f42f9d3b7870458abec1b8bba415750246f54d" translate="yes" xml:space="preserve">
          <source>This operation cannot be undone.</source>
          <target state="translated">This operation cannot be undone.</target>
        </trans-unit>
        <trans-unit id="6d68cfded63649ce7ce6716537aea2949bfdc24a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;UInt8Array&lt;/code&gt; - that is, getting returns &lt;code&gt;undefined&lt;/code&gt; and setting does nothing.</source>
          <target state="translated">이 연산자는 &lt;code&gt;Uint8Array&lt;/code&gt; 에서 상속 되므로 범위를 벗어난 액세스에 대한 동작은 &lt;code&gt;UInt8Array&lt;/code&gt; 와 동일 합니다. 즉, 반환 값을 &lt;code&gt;undefined&lt;/code&gt; 하지 않고 설정을 수행해도 아무런 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7b68e9509c532127f52fafc15b3bbfa8dc0ae41a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt;. In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt;, and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt;.</source>
          <target state="translated">This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt; , so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt; . In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt; , and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd5bc0556c47cdb09e41d5ea59f149aa88e6a463" translate="yes" xml:space="preserve">
          <source>This option is a no-op. It is kept for compatibility.</source>
          <target state="translated">이 옵션은 작동하지 않습니다. 호환성을 위해 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="4951046a2e8ef3ca45424f2c3f92fe4d355065b2" translate="yes" xml:space="preserve">
          <source>This option is no longer experimental.</source>
          <target state="translated">This option is no longer experimental.</target>
        </trans-unit>
        <trans-unit id="7ab4df6e22ae62c4d079027a2c218b72789bdc22" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. See &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt; on how to compile a binary using this mode.</source>
          <target state="translated">이 옵션은 ICU에 대한 결과 바이너리 링크를 정적으로 만들고 전체 ICU 데이터 세트를 포함합니다. 이 방법으로 만든 바이너리는 더 이상 외부 종속성이 없으며 모든 로캘을 지원하지만 다소 클 수 있습니다. 이 모드를 사용하여 바이너리를 컴파일하는 방법 은 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="883efe526d0eeec11102d9602133026d76078e17" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</target>
        </trans-unit>
        <trans-unit id="394a6a9a97a53a953940a51f3bdcf234aa0c8526" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the &lt;code&gt;node&lt;/code&gt; executable.</source>
          <target state="translated">이 옵션은 ICU 라이브러리에 대한 결과 바이너리 링크를 정적으로 만들고 &lt;code&gt;node&lt;/code&gt; 실행 파일 내에 ICU 데이터의 하위 세트 (일반적으로 영어 로케일 만)를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="28fb57d096952e1be65ad8500b5938bfe5fc415f" translate="yes" xml:space="preserve">
          <source>This optional function will be called before the stream closes, delaying the &lt;code&gt;'finish'&lt;/code&gt; event until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to close resources or write buffered data before a stream ends.</source>
          <target state="translated">이 선택적 함수는 스트림이 닫히기 전에 호출 되어 &lt;code&gt;callback&lt;/code&gt; 이 호출 될 때까지 &lt;code&gt;'finish'&lt;/code&gt; 이벤트를 지연시킵니다 . 스트림이 끝나기 전에 리소스를 닫거나 버퍼링 된 데이터를 쓰는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="1e3da6c9301c93f8176d26d36040c1dd6fd9b584" translate="yes" xml:space="preserve">
          <source>This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt;, &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt; , &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="74b3259a863b34aca5868a5d91c49dfe546aa404" translate="yes" xml:space="preserve">
          <source>This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="68790ca7ff85f8f0b0ee5bc2bc19cfd046718f03" translate="yes" xml:space="preserve">
          <source>This page provides guidance for package authors writing &lt;code&gt;package.json&lt;/code&gt; files along with a reference for the &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; fields defined by Node.js.</source>
          <target state="translated">이 페이지에서는 Node.js에서 정의한 &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt; 필드에 대한 참조와 함께 &lt;code&gt;package.json&lt;/code&gt; 파일을 작성하는 패키지 작성자를위한 지침을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="2a912ac54f282aa0ebdc6b3d1ffc8071941bc6bc" translate="yes" xml:space="preserve">
          <source>This particular operation may be hard to use in a Node.js context, as the streaming layer makes it hard to know which data will end up in this frame. Also, there is currently no way to consume this data through the Node.js API.</source>
          <target state="translated">스트리밍 레이어로 인해이 프레임에서 어떤 데이터가 종료되는지 알기가 어렵 기 때문에이 특정 작업은 Node.js 컨텍스트에서 사용하기 어려울 수 있습니다. 또한 현재 Node.js API를 통해이 데이터를 사용할 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="019c5d87354ac10b6f36fe3aa511b3b40d2ed49a" translate="yes" xml:space="preserve">
          <source>This pool could be used as follows:</source>
          <target state="translated">This pool could be used as follows:</target>
        </trans-unit>
        <trans-unit id="b9a02d3eca403bdc666212cf0c86fe38b7d15dd1" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be read. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">이 특성은 읽을 준비가 된 큐의 바이트 수 (또는 오브젝트)를 포함합니다. 이 값은 &lt;code&gt;highWaterMark&lt;/code&gt; 상태에 관한 내부 데이터를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="eb9e3144be10a8f3e780007f6d355783bf984b8d" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be written. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">이 특성은 큐에서 쓸 준비가 된 바이트 수 (또는 오브젝트)를 포함합니다. 이 값은 &lt;code&gt;highWaterMark&lt;/code&gt; 상태에 관한 내부 데이터를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="386fd84fec99ef9b47b7d16488786592c44b6e77" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the underlying file has not been opened yet, i.e. before the &lt;code&gt;'ready'&lt;/code&gt; event is emitted.</source>
          <target state="translated">기본 파일이 아직 열리지 않은 경우, 즉 &lt;code&gt;'ready'&lt;/code&gt; 이벤트가 생성 되기 전에이 속성은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7fec8e8f93a4601a9b7a5243b25b3bca584a0d87" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt;. If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt;. If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt; . If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt; . If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f517051737746faa183df11c32566027df8f1e76" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;undefined&lt;/code&gt; for unrecognized &lt;code&gt;KeyObject&lt;/code&gt; types and symmetric keys.</source>
          <target state="translated">인식 할 수없는 &lt;code&gt;KeyObject&lt;/code&gt; 유형 및 대칭 키 에는이 속성이 &lt;code&gt;undefined&lt;/code&gt; 되어 있지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d3602e2ea022e3bc39b7484318da9a603e6288b8" translate="yes" xml:space="preserve">
          <source>This property is a reference to the instance itself.</source>
          <target state="translated">이 속성은 인스턴스 자체에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="5e977f5de1846b2e85081b0ccf09406769d1cc7c" translate="yes" xml:space="preserve">
          <source>This property is also set for received headers. It will contain the names of all headers marked as sensitive, including ones marked that way automatically.</source>
          <target state="translated">이 속성은 수신 된 헤더에도 설정됩니다. 자동으로 표시된 것을 포함하여 민감한 것으로 표시된 모든 헤더의 이름이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e33cc887d6f76fe29d205691170fbab8a5395204" translate="yes" xml:space="preserve">
          <source>This property is deprecated.</source>
          <target state="translated">이 속성은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f73f92d394bd6733681726663afa3be14f683e89" translate="yes" xml:space="preserve">
          <source>This property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="translated">이 속성은 더 이상 사용되지 않습니다. 사용하십시오 &lt;code&gt;crypto.setFips()&lt;/code&gt; 및 &lt;code&gt;crypto.getFips()&lt;/code&gt; 대신합니다.</target>
        </trans-unit>
        <trans-unit id="8853fccd2133c9b9842c8f0088d75409954f4216" translate="yes" xml:space="preserve">
          <source>This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d7a656096a20de49803ec12a402ed5a91dccea98" translate="yes" xml:space="preserve">
          <source>This property is particularly useful as a means of determining if a client or server fully transmitted a message before a connection was terminated:</source>
          <target state="translated">이 특성은 연결이 종료되기 전에 클라이언트 또는 서버가 메시지를 완전히 전송했는지 여부를 판별하는 수단으로 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f429a22f8731ad82e20fb7b571d26a7a167f34d0" translate="yes" xml:space="preserve">
          <source>This property now returns &lt;code&gt;undefined&lt;/code&gt; for KeyObject instances of unrecognized type instead of aborting.</source>
          <target state="translated">이 속성은 이제 중단 대신 인식 할 수없는 유형의 KeyObject 인스턴스에 대해 &lt;code&gt;undefined&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0258cc0d87a79ada93448982013acd1442be2048" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt;. The value is fixed at &lt;code&gt;2&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt; . The value is fixed at &lt;code&gt;2&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="92d2b06eec651f39ccf3c9d6223d4bc3c22e2f93" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt;. The value is fixed at &lt;code&gt;0&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt; . The value is fixed at &lt;code&gt;0&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="e844b6956113839c2be7aaa33d95e92dee6d1883" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt;. The value is fixed at &lt;code&gt;1&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt; . The value is fixed at &lt;code&gt;1&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="5ac2df8cfb8a6ab600d58d12a18a1fd49b8186b6" translate="yes" xml:space="preserve">
          <source>This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</source>
          <target state="translated">This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</target>
        </trans-unit>
        <trans-unit id="f8bac265f5b733744a963486d246686da65c6443" translate="yes" xml:space="preserve">
          <source>This property represents the state of the connection as a string.</source>
          <target state="translated">This property represents the state of the connection as a string.</target>
        </trans-unit>
        <trans-unit id="eefab09d53dbef4bb15074330e33f073160962a7" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.</source>
          <target state="translated">This property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.</target>
        </trans-unit>
        <trans-unit id="e1a6a91551ecd980b558ff842b37549796e6bf30" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters currently buffered to be written. See &lt;a href=&quot;net#net_socket_buffersize&quot;&gt;&lt;code&gt;net.Socket.bufferSize&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">이 속성은 현재 쓰기 위해 버퍼링 된 문자 수를 나타냅니다. 자세한 내용은 &lt;a href=&quot;net#net_socket_buffersize&quot;&gt; &lt;code&gt;net.Socket.bufferSize&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="275fd6bab7ae5428d094e40bf2e70f30dde5cd7c" translate="yes" xml:space="preserve">
          <source>This represents the underlying binary scalar datatype of the &lt;code&gt;TypedArray&lt;/code&gt;. Elements of this enum correspond to &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;TypedArray&lt;/code&gt; 의 기본 이진 스칼라 데이터 유형을 나타냅니다 . 이 열거의 요소는 &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript 언어 사양&lt;/a&gt; 의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;섹션 22.2&lt;/a&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="750611976052ddea1aefb70b31d097d53f3ce423" translate="yes" xml:space="preserve">
          <source>This restricts the N-API surface to just the functionality that was available in the specified (and earlier) versions.</source>
          <target state="translated">이렇게하면 N-API 표면이 지정된 (이전) 버전에서 사용 가능한 기능으로 만 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="36c4ff0f9108bfa3f5ac17d8e5cddf8133c7ace6" translate="yes" xml:space="preserve">
          <source>This section describes the fields used by the Node.js runtime. Other tools (such as &lt;a href=&quot;https://docs.npmjs.com/creating-a-package-json-file&quot;&gt;npm&lt;/a&gt;) use additional fields which are ignored by Node.js and not documented here.</source>
          <target state="translated">이 섹션에서는 Node.js 런타임에서 사용하는 필드를 설명합니다. 다른 도구 (예 : &lt;a href=&quot;https://docs.npmjs.com/creating-a-package-json-file&quot;&gt;npm&lt;/a&gt; )는 Node.js에서 무시되고 여기에 문서화되지 않은 추가 필드를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="34670d73c4e4f5a65a2cb44fbd1ad5dc7e3c2e51" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3356fbb2ec8113ec889350faf51d5150518f85cf" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="36ef0fd0665d4357db1b84a2e19547d2706f8eb2" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e161eae495f60eecc39fcb871e7db25d724d21cd" translate="yes" xml:space="preserve">
          <source>This sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.</source>
          <target state="translated">응답 본문의 청크를 보냅니다. 이 방법은 신체의 연속적인 부분을 제공하기 위해 여러 번 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f47c2c3b1777de556577edd88a50fe16d9b43ef1" translate="yes" xml:space="preserve">
          <source>This should only be disabled for testing; HTTP requires the Date header in responses.</source>
          <target state="translated">테스트시에만 비활성화해야합니다. HTTP에는 응답에 Date 헤더가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f59eae131a4bc1e43befd9071b9f0e34721e73ef" translate="yes" xml:space="preserve">
          <source>This status does not convey any information regarding if &lt;code&gt;module.link()&lt;/code&gt; has been called. See &lt;code&gt;module.linkingStatus&lt;/code&gt; for that.</source>
          <target state="translated">이 상태는 &lt;code&gt;module.link()&lt;/code&gt; 가 호출되었는지 에 관한 정보를 전달하지 않습니다 . 이에 대해서는 &lt;code&gt;module.linkingStatus&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d569011bacf9d6bd4852dc82cdff4824a76def0c" translate="yes" xml:space="preserve">
          <source>This symbol can be set as a property on the HTTP/2 headers object with an array value in order to provide a list of headers considered sensitive. See &lt;a href=&quot;#http2_sensitive_headers&quot;&gt;Sensitive headers&lt;/a&gt; for more details.</source>
          <target state="translated">이 기호는 민감한 것으로 간주되는 헤더 목록을 제공하기 위해 배열 값이있는 HTTP / 2 헤더 객체의 속성으로 설정할 수 있습니다. 자세한 내용은 &lt;a href=&quot;#http2_sensitive_headers&quot;&gt;민감한 헤더&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="0116ac87fb2193b9cadfa6e6c4b58a397209ffa8" translate="yes" xml:space="preserve">
          <source>This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</source>
          <target state="translated">This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</target>
        </trans-unit>
        <trans-unit id="7d49c824be76a8237417ac95208be1205943ec8d" translate="yes" xml:space="preserve">
          <source>This throws an error if &lt;code&gt;value&lt;/code&gt; cannot be serialized.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 을 직렬화 할 수없는 경우 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="c1f045702ea4da181894894d719dc7571a2ba4e1" translate="yes" xml:space="preserve">
          <source>This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt;.</source>
          <target state="translated">This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c184cfb934c9b738977c32837985d21a951b41c" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt;&lt;code&gt;dns.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">이 유형의 레코드에는 &lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt; &lt;code&gt;dns.resolveTxt()&lt;/code&gt; &lt;/a&gt; 를 참조하는 &lt;code&gt;entries&lt;/code&gt; 이라는 배열 속성이 포함되어 있습니다 ( 예 : &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6eeca1c2f00a4310890a7139dcfe6a2e6c8c965b" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt;&lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">이 유형의 레코드에는 &lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt; &lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt; &lt;/a&gt; 를 참조하는 &lt;code&gt;entries&lt;/code&gt; 이라는 배열 속성이 포함되어 있습니다 ( 예 : &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fe3642f2b14cc07a05a25a58a28addaf29cbab1" translate="yes" xml:space="preserve">
          <source>This use of the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module in the REPL has these side effects:</source>
          <target state="translated">의이 사용하는 &lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt; REPL에서 모듈은 이러한 부작용이 :</target>
        </trans-unit>
        <trans-unit id="aba8179089db1922508405d8b782dab836cca61d" translate="yes" xml:space="preserve">
          <source>This value is also available as &lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt;&lt;code&gt;buffer.kMaxLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 값은 &lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt; &lt;code&gt;buffer.kMaxLength&lt;/code&gt; &lt;/a&gt; 로도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1960fefc47eea7af53d2386124418b76d027b6f6" translate="yes" xml:space="preserve">
          <source>This value may depend on the JS engine that is being used.</source>
          <target state="translated">이 값은 사용중인 JS 엔진에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1786c62ca4014aae9c8daf35face4f14af3bb962" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a88498e969bb560f2877e63299e4b7964f93ae3a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_exports&quot;&gt;&lt;code&gt;exports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_exports&quot;&gt; &lt;code&gt;exports&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="12ae6d48315f5836aaba96e8fe5033389f67632a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_filename&quot;&gt;&lt;code&gt;__filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_filename&quot;&gt; &lt;code&gt;__filename&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d045d7bbd376d894aa22ac1819fb6f7283f644a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_module&quot;&gt; &lt;code&gt;module&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0714b1ea5c5b147147404c53c9c7ea1c9d011bd2" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7388904d6f49c90b401aa690cef27c57e52dd479" translate="yes" xml:space="preserve">
          <source>This was an undocumented helper function not intended for use outside Node.js core and obsoleted by the removal of NPN (Next Protocol Negotiation) support.</source>
          <target state="translated">이것은 문서화되지 않은 도우미 기능으로 Node.js 코어 외부에서 사용하도록 설계되지 않았으며 NPN (Next Protocol Negotiation) 지원 제거로 폐기되었습니다.</target>
        </trans-unit>
        <trans-unit id="ce2a6d546b034160617c687e3f2691f4eb71b066" translate="yes" xml:space="preserve">
          <source>This was never a documented feature.</source>
          <target state="translated">이것은 문서화 된 기능이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="946c9714458dbb894196ffd1f153f59f0b8d6c98" translate="yes" xml:space="preserve">
          <source>This will ensure that the per-addon-instance data reaches each binding that can be called from JavaScript. The per-addon-instance data must also be passed into any asynchronous callbacks the addon may create.</source>
          <target state="translated">이렇게하면 인스턴스 별 데이터가 JavaScript에서 호출 할 수있는 각 바인딩에 도달 할 수 있습니다. 애드온 인스턴스 데이터는 애드온이 생성 할 수있는 비동기 콜백에도 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="110650dd72d6d2fde8d01c7a0259236b0dc7296b" translate="yes" xml:space="preserve">
          <source>This will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid.</source>
          <target state="translated">다른 에러 발생 상황 (예 : 입력 데이터의 형식이 잘못된 경우)의 동작은 변경되지 않습니다. 이 방법을 사용하면 입력이 조기에 종료되었는지 또는 무결성 검사가 부족한지 여부를 판단 할 수 없으므로 압축 해제 결과가 유효한지 수동으로 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="d25a5d904dfe4b2d558d89e8b007b3cb884783fb" translate="yes" xml:space="preserve">
          <source>This will not work because the callback function passed to &lt;code&gt;fs.readFile()&lt;/code&gt; is called asynchronously. By the time the callback has been called, the surrounding code, including the &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; block, will have already exited. Throwing an error inside the callback &lt;strong&gt;can crash the Node.js process&lt;/strong&gt; in most cases. If &lt;a href=&quot;domain&quot;&gt;domains&lt;/a&gt; are enabled, or a handler has been registered with &lt;code&gt;process.on('uncaughtException')&lt;/code&gt;, such errors can be intercepted.</source>
          <target state="translated">&lt;code&gt;fs.readFile()&lt;/code&gt; 전달 된 콜백 함수 가 비동기 적으로 호출 되기 때문에 작동하지 않습니다 . 콜백이 호출 될 때 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 블록을 포함한 주변 코드 가 이미 종료되었습니다. 콜백 내에 오류 &lt;strong&gt;가 발생하면&lt;/strong&gt; 대부분의 경우 &lt;strong&gt;Node.js 프로세스가 중단 될 수 있습니다&lt;/strong&gt; . 경우 &lt;a href=&quot;domain&quot;&gt;도메인이&lt;/a&gt; 활성화되어, 또는 핸들러가 등록되어 &lt;code&gt;process.on('uncaughtException')&lt;/code&gt; , 이러한 오류를 가로 챌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b97a9813dd547ff5a18b92d60ea9c7c60a244fb" translate="yes" xml:space="preserve">
          <source>This will opt into the default &lt;code&gt;NAPI_VERSION&lt;/code&gt; for the given release of Node.js. In order to ensure compatibility with specific versions of N-API, the version can be specified explicitly when including the header:</source>
          <target state="translated">지정된 Node.js 릴리스에 대해 기본 &lt;code&gt;NAPI_VERSION&lt;/code&gt; 을 선택합니다. 특정 버전의 N-API와의 호환성을 보장하기 위해 헤더를 포함 할 때 버전을 명시 적으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2caba2077af1acf81bcaf212679d9efc23f7b46" translate="yes" xml:space="preserve">
          <source>This will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.</source>
          <target state="translated">This will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.</target>
        </trans-unit>
        <trans-unit id="03b61b4fd778d330c4d9ae04ee169c3836b77a3e" translate="yes" xml:space="preserve">
          <source>This will, however, generally degrade compression.</source>
          <target state="translated">그러나 이것은 일반적으로 압축을 저하시킵니다.</target>
        </trans-unit>
        <trans-unit id="898d4d4c37da591f1dbaea989ea4b845e4eb4dcd" translate="yes" xml:space="preserve">
          <source>This would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope.</source>
          <target state="translated">이로 인해 많은 수의 핸들이 생성되어 상당한 리소스를 소비하게됩니다. 또한 네이티브 코드는 가장 최근의 핸들 만 사용할 수 있지만 모든 관련 개체는 모두 동일한 범위를 공유하므로 살아있는 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="d467439a515ceca23a9a5fc18245fc89bdccd935" translate="yes" xml:space="preserve">
          <source>Though the call to &lt;code&gt;dns.lookup()&lt;/code&gt; will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; that runs on libuv's threadpool. This can have surprising negative performance implications for some applications, see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">&lt;code&gt;dns.lookup()&lt;/code&gt; 대한 호출 은 JavaScript의 관점에서 비동기식 이지만 libuv의 스레드 풀에서 실행되는 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt; 대한 동기식 호출로 구현됩니다 . 이는 일부 응용 프로그램에 놀라운 성능 영향을 미칠 수 있습니다 . 자세한 내용 은 &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bf8b9bcd61ac02e20b1f70392f83be7f64e30820" translate="yes" xml:space="preserve">
          <source>Threadpool Usage</source>
          <target state="translated">스레드 풀 사용법</target>
        </trans-unit>
        <trans-unit id="194378c3031d5f4c91d972a4e5fae3797161a3bf" translate="yes" xml:space="preserve">
          <source>Threadpool usage</source>
          <target state="translated">Threadpool usage</target>
        </trans-unit>
        <trans-unit id="5b84236df57d6e40394ff631a8881c1eb98f55ef" translate="yes" xml:space="preserve">
          <source>Threadpool usage and performance considerations</source>
          <target state="translated">Threadpool usage and performance considerations</target>
        </trans-unit>
        <trans-unit id="4c31834fd4f46e0567ccae1bc9794a97e2ef2ae6" translate="yes" xml:space="preserve">
          <source>Threads can be added to and removed from a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; object during its existence. Thus, in addition to specifying an initial number of threads upon creation, &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; can be called to indicate that an existing thread will stop making use of the thread-safe function.</source>
          <target state="translated">스레드는 존재하는 동안 &lt;code&gt;napi_threadsafe_function&lt;/code&gt; 오브젝트에 추가 및 제거 될 수 있습니다 . 따라서 생성시 초기 스레드 수를 지정하는 것 외에도 새 스레드가 스레드 안전 기능을 사용하기 시작한다는 것을 나타 내기 위해 &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; 을 호출 할 수 있습니다. 마찬가지로 &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; 을 호출하여 기존 스레드가 스레드 안전 기능의 사용을 중지 함을 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd491a1a20798b4f3eab7ca47ce9cde3c1a3f963" translate="yes" xml:space="preserve">
          <source>Three States</source>
          <target state="translated">삼국</target>
        </trans-unit>
        <trans-unit id="6e9c26957242e69ce7b5e779efca06887090978a" translate="yes" xml:space="preserve">
          <source>Three states</source>
          <target state="translated">Three states</target>
        </trans-unit>
        <trans-unit id="4f702a6c25a0cf4674613f32d0f9697e71800855" translate="yes" xml:space="preserve">
          <source>Throw ERR_INVALID_ARG_VALUE instead of ERR_INVALID_OPT_VALUE for invalid input arguments.</source>
          <target state="translated">잘못된 입력 인수에 대해 ERR_INVALID_OPT_VALUE 대신 ERR_INVALID_ARG_VALUE를 던집니다.</target>
        </trans-unit>
        <trans-unit id="e50789f4c54d6872bdd31a68fcda1c02e644ea74" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;모듈 찾을 수 없음&lt;/em&gt; 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="3c2047ffcc9c1f89b1e17b907380a299308c953e" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="157fa426a458f5a47aca54e42c4db7bded9d4f50" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="8170c71e55e480b36becd3a8bdae44cd43c0144e" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="df6f0a31b4716ff39675671a8367ef62be40d012" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Package Configuration&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;잘못된 패키지 구성의&lt;/em&gt; 오류입니다.</target>
        </trans-unit>
        <trans-unit id="a78220df6c48d2fb08d8df29384d6309dc62e9a0" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Specifier&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;잘못된 지정자의&lt;/em&gt; 오류입니다.</target>
        </trans-unit>
        <trans-unit id="14508f1d752fa9f1a58cf9aef8de034062c7fcf3" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="c6b845975caf9cd24e6a6a64484cf34be9a5885d" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported File Extension&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;지원되지 않는 파일 확장&lt;/em&gt; 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="274bb320296e78e649774ab7cf14c8bffcb9c969" translate="yes" xml:space="preserve">
          <source>Throw errors for deprecations.</source>
          <target state="translated">지원 중단에 대한 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="ca7b995e33945e66abe60ea39498a0102ea95fab" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide a valid value for one of its returned object properties on execution.</source>
          <target state="translated">함수 옵션이 실행시 리턴 된 오브젝트 특성 중 하나에 유효한 값을 제공하지 않는 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e035afeae4a1775ec604c8b5d8f677f77e629c2f" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide an expected value type for one of its returned object properties on execution.</source>
          <target state="translated">함수 옵션이 실행시 리턴 된 오브젝트 특성 중 하나에 대한 예상 값 유형을 제공하지 않는 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="500f81cca30019a552ab883030a9f388e713b7de" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not return an expected value type on execution, such as when a function is expected to return a promise.</source>
          <target state="translated">함수가 약속을 반환 할 것으로 예상되는 경우와 같이 함수 옵션이 실행시 예상 값 유형을 반환하지 않는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5ad63a3ff43abbab909982b69d4d78b65b2aafab" translate="yes" xml:space="preserve">
          <source>Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34a1483538db6bbfe91dd9089515dcf6beb98e43" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_HTTP2_INVALID_SETTING_VALUE&lt;/code&gt; for invalid &lt;code&gt;settings&lt;/code&gt; values.</source>
          <target state="translated">예외 &lt;code&gt;ERR_HTTP2_INVALID_SETTING_VALUE&lt;/code&gt; 은 무효에 대한 &lt;code&gt;settings&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="e302253df36558f348486c40585b9f94218d17e8" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_INVALID_ARG_TYPE&lt;/code&gt; for invalid &lt;code&gt;settings&lt;/code&gt; argument.</source>
          <target state="translated">예외 &lt;code&gt;ERR_INVALID_ARG_TYPE&lt;/code&gt; 무효에 대한 &lt;code&gt;settings&lt;/code&gt; 인수를.</target>
        </trans-unit>
        <trans-unit id="6c9dfd60d599c5257e4849241e700802dc509d8e" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; instead of &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; 대신 &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; 은 .</target>
        </trans-unit>
        <trans-unit id="1f533babc33348b6d3fb4950583edc945f148749" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;value&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. This is useful when testing the &lt;code&gt;error&lt;/code&gt; argument in callbacks. The stack trace contains all frames from the error passed to &lt;code&gt;ifError()&lt;/code&gt; including the potential new frames for &lt;code&gt;ifError()&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 되지 않았 거나 &lt;code&gt;null&lt;/code&gt; 인 경우 값을 throw &lt;code&gt;value&lt;/code&gt; . 콜백 에서 &lt;code&gt;error&lt;/code&gt; 인수를 테스트 할 때 유용합니다 . 스택 추적에는 &lt;code&gt;ifError()&lt;/code&gt; 자체 의 잠재적 인 새 프레임을 포함하여 &lt;code&gt;ifError()&lt;/code&gt; 전달 된 오류의 모든 프레임이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="1d293028683a03e7c8565aef633c4bd64df69e5d" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;SystemError&lt;/code&gt;&lt;/a&gt; if a user has no &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;homedir&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt; &lt;code&gt;SystemError&lt;/code&gt; 을&lt;/a&gt; 사용자가 더이없는 경우 &lt;code&gt;username&lt;/code&gt; 또는 &lt;code&gt;homedir&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb037643826c156fd10159ab0e43d2a4ebea39d9" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6ab0da4aef65302e8e7125139145d3ae9207952c" translate="yes" xml:space="preserve">
          <source>Throws an &lt;code&gt;AssertionError&lt;/code&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;code&gt;AssertionError&lt;/code&gt; 를 제공된 오류 메시지 또는 기본 오류 메시지를. 경우 &lt;code&gt;message&lt;/code&gt; 매개 변수가의 인스턴스 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 다음은 대신의 슬로우됩니다 &lt;code&gt;AssertionError&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="0f221650e50054f81fe163161fb94d86584723cb" translate="yes" xml:space="preserve">
          <source>Throws if the &lt;code&gt;fromEnc&lt;/code&gt; or &lt;code&gt;toEnc&lt;/code&gt; specify invalid character encodings or if conversion from &lt;code&gt;fromEnc&lt;/code&gt; to &lt;code&gt;toEnc&lt;/code&gt; is not permitted.</source>
          <target state="translated">경우 예외 &lt;code&gt;fromEnc&lt;/code&gt; 또는 &lt;code&gt;toEnc&lt;/code&gt; 가 에서 변환 경우 잘못된 문자 인코딩을 지정하거나 &lt;code&gt;fromEnc&lt;/code&gt; 에 &lt;code&gt;toEnc&lt;/code&gt; 이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="60660bb221304e5fad9ca2c2dd92e7d7c409ce60" translate="yes" xml:space="preserve">
          <source>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.</source>
          <target state="translated">따라서주기가 발생하거나 종속성 충돌이 발생하더라도 모든 모듈은 사용할 수있는 종속성 버전을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f395da331ca8317cd167d68da7aed50270080a44" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must make use exclusively of N-API by restricting itself to using</source>
          <target state="translated">따라서 Addon이 Node.js 메이저 버전에서 ABI와 호환되는 상태를 유지하려면 사용 자체를 제한하여 N-API 만 독점적으로 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="112c3024c3d7912fd57cd8ebb68639fc60c09698" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must use N-API exclusively by restricting itself to using</source>
          <target state="translated">Thus, for an addon to remain ABI-compatible across Node.js major versions, it must use N-API exclusively by restricting itself to using</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="551d6adf37a9cb1b523706676a5c3aab5b5fcb93" translate="yes" xml:space="preserve">
          <source>Timeout interactions with asynchronous tasks and Promises</source>
          <target state="translated">Timeout interactions with asynchronous tasks and Promises</target>
        </trans-unit>
        <trans-unit id="ca7f027cfebdbd1cfd15712b89e96328bae876ed" translate="yes" xml:space="preserve">
          <source>Timeout limitations when using process.nextTick(), Promises, and queueMicrotask()</source>
          <target state="translated">process.nextTick (), Promises 및 queueMicrotask () 사용시 제한 시간 제한</target>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="b30cd93bad7030d8a76933dae1934ce5c619d4e0" translate="yes" xml:space="preserve">
          <source>Timers Promises API</source>
          <target state="translated">타이머 약속 API</target>
        </trans-unit>
        <trans-unit id="f7391e8fca236efbdf30a41b1765e03b0aedeea8" translate="yes" xml:space="preserve">
          <source>To access it:</source>
          <target state="translated">To access it:</target>
        </trans-unit>
        <trans-unit id="2f285c5caf3395120404e2b15ef1afaae7633a15" translate="yes" xml:space="preserve">
          <source>To access the &lt;code&gt;stream&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; 모듈에 액세스하려면</target>
        </trans-unit>
        <trans-unit id="113093009a6693093866588b6702951e8ef8612a" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with POSIX file paths on any operating system, use &lt;a href=&quot;#path_path_posix&quot;&gt;&lt;code&gt;path.posix&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">운영 체제에서 POSIX 파일 경로로 작업 할 때 일관된 결과를 얻으려면 &lt;a href=&quot;#path_path_posix&quot;&gt; &lt;code&gt;path.posix&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="89017d2ede47b0785d45ee78f6f27262e118a2db" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with Windows file paths on any operating system, use &lt;a href=&quot;#path_path_win32&quot;&gt;&lt;code&gt;path.win32&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">모든 운영 체제에서 Windows 파일 경로로 작업 할 때 일관된 결과를 얻으려면 &lt;a href=&quot;#path_path_win32&quot;&gt; &lt;code&gt;path.win32&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b45c1d802e95d3410405265dfd8e4d44f4dbfd27" translate="yes" xml:space="preserve">
          <source>To add the method &lt;code&gt;hello&lt;/code&gt; as a function so that it can be called as a method provided by the addon:</source>
          <target state="translated">addon에서 제공하는 메소드로 호출 할 수 있도록 &lt;code&gt;hello&lt;/code&gt; 메소드를 함수로 추가하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="81c0394f49db892821115b54c6eb0edd5cc1ba09" translate="yes" xml:space="preserve">
          <source>To be notified when the file was modified, not just accessed, it is necessary to compare &lt;code&gt;curr.mtime&lt;/code&gt; and &lt;code&gt;prev.mtime&lt;/code&gt;.</source>
          <target state="translated">액세스 한 것이 아니라 파일이 수정되었을 때 알림을 &lt;code&gt;curr.mtime&lt;/code&gt; 과 &lt;code&gt;prev.mtime&lt;/code&gt; 을 비교해야합니다 .</target>
        </trans-unit>
        <trans-unit id="817d0bb7fcad591dfad28392604533ca026ba506" translate="yes" xml:space="preserve">
          <source>To be used in conjunction with &lt;code&gt;--experimental-modules&lt;/code&gt;. Sets the resolution algorithm for resolving specifiers. Valid options are &lt;code&gt;explicit&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; 와 함께 사용 합니다 . 지정자를 해결하기위한 해상도 알고리즘을 설정합니다. 유효한 옵션은 &lt;code&gt;explicit&lt;/code&gt; 및 &lt;code&gt;node&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f8a3354dac48c927a38f89348c115a2d20de7cf0" translate="yes" xml:space="preserve">
          <source>To begin watching an expression, type &lt;code&gt;watch('my_expression')&lt;/code&gt;. The command &lt;code&gt;watchers&lt;/code&gt; will print the active watchers. To remove a watcher, type &lt;code&gt;unwatch('my_expression')&lt;/code&gt;.</source>
          <target state="translated">식을보기 시작하려면 &lt;code&gt;watch('my_expression')&lt;/code&gt; 을 입력하십시오 . &lt;code&gt;watchers&lt;/code&gt; 명령 은 활성 감시자를 인쇄합니다. 감시자를 제거하려면 &lt;code&gt;unwatch('my_expression')&lt;/code&gt; 을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a0304f4e61d19a2c2ac88f8d7fae8f457554b26" translate="yes" xml:space="preserve">
          <source>To break on the first line of the application code, pass the &lt;code&gt;--inspect-brk&lt;/code&gt; flag instead of &lt;code&gt;--inspect&lt;/code&gt;.</source>
          <target state="translated">응용 프로그램 코드의 첫 번째 줄에 중단하려면 통과 &lt;code&gt;--inspect-brk&lt;/code&gt; 대신 플래그 &lt;code&gt;--inspect&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="22dfb32e7c28d8dcaa05c55a622e6cdce176c30b" translate="yes" xml:space="preserve">
          <source>To build this example, the &lt;code&gt;myobject.cc&lt;/code&gt; file must be added to the &lt;code&gt;binding.gyp&lt;/code&gt;:</source>
          <target state="translated">이 예제를 빌드하려면 &lt;code&gt;myobject.cc&lt;/code&gt; 파일을 &lt;code&gt;binding.gyp&lt;/code&gt; 에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="cb2546fbdf0da09b297499ea21ca759167d5daca" translate="yes" xml:space="preserve">
          <source>To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt;, &lt;code&gt;Promise.race()&lt;/code&gt;, or &lt;code&gt;Promise.allSettled()&lt;/code&gt;:</source>
          <target state="translated">To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt; , &lt;code&gt;Promise.race()&lt;/code&gt; , or &lt;code&gt;Promise.allSettled()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="257192fca64c7e5ef4beea84df13594a588d02bf" translate="yes" xml:space="preserve">
          <source>To change the default timeout use the &lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt;&lt;code&gt;--http-server-default-timeout&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">기본 시간 초과를 변경하려면 &lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt; &lt;code&gt;--http-server-default-timeout&lt;/code&gt; &lt;/a&gt; 플래그를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="83bf60ee112d40f394c9009468f70ac11d5c5c03" translate="yes" xml:space="preserve">
          <source>To check for support for a non-English locale (i.e. &lt;code&gt;full-icu&lt;/code&gt; or &lt;code&gt;system-icu&lt;/code&gt;), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; can be a good distinguishing factor:</source>
          <target state="translated">영어 이외의 로케일 (예 : &lt;code&gt;full-icu&lt;/code&gt; 또는 &lt;code&gt;system-icu&lt;/code&gt; )에 대한 지원을 확인하려면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt; 이 좋은 구별 요인이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f9ed209f8f372fe4035b55216331b230379fdb5" translate="yes" xml:space="preserve">
          <source>To check if a file exists without manipulating it afterwards, &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">나중에 파일을 조작하지 않고 파일이 존재하는지 확인하려면 &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="72931344905502cc560ea0d63014dbb48946d73e" translate="yes" xml:space="preserve">
          <source>To check if a stream is connected to a &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; context, check the &lt;code&gt;isTTY&lt;/code&gt; property.</source>
          <target state="translated">스트림이 &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; 컨텍스트에 연결되어 있는지 확인하려면 &lt;code&gt;isTTY&lt;/code&gt; 특성을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="84c7039869bdb8532ecd51ab012fbbe93984c08f" translate="yes" xml:space="preserve">
          <source>To configure any of them, a custom &lt;a href=&quot;#http_class_http_agent&quot;&gt;&lt;code&gt;http.Agent&lt;/code&gt;&lt;/a&gt; instance must be created.</source>
          <target state="translated">이들 중 하나를 구성하려면 사용자 정의 &lt;a href=&quot;#http_class_http_agent&quot;&gt; &lt;code&gt;http.Agent&lt;/code&gt; &lt;/a&gt; 인스턴스를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="d69007751c2a41a54e8aeb848a171b7cce6a5036" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the second line would just be changed to:</source>
          <target state="translated">소켓 &lt;code&gt;/tmp/echo.sock&lt;/code&gt; 에 연결하려면 두 번째 줄은 다음과 같이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="13ba3f87d486426a67fdfd4e20f95fec780e8f03" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f0a6196d20446e42af34618037ad4de017d40178" translate="yes" xml:space="preserve">
          <source>To control how ICU is used in Node.js, four &lt;code&gt;configure&lt;/code&gt; options are available during compilation. Additional details on how to compile Node.js are documented in &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;.</source>
          <target state="translated">Node.js에서 ICU를 사용하는 방법을 제어하기 위해 컴파일 중에 네 가지 &lt;code&gt;configure&lt;/code&gt; 옵션을 사용할 수 있습니다. Node.js를 컴파일하는 방법에 대한 추가 세부 사항은 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.md에&lt;/a&gt; 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="67c2ffbe92be0f9b51c9a83a429725a64f6213f9" translate="yes" xml:space="preserve">
          <source>To correctly order the operations, move the &lt;code&gt;fs.stat()&lt;/code&gt; call into the callback of the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">작업을 올바르게 정렬하려면 &lt;code&gt;fs.stat()&lt;/code&gt; 호출을 &lt;code&gt;fs.rename()&lt;/code&gt; 작업 의 콜백으로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="f0520e0374ec9ffcd9c6cf5ec0d679283c3270e7" translate="yes" xml:space="preserve">
          <source>To create a custom dynamic module that doesn't correspond to one of the existing &lt;code&gt;format&lt;/code&gt; interpretations, the &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook can be used. This hook is called only for modules that return &lt;code&gt;format: 'dynamic'&lt;/code&gt; from the &lt;code&gt;resolve&lt;/code&gt; hook.</source>
          <target state="translated">기존 &lt;code&gt;format&lt;/code&gt; 해석 중 하나와 일치하지 않는 사용자 정의 동적 모듈을 작성하기 위해 &lt;code&gt;dynamicInstantiate&lt;/code&gt; 후크를 사용할 수 있습니다. 이 후크는 &lt;code&gt;resolve&lt;/code&gt; 브 후크 에서 &lt;code&gt;format: 'dynamic'&lt;/code&gt; 을 반환하는 모듈에 대해서만 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="8e176982d3949a6fa8a4834a7abff97fa762f0cb" translate="yes" xml:space="preserve">
          <source>To create custom messaging channels (which is encouraged over using the default global channel because it facilitates separation of concerns), users can create a &lt;code&gt;MessageChannel&lt;/code&gt; object on either thread and pass one of the &lt;code&gt;MessagePort&lt;/code&gt;s on that &lt;code&gt;MessageChannel&lt;/code&gt; to the other thread through a pre-existing channel, such as the global one.</source>
          <target state="translated">(이 문제의 분리를 용이하게하기 때문에 기본 글로벌 채널을 사용하여 이상 권장하는) 채널을 메시징 사용자 정의 만들려면 사용자가 만들 수 있습니다 &lt;code&gt;MessageChannel&lt;/code&gt; 의 두 스레드에서 개체를하고 중 하나에 합격 &lt;code&gt;MessagePort&lt;/code&gt; 그에들 &lt;code&gt;MessageChannel&lt;/code&gt; 사전 -을 통해 다른 스레드에 글로벌 채널과 같은 기존 채널</target>
        </trans-unit>
        <trans-unit id="1a3b265855273805adaa9745965d95cb45ba31be" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</target>
        </trans-unit>
        <trans-unit id="42c2ed95d362ac6e310208df03daab20b4ae57a0" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">기본 모듈 해상도를 사용자 정의하기 위해 &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; 인수를 통해 Node.js에 로더 후크를 선택적으로 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="152f25ba7578f4f82f7a056c9eb04659230b3677" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variable. This will also deactivate the colors in the REPL.</source>
          <target state="translated">색상을 비활성화하려면 &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; 환경 변수를 사용하십시오 . 또한 REPL에서 색상이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="f63281065a3a3689c14d9466b15bbe449245428a" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</source>
          <target state="translated">To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</target>
        </trans-unit>
        <trans-unit id="ee22bab1313bf7a33041e942c66c0625221d4e94" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrap&lt;/a&gt;):</source>
          <target state="translated">새 인스턴스를 만들 수 있도록 클래스를 정의하려면 (종종 &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrap&lt;/a&gt; 과 함께 사용 ) :</target>
        </trans-unit>
        <trans-unit id="ed68c74bf87981629a008b2e07694c150206ebab" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object wrap&lt;/a&gt;):</source>
          <target state="translated">To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object wrap&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="6a009f5771c1d5f40af8776f25938972d00c3c60" translate="yes" xml:space="preserve">
          <source>To enable source map parsing, Node.js must be run with the flag &lt;a href=&quot;cli#cli_enable_source_maps&quot;&gt;&lt;code&gt;--enable-source-maps&lt;/code&gt;&lt;/a&gt;, or with code coverage enabled by setting &lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt;&lt;code&gt;NODE_V8_COVERAGE=dir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">소스 맵 구문 분석을 사용하려면 Node.js를 &lt;a href=&quot;cli#cli_enable_source_maps&quot;&gt; &lt;code&gt;--enable-source-maps&lt;/code&gt; &lt;/a&gt; 플래그로 실행 하거나 &lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt; &lt;code&gt;NODE_V8_COVERAGE=dir&lt;/code&gt; &lt;/a&gt; 을 설정하여 코드 커버리지를 활성화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="652b902ed0de8270b9fb62fc619759f8ad4b57a9" translate="yes" xml:space="preserve">
          <source>To enforce a specific color support, use one of the below environment settings.</source>
          <target state="translated">특정 색상 지원을 시행하려면 아래 환경 설정 중 하나를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="563ac46b64bfdec1cb057f5366a2341549beff68" translate="yes" xml:space="preserve">
          <source>To ensure that the pointer retrieved from the first argument is indeed a pointer to a database handle and, similarly, that the pointer retrieved from the second argument is indeed a pointer to a query handle, the implementation of &lt;code&gt;queryHasRecords()&lt;/code&gt; has to perform a type validation. Retaining the JavaScript class constructor from which the database handle was instantiated and the constructor from which the query handle was instantiated in &lt;code&gt;napi_ref&lt;/code&gt;s can help, because &lt;code&gt;napi_instanceof()&lt;/code&gt; can then be used to ensure that the instances passed into &lt;code&gt;queryHashRecords()&lt;/code&gt; are indeed of the correct type.</source>
          <target state="translated">To ensure that the pointer retrieved from the first argument is indeed a pointer to a database handle and, similarly, that the pointer retrieved from the second argument is indeed a pointer to a query handle, the implementation of &lt;code&gt;queryHasRecords()&lt;/code&gt; has to perform a type validation. Retaining the JavaScript class constructor from which the database handle was instantiated and the constructor from which the query handle was instantiated in &lt;code&gt;napi_ref&lt;/code&gt; s can help, because &lt;code&gt;napi_instanceof()&lt;/code&gt; can then be used to ensure that the instances passed into &lt;code&gt;queryHashRecords()&lt;/code&gt; are indeed of the correct type.</target>
        </trans-unit>
        <trans-unit id="c55f753794b1f35b9fdcfce66da0b9225f594ed1" translate="yes" xml:space="preserve">
          <source>To exit with a 'failure' code:</source>
          <target state="translated">'실패'코드로 종료하려면 :</target>
        </trans-unit>
        <trans-unit id="ba26739dd8d319b8071919705bb005ee5baa56d8" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;.</source>
          <target state="translated">쿼리 문자열에서 매개 변수를 추출하려면 &lt;code&gt;require('querystring').parse&lt;/code&gt; 함수를 사용하거나 &lt;code&gt;require('url').parse&lt;/code&gt; 의 두 번째 인수로 &lt;code&gt;true&lt;/code&gt; 를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5727ff4630ff91a10fefc92eb21eadd2192abbee" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;:</source>
          <target state="translated">쿼리 문자열에서 매개 변수를 추출하려면 &lt;code&gt;require('querystring').parse&lt;/code&gt; 함수를 사용하거나 &lt;code&gt;require('url').parse&lt;/code&gt; 의 두 번째 인수로 &lt;code&gt;true&lt;/code&gt; 를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3fefe10ff6dde1978c8f6041595748b6a6792d9d" translate="yes" xml:space="preserve">
          <source>To fully customize the output of a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance pass in a new function for the &lt;code&gt;writer&lt;/code&gt; option on construction. The following example, for instance, simply converts any input text to upper case:</source>
          <target state="translated">&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt; 인스턴스 의 출력을 완전히 사용자 정의하려면 구성시 &lt;code&gt;writer&lt;/code&gt; 옵션에 대한 새 기능을 전달하십시오 . 예를 들어 다음 예제는 입력 텍스트를 대문자로 간단히 변환합니다.</target>
        </trans-unit>
        <trans-unit id="f82f342e2108d2b1a12ccbbfb5e1444bf37c6bd0" translate="yes" xml:space="preserve">
          <source>To generate integrity strings, a script such as &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; can be used.</source>
          <target state="translated">무결성 문자열을 생성하기 위해 &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; 와 같은 스크립트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad9bff9dfa86ac3f581dc9a1a87860cd6b7f4e57" translate="yes" xml:space="preserve">
          <source>To generate the certificate and key for this example, run:</source>
          <target state="translated">이 예제의 인증서와 키를 생성하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="69f64fd3b92ea07f26cf029da8688a34b5e1c399" translate="yes" xml:space="preserve">
          <source>To get the exact filename that will be loaded when &lt;code&gt;require()&lt;/code&gt; is called, use the &lt;code&gt;require.resolve()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; 가 호출 될 때로드 될 정확한 파일 이름을 얻으려면 &lt;code&gt;require.resolve()&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ff57305218fef61e7a1c5f3ae88348b43634dfe" translate="yes" xml:space="preserve">
          <source>To get the response, add a listener for &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; to the request object. &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; will be emitted from the request object when the response headers have been received. The &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event is executed with one argument which is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응답을 얻으려면 요청 오브젝트 에 &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 에 대한 리스너를 추가하십시오 . 응답 헤더가 수신되면 요청 오브젝트에서 &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 이 생성됩니다. &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 이벤트의 인스턴스 하나 개 인수 실행 &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="044ebf34f23de583098254e8634e645a39e8143c" translate="yes" xml:space="preserve">
          <source>To get the string representation of the error code, use &lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt;&lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">To get the string representation of the error code, use &lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt; &lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="901383fa9c06c6cbf4f565534c4023b071c8fa19" translate="yes" xml:space="preserve">
          <source>To get the version string without the prepended &lt;em&gt;v&lt;/em&gt;, use &lt;code&gt;process.versions.node&lt;/code&gt;.</source>
          <target state="translated">To get the version string without the prepended &lt;em&gt;v&lt;/em&gt;, use &lt;code&gt;process.versions.node&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6aa20aefae1fe619888a9d19f8166927723ea251" translate="yes" xml:space="preserve">
          <source>To guard against crashing the Node.js process the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module can be used. (Note, however, that the &lt;code&gt;domain&lt;/code&gt; module is deprecated.)</source>
          <target state="translated">Node.js 프로세스의 충돌을 막기 위해 &lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt; 모듈을 사용할 수 있습니다. 그러나 &lt;code&gt;domain&lt;/code&gt; 모듈은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a3925d0a0110a53c1988b899e2668ed5402b3d3" translate="yes" xml:space="preserve">
          <source>To handle the errors that it catches, listen to its &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">발견 한 오류를 처리하려면 &lt;code&gt;'error'&lt;/code&gt; 이벤트를 수신하십시오.</target>
        </trans-unit>
        <trans-unit id="9c953e56d44954a70f8f7788b1edcd731a0e9806" translate="yes" xml:space="preserve">
          <source>To handle this case, N-API provides the ability to establish a new 'scope' to which newly created handles will be associated. Once those handles are no longer required, the scope can be 'closed' and any handles associated with the scope are invalidated. The methods available to open/close scopes are &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 경우를 처리하기 위해 N-API는 새로 만든 핸들을 연결할 새로운 '범위'를 설정하는 기능을 제공합니다. 해당 핸들이 더 이상 필요하지 않으면 범위를 '닫을'수 있고 범위와 연관된 핸들이 무효화됩니다. 범위를 열고 닫을 수있는 방법은 &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt; &lt;code&gt;napi_open_handle_scope&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt; &lt;code&gt;napi_close_handle_scope&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8ae9fb9267ffb10903bb86fc63715f4cd0cfcaaf" translate="yes" xml:space="preserve">
          <source>To have a module execute code multiple times, export a function, and call that function.</source>
          <target state="translated">모듈이 코드를 여러 번 실행하도록하려면 함수를 내보내고 해당 함수를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="56b15cec207bf8e8429b8350d22d585ee8bda635" translate="yes" xml:space="preserve">
          <source>To illustrate the behavior, imagine this hypothetical implementation of &lt;code&gt;require()&lt;/code&gt;, which is quite similar to what is actually done by &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">동작을 설명하기 위해 &lt;code&gt;require()&lt;/code&gt; 의 가상 구현 이 실제로 &lt;code&gt;require()&lt;/code&gt; 의해 수행되는 것과 매우 유사하다고 상상해보십시오 .</target>
        </trans-unit>
        <trans-unit id="d68e5b68a41d9794b3e7248a2d7f36459e1a791e" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import-expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CommonJS에 ES 모듈을 포함 시키려면 &lt;a href=&quot;#esm_import-expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d089308ad7fa8608dc856e8dfd0c999ca3ce0d66" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import_expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CommonJS에 ES 모듈을 포함하려면 &lt;a href=&quot;#esm_import_expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="652a3cd9523950c5d1acf707c7efb8f626e43774" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the third line from the last would just be changed to:</source>
          <target state="translated">소켓 &lt;code&gt;/tmp/echo.sock&lt;/code&gt; 에서 청취하려면 마지막 행의 세 번째 행을 다음과 같이 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="4902deed6b5f58c97833c40362dfd51cfd1113c3" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">소켓 &lt;code&gt;/tmp/echo.sock&lt;/code&gt; 에서 수신하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="21739c6890c2acc4bdec505b9f422fb0e996afe2" translate="yes" xml:space="preserve">
          <source>To maintain existing behaviour &lt;code&gt;response.finished&lt;/code&gt; should be replaced with &lt;code&gt;response.writableEnded&lt;/code&gt;.</source>
          <target state="translated">기존 동작 유지하기 위해 &lt;code&gt;response.finished&lt;/code&gt; 로 대체해야 &lt;code&gt;response.writableEnded&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="3e10d026ab12717e40d75bbfd814a562f51e4156" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 인스턴스를보다 안정적으로 작성 하고 오류가 발생 하기 쉽도록 &lt;code&gt;new Buffer()&lt;/code&gt; 생성자 의 다양한 형식 이 &lt;strong&gt;더 이상 사용되지&lt;/strong&gt; 않고 별도의 &lt;code&gt;Buffer.from()&lt;/code&gt; , &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 로 대체되었습니다. 행동 양식.</target>
        </trans-unit>
        <trans-unit id="eb5ae203366178adec792f09dee66772cb19c68f" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">의 생성하려면 &lt;code&gt;Buffer&lt;/code&gt; 믿을 수 있고 적은 오류가 발생하기 쉬운 인스턴스를,의 다양한 형태의 &lt;code&gt;new Buffer()&lt;/code&gt; 생성자는 한 &lt;strong&gt;사용되지 않는&lt;/strong&gt; 별도의 대체 &lt;code&gt;Buffer.from()&lt;/code&gt; , &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 행동 양식.</target>
        </trans-unit>
        <trans-unit id="f485bda8dbde48a50bff5fb1b3ed1e00c32ea5f0" translate="yes" xml:space="preserve">
          <source>To make the introduction of &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; non-breaking, ensure that every previously supported entry point is exported. It is best to explicitly specify entry points so that the package&amp;rsquo;s public API is well-defined. For example, a project that previous exported &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;feature&lt;/code&gt;, and the &lt;code&gt;package.json&lt;/code&gt; could use the following &lt;code&gt;package.exports&lt;/code&gt;:</source>
          <target state="translated">중단되지 않는 &lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt; 도입하려면 이전에 지원되는 모든 진입 점을 내 보내야합니다. 패키지의 공용 API가 잘 정의되도록 진입 점을 명시 적으로 지정하는 것이 가장 좋습니다. 예를 들어 이전에 &lt;code&gt;main&lt;/code&gt; , &lt;code&gt;lib&lt;/code&gt; , &lt;code&gt;feature&lt;/code&gt; 및 &lt;code&gt;package.json&lt;/code&gt; 을 내 보낸 프로젝트 는 다음 &lt;code&gt;package.exports&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3e7d1841b070660f5e124c6d0b0e5f09de0a3865" translate="yes" xml:space="preserve">
          <source>To mitigate tampering with policy files on disk, an integrity for the policy file itself may be provided via &lt;code&gt;--policy-integrity&lt;/code&gt;. This allows running &lt;code&gt;node&lt;/code&gt; and asserting the policy file contents even if the file is changed on disk.</source>
          <target state="translated">디스크에서 정책 파일의 무단 변경을 완화하기 위해 &lt;code&gt;--policy-integrity&lt;/code&gt; 를 통해 정책 파일 자체의 무결성을 제공 할 수 있습니다 . 이를 통해 파일이 디스크에서 변경 되더라도 &lt;code&gt;node&lt;/code&gt; 실행 하고 정책 파일 내용을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a99036e7fc6f4dd433ceb4a4d4fe866ee586c79" translate="yes" xml:space="preserve">
          <source>To mitigate the risk, renegotiation is limited to three times every ten minutes. An &lt;code&gt;'error'&lt;/code&gt; event is emitted on the &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instance when this threshold is exceeded. The limits are configurable:</source>
          <target state="translated">위험을 완화하기 위해 재협상은 10 분마다 3 번으로 제한됩니다. &lt;code&gt;'error'&lt;/code&gt; 이벤트가에 출사 &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; 의&lt;/a&gt; 이 임계 값을 초과하는 경우 예. 한계는 구성 가능합니다.</target>
        </trans-unit>
        <trans-unit id="6bd92caa0dd0e220612d4509343caa388124bfc1" translate="yes" xml:space="preserve">
          <source>To nest &lt;code&gt;Domain&lt;/code&gt; objects as children of a parent &lt;code&gt;Domain&lt;/code&gt; they must be explicitly added.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; 개체를 부모 &lt;code&gt;Domain&lt;/code&gt; 자식으로 중첩하려면 명시 적으로 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="e8af107ea8ff0e7e34570ffa65be2ae9ff7ad82a" translate="yes" xml:space="preserve">
          <source>To parse the URL into its parts:</source>
          <target state="translated">URL을 해당 부분으로 구문 분석하려면 :</target>
        </trans-unit>
        <trans-unit id="3a3735245b8ad30f17b7512872187c1aa1d62b39" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; can be used:</source>
          <target state="translated">URL을 부분으로 구문 분석하려면 &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="773a385d557159d7209e8d59495c1d4ae2e640ae" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts, &lt;code&gt;new URL()&lt;/code&gt; can be used:</source>
          <target state="translated">URL을 해당 부분으로 구문 분석하려면 &lt;code&gt;new URL()&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c60e9cd07a257263fb8969b08ff3c393206c09af" translate="yes" xml:space="preserve">
          <source>To receive pushed streams on the client, set a listener for the &lt;code&gt;'stream'&lt;/code&gt; event on the &lt;code&gt;ClientHttp2Session&lt;/code&gt;:</source>
          <target state="translated">클라이언트에서 푸시 된 스트림을 수신하려면 &lt;code&gt;ClientHttp2Session&lt;/code&gt; 에서 &lt;code&gt;'stream'&lt;/code&gt; 이벤트에 대한 리스너를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="9fa7f2103554e2af5c33c5202941bd62a5133842" translate="yes" xml:space="preserve">
          <source>To restart a crashed application in a more reliable way, whether &lt;code&gt;'uncaughtException'&lt;/code&gt; is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.</source>
          <target state="translated">&lt;code&gt;'uncaughtException'&lt;/code&gt; 발생 여부에 관계없이보다 안정적인 방식으로 충돌 한 응용 프로그램을 다시 시작하려면 별도의 프로세스에서 외부 모니터를 사용하여 응용 프로그램 오류를 감지하고 필요에 따라 복구하거나 다시 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="24f3c415831200821564a427fca851b253ddebe0" translate="yes" xml:space="preserve">
          <source>To run the above example, create a new WebAssembly text format file named &lt;code&gt;demo.wat&lt;/code&gt;:</source>
          <target state="translated">위의 예를 실행하려면 demo.wat라는 새 WebAssembly 텍스트 형식 파일을 &lt;code&gt;demo.wat&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f906fc2e9ed75535f0e33b7e1aaaf78e72fcf87b" translate="yes" xml:space="preserve">
          <source>To set a function to be returned by the &lt;code&gt;require()&lt;/code&gt; for the addon:</source>
          <target state="translated">addon에 대해 &lt;code&gt;require()&lt;/code&gt; 가 리턴 할 함수를 설정하려면 다음을 수행 하십시오.</target>
        </trans-unit>
        <trans-unit id="14a2b1e275dc4b6cd9fc94bdafc4ee8fc0b41dfc" translate="yes" xml:space="preserve">
          <source>To set the main entry point for a package, it is advisable to define both &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#packages_main&quot;&gt;&lt;code&gt;&quot;main&quot;&lt;/code&gt;&lt;/a&gt; in the package&amp;rsquo;s &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file:</source>
          <target state="translated">패키지의 기본 진입 점을 설정하려면 패키지의 &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt; 파일 에서 &lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#packages_main&quot;&gt; &lt;code&gt;&quot;main&quot;&lt;/code&gt; &lt;/a&gt; 을 모두 정의하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="b4f2374e10f3a7eb6b83d547d6c57c17e364858d" translate="yes" xml:space="preserve">
          <source>To test it in JavaScript:</source>
          <target state="translated">JavaScript로 테스트하려면</target>
        </trans-unit>
        <trans-unit id="a0b29e9bbd29bf287a671314a5215366e894cdec" translate="yes" xml:space="preserve">
          <source>To test it, run the following JavaScript:</source>
          <target state="translated">테스트하려면 다음 JavaScript를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="80e061ad3871e4c5c14888dba30a6440671c5a6d" translate="yes" xml:space="preserve">
          <source>To test:</source>
          <target state="translated">테스트하려면 :</target>
        </trans-unit>
        <trans-unit id="4606c24e18a786400a447c1828c1a5df8796aaf7" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">이를 위해 N-API는 데이터를 할당하는 방법을 제공하여 데이터의 수명주기가 에이전트의 수명주기와 연결되도록합니다.</target>
        </trans-unit>
        <trans-unit id="86732a9994de407a5b4f9e7fdc6f58ff1d7808fa" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides type-tagging capabilities.</source>
          <target state="translated">이를 위해 N-API는 유형 태깅 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6e39ad99eeff4166287ae62024f1f20d4affe06b" translate="yes" xml:space="preserve">
          <source>To this env, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">이 환경에서 N-API는 수명주기가 에이전트의 수명주기와 연결되도록 데이터를 할당하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b5395666fc1a664a6eb308266e88f8f63adf53a4" translate="yes" xml:space="preserve">
          <source>To unset the capture function, &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; may be used. Calling this method with a non-&lt;code&gt;null&lt;/code&gt; argument while another capture function is set will throw an error.</source>
          <target state="translated">캡처 기능을 설정 해제하기 위해 &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; 사용할 수 있습니다. 다른 캡처 함수가 설정되어있는 동안 &lt;code&gt;null&lt;/code&gt; 이 아닌 인수 로이 메소드를 호출 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="012fe7e6f8e20a96385f534d6d6e01f2918b08c3" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;strict&lt;/code&gt; mode:</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; 모드 를 사용하려면</target>
        </trans-unit>
        <trans-unit id="1ba4716684f52476f95f24b69f86ae65d28cd012" translate="yes" xml:space="preserve">
          <source>To use N-API in the above &quot;Hello world&quot; example, replace the content of &lt;code&gt;hello.cc&lt;/code&gt; with the following. All other instructions remain the same.</source>
          <target state="translated">위의 &quot;Hello world&quot;예제에서 N-API를 사용하려면 &lt;code&gt;hello.cc&lt;/code&gt; 의 내용을 다음 으로 바꿉니다 . 다른 모든 지침은 동일하게 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="c2030286b077ae9f310389c7d604ec2ac5189637" translate="yes" xml:space="preserve">
          <source>To use Perfect Forward Secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">&lt;code&gt;tls&lt;/code&gt; 모듈 과 함께 &lt;code&gt;DHE&lt;/code&gt; 를 사용하여 Perfect Forward Secrecy를 사용하려면 Diffie-Hellman 매개 변수를 생성하고 &lt;code&gt;dhparam&lt;/code&gt; 옵션으로 &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt; 지정해야합니다 . 다음은 OpenSSL 명령 행 인터페이스를 사용하여 이러한 매개 변수를 생성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d0a5c6de3c73d917b80285249a110f4f66a4f266" translate="yes" xml:space="preserve">
          <source>To use legacy assertion mode:</source>
          <target state="translated">레거시 어설 션 모드를 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="409731a0c399b993f15524f4692dc78e27a98aeb" translate="yes" xml:space="preserve">
          <source>To use legacy mode:</source>
          <target state="translated">레거시 모드를 사용하려면</target>
        </trans-unit>
        <trans-unit id="b9501e0f16f826f87e9350e123b56bd36119f5d9" translate="yes" xml:space="preserve">
          <source>To use more than one constant, use the bitwise OR &lt;code&gt;|&lt;/code&gt; operator.</source>
          <target state="translated">둘 이상의 상수를 사용하려면 비트 OR &lt;code&gt;|&lt;/code&gt; 운영자.</target>
        </trans-unit>
        <trans-unit id="59a200c232ad3bd583aabc76d909f585e995a5dc" translate="yes" xml:space="preserve">
          <source>To use perfect forward secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">&lt;code&gt;tls&lt;/code&gt; 모듈 과 함께 &lt;code&gt;DHE&lt;/code&gt; 를 사용하여 완벽한 순방향 보안을 사용하려면 Diffie-Hellman 매개 변수를 생성 하고 &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt; 대한 &lt;code&gt;dhparam&lt;/code&gt; 옵션으로 지정해야합니다 . 다음은 OpenSSL 명령 줄 인터페이스를 사용하여 이러한 매개 변수를 생성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c20a336e72da316b2c9c2163a7733348225e4cc6" translate="yes" xml:space="preserve">
          <source>To use strict assertion mode:</source>
          <target state="translated">엄격한 어설 션 모드를 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="5b5ad91da59de7323cefe83cf2f0b20fda7969fd" translate="yes" xml:space="preserve">
          <source>To use the HTTP server and client one must &lt;code&gt;require('http')&lt;/code&gt;.</source>
          <target state="translated">HTTP 서버와 클라이언트를 사용하려면 &lt;code&gt;require('http')&lt;/code&gt; 이어야 합니다 .</target>
        </trans-unit>
        <trans-unit id="71784b618df5ed1f33114983208856ba2d4ca1c0" translate="yes" xml:space="preserve">
          <source>To use this module:</source>
          <target state="translated">이 모듈을 사용하려면</target>
        </trans-unit>
        <trans-unit id="b7399a303049823aaa63a8aa2b18850c567f8783" translate="yes" xml:space="preserve">
          <source>To verify that ICU is enabled at all (&lt;code&gt;system-icu&lt;/code&gt;, &lt;code&gt;small-icu&lt;/code&gt;, or &lt;code&gt;full-icu&lt;/code&gt;), simply checking the existence of &lt;code&gt;Intl&lt;/code&gt; should suffice:</source>
          <target state="translated">ICU가 활성화되어 있는지 ( &lt;code&gt;system-icu&lt;/code&gt; , &lt;code&gt;small-icu&lt;/code&gt; 또는 &lt;code&gt;full-icu&lt;/code&gt; ) 확인하려면 &lt;code&gt;Intl&lt;/code&gt; 의 존재를 확인하는 것만으로 충분합니다.</target>
        </trans-unit>
        <trans-unit id="767a6b4283338f258039c6484f378f9774bf103f" translate="yes" xml:space="preserve">
          <source>To view this documentation as a manual page in a terminal, run &lt;code&gt;man node&lt;/code&gt;.</source>
          <target state="translated">이 문서를 터미널에서 매뉴얼 페이지로 보려면 &lt;code&gt;man node&lt;/code&gt; 를 실행 하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa49ae28e51088359080f4611ccdaeaee55d06b4" translate="yes" xml:space="preserve">
          <source>Too much HTTP header data was received. In order to protect against malicious or malconfigured clients, if more than 8KB of HTTP header data is received then HTTP parsing will abort without a request or response object being created, and an &lt;code&gt;Error&lt;/code&gt; with this code will be emitted.</source>
          <target state="translated">너무 많은 HTTP 헤더 데이터가 수신되었습니다. 악의적이거나 잘못 구성된 클라이언트로부터 보호하기 위해 8KB 이상의 HTTP 헤더 데이터가 수신되면 요청 또는 응답 객체를 만들지 않고 HTTP 구문 분석이 중단되고이 코드에 &lt;code&gt;Error&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fe926bf43f9c48ad4e7f0d9e66d6b0b6f4a7dcd7" translate="yes" xml:space="preserve">
          <source>Top-level &lt;code&gt;await&lt;/code&gt;</source>
          <target state="translated">최상위 수준의 &lt;code&gt;await&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f88bcb86a810807252c2f25ecd279d2e929c894" translate="yes" xml:space="preserve">
          <source>Trace Event provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.</source>
          <target state="translated">추적 이벤트는 V8, Node.js 코어 및 사용자 공간 코드로 생성 된 추적 정보를 중앙 집중화하는 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="522930d7db32b707108991daae748228a5372efb" translate="yes" xml:space="preserve">
          <source>Trace Events</source>
          <target state="translated">추적 이벤트</target>
        </trans-unit>
        <trans-unit id="a397d20d155f600d42049a221bc3c7232e0e47bf" translate="yes" xml:space="preserve">
          <source>Trace events</source>
          <target state="translated">추적 이벤트</target>
        </trans-unit>
        <trans-unit id="28c7adc15802eb0b8935f3924650c3799b474e55" translate="yes" xml:space="preserve">
          <source>Tracing can be enabled with the &lt;code&gt;--trace-event-categories&lt;/code&gt; command-line flag or by using the &lt;code&gt;trace_events&lt;/code&gt; module. The &lt;code&gt;--trace-event-categories&lt;/code&gt; flag accepts a list of comma-separated category names.</source>
          <target state="translated">&lt;code&gt;--trace-event-categories&lt;/code&gt; 명령 줄 플래그를 사용하거나 &lt;code&gt;trace_events&lt;/code&gt; 모듈 을 사용하여 추적을 활성화 할 수 있습니다 . &lt;code&gt;--trace-event-categories&lt;/code&gt; 플래그는 콤마로 분리 카테고리 이름 목록을 받아 들인다.</target>
        </trans-unit>
        <trans-unit id="94e1656659df1321444d7824a33ef26cfdf8bed9" translate="yes" xml:space="preserve">
          <source>Track heap object allocations for heap snapshots.</source>
          <target state="translated">힙 스냅 샷에 대한 힙 오브젝트 할당을 추적하십시오.</target>
        </trans-unit>
        <trans-unit id="3dede6c9f5b091d4f1178b0d775ad848dfc2fe33" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate.</source>
          <target state="translated">주어진 샘플링 속도에서 이벤트 루프 지연을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="32233aa3037754c48a35202d5c815e9963127c0e" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate. The constructor of this class not exposed to users.</source>
          <target state="translated">주어진 샘플링 속도에서 이벤트 루프 지연을 추적합니다. 이 클래스의 생성자는 사용자에게 노출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="751fa34c39229191e6c74b37aabdea80d0e08f00" translate="yes" xml:space="preserve">
          <source>Trailers will &lt;strong&gt;only&lt;/strong&gt; be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.</source>
          <target state="translated">트레일러는 청크 인코딩이 응답에 사용되는 경우 &lt;strong&gt;에만&lt;/strong&gt; 방출됩니다. 그렇지 않은 경우 (예 : 요청이 HTTP / 1.0 인 경우) 자동으로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="5b80a47ffdd07a222a0a9c9e34f1db9594849a60" translate="yes" xml:space="preserve">
          <source>Trailing Headers</source>
          <target state="translated">후행 헤더</target>
        </trans-unit>
        <trans-unit id="97674c913d04171ff7608f24cd0b8f68dcb4d685" translate="yes" xml:space="preserve">
          <source>Trailing Headers: A block of headers that follow the body of a request or response.</source>
          <target state="translated">후행 헤더 : 요청 또는 응답 본문을 따르는 헤더 블록입니다.</target>
        </trans-unit>
        <trans-unit id="f752da73347f44bd141752afbe732a41e970f215" translate="yes" xml:space="preserve">
          <source>Trailing garbage at the end of the input stream will now result in an &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">입력 스트림의 끝에서 가비지가 발생하면 이제 &lt;code&gt;'error'&lt;/code&gt; 이벤트 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="969267a9a3af0fbc68033e5c7098f852a9c4f7be" translate="yes" xml:space="preserve">
          <source>Trailing headers have already been sent on the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">후행 헤더는 이미 &lt;code&gt;Http2Stream&lt;/code&gt; 으로 전송되었습니다 .</target>
        </trans-unit>
        <trans-unit id="dfe8180f7ea03f9122b6de27291472a8cb2c1cd1" translate="yes" xml:space="preserve">
          <source>Transfer a &lt;code&gt;MessagePort&lt;/code&gt; to a different &lt;a href=&quot;vm&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; Context. The original &lt;code&gt;port&lt;/code&gt; object is rendered unusable, and the returned &lt;code&gt;MessagePort&lt;/code&gt; instance takes its place.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; 를 다른 &lt;a href=&quot;vm&quot;&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/a&gt; 컨텍스트 로 전송합니다 . 원래 &lt;code&gt;port&lt;/code&gt; 개체는 사용할 수 없게 렌더링되고 반환 된 &lt;code&gt;MessagePort&lt;/code&gt; 인스턴스가 대신합니다.</target>
        </trans-unit>
        <trans-unit id="0cec91881e34f290385e04905cd9b4c93523b2df" translate="yes" xml:space="preserve">
          <source>Transfer a &lt;code&gt;MessagePort&lt;/code&gt; to a different &lt;a href=&quot;vm&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; Context. The original &lt;code&gt;port&lt;/code&gt; object will be rendered unusable, and the returned &lt;code&gt;MessagePort&lt;/code&gt; instance will take its place.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; 를 다른 &lt;a href=&quot;vm&quot;&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/a&gt; 컨텍스트 로 전송하십시오 . 원래 &lt;code&gt;port&lt;/code&gt; 객체는 사용할 수 없게되고 반환 된 &lt;code&gt;MessagePort&lt;/code&gt; 인스턴스가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f821472ecd36f99690900f79391a7c77f149a02e" translate="yes" xml:space="preserve">
          <source>Transform streams are &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams where the output is in some way related to the input. Like all &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams, &lt;code&gt;Transform&lt;/code&gt; streams implement both the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="translated">변환 스트림은 출력이 어떤 식 으로든 입력과 관련이있는 &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림입니다. 모든 &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림 과 마찬가지로 &lt;code&gt;Transform&lt;/code&gt; 스트림은 &lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;가능 인터페이스를 모두 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="5d44411ee4a477c4003d0a4fd42fc9852f8eec42" translate="yes" xml:space="preserve">
          <source>Transmits a &lt;code&gt;GOAWAY&lt;/code&gt; frame to the connected peer &lt;em&gt;without&lt;/em&gt; shutting down the &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">전송합니다 &lt;code&gt;GOAWAY&lt;/code&gt; 에 연결된 피어 프레임을 &lt;em&gt;하지 않고&lt;/em&gt; 아래로 종료 &lt;code&gt;Http2Session&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ea9576ac65abef46df5e8efa3c56554f7250f9bd" translate="yes" xml:space="preserve">
          <source>Transpiler loader</source>
          <target state="translated">트랜스 파일러 로더</target>
        </trans-unit>
        <trans-unit id="49a8085f322954c5cb827e7d3811aff927e4beb4" translate="yes" xml:space="preserve">
          <source>Trigger an &lt;code&gt;'uncaughtException'&lt;/code&gt; in JavaScript. Useful if an async callback throws an exception with no way to recover.</source>
          <target state="translated">JavaScript에서 &lt;code&gt;'uncaughtException'&lt;/code&gt; 을 트리거하십시오 . 비동기 콜백이 복구 할 방법없이 예외를 throw하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="88fd9bf4f298a1d2622150397c550c3d7a9663cc" translate="yes" xml:space="preserve">
          <source>Triggered immediately after &lt;code&gt;'connect'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; 직후에 트리거 됩니다.</target>
        </trans-unit>
        <trans-unit id="87d70346099a1ae1acdb1f551d32288df3e619c7" translate="yes" xml:space="preserve">
          <source>Triggers the abort signal, causing the &lt;code&gt;abortController.signal&lt;/code&gt; to emit the &lt;code&gt;'abort'&lt;/code&gt; event.</source>
          <target state="translated">중단 신호를 트리거하여 &lt;code&gt;abortController.signal&lt;/code&gt; 이 &lt;code&gt;'abort'&lt;/code&gt; 이벤트를 생성하도록합니다.</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="00719949dbe60c953bfc33c3a4fc7d650107ce37" translate="yes" xml:space="preserve">
          <source>True if headers were sent, false otherwise (read-only).</source>
          <target state="translated">헤더가 전송되면 true이고, 그렇지 않으면 false입니다 (읽기 전용).</target>
        </trans-unit>
        <trans-unit id="b2b51224ff63b91805e91d8fb1e7f7c31a7fb84f" translate="yes" xml:space="preserve">
          <source>True if the &lt;code&gt;QuicSession&lt;/code&gt; was closed due to QUIC stateless reset.</source>
          <target state="translated">QUIC 상태 비 저장 재설정으로 인해 &lt;code&gt;QuicSession&lt;/code&gt; 이 닫힌 경우 True 입니다.</target>
        </trans-unit>
        <trans-unit id="00f5babaddb644d2b78ece8c666bd73f4c43cd62" translate="yes" xml:space="preserve">
          <source>True if the certificate provided by the peer during the TLS 1.3 handshake has been verified.</source>
          <target state="translated">TLS 1.3 핸드 셰이크 중에 피어가 제공 한 인증서가 확인 된 경우 참입니다.</target>
        </trans-unit>
        <trans-unit id="52aaf50525ff477ac5ccb10f3e94474da0a7e6a3" translate="yes" xml:space="preserve">
          <source>True if the process is a master. This is determined by the &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt;. If &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; is undefined, then &lt;code&gt;isMaster&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">프로세스가 마스터 인 경우 참입니다. 이것은 &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; 에 의해 결정됩니다 . &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; 가 정의되지 않은 경우 &lt;code&gt;isMaster&lt;/code&gt; 는 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f753bfbea14649b01155a879f0a01fd20d9acfb3" translate="yes" xml:space="preserve">
          <source>True if the process is not a master (it is the negation of &lt;code&gt;cluster.isMaster&lt;/code&gt;).</source>
          <target state="translated">프로세스가 마스터가 아닌 경우 true입니다 ( &lt;code&gt;cluster.isMaster&lt;/code&gt; 의 부정 임 ).</target>
        </trans-unit>
        <trans-unit id="a402e4d3f2f574d66f39eac4a0a59eb01b7429dc" translate="yes" xml:space="preserve">
          <source>Truncates the &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success. The &lt;code&gt;path&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be a string or &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">절단합니다 &lt;code&gt;path&lt;/code&gt; 다음 해결 &lt;code&gt;Promise&lt;/code&gt; 성공시 인수없이. &lt;code&gt;path&lt;/code&gt; &lt;em&gt;있어야&lt;/em&gt; 문자열이나 될 &lt;code&gt;Buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2e6fcf342166aa2b3f7da014c8cfdbe02e48d00f" translate="yes" xml:space="preserve">
          <source>Truncates the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">파일을 자른 다음 성공시 인수없이 &lt;code&gt;Promise&lt;/code&gt; 을 해결합니다 .</target>
        </trans-unit>
        <trans-unit id="eb397e6582ffce2afa6f0c50c11a1da76968e2e5" translate="yes" xml:space="preserve">
          <source>Try to construct a table with the columns of the properties of &lt;code&gt;tabularData&lt;/code&gt; (or use &lt;code&gt;properties&lt;/code&gt;) and rows of &lt;code&gt;tabularData&lt;/code&gt; and log it. Falls back to just logging the argument if it can&amp;rsquo;t be parsed as tabular.</source>
          <target state="translated">의 속성의 열이있는 테이블을 구성하려고 &lt;code&gt;tabularData&lt;/code&gt; (또는 사용 &lt;code&gt;properties&lt;/code&gt; 의) 행 &lt;code&gt;tabularData&lt;/code&gt; 하고 로그인합니다. 인수를 테이블 형식으로 구문 분석 할 수없는 경우 인수를 로깅하는 것으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="bd5dbabbefef5321cc8fd2b28e920d3d40a94172" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; throws an &lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt;&lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt; 을 사용하려고 하면 &lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt; &lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="21b131d9028db7e6607d213bfbc66c0ff665f5d4" translate="yes" xml:space="preserve">
          <source>Turning auto padding off will only work if the input data's length is a multiple of the ciphers block size.</source>
          <target state="translated">자동 패딩을 끄면 입력 데이터의 길이가 암호 블록 크기의 배수 인 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="33207f4af1d127df91481b71b60c34a426f9170e" translate="yes" xml:space="preserve">
          <source>Two Reading Modes</source>
          <target state="translated">두 가지 읽기 모드</target>
        </trans-unit>
        <trans-unit id="27d8454a7bd0ba08acf51f96558585ee7039de1c" translate="yes" xml:space="preserve">
          <source>Two reading modes</source>
          <target state="translated">두 가지 읽기 모드</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="81dec3dee152341fcaaa1202574f5bfce2107fdc" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt; The prime parameter.</source>
          <target state="translated">유형 : &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt; 프라임 매개 변수입니다.</target>
        </trans-unit>
        <trans-unit id="7dbaee6b3d72c5fb2d6b4e87ebb27439475283a2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;EventTarget&amp;gt;&lt;/a&gt; The &lt;code&gt;EventTarget&lt;/code&gt; dispatching the event.</source>
          <target state="translated">입력 : &lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;의 EventTarget&amp;gt; &lt;/a&gt; &lt;code&gt;EventTarget&lt;/code&gt; 이벤트를 파견합니다.</target>
        </trans-unit>
        <trans-unit id="2b791360c3c51b123734a073dbdd5929c2635c37" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fdf3e2cffad5a828a7aa4148e91fb5cc50141041" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;부울&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ab2fdbf860e78b084aa29dd2be0b21f910fe1b8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; Always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; 항상 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="559b8e980fd843d8f083ddbc18aa96d47d8fe569" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True after the &lt;code&gt;AbortController&lt;/code&gt; has been aborted.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt; &lt;/a&gt; &lt;code&gt;AbortController&lt;/code&gt; 가 중단 된 후 True 입니다.</target>
        </trans-unit>
        <trans-unit id="6f769c6c38cdc512378467d74cdd67725602d5d4" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True for Node.js internal events, false otherwise.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; Node.js 내부 이벤트의 경우 True, 그렇지 않으면 False입니다.</target>
        </trans-unit>
        <trans-unit id="fd98bdcf8d930cfc4fddad7bdbcbed014cb5963b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event has not been canceled.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; 이벤트가 취소되지 않은 경우 True입니다.</target>
        </trans-unit>
        <trans-unit id="592434911cf70ed7c8d94bc575c5dc4ad5fcd012" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event was created with the &lt;code&gt;cancelable&lt;/code&gt; option.</source>
          <target state="translated">입력 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;부울&amp;gt;&lt;/a&gt; 이벤트가로 작성된 경우 True를 &lt;code&gt;cancelable&lt;/code&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="1f83a891c954bfcae9f8213ec30898062cbe835e" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; When &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;QuicSocket&lt;/code&gt; will reject new connections.</source>
          <target state="translated">입력 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;부울&amp;gt;&lt;/a&gt; 때 &lt;code&gt;true&lt;/code&gt; 은 &lt;code&gt;QuicSocket&lt;/code&gt; 가 새로운 연결을 거부합니다.</target>
        </trans-unit>
        <trans-unit id="a5ba0f6f560f85a29174a7580551297604de31ba" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;&lt;code&gt;true&lt;/code&gt; if stateless reset processing is enabled; &lt;code&gt;false&lt;/code&gt; if disabled.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; 상태 비 저장 재설정 처리가 활성화 된 경우 &lt;code&gt;true&lt;/code&gt; 이고, 그렇지 않으면 false 입니다. 비활성화 된 경우 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3d077718461853f8c66f956fa3929098d50db3cc" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;&lt;code&gt;true&lt;/code&gt; if the module is running during the Node.js preload phase.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; Node.js 사전로드 단계 중에 모듈이 실행중인 경우 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f9aed18d242ca05f3f44be6eed337a107faa0a84" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;integer&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;정수&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1cc31d3d2b5210c7375845876ff2a16826ac9806" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;숫자&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f6a4292808d277171818eb5b44f627e4679f084" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; A custom generator.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; 사용자 지정 생성기.</target>
        </trans-unit>
        <trans-unit id="03bafe5ad8828c6fe457c8f446cd198a580ac9ee" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Block size parameter. &lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; 블록 크기 매개 변수. &lt;strong&gt;기본값&lt;/strong&gt; : &lt;code&gt;8&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9d23e0025240d7a4b74b72edbd5c82f2a34ec81" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Memory upper bound. It is an error when (approximately) &lt;code&gt;127 * N * r &amp;gt; maxmem&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;32 * 1024 * 1024&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;숫자&amp;gt;&lt;/a&gt; 메모리 상한. (대략) &lt;code&gt;127 * N * r &amp;gt; maxmem&lt;/code&gt; 경우 오류 입니다. &lt;strong&gt;기본값 : &lt;/strong&gt; &lt;code&gt;32 * 1024 * 1024&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c82c20b3feb29912776423b0e35d03d30f486991" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Parallelization parameter. &lt;strong&gt;Default&lt;/strong&gt;&lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; 병렬화 매개 변수. &lt;strong&gt;기본값 &lt;/strong&gt; &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="32b6894e9b972a02fbebf6decdecb826a9a08499" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Returns &lt;code&gt;0&lt;/code&gt; while an event is not being dispatched, &lt;code&gt;2&lt;/code&gt; while it is being dispatched.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; 이벤트가 전달되지 않는 동안 &lt;code&gt;0&lt;/code&gt; 을 반환 하고 전달되는 동안 &lt;code&gt;2&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="191f21e8620a363c6e6653d4276709505b0c1f39" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The CPU/memory cost parameter. Must e a power of two greater than 1. &lt;strong&gt;Default&lt;/strong&gt;&lt;code&gt;16384&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;숫자&amp;gt;&lt;/a&gt; CPU / 메모리 비용 매개 변수. 1보다 큰 2의 거듭 제곱이어야합니다. &lt;strong&gt;기본값 &lt;/strong&gt; &lt;code&gt;16384&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df7e1519d6665be682578426958b31fcdaa096e5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The length in bits of the prime.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;숫자&amp;gt;&lt;/a&gt; 소수의 비트 길이입니다.</target>
        </trans-unit>
        <trans-unit id="a55d5b2ec241b1a7926617263c0c009b0e87335f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The number of bits in the &lt;code&gt;aesCtrParams.counter&lt;/code&gt; that are to be used as the counter.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; 카운터로 사용할 &lt;code&gt;aesCtrParams.counter&lt;/code&gt; 의 비트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="9ef1abafdf3655626452ea56735bc00d8e22f2c1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The size in bits of the generated authentication tag. This values must be one of &lt;code&gt;32&lt;/code&gt;, &lt;code&gt;64&lt;/code&gt;, &lt;code&gt;96&lt;/code&gt;, &lt;code&gt;104&lt;/code&gt;, &lt;code&gt;112&lt;/code&gt;, &lt;code&gt;120&lt;/code&gt;, or &lt;code&gt;128&lt;/code&gt;. &lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;128&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; 생성 된 인증 태그의 비트 크기입니다. 이 값은 &lt;code&gt;32&lt;/code&gt; , &lt;code&gt;64&lt;/code&gt; , &lt;code&gt;96&lt;/code&gt; , &lt;code&gt;104&lt;/code&gt; , &lt;code&gt;112&lt;/code&gt; , &lt;code&gt;120&lt;/code&gt; 또는 &lt;code&gt;128&lt;/code&gt; 중 하나 여야합니다 . &lt;strong&gt;기본값&lt;/strong&gt; : &lt;code&gt;128&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a21a74a74290067e973bcaa8fa38d6218f2fc11f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;문자열&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7a0e9b4740cfad9b64a9a86d1b326d57f5a812d" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-CBC'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'AES-CBC'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="2603363893f59f8abd09a786ddc7895f4619f485" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-CTR'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'AES-CTR'&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="2516b6e63cfc635e02f04e70def23ebe7133872f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-GCM'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'AES-GCM'&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="5d95be9478e8842ab65be05f22f7d1dc208a44b8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-KW'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'AES-KW'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="df699e54874e5e112905c5fa3549600fafcd87e7" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'ECDH'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'ECDH'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="5c66a6d5b46bbd0ed19420fb6cd18291f8f9d9b1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'ECDSA'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'ECDSA'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="87c4a1dce5235029e0203eba172053de5a6b23b3" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'HKDF'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'HKDF'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="2732ca262af774941f8d3b728853d75ad8dfbda2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'HMAC'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'HMAC'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="42e697aea220f34c7166854dfdd1d89eea1709ca" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'HMAC&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'HMAC&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="c6b26ae2daa7d41b9a19a98c93b2406feff1aee5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-DH'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'NODE-DH'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="694bf461bef5a32a65a35acab62f2342237c5048" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-DSA'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'NODE-DSA'&lt;/code&gt; 여야합니다.</target>
        </trans-unit>
        <trans-unit id="906115badaf9f8d9dee887c9a00b704cbab3a734" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-DSA'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'NODE-DSA'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="e77d10d10e61d73182f40d31a0dc792ca7a4b9b5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-SCRYPT'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'NODE-SCRYPT'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="fd3fb2427d956c17c38ee43762a35f8c02a4945a" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'PBKDF2'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'PBKDF2'&lt;/code&gt; 여야합니다.</target>
        </trans-unit>
        <trans-unit id="dfe6d30d11d81818f12d9501faefcb917f4c1992" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'PBKDF2'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'PBKDF2'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="629ad0eafb7a7a59682b4caf68a6598770c4b4b7" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'RSA-PSS'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'RSA-PSS'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="5bc7af1a2745c2e040d02d130e5b4afb195477f6" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt; 여야합니다.</target>
        </trans-unit>
        <trans-unit id="ff0df871f8046c4ac3fd19b66dc75a7d2450124e" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'AES-CBC'&lt;/code&gt;, &lt;code&gt;'AES-CTR'&lt;/code&gt;, &lt;code&gt;'AES-GCM'&lt;/code&gt;, or &lt;code&gt;'AES-KW'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'AES-CBC'&lt;/code&gt; , &lt;code&gt;'AES-CTR'&lt;/code&gt; , &lt;code&gt;'AES-GCM'&lt;/code&gt; 또는 &lt;code&gt;'AES-KW'&lt;/code&gt; 중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="457d486fac563d2e96cedee67f290d1a3c6bbc78" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'AES-CTR'&lt;/code&gt;, &lt;code&gt;'AES-CBC'&lt;/code&gt;, &lt;code&gt;'AES-GCM'&lt;/code&gt;, or &lt;code&gt;'AES-KW'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'AES-CTR'&lt;/code&gt; , &lt;code&gt;'AES-CBC'&lt;/code&gt; , &lt;code&gt;'AES-GCM'&lt;/code&gt; 또는 &lt;code&gt;'AES-KW'&lt;/code&gt; 중 하나 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="f461cba0e1d0a7fb74661e3c0c7124874446a1e2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'ECDSA'&lt;/code&gt; or &lt;code&gt;'ECDH'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'ECDSA'&lt;/code&gt; 또는 &lt;code&gt;'ECDH'&lt;/code&gt; 중 하나 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="3b895e6451776bebb9276ef128dfddd936fca60f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'P-256'&lt;/code&gt;, &lt;code&gt;'P-384'&lt;/code&gt; or &lt;code&gt;'P-521'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'P-256'&lt;/code&gt; , &lt;code&gt;'P-384'&lt;/code&gt; 또는 &lt;code&gt;'P-521'&lt;/code&gt; 중 하나 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="7a8d228704d1caec209b77781372f8dc9951f32a" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt;, &lt;code&gt;'RSA-PSS'&lt;/code&gt;, or &lt;code&gt;'RSA-OAEP'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt; , &lt;code&gt;'RSA-PSS'&lt;/code&gt; 또는 &lt;code&gt;'RSA-OAEP'&lt;/code&gt; 중 하나 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="4a699d6b6caf1b9a5bd3c6c23dd7b70e70089b93" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; One of &lt;code&gt;'secret'&lt;/code&gt;, &lt;code&gt;'private'&lt;/code&gt;, or &lt;code&gt;'public'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;문자열&amp;gt;&lt;/a&gt; 하나의 &lt;code&gt;'secret'&lt;/code&gt; , &lt;code&gt;'private'&lt;/code&gt; 또는 &lt;code&gt;'public'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="978e1a5a183ad430b4f5ed38ac04c4e08fb5ef7c" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; The Diffie-Hellman group name.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Diffie-Hellman 그룹 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e9fcfb7c58be096f0473d03d8c166fef5a4bbcdf" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; The string encoding when &lt;code&gt;salt&lt;/code&gt; is a string.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;salt&lt;/code&gt; 가 문자열 인 경우 문자열 인코딩 입니다.</target>
        </trans-unit>
        <trans-unit id="cfe640573e0e27a7ea866d3c74caa1acdc2ceaff" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; must be &lt;code&gt;'RSA-OAEP'&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; 은 &lt;code&gt;'RSA-OAEP'&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="8ccb3da55d3c8149262995c5bbbd57dd299e1fba" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;문자열&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;어레이 버퍼&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;버퍼&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c8a5ab0c011b8b439e3ddf4315f71a57dfd504c3" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;문자열&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;객체&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a4265544e82459f2823e2fcde24684b91e1cb0b4" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string []&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f4031cfacd061ce21c7543c8e8bdf69c3458801" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;버퍼&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ea1f8486f61d3e2e80f8f2fc8fc310045bbed70" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type&quot;&gt;&amp;lt;undefined&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;버퍼&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type&quot;&gt;&amp;lt;정의되지 않음&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0a3f00ce80162490a7815c4706ba984eacb6bac5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;Function&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;기능&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03fbf3b7db603e2ab0dcaf326b514b18dffd7814" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;Function&amp;gt;&lt;/a&gt; Invoked with a received message cannot be deserialized.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;함수&amp;gt;&lt;/a&gt; 수신 된 메시지로 호출 된 것은 역 직렬화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bee2c30d2a3ec1a9c85913276e07b0d8052bec99" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;Function&amp;gt;&lt;/a&gt; Invoked with a single &lt;code&gt;MessageEvent&lt;/code&gt; argument when a message is received.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;Function&amp;gt;&lt;/a&gt; 메시지가 수신 될 때 단일 &lt;code&gt;MessageEvent&lt;/code&gt; 인수로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="a8a0a1ec9c884ec256153c9a5006a88ba84a4281" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;개체&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="01f78ac9cdfc8f669c51d4b1a75e40e81917f104" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt; An error object</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt; 오류 개체</target>
        </trans-unit>
        <trans-unit id="49742d616ad76a5147e9598cf63783142528874b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;개체&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;문자열&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;문자열 []&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2272da20a862e296c374258d5bacab43343eec53" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ceb223a22edb2173e00d8e6fa8f8508c7109b1c2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;net#net_class_net_blocklist&quot;&gt;&amp;lt;net.BlockList&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;net#net_class_net_blocklist&quot;&gt;&amp;lt;net.BlockList&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3ffeb31b143fc73e85da403cf1496272e5d911b7" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;quic#quic_class_quicendpoint&quot;&gt;&amp;lt;QuicEndpoint[]&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;quic#quic_class_quicendpoint&quot;&gt;&amp;lt;QuicEndpoint []&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34847f742650e612d151120815dcdf1cd8a3f44b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;quic#quic_class_quicserversession_extends_quicsession&quot;&gt;&amp;lt;QuicSession&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;quic#quic_class_quicserversession_extends_quicsession&quot;&gt;&amp;lt;QuicSession&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2568506c1a5940d78e32cac20ca0478096bf69d" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;quic#quic_net_createquicsocket_options&quot;&gt;&amp;lt;QuicSocket&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;quic#quic_net_createquicsocket_options&quot;&gt;&amp;lt;QuicSocket&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7dffc861d30374215dd8373cc077e747d836d6b1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;&amp;lt;stream.Readable&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;&amp;lt;stream.Readable&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="91d4b4c41c8ce82611f320cb2c41940c6682c569" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_aeskeygenparams&quot;&gt;&amp;lt;AesKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_rsahashedkeygenparams&quot;&gt;&amp;lt;RsaHashedKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_eckeygenparams&quot;&gt;&amp;lt;EcKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_hmackeygenparams&quot;&gt;&amp;lt;HmacKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedsakeygenparams&quot;&gt;&amp;lt;NodeDsaKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedhkeygenparams&quot;&gt;&amp;lt;NodeDhKeyGenParams&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;webcrypto#webcrypto_class_aeskeygenparams&quot;&gt;&amp;lt;AesKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_rsahashedkeygenparams&quot;&gt;&amp;lt;RsaHashedKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_eckeygenparams&quot;&gt;&amp;lt;EcKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_hmackeygenparams&quot;&gt;&amp;lt;HmacKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedsakeygenparams&quot;&gt;&amp;lt;NodeDsaKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedhkeygenparams&quot;&gt;&amp;lt;NodeDhKeyGenParams&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cbaa111a337aab1a6ea00fee972498e5a7c36321" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_crypto&quot;&gt;&amp;lt;Crypto&amp;gt;&lt;/a&gt; An implementation of the Web Crypto API standard.</source>
          <target state="translated">유형 : &lt;a href=&quot;webcrypto#webcrypto_class_crypto&quot;&gt;&amp;lt;Crypto&amp;gt;&lt;/a&gt; Web Crypto API 표준의 구현입니다.</target>
        </trans-unit>
        <trans-unit id="542d17d9e5f335edf7614836cb99abd654ed907c" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85ab734ae427a00e0161a54603f81fe27ff24d3a" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; A &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; whose &lt;code&gt;type&lt;/code&gt; will be &lt;code&gt;'private'&lt;/code&gt;.</source>
          <target state="translated">입력 : &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt; &lt;/a&gt;&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 그 &lt;code&gt;type&lt;/code&gt; 가 될 것 &lt;code&gt;'private'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0f174332635cd925bbf30c1190a1c28d7eddade" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; A &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; whose &lt;code&gt;type&lt;/code&gt; will be &lt;code&gt;'public'&lt;/code&gt;.</source>
          <target state="translated">입력 : &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt; &lt;/a&gt;&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 그 &lt;code&gt;type&lt;/code&gt; 가 될 것 &lt;code&gt;'public'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="44a07774bd9709dce2567f86d83a3b9141c99fdd" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; The other parties public key.</source>
          <target state="translated">유형 : &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 다른 당사자 공개 키입니다.</target>
        </trans-unit>
        <trans-unit id="cd480694fcd9a7005cb9e7edf7802cd5407cfcd5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_subtlecrypto&quot;&gt;&amp;lt;SubtleCrypto&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;webcrypto#webcrypto_class_subtlecrypto&quot;&gt;&amp;lt;SubtleCrypto&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2647e5f13f485f80e1042fd1e8926be242eb82e" translate="yes" xml:space="preserve">
          <source>Type: Address</source>
          <target state="translated">유형 : 주소</target>
        </trans-unit>
        <trans-unit id="e9bad3fe9a9d788bf5ced613088a28a42982f43d" translate="yes" xml:space="preserve">
          <source>Type: Compile-time</source>
          <target state="translated">유형 : 컴파일 타임</target>
        </trans-unit>
        <trans-unit id="2e2f71bebdcf0432ba9dae30fc4cd34d69a994d9" translate="yes" xml:space="preserve">
          <source>Type: Deprecation revoked</source>
          <target state="translated">유형 : 지원 중단이 취소됨</target>
        </trans-unit>
        <trans-unit id="4afacd032dbf0b042ddec6e49a24f87b169ee946" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only</source>
          <target state="translated">유형 : 설명서 만</target>
        </trans-unit>
        <trans-unit id="f4038b1c0b648006573b34c3b0edb7a524d16ee2" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : 문서 전용 ( &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; 지원&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="c0334739797e8108100cffbf45a4decc971aeb44" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life</source>
          <target state="translated">유형 : 수명 종료</target>
        </trans-unit>
        <trans-unit id="c05f59a4cce67895e11eed8826cf4cee5bd54571" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life.</source>
          <target state="translated">유형 : 수명 종료</target>
        </trans-unit>
        <trans-unit id="daf411b4184b37552deeb3149950b164297c489d" translate="yes" xml:space="preserve">
          <source>Type: Runtime</source>
          <target state="translated">유형 : 런타임</target>
        </trans-unit>
        <trans-unit id="ebfbea69b5d285abfce6c4bef135a0ed69b7b0de" translate="yes" xml:space="preserve">
          <source>Type: Runtime (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : 런타임 ( &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; 지원&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="024bfd95e02496791b2881c7c1f7dd42376280b5" translate="yes" xml:space="preserve">
          <source>Type: Runtime &lt;code&gt;Transform._transformState&lt;/code&gt; will be removed in future versions where it is no longer required due to simplification of the implementation.</source>
          <target state="translated">유형 : Runtime &lt;code&gt;Transform._transformState&lt;/code&gt; 는 구현 단순화로 인해 더 이상 필요하지 않은 향후 버전에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="44f1ccbdc81b78ae74c2d0ae854796e4d7061770" translate="yes" xml:space="preserve">
          <source>Typed array slices are handled correctly now.</source>
          <target state="translated">형식화 된 배열 슬라이스가 이제 올바르게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="38f54df64da42601768ef91ee31423fac4d49160" translate="yes" xml:space="preserve">
          <source>Types of Streams</source>
          <target state="translated">스트림의 종류</target>
        </trans-unit>
        <trans-unit id="d580373209dd6a1707a0a6d7b5661be32ac592f2" translate="yes" xml:space="preserve">
          <source>Types of streams</source>
          <target state="translated">스트림 유형</target>
        </trans-unit>
        <trans-unit id="d7824c5156ab482008ad2ab94f44f8d1d1cdb802" translate="yes" xml:space="preserve">
          <source>Typically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the &lt;code&gt;data&lt;/code&gt; argument to the finalize callback.</source>
          <target state="translated">일반적으로 클래스 인스턴스를 래핑 할 때 최종 콜백에 대한 &lt;code&gt;data&lt;/code&gt; 인수로 수신 된 기본 인스턴스를 삭제하는 최종 콜백을 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f65c7601001c43a1759b63d4de8c6cbfa1fdec3a" translate="yes" xml:space="preserve">
          <source>Typically, the &lt;code&gt;response&lt;/code&gt; is a digitally signed object from the server's CA that contains information about server's certificate revocation status.</source>
          <target state="translated">일반적으로 &lt;code&gt;response&lt;/code&gt; 은 서버의 인증서 해지 상태에 대한 정보가 포함 된 서버의 CA에서 디지털 서명 된 개체입니다.</target>
        </trans-unit>
        <trans-unit id="1a77b330d905af0212c5c7ff0c6a442a27aabe49" translate="yes" xml:space="preserve">
          <source>Typically, the size of the current buffer is measured against the &lt;code&gt;highWaterMark&lt;/code&gt; in &lt;em&gt;bytes&lt;/em&gt;. However, after &lt;code&gt;setEncoding()&lt;/code&gt; is called, the comparison function will begin to measure the buffer's size in &lt;em&gt;characters&lt;/em&gt;.</source>
          <target state="translated">일반적으로 현재 버퍼의 크기는 &lt;code&gt;highWaterMark&lt;/code&gt; 에 대해 &lt;em&gt;바이트 단위로&lt;/em&gt; 측정 &lt;em&gt;됩니다&lt;/em&gt; . 그러나 &lt;code&gt;setEncoding()&lt;/code&gt; 이 호출 된 후 비교 함수는 버퍼 크기를 &lt;em&gt;문자&lt;/em&gt; 단위로 측정하기 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="219e224c2a9b92a6e101f6876f27314c5bbac679" translate="yes" xml:space="preserve">
          <source>Typically, this is managed through the number of &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'message'&lt;/code&gt; listeners on the &lt;code&gt;process&lt;/code&gt; object. However, this method can be used to explicitly request a specific behavior.</source>
          <target state="translated">일반적으로 이는 &lt;code&gt;process&lt;/code&gt; 개체 의 &lt;code&gt;'disconnect'&lt;/code&gt; 및 &lt;code&gt;'message'&lt;/code&gt; 리스너 수를 통해 관리됩니다 . 그러나이 메서드는 특정 동작을 명시 적으로 요청하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="b31db7cab86864065f3e106f86c44b514de32cc5" translate="yes" xml:space="preserve">
          <source>UDP/Datagram</source>
          <target state="translated">UDP/Datagram</target>
        </trans-unit>
        <trans-unit id="9f78a32c9e9869badba95ed40dd1e0e645130d94" translate="yes" xml:space="preserve">
          <source>UDP/Datagram Sockets</source>
          <target state="translated">UDP / 데이터 그램 소켓</target>
        </trans-unit>
        <trans-unit id="fb468ca992673c8e389166a22b228b123bbe372c" translate="yes" xml:space="preserve">
          <source>UDP/datagram</source>
          <target state="translated">UDP/datagram</target>
        </trans-unit>
        <trans-unit id="acc6e7e4a3651dd476a52e5cffe0d3c3489395d7" translate="yes" xml:space="preserve">
          <source>UDP/datagram sockets</source>
          <target state="translated">UDP / 데이터 그램 소켓</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="0aa6d0c7243e93e5b8220dee83a136c689b755fa" translate="yes" xml:space="preserve">
          <source>URL Strings and URL Objects</source>
          <target state="translated">URL 문자열 및 URL 객체</target>
        </trans-unit>
        <trans-unit id="668c7293b4faab50fd65a1538e196f37e127ab64" translate="yes" xml:space="preserve">
          <source>URL object support</source>
          <target state="translated">URL 객체 지원</target>
        </trans-unit>
        <trans-unit id="79b0dc43bf17928f302cb7ea469c8717b49e7aa7" translate="yes" xml:space="preserve">
          <source>URL strings and URL objects</source>
          <target state="translated">URL 문자열 및 URL 개체</target>
        </trans-unit>
        <trans-unit id="44c577ae467a3484accd429a3a86f410b07ee886" translate="yes" xml:space="preserve">
          <source>URL-based paths</source>
          <target state="translated">URL 기반 경로</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="01f03837323aab32409bb99c50d6c475179c49df" translate="yes" xml:space="preserve">
          <source>URLs</source>
          <target state="translated">URLs</target>
        </trans-unit>
        <trans-unit id="aaa0bde7f5196da87592a553fbff4a7d60686471" translate="yes" xml:space="preserve">
          <source>URLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL.</source>
          <target state="translated">URL은 특정 범위의 문자 만 포함 할 수 있습니다. 해당 범위를 벗어나는 문자는 인코딩해야합니다. 이러한 문자를 인코딩하는 방법과 인코딩 할 문자는 URL 구조 내에서 문자가있는 위치에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="1caa901ddac6183bbfa527108f80fb9a81c3fb50" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A false-y &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; 구성표가 있는 URL 은 이제 &lt;code&gt;slashes&lt;/code&gt; 옵션에 관계없이 항상 올바른 수의 슬래시를 사용합니다 . 프로토콜이없는 허위 &lt;code&gt;slashes&lt;/code&gt; 옵션도 이제 항상 존중됩니다.</target>
        </trans-unit>
        <trans-unit id="7ce43f682f8e00790c8ef30d56b7ba3f345e48bf" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A falsy &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; 스키마가 있는 URL 은 이제 &lt;code&gt;slashes&lt;/code&gt; 옵션에 관계없이 항상 올바른 수의 슬래시를 사용합니다 . 프로토콜이없는 허위 &lt;code&gt;slashes&lt;/code&gt; 옵션도 이제 항상 존중됩니다.</target>
        </trans-unit>
        <trans-unit id="7cf77927f71e28dcf1f204b6a54ebaa27e8f22d5" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;input&lt;/code&gt; string and returns a &lt;code&gt;Uint8Array&lt;/code&gt; containing the encoded bytes.</source>
          <target state="translated">UTF-8은 &lt;code&gt;input&lt;/code&gt; 문자열을 인코딩하고 인코딩 된 바이트를 포함 하는 &lt;code&gt;Uint8Array&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="b71146a62fb63a8add8a5579d875bb69309a465e" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;src&lt;/code&gt; string to the &lt;code&gt;dest&lt;/code&gt; Uint8Array and returns an object containing the read Unicode code units and written UTF-8 bytes.</source>
          <target state="translated">UTF-8은 &lt;code&gt;src&lt;/code&gt; 문자열을 &lt;code&gt;dest&lt;/code&gt; Uint8Array 로 인코딩하고 읽기 유니 코드 코드 단위와 작성된 UTF-8 바이트를 포함하는 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2a020ddc6f85f9747d28e1db856f35e5132b29d" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event if the &lt;code&gt;repl&lt;/code&gt; is used as standalone program. If the &lt;code&gt;repl&lt;/code&gt; is included anywhere in another application, adding a listener for this event will throw an &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt; 예외 는 &lt;code&gt;repl&lt;/code&gt; 이 독립형 프로그램으로 사용되는 경우 에만 'uncaughtException' 이벤트를 발생시킵니다 . &lt;code&gt;repl&lt;/code&gt; 이 다른 응용 프로그램의 아무 곳에 나 포함되어 있으면 이 이벤트에 대한 리스너를 추가하면 &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="00499514ac2e595db5c7987996d23850bbb67efb" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event in the standalone REPL. Adding a listener for this event in a REPL within another Node.js program throws &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt; 예외 는 독립 실행 형 REPL에서 'uncaughtException' 이벤트 만 내 보냅니다. 다른 Node.js 프로그램 내의 REPL에서이 이벤트에 대한 리스너를 추가하면 &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; 가 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="12780a16241be2fa7756cbd98a691718ec9bd790" translate="yes" xml:space="preserve">
          <source>Undefined value error is identified by &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt;.</source>
          <target state="translated">정의되지 않은 값 오류는 &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt; 로 식별됩니다 .</target>
        </trans-unit>
        <trans-unit id="355754b0f03869d3cdd89f47abdc47135392a8b0" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, there is no need to modify the report triggering signal. However, if &lt;code&gt;SIGUSR2&lt;/code&gt; is already used for other purposes, then this flag helps to change the signal for report generation and preserve the original meaning of &lt;code&gt;SIGUSR2&lt;/code&gt; for the said purposes.</source>
          <target state="translated">정상적인 상황에서는 보고서 트리거링 신호를 수정할 필요가 없습니다. 그러나 &lt;code&gt;SIGUSR2&lt;/code&gt; 가 이미 다른 목적으로 사용 된 경우이 플래그는 보고서 생성을위한 신호를 변경하고 해당 목적을 위해 &lt;code&gt;SIGUSR2&lt;/code&gt; 의 원래 의미를 유지하는 데 도움이 됩니다.</target>
        </trans-unit>
        <trans-unit id="91d9c4087497cf56cdc0c9a2696808d747e7494c" translate="yes" xml:space="preserve">
          <source>Under the hood, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses the same operating system facilities as most other programs. For instance, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; will almost always resolve a given name the same way as the &lt;code&gt;ping&lt;/code&gt; command. On most POSIX-like operating systems, the behavior of the &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; function can be modified by changing settings in &lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt;&lt;code&gt;nsswitch.conf(5)&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;&lt;code&gt;resolv.conf(5)&lt;/code&gt;&lt;/a&gt;, but changing these files will change the behavior of all other programs running on the same operating system.</source>
          <target state="translated">후드, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 대부분의 다른 프로그램과 동일한 운영 체제 기능을 사용합니다. 예를 들어 &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 은 거의 항상 &lt;code&gt;ping&lt;/code&gt; 명령 과 같은 방식으로 지정된 이름을 확인합니다 . 대부분의 POSIX 유사 운영 체제에서 &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 함수 의 동작은 &lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt; &lt;code&gt;nsswitch.conf(5)&lt;/code&gt; &lt;/a&gt; 및 / 또는 &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt; &lt;code&gt;resolv.conf(5)&lt;/code&gt; &lt;/a&gt; 설정을 변경하여 수정할 수 있지만 이러한 파일을 변경하면 동작이 변경됩니다. 동일한 운영 체제에서 실행되는 다른 모든 프로그램</target>
        </trans-unit>
        <trans-unit id="580e3fbd2559f3ee3cfa1776417d5a62f4c14b7c" translate="yes" xml:space="preserve">
          <source>Underscores instead of dashes are now allowed for Node.js options as well, in addition to V8 options.</source>
          <target state="translated">V8 옵션 외에도 대시 대신 밑줄이 Node.js 옵션에도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="ed2bd0b19c6dea70c7607644329c823665264cfc" translate="yes" xml:space="preserve">
          <source>Unflag &lt;code&gt;--experimental-modules&lt;/code&gt;.</source>
          <target state="translated">Unflag &lt;code&gt;--experimental-modules&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="9c2e7282fb0e27b15982f88c5929897b3adfb4d7" translate="yes" xml:space="preserve">
          <source>Unflag Top-Level Await.</source>
          <target state="translated">Unflag 최상위 레벨 대기.</target>
        </trans-unit>
        <trans-unit id="d19cffd05ee3c79cb00f356aecb7406fcb1d3e26" translate="yes" xml:space="preserve">
          <source>Unflag conditional exports.</source>
          <target state="translated">조건부 내보내기 플래그를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="a980d0989e6f2d52c0782eb0bf64b702bd0c9261" translate="yes" xml:space="preserve">
          <source>Unflag self-referencing a package using its name.</source>
          <target state="translated">이름을 사용하여 패키지 자체 참조 플래그를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="c6535069f12c408de03e4a4245fa064b53e80ecc" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;napi_instanceof()&lt;/code&gt; does not protect against prototype manipulation. For example, the prototype of the database handle instance can be set to the prototype of the constructor for query handle instances. In this case, the database handle instance can appear as a query handle instance, and it will pass the &lt;code&gt;napi_instanceof()&lt;/code&gt; test for a query handle instance, while still containing a pointer to a database handle.</source>
          <target state="translated">불행히도 &lt;code&gt;napi_instanceof()&lt;/code&gt; 는 프로토 타입 조작으로부터 보호하지 않습니다. 예를 들어 데이터베이스 핸들 인스턴스의 프로토 타입을 쿼리 핸들 인스턴스의 생성자의 프로토 타입으로 설정할 수 있습니다. 이 경우 데이터베이스 핸들 인스턴스는 쿼리 핸들 인스턴스로 나타날 수 있으며 쿼리 핸들 인스턴스에 대한 &lt;code&gt;napi_instanceof()&lt;/code&gt; 테스트를 통과하는 동시에 데이터베이스 핸들에 대한 포인터를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="1b6da39f1b5c6c93e6c62b868278c8947240fb88" translate="yes" xml:space="preserve">
          <source>Unhandled &lt;code&gt;Promise&lt;/code&gt; rejections will now emit a process warning.</source>
          <target state="translated">처리되지 않은 &lt;code&gt;Promise&lt;/code&gt; 거부는 이제 프로세스 경고를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="8ceb854cab777251b618db6f339ec0de596df6df" translate="yes" xml:space="preserve">
          <source>Unhandled promise rejections are deprecated. By default, promise rejections that are not handled terminate the Node.js process with a non-zero exit code. To change the way Node.js treats unhandled rejections, use the &lt;a href=&quot;cli#cli_unhandled_rejections_mode&quot;&gt;&lt;code&gt;--unhandled-rejections&lt;/code&gt;&lt;/a&gt; command-line option.</source>
          <target state="translated">처리되지 않은 약속 거부는 더 이상 사용되지 않습니다. 기본적으로 처리되지 않은 promise 거부는 0이 아닌 종료 코드로 Node.js 프로세스를 종료합니다. Node.js가 처리되지 않은 거부를 처리하는 방식을 변경하려면 &lt;a href=&quot;cli#cli_unhandled_rejections_mode&quot;&gt; &lt;code&gt;--unhandled-rejections&lt;/code&gt; &lt;/a&gt; 명령 줄 옵션을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="464f051574cc9f087c75400c48b33f6db9e3b08d" translate="yes" xml:space="preserve">
          <source>Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</source>
          <target state="translated">처리되지 않은 약속 거부는 더 이상 사용되지 않습니다. 앞으로 처리되지 않은 약속 거부는 0이 아닌 종료 코드로 Node.js 프로세스를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="584854aa0e9467ba1a8c66c80f5e294682497d95" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the host name of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 호스트 이름에 나타나는 유니 코드 문자 는 &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; 알고리즘을 사용하여 자동으로 ASCII로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="571721324afa74a8ee617292febb542f1513c933" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the hostname of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 호스트 이름 내에 나타나는 유니 코드 문자 는 &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; 알고리즘을 사용하여 ASCII로 자동 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="12b0a12e37a0aa70166ef0879f9a3b2e21c18fa6" translate="yes" xml:space="preserve">
          <source>Unknown values for the resolved module location cause failures but are not guaranteed to be forward compatible.</source>
          <target state="translated">해결 된 모듈 위치의 알 수없는 값으로 인해 오류가 발생하지만 순방향 호환이 보장되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="d44850afeb4065072620c926d0775df5f7048af1" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances indicate a bug in the code or its dependencies.</source>
          <target state="translated">애플리케이션이 코드를 동적으로 생성하고 실행하지 않는 한 &lt;code&gt;ReferenceError&lt;/code&gt; 인스턴스는 코드 또는 해당 종속성의 버그를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="929fece4ad5f5e7b4b1b96bae39ed7f671795daa" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances should always be considered a bug in the code or its dependencies.</source>
          <target state="translated">응용 프로그램이 코드를 동적으로 생성 및 실행하지 않는 한 &lt;code&gt;ReferenceError&lt;/code&gt; 인스턴스는 항상 코드 또는 해당 종속성의 버그로 간주해야합니다.</target>
        </trans-unit>
        <trans-unit id="fe2b51adbc6c7b0bc926ec919779dce328f8537f" translate="yes" xml:space="preserve">
          <source>Unless explicitly specified when creating a &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; instance, each &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread has its own copy of &lt;code&gt;process.env&lt;/code&gt;, based on its parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt;, or whatever was specified as the &lt;code&gt;env&lt;/code&gt; option to the &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor. Changes to &lt;code&gt;process.env&lt;/code&gt; will not be visible across &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, and only the main thread can make changes that are visible to the operating system or to native add-ons.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 인스턴스를 만들 때 명시 적으로 지정하지 않으면 각 &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드에는 상위 스레드의 &lt;code&gt;process.env&lt;/code&gt; 또는 &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자에 대한 &lt;code&gt;env&lt;/code&gt; 옵션 으로 지정된 것을 기반으로 고유 한 &lt;code&gt;process.env&lt;/code&gt; 사본이 있습니다 . &lt;code&gt;process.env&lt;/code&gt; 에 대한 변경 사항 은 &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드에서 볼 수 없으며 기본 스레드 만 운영 체제 또는 기본 애드온에서 볼 수있는 변경을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a72e9d9932fe774a0515db2c6aaea624c04effad" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside a &lt;code&gt;napi_callback&lt;/code&gt; is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt; 에서 논의 된 이유가 아니라면 &lt;code&gt;napi_callback&lt;/code&gt; 내에 핸들 및 / 또는 콜백 범위를 생성 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0edc9ad8deb45d66b9a4ce8ca1ee4d65518cb9fc" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside the function body is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt; 에서 논의 된 이유가 아니라면 함수 본문 내에 핸들 및 / 또는 콜백 범위를 만들 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2172d325e09251aae77841665a275f9f12e96c85" translate="yes" xml:space="preserve">
          <source>Unless otherwise scoped within blocks or functions, variables declared either implicitly or using the &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; keywords are declared at the global scope.</source>
          <target state="translated">블록이나 함수 내에서 다른 범위를 지정하지 않는 한 내재적으로 선언되거나 &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; 또는 &lt;code&gt;var&lt;/code&gt; 키워드를 사용하여 선언 된 변수는 전역 범위에서 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="f2b9cb312ebc7377e0acc37ab64028e168b79e3b" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt;&lt;/a&gt;, the hook is allowed to be asynchronous.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt; &lt;/a&gt; 과 달리 후크는 비동기식 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="738279034066201991d76c70c2c3ad5d7acd5fb5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt;, it does not support an additional &lt;code&gt;time&lt;/code&gt; argument since the difference can just be computed directly by subtraction of the two &lt;code&gt;bigint&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt; 과 달리 두 &lt;code&gt;bigint&lt;/code&gt; 를 빼서 차이를 직접 계산할 수 있으므로 추가 &lt;code&gt;time&lt;/code&gt; 인수를 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a7d31182b596602990e6a1b35091501ddc7cd0bd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if &lt;code&gt;readable.unshift()&lt;/code&gt; is called during a read (i.e. from within a &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;stream._read()&lt;/code&gt;&lt;/a&gt; implementation on a custom stream). Following the call to &lt;code&gt;readable.unshift()&lt;/code&gt; with an immediate &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push('')&lt;/code&gt;&lt;/a&gt; will reset the reading state appropriately, however it is best to simply avoid calling &lt;code&gt;readable.unshift()&lt;/code&gt; while in the process of performing a read.</source>
          <target state="translated">달리 &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; , 스트림의 내부 판독 상태를 재설정하여 판독 프로세스를 종료하지 않을 것이다. 읽기 도중 (즉 , 사용자 정의 스트림 의 &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;stream._read()&lt;/code&gt; &lt;/a&gt; 구현 내에서 &lt;code&gt;readable.unshift()&lt;/code&gt; 가 호출 되면 예기치 않은 결과가 발생할 수 있습니다 . 즉시 &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push('')&lt;/code&gt; &lt;/a&gt; 를 사용하여 &lt;code&gt;readable.unshift()&lt;/code&gt; 를 호출 하면 읽기 상태가 적절하게 재설정되지만 읽기를 수행하는 과정에서 &lt;code&gt;readable.unshift()&lt;/code&gt; 를 호출하지 않는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="ffbea780c221ab67ef22ff2efead15150ae9d4ad" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module, duplicate keys in the form of array values are not allowed. Arrays are stringified using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt;&lt;code&gt;array.toString()&lt;/code&gt;&lt;/a&gt;, which simply joins all array elements with commas.</source>
          <target state="translated">&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt; 모듈 과 달리 배열 값 형식의 중복 키는 허용되지 않습니다. 배열은 모든 배열 요소를 쉼표로 결합하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt; &lt;code&gt;array.toString()&lt;/code&gt; &lt;/a&gt; 사용하여 문자열 화됩니다 .</target>
        </trans-unit>
        <trans-unit id="cf1a2bd2bcaee5665438d46897ea1c835ab3373a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;EventEmitter&lt;/code&gt;, any given &lt;code&gt;listener&lt;/code&gt; can be registered at most once per event &lt;code&gt;type&lt;/code&gt;. Attempts to register a &lt;code&gt;listener&lt;/code&gt; multiple times are ignored.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; 와 달리 주어진 &lt;code&gt;listener&lt;/code&gt; 는 이벤트 &lt;code&gt;type&lt;/code&gt; 당 최대 한 번 등록 할 수 있습니다 . &lt;code&gt;listener&lt;/code&gt; 여러 번 등록하려는 시도 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="93286044bb9cc680edddcad0e702f7630a603e80" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;child_process&lt;/code&gt; or &lt;code&gt;cluster&lt;/code&gt;, &lt;code&gt;worker_threads&lt;/code&gt; can share memory. They do so by transferring &lt;code&gt;ArrayBuffer&lt;/code&gt; instances or sharing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances.</source>
          <target state="translated">달리 &lt;code&gt;child_process&lt;/code&gt; 또는 &lt;code&gt;cluster&lt;/code&gt; , &lt;code&gt;worker_threads&lt;/code&gt; 는 메모리를 공유 할 수 있습니다. &lt;code&gt;ArrayBuffer&lt;/code&gt; 인스턴스 를 전송 하거나 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 인스턴스를 공유 하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="786c293ea8a2a263e26d57c1c94d19f2b5a49165" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;eval&lt;/code&gt;, this function does not allow the script to access the current lexical scope, and therefore also does not allow to access the &lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;module scope&lt;/a&gt;, meaning that pseudo-globals such as &lt;code&gt;require&lt;/code&gt; will not be available.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 과 달리이 함수는 스크립트가 현재 어휘 범위에 액세스하는 것을 허용하지 않으므로 &lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;모듈 범위&lt;/a&gt; 에 대한 액세스도 허용하지 않습니다 . 즉, &lt;code&gt;require&lt;/code&gt; 와 같은 의사 전역을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b31b651c0bd301bf713d75fd4cc4cb768e5aecc6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.Module&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.Module&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. The use of 'async' functions can help with manipulating &lt;code&gt;vm.Module&lt;/code&gt; objects.</source>
          <target state="translated">그러나 &lt;code&gt;vm.Script&lt;/code&gt; 와 달리 모든 &lt;code&gt;vm.Module&lt;/code&gt; 개체는 생성 된 컨텍스트에 바인딩됩니다. 에 운영 &lt;code&gt;vm.Module&lt;/code&gt; 의 객체의 동기 자연과 대조적으로, 본질적으로 비동기 &lt;code&gt;vm.Script&lt;/code&gt; 의 객체. 'async'함수를 사용하면 &lt;code&gt;vm.Module&lt;/code&gt; 개체 를 조작하는 데 도움이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bc66008fe7449b513d18dc2e492a0bd73292fdec" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. With the help of async functions, however, manipulating &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects is fairly straightforward.</source>
          <target state="translated">그러나 &lt;code&gt;vm.Script&lt;/code&gt; 와 달리 모든 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 객체는 생성시 컨텍스트에 바인딩됩니다. 에 운영 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 의 객체의 동기 자연과 대조적으로, 본질적으로 비동기 &lt;code&gt;vm.Script&lt;/code&gt; 의 객체. 그러나 비동기 함수를 사용하면 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 객체를 조작하는 것이 매우 간단합니다.</target>
        </trans-unit>
        <trans-unit id="0599776b2acdfbdb39a04e0dc3671e103e9a70bf" translate="yes" xml:space="preserve">
          <source>Unlike modules written in JavaScript, developing and deploying Node.js native addons using N-API requires an additional set of tools. Besides the basic tools required to develop for Node.js, the native addon developer requires a toolchain that can compile C and C++ code into a binary. In addition, depending upon how the native addon is deployed, the &lt;em&gt;user&lt;/em&gt; of the native addon will also need to have a C/C++ toolchain installed.</source>
          <target state="translated">JavaScript로 작성된 모듈과 달리 N-API를 사용하여 Node.js 네이티브 애드온을 개발하고 배포하려면 추가 도구 세트가 필요합니다. Node.js 용으로 개발하는 데 필요한 기본 도구 외에도 네이티브 애드온 개발자에게는 C 및 C ++ 코드를 바이너리로 컴파일 할 수있는 도구 체인이 필요합니다. 또한 네이티브 애드온이 배포되는 방식에 따라 네이티브 애드온 &lt;em&gt;사용자&lt;/em&gt; 는 C / C ++ 도구 모음도 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="7c5877252fff27f076a79408216302ad7142ca78" translate="yes" xml:space="preserve">
          <source>Unlike other methods operating on &lt;code&gt;Module&lt;/code&gt;, this function completes synchronously and returns nothing.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 에서 작동하는 다른 방법과 달리이 함수는 동 기적으로 완료되며 아무것도 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d88dff4d6b12aaa62861c546611f134585732b86" translate="yes" xml:space="preserve">
          <source>Unlike the 16 kb default &lt;code&gt;highWaterMark&lt;/code&gt; for a readable stream, the stream returned by this method has a default &lt;code&gt;highWaterMark&lt;/code&gt; of 64 kb.</source>
          <target state="translated">읽을 수있는 스트림의 16kb 기본 &lt;code&gt;highWaterMark&lt;/code&gt; 와 달리이 메서드에서 반환 된 스트림의 기본 &lt;code&gt;highWaterMark&lt;/code&gt; 는 64kb 입니다.</target>
        </trans-unit>
        <trans-unit id="c89fbd3cb8564198493b0872bc897f53689f1cdc" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt;&lt;code&gt;fork(2)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.fork()&lt;/code&gt; does not clone the current process.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt; &lt;code&gt;fork(2)&lt;/code&gt; &lt;/a&gt; POSIX 시스템 호출 과 달리 &lt;code&gt;child_process.fork()&lt;/code&gt; 는 현재 프로세스를 복제하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="14ecf150019ebe6bc4270fdded6d714de98dea3b" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt;&lt;code&gt;exec(3)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.exec()&lt;/code&gt; does not replace the existing process and uses a shell to execute the command.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt; &lt;code&gt;exec(3)&lt;/code&gt; &lt;/a&gt; POSIX 시스템 호출 과 달리 &lt;code&gt;child_process.exec()&lt;/code&gt; 는 기존 프로세스를 대체하지 않으며 셸을 사용하여 명령을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="ac552eba22b166975a88df1dd5f700d09b1fc6fd" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;&quot;exports&quot;&lt;/code&gt; field, the &lt;code&gt;&quot;imports&quot;&lt;/code&gt; field permits mapping to external packages.</source>
          <target state="translated">&lt;code&gt;&quot;exports&quot;&lt;/code&gt; 필드 와 달리 &lt;code&gt;&quot;imports&quot;&lt;/code&gt; 필드는 외부 패키지에 대한 매핑을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8550f7544a3f4ee9abeb8cba1ce111534a3ad502" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;https&lt;/code&gt; API, &lt;code&gt;tls.connect()&lt;/code&gt; does not enable the SNI (Server Name Indication) extension by default, which may cause some servers to return an incorrect certificate or reject the connection altogether. To enable SNI, set the &lt;code&gt;servername&lt;/code&gt; option in addition to &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https&lt;/code&gt; API 와 달리 &lt;code&gt;tls.connect()&lt;/code&gt; 는 기본적으로 SNI (Server Name Indication) 확장을 활성화하지 않으므로 일부 서버가 잘못된 인증서를 반환하거나 연결을 완전히 거부 할 수 있습니다. SNI를 활성화하려면 &lt;code&gt;host&lt;/code&gt; 외에 &lt;code&gt;servername&lt;/code&gt; 옵션을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="f6945f22f96a4e53b030942319ed3d31db4f4e41" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;net.Socket&lt;/code&gt; and &lt;code&gt;tls.TLSSocket&lt;/code&gt;, a &lt;code&gt;QuicSocket&lt;/code&gt; instance cannot be directly used by user code at the JavaScript level to send or receive data over the network.</source>
          <target state="translated">달리 &lt;code&gt;net.Socket&lt;/code&gt; 및 &lt;code&gt;tls.TLSSocket&lt;/code&gt; 하는 &lt;code&gt;QuicSocket&lt;/code&gt; 의 인스턴스는 직접 네트워크를 통해 데이터를 보내거나받을 수있는 자바 스크립트 수준에서 사용자 코드에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8a651eaa44463d71d0ba17228140a40f73da19e4" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;request&lt;/code&gt; object, if the response closes prematurely, the &lt;code&gt;response&lt;/code&gt; object does not emit an &lt;code&gt;'error'&lt;/code&gt; event but instead emits the &lt;code&gt;'aborted'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; 객체 와 달리 응답이 너무 일찍 닫히면 &lt;code&gt;response&lt;/code&gt; 객체는 &lt;code&gt;'error'&lt;/code&gt; 이벤트를 발생시키지 않고 대신 &lt;code&gt;'aborted'&lt;/code&gt; 이벤트 를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="245fd6876839504d24af1a18605a9594e7b65485" translate="yes" xml:space="preserve">
          <source>Unlike the callback-based API (&lt;code&gt;fs.fstat()&lt;/code&gt;, &lt;code&gt;fs.fchown()&lt;/code&gt;, &lt;code&gt;fs.fchmod()&lt;/code&gt;, and so on), a numeric file descriptor is not used by the promise-based API. Instead, the promise-based API uses the &lt;code&gt;FileHandle&lt;/code&gt; class in order to help avoid accidental leaking of unclosed file descriptors after a &lt;code&gt;Promise&lt;/code&gt; is resolved or rejected.</source>
          <target state="translated">콜백 기반 API ( &lt;code&gt;fs.fstat()&lt;/code&gt; , &lt;code&gt;fs.fchown()&lt;/code&gt; , &lt;code&gt;fs.fchmod()&lt;/code&gt; 등 ) 와 달리 숫자 파일 디스크립터는 약속 기반 API에서 사용되지 않습니다. 대신 약속 기반 API는 &lt;code&gt;Promise&lt;/code&gt; 이 해결되거나 거부 된 후 닫히지 않은 파일 설명자가 실수로 누출되지 않도록하기 위해 &lt;code&gt;FileHandle&lt;/code&gt; 클래스를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="aec5e222fb21197428b2bc12e8d85d03d3d352d7" translate="yes" xml:space="preserve">
          <source>Unregisters &lt;code&gt;fun&lt;/code&gt; as a function to be run with the &lt;code&gt;arg&lt;/code&gt; parameter once the current Node.js environment exits. Both the argument and the function value need to be exact matches.</source>
          <target state="translated">현재 Node.js 환경이 종료되면 &lt;code&gt;arg&lt;/code&gt; 매개 변수 로 실행할 함수로 &lt;code&gt;fun&lt;/code&gt; 을 등록 취소 합니다. 인수와 함수 값은 모두 정확히 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="d18fe6d2e5688021879f7a873899d3115ce6e749" translate="yes" xml:space="preserve">
          <source>Unregisters the cleanup hook corresponding to &lt;code&gt;remove_handle&lt;/code&gt;. This will prevent the hook from being executed, unless it has already started executing. This must be called on any &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; value obtained from &lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;remove_handle&lt;/code&gt; 에 해당하는 정리 후크를 등록 취소합니다 . 이렇게하면 이미 실행을 시작하지 않은 경우 후크가 실행되지 않습니다. 이것은 어떤 호출해야 &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; 에서 얻은 값 &lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="65c4b2669e9c330ac9f73450acc1e9a90e0c45de" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Hmac&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; &lt;code&gt;Hmac&lt;/code&gt; 컨텐츠를 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;encoding&lt;/code&gt; 구비하고 있지 않은 &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="93605dc813a8e916582ddbffd733db79b79cce3c" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Sign&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; &lt;code&gt;Sign&lt;/code&gt; 내용을 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;encoding&lt;/code&gt; 구비하고 있지 않은 &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a2260478143ea14e9583ad4e3b793657f13996f1" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Verify&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;inputEncoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">지정된 &lt;code&gt;data&lt;/code&gt; 사용 하여 &lt;code&gt;Verify&lt;/code&gt; 컨텐츠를 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;inputEncoding&lt;/code&gt; 가 제공되지 않고, &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="77d2af3d6057a23de355899c59dd7f7a41c92d30" translate="yes" xml:space="preserve">
          <source>Updates the cipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">암호를 &lt;code&gt;data&lt;/code&gt; 로 업데이트합니다 . 경우] &lt;code&gt;inputEncoding&lt;/code&gt; 의 인자가 주어진 상기 &lt;code&gt;data&lt;/code&gt; 인수 지정된 인코딩을 사용하는 문자열이다. 는 IF &lt;code&gt;inputEncoding&lt;/code&gt; 의 인수가 주어지지, &lt;code&gt;data&lt;/code&gt; 해야 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 . 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="db6770b018c405d1e79d9580f71bd8cf8282662f" translate="yes" xml:space="preserve">
          <source>Updates the current local settings for this &lt;code&gt;Http2Session&lt;/code&gt; and sends a new &lt;code&gt;SETTINGS&lt;/code&gt; frame to the connected HTTP/2 peer.</source>
          <target state="translated">이 &lt;code&gt;Http2Session&lt;/code&gt; 에 대한 현재 로컬 설정을 업데이트하고 연결된 HTTP / 2 피어에 새 &lt;code&gt;SETTINGS&lt;/code&gt; 프레임을 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="957c600a690a3a36412946efac93320156d3eb42" translate="yes" xml:space="preserve">
          <source>Updates the decipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">암호를 &lt;code&gt;data&lt;/code&gt; 로 업데이트합니다 . 경우] &lt;code&gt;inputEncoding&lt;/code&gt; 의 인자가 주어진 상기 &lt;code&gt;data&lt;/code&gt; 인수 지정된 인코딩을 사용하는 문자열이다. 는 IF &lt;code&gt;inputEncoding&lt;/code&gt; 의 인수가 주어지지, &lt;code&gt;data&lt;/code&gt; 해야합니다 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; . 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="5ed45c49beca4ce2a38119d874096a97e38115cc" translate="yes" xml:space="preserve">
          <source>Updates the hash content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; 해시 컨텐츠를 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;encoding&lt;/code&gt; 구비하고 있지 않은 &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="7d2950e7ca60835246638412bbc7c834bf90e01b" translate="yes" xml:space="preserve">
          <source>Updates the priority for this &lt;code&gt;Http2Stream&lt;/code&gt; instance.</source>
          <target state="translated">이 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스 의 우선 순위를 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="da0f7a31471fb4f5f448dffafa53fb94e1f6c0de" translate="yes" xml:space="preserve">
          <source>Uploading precompiled binaries</source>
          <target state="translated">사전 컴파일 된 바이너리 업로드</target>
        </trans-unit>
        <trans-unit id="f6b150488cf43f5c486b4617e1a3281d94130a34" translate="yes" xml:space="preserve">
          <source>Upon assigning a value to the port, the value will first be converted to a string using &lt;code&gt;.toString()&lt;/code&gt;.</source>
          <target state="translated">포트에 값을 할당하면 값은 먼저 &lt;code&gt;.toString()&lt;/code&gt; 사용하여 문자열로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="f8d1386e91a02cb0c85bee48bbf4edcff35a05d0" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;Aside from the main loop thread, no threads should be using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">(A)의 제작시 &lt;code&gt;napi_threadsafe_function&lt;/code&gt; &lt;code&gt;napi_finalize&lt;/code&gt; 의 콜백을 구비 할 수있다. 이 콜백은 스레드로부터 안전한 함수가 파괴 되려고 할 때 메인 스레드에서 호출됩니다. 생성 중에 주어진 컨텍스트와 finalize 데이터를 수신하고, 예를 들어 &lt;code&gt;uv_thread_join()&lt;/code&gt; 을 호출하여 스레드 후 정리할 수있는 기회를 제공합니다 . &lt;strong&gt;메인 루프 스레드를 제외하고는 finalize 콜백이 완료된 후에 스레드로부터 안전한 기능을 사용하는 스레드가 없어야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a21b6b47f79ea7bf24d3448220aa0114efedd561" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;It is important that, aside from the main loop thread, there be no threads left using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_threadsafe_function&lt;/code&gt; 을 작성 하면 &lt;code&gt;napi_finalize&lt;/code&gt; 콜백이 제공 될 수 있습니다. 이 콜백은 스레드 안전 함수가 파괴 되려고 할 때 기본 스레드에서 호출됩니다. 구성 중에 주어진 컨텍스트와 최종 데이터를 수신하고 스레드 후 정리할 수있는 기회를 제공합니다 &lt;code&gt;uv_thread_join()&lt;/code&gt; 예 : uv_thread_join ()) . &lt;strong&gt;메인 루프 스레드 외에 마무리 콜백이 완료된 후 스레드 안전 기능을 사용하여 스레드가 남아 있지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0ce53004853a0d3cc308cfeea91d8ad9ccd6880" translate="yes" xml:space="preserve">
          <source>Upon success, the &lt;code&gt;Promise&lt;/code&gt; is resolved without arguments.</source>
          <target state="translated">성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 논쟁없이 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="2de39f1fb97e8b9fad2a13c376d5983dda0775fd" translate="yes" xml:space="preserve">
          <source>Usage &amp;amp; Example</source>
          <target state="translated">사용법 및 예</target>
        </trans-unit>
        <trans-unit id="e52c8372eec3736296f93f87fe2977417bbb2721" translate="yes" xml:space="preserve">
          <source>Usage and example</source>
          <target state="translated">사용법 및 예</target>
        </trans-unit>
        <trans-unit id="d36ee1550e836b658bce06b4f1d49c2dec79550a" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;ECDH&lt;/code&gt; with non-dynamically generated key pairs has been simplified. Now, &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; can be called with a preselected private key and the associated public point (key) will be computed and stored in the object. This allows code to only store and provide the private part of the EC key pair. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; now also validates that the private key is valid for the selected curve.</source>
          <target state="translated">동적으로 생성되지 않은 키 페어와 함께 &lt;code&gt;ECDH&lt;/code&gt; 사용 이 단순화되었습니다. 이제 &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 를 미리 선택된 개인 키로 호출 할 수 있으며 관련 공개 지점 (키)이 계산되어 객체에 저장됩니다. 이를 통해 코드는 EC 키 쌍의 개인 부분 만 저장하고 제공 할 수 있습니다. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 이제 개인 키가 선택된 곡선에 유효한지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5ff118bed7c719c614a84434b5439be16bf71d2c" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;util.inherits()&lt;/code&gt; is discouraged. Please use the ES6 &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords to get language level inheritance support. Also note that the two styles are &lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;semantically incompatible&lt;/a&gt;.</source>
          <target state="translated">의 사용 &lt;code&gt;util.inherits()&lt;/code&gt; 좋습니다. ES6의 사용하십시오 &lt;code&gt;class&lt;/code&gt; 및 &lt;code&gt;extends&lt;/code&gt; 언어 수준의 상속 지원을받을 키워드를. 또한 두 스타일은 &lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;의미 상 호환되지 않습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a7631402d6fe2c428c59f2ef506230c3fbbc9e7d" translate="yes" xml:space="preserve">
          <source>Usage with &lt;code&gt;async/await&lt;/code&gt;</source>
          <target state="translated">사용법과 &lt;code&gt;async/await&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="eae67d2af37c578abfdf9b05166c5445461a54fd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt;&lt;code&gt;crypto.getCurves()&lt;/code&gt;&lt;/a&gt; to obtain a list of available curve names. On recent OpenSSL releases, &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; will also display the name and description of each available elliptic curve.</source>
          <target state="translated">사용 가능한 커브 이름 목록을 얻으려면 &lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt; &lt;code&gt;crypto.getCurves()&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 . 최근 OpenSSL 릴리스에서 &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; 에는 사용 가능한 각 타원 곡선의 이름과 설명도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="765064bc0f2ebbee5fd48d238b26225a203b8acc" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt;&lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt;&lt;/a&gt; API instead which provides a much safer, and more convenient, alternative. See &lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513&lt;/a&gt;.</source>
          <target state="translated">보다 안전하고 편리한 대안을 제공하는 &lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt; &lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt; &lt;/a&gt; API를 대신 사용하십시오 . &lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513을&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="49f7b175b350d863eddd6c45e7bde6196f5a3dae" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_request_destroy_error&quot;&gt;&lt;code&gt;request.destroy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http#http_request_abort&quot;&gt;&lt;code&gt;request.abort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;a href=&quot;http#http_request_destroy_error&quot;&gt; &lt;code&gt;request.destroy()&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;http#http_request_abort&quot;&gt; &lt;code&gt;request.abort()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6154b148a1c536c520dcd143957f4ee42fa11bca" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_response_writablefinished&quot;&gt;&lt;code&gt;response.writableFinished&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http#http_response_writableended&quot;&gt;&lt;code&gt;response.writableEnded&lt;/code&gt;&lt;/a&gt; accordingly instead to avoid the ambigiuty.</source>
          <target state="translated">모호함을 피하기 위해 대신 &lt;a href=&quot;http#http_response_writablefinished&quot;&gt; &lt;code&gt;response.writableFinished&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;http#http_response_writableended&quot;&gt; &lt;code&gt;response.writableEnded&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5a30ec81f674dcb2bdd37f247d94a36bf6b4dc08" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;wabt&lt;/a&gt; to compile &lt;code&gt;.wat&lt;/code&gt; to &lt;code&gt;.wasm&lt;/code&gt;</source>
          <target state="translated">사용 &lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;wabt&lt;/a&gt; 에 컴파일 &lt;code&gt;.wat&lt;/code&gt; 에 &lt;code&gt;.wasm&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21fffe7297300dbe9e8fff2c0d9e6bf6dadca3c2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Content-Length&lt;/code&gt; or &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;Content-Length&lt;/code&gt; 또는 &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0002c56173cba9691148346f5ff59f5e6272f3f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;cwd&lt;/code&gt; to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory.</source>
          <target state="translated">사용 &lt;code&gt;cwd&lt;/code&gt; 프로세스가 양산되는 작업 디렉토리를 지정할 수 있습니다. 지정하지 않으면 기본값은 현재 작업 디렉토리를 상속하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c05a3240b8dcb6543102bd118217246c78db60fb" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;cwd&lt;/code&gt; to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory. If given, but the path does not exist, the child process emits an &lt;code&gt;ENOENT&lt;/code&gt; error and exits immediately. &lt;code&gt;ENOENT&lt;/code&gt; is also emitted when the command does not exist.</source>
          <target state="translated">사용 &lt;code&gt;cwd&lt;/code&gt; 프로세스가 양산되는 작업 디렉토리를 지정할 수 있습니다. 지정하지 않으면 기본값은 현재 작업 디렉토리를 상속하는 것입니다. 지정되었지만 경로가 존재하지 않는 경우 하위 프로세스는 &lt;code&gt;ENOENT&lt;/code&gt; 오류를 발생시키고 즉시 종료됩니다. &lt;code&gt;ENOENT&lt;/code&gt; 는 명령이 존재하지 않을 때도 내 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="f76aedfcb8be71f942f01d87d5c0635892414e98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;delete&lt;/code&gt; to delete a property from &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.env&lt;/code&gt; 에서 특성을 삭제 하려면 &lt;code&gt;delete&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf939c90dc4dd9f69fea1af3d6551d592973f347" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;env&lt;/code&gt; to specify environment variables that will be visible to the new process, the default is &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; 를 사용하여 새 프로세스에 표시 될 환경 변수를 지정 하십시오 . 기본값은 &lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bdf8f57531e78c20b41a30f579a4c55918a56c3e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;nc&lt;/code&gt; to connect to a Unix domain socket server:</source>
          <target state="translated">&lt;code&gt;nc&lt;/code&gt; 를 사용하여 Unix 도메인 소켓 서버에 연결 하십시오 .</target>
        </trans-unit>
        <trans-unit id="62e20e3f8690fbd92499a0d02dda8d74f948e711" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;require('crypto').webcrypto&lt;/code&gt; to access this module.</source>
          <target state="translated">이 모듈에 액세스 하려면 &lt;code&gt;require('crypto').webcrypto&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="356edf58e99c3593deffa78d682258b2fdf50801" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;require('crypto')&lt;/code&gt; to access this module.</source>
          <target state="translated">이 모듈에 액세스 하려면 &lt;code&gt;require('crypto')&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="38303ef87943f896c6983d0f7cf9a70cfee6997e" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;dynamic instantiate hook&lt;/a&gt;</source>
          <target state="translated">용도 &lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;동적 인스턴스화 후크를&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e8deebbe7ac1f499b778249832e695a840225107" translate="yes" xml:space="preserve">
          <source>Use an insecure HTTP parser that accepts invalid HTTP headers. This may allow interoperability with non-conformant HTTP implementations. It may also allow request smuggling and other HTTP attacks that rely on invalid headers being accepted. Avoid using this option.</source>
          <target state="translated">잘못된 HTTP 헤더를 허용하는 안전하지 않은 HTTP 구문 분석기를 사용하십시오. 이것은 부적합한 HTTP 구현과의 상호 운용성을 허용 할 수 있습니다. 또한 허용되는 잘못된 헤더에 의존하는 요청 밀수 및 기타 HTTP 공격을 허용 할 수 있습니다. 이 옵션을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="dec969f970ae2da31370314777710e2a530ab15f" translate="yes" xml:space="preserve">
          <source>Use bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL's default CA store. The default store is selectable at build-time.</source>
          <target state="translated">현재 Node.js 버전에서 제공 한 번들로 제공되는 Mozilla CA 저장소를 사용하거나 OpenSSL의 기본 CA 저장소를 사용하십시오. 기본 저장소는 빌드시 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66143e2c420f8a7613239f1e3efea9682fa4826d" translate="yes" xml:space="preserve">
          <source>Use care when dropping privileges:</source>
          <target state="translated">권한을 버릴 때주의하십시오 :</target>
        </trans-unit>
        <trans-unit id="c22810f5eadd6fdab3516f9428266e7d74af7b11" translate="yes" xml:space="preserve">
          <source>Use care when using &lt;code&gt;.searchParams&lt;/code&gt; to modify the &lt;code&gt;URL&lt;/code&gt; because, per the WHATWG specification, the &lt;code&gt;URLSearchParams&lt;/code&gt; object uses different rules to determine which characters to percent-encode. For instance, the &lt;code&gt;URL&lt;/code&gt; object will not percent encode the ASCII tilde (&lt;code&gt;~&lt;/code&gt;) character, while &lt;code&gt;URLSearchParams&lt;/code&gt; will always encode it:</source>
          <target state="translated">&lt;code&gt;.searchParams&lt;/code&gt; 를 사용 하여 &lt;code&gt;URL&lt;/code&gt; 을 수정할 때주의하십시오 . WHATWG 사양에 따라 &lt;code&gt;URLSearchParams&lt;/code&gt; 객체는 다른 규칙을 사용하여 퍼센트 인코딩 할 문자를 결정하기 때문입니다. 예를 들어 &lt;code&gt;URL&lt;/code&gt; 객체는 ASCII 물결표 ( &lt;code&gt;~&lt;/code&gt; ) 문자를 백분율로 인코딩하지 않지만 &lt;code&gt;URLSearchParams&lt;/code&gt; 는 항상이를 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="3f880e14ac8f636e000356a9df1eb2bc8423b67a" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;SlowBuffer&lt;/code&gt; should be used only as a last resort &lt;em&gt;after&lt;/em&gt; a developer has observed undue memory retention in their applications.</source>
          <target state="translated">개발자가 애플리케이션에서 과도한 메모리 보유를 관찰 &lt;em&gt;한 후에&lt;/em&gt; 만 &lt;code&gt;SlowBuffer&lt;/code&gt; 사용을 최후 의 수단으로 사용해야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb9a785beb4586226520f84b421e62184beadeba" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; does not guarantee that the &lt;em&gt;surrounding&lt;/em&gt; code is timing-safe. Care should be taken to ensure that the surrounding code does not introduce timing vulnerabilities.</source>
          <target state="translated">&lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; 을 사용 한다고해서 &lt;em&gt;주변&lt;/em&gt; 코드가 타이밍에 안전하다는 보장은 없습니다 . 주변 코드에 타이밍 취약점이 생기지 않도록주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2d44bc65ec8f3fb2f025187a40ecd2da6969c33" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;readable.push('')&lt;/code&gt; is not recommended.</source>
          <target state="translated">의 사용 &lt;code&gt;readable.push('')&lt;/code&gt; 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d7a18f27832e42f62a26d1adff869deccc220b01" translate="yes" xml:space="preserve">
          <source>Use of the &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;&lt;/a&gt; API without specifying a digest was deprecated in Node.js 6.0 because the method defaulted to using the non-recommended &lt;code&gt;'SHA1'&lt;/code&gt; digest. Previously, a deprecation warning was printed. Starting in Node.js 8.0.0, calling &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; or &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; with &lt;code&gt;digest&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">의 사용 &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt; &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; &lt;/a&gt; 메소드가 아닌 권장 사용하는 기본값 때문에 다이제스트를 지정하지 않고 API는 Node.js를 6.0에서 사용되지 않습니다 &lt;code&gt;'SHA1'&lt;/code&gt; 소화. 이전에는 지원 중단 경고가 인쇄되었습니다. Node.js 8.0.0부터 &lt;code&gt;digest&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 로 설정된 &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; 또는 &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; 를 호출 하면 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="d7240b7777dbbea1e8a1ef48b75d9dcfb9881251" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;101&lt;/code&gt; Informational status code is forbidden in HTTP/2.</source>
          <target state="translated">HTTP / 2 에서는 &lt;code&gt;101&lt;/code&gt; 정보 용 상태 코드를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e598d7c6a0b9a276ca5b3bfcb5495de0f13c1ad6" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; Function</source>
          <target state="translated">의 사용 &lt;code&gt;completer&lt;/code&gt; 의 기능</target>
        </trans-unit>
        <trans-unit id="d093439750831928b8de4711644263144b0afd9f" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; function</source>
          <target state="translated">의 사용 &lt;code&gt;completer&lt;/code&gt; 의 기능</target>
        </trans-unit>
        <trans-unit id="7d32435c7a197f2836dfd3532944c2482f4fd236" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;readable.pipe()&lt;/code&gt; method is recommended for most users as it has been implemented to provide the easiest way of consuming stream data. Developers that require more fine-grained control over the transfer and generation of data can use the &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;readable.on('readable')&lt;/code&gt;/&lt;code&gt;readable.read()&lt;/code&gt; or the &lt;code&gt;readable.pause()&lt;/code&gt;/&lt;code&gt;readable.resume()&lt;/code&gt; APIs.</source>
          <target state="translated">의 사용 &lt;code&gt;readable.pipe()&lt;/code&gt; 이 스트림 데이터를 소비하는 가장 쉬운 방법을 제공하기 위해 구현 된 같은 방법은 대부분의 사용자에게 권장됩니다. 데이터 전송 및 생성을보다 세밀하게 제어해야하는 개발자는 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;readable.on('readable')&lt;/code&gt; / &lt;code&gt;readable.read()&lt;/code&gt; 또는 &lt;code&gt;readable.pause()&lt;/code&gt; / &lt;code&gt;readable.resume()&lt;/code&gt; API를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51dda8e8d6b44f5c574aaf42f7777da76a59fa0f" translate="yes" xml:space="preserve">
          <source>Use of the API is unsafe.</source>
          <target state="translated">API 사용은 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="948edf4448016b2dd50434fa23064801c2a1cb22" translate="yes" xml:space="preserve">
          <source>Use of the legacy &lt;code&gt;url.parse()&lt;/code&gt; method is discouraged. Users should use the WHATWG &lt;code&gt;URL&lt;/code&gt; API. Because the &lt;code&gt;url.parse()&lt;/code&gt; method uses a lenient, non-standard algorithm for parsing URL strings, security issues can be introduced. Specifically, issues with &lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;host name spoofing&lt;/a&gt; and incorrect handling of usernames and passwords have been identified.</source>
          <target state="translated">레거시 &lt;code&gt;url.parse()&lt;/code&gt; 메서드를 사용하지 않는 것이 좋습니다. 사용자는 WHATWG &lt;code&gt;URL&lt;/code&gt; API를 사용해야합니다 . &lt;code&gt;url.parse()&lt;/code&gt; 메서드는 URL 문자열을 구문 분석하는 데 관대 한 비표준 알고리즘을 사용 하기 때문에 보안 문제가 발생할 수 있습니다. 특히 &lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;호스트 이름 스푸핑&lt;/a&gt; 문제와 사용자 이름 및 암호의 잘못된 처리 문제 가 확인되었습니다.</target>
        </trans-unit>
        <trans-unit id="ecb58157819114bf578e605246aad486b041e117" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">이 미리 할당 된 내부 메모리 풀을 사용하는 것은 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 대 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; 호출의 주요 차이점 입니다. 특히 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 은 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용 &lt;em&gt;하지 않는&lt;/em&gt; 반면, &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;은 &lt;/em&gt; &lt;code&gt;size&lt;/code&gt; 가 &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; 의&lt;/a&gt; 절반 이하인 경우 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용합니다 . 차이점은 미묘하지만 응용 프로그램에 &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 제공 하는 추가 성능이 필요할 때 중요 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e255a577e807bc002dfb0d84533a52b730e80888" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">이 사전 할당 된 내부 메모리 풀의 사용은 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 호출 과 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; 호출의 주요 차이점 입니다. 특히 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 은 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용 &lt;em&gt;하지 않는&lt;/em&gt; 반면, &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;은 &lt;/em&gt; &lt;code&gt;size&lt;/code&gt; 가 &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; &lt;/a&gt; 절반 이하인 경우 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용합니다 . 차이는 미묘하지만 응용 프로그램에 &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 제공 하는 추가 성능이 필요할 때 중요 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e7a11077ab4673062788e7639d751aef808d830d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field of a manifest to set configuration for many resources at once. The &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field works by matching resources by their segments. If a scope or resource includes &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt;, unknown specifiers will be searched for in their containing scope. The containing scope for cascading is found by recursively reducing the resource URL by removing segments for &lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;special schemes&lt;/a&gt;, keeping trailing &lt;code&gt;&quot;/&quot;&lt;/code&gt; suffixes, and removing the query and hash fragment. This leads to the eventual reduction of the URL to its origin. If the URL is non-special the scope will be located by the URL's origin. If no scope is found for the origin or in the case of opaque origins, a protocol string can be used as a scope.</source>
          <target state="translated">매니페스트 의 &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; 필드를 사용하여 한 번에 여러 리소스에 대한 구성을 설정합니다. 는 &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; 필드는 세그먼트에 의해 자원을 일치시켜 작동합니다. 범위 또는 리소스에 &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt; 포함 된 경우 포함 된 범위 에서 알 수없는 지정자가 검색됩니다. 캐스 케이 딩에 대한 포함 범위는 &lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;특수 체계에&lt;/a&gt; 대한 세그먼트를 제거 하고 후행 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 접미사를 유지 하며 쿼리 및 해시 조각 을 제거하여 리소스 URL을 반복적으로 줄임으로써 찾을 수 있습니다. 이로 인해 URL이 원본으로 줄어 듭니다. URL이 특별하지 않은 경우 범위는 URL의 출처를 기준으로합니다. 출처에 대한 범위를 찾을 수 없거나 출처가 불투명 한 경우프로토콜 문자열을 범위로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c412511e5a0d8bdf92bc274feb5291adda3aa57" translate="yes" xml:space="preserve">
          <source>Use the dynamically loaded pointer to invoke the function.</source>
          <target state="translated">동적으로로드 된 포인터를 사용하여 함수를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="ae952fa27153fb5a58933981baea15f63402ec27" translate="yes" xml:space="preserve">
          <source>Use the internal &lt;code&gt;require()&lt;/code&gt; machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</source>
          <target state="translated">내부 &lt;code&gt;require()&lt;/code&gt; 기계를 사용하여 모듈의 위치를 ​​찾으십시오. 그러나 모듈을로드하는 대신 확인 된 파일 이름 만 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="15ee6e17c37012897af5f61e78384cc87974d16d" translate="yes" xml:space="preserve">
          <source>Use the specified file as a security policy.</source>
          <target state="translated">지정된 파일을 보안 정책으로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3380a8b2c6439c7c83ba160cfc5cef5210723c7c" translate="yes" xml:space="preserve">
          <source>Use this to determine what colors the terminal supports. Due to the nature of colors in terminals it is possible to either have false positives or false negatives. It depends on process information and the environment variables that may lie about what terminal is used. It is possible to pass in an &lt;code&gt;env&lt;/code&gt; object to simulate the usage of a specific terminal. This can be useful to check how specific environment settings behave.</source>
          <target state="translated">이를 사용하여 터미널이 지원하는 색상을 결정하십시오. 터미널의 색상 특성으로 인해 오탐 (false positive) 또는 오탐 (false negative)이 발생할 수 있습니다. 프로세스 정보 및 사용되는 터미널에 대한 환경 변수에 따라 다릅니다. 특정 터미널의 사용법을 시뮬레이션하기 위해 &lt;code&gt;env&lt;/code&gt; 객체 를 전달할 수 있습니다 . 특정 환경 설정의 작동 방식을 확인하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14e00386da63c018937b609a03a6c28267f1376b" translate="yes" xml:space="preserve">
          <source>Use-case</source>
          <target state="translated">Use-case</target>
        </trans-unit>
        <trans-unit id="076dfed9bb64ae1973f85bbafed11ff094afb9b7" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;N-API&lt;/code&gt; when &lt;code&gt;Constructor.prototype&lt;/code&gt; is not an object.</source>
          <target state="translated">에 의해 사용 된 &lt;code&gt;N-API&lt;/code&gt; 때 &lt;code&gt;Constructor.prototype&lt;/code&gt; 이 객체가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f72f4e59693c2865eebdfafc952cee36d7e9a557" translate="yes" xml:space="preserve">
          <source>Used comparison changed from Strict Equality to &lt;code&gt;Object.is()&lt;/code&gt;</source>
          <target state="translated">사용 된 비교가 &lt;code&gt;Object.is()&lt;/code&gt; Equality에서 Object.is () 로 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="db16827b1edd8cd50f51af8bc6cc80b85ac16c6d" translate="yes" xml:space="preserve">
          <source>Used comparison changed from Strict Equality to &lt;code&gt;Object.is()&lt;/code&gt;.</source>
          <target state="translated">사용 된 비교가 Strict Equality에서 &lt;code&gt;Object.is()&lt;/code&gt; 로 변경되었습니다 .</target>
        </trans-unit>
        <trans-unit id="15e9f8f7397050b664350844dc4e6a33a7224b3d" translate="yes" xml:space="preserve">
          <source>Used generically to identify that an operation caused an out of memory condition.</source>
          <target state="translated">작업이 메모리 부족 상태를 유발했음을 식별하기 위해 일반적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1e1d73a3cdadd107c1c0da0fdccf79bf1ab7ae85" translate="yes" xml:space="preserve">
          <source>Used in the &lt;code&gt;repl&lt;/code&gt; in case the old history file is used and an error occurred while trying to read and parse it.</source>
          <target state="translated">에서 사용 &lt;code&gt;repl&lt;/code&gt; 경우 기존의 기록 파일이 사용됩니다 읽고 구문 분석하는 동안 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="f6a37aa63269784f0b4d16ef57e43eb383bb66e3" translate="yes" xml:space="preserve">
          <source>Used to handle binary data. See the &lt;a href=&quot;buffer&quot;&gt;buffer section&lt;/a&gt;.</source>
          <target state="translated">이진 데이터를 처리하는 데 사용됩니다. &lt;a href=&quot;buffer&quot;&gt;버퍼 섹션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="121dfb0e20e51079f748b8e0a1ace5ae85b26d22" translate="yes" xml:space="preserve">
          <source>Used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself.</source>
          <target state="translated">일반적으로 사용자 코드에 의해 트리거되지 않아야하는 특정 종류의 내부 Node.js 오류를 식별하는 데 사용됩니다. 이 오류의 인스턴스는 Node.js 바이너리 자체의 내부 버그를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="ce0213c2efe3eaf7abfd7af48ac8bb37a30fe5e7" translate="yes" xml:space="preserve">
          <source>Used to import modules, &lt;code&gt;JSON&lt;/code&gt;, and local files. Modules can be imported from &lt;code&gt;node_modules&lt;/code&gt;. Local modules and JSON files can be imported using a relative path (e.g. &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;./foo&lt;/code&gt;, &lt;code&gt;./bar/baz&lt;/code&gt;, &lt;code&gt;../foo&lt;/code&gt;) that will be resolved against the directory named by &lt;a href=&quot;#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt; (if defined) or the current working directory.</source>
          <target state="translated">모듈, &lt;code&gt;JSON&lt;/code&gt; 및 로컬 파일 을 가져 오는 데 사용됩니다 . &lt;code&gt;node_modules&lt;/code&gt; 에서 모듈을 가져올 수 있습니다 . &lt;a href=&quot;#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; &lt;/a&gt; (정의 된 경우)으로 명명 된 디렉토리 또는 현재 작업중인 상대 경로 (예 : &lt;code&gt;./&lt;/code&gt; , &lt;code&gt;./foo&lt;/code&gt; , &lt;code&gt;./bar/baz&lt;/code&gt; , &lt;code&gt;../foo&lt;/code&gt; )를 사용하여 로컬 모듈 및 JSON 파일을 가져올 수 있습니다. 예배 규칙서.</target>
        </trans-unit>
        <trans-unit id="fa8901f3c2c158cdcada361a79f96ed53f062e7a" translate="yes" xml:space="preserve">
          <source>Used to import modules, &lt;code&gt;JSON&lt;/code&gt;, and local files. Modules can be imported from &lt;code&gt;node_modules&lt;/code&gt;. Local modules and JSON files can be imported using a relative path (e.g. &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;./foo&lt;/code&gt;, &lt;code&gt;./bar/baz&lt;/code&gt;, &lt;code&gt;../foo&lt;/code&gt;) that will be resolved against the directory named by &lt;a href=&quot;#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt; (if defined) or the current working directory. The relative paths of POSIX style are resolved in an OS independent fashion, meaning that the examples above will work on Windows in the same way they would on Unix systems.</source>
          <target state="translated">모듈, &lt;code&gt;JSON&lt;/code&gt; 및 로컬 파일 을 가져 오는 데 사용됩니다 . &lt;code&gt;node_modules&lt;/code&gt; 에서 모듈을 가져올 수 있습니다 . 로컬 모듈 및 JSON 파일은 &lt;a href=&quot;#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; &lt;/a&gt; (정의 된 경우) 또는 현재 작업중인 디렉토리에 대해 확인 되는 상대 경로 (예 : &lt;code&gt;./&lt;/code&gt; , &lt;code&gt;./foo&lt;/code&gt; , &lt;code&gt;./bar/baz&lt;/code&gt; , &lt;code&gt;../foo&lt;/code&gt; )를 사용하여 가져올 수 있습니다. 예배 규칙서. POSIX 스타일의 상대 경로는 OS 독립적 인 방식으로 확인됩니다. 즉, 위의 예제는 Unix 시스템에서와 동일한 방식으로 Windows에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="8051e6f08f0917697ec0c2567547cefbbb345f70" translate="yes" xml:space="preserve">
          <source>Used to prevent an abort if a string decoder was set on the Socket.</source>
          <target state="translated">문자열 디코더가 소켓에 설정된 경우 중단을 방지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="24a89de7a287742d4f61724e35de45c6f674e19c" translate="yes" xml:space="preserve">
          <source>Used to print to stdout and stderr. See the &lt;a href=&quot;console&quot;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">stdout 및 stderr로 인쇄하는 데 사용됩니다. &lt;a href=&quot;console&quot;&gt; &lt;code&gt;console&lt;/code&gt; &lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4da4cffb302360787d219a0d7461f4f5f41ed1b7" translate="yes" xml:space="preserve">
          <source>Used to set a callback function that is called when there is no activity on the &lt;code&gt;Http2Session&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds. The given &lt;code&gt;callback&lt;/code&gt; is registered as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;msecs&lt;/code&gt; 밀리 초 후에 &lt;code&gt;Http2Session&lt;/code&gt; 에 활동이 없을 때 호출되는 콜백 함수를 설정하는 데 사용됩니다 . 주어진 &lt;code&gt;callback&lt;/code&gt; 은 &lt;code&gt;'timeout'&lt;/code&gt; 이벤트 에서 리스너로 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="d6092c257f3fe7fbcae918b9f10d3f9f4b59efd5" translate="yes" xml:space="preserve">
          <source>Used to set the timeout value for http2 secure server requests, and sets a callback function that is called when there is no activity on the &lt;code&gt;Http2SecureServer&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds.</source>
          <target state="translated">http2 보안 서버 요청에 대한 시간 종료 값을 설정하고 &lt;code&gt;msecs&lt;/code&gt; 밀리 초 후에 &lt;code&gt;Http2SecureServer&lt;/code&gt; 에 활동이 없을 때 호출되는 콜백 함수를 설정하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6099d205b5ac90f16eaba84f09879638c543bdb1" translate="yes" xml:space="preserve">
          <source>Used to set the timeout value for http2 server requests, and sets a callback function that is called when there is no activity on the &lt;code&gt;Http2Server&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds.</source>
          <target state="translated">http2 서버 요청에 대한 시간 종료 값을 설정하고 &lt;code&gt;msecs&lt;/code&gt; 밀리 초 후에 &lt;code&gt;Http2Server&lt;/code&gt; 에 활동이 없을 때 호출되는 콜백 함수를 설정하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="cf089c5d65bc1c1b020815a919861fac22a741cc" translate="yes" xml:space="preserve">
          <source>Used to update the server with the provided settings.</source>
          <target state="translated">제공된 설정으로 서버를 업데이트하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8a9e06ca05bd0b8449a2a685aa272bd3371a92a9" translate="yes" xml:space="preserve">
          <source>Used when a TLS renegotiation request has failed in a non-specific way.</source>
          <target state="translated">TLS 재협상 요청이 비 특정 방식으로 실패한 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a98d52897ccd48ecb3e15ea244dd351b3da000ab" translate="yes" xml:space="preserve">
          <source>Used when a child process is being forked without specifying an IPC channel.</source>
          <target state="translated">IPC 채널을 지정하지 않고 하위 프로세스를 분기 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1794600a519f16a59864bcb7c5c177b882aefaec" translate="yes" xml:space="preserve">
          <source>Used when a failure occurs sending an individual frame on the HTTP/2 session.</source>
          <target state="translated">HTTP / 2 세션에서 개별 프레임을 전송하는 데 실패가 발생했을 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4abe7a2e8fd5924bf7dbdcead54c7db33c5f705e" translate="yes" xml:space="preserve">
          <source>Used when a feature that is not available to the current platform which is running Node.js is used.</source>
          <target state="translated">Node.js를 실행중인 현재 플랫폼에서 사용할 수없는 기능을 사용할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="61c5e151234f65531c9bcb06fcbd6d0a3e18e2c5" translate="yes" xml:space="preserve">
          <source>Used when a given value is out of the accepted range.</source>
          <target state="translated">주어진 값이 허용 범위를 벗어날 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0845a17575717bce690fdf146f5a3dc7aca2d779" translate="yes" xml:space="preserve">
          <source>Used when a required header is missing in an HTTP/2 message.</source>
          <target state="translated">HTTP / 2 메시지에서 필수 헤더가 누락 된 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9467d12ac92740faa32b731bd21160bacd588f2c" translate="yes" xml:space="preserve">
          <source>Used when an &lt;a href=&quot;esm&quot;&gt;ES Module&lt;/a&gt; loader hook specifies &lt;code&gt;format: 'dynamic'&lt;/code&gt; but does not provide a &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook.</source>
          <target state="translated">때 사용 &lt;a href=&quot;esm&quot;&gt;ES 모듈&lt;/a&gt; 로더 후크 지정 &lt;code&gt;format: 'dynamic'&lt;/code&gt; 만이 제공하지 않습니다 &lt;code&gt;dynamicInstantiate&lt;/code&gt; 의 후크를.</target>
        </trans-unit>
        <trans-unit id="1b24d21ed4c6621caddd9f321ae8b6a469e204be" translate="yes" xml:space="preserve">
          <source>Used when an HTTP/2 Headers Object is expected.</source>
          <target state="translated">HTTP / 2 헤더 오브젝트가 예상 될 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b918d798cee5f2a6e9c8d72f61abe8eb608f5d3f" translate="yes" xml:space="preserve">
          <source>Used when an action has been performed on an HTTP/2 Stream that has already been closed.</source>
          <target state="translated">이미 닫힌 HTTP / 2 스트림에서 작업이 수행 된 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="23bd3e8d7b3edf9e72a7c01d81c202ff7d9bedc0" translate="yes" xml:space="preserve">
          <source>Used when an attempt is made to use a &lt;code&gt;zlib&lt;/code&gt; object after it has already been closed.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; 객체를 이미 닫은 후 사용하려고 할 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="664c1b2e71185319ae6e8b3d421c03ad9ceaa149" translate="yes" xml:space="preserve">
          <source>Used when an attempt is made to use a readable stream that has not implemented &lt;a href=&quot;stream#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stream#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt; 구현하지 않은 읽기 가능한 스트림을 사용하려고 할 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c6832c2b5ead9c19cb61232927aae0d3eaeaef49" translate="yes" xml:space="preserve">
          <source>Used when an invalid character is found in an HTTP response status message (reason phrase).</source>
          <target state="translated">HTTP 응답 상태 메시지 (이유 문구)에서 유효하지 않은 문자가 발견 될 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3fb26f283a60b38e80c873a606c7a370e1e92380" translate="yes" xml:space="preserve">
          <source>Used when an operation has been aborted (typically using an &lt;code&gt;AbortController&lt;/code&gt;).</source>
          <target state="translated">작업이 중단되었을 때 사용됩니다 (일반적으로 &lt;code&gt;AbortController&lt;/code&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="429695ecac5f7fdb897661f9a315b10c325303e4" translate="yes" xml:space="preserve">
          <source>Used when the main process is trying to read data from the child process's STDERR/STDOUT, and the data's length is longer than the &lt;code&gt;maxBuffer&lt;/code&gt; option.</source>
          <target state="translated">기본 프로세스가 하위 프로세스의 STDERR / STDOUT에서 데이터를 읽으려고하고 데이터 길이가 &lt;code&gt;maxBuffer&lt;/code&gt; 옵션 보다 길 때 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="d86017044b62d046dd7d3f8a998cad704c8b25df" translate="yes" xml:space="preserve">
          <source>Used with &lt;code&gt;--experimental-modules&lt;/code&gt;, this configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt;, or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; 와 함께 사용하면 문자열 입력을 CommonJS 또는 ES 모듈로 해석하도록 Node.js를 구성합니다. 문자열 입력은 &lt;code&gt;--eval&lt;/code&gt; , &lt;code&gt;--print&lt;/code&gt; 또는 &lt;code&gt;STDIN&lt;/code&gt; 을 통해 입력됩니다 .</target>
        </trans-unit>
        <trans-unit id="fbdf0f773f2695d034eda295b87b8838ae8922ee" translate="yes" xml:space="preserve">
          <source>Useful V8 options</source>
          <target state="translated">유용한 V8 옵션</target>
        </trans-unit>
        <trans-unit id="2ae2f04ad43660c25b4e8672a9f94dac65a9177d" translate="yes" xml:space="preserve">
          <source>User Timing</source>
          <target state="translated">사용자 타이밍</target>
        </trans-unit>
        <trans-unit id="25616a502c1bbb6bbe041649df7e3295c2d10d6d" translate="yes" xml:space="preserve">
          <source>User code will not construct &lt;code&gt;Http2Stream&lt;/code&gt; instances directly. Rather, these are created, managed, and provided to user code through the &lt;code&gt;Http2Session&lt;/code&gt; instance. On the server, &lt;code&gt;Http2Stream&lt;/code&gt; instances are created either in response to an incoming HTTP request (and handed off to user code via the &lt;code&gt;'stream'&lt;/code&gt; event), or in response to a call to the &lt;code&gt;http2stream.pushStream()&lt;/code&gt; method. On the client, &lt;code&gt;Http2Stream&lt;/code&gt; instances are created and returned when either the &lt;code&gt;http2session.request()&lt;/code&gt; method is called, or in response to an incoming &lt;code&gt;'push'&lt;/code&gt; event.</source>
          <target state="translated">사용자 코드는 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스를 직접 생성하지 않습니다 . 오히려 이들은 &lt;code&gt;Http2Session&lt;/code&gt; 인스턴스를 통해 사용자 코드에 작성, 관리 및 제공됩니다 . 서버에서 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스는 수신 HTTP 요청에 대한 응답으로 ( &lt;code&gt;'stream'&lt;/code&gt; 이벤트 를 통해 사용자 코드로 &lt;code&gt;http2stream.pushStream()&lt;/code&gt; 또는 http2stream.pushStream () 메소드 호출에 대한 응답으로 작성됩니다 . 클라이언트에서 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스는 &lt;code&gt;http2session.request()&lt;/code&gt; 메소드가 호출되거나 수신 &lt;code&gt;'push'&lt;/code&gt; 이벤트 에 대한 응답으로 작성되고 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="39f51fc9e130a165a9061ccc184b4da818b4ea69" translate="yes" xml:space="preserve">
          <source>User code will not create &lt;code&gt;Http2Session&lt;/code&gt; instances directly. Server-side &lt;code&gt;Http2Session&lt;/code&gt; instances are created by the &lt;code&gt;Http2Server&lt;/code&gt; instance when a new HTTP/2 connection is received. Client-side &lt;code&gt;Http2Session&lt;/code&gt; instances are created using the &lt;code&gt;http2.connect()&lt;/code&gt; method.</source>
          <target state="translated">사용자 코드는 &lt;code&gt;Http2Session&lt;/code&gt; 인스턴스를 직접 생성하지 않습니다 . 서버 측 &lt;code&gt;Http2Session&lt;/code&gt; 인스턴스는 새 HTTP / 2 연결이 수신 될 때 &lt;code&gt;Http2Server&lt;/code&gt; 인스턴스에 의해 작성됩니다 . 클라이언트 측 &lt;code&gt;Http2Session&lt;/code&gt; 인스턴스는 &lt;code&gt;http2.connect()&lt;/code&gt; 메소드를 사용하여 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="fddae98305cdd05d2b80966abde1a85c4a0cb970" translate="yes" xml:space="preserve">
          <source>User code will typically not listen for this event directly.</source>
          <target state="translated">사용자 코드는 일반적으로이 이벤트를 직접 수신하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fe593d151fbd8534d3e17f4a715524cf5537157f" translate="yes" xml:space="preserve">
          <source>User defined prototype properties are inspected in case &lt;code&gt;showHidden&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">사용자 정의 프로토 타입 속성은 &lt;code&gt;showHidden&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 인 경우 검사됩니다 .</target>
        </trans-unit>
        <trans-unit id="e44d414f4523cb0020fa3bb9ef006880758d42a0" translate="yes" xml:space="preserve">
          <source>User-specified errors triggered by application code.</source>
          <target state="translated">응용 프로그램 코드에 의해 트리거 된 사용자 지정 오류.</target>
        </trans-unit>
        <trans-unit id="7006cd764ba16178062bfab50e81a707bc1f87ed" translate="yes" xml:space="preserve">
          <source>Users are able to define their own &lt;code&gt;type&lt;/code&gt; when using the public embedder API.</source>
          <target state="translated">공개 임 베더 API를 사용할 때 사용자는 자신의 &lt;code&gt;type&lt;/code&gt; 을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf5ef9d00cdafe23ad10052c62fc3a82ffe4cd3c" translate="yes" xml:space="preserve">
          <source>Users of &lt;code&gt;MakeCallback&lt;/code&gt; that add the &lt;code&gt;domain&lt;/code&gt; property to carry context, should start using the &lt;code&gt;async_context&lt;/code&gt; variant of &lt;code&gt;MakeCallback&lt;/code&gt; or &lt;code&gt;CallbackScope&lt;/code&gt;, or the high-level &lt;code&gt;AsyncResource&lt;/code&gt; class.</source>
          <target state="translated">의 사용자 &lt;code&gt;MakeCallback&lt;/code&gt; 추가 &lt;code&gt;domain&lt;/code&gt; 캐리 컨텍스트 속성의 사용을 시작해야 &lt;code&gt;async_context&lt;/code&gt; 의 의 변형 &lt;code&gt;MakeCallback&lt;/code&gt; 또는 &lt;code&gt;CallbackScope&lt;/code&gt; , 또는 높은 수준의 &lt;code&gt;AsyncResource&lt;/code&gt; 의 클래스를.</target>
        </trans-unit>
        <trans-unit id="76bd16f83da4c24b980d59d68158565cc72444d4" translate="yes" xml:space="preserve">
          <source>Users should take full responsibility for selecting the crypto algorithm and key size according to their security requirements.</source>
          <target state="translated">사용자는 보안 요구 사항에 따라 암호화 알고리즘과 키 크기를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="125395920a5c21bcd712ff46c895d10dd8989f5b" translate="yes" xml:space="preserve">
          <source>Users who experience large or growing &lt;code&gt;bufferSize&lt;/code&gt; should attempt to &quot;throttle&quot; the data flows in their program with &lt;a href=&quot;#net_socket_pause&quot;&gt;&lt;code&gt;socket.pause()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#net_socket_resume&quot;&gt;&lt;code&gt;socket.resume()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bufferSize&lt;/code&gt; 가 크거나 증가하는 사용자 는 &lt;a href=&quot;#net_socket_pause&quot;&gt; &lt;code&gt;socket.pause()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#net_socket_resume&quot;&gt; &lt;code&gt;socket.resume()&lt;/code&gt; &lt;/a&gt; 을 사용하여 프로그램의 데이터 흐름을 &quot;조절&quot;하려고 시도해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c441c245c026869fc42a7d133264a863c02ddd56" translate="yes" xml:space="preserve">
          <source>Users will not create instances of &lt;code&gt;QuicEndpoint&lt;/code&gt; directly.</source>
          <target state="translated">사용자는 &lt;code&gt;QuicEndpoint&lt;/code&gt; 인스턴스를 직접 만들지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c916db3f2c5f001f12fde4c7e7de18a2a34d7b3f" translate="yes" xml:space="preserve">
          <source>Users will not create instances of &lt;code&gt;QuicSession&lt;/code&gt; directly.</source>
          <target state="translated">사용자는 &lt;code&gt;QuicSession&lt;/code&gt; 의 인스턴스를 직접 생성하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f0b211e8d0fac47b645a9c120fc49ca3721fc00f" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;obj&lt;/code&gt; and prints the resulting string to &lt;code&gt;stdout&lt;/code&gt;. This function bypasses any custom &lt;code&gt;inspect()&lt;/code&gt; function defined on &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 에서 &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt; 를 사용 하고 결과 문자열을 &lt;code&gt;stdout&lt;/code&gt; 에 인쇄합니다 . 이 함수는 &lt;code&gt;obj&lt;/code&gt; 에 정의 된 사용자 정의 &lt;code&gt;inspect()&lt;/code&gt; 함수를 무시합니다 .</target>
        </trans-unit>
        <trans-unit id="8a548e7c578e9bcae5441755ca6981e1376b6940" translate="yes" xml:space="preserve">
          <source>Uses a &lt;a href=&quot;#v8_class_v8_defaultdeserializer&quot;&gt;&lt;code&gt;DefaultDeserializer&lt;/code&gt;&lt;/a&gt; with default options to read a JS value from a buffer.</source>
          <target state="translated">기본 옵션과 함께 &lt;a href=&quot;#v8_class_v8_defaultdeserializer&quot;&gt; &lt;code&gt;DefaultDeserializer&lt;/code&gt; &lt;/a&gt; 를 사용하여 버퍼에서 JS 값을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="ffa3ccebd075b40f80d680d211108b377dc2860c" translate="yes" xml:space="preserve">
          <source>Uses a &lt;a href=&quot;#v8_class_v8_defaultserializer&quot;&gt;&lt;code&gt;DefaultSerializer&lt;/code&gt;&lt;/a&gt; to serialize &lt;code&gt;value&lt;/code&gt; into a buffer.</source>
          <target state="translated">&lt;a href=&quot;#v8_class_v8_defaultserializer&quot;&gt; &lt;code&gt;DefaultSerializer&lt;/code&gt; &lt;/a&gt; 를 사용하여 &lt;code&gt;value&lt;/code&gt; 을 버퍼로 직렬화 합니다 .</target>
        </trans-unit>
        <trans-unit id="8c67b5925b673c832694d1ebc5382ae5e3763bab" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CAA&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects containing available certification authority authorization records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 &lt;code&gt;CAA&lt;/code&gt; 레코드를 확인합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 는 &lt;code&gt;hostname&lt;/code&gt; 사용할 수있는 사용 가능한 인증 기관 권한 부여 레코드를 포함하는 개체 배열로 해결됩니다 (예 : &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="09d6517df50af67360f17bc302c32dc5e4d01ecd" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CAA&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of certification authority authorization records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 &lt;code&gt;CAA&lt;/code&gt; 레코드를 확인합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 에는 &lt;code&gt;hostname&lt;/code&gt; 사용할 수있는 인증 기관 인증 레코드 배열이 포함됩니다 (예 : &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3e77d28cd7b2015b232d52aaadac17eb6a30ee01" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CNAME&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of canonical name records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['bar.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 &lt;code&gt;CNAME&lt;/code&gt; 레코드를 확인합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 &lt;code&gt;hostname&lt;/code&gt; 사용할 수있는 정식 이름 레코드 배열 (예 : &lt;code&gt;['bar.example.com']&lt;/code&gt; )로 해결됩니다. )로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="bb68d3eb1bfdcd227e65a5b4689509e2b0fe739c" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CNAME&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of canonical name records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['bar.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 &lt;code&gt;CNAME&lt;/code&gt; 레코드를 확인합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 는 &lt;code&gt;hostname&lt;/code&gt; 사용할 수있는 표준 이름 레코드 배열을 포함합니다 (예 : &lt;code&gt;['bar.example.com']&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="13e7d8dc5961f06bdcab36b2aa9dd7f9b7f85a28" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve IPv4 addresses (&lt;code&gt;A&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of IPv4 addresses (e.g. &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 의 IPv4 주소 ( &lt;code&gt;A&lt;/code&gt; 레코드)를 분석합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 IPv4 주소 배열로 해결됩니다 (예 : &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0c48d5cd8409e2e76101eadd1fce8d4f40ef0330" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve IPv6 addresses (&lt;code&gt;AAAA&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of IPv6 addresses.</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 IPv6 주소 ( &lt;code&gt;AAAA&lt;/code&gt; 레코드)를 확인합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 IPv6 주소 배열로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="66301e6000e1db09536b4bdae064e2b5fa0494b8" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a IPv4 addresses (&lt;code&gt;A&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of IPv4 addresses (e.g. &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 의 IPv4 주소 ( &lt;code&gt;A&lt;/code&gt; 레코드)를 분석합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 는 IPv4 주소 배열을 포함합니다 (예 : &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="11d194e2b3963c1420f88e04b7c8db00b6ab9e52" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a IPv6 addresses (&lt;code&gt;AAAA&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of IPv6 addresses.</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 의 IPv6 주소 ( &lt;code&gt;AAAA&lt;/code&gt; 레코드)를 확인합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 는 IPv6 주소 배열을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="b9e411c1d095a916a43fc5af2efc5891cd2e489d" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a host name (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. The &lt;code&gt;callback&lt;/code&gt; function has arguments &lt;code&gt;(err, records)&lt;/code&gt;. When successful, &lt;code&gt;records&lt;/code&gt; will be an array of resource records. The type and structure of individual results varies based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNS 프로토콜을 사용하여 호스트 이름 (예 : &lt;code&gt;'nodejs.org'&lt;/code&gt; )을 리소스 레코드 배열로 확인합니다. &lt;code&gt;callback&lt;/code&gt; 함수는 인수가 &lt;code&gt;(err, records)&lt;/code&gt; . 성공하면 &lt;code&gt;records&lt;/code&gt; 는 리소스 레코드의 배열이됩니다. 개별 결과의 유형과 구조는 &lt;code&gt;rrtype&lt;/code&gt; 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="0d8e2cf4737608f9a6c0665ab07ec0fd30414f31" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a host name (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. When successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of resource records. The type and structure of individual results vary based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNS 프로토콜을 사용하여 호스트 이름 (예 : &lt;code&gt;'nodejs.org'&lt;/code&gt; )을 리소스 레코드 배열로 확인합니다. 성공하면 &lt;code&gt;Promise&lt;/code&gt; 가 리소스 레코드 배열로 해결됩니다. 개별 결과의 유형과 구조는 &lt;code&gt;rrtype&lt;/code&gt; 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="ca7ed788165420143fc03ed1657a6c888a22a6f3" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a hostname (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. The &lt;code&gt;callback&lt;/code&gt; function has arguments &lt;code&gt;(err, records)&lt;/code&gt;. When successful, &lt;code&gt;records&lt;/code&gt; will be an array of resource records. The type and structure of individual results varies based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNS 프로토콜을 사용하여 호스트 이름 (예 : &lt;code&gt;'nodejs.org'&lt;/code&gt; )을 리소스 레코드 배열로 확인합니다. &lt;code&gt;callback&lt;/code&gt; 함수는 인수가 &lt;code&gt;(err, records)&lt;/code&gt; . 성공하면 &lt;code&gt;records&lt;/code&gt; 는 리소스 레코드 배열이됩니다. 개별 결과의 유형과 구조는 &lt;code&gt;rrtype&lt;/code&gt; 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="b416ceeaa487d3b737e0905aac04cace17b4a344" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a hostname (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. When successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of resource records. The type and structure of individual results vary based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNS 프로토콜을 사용하여 호스트 이름 (예 : &lt;code&gt;'nodejs.org'&lt;/code&gt; )을 리소스 레코드 배열로 확인합니다. 성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 여러 리소스 레코드로 해결됩니다. 개별 결과의 유형과 구조는 &lt;code&gt;rrtype&lt;/code&gt; 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="5a5f278be9d05db0c31bebe95c9e1802d584b324" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a start of authority record (&lt;code&gt;SOA&lt;/code&gt; record) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an object with the following properties:</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 에 대한 시작 레코드 ( &lt;code&gt;SOA&lt;/code&gt; 레코드)를 분석합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 다음 속성을 가진 개체로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="7b9a78a34b578f971014342e21ffa69021b10337" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a start of authority record (&lt;code&gt;SOA&lt;/code&gt; record) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;address&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an object with the following properties:</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 에 대한 시작 레코드 ( &lt;code&gt;SOA&lt;/code&gt; 레코드)를 분석합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;address&lt;/code&gt; 인수 는 다음 속성을 가진 객체입니다.</target>
        </trans-unit>
        <trans-unit id="1d74ad0a633112cf81a8691b4596126feb4dd586" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve all records (also known as &lt;code&gt;ANY&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; query). On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array containing various types of records. Each object has a property &lt;code&gt;type&lt;/code&gt; that indicates the type of the current record. And depending on the &lt;code&gt;type&lt;/code&gt;, additional properties will be present on the object:</source>
          <target state="translated">DNS 프로토콜을 사용하여 모든 레코드 ( &lt;code&gt;ANY&lt;/code&gt; 또는 &lt;code&gt;*&lt;/code&gt; 쿼리 라고도 함)를 해결합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 는 다양한 유형의 레코드를 포함하는 배열로 해결됩니다. 각 객체에는 현재 레코드의 &lt;code&gt;type&lt;/code&gt; 을 나타내는 속성 유형 이 있습니다. 그리고 &lt;code&gt;type&lt;/code&gt; 에 따라 객체에 추가 속성이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="91e1407dc9084d4aaa922119e46c0bce323d3dc6" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve all records (also known as &lt;code&gt;ANY&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; query). The &lt;code&gt;ret&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array containing various types of records. Each object has a property &lt;code&gt;type&lt;/code&gt; that indicates the type of the current record. And depending on the &lt;code&gt;type&lt;/code&gt;, additional properties will be present on the object:</source>
          <target state="translated">DNS 프로토콜을 사용하여 모든 레코드 ( &lt;code&gt;ANY&lt;/code&gt; 또는 &lt;code&gt;*&lt;/code&gt; 쿼리 라고도 함)를 해결합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;ret&lt;/code&gt; 인수는 다양한 유형의 레코드를 포함하는 배열입니다. 각 객체에는 현재 레코드의 &lt;code&gt;type&lt;/code&gt; 을 나타내는 속성 유형 이 있습니다. 그리고 &lt;code&gt;type&lt;/code&gt; 에 따라 객체에 추가 속성이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="30c274b11b43436ca8e50e4b9bb064ebfa8da047" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve mail exchange records (&lt;code&gt;MX&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects containing both a &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;exchange&lt;/code&gt; property (e.g. &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 메일 교환 레코드 ( &lt;code&gt;MX&lt;/code&gt; 레코드)를 분석합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 는 &lt;code&gt;priority&lt;/code&gt; 와 &lt;code&gt;exchange&lt;/code&gt; 속성 을 모두 포함하는 객체 배열로 해결됩니다 (예 : &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="109d6398fcfc69ceb7fa119270ab376ba6aa392e" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve mail exchange records (&lt;code&gt;MX&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of objects containing both a &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;exchange&lt;/code&gt; property (e.g. &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 메일 교환 레코드 ( &lt;code&gt;MX&lt;/code&gt; 레코드)를 분석합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 에는 &lt;code&gt;priority&lt;/code&gt; 속성 과 &lt;code&gt;exchange&lt;/code&gt; 속성이 모두 포함 된 객체 배열이 포함 됩니다 (예 : &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="dc59fbd604c9eff0af9fa4244d01a2d19d4bd02a" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve name server records (&lt;code&gt;NS&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of name server records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 의 이름 서버 레코드 ( &lt;code&gt;NS&lt;/code&gt; 레코드)를 분석합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 는 &lt;code&gt;hostname&lt;/code&gt; 사용 가능한 이름 서버 레코드 배열 (예 : &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt; )로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="a484c1ce770c84e5d673e21b1f4c11f303be390f" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve name server records (&lt;code&gt;NS&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of name server records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 의 이름 서버 레코드 ( &lt;code&gt;NS&lt;/code&gt; 레코드)를 분석합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수는 &lt;code&gt;hostname&lt;/code&gt; 사용 가능한 이름 서버 레코드 배열을 포함합니다 (예 : &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5f701aceb1092a30bfd015c6bc287c6570a19d1b" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve pointer records (&lt;code&gt;PTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of strings containing the reply records.</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 포인터 레코드 ( &lt;code&gt;PTR&lt;/code&gt; 레코드)를 분석합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 는 응답 레코드를 포함하는 문자열 배열로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="51cf59a347f4849fe20aa2233c19cbb8407512e2" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve pointer records (&lt;code&gt;PTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array of strings containing the reply records.</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 포인터 레코드 ( &lt;code&gt;PTR&lt;/code&gt; 레코드)를 분석합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 는 응답 레코드를 포함하는 문자열 배열입니다.</target>
        </trans-unit>
        <trans-unit id="3c00d6863ed2c84283db0b45a7fe5c8f979162e0" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve regular expression based records (&lt;code&gt;NAPTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects with the following properties:</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 에 대한 정규식 기반 레코드 ( &lt;code&gt;NAPTR&lt;/code&gt; 레코드)를 분석합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 다음 속성을 가진 개체 배열로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="dbf18146ec8d0d15c5714fd4e604aee38719c40f" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve regular expression based records (&lt;code&gt;NAPTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of objects with the following properties:</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 에 대한 정규식 기반 레코드 ( &lt;code&gt;NAPTR&lt;/code&gt; 레코드)를 분석합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 는 다음 속성을 가진 객체 배열을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="f6fadfed87100de6310ccfb92dbee96e3e654ff8" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve service records (&lt;code&gt;SRV&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects with the following properties:</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 서비스 레코드 ( &lt;code&gt;SRV&lt;/code&gt; 레코드)를 분석합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 다음 속성을 가진 개체 배열로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="73c844bbadf29a730e5b2f6bec825acea856f5b3" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve service records (&lt;code&gt;SRV&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array of objects with the following properties:</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 서비스 레코드 ( &lt;code&gt;SRV&lt;/code&gt; 레코드)를 분석합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;addresses&lt;/code&gt; 인수 는 다음 속성을 가진 객체의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="c1829d47cc7a75e0eab657043bb6bf54db2a3b9d" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve text queries (&lt;code&gt;TXT&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with a two-dimensional array of the text records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt;). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 텍스트 쿼리 ( &lt;code&gt;TXT&lt;/code&gt; 레코드) 를 해결합니다 . 성공하면 &lt;code&gt;Promise&lt;/code&gt; 는 &lt;code&gt;hostname&lt;/code&gt; 사용할 수있는 2 차원 텍스트 레코드 배열로 해결됩니다 (예 : &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt; ). 각 하위 배열에는 하나의 레코드의 TXT 청크가 포함됩니다. 사용 사례에 따라 이들은 함께 결합되거나 별도로 처리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9d9bd15a950f14f1ee431ff23ce67682340f14c" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve text queries (&lt;code&gt;TXT&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;records&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function is a two-dimensional array of the text records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt;). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.</source>
          <target state="translated">DNS 프로토콜을 사용하여 &lt;code&gt;hostname&lt;/code&gt; 대한 텍스트 쿼리 ( &lt;code&gt;TXT&lt;/code&gt; 레코드) 를 해결합니다 . &lt;code&gt;callback&lt;/code&gt; 함수에 전달 된 &lt;code&gt;records&lt;/code&gt; 인수는 &lt;code&gt;hostname&lt;/code&gt; 사용할 수있는 텍스트 레코드의 2 차원 배열입니다 (예 : &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt; ). 각 하위 배열에는 하나의 레코드의 TXT 청크가 포함됩니다. 사용 사례에 따라 이들은 함께 결합되거나 별도로 처리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="616674bd4b150c64ea79003b2aaf1d39214fdf57" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile()&lt;/code&gt; and &lt;code&gt;fs.unwatchFile()&lt;/code&gt;. &lt;code&gt;fs.watch()&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile()&lt;/code&gt; and &lt;code&gt;fs.unwatchFile()&lt;/code&gt; when possible.</source>
          <target state="translated">사용 &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt; &lt;code&gt;fs.watch()&lt;/code&gt; &lt;/a&gt; 보다 효율적입니다 &lt;code&gt;fs.watchFile()&lt;/code&gt; 및 &lt;code&gt;fs.unwatchFile()&lt;/code&gt; . &lt;code&gt;fs.watch()&lt;/code&gt; 대신에 사용한다 &lt;code&gt;fs.watchFile()&lt;/code&gt; 및 &lt;code&gt;fs.unwatchFile()&lt;/code&gt; 수있다.</target>
        </trans-unit>
        <trans-unit id="7acdc60681bce725b5f723840ea2948503a011d1" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile&lt;/code&gt; and &lt;code&gt;fs.unwatchFile&lt;/code&gt;. &lt;code&gt;fs.watch&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile&lt;/code&gt; and &lt;code&gt;fs.unwatchFile&lt;/code&gt; when possible.</source>
          <target state="translated">사용 &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt; &lt;code&gt;fs.watch()&lt;/code&gt; &lt;/a&gt; 보다 효율적입니다 &lt;code&gt;fs.watchFile&lt;/code&gt; 및 &lt;code&gt;fs.unwatchFile&lt;/code&gt; . 가능하면 &lt;code&gt;fs.watchFile&lt;/code&gt; 및 &lt;code&gt;fs.unwatchFile&lt;/code&gt; 대신 &lt;code&gt;fs.watch&lt;/code&gt; 를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="1d856b63c6bc2607094f4910592eaafc6767cf8e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;crypto#crypto_crypto_createcipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createCipher()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createDecipher()&lt;/code&gt;&lt;/a&gt; should be avoided as they use a weak key derivation function (MD5 with no salt) and static initialization vectors. It is recommended to derive a key using &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; and to use &lt;a href=&quot;crypto#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; to obtain the &lt;a href=&quot;crypto#crypto_class_cipher&quot;&gt;&lt;code&gt;Cipher&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_class_decipher&quot;&gt;&lt;code&gt;Decipher&lt;/code&gt;&lt;/a&gt; objects respectively.</source>
          <target state="translated">사용 &lt;a href=&quot;crypto#crypto_crypto_createcipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createCipher()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;crypto#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createDecipher()&lt;/code&gt; &lt;/a&gt; 가 (NO 염 MD5) 약한 키 유도 함수를 사용 피해야 정적 초기화 벡터. 키 사용 도출하도록 권장 &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt; &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt; &lt;code&gt;crypto.scrypt()&lt;/code&gt; &lt;/a&gt; 및 사용 &lt;a href=&quot;crypto#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createCipheriv()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;crypto#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createDecipheriv()&lt;/code&gt; &lt;/a&gt; 수득 &lt;a href=&quot;crypto#crypto_class_cipher&quot;&gt; &lt;code&gt;Cipher&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;crypto#crypto_class_decipher&quot;&gt; &lt;code&gt;Decipher&lt;/code&gt; &lt;/a&gt; 각각 개체.</target>
        </trans-unit>
        <trans-unit id="4b53d1b9edfc43df645d059459c36ecb01b6cc17" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;'readable'&lt;/code&gt; requires calling &lt;code&gt;.read()&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;'readable'&lt;/code&gt; 호출이 필요합니다 &lt;code&gt;.read()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0776ba10ce280120f92b94baeeaca430daff582" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool</source>
          <target state="translated">사용 &lt;code&gt;AsyncResource&lt;/code&gt; 을 A에 대한 &lt;code&gt;Worker&lt;/code&gt; 스레드 풀</target>
        </trans-unit>
        <trans-unit id="00f82cdad4ad46b131c753812c570f4c13076bc0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.doesNotReject()&lt;/code&gt; is actually not useful because there is little benefit in catching a rejection and then rejecting it again. Instead, consider adding a comment next to the specific code path that should not reject and keep error messages as expressive as possible.</source>
          <target state="translated">&lt;code&gt;assert.doesNotReject()&lt;/code&gt; 사용하면 거부를 잡아서 다시 거부 할 때 이점이 거의 없기 때문에 실제로는 유용하지 않습니다. 대신 특정 코드 경로 옆에 오류 메시지를 거부하고 가능한 한 표현적인 주석을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="3df009e595692ba82d237e1bc93633ed46c2f125" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; is actually not useful because there is no benefit in catching an error and then rethrowing it. Instead, consider adding a comment next to the specific code path that should not throw and keep error messages as expressive as possible.</source>
          <target state="translated">&lt;code&gt;assert.doesNotThrow()&lt;/code&gt; 사용하면 오류를 잡아서 다시 던져도 아무런 이점이 없으므로 실제로는 유용하지 않습니다. 대신 특정 코드 경로 옆에 오류 메시지를 표시하고 가능한 한 표현적인 주석을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8a7025ea485b11ba34d71bc4d34fa0cc905dbacf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.fail()&lt;/code&gt; with more than one argument is deprecated. Use &lt;code&gt;assert.fail()&lt;/code&gt; with only one argument or use a different &lt;code&gt;assert&lt;/code&gt; module method.</source>
          <target state="translated">둘 이상의 인수와 함께 &lt;code&gt;assert.fail()&lt;/code&gt; 을 사용하는 것은 더 이상 사용되지 않습니다. 사용 &lt;code&gt;assert.fail()&lt;/code&gt; 하나 개의 인수 또는 다른 사용 &lt;code&gt;assert&lt;/code&gt; 모듈 방법.</target>
        </trans-unit>
        <trans-unit id="2fab1e938204573f477a12aeb4d7d89efdf6f853" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.fail()&lt;/code&gt; with more than two arguments is possible but deprecated. See below for further details.</source>
          <target state="translated">사용 &lt;code&gt;assert.fail()&lt;/code&gt; 두 개 이상의 인수하는 것은 가능하지만 사용되지 않습니다. 자세한 내용은 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e32aee247c3e1fa65dfda18102dd4efc4ac847de" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;async&lt;/code&gt; functions with event handlers is problematic, because it can lead to an unhandled rejection in case of a thrown exception:</source>
          <target state="translated">이벤트 핸들러와 함께 &lt;code&gt;async&lt;/code&gt; 함수를 사용하면 예외가 발생하는 경우 처리되지 않은 거부가 발생할 수 있으므로 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1df525a3f01a20d07a7478823ea9706315ce03a1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;cleartext&lt;/code&gt; has the same API as &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cleartext&lt;/code&gt; 를 사용하면 &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt; 과 동일한 API가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b83dbd9102872f7df5e6cd66317d7029d871d346" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;executionAsyncResource()&lt;/code&gt; in the top-level execution context will return an empty object as there is no handle or request object to use, but having an object representing the top-level can be helpful.</source>
          <target state="translated">사용 &lt;code&gt;executionAsyncResource()&lt;/code&gt; 사용에는 핸들이나 요청 객체가 없기 때문에 최상위 실행 컨텍스트에서하는 빈 개체를 반환하지만 최상위를 나타내는 객체를 가지는 것이 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="014449c1eec2b95f43b792ba5e16cf560609f257" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.access()&lt;/code&gt; to check for the accessibility of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.</source>
          <target state="translated">&lt;code&gt;fs.open()&lt;/code&gt; , &lt;code&gt;fs.readFile()&lt;/code&gt; 또는 &lt;code&gt;fs.writeFile()&lt;/code&gt; 호출하기 전에 &lt;code&gt;fs.access()&lt;/code&gt; 를 사용하여 파일의 액세스 가능성을 확인하십시오 . 다른 프로세스가 두 호출간에 파일 상태를 변경할 수 있으므로 경쟁 조건이 발생합니다. 대신, 사용자 코드는 파일을 직접 열고 / 읽고 / 쓰고 파일에 액세스 할 수없는 경우 발생한 오류를 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="e5a8a3949f23f51bf204d9b3ac70d7f2b96dab32" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.exists()&lt;/code&gt; to check for the existence of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.</source>
          <target state="translated">사용 &lt;code&gt;fs.exists()&lt;/code&gt; 호출하기 전에 파일의 존재 여부를 확인하는 &lt;code&gt;fs.open()&lt;/code&gt; , &lt;code&gt;fs.readFile()&lt;/code&gt; 또는 &lt;code&gt;fs.writeFile()&lt;/code&gt; 권장되지 않습니다. 다른 프로세스가 두 호출간에 파일 상태를 변경할 수 있으므로 경쟁 조건이 발생합니다. 대신, 사용자 코드는 파일을 직접 열고 / 읽고 / 쓰고 파일이 존재하지 않으면 발생한 오류를 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="970e60822303aa19d5df0e3b029d9e1d8c3b3bec" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.rmdir()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">디렉토리가 아닌 파일에서 &lt;code&gt;fs.rmdir()&lt;/code&gt; 을 사용하면 Windows 에서 &lt;code&gt;ENOENT&lt;/code&gt; 오류 가 발생하고 POSIX 에서 &lt;code&gt;ENOTDIR&lt;/code&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bf6ef6db0ae8640548b812e024c0fa7a48f1c482" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.rmdirSync()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">디렉토리가 아닌 파일에서 &lt;code&gt;fs.rmdirSync()&lt;/code&gt; 를 사용하면 Windows 에서 &lt;code&gt;ENOENT&lt;/code&gt; 오류 가 발생하고 POSIX 에서 &lt;code&gt;ENOTDIR&lt;/code&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a9f914be0f6e22f62b0aedd8bc70861ee2deabaa" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.stat()&lt;/code&gt; to check for the existence of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.</source>
          <target state="translated">사용 &lt;code&gt;fs.stat()&lt;/code&gt; 호출하기 전에 파일의 존재 여부를 확인하는 &lt;code&gt;fs.open()&lt;/code&gt; , &lt;code&gt;fs.readFile()&lt;/code&gt; 또는 &lt;code&gt;fs.writeFile()&lt;/code&gt; 권장되지 않습니다. 대신, 사용자 코드는 파일을 직접 열고 / 읽고 / 쓰고 파일을 사용할 수없는 경우 발생한 오류를 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="866bfc24ae093b35297a6e8aab3beb28ab1fd1f4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.writeFile()&lt;/code&gt; with File Descriptors</source>
          <target state="translated">파일 디스크립터와 함께 &lt;code&gt;fs.writeFile()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="335c637b7e6b77e8111a742f9e57617c84a27b7c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.writeFile()&lt;/code&gt; with file descriptors</source>
          <target state="translated">파일 설명자와 함께 &lt;code&gt;fs.writeFile()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0a5d496423749962cb5512ba1b233acfcd0078b4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fsPromises.access()&lt;/code&gt; to check for the accessibility of a file before calling &lt;code&gt;fsPromises.open()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.</source>
          <target state="translated">사용 &lt;code&gt;fsPromises.access()&lt;/code&gt; 호출하기 전에 파일의 액세스를 확인하기 위해 &lt;code&gt;fsPromises.open()&lt;/code&gt; 사용하지 않는 것이 좋습니다. 다른 프로세스가 두 호출간에 파일 상태를 변경할 수 있으므로 경쟁 조건이 발생합니다. 대신, 사용자 코드는 파일을 직접 열고 / 읽고 / 쓰고 파일에 액세스 할 수없는 경우 발생한 오류를 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="c607cf90a0d8916415b340eb0252a8713b884eb8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fsPromises.rmdir()&lt;/code&gt; on a file (not a directory) results in the &lt;code&gt;Promise&lt;/code&gt; being rejected with an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">디렉토리가 아닌 파일에서 &lt;code&gt;fsPromises.rmdir()&lt;/code&gt; 을 사용하면 Windows 에서 &lt;code&gt;ENOENT&lt;/code&gt; 오류와 POSIX 에서 &lt;code&gt;ENOTDIR&lt;/code&gt; 오류 와 함께 &lt;code&gt;Promise&lt;/code&gt; 가 거부됩니다 .</target>
        </trans-unit>
        <trans-unit id="07472a684a532bb4eee8dd81f03cb60e9e4331c6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;options.selectPadding()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;options.selectPadding()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="81de70c1267400cfc41cc7333bc90195bd61f1a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;process.binding()&lt;/code&gt; in general should be avoided. The type checking methods in particular can be replaced by using &lt;a href=&quot;util#util_util_types&quot;&gt;&lt;code&gt;util.types&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일반적으로 &lt;code&gt;process.binding()&lt;/code&gt; 사용을 피해야합니다. 특히 유형 검사 방법은 &lt;a href=&quot;util#util_util_types&quot;&gt; &lt;code&gt;util.types&lt;/code&gt; &lt;/a&gt; 를 사용하여 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7d9d256692251bf585c474d243da24c4bf848c2c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;promisify()&lt;/code&gt; on class methods or other methods that use &lt;code&gt;this&lt;/code&gt; may not work as expected unless handled specially:</source>
          <target state="translated">사용 &lt;code&gt;promisify()&lt;/code&gt; 클래스 방법이나 사용하는 다른 방법에 대한 &lt;code&gt;this&lt;/code&gt; 특별하게 취급하지 않으면 예상대로 않을 수없는 일을 :</target>
        </trans-unit>
        <trans-unit id="71279ee197c5f01129ef5e543cfc6f739195ac37" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;require&lt;/code&gt; to load an ES module is not supported because ES modules have asynchronous execution. Instead, use use &lt;a href=&quot;#esm_import_expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt; to load an ES module from a CommonJS module.</source>
          <target state="translated">ES 모듈은 비동기 적으로 실행되므로 ES 모듈을로드하는 데 &lt;code&gt;require&lt;/code&gt; 를 사용 하는 것은 지원되지 않습니다. 대신, &lt;a href=&quot;#esm_import_expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 CommonJS 모듈에서 ES 모듈을로드하십시오.</target>
        </trans-unit>
        <trans-unit id="1f9fa4662d9e59fdef4b483f80021b9e3a425c60" translate="yes" xml:space="preserve">
          <source>Using OpenSSL store allows for external modifications of the store. For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators. OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environment variables.</source>
          <target state="translated">OpenSSL 저장소를 사용하면 저장소를 외부에서 수정할 수 있습니다. 대부분의 Linux 및 BSD 배포에서이 저장소는 배포 관리자와 시스템 관리자가 유지 관리합니다. OpenSSL CA 저장소 위치는 OpenSSL 라이브러리 구성에 따라 달라 지지만 런타임시 환경 변수를 사용하여 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ddc3e6b3b925cb8ef6a355cbeeeb58f94dd4be4" translate="yes" xml:space="preserve">
          <source>Using WHATWG &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; objects might introduce platform-specific behaviors.</source>
          <target state="translated">WHATWG &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt; 객체를 사용하면 플랫폼 별 동작이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9024760327c0026f81de6546b338f59f0dbed57d" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;vm.Module&lt;/code&gt; object requires three distinct steps: creation/parsing, linking, and evaluation. These three steps are illustrated in the following example.</source>
          <target state="translated">사용 &lt;code&gt;vm.Module&lt;/code&gt; 의 생성 / 분석, 연결, 평가 : 목적은 세 가지 단계가 필요합니다. 이 세 단계는 다음 예에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e0ad87979a98d2f046dff89a35addd29f2194ab" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object requires four distinct steps: creation/parsing, linking, instantiation, and evaluation. These four steps are illustrated in the following example.</source>
          <target state="translated">사용 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 의 생성 / 분석, 연결, 인스턴스 및 평가 : 대상은 네 가지 단계가 필요합니다. 이 네 단계는 다음 예에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9b23dcc63cc7270d9b15447d12ff7f9dfd57376" translate="yes" xml:space="preserve">
          <source>Using a property named &lt;code&gt;inspect&lt;/code&gt; on an object to specify a custom inspection function for &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; is deprecated. Use &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt;&lt;code&gt;util.inspect.custom&lt;/code&gt;&lt;/a&gt; instead. For backward compatibility with Node.js prior to version 6.4.0, both can be specified.</source>
          <target state="translated">객체에 &lt;code&gt;inspect&lt;/code&gt; 라는 속성을 사용하여 &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt; 대한 사용자 지정 검사 함수를 지정하는 것은 더 이상 사용되지 않습니다. 대신 &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt; &lt;code&gt;util.inspect.custom&lt;/code&gt; &lt;/a&gt; 을 사용하십시오 . 6.4.0 이전의 Node.js와의 역 호환성을 위해 둘 다 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dcf15580a7b8d6e22735987585fb71e72c7b9956" translate="yes" xml:space="preserve">
          <source>Using a property named &lt;code&gt;inspect&lt;/code&gt; on an object to specify a custom inspection function for &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; is deprecated. Use &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt;&lt;code&gt;util.inspect.custom&lt;/code&gt;&lt;/a&gt; instead. For backward compatibility with Node.js prior to version 6.4.0, both may be specified.</source>
          <target state="translated">객체에서 &lt;code&gt;inspect&lt;/code&gt; 라는 속성을 사용하여 &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt; 대한 사용자 정의 검사 기능을 지정하는 것은 더 이상 사용되지 않습니다. 대신 &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt; &lt;code&gt;util.inspect.custom&lt;/code&gt; &lt;/a&gt; 을 사용하십시오 . 버전 6.4.0 이전의 Node.js와의 호환성을 위해 둘 다 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="088c5711cb1136a04d7d37ed97c2ab691586c0df" translate="yes" xml:space="preserve">
          <source>Using a regular expression runs &lt;code&gt;.toString&lt;/code&gt; on the error object, and will therefore also include the error name.</source>
          <target state="translated">정규식을 사용 하면 오류 객체에서 &lt;code&gt;.toString&lt;/code&gt; 이 실행 되므로 오류 이름도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="09fba33f227f6c3a033ebafcb4b5bbd4a4ad47b5" translate="yes" xml:space="preserve">
          <source>Using a timer to detect approximate event loop delay works because the execution of timers is tied specifically to the lifecycle of the libuv event loop. That is, a delay in the loop will cause a delay in the execution of the timer, and those delays are specifically what this API is intended to detect.</source>
          <target state="translated">대략적인 이벤트 루프 지연을 감지하기 위해 타이머를 사용하면 타이머 실행이 특별히 libuv 이벤트 루프의 수명주기에 연결되므로 작동합니다. 즉, 루프 지연으로 인해 타이머 실행이 지연 될 수 있으며 이러한 지연은 특히이 API가 감지하려는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0e89804501b3927f4e3765d3fa4f23cb1fd82b30" translate="yes" xml:space="preserve">
          <source>Using invalid characters within an HTTP header field name will cause the stream to be closed with a protocol error being reported.</source>
          <target state="translated">HTTP 헤더 필드 이름 내에 유효하지 않은 문자를 사용하면 프로토콜 오류가보고되어 스트림이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="6ae1a5ec2d8cfc6ba65f3c09bb2fe2404975a0fd" translate="yes" xml:space="preserve">
          <source>Using stream methods such as &lt;code&gt;write(data)&lt;/code&gt;, &lt;code&gt;end(data)&lt;/code&gt; or &lt;code&gt;pipe()&lt;/code&gt; in CCM mode might fail as CCM cannot handle more than one chunk of data per instance.</source>
          <target state="translated">CCM이 인스턴스 당 둘 이상의 데이터 청크를 처리 할 수 ​​없으므로 CCM 모드에서 &lt;code&gt;write(data)&lt;/code&gt; , &lt;code&gt;end(data)&lt;/code&gt; 또는 &lt;code&gt;pipe()&lt;/code&gt; 와 같은 스트림 메소드를 사용하면 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="127dafee70173e34186216b2c8f8c09db267903c" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;cipher.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; methods to produce the encrypted data.</source>
          <target state="translated">은 Using &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;cipher.update()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt; 암호화 된 데이터를 생성하는 방법.</target>
        </trans-unit>
        <trans-unit id="4f251efb4db5e9c8a5087bef9044351fae0d9331" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; methods to produce the unencrypted data.</source>
          <target state="translated">은 Using &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt; 암호화되지 않은 데이터를 생성하는 방법.</target>
        </trans-unit>
        <trans-unit id="64be152252122733e4bbc53b6ae8d30fe4a43dfa" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt;&lt;code&gt;hash.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest()&lt;/code&gt;&lt;/a&gt; methods to produce the computed hash.</source>
          <target state="translated">은 Using &lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt; &lt;code&gt;hash.update()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest()&lt;/code&gt; &lt;/a&gt; 방법은 상기 계산 된 해시를 생성한다.</target>
        </trans-unit>
        <trans-unit id="c7e8e3be278fe75f9d2fd0de66e184b886ca17f4" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt;&lt;code&gt;hmac.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_hmac_digest_encoding&quot;&gt;&lt;code&gt;hmac.digest()&lt;/code&gt;&lt;/a&gt; methods to produce the computed HMAC digest.</source>
          <target state="translated">은 Using &lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt; &lt;code&gt;hmac.update()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#crypto_hmac_digest_encoding&quot;&gt; &lt;code&gt;hmac.digest()&lt;/code&gt; &lt;/a&gt; 계산 된 다이제스트 HMAC 생산 방법.</target>
        </trans-unit>
        <trans-unit id="67f4f0b34dd18e7592930fb00cda12215d238144" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt;&lt;code&gt;sign.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt;&lt;code&gt;sign.sign()&lt;/code&gt;&lt;/a&gt; methods to produce the signature.</source>
          <target state="translated">은 Using &lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt; &lt;code&gt;sign.update()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt; &lt;code&gt;sign.sign()&lt;/code&gt; &lt;/a&gt; 방법은 서명을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="bc23ae8e8540ed779fd8566342f072b035c26f81" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_verify_update_data_inputencoding&quot;&gt;&lt;code&gt;verify.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_verify_verify_object_signature_signatureencoding&quot;&gt;&lt;code&gt;verify.verify()&lt;/code&gt;&lt;/a&gt; methods to verify the signature.</source>
          <target state="translated">은 Using &lt;a href=&quot;#crypto_verify_update_data_inputencoding&quot;&gt; &lt;code&gt;verify.update()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#crypto_verify_verify_object_signature_signatureencoding&quot;&gt; &lt;code&gt;verify.verify()&lt;/code&gt; &lt;/a&gt; 방법은 서명을 검증한다.</target>
        </trans-unit>
        <trans-unit id="1c1528a393c438992217fc1628dac9e34225dbec" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&quot;import&quot;&lt;/code&gt; and &lt;code&gt;&quot;require&quot;&lt;/code&gt; conditions can lead to some hazards, which are further explained in &lt;a href=&quot;#packages_dual_commonjs_es_module_packages&quot;&gt;the dual CommonJS/ES module packages section&lt;/a&gt;.</source>
          <target state="translated">은 Using &lt;code&gt;&quot;import&quot;&lt;/code&gt; 과 &lt;code&gt;&quot;require&quot;&lt;/code&gt; 조건이 더 설명 일부 위험을 초래할 수있는 &lt;a href=&quot;#packages_dual_commonjs_es_module_packages&quot;&gt;듀얼 CommonJS를 / 모듈 패키지 섹션 ES&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="eb25820ec4ba15c58d1aef843277d65ff7264047" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--no-deprecation&lt;/code&gt; command line flag will suppress all reporting of the custom deprecation.</source>
          <target state="translated">은 Using &lt;code&gt;--no-deprecation&lt;/code&gt; 명령 줄 플래그은 사용자 정의 중단의 모든보고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3cfbf93b670c4a35f238c70ab57bf106e5b849c9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--no-deprecation&lt;/code&gt; command-line flag will suppress all reporting of the custom deprecation.</source>
          <target state="translated">은 Using &lt;code&gt;--no-deprecation&lt;/code&gt; 명령 줄 플래그은 사용자 정의 중단의 모든보고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="beb85e77bb17580639378b9767ab4b8f3f18878a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--trace-deprecation&lt;/code&gt; command line flag will cause the custom deprecation to be printed to &lt;code&gt;stderr&lt;/code&gt; along with the stack trace.</source>
          <target state="translated">은 Using &lt;code&gt;--trace-deprecation&lt;/code&gt; 명령 줄 플래그은 사용자 정의 중단을 위해 인쇄하게됩니다 &lt;code&gt;stderr&lt;/code&gt; 에 스택 추적과 함께.</target>
        </trans-unit>
        <trans-unit id="58b0ea8ad0986c815bfa086203f4052b8a4075eb" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--trace-deprecation&lt;/code&gt; command-line flag will cause the custom deprecation to be printed to &lt;code&gt;stderr&lt;/code&gt; along with the stack trace.</source>
          <target state="translated">은 Using &lt;code&gt;--trace-deprecation&lt;/code&gt; 명령 줄 플래그은 사용자 정의 중단을 위해 인쇄하게됩니다 &lt;code&gt;stderr&lt;/code&gt; 에 스택 추적과 함께.</target>
        </trans-unit>
        <trans-unit id="1aade48dc74184bf3018e802b560bc9fdde1529a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;eventEmitter.once()&lt;/code&gt; method, it is possible to register a listener that is called at most once for a particular event. Once the event is emitted, the listener is unregistered and &lt;em&gt;then&lt;/em&gt; called.</source>
          <target state="translated">은 Using &lt;code&gt;eventEmitter.once()&lt;/code&gt; 메소드를, 그 특정 이벤트에 대한 회만 호출 수신기를 등록 할 수있다. 이벤트가 발생하면 리스너가 등록 해제 된 &lt;em&gt;다음&lt;/em&gt; 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="76c7bac3d55ead2fa3d5ee94ca9f99c7c33e9a42" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;noAssert&lt;/code&gt; argument has no functionality anymore. All input is going to be verified, no matter if it is set to true or not. Skipping the verification could lead to hard to find errors and crashes.</source>
          <target state="translated">&lt;code&gt;noAssert&lt;/code&gt; 인수를 사용하면 더 이상 기능이 없습니다. 입력이 true로 설정되어 있는지 여부에 관계없이 모든 입력이 확인됩니다. 확인을 생략하면 오류 및 충돌을 찾기가 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75bf5fd5057c88a02149a0ccbe74842e13ef3ab9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;timeout&lt;/code&gt; or &lt;code&gt;breakOnSigint&lt;/code&gt; options will result in new event loops and corresponding threads being started, which have a non-zero performance overhead.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 또는 &lt;code&gt;breakOnSigint&lt;/code&gt; 옵션을 사용하면 새 이벤트 루프 및 해당 스레드가 시작되어 성능 오버 헤드가 0이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="97b15491568eb88678c0630c2498ffe3eb457850" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;util.promisify.custom&lt;/code&gt; symbol one can override the return value of &lt;a href=&quot;#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;util.promisify.custom&lt;/code&gt; 기호를 사용하면 util.promisify &lt;a href=&quot;#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt; 의 반환 값을 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fef65abe276369de6a7f627f0f824c09d9010621" translate="yes" xml:space="preserve">
          <source>Using the Node.js REPL with advanced line-editors</source>
          <target state="translated">고급 라인 편집기에서 Node.js REPL 사용</target>
        </trans-unit>
        <trans-unit id="7328f5c7c59ba3af2610c9a943fda05bd71b6ac5" translate="yes" xml:space="preserve">
          <source>Using the method and parameters given by &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.sign()&lt;/code&gt; attempts to generate a cryptographic signature of &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise is resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the generated signature.</source>
          <target state="translated">상기 방법에 의해 지정된 파라미터, &lt;code&gt;algorithm&lt;/code&gt; 에 의해 제공되는 키 재료 &lt;code&gt;key&lt;/code&gt; , &lt;code&gt;subtle.sign()&lt;/code&gt; 시도의 암호 서명을 생성하는 &lt;code&gt;data&lt;/code&gt; . 성공하면 반환 된 promise는 생성 된 서명이 포함 된 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;로&lt;/a&gt; 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="0550897b357b50919d983a5a08b40321e1020e5a" translate="yes" xml:space="preserve">
          <source>Using the method and parameters given in &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.verify()&lt;/code&gt; attempts to verify that &lt;code&gt;signature&lt;/code&gt; is a valid cryptographic signature of &lt;code&gt;data&lt;/code&gt;. The returned promise is resolved with either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">방법 및 주어진 파라미터, &lt;code&gt;algorithm&lt;/code&gt; 에 의해 제공되는 키 자료 &lt;code&gt;key&lt;/code&gt; , &lt;code&gt;subtle.verify()&lt;/code&gt; 있는지 확인하는 시도 &lt;code&gt;signature&lt;/code&gt; 유효한 암호화 서명 인 &lt;code&gt;data&lt;/code&gt; . 반환 된 promise는 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 로 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="cd75df4f898d0a8260e76ac2471d4e0cb6001495" translate="yes" xml:space="preserve">
          <source>Using the method and parameters provided in &lt;code&gt;algorithm&lt;/code&gt;, &lt;code&gt;subtle.generateKey()&lt;/code&gt; attempts to generate new keying material. Depending the method used, the method may generate either a single &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; or a &lt;a href=&quot;webcrypto#webcrypto_class_cryptokeypair&quot;&gt;&amp;lt;CryptoKeyPair&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">제공된 방법 및 파라미터, &lt;code&gt;algorithm&lt;/code&gt; , &lt;code&gt;subtle.generateKey()&lt;/code&gt; 시도 새로운 키잉 재료를 생성한다. 사용 된 방법에 따라, 상기 방법은 단일하거나 생성 할 수있다 &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 또는 &lt;a href=&quot;webcrypto#webcrypto_class_cryptokeypair&quot;&gt;&amp;lt;CryptoKeyPair&amp;gt;를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff8a97499c1a0fef025c19e37d1fdcb3b9749a54" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified by &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.encrypt()&lt;/code&gt; attempts to encipher &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise is resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the encrypted result.</source>
          <target state="translated">상기 방법에 의해 지정된 파라미터, &lt;code&gt;algorithm&lt;/code&gt; 에 의해 제공되는 키 재료 &lt;code&gt;key&lt;/code&gt; , &lt;code&gt;subtle.encrypt()&lt;/code&gt; 인사이을 시도 &lt;code&gt;data&lt;/code&gt; . 성공하면 반환 된 promise는 암호화 된 결과를 포함 하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;로&lt;/a&gt; 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="b685ede9ec73b82334a4d6a026af50ed779b939a" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified in &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;baseKey&lt;/code&gt;, &lt;code&gt;subtle.deriveBits()&lt;/code&gt; attempts to generate &lt;code&gt;length&lt;/code&gt; bits. The Node.js implementation requires that &lt;code&gt;length&lt;/code&gt; is a multiple of &lt;code&gt;8&lt;/code&gt;. If successful, the returned promise will be resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the generated data.</source>
          <target state="translated">방법 및에 지정된 파라미터, &lt;code&gt;algorithm&lt;/code&gt; 에 의해 제공된 상기 키 재료 &lt;code&gt;baseKey&lt;/code&gt; 을 , &lt;code&gt;subtle.deriveBits()&lt;/code&gt; 시도가 발생하는 &lt;code&gt;length&lt;/code&gt; 비트. Node.js 구현에서는 &lt;code&gt;length&lt;/code&gt; 가 &lt;code&gt;8&lt;/code&gt; 의 배수 여야합니다 . 성공하면 반환 된 promise는 생성 된 데이터를 포함 하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; 로 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="329bc16a9f339512e66fcd94fc126a6b0e2d6f00" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified in &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.decrypt()&lt;/code&gt; attempts to decipher the provided &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise will be resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the plaintext result.</source>
          <target state="translated">방법 및에 지정된 파라미터, &lt;code&gt;algorithm&lt;/code&gt; 에 의해 제공되는 키 재료 &lt;code&gt;key&lt;/code&gt; , &lt;code&gt;subtle.decrypt()&lt;/code&gt; 시도 제공된 해독 &lt;code&gt;data&lt;/code&gt; . 성공하면 반환 된 promise는 일반 텍스트 결과를 포함 하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; 로 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="c7bc73140bc0a85391234d71c752cc5842d6b97c" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified in &lt;code&gt;algorithm&lt;/code&gt;, and the keying material provided by &lt;code&gt;baseKey&lt;/code&gt;, &lt;code&gt;subtle.deriveKey()&lt;/code&gt; attempts to generate a new &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; based on the method and parameters in &lt;code&gt;derivedKeyAlgorithm&lt;/code&gt;.</source>
          <target state="translated">방법 및에 지정된 파라미터, &lt;code&gt;algorithm&lt;/code&gt; , 및에 의해 제공되는 키 자료 &lt;code&gt;baseKey&lt;/code&gt; 을 , &lt;code&gt;subtle.deriveKey()&lt;/code&gt; 시도가 발생하는 새로운 &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 의 방법 및 파라미터에 기초 &lt;code&gt;derivedKeyAlgorithm&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1e4e36e1fe7e0c80cded4e1c209428b480cd429" translate="yes" xml:space="preserve">
          <source>Using the method identified by &lt;code&gt;algorithm&lt;/code&gt;, &lt;code&gt;subtle.digest()&lt;/code&gt; attempts to generate a digest of &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise is resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the computed digest.</source>
          <target state="translated">식별 방법에 사용 &lt;code&gt;algorithm&lt;/code&gt; , &lt;code&gt;subtle.digest()&lt;/code&gt; 시도가 다이제스트가 생성하는 &lt;code&gt;data&lt;/code&gt; . 성공하면 반환 된 promise는 계산 된 다이제스트를 포함 하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;로&lt;/a&gt; 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="1416cd9b70255f5e8b906ccade9b66d4be132754" translate="yes" xml:space="preserve">
          <source>Using the worker's unique id is the easiest way to locate the worker.</source>
          <target state="translated">근로자의 고유 ID를 사용하는 것이 근로자를 찾는 가장 쉬운 방법입니다.</target>
        </trans-unit>
        <trans-unit id="89b4493de3d831021cc129eb07c2fd6b4e897a68" translate="yes" xml:space="preserve">
          <source>Using this flag allows to change what should happen when an unhandled rejection occurs. One of the following modes can be chosen:</source>
          <target state="translated">이 플래그를 사용하면 처리되지 않은 거부가 발생할 때 발생해야하는 작업을 변경할 수 있습니다. 다음 모드 중 하나를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5d1341a74557dbb20bf54caa7e5e21ff2a54cbf" translate="yes" xml:space="preserve">
          <source>Using this flag allows to change what should happen when an unhandled rejection occurs. One of three modes can be chosen:</source>
          <target state="translated">이 플래그를 사용하면 처리되지 않은 거부가 발생할 때 발생하는 상황을 변경할 수 있습니다. 세 가지 모드 중 하나를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44a6c833440a89de21d1119627e5bdd4e162ca03" translate="yes" xml:space="preserve">
          <source>Using this function is mutually exclusive with using the deprecated &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; built-in module.</source>
          <target state="translated">이 기능을 사용하는 것은 더 이상 사용되지 않는 &lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt; 내장 모듈 을 사용하는 것과 상호 배타적입니다 .</target>
        </trans-unit>
        <trans-unit id="a406802ec60c173518984b9e73db43db31538d00" translate="yes" xml:space="preserve">
          <source>Using this on a timer that has already called its callback will reactivate the timer.</source>
          <target state="translated">콜백을 이미 호출 한 타이머에서 이것을 사용하면 타이머가 다시 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="4c31156efed35ee7814650f8971c3698059440e3" translate="yes" xml:space="preserve">
          <source>Util</source>
          <target state="translated">Util</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="b8b097d0eea0934533ba237923021e6a341048fe" translate="yes" xml:space="preserve">
          <source>V8</source>
          <target state="translated">V8</target>
        </trans-unit>
        <trans-unit id="d72bb28caa036c763c48ffce7432d03efc797595" translate="yes" xml:space="preserve">
          <source>V8 Inspector Integration for Node.js</source>
          <target state="translated">Node.js를위한 V8 인스펙터 통합</target>
        </trans-unit>
        <trans-unit id="cabd879dfeef746d08c749d5af715f589036a5b1" translate="yes" xml:space="preserve">
          <source>V8 Inspector can be enabled by passing the &lt;code&gt;--inspect&lt;/code&gt; flag when starting a Node.js application. It is also possible to supply a custom port with that flag, e.g. &lt;code&gt;--inspect=9222&lt;/code&gt; will accept DevTools connections on port 9222.</source>
          <target state="translated">Node.js 애플리케이션을 시작할 때 &lt;code&gt;--inspect&lt;/code&gt; 플래그 를 전달하여 V8 Inspector를 사용할 수 있습니다 . 해당 플래그로 사용자 지정 포트를 제공 할 수도 있습니다. 예를 들어 &lt;code&gt;--inspect=9222&lt;/code&gt; 는 포트 9222에서 DevTools 연결을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="9bdd712745068212698e2ff31a51cc113ecfb32e" translate="yes" xml:space="preserve">
          <source>V8 Inspector integration allows attaching Chrome DevTools to Node.js instances for debugging and profiling. It uses the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;.</source>
          <target state="translated">V8 Inspector 통합을 통해 디버깅 및 프로파일 링을 위해 Chrome DevTools를 Node.js 인스턴스에 연결할 수 있습니다. &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools 프로토콜을&lt;/a&gt; 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="0695bb193877756fc54a72ca47f48f1583220e62" translate="yes" xml:space="preserve">
          <source>V8 has its own set of CLI options. Any V8 CLI option that is provided to &lt;code&gt;node&lt;/code&gt; will be passed on to V8 to handle. V8's options have &lt;em&gt;no stability guarantee&lt;/em&gt;. The V8 team themselves don't consider them to be part of their formal API, and reserve the right to change them at any time. Likewise, they are not covered by the Node.js stability guarantees. Many of the V8 options are of interest only to V8 developers. Despite this, there is a small set of V8 options that are widely applicable to Node.js, and they are documented here:</source>
          <target state="translated">V8에는 자체 CLI 옵션 세트가 있습니다. &lt;code&gt;node&lt;/code&gt; 제공되는 모든 V8 CLI 옵션은 처리를 위해 V8로 전달됩니다. V8의 옵션은 &lt;em&gt;안정성을 보장하지 않습니다&lt;/em&gt; . V8 팀 자체는이를 공식 API의 일부로 간주하지 않으며 언제든지 변경할 수있는 권한을 보유합니다. 마찬가지로 Node.js 안정성 보장이 적용되지 않습니다. 많은 V8 옵션은 V8 개발자에게만 관심이 있습니다. 그럼에도 불구하고 Node.js에 광범위하게 적용 할 수있는 작은 V8 옵션 세트가 있으며 여기에 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="18746efcdacafb5421ac3876f8538e235a64b91d" translate="yes" xml:space="preserve">
          <source>V8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Node.js instances. The tools attach to Node.js instances via a tcp port and communicate using the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;.</source>
          <target state="translated">V8 인스펙터 통합을 통해 Chrome DevTools 및 IDE와 같은 도구가 Node.js 인스턴스를 디버깅하고 프로파일 링 할 수 있습니다. 도구는 tcp 포트를 통해 Node.js 인스턴스에 연결하고 &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools 프로토콜을&lt;/a&gt; 사용하여 통신합니다 .</target>
        </trans-unit>
        <trans-unit id="28b99136362001f8842d1ba7dd740d8b6cf55c58" translate="yes" xml:space="preserve">
          <source>V8 inspector integration for Node.js</source>
          <target state="translated">Node.js 용 V8 검사기 통합</target>
        </trans-unit>
        <trans-unit id="3fb5b6ec0ebc7cc5b53865e6b15aed12de71598b" translate="yes" xml:space="preserve">
          <source>V8 options that are allowed are:</source>
          <target state="translated">허용되는 V8 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8a7d326dfb5b6af4779be16c67127f3a43de3ca1" translate="yes" xml:space="preserve">
          <source>V8 per-process requirements, such as a &lt;code&gt;v8::Platform&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;v8::Platform&lt;/code&gt; 인스턴스 와 같은 V8 프로세스 별 요구 사항 .</target>
        </trans-unit>
        <trans-unit id="a93137526f7cbc73e7e9d50d14c1c433440b1b0e" translate="yes" xml:space="preserve">
          <source>V8: the C++ library Node.js currently uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the &lt;code&gt;v8.h&lt;/code&gt; header file (&lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; in the Node.js source tree), which is also available &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;online&lt;/a&gt;.</source>
          <target state="translated">V8 : C ++ 라이브러리 Node.js는 현재 JavaScript 구현을 제공하는 데 사용합니다. V8은 객체 생성, 함수 호출 등을위한 메커니즘을 제공합니다. V8의 API는 대부분 &lt;code&gt;v8.h&lt;/code&gt; 헤더 파일 ( Node.js 소스 트리의 &lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; ) 에 문서화 되어 있으며 &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;온라인&lt;/a&gt; 에서도 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fa9b1b42d23723b880299a1e8d6f48ff3becf2ce" translate="yes" xml:space="preserve">
          <source>V8: the C++ library Node.js uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the &lt;code&gt;v8.h&lt;/code&gt; header file (&lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; in the Node.js source tree), which is also available &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;online&lt;/a&gt;.</source>
          <target state="translated">V8 : JavaScript 구현을 제공하기 위해 Node.js가 사용하는 C ++ 라이브러리. V8은 객체 생성, 함수 호출 등의 메커니즘을 제공합니다. V8의 API는 주로 &lt;code&gt;v8.h&lt;/code&gt; 헤더 파일 ( Node.js 소스 트리의 &lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; ) 에 문서화 되어 있으며 &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;온라인&lt;/a&gt; 에서도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="494e5398b739ace80c2800a4e5b3cd1fb68001cf" translate="yes" xml:space="preserve">
          <source>VM</source>
          <target state="translated">VM</target>
        </trans-unit>
        <trans-unit id="dbe377a114ceb49b6128d4c1ccda27673cda2b2b" translate="yes" xml:space="preserve">
          <source>VM (Executing JavaScript)</source>
          <target state="translated">VM (JavaScript 실행)</target>
        </trans-unit>
        <trans-unit id="0af4bf1819c48bb84742feec149353f7191c2e13" translate="yes" xml:space="preserve">
          <source>VM (executing JavaScript)</source>
          <target state="translated">VM (JavaScript 실행)</target>
        </trans-unit>
        <trans-unit id="fb8f27aea3185e30c92158b5a72b5e68427a8747" translate="yes" xml:space="preserve">
          <source>Valid TLS protocol versions are &lt;code&gt;'TLSv1'&lt;/code&gt;, &lt;code&gt;'TLSv1.1'&lt;/code&gt;, or &lt;code&gt;'TLSv1.2'&lt;/code&gt;.</source>
          <target state="translated">유효한 TLS 프로토콜 버전은 &lt;code&gt;'TLSv1'&lt;/code&gt; , &lt;code&gt;'TLSv1.1'&lt;/code&gt; 또는 &lt;code&gt;'TLSv1.2'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a987e7a89129aa23cb3e6c2551267ffab5bdfaa7" translate="yes" xml:space="preserve">
          <source>Valid key usages depend on the key algorithm (identified by &lt;code&gt;cryptokey.algorithm.name&lt;/code&gt;).</source>
          <target state="translated">유효한 키 사용은 키 알고리즘 ( &lt;code&gt;cryptokey.algorithm.name&lt;/code&gt; 으로 식별 됨 ) 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="393b0cd2d2b4c056628251cd2e23912b2a26f716" translate="yes" xml:space="preserve">
          <source>Valid values are &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; and &lt;code&gt;&quot;module&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt;.</source>
          <target state="translated">유효한 값은 &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 입니다. 기본값은 &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a528ab622db5be3124b720c51ff8a564a3515496" translate="yes" xml:space="preserve">
          <source>Validate error message using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; 를&lt;/a&gt; 사용하여 오류 메시지를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="81b25ad8225f7ecb896fabebec88216239869060" translate="yes" xml:space="preserve">
          <source>Validate instanceof using constructor:</source>
          <target state="translated">생성자를 사용하여 instanceof를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="8ef03321a63fe1d0ebb05c543908688a331dd8ae" translate="yes" xml:space="preserve">
          <source>Validation errors occur when an incorrect argument, option, or setting value is passed in. These will always be reported by a synchronous &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="translated">잘못된 인수, 옵션 또는 설정 값이 전달되면 유효성 검사 오류가 발생합니다.이 오류는 항상 동기식 &lt;code&gt;throw&lt;/code&gt; 로보고됩니다 .</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="27d2412cca245376cbe8f7b65f5729cd3d3ae3c9" translate="yes" xml:space="preserve">
          <source>Value is &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; session socket has not yet been connected, &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is connected with a &lt;code&gt;TLSSocket&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is connected to any other kind of socket or stream.</source>
          <target state="translated">값이 &lt;code&gt;undefined&lt;/code&gt; 경우 생성 &lt;code&gt;Http2Session&lt;/code&gt; 의 세션 소켓이 아직 연결되지 않은, &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;Http2Session&lt;/code&gt; 하는 것은 와 연결되어 &lt;code&gt;TLSSocket&lt;/code&gt; 하고, &lt;code&gt;false&lt;/code&gt; 경우 생성 &lt;code&gt;Http2Session&lt;/code&gt; 가 소켓이나 스트림의 다른 종류에 연결되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1b2d39b70dc3fb0257610327d062b71a8c39503" translate="yes" xml:space="preserve">
          <source>Value may now only be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. Before all falsy values were handled the same as &lt;code&gt;null&lt;/code&gt; and did not throw.</source>
          <target state="translated">값은 이제 &lt;code&gt;undefined&lt;/code&gt; 않거나 &lt;code&gt;null&lt;/code&gt; 일 수 있습니다. 모든 잘못된 값을 처리하기 전에 &lt;code&gt;null&lt;/code&gt; 과 동일하게 처리 하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="384f69d4253fbebb54d8368317298745f013ef88" translate="yes" xml:space="preserve">
          <source>Value will be &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is not yet connected to a socket, &lt;code&gt;h2c&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is not connected to a &lt;code&gt;TLSSocket&lt;/code&gt;, or will return the value of the connected &lt;code&gt;TLSSocket&lt;/code&gt;'s own &lt;code&gt;alpnProtocol&lt;/code&gt; property.</source>
          <target state="translated">값한다 &lt;code&gt;undefined&lt;/code&gt; 경우 생성 &lt;code&gt;Http2Session&lt;/code&gt; 가 아직 소켓에 연결되지 않고, &lt;code&gt;h2c&lt;/code&gt; 경우 생성 &lt;code&gt;Http2Session&lt;/code&gt; (A)에 연결되어 있지 &lt;code&gt;TLSSocket&lt;/code&gt; 또는 접속의 값을 반환 &lt;code&gt;TLSSocket&lt;/code&gt; 의 자신의 &lt;code&gt;alpnProtocol&lt;/code&gt; 의 속성을.</target>
        </trans-unit>
        <trans-unit id="3374585616cd19cdf8913de105924c8996485ee4" translate="yes" xml:space="preserve">
          <source>Value: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;</source>
          <target state="translated">값 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;부울&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99bfc53543bae130b78974f3ac786581c4580860" translate="yes" xml:space="preserve">
          <source>Value: &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;</source>
          <target state="translated">값 : &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="719b833bb97b00a6ee4444c1d9b2ce985e6a1a74" translate="yes" xml:space="preserve">
          <source>Values can be either numbers representing Unix epoch time in seconds, &lt;code&gt;Date&lt;/code&gt;s, or a numeric string like &lt;code&gt;'123456789.0'&lt;/code&gt;.</source>
          <target state="translated">값은 Unix epoch 시간 (초)을 나타내는 숫자, &lt;code&gt;Date&lt;/code&gt; 또는 &lt;code&gt;'123456789.0'&lt;/code&gt; 과 같은 숫자 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9b183d756719a245acd620179f819dd9041ffd2" translate="yes" xml:space="preserve">
          <source>Values can be either numbers representing Unix epoch time, &lt;code&gt;Date&lt;/code&gt;s, or a numeric string like &lt;code&gt;'123456789.0'&lt;/code&gt;.</source>
          <target state="translated">값은 유닉스 시대 시간, &lt;code&gt;Date&lt;/code&gt; 나타내는 숫자 일 수 있습니다. 나타내는 숫자 또는 &lt;code&gt;'123456789.0'&lt;/code&gt; 과 같은 숫자 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53c0bb5f3d02bff6545de0ad72cc4c3a77afccdb" translate="yes" xml:space="preserve">
          <source>Values that are not part of the format string are formatted using &lt;code&gt;util.inspect()&lt;/code&gt; if their type is not &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">형식 문자열에 포함되지 않은 값은 &lt;code&gt;util.inspect()&lt;/code&gt; 사용하여 형식이 지정됩니다. 자신의 타입이 아닌 경우 &lt;code&gt;string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c84c56936b14a1634315a3aa83091b5dcfaa5b5" translate="yes" xml:space="preserve">
          <source>Variables local to the module will be private, because the module is wrapped in a function by Node.js (see &lt;a href=&quot;#modules_the_module_wrapper&quot;&gt;module wrapper&lt;/a&gt;). In this example, the variable &lt;code&gt;PI&lt;/code&gt; is private to &lt;code&gt;circle.js&lt;/code&gt;.</source>
          <target state="translated">모듈이 Node.js에 의해 함수로 랩핑되므로 모듈에 대한 로컬 변수는 개인용입니다 ( &lt;a href=&quot;#modules_the_module_wrapper&quot;&gt;모듈 랩퍼&lt;/a&gt; 참조 ). 이 예에서 변수 &lt;code&gt;PI&lt;/code&gt; 는 &lt;code&gt;circle.js&lt;/code&gt; 전용 입니다.</target>
        </trans-unit>
        <trans-unit id="075be6a60b145b1ce1b874ce5a76b369cdd0b469" translate="yes" xml:space="preserve">
          <source>Various</source>
          <target state="translated">Various</target>
        </trans-unit>
        <trans-unit id="5a8e182151fdcadd9117a606819b5b815c60f49d" translate="yes" xml:space="preserve">
          <source>Various behaviors of the Node.js REPL can be customized using the following environment variables:</source>
          <target state="translated">Node.js REPL의 다양한 동작은 다음 환경 변수를 사용하여 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63ed65929f9b05267e5a93a328e53542d3c61717" translate="yes" xml:space="preserve">
          <source>Various networking APIs will call &lt;code&gt;dns.lookup()&lt;/code&gt; internally to resolve host names. If that is an issue, consider resolving the host name to an address using &lt;code&gt;dns.resolve()&lt;/code&gt; and using the address instead of a host name. Also, some networking APIs (such as &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;) allow the default resolver, &lt;code&gt;dns.lookup()&lt;/code&gt;, to be replaced.</source>
          <target state="translated">다양한 네트워킹 API는 내부적으로 &lt;code&gt;dns.lookup()&lt;/code&gt; 을 호출 하여 호스트 이름을 확인합니다. 이것이 문제인 경우 &lt;code&gt;dns.resolve()&lt;/code&gt; 를 사용 하여 호스트 이름을 주소로 확인하고 호스트 이름 대신 주소를 사용하는 것을 고려하십시오 . 또한 일부 네트워킹 API (예 : &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; &lt;/a&gt; )는 기본 해석기 인 &lt;code&gt;dns.lookup()&lt;/code&gt; 을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c96b8eeb58d81747d1411796da291708a9308b67" translate="yes" xml:space="preserve">
          <source>Various networking APIs will call &lt;code&gt;dns.lookup()&lt;/code&gt; internally to resolve host names. If that is an issue, consider resolving the hostname to an address using &lt;code&gt;dns.resolve()&lt;/code&gt; and using the address instead of a host name. Also, some networking APIs (such as &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;) allow the default resolver, &lt;code&gt;dns.lookup()&lt;/code&gt;, to be replaced.</source>
          <target state="translated">다양한 네트워킹 API는 호스트 이름을 확인하기 위해 내부적으로 &lt;code&gt;dns.lookup()&lt;/code&gt; 을 호출 합니다. 이것이 문제가되는 경우 &lt;code&gt;dns.resolve()&lt;/code&gt; 를 사용하여 호스트 이름을 주소로 확인하고 호스트 이름 대신 주소를 사용하십시오. 또한 일부 네트워킹 API (예 : &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; &lt;/a&gt; )는 기본 확인자, &lt;code&gt;dns.lookup()&lt;/code&gt; 을 교체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b390264aee088cb79da9e392cde3a01f345279e2" translate="yes" xml:space="preserve">
          <source>Verifies the certificate &lt;code&gt;cert&lt;/code&gt; is issued to &lt;code&gt;hostname&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cert&lt;/code&gt; 가 발급 된 인증서 인지 확인 &lt;code&gt;hostname&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="7a70b5dbdbc521149cff80d733ae43d7c43b9c7c" translate="yes" xml:space="preserve">
          <source>Verifies the given signature for &lt;code&gt;data&lt;/code&gt; using the given key and algorithm. If &lt;code&gt;algorithm&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, then the algorithm is dependent upon the key type (especially Ed25519 and Ed448).</source>
          <target state="translated">주어진 키와 알고리즘을 사용하여 &lt;code&gt;data&lt;/code&gt; 의 주어진 서명을 확인합니다 . &lt;code&gt;algorithm&lt;/code&gt; 이 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 인 경우 알고리즘 은 키 유형 (특히 Ed25519 및 Ed448)에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="c802399b8ccd9918dcfcec45fe61466996fd99af" translate="yes" xml:space="preserve">
          <source>Verifies the provided data using the given &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;signature&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;object&lt;/code&gt; 와 &lt;code&gt;signature&lt;/code&gt; 사용하여 제공된 데이터를 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="dda6ac27b9d3b234a68e8b2c412e90ab5a03a4e1" translate="yes" xml:space="preserve">
          <source>Verify</source>
          <target state="translated">Verify</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="53b449b15b889b1bdc8c4adba25d7f5d77268215" translate="yes" xml:space="preserve">
          <source>Version Management</source>
          <target state="translated">버전 관리</target>
        </trans-unit>
        <trans-unit id="6df95f05b4f3bc565b7412688db876c215c30e58" translate="yes" xml:space="preserve">
          <source>Version management</source>
          <target state="translated">버전 관리</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="84367e806ed16f93cd67aba890fbaef52d16a0b0" translate="yes" xml:space="preserve">
          <source>WASI</source>
          <target state="translated">WASI</target>
        </trans-unit>
        <trans-unit id="50147dd0e338da6e654eba9af1030e40f73121ed" translate="yes" xml:space="preserve">
          <source>WHATWG API</source>
          <target state="translated">WHATWG API</target>
        </trans-unit>
        <trans-unit id="49ba0e373af06482bcd7581a6a5ec7546822ccf5" translate="yes" xml:space="preserve">
          <source>WHATWG Supported Encodings</source>
          <target state="translated">WHATWG 지원 인코딩</target>
        </trans-unit>
        <trans-unit id="67198102e3d66c7df492b61bda67c0480340d548" translate="yes" xml:space="preserve">
          <source>WHATWG URL Parser</source>
          <target state="translated">WHATWG URL 파서</target>
        </trans-unit>
        <trans-unit id="a6c20faa9094807e512be33285730d967b0f5fa0" translate="yes" xml:space="preserve">
          <source>WHATWG URL's &lt;code&gt;origin&lt;/code&gt; property includes &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;, but not &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.</source>
          <target state="translated">WHATWG URL의 &lt;code&gt;origin&lt;/code&gt; 속성에는 &lt;code&gt;protocol&lt;/code&gt; 및 &lt;code&gt;host&lt;/code&gt; 가 포함 되지만 &lt;code&gt;username&lt;/code&gt; 또는 &lt;code&gt;password&lt;/code&gt; 는 포함 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1a23d1b755affd82fb4b985673a55f141e42ed04" translate="yes" xml:space="preserve">
          <source>WHATWG supported encodings</source>
          <target state="translated">WHATWG 지원 인코딩</target>
        </trans-unit>
        <trans-unit id="beab9fd3086850e64e9b1822421a582494860e7c" translate="yes" xml:space="preserve">
          <source>Wait for server &lt;code&gt;QuicSession&lt;/code&gt; instances; or</source>
          <target state="translated">서버 &lt;code&gt;QuicSession&lt;/code&gt; 인스턴스를 기다 립니다 . 또는</target>
        </trans-unit>
        <trans-unit id="a2cf74613ac46317886ce4819718d05b8611088d" translate="yes" xml:space="preserve">
          <source>Warning: Don't Ignore Errors!</source>
          <target state="translated">경고 : 오류를 무시하지 마십시오!</target>
        </trans-unit>
        <trans-unit id="1a381fabac245f16381f9fcc429f3d58cda41f8f" translate="yes" xml:space="preserve">
          <source>Warning: Don't ignore errors!</source>
          <target state="translated">경고 : 오류를 무시하지 마십시오!</target>
        </trans-unit>
        <trans-unit id="ba74e05534617d2ea02ad96b1b65727a369644b9" translate="yes" xml:space="preserve">
          <source>Warning: Using &lt;code&gt;'uncaughtException'&lt;/code&gt; correctly</source>
          <target state="translated">경고 : &lt;code&gt;'uncaughtException'&lt;/code&gt; 사용 올바르게 사용</target>
        </trans-unit>
        <trans-unit id="88c9b3b7035c622e0f389e01ba6cf0e17f9a8035" translate="yes" xml:space="preserve">
          <source>Warning: binding inspector to a public IP:port combination is insecure</source>
          <target state="translated">경고 : 공용 IP : 포트 조합에 바인딩 관리자가 안전하지 않습니다</target>
        </trans-unit>
        <trans-unit id="5572df96747c775e74faaf9fbcff598c0868e454" translate="yes" xml:space="preserve">
          <source>Wasm modules</source>
          <target state="translated">Wasm 모듈</target>
        </trans-unit>
        <trans-unit id="4cc3642e79938d3a54d70cdcf5471b1c853bb99c" translate="yes" xml:space="preserve">
          <source>Watch for changes on &lt;code&gt;filename&lt;/code&gt;, where &lt;code&gt;filename&lt;/code&gt; is either a file or a directory.</source>
          <target state="translated">에 변화를 주시 &lt;code&gt;filename&lt;/code&gt; , &lt;code&gt;filename&lt;/code&gt; 중 파일이나 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="3cc8e7672ff86422896943e5f086f88c2cb556a9" translate="yes" xml:space="preserve">
          <source>Watch for changes on &lt;code&gt;filename&lt;/code&gt;. The callback &lt;code&gt;listener&lt;/code&gt; will be called each time the file is accessed.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; 의 변경 사항을 감시하십시오 . 파일에 액세스 할 때마다 콜백 &lt;code&gt;listener&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="cdc01934e544fe692a8a590e35cab70ab09f9b33" translate="yes" xml:space="preserve">
          <source>Watchers</source>
          <target state="translated">Watchers</target>
        </trans-unit>
        <trans-unit id="994fd9faac8b6e6f0fb4f4db18b10bc4de502de5" translate="yes" xml:space="preserve">
          <source>We are not endorsed by or affiliated with Joyent.</source>
          <target state="translated">우리는 Joyent가 보증하거나 제휴하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7d95a3ca55b65642f528e4081042f0f3f23c8511" translate="yes" xml:space="preserve">
          <source>We can construct a Node.js Readable Stream from an asynchronous generator using the &lt;code&gt;Readable.from()&lt;/code&gt; utility method:</source>
          <target state="translated">&lt;code&gt;Readable.from()&lt;/code&gt; 유틸리티 메소드를 사용하여 비동기 생성기에서 Node.js 읽기 가능 스트림을 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2caad1f379f9a1c6cd05c938b7dd3f820e135760" translate="yes" xml:space="preserve">
          <source>We can construct a Node.js readable stream from an asynchronous generator using the &lt;code&gt;Readable.from()&lt;/code&gt; utility method:</source>
          <target state="translated">&lt;code&gt;Readable.from()&lt;/code&gt; 유틸리티 메서드를 사용하여 비동기 생성기에서 Node.js 가독 스트림을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d22ce1330ab24cd772e12179abf27c3f4e3a3767" translate="yes" xml:space="preserve">
          <source>Web Crypto API</source>
          <target state="translated">웹 암호화 API</target>
        </trans-unit>
        <trans-unit id="051061c35dede06e751f127657cfd8dabc9b47ce" translate="yes" xml:space="preserve">
          <source>WebAssembly</source>
          <target state="translated">WebAssembly</target>
        </trans-unit>
        <trans-unit id="db0624b3355092508d71740bf70a2f3d923a7aa7" translate="yes" xml:space="preserve">
          <source>WebAssembly System Interface (WASI)</source>
          <target state="translated">웹 어셈블리 시스템 인터페이스 (WASI)</target>
        </trans-unit>
        <trans-unit id="895286b9ffc9d778c00bb9c441eadee44988cc4d" translate="yes" xml:space="preserve">
          <source>What does it mean to &quot;contextify&quot; an object?</source>
          <target state="translated">&quot;컨텍스트 화&quot;한다는 것은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="ea899a2b4f85a243eb31293d0815ef8d517aa58c" translate="yes" xml:space="preserve">
          <source>What makes &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; and &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &quot;unsafe&quot;?</source>
          <target state="translated">&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; 및 &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &quot;안전하지 않은&quot; 이유는 무엇입니까 ?</target>
        </trans-unit>
        <trans-unit id="a5ff49b6cb64f5bd92a07be45aae4e9be901e2eb" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt;&lt;code&gt;fs.readdir()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt;&lt;code&gt;fs.readdirSync()&lt;/code&gt;&lt;/a&gt; is called with the &lt;code&gt;withFileTypes&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the resulting array is filled with &lt;code&gt;fs.Dirent&lt;/code&gt; objects, rather than strings or &lt;code&gt;Buffers&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt; &lt;code&gt;fs.readdir()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt; &lt;code&gt;fs.readdirSync()&lt;/code&gt; &lt;/a&gt; 불려 &lt;code&gt;withFileTypes&lt;/code&gt; 의 행 옵션 세트 &lt;code&gt;true&lt;/code&gt; , 생성 된 배열로 채워진다 &lt;code&gt;fs.Dirent&lt;/code&gt; 가 아닌 문자열 또는보다 오브젝트 &lt;code&gt;Buffers&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f2c50750aec5f7dfc5188b6d2b5475a40f7a9f36" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;this.push(dataChunk)&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;_read()&lt;/code&gt; should continue reading from the resource and pushing data until &lt;code&gt;readable.push()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Only when &lt;code&gt;_read()&lt;/code&gt; is called again after it has stopped should it resume pushing additional data onto the queue.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;this.push(dataChunk)&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt; 가 호출 될 때 리소스에서 데이터를 사용할 수있는 경우 구현시 this.push (dataChunk) 메서드를 사용하여 해당 데이터를 읽기 대기열로 푸시하기 시작해야합니다 . &lt;code&gt;_read()&lt;/code&gt; 자원에서 읽을 때까지 데이터를 밀어 계속해야한다 &lt;code&gt;readable.push()&lt;/code&gt; 반환 &lt;code&gt;false&lt;/code&gt; . &lt;code&gt;_read()&lt;/code&gt; 가 중지 된 후 다시 호출 될 때만 추가 데이터를 큐에 다시 푸시해야합니다.</target>
        </trans-unit>
        <trans-unit id="bd82acd7823cb8417adc5ed62f046044d1b1434e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;SIGUSR1&lt;/code&gt; is received by a Node.js process, Node.js will start the debugger. See &lt;a href=&quot;#process_signal_events&quot;&gt;Signal Events&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SIGUSR1&lt;/code&gt; 이 Node.js 프로세스에 의해 수신 되면 Node.js가 디버거를 시작합니다. &lt;a href=&quot;#process_signal_events&quot;&gt;신호 이벤트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc9b3892e250b09e2ccf1ba6dcba82854161c467" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; is called, it will immediately call the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">때 &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; 호출, 그것은 바로 호출 &lt;code&gt;fn&lt;/code&gt; 기능을.</target>
        </trans-unit>
        <trans-unit id="c51a7ae7f92cedc40838aa3599bed7de4ae3f59c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;autoPadding&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the length of the entire input data must be a multiple of the cipher's block size or &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; will throw an error. Disabling automatic padding is useful for non-standard padding, for instance using &lt;code&gt;0x0&lt;/code&gt; instead of PKCS padding.</source>
          <target state="translated">경우 &lt;code&gt;autoPadding&lt;/code&gt; 가 있다 &lt;code&gt;false&lt;/code&gt; , 전체 입력 데이터의 길이가 암호의 블록 크기 또는의 배수 여야 &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt; 오류가 발생한다. 자동 패딩을 비활성화하면 비표준 패딩에 유용합니다 (예 : &lt;code&gt;0x0&lt;/code&gt; 사용). PKCS 패딩 대신 사용).</target>
        </trans-unit>
        <trans-unit id="d5b4788c570217c4c4cd383fd70f220b520d0f3f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;chunk&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;Uint8Array&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;, the &lt;code&gt;chunk&lt;/code&gt; of data will be added to the internal queue for users of the stream to consume. Passing &lt;code&gt;chunk&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt; signals the end of the stream (EOF), after which no more data can be written.</source>
          <target state="translated">경우 &lt;code&gt;chunk&lt;/code&gt; A는 &lt;code&gt;Buffer&lt;/code&gt; , &lt;code&gt;Uint8Array&lt;/code&gt; 또는 &lt;code&gt;string&lt;/code&gt; 의 &lt;code&gt;chunk&lt;/code&gt; 데이터는 소비 할 수있는 스트림의 사용자에 대한 내부 큐에 추가한다. 전달 &lt;code&gt;chunk&lt;/code&gt; 로 &lt;code&gt;null&lt;/code&gt; 신호가 더 이상 데이터를 기록 할 수없는 그 후에 흐름 (EOF)의 끝.</target>
        </trans-unit>
        <trans-unit id="4f925a53c29c5bcd12a5d6dfdd3867f89f8364a3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;delay&lt;/code&gt; is larger than &lt;code&gt;2147483647&lt;/code&gt; or less than &lt;code&gt;1&lt;/code&gt;, the &lt;code&gt;delay&lt;/code&gt; will be set to &lt;code&gt;1&lt;/code&gt;. Non-integer delays are truncated to an integer.</source>
          <target state="translated">때 &lt;code&gt;delay&lt;/code&gt; 보다 큰 &lt;code&gt;2147483647&lt;/code&gt; 미만 또는 &lt;code&gt;1&lt;/code&gt; 의 &lt;code&gt;delay&lt;/code&gt; 설정한다 &lt;code&gt;1&lt;/code&gt; . 정수가 아닌 지연은 정수로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="c5f55b3490002d692e1a0bc547c5d27f68d920cd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;encoding&lt;/code&gt; is being passed, the &lt;code&gt;byteOffset&lt;/code&gt; parameter is no longer required.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 이 전달 될 때 &lt;code&gt;byteOffset&lt;/code&gt; 매개 변수는 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5f4541cc38a816abc8f23ec4b8971b3ebd174a1a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a file descriptor, the behavior is almost identical to directly calling &lt;code&gt;fs.write()&lt;/code&gt; like:</source>
          <target state="translated">때 &lt;code&gt;file&lt;/code&gt; 파일 기술자는, 동작은 직접 호출 거의 동일 &lt;code&gt;fs.write()&lt;/code&gt; 등이 :</target>
        </trans-unit>
        <trans-unit id="2701fff05e428233b787d036477d25103b1785f2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a file descriptor, the behavior is similar to calling &lt;code&gt;fs.write()&lt;/code&gt; directly (which is recommended). See the notes below on using a file descriptor.</source>
          <target state="translated">때 &lt;code&gt;file&lt;/code&gt; 파일 기술자는, 동작이 호출과 유사하다 &lt;code&gt;fs.write()&lt;/code&gt; (권장되는) 직접. 파일 디스크립터 사용에 대한 아래 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="90ac1e3daacaea2849e260a99067b74ddaee1919" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a filename, asynchronously writes data to the file, replacing the file if it already exists. &lt;code&gt;data&lt;/code&gt; can be a string or a buffer.</source>
          <target state="translated">때 &lt;code&gt;file&lt;/code&gt; 파일 이름은 비동기이 이미 존재하는 경우 파일을 대체 파일에 데이터를 기록합니다. &lt;code&gt;data&lt;/code&gt; 는 문자열 또는 버퍼 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fae7e3a5f019a0902ac6919aec620f66f32a1e8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;format&lt;/code&gt; is &lt;code&gt;'jwk'&lt;/code&gt; and the export is successful, the returned promise will be resolved with a JavaScript object conforming to the &lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;JSON Web Key&lt;/a&gt; specification.</source>
          <target state="translated">시 &lt;code&gt;format&lt;/code&gt; 인 &lt;code&gt;'jwk'&lt;/code&gt; 와 수출에 성공, 반환 약속은 자바 스크립트 객체가에 부합으로 해결 될 것입니다 &lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;JSON 웹 키&lt;/a&gt; 사양입니다.</target>
        </trans-unit>
        <trans-unit id="1281287fb6cbb852cce4f82592cc1ef45ca96d01" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;format&lt;/code&gt; is either &lt;code&gt;'pkcs8'&lt;/code&gt; or &lt;code&gt;'spki'&lt;/code&gt; and the export is successful, the returned promise will be resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the exported key data.</source>
          <target state="translated">때 &lt;code&gt;format&lt;/code&gt; 중 하나 인 &lt;code&gt;'pkcs8'&lt;/code&gt; 또는 &lt;code&gt;'spki'&lt;/code&gt; 와 수출에 성공, 반환 약속은으로 해결 될 것입니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; 내 보낸 키 데이터를 포함.</target>
        </trans-unit>
        <trans-unit id="be558d668e858413c7f08029fc6140d8cc4aaa06" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;main.js&lt;/code&gt; loads &lt;code&gt;a.js&lt;/code&gt;, then &lt;code&gt;a.js&lt;/code&gt; in turn loads &lt;code&gt;b.js&lt;/code&gt;. At that point, &lt;code&gt;b.js&lt;/code&gt; tries to load &lt;code&gt;a.js&lt;/code&gt;. In order to prevent an infinite loop, an &lt;strong&gt;unfinished copy&lt;/strong&gt; of the &lt;code&gt;a.js&lt;/code&gt; exports object is returned to the &lt;code&gt;b.js&lt;/code&gt; module. &lt;code&gt;b.js&lt;/code&gt; then finishes loading, and its &lt;code&gt;exports&lt;/code&gt; object is provided to the &lt;code&gt;a.js&lt;/code&gt; module.</source>
          <target state="translated">때 &lt;code&gt;main.js&lt;/code&gt; 의 로드 &lt;code&gt;a.js&lt;/code&gt; 은 다음 &lt;code&gt;a.js&lt;/code&gt; 턴로드에 &lt;code&gt;b.js&lt;/code&gt; . 그 시점에서, &lt;code&gt;b.js&lt;/code&gt; 로드하려고 &lt;code&gt;a.js&lt;/code&gt; 을 . 무한 루프를 방지하기 위해, &lt;strong&gt;완료되지 않은 복사본&lt;/strong&gt; 의 &lt;code&gt;a.js&lt;/code&gt; 의 수출 객체가 반환된다 &lt;code&gt;b.js&lt;/code&gt; 용 모듈. &lt;code&gt;b.js&lt;/code&gt; 다음 b.js 는로드를 마치고 해당 &lt;code&gt;exports&lt;/code&gt; 객체가 &lt;code&gt;a.js&lt;/code&gt; 모듈에 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="116dd83b9194432a786c2f883396dbf7da0f9614" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;node-gyp&lt;/code&gt; runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, Addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.</source>
          <target state="translated">때 &lt;code&gt;node-gyp&lt;/code&gt; 실행, 그것은 특정 릴리스 Node.js를 버전 다운로드 중 전체 소스 타르볼하거나 헤더를 감지합니다. 전체 소스가 다운로드되면 Addons는 Node.js 종속성의 전체 세트에 완전히 액세스 할 수 있습니다. 그러나 Node.js 헤더 만 다운로드하면 Node.js에서 내 보낸 심볼 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c3380def0df49b31f9e57740ec509df8706002f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;node-gyp&lt;/code&gt; runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.</source>
          <target state="translated">때 &lt;code&gt;node-gyp&lt;/code&gt; 실행, 그것은 특정 릴리스 Node.js를 버전 다운로드 중 전체 소스 타르볼하거나 헤더를 감지합니다. 전체 소스가 다운로드되면 애드온은 Node.js 종속성의 전체 세트에 대한 완전한 액세스 권한을 갖습니다. 그러나 Node.js 헤더 만 다운로드하면 Node.js에서 내 보낸 심볼 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d0a3872ff2b1c3b6aad0d9e67dc6a7b215bb7bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.buffered&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;callback&lt;/code&gt; will be invoked once for every &lt;code&gt;PerformanceEntry&lt;/code&gt; instance:</source>
          <target state="translated">때 &lt;code&gt;options.buffered&lt;/code&gt; 이 있다 &lt;code&gt;false&lt;/code&gt; 의 &lt;code&gt;callback&lt;/code&gt; 모든에 대해 한 번 호출됩니다 &lt;code&gt;PerformanceEntry&lt;/code&gt; 의 예 :</target>
        </trans-unit>
        <trans-unit id="b573fea9c7ba66a6043fa6811606bc0e5d00ae79" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.paddingStrategy&lt;/code&gt; is equal to &lt;code&gt;http2.constants.PADDING_STRATEGY_CALLBACK&lt;/code&gt;, the HTTP/2 implementation will consult the &lt;code&gt;options.selectPadding()&lt;/code&gt; callback function, if provided, to determine the specific amount of padding to use per &lt;code&gt;HEADERS&lt;/code&gt; and &lt;code&gt;DATA&lt;/code&gt; frame.</source>
          <target state="translated">경우 &lt;code&gt;options.paddingStrategy&lt;/code&gt; 가 같은지 &lt;code&gt;http2.constants.PADDING_STRATEGY_CALLBACK&lt;/code&gt; 은 HTTP / 2 구현 협의한다 &lt;code&gt;options.selectPadding()&lt;/code&gt; 당 사용 패딩의 특정 량을 결정하기 위해 제공되는 경우, 콜백 함수를 &lt;code&gt;HEADERS&lt;/code&gt; 및 &lt;code&gt;DATA&lt;/code&gt; 프레임.</target>
        </trans-unit>
        <trans-unit id="f03d6dd27fa836da716d942b341ab7febca3677a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.signal&lt;/code&gt; is set with an &lt;code&gt;AbortSignal&lt;/code&gt; and then &lt;code&gt;abort&lt;/code&gt; on the corresponding &lt;code&gt;AbortController&lt;/code&gt; is called, the request will emit an &lt;code&gt;'error'&lt;/code&gt; event with an &lt;code&gt;AbortError&lt;/code&gt; error.</source>
          <target state="translated">경우 &lt;code&gt;options.signal&lt;/code&gt; 가 로 설정 &lt;code&gt;AbortSignal&lt;/code&gt; 다음과 &lt;code&gt;abort&lt;/code&gt; 대응에 &lt;code&gt;AbortController&lt;/code&gt; 호출 요청은 발광한다 &lt;code&gt;'error'&lt;/code&gt; 와 이벤트 &lt;code&gt;AbortError&lt;/code&gt; 의 오류.</target>
        </trans-unit>
        <trans-unit id="1c36d3249d148321075b6e5c9c7a29462665fd54" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.waitForTrailers&lt;/code&gt; is set, the &lt;code&gt;Http2Stream&lt;/code&gt; will not automatically close when the final &lt;code&gt;DATA&lt;/code&gt; frame is transmitted. User code &lt;em&gt;must&lt;/em&gt; call either &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; or &lt;code&gt;http2stream.close()&lt;/code&gt; to close the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;options.waitForTrailers&lt;/code&gt; 가 설정되어 &lt;code&gt;Http2Stream&lt;/code&gt; 는 마지막 때 자동으로 닫히지 것이다 &lt;code&gt;DATA&lt;/code&gt; 프레임이 전송된다. 사용자 코드가 &lt;em&gt;있어야&lt;/em&gt; 전화 중 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; 또는 &lt;code&gt;http2stream.close()&lt;/code&gt; 닫기합니다 &lt;code&gt;Http2Stream&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="06cc8b92c09da71177b92ce0b2f605e7dfac1ca4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.waitForTrailers&lt;/code&gt; is set, the &lt;code&gt;Http2Stream&lt;/code&gt; will not automatically close when the final &lt;code&gt;DATA&lt;/code&gt; frame is transmitted. User code must call either &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; or &lt;code&gt;http2stream.close()&lt;/code&gt; to close the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;options.waitForTrailers&lt;/code&gt; 가 설정되어 &lt;code&gt;Http2Stream&lt;/code&gt; 는 마지막 때 자동으로 닫히지 것이다 &lt;code&gt;DATA&lt;/code&gt; 프레임이 전송된다. 사용자 코드를 호출해야 하나 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; 또는 &lt;code&gt;http2stream.close()&lt;/code&gt; 닫기합니다 &lt;code&gt;Http2Stream&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="44b13adb4475f68a6d3809ca001bb5510270e765" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is equal to &lt;code&gt;'gc'&lt;/code&gt;, the &lt;code&gt;performance.flags&lt;/code&gt; property contains additional information about garbage collection operation. The value may be one of:</source>
          <target state="translated">경우 &lt;code&gt;performanceEntry.entryType&lt;/code&gt; 은 동일하다 &lt;code&gt;'gc'&lt;/code&gt; 는 &lt;code&gt;performance.flags&lt;/code&gt; 의 속성은 가비지 콜렉션 동작에 대한 추가 정보를 포함한다. 값은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b367288f95ded72c1333b22b3d7d31a6efa1b87f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is equal to &lt;code&gt;'gc'&lt;/code&gt;, the &lt;code&gt;performance.kind&lt;/code&gt; property identifies the type of garbage collection operation that occurred. The value may be one of:</source>
          <target state="translated">경우 &lt;code&gt;performanceEntry.entryType&lt;/code&gt; 은 동일하다 &lt;code&gt;'gc'&lt;/code&gt; 는 &lt;code&gt;performance.kind&lt;/code&gt; 속성 식별 발생 가비지 콜렉션 동작의 유형. 값은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdf7e39c38e83dd8dabed9d41e819f625fb4d322" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserveCursor&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the cursor placement will not be reset to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;preserveCursor&lt;/code&gt; 이 있다 &lt;code&gt;true&lt;/code&gt; , 커서의 위치가 재설정되지 않습니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1570becd301409cef87544fe074fd1a4f64f49f4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;quicsocket.listen()&lt;/code&gt; is called, a &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; is created and used by default for all new &lt;code&gt;QuicServerSession&lt;/code&gt; instances. There are times, however, when the &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; to be used for a &lt;code&gt;QuicSession&lt;/code&gt; can only be determined once the client initiates a connection. This is accomplished using the &lt;code&gt;clientHelloHandler&lt;/code&gt; option when calling &lt;code&gt;quicsocket.listen()&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;quicsocket.listen()&lt;/code&gt; A,라고 &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; 생성 된 모든 새를 위해 기본적으로 사용됩니다 &lt;code&gt;QuicServerSession&lt;/code&gt; 의 인스턴스. 시간은 경우에, 그러나,있다 &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext이&amp;gt;&lt;/a&gt; A의 사용 &lt;code&gt;QuicSession&lt;/code&gt; 클라이언트 만 동수 연결하면 측정 할 수있다. 이는 &lt;code&gt;quicsocket.listen()&lt;/code&gt; 호출 할 때 &lt;code&gt;clientHelloHandler&lt;/code&gt; 옵션을 사용하여 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a39666ec417748f8c63aee587bbe9944f396c7a0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;readable._read()&lt;/code&gt; is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;this.push(dataChunk)&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;_read()&lt;/code&gt; should continue reading from the resource and pushing data until &lt;code&gt;readable.push()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Only when &lt;code&gt;_read()&lt;/code&gt; is called again after it has stopped should it resume pushing additional data onto the queue.</source>
          <target state="translated">&lt;code&gt;readable._read()&lt;/code&gt; 가 호출 될 때 자원에서 데이터를 사용할 수있는 경우 구현시 &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;this.push(dataChunk)&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 해당 데이터를 읽기 큐로 푸시해야합니다 . &lt;code&gt;_read()&lt;/code&gt; 는 리소스에서 계속 읽고 &lt;code&gt;readable.push()&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 를 반환 할 때까지 데이터를 푸시해야 합니다 . &lt;code&gt;_read()&lt;/code&gt; 가 중지 된 후 다시 호출 될 때만 추가 데이터를 큐로 푸시하는 것을 재개해야합니다.</target>
        </trans-unit>
        <trans-unit id="415b52239b8b94c7fa3114478d7d7ecdce354a16" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;readable.readableFlowing&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no mechanism for consuming the stream's data is provided. Therefore, the stream will not generate data. While in this state, attaching a listener for the &lt;code&gt;'data'&lt;/code&gt; event, calling the &lt;code&gt;readable.pipe()&lt;/code&gt; method, or calling the &lt;code&gt;readable.resume()&lt;/code&gt; method will switch &lt;code&gt;readable.readableFlowing&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, causing the &lt;code&gt;Readable&lt;/code&gt; to begin actively emitting events as data is generated.</source>
          <target state="translated">때 &lt;code&gt;readable.readableFlowing&lt;/code&gt; 이 있다 &lt;code&gt;null&lt;/code&gt; , 스트림의 데이터를 소비하는 메커니즘은 제공되지 않습니다. 따라서 스트림은 데이터를 생성하지 않습니다. 이 상태에서 &lt;code&gt;'data'&lt;/code&gt; 이벤트에 대한 리스너를 연결하거나 &lt;code&gt;readable.pipe()&lt;/code&gt; 메서드를 호출하거나 &lt;code&gt;readable.resume()&lt;/code&gt; 메서드를 호출하면 &lt;code&gt;readable.readableFlowing&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 로 전환 되어 &lt;code&gt;Readable&lt;/code&gt; 이 다음 과 같이 이벤트를 적극적으로 방출하기 시작합니다. 데이터가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="8e9d949fb4bb20efb20445fe1a7086affdc76d63" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;request.url&lt;/code&gt; is &lt;code&gt;'/status?name=ryan'&lt;/code&gt; and &lt;code&gt;request.headers.host&lt;/code&gt; is &lt;code&gt;'localhost:3000'&lt;/code&gt;:</source>
          <target state="translated">때 &lt;code&gt;request.url&lt;/code&gt; 이 있다 &lt;code&gt;'/status?name=ryan'&lt;/code&gt; 과 &lt;code&gt;request.headers.host&lt;/code&gt; 가 있다 &lt;code&gt;'localhost:3000'&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a0d03546e4741a7e49019e1ebd77ec915605ef57" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;stdout&lt;/code&gt; is a TTY, calling &lt;code&gt;console.clear()&lt;/code&gt; will attempt to clear the TTY. When &lt;code&gt;stdout&lt;/code&gt; is not a TTY, this method does nothing.</source>
          <target state="translated">때 &lt;code&gt;stdout&lt;/code&gt; 호출하는 TTY입니다 &lt;code&gt;console.clear()&lt;/code&gt; 청각 장애를 취소하려고합니다. 때 &lt;code&gt;stdout&lt;/code&gt; 청각 장애 아니라,이 메소드는 아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dde7ffbfdb4a192362f42e087299ff40d0514549" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;string&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;, the actual byte length is returned.</source>
          <target state="translated">때 &lt;code&gt;string&lt;/code&gt; A는 &lt;code&gt;Buffer&lt;/code&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; , 실제 바이트 길이가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="9ac661dcdccd7433059697ab48894dd8e9ddbe65" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;string&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;, the byte length as reported by &lt;code&gt;.byteLength&lt;/code&gt; is returned.</source>
          <target state="translated">때 &lt;code&gt;string&lt;/code&gt; 있는 &lt;code&gt;Buffer&lt;/code&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; 에 의해보고 된 바이트 길이 &lt;code&gt;.byteLength&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3e85ba5aa76361578aa11ab45899f063297a4632" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; can be extracted using either &lt;code&gt;subtleCrypto.exportKey()&lt;/code&gt; or &lt;code&gt;subtleCrypto.wrapKey()&lt;/code&gt;.</source>
          <target state="translated">되면 &lt;code&gt;true&lt;/code&gt; 상기 &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; 중 하나를 사용하여 추출 될 수 &lt;code&gt;subtleCrypto.exportKey()&lt;/code&gt; 또는 &lt;code&gt;subtleCrypto.wrapKey()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b83fecde6d4c12f20d0cd6ce7299c23edb443120" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;QuicStream&lt;/code&gt; is bidirectional. Both the readable and writable sides of the &lt;code&gt;QuicStream&lt;/code&gt;&lt;code&gt;Duplex&lt;/code&gt; are open.</source>
          <target state="translated">때 &lt;code&gt;true&lt;/code&gt; 의 &lt;code&gt;QuicStream&lt;/code&gt; 은 양방향이다. &lt;code&gt;QuicStream&lt;/code&gt; &lt;code&gt;Duplex&lt;/code&gt; 의 읽기 및 쓰기 가능한 측면이 모두 열려 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b97abb19ab4fafe544fd2b1944b99263574df87" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;write&lt;/code&gt; function is called with empty string or buffer, it does nothing and waits for more input.</source>
          <target state="translated">빈 문자열이나 버퍼로 &lt;code&gt;write&lt;/code&gt; 함수를 호출 하면 아무 것도 수행하지 않고 더 많은 입력을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="555a795705636054e34975bf9307cbe9b5899232" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a constructor for a class that was defined using &lt;code&gt;napi_define_class()&lt;/code&gt;, the &lt;code&gt;napi_callback&lt;/code&gt; for the constructor is invoked. After constructing an instance of the native class, the callback must then call &lt;code&gt;napi_wrap()&lt;/code&gt; to wrap the newly constructed instance in the already-created JavaScript object that is the &lt;code&gt;this&lt;/code&gt; argument to the constructor callback. (That &lt;code&gt;this&lt;/code&gt; object was created from the constructor function's &lt;code&gt;prototype&lt;/code&gt;, so it already has definitions of all the instance properties and methods.)</source>
          <target state="translated">JavaScript 코드가 &lt;code&gt;napi_define_class()&lt;/code&gt; 사용하여 정의 된 클래스의 생성자를 호출하면 생성자 의 &lt;code&gt;napi_callback&lt;/code&gt; 이 호출됩니다. 네이티브 클래스의 인스턴스를 생성 한 후 콜백은 &lt;code&gt;napi_wrap()&lt;/code&gt; 을 호출 하여 생성 된 콜백에 대한 &lt;code&gt;this&lt;/code&gt; 인수 인 이미 생성 된 JavaScript 객체에서 새로 생성 된 인스턴스를 래핑 해야합니다 . ( &lt;code&gt;this&lt;/code&gt; 객체는 생성자 함수의 &lt;code&gt;prototype&lt;/code&gt; 으로 만들어 졌으므로 이미 모든 인스턴스 속성과 메서드에 대한 정의가 있습니다.)</target>
        </trans-unit>
        <trans-unit id="1774b24fbf47d198b3a30100903828d7409b5b6c" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a method or property accessor on the class, the corresponding &lt;code&gt;napi_callback&lt;/code&gt; C++ function is invoked. For an instance callback, &lt;a href=&quot;#n_api_napi_unwrap&quot;&gt;&lt;code&gt;napi_unwrap&lt;/code&gt;&lt;/a&gt; obtains the C++ instance that is the target of the call.</source>
          <target state="translated">JavaScript 코드가 클래스에서 메소드 또는 특성 접근 &lt;code&gt;napi_callback&lt;/code&gt; 호출 하면 해당 napi_callback C ++ 함수가 호출됩니다. 인스턴스 콜백의 경우 &lt;a href=&quot;#n_api_napi_unwrap&quot;&gt; &lt;code&gt;napi_unwrap&lt;/code&gt; &lt;/a&gt; 은 호출 대상인 C ++ 인스턴스를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="0918571bdde3395da834b0207495ce14e0fe8c8e" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a method or property accessor on the class, the corresponding &lt;code&gt;napi_callback&lt;/code&gt; is invoked. If the callback is for an instance method or accessor, then the &lt;code&gt;this&lt;/code&gt; argument to the callback is the wrapper object; the wrapped C++ instance that is the target of the call can be obtained then by calling &lt;code&gt;napi_unwrap()&lt;/code&gt; on the wrapper object.</source>
          <target state="translated">JavaScript 코드가 클래스에서 메소드 또는 특성 접근 &lt;code&gt;napi_callback&lt;/code&gt; 호출 하면 해당 napi_callback 이 호출됩니다. 콜백이 인스턴스 메소드 또는 접근자를위한 것일 경우, 콜백에 대한 &lt;code&gt;this&lt;/code&gt; 인수는 랩퍼 오브젝트입니다. 호출 대상인 랩핑 된 C ++ 인스턴스 는 랩퍼 오브젝트에서 &lt;code&gt;napi_unwrap()&lt;/code&gt; 을 호출하여 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0ace059614f2d50957d2d6ec33c21258514bba31" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes the constructor, the constructor callback uses &lt;a href=&quot;#n_api_napi_wrap&quot;&gt;&lt;code&gt;napi_wrap&lt;/code&gt;&lt;/a&gt; to wrap a new C++ instance in a JavaScript object, then returns the wrapper object.</source>
          <target state="translated">JavaScript 코드가 생성자를 호출하면 생성자 콜백은 &lt;a href=&quot;#n_api_napi_wrap&quot;&gt; &lt;code&gt;napi_wrap&lt;/code&gt; &lt;/a&gt; 을 사용 하여 JavaScript 객체에서 새 C ++ 인스턴스를 래핑 한 다음 래퍼 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e1e6d67a00f46d577c6fd5ff65d30fd56c2bc6ed" translate="yes" xml:space="preserve">
          <source>When Node.js detects that it is being run with a text terminal (&quot;TTY&quot;) attached, &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt; will, by default, be initialized as an instance of &lt;code&gt;tty.ReadStream&lt;/code&gt; and both &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; will, by default be instances of &lt;code&gt;tty.WriteStream&lt;/code&gt;. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the &lt;code&gt;process.stdout.isTTY&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">Node.js를 그것이 텍스트 단말기 ( &quot;TTY&quot;)에 부착하여 실행되는 것을 감지하면 &lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt; 기본적으로 의지의 인스턴스로 초기화된다 &lt;code&gt;tty.ReadStream&lt;/code&gt; 모두 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt; 것이다 의해 기본값은 &lt;code&gt;tty.WriteStream&lt;/code&gt; 의 인스턴스입니다 . Node.js가 TTY 컨텍스트 내에서 실행 중인지 판별하는 선호되는 방법은 &lt;code&gt;process.stdout.isTTY&lt;/code&gt; 특성 값 이 &lt;code&gt;true&lt;/code&gt; 인지 확인하는 것 입니다 .</target>
        </trans-unit>
        <trans-unit id="0d04f8d87844828d3bad4ca9fd29c03215b925a5" translate="yes" xml:space="preserve">
          <source>When PEM encoding was selected, the result will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="translated">PEM 인코딩을 선택하면 결과는 문자열이되고 그렇지 않으면 DER로 인코딩 된 데이터가 포함 된 버퍼가됩니다.</target>
        </trans-unit>
        <trans-unit id="712e5de5a18b32a0cd5de594028fd6970962defd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Buffer&lt;/code&gt; instance is written to the &lt;code&gt;StringDecoder&lt;/code&gt; instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to &lt;code&gt;stringDecoder.write()&lt;/code&gt; or until &lt;code&gt;stringDecoder.end()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 인스턴스가 &lt;code&gt;StringDecoder&lt;/code&gt; 인스턴스에 기록 될 때 내부 버퍼는 디코딩 된 문자열에 불완전한 멀티 바이트 문자가 포함되지 않도록하는 데 사용됩니다. &lt;code&gt;stringDecoder.write()&lt;/code&gt; 대한 다음 호출 또는 &lt;code&gt;stringDecoder.end()&lt;/code&gt; 가 호출 될 때까지 버퍼에 유지됩니다 .</target>
        </trans-unit>
        <trans-unit id="d7f554f90810f250f3efe7dd028d56f55a04d642" translate="yes" xml:space="preserve">
          <source>When a TCP connection is created, it will have Nagle's algorithm enabled.</source>
          <target state="translated">TCP 연결이 생성되면 Nagle의 알고리즘이 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="19927653ece31251319386d70d376450d99eecd0" translate="yes" xml:space="preserve">
          <source>When a connection is closed by the client or the server, it is removed from the pool. Any unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests. (see &lt;a href=&quot;net#net_socket_unref&quot;&gt;&lt;code&gt;socket.unref()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">클라이언트 나 서버가 연결을 닫으면 풀에서 제거됩니다. 풀에서 사용되지 않은 소켓은 처리되지 않은 요청이 없을 때 Node.js 프로세스를 계속 실행하지 않도록 거부되지 않습니다. ( &lt;a href=&quot;net#net_socket_unref&quot;&gt; &lt;code&gt;socket.unref()&lt;/code&gt; &lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="e10f31dacabf18eebe8a53f9a06341d949975f16" translate="yes" xml:space="preserve">
          <source>When a file being watched by &lt;code&gt;fs.watchFile()&lt;/code&gt; disappears and reappears, then the &lt;code&gt;previousStat&lt;/code&gt; reported in the second callback event (the file's reappearance) will be the same as the &lt;code&gt;previousStat&lt;/code&gt; of the first callback event (its disappearance).</source>
          <target state="translated">파일이에 의해 감시 당하고 때 &lt;code&gt;fs.watchFile()&lt;/code&gt; 사라지고 다시 나타납니다은 다음 &lt;code&gt;previousStat&lt;/code&gt; 는 과 동일합니다 두 번째 콜백 이벤트 (파일의 재현)에보고 &lt;code&gt;previousStat&lt;/code&gt; 최초의 콜백 이벤트 (의 실종).</target>
        </trans-unit>
        <trans-unit id="0583ea7689fd44ba5f0901f941df4efc5774f1dd" translate="yes" xml:space="preserve">
          <source>When a file being watched by &lt;code&gt;fs.watchFile()&lt;/code&gt; disappears and reappears, then the contents of &lt;code&gt;previous&lt;/code&gt; in the second callback event (the file's reappearance) will be the same as the contents of &lt;code&gt;previous&lt;/code&gt; in the first callback event (its disappearance).</source>
          <target state="translated">파일은 시청중인 경우 &lt;code&gt;fs.watchFile()&lt;/code&gt; 사라지고 재발하면 다음의 내용을 &lt;code&gt;previous&lt;/code&gt; 제 콜백 이벤트 (파일의 재현성)에이 내용과 동일 할 것이다 &lt;code&gt;previous&lt;/code&gt; 제 콜백 이벤트 (그 소실).</target>
        </trans-unit>
        <trans-unit id="f1894f695ef22c3ee491695c8dc21d4765ddad8a" translate="yes" xml:space="preserve">
          <source>When a file is run directly from Node.js, &lt;code&gt;require.main&lt;/code&gt; is set to its &lt;code&gt;module&lt;/code&gt;. That means that it is possible to determine whether a file has been run directly by testing &lt;code&gt;require.main === module&lt;/code&gt;.</source>
          <target state="translated">Node.js에서 직접 파일을 실행하면 &lt;code&gt;require.main&lt;/code&gt; 이 해당 &lt;code&gt;module&lt;/code&gt; 로 설정됩니다 . 즉, &lt;code&gt;require.main === module&lt;/code&gt; 을 테스트하여 파일이 직접 실행되었는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5b842430962e7964c7770de7491a5dbb686db47c" translate="yes" xml:space="preserve">
          <source>When a listener is registered using the &lt;code&gt;eventEmitter.on()&lt;/code&gt; method, that listener is invoked &lt;em&gt;every time&lt;/em&gt; the named event is emitted.</source>
          <target state="translated">&lt;code&gt;eventEmitter.on()&lt;/code&gt; 메서드를 사용하여 리스너를 등록 하면 명명 된 이벤트가 발생할 때 &lt;em&gt;마다&lt;/em&gt; 해당 리스너가 호출 &lt;em&gt;됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="fb4289ace81cecf2b85810326c8fe6461f147516" translate="yes" xml:space="preserve">
          <source>When a listener is registered using the &lt;code&gt;eventEmitter.on()&lt;/code&gt; method, that listener will be invoked &lt;em&gt;every time&lt;/em&gt; the named event is emitted.</source>
          <target state="translated">&lt;code&gt;eventEmitter.on()&lt;/code&gt; 메소드를 사용하여 리스너를 등록 하면 이름 지정된 이벤트가 생성 될 때 &lt;em&gt;마다&lt;/em&gt; 해당 리스너가 호출 &lt;em&gt;됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ec661b7d7bfcd43207b92f13fc2978eb8e876b58" translate="yes" xml:space="preserve">
          <source>When a new &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; is created, a custom evaluation function may be provided. This can be used, for instance, to implement fully customized REPL applications.</source>
          <target state="translated">새 &lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt; 가 작성되면 사용자 정의 평가 기능이 제공 될 수 있습니다. 예를 들어, 이는 완전히 사용자 정의 된 REPL 응용 프로그램을 구현하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2de6c1acec16c787db17c177ceceacef6cbfddcd" translate="yes" xml:space="preserve">
          <source>When a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and macOS, &lt;code&gt;process.title&lt;/code&gt; is limited to the size of the binary name plus the length of the command line arguments because setting the &lt;code&gt;process.title&lt;/code&gt; overwrites the &lt;code&gt;argv&lt;/code&gt; memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the &lt;code&gt;environ&lt;/code&gt; memory but that was potentially insecure and confusing in some (rather obscure) cases.</source>
          <target state="translated">새 값이 할당되면 플랫폼마다 제목에 다른 최대 길이 제한이 적용됩니다. 일반적으로 이러한 제한은 상당히 제한적입니다. 예를 들어 Linux 및 macOS에서는 &lt;code&gt;process.title&lt;/code&gt; 을 설정하면 &lt;code&gt;process.title&lt;/code&gt; 의 &lt;code&gt;argv&lt;/code&gt; 메모리를 덮어 쓰기 때문에 process.title 은 이진 이름의 크기와 명령 줄 인수의 길이로 제한됩니다 . Node.js v0.8을 사용하면 &lt;code&gt;environ&lt;/code&gt; 메모리를 덮어 써서 더 긴 프로세스 제목 문자열을 사용할 수 있었지만 다소 모호한 경우에는 잠재적으로 안전하지 않고 혼란 스러웠습니다.</target>
        </trans-unit>
        <trans-unit id="41f14c991157e8be59395364f28e0f2bab7ae43c" translate="yes" xml:space="preserve">
          <source>When a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and macOS, &lt;code&gt;process.title&lt;/code&gt; is limited to the size of the binary name plus the length of the command-line arguments because setting the &lt;code&gt;process.title&lt;/code&gt; overwrites the &lt;code&gt;argv&lt;/code&gt; memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the &lt;code&gt;environ&lt;/code&gt; memory but that was potentially insecure and confusing in some (rather obscure) cases.</source>
          <target state="translated">새 값이 할당되면 플랫폼마다 타이틀에 다른 최대 길이 제한이 적용됩니다. 일반적으로 이러한 제한은 매우 제한적입니다. 예를 들어 Linux 및 macOS에서 &lt;code&gt;process.title&lt;/code&gt; 은 이진 이름의 크기와 명령 줄 인수 길이로 제한됩니다. &lt;code&gt;process.title&lt;/code&gt; 을 설정하면 프로세스 의 &lt;code&gt;argv&lt;/code&gt; 메모리를 덮어 쓰기 때문 입니다. Node.js v0.8은 &lt;code&gt;environ&lt;/code&gt; 메모리를 덮어 써서 더 긴 프로세스 제목 문자열을 허용 했지만 일부 (모호한) 경우에는 잠재적으로 안전하지 않고 혼란 스러웠습니다.</target>
        </trans-unit>
        <trans-unit id="3e6192f9f2edc651bd27c25fb6f640d241f78140" translate="yes" xml:space="preserve">
          <source>When a new worker is forked the cluster module will emit a &lt;code&gt;'fork'&lt;/code&gt; event. This can be used to log worker activity, and create a custom timeout.</source>
          <target state="translated">새 작업자가 포크되면 클러스터 모듈은 &lt;code&gt;'fork'&lt;/code&gt; 이벤트를 생성합니다. 작업자 활동을 기록하고 사용자 지정 시간 초과를 만드는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccdde242365773b6d1c801177f6044e7fed74140" translate="yes" xml:space="preserve">
          <source>When a package has an &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field, this will take precedence over the &lt;code&gt;&quot;main&quot;&lt;/code&gt; field when importing the package by name.</source>
          <target state="translated">패키지에 &lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt; 필드 가있는 경우 이름으로 패키지를 가져올 때 &lt;code&gt;&quot;main&quot;&lt;/code&gt; 필드 보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="ac6ece066e2e44ee56af54a0e437179aefc818e3" translate="yes" xml:space="preserve">
          <source>When a policy check fails, Node.js by default will throw an error. It is possible to change the error behavior to one of a few possibilities by defining an &quot;onerror&quot; field in a policy manifest. The following values are available to change the behavior:</source>
          <target state="translated">정책 확인에 실패하면 Node.js는 기본적으로 오류를 발생시킵니다. 정책 매니페스트에서 &quot;onerror&quot;필드를 정의하여 오류 동작을 몇 가지 가능성 중 하나로 변경할 수 있습니다. 동작을 변경하기 위해 다음 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6734825ccf390de2be59d84f5e066dbca41f678" translate="yes" xml:space="preserve">
          <source>When a registered event listener throws (or returns a Promise that rejects), by default the error is forwarded to the &lt;code&gt;process.on('error')&lt;/code&gt; event on &lt;code&gt;process.nextTick()&lt;/code&gt;. Throwing within an event listener will &lt;em&gt;not&lt;/em&gt; stop the other registered handlers from being invoked.</source>
          <target state="translated">등록 된 이벤트 리스너가 발생 (또는 불량이있는 약속을 반환), 기본적으로 오류가 전달 될 때 &lt;code&gt;process.on('error')&lt;/code&gt; 에 이벤트 &lt;code&gt;process.nextTick()&lt;/code&gt; . 이벤트 리스너 내에서 던져도 등록 된 다른 핸들러의 호출이 중지 &lt;em&gt;되지&lt;/em&gt; 는 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="640af45d9fc3cb08af64151f9dd193ba65c4834a" translate="yes" xml:space="preserve">
          <source>When a report is written, start and end messages are issued to stderr and the filename of the report is returned to the caller. The default filename includes the date, time, PID and a sequence number. The sequence number helps in associating the report dump with the runtime state if generated multiple times for the same Node.js process.</source>
          <target state="translated">보고서가 작성되면 시작 및 종료 메시지가 stderr에 발행되고 보고서의 파일 이름이 호출자에게 리턴됩니다. 기본 파일 이름에는 날짜, 시간, PID 및 시퀀스 번호가 포함됩니다. 시퀀스 번호는 동일한 Node.js 프로세스에 대해 여러 번 생성 된 경우 보고서 덤프를 런타임 상태와 연관시키는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="15bb4b88c15a01df74babc65463bcbe4252a9901" translate="yes" xml:space="preserve">
          <source>When a single function has been added as a handler multiple times for a single event (as in the example below), &lt;code&gt;removeListener()&lt;/code&gt; will remove the most recently added instance. In the example the &lt;code&gt;once('ping')&lt;/code&gt; listener is removed:</source>
          <target state="translated">단일 이벤트가 단일 이벤트에 대해 처리기로 여러 번 추가 된 경우 (아래 예와 같이) &lt;code&gt;removeListener()&lt;/code&gt; 는 가장 최근에 추가 된 인스턴스를 제거합니다. 이 예에서는 &lt;code&gt;once('ping')&lt;/code&gt; 리스너가 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="511a8bb474a1e812669ff871a25d9353657ef621" translate="yes" xml:space="preserve">
          <source>When a string is passed as an &lt;code&gt;origin&lt;/code&gt;, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; is the ASCII string &lt;code&gt;'https://example.org'&lt;/code&gt;. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.</source>
          <target state="translated">문자열이 &lt;code&gt;origin&lt;/code&gt; 으로 전달되면 URL로 구문 분석되고 원본이 파생됩니다. 예를 들어, HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; 의 출처 는 ASCII 문자열 &lt;code&gt;'https://example.org'&lt;/code&gt; 입니다. 주어진 문자열을 URL로 구문 분석 할 수 없거나 유효한 원점을 파생시킬 수없는 경우 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3e15aaa4c3d9a784868ceb60e33edb993d7e58a2" translate="yes" xml:space="preserve">
          <source>When a string is passed for the &lt;code&gt;originOrStream&lt;/code&gt; argument, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; is the ASCII string &lt;code&gt;'https://example.org'&lt;/code&gt;. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.</source>
          <target state="translated">&lt;code&gt;originOrStream&lt;/code&gt; 인수에 문자열이 전달되면 URL로 구문 분석되고 원본이 파생됩니다. 예를 들어, HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; 의 출처 는 ASCII 문자열 &lt;code&gt;'https://example.org'&lt;/code&gt; 입니다. 주어진 문자열을 URL로 구문 분석 할 수 없거나 유효한 원점을 파생시킬 수없는 경우 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="17832f33592cea32687ed0391953029199680044" translate="yes" xml:space="preserve">
          <source>When all of the &lt;code&gt;QuicEndpoint&lt;/code&gt; instances associated with a &lt;code&gt;QuicSocket&lt;/code&gt; have closed, the &lt;code&gt;QuicEndpoint&lt;/code&gt; will also automatically close.</source>
          <target state="translated">의 모든 때 &lt;code&gt;QuicEndpoint&lt;/code&gt; 의 과 관련된 인스턴스 &lt;code&gt;QuicSocket&lt;/code&gt; 가 닫은는 &lt;code&gt;QuicEndpoint&lt;/code&gt; 자동으로 닫습니다.</target>
        </trans-unit>
        <trans-unit id="afd64c1a21186719f41d045393b1ae954b443d5b" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;Http2Stream&lt;/code&gt; instance is destroyed, an attempt will be made to send an &lt;code&gt;RST_STREAM&lt;/code&gt; frame to the connected peer.</source>
          <target state="translated">때 &lt;code&gt;Http2Stream&lt;/code&gt; 의 인스턴스가 파괴되고, 시도는 보내도록 할 것이다 &lt;code&gt;RST_STREAM&lt;/code&gt; 에 연결된 피어에 프레임을.</target>
        </trans-unit>
        <trans-unit id="9126903cfca7540b84da69ca08800be0ac994dcc" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;fs.watchFile&lt;/code&gt; operation results in an &lt;code&gt;ENOENT&lt;/code&gt; error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10.</source>
          <target state="translated">때 &lt;code&gt;fs.watchFile&lt;/code&gt; 의 의 연산 결과 &lt;code&gt;ENOENT&lt;/code&gt; 의 오류, 그것은 (날짜 또는, 유닉스 신기원)의 모든 제로 필드, 한 번 리스너를 호출합니다. 파일이 나중에 생성되면 최신 통계 객체와 함께 리스너가 다시 호출됩니다. 이것은 v0.10부터 변경된 기능입니다.</target>
        </trans-unit>
        <trans-unit id="15d5ff09225189118135ef540fc0d06959e1b6ea" translate="yes" xml:space="preserve">
          <source>When an IPC channel has been established between the parent and child ( i.e. when using &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;subprocess.send()&lt;/code&gt; method can be used to send messages to the child process. When the child process is a Node.js instance, these messages can be received via the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">부모와 &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; IPC 채널이 설정된 경우 (예 : child_process.fork () , &lt;code&gt;subprocess.send()&lt;/code&gt; 메서드를 사용하여 자식 프로세스에 메시지를 보낼 수 있습니다. 자식 프로세스가 Node.js 인스턴스 인 경우 이러한 메시지는 &lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt; 이벤트 를 통해 수신 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1e27b21d76575a6545a822c2e33f4c81b2756f09" translate="yes" xml:space="preserve">
          <source>When an addon has additional threads and JavaScript functions need to be invoked based on the processing completed by those threads, those threads must communicate with the addon's main thread so that the main thread can invoke the JavaScript function on their behalf. The thread-safe function APIs provide an easy way to do this.</source>
          <target state="translated">애드온에 추가 스레드가 있고 해당 스레드가 완료 한 처리를 기반으로 JavaScript 함수를 호출해야하는 경우 해당 스레드는 애드온의 기본 스레드와 통신하여 기본 스레드가 대신 JavaScript 함수를 호출 할 수 있어야합니다. 스레드 안전 함수 API는이를위한 쉬운 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c7a942a0f6d718e366c908d56adfffde40992b49" translate="yes" xml:space="preserve">
          <source>When an application is using a package that provides both CommonJS and ES module sources, there is a risk of certain bugs if both versions of the package get loaded. This potential comes from the fact that the &lt;code&gt;pkgInstance&lt;/code&gt; created by &lt;code&gt;const pkgInstance = require('pkg')&lt;/code&gt; is not the same as the &lt;code&gt;pkgInstance&lt;/code&gt; created by &lt;code&gt;import pkgInstance from 'pkg'&lt;/code&gt; (or an alternative main path like &lt;code&gt;'pkg/module'&lt;/code&gt;). This is the &amp;ldquo;dual package hazard,&amp;rdquo; where two versions of the same package can be loaded within the same runtime environment. While it is unlikely that an application or package would intentionally load both versions directly, it is common for an application to load one version while a dependency of the application loads the other version. This hazard can happen because Node.js supports intermixing CommonJS and ES modules, and can lead to unexpected behavior.</source>
          <target state="translated">응용 프로그램이 CommonJS 및 ES 모듈 소스를 모두 제공하는 패키지를 사용하는 경우 패키지의 두 버전이 모두로드되면 특정 버그가 발생할 위험이 있습니다. 이 전위가 있다는 사실에서 유래 &lt;code&gt;pkgInstance&lt;/code&gt; 만든 &lt;code&gt;const pkgInstance = require('pkg')&lt;/code&gt; 는 AS 동일하지 않습니다 &lt;code&gt;pkgInstance&lt;/code&gt; 만든 &lt;code&gt;import pkgInstance from 'pkg'&lt;/code&gt; (또는 같은 다른 주요 경로 &lt;code&gt;'pkg/module'&lt;/code&gt; ). 이것은 동일한 패키지의 두 가지 버전이 동일한 런타임 환경 내에서로드 될 수있는 &quot;이중 패키지 위험&quot;입니다. 응용 프로그램이나 패키지가 의도적으로 두 버전을 모두 직접로드 할 가능성은 낮지 만 응용 프로그램의 종속성이 다른 버전을로드하는 동안 응용 프로그램이 한 버전을로드하는 것이 일반적입니다. 이러한 위험은 Node.js가 CommonJS 및 ES 모듈의 혼합을 지원하고 예상치 못한 동작으로 이어질 수 있기 때문에 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9756dd0510cc11850f4ec535793e6081c77c3248" translate="yes" xml:space="preserve">
          <source>When an asynchronous method is called on an object that is an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;, errors can be routed to that object's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">비동기 객체가 객체에서 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; 인하면 해당 객체의 &lt;code&gt;'error'&lt;/code&gt; 이벤트로 오류를 라우트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d18e3a14276353b8018b491a75c5696499ddaf86" translate="yes" xml:space="preserve">
          <source>When an asynchronous operation is initiated (such as a TCP server receiving a new connection) or completes (such as writing data to disk) a callback is called to notify the user. The &lt;code&gt;before&lt;/code&gt; callback is called just before said callback is executed. &lt;code&gt;asyncId&lt;/code&gt; is the unique identifier assigned to the resource about to execute the callback.</source>
          <target state="translated">비동기 작업이 시작되거나 (예 : 새 연결을받는 TCP 서버와 같은) 디스크에 데이터 쓰기와 같은 완료가 완료되면 콜백이 호출되어 사용자에게 알립니다. 그만큼 &lt;code&gt;before&lt;/code&gt; 콜백 직전이라고 콜백이 실행되는 것을 특징으로한다. &lt;code&gt;asyncId&lt;/code&gt; 는 콜백을 실행하려고하는 리소스에 할당 된 고유 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="d6b9733c7131b1f270bd8a59447f8373638fdeb8" translate="yes" xml:space="preserve">
          <source>When an error occurs within an &lt;code&gt;EventEmitter&lt;/code&gt; instance, the typical action is for an &lt;code&gt;'error'&lt;/code&gt; event to be emitted. These are treated as special cases within Node.js.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; 내에서 오류가 발생하는 경우 인스턴스 하면 일반적인 조치는 &lt;code&gt;'error'&lt;/code&gt; 이벤트가 발생하는 것입니다. 이들은 Node.js 내에서 특별한 경우로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="881c946d092eee0c2019dddd26763c107f92074b" translate="yes" xml:space="preserve">
          <source>When an exception is pending one of two approaches can be employed.</source>
          <target state="translated">예외가 계류중인 경우 두 가지 접근 방식 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8d8e67ab97c6a356d400452947e7a1f5c25de46" translate="yes" xml:space="preserve">
          <source>When an idle timeout is triggered the socket will receive a &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event but the connection will not be severed. The user must manually call &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;socket.end()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#net_socket_destroy_error&quot;&gt;&lt;code&gt;socket.destroy()&lt;/code&gt;&lt;/a&gt; to end the connection.</source>
          <target state="translated">유휴 시간 초과가 트리거되면 소켓은 &lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt; 이벤트를 수신 하지만 연결은 끊어지지 않습니다. 사용자는 수동으로 &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;socket.end()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#net_socket_destroy_error&quot;&gt; &lt;code&gt;socket.destroy()&lt;/code&gt; &lt;/a&gt; 를 호출 하여 연결을 종료해야합니다.</target>
        </trans-unit>
        <trans-unit id="b12a2263759010fd5cb937026f4d3cc1d87aca96" translate="yes" xml:space="preserve">
          <source>When an idle timeout is triggered the socket will receive a &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event but the connection will not be severed. The user must manually call &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;socket.end()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#net_socket_destroy_exception&quot;&gt;&lt;code&gt;socket.destroy()&lt;/code&gt;&lt;/a&gt; to end the connection.</source>
          <target state="translated">유휴 시간 초과가 트리거되면 소켓은 &lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt; 이벤트를 수신 하지만 연결이 끊어지지 않습니다. 사용자는 &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;socket.end()&lt;/code&gt; &lt;/a&gt; 수동으로 호출 하거나&lt;a href=&quot;#net_socket_destroy_exception&quot;&gt; &lt;code&gt;socket.destroy()&lt;/code&gt; &lt;/a&gt; 를하여 연결을 종료해야합니다.</target>
        </trans-unit>
        <trans-unit id="77087efee8715a6dc2457aee2202585a65670e3f" translate="yes" xml:space="preserve">
          <source>When any of the workers die the cluster module will emit the &lt;code&gt;'exit'&lt;/code&gt; event.</source>
          <target state="translated">작업자가 죽으면 클러스터 모듈은 &lt;code&gt;'exit'&lt;/code&gt; 방출합니다 이벤트가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="116eb8d9b320b92f34b0093303e05d42b3f6ac48" translate="yes" xml:space="preserve">
          <source>When assigning a non-string property to &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment may result in a thrown error. Please convert the property to a string before assigning it to &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">문자열이 아닌 속성을 &lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt; 에 할당하면 할당 된 값이 암시 적으로 문자열로 변환됩니다. 지정된 값이 문자열, 부울 또는 숫자가 아닌 경우이 동작은 더 이상 사용되지 않습니다. 앞으로 이러한 할당으로 인해 오류가 발생할 수 있습니다. &lt;code&gt;process.env&lt;/code&gt; 에 지정하기 전에 특성을 문자열로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d917de109fb537bcc255120b58c25b9a1a0ef08" translate="yes" xml:space="preserve">
          <source>When assigning a non-string property to &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment might result in a thrown error. Please convert the property to a string before assigning it to &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">비 문자열 속성을 &lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt; 에 할당하면 할당 된 값이 암시 적으로 문자열로 변환됩니다. 지정된 값이 문자열, 부울 또는 숫자가 아닌 경우이 동작은 더 이상 사용되지 않습니다. 앞으로 이러한 할당으로 인해 오류가 발생할 수 있습니다. &lt;code&gt;process.env&lt;/code&gt; 에 할당하기 전에 속성을 문자열로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b818f741bbe7288d1ef2ca2faa3d09c3b90b166" translate="yes" xml:space="preserve">
          <source>When building addons with &lt;code&gt;node-gyp&lt;/code&gt;, using the macro &lt;code&gt;NODE_GYP_MODULE_NAME&lt;/code&gt; as the first parameter of &lt;code&gt;NODE_MODULE()&lt;/code&gt; will ensure that the name of the final binary will be passed to &lt;code&gt;NODE_MODULE()&lt;/code&gt;.</source>
          <target state="translated">애드온으로 구축 할 때 &lt;code&gt;node-gyp&lt;/code&gt; 매크로 사용 &lt;code&gt;NODE_GYP_MODULE_NAME&lt;/code&gt; 의 최초의 파라미터로서 &lt;code&gt;NODE_MODULE()&lt;/code&gt; 최종 이진의 이름으로 전달 될 수 있도록 할 것이다 &lt;code&gt;NODE_MODULE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad44239206d327c587affb7903510f4fb3d9e0f3" translate="yes" xml:space="preserve">
          <source>When called on an unbound socket, this method will implicitly bind to a random port, listening on all interfaces.</source>
          <target state="translated">바인딩되지 않은 소켓에서 호출 될 때이 메서드는 모든 인터페이스에서 수신 대기하는 임의 포트에 암시 적으로 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="deed801833ff5cd178d1520926c3e8872b44b700" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.prompt()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">호출되면 &lt;code&gt;rl.prompt()&lt;/code&gt; 는 &lt;code&gt;input&lt;/code&gt; 을 재개합니다. 스트림이 일시 중지 된 경우 스트림 .</target>
        </trans-unit>
        <trans-unit id="95690a6b2ee253f0d475698c7f4cb4b18f80c22a" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.question()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">호출되면 &lt;code&gt;rl.question()&lt;/code&gt; 은 &lt;code&gt;input&lt;/code&gt; 을 재개합니다. 스트림이 일시 중지 된 경우 .</target>
        </trans-unit>
        <trans-unit id="03e0cfc11341c28038f0a5d042284497f7d85fcb" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.write()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">호출되면 &lt;code&gt;rl.write()&lt;/code&gt; 는 &lt;code&gt;input&lt;/code&gt; 스트림이 일시 중지 된 경우 다시 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="ffb3e53f526ac9005699e2122cb50b0c9899e0ac" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;util.deprecate()&lt;/code&gt; will return a function that will emit a &lt;code&gt;DeprecationWarning&lt;/code&gt; using the &lt;a href=&quot;process#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; event. The warning will be emitted and printed to &lt;code&gt;stderr&lt;/code&gt; the first time the returned function is called. After the warning is emitted, the wrapped function is called without emitting a warning.</source>
          <target state="translated">호출되면 &lt;code&gt;util.deprecate()&lt;/code&gt; 는 &lt;a href=&quot;process#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt; 이벤트를 사용하여 &lt;code&gt;DeprecationWarning&lt;/code&gt; 을 생성 하는 함수를 반환합니다 . 리턴 된 함수가 처음 호출 될 때 경고가 발생하고 &lt;code&gt;stderr&lt;/code&gt; 에 인쇄됩니다 . 경고가 발생한 후 경고없이 래핑 된 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="782b4e66ba3724b519a47f97cc938ec98cfd3fc0" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;FSWatcher&lt;/code&gt; is active. Calling &lt;code&gt;watcher.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출되면 &lt;code&gt;FSWatcher&lt;/code&gt; 가 활성화 되어있는 한 Node.js 이벤트 루프 &lt;em&gt;가&lt;/em&gt; 종료 &lt;em&gt;되지 않도록&lt;/em&gt; 요청합니다 . &lt;code&gt;watcher.ref()&lt;/code&gt; 여러 번 호출 해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="41e9efc4f4b110bf919f383c4bad1087df420418" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;Immediate&lt;/code&gt; is active. Calling &lt;code&gt;immediate.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출되면 &lt;code&gt;Immediate&lt;/code&gt; 이 활성화 되어있는 한 Node.js 이벤트 루프 &lt;em&gt;가&lt;/em&gt; 종료 &lt;em&gt;되지 않도록&lt;/em&gt; 요청합니다 . instant.ref &lt;code&gt;immediate.ref()&lt;/code&gt; 여러 번 호출 해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="74a07dd0d422c69557a3f1212fdca158cd9d1388" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;StatWatcher&lt;/code&gt; is active. Calling &lt;code&gt;watcher.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출되면 &lt;code&gt;StatWatcher&lt;/code&gt; 가 활성 상태 인 한 Node.js 이벤트 루프 &lt;em&gt;가&lt;/em&gt; 종료 &lt;em&gt;되지 않도록&lt;/em&gt; 요청합니다 . &lt;code&gt;watcher.ref()&lt;/code&gt; 여러 번 호출 해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="be1e4bc9da3126435a172ee6de0a8b7b01a0eecb" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;Timeout&lt;/code&gt; is active. Calling &lt;code&gt;timeout.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출되면 &lt;code&gt;Timeout&lt;/code&gt; 이 활성화 되어있는 한 Node.js 이벤트 루프 &lt;em&gt;가&lt;/em&gt; 종료 &lt;em&gt;되지 않도록&lt;/em&gt; 요청합니다 . &lt;code&gt;timeout.ref()&lt;/code&gt; 호출 여러 번 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3bdd99a968eb6c7c6f053bc7b91cc625374d6faa" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;FSWatcher&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;FSWatcher&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;watcher.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출 될 때 활성 &lt;code&gt;FSWatcher&lt;/code&gt; 개체는 Node.js 이벤트 루프가 활성 상태를 유지하는 데 필요하지 않습니다. 이벤트 루프 실행을 유지하는 다른 활동이 없으면 &lt;code&gt;FSWatcher&lt;/code&gt; 개체의 콜백이 호출 되기 전에 프로세스가 종료 될 수 있습니다 . &lt;code&gt;watcher.unref()&lt;/code&gt; 여러 번 호출 해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="8e832ff5be2f07a09ebaa7573b2df95ffeb3614c" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;Immediate&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;Immediate&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;immediate.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출되면 활성 &lt;code&gt;Immediate&lt;/code&gt; 객체는 Node.js 이벤트 루프를 활성 상태로 유지하지 않아도됩니다. 이벤트 루프를 계속 실행하는 다른 활동이 없으면 &lt;code&gt;Immediate&lt;/code&gt; 오브젝트의 콜백이 호출 되기 전에 프로세스가 종료 될 수 있습니다 . instant.unref &lt;code&gt;immediate.unref()&lt;/code&gt; 여러 번 호출 해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="855b13a333a844940a73826ba1ecc4be80be3cfb" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;StatWatcher&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;StatWatcher&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;watcher.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출 될 때 활성 &lt;code&gt;StatWatcher&lt;/code&gt; 객체는 Node.js 이벤트 루프가 활성 상태를 유지하는 데 필요하지 않습니다. 이벤트 루프 실행을 유지하는 다른 활동이 없으면 &lt;code&gt;StatWatcher&lt;/code&gt; 객체의 콜백이 호출 되기 전에 프로세스가 종료 될 수 있습니다 . &lt;code&gt;watcher.unref()&lt;/code&gt; 여러 번 호출 해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="52de90f11b22fd290fb3c08dde2358cfaa2b0340" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;Timeout&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;Timeout&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;timeout.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">호출되면 활성 &lt;code&gt;Timeout&lt;/code&gt; 객체는 Node.js 이벤트 루프가 활성 상태를 유지하도록 요구하지 않습니다. 이벤트 루프를 계속 실행하는 다른 활동이 없으면 &lt;code&gt;Timeout&lt;/code&gt; 객체의 콜백이 호출 되기 전에 프로세스가 종료 될 수 있습니다 . &lt;code&gt;timeout.unref()&lt;/code&gt; 호출 여러 번 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="9472be900a89f3ccdcf5acc7441e9034a55e1be5" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, the segment of allocated memory is &lt;em&gt;uninitialized&lt;/em&gt; (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a &lt;code&gt;Buffer&lt;/code&gt; created by &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; without &lt;em&gt;completely&lt;/em&gt; overwriting the memory can allow this old data to be leaked when the &lt;code&gt;Buffer&lt;/code&gt; memory is read.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &lt;/a&gt; 호출 할 때 할당 된 메모리 세그먼트가 &lt;em&gt;초기화되지&lt;/em&gt; 않습니다 (0으로 &lt;em&gt;초기화되지&lt;/em&gt; 않음). 이 디자인은 메모리를 매우 빠르게 할당하지만 할당 된 메모리 세그먼트에는 잠재적으로 민감한 오래된 데이터가 포함될 수 있습니다. 메모리 를 &lt;em&gt;완전히&lt;/em&gt; 덮어 쓰지 않고 &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 만든 &lt;code&gt;Buffer&lt;/code&gt; 사용 하면 &lt;code&gt;Buffer&lt;/code&gt; 메모리를 읽을 때이 오래된 데이터가 유출 될 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="96f6bf2e2ec8bbbea1c61816a4f0b4a72612a006" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, the segment of allocated memory is &lt;em&gt;uninitialized&lt;/em&gt; (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a &lt;code&gt;Buffer&lt;/code&gt; created by &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; without &lt;em&gt;completely&lt;/em&gt; overwriting the memory can allow this old data to be leaked when the &lt;code&gt;Buffer&lt;/code&gt; memory is read.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &lt;/a&gt; 호출 할 때 할당 된 메모리의 세그먼트가 &lt;em&gt;초기화되지&lt;/em&gt; 않습니다 (제로 아웃되지 않음). 이 디자인은 메모리 할당을 매우 빠르게하지만 할당 된 메모리 세그먼트에는 잠재적으로 민감한 오래된 데이터가 포함될 수 있습니다. 메모리 를 &lt;em&gt;완전히&lt;/em&gt; 덮어 쓰지 않고 &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 의해 생성 된 &lt;code&gt;Buffer&lt;/code&gt; 사용 하면 &lt;code&gt;Buffer&lt;/code&gt; 메모리를 읽을 때이 오래된 데이터가 유출 될 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="468120732bcdf214c7e9f58563736b992ee8c4bf" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;.node&lt;/code&gt; extension can usually be omitted and Node.js will still find and initialize the Addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file &lt;code&gt;addon.js&lt;/code&gt; in the same directory as the binary &lt;code&gt;addon.node&lt;/code&gt;, then &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require('addon')&lt;/code&gt;&lt;/a&gt; will give precedence to the &lt;code&gt;addon.js&lt;/code&gt; file and load it instead.</source>
          <target state="translated">호출 할 때 &lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;.node&lt;/code&gt; 의 확장은 일반적으로 생략 할 수 있으며, Node.js를 아직도 발견하고 부가 기능을 초기화합니다. 그러나 Node.js는 먼저 동일한 기본 이름을 공유하는 모듈 또는 JavaScript 파일을 찾아로드하려고 시도합니다. 파일이있는 경우 예를 들어, &lt;code&gt;addon.js&lt;/code&gt; 이진과 같은 디렉토리에 &lt;code&gt;addon.node&lt;/code&gt; , 다음 &lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require('addon')&lt;/code&gt; &lt;/a&gt; 받는 우선 순위를 줄 것이다 &lt;code&gt;addon.js&lt;/code&gt; 의 파일 대신로드합니다.</target>
        </trans-unit>
        <trans-unit id="da566e0b89c4ee78a1cb664d3a13e2b25f5806e2" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;.node&lt;/code&gt; extension can usually be omitted and Node.js will still find and initialize the addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file &lt;code&gt;addon.js&lt;/code&gt; in the same directory as the binary &lt;code&gt;addon.node&lt;/code&gt;, then &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require('addon')&lt;/code&gt;&lt;/a&gt; will give precedence to the &lt;code&gt;addon.js&lt;/code&gt; file and load it instead.</source>
          <target state="translated">호출 할 때 &lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;.node&lt;/code&gt; 의 확장은 일반적으로 생략 할 수 있으며, Node.js를 아직도 발견하고 부가 기능을 초기화합니다. 그러나 한 가지주의 할 점은 Node.js가 먼저 동일한 기본 이름을 공유하는 모듈 또는 JavaScript 파일을 찾아로드하려고 시도한다는 것입니다. 파일이있는 경우 예를 들어, &lt;code&gt;addon.js&lt;/code&gt; 이진과 같은 디렉토리에 &lt;code&gt;addon.node&lt;/code&gt; , 다음 &lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require('addon')&lt;/code&gt; &lt;/a&gt; 받는 우선 순위를 줄 것이다 &lt;code&gt;addon.js&lt;/code&gt; 의 파일 대신로드합니다.</target>
        </trans-unit>
        <trans-unit id="fa673ee946e346399b283e0ddd06ac9b7dc3be24" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;asyncLocalStorage.disable()&lt;/code&gt;, all current contexts linked to the instance will be exited.</source>
          <target state="translated">&lt;code&gt;asyncLocalStorage.disable()&lt;/code&gt; 호출 하면 인스턴스에 연결된 모든 현재 컨텍스트가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="01bbab8a41af1b936d094221718dc42485ff9707" translate="yes" xml:space="preserve">
          <source>When connecting as a client, if the remote IP address is blocked, the connection attempt will be rejected.</source>
          <target state="translated">클라이언트로 연결시 원격 IP 주소가 차단되면 연결 시도가 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="35899d0224206f7ecd5b079bec2e5ae41bf88bc6" translate="yes" xml:space="preserve">
          <source>When converting between &lt;code&gt;Buffer&lt;/code&gt;s and strings, a character encoding may be specified. If no character encoding is specified, UTF-8 will be used as the default.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 와 문자열 사이를 변환 할 때 문자 인코딩을 지정할 수 있습니다. 문자 인코딩이 지정되지 않은 경우 UTF-8이 기본값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="69c454c7fd1f23edf7fd0f8da819640c0634eb1b" translate="yes" xml:space="preserve">
          <source>When created, the &lt;code&gt;Tracing&lt;/code&gt; object is disabled. Calling the &lt;code&gt;tracing.enable()&lt;/code&gt; method adds the categories to the set of enabled trace event categories. Calling &lt;code&gt;tracing.disable()&lt;/code&gt; will remove the categories from the set of enabled trace event categories.</source>
          <target state="translated">작성되면 &lt;code&gt;Tracing&lt;/code&gt; 오브젝트가 사용 불가능합니다. &lt;code&gt;tracing.enable()&lt;/code&gt; 메소드를 호출하면 사용 가능한 추적 이벤트 카테고리 세트에 카테고리가 추가됩니다. &lt;code&gt;tracing.disable()&lt;/code&gt; 을 호출 하면 활성화 된 추적 이벤트 범주 세트에서 범주가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="cdfbef80b77a4d29415e274eb994b5bd25290e5d" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;Buffer&lt;/code&gt; using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;.buffer&lt;/code&gt;, it is possible to use only a portion of the underlying &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; by passing in &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;.buffer&lt;/code&gt; 를 사용하여 &lt;code&gt;Buffer&lt;/code&gt; 를 만들 때 &lt;code&gt;byteOffset&lt;/code&gt; 및 &lt;code&gt;length&lt;/code&gt; 매개 변수를 전달 하여 기본 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 의 일부만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05011da92dca1fbee82021fa4aeff73f6a280090" translate="yes" xml:space="preserve">
          <source>When data has been encrypted without standard block padding, calling &lt;code&gt;decipher.setAutoPadding(false)&lt;/code&gt; will disable automatic padding to prevent &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; from checking for and removing padding.</source>
          <target state="translated">표준 블록 패딩없이 데이터가 암호화 된 경우 &lt;code&gt;decipher.setAutoPadding(false)&lt;/code&gt; 호출 하면 자동 패딩이 비활성화되어 &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt; 패딩을 확인하고 제거하지 못합니다.</target>
        </trans-unit>
        <trans-unit id="41a108b65d6c3bc13552fc5b243229555d3f5234" translate="yes" xml:space="preserve">
          <source>When decrypting, the authentication tag must be set via &lt;code&gt;setAuthTag()&lt;/code&gt; before calling &lt;code&gt;update()&lt;/code&gt;. Otherwise, decryption will fail and &lt;code&gt;final()&lt;/code&gt; will throw an error in compliance with section 2.6 of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3610.txt&quot;&gt;RFC 3610&lt;/a&gt;.</source>
          <target state="translated">해독하면, 인증 태그를 통해 설정해야합니다 &lt;code&gt;setAuthTag()&lt;/code&gt; 를 호출하기 전에 &lt;code&gt;update()&lt;/code&gt; . 그렇지 않으면 암호 해독에 실패하고 &lt;code&gt;final()&lt;/code&gt; 은 &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3610.txt&quot;&gt;RFC 3610의&lt;/a&gt; 섹션 2.6에 따라 오류를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="7900ae4062073e82206b0fa6925789e3589d4177" translate="yes" xml:space="preserve">
          <source>When enabled, TLS packet trace information is written to &lt;code&gt;stderr&lt;/code&gt;. This can be used to debug TLS connection problems.</source>
          <target state="translated">활성화되면 TLS 패킷 추적 정보가 &lt;code&gt;stderr&lt;/code&gt; 에 기록됩니다 . TLS 연결 문제를 디버깅하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6983a109482d5a03d2a40f9b0b6b02c14a31403b" translate="yes" xml:space="preserve">
          <source>When encoding public keys, it is recommended to use &lt;code&gt;'spki'&lt;/code&gt;. When encoding private keys, it is recommended to use &lt;code&gt;'pkcs8'&lt;/code&gt; with a strong passphrase, and to keep the passphrase confidential.</source>
          <target state="translated">공개 키를 인코딩 할 때 &lt;code&gt;'spki'&lt;/code&gt; 를 사용하는 것이 좋습니다 . 개인 키를 인코딩 할 때 강력한 암호와 함께 &lt;code&gt;'pkcs8'&lt;/code&gt; 을 사용 하고 암호를 기밀로 유지하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a7ef1148fcaa829598a8bfe1284ca6b09d93c35a" translate="yes" xml:space="preserve">
          <source>When encoding public keys, it is recommended to use &lt;code&gt;'spki'&lt;/code&gt;. When encoding private keys, it is recommended to use &lt;code&gt;'pks8'&lt;/code&gt; with a strong passphrase, and to keep the passphrase confidential.</source>
          <target state="translated">공개 키를 인코딩 할 때는 &lt;code&gt;'spki'&lt;/code&gt; 를 사용하는 것이 좋습니다 . 개인 키를 인코딩 할 때는 강력한 암호 문구와 함께 &lt;code&gt;'pks8'&lt;/code&gt; 을 사용 하고 암호 문구를 기밀로 유지하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="05906fb7a190e151a8a2e400c141bb3e603ff56b" translate="yes" xml:space="preserve">
          <source>When encountering this error, a possible alternative to creating a &lt;code&gt;Buffer&lt;/code&gt; instance is to create a normal &lt;code&gt;Uint8Array&lt;/code&gt;, which only differs in the prototype of the resulting object. &lt;code&gt;Uint8Array&lt;/code&gt;s are generally accepted in all Node.js core APIs where &lt;code&gt;Buffer&lt;/code&gt;s are; they are available in all Contexts.</source>
          <target state="translated">이 오류가 발생하면 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 를 만드는 대안 은 일반 &lt;code&gt;Uint8Array&lt;/code&gt; 를 만드는 것 입니다. 결과 객체의 프로토 타입 만 다릅니다. &lt;code&gt;Uint8Array&lt;/code&gt; 는 일반적으로 &lt;code&gt;Buffer&lt;/code&gt; 가 있는 모든 Node.js 핵심 API에서 허용 됩니다. 그것들은 모든 상황에서 이용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="fbea7195eb1a28298b5c6bcea88ce20614ead794" translate="yes" xml:space="preserve">
          <source>When extending streams, keep in mind what options the user can and should provide before forwarding these to the base constructor. For example, if the implementation makes assumptions in regard to the &lt;code&gt;autoDestroy&lt;/code&gt; and &lt;code&gt;emitClose&lt;/code&gt; options, do not allow the user to override these. Be explicit about what options are forwarded instead of implicitly forwarding all options.</source>
          <target state="translated">스트림을 확장 할 때 기본 생성자에 전달하기 전에 사용자가 제공 할 수있는 옵션과 제공해야하는 옵션을 염두에 두십시오. 예를 들어 구현시 &lt;code&gt;autoDestroy&lt;/code&gt; 및 &lt;code&gt;emitClose&lt;/code&gt; 옵션 과 관련하여 가정을 하는 경우 사용자가이를 재정의하도록 허용하지 마십시오. 모든 옵션을 암시 적으로 전달하는 대신 전달되는 옵션에 대해 명시해야합니다.</target>
        </trans-unit>
        <trans-unit id="c3a545d2ef71b7de3995f4fd31454d72ba7d867d" translate="yes" xml:space="preserve">
          <source>When generating snapshots, garbage collection may be triggered and bring the heap usage down, therefore multiple snapshots may be written to disk before the Node.js instance finally runs out of memory. These heap snapshots can be compared to determine what objects are being allocated during the time consecutive snapshots are taken. It's not guaranteed that Node.js will write exactly &lt;code&gt;max_count&lt;/code&gt; snapshots to disk, but it will try its best to generate at least one and up to &lt;code&gt;max_count&lt;/code&gt; snapshots before the Node.js instance runs out of memory when &lt;code&gt;max_count&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">스냅 샷을 생성 할 때 가비지 수집이 트리거되고 힙 사용량이 줄어들 수 있으므로 Node.js 인스턴스가 마침내 메모리가 부족해지기 전에 여러 스냅 샷이 디스크에 기록 될 수 있습니다. 이러한 힙 스냅 샷을 비교하여 연속 스냅 샷이 생성되는 동안 할당되는 개체를 확인할 수 있습니다. Node.js가 정확히 &lt;code&gt;max_count&lt;/code&gt; 스냅 샷을 디스크에 쓸 것이라는 보장은 없지만, &lt;code&gt;max_count&lt;/code&gt; 가 &lt;code&gt;0&lt;/code&gt; 보다 크면 Node.js 인스턴스의 메모리가 부족해 지기 전에 최소 1 개에서 최대 &lt;code&gt;max_count&lt;/code&gt; 스냅 샷 을 생성하도록 최선을 다할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="e76bc96e47739cd7dc97aceca50067613ec70e6a" translate="yes" xml:space="preserve">
          <source>When having multiple instances of &lt;code&gt;AsyncLocalStorage&lt;/code&gt;, they are independent from each other. It is safe to instantiate this class multiple times.</source>
          <target state="translated">&lt;code&gt;AsyncLocalStorage&lt;/code&gt; 의 여러 인스턴스가있는 경우 서로 독립적입니다. 이 클래스를 여러 번 인스턴스화하는 것이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="b68d52fb44ce1ad14ef826fcceca8bc169d525a5" translate="yes" xml:space="preserve">
          <source>When headers have been set with &lt;a href=&quot;#http2_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt;, they will be merged with any headers passed to &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt;, with the headers passed to &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; given precedence.</source>
          <target state="translated">&lt;a href=&quot;#http2_response_setheader_name_value&quot;&gt; &lt;code&gt;response.setHeader()&lt;/code&gt; &lt;/a&gt; 로 헤더를 설정하면 우선 순위가 지정된 &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt; 전달 된 &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt; 전달 된 모든 헤더와 병합됩니다 .</target>
        </trans-unit>
        <trans-unit id="c27d25166c52526d61af879040d266b4ce3293c5" translate="yes" xml:space="preserve">
          <source>When headers have been set with &lt;a href=&quot;#http_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt;, they will be merged with any headers passed to &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt;, with the headers passed to &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; given precedence.</source>
          <target state="translated">&lt;a href=&quot;#http_response_setheader_name_value&quot;&gt; &lt;code&gt;response.setHeader()&lt;/code&gt; &lt;/a&gt; 로 헤더를 설정하면 우선 순위가 지정된 &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt; 전달 된 &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt; 전달 된 모든 헤더와 병합됩니다 .</target>
        </trans-unit>
        <trans-unit id="30fa6efb90162b70bba910948f8d508f93d02aec" translate="yes" xml:space="preserve">
          <source>When hooks are used they only apply to ES module loading and not to any CommonJS modules loaded.</source>
          <target state="translated">후크를 사용하는 경우 ES 모듈로드에만 적용되며로드 된 CommonJS 모듈에는 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b5a6dd08e0729dc5592da6bcbaa315760902c033" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. in order to provide asynchronous stack traces) about the correlation between tasks and their outcomes.</source>
          <target state="translated">작업자 풀을 구현할 때 &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; API를 사용하여 작업과 결과 간의 상관 관계에 대해 진단 도구 (예 : 비동기 스택 추적을 제공하기 위해)에 알립니다.</target>
        </trans-unit>
        <trans-unit id="86fa0425ee48db6d8d29ec95b9974a8ecde279dc" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. in order to provide asynchronous stack traces) about the correlation between tasks and their outcomes. See &lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;&quot;Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool&quot;&lt;/a&gt; in the &lt;code&gt;async_hooks&lt;/code&gt; documentation for an example implementation.</source>
          <target state="translated">작업자 풀을 구현할 때 &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; API를 사용하여 작업과 결과 간의 상관 관계에 대해 진단 도구 (예 : 비동기 스택 추적을 제공하기 위해)에 알립니다. 를 참조하십시오 &lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;&quot;사용 &lt;code&gt;AsyncResource&lt;/code&gt; 을 A에 대한 &lt;code&gt;Worker&lt;/code&gt; 스레드 풀&quot;&lt;/a&gt; 에서 &lt;code&gt;async_hooks&lt;/code&gt; 의 예제 구현을위한 문서.</target>
        </trans-unit>
        <trans-unit id="d9c208a745801e45a4f35ec88446a8d65ce92804" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. to provide asynchronous stack traces) about the correlation between tasks and their outcomes. See &lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;&quot;Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool&quot;&lt;/a&gt; in the &lt;code&gt;async_hooks&lt;/code&gt; documentation for an example implementation.</source>
          <target state="translated">작업자 풀을 구현할 때 &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; API를 사용하여 작업과 결과 간의 상관 관계에 대해 진단 도구 (예 : 비동기 스택 추적 제공)에 알립니다. 를 참조하십시오 &lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;&quot;사용 &lt;code&gt;AsyncResource&lt;/code&gt; 을 A에 대한 &lt;code&gt;Worker&lt;/code&gt; 스레드 풀&quot;&lt;/a&gt; 에서 &lt;code&gt;async_hooks&lt;/code&gt; 의 예제 구현을위한 문서.</target>
        </trans-unit>
        <trans-unit id="9447dff2dc7b6ea8f82aeb79872b54050b5c6671" translate="yes" xml:space="preserve">
          <source>When importing &lt;a href=&quot;#esm_commonjs_namespaces&quot;&gt;CommonJS modules&lt;/a&gt;, the &lt;code&gt;module.exports&lt;/code&gt; object is provided as the default export. Named exports may be available, provided by static analysis as a convenience for better ecosystem compatibility.</source>
          <target state="translated">가져올 때 &lt;a href=&quot;#esm_commonjs_namespaces&quot;&gt;CommonJS 모듈&lt;/a&gt; 의 &lt;code&gt;module.exports&lt;/code&gt; 의 객체는 기본 내보내기로 제공됩니다. 더 나은 생태계 호환성을위한 편의를 위해 정적 분석을 통해 지정된 내보내기를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db0a58857ea8172591d17a349d053d1cf051d60f" translate="yes" xml:space="preserve">
          <source>When importing a CommonJS module, it can be reliably imported using the ES module default import or its corresponding sugar syntax:</source>
          <target state="translated">CommonJS 모듈을 가져올 때 ES 모듈 기본 가져 오기 또는 해당하는 설탕 구문을 사용하여 안정적으로 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc3b5f795fe89b94678eaec7d3231cbad8bf6c33" translate="yes" xml:space="preserve">
          <source>When in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters.</source>
          <target state="translated">원시 모드에서 입력은 수정자를 포함하지 않고 항상 문자 단위로 사용할 수 있습니다. 또한 입력 문자 반향을 포함하여 터미널에 의한 모든 특수 문자 처리가 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="e9ddcbd7ac9a3379f4508938d4baf9617576b349" translate="yes" xml:space="preserve">
          <source>When in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters. &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt; will no longer cause a &lt;code&gt;SIGINT&lt;/code&gt; when in this mode.</source>
          <target state="translated">원시 모드 인 경우 수정자를 포함하지 않고 문자별로 항상 입력을 사용할 수 있습니다. 또한 반향 입력 문자를 포함하여 터미널에서 문자의 모든 특수 처리를 사용할 수 없습니다. &lt;code&gt;CTRL&lt;/code&gt; 이 모드에서 CTRL + &lt;code&gt;C&lt;/code&gt; 는 더 이상 &lt;code&gt;SIGINT&lt;/code&gt; 를 발생시키지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="cd0a26ba226713539b41536c16abf31af0d2cd2d" translate="yes" xml:space="preserve">
          <source>When iterating over &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt;, flags will appear only &lt;em&gt;once&lt;/em&gt;; each will begin with one or more dashes. Flags passed through to V8 will contain underscores instead of non-leading dashes:</source>
          <target state="translated">반복 할 때 &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; 를 플래그는 &lt;em&gt;한 번만&lt;/em&gt; 나타납니다 . 각각 하나 이상의 대시로 시작합니다. V8에 전달 된 플래그에는 비대시 대시 대신 밑줄이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e74d2be5a7317a9ec278704eed362d45bd75d40b" translate="yes" xml:space="preserve">
          <source>When listening as a server, if a packet is received from a blocked address, the packet will be ignored.</source>
          <target state="translated">서버로 수신 할 때 차단 된 주소에서 패킷이 수신되면 패킷이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="152f4ff941bc3f806360985c462b440ec7b21293" translate="yes" xml:space="preserve">
          <source>When loading resources the entire URL must match including search parameters and hash fragment. &lt;code&gt;./a.js?b&lt;/code&gt; will not be used when attempting to load &lt;code&gt;./a.js&lt;/code&gt; and vice versa.</source>
          <target state="translated">리소스를로드 할 때 검색 매개 변수 및 해시 조각을 포함하여 전체 URL이 일치해야합니다. &lt;code&gt;./a.js?b&lt;/code&gt; 는 로드 할 때 사용되지 않습니다 &lt;code&gt;./a.js&lt;/code&gt; 반대의 경우도 마찬가지.</target>
        </trans-unit>
        <trans-unit id="aa04f5cf4c0a06d2c3131d5e120108e37b37f3ff" translate="yes" xml:space="preserve">
          <source>When looking for the CommonJS modules that have required the current one, &lt;code&gt;require.cache&lt;/code&gt; and &lt;code&gt;module.children&lt;/code&gt; can be used:</source>
          <target state="translated">현재 모듈이 필요한 CommonJS 모듈을 찾을 때 &lt;code&gt;require.cache&lt;/code&gt; 및 &lt;code&gt;module.children&lt;/code&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e88de394e67150d9975fd970bf780f1247bdc0e" translate="yes" xml:space="preserve">
          <source>When multi-line input is being entered, an ellipsis is printed rather than the 'prompt'.</source>
          <target state="translated">여러 줄 입력을 입력하면 '프롬프트'대신 줄임표가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="da3fdcb3773839fe853004d32c8734d9ff43b77b" translate="yes" xml:space="preserve">
          <source>When multiple calls to &lt;code&gt;setImmediate()&lt;/code&gt; are made, the &lt;code&gt;callback&lt;/code&gt; functions are queued for execution in the order in which they are created. The entire callback queue is processed every event loop iteration. If an immediate timer is queued from inside an executing callback, that timer will not be triggered until the next event loop iteration.</source>
          <target state="translated">&lt;code&gt;setImmediate()&lt;/code&gt; 를 여러 번 호출 할 때 하면 &lt;code&gt;callback&lt;/code&gt; 함수가 작성된 순서대로 실행 대기됩니다. 전체 콜백 큐는 모든 이벤트 루프 반복마다 처리됩니다. 실행중인 콜백 내부에서 즉시 타이머가 대기열에 있으면 다음 이벤트 루프 반복까지 해당 타이머가 트리거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="798ac8eedc938f74e1db139185f92862c77691f3" translate="yes" xml:space="preserve">
          <source>When multiple, sequential path segment separation characters are found (e.g. &lt;code&gt;/&lt;/code&gt; on POSIX and either &lt;code&gt;\&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt; on Windows), they are replaced by a single instance of the platform-specific path segment separator (&lt;code&gt;/&lt;/code&gt; on POSIX and &lt;code&gt;\&lt;/code&gt; on Windows). Trailing separators are preserved.</source>
          <target state="translated">여러 순차적 인 경로 세그먼트 분리 문자 (예를 발견 할 때 &lt;code&gt;/&lt;/code&gt; POSIX와 중 &lt;code&gt;\&lt;/code&gt; 또는 &lt;code&gt;/&lt;/code&gt; Windows에서), 그들은 플랫폼 별 경로 세그먼트 분리의 단일 인스턴스 (로 대체됩니다 &lt;code&gt;/&lt;/code&gt; 에 POSIX 및 &lt;code&gt;\&lt;/code&gt; Windows의 경우). 후행 구분 기호가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="33339c7accc5eb5c867d93f62942b6b1c37dab1e" translate="yes" xml:space="preserve">
          <source>When negotiating TLS-PSK (pre-shared keys), this function is called with optional identity &lt;code&gt;hint&lt;/code&gt; provided by the server or &lt;code&gt;null&lt;/code&gt; in case of TLS 1.3 where &lt;code&gt;hint&lt;/code&gt; was removed. It will be necessary to provide a custom &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; for the connection as the default one will try to check host name/IP of the server against the certificate but that's not applicable for PSK because there won't be a certificate present. More information can be found in the &lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC 4279&lt;/a&gt;.</source>
          <target state="translated">TLS-PSK (사전 공유 키)를 협상 할 때이 함수는 서버에서 제공하는 선택적 ID &lt;code&gt;hint&lt;/code&gt; 또는 &lt;code&gt;hint&lt;/code&gt; 가 제거 된 TLS 1.3의 경우 &lt;code&gt;null&lt;/code&gt; 로 호출 됩니다. 연결에 대한 사용자 지정 &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; 를 제공해야 합니다. 기본 연결은 인증서에 대해 서버의 호스트 이름 / IP를 확인하려고 시도하지만 인증서가 없기 때문에 PSK에는 적용되지 않습니다. 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC 4279&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d0d09a9388f0d0382aca9117ad64b6468d50a91" translate="yes" xml:space="preserve">
          <source>When negotiating TLS-PSK (pre-shared keys), this function is called with the identity provided by the client. If the return value is &lt;code&gt;null&lt;/code&gt; the negotiation process will stop and an &quot;unknown_psk_identity&quot; alert message will be sent to the other party. If the server wishes to hide the fact that the PSK identity was not known, the callback must provide some random data as &lt;code&gt;psk&lt;/code&gt; to make the connection fail with &quot;decrypt_error&quot; before negotiation is finished. PSK ciphers are disabled by default, and using TLS-PSK thus requires explicitly specifying a cipher suite with the &lt;code&gt;ciphers&lt;/code&gt; option. More information can be found in the &lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC 4279&lt;/a&gt;.</source>
          <target state="translated">TLS-PSK (사전 공유 키)를 협상 할 때이 함수는 클라이언트가 제공 한 ID로 호출됩니다. 반환 값이 &lt;code&gt;null&lt;/code&gt; 이면 협상 프로세스가 중지되고 &quot;unknown_psk_identity&quot;경고 메시지가 상대방에게 전송됩니다. 서버가 PSK ID가 알려지지 않았다는 사실을 숨기려는 경우 콜백은 협상이 완료되기 전에 &quot;decrypt_error&quot;와 함께 연결이 실패하도록 &lt;code&gt;psk&lt;/code&gt; 로 임의의 데이터를 제공해야합니다 . PSK 암호는 기본적으로 비활성화되어 있으므로 TLS-PSK를 사용하려면 &lt;code&gt;ciphers&lt;/code&gt; 옵션을 사용하여 암호 제품군을 명시 적으로 지정해야합니다 . 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC 4279&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="04c7d9678da6dfcd3add1c63322a588714097a94" translate="yes" xml:space="preserve">
          <source>When nesting scopes, there are cases where a handle from an inner scope needs to live beyond the lifespan of that scope. N-API supports an 'escapable scope' in order to support this case. An escapable scope allows one handle to be 'promoted' so that it 'escapes' the current scope and the lifespan of the handle changes from the current scope to that of the outer scope.</source>
          <target state="translated">범위를 중첩 할 때 내부 범위의 핸들이 해당 범위의 수명을 넘어 살아야하는 경우가 있습니다. N-API는이 경우를 지원하기 위해 '탈착식 범위'를 지원합니다. 이스케이프 가능한 범위는 하나의 핸들을 '프로모션'하여 현재 범위를 '탈출'하고 핸들의 수명이 현재 범위에서 외부 범위의 수명으로 변경되도록합니다.</target>
        </trans-unit>
        <trans-unit id="1ac9efff7e0ed2baf0cde15422c85d12b4cfa7e9" translate="yes" xml:space="preserve">
          <source>When non-ASCII characters appear within a host name, the host name is encoded using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm. Note, however, that a host name &lt;em&gt;may&lt;/em&gt; contain &lt;em&gt;both&lt;/em&gt; Punycode encoded and percent-encoded characters:</source>
          <target state="translated">비 ASCII 문자가 호스트 이름에 나타나면 호스트 이름은 &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; 알고리즘을 사용하여 인코딩됩니다 . 그러나 호스트 이름 에는 퓨니 코드로 인코딩 된 문자와 퍼센트로 인코딩 된 문자 가 &lt;em&gt;모두&lt;/em&gt; 포함될 &lt;em&gt;수&lt;/em&gt; 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10235144f1c4270cc259caf923559f1488e62e3a" translate="yes" xml:space="preserve">
          <source>When non-ASCII characters appear within a hostname, the hostname is encoded using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm. Note, however, that a hostname &lt;em&gt;may&lt;/em&gt; contain &lt;em&gt;both&lt;/em&gt; Punycode encoded and percent-encoded characters:</source>
          <target state="translated">비 ASCII 문자가 호스트 이름 내에 나타나면 호스트 이름은 &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; 알고리즘을 사용하여 인코딩됩니다 . 그러나 호스트 이름 에는 &lt;em&gt;두 가지 모두 &lt;/em&gt;&lt;em&gt;가&lt;/em&gt; 포함될 &lt;em&gt;수&lt;/em&gt; 있습니다.&lt;em&gt;&lt;/em&gt; Punycode로 인코딩 된 문자와 퍼센트로 인코딩 된 문자 .</target>
        </trans-unit>
        <trans-unit id="0a421b9c16e5b3e7316b0d634726cc34111fd19c" translate="yes" xml:space="preserve">
          <source>When not using N-API, implementing Addons is complicated, involving knowledge of several components and APIs:</source>
          <target state="translated">N-API를 사용하지 않는 경우 몇 가지 구성 요소 및 API에 대한 지식이 포함 된 애드온 구현이 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="b75365dd456e2085d1af3e62e1e9c9ca89f8f54f" translate="yes" xml:space="preserve">
          <source>When not using N-API, implementing addons is complicated, involving knowledge of several components and APIs:</source>
          <target state="translated">N-API를 사용하지 않는 경우 애드온 구현은 복잡하며 여러 구성 요소 및 API에 대한 지식을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="b9264aa00cdf70e8036e90c5dcb862b3e0cf826b" translate="yes" xml:space="preserve">
          <source>When operating on file handles, the mode cannot be changed from what it was set to with &lt;a href=&quot;#fs_fspromises_open_path_flags_mode&quot;&gt;&lt;code&gt;fsPromises.open()&lt;/code&gt;&lt;/a&gt;. Therefore, this is equivalent to &lt;a href=&quot;#fs_filehandle_writefile_data_options&quot;&gt;&lt;code&gt;filehandle.writeFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일 핸들에서 작업 할 때 모드는 &lt;a href=&quot;#fs_fspromises_open_path_flags_mode&quot;&gt; &lt;code&gt;fsPromises.open()&lt;/code&gt; &lt;/a&gt; 으로 설정된 모드에서 변경할 수 없습니다 . 따라서 이것은 &lt;a href=&quot;#fs_filehandle_writefile_data_options&quot;&gt; &lt;code&gt;filehandle.writeFile()&lt;/code&gt; &lt;/a&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="7403bcfa35b1ae51039252b3f7bbba8a1bd6482b" translate="yes" xml:space="preserve">
          <source>When passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to &lt;code&gt;setAAD()&lt;/code&gt; via the &lt;code&gt;plaintextLength&lt;/code&gt; option. Many crypto libraries include the authentication tag in the ciphertext, which means that they produce ciphertexts of the length &lt;code&gt;plaintextLength + authTagLength&lt;/code&gt;. Node.js does not include the authentication tag, so the ciphertext length is always &lt;code&gt;plaintextLength&lt;/code&gt;. This is not necessary if no AAD is used.</source>
          <target state="translated">추가 인증 데이터 (AAD)를 전달할 때 바이트 단위의 실제 메시지 길이 는 &lt;code&gt;plaintextLength&lt;/code&gt; 옵션을 통해 &lt;code&gt;setAAD()&lt;/code&gt; 전달되어야합니다 . 많은 암호화 라이브러리에는 암호문에 인증 태그가 포함되어 있습니다. 즉, &lt;code&gt;plaintextLength + authTagLength&lt;/code&gt; 길이의 암호문을 생성 합니다. Node.js에는 인증 태그가 포함되어 있지 않으므로 암호문 길이는 항상 &lt;code&gt;plaintextLength&lt;/code&gt; 입니다. AAD를 사용하지 않는 경우에는 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8683bab3670783f3e04b5996df01e0d7dd2896d5" translate="yes" xml:space="preserve">
          <source>When passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to &lt;code&gt;setAAD()&lt;/code&gt; via the &lt;code&gt;plaintextLength&lt;/code&gt; option. This is not necessary if no AAD is used.</source>
          <target state="translated">추가 인증 데이터 (AAD)를 전달할 때 실제 메시지 길이 (바이트 &lt;code&gt;setAAD()&lt;/code&gt; 는 &lt;code&gt;plaintextLength&lt;/code&gt; 를 통해 setAAD () 로 전달되어야합니다. 옵션을 . AAD를 사용하지 않는 경우에는 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9ba341ca5199ac44852abeb44a5301af661ece2d" translate="yes" xml:space="preserve">
          <source>When providing properties to the &lt;code&gt;pathObject&lt;/code&gt; remember that there are combinations where one property has priority over another:</source>
          <target state="translated">&lt;code&gt;pathObject&lt;/code&gt; 에 속성을 제공 할 때 한 속성이 다른 속성보다 우선 순위가 높은 조합이 있음을 기억하십시오.</target>
        </trans-unit>
        <trans-unit id="cec04fbd71c75ae41d540467b94b25559cc93156" translate="yes" xml:space="preserve">
          <source>When running Node.js, custom user conditions can be added with the &lt;code&gt;--conditions&lt;/code&gt; flag:</source>
          <target state="translated">Node.js를 실행할 때 &lt;code&gt;--conditions&lt;/code&gt; 플래그를 사용하여 사용자 지정 사용자 조건을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0944cac5b42f3c2ff1100fac2f3b7a8f1fc8ea80" translate="yes" xml:space="preserve">
          <source>When running as the server, the socket will be destroyed with an error after &lt;code&gt;handshakeTimeout&lt;/code&gt; timeout.</source>
          <target state="translated">서버로 실행할 때 &lt;code&gt;handshakeTimeout&lt;/code&gt; 후 소켓이 오류와 함께 파괴됩니다 시간 초과 .</target>
        </trans-unit>
        <trans-unit id="3e15b5e8110d7e4311accf450e570804ba7780a4" translate="yes" xml:space="preserve">
          <source>When sending request through a keep-alive enabled agent, the underlying socket might be reused. But if server closes connection at unfortunate time, client may run into a 'ECONNRESET' error.</source>
          <target state="translated">연결 유지 사용 에이전트를 통해 요청을 보낼 때 기본 소켓이 재사용 될 수 있습니다. 그러나 서버가 불행한 시간에 연결을 닫으면 클라이언트에서 'ECONNRESET'오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19afa335a5a1a42b34eda8c5c3d35d2ff56880d3" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, emit pending deprecation warnings.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; 로 설정되면 보류중인 사용 중단 경고가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9967655ab23757c342e087c9abcca7e897cc09b4" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, instructs the module loader to preserve symbolic links when resolving and caching modules.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; 로 설정되면 모듈을 해석하고 캐싱 할 때 모듈 로더가 기호 링크를 유지하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="69eba8f2f8e4e897994fbb45673663b7f28cc8f9" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, process warnings are silenced.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; 로 설정되면 프로세스 경고가 침묵됩니다.</target>
        </trans-unit>
        <trans-unit id="fc9e5b7fcfaf3f43b575085ed7b886c4b43ff254" translate="yes" xml:space="preserve">
          <source>When set, Node.js will begin outputting &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript code coverage&lt;/a&gt; and &lt;a href=&quot;https://sourcemaps.info/spec.html&quot;&gt;Source Map&lt;/a&gt; data to the directory provided as an argument (coverage information is written as JSON to files with a &lt;code&gt;coverage&lt;/code&gt; prefix).</source>
          <target state="translated">설정되면 Node.js는 &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript 코드 커버리지&lt;/a&gt; 및 &lt;a href=&quot;https://sourcemaps.info/spec.html&quot;&gt;소스 맵&lt;/a&gt; 데이터를 인수로 제공된 디렉토리에 출력하기 시작합니다 (커버리지 정보는 &lt;code&gt;coverage&lt;/code&gt; 접두사 가있는 파일에 JSON으로 기록됨 ).</target>
        </trans-unit>
        <trans-unit id="4676881586437aa22ae98370e5573441d068f144" translate="yes" xml:space="preserve">
          <source>When set, Node.js will begin outputting &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript code coverage&lt;/a&gt; to the directory provided as an argument. Coverage is output as an array of &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/tot/Profiler#type-ScriptCoverage&quot;&gt;ScriptCoverage&lt;/a&gt; objects:</source>
          <target state="translated">설정되면 Node.js는 인수로 제공된 디렉토리에 &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript 코드 적용 범위&lt;/a&gt; 를 출력하기 시작합니다 . 적용 범위는 &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/tot/Profiler#type-ScriptCoverage&quot;&gt;ScriptCoverage&lt;/a&gt; 객체 의 배열로 출력됩니다 .</target>
        </trans-unit>
        <trans-unit id="43bc494caa00b16fbe479ff6c1a8ba8a4a01ffcf" translate="yes" xml:space="preserve">
          <source>When set, a memory file mapping is used to access the file. This flag is available on Windows operating systems only. On other operating systems, this flag is ignored.</source>
          <target state="translated">설정되면 메모리 파일 매핑이 파일에 액세스하는 데 사용됩니다. 이 플래그는 Windows 운영 체제에서만 사용할 수 있습니다. 다른 운영 체제에서는이 플래그가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e9ad737be96822ad9acfdd2cb175b36332328f41" translate="yes" xml:space="preserve">
          <source>When set, an attempt will be made to minimize caching effects of file I/O.</source>
          <target state="translated">설정되면 파일 I / O의 캐싱 효과를 최소화하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="c2ae5aecd16350b5fc32d69e0be29e2779f212ba" translate="yes" xml:space="preserve">
          <source>When set, colors will not be used in the REPL.</source>
          <target state="translated">설정하면 REPL에서 색상이 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8933a68a9c2d796954f82edce5bf021ad21802b1" translate="yes" xml:space="preserve">
          <source>When set, process warnings will be emitted to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead. This is equivalent to using the &lt;code&gt;--redirect-warnings=file&lt;/code&gt; command-line flag.</source>
          <target state="translated">설정되면 프로세스 경고가 stderr로 인쇄하는 대신 지정된 파일로 생성됩니다. 파일이 없으면 작성되고 파일이 있으면 추가됩니다. 경고를 파일에 쓰는 중 오류가 발생하면 대신 경고가 stderr에 기록됩니다. 이것은 &lt;code&gt;--redirect-warnings=file&lt;/code&gt; 명령 줄 플래그 .</target>
        </trans-unit>
        <trans-unit id="cc0c1ee3850dee15dcc0b864f7be858c91b16927" translate="yes" xml:space="preserve">
          <source>When set, the well known &quot;root&quot; CAs (like VeriSign) will be extended with the extra certificates in &lt;code&gt;file&lt;/code&gt;. The file should consist of one or more trusted certificates in PEM format. A message will be emitted (once) with &lt;a href=&quot;process#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;process.emitWarning()&lt;/code&gt;&lt;/a&gt; if the file is missing or malformed, but any errors are otherwise ignored.</source>
          <target state="translated">설정하면 잘 알려진 &quot;루트&quot;CA (예 : VeriSign)가 &lt;code&gt;file&lt;/code&gt; 의 추가 인증서로 확장 됩니다 . 파일은 PEM 형식의 하나 이상의 신뢰할 수있는 인증서로 구성되어야합니다. 파일이 없거나 변형 된 경우 &lt;a href=&quot;process#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;process.emitWarning()&lt;/code&gt; &lt;/a&gt; 사용하여 메시지가 한 번 생성 되지만 오류는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f7c6e4d2978ec1bf438db14a2c184e3b7c1012e0" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;byteOffset&lt;/code&gt; in &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; or sometimes when allocating a buffer smaller than &lt;code&gt;Buffer.poolSize&lt;/code&gt; the buffer doesn't start from a zero offset on the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">설정시 &lt;code&gt;byteOffset&lt;/code&gt; 에 &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; A는보다 작은 버퍼를 할당 할 때 때로는 또는 &lt;code&gt;Buffer.poolSize&lt;/code&gt; 버퍼는 기본 오프셋 제로에서 시작하지 않는 &lt;code&gt;ArrayBuffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f7cfcbc6e6fdd528d5cb04ee742b42d07cf59f4" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;byteOffset&lt;/code&gt; in &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt;, or sometimes when allocating a &lt;code&gt;Buffer&lt;/code&gt; smaller than &lt;code&gt;Buffer.poolSize&lt;/code&gt;, the buffer does not start from a zero offset on the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">설정시 &lt;code&gt;byteOffset&lt;/code&gt; 에 &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; 할당 할 때 때때로, 또는 &lt;code&gt;Buffer&lt;/code&gt; 보다 작은 &lt;code&gt;Buffer.poolSize&lt;/code&gt; 를 , 버퍼는 기본 오프셋 제로에서 시작하지 않는 &lt;code&gt;ArrayBuffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="085c71302b8f2176512c80177d18f67801dc5d7e" translate="yes" xml:space="preserve">
          <source>When setting the priority for an HTTP/2 stream, the stream may be marked as a dependency for a parent stream. This error code is used when an attempt is made to mark a stream and dependent of itself.</source>
          <target state="translated">HTTP / 2 스트림의 우선 순위를 설정할 때 스트림이 상위 스트림의 종속성으로 표시 될 수 있습니다. 이 오류 코드는 스트림을 표시하려고하고 자체에 종속 될 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a923dc95c051ae3fd873a26d6090eee9433803c1" translate="yes" xml:space="preserve">
          <source>When sharing a UDP socket across multiple &lt;code&gt;cluster&lt;/code&gt; workers, the &lt;code&gt;socket.addMembership()&lt;/code&gt; function must be called only once or an &lt;code&gt;EADDRINUSE&lt;/code&gt; error will occur:</source>
          <target state="translated">여러 &lt;code&gt;cluster&lt;/code&gt; 작업자 간에 UDP 소켓을 공유하는 경우 &lt;code&gt;socket.addMembership()&lt;/code&gt; 함수를 한 번만 호출해야합니다. 그렇지 않으면 &lt;code&gt;EADDRINUSE&lt;/code&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c4b3b4a6b2873bb41380ccce7474b29f9a36d610" translate="yes" xml:space="preserve">
          <source>When string data is stored in or extracted out of a &lt;code&gt;Buffer&lt;/code&gt; instance, a character encoding may be specified.</source>
          <target state="translated">문자열 데이터가 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스에 저장되거나 추출 될 때 문자 인코딩이 지정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f00737601b54a24483d073d129fba80a4c04bdc" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field is defined, all subpaths of the package are encapsulated and no longer available to importers. For example, &lt;code&gt;require('pkg/subpath.js')&lt;/code&gt; throws an &lt;a href=&quot;errors#errors_err_package_path_not_exported&quot;&gt;&lt;code&gt;ERR_PACKAGE_PATH_NOT_EXPORTED&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">때 &lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt; 필드가 정의, 패키지의 모든 서브 패스는 캡슐화하지 않고 수입을 더 이상 사용할 수있다. 예를 들어 &lt;code&gt;require('pkg/subpath.js')&lt;/code&gt; 는 &lt;a href=&quot;errors#errors_err_package_path_not_exported&quot;&gt; &lt;code&gt;ERR_PACKAGE_PATH_NOT_EXPORTED&lt;/code&gt; &lt;/a&gt; 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="a0a3c28f7d09722c63135541dd0b7a96ff34d1c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;'clientError'&lt;/code&gt; event occurs, there is no &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;response&lt;/code&gt; object, so any HTTP response sent, including response headers and payload, &lt;em&gt;must&lt;/em&gt; be written directly to the &lt;code&gt;socket&lt;/code&gt; object. Care must be taken to ensure the response is a properly formatted HTTP response message.</source>
          <target state="translated">때 &lt;code&gt;'clientError'&lt;/code&gt; 이벤트가 발생, 더 없다 &lt;code&gt;request&lt;/code&gt; 또는 &lt;code&gt;response&lt;/code&gt; 오브젝트는 HTTP 응답이 응답 헤더와 페이로드를 포함하여 전송하므로, &lt;em&gt;해야한다&lt;/em&gt; 에 직접 기록 할 &lt;code&gt;socket&lt;/code&gt; 객체입니다. 응답이 올바른 형식의 HTTP 응답 메시지인지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="46722ab714bf122284c53952ac05784c4ed481c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;'exit'&lt;/code&gt; event is triggered, child process stdio streams might still be open.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; 이벤트가 트리거 될 때 하위 프로세스 stdio 스트림이 여전히 열려있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae71290bea971b38db44d801b8804d4b598df24d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;--experimental-json-modules&lt;/code&gt; flag is included, both the &lt;code&gt;commonjs&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; mode use the new experimental JSON loader. The imported JSON only exposes a &lt;code&gt;default&lt;/code&gt;. There is no support for named exports. A cache entry is created in the CommonJS cache to avoid duplication. The same object is returned in CommonJS if the JSON module has already been imported from the same path.</source>
          <target state="translated">때 &lt;code&gt;--experimental-json-modules&lt;/code&gt; 플래그가 모두 포함되어 &lt;code&gt;commonjs&lt;/code&gt; 및 &lt;code&gt;module&lt;/code&gt; 모드를 사용하여 새로운 실험 JSON 로더. 가져온 JSON은 &lt;code&gt;default&lt;/code&gt; . 명명 된 내보내기는 지원되지 않습니다. 중복을 피하기 위해 CommonJS 캐시에 캐시 항목이 작성됩니다. JSON 모듈이 이미 동일한 경로에서 가져온 경우 CommonJS에서 동일한 객체가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="9963a38aa2feb80593cf79934ad0090b99243136" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;EventEmitter&lt;/code&gt; object emits an event, all of the functions attached to that specific event are called &lt;em&gt;synchronously&lt;/em&gt;. Any values returned by the called listeners are &lt;em&gt;ignored&lt;/em&gt; and discarded.</source>
          <target state="translated">때 &lt;code&gt;EventEmitter&lt;/code&gt; 의 객체가 이벤트를 방출, 특정 이벤트에 연결된 모든 기능이라고 &lt;em&gt;기적&lt;/em&gt; . 호출 된 리스너가 반환 한 모든 값은 &lt;em&gt;무시&lt;/em&gt; 되고 버려집니다.</target>
        </trans-unit>
        <trans-unit id="426682a4550b69dd0a79aa54c6bda8543efe9bc9" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;EventEmitter&lt;/code&gt; object emits an event, all of the functions attached to that specific event are called &lt;em&gt;synchronously&lt;/em&gt;. Any values returned by the called listeners are &lt;em&gt;ignored&lt;/em&gt; and will be discarded.</source>
          <target state="translated">때 &lt;code&gt;EventEmitter&lt;/code&gt; 의 객체가 이벤트를 방출, 특정 이벤트에 연결된 모든 기능이라고 &lt;em&gt;기적&lt;/em&gt; . 호출 된 리스너가 리턴 한 값은 &lt;em&gt;무시&lt;/em&gt; 되며 버려집니다.</target>
        </trans-unit>
        <trans-unit id="9335ae09cb81077658802cf50fdbfc1ca1ad08cf" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Http2Stream&lt;/code&gt; instance is destroyed, the &lt;code&gt;'close'&lt;/code&gt; event will be emitted. Because &lt;code&gt;Http2Stream&lt;/code&gt; is an instance of &lt;code&gt;stream.Duplex&lt;/code&gt;, the &lt;code&gt;'end'&lt;/code&gt; event will also be emitted if the stream data is currently flowing. The &lt;code&gt;'error'&lt;/code&gt; event may also be emitted if &lt;code&gt;http2stream.destroy()&lt;/code&gt; was called with an &lt;code&gt;Error&lt;/code&gt; passed as the first argument.</source>
          <target state="translated">때 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스가 파괴되면, &lt;code&gt;'close'&lt;/code&gt; 이벤트가 방출됩니다. 때문에 &lt;code&gt;Http2Stream&lt;/code&gt; 가 의 인스턴스 &lt;code&gt;stream.Duplex&lt;/code&gt; 상기 &lt;code&gt;'end'&lt;/code&gt; 이벤트는 데이터 스트림은 유입되면 방출된다. &lt;code&gt;'error'&lt;/code&gt; 이벤트는 경우 방출 될 수 &lt;code&gt;http2stream.destroy()&lt;/code&gt; 호출되었습니다 &lt;code&gt;Error&lt;/code&gt; 첫 번째 인수로 전달.</target>
        </trans-unit>
        <trans-unit id="67505530725409fba9c4758f50e5cd65e987bcc3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Readable&lt;/code&gt; is operating in flowing mode, the data added with &lt;code&gt;readable.push()&lt;/code&gt; will be delivered by emitting a &lt;code&gt;'data'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; 이 흐름 모드에서 작동 하면 &lt;code&gt;readable.push()&lt;/code&gt; 추가 된 데이터 발광에 의해 전달 될 &lt;code&gt;'data'&lt;/code&gt; 이벤트.</target>
        </trans-unit>
        <trans-unit id="c739d18f886c043c152b5e0e4e291d65429b3771" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Readable&lt;/code&gt; is operating in paused mode, the data added with &lt;code&gt;readable.push()&lt;/code&gt; can be read out by calling the &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt; method when the &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">때 &lt;code&gt;Readable&lt;/code&gt; 일시 정지 모드에서 작동하고, 첨가 된 데이터 &lt;code&gt;readable.push()&lt;/code&gt; 호출에 의해 판독 될 수 &lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;readable.read()&lt;/code&gt; &lt;/a&gt; 때 방법을 &lt;a href=&quot;#stream_event_readable&quot;&gt; &lt;code&gt;'readable'&lt;/code&gt; &lt;/a&gt; 이벤트가 방출된다.</target>
        </trans-unit>
        <trans-unit id="c93b11ec833bbc0f705edd63f5118a1273fee958" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;module.exports&lt;/code&gt; property is being completely replaced by a new object, it is common to also reassign &lt;code&gt;exports&lt;/code&gt;:</source>
          <target state="translated">때 &lt;code&gt;module.exports&lt;/code&gt; 의 속성이 완전히 새로운 객체로 대체되고, 또한 재 할당에 공통 &lt;code&gt;exports&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="eb83f1239982a95be7fd015fe27103105cb812e7" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;options.waitForTrailers&lt;/code&gt; option is set, the &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted immediately after queuing the last chunk of payload data to be sent. The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method can then be called to send trailing headers to the peer.</source>
          <target state="translated">때 &lt;code&gt;options.waitForTrailers&lt;/code&gt; 의 옵션이 설정되어 &lt;code&gt;'wantTrailers'&lt;/code&gt; 이벤트가 전송 될 페이로드 데이터의 마지막 덩어리를 대기 후 즉시 방출된다. 그런 다음 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; 메소드를 호출하여 후행 헤더를 피어로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ffadd51efd23bab12b01de439947d260bc199f3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;options.waitForTrailers&lt;/code&gt; option is set, the &lt;code&gt;'wantTrailers'&lt;/code&gt; event will be emitted immediately after queuing the last chunk of payload data to be sent. The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method can then be used to sent trailing header fields to the peer.</source>
          <target state="translated">때 &lt;code&gt;options.waitForTrailers&lt;/code&gt; 의 옵션이 설정되어 &lt;code&gt;'wantTrailers'&lt;/code&gt; 이벤트가 전송 될 페이로드 데이터의 마지막 덩어리를 대기 후 즉시 방출됩니다. 그런 다음 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; 메소드를 사용하여 후행 헤더 필드를 피어로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5c32a70dad0d7767f357bc2634db83528bf93d5" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;path&lt;/code&gt; is a directory, the behavior of &lt;code&gt;fsPromises.readFile()&lt;/code&gt; is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned.</source>
          <target state="translated">때 &lt;code&gt;path&lt;/code&gt; 디렉토리의 동작입니다 &lt;code&gt;fsPromises.readFile()&lt;/code&gt; 플랫폼 별이다. macOS, Linux 및 Windows에서는 약속이 오류와 함께 거부됩니다. FreeBSD에서는 디렉토리 내용의 표현이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="0620756c2aebd9c4bc3154b06ffe2566efb57b85" translate="yes" xml:space="preserve">
          <source>When the child process is a Node.js instance (e.g. spawned using &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;process.disconnect()&lt;/code&gt; method can be invoked within the child process to close the IPC channel as well.</source>
          <target state="translated">자식 프로세스가 Node.js 인스턴스 (예 : &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; 사용하여 생성 ) 인 경우 자식 프로세스 내에서 &lt;code&gt;process.disconnect()&lt;/code&gt; 메서드를 호출하여 IPC 채널을 닫을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="25fac66347fd0ed458017f12238e9c5ff50ec269" translate="yes" xml:space="preserve">
          <source>When the code in the &lt;code&gt;foo&lt;/code&gt; package does &lt;code&gt;require('bar')&lt;/code&gt;, it will get the version that is symlinked into &lt;code&gt;/usr/lib/node/foo/1.2.3/node_modules/bar&lt;/code&gt;. Then, when the code in the &lt;code&gt;bar&lt;/code&gt; package calls &lt;code&gt;require('quux')&lt;/code&gt;, it'll get the version that is symlinked into &lt;code&gt;/usr/lib/node/bar/4.3.2/node_modules/quux&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 패키지 의 코드 가 &lt;code&gt;require('bar')&lt;/code&gt; 를 수행하면 &lt;code&gt;/usr/lib/node/foo/1.2.3/node_modules/bar&lt;/code&gt; 로 심볼릭 링크 된 버전을 가져옵니다 . 그런 다음 &lt;code&gt;bar&lt;/code&gt; 패키지 의 코드 가 &lt;code&gt;require('quux')&lt;/code&gt; 를 호출 하면 &lt;code&gt;/usr/lib/node/bar/4.3.2/node_modules/quux&lt;/code&gt; 로 심볼릭 링크 된 버전을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="cd46976fb0354327dc13a6ec7685b60dc19749f9" translate="yes" xml:space="preserve">
          <source>When the connection is established, a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted on the returned socket. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="translated">연결이 설정되면 반환 된 소켓 에서 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트가 발생합니다. 제공된 경우 마지막 매개 변수 &lt;code&gt;connectListener&lt;/code&gt; 가 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트 의 리스너로 &lt;strong&gt;한 번 추가&lt;/strong&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="cfa09effef8afe3e66a0a81273124da1b75d2f40" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;vm.createContext()&lt;/code&gt; is called, the &lt;code&gt;contextObject&lt;/code&gt; argument (or a newly-created object if &lt;code&gt;contextObject&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;) is associated internally with a new instance of a V8 Context. This V8 Context provides the &lt;code&gt;code&lt;/code&gt; run using the &lt;code&gt;vm&lt;/code&gt; module's methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the &lt;code&gt;contextObject&lt;/code&gt; is what this document refers to as &quot;contextifying&quot; the object.</source>
          <target state="translated">&lt;code&gt;vm.createContext()&lt;/code&gt; 메서드 가 호출되면 &lt;code&gt;contextObject&lt;/code&gt; 인수 (또는 &lt;code&gt;contextObject&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 인 경우 새로 생성 된 객체 )가 내부적으로 V8 컨텍스트의 새 인스턴스와 연결됩니다. 이 V8 컨텍스트는 작동 할 수있는 격리 된 글로벌 환경에서 &lt;code&gt;vm&lt;/code&gt; 모듈의 메소드를 사용하여 실행 되는 &lt;code&gt;code&lt;/code&gt; 제공 합니다. V8 컨텍스트를 생성하고이를 &lt;code&gt;contextObject&lt;/code&gt; 와 연결하는 프로세스 는이 문서에서 객체를 &quot;컨텍스트 화&quot;하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="729d92164779ddba59574378cc26cf3a6d136c2c" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;vm.createContext()&lt;/code&gt; is called, the &lt;code&gt;sandbox&lt;/code&gt; object that is passed in (or a newly created object if &lt;code&gt;sandbox&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;) is associated internally with a new instance of a V8 Context. This V8 Context provides the &lt;code&gt;code&lt;/code&gt; run using the &lt;code&gt;vm&lt;/code&gt; module's methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the &lt;code&gt;sandbox&lt;/code&gt; object is what this document refers to as &quot;contextifying&quot; the &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vm.createContext()&lt;/code&gt; 메소드 가 호출되면 전달 된 &lt;code&gt;sandbox&lt;/code&gt; 오브젝트 (또는 &lt;code&gt;sandbox&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 경우 새로 작성된 오브젝트 )는 내부적으로 V8 컨텍스트의 새 인스턴스와 연관됩니다. 이 V8 컨텍스트는 &lt;code&gt;vm&lt;/code&gt; 모듈의 메소드를 사용하여 작동 할 수있는 격리 된 글로벌 환경으로 &lt;code&gt;code&lt;/code&gt; 실행을 제공 합니다. V8 엔진의 컨텍스트를 만들고과 연결하는 과정 &lt;code&gt;sandbox&lt;/code&gt; 객체는이 문서는 &quot;contextifying&quot;라고 말합니다 것입니다 &lt;code&gt;sandbox&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="01caadbe64330cc1819e53d479c1f2414ca0dd3c" translate="yes" xml:space="preserve">
          <source>When the path is a directory, the behavior of &lt;code&gt;fs.readFile()&lt;/code&gt; and &lt;a href=&quot;#fs_fs_readfilesync_path_options&quot;&gt;&lt;code&gt;fs.readFileSync()&lt;/code&gt;&lt;/a&gt; is platform-specific. On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned.</source>
          <target state="translated">경로가 디렉토리 인 경우 &lt;code&gt;fs.readFile()&lt;/code&gt; 및 &lt;a href=&quot;#fs_fs_readfilesync_path_options&quot;&gt; &lt;code&gt;fs.readFileSync()&lt;/code&gt; &lt;/a&gt; 은 플랫폼별로 다릅니다. macOS, Linux 및 Windows에서는 오류가 반환됩니다. FreeBSD에서는 디렉토리 내용의 표현이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="7d8a9e86b434a10cd051dc6d1f9ee3082f6619f5" translate="yes" xml:space="preserve">
          <source>When the process is about to exit, one last coverage will still be written to disk unless &lt;a href=&quot;#v8_v8_stopcoverage&quot;&gt;&lt;code&gt;v8.stopCoverage()&lt;/code&gt;&lt;/a&gt; is invoked before the process exits.</source>
          <target state="translated">프로세스가 종료 &lt;a href=&quot;#v8_v8_stopcoverage&quot;&gt; &lt;code&gt;v8.stopCoverage()&lt;/code&gt; &lt;/a&gt; 때 프로세스가 종료되기 전에 v8.stopCoverage () 가 호출 되지 않는 한 마지막 커버리지 하나가 디스크에 기록 됩니다.</target>
        </trans-unit>
        <trans-unit id="eba9274eddef14d7dda14e216ded1ef3a82c17c6" translate="yes" xml:space="preserve">
          <source>When the program is resumed using &lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt;&lt;code&gt;fg(1p)&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;'pause'&lt;/code&gt; and &lt;code&gt;'SIGCONT'&lt;/code&gt; events will be emitted. These can be used to resume the &lt;code&gt;input&lt;/code&gt; stream.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt; &lt;code&gt;fg(1p)&lt;/code&gt; &lt;/a&gt; 사용하여 프로그램을 재개 하면 &lt;code&gt;'pause'&lt;/code&gt; 및 &lt;code&gt;'SIGCONT'&lt;/code&gt; 이벤트가 생성됩니다. &lt;code&gt;input&lt;/code&gt; 스트림 을 재개하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="973f019c301a2f10546fdf95359798a8afd4304b" translate="yes" xml:space="preserve">
          <source>When there are circular &lt;code&gt;require()&lt;/code&gt; calls, a module might not have finished executing when it is returned.</source>
          <target state="translated">순환 &lt;code&gt;require()&lt;/code&gt; 호출이 있으면 모듈이 리턴 될 때 실행이 완료되지 않았을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a83856f569bf73cddb634b7c469e9e76c59c0d43" translate="yes" xml:space="preserve">
          <source>When these methods are invoked, the &lt;code&gt;data&lt;/code&gt; parameter passed will be the addon-provided &lt;code&gt;void*&lt;/code&gt; data that was passed into the &lt;code&gt;napi_create_async_work&lt;/code&gt; call.</source>
          <target state="translated">이러한 메소드가 호출되면 전달 된 &lt;code&gt;data&lt;/code&gt; 매개 변수 는 &lt;code&gt;napi_create_async_work&lt;/code&gt; 로 전달 된 애드온 제공 &lt;code&gt;void*&lt;/code&gt; 데이터입니다. 호출 .</target>
        </trans-unit>
        <trans-unit id="161d84962881869453298b631777f71cfe4e6b80" translate="yes" xml:space="preserve">
          <source>When they are disconnected all internal handles will be closed, allowing the master process to die gracefully if no other event is waiting.</source>
          <target state="translated">연결이 끊어지면 모든 내부 핸들이 닫히고 다른 이벤트가 대기하지 않으면 마스터 프로세스가 정상적으로 죽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="848bbfa33309d052a04b6c8cbbcac51e750f16d7" translate="yes" xml:space="preserve">
          <source>When this code is executed, the global &lt;code&gt;'m'&lt;/code&gt; variable can be modified but then reset to its initial value using the &lt;code&gt;.clear&lt;/code&gt; command:</source>
          <target state="translated">이 코드가 실행되면 전역 &lt;code&gt;'m'&lt;/code&gt; 변수를 수정할 수 있지만 &lt;code&gt;.clear&lt;/code&gt; 명령을 사용하여 초기 값으로 재설정합니다 .</target>
        </trans-unit>
        <trans-unit id="da17565ee00221d09a97209ab1ae2c18fb43a00e" translate="yes" xml:space="preserve">
          <source>When this event is emitted and handled, the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event will not be emitted.</source>
          <target state="translated">이 이벤트가 생성 및 처리되면 &lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d77c2e28b5e02c804db51a74809906188330f9e" translate="yes" xml:space="preserve">
          <source>When this event is emitted and handled, the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event will not be emitted.</source>
          <target state="translated">이 이벤트가 생성 및 처리되면 &lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ad65b9cecfc3a17f900491bb46a38e63a093e547" translate="yes" xml:space="preserve">
          <source>When this function is used, no &lt;code&gt;'message'&lt;/code&gt; event is emitted and the &lt;code&gt;onmessage&lt;/code&gt; listener is not invoked.</source>
          <target state="translated">이 함수를 사용하면 &lt;code&gt;'message'&lt;/code&gt; 이벤트가 발생 하지 않고 &lt;code&gt;onmessage&lt;/code&gt; 리스너가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c4bcc6914d3f458464403894a448ce8d2cfc0398" translate="yes" xml:space="preserve">
          <source>When this function is used, no &lt;code&gt;'message'&lt;/code&gt; event will be emitted and the &lt;code&gt;onmessage&lt;/code&gt; listener will not be invoked.</source>
          <target state="translated">이 기능을 사용하면 &lt;code&gt;'message'&lt;/code&gt; 이벤트가 발생 하지 않으며 &lt;code&gt;onmessage&lt;/code&gt; 리스너가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="daaa6a63bd85db242fbd1af931f53b55126de0a6" translate="yes" xml:space="preserve">
          <source>When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.</source>
          <target state="translated">true 인 경우, 날짜 헤더가 자동으로 생성되어 헤더에없는 경우 응답으로 전송됩니다. 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="73bbf108c7a0af560ba18bfbdfb275fa0bd25416" translate="yes" xml:space="preserve">
          <source>When used in another application:</source>
          <target state="translated">다른 응용 프로그램에서 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="7b3fa09a96ecdc067355bcc942d3a49a1906efe1" translate="yes" xml:space="preserve">
          <source>When used, the &lt;code&gt;Http2Stream&lt;/code&gt; object's &lt;code&gt;Duplex&lt;/code&gt; interface will be closed automatically.</source>
          <target state="translated">사용하면 &lt;code&gt;Http2Stream&lt;/code&gt; 객체의 &lt;code&gt;Duplex&lt;/code&gt; 인터페이스가 자동으로 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="a375a2e214a043804716201bc2ddc239ccd3b5de" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; to allocate new &lt;code&gt;Buffer&lt;/code&gt; instances, allocations under 4KB are sliced from a single pre-allocated &lt;code&gt;Buffer&lt;/code&gt;. This allows applications to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances. This approach improves both performance and memory usage by eliminating the need to track and clean up as many persistent objects.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 를 사용하여 새 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스를 할당하는 경우 4KB 미만의 할당은 단일 사전 할당 된 &lt;code&gt;Buffer&lt;/code&gt; 에서 슬라이스됩니다 . 이를 통해 애플리케이션은 개별적으로 할당 된 많은 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 를 작성하는 가비지 콜렉션 오버 헤드를 피할 수 있습니다 . 이 방법은 많은 영구 객체를 추적하고 정리할 필요가 없어 성능과 메모리 사용량을 모두 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="d8af369a122ff8d89a82762dba5d82286fd5b88b" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; to allocate new &lt;code&gt;Buffer&lt;/code&gt; instances, allocations under 4KB are sliced from a single pre-allocated &lt;code&gt;Buffer&lt;/code&gt;. This allows applications to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances. This approach improves both performance and memory usage by eliminating the need to track and clean up as many individual &lt;code&gt;ArrayBuffer&lt;/code&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 를 사용하여 새 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 를 할당 할 때 4KB 미만의 할당은 사전 할당 된 단일 &lt;code&gt;Buffer&lt;/code&gt; 에서 분리됩니다 . 이를 통해 애플리케이션은 개별적으로 할당 된 많은 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 를 생성하는 가비지 컬렉션 오버 헤드를 피할 수 있습니다 . 이 접근 방식은 개별 &lt;code&gt;ArrayBuffer&lt;/code&gt; 객체 를 추적하고 정리할 필요가 없으므로 성능과 메모리 사용량을 모두 향상시킵니다 .</target>
        </trans-unit>
        <trans-unit id="bb8a06fc84bb54aebb3f5d34322924c7994f1112" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;writable.cork()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;writable.uncork()&lt;/code&gt; to manage the buffering of writes to a stream, it is recommended that calls to &lt;code&gt;writable.uncork()&lt;/code&gt; be deferred using &lt;code&gt;process.nextTick()&lt;/code&gt;. Doing so allows batching of all &lt;code&gt;writable.write()&lt;/code&gt; calls that occur within a given Node.js event loop phase.</source>
          <target state="translated">사용하는 경우 &lt;a href=&quot;#stream_writable_cork&quot;&gt; &lt;code&gt;writable.cork()&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;writable.uncork()&lt;/code&gt; 스트림에 쓰기의 버퍼링을 관리하기 위해,이 호출하는 것이 좋습니다 &lt;code&gt;writable.uncork()&lt;/code&gt; 사용하여 연기 할 &lt;code&gt;process.nextTick()&lt;/code&gt; . 그렇게하면 모든 &lt;code&gt;writable.write()&lt;/code&gt; 배치를 일괄 처리 할 수 ​​있습니다. 주어진 Node.js 이벤트 루프 단계에서 발생하는 호출을 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1590b6db3d610ebd53a04e717ee50b6883f13c8" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, &lt;code&gt;rss&lt;/code&gt; will be a value that is valid for the entire process, while the other fields will only refer to the current thread.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드를 사용하는 경우 &lt;code&gt;rss&lt;/code&gt; 는 전체 프로세스에 유효한 값이되고 다른 필드는 현재 스레드 만 참조합니다.</target>
        </trans-unit>
        <trans-unit id="16b462e5d0419f550bd45208e292156c7a67eb63" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;http2session.settings()&lt;/code&gt; to submit new settings, the modified settings do not take effect until the &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;http2session.settings()&lt;/code&gt; 를 사용하여 새 설정을 제출하면 수정 된 설정은 &lt;code&gt;'localSettings'&lt;/code&gt; 이벤트가 생성 될 때까지 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="edaaf463c08a1a1d1a15adb2bc0e6d02fbfcb5d4" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;node-addon-api&lt;/code&gt; instead of the C APIs, start with the API &lt;a href=&quot;https://github.com/nodejs/node-addon-api#api-documentation&quot;&gt;docs&lt;/a&gt; for &lt;code&gt;node-addon-api&lt;/code&gt;.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;node-addon-api&lt;/code&gt; 대신 C의 API를, API가 시작 &lt;a href=&quot;https://github.com/nodejs/node-addon-api#api-documentation&quot;&gt;문서&lt;/a&gt; 에 대한 &lt;code&gt;node-addon-api&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cbf8c05902e863e4e9f097e100e92d75ee31fd12" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;npm install&lt;/code&gt; to install a Node.js Addon, npm uses its own bundled version of &lt;code&gt;node-gyp&lt;/code&gt; to perform this same set of actions, generating a compiled version of the Addon for the user's platform on demand.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;npm install&lt;/code&gt; Node.js를 부가 기능을 설치, NPM은 자체 번들 버전 사용 &lt;code&gt;node-gyp&lt;/code&gt; 필요에 따라 사용자의 플랫폼을위한 부가 기능의 컴파일 된 버전을 생성하는 작업이 같은 설정을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9c3b73b2354de84a2f20da8c37cc1f497ac6163" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;npm install&lt;/code&gt; to install a Node.js addon, npm uses its own bundled version of &lt;code&gt;node-gyp&lt;/code&gt; to perform this same set of actions, generating a compiled version of the addon for the user's platform on demand.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; 을 사용하여 Node.js 애드온을 설치할 때 npm은 자체 번들 버전의 &lt;code&gt;node-gyp&lt;/code&gt; 을 사용하여 동일한 일련의 작업을 수행하여 요청시 사용자 플랫폼에 대한 애드온의 컴파일 된 버전을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="889f878c7063918c8dc415e6b81305b1359bba6a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;require()&lt;/code&gt; all resources involved in loading are checked for integrity if a policy manifest has been specified. If a resource does not match the integrity listed in the manifest, an error will be thrown.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; 사용할 때 정책 매니페스트가 지정된 경우로드와 관련된 모든 리소스의 무결성을 검사합니다. 리소스가 매니페스트에 나열된 무결성과 일치하지 않으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="32dbee3a5d5832dcbb1cd50fd17f7385cbffaaef" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;cipher.setAAD()&lt;/code&gt; method sets the value used for the &lt;em&gt;additional authenticated data&lt;/em&gt; (AAD) input parameter.</source>
          <target state="translated">인증 된 암호화 모드 ( &lt;code&gt;GCM&lt;/code&gt; , &lt;code&gt;CCM&lt;/code&gt; 및 &lt;code&gt;OCB&lt;/code&gt; 가 현재 지원됨)를 사용하는 경우 &lt;code&gt;cipher.setAAD()&lt;/code&gt; 메소드는 &lt;em&gt;추가 인증 된 데이터&lt;/em&gt; (AAD) 입력 매개 변수에 사용되는 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="bcdf8890c4f9a7a03bba177c0cf2be932cdf094c" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;decipher.setAAD()&lt;/code&gt; method sets the value used for the &lt;em&gt;additional authenticated data&lt;/em&gt; (AAD) input parameter.</source>
          <target state="translated">인증 된 암호화 모드 ( &lt;code&gt;GCM&lt;/code&gt; , &lt;code&gt;CCM&lt;/code&gt; 및 &lt;code&gt;OCB&lt;/code&gt; 가 현재 지원됨)를 사용하는 경우 &lt;code&gt;decipher.setAAD()&lt;/code&gt; 메소드는 &lt;em&gt;추가 인증 데이터&lt;/em&gt; (AAD) 입력 매개 변수에 사용되는 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="0b5becc7fa138f3deaf68c544742ebc6637e666f" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method is used to pass in the received &lt;em&gt;authentication tag&lt;/em&gt;. If no tag is provided, or if the cipher text has been tampered with, &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; will throw, indicating that the cipher text should be discarded due to failed authentication. If the tag length is invalid according to &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt; or does not match the value of the &lt;code&gt;authTagLength&lt;/code&gt; option, &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; will throw an error.</source>
          <target state="translated">인증 된 암호화 모드 ( &lt;code&gt;GCM&lt;/code&gt; , &lt;code&gt;CCM&lt;/code&gt; 및 &lt;code&gt;OCB&lt;/code&gt; 가 현재 지원됨)를 사용하는 경우 &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; 메소드가 수신 된 &lt;em&gt;인증 태그&lt;/em&gt; 를 전달하는 데 사용됩니다 . 태그가 제공되지 않거나 암호문이 변조 된 경우 &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt; 이 발생하여 인증 실패로 인해 암호문을 삭제해야 함을 나타냅니다. &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt; 에 따라 태그 길이가 유효 하지 않거나 &lt;code&gt;authTagLength&lt;/code&gt; 옵션 의 값과 일치하지 않으면 &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; 가 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="e8abded618bf1e61374edf617c0e50239f5e735f" translate="yes" xml:space="preserve">
          <source>When using an older Node.js library that emits &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events and has a &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; method that is advisory only, the &lt;code&gt;readable.wrap()&lt;/code&gt; method can be used to create a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream that uses the old stream as its data source.</source>
          <target state="translated">&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt; 이벤트를 생성하고 권고 &lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; &lt;/a&gt; 는 stream.pause () 메소드 를 갖는 이전 Node.js 라이브러리를 사용하는 경우 &lt;code&gt;readable.wrap()&lt;/code&gt; 메소드 를 사용하여 이전 스트림을 원래 스트림으로 사용 하는 &lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 스트림 을 작성할 수 있습니다. 데이터 소스.</target>
        </trans-unit>
        <trans-unit id="d4a8a76000e40163d6b78b5788dc252982989de8" translate="yes" xml:space="preserve">
          <source>When using block encryption algorithms, the &lt;code&gt;Cipher&lt;/code&gt; class will automatically add padding to the input data to the appropriate block size. To disable the default padding call &lt;code&gt;cipher.setAutoPadding(false)&lt;/code&gt;.</source>
          <target state="translated">블록 암호화 알고리즘을 사용할 때 &lt;code&gt;Cipher&lt;/code&gt; 클래스는 입력 데이터에 적절한 블록 크기로 패딩을 자동으로 추가합니다. 기본 패딩을 비활성화하려면 &lt;code&gt;cipher.setAutoPadding(false)&lt;/code&gt; 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="6bde8404bcfba13f7fe07b88c2ce9708a51b5344" translate="yes" xml:space="preserve">
          <source>When using either &lt;a href=&quot;#vm_script_runinthiscontext_options&quot;&gt;&lt;code&gt;script.runInThisContext()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt;&lt;code&gt;vm.runInThisContext()&lt;/code&gt;&lt;/a&gt;, the code is executed within the current V8 global context. The code passed to this VM context will have its own isolated scope.</source>
          <target state="translated">어느 사용시 &lt;a href=&quot;#vm_script_runinthiscontext_options&quot;&gt; &lt;code&gt;script.runInThisContext()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt; &lt;code&gt;vm.runInThisContext()&lt;/code&gt; &lt;/a&gt; 의 코드는 현재 V8 글로벌 컨텍스트 내에서 실행된다. 이 VM 컨텍스트로 전달 된 코드는 자체 격리 범위를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="d4b392ebb5f406274751ac4a974842c597a563e1" translate="yes" xml:space="preserve">
          <source>When using environment branches, always include a &lt;code&gt;&quot;default&quot;&lt;/code&gt; condition where possible. Providing a &lt;code&gt;&quot;default&quot;&lt;/code&gt; condition ensures that any unknown JS environments are able to use this universal implementation, which helps avoid these JS environments from having to pretend to be existing environments in order to support packages with conditional exports. For this reason, using &lt;code&gt;&quot;node&quot;&lt;/code&gt; and &lt;code&gt;&quot;default&quot;&lt;/code&gt; condition branches is usually preferable to using &lt;code&gt;&quot;node&quot;&lt;/code&gt; and &lt;code&gt;&quot;browser&quot;&lt;/code&gt; condition branches.</source>
          <target state="translated">환경 브랜치를 사용하는 경우 가능한 경우 항상 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 조건을 포함하십시오. 제공하는 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 조건 보장하지만를 알 수없는 JS 환경 조건부 수출과 지원 패키지를 위해 기존의 환경 척 할 필요가 이러한 JS 환경을 방지하는 데 도움이 보편적 구현을 사용할 수 있음. 이러한 이유로 &lt;code&gt;&quot;node&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 조건 분기를 사용하는 것이 일반적으로 &lt;code&gt;&quot;node&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;browser&quot;&lt;/code&gt; 조건 분기를 사용하는 것보다 낫습니다.</target>
        </trans-unit>
        <trans-unit id="e942021306a7b23d251e9b0a7a27441e49416042" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status code that will be sent to the client when the headers get flushed.</source>
          <target state="translated">명시 적 &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt; 호출하지 않는 암시 적 헤더를 사용하는 경우이 속성은 헤더가 플러시 될 때 클라이언트에 전송 될 상태 코드를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="60893816080aba27da8d4e6ee7f959a8e20d2f06" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status code that will be sent to the client when the headers get flushed.</source>
          <target state="translated">명시 적 &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt; 호출하지 않는 암시 적 헤더를 사용하는 경우이 속성은 헤더가 플러시 될 때 클라이언트에 전송 될 상태 코드를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="1e3f4c4e721d306fd7c7d7b456a5392ba5e3af47" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status message that will be sent to the client when the headers get flushed. If this is left as &lt;code&gt;undefined&lt;/code&gt; then the standard message for the status code will be used.</source>
          <target state="translated">명시 적 &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt; 호출하지 않는 암시 적 헤더를 사용하는 경우이 속성은 헤더가 플러시 될 때 클라이언트에 전송 될 상태 메시지를 제어합니다. &lt;code&gt;undefined&lt;/code&gt; 상태로두면 상태 코드의 표준 메시지가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="12c9765153405927e84db58e9afc9c476579e1a9" translate="yes" xml:space="preserve">
          <source>When using pipeline:</source>
          <target state="translated">파이프 라인을 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="0d7fc4558703896b0eddb79f45cb41e05e1ec2cd" translate="yes" xml:space="preserve">
          <source>When using raw numbers where file modes are expected, any value larger than &lt;code&gt;0o777&lt;/code&gt; may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like &lt;code&gt;S_ISVTX&lt;/code&gt;, &lt;code&gt;S_ISGID&lt;/code&gt; or &lt;code&gt;S_ISUID&lt;/code&gt; are not exposed in &lt;code&gt;fs.constants&lt;/code&gt;.</source>
          <target state="translated">파일 모드가 예상되는 원시 숫자를 사용하는 경우 &lt;code&gt;0o777&lt;/code&gt; 보다 큰 값을 사용 하면 플랫폼 별 동작이 일관되게 작동하지 않을 수 있습니다. 따라서 &lt;code&gt;S_ISVTX&lt;/code&gt; , &lt;code&gt;S_ISGID&lt;/code&gt; 또는 &lt;code&gt;S_ISUID&lt;/code&gt; 와 같은 상수 는 &lt;code&gt;fs.constants&lt;/code&gt; 에 노출되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1f6605525ad51f6a30d5fbabc03561e06e76bfa6" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field, custom subpaths can be defined along with the main entry point by treating the main entry point as the &lt;code&gt;&quot;.&quot;&lt;/code&gt; subpath:</source>
          <target state="translated">&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt; 필드를 사용할 때 기본 진입 점을 &lt;code&gt;&quot;.&quot;&lt;/code&gt; 로 처리하여 기본 진입 점과 함께 사용자 지정 하위 경로를 정의 할 수 있습니다 . 하위 경로 :</target>
        </trans-unit>
        <trans-unit id="986cd8268880cef740911a0c55d562f7c09c1379" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;detached&lt;/code&gt; option to start a long-running process, the process will not stay running in the background after the parent exits unless it is provided with a &lt;code&gt;stdio&lt;/code&gt; configuration that is not connected to the parent. If the parent's &lt;code&gt;stdio&lt;/code&gt; is inherited, the child will remain attached to the controlling terminal.</source>
          <target state="translated">&lt;code&gt;detached&lt;/code&gt; 옵션을 사용하여 장기 실행 프로세스를 시작하는 경우 , 상위에 연결되지 않은 &lt;code&gt;stdio&lt;/code&gt; 구성 이 제공되지 않으면 상위 종료 후 프로세스가 백그라운드에서 계속 실행 되지 않습니다. 부모의 &lt;code&gt;stdio&lt;/code&gt; 가 상속되면 자식은 제어 터미널에 연결된 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="9f2bbc751362fc160bc2ffe73acfb71d4b97aa60" translate="yes" xml:space="preserve">
          <source>When wrapping a C++ class, the C++ constructor callback passed via &lt;code&gt;constructor&lt;/code&gt; should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See &lt;a href=&quot;#n_api_napi_wrap&quot;&gt;&lt;code&gt;napi_wrap&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">C ++ 클래스는 C를 포장 할 때 ++ 생성자 콜백을 통해 전달 된 &lt;code&gt;constructor&lt;/code&gt; 실제 클래스 생성자를 호출하는 클래스의 정적 방법이어야한다, 새로운 C ++ 자바 스크립트 객체의 인스턴스를 반환 래퍼 객체를 포함합니다. 자세한 내용은 &lt;a href=&quot;#n_api_napi_wrap&quot;&gt; &lt;code&gt;napi_wrap&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ae4a9b10065ee31ea508871d338d7436779cee7c" translate="yes" xml:space="preserve">
          <source>When writing to a writable stream from an async iterator, ensure correct handling of backpressure and errors. &lt;a href=&quot;#stream_stream_pipeline_source_transforms_destination_callback&quot;&gt;&lt;code&gt;stream.pipeline()&lt;/code&gt;&lt;/a&gt; abstracts away the handling of backpressure and backpressure-related errors:</source>
          <target state="translated">비동기 반복기에서 쓰기 가능한 스트림에 쓸 때 역압 및 오류를 올바르게 처리해야합니다. &lt;a href=&quot;#stream_stream_pipeline_source_transforms_destination_callback&quot;&gt; &lt;code&gt;stream.pipeline()&lt;/code&gt; &lt;/a&gt; 은 역압 및 역압 관련 오류의 처리를 추상화합니다.</target>
        </trans-unit>
        <trans-unit id="c120d35e20c3a52de19e7e178e265a55a8badd2d" translate="yes" xml:space="preserve">
          <source>Whenever an HTTP/2 &lt;code&gt;SETTINGS&lt;/code&gt; frame is sent to a connected peer, the peer is required to send an acknowledgment that it has received and applied the new &lt;code&gt;SETTINGS&lt;/code&gt;. By default, a maximum number of unacknowledged &lt;code&gt;SETTINGS&lt;/code&gt; frames may be sent at any given time. This error code is used when that limit has been reached.</source>
          <target state="translated">HTTP / 2 &lt;code&gt;SETTINGS&lt;/code&gt; 프레임이 연결된 피어로 전송 될 때마다 피어는 새 &lt;code&gt;SETTINGS&lt;/code&gt; 를 수신하고 적용했다는 확인을 보내야합니다 . 기본적으로, 승인되지 않은 최대 &lt;code&gt;SETTINGS&lt;/code&gt; 프레임은 주어진 시간에 전송 될 수 있습니다. 이 오류 코드는 해당 한계에 도달했을 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="dcc1f2aed891a178fc6f056739700967c873c616" translate="yes" xml:space="preserve">
          <source>Whenever possible, use the &lt;a href=&quot;#assert_strict_assertion_mode&quot;&gt;strict assertion mode&lt;/a&gt; instead. Otherwise, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; may cause surprising results. This is especially true for &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;, where the comparison rules are lax:</source>
          <target state="translated">가능하면 &lt;a href=&quot;#assert_strict_assertion_mode&quot;&gt;엄격 어설 션 모드를&lt;/a&gt; 대신 사용하십시오 . 그렇지 않으면 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;추상 동등 비교&lt;/a&gt; 가 놀라운 결과를 초래할 수 있습니다. 이것은 특히 &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt; 경우에 해당되며 비교 규칙이 느슨합니다.</target>
        </trans-unit>
        <trans-unit id="de56f8a5e50431418240afbb2b02e04f59424ed0" translate="yes" xml:space="preserve">
          <source>Whenever possible, use the &lt;a href=&quot;#assert_strict_mode&quot;&gt;&lt;code&gt;strict&lt;/code&gt; mode&lt;/a&gt; instead. Otherwise, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; may cause surprising results. This is especially true for &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;, where the comparison rules are lax:</source>
          <target state="translated">가능하면 &lt;a href=&quot;#assert_strict_mode&quot;&gt; &lt;code&gt;strict&lt;/code&gt; 모드를&lt;/a&gt; 대신 사용하십시오 . 그렇지 않으면, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;추상 평등 비교&lt;/a&gt; 는 놀라운 결과를 야기 할 수 있습니다. 비교 규칙이 느슨한 &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt; 경우 특히 그렇습니다 .</target>
        </trans-unit>
        <trans-unit id="4b0837810808c1db86ff7969b3cc7349ad3a777d" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;$HOME&lt;/code&gt; is the user's home directory, and &lt;code&gt;$PREFIX&lt;/code&gt; is Node.js's configured &lt;code&gt;node_prefix&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;$HOME&lt;/code&gt; 은 사용자의 홈 디렉토리이고 &lt;code&gt;$PREFIX&lt;/code&gt; 는 Node.js의 구성된 &lt;code&gt;node_prefix&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f32697019030f03ffa8466dad93332914e45c734" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;$HOME&lt;/code&gt; is the user's home directory, and &lt;code&gt;$PREFIX&lt;/code&gt; is the Node.js configured &lt;code&gt;node_prefix&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;$HOME&lt;/code&gt; 은 사용자의 홈 디렉토리이고 &lt;code&gt;$PREFIX&lt;/code&gt; 는 Node.js 구성 &lt;code&gt;node_prefix&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="38c19b2f1a4bf680069191361065f1dffe346b36" translate="yes" xml:space="preserve">
          <source>Whereas DOM &lt;code&gt;EventTarget&lt;/code&gt; instances &lt;em&gt;may&lt;/em&gt; be hierarchical, there is no concept of hierarchy and event propagation in Node.js. That is, an event dispatched to an &lt;code&gt;EventTarget&lt;/code&gt; does not propagate through a hierarchy of nested target objects that may each have their own set of handlers for the event.</source>
          <target state="translated">DOM &lt;code&gt;EventTarget&lt;/code&gt; 인스턴스 &lt;em&gt;는&lt;/em&gt; 계층적일 &lt;em&gt;수&lt;/em&gt; 있지만 Node.js에는 계층 구조 및 이벤트 전파 개념이 없습니다. 즉, &lt;code&gt;EventTarget&lt;/code&gt; 에 전달 된 이벤트 는 각각 이벤트에 대한 자체 처리기 집합을 가질 수있는 중첩 된 대상 개체의 계층 구조를 통해 전파되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4d88ed0feb975e4fa8a53343cb171f8d13d607d4" translate="yes" xml:space="preserve">
          <source>Whether or not the module is done loading, or is in the process of loading.</source>
          <target state="translated">모듈의 로딩이 완료되었는지 또는 로딩 중인지 여부.</target>
        </trans-unit>
        <trans-unit id="150bcea502183560d4bd3b371b2eac70c65966c2" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice&quot;&gt;&lt;code&gt;TypedArray#slice()&lt;/code&gt;&lt;/a&gt; creates a copy of part of the &lt;code&gt;TypedArray&lt;/code&gt;, &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;Buffer#slice()&lt;/code&gt;&lt;/a&gt; creates a view over the existing &lt;code&gt;Buffer&lt;/code&gt; without copying. This behavior can be surprising, and only exists for legacy compatibility. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt;&lt;code&gt;TypedArray#subarray()&lt;/code&gt;&lt;/a&gt; can be used to achieve the behavior of &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;Buffer#slice()&lt;/code&gt;&lt;/a&gt; on both &lt;code&gt;Buffer&lt;/code&gt;s and other &lt;code&gt;TypedArray&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice&quot;&gt; &lt;code&gt;TypedArray#slice()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;TypedArray&lt;/code&gt; 의 일부 사본을 생성하는 반면 , &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;Buffer#slice()&lt;/code&gt; &lt;/a&gt; 는 복사하지 않고 기존 &lt;code&gt;Buffer&lt;/code&gt; 위에 뷰를 생성합니다 . 이 동작은 놀라 울 수 있으며 레거시 호환성을 위해서만 존재합니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt; &lt;code&gt;TypedArray#subarray()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;Buffer&lt;/code&gt; 와 다른 &lt;code&gt;TypedArray&lt;/code&gt; 모두 에서 &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;Buffer#slice()&lt;/code&gt; &lt;/a&gt; 의 동작을 달성하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="073b0a5fc18cb0c2d155506393ae1a3f4713ec1d" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;readable.readableFlowing&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, data may be accumulating within the stream's internal buffer.</source>
          <target state="translated">&lt;code&gt;readable.readableFlowing&lt;/code&gt; 이 &lt;code&gt;false&lt;/code&gt; 인 동안 데이터가 스트림의 내부 버퍼 내에 누적 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56c8f07d4ebaba9048700c889aa63a035ed687c0" translate="yes" xml:space="preserve">
          <source>While &lt;em&gt;parentURL&lt;/em&gt; is not the file system root,</source>
          <target state="translated">하지만 &lt;em&gt;parentURL은&lt;/em&gt; 파일 시스템의 루트가 아닌,</target>
        </trans-unit>
        <trans-unit id="3eaccbf0809c93e1b57c8a5d1f706909dffd3367" translate="yes" xml:space="preserve">
          <source>While &lt;em&gt;scopeURL&lt;/em&gt; is not the file system root,</source>
          <target state="translated">하지만 &lt;em&gt;scopeURL은&lt;/em&gt; 파일 시스템의 루트가 아닌,</target>
        </trans-unit>
        <trans-unit id="827e891467d3d9882b685c22937f88f6efa8b40f" translate="yes" xml:space="preserve">
          <source>While a Node.js process typically releases all its resources when exiting, embedders of Node.js, or future Worker support, may require addons to register clean-up hooks that will be run once the current Node.js instance exits.</source>
          <target state="translated">Node.js 프로세스는 일반적으로 종료 할 때 모든 리소스를 해제하지만 Node.js의 임 베더 또는 향후 작업자 지원은 현재 Node.js 인스턴스가 종료되면 실행되는 정리 후크를 등록하기 위해 애드온이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16bf687a5d42e237a08af3b384d73c158bf3b89e" translate="yes" xml:space="preserve">
          <source>While a stream is not draining, calls to &lt;code&gt;write()&lt;/code&gt; will buffer &lt;code&gt;chunk&lt;/code&gt;, and return false. Once all currently buffered chunks are drained (accepted for delivery by the operating system), the &lt;code&gt;'drain'&lt;/code&gt; event will be emitted. It is recommended that once &lt;code&gt;write()&lt;/code&gt; returns false, no more chunks be written until the &lt;code&gt;'drain'&lt;/code&gt; event is emitted. While calling &lt;code&gt;write()&lt;/code&gt; on a stream that is not draining is allowed, Node.js will buffer all written chunks until maximum memory usage occurs, at which point it will abort unconditionally. Even before it aborts, high memory usage will cause poor garbage collector performance and high RSS (which is not typically released back to the system, even after the memory is no longer required). Since TCP sockets may never drain if the remote peer does not read the data, writing a socket that is not draining may lead to a remotely exploitable vulnerability.</source>
          <target state="translated">스트림이 비우지 않는 동안 &lt;code&gt;write()&lt;/code&gt; 호출 은 &lt;code&gt;chunk&lt;/code&gt; 를 버퍼링 하고 false를 반환합니다. 현재 버퍼링 된 청크가 모두 비워지면 (운영 체제에서 전달할 수 있음) &lt;code&gt;'drain'&lt;/code&gt; 이벤트가 발생합니다. &lt;code&gt;write()&lt;/code&gt; 가 false를 반환하면 &lt;code&gt;'drain'&lt;/code&gt; 이벤트가 발생할 때까지 더 이상 청크를 쓰지 않는 것이 좋습니다 . 전화하는 동안 &lt;code&gt;write()&lt;/code&gt; 배수되지 않는 스트림이 허용되면 Node.js는 최대 메모리 사용이 발생할 때까지 작성된 모든 청크를 버퍼링하며이 시점에서 무조건 중단됩니다. 중단되기 전에도 메모리를 많이 사용하면 가비지 수집기 성능이 저하되고 RSS가 높아집니다 (메모리가 더 이상 필요하지 않은 경우에도 일반적으로 시스템으로 다시 릴리스되지 않음). 원격 피어가 데이터를 읽지 않으면 TCP 소켓이 드레인되지 않을 수 있으므로 드레인되지 않은 소켓을 작성하면 원격으로 악용 가능한 취약점이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6a8020de6b381b75f56b7f678ab65ef6cbe3057" translate="yes" xml:space="preserve">
          <source>While a worker is alive, this is the key that indexes it in &lt;code&gt;cluster.workers&lt;/code&gt;.</source>
          <target state="translated">작업자가 살아있는 동안 이는 &lt;code&gt;cluster.workers&lt;/code&gt; 에서 작업자를 색인화하는 키입니다 .</target>
        </trans-unit>
        <trans-unit id="1fd443864b968d1422e68befd59a84340c0cbe2f" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_dataview()&lt;/code&gt;, a given &lt;code&gt;offset&lt;/code&gt; was outside the bounds of the dataview or &lt;code&gt;offset + length&lt;/code&gt; was larger than a length of given &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;napi_create_dataview()&lt;/code&gt; 호출하는 동안 지정된 &lt;code&gt;offset&lt;/code&gt; 이 dataview 의 범위를 벗어나거나 &lt;code&gt;offset + length&lt;/code&gt; 가 지정된 &lt;code&gt;buffer&lt;/code&gt; 의 길이보다 큽니다 .</target>
        </trans-unit>
        <trans-unit id="8ac13a17681e077ea5bf349faacd8194b41cfd8a" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_typedarray()&lt;/code&gt;, &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; was larger than the length of given &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">호출하는 동안 &lt;code&gt;napi_create_typedarray()&lt;/code&gt; , &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; 소정의 길이보다 크다 &lt;code&gt;buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="89bedcd7f7b0e6f56592b23db9232857980b56be" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_typedarray()&lt;/code&gt;, the provided &lt;code&gt;offset&lt;/code&gt; was not a multiple of the element size.</source>
          <target state="translated">&lt;code&gt;napi_create_typedarray()&lt;/code&gt; 호출하는 동안 제공된 &lt;code&gt;offset&lt;/code&gt; 이 요소 크기의 배수가 아니 었습니다.</target>
        </trans-unit>
        <trans-unit id="5f70577b8889d7968ea8fc5369e676e9ca7b273e" translate="yes" xml:space="preserve">
          <source>While client code may generate and propagate these errors, in practice, only V8 will do so.</source>
          <target state="translated">클라이언트 코드가 이러한 오류를 생성하고 전파 할 수는 있지만 실제로는 V8만이 그렇게합니다.</target>
        </trans-unit>
        <trans-unit id="0a77636ef4321da677173086cd96495f6d6cd2c5" translate="yes" xml:space="preserve">
          <source>While it is not recommended, most fs functions allow the callback argument to be omitted, in which case a default callback is used that rethrows errors. To get a trace to the original call site, set the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable:</source>
          <target state="translated">권장되지는 않지만 대부분의 fs 함수를 사용하면 콜백 인수를 생략 할 수 있습니다.이 경우 오류를 다시 발생시키는 기본 콜백이 사용됩니다. 원래 호출 사이트에 대한 추적을 얻으려면 &lt;code&gt;NODE_DEBUG&lt;/code&gt; 환경 변수를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="07ad085018317673130d977314c9fd1a0ab27428" translate="yes" xml:space="preserve">
          <source>While most applications will almost never need to do this, there are situations within Node.js where this is done, particularly in the &lt;code&gt;Readable&lt;/code&gt; stream class internals.</source>
          <target state="translated">대부분의 애플리케이션은이를 수행 할 필요가 거의 없지만 Node.js 내에서 특히 &lt;code&gt;Readable&lt;/code&gt; 스트림 클래스 내부 에서 이러한 상황이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="12603addff37ef7fb8f4096757cb2ac7b6201fe2" translate="yes" xml:space="preserve">
          <source>While most applications will continue to function normally, this introduces an edge case in the following conditions:</source>
          <target state="translated">대부분의 응용 프로그램은 계속 정상적으로 작동하지만 다음과 같은 경우에 가장 중요한 경우가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2e267fe043876fa36afddb190a1c3ab052c39add" translate="yes" xml:space="preserve">
          <source>While other subpaths will error:</source>
          <target state="translated">다른 하위 경로는 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e574df95dc872b8cc54642689247473a5c7d5173" translate="yes" xml:space="preserve">
          <source>While process warnings use &lt;code&gt;Error&lt;/code&gt; objects, the process warning mechanism is &lt;strong&gt;not&lt;/strong&gt; a replacement for normal error handling mechanisms.</source>
          <target state="translated">프로세스 경고는 &lt;code&gt;Error&lt;/code&gt; 객체를 사용하지만 프로세스 경고 메커니즘은 일반적인 오류 처리 메커니즘을 대체 &lt;strong&gt;하지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="53b02f9a1b3e1a259321fe33272d01f74b179e92" translate="yes" xml:space="preserve">
          <source>While specific instances of &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; streams may differ in various ways, all &lt;code&gt;Writable&lt;/code&gt; streams follow the same fundamental usage pattern as illustrated in the example below:</source>
          <target state="translated">&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt; 스트림 의 특정 인스턴스는 여러 가지면에서 다를 수 있지만 모든 &lt;code&gt;Writable&lt;/code&gt; 스트림은 아래 예와 같이 동일한 기본 사용 패턴을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="9bda333a604d893d1a75ffb87d5525e7ef7b7daa" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;bindings&lt;/code&gt; package implementation is more sophisticated in how it locates Addon modules, it is essentially using a &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; pattern similar to:</source>
          <target state="translated">&lt;code&gt;bindings&lt;/code&gt; 패키지 구현은 애드온 모듈을 찾는 방법이 더 정교 하지만 본질적 으로 다음과 같은 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 패턴을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="148734bd8ae3a9daac7e2781c1383ca3a0ec28e6" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;bindings&lt;/code&gt; package implementation is more sophisticated in how it locates addon modules, it is essentially using a &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; pattern similar to:</source>
          <target state="translated">&lt;code&gt;bindings&lt;/code&gt; 패키지 구현은 애드온 모듈을 찾는 방법이 더 정교 하지만 기본적 으로 다음과 유사한 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 패턴을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="76c90ee7eba72880849307c2039e0e4bb01a80a1" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;length&lt;/code&gt; property is not immutable, changing the value of &lt;code&gt;length&lt;/code&gt; can result in undefined and inconsistent behavior. Applications that wish to modify the length of a &lt;code&gt;Buffer&lt;/code&gt; should therefore treat &lt;code&gt;length&lt;/code&gt; as read-only and use &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;buf.slice()&lt;/code&gt;&lt;/a&gt; to create a new &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">그동안 &lt;code&gt;length&lt;/code&gt; 재산권 불변 아니다 값 변화 &lt;code&gt;length&lt;/code&gt; 정의와 일치하지 않은 동작이 발생할 수있다. 따라서 &lt;code&gt;Buffer&lt;/code&gt; 길이를 수정하려는 응용 프로그램은 &lt;code&gt;length&lt;/code&gt; 를 읽기 전용으로 처리하고 &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;buf.slice()&lt;/code&gt; &lt;/a&gt; 를 사용하여 새 &lt;code&gt;Buffer&lt;/code&gt; 를 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a623dbbd3951370c264476b7c6e7232613236f42" translate="yes" xml:space="preserve">
          <source>While the Legacy API has not been deprecated, it is maintained solely for backwards compatibility with existing applications. New application code should use the WHATWG API.</source>
          <target state="translated">레거시 API는 더 이상 사용되지 않지만 기존 응용 프로그램과의 하위 호환성을 위해서만 유지됩니다. 새로운 응용 프로그램 코드는 WHATWG API를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="09c5d64ead347c0d1001f45fe745bced7173b737" translate="yes" xml:space="preserve">
          <source>While the example above uses a server created using the &lt;code&gt;net&lt;/code&gt; module, &lt;code&gt;dgram&lt;/code&gt; module servers use exactly the same workflow with the exceptions of listening on a &lt;code&gt;'message'&lt;/code&gt; event instead of &lt;code&gt;'connection'&lt;/code&gt; and using &lt;code&gt;server.bind()&lt;/code&gt; instead of &lt;code&gt;server.listen()&lt;/code&gt;. This is, however, currently only supported on Unix platforms.</source>
          <target state="translated">사용 위의 예는 서버가 사용하여 작성하는 동안 &lt;code&gt;net&lt;/code&gt; 모듈을 &lt;code&gt;dgram&lt;/code&gt; 모듈 서버는 수신 대기의 예외를 제외하고 정확히 같은 워크 플로우를 사용하여 &lt;code&gt;'message'&lt;/code&gt; 대신 이벤트 &lt;code&gt;'connection'&lt;/code&gt; 및 사용 &lt;code&gt;server.bind()&lt;/code&gt; 대신 &lt;code&gt;server.listen()&lt;/code&gt; . 그러나 이것은 현재 Unix 플랫폼에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="4cc676ce4cebcbf29d86e81b5c7d0dff3d3d683c" translate="yes" xml:space="preserve">
          <source>While the following will:</source>
          <target state="translated">다음과 같은 동안 :</target>
        </trans-unit>
        <trans-unit id="b5fff3058753561ed1c6d6a0fda3b9ebdd80b49a" translate="yes" xml:space="preserve">
          <source>While the function is called &lt;code&gt;kill&lt;/code&gt;, the signal delivered to the child process may not actually terminate the process.</source>
          <target state="translated">함수를 &lt;code&gt;kill&lt;/code&gt; 이라고하지만 자식 프로세스에 전달 된 신호는 실제로 프로세스를 종료하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="272a1681221a0eec5a8cfa19d26eb906122e1b59" translate="yes" xml:space="preserve">
          <source>While there are clear performance advantages to using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, extra care &lt;em&gt;must&lt;/em&gt; be taken in order to avoid introducing security vulnerabilities into an application.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 를 사용 하면 확실한 성능 이점이 있지만 응용 프로그램에 보안 취약점이 발생하지 않도록 각별히주의 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="dff47dc75762b117c912273ee750fcd8b8835a1f" translate="yes" xml:space="preserve">
          <source>While there are clear performance advantages to using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, extra care &lt;em&gt;must&lt;/em&gt; be taken in order to avoid introducing security vulnerabilities into an application.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 를 사용 하면 성능상의 이점이 분명하지만 애플리케이션에 보안 취약성이 도입되지 않도록 각별히주의 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="906514837da60312b0100c43d459f45d3629e591" translate="yes" xml:space="preserve">
          <source>While using &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;, the size of the receive or send &lt;code&gt;Buffer&lt;/code&gt; could not be determined.</source>
          <target state="translated">&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; &lt;/a&gt; 사용하는 동안 수신 또는 송신 &lt;code&gt;Buffer&lt;/code&gt; 의 크기를 판별 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="05941d502963f71fe136daa4cb4b731bc168d99f" translate="yes" xml:space="preserve">
          <source>While using &lt;code&gt;N-API&lt;/code&gt;, a constructor passed was not a function.</source>
          <target state="translated">&lt;code&gt;N-API&lt;/code&gt; 를 사용하는 동안 전달 된 생성자는 함수가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="93457bdd2cd57367c90d2f2935274066789902d1" translate="yes" xml:space="preserve">
          <source>While using TLS, the &lt;code&gt;server.addContext()&lt;/code&gt; method was called without providing a host name in the first parameter.</source>
          <target state="translated">TLS를 사용하는 동안 첫 번째 매개 변수에 호스트 이름을 제공하지 않고 &lt;code&gt;server.addContext()&lt;/code&gt; 메소드가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="f9146b4c870abc13d8e7270e7e2c8205a2d51013" translate="yes" xml:space="preserve">
          <source>While using TLS, the &lt;code&gt;server.addContext()&lt;/code&gt; method was called without providing a hostname in the first parameter.</source>
          <target state="translated">TLS를 사용하는 동안 첫 번째 매개 변수에 호스트 이름을 제공하지 않고 &lt;code&gt;server.addContext()&lt;/code&gt; 메소드가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="4a919666b0cfbcead82430357bab047021b52466" translate="yes" xml:space="preserve">
          <source>While using TLS, the host name/IP of the peer did not match any of the &lt;code&gt;subjectAltNames&lt;/code&gt; in its certificate.</source>
          <target state="translated">TLS를 사용하는 동안 피어의 호스트 이름 / IP가 인증서 의 &lt;code&gt;subjectAltNames&lt;/code&gt; 와 일치하지 않았습니다 .</target>
        </trans-unit>
        <trans-unit id="1a7d1e22335731ae81c12afd1af0756eec95e9e1" translate="yes" xml:space="preserve">
          <source>While using TLS, the hostname/IP of the peer did not match any of the &lt;code&gt;subjectAltNames&lt;/code&gt; in its certificate.</source>
          <target state="translated">TLS를 사용하는 동안 피어의 호스트 이름 / IP가 인증서 의 &lt;code&gt;subjectAltNames&lt;/code&gt; 와 일치하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="45d99be8b65878064711b0e62c2136d7a075162d" translate="yes" xml:space="preserve">
          <source>While using TLS, the parameter offered for the Diffie-Hellman (&lt;code&gt;DH&lt;/code&gt;) key-agreement protocol is too small. By default, the key length must be greater than or equal to 1024 bits to avoid vulnerabilities, even though it is strongly recommended to use 2048 bits or larger for stronger security.</source>
          <target state="translated">TLS를 사용하는 동안 &lt;code&gt;DH&lt;/code&gt; (Diffie-Hellman ) 키 계약 프로토콜에 제공된 매개 변수 가 너무 작습니다. 보안을 강화하기 위해 2048 비트 이상을 사용하는 것이 좋지만, 취약점을 피하려면 기본적으로 키 길이가 1024 비트 이상이어야합니다.</target>
        </trans-unit>
        <trans-unit id="0255bf434163a119a17b1d975c9f1e7ecfd257e3" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to activate the inspector when it already started to listen on a port. Use &lt;code&gt;inspector.close()&lt;/code&gt; before activating it on a different address.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; 모듈을 사용하는 동안 포트에서 수신을 이미 시작했을 때 인스펙터를 활성화하려고했습니다. 다른 주소에서 활성화하기 전에 &lt;code&gt;inspector.close()&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f0ed3431f9e7da6bdb7c0cdcc138f0c67a3a84bd" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to connect when the inspector was already connected.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; 모듈을 사용하는 동안 인스펙터가 이미 연결되었을 때 연결을 시도했습니다.</target>
        </trans-unit>
        <trans-unit id="c9e4d1438169aa995467dae33b288560aea4c176" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to use the inspector after the session had already closed.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; 모듈을 사용하는 동안 세션이 이미 종료 된 후 인스펙터를 사용하려고했습니다.</target>
        </trans-unit>
        <trans-unit id="7c8341fb6d1f4721021429c0a358429868bcd9a7" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to use the inspector before it was connected.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; 모듈을 사용하는 동안, 인스펙터 가 연결되기 전에이를 사용하려고했습니다.</target>
        </trans-unit>
        <trans-unit id="85091e3c3a7666c26248b532c8232f034e100cae" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), a performance mark is invalid.</source>
          <target state="translated">성능 타이밍 API ( &lt;code&gt;perf_hooks&lt;/code&gt; )를 사용하는 중에 성능 표시가 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc4a904bf2febe00864e7180029aef452cfb34c5" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), no valid performance entry types are found.</source>
          <target state="translated">Performance Timing API ( &lt;code&gt;perf_hooks&lt;/code&gt; )를 사용하는 동안 유효한 성능 항목 유형을 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1c712c9cfae45300304fedcd57cc9dbfd5142252" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), no valid performance entry types were found.</source>
          <target state="translated">성능 타이밍 API ( &lt;code&gt;perf_hooks&lt;/code&gt; )를 사용하는 동안 유효한 성능 항목 유형이 없습니다.</target>
        </trans-unit>
        <trans-unit id="7a0f6c9b6bee563036957bfb2ec6eb810b5f2187" translate="yes" xml:space="preserve">
          <source>While, the &lt;code&gt;Buffer&lt;/code&gt; object is available as a global, there are additional &lt;code&gt;Buffer&lt;/code&gt;-related APIs that are available only via the &lt;code&gt;buffer&lt;/code&gt; module accessed using &lt;code&gt;require('buffer')&lt;/code&gt;.</source>
          <target state="translated">상기 상태 &lt;code&gt;Buffer&lt;/code&gt; 개체 글로벌로서 사용할 수있다 추가적인 &lt;code&gt;Buffer&lt;/code&gt; 만을 통하여 가능 - 관련 API를 &lt;code&gt;buffer&lt;/code&gt; 하여 액세스 모듈 &lt;code&gt;require('buffer')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="300d4cf95fd55a00d2f8a5ccb4867cbf70cfc142" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicSocket&lt;/code&gt; has been destroyed.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;QuicSocket&lt;/code&gt; 이 파괴되었습니다.</target>
        </trans-unit>
        <trans-unit id="b3ed3d9b3b369ef7cf4a361ca2e1346f0cf8f228" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicSocket&lt;/code&gt; has been successfully bound to a local UDP port. Initially the value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;QuicSocket&lt;/code&gt; 가 성공적으로 로컬 UDP 포트에 바인딩되었습니다. 처음에 값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="51e10faadc7ce3a3d6851a934dfc743094c5a2e1" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicStream&lt;/code&gt; is unidirectional. Whether the &lt;code&gt;QuicStream&lt;/code&gt; will be readable or writable depends on whether the &lt;code&gt;quicstream.session&lt;/code&gt; is a &lt;code&gt;QuicClientSession&lt;/code&gt; or &lt;code&gt;QuicServerSession&lt;/code&gt;, and whether the &lt;code&gt;QuicStream&lt;/code&gt; was initiated locally or remotely.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;QuicStream&lt;/code&gt; 는 단방향입니다. 여부 &lt;code&gt;QuicStream&lt;/code&gt; 은 읽을 수 또는 쓰기 권한이 있는지 여부에 따라 달라집니다 &lt;code&gt;quicstream.session&lt;/code&gt; 는 A는 &lt;code&gt;QuicClientSession&lt;/code&gt; 또는 &lt;code&gt;QuicServerSession&lt;/code&gt; 하고 있는지 &lt;code&gt;QuicStream&lt;/code&gt; 가 로컬 또는 원격으로 시작되었다.</target>
        </trans-unit>
        <trans-unit id="56852f1433cd6db40dd6ed5ff8afdb21f7d2b72c" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicStream&lt;/code&gt; was initiated by a &lt;code&gt;QuicClientSession&lt;/code&gt; instance.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;QuicStream&lt;/code&gt; 이 a로 시작되었다 &lt;code&gt;QuicClientSession&lt;/code&gt; 의 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="b3c4698c06e9766787f59a0a0720a7451edbc163" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicStream&lt;/code&gt; was initiated by a &lt;code&gt;QuicServerSession&lt;/code&gt; instance.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;QuicStream&lt;/code&gt; 이 a로 시작되었다 &lt;code&gt;QuicServerSession&lt;/code&gt; 의 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="cbf2dd154821886de9761f603648735c3e559ee1" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance has been closed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;Http2Session&lt;/code&gt; 의 인스턴스가, 그렇지 않으면, 닫힌 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e76c78443d8eaa0500bc30563e442b910eb81724" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance has been destroyed and must no longer be used, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;Http2Session&lt;/code&gt; 의 인스턴스가, 그렇지 않으면 파괴되어 더 이상 사용할 수 있어야합니다 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a6c7b91092846e149e633701cf1ea18b986ae46f" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance is still connecting, will be set to &lt;code&gt;false&lt;/code&gt; before emitting &lt;code&gt;connect&lt;/code&gt; event and/or calling the &lt;code&gt;http2.connect&lt;/code&gt; callback.</source>
          <target state="translated">수 있을까요 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;Http2Session&lt;/code&gt; 의 인스턴스가 여전히 연결로 설정됩니다되어 &lt;code&gt;false&lt;/code&gt; 발광하기 전에 &lt;code&gt;connect&lt;/code&gt; 이벤트 및 / 또는 전화 &lt;code&gt;http2.connect&lt;/code&gt; 콜백을.</target>
        </trans-unit>
        <trans-unit id="5df68b6de935e716e54330bfbad78ac0cfff8003" translate="yes" xml:space="preserve">
          <source>Will generate an object similar to:</source>
          <target state="translated">다음과 유사한 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="49659e5a07d9ec9ddbc5ea2cded9dfed86235252" translate="yes" xml:space="preserve">
          <source>Will generate:</source>
          <target state="translated">다음을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="2c2d1ea901f0c8101ac1fb5fa6dc20b9daa197c0" translate="yes" xml:space="preserve">
          <source>Will print:</source>
          <target state="translated">인쇄합니다 :</target>
        </trans-unit>
        <trans-unit id="70e640967068e9aeff74a0b63a5f321ce52989ef" translate="yes" xml:space="preserve">
          <source>Windows Performance Counter support has been removed from Node.js. The undocumented &lt;code&gt;COUNTER_NET_SERVER_CONNECTION()&lt;/code&gt;, &lt;code&gt;COUNTER_NET_SERVER_CONNECTION_CLOSE()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_SERVER_REQUEST()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_SERVER_RESPONSE()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_CLIENT_REQUEST()&lt;/code&gt;, and &lt;code&gt;COUNTER_HTTP_CLIENT_RESPONSE()&lt;/code&gt; functions have been deprecated.</source>
          <target state="translated">Node.js에서 Windows 성능 카운터 지원이 제거되었습니다. 문서화되지 않은 &lt;code&gt;COUNTER_NET_SERVER_CONNECTION()&lt;/code&gt; , &lt;code&gt;COUNTER_NET_SERVER_CONNECTION_CLOSE()&lt;/code&gt; , &lt;code&gt;COUNTER_HTTP_SERVER_REQUEST()&lt;/code&gt; , &lt;code&gt;COUNTER_HTTP_SERVER_RESPONSE()&lt;/code&gt; , &lt;code&gt;COUNTER_HTTP_CLIENT_REQUEST()&lt;/code&gt; , 및 &lt;code&gt;COUNTER_HTTP_CLIENT_RESPONSE()&lt;/code&gt; 함수가 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d3eb2a06ecdde61b424aed0b151aacc295ac1030" translate="yes" xml:space="preserve">
          <source>Windows Specific Error Constants</source>
          <target state="translated">Windows 특정 오류 상수</target>
        </trans-unit>
        <trans-unit id="c7bb5218ec791e1b5be45e3ebd73be51f17f1af7" translate="yes" xml:space="preserve">
          <source>Windows does not support sending signals, but Node.js offers some emulation with &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;process.kill()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt;. Sending signal &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Sending &lt;code&gt;SIGINT&lt;/code&gt;, &lt;code&gt;SIGTERM&lt;/code&gt;, and &lt;code&gt;SIGKILL&lt;/code&gt; cause the unconditional termination of the target process.</source>
          <target state="translated">Windows는 신호 전송을 지원하지 않지만 Node.js는 &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt; &lt;code&gt;process.kill()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; &lt;/a&gt; 하여 에뮬레이션을 제공합니다 . 송신 신호 &lt;code&gt;0&lt;/code&gt; 을 사용하여 프로세스가 있는지 테스트 할 수 있습니다. &lt;code&gt;SIGINT&lt;/code&gt; , &lt;code&gt;SIGTERM&lt;/code&gt; 및 &lt;code&gt;SIGKILL&lt;/code&gt; 을 보내면 대상 프로세스가 무조건 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="bfea3e748f09870848545f0c2f952c91ac03fe38" translate="yes" xml:space="preserve">
          <source>Windows does not support signals so has no equivalent to termination by signal, but Node.js offers some emulation with &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;process.kill()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Windows는 신호를 지원하지 않으므로 신호에 의한 종료와 동일하지 않지만 Node.js는 &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt; &lt;code&gt;process.kill()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; &lt;/a&gt; 과 함께 일부 에뮬레이션을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="aba9f3b1cc568ab6b6fc3f150113c54c4f72c506" translate="yes" xml:space="preserve">
          <source>Windows vs. POSIX</source>
          <target state="translated">Windows와 POSIX</target>
        </trans-unit>
        <trans-unit id="b6726453945768d268831e1f085608f8f62e92b3" translate="yes" xml:space="preserve">
          <source>Windows-specific error constants</source>
          <target state="translated">Windows 관련 오류 상수</target>
        </trans-unit>
        <trans-unit id="27e8d1c11c75449e5d932b4ccddda5d5eb83e4a5" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; now available, the &lt;code&gt;Buffer&lt;/code&gt; class implements the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt; API in a manner that is more optimized and suitable for Node.js.</source>
          <target state="translated">로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 사용할 수의 &lt;code&gt;Buffer&lt;/code&gt; 클래스 구현 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; 에&lt;/a&gt; 더 최적화 Node.js.에 적합한 방식으로 API</target>
        </trans-unit>
        <trans-unit id="cc2ce0a1c1a12ddc001101986e9f3e96a7af34d3" translate="yes" xml:space="preserve">
          <source>With HTTPS support, use &lt;a href=&quot;tls#tls_tlssocket_getpeercertificate_detailed&quot;&gt;&lt;code&gt;request.socket.getPeerCertificate()&lt;/code&gt;&lt;/a&gt; to obtain the client's authentication details.</source>
          <target state="translated">HTTPS를 지원하는 경우 &lt;a href=&quot;tls#tls_tlssocket_getpeercertificate_detailed&quot;&gt; &lt;code&gt;request.socket.getPeerCertificate()&lt;/code&gt; &lt;/a&gt; 를 사용하여 클라이언트의 인증 세부 사항을 확보하십시오.</target>
        </trans-unit>
        <trans-unit id="eff3fb3260b706087702387fa36966dba17fa603" translate="yes" xml:space="preserve">
          <source>With TLS/SSL, all servers (and some clients) must have a &lt;em&gt;certificate&lt;/em&gt;. Certificates are &lt;em&gt;public keys&lt;/em&gt; that correspond to a private key, and that are digitally signed either by a Certificate Authority or by the owner of the private key (such certificates are referred to as &quot;self-signed&quot;). The first step to obtaining a certificate is to create a &lt;em&gt;Certificate Signing Request&lt;/em&gt; (CSR) file.</source>
          <target state="translated">TLS / SSL을 사용하면 모든 서버 (및 일부 클라이언트)에 &lt;em&gt;인증서&lt;/em&gt; 가 있어야합니다 . 인증서는 &lt;em&gt;개인 키&lt;/em&gt; 에 해당하고 인증 기관이나 개인 키 소유자가 디지털 서명 한 &lt;em&gt;공개 키&lt;/em&gt; 입니다 (이러한 인증서는 &quot;자체 서명&quot;이라고 함). 인증서를 얻는 첫 번째 단계는 CSR ( &lt;em&gt;Certificate Signing Request&lt;/em&gt; ) 파일 을 만드는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="0c21435a9e5e1897d281c15fe6d4278729f4ba10" translate="yes" xml:space="preserve">
          <source>With TLSv1.3, be aware that multiple tickets may be sent by the server, resulting in multiple &lt;code&gt;'session'&lt;/code&gt; events, see &lt;a href=&quot;#tls_event_session&quot;&gt;&lt;code&gt;'session'&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">TLSv1.3에서는 서버에서 여러 티켓을 전송하여 여러 &lt;code&gt;'session'&lt;/code&gt; 이벤트 가 발생할 수 있습니다 . 자세한 정보는 &lt;a href=&quot;#tls_event_session&quot;&gt; &lt;code&gt;'session'&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f9b2a4a6fab4bc23157008667b80e9978473ae86" translate="yes" xml:space="preserve">
          <source>With few exceptions, &lt;em&gt;Synchronous&lt;/em&gt; APIs (any blocking method that does not accept a &lt;code&gt;callback&lt;/code&gt; function, such as &lt;a href=&quot;fs#fs_fs_readfilesync_path_options&quot;&gt;&lt;code&gt;fs.readFileSync&lt;/code&gt;&lt;/a&gt;), will use &lt;code&gt;throw&lt;/code&gt; to report errors.</source>
          <target state="translated">몇 가지 예외가 있지만 &lt;em&gt;동기화&lt;/em&gt; API ( &lt;a href=&quot;fs#fs_fs_readfilesync_path_options&quot;&gt; &lt;code&gt;fs.readFileSync&lt;/code&gt; &lt;/a&gt; 와 같은 &lt;code&gt;callback&lt;/code&gt; 함수를 허용하지 않는 차단 방법 )는 &lt;code&gt;throw&lt;/code&gt; 를 사용 하여 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="19b157b47e83a53d9af8023d224e343715e368cd" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt;&lt;code&gt;--experimental-repl-await&lt;/code&gt;&lt;/a&gt; command line option specified, experimental support for the &lt;code&gt;await&lt;/code&gt; keyword is enabled.</source>
          <target state="translated">으로 &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt; &lt;code&gt;--experimental-repl-await&lt;/code&gt; &lt;/a&gt; 명령 줄 옵션을 지정의에 대한 실험 지원 &lt;code&gt;await&lt;/code&gt; 를 키워드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="627181d1cba340317aff21e0565fb8c5949b0afc" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt;&lt;code&gt;--experimental-repl-await&lt;/code&gt;&lt;/a&gt; command-line option specified, experimental support for the &lt;code&gt;await&lt;/code&gt; keyword is enabled.</source>
          <target state="translated">으로 &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt; &lt;code&gt;--experimental-repl-await&lt;/code&gt; &lt;/a&gt; 명령 줄 옵션을 지정의에 대한 실험 지원 &lt;code&gt;await&lt;/code&gt; 를 키워드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63ae8776ef3f404c5446c364b77e122a73f3b875" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;all&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;Promise&lt;/code&gt; is resolved with &lt;code&gt;addresses&lt;/code&gt; being an array of objects with the properties &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;family&lt;/code&gt;.</source>
          <target state="translated">로 &lt;code&gt;all&lt;/code&gt; 에 옵션을 설정 &lt;code&gt;true&lt;/code&gt; 의 &lt;code&gt;Promise&lt;/code&gt; 과 해결 &lt;code&gt;addresses&lt;/code&gt; 속성을 가진 객체의 배열되고 &lt;code&gt;address&lt;/code&gt; 와 &lt;code&gt;family&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f3cf5f6869dcc18269bb5c37a1d11bb05d05e2a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;all&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the arguments for &lt;code&gt;callback&lt;/code&gt; change to &lt;code&gt;(err, addresses)&lt;/code&gt;, with &lt;code&gt;addresses&lt;/code&gt; being an array of objects with the properties &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;family&lt;/code&gt;.</source>
          <target state="translated">으로 &lt;code&gt;all&lt;/code&gt; 에 옵션을 설정 &lt;code&gt;true&lt;/code&gt; 에 대한 인수 &lt;code&gt;callback&lt;/code&gt; 로 변경 &lt;code&gt;(err, addresses)&lt;/code&gt; 와, &lt;code&gt;addresses&lt;/code&gt; 속성을 가진 객체의 배열되고 &lt;code&gt;address&lt;/code&gt; 와 &lt;code&gt;family&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="703ba3425a961923f35e100eb6262f175b5c075e" translate="yes" xml:space="preserve">
          <source>With the AES-GCM method, the &lt;code&gt;additionalData&lt;/code&gt; is extra input that is not encrypted but is included in the authentication of the data. The use of &lt;code&gt;additionalData&lt;/code&gt; is optional.</source>
          <target state="translated">AES-GCM 방법을 사용하는 경우 &lt;code&gt;additionalData&lt;/code&gt; 는 암호화되지 않았지만 데이터 인증에 포함되는 추가 입력입니다. &lt;code&gt;additionalData&lt;/code&gt; 의 사용 은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="a48f83436ad8aa32468354573f07a9a9b6c4def3" translate="yes" xml:space="preserve">
          <source>With the exception of &lt;code&gt;MessagePort&lt;/code&gt;s being &lt;a href=&quot;events&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;s rather than &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;s, this implementation matches &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;browser &lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; 가 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; &lt;/a&gt; 이 아닌 &lt;a href=&quot;events&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 인&lt;/a&gt; 것을 제외하고 ,이 구현은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;브라우저 &lt;/a&gt; &lt;code&gt;MessagePort&lt;/code&gt; 에 일치 합니다 .</target>
        </trans-unit>
        <trans-unit id="76d4961d795a294bf706c6cd1dc296778eaba002" translate="yes" xml:space="preserve">
          <source>With the list of module exports provided upfront, the &lt;code&gt;execute&lt;/code&gt; function will then be called at the exact point of module evaluation order for that module in the import tree.</source>
          <target state="translated">모듈 내보내기 목록을 사전에 제공 하면 가져 오기 트리에서 해당 모듈에 대한 정확한 모듈 평가 순서에서 &lt;code&gt;execute&lt;/code&gt; 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4f29e9069090db473dbd25a596b113d2b2eef46f" translate="yes" xml:space="preserve">
          <source>With the preceding loader, running &lt;code&gt;node --experimental-loader ./coffeescript-loader.mjs main.coffee&lt;/code&gt; causes &lt;code&gt;main.coffee&lt;/code&gt; to be turned into JavaScript after its source code is loaded from disk but before Node.js executes it; and so on for any &lt;code&gt;.coffee&lt;/code&gt;, &lt;code&gt;.litcoffee&lt;/code&gt; or &lt;code&gt;.coffee.md&lt;/code&gt; files referenced via &lt;code&gt;import&lt;/code&gt; statements of any loaded file.</source>
          <target state="translated">앞의 로더에서 &lt;code&gt;node --experimental-loader ./coffeescript-loader.mjs main.coffee&lt;/code&gt; 를 실행 하면 &lt;code&gt;main.coffee&lt;/code&gt; 가 디스크에서 소스 코드를로드 한 후 Node.js가 실행하기 전에 JavaScript로 전환됩니다. 로드 된 파일의 &lt;code&gt;import&lt;/code&gt; 문을 통해 참조되는 모든 &lt;code&gt;.coffee&lt;/code&gt; , &lt;code&gt;.litcoffee&lt;/code&gt; 또는 &lt;code&gt;.coffee.md&lt;/code&gt; 파일 에 대해 등등 .</target>
        </trans-unit>
        <trans-unit id="7fdbfdcd5f31d2e7aba66fbb5809b057859e2ee3" translate="yes" xml:space="preserve">
          <source>With the preceding loader, running &lt;code&gt;node --experimental-loader ./https-loader.mjs ./main.mjs&lt;/code&gt; prints the current version of CoffeeScript per the module at the URL in &lt;code&gt;main.mjs&lt;/code&gt;.</source>
          <target state="translated">위의 로더로 실행중인 &lt;code&gt;node --experimental-loader ./https-loader.mjs ./main.mjs&lt;/code&gt; 인쇄의 URL에서 모듈 당 커피 스크립트의 현재 버전 &lt;code&gt;main.mjs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb2445d428b93b1d9ea273fbb18e3604288f8c8a" translate="yes" xml:space="preserve">
          <source>With the support of async generators and iterators in JavaScript, async generators are effectively a first-class language-level stream construct at this point.</source>
          <target state="translated">JavaScript에서 비동기 생성기 및 반복자를 지원하면 비동기 생성기는 사실상 현재 최고 수준의 언어 수준 스트림 구성입니다.</target>
        </trans-unit>
        <trans-unit id="508f1c18f9debe0dd4c0c6ff186eeb7481f33c77" translate="yes" xml:space="preserve">
          <source>With this feature enabled, the &lt;code&gt;LOAD_NODE_MODULES&lt;/code&gt; changes are:</source>
          <target state="translated">이 기능을 사용하면 &lt;code&gt;LOAD_NODE_MODULES&lt;/code&gt; 변경 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="29898952c4414597f3478e805087121bf125e40d" translate="yes" xml:space="preserve">
          <source>With this loader, running:</source>
          <target state="translated">이 로더를 사용하여 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="87544397313c61419dbce81557d29cbe03ec9f78" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; package scope, Node.js can be instructed to interpret a particular file as an ES module by naming it with an &lt;code&gt;.mjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; files are treated as CommonJS within a &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; package scope).</source>
          <target state="translated">내에서 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 패키지 범위, Node.js를은으로 이름을 지정하여 ES 모듈과 같은 특정 파일을 해석하도록 지시 할 수 있습니다 &lt;code&gt;.mjs&lt;/code&gt; 에 모두 있기 때문에 (확장 &lt;code&gt;.js&lt;/code&gt; 와 &lt;code&gt;.cjs&lt;/code&gt; 파일이 내 CommonJS으로 처리됩니다 &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; 패키지 범위).</target>
        </trans-unit>
        <trans-unit id="86fcf66426ef1262636ff5dc61cde3531c37f2a3" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; package, Node.js can be instructed to interpret a particular file as an &lt;a href=&quot;esm&quot;&gt;ES module&lt;/a&gt; by naming it with an &lt;code&gt;.mjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; files are treated as CommonJS within a &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; package).</source>
          <target state="translated">내에서 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 패키지, Node.js를은으로 특정 파일 해석하도록 지시 할 수 있습니다 &lt;a href=&quot;esm&quot;&gt;ES 모듈을&lt;/a&gt; 로 명명하여 &lt;code&gt;.mjs&lt;/code&gt; 에 모두 있기 때문에 (확장 &lt;code&gt;.js&lt;/code&gt; 와 &lt;code&gt;.cjs&lt;/code&gt; 파일이 내 CommonJS로 취급됩니다 &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; 패키지).</target>
        </trans-unit>
        <trans-unit id="c0a800b8b27571600ff937bb46cc2b5dfa84cd7b" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; package scope, Node.js can be instructed to interpret a particular file as CommonJS by naming it with a &lt;code&gt;.cjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.mjs&lt;/code&gt; files are treated as ES modules within a &lt;code&gt;&quot;module&quot;&lt;/code&gt; package scope).</source>
          <target state="translated">내에서 &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; 패키지 범위는 Node.js를은으로 이름을 지정하여 CommonJS 같은 특정 파일을 해석하도록 지시 할 수 있습니다 &lt;code&gt;.cjs&lt;/code&gt; 에 모두 있기 때문에 (확장 &lt;code&gt;.js&lt;/code&gt; 와 &lt;code&gt;.mjs&lt;/code&gt; 파일이 내 ES 모듈로 취급된다 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 패키지 범위).</target>
        </trans-unit>
        <trans-unit id="5fce17e1fc1d46764d50b59b00210d76e2ffc540" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; package, Node.js can be instructed to interpret a particular file as &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt; by naming it with a &lt;code&gt;.cjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.mjs&lt;/code&gt; files are treated as ES modules within a &lt;code&gt;&quot;module&quot;&lt;/code&gt; package).</source>
          <target state="translated">내에서 &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; 패키지는 Node.js를는 특정 파일 해석하도록 지시 할 수 있습니다 &lt;a href=&quot;modules&quot;&gt;CommonJS를&lt;/a&gt; 로 명명하여 &lt;code&gt;.cjs&lt;/code&gt; 에 모두 있기 때문에 (확장 &lt;code&gt;.js&lt;/code&gt; 와 &lt;code&gt;.mjs&lt;/code&gt; 파일이 내 ES 모듈로 취급된다 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 패키지).</target>
        </trans-unit>
        <trans-unit id="062724fc947c8849d3387e1819eee1c552839ad6" translate="yes" xml:space="preserve">
          <source>Within a package, the &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#packages_type&quot;&gt;&lt;code&gt;&quot;type&quot;&lt;/code&gt;&lt;/a&gt; field defines how Node.js should interpret &lt;code&gt;.js&lt;/code&gt; files. If a &lt;code&gt;package.json&lt;/code&gt; file does not have a &lt;code&gt;&quot;type&quot;&lt;/code&gt; field, &lt;code&gt;.js&lt;/code&gt; files are treated as &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;.</source>
          <target state="translated">패키지 내에서 &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#packages_type&quot;&gt; &lt;code&gt;&quot;type&quot;&lt;/code&gt; &lt;/a&gt; 필드는 Node.js가 &lt;code&gt;.js&lt;/code&gt; 파일을 해석하는 방법을 정의 합니다. 경우 &lt;code&gt;package.json&lt;/code&gt; 의 파일이 없습니다 &lt;code&gt;&quot;type&quot;&lt;/code&gt; 필드가 &lt;code&gt;.js&lt;/code&gt; 파일로 취급됩니다 &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6f6099de0275d7cce12f45f0778f6466923edf3e" translate="yes" xml:space="preserve">
          <source>Within a package, the values defined in the package&amp;rsquo;s &lt;code&gt;package.json&lt;/code&gt;&lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field can be referenced via the package&amp;rsquo;s name. For example, assuming the &lt;code&gt;package.json&lt;/code&gt; is:</source>
          <target state="translated">패키지 내에서 패키지의 &lt;code&gt;package.json&lt;/code&gt; &lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt; 필드에 정의 된 값 은 패키지 이름을 통해 참조 할 수 있습니다. 예를 들어 &lt;code&gt;package.json&lt;/code&gt; 이 다음 과 같다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="370820eaa9e0490009215285dc97963f9f462fd5" translate="yes" xml:space="preserve">
          <source>Within a worker, &lt;code&gt;process.on('error')&lt;/code&gt; may also be used.</source>
          <target state="translated">작업자 내에서 &lt;code&gt;process.on('error')&lt;/code&gt; 을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="af77b260f549d5f7dd63b4b42c896073162aa0b8" translate="yes" xml:space="preserve">
          <source>Within a worker, &lt;code&gt;process.on('message')&lt;/code&gt; may also be used.</source>
          <target state="translated">작업자 내에서 &lt;code&gt;process.on('message')&lt;/code&gt; 을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="42076897c7679f498ccc170d8884642d916c015c" translate="yes" xml:space="preserve">
          <source>Within the &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; object, key order is significant. During condition matching, earlier entries have higher priority and take precedence over later entries. &lt;em&gt;The general rule is that conditions should be from most specific to least specific in object order&lt;/em&gt;.</source>
          <target state="translated">내에서 &lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt; 개체, 키 순서가 중요합니다. 조건 일치 중에 이전 항목이 더 높은 우선 순위를 가지며 이후 항목보다 우선합니다. &lt;em&gt;일반적인 규칙은 조건이 객체 순서에서 가장 구체적인 것부터 가장 적은 것까지 지정되어야한다는 것입니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="a03122d92eae16b3e9c16945ae88dceb7d7fdcb5" translate="yes" xml:space="preserve">
          <source>Within the &lt;a href=&quot;child_process&quot;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module's &lt;code&gt;spawn()&lt;/code&gt;, &lt;code&gt;fork()&lt;/code&gt;, and &lt;code&gt;exec()&lt;/code&gt; methods, the &lt;code&gt;options.customFds&lt;/code&gt; option is deprecated. The &lt;code&gt;options.stdio&lt;/code&gt; option should be used instead.</source>
          <target state="translated">내 &lt;a href=&quot;child_process&quot;&gt; &lt;code&gt;child_process&lt;/code&gt; &lt;/a&gt; 모듈의 &lt;code&gt;spawn()&lt;/code&gt; , &lt;code&gt;fork()&lt;/code&gt; , 및 &lt;code&gt;exec()&lt;/code&gt; 메소드는 &lt;code&gt;options.customFds&lt;/code&gt; 의 옵션은 사용되지 않습니다. &lt;code&gt;options.stdio&lt;/code&gt; 의 옵션을 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="ed4df86a1d1c449942f5123d02a997d7de257959" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;transform._flush()&lt;/code&gt; implementation, the &lt;code&gt;readable.push()&lt;/code&gt; method may be called zero or more times, as appropriate. The &lt;code&gt;callback&lt;/code&gt; function must be called when the flush operation is complete.</source>
          <target state="translated">&lt;code&gt;transform._flush()&lt;/code&gt; 구현 내에서 &lt;code&gt;readable.push()&lt;/code&gt; 메소드는 적절하게 0 번 이상 호출 될 수 있습니다. &lt;code&gt;callback&lt;/code&gt; 플러시 작업이 완료되면 함수를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="1a24fe6d490179934070f782bf83dd8c88d7f94f" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;transform._flush()&lt;/code&gt; implementation, the &lt;code&gt;transform.push()&lt;/code&gt; method may be called zero or more times, as appropriate. The &lt;code&gt;callback&lt;/code&gt; function must be called when the flush operation is complete.</source>
          <target state="translated">내 &lt;code&gt;transform._flush()&lt;/code&gt; 구현은 &lt;code&gt;transform.push()&lt;/code&gt; 메소드는 적절하게 0 또는 여러 번 호출 될 수있다. &lt;code&gt;callback&lt;/code&gt; 플러시 작업이 완료되면 함수를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="125b6852cc79b26c024fce31be89c0bb22eff517" translate="yes" xml:space="preserve">
          <source>Within the Legacy API, spaces (&lt;code&gt;' '&lt;/code&gt;) and the following characters will be automatically escaped in the properties of URL objects:</source>
          <target state="translated">레거시 API 내에서 공백 ( &lt;code&gt;' '&lt;/code&gt; ) 및 다음 문자는 URL 객체의 속성에서 자동으로 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="7b09082c8ee521e51bd17ca2ba19995f402a66a3" translate="yes" xml:space="preserve">
          <source>Within the Node.js implementation of the QUIC protocol, there are three main components: the &lt;code&gt;QuicSocket&lt;/code&gt;, the &lt;code&gt;QuicSession&lt;/code&gt; and the &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">다음 QUIC 프로토콜의 Node.js를 구현 내에서 세 가지 주요 구성 요소가 &lt;code&gt;QuicSocket&lt;/code&gt; 의 &lt;code&gt;QuicSession&lt;/code&gt; 와 &lt;code&gt;QuicStream&lt;/code&gt; 은 .</target>
        </trans-unit>
        <trans-unit id="71de115ea7eca96ddac83fb457ce40a81d7b326d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--pending-deprecation&lt;/code&gt;, runtime warnings occur only for code not in &lt;code&gt;node_modules&lt;/code&gt;. This means there will not be deprecation warnings for &lt;code&gt;Buffer()&lt;/code&gt; usage in dependencies. With &lt;code&gt;--pending-deprecation&lt;/code&gt;, a runtime warning results no matter where the &lt;code&gt;Buffer()&lt;/code&gt; usage occurs.</source>
          <target state="translated">&lt;code&gt;--pending-deprecation&lt;/code&gt; 이 없으면 &lt;code&gt;node_modules&lt;/code&gt; 에 없는 코드에 대해서만 런타임 경고가 발생합니다 . 이는 종속성에서 &lt;code&gt;Buffer()&lt;/code&gt; 사용에 대한 사용 중단 경고가 없음을 의미 합니다. 함께 &lt;code&gt;--pending-deprecation&lt;/code&gt; 를 Where, 런타임 경고 결과는 상관없이 &lt;code&gt;Buffer()&lt;/code&gt; 사용이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e417b3147471af07c80250cfd0767ce3deae13e0" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--pending-deprecation&lt;/code&gt;, runtime warnings occur only for exports resolutions not in &lt;code&gt;node_modules&lt;/code&gt;. This means there will not be deprecation warnings for &lt;code&gt;&quot;exports&quot;&lt;/code&gt; in dependencies. With &lt;code&gt;--pending-deprecation&lt;/code&gt;, a runtime warning results no matter where the &lt;code&gt;&quot;exports&quot;&lt;/code&gt; usage occurs.</source>
          <target state="translated">&lt;code&gt;--pending-deprecation&lt;/code&gt; 이 없으면 &lt;code&gt;node_modules&lt;/code&gt; 에 없는 내보내기 해결에 대해서만 런타임 경고가 발생합니다 . 이는 종속성의 &lt;code&gt;&quot;exports&quot;&lt;/code&gt; 에 대한 사용 중단 경고가 없음을 의미 합니다. 함께 &lt;code&gt;--pending-deprecation&lt;/code&gt; , 런타임 경고는 상관없이 결과 &lt;code&gt;&quot;exports&quot;&lt;/code&gt; 사용이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="56d3f411141d52d4b02e0929571f8e99c9a817d7" translate="yes" xml:space="preserve">
          <source>Without a leading &lt;code&gt;'/'&lt;/code&gt;, &lt;code&gt;'./'&lt;/code&gt;, or &lt;code&gt;'../'&lt;/code&gt; to indicate a file, the module must either be a core module or is loaded from a &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">파일을 나타내는 선행 &lt;code&gt;'/'&lt;/code&gt; , &lt;code&gt;'./'&lt;/code&gt; 또는 &lt;code&gt;'../'&lt;/code&gt; 없이 모듈은 핵심 모듈이거나 &lt;code&gt;node_modules&lt;/code&gt; 폴더 에서로드 되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="d45cd8ec24f5a8c09cf96fd3d60fd8885398b31d" translate="yes" xml:space="preserve">
          <source>Without the explicit tracking added by the &lt;code&gt;WorkerPoolTaskInfo&lt;/code&gt; objects, it would appear that the callbacks are associated with the individual &lt;code&gt;Worker&lt;/code&gt; objects. However, the creation of the &lt;code&gt;Worker&lt;/code&gt;s is not associated with the creation of the tasks and does not provide information about when tasks were scheduled.</source>
          <target state="translated">&lt;code&gt;WorkerPoolTaskInfo&lt;/code&gt; 개체 에 의해 추가 된 명시 적 추적이 없으면 콜백이 개별 &lt;code&gt;Worker&lt;/code&gt; 개체 와 연결되어있는 것처럼 보입니다 . 그러나 &lt;code&gt;Worker&lt;/code&gt; 생성은 작업 생성과 관련이 없으며 작업이 예약 된시기에 대한 정보를 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="44568e9f26e0e47d85f67c8ff6f6f8246df7f35a" translate="yes" xml:space="preserve">
          <source>Word left</source>
          <target state="translated">남은 단어</target>
        </trans-unit>
        <trans-unit id="8ee82f2915df23849a7b17d370c84b9ac570711a" translate="yes" xml:space="preserve">
          <source>Word right</source>
          <target state="translated">오른쪽 단어</target>
        </trans-unit>
        <trans-unit id="026e539e2c03caa3047c3a5a6e112c6b00aad95f" translate="yes" xml:space="preserve">
          <source>Work as a no-op on a stream that has already been destroyed.</source>
          <target state="translated">이미 파괴 된 스트림에서 노옵으로 작업하세요.</target>
        </trans-unit>
        <trans-unit id="99edd8c8e615e373739d2cdd38a8942b8a573113" translate="yes" xml:space="preserve">
          <source>Worker</source>
          <target state="translated">Worker</target>
        </trans-unit>
        <trans-unit id="bb3ad4c86040df77ac9065a618741afc7e6fe24d" translate="yes" xml:space="preserve">
          <source>Worker Threads</source>
          <target state="translated">작업자 스레드</target>
        </trans-unit>
        <trans-unit id="a8be0bede91ceb6ad718250a6be05f374208c9a0" translate="yes" xml:space="preserve">
          <source>Worker support</source>
          <target state="translated">근로자 지원</target>
        </trans-unit>
        <trans-unit id="7525522a792d668c0d668b5c21340ba2343b0552" translate="yes" xml:space="preserve">
          <source>Worker threads</source>
          <target state="translated">작업자 스레드</target>
        </trans-unit>
        <trans-unit id="7d1b2cb035e0f7274d760db926206b76cf58ce10" translate="yes" xml:space="preserve">
          <source>Worker threads inherit non-process-specific options by default. Refer to &lt;a href=&quot;#worker_threads_new_worker_filename_options&quot;&gt;&lt;code&gt;Worker constructor options&lt;/code&gt;&lt;/a&gt; to know how to customize worker thread options, specifically &lt;code&gt;argv&lt;/code&gt; and &lt;code&gt;execArgv&lt;/code&gt; options.</source>
          <target state="translated">작업자 스레드는 기본적으로 비 프로세스 특정 옵션을 상속합니다. 작업자 스레드 옵션, 특히 &lt;code&gt;argv&lt;/code&gt; 및 &lt;code&gt;execArgv&lt;/code&gt; 옵션 을 사용자 지정하는 방법 은 &lt;a href=&quot;#worker_threads_new_worker_filename_options&quot;&gt; &lt;code&gt;Worker constructor options&lt;/code&gt; &lt;/a&gt; 을 참조 하세요.</target>
        </trans-unit>
        <trans-unit id="a7bd96c1301ecc33bdde8b9a7616014344363a30" translate="yes" xml:space="preserve">
          <source>Worker threads will now use a copy of the parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt; by default, configurable through the &lt;code&gt;env&lt;/code&gt; option of the &lt;code&gt;Worker&lt;/code&gt; constructor.</source>
          <target state="translated">작업자 스레드는 이제 기본적으로 부모 스레드의 &lt;code&gt;process.env&lt;/code&gt; 사본을 사용하며 &lt;code&gt;Worker&lt;/code&gt; 생성자 의 &lt;code&gt;env&lt;/code&gt; 옵션을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93f0aed841cd2508c8f0a145d49b6fb5194c2db5" translate="yes" xml:space="preserve">
          <source>Workers (threads) are useful for performing CPU-intensive JavaScript operations. They do not help much with I/O-intensive work. The Node.js built-in asynchronous I/O operations are more efficient than Workers can be.</source>
          <target state="translated">작업자 (스레드)는 CPU 집약적 인 JavaScript 작업을 수행하는 데 유용합니다. I / O 집약적 인 작업에는별로 도움이되지 않습니다. Node.js 기본 제공 비동기 I / O 작업은 작업자가 할 수있는 것보다 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="6bd9d3a4fd785ea3f118b263af339d35d0d69b69" translate="yes" xml:space="preserve">
          <source>Workers (threads) are useful for performing CPU-intensive JavaScript operations. They will not help much with I/O-intensive work. Node.js&amp;rsquo;s built-in asynchronous I/O operations are more efficient than Workers can be.</source>
          <target state="translated">작업자 (스레드)는 CPU를 많이 사용하는 JavaScript 작업을 수행하는 데 유용합니다. I / O 집약적 인 작업에는 큰 도움이되지 않습니다. Node.js의 내장 비동기 I / O 작업은 작업자보다 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="6aaf9b869206de29e79682eff306f67eba9fb067" translate="yes" xml:space="preserve">
          <source>Workers are now included in the report.</source>
          <target state="translated">이제 작업자가 보고서에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="32c156f4120dbff1b01165ba34dc20fbf7cb15d1" translate="yes" xml:space="preserve">
          <source>Workers will call &lt;code&gt;process.exit(0)&lt;/code&gt; if the &lt;code&gt;'disconnect'&lt;/code&gt; event occurs on &lt;code&gt;process&lt;/code&gt; and &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt;. This protects against accidental disconnection.</source>
          <target state="translated">노동자는 호출 &lt;code&gt;process.exit(0)&lt;/code&gt; 경우 &lt;code&gt;'disconnect'&lt;/code&gt; 이벤트가 발생 &lt;code&gt;process&lt;/code&gt; 과 &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; 가 없는 &lt;code&gt;true&lt;/code&gt; . 이것은 실수로 분리되는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="94c55bc4e2625d29f89775dbe794f74b359f2824" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Functions</source>
          <target state="translated">자바 스크립트 함수 작업</target>
        </trans-unit>
        <trans-unit id="dd0d94c5173cefadd81e71498d52e9ffcecfc3a0" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Properties</source>
          <target state="translated">JavaScript 속성으로 작업</target>
        </trans-unit>
        <trans-unit id="ee3e162950e57e3ffb1353d33e108696b8bc1725" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Values</source>
          <target state="translated">JavaScript 값으로 작업</target>
        </trans-unit>
        <trans-unit id="304db6c8acf52e9ca4407908d6ca78a88ac2918d" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Values - Abstract Operations</source>
          <target state="translated">JavaScript 값 작업-추상 작업</target>
        </trans-unit>
        <trans-unit id="9cdd67e5cb2e225c5c0b8b1ce9482a821dbe89a5" translate="yes" xml:space="preserve">
          <source>Working with JavaScript functions</source>
          <target state="translated">JavaScript 함수 작업</target>
        </trans-unit>
        <trans-unit id="255dcfaf721dcf1dd55894d1a1d93ee0a8e1f0cc" translate="yes" xml:space="preserve">
          <source>Working with JavaScript properties</source>
          <target state="translated">JavaScript 속성 작업</target>
        </trans-unit>
        <trans-unit id="ca5e66ec209f34b618d4d05c944a86b377ff913f" translate="yes" xml:space="preserve">
          <source>Working with JavaScript values</source>
          <target state="translated">JavaScript 값 작업</target>
        </trans-unit>
        <trans-unit id="8f0d60670f7f9025ead1a51ac2db4bab8d4c1a28" translate="yes" xml:space="preserve">
          <source>Working with JavaScript values and abstract operations</source>
          <target state="translated">JavaScript 값 및 추상 연산 작업</target>
        </trans-unit>
        <trans-unit id="a1423e2e798a017cd435a74859b4b48f6c9e1eba" translate="yes" xml:space="preserve">
          <source>Would generate the output:</source>
          <target state="translated">출력을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="a60ec44f3e34e2fc665fcd9d6bf835697ce35472" translate="yes" xml:space="preserve">
          <source>Wrapping C++ objects</source>
          <target state="translated">C ++ 객체 감싸기</target>
        </trans-unit>
        <trans-unit id="ae49cf3e60a72b1c1ca1223f4465337457a32e0e" translate="yes" xml:space="preserve">
          <source>Wrapping and unwrapping keys</source>
          <target state="translated">키 래핑 및 래핑 해제</target>
        </trans-unit>
        <trans-unit id="cb06ed8f59f8e191210d4b09f30961561267829c" translate="yes" xml:space="preserve">
          <source>Wraps a function within a new function that measures the running time of the wrapped function. A &lt;code&gt;PerformanceObserver&lt;/code&gt; must be subscribed to the &lt;code&gt;'function'&lt;/code&gt; event type in order for the timing details to be accessed.</source>
          <target state="translated">랩핑 된 함수의 실행 시간을 측정하는 새로운 함수 내에 함수를 랩핑합니다. &lt;code&gt;PerformanceObserver&lt;/code&gt; 는 에 가입해야한다 &lt;code&gt;'function'&lt;/code&gt; 타이밍 정보에 액세스 할 수 있도록하려면 이벤트 유형.</target>
        </trans-unit>
        <trans-unit id="ebbc2c554bd0547eeb3f522660396f7b8b5cfb4e" translate="yes" xml:space="preserve">
          <source>Wraps a native instance in a JavaScript object. The native instance can be retrieved later using &lt;code&gt;napi_unwrap()&lt;/code&gt;.</source>
          <target state="translated">기본 인스턴스를 JavaScript 객체로 래핑합니다. 기본 인스턴스는 나중에 &lt;code&gt;napi_unwrap()&lt;/code&gt; 사용하여 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd35487a2eb7da40332f7fc41452378d92a72445" translate="yes" xml:space="preserve">
          <source>Writable</source>
          <target state="translated">Writable</target>
        </trans-unit>
        <trans-unit id="6dd1e6b70d2eb237d05773b74a2d7185e892ad13" translate="yes" xml:space="preserve">
          <source>Writable Streams</source>
          <target state="translated">쓰기 가능한 스트림</target>
        </trans-unit>
        <trans-unit id="86793abc57b7f140d05eafeb0e1a06f397559249" translate="yes" xml:space="preserve">
          <source>Writable streams</source>
          <target state="translated">쓰기 가능한 스트림</target>
        </trans-unit>
        <trans-unit id="00af705aff8c6b3697473cee8f797f564e4c1b63" translate="yes" xml:space="preserve">
          <source>Writable streams are an abstraction for a &lt;em&gt;destination&lt;/em&gt; to which data is written.</source>
          <target state="translated">쓰기 가능한 스트림은 데이터가 기록되는 &lt;em&gt;대상&lt;/em&gt; 에 대한 추상화 입니다.</target>
        </trans-unit>
        <trans-unit id="93d3d897c11d8aae9c1294da774224aade8271d4" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">쓰기 &lt;code&gt;buffer&lt;/code&gt; 파일에 의해 지정된 &lt;code&gt;fd&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc6f50c4f7427dda3b658235f0762dbc83479459" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;buffer&lt;/code&gt; is a normal object, it must have an own &lt;code&gt;toString&lt;/code&gt; function property.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; 로 지정된 파일에 &lt;code&gt;buffer&lt;/code&gt; 를 씁니다 . 경우 &lt;code&gt;buffer&lt;/code&gt; 보통의 객체이며, 그것은 자신이 있어야합니다 &lt;code&gt;toString&lt;/code&gt; 기능 속성을.</target>
        </trans-unit>
        <trans-unit id="4cff7cc1f79a86945f495b6f1c3da210c50c3fa3" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file.</source>
          <target state="translated">파일에 &lt;code&gt;buffer&lt;/code&gt; 를 씁니다 .</target>
        </trans-unit>
        <trans-unit id="bc5b60ee4cb51da03f87e3638498bd67f716e9f2" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;string&lt;/code&gt; is not a string, or an object with an own &lt;code&gt;toString&lt;/code&gt; function property, then an exception is thrown.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; 로 지정된 파일에 &lt;code&gt;string&lt;/code&gt; 을 씁니다 . 경우 &lt;code&gt;string&lt;/code&gt; 문자열, 또는 자신의 가진 개체가 아닙니다 &lt;code&gt;toString&lt;/code&gt; 기능 속성, 다음 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e90d07d868ba3b83ba0216e05e8251d164962bc9" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;string&lt;/code&gt; is not a string, then the value will be coerced to one.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; 로 지정된 파일에 &lt;code&gt;string&lt;/code&gt; 을 씁니다 . &lt;code&gt;string&lt;/code&gt; 이 문자열 이 아닌 경우 값은 1로 강제됩니다.</target>
        </trans-unit>
        <trans-unit id="23d73723d6b78ad57cc38c0dfd0f3e1b71a24ff7" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file. If &lt;code&gt;string&lt;/code&gt; is not a string, or an object with an own &lt;code&gt;toString&lt;/code&gt; function property, then an exception is thrown.</source>
          <target state="translated">파일에 &lt;code&gt;string&lt;/code&gt; 을 씁니다 . 경우 &lt;code&gt;string&lt;/code&gt; 문자열, 또는 자신의 가진 개체가 아닙니다 &lt;code&gt;toString&lt;/code&gt; 기능 속성, 다음 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0bea8dcde86bb9d8107b916db603faf4f0333db7" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file. If &lt;code&gt;string&lt;/code&gt; is not a string, then the value will be coerced to one.</source>
          <target state="translated">파일에 &lt;code&gt;string&lt;/code&gt; 을 씁니다 . &lt;code&gt;string&lt;/code&gt; 이 문자열 이 아닌 경우 값은 1로 강제됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
