<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="95fbb303d7117ac0cc3ddd8c21e8aa6323d739de" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the device containing the file.</source>
          <target state="translated">파일이 포함 된 장치의 숫자 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="5bcfd36761a1de493eeb09cab611d6b7581ca7fe" translate="yes" xml:space="preserve">
          <source>The numeric representation of the local port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">로컬 포트의 숫자 표현. 예를 들어, &lt;code&gt;80&lt;/code&gt; 또는 &lt;code&gt;21&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="042883a8dd9e1f35f72278a7a8626cb40d0978ea" translate="yes" xml:space="preserve">
          <source>The numeric representation of the remote port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">원격 포트의 숫자 표현. 예를 들어, &lt;code&gt;80&lt;/code&gt; 또는 &lt;code&gt;21&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b62dd787bc222e91a4a0ed4bf6ba392d5a6fb778" translate="yes" xml:space="preserve">
          <source>The numeric stream identifier of this &lt;code&gt;Http2Stream&lt;/code&gt; instance. Set to &lt;code&gt;undefined&lt;/code&gt; if the stream identifier has not yet been assigned.</source>
          <target state="translated">이 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스 의 숫자 스트림 식별자입니다 . 스트림 식별자가 아직 할당 &lt;code&gt;undefined&lt;/code&gt; 경우 undefined로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa8f383702a5ceae99ce4b389c67ad72755ba3f7" translate="yes" xml:space="preserve">
          <source>The numeric user identifier of the user that owns the file (POSIX).</source>
          <target state="translated">파일을 소유 한 사용자의 숫자 사용자 식별자 (POSIX).</target>
        </trans-unit>
        <trans-unit id="5cb1b68058d104a308062e11d73d1e40f866b4ff" translate="yes" xml:space="preserve">
          <source>The object no longer accidentally exposes native C++ bindings.</source>
          <target state="translated">개체가 더 이상 실수로 네이티브 C ++ 바인딩을 노출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9383b10ddf25c0ce6d97c93198a1bf00d5916ca1" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;querystring.parse()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.parse()&lt;/code&gt; 메소드 &lt;em&gt;가&lt;/em&gt; 리턴 한 오브젝트 는 JavaScript &lt;code&gt;Object&lt;/code&gt; 로부터 프로토 타입으로 상속 &lt;em&gt;되지 않습니다&lt;/em&gt; . 즉 , &lt;code&gt;obj.toString()&lt;/code&gt; , &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; 등의 일반적인 &lt;code&gt;Object&lt;/code&gt; 메서드 는 정의되어 &lt;em&gt;있지 않으며 작동하지 않습니다&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="be819bdae9121513238d1f9a8e195544167c627a" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;response.getHeaders()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;response.getHeaders()&lt;/code&gt; 메소드 &lt;em&gt;가&lt;/em&gt; 리턴 한 오브젝트 는 JavaScript &lt;code&gt;Object&lt;/code&gt; 로부터 프로토 타입으로 상속 &lt;em&gt;되지 않습니다&lt;/em&gt; . 즉 , &lt;code&gt;obj.toString()&lt;/code&gt; , &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; 등의 일반적인 &lt;code&gt;Object&lt;/code&gt; 메서드 는 정의되어 &lt;em&gt;있지 않으며 작동하지 않습니다&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ebb203e4256fb19d4ef99599ca9b09d60bab677" translate="yes" xml:space="preserve">
          <source>The object that acts as the namespace for all W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; related functionality. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla Developer Network&lt;/a&gt; for usage and compatibility.</source>
          <target state="translated">모든 W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; 관련 기능 의 네임 스페이스 역할을하는 개체입니다 . &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla 개발자 네트워크&lt;/a&gt; 참조사용법과 호환성에 대해서는 를 .</target>
        </trans-unit>
        <trans-unit id="b541c74cc18aaa314b7c832f7d31793b35808668" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">여기에 나열된 객체는 Node.js에만 해당됩니다. 가 있습니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;내장 된 객체&lt;/a&gt; 또한 전 세계적으로 액세스 할 수있는 자바 스크립트 언어 자체의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="a5307f8ae4e7b8daeba7438d364931e5ea281096" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are a number of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">여기에 나열된 객체는 Node.js에만 해당됩니다. JavaScript 언어 자체의 일부인 전 세계적으로 액세스 할 수 있는 많은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;내장 객체&lt;/a&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="499501b23d67779dbab01a6a26119c1c65a4262b" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.setupMaster()&lt;/code&gt; 를 통해 설정할 수없는 워커의 유일한 속성은 &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; &lt;/a&gt; 전달 된 &lt;code&gt;env&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dc78f21c4e5c2db90b51724d6195216ddadfbc62" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;code&gt;.fork()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.setupMaster()&lt;/code&gt; 를 통해 설정할 수없는 작업자의 유일한 속성은 &lt;code&gt;.fork()&lt;/code&gt; 전달 된 &lt;code&gt;env&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c18120e27e4c6e292bcb271ec4406958e025cda8" translate="yes" xml:space="preserve">
          <source>The only way to know for sure that the datagram has been sent is by using a &lt;code&gt;callback&lt;/code&gt;. If an error occurs and a &lt;code&gt;callback&lt;/code&gt; is given, the error will be passed as the first argument to the &lt;code&gt;callback&lt;/code&gt;. If a &lt;code&gt;callback&lt;/code&gt; is not given, the error is emitted as an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;socket&lt;/code&gt; object.</source>
          <target state="translated">데이터 그램이 전송되었는지 확인하는 유일한 방법은 &lt;code&gt;callback&lt;/code&gt; 을 사용하는 것 입니다. 에러가 발생하고 &lt;code&gt;callback&lt;/code&gt; 이 주어지면, 에러는 &lt;code&gt;callback&lt;/code&gt; 대한 첫 번째 인수로 전달됩니다 . 경우 &lt;code&gt;callback&lt;/code&gt; 주어지지 않는 오류는로 방출되는 &lt;code&gt;'error'&lt;/code&gt; 온 이벤트 &lt;code&gt;socket&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="7647e89cb4fdb8b632085740a5be4e8b940e567a" translate="yes" xml:space="preserve">
          <source>The operating system CPU architecture for which the Node.js binary was compiled. Possible values are: &lt;code&gt;'arm'&lt;/code&gt;, &lt;code&gt;'arm64'&lt;/code&gt;, &lt;code&gt;'ia32'&lt;/code&gt;, &lt;code&gt;'mips'&lt;/code&gt;,&lt;code&gt;'mipsel'&lt;/code&gt;, &lt;code&gt;'ppc'&lt;/code&gt;, &lt;code&gt;'ppc64'&lt;/code&gt;, &lt;code&gt;'s390'&lt;/code&gt;, &lt;code&gt;'s390x'&lt;/code&gt;, &lt;code&gt;'x32'&lt;/code&gt;, and &lt;code&gt;'x64'&lt;/code&gt;.</source>
          <target state="translated">Node.js 바이너리가 컴파일 된 운영 체제 CPU 아키텍처입니다. 가능한 값은 &lt;code&gt;'arm'&lt;/code&gt; , &lt;code&gt;'arm64'&lt;/code&gt; , &lt;code&gt;'ia32'&lt;/code&gt; , &lt;code&gt;'mips'&lt;/code&gt; , &lt;code&gt;'mipsel'&lt;/code&gt; , &lt;code&gt;'ppc'&lt;/code&gt; , &lt;code&gt;'ppc64'&lt;/code&gt; , &lt;code&gt;'s390'&lt;/code&gt; , &lt;code&gt;'s390x'&lt;/code&gt; , &lt;code&gt;'x32'&lt;/code&gt; 및 &lt;code&gt;'x64'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="576168f18bf6a9c771bad8bf0ef707c41bacf3dc" translate="yes" xml:space="preserve">
          <source>The operating system-specific end-of-line marker.</source>
          <target state="translated">운영 체제 별 라인 끝 마커입니다.</target>
        </trans-unit>
        <trans-unit id="7ad3e7e145c0e7190f2d6920ff4570771b7cd38d" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;a href=&quot;#domain_domain_add_emitter&quot;&gt;&lt;code&gt;domain.add(emitter)&lt;/code&gt;&lt;/a&gt;. Removes domain handling from the specified emitter.</source>
          <target state="translated">&lt;a href=&quot;#domain_domain_add_emitter&quot;&gt; &lt;code&gt;domain.add(emitter)&lt;/code&gt; &lt;/a&gt; 의 반대입니다 . 지정된 이미 터에서 도메인 처리를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="caab31fb22afb4b240d3935cb5134e9f4f33d038" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; arguments specify a memory range within the &lt;code&gt;arrayBuffer&lt;/code&gt; that will be shared by the &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">선택적인 &lt;code&gt;byteOffset&lt;/code&gt; 및 &lt;code&gt;length&lt;/code&gt; 인수 는 &lt;code&gt;Buffer&lt;/code&gt; 가 공유 할 &lt;code&gt;arrayBuffer&lt;/code&gt; 내의 메모리 범위를 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="f4cce0bb94cb39d36b419142e4a7c61c1067e805" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; argument can be used to replace the logging function with a different function that doesn't have any initialization or unnecessary wrapping.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 인수를 사용하여 로깅 함수를 초기화 나 불필요한 래핑이없는 다른 함수로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b96aca949c2dfad90f34208e151d92d5c4e3782" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; is a function that is invoked after the message is sent but before the child may have received it. The function is called with a single argument: &lt;code&gt;null&lt;/code&gt; on success, or an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object on failure.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 은 메시지가 전송 된 후 아이가 수신하기 전에 호출되는 함수입니다. 함수는 성공시 &lt;code&gt;null&lt;/code&gt; 또는 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 라는 단일 인수로 호출됩니다. 실패시 객체 .</target>
        </trans-unit>
        <trans-unit id="0f4bda021a4230b873e23262d38a21e96fd815c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 이벤트에 대한 일회성 리스너로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f75dfbd1ccb81dcb45cc7787f70bf228fab77d5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 &lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt; 이벤트에 대한 일회성 리스너로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="7a388a3c8ef1c6891f4bc45f8cf75c4ca428eb38" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out - this may not be immediately.</source>
          <target state="translated">선택적 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 데이터가 최종적으로 기록 될 때 실행되며 이는 즉시 수행되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f398da22b9a537a80ef95f6587773ea48b8d1eb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out, which may not be immediately.</source>
          <target state="translated">선택적인 &lt;code&gt;callback&lt;/code&gt; 매개 변수는 데이터가 최종적으로 기록 될 때 실행되며 즉시 작성되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4848a2877fc4fdda35fdaabacb12c2f613d9bff6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;constructorOpt&lt;/code&gt; argument accepts a function. If given, all frames above &lt;code&gt;constructorOpt&lt;/code&gt;, including &lt;code&gt;constructorOpt&lt;/code&gt;, will be omitted from the generated stack trace.</source>
          <target state="translated">선택적 &lt;code&gt;constructorOpt&lt;/code&gt; 인수는 함수를 허용합니다. 주어진 경우 &lt;code&gt;constructorOpt&lt;/code&gt; 를 포함하여 &lt;code&gt;constructorOpt&lt;/code&gt; 위의 모든 프레임 은 생성 된 스택 추적에서 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="1ad586a6a1c5973d95690ca8fdc184bb4c8b9ce9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. &lt;code&gt;endMark&lt;/code&gt; will be &lt;code&gt;performance.now()&lt;/code&gt; if no parameter is passed, otherwise if the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">선택적 &lt;code&gt;endMark&lt;/code&gt; 인수는 Performance Timeline의 &lt;em&gt;기존 &lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; 또는 &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; 클래스에서 제공하는 타임 스탬프 속성을 식별해야합니다 . 매개 변수가 전달되지 않으면 &lt;code&gt;endMark&lt;/code&gt; 는 &lt;code&gt;performance.now()&lt;/code&gt; 이고, 그렇지 않으면 이름이 지정된 &lt;code&gt;endMark&lt;/code&gt; 가 없으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ebd4f60ba39ba1f7450156da76a6991f33b60f2b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;flags&lt;/code&gt; argument uses &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; by default. The &lt;code&gt;flags&lt;/code&gt; is a bit field taking one of or a mix of the following flags (defined in &lt;code&gt;crypto.constants&lt;/code&gt;):</source>
          <target state="translated">선택적 &lt;code&gt;flags&lt;/code&gt; 인자는 기본적으로 &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; 을 사용합니다 . &lt;code&gt;flags&lt;/code&gt; 의 비트 필드 복용 하나 (에 정의 된 다음 플래그의 혼합이다 &lt;code&gt;crypto.constants&lt;/code&gt; ) :</target>
        </trans-unit>
        <trans-unit id="cc9f65c30553afbd1b4d82c484f88aa304441ee3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given fd. If the &lt;code&gt;statCheck&lt;/code&gt; function is provided, the &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; method will perform an &lt;code&gt;fs.fstat()&lt;/code&gt; call to collect details on the provided file descriptor.</source>
          <target state="translated">선택적 &lt;code&gt;options.statCheck&lt;/code&gt; 함수는 지정된 fd 의 &lt;code&gt;fs.Stat&lt;/code&gt; 세부 사항을 기반으로 추가 컨텐츠 헤더를 설정할 수있는 기회를 사용자 코드에 제공하도록 지정 될 수 있습니다 . 경우] &lt;code&gt;statCheck&lt;/code&gt; 의 기능이 제공되는 상기 &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; 메소드는 수행 &lt;code&gt;fs.fstat()&lt;/code&gt; 제공된 파일 디스크립터에 수집 세부 통화.</target>
        </trans-unit>
        <trans-unit id="b8ca99509b25a6ab5ee70308bafe39a1b71f3d06" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given file:</source>
          <target state="translated">옵션 &lt;code&gt;options.statCheck&lt;/code&gt; 함수는 지정된 파일 의 &lt;code&gt;fs.Stat&lt;/code&gt; 세부 사항을 기반으로 추가 컨텐츠 헤더를 설정할 수있는 기회를 사용자 코드에 제공하도록 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30b397372595487a1e26df98289fea04b5b45c5e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 콜백에 전달 된 파일 이름에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 파일 이름이 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="72091fa8c95571c209adee473c28da126c9baae6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 반환 된 파일 이름에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 파일 이름이 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="1a3104057b5c38fd9e4bdac45532ce193dd2ed26" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 파일 이름에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 파일 이름이 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="3fb2522fc8cd80845e2a3e2842ca468e7ddb1fc0" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열 또는 &lt;code&gt;encoding&lt;/code&gt; 콜백에 전달 된 링크 경로에 사용할 문자 인코딩을 지정 인코딩 속성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정된 경우, 반환 된 링크 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="bc5b6bb3218a1bc4526850c82e33474df9261f0f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열 또는 &lt;code&gt;encoding&lt;/code&gt; 리턴 된 링크 경로에 사용할 문자 인코딩을 지정 인코딩 특성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정된 경우, 반환 된 링크 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="4eb7ec41225ab0c4c453df7c72a1c959224af868" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">옵션 &lt;code&gt;options&lt;/code&gt; 인수는와 인코딩을 지정하는 문자열, 또는 객체가 될 수 &lt;code&gt;encoding&lt;/code&gt; 콜백에 전달 된 경로에 사용할 문자 인코딩을 지정 속성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="cbb0aa1d9d2894d118c49c7e7622ffb29c1d85fd" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">옵션 &lt;code&gt;options&lt;/code&gt; 인수는와 인코딩을 지정하는 문자열, 또는 객체가 될 수 &lt;code&gt;encoding&lt;/code&gt; 리턴 된 경로에 사용할 문자 인코딩을 지정 특성이 . &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 되면 반환 된 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="e5a60b46a69ed6136f940f53c21b10d9760164ad" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 경로에 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다 . 만약 &lt;code&gt;encoding&lt;/code&gt; 이 &lt;code&gt;'buffer'&lt;/code&gt; 로 설정 반환 된 경로는 &lt;code&gt;Buffer&lt;/code&gt; 객체 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="e9b1ce0f8bd5bffe9b99b0262eb3a242c5e14124" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 인코딩을 지정하는 문자열이거나 사용할 문자 인코딩을 지정 하는 &lt;code&gt;encoding&lt;/code&gt; 속성이 있는 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aadca4acdf449aec7197e7dc17a104a173c63dbb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 &lt;code&gt;mode&lt;/code&gt; (권한 및 고정 비트)를 지정하는 정수 이거나 부모 디렉터리를 만들어야하는지 여부를 나타내는 &lt;code&gt;mode&lt;/code&gt; 속성 및 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체 일 수 있습니다. &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 일 때 &lt;code&gt;fs.mkdir()&lt;/code&gt; 호출 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="c72f65bfd27c29868388c460c4fee4a3c00dfdde" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 &lt;code&gt;mode&lt;/code&gt; (권한 및 고정 비트)를 지정하는 정수 이거나 부모 디렉터리를 만들어야하는지 여부를 나타내는 &lt;code&gt;mode&lt;/code&gt; 속성 및 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체 일 수 있습니다. &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 일 때 &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; 호출 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 거부됩니다 .</target>
        </trans-unit>
        <trans-unit id="c29432448e6ca0758f3927cc455e95393816652f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적인 &lt;code&gt;options&lt;/code&gt; 인수는 정수 지정 모드 (권한 및 고정 비트) 또는 &lt;code&gt;mode&lt;/code&gt; 속성과 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체로 부모 폴더를 만들지 여부를 나타냅니다. 때 &lt;code&gt;fs.mkdir()&lt;/code&gt; 호출 &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 일 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="fe44a69d963c148c4578bad831ce5ae5a6ff0b73" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">선택적인 &lt;code&gt;options&lt;/code&gt; 인수는 정수 지정 모드 (권한 및 고정 비트) 또는 &lt;code&gt;mode&lt;/code&gt; 속성과 &lt;code&gt;recursive&lt;/code&gt; 속성이 있는 개체로 부모 폴더를 만들지 여부를 나타냅니다. &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; 호출 &lt;code&gt;path&lt;/code&gt; 가 존재하는 디렉토리 인 경우 하면 &lt;code&gt;recursive&lt;/code&gt; 가 false 인 경우에만 거부됩니다 .</target>
        </trans-unit>
        <trans-unit id="8df1775ddf99a0878d244350e8f9f93ec0727826" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument controls stream behavior. For XOF hash functions such as &lt;code&gt;'shake256'&lt;/code&gt;, the &lt;code&gt;outputLength&lt;/code&gt; option can be used to specify the desired output length in bytes.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 스트림 동작을 제어합니다. &lt;code&gt;'shake256'&lt;/code&gt; 과 같은 XOF 해시 함수의 경우 &lt;code&gt;outputLength&lt;/code&gt; 옵션을 사용하여 원하는 출력 길이를 바이트 단위로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="261827080f081a265d9518c196a9756632d4c999" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;sendHandle&lt;/code&gt; argument that may be passed to &lt;code&gt;subprocess.send()&lt;/code&gt; is for passing a TCP server or socket object to the child process. The child will receive the object as the second argument passed to the callback function registered on the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Any data that is received and buffered in the socket will not be sent to the child.</source>
          <target state="translated">&lt;code&gt;subprocess.send()&lt;/code&gt; 전달 될 수있는 선택적 &lt;code&gt;sendHandle&lt;/code&gt; 인수 는 TCP 서버 또는 소켓 객체를 자식 프로세스로 전달하기위한 것입니다. 자식은 &lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt; 이벤트 에 등록 된 콜백 함수에 전달 된 두 번째 인수로 객체를받습니다 . 소켓에서 수신 및 버퍼링 된 데이터는 자식에게 전송되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="21776c2a95a91147668e079bc279b294e52498a6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;size&lt;/code&gt; argument specifies a specific number of bytes to read. If &lt;code&gt;size&lt;/code&gt; bytes are not available to be read, &lt;code&gt;null&lt;/code&gt; will be returned &lt;em&gt;unless&lt;/em&gt; the stream has ended, in which case all of the data remaining in the internal buffer will be returned.</source>
          <target state="translated">선택적인 &lt;code&gt;size&lt;/code&gt; 인수는 읽을 특정 바이트 수를 지정합니다. &lt;code&gt;size&lt;/code&gt; 바이트를 읽을 수없는 경우 &lt;code&gt;null&lt;/code&gt; 반환됩니다 &lt;em&gt;않는&lt;/em&gt; 스트림이 종료 된 내부 버퍼에 남아있는 모든 데이터가 반환 될 경우.</target>
        </trans-unit>
        <trans-unit id="7dcc1ff991ba74f3e2341e794b5bd2a7209b9bd5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;targetStart&lt;/code&gt;, &lt;code&gt;targetEnd&lt;/code&gt;, &lt;code&gt;sourceStart&lt;/code&gt;, and &lt;code&gt;sourceEnd&lt;/code&gt; arguments can be used to limit the comparison to specific ranges within &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; respectively.</source>
          <target state="translated">선택적 &lt;code&gt;targetStart&lt;/code&gt; , &lt;code&gt;targetEnd&lt;/code&gt; , &lt;code&gt;sourceStart&lt;/code&gt; 및 &lt;code&gt;sourceEnd&lt;/code&gt; 인수를 사용하여 비교를 특정 범위 내로 제한 할 수 있습니다 &lt;code&gt;target&lt;/code&gt; 및 &lt;code&gt;buf&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de8fd304a1c7493a27d13d17ca2a7665914145e8" translate="yes" xml:space="preserve">
          <source>The optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid.</source>
          <target state="translated">선택적 반환 된 참조는 초기에 약한 참조로, 참조 카운트가 0임을 의미합니다. 일반적으로이 참조 카운트는 인스턴스가 유효한 상태를 유지해야하는 비동기 작업 중에 일시적으로 증가합니다.</target>
        </trans-unit>
        <trans-unit id="2bf5d71ef6bb11c383df71dca6fed4c4d1e8880f" translate="yes" xml:space="preserve">
          <source>The output of running this script is:</source>
          <target state="translated">이 스크립트를 실행 한 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="45989adee27623dee9b58303d643cfed64b9aa3e" translate="yes" xml:space="preserve">
          <source>The owner may read, write and execute the file.</source>
          <target state="translated">소유자는 파일을 읽고 쓰고 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="705e766de26998db30b9b74945357c8783455fd0" translate="yes" xml:space="preserve">
          <source>The package scope applies not only to initial entry points (&lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt;) but also to files referenced by &lt;code&gt;import&lt;/code&gt; statements and &lt;code&gt;import()&lt;/code&gt; expressions.</source>
          <target state="translated">패키지 범위는 초기 진입 점 ( &lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt; )뿐만 아니라 &lt;code&gt;import&lt;/code&gt; 문 및 &lt;code&gt;import()&lt;/code&gt; 의해 참조되는 파일에도 적용됩니다 표현식에서 .</target>
        </trans-unit>
        <trans-unit id="f7564c3f9eff583a58e8d21cd99ee8d14688a3bf" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object can be a string now.</source>
          <target state="translated">전달 된 &lt;code&gt;options&lt;/code&gt; 객체는 이제 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b59339c89766317598c7665c33ea20dd610e99de" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object will never be modified.</source>
          <target state="translated">전달 된 &lt;code&gt;options&lt;/code&gt; 개체는 절대 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fb2d39c4340f5b4b6c986cba1d575aa90762c3be" translate="yes" xml:space="preserve">
          <source>The path for the main script of a worker is neither an absolute path nor a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;.</source>
          <target state="translated">작업자의 기본 스크립트 경로는 절대 경로도 아니고 &lt;code&gt;./&lt;/code&gt; 또는 &lt;code&gt;../&lt;/code&gt; 로 시작하는 상대 경로도 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="3a68f2ecb4bd3f38847a7eeccce766303a522feb" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is reading from as specified in the first argument to &lt;code&gt;fs.createReadStream()&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;readStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;readStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">첫 번째 인수에서 &lt;code&gt;fs.createReadStream()&lt;/code&gt; 지정된대로 스트림이 읽고있는 파일의 경로 입니다. &lt;code&gt;path&lt;/code&gt; 가 문자열로 전달 되면 &lt;code&gt;readStream.path&lt;/code&gt; 는 문자열이됩니다. 경우 &lt;code&gt;path&lt;/code&gt; A와 전달 &lt;code&gt;Buffer&lt;/code&gt; , 다음 &lt;code&gt;readStream.path&lt;/code&gt; 는 될 것입니다 &lt;code&gt;Buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3bb0d95641a2afd52bb195881c3abca28b19aa5" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is writing to as specified in the first argument to &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt; 의 첫 번째 인수에 지정된대로 스트림이 쓰고있는 파일의 경로 입니다. &lt;code&gt;path&lt;/code&gt; 가 문자열로 전달 되면 &lt;code&gt;writeStream.path&lt;/code&gt; 는 문자열이됩니다. 경우 &lt;code&gt;path&lt;/code&gt; A와 전달 &lt;code&gt;Buffer&lt;/code&gt; , 다음 &lt;code&gt;writeStream.path&lt;/code&gt; 는 됩니다 &lt;code&gt;Buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5303b9030ddafd814201239d3425172e5de09971" translate="yes" xml:space="preserve">
          <source>The pathname used for the main script of a worker has an unknown file extension.</source>
          <target state="translated">작업자의 기본 스크립트에 사용 된 경로 이름은 알 수없는 파일 확장자입니다.</target>
        </trans-unit>
        <trans-unit id="842995cd8000d0efb4e4627b63f283405c9de9df" translate="yes" xml:space="preserve">
          <source>The policy manifest will be used to enforce constraints on code loaded by Node.js.</source>
          <target state="translated">정책 매니페스트는 Node.js가로드 한 코드에 제약 조건을 적용하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f37ced12d39d64c1acd89371245e9dd2d45e0ac9" translate="yes" xml:space="preserve">
          <source>The port used by Node.js's debugger when enabled.</source>
          <target state="translated">활성화 된 경우 Node.js의 디버거에서 사용하는 포트입니다.</target>
        </trans-unit>
        <trans-unit id="dec6b7a7b66dcadd093ce17f9ff0d5581242e4cb" translate="yes" xml:space="preserve">
          <source>The port used by the Node.js debugger when enabled.</source>
          <target state="translated">활성화 된 경우 Node.js 디버거에서 사용하는 포트입니다.</target>
        </trans-unit>
        <trans-unit id="e95b5aab3ab3fba91f054dea6c27fd9fd3c7181c" translate="yes" xml:space="preserve">
          <source>The port value can be an empty string in which case the port depends on the protocol/scheme:</source>
          <target state="translated">포트 값은 빈 문자열 일 수 있으며이 경우 포트는 프로토콜 / 구성표에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="35240f5bbe9b687669eb3a21a6d605183b197a00" translate="yes" xml:space="preserve">
          <source>The port value may be a number or a string containing a number in the range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt; (inclusive). Setting the value to the default port of the &lt;code&gt;URL&lt;/code&gt; objects given &lt;code&gt;protocol&lt;/code&gt; will result in the &lt;code&gt;port&lt;/code&gt; value becoming the empty string (&lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">포트 값은 숫자 또는 &lt;code&gt;0&lt;/code&gt; 범위의 숫자를 포함하는 문자열 일 수 있습니다. 행 &lt;code&gt;65535&lt;/code&gt; (포함). &lt;code&gt;protocol&lt;/code&gt; 이 지정된 &lt;code&gt;URL&lt;/code&gt; 객체 의 기본 포트로 값을 설정하면 &lt;code&gt;port&lt;/code&gt; 값이 빈 문자열 ( &lt;code&gt;''&lt;/code&gt; )이됩니다.</target>
        </trans-unit>
        <trans-unit id="516b367bb725dc118632a0063079984861a1c67f" translate="yes" xml:space="preserve">
          <source>The preceding module supports named imports in ES modules:</source>
          <target state="translated">이전 모듈은 ES 모듈에서 명명 된 가져 오기를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f5e1752bb85ccb2347cdba3385d98029d5ceffb3" translate="yes" xml:space="preserve">
          <source>The predefined color codes are: &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;yellow&lt;/code&gt;. There are also &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt; and &lt;code&gt;inverse&lt;/code&gt; codes.</source>
          <target state="translated">사전 정의 된 색상 코드는 &lt;code&gt;white&lt;/code&gt; , &lt;code&gt;grey&lt;/code&gt; , &lt;code&gt;black&lt;/code&gt; , &lt;code&gt;blue&lt;/code&gt; , &lt;code&gt;cyan&lt;/code&gt; , &lt;code&gt;green&lt;/code&gt; , &lt;code&gt;magenta&lt;/code&gt; , &lt;code&gt;red&lt;/code&gt; 및 &lt;code&gt;yellow&lt;/code&gt; 입니다. 도 있습니다 &lt;code&gt;bold&lt;/code&gt; , &lt;code&gt;italic&lt;/code&gt; , &lt;code&gt;underline&lt;/code&gt; 및 &lt;code&gt;inverse&lt;/code&gt; 코드.</target>
        </trans-unit>
        <trans-unit id="a8feec306734bdd21e98aea495e525ccece43f81" translate="yes" xml:space="preserve">
          <source>The previously undocumented &lt;code&gt;timers.active()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If re-referencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_ref&quot;&gt;&lt;code&gt;timeout.ref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">이전에 문서화되지 않은 &lt;code&gt;timers.active()&lt;/code&gt; 는 더 이상 사용되지 않습니다. 공개적으로 문서화 된 &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; &lt;/a&gt; 대신 사용하십시오. 시간 초과를 다시 참조 &lt;a href=&quot;timers#timers_timeout_ref&quot;&gt; &lt;code&gt;timeout.ref()&lt;/code&gt; &lt;/a&gt; 경우 timeout.ref () 를 Node.js 10부터 성능에 영향을주지 않고 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fa2c8b129174c0fc077a4918a3e4b0112acc742" translate="yes" xml:space="preserve">
          <source>The previously undocumented and &quot;private&quot; &lt;code&gt;timers._unrefActive()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If unreferencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_unref&quot;&gt;&lt;code&gt;timeout.unref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">이전에 문서화되지 않은 &quot;비공개&quot; &lt;code&gt;timers._unrefActive()&lt;/code&gt; 는 더 이상 사용되지 않습니다. 공개적으로 문서화 된 &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; &lt;/a&gt; 대신 사용하십시오. 시간 초과를 참조 해제 &lt;a href=&quot;timers#timers_timeout_unref&quot;&gt; &lt;code&gt;timeout.unref()&lt;/code&gt; &lt;/a&gt; 경우 timeout.unref () Node.js 10부터 를 성능 영향없이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7e811ac507e899887eadb3b761ab472eb68ab19" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to accommodate a situation in which several small chunks are written to the stream in rapid succession. Instead of immediately forwarding them to the underlying destination, &lt;code&gt;writable.cork()&lt;/code&gt; buffers all the chunks until &lt;code&gt;writable.uncork()&lt;/code&gt; is called, which will pass them all to &lt;code&gt;writable._writev()&lt;/code&gt;, if present. This prevents a head-of-line blocking situation where data is being buffered while waiting for the first small chunk to be processed. However, use of &lt;code&gt;writable.cork()&lt;/code&gt; without implementing &lt;code&gt;writable._writev()&lt;/code&gt; may have an adverse effect on throughput.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; 의 주요 목적은 여러 개의 작은 청크가 연속적으로 스트림에 기록되는 상황을 수용하는 것입니다. 대신에 즉시 기본 목적지로 포워딩, &lt;code&gt;writable.cork()&lt;/code&gt; 까지 모든 청크 버퍼 &lt;code&gt;writable.uncork()&lt;/code&gt; 에 모두 합격이라고, &lt;code&gt;writable._writev()&lt;/code&gt; 이 존재하는 경우를. 이렇게하면 첫 번째 작은 청크가 처리되기를 기다리는 동안 데이터가 버퍼링되는 헤드 오브 라인 차단 상황을 방지 할 수 있습니다. 그러나, 사용 &lt;code&gt;writable.cork()&lt;/code&gt; 구현이없는 &lt;code&gt;writable._writev()&lt;/code&gt; 처리량에 좋지 않은 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="301d6f86720b7caebae0c21957576c82619859d7" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to avoid a situation where writing many small chunks of data to a stream do not cause a backup in the internal buffer that would have an adverse impact on performance. In such situations, implementations that implement the &lt;code&gt;writable._writev()&lt;/code&gt; method can perform buffered writes in a more optimized manner.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; 의 주요 목적은 많은 작은 데이터 청크를 스트림에 쓰더라도 성능에 부정적인 영향을 미치는 내부 버퍼의 백업을 유발하지 않는 상황을 피하는 것입니다. 이러한 상황에서, &lt;code&gt;writable._writev()&lt;/code&gt; 메소드를 구현하는 구현은 보다 최적화 된 방식으로 버퍼 된 쓰기를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64985acfc6f181ff488fc6817834027a19e84721" translate="yes" xml:space="preserve">
          <source>The process could not be killed, or</source>
          <target state="translated">프로세스를 종료 할 수 없거나</target>
        </trans-unit>
        <trans-unit id="e873e5b18616841f05efdd386c89f6ba201225db" translate="yes" xml:space="preserve">
          <source>The process could not be spawned, or</source>
          <target state="translated">프로세스를 스폰 할 수 없거나</target>
        </trans-unit>
        <trans-unit id="4bfa64f515a1b0181d935c05f6c69ffff6fbfd05" translate="yes" xml:space="preserve">
          <source>The process object. See the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt; section.</source>
          <target state="translated">프로세스 객체. 참조&lt;a href=&quot;process#process_process&quot;&gt; &lt;code&gt;process&lt;/code&gt; 객체&lt;/a&gt; 섹션을 .</target>
        </trans-unit>
        <trans-unit id="19a87c186d9fc90f05f38ed4cba9e32faeadbae9" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt;. This corresponds to &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-14&lt;/code&gt; on all other platforms.</source>
          <target state="translated">&lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; 초과 및 &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; 미만 의 프로세스 스케줄링 우선 순위 입니다. 이것은 &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; Windows의 HIGH_PRIORITY_CLASS 에 다른 모든 플랫폼 에서는 &lt;code&gt;-14&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a8b5e718648dcd24e1f04e65ec6ef9126189b362" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_LOW&lt;/code&gt; and below &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt;. This corresponds to &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;10&lt;/code&gt; on all other platforms.</source>
          <target state="translated">&lt;code&gt;PRIORITY_LOW&lt;/code&gt; 초과 및 &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 미만 의 프로세스 스케줄링 우선 순위 입니다. 이것은 &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; Windows의 BELOW_NORMAL_PRIORITY_CLASS 에 다른 모든 플랫폼 에서는 &lt;code&gt;10&lt;/code&gt; 의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="07f606e78cf90aabba4bf4bb1ef36128cea4c14f" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;. This corresponds to &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-7&lt;/code&gt; on all other platforms.</source>
          <target state="translated">&lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 초과 및 &lt;code&gt;PRIORITY_HIGH&lt;/code&gt; 미만 의 프로세스 스케줄링 우선 순위 입니다. 이것은 Windows의 &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; 에 해당 하며 좋은 값은 &lt;code&gt;-7&lt;/code&gt; 입니다. 다른 모든 플랫폼 입니다.</target>
        </trans-unit>
        <trans-unit id="681821ab96576ebe60cbcdd765ffba967ab60b31" translate="yes" xml:space="preserve">
          <source>The properties available on the assigned network address object include:</source>
          <target state="translated">할당 된 네트워크 주소 개체에서 사용할 수있는 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="15089f6598bc6c72817c26575069415cd75bbb85" translate="yes" xml:space="preserve">
          <source>The properties included on each object include:</source>
          <target state="translated">각 객체에 포함 된 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="32cbb03653d9c062d765fd9dedb500b4ce391d11" translate="yes" xml:space="preserve">
          <source>The protocol identifier (&lt;code&gt;'h2'&lt;/code&gt; in the examples) may be any valid &lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN Protocol ID&lt;/a&gt;.</source>
          <target state="translated">프로토콜 식별자 ( 예에서 &lt;code&gt;'h2'&lt;/code&gt; )는 유효한 &lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN 프로토콜 ID&lt;/a&gt; 일 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="682dd72da7ec2fc2dd775aaa85fc979fb00717b6" translate="yes" xml:space="preserve">
          <source>The provided &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt; of the context are made visible through the Inspector API.</source>
          <target state="translated">제공된 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;origin&lt;/code&gt; 컨텍스트 는 Inspector API를 통해 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0c874b3f599c2f388ee9adaf7c51cc16c6ca9ab2" translate="yes" xml:space="preserve">
          <source>The provided address family is not understood by the Node.js API.</source>
          <target state="translated">제공된 주소 계열은 Node.js API에 의해 이해되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0d5a7141a0afa24f729a66e2573aa9e735d8af9e" translate="yes" xml:space="preserve">
          <source>The range (&lt;code&gt;max - min&lt;/code&gt;) must be less than 2&lt;sup&gt;48&lt;/sup&gt;. &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; must be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;safe integers&lt;/a&gt;.</source>
          <target state="translated">범위 ( &lt;code&gt;max - min&lt;/code&gt; )는 2 &lt;sup&gt;48&lt;/sup&gt; 미만이어야합니다 . &lt;code&gt;min&lt;/code&gt; 및 &lt;code&gt;max&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;안전한 정수&lt;/a&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="a6ce53307f0479c8ec03dffd96128613abfed0ef" translate="yes" xml:space="preserve">
          <source>The raw headers as they were received are retained in the &lt;code&gt;rawHeaders&lt;/code&gt; property, which is an array of &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt;. For example, the previous message header object might have a &lt;code&gt;rawHeaders&lt;/code&gt; list like the following:</source>
          <target state="translated">수신 된 원시 헤더는 &lt;code&gt;rawHeaders&lt;/code&gt; 속성에 유지되며 이는 &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt; 의 배열입니다 . 예를 들어, 이전 메시지 헤더 객체에는 &lt;code&gt;rawHeaders&lt;/code&gt; 가있을 수 있습니다. 에는 다음과 같은 목록 .</target>
        </trans-unit>
        <trans-unit id="83f581d673868d237fedae3567c8e5ca1905d79d" translate="yes" xml:space="preserve">
          <source>The raw request/response headers list exactly as they were received.</source>
          <target state="translated">원시 요청 / 응답 헤더는 수신 한 그대로 나열합니다.</target>
        </trans-unit>
        <trans-unit id="b985d4474679d7d8436722ff0ebeff67e3eb82aa" translate="yes" xml:space="preserve">
          <source>The raw request/response trailer keys and values exactly as they were received. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">원시 요청 / 응답 예고편 키 및 값은 정확히 그대로 받았습니다. &lt;code&gt;'end'&lt;/code&gt; 에서만 채워짐 이벤트 .</target>
        </trans-unit>
        <trans-unit id="5d9dff5cd0c71c07633537409b66578e6b80505c" translate="yes" xml:space="preserve">
          <source>The read-only path of this directory as was provided to &lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt;&lt;code&gt;fs.opendir()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt;&lt;code&gt;fs.opendirSync()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt;&lt;code&gt;fsPromises.opendir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt; &lt;code&gt;fs.opendir()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt; &lt;code&gt;fs.opendirSync()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt; &lt;code&gt;fsPromises.opendir()&lt;/code&gt; &lt;/a&gt; 에 제공된이 디렉토리의 읽기 전용 경로입니다 .</target>
        </trans-unit>
        <trans-unit id="34df59cd5882c36bd6c67c750c332e85dde52821" translate="yes" xml:space="preserve">
          <source>The reading will begin at the current position. For example, if the file already had &lt;code&gt;'Hello World&lt;/code&gt;' and six bytes are read with the file descriptor, the call to &lt;code&gt;fs.readFile()&lt;/code&gt; with the same file descriptor, would give &lt;code&gt;'World'&lt;/code&gt;, rather than &lt;code&gt;'Hello World'&lt;/code&gt;.</source>
          <target state="translated">판독은 현재 위치에서 시작됩니다. 예를 들어, 파일에 이미 &lt;code&gt;'Hello World&lt;/code&gt; '가 있고 파일 디스크립터를 사용하여 6 바이트를 읽는 경우 동일한 파일 디스크립터를 사용하여 &lt;code&gt;fs.readFile()&lt;/code&gt; 을 호출하면 &lt;code&gt;'Hello World'&lt;/code&gt; 대신 &lt;code&gt;'World'&lt;/code&gt; 가 제공 됩니다.</target>
        </trans-unit>
        <trans-unit id="4a5389685a663870c4323e668ef2d2e417308f1a" translate="yes" xml:space="preserve">
          <source>The reason for this error handling behavior is that these callbacks are running at potentially volatile points in an object's lifetime, for example during class construction and destruction. Because of this, it is deemed necessary to bring down the process quickly in order to prevent an unintentional abort in the future. This is subject to change in the future if a comprehensive analysis is performed to ensure an exception can follow the normal control flow without unintentional side effects.</source>
          <target state="translated">이 오류 처리 동작의 이유는 이러한 콜백이 개체 수명의 잠재적 변동성 지점 (예 : 클래스 구성 및 소멸 중)에서 실행되기 때문입니다. 이로 인해 미래에 의도하지 않은 중단을 방지하기 위해 프로세스를 신속하게 중단해야합니다. 예외가 의도하지 않은 부작용없이 정상적인 제어 흐름을 따를 수 있도록 포괄적 인 분석을 수행하는 경우 향후 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e95038a9c64315188042fc9eab57e4956f07d72" translate="yes" xml:space="preserve">
          <source>The reason this is problematic is because writes to &lt;code&gt;process.stdout&lt;/code&gt; in Node.js are sometimes &lt;em&gt;asynchronous&lt;/em&gt; and may occur over multiple ticks of the Node.js event loop. Calling &lt;code&gt;process.exit()&lt;/code&gt;, however, forces the process to exit &lt;em&gt;before&lt;/em&gt; those additional writes to &lt;code&gt;stdout&lt;/code&gt; can be performed.</source>
          <target state="translated">이것이 문제가되는 이유는 Node.js의 &lt;code&gt;process.stdout&lt;/code&gt; 에 대한 쓰기가 &lt;em&gt;비동기 적&lt;/em&gt; 이며 Node.js 이벤트 루프의 여러 틱에서 발생할 수 있기 때문 입니다. 그러나 &lt;code&gt;process.exit()&lt;/code&gt; 호출 하면 &lt;code&gt;stdout&lt;/code&gt; 에 대한 추가 쓰기를 수행 &lt;em&gt;하기 전에&lt;/em&gt; 프로세스가 강제 종료 됩니다.</target>
        </trans-unit>
        <trans-unit id="882e863942bbfdb2c275d570776a56f3cb7eed13" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows.</source>
          <target state="translated">재귀 옵션은 macOS 및 Windows에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="0d5da93cf7c47ffd68713f07c2a2d70da3b7c85f" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows. An &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; exception will be thrown when the option is used on a platform that does not support it.</source>
          <target state="translated">재귀 옵션은 macOS 및 Windows에서만 지원됩니다. &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; 의 옵션을 지원하지 않는 플랫폼에서 사용하는 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="96411a8d35be2600a6fa3cb907c90d1ed0ea5379" translate="yes" xml:space="preserve">
          <source>The reference must be freed once it is no longer needed.</source>
          <target state="translated">더 이상 필요하지 않은 참조는 해제해야합니다.</target>
        </trans-unit>
        <trans-unit id="6cc848b653807d38e0a4cbaec6143db941486dc6" translate="yes" xml:space="preserve">
          <source>The registered event listeners is synchronously invoked in the order they were registered.</source>
          <target state="translated">등록 된 이벤트 리스너는 등록 된 순서대로 동 기적으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="6da8026af719b1ab6b55c12dbb1cb53a3be6fd63" translate="yes" xml:space="preserve">
          <source>The report is intended for development, test and production use, to capture and preserve information for problem determination. It includes JavaScript and native stack traces, heap statistics, platform information, resource usage etc. With the report option enabled, diagnostic reports can be triggered on unhandled exceptions, fatal errors and user signals, in addition to triggering programmatically through API calls.</source>
          <target state="translated">이 보고서는 개발, 테스트 및 프로덕션 용도로 사용되어 문제를 파악하기위한 정보를 수집하고 보존합니다. 여기에는 JavaScript 및 기본 스택 추적, 힙 통계, 플랫폼 정보, 리소스 사용량 등이 포함됩니다. 보고서 옵션을 사용하면 API 호출을 통해 프로그래밍 방식으로 트리거 할뿐만 아니라 처리되지 않은 예외, 치명적 오류 및 사용자 신호에 대해 진단 보고서를 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02f104dfa09be26fcee1ec1287c9793da8d202a7" translate="yes" xml:space="preserve">
          <source>The request authority pseudo header field. It can also be accessed via &lt;code&gt;req.headers[':authority']&lt;/code&gt;.</source>
          <target state="translated">요청 권한 의사 헤더 필드 &lt;code&gt;req.headers[':authority']&lt;/code&gt; 를 통해 액세스 할 수도 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="f8cc8ec77eab284c5b1d9a9e8bee79b0a4e96211" translate="yes" xml:space="preserve">
          <source>The request inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">요청은 &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt; 에서 상속 에서 다음을 추가로 구현합니다.</target>
        </trans-unit>
        <trans-unit id="d2f1ed5fc05d92917b60ebf9072ab11385b53fc9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">문자열로 요청 메소드. 읽기 전용. 예 : &lt;code&gt;'GET'&lt;/code&gt; , &lt;code&gt;'DELETE'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0b820a151f8af96f9a8410852cebe4b9fce928d9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read-only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">문자열로 요청 메소드. 읽기 전용 예 : &lt;code&gt;'GET'&lt;/code&gt; , &lt;code&gt;'DELETE'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf2b93920ae2dda23261c83e7efa9025f30a8059" translate="yes" xml:space="preserve">
          <source>The request scheme pseudo header field indicating the scheme portion of the target URL.</source>
          <target state="translated">대상 URL의 체계 부분을 나타내는 요청 체계 의사 헤더 필드입니다.</target>
        </trans-unit>
        <trans-unit id="d62ea70efeb08e31455b4542aaf477b0d2b0fbb4" translate="yes" xml:space="preserve">
          <source>The request to promote a handle is made through &lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt;&lt;code&gt;napi_escape_handle&lt;/code&gt;&lt;/a&gt; which can only be called once.</source>
          <target state="translated">핸들 승격 요청 은 한 번만 호출 할 수있는 &lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt; &lt;code&gt;napi_escape_handle&lt;/code&gt; &lt;/a&gt; 을 통해 이루어집니다 .</target>
        </trans-unit>
        <trans-unit id="c35bb861539c1d20772a3a4da4e40cab1b2864ac" translate="yes" xml:space="preserve">
          <source>The request/response headers object.</source>
          <target state="translated">요청 / 응답 헤더 개체</target>
        </trans-unit>
        <trans-unit id="efa13e0d6f5d17d44de1820e6c6f833cd6533735" translate="yes" xml:space="preserve">
          <source>The request/response trailers object. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">요청 / 응답 트레일러 개체입니다. &lt;code&gt;'end'&lt;/code&gt; 이벤트 에서만 채워집니다 .</target>
        </trans-unit>
        <trans-unit id="76afa09b3c9e4455c22d150e86e0a878c83b5f18" translate="yes" xml:space="preserve">
          <source>The requested functionality is not supported in worker threads.</source>
          <target state="translated">요청 된 기능은 작업자 스레드에서 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="130c49b75db4d5f28d69526125533d14026a98f8" translate="yes" xml:space="preserve">
          <source>The resolve hook returns the resolved file URL and module format for a given module specifier and parent file URL:</source>
          <target state="translated">resolve 훅은 주어진 모듈 지정자와 부모 파일 URL에 대한 해결 된 파일 URL과 모듈 형식을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="01c7f5cd9e64e948205f4e8da34e92946ac36c24" translate="yes" xml:space="preserve">
          <source>The resolver can throw the following errors:</source>
          <target state="translated">리졸버는 다음 오류를 발생시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ad6fadfeabaeb9c9c66df7b9fd54f216fa3d3aa" translate="yes" xml:space="preserve">
          <source>The resolver has the following properties:</source>
          <target state="translated">리졸버에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="965055eab4b20e712cee07e74d7e15f1dc310a7e" translate="yes" xml:space="preserve">
          <source>The response inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">응답은 &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt; 에서 상속되며 다음을 추가로 구현합니다.</target>
        </trans-unit>
        <trans-unit id="b18e030ec3ca1714e02a7b098543adb935c78705" translate="yes" xml:space="preserve">
          <source>The result generally does not make any guarantees about what kinds of properties or behavior a value exposes in JavaScript. They are primarily useful for addon developers who prefer to do type checking in JavaScript.</source>
          <target state="translated">결과는 일반적으로 JavaScript에서 값이 어떤 종류의 속성이나 노출을 나타내는 지 보증하지 않습니다. JavaScript에서 형식 검사를 선호하는 애드온 개발자에게 주로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b8b8022504a26ffb5513f898bea8594dd091a830" translate="yes" xml:space="preserve">
          <source>The result of a previous call to &lt;code&gt;process.cpuUsage()&lt;/code&gt; can be passed as the argument to the function, to get a diff reading.</source>
          <target state="translated">&lt;code&gt;process.cpuUsage()&lt;/code&gt; 에 대한 이전 호출의 결과 는 diff 판독 값을 얻기 위해 함수에 인수로 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c970c11e0a87e0dc98113377ad10bd2ef4c395a" translate="yes" xml:space="preserve">
          <source>The result of this function no longer contains a fraction component on Windows.</source>
          <target state="translated">이 함수의 결과는 더 이상 Windows에서 분수 구성 요소를 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="350b994c82684bd0c40d5f8bba62015f9d892265" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;BigInt&lt;/code&gt; is calculated as: (&amp;ndash;1)&lt;sup&gt;&lt;code&gt;sign_bit&lt;/code&gt;&lt;/sup&gt; (&lt;code&gt;words[0]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;1&lt;/sup&gt; + &amp;hellip;)</source>
          <target state="translated">결과 &lt;code&gt;BigInt&lt;/code&gt; 는 다음과 같이 계산됩니다. (&amp;ndash;1) &lt;sup&gt; &lt;code&gt;sign_bit&lt;/code&gt; &lt;/sup&gt; ( &lt;code&gt;words[0]&lt;/code&gt; &amp;times; (2 &lt;sup&gt;64&lt;/sup&gt; ) &lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times; (2 &lt;sup&gt;64&lt;/sup&gt; ) &lt;sup&gt;1&lt;/sup&gt; +&amp;hellip;)</target>
        </trans-unit>
        <trans-unit id="090264918bf0db3d97f15783938c5710acd286f9" translate="yes" xml:space="preserve">
          <source>The resulting output will resemble:</source>
          <target state="translated">결과 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6592f1ecacf5d99cad7d854240afeddc010dff43" translate="yes" xml:space="preserve">
          <source>The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.</source>
          <target state="translated">경로가 루트 디렉토리로 해석되지 않으면 결과 경로가 정규화되고 후행 슬래시가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="6755c8e673605ed2b394bffd53b16e00aa04ed50" translate="yes" xml:space="preserve">
          <source>The return value &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; represents the generated key pair. When PEM encoding was selected, the respective key will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="translated">리턴 값 &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; 는 생성 된 키 쌍을 나타냅니다. PEM 인코딩을 선택하면 해당 키가 문자열이되고, 그렇지 않으면 DER로 인코딩 된 데이터가 포함 된 버퍼가됩니다.</target>
        </trans-unit>
        <trans-unit id="8540d6f242c1449e741beb63b74e073fc037812e" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns &lt;code&gt;NULL&lt;/code&gt;, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; 의 반환 값 은 모듈 의 &lt;code&gt;exports&lt;/code&gt; 개체 로 처리됩니다 . &lt;code&gt;Init&lt;/code&gt; 방법은 통해 빈 객체를 전달 &lt;code&gt;exports&lt;/code&gt; 편의를 매개 변수입니다. 경우 &lt;code&gt;Init&lt;/code&gt; 반환 &lt;code&gt;NULL&lt;/code&gt; 을 ,로 전달 된 매개 변수를 &lt;code&gt;exports&lt;/code&gt; 모듈로 내 보냅니다. N-API 모듈은 &lt;code&gt;module&lt;/code&gt; 개체를 수정할 수 없지만 모듈 의 &lt;code&gt;exports&lt;/code&gt; 속성으로 무엇이든 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74d46df7105ceb22c98097c79674b8da75df0880" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns NULL, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; 의 반환 값 은 모듈 의 &lt;code&gt;exports&lt;/code&gt; 개체 로 처리됩니다 . &lt;code&gt;Init&lt;/code&gt; 방법은 통해 빈 객체를 전달 &lt;code&gt;exports&lt;/code&gt; 편의를 매개 변수입니다. 경우 &lt;code&gt;Init&lt;/code&gt; NULL을 반환로 전달 된 매개 변수를 &lt;code&gt;exports&lt;/code&gt; 모듈로 내 보냅니다. N-API 모듈은 &lt;code&gt;module&lt;/code&gt; 객체를 수정할 수 없지만 &lt;code&gt;exports&lt;/code&gt; 로 아무것도 지정할 수 있습니다 속성으로 .</target>
        </trans-unit>
        <trans-unit id="b7768bae4378835321f00405e40f7b2cd7232e22" translate="yes" xml:space="preserve">
          <source>The return value includes fractions of a second. Use &lt;code&gt;Math.floor()&lt;/code&gt; to get whole seconds.</source>
          <target state="translated">반환 값은 1 분의 1 초를 포함합니다. 전체 초를 얻으려면 &lt;code&gt;Math.floor()&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="97d244151a2074f335e80ec7c64b042a2a7bf155" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;true&lt;/code&gt; if the internal buffer is less than the &lt;code&gt;highWaterMark&lt;/code&gt; configured when the stream was created after admitting &lt;code&gt;chunk&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; is returned, further attempts to write data to the stream should stop until the &lt;a href=&quot;#stream_event_drain&quot;&gt;&lt;code&gt;'drain'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">내부 버퍼가 &lt;code&gt;chunk&lt;/code&gt; 를 승인 한 후 스트림을 작성할 때 구성된 &lt;code&gt;highWaterMark&lt;/code&gt; 보다 작 으면 리턴 값이 &lt;code&gt;true&lt;/code&gt; 입니다. 경우 &lt;code&gt;false&lt;/code&gt; 때까지 중지해야 스트림에 데이터를 기록하기 위해, 더 시도 반환 &lt;a href=&quot;#stream_event_drain&quot;&gt; &lt;code&gt;'drain'&lt;/code&gt; &lt;/a&gt; 이벤트가 방출됩니다.</target>
        </trans-unit>
        <trans-unit id="26d76acade904502d2ab1c10b9e6ee013a9e7a40" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_arch&quot;&gt;&lt;code&gt;process.arch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 값은 &lt;a href=&quot;process#process_process_arch&quot;&gt; &lt;code&gt;process.arch&lt;/code&gt; &lt;/a&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="d2cc4b1ac76c7772ee2e1e982aae790cb286904e" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_platform&quot;&gt;&lt;code&gt;process.platform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 값은 &lt;a href=&quot;process#process_process_platform&quot;&gt; &lt;code&gt;process.platform&lt;/code&gt; &lt;/a&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="3e1ee035941771511703ba74230eaf82a6d8a77f" translate="yes" xml:space="preserve">
          <source>The return value of a handler function is ignored.</source>
          <target state="translated">핸들러 함수의 반환 값은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="5a297e4c1534ad58591aefd1896f05fb34a3b663" translate="yes" xml:space="preserve">
          <source>The return value will be &lt;code&gt;napi_ok&lt;/code&gt; if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the &lt;code&gt;napi_status&lt;/code&gt; value for the error will be returned. If an exception was thrown, and no error occurred, &lt;code&gt;napi_pending_exception&lt;/code&gt; will be returned.</source>
          <target state="translated">요청이 성공하고 catch되지 않은 JavaScript 예외가 발생하지 않으면 반환 값은 &lt;code&gt;napi_ok&lt;/code&gt; 입니다. 오류가 발생하고 예외가 발생 하면 오류에 대한 &lt;code&gt;napi_status&lt;/code&gt; 값이 리턴됩니다. 예외가 발생하고 오류가 발생하지 않으면 &lt;code&gt;napi_pending_exception&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="a30bf17d9b1e59d4e5f5069fa0021e31e3506815" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;MessagePort&lt;/code&gt; will be an object in the target context, and will inherit from its global &lt;code&gt;Object&lt;/code&gt; class. Objects passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt;&lt;code&gt;port.onmessage()&lt;/code&gt;&lt;/a&gt; listener will also be created in the target context and inherit from its global &lt;code&gt;Object&lt;/code&gt; class.</source>
          <target state="translated">반환 된 &lt;code&gt;MessagePort&lt;/code&gt; 는 대상 컨텍스트의 객체이며 전역 &lt;code&gt;Object&lt;/code&gt; 클래스 에서 상속됩니다 . &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt; &lt;code&gt;port.onmessage()&lt;/code&gt; &lt;/a&gt; 리스너에 전달 된 객체 는 대상 컨텍스트에서 생성되며 전역 &lt;code&gt;Object&lt;/code&gt; 클래스 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="dfc70b1227f01401a4b050e13257206410687bd0" translate="yes" xml:space="preserve">
          <source>The returned buffer is statically allocated and does not need to be freed.</source>
          <target state="translated">리턴 된 버퍼는 정적으로 할당되며 해제 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="38fcc6c2ece2cf3c7e594688e04adf2e09823305" translate="yes" xml:space="preserve">
          <source>The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">반환 된 함수는 제공된 콜백 함수 주위의 래퍼입니다. 반환 된 함수가 호출되면 발생하는 모든 오류가 도메인의 &lt;code&gt;'error'&lt;/code&gt; 이벤트 로 라우팅됩니다 .</target>
        </trans-unit>
        <trans-unit id="2d318eb946457587672c9d9705f3cc85af1dd775" translate="yes" xml:space="preserve">
          <source>The returned function will have an &lt;code&gt;asyncResource&lt;/code&gt; property referencing the &lt;code&gt;AsyncResource&lt;/code&gt; to which the function is bound.</source>
          <target state="translated">반환 된 함수 에는 함수가 바인딩 된 &lt;code&gt;AsyncResource&lt;/code&gt; 를 참조 하는 &lt;code&gt;asyncResource&lt;/code&gt; 속성 이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a03e4b5f6edfce2e491d26c75c656ecf3f9be2a9" translate="yes" xml:space="preserve">
          <source>The returned object no longer inherits from &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">반환 된 객체는 더 이상 &lt;code&gt;Object.prototype&lt;/code&gt; 을 상속받지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="efca954612151fbe49aeec68bf42cb1165e6aba5" translate="yes" xml:space="preserve">
          <source>The returned object will have the following properties:</source>
          <target state="translated">반환 된 객체는 다음과 같은 속성을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="44bb5d6c3855220369956ba8708ec28034c18d86" translate="yes" xml:space="preserve">
          <source>The returned result is different from the statistics returned by &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; in that &lt;code&gt;vm.measureMemory()&lt;/code&gt; measure the memory reachable by each V8 specific contexts in the current instance of the V8 engine, while the result of &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; measure the memory occupied by each heap space in the current V8 instance.</source>
          <target state="translated">리턴 된 결과에 의해 반환 된 통계 상이한 &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; 는 점에서 &lt;code&gt;vm.measureMemory()&lt;/code&gt; 상기 V8 엔진의 현재 인스턴스의 각 V8의 특정 컨텍스트에 의해 상기 메모리 도달 측정 결과 동안 &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; 계수 현재 V8 인스턴스의 각 힙 공간이 차지하는 메모리입니다.</target>
        </trans-unit>
        <trans-unit id="2663bc23f657359a1e5a0d9802b2b8ab09e2c133" translate="yes" xml:space="preserve">
          <source>The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.</source>
          <target state="translated">발생 된 오류에 응답하는 가장 안전한 방법은 프로세스를 종료하는 것입니다. 물론 일반 웹 서버에는 열려있는 연결이 많을 수 있으며 다른 사람이 오류를 일으켜 갑자기 연결을 종료하는 것은 합리적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="17642e3dfd2688c6cd67e72a34c50952e74d46ec" translate="yes" xml:space="preserve">
          <source>The same options as &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; are supported. Since a shell is not spawned, behaviors such as I/O redirection and file globbing are not supported.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt; 와 동일한 옵션 이 지원됩니다. 쉘이 생성되지 않기 때문에 I / O 리디렉션 및 파일 글 로빙과 같은 동작은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b5c131d6859b462a4ccc2f3ff1ca448377cb2782" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt;&lt;code&gt;.setupMaster()&lt;/code&gt;&lt;/a&gt; is called, whichever comes first.</source>
          <target state="translated">스케줄링 정책 중 하나 &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; 라운드 로빈 또는에 대한 &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; 는 운영 체제에두고있다. 이것은 전역 설정이며 첫 번째 워커가 생성되거나 &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt; &lt;code&gt;.setupMaster()&lt;/code&gt; &lt;/a&gt; 가 호출되면 둘 중 먼저 발생하는 시점에 효과적으로 고정 됩니다.</target>
        </trans-unit>
        <trans-unit id="61aae47bb566b3e756d07254aa9ebf2e27b0d263" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;code&gt;cluster.setupMaster()&lt;/code&gt; is called, whichever comes first.</source>
          <target state="translated">라운드 로빈에 대한 &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; 또는 운영 체제에 남겨 두는 &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; 스케줄링 정책 . 이것은 전역 설정이며, 첫 번째 작업자가 생성되거나 &lt;code&gt;cluster.setupMaster()&lt;/code&gt; 가 호출 될 때 효과적으로 고정 됩니다.</target>
        </trans-unit>
        <trans-unit id="a1108ba05be7f85b2c2a446fb6ad5e88bb3a3f9d" translate="yes" xml:space="preserve">
          <source>The script can access the &lt;a href=&quot;globals&quot;&gt;global scope&lt;/a&gt;. Function and &lt;code&gt;var&lt;/code&gt; declarations in the script will be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object. Variable declarations made using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; will be visible globally, but will not be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">스크립트는 &lt;a href=&quot;globals&quot;&gt;전역 범위에&lt;/a&gt; 액세스 할 수 있습니다 . 스크립트의 함수 및 &lt;code&gt;var&lt;/code&gt; 선언이 &lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; 개체에 추가됩니다 . &lt;code&gt;let&lt;/code&gt; 및 &lt;code&gt;const&lt;/code&gt; 를 사용하여 만든 변수 선언은 전역 적으로 표시되지만 &lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; 개체에 추가되지는 않습니다 .</target>
        </trans-unit>
        <trans-unit id="478005d19999ae183e0f7a9bb0ae6f007bd16fbb" translate="yes" xml:space="preserve">
          <source>The search paths for the module.</source>
          <target state="translated">모듈의 검색 경로</target>
        </trans-unit>
        <trans-unit id="0cfd0df8336c867963656caf2b437c62fdf98b4d" translate="yes" xml:space="preserve">
          <source>The second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases &lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt;&lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt;&lt;/a&gt; can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript &lt;code&gt;Object&lt;/code&gt; thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with &lt;a href=&quot;#n_api_napi_throw&quot;&gt;&lt;code&gt;napi_throw&lt;/code&gt;&lt;/a&gt; where error is the JavaScript &lt;code&gt;Error&lt;/code&gt; object to be thrown.</source>
          <target state="translated">두 번째 방법은 예외를 처리하는 것입니다. 원시 코드가 예외를 포착하고 적절한 조치를 취한 후 계속할 수있는 경우가 있습니다. 예외를 안전하게 처리 할 수있는 특정 경우에만 권장됩니다. 이 경우 &lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt; &lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt; &lt;/a&gt; 을 사용하여 예외를 가져오고 지울 수 있습니다. 성공하면 결과에는 마지막으로 발생한 JavaScript &lt;code&gt;Object&lt;/code&gt; 대한 핸들이 포함됩니다 . 판별 된 경우, 예외를 검색 한 후, 예외는 &lt;a href=&quot;#n_api_napi_throw&quot;&gt; &lt;code&gt;napi_throw&lt;/code&gt; 를 사용&lt;/a&gt; 하여 다시 발생시킬 수 있으며 예외는 오류가 발생하는 JavaScript &lt;code&gt;Error&lt;/code&gt; 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="dc926d997d4c579499bbdcda07f643f7920bddbb" translate="yes" xml:space="preserve">
          <source>The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.</source>
          <target state="translated">두 번째 방법은 마스터 프로세스가 청취 소켓을 만들어 관심있는 작업자에게 보내는 것입니다. 작업자는 들어오는 연결을 직접 수락합니다.</target>
        </trans-unit>
        <trans-unit id="338ae710bded6a0f6fd004eec96b553cb3dbb378" translate="yes" xml:space="preserve">
          <source>The second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight.</source>
          <target state="translated">이론적으로 두 번째 방법은 최상의 성능을 제공해야합니다. 그러나 실제로는 운영 체제 스케줄러의 차이로 인해 분배가 불균형하는 경향이 있습니다. 모든 연결의 70 % 이상이 총 8 개의 프로세스 중 2 개의 프로세스로 끝나는 부하가 관찰되었습니다.</target>
        </trans-unit>
        <trans-unit id="a15f3c8ca4baed085ff4f00bb83df9df5112dc61" translate="yes" xml:space="preserve">
          <source>The second argument can now be an &lt;code&gt;options&lt;/code&gt; object with &lt;code&gt;recursive&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; properties.</source>
          <target state="translated">두 번째 인수는 이제 &lt;code&gt;recursive&lt;/code&gt; 및 &lt;code&gt;mode&lt;/code&gt; 속성을 가진 &lt;code&gt;options&lt;/code&gt; 객체가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="056385b629217bf4d47083a5cf61e4dbc958e791" translate="yes" xml:space="preserve">
          <source>The second argument is optional. If &lt;code&gt;options&lt;/code&gt; is provided as a string, it specifies the &lt;code&gt;encoding&lt;/code&gt;. Otherwise &lt;code&gt;options&lt;/code&gt; should be passed as an object.</source>
          <target state="translated">두 번째 인수는 선택 사항입니다. 경우 &lt;code&gt;options&lt;/code&gt; 문자열로 제공되는데, 그것은 지정 &lt;code&gt;encoding&lt;/code&gt; . 그렇지 않으면 &lt;code&gt;options&lt;/code&gt; 이 객체로 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="9dafbecade7b94f6c57417ea5afec4a5bc9790e3" translate="yes" xml:space="preserve">
          <source>The sections below describe the additional tools available for developing and deploying Node.js native addons.</source>
          <target state="translated">아래 섹션에서는 Node.js 네이티브 애드온을 개발하고 배포하는 데 사용할 수있는 추가 도구를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="9e19e2fd3684a2ee8b1c503085e8dc2cb74704b7" translate="yes" xml:space="preserve">
          <source>The selected public or private key encoding is incompatible with other options.</source>
          <target state="translated">선택한 공개 또는 개인 키 인코딩이 다른 옵션과 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2b9aebdd568a045c5581d3668edfbe15a6a2bea" translate="yes" xml:space="preserve">
          <source>The semantics of Node.js's &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support a number of reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.js의 &lt;code&gt;require()&lt;/code&gt; 함수 의 의미는 여러 가지 합리적인 디렉토리 구조를 지원하기에 충분히 일반적으로 설계되었습니다. &lt;code&gt;dpkg&lt;/code&gt; , &lt;code&gt;rpm&lt;/code&gt; 및 &lt;code&gt;npm&lt;/code&gt; 과 같은 패키지 관리자 프로그램 은 수정없이 Node.js 모듈에서 기본 패키지를 빌드 할 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="c9e7e477b28102f006aa9e1ae786b6e5fff1d8ea" translate="yes" xml:space="preserve">
          <source>The semantics of the Node.js &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.js &lt;code&gt;require()&lt;/code&gt; 함수 의 의미는 합리적인 디렉토리 구조를 지원하기에 충분히 일반적으로 설계되었습니다. &lt;code&gt;dpkg&lt;/code&gt; , &lt;code&gt;rpm&lt;/code&gt; , &lt;code&gt;npm&lt;/code&gt; 과 같은 패키지 관리자 프로그램 은 수정없이 Node.js 모듈에서 네이티브 패키지를 빌드 할 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="765c907408a72b7c359b1e6e3c2a44d833e954e0" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;.</source>
          <target state="translated">직렬화 API는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML 구조화 된 복제 알고리즘&lt;/a&gt; 과 호환되는 방식으로 JavaScript 값을 직렬화하는 수단을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="1dd892ccc6dffe2bd093abfe21edcd6594062c97" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;. The format is backward-compatible (i.e. safe to store to disk).</source>
          <target state="translated">직렬화 API는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML 구조화 된 클론 알고리즘&lt;/a&gt; 과 호환되는 방식으로 JavaScript 값을 직렬화하는 수단을 제공 합니다 . 형식은 이전 버전과 호환됩니다 (즉, 디스크에 저장하기에 안전).</target>
        </trans-unit>
        <trans-unit id="6375e172794a973dd431fe6fb6d9d47672ad78be" translate="yes" xml:space="preserve">
          <source>The server can be a TCP server or an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server, depending on what it &lt;a href=&quot;#net_server_listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">서버는 &lt;a href=&quot;#net_server_listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt; 에 따라 TCP 서버 또는 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 서버 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2404f9b86c98cba231fff8bebda45b2ca16649b5" translate="yes" xml:space="preserve">
          <source>The server can be tested by connecting to it using the example client from &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; &lt;/a&gt; 의 예제 클라이언트를 사용하여 서버에 연결하여 서버를 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aede112d180e1d47ab7a08eaa5b0ea3c6ed75bc2" translate="yes" xml:space="preserve">
          <source>The server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, &lt;code&gt;callback(null, resp)&lt;/code&gt; is then invoked, where &lt;code&gt;resp&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; instance containing the OCSP response. Both &lt;code&gt;certificate&lt;/code&gt; and &lt;code&gt;issuer&lt;/code&gt; are &lt;code&gt;Buffer&lt;/code&gt; DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.</source>
          <target state="translated">OCSP URL 및 인증서 ID를 얻기 위해 서버의 현재 인증서를 구문 분석 할 수 있습니다. OCSP 응답을 얻은 후 &lt;code&gt;callback(null, resp)&lt;/code&gt; 이 호출됩니다. 여기서 &lt;code&gt;resp&lt;/code&gt; 는 OCSP 응답을 포함 하는 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스입니다. 모두 &lt;code&gt;certificate&lt;/code&gt; 와 &lt;code&gt;issuer&lt;/code&gt; 있는 &lt;code&gt;Buffer&lt;/code&gt; 기본 및 발행자의 인증서 DER-표현. 이들은 OCSP 인증서 ID 및 OCSP 엔드 포인트 URL을 얻는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea711def7d72186a6796edc378b6d6298bc4d28d" translate="yes" xml:space="preserve">
          <source>The servers encrypt the entire session state and send it to the client as a &quot;ticket&quot;. When reconnecting, the state is sent to the server in the initial connection. This mechanism avoids the need for server-side session cache. If the server doesn't use the ticket, for any reason (failure to decrypt it, it's too old, etc.), it will create a new session and send a new ticket. See &lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC 5077&lt;/a&gt; for more information.</source>
          <target state="translated">서버는 전체 세션 상태를 암호화하여 &quot;티켓&quot;으로 클라이언트에 보냅니다. 다시 연결하면 초기 연결시 상태가 서버로 전송됩니다. 이 메커니즘은 서버 측 세션 캐시가 필요하지 않습니다. 서버가 어떤 이유로 든 (복호화 실패, 너무 오래됨 등) 티켓을 사용하지 않으면 새 세션을 만들고 새 티켓을 보냅니다. 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC 5077&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="76accd0d371c0c87373d40be1eddae24ddb6507b" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command line parsing should be compatible.</source>
          <target state="translated">쉘은 &lt;code&gt;-c&lt;/code&gt; 스위치를 이해해야합니다 . 셸이 &lt;code&gt;'cmd.exe'&lt;/code&gt; 이면 &lt;code&gt;/d /s /c&lt;/code&gt; 스위치를 이해 하고 명령 줄 구문 분석이 호환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="aeb000fbdb4d2424b01088fd13f9a5381e396488" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command-line parsing should be compatible.</source>
          <target state="translated">쉘은 &lt;code&gt;-c&lt;/code&gt; 스위치를 이해해야합니다 . 셸이 &lt;code&gt;'cmd.exe'&lt;/code&gt; 인 경우 &lt;code&gt;/d /s /c&lt;/code&gt; 스위치를 이해 하고 명령 줄 구문 분석이 호환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="21be831d3adf2892b25eaf65824eb2c524ecba41" translate="yes" xml:space="preserve">
          <source>The shell that executed Node.js should see the exit code as &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">Node.js를 실행 한 쉘은 종료 코드를 &lt;code&gt;1&lt;/code&gt; 로보아야합니다 .</target>
        </trans-unit>
        <trans-unit id="05c0d6d3b494c3c20fef212dff014249c946a65b" translate="yes" xml:space="preserve">
          <source>The signal handler will receive the signal's name (&lt;code&gt;'SIGINT'&lt;/code&gt;, &lt;code&gt;'SIGTERM'&lt;/code&gt;, etc.) as the first argument.</source>
          <target state="translated">신호 처리기는 첫 번째 인수로 신호 이름 ( &lt;code&gt;'SIGINT'&lt;/code&gt; , &lt;code&gt;'SIGTERM'&lt;/code&gt; 등)을 수신합니다.</target>
        </trans-unit>
        <trans-unit id="47e574501f3a0d99059119864ec3279d3f9294c3" translate="yes" xml:space="preserve">
          <source>The signal used to trigger the creation of a diagnostic report. Defaults to &lt;code&gt;'SIGUSR2'&lt;/code&gt;.</source>
          <target state="translated">진단 보고서 작성을 트리거하는 데 사용되는 신호입니다. 기본값은 &lt;code&gt;'SIGUSR2'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d52541ad62fc4e1c6ca8683f187715851a92c6fd" translate="yes" xml:space="preserve">
          <source>The simple asynchronous work APIs above may not be appropriate for every scenario. When using any other asynchronous mechanism, the following APIs are necessary to ensure an asynchronous operation is properly tracked by the runtime.</source>
          <target state="translated">위의 간단한 비동기 작업 API가 모든 시나리오에 적합한 것은 아닙니다. 다른 비동기 메커니즘을 사용하는 경우 런타임에서 비동기 작업을 올바르게 추적하려면 다음 API가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="translated">파일 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="2a5cdd3536fe2bed3772a134a40f524b1ba55908" translate="yes" xml:space="preserve">
          <source>The socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.</source>
          <target state="translated">소켓 시간 종료 로직은 연결시 설정되므로이 값을 변경하면 기존 연결이 아닌 서버에 대한 새 연결에만 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="6c1c5af86acdb2cbdf7981b86ae3b974f13c3df2" translate="yes" xml:space="preserve">
          <source>The special handling of the &lt;code&gt;'error'&lt;/code&gt; event is only used when &lt;code&gt;events.once()&lt;/code&gt; is used to wait for another event. If &lt;code&gt;events.once()&lt;/code&gt; is used to wait for the '&lt;code&gt;error'&lt;/code&gt; event itself, then it is treated as any other kind of event without special handling:</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; 이벤트 의 특수 처리는 &lt;code&gt;events.once()&lt;/code&gt; 가 다른 이벤트를 기다리는 데 사용 되는 경우에만 사용됩니다 . 경우 &lt;code&gt;events.once()&lt;/code&gt; '대기하는 데 사용됩니다 &lt;code&gt;error'&lt;/code&gt; 이벤트 자체, 다음은 특별한 처리없이 이벤트의 다른 종류로 취급된다 :</target>
        </trans-unit>
        <trans-unit id="471976270e8935af1d178909e020a76781b88bf1" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">특정 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 객체는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dfcfaca3f84262ad37f21835b36d6a8ca0a1720e" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">특정 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 객체는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e9568eb7140ccc6f348c4550a9426056f00bc293" translate="yes" xml:space="preserve">
          <source>The specific operation of &lt;code&gt;console.clear()&lt;/code&gt; can vary across operating systems and terminal types. For most Linux operating systems, &lt;code&gt;console.clear()&lt;/code&gt; operates similarly to the &lt;code&gt;clear&lt;/code&gt; shell command. On Windows, &lt;code&gt;console.clear()&lt;/code&gt; will clear only the output in the current terminal viewport for the Node.js binary.</source>
          <target state="translated">&lt;code&gt;console.clear()&lt;/code&gt; 의 특정 작업은 운영 체제 및 터미널 유형에 따라 다를 수 있습니다. 대부분의 Linux 운영 체제에서 &lt;code&gt;console.clear()&lt;/code&gt; 는 &lt;code&gt;clear&lt;/code&gt; shell 명령 과 유사하게 작동합니다 . Windows에서 &lt;code&gt;console.clear()&lt;/code&gt; 는 Node.js 바이너리에 대한 현재 터미널 뷰포트의 출력 만 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="26f56414b822e235f350940f03c7fed02c4a3f19" translate="yes" xml:space="preserve">
          <source>The specified &lt;code&gt;secureProtocol&lt;/code&gt; method is invalid. It is either unknown, or disabled because it is insecure.</source>
          <target state="translated">지정된 &lt;code&gt;secureProtocol&lt;/code&gt; 메소드가 유효하지 않습니다. 알 수 없거나 안전하지 않기 때문에 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4404d9ad06af7978ed7f6400d6bff8448f52f29" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if it uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">지정자 문자열은 검색을 수행하지 않으며 &lt;code&gt;require()&lt;/code&gt; 또는 &lt;code&gt;import&lt;/code&gt; 에 제공된 것과 정확히 일치해야합니다 . 따라서 동일한 모듈을 가리 키기 위해 여러 개의 다른 문자열을 사용하는 경우 (예 : 확장 제외) 정책에 여러 지정자가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d1dd38b3953bad12ed9a2d4c03e49e9322e0421" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if &lt;code&gt;require()&lt;/code&gt; uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">지정자 문자열은 검색을 수행하지 않으며 &lt;code&gt;require()&lt;/code&gt; 제공된 것과 정확히 일치해야합니다 . 따라서 &lt;code&gt;require()&lt;/code&gt; 가 여러 개의 다른 문자열을 사용하여 동일한 모듈을 가리키는 경우 (예 : 확장 제외 ) 정책에 여러 지정자가 필요할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71c55e13b6ab04144ed0ca0148cd676f281a362f" translate="yes" xml:space="preserve">
          <source>The specifiers of all dependencies of this module. The returned array is frozen to disallow any changes to it.</source>
          <target state="translated">이 모듈의 모든 종속성의 지정자 반환 된 배열은 고정되어 변경 사항이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6712a27a78d38007f4db6badef0327b5c9f247ac" translate="yes" xml:space="preserve">
          <source>The speed of &lt;code&gt;zlib&lt;/code&gt; compression is affected most dramatically by the &lt;code&gt;level&lt;/code&gt; setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; 압축 속도 는 &lt;code&gt;level&lt;/code&gt; 설정에 가장 큰 영향을받습니다 . 레벨이 높을수록 압축률은 높아지지만 완료하는 데 시간이 더 걸립니다. 수준이 낮을수록 압축률은 낮아 지지만 훨씬 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="baae50c19885878970af46308a9fcef6e3ca5413" translate="yes" xml:space="preserve">
          <source>The stack trace is extended to include the point in time at which the &lt;code&gt;domain&lt;/code&gt; module had been loaded.</source>
          <target state="translated">스택 추적은 &lt;code&gt;domain&lt;/code&gt; 모듈이로드 된 특정 시점을 포함하도록 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="d04dab8c062b60270fff8951733a2c1bf12db8dc" translate="yes" xml:space="preserve">
          <source>The standard deviation of the recorded event loop delays.</source>
          <target state="translated">기록 된 이벤트 루프의 표준 편차가 지연됩니다.</target>
        </trans-unit>
        <trans-unit id="12d4241096406199958bcd38c41ce903d3de3859" translate="yes" xml:space="preserve">
          <source>The stream is closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;false&lt;/code&gt; when creating the stream.</source>
          <target state="translated">스트림을 생성 할 때 &lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt; 옵션이 &lt;code&gt;false&lt;/code&gt; 로 설정 되지 않은 경우 &lt;code&gt;'error'&lt;/code&gt; 이벤트가 발생 하면 스트림이 닫힙니다 .</target>
        </trans-unit>
        <trans-unit id="2f2ac76df98dbcdd434e991056889f9574990f71" translate="yes" xml:space="preserve">
          <source>The stream is not closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;true&lt;/code&gt; when creating the stream.</source>
          <target state="translated">스트림을 작성할 때 &lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt; 옵션이 &lt;code&gt;true&lt;/code&gt; 로 설정되어 있지 않으면 &lt;code&gt;'error'&lt;/code&gt; 이벤트가 발생 하면 스트림이 닫히지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a44550d4120786eeeb6f0da72c77067c943d5e7f" translate="yes" xml:space="preserve">
          <source>The stream is not piped to any writable destination.</source>
          <target state="translated">스트림은 쓰기 가능한 대상으로 파이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="138b0e7f3ba481dfbd0c57d82fdbac0b326fefae" translate="yes" xml:space="preserve">
          <source>The stream's write() callback and return value are exposed.</source>
          <target state="translated">스트림의 write () 콜백 및 반환 값이 노출됩니다.</target>
        </trans-unit>
        <trans-unit id="350def31fd9875bd3d581c4fbb2b29aebcde0c4d" translate="yes" xml:space="preserve">
          <source>The string passed to &lt;code&gt;require()&lt;/code&gt; is the name of the target in &lt;code&gt;binding.gyp&lt;/code&gt; responsible for creating the &lt;code&gt;.node&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; 전달 된 문자열 은 &lt;code&gt;.node&lt;/code&gt; 파일 작성을 담당하는 &lt;code&gt;binding.gyp&lt;/code&gt; 의 대상 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="1f4858a294cb8f6108238742da8a2f702b4e7800" translate="yes" xml:space="preserve">
          <source>The string representation of the local IP address the remote client is connecting on. For example, in a server listening on &lt;code&gt;'0.0.0.0'&lt;/code&gt;, if a client connects on &lt;code&gt;'192.168.1.1'&lt;/code&gt;, the value of &lt;code&gt;socket.localAddress&lt;/code&gt; would be &lt;code&gt;'192.168.1.1'&lt;/code&gt;.</source>
          <target state="translated">원격 클라이언트가 연결중인 로컬 IP 주소의 문자열 표현. 예를 들어 &lt;code&gt;'0.0.0.0'&lt;/code&gt; 을 수신 대기하는 서버 에서 클라이언트가 &lt;code&gt;'192.168.1.1'&lt;/code&gt; 는 의 값 &lt;code&gt;socket.localAddress&lt;/code&gt; 이 될 것 &lt;code&gt;'192.168.1.1'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c907e196491aec5b81c0d022d86f6e906bde2939" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP address. For example, &lt;code&gt;'74.125.127.100'&lt;/code&gt; or &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt;. Value may be &lt;code&gt;undefined&lt;/code&gt; if the socket is destroyed (for example, if the client disconnected).</source>
          <target state="translated">원격 IP 주소의 문자열 표현 예를 들어 &lt;code&gt;'74.125.127.100'&lt;/code&gt; 또는 &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt; 입니다. 소켓이 파손 된 경우 (예 : 클라이언트 연결이 끊긴 경우) 값이 &lt;code&gt;undefined&lt;/code&gt; 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2179deb625958e34cb0c9470426542821e19d005" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP family. &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;.</source>
          <target state="translated">원격 IP 제품군의 문자열 표현 &lt;code&gt;'IPv4'&lt;/code&gt; 또는 &lt;code&gt;'IPv6'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b14d2cbabe1d821f1fe19c891d331b602e974058" translate="yes" xml:space="preserve">
          <source>The string representing the stack trace is lazily generated when the &lt;code&gt;error.stack&lt;/code&gt; property is &lt;strong&gt;accessed&lt;/strong&gt;.</source>
          <target state="translated">스택 추적을 나타내는 문자열은 &lt;code&gt;error.stack&lt;/code&gt; 속성에 &lt;strong&gt;액세스&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="98fe85fdbe508ef6c827c907e5d2f1831bd9b29d" translate="yes" xml:space="preserve">
          <source>The substring that was used for the matching.</source>
          <target state="translated">일치에 사용 된 부분 문자열.</target>
        </trans-unit>
        <trans-unit id="d4576fd7cf24c54c52dedbc9e9bd4dfe7af6d9fe" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. If an error occurs while deriving the key, &lt;code&gt;err&lt;/code&gt; will be set; otherwise &lt;code&gt;err&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. By default, the successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. An error will be thrown if any of the input arguments specify invalid values or types.</source>
          <target state="translated">제공된 &lt;code&gt;callback&lt;/code&gt; 함수는 &lt;code&gt;err&lt;/code&gt; 및 &lt;code&gt;derivedKey&lt;/code&gt; 는 두 개의 인수와 함께 호출됩니다 . 키를 파생시키는 동안 오류가 발생하면 &lt;code&gt;err&lt;/code&gt; 이 설정됩니다. 그렇지 않으면 &lt;code&gt;err&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; 입니다. 기본적으로 성공적으로 생성 된 &lt;code&gt;derivedKey&lt;/code&gt; 는 콜백에&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;. 입력 인수가 유효하지 않은 값 또는 유형을 지정하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0957fe6b3d636aed70380ea3ee84cc5c69bf4bee" translate="yes" xml:space="preserve">
          <source>The synchronous form blocks the Node.js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using &lt;code&gt;try&amp;hellip;catch&lt;/code&gt;, or can be allowed to bubble up.</source>
          <target state="translated">동기 양식은 작업이 완료 될 때까지 Node.js 이벤트 루프와 추가 JavaScript 실행을 차단합니다. 예외는 즉시 발생하며 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 사용하여 처리 하거나 버블 링을 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13b6f6c400f32e4c15818f48380024fa6f42a8c5" translate="yes" xml:space="preserve">
          <source>The syntax of these values is not validated by the Node.js implementation and are passed through as provided by the user or received from the peer.</source>
          <target state="translated">이러한 값의 구문은 Node.js 구현에 의해 검증되지 않으며 사용자가 제공하거나 피어로부터 수신 한대로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="6225c4c4ebdc288d3a2d4ec23c52209f6023bf46" translate="yes" xml:space="preserve">
          <source>The term &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;Forward Secrecy&lt;/a&gt;&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">&quot; &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;순방향 비밀&lt;/a&gt; &quot;이라는 용어 &quot;또는 &quot;완벽한 &quot; 는 키-협약 (즉, 키 교환) 방법의 특징을 설명한다. 즉, 서버 및 클라이언트 키는 현재 통신 세션에만 사용되는 새 임시 키를 협상하는 데 사용됩니다. 실제로 이것은 서버의 개인 키가 손상 되더라도 공격자가 세션에 대해 특별히 생성 된 키 쌍을 확보 할 수있는 경우에만 도청자가 통신을 해독 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e930ba3f37adc9345f4bcca9cb555bc0b2e00b12" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;forward secrecy&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;perfect forward secrecy&lt;/em&gt; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;순방향 비밀&lt;/a&gt;&lt;/em&gt; 또는 &lt;em&gt;완전 순방향 비밀&lt;/em&gt; 이라는 용어 는 키 동의 (즉, 키 교환) 방법의 기능을 설명합니다. 즉, 서버 및 클라이언트 키는 현재 통신 세션에만 사용되는 새 임시 키를 협상하는 데 사용됩니다. 실제로 이것은 서버의 개인 키가 손상 되더라도 공격자가 세션에 대해 특별히 생성 된 키 쌍을 확보 할 수있는 경우에만 도청자가 통신을 해독 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0bad6d5ba86517581ea93518756b284caea90d77" translate="yes" xml:space="preserve">
          <source>The thread id as given by &lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt;&lt;code&gt;worker_threads.threadId&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt; &lt;code&gt;worker_threads.threadId&lt;/code&gt; 에&lt;/a&gt; 의해 주어진 스레드 ID</target>
        </trans-unit>
        <trans-unit id="644b7390ff4919cf711608e29230a6b5cd65c540" translate="yes" xml:space="preserve">
          <source>The thread which is generating the report will wait for the reports from Worker threads to finish. However, the latency for this will usually be low, as both running JavaScript and the event loop are interrupted to generate the report.</source>
          <target state="translated">보고서를 생성하는 스레드는 작업자 스레드의 보고서가 완료 될 때까지 기다립니다. 그러나 보고서를 생성하기 위해 실행중인 JavaScript와 이벤트 루프가 모두 중단되기 때문에 이에 대한 지연 시간은 일반적으로 낮습니다.</target>
        </trans-unit>
        <trans-unit id="5027f2889856b5eff5759ff3a0048ebbb10df85e" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must make no further use of the thread-safe function because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_tsfn_abort&lt;/code&gt; 값 을 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 에 제공하여 스레드 안전 함수를 &quot;중지&quot;할 수 있습니다 . 그러면 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 을 제외한 스레드 안전 함수와 관련된 모든 후속 API 가 참조 횟수가 0에 도달하기 전에도 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 합니다. 특히 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 은 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 하므로 스레드 안전 기능에 대한 비동기 호출을 더 이상 수행 할 수 없음을 스레드에 알립니다. 스레드 종료 기준으로 사용할 수 있습니다. &lt;strong&gt;리턴 값 수신시 &lt;code&gt;napi_closing&lt;/code&gt; 에서 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 스레드는 더 이상 할당이 보장되지 않으므로 스레드 안전 기능을 더 이상 사용하지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c593e7d8b94b3676794e201f5b57070222f901e3" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must not use the thread-safe function anymore because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">스레드로부터 안전한 함수는 &lt;code&gt;napi_tsfn_abort&lt;/code&gt; 값 을 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 에 제공하여 &quot;중단&quot;될 수 있습니다 . 이로 인해 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 을 제외한 스레드 안전 함수와 관련된 모든 후속 API 는 참조 횟수가 0에 도달하기 전에 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 합니다. 특히, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 은 &lt;code&gt;napi_closing&lt;/code&gt; 을 반환 하여 스레드에 안전한 함수에 대한 비동기 호출을 더 이상 수행 할 수 없음을 스레드에 알립니다. 스레드를 종료하는 기준으로 사용할 수 있습니다. &lt;strong&gt; &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 에서 &lt;/strong&gt;&lt;strong&gt;napi_closing&lt;/strong&gt;&lt;strong&gt; 의 반환 값을 &lt;code&gt;napi_closing&lt;/code&gt; 스레드는 더 이상 할당이 보장되지 않으므로 스레드 안전 함수를 더 이상 사용하지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63541238aa26564d51eb28716b3e8da2eb477a58" translate="yes" xml:space="preserve">
          <source>The three tools listed here permit native addon developers and maintainers to create and upload binaries to public or private servers. These tools are typically integrated with CI/CD build systems like &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; and &lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt; to build and upload binaries for a variety of platforms and architectures. These binaries are then available for download by users who do not need to have a C/C++ toolchain installed.</source>
          <target state="translated">여기에 나열된 세 가지 도구를 사용하면 네이티브 애드온 개발자 및 유지 관리자가 바이너리를 만들고 공용 또는 개인 서버에 업로드 할 수 있습니다. 이러한 도구는 일반적으로 &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; 및 &lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt; 와 같은 CI / CD 빌드 시스템과 통합되어 다양한 플랫폼 및 아키텍처를위한 바이너리를 빌드하고 업로드합니다. 이 바이너리는 C / C ++ 도구 모음을 설치할 필요가없는 사용자가 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae69600838324998125805013d93da028ccbe298" translate="yes" xml:space="preserve">
          <source>The timeout passed to &lt;code&gt;Atomics.wait&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Atomics.wait&lt;/code&gt; 에 전달 된 제한 시간</target>
        </trans-unit>
        <trans-unit id="5e67c9640ec1fa6137f83769ae5b65b87eb23576" translate="yes" xml:space="preserve">
          <source>The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;Event Loop&lt;/a&gt;.</source>
          <target state="translated">Node.js의 타이머 함수는 웹 브라우저에서 제공하는 타이머 API와 유사한 API를 구현하지만 Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;이벤트 루프를&lt;/a&gt; 기반으로하는 다른 내부 구현을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="24142a2f59af56bc69ad24cdd8ff0eb028144072" translate="yes" xml:space="preserve">
          <source>The times in the stat object have the following semantics:</source>
          <target state="translated">stat 객체의 시간은 다음과 같은 의미를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="11338b33321f7c1210af69f2e5b2929e07ab4a7f" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">이 파일의 작성 시간을 나타내는 시간 소인은 POSIX Epoch 이후 밀리 초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="17b34123fd039eac484c0932d35c7d243a87f909" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file.</source>
          <target state="translated">이 파일의 작성 시간을 나타내는 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="724e46ddf25f0bcf42fa24bc37ddf8c0097582d7" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">POSIX Epoch 이후 파일 상태가 마지막으로 변경된 시간을 나타내는 시간 소인 (밀리 초).</target>
        </trans-unit>
        <trans-unit id="61773109ba1c85f4ebece132711c5158b722aa5c" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed.</source>
          <target state="translated">파일 상태가 마지막으로 변경된 시간을 나타내는 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="069fd01b27a0105d764e62a925be9ce027926e36" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">이 파일에 마지막으로 액세스 한 시간을 나타내는 시간 소인은 POSIX Epoch 이후 밀리 초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bb6699921685ac3e2dd128110a9aa9134e05fa52" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed.</source>
          <target state="translated">이 파일에 마지막으로 액세스 한 시간을 나타내는 시간 소인.</target>
        </trans-unit>
        <trans-unit id="97c50105501bb2bfd22cb492162a0f85fc156c0e" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">이 파일이 마지막으로 수정 된 시간을 나타내는 시간 소인은 POSIX Epoch 이후 밀리 초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="d04d4005b317a67d275b64117bfd954f165821eb" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified.</source>
          <target state="translated">이 파일이 마지막으로 수정 된 시간을 나타내는 시간 소인.</target>
        </trans-unit>
        <trans-unit id="4ee4420a40bacb4b309040070a2a109b60250f40" translate="yes" xml:space="preserve">
          <source>The total number of milliseconds elapsed for this entry. This value will not be meaningful for all Performance Entry types.</source>
          <target state="translated">이 항목에 소요 된 총 밀리 초 수입니다. 이 값은 모든 퍼포먼스 입력 유형에 의미가있는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="dceaa4442e4a67a592b8e691c590ea3c3a720f78" translate="yes" xml:space="preserve">
          <source>The tracing system uses the same time source as the one used by &lt;code&gt;process.hrtime()&lt;/code&gt;. However the trace-event timestamps are expressed in microseconds, unlike &lt;code&gt;process.hrtime()&lt;/code&gt; which returns nanoseconds.</source>
          <target state="translated">추적 시스템은 &lt;code&gt;process.hrtime()&lt;/code&gt; 사용하는 것과 동일한 시간 원본을 사용합니다 . 그러나 추적 이벤트 타임 스탬프는 나노초를 반환하는 &lt;code&gt;process.hrtime()&lt;/code&gt; 과 달리 마이크로 초로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="abafe3c3983a12616d3ab9d5970201bbaeddb49e" translate="yes" xml:space="preserve">
          <source>The transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance:</source>
          <target state="translated">트랜스 코딩 프로세스는 주어진 바이트 시퀀스가 ​​대상 인코딩에서 적절하게 표현 될 수없는 경우 대체 문자를 사용합니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="580e806012432ab96eb065a247141bef72a7f774" translate="yes" xml:space="preserve">
          <source>The type of an asynchronous resource was invalid. Users are also able to define their own types if using the public embedder API.</source>
          <target state="translated">비동기 자원의 유형이 유효하지 않습니다. 공용 임 베더 API를 사용하는 경우 사용자는 자신의 유형을 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4fe24a1a4412575d21267293d8a210703d96afd" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. Currently it may be one of: &lt;code&gt;'node'&lt;/code&gt;, &lt;code&gt;'mark'&lt;/code&gt;, &lt;code&gt;'measure'&lt;/code&gt;, &lt;code&gt;'gc'&lt;/code&gt;, &lt;code&gt;'function'&lt;/code&gt;, &lt;code&gt;'http2'&lt;/code&gt; or &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="translated">성능 항목의 유형입니다. 현재 &lt;code&gt;'node'&lt;/code&gt; , &lt;code&gt;'mark'&lt;/code&gt; , &lt;code&gt;'measure'&lt;/code&gt; , &lt;code&gt;'gc'&lt;/code&gt; , &lt;code&gt;'function'&lt;/code&gt; , &lt;code&gt;'http2'&lt;/code&gt; 또는 &lt;code&gt;'http'&lt;/code&gt; 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a75304b33d14797ab764eb8c4c7d32f6e108038" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. It may be one of:</source>
          <target state="translated">성능 항목의 유형입니다. 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b5e053536c481a8b50ecd5b068ee7fcf0ba2c2e" translate="yes" xml:space="preserve">
          <source>The type tags are now properly compared and there are a couple minor comparison adjustments to make the check less surprising.</source>
          <target state="translated">유형 태그가 이제 제대로 비교되고 수표를 덜 경미하게하기 위해 몇 가지 사소한 비교 조정이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1ae4d26f68ff9e770ba1c7b9fe1bb317ab919ab" translate="yes" xml:space="preserve">
          <source>The typical flow of an OCSP Request is as follows:</source>
          <target state="translated">OCSP 요청의 일반적인 흐름은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed60e000342dc962c9266db500477f9e994c8a86" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize such &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">이 방법으로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 기본 메모리 는 &lt;em&gt;초기화되지 않습니다&lt;/em&gt; . 새로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 의 내용을 알 &lt;em&gt;수 없으며 민감한 데이터를 포함 할 수 있습니다&lt;/em&gt; . 이러한 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스를 0 으로 초기화 하려면 &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="58b7a5f60ed15b149caff061065151e09d20b14b" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">이 방법으로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 기본 메모리 는 &lt;em&gt;초기화되지 않습니다&lt;/em&gt; . 새로 작성된 &lt;code&gt;Buffer&lt;/code&gt; 의 내용을 알 &lt;em&gt;수 없으며 민감한 데이터를 포함 할 수 있습니다&lt;/em&gt; . 사용 &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 대신 초기화 &lt;code&gt;Buffer&lt;/code&gt; 제로로 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="4ef9fd7dad9eaa34841c0f3a9cab53f8a8cb3e58" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">이러한 방식으로 생성 된 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 기본 메모리 는 &lt;em&gt;초기화되지 않습니다&lt;/em&gt; . 새로 생성 된 &lt;code&gt;Buffer&lt;/code&gt; 의 내용 은 알 &lt;em&gt;수 없으며 민감한 데이터를 포함 할 수 있습니다&lt;/em&gt; . 사용 &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 대신 초기화 &lt;code&gt;Buffer&lt;/code&gt; 제로로 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="8a787b77e22fb6f3e77127ec8593459c30794b75" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;SlowBuffer&lt;/code&gt; instances is &lt;em&gt;not initialized&lt;/em&gt;. The contents of a newly created &lt;code&gt;SlowBuffer&lt;/code&gt; are unknown and may contain sensitive data. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize a &lt;code&gt;SlowBuffer&lt;/code&gt; with zeroes.</source>
          <target state="translated">&lt;code&gt;SlowBuffer&lt;/code&gt; 인스턴스 의 기본 메모리 가 &lt;em&gt;초기화되지 않았습니다&lt;/em&gt; . 새로 작성된 &lt;code&gt;SlowBuffer&lt;/code&gt; 의 내용 은 알 수 없으며 민감한 데이터를 포함 할 수 있습니다. &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt; 을 사용 하여 &lt;code&gt;SlowBuffer&lt;/code&gt; 를 0 으로 초기화하십시오 .</target>
        </trans-unit>
        <trans-unit id="867a8f54f53cc42a74637197afdab6fff988978b" translate="yes" xml:space="preserve">
          <source>The undocumented &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; function was originally intended for debugging and performance tuning when using the &lt;code&gt;child_process&lt;/code&gt; and &lt;code&gt;cluster&lt;/code&gt; modules on Windows. The function is not generally useful and is being removed. See discussion here: &lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https://github.com/nodejs/node/issues/18391&lt;/a&gt;</source>
          <target state="translated">문서화되지 않은 &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; 함수는 원래 Windows 에서 &lt;code&gt;child_process&lt;/code&gt; 및 &lt;code&gt;cluster&lt;/code&gt; 모듈을 사용할 때 디버깅 및 성능 조정을위한 것입니다 . 이 기능은 일반적으로 유용하지 않으며 제거되고 있습니다. 여기 토론을 참조하십시오 : &lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https://github.com/nodejs/node/issues/18391&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4b521521f75103faccb7d51cd9d2f1b5e0e6ccaf" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;readable.setEncoding()&lt;/code&gt; will change the behavior of how the &lt;code&gt;highWaterMark&lt;/code&gt; operates in non-object mode.</source>
          <target state="translated">&lt;code&gt;readable.setEncoding()&lt;/code&gt; 사용 하면 &lt;code&gt;highWaterMark&lt;/code&gt; 가 비 객체 모드에서 작동 하는 방식의 동작이 변경 됩니다.</target>
        </trans-unit>
        <trans-unit id="27af502777cc48272ed80adad79f83defdbec1fe" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;'error'&lt;/code&gt; event mechanism is most common for &lt;a href=&quot;stream&quot;&gt;stream-based&lt;/a&gt; and &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;event emitter-based&lt;/a&gt; APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail).</source>
          <target state="translated">의 사용은 &lt;code&gt;'error'&lt;/code&gt; 이벤트 메커니즘에 대해 가장 보편적 인 &lt;a href=&quot;stream&quot;&gt;스트림 기반&lt;/a&gt; 및 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;이벤트 방출 계&lt;/a&gt; (통과 또는 실패 할 수 단일 조작 대조적으로) 자신의 시간에 걸쳐 비동기 일련의 동작을 대표하는 API.</target>
        </trans-unit>
        <trans-unit id="f9afa630637657eabbb89a3f52ab510d1fb28688" translate="yes" xml:space="preserve">
          <source>The use of the Extended CONNECT Protocol is enabled by HTTP/2 servers by using the &lt;code&gt;enableConnectProtocol&lt;/code&gt; setting:</source>
          <target state="translated">&lt;code&gt;enableConnectProtocol&lt;/code&gt; 설정 을 사용하여 HTTP / 2 서버에서 확장 CONNECT 프로토콜을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="300d2118e20daa8e0f1e2f8f53ad243a96013499" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if Node.js is built on the Android operating system. &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Android support is experimental&lt;/a&gt;.</source>
          <target state="translated">Node.js가 Android 운영 체제에 빌드 된 경우 &lt;code&gt;'android'&lt;/code&gt; 값 도 반환 될 수 있습니다. &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Android 지원은 실험적&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="59f4a988511ad2f772cdb10a461f62d9115d066c" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;is experimental&lt;/a&gt;.</source>
          <target state="translated">Node.js가 Android 운영 체제에서 빌드 된 경우 &lt;code&gt;'android'&lt;/code&gt; 값 이 리턴 될 수도 있습니다. 그러나 Node.js의 Android 지원 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;은 실험적&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c07b4ef549b464279da1a098d4302bead0c3d309" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is considered &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;to be experimental&lt;/a&gt; at this time.</source>
          <target state="translated">Node.js가 Android 운영 체제에서 빌드 된 경우 &lt;code&gt;'android'&lt;/code&gt; 값 이 리턴 될 수도 있습니다. 그러나 현재 Node.js의 Android 지원은 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;실험적인&lt;/a&gt; 것으로 간주 됩니다 .</target>
        </trans-unit>
        <trans-unit id="941fe2cec88cb061344cd4ca3f47041ec7d3d800" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;0&lt;/code&gt; is now accepted as a file descriptor.</source>
          <target state="translated">값 &lt;code&gt;0&lt;/code&gt; 은 이제 파일 디스크립터로 승인됩니다.</target>
        </trans-unit>
        <trans-unit id="ddbfd621c854ebb6c9668e80ef6194f125b93fb8" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;undefined&lt;/code&gt; cannot be used for cases where there is not a thrown exception due to possible ambiguity with &lt;code&gt;throw undefined;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 값 은 &lt;code&gt;throw undefined;&lt;/code&gt; 대한 모호성으로 인해 예외가 발생하지 않는 경우 사용할 수 없습니다 . .</target>
        </trans-unit>
        <trans-unit id="d78b331e35be7b21a30c47f32e06a07819b550e7" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; 가 반환 한 &lt;code&gt;homedir&lt;/code&gt; 의 값은 운영 체제에서 제공합니다. 이는 운영 체제 응답으로 돌아 가기 전에 홈 디렉토리에 대한 환경 변수를 쿼리하는 &lt;code&gt;os.homedir()&lt;/code&gt; 의 결과와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="c22adcf410f61546f4cf7752ab0362f5a6a5606a" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries several environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; 의해 리턴 된 &lt;code&gt;homedir&lt;/code&gt; 의 값은 운영 체제에서 제공합니다. 이는 운영 체제 응답으로 돌아 가기 전에 홈 디렉토리에 대한 여러 환경 변수를 쿼리하는 &lt;code&gt;os.homedir()&lt;/code&gt; 의 결과와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="6329830cca711ff7e90b6ad78fe1cb5caa3423e1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; is &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; within the script.</source>
          <target state="translated">의 값 &lt;code&gt;this&lt;/code&gt; 인 &lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; 스크립트 내에서.</target>
        </trans-unit>
        <trans-unit id="f4c400444128a7253063ab3d3ca508cbfb8b9928" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.hash&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">값 &lt;code&gt;urlObject.hash&lt;/code&gt; 이 추가되어 &lt;code&gt;result&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f11b40efff2f11ec85da3f23b35a76cc6588c477" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.pathname&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">값 &lt;code&gt;urlObject.pathname&lt;/code&gt; 이 추가되어 &lt;code&gt;result&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e5ee59ce8058895b38d6200c77460df3494139ea" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.port&lt;/code&gt; is coerced to a string and appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlObject.port&lt;/code&gt; 의 값은 문자열에 강제되고 &lt;code&gt;result&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="f9a81e556419112a8d0a931ecf395dd3247be233" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.search&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">값 &lt;code&gt;urlObject.search&lt;/code&gt; 이 추가되어 &lt;code&gt;result&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e7948e802953d66c2402ca8fa5d1b25f66c1e5b8" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;code&gt;postMessage()&lt;/code&gt; contained an object that is not supported for transferring.</source>
          <target state="translated">&lt;code&gt;postMessage()&lt;/code&gt; 전달 된 값 에 전송이 지원되지 않는 객체가 포함되었습니다.</target>
        </trans-unit>
        <trans-unit id="e79bd05eced9303cb66ff355ac9f577ee93b88c0" translate="yes" xml:space="preserve">
          <source>The value returned is an array of objects containing the following properties:</source>
          <target state="translated">리턴 된 값은 다음 특성을 포함하는 오브젝트의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="ca7dd665e8fdfe267d513d08093ce8bedbca4171" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if decoding errors result in a &lt;code&gt;TypeError&lt;/code&gt; being thrown.</source>
          <target state="translated">디코딩 오류로 인해 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 하면 값이 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f1ca85b3627e52d634af29f4b8a623574861fb2b" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if the decoding result will include the byte order mark.</source>
          <target state="translated">디코딩 결과에 바이트 순서 마크가 포함되면 이 값이 &lt;code&gt;true&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="104132237db0b7ecb17081ab083c9af7c1d419d4" translate="yes" xml:space="preserve">
          <source>The variables &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; will be available inside the function body following the macro invocation.</source>
          <target state="translated">변수 &lt;code&gt;env&lt;/code&gt; 및 &lt;code&gt;exports&lt;/code&gt; 는 매크로 호출에 따라 함수 본문 내에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="1ca2642bb4155ee750ac00797ce4a46dc67ac445" translate="yes" xml:space="preserve">
          <source>The various loader hooks can be used together to accomplish wide-ranging customizations of Node.js&amp;rsquo; code loading and evaluation behaviors.</source>
          <target state="translated">다양한 로더 후크를 함께 사용하여 Node.js의 코드로드 및 평가 동작에 대한 광범위한 사용자 정의를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4d706806806ea43c9c128b45cdecd01ed8d570e" translate="yes" xml:space="preserve">
          <source>The vm context passed into the API is not yet initialized. This could happen when an error occurs (and is caught) during the creation of the context, for example, when the allocation fails or the maximum call stack size is reached when the context is created.</source>
          <target state="translated">API에 전달 된 vm 컨텍스트가 아직 초기화되지 않았습니다. 이는 컨텍스트를 생성하는 동안 오류가 발생하고 포착되었을 때 (예 : 할당이 실패하거나 컨텍스트가 생성 될 때 최대 호출 스택 크기에 도달 한 경우) 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a3768d673fbfe9fe1a8bf340a95d76c85f8f437" translate="yes" xml:space="preserve">
          <source>The workaround in this situation is to call the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method to begin the flow of data:</source>
          <target state="translated">이 상황에서 해결 방법은 &lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 데이터 흐름을 시작하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4d6edeb8cb0fc86e77857d0fda8d129467b2e13b" translate="yes" xml:space="preserve">
          <source>The worker processes are spawned using the &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.</source>
          <target state="translated">워커 프로세스는 &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 생성 되므로 IPC를 통해 상위와 통신하고 서버 핸들을 앞뒤로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aaa2d3ce72e4b3a43da91c13bc4934c0350da0af" translate="yes" xml:space="preserve">
          <source>The wrapper function is expected to be called exactly &lt;code&gt;exact&lt;/code&gt; times. If the function has not been called exactly &lt;code&gt;exact&lt;/code&gt; times when &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; is called, then &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; will throw an error.</source>
          <target state="translated">래퍼 함수는 정확히 &lt;code&gt;exact&lt;/code&gt; 시간에 호출 될 것으로 예상됩니다 . 함수가 정확히 호출되지 않은 경우 &lt;code&gt;exact&lt;/code&gt; 시간을 때 &lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; &lt;/a&gt; 호출, 다음 &lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="052d8814bbbc21731431f0d8bff6bf49f919c5ba" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;request.url&lt;/code&gt; will be:</source>
          <target state="translated">그러면 &lt;code&gt;request.url&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0c414cc316bb380ca834b2610259a592dc194ac7" translate="yes" xml:space="preserve">
          <source>Then in another file we could do:</source>
          <target state="translated">그런 다음 다른 파일에서 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bfbe586e02fe7477b1253341534ea2bb9055af6" translate="yes" xml:space="preserve">
          <source>Then, in &lt;code&gt;myobject.h&lt;/code&gt;, the wrapper class inherits from &lt;code&gt;node::ObjectWrap&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;myobject.h&lt;/code&gt; 에서 래퍼 클래스는 &lt;code&gt;node::ObjectWrap&lt;/code&gt; 에서 상속 합니다 .</target>
        </trans-unit>
        <trans-unit id="90426bdb684915cfaf8776137e646120a460c1af" translate="yes" xml:space="preserve">
          <source>Then, the above function can be invoked from a native add-on using the following code:</source>
          <target state="translated">그런 다음 다음 코드를 사용하여 기본 애드온에서 위 함수를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73571d4285a148f8c850321e41ee7538063e9a0e" translate="yes" xml:space="preserve">
          <source>There are a few design considerations when declaring a module that may be loaded multiple times. The documentation of &lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;context-aware addons&lt;/a&gt; provides more details.</source>
          <target state="translated">여러 번로드 될 수있는 모듈을 선언 할 때 몇 가지 설계 고려 사항이 있습니다. &lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;상황 인식 애드온&lt;/a&gt; 설명서 는 자세한 내용을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ba61ede2581496949913fe44efcbd9784cfd62d9" translate="yes" xml:space="preserve">
          <source>There are a few special headers that should be noted.</source>
          <target state="translated">주목해야 할 몇 가지 특수 헤더가 있습니다.</target>
        </trans-unit>
        <trans-unit id="136d6e7557a4d34635921dd2991584bcb620088d" translate="yes" xml:space="preserve">
          <source>There are cases (for example, resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain N-API calls. If there is no other script on the stack the &lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt;&lt;code&gt;napi_open_callback_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt;&lt;code&gt;napi_close_callback_scope&lt;/code&gt;&lt;/a&gt; functions can be used to open/close the required scope.</source>
          <target state="translated">특정 N-API 호출을 수행 할 때 콜백과 연관된 범위와 동등한 범위를 가져야하는 경우 (예 : 약속 해결)가 있습니다. 스택에 다른 스크립트가 없으면 &lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt; &lt;code&gt;napi_open_callback_scope&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt; &lt;code&gt;napi_close_callback_scope&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 필요한 범위를 열거 나 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dbf25be1fb4ee565e1f98036a323d619cf26ae97" translate="yes" xml:space="preserve">
          <source>There are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; runtime runs multiple instances of Node.js in a single process. Each instance will have its own &lt;code&gt;require()&lt;/code&gt; cache, and thus each instance will need a native addon to behave correctly when loaded via &lt;code&gt;require()&lt;/code&gt;. From the addon's perspective, this means that it must support multiple initializations.</source>
          <target state="translated">Node.js 애드온을 여러 컨텍스트에서 여러 번로드해야하는 환경이 있습니다. 예를 들어, &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; 런타임은 단일 프로세스에서 Node.js의 여러 인스턴스를 실행합니다. 각 인스턴스에는 자체 &lt;code&gt;require()&lt;/code&gt; 캐시가 있으므로 &lt;code&gt;require()&lt;/code&gt; 를 통해로드 할 때 각 인스턴스가 올바르게 작동하려면 기본 애드온이 필요합니다 . 애드온의 관점에서 보면 다중 초기화를 지원해야합니다.</target>
        </trans-unit>
        <trans-unit id="efb4ff938e74b88ea0e6e30ab328bd442468ef8f" translate="yes" xml:space="preserve">
          <source>There are equivalents to the zlib options for Brotli-based streams, although these options have different ranges than the zlib ones:</source>
          <target state="translated">Brotli 기반 스트림에 대한 zlib 옵션과 동일하지만 이러한 옵션은 zlib와 다른 범위를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="9941613492520ff34cf0deb38e791800ee7a5c07" translate="yes" xml:space="preserve">
          <source>There are four fundamental stream types within Node.js:</source>
          <target state="translated">Node.js에는 네 가지 기본 스트림 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="dde1500fca17353440ae8484822501b542d81fb1" translate="yes" xml:space="preserve">
          <source>There are four types of specifiers:</source>
          <target state="translated">지정자에는 네 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a931ff5d55f1c3afbe2f95105c6e77b48277bb0" translate="yes" xml:space="preserve">
          <source>There are many stream objects provided by Node.js. For instance, a &lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;request to an HTTP server&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; are both stream instances.</source>
          <target state="translated">Node.js가 제공하는 많은 스트림 객체가 있습니다. 예를 들어, &lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;HTTP 서버&lt;/a&gt; 및 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 에&lt;/a&gt; 대한 요청 은 모두 스트림 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="489828fe1e889442eeda5f8face869dde3d76a80" translate="yes" xml:space="preserve">
          <source>There are occasions where &lt;code&gt;napi_instanceof()&lt;/code&gt; is insufficient for ensuring that a JavaScript object is a wrapper for a certain native type. This is the case especially when wrapped JavaScript objects are passed back into the addon via static methods rather than as the &lt;code&gt;this&lt;/code&gt; value of prototype methods. In such cases there is a chance that they may be unwrapped incorrectly.</source>
          <target state="translated">경우가 있습니다 &lt;code&gt;napi_instanceof()&lt;/code&gt; 자바 스크립트 객체를 특정 기본 유형의 래퍼가 보장 불충분는. 이것은 특히 래핑 된 JavaScript 객체가 프로토 타입 메서드 의 &lt;code&gt;this&lt;/code&gt; 값 이 아닌 정적 메서드를 통해 애드온으로 다시 전달되는 경우 입니다. 이러한 경우 포장이 잘못 풀릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b08753e896dc3b6a7c1f8c73d6f29652afc9286" translate="yes" xml:space="preserve">
          <source>There are ongoing efforts to make the latter code possible.</source>
          <target state="translated">후자의 코드를 가능하게하기위한 지속적인 노력이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cca70f7a24329f2fb4b95221882a8404c5c05645" translate="yes" xml:space="preserve">
          <source>There are only 5 TLSv1.3 cipher suites:</source>
          <target state="translated">TLSv1.3 암호 스위트는 5 개뿐입니다.</target>
        </trans-unit>
        <trans-unit id="5431d0afa6129bcba426cef1e17c022c359e7b17" translate="yes" xml:space="preserve">
          <source>There are several options and other constants available for Brotli-based streams:</source>
          <target state="translated">Brotli 기반 스트림에 사용할 수있는 몇 가지 옵션 및 기타 상수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="42e16077da0035c3069c49856eb3033b4b72553d" translate="yes" xml:space="preserve">
          <source>There are several options that can be set on Brotli encoders, affecting compression efficiency and speed. Both the keys and the values can be accessed as properties of the &lt;code&gt;zlib.constants&lt;/code&gt; object.</source>
          <target state="translated">Brotli 엔코더에서 설정할 수있는 몇 가지 옵션이 있으며 압축 효율과 속도에 영향을줍니다. 키와 값 모두 &lt;code&gt;zlib.constants&lt;/code&gt; 오브젝트의 특성으로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="68a19ad87ed88b1d5cfb1b645ade3d15711bd59d" translate="yes" xml:space="preserve">
          <source>There are several types of error conditions that may arise when using the &lt;code&gt;http2&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;http2&lt;/code&gt; 모듈을 사용할 때 발생할 수있는 몇 가지 유형의 오류 조건이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26c7f747d478773cb0c7b9fd07d4c61acf3a4a1f" translate="yes" xml:space="preserve">
          <source>There are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call &lt;code&gt;readable.read(0)&lt;/code&gt;, which will always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">실제로 데이터를 소비하지 않고 기본적으로 읽을 수있는 스트림 메커니즘의 새로 고침을 트리거해야하는 경우가 있습니다. 이러한 경우 &lt;code&gt;readable.read(0)&lt;/code&gt; 을 호출 할 수 있으며 항상 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="dd9ef41883fe3bdd2c2207efb8d44bad0186fe1c" translate="yes" xml:space="preserve">
          <source>There are subtle consequences in choosing one over the other, please consult the &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;Implementation considerations section&lt;/a&gt; for more information.</source>
          <target state="translated">다른 것을 선택하면 미묘한 결과가 발생 합니다. 자세한 내용 은 &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;구현 고려 사항 섹션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6d6fbe184691d2e54bbf5609f598f34c9f95c95a" translate="yes" xml:space="preserve">
          <source>There are three options for implementing Addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless you need direct access to functionality which is not exposed by N-API, use N-API. Refer to the section &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">애드온을 구현하기위한 세 가지 옵션이 있습니다 : N-API, nan 또는 내부 V8, libuv 및 Node.js 라이브러리의 직접 사용. N-API에 의해 노출되지 않은 기능에 직접 액세스해야하는 경우가 아니라면 N-API를 사용하십시오. &lt;a href=&quot;n-api&quot;&gt;N-API에&lt;/a&gt; 대한 자세한 내용은 C / C ++ 애드온-N-API 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a84e67ac6afa19b0bb7e32d3243ac6912e617a6" translate="yes" xml:space="preserve">
          <source>There are three options for implementing addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless there is a need for direct access to functionality which is not exposed by N-API, use N-API. Refer to &lt;a href=&quot;n-api&quot;&gt;C/C++ addons with N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">애드온 구현에는 N-API, nan 또는 내부 V8, libuv 및 Node.js 라이브러리의 직접 사용의 세 가지 옵션이 있습니다. N-API에 의해 노출되지 않는 기능에 직접 액세스 할 필요가없는 경우 N-API를 사용하십시오. &lt;a href=&quot;n-api&quot;&gt;N-API에&lt;/a&gt; 대한 자세한 내용은 N-API 가있는 C / C ++ 애드온을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e769f43d8b2c2a24eea5250cfae5e60ed961a3d5" translate="yes" xml:space="preserve">
          <source>There are two key differences between the Node.js &lt;code&gt;EventTarget&lt;/code&gt; and the &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt; Web API&lt;/a&gt;:</source>
          <target state="translated">Node.js &lt;code&gt;EventTarget&lt;/code&gt; 과 &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; 웹 API&lt;/a&gt; 에는 두 가지 주요 차이점이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9db4014699f46bd5890e62e4dba34c251b486d78" translate="yes" xml:space="preserve">
          <source>There are two ways to create new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instances from a &lt;code&gt;Buffer&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 에서 새 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 인스턴스 를 만드는 방법에는 두 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8f793dc4fcaeca43b4ba873686274c2e8f8925a7" translate="yes" xml:space="preserve">
          <source>There can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count.</source>
          <target state="translated">동일한 객체를 참조하는 여러 개의 영구 참조가 생성 될 수 있으며, 각각의 객체는 개별 개수를 기준으로 객체를 활성 상태로 유지하거나 유지하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0fe3f1751523750e75dcc6278c56537ba6011fcb" translate="yes" xml:space="preserve">
          <source>There is a special case when sending a &lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; message. Messages containing a &lt;code&gt;NODE_&lt;/code&gt; prefix in the &lt;code&gt;cmd&lt;/code&gt; property are reserved for use within Node.js core and will not be emitted in the child's &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Rather, such messages are emitted using the &lt;code&gt;'internalMessage'&lt;/code&gt; event and are consumed internally by Node.js. Applications should avoid using such messages or listening for &lt;code&gt;'internalMessage'&lt;/code&gt; events as it is subject to change without notice.</source>
          <target state="translated">&lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; 메시지를 보낼 때 특별한 경우 가 있습니다. &lt;code&gt;cmd&lt;/code&gt; 특성 에 &lt;code&gt;NODE_&lt;/code&gt; 접 두부를 포함하는 메시지 는 Node.js 코어 내에서 사용하도록 예약되어 있으며 하위의 &lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt; 이벤트 에서 생성되지 않습니다 . 오히려 이러한 메시지는 &lt;code&gt;'internalMessage'&lt;/code&gt; 이벤트를 사용하여 생성 되며 Node.js에 의해 내부적으로 사용됩니다. 응용 프로그램은 예고없이 변경 될 수 있으므로 이러한 메시지를 사용하거나 &lt;code&gt;'internalMessage'&lt;/code&gt; 이벤트를 수신하지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="7f4a67800306ac64b920c2be0c83ae4d3007f584" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;PROMISE&lt;/code&gt; resource type, which is used to track &lt;code&gt;Promise&lt;/code&gt; instances and asynchronous work scheduled by them.</source>
          <target state="translated">&lt;code&gt;PROMISE&lt;/code&gt; 리소스 유형 도 있습니다.이 리소스 유형은 &lt;code&gt;Promise&lt;/code&gt; 인스턴스 및 예약 된 비동기 작업 을 추적하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e31048695af7ec9e8cc2c7c604352f23bc3184d4" translate="yes" xml:space="preserve">
          <source>There is an edge case worth noting when using the &lt;code&gt;events.once()&lt;/code&gt; function to await multiple events emitted on in the same batch of &lt;code&gt;process.nextTick()&lt;/code&gt; operations, or whenever multiple events are emitted synchronously. Specifically, because the &lt;code&gt;process.nextTick()&lt;/code&gt; queue is drained before the &lt;code&gt;Promise&lt;/code&gt; microtask queue, and because &lt;code&gt;EventEmitter&lt;/code&gt; emits all events synchronously, it is possible for &lt;code&gt;events.once()&lt;/code&gt; to miss an event.</source>
          <target state="translated">&lt;code&gt;events.once()&lt;/code&gt; 함수를 사용하여 &lt;code&gt;process.nextTick()&lt;/code&gt; 작업 의 동일한 일괄 처리에서 생성 된 여러 이벤트를 대기 하거나 여러 이벤트가 동 기적으로 생성 될 때마다 주목할 가치가있는 경우가 있습니다 . 특히, &lt;code&gt;process.nextTick()&lt;/code&gt; 큐가 &lt;code&gt;Promise&lt;/code&gt; 마이크로 태스크 큐 보다 먼저 비워 지고 &lt;code&gt;EventEmitter&lt;/code&gt; 가 모든 이벤트를 동 기적으로 방출 하기 때문에 &lt;code&gt;events.once()&lt;/code&gt; 가 이벤트를 놓칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="741d73c54f957fe61e35c6abd8637dba21b785cc" translate="yes" xml:space="preserve">
          <source>There is no equivalent to this API in browsers.</source>
          <target state="translated">브라우저에는이 API에 해당하는 것이 없습니다.</target>
        </trans-unit>
        <trans-unit id="3a7ccafeacce74e97b6782160f11feb38555669c" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using asynchronous methods. So the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation may complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">비동기 메서드를 사용할 때는 순서가 보장되지 않습니다. 다음은 오류 때문에하는 경향이있다 그래서 &lt;code&gt;fs.stat()&lt;/code&gt; 작업이 전에 완료 할 수 &lt;code&gt;fs.rename()&lt;/code&gt; 작동 :</target>
        </trans-unit>
        <trans-unit id="70935f1d3d5e4fd62d42c2c159e6aea9b6c95079" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using either the callback or promise-based methods. For example, the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation might complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">콜백 또는 약속 기반 메서드를 사용할 때 보장 된 순서는 없습니다. 예를 들어, 다음은 오류 때문에하는 경향이 &lt;code&gt;fs.stat()&lt;/code&gt; 작업이 전에 완료 할 수 &lt;code&gt;fs.rename()&lt;/code&gt; 작동 :</target>
        </trans-unit>
        <trans-unit id="9499af4d83f7a3933b926f5089a91e801e6f9b3b" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time &amp;mdash; possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">거부를 항상 처리 할 수 있는 &lt;code&gt;Promise&lt;/code&gt; 체인에 대한 최상위 개념은 없습니다 . 본질적으로 비동기식이기 때문에 &lt;code&gt;Promise&lt;/code&gt; 거부는 미래의 시점에서 처리 될 수 있습니다. 아마도 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 이벤트가 발생 하는 데 걸리는 이벤트 루프 턴보다 훨씬 늦습니다.</target>
        </trans-unit>
        <trans-unit id="3485b253ac4903049655572c6b7db990c6f6ad19" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time, possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">거부를 항상 처리 할 수 있는 &lt;code&gt;Promise&lt;/code&gt; 체인에 대한 최상위 개념은 없습니다 . 본질적으로 비동기식이기 때문에 &lt;code&gt;Promise&lt;/code&gt; 거부는 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 이벤트가 발생 하는 데 걸리는 이벤트 루프 턴보다 훨씬 늦게 미래 시점에서 처리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d41af3e735ab2e346b33ec05065393fa3da84547" translate="yes" xml:space="preserve">
          <source>There is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a &lt;code&gt;Hash&lt;/code&gt; stream will only ever have a single chunk of output which is provided when the input is ended. A &lt;code&gt;zlib&lt;/code&gt; stream will produce output that is either much smaller or much larger than its input.</source>
          <target state="translated">출력이 입력과 동일한 크기, 동일한 수의 청크 또는 동시에 도착할 필요는 없습니다. 예를 들어, &lt;code&gt;Hash&lt;/code&gt; 스트림에는 입력이 끝날 때 제공되는 단일 출력 청크 만 있습니다. &lt;code&gt;zlib&lt;/code&gt; 스트림 중 더 작은 또는 입력보다 더 큰 출력을 생산한다.</target>
        </trans-unit>
        <trans-unit id="f6752fbe1232a75370c52187c18b0bfebe5cef5a" translate="yes" xml:space="preserve">
          <source>There is no semi-colon after &lt;code&gt;NODE_MODULE&lt;/code&gt; as it's not a function (see &lt;code&gt;node.h&lt;/code&gt;).</source>
          <target state="translated">함수가 &lt;code&gt;NODE_MODULE&lt;/code&gt; 로 NODE_MODULE 뒤에 세미콜론이 없습니다 ( &lt;code&gt;node.h&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="1761405f7560e0613a6cad3aca984566accc5d24" translate="yes" xml:space="preserve">
          <source>There is no way to prevent the exiting of the event loop at this point, and once all &lt;code&gt;'exit'&lt;/code&gt; listeners have finished running the Node.js process will terminate.</source>
          <target state="translated">이 시점에서 이벤트 루프가 종료되는 것을 막을 방법이 없으며 모든 &lt;code&gt;'exit'&lt;/code&gt; 리스너가 실행을 마치면 Node.js 프로세스가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="c8d9cd97680b932da70dad66e0e134e8da83ab30" translate="yes" xml:space="preserve">
          <source>There is not normally a reason to call this method because &lt;code&gt;ECDH&lt;/code&gt; only requires a private key and the other party's public key to compute the shared secret. Typically either &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; will be called. The &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; method attempts to generate the public point/key associated with the private key being set.</source>
          <target state="translated">&lt;code&gt;ECDH&lt;/code&gt; 가 공유 비밀을 계산하기 위해 개인 키와 상대방의 공개 키만 필요 하기 때문에이 메소드를 호출 할 이유는 없습니다 . 일반적으로 &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt; &lt;code&gt;ecdh.generateKeys()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 가 호출됩니다. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 메소드 시도는 개인 키의 존재 세트와 연관된 공개 포인트 / 키를 생성한다.</target>
        </trans-unit>
        <trans-unit id="3f3585e14ee5cd0674d2bfffe8a62484838e8f1d" translate="yes" xml:space="preserve">
          <source>There may be a delay between the &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'exit'&lt;/code&gt; events. These events can be used to detect if the process is stuck in a cleanup or if there are long-living connections.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; 와 &lt;code&gt;'exit'&lt;/code&gt; 이벤트 사이에 지연이있을 수 있습니다 . 이러한 이벤트는 프로세스가 정리에 걸리는지 또는 오래 지속되는 연결이 있는지 감지하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bba3543dee9ea91f94206f53de987930f9874179" translate="yes" xml:space="preserve">
          <source>There was a bug in Node.js or incorrect usage of Node.js internals. To fix the error, open an issue at &lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt;.</source>
          <target state="translated">Node.js에 버그가 있거나 Node.js 내부를 잘못 사용했습니다. 오류를 해결하려면 &lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt; 에서 문제를여십시오 .</target>
        </trans-unit>
        <trans-unit id="db2fa69bb8b4d9e6a5a4775222f61ead5ed51450" translate="yes" xml:space="preserve">
          <source>There was an attempt to use a &lt;code&gt;MessagePort&lt;/code&gt; instance in a closed state, usually after &lt;code&gt;.close()&lt;/code&gt; has been called.</source>
          <target state="translated">일반적으로 &lt;code&gt;.close()&lt;/code&gt; 가 호출 된 후 닫힌 상태에서 &lt;code&gt;MessagePort&lt;/code&gt; 인스턴스 를 사용하려고했습니다 .</target>
        </trans-unit>
        <trans-unit id="8c2872699c52fca493a736da697cd1c55a7b7f65" translate="yes" xml:space="preserve">
          <source>Therefore to read a file's whole contents from a &lt;code&gt;readable&lt;/code&gt;, it is necessary to collect chunks across multiple &lt;code&gt;'readable'&lt;/code&gt; events:</source>
          <target state="translated">따라서에서 파일의 전체 내용을 읽어 &lt;code&gt;readable&lt;/code&gt; , 여러 걸쳐 덩어리를 수집 할 필요가있다 &lt;code&gt;'readable'&lt;/code&gt; 이벤트 :</target>
        </trans-unit>
        <trans-unit id="754f342c55d3348d9516f90760098a1bea3cfcb1" translate="yes" xml:space="preserve">
          <source>These APIs provide the type &lt;code&gt;napi_threadsafe_function&lt;/code&gt; as well as APIs to create, destroy, and call objects of this type. &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; creates a persistent reference to a &lt;code&gt;napi_value&lt;/code&gt; that holds a JavaScript function which can be called from multiple threads. The calls happen asynchronously. This means that values with which the JavaScript callback is to be called will be placed in a queue, and, for each value in the queue, a call will eventually be made to the JavaScript function.</source>
          <target state="translated">이 API는 &lt;code&gt;napi_threadsafe_function&lt;/code&gt; 유형 과이 유형의 오브젝트 를 작성, 파기 및 호출 하는 API를 제공합니다 . &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; 은 여러 스레드에서 호출 할 수있는 JavaScript 함수를 보유하는 &lt;code&gt;napi_value&lt;/code&gt; 에 대한 지속적 참조를 작성 합니다. 호출은 비동기 적으로 발생합니다. 이는 JavaScript 콜백이 호출 될 값이 큐에 배치되고 큐의 각 값에 대해 결국 JavaScript 함수가 호출됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a36e985e57f05c7e84c751dd0c4673cc6bb7e955" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following:</source>
          <target state="translated">이러한 API는 다음 중 하나를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="ab3247d3394f4459aabb0d5e7cfa8d13e0f7db8b" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following: 1. Coerce JavaScript values to specific JavaScript types (such as &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;). 2. Check the type of a JavaScript value. 3. Check for equality between two JavaScript values.</source>
          <target state="translated">이 API는 다음 중 하나를 수행하도록 지원합니다. 1. JavaScript 값을 특정 JavaScript 유형 (예 : &lt;code&gt;Number&lt;/code&gt; 또는 &lt;code&gt;String&lt;/code&gt; ) 으로 강제 변환하십시오 . 2. JavaScript 값의 유형을 확인하십시오. 3. 두 JavaScript 값이 동일한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f7a10234d3fe5a51cc4325ae088318cfc712a583" translate="yes" xml:space="preserve">
          <source>These CommonJS variables are not available in ES modules.</source>
          <target state="translated">이러한 CommonJS 변수는 ES 모듈에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="749928e253ba002f7186e912db98b776c93c0d85" translate="yes" xml:space="preserve">
          <source>These advanced options are available for controlling decompression:</source>
          <target state="translated">다음과 같은 고급 옵션을 사용하여 감압을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b9f62edc3aaf20d90f4845d04676a42b04260ea" translate="yes" xml:space="preserve">
          <source>These are mostly for historic reasons.</source>
          <target state="translated">이것들은 대부분 역사적인 이유로 인한 것입니다.</target>
        </trans-unit>
        <trans-unit id="487b22b66f8d184a53a9dcfbab6f9a187dd0c70a" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backward incompatibility, but they are also expected by some users.</source>
          <target state="translated">이러한 동작은 부분적으로 역사적 이유 때문입니다. 변경하면 이전 버전과의 비 호환성이 생성되지만 일부 사용자도 예상합니다.</target>
        </trans-unit>
        <trans-unit id="f723d23d902d3dc9557352556e6b5d454055d450" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backwards incompatibility, but they are also expected by some users.</source>
          <target state="translated">이러한 동작은 변경으로 인해 이전 버전과의 비 호환성을 야기 할 수 있지만 일부 사용자에게도 예상되므로 역사적 이유로 일부 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a5b136b6b60c4ed00d8df2d82c0a6a7ad030249" translate="yes" xml:space="preserve">
          <source>These errors have never been released, but had been present on master between releases.</source>
          <target state="translated">이 오류는 릴리스 된 적이 없지만 릴리스간에 마스터에 존재했습니다.</target>
        </trans-unit>
        <trans-unit id="d444a6c59b18503b6828306190b3da244c05eaa9" translate="yes" xml:space="preserve">
          <source>These functions are implemented quite differently than &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;. They do not use &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; and they &lt;em&gt;always&lt;/em&gt; perform a DNS query on the network. This network communication is always done asynchronously, and does not use libuv's threadpool.</source>
          <target state="translated">이러한 함수는 &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 과는 상당히 다르게 구현 됩니다. 그들은 사용하지 마십시오 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt; 그들은 &lt;em&gt;항상&lt;/em&gt; 네트워크의 DNS 쿼리를 수행합니다. 이 네트워크 통신은 항상 비동기 적으로 이루어지며 libuv의 스레드 풀을 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="24cdde9c4ce42694fdfee71a149f5983befb138f" translate="yes" xml:space="preserve">
          <source>These functions implement the following interfaces:</source>
          <target state="translated">이러한 기능은 다음과 같은 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="067e9ba51bba0fff71ca73b5284b6b724824a791" translate="yes" xml:space="preserve">
          <source>These objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the &lt;a href=&quot;modules&quot;&gt;module system documentation&lt;/a&gt;:</source>
          <target state="translated">이러한 객체는 모든 모듈에서 사용할 수 있습니다. 다음 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. 그것들은 모듈의 범위에만 존재합니다. &lt;a href=&quot;modules&quot;&gt;모듈 시스템 문서를&lt;/a&gt; 참조하십시오 :</target>
        </trans-unit>
        <trans-unit id="a92a2040e1759234554eb3d95876ef117287affb" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;.</source>
          <target state="translated">이 stat 객체는 &lt;code&gt;fs.Stat&lt;/code&gt; 의 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="81ffaa5610a923a366ff2fb68c7b7ae7e89cef81" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;. If the &lt;code&gt;bigint&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, the numeric values in these objects are specified as &lt;code&gt;BigInt&lt;/code&gt;s.</source>
          <target state="translated">이러한 stat 객체는 &lt;code&gt;fs.Stat&lt;/code&gt; 의 인스턴스입니다 . 경우 &lt;code&gt;bigint&lt;/code&gt; 옵션은 &lt;code&gt;true&lt;/code&gt; , 이러한 개체의 숫자 값으로 지정됩니다 &lt;code&gt;BigInt&lt;/code&gt; 의.</target>
        </trans-unit>
        <trans-unit id="a7f5c6bb153f7ecd9533f0a1d47aa3444a5f2641" translate="yes" xml:space="preserve">
          <source>These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals:</source>
          <target state="translated">이 시간은 과거의 임의 시간과 관련이 있으며 시간과 관련이 없으므로 클럭 드리프트가 적용되지 않습니다. 주요 용도는 간격 사이의 성능을 측정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0406dde620b7e64bbd32e4cb8c0bbc3121260bb2" translate="yes" xml:space="preserve">
          <source>They are used internally by &lt;a href=&quot;console#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">이들은 각각 &lt;a href=&quot;console#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;console#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt; 의해 내부적으로 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="b30b2dac4cfcbca285a7b7116de61f5f1237d363" translate="yes" xml:space="preserve">
          <source>They do not use the same set of configuration files than what &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses. For instance, &lt;em&gt;they do not use the configuration from &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 이 사용하는 것과 동일한 구성 파일 세트를 사용하지 않습니다 . 예를 들어, &lt;em&gt;그들은 &lt;code&gt;/etc/hosts&lt;/code&gt; &lt;/em&gt;&lt;em&gt; 의 구성을 사용하지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2ea56235428b28cef1f2f9acfba69b76b619221b" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">이 &quot;Hello world&quot;예제는 C ++로 작성된 간단한 Addon이며 다음 JavaScript 코드와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="692dfc84db615cfec92e46e7af4aeebc4271f4fe" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">이 &quot;Hello world&quot;예제는 다음 JavaScript 코드와 동일한 C ++로 작성된 간단한 추가 기능입니다.</target>
        </trans-unit>
        <trans-unit id="66e9a4260b22fdad1a565eaa4103d9039fdbf381" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;ArrayBuffer&lt;/code&gt; is not guaranteed to correspond exactly to the original &lt;code&gt;Buffer&lt;/code&gt;. See the notes on &lt;code&gt;buf.byteOffset&lt;/code&gt; for details.</source>
          <target state="translated">이 &lt;code&gt;ArrayBuffer&lt;/code&gt; 는 원래 &lt;code&gt;Buffer&lt;/code&gt; 와 정확히 일치한다고 보장 할 수 없습니다 . 자세한 내용은 &lt;code&gt;buf.byteOffset&lt;/code&gt; 에 대한 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2512370bd56df49b594b7a713133b58f497c3cd9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Error&lt;/code&gt; is thrown when a read is attempted on a TTY &lt;code&gt;WriteStream&lt;/code&gt;, such as &lt;code&gt;process.stdout.on('data')&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Error&lt;/code&gt; 는 &lt;code&gt;process.stdout.on('data')&lt;/code&gt; 와 같은 TTY &lt;code&gt;WriteStream&lt;/code&gt; 에서 읽기를 시도 할 때 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="39742e84897b18f0eedc2af5e9fd8236a7c65b9b" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 객체를 할당 하고 전달 된 버퍼가 지원하는 데이터로 초기화합니다. 이것은 여전히 ​​완전히 지원되는 데이터 구조이지만 대부분의 경우 &lt;code&gt;TypedArray&lt;/code&gt; 를 사용 하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="9f9f6383f8d100211478dc2ef9a8cec62954908a" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 객체를 할당 하고 전달 된 버퍼에서 복사 한 데이터로 초기화합니다. 이것은 여전히 ​​완전히 지원되는 데이터 구조이지만 대부분의 경우 &lt;code&gt;TypedArray&lt;/code&gt; 를 사용 하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="735a91d83874cde7676b3e25ee0191cf41805cb1" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 객체를 할당 합니다. 이것은 여전히 ​​완전히 지원되는 데이터 구조이지만 대부분의 경우 &lt;code&gt;TypedArray&lt;/code&gt; 를 사용 하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="6b77dc094889eb2692e801516cd866717730e4b3" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Date&lt;/code&gt; 객체를 할당 합니다.</target>
        </trans-unit>
        <trans-unit id="c196cb0b40fe69112ca66200c4a74b7260d08ead" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code using &lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt;&lt;code&gt;napi_get_value_external&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 API는 외부 데이터가 첨부 된 JavaScript 값을 할당합니다. 자바 스크립트 코드를 통해 외부 데이터를 전달하는 데 사용되므로 나중에 &lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt; &lt;code&gt;napi_get_value_external&lt;/code&gt; 을&lt;/a&gt; 사용하여 네이티브 코드로 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7998ea99d1cc838811e0d8df86d28e4a62bc8591" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code. The API allows the caller to pass in a finalize callback, in case the underlying native resource needs to be cleaned up when the external JavaScript value gets collected.</source>
          <target state="translated">이 API는 외부 데이터가 첨부 된 JavaScript 값을 할당합니다. 이것은 JavaScript 코드를 통해 외부 데이터를 전달하는 데 사용되므로 나중에 기본 코드로 검색 할 수 있습니다. API는 외부 JavaScript 값이 수집 될 때 기본 고유 자원을 정리해야하는 경우 호출자가 최종 콜백을 전달할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="363266f752f8dea9471bad2f288fed6c4c06c654" translate="yes" xml:space="preserve">
          <source>This API allocates a default JavaScript &lt;code&gt;Object&lt;/code&gt;. It is the equivalent of doing &lt;code&gt;new Object()&lt;/code&gt; in JavaScript.</source>
          <target state="translated">이 API는 기본 JavaScript &lt;code&gt;Object&lt;/code&gt; 할당합니다 . JavaScript에서 &lt;code&gt;new Object()&lt;/code&gt; 를 수행하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a39488fe93d490d5976e523becbfa7322dd2f6d7" translate="yes" xml:space="preserve">
          <source>This API allocates a work object that is used to execute logic asynchronously. It should be freed using &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt; once the work is no longer required.</source>
          <target state="translated">이 API는 논리를 비동기 적으로 실행하는 데 사용되는 작업 오브젝트를 할당합니다. 작업이 더 이상 필요하지 않으면 &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt; &lt;code&gt;napi_delete_async_work&lt;/code&gt; 를&lt;/a&gt; 사용하여 해제해야 합니다.</target>
        </trans-unit>
        <trans-unit id="d63e8ba62f11bb852241a2b0aa7b58d201a30b7b" translate="yes" xml:space="preserve">
          <source>This API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling &lt;em&gt;into&lt;/em&gt; the add-on's native code &lt;em&gt;from&lt;/em&gt; JavaScript.</source>
          <target state="translated">이 API를 사용하면 추가 기능 작성자가 고유 코드로 함수 객체를 작성할 수 있습니다. 이 호출 허용하는 기본 메커니즘입니다 &lt;em&gt;에&lt;/em&gt; 부가 기능의 네이티브 코드 &lt;em&gt;에서&lt;/em&gt; 자바 스크립트.</target>
        </trans-unit>
        <trans-unit id="8dd5fc62dd12610ddf00da4580f78086ea7a8a67" translate="yes" xml:space="preserve">
          <source>This API associates &lt;code&gt;data&lt;/code&gt; with the currently running Agent. &lt;code&gt;data&lt;/code&gt; can later be retrieved using &lt;code&gt;napi_get_instance_data()&lt;/code&gt;. Any existing data associated with the currently running Agent which was set by means of a previous call to &lt;code&gt;napi_set_instance_data()&lt;/code&gt; will be overwritten. If a &lt;code&gt;finalize_cb&lt;/code&gt; was provided by the previous call, it will not be called.</source>
          <target state="translated">이 API 는 현재 실행중인 에이전트 와 &lt;code&gt;data&lt;/code&gt; 를 연결 합니다 . 나중에 &lt;code&gt;napi_get_instance_data()&lt;/code&gt; 사용하여 &lt;code&gt;data&lt;/code&gt; 를 검색 할 수 있습니다 . 이전에 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; 호출하여 설정 한 현재 실행중인 에이전트와 관련된 기존 데이터를 덮어 씁니다. 경우 &lt;code&gt;finalize_cb&lt;/code&gt; 이 이전 호출에 의해 제공되었다, 그것은 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb9807accb784346da4b294170dca41195385db4" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the &lt;code&gt;key&lt;/code&gt; own property from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;object&lt;/code&gt; 에서 &lt;code&gt;key&lt;/code&gt; 자체 속성 을 삭제하려고 시도 합니다 .</target>
        </trans-unit>
        <trans-unit id="c14effd61c957bf8b764c352d4e546b6d39372bb" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the specified &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">이 API는 지정된 삭제하려고 시도 &lt;code&gt;index&lt;/code&gt; 에서 &lt;code&gt;object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eefd9d0b3eff1797f4ec8fa9a473e7edc0d2a2cb" translate="yes" xml:space="preserve">
          <source>This API can be called even if there is a pending JavaScript exception.</source>
          <target state="translated">보류중인 JavaScript 예외가있는 경우에도이 API를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2de8f84612348b342d10646507923c0aa5b2c0a3" translate="yes" xml:space="preserve">
          <source>This API cancels queued work if it has not yet been started. If it has already started executing, it cannot be cancelled and &lt;code&gt;napi_generic_failure&lt;/code&gt; will be returned. If successful, the &lt;code&gt;complete&lt;/code&gt; callback will be invoked with a status value of &lt;code&gt;napi_cancelled&lt;/code&gt;. The work should not be deleted before the &lt;code&gt;complete&lt;/code&gt; callback invocation, even if it has been successfully cancelled.</source>
          <target state="translated">이 API는 대기중인 작업이 아직 시작되지 않은 경우 취소합니다. 이미 실행을 시작한 경우 취소 할 수 없으며 &lt;code&gt;napi_generic_failure&lt;/code&gt; 가 반환됩니다. 성공 하면 상태 값 &lt;code&gt;napi_cancelled&lt;/code&gt; 로 &lt;code&gt;complete&lt;/code&gt; 콜백이 호출됩니다 . 콜백을 &lt;code&gt;complete&lt;/code&gt; 호출 하기 전에 작업 이 성공적으로 취소 되더라도 작업을 삭제해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="57431dbca7e08b81d45fb5a6037ae282b5c085fc" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named own property. &lt;code&gt;key&lt;/code&gt; must be a string or a &lt;code&gt;Symbol&lt;/code&gt;, or an error will be thrown. N-API will not perform any conversion between data types.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 명명 된 고유 속성 이 있는지 확인합니다 . &lt;code&gt;key&lt;/code&gt; 는 문자열 또는 &lt;code&gt;Symbol&lt;/code&gt; 이어야합니다. 그렇지 않으면 오류가 발생합니다. N-API는 데이터 유형간에 변환을 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="df00668a39c6c8f23284d619d34702ee2bdec177" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named property.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 명명 된 속성 이 있는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="77017a1b76496c7920bf9d3ddbbe51f4eec0e781" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 &lt;code&gt;DataView&lt;/code&gt; 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="85cd50d093b265fd67db2b9b8fc771fec5f784aa" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a buffer.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 버퍼 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="8b04720a7d7ea49d3d60de79014fb69fa8491a06" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a date.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 날짜 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="5e43a0f69097cd9621e0e8616fc96ff13206b854" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a typed array.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 유형이 지정된 배열인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b1512ceb15a56445f12edb557bed0d491dd21b2b" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 &lt;code&gt;Error&lt;/code&gt; 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="23864b8fd9618610d06ad4c9de555c8fc662e0f9" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an array buffer.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 가 배열 버퍼인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e8c7e3fe1e7df4ee3d1c160136ec8c8b57a30461" translate="yes" xml:space="preserve">
          <source>This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.</source>
          <target state="translated">이 API는 전달 된 범위를 닫습니다. 범위는 생성 된 역순으로 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="5d1aae2a2f436ea48d9c7acff12819c96b4925cc" translate="yes" xml:space="preserve">
          <source>This API converts a single &lt;code&gt;BigInt&lt;/code&gt; value into a sign bit, 64-bit little-endian array, and the number of elements in the array. &lt;code&gt;sign_bit&lt;/code&gt; and &lt;code&gt;words&lt;/code&gt; may be both set to &lt;code&gt;NULL&lt;/code&gt;, in order to get only &lt;code&gt;word_count&lt;/code&gt;.</source>
          <target state="translated">이 API는 단일 &lt;code&gt;BigInt&lt;/code&gt; 값을 부호 비트, 64 비트 리틀 엔디안 배열 및 배열의 ​​요소 수로 변환합니다. &lt;code&gt;word_count&lt;/code&gt; 만 얻기 위해 &lt;code&gt;sign_bit&lt;/code&gt; 및 &lt;code&gt;words&lt;/code&gt; 가 모두 &lt;code&gt;NULL&lt;/code&gt; 로 설정 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce0e25291cf2e6b501788d49eeebff5721c4a9c8" translate="yes" xml:space="preserve">
          <source>This API converts an array of unsigned 64-bit words into a single &lt;code&gt;BigInt&lt;/code&gt; value.</source>
          <target state="translated">이 API는 부호없는 64 비트 단어 배열을 단일 &lt;code&gt;BigInt&lt;/code&gt; 값으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="4dacc40682bb28b50a6f0c8a84eaeb75999988ac" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;int64_t&lt;/code&gt; 유형을 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 유형으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="39a65c954085e0b75e67379733eefa4137788a57" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;uint64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;uint64_t&lt;/code&gt; 유형을 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 유형으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="872b6fbfcb10c1766c01c033a11510d812c343c5" translate="yes" xml:space="preserve">
          <source>This API create a new reference with the specified reference count to the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 지정된 참조 횟수를 사용하여 새 참조를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="bb7a9e00501915d315dc9db028de926ed4735c81" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;DataView&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;DataView&lt;/code&gt; objects provide an array-like view over an underlying data buffer, but one which allows items of different size and type in the &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">이 API 는 기존 &lt;code&gt;ArrayBuffer&lt;/code&gt; 위에 JavaScript &lt;code&gt;DataView&lt;/code&gt; 객체를 만듭니다 . &lt;code&gt;DataView&lt;/code&gt; 객체는 기본 데이터 버퍼에 대해 배열과 유사한 뷰를 제공하지만 &lt;code&gt;ArrayBuffer&lt;/code&gt; 에서 크기와 유형이 다른 항목을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="c2689ecf9af46ba39953d951567d6520bf653ba1" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF16-LE-encoded C string. The native string is copied.</source>
          <target state="translated">이 API 는 UTF16-LE로 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;String&lt;/code&gt; 객체를 만듭니다 . 기본 문자열이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="5d7c7b178115d5c2e4337be18e30534c47276b07" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF8-encoded C string. The native string is copied.</source>
          <target state="translated">이 API 는 UTF8로 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;String&lt;/code&gt; 객체를 만듭니다 . 기본 문자열이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="f8feb6065755866e5b518ec3409fce83787d5f3d" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from an ISO-8859-1-encoded C string. The native string is copied.</source>
          <target state="translated">이 API 는 ISO-8859-1- 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;String&lt;/code&gt; 객체를 만듭니다 . 기본 문자열이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="78e932bf060993a76782b2993b8d0e5d90ca6cbe" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;Symbol&lt;/code&gt; object from a UTF8-encoded C string.</source>
          <target state="translated">이 API 는 UTF8로 인코딩 된 C 문자열에서 JavaScript &lt;code&gt;Symbol&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="dd3e74bf0ee6bf2199a6c976eeb4432bd41d78cf" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;TypedArray&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;TypedArray&lt;/code&gt; objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype.</source>
          <target state="translated">이 API 는 기존 &lt;code&gt;ArrayBuffer&lt;/code&gt; 위에 JavaScript &lt;code&gt;TypedArray&lt;/code&gt; 객체를 만듭니다 . &lt;code&gt;TypedArray&lt;/code&gt; 객체는 각 요소가 동일한 기본 이진 스칼라 데이터 형식을 갖는 기본 데이터 버퍼에 대해 배열과 같은 뷰를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="eb7871e3b46d5ec2a3996e81a299debc3b8ecc76" translate="yes" xml:space="preserve">
          <source>This API creates a deferred object and a JavaScript promise.</source>
          <target state="translated">이 API는 지연된 오브젝트와 JavaScript 약속을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="25573620c7961f244c4fcf1ec2dc339f590285c9" translate="yes" xml:space="preserve">
          <source>This API decrements the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">이 API는 전달 된 참조의 참조 수를 줄이고 결과 참조 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8eff332e350a0e574536ca03420ca38be0ab632a" translate="yes" xml:space="preserve">
          <source>This API deletes the reference passed in.</source>
          <target state="translated">이 API는 전달 된 참조를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="23a2cb69e25f56f3c362034320b9ab3929281f96" translate="yes" xml:space="preserve">
          <source>This API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.</source>
          <target state="translated">이 API는 윤초를 관찰하지 않습니다. ECMAScript는 POSIX 시간 사양과 일치하므로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="dd6fca0a073178b69d2f39a3d83f5c7410fddeac" translate="yes" xml:space="preserve">
          <source>This API frees a previously allocated work object.</source>
          <target state="translated">이 API는 이전에 할당 된 작업 오브젝트를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="dd8d73286c93051c5ede6fc340006b9e8edcb1b1" translate="yes" xml:space="preserve">
          <source>This API gets the element at the requested index.</source>
          <target state="translated">이 API는 요청 된 인덱스에서 요소를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7f0b9e72b1ac3277c4602c64072072238f09ab14" translate="yes" xml:space="preserve">
          <source>This API gets the requested property from the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에서 요청 된 속성을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="98a5e0c385afa6d2fa9a179e263dfa1942ac13cb" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToBoolean()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;Section 7.1.2&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;섹션 7.1.2&lt;/a&gt; 에 정의 된대로 추상 작업 &lt;code&gt;ToBoolean()&lt;/code&gt; 을 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d25a05e4ed2a43028a62b36f7a945008651ab9c6" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToNumber()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;Section 7.1.3&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;섹션 7.1.3&lt;/a&gt; 에 정의 된 추상 작업 &lt;code&gt;ToNumber()&lt;/code&gt; 를 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4dcbf1148507fc0d2cb75126a083441bb025a61e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToObject()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;섹션 7.1.13&lt;/a&gt; 에 정의 된 추상 작업 &lt;code&gt;ToObject()&lt;/code&gt; 를 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fddc49ca9e6f7884f4f7402d158c3562d69f3dad" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;섹션 7.1.13&lt;/a&gt; 에 정의 된 추상 연산 &lt;code&gt;ToString()&lt;/code&gt; 을 구현합니다 . 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 게터가 정의 된 경우이 API는 재진입 할 ​​수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="96806471eb397aab399550c79244f2cb6c1c198e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">이 API 는 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;섹션 7.1.13&lt;/a&gt; 에 정의 된 추상 작업 &lt;code&gt;ToString()&lt;/code&gt; 을 구현합니다 . getter가 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 정의 된 경우이 API를 다시 입력 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f06230c0740f7b63f1615ff39e6c8deed4c8847d" translate="yes" xml:space="preserve">
          <source>This API increments the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">이 API는 전달 된 참조의 참조 수를 증가시키고 결과 참조 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b8c58ad460418d4b4b95ff2da9afea0a0ec2d635" translate="yes" xml:space="preserve">
          <source>This API is hazardous because in the following case:</source>
          <target state="translated">이 API는 다음과 같은 경우에 위험합니다.</target>
        </trans-unit>
        <trans-unit id="bb85535a8220d4eff8e0e3a7ee1e3a079d312053" translate="yes" xml:space="preserve">
          <source>This API is no longer deprecated.</source>
          <target state="translated">이 API는 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0c5024828803462de5995e87af9efa3f1777afa" translate="yes" xml:space="preserve">
          <source>This API is no longer experimental.</source>
          <target state="translated">이 API는 더 이상 실험적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cd41e783eaf560ec51e472abe82e76eb74feeda5" translate="yes" xml:space="preserve">
          <source>This API is under development, and changes (including incompatible changes to the API or wire format) may occur until this warning is removed.</source>
          <target state="translated">이 API는 개발 중이며이 경고가 제거 될 때까지 변경 사항 (API 또는 유선 형식의 호환되지 않는 변경 포함)이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dfa3ff17965f642d6a192310726a8f5b8b20e85" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;double&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;double&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="49877d21ef96ccd14727aaa7c002c5ffab88048a" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;int32_t&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="92bc6f15a322ff8b07f019e96a8cdf7d530c3029" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;int64_t&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6503e99b292474ebaf2bcc59e2356b6df0fa3d82" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;uint32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">이 API는 C &lt;code&gt;uint32_t&lt;/code&gt; 유형에서 JavaScript &lt;code&gt;Number&lt;/code&gt; 유형 으로 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="942e3ae495c5a4657aae15a037f4e246e6f8be57" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 되기 전에 기본 스레드에서 실행중인 이벤트 루프가 종료 될 수 있음을 나타내는 데 사용됩니다 . &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt; 와 유사하게 dem 등원 입니다.</target>
        </trans-unit>
        <trans-unit id="69d5e56003b7f8cb4d12ffc8eab17a293a3dc17b" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 되기 전에 메인 스레드에서 실행중인 이벤트 루프가 종료 될 수 있음을 나타내는 데 사용됩니다 . &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt; 와 유사하게 멱 등성입니다.</target>
        </trans-unit>
        <trans-unit id="0b33e42364a61da332e3e2db27d345503de5d1d5" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 될 때까지 기본 스레드에서 실행중인 이벤트 루프가 종료되지 않아야 함을 나타내는 데 사용됩니다 . &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt; 와 유사하게 dem 등원 입니다.</target>
        </trans-unit>
        <trans-unit id="0c0b66e358caa382c17ce63f4a5db0114fdfabe6" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 가 소멸 될 때까지 메인 스레드에서 실행중인 이벤트 루프가 종료되지 않아야 함을 나타내는 데 사용됩니다 . &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt; 와 유사하게 멱 등성입니다.</target>
        </trans-unit>
        <trans-unit id="587cd767b10603c8d3213430b7152df4d2279b2e" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of a &lt;code&gt;node::Buffer&lt;/code&gt; and it's length.</source>
          <target state="translated">이 API는 &lt;code&gt;node::Buffer&lt;/code&gt; 의 기본 데이터 버퍼를 검색하는 데 사용되며 길이입니다.</target>
        </trans-unit>
        <trans-unit id="0254baecc8eba4b547466faecb90c78e6d68158b" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of an &lt;code&gt;ArrayBuffer&lt;/code&gt; and its length.</source>
          <target state="translated">이 API는 &lt;code&gt;ArrayBuffer&lt;/code&gt; 의 기본 데이터 버퍼 와 길이 를 검색하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="36b58192525902070d2c0a7c428788e7464512e3" translate="yes" xml:space="preserve">
          <source>This API is used to return the JavaScript singleton object that is used to represent the given boolean value.</source>
          <target state="translated">이 API는 주어진 부울 값을 나타내는 데 사용되는 JavaScript 싱글 톤 객체를 반환하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2b8a478e9e4ad0ba2b83ceb79f6fe8b2726590f0" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which makes use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 를 사용하는 모든 스레드에서 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3a193c4c7abe861db8905fcb50538ab5a608deb2" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will start making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 를 사용하기 시작하는 모든 스레드에서 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6266d5dc6d62f9a22ff00a8bf12ea4d6477e4048" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will stop making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;func&lt;/code&gt; 사용을 중지하는 모든 스레드에서 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ab533709169cd3a484819689ba1c7142adf5ce42" translate="yes" xml:space="preserve">
          <source>This API may only be called from the main thread.</source>
          <target state="translated">이 API는 기본 스레드에서만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="319b4e36a7ead231d4ea80e0de94d083ff5268fa" translate="yes" xml:space="preserve">
          <source>This API open a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">이 API는 하나의 객체를 외부 범위로 승격 할 수있는 새로운 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="1d428023fa95497e48d68ac408f843d544e50ef9" translate="yes" xml:space="preserve">
          <source>This API open a new scope.</source>
          <target state="translated">이 API는 새로운 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="a93e16643b3e03345deb8f8210fcb379c0d37099" translate="yes" xml:space="preserve">
          <source>This API opens a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">이 API는 한 개체를 외부 범위로 승격 할 수있는 새 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="52465275dd21628e32d7a1dd63399f75db334558" translate="yes" xml:space="preserve">
          <source>This API opens a new scope.</source>
          <target state="translated">이 API는 새 범위를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="12f3e0e9a51f400dccede73be29a7a7dc94bdbcc" translate="yes" xml:space="preserve">
          <source>This API promotes the handle to the JavaScript object so that it is valid for the lifetime of the outer scope. It can only be called once per scope. If it is called more than once an error will be returned.</source>
          <target state="translated">이 API는 외부 오브젝트의 수명 동안 유효하도록 JavaScript 오브젝트에 대한 핸들을 승격시킵니다. 범위 당 한 번만 호출 할 수 있습니다. 두 번 이상 호출되면 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c5d285a239d764c227e486f18daf3332cdb1bfa0" translate="yes" xml:space="preserve">
          <source>This API queries a &lt;code&gt;napi_value&lt;/code&gt; to check if it represents an error object.</source>
          <target state="translated">이 API는 &lt;code&gt;napi_value&lt;/code&gt; 를 쿼리 하여 오류 객체를 나타내는 지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="07a858ab5884aa274ef23a00e2dbfc7bb56465d0" translate="yes" xml:space="preserve">
          <source>This API rejects a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">이 API는 연관된 지연된 오브젝트를 통해 JavaScript 약속을 거부합니다. 따라서 해당 지연 오브젝트를 사용할 수있는 JavaScript 약속을 거부하는 데만 사용할 수 있습니다. 이는 효과적으로 &lt;code&gt;napi_create_promise()&lt;/code&gt; 사용하여 약속을 작성 하고 해당 API에서 전달되도록 해당 호출에서 리턴 된 지연된 오브젝트를 보유해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="bdfac549e19d0fd3951aa268d2754e865e81e0fd" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, it has support for detecting an External value. If &lt;code&gt;value&lt;/code&gt; has a type that is invalid, an error is returned.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;12.5.5 절에&lt;/a&gt; 정의 된대로 객체 에서 &lt;code&gt;typeof&lt;/code&gt; 연산자 를 호출하는 것과 유사한 동작을 나타냅니다 . 그러나 외부 값 감지를 지원합니다. 경우 &lt;code&gt;value&lt;/code&gt; 유효하지 않은 유형이 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="37b45f96b0b997e3a98523c6bb3d2db3bf4f8b51" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, there are some differences:</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;섹션 12.5.5&lt;/a&gt; 에 정의 된대로 객체 에서 &lt;code&gt;typeof&lt;/code&gt; 연산자 를 호출하는 것과 유사한 동작을 나타냅니다 . 그러나 몇 가지 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d52bdf433c534f2133fcb54ff7c6f2707cbe4de1" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;IsArray&lt;/code&gt; operation on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;Section 7.2.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;7.2.2 섹션에&lt;/a&gt; 정의 된대로 객체 에서 &lt;code&gt;IsArray&lt;/code&gt; 작업을 호출하는 것을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="071bc6a2988b5ec1974c804b6e1314b62d4f8f5f" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;instanceof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;Section 12.10.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;12.10.4 단원에&lt;/a&gt; 정의 된대로 객체에서 연산자 의 &lt;code&gt;instanceof&lt;/code&gt; 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="0c169ebc6223ec0195007a1a8dddc814e6e1bb9f" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt; detach operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;Section 24.1.1.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;섹션 24.1.1.3&lt;/a&gt; 에 정의 된 &lt;code&gt;ArrayBuffer&lt;/code&gt; 분리 작업 의 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="cb8244e2d276441f1fdca1221750307d283ca0d4" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;code&gt;IsDetachedBuffer&lt;/code&gt; operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;Section 24.1.1.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;섹션 24.1.1.2&lt;/a&gt; 에 정의 된 &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;code&gt;IsDetachedBuffer&lt;/code&gt; 작업 의 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="1d161386d078bae13e76126f77747e5f73c7af9e" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the Strict Equality algorithm as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;Section 7.2.14&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 ECMAScript 언어 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;7.2.14 절에&lt;/a&gt; 정의 된 Squalt Equality 알고리즘의 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="9985bed5b2b909c86b4c219b81b72403588f5ec9" translate="yes" xml:space="preserve">
          <source>This API requests that the previously allocated work be scheduled for execution. Once it returns successfully, this API must not be called again with the same &lt;code&gt;napi_async_work&lt;/code&gt; item or the result will be undefined.</source>
          <target state="translated">이 API는 이전에 할당 된 작업이 실행되도록 예약되도록 요청합니다. 성공적으로 리턴되면 동일한 &lt;code&gt;napi_async_work&lt;/code&gt; 항목 으로이 API를 다시 호출하면 안됩니다. 그렇지 않으면 결과가 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="06d16e5f9910adb2bd8786d4e2bb452ed0ff9dff" translate="yes" xml:space="preserve">
          <source>This API resolves a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to resolve JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">이 API는 연관된 지연된 오브젝트를 통해 JavaScript 약속을 해결합니다. 따라서 해당 지연 오브젝트를 사용할 수있는 JavaScript 약속을 해결하는 데만 사용할 수 있습니다. 이는 효과적으로 &lt;code&gt;napi_create_promise()&lt;/code&gt; 사용하여 약속을 작성 하고 해당 API에서 전달되도록 해당 호출에서 리턴 된 지연된 오브젝트를 보유해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="27002effa854efa84116cc6ba528e82a613dccf1" translate="yes" xml:space="preserve">
          <source>This API retrieves a &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure with information about the last error that occurred.</source>
          <target state="translated">이 API 는 마지막으로 발생한 오류에 대한 정보가 있는 &lt;code&gt;napi_extended_error_info&lt;/code&gt; 구조를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="c54fae2ce18788face29f37c323cbd4a9728444f" translate="yes" xml:space="preserve">
          <source>This API retrieves data that was previously associated with the currently running Agent via &lt;code&gt;napi_set_instance_data()&lt;/code&gt;. If no data is set, the call will succeed and &lt;code&gt;data&lt;/code&gt; will be set to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; 를 통해 현재 실행중인 에이전트와 이전에 연결된 데이터를 검색합니다 . 데이터가 설정되지 않으면 호출이 성공하고 &lt;code&gt;data&lt;/code&gt; 가 &lt;code&gt;NULL&lt;/code&gt; 로 설정 됩니다 .</target>
        </trans-unit>
        <trans-unit id="65239448f493d9f6ef4cbb9fa475b6583cc8a2fc" translate="yes" xml:space="preserve">
          <source>This API retrieves the external data pointer that was previously passed to &lt;code&gt;napi_create_external()&lt;/code&gt;.</source>
          <target state="translated">이 API는 이전에 &lt;code&gt;napi_create_external()&lt;/code&gt; 전달 된 외부 데이터 포인터를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="f0eee031ab3af3225681355d84afe4145095683c" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;Error&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="db44d290a91d87cc4443be06ede8203a66b55369" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;RangeError&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fa81b73ac735abebb0edffd8561f17aa7d32742e" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;TypeError&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eac49581d384370c2fd8061e8992f383a07a12f6" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Array&lt;/code&gt; 유형에 해당하는 N-API 값을 반환합니다 . JavaScript 배열은 ECMAScript 언어 사양 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;섹션 22.1&lt;/a&gt; 에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ebdcd06ac50a711b98eac9ad3ba26e473236254" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created - that behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Array&lt;/code&gt; 유형에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;Array&lt;/code&gt; 의 길이 속성은 전달 된 길이 매개 변수로 설정됩니다. 그러나 기본 버퍼는 어레이가 생성 될 때 VM에 의해 사전 할당되는 것이 보장되지 않습니다.이 동작은 기본 VM 구현에 맡겨집니다. 버퍼가 C를 통해 직접 읽고 쓸 수있는 연속적인 메모리 블록이어야하는 경우 &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; &lt;/a&gt; 사용을 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6f1e1ad010526c6b95577249e9d20e0bd898f13" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created. That behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;Array&lt;/code&gt; 유형에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;Array&lt;/code&gt; 의 길이 속성은 전달 된 길이 매개 변수로 설정됩니다. 그러나 기본 버퍼는 어레이가 생성 될 때 VM에 의해 사전 할당된다는 보장이 없습니다. 이 동작은 기본 VM 구현에 맡겨집니다. 버퍼가 C를 통해 직접 읽고 쓸 수있는 연속적인 메모리 블록이어야하는 경우 &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; &lt;/a&gt; 사용을 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="74bae849b3abb7d0a846a00b3211719de9de8557" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;ArrayBuffer&lt;/code&gt;s are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for &lt;code&gt;TypedArray&lt;/code&gt; objects. The &lt;code&gt;ArrayBuffer&lt;/code&gt; allocated will have an underlying byte buffer whose size is determined by the &lt;code&gt;length&lt;/code&gt; parameter that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or &lt;code&gt;DataView&lt;/code&gt; object would need to be created.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; 에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;ArrayBuffer&lt;/code&gt; 는 고정 길이 이진 데이터 버퍼를 나타내는 데 사용됩니다. 일반적으로 &lt;code&gt;TypedArray&lt;/code&gt; 객체 의 백업 버퍼로 사용됩니다 . &lt;code&gt;ArrayBuffer&lt;/code&gt; 은 그 크기에 의해 결정되는 하부 바이트 버퍼 것이다 할당 &lt;code&gt;length&lt;/code&gt; 에있어 전달 파라미터. 근본적인 버퍼 임의로 경우 호출자에게 반환 호출자가 직접 버퍼를 조작하고자한다. 이 버퍼는 네이티브 코드에서만 직접 쓸 수 있습니다. JavaScript에서이 버퍼에 쓰려면 형식화 된 배열 또는 &lt;code&gt;DataView&lt;/code&gt; 객체를 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="5abde2fefb489242a6fbaf801b7da355c609cf82" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. The underlying byte buffer of the &lt;code&gt;ArrayBuffer&lt;/code&gt; is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called.</source>
          <target state="translated">이 API는 JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; 에 해당하는 N-API 값을 반환합니다 . &lt;code&gt;ArrayBuffer&lt;/code&gt; 의 기본 바이트 버퍼 는 외부에서 할당 및 관리됩니다. 호출자는 finalize 콜백이 호출 될 때까지 바이트 버퍼가 유효한 상태를 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="54dc707b3f198fc07141776bb634e4e4e63b2b8f" translate="yes" xml:space="preserve">
          <source>This API returns an array containing the names of the available properties of this object.</source>
          <target state="translated">이 API는이 개체의 사용 가능한 속성 이름이 포함 된 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aa79ae1b37565525274506b36dd7fc40477368cb" translate="yes" xml:space="preserve">
          <source>This API returns if the &lt;code&gt;Object&lt;/code&gt; passed in has an element at the requested index.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 에 요청 된 인덱스에 요소가 있는지 여부를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="c604c612d96a87d8101af3ddf6bfc01f4b4d68ec" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;global&lt;/code&gt; object.</source>
          <target state="translated">이 API는 &lt;code&gt;global&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="48a7f0383f00e9573b596f72e50a2cb7b8d0000d" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;new.target&lt;/code&gt; of the constructor call. If the current callback is not a constructor call, the result is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">이 API는 생성자 호출 의 &lt;code&gt;new.target&lt;/code&gt; 을 반환합니다 . 현재 콜백이 생성자 호출이 아닌 경우 결과는 &lt;code&gt;NULL&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ca0876caff75d7fcb5c27bc7d32784621271953f" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">이 API는 &lt;code&gt;null&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="6f4b499dfda4f2e7f389bb8a459c0442468d26c5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int32&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Number&lt;/code&gt; 와 동등한 C &lt;code&gt;int32&lt;/code&gt; 프리미티브를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="827d0e5a4fe902762d8fdbd2a59f01ff491412f5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Number&lt;/code&gt; 와 동등한 C &lt;code&gt;int64&lt;/code&gt; 프리미티브를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2df8e3cc2f4a8dd457d5502a718bb8bd98790b34" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 와 동등한 C &lt;code&gt;int64_t&lt;/code&gt; 프리미티브를 리턴합니다 . 필요한 경우 &lt;code&gt;lossless&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 값을 자릅니다 .</target>
        </trans-unit>
        <trans-unit id="accfb9b3a000444a53160665ebc8ad9cca255ff1" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;uint64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;BigInt&lt;/code&gt; 와 동등한 C &lt;code&gt;uint64_t&lt;/code&gt; 프리미티브를 리턴합니다 . 필요한 경우 &lt;code&gt;lossless&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 값을 자릅니다 .</target>
        </trans-unit>
        <trans-unit id="3a1a204e8e4a5df3c6cc124c41060a09c140f51d" translate="yes" xml:space="preserve">
          <source>This API returns the C boolean primitive equivalent of the given JavaScript &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Boolean&lt;/code&gt; 과 동등한 C 부울 프리미티브를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="ca2b5220b79fdd14c56eb3008d7a5c1f99fb540c" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 JavaScript &lt;code&gt;Number&lt;/code&gt; 와 동등한 C 이중 기본 요소를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="76fc91334d0e8e6d7cd76625caa8bac8a9d82ab4" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive of time value for the given JavaScript &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">이 API는 지정된 JavaScript &lt;code&gt;Date&lt;/code&gt; 에 대한 C double 프리미티브 시간 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a89a951199f81c03153d5318b6b870955ad2668b" translate="yes" xml:space="preserve">
          <source>This API returns the C primitive equivalent of the given &lt;code&gt;napi_value&lt;/code&gt; as a &lt;code&gt;uint32_t&lt;/code&gt;.</source>
          <target state="translated">이 API는 주어진 &lt;code&gt;napi_value&lt;/code&gt; 에 해당하는 C 프리미티브를 &lt;code&gt;uint32_t&lt;/code&gt; 로 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="252de5913968c0e14b8dc66ec544741c0d2689fb" translate="yes" xml:space="preserve">
          <source>This API returns the ISO-8859-1-encoded string corresponding the value passed in.</source>
          <target state="translated">이 API는 전달 된 값에 해당하는 ISO-8859-1- 인코딩 된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="84ae74192a0873baca176de8e267018dc4cfbd5a" translate="yes" xml:space="preserve">
          <source>This API returns the UTF16-encoded string corresponding the value passed in.</source>
          <target state="translated">이 API는 전달 된 값에 해당하는 UTF16 인코딩 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2c87b6403f35f26e7404749f214ce41091747843" translate="yes" xml:space="preserve">
          <source>This API returns the UTF8-encoded string corresponding the value passed in.</source>
          <target state="translated">이 API는 전달 된 값에 해당하는 UTF8로 인코딩 된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c0b748b497bba3eb1c898153dfbd929b87db172b" translate="yes" xml:space="preserve">
          <source>This API returns the Undefined object.</source>
          <target state="translated">이 API는 정의되지 않은 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="adba2f90399935e0690e7ea6510c317990dbccfb" translate="yes" xml:space="preserve">
          <source>This API returns the highest N-API version supported by the Node.js runtime. N-API is planned to be additive such that newer releases of Node.js may support additional API functions. In order to allow an addon to use a newer function when running with versions of Node.js that support it, while providing fallback behavior when running with Node.js versions that don't support it:</source>
          <target state="translated">이 API는 Node.js 런타임에서 지원하는 최고 N-API 버전을 반환합니다. N-API는 Node.js의 최신 릴리스가 추가 API 기능을 지원할 수 있도록 추가 될 예정입니다. 이를 지원하는 Node.js 버전으로 실행할 때 애드온이 최신 기능을 사용할 수 있도록 지원하지 않는 Node.js 버전으로 실행할 때는 대체 동작을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="522d2a776db00199579b4671e9a78264576e9097" translate="yes" xml:space="preserve">
          <source>This API returns the length of an array.</source>
          <target state="translated">이 API는 배열의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="62dde4493dbecb32a8daa6b7073d93a0a48999a4" translate="yes" xml:space="preserve">
          <source>This API returns the names of the enumerable properties of &lt;code&gt;object&lt;/code&gt; as an array of strings. The properties of &lt;code&gt;object&lt;/code&gt; whose key is a symbol will not be included.</source>
          <target state="translated">이 API는 열거 가능한 &lt;code&gt;object&lt;/code&gt; 속성 이름 을 문자열 배열로 반환합니다. 키가 심볼 인 &lt;code&gt;object&lt;/code&gt; 의 속성은 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="40720472b0f1b38ae83da6f85669c9b6c99e9e15" translate="yes" xml:space="preserve">
          <source>This API returns true if an exception is pending.</source>
          <target state="translated">이 API는 예외가 보류중인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="70f8fc304edc0eb1ff4bd3a9bd31242f6e63b866" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">이 API는 &lt;code&gt;DataView&lt;/code&gt; 의 다양한 속성을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="094bf686b8d41acd51551e48f0d5506a78066bcd" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a typed array.</source>
          <target state="translated">이 API는 유형이 지정된 배열의 다양한 속성을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8443a100e796e230e9a632cdd639d47a8dd0c30e" translate="yes" xml:space="preserve">
          <source>This API set a property on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API는 전달 된 &lt;code&gt;Object&lt;/code&gt; 의 속성을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="055ca98bb19b6d2b39f8280d72632e38436dcde6" translate="yes" xml:space="preserve">
          <source>This API sets and element on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">이 API 세트 및 전달 된 &lt;code&gt;Object&lt;/code&gt; 요소</target>
        </trans-unit>
        <trans-unit id="f3259243731814fd2604630f35f7dc1e7cb7967f" translate="yes" xml:space="preserve">
          <source>This API should not be called with &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; from a JavaScript thread, because, if the queue is full, it may cause the JavaScript thread to deadlock.</source>
          <target state="translated">이 API는 JavaScript 스레드에서 &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; 으로 호출하면 안됩니다 . 큐가 가득 차면 JavaScript 스레드가 교착 상태가 될 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d1442d6affa3740f89af3af8d557d700b4757238" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;Error&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="b3dd51c041226d76a52e71a99edd9a2f1b9f2b71" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;RangeError&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="be4f91f940ec94f29555da2de8b293137ec65b17" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">이 API는 제공된 텍스트와 함께 JavaScript &lt;code&gt;TypeError&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1e9614bea2e91f427dd259be89411bcf53308e40" translate="yes" xml:space="preserve">
          <source>This API throws the JavaScript value provided.</source>
          <target state="translated">이 API는 제공된 JavaScript 값을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="99f41202181c70e315d0fe22903a8a88e874c6f3" translate="yes" xml:space="preserve">
          <source>This API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">이 API는 libuv의 스레드 풀을 사용하는데, 이는 일부 응용 프로그램에 놀랍고 부정적인 성능 영향을 미칠 수 있습니다. 자세한 내용은 &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5421be1b58e3a5f37657e78acf463c299fc19571" translate="yes" xml:space="preserve">
          <source>This API will return &lt;code&gt;napi_closing&lt;/code&gt; if &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; was called with &lt;code&gt;abort&lt;/code&gt; set to &lt;code&gt;napi_tsfn_abort&lt;/code&gt; from any thread. The value is only added to the queue if the API returns &lt;code&gt;napi_ok&lt;/code&gt;.</source>
          <target state="translated">이 API는 반환 &lt;code&gt;napi_closing&lt;/code&gt; 을 경우 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 호출되었습니다 &lt;code&gt;abort&lt;/code&gt; 으로 설정 &lt;code&gt;napi_tsfn_abort&lt;/code&gt; 모든 스레드에서. API가 &lt;code&gt;napi_ok&lt;/code&gt; 를 반환하는 경우에만 값이 큐에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="ca4d7acb60577ff5a3d284f73b617fe9d4f84288" translate="yes" xml:space="preserve">
          <source>This Module Namespace Exotic Object can be directly observed either when using &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; or a dynamic import:</source>
          <target state="translated">이 모듈 네임 스페이스 Exotic Object는 &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; 또는 동적 가져 오기를 사용할 때 직접 관찰 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0484acdcfb56a632e947996df777e0189ffd6889" translate="yes" xml:space="preserve">
          <source>This allows programs to localize their dependencies, so that they do not clash.</source>
          <target state="translated">이를 통해 프로그램은 종속성을 현지화하여 충돌하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8849f713925ba1f9a6b09df33af235ddaf81cd16" translate="yes" xml:space="preserve">
          <source>This also works with timers that are returned from &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;. If their callback function throws, it will be caught by the domain &lt;code&gt;'error'&lt;/code&gt; handler.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt; 에서 반환되는 타이머에서도 작동합니다 . 콜백 함수가 &lt;code&gt;'error'&lt;/code&gt; 하면 도메인 'error' 처리기에 의해 포착됩니다 .</target>
        </trans-unit>
        <trans-unit id="820157915a230f72b4dfebbb307e744ce07bc105" translate="yes" xml:space="preserve">
          <source>This becomes &lt;code&gt;null&lt;/code&gt; when sending a socket to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;. To poll forks and get current number of active connections, use asynchronous &lt;a href=&quot;#net_server_getconnections_callback&quot;&gt;&lt;code&gt;server.getConnections()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; 가있는 자식에게 소켓을 보낼 때 이것은 &lt;code&gt;null&lt;/code&gt; 이됩니다 . 포크를 폴링하고 현재 활성 연결 수를 얻으려면 대신 비동기 &lt;a href=&quot;#net_server_getconnections_callback&quot;&gt; &lt;code&gt;server.getConnections()&lt;/code&gt; &lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0403c54b19cf7c518c743ac412f170084964d2d4" translate="yes" xml:space="preserve">
          <source>This behavior can be observed by doing something like opening a resource then closing it before the resource can be used. The following snippet demonstrates this.</source>
          <target state="translated">자원을 사용하기 전에 자원을 열고 닫는 등의 작업을 수행하여이 동작을 관찰 할 수 있습니다. 다음 스 니펫이이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4d3be871fb0a41430f8168f7829d357513f35f9e" translate="yes" xml:space="preserve">
          <source>This behavior matches how &lt;code&gt;import&lt;/code&gt; behaves in browser environments, assuming a typically configured server.</source>
          <target state="translated">이 동작 은 일반적으로 구성된 서버를 가정하여 브라우저 환경에서 &lt;code&gt;import&lt;/code&gt; 작동 하는 방식과 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="88491dff6c51b120ea1b1d70767ea3bf8c1f612b" translate="yes" xml:space="preserve">
          <source>This can be addressed by passing &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; to the code that creates the &lt;code&gt;Context&lt;/code&gt;:</source>
          <target state="translated">이는 &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; 를 &lt;code&gt;Context&lt;/code&gt; 를 생성하는 코드 에 전달하여 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c09d684d7a4d21b175c08bdd339dca1134e4b755" translate="yes" xml:space="preserve">
          <source>This can be called many times with new data as it is streamed.</source>
          <target state="translated">스트리밍 될 때 새 데이터를 사용하여 여러 번 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c491563022589b8a9b5c79a33442425c69e8e3b" translate="yes" xml:space="preserve">
          <source>This can be overridden for servers and client requests by passing the &lt;code&gt;maxHeaderSize&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;maxHeaderSize&lt;/code&gt; 옵션 을 전달하여 서버 및 클라이언트 요청에 대해 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c880dd4ffae1216437534bad1ef14743456d2388" translate="yes" xml:space="preserve">
          <source>This can be used primarily to re-initialize REPL context to some pre-defined state:</source>
          <target state="translated">이는 주로 REPL 컨텍스트를 사전 정의 된 상태로 다시 초기화하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdf292923a244ea9d67a38073716924be27282d5" translate="yes" xml:space="preserve">
          <source>This can be used to implement continuation local storage without the use of a tracking &lt;code&gt;Map&lt;/code&gt; to store the metadata:</source>
          <target state="translated">이것은 메타 데이터를 저장하기 위해 추적 &lt;code&gt;Map&lt;/code&gt; 을 사용하지 않고 연속 로컬 저장소를 구현하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f813d16b38829c4c7b83c4595769721b0e2f9aa" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt; again.</source>
          <target state="translated">&lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; &lt;/a&gt; 다시 호출하여 작업자를 다시 시작하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="884b5d2f2fb4791a811ef2a6aa11b44f1d059e43" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;code&gt;.fork()&lt;/code&gt; again.</source>
          <target state="translated">&lt;code&gt;.fork()&lt;/code&gt; 다시 호출하여 작업자를 다시 시작하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="adb47d3b708ed81016472d29ae643286daa0d023" translate="yes" xml:space="preserve">
          <source>This can be used when collecting input from a TTY stream to retrieve the current value that has been processed thus far, prior to the &lt;code&gt;line&lt;/code&gt; event being emitted. Once the &lt;code&gt;line&lt;/code&gt; event has been emitted, this property will be an empty string.</source>
          <target state="translated">&lt;code&gt;line&lt;/code&gt; 이벤트가 발생 하기 전에 지금까지 처리 된 현재 값을 검색하기 위해 TTY 스트림에서 입력을 수집 할 때 사용할 수 있습니다 . 일단 &lt;code&gt;line&lt;/code&gt; 이벤트가 방출되어,이 속성은 빈 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="81cb9ba6df123ad25e5c1f7880d8d7faab015f8c" translate="yes" xml:space="preserve">
          <source>This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.</source>
          <target state="translated">이는 원래 함수가 오류 우선 콜백을 마지막 인수로 사용하는 표준 형식을 따르지 않는 경우에 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc26040f8f9ecbf7bbd37bcaa328d37dfb1dd0f1" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as other parts of the &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;Buffer&lt;/code&gt; object itself.</source>
          <target state="translated">이로 인해 &lt;code&gt;ArrayBuffer&lt;/code&gt; 를 사용하여 기본 ArrayBuffer에 직접 액세스 할 때 문제가 발생할 수 있습니다. &lt;code&gt;buf.buffer&lt;/code&gt; 다른 부분은 &lt;code&gt;Buffer&lt;/code&gt; 객체 자체 와 관련 이 &lt;code&gt;ArrayBuffer&lt;/code&gt; 수 있기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="6a2698ef50db0dc91fafb011a769f5cfdfc45098" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as the first bytes in this &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;buf&lt;/code&gt; object itself.</source>
          <target state="translated">이 &lt;code&gt;buf.buffer&lt;/code&gt; 의 첫 바이트 가 &lt;code&gt;buf&lt;/code&gt; 객체 자체 와 관련 이 &lt;code&gt;ArrayBuffer&lt;/code&gt; 때문에 &lt;code&gt;ArrayBuffer&lt;/code&gt; 를 사용하여 기본 ArrayBuffer에 직접 액세스 할 때 문제가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="94c39157bbaadfeac0740fd2bddc3c5a9e18fe2b" translate="yes" xml:space="preserve">
          <source>This can only be called from the master process.</source>
          <target state="translated">마스터 프로세스에서만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bf60ae930ac6615a4d1242e8315c9eb04f632ba" translate="yes" xml:space="preserve">
          <source>This can only happen when native addons create &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s in &quot;externalized&quot; mode, or put existing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; into externalized mode.</source>
          <target state="translated">이것은 네이티브 애드온 이 &quot;외부화 된&quot;모드에서 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 를 만들 거나 기존 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 를 외부화 된 모드로 만들 때만 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6199ec1544ac620470d1eb68d66a477d9db98885" translate="yes" xml:space="preserve">
          <source>This change was made while &lt;code&gt;async_hooks&lt;/code&gt; was an experimental API.</source>
          <target state="translated">&lt;code&gt;async_hooks&lt;/code&gt; 가 실험적인 API 인 동안이 변경이 이루어졌습니다 .</target>
        </trans-unit>
        <trans-unit id="f5c8587a30eab7a428dcbb7513f0b815a15706fa" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt; and has the following additional events:</source>
          <target state="translated">이 클래스는 &lt;a href=&quot;net#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; &lt;/a&gt; 에서 상속되며 다음과 같은 추가 이벤트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb154621216808fa548d91e360e57e7c8109d9f7" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt;&lt;code&gt;stream.Transform&lt;/code&gt;&lt;/a&gt;, allowing &lt;code&gt;zlib&lt;/code&gt; objects to be used in pipes and similar stream operations.</source>
          <target state="translated">이 클래스는 &lt;code&gt;zlib&lt;/code&gt; 객체를 파이프 및 유사한 스트림 작업에 사용할 수 있도록 &lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt; &lt;code&gt;stream.Transform&lt;/code&gt; 을&lt;/a&gt; 상속 합니다.</target>
        </trans-unit>
        <trans-unit id="8e88b64435ae0d469109330906f76139a67a2d71" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;code&gt;tls.Server&lt;/code&gt; and emits events same as &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">이 클래스는 &lt;code&gt;tls.Server&lt;/code&gt; 의 서브 클래스이며 http.Server 와 동일한 이벤트를 &lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt; 합니다. 자세한 내용은 &lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="16c329449b1b3c4b04d85f37f6e6b48c47ddc4d5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). A &lt;code&gt;net.Socket&lt;/code&gt; is also a &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;duplex stream&lt;/a&gt;, so it can be both readable and writable, and it is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스는 TCP 소켓 또는 스트리밍 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 엔드 포인트 (Windows에서는 명명 된 파이프를 사용하고 그렇지 않으면 Unix 도메인 소켓을 사용함 )의 추상화입니다 . &lt;code&gt;net.Socket&lt;/code&gt; 는 또한 인 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;이중 스트림&lt;/a&gt; 은 읽기 및 쓰기 모두가 될 수 있도록하고, 또한 인 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bb6db2a0d099fbb5e70fab688511fc3b030d22f5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). It is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스는 TCP 소켓 또는 스트리밍 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 끝점 의 추상화입니다 (Windows에서는 명명 된 파이프를 사용하고 그렇지 않으면 Unix 도메인 소켓을 사용함). 또한 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9cb39e860eb677e256cb393655fda70a7c3d4eaa" translate="yes" xml:space="preserve">
          <source>This class is now exported.</source>
          <target state="translated">이 클래스는 이제 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="44e839a369fec339f5305657a162e8136375a579" translate="yes" xml:space="preserve">
          <source>This class is used to create a TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server.</source>
          <target state="translated">이 클래스는 TCP 또는 &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; 서버 를 만드는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd4c4aa236c69d8176bdaffd55ffe16275814e30" translate="yes" xml:space="preserve">
          <source>This class is used to create asynchronous state within callbacks and promise chains. It allows storing data throughout the lifetime of a web request or any other asynchronous duration. It is similar to thread-local storage in other languages.</source>
          <target state="translated">이 클래스는 콜백 및 약속 체인 내에서 비동기 상태를 만드는 데 사용됩니다. 웹 요청의 수명 또는 기타 비동기 기간 동안 데이터를 저장할 수 있습니다. 다른 언어의 스레드 로컬 저장소와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="a92b7b6bb57bdc44b8ea493af6aace2149818803" translate="yes" xml:space="preserve">
          <source>This class was renamed from &lt;code&gt;Zlib&lt;/code&gt; to &lt;code&gt;ZlibBase&lt;/code&gt;.</source>
          <target state="translated">이 클래스는 &lt;code&gt;Zlib&lt;/code&gt; 에서 &lt;code&gt;ZlibBase&lt;/code&gt; 로 이름이 변경되었습니다 .</target>
        </trans-unit>
        <trans-unit id="de024a70044896351480dcb7c1b1ad560f5c6459" translate="yes" xml:space="preserve">
          <source>This configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt;, or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">이것은 문자열 입력을 CommonJS 또는 ES 모듈로 해석하도록 Node.js를 구성합니다. 문자열 입력은 &lt;code&gt;--eval&lt;/code&gt; , &lt;code&gt;--print&lt;/code&gt; 또는 &lt;code&gt;STDIN&lt;/code&gt; 을 통해 입력됩니다 .</target>
        </trans-unit>
        <trans-unit id="244101b103efaee2124df7a27e0b69d17a4c72b4" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 메모리를 복사하지 않고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; 의 뷰를 작성합니다 . 예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 인스턴스 의 &lt;code&gt;.buffer&lt;/code&gt; 속성에 대한 참조를 전달 하면 새로 만든 &lt;code&gt;Buffer&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 와 동일한 할당 된 메모리를 공유합니다 .</target>
        </trans-unit>
        <trans-unit id="642feea22e99d5b86e730cd2666b24ed829c2acf" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 메모리를 복사하지 않고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 의 뷰를 작성합니다 . 예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 인스턴스 의 &lt;code&gt;.buffer&lt;/code&gt; 속성에 대한 참조를 전달 하면 새로 만든 &lt;code&gt;Buffer&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 와 동일한 할당 된 메모리를 공유합니다 .</target>
        </trans-unit>
        <trans-unit id="f70a9e943eb437948e2007e44c804669a3a635f8" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">이 기본값은 &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt; 명령 행 스위치를 사용하여 (직접 또는 &lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt; 환경 변수 를 통해) 완전히 대체 할 수 있습니다 . 예를 들어, 다음은 &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; 를 기본 TLS 암호 제품군으로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="c3e306cc187ad3b8c8c5117038d5c054feb07697" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command-line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">이 기본값은 &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt; 명령 줄 스위치를 사용하여 (직접 또는 &lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt; 환경 변수 를 통해) 완전히 바꿀 수 있습니다. 예를 들어 다음은 &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; 를 기본 TLS 암호 제품군으로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d52314f1ca567086d94d0b2153e5c443a8d5ccef" translate="yes" xml:space="preserve">
          <source>This deprecation has been superseded by the deprecation of the &lt;code&gt;process.binding()&lt;/code&gt; API (&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;).</source>
          <target state="translated">이 지원 중단은 &lt;code&gt;process.binding()&lt;/code&gt; API ( &lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt; ) 의 지원 중단으로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="8c190b3f34fae908925a1a6be8e8afe5048e36e2" translate="yes" xml:space="preserve">
          <source>This document contains two primary sections and a third section for notes. The first section explains how to use existing streams within an application. The second section explains how to create new types of streams.</source>
          <target state="translated">이 문서에는 두 가지 기본 섹션과 메모에 대한 세 번째 섹션이 포함되어 있습니다. 첫 번째 섹션에서는 응용 프로그램 내에서 기존 스트림을 사용하는 방법에 대해 설명합니다. 두 번째 섹션에서는 새로운 유형의 스트림을 만드는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="62e0d03e950af6c192f429106a4d7a544db728f4" translate="yes" xml:space="preserve">
          <source>This doesn't turn &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt; into a synchronous blocking call. If synchronous operation is desired, something like &lt;code&gt;fs.openSync()&lt;/code&gt; should be used.</source>
          <target state="translated">이것은 &lt;code&gt;fs.open()&lt;/code&gt; 또는 &lt;code&gt;fsPromises.open()&lt;/code&gt; 을 동기식 차단 호출로 바꾸지 않습니다 . 동기 작업이 필요한 경우 &lt;code&gt;fs.openSync()&lt;/code&gt; 와 같은 것을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="511c5720a26dc7d320da43671cc5b1fecc46d7b6" translate="yes" xml:space="preserve">
          <source>This environment variable is ignored when &lt;code&gt;node&lt;/code&gt; runs as setuid root or has Linux file capabilities set.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 가 setuid 루트로 실행되거나 Linux 파일 기능이 설정된 경우이 환경 변수는 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="6e6ca02ed62b1234e7dfc3664b35ddb769fa981f" translate="yes" xml:space="preserve">
          <source>This error is designed to prevent accidentally overwriting a callback registered from another module.</source>
          <target state="translated">이 오류는 다른 모듈에서 등록 된 콜백을 실수로 덮어 쓰지 않도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="b9977cdce2fd4b47c0997cc9ad3729a7f41f972a" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">이 이벤트는 사용자가 HTTP 서버에 연결을 주입하기 위해 명시 적으로 생성 할 수도 있습니다. 이 경우 모든 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c553b5e91dff230374b24a70b3a2617cfe02603" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the TLS server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">이 이벤트는 사용자가 TLS 서버에 연결을 삽입하기 위해 명시 적으로 생성 할 수도 있습니다. 이 경우 모든 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10a0c432576c88ea7fd6ac6682ca82473146468d" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established, before the TLS handshake begins. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">이 이벤트는 TLS 핸드 셰이크가 시작되기 전에 새 TCP 스트림이 설정 될 때 발생합니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하기를 원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b8b0d428fb2bcfd24f28cd7691efd806371c187e" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">이 이벤트는 새 TCP 스트림이 설정 될 때 발생합니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하기를 원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0e2d4b6cd4a5729a1807f57603f4e80b4da71d69" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.connection&lt;/code&gt;.</source>
          <target state="translated">이 이벤트는 새로운 TCP 스트림이 설정 될 때 생성됩니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하고 싶지 않습니다. 특히, 소켓은 프로토콜 파서가 소켓에 연결하는 방식 때문에 &lt;code&gt;'readable'&lt;/code&gt; 이벤트를 생성 하지 않습니다 . &lt;code&gt;socket&lt;/code&gt; 또한에 액세스 할 수 있습니다 &lt;code&gt;request.connection&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="66fa4ee297e42f821aa6c5e39bfbf8cf100dc851" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.socket&lt;/code&gt;.</source>
          <target state="translated">이 이벤트는 새 TCP 스트림이 설정 될 때 발생합니다. &lt;code&gt;socket&lt;/code&gt; 은 일반적으로 &lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 유형의 객체입니다 . 일반적으로 사용자는이 이벤트에 액세스하기를 원하지 않습니다. 특히, 소켓은 프로토콜 파서가 소켓에 연결되는 방식 때문에 &lt;code&gt;'readable'&lt;/code&gt; 이벤트를 생성 하지 않습니다 . &lt;code&gt;socket&lt;/code&gt; 또한에 액세스 할 수 있습니다 &lt;code&gt;request.socket&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f345cc8a09df280597dfb6653ff618e979ce58bb" translate="yes" xml:space="preserve">
          <source>This event is guaranteed to be passed an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">이 이벤트는 사용자가 &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; 이외의 소켓 유형을 지정하지 않는 한 &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt; 의 하위 클래스 인 &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; 클래스 의 인스턴스로 전달 됩니다.</target>
        </trans-unit>
        <trans-unit id="a8a890977d51324cd393c8898f763d1cb6d447e8" translate="yes" xml:space="preserve">
          <source>This event is the same as the one provided by &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 이벤트는 &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt; 제공하는 이벤트와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="8091d5c0132da2ce578d23516bf7b26daf3174a5" translate="yes" xml:space="preserve">
          <source>This event might not be emitted if &lt;code&gt;http2stream.end()&lt;/code&gt; is called before trailers are received and the incoming data is not being read or listened for.</source>
          <target state="translated">트레일러를 수신하기 전에 &lt;code&gt;http2stream.end()&lt;/code&gt; 를 호출하고 수신 데이터를 읽거나 수신 하지 않으면이 이벤트가 생성되지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e42e31a1c6291ea1620368f27b2644f12f5bfaa" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the Addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">이 예에서는 전체 &lt;code&gt;module&lt;/code&gt; 객체를 두 번째 인수로 받는 두 인수 형식의 &lt;code&gt;Init()&lt;/code&gt; 합니다 . 이를 통해 애드온 은 함수를 &lt;code&gt;exports&lt;/code&gt; 속성으로 추가하는 대신 단일 함수로 &lt;code&gt;exports&lt;/code&gt; 를 완전히 덮어 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d0a35cc513f8432ce78b0f093625a881d170862" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">이 예제에서는 두 번째 인수로 전체 &lt;code&gt;module&lt;/code&gt; 객체 를받는 &lt;code&gt;Init()&lt;/code&gt; 의 두 인수 형식을 사용합니다 . 이것은 완전히 덮어 쓰기에 부가 할 수 있습니다 &lt;code&gt;exports&lt;/code&gt; 대신 속성으로 기능을 추가 한 기능 &lt;code&gt;exports&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c53e228887749d0c0419e29bc7e571d4700538a6" translate="yes" xml:space="preserve">
          <source>This example will echo back all messages from the master:</source>
          <target state="translated">이 예는 마스터의 모든 메시지를 에코합니다.</target>
        </trans-unit>
        <trans-unit id="a85c797866ee7d1ad692e8f7298750e061674f0a" translate="yes" xml:space="preserve">
          <source>This feature depends on the underlying operating system providing a way to be notified of filesystem changes.</source>
          <target state="translated">이 기능은 파일 시스템 변경 사항을 알리는 방법을 제공하는 기본 운영 체제에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="eacad87587423d69625ed5d43b2a928821b829b6" translate="yes" xml:space="preserve">
          <source>This feature has been removed.</source>
          <target state="translated">이 기능은 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="0fe4cf3e3f69627b03a85ed87c00d5a21b561899" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and behavior might still change.</source>
          <target state="translated">이 기능은 현재 실험적이며 동작은 계속 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b9672c5c130d16069c2cb01cb9a6fb0915f6961" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and the name might change or it might be completely removed again.</source>
          <target state="translated">이 기능은 현재 실험적이며 이름이 변경되거나 완전히 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de2bb0948bf98b0d72951fab0d71632f50f1639c" translate="yes" xml:space="preserve">
          <source>This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드 에서는이 기능을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="318da36545ca71c8357ead6931515e132410af72" translate="yes" xml:space="preserve">
          <source>This feature is only available if the &lt;code&gt;node&lt;/code&gt; executable was compiled with &lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU&lt;/a&gt; enabled. If not, the domain names are passed through unchanged.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU가&lt;/a&gt; 활성화 된 상태 에서 &lt;code&gt;node&lt;/code&gt; 실행 파일이 컴파일 된 경우에만 사용할 수 있습니다 . 그렇지 않은 경우 도메인 이름은 변경되지 않은 상태로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="353351e40895571a9fe1a94d54ee8ac76890b44d" translate="yes" xml:space="preserve">
          <source>This flag exists so that the main module can be opted-in to the same behavior that &lt;code&gt;--preserve-symlinks&lt;/code&gt; gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.</source>
          <target state="translated">이 플래그는 기본 모듈이 &lt;code&gt;--preserve-symlinks&lt;/code&gt; 가 다른 모든 가져 오기에 제공 하는 것과 동일한 동작을 수행 할 수 있도록하기 위해 존재합니다 . 그러나 이전 Node.js 버전과의 호환성을 위해 별도의 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="22fd36e23827a3db1f425306badbacaded4ffb64" translate="yes" xml:space="preserve">
          <source>This flag exists to aid in experimentation with the internal implementation of the Node.js http parser. This flag is likely to become a no-op and removed at some point in the future.</source>
          <target state="translated">이 플래그는 Node.js http 파서의 내부 구현을 실험하는 데 도움을주기 위해 존재합니다. 이 플래그는 아무런 문제가 없어 향후 어느 시점에서 제거 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="62d2caffde3a99f9ad79f9ef28e6d3f1fc2ba015" translate="yes" xml:space="preserve">
          <source>This flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release.</source>
          <target state="translated">This flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release.</target>
        </trans-unit>
        <trans-unit id="0ef0d9ec3e79a5d118740d96d95026bba3f19b0a" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Readable&lt;/code&gt; class methods only.</source>
          <target state="translated">이 함수는 응용 프로그램 코드에서 직접 호출해서는 안됩니다. 하위 클래스로 구현해야하며 내부 &lt;code&gt;Readable&lt;/code&gt; 클래스 메소드에서만 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="49a676e99b324309fcea6e9319c1afc529b01374" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">이 함수는 응용 프로그램 코드에서 직접 호출해서는 안됩니다. 자식 클래스로 구현해야하며 내부 &lt;code&gt;Writable&lt;/code&gt; 클래스 메서드 만 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1f33ccfcd0f74d271bd116cb4c56da77fb246945" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt;, which has the same signature. Callbacks are run in last-in first-out order.</source>
          <target state="translated">This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; , which has the same signature. Callbacks are run in last-in first-out order.</target>
        </trans-unit>
        <trans-unit id="3de80300bdb948c051cf6cc4090a49b1df7ff897" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; before they are run, which has the same signature.</source>
          <target state="translated">이 함수는 주어진 Node.js 인스턴스가 종료되기 전에 실행될 후크를 추가합니다. 필요한 경우, 같은 후크를 실행하기 전에 &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; 사용하여 이러한 후크를 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="90ca9c092fb3cd108c85d11cc79640ed5f5ff9ea" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;, with some exceptions:</source>
          <target state="translated">이 함수는 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt; 과 같이 작동하지만 몇 가지 예외가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b68ec689236f9a0971c9dc975d6d90cad1215953" translate="yes" xml:space="preserve">
          <source>This function can be overwritten by providing alternative function as part of the &lt;code&gt;options.checkServerIdentity&lt;/code&gt; option passed to &lt;code&gt;tls.connect()&lt;/code&gt;. The overwriting function can call &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; of course, to augment the checks done with additional verification.</source>
          <target state="translated">&lt;code&gt;tls.connect()&lt;/code&gt; 전달 된 &lt;code&gt;options.checkServerIdentity&lt;/code&gt; 옵션의 일부로 대체 함수를 제공 하여이 함수를 겹쳐 쓸 수 있습니다 . 덮어 쓰기 기능 은 물론 &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; 를 호출 하여 추가 확인으로 수행 된 검사를 보강 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19be6f8a2996df1dc3d420cff41c083dff365e49" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt;&lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">이 함수 는 모든 옵션이 기본값으로 설정된 새 &lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 을 생성하고 즉시 &lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt; &lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt; &lt;/a&gt; 연결을 시작한 다음 연결을 시작하는 &lt;code&gt;net.Socket&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e1ad29049dcb1287306ecc15dd61f9a7c9096e21" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt;&lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">이 함수 는 모든 옵션이 기본값으로 설정된 새 &lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; 을 생성하고 즉시 &lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt; &lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt; &lt;/a&gt; 연결을 시작한 다음 연결을 시작하는 &lt;code&gt;net.Socket&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cb7a012e16cda321f95feeb4747e891fbb16db52" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will resolve the &lt;code&gt;Promise&lt;/code&gt; with an error using code &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">이 기능은 7.1 이전의 AIX 버전에서는 작동하지 않으며 &lt;code&gt;UV_ENOSYS&lt;/code&gt; 코드를 사용하여 오류로 &lt;code&gt;Promise&lt;/code&gt; 을 해결합니다 .</target>
        </trans-unit>
        <trans-unit id="42b8c900f932b0d2bf423ef68b4068f49e84544a" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will return the error &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">이 기능은 7.1 이전의 AIX 버전에서는 작동하지 않으며 &lt;code&gt;UV_ENOSYS&lt;/code&gt; 오류를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5697cdda4de768e2cf54b723a122efe5653b963a" translate="yes" xml:space="preserve">
          <source>This function ensures that &lt;code&gt;path&lt;/code&gt; is resolved absolutely, and that the URL control characters are correctly encoded when converting into a File URL.</source>
          <target state="translated">이 기능을 사용하면 &lt;code&gt;path&lt;/code&gt; 를 절대적으로 확인하고 파일 URL로 변환 할 때 URL 제어 문자가 올바르게 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="1108aee998992248b38802c507c72b2ed7d96209" translate="yes" xml:space="preserve">
          <source>This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.</source>
          <target state="translated">이 기능은 퍼센트로 인코딩 된 문자의 올바른 디코딩을 보장 할뿐만 아니라 플랫폼 간 유효한 절대 경로 문자열을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="a70fc6c3e16322065cdff0ce2620dd70b68cc89b" translate="yes" xml:space="preserve">
          <source>This function executes a string of JavaScript code and returns its result with the following caveats:</source>
          <target state="translated">This function executes a string of JavaScript code and returns its result with the following caveats:</target>
        </trans-unit>
        <trans-unit id="c6da0e5af272e064260e3498115fb5e36dc75e6f" translate="yes" xml:space="preserve">
          <source>This function fills the &lt;code&gt;version&lt;/code&gt; struct with the major, minor, and patch version of Node.js that is currently running, and the &lt;code&gt;release&lt;/code&gt; field with the value of &lt;a href=&quot;process#process_process_release&quot;&gt;&lt;code&gt;process.release.name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수 는 현재 실행중인 Node.js의 주 &lt;code&gt;version&lt;/code&gt; , 부 버전 및 패치 버전으로 version 구조체를 채우고 &lt;a href=&quot;process#process_process_release&quot;&gt; &lt;code&gt;process.release.name&lt;/code&gt; &lt;/a&gt; 값으로 &lt;code&gt;release&lt;/code&gt; 필드를 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="4badebe3055deecf26d575320a5dc0d908bb82ac" translate="yes" xml:space="preserve">
          <source>This function gives V8 an indication of the amount of externally allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript object that points to its own memory allocated by a native module). Registering externally allocated memory will trigger global garbage collections more often than it would otherwise.</source>
          <target state="translated">이 함수는 V8에 JavaScript 객체 (즉, 고유 모듈이 할당 한 자체 메모리를 가리키는 JavaScript 객체)에 의해 유지되는 외부 할당 메모리의 양을 표시합니다. 외부 할당 메모리를 등록하면 그렇지 않은 경우보다 전역 가비지 콜렉션이 더 자주 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="b17195473e810af1aa1ea35771a8d98831afcd81" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="daa92f9057f7e94696ed20cc3e8e5783964bde9d" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c87095fe78fe415ecf76676138daab46f795497" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint16BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a599fe2ebb6e0c90f94e70d45ed6a6288849ec55" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint16LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ddf061751bfc021947a9bb28f05d5f92b30e724" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint32BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d062235ab556e4b8b487be4c2cbf719bc71bb59c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint32LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ca68f13ed6e5def2798c66c6ee71a5996cfd8f9" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint8()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint8()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba4f4188ecc0c8acd718f14536ebb52296b31683" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintBE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUintBE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="acda940e611ac5151444acf58a6c596bc91a4ff5" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintLE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUintLE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eae0c648e7e8b4c6c06ab3bdc166c10fd01a29bc" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d989597ca83ce92b2ebc974227e030f79836246b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7882fe6b12a08ba2ecedc0ac073aa0c6926d56e8" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint16BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd4ede003e84631aa7ba9cf2c18f90f4daa2ea5b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint16LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ca2a193ac4613205dba1af950bb14e9c274d1578" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint32BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc823e61d2d24573479596ab4f4b6978195712b4" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint32LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41d2df3a4f68377357ed939a55b364d4097c457c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint8()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint8()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="402a6fa5e58d03fc7bbe60b46e8a7c35f0c26ebd" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintBE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUintBE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03a24117e8fc9cb06efe4145ec7da0fd24e48708" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintLE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUintLE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="857c61c4553c47ab5c22be99637b828b0046272f" translate="yes" xml:space="preserve">
          <source>This function is asynchronous because the ES module resolver in Node.js is asynchronous. With the introduction of &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-Level Await&lt;/a&gt;, these use cases will be easier as they won't require an async function wrapper.</source>
          <target state="translated">This function is asynchronous because the ES module resolver in Node.js is asynchronous. With the introduction of &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-Level Await&lt;/a&gt;, these use cases will be easier as they won't require an async function wrapper.</target>
        </trans-unit>
        <trans-unit id="aa1a128b76492cea694295767529e32daed47241" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the connection is established, the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted. If there is a problem connecting, instead of a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event, an &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event will be emitted with the error passed to the &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; listener. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="translated">이 기능은 비동기식입니다. 연결이 설정되면 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성됩니다. 연결에 문제가 있으면 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트 대신 &lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt; 리스너에 전달 된 오류와 함께 &lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성됩니다 . 제공된 경우 마지막 매개 변수 &lt;code&gt;connectListener&lt;/code&gt; 가 &lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt; 이벤트 의 리스너로 &lt;strong&gt;한 번 추가&lt;/strong&gt; 됩니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04d4248379ca91265c113f72fb881941a2bc6374" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the server starts listening, the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event will be emitted. The last parameter &lt;code&gt;callback&lt;/code&gt; will be added as a listener for the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">이 기능은 비동기식입니다. 서버가 청취를 시작하면 &lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt; 이벤트가 생성됩니다. 마지막 매개 변수 &lt;code&gt;callback&lt;/code&gt; 은 &lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt; 이벤트에 대한 리스너로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="2bee66a03f4e0be219c5798f053d5e9b9c3e847d" translate="yes" xml:space="preserve">
          <source>This function is based on a constant-time algorithm. Returns true if &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;b&lt;/code&gt;, without leaking timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or &lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;capability urls&lt;/a&gt;.</source>
          <target state="translated">이 기능은 상수 시간 알고리즘을 기반으로합니다. true의 경우 반환 &lt;code&gt;a&lt;/code&gt; 동일 &lt;code&gt;b&lt;/code&gt; 공격자가 값 중 하나를 추측 할 수 있도록 할 타이밍 정보를 누출하지 않고. 인증 쿠키 또는 &lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;기능 URL&lt;/a&gt; 과 같은 HMAC 다이제스트 또는 비밀 값을 비교하는 데 적합합니다 .</target>
        </trans-unit>
        <trans-unit id="7f26bf91d7cc00bfeb0aad8763630fd384b5df2c" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;a href=&quot;#util_util_format_format_args&quot;&gt;&lt;code&gt;util.format()&lt;/code&gt;&lt;/a&gt;, except in that it takes an &lt;code&gt;inspectOptions&lt;/code&gt; argument which specifies options that are passed along to &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기능은 동일하다 &lt;a href=&quot;#util_util_format_format_args&quot;&gt; &lt;code&gt;util.format()&lt;/code&gt; &lt;/a&gt; 그것이 걸리는 제외 &lt;code&gt;inspectOptions&lt;/code&gt; 의 인자에 따라 어떤 전달되는 지정 옵션 &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="617bb9f000f555b14d080241e1d35366b287a613" translate="yes" xml:space="preserve">
          <source>This function is not completely equivalent to &lt;code&gt;querystring.parse()&lt;/code&gt;. One difference is that &lt;code&gt;querystring.parse()&lt;/code&gt; does url decoding:</source>
          <target state="translated">이 함수는 &lt;code&gt;querystring.parse()&lt;/code&gt; 와 완전히 동일하지 않습니다 . 한 가지 차이점은 &lt;code&gt;querystring.parse()&lt;/code&gt; 가 URL 디코딩을 수행 한다는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="eb6a3e28055b4eb1c155f9eed1a1ea921b27b662" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform</source>
          <target state="translated">이 함수는 이제 플랫폼 간 일관성을 유지하며 더 이상 플랫폼에서 슬래시가있는 경로를 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="547b61aa8084b6f0d2b8892c94a1327d80d9a29d" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform.</source>
          <target state="translated">This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform.</target>
        </trans-unit>
        <trans-unit id="e0d18b4c1d734142a1855c74af4c046ac1c0027b" translate="yes" xml:space="preserve">
          <source>This function is only available for zlib-based streams, i.e. not Brotli.</source>
          <target state="translated">이 기능은 zlib 기반 스트림에만 사용할 수 있습니다 (예 : Brotli).</target>
        </trans-unit>
        <trans-unit id="8a50b04599b1f0639a100cf46f5d1c6f9b45123c" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android).</source>
          <target state="translated">이 기능은 POSIX 플랫폼에서만 사용할 수 있습니다 (예 : Windows 또는 Android 제외).</target>
        </trans-unit>
        <trans-unit id="dcddf4c38c715eb9dc19e1f8b915629007eb9f86" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">이 기능은 POSIX 플랫폼에서만 사용할 수 있습니다 (예 : Windows 또는 Android 제외). &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드 에서는이 기능을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9b8337051652d8cca59af0a3ee06f51154cfa9f8" translate="yes" xml:space="preserve">
          <source>This function is only called if the certificate passed all other checks, such as being issued by trusted CA (&lt;code&gt;options.ca&lt;/code&gt;).</source>
          <target state="translated">이 기능은 인증서가 신뢰할 수있는 CA ( &lt;code&gt;options.ca&lt;/code&gt; ) 에서 발급 한 것과 같은 다른 모든 검사를 통과 한 경우에만 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="4dd8d9762971f53a0f4b9c54c5b91e951886daa4" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; but requires the first argument to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; that will be filled. It also requires that a callback is passed in.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt; &lt;code&gt;crypto.randomBytes()&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 첫 번째 인수 는 채워질 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; 여야합니다 . 또한 콜백이 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="a0be84b52a05de61cb37d8e8aafedfc9056c383b" translate="yes" xml:space="preserve">
          <source>This function now returns a Promise. Passing a callback is deprecated, and was useless up to this version, as the Worker was actually terminated synchronously. Terminating is now a fully asynchronous operation.</source>
          <target state="translated">이 함수는 이제 약속을 반환합니다. 작업자가 실제로 동기식으로 종료되었으므로 콜백 전달은 더 이상 사용되지 않으며이 버전까지는 쓸모가 없었습니다. 종료는 이제 완전히 비동기 작업입니다.</target>
        </trans-unit>
        <trans-unit id="894173e491bab80c84c852bbf2fd895d54ca239e" translate="yes" xml:space="preserve">
          <source>This function now supports RSA-PSS keys.</source>
          <target state="translated">이 기능은 이제 RSA-PSS 키를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="1d299f2177608180223cfccb77b867a0f516eab6" translate="yes" xml:space="preserve">
          <source>This function now supports key objects.</source>
          <target state="translated">이 기능은 이제 주요 객체를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="91771921fecce0493df003c3b93efccae8cfb43d" translate="yes" xml:space="preserve">
          <source>This function operates asynchronously. The &lt;code&gt;'close'&lt;/code&gt; event will be emitted when the server has no more open connections.</source>
          <target state="translated">이 기능은 비동기 적으로 작동합니다. &lt;code&gt;'close'&lt;/code&gt; 서버가 더 이상 열린 연결이있는 경우 이벤트가 방출됩니다.</target>
        </trans-unit>
        <trans-unit id="0516587396d5bc4b5aea745b473a81786e9cfdf7" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker is connected to its master via its IPC channel, &lt;code&gt;false&lt;/code&gt; otherwise. A worker is connected to its master after it has been created. It is disconnected after the &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted.</source>
          <target state="translated">이 함수는 작업자가 IPC 채널을 통해 마스터에 연결되어 있으면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다. 작업자는 생성 된 후 마스터에 연결됩니다. &lt;code&gt;'disconnect'&lt;/code&gt; 이벤트가 생성 된 후 연결이 끊어 집니다.</target>
        </trans-unit>
        <trans-unit id="a3544713b214d05ed5bf6d144fbd49ea7c59cdb9" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker's process has terminated (either because of exiting or being signaled). Otherwise, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 함수는 작업자 프로세스가 종료되거나 종료되어 신호를 보내면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="28d972587f7fd8928ac54fe47aed457c4167ba5b" translate="yes" xml:space="preserve">
          <source>This function should only be used for reconnecting a socket after &lt;code&gt;'close'&lt;/code&gt; has been emitted or otherwise it may lead to undefined behavior.</source>
          <target state="translated">This function should only be used for reconnecting a socket after &lt;code&gt;'close'&lt;/code&gt; has been emitted or otherwise it may lead to undefined behavior.</target>
        </trans-unit>
        <trans-unit id="af382458c7c1694962f7272d5dc6257cee21c759" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">이 기능은 옵션으로 추가 인수에 소요 &lt;code&gt;err&lt;/code&gt; - &lt;code&gt;Error&lt;/code&gt; 보고서에 인쇄 된 자바 스크립트 스택의 컨텍스트로 사용됩니다 개체를.</target>
        </trans-unit>
        <trans-unit id="85a6696b2b5e9ad1b7f6b1c4ddafeb81b81510f6" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">이 기능은 옵션으로 추가 인수에 소요 &lt;code&gt;err&lt;/code&gt; - &lt;code&gt;Error&lt;/code&gt; 보고서에 인쇄 된 자바 스크립트 스택의 컨텍스트로 사용됩니다 개체를. 콜백 또는 예외 처리기에서 오류를 처리하기 위해 보고서를 사용할 때 보고서는 원래 오류의 위치와 처리 된 위치를 보고서에 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2598594008e308c577b78ccab80128ea1021d684" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</target>
        </trans-unit>
        <trans-unit id="5aed6487576d7dd9ad1eb9e85fc412600a086575" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt;, which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; , which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</target>
        </trans-unit>
        <trans-unit id="77ea37c691223737f81084a936fc91467e04f445" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;filename&lt;/code&gt;, which is the name of a file into which the report is written.</source>
          <target state="translated">이 함수는 보고서를 작성하는 파일의 이름 인 선택적 추가 인수 &lt;code&gt;filename&lt;/code&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5f1d19a17165c41d2e0284a1b5c28f86bd5da3dc" translate="yes" xml:space="preserve">
          <source>This function will kill the worker. In the master, it does this by disconnecting the &lt;code&gt;worker.process&lt;/code&gt;, and once disconnected, killing with &lt;code&gt;signal&lt;/code&gt;. In the worker, it does it by disconnecting the channel, and then exiting with code &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">이 기능은 작업자를 죽일 것입니다. 마스터에서는 &lt;code&gt;worker.process&lt;/code&gt; 의 연결을 끊고 일단 연결이 끊기면 &lt;code&gt;signal&lt;/code&gt; 로 종료 됩니다. 작업자는 채널 연결을 끊고 코드 &lt;code&gt;0&lt;/code&gt; 으로 종료하여 작업을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="fc334c0e240796cb69b50cfdf422e85bbfb6b48c" translate="yes" xml:space="preserve">
          <source>This functionality has been removed.</source>
          <target state="translated">이 기능은 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="36e8179328462918849467415bc6e47b53741e6f" translate="yes" xml:space="preserve">
          <source>This happens when:</source>
          <target state="translated">다음과 같은 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c6a7c9955e027e73c53547cdbc2c54fa7e69027d" translate="yes" xml:space="preserve">
          <source>This has the same false positives and negatives as described in &lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt;&lt;code&gt;writeStream.getColorDepth()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt; &lt;code&gt;writeStream.getColorDepth()&lt;/code&gt; &lt;/a&gt; 설명 된 것과 같은 오 탐지와 오 탐지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="af19c7ad3abc63f1d8cfd897e2ce7c93b37d4059" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also currently no way to interact with the Loader, though support is planned.</source>
          <target state="translated">이 구현은 &lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript 모듈 로더&lt;/a&gt; 보다 낮은 레벨에 있습니다. 지원이 계획되어 있지만 현재 로더와 상호 작용할 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="4cc43cf5c93c4064080045c3dcadfc716ce173eb" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also no way to interact with the Loader yet, though support is planned.</source>
          <target state="translated">This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also no way to interact with the Loader yet, though support is planned.</target>
        </trans-unit>
        <trans-unit id="7a7d6f9a64fbfdcb7e7c59dad106536b0e46b04e" translate="yes" xml:space="preserve">
          <source>This integration is in line with the &lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;ES Module Integration Proposal for Web Assembly&lt;/a&gt;.</source>
          <target state="translated">이 통합은 &lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;웹 어셈블리를위한 ES 모듈 통합 제안&lt;/a&gt; 과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="6b04d8ad3ebc5af27ac4b4e1c10756739a2d2124" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the socket is not connected yet, either because &lt;code&gt;.connect()&lt;/code&gt; has not yet been called or because it is still in the process of connecting (see &lt;a href=&quot;#net_socket_connecting&quot;&gt;&lt;code&gt;socket.connecting&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이다 &lt;code&gt;true&lt;/code&gt; 소켓이 아직 접속되어 있지 않은 경우 하나 때문에, &lt;code&gt;.connect()&lt;/code&gt; 아직 호출되지 않았거나이 (참조 연결하는 과정에서 여전히 있기 때문에 &lt;a href=&quot;#net_socket_connecting&quot;&gt; &lt;code&gt;socket.connecting&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c6a303413dae5cf2f56522f80094d23bc472745a" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">Node.js 프로그램을 작성할 때 일반적으로 발생하는 시스템 오류 목록입니다. 전체 목록은 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; (3) 매뉴얼 페이지를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6384af73049677961508c308274b10195affbf33" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; (3) man page&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="615981803bb95c92778608ec98aa86e6b7bec7bb" translate="yes" xml:space="preserve">
          <source>This is a property on the &lt;code&gt;buffer&lt;/code&gt; module returned by &lt;code&gt;require('buffer')&lt;/code&gt;, not on the &lt;code&gt;Buffer&lt;/code&gt; global or a &lt;code&gt;Buffer&lt;/code&gt; instance.</source>
          <target state="translated">이것은 &lt;code&gt;Buffer&lt;/code&gt; 전역 또는 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스가 아닌 &lt;code&gt;require('buffer')&lt;/code&gt; 가 반환 한 &lt;code&gt;buffer&lt;/code&gt; 모듈 의 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="22812016d42b8d66cb470ae9bc87b4d2aece8842" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stderr: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">이것은 작업자 스레드 내부에서 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 에&lt;/a&gt; 기록 된 데이터를 포함하는 읽기 가능한 스트림입니다 . 경우 &lt;code&gt;stderr: true&lt;/code&gt; 에 전달되지 않은 &lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자, 다음 데이터는 상위 스레드의에 파이프됩니다 &lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 의&lt;/a&gt; 스트림입니다.</target>
        </trans-unit>
        <trans-unit id="ef6edca8b742a017994b5d4c4977f24985399057" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stdout: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">이것은 작업자 스레드 내부에서 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 에&lt;/a&gt; 기록 된 데이터를 포함하는 읽기 가능한 스트림입니다 . 경우 &lt;code&gt;stdout: true&lt;/code&gt; 에 전달되지 않은 &lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자, 다음 데이터는 상위 스레드의에 파이프됩니다 &lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 의&lt;/a&gt; 스트림입니다.</target>
        </trans-unit>
        <trans-unit id="6afd75c5ddd399af67dafff5027ffe863f1e6152" translate="yes" xml:space="preserve">
          <source>This is also emitted in case this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream emits an error when a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream pipes into it.</source>
          <target state="translated">&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 스트림이 파이프에 들어갈 때이 &lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;가능 스트림 에서 오류가 발생하는 경우에도 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="7266000cead4bb9d2f0e14e9324975faa9eb3a46" translate="yes" xml:space="preserve">
          <source>This is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, N-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, N-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.</source>
          <target state="translated">이것은 특정 범위 내에서 생성 된 객체의 수명을 제어하고 수정하는 데 사용되는 추상화입니다. 일반적으로 N-API 값은 핸들 범위의 컨텍스트 내에서 작성됩니다. JavaScript에서 기본 메소드를 호출하면 기본 핸들 범위가 존재합니다. 사용자가 새 핸들 범위를 명시 적으로 작성하지 않으면 기본 핸들 범위에서 N-API 값이 작성됩니다. 원시 메소드 실행 이외의 코드 호출 (예 : libuv 콜백 호출 중)의 경우, 모듈은 JavaScript 값을 작성할 수있는 함수를 호출하기 전에 범위를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="ac28259e1a0df374cd212eac367f298bb33dcf21" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that is used to represent a JavaScript value.</source>
          <target state="translated">JavaScript 값을 나타내는 데 사용되는 불투명 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="9f727952d85916df43ab81b94013dad46a0ffb66" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that represents a JavaScript function which can be called asynchronously from multiple threads via &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 통해 여러 스레드에서 비동기 적으로 호출 할 수있는 JavaScript 함수를 나타내는 불투명 포인터입니다 .</target>
        </trans-unit>
        <trans-unit id="a4d7f80ddbb26766196c61aca550b0031231b661" translate="yes" xml:space="preserve">
          <source>This is automatically called by any readline instance on its &lt;code&gt;input&lt;/code&gt; if the &lt;code&gt;input&lt;/code&gt; is a terminal. Closing the &lt;code&gt;readline&lt;/code&gt; instance does not stop the &lt;code&gt;input&lt;/code&gt; from emitting &lt;code&gt;'keypress'&lt;/code&gt; events.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 이 터미널 인 경우 &lt;code&gt;input&lt;/code&gt; 에서 readline 인스턴스가 자동으로 호출합니다 . 폐문 &lt;code&gt;readline&lt;/code&gt; 예를하면 멈추지 않는다 &lt;code&gt;input&lt;/code&gt; 발광에서 &lt;code&gt;'keypress'&lt;/code&gt; 이벤트를.</target>
        </trans-unit>
        <trans-unit id="513ca07430a1834e15b4c394a7795cf89cbe75bd" translate="yes" xml:space="preserve">
          <source>This is important when developing APIs in order to give users the opportunity to assign event handlers &lt;em&gt;after&lt;/em&gt; an object has been constructed but before any I/O has occurred:</source>
          <target state="translated">이는 객체를 생성 &lt;em&gt;한 후&lt;/em&gt; I / O가 발생하기 전에 사용자에게 이벤트 핸들러를 할당 할 수있는 기회를 제공하기 위해 API를 개발할 때 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="357a4cb22700e3b307528201a96ec4a2b0b9733a" translate="yes" xml:space="preserve">
          <source>This is in addition to a single internal output slab buffer of size &lt;code&gt;chunkSize&lt;/code&gt;, which defaults to 16K.</source>
          <target state="translated">이것은 &lt;code&gt;chunkSize&lt;/code&gt; 크기의 단일 내부 출력 슬래브 버퍼에 추가 되며 기본값은 16K입니다.</target>
        </trans-unit>
        <trans-unit id="0e3d91f0352da1646e45574d84c00b75bddafb4b" translate="yes" xml:space="preserve">
          <source>This is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.</source>
          <target state="translated">This is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.</target>
        </trans-unit>
        <trans-unit id="07ba21f3ad7e7c13655130ea573064167080a992" translate="yes" xml:space="preserve">
          <source>This is not a hard limit. The &lt;code&gt;EventEmitter&lt;/code&gt; instance will allow more listeners to be added but will output a trace warning to stderr indicating that a &quot;possible EventEmitter memory leak&quot; has been detected. For any single &lt;code&gt;EventEmitter&lt;/code&gt;, the &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; and &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; methods can be used to temporarily avoid this warning:</source>
          <target state="translated">이것은 하드 제한이 아닙니다. &lt;code&gt;EventEmitter&lt;/code&gt; 의 인스턴스보다 청취자 첨가하지만 열려진에 출력 할 것이다 추적 경고는 &quot;가능한 EventEmitter 메모리 누출&quot;검출되었다는 것을 표시 할 수 있도록한다. 단일 &lt;code&gt;EventEmitter&lt;/code&gt; 의 경우 &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; 및 &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; 메소드를 사용하여이 경고를 일시적으로 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d247546ea140a0078a900e014d8747b999296d6" translate="yes" xml:space="preserve">
          <source>This is not a problem in common cases with &lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;ascii&lt;/code&gt;. But it is advised to be mindful about this behavior when working with strings that could contain multi-byte characters.</source>
          <target state="translated">&lt;code&gt;latin1&lt;/code&gt; 또는 &lt;code&gt;ascii&lt;/code&gt; 의 일반적인 경우에는 문제가되지 않습니다 . 그러나 멀티 바이트 문자를 포함 할 수있는 문자열로 작업 할 때는이 동작에주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="3d02f8a61048e89839ba3d326aaa6f920c92db2d" translate="yes" xml:space="preserve">
          <source>This is not used in Node.js and is provided purely for completeness.</source>
          <target state="translated">This is not used in Node.js and is provided purely for completeness.</target>
        </trans-unit>
        <trans-unit id="1c66676dbad5fdaa521ab930e256e4fa335eadac" translate="yes" xml:space="preserve">
          <source>This is now defined as a shared symbol.</source>
          <target state="translated">이것은 이제 공유 심볼로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f5242dbc0ccf6b9ae1f9550732bf4ac3daf1ddd8" translate="yes" xml:space="preserve">
          <source>This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.</source>
          <target state="translated">이는 잠재적으로 오래된 로컬 캐시를 건너 뛸 수 있으므로 NFS 마운트에서 파일을 여는 데 주로 유용합니다. I / O 성능에 매우 큰 영향을 미치므로이 플래그를 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="13659d9d635a0bb9731d74ddaa44ccbacf7114d8" translate="yes" xml:space="preserve">
          <source>This is the abstraction to use to reference a &lt;code&gt;napi_value&lt;/code&gt;. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly.</source>
          <target state="translated">이것은 &lt;code&gt;napi_value&lt;/code&gt; 참조에 사용하는 추상화 입니다. 이를 통해 사용자는 최소 수명을 명시 적으로 정의하는 것을 포함하여 JavaScript 값의 수명을 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="34a774ab2a4921da0fd743e3684fff94908d9756" translate="yes" xml:space="preserve">
          <source>This is the extent of Node.js's awareness of &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="translated">이것은 &lt;code&gt;package.json&lt;/code&gt; 파일에 대한 Node.js의 인식 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="1b5770f4a8b8d2b91b8b89200402bfc85d1d9ae4" translate="yes" xml:space="preserve">
          <source>This is the extent of the awareness of &lt;code&gt;package.json&lt;/code&gt; files within Node.js.</source>
          <target state="translated">This is the extent of the awareness of &lt;code&gt;package.json&lt;/code&gt; files within Node.js.</target>
        </trans-unit>
        <trans-unit id="3d91ef4e57195bccfb6358ea28c6511e77bda4df" translate="yes" xml:space="preserve">
          <source>This is the final event emitted by any &lt;code&gt;Worker&lt;/code&gt; instance.</source>
          <target state="translated">This is the final event emitted by any &lt;code&gt;Worker&lt;/code&gt; instance.</target>
        </trans-unit>
        <trans-unit id="7b4dc164d26c00c2e0663b4d38c3db42c8434ee4" translate="yes" xml:space="preserve">
          <source>This is the legacy version of &lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt;&lt;code&gt;process.hrtime.bigint()&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;bigint&lt;/code&gt; was introduced in JavaScript.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; 가 JavaScript에 도입 되기 전의 기존 버전 인 &lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt; &lt;code&gt;process.hrtime.bigint()&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2525459183823536083e4ebd1435d86bbd1b85ed" translate="yes" xml:space="preserve">
          <source>This is the most basic way to use a domain.</source>
          <target state="translated">이것이 도메인을 사용하는 가장 기본적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="80b89f0e469cc98dfba15cb1d10494441d90a747" translate="yes" xml:space="preserve">
          <source>This is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.</source>
          <target state="translated">이것은 원시 HTTP 본문이며 사용될 수있는 상위 수준의 다중 부분 본문 인코딩과는 아무런 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="538139721ac2a46c540659479840eaa7091999c5" translate="yes" xml:space="preserve">
          <source>This is the same behavior as &lt;code&gt;buf.subarray()&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;buf.subarray()&lt;/code&gt; 와 동일한 동작 입니다.</target>
        </trans-unit>
        <trans-unit id="8885bf9fac1f550c45c516012648aa0d3c485186" translate="yes" xml:space="preserve">
          <source>This is the size (in bytes) of pre-allocated internal &lt;code&gt;Buffer&lt;/code&gt; instances used for pooling. This value may be modified.</source>
          <target state="translated">풀링에 사용되는 사전 할당 된 내부 &lt;code&gt;Buffer&lt;/code&gt; 인스턴스 의 크기 (바이트)입니다 . 이 값은 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48967cae6d1c2b0c2a13e4b791916ed7e65a4ccd" translate="yes" xml:space="preserve">
          <source>This is useful for tracking potential errors in an application while using the &lt;code&gt;Promise&lt;/code&gt; constructor, as multiple resolutions are silently swallowed. However, the occurrence of this event does not necessarily indicate an error. For example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt;&lt;code&gt;Promise.race()&lt;/code&gt;&lt;/a&gt; can trigger a &lt;code&gt;'multipleResolves'&lt;/code&gt; event.</source>
          <target state="translated">여러 해상도를 자동으로 삼키 므로 &lt;code&gt;Promise&lt;/code&gt; 생성자 를 사용하는 동안 응용 프로그램의 잠재적 오류를 추적하는 데 유용합니다 . 그러나이 이벤트가 반드시 오류를 나타내는 것은 아닙니다. 예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt; &lt;code&gt;Promise.race()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;'multipleResolves'&lt;/code&gt; 이벤트를 트리거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="01763a87bcd722e13be0664e3816427229bb3d32" translate="yes" xml:space="preserve">
          <source>This issue also occurs when the &lt;code&gt;loop()&lt;/code&gt; call is scheduled using the &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;queueMicrotask()&lt;/code&gt; functions.</source>
          <target state="translated">이 문제는 &lt;code&gt;process.nextTick()&lt;/code&gt; 및 &lt;code&gt;queueMicrotask()&lt;/code&gt; 함수를 사용하여 &lt;code&gt;loop()&lt;/code&gt; 호출이 예약 된 경우에도 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="c84e6ba5ec93b3229b046976c5bb2ea3de0008df" translate="yes" xml:space="preserve">
          <source>This issue occurs because all contexts share the same microtask and nextTick queues.</source>
          <target state="translated">이 문제는 모든 컨텍스트가 동일한 마이크로 태스크 및 nextTick 큐를 공유하기 때문에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="087b80944dc12b408a7190bd19a55dd80487fba1" translate="yes" xml:space="preserve">
          <source>This macro includes &lt;code&gt;NAPI_MODULE&lt;/code&gt;, and declares an &lt;code&gt;Init&lt;/code&gt; function with a special name and with visibility beyond the addon. This will allow Node.js to initialize the module even if it is loaded multiple times.</source>
          <target state="translated">이 매크로는 &lt;code&gt;NAPI_MODULE&lt;/code&gt; 을 포함 하고 특별한 이름과 애드온 이외의 가시성을 가진 &lt;code&gt;Init&lt;/code&gt; 함수를 선언합니다 . 이를 통해 Node.js가 여러 번로드 된 경우에도 모듈을 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65b6d753134ef1843140e701dbcf7c6cf6f1c011" translate="yes" xml:space="preserve">
          <source>This mainly adds some input validation on top of &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt;. As an additional convenience, &lt;code&gt;superConstructor&lt;/code&gt; will be accessible through the &lt;code&gt;constructor.super_&lt;/code&gt; property.</source>
          <target state="translated">이것은 주로 &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt; 위에 입력 유효성 검사를 추가합니다 . 편의상 &lt;code&gt;superConstructor&lt;/code&gt; 는 &lt;code&gt;constructor.super_&lt;/code&gt; 속성을 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bbe38e8ab91654a3718be6a69fd1e9049d8a23cf" translate="yes" xml:space="preserve">
          <source>This method adds HTTP trailing headers (a header but at the end of the message) to the response.</source>
          <target state="translated">이 메소드는 HTTP 후행 헤더 (메일의 끝에 있지만 헤더)를 응답에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="65a6ac889d5d3a2216eb8e367915333b528d1f56" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This API is similar to &lt;code&gt;napi_call_function&lt;/code&gt;. However, it is used to call &lt;em&gt;from&lt;/em&gt; native code back &lt;em&gt;into&lt;/em&gt; JavaScript &lt;em&gt;after&lt;/em&gt; returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around &lt;code&gt;node::MakeCallback&lt;/code&gt;.</source>
          <target state="translated">이 메소드를 사용하면 JavaScript 추가 기능에서 JavaScript 함수 오브젝트를 호출 할 수 있습니다. 이 API는 &lt;code&gt;napi_call_function&lt;/code&gt; 과 유사합니다 . 그러나 비동기 작업에서 돌아온 &lt;em&gt;후&lt;/em&gt; (스택에 다른 스크립트가없는 경우) 원시 코드 &lt;em&gt;에서&lt;/em&gt; JavaScript &lt;em&gt;로&lt;/em&gt; 다시 호출하는 데 사용됩니다 . &lt;code&gt;node::MakeCallback&lt;/code&gt; 주위에 상당히 간단한 래퍼 입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="314d268cd28ce9b140b0dded93860db9fb90479e" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This is the primary mechanism of calling back &lt;em&gt;from&lt;/em&gt; the add-on's native code &lt;em&gt;into&lt;/em&gt; JavaScript. For the special case of calling into JavaScript after an async operation, see &lt;a href=&quot;#n_api_napi_make_callback&quot;&gt;&lt;code&gt;napi_make_callback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드를 사용하면 JavaScript 추가 기능에서 JavaScript 함수 오브젝트를 호출 할 수 있습니다. 이것은 다시 호출하는 기본 메커니즘입니다 &lt;em&gt;에서&lt;/em&gt; 부가 기능의 네이티브 코드 &lt;em&gt;에&lt;/em&gt; 자바 스크립트를. 비동기 작업 후 JavaScript를 호출하는 특별한 경우는 &lt;a href=&quot;#n_api_napi_make_callback&quot;&gt; &lt;code&gt;napi_make_callback&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5b47fa157850c2f5703ae846bb53e6699d8248ed" translate="yes" xml:space="preserve">
          <source>This method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (see &lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt;&lt;code&gt;napi_property_descriptor&lt;/code&gt;&lt;/a&gt;). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by &lt;code&gt;DefineOwnProperty()&lt;/code&gt; (described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;Section 9.1.6&lt;/a&gt; of the ECMA-262 specification).</source>
          <target state="translated">이 방법을 사용하면 주어진 객체에서 여러 속성을 효율적으로 정의 할 수 있습니다. 속성은 속성 설명자를 사용하여 정의됩니다 ( &lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt; &lt;code&gt;napi_property_descriptor&lt;/code&gt; &lt;/a&gt; 참조 ). 이러한 속성 설명 자의 배열이 주어지면이 API는 &lt;code&gt;DefineOwnProperty()&lt;/code&gt; ( ECMA-262 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;섹션 9.1.6&lt;/a&gt; 에서 설명 )에 정의 된대로 한 번에 하나씩 객체의 속성을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="3024bc40da0e8b2f8456ff7b850738108b0ba432" translate="yes" xml:space="preserve">
          <source>This method calls &lt;code&gt;console.log()&lt;/code&gt; passing it the arguments received. This method does not produce any XML formatting.</source>
          <target state="translated">이 메소드는 수신 된 인수를 전달하여 &lt;code&gt;console.log()&lt;/code&gt; 를 호출합니다 . 이 방법은 XML 형식을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a58dad5fbe14785fff61707964fc0d135efd16a6" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass.</source>
          <target state="translated">이 메소드는 특정 &lt;code&gt;Agent&lt;/code&gt; 서브 클래스에 의해 대체 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="044476cda3ae03b23c22f5aa1722fe2c9153e73c" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass. If this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.</source>
          <target state="translated">이 메소드는 특정 &lt;code&gt;Agent&lt;/code&gt; 서브 클래스에 의해 대체 될 수 있습니다 . 이 메소드가 잘못된 값을 리턴하면 다음 요청에 사용하기 위해 소켓이 지속되지 않고 소멸됩니다.</target>
        </trans-unit>
        <trans-unit id="411dbf433a68f70422dbaf488ba5f65a2beaeff4" translate="yes" xml:space="preserve">
          <source>This method can be used to request a peer's certificate after the secure connection has been established.</source>
          <target state="translated">이 방법은 보안 연결이 설정된 후 피어의 인증서를 요청하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="880393178dbd75cbd21c9662d8dee3698a77a077" translate="yes" xml:space="preserve">
          <source>This method can be used, in particular, to increase cache hits.</source>
          <target state="translated">이 방법은 특히 캐시 적중을 늘리기 위해 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f4cb1d7d9a937c696a9d3a130cc76d5f3a14117" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;) to prevent infinite recursion.</source>
          <target state="translated">무한 재귀를 방지하기 위해 모듈을 평가하는 동안 ( &lt;code&gt;module.status&lt;/code&gt; 는 &lt;code&gt;'evaluating'&lt;/code&gt; ) 이 메소드를 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ae61ef6fb5c5e0b2e4e9dd9285bb0ec91b77d7af" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;).</source>
          <target state="translated">This method cannot be called while the module is being evaluated ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ce10b9da65b616da4694a90a9e7a21235864fb9b" translate="yes" xml:space="preserve">
          <source>This method defaults to the &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; constructor and can be overridden on subclasses.</source>
          <target state="translated">이 메소드는 기본적으로 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 생성자로 설정되며 서브 클래스에서 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe24c9359e77ab155e2cf5807443c493af258ac7" translate="yes" xml:space="preserve">
          <source>This method disables the instance of &lt;code&gt;AsyncLocalStorage&lt;/code&gt;. All subsequent calls to &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; until &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; is called again.</source>
          <target state="translated">This method disables the instance of &lt;code&gt;AsyncLocalStorage&lt;/code&gt; . All subsequent calls to &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; until &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; is called again.</target>
        </trans-unit>
        <trans-unit id="d59adf1d819f06dbe25fb548331d4b223442948c" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. Stops the current JavaScript CPU profiling session if one has been started and prints the report to the &lt;strong&gt;Profiles&lt;/strong&gt; panel of the inspector. See &lt;a href=&quot;#console_console_profile_label&quot;&gt;&lt;code&gt;console.profile()&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. 현재 JavaScript CPU 프로파일 링 세션이 시작된 경우이를 중지하고 보고서를 관리자 의 &lt;strong&gt;프로파일&lt;/strong&gt; 패널에 인쇄합니다 . 예제는 &lt;a href=&quot;#console_console_profile_label&quot;&gt; &lt;code&gt;console.profile()&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ec4a52764354b50bcb9a5cfff971e55a8182917" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.markTimeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timestamp_label&quot;&gt;&lt;code&gt;console.timeStamp()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.markTimeline()&lt;/code&gt; 메소드의 중단 된 형태 &lt;a href=&quot;#console_console_timestamp_label&quot;&gt; &lt;code&gt;console.timeStamp()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c9644bae39bdc4b2a06283995736aff4accc9db" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.profile()&lt;/code&gt; method starts a JavaScript CPU profile with an optional label until &lt;a href=&quot;#console_console_profileend_label&quot;&gt;&lt;code&gt;console.profileEnd()&lt;/code&gt;&lt;/a&gt; is called. The profile is then added to the &lt;strong&gt;Profile&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.profile()&lt;/code&gt; 메소드까지 옵션 레이블 자바 스크립트 CPU 프로파일 시작 &lt;a href=&quot;#console_console_profileend_label&quot;&gt; &lt;code&gt;console.profileEnd()&lt;/code&gt; &lt;/a&gt; 를 호출합니다. 그런 다음 프로파일이 인스펙터 의 &lt;strong&gt;프로파일&lt;/strong&gt; 패널에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="66b73ac52f9f87f1e288fc8b5563d582410feaa9" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeStamp()&lt;/code&gt; method adds an event with the label &lt;code&gt;'label'&lt;/code&gt; to the &lt;strong&gt;Timeline&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.timeStamp()&lt;/code&gt; 메소드는 라벨 추가 이벤트 &lt;code&gt;'label'&lt;/code&gt; 받는 &lt;strong&gt;타임 라인&lt;/strong&gt; 검사자의 패널.</target>
        </trans-unit>
        <trans-unit id="902c866e4222a0e01ce48bdc721e0e086336e617" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_time_label&quot;&gt;&lt;code&gt;console.time()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.timeline()&lt;/code&gt; 메소드의 중단 된 형태 &lt;a href=&quot;#console_console_time_label&quot;&gt; &lt;code&gt;console.time()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="89dc19b7a95d7304b45400b37628fe89d51d2642" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timelineEnd()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timeend_label&quot;&gt;&lt;code&gt;console.timeEnd()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 인스펙터에서 사용하지 않는 한 아무 것도 표시하지 않습니다. &lt;code&gt;console.timelineEnd()&lt;/code&gt; 메소드의 중단 된 형태 &lt;a href=&quot;#console_console_timeend_label&quot;&gt; &lt;code&gt;console.timeEnd()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9ee1a742255ec0013c5a3a66d547b57b65aa47b9" translate="yes" xml:space="preserve">
          <source>This method exists for parity with the Web &lt;code&gt;MessagePort&lt;/code&gt; API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of &lt;code&gt;.onmessage&lt;/code&gt;. Setting it will automatically call &lt;code&gt;.start()&lt;/code&gt;, but unsetting it will let messages queue up until a new handler is set or the port is discarded.</source>
          <target state="translated">이 메소드는 Web &lt;code&gt;MessagePort&lt;/code&gt; API 와 동등 합니다. Node.js에서는 이벤트 리스너가 없을 때 메시지를 무시하는 데만 유용합니다. Node.js는 &lt;code&gt;.onmessage&lt;/code&gt; 처리도 다양 합니다. 설정하면 자동으로 &lt;code&gt;.start()&lt;/code&gt; 호출 되지만 설정을 해제하면 새 처리기가 설정되거나 포트가 삭제 될 때까지 메시지가 대기열에있게됩니다.</target>
        </trans-unit>
        <trans-unit id="1bd0e8798533a40b472a574de3407e9a7b72f42b" translate="yes" xml:space="preserve">
          <source>This method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;Section 19.1.2.6&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">This method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;Section 19.1.2.6&lt;/a&gt; of the ECMA-262 specification.</target>
        </trans-unit>
        <trans-unit id="3bfb7ad344e3264e6f56ee6b803df6669da02258" translate="yes" xml:space="preserve">
          <source>This method has a custom variant for promises that is available using &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 메소드에는 &lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt; 사용하여 사용할 수있는 약속에 대한 사용자 정의 변형이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d57d1e099a57589123cef0225673441664e1e377" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backward compatibility.</source>
          <target state="translated">This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backward compatibility.</target>
        </trans-unit>
        <trans-unit id="eb57dbb6c324bb36be5d114bc6d97130ad87632c" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backwards compatibility.</source>
          <target state="translated">이 메서드는 이전 버전과의 호환성을 위해 &lt;code&gt;worker.destroy()&lt;/code&gt; 로 별칭이 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="e775a3566b8847c710d9cc718838379fe8af31e8" translate="yes" xml:space="preserve">
          <source>This method is almost identical to &lt;a href=&quot;#domain_domain_bind_callback&quot;&gt;&lt;code&gt;domain.bind(callback)&lt;/code&gt;&lt;/a&gt;. However, in addition to catching thrown errors, it will also intercept &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; objects sent as the first argument to the function.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#domain_domain_bind_callback&quot;&gt; &lt;code&gt;domain.bind(callback)&lt;/code&gt; &lt;/a&gt; 과 거의 동일합니다 . 그러나 발생 된 오류를 포착 할뿐 아니라 함수에 대한 첫 번째 인수로 전송 된 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 객체 도 가로 챌 것 입니다.</target>
        </trans-unit>
        <trans-unit id="55fe8b47083e44662b3b21e0205abdb2450ff04a" translate="yes" xml:space="preserve">
          <source>This method is automatically called when an &lt;code&gt;URL&lt;/code&gt; object is serialized with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;URL&lt;/code&gt; 객체가 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; 직렬화 될 때 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="28801c3e02284a4ad1c8e05607ca10e063aca0d7" translate="yes" xml:space="preserve">
          <source>This method is called to generate error objects that will be thrown when an object can not be cloned.</source>
          <target state="translated">이 메소드는 오브젝트를 복제 할 수 없을 때 발생하는 오류 오브젝트를 생성하기 위해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="700f32b0f67ecb7c4ac4e3ae91ec634c886d4a35" translate="yes" xml:space="preserve">
          <source>This method is called to read some kind of host object, i.e. an object that is created by native C++ bindings. If it is not possible to deserialize the data, a suitable exception should be thrown.</source>
          <target state="translated">이 메소드는 일종의 호스트 오브젝트, 즉 원시 C ++ 바인딩으로 작성된 오브젝트를 읽기 위해 호출됩니다. 데이터를 직렬화 해제 할 수 없으면 적절한 예외가 발생해야합니다.</target>
        </trans-unit>
        <trans-unit id="b50d7fb37c7e66d40b59fce47a8cf43fd69d830e" translate="yes" xml:space="preserve">
          <source>This method is called to write some kind of host object, i.e. an object created by native C++ bindings. If it is not possible to serialize &lt;code&gt;object&lt;/code&gt;, a suitable exception should be thrown.</source>
          <target state="translated">이 메소드는 일종의 호스트 객체, 즉 네이티브 C ++ 바인딩에 의해 생성 된 객체를 작성하기 위해 호출됩니다. &lt;code&gt;object&lt;/code&gt; 를 직렬화 할 수없는 경우 , 적절한 예외를 throw 할 필요가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc90c26b3f24d636637240e71fd082c904e9c070" translate="yes" xml:space="preserve">
          <source>This method is called when the serializer is going to serialize a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object. It must return an unsigned 32-bit integer ID for the object, using the same ID if this &lt;code&gt;SharedArrayBuffer&lt;/code&gt; has already been serialized. When deserializing, this ID will be passed to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 직렬 변환기가 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 객체 를 직렬화하려고 할 때 호출됩니다 . 이 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 가 이미 직렬화 된 경우 동일한 ID를 사용하여 오브젝트에 대해 부호없는 32 비트 정수 ID를 리턴해야합니다 . 직렬화 해제시이 ID는 &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt; &lt;/a&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="a90ca117688b90f4f93a88c2020c612e45a213fe" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_get_property&quot;&gt;&lt;code&gt;napi_get_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">이 방법을 호출하는 것과 &lt;a href=&quot;#n_api_napi_get_property&quot;&gt; &lt;code&gt;napi_get_property&lt;/code&gt; &lt;/a&gt; A의 &lt;code&gt;napi_value&lt;/code&gt; 로 전달 된 열로부터 생성 &lt;code&gt;utf8Name&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="ff0f235c75ab596d17873611663abac578a666d2" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_has_property&quot;&gt;&lt;code&gt;napi_has_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">이 방법을 호출하는 것과 &lt;a href=&quot;#n_api_napi_has_property&quot;&gt; &lt;code&gt;napi_has_property&lt;/code&gt; &lt;/a&gt; A의 &lt;code&gt;napi_value&lt;/code&gt; 로 전달 된 열로부터 생성 &lt;code&gt;utf8Name&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="5fffe0150f23e478ffc2985c081f396a015cdadd" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_set_property&quot;&gt;&lt;code&gt;napi_set_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">이 방법을 호출하는 것과 &lt;a href=&quot;#n_api_napi_set_property&quot;&gt; &lt;code&gt;napi_set_property&lt;/code&gt; &lt;/a&gt; A의 &lt;code&gt;napi_value&lt;/code&gt; 로 전달 된 열로부터 생성 &lt;code&gt;utf8Name&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="19464a10e7ec85fab298874a00280da292ea3dfb" translate="yes" xml:space="preserve">
          <source>This method is guaranteed to return an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">This method is guaranteed to return an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="79406247f664fad5db62dc93aae5d2cdf35f025d" translate="yes" xml:space="preserve">
          <source>This method is inherited from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt;&lt;code&gt;TypedArray#subarray()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This method is inherited from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt; &lt;code&gt;TypedArray#subarray()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b2b2abbf6b99b52821177c95dfb1032a424b6a78" translate="yes" xml:space="preserve">
          <source>This method is intentionally generic and works with the web platform &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt; interface, which has no special &lt;code&gt;'error'&lt;/code&gt; event semantics and does not listen to the &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">This method is intentionally generic and works with the web platform &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt; interface, which has no special &lt;code&gt;'error'&lt;/code&gt; event semantics and does not listen to the &lt;code&gt;'error'&lt;/code&gt; event.</target>
        </trans-unit>
        <trans-unit id="3517d618f187f767a89b4300a1b63a8e5b17cacd" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows system. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">이 방법은 Windows 시스템에서만 의미가 있습니다. POSIX 시스템에서이 방법은 작동 하지 않으며 항상 수정없이 &lt;code&gt;path&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="25056a0846e91f46d370fe64132434ed4f7def8b" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</target>
        </trans-unit>
        <trans-unit id="c983f46e76b9dd0433799a448f5bdb19ed94b9c5" translate="yes" xml:space="preserve">
          <source>This method is not compatible with the &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;, which is a superclass of &lt;code&gt;Buffer&lt;/code&gt;. To copy the slice, use &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Buffer&lt;/code&gt; 의 슈퍼 클래스 인 &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; 와 호환되지 않습니다 . 슬라이스를 복사하려면 &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b32b22b8c3858f8f2465d3884aa82bd24680b6ec" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Deserializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Deserializer&lt;/code&gt; 클래스 자체에는 없지만 서브 클래스에서 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f595b58310133998e11cc3f534439b34974ab0b" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Serializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Serializer&lt;/code&gt; 클래스 자체에는 없지만 서브 클래스에서 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c26e9b3b06705355d77378147bd81e2be0268ac9" translate="yes" xml:space="preserve">
          <source>This method is only available if &lt;code&gt;http2session.type&lt;/code&gt; is equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt;.</source>
          <target state="translated">경우이 방법 만 사용할 수 있습니다 &lt;code&gt;http2session.type&lt;/code&gt; 이 동일 &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1cc56a973921f1c8e3418ef2a7ab83893408b1d1" translate="yes" xml:space="preserve">
          <source>This method is only valid when using &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt; &lt;code&gt;fs.lstat()&lt;/code&gt; &lt;/a&gt; 사용할 때만 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="0f78dbde2f747ddef4d4559acc66df6ead53e6a5" translate="yes" xml:space="preserve">
          <source>This method is to be used when the &lt;code&gt;asyncLocalStorage&lt;/code&gt; is not in use anymore in the current process.</source>
          <target state="translated">This method is to be used when the &lt;code&gt;asyncLocalStorage&lt;/code&gt; is not in use anymore in the current process.</target>
        </trans-unit>
        <trans-unit id="bf2ae0bdcbd8efcf11842d83c6ae7c582606fc85" translate="yes" xml:space="preserve">
          <source>This method is used after the module is linked to set the values of exports. If it is called before the module is linked, an &lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt;&lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt;&lt;/a&gt; error will be thrown.</source>
          <target state="translated">This method is used after the module is linked to set the values of exports. If it is called before the module is linked, an &lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt; &lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt; &lt;/a&gt; error will be thrown.</target>
        </trans-unit>
        <trans-unit id="c79bf54fc2158426a1f13109023fc9410f485037" translate="yes" xml:space="preserve">
          <source>This method is used to instantiate a new JavaScript value using a given &lt;code&gt;napi_value&lt;/code&gt; that represents the constructor for the object. For example, consider the following snippet:</source>
          <target state="translated">이 메소드는 객체의 생성자를 나타내는 지정된 &lt;code&gt;napi_value&lt;/code&gt; 를 사용하여 새 JavaScript 값을 인스턴스화하는 데 사용됩니다 . 예를 들어 다음 스 니펫을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="137f79d3611d70d649552c51bbc155deba38dbc3" translate="yes" xml:space="preserve">
          <source>This method is used within a callback function to retrieve details about the call like the arguments and the &lt;code&gt;this&lt;/code&gt; pointer from a given callback info.</source>
          <target state="translated">이 메소드는 콜백 함수 내 에서 주어진 콜백 정보에서 인수 및 &lt;code&gt;this&lt;/code&gt; 포인터 와 같은 호출에 대한 세부 사항을 검색하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="60fde3ca8666014eb1362597c31de1875933d209" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the parent process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">This method makes the IPC channel keep the event loop of the parent process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</target>
        </trans-unit>
        <trans-unit id="251db73775a8b3eb3fd6d9fbf270dcd66e16a1b7" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">This method makes the IPC channel keep the event loop of the process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</target>
        </trans-unit>
        <trans-unit id="81a4b339f84ffd2a9b0ba60d97efea903da7fe04" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the parent process running, and lets it finish even while the channel is open.</source>
          <target state="translated">This method makes the IPC channel not keep the event loop of the parent process running, and lets it finish even while the channel is open.</target>
        </trans-unit>
        <trans-unit id="df073da75d6db77d3f3df5fbdcc741763d5d7bc9" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.</source>
          <target state="translated">This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.</target>
        </trans-unit>
        <trans-unit id="f55f033607e44dce887582c62c0f096d380f7f0b" translate="yes" xml:space="preserve">
          <source>This method may be called at most one time on a message before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt; 를 호출 하기 전에 메시지에서이 메소드를 최대 한 번만 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3526009bcd91f17d5aa041034e585a5c485866dd" translate="yes" xml:space="preserve">
          <source>This method must only be called once on a message and it must be called before &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">이 메소드는 메시지에서 한 번만 호출해야하며 &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt; 가 호출 되기 전에 호출되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="dec2a56a8fed198bcdf723bd5b7ecf90cb7dc580" translate="yes" xml:space="preserve">
          <source>This method no longer supports multiple calls that don&amp;rsquo;t map to individual &lt;code&gt;console.time()&lt;/code&gt; calls; see below for details.</source>
          <target state="translated">이 메소드는 더 이상 개별 &lt;code&gt;console.time()&lt;/code&gt; 호출에 매핑되지 않는 여러 호출을 지원하지 않습니다 . 자세한 내용은 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f6f47d3b4379f25f04e6a25df0b8f764ba8d8b4d" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ClientRequest&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;ClientRequest&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a29f826336bbe3debd8646a229b260cfd3ea8a80" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ServerResponse&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;ServerResponse&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2bead6ce0f903b94b3581fba9b0c460760d9b196" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;decipher&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;decipher&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="326608dac58b4293b056bd095e3a8d421c4657b5" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;worker&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;worker&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="eccd72d8d3bfb8524959d772fbf00e2e2ccd4284" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;writable&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 이제 &lt;code&gt;writable&lt;/code&gt; 에 대한 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f736dde7b82e9ca5487f277a3fc447dc5f614522" translate="yes" xml:space="preserve">
          <source>This method now supports passing &lt;code&gt;options&lt;/code&gt;, specifically &lt;code&gt;options.ttl&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;options&lt;/code&gt; 전달 , 특히 &lt;code&gt;options.ttl&lt;/code&gt; 을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="edb4af30902bebe24d30824096149434c6b8e2b5" translate="yes" xml:space="preserve">
          <source>This method now throws if the GCM tag length is invalid.</source>
          <target state="translated">이 메소드는 이제 GCM 태그 길이가 유효하지 않은 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0970dd484b399eb1d57fb730f0ead071cb410ad4" translate="yes" xml:space="preserve">
          <source>This method relies on &lt;code&gt;Object.prototype.toString()&lt;/code&gt; behavior. It is possible to obtain an incorrect result when the &lt;code&gt;object&lt;/code&gt; argument manipulates &lt;code&gt;@@toStringTag&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; 동작 에 의존합니다 . &lt;code&gt;object&lt;/code&gt; 인수가 &lt;code&gt;@@toStringTag&lt;/code&gt; 조작 할 때 잘못된 결과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e9bf5991fa9c748c4ddd11e088d41c09880c593" translate="yes" xml:space="preserve">
          <source>This method returns a boolean for flow control now.</source>
          <target state="translated">이 메소드는 흐름 제어를위한 부울을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="049623077d54205258c2f93454b1d1ee06027dbc" translate="yes" xml:space="preserve">
          <source>This method returns the current store. If this method is called outside of an asynchronous context initialized by calling &lt;code&gt;asyncLocalStorage.run&lt;/code&gt;, it will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">This method returns the current store. If this method is called outside of an asynchronous context initialized by calling &lt;code&gt;asyncLocalStorage.run&lt;/code&gt; , it will return &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="718308cf0c5761b550f5d72b6cf7018c6b6197ad" translate="yes" xml:space="preserve">
          <source>This method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;Section 19.1.2.20&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">This method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;Section 19.1.2.20&lt;/a&gt; of the ECMA-262 specification.</target>
        </trans-unit>
        <trans-unit id="b9df835392f53f83cbf43706f5a9c14ab012c2f6" translate="yes" xml:space="preserve">
          <source>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, &lt;code&gt;response.end()&lt;/code&gt;, MUST be called on each response.</source>
          <target state="translated">이 메소드는 모든 응답 헤더와 본문이 전송되었음을 서버에 알립니다. 해당 서버는이 메시지가 완료된 것으로 간주해야합니다. 각 응답 에서 &lt;code&gt;response.end()&lt;/code&gt; 메소드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="ed78b55e754e7fa16630f5733386b1ad180489e2" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt;&lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt; &lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt; &lt;/a&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="3e295612b73a29336c23b8ca6f269cd989dccbf9" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt;&lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt; &lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt; &lt;/a&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="cfa965434bb457984be24fcb690fab82b4955073" translate="yes" xml:space="preserve">
          <source>This method throws &lt;code&gt;EBADF&lt;/code&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;code&gt;EBADF&lt;/code&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="91894603a2d6878685230629c869c5cc4c825298" translate="yes" xml:space="preserve">
          <source>This method will throw an error if the target &lt;code&gt;pid&lt;/code&gt; does not exist. As a special case, a signal of &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Windows platforms will throw an error if the &lt;code&gt;pid&lt;/code&gt; is used to kill a process group.</source>
          <target state="translated">대상 &lt;code&gt;pid&lt;/code&gt; 가 존재하지 않으면 이 메소드는 오류를 발생시킵니다 . 특별한 경우로서, 프로세스의 존재를 테스트하기 위해 &lt;code&gt;0&lt;/code&gt; 의 신호 가 사용될 수있다. &lt;code&gt;pid&lt;/code&gt; 를 사용하여 프로세스 그룹을 종료 하면 Windows 플랫폼에서 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="d7a1dc1cbb67ff0479ab2d4ec138ffb994e39f33" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">이 방법은 &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt; 와 매우 유사 합니다 . 즉, 제공된 첫 번째 서버로 분석하려고하면 &lt;code&gt;NOTFOUND&lt;/code&gt; 오류가 발생하면 &lt;code&gt;resolve()&lt;/code&gt; 메소드는 제공된 후속 서버로 분석을 시도 &lt;em&gt;하지 않습니다&lt;/em&gt; . 대체 DNS 서버는 이전 서버가 시간 초과되거나 다른 오류가 발생하는 경우에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="338d35f90fcbabeed9638d0994745e773b223f83" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</target>
        </trans-unit>
        <trans-unit id="da5d4255578cc98dd0bf8203ac9635b394724a79" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously outside of a context and return its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">This methods runs a function synchronously outside of a context and return its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback.</target>
        </trans-unit>
        <trans-unit id="44bd57aad2273e41bbc9d4b198d65622d5de140c" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously within a context and return its return value. The store is not accessible outside of the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">This methods runs a function synchronously within a context and return its return value. The store is not accessible outside of the callback function or the asynchronous operations created within the callback.</target>
        </trans-unit>
        <trans-unit id="80ac9951e9c15f0ad4db6383a1db28445d3d11d9" translate="yes" xml:space="preserve">
          <source>This mode provides a balance between features and binary size.</source>
          <target state="translated">This mode provides a balance between features and binary size.</target>
        </trans-unit>
        <trans-unit id="31b0496aa78380171e1c86de496fc1c12964b92b" translate="yes" xml:space="preserve">
          <source>This mode provides a good balance between features and binary size, and it is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">이 모드는 기능과 이진 크기 사이의 균형이 양호하며 &lt;code&gt;--with-intl&lt;/code&gt; 플래그가 전달 되지 않은 경우 기본 동작 입니다. 공식 바이너리도이 모드에서 빌드됩니다.</target>
        </trans-unit>
        <trans-unit id="58478d1f06fd4faab8d57954c1994c2807d9e162" translate="yes" xml:space="preserve">
          <source>This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</source>
          <target state="translated">This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</target>
        </trans-unit>
        <trans-unit id="61829d000837d81bc1af29b5a18d65d68b23b06e" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been instantiated; otherwise it will throw an error. It could be called also when the module has already been evaluated, in which case it will do one of the following two things:</source>
          <target state="translated">모듈을 인스턴스화 한 후에 호출해야합니다. 그렇지 않으면 오류가 발생합니다. 모듈이 이미 평가 된 경우에도 호출 될 수 있으며,이 경우 다음 두 가지 중 하나를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="6f7e3676799bc8a3bb8082ebb54448a8f098105d" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt;) or it will re-throw the exception that the initial evaluation resulted in (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;).</source>
          <target state="translated">This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt; ) or it will re-throw the exception that the initial evaluation resulted in ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4e9b793d8f4835801a2e03d986f43b29e0294b7f" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;. It can be passed to &lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt;&lt;code&gt;clearImmediate()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">이 객체는 내부적으로 작성되어 &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt; 에서 반환됩니다 . 스케줄 된 조치를 취소하기 위해 &lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt; &lt;code&gt;clearImmediate()&lt;/code&gt; &lt;/a&gt; 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30df376bcf445e9ea2fd9f87e4e31b34c96b80ed" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;. It can be passed to either &lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt;&lt;code&gt;clearTimeout()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt;&lt;code&gt;clearInterval()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">이 객체는 내부적으로 생성되어 &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt; 에서 반환됩니다 . 스케줄 된 조치를 취소하기 위해 &lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt; &lt;code&gt;clearTimeout()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt; &lt;code&gt;clearInterval()&lt;/code&gt; &lt;/a&gt; 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="11bcec38f2abde0cda814ffe6df5a8ef30f2d46d" translate="yes" xml:space="preserve">
          <source>This object is created internally and returned from &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt;. It represents an &lt;em&gt;in-progress&lt;/em&gt; request whose header has already been queued. The header is still mutable using the &lt;a href=&quot;#http_request_setheader_name_value&quot;&gt;&lt;code&gt;setHeader(name, value)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_getheader_name&quot;&gt;&lt;code&gt;getHeader(name)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_removeheader_name&quot;&gt;&lt;code&gt;removeHeader(name)&lt;/code&gt;&lt;/a&gt; API. The actual header will be sent along with the first data chunk or when calling &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 객체는 내부적으로 생성되어 &lt;a href=&quot;#http_http_request_options_callback&quot;&gt; &lt;code&gt;http.request()&lt;/code&gt; &lt;/a&gt; 에서 반환됩니다 . 헤더가 이미 대기중인 &lt;em&gt;진행중인&lt;/em&gt; 요청을 나타냅니다 . 헤더는 여전히 &lt;a href=&quot;#http_request_setheader_name_value&quot;&gt; &lt;code&gt;setHeader(name, value)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#http_request_getheader_name&quot;&gt; &lt;code&gt;getHeader(name)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#http_request_removeheader_name&quot;&gt; &lt;code&gt;removeHeader(name)&lt;/code&gt; &lt;/a&gt; API를 사용하여 변경할 수 있습니다. 실제 헤더는 첫 번째 데이터 청크와 함께 또는 &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; &lt;/a&gt; 호출 할 때 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="276727d393a49049986a6764a6b9df30b3c6e8d1" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">이 객체는 사용자가 아닌 HTTP 서버에 의해 내부적으로 생성됩니다. &lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; 이벤트에 두 번째 매개 변수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b243244bb0ee3d29d16ef5c4abcf7c8294d4366" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">이 객체는 사용자가 아닌 HTTP 서버에 의해 내부적으로 생성됩니다. &lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; 이벤트에 두 번째 매개 변수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="6d42c4c77f2412e6c0e13465d846324fb36177a5" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="6828f42c873a55b00234dc584cf52b644aef0a4c" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="b590c4862d8c62879d75abd1aa21bce18d4bbd42" translate="yes" xml:space="preserve">
          <source>This object is not intended to be changed or set manually.</source>
          <target state="translated">이 개체는 수동으로 변경하거나 설정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="39f42f9d3b7870458abec1b8bba415750246f54d" translate="yes" xml:space="preserve">
          <source>This operation cannot be undone.</source>
          <target state="translated">This operation cannot be undone.</target>
        </trans-unit>
        <trans-unit id="6d68cfded63649ce7ce6716537aea2949bfdc24a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;UInt8Array&lt;/code&gt; - that is, getting returns &lt;code&gt;undefined&lt;/code&gt; and setting does nothing.</source>
          <target state="translated">이 연산자는 &lt;code&gt;Uint8Array&lt;/code&gt; 에서 상속 되므로 범위를 벗어난 액세스에 대한 동작은 &lt;code&gt;UInt8Array&lt;/code&gt; 와 동일 합니다. 즉, 반환 값을 &lt;code&gt;undefined&lt;/code&gt; 하지 않고 설정을 수행해도 아무런 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7b68e9509c532127f52fafc15b3bbfa8dc0ae41a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt;. In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt;, and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt;.</source>
          <target state="translated">This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt; , so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt; . In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt; , and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd5bc0556c47cdb09e41d5ea59f149aa88e6a463" translate="yes" xml:space="preserve">
          <source>This option is a no-op. It is kept for compatibility.</source>
          <target state="translated">이 옵션은 작동하지 않습니다. 호환성을 위해 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="4951046a2e8ef3ca45424f2c3f92fe4d355065b2" translate="yes" xml:space="preserve">
          <source>This option is no longer experimental.</source>
          <target state="translated">This option is no longer experimental.</target>
        </trans-unit>
        <trans-unit id="7ab4df6e22ae62c4d079027a2c218b72789bdc22" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. See &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt; on how to compile a binary using this mode.</source>
          <target state="translated">이 옵션은 ICU에 대한 결과 바이너리 링크를 정적으로 만들고 전체 ICU 데이터 세트를 포함합니다. 이 방법으로 만든 바이너리는 더 이상 외부 종속성이 없으며 모든 로캘을 지원하지만 다소 클 수 있습니다. 이 모드를 사용하여 바이너리를 컴파일하는 방법 은 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="883efe526d0eeec11102d9602133026d76078e17" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</target>
        </trans-unit>
        <trans-unit id="394a6a9a97a53a953940a51f3bdcf234aa0c8526" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the &lt;code&gt;node&lt;/code&gt; executable.</source>
          <target state="translated">이 옵션은 ICU 라이브러리에 대한 결과 바이너리 링크를 정적으로 만들고 &lt;code&gt;node&lt;/code&gt; 실행 파일 내에 ICU 데이터의 하위 세트 (일반적으로 영어 로케일 만)를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="28fb57d096952e1be65ad8500b5938bfe5fc415f" translate="yes" xml:space="preserve">
          <source>This optional function will be called before the stream closes, delaying the &lt;code&gt;'finish'&lt;/code&gt; event until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to close resources or write buffered data before a stream ends.</source>
          <target state="translated">이 선택적 함수는 스트림이 닫히기 전에 호출 되어 &lt;code&gt;callback&lt;/code&gt; 이 호출 될 때까지 &lt;code&gt;'finish'&lt;/code&gt; 이벤트를 지연시킵니다 . 스트림이 끝나기 전에 리소스를 닫거나 버퍼링 된 데이터를 쓰는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="1e3da6c9301c93f8176d26d36040c1dd6fd9b584" translate="yes" xml:space="preserve">
          <source>This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt;, &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt; , &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="74b3259a863b34aca5868a5d91c49dfe546aa404" translate="yes" xml:space="preserve">
          <source>This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="2a912ac54f282aa0ebdc6b3d1ffc8071941bc6bc" translate="yes" xml:space="preserve">
          <source>This particular operation may be hard to use in a Node.js context, as the streaming layer makes it hard to know which data will end up in this frame. Also, there is currently no way to consume this data through the Node.js API.</source>
          <target state="translated">스트리밍 레이어로 인해이 프레임에서 어떤 데이터가 종료되는지 알기가 어렵 기 때문에이 특정 작업은 Node.js 컨텍스트에서 사용하기 어려울 수 있습니다. 또한 현재 Node.js API를 통해이 데이터를 사용할 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="019c5d87354ac10b6f36fe3aa511b3b40d2ed49a" translate="yes" xml:space="preserve">
          <source>This pool could be used as follows:</source>
          <target state="translated">This pool could be used as follows:</target>
        </trans-unit>
        <trans-unit id="b9a02d3eca403bdc666212cf0c86fe38b7d15dd1" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be read. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">이 특성은 읽을 준비가 된 큐의 바이트 수 (또는 오브젝트)를 포함합니다. 이 값은 &lt;code&gt;highWaterMark&lt;/code&gt; 상태에 관한 내부 데이터를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="eb9e3144be10a8f3e780007f6d355783bf984b8d" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be written. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">이 특성은 큐에서 쓸 준비가 된 바이트 수 (또는 오브젝트)를 포함합니다. 이 값은 &lt;code&gt;highWaterMark&lt;/code&gt; 상태에 관한 내부 데이터를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="386fd84fec99ef9b47b7d16488786592c44b6e77" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the underlying file has not been opened yet, i.e. before the &lt;code&gt;'ready'&lt;/code&gt; event is emitted.</source>
          <target state="translated">기본 파일이 아직 열리지 않은 경우, 즉 &lt;code&gt;'ready'&lt;/code&gt; 이벤트가 생성 되기 전에이 속성은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7fec8e8f93a4601a9b7a5243b25b3bca584a0d87" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt;. If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt;. If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt; . If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt; . If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f517051737746faa183df11c32566027df8f1e76" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;undefined&lt;/code&gt; for unrecognized &lt;code&gt;KeyObject&lt;/code&gt; types and symmetric keys.</source>
          <target state="translated">인식 할 수없는 &lt;code&gt;KeyObject&lt;/code&gt; 유형 및 대칭 키 에는이 속성이 &lt;code&gt;undefined&lt;/code&gt; 되어 있지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d3602e2ea022e3bc39b7484318da9a603e6288b8" translate="yes" xml:space="preserve">
          <source>This property is a reference to the instance itself.</source>
          <target state="translated">이 속성은 인스턴스 자체에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="e33cc887d6f76fe29d205691170fbab8a5395204" translate="yes" xml:space="preserve">
          <source>This property is deprecated.</source>
          <target state="translated">이 속성은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f73f92d394bd6733681726663afa3be14f683e89" translate="yes" xml:space="preserve">
          <source>This property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="translated">이 속성은 더 이상 사용되지 않습니다. 사용하십시오 &lt;code&gt;crypto.setFips()&lt;/code&gt; 및 &lt;code&gt;crypto.getFips()&lt;/code&gt; 대신합니다.</target>
        </trans-unit>
        <trans-unit id="8853fccd2133c9b9842c8f0088d75409954f4216" translate="yes" xml:space="preserve">
          <source>This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d7a656096a20de49803ec12a402ed5a91dccea98" translate="yes" xml:space="preserve">
          <source>This property is particularly useful as a means of determining if a client or server fully transmitted a message before a connection was terminated:</source>
          <target state="translated">이 특성은 연결이 종료되기 전에 클라이언트 또는 서버가 메시지를 완전히 전송했는지 여부를 판별하는 수단으로 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f429a22f8731ad82e20fb7b571d26a7a167f34d0" translate="yes" xml:space="preserve">
          <source>This property now returns &lt;code&gt;undefined&lt;/code&gt; for KeyObject instances of unrecognized type instead of aborting.</source>
          <target state="translated">이 속성은 이제 중단 대신 인식 할 수없는 유형의 KeyObject 인스턴스에 대해 &lt;code&gt;undefined&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0258cc0d87a79ada93448982013acd1442be2048" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt;. The value is fixed at &lt;code&gt;2&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt; . The value is fixed at &lt;code&gt;2&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="92d2b06eec651f39ccf3c9d6223d4bc3c22e2f93" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt;. The value is fixed at &lt;code&gt;0&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt; . The value is fixed at &lt;code&gt;0&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="e844b6956113839c2be7aaa33d95e92dee6d1883" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt;. The value is fixed at &lt;code&gt;1&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt; . The value is fixed at &lt;code&gt;1&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="5ac2df8cfb8a6ab600d58d12a18a1fd49b8186b6" translate="yes" xml:space="preserve">
          <source>This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</source>
          <target state="translated">This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</target>
        </trans-unit>
        <trans-unit id="f8bac265f5b733744a963486d246686da65c6443" translate="yes" xml:space="preserve">
          <source>This property represents the state of the connection as a string.</source>
          <target state="translated">This property represents the state of the connection as a string.</target>
        </trans-unit>
        <trans-unit id="eefab09d53dbef4bb15074330e33f073160962a7" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.</source>
          <target state="translated">This property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.</target>
        </trans-unit>
        <trans-unit id="e1a6a91551ecd980b558ff842b37549796e6bf30" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters currently buffered to be written. See &lt;a href=&quot;net#net_socket_buffersize&quot;&gt;&lt;code&gt;net.Socket.bufferSize&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">이 속성은 현재 쓰기 위해 버퍼링 된 문자 수를 나타냅니다. 자세한 내용은 &lt;a href=&quot;net#net_socket_buffersize&quot;&gt; &lt;code&gt;net.Socket.bufferSize&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="275fd6bab7ae5428d094e40bf2e70f30dde5cd7c" translate="yes" xml:space="preserve">
          <source>This represents the underlying binary scalar datatype of the &lt;code&gt;TypedArray&lt;/code&gt;. Elements of this enum correspond to &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;TypedArray&lt;/code&gt; 의 기본 이진 스칼라 데이터 유형을 나타냅니다 . 이 열거의 요소는 &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript 언어 사양&lt;/a&gt; 의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;섹션 22.2&lt;/a&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="750611976052ddea1aefb70b31d097d53f3ce423" translate="yes" xml:space="preserve">
          <source>This restricts the N-API surface to just the functionality that was available in the specified (and earlier) versions.</source>
          <target state="translated">이렇게하면 N-API 표면이 지정된 (이전) 버전에서 사용 가능한 기능으로 만 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="34670d73c4e4f5a65a2cb44fbd1ad5dc7e3c2e51" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3356fbb2ec8113ec889350faf51d5150518f85cf" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="36ef0fd0665d4357db1b84a2e19547d2706f8eb2" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e161eae495f60eecc39fcb871e7db25d724d21cd" translate="yes" xml:space="preserve">
          <source>This sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.</source>
          <target state="translated">응답 본문의 청크를 보냅니다. 이 방법은 신체의 연속적인 부분을 제공하기 위해 여러 번 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f47c2c3b1777de556577edd88a50fe16d9b43ef1" translate="yes" xml:space="preserve">
          <source>This should only be disabled for testing; HTTP requires the Date header in responses.</source>
          <target state="translated">테스트시에만 비활성화해야합니다. HTTP에는 응답에 Date 헤더가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f59eae131a4bc1e43befd9071b9f0e34721e73ef" translate="yes" xml:space="preserve">
          <source>This status does not convey any information regarding if &lt;code&gt;module.link()&lt;/code&gt; has been called. See &lt;code&gt;module.linkingStatus&lt;/code&gt; for that.</source>
          <target state="translated">이 상태는 &lt;code&gt;module.link()&lt;/code&gt; 가 호출되었는지 에 관한 정보를 전달하지 않습니다 . 이에 대해서는 &lt;code&gt;module.linkingStatus&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0116ac87fb2193b9cadfa6e6c4b58a397209ffa8" translate="yes" xml:space="preserve">
          <source>This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</source>
          <target state="translated">This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</target>
        </trans-unit>
        <trans-unit id="7d49c824be76a8237417ac95208be1205943ec8d" translate="yes" xml:space="preserve">
          <source>This throws an error if &lt;code&gt;value&lt;/code&gt; cannot be serialized.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 을 직렬화 할 수없는 경우 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="c1f045702ea4da181894894d719dc7571a2ba4e1" translate="yes" xml:space="preserve">
          <source>This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt;.</source>
          <target state="translated">This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c184cfb934c9b738977c32837985d21a951b41c" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt;&lt;code&gt;dns.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">이 유형의 레코드에는 &lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt; &lt;code&gt;dns.resolveTxt()&lt;/code&gt; &lt;/a&gt; 를 참조하는 &lt;code&gt;entries&lt;/code&gt; 이라는 배열 속성이 포함되어 있습니다 ( 예 : &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6eeca1c2f00a4310890a7139dcfe6a2e6c8c965b" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt;&lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">이 유형의 레코드에는 &lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt; &lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt; &lt;/a&gt; 를 참조하는 &lt;code&gt;entries&lt;/code&gt; 이라는 배열 속성이 포함되어 있습니다 ( 예 : &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fe3642f2b14cc07a05a25a58a28addaf29cbab1" translate="yes" xml:space="preserve">
          <source>This use of the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module in the REPL has these side effects:</source>
          <target state="translated">의이 사용하는 &lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt; REPL에서 모듈은 이러한 부작용이 :</target>
        </trans-unit>
        <trans-unit id="aba8179089db1922508405d8b782dab836cca61d" translate="yes" xml:space="preserve">
          <source>This value is also available as &lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt;&lt;code&gt;buffer.kMaxLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 값은 &lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt; &lt;code&gt;buffer.kMaxLength&lt;/code&gt; &lt;/a&gt; 로도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1960fefc47eea7af53d2386124418b76d027b6f6" translate="yes" xml:space="preserve">
          <source>This value may depend on the JS engine that is being used.</source>
          <target state="translated">이 값은 사용중인 JS 엔진에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1786c62ca4014aae9c8daf35face4f14af3bb962" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a88498e969bb560f2877e63299e4b7964f93ae3a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_exports&quot;&gt;&lt;code&gt;exports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_exports&quot;&gt; &lt;code&gt;exports&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="12ae6d48315f5836aaba96e8fe5033389f67632a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_filename&quot;&gt;&lt;code&gt;__filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_filename&quot;&gt; &lt;code&gt;__filename&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d045d7bbd376d894aa22ac1819fb6f7283f644a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_module&quot;&gt; &lt;code&gt;module&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0714b1ea5c5b147147404c53c9c7ea1c9d011bd2" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 변수는 전역 변수 인 것처럼 보이지만 그렇지 않습니다. &lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7388904d6f49c90b401aa690cef27c57e52dd479" translate="yes" xml:space="preserve">
          <source>This was an undocumented helper function not intended for use outside Node.js core and obsoleted by the removal of NPN (Next Protocol Negotiation) support.</source>
          <target state="translated">이것은 문서화되지 않은 도우미 기능으로 Node.js 코어 외부에서 사용하도록 설계되지 않았으며 NPN (Next Protocol Negotiation) 지원 제거로 폐기되었습니다.</target>
        </trans-unit>
        <trans-unit id="ce2a6d546b034160617c687e3f2691f4eb71b066" translate="yes" xml:space="preserve">
          <source>This was never a documented feature.</source>
          <target state="translated">이것은 문서화 된 기능이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="946c9714458dbb894196ffd1f153f59f0b8d6c98" translate="yes" xml:space="preserve">
          <source>This will ensure that the per-addon-instance data reaches each binding that can be called from JavaScript. The per-addon-instance data must also be passed into any asynchronous callbacks the addon may create.</source>
          <target state="translated">이렇게하면 인스턴스 별 데이터가 JavaScript에서 호출 할 수있는 각 바인딩에 도달 할 수 있습니다. 애드온 인스턴스 데이터는 애드온이 생성 할 수있는 비동기 콜백에도 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="110650dd72d6d2fde8d01c7a0259236b0dc7296b" translate="yes" xml:space="preserve">
          <source>This will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid.</source>
          <target state="translated">다른 에러 발생 상황 (예 : 입력 데이터의 형식이 잘못된 경우)의 동작은 변경되지 않습니다. 이 방법을 사용하면 입력이 조기에 종료되었는지 또는 무결성 검사가 부족한지 여부를 판단 할 수 없으므로 압축 해제 결과가 유효한지 수동으로 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="d25a5d904dfe4b2d558d89e8b007b3cb884783fb" translate="yes" xml:space="preserve">
          <source>This will not work because the callback function passed to &lt;code&gt;fs.readFile()&lt;/code&gt; is called asynchronously. By the time the callback has been called, the surrounding code, including the &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; block, will have already exited. Throwing an error inside the callback &lt;strong&gt;can crash the Node.js process&lt;/strong&gt; in most cases. If &lt;a href=&quot;domain&quot;&gt;domains&lt;/a&gt; are enabled, or a handler has been registered with &lt;code&gt;process.on('uncaughtException')&lt;/code&gt;, such errors can be intercepted.</source>
          <target state="translated">&lt;code&gt;fs.readFile()&lt;/code&gt; 전달 된 콜백 함수 가 비동기 적으로 호출 되기 때문에 작동하지 않습니다 . 콜백이 호출 될 때 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 블록을 포함한 주변 코드 가 이미 종료되었습니다. 콜백 내에 오류 &lt;strong&gt;가 발생하면&lt;/strong&gt; 대부분의 경우 &lt;strong&gt;Node.js 프로세스가 중단 될 수 있습니다&lt;/strong&gt; . 경우 &lt;a href=&quot;domain&quot;&gt;도메인이&lt;/a&gt; 활성화되어, 또는 핸들러가 등록되어 &lt;code&gt;process.on('uncaughtException')&lt;/code&gt; , 이러한 오류를 가로 챌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b97a9813dd547ff5a18b92d60ea9c7c60a244fb" translate="yes" xml:space="preserve">
          <source>This will opt into the default &lt;code&gt;NAPI_VERSION&lt;/code&gt; for the given release of Node.js. In order to ensure compatibility with specific versions of N-API, the version can be specified explicitly when including the header:</source>
          <target state="translated">지정된 Node.js 릴리스에 대해 기본 &lt;code&gt;NAPI_VERSION&lt;/code&gt; 을 선택합니다. 특정 버전의 N-API와의 호환성을 보장하기 위해 헤더를 포함 할 때 버전을 명시 적으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2caba2077af1acf81bcaf212679d9efc23f7b46" translate="yes" xml:space="preserve">
          <source>This will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.</source>
          <target state="translated">This will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.</target>
        </trans-unit>
        <trans-unit id="03b61b4fd778d330c4d9ae04ee169c3836b77a3e" translate="yes" xml:space="preserve">
          <source>This will, however, generally degrade compression.</source>
          <target state="translated">그러나 이것은 일반적으로 압축을 저하시킵니다.</target>
        </trans-unit>
        <trans-unit id="898d4d4c37da591f1dbaea989ea4b845e4eb4dcd" translate="yes" xml:space="preserve">
          <source>This would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope.</source>
          <target state="translated">이로 인해 많은 수의 핸들이 생성되어 상당한 리소스를 소비하게됩니다. 또한 네이티브 코드는 가장 최근의 핸들 만 사용할 수 있지만 모든 관련 개체는 모두 동일한 범위를 공유하므로 살아있는 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="d467439a515ceca23a9a5fc18245fc89bdccd935" translate="yes" xml:space="preserve">
          <source>Though the call to &lt;code&gt;dns.lookup()&lt;/code&gt; will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; that runs on libuv's threadpool. This can have surprising negative performance implications for some applications, see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">&lt;code&gt;dns.lookup()&lt;/code&gt; 대한 호출 은 JavaScript의 관점에서 비동기식 이지만 libuv의 스레드 풀에서 실행되는 &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt; 대한 동기식 호출로 구현됩니다 . 이는 일부 응용 프로그램에 놀라운 성능 영향을 미칠 수 있습니다 . 자세한 내용 은 &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bf8b9bcd61ac02e20b1f70392f83be7f64e30820" translate="yes" xml:space="preserve">
          <source>Threadpool Usage</source>
          <target state="translated">스레드 풀 사용법</target>
        </trans-unit>
        <trans-unit id="194378c3031d5f4c91d972a4e5fae3797161a3bf" translate="yes" xml:space="preserve">
          <source>Threadpool usage</source>
          <target state="translated">Threadpool usage</target>
        </trans-unit>
        <trans-unit id="5b84236df57d6e40394ff631a8881c1eb98f55ef" translate="yes" xml:space="preserve">
          <source>Threadpool usage and performance considerations</source>
          <target state="translated">Threadpool usage and performance considerations</target>
        </trans-unit>
        <trans-unit id="4c31834fd4f46e0567ccae1bc9794a97e2ef2ae6" translate="yes" xml:space="preserve">
          <source>Threads can be added to and removed from a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; object during its existence. Thus, in addition to specifying an initial number of threads upon creation, &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; can be called to indicate that an existing thread will stop making use of the thread-safe function.</source>
          <target state="translated">스레드는 존재하는 동안 &lt;code&gt;napi_threadsafe_function&lt;/code&gt; 오브젝트에 추가 및 제거 될 수 있습니다 . 따라서 생성시 초기 스레드 수를 지정하는 것 외에도 새 스레드가 스레드 안전 기능을 사용하기 시작한다는 것을 나타 내기 위해 &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; 을 호출 할 수 있습니다. 마찬가지로 &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; 을 호출하여 기존 스레드가 스레드 안전 기능의 사용을 중지 함을 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd491a1a20798b4f3eab7ca47ce9cde3c1a3f963" translate="yes" xml:space="preserve">
          <source>Three States</source>
          <target state="translated">삼국</target>
        </trans-unit>
        <trans-unit id="6e9c26957242e69ce7b5e779efca06887090978a" translate="yes" xml:space="preserve">
          <source>Three states</source>
          <target state="translated">Three states</target>
        </trans-unit>
        <trans-unit id="e50789f4c54d6872bdd31a68fcda1c02e644ea74" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;모듈 찾을 수 없음&lt;/em&gt; 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="3c2047ffcc9c1f89b1e17b907380a299308c953e" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="157fa426a458f5a47aca54e42c4db7bded9d4f50" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="8170c71e55e480b36becd3a8bdae44cd43c0144e" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="df6f0a31b4716ff39675671a8367ef62be40d012" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Package Configuration&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;잘못된 패키지 구성의&lt;/em&gt; 오류입니다.</target>
        </trans-unit>
        <trans-unit id="a78220df6c48d2fb08d8df29384d6309dc62e9a0" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Specifier&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;잘못된 지정자의&lt;/em&gt; 오류입니다.</target>
        </trans-unit>
        <trans-unit id="14508f1d752fa9f1a58cf9aef8de034062c7fcf3" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="c6b845975caf9cd24e6a6a64484cf34be9a5885d" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported File Extension&lt;/em&gt; error.</source>
          <target state="translated">던져 &lt;em&gt;지원되지 않는 파일 확장&lt;/em&gt; 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="274bb320296e78e649774ab7cf14c8bffcb9c969" translate="yes" xml:space="preserve">
          <source>Throw errors for deprecations.</source>
          <target state="translated">지원 중단에 대한 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="ca7b995e33945e66abe60ea39498a0102ea95fab" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide a valid value for one of its returned object properties on execution.</source>
          <target state="translated">함수 옵션이 실행시 리턴 된 오브젝트 특성 중 하나에 유효한 값을 제공하지 않는 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e035afeae4a1775ec604c8b5d8f677f77e629c2f" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide an expected value type for one of its returned object properties on execution.</source>
          <target state="translated">함수 옵션이 실행시 리턴 된 오브젝트 특성 중 하나에 대한 예상 값 유형을 제공하지 않는 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="500f81cca30019a552ab883030a9f388e713b7de" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not return an expected value type on execution, such as when a function is expected to return a promise.</source>
          <target state="translated">함수가 약속을 반환 할 것으로 예상되는 경우와 같이 함수 옵션이 실행시 예상 값 유형을 반환하지 않는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5ad63a3ff43abbab909982b69d4d78b65b2aafab" translate="yes" xml:space="preserve">
          <source>Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c9dfd60d599c5257e4849241e700802dc509d8e" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; instead of &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; 대신 &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; 은 .</target>
        </trans-unit>
        <trans-unit id="1f533babc33348b6d3fb4950583edc945f148749" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;value&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. This is useful when testing the &lt;code&gt;error&lt;/code&gt; argument in callbacks. The stack trace contains all frames from the error passed to &lt;code&gt;ifError()&lt;/code&gt; including the potential new frames for &lt;code&gt;ifError()&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 되지 않았 거나 &lt;code&gt;null&lt;/code&gt; 인 경우 값을 throw &lt;code&gt;value&lt;/code&gt; . 콜백 에서 &lt;code&gt;error&lt;/code&gt; 인수를 테스트 할 때 유용합니다 . 스택 추적에는 &lt;code&gt;ifError()&lt;/code&gt; 자체 의 잠재적 인 새 프레임을 포함하여 &lt;code&gt;ifError()&lt;/code&gt; 전달 된 오류의 모든 프레임이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="1d293028683a03e7c8565aef633c4bd64df69e5d" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;SystemError&lt;/code&gt;&lt;/a&gt; if a user has no &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;homedir&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt; &lt;code&gt;SystemError&lt;/code&gt; 을&lt;/a&gt; 사용자가 더이없는 경우 &lt;code&gt;username&lt;/code&gt; 또는 &lt;code&gt;homedir&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb037643826c156fd10159ab0e43d2a4ebea39d9" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6ab0da4aef65302e8e7125139145d3ae9207952c" translate="yes" xml:space="preserve">
          <source>Throws an &lt;code&gt;AssertionError&lt;/code&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;code&gt;AssertionError&lt;/code&gt; 를 제공된 오류 메시지 또는 기본 오류 메시지를. 경우 &lt;code&gt;message&lt;/code&gt; 매개 변수가의 인스턴스 &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 다음은 대신의 슬로우됩니다 &lt;code&gt;AssertionError&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="0f221650e50054f81fe163161fb94d86584723cb" translate="yes" xml:space="preserve">
          <source>Throws if the &lt;code&gt;fromEnc&lt;/code&gt; or &lt;code&gt;toEnc&lt;/code&gt; specify invalid character encodings or if conversion from &lt;code&gt;fromEnc&lt;/code&gt; to &lt;code&gt;toEnc&lt;/code&gt; is not permitted.</source>
          <target state="translated">경우 예외 &lt;code&gt;fromEnc&lt;/code&gt; 또는 &lt;code&gt;toEnc&lt;/code&gt; 가 에서 변환 경우 잘못된 문자 인코딩을 지정하거나 &lt;code&gt;fromEnc&lt;/code&gt; 에 &lt;code&gt;toEnc&lt;/code&gt; 이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="60660bb221304e5fad9ca2c2dd92e7d7c409ce60" translate="yes" xml:space="preserve">
          <source>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.</source>
          <target state="translated">따라서주기가 발생하거나 종속성 충돌이 발생하더라도 모든 모듈은 사용할 수있는 종속성 버전을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f395da331ca8317cd167d68da7aed50270080a44" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must make use exclusively of N-API by restricting itself to using</source>
          <target state="translated">따라서 Addon이 Node.js 메이저 버전에서 ABI와 호환되는 상태를 유지하려면 사용 자체를 제한하여 N-API 만 독점적으로 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="112c3024c3d7912fd57cd8ebb68639fc60c09698" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must use N-API exclusively by restricting itself to using</source>
          <target state="translated">Thus, for an addon to remain ABI-compatible across Node.js major versions, it must use N-API exclusively by restricting itself to using</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="551d6adf37a9cb1b523706676a5c3aab5b5fcb93" translate="yes" xml:space="preserve">
          <source>Timeout interactions with asynchronous tasks and Promises</source>
          <target state="translated">Timeout interactions with asynchronous tasks and Promises</target>
        </trans-unit>
        <trans-unit id="ca7f027cfebdbd1cfd15712b89e96328bae876ed" translate="yes" xml:space="preserve">
          <source>Timeout limitations when using process.nextTick(), Promises, and queueMicrotask()</source>
          <target state="translated">process.nextTick (), Promises 및 queueMicrotask () 사용시 제한 시간 제한</target>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="f7391e8fca236efbdf30a41b1765e03b0aedeea8" translate="yes" xml:space="preserve">
          <source>To access it:</source>
          <target state="translated">To access it:</target>
        </trans-unit>
        <trans-unit id="2f285c5caf3395120404e2b15ef1afaae7633a15" translate="yes" xml:space="preserve">
          <source>To access the &lt;code&gt;stream&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; 모듈에 액세스하려면</target>
        </trans-unit>
        <trans-unit id="113093009a6693093866588b6702951e8ef8612a" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with POSIX file paths on any operating system, use &lt;a href=&quot;#path_path_posix&quot;&gt;&lt;code&gt;path.posix&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">운영 체제에서 POSIX 파일 경로로 작업 할 때 일관된 결과를 얻으려면 &lt;a href=&quot;#path_path_posix&quot;&gt; &lt;code&gt;path.posix&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="89017d2ede47b0785d45ee78f6f27262e118a2db" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with Windows file paths on any operating system, use &lt;a href=&quot;#path_path_win32&quot;&gt;&lt;code&gt;path.win32&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">모든 운영 체제에서 Windows 파일 경로로 작업 할 때 일관된 결과를 얻으려면 &lt;a href=&quot;#path_path_win32&quot;&gt; &lt;code&gt;path.win32&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b45c1d802e95d3410405265dfd8e4d44f4dbfd27" translate="yes" xml:space="preserve">
          <source>To add the method &lt;code&gt;hello&lt;/code&gt; as a function so that it can be called as a method provided by the addon:</source>
          <target state="translated">addon에서 제공하는 메소드로 호출 할 수 있도록 &lt;code&gt;hello&lt;/code&gt; 메소드를 함수로 추가하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="81c0394f49db892821115b54c6eb0edd5cc1ba09" translate="yes" xml:space="preserve">
          <source>To be notified when the file was modified, not just accessed, it is necessary to compare &lt;code&gt;curr.mtime&lt;/code&gt; and &lt;code&gt;prev.mtime&lt;/code&gt;.</source>
          <target state="translated">액세스 한 것이 아니라 파일이 수정되었을 때 알림을 &lt;code&gt;curr.mtime&lt;/code&gt; 과 &lt;code&gt;prev.mtime&lt;/code&gt; 을 비교해야합니다 .</target>
        </trans-unit>
        <trans-unit id="817d0bb7fcad591dfad28392604533ca026ba506" translate="yes" xml:space="preserve">
          <source>To be used in conjunction with &lt;code&gt;--experimental-modules&lt;/code&gt;. Sets the resolution algorithm for resolving specifiers. Valid options are &lt;code&gt;explicit&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; 와 함께 사용 합니다 . 지정자를 해결하기위한 해상도 알고리즘을 설정합니다. 유효한 옵션은 &lt;code&gt;explicit&lt;/code&gt; 및 &lt;code&gt;node&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f8a3354dac48c927a38f89348c115a2d20de7cf0" translate="yes" xml:space="preserve">
          <source>To begin watching an expression, type &lt;code&gt;watch('my_expression')&lt;/code&gt;. The command &lt;code&gt;watchers&lt;/code&gt; will print the active watchers. To remove a watcher, type &lt;code&gt;unwatch('my_expression')&lt;/code&gt;.</source>
          <target state="translated">식을보기 시작하려면 &lt;code&gt;watch('my_expression')&lt;/code&gt; 을 입력하십시오 . &lt;code&gt;watchers&lt;/code&gt; 명령 은 활성 감시자를 인쇄합니다. 감시자를 제거하려면 &lt;code&gt;unwatch('my_expression')&lt;/code&gt; 을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a0304f4e61d19a2c2ac88f8d7fae8f457554b26" translate="yes" xml:space="preserve">
          <source>To break on the first line of the application code, pass the &lt;code&gt;--inspect-brk&lt;/code&gt; flag instead of &lt;code&gt;--inspect&lt;/code&gt;.</source>
          <target state="translated">응용 프로그램 코드의 첫 번째 줄에 중단하려면 통과 &lt;code&gt;--inspect-brk&lt;/code&gt; 대신 플래그 &lt;code&gt;--inspect&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="22dfb32e7c28d8dcaa05c55a622e6cdce176c30b" translate="yes" xml:space="preserve">
          <source>To build this example, the &lt;code&gt;myobject.cc&lt;/code&gt; file must be added to the &lt;code&gt;binding.gyp&lt;/code&gt;:</source>
          <target state="translated">이 예제를 빌드하려면 &lt;code&gt;myobject.cc&lt;/code&gt; 파일을 &lt;code&gt;binding.gyp&lt;/code&gt; 에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="cb2546fbdf0da09b297499ea21ca759167d5daca" translate="yes" xml:space="preserve">
          <source>To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt;, &lt;code&gt;Promise.race()&lt;/code&gt;, or &lt;code&gt;Promise.allSettled()&lt;/code&gt;:</source>
          <target state="translated">To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt; , &lt;code&gt;Promise.race()&lt;/code&gt; , or &lt;code&gt;Promise.allSettled()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="257192fca64c7e5ef4beea84df13594a588d02bf" translate="yes" xml:space="preserve">
          <source>To change the default timeout use the &lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt;&lt;code&gt;--http-server-default-timeout&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">기본 시간 초과를 변경하려면 &lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt; &lt;code&gt;--http-server-default-timeout&lt;/code&gt; &lt;/a&gt; 플래그를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="83bf60ee112d40f394c9009468f70ac11d5c5c03" translate="yes" xml:space="preserve">
          <source>To check for support for a non-English locale (i.e. &lt;code&gt;full-icu&lt;/code&gt; or &lt;code&gt;system-icu&lt;/code&gt;), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; can be a good distinguishing factor:</source>
          <target state="translated">영어 이외의 로케일 (예 : &lt;code&gt;full-icu&lt;/code&gt; 또는 &lt;code&gt;system-icu&lt;/code&gt; )에 대한 지원을 확인하려면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt; 이 좋은 구별 요인이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f9ed209f8f372fe4035b55216331b230379fdb5" translate="yes" xml:space="preserve">
          <source>To check if a file exists without manipulating it afterwards, &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">나중에 파일을 조작하지 않고 파일이 존재하는지 확인하려면 &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="72931344905502cc560ea0d63014dbb48946d73e" translate="yes" xml:space="preserve">
          <source>To check if a stream is connected to a &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; context, check the &lt;code&gt;isTTY&lt;/code&gt; property.</source>
          <target state="translated">스트림이 &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; 컨텍스트에 연결되어 있는지 확인하려면 &lt;code&gt;isTTY&lt;/code&gt; 특성을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="84c7039869bdb8532ecd51ab012fbbe93984c08f" translate="yes" xml:space="preserve">
          <source>To configure any of them, a custom &lt;a href=&quot;#http_class_http_agent&quot;&gt;&lt;code&gt;http.Agent&lt;/code&gt;&lt;/a&gt; instance must be created.</source>
          <target state="translated">이들 중 하나를 구성하려면 사용자 정의 &lt;a href=&quot;#http_class_http_agent&quot;&gt; &lt;code&gt;http.Agent&lt;/code&gt; &lt;/a&gt; 인스턴스를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="d69007751c2a41a54e8aeb848a171b7cce6a5036" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the second line would just be changed to:</source>
          <target state="translated">소켓 &lt;code&gt;/tmp/echo.sock&lt;/code&gt; 에 연결하려면 두 번째 줄은 다음과 같이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="13ba3f87d486426a67fdfd4e20f95fec780e8f03" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f0a6196d20446e42af34618037ad4de017d40178" translate="yes" xml:space="preserve">
          <source>To control how ICU is used in Node.js, four &lt;code&gt;configure&lt;/code&gt; options are available during compilation. Additional details on how to compile Node.js are documented in &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;.</source>
          <target state="translated">Node.js에서 ICU를 사용하는 방법을 제어하기 위해 컴파일 중에 네 가지 &lt;code&gt;configure&lt;/code&gt; 옵션을 사용할 수 있습니다. Node.js를 컴파일하는 방법에 대한 추가 세부 사항은 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.md에&lt;/a&gt; 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="67c2ffbe92be0f9b51c9a83a429725a64f6213f9" translate="yes" xml:space="preserve">
          <source>To correctly order the operations, move the &lt;code&gt;fs.stat()&lt;/code&gt; call into the callback of the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">작업을 올바르게 정렬하려면 &lt;code&gt;fs.stat()&lt;/code&gt; 호출을 &lt;code&gt;fs.rename()&lt;/code&gt; 작업 의 콜백으로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="f0520e0374ec9ffcd9c6cf5ec0d679283c3270e7" translate="yes" xml:space="preserve">
          <source>To create a custom dynamic module that doesn't correspond to one of the existing &lt;code&gt;format&lt;/code&gt; interpretations, the &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook can be used. This hook is called only for modules that return &lt;code&gt;format: 'dynamic'&lt;/code&gt; from the &lt;code&gt;resolve&lt;/code&gt; hook.</source>
          <target state="translated">기존 &lt;code&gt;format&lt;/code&gt; 해석 중 하나와 일치하지 않는 사용자 정의 동적 모듈을 작성하기 위해 &lt;code&gt;dynamicInstantiate&lt;/code&gt; 후크를 사용할 수 있습니다. 이 후크는 &lt;code&gt;resolve&lt;/code&gt; 브 후크 에서 &lt;code&gt;format: 'dynamic'&lt;/code&gt; 을 반환하는 모듈에 대해서만 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="8e176982d3949a6fa8a4834a7abff97fa762f0cb" translate="yes" xml:space="preserve">
          <source>To create custom messaging channels (which is encouraged over using the default global channel because it facilitates separation of concerns), users can create a &lt;code&gt;MessageChannel&lt;/code&gt; object on either thread and pass one of the &lt;code&gt;MessagePort&lt;/code&gt;s on that &lt;code&gt;MessageChannel&lt;/code&gt; to the other thread through a pre-existing channel, such as the global one.</source>
          <target state="translated">(이 문제의 분리를 용이하게하기 때문에 기본 글로벌 채널을 사용하여 이상 권장하는) 채널을 메시징 사용자 정의 만들려면 사용자가 만들 수 있습니다 &lt;code&gt;MessageChannel&lt;/code&gt; 의 두 스레드에서 개체를하고 중 하나에 합격 &lt;code&gt;MessagePort&lt;/code&gt; 그에들 &lt;code&gt;MessageChannel&lt;/code&gt; 사전 -을 통해 다른 스레드에 글로벌 채널과 같은 기존 채널</target>
        </trans-unit>
        <trans-unit id="1a3b265855273805adaa9745965d95cb45ba31be" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</target>
        </trans-unit>
        <trans-unit id="42c2ed95d362ac6e310208df03daab20b4ae57a0" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">기본 모듈 해상도를 사용자 정의하기 위해 &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; 인수를 통해 Node.js에 로더 후크를 선택적으로 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="152f25ba7578f4f82f7a056c9eb04659230b3677" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variable. This will also deactivate the colors in the REPL.</source>
          <target state="translated">색상을 비활성화하려면 &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; 환경 변수를 사용하십시오 . 또한 REPL에서 색상이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="f63281065a3a3689c14d9466b15bbe449245428a" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</source>
          <target state="translated">To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</target>
        </trans-unit>
        <trans-unit id="ee22bab1313bf7a33041e942c66c0625221d4e94" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrap&lt;/a&gt;):</source>
          <target state="translated">새 인스턴스를 만들 수 있도록 클래스를 정의하려면 (종종 &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrap&lt;/a&gt; 과 함께 사용 ) :</target>
        </trans-unit>
        <trans-unit id="ed68c74bf87981629a008b2e07694c150206ebab" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object wrap&lt;/a&gt;):</source>
          <target state="translated">To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object wrap&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="652b902ed0de8270b9fb62fc619759f8ad4b57a9" translate="yes" xml:space="preserve">
          <source>To enforce a specific color support, use one of the below environment settings.</source>
          <target state="translated">특정 색상 지원을 시행하려면 아래 환경 설정 중 하나를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="563ac46b64bfdec1cb057f5366a2341549beff68" translate="yes" xml:space="preserve">
          <source>To ensure that the pointer retrieved from the first argument is indeed a pointer to a database handle and, similarly, that the pointer retrieved from the second argument is indeed a pointer to a query handle, the implementation of &lt;code&gt;queryHasRecords()&lt;/code&gt; has to perform a type validation. Retaining the JavaScript class constructor from which the database handle was instantiated and the constructor from which the query handle was instantiated in &lt;code&gt;napi_ref&lt;/code&gt;s can help, because &lt;code&gt;napi_instanceof()&lt;/code&gt; can then be used to ensure that the instances passed into &lt;code&gt;queryHashRecords()&lt;/code&gt; are indeed of the correct type.</source>
          <target state="translated">To ensure that the pointer retrieved from the first argument is indeed a pointer to a database handle and, similarly, that the pointer retrieved from the second argument is indeed a pointer to a query handle, the implementation of &lt;code&gt;queryHasRecords()&lt;/code&gt; has to perform a type validation. Retaining the JavaScript class constructor from which the database handle was instantiated and the constructor from which the query handle was instantiated in &lt;code&gt;napi_ref&lt;/code&gt; s can help, because &lt;code&gt;napi_instanceof()&lt;/code&gt; can then be used to ensure that the instances passed into &lt;code&gt;queryHashRecords()&lt;/code&gt; are indeed of the correct type.</target>
        </trans-unit>
        <trans-unit id="c55f753794b1f35b9fdcfce66da0b9225f594ed1" translate="yes" xml:space="preserve">
          <source>To exit with a 'failure' code:</source>
          <target state="translated">'실패'코드로 종료하려면 :</target>
        </trans-unit>
        <trans-unit id="ba26739dd8d319b8071919705bb005ee5baa56d8" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;.</source>
          <target state="translated">쿼리 문자열에서 매개 변수를 추출하려면 &lt;code&gt;require('querystring').parse&lt;/code&gt; 함수를 사용하거나 &lt;code&gt;require('url').parse&lt;/code&gt; 의 두 번째 인수로 &lt;code&gt;true&lt;/code&gt; 를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5727ff4630ff91a10fefc92eb21eadd2192abbee" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;:</source>
          <target state="translated">쿼리 문자열에서 매개 변수를 추출하려면 &lt;code&gt;require('querystring').parse&lt;/code&gt; 함수를 사용하거나 &lt;code&gt;require('url').parse&lt;/code&gt; 의 두 번째 인수로 &lt;code&gt;true&lt;/code&gt; 를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3fefe10ff6dde1978c8f6041595748b6a6792d9d" translate="yes" xml:space="preserve">
          <source>To fully customize the output of a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance pass in a new function for the &lt;code&gt;writer&lt;/code&gt; option on construction. The following example, for instance, simply converts any input text to upper case:</source>
          <target state="translated">&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt; 인스턴스 의 출력을 완전히 사용자 정의하려면 구성시 &lt;code&gt;writer&lt;/code&gt; 옵션에 대한 새 기능을 전달하십시오 . 예를 들어 다음 예제는 입력 텍스트를 대문자로 간단히 변환합니다.</target>
        </trans-unit>
        <trans-unit id="f82f342e2108d2b1a12ccbbfb5e1444bf37c6bd0" translate="yes" xml:space="preserve">
          <source>To generate integrity strings, a script such as &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; can be used.</source>
          <target state="translated">무결성 문자열을 생성하기 위해 &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; 와 같은 스크립트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad9bff9dfa86ac3f581dc9a1a87860cd6b7f4e57" translate="yes" xml:space="preserve">
          <source>To generate the certificate and key for this example, run:</source>
          <target state="translated">이 예제의 인증서와 키를 생성하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="69f64fd3b92ea07f26cf029da8688a34b5e1c399" translate="yes" xml:space="preserve">
          <source>To get the exact filename that will be loaded when &lt;code&gt;require()&lt;/code&gt; is called, use the &lt;code&gt;require.resolve()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; 가 호출 될 때로드 될 정확한 파일 이름을 얻으려면 &lt;code&gt;require.resolve()&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ff57305218fef61e7a1c5f3ae88348b43634dfe" translate="yes" xml:space="preserve">
          <source>To get the response, add a listener for &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; to the request object. &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; will be emitted from the request object when the response headers have been received. The &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event is executed with one argument which is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응답을 얻으려면 요청 오브젝트 에 &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 에 대한 리스너를 추가하십시오 . 응답 헤더가 수신되면 요청 오브젝트에서 &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 이 생성됩니다. &lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt; 이벤트의 인스턴스 하나 개 인수 실행 &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="044ebf34f23de583098254e8634e645a39e8143c" translate="yes" xml:space="preserve">
          <source>To get the string representation of the error code, use &lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt;&lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">To get the string representation of the error code, use &lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt; &lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="901383fa9c06c6cbf4f565534c4023b071c8fa19" translate="yes" xml:space="preserve">
          <source>To get the version string without the prepended &lt;em&gt;v&lt;/em&gt;, use &lt;code&gt;process.versions.node&lt;/code&gt;.</source>
          <target state="translated">To get the version string without the prepended &lt;em&gt;v&lt;/em&gt;, use &lt;code&gt;process.versions.node&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6aa20aefae1fe619888a9d19f8166927723ea251" translate="yes" xml:space="preserve">
          <source>To guard against crashing the Node.js process the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module can be used. (Note, however, that the &lt;code&gt;domain&lt;/code&gt; module is deprecated.)</source>
          <target state="translated">Node.js 프로세스의 충돌을 막기 위해 &lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt; 모듈을 사용할 수 있습니다. 그러나 &lt;code&gt;domain&lt;/code&gt; 모듈은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a3925d0a0110a53c1988b899e2668ed5402b3d3" translate="yes" xml:space="preserve">
          <source>To handle the errors that it catches, listen to its &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">발견 한 오류를 처리하려면 &lt;code&gt;'error'&lt;/code&gt; 이벤트를 수신하십시오.</target>
        </trans-unit>
        <trans-unit id="9c953e56d44954a70f8f7788b1edcd731a0e9806" translate="yes" xml:space="preserve">
          <source>To handle this case, N-API provides the ability to establish a new 'scope' to which newly created handles will be associated. Once those handles are no longer required, the scope can be 'closed' and any handles associated with the scope are invalidated. The methods available to open/close scopes are &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 경우를 처리하기 위해 N-API는 새로 만든 핸들을 연결할 새로운 '범위'를 설정하는 기능을 제공합니다. 해당 핸들이 더 이상 필요하지 않으면 범위를 '닫을'수 있고 범위와 연관된 핸들이 무효화됩니다. 범위를 열고 닫을 수있는 방법은 &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt; &lt;code&gt;napi_open_handle_scope&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt; &lt;code&gt;napi_close_handle_scope&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8ae9fb9267ffb10903bb86fc63715f4cd0cfcaaf" translate="yes" xml:space="preserve">
          <source>To have a module execute code multiple times, export a function, and call that function.</source>
          <target state="translated">모듈이 코드를 여러 번 실행하도록하려면 함수를 내보내고 해당 함수를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="56b15cec207bf8e8429b8350d22d585ee8bda635" translate="yes" xml:space="preserve">
          <source>To illustrate the behavior, imagine this hypothetical implementation of &lt;code&gt;require()&lt;/code&gt;, which is quite similar to what is actually done by &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">동작을 설명하기 위해 &lt;code&gt;require()&lt;/code&gt; 의 가상 구현 이 실제로 &lt;code&gt;require()&lt;/code&gt; 의해 수행되는 것과 매우 유사하다고 상상해보십시오 .</target>
        </trans-unit>
        <trans-unit id="d68e5b68a41d9794b3e7248a2d7f36459e1a791e" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import-expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CommonJS에 ES 모듈을 포함 시키려면 &lt;a href=&quot;#esm_import-expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d089308ad7fa8608dc856e8dfd0c999ca3ce0d66" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import_expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CommonJS에 ES 모듈을 포함하려면 &lt;a href=&quot;#esm_import_expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="652a3cd9523950c5d1acf707c7efb8f626e43774" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the third line from the last would just be changed to:</source>
          <target state="translated">소켓 &lt;code&gt;/tmp/echo.sock&lt;/code&gt; 에서 청취하려면 마지막 행의 세 번째 행을 다음과 같이 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="4902deed6b5f58c97833c40362dfd51cfd1113c3" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">소켓 &lt;code&gt;/tmp/echo.sock&lt;/code&gt; 에서 수신하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="21739c6890c2acc4bdec505b9f422fb0e996afe2" translate="yes" xml:space="preserve">
          <source>To maintain existing behaviour &lt;code&gt;response.finished&lt;/code&gt; should be replaced with &lt;code&gt;response.writableEnded&lt;/code&gt;.</source>
          <target state="translated">기존 동작 유지하기 위해 &lt;code&gt;response.finished&lt;/code&gt; 로 대체해야 &lt;code&gt;response.writableEnded&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="3e10d026ab12717e40d75bbfd814a562f51e4156" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 인스턴스를보다 안정적으로 작성 하고 오류가 발생 하기 쉽도록 &lt;code&gt;new Buffer()&lt;/code&gt; 생성자 의 다양한 형식 이 &lt;strong&gt;더 이상 사용되지&lt;/strong&gt; 않고 별도의 &lt;code&gt;Buffer.from()&lt;/code&gt; , &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 로 대체되었습니다. 행동 양식.</target>
        </trans-unit>
        <trans-unit id="eb5ae203366178adec792f09dee66772cb19c68f" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">의 생성하려면 &lt;code&gt;Buffer&lt;/code&gt; 믿을 수 있고 적은 오류가 발생하기 쉬운 인스턴스를,의 다양한 형태의 &lt;code&gt;new Buffer()&lt;/code&gt; 생성자는 한 &lt;strong&gt;사용되지 않는&lt;/strong&gt; 별도의 대체 &lt;code&gt;Buffer.from()&lt;/code&gt; , &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 행동 양식.</target>
        </trans-unit>
        <trans-unit id="3e7d1841b070660f5e124c6d0b0e5f09de0a3865" translate="yes" xml:space="preserve">
          <source>To mitigate tampering with policy files on disk, an integrity for the policy file itself may be provided via &lt;code&gt;--policy-integrity&lt;/code&gt;. This allows running &lt;code&gt;node&lt;/code&gt; and asserting the policy file contents even if the file is changed on disk.</source>
          <target state="translated">디스크에서 정책 파일의 무단 변경을 완화하기 위해 &lt;code&gt;--policy-integrity&lt;/code&gt; 를 통해 정책 파일 자체의 무결성을 제공 할 수 있습니다 . 이를 통해 파일이 디스크에서 변경 되더라도 &lt;code&gt;node&lt;/code&gt; 실행 하고 정책 파일 내용을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a99036e7fc6f4dd433ceb4a4d4fe866ee586c79" translate="yes" xml:space="preserve">
          <source>To mitigate the risk, renegotiation is limited to three times every ten minutes. An &lt;code&gt;'error'&lt;/code&gt; event is emitted on the &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instance when this threshold is exceeded. The limits are configurable:</source>
          <target state="translated">위험을 완화하기 위해 재협상은 10 분마다 3 번으로 제한됩니다. &lt;code&gt;'error'&lt;/code&gt; 이벤트가에 출사 &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; 의&lt;/a&gt; 이 임계 값을 초과하는 경우 예. 한계는 구성 가능합니다.</target>
        </trans-unit>
        <trans-unit id="6bd92caa0dd0e220612d4509343caa388124bfc1" translate="yes" xml:space="preserve">
          <source>To nest &lt;code&gt;Domain&lt;/code&gt; objects as children of a parent &lt;code&gt;Domain&lt;/code&gt; they must be explicitly added.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; 개체를 부모 &lt;code&gt;Domain&lt;/code&gt; 자식으로 중첩하려면 명시 적으로 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="e8af107ea8ff0e7e34570ffa65be2ae9ff7ad82a" translate="yes" xml:space="preserve">
          <source>To parse the URL into its parts:</source>
          <target state="translated">URL을 해당 부분으로 구문 분석하려면 :</target>
        </trans-unit>
        <trans-unit id="3a3735245b8ad30f17b7512872187c1aa1d62b39" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; can be used:</source>
          <target state="translated">URL을 부분으로 구문 분석하려면 &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="773a385d557159d7209e8d59495c1d4ae2e640ae" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts, &lt;code&gt;new URL()&lt;/code&gt; can be used:</source>
          <target state="translated">URL을 해당 부분으로 구문 분석하려면 &lt;code&gt;new URL()&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c60e9cd07a257263fb8969b08ff3c393206c09af" translate="yes" xml:space="preserve">
          <source>To receive pushed streams on the client, set a listener for the &lt;code&gt;'stream'&lt;/code&gt; event on the &lt;code&gt;ClientHttp2Session&lt;/code&gt;:</source>
          <target state="translated">클라이언트에서 푸시 된 스트림을 수신하려면 &lt;code&gt;ClientHttp2Session&lt;/code&gt; 에서 &lt;code&gt;'stream'&lt;/code&gt; 이벤트에 대한 리스너를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="9fa7f2103554e2af5c33c5202941bd62a5133842" translate="yes" xml:space="preserve">
          <source>To restart a crashed application in a more reliable way, whether &lt;code&gt;'uncaughtException'&lt;/code&gt; is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.</source>
          <target state="translated">&lt;code&gt;'uncaughtException'&lt;/code&gt; 발생 여부에 관계없이보다 안정적인 방식으로 충돌 한 응용 프로그램을 다시 시작하려면 별도의 프로세스에서 외부 모니터를 사용하여 응용 프로그램 오류를 감지하고 필요에 따라 복구하거나 다시 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="f906fc2e9ed75535f0e33b7e1aaaf78e72fcf87b" translate="yes" xml:space="preserve">
          <source>To set a function to be returned by the &lt;code&gt;require()&lt;/code&gt; for the addon:</source>
          <target state="translated">addon에 대해 &lt;code&gt;require()&lt;/code&gt; 가 리턴 할 함수를 설정하려면 다음을 수행 하십시오.</target>
        </trans-unit>
        <trans-unit id="b4f2374e10f3a7eb6b83d547d6c57c17e364858d" translate="yes" xml:space="preserve">
          <source>To test it in JavaScript:</source>
          <target state="translated">JavaScript로 테스트하려면</target>
        </trans-unit>
        <trans-unit id="a0b29e9bbd29bf287a671314a5215366e894cdec" translate="yes" xml:space="preserve">
          <source>To test it, run the following JavaScript:</source>
          <target state="translated">테스트하려면 다음 JavaScript를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="80e061ad3871e4c5c14888dba30a6440671c5a6d" translate="yes" xml:space="preserve">
          <source>To test:</source>
          <target state="translated">테스트하려면 :</target>
        </trans-unit>
        <trans-unit id="4606c24e18a786400a447c1828c1a5df8796aaf7" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">이를 위해 N-API는 데이터를 할당하는 방법을 제공하여 데이터의 수명주기가 에이전트의 수명주기와 연결되도록합니다.</target>
        </trans-unit>
        <trans-unit id="86732a9994de407a5b4f9e7fdc6f58ff1d7808fa" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides type-tagging capabilities.</source>
          <target state="translated">이를 위해 N-API는 유형 태깅 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6e39ad99eeff4166287ae62024f1f20d4affe06b" translate="yes" xml:space="preserve">
          <source>To this env, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">이 환경에서 N-API는 수명주기가 에이전트의 수명주기와 연결되도록 데이터를 할당하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b5395666fc1a664a6eb308266e88f8f63adf53a4" translate="yes" xml:space="preserve">
          <source>To unset the capture function, &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; may be used. Calling this method with a non-&lt;code&gt;null&lt;/code&gt; argument while another capture function is set will throw an error.</source>
          <target state="translated">캡처 기능을 설정 해제하기 위해 &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; 사용할 수 있습니다. 다른 캡처 함수가 설정되어있는 동안 &lt;code&gt;null&lt;/code&gt; 이 아닌 인수 로이 메소드를 호출 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="012fe7e6f8e20a96385f534d6d6e01f2918b08c3" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;strict&lt;/code&gt; mode:</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; 모드 를 사용하려면</target>
        </trans-unit>
        <trans-unit id="1ba4716684f52476f95f24b69f86ae65d28cd012" translate="yes" xml:space="preserve">
          <source>To use N-API in the above &quot;Hello world&quot; example, replace the content of &lt;code&gt;hello.cc&lt;/code&gt; with the following. All other instructions remain the same.</source>
          <target state="translated">위의 &quot;Hello world&quot;예제에서 N-API를 사용하려면 &lt;code&gt;hello.cc&lt;/code&gt; 의 내용을 다음 으로 바꿉니다 . 다른 모든 지침은 동일하게 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="c2030286b077ae9f310389c7d604ec2ac5189637" translate="yes" xml:space="preserve">
          <source>To use Perfect Forward Secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">&lt;code&gt;tls&lt;/code&gt; 모듈 과 함께 &lt;code&gt;DHE&lt;/code&gt; 를 사용하여 Perfect Forward Secrecy를 사용하려면 Diffie-Hellman 매개 변수를 생성하고 &lt;code&gt;dhparam&lt;/code&gt; 옵션으로 &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt; 지정해야합니다 . 다음은 OpenSSL 명령 행 인터페이스를 사용하여 이러한 매개 변수를 생성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d0a5c6de3c73d917b80285249a110f4f66a4f266" translate="yes" xml:space="preserve">
          <source>To use legacy assertion mode:</source>
          <target state="translated">레거시 어설 션 모드를 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="409731a0c399b993f15524f4692dc78e27a98aeb" translate="yes" xml:space="preserve">
          <source>To use legacy mode:</source>
          <target state="translated">레거시 모드를 사용하려면</target>
        </trans-unit>
        <trans-unit id="b9501e0f16f826f87e9350e123b56bd36119f5d9" translate="yes" xml:space="preserve">
          <source>To use more than one constant, use the bitwise OR &lt;code&gt;|&lt;/code&gt; operator.</source>
          <target state="translated">둘 이상의 상수를 사용하려면 비트 OR &lt;code&gt;|&lt;/code&gt; 운영자.</target>
        </trans-unit>
        <trans-unit id="59a200c232ad3bd583aabc76d909f585e995a5dc" translate="yes" xml:space="preserve">
          <source>To use perfect forward secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">&lt;code&gt;tls&lt;/code&gt; 모듈 과 함께 &lt;code&gt;DHE&lt;/code&gt; 를 사용하여 완벽한 순방향 보안을 사용하려면 Diffie-Hellman 매개 변수를 생성 하고 &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt; 대한 &lt;code&gt;dhparam&lt;/code&gt; 옵션으로 지정해야합니다 . 다음은 OpenSSL 명령 줄 인터페이스를 사용하여 이러한 매개 변수를 생성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c20a336e72da316b2c9c2163a7733348225e4cc6" translate="yes" xml:space="preserve">
          <source>To use strict assertion mode:</source>
          <target state="translated">엄격한 어설 션 모드를 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="5b5ad91da59de7323cefe83cf2f0b20fda7969fd" translate="yes" xml:space="preserve">
          <source>To use the HTTP server and client one must &lt;code&gt;require('http')&lt;/code&gt;.</source>
          <target state="translated">HTTP 서버와 클라이언트를 사용하려면 &lt;code&gt;require('http')&lt;/code&gt; 이어야 합니다 .</target>
        </trans-unit>
        <trans-unit id="71784b618df5ed1f33114983208856ba2d4ca1c0" translate="yes" xml:space="preserve">
          <source>To use this module:</source>
          <target state="translated">이 모듈을 사용하려면</target>
        </trans-unit>
        <trans-unit id="b7399a303049823aaa63a8aa2b18850c567f8783" translate="yes" xml:space="preserve">
          <source>To verify that ICU is enabled at all (&lt;code&gt;system-icu&lt;/code&gt;, &lt;code&gt;small-icu&lt;/code&gt;, or &lt;code&gt;full-icu&lt;/code&gt;), simply checking the existence of &lt;code&gt;Intl&lt;/code&gt; should suffice:</source>
          <target state="translated">ICU가 활성화되어 있는지 ( &lt;code&gt;system-icu&lt;/code&gt; , &lt;code&gt;small-icu&lt;/code&gt; 또는 &lt;code&gt;full-icu&lt;/code&gt; ) 확인하려면 &lt;code&gt;Intl&lt;/code&gt; 의 존재를 확인하는 것만으로 충분합니다.</target>
        </trans-unit>
        <trans-unit id="767a6b4283338f258039c6484f378f9774bf103f" translate="yes" xml:space="preserve">
          <source>To view this documentation as a manual page in a terminal, run &lt;code&gt;man node&lt;/code&gt;.</source>
          <target state="translated">이 문서를 터미널에서 매뉴얼 페이지로 보려면 &lt;code&gt;man node&lt;/code&gt; 를 실행 하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa49ae28e51088359080f4611ccdaeaee55d06b4" translate="yes" xml:space="preserve">
          <source>Too much HTTP header data was received. In order to protect against malicious or malconfigured clients, if more than 8KB of HTTP header data is received then HTTP parsing will abort without a request or response object being created, and an &lt;code&gt;Error&lt;/code&gt; with this code will be emitted.</source>
          <target state="translated">너무 많은 HTTP 헤더 데이터가 수신되었습니다. 악의적이거나 잘못 구성된 클라이언트로부터 보호하기 위해 8KB 이상의 HTTP 헤더 데이터가 수신되면 요청 또는 응답 객체를 만들지 않고 HTTP 구문 분석이 중단되고이 코드에 &lt;code&gt;Error&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6f88bcb86a810807252c2f25ecd279d2e929c894" translate="yes" xml:space="preserve">
          <source>Trace Event provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.</source>
          <target state="translated">추적 이벤트는 V8, Node.js 코어 및 사용자 공간 코드로 생성 된 추적 정보를 중앙 집중화하는 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="522930d7db32b707108991daae748228a5372efb" translate="yes" xml:space="preserve">
          <source>Trace Events</source>
          <target state="translated">추적 이벤트</target>
        </trans-unit>
        <trans-unit id="a397d20d155f600d42049a221bc3c7232e0e47bf" translate="yes" xml:space="preserve">
          <source>Trace events</source>
          <target state="translated">추적 이벤트</target>
        </trans-unit>
        <trans-unit id="28c7adc15802eb0b8935f3924650c3799b474e55" translate="yes" xml:space="preserve">
          <source>Tracing can be enabled with the &lt;code&gt;--trace-event-categories&lt;/code&gt; command-line flag or by using the &lt;code&gt;trace_events&lt;/code&gt; module. The &lt;code&gt;--trace-event-categories&lt;/code&gt; flag accepts a list of comma-separated category names.</source>
          <target state="translated">&lt;code&gt;--trace-event-categories&lt;/code&gt; 명령 줄 플래그를 사용하거나 &lt;code&gt;trace_events&lt;/code&gt; 모듈 을 사용하여 추적을 활성화 할 수 있습니다 . &lt;code&gt;--trace-event-categories&lt;/code&gt; 플래그는 콤마로 분리 카테고리 이름 목록을 받아 들인다.</target>
        </trans-unit>
        <trans-unit id="94e1656659df1321444d7824a33ef26cfdf8bed9" translate="yes" xml:space="preserve">
          <source>Track heap object allocations for heap snapshots.</source>
          <target state="translated">힙 스냅 샷에 대한 힙 오브젝트 할당을 추적하십시오.</target>
        </trans-unit>
        <trans-unit id="3dede6c9f5b091d4f1178b0d775ad848dfc2fe33" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate.</source>
          <target state="translated">주어진 샘플링 속도에서 이벤트 루프 지연을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="32233aa3037754c48a35202d5c815e9963127c0e" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate. The constructor of this class not exposed to users.</source>
          <target state="translated">주어진 샘플링 속도에서 이벤트 루프 지연을 추적합니다. 이 클래스의 생성자는 사용자에게 노출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="751fa34c39229191e6c74b37aabdea80d0e08f00" translate="yes" xml:space="preserve">
          <source>Trailers will &lt;strong&gt;only&lt;/strong&gt; be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.</source>
          <target state="translated">트레일러는 청크 인코딩이 응답에 사용되는 경우 &lt;strong&gt;에만&lt;/strong&gt; 방출됩니다. 그렇지 않은 경우 (예 : 요청이 HTTP / 1.0 인 경우) 자동으로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="f752da73347f44bd141752afbe732a41e970f215" translate="yes" xml:space="preserve">
          <source>Trailing garbage at the end of the input stream will now result in an &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">입력 스트림의 끝에서 가비지가 발생하면 이제 &lt;code&gt;'error'&lt;/code&gt; 이벤트 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="969267a9a3af0fbc68033e5c7098f852a9c4f7be" translate="yes" xml:space="preserve">
          <source>Trailing headers have already been sent on the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">후행 헤더는 이미 &lt;code&gt;Http2Stream&lt;/code&gt; 으로 전송되었습니다 .</target>
        </trans-unit>
        <trans-unit id="0cec91881e34f290385e04905cd9b4c93523b2df" translate="yes" xml:space="preserve">
          <source>Transfer a &lt;code&gt;MessagePort&lt;/code&gt; to a different &lt;a href=&quot;vm&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; Context. The original &lt;code&gt;port&lt;/code&gt; object will be rendered unusable, and the returned &lt;code&gt;MessagePort&lt;/code&gt; instance will take its place.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; 를 다른 &lt;a href=&quot;vm&quot;&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/a&gt; 컨텍스트 로 전송하십시오 . 원래 &lt;code&gt;port&lt;/code&gt; 객체는 사용할 수 없게되고 반환 된 &lt;code&gt;MessagePort&lt;/code&gt; 인스턴스가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f821472ecd36f99690900f79391a7c77f149a02e" translate="yes" xml:space="preserve">
          <source>Transform streams are &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams where the output is in some way related to the input. Like all &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams, &lt;code&gt;Transform&lt;/code&gt; streams implement both the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="translated">변환 스트림은 출력이 어떤 식 으로든 입력과 관련이있는 &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림입니다. 모든 &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt; 스트림 과 마찬가지로 &lt;code&gt;Transform&lt;/code&gt; 스트림은 &lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;가능 인터페이스를 모두 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="5d44411ee4a477c4003d0a4fd42fc9852f8eec42" translate="yes" xml:space="preserve">
          <source>Transmits a &lt;code&gt;GOAWAY&lt;/code&gt; frame to the connected peer &lt;em&gt;without&lt;/em&gt; shutting down the &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">전송합니다 &lt;code&gt;GOAWAY&lt;/code&gt; 에 연결된 피어 프레임을 &lt;em&gt;하지 않고&lt;/em&gt; 아래로 종료 &lt;code&gt;Http2Session&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ea9576ac65abef46df5e8efa3c56554f7250f9bd" translate="yes" xml:space="preserve">
          <source>Transpiler loader</source>
          <target state="translated">트랜스 파일러 로더</target>
        </trans-unit>
        <trans-unit id="49a8085f322954c5cb827e7d3811aff927e4beb4" translate="yes" xml:space="preserve">
          <source>Trigger an &lt;code&gt;'uncaughtException'&lt;/code&gt; in JavaScript. Useful if an async callback throws an exception with no way to recover.</source>
          <target state="translated">JavaScript에서 &lt;code&gt;'uncaughtException'&lt;/code&gt; 을 트리거하십시오 . 비동기 콜백이 복구 할 방법없이 예외를 throw하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="88fd9bf4f298a1d2622150397c550c3d7a9663cc" translate="yes" xml:space="preserve">
          <source>Triggered immediately after &lt;code&gt;'connect'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; 직후에 트리거 됩니다.</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="00719949dbe60c953bfc33c3a4fc7d650107ce37" translate="yes" xml:space="preserve">
          <source>True if headers were sent, false otherwise (read-only).</source>
          <target state="translated">헤더가 전송되면 true이고, 그렇지 않으면 false입니다 (읽기 전용).</target>
        </trans-unit>
        <trans-unit id="52aaf50525ff477ac5ccb10f3e94474da0a7e6a3" translate="yes" xml:space="preserve">
          <source>True if the process is a master. This is determined by the &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt;. If &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; is undefined, then &lt;code&gt;isMaster&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">프로세스가 마스터 인 경우 참입니다. 이것은 &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; 에 의해 결정됩니다 . &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; 가 정의되지 않은 경우 &lt;code&gt;isMaster&lt;/code&gt; 는 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f753bfbea14649b01155a879f0a01fd20d9acfb3" translate="yes" xml:space="preserve">
          <source>True if the process is not a master (it is the negation of &lt;code&gt;cluster.isMaster&lt;/code&gt;).</source>
          <target state="translated">프로세스가 마스터가 아닌 경우 true입니다 ( &lt;code&gt;cluster.isMaster&lt;/code&gt; 의 부정 임 ).</target>
        </trans-unit>
        <trans-unit id="a402e4d3f2f574d66f39eac4a0a59eb01b7429dc" translate="yes" xml:space="preserve">
          <source>Truncates the &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success. The &lt;code&gt;path&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be a string or &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">절단합니다 &lt;code&gt;path&lt;/code&gt; 다음 해결 &lt;code&gt;Promise&lt;/code&gt; 성공시 인수없이. &lt;code&gt;path&lt;/code&gt; &lt;em&gt;있어야&lt;/em&gt; 문자열이나 될 &lt;code&gt;Buffer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2e6fcf342166aa2b3f7da014c8cfdbe02e48d00f" translate="yes" xml:space="preserve">
          <source>Truncates the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">파일을 자른 다음 성공시 인수없이 &lt;code&gt;Promise&lt;/code&gt; 을 해결합니다 .</target>
        </trans-unit>
        <trans-unit id="eb397e6582ffce2afa6f0c50c11a1da76968e2e5" translate="yes" xml:space="preserve">
          <source>Try to construct a table with the columns of the properties of &lt;code&gt;tabularData&lt;/code&gt; (or use &lt;code&gt;properties&lt;/code&gt;) and rows of &lt;code&gt;tabularData&lt;/code&gt; and log it. Falls back to just logging the argument if it can&amp;rsquo;t be parsed as tabular.</source>
          <target state="translated">의 속성의 열이있는 테이블을 구성하려고 &lt;code&gt;tabularData&lt;/code&gt; (또는 사용 &lt;code&gt;properties&lt;/code&gt; 의) 행 &lt;code&gt;tabularData&lt;/code&gt; 하고 로그인합니다. 인수를 테이블 형식으로 구문 분석 할 수없는 경우 인수를 로깅하는 것으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="bd5dbabbefef5321cc8fd2b28e920d3d40a94172" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; throws an &lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt;&lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt; 을 사용하려고 하면 &lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt; &lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="21b131d9028db7e6607d213bfbc66c0ff665f5d4" translate="yes" xml:space="preserve">
          <source>Turning auto padding off will only work if the input data's length is a multiple of the ciphers block size.</source>
          <target state="translated">자동 패딩을 끄면 입력 데이터의 길이가 암호 블록 크기의 배수 인 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="33207f4af1d127df91481b71b60c34a426f9170e" translate="yes" xml:space="preserve">
          <source>Two Reading Modes</source>
          <target state="translated">두 가지 읽기 모드</target>
        </trans-unit>
        <trans-unit id="27d8454a7bd0ba08acf51f96558585ee7039de1c" translate="yes" xml:space="preserve">
          <source>Two reading modes</source>
          <target state="translated">두 가지 읽기 모드</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="7dbaee6b3d72c5fb2d6b4e87ebb27439475283a2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;EventTarget&amp;gt;&lt;/a&gt; The &lt;code&gt;EventTarget&lt;/code&gt; dispatching the event.</source>
          <target state="translated">입력 : &lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;의 EventTarget&amp;gt; &lt;/a&gt; &lt;code&gt;EventTarget&lt;/code&gt; 이벤트를 파견합니다.</target>
        </trans-unit>
        <trans-unit id="fdf3e2cffad5a828a7aa4148e91fb5cc50141041" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;부울&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ab2fdbf860e78b084aa29dd2be0b21f910fe1b8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; Always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; 항상 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fd98bdcf8d930cfc4fddad7bdbcbed014cb5963b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event has not been canceled.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; 이벤트가 취소되지 않은 경우 True입니다.</target>
        </trans-unit>
        <trans-unit id="592434911cf70ed7c8d94bc575c5dc4ad5fcd012" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event was created with the &lt;code&gt;cancelable&lt;/code&gt; option.</source>
          <target state="translated">입력 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;부울&amp;gt;&lt;/a&gt; 이벤트가로 작성된 경우 True를 &lt;code&gt;cancelable&lt;/code&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="1cc31d3d2b5210c7375845876ff2a16826ac9806" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;숫자&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32b6894e9b972a02fbebf6decdecb826a9a08499" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Returns &lt;code&gt;0&lt;/code&gt; while an event is not being dispatched, &lt;code&gt;2&lt;/code&gt; while it is being dispatched.</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; 이벤트가 전달되지 않는 동안 &lt;code&gt;0&lt;/code&gt; 을 반환 하고 전달되는 동안 &lt;code&gt;2&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a21a74a74290067e973bcaa8fa38d6218f2fc11f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;문자열&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9bad3fe9a9d788bf5ced613088a28a42982f43d" translate="yes" xml:space="preserve">
          <source>Type: Compile-time</source>
          <target state="translated">유형 : 컴파일 타임</target>
        </trans-unit>
        <trans-unit id="2e2f71bebdcf0432ba9dae30fc4cd34d69a994d9" translate="yes" xml:space="preserve">
          <source>Type: Deprecation revoked</source>
          <target state="translated">유형 : 지원 중단이 취소됨</target>
        </trans-unit>
        <trans-unit id="4afacd032dbf0b042ddec6e49a24f87b169ee946" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only</source>
          <target state="translated">유형 : 설명서 만</target>
        </trans-unit>
        <trans-unit id="f4038b1c0b648006573b34c3b0edb7a524d16ee2" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : 문서 전용 ( &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; 지원&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="c0334739797e8108100cffbf45a4decc971aeb44" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life</source>
          <target state="translated">유형 : 수명 종료</target>
        </trans-unit>
        <trans-unit id="c05f59a4cce67895e11eed8826cf4cee5bd54571" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life.</source>
          <target state="translated">유형 : 수명 종료</target>
        </trans-unit>
        <trans-unit id="daf411b4184b37552deeb3149950b164297c489d" translate="yes" xml:space="preserve">
          <source>Type: Runtime</source>
          <target state="translated">유형 : 런타임</target>
        </trans-unit>
        <trans-unit id="ebfbea69b5d285abfce6c4bef135a0ed69b7b0de" translate="yes" xml:space="preserve">
          <source>Type: Runtime (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">유형 : 런타임 ( &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; 지원&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="024bfd95e02496791b2881c7c1f7dd42376280b5" translate="yes" xml:space="preserve">
          <source>Type: Runtime &lt;code&gt;Transform._transformState&lt;/code&gt; will be removed in future versions where it is no longer required due to simplification of the implementation.</source>
          <target state="translated">유형 : Runtime &lt;code&gt;Transform._transformState&lt;/code&gt; 는 구현 단순화로 인해 더 이상 필요하지 않은 향후 버전에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="44f1ccbdc81b78ae74c2d0ae854796e4d7061770" translate="yes" xml:space="preserve">
          <source>Typed array slices are handled correctly now.</source>
          <target state="translated">형식화 된 배열 슬라이스가 이제 올바르게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="38f54df64da42601768ef91ee31423fac4d49160" translate="yes" xml:space="preserve">
          <source>Types of Streams</source>
          <target state="translated">스트림의 종류</target>
        </trans-unit>
        <trans-unit id="d580373209dd6a1707a0a6d7b5661be32ac592f2" translate="yes" xml:space="preserve">
          <source>Types of streams</source>
          <target state="translated">스트림 유형</target>
        </trans-unit>
        <trans-unit id="d7824c5156ab482008ad2ab94f44f8d1d1cdb802" translate="yes" xml:space="preserve">
          <source>Typically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the &lt;code&gt;data&lt;/code&gt; argument to the finalize callback.</source>
          <target state="translated">일반적으로 클래스 인스턴스를 래핑 할 때 최종 콜백에 대한 &lt;code&gt;data&lt;/code&gt; 인수로 수신 된 기본 인스턴스를 삭제하는 최종 콜백을 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f65c7601001c43a1759b63d4de8c6cbfa1fdec3a" translate="yes" xml:space="preserve">
          <source>Typically, the &lt;code&gt;response&lt;/code&gt; is a digitally signed object from the server's CA that contains information about server's certificate revocation status.</source>
          <target state="translated">일반적으로 &lt;code&gt;response&lt;/code&gt; 은 서버의 인증서 해지 상태에 대한 정보가 포함 된 서버의 CA에서 디지털 서명 된 개체입니다.</target>
        </trans-unit>
        <trans-unit id="1a77b330d905af0212c5c7ff0c6a442a27aabe49" translate="yes" xml:space="preserve">
          <source>Typically, the size of the current buffer is measured against the &lt;code&gt;highWaterMark&lt;/code&gt; in &lt;em&gt;bytes&lt;/em&gt;. However, after &lt;code&gt;setEncoding()&lt;/code&gt; is called, the comparison function will begin to measure the buffer's size in &lt;em&gt;characters&lt;/em&gt;.</source>
          <target state="translated">일반적으로 현재 버퍼의 크기는 &lt;code&gt;highWaterMark&lt;/code&gt; 에 대해 &lt;em&gt;바이트 단위로&lt;/em&gt; 측정 &lt;em&gt;됩니다&lt;/em&gt; . 그러나 &lt;code&gt;setEncoding()&lt;/code&gt; 이 호출 된 후 비교 함수는 버퍼 크기를 &lt;em&gt;문자&lt;/em&gt; 단위로 측정하기 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="219e224c2a9b92a6e101f6876f27314c5bbac679" translate="yes" xml:space="preserve">
          <source>Typically, this is managed through the number of &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'message'&lt;/code&gt; listeners on the &lt;code&gt;process&lt;/code&gt; object. However, this method can be used to explicitly request a specific behavior.</source>
          <target state="translated">일반적으로 이는 &lt;code&gt;process&lt;/code&gt; 개체 의 &lt;code&gt;'disconnect'&lt;/code&gt; 및 &lt;code&gt;'message'&lt;/code&gt; 리스너 수를 통해 관리됩니다 . 그러나이 메서드는 특정 동작을 명시 적으로 요청하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b31db7cab86864065f3e106f86c44b514de32cc5" translate="yes" xml:space="preserve">
          <source>UDP/Datagram</source>
          <target state="translated">UDP/Datagram</target>
        </trans-unit>
        <trans-unit id="9f78a32c9e9869badba95ed40dd1e0e645130d94" translate="yes" xml:space="preserve">
          <source>UDP/Datagram Sockets</source>
          <target state="translated">UDP / 데이터 그램 소켓</target>
        </trans-unit>
        <trans-unit id="fb468ca992673c8e389166a22b228b123bbe372c" translate="yes" xml:space="preserve">
          <source>UDP/datagram</source>
          <target state="translated">UDP/datagram</target>
        </trans-unit>
        <trans-unit id="acc6e7e4a3651dd476a52e5cffe0d3c3489395d7" translate="yes" xml:space="preserve">
          <source>UDP/datagram sockets</source>
          <target state="translated">UDP / 데이터 그램 소켓</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="0aa6d0c7243e93e5b8220dee83a136c689b755fa" translate="yes" xml:space="preserve">
          <source>URL Strings and URL Objects</source>
          <target state="translated">URL 문자열 및 URL 객체</target>
        </trans-unit>
        <trans-unit id="668c7293b4faab50fd65a1538e196f37e127ab64" translate="yes" xml:space="preserve">
          <source>URL object support</source>
          <target state="translated">URL 객체 지원</target>
        </trans-unit>
        <trans-unit id="79b0dc43bf17928f302cb7ea469c8717b49e7aa7" translate="yes" xml:space="preserve">
          <source>URL strings and URL objects</source>
          <target state="translated">URL 문자열 및 URL 개체</target>
        </trans-unit>
        <trans-unit id="44c577ae467a3484accd429a3a86f410b07ee886" translate="yes" xml:space="preserve">
          <source>URL-based paths</source>
          <target state="translated">URL 기반 경로</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="aaa0bde7f5196da87592a553fbff4a7d60686471" translate="yes" xml:space="preserve">
          <source>URLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL.</source>
          <target state="translated">URL은 특정 범위의 문자 만 포함 할 수 있습니다. 해당 범위를 벗어나는 문자는 인코딩해야합니다. 이러한 문자를 인코딩하는 방법과 인코딩 할 문자는 URL 구조 내에서 문자가있는 위치에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="1caa901ddac6183bbfa527108f80fb9a81c3fb50" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A false-y &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; 구성표가 있는 URL 은 이제 &lt;code&gt;slashes&lt;/code&gt; 옵션에 관계없이 항상 올바른 수의 슬래시를 사용합니다 . 프로토콜이없는 허위 &lt;code&gt;slashes&lt;/code&gt; 옵션도 이제 항상 존중됩니다.</target>
        </trans-unit>
        <trans-unit id="7ce43f682f8e00790c8ef30d56b7ba3f345e48bf" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A falsy &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; 스키마가 있는 URL 은 이제 &lt;code&gt;slashes&lt;/code&gt; 옵션에 관계없이 항상 올바른 수의 슬래시를 사용합니다 . 프로토콜이없는 허위 &lt;code&gt;slashes&lt;/code&gt; 옵션도 이제 항상 존중됩니다.</target>
        </trans-unit>
        <trans-unit id="7cf77927f71e28dcf1f204b6a54ebaa27e8f22d5" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;input&lt;/code&gt; string and returns a &lt;code&gt;Uint8Array&lt;/code&gt; containing the encoded bytes.</source>
          <target state="translated">UTF-8은 &lt;code&gt;input&lt;/code&gt; 문자열을 인코딩하고 인코딩 된 바이트를 포함 하는 &lt;code&gt;Uint8Array&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="b71146a62fb63a8add8a5579d875bb69309a465e" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;src&lt;/code&gt; string to the &lt;code&gt;dest&lt;/code&gt; Uint8Array and returns an object containing the read Unicode code units and written UTF-8 bytes.</source>
          <target state="translated">UTF-8은 &lt;code&gt;src&lt;/code&gt; 문자열을 &lt;code&gt;dest&lt;/code&gt; Uint8Array 로 인코딩하고 읽기 유니 코드 코드 단위와 작성된 UTF-8 바이트를 포함하는 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2a020ddc6f85f9747d28e1db856f35e5132b29d" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event if the &lt;code&gt;repl&lt;/code&gt; is used as standalone program. If the &lt;code&gt;repl&lt;/code&gt; is included anywhere in another application, adding a listener for this event will throw an &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt; 예외 는 &lt;code&gt;repl&lt;/code&gt; 이 독립형 프로그램으로 사용되는 경우 에만 'uncaughtException' 이벤트를 발생시킵니다 . &lt;code&gt;repl&lt;/code&gt; 이 다른 응용 프로그램의 아무 곳에 나 포함되어 있으면 이 이벤트에 대한 리스너를 추가하면 &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="00499514ac2e595db5c7987996d23850bbb67efb" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event in the standalone REPL. Adding a listener for this event in a REPL within another Node.js program throws &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt; 예외 는 독립 실행 형 REPL에서 'uncaughtException' 이벤트 만 내 보냅니다. 다른 Node.js 프로그램 내의 REPL에서이 이벤트에 대한 리스너를 추가하면 &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; 가 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="12780a16241be2fa7756cbd98a691718ec9bd790" translate="yes" xml:space="preserve">
          <source>Undefined value error is identified by &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt;.</source>
          <target state="translated">정의되지 않은 값 오류는 &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt; 로 식별됩니다 .</target>
        </trans-unit>
        <trans-unit id="355754b0f03869d3cdd89f47abdc47135392a8b0" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, there is no need to modify the report triggering signal. However, if &lt;code&gt;SIGUSR2&lt;/code&gt; is already used for other purposes, then this flag helps to change the signal for report generation and preserve the original meaning of &lt;code&gt;SIGUSR2&lt;/code&gt; for the said purposes.</source>
          <target state="translated">정상적인 상황에서는 보고서 트리거링 신호를 수정할 필요가 없습니다. 그러나 &lt;code&gt;SIGUSR2&lt;/code&gt; 가 이미 다른 목적으로 사용 된 경우이 플래그는 보고서 생성을위한 신호를 변경하고 해당 목적을 위해 &lt;code&gt;SIGUSR2&lt;/code&gt; 의 원래 의미를 유지하는 데 도움이 됩니다.</target>
        </trans-unit>
        <trans-unit id="91d9c4087497cf56cdc0c9a2696808d747e7494c" translate="yes" xml:space="preserve">
          <source>Under the hood, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses the same operating system facilities as most other programs. For instance, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; will almost always resolve a given name the same way as the &lt;code&gt;ping&lt;/code&gt; command. On most POSIX-like operating systems, the behavior of the &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; function can be modified by changing settings in &lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt;&lt;code&gt;nsswitch.conf(5)&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;&lt;code&gt;resolv.conf(5)&lt;/code&gt;&lt;/a&gt;, but changing these files will change the behavior of all other programs running on the same operating system.</source>
          <target state="translated">후드, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 대부분의 다른 프로그램과 동일한 운영 체제 기능을 사용합니다. 예를 들어 &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 은 거의 항상 &lt;code&gt;ping&lt;/code&gt; 명령 과 같은 방식으로 지정된 이름을 확인합니다 . 대부분의 POSIX 유사 운영 체제에서 &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt; 함수 의 동작은 &lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt; &lt;code&gt;nsswitch.conf(5)&lt;/code&gt; &lt;/a&gt; 및 / 또는 &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt; &lt;code&gt;resolv.conf(5)&lt;/code&gt; &lt;/a&gt; 설정을 변경하여 수정할 수 있지만 이러한 파일을 변경하면 동작이 변경됩니다. 동일한 운영 체제에서 실행되는 다른 모든 프로그램</target>
        </trans-unit>
        <trans-unit id="580e3fbd2559f3ee3cfa1776417d5a62f4c14b7c" translate="yes" xml:space="preserve">
          <source>Underscores instead of dashes are now allowed for Node.js options as well, in addition to V8 options.</source>
          <target state="translated">V8 옵션 외에도 대시 대신 밑줄이 Node.js 옵션에도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="9c2e7282fb0e27b15982f88c5929897b3adfb4d7" translate="yes" xml:space="preserve">
          <source>Unflag Top-Level Await.</source>
          <target state="translated">Unflag 최상위 레벨 대기.</target>
        </trans-unit>
        <trans-unit id="c6535069f12c408de03e4a4245fa064b53e80ecc" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;napi_instanceof()&lt;/code&gt; does not protect against prototype manipulation. For example, the prototype of the database handle instance can be set to the prototype of the constructor for query handle instances. In this case, the database handle instance can appear as a query handle instance, and it will pass the &lt;code&gt;napi_instanceof()&lt;/code&gt; test for a query handle instance, while still containing a pointer to a database handle.</source>
          <target state="translated">불행히도 &lt;code&gt;napi_instanceof()&lt;/code&gt; 는 프로토 타입 조작으로부터 보호하지 않습니다. 예를 들어 데이터베이스 핸들 인스턴스의 프로토 타입을 쿼리 핸들 인스턴스의 생성자의 프로토 타입으로 설정할 수 있습니다. 이 경우 데이터베이스 핸들 인스턴스는 쿼리 핸들 인스턴스로 나타날 수 있으며 쿼리 핸들 인스턴스에 대한 &lt;code&gt;napi_instanceof()&lt;/code&gt; 테스트를 통과하는 동시에 데이터베이스 핸들에 대한 포인터를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="1b6da39f1b5c6c93e6c62b868278c8947240fb88" translate="yes" xml:space="preserve">
          <source>Unhandled &lt;code&gt;Promise&lt;/code&gt; rejections will now emit a process warning.</source>
          <target state="translated">처리되지 않은 &lt;code&gt;Promise&lt;/code&gt; 거부는 이제 프로세스 경고를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="464f051574cc9f087c75400c48b33f6db9e3b08d" translate="yes" xml:space="preserve">
          <source>Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</source>
          <target state="translated">처리되지 않은 약속 거부는 더 이상 사용되지 않습니다. 앞으로 처리되지 않은 약속 거부는 0이 아닌 종료 코드로 Node.js 프로세스를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="584854aa0e9467ba1a8c66c80f5e294682497d95" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the host name of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 호스트 이름에 나타나는 유니 코드 문자 는 &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; 알고리즘을 사용하여 자동으로 ASCII로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="571721324afa74a8ee617292febb542f1513c933" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the hostname of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 호스트 이름 내에 나타나는 유니 코드 문자 는 &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; 알고리즘을 사용하여 ASCII로 자동 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="12b0a12e37a0aa70166ef0879f9a3b2e21c18fa6" translate="yes" xml:space="preserve">
          <source>Unknown values for the resolved module location cause failures but are not guaranteed to be forward compatible.</source>
          <target state="translated">해결 된 모듈 위치의 알 수없는 값으로 인해 오류가 발생하지만 순방향 호환이 보장되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="d44850afeb4065072620c926d0775df5f7048af1" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances indicate a bug in the code or its dependencies.</source>
          <target state="translated">애플리케이션이 코드를 동적으로 생성하고 실행하지 않는 한 &lt;code&gt;ReferenceError&lt;/code&gt; 인스턴스는 코드 또는 해당 종속성의 버그를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="929fece4ad5f5e7b4b1b96bae39ed7f671795daa" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances should always be considered a bug in the code or its dependencies.</source>
          <target state="translated">응용 프로그램이 코드를 동적으로 생성 및 실행하지 않는 한 &lt;code&gt;ReferenceError&lt;/code&gt; 인스턴스는 항상 코드 또는 해당 종속성의 버그로 간주해야합니다.</target>
        </trans-unit>
        <trans-unit id="fe2b51adbc6c7b0bc926ec919779dce328f8537f" translate="yes" xml:space="preserve">
          <source>Unless explicitly specified when creating a &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; instance, each &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread has its own copy of &lt;code&gt;process.env&lt;/code&gt;, based on its parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt;, or whatever was specified as the &lt;code&gt;env&lt;/code&gt; option to the &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor. Changes to &lt;code&gt;process.env&lt;/code&gt; will not be visible across &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, and only the main thread can make changes that are visible to the operating system or to native add-ons.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 인스턴스를 만들 때 명시 적으로 지정하지 않으면 각 &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드에는 상위 스레드의 &lt;code&gt;process.env&lt;/code&gt; 또는 &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 생성자에 대한 &lt;code&gt;env&lt;/code&gt; 옵션 으로 지정된 것을 기반으로 고유 한 &lt;code&gt;process.env&lt;/code&gt; 사본이 있습니다 . &lt;code&gt;process.env&lt;/code&gt; 에 대한 변경 사항 은 &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; 스레드에서 볼 수 없으며 기본 스레드 만 운영 체제 또는 기본 애드온에서 볼 수있는 변경을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a72e9d9932fe774a0515db2c6aaea624c04effad" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside a &lt;code&gt;napi_callback&lt;/code&gt; is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt; 에서 논의 된 이유가 아니라면 &lt;code&gt;napi_callback&lt;/code&gt; 내에 핸들 및 / 또는 콜백 범위를 생성 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0edc9ad8deb45d66b9a4ce8ca1ee4d65518cb9fc" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside the function body is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt; 에서 논의 된 이유가 아니라면 함수 본문 내에 핸들 및 / 또는 콜백 범위를 만들 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2172d325e09251aae77841665a275f9f12e96c85" translate="yes" xml:space="preserve">
          <source>Unless otherwise scoped within blocks or functions, variables declared either implicitly or using the &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; keywords are declared at the global scope.</source>
          <target state="translated">블록이나 함수 내에서 다른 범위를 지정하지 않는 한 내재적으로 선언되거나 &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; 또는 &lt;code&gt;var&lt;/code&gt; 키워드를 사용하여 선언 된 변수는 전역 범위에서 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="f2b9cb312ebc7377e0acc37ab64028e168b79e3b" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt;&lt;/a&gt;, the hook is allowed to be asynchronous.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt; &lt;/a&gt; 과 달리 후크는 비동기식 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="738279034066201991d76c70c2c3ad5d7acd5fb5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt;, it does not support an additional &lt;code&gt;time&lt;/code&gt; argument since the difference can just be computed directly by subtraction of the two &lt;code&gt;bigint&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt; 과 달리 두 &lt;code&gt;bigint&lt;/code&gt; 를 빼서 차이를 직접 계산할 수 있으므로 추가 &lt;code&gt;time&lt;/code&gt; 인수를 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a7d31182b596602990e6a1b35091501ddc7cd0bd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if &lt;code&gt;readable.unshift()&lt;/code&gt; is called during a read (i.e. from within a &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;stream._read()&lt;/code&gt;&lt;/a&gt; implementation on a custom stream). Following the call to &lt;code&gt;readable.unshift()&lt;/code&gt; with an immediate &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push('')&lt;/code&gt;&lt;/a&gt; will reset the reading state appropriately, however it is best to simply avoid calling &lt;code&gt;readable.unshift()&lt;/code&gt; while in the process of performing a read.</source>
          <target state="translated">달리 &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; , 스트림의 내부 판독 상태를 재설정하여 판독 프로세스를 종료하지 않을 것이다. 읽기 도중 (즉 , 사용자 정의 스트림 의 &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;stream._read()&lt;/code&gt; &lt;/a&gt; 구현 내에서 &lt;code&gt;readable.unshift()&lt;/code&gt; 가 호출 되면 예기치 않은 결과가 발생할 수 있습니다 . 즉시 &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push('')&lt;/code&gt; &lt;/a&gt; 를 사용하여 &lt;code&gt;readable.unshift()&lt;/code&gt; 를 호출 하면 읽기 상태가 적절하게 재설정되지만 읽기를 수행하는 과정에서 &lt;code&gt;readable.unshift()&lt;/code&gt; 를 호출하지 않는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="ffbea780c221ab67ef22ff2efead15150ae9d4ad" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module, duplicate keys in the form of array values are not allowed. Arrays are stringified using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt;&lt;code&gt;array.toString()&lt;/code&gt;&lt;/a&gt;, which simply joins all array elements with commas.</source>
          <target state="translated">&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt; 모듈 과 달리 배열 값 형식의 중복 키는 허용되지 않습니다. 배열은 모든 배열 요소를 쉼표로 결합하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt; &lt;code&gt;array.toString()&lt;/code&gt; &lt;/a&gt; 사용하여 문자열 화됩니다 .</target>
        </trans-unit>
        <trans-unit id="cf1a2bd2bcaee5665438d46897ea1c835ab3373a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;EventEmitter&lt;/code&gt;, any given &lt;code&gt;listener&lt;/code&gt; can be registered at most once per event &lt;code&gt;type&lt;/code&gt;. Attempts to register a &lt;code&gt;listener&lt;/code&gt; multiple times are ignored.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; 와 달리 주어진 &lt;code&gt;listener&lt;/code&gt; 는 이벤트 &lt;code&gt;type&lt;/code&gt; 당 최대 한 번 등록 할 수 있습니다 . &lt;code&gt;listener&lt;/code&gt; 여러 번 등록하려는 시도 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="93286044bb9cc680edddcad0e702f7630a603e80" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;child_process&lt;/code&gt; or &lt;code&gt;cluster&lt;/code&gt;, &lt;code&gt;worker_threads&lt;/code&gt; can share memory. They do so by transferring &lt;code&gt;ArrayBuffer&lt;/code&gt; instances or sharing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances.</source>
          <target state="translated">달리 &lt;code&gt;child_process&lt;/code&gt; 또는 &lt;code&gt;cluster&lt;/code&gt; , &lt;code&gt;worker_threads&lt;/code&gt; 는 메모리를 공유 할 수 있습니다. &lt;code&gt;ArrayBuffer&lt;/code&gt; 인스턴스 를 전송 하거나 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 인스턴스를 공유 하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="786c293ea8a2a263e26d57c1c94d19f2b5a49165" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;eval&lt;/code&gt;, this function does not allow the script to access the current lexical scope, and therefore also does not allow to access the &lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;module scope&lt;/a&gt;, meaning that pseudo-globals such as &lt;code&gt;require&lt;/code&gt; will not be available.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 과 달리이 함수는 스크립트가 현재 어휘 범위에 액세스하는 것을 허용하지 않으므로 &lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;모듈 범위&lt;/a&gt; 에 대한 액세스도 허용하지 않습니다 . 즉, &lt;code&gt;require&lt;/code&gt; 와 같은 의사 전역을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b31b651c0bd301bf713d75fd4cc4cb768e5aecc6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.Module&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.Module&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. The use of 'async' functions can help with manipulating &lt;code&gt;vm.Module&lt;/code&gt; objects.</source>
          <target state="translated">그러나 &lt;code&gt;vm.Script&lt;/code&gt; 와 달리 모든 &lt;code&gt;vm.Module&lt;/code&gt; 개체는 생성 된 컨텍스트에 바인딩됩니다. 에 운영 &lt;code&gt;vm.Module&lt;/code&gt; 의 객체의 동기 자연과 대조적으로, 본질적으로 비동기 &lt;code&gt;vm.Script&lt;/code&gt; 의 객체. 'async'함수를 사용하면 &lt;code&gt;vm.Module&lt;/code&gt; 개체 를 조작하는 데 도움이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bc66008fe7449b513d18dc2e492a0bd73292fdec" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. With the help of async functions, however, manipulating &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects is fairly straightforward.</source>
          <target state="translated">그러나 &lt;code&gt;vm.Script&lt;/code&gt; 와 달리 모든 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 객체는 생성시 컨텍스트에 바인딩됩니다. 에 운영 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 의 객체의 동기 자연과 대조적으로, 본질적으로 비동기 &lt;code&gt;vm.Script&lt;/code&gt; 의 객체. 그러나 비동기 함수를 사용하면 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 객체를 조작하는 것이 매우 간단합니다.</target>
        </trans-unit>
        <trans-unit id="0599776b2acdfbdb39a04e0dc3671e103e9a70bf" translate="yes" xml:space="preserve">
          <source>Unlike modules written in JavaScript, developing and deploying Node.js native addons using N-API requires an additional set of tools. Besides the basic tools required to develop for Node.js, the native addon developer requires a toolchain that can compile C and C++ code into a binary. In addition, depending upon how the native addon is deployed, the &lt;em&gt;user&lt;/em&gt; of the native addon will also need to have a C/C++ toolchain installed.</source>
          <target state="translated">JavaScript로 작성된 모듈과 달리 N-API를 사용하여 Node.js 네이티브 애드온을 개발하고 배포하려면 추가 도구 세트가 필요합니다. Node.js 용으로 개발하는 데 필요한 기본 도구 외에도 네이티브 애드온 개발자에게는 C 및 C ++ 코드를 바이너리로 컴파일 할 수있는 도구 체인이 필요합니다. 또한 네이티브 애드온이 배포되는 방식에 따라 네이티브 애드온 &lt;em&gt;사용자&lt;/em&gt; 는 C / C ++ 도구 모음도 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="7c5877252fff27f076a79408216302ad7142ca78" translate="yes" xml:space="preserve">
          <source>Unlike other methods operating on &lt;code&gt;Module&lt;/code&gt;, this function completes synchronously and returns nothing.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 에서 작동하는 다른 방법과 달리이 함수는 동 기적으로 완료되며 아무것도 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d88dff4d6b12aaa62861c546611f134585732b86" translate="yes" xml:space="preserve">
          <source>Unlike the 16 kb default &lt;code&gt;highWaterMark&lt;/code&gt; for a readable stream, the stream returned by this method has a default &lt;code&gt;highWaterMark&lt;/code&gt; of 64 kb.</source>
          <target state="translated">읽을 수있는 스트림의 16kb 기본 &lt;code&gt;highWaterMark&lt;/code&gt; 와 달리이 메서드에서 반환 된 스트림의 기본 &lt;code&gt;highWaterMark&lt;/code&gt; 는 64kb 입니다.</target>
        </trans-unit>
        <trans-unit id="c89fbd3cb8564198493b0872bc897f53689f1cdc" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt;&lt;code&gt;fork(2)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.fork()&lt;/code&gt; does not clone the current process.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt; &lt;code&gt;fork(2)&lt;/code&gt; &lt;/a&gt; POSIX 시스템 호출 과 달리 &lt;code&gt;child_process.fork()&lt;/code&gt; 는 현재 프로세스를 복제하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="14ecf150019ebe6bc4270fdded6d714de98dea3b" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt;&lt;code&gt;exec(3)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.exec()&lt;/code&gt; does not replace the existing process and uses a shell to execute the command.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt; &lt;code&gt;exec(3)&lt;/code&gt; &lt;/a&gt; POSIX 시스템 호출 과 달리 &lt;code&gt;child_process.exec()&lt;/code&gt; 는 기존 프로세스를 대체하지 않으며 셸을 사용하여 명령을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="8550f7544a3f4ee9abeb8cba1ce111534a3ad502" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;https&lt;/code&gt; API, &lt;code&gt;tls.connect()&lt;/code&gt; does not enable the SNI (Server Name Indication) extension by default, which may cause some servers to return an incorrect certificate or reject the connection altogether. To enable SNI, set the &lt;code&gt;servername&lt;/code&gt; option in addition to &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https&lt;/code&gt; API 와 달리 &lt;code&gt;tls.connect()&lt;/code&gt; 는 기본적으로 SNI (Server Name Indication) 확장을 활성화하지 않으므로 일부 서버가 잘못된 인증서를 반환하거나 연결을 완전히 거부 할 수 있습니다. SNI를 활성화하려면 &lt;code&gt;host&lt;/code&gt; 외에 &lt;code&gt;servername&lt;/code&gt; 옵션을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="8a651eaa44463d71d0ba17228140a40f73da19e4" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;request&lt;/code&gt; object, if the response closes prematurely, the &lt;code&gt;response&lt;/code&gt; object does not emit an &lt;code&gt;'error'&lt;/code&gt; event but instead emits the &lt;code&gt;'aborted'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; 객체 와 달리 응답이 너무 일찍 닫히면 &lt;code&gt;response&lt;/code&gt; 객체는 &lt;code&gt;'error'&lt;/code&gt; 이벤트를 발생시키지 않고 대신 &lt;code&gt;'aborted'&lt;/code&gt; 이벤트 를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="245fd6876839504d24af1a18605a9594e7b65485" translate="yes" xml:space="preserve">
          <source>Unlike the callback-based API (&lt;code&gt;fs.fstat()&lt;/code&gt;, &lt;code&gt;fs.fchown()&lt;/code&gt;, &lt;code&gt;fs.fchmod()&lt;/code&gt;, and so on), a numeric file descriptor is not used by the promise-based API. Instead, the promise-based API uses the &lt;code&gt;FileHandle&lt;/code&gt; class in order to help avoid accidental leaking of unclosed file descriptors after a &lt;code&gt;Promise&lt;/code&gt; is resolved or rejected.</source>
          <target state="translated">콜백 기반 API ( &lt;code&gt;fs.fstat()&lt;/code&gt; , &lt;code&gt;fs.fchown()&lt;/code&gt; , &lt;code&gt;fs.fchmod()&lt;/code&gt; 등 ) 와 달리 숫자 파일 디스크립터는 약속 기반 API에서 사용되지 않습니다. 대신 약속 기반 API는 &lt;code&gt;Promise&lt;/code&gt; 이 해결되거나 거부 된 후 닫히지 않은 파일 설명자가 실수로 누출되지 않도록하기 위해 &lt;code&gt;FileHandle&lt;/code&gt; 클래스를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="aec5e222fb21197428b2bc12e8d85d03d3d352d7" translate="yes" xml:space="preserve">
          <source>Unregisters &lt;code&gt;fun&lt;/code&gt; as a function to be run with the &lt;code&gt;arg&lt;/code&gt; parameter once the current Node.js environment exits. Both the argument and the function value need to be exact matches.</source>
          <target state="translated">현재 Node.js 환경이 종료되면 &lt;code&gt;arg&lt;/code&gt; 매개 변수 로 실행할 함수로 &lt;code&gt;fun&lt;/code&gt; 을 등록 취소 합니다. 인수와 함수 값은 모두 정확히 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="d18fe6d2e5688021879f7a873899d3115ce6e749" translate="yes" xml:space="preserve">
          <source>Unregisters the cleanup hook corresponding to &lt;code&gt;remove_handle&lt;/code&gt;. This will prevent the hook from being executed, unless it has already started executing. This must be called on any &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; value obtained from &lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;remove_handle&lt;/code&gt; 에 해당하는 정리 후크를 등록 취소합니다 . 이렇게하면 이미 실행을 시작하지 않은 경우 후크가 실행되지 않습니다. 이것은 어떤 호출해야 &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; 에서 얻은 값 &lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="65c4b2669e9c330ac9f73450acc1e9a90e0c45de" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Hmac&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; &lt;code&gt;Hmac&lt;/code&gt; 컨텐츠를 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;encoding&lt;/code&gt; 구비하고 있지 않은 &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="93605dc813a8e916582ddbffd733db79b79cce3c" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Sign&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; &lt;code&gt;Sign&lt;/code&gt; 내용을 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;encoding&lt;/code&gt; 구비하고 있지 않은 &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a2260478143ea14e9583ad4e3b793657f13996f1" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Verify&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;inputEncoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">지정된 &lt;code&gt;data&lt;/code&gt; 사용 하여 &lt;code&gt;Verify&lt;/code&gt; 컨텐츠를 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;inputEncoding&lt;/code&gt; 가 제공되지 않고, &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="77d2af3d6057a23de355899c59dd7f7a41c92d30" translate="yes" xml:space="preserve">
          <source>Updates the cipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">암호를 &lt;code&gt;data&lt;/code&gt; 로 업데이트합니다 . 경우] &lt;code&gt;inputEncoding&lt;/code&gt; 의 인자가 주어진 상기 &lt;code&gt;data&lt;/code&gt; 인수 지정된 인코딩을 사용하는 문자열이다. 는 IF &lt;code&gt;inputEncoding&lt;/code&gt; 의 인수가 주어지지, &lt;code&gt;data&lt;/code&gt; 해야 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 . 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="db6770b018c405d1e79d9580f71bd8cf8282662f" translate="yes" xml:space="preserve">
          <source>Updates the current local settings for this &lt;code&gt;Http2Session&lt;/code&gt; and sends a new &lt;code&gt;SETTINGS&lt;/code&gt; frame to the connected HTTP/2 peer.</source>
          <target state="translated">이 &lt;code&gt;Http2Session&lt;/code&gt; 에 대한 현재 로컬 설정을 업데이트하고 연결된 HTTP / 2 피어에 새 &lt;code&gt;SETTINGS&lt;/code&gt; 프레임을 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="957c600a690a3a36412946efac93320156d3eb42" translate="yes" xml:space="preserve">
          <source>Updates the decipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">암호를 &lt;code&gt;data&lt;/code&gt; 로 업데이트합니다 . 경우] &lt;code&gt;inputEncoding&lt;/code&gt; 의 인자가 주어진 상기 &lt;code&gt;data&lt;/code&gt; 인수 지정된 인코딩을 사용하는 문자열이다. 는 IF &lt;code&gt;inputEncoding&lt;/code&gt; 의 인수가 주어지지, &lt;code&gt;data&lt;/code&gt; 해야합니다 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; . 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="5ed45c49beca4ce2a38119d874096a97e38115cc" translate="yes" xml:space="preserve">
          <source>Updates the hash content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; 해시 컨텐츠를 업데이트합니다 . 인코딩은 &lt;code&gt;inputEncoding&lt;/code&gt; 에 제공 됩니다. 경우 &lt;code&gt;encoding&lt;/code&gt; 구비하고 있지 않은 &lt;code&gt;data&lt;/code&gt; 스트링이다의 부호화 &lt;code&gt;'utf8'&lt;/code&gt; 적용된다. 경우 &lt;code&gt;data&lt;/code&gt; A는 &lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;TypedArray&lt;/code&gt; , 또는 &lt;code&gt;DataView&lt;/code&gt; 를 , 다음 &lt;code&gt;inputEncoding&lt;/code&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="7d2950e7ca60835246638412bbc7c834bf90e01b" translate="yes" xml:space="preserve">
          <source>Updates the priority for this &lt;code&gt;Http2Stream&lt;/code&gt; instance.</source>
          <target state="translated">이 &lt;code&gt;Http2Stream&lt;/code&gt; 인스턴스 의 우선 순위를 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="da0f7a31471fb4f5f448dffafa53fb94e1f6c0de" translate="yes" xml:space="preserve">
          <source>Uploading precompiled binaries</source>
          <target state="translated">사전 컴파일 된 바이너리 업로드</target>
        </trans-unit>
        <trans-unit id="f6b150488cf43f5c486b4617e1a3281d94130a34" translate="yes" xml:space="preserve">
          <source>Upon assigning a value to the port, the value will first be converted to a string using &lt;code&gt;.toString()&lt;/code&gt;.</source>
          <target state="translated">포트에 값을 할당하면 값은 먼저 &lt;code&gt;.toString()&lt;/code&gt; 사용하여 문자열로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="f8d1386e91a02cb0c85bee48bbf4edcff35a05d0" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;Aside from the main loop thread, no threads should be using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">(A)의 제작시 &lt;code&gt;napi_threadsafe_function&lt;/code&gt; &lt;code&gt;napi_finalize&lt;/code&gt; 의 콜백을 구비 할 수있다. 이 콜백은 스레드로부터 안전한 함수가 파괴 되려고 할 때 메인 스레드에서 호출됩니다. 생성 중에 주어진 컨텍스트와 finalize 데이터를 수신하고, 예를 들어 &lt;code&gt;uv_thread_join()&lt;/code&gt; 을 호출하여 스레드 후 정리할 수있는 기회를 제공합니다 . &lt;strong&gt;메인 루프 스레드를 제외하고는 finalize 콜백이 완료된 후에 스레드로부터 안전한 기능을 사용하는 스레드가 없어야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a21b6b47f79ea7bf24d3448220aa0114efedd561" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;It is important that, aside from the main loop thread, there be no threads left using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_threadsafe_function&lt;/code&gt; 을 작성 하면 &lt;code&gt;napi_finalize&lt;/code&gt; 콜백이 제공 될 수 있습니다. 이 콜백은 스레드 안전 함수가 파괴 되려고 할 때 기본 스레드에서 호출됩니다. 구성 중에 주어진 컨텍스트와 최종 데이터를 수신하고 스레드 후 정리할 수있는 기회를 제공합니다 &lt;code&gt;uv_thread_join()&lt;/code&gt; 예 : uv_thread_join ()) . &lt;strong&gt;메인 루프 스레드 외에 마무리 콜백이 완료된 후 스레드 안전 기능을 사용하여 스레드가 남아 있지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0ce53004853a0d3cc308cfeea91d8ad9ccd6880" translate="yes" xml:space="preserve">
          <source>Upon success, the &lt;code&gt;Promise&lt;/code&gt; is resolved without arguments.</source>
          <target state="translated">성공하면 &lt;code&gt;Promise&lt;/code&gt; 은 논쟁없이 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="2de39f1fb97e8b9fad2a13c376d5983dda0775fd" translate="yes" xml:space="preserve">
          <source>Usage &amp;amp; Example</source>
          <target state="translated">사용법 및 예</target>
        </trans-unit>
        <trans-unit id="e52c8372eec3736296f93f87fe2977417bbb2721" translate="yes" xml:space="preserve">
          <source>Usage and example</source>
          <target state="translated">사용법 및 예</target>
        </trans-unit>
        <trans-unit id="d36ee1550e836b658bce06b4f1d49c2dec79550a" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;ECDH&lt;/code&gt; with non-dynamically generated key pairs has been simplified. Now, &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; can be called with a preselected private key and the associated public point (key) will be computed and stored in the object. This allows code to only store and provide the private part of the EC key pair. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; now also validates that the private key is valid for the selected curve.</source>
          <target state="translated">동적으로 생성되지 않은 키 페어와 함께 &lt;code&gt;ECDH&lt;/code&gt; 사용 이 단순화되었습니다. 이제 &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 를 미리 선택된 개인 키로 호출 할 수 있으며 관련 공개 지점 (키)이 계산되어 객체에 저장됩니다. 이를 통해 코드는 EC 키 쌍의 개인 부분 만 저장하고 제공 할 수 있습니다. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt; 이제 개인 키가 선택된 곡선에 유효한지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5ff118bed7c719c614a84434b5439be16bf71d2c" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;util.inherits()&lt;/code&gt; is discouraged. Please use the ES6 &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords to get language level inheritance support. Also note that the two styles are &lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;semantically incompatible&lt;/a&gt;.</source>
          <target state="translated">의 사용 &lt;code&gt;util.inherits()&lt;/code&gt; 좋습니다. ES6의 사용하십시오 &lt;code&gt;class&lt;/code&gt; 및 &lt;code&gt;extends&lt;/code&gt; 언어 수준의 상속 지원을받을 키워드를. 또한 두 스타일은 &lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;의미 상 호환되지 않습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a7631402d6fe2c428c59f2ef506230c3fbbc9e7d" translate="yes" xml:space="preserve">
          <source>Usage with &lt;code&gt;async/await&lt;/code&gt;</source>
          <target state="translated">사용법과 &lt;code&gt;async/await&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="eae67d2af37c578abfdf9b05166c5445461a54fd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt;&lt;code&gt;crypto.getCurves()&lt;/code&gt;&lt;/a&gt; to obtain a list of available curve names. On recent OpenSSL releases, &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; will also display the name and description of each available elliptic curve.</source>
          <target state="translated">사용 가능한 커브 이름 목록을 얻으려면 &lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt; &lt;code&gt;crypto.getCurves()&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 . 최근 OpenSSL 릴리스에서 &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; 에는 사용 가능한 각 타원 곡선의 이름과 설명도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="765064bc0f2ebbee5fd48d238b26225a203b8acc" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt;&lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt;&lt;/a&gt; API instead which provides a much safer, and more convenient, alternative. See &lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513&lt;/a&gt;.</source>
          <target state="translated">보다 안전하고 편리한 대안을 제공하는 &lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt; &lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt; &lt;/a&gt; API를 대신 사용하십시오 . &lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513을&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="49f7b175b350d863eddd6c45e7bde6196f5a3dae" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_request_destroy_error&quot;&gt;&lt;code&gt;request.destroy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http#http_request_abort&quot;&gt;&lt;code&gt;request.abort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;a href=&quot;http#http_request_destroy_error&quot;&gt; &lt;code&gt;request.destroy()&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;http#http_request_abort&quot;&gt; &lt;code&gt;request.abort()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6154b148a1c536c520dcd143957f4ee42fa11bca" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_response_writablefinished&quot;&gt;&lt;code&gt;response.writableFinished&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http#http_response_writableended&quot;&gt;&lt;code&gt;response.writableEnded&lt;/code&gt;&lt;/a&gt; accordingly instead to avoid the ambigiuty.</source>
          <target state="translated">모호함을 피하기 위해 대신 &lt;a href=&quot;http#http_response_writablefinished&quot;&gt; &lt;code&gt;response.writableFinished&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;http#http_response_writableended&quot;&gt; &lt;code&gt;response.writableEnded&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="21fffe7297300dbe9e8fff2c0d9e6bf6dadca3c2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Content-Length&lt;/code&gt; or &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;Content-Length&lt;/code&gt; 또는 &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0002c56173cba9691148346f5ff59f5e6272f3f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;cwd&lt;/code&gt; to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory.</source>
          <target state="translated">사용 &lt;code&gt;cwd&lt;/code&gt; 프로세스가 양산되는 작업 디렉토리를 지정할 수 있습니다. 지정하지 않으면 기본값은 현재 작업 디렉토리를 상속하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f76aedfcb8be71f942f01d87d5c0635892414e98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;delete&lt;/code&gt; to delete a property from &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.env&lt;/code&gt; 에서 특성을 삭제 하려면 &lt;code&gt;delete&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf939c90dc4dd9f69fea1af3d6551d592973f347" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;env&lt;/code&gt; to specify environment variables that will be visible to the new process, the default is &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; 를 사용하여 새 프로세스에 표시 될 환경 변수를 지정 하십시오 . 기본값은 &lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bdf8f57531e78c20b41a30f579a4c55918a56c3e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;nc&lt;/code&gt; to connect to a Unix domain socket server:</source>
          <target state="translated">&lt;code&gt;nc&lt;/code&gt; 를 사용하여 Unix 도메인 소켓 서버에 연결 하십시오 .</target>
        </trans-unit>
        <trans-unit id="356edf58e99c3593deffa78d682258b2fdf50801" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;require('crypto')&lt;/code&gt; to access this module.</source>
          <target state="translated">이 모듈에 액세스 하려면 &lt;code&gt;require('crypto')&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="38303ef87943f896c6983d0f7cf9a70cfee6997e" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;dynamic instantiate hook&lt;/a&gt;</source>
          <target state="translated">용도 &lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;동적 인스턴스화 후크를&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e8deebbe7ac1f499b778249832e695a840225107" translate="yes" xml:space="preserve">
          <source>Use an insecure HTTP parser that accepts invalid HTTP headers. This may allow interoperability with non-conformant HTTP implementations. It may also allow request smuggling and other HTTP attacks that rely on invalid headers being accepted. Avoid using this option.</source>
          <target state="translated">잘못된 HTTP 헤더를 허용하는 안전하지 않은 HTTP 구문 분석기를 사용하십시오. 이것은 부적합한 HTTP 구현과의 상호 운용성을 허용 할 수 있습니다. 또한 허용되는 잘못된 헤더에 의존하는 요청 밀수 및 기타 HTTP 공격을 허용 할 수 있습니다. 이 옵션을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="dec969f970ae2da31370314777710e2a530ab15f" translate="yes" xml:space="preserve">
          <source>Use bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL's default CA store. The default store is selectable at build-time.</source>
          <target state="translated">현재 Node.js 버전에서 제공 한 번들로 제공되는 Mozilla CA 저장소를 사용하거나 OpenSSL의 기본 CA 저장소를 사용하십시오. 기본 저장소는 빌드시 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66143e2c420f8a7613239f1e3efea9682fa4826d" translate="yes" xml:space="preserve">
          <source>Use care when dropping privileges:</source>
          <target state="translated">권한을 버릴 때주의하십시오 :</target>
        </trans-unit>
        <trans-unit id="c22810f5eadd6fdab3516f9428266e7d74af7b11" translate="yes" xml:space="preserve">
          <source>Use care when using &lt;code&gt;.searchParams&lt;/code&gt; to modify the &lt;code&gt;URL&lt;/code&gt; because, per the WHATWG specification, the &lt;code&gt;URLSearchParams&lt;/code&gt; object uses different rules to determine which characters to percent-encode. For instance, the &lt;code&gt;URL&lt;/code&gt; object will not percent encode the ASCII tilde (&lt;code&gt;~&lt;/code&gt;) character, while &lt;code&gt;URLSearchParams&lt;/code&gt; will always encode it:</source>
          <target state="translated">&lt;code&gt;.searchParams&lt;/code&gt; 를 사용 하여 &lt;code&gt;URL&lt;/code&gt; 을 수정할 때주의하십시오 . WHATWG 사양에 따라 &lt;code&gt;URLSearchParams&lt;/code&gt; 객체는 다른 규칙을 사용하여 퍼센트 인코딩 할 문자를 결정하기 때문입니다. 예를 들어 &lt;code&gt;URL&lt;/code&gt; 객체는 ASCII 물결표 ( &lt;code&gt;~&lt;/code&gt; ) 문자를 백분율로 인코딩하지 않지만 &lt;code&gt;URLSearchParams&lt;/code&gt; 는 항상이를 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="3f880e14ac8f636e000356a9df1eb2bc8423b67a" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;SlowBuffer&lt;/code&gt; should be used only as a last resort &lt;em&gt;after&lt;/em&gt; a developer has observed undue memory retention in their applications.</source>
          <target state="translated">개발자가 애플리케이션에서 과도한 메모리 보유를 관찰 &lt;em&gt;한 후에&lt;/em&gt; 만 &lt;code&gt;SlowBuffer&lt;/code&gt; 사용을 최후 의 수단으로 사용해야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb9a785beb4586226520f84b421e62184beadeba" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; does not guarantee that the &lt;em&gt;surrounding&lt;/em&gt; code is timing-safe. Care should be taken to ensure that the surrounding code does not introduce timing vulnerabilities.</source>
          <target state="translated">&lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; 을 사용 한다고해서 &lt;em&gt;주변&lt;/em&gt; 코드가 타이밍에 안전하다는 보장은 없습니다 . 주변 코드에 타이밍 취약점이 생기지 않도록주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2d44bc65ec8f3fb2f025187a40ecd2da6969c33" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;readable.push('')&lt;/code&gt; is not recommended.</source>
          <target state="translated">의 사용 &lt;code&gt;readable.push('')&lt;/code&gt; 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d7a18f27832e42f62a26d1adff869deccc220b01" translate="yes" xml:space="preserve">
          <source>Use of the &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;&lt;/a&gt; API without specifying a digest was deprecated in Node.js 6.0 because the method defaulted to using the non-recommended &lt;code&gt;'SHA1'&lt;/code&gt; digest. Previously, a deprecation warning was printed. Starting in Node.js 8.0.0, calling &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; or &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; with &lt;code&gt;digest&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">의 사용 &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt; &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; &lt;/a&gt; 메소드가 아닌 권장 사용하는 기본값 때문에 다이제스트를 지정하지 않고 API는 Node.js를 6.0에서 사용되지 않습니다 &lt;code&gt;'SHA1'&lt;/code&gt; 소화. 이전에는 지원 중단 경고가 인쇄되었습니다. Node.js 8.0.0부터 &lt;code&gt;digest&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 로 설정된 &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; 또는 &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; 를 호출 하면 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="d7240b7777dbbea1e8a1ef48b75d9dcfb9881251" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;101&lt;/code&gt; Informational status code is forbidden in HTTP/2.</source>
          <target state="translated">HTTP / 2 에서는 &lt;code&gt;101&lt;/code&gt; 정보 용 상태 코드를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e598d7c6a0b9a276ca5b3bfcb5495de0f13c1ad6" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; Function</source>
          <target state="translated">의 사용 &lt;code&gt;completer&lt;/code&gt; 의 기능</target>
        </trans-unit>
        <trans-unit id="d093439750831928b8de4711644263144b0afd9f" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; function</source>
          <target state="translated">의 사용 &lt;code&gt;completer&lt;/code&gt; 의 기능</target>
        </trans-unit>
        <trans-unit id="7d32435c7a197f2836dfd3532944c2482f4fd236" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;readable.pipe()&lt;/code&gt; method is recommended for most users as it has been implemented to provide the easiest way of consuming stream data. Developers that require more fine-grained control over the transfer and generation of data can use the &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;readable.on('readable')&lt;/code&gt;/&lt;code&gt;readable.read()&lt;/code&gt; or the &lt;code&gt;readable.pause()&lt;/code&gt;/&lt;code&gt;readable.resume()&lt;/code&gt; APIs.</source>
          <target state="translated">의 사용 &lt;code&gt;readable.pipe()&lt;/code&gt; 이 스트림 데이터를 소비하는 가장 쉬운 방법을 제공하기 위해 구현 된 같은 방법은 대부분의 사용자에게 권장됩니다. 데이터 전송 및 생성을보다 세밀하게 제어해야하는 개발자는 &lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;readable.on('readable')&lt;/code&gt; / &lt;code&gt;readable.read()&lt;/code&gt; 또는 &lt;code&gt;readable.pause()&lt;/code&gt; / &lt;code&gt;readable.resume()&lt;/code&gt; API를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51dda8e8d6b44f5c574aaf42f7777da76a59fa0f" translate="yes" xml:space="preserve">
          <source>Use of the API is unsafe.</source>
          <target state="translated">API 사용은 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="948edf4448016b2dd50434fa23064801c2a1cb22" translate="yes" xml:space="preserve">
          <source>Use of the legacy &lt;code&gt;url.parse()&lt;/code&gt; method is discouraged. Users should use the WHATWG &lt;code&gt;URL&lt;/code&gt; API. Because the &lt;code&gt;url.parse()&lt;/code&gt; method uses a lenient, non-standard algorithm for parsing URL strings, security issues can be introduced. Specifically, issues with &lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;host name spoofing&lt;/a&gt; and incorrect handling of usernames and passwords have been identified.</source>
          <target state="translated">레거시 &lt;code&gt;url.parse()&lt;/code&gt; 메서드를 사용하지 않는 것이 좋습니다. 사용자는 WHATWG &lt;code&gt;URL&lt;/code&gt; API를 사용해야합니다 . &lt;code&gt;url.parse()&lt;/code&gt; 메서드는 URL 문자열을 구문 분석하는 데 관대 한 비표준 알고리즘을 사용 하기 때문에 보안 문제가 발생할 수 있습니다. 특히 &lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;호스트 이름 스푸핑&lt;/a&gt; 문제와 사용자 이름 및 암호의 잘못된 처리 문제 가 확인되었습니다.</target>
        </trans-unit>
        <trans-unit id="ecb58157819114bf578e605246aad486b041e117" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">이 미리 할당 된 내부 메모리 풀을 사용하는 것은 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 대 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; 호출의 주요 차이점 입니다. 특히 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 은 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용 &lt;em&gt;하지 않는&lt;/em&gt; 반면, &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;은 &lt;/em&gt; &lt;code&gt;size&lt;/code&gt; 가 &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; 의&lt;/a&gt; 절반 이하인 경우 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용합니다 . 차이점은 미묘하지만 응용 프로그램에 &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 제공 하는 추가 성능이 필요할 때 중요 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e255a577e807bc002dfb0d84533a52b730e80888" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">이 사전 할당 된 내부 메모리 풀의 사용은 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 호출 과 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; 호출의 주요 차이점 입니다. 특히 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; 은 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용 &lt;em&gt;하지 않는&lt;/em&gt; 반면, &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;은 &lt;/em&gt; &lt;code&gt;size&lt;/code&gt; 가 &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; &lt;/a&gt; 절반 이하인 경우 내부 &lt;code&gt;Buffer&lt;/code&gt; 풀을 사용합니다 . 차이는 미묘하지만 응용 프로그램에 &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt; 제공 하는 추가 성능이 필요할 때 중요 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e7a11077ab4673062788e7639d751aef808d830d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field of a manifest to set configuration for many resources at once. The &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field works by matching resources by their segments. If a scope or resource includes &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt;, unknown specifiers will be searched for in their containing scope. The containing scope for cascading is found by recursively reducing the resource URL by removing segments for &lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;special schemes&lt;/a&gt;, keeping trailing &lt;code&gt;&quot;/&quot;&lt;/code&gt; suffixes, and removing the query and hash fragment. This leads to the eventual reduction of the URL to its origin. If the URL is non-special the scope will be located by the URL's origin. If no scope is found for the origin or in the case of opaque origins, a protocol string can be used as a scope.</source>
          <target state="translated">매니페스트 의 &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; 필드를 사용하여 한 번에 여러 리소스에 대한 구성을 설정합니다. 는 &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; 필드는 세그먼트에 의해 자원을 일치시켜 작동합니다. 범위 또는 리소스에 &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt; 포함 된 경우 포함 된 범위 에서 알 수없는 지정자가 검색됩니다. 캐스 케이 딩에 대한 포함 범위는 &lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;특수 체계에&lt;/a&gt; 대한 세그먼트를 제거 하고 후행 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 접미사를 유지 하며 쿼리 및 해시 조각 을 제거하여 리소스 URL을 반복적으로 줄임으로써 찾을 수 있습니다. 이로 인해 URL이 원본으로 줄어 듭니다. URL이 특별하지 않은 경우 범위는 URL의 출처를 기준으로합니다. 출처에 대한 범위를 찾을 수 없거나 출처가 불투명 한 경우프로토콜 문자열을 범위로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c412511e5a0d8bdf92bc274feb5291adda3aa57" translate="yes" xml:space="preserve">
          <source>Use the dynamically loaded pointer to invoke the function.</source>
          <target state="translated">동적으로로드 된 포인터를 사용하여 함수를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="ae952fa27153fb5a58933981baea15f63402ec27" translate="yes" xml:space="preserve">
          <source>Use the internal &lt;code&gt;require()&lt;/code&gt; machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</source>
          <target state="translated">내부 &lt;code&gt;require()&lt;/code&gt; 기계를 사용하여 모듈의 위치를 ​​찾으십시오. 그러나 모듈을로드하는 대신 확인 된 파일 이름 만 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="15ee6e17c37012897af5f61e78384cc87974d16d" translate="yes" xml:space="preserve">
          <source>Use the specified file as a security policy.</source>
          <target state="translated">지정된 파일을 보안 정책으로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3380a8b2c6439c7c83ba160cfc5cef5210723c7c" translate="yes" xml:space="preserve">
          <source>Use this to determine what colors the terminal supports. Due to the nature of colors in terminals it is possible to either have false positives or false negatives. It depends on process information and the environment variables that may lie about what terminal is used. It is possible to pass in an &lt;code&gt;env&lt;/code&gt; object to simulate the usage of a specific terminal. This can be useful to check how specific environment settings behave.</source>
          <target state="translated">이를 사용하여 터미널이 지원하는 색상을 결정하십시오. 터미널의 색상 특성으로 인해 오탐 (false positive) 또는 오탐 (false negative)이 발생할 수 있습니다. 프로세스 정보 및 사용되는 터미널에 대한 환경 변수에 따라 다릅니다. 특정 터미널의 사용법을 시뮬레이션하기 위해 &lt;code&gt;env&lt;/code&gt; 객체 를 전달할 수 있습니다 . 특정 환경 설정의 작동 방식을 확인하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
