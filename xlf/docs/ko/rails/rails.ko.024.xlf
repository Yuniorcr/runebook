<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="be7e376f41a66410dfe8064842fb23c80123304f" translate="yes" xml:space="preserve">
          <source>There are four types of callbacks accepted by the callback macros: &lt;a href=&quot;../method&quot;&gt;Method&lt;/a&gt; references (symbol), callback objects, inline methods (using a proc). &lt;a href=&quot;../method&quot;&gt;Method&lt;/a&gt; references and callback objects are the recommended approaches, inline methods using a proc are sometimes appropriate (such as for creating mix-ins).</source>
          <target state="translated">콜백 매크로에 허용되는 콜백에는 네 가지 유형이 있습니다. &lt;a href=&quot;../method&quot;&gt;메소드&lt;/a&gt; 참조 (기호), 콜백 객체, 인라인 메소드 (프로세스 사용). &lt;a href=&quot;../method&quot;&gt;메소드&lt;/a&gt; 참조 및 콜백 객체가 권장되는 접근 방식이며, proc을 사용하는 인라인 메소드가 적절한 경우가 있습니다 (예 : 믹스 인 작성).</target>
        </trans-unit>
        <trans-unit id="c3c560843f70069524c11e393bc20f191103e246" translate="yes" xml:space="preserve">
          <source>There are just three methods that you need to send pretty much any email message:</source>
          <target state="translated">거의 모든 전자 메일 메시지를 보내야하는 세 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c03497c42b565308fa509564379e1b6c94969d2" translate="yes" xml:space="preserve">
          <source>There are many other possibilities, like using a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to make a cross-site request to a URL with a JSONP or JavaScript response. The response is executable code that the attacker can find a way to run, possibly extracting sensitive data. To protect against this data leakage, we must disallow cross-site &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. Ajax requests, however, obey the browser's same-origin policy (only your own site is allowed to initiate &lt;code&gt;XmlHttpRequest&lt;/code&gt;) so we can safely allow them to return JavaScript responses.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그를 사용하여 JSONP 또는 JavaScript 응답으로 URL에 사이트 간 요청을하는 것과 같은 다른 많은 가능성이 있습니다 . 응답은 공격자가 실행할 방법을 찾아 민감한 데이터를 추출 할 수있는 실행 코드입니다. 이러한 데이터 유출을 방지하려면 교차 사이트 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그를 허용하지 않아야 합니다. 그러나 Ajax 요청은 브라우저의 동일 출처 정책 (자신의 사이트에서만 &lt;code&gt;XmlHttpRequest&lt;/code&gt; 시작 가능)을 준수 하므로 JavaScript 응답을 안전하게 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fdedcb9b572bfe35fee43800e0ce6d8a996a6eb" translate="yes" xml:space="preserve">
          <source>There are many ways to change the state of an object in the database. Some methods will trigger validations, but some will not. This means that it's possible to save an object in the database in an invalid state if you aren't careful.</source>
          <target state="translated">데이터베이스에서 객체의 상태를 변경하는 방법은 여러 가지가 있습니다. 일부 방법은 유효성 검사를 트리거하지만 일부 방법은 그렇지 않습니다. 즉, 조심하지 않으면 데이터베이스의 개체를 유효하지 않은 상태로 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be3d1d3662c8729fe79089273eee95478741ca7c" translate="yes" xml:space="preserve">
          <source>There are more assertions that are primarily used in testing views:</source>
          <target state="translated">뷰 테스트에 주로 사용되는 어설 션이 더 있습니다.</target>
        </trans-unit>
        <trans-unit id="0459e5f5d8125a1edf5f2a32d607e4e205291d19" translate="yes" xml:space="preserve">
          <source>There are multiple ways to use the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-joins&quot;&gt;&lt;code&gt;joins&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-joins&quot;&gt; &lt;code&gt;joins&lt;/code&gt; &lt;/a&gt; 방법 을 사용하는 방법에는 여러 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1807ce7145d108f1d111bf9da906ad3f26500e7c" translate="yes" xml:space="preserve">
          <source>There are multiple ways to use the &lt;code&gt;joins&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;joins&lt;/code&gt; 방법 을 사용하는 방법에는 여러 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cdace6e611a641782f6c7a3abdc744026f582f53" translate="yes" xml:space="preserve">
          <source>There are nineteen callbacks in total, which give a lot of control over how to react and prepare for each state in the Active Record life cycle. The sequence for calling &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; for an existing record is similar, except that each &lt;code&gt;_create&lt;/code&gt; callback is replaced by the corresponding &lt;code&gt;_update&lt;/code&gt; callback.</source>
          <target state="translated">총 19 개의 콜백이 있으며 Active Record 수명주기의 각 상태에 대해 반응하고 준비하는 방법을 많이 제어 할 수 있습니다. 기존 레코드에 대해 &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord :: Base # save&lt;/a&gt; 를 호출하는 순서 는 비슷하지만 각 &lt;code&gt;_create&lt;/code&gt; 콜백이 해당 &lt;code&gt;_update&lt;/code&gt; 콜백으로 대체된다는 점이 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="6d2fd0d7d839d4055f6084f32e67d508fe996a9f" translate="yes" xml:space="preserve">
          <source>There are nineteen callbacks in total, which give you immense power to react and prepare for each state in the Active Record life cycle. The sequence for calling &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; for an existing record is similar, except that each &lt;code&gt;_create&lt;/code&gt; callback is replaced by the corresponding &lt;code&gt;_update&lt;/code&gt; callback.</source>
          <target state="translated">총 19 개의 콜백이있어 활성 레코드 수명주기에서 각 상태에 대해 반응하고 준비 할 수 있습니다. 기존 레코드에 대해 &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord :: Base # save&lt;/a&gt; 를 호출하는 순서 는 비슷하지만 각 &lt;code&gt;_create&lt;/code&gt; 콜백이 해당 &lt;code&gt;_update&lt;/code&gt; 콜백으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="60676983eb349d9e47dfbfa92f1781e6b9e4aa75" translate="yes" xml:space="preserve">
          <source>There are no columns defined on the model side, Active Storage takes care of the mapping between your records and the attachments.</source>
          <target state="translated">모델 측에는 열이 정의되어 있지 않으며 Active Storage는 레코드와 첨부 파일 간의 매핑을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="df256418346b53d1574fb832c21a0cf0b180a492" translate="yes" xml:space="preserve">
          <source>There are now no strict dependencies on what the class is, only what the API for the class must be. The engine simply requires this class to define a &lt;code&gt;find_or_create_by&lt;/code&gt; method which returns an object of that class, to be associated with an article when it's created. This object, of course, should have some sort of identifier by which it can be referenced.</source>
          <target state="translated">이제 클래스가 무엇인지에 대한 엄격한 종속성이 없으며 클래스의 API 만 있어야합니다. 엔진은이 클래스를 사용 하여 기사를 작성할 때 기사와 연관 될 해당 클래스의 오브젝트를 리턴하는 &lt;code&gt;find_or_create_by&lt;/code&gt; 메소드 를 정의하기 만하면 됩니다. 물론이 객체에는 참조 할 수있는 일종의 식별자가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="ce0a39ba9b7cf48f4c6055538e9adba40239a005" translate="yes" xml:space="preserve">
          <source>There are several connection-pooling-related options that you can add to your database connection configuration:</source>
          <target state="translated">데이터베이스 연결 구성에 추가 할 수있는 몇 가지 연결 풀 관련 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d09e94233e371f2acd22df3db52bf1c02623b2a7" translate="yes" xml:space="preserve">
          <source>There are several drawbacks to &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;&lt;code&gt;create_or_find_by&lt;/code&gt;&lt;/a&gt;, though:</source>
          <target state="translated">하지만 &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt; &lt;code&gt;create_or_find_by&lt;/code&gt; &lt;/a&gt; 에는 몇 가지 단점이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9d0cadb28de56ba0c481802976db1808b725da35" translate="yes" xml:space="preserve">
          <source>There are several drawbacks to &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt;, though:</source>
          <target state="translated">&lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt; 에는 몇 가지 단점이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5f6274648b333846f41816feb18e009ef513ce0" translate="yes" xml:space="preserve">
          <source>There are several other ways to validate data before it is saved into your database, including native database constraints, client-side validations and controller-level validations. Here's a summary of the pros and cons:</source>
          <target state="translated">기본 데이터베이스 제한 조건, 클라이언트 측 유효성 검증 및 컨트롤러 레벨 유효성 검증을 포함하여 데이터베이스에 데이터를 저장하기 전에 데이터를 유효성 검증하는 몇 가지 다른 방법이 있습니다. 장단점은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a69c97218c629d30b6c90b8aa47cb72f59eb27cb" translate="yes" xml:space="preserve">
          <source>There are several reasons why you might want to precompile your assets locally. Among them are:</source>
          <target state="translated">자산을 로컬로 사전 컴파일하려는 몇 가지 이유가 있습니다. 그들 중에는 :</target>
        </trans-unit>
        <trans-unit id="f6dd344381ca41fca48a944fef01bf54b6f098f4" translate="yes" xml:space="preserve">
          <source>There are several ways of getting similar results with different sub-templating schemes using this technique. Note that there is no limit in nesting levels. One can use the &lt;code&gt;ActionView::render&lt;/code&gt; method via &lt;code&gt;render template: 'layouts/news'&lt;/code&gt; to base a new layout on the News layout. If you are sure you will not subtemplate the &lt;code&gt;News&lt;/code&gt; layout, you can replace the &lt;code&gt;content_for?(:news_content) ? yield(:news_content) : yield&lt;/code&gt; with simply &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">이 기술을 사용하여 다른 하위 템플릿 구성표로 유사한 결과를 얻는 방법에는 여러 가지가 있습니다. 중첩 수준에는 제한이 없습니다. 하나는 사용할 수 &lt;code&gt;ActionView::render&lt;/code&gt; 을 통해 방법 &lt;code&gt;render template: 'layouts/news'&lt;/code&gt; 뉴스 레이아웃에 새로운 레이아웃을 기반으로 할 수 있습니다. &lt;code&gt;News&lt;/code&gt; 레이아웃을 서브 템플릿하지 않을 것이 확실하다면 &lt;code&gt;content_for?(:news_content) ? yield(:news_content) : yield&lt;/code&gt; 간단히 &lt;code&gt;yield&lt;/code&gt; 로 합니다.</target>
        </trans-unit>
        <trans-unit id="05d34b5eeec278136a8ea22b0adb2ea3accd5683" translate="yes" xml:space="preserve">
          <source>There are several ways to do this safely. For instance, the application could define a class method &lt;code&gt;PaymentGateway.impl&lt;/code&gt; whose definition depends on the environment; or could define &lt;code&gt;PaymentGateway&lt;/code&gt; to have a parent class or mixin that depends on the environment; or use the same global variable trick, but in a reloader callback, as explained below.</source>
          <target state="translated">이 작업을 안전하게 수행하는 방법에는 여러 가지가 있습니다. 예를 들어, 애플리케이션은 정의가 환경에 따라 달라지는 &lt;code&gt;PaymentGateway.impl&lt;/code&gt; 클래스 메소드를 정의 할 수 있습니다. 또는 환경에 따라 부모 클래스 또는 믹스 인을 갖도록 &lt;code&gt;PaymentGateway&lt;/code&gt; 를 정의 할 수 있습니다. 또는 동일한 전역 변수 트릭을 사용하지만 아래에 설명 된대로 리 로더 콜백에서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="eaecf0b4d2e44c25af3b3721a0250e08a8cd2eee" translate="yes" xml:space="preserve">
          <source>There are some Rails plugins to help you to find errors and debug your application. Here is a list of useful plugins for debugging:</source>
          <target state="translated">오류를 찾고 응용 프로그램을 디버깅하는 데 도움이되는 몇 가지 Rails 플러그인이 있습니다. 디버깅에 유용한 플러그인 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3504c265baaaac9aa5bf497840b330969a940f12" translate="yes" xml:space="preserve">
          <source>There are some cases where you may want your application to connect to a primary or a replica and the automatic connection switching isn't adequate. For example, you may know that for a particular request you always want to send the request to a replica, even when you are in a POST request path.</source>
          <target state="translated">응용 프로그램을 기본 또는 복제본에 연결하고 자동 연결 전환이 적합하지 않은 경우가 있습니다. 예를 들어, 특정 요청의 경우 POST 요청 경로에 있더라도 항상 요청을 복제본으로 보내려고한다는 것을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ee72cf3d99d9549de4c625f9b86b14c0f76a2f0" translate="yes" xml:space="preserve">
          <source>There are some cases where you may want your application to connect to a writer or a replica and the automatic connection switching isn't adequate. For example, you may know that for a particular request you always want to send the request to a replica, even when you are in a POST request path.</source>
          <target state="translated">애플리케이션이 작성기 또는 복제본에 연결되기를 원하고 자동 연결 전환이 적절하지 않은 경우가 있습니다. 예를 들어 특정 요청에 대해 POST 요청 경로에있는 경우에도 항상 복제본에 요청을 보내려고한다는 것을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dcb72f26c9dfff3c7688908dbc5a105968528743" translate="yes" xml:space="preserve">
          <source>There are some common options that can be used by all cache implementations. These can be passed to the constructor or the various methods to interact with entries.</source>
          <target state="translated">모든 캐시 구현에서 사용할 수있는 몇 가지 공통 옵션이 있습니다. 이들은 항목과 상호 작용하기 위해 생성자 또는 다양한 메소드로 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2325217393bb4e236ec11a3514d7759e8a18cf18" translate="yes" xml:space="preserve">
          <source>There are some examples below. This guide won't cover all the possibilities, just a few as examples. When an Active Record method is called, the query is not immediately generated and sent to the database, this just happens when the data is actually needed. So each example below generates a single query.</source>
          <target state="translated">아래에 몇 가지 예가 있습니다. 이 가이드는 모든 가능성을 다루지는 않고 단지 몇 가지 예를 들어 설명합니다. Active Record 메서드가 호출되면 쿼리가 즉시 생성되어 데이터베이스로 전송되지 않습니다. 이는 데이터가 실제로 필요할 때만 발생합니다. 따라서 아래의 각 예는 단일 쿼리를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="5826f75f7e7126cd08992239f47f6887533a17f8" translate="yes" xml:space="preserve">
          <source>There are some examples below. This guide won't cover all the possibilities, just a few as examples. When an Active Record method is called, the query is not immediately generated and sent to the database. The query is sent only when the data is actually needed. So each example below generates a single query.</source>
          <target state="translated">아래에 몇 가지 예가 있습니다. 이 가이드는 모든 가능성을 다루지는 않고 단지 몇 가지 예를 들어 설명합니다. Active Record 메서드가 호출되면 쿼리가 즉시 생성되어 데이터베이스로 전송되지 않습니다. 쿼리는 데이터가 실제로 필요한 경우에만 전송됩니다. 따라서 아래의 각 예는 단일 쿼리를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="f44c42117c2e27fc38b3118894601990c020d261" translate="yes" xml:space="preserve">
          <source>There are some more advanced features available even if the id is specified:</source>
          <target state="translated">ID가 지정된 경우에도 사용할 수있는 고급 기능이 몇 가지 더 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea5ee6e4140486c1d5ec07c446c69b308d880080" translate="yes" xml:space="preserve">
          <source>There are some other subtle differences, please check &lt;a href=&quot;upgrading_ruby_on_rails#autoloading&quot;&gt;this section of &lt;em&gt;Upgrading Ruby on Rails&lt;/em&gt;&lt;/a&gt; guide for details.</source>
          <target state="translated">다른 미묘한 차이점 &lt;a href=&quot;upgrading_ruby_on_rails#autoloading&quot;&gt;이&lt;em&gt;&lt;/em&gt;&lt;/a&gt; 있습니다. 자세한 내용은 &lt;em&gt;Ruby on Rails 업그레이드&lt;/em&gt; 가이드 의이 섹션을 확인 하세요.</target>
        </trans-unit>
        <trans-unit id="14faa76835e014a527d5b1b7b1bb9d3a6e93a8d7" translate="yes" xml:space="preserve">
          <source>There are some places where an Engine's name is used:</source>
          <target state="translated">엔진 이름이 사용되는 곳이 있습니다.</target>
        </trans-unit>
        <trans-unit id="43cf0b88b8551e64c48fb3b55a17204b0a22229c" translate="yes" xml:space="preserve">
          <source>There are some situations where your engine's assets are not required by the host application. For example, say that you've created an admin functionality that only exists for your engine. In this case, the host application doesn't need to require &lt;code&gt;admin.css&lt;/code&gt; or &lt;code&gt;admin.js&lt;/code&gt;. Only the gem's admin layout needs these assets. It doesn't make sense for the host app to include &lt;code&gt;&quot;blorgh/admin.css&quot;&lt;/code&gt; in its stylesheets. In this situation, you should explicitly define these assets for precompilation. This tells Sprockets to add your engine assets when &lt;code&gt;bin/rails assets:precompile&lt;/code&gt; is triggered.</source>
          <target state="translated">호스트 애플리케이션에서 엔진의 자산이 필요하지 않은 상황이 있습니다. 예를 들어 엔진에만 존재하는 관리자 기능을 만들었다 고 가정 해 보겠습니다. 이 경우 호스트 애플리케이션에 &lt;code&gt;admin.css&lt;/code&gt; 또는 &lt;code&gt;admin.js&lt;/code&gt; 가 필요하지 않습니다 . gem의 관리자 레이아웃에만 이러한 자산이 필요합니다. 호스트 앱 이 스타일 시트에 &lt;code&gt;&quot;blorgh/admin.css&quot;&lt;/code&gt; 를 포함하는 것은 의미가 없습니다 . 이 상황에서는 사전 컴파일을 위해 이러한 자산을 명시 적으로 정의해야합니다. 이것은 &lt;code&gt;bin/rails assets:precompile&lt;/code&gt; 이 트리거 될 때 Sprockets에 엔진 자산을 추가하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="27a508a465b22ff0965c167edd7ee17a8164704a" translate="yes" xml:space="preserve">
          <source>There are some situations where your engine's assets are not required by the host application. For example, say that you've created an admin functionality that only exists for your engine. In this case, the host application doesn't need to require &lt;code&gt;admin.css&lt;/code&gt; or &lt;code&gt;admin.js&lt;/code&gt;. Only the gem's admin layout needs these assets. It doesn't make sense for the host app to include &lt;code&gt;&quot;blorgh/admin.css&quot;&lt;/code&gt; in its stylesheets. In this situation, you should explicitly define these assets for precompilation. This tells Sprockets to add your engine assets when &lt;code&gt;rails assets:precompile&lt;/code&gt; is triggered.</source>
          <target state="translated">호스트 응용 프로그램에 엔진의 자산이 필요하지 않은 상황이 있습니다. 예를 들어 엔진에만 존재하는 관리자 기능을 만들었다 고 가정 해보십시오. 이 경우 호스트 응용 프로그램에 &lt;code&gt;admin.css&lt;/code&gt; 또는 &lt;code&gt;admin.js&lt;/code&gt; 가 필요하지 않습니다 . gem의 관리자 레이아웃에만 이러한 자산이 필요합니다. 호스트 앱 이 스타일 시트에 &lt;code&gt;&quot;blorgh/admin.css&quot;&lt;/code&gt; 를 포함하는 것은 이치에 맞지 않습니다 . 이 경우 사전 컴파일을 위해 이러한 자산을 명시 적으로 정의해야합니다. 이는 &lt;code&gt;rails assets:precompile&lt;/code&gt; 이 트리거 될 때 Sprockets에 엔진 자산을 추가하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="eafc5e31bbabf67fe699f3bf8db1b952c9f7fdb7" translate="yes" xml:space="preserve">
          <source>There are three caveats:</source>
          <target state="translated">세 가지 경고가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e188cdad09cfb6d1d34ff6a8e5ddae318e8c144e" translate="yes" xml:space="preserve">
          <source>There are three tag options available for the &lt;code&gt;auto_discovery_link_tag&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;auto_discovery_link_tag&lt;/code&gt; 에 사용할 수있는 태그 옵션에는 세 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="86ec3b19791a55616092e16da9a9f0a04bb1a927" translate="yes" xml:space="preserve">
          <source>There are three types of callbacks accepted by the callback macros: method references (symbol), callback objects, inline methods (using a proc). &lt;a href=&quot;../method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; references and callback objects are the recommended approaches, inline methods using a proc are sometimes appropriate (such as for creating mix-ins).</source>
          <target state="translated">콜백 매크로에서 허용하는 콜백에는 메서드 참조 (기호), 콜백 객체, 인라인 메서드 (proc 사용)의 세 가지 유형이 있습니다. &lt;a href=&quot;../method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt; 참조 및 콜백 개체가 권장되는 접근 방식이며 proc을 사용하는 인라인 메서드가 때때로 적절합니다 (예 : 믹스 인 생성).</target>
        </trans-unit>
        <trans-unit id="22616ec1cb1b82bc502e98a842309397e39db66a" translate="yes" xml:space="preserve">
          <source>There are times, however, in which you want to make sure a certain constant is known when the execution reaches some code. &lt;code&gt;require_dependency&lt;/code&gt; provides a way to load a file using the current &lt;a href=&quot;#loading-mechanism&quot;&gt;loading mechanism&lt;/a&gt;, and keeping track of constants defined in that file as if they were autoloaded to have them reloaded as needed.</source>
          <target state="translated">그러나 실행이 일부 코드에 도달 할 때 특정 상수를 알고 싶은 경우가 있습니다. &lt;code&gt;require_dependency&lt;/code&gt; 는 현재 &lt;a href=&quot;#loading-mechanism&quot;&gt;로딩 메커니즘을&lt;/a&gt; 사용하여 파일을로드하는 방법을 제공하고, 파일 이 필요에 따라 다시로드되도록 자동로드 된 것처럼 해당 파일에 정의 된 상수를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="bcb3e24e966cabff8d755750dd05f2c6c1cd0b8b" translate="yes" xml:space="preserve">
          <source>There are two additional callbacks that are triggered by the completion of a database transaction: &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit&quot;&gt;&lt;code&gt;after_commit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback&quot;&gt;&lt;code&gt;after_rollback&lt;/code&gt;&lt;/a&gt;. These callbacks are very similar to the &lt;code&gt;after_save&lt;/code&gt; callback except that they don't execute until after database changes have either been committed or rolled back. They are most useful when your active record models need to interact with external systems which are not part of the database transaction.</source>
          <target state="translated">데이터베이스 트랜잭션 완료에 의해 트리거되는 두 개의 추가 콜백이 있습니다. &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit&quot;&gt; &lt;code&gt;after_commit&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback&quot;&gt; &lt;code&gt;after_rollback&lt;/code&gt; &lt;/a&gt; . 이러한 콜백은 데이터베이스 변경 사항이 커밋되거나 롤백 될 때까지 실행되지 않는다는 점을 제외 하면 &lt;code&gt;after_save&lt;/code&gt; 콜백 과 매우 유사합니다 . 활성 레코드 모델이 데이터베이스 트랜잭션의 일부가 아닌 외부 시스템과 상호 작용해야 할 때 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c3ed8e7e59b27e9304399311f3fe5faab63bd90b" translate="yes" xml:space="preserve">
          <source>There are two additional callbacks that are triggered by the completion of a database transaction: &lt;code&gt;after_commit&lt;/code&gt; and &lt;code&gt;after_rollback&lt;/code&gt;. These callbacks are very similar to the &lt;code&gt;after_save&lt;/code&gt; callback except that they don't execute until after database changes have either been committed or rolled back. They are most useful when your active record models need to interact with external systems which are not part of the database transaction.</source>
          <target state="translated">데이터베이스 트랜잭션이 완료되면 트리거되는 &lt;code&gt;after_commit&lt;/code&gt; 및 &lt;code&gt;after_rollback&lt;/code&gt; 의 두 가지 추가 콜백이 있습니다 . 이 콜백은 데이터베이스 변경이 커밋되거나 롤백 될 때까지 실행되지 않는다는 점을 제외하고 &lt;code&gt;after_save&lt;/code&gt; 콜백 과 매우 유사합니다 . 활성 레코드 모델이 데이터베이스 트랜잭션의 일부가 아닌 외부 시스템과 상호 작용해야 할 때 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="16de090de8787aa008d8d96a43d9ee739aa7f099" translate="yes" xml:space="preserve">
          <source>There are two aspects of testing your mailer, the unit tests and the functional tests. In the unit tests, you run the mailer in isolation with tightly controlled inputs and compare the output to a known value (a fixture). In the functional tests you don't so much test the minute details produced by the mailer; instead, we test that our controllers and models are using the mailer in the right way. You test to prove that the right email was sent at the right time.</source>
          <target state="translated">메일러 테스트에는 단위 테스트와 기능 테스트의 두 가지 측면이 있습니다. 단위 테스트에서는 엄격하게 제어 된 입력으로 메일러를 격리하여 실행하고 출력을 알려진 값 (고 정기)과 비교합니다. 기능 테스트에서는 메일러가 생성 한 세부 정보를 많이 테스트하지 않습니다. 대신 컨트롤러와 모델이 올바른 방식으로 메일러를 사용하고 있는지 테스트합니다. 올바른 이메일이 적시에 전송되었는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="ebec656902b77e7e217ac4c0f7cc86f86eb27a9d" translate="yes" xml:space="preserve">
          <source>There are two aspects of testing your mailer, the unit tests and the functional tests. In the unit tests, you run the mailer in isolation with tightly controlled inputs and compare the output to a known value (a fixture.) In the functional tests you don't so much test the minute details produced by the mailer; instead, we test that our controllers and models are using the mailer in the right way. You test to prove that the right email was sent at the right time.</source>
          <target state="translated">메일러 테스트에는 단위 테스트와 기능 테스트의 두 가지 측면이 있습니다. 단위 테스트에서는 엄격하게 제어 된 입력을 사용하여 메일러를 분리하여 실행하고 출력을 알려진 값 (픽스처)과 비교합니다. 기능 테스트에서는 메일러가 생성 한 미세한 세부 정보를 많이 테스트하지 않습니다. 대신 컨트롤러와 모델이 메일러를 올바르게 사용하고 있는지 테스트합니다. 적절한 시간에 올바른 이메일이 전송되었음을 증명하기 위해 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="21ab6495877059c526b8c930367d1a5ed97661b6" translate="yes" xml:space="preserve">
          <source>There are two basic forms of output:</source>
          <target state="translated">출력에는 두 가지 기본 형식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3908d57e19af4589dfaef7f9b86ed3ee6e3d3338" translate="yes" xml:space="preserve">
          <source>There are two forms of &lt;code&gt;assert_select&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;assert_select&lt;/code&gt; 에는 두 가지 형태가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ca0533bfbf4f08b36f39efa1e46c180a9514d804" translate="yes" xml:space="preserve">
          <source>There are two kinds of Active Record objects: those that correspond to a row inside your database and those that do not. When you create a fresh object, for example using the &lt;code&gt;new&lt;/code&gt; method, that object does not belong to the database yet. Once you call &lt;code&gt;save&lt;/code&gt; upon that object it will be saved into the appropriate database table. Active Record uses the &lt;code&gt;new_record?&lt;/code&gt; instance method to determine whether an object is already in the database or not. Consider the following Active Record class:</source>
          <target state="translated">Active Record 개체에는 데이터베이스 내부의 행에 해당하는 개체와 그렇지 않은 개체의 두 가지 종류가 있습니다. 예를 들어 &lt;code&gt;new&lt;/code&gt; 메서드 를 사용하여 새 개체를 만들면 해당 개체는 아직 데이터베이스에 속하지 않습니다. 해당 객체에 대해 &lt;code&gt;save&lt;/code&gt; 를 호출 하면 해당 데이터베이스 테이블에 저장됩니다. Active Record는 &lt;code&gt;new_record?&lt;/code&gt; 인스턴스 메서드를 사용하여 개체가 이미 데이터베이스에 있는지 여부를 확인합니다. 다음 Active Record 클래스를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="21763745a45506727a5852b2909e7957b19bc082" translate="yes" xml:space="preserve">
          <source>There are two kinds of Active Record objects: those that correspond to a row inside your database and those that do not. When you create a fresh object, for example using the &lt;code&gt;new&lt;/code&gt; method, that object does not belong to the database yet. Once you call &lt;code&gt;save&lt;/code&gt; upon that object it will be saved into the appropriate database table. Active Record uses the &lt;code&gt;new_record?&lt;/code&gt; instance method to determine whether an object is already in the database or not. Consider the following simple Active Record class:</source>
          <target state="translated">데이터베이스 내 행에 해당하는 개체와 그렇지 않은 개체의 두 가지 종류의 Active Record 개체가 있습니다. &lt;code&gt;new&lt;/code&gt; 메소드 를 사용하여 새 오브젝트를 작성할 때 해당 오브젝트는 아직 데이터베이스에 속하지 않습니다. 해당 오브젝트에 대해 &lt;code&gt;save&lt;/code&gt; 를 호출 하면 해당 데이터베이스 테이블에 저장됩니다. 활성 레코드는 &lt;code&gt;new_record?&lt;/code&gt; 객체가 이미 데이터베이스에 있는지 여부를 확인하는 인스턴스 메소드. 다음과 같은 간단한 Active Record 클래스를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="fefc70cada4f4163764455cd1803175c7cf08d52" translate="yes" xml:space="preserve">
          <source>There are two possible formats for the &lt;code&gt;choices&lt;/code&gt; parameter, corresponding to other helpers' output:</source>
          <target state="translated">다른 도우미의 출력에 해당하는 &lt;code&gt;choices&lt;/code&gt; 매개 변수 에는 두 가지 가능한 형식이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0cc91023998bdb1d2e4f422cbca40e4f89e8b1ae" translate="yes" xml:space="preserve">
          <source>There are two possible gotchas here in development mode:</source>
          <target state="translated">개발 모드에는 두 가지 가능한 문제점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5e43c596f90a95651acd56ed24b8ccadf92e3b4" translate="yes" xml:space="preserve">
          <source>There are two strings in our code that are in English and that users will be rendered in our response (&quot;Hello Flash&quot; and &quot;Hello World&quot;). In order to internationalize this code, these strings need to be replaced by calls to Rails' &lt;code&gt;#t&lt;/code&gt; helper with an appropriate key for each string:</source>
          <target state="translated">코드에는 영어로 된 두 개의 문자열이 있으며 사용자는 응답으로 렌더링됩니다 ( &quot;Hello Flash&quot;및 &quot;Hello World&quot;). 이 코드를 국제화하려면 이러한 문자열 을 각 문자열에 적절한 키를 사용하여 Rails의 &lt;code&gt;#t&lt;/code&gt; 도우미 호출로 대체해야 합니다.</target>
        </trans-unit>
        <trans-unit id="a46a373c0b04306478466e505e68e1e95948822b" translate="yes" xml:space="preserve">
          <source>There are two types of callbacks associated with committing and rolling back transactions: &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;&lt;code&gt;after_commit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;classmethods#method-i-after_rollback&quot;&gt;&lt;code&gt;after_rollback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">트랜잭션 커밋 및 롤백과 관련된 두 가지 유형의 콜백이 있습니다. &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt; &lt;code&gt;after_commit&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;classmethods#method-i-after_rollback&quot;&gt; &lt;code&gt;after_rollback&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0406ff92458bec18fa3c41b42493cedbdf751109" translate="yes" xml:space="preserve">
          <source>There are two types of callbacks associated with committing and rolling back transactions: &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt; and &lt;a href=&quot;classmethods#method-i-after_rollback&quot;&gt;after_rollback&lt;/a&gt;.</source>
          <target state="translated">트랜잭션 커밋 및 롤백과 관련된 두 가지 유형의 콜백이 있습니다 : &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt; 및 &lt;a href=&quot;classmethods#method-i-after_rollback&quot;&gt;after_rollback&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2fed839d5811d96a75c77988c842d3f1167e018e" translate="yes" xml:space="preserve">
          <source>There are two types of form helpers: those that specifically work with model attributes and those that don't. This helper deals with those that work with model attributes; to see an example of form helpers that don't work with model attributes, check the &lt;code&gt;ActionView::Helpers::FormTagHelper&lt;/code&gt; documentation.</source>
          <target state="translated">양식 헬퍼에는 두 가지 유형이 있습니다. 모델 속성과 함께 작동하는 것과 그렇지 않은 것입니다. 이 헬퍼는 모델 속성으로 작동하는 것을 처리합니다. 모델 속성으로 작동하지 않는 양식 헬퍼의 예제를 보려면 &lt;code&gt;ActionView::Helpers::FormTagHelper&lt;/code&gt; 문서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="f56085fc03bb10b4267212f4c8adf98797c60bac" translate="yes" xml:space="preserve">
          <source>There are two ways to build a many-to-many relationship.</source>
          <target state="translated">다 대다 관계를 구축하는 방법에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a459232a7400ba945311f0a8eea99dc78b24f4f" translate="yes" xml:space="preserve">
          <source>There are two ways to mitigate this problem.</source>
          <target state="translated">이 문제를 완화하는 데는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="695714ece75baa8719cb57f7edb9157a784685da" translate="yes" xml:space="preserve">
          <source>There are two ways to resume execution of an application that is stopped in the debugger:</source>
          <target state="translated">디버거에서 중지 된 응용 프로그램의 실행을 재개하는 방법에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="61a3984a18cbb9c885dd84356f11f4a7f8ff1af8" translate="yes" xml:space="preserve">
          <source>There are two ways to work with &lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;&lt;code&gt;create_table&lt;/code&gt;&lt;/a&gt;. You can use the block form or the regular form, like this:</source>
          <target state="translated">&lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt; &lt;code&gt;create_table&lt;/code&gt; &lt;/a&gt; 작업에는 두 가지 방법이 있습니다 . 다음과 같이 블록 양식 또는 일반 양식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="712b8504b1eed7dc8fb0d1ff75b300c48fed5b1e" translate="yes" xml:space="preserve">
          <source>There are two ways to work with &lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt;. You can use the block form or the regular form, like this:</source>
          <target state="translated">&lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt; 작업에는 두 가지 방법이 있습니다 . 다음과 같이 블록 형식 또는 일반 형식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7856da849630e83ad1164d4aea2457adeb33092a" translate="yes" xml:space="preserve">
          <source>There exist two options for &lt;code&gt;scope&lt;/code&gt; to customize shallow routes. &lt;code&gt;:shallow_path&lt;/code&gt; prefixes member paths with the specified parameter:</source>
          <target state="translated">얕은 경로를 사용자 지정 하는 &lt;code&gt;scope&lt;/code&gt; 에는 두 가지 옵션이 있습니다 . &lt;code&gt;:shallow_path&lt;/code&gt; 는 지정된 경로를 가진 멤버 경로 앞에 접두사를 붙입니다 .</target>
        </trans-unit>
        <trans-unit id="7fe658cab3ae9b31e60d801bb4eb0338faa6a33e" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;:scope&lt;/code&gt; option that you can use to specify one or more attributes that are used to limit the uniqueness check:</source>
          <target state="translated">고유성 검사를 제한하는 데 사용되는 하나 이상의 속성을 지정하는 데 사용할 수 있는 &lt;code&gt;:scope&lt;/code&gt; 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b34607bfb43676f4c857579d76a627e23d434d2" translate="yes" xml:space="preserve">
          <source>There is a naming convention for views in Rails. Typically, the views share their name with the associated controller action, as you can see above. For example, the index controller action of the &lt;code&gt;articles_controller.rb&lt;/code&gt; will use the &lt;code&gt;index.html.erb&lt;/code&gt; view file in the &lt;code&gt;app/views/articles&lt;/code&gt; directory. The complete HTML returned to the client is composed of a combination of this ERB file, a layout template that wraps it, and all the partials that the view may reference. Within this guide you will find more detailed documentation about each of these three components.</source>
          <target state="translated">Rails에는 뷰에 대한 명명 규칙이 있습니다. 일반적으로보기는 위에서 볼 수 있듯이 해당 컨트롤러 작업과 이름을 공유합니다. 예를 들어 &lt;code&gt;articles_controller.rb&lt;/code&gt; 의 인덱스 컨트롤러 작업은 &lt;code&gt;app/views/articles&lt;/code&gt; 디렉토리 의 &lt;code&gt;index.html.erb&lt;/code&gt; 보기 파일을 사용합니다 . 클라이언트에 반환 된 완전한 HTML은이 ERB 파일,이 파일을 감싸는 레이아웃 템플릿 및보기가 참조 할 수있는 모든 부분의 조합으로 구성됩니다. 이 안내서에는이 세 가지 구성 요소 각각에 대한 자세한 문서가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e0bdc618830685cdbbb31870f536506a2a6bf2e" translate="yes" xml:space="preserve">
          <source>There is a potential pitfall here: &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;&lt;code&gt;has_many&lt;/code&gt;&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; associations have records in join tables, as well as the associated records. So when we call one of these deletion methods, what exactly should be deleted?</source>
          <target state="translated">여기에 잠재적 인 함정이 있습니다. &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt; &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt; &lt;code&gt;has_many&lt;/code&gt; &lt;/a&gt; &lt;code&gt;:through&lt;/code&gt; 연결에는 조인 테이블의 레코드와 관련 레코드가 있습니다. 따라서 이러한 삭제 방법 중 하나를 호출 할 때 정확히 무엇을 삭제해야합니까?</target>
        </trans-unit>
        <trans-unit id="f860d89c3679de331732d4f89fb91db66b50e84b" translate="yes" xml:space="preserve">
          <source>There is a potential pitfall here: &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; and &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; associations have records in join tables, as well as the associated records. So when we call one of these deletion methods, what exactly should be deleted?</source>
          <target state="translated">여기에는 잠재적 인 함정이 있습니다. &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; 및 &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many &lt;/a&gt; &lt;code&gt;:through&lt;/code&gt; 연관은 연관된 레코드뿐만 아니라 결합 테이블에 레코드를 갖습니다. 따라서 이러한 삭제 방법 중 하나를 호출 할 때 정확히 무엇을 삭제해야합니까?</target>
        </trans-unit>
        <trans-unit id="0ad48ba9aa950ddaa4d4c357e39bd9c68fa32f1d" translate="yes" xml:space="preserve">
          <source>There is a single hash of options. HTML options (except &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) are passed in the &lt;code&gt;:html&lt;/code&gt; hash. Also you can provide a &lt;code&gt;:namespace&lt;/code&gt; option for your form to ensure uniqueness of id attributes on form elements. The scope attribute will be prefixed with underscore on the generated HTML id.</source>
          <target state="translated">단일 해시 옵션이 있습니다. HTML 옵션 ( &lt;code&gt;id&lt;/code&gt; 및 &lt;code&gt;class&lt;/code&gt; 제외 )은 &lt;code&gt;:html&lt;/code&gt; 해시 로 전달됩니다 . 또한 양식에 대한 &lt;code&gt;:namespace&lt;/code&gt; 옵션을 제공하여 양식 요소에서 id 속성의 고유성을 보장 할 수 있습니다 . scope 속성은 생성 된 HTML id에서 밑줄로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="b987a89e8d81fab49645c31428afa62da4caa34e" translate="yes" xml:space="preserve">
          <source>There is a special syntactic shortcut to generate migrations that add fields to a table.</source>
          <target state="translated">필드를 테이블에 추가하는 마이그레이션을 생성하는 특수한 구문 단축키가 있습니다.</target>
        </trans-unit>
        <trans-unit id="944ce00ff07d7562a7c32486d88946c164d99489" translate="yes" xml:space="preserve">
          <source>There is also &lt;code&gt;time_zone_options_for_select&lt;/code&gt; helper for a more manual (therefore more customizable) way of doing this. Read the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select&quot;&gt;API documentation&lt;/a&gt; to learn about the possible arguments for these two methods.</source>
          <target state="translated">이 작업 을 수행하는 더 수동적 인 (따라서 사용자 정의 할 수있는) 방법을위한 &lt;code&gt;time_zone_options_for_select&lt;/code&gt; 헬퍼 도 있습니다 . 이 두 가지 메소드에 가능한 인수에 대해 학습 하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select&quot;&gt;API 문서&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="a92a7948a7a3e7a37f987d13b99d1b0f66b3afae" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;:case_sensitive&lt;/code&gt; option that you can use to define whether the confirmation constraint will be case sensitive or not. This option defaults to true.</source>
          <target state="translated">확인 제한 조건이 대소 문자를 구분하는지 여부를 정의하는 데 사용할 수 있는 &lt;code&gt;:case_sensitive&lt;/code&gt; 옵션도 있습니다. 이 옵션의 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="08f395432cafd500b3c51b02a880645ff49e9691" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;:case_sensitive&lt;/code&gt; option that you can use to define whether the uniqueness constraint will be case sensitive or not. This option defaults to true.</source>
          <target state="translated">고유 제한 조건이 대소 문자를 구분하는지 여부를 정의하는 데 사용할 수 있는 &lt;code&gt;:case_sensitive&lt;/code&gt; 옵션도 있습니다. 이 옵션의 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="26319a846afaaffb853e530a85dca196e17bc21e" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;clear&lt;/code&gt; method which is the same as &lt;code&gt;delete_all&lt;/code&gt;, except that it returns the association rather than the records which have been deleted.</source>
          <target state="translated">&lt;code&gt;delete_all&lt;/code&gt; 과 동일한 &lt;code&gt;clear&lt;/code&gt; 메소드 도 있습니다. 단, 삭제 된 레코드가 아닌 연관을 리턴한다는 점이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="c4438c6b2101cf26639e5c33a5913bcf47daf55b" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;main_app&lt;/code&gt; helper that gives you access to application's routes inside Engine:</source>
          <target state="translated">엔진 내부의 애플리케이션 경로에 액세스 할 수 있는 &lt;code&gt;main_app&lt;/code&gt; 도우미 도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cba91c500dccf5183f072dd89abfd1037c67edd4" translate="yes" xml:space="preserve">
          <source>There is also a generator which will produce join tables if &lt;code&gt;JoinTable&lt;/code&gt; is part of the name:</source>
          <target state="translated">&lt;code&gt;JoinTable&lt;/code&gt; 이 이름의 일부인 경우 조인 테이블을 생성하는 생성기도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b7e914c5609d154d382e9c0fba25c6d3a3dd2085" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt; and &lt;code&gt;:strict&lt;/code&gt;. See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information</source>
          <target state="translated">모든 유효성 검사기에서 지원하는 기본 옵션 목록도 있습니다 : &lt;code&gt;:if&lt;/code&gt; , &lt;code&gt;:unless&lt;/code&gt; , &lt;code&gt;:on&lt;/code&gt; 및 &lt;code&gt;:strict&lt;/code&gt; . 자세한 내용은 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d6bee8d7a48948390ca575bad45aeccd8d98d156" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:allow_nil&lt;/code&gt;, &lt;code&gt;:allow_blank&lt;/code&gt;, and &lt;code&gt;:strict&lt;/code&gt; . See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information</source>
          <target state="translated">모든 유효성 검사기에서 지원하는 기본 옵션 목록도 있습니다 : &lt;code&gt;:if&lt;/code&gt; , &lt;code&gt;:unless&lt;/code&gt; , &lt;code&gt;:on&lt;/code&gt; , &lt;code&gt;:allow_nil&lt;/code&gt; , &lt;code&gt;:allow_blank&lt;/code&gt; 및 &lt;code&gt;:strict&lt;/code&gt; . 자세한 내용은 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="93847491505e729e6d4ee5a015588bdb8858326f" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:allow_nil&lt;/code&gt;, &lt;code&gt;:allow_blank&lt;/code&gt;, and &lt;code&gt;:strict&lt;/code&gt;. See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information</source>
          <target state="translated">모든 유효성 검사기에서 지원하는 기본 옵션 목록도 있습니다 : &lt;code&gt;:if&lt;/code&gt; , &lt;code&gt;:unless&lt;/code&gt; , &lt;code&gt;:on&lt;/code&gt; , &lt;code&gt;:allow_nil&lt;/code&gt; , &lt;code&gt;:allow_blank&lt;/code&gt; 및 &lt;code&gt;:strict&lt;/code&gt; . 자세한 내용은 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="748b9c1ab9da9de40e6d3ebf30e2e1413de7f5d8" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:allow_nil&lt;/code&gt;, &lt;code&gt;:allow_blank&lt;/code&gt;, and &lt;code&gt;:strict&lt;/code&gt;. See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information.</source>
          <target state="translated">모든 유효성 검사기에서 지원하는 기본 옵션 목록도 있습니다 : &lt;code&gt;:if&lt;/code&gt; , &lt;code&gt;:unless&lt;/code&gt; , &lt;code&gt;:on&lt;/code&gt; , &lt;code&gt;:allow_nil&lt;/code&gt; , &lt;code&gt;:allow_blank&lt;/code&gt; 및 &lt;code&gt;:strict&lt;/code&gt; . 자세한 내용은 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f7fe45a08fca5fe58f1e88f7ac7a9210fc69391d" translate="yes" xml:space="preserve">
          <source>There is also a list of options that could be used along with validators:</source>
          <target state="translated">유효성 검사기와 함께 사용할 수있는 옵션 목록도 있습니다.</target>
        </trans-unit>
        <trans-unit id="79225454c971f81087b4f4c0e463d1f98b8b3dbb" translate="yes" xml:space="preserve">
          <source>There is also a shorthand for this. Assuming &lt;code&gt;@products&lt;/code&gt; is a collection of &lt;code&gt;Product&lt;/code&gt; instances, you can simply write this in the &lt;code&gt;index.html.erb&lt;/code&gt; to produce the same result:</source>
          <target state="translated">이것에 대한 속기도 있습니다. &lt;code&gt;@products&lt;/code&gt; 가 &lt;code&gt;Product&lt;/code&gt; 인스턴스 의 모음 이라고 가정하면 &lt;code&gt;index.html.erb&lt;/code&gt; 에이를 작성 하여 동일한 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c448005d30e7a661bfd3a32354d884702b6586b" translate="yes" xml:space="preserve">
          <source>There is also an alias for using the &lt;code&gt;after_commit&lt;/code&gt; callback for both create and update together:</source>
          <target state="translated">create 및 update를 함께 &lt;code&gt;after_commit&lt;/code&gt; 콜백을 사용하기위한 별명도 있습니다.</target>
        </trans-unit>
        <trans-unit id="86bcd3acef2da93d850e3310b1f9b06238e93baa" translate="yes" xml:space="preserve">
          <source>There is also the ability to pass a custom exception to the &lt;code&gt;:strict&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;:strict&lt;/code&gt; 옵션에 사용자 정의 예외를 전달하는 기능도 있습니다.</target>
        </trans-unit>
        <trans-unit id="358ac993e24530a80ea5aab5c8c69cb32bb5c444" translate="yes" xml:space="preserve">
          <source>There is an excellent article about detecting and fixing memory leaks at Derailed, &lt;a href=&quot;https://github.com/schneems/derailed_benchmarks#is-my-app-leaking-memory&quot;&gt;which you can read here&lt;/a&gt;.</source>
          <target state="translated">Derailed에는 메모리 누수 감지 및 수정에 대한 훌륭한 기사가 &lt;a href=&quot;https://github.com/schneems/derailed_benchmarks#is-my-app-leaking-memory&quot;&gt;있습니다&lt;/a&gt; . 여기에서 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e59b241c28f8480ba0ce4c51c99155489acd967b" translate="yes" xml:space="preserve">
          <source>There is an exception for the &lt;code&gt;format&lt;/code&gt; constraint: while it's a method on the Request object, it's also an implicit optional parameter on every path. Segment constraints take precedence and the &lt;code&gt;format&lt;/code&gt; constraint is only applied as such when enforced through a hash. For example, &lt;code&gt;get 'foo', constraints: { format: 'json' }&lt;/code&gt; will match &lt;code&gt;GET  /foo&lt;/code&gt; because the format is optional by default. However, you can &lt;a href=&quot;#advanced-constraints&quot;&gt;use a lambda&lt;/a&gt; like in &lt;code&gt;get 'foo', constraints: lambda { |req| req.format == :json }&lt;/code&gt; and the route will only match explicit JSON requests.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 제약 조건 에는 예외가 있습니다 . Request 객체의 메서드이지만 모든 경로에서 암시적인 선택적 매개 변수이기도합니다. 세그먼트 제약 조건이 우선하며 &lt;code&gt;format&lt;/code&gt; 제약 조건은 해시를 통해 적용되는 경우에만 적용됩니다. 예를 들어, &lt;code&gt;get 'foo', constraints: { format: 'json' }&lt;/code&gt; 은 기본적으로 형식이 선택적이므로 &lt;code&gt;GET /foo&lt;/code&gt; 와 일치 합니다. 그러나 &lt;code&gt;get 'foo', constraints: lambda { |req| req.format == :json }&lt;/code&gt; 와 같은 &lt;a href=&quot;#advanced-constraints&quot;&gt;람다&lt;/a&gt; 를 사용할 수 있으며 제약 조건은 다음과 같습니다. lambda {| req | req.format == : json} 경로는 명시 적 JSON 요청과 만 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b8a91b18877002868c9dc749f792dcc0a1f11220" translate="yes" xml:space="preserve">
          <source>There is even &lt;code&gt;file()&lt;/code&gt;, which accepts a relative path from &lt;code&gt;Rails.root&lt;/code&gt; and creates all the directories/files needed:</source>
          <target state="translated">&lt;code&gt;file()&lt;/code&gt; 도 있습니다. &lt;code&gt;Rails.root&lt;/code&gt; 에서 상대 경로를 받아들이고 필요한 모든 디렉토리 / 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="526236750959866fd6d21299cd81cfa275a4ebb3" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;REQUEST_METHOD&lt;/code&gt; key in &lt;code&gt;ENV&lt;/code&gt; so we can skip over that line. The next line merges in the options from &lt;code&gt;opt_parser&lt;/code&gt; which is defined plainly in &lt;code&gt;Rack::Server&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ENV&lt;/code&gt; 에는 &lt;code&gt;REQUEST_METHOD&lt;/code&gt; 키 가 없으므로 해당 줄을 건너 뛸 수 있습니다. 다음 행은 &lt;code&gt;Rack::Server&lt;/code&gt; 에 명확하게 정의 된 &lt;code&gt;opt_parser&lt;/code&gt; 의 옵션에서 병합됩니다 .</target>
        </trans-unit>
        <trans-unit id="8b7d5af49bb173bcd50ffed470c8cdee09278858" translate="yes" xml:space="preserve">
          <source>There is no column defined on the model side, Active Storage takes care of the mapping between your records and the attachment.</source>
          <target state="translated">모델 측에는 열이 정의되어 있지 않으며 Active Storage는 레코드와 첨부 파일 간의 매핑을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="d8ac2b8e9f37bfd2753c3036298922e9a4383821" translate="yes" xml:space="preserve">
          <source>There is no global configuration that can affect said instances, they are deterministic.</source>
          <target state="translated">해당 인스턴스에 영향을 줄 수있는 전역 구성은 없으며 결정적입니다.</target>
        </trans-unit>
        <trans-unit id="cba47c07cb70d2daf3ef3a3b05a98b0a5282be14" translate="yes" xml:space="preserve">
          <source>There is no guarantee that your initializers will run after all the gem initializers, so any initialization code that depends on a given gem having been initialized should go into a &lt;code&gt;config.after_initialize&lt;/code&gt; block.</source>
          <target state="translated">이니셜 라이저가 모든 gem 이니셜 라이저 이후에 실행된다는 보장은 없으므로 주어진 gem이 초기화 된 초기화 코드는 &lt;code&gt;config.after_initialize&lt;/code&gt; 블록 으로 이동해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ef0adca7b88832fc28f9c2a670b8181336aa1ddf" translate="yes" xml:space="preserve">
          <source>There is no layout</source>
          <target state="translated">레이아웃이 없습니다</target>
        </trans-unit>
        <trans-unit id="49b7d428a530de11bb29fde97ba972b14cdbe051" translate="yes" xml:space="preserve">
          <source>There is seldom any good reason to use this option. Mixing ERB into your controllers defeats the MVC orientation of Rails and will make it harder for other developers to follow the logic of your project. Use a separate erb view instead.</source>
          <target state="translated">이 옵션을 사용해야 할 이유는 거의 없습니다. ERB를 컨트롤러에 혼합하면 Rails의 MVC 방향이 무너지고 다른 개발자가 프로젝트의 논리를 따르기가 더 어려워집니다. 대신 별도의 erb보기를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a323058df0fdb155b4f09f3ff902648b543800ce" translate="yes" xml:space="preserve">
          <source>There isn't much to this file - but note that the &lt;code&gt;Article&lt;/code&gt; class inherits from &lt;code&gt;ApplicationRecord&lt;/code&gt;. &lt;code&gt;ApplicationRecord&lt;/code&gt; inherits from &lt;code&gt;ActiveRecord::Base&lt;/code&gt; which supplies a great deal of functionality to your Rails models for free, including basic database CRUD (Create, Read, Update, Destroy) operations, data validation, as well as sophisticated search support and the ability to relate multiple models to one another.</source>
          <target state="translated">이 파일에는 그다지 많지 않지만 &lt;code&gt;Article&lt;/code&gt; 클래스는 &lt;code&gt;ApplicationRecord&lt;/code&gt; 에서 상속받습니다 . &lt;code&gt;ApplicationRecord&lt;/code&gt; 는 기본 데이터베이스 CRUD (Create, Read, Update, Destroy) 작업, 데이터 유효성 검사, 정교한 검색 지원 및 관련 기능을 포함하여 Rails 모델에 많은 기능을 무료로 제공하는 &lt;code&gt;ActiveRecord::Base&lt;/code&gt; 를 상속 합니다. 서로 다른 모델.</target>
        </trans-unit>
        <trans-unit id="3627b01fb89111a0e68325183b3f10f21815a6a3" translate="yes" xml:space="preserve">
          <source>There may be cases in which you want to skip the template rendering step and supply the email body as a string. You can achieve this using the &lt;code&gt;:body&lt;/code&gt; option. In such cases don't forget to add the &lt;code&gt;:content_type&lt;/code&gt; option. Rails will default to &lt;code&gt;text/plain&lt;/code&gt; otherwise.</source>
          <target state="translated">템플릿 렌더링 단계를 건너 뛰고 전자 메일 본문을 문자열로 제공하려는 경우가 있습니다. &lt;code&gt;:body&lt;/code&gt; 옵션을 사용하여이 작업을 수행 할 수 있습니다 . 이러한 경우 &lt;code&gt;:content_type&lt;/code&gt; 옵션 을 추가하는 것을 잊지 마십시오 . 레일은 기본적으로 &lt;code&gt;text/plain&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="5fd482966b8098cb54a96c3ee1b27d407a241e13" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;belongs_to&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; 가 사용하는 쿼리를 커스터마이즈하고 싶을 때가 있습니다 . 이러한 사용자 정의는 범위 블록을 통해 달성 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e894b9ea589be57b0a4706d1e9268dba3d1d0ae3" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; 가 사용하는 쿼리를 사용자 정의하려는 경우가 있습니다 . 이러한 사용자 정의는 범위 블록을 통해 달성 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="14c63d13c9a5a248481d25c20cdbed41cee4c423" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;has_many&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;has_many&lt;/code&gt; 가 사용하는 쿼리를 사용자 정의하려는 경우가 있습니다 . 이러한 사용자 정의는 범위 블록을 통해 달성 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b14296c62128b6cd10dd4219454aa8eb4e5cfcba" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;has_one&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;has_one&lt;/code&gt; 에서 사용하는 쿼리를 사용자 정의하려는 경우가 있습니다 . 이러한 사용자 정의는 범위 블록을 통해 달성 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f73e720d5cc27c8ed51c7e9ffa25fc710d41ff78" translate="yes" xml:space="preserve">
          <source>There's a new choice for sanitizing HTML fragments in your applications. The venerable html-scanner approach is now officially being deprecated in favor of &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;&lt;code&gt;Rails HTML Sanitizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램에서 HTML 조각을 삭제하는 새로운 선택이 있습니다. &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt; &lt;code&gt;Rails HTML Sanitizer&lt;/code&gt; &lt;/a&gt; 를 선호하는 html-scanner의 접근 방식은 공식적으로 더 이상 사용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5767f43f9637442ecb64ed17723019181118e42b" translate="yes" xml:space="preserve">
          <source>There's a restriction, however, while hashes can be nested arbitrarily, only one level of &quot;arrayness&quot; is allowed. Arrays can usually be replaced by hashes; for example, instead of having an array of model objects, one can have a hash of model objects keyed by their id, an array index, or some other parameter.</source>
          <target state="translated">그러나 제한 사항이 있지만 해시를 임의로 중첩 할 수는 있지만 한 수준의 &quot;배열&quot;만 허용됩니다. 배열은 일반적으로 해시로 대체 될 수 있습니다. 예를 들어, 모델 객체의 배열을 갖는 대신, ID, 배열 인덱스 또는 다른 매개 변수로 키가 지정된 모델 객체의 해시를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="440280008b7285589783b3199b670df73ce5ce37" translate="yes" xml:space="preserve">
          <source>There's a restriction, however: while hashes can be nested arbitrarily, only one level of &quot;arrayness&quot; is allowed. Arrays can usually be replaced by hashes; for example, instead of having an array of model objects, one can have a hash of model objects keyed by their id, an array index, or some other parameter.</source>
          <target state="translated">그러나 제한이 있습니다. 해시는 임의로 중첩 될 수 있지만 한 수준의 &quot;배열&quot;만 허용됩니다. 배열은 일반적으로 해시로 대체 될 수 있습니다. 예를 들어, 모델 객체의 배열을 갖는 대신 ID, 배열 인덱스 또는 기타 매개 변수로 키가 지정된 모델 객체의 해시를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ff0f86229b16f2e8a9dcbac5ce8113e3a644cbb" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt;. If the &lt;code&gt;before_destroy&lt;/code&gt; callback throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;callbacks&quot;&gt;&lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt; 와 관련된 일련의 콜백이 있습니다 . 는 IF &lt;code&gt;before_destroy&lt;/code&gt; 의 콜백이 발생합니다 &lt;code&gt;:abort&lt;/code&gt; 조치가 취소되고 &lt;a href=&quot;persistence#method-i-destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt; 반환 &lt;code&gt;false&lt;/code&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt; &lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="65bd3549183be5ddeee5d0d504340866d990b4ae" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;destroy&lt;/a&gt;. If the &lt;code&gt;before_destroy&lt;/code&gt; callback throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;destroy&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-destroy&quot;&gt;destroy&lt;/a&gt; 와 관련된 일련의 콜백이 있습니다 . 는 IF &lt;code&gt;before_destroy&lt;/code&gt; 의 콜백이 발생합니다 &lt;code&gt;:abort&lt;/code&gt; 조치가 취소되고 &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;파괴&lt;/a&gt; 반환 &lt;code&gt;false&lt;/code&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="dd9091d3399cfd1a97b78095a9f7f6d0d9488652" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;&lt;code&gt;destroy!&lt;/code&gt;&lt;/a&gt;. If the &lt;code&gt;before_destroy&lt;/code&gt; callback throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;&lt;code&gt;destroy!&lt;/code&gt;&lt;/a&gt; raises &lt;a href=&quot;recordnotdestroyed&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotDestroyed&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;callbacks&quot;&gt;&lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt; &lt;code&gt;destroy!&lt;/code&gt; &lt;/a&gt; 와 관련된 일련의 콜백이 있습니다 ! . 는 IF &lt;code&gt;before_destroy&lt;/code&gt; 의 콜백이 발생합니다 &lt;code&gt;:abort&lt;/code&gt; 조치 취소되고 &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt; &lt;code&gt;destroy!&lt;/code&gt; &lt;/a&gt;제기 &lt;a href=&quot;recordnotdestroyed&quot;&gt; &lt;code&gt;ActiveRecord::RecordNotDestroyed&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt; &lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="50ae13a01265b151942c701c8650a5ef0ed4cd6c" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;destroy!&lt;/a&gt;. If the &lt;code&gt;before_destroy&lt;/code&gt; callback throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;destroy!&lt;/a&gt; raises &lt;a href=&quot;recordnotdestroyed&quot;&gt;ActiveRecord::RecordNotDestroyed&lt;/a&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;destroy&lt;/a&gt; 와 관련된 일련의 콜백이 있습니다 ! . 는 IF &lt;code&gt;before_destroy&lt;/code&gt; 의 콜백이 발생합니다 &lt;code&gt;:abort&lt;/code&gt; 조치 취소되고 &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;파괴! &lt;/a&gt;제기 &lt;a href=&quot;recordnotdestroyed&quot;&gt;액티브 :: RecordNotDestroyed은&lt;/a&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="4d11a26ac4786c6a73c8a491e8fc6b039f7797c6" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-save&quot;&gt;&lt;code&gt;save&lt;/code&gt;&lt;/a&gt;. If any of the &lt;code&gt;before_*&lt;/code&gt; callbacks throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-save&quot;&gt;&lt;code&gt;save&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;callbacks&quot;&gt;&lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save&quot;&gt; &lt;code&gt;save&lt;/code&gt; &lt;/a&gt; 와 관련된 일련의 콜백이 있습니다 . 의 어떤 경우 &lt;code&gt;before_*&lt;/code&gt; 콜백이 발생합니다 &lt;code&gt;:abort&lt;/code&gt; 조치 취소되고 &lt;a href=&quot;persistence#method-i-save&quot;&gt; &lt;code&gt;save&lt;/code&gt; &lt;/a&gt; 반환 &lt;code&gt;false&lt;/code&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt; &lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="baadf5ef0cf8e709a055e8a610480db8bd62c0b4" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt;. If any of the &lt;code&gt;before_*&lt;/code&gt; callbacks throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt; 와 관련된 일련의 콜백이 있습니다 . 의 어떤 경우 &lt;code&gt;before_*&lt;/code&gt; 콜백이 발생합니다 &lt;code&gt;:abort&lt;/code&gt; 조치 취소되고 &lt;a href=&quot;persistence#method-i-save&quot;&gt;저장&lt;/a&gt; 반환 &lt;code&gt;false&lt;/code&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="09f99a322e4bb1ed6ac03591b8641378a9ea7328" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;&lt;code&gt;save!&lt;/code&gt;&lt;/a&gt;. If any of the &lt;code&gt;before_*&lt;/code&gt; callbacks throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;&lt;code&gt;save!&lt;/code&gt;&lt;/a&gt; raises &lt;a href=&quot;recordnotsaved&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotSaved&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;callbacks&quot;&gt;&lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save-21&quot;&gt; &lt;code&gt;save!&lt;/code&gt; &lt;/a&gt; 과 관련된 일련의 콜백이 있습니다 ! . 의 어떤 경우 &lt;code&gt;before_*&lt;/code&gt; 콜백이 발생합니다 &lt;code&gt;:abort&lt;/code&gt; 조치를 취소하고 &lt;a href=&quot;persistence#method-i-save-21&quot;&gt; &lt;code&gt;save!&lt;/code&gt; &lt;/a&gt;제기 &lt;a href=&quot;recordnotsaved&quot;&gt; &lt;code&gt;ActiveRecord::RecordNotSaved&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt; &lt;code&gt;ActiveRecord::Callbacks&lt;/code&gt; &lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="5c63fc7d9076faa508e121bb7939dcfea3faf94b" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt;. If any of the &lt;code&gt;before_*&lt;/code&gt; callbacks throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt; raises &lt;a href=&quot;recordnotsaved&quot;&gt;ActiveRecord::RecordNotSaved&lt;/a&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save-21&quot;&gt;저장&lt;/a&gt; 과 관련된 일련의 콜백이 있습니다 ! . &lt;code&gt;before_*&lt;/code&gt; 콜백 중 하나가 발생하면 &lt;code&gt;:abort&lt;/code&gt; 작업이 취소되고 &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;저장됩니다! &lt;/a&gt;제기 &lt;a href=&quot;recordnotsaved&quot;&gt;액티브 :: RecordNotSaved은&lt;/a&gt; . 자세한 내용은 &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="f690b74b98e9c8e3bcb30878b11de3914cd94c90" translate="yes" xml:space="preserve">
          <source>There's a short-hand method for each of the type values declared at the top. And then there's &lt;a href=&quot;tabledefinition#method-i-timestamps&quot;&gt;#timestamps&lt;/a&gt; that'll add &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt; as datetimes.</source>
          <target state="translated">맨 위에 선언 된 각 유형 값에 대한 속기 방법이 있습니다. 그런 다음 &lt;code&gt;created_at&lt;/code&gt; 및 &lt;code&gt;updated_at&lt;/code&gt; 을 날짜 시간으로 추가하는 &lt;a href=&quot;tabledefinition#method-i-timestamps&quot;&gt;#timestamp&lt;/a&gt; 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ac3e7ab8d2c550f1f59418c0aad3229f7a236470" translate="yes" xml:space="preserve">
          <source>There's a short-hand method for each of the type values declared at the top. And then there's &lt;a href=&quot;tabledefinition#method-i-timestamps&quot;&gt;&lt;code&gt;TableDefinition#timestamps&lt;/code&gt;&lt;/a&gt; that'll add &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt; as datetimes.</source>
          <target state="translated">맨 위에 선언 된 각 유형 값에 대한 간단한 방법이 있습니다. 그런 다음 &lt;code&gt;created_at&lt;/code&gt; 및 &lt;code&gt;updated_at&lt;/code&gt; 를 datetimes로 추가하는 &lt;a href=&quot;tabledefinition#method-i-timestamps&quot;&gt; &lt;code&gt;TableDefinition#timestamps&lt;/code&gt; &lt;/a&gt; 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a2a47f4d301a329df06372bf9a2362a740e3cf4a" translate="yes" xml:space="preserve">
          <source>There's also &lt;code&gt;insert_after&lt;/code&gt; which will insert a middleware after another:</source>
          <target state="translated">또 다른 미들웨어를 삽입하는 &lt;code&gt;insert_after&lt;/code&gt; 도 있습니다 :</target>
        </trans-unit>
        <trans-unit id="3377ee426223ead51640693037410f1557a63826" translate="yes" xml:space="preserve">
          <source>There's also a convenience method for rendering sub templates within the current controller that depends on a single object (we call this kind of sub templates for partials). It relies on the fact that partials should follow the naming convention of being prefixed with an underscore &amp;ndash; as to separate them from regular templates that could be rendered on their own.</source>
          <target state="translated">현재 컨트롤러 내에서 단일 객체에 의존하는 하위 템플릿을 렌더링하는 편리한 방법도 있습니다 (이러한 부분 템플릿을 이러한 하위 템플릿이라고합니다). 이는 부분적으로 밑줄이 붙는 명명 규칙을 따라야한다는 사실에 의존합니다. 이는 자체적으로 렌더링 할 수있는 일반 템플릿과 구분하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="ed91282508faeedc754bde528d1a7850b7199aa8" translate="yes" xml:space="preserve">
          <source>There's also a related idiom that uses the splat operator:</source>
          <target state="translated">splat 연산자를 사용하는 관련 관용구도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0056918a985f1fb32c5a90a79d89181f0a310c1" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_transform_values-21&quot;&gt;&lt;code&gt;deep_transform_values!&lt;/code&gt;&lt;/a&gt; that destructively converts all values by using the block operation.</source>
          <target state="translated">bang 변형 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_transform_values-21&quot;&gt; &lt;code&gt;deep_transform_values!&lt;/code&gt; &lt;/a&gt;블록 연산을 사용하여 모든 값을 파괴적으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="8abb52e6b6b488ee0a757c6067e899964df67e54" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-except-21&quot;&gt;&lt;code&gt;except!&lt;/code&gt;&lt;/a&gt; that removes keys in place.</source>
          <target state="translated">뱅 변형도 있습니다 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-except-21&quot;&gt; &lt;code&gt;except!&lt;/code&gt; &lt;/a&gt;제자리에서 키를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="cfb80cda9d87fd5cc11325291fcf444abe6cc4bf" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-stringify_keys-21&quot;&gt;&lt;code&gt;stringify_keys!&lt;/code&gt;&lt;/a&gt; that stringifies keys in place.</source>
          <target state="translated">bang 변형 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-stringify_keys-21&quot;&gt; &lt;code&gt;stringify_keys!&lt;/code&gt; &lt;/a&gt;키를 제자리에 묶습니다.</target>
        </trans-unit>
        <trans-unit id="34eb0fbafdefebcd0214ef5e10af73edf3d4f4a4" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-symbolize_keys-21&quot;&gt;&lt;code&gt;symbolize_keys!&lt;/code&gt;&lt;/a&gt; that symbolizes keys in place.</source>
          <target state="translated">bang 변형 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-symbolize_keys-21&quot;&gt; &lt;code&gt;symbolize_keys!&lt;/code&gt; &lt;/a&gt;제자리에있는 열쇠를 상징합니다.</target>
        </trans-unit>
        <trans-unit id="f956bef09f19451c8e40e6ec46cf01c8bab90c32" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;code&gt;except!&lt;/code&gt; that removes keys in the very receiver.</source>
          <target state="translated">쾅 변형도 있습니다 &lt;code&gt;except!&lt;/code&gt; 수신자의 키를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9b923af91ebe1d074a60fa80ac21ebe6ee3104e6" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;code&gt;stringify_keys!&lt;/code&gt; that stringifies keys in the very receiver.</source>
          <target state="translated">뱅 변형 &lt;code&gt;stringify_keys!&lt;/code&gt; 수신자의 키를 문자열 화합니다.</target>
        </trans-unit>
        <trans-unit id="78a19505c4007a8bcf226c393c50df09e247200d" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;code&gt;symbolize_keys!&lt;/code&gt; that symbolizes keys in the very receiver.</source>
          <target state="translated">뱅 변형 &lt;code&gt;symbolize_keys!&lt;/code&gt; 수신자의 키를 상징합니다.</target>
        </trans-unit>
        <trans-unit id="96e7550fe8a372858fac794d0441c24d32d3a161" translate="yes" xml:space="preserve">
          <source>There's also the destructive version &lt;code&gt;String#remove!&lt;/code&gt;.</source>
          <target state="translated">파괴적인 버전 인 &lt;code&gt;String#remove!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="80e73f2a82d31657db00c5c72ef73a2eeb3df615" translate="yes" xml:space="preserve">
          <source>There's also the destructive version &lt;code&gt;String#squish!&lt;/code&gt;.</source>
          <target state="translated">파괴적인 버전 &lt;code&gt;String#squish!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0a2b00febe434917117c1b1394b701114ec80450" translate="yes" xml:space="preserve">
          <source>There's no need to use &lt;code&gt;includes&lt;/code&gt; for immediate associations - that is, if you have &lt;code&gt;Book belongs_to :author&lt;/code&gt;, then the author is eager-loaded automatically when it's needed.</source>
          <target state="translated">즉각적인 연관 을 위해 &lt;code&gt;includes&lt;/code&gt; 를 사용할 필요가 없습니다. 즉, &lt;code&gt;Book belongs_to :author&lt;/code&gt; author가있는 경우 저자는 필요할 때 자동으로 열성적으로로드됩니다.</target>
        </trans-unit>
        <trans-unit id="5af5f8d372afc8fdbbf3a48b40c337522f940077" translate="yes" xml:space="preserve">
          <source>There's one problem with this form though. If you inspect the HTML that is generated, by viewing the source of the page, you will see that the &lt;code&gt;action&lt;/code&gt; attribute for the form is pointing at &lt;code&gt;/articles/new&lt;/code&gt;. This is a problem because this route goes to the very page that you're on right at the moment, and that route should only be used to display the form for a new article.</source>
          <target state="translated">이 양식에는 한 가지 문제가 있습니다. 생성 된 HTML을 검사하면 페이지의 소스를보고 양식 의 &lt;code&gt;action&lt;/code&gt; 속성이 &lt;code&gt;/articles/new&lt;/code&gt; 를 가리키는 것을 볼 수 있습니다. 이 경로는 현재 페이지 바로 가기 때문에 해당 경로는 새 기사의 양식을 표시하는 데만 사용해야하기 때문에 문제가됩니다.</target>
        </trans-unit>
        <trans-unit id="f63be22a8bb00d7b7c8ecae170f05392b6a869cc" translate="yes" xml:space="preserve">
          <source>Therefore the file should be called &lt;code&gt;articles/new.html.erb&lt;/code&gt; and needs to be located inside the &lt;code&gt;app/views&lt;/code&gt; directory of the application.</source>
          <target state="translated">따라서 파일 이름은 &lt;code&gt;articles/new.html.erb&lt;/code&gt; 여야 하며 &lt;code&gt;app/views&lt;/code&gt; 의 app / views 디렉토리 안에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="ea096de70ce2d9b15a15c0ac33183aaa271d13c6" translate="yes" xml:space="preserve">
          <source>Therefore, code that references a reloadable class or module, but that is not executed again on reload, becomes stale. Let's see an example next.</source>
          <target state="translated">따라서 다시로드 할 수있는 클래스 또는 모듈을 참조하지만 다시로드 할 때 다시 실행되지 않는 코드는 부실 상태가됩니다. 다음으로 예를 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="54d043af6ac60b7ff4247d868d9da4667b5e26aa" translate="yes" xml:space="preserve">
          <source>Therefore, engines and applications can be thought of as almost the same thing, just with subtle differences, as you'll see throughout this guide. Engines and applications also share a common structure.</source>
          <target state="translated">따라서 엔진과 응용 프로그램은이 가이드 전체에서 볼 수 있듯이 미묘한 차이만으로도 거의 같은 것으로 생각할 수 있습니다. 엔진과 애플리케이션도 공통 구조를 공유합니다.</target>
        </trans-unit>
        <trans-unit id="5822ddf0577b14c01efca59a6c127cdb9bf85dbb" translate="yes" xml:space="preserve">
          <source>Therefore, if you store a reloadable class or module object in a place that is not reloaded, that value is going to become stale.</source>
          <target state="translated">따라서 다시로드 할 수없는 위치에 다시로드 가능한 클래스 또는 모듈 객체를 저장하면 해당 값이 오래됩니다.</target>
        </trans-unit>
        <trans-unit id="10c7ba5ba647b6f77d4cbc924eca40fde1fcd4e4" translate="yes" xml:space="preserve">
          <source>Therefore, it's recommended to pass blocks to the logger methods, as these are only evaluated if the output level is the same as &amp;mdash; or included in &amp;mdash; the allowed level (i.e. lazy loading). The same code rewritten would be:</source>
          <target state="translated">따라서 블록을 로거 메서드에 전달하는 것이 좋습니다. 출력 수준이 허용 된 수준 (예 : 지연로드)과 같거나 포함 된 경우에만 평가되기 때문입니다. 다시 작성된 동일한 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c5dddde3c19b813eb2e97296982859fc7b193006" translate="yes" xml:space="preserve">
          <source>Therefore, once a value is added to the enum array, its position in the array must be maintained, and new values should only be added to the end of the array. To remove unused values, the explicit hash syntax should be used.</source>
          <target state="translated">따라서 일단 값이 열거 형 배열에 추가되면 배열에서의 위치가 유지되어야하고 새로운 값은 배열의 끝에 만 추가되어야합니다. 사용하지 않는 값을 제거하려면 명시 적 해시 구문을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="3312419e3b3bf265104b5325bbf7a861dc887f43" translate="yes" xml:space="preserve">
          <source>Therefore, when you are unsure if &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; is enabled, or if you are unsure where your JSON string originated from, it is recommended that you always apply this helper (other libraries, such as the JSON gem, do not provide this kind of protection by default; also some gems might override &lt;code&gt;to_json&lt;/code&gt; to bypass Active Support's encoder).</source>
          <target state="translated">따라서 &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; 이 활성화되어 있는지 확실하지 않거나 JSON 문자열의 출처가 확실하지 않은 경우 항상이 도우미를 적용하는 것이 좋습니다 (JSON gem과 같은 다른 라이브러리는 이러한 종류를 제공하지 않습니다) 기본적으로 보호; 일부 gem은 &lt;code&gt;to_json&lt;/code&gt; 을 재정 의하여 Active Support의 인코더를 무시할 수 있습니다 ).</target>
        </trans-unit>
        <trans-unit id="50e2d2ae7d098485f005ee28b98d07e8e76757fd" translate="yes" xml:space="preserve">
          <source>These &lt;a href=&quot;#scopes&quot;&gt;scopes&lt;/a&gt; are created automatically and can be used to find all objects with or without a particular value for &lt;code&gt;status&lt;/code&gt;:</source>
          <target state="translated">이러한 &lt;a href=&quot;#scopes&quot;&gt;범위&lt;/a&gt; 는 자동으로 생성되며 &lt;code&gt;status&lt;/code&gt; 에 대한 특정 값이 있거나없는 모든 개체를 찾는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f9114f128c27108517bc58f97f6e8ec15e5ba8b6" translate="yes" xml:space="preserve">
          <source>These are &lt;b&gt;Edge Guides&lt;/b&gt;, based on &lt;a href=&quot;https://github.com/rails/rails/tree/&quot;&gt;master@&lt;/a&gt;.</source>
          <target state="translated">이것들은 &lt;a href=&quot;https://github.com/rails/rails/tree/&quot;&gt;master @에&lt;/a&gt; 기반한 &lt;b&gt;Edge Guide&lt;/b&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e1888826d23f2bec7968cbb1705739af14811d40" translate="yes" xml:space="preserve">
          <source>These are &lt;b&gt;Edge Guides&lt;/b&gt;, based on &lt;a href=&quot;https://github.com/rails/rails/tree/5f3ff60084ab5d5921ca3499814e4697f8350ee7&quot;&gt;master@5f3ff60&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://github.com/rails/rails/tree/5f3ff60084ab5d5921ca3499814e4697f8350ee7&quot;&gt;master @ 5f3ff60을&lt;/a&gt; 기반으로 한 &lt;b&gt;엣지 가이드&lt;/b&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8d0a8c4498c7c7a4fddeddb5aafbf861cf8f7c76" translate="yes" xml:space="preserve">
          <source>These are common validation options:</source>
          <target state="translated">다음은 일반적인 유효성 검사 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="54d23c4c7a3abf2356c0e98d63f6de16ee7c5ac8" translate="yes" xml:space="preserve">
          <source>These are the available configuration hooks. They do not hook into any particular framework, but instead they run in context of the entire application.</source>
          <target state="translated">사용 가능한 구성 후크입니다. 특정 프레임 워크에 연결되지 않고 전체 응용 프로그램의 컨텍스트에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e699f3e2047c7aa9cab430d169beedbfa3d580c9" translate="yes" xml:space="preserve">
          <source>These are the hooks you can use in your own code.</source>
          <target state="translated">이것들은 자신의 코드에서 사용할 수있는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="5a9ee44f5019e6a4d887bf7431f40870579bc909" translate="yes" xml:space="preserve">
          <source>These are the load hooks you can use in your own code. To hook into the initialization process of one of the following classes use the available hook.</source>
          <target state="translated">이들은 자신의 코드에서 사용할 수있는로드 후크입니다. 다음 클래스 중 하나의 초기화 프로세스에 연결하려면 사용 가능한 후크를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2b22f389b62a84b1caafbc3f014bd1e450b4b1e8" translate="yes" xml:space="preserve">
          <source>These are used to generate the dynamic forms that implement non-remote links with &lt;code&gt;:method&lt;/code&gt;.</source>
          <target state="translated">이들은 &lt;code&gt;:method&lt;/code&gt; 로 원격이 아닌 링크를 구현하는 동적 양식을 생성하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="7e7204643d8f17655f6051508b7b0bfbab88e895" translate="yes" xml:space="preserve">
          <source>These callbacks are called only when the associated objects are added or removed through the association collection:</source>
          <target state="translated">이러한 콜백은 연관 콜렉션을 통해 연관된 오브젝트가 추가되거나 제거 될 때만 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="240a67bf2a3e75814e42ac860be3b511a1b06b52" translate="yes" xml:space="preserve">
          <source>These callbacks are useful for interacting with other systems since you will be guaranteed that the callback is only executed when the database is in a permanent state. For example, &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;&lt;code&gt;after_commit&lt;/code&gt;&lt;/a&gt; is a good spot to put in a hook to clearing a cache since clearing it from within a transaction could trigger the cache to be regenerated before the database is updated.</source>
          <target state="translated">이러한 콜백은 데이터베이스가 영구적 인 상태 일 때만 콜백이 실행된다는 것을 보장하므로 다른 시스템과 상호 작용하는 데 유용합니다. 예를 들어 &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt; &lt;code&gt;after_commit&lt;/code&gt; &lt;/a&gt; 은 트랜잭션 내에서 캐시를 지우면 데이터베이스가 업데이트되기 전에 캐시가 다시 생성되도록 트리거 할 수 있기 때문에 캐시를 지우는 데 연결하기에 좋은 위치입니다.</target>
        </trans-unit>
        <trans-unit id="7d19b4d81fee5eb3fdb0377e60fd1069b834510c" translate="yes" xml:space="preserve">
          <source>These callbacks are useful for interacting with other systems since you will be guaranteed that the callback is only executed when the database is in a permanent state. For example, &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt; is a good spot to put in a hook to clearing a cache since clearing it from within a transaction could trigger the cache to be regenerated before the database is updated.</source>
          <target state="translated">이 콜백은 데이터베이스가 영구적 인 상태 일 때만 콜백이 실행되도록 보장하므로 다른 시스템과의 상호 작용에 유용합니다. 예를 들어, &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt; 은 트랜잭션 내에서 캐시를 지우면 데이터베이스가 업데이트되기 전에 캐시가 재생성 될 수 있으므로 캐시를 지우는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="7bec3791f2ea67b636c1245ac77342e845d4486e" translate="yes" xml:space="preserve">
          <source>These can now be accessed in &lt;code&gt;shared/header&lt;/code&gt; with:</source>
          <target state="translated">&lt;code&gt;shared/header&lt;/code&gt; 에서 다음을 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="65d00b8450f73eefece21c008242b16d0b94eecc" translate="yes" xml:space="preserve">
          <source>These changes will ensure that all articles have a title that is at least five characters long. Rails can validate a variety of conditions in a model, including the presence or uniqueness of columns, their format, and the existence of associated objects. Validations are covered in detail in &lt;a href=&quot;active_record_validations&quot;&gt;Active Record Validations&lt;/a&gt;.</source>
          <target state="translated">이러한 변경 사항으로 인해 모든 기사의 제목은 5 자 이상이어야합니다. Rails는 열의 유무, 형식 및 관련 객체의 존재 등 모델의 다양한 조건을 검증 할 수 있습니다. 유효성 검사는 &lt;a href=&quot;active_record_validations&quot;&gt;활성 레코드 유효성 검사&lt;/a&gt; 에 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9638b284981feee6487024ad55aba177e0b954c6" translate="yes" xml:space="preserve">
          <source>These chapters will show examples using both the &lt;code&gt;I18n.translate&lt;/code&gt; method as well as the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/TranslationHelper.html#method-i-translate&quot;&gt;&lt;code&gt;translate&lt;/code&gt; view helper method&lt;/a&gt; (noting the additional feature provide by the view helper method).</source>
          <target state="translated">이 장에서는 &lt;code&gt;I18n.translate&lt;/code&gt; 메소드와 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/TranslationHelper.html#method-i-translate&quot;&gt; &lt;code&gt;translate&lt;/code&gt; View 도우미 메소드&lt;/a&gt; 를 모두 사용하는 예제를 보여줍니다 ( 뷰 도우미 메소드 가 제공하는 추가 기능은 언급하지 않음).</target>
        </trans-unit>
        <trans-unit id="ac5f2e69f53fc1b4376f36022172c7e5b9a8b05a" translate="yes" xml:space="preserve">
          <source>These collections can be used just like any other hash:</source>
          <target state="translated">이 컬렉션은 다른 해시처럼 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="139c2e15ff40c61ce679e92b2a1df1ee56f90ef5" translate="yes" xml:space="preserve">
          <source>These concerns are used in &lt;a href=&quot;resources&quot;&gt;&lt;code&gt;Resources&lt;/code&gt;&lt;/a&gt; routing:</source>
          <target state="translated">이러한 문제는 &lt;a href=&quot;resources&quot;&gt; &lt;code&gt;Resources&lt;/code&gt; &lt;/a&gt; 라우팅 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="1602e901a67721c3d064a74b0786e59fd0237c54" translate="yes" xml:space="preserve">
          <source>These concerns are used in &lt;a href=&quot;resources&quot;&gt;Resources&lt;/a&gt; routing:</source>
          <target state="translated">이러한 문제는 &lt;a href=&quot;resources&quot;&gt;리소스&lt;/a&gt; 라우팅 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="fe8d18b1a1af418d46f0c1762852e86222a737d6" translate="yes" xml:space="preserve">
          <source>These concerns can be used in resources to avoid code duplication and share behavior across routes:</source>
          <target state="translated">이러한 문제는 리소스에서 코드 중복을 피하고 경로에서 동작을 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdc87cb375b3fa6f8adc4f36b5d7f6836c61fcfa" translate="yes" xml:space="preserve">
          <source>These configuration methods are to be called on a &lt;code&gt;Rails::Railtie&lt;/code&gt; object, such as a subclass of &lt;code&gt;Rails::Engine&lt;/code&gt; or &lt;code&gt;Rails::Application&lt;/code&gt;.</source>
          <target state="translated">이러한 구성 방법은 &lt;code&gt;Rails::Engine&lt;/code&gt; 또는 &lt;code&gt;Rails::Application&lt;/code&gt; 의 서브 클래스와 같은 &lt;code&gt;Rails::Railtie&lt;/code&gt; 객체에서 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="aee4c86ddbc20a70ac6de991da1abde7b7779a1c" translate="yes" xml:space="preserve">
          <source>These configuration points are then available through the configuration object:</source>
          <target state="translated">그런 다음 구성 오브젝트를 통해 이러한 구성 지점을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16b07cb0b4389928fefa2bf726c42774804b3256" translate="yes" xml:space="preserve">
          <source>These equivalent methods may not execute the same SQL as the previous implementation.</source>
          <target state="translated">이러한 동등한 메소드는 이전 구현과 동일한 SQL을 실행하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44e590ace0d4f2154eff39b636215be536a67878" translate="yes" xml:space="preserve">
          <source>These examples don't do any harm so far, so let's see how an attacker can steal the user's cookie (and thus hijack the user's session). In JavaScript you can use the &lt;code&gt;document.cookie&lt;/code&gt; property to read and write the document's cookie. JavaScript enforces the same origin policy, that means a script from one domain cannot access cookies of another domain. The &lt;code&gt;document.cookie&lt;/code&gt; property holds the cookie of the originating web server. However, you can read and write this property, if you embed the code directly in the HTML document (as it happens with XSS). Inject this anywhere in your web application to see your own cookie on the result page:</source>
          <target state="translated">이 예제는 지금까지 아무런 해를 끼치 지 않으므로 공격자가 사용자의 쿠키를 훔쳐서 사용자의 세션을 가로채는 방법을 살펴 보겠습니다. JavaScript에서는 &lt;code&gt;document.cookie&lt;/code&gt; 속성을 사용 하여 문서의 쿠키를 읽고 쓸 수 있습니다 . JavaScript는 동일한 출처 정책을 시행합니다. 즉, 한 도메인의 스크립트는 다른 도메인의 쿠키에 액세스 할 수 없습니다. &lt;code&gt;document.cookie&lt;/code&gt; 속성은 원래 웹 서버의 쿠키를 보유하고 있습니다. 그러나 HTML 문서에 코드를 직접 포함하는 경우 (XSS에서 발생하는 것처럼)이 속성을 읽고 쓸 수 있습니다. 결과 페이지에서 자신의 쿠키를 보려면 웹 응용 프로그램의 아무 곳에 나 이것을 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="8d5cbf40b6dbca1d049666b1de9ee4817b21e15f" translate="yes" xml:space="preserve">
          <source>These examples don't do any harm so far, so let's see how an attacker can steal the user's cookie (and thus hijack the user's session). In JavaScript you can use the document.cookie property to read and write the document's cookie. JavaScript enforces the same origin policy, that means a script from one domain cannot access cookies of another domain. The document.cookie property holds the cookie of the originating web server. However, you can read and write this property, if you embed the code directly in the HTML document (as it happens with XSS). Inject this anywhere in your web application to see your own cookie on the result page:</source>
          <target state="translated">이 예제는 지금까지 아무런 해를 끼치 지 않으므로 공격자가 어떻게 사용자의 쿠키를 훔쳐서 사용자의 세션을 가로 챌 수 있는지 살펴 보겠습니다. JavaScript에서는 document.cookie 속성을 사용하여 문서 쿠키를 읽고 쓸 수 있습니다. JavaScript는 동일한 원본 정책을 적용합니다. 즉, 한 도메인의 스크립트가 다른 도메인의 쿠키에 액세스 할 수 없습니다. document.cookie 속성은 원래 웹 서버의 쿠키를 보유합니다. 그러나 코드를 HTML 문서에 직접 포함하면 (XSS에서와 같이)이 속성을 읽고 쓸 수 있습니다. 결과 페이지에서 쿠키를 보려면 웹 응용 프로그램의 아무 곳에 나 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="a27090b4fedb948475d7cbd62876466ae6c995c2" translate="yes" xml:space="preserve">
          <source>These files allow you to specify what gem dependencies are needed for your Rails application. These files are used by the Bundler gem. For more information about Bundler, see the &lt;a href=&quot;https://bundler.io&quot;&gt;Bundler website&lt;/a&gt;.</source>
          <target state="translated">이 파일을 사용하면 Rails 애플리케이션에 필요한 gem 의존성을 지정할 수 있습니다. 이 파일은 Bundler gem에서 사용합니다. Bundler에 대한 자세한 내용은 &lt;a href=&quot;https://bundler.io&quot;&gt;Bundler 웹 사이트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d84535d564b577693b8a8d9ebb6012d6bf9a78cf" translate="yes" xml:space="preserve">
          <source>These have the aliases #t and #l so you can use them like this:</source>
          <target state="translated">별명은 #t와 #l이므로 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a95f00469907efb1bc0b9e8e4f7a2777fe791ca" translate="yes" xml:space="preserve">
          <source>These helpers can then be explicitly required as needed and included as needed</source>
          <target state="translated">그런 다음 이러한 도우미는 필요에 따라 명시 적으로 요구되고 필요에 따라 포함될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="237b4a9b33c4126eb8cc426d957fec5a9a20274a" translate="yes" xml:space="preserve">
          <source>These inbound emails are routed asynchronously using Active Job to one or several dedicated mailboxes, which are capable of interacting directly with the rest of your domain model.</source>
          <target state="translated">이러한 인바운드 전자 메일은 Active Job을 사용하여 하나 이상의 여러 전용 사서함으로 비동기 적으로 라우팅되며 나머지 도메인 모델과 직접 상호 작용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd26ce7665bb6493f9c2090b5b24281e614cd81b" translate="yes" xml:space="preserve">
          <source>These instance methods are created automatically and query whether the model has that value for the &lt;code&gt;status&lt;/code&gt; enum:</source>
          <target state="translated">이러한 인스턴스 메서드는 자동으로 생성되며 모델에 &lt;code&gt;status&lt;/code&gt; 열거 형 값이 있는지 쿼리합니다 .</target>
        </trans-unit>
        <trans-unit id="6d05463c9f54b859fa63f50fc37464c5e1de0890" translate="yes" xml:space="preserve">
          <source>These instance methods are created automatically and will first update the value of &lt;code&gt;status&lt;/code&gt; to the named value and then query whether or not the status has been successfully set to the value:</source>
          <target state="translated">이러한 인스턴스 메서드는 자동으로 생성되며 먼저 &lt;code&gt;status&lt;/code&gt; 값을 명명 된 값으로 업데이트 한 다음 상태가 값으로 성공적으로 설정되었는지 여부를 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="845f625b6f124c282e78051e4452d00a4e22c614" translate="yes" xml:space="preserve">
          <source>These kind of ambiguities can often be resolved using qualified constants:</source>
          <target state="translated">이러한 종류의 모호성은 종종 정규화 된 상수를 사용하여 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46c73379b03b75caeed644f6833cfb0de9d1f6a5" translate="yes" xml:space="preserve">
          <source>These libraries are not provided by Rails. You must install them yourself to use the built-in previewers. Before you install and use third-party software, make sure you understand the licensing implications of doing so.</source>
          <target state="translated">이 라이브러리는 Rails에서 제공하지 않습니다. 내장 미리보기를 사용하려면 직접 설치해야합니다. 타사 소프트웨어를 설치하고 사용하기 전에 라이센스의 영향을 이해해야합니다.</target>
        </trans-unit>
        <trans-unit id="57a06ff80b16f646465f2114175927d8bc937ebd" translate="yes" xml:space="preserve">
          <source>These mechanisms all involve multiple threads, each managing work for a unique instance of some object (controller, job, channel), while sharing the global process space (such as classes and their configurations, and global variables). As long as your code doesn't modify any of those shared things, it can mostly ignore that other threads exist.</source>
          <target state="translated">이러한 메커니즘에는 모두 다중 스레드가 포함되며 각 스레드는 일부 프로세스 (컨트롤러, 작업, 채널)의 고유 인스턴스에 대한 작업을 관리하는 동시에 글로벌 프로세스 공간 (예 : 클래스 및 해당 구성 및 글로벌 변수)을 공유합니다. 코드가 공유 항목을 수정하지 않는 한 다른 스레드가 존재한다는 것을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ce44e86a7aa8bf2f44b6cc0b7087229cc42c8c2" translate="yes" xml:space="preserve">
          <source>These methods are not needed or available when using parallel testing with threads.</source>
          <target state="translated">스레드와 병렬 테스트를 사용할 때는 이러한 방법이 필요하지 않거나 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="481a47f429a9e808ff788948aeceb8f3bf837ea6" translate="yes" xml:space="preserve">
          <source>These methods are useful when you want to generate the correct URL or path to a RESTful resource without having to know the exact type of the record in question.</source>
          <target state="translated">이러한 메소드는 정확한 레코드 유형을 몰라도 RESTful 자원에 대한 올바른 URL 또는 경로를 생성하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="896b1b8e004d67f5495ed7eb8ede4d7d9c1baecd" translate="yes" xml:space="preserve">
          <source>These methods can be combined with &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Duration.html#method-i-from_now&quot;&gt;&lt;code&gt;from_now&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Duration.html#method-i-ago&quot;&gt;&lt;code&gt;ago&lt;/code&gt;&lt;/a&gt;, etc, for precise date calculations. For example:</source>
          <target state="translated">정확한 날짜 계산을 위해 이러한 메서드를 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Duration.html#method-i-from_now&quot;&gt; &lt;code&gt;from_now&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Duration.html#method-i-ago&quot;&gt; &lt;code&gt;ago&lt;/code&gt; &lt;/a&gt; 등과 결합 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e0ca2ef6c6a653967492a217dec79a0d38a72888" translate="yes" xml:space="preserve">
          <source>These methods let you ask questions from templates and decide the flow based on the user's answer. Let's say you want to Freeze Rails only if the user wants to:</source>
          <target state="translated">이 방법을 사용하면 템플릿에서 질문을하고 사용자의 답변에 따라 흐름을 결정할 수 있습니다. 사용자가 원하는 경우에만 레일 고정을 원한다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="e30a8d9d0458500ad00f4baf81bf0ed7dd4f061a" translate="yes" xml:space="preserve">
          <source>These methods let you ask questions from templates and decide the flow based on the user's answer. Let's say you want to prompt the user to run migrations:</source>
          <target state="translated">이러한 방법을 사용하면 템플릿에서 질문을하고 사용자의 답변을 기반으로 흐름을 결정할 수 있습니다. ㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 사용자에게 마이그레이션을 실행하라는 메시지를 표시하려고한다고 가정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="2f964cc59da3c6f2e63593f6a75a22d82804b5c4" translate="yes" xml:space="preserve">
          <source>These methods should be used with caution, however, because important business rules and application logic may be kept in callbacks. Bypassing them without understanding the potential implications may lead to invalid data.</source>
          <target state="translated">그러나 중요한 비즈니스 규칙과 응용 프로그램 논리가 콜백에 보관 될 수 있으므로 이러한 방법은주의해서 사용해야합니다. 잠재적 인 영향을 이해하지 않고이를 무시하면 유효하지 않은 데이터가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b237698c54c09388618913c8780d824a930950fa" translate="yes" xml:space="preserve">
          <source>These methods should not be used in ordinary views. Unsafe values are automatically escaped:</source>
          <target state="translated">이러한 방법은 일반적인 관점에서 사용해서는 안됩니다. 안전하지 않은 값은 자동으로 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="cbc4b0f5255bfee845c9839ebd849486ea95cdda" translate="yes" xml:space="preserve">
          <source>These methods use Time#advance for precise date calculations when using from_now, ago, etc. as well as adding or subtracting their results from a Time object. For example:</source>
          <target state="translated">이 메소드는 from_now, ago 등을 사용할 때 정확한 날짜 계산을 위해 Time # advance를 사용하고 Time 객체에서 결과를 더하거나 뺍니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0b15cf80ef8c4443538bcf9ba62dadca5ce0849d" translate="yes" xml:space="preserve">
          <source>These methods will be included into any Active Job object, adding callbacks for &lt;code&gt;perform&lt;/code&gt; and &lt;code&gt;enqueue&lt;/code&gt; methods.</source>
          <target state="translated">이 메소드는 &lt;code&gt;perform&lt;/code&gt; 중인 작업 및 &lt;code&gt;enqueue&lt;/code&gt; 콜백을 추가하여 모든 활성 작업 개체에 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="fac92986ad45b2904b5f7cef4f619d1f996465b9" translate="yes" xml:space="preserve">
          <source>These methods will be included into any Active Job object, adding helpers for de/serialization and creation of job instances.</source>
          <target state="translated">이 메소드는 모든 활성 작업 오브젝트에 포함되어 작업 인스턴스의 직렬화 제거 및 작성을위한 헬퍼를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="1a12ffbb9a20c8082a4a85f578c452b56149f93a" translate="yes" xml:space="preserve">
          <source>These methods will operate with value objects like the ones described below:</source>
          <target state="translated">이러한 방법은 아래에 설명 된 것과 같은 값 객체와 함께 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4756747cbf73efe50913bda08117950027834550" translate="yes" xml:space="preserve">
          <source>These methods will still be accessible on the association objects:</source>
          <target state="translated">이러한 메서드는 연결 개체에서 계속 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="926ca4932f7bdeba121426204a21f401286479a1" translate="yes" xml:space="preserve">
          <source>These named scopes are composable. For instance, &lt;code&gt;Shirt.red.dry_clean_only&lt;/code&gt; will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: &lt;code&gt;Shirt.red.dry_clean_only.count&lt;/code&gt; returns the number of garments for which these criteria obtain. Similarly with &lt;code&gt;Shirt.red.dry_clean_only.average(:thread_count)&lt;/code&gt;.</source>
          <target state="translated">이러한 명명 된 범위는 작성 가능합니다. 예를 들어 &lt;code&gt;Shirt.red.dry_clean_only&lt;/code&gt; 는 빨간색 및 드라이 클리닝 전용 셔츠를 모두 생성합니다. 중첩 된 찾기 및 계산은 다음 컴포지션에서도 작동 합니다 . &lt;code&gt;Shirt.red.dry_clean_only.count&lt;/code&gt; 는 이러한 기준에 맞는 의상 수를 반환합니다. &lt;code&gt;Shirt.red.dry_clean_only.average(:thread_count)&lt;/code&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="83ddf58ecc721fdb2014a5e1d3240d26e473e31b" translate="yes" xml:space="preserve">
          <source>These need to be backed up by a migration to create the &lt;code&gt;assemblies_parts&lt;/code&gt; table. This table should be created without a primary key:</source>
          <target state="translated">&lt;code&gt;assemblies_parts&lt;/code&gt; 테이블 을 작성하려면 마이그레이션으로이를 백업해야 합니다. 이 테이블은 기본 키없이 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="5497de896675e671af51ad317bd26ba031713911" translate="yes" xml:space="preserve">
          <source>These options are specified on the class level, like &lt;code&gt;ActionMailer::Base.raise_delivery_errors = true&lt;/code&gt;</source>
          <target state="translated">이러한 옵션은 &lt;code&gt;ActionMailer::Base.raise_delivery_errors = true&lt;/code&gt; 와 같이 클래스 수준에서 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="17ae8f2d0c5f3ba8aa2188c1a11eb9756a9d2cab" translate="yes" xml:space="preserve">
          <source>These options mean something to all cache implementations. Individual cache implementations may support additional options.</source>
          <target state="translated">이러한 옵션은 모든 캐시 구현에 의미가 있습니다. 개별 캐시 구현은 추가 옵션을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31bd624036c840bf986354a0963f7e12268c2133" translate="yes" xml:space="preserve">
          <source>These options will be used as a starting point when generating URLs, so it's possible they'll be overridden by the options passed to &lt;code&gt;url_for&lt;/code&gt; calls.</source>
          <target state="translated">이러한 옵션은 URL을 생성 할 때 시작점으로 사용되므로 &lt;code&gt;url_for&lt;/code&gt; 호출에 전달 된 옵션으로 대체 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a26d4ed719f84f71cfe18893934bb55264c248db" translate="yes" xml:space="preserve">
          <source>These releases are created by taking the last released version, applying the security patches, and releasing. Those patches are then applied to the end of the x-y-stable branch. For example, a theoretical 1.2.2.1 security release would be built from 1.2.2, and then added to the end of 1-2-stable. This means that security releases are easy to upgrade to if you're running the latest version of Rails.</source>
          <target state="translated">이 릴리스는 마지막 릴리스 버전을 가져 와서 보안 패치를 적용하고 릴리스하여 생성됩니다. 그런 다음 이러한 패치는 xy-stable 분기의 끝에 적용됩니다. 예를 들어 이론적 인 1.2.2.1 보안 릴리스는 1.2.2에서 빌드 된 다음 1-2-stable 끝에 추가됩니다. 즉, 최신 버전의 Rails를 실행중인 경우 보안 릴리스로 쉽게 업그레이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c458987f769e6ae68fb15a55a06b4423b4739cf" translate="yes" xml:space="preserve">
          <source>These releases are created by taking the last released version, applying the security patches, and releasing. Those patches are then applied to the end of the x-y-stable branch. For example, a theoretical 1.2.3 security release would be built from 1.2.2, and then added to the end of 1-2-stable. This means that security releases are easy to upgrade to if you're running the latest version of Rails.</source>
          <target state="translated">이 릴리스는 마지막 릴리스 버전을 사용하여 보안 패치를 적용한 후 릴리스하여 작성됩니다. 그런 다음 해당 패치는 xy-stable 분기의 끝에 적용됩니다. 예를 들어, 이론적 1.2.3 보안 릴리스는 1.2.2에서 빌드 된 다음 1-2- 안정성 끝에 추가됩니다. 즉, 최신 버전의 Rails를 실행중인 경우 보안 릴리스를 쉽게 업그레이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26c06bf53d5f75b145edb6bfded64da635ff8c7b" translate="yes" xml:space="preserve">
          <source>These special cookie jars use a serializer to serialize the assigned values into strings and deserializes them into Ruby objects on read.</source>
          <target state="translated">이 특수 쿠키 항아리는 시리얼 라이저를 사용하여 할당 된 값을 문자열로 직렬화하고 읽을 때 Ruby 객체로 역 직렬화합니다.</target>
        </trans-unit>
        <trans-unit id="a527d56c07c6d688c5103a842e7f99281276896c" translate="yes" xml:space="preserve">
          <source>These steps are conventionally handled by a controller's &lt;code&gt;edit&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; actions. Let's add a typical implementation of these actions to &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;, below the &lt;code&gt;create&lt;/code&gt; action:</source>
          <target state="translated">이러한 단계는 일반적으로 컨트롤러의 &lt;code&gt;edit&lt;/code&gt; 및 &lt;code&gt;update&lt;/code&gt; 작업에 의해 처리됩니다 . 이러한 작업의 일반적인 구현을 &lt;code&gt;create&lt;/code&gt; 작업 아래의 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 에 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="c69560b003a070a5a3c6cdde28ca2b70e145e8fb" translate="yes" xml:space="preserve">
          <source>These tests do not attempt to determine the semantic correctness of the returned values. For instance, you could implement &lt;code&gt;valid?&lt;/code&gt; to always return &lt;code&gt;true&lt;/code&gt;, and the tests would pass. It is up to you to ensure that the values are semantically meaningful.</source>
          <target state="translated">이 테스트는 반환 된 값의 의미 정확성을 확인하지 않습니다. 예를 들어, &lt;code&gt;valid?&lt;/code&gt; 항상 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 테스트는 통과합니다. 의미 적으로 의미있는 값을 유지하는 것은 사용자의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="3b67a82ec0a502c4bdf056f5d91537ea3dd3ed33" translate="yes" xml:space="preserve">
          <source>These two declarations enable a good bit of automatic behavior. For example, if you have an instance variable &lt;code&gt;@article&lt;/code&gt; containing an article, you can retrieve all the comments belonging to that article as an array using &lt;code&gt;@article.comments&lt;/code&gt;.</source>
          <target state="translated">이 두 가지 선언은 약간의 자동 동작을 가능하게합니다. 예를 들어 기사를 포함 하는 인스턴스 변수 &lt;code&gt;@article&lt;/code&gt; 이있는 경우 &lt;code&gt;@article.comments&lt;/code&gt; 사용하여 해당 기사에 속하는 모든 주석을 배열로 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d3f6bc49848016434b208a5921266b6e39810de3" translate="yes" xml:space="preserve">
          <source>These two methods represent the two basic action archetypes used in Action Controllers: Get-and-show and do-and-redirect. Most actions are variations on these themes.</source>
          <target state="translated">이 두 가지 방법은 액션 컨트롤러에서 사용되는 두 가지 기본 액션 아키 타입 인 Get-and-Show 및 Do-and-Redirect를 나타냅니다. 대부분의 행동은 이러한 주제에 대한 변형입니다.</target>
        </trans-unit>
        <trans-unit id="33e0287c858863f021b51e27e200bfc4f089da64" translate="yes" xml:space="preserve">
          <source>They are analogous. Please refer to their documentation above and take into account the following differences:</source>
          <target state="translated">그것들은 비슷합니다. 위의 설명서를 참조하고 다음 차이점을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="b5bd24a243de54209ede8e600ff44df089372d33" translate="yes" xml:space="preserve">
          <source>They are stored in YAML files, one file per model, which are placed in the directory appointed by &lt;code&gt;ActiveSupport::TestCase.fixture_path=(path)&lt;/code&gt; (this is automatically configured for Rails, so you can just put your files in &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/&lt;/code&gt;). The fixture file ends with the &lt;code&gt;.yml&lt;/code&gt; file extension, for example: &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/web_sites.yml&lt;/code&gt;).</source>
          <target state="translated">파일은 모델 당 하나의 파일 인 YAML 파일에 저장되며 &lt;code&gt;ActiveSupport::TestCase.fixture_path=(path)&lt;/code&gt; 의해 지정된 디렉토리에 배치됩니다 (이는 Rails에 대해 자동으로 구성되므로 &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/&lt;/code&gt; 파일을 넣을 수 있습니다) -app&amp;gt; / test / fixtures / ). 조명기 파일은 &lt;code&gt;.yml&lt;/code&gt; 파일 확장자로 끝납니다 ( 예 : &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/web_sites.yml&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9c5f934785de2e314143e684cb9be170b058e5b5" translate="yes" xml:space="preserve">
          <source>They can also be accessed and overridden at the instance level.</source>
          <target state="translated">또한 인스턴스 수준에서 액세스하고 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46d4e908d2c48c059241ac18375d00df6a3318ec" translate="yes" xml:space="preserve">
          <source>They can also be removed from the stack completely:</source>
          <target state="translated">스택에서 완전히 제거 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0107efa51b3ef0fc81c2801ea8b66112e7056323" translate="yes" xml:space="preserve">
          <source>They inherit from &lt;code&gt;ActionMailer::Base&lt;/code&gt; and live in &lt;code&gt;app/mailers&lt;/code&gt;. Mailers also work very similarly to controllers. Some examples of similarities are enumerated below. Mailers have:</source>
          <target state="translated">그것들은 &lt;code&gt;ActionMailer::Base&lt;/code&gt; 에서 상속 받으며 &lt;code&gt;app/mailers&lt;/code&gt; 에 살고 있습니다 . 메일러는 컨트롤러와 매우 유사하게 작동합니다. 유사성의 일부 예가 아래에 열거되어 있습니다. 메일러는 다음을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="1306c8a02ba468a5dffe07f4002008a307ae8613" translate="yes" xml:space="preserve">
          <source>They maintain the session by accessing the web application periodically in order to keep an expiring session alive.</source>
          <target state="translated">만료 세션을 유지하기 위해 웹 응용 프로그램에 주기적으로 액세스하여 세션을 유지 관리합니다.</target>
        </trans-unit>
        <trans-unit id="9f127f7abccb59b14b1bd363498eb471f2243e46" translate="yes" xml:space="preserve">
          <source>They return the corresponding amount of bytes, using a conversion factor of 1024:</source>
          <target state="translated">변환 계수 1024를 사용하여 해당하는 바이트 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="acfd88153819fc0ef7992434ccfca9dd06f84e5f" translate="yes" xml:space="preserve">
          <source>They translate to calls to &lt;code&gt;since&lt;/code&gt; or &lt;code&gt;advance&lt;/code&gt;. For example here we get the correct jump in the calendar reform:</source>
          <target state="translated">그들은 &lt;code&gt;since&lt;/code&gt; 또는 &lt;code&gt;advance&lt;/code&gt; 전화로 번역합니다 . 예를 들어 캘린더 재구성에서 올바른 점프를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="78b0f96d526c61955700c71121d4646083adcf60" translate="yes" xml:space="preserve">
          <source>They work by using the &lt;code&gt;HTTP_IF_NONE_MATCH&lt;/code&gt; and &lt;code&gt;HTTP_IF_MODIFIED_SINCE&lt;/code&gt; headers to pass back and forth both a unique content identifier and the timestamp of when the content was last changed. If the browser makes a request where the content identifier (etag) or last modified since timestamp matches the server's version then the server only needs to send back an empty response with a not modified status.</source>
          <target state="translated">&lt;code&gt;HTTP_IF_NONE_MATCH&lt;/code&gt; 및 &lt;code&gt;HTTP_IF_MODIFIED_SINCE&lt;/code&gt; 헤더를 사용하여 고유 한 컨텐츠 ID와 컨텐츠가 마지막으로 변경된 시간 소인을 앞뒤로 전달합니다. 브라우저가 타임 스탬프 이후 컨텐츠 식별자 (etag) 또는 마지막으로 수정 된 위치에서 서버 버전과 일치하는 요청을하는 경우, 서버는 수정되지 않은 상태의 빈 응답 만 다시 보내면됩니다.</target>
        </trans-unit>
        <trans-unit id="7fff975593130a4e01e02e1e1def8304c95b238d" translate="yes" xml:space="preserve">
          <source>Think of &lt;code&gt;destroy&lt;/code&gt; as the opposite of &lt;code&gt;generate&lt;/code&gt;. It'll figure out what generate did, and undo it.</source>
          <target state="translated">&lt;code&gt;destroy&lt;/code&gt; 와 &lt;code&gt;generate&lt;/code&gt; 의 반대 라고 생각하십시오 . 생성 된 작업을 파악하고 실행 취소합니다.</target>
        </trans-unit>
        <trans-unit id="ec50fe9d5ee0df11700556f4de11f2af7968f536" translate="yes" xml:space="preserve">
          <source>Think of a situation where an attacker has stolen a user's session cookie and thus may co-use the application. If it is easy to change the password, the attacker will hijack the account with a few clicks. Or if the change-password form is vulnerable to CSRF, the attacker will be able to change the victim's password by luring them to a web page where there is a crafted IMG-tag which does the CSRF. As a countermeasure, &lt;em&gt;make change-password forms safe against CSRF&lt;/em&gt;, of course. And &lt;em&gt;require the user to enter the old password when changing it&lt;/em&gt;.</source>
          <target state="translated">공격자가 사용자의 세션 쿠키를 도난 당하여 응용 프로그램을 공동 사용할 수있는 상황을 생각해보십시오. 암호를 변경하기 쉬운 경우 공격자는 몇 번의 클릭으로 계정을 도용합니다. 또는 암호 변경 양식이 CSRF에 취약한 경우 공격자는 피해자의 암호를 CSRF를 수행하는 조작 된 IMG- 태그가있는 웹 페이지에 넣어서 암호를 변경할 수 있습니다. 대책으로서, &lt;em&gt;암호 변경 양식을 CSRF로부터 안전하게 만드십시오&lt;/em&gt; . 그리고 &lt;em&gt;사용자가 이전 비밀번호를 변경할 때 입력하도록 요구하십시오&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="090598e3cb6e5557a76d9f498c3f99a8a50509b6" translate="yes" xml:space="preserve">
          <source>Think of creating routes as drawing a map for your requests. The map tells them where to go based on some predefined pattern:</source>
          <target state="translated">요청에 대한지도를 그리는 것으로 경로를 만드는 것을 생각하십시오. 지도는 사전 정의 된 패턴을 기반으로 어디로 가야하는지 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="ac4fc7fa914171aef955ec263c4925c7c3485dd3" translate="yes" xml:space="preserve">
          <source>Think of it as page caching using HTTP semantics.</source>
          <target state="translated">HTTP 시맨틱을 사용하는 페이지 캐싱으로 생각하십시오.</target>
        </trans-unit>
        <trans-unit id="2b2e497eddb3696588ddf377c22c6589397db83e" translate="yes" xml:space="preserve">
          <source>Third configurable block to run. Does not run if &lt;code&gt;config.eager_load&lt;/code&gt; set to false.</source>
          <target state="translated">세 번째 구성 가능 블록이 실행됩니다. &lt;code&gt;config.eager_load&lt;/code&gt; 가 false로 설정된 경우 실행되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="4923d27a58b47a56515fbeeeb15d4ac2d4563931" translate="yes" xml:space="preserve">
          <source>Third, if we DON'T find a template AND the request is a page load in a web browser (technically, a non-XHR GET request for an HTML response) where you reasonably expect to have rendered a template, then we raise &lt;code&gt;ActionController::MissingExactTemplate&lt;/code&gt; with an explanation.</source>
          <target state="translated">셋째, 템플릿을 찾지 못하고 요청이 템플릿을 렌더링했을 것으로 예상되는 웹 브라우저 (기술적으로는 HTML 응답에 대한 비 XHR GET 요청)의 페이지로드 인 경우 &lt;code&gt;ActionController::MissingExactTemplate&lt;/code&gt; 에 대한 설명이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9399c03e83a1865fc30c82098c108182758ac25" translate="yes" xml:space="preserve">
          <source>Third, if we DON'T find a template AND the request is a page load in a web browser (technically, a non-XHR GET request for an HTML response) where you reasonably expect to have rendered a template, then we raise &lt;code&gt;ActionView::UnknownFormat&lt;/code&gt; with an explanation.</source>
          <target state="translated">셋째, 템플릿을 찾지 못하고 요청이 웹 브라우저 (기술적으로 HTML 응답에 대한 XHR이 아닌 GET 요청)의 페이지로드 인 경우 템플릿을 렌더링했을 것으로 예상되는 경우 &lt;code&gt;ActionView::UnknownFormat&lt;/code&gt; 없는 설명이 포함 된 형식입니다.</target>
        </trans-unit>
        <trans-unit id="4a7362efbdd2c82924a8a0e0cea79ebd45d0e631" translate="yes" xml:space="preserve">
          <source>Third, the translation will be marked as &lt;code&gt;html_safe&lt;/code&gt; if the key has the suffix &amp;ldquo;_html&amp;rdquo; or the last element of the key is &amp;ldquo;html&amp;rdquo;. Calling &lt;code&gt;translate(&quot;footer_html&quot;)&lt;/code&gt; or &lt;code&gt;translate(&quot;footer.html&quot;)&lt;/code&gt; will return an HTML safe string that won't be escaped by other HTML helper methods. This naming convention helps to identify translations that include HTML tags so that you know what kind of output to expect when you call translate in a template and translators know which keys they can provide HTML values for.</source>
          <target state="translated">세 번째로, 키에 접미사&amp;ldquo;_html&amp;rdquo;이 있거나 키의 마지막 요소가&amp;ldquo;html&amp;rdquo;이면 번역이 &lt;code&gt;html_safe&lt;/code&gt; 로 표시됩니다 . &lt;code&gt;translate(&quot;footer_html&quot;)&lt;/code&gt; 또는 &lt;code&gt;translate(&quot;footer.html&quot;)&lt;/code&gt; 을 호출 하면 다른 HTML 도우미 메서드로 이스케이프되지 않는 HTML 안전 문자열이 반환됩니다. 이 이름 지정 규칙은 HTML 태그가 포함 된 번역을 식별하여 템플릿에서 번역을 호출 할 때 어떤 종류의 출력을 기대할 수 있는지, 번역자는 HTML 값을 제공 할 수있는 키를 알 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="dba11a48cc216373589702626e1fbcb5aef1b0c4" translate="yes" xml:space="preserve">
          <source>This JavaScript code will simply display an alert box. The next examples do exactly the same, only in very uncommon places:</source>
          <target state="translated">이 JavaScript 코드는 단순히 경고 상자를 표시합니다. 다음 예제는 매우 드문 경우에만 동일하게 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="fea430f978987786a30da526dae9edb12ef3a537" translate="yes" xml:space="preserve">
          <source>This URL passes the filter because the regular expression matches - the second line, the rest does not matter. Now imagine we had a view that showed the URL like this:</source>
          <target state="translated">이 URL은 정규식이 일치하므로 필터를 전달합니다. 두 번째 줄은 나머지가 중요하지 않습니다. 이제 URL을 다음과 같이 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="17fc719c23efabfa22dedb5bcf3e95223386150f" translate="yes" xml:space="preserve">
          <source>This action is now displaying the parameters for the article that are coming in from the form. However, this isn't really all that helpful. Yes, you can see the parameters but nothing in particular is being done with them.</source>
          <target state="translated">이 조치는 이제 양식에서 나오는 기사의 매개 변수를 표시합니다. 그러나 이것이 실제로 그렇게 유용한 것은 아닙니다. 예, 매개 변수를 볼 수 있지만 특별히 수행 된 작업은 없습니다.</target>
        </trans-unit>
        <trans-unit id="c8f843fd1bcb3d095f5adbea69e50d48947b7b40" translate="yes" xml:space="preserve">
          <source>This adds a form on the &lt;code&gt;Article&lt;/code&gt; show page that creates a new comment by calling the &lt;code&gt;CommentsController&lt;/code&gt;&lt;code&gt;create&lt;/code&gt; action. The &lt;code&gt;form_with&lt;/code&gt; call here uses an array, which will build a nested route, such as &lt;code&gt;/articles/1/comments&lt;/code&gt;.</source>
          <target state="translated">이것은에 양식을 추가 &lt;code&gt;Article&lt;/code&gt; 호출하여 새 코멘트를 작성 쇼 페이지 &lt;code&gt;CommentsController&lt;/code&gt; 가 &lt;code&gt;create&lt;/code&gt; 행동을. &lt;code&gt;form_with&lt;/code&gt; 의 호출은 여기, 같은 중첩 된 경로를 구축 할 것입니다 배열 사용 &lt;code&gt;/articles/1/comments&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="46f00894177e6d8e67ed069223a4ade6fcb2da20" translate="yes" xml:space="preserve">
          <source>This adds a new foreign key to the &lt;code&gt;author_id&lt;/code&gt; column of the &lt;code&gt;articles&lt;/code&gt; table. The key references the &lt;code&gt;id&lt;/code&gt; column of the &lt;code&gt;authors&lt;/code&gt; table. If the column names cannot be derived from the table names, you can use the &lt;code&gt;:column&lt;/code&gt; and &lt;code&gt;:primary_key&lt;/code&gt; options.</source>
          <target state="translated">그러면 &lt;code&gt;articles&lt;/code&gt; 테이블 의 &lt;code&gt;author_id&lt;/code&gt; 열에 새 외래 키가 추가 됩니다. 키 는 &lt;code&gt;authors&lt;/code&gt; 테이블 의 &lt;code&gt;id&lt;/code&gt; 열을 참조 합니다. 열 이름을 테이블 이름에서 파생 할 수없는 경우 &lt;code&gt;:column&lt;/code&gt; 및 &lt;code&gt;:primary_key&lt;/code&gt; 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60a05f3a6cca9f98fb6238843deb477cd9cad796" translate="yes" xml:space="preserve">
          <source>This affects only to constants at the same top-level as in the example above. Inner classes and modules are fine. For example, consider</source>
          <target state="translated">이것은 위 예제와 같은 최상위 레벨의 상수에만 영향을줍니다. 내부 클래스와 모듈이 좋습니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="4e2dcd8c78d123694cdc898d64bdad9a27b9c90e" translate="yes" xml:space="preserve">
          <source>This allows URLs for resources that otherwise would be deeply nested such as a comment on a blog post like &lt;code&gt;/posts/a-long-permalink/comments/1234&lt;/code&gt; to be shortened to just &lt;code&gt;/comments/1234&lt;/code&gt;.</source>
          <target state="translated">이것은 다른 깊이와 같은 블로그 게시물에 댓글과 같은 중첩 될 자원에 대한 URL을 허용 &lt;code&gt;/posts/a-long-permalink/comments/1234&lt;/code&gt; 단지로 단축 할 수 &lt;code&gt;/comments/1234&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1fbbd78d1edbc9056f94a963a99efae21c1fe490" translate="yes" xml:space="preserve">
          <source>This allows any character other than a slash as part of your &lt;code&gt;:id&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;:id&lt;/code&gt; 의 일부로 슬래시 이외의 문자를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="9ffe7a17bd47c61bf59e095fabdd612a1d05dc51" translate="yes" xml:space="preserve">
          <source>This allows for views to display rather reasonable strings while still giving developers a way to find missing translations.</source>
          <target state="translated">이를 통해 뷰는 다소 합리적인 문자열을 표시하면서 개발자에게 누락 된 번역을 찾을 수있는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="169b5728b55d8f2e89a55edcd6e338ce067c6c35" translate="yes" xml:space="preserve">
          <source>This allows only the given tags and does a good job, even against all kinds of tricks and malformed tags.</source>
          <target state="translated">이것은 주어진 태그 만 허용하고 모든 종류의 트릭과 잘못된 태그에 대해서도 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="0395fb7dca9e85a2a35f66131ae78f9e37ca7284" translate="yes" xml:space="preserve">
          <source>This allows you to modify application's generators from Railties.</source>
          <target state="translated">이를 통해 Railties에서 애플리케이션 생성기를 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d86b60f04d2f4a95e5b1bc4a8837139c80842c7" translate="yes" xml:space="preserve">
          <source>This allows you to modify the application's middlewares from Engines.</source>
          <target state="translated">이를 통해 엔진에서 애플리케이션의 미들웨어를 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8f05bcc23028ab19898b67ea456aea168ee90c4" translate="yes" xml:space="preserve">
          <source>This allows you to treat instances of your models as URLs, and is a key advantage to using the resourceful style.</source>
          <target state="translated">이를 통해 모델의 인스턴스를 URL로 취급 할 수 있으며 풍부한 스타일을 사용하는 것이 주요 이점입니다.</target>
        </trans-unit>
        <trans-unit id="816ce130adac3a79cc4bab4270b57850d3fcf1c7" translate="yes" xml:space="preserve">
          <source>This also ensures that the engine's URL helpers will work as expected in your tests.</source>
          <target state="translated">또한 엔진의 URL 도우미가 테스트에서 예상대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="1cba66decd634cfa1294c591fbbd74f27e915489" translate="yes" xml:space="preserve">
          <source>This also provides the required class methods for hooking into the Rails internationalization API, including being able to define a class based &lt;code&gt;i18n_scope&lt;/code&gt; and &lt;code&gt;lookup_ancestors&lt;/code&gt; to find translations in parent classes.</source>
          <target state="translated">또한 클래스 기반 &lt;code&gt;i18n_scope&lt;/code&gt; 및 &lt;code&gt;lookup_ancestors&lt;/code&gt; 를 정의하여 상위 클래스에서 번역을 찾을 수있는 등 Rails 국제화 API에 연결하는 데 필요한 클래스 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="8b996e9c22a962811fb1cf6f532b74a9db521c52" translate="yes" xml:space="preserve">
          <source>This also works for links with &lt;code&gt;data-method&lt;/code&gt; attribute.</source>
          <target state="translated">또한 &lt;code&gt;data-method&lt;/code&gt; 속성이있는 링크에서도 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="765a95792bd5c248e05cf8a8aef32888ce9af35b" translate="yes" xml:space="preserve">
          <source>This also works for the methods in &lt;a href=&quot;formoptionshelper&quot;&gt;&lt;code&gt;FormOptionsHelper&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datehelper&quot;&gt;&lt;code&gt;DateHelper&lt;/code&gt;&lt;/a&gt; that are designed to work with an object as base, like &lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;&lt;code&gt;FormOptionsHelper#collection_select&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;&lt;code&gt;DateHelper#datetime_select&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이는 &lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt; &lt;code&gt;FormOptionsHelper#collection_select&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt; &lt;code&gt;DateHelper#datetime_select&lt;/code&gt; &lt;/a&gt; 와 같이 객체를 기본으로 사용하도록 설계된 &lt;a href=&quot;formoptionshelper&quot;&gt; &lt;code&gt;FormOptionsHelper&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;datehelper&quot;&gt; &lt;code&gt;DateHelper&lt;/code&gt; &lt;/a&gt; 의 메서드에서도 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="ef6e8eed01678ac90fee45991c411ecd73ddcee2" translate="yes" xml:space="preserve">
          <source>This also works for the methods in &lt;a href=&quot;formoptionshelper&quot;&gt;FormOptionsHelper&lt;/a&gt; and &lt;a href=&quot;datehelper&quot;&gt;DateHelper&lt;/a&gt; that are designed to work with an object as base, like &lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;ActionView::Helpers::FormOptionsHelper#collection_select&lt;/a&gt; and &lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;ActionView::Helpers::DateHelper#datetime_select&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;ActionView :: Helpers :: FormOptionsHelper # collection_select&lt;/a&gt; 및 &lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;ActionView :: Helpers :: DateHelper # datetime_select&lt;/a&gt; 와 같이 기본으로 오브젝트와 함께 작동하도록 설계된 &lt;a href=&quot;formoptionshelper&quot;&gt;FormOptionsHelper&lt;/a&gt; 및 &lt;a href=&quot;datehelper&quot;&gt;DateHelper&lt;/a&gt; 의 메소드에 대해서도 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="dad4f457978053eb9daf5acf1e4a9f3fdf265a9b" translate="yes" xml:space="preserve">
          <source>This also works with polymorphic belongs_to relationships:</source>
          <target state="translated">이것은 또한 다형성 belongs_to 관계에서도 작동합니다 :</target>
        </trans-unit>
        <trans-unit id="d5f6ba7a4a34e7f2251cff43a9c1e7573db3524b" translate="yes" xml:space="preserve">
          <source>This analyzer relies on the third-party &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gem. MiniMagick requires the &lt;a href=&quot;http://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; system library.</source>
          <target state="translated">이 분석기는 타사 &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; 보석을 사용합니다. MiniMagick에는 &lt;a href=&quot;http://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; 시스템 라이브러리 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="52f00403aa88e53e106009e0de6df97f83d752aa" translate="yes" xml:space="preserve">
          <source>This analyzer requires the &lt;a href=&quot;https://www.ffmpeg.org&quot;&gt;FFmpeg&lt;/a&gt; system library, which is not provided by Rails.</source>
          <target state="translated">이 분석기에는 Rails가 제공하지 않는 &lt;a href=&quot;https://www.ffmpeg.org&quot;&gt;FFmpeg&lt;/a&gt; 시스템 라이브러리 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="178263874a3e36da6c37b9c6bab0df507090c51e" translate="yes" xml:space="preserve">
          <source>This application only cares about non-archived &lt;code&gt;Articles&lt;/code&gt;. A view also allows for conditions so we can exclude the archived &lt;code&gt;Articles&lt;/code&gt; directly.</source>
          <target state="translated">이 응용 프로그램은 보관되지 않은 &lt;code&gt;Articles&lt;/code&gt; 에만 관심이 있습니다. 또한보기는 조건을 허용하므로 보관 된 &lt;code&gt;Articles&lt;/code&gt; 직접 제외 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbb4195615713af26464d308f931e815c6758a7c" translate="yes" xml:space="preserve">
          <source>This approach has almost the same set of advantages as setting the locale from the domain name: namely that it's RESTful and in accord with the rest of the World Wide Web. It does require a little bit more work to implement, though.</source>
          <target state="translated">이 접근 방식은 도메인 이름에서 로케일을 설정하는 것과 거의 동일한 장점을 가지고 있습니다. 즉, RESTful이며 나머지 월드 와이드 웹에 부합합니다. 그러나 구현하려면 약간의 작업이 더 필요합니다.</target>
        </trans-unit>
        <trans-unit id="ac518fdc1a794b141c9ee5c764b7d0a65e72abcd" translate="yes" xml:space="preserve">
          <source>This approach is a decent way of keeping common structures isolated from the changing content, but it's verbose and if you ever want to change the structure of these two includes, you'll have to change all the templates.</source>
          <target state="translated">이 접근 방식은 변경되는 컨텐츠와 공통 구조를 분리하는 적절한 방법이지만, 장황하며,이 두 포함의 구조를 변경하려면 모든 템플리트를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="083d804ee4d54d82a0c32a28af65e04359fcff1c" translate="yes" xml:space="preserve">
          <source>This approach was introduced in Rails 3.1 and is still improving. Several Rack middlewares may not work and you need to be careful when streaming. Those points are going to be addressed soon.</source>
          <target state="translated">이 접근 방식은 Rails 3.1에서 도입되었으며 여전히 개선되고 있습니다. 여러 랙 미들웨어가 작동하지 않을 수 있으므로 스트리밍시주의해야합니다. 그 요점은 곧 해결 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="ff40517e4c015abe3750405eacad85528109d988" translate="yes" xml:space="preserve">
          <source>This approach will assume that when a new topic is added, you'll touch the project. The cache key generated from this call will be something like:</source>
          <target state="translated">이 접근법은 새로운 주제가 추가되면 프로젝트를 만질 것이라고 가정합니다. 이 호출에서 생성 된 캐시 키는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a5d6787fdf71272bd07c38db318b9189fa542f61" translate="yes" xml:space="preserve">
          <source>This assertion is quite powerful. For more advanced usage, refer to its &lt;a href=&quot;https://github.com/rails/rails-dom-testing/blob/master/lib/rails/dom/testing/assertions/selector_assertions.rb&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">이 주장은 매우 강력합니다. 고급 사용법에 대해서는 해당 &lt;a href=&quot;https://github.com/rails/rails-dom-testing/blob/master/lib/rails/dom/testing/assertions/selector_assertions.rb&quot;&gt;설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9cfc7e4fec5acb42ceb71ddc79e859833d3b0876" translate="yes" xml:space="preserve">
          <source>This attack focuses on fixing a user's session ID known to the attacker, and forcing the user's browser into using this ID. It is therefore not necessary for the attacker to steal the session ID afterwards. Here is how this attack works:</source>
          <target state="translated">이 공격은 공격자에게 알려진 사용자의 세션 ID를 수정하고 사용자 브라우저가이 ID를 사용하도록하는 데 중점을 둡니다. 따라서 공격자가 나중에 세션 ID를 훔칠 필요는 없습니다. 이 공격의 작동 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="26eddff046c4367bccf2b4160ad488fd944dacf8" translate="yes" xml:space="preserve">
          <source>This attack method works by including malicious code or a link in a page that accesses a web application that the user is believed to have authenticated. If the session for that web application has not timed out, an attacker may execute unauthorized commands.</source>
          <target state="translated">이 공격 방법은 사용자가 인증 한 웹 응용 프로그램에 액세스하는 페이지에 악성 코드 또는 링크를 포함시켜 작동합니다. 해당 웹 응용 프로그램의 세션 시간이 초과되지 않은 경우 공격자는 권한이없는 명령을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c2ef301b1b88296629007f66b2d09e6d6497919" translate="yes" xml:space="preserve">
          <source>This behaves in almost the same way as outlined previously, with a couple of small exceptions. First, the prefix used to name the input elements within the form (hence the key that denotes them in the &lt;code&gt;params&lt;/code&gt; hash) is actually derived from the object's &lt;em&gt;class&lt;/em&gt;, e.g. &lt;code&gt;params[:post]&lt;/code&gt; if the object's class is &lt;code&gt;Post&lt;/code&gt;. However, this can be overwritten using the &lt;code&gt;:as&lt;/code&gt; option, e.g. -</source>
          <target state="translated">이것은 몇 가지 작은 예외를 제외하고는 앞에서 설명한 것과 거의 같은 방식으로 작동합니다. 먼저 양식 내에서 입력 요소의 이름을 지정하는 데 사용되는 접두어 (따라서 &lt;code&gt;params&lt;/code&gt; 해시 에서이를 표시하는 키 )는 실제로 오브젝트 &lt;em&gt;클래스&lt;/em&gt; 에서 파생됩니다 ( 예 &lt;code&gt;params[:post]&lt;/code&gt; 오브젝트 클래스가 &lt;code&gt;Post&lt;/code&gt; 인 경우 params [: post]) . 그러나 &lt;code&gt;:as&lt;/code&gt; 옵션을 사용하여 덮어 쓸 수 있습니다 . 예 :-</target>
        </trans-unit>
        <trans-unit id="67a66d6b894fc0bbba09d5ce93524db577ffd0b9" translate="yes" xml:space="preserve">
          <source>This behavior can also be achieved by setting the &lt;code&gt;:root&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; as in:</source>
          <target state="translated">다음과 같이 &lt;code&gt;:root&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하여이 동작을 수행 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c08ec7492a186db0a6dc03b4455535acc56cf848" translate="yes" xml:space="preserve">
          <source>This behavior can be turned off by setting &lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt; 설정 하여이 동작을 끌 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3259504ed753df77d38d003df0fcaded9e585a6d" translate="yes" xml:space="preserve">
          <source>This behavior can be turned off by setting &lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt;. To override the name of the &lt;code&gt;lock_version&lt;/code&gt; column, set the &lt;code&gt;locking_column&lt;/code&gt; class attribute:</source>
          <target state="translated">&lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt; 설정 하여이 동작을 끌 수 있습니다 . &lt;code&gt;lock_version&lt;/code&gt; 열의 이름을 대체하려면 &lt;code&gt;locking_column&lt;/code&gt; 클래스 속성을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a52b704c0982fe827b6f05b12131c956b0897af8" translate="yes" xml:space="preserve">
          <source>This behavior was never intentionally supported. Due to a change in the internals of &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt;, this is no longer allowed in Rails 4.1. Using a &lt;code&gt;return&lt;/code&gt; statement in an inline callback block causes a &lt;code&gt;LocalJumpError&lt;/code&gt; to be raised when the callback is executed.</source>
          <target state="translated">이 동작은 의도적으로 지원되지 않았습니다. &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; 내부의 변경으로 인해 Rails 4.1에서는 더 이상 허용되지 않습니다. 인라인 콜백 블록에서 &lt;code&gt;return&lt;/code&gt; 문을 사용 하면 콜백이 실행될 때 &lt;code&gt;LocalJumpError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="71bac3f80d9f032b0df639879e5041c7d3793812" translate="yes" xml:space="preserve">
          <source>This cache does implement the local cache strategy, so values will actually be cached inside blocks that utilize this strategy. See &lt;a href=&quot;strategy/localcache&quot;&gt;&lt;code&gt;ActiveSupport::Cache::Strategy::LocalCache&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">이 캐시는 로컬 캐시 전략을 구현하므로 값은 실제로이 전략을 사용하는 블록 내부에 캐시됩니다. 자세한 내용은 &lt;a href=&quot;strategy/localcache&quot;&gt; &lt;code&gt;ActiveSupport::Cache::Strategy::LocalCache&lt;/code&gt; &lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="4d9554f238af713f51cb9ef0b3e35cb8707f5c32" translate="yes" xml:space="preserve">
          <source>This cache does implement the local cache strategy, so values will actually be cached inside blocks that utilize this strategy. See &lt;a href=&quot;strategy/localcache&quot;&gt;ActiveSupport::Cache::Strategy::LocalCache&lt;/a&gt; for more details.</source>
          <target state="translated">이 캐시는 로컬 캐시 전략을 구현하므로 실제로이 전략을 사용하는 블록 내에 값이 캐시됩니다. 자세한 내용은 &lt;a href=&quot;strategy/localcache&quot;&gt;ActiveSupport :: Cache :: Strategy :: LocalCache&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4af85cab0bdc6c15dddd5640088731511962fad2" translate="yes" xml:space="preserve">
          <source>This cache has a bounded size specified by the :size options to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur which tries to prune the cache down to three quarters of the maximum size by removing the least recently used entries.</source>
          <target state="translated">이 캐시는 : size 옵션으로 지정된 크기를 이니셜 라이저로 지정합니다 (기본값은 32Mb). 캐시가 할당 된 크기를 초과하면 가장 최근에 사용 된 항목을 제거하여 캐시를 최대 크기의 3/4로 정리하려고 시도하는 정리가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="0373bb4d447d2e34759c0046345dcabe712d09e8" translate="yes" xml:space="preserve">
          <source>This cache key is stable, but it's combined with a cache version derived from the project record. When the project updated_at is touched, the cache_version changes, even if the key stays stable. This means that unlike a traditional key-based cache expiration approach, you won't be generating cache trash, unused keys, simply because the dependent record is updated.</source>
          <target state="translated">이 캐시 키는 안정적이지만 프로젝트 레코드에서 파생 된 캐시 버전과 결합됩니다. updated_at 프로젝트를 터치하면 키가 안정적으로 유지 되더라도 cache_version이 변경됩니다. 이는 기존의 키 기반 캐시 만기 접근 방식과 달리 종속 레코드가 업데이트되기 때문에 사용되지 않는 키 캐시 캐시를 생성하지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a3de3e1459212e74dd738cfc7a292806b2904cef" translate="yes" xml:space="preserve">
          <source>This cache store implementation is meant to be used only in development or test environments and it never stores anything. This can be very useful in development when you have code that interacts directly with &lt;code&gt;Rails.cache&lt;/code&gt; but caching may interfere with being able to see the results of code changes. With this cache store, all &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; operations will result in a miss.</source>
          <target state="translated">이 캐시 저장소 구현은 개발 또는 테스트 환경에서만 사용되며 어떠한 것도 저장하지 않습니다. 이는 &lt;code&gt;Rails.cache&lt;/code&gt; 와 직접 상호 작용하는 코드가있는 경우 개발에 매우 ​​유용 하지만 캐싱이 코드 변경 결과를 보는 데 방해가 될 수 있습니다. 이 캐시 저장소를 사용하면 모든 &lt;code&gt;fetch&lt;/code&gt; 및 &lt;code&gt;read&lt;/code&gt; 조작이 누락됩니다.</target>
        </trans-unit>
        <trans-unit id="7ccf1d587a45dbc8a554ddbd617f0e45952f2f5c" translate="yes" xml:space="preserve">
          <source>This cache store keeps entries in memory in the same Ruby process. The cache store has a bounded size specified by sending the &lt;code&gt;:size&lt;/code&gt; option to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur and the least recently used entries will be removed.</source>
          <target state="translated">이 캐시 저장소는 동일한 Ruby 프로세스에서 메모리의 항목을 유지합니다. 캐시 저장소에는 &lt;code&gt;:size&lt;/code&gt; 옵션을 이니셜 라이저 로 전송하여 지정된 크기가 지정됩니다 (기본값은 32Mb). 캐시가 할당 된 크기를 초과하면 정리가 수행되고 가장 최근에 사용한 항목이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="388ac868d2b01f20b533b918207279903e2cb5cb" translate="yes" xml:space="preserve">
          <source>This cache store uses Danga's &lt;code&gt;memcached&lt;/code&gt; server to provide a centralized cache for your application. Rails uses the bundled &lt;code&gt;dalli&lt;/code&gt; gem by default. This is currently the most popular cache store for production websites. It can be used to provide a single, shared cache cluster with very high performance and redundancy.</source>
          <target state="translated">이 캐시 저장소는 Danga의 &lt;code&gt;memcached&lt;/code&gt; 서버를 사용하여 애플리케이션에 중앙 집중식 캐시를 제공합니다. Rails는 기본적으로 번들 된 &lt;code&gt;dalli&lt;/code&gt; gem을 사용합니다 . 현재 프로덕션 웹 사이트에서 가장 인기있는 캐시 저장소입니다. 매우 높은 성능과 중복성을 갖춘 단일 공유 캐시 클러스터를 제공하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0566a25ae6f6a9472adf73ecbb7e5dda0a17bcca" translate="yes" xml:space="preserve">
          <source>This cache store uses the file system to store entries. The path to the directory where the store files will be stored must be specified when initializing the cache.</source>
          <target state="translated">이 캐시 저장소는 파일 시스템을 사용하여 항목을 저장합니다. 캐시를 초기화 할 때 저장소 파일이 저장 될 디렉토리의 경로를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="6118ff64e1a183b8405ef32ed2a4c17f26e6fdf2" translate="yes" xml:space="preserve">
          <source>This calculates aggregate values in the given column. Methods for &lt;a href=&quot;calculations#method-i-count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-average&quot;&gt;&lt;code&gt;average&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-minimum&quot;&gt;&lt;code&gt;minimum&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;calculations#method-i-maximum&quot;&gt;&lt;code&gt;maximum&lt;/code&gt;&lt;/a&gt; have been added as shortcuts.</source>
          <target state="translated">이것은 주어진 열의 집계 값을 계산합니다. &lt;a href=&quot;calculations#method-i-count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;calculations#method-i-sum&quot;&gt; &lt;code&gt;sum&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;calculations#method-i-average&quot;&gt; &lt;code&gt;average&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;calculations#method-i-minimum&quot;&gt; &lt;code&gt;minimum&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;calculations#method-i-maximum&quot;&gt; &lt;code&gt;maximum&lt;/code&gt; &lt;/a&gt; 메서드가 바로 가기로 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="89267dbc248cb731eb2d1a1aa2d771f7d17b1cbb" translate="yes" xml:space="preserve">
          <source>This calculates aggregate values in the given column. Methods for &lt;a href=&quot;calculations#method-i-count&quot;&gt;count&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-sum&quot;&gt;sum&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-average&quot;&gt;average&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-minimum&quot;&gt;minimum&lt;/a&gt;, and &lt;a href=&quot;calculations#method-i-maximum&quot;&gt;maximum&lt;/a&gt; have been added as shortcuts.</source>
          <target state="translated">주어진 열의 집계 값을 계산합니다. &lt;a href=&quot;calculations#method-i-count&quot;&gt;count&lt;/a&gt; , &lt;a href=&quot;calculations#method-i-sum&quot;&gt;sum&lt;/a&gt; , &lt;a href=&quot;calculations#method-i-average&quot;&gt;average&lt;/a&gt; , &lt;a href=&quot;calculations#method-i-minimum&quot;&gt;minimum&lt;/a&gt; 및 &lt;a href=&quot;calculations#method-i-maximum&quot;&gt;maximum&lt;/a&gt; 메서드가 바로 가기로 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="9ffa6b5aa194b5a903a7cec22dee641ecbe72e3d" translate="yes" xml:space="preserve">
          <source>This callback is called after a create, update, or destroy are rolled back.</source>
          <target state="translated">이 콜백은 작성, 업데이트 또는 삭제가 롤백 된 후에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="37fe6b80052055ab7637e148a60bea110c169889" translate="yes" xml:space="preserve">
          <source>This callback is called after a record has been created, updated, or destroyed.</source>
          <target state="translated">이 콜백은 레코드가 작성, 업데이트 또는 파기 된 후에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="be4d563988c919b19f445772a50af1c7cfd5aaa0" translate="yes" xml:space="preserve">
          <source>This calls &lt;code&gt;render_in&lt;/code&gt; on the provided object with the current view context.</source>
          <target state="translated">현재 뷰 컨텍스트를 사용하여 제공된 개체에서 &lt;code&gt;render_in&lt;/code&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="9db89bdd0ded9370addf6cf6eb348dda217b9300" translate="yes" xml:space="preserve">
          <source>This can also be done for a single route:</source>
          <target state="translated">단일 경로에 대해서도이 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="defe3820d51a833c36bb81d4e57ec474ae3d5b6d" translate="yes" xml:space="preserve">
          <source>This can be changed to something else:</source>
          <target state="translated">이것은 다른 것으로 바꿀 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="d0c1d3e6298a06134e6fae092232abf7b7d3efde" translate="yes" xml:space="preserve">
          <source>This can be done with a symbol pointing to a method:</source>
          <target state="translated">이는 메소드를 가리키는 기호로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df03ee101966c8c961da22afa45c21da5e0c4429" translate="yes" xml:space="preserve">
          <source>This can be helpful for example, when we want to put views inside a different directory for subdomains.</source>
          <target state="translated">예를 들어 하위 도메인의 다른 디렉토리에 뷰를 넣고 싶을 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="10cab613965fd1c02ce409a4b182febf3b64e9fd" translate="yes" xml:space="preserve">
          <source>This can be turned off per-association with &lt;code&gt;optional: true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optional: true&lt;/code&gt; 로 연관별로 해제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5547f6f44a505672230e52eb4c6b3b85e0a28135" translate="yes" xml:space="preserve">
          <source>This can be used in situations similar to the &lt;code&gt;MessageVerifier&lt;/code&gt;, but where you don't want users to be able to determine the value of the payload.</source>
          <target state="translated">이것은 &lt;code&gt;MessageVerifier&lt;/code&gt; 와 유사한 상황에서 사용할 수 있지만 사용자가 페이로드의 가치를 결정할 수 없도록합니다.</target>
        </trans-unit>
        <trans-unit id="a7c433cc9b8bb7f780bd77fd5adc7fd9d594fc49" translate="yes" xml:space="preserve">
          <source>This can be used to provide a default set of options in the standard way: before rendering the create form, a new model instance is assigned the default options and bound to @model_name. Usually this model is not saved to the database. Instead, a second model object is created when the create request is received. This allows the user to submit a form page more than once with the expected results of creating multiple records. In addition, this allows a single partial to be used to generate form inputs for both edit and create forms.</source>
          <target state="translated">표준 옵션으로 기본 옵션 세트를 제공하는 데 사용할 수 있습니다. 작성 양식을 렌더링하기 전에 새 모델 인스턴스에 기본 옵션이 지정되고 @model_name에 바인드됩니다. 일반적으로이 모델은 데이터베이스에 저장되지 않습니다. 대신, 작성 요청이 수신 될 때 두 번째 모델 오브젝트가 작성됩니다. 이를 통해 사용자는 여러 레코드 작성 결과가 예상되는 양식 페이지를 두 번 이상 제출할 수 있습니다. 또한 단일 부분을 사용하여 편집 및 작성 양식 모두에 대한 양식 입력을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20fd39e13a1ad74ab7643003c0fde1438cfd148c" translate="yes" xml:space="preserve">
          <source>This can be useful to trigger an action on check-boxes for instance:</source>
          <target state="translated">이는 예를 들어 확인란에서 작업을 트리거하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b99261fbdf6a8235da55f083e6bb197be6d56f4" translate="yes" xml:space="preserve">
          <source>This can make for more readable code in complex queries.</source>
          <target state="translated">복잡한 쿼리에서 더 읽기 쉬운 코드를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54605430802e84d1831139f18e6c1d40c8ddad87" translate="yes" xml:space="preserve">
          <source>This can now be used in combination with the &lt;code&gt;validates&lt;/code&gt; method (see &lt;code&gt;ActiveModel::Validations::ClassMethods.validates&lt;/code&gt; for more on this).</source>
          <target state="translated">이제 &lt;code&gt;validates&lt;/code&gt; 메소드 와 함께 사용할 수 있습니다 (자세한 내용은 &lt;code&gt;ActiveModel::Validations::ClassMethods.validates&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="9ec213fb775a672d89340314d3d84215e9fa21d5" translate="yes" xml:space="preserve">
          <source>This change applies to most places in Rails where callbacks are used, including Active Record and Active Model callbacks, as well as filters in Action Controller (e.g. &lt;code&gt;before_action&lt;/code&gt;).</source>
          <target state="translated">이 변경 사항은 Active Record 및 Active Model 콜백을 비롯하여 콜백이 사용되는 Rails의 대부분의 장소와 Action Controller의 필터 (예 : &lt;code&gt;before_action&lt;/code&gt; )에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="bf7f4f522d5fd20445f73ba1f0c9e5a6e4a1be80" translate="yes" xml:space="preserve">
          <source>This change does require that the engine is run from a Rails application that has an &lt;code&gt;ApplicationController&lt;/code&gt;.</source>
          <target state="translated">이 변경을 위해서는 엔진이 &lt;code&gt;ApplicationController&lt;/code&gt; 가있는 Rails 애플리케이션에서 실행되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="07970c57d4768e51899296fca938776bab5ef5fa" translate="yes" xml:space="preserve">
          <source>This change is backwards compatible for the majority of applications, in which case you do not need to do anything.</source>
          <target state="translated">이 변경 사항은 대부분의 응용 프로그램에서 이전 버전과 호환되며이 경우 아무 작업도 수행 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6246e1eade5d1936db2b494cfe6f3517dfa5627f" translate="yes" xml:space="preserve">
          <source>This changes the column &lt;code&gt;part_number&lt;/code&gt; on products table to be a &lt;code&gt;:text&lt;/code&gt; field. Note that &lt;code&gt;change_column&lt;/code&gt; command is irreversible.</source>
          <target state="translated">제품 테이블의 &lt;code&gt;part_number&lt;/code&gt; 열을 &lt;code&gt;:text&lt;/code&gt; 필드로 변경합니다. 참고 &lt;code&gt;change_column&lt;/code&gt; 의 명령은 돌이킬 수없는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ea6bff9c8fbed3084ac15b58575f1083d35a6b6a" translate="yes" xml:space="preserve">
          <source>This chapter describes some particular attacks related to sessions, and security measures to protect your session data.</source>
          <target state="translated">이 장에서는 세션과 관련된 특정 공격 및 세션 데이터를 보호하기위한 보안 조치에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="3e2c13dd6ef7285c1ea44eb1bf4a57d328e8be33" translate="yes" xml:space="preserve">
          <source>This check is performed only if &lt;code&gt;email_confirmation&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;. To require confirmation, make sure to add a presence check for the confirmation attribute (we'll take a look at &lt;code&gt;presence&lt;/code&gt; later on in this guide):</source>
          <target state="translated">&lt;code&gt;email_confirmation&lt;/code&gt; 이 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우에만이 검사가 수행됩니다 . 확인을 요구하려면 확인 속성에 대한 상태 확인을 추가해야합니다 ( 이 안내서의 뒷부분 에서 &lt;code&gt;presence&lt;/code&gt; 살펴 보겠습니다 ).</target>
        </trans-unit>
        <trans-unit id="b7244a9e77f60322a06cb51172c087b32c03c595" translate="yes" xml:space="preserve">
          <source>This check is performed only if &lt;code&gt;terms_of_service&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;. The default error message for this helper is &lt;em&gt;&quot;must be accepted&quot;&lt;/em&gt;. You can also pass custom message via the &lt;code&gt;message&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;terms_of_service&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우에만이 검사가 수행됩니다 . 이 헬퍼의 기본 오류 메시지는 &lt;em&gt;&quot;must be be accept&quot;&lt;/em&gt; 입니다. &lt;code&gt;message&lt;/code&gt; 옵션을 통해 사용자 정의 메시지를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a19b49569205ea9cf19a11776bc8290fe9733a11" translate="yes" xml:space="preserve">
          <source>This check is performed only if &lt;code&gt;terms_of_service&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;. The default error message for this helper is &lt;em&gt;&quot;must be accepted&quot;&lt;/em&gt;. You can also pass in a custom message via the &lt;code&gt;message&lt;/code&gt; option.</source>
          <target state="translated">이 검사는 &lt;code&gt;terms_of_service&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우에만 수행됩니다 . 이 도우미의 기본 오류 메시지는 &lt;em&gt;&quot;반드시 수락되어야 함&quot;&lt;/em&gt; 입니다. &lt;code&gt;message&lt;/code&gt; 옵션을 통해 사용자 지정 메시지를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b15eea6dcda175bfc691935b655fc49e802c80bc" translate="yes" xml:space="preserve">
          <source>This class delegates unknown methods to the &lt;code&gt;association&lt;/code&gt;'s relation class via a delegate cache.</source>
          <target state="translated">이 클래스 는 델리게이트 캐시를 통해 알 수없는 메소드를 &lt;code&gt;association&lt;/code&gt; 관계 클래스에 위임합니다.</target>
        </trans-unit>
        <trans-unit id="8b14936ad9e5501d96b8fca38cc9b05f1a24609c" translate="yes" xml:space="preserve">
          <source>This class encapsulates a result returned from calling &lt;a href=&quot;connectionadapters/databasestatements#method-i-exec_query&quot;&gt;#exec_query&lt;/a&gt; on any database connection adapter. For example:</source>
          <target state="translated">이 클래스는 모든 데이터베이스 연결 어댑터 에서 &lt;a href=&quot;connectionadapters/databasestatements#method-i-exec_query&quot;&gt;#exec_query&lt;/a&gt; 를 호출하여 반환 된 결과를 캡슐화합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6a515bde8d597367a933ea4dac5a1b32dd7ac44a" translate="yes" xml:space="preserve">
          <source>This class is then used like this:</source>
          <target state="translated">이 클래스는 다음과 같이 사용됩니다 :</target>
        </trans-unit>
        <trans-unit id="e745f48ae13b0f2f92bb4804d64ffe95c402b630" translate="yes" xml:space="preserve">
          <source>This class is used by Rails to reload the I18n framework whenever they are changed upon a new request.</source>
          <target state="translated">이 클래스는 Rails에서 새로운 요청에 따라 변경 될 때마다 I18n 프레임 워크를 다시로드하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="89c2abf913a3e97d7ab6873e3aa498a91e8f1595" translate="yes" xml:space="preserve">
          <source>This class is used to instrument the execution of a single middleware. It proxies the `call` method transparently and instruments the method call.</source>
          <target state="translated">이 클래스는 단일 미들웨어 실행을 계측하는 데 사용됩니다. `call` 메소드를 투명하게 프록시하고 메소드 호출을 계측합니다.</target>
        </trans-unit>
        <trans-unit id="10fbec722834b66a788d6b29443a2bf571ae8e0f" translate="yes" xml:space="preserve">
          <source>This class is used to verify that all migrations have been run before loading a web page if &lt;code&gt;config.active_record.migration_error&lt;/code&gt; is set to :page_load</source>
          <target state="translated">이 클래스는 &lt;code&gt;config.active_record.migration_error&lt;/code&gt; 가 : page_load로 설정된 경우 웹 페이지를로드하기 전에 모든 마이그레이션이 실행되었는지 확인하는 데 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="3375c7ae74f396d65ca403824619d59f9d3ed1c4" translate="yes" xml:space="preserve">
          <source>This class method is the single entry point for the `rails notes` command.</source>
          <target state="translated">이 클래스 메소드는 'rails notes'명령의 단일 진입 점입니다.</target>
        </trans-unit>
        <trans-unit id="d57bf9e16ac0f134b87010089879713192f5f3e9" translate="yes" xml:space="preserve">
          <source>This class provides a &lt;a href=&quot;testcase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; for testing generators. To set up, you need just to configure the destination and set which generator is being tested:</source>
          <target state="translated">이 클래스는 생성기를 테스트하기위한 &lt;a href=&quot;testcase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 를 제공합니다 . 설정하려면 대상을 구성하고 테스트 할 생성기를 설정하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="06babc6870f5a898792fb0a11d7b4aded32ca5b7" translate="yes" xml:space="preserve">
          <source>This class provides a &lt;a href=&quot;testcase&quot;&gt;TestCase&lt;/a&gt; for testing generators. To setup, you need just to configure the destination and set which generator is being tested:</source>
          <target state="translated">이 클래스는 생성기를 테스트하기위한 &lt;a href=&quot;testcase&quot;&gt;TestCase&lt;/a&gt; 를 제공합니다 . 설정하려면 대상을 구성하고 테스트중인 생성기를 설정하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="56807e1c01e7f2582327cab5e97700d72fa27d27" translate="yes" xml:space="preserve">
          <source>This class provides the ability to write an &lt;a href=&quot;sse&quot;&gt;&lt;code&gt;SSE&lt;/code&gt;&lt;/a&gt; (Server Sent Event) to an &lt;code&gt;IO&lt;/code&gt; stream. The class is initialized with a stream and can be used to either write a JSON string or an object which can be converted to JSON.</source>
          <target state="translated">이 클래스는 &lt;a href=&quot;sse&quot;&gt; &lt;code&gt;SSE&lt;/code&gt; &lt;/a&gt; (Server Sent Event)를 &lt;code&gt;IO&lt;/code&gt; 스트림 에 쓰는 기능을 제공합니다 . 클래스는 스트림으로 초기화되며 JSON 문자열 또는 JSON으로 변환 할 수있는 객체를 작성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d673ae1de282bc01ba31145580f50177bbfb8b0" translate="yes" xml:space="preserve">
          <source>This class provides the ability to write an &lt;a href=&quot;sse&quot;&gt;SSE&lt;/a&gt; (Server Sent Event) to an IO stream. The class is initialized with a stream and can be used to either write a JSON string or an object which can be converted to JSON.</source>
          <target state="translated">이 클래스는 &lt;a href=&quot;sse&quot;&gt;SSE&lt;/a&gt; (Server Sent Event)를 IO 스트림 에 쓸 수있는 기능을 제공합니다 . 클래스는 스트림으로 초기화되며 JSON 문자열 또는 JSON으로 변환 할 수있는 객체를 작성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d653286bf96aba74228548ea6351cfabd32bec75" translate="yes" xml:space="preserve">
          <source>This class provides the foundation for interacting with the cache in Rails. This is an abstract class and you cannot use it on its own. Rather you must use a concrete implementation of the class tied to a storage engine. Rails ships with several implementations documented below.</source>
          <target state="translated">이 클래스는 Rails의 캐시와 상호 작용하기위한 기초를 제공합니다. 이것은 추상 클래스이며 자체적으로 사용할 수 없습니다. 오히려 스토리지 엔진에 연결된 클래스의 구체적인 구현을 사용해야합니다. Rails는 아래에 문서화 된 몇 가지 구현과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="e2791de68eb0237bebce0392853ff57de3ef9058" translate="yes" xml:space="preserve">
          <source>This code fetches data from &quot;/test&quot;, and then appends the result to the &lt;code&gt;div&lt;/code&gt; with an id of &lt;code&gt;results&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &quot;/ test&quot;에서 데이터를 가져온 다음 결과를 id로 &lt;code&gt;results&lt;/code&gt; &lt;code&gt;div&lt;/code&gt; 에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="e3eafffd2c753f86805349b5581a202dd07eee2b" translate="yes" xml:space="preserve">
          <source>This code fetches data from &quot;/test&quot;, and then appends the result to the element with an id of &lt;code&gt;results&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &quot;/ test&quot;에서 데이터를 가져온 다음 결과를 &lt;code&gt;results&lt;/code&gt; 의 ID가있는 요소에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="439c06bad781236bd049a3c068a21f302a3bce89" translate="yes" xml:space="preserve">
          <source>This code is highly preferable:</source>
          <target state="translated">이 코드는 매우 선호됩니다 :</target>
        </trans-unit>
        <trans-unit id="4f2fbf6977cc09e4dfe8481a06c90e5949e13a99" translate="yes" xml:space="preserve">
          <source>This code looks fine at the first sight. But the problem lies within the total number of queries executed. The above code executes 1 (to find 10 books) + 10 (one per each book to load the author) = &lt;strong&gt;11&lt;/strong&gt; queries in total.</source>
          <target state="translated">이 코드는 첫눈에 잘 보입니다. 그러나 문제는 실행 된 총 쿼리 수에 있습니다. 위의 코드는 1 (10 권의 책을 찾기 위해) + 10 (저자를로드하기 위해 각 책마다 하나씩) = 총 &lt;strong&gt;11 개의&lt;/strong&gt; 쿼리를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="cf500c3c8a7fb537a497a92b60a34ceaa06c8c29" translate="yes" xml:space="preserve">
          <source>This code looks fine at the first sight. But the problem lies within the total number of queries executed. The above code executes 1 (to find 10 clients) + 10 (one per each client to load the address) = &lt;strong&gt;11&lt;/strong&gt; queries in total.</source>
          <target state="translated">이 코드는 첫눈에 잘 보입니다. 그러나 문제는 실행 된 총 쿼리 수 내에 있습니다. 위의 코드는 1 (10 개의 클라이언트를 찾기 위해) + 10 (주소를로드하기 위해 각 클라이언트 당 하나씩) = 총 &lt;strong&gt;11 개의&lt;/strong&gt; 쿼리를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="94727cfd4a995038a6f1da663151e279ae86383c" translate="yes" xml:space="preserve">
          <source>This code will generate SQL like this:</source>
          <target state="translated">이 코드는 다음과 같은 SQL을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="609b7ef302631f417d6afac2da186c9c6f9548f6" translate="yes" xml:space="preserve">
          <source>This code will use &lt;code&gt;my_engine.user_path(@user)&lt;/code&gt; to generate the proper route.</source>
          <target state="translated">이 코드는 &lt;code&gt;my_engine.user_path(@user)&lt;/code&gt; 를 사용하여 적절한 경로를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="03f95dc3ccc6c6e45151da4a754073b4b3149c7e" translate="yes" xml:space="preserve">
          <source>This command can be nested.</source>
          <target state="translated">이 명령은 중첩 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="317442b797232f02be324b4b9ed468f79d4b6182" translate="yes" xml:space="preserve">
          <source>This command is very helpful when you are debugging concurrent threads and need to verify that there are no race conditions in your code.</source>
          <target state="translated">이 명령은 동시 스레드를 디버깅 할 때 매우 유용하며 코드에 경쟁 조건이 없는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="80915cd9dc7fff63ca68cba70bb9384809be5f0d" translate="yes" xml:space="preserve">
          <source>This command will generate four files:</source>
          <target state="translated">이 명령은 4 개의 파일을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="aaf37d0a8579b15595338a15aa94e5e3da392a0c" translate="yes" xml:space="preserve">
          <source>This command will generate the &lt;code&gt;Thud&lt;/code&gt; application, and then apply the template to the generated output.</source>
          <target state="translated">이 명령은 &lt;code&gt;Thud&lt;/code&gt; 응용 프로그램 을 생성 한 다음 생성 된 출력에 템플릿을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="f52a782529b26434e43d41b8c11a9a9cfdc35964" translate="yes" xml:space="preserve">
          <source>This command will output this information:</source>
          <target state="translated">이 명령은 다음 정보를 출력합니다 :</target>
        </trans-unit>
        <trans-unit id="a039ae63928ac7a4161c7e1c8a87a8c773703cc0" translate="yes" xml:space="preserve">
          <source>This command, when run for the first time, will copy over all the migrations from the engine. When run the next time, it will only copy over migrations that haven't been copied over already. The first run for this command will output something such as this:</source>
          <target state="translated">이 명령은 처음 실행될 때 엔진에서 모든 마이그레이션을 복사합니다. 다음에 실행될 때는 아직 복사되지 않은 마이그레이션 만 복사합니다. 이 명령을 처음 실행하면 다음과 같은 결과가 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="29574f91239ed2bd7e7687ebc2466676ea941217" translate="yes" xml:space="preserve">
          <source>This cookie-based session store is the Rails default. It is dramatically faster than the alternatives.</source>
          <target state="translated">이 쿠키 기반 세션 저장소는 Rails 기본값입니다. 대안보다 훨씬 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="0f29bcb1394a4dcda50076f5e42fc7bab69c9328" translate="yes" xml:space="preserve">
          <source>This could be in a search action and the user may enter a project's name that they want to find. If a malicious user enters ' OR 1 --, the resulting SQL query will be:</source>
          <target state="translated">이것은 검색 작업에있을 수 있으며 사용자는 찾고자하는 프로젝트의 이름을 입력 할 수 있습니다. 악의적 인 사용자가 'OR 1-을 입력하면 결과 SQL 쿼리는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="081f50a453aac3710572f5da8ad424678930ab6d" translate="yes" xml:space="preserve">
          <source>This could be in a search action and the user may enter a project's name that they want to find. If a malicious user enters &lt;code&gt;' OR 1 --&lt;/code&gt;, the resulting SQL query will be:</source>
          <target state="translated">이것은 검색 작업에있을 수 있으며 사용자는 찾고자하는 프로젝트의 이름을 입력 할 수 있습니다. 악의적 인 사용자가 &lt;code&gt;' OR 1 --&lt;/code&gt; 입력 하면 결과 SQL 쿼리는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b6f2af4b75cb550178bf327f34ea5f78eeb3ae43" translate="yes" xml:space="preserve">
          <source>This covers various different error types so we need to do additional work to classify the exception definitively as a &lt;a href=&quot;../preparedstatementcacheexpired&quot;&gt;ActiveRecord::PreparedStatementCacheExpired&lt;/a&gt;</source>
          <target state="translated">여기에는 다양한 오류 유형이 포함되므로 예외를 &lt;a href=&quot;../preparedstatementcacheexpired&quot;&gt;ActiveRecord :: PreparedStatementCacheExpired&lt;/a&gt; 로 명확하게 분류하기 위해 추가 작업을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="cfbd0fc027f2d942dcd37f52b54d341c33610053" translate="yes" xml:space="preserve">
          <source>This creates &lt;code&gt;comments&lt;/code&gt; as a &lt;em&gt;nested resource&lt;/em&gt; within &lt;code&gt;articles&lt;/code&gt;. This is another part of capturing the hierarchical relationship that exists between articles and comments.</source>
          <target state="translated">이것은 &lt;code&gt;articles&lt;/code&gt; 내 에서 &lt;em&gt;중첩 된 리소스&lt;/em&gt; 로 &lt;code&gt;comments&lt;/code&gt; 을 만듭니다 . 이것은 기사와 의견 사이에 존재하는 계층 적 관계를 포착하는 또 다른 부분입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c7356600fd1f688811cf440fec9ea49752e6e17d" translate="yes" xml:space="preserve">
          <source>This creates a nested route for the comments, which is what the form requires.</source>
          <target state="translated">이렇게하면 주석에 대한 중첩 경로가 만들어지며 이는 양식에 필요한 것입니다.</target>
        </trans-unit>
        <trans-unit id="63dfbd8fca59aadbfe204eda34786ba63a06f05d" translate="yes" xml:space="preserve">
          <source>This creates an &lt;code&gt;addresses_attributes=&lt;/code&gt; method on &lt;code&gt;Person&lt;/code&gt; that allows you to create, update, and (optionally) destroy addresses.</source>
          <target state="translated">이렇게하면 &lt;code&gt;Person&lt;/code&gt; 에 address_attributes &lt;code&gt;addresses_attributes=&lt;/code&gt; 메소드를 작성하여 주소 를 작성, 업데이트 및 선택적으로 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d5c272ab89b098704231970626a441c213da255" translate="yes" xml:space="preserve">
          <source>This creates both &amp;ldquo;first&amp;rdquo; and &amp;ldquo;second&amp;rdquo; posts. Reason is the &lt;a href=&quot;../rollback&quot;&gt;&lt;code&gt;ActiveRecord::Rollback&lt;/code&gt;&lt;/a&gt; exception in the nested block does not issue a ROLLBACK. Since these exceptions are captured in transaction blocks, the parent block does not see it and the real transaction is committed.</source>
          <target state="translated">이렇게하면 &quot;첫 번째&quot;및 &quot;두 번째&quot;게시물이 모두 생성됩니다. 이유는 중첩 된 블록 의 &lt;a href=&quot;../rollback&quot;&gt; &lt;code&gt;ActiveRecord::Rollback&lt;/code&gt; &lt;/a&gt; 예외가 ROLLBACK을 발행하지 않기 때문입니다. 이러한 예외는 트랜잭션 블록에서 캡처되므로 부모 블록은이를 보지 않고 실제 트랜잭션이 커밋됩니다.</target>
        </trans-unit>
        <trans-unit id="276f47aa29131225538db3d8071790e1bff8765e" translate="yes" xml:space="preserve">
          <source>This creates four files and one empty directory:</source>
          <target state="translated">이것은 4 개의 파일과 하나의 빈 디렉토리를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3da8fb6ede4e8e8b624b7d2eca6665c6b62a8a50" translate="yes" xml:space="preserve">
          <source>This creates six different routes in your application, all mapping to the &lt;code&gt;Profiles&lt;/code&gt; controller (note that the controller is named after the plural):</source>
          <target state="translated">이렇게하면 응용 프로그램에 6 개의 서로 다른 경로가 만들어지며, 모두 &lt;code&gt;Profiles&lt;/code&gt; 컨트롤러에 매핑됩니다 (컨트롤러의 이름은 복수형 임).</target>
        </trans-unit>
        <trans-unit id="436d0c20e5818a9b9c8fa494d96cca999be2cca7" translate="yes" xml:space="preserve">
          <source>This custom store must be defined as &lt;code&gt;ActionDispatch::Session::MyCustomStore&lt;/code&gt;.</source>
          <target state="translated">이 사용자 정의 저장소는 &lt;code&gt;ActionDispatch::Session::MyCustomStore&lt;/code&gt; 로 정의되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="7b8dcc561d8d7efc98e338e3b3a80ad10d3bd1a5" translate="yes" xml:space="preserve">
          <source>This declaration constrains the &lt;code&gt;:id&lt;/code&gt; parameter to match the supplied regular expression. So, in this case, the router would no longer match &lt;code&gt;/photos/1&lt;/code&gt; to this route. Instead, &lt;code&gt;/photos/RR27&lt;/code&gt; would match.</source>
          <target state="translated">이 선언 은 제공된 정규식과 일치하도록 &lt;code&gt;:id&lt;/code&gt; 매개 변수를 제한합니다 . 따라서이 경우 라우터는 더 이상 &lt;code&gt;/photos/1&lt;/code&gt; 을이 경로 와 일치시키지 않습니다 . 대신 &lt;code&gt;/photos/RR27&lt;/code&gt; 이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="497c1b65b17c79aa75934cb1aea046a96168de6b" translate="yes" xml:space="preserve">
          <source>This declaration needs to be backed up by a corresponding foreign key column in the books table. For a brand new table, the migration might look something like this:</source>
          <target state="translated">이 선언은 books 테이블의 해당 외래 키 열로 백업해야합니다. 새로운 테이블의 경우 마이그레이션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6243f746968a49d3dc031414f454a2f40e1698a4" translate="yes" xml:space="preserve">
          <source>This declaration permits the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;emails&lt;/code&gt;, and &lt;code&gt;friends&lt;/code&gt; attributes. It is expected that &lt;code&gt;emails&lt;/code&gt; will be an array of permitted scalar values, and that &lt;code&gt;friends&lt;/code&gt; will be an array of resources with specific attributes: they should have a &lt;code&gt;name&lt;/code&gt; attribute (any permitted scalar values allowed), a &lt;code&gt;hobbies&lt;/code&gt; attribute as an array of permitted scalar values, and a &lt;code&gt;family&lt;/code&gt; attribute which is restricted to having a &lt;code&gt;name&lt;/code&gt; (any permitted scalar values allowed here, too).</source>
          <target state="translated">이 선언은 &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;emails&lt;/code&gt; 및 &lt;code&gt;friends&lt;/code&gt; 속성을 허용 합니다. &lt;code&gt;emails&lt;/code&gt; 은 허용 된 스칼라 값의 배열이되고 &lt;code&gt;friends&lt;/code&gt; 는 특정 속성을 가진 자원의 배열 이 될 것으로 예상 됩니다 . &lt;code&gt;name&lt;/code&gt; 속성 (허용 된 스칼라 값이 허용됨), 허용 된 스칼라의 배열로서의 &lt;code&gt;hobbies&lt;/code&gt; 속성이 있어야합니다. 값 및 &lt;code&gt;name&lt;/code&gt; 을 갖는 것으로 제한된 &lt;code&gt;family&lt;/code&gt; 속성 (여기서는 허용 된 스칼라 값도 허용됨).</target>
        </trans-unit>
        <trans-unit id="c189cf272d70fe3206dafff0000c9be5dcbfcc2c" translate="yes" xml:space="preserve">
          <source>This default will be automatically configured in new applications. If an existing application wants to add this feature it will need to be turned on in an initializer:</source>
          <target state="translated">이 기본값은 새 응용 프로그램에서 자동으로 구성됩니다. 기존 애플리케이션이이 기능을 추가하려면 이니셜 라이저에서 켜야합니다.</target>
        </trans-unit>
        <trans-unit id="01125580540f8e7b1e2bed712693ddb5855a93da" translate="yes" xml:space="preserve">
          <source>This default will be automatically configured in new applications. If existing application want to add this feature it will need to be turned on in an initializer.</source>
          <target state="translated">이 기본값은 새 응용 프로그램에서 자동으로 구성됩니다. 기존 응용 프로그램에서이 기능을 추가하려면 초기화 프로그램에서이 기능을 켜야합니다.</target>
        </trans-unit>
        <trans-unit id="d0f91a62649f0abf238a3d6e647bdb7c716824b9" translate="yes" xml:space="preserve">
          <source>This demonstrates a shorter syntax for the examples in &lt;a href=&quot;#array-conditions&quot;&gt;Array Conditions&lt;/a&gt;</source>
          <target state="translated">이것은 &lt;a href=&quot;#array-conditions&quot;&gt;배열 조건&lt;/a&gt; 의 예제에 대한 더 짧은 구문을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="9b9d714522810170bed8f9ad10fc3d7a14c5f000" translate="yes" xml:space="preserve">
          <source>This directory contains one file, &lt;code&gt;bin/rails&lt;/code&gt;, which enables you to use the &lt;code&gt;rails&lt;/code&gt; sub-commands and generators just like you would within an application. This means that you will be able to generate new controllers and models for this engine very easily by running commands like this:</source>
          <target state="translated">이 디렉토리에는 &lt;code&gt;bin/rails&lt;/code&gt; 파일 하나가 포함되어 있어 응용 프로그램 내에서와 마찬가지로 &lt;code&gt;rails&lt;/code&gt; 하위 명령 및 생성기 를 사용할 수 있습니다 . 이는 다음과 같은 명령을 실행하여이 엔진에 대한 새 컨트롤러 및 모델을 매우 쉽게 생성 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7e382df0917cb80d4e37f4a8e547e0d77496ebd2" translate="yes" xml:space="preserve">
          <source>This doesn't apply to just overrides, but anything that you add in an engine that isn't referenced by your main application.</source>
          <target state="translated">이것은 재정의에만 적용되는 것이 아니라 기본 응용 프로그램에서 참조하지 않는 엔진에 추가하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4f97207956daaab6cee7b0b99de9791037a22587" translate="yes" xml:space="preserve">
          <source>This enables annotate translated text to be aware of the scope it was resolved against.</source>
          <target state="translated">이렇게하면 번역 된 텍스트에 주석을 달아 해결 된 범위를 인식 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fca72eb1d707bc741ec18c96ff3ad18e2ce525c9" translate="yes" xml:space="preserve">
          <source>This endpoint serves static files from disk using Rack::File.</source>
          <target state="translated">이 끝점은 Rack :: File을 사용하여 디스크에서 정적 파일을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="66ba41d34d758a571b86ec9a5fbbc8545295c867" translate="yes" xml:space="preserve">
          <source>This error indicates that Rails cannot find the &lt;code&gt;new&lt;/code&gt; action inside the &lt;code&gt;ArticlesController&lt;/code&gt; that you just generated. This is because when controllers are generated in Rails they are empty by default, unless you tell it your desired actions during the generation process.</source>
          <target state="translated">이 오류는 Rails가 방금 생성 한 &lt;code&gt;ArticlesController&lt;/code&gt; 에서 &lt;code&gt;new&lt;/code&gt; 조치를 찾을 수 없음을 나타냅니다 . 생성 프로세스 중에 원하는 조치를 지시하지 않으면 컨트롤러가 Rails에서 생성 될 때 기본적으로 비어 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="29aed8b26a416886193c5d4f05f247148454ee1b" translate="yes" xml:space="preserve">
          <source>This error is raised when trying to eager load a polymorphic association using a JOIN. Eager loading polymorphic associations is only possible with &lt;a href=&quot;querymethods#method-i-preload&quot;&gt;ActiveRecord::Relation#preload&lt;/a&gt;.</source>
          <target state="translated">JOIN을 사용하여 다형성 연관을 열망 할 때이 오류가 발생합니다. 다형성 연관을보다 빠르게로드하는 것은 &lt;a href=&quot;querymethods#method-i-preload&quot;&gt;ActiveRecord :: Relation # preload&lt;/a&gt; 로만 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="c36a009a82305ca82e7786666343739d8cbc09be" translate="yes" xml:space="preserve">
          <source>This error occurs because the route needs to have a controller defined in order to serve the request. The solution to this particular problem is simple: create a controller called &lt;code&gt;ArticlesController&lt;/code&gt;. You can do this by running this command:</source>
          <target state="translated">이 오류는 요청을 처리하기 위해 경로에 컨트롤러가 정의되어 있어야하기 때문에 발생합니다. 이 특정 문제에 대한 해결책은 간단합니다. &lt;code&gt;ArticlesController&lt;/code&gt; 라는 컨트롤러를 작성하십시오 . 다음 명령을 실행하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6f4ec00f14631ec68ed64dac8bde9819c949665" translate="yes" xml:space="preserve">
          <source>This essentially finds the object (or multiple objects) with the given id, creates a new object from the attributes, and then calls destroy on it.</source>
          <target state="translated">이것은 본질적으로 주어진 id를 가진 객체 (또는 복수의 객체)를 찾고, 속성으로부터 새로운 객체를 생성 한 다음 destroy를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="aba405a21502b349d888a3e2dc183e1fb9b1f816" translate="yes" xml:space="preserve">
          <source>This event is only used when &lt;code&gt;#fetch&lt;/code&gt; is called with a block.</source>
          <target state="translated">이 이벤트는 &lt;code&gt;#fetch&lt;/code&gt; 가 블록과 함께 호출 될 때만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f2db974ddac791cd42b1da641f5b73ec9ca9508" translate="yes" xml:space="preserve">
          <source>This example illustrates this using a URL query parameter to set the locale (e.g. &lt;code&gt;http://example.com/books?locale=pt&lt;/code&gt;). With this approach, &lt;code&gt;http://localhost:3000?locale=pt&lt;/code&gt; renders the Portuguese localization, while &lt;code&gt;http://localhost:3000?locale=de&lt;/code&gt; loads a German localization.</source>
          <target state="translated">이 예는 URL 쿼리 매개 변수를 사용하여 로케일을 설정하는 방법을 보여줍니다 (예 : &lt;code&gt;http://example.com/books?locale=pt&lt;/code&gt; ). 이 방법을 사용하면 &lt;code&gt;http://localhost:3000?locale=pt&lt;/code&gt; 는 포르투갈어 현지화를 렌더링하고 &lt;code&gt;http://localhost:3000?locale=de&lt;/code&gt; 는 독일어 현지화를로드합니다.</target>
        </trans-unit>
        <trans-unit id="1510bec1bc7bea53e98c5c1204f7826c949f11c3" translate="yes" xml:space="preserve">
          <source>This example is a Base64 encoded JavaScript which displays a simple message box. In a redirection URL, an attacker could redirect to this URL with the malicious code in it. As a countermeasure, &lt;em&gt;do not allow the user to supply (parts of) the URL to be redirected to&lt;/em&gt;.</source>
          <target state="translated">이 예는 간단한 메시지 상자를 표시하는 Base64 인코딩 JavaScript입니다. 리디렉션 URL에서 공격자는 악성 코드가 포함 된이 URL로 리디렉션 할 수 있습니다. 이에 대한 대책으로 &lt;em&gt;사용자가 리디렉션 할 URL을 제공 (일부)하지 못하도록합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="94f4c2e14d707f20ff9ea8728189ed2aaed147d6" translate="yes" xml:space="preserve">
          <source>This example places a string in the flash. And of course, you can put as many as you like at a time too. If you want to pass non-primitive types, you will have to handle that in your application. Example: To show messages with links, you will have to use sanitize helper.</source>
          <target state="translated">이 예제는 플래시에 문자열을 배치합니다. 물론 한 번에 원하는만큼 넣을 수도 있습니다. 기본이 아닌 유형을 전달하려면 애플리케이션에서 해당 유형을 처리해야합니다. 예 : 링크가있는 메시지를 표시하려면 위생 도우미를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="60f67ca0c626cdf43996b4099afc6debf3304037" translate="yes" xml:space="preserve">
          <source>This example pops up a message box. It will be recognized by the above &lt;code&gt;sanitize()&lt;/code&gt; filter, though. A great tool to obfuscate and encode strings, and thus &quot;get to know your enemy&quot;, is the &lt;a href=&quot;https://hackvertor.co.uk/public&quot;&gt;Hackvertor&lt;/a&gt;. Rails' &lt;code&gt;sanitize()&lt;/code&gt; method does a good job to fend off encoding attacks.</source>
          <target state="translated">이 예는 메시지 상자를 표시합니다. 하지만 위의 &lt;code&gt;sanitize()&lt;/code&gt; 필터에 의해 인식됩니다 . 문자열을 난독 화하고 인코딩하여 &quot;적을 알 수있는&quot;훌륭한 도구는 &lt;a href=&quot;https://hackvertor.co.uk/public&quot;&gt;Hackvertor&lt;/a&gt; 입니다. Rails의 &lt;code&gt;sanitize()&lt;/code&gt; 메서드는 인코딩 공격을 막는 데 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="33ee26c948944cd253e0827af1d9031fb96bc2b4" translate="yes" xml:space="preserve">
          <source>This example pops up a message box. It will be recognized by the above sanitize() filter, though. A great tool to obfuscate and encode strings, and thus &quot;get to know your enemy&quot;, is the &lt;a href=&quot;https://hackvertor.co.uk/public&quot;&gt;Hackvertor&lt;/a&gt;. Rails' sanitize() method does a good job to fend off encoding attacks.</source>
          <target state="translated">이 예는 메시지 상자를 팝업합니다. 그러나 위의 sanitize () 필터로 인식됩니다. 문자열을 난독 화하고 인코딩하여 &quot;적을 알게&quot;하는 훌륭한 도구는 &lt;a href=&quot;https://hackvertor.co.uk/public&quot;&gt;Hackvertor&lt;/a&gt; 입니다. Rails의 sanitize () 메소드는 인코딩 공격을 차단하는 데 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="230f995753ecdf35190841ba13710083ced79868" translate="yes" xml:space="preserve">
          <source>This example relies on the fact that you will already have handled authentication of the user somewhere else in your application, and that a successful authentication sets a signed cookie with the user ID.</source>
          <target state="translated">이 예제는 애플리케이션의 다른 곳에서 사용자의 인증을 이미 처리했으며 인증이 성공하면 사용자 ID로 서명 된 쿠키를 설정한다는 사실에 의존합니다.</target>
        </trans-unit>
        <trans-unit id="e10420f6ede59a37a826fcd43332ac70b42184f6" translate="yes" xml:space="preserve">
          <source>This example relies on the fact that you will already have handled authentication of the user somewhere else in your application, and that a successful authentication sets an encrypted cookie with the user ID.</source>
          <target state="translated">이 예제는 이미 애플리케이션의 다른 곳에서 사용자의 인증을 처리했으며 성공적인 인증은 사용자 ID로 암호화 된 쿠키를 설정한다는 사실에 의존합니다.</target>
        </trans-unit>
        <trans-unit id="15a5d9d73c5d7ae4ea28e73bcec401952ead48a6" translate="yes" xml:space="preserve">
          <source>This example shows how you can print the instance variables defined within the current context:</source>
          <target state="translated">이 예제는 현재 컨텍스트 내에 정의 된 인스턴스 변수를 인쇄하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0f196fd922d277fe17877b9ac4b4f97dac3b1139" translate="yes" xml:space="preserve">
          <source>This example will only take money from David and give it to Mary if neither &lt;code&gt;withdrawal&lt;/code&gt; nor &lt;code&gt;deposit&lt;/code&gt; raise an exception. Exceptions will force a ROLLBACK that returns the database to the state before the transaction began. Be aware, though, that the objects will &lt;em&gt;not&lt;/em&gt; have their instance data returned to their pre-transactional state.</source>
          <target state="translated">이 예는 &lt;code&gt;withdrawal&lt;/code&gt; 나 &lt;code&gt;deposit&lt;/code&gt; 모두 예외를 제기 하지 않는 경우 David에게서 돈을 가져와 Mary에게 줄 것 입니다. 예외는 트랜잭션을 시작하기 전에 데이터베이스를 상태로 되 돌리는 ROLLBACK을 강제합니다. 그러나 오브젝트 에는 인스턴스 데이터가 트랜잭션 전 상태로 리턴 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="998fc86682bb8f42f6e558c3ce2f919dee276525" translate="yes" xml:space="preserve">
          <source>This example, again, showed that a restricted list filter is never complete. However, as custom CSS in web applications is a quite rare feature, it may be hard to find a good permitted CSS filter. &lt;em&gt;If you want to allow custom colors or images, you can allow the user to choose them and build the CSS in the web application&lt;/em&gt;. Use Rails' &lt;code&gt;sanitize()&lt;/code&gt; method as a model for a permitted CSS filter, if you really need one.</source>
          <target state="translated">이 예는 다시 제한 목록 필터가 완료되지 않았 음을 보여줍니다. 그러나 웹 응용 프로그램의 사용자 지정 CSS는 매우 드문 기능이므로 허용되는 CSS 필터를 찾기가 어려울 수 있습니다. &lt;em&gt;사용자 정의 색상 또는 이미지를 허용하려는 경우 사용자가 웹 애플리케이션에서 해당 색상 또는 이미지를 선택하고 CSS를 빌드하도록 허용 할 수 있습니다&lt;/em&gt; . 실제로 필요한 경우 Rails의 &lt;code&gt;sanitize()&lt;/code&gt; 메소드를 허용 된 CSS 필터의 모델로 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e60260896b2290a3e4082126c758244aa4b88c71" translate="yes" xml:space="preserve">
          <source>This feature can be turned off completely by setting:</source>
          <target state="translated">이 기능은 다음을 설정하여 완전히 끌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58ffd7a01c3b666b4a389f4b2058f3053cd26c00" translate="yes" xml:space="preserve">
          <source>This feature is accomplished by instantiating the class and storing the instance as a thread local keyed by the class name. In the example above a key &amp;ldquo;ActiveRecord::RuntimeRegistry&amp;rdquo; is stored in &lt;code&gt;Thread.current&lt;/code&gt;. The class methods proxy to said thread local instance.</source>
          <target state="translated">이 기능은 클래스를 인스턴스화하고 인스턴스를 클래스 이름으로 키가 지정된 스레드 로컬로 저장하여 수행됩니다. 위의 예제에서 &quot;ActiveRecord :: RuntimeRegistry&quot;키는 &lt;code&gt;Thread.current&lt;/code&gt; 에 저장됩니다 . 클래스 메소드는 해당 스레드 로컬 인스턴스에 프록시합니다.</target>
        </trans-unit>
        <trans-unit id="f6759958ee47f1c313322a36303776901e76588e" translate="yes" xml:space="preserve">
          <source>This feature is implemented by keeping a connection pool in &lt;a href=&quot;base&quot;&gt;&lt;code&gt;ActiveRecord::Base&lt;/code&gt;&lt;/a&gt; that is a hash indexed by the class. If a connection is requested, the &lt;a href=&quot;connectionhandling#method-i-retrieve_connection&quot;&gt;ActiveRecord::Base.retrieve_connection&lt;/a&gt; method will go up the class-hierarchy until a connection is found in the connection pool.</source>
          <target state="translated">이 기능은 클래스에 의해 인덱싱 된 해시 인 &lt;a href=&quot;base&quot;&gt; &lt;code&gt;ActiveRecord::Base&lt;/code&gt; &lt;/a&gt; 에 연결 풀을 유지하여 구현됩니다 . 연결이 요청되면 &lt;a href=&quot;connectionhandling#method-i-retrieve_connection&quot;&gt;ActiveRecord :: Base.retrieve_connection&lt;/a&gt; 메서드는 연결 풀에서 연결을 찾을 때까지 클래스 계층 구조로 올라갑니다.</target>
        </trans-unit>
        <trans-unit id="f8fea081f4b4bbdb9c69b687c807254bad0018f2" translate="yes" xml:space="preserve">
          <source>This feature is implemented by keeping a connection pool in &lt;a href=&quot;base&quot;&gt;ActiveRecord::Base&lt;/a&gt; that is a hash indexed by the class. If a connection is requested, the &lt;a href=&quot;connectionhandling#method-i-retrieve_connection&quot;&gt;ActiveRecord::Base.retrieve_connection&lt;/a&gt; method will go up the class-hierarchy until a connection is found in the connection pool.</source>
          <target state="translated">이 기능은 클래스에 의해 색인 된 해시 인 &lt;a href=&quot;base&quot;&gt;ActiveRecord :: Base&lt;/a&gt; 에 연결 풀을 유지함으로써 구현됩니다 . 연결이 요청되면 &lt;a href=&quot;connectionhandling#method-i-retrieve_connection&quot;&gt;ActiveRecord :: Base.retrieve_connection&lt;/a&gt; 메소드는 연결 풀에서 연결을 찾을 때까지 클래스 계층 구조로 올라갑니다.</target>
        </trans-unit>
        <trans-unit id="31c2888e43c5f2017a9d9c97fd6ad3e2f7251ed1" translate="yes" xml:space="preserve">
          <source>This file allows you to specify what npm dependencies are needed for your Rails application. This file is used by Yarn. For more information about Yarn, see the &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;Yarn website&lt;/a&gt;.</source>
          <target state="translated">이 파일을 사용하면 Rails 애플리케이션에 필요한 npm 종속성을 지정할 수 있습니다. 이 파일은 Yarn에서 사용합니다. 원사에 대한 자세한 내용은 &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;원사 웹 사이트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0305989c7986e5a24f3563489e3f90f47e607d92" translate="yes" xml:space="preserve">
          <source>This file begins with requiring &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">이 파일은 &lt;code&gt;config/application.rb&lt;/code&gt; 가 필요 합니다 :</target>
        </trans-unit>
        <trans-unit id="3fe1d94720be601d84c164eb7af0efee4c6d683a" translate="yes" xml:space="preserve">
          <source>This file contains the default Ruby version.</source>
          <target state="translated">이 파일에는 기본 Ruby 버전이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9fd5a5fc49aeb9f2dbf45033958e98349f1015c" translate="yes" xml:space="preserve">
          <source>This file is as follows:</source>
          <target state="translated">이 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aa4586bd736ea7a04fa9074689e9c187780df338" translate="yes" xml:space="preserve">
          <source>This file is responsible for requiring all the individual frameworks of Rails:</source>
          <target state="translated">이 파일은 Rails의 모든 개별 프레임 워크를 요구합니다.</target>
        </trans-unit>
        <trans-unit id="a959a5476ef288f573d0bcace7defed5f76e9c1c" translate="yes" xml:space="preserve">
          <source>This file is the common file required by &lt;code&gt;config.ru&lt;/code&gt; (&lt;code&gt;bin/rails server&lt;/code&gt;) and Passenger. This is where these two ways to run the server meet; everything before this point has been Rack and Rails setup.</source>
          <target state="translated">이 파일은 &lt;code&gt;config.ru&lt;/code&gt; ( &lt;code&gt;bin/rails server&lt;/code&gt; ) 및 Passenger에 필요한 공통 파일 입니다. 서버를 실행하는이 두 가지 방법이 만나는 곳입니다. 이 시점 이전의 모든 것은 Rack and Rails 설정이었습니다.</target>
        </trans-unit>
        <trans-unit id="3f7115a8bfccf5ab029f1e9f589e05ca3cf679cb" translate="yes" xml:space="preserve">
          <source>This file is the common file required by &lt;code&gt;config.ru&lt;/code&gt; (&lt;code&gt;rails server&lt;/code&gt;) and Passenger. This is where these two ways to run the server meet; everything before this point has been Rack and Rails setup.</source>
          <target state="translated">이 파일은 &lt;code&gt;config.ru&lt;/code&gt; ( &lt;code&gt;rails server&lt;/code&gt; ) 및 Passenger에 필요한 공통 파일 입니다. 서버를 실행하는이 두 가지 방법이 만나는 곳입니다. 이 시점 이전의 모든 것은 Rack and Rails 설정이었습니다.</target>
        </trans-unit>
        <trans-unit id="fa57ab990e2caace5607002f73d0317305bc7d1c" translate="yes" xml:space="preserve">
          <source>This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing &lt;code&gt;Rakefile&lt;/code&gt;, you should add your own tasks by adding files to the &lt;code&gt;lib/tasks&lt;/code&gt; directory of your application.</source>
          <target state="translated">이 파일은 명령 줄에서 실행할 수있는 작업을 찾아서로드합니다. 작업 정의는 Rails의 구성 요소 전체에 걸쳐 정의됩니다. &lt;code&gt;Rakefile&lt;/code&gt; 을 변경하는 대신 애플리케이션 의 &lt;code&gt;lib/tasks&lt;/code&gt; 디렉토리에 파일을 추가하여 고유 한 태스크를 추가 해야합니다.</target>
        </trans-unit>
        <trans-unit id="d53aae298230120d4306abdc660332538510a9b1" translate="yes" xml:space="preserve">
          <source>This file requires &lt;code&gt;config/boot.rb&lt;/code&gt;:</source>
          <target state="translated">이 파일에는 &lt;code&gt;config/boot.rb&lt;/code&gt; 가 필요합니다 :</target>
        </trans-unit>
        <trans-unit id="72c2d5495604ca8eac86343fba13ad817af3099a" translate="yes" xml:space="preserve">
          <source>This file tells git which files (or patterns) it should ignore. See &lt;a href=&quot;https://help.github.com/articles/ignoring-files&quot;&gt;GitHub - Ignoring files&lt;/a&gt; for more info about ignoring files.</source>
          <target state="translated">이 파일은 git에게 무시해야 할 파일 (또는 패턴)을 알려줍니다. &lt;a href=&quot;https://help.github.com/articles/ignoring-files&quot;&gt;파일 무시에&lt;/a&gt; 대한 자세한 내용은 GitHub-파일 무시를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="65357aa41bfbb81ea66b4c0622d92b983758d0fb" translate="yes" xml:space="preserve">
          <source>This file will change into the Rails root directory (a path two directories up from &lt;code&gt;APP_PATH&lt;/code&gt; which points at &lt;code&gt;config/application.rb&lt;/code&gt;), but only if the &lt;code&gt;config.ru&lt;/code&gt; file isn't found. This then starts up the &lt;code&gt;Rails::Server&lt;/code&gt; class.</source>
          <target state="translated">이 파일은 &lt;code&gt;config.ru&lt;/code&gt; 파일을 찾을 수없는 경우에만 Rails 루트 디렉토리 ( &lt;code&gt;APP_PATH&lt;/code&gt; 에서 2 개의 디렉토리 가 &lt;code&gt;config/application.rb&lt;/code&gt; 를 가리키는 경로)로 변경됩니다 . 그런 다음 &lt;code&gt;Rails::Server&lt;/code&gt; 클래스 를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="6c6e28e5429614dda6f67b6a110b78e24406fb77" translate="yes" xml:space="preserve">
          <source>This fixture file includes two fixtures. Each YAML fixture (ie. record) is given a name and is followed by an indented list of key/value pairs in the &amp;ldquo;key: value&amp;rdquo; format. Records are separated by a blank line for your viewing pleasure.</source>
          <target state="translated">이 조명기 파일에는 두 개의 조명기가 있습니다. 각 YAML 픽스처 (예 : 레코드)에는 이름이 부여되고 &quot;key : value&quot;형식의 들여 쓰기 된 키 / 값 쌍 목록이옵니다. 보는 즐거움을 위해 기록은 빈 줄로 분리됩니다.</target>
        </trans-unit>
        <trans-unit id="beda4d528d768322473cee2e8a786e2bd1fad71e" translate="yes" xml:space="preserve">
          <source>This functionality is enabled in &lt;code&gt;config/initializers/wrap_parameters.rb&lt;/code&gt; and can be customized.</source>
          <target state="translated">이 기능은 &lt;code&gt;config/initializers/wrap_parameters.rb&lt;/code&gt; 에서 사용 가능하며 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83588c310e0a08fd376975dc292ffb18e9f833d5" translate="yes" xml:space="preserve">
          <source>This generates a form with:</source>
          <target state="translated">이것은 다음과 같은 양식을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="aab15c3a0e4f00f5929d24d9ee064f50f46b76a0" translate="yes" xml:space="preserve">
          <source>This generates helpers such as &lt;code&gt;account_projects_path&lt;/code&gt;, just like &lt;code&gt;resources&lt;/code&gt; does. The difference here being that the routes generated are like /:account_id/projects, rather than /accounts/:account_id/projects.</source>
          <target state="translated">이 같은 헬퍼 생성 &lt;code&gt;account_projects_path&lt;/code&gt; 을 처럼 &lt;code&gt;resources&lt;/code&gt; 않습니다. 여기서 생성 된 경로는 / accounts / : account_id / projects가 아니라 / : account_id / projects와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="0db56c455f2669ea2ea56963dfa8f4c0c2837ae9" translate="yes" xml:space="preserve">
          <source>This generates the URL &amp;ldquo;/basket#items&amp;rdquo; because when the last item in an array passed to &lt;code&gt;polymorphic_url&lt;/code&gt; is a hash then it's treated as options to the URL helper that gets called.</source>
          <target state="translated">그러면 &lt;code&gt;polymorphic_url&lt;/code&gt; 에 전달 된 배열의 마지막 항목 이 해시 인 경우 호출되는 URL 도우미에 대한 옵션으로 처리 되므로 URL &quot;/ basket # items&quot; 가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="3cf3bc289cb71e75637c206fd3f7776af8578ba9" translate="yes" xml:space="preserve">
          <source>This generates the following comments routes:</source>
          <target state="translated">다음과 같은 주석 경로가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="5071c02b398382fbb15b3f9ca7e61a2acce29dda" translate="yes" xml:space="preserve">
          <source>This generates the following routes:</source>
          <target state="translated">다음과 같은 경로가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="428127dc11bba63a8e3e622eab698160a7e7c03e" translate="yes" xml:space="preserve">
          <source>This generates the following:</source>
          <target state="translated">이것은 다음을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6afa856ac26bdd8bf1f74669f3c9b0bfa6b594c5" translate="yes" xml:space="preserve">
          <source>This generates, among other things, the method &lt;code&gt;users_path&lt;/code&gt;. By default, this method is accessible from your controllers, views and mailers. If you need to access this auto-generated method from other places (such as a model), then you can do that by including &lt;a href=&quot;../../rails#method-c-application&quot;&gt;&lt;code&gt;Rails.application&lt;/code&gt;&lt;/a&gt;.routes.url_helpers in your class:</source>
          <target state="translated">이것은 무엇보다도 &lt;code&gt;users_path&lt;/code&gt; 메소드를 생성 합니다. 기본적으로이 방법은 컨트롤러,보기 및 메일러에서 액세스 할 수 있습니다. 다른 위치 (예 : 모델)에서이 자동 생성 메서드에 액세스해야하는 경우 클래스에 &lt;a href=&quot;../../rails#method-c-application&quot;&gt; &lt;code&gt;Rails.application&lt;/code&gt; &lt;/a&gt; .routes.url_helpers를 포함하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="201ac36a5603e55b0818de07410e97cb099ce89b" translate="yes" xml:space="preserve">
          <source>This generates, among other things, the method &lt;code&gt;users_path&lt;/code&gt;. By default, this method is accessible from your controllers, views and mailers. If you need to access this auto-generated method from other places (such as a model), then you can do that by including &lt;a href=&quot;../../rails#method-c-application&quot;&gt;Rails.application&lt;/a&gt;.routes.url_helpers in your class:</source>
          <target state="translated">이것은 무엇보다도 &lt;code&gt;users_path&lt;/code&gt; 메소드를 생성 합니다. 기본적으로이 방법은 컨트롤러,보기 및 메일러에서 액세스 할 수 있습니다. 다른 장소 (예 : 모델)에서이 자동 생성 된 메소드에 액세스해야하는 경우 클래스에 &lt;a href=&quot;../../rails#method-c-application&quot;&gt;Rails.application&lt;/a&gt; .routes.url_helpers를 포함 시켜 이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7634c823f94cb03785b418ddea129d64980f0405" translate="yes" xml:space="preserve">
          <source>This generates:</source>
          <target state="translated">이것은 다음을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="590bc9b042313052c052ea8d1bb4866ac4be5f65" translate="yes" xml:space="preserve">
          <source>This generator call will generate just the necessary model files it needs, namespacing the files under a &lt;code&gt;blorgh&lt;/code&gt; directory and creating a model class called &lt;code&gt;Blorgh::Comment&lt;/code&gt;. Now run the migration to create our blorgh_comments table:</source>
          <target state="translated">이 생성자 호출은 필요한 모델 파일 만 생성하여 &lt;code&gt;blorgh&lt;/code&gt; 디렉토리에 파일 이름을 지정하고 &lt;code&gt;Blorgh::Comment&lt;/code&gt; 라는 모델 클래스를 작성합니다 . 이제 blorgh_comments 테이블을 생성하기 위해 마이그레이션을 실행하십시오 :</target>
        </trans-unit>
        <trans-unit id="80a979f8d2412c92b4eb6a2d1707e966a7196054" translate="yes" xml:space="preserve">
          <source>This generator can do much more than append a timestamp to the file name. Based on naming conventions and additional (optional) arguments it can also start fleshing out the migration.</source>
          <target state="translated">이 생성기는 파일 이름에 타임 스탬프를 추가하는 것 이상을 수행 할 수 있습니다. 명명 규칙 및 추가 (선택적) 인수를 기반으로 마이그레이션을 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c3f138c5ce1030ac56fdfdd3979b21fb91940dc" translate="yes" xml:space="preserve">
          <source>This gives better control over what you want to exclude and makes it easier to create a bare controller class, instead of listing the modules required manually.</source>
          <target state="translated">이를 통해 제외 할 항목을보다 효과적으로 제어 할 수 있으며 수동으로 필요한 모듈을 나열하는 대신 베어 컨트롤러 클래스를보다 쉽게 ​​만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5150c5cdd634d4e4b66af7e069fc92f80f2273c" translate="yes" xml:space="preserve">
          <source>This gives better control over what you want to exclude and makes it easier to create an &lt;a href=&quot;api&quot;&gt;&lt;code&gt;API&lt;/code&gt;&lt;/a&gt; controller class, instead of listing the modules required manually.</source>
          <target state="translated">이를 통해 제외하려는 항목을 더 잘 제어 할 수 있으며 필요한 모듈을 수동으로 나열하는 대신 &lt;a href=&quot;api&quot;&gt; &lt;code&gt;API&lt;/code&gt; &lt;/a&gt; 컨트롤러 클래스를 더 쉽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="439aa7feae0070429fb40c49a5397b52e268e75b" translate="yes" xml:space="preserve">
          <source>This gives better control over what you want to exclude and makes it easier to create an &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; controller class, instead of listing the modules required manually.</source>
          <target state="translated">이를 통해 제외하려는 항목을보다 잘 제어하고 수동으로 필요한 모듈을 나열하는 대신 &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; 컨트롤러 클래스를 보다 쉽게 ​​만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28fad93f5f220028ec0e72cee51726384fb91503" translate="yes" xml:space="preserve">
          <source>This gives you quite powerful means to flexibly adjust your messages to your application's needs.</source>
          <target state="translated">이를 통해 메시지를 애플리케이션의 요구에 맞게 유연하게 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3a64ce1a2780d8966eef340f2e6e1614b37248b" translate="yes" xml:space="preserve">
          <source>This gotcha is only possible in Ruby &amp;lt; 2.5.</source>
          <target state="translated">이 문제는 Ruby &amp;lt;2.5에서만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="5182bb878f49d8cac9619f40a547e3e08d9a5683" translate="yes" xml:space="preserve">
          <source>This guide assumes a working knowledge of Rack protocol and Rack concepts such as middlewares, URL maps, and &lt;code&gt;Rack::Builder&lt;/code&gt;.</source>
          <target state="translated">이 안내서에서는 미들웨어, URL 맵 및 &lt;code&gt;Rack::Builder&lt;/code&gt; 와 같은 랙 프로토콜 및 랙 개념에 대한 실무 지식이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="a4774f456eed4e34f3a3c0136ab930a2caec9246" translate="yes" xml:space="preserve">
          <source>This guide covers PostgreSQL specific usage of Active Record.</source>
          <target state="translated">이 안내서는 PostgreSQL 전용 Active Record 사용법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7cb1b8a276b5f10ea1d52f8f987052c31c339438" translate="yes" xml:space="preserve">
          <source>This guide covers Rails integration with Rack and interfacing with other Rack components.</source>
          <target state="translated">이 안내서는 레일과 랙의 통합 및 다른 랙 구성 요소와의 인터페이스에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="91962cdd757e087b8150c270955e35a154fc343a" translate="yes" xml:space="preserve">
          <source>This guide covers all the associations provided by Active Record.</source>
          <target state="translated">이 안내서는 Active Record에서 제공하는 모든 연결을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="fe838c8d7977efc195277609f82b5bce5de222d4" translate="yes" xml:space="preserve">
          <source>This guide covers building a Rails application that serves JSON resources to an API client, including client-side frameworks.</source>
          <target state="translated">이 안내서는 클라이언트 측 프레임 워크를 포함하여 API 클라이언트에 JSON 자원을 제공하는 Rails 애플리케이션 빌드에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="824a738f887c71f932df129cd76bd5308cc658af" translate="yes" xml:space="preserve">
          <source>This guide covers built-in mechanisms in Rails for testing your application.</source>
          <target state="translated">이 가이드는 애플리케이션 테스트를위한 Rails의 내장 메커니즘을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="7a323687ff515a0c9940a39c6b4ca72e7d18dad0" translate="yes" xml:space="preserve">
          <source>This guide covers different ways to retrieve data from the database using Active Record.</source>
          <target state="translated">이 안내서는 Active Record를 사용하여 데이터베이스에서 데이터를 검색하는 다양한 방법을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="4dd9a9902093fd5bffaa4576ad6f6ba8762d7d27" translate="yes" xml:space="preserve">
          <source>This guide covers getting up and running with Ruby on Rails.</source>
          <target state="translated">이 안내서는 Ruby on Rails 시작 및 실행에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="9acb517d68ac00c3cb053e7f3ce868a1b8b2b5a1" translate="yes" xml:space="preserve">
          <source>This guide covers how controllers work and how they fit into the request cycle in your application. It includes sessions, filters, and cookies, data streaming, and dealing with exceptions raised by a request, among other topics.</source>
          <target state="translated">이 안내서는 컨트롤러의 작동 방식과 애플리케이션의 요청주기에 맞추는 방법을 설명합니다. 여기에는 세션, 필터 및 쿠키, 데이터 스트리밍 및 요청에서 발생한 예외 처리 등이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d765881a1657a1853d29fe949c944147b17b5e25" translate="yes" xml:space="preserve">
          <source>This guide covers how to add internationalization to your applications. Your application will be able to translate content to different languages, change pluralization rules, use correct date formats for each country, and so on.</source>
          <target state="translated">이 안내서는 응용 프로그램에 국제화를 추가하는 방법을 설명합니다. 응용 프로그램은 컨텐츠를 다른 언어로 번역하고, 복수 규칙을 변경하고, 국가별로 올바른 날짜 형식을 사용하는 등의 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50e7508bc5ad05cf1f477c571c5124b9eb442775" translate="yes" xml:space="preserve">
          <source>This guide covers how to attach files to your Active Record models.</source>
          <target state="translated">이 안내서는 파일을 활성 레코드 모델에 첨부하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8276426b6fde15dabbfad76c8f84401ecc333d32" translate="yes" xml:space="preserve">
          <source>This guide covers how to build a plugin to extend the functionality of Rails.</source>
          <target state="translated">이 가이드는 Rails의 기능을 확장하기 위해 플러그인을 빌드하는 방법을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="8309285977427ce4a96ad4a08acd7660d70d3df0" translate="yes" xml:space="preserve">
          <source>This guide covers how you can use Active Record callbacks.</source>
          <target state="translated">이 안내서는 Active Record 콜백을 사용하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="34606416c459a039397543261218c9b6ca671a9a" translate="yes" xml:space="preserve">
          <source>This guide covers how you can use Active Record migrations to alter your database in a structured and organized manner.</source>
          <target state="translated">이 가이드에서는 Active Record 마이그레이션을 사용하여 체계적이고 체계적인 방식으로 데이터베이스를 변경하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="08ad902b7bab6953b46838e27beb53d36d707105" translate="yes" xml:space="preserve">
          <source>This guide covers how you can use Active Record validations.</source>
          <target state="translated">이 가이드는 Active Record 유효성 검사를 사용하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7effa7e7e7b66955bbafa8ebadfb443dda7fd34b" translate="yes" xml:space="preserve">
          <source>This guide covers the asset pipeline.</source>
          <target state="translated">이 가이드는 자산 파이프 라인을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="93ac6e01582e082652d567408c18be0117e273c3" translate="yes" xml:space="preserve">
          <source>This guide covers the association features of Active Record.</source>
          <target state="translated">이 안내서는 Active Record의 연관 기능을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="100afe41a6459905b61d1d9f5545fb3b50965c51" translate="yes" xml:space="preserve">
          <source>This guide covers the basic configuration settings for a Rails application.</source>
          <target state="translated">이 안내서는 Rails 애플리케이션의 기본 구성 설정에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="0e3f8b80f813199a5d6e17e6b233f6a57679466d" translate="yes" xml:space="preserve">
          <source>This guide covers the basic layout features of Action Controller and Action View, including rendering and redirecting, using content_for blocks, and working with partials.</source>
          <target state="translated">이 안내서는 렌더링 및 리디렉션, content_for 블록 사용 및 부분 작업을 포함하여 Action Controller 및 Action View의 기본 레이아웃 기능에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="cdd19bf75d1a9d62155ef4d129ac09db55b141bb" translate="yes" xml:space="preserve">
          <source>This guide covers the basic layout features of Action Controller and Action View.</source>
          <target state="translated">이 안내서는 Action Controller 및 Action View의 기본 레이아웃 기능에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="034e23ae1c54fc24ae8959b2b885505a54e0e3f5" translate="yes" xml:space="preserve">
          <source>This guide covers the built-in Ajax/JavaScript functionality of Rails (and more); it will enable you to create rich and dynamic Ajax applications with ease!</source>
          <target state="translated">이 가이드는 Rails의 내장 Ajax / JavaScript 기능 등을 다룹니다. 풍부하고 동적 인 Ajax 애플리케이션을 쉽게 만들 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="10f433a3aa200f3c61a356cbffb7de42f6e48686" translate="yes" xml:space="preserve">
          <source>This guide covers the built-in Ajax/JavaScript functionality of Rails.</source>
          <target state="translated">이 가이드는 Rails의 내장 Ajax / JavaScript 기능을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="5bd83b0ae5b8eb7278b2b9936769f172afddfbe3" translate="yes" xml:space="preserve">
          <source>This guide covers the command line tools provided by Rails.</source>
          <target state="translated">이 안내서는 Rails가 제공하는 명령 행 도구를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="8dfa4d97908dcc8c9f28ee873de460ef4c37b3bd" translate="yes" xml:space="preserve">
          <source>This guide covers the configuration and initialization features available to Rails applications.</source>
          <target state="translated">이 안내서는 Rails 애플리케이션에서 사용할 수있는 구성 및 초기화 기능에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="2e8d99dc655d0b682912b886433561aad79e0298" translate="yes" xml:space="preserve">
          <source>This guide covers the database query interface provided by Active Record.</source>
          <target state="translated">이 가이드는 Active Record에서 제공하는 데이터베이스 쿼리 인터페이스를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="18023441403b3312fbbf744a8c068a57fef52ca4" translate="yes" xml:space="preserve">
          <source>This guide covers the process of adding a brand new generator to your extension or providing an alternative to an element of a built-in Rails generator (such as providing alternative test stubs for the scaffold generator).</source>
          <target state="translated">이 가이드는 확장에 새로운 생성기를 추가하거나 내장 Rails 생성기의 요소에 대한 대안을 제공하는 프로세스 (예 : 스캐 폴드 생성기를위한 대체 테스트 스텁 제공)를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="0b1068ffa96eea4fd43a7e31b9345d92877e11b7" translate="yes" xml:space="preserve">
          <source>This guide covers the use of model classes without Active Record.</source>
          <target state="translated">이 안내서는 활성 레코드가없는 모델 클래스 사용에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="3cbf8c9ad246207f491d05cd6add7dde972db7fd" translate="yes" xml:space="preserve">
          <source>This guide covers the user-facing features of Rails routing.</source>
          <target state="translated">이 안내서는 Rails 라우팅의 사용자 대면 기능을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="4d6b82d3b20e437146d95815dfd07d24185e6550" translate="yes" xml:space="preserve">
          <source>This guide covers the user-facing features of Rails routing. If you want to understand how to use routing in your own Rails applications, start here.</source>
          <target state="translated">이 안내서는 Rails 라우팅의 사용자 대면 기능을 설명합니다. 자신의 Rails 애플리케이션에서 라우팅을 사용하는 방법을 이해하려면 여기에서 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="185a1c80c4169f19105583d20e2288ddefc3e000" translate="yes" xml:space="preserve">
          <source>This guide covers using multiple databases in your application.</source>
          <target state="translated">이 안내서는 응용 프로그램에서 여러 데이터베이스를 사용하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="652b5dbb6ddf65ccd53f2a95d31ce66f641849b2" translate="yes" xml:space="preserve">
          <source>This guide covers using multiple databases with your Rails application.</source>
          <target state="translated">이 안내서는 Rails 애플리케이션에서 여러 데이터베이스를 사용하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="93a53e9647fcbf5054b064a4dc02e32ccbe6e95f" translate="yes" xml:space="preserve">
          <source>This guide describes common security problems in web applications and how to avoid them with Rails.</source>
          <target state="translated">이 안내서는 웹 애플리케이션의 일반적인 보안 문제와 Rails에서이를 피하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="f4d40862790c214d79aae639b4955b93125c6139" translate="yes" xml:space="preserve">
          <source>This guide describes how to build a test-driven plugin that will:</source>
          <target state="translated">이 가이드는 다음과 같은 테스트 중심 플러그인을 빌드하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="afcc19d49048024ff81954101df13e16cab4d3c9" translate="yes" xml:space="preserve">
          <source>This guide describes how to debug Rails applications. It covers the different ways of achieving this and how to understand what is happening &quot;behind the scenes&quot; of your code.</source>
          <target state="translated">이 안내서는 Rails 애플리케이션을 디버깅하는 방법을 설명합니다. 이를 달성하는 다양한 방법과 코드의 &quot;뒤에서&quot;발생하는 상황을 이해하는 방법을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="0d495f902e31350750cbeb65b97f1d71c420feb9" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Action Mailbox to receive emails.</source>
          <target state="translated">이 안내서는 Action Mailbox를 사용하여 이메일을받는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="e1878fb11e81d87df5af5b823baf6ec0695b1dcc" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Action Mailer to send emails.</source>
          <target state="translated">이 안내서는 Action Mailer를 사용하여 이메일을 보내는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="83472dca908d6961d439bd9f1167cfa97eb62772" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Action Text to handle rich text content.</source>
          <target state="translated">이 안내서는 조치 텍스트를 사용하여 서식있는 텍스트 컨텐츠를 처리하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8e6695892453a4910d634829999fc532c8a05ee6" translate="yes" xml:space="preserve">
          <source>This guide describes the considerations needed and tools available when working directly with concurrency in a Rails application.</source>
          <target state="translated">이 안내서는 Rails 애플리케이션에서 동시성으로 직접 작업 할 때 필요한 고려 사항 및 도구에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="13cb8da1fb94bc7fa6ff6eb0308fd9ef1f15a1d4" translate="yes" xml:space="preserve">
          <source>This guide documents autoloading in &lt;code&gt;classic&lt;/code&gt; mode, which is the traditional one. If you'd like to read about &lt;code&gt;zeitwerk&lt;/code&gt; mode instead, the new one in Rails 6, please check &lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;Autoloading and Reloading Constants (Zeitwerk Mode)&lt;/a&gt;.</source>
          <target state="translated">이 가이드에서는 &lt;code&gt;classic&lt;/code&gt; 모드 인 클래식 모드의 자동로드에 대해 설명합니다. 대신 Rails 6의 새로운 모드 인 &lt;code&gt;zeitwerk&lt;/code&gt; 모드 에 대해 읽고 싶다면 &lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;Autoloading and Reloading Constants (Zeitwerk Mode)&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="490892dcb79211443bc7b66a3b9e7994c1ff4270" translate="yes" xml:space="preserve">
          <source>This guide documents autoloading in &lt;code&gt;classic&lt;/code&gt; mode, which is the traditional one. If you'd like to read about &lt;code&gt;zeiwerk&lt;/code&gt; mode instead, the new one in Rails 6, please check &lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;Autoloading and Reloading Constants (Zeitwerk Mode)&lt;/a&gt;.</source>
          <target state="translated">이 안내서는 &lt;code&gt;classic&lt;/code&gt; 모드 인 자동 모드에 대해 설명합니다. &lt;code&gt;zeiwerk&lt;/code&gt; 모드 에 대한 자세한 내용을 보려면 Rails 6의 새로운 모드에서 &lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;Autoloading and Reloading Constants (Zeitwerk Mode)&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="432d9a11ce6b5dbf6f20370efaa72473f0784d2c" translate="yes" xml:space="preserve">
          <source>This guide documents autoloading in &lt;code&gt;zeitwerk&lt;/code&gt; mode, which is new in Rails 6. If you'd like to read about &lt;code&gt;classic&lt;/code&gt; mode instead, please check &lt;a href=&quot;autoloading_and_reloading_constants_classic_mode&quot;&gt;Autoloading and Reloading Constants (Classic Mode)&lt;/a&gt;.</source>
          <target state="translated">이 안내서 는 레일스 6의 새로운 &lt;code&gt;zeitwerk&lt;/code&gt; 모드 에서의 자동 로딩에 대해 설명 합니다. 대신 &lt;code&gt;classic&lt;/code&gt; 모드 에 대해 읽으려면 &lt;a href=&quot;autoloading_and_reloading_constants_classic_mode&quot;&gt;Autoloading and Reloading Constants (Classic Mode)&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="69637cb78a5aa34a1f32b1b6f5cdf63a3d67357c" translate="yes" xml:space="preserve">
          <source>This guide documents how autoloading and reloading constants work (Classic mode).</source>
          <target state="translated">이 안내서는 자동로드 및 다시로드 상수가 작동하는 방법을 설명합니다 (클래식 모드).</target>
        </trans-unit>
        <trans-unit id="43b73f786044a1c7a34642999528e6c22d41fd23" translate="yes" xml:space="preserve">
          <source>This guide documents how autoloading and reloading constants work (Zeitwerk mode).</source>
          <target state="translated">이 안내서는 자동로드 및 다시로드 상수가 작동하는 방식을 설명합니다 (Zeitwerk 모드).</target>
        </trans-unit>
        <trans-unit id="46dec6c392ad85b1b1ee86096590464b5289a287" translate="yes" xml:space="preserve">
          <source>This guide documents how autoloading and reloading works in &lt;code&gt;zeitwerk&lt;/code&gt; mode.</source>
          <target state="translated">이 안내서는 자동로드 및 재로드가 &lt;code&gt;zeitwerk&lt;/code&gt; 모드 에서 작동하는 방식을 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="9ca295e3457ec79aa7f765d9d8124b28f9666bd4" translate="yes" xml:space="preserve">
          <source>This guide documents how constant autoloading and reloading works in &lt;code&gt;classic&lt;/code&gt; mode.</source>
          <target state="translated">이 가이드는 &lt;code&gt;classic&lt;/code&gt; 모드 에서 자동로드 및 다시로드가 어떻게 작동하는지 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="341e4b0ec0fa25b8f2229a034b23831dd4b65189" translate="yes" xml:space="preserve">
          <source>This guide documents how that works.</source>
          <target state="translated">이 안내서는 그 작동 방식을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="c76190df026f1658510299183161369ac0bc9dfe" translate="yes" xml:space="preserve">
          <source>This guide documents the Ruby core extensions defined in Active Support.</source>
          <target state="translated">이 안내서는 Active Support에 정의 된 Ruby 핵심 확장을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="baebb62e9ec086008a53e25398f1c01aa44d7a0b" translate="yes" xml:space="preserve">
          <source>This guide documents the Ruby on Rails API documentation guidelines.</source>
          <target state="translated">이 안내서는 Ruby on Rails API 문서 가이드 라인을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="b8b7b2ecac3d057d660d162024e1457e18e08b73" translate="yes" xml:space="preserve">
          <source>This guide documents the Ruby on Rails guides guidelines.</source>
          <target state="translated">이 안내서는 Ruby on Rails 안내서 지침을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5759e595b5723fe34f3630e51b3fb63c997c7d6e" translate="yes" xml:space="preserve">
          <source>This guide documents the asset pipeline.</source>
          <target state="translated">이 안내서는 자산 파이프 라인을 문서화합니다.</target>
        </trans-unit>
        <trans-unit id="6332ac3de97a8b2a1e350e8ab0a99f985c7de305" translate="yes" xml:space="preserve">
          <source>This guide explains how Action Cable works, and how to use WebSockets to create real-time features.</source>
          <target state="translated">이 안내서는 Action Cable의 작동 방식과 WebSocket을 사용하여 실시간 기능을 생성하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="44fa006d215b1e026e404200b070b0e95dd2f507" translate="yes" xml:space="preserve">
          <source>This guide explains how to effectively use Rails to develop a JSON API application.</source>
          <target state="translated">이 가이드는 Rails를 효과적으로 사용하여 JSON API 애플리케이션을 개발하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="aced21d35e857623d9e4c983ed8d1fe3f0c5456b" translate="yes" xml:space="preserve">
          <source>This guide explains how to use the instrumentation API inside of Active Support to measure events inside of Rails and other Ruby code.</source>
          <target state="translated">이 안내서는 Active Support 내에서 계측 API를 사용하여 Rails 및 기타 Ruby 코드 내의 이벤트를 측정하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="2047593bd3cece5b122f08b03b7b74cf1b5f0635" translate="yes" xml:space="preserve">
          <source>This guide explains how to write a mountable engine.</source>
          <target state="translated">이 안내서는 마운트 가능한 엔진을 작성하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="2a4ae51c1cb2d15b2f6a443eac592fce0ccea7f3" translate="yes" xml:space="preserve">
          <source>This guide explains the internals of the Rails initialization process.</source>
          <target state="translated">이 안내서는 Rails 초기화 과정의 내부를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5464e7d22c76dc1fba25355fc2a7bcfaf0fcc9b3" translate="yes" xml:space="preserve">
          <source>This guide explains the internals of the initialization process in Rails. It is an extremely in-depth guide and recommended for advanced Rails developers.</source>
          <target state="translated">이 안내서는 Rails의 초기화 프로세스 내부에 대해 설명합니다. 매우 심층적 인 안내서이며 고급 Rails 개발자에게 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="469c0fa8b79d027d1bec52b5728f17bb485f5004" translate="yes" xml:space="preserve">
          <source>This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it's time to send a response back to the user, the Controller hands things off to the View. It's that handoff that is the subject of this guide.</source>
          <target state="translated">이 안내서는 Model-View-Controller 삼각형에서 Controller와 View 간의 상호 작용에 중점을 둡니다. 아시다시피 Controller는 일반적으로 모델에 무거운 코드를 전달하지만 Rails에서 요청을 처리하는 전체 프로세스를 조정합니다. 그러나 사용자에게 응답을 다시 보낼 때가되면 Controller가보기에 전달합니다. 이 안내서의 주제 인 핸드 오프입니다.</target>
        </trans-unit>
        <trans-unit id="f6e726cd2554ec5760c94352011294971cd16279" translate="yes" xml:space="preserve">
          <source>This guide goes through every method call that is required to boot up the Ruby on Rails stack for a default Rails application, explaining each part in detail along the way. For this guide, we will be focusing on what happens when you execute &lt;code&gt;bin/rails server&lt;/code&gt; to boot your app.</source>
          <target state="translated">이 가이드는 기본 Rails 애플리케이션을 위해 Ruby on Rails 스택을 부팅하는 데 필요한 모든 메서드 호출을 통해 각 부분을 자세히 설명합니다. 이 가이드에서는 &lt;code&gt;bin/rails server&lt;/code&gt; 를 실행 하여 앱을 부팅 할 때 발생하는 일에 중점을 둘 것 입니다.</target>
        </trans-unit>
        <trans-unit id="9934e6d316077d905027240a55b8ce24c04fc1f8" translate="yes" xml:space="preserve">
          <source>This guide goes through every method call that is required to boot up the Ruby on Rails stack for a default Rails application, explaining each part in detail along the way. For this guide, we will be focusing on what happens when you execute &lt;code&gt;rails server&lt;/code&gt; to boot your app.</source>
          <target state="translated">이 가이드는 기본 Rails 애플리케이션을 위해 Ruby on Rails 스택을 부팅하는 데 필요한 모든 메소드 호출을 통해 각 부분을 자세하게 설명합니다. 이 가이드에서는 &lt;code&gt;rails server&lt;/code&gt; 를 실행 하여 앱을 부팅 할 때 발생하는 상황에 중점을 둘 것 입니다.</target>
        </trans-unit>
        <trans-unit id="57bdbfb180878f217808961000e2406113a627b2" translate="yes" xml:space="preserve">
          <source>This guide helps in upgrading applications to latest Ruby on Rails versions.</source>
          <target state="translated">이 안내서는 애플리케이션을 최신 Ruby on Rails 버전으로 업그레이드하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="17d230a728e8b861d667c7f6e7953b25fd6b5106" translate="yes" xml:space="preserve">
          <source>This guide introduces a few of the more common view helpers.</source>
          <target state="translated">이 가이드에서는 몇 가지 일반적인 뷰 도우미를 소개합니다.</target>
        </trans-unit>
        <trans-unit id="354229e83f9fa8df4471d69c2c88420d8e4d925e" translate="yes" xml:space="preserve">
          <source>This guide introduces techniques for debugging Ruby on Rails applications.</source>
          <target state="translated">이 안내서는 Ruby on Rails 애플리케이션 디버깅 기술을 소개합니다.</target>
        </trans-unit>
        <trans-unit id="8491e88b3ee49cd77b5a3a0c2e2aa7eb5f308688" translate="yes" xml:space="preserve">
          <source>This guide is an introduction to Active Record.</source>
          <target state="translated">이 안내서는 Active Record에 대한 소개입니다.</target>
        </trans-unit>
        <trans-unit id="13ce5d317c4f474aa04e717a7020fd28819bc0a0" translate="yes" xml:space="preserve">
          <source>This guide is an introduction to speeding up your Rails application with caching.</source>
          <target state="translated">이 안내서는 캐싱으로 Rails 애플리케이션 속도를 높이기위한 소개입니다.</target>
        </trans-unit>
        <trans-unit id="067ba47e605b0b184fce32b87808d9aee977c0c9" translate="yes" xml:space="preserve">
          <source>This guide is designed for beginners who want to get started with a Rails application from scratch. It does not assume that you have any prior experience with Rails.</source>
          <target state="translated">이 안내서는 Rails 애플리케이션을 처음부터 시작하려는 초보자를 위해 설계되었습니다. Rails에 대한 사전 경험이 있다고 가정하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="54fabaf69315c31c33c515465e36ba26df9a5991" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available form helpers and their arguments. Please visit &lt;a href=&quot;https://edgeapi.rubyonrails.org/&quot;&gt;the Rails API documentation&lt;/a&gt; for a complete reference.</source>
          <target state="translated">이 안내서는 사용 가능한 양식 헬퍼 및 해당 인수에 대한 완전한 문서가 아닙니다. 자세한 내용 &lt;a href=&quot;https://edgeapi.rubyonrails.org/&quot;&gt;은 Rails API 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dd8bc150f159e64661f27eac1d8ba8720b1b43c0" translate="yes" xml:space="preserve">
          <source>This guide provides an introduction to Action View and introduces a few of the more common view helpers.</source>
          <target state="translated">이 안내서는 액션 뷰에 대한 소개와 몇 가지 일반적인 뷰 도우미를 소개합니다.</target>
        </trans-unit>
        <trans-unit id="4242de0db412bc3069464f68d76216a65ad12312" translate="yes" xml:space="preserve">
          <source>This guide provides an introduction to Action View.</source>
          <target state="translated">이 가이드는 Action View에 대한 소개를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7aedc9d40a992664cabf83423090a4192903139b" translate="yes" xml:space="preserve">
          <source>This guide provides steps to be followed when you upgrade your applications to a newer version of Ruby on Rails. These steps are also available in individual release guides.</source>
          <target state="translated">이 안내서는 애플리케이션을 최신 버전의 Ruby on Rails로 업그레이드 할 때 따라야 할 단계를 제공합니다. 이 단계는 개별 릴리스 안내서에서도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92b18a31864bae306411dbd35e90821c8cea2e24" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started creating, enqueuing, and executing background jobs.</source>
          <target state="translated">이 안내서는 백그라운드 작업 작성, 대기열 작성 및 실행을 시작하는 데 필요한 모든 것을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="eb7ba8e9a54d8ea88e1dcacfd7409c70005acd35" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in creating, enqueuing and executing background jobs.</source>
          <target state="translated">이 안내서는 백그라운드 작업 작성, 대기열에 포함 및 실행을 시작하는 데 필요한 모든 것을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f9b82bd30aa4020b78b0e236395c82da989cf0d6" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in handling rich text content.</source>
          <target state="translated">이 안내서는 서식있는 텍스트 컨텐츠 처리를 시작하는 데 필요한 모든 것을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="63d2970cdf1122b7787c543c509a52a7a9225e94" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in receiving emails to your application.</source>
          <target state="translated">이 안내서는 응용 프로그램에 대한 전자 메일 수신을 시작하는 데 필요한 모든 것을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a1ada7d49865a815c69da87c4c93e610d2b2ef1a" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in sending emails from and to your application, and many internals of Action Mailer. It also covers how to test your mailers.</source>
          <target state="translated">이 안내서는 애플리케이션과 이메일을주고 받기 위해 필요한 모든 사항과 Action Mailer의 많은 내부 기능을 제공합니다. 또한 메일러를 테스트하는 방법도 다룹니다.</target>
        </trans-unit>
        <trans-unit id="02edb0e1d8d93191ac64d29d7cc880c86c056143" translate="yes" xml:space="preserve">
          <source>This guide should provide you with all you need to get started using model classes. Active Model allows for Action Pack helpers to interact with plain Ruby objects. Active Model also helps build custom ORMs for use outside of the Rails framework.</source>
          <target state="translated">이 안내서는 모델 클래스 사용을 시작하는 데 필요한 모든 것을 제공합니다. 활성 모델을 사용하면 Action Pack 헬퍼가 일반 Ruby 오브젝트와 상호 작용할 수 있습니다. Active Model은 Rails 프레임 워크 외부에서 사용하기 위해 사용자 정의 ORM을 구축하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="94d30cf066a8e6edf595e6be8f690a2bdb587d4c" translate="yes" xml:space="preserve">
          <source>This guide teaches you how to hook into the life cycle of your Active Record objects.</source>
          <target state="translated">이 안내서는 활성 레코드 개체의 수명주기에 연결하는 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="317d0fb5727ba561db9a587b1d7191b396c98342" translate="yes" xml:space="preserve">
          <source>This guide teaches you how to validate the state of objects before they go into the database using Active Record's validations feature.</source>
          <target state="translated">이 가이드는 Active Record의 유효성 검사 기능을 사용하여 데이터베이스로 이동하기 전에 개체의 상태를 확인하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="728b7245e28c54a68c3a12c4eb4c1516ec1f7b59" translate="yes" xml:space="preserve">
          <source>This guide uses the word &quot;load&quot; freely to mean a given file is interpreted, but the actual mechanism can be &lt;code&gt;Kernel#load&lt;/code&gt; or &lt;code&gt;Kernel#require&lt;/code&gt; depending on that flag.</source>
          <target state="translated">이 가이드는 &quot;load&quot;라는 단어를 자유롭게 사용하여 주어진 파일이 해석 되었음을 의미하지만 실제 메커니즘은 해당 플래그에 따라 &lt;code&gt;Kernel#load&lt;/code&gt; 또는 &lt;code&gt;Kernel#require&lt;/code&gt; 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="687e76eee10a2472d0838923e50ff39c9ef78043" translate="yes" xml:space="preserve">
          <source>This guide will get you started with models, persistence to database, and the Active Record pattern and library.</source>
          <target state="translated">이 안내서는 모델, 데이터베이스 지속성 및 활성 레코드 패턴 및 라이브러리를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="d54e9a9556eeab94622ebc22bc76bca217cb7e3b" translate="yes" xml:space="preserve">
          <source>This guide will walk you through the I18n API and contains a tutorial on how to internationalize a Rails application from the start.</source>
          <target state="translated">이 안내서는 I18n API를 안내하고 처음부터 Rails 애플리케이션을 국제화하는 방법에 대한 튜토리얼을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ebf6a56734197b7e9e648e6fa1367d918afca195" translate="yes" xml:space="preserve">
          <source>This has the downside of increasing the boot-up time, as opposed to manually requiring only the necessary files in your individual tests.</source>
          <target state="translated">개별 테스트에서 필요한 파일 만 수동으로 요구하는 것과 달리 부팅 시간이 길어지는 단점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="98984a9e0ba46fe579cf3567990617ba8162ba51" translate="yes" xml:space="preserve">
          <source>This helper exposes a method for caching fragments of a view rather than an entire action or page. This technique is useful caching pieces like menus, lists of new topics, static HTML fragments, and so on. This method takes a block that contains the content you wish to cache.</source>
          <target state="translated">이 헬퍼는 전체 조치 또는 페이지가 아닌보기의 단편을 캐싱하는 방법을 제공합니다. 이 기술은 메뉴, 새 주제 목록, 정적 HTML 조각 등과 같은 조각을 캐싱하는 데 유용합니다. 이 방법은 캐시하려는 내용이 포함 된 블록을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="545785f00f8db6a6ce540ffe34525f4d65e44158" translate="yes" xml:space="preserve">
          <source>This helper makes building an Atom feed easy. Here's a full usage example:</source>
          <target state="translated">이 도우미를 사용하면 Atom 피드를 쉽게 작성할 수 있습니다. 전체 사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6e523a01ab287cd4aaa9c5b1a49a0c6135fb9dfa" translate="yes" xml:space="preserve">
          <source>This helper may be included in any class that includes the URL helpers of a routes (routes.url_helpers). Some methods provided here will only work in the context of a request (&lt;a href=&quot;urlhelper#method-i-link_to_unless_current&quot;&gt;&lt;code&gt;link_to_unless_current&lt;/code&gt;&lt;/a&gt;, for instance), which must be provided as a method called request on the context.</source>
          <target state="translated">이 도우미는 경로의 URL 도우미 (routes.url_helpers)를 포함하는 모든 클래스에 포함될 수 있습니다. 여기에 제공된 일부 메소드는 요청 컨텍스트 ( 예 : &lt;a href=&quot;urlhelper#method-i-link_to_unless_current&quot;&gt; &lt;code&gt;link_to_unless_current&lt;/code&gt; )&lt;/a&gt; 에서만 작동하며 컨텍스트에서 요청 이라는 메소드로 제공되어야합니다.</target>
        </trans-unit>
        <trans-unit id="379e9cbec4b4d8644f28954a9c8275624dfac1a6" translate="yes" xml:space="preserve">
          <source>This helper may be included in any class that includes the URL helpers of a routes (routes.url_helpers). Some methods provided here will only work in the context of a request (link_to_unless_current, for instance), which must be provided as a method called request on the context.</source>
          <target state="translated">이 도우미는 경로의 URL 도우미 (routes.url_helpers)를 포함하는 모든 클래스에 포함될 수 있습니다. 여기에 제공된 일부 메소드는 요청 컨텍스트 (예 : link_to_unless_current)에서만 작동하며 컨텍스트에서 요청이라는 메소드로 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="774382992584a01cddf74b882eff987c1413f162" translate="yes" xml:space="preserve">
          <source>This helper passes the record to a separate class for validation.</source>
          <target state="translated">이 도우미는 유효성 검사를 위해 레코드를 별도의 클래스로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="7c9eafd4e02a7675d33e7eefee0949a72f673c3c" translate="yes" xml:space="preserve">
          <source>This helper returns the name of a cache key for a given fragment cache call. By supplying &lt;code&gt;skip_digest: true&lt;/code&gt; to cache, the digestion of cache fragments can be manually bypassed. This is useful when cache fragments cannot be manually expired unless you know the exact key which is the case when using memcached.</source>
          <target state="translated">이 도우미는 주어진 조각 캐시 호출에 대한 캐시 키 이름을 반환합니다. 캐시에 &lt;code&gt;skip_digest: true&lt;/code&gt; 를 제공 하면 캐시 조각의 다이제스트를 수동으로 무시할 수 있습니다. memcached를 사용할 때와 같은 정확한 키를 모르는 경우 캐시 조각을 수동으로 만료 할 수 없을 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9ba1f8a90cc5c689d321c211b3e9a3fb2caaeb66" translate="yes" xml:space="preserve">
          <source>This helper validates attributes against a block. It doesn't have a predefined validation function. You should create one using a block, and every attribute passed to &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each&quot;&gt;&lt;code&gt;validates_each&lt;/code&gt;&lt;/a&gt; will be tested against it. In the following example, we don't want names and surnames to begin with lower case.</source>
          <target state="translated">이 도우미는 블록에 대한 속성의 유효성을 검사합니다. 미리 정의 된 유효성 검사 기능이 없습니다. 블록을 사용하여 하나를 생성해야하며 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each&quot;&gt; &lt;code&gt;validates_each&lt;/code&gt; 에&lt;/a&gt; 전달 된 모든 속성 이 이에 대해 테스트됩니다. 다음 예에서는 이름과 성이 소문자로 시작하는 것을 원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="005155dcb4050a59bc267cf64ed58fe3133fcd3c" translate="yes" xml:space="preserve">
          <source>This helper validates attributes against a block. It doesn't have a predefined validation function. You should create one using a block, and every attribute passed to &lt;code&gt;validates_each&lt;/code&gt; will be tested against it. In the following example, we don't want names and surnames to begin with lower case.</source>
          <target state="translated">이 헬퍼는 블록에 대해 속성을 검증합니다. 사전 정의 된 유효성 검사 기능이 없습니다. 블록을 사용하여 하나를 작성해야하며 &lt;code&gt;validates_each&lt;/code&gt; 에 전달 된 모든 속성 이 이에 대해 테스트됩니다. 다음 예에서 이름과 성은 소문자로 시작하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="94f1c3f7c0b96fee7072388fbb93376802bab4f9" translate="yes" xml:space="preserve">
          <source>This helper validates that the attribute's value is unique right before the object gets saved. It does not create a uniqueness constraint in the database, so it may happen that two different database connections create two records with the same value for a column that you intend to be unique. To avoid that, you must create a unique index on that column in your database.</source>
          <target state="translated">이 헬퍼는 객체가 저장되기 직전에 속성 값이 고유한지 확인합니다. 데이터베이스에서 고유성 제한 조건을 작성하지 않으므로 두 개의 서로 다른 데이터베이스 연결이 고유 한 컬럼에 대해 동일한 값을 가진 두 개의 레코드를 작성합니다. 이를 피하려면 데이터베이스의 해당 열에 고유 인덱스를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="e78cfea25a550fee5c7d05639e326011a4bfb3b2" translate="yes" xml:space="preserve">
          <source>This helper validates that the attributes' values are included in a given set. In fact, this set can be any enumerable object.</source>
          <target state="translated">이 도우미는 속성 값이 주어진 집합에 포함되어 있는지 확인합니다. 실제로이 세트는 열거 가능한 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08d2b0d48c3a3bec15be8ee351558bb1a0069904" translate="yes" xml:space="preserve">
          <source>This helper validates that the attributes' values are not included in a given set. In fact, this set can be any enumerable object.</source>
          <target state="translated">이 헬퍼는 속성 값이 주어진 세트에 포함되지 않았는지 검증합니다. 실제로이 세트는 열거 가능한 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="debd785872bb943820e19d09f895ce0362f82442" translate="yes" xml:space="preserve">
          <source>This helper validates that the specified attributes are absent. It uses the &lt;code&gt;present?&lt;/code&gt; method to check if the value is not either nil or a blank string, that is, a string that is either empty or consists of whitespace.</source>
          <target state="translated">이 헬퍼는 지정된 속성이 없는지 검증합니다. &lt;code&gt;present?&lt;/code&gt; 사용 합니까? 값이 nil 또는 빈 문자열이 아닌지 확인하는 방법, 즉 비어 있거나 공백으로 구성된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4d51465dcf2954d7a13b6f2dbce55dd44e27d183" translate="yes" xml:space="preserve">
          <source>This helper validates that the specified attributes are not empty. It uses the &lt;code&gt;blank?&lt;/code&gt; method to check if the value is either &lt;code&gt;nil&lt;/code&gt; or a blank string, that is, a string that is either empty or consists of whitespace.</source>
          <target state="translated">이 도우미는 지정된 속성이 비어 있지 않은지 확인합니다. &lt;code&gt;blank?&lt;/code&gt; 사용 합니까? 값이 &lt;code&gt;nil&lt;/code&gt; 인지 또는 빈 문자열인지, 즉 비어 있거나 공백으로 구성된 문자열인지 확인하는 방법 .</target>
        </trans-unit>
        <trans-unit id="64123e43a0427e0e4ac0baf599d508cee2f86727" translate="yes" xml:space="preserve">
          <source>This helper validates that your attributes have only numeric values. By default, it will match an optional sign followed by an integral or floating point number.</source>
          <target state="translated">이 도우미는 속성에 숫자 값만 있는지 확인합니다. 기본적으로 정수 또는 부동 소수점 숫자가 뒤 따르는 선택적 부호와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="8d15d493f2dac4260fafd63c6fa6c3c6cd2b5924" translate="yes" xml:space="preserve">
          <source>This helper validates that your attributes have only numeric values. By default, it will match an optional sign followed by an integral or floating point number. To specify that only integral numbers are allowed set &lt;code&gt;:only_integer&lt;/code&gt; to true.</source>
          <target state="translated">이 도우미는 속성에 숫자 값만 있는지 확인합니다. 기본적으로 옵션 부호와 정수 또는 부동 소수점 숫자가 일치합니다. &lt;code&gt;:only_integer&lt;/code&gt; 허용하도록 지정하려면 : only_integer 를 true로 설정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="1837be71c3347ee7d252b4dd76e12139d678e3cf" translate="yes" xml:space="preserve">
          <source>This helper validates the attributes' values by testing whether they match a given regular expression, which is specified using the &lt;code&gt;:with&lt;/code&gt; option.</source>
          <target state="translated">이 헬퍼는 &lt;code&gt;:with&lt;/code&gt; 옵션을 사용하여 지정된 정규 표현식과 일치하는지 테스트하여 속성 값의 유효성을 검증합니다 .</target>
        </trans-unit>
        <trans-unit id="530c3904d56ec5974f60d563e1d3bdcbda2302bd" translate="yes" xml:space="preserve">
          <source>This helper validates the length of the attributes' values. It provides a variety of options, so you can specify length constraints in different ways:</source>
          <target state="translated">이 도우미는 속성 값의 길이를 확인합니다. 다양한 옵션을 제공하므로 다양한 방법으로 길이 제한을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fabb16d868184cea58cfe7d4003c718c4f166887" translate="yes" xml:space="preserve">
          <source>This helper works just like normal helpers.</source>
          <target state="translated">이 도우미는 일반 도우미처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="30fc2d64b7d0d8394a7f903001ad772e2088e0b3" translate="yes" xml:space="preserve">
          <source>This helps prevent conflicts with any other engine or application that may have an article resource as well.</source>
          <target state="translated">이렇게하면 기사 리소스가있을 수있는 다른 엔진이나 응용 프로그램과의 충돌을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cf0b8ca8c2df39f6fdac13adf8e604c6933a463" translate="yes" xml:space="preserve">
          <source>This high level overview will help you understand when your code is executed and how, and overall become a better Rails developer. If you still want to know more, the Rails source code itself is probably the best place to go next.</source>
          <target state="translated">이 개괄적 인 개요는 코드가 실행되는시기와 방법을 이해하고 전반적으로 더 나은 Rails 개발자가되는 데 도움이됩니다. 여전히 더 많은 것을 알고 싶다면 Rails 소스 코드 자체가 다음으로 가기에 가장 좋은 장소 일 것입니다.</target>
        </trans-unit>
        <trans-unit id="f82d2b1992c212da213b6b597a27186c4f4dba64" translate="yes" xml:space="preserve">
          <source>This idea strikes a balance between descriptive routes and deep nesting. There exists shorthand syntax to achieve just that, via the &lt;code&gt;:shallow&lt;/code&gt; option:</source>
          <target state="translated">이 아이디어는 기술적 인 경로와 깊은 중첩 사이의 균형을 유지합니다. &lt;code&gt;:shallow&lt;/code&gt; 옵션을 통해이를 달성하기위한 속기 구문이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82076effaf2061abd5b6f14d518b3fae8ca28b71" translate="yes" xml:space="preserve">
          <source>This inserts a correctly-formatted data URI into the CSS source.</source>
          <target state="translated">올바른 형식의 데이터 URI를 CSS 소스에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="7624c621ac14deafeaaed7902e07ca4994eeabf1" translate="yes" xml:space="preserve">
          <source>This interceptor is enabled by default. To disable it, delete it from the &lt;code&gt;ActionMailer::Base.preview_interceptors&lt;/code&gt; array:</source>
          <target state="translated">이 인터셉터는 기본적으로 사용됩니다. 비활성화하려면 &lt;code&gt;ActionMailer::Base.preview_interceptors&lt;/code&gt; 배열 에서 삭제하십시오 .</target>
        </trans-unit>
        <trans-unit id="68ac435fc016afd53ebc39d8d2bdbe7fa1818e52" translate="yes" xml:space="preserve">
          <source>This is a brief instruction manual for your application. You should edit this file to tell others what your application does, how to set it up, and so on.</source>
          <target state="translated">응용 프로그램에 대한 간단한 사용 설명서입니다. 이 파일을 편집하여 다른 사용자에게 응용 프로그램의 기능, 설정 방법 등을 알려 주어야합니다.</target>
        </trans-unit>
        <trans-unit id="0a46183aa6d1980a062ec8d7fee852e92aac8d22" translate="yes" xml:space="preserve">
          <source>This is a class that abstracts away an asserted response. It purposely does not inherit from &lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; because it doesn't need it. That means it does not have headers or a body.</source>
          <target state="translated">이것은 주장 된 응답을 추상화하는 클래스입니다. 필요하지 않기 때문에 의도적으로 &lt;a href=&quot;response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 에서 상속 하지 않습니다. 이는 헤더 나 본문이 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="236a86724a3b7c924ff74a1550504e6c1a14b8f4" translate="yes" xml:space="preserve">
          <source>This is a class that abstracts away an asserted response. It purposely does not inherit from &lt;a href=&quot;response&quot;&gt;Response&lt;/a&gt; because it doesn't need it. That means it does not have headers or a body.</source>
          <target state="translated">이것은 주장 된 응답을 추상화하는 클래스입니다. 필요하지 않기 때문에 의도적으로 &lt;a href=&quot;response&quot;&gt;Response&lt;/a&gt; 에서 상속 하지 않습니다. 그것은 헤더 나 본문이 없다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0227309670d5d656255751e4bef7637565f95272" translate="yes" xml:space="preserve">
          <source>This is a great way to inspect the values of the current context variables. For example, to check that we have no local variables currently defined:</source>
          <target state="translated">이것은 현재 컨텍스트 변수의 값을 검사하는 좋은 방법입니다. 예를 들어, 현재 정의 된 지역 변수가 없는지 확인하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d4587a30fb5b215d87c2747e9969b087ba324099" translate="yes" xml:space="preserve">
          <source>This is a handy option if you are updating an older project that didn't use the asset pipeline and already uses this path or you wish to use this path for a new resource.</source>
          <target state="translated">자산 파이프 라인을 사용하지 않고 이미이 경로를 사용하는 이전 프로젝트를 업데이트하거나이 경로를 새 리소스에 사용하려는 경우 편리한 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="9ea3a00ac380fe26c62b0dc2800cb5231ad94acf" translate="yes" xml:space="preserve">
          <source>This is a list of permitted scalar types that includes the ones supported in XML and JSON requests.</source>
          <target state="translated">XML 및 JSON 요청에서 지원되는 유형을 포함하는 허용 된 스칼라 유형 목록입니다.</target>
        </trans-unit>
        <trans-unit id="91fb6f33bcbb65b651d369ad6213dde3283a864f" translate="yes" xml:space="preserve">
          <source>This is a perfectly valid solution, but Rails provides a less verbose alternative: &lt;code&gt;options_from_collection_for_select&lt;/code&gt;. This helper expects a collection of arbitrary objects and two additional arguments: the names of the methods to read the option &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;text&lt;/strong&gt; from, respectively:</source>
          <target state="translated">이것은 완벽하게 유효한 해결책이지만, 레일은 덜 대안 자세한 정보 제공 : &lt;code&gt;options_from_collection_for_select&lt;/code&gt; 를 . 이 헬퍼는 임의의 객체와 두 개의 추가 인수 , 각각 옵션 &lt;strong&gt;값&lt;/strong&gt; 과 &lt;strong&gt;텍스트&lt;/strong&gt; 를 읽는 메소드 이름을 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="fe56016c0db98bbf6300fa8d10326808584bcc75" translate="yes" xml:space="preserve">
          <source>This is a poor solution, but fully distributed transactions are beyond the scope of Active Record.</source>
          <target state="translated">이것은 좋지 않은 솔루션이지만 완전히 분산 된 트랜잭션은 Active Record의 범위를 벗어납니다.</target>
        </trans-unit>
        <trans-unit id="7dd8c7b7b69c090c1cbdf105479f8256c1d16690" translate="yes" xml:space="preserve">
          <source>This is a rather comprehensive guide to the various testing facilities in Rails. It covers everything from 'What is a test?' to Integration Testing. Enjoy.</source>
          <target state="translated">이것은 Rails의 다양한 테스트 시설에 대한 다소 포괄적 인 안내서입니다. '테스트 란 무엇입니까?' 통합 테스트. 즐겨.</target>
        </trans-unit>
        <trans-unit id="1b4db319b3fda4fa46827ef71d4d592b37a9892d" translate="yes" xml:space="preserve">
          <source>This is a setting for Rails itself. If you want to pass settings to individual Rails components, you can do so via the same &lt;code&gt;config&lt;/code&gt; object in &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">Rails 자체의 설정입니다. 개별 Rails 컴포넌트에 설정을 전달하려면 &lt;code&gt;config/application.rb&lt;/code&gt; 에서 동일한 &lt;code&gt;config&lt;/code&gt; 객체 를 통해 설정을 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dbfd983ac46d4b355583cedc1284525f1db08144" translate="yes" xml:space="preserve">
          <source>This is a start, but it doesn't dynamically create the option tags. You can generate option tags with the &lt;code&gt;options_for_select&lt;/code&gt; helper:</source>
          <target state="translated">이것은 시작이지만 옵션 태그를 동적으로 생성하지는 않습니다. &lt;code&gt;options_for_select&lt;/code&gt; 헬퍼를 사용하여 옵션 태그를 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d17bc718e6125253db3d6010bd018864dc8c7748" translate="yes" xml:space="preserve">
          <source>This is a web notification channel that allows you to trigger client-side web notifications when you broadcast to the right streams:</source>
          <target state="translated">올바른 스트림으로 브로드 캐스트 할 때 클라이언트 측 웹 알림을 트리거 할 수있는 웹 알림 채널입니다.</target>
        </trans-unit>
        <trans-unit id="add325d6853a3081a693db0988ded439abf165b1" translate="yes" xml:space="preserve">
          <source>This is a white list of permitted scalar types that includes the ones supported in XML and JSON requests.</source>
          <target state="translated">이것은 XML 및 JSON 요청에서 지원되는 스칼라 유형을 포함하는 화이트리스트입니다.</target>
        </trans-unit>
        <trans-unit id="a1bfe41decfa7156f43af4b11764141340abb1c9" translate="yes" xml:space="preserve">
          <source>This is alright for some web applications, but certainly not if the user is not authorized to view all projects. If the user changes the id to 42, and they are not allowed to see that information, they will have access to it anyway. Instead, &lt;em&gt;query the user's access rights, too&lt;/em&gt;:</source>
          <target state="translated">이것은 일부 웹 응용 프로그램에는 문제가 없지만 사용자가 모든 프로젝트를 볼 권한이없는 경우에는 아닙니다. 사용자가 아이디를 42로 변경하고 해당 정보를 볼 수없는 경우 어쨌든 액세스 할 수 있습니다. 대신 &lt;em&gt;사용자의 액세스 권한도 쿼리하십시오&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="8ae4c04a6e7dcd1b0f26549337b5cf0efafd7928" translate="yes" xml:space="preserve">
          <source>This is also the case with inheritance and module includes where the parent or module defines a &lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;&lt;code&gt;default_scope&lt;/code&gt;&lt;/a&gt; and the child or including class defines a second one.</source>
          <target state="translated">상속 및 모듈 포함의 경우 부모 또는 모듈이 &lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt; &lt;code&gt;default_scope&lt;/code&gt; 를&lt;/a&gt; 정의 하고 자식 또는 포함 클래스가 두 번째 것을 정의하는 경우에도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="7ea08e85428f7dae28f5ff42bac4f303f6975ffa" translate="yes" xml:space="preserve">
          <source>This is also the case with inheritance and module includes where the parent or module defines a &lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;default_scope&lt;/a&gt; and the child or including class defines a second one.</source>
          <target state="translated">상속 또는 모듈의 경우에도 부모 또는 모듈이 &lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;default_scope를&lt;/a&gt; 정의 하고 자식 또는 클래스를 포함하여 두 번째 것을 정의하는 경우가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="13e2ad2d9dd9ca78c7e9827250e2d9a16cc4291f" translate="yes" xml:space="preserve">
          <source>This is an abstract base class for analyzers, which extract metadata from blobs. See &lt;a href=&quot;analyzer/imageanalyzer&quot;&gt;&lt;code&gt;ActiveStorage::Analyzer::ImageAnalyzer&lt;/code&gt;&lt;/a&gt; for an example of a concrete subclass.</source>
          <target state="translated">Blob에서 메타 데이터를 추출하는 분석 기용 추상 기본 클래스입니다. 구체적인 하위 클래스의 예는 &lt;a href=&quot;analyzer/imageanalyzer&quot;&gt; &lt;code&gt;ActiveStorage::Analyzer::ImageAnalyzer&lt;/code&gt; &lt;/a&gt; 를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="865f091128dc7691bac5e173d9e24d51ce2cd12f" translate="yes" xml:space="preserve">
          <source>This is an abstract base class for analyzers, which extract metadata from blobs. See &lt;a href=&quot;analyzer/imageanalyzer&quot;&gt;ActiveStorage::Analyzer::ImageAnalyzer&lt;/a&gt; for an example of a concrete subclass.</source>
          <target state="translated">Blob에서 메타 데이터를 추출하는 분석기의 추상 기본 클래스입니다. 구체적 서브 클래스의 예는 &lt;a href=&quot;analyzer/imageanalyzer&quot;&gt;ActiveStorage :: Analyzer :: ImageAnalyzer&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b34470ec8bfced6d86f58fc8e775d7deb2fa8c42" translate="yes" xml:space="preserve">
          <source>This is an abstract base class for previewers, which generate images from blobs. See &lt;code&gt;ActiveStorage::Previewer::MuPDFPreviewer&lt;/code&gt; and &lt;code&gt;ActiveStorage::Previewer::VideoPreviewer&lt;/code&gt; for examples of concrete subclasses.</source>
          <target state="translated">이것은 Blob에서 이미지를 생성하는 미리보기를위한 추상 기본 클래스입니다. 구체적인 하위 클래스의 예는 &lt;code&gt;ActiveStorage::Previewer::MuPDFPreviewer&lt;/code&gt; 및 &lt;code&gt;ActiveStorage::Previewer::VideoPreviewer&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="314966a61923d31a0bc7b653c7b15e8267b26741" translate="yes" xml:space="preserve">
          <source>This is an abstract base class for previewers, which generate images from blobs. See ActiveStorage::Previewer::MuPDFPreviewer and ActiveStorage::Previewer::VideoPreviewer for examples of concrete subclasses.</source>
          <target state="translated">Blob에서 이미지를 생성하는 미리보기 용 추상 기본 클래스입니다. 구체적인 하위 클래스의 예는 ActiveStorage :: Previewer :: MuPDFPreviewer 및 ActiveStorage :: Previewer :: VideoPreviewer를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5164c9f3a244e51b03aa9d3197a95e96bb00d342" translate="yes" xml:space="preserve">
          <source>This is an all-or-nothing operation, Rails does not attempt to reload only what changed since dependencies between classes makes that really tricky. Instead, everything is wiped.</source>
          <target state="translated">이것은 전혀 또는 전혀없는 작업이며, Rails는 클래스 간의 종속성으로 인해 까다로워 변경된 내용 만 다시로드하려고 시도하지 않습니다. 대신 모든 것이 지워집니다.</target>
        </trans-unit>
        <trans-unit id="9dfd9dc3caa14755efc8f8a05248988fd13e2764" translate="yes" xml:space="preserve">
          <source>This is an introduction to three types of caching techniques: page, action and fragment caching. By default Rails provides fragment caching. In order to use page and action caching you will need to add &lt;code&gt;actionpack-page_caching&lt;/code&gt; and &lt;code&gt;actionpack-action_caching&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;.</source>
          <target state="translated">이것은 페이지, 액션 및 프래그먼트 캐싱이라는 세 가지 유형의 캐싱 기술을 소개합니다. 기본적으로 Rails는 조각 캐싱을 제공합니다. 사용 페이지 및 조치를 위해 추가해야합니다 캐싱 &lt;code&gt;actionpack-page_caching&lt;/code&gt; 및 &lt;code&gt;actionpack-action_caching&lt;/code&gt; 당신에 &lt;code&gt;Gemfile&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="d8c2f4b36b11cd712675d027c54f88b87fd82d85" translate="yes" xml:space="preserve">
          <source>This is based on Basecamp, so if you still can't find what you are looking for, check this &lt;a href=&quot;https://github.com/basecamp/bc3-api/blob/master/sections/rich_text.md&quot;&gt;Basecamp Doc&lt;/a&gt;.</source>
          <target state="translated">이것은 Basecamp를 기반으로하므로 여전히 원하는 것을 찾을 수 없다면이 &lt;a href=&quot;https://github.com/basecamp/bc3-api/blob/master/sections/rich_text.md&quot;&gt;Basecamp 문서를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="5555dee3e7a5ab5584fbaa2cdbf6e111d65572e7" translate="yes" xml:space="preserve">
          <source>This is because the incoming XML document (if a web-service request is in process) can only contain a single root-node. So, we have to rearrange things so that the request looks like this (url-encoded):</source>
          <target state="translated">들어오는 XML 문서 (웹 서비스 요청이 진행중인 경우)에는 단일 루트 노드 만 포함될 수 있기 때문입니다. 따라서 요청을 다음과 같이 보이도록 항목을 재정렬해야합니다 (URL 인코딩).</target>
        </trans-unit>
        <trans-unit id="905051a2d5ae2f2b8c51b848354a8751c3782e96" translate="yes" xml:space="preserve">
          <source>This is currently the most popular cache store for production websites.</source>
          <target state="translated">현재 프로덕션 웹 사이트에서 가장 인기있는 캐시 저장소입니다.</target>
        </trans-unit>
        <trans-unit id="5871bd759ac07fed83a084a33ffb3dbbf698d715" translate="yes" xml:space="preserve">
          <source>This is done by either returning and leasing existing connection, or by creating a new connection and leasing it.</source>
          <target state="translated">이는 기존 연결을 리턴 및 임대하거나 새 연결을 작성하여 임대하여 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="480acb5e3b969690482ac1da0abaa8ddf1fa590d" translate="yes" xml:space="preserve">
          <source>This is due to the way &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;&lt;code&gt;Object#blank?&lt;/code&gt;&lt;/a&gt; handles boolean values: &lt;code&gt;false.blank? # =&amp;gt; true&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt; &lt;code&gt;Object#blank?&lt;/code&gt; &lt;/a&gt;부울 값 처리 : &lt;code&gt;false.blank? # =&amp;gt; true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="edf40f3fb63d5f4a07f45fdb49c69cb8aaecdfe3" translate="yes" xml:space="preserve">
          <source>This is due to the way &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt; handles boolean values: &lt;code&gt;false.blank? # =&amp;gt; true&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object # blank&lt;/a&gt; 방식 때문입니다 . 부울 값을 처리합니다. &lt;code&gt;false.blank? # =&amp;gt; true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e75165bd6c0c435e57a13f622ac0560e9f8aea5" translate="yes" xml:space="preserve">
          <source>This is equivalent to</source>
          <target state="translated">이것은</target>
        </trans-unit>
        <trans-unit id="7df60eca28628c687288336e90344c09052d6e67" translate="yes" xml:space="preserve">
          <source>This is equivalent to writing:</source>
          <target state="translated">이것은 다음과 같이 쓰는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bf3963c5a31eeb01e885e1acef74b0386761c8e2" translate="yes" xml:space="preserve">
          <source>This is especially useful in validation situations where the user might supply a string for an integer field and you want to display the original string back in an error message. Accessing the attribute normally would typecast the string to 0, which isn't what you want.</source>
          <target state="translated">이는 사용자가 정수 필드에 문자열을 제공하고 원래 문자열을 다시 오류 메시지에 표시하려는 유효성 검사 상황에 유용합니다. 속성에 액세스하면 일반적으로 문자열을 0으로 타입 캐스팅합니다. 원하는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="71866269bd470ce2d7b7b1155a0a13386d12cd5a" translate="yes" xml:space="preserve">
          <source>This is generally a much cleaner way to set up the database of a blank application.</source>
          <target state="translated">이것은 일반적으로 빈 응용 프로그램의 데이터베이스를 설정하는 훨씬 깨끗한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="4ad8a787581f843360989dbf783471a59de59634" translate="yes" xml:space="preserve">
          <source>This is mainly intended for sharing common conditions between multiple associations.</source>
          <target state="translated">이는 주로 여러 연결간에 공통 조건을 공유하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="0e601d127faa01a91c1ee11466a5b40f9e1a2ba8" translate="yes" xml:space="preserve">
          <source>This is meant to be implemented by the adapters that support extensions</source>
          <target state="translated">이것은 확장을 지원하는 어댑터에 의해 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="5e39777005ed40ac5c55a9e639158a69e12f0534" translate="yes" xml:space="preserve">
          <source>This is more often than not used inside a select_tag like this example:</source>
          <target state="translated">이것은 다음 예제와 같이 select_tag 내에서 사용되지 않는 것보다 자주 발생합니다.</target>
        </trans-unit>
        <trans-unit id="88736da89c7f5fa560ff5b210c718c953972c3d5" translate="yes" xml:space="preserve">
          <source>This is most useful when updating several attributes at once. If, on the other hand, you'd like to update several records in bulk, you may find the &lt;code&gt;update_all&lt;/code&gt; class method useful:</source>
          <target state="translated">한 번에 여러 속성을 업데이트 할 때 가장 유용합니다. 반면에 여러 레코드를 대량으로 업데이트하려는 경우 &lt;code&gt;update_all&lt;/code&gt; 클래스 메소드가 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="caccd46ce2b3dd250ca9818efcd2df2cf306c5bb" translate="yes" xml:space="preserve">
          <source>This is not compatible with the &lt;a href=&quot;#direct-uploads&quot;&gt;direct uploads&lt;/a&gt; feature.</source>
          <target state="translated">&lt;a href=&quot;#direct-uploads&quot;&gt;직접 업로드&lt;/a&gt; 기능 과 호환되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d652a9e2f95ded9cdd728c3a457299f1da7ff87a" translate="yes" xml:space="preserve">
          <source>This is not the case in Rails applications, where application classes and modules are just available everywhere:</source>
          <target state="translated">애플리케이션 클래스와 모듈을 어디에서나 사용할 수있는 Rails 애플리케이션에는 해당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="815b08f26be08eca11949f8c08be50a5aa0995f7" translate="yes" xml:space="preserve">
          <source>This is not the same as running all the migrations. It will only use the contents of the current &lt;code&gt;db/schema.rb&lt;/code&gt; or &lt;code&gt;db/structure.sql&lt;/code&gt; file. If a migration can't be rolled back, &lt;code&gt;bin/rails db:reset&lt;/code&gt; may not help you. To find out more about dumping the schema see &lt;a href=&quot;#schema-dumping-and-you&quot;&gt;Schema Dumping and You&lt;/a&gt; section.</source>
          <target state="translated">이것은 모든 마이그레이션을 실행하는 것과 동일하지 않습니다. 현재 &lt;code&gt;db/schema.rb&lt;/code&gt; 또는 &lt;code&gt;db/structure.sql&lt;/code&gt; 파일 의 내용 만 사용 합니다. 마이그레이션을 롤백 할 수없는 경우 &lt;code&gt;bin/rails db:reset&lt;/code&gt; 이 도움이되지 않을 수 있습니다. &lt;a href=&quot;#schema-dumping-and-you&quot;&gt;스키마 덤프&lt;/a&gt; 에 대한 자세한 내용은 스키마 덤프 및 사용자 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2c4c708a791cd0766f936fe455fd58d8f7f8536a" translate="yes" xml:space="preserve">
          <source>This is not the same as running all the migrations. It will only use the contents of the current &lt;code&gt;db/schema.rb&lt;/code&gt; or &lt;code&gt;db/structure.sql&lt;/code&gt; file. If a migration can't be rolled back, &lt;code&gt;rails db:reset&lt;/code&gt; may not help you. To find out more about dumping the schema see &lt;a href=&quot;#schema-dumping-and-you&quot;&gt;Schema Dumping and You&lt;/a&gt; section.</source>
          <target state="translated">이는 모든 마이그레이션을 실행하는 것과 다릅니다. 현재 &lt;code&gt;db/schema.rb&lt;/code&gt; 또는 &lt;code&gt;db/structure.sql&lt;/code&gt; 파일 의 내용 만 사용 합니다. 마이그레이션을 롤백 할 수 없으면 &lt;code&gt;rails db:reset&lt;/code&gt; 이 도움이되지 않을 수 있습니다. &lt;a href=&quot;#schema-dumping-and-you&quot;&gt;스키마 덤프&lt;/a&gt; 에 대한 자세한 내용은 스키마 덤프 및 사용자 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="476f3c583a6763b42119d74920eae71a20fdb760" translate="yes" xml:space="preserve">
          <source>This is often factored out into its own method so it can be reused by multiple actions in the same controller, for example &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;. Above and beyond mass assignment issues, the method is often made &lt;code&gt;private&lt;/code&gt; to make sure it can't be called outside its intended context. Here is the result:</source>
          <target state="translated">이것은 종종 자체 메소드에 포함되므로 동일한 컨트롤러에서 여러 작업 (예 : &lt;code&gt;create&lt;/code&gt; 및 &lt;code&gt;update&lt;/code&gt; ) 으로 재사용 할 수 있습니다 . 대량 할당 문제 이상으로,이 메서드는 의도 한 컨텍스트 외부에서 호출 될 수 없도록하기 위해 종종 &lt;code&gt;private&lt;/code&gt; 로 만들어 집니다 . 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0e0a90acd9171f758e766f64e40f11604b22b532" translate="yes" xml:space="preserve">
          <source>This is one of the best ways to find bugs in your code.</source>
          <target state="translated">이것은 코드에서 버그를 찾는 가장 좋은 방법 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="63ca15fdcd8e41433c8d24158cbffeb8de318585" translate="yes" xml:space="preserve">
          <source>This is particularly useful for initializing an options hash with default values.</source>
          <target state="translated">이것은 기본값으로 옵션 해시를 초기화 할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4bf4b1de560da5ffbb60a75f2ecba74c5e7fe966" translate="yes" xml:space="preserve">
          <source>This is possible because on some servers, this way the parameter id, as in params[:id], would be nil. However, here is the finder from the activation action:</source>
          <target state="translated">일부 서버에서는이 방법으로 params [: id]에서와 같이 매개 변수 id가 nil이 될 수 있습니다. 그러나 다음은 활성화 조치의 파인더입니다.</target>
        </trans-unit>
        <trans-unit id="f043ebef04d8d62a14ad83768255d1c49c9d2466" translate="yes" xml:space="preserve">
          <source>This is possible thanks to a hidden field generated by the helper method for every collection of checkboxes. This hidden field is given the same field name as the checkboxes with a blank value.</source>
          <target state="translated">이것은 모든 확인란 모음에 대해 도우미 메서드로 생성 된 숨겨진 필드 덕분에 가능합니다. 이 숨겨진 필드에는 빈 값이있는 확인란과 동일한 필드 이름이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="4055e9eb86cbef6fd45cdce30c4e1d8fa7109629" translate="yes" xml:space="preserve">
          <source>This is short-hand for &lt;code&gt;unscope(:select).select(fields)&lt;/code&gt;. Note that we're unscoping the entire select statement.</source>
          <target state="translated">이 짧은 손입니다 &lt;code&gt;unscope(:select).select(fields)&lt;/code&gt; . 우리는 전체 select 문을 지우고 있습니다.</target>
        </trans-unit>
        <trans-unit id="524db4e942fe674edb44820a99cd4b3b0a848093" translate="yes" xml:space="preserve">
          <source>This is short-hand for &lt;code&gt;unscope(where:
conditions.keys).where(conditions)&lt;/code&gt;. Note that unlike reorder, we're only unscoping the named conditions &amp;ndash; not the entire where statement.</source>
          <target state="translated">이 짧은 핸드 인 &lt;code&gt;unscope(where: conditions.keys).where(conditions)&lt;/code&gt; . 재정렬과는 달리, 전체 where 문이 아니라 명명 된 조건 만 스코핑하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="03f6e44dab7f751dc8ac3b6362059f6af7087c4e" translate="yes" xml:space="preserve">
          <source>This is short-hand for:</source>
          <target state="translated">이것은 다음과 같은 속기입니다.</target>
        </trans-unit>
        <trans-unit id="f8779f481bebbfa86b016f36c359dc3724b6a505" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;&lt;code&gt;find_or_create_by&lt;/code&gt;&lt;/a&gt;, but avoids the problem of stale reads between the SELECT and the INSERT, as that method needs to first query the table, then attempt to insert a row if none is found.</source>
          <target state="translated">이것은 &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt; &lt;code&gt;find_or_create_by&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 SELECT와 INSERT 사이의 부실 읽기 문제를 방지합니다. 그 방법은 먼저 테이블을 쿼리 한 다음 아무것도 발견되지 않으면 행을 삽입해야하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d060cb3ccf4a3c817c36239623366a500bc1139a" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but avoids the problem of stale reads between the SELECT and the INSERT, as that method needs to first query the table, then attempt to insert a row if none is found.</source>
          <target state="translated">이것은 &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt; 와 유사 하지만 SELECT와 INSERT 사이의 오래된 읽기 문제를 피합니다.이 방법은 먼저 테이블을 쿼리 한 다음 행이 없으면 행을 삽입해야합니다.</target>
        </trans-unit>
        <trans-unit id="d3039fad58aed73518993e5254cab0746970698c" translate="yes" xml:space="preserve">
          <source>This is the default cache store implementation (at &lt;code&gt;&quot;#{root}/tmp/cache/&quot;&lt;/code&gt;) if no explicit &lt;code&gt;config.cache_store&lt;/code&gt; is supplied.</source>
          <target state="translated">명시적인 &lt;code&gt;config.cache_store&lt;/code&gt; 가 제공 되지 않은 경우 기본 캐시 저장소 구현 ( &lt;code&gt;&quot;#{root}/tmp/cache/&quot;&lt;/code&gt; ) 입니다.</target>
        </trans-unit>
        <trans-unit id="3b294f478ac8128dd19bb0a3363f9167a2ff202c" translate="yes" xml:space="preserve">
          <source>This is the default queue adapter. It's well-suited for dev/test since it doesn't need an external infrastructure, but it's a poor fit for production since it drops pending jobs on restart.</source>
          <target state="translated">이것이 기본 큐 어댑터입니다. 외부 인프라가 필요하지 않기 때문에 개발 / 테스트에 적합하지만 재시작시 보류중인 작업을 제거하므로 프로덕션에 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="19b9cbb208ca023f3d372570188571ddffe2eb88" translate="yes" xml:space="preserve">
          <source>This is the entry point for all assets. When using the asset pipeline (i.e. sprockets and sprockets-rails), the behavior is &amp;ldquo;enhanced&amp;rdquo;. You can bypass the asset pipeline by passing in &lt;code&gt;skip_pipeline: true&lt;/code&gt; to the options.</source>
          <target state="translated">이것이 모든 자산의 진입 점입니다. 자산 파이프 라인 (예 : 스프라켓 및 스프라켓 레일)을 사용하면 동작이 &quot;향상&quot;됩니다. &lt;code&gt;skip_pipeline: true&lt;/code&gt; 를 옵션 에 전달하여 자산 파이프 라인을 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a879952bc2384b58228e1cc88c6eeba119ebdba2" translate="yes" xml:space="preserve">
          <source>This is the fastest way to update attributes because it goes straight to the database, but take into account that in consequence the regular update procedures are totally bypassed. In particular:</source>
          <target state="translated">이는 데이터베이스로 직접 이동하기 때문에 속성을 업데이트하는 가장 빠른 방법이지만 정기적 인 업데이트 절차가 완전히 무시된다는 점을 고려하십시오. 특히:</target>
        </trans-unit>
        <trans-unit id="dea8eb66708962551027008a99a9d115a30b5e03" translate="yes" xml:space="preserve">
          <source>This is the final step required to get the new comment form working. Displaying the comments, however, is not quite right yet. If you were to create a comment right now, you would see this error:</source>
          <target state="translated">이것은 새로운 코멘트 양식이 작동하는데 필요한 마지막 단계입니다. 그러나 주석을 표시하는 것은 아직 옳지 않습니다. 지금 주석을 작성하는 경우 다음 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0d733419d80f4628f3b75f9f9b75f8084c9fea98" translate="yes" xml:space="preserve">
          <source>This is the generator just created:</source>
          <target state="translated">이것은 방금 생성 된 생성기입니다.</target>
        </trans-unit>
        <trans-unit id="213775bf160b9aaddfc0b572608a82bd8c8122c6" translate="yes" xml:space="preserve">
          <source>This is the low level API which sits beneath &lt;code&gt;attribute&lt;/code&gt;. It only accepts type objects, and will do its work immediately instead of waiting for the schema to load. Automatic schema detection and &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attribute&lt;/a&gt; both call this under the hood. While this method is provided so it can be used by plugin authors, application code should probably use &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attribute&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;attribute&lt;/code&gt; 아래에있는 저수준 API입니다 . 형식 개체 만 허용하며 스키마가로드되기를 기다리는 대신 즉시 작업을 수행합니다. 자동 스키마 감지와 &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attribute는&lt;/a&gt; 모두 이것을 후드 아래에서 호출합니다. 이 메소드는 플러그인 작성자가 사용할 수 있도록 제공되지만 애플리케이션 코드는 &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attribute를&lt;/a&gt; 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="7c8fb1a0f1fe4e9498abfa520f21314b0a39dacb" translate="yes" xml:space="preserve">
          <source>This is the low level API which sits beneath &lt;code&gt;attribute&lt;/code&gt;. It only accepts type objects, and will do its work immediately instead of waiting for the schema to load. Automatic schema detection and &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;&lt;code&gt;ClassMethods#attribute&lt;/code&gt;&lt;/a&gt; both call this under the hood. While this method is provided so it can be used by plugin authors, application code should probably use &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;&lt;code&gt;ClassMethods#attribute&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; 아래에있는 저수준 API입니다 . 유형 객체 만 허용하며 스키마가로드 될 때까지 기다리지 않고 즉시 작업을 수행합니다. 자동 스키마 감지 및 &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt; &lt;code&gt;ClassMethods#attribute&lt;/code&gt; &lt;/a&gt; 둘 다 내부적으로 이것을 호출합니다. 이 메소드는 플러그인 작성자가 사용할 수 있도록 제공되지만 애플리케이션 코드는 아마도 &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt; &lt;code&gt;ClassMethods#attribute&lt;/code&gt; 를&lt;/a&gt; 사용해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="64966271483564767415bac643bba889da76ade6" translate="yes" xml:space="preserve">
          <source>This is the main entry point for rendering. It basically delegates to other objects like TemplateRenderer and &lt;a href=&quot;partialrenderer&quot;&gt;&lt;code&gt;PartialRenderer&lt;/code&gt;&lt;/a&gt; which actually renders the template.</source>
          <target state="translated">이것이 렌더링의 주요 진입 점입니다. 기본적으로 템플릿 을 실제로 렌더링하는 TemplateRenderer 및 &lt;a href=&quot;partialrenderer&quot;&gt; &lt;code&gt;PartialRenderer&lt;/code&gt; &lt;/a&gt; 와 같은 다른 개체에 위임합니다 .</target>
        </trans-unit>
        <trans-unit id="08a01c626433c4a35f7b2d425460de1d4acf0e73" translate="yes" xml:space="preserve">
          <source>This is the main entry point for rendering. It basically delegates to other objects like TemplateRenderer and &lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt; which actually renders the template.</source>
          <target state="translated">이것이 렌더링의 주요 진입 점입니다. 기본적으로 템플릿을 렌더링하는 TemplateRenderer 및 &lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt; 와 같은 다른 객체에 위임합니다 .</target>
        </trans-unit>
        <trans-unit id="0a7362d4fdb9ce2bc04ad1949d06a74ddbb934b1" translate="yes" xml:space="preserve">
          <source>This is the method that defines the application behavior when a request is found to be unverified.</source>
          <target state="translated">요청이 확인되지 않은 경우 응용 프로그램 동작을 정의하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="04147656e71aa844819d315a436992670672c2c0" translate="yes" xml:space="preserve">
          <source>This is the only method that is not thread safe, but is only ever called during the eager loading phase.</source>
          <target state="translated">이것은 스레드로부터 안전하지는 않지만 유일한 로딩 단계 동안에 만 호출되는 유일한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="d403e247708e5bb03eef06a0a89b4bf74851fe8b" translate="yes" xml:space="preserve">
          <source>This is the right time to understand a little more about writing tests for your mailers. The line &lt;code&gt;ActionMailer::Base.delivery_method = :test&lt;/code&gt; in &lt;code&gt;config/environments/test.rb&lt;/code&gt; sets the delivery method to test mode so that email will not actually be delivered (useful to avoid spamming your users while testing) but instead it will be appended to an array (&lt;code&gt;ActionMailer::Base.deliveries&lt;/code&gt;).</source>
          <target state="translated">메일러를위한 테스트 작성에 대해 조금 더 이해해야 할 때입니다. 라인 &lt;code&gt;ActionMailer::Base.delivery_method = :test&lt;/code&gt; 의 &lt;code&gt;config/environments/test.rb&lt;/code&gt; 이메일이 실제로 (이 테스트 동안 사용자에게 스팸 메일을 방지하는 데 유용합니다) 전달되지 않습니다 대신이 추가됩니다 있도록 테스트 모드로 전달 방법을 설정 배열에 ( &lt;code&gt;ActionMailer::Base.deliveries&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a8756e6def08accc737d69f61fb7bb7d51e092f5" translate="yes" xml:space="preserve">
          <source>This is the strategy adopted by the Rails asset pipeline.</source>
          <target state="translated">이것이 Rails 자산 파이프 라인에서 채택한 전략입니다.</target>
        </trans-unit>
        <trans-unit id="004780d4c45954d665bd54c93112b626b23347bd" translate="yes" xml:space="preserve">
          <source>This is the string of data being sent back to the client. This is most often HTML.</source>
          <target state="translated">클라이언트로 다시 전송되는 데이터 문자열입니다. 이것은 대부분 HTML입니다.</target>
        </trans-unit>
        <trans-unit id="dcf397b2bfca317db3d0b076ec600f2f63f09fea" translate="yes" xml:space="preserve">
          <source>This is then used by Action Cable to determine the URL of your WebSocket server. Your CoffeeScript can then connect to the server without needing to specify the URL directly:</source>
          <target state="translated">그런 다음 Action Cable에서 WebSocket 서버의 URL을 결정하는 데 사용됩니다. 그러면 CoffeeScript는 URL을 직접 지정할 필요없이 서버에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c4ba14d505aa4b09f42e7a79c07d7cf3b8f4b1d" translate="yes" xml:space="preserve">
          <source>This is then used by Action Cable to determine the URL of your WebSocket server. Your JavaScript can then connect to the server without needing to specify the URL directly:</source>
          <target state="translated">그런 다음 Action Cable에서 WebSocket 서버의 URL을 확인하는 데 사용됩니다. 그러면 JavaScript는 URL을 직접 지정하지 않고도 서버에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4cf90ade8f212940229e1dd084416f20c163760f" translate="yes" xml:space="preserve">
          <source>This is used by the Rails UJS helper to create dynamically loaded inline &amp;lt;script&amp;gt; elements.</source>
          <target state="translated">이는 Rails UJS 헬퍼가 동적으로로드 된 인라인 &amp;lt;script&amp;gt; 요소를 작성하는 데 사용합니다.</target>
        </trans-unit>
        <trans-unit id="663d182dd5ff878aea73b684cb3e3623606702a4" translate="yes" xml:space="preserve">
          <source>This is used by the Rails UJS helper to create dynamically loaded inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">이는 Rails UJS 헬퍼가 동적으로로드 된 인라인 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 요소 를 작성하는 데 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="eb82ad0799c37435ede2eda71f81964023fd3247" translate="yes" xml:space="preserve">
          <source>This is used by the default &lt;a href=&quot;../rails#attribute-c-logger&quot;&gt;&lt;code&gt;Rails.logger&lt;/code&gt;&lt;/a&gt; as configured by Railties to make it easy to stamp log lines with subdomains, request ids, and anything else to aid debugging of multi-user production applications.</source>
          <target state="translated">이것은 Railties가 구성한 기본 &lt;a href=&quot;../rails#attribute-c-logger&quot;&gt; &lt;code&gt;Rails.logger&lt;/code&gt; &lt;/a&gt; 에서 사용되어 하위 도메인, 요청 ID 및 다중 사용자 프로덕션 애플리케이션의 디버깅을 지원하는 기타 항목으로 로그 라인을 쉽게 스탬프 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="80aef7d14433f3872bdc21b294a585f3b6194dae" translate="yes" xml:space="preserve">
          <source>This is used by the default &lt;a href=&quot;../rails#attribute-c-logger&quot;&gt;Rails.logger&lt;/a&gt; as configured by Railties to make it easy to stamp log lines with subdomains, request ids, and anything else to aid debugging of multi-user production applications.</source>
          <target state="translated">이는 기본 &lt;a href=&quot;../rails#attribute-c-logger&quot;&gt;Rails.logger&lt;/a&gt; 에서 Railties가 구성 한대로 사용 하여 하위 도메인, 요청 ID 및 다중 사용자 프로덕션 애플리케이션의 디버깅을 돕기 위해 로그 라인을 쉽게 스탬핑 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="f12d9f54f25f90548f4081bbb97d32c761e149eb" translate="yes" xml:space="preserve">
          <source>This is used to create the &lt;code&gt;config&lt;/code&gt; object on Railties, an instance of &lt;a href=&quot;railtie/configuration&quot;&gt;&lt;code&gt;Railtie::Configuration&lt;/code&gt;&lt;/a&gt;, that is used by Railties and &lt;a href=&quot;application&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; to store related configuration.</source>
          <target state="translated">Railties 및 &lt;a href=&quot;application&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt; 에서 관련 구성을 저장 하는 데 사용되는 &lt;a href=&quot;railtie/configuration&quot;&gt; &lt;code&gt;Railtie::Configuration&lt;/code&gt; &lt;/a&gt; 인스턴스 인 Railties에 &lt;code&gt;config&lt;/code&gt; 개체 를 만드는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="da463114acbc05d0accf4cb9abf3944514b91e01" translate="yes" xml:space="preserve">
          <source>This is used to create the &lt;code&gt;config&lt;/code&gt; object on Railties, an instance of &lt;a href=&quot;railtie/configuration&quot;&gt;Railtie::Configuration&lt;/a&gt;, that is used by Railties and &lt;a href=&quot;application&quot;&gt;Application&lt;/a&gt; to store related configuration.</source>
          <target state="translated">&lt;a href=&quot;railtie/configuration&quot;&gt;Railtie :: Configuration&lt;/a&gt; 의 인스턴스 인 Railties에 &lt;code&gt;config&lt;/code&gt; 객체 를 생성 하는데 사용되며, 이는 Railties와 &lt;a href=&quot;application&quot;&gt;Application&lt;/a&gt; 이 관련 설정을 저장하기 위해 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ccd8f91e2131e8cc7a6c70e96f65caea6a40b112" translate="yes" xml:space="preserve">
          <source>This is useful for cases like remember-me tokens and auto-unsubscribe links where the session store isn't suitable or available.</source>
          <target state="translated">이는 세션 저장소가 적합하지 않거나 사용 가능하지 않은 Remember-Me 토큰 및 자동 수신 거부 링크와 같은 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="6bcd23b49e5cc8549fc267d976ca5b6c271bae70" translate="yes" xml:space="preserve">
          <source>This is useful for limiting a set of parameters to everything but a few known toggles:</source>
          <target state="translated">이것은 매개 변수 세트를 알려진 토글을 제외한 모든 것으로 제한하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="93cd12486193c6b8cc6da9b85aa975b6e99ee6c1" translate="yes" xml:space="preserve">
          <source>This is useful for setting flash messages for instance:</source>
          <target state="translated">플래시 메시지를 설정하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="20f494f5b35219f6b64992edd064d3f4c188dfc1" translate="yes" xml:space="preserve">
          <source>This is useful for when you need to call a proprietary method such as PostgreSQL's lo_* methods.</source>
          <target state="translated">PostgreSQL의 lo_ * 메소드와 같은 독점 메소드를 호출해야 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="91b7d75dcbae399c13b14c743e7166314f1ab845" translate="yes" xml:space="preserve">
          <source>This is useful in cases where you aren't sure if the local variable has been assigned. Alternatively, you could also use &lt;code&gt;defined?
headline&lt;/code&gt; to first check if the variable has been assigned before using it.</source>
          <target state="translated">로컬 변수가 할당되었는지 확실하지 않은 경우에 유용합니다. 또는 &lt;code&gt;defined? headline&lt;/code&gt; 사용할 수도 있습니다 . 변수를 사용하기 전에 먼저 할당되었는지 확인하는 헤드 라인 .</target>
        </trans-unit>
        <trans-unit id="daeda2332a21cd511e52c9790edb7f742ee54918" translate="yes" xml:space="preserve">
          <source>This is useful when you want to log under development or staging without flooding your production log with unnecessary information.</source>
          <target state="translated">이는 불필요한 정보로 프로덕션 로그를 넘치지 않고 개발 또는 스테이징 상태에서 로그하려는 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9ed4c7388eef8d2c01e191e1ae5565f0b71812d6" translate="yes" xml:space="preserve">
          <source>This is useful when you're rendering a small snippet of HTML code. However, you might want to consider moving it to a template file if the markup is complex.</source>
          <target state="translated">작은 HTML 코드 조각을 렌더링 할 때 유용합니다. 그러나 마크 업이 복잡한 경우 템플릿 파일로 이동하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9904c6020adc3dd710bfbbf34a05016a746fbec6" translate="yes" xml:space="preserve">
          <source>This is very similar to the &lt;code&gt;Article&lt;/code&gt; model that you saw earlier. The difference is the line &lt;code&gt;belongs_to :article&lt;/code&gt;, which sets up an Active Record &lt;em&gt;association&lt;/em&gt;. You'll learn a little about associations in the next section of this guide.</source>
          <target state="translated">이것은 앞에서 본 &lt;code&gt;Article&lt;/code&gt; 모델 과 매우 유사합니다 . 차이점은 &lt;code&gt;belongs_to :article&lt;/code&gt; 줄 인데, 이것은 Active Record &lt;em&gt;연결&lt;/em&gt; 을 설정합니다 . 이 가이드의 다음 섹션에서 연결에 대해 약간 배웁니다.</target>
        </trans-unit>
        <trans-unit id="29028b796bcc932eb094a3292aa812906209c05c" translate="yes" xml:space="preserve">
          <source>This is where all the Rails frameworks are loaded and thus made available to the application. We won't go into detail of what happens inside each of those frameworks, but you're encouraged to try and explore them on your own.</source>
          <target state="translated">여기에서 모든 Rails 프레임 워크가로드되어 애플리케이션에 제공됩니다. 우리는 각 프레임 워크에서 어떤 일이 발생하는지 자세히 설명하지는 않지만 직접 시도해 보도록 권장합니다.</target>
        </trans-unit>
        <trans-unit id="37329c739affc0a288f6d223308497354efc9781" translate="yes" xml:space="preserve">
          <source>This is where the first output of the Rails initialization happens. This method creates a trap for &lt;code&gt;INT&lt;/code&gt; signals, so if you &lt;code&gt;CTRL-C&lt;/code&gt; the server, it will exit the process. As we can see from the code here, it will create the &lt;code&gt;tmp/cache&lt;/code&gt;, &lt;code&gt;tmp/pids&lt;/code&gt;, and &lt;code&gt;tmp/sockets&lt;/code&gt; directories. It then enables caching in development if &lt;code&gt;rails server&lt;/code&gt; is called with &lt;code&gt;--dev-caching&lt;/code&gt;. Finally, it calls &lt;code&gt;wrapped_app&lt;/code&gt; which is responsible for creating the Rack app, before creating and assigning an instance of &lt;code&gt;ActiveSupport::Logger&lt;/code&gt;.</source>
          <target state="translated">여기서 Rails 초기화의 첫 번째 출력이 발생합니다. 이 방법은 &lt;code&gt;INT&lt;/code&gt; 신호에 대한 트랩을 작성 하므로 &lt;code&gt;CTRL-C&lt;/code&gt; 서버를 사용하면 프로세스가 종료됩니다. 여기서 코드에서 볼 수 있듯이 &lt;code&gt;tmp/cache&lt;/code&gt; , &lt;code&gt;tmp/pids&lt;/code&gt; 및 &lt;code&gt;tmp/sockets&lt;/code&gt; 디렉토리가 작성됩니다. 그런 다음 &lt;code&gt;--dev-caching&lt;/code&gt; 으로 &lt;code&gt;rails server&lt;/code&gt; 를 호출 하면 개발 시 캐싱이 가능 합니다. 마지막으로 &lt;code&gt;ActiveSupport::Logger&lt;/code&gt; 인스턴스를 생성하고 할당하기 전에 Rack 앱 생성을 담당하는 &lt;code&gt;wrapped_app&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="51aa07dbdbd1a837e9dd0eb82a9c9b0310f528b6" translate="yes" xml:space="preserve">
          <source>This is your application's &lt;em&gt;routing file&lt;/em&gt; which holds entries in a special &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL (domain-specific language)&lt;/a&gt; that tells Rails how to connect incoming requests to controllers and actions. Edit this file by adding the line of code &lt;code&gt;root 'welcome#index'&lt;/code&gt;. It should look something like the following:</source>
          <target state="translated">이는 애플리케이션의 &lt;em&gt;라우팅 파일&lt;/em&gt; 로, 수신 요청을 컨트롤러 및 작업에 연결하는 방법을 Rails에 알려주 는 특수 &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL (도메인 특정 언어)로&lt;/a&gt; 항목을 보유합니다 . 코드 줄 &lt;code&gt;root 'welcome#index'&lt;/code&gt; 를 추가하여이 파일을 편집하십시오 . 다음과 같이 보일 것입니다 :</target>
        </trans-unit>
        <trans-unit id="381bcafb465435f07a66f05c0e9e2ccccd82a683" translate="yes" xml:space="preserve">
          <source>This jar allows chaining with the signed jar as well, so you can set permanent, signed cookies. Examples:</source>
          <target state="translated">이 jar를 사용하면 서명 된 jar과 체인을 연결할 수 있으므로 영구적이고 서명 된 쿠키를 설정할 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="5a76e5c72d284c47c6a70bf93313d59ea270d4d1" translate="yes" xml:space="preserve">
          <source>This jar is only meant for writing. You'll read permanent cookies through the regular accessor.</source>
          <target state="translated">이 항아리는 글쓰기만을위한 것입니다. 일반 접근자를 통해 영구 쿠키를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="4167658d0f7fa61c58fa5fbeeddc9aa6a579273c" translate="yes" xml:space="preserve">
          <source>This jar requires that you set a suitable secret for the verification on your app's &lt;code&gt;secret_key_base&lt;/code&gt;.</source>
          <target state="translated">이 jar을 사용하려면 앱의 &lt;code&gt;secret_key_base&lt;/code&gt; 에서 확인에 적합한 비밀을 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e3915c380b68cd39be6cba69c57aa30807df9192" translate="yes" xml:space="preserve">
          <source>This line mounts the engine at the path &lt;code&gt;/blorgh&lt;/code&gt;, which will make it accessible through the application only at that path.</source>
          <target state="translated">이 줄은 &lt;code&gt;/blorgh&lt;/code&gt; 경로에 엔진을 마운트하여 해당 경로 의 응용 프로그램을 통해서만 액세스 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="1b12c1679fcaa055d90e7d839088298b61bc4fa0" translate="yes" xml:space="preserve">
          <source>This line will mount the engine at &lt;code&gt;/blog&lt;/code&gt; in the application. Making it accessible at &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; when the application runs with &lt;code&gt;bin/rails
server&lt;/code&gt;.</source>
          <target state="translated">이 줄은 애플리케이션의 &lt;code&gt;/blog&lt;/code&gt; 에 엔진을 마운트합니다 . 애플리케이션이 &lt;code&gt;bin/rails server&lt;/code&gt; 실행될 때 &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; 에서 액세스 할 수 있도록 합니다 .</target>
        </trans-unit>
        <trans-unit id="a92994e4bc3eb46baa1c70d2090e9dac787735bc" translate="yes" xml:space="preserve">
          <source>This line will mount the engine at &lt;code&gt;/blog&lt;/code&gt; in the application. Making it accessible at &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; when the application runs with &lt;code&gt;rails
server&lt;/code&gt;.</source>
          <target state="translated">이 줄은 엔진을 응용 프로그램의 &lt;code&gt;/blog&lt;/code&gt; 에 마운트합니다 . 애플리케이션이 &lt;code&gt;rails server&lt;/code&gt; 실행될 때 &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; 에서 액세스 가능하게 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cb62752a647511f462535ccfd7ae3c21187d930" translate="yes" xml:space="preserve">
          <source>This line will require there to be a &lt;code&gt;has_many&lt;/code&gt; association for comments defined on the &lt;code&gt;Blorgh::Article&lt;/code&gt; model, which there isn't right now. To define one, open &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; and add this line into the model:</source>
          <target state="translated">이 줄 에는 &lt;code&gt;Blorgh::Article&lt;/code&gt; 모델 에 정의 된 주석에 대한 &lt;code&gt;has_many&lt;/code&gt; 연관 이 있어야합니다 . 하나를 정의하려면 &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; 를 열고이 라인을 모델에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8a0d47373f7566fe90459e9b7e76c7dc55eeab3c" translate="yes" xml:space="preserve">
          <source>This link will allow you to bring up the form that lets you create a new article.</source>
          <target state="translated">이 링크를 사용하면 새 기사를 작성할 수있는 양식을 불러올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bed1815ee2c5769736f0bbec391caf49e034039" translate="yes" xml:space="preserve">
          <source>This links the folder specified in &lt;code&gt;config.assets.prefix&lt;/code&gt; to &lt;code&gt;shared/assets&lt;/code&gt;. If you already use this shared folder you'll need to write your own deployment command.</source>
          <target state="translated">&lt;code&gt;config.assets.prefix&lt;/code&gt; 에 지정된 폴더 를 &lt;code&gt;shared/assets&lt;/code&gt; 에 연결 합니다. 이 공유 폴더를 이미 사용하고 있다면 고유 한 배포 명령을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="78f5f1dd80c7ed75ca752699e7efc31c932ef02b" translate="yes" xml:space="preserve">
          <source>This list is in particular used to filter ordinary requests, &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; goes as first element to quickly short-circuit the common case.</source>
          <target state="translated">이 목록은 특히 일반적인 요청을 필터링하는 데 사용되며 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 은 일반적인 경우를 빠르게 단락시키기 위해 첫 번째 요소로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1e5db0cbda6d065beb5a38ffcd5d827702f924ec" translate="yes" xml:space="preserve">
          <source>This list is in particular used to filter ordinary requests, &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt; goes as first element to quickly short-circuit the common case.</source>
          <target state="translated">이 목록은 특히 일반적인 요청을 필터링하는 데 사용되며 &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt; 은 일반적인 경우를 빠르게 단락시키는 첫 번째 요소로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="03ae548a58e0d2156b84b0334e5e8b7ddc51b2e5" translate="yes" xml:space="preserve">
          <source>This loads all the articles and the associated category and comments for each article.</source>
          <target state="translated">그러면 모든 기사와 관련 기사 및 각 기사에 대한 설명이로드됩니다.</target>
        </trans-unit>
        <trans-unit id="1ed9e5edbfc51d16e3a1cb6c90a83743f8ae3e64" translate="yes" xml:space="preserve">
          <source>This loads all the customers and the associated orders and reviews for each.</source>
          <target state="translated">이렇게하면 모든 고객과 관련 주문 및 리뷰가 각각로드됩니다.</target>
        </trans-unit>
        <trans-unit id="99954b5938ac1786abcd2127fc946c18808c3f35" translate="yes" xml:space="preserve">
          <source>This loads arbitrary HTML and/or JavaScript from an external source and embeds it as part of the site. This &lt;code&gt;iframe&lt;/code&gt; is taken from an actual attack on legitimate Italian sites using the &lt;a href=&quot;https://isc.sans.edu/diary/MPack+Analysis/3015&quot;&gt;Mpack attack framework&lt;/a&gt;. Mpack tries to install malicious software through security holes in the web browser - very successfully, 50% of the attacks succeed.</source>
          <target state="translated">이렇게하면 외부 소스에서 임의의 HTML 및 / 또는 JavaScript를로드하여 사이트의 일부로 포함합니다. 이 &lt;code&gt;iframe&lt;/code&gt; 은 &lt;a href=&quot;https://isc.sans.edu/diary/MPack+Analysis/3015&quot;&gt;Mpack 공격 프레임 워크를&lt;/a&gt; 사용하는 합법적 인 이탈리아 사이트에 대한 실제 공격에서 가져온 것입니다 . Mpack은 웹 브라우저의 보안 허점을 통해 악성 소프트웨어를 설치하려고합니다. 매우 성공적으로 공격의 50 %가 성공합니다.</target>
        </trans-unit>
        <trans-unit id="35b4fe12be07a79f0640d65fa9aa10a39562ad00" translate="yes" xml:space="preserve">
          <source>This loads arbitrary HTML and/or JavaScript from an external source and embeds it as part of the site. This iframe is taken from an actual attack on legitimate Italian sites using the &lt;a href=&quot;http://isc.sans.org/diary.html?storyid=3015&quot;&gt;Mpack attack framework&lt;/a&gt;. Mpack tries to install malicious software through security holes in the web browser - very successfully, 50% of the attacks succeed.</source>
          <target state="translated">외부 소스에서 임의의 HTML 및 / 또는 JavaScript를로드하여 사이트의 일부로 포함합니다. 이 iframe은 &lt;a href=&quot;http://isc.sans.org/diary.html?storyid=3015&quot;&gt;Mpack 공격 프레임 워크를&lt;/a&gt; 사용하여 합법적 인 이탈리아 사이트에 대한 실제 공격에서 가져 왔습니다 . Mpack은 웹 브라우저의 보안 허점을 통해 악성 소프트웨어를 설치하려고 시도합니다. 공격의 50 %가 성공합니다.</target>
        </trans-unit>
        <trans-unit id="4614d263bb358a560bb30e7d74cf0c9ee4528424" translate="yes" xml:space="preserve">
          <source>This locking mechanism will function inside a single Ruby process. To make it work across all web requests, the recommended approach is to add &lt;code&gt;lock_version&lt;/code&gt; as a hidden field to your form.</source>
          <target state="translated">이 잠금 메커니즘은 단일 Ruby 프로세스 내에서 작동합니다. 모든 웹 요청에서 작동하게하려면 권장되는 방법은 &lt;code&gt;lock_version&lt;/code&gt; 을 양식에 숨겨진 필드로 추가 하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c3cccb8ea5ac4e4769575827adeaafd779d48d6c" translate="yes" xml:space="preserve">
          <source>This looks up the &lt;code&gt;:record_invalid&lt;/code&gt; message in the Active Record error messages.</source>
          <target state="translated">활성 레코드 오류 메시지에서 &lt;code&gt;:record_invalid&lt;/code&gt; 메시지를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="5641f216bd18ec6a3d662f7d2a71c9f4c87eaa40" translate="yes" xml:space="preserve">
          <source>This maintains the context of the original caller on whether to return a path or full URL, e.g:</source>
          <target state="translated">경로 또는 전체 URL을 반환할지 여부에 대한 원래 발신자의 컨텍스트를 유지합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="97595dab8f749316ed2ee9b09cfa05a2cc72c3be" translate="yes" xml:space="preserve">
          <source>This makes &lt;code&gt;app/views/application/&lt;/code&gt; a great place for your shared partials, which can then be rendered in your ERB as such:</source>
          <target state="translated">이렇게하면 &lt;code&gt;app/views/application/&lt;/code&gt; 이 공유 부분에 적합한 장소가되며 다음과 같이 ERB에 렌더링 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="895a23f64b056803b5a7798b1ba0ae3b3d462853" translate="yes" xml:space="preserve">
          <source>This makes for clearer readability if you have a large number of variable conditions.</source>
          <target state="translated">변수 조건이 많은 경우 가독성이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="1da73b5103ef8a7a3085798d29399f725987961c" translate="yes" xml:space="preserve">
          <source>This makes sense if you think about it: if you were to call &lt;code&gt;post.tags.delete(Tag.find_by(name: 'food'))&lt;/code&gt; you would want the 'food' tag to be unlinked from the post, rather than for the tag itself to be removed from the database.</source>
          <target state="translated">&lt;code&gt;post.tags.delete(Tag.find_by(name: 'food'))&lt;/code&gt; 을 호출 하려는 경우 'food'태그를 게시물이 아닌 게시물에서 연결 해제하기를 원할 것입니다. 태그 자체는 데이터베이스에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="e67dcce11dbca0a90d9ca6117b66a33e99f635f9" translate="yes" xml:space="preserve">
          <source>This makes sense in most applications, since you never should require a file in &lt;code&gt;app/models&lt;/code&gt;, for example, and Zeitwerk only uses absolute file names internally.</source>
          <target state="translated">예를 들어 &lt;code&gt;app/models&lt;/code&gt; 에 파일이 필요하지 않으며 Zeitwerk는 내부적으로 절대 파일 이름 만 사용하므로 대부분의 응용 프로그램에서 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="89c6cd8a5ef940d3f1e8ac1a8890a63e3ef1de8b" translate="yes" xml:space="preserve">
          <source>This manifest &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;:</source>
          <target state="translated">이 매니페스트 &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8e807b6eee38015b2030baa284e9a02d6b6f5abf" translate="yes" xml:space="preserve">
          <source>This manual describes common security problems in web applications and how to avoid them with Rails.</source>
          <target state="translated">이 매뉴얼은 웹 애플리케이션의 일반적인 보안 문제와 Rails에서이를 피하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7da615f537586c7fb1d2fa742facf71a9d313d23" translate="yes" xml:space="preserve">
          <source>This marks every template in the directory as a dependency. To find those templates, the wildcard path must be absolutely defined from &lt;code&gt;app/views&lt;/code&gt; or paths otherwise added with &lt;code&gt;prepend_view_path&lt;/code&gt; or &lt;code&gt;append_view_path&lt;/code&gt;. This way the wildcard for &lt;code&gt;app/views/recordings/events&lt;/code&gt; would be &lt;code&gt;recordings/events/*&lt;/code&gt; etc.</source>
          <target state="translated">이는 디렉토리의 모든 템플리트를 종속성으로 표시합니다. 이러한 템플릿을 찾으려면 와일드 카드 경로는 &lt;code&gt;app/views&lt;/code&gt; 또는 &lt;code&gt;prepend_view_path&lt;/code&gt; 또는 &lt;code&gt;append_view_path&lt;/code&gt; 로 추가 된 경로 에서 절대적으로 정의해야합니다 . 에 대한 와일드 카드이 방법을 &lt;code&gt;app/views/recordings/events&lt;/code&gt; 될 것이다 &lt;code&gt;recordings/events/*&lt;/code&gt; 등</target>
        </trans-unit>
        <trans-unit id="590b29fa10d33f8d8d0328642011a76bdd0db844" translate="yes" xml:space="preserve">
          <source>This marks the &lt;code&gt;:log_entry&lt;/code&gt; parameters hash and any sub-hash of it as permitted and does not check for permitted scalars, anything is accepted. Extreme care should be taken when using &lt;code&gt;permit!&lt;/code&gt;, as it will allow all current and future model attributes to be mass-assigned.</source>
          <target state="translated">이것은 &lt;code&gt;:log_entry&lt;/code&gt; 매개 변수 해시와 그 하위 해시가 허용 된 것으로 표시하고 허용 된 스칼라를 확인하지 않고 어떤 것도 허용됩니다. &lt;code&gt;permit!&lt;/code&gt; 사용할 때는 매우주의해야합니다 ! 현재 및 미래의 모든 모델 속성을 대량으로 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3627b7191e06bb1d36c84e175b1119ef41e58cf" translate="yes" xml:space="preserve">
          <source>This matches normal Ruby method inheritance: think of writing an attribute on a subclass as overriding the reader method. However, you need to be aware when using &lt;code&gt;class_attribute&lt;/code&gt; with mutable structures as &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt;. In such cases, you don't want to do changes in place. Instead use setters:</source>
          <target state="translated">이는 일반적인 Ruby 메소드 상속과 일치합니다. 서브 클래스에 속성을 작성하여 reader 메소드를 대체하는 것으로 생각하십시오. 그러나 변경 가능한 구조와 함께 &lt;code&gt;class_attribute&lt;/code&gt; 를 &lt;code&gt;Array&lt;/code&gt; 또는 &lt;code&gt;Hash&lt;/code&gt; 로 사용할 때는주의해야합니다 . 이러한 경우에는 변경을 원하지 않습니다. 대신 세터를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a46526cf145bed88fc68b22717b92b243653a2a4" translate="yes" xml:space="preserve">
          <source>This may appear straightforward:</source>
          <target state="translated">이것은 간단하게 나타날 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="56c5e03d9e5fdcadc2292beb97b4f8fe28aba7fe" translate="yes" xml:space="preserve">
          <source>This may be useful if you want to revert engine's migrations before removing it. To revert all migrations from blorgh engine you can run code such as:</source>
          <target state="translated">엔진을 마이그레이션하기 전에 엔진 마이그레이션을 되돌리려는 경우 유용 할 수 있습니다. blorgh 엔진에서 모든 마이그레이션을 되돌리려면 다음과 같은 코드를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="538ab1c487668c557422fd6fcef02f42a0371322" translate="yes" xml:space="preserve">
          <source>This may improve the asset loading performance of your application. It is also possible the combination of additional connection overhead (DNS, SSL) and the overall browser connection limits may result in this solution being slower. You should be sure to measure your actual performance across targeted browsers both before and after this change.</source>
          <target state="translated">응용 프로그램의 자산로드 성능이 향상 될 수 있습니다. 추가 연결 오버 헤드 (DNS, SSL)와 전체 브라우저 연결 제한을 결합하면이 솔루션의 속도가 느려질 수도 있습니다. 이 변경 전후에 대상 브라우저에서 실제 성능을 측정해야합니다.</target>
        </trans-unit>
        <trans-unit id="4d53060fb7ecfbbff34f7a46fa98244119187194" translate="yes" xml:space="preserve">
          <source>This may work fine in some languages. However, &lt;em&gt;in Ruby &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; match the &lt;strong&gt;line&lt;/strong&gt; beginning and line end&lt;/em&gt;. And thus a URL like this passes the filter without problems:</source>
          <target state="translated">일부 언어에서는 제대로 작동 할 수 있습니다. 그러나 &lt;em&gt;Ruby에서 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;$&lt;/code&gt; 는 &lt;strong&gt;줄&lt;/strong&gt; 시작 및 줄 끝과 일치합니다&lt;/em&gt; . 따라서 다음과 같은 URL은 문제없이 필터를 통과합니다.</target>
        </trans-unit>
        <trans-unit id="32d6c438d08b83b4159c8193fff3cd5013e7732c" translate="yes" xml:space="preserve">
          <source>This may work fine in some languages. However, &lt;em&gt;in Ruby ^ and $ match the &lt;strong&gt;line&lt;/strong&gt; beginning and line end&lt;/em&gt;. And thus a URL like this passes the filter without problems:</source>
          <target state="translated">일부 언어에서는 제대로 작동 할 수 있습니다. 그러나 &lt;em&gt;Ruby에서 ^와 $는 &lt;strong&gt;줄&lt;/strong&gt; 시작과 줄 끝과 일치합니다&lt;/em&gt; . 따라서 이와 같은 URL은 문제없이 필터를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="2b8d7be15b0899eedd7a1e6c90bbd24c8b8b8fb3" translate="yes" xml:space="preserve">
          <source>This means it can be used in association definitions:</source>
          <target state="translated">이것은 연관 정의에 사용될 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="68b1d1ba6366f943b4492d30914613515d105920" translate="yes" xml:space="preserve">
          <source>This means that all behavior added to Vehicle is available for Car too, as associations, public methods, etc.</source>
          <target state="translated">즉, Vehicle에 추가 된 모든 동작은 Association, public method 등으로 Car에서도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ef5441a46d6ca86c47c8a760c64e494e2e4803e" translate="yes" xml:space="preserve">
          <source>This means that any field with an error ends up with a 2 pixel red border.</source>
          <target state="translated">이것은 오류가있는 필드가 2 픽셀의 빨간색 테두리로 끝나는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="561c2a96d25e2de371013f24d3520fd51f189c4a" translate="yes" xml:space="preserve">
          <source>This means that if your application used to have its own streaming module, the following code would break in production mode:</source>
          <target state="translated">이는 애플리케이션에 자체 스트리밍 모듈이있는 경우 다음 코드가 프로덕션 모드에서 중단됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="c40e104119aa21f4440503e37d7ed17965c28356" translate="yes" xml:space="preserve">
          <source>This means that if your application used to have its own streaming module, the following code would break in production:</source>
          <target state="translated">즉, 응용 프로그램에 자체 스트리밍 모듈이있는 경우 다음 코드가 프로덕션에서 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="5bdd437fb4bc86a7944c33d8eb8128f32dd7274b" translate="yes" xml:space="preserve">
          <source>This means that the cache middleware will store off the &lt;code&gt;Last-Modified&lt;/code&gt; value for a URL in the Rails cache, and add an &lt;code&gt;If-Modified-Since&lt;/code&gt; header to any subsequent inbound requests for the same URL.</source>
          <target state="translated">이는 캐시 미들웨어가 Rails 캐시에서 URL 의 &lt;code&gt;Last-Modified&lt;/code&gt; 값을 저장 하고 동일한 URL에 대한 후속 인바운드 요청에 &lt;code&gt;If-Modified-Since&lt;/code&gt; 헤더를 추가 함을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="6dd0a8dc082efe987cb2d25ffe1482a661216e84" translate="yes" xml:space="preserve">
          <source>This means that your functional and integration tests that use</source>
          <target state="translated">이는 다음을 사용하는 기능 및 통합 테스트를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0d69c41c544d5ded04374c5ca1ddfe8bb77f877b" translate="yes" xml:space="preserve">
          <source>This means that, if you have &lt;code&gt;yield :title&lt;/code&gt; in your layout and you want to use streaming, you would have to render the whole template (and eventually trigger all queries) before streaming the title and all assets, which kills the purpose of streaming. For this purpose, you can use a helper called &lt;code&gt;provide&lt;/code&gt; that does the same as &lt;code&gt;content_for&lt;/code&gt; but tells the layout to stop searching for other entries and continue rendering.</source>
          <target state="translated">즉, 레이아웃에 &lt;code&gt;yield :title&lt;/code&gt; 이 있고 스트리밍을 사용하려면 제목과 모든 자산을 스트리밍하기 전에 전체 템플릿을 렌더링하고 결국 모든 쿼리를 트리거해야하므로 스트리밍의 목적이 사라집니다. 이를 위해, &lt;code&gt;content_for&lt;/code&gt; 와 동일 하지만 다른 항목에 대한 검색을 중지하고 렌더링을 계속하도록 레이아웃에 지시하는 &lt;code&gt;provide&lt;/code&gt; 라는 도우미를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30566771d7cc580ce3d944941f573990a00f44b5" translate="yes" xml:space="preserve">
          <source>This means that, if your application currently relies on instance variables set in the template to be used in the layout, they won't work once you move to streaming. The proper way to communicate between layout and template, regardless of whether you use streaming or not, is by using &lt;code&gt;content_for&lt;/code&gt;, &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">즉, 애플리케이션에서 현재 템플릿에 설정된 인스턴스 변수를 사용하여 레이아웃에 사용하는 경우 스트리밍으로 이동하면 작동하지 않습니다. 스트리밍 사용 여부에 관계없이 레이아웃과 템플릿간에 통신하는 올바른 방법은 &lt;code&gt;content_for&lt;/code&gt; , &lt;code&gt;provide&lt;/code&gt; 및 &lt;code&gt;yield&lt;/code&gt; 를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="4d07685c8402f9477348d5e625d1a0696b531889" translate="yes" xml:space="preserve">
          <source>This means that, on &lt;code&gt;MySQL&lt;/code&gt;, you shouldn't execute DDL operations inside a &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;&lt;code&gt;transaction&lt;/code&gt;&lt;/a&gt; call that you know might create a savepoint. Otherwise, &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;&lt;code&gt;transaction&lt;/code&gt;&lt;/a&gt; will raise exceptions when it tries to release the already-automatically-released savepoints:</source>
          <target state="translated">즉, &lt;code&gt;MySQL&lt;/code&gt; 에서 저장 점을 생성 할 수 있는 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt; &lt;code&gt;transaction&lt;/code&gt; &lt;/a&gt; 호출 내에서 DDL 작업을 실행해서는 안됩니다 . 그렇지 않으면 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt; &lt;code&gt;transaction&lt;/code&gt; &lt;/a&gt; 이 이미 자동으로 해제 된 저장 점을 해제하려고 할 때 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="64488eace3ccd3e2554936646679ca9ab5fca0f1" translate="yes" xml:space="preserve">
          <source>This means that, on MySQL, you shouldn't execute DDL operations inside a &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; call that you know might create a savepoint. Otherwise, &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; will raise exceptions when it tries to release the already-automatically-released savepoints:</source>
          <target state="translated">즉, MySQL에서는 저장 점을 생성 할 수 있는 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;트랜잭션&lt;/a&gt; 호출 내에서 DDL 작업을 실행하지 않아야합니다 . 그렇지 않으면 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;트랜잭션&lt;/a&gt; 이 이미 자동으로 릴리스 된 저장 점을 해제하려고 할 때 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8b3a3ef7a49d78168be8db72b13fa7dcda38a9ec" translate="yes" xml:space="preserve">
          <source>This means the methods &lt;code&gt;sanitize&lt;/code&gt;, &lt;code&gt;sanitize_css&lt;/code&gt;, &lt;code&gt;strip_tags&lt;/code&gt; and &lt;code&gt;strip_links&lt;/code&gt; are backed by a new implementation.</source>
          <target state="translated">이는 &lt;code&gt;sanitize&lt;/code&gt; , &lt;code&gt;sanitize_css&lt;/code&gt; , &lt;code&gt;strip_tags&lt;/code&gt; 및 &lt;code&gt;strip_links&lt;/code&gt; 메소드 가 새로운 구현에 의해 지원됨을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="9389cdff0ab192e91d33a4ba04dc29b765723d18" translate="yes" xml:space="preserve">
          <source>This means, that in the &lt;code&gt;:en&lt;/code&gt; locale, the key &lt;em&gt;hello&lt;/em&gt; will map to the &lt;em&gt;Hello world&lt;/em&gt; string. Every string inside Rails is internationalized in this way, see for instance Active Model validation messages in the &lt;a href=&quot;https://github.com/rails/rails/blob/master/activemodel/lib/active_model/locale/en.yml&quot;&gt;&lt;code&gt;activemodel/lib/active_model/locale/en.yml&lt;/code&gt;&lt;/a&gt; file or time and date formats in the &lt;a href=&quot;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/locale/en.yml&quot;&gt;&lt;code&gt;activesupport/lib/active_support/locale/en.yml&lt;/code&gt;&lt;/a&gt; file. You can use YAML or standard Ruby Hashes to store translations in the default (Simple) backend.</source>
          <target state="translated">이것은 &lt;code&gt;:en&lt;/code&gt; 로케일에서 &lt;em&gt;hello&lt;/em&gt; 키 가 &lt;em&gt;Hello world&lt;/em&gt; 문자열에 맵핑 됨을 의미 합니다. Rails 내부의 모든 문자열은 이러한 방식으로 국제화됩니다. 예를 들어 &lt;a href=&quot;https://github.com/rails/rails/blob/master/activemodel/lib/active_model/locale/en.yml&quot;&gt; &lt;code&gt;activemodel/lib/active_model/locale/en.yml&lt;/code&gt; &lt;/a&gt; 파일의 활성 모델 유효성 검사 메시지 또는 &lt;a href=&quot;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/locale/en.yml&quot;&gt; &lt;code&gt;activesupport/lib/active_support/locale/en.yml&lt;/code&gt; &lt;/a&gt; 파일의 시간 및 날짜 형식을 참조 하십시오. . YAML 또는 표준 Ruby Hashes를 사용하여 기본 (간단한) 백엔드로 번역을 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a50c2e300e52fe73c69e4357cb7f563efee5bed" translate="yes" xml:space="preserve">
          <source>This method accepts &lt;strong&gt;no&lt;/strong&gt; arguments.</source>
          <target state="translated">이 메소드는 인수를 허용 &lt;strong&gt;하지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="e718caaf8ce3ba1a88dd3cf0023bccc6b26d2b8c" translate="yes" xml:space="preserve">
          <source>This method accepts a block, which is passed down to &lt;a href=&quot;relation#method-i-create&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/a&gt;. The last example above can be alternatively written this way:</source>
          <target state="translated">이 메서드는을 &lt;a href=&quot;relation#method-i-create&quot;&gt; &lt;code&gt;create&lt;/code&gt; &lt;/a&gt; 전달되는 블록을받습니다 . 위의 마지막 예는 다음과 같이 다르게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="990a29e49dfbf85694809673700e7e888fa73b40" translate="yes" xml:space="preserve">
          <source>This method accepts a block, which is passed down to &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt;. The last example above can be alternatively written this way:</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt; 로 전달되는 블록을 승인합니다 . 위의 마지막 예는 다음과 같이 작성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e3a23d8239c4d27ea6987fe5225081e48e27730" translate="yes" xml:space="preserve">
          <source>This method accepts any of the following day symbols: :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday</source>
          <target state="translated">이 방법은 다음 요일 기호 중 하나를 허용합니다. : monday, : tuesday, : wednesday, : thusday, : friday, : saturday, : sunday</target>
        </trans-unit>
        <trans-unit id="f0396aeacdc2ea90763adb8e1466a2c5c7182ffa" translate="yes" xml:space="preserve">
          <source>This method accepts any of the following:</source>
          <target state="translated">이 방법은 다음 중 하나를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="6f63e92a7504413095ca51e07b7c2d9a816841aa" translate="yes" xml:space="preserve">
          <source>This method accepts both a single key and an array of keys.</source>
          <target state="translated">이 방법은 단일 키와 키 배열을 모두 허용합니다.</target>
        </trans-unit>
        <trans-unit id="0a9e49d197244769492bd5dd28fcd7d2154b0757" translate="yes" xml:space="preserve">
          <source>This method accepts three options:</source>
          <target state="translated">이 방법에는 세 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1f29ac913d3edc83bf4f664ac59234555878132" translate="yes" xml:space="preserve">
          <source>This method also accepts a block, which brings the stubs back at the end of the block:</source>
          <target state="translated">이 메서드는 또한 블록을 받아 블록의 끝에서 스텁을 다시 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="49398d4997d7146a74d4b5b11f9cd1a91e280bf1" translate="yes" xml:space="preserve">
          <source>This method also accepts a block, which will return the current time back to its original state at the end of the block:</source>
          <target state="translated">이 방법은 또한 블록을 받아 들여 현재 시간을 블록 끝에서 원래 상태로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="9113793c4f80a41633eb596a1bf294057e3b6002" translate="yes" xml:space="preserve">
          <source>This method also accepts a block. All queries inside the block will not use the previously set scopes.</source>
          <target state="translated">이 방법은 또한 블록을 받아들입니다. 블록 내의 모든 쿼리는 이전에 설정된 범위를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a44ede58b45f5b66d134c4ffd92e4f37c5f79ae" translate="yes" xml:space="preserve">
          <source>This method also supports filtering. If the &lt;code&gt;:only&lt;/code&gt; option is specified, then only the listed job(s) will be performed.</source>
          <target state="translated">이 방법은 필터링도 지원합니다. 는 IF &lt;code&gt;:only&lt;/code&gt; 옵션을 지정, 만 나열된 작업 (들)이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="957d919bd7775b422cbfd87a80daa9765e349b81" translate="yes" xml:space="preserve">
          <source>This method also takes a block, expected to return a string:</source>
          <target state="translated">이 메소드는 또한 블록을 가져 와서 문자열을 리턴 할 것으로 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="c3f998554191e12f3faa53f79526b60263d4b5de" translate="yes" xml:space="preserve">
          <source>This method also takes a block:</source>
          <target state="translated">이 방법은 또한 블록을 사용합니다 :</target>
        </trans-unit>
        <trans-unit id="0ba7f40cc956a6840df98c4c9aa34182eeaf29be" translate="yes" xml:space="preserve">
          <source>This method always returns a record, but if creation was attempted and failed due to validation errors it won't be persisted, you get what &lt;a href=&quot;relation#method-i-create&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/a&gt; returns in such situation.</source>
          <target state="translated">이 메서드는 항상 레코드를 반환하지만 유효성 검사 오류로 인해 생성이 시도되고 실패한 경우 지속되지 않을 경우 이러한 상황에서 &lt;a href=&quot;relation#method-i-create&quot;&gt; &lt;code&gt;create&lt;/code&gt; &lt;/a&gt; 결과 를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9bb6ebbd17dbb44aadc1d74a24b29c946e864bbe" translate="yes" xml:space="preserve">
          <source>This method always returns a record, but if creation was attempted and failed due to validation errors it won't be persisted, you get what &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt; returns in such situation.</source>
          <target state="translated">이 메소드는 항상 레코드를 리턴하지만 유효성 검증 오류로 인해 작성이 시도되고 실패한 경우 지속되지 않으며 그러한 상황에서 &lt;a href=&quot;relation#method-i-create&quot;&gt;작성&lt;/a&gt; 리턴 을 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="9e5b0b8d509f4f4bdf772cef122c5d6c897f037c" translate="yes" xml:space="preserve">
          <source>This method assumes an &lt;code&gt;ApplicationController&lt;/code&gt; exists, and it extends &lt;code&gt;ActionController::Base&lt;/code&gt;</source>
          <target state="translated">이 메소드는 &lt;code&gt;ApplicationController&lt;/code&gt; 가 존재 한다고 가정하고 &lt;code&gt;ActionController::Base&lt;/code&gt; 확장합니다.</target>
        </trans-unit>
        <trans-unit id="6ef88032bc400f9e0ada77d7fd319a7975c9a6d7" translate="yes" xml:space="preserve">
          <source>This method can also take a block:</source>
          <target state="translated">이 방법은 또한 차단할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="89f92c11f8324dc471aa79968e8746f7a5e1cd59" translate="yes" xml:space="preserve">
          <source>This method can be passed attribute names and an optional time argument. If attribute names are passed, they are updated along with updated_at/on attributes. If no time argument is passed, the current time is used as default.</source>
          <target state="translated">이 메소드에는 속성 이름과 선택적 시간 인수가 전달 될 수 있습니다. 속성 이름이 전달되면 updated_at / on 속성과 함께 업데이트됩니다. 시간 인수가 전달되지 않으면 현재 시간이 기본값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6499b8e751f23856a450d902a41df767b787e207" translate="yes" xml:space="preserve">
          <source>This method creates a trap for &lt;code&gt;INT&lt;/code&gt; signals, so if you &lt;code&gt;CTRL-C&lt;/code&gt; the server, it will exit the process. As we can see from the code here, it will create the &lt;code&gt;tmp/cache&lt;/code&gt;, &lt;code&gt;tmp/pids&lt;/code&gt;, and &lt;code&gt;tmp/sockets&lt;/code&gt; directories. It then enables caching in development if &lt;code&gt;bin/rails server&lt;/code&gt; is called with &lt;code&gt;--dev-caching&lt;/code&gt;. Finally, it calls &lt;code&gt;wrapped_app&lt;/code&gt; which is responsible for creating the Rack app, before creating and assigning an instance of &lt;code&gt;ActiveSupport::Logger&lt;/code&gt;.</source>
          <target state="translated">이 방법은 &lt;code&gt;INT&lt;/code&gt; 신호에 대한 트랩을 생성 하므로 서버 를 &lt;code&gt;CTRL-C&lt;/code&gt; 하면 프로세스가 종료됩니다. 여기 코드에서 볼 수 있듯이 &lt;code&gt;tmp/cache&lt;/code&gt; , &lt;code&gt;tmp/pids&lt;/code&gt; 및 &lt;code&gt;tmp/sockets&lt;/code&gt; 디렉토리를 생성합니다. 그런 다음 &lt;code&gt;bin/rails server&lt;/code&gt; 가 &lt;code&gt;--dev-caching&lt;/code&gt; 으로 호출 되면 개발에서 캐싱을 활성화 합니다 . 마지막으로 &lt;code&gt;ActiveSupport::Logger&lt;/code&gt; 인스턴스를 생성 및 할당하기 전에 Rack 앱 생성을 담당하는 &lt;code&gt;wrapped_app&lt;/code&gt; 된 앱을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="49ca9ed34c06aaa9bd7afd4954f59db9b8949081" translate="yes" xml:space="preserve">
          <source>This method does not provide the same protection as a readonly user and is meant to be a safeguard against accidental writes.</source>
          <target state="translated">이 방법은 읽기 전용 사용자와 동일한 보호 기능을 제공하지 않으며 실수로 인한 쓰기를 방지하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="793c125ffa75c4e65b2043f2e0d8283612bd8dc8" translate="yes" xml:space="preserve">
          <source>This method enables you to use the flash as a central messaging system in your app. When you need to pass an object to the next action, you use the standard flash assign (&lt;code&gt;[]=&lt;/code&gt;). When you need to pass an object to the current action, you use &lt;code&gt;now&lt;/code&gt;, and your object will vanish when the current action is done.</source>
          <target state="translated">이 방법을 사용하면 앱에서 플래시를 중앙 메시징 시스템으로 사용할 수 있습니다. 객체를 다음 동작으로 전달해야 할 때는 표준 플래시 할당 ( &lt;code&gt;[]=&lt;/code&gt; )을 사용하십시오. 객체를 현재 액션으로 전달해야하는 경우 &lt;code&gt;now&lt;/code&gt; 를 사용 하면 현재 액션이 완료되면 객체가 사라집니다.</target>
        </trans-unit>
        <trans-unit id="dcd8de23f881e1252dc585b3ca49217da91ca185" translate="yes" xml:space="preserve">
          <source>This method escapes whatever is needed, both for the key and the value:</source>
          <target state="translated">이 방법은 키와 값 모두에 필요한 것을 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="8a09358115f3d10c59be2557dc4838d6a74ffcdd" translate="yes" xml:space="preserve">
          <source>This method exists to avoid the expensive primary_key check internally, without breaking compatibility with the &lt;a href=&quot;read#method-i-read_attribute&quot;&gt;#read_attribute&lt;/a&gt; API</source>
          <target state="translated">이 방법은 &lt;a href=&quot;read#method-i-read_attribute&quot;&gt;#read_attribute&lt;/a&gt; API 와의 호환성을 유지하면서 고가의 primary_key 검사를 내부적으로 피하기 위해 존재합니다</target>
        </trans-unit>
        <trans-unit id="295068fcbef1c156fcafe570aec4408fbc49cd47" translate="yes" xml:space="preserve">
          <source>This method exists to avoid the expensive primary_key check internally, without breaking compatibility with the &lt;a href=&quot;read#method-i-read_attribute&quot;&gt;&lt;code&gt;read_attribute&lt;/code&gt;&lt;/a&gt; API</source>
          <target state="translated">이 메서드는 &lt;a href=&quot;read#method-i-read_attribute&quot;&gt; &lt;code&gt;read_attribute&lt;/code&gt; &lt;/a&gt; API 와의 호환성을 깨지 않고 내부적으로 값 비싼 primary_key 검사를 방지하기 위해 존재합니다.</target>
        </trans-unit>
        <trans-unit id="2ce4a391f95da2c1e472e9aa40a0b8600b91a886" translate="yes" xml:space="preserve">
          <source>This method finds the record by its primary key (which could be assigned manually) and modifies the receiver in-place:</source>
          <target state="translated">이 방법은 기본 키 (수동으로 할당 할 수 있음)로 레코드를 찾고 수신자를 제자리에서 수정합니다.</target>
        </trans-unit>
        <trans-unit id="07e79194b52609009f26c7e11a844b7027adf982" translate="yes" xml:space="preserve">
          <source>This method first computes the destination date passing &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, and &lt;code&gt;:days&lt;/code&gt; to &lt;code&gt;Date#advance&lt;/code&gt; documented above. After that, it adjusts the time calling &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-since&quot;&gt;&lt;code&gt;since&lt;/code&gt;&lt;/a&gt; with the number of seconds to advance. This order is relevant, a different ordering would give different datetimes in some edge-cases. The example in &lt;code&gt;Date#advance&lt;/code&gt; applies, and we can extend it to show order relevance related to the time bits.</source>
          <target state="translated">이 메서드는 먼저 위에 설명 된 &lt;code&gt;Date#advance&lt;/code&gt; 에서 &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; 및 &lt;code&gt;:days&lt;/code&gt; 를 전달하는 대상 날짜를 계산합니다 . 그 후 진행 시간 (초)으로 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-since&quot;&gt; &lt;code&gt;since&lt;/code&gt; &lt;/a&gt; 호출 시간을 조정합니다 . 이 순서는 관련이 있으며 다른 순서는 일부 에지 케이스에서 다른 날짜 시간을 제공합니다. &lt;code&gt;Date#advance&lt;/code&gt; 의 예가 적용되며 시간 비트와 관련된 순서 관련성을 표시하도록 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17fdcafd122d296c493d784129a615dd86e51a21" translate="yes" xml:space="preserve">
          <source>This method first computes the destination date passing &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, and &lt;code&gt;:days&lt;/code&gt; to &lt;code&gt;Date#advance&lt;/code&gt; documented above. After that, it adjusts the time calling &lt;code&gt;since&lt;/code&gt; with the number of seconds to advance. This order is relevant, a different ordering would give different datetimes in some edge-cases. The example in &lt;code&gt;Date#advance&lt;/code&gt; applies, and we can extend it to show order relevance related to the time bits.</source>
          <target state="translated">이 방법은 먼저 &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; 및 &lt;code&gt;:days&lt;/code&gt; 를 위에서 설명한 &lt;code&gt;Date#advance&lt;/code&gt; 로 전달하는 대상 날짜를 계산합니다 . 그 후,이 호출 시간 조정 &lt;code&gt;since&lt;/code&gt; 사전에 초 단위로합니다. 이 순서는 관련이 있으며, 다른 순서는 일부 엣지 케이스에서 다른 날짜 시간을 제공합니다. &lt;code&gt;Date#advance&lt;/code&gt; 의 예가 적용되며 시간 비트와 관련된 순서 관련성을 표시하도록 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7b9ab33ec418700f15d67ca9b49e97cbf40c15a" translate="yes" xml:space="preserve">
          <source>This method has the same semantics of &lt;code&gt;update&lt;/code&gt;, except it does not modify the receiver but rather returns a new hash with indifferent access with the result of the merge.</source>
          <target state="translated">이 메소드는 수신자를 수정하지 않고 병합 결과와 무관하게 액세스하는 새 해시를 반환한다는 점을 제외하고 는 &lt;code&gt;update&lt;/code&gt; 의 의미가 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="ea9df9a3e2a988d68e7ebf054d8a27879d6d1a07" translate="yes" xml:space="preserve">
          <source>This method is I18n aware, so you can set up custom approximations for a locale. This can be useful, for example, to transliterate German's &amp;ldquo;&amp;uuml;&amp;rdquo; and &amp;ldquo;&amp;ouml;&amp;rdquo; to &amp;ldquo;ue&amp;rdquo; and &amp;ldquo;oe&amp;rdquo;, or to add support for transliterating Russian to ASCII.</source>
          <target state="translated">이 방법은 I18n을 인식하므로 로캘에 대한 사용자 지정 근사값을 설정할 수 있습니다. 예를 들어 독일어의 &quot;&amp;uuml;&quot;및 &quot;&amp;ouml;&quot;를 &quot;ue&quot;및 &quot;oe&quot;로 음역하거나 러시아어를 ASCII로 음역하는 데 대한 지원을 추가하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94ef3129cb2c2ade866e1ef7b0770f8723786088" translate="yes" xml:space="preserve">
          <source>This method is a shortcut to all default validators and any custom validator classes ending in 'Validator'. Note that Rails default validators can be overridden inside specific classes by creating custom validator classes in their place such as PresenceValidator.</source>
          <target state="translated">이 메소드는 모든 기본 유효성 검증기와 'Validator'로 끝나는 사용자 정의 유효성 검증기 클래스에 대한 바로 가기입니다. PresenceValidator와 같은 위치에 사용자 지정 유효성 검사기 클래스를 만들어 특정 클래스 내에서 Rails 기본 유효성 검사기를 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="358d1b206c0fab50e9c776b6e23c2da20d6293e5" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;collection.concat&lt;/code&gt; and &lt;code&gt;collection.push&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;collection.concat&lt;/code&gt; 및 &lt;code&gt;collection.push&lt;/code&gt; 로 별명 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="b69e332abfa784b22407063fd6f9a3b21fe950b7" translate="yes" xml:space="preserve">
          <source>This method is aliased to &lt;code&gt;to_s&lt;/code&gt;.</source>
          <target state="translated">이 메소드의 이름은 &lt;code&gt;to_s&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e44c4b5b02107e7a6a5f4290c1c70034181c5504" translate="yes" xml:space="preserve">
          <source>This method is also aliased as &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-getutc&quot;&gt;&lt;code&gt;getutc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메서드는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-getutc&quot;&gt; &lt;code&gt;getutc&lt;/code&gt; 로&lt;/a&gt; 별칭도 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="79238276df741c9642608968ce900140be9fab9a" translate="yes" xml:space="preserve">
          <source>This method is also aliased as &lt;code&gt;getutc&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;getutc&lt;/code&gt; 로 별명 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd68b2b34136cbfd2ac2e50ac3c1ec2c81876180" translate="yes" xml:space="preserve">
          <source>This method is also aliased as &lt;code&gt;to_param&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;to_param&lt;/code&gt; 로 별명 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="14e442034aa8b8782fea4c4a1a220d5805afb6dc" translate="yes" xml:space="preserve">
          <source>This method is automatically called for a blob when it's attached for the first time. You can call it to analyze a blob again (e.g. if you add a new analyzer or modify an existing one).</source>
          <target state="translated">이 메소드는 처음 첨부 될 때 자동으로 블롭을 호출합니다. 블롭을 다시 분석하기 위해 호출 할 수 있습니다 (예 : 새 분석기를 추가하거나 기존 분석기를 수정하는 경우).</target>
        </trans-unit>
        <trans-unit id="5a31c0a8e8d85adc0dd81c1e9ce90b3ead125291" translate="yes" xml:space="preserve">
          <source>This method is called after subscription has been added to the connection and confirms or rejects the subscription.</source>
          <target state="translated">이 메소드는 구독이 연결에 추가 된 후 호출되며 구독을 확인하거나 거부합니다.</target>
        </trans-unit>
        <trans-unit id="02c095641d1fcbf07c9da55ce3f958f9ef743e66" translate="yes" xml:space="preserve">
          <source>This method is defined to be able to write</source>
          <target state="translated">이 방법은 쓸 수 있도록 정의되어 있습니다</target>
        </trans-unit>
        <trans-unit id="5a43b9eab0b21223ab37dc3e74cfae1ad17ddf25" translate="yes" xml:space="preserve">
          <source>This method is instrumented as &amp;ldquo;!render_template.action_view&amp;rdquo;. Notice that we use a bang in this instrumentation because you don't want to consume this in production. This is only slow if it's being listened to.</source>
          <target state="translated">이 방법은&amp;ldquo;! render_template.action_view&amp;rdquo;로 계측됩니다. 프로덕션 환경에서 소비하고 싶지 않기 때문에이 계측에서는 뱅을 사용합니다. 듣고있는 경우에만 느립니다.</target>
        </trans-unit>
        <trans-unit id="2aa4291b05902cdaee1873fd2c5e3adfb853f3b9" translate="yes" xml:space="preserve">
          <source>This method is invoked when a log event occurs</source>
          <target state="translated">이 이벤트는 로그 이벤트가 발생할 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="cec76b3d0537cb8421990ce1470964e0b635ddbf" translate="yes" xml:space="preserve">
          <source>This method is not tolerant to non-existing dates, if the change is invalid &lt;code&gt;ArgumentError&lt;/code&gt; is raised:</source>
          <target state="translated">변경이 유효하지 않은 경우이 메소드는 존재하지 않는 날짜를 허용하지 않습니다. &lt;code&gt;ArgumentError&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4893b4cc7c9973033ec43f501db42e9692a06713" translate="yes" xml:space="preserve">
          <source>This method is only useful &lt;em&gt;after&lt;/em&gt; validations have been run, because it only inspects the errors collection and does not trigger validations itself. It's different from the &lt;code&gt;ActiveRecord::Base#invalid?&lt;/code&gt; method explained above because it doesn't verify the validity of the object as a whole. It only checks to see whether there are errors found on an individual attribute of the object.</source>
          <target state="translated">이 방법은 오류 수집 만 검사하고 유효성 검사 자체를 트리거하지 않기 때문에 유효성 검사가 실행 된 &lt;em&gt;후에&lt;/em&gt; 만 유용 합니다. &lt;code&gt;ActiveRecord::Base#invalid?&lt;/code&gt; 와 다릅니다 . 객체의 유효성을 전체적으로 검증하지 않기 때문에 위에서 설명한 방법. 객체의 개별 속성에 오류가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e3905cdb6dc11d3e35b1d1d62c9a39b48c35d4cb" translate="yes" xml:space="preserve">
          <source>This method is opposite of register method.</source>
          <target state="translated">이 방법은 레지스터 방법과 반대입니다.</target>
        </trans-unit>
        <trans-unit id="9758645bd22f929081aa8a8b6742e9cd715050cb" translate="yes" xml:space="preserve">
          <source>This method is rarely used directly. Use &lt;code&gt;#get&lt;/code&gt;, &lt;code&gt;#post&lt;/code&gt;, or other standard HTTP methods in integration tests. &lt;code&gt;#process&lt;/code&gt; is only required when using a request method that doesn't have a method defined in the integration tests.</source>
          <target state="translated">이 방법은 거의 직접 사용되지 않습니다. 통합 테스트에서 &lt;code&gt;#get&lt;/code&gt; , &lt;code&gt;#post&lt;/code&gt; 또는 기타 표준 HTTP 메소드를 사용하십시오 . &lt;code&gt;#process&lt;/code&gt; 는 통합 테스트에 정의 된 메소드가없는 요청 메소드를 사용할 때만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="2925b9d90887a1a5bd94ae6d12e2180383068708" translate="yes" xml:space="preserve">
          <source>This method is responsible for properly setting the encoding of the source. Until this point, we assume that the source is BINARY data. If no additional information is supplied, we assume the encoding is the same as &lt;code&gt;Encoding.default_external&lt;/code&gt;.</source>
          <target state="translated">이 방법은 소스 인코딩을 올바르게 설정합니다. 이 시점까지는 소스가 BINARY 데이터라고 가정합니다. 추가 정보가 제공되지 않으면 인코딩이 &lt;code&gt;Encoding.default_external&lt;/code&gt; 과 같다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="7edbbc29ebb04a4ee14cd5702cebcf9de1ca9fe4" translate="yes" xml:space="preserve">
          <source>This method is similar in purpose to &lt;code&gt;Kernel#Array&lt;/code&gt;, but there are some differences:</source>
          <target state="translated">이 방법은 &lt;code&gt;Kernel#Array&lt;/code&gt; 와 비슷하지만 약간의 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="72a06f3d0e49559b9fa88d5e815e94c47a978d18" translate="yes" xml:space="preserve">
          <source>This method is similar to Time#localtime, except that it uses &lt;code&gt;Time.zone&lt;/code&gt; as the local zone instead of the operating system's time zone.</source>
          <target state="translated">이 방법은 &lt;code&gt;Time.zone&lt;/code&gt; 과 비슷하지만 운영 체제 표준 시간대 대신 Time.zone 을 로컬 영역으로 사용 한다는 점이 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="d21667b3d4c3cdf9d82503a64c46404c8cd871f0" translate="yes" xml:space="preserve">
          <source>This method is similar to except, but unlike except, it persists across merges:</source>
          <target state="translated">이 방법은 제외와 비슷하지만 병합과는 달리 제외와는 다릅니다.</target>
        </trans-unit>
        <trans-unit id="a0a9b26612f00bffa6781a41652fa600f58d81fa" translate="yes" xml:space="preserve">
          <source>This method is the opposite of add method.</source>
          <target state="translated">이 방법은 add 방법과 반대입니다.</target>
        </trans-unit>
        <trans-unit id="7238d1b830654cc06bf54329d31471832093ced2" translate="yes" xml:space="preserve">
          <source>This method is used primarily for maintaining counter_cache columns that are used to store aggregate values. For example, a &lt;code&gt;DiscussionBoard&lt;/code&gt; may cache posts_count and comments_count to avoid running an SQL query to calculate the number of posts and comments there are, each time it is displayed.</source>
          <target state="translated">이 방법은 주로 집계 값을 저장하는 데 사용되는 counter_cache 열을 유지 관리하는 데 사용됩니다. 예를 들어, &lt;code&gt;DiscussionBoard&lt;/code&gt; 는 게시 될 때마다 게시물 및 댓글 수를 계산하기 위해 SQL 쿼리를 실행하지 않도록 posts_count 및 comments_count를 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bbef1c2971e3e9c707a8b197b8e42d7aebd61c4" translate="yes" xml:space="preserve">
          <source>This method is used to define validations that cannot be corrected by end users and are considered exceptional. So each validator defined with bang or &lt;code&gt;:strict&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt; will always raise &lt;code&gt;ActiveModel::StrictValidationFailed&lt;/code&gt; instead of adding error when validation fails. See &lt;code&gt;validates&lt;/code&gt; for more information about the validation itself.</source>
          <target state="translated">이 방법은 최종 사용자가 수정할 수없고 예외적 인 것으로 간주되는 유효성 검사를 정의하는 데 사용됩니다. 따라서 bang 또는 &lt;code&gt;:strict&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하여 정의 된 각 유효성 검사기 는 유효성 검사가 실패 할 때 오류를 추가하는 대신 항상 &lt;code&gt;ActiveModel::StrictValidationFailed&lt;/code&gt; 를 발생시킵니다. 유효성 검사 자체에 대한 자세한 내용은 &lt;code&gt;validates&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="39d47d922ec1cff5d0dce574be5987f60df5fa0b" translate="yes" xml:space="preserve">
          <source>This method is useful for ensuring that a specific connection is being used. For example, when booting a console in readonly mode.</source>
          <target state="translated">이 방법은 특정 연결이 사용되고 있는지 확인하는 데 유용합니다. 예를 들어, 읽기 전용 모드에서 콘솔을 부팅 할 때.</target>
        </trans-unit>
        <trans-unit id="91c8abc879f54a8f19771378cab83ca529c48d9e" translate="yes" xml:space="preserve">
          <source>This method is useful in after callbacks to determine if an attribute was changed during the save that triggered the callbacks to run. It can be invoked as &lt;code&gt;saved_change_to_name?&lt;/code&gt; instead of &lt;code&gt;saved_change_to_attribute?(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 콜백 실행 후 콜백을 트리거 한 저장 중 속성이 변경되었는지 판별하기 위해 콜백 이후에 유용합니다. &lt;code&gt;saved_change_to_name?&lt;/code&gt; 으로 호출 할 수 있습니까? &lt;code&gt;saved_change_to_attribute?(&quot;name&quot;)&lt;/code&gt; 대신에 .</target>
        </trans-unit>
        <trans-unit id="efd57c805dc453ca877d929ae0e168a6ce0ca705" translate="yes" xml:space="preserve">
          <source>This method is useful in after callbacks to get the original value of an attribute before the save that triggered the callbacks to run. It can be invoked as &lt;code&gt;name_before_last_save&lt;/code&gt; instead of &lt;code&gt;attribute_before_last_save(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 콜백 후 트리거를 실행 한 저장 전에 콜백 후 속성의 원래 값을 가져 오는 데 유용합니다. &lt;code&gt;attribute_before_last_save(&quot;name&quot;)&lt;/code&gt; 대신 &lt;code&gt;name_before_last_save&lt;/code&gt; 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="792859b798f7ac4d47b4904f6506da08852d09c0" translate="yes" xml:space="preserve">
          <source>This method is useful in after callbacks, to see the change in an attribute during the save that triggered the callbacks to run. It can be invoked as &lt;code&gt;saved_change_to_name&lt;/code&gt; instead of &lt;code&gt;saved_change_to_attribute(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 콜백 실행 후 콜백을 트리거 한 저장 중 속성의 변경 사항을 확인하기 위해 콜백 후에 유용합니다. &lt;code&gt;saved_change_to_attribute(&quot;name&quot;)&lt;/code&gt; 대신 &lt;code&gt;saved_change_to_name&lt;/code&gt; 으로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="62be837069cecd976797ac900bad3f7ea532bad6" translate="yes" xml:space="preserve">
          <source>This method is useful in validations and before callbacks to determine if the next call to &lt;code&gt;save&lt;/code&gt; will change a particular attribute. It can be invoked as &lt;code&gt;will_save_change_to_name?&lt;/code&gt; instead of &lt;code&gt;will_save_change_to_attribute(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 유효성 검사 및 콜백 이전에 다음에 &lt;code&gt;save&lt;/code&gt; 호출 이 특정 속성을 변경 할지 여부를 결정하는 데 유용 합니다. &lt;code&gt;will_save_change_to_name?&lt;/code&gt; 으로 호출 할 수 있습니까? &lt;code&gt;will_save_change_to_attribute(&quot;name&quot;)&lt;/code&gt; 대신에 .</target>
        </trans-unit>
        <trans-unit id="ee1291cf2a26d416b41ea98705253539dcd563eb" translate="yes" xml:space="preserve">
          <source>This method is useful in validations and before callbacks to determine if the next call to &lt;code&gt;save&lt;/code&gt; will change a particular attribute. It can be invoked as &lt;code&gt;will_save_change_to_name?&lt;/code&gt; instead of &lt;code&gt;will_save_change_to_attribute?(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 메서드는 다음 &lt;code&gt;save&lt;/code&gt; 호출 이 특정 속성을 변경 하는지 확인하기위한 유효성 검사 및 콜백 이전에 유용 합니다. &lt;code&gt;will_save_change_to_name?&lt;/code&gt; 으로 호출 할 수 있습니다 . &lt;code&gt;will_save_change_to_attribute?(&quot;name&quot;)&lt;/code&gt; 대신 .</target>
        </trans-unit>
        <trans-unit id="6e6c4c33319b7ee32eafeffc5d8cc5dfd0c1fed3" translate="yes" xml:space="preserve">
          <source>This method is useful in validations and before callbacks, to see the change to an attribute that will occur when the record is saved. It can be invoked as &lt;code&gt;name_change_to_be_saved&lt;/code&gt; instead of &lt;code&gt;attribute_change_to_be_saved(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 유효성 검사 및 콜백 전에 레코드를 저장할 때 발생하는 속성의 변경을 확인하는 데 유용합니다. &lt;code&gt;attribute_change_to_be_saved(&quot;name&quot;)&lt;/code&gt; 대신 &lt;code&gt;name_change_to_be_saved&lt;/code&gt; 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0acb369e5856d0cd0383b35bb76708d9803df543" translate="yes" xml:space="preserve">
          <source>This method is useful in validations and before callbacks, to see the original value of an attribute prior to any changes about to be saved. It can be invoked as &lt;code&gt;name_in_database&lt;/code&gt; instead of &lt;code&gt;attribute_in_database(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 유효성 검사 및 콜백 이전에 변경 사항을 저장하기 전에 속성의 원래 값을 확인하는 데 유용합니다. &lt;code&gt;attribute_in_database(&quot;name&quot;)&lt;/code&gt; 대신 &lt;code&gt;name_in_database&lt;/code&gt; 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5e3d421d82d6185e6b9c626db00d4c6e0d309543" translate="yes" xml:space="preserve">
          <source>This method may be useful for example to easily accept both symbols and strings as options. For instance &lt;code&gt;ActionController::UrlRewriter&lt;/code&gt; defines</source>
          <target state="translated">이 방법은 예를 들어 기호와 문자열을 모두 옵션으로 쉽게 허용하는 데 유용 할 수 있습니다. 예를 들어 &lt;code&gt;ActionController::UrlRewriter&lt;/code&gt; 는 다음을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="31c0d532106540cabfdfc4b14ed8edb567bc3088" translate="yes" xml:space="preserve">
          <source>This method may be useful for example to easily accept both symbols and strings as options. For instance &lt;code&gt;ActionText::TagHelper&lt;/code&gt; defines</source>
          <target state="translated">이 방법은 예를 들어 기호와 문자열을 옵션으로 쉽게 받아들이는 데 유용 할 수 있습니다. 예를 들어 &lt;code&gt;ActionText::TagHelper&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="914277e3adb518f953eeeb1cf1f83a255a2821da" translate="yes" xml:space="preserve">
          <source>This method may be useful for example to easily accept both symbols and strings as options. For instance &lt;code&gt;ActionView::Helpers::FormHelper&lt;/code&gt; defines:</source>
          <target state="translated">이 방법은 예를 들어 기호와 문자열을 모두 옵션으로 쉽게 허용하는 데 유용 할 수 있습니다. 예를 들어 &lt;code&gt;ActionView::Helpers::FormHelper&lt;/code&gt; 는 다음을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="c8f3641ad3c423ca96eccbadbbba9f99bf9d5b5d" translate="yes" xml:space="preserve">
          <source>This method must also receive a block that will be called once a path changes. The array of files and list of directories cannot be changed after &lt;a href=&quot;fileupdatechecker&quot;&gt;&lt;code&gt;FileUpdateChecker&lt;/code&gt;&lt;/a&gt; has been initialized.</source>
          <target state="translated">이 메서드는 경로가 변경되면 호출 될 블록도 받아야합니다. &lt;a href=&quot;fileupdatechecker&quot;&gt; &lt;code&gt;FileUpdateChecker&lt;/code&gt; &lt;/a&gt; 가 초기화 된 후에는 파일 배열 및 디렉토리 목록을 변경할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0c8ee578ca500f6179c32f3766aecedf81a5095f" translate="yes" xml:space="preserve">
          <source>This method must also receive a block that will be called once a path changes. The array of files and list of directories cannot be changed after &lt;a href=&quot;fileupdatechecker&quot;&gt;FileUpdateChecker&lt;/a&gt; has been initialized.</source>
          <target state="translated">이 메소드는 경로가 변경되면 호출 될 블록을 수신해야합니다. &lt;a href=&quot;fileupdatechecker&quot;&gt;FileUpdateChecker&lt;/a&gt; 가 초기화 된 후에는 파일 배열과 디렉토리 목록을 변경할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c6b3478ea308cc5ecea6556ec6aafbeaa137586e" translate="yes" xml:space="preserve">
          <source>This method needs to create a temporary file. By default it will create it in the same directory as the destination file. If you don't like this behavior you can provide a different directory but it must be on the same physical filesystem as the file you're trying to write.</source>
          <target state="translated">이 방법은 임시 파일을 작성해야합니다. 기본적으로 대상 파일과 동일한 디렉토리에 작성됩니다. 이 동작이 마음에 들지 않으면 다른 디렉토리를 제공 할 수 있지만 작성하려는 파일과 동일한 실제 파일 시스템에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="c8030e460eec15f5b6cb0cce64e1fbcfc8223f72" translate="yes" xml:space="preserve">
          <source>This method only works for connections that have been obtained through &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;&lt;code&gt;connection&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;&lt;code&gt;with_connection&lt;/code&gt;&lt;/a&gt; methods, connections obtained through &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/a&gt; will not be automatically released.</source>
          <target state="translated">이 방법은 &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt; &lt;code&gt;connection&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt; &lt;code&gt;with_connection&lt;/code&gt; &lt;/a&gt; 방법을 통해 얻은 연결에 대해서만 작동하며 &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt; &lt;code&gt;checkout&lt;/code&gt; &lt;/a&gt; 을 통해 얻은 연결 은 자동으로 해제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="64873b3f2ff40c074936e944ee13b3f93127ec92" translate="yes" xml:space="preserve">
          <source>This method only works for connections that have been obtained through &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;&lt;code&gt;connection&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;&lt;code&gt;with_connection&lt;/code&gt;&lt;/a&gt; methods. Connections obtained through &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/a&gt; will not be detected by &lt;a href=&quot;connectionpool#method-i-active_connection-3F&quot;&gt;&lt;code&gt;active_connection?&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">이 메서드는 &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt; &lt;code&gt;connection&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt; &lt;code&gt;with_connection&lt;/code&gt; &lt;/a&gt; 메서드를 통해 얻은 연결에 대해서만 작동 합니다. &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt; &lt;code&gt;checkout&lt;/code&gt; &lt;/a&gt; 을 통해 얻은 연결 은 &lt;a href=&quot;connectionpool#method-i-active_connection-3F&quot;&gt; &lt;code&gt;active_connection?&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be96305885f21a6dcaea96d5e6cdbb478641b0dc" translate="yes" xml:space="preserve">
          <source>This method only works for connections that have been obtained through &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt; or &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt; methods, connections obtained through &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;checkout&lt;/a&gt; will not be automatically released.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt; 또는 &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt; 메소드를 통해 얻은 연결에만 작동하며 , &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;체크 아웃&lt;/a&gt; 을 통해 얻은 연결 은 자동으로 해제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fecd57ae6ea471b95961d7bbf50092f6f908aecd" translate="yes" xml:space="preserve">
          <source>This method only works for connections that have been obtained through &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt; or &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt; methods. Connections obtained through &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;checkout&lt;/a&gt; will not be detected by &lt;a href=&quot;connectionpool#method-i-active_connection-3F&quot;&gt;active_connection?&lt;/a&gt;</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt; 또는 &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt; 메소드를 통해 얻은 연결에만 작동 합니다. &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;체크 아웃&lt;/a&gt; 을 통해 얻은 연결 은 &lt;a href=&quot;connectionpool#method-i-active_connection-3F&quot;&gt;active_connection에&lt;/a&gt; 의해 감지 되지 않습니까?</target>
        </trans-unit>
        <trans-unit id="50465cfe742f7b1908b49c2d57638b135b0b3f17" translate="yes" xml:space="preserve">
          <source>This method outputs without escaping a string. Since escaping tags is now default, this can be used when you don't want Rails to automatically escape tags. This is not recommended if the data is coming from the user's input.</source>
          <target state="translated">이 메소드는 문자열을 이스케이프하지 않고 출력합니다. 이제 이스케이프 태그가 기본값이므로 Rails가 자동으로 태그를 이스케이프하지 않게하려는 경우이 태그를 사용할 수 있습니다. 데이터가 사용자 입력에서 나오는 경우 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c00c6706ad7998af0f428cbbb6e82ce1a6aa567a" translate="yes" xml:space="preserve">
          <source>This method raises &lt;a href=&quot;../unpreviewableerror&quot;&gt;&lt;code&gt;ActiveStorage::UnpreviewableError&lt;/code&gt;&lt;/a&gt; if no previewer accepts the receiving blob. To determine whether a blob is accepted by any previewer, call &lt;a href=&quot;representable#method-i-previewable-3F&quot;&gt;&lt;code&gt;ActiveStorage::Blob#previewable?&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메서드 는 미리보기가 수신 Blob을 수락하지 않으면 &lt;a href=&quot;../unpreviewableerror&quot;&gt; &lt;code&gt;ActiveStorage::UnpreviewableError&lt;/code&gt; &lt;/a&gt; 발생 시킵니다 . &lt;a href=&quot;representable#method-i-previewable-3F&quot;&gt; &lt;code&gt;ActiveStorage::Blob#previewable?&lt;/code&gt; &lt;/a&gt; 허용하는지 확인하려면 ActiveStorage :: Blob # previewable? .</target>
        </trans-unit>
        <trans-unit id="d5af0d23d9a237d3c706e177116e7d324b2e140b" translate="yes" xml:space="preserve">
          <source>This method raises &lt;a href=&quot;../unpreviewableerror&quot;&gt;ActiveStorage::UnpreviewableError&lt;/a&gt; if no previewer accepts the receiving blob. To determine whether a blob is accepted by any previewer, call &lt;a href=&quot;representable#method-i-previewable-3F&quot;&gt;#previewable?&lt;/a&gt;.</source>
          <target state="translated">이 메소드 는 수신 블롭을 허용하는 미리보기가 없으면 &lt;a href=&quot;../unpreviewableerror&quot;&gt;ActiveStorage :: UnpreviewableError를&lt;/a&gt; 발생 시킵니다 . 미리보기에서 Blob을 수락하는지 확인하려면 &lt;a href=&quot;representable#method-i-previewable-3F&quot;&gt;#previewable? &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a402bdc701e2cd0a9a522104c3b34a30cb9ebfc4" translate="yes" xml:space="preserve">
          <source>This method raises an &lt;a href=&quot;activerecorderror&quot;&gt;&lt;code&gt;ActiveRecord::ActiveRecordError&lt;/code&gt;&lt;/a&gt; if the attribute is marked as readonly.</source>
          <target state="translated">이 메서드 는 속성이 읽기 전용으로 표시된 경우 &lt;a href=&quot;activerecorderror&quot;&gt; &lt;code&gt;ActiveRecord::ActiveRecordError&lt;/code&gt; &lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="f0843dff0c5dc22ec2f57ff75f611d8fbfb8d99e" translate="yes" xml:space="preserve">
          <source>This method raises an &lt;a href=&quot;activerecorderror&quot;&gt;&lt;code&gt;ActiveRecord::ActiveRecordError&lt;/code&gt;&lt;/a&gt; when called on new objects, or when at least one of the attributes is marked as readonly.</source>
          <target state="translated">이 메서드 는 새 개체에서 호출되거나 속성 중 하나 이상이 읽기 전용으로 표시 될 때 &lt;a href=&quot;activerecorderror&quot;&gt; &lt;code&gt;ActiveRecord::ActiveRecordError&lt;/code&gt; &lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="638a44b23179629e0cfc048a71803fa8a07a0438" translate="yes" xml:space="preserve">
          <source>This method raises an &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord::ActiveRecordError&lt;/a&gt; if the attribute is marked as readonly.</source>
          <target state="translated">이 메서드 는 특성이 읽기 전용으로 표시되면 &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord :: ActiveRecordError를&lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="8705c381acee7571ff04baf5c4b3125b142419cb" translate="yes" xml:space="preserve">
          <source>This method raises an &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord::ActiveRecordError&lt;/a&gt; when called on new objects, or when at least one of the attributes is marked as readonly.</source>
          <target state="translated">이 메서드 는 새 개체에서 호출되거나 특성 중 하나 이상이 읽기 전용으로 표시 될 때 &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord :: ActiveRecordError를&lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="ebc904cc99f753720f7081ebdbc9072e056bb10d" translate="yes" xml:space="preserve">
          <source>This method receives an arbitrary number of action names, and an optional hash of options as last argument. With the call to &lt;code&gt;extract_options!&lt;/code&gt; you obtain the options hash and remove it from &lt;code&gt;actions&lt;/code&gt; in a simple and explicit way.</source>
          <target state="translated">이 메소드는 임의의 수의 조치 이름과 선택적인 옵션 해시를 마지막 인수로받습니다. &lt;code&gt;extract_options!&lt;/code&gt; 호출하면 ! 옵션 해시를 가져와 간단하고 명시적인 방식으로 &lt;code&gt;actions&lt;/code&gt; 에서 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="4f7c9527a5e9a35217b473bfb238234e6c26c30e" translate="yes" xml:space="preserve">
          <source>This method removes all scoping and will do a normal query on the table.</source>
          <target state="translated">이 방법은 모든 범위를 제거하고 테이블에서 일반 쿼리를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="0279bc230bf5f453a0febf1afd12ffda02315973" translate="yes" xml:space="preserve">
          <source>This method returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;self&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="516998d855fb53d26ea5e611b0355473fabe87f2" translate="yes" xml:space="preserve">
          <source>This method returns an &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Relation.html&quot;&gt;&lt;code&gt;ActiveRecord::Relation&lt;/code&gt;&lt;/a&gt; object, which you can think of as a super-powered array.</source>
          <target state="translated">이 메서드는 강력한 배열로 생각할 수 있는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Relation.html&quot;&gt; &lt;code&gt;ActiveRecord::Relation&lt;/code&gt; &lt;/a&gt; 개체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c158386794267bd016b4cbb7aa01d24445ea74c4" translate="yes" xml:space="preserve">
          <source>This method returns an HTML safe string similar to what &lt;code&gt;Array#join&lt;/code&gt; would return. The array is flattened, and all items, including the supplied separator, are HTML escaped unless they are HTML safe, and the returned string is marked as HTML safe.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Array#join&lt;/code&gt; 이 리턴 하는 것과 유사한 HTML 안전 문자열 을 리턴합니다. 배열이 평평 해지고 제공된 구분 기호를 포함한 모든 항목은 HTML 안전하지 않으면 HTML 이스케이프 처리되며 반환 된 문자열은 HTML 안전으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="278d85abc339d87194acb5d9b4372084721fe58d" translate="yes" xml:space="preserve">
          <source>This method returns the response status, after performing the request. Furthermore, if this method was called from an &lt;a href=&quot;../integrationtest&quot;&gt;&lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;&lt;/a&gt; object, then that object's &lt;code&gt;@response&lt;/code&gt; instance variable will point to a &lt;a href=&quot;../response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object which one can use to inspect the details of the response.</source>
          <target state="translated">이 메서드는 요청을 수행 한 후 응답 상태를 반환합니다. 또한이 메서드가 &lt;a href=&quot;../integrationtest&quot;&gt; &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; &lt;/a&gt; 개체 에서 호출 된 경우 해당 개체의 &lt;code&gt;@response&lt;/code&gt; 인스턴스 변수는 &lt;a href=&quot;../response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 의 세부 정보를 검사하는 데 사용할 수 있는 Response 개체를 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="e1edac73577cc4c6d542d34d226b8093205975ca" translate="yes" xml:space="preserve">
          <source>This method returns the response status, after performing the request. Furthermore, if this method was called from an &lt;a href=&quot;../integrationtest&quot;&gt;ActionDispatch::IntegrationTest&lt;/a&gt; object, then that object's &lt;code&gt;@response&lt;/code&gt; instance variable will point to a &lt;a href=&quot;../response&quot;&gt;Response&lt;/a&gt; object which one can use to inspect the details of the response.</source>
          <target state="translated">이 메소드는 요청을 수행 한 후 응답 상태를 리턴합니다. 또한이 메소드가 &lt;a href=&quot;../integrationtest&quot;&gt;ActionDispatch :: IntegrationTest&lt;/a&gt; 객체 에서 호출 된 경우 해당 객체의 &lt;code&gt;@response&lt;/code&gt; 인스턴스 변수는 &lt;a href=&quot;../response&quot;&gt;응답&lt;/a&gt; 의 세부 정보를 검사하는 데 사용할 수 있는 Response 객체를 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="c0b09fc842518a232ab80cd1e5c59dd846aa511a" translate="yes" xml:space="preserve">
          <source>This method sets a weak ETag validator on the response so browsers and proxies may cache the response, keyed on the ETag. On subsequent requests, the If-None-Match header is set to the cached ETag. If it matches the current ETag, we can return a 304 Not Modified response with no body, letting the browser or proxy know that their cache is current. Big savings in request time and network bandwidth.</source>
          <target state="translated">이 방법은 응답에 약한 ETag 유효성 검사기를 설정하여 브라우저와 프록시가 ETag를 기반으로 응답을 캐시 할 수 있습니다. 후속 요청에서 If-None-Match 헤더는 캐시 된 ETag로 설정됩니다. 현재 ETag와 일치하면 본문이없는 304 Not Modified 응답을 반환하여 브라우저 또는 프록시에게 캐시가 최신임을 알릴 수 있습니다. 요청 시간과 네트워크 대역폭이 크게 절약됩니다.</target>
        </trans-unit>
        <trans-unit id="46e1b8cdccfba9c5b0c329ff915d3cb2a9607d53" translate="yes" xml:space="preserve">
          <source>This method should return a hash with assigns. You can overwrite this configuration per controller.</source>
          <target state="translated">이 메소드는 assign과 함께 해시를 반환해야합니다. 컨트롤러별로이 구성을 덮어 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d269b958250e0ebd5dc50bcbc66e9efec7abf6a" translate="yes" xml:space="preserve">
          <source>This method synchronously processes a variant of the preview image, so do not call it in views. Instead, generate a stable URL that redirects to the URL returned by this method.</source>
          <target state="translated">이 메서드는 미리보기 이미지의 변형을 동기식으로 처리하므로 뷰에서 호출하지 마십시오. 대신이 메서드에서 반환 한 URL로 리디렉션되는 안정적인 URL을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="41885df729b68cec5e492338ab5422001ebc9769" translate="yes" xml:space="preserve">
          <source>This method synchronously processes a variant of the preview image, so do not call it in views. Instead, generate a stable URL that redirects to the short-lived URL returned by this method.</source>
          <target state="translated">이 메소드는 미리보기 이미지의 변형을 동 기적으로 처리하므로 뷰에서이를 호출하지 마십시오. 대신이 메소드에서 반환 한 수명이 짧은 URL로 리디렉션되는 안정적인 URL을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="012d0e0efeb4b90d2fb318d1a2210ebebbeac1ad" translate="yes" xml:space="preserve">
          <source>This method takes an authorization body and splits up the key-value pairs by the standardized &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, or &lt;code&gt;\t&lt;/code&gt; delimiters defined in &lt;code&gt;AUTHN_PAIR_DELIMITERS&lt;/code&gt;.</source>
          <target state="translated">이 방법은 권한 부여 체를 받아 표준화하여 키 - 값 쌍을 분리한다 &lt;code&gt;:&lt;/code&gt; , &lt;code&gt;;&lt;/code&gt; 또는 &lt;code&gt;AUTHN_PAIR_DELIMITERS&lt;/code&gt; 에 정의 된 &lt;code&gt;\t&lt;/code&gt; 분리 문자 입니다.</target>
        </trans-unit>
        <trans-unit id="bcfbe784cc7e24a23013647372adbb0cfac865fa" translate="yes" xml:space="preserve">
          <source>This method validates that a checkbox on the user interface was checked when a form was submitted. This is typically used when the user needs to agree to your application's terms of service, confirm that some text is read, or any similar concept.</source>
          <target state="translated">이 방법은 양식을 제출할 때 사용자 인터페이스의 확인란이 선택되었는지 확인합니다. 일반적으로 사용자가 응용 프로그램의 서비스 약관에 동의하거나 일부 텍스트를 읽었는지 또는 유사한 개념을 확인해야 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5dff2d512cf23ec50b72edca0451ece07b06bbd1" translate="yes" xml:space="preserve">
          <source>This method will also generate 3 input hidden tags, for the actual year, month and day unless the option &lt;code&gt;:ignore_date&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. If you set the &lt;code&gt;:ignore_date&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you must have a &lt;code&gt;date_select&lt;/code&gt; on the same method within the form otherwise an exception will be raised.</source>
          <target state="translated">이 메소드는 &lt;code&gt;:ignore_date&lt;/code&gt; 옵션 이 &lt;code&gt;true&lt;/code&gt; 로 설정 되지 않은 경우 실제 연도, 월 및 일에 대해 3 개의 숨겨진 태그를 생성 합니다 . &lt;code&gt;:ignore_date&lt;/code&gt; 를 &lt;code&gt;true&lt;/code&gt; 로 설정하면 양식 내의 동일한 메소드에서 &lt;code&gt;date_select&lt;/code&gt; 가 있어야하며 그렇지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="64bae8693b242b241d6c1069e584c82ac89bd00d" translate="yes" xml:space="preserve">
          <source>This method will automatically define a new method for each of the given names, and it will be available in your views.</source>
          <target state="translated">이 방법은 주어진 각 이름에 대해 새로운 방법을 자동으로 정의하며 사용자의보기에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2796e7f017e5372e44f884a51e71260d25abc07" translate="yes" xml:space="preserve">
          <source>This method will overwrite an existing Cache-Control header. See &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot;&gt;www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&lt;/a&gt; for more possibilities.</source>
          <target state="translated">이 방법은 기존 Cache-Control 헤더를 덮어 씁니다. 자세한 내용은 &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot;&gt;www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="06943c1d91ca0ed1a7ee27b9069f0fc0c6e21107" translate="yes" xml:space="preserve">
          <source>This method will raise an &lt;code&gt;IrreversibleMigration&lt;/code&gt; exception if it cannot invert the &lt;code&gt;command&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;command&lt;/code&gt; 반전시킬 수없는 경우 &lt;code&gt;IrreversibleMigration&lt;/code&gt; 예외를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="99f9a638b102e73719b4f96f0098faf214bf41f0" translate="yes" xml:space="preserve">
          <source>This method will return a record if all given attributes are covered by unique constraints (unless the INSERT -&amp;gt; DELETE -&amp;gt; SELECT race condition is triggered), but if creation was attempted and failed due to validation errors it won't be persisted, you get what &lt;a href=&quot;relation#method-i-create&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/a&gt; returns in such situation.</source>
          <target state="translated">이 메서드는 주어진 모든 속성이 고유 한 제약 조건 (INSERT-&amp;gt; DELETE-&amp;gt; SELECT 경합 조건이 트리거되지 않는 한)에 포함되는 경우 레코드를 반환하지만 유효성 검사 오류로 인해 생성이 시도되고 실패한 경우 지속되지 않습니다. 그런 상황에서 수익을 &lt;a href=&quot;relation#method-i-create&quot;&gt; &lt;code&gt;create&lt;/code&gt; &lt;/a&gt; 하는 것을 얻으십시오 .</target>
        </trans-unit>
        <trans-unit id="f38ce92d06f8df11400be36093b7097e5c3c2394" translate="yes" xml:space="preserve">
          <source>This method will return a record if all given attributes are covered by unique constraints (unless the INSERT -&amp;gt; DELETE -&amp;gt; SELECT race condition is triggered), but if creation was attempted and failed due to validation errors it won't be persisted, you get what &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt; returns in such situation.</source>
          <target state="translated">INSERT-&amp;gt; DELETE-&amp;gt; SELECT 경쟁 조건이 트리거되지 않는 한, 주어진 모든 속성이 고유 제한 조건에 포함되는 경우이 메소드는 레코드를 리턴하지만 유효성 검증 오류로 인해 작성이 실패하고 실패한 경우 지속되지 않습니다. 그러한 상황에서 수익을 &lt;a href=&quot;relation#method-i-create&quot;&gt;창출&lt;/a&gt; 하는 것을 얻으십시오 .</target>
        </trans-unit>
        <trans-unit id="c86869e92877b86be09a466a234404de518f17f2" translate="yes" xml:space="preserve">
          <source>This method will set up keys for the &lt;code&gt;options&lt;/code&gt; which Rails will then be able to use to determine how its server should run. After &lt;code&gt;initialize&lt;/code&gt; has finished, we jump back into the server command where &lt;code&gt;APP_PATH&lt;/code&gt; (which was set earlier) is required.</source>
          <target state="translated">이 방법은 Rails가 서버 실행 방법을 결정하는 데 사용할 수 있는 &lt;code&gt;options&lt;/code&gt; 대한 키를 설정합니다 . 후 &lt;code&gt;initialize&lt;/code&gt; 완료, 우리는 서버 명령에 다시 뛰어 &lt;code&gt;APP_PATH&lt;/code&gt; 가 (이전에 설정 한)가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c5b1c276ff2e5ebf4b7786da73057ea07d2ab622" translate="yes" xml:space="preserve">
          <source>This method works like its siblings, &lt;code&gt;attr_accessor&lt;/code&gt; and &lt;code&gt;cattr_accessor&lt;/code&gt;, but provides a setter and getter method on the module with the specified name. To use it, it must be referenced using &lt;code&gt;Blorgh.author_class&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 형제, &lt;code&gt;attr_accessor&lt;/code&gt; 및 &lt;code&gt;cattr_accessor&lt;/code&gt; 와 같이 작동 하지만 지정된 이름으로 모듈에 setter 및 getter 메소드를 제공합니다. 사용하려면 &lt;code&gt;Blorgh.author_class&lt;/code&gt; 를 사용하여 참조해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f7ee50ed51d0d15770d36644e8414ce82f979eaa" translate="yes" xml:space="preserve">
          <source>This middleware calculates the IP address of the remote client that is making the request. It does this by checking various headers that could contain the address, and then picking the last-set address that is not on the list of trusted IPs. This follows the precedent set by e.g. &lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=50453&quot;&gt;the Tomcat server&lt;/a&gt;, with &lt;a href=&quot;http://blog.gingerlime.com/2012/rails-ip-spoofing-vulnerabilities-and-protection&quot;&gt;reasoning explained at length&lt;/a&gt; by @gingerlime. A more detailed explanation of the algorithm is given at &lt;a href=&quot;remoteip/getip#method-i-calculate_ip&quot;&gt;ActionDispatch::RemoteIp::GetIp#calculate_ip&lt;/a&gt;.</source>
          <target state="translated">이 미들웨어는 요청중인 원격 클라이언트의 IP 주소를 계산합니다. 주소를 포함 할 수있는 다양한 헤더를 확인한 다음 신뢰할 수있는 IP 목록에없는 마지막 설정 주소를 선택하면됩니다. 이것은 @gingerlime에 의해 &lt;a href=&quot;http://blog.gingerlime.com/2012/rails-ip-spoofing-vulnerabilities-and-protection&quot;&gt;추론이 설명 &lt;/a&gt;&lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=50453&quot;&gt;되는 Tomcat 서버&lt;/a&gt; 와 같은 선례 에 따릅니다. 알고리즘에 대한 자세한 설명은 &lt;a href=&quot;remoteip/getip#method-i-calculate_ip&quot;&gt;ActionDispatch :: RemoteIp :: GetIp # calculate_ip에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9c66810c99e60ffe89d1a9a4a52895b2e831e2c" translate="yes" xml:space="preserve">
          <source>This middleware calculates the IP address of the remote client that is making the request. It does this by checking various headers that could contain the address, and then picking the last-set address that is not on the list of trusted IPs. This follows the precedent set by e.g. &lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=50453&quot;&gt;the Tomcat server&lt;/a&gt;, with &lt;a href=&quot;https://blog.gingerlime.com/2012/rails-ip-spoofing-vulnerabilities-and-protection&quot;&gt;reasoning explained at length&lt;/a&gt; by @gingerlime. A more detailed explanation of the algorithm is given at &lt;a href=&quot;remoteip/getip#method-i-calculate_ip&quot;&gt;&lt;code&gt;GetIp#calculate_ip&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 미들웨어는 요청을하는 원격 클라이언트의 IP 주소를 계산합니다. 주소를 포함 할 수있는 다양한 헤더를 확인한 다음 신뢰할 수있는 IP 목록에없는 마지막 설정 주소를 선택하여이를 수행합니다. 이 예에 의한 선행 세트 다음 &lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=50453&quot;&gt;Tomcat 서버를&lt;/a&gt; 함께 &lt;a href=&quot;https://blog.gingerlime.com/2012/rails-ip-spoofing-vulnerabilities-and-protection&quot;&gt;추론 길이 설명&lt;/a&gt; @gingerlime으로합니다. 알고리즘에 대한 자세한 설명은 &lt;a href=&quot;remoteip/getip#method-i-calculate_ip&quot;&gt; &lt;code&gt;GetIp#calculate_ip&lt;/code&gt; 에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="3439033169a9bdabd1efa7147b60b1ef9ca0024f" translate="yes" xml:space="preserve">
          <source>This middleware can be used to diagnose deadlocks in the autoload interlock.</source>
          <target state="translated">이 미들웨어는 자동로드 인터록에서 교착 상태를 진단하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dabb8e079fc21462c7d20d4e7a0de5475b74dbb8" translate="yes" xml:space="preserve">
          <source>This middleware exposes operational details of the server, with no access control. It should only be enabled when in use, and removed thereafter.</source>
          <target state="translated">이 미들웨어는 액세스 제어없이 서버의 운영 세부 사항을 노출합니다. 사용 중일 때만 활성화 한 후 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="bb448637e932a0e8abc5ac1e633aab430b7c8f56" translate="yes" xml:space="preserve">
          <source>This middleware guards from DNS rebinding attacks by explicitly permitting the hosts a request can be sent to, and is passed the options set in &lt;code&gt;config.host_authorization&lt;/code&gt;.</source>
          <target state="translated">이 미들웨어는 요청이 전송 될 수있는 호스트를 명시 적으로 허용하고 &lt;code&gt;config.host_authorization&lt;/code&gt; 에 설정된 옵션을 전달함으로써 DNS 리 바인딩 공격으로부터 보호합니다 .</target>
        </trans-unit>
        <trans-unit id="208e3d2fb70acd153c67d30409d98ee76a097fae" translate="yes" xml:space="preserve">
          <source>This middleware guards from DNS rebinding attacks by explicitly permitting the hosts a request can be sent to.</source>
          <target state="translated">이 미들웨어는 요청을 보낼 수있는 호스트를 명시 적으로 허용하여 DNS 리 바인딩 공격으로부터 보호합니다.</target>
        </trans-unit>
        <trans-unit id="d39ee5c3b45bcf1eba2d3206f33d68df0bb14fdf" translate="yes" xml:space="preserve">
          <source>This middleware is added to the stack when &lt;code&gt;config.force_ssl =
true&lt;/code&gt;, and is passed the options set in &lt;code&gt;config.ssl_options&lt;/code&gt;. It does three jobs to enforce secure HTTP requests:</source>
          <target state="translated">이 미들웨어는 &lt;code&gt;config.force_ssl = true&lt;/code&gt; 일 때 스택에 추가 되며 &lt;code&gt;config.ssl_options&lt;/code&gt; 에 설정된 옵션이 전달 됩니다. 보안 HTTP 요청을 시행하기 위해 세 가지 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="6496f0e0f25d6b0f2d6da5a5517298276222317c" translate="yes" xml:space="preserve">
          <source>This middleware returns a file's contents from disk in the body response. When initialized, it can accept optional HTTP headers, which will be set when a response containing a file's contents is delivered.</source>
          <target state="translated">이 미들웨어는 본문 응답에서 디스크의 파일 내용을 리턴합니다. 초기화 될 때 선택적인 HTTP 헤더를 허용 할 수 있으며, 이는 파일 내용을 포함하는 응답이 전달 될 때 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="e1d5eae931efebd7e0f859729c80d03415b17be5" translate="yes" xml:space="preserve">
          <source>This middleware serves static files from disk, if available. If no file is found, it hands off to the main app.</source>
          <target state="translated">이 미들웨어는 가능한 경우 디스크에서 정적 파일을 제공합니다. 파일이 없으면 기본 앱으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="2ac1578c39a45c87b7612f701eedcd08b29c4561" translate="yes" xml:space="preserve">
          <source>This middleware verifies the path to ensure that only files living in the root directory can be rendered. A request cannot produce a directory traversal using this middleware. Only 'GET' and 'HEAD' requests will result in a file being returned.</source>
          <target state="translated">이 미들웨어는 루트 디렉토리에있는 파일 만 렌더링 할 수 있도록 경로를 검증합니다. 요청이이 미들웨어를 사용하여 디렉토리 순회를 생성 할 수 없습니다. 'GET'및 'HEAD'요청 만 파일을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="014df54573381128828ecc65d349560208352273" translate="yes" xml:space="preserve">
          <source>This middleware will attempt to return the contents of a file's body from disk in the response. If a file is not found on disk, the request will be delegated to the application stack. This middleware is commonly initialized to serve assets from a server's &lt;code&gt;public/&lt;/code&gt; directory.</source>
          <target state="translated">이 미들웨어는 응답으로 디스크에서 파일 본문의 컨텐츠를 리턴하려고 시도합니다. 디스크에 파일이 없으면 요청이 응용 프로그램 스택으로 위임됩니다. 이 미들웨어는 일반적으로 서버의 &lt;code&gt;public/&lt;/code&gt; 디렉토리 에서 자산을 제공하도록 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="32a1a159366cb6478f2d4f7ebf380a24c15cca7b" translate="yes" xml:space="preserve">
          <source>This middleware will render the file specified in &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; where the base path is in the &lt;code&gt;root&lt;/code&gt; directory. For example, if the &lt;code&gt;root&lt;/code&gt; is set to &lt;code&gt;public/&lt;/code&gt;, then a request with &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; of &lt;code&gt;assets/application.js&lt;/code&gt; will return a response with the contents of a file located at &lt;code&gt;public/assets/application.js&lt;/code&gt; if the file exists. If the file does not exist, a 404 &amp;ldquo;File not Found&amp;rdquo; response will be returned.</source>
          <target state="translated">이 미들웨어는 기본 경로가 &lt;code&gt;root&lt;/code&gt; 디렉토리에 있는 &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; 에 지정된 파일을 렌더링합니다 . 예를 들어, &lt;code&gt;root&lt;/code&gt; 가 &lt;code&gt;public/&lt;/code&gt; 설정된 경우 &lt;code&gt;assets/application.js&lt;/code&gt; 의 &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; 요청 은 파일이 &lt;code&gt;public/assets/application.js&lt;/code&gt; 에있는 파일의 내용으로 응답을 리턴 합니다. 존재합니다. 파일이 존재하지 않으면 404&amp;ldquo;File not Found&amp;rdquo;응답이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4dc55f8fc0d61294b21a0782672c4be6778fb0fb" translate="yes" xml:space="preserve">
          <source>This migration adds a table called &lt;code&gt;products&lt;/code&gt; with a string column called &lt;code&gt;name&lt;/code&gt; and a text column called &lt;code&gt;description&lt;/code&gt;. A primary key column called &lt;code&gt;id&lt;/code&gt; will also be added implicitly, as it's the default primary key for all Active Record models. The &lt;code&gt;timestamps&lt;/code&gt; macro adds two columns, &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;. These special columns are automatically managed by Active Record if they exist.</source>
          <target state="translated">이 마이그레이션 은 &lt;code&gt;name&lt;/code&gt; 이라는 문자열 열과 &lt;code&gt;description&lt;/code&gt; 이라는 텍스트 열 이있는 &lt;code&gt;products&lt;/code&gt; 라는 테이블을 추가합니다 . &lt;code&gt;id&lt;/code&gt; 라는 기본 키 열도 모든 활성 레코드 모델의 기본 기본 키이므로 암시 적으로 추가됩니다. 는 &lt;code&gt;timestamps&lt;/code&gt; 매크로는 두 개의 열, 추가 &lt;code&gt;created_at&lt;/code&gt; 및 &lt;code&gt;updated_at&lt;/code&gt; 을 . 이러한 특수 열은 존재하는 경우 Active Record에 의해 자동으로 관리됩니다.</target>
        </trans-unit>
        <trans-unit id="3900c9971d50896e978d54fa358b22e2c732ed01" translate="yes" xml:space="preserve">
          <source>This migration can be simplified by using the &lt;code&gt;t.references&lt;/code&gt; form:</source>
          <target state="translated">&lt;code&gt;t.references&lt;/code&gt; 양식 을 사용 하여이 마이그레이션을 단순화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="885b258edaf0ca5835de252b2e87c1bac3d3fcd8" translate="yes" xml:space="preserve">
          <source>This migration first adds the &lt;code&gt;system_settings&lt;/code&gt; table, then creates the very first row in it using the Active Record model that relies on the table. It also uses the more advanced &lt;code&gt;create_table&lt;/code&gt; syntax where you can specify a complete table schema in one block call.</source>
          <target state="translated">이 마이그레이션은 먼저 &lt;code&gt;system_settings&lt;/code&gt; 테이블을 추가 한 다음 테이블에 의존하는 Active Record 모델을 사용하여 첫 번째 행을 작성합니다. 또한 한 번의 블록 호출로 완전한 테이블 스키마를 지정할 수있는 고급 &lt;code&gt;create_table&lt;/code&gt; 구문을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="7e178bf4130d6446d9de99fc2a55553e0b28d78b" translate="yes" xml:space="preserve">
          <source>This migration will add a boolean flag to the accounts table and remove it if you're backing out of the migration. It shows how all migrations have two methods &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; that describes the transformations required to implement or remove the migration. These methods can consist of both the migration specific methods like &lt;code&gt;add_column&lt;/code&gt; and &lt;code&gt;remove_column&lt;/code&gt;, but may also contain regular Ruby code for generating data needed for the transformations.</source>
          <target state="translated">이 마이그레이션은 계정 테이블에 부울 플래그를 추가하고 마이그레이션을 종료하는 경우이를 제거합니다. 그것은 모든 마이그레이션이 두 가지 방법이 방법을 보여줍니다 &lt;code&gt;up&lt;/code&gt; 및 &lt;code&gt;down&lt;/code&gt; 그 변환을 구현하거나 마이그레이션을 제거하는 데 필요한 설명합니다. 이러한 메소드는 &lt;code&gt;add_column&lt;/code&gt; 및 &lt;code&gt;remove_column&lt;/code&gt; 과 같은 마이그레이션 특정 메소드로 구성 될 수 있지만 변환에 필요한 데이터를 생성하기위한 일반 Ruby 코드를 포함 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa5e44d1e27f4cb2681e615b89ec6d535caa5be8" translate="yes" xml:space="preserve">
          <source>This migration will create a &lt;code&gt;user_id&lt;/code&gt; column and appropriate index.</source>
          <target state="translated">이 마이그레이션은 &lt;code&gt;user_id&lt;/code&gt; 열과 적절한 인덱스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4985dfe4f4a90c958afb459eaada7c764a487ac1" translate="yes" xml:space="preserve">
          <source>This migration will create a &lt;code&gt;user_id&lt;/code&gt; column and appropriate index. For more &lt;code&gt;add_reference&lt;/code&gt; options, visit the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="translated">이 마이그레이션은 &lt;code&gt;user_id&lt;/code&gt; 열과 적절한 색인을 만듭니다. &lt;code&gt;add_reference&lt;/code&gt; 옵션에 대한 자세한 내용은 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference&quot;&gt;API 설명서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5669fde4eec64f10818cf2e3517c3d7e5f42c208" translate="yes" xml:space="preserve">
          <source>This migration will create the horses table for you on the way up, and automatically figure out how to drop the table on the way down.</source>
          <target state="translated">이 마이그레이션은 도중에 말 테이블을 생성하고, 테이블을 내려 놓는 방법을 자동으로 파악합니다.</target>
        </trans-unit>
        <trans-unit id="5516ca5f5ddf9bac6a1d49105da9e2042c212e1b" translate="yes" xml:space="preserve">
          <source>This migration will need to be run on the application. To do that, it must first be copied using this command:</source>
          <target state="translated">이 마이그레이션은 응용 프로그램에서 실행해야합니다. 이렇게하려면 먼저 다음 명령을 사용하여 복사해야합니다.</target>
        </trans-unit>
        <trans-unit id="5b71acd4c739f9ed2673b4139c3b262e87b15c02" translate="yes" xml:space="preserve">
          <source>This mode uses more memory, performs more poorly than the default, and is not recommended.</source>
          <target state="translated">이 모드는 더 많은 메모리를 사용하고 기본값보다 성능이 저하되므로 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d243535d40aabdfe065813a26d6de6c00f9cbe2c" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;, like so:</source>
          <target state="translated">이 모델은 다음과 같이 중첩 된 &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; 와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e3ae1509191c01b65bb87fd44e8c2ef89b069cd0" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;&lt;code&gt;fields_for&lt;/code&gt;&lt;/a&gt;, like so:</source>
          <target state="translated">이 모델은 이제 다음과 같이 중첩 &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt; &lt;code&gt;fields_for&lt;/code&gt; &lt;/a&gt; 와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0e73c2711552abda121ef8c6ac32d00a79614af" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;, like so:</source>
          <target state="translated">이 모델은 다음과 같이 중첩 된 &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; 와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0ab2de620d933145757fec5ea7910343857a78f5" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;&lt;code&gt;fields_for&lt;/code&gt;&lt;/a&gt;, like so:</source>
          <target state="translated">이 모델은 이제 다음과 같이 중첩 &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt; &lt;code&gt;fields_for&lt;/code&gt; &lt;/a&gt; 와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd03efbb6dd8783abb654113eb8919de838f4bbb" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested fields_for. The block given to the nested &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; call will be repeated for each instance in the collection:</source>
          <target state="translated">이 모델은 이제 중첩 된 fields_for와 함께 사용할 수 있습니다. 중첩 된 &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; 호출에 제공된 블록 은 컬렉션의 각 인스턴스에 대해 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="8a09f8d7496c3448c8cb92ab5ea7a2a7010d4cf8" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested fields_for. The block given to the nested &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;&lt;code&gt;fields_for&lt;/code&gt;&lt;/a&gt; call will be repeated for each instance in the collection:</source>
          <target state="translated">이 모델은 이제 중첩 fields_for와 함께 사용할 수 있습니다. 중첩 &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt; &lt;code&gt;fields_for&lt;/code&gt; &lt;/a&gt; 호출에 지정된 블록 은 컬렉션의 각 인스턴스에 대해 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="640d7faaa46ff1cc37c2e2a0656eae5acb40ef70" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested fields_for. The block given to the nested &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; call will be repeated for each instance in the collection:</source>
          <target state="translated">이 모델은 이제 중첩 된 fields_for와 함께 사용할 수 있습니다. 중첩 된 &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; 호출에 제공된 블록 은 컬렉션의 각 인스턴스에 대해 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="3c97b264f834567e8a5eeb518156e6855a5a645e" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested fields_for. The block given to the nested &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;&lt;code&gt;fields_for&lt;/code&gt;&lt;/a&gt; call will be repeated for each instance in the collection:</source>
          <target state="translated">이 모델은 이제 중첩 fields_for와 함께 사용할 수 있습니다. 중첩 &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt; &lt;code&gt;fields_for&lt;/code&gt; &lt;/a&gt; 호출에 지정된 블록 은 컬렉션의 각 인스턴스에 대해 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="3e5d73d1bbeedab4be25fb129ea6ee8fcea08d07" translate="yes" xml:space="preserve">
          <source>This module allows you to define autoloads based on Rails conventions (i.e. no need to define the path it is automatically guessed based on the filename) and also define a set of constants that needs to be eager loaded:</source>
          <target state="translated">이 모듈을 사용하면 Rails 규칙에 따라 자동로드를 정의 할 수 있습니다 (즉, 파일 이름을 기반으로 자동 추측되는 경로를 정의 할 필요가 없음). 또한 열어야 할 상수 세트를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebd4a59f08621fde2640ac21c4478ab8a9aab4bb" translate="yes" xml:space="preserve">
          <source>This module exists because &lt;a href=&quot;attributemethods/dirty&quot;&gt;ActiveRecord::AttributeMethods::Dirty&lt;/a&gt; needs to define callbacks, but continue to have its version of &lt;code&gt;save&lt;/code&gt; be the super method of &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt;. This will be removed when the removal of deprecated code removes this need.</source>
          <target state="translated">이 모듈은 &lt;a href=&quot;attributemethods/dirty&quot;&gt;ActiveRecord :: AttributeMethods :: Dirty&lt;/a&gt; 가 콜백을 정의해야하지만 &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt; 의 수퍼 메소드 인 &lt;code&gt;save&lt;/code&gt; 버전을 계속 유지해야하기 때문에 존재합니다 . 더 이상 사용되지 않는 코드를 제거하여이 요구를 제거하면 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="94244227efaa951180a549f929adb04352831939" translate="yes" xml:space="preserve">
          <source>This module handles everything related to mail delivery, from registering new delivery methods to configuring the mail object to be sent.</source>
          <target state="translated">이 모듈은 새 전달 방법 등록에서 전송 될 메일 오브젝트 구성에 이르기까지 메일 전달과 관련된 모든 것을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="352591129b7a4d8bde86331d14034747dea1497c" translate="yes" xml:space="preserve">
          <source>This module helps build the runtime properties that are displayed in Rails::InfoController responses. These include the active &lt;code&gt;Rails&lt;/code&gt; version, Ruby version, &lt;code&gt;Rack&lt;/code&gt; version, and so on.</source>
          <target state="translated">이 모듈은 Rails :: InfoController 응답에 표시되는 런타임 속성을 빌드하는 데 도움이됩니다. 여기에는 활성 &lt;code&gt;Rails&lt;/code&gt; 버전, Ruby 버전, &lt;code&gt;Rack&lt;/code&gt; 버전 등이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="3e1941493198dfa728594c19da80819472100156" translate="yes" xml:space="preserve">
          <source>This module helps build the runtime properties that are displayed in Rails::InfoController responses. These include the active Rails version, Ruby version, Rack version, and so on.</source>
          <target state="translated">이 모듈은 Rails :: InfoController 응답에 표시되는 런타임 특성을 빌드하는 데 도움이됩니다. 여기에는 활성 Rails 버전, Ruby 버전, Rack 버전 등이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="0cef4708bb706ca8ee98950587d6ae406c9df0bf" translate="yes" xml:space="preserve">
          <source>This module is responsible for providing &lt;code&gt;rescue_from&lt;/code&gt; helpers to controllers and configuring when detailed exceptions must be shown.</source>
          <target state="translated">이 모듈은 &lt;code&gt;rescue_from&lt;/code&gt; 를 컨트롤러 로 제공 하고 자세한 예외를 표시해야 할 경우 구성을 담당 합니다.</target>
        </trans-unit>
        <trans-unit id="9e3c20d53a4426f29a4bd7a9838c788021dedf64" translate="yes" xml:space="preserve">
          <source>This module is used to encapsulate access to thread local variables.</source>
          <target state="translated">이 모듈은 스레드 로컬 변수에 대한 액세스를 캡슐화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="22f4c8a4c981a60f3a05c2c0a0c6a8bc72748f9b" translate="yes" xml:space="preserve">
          <source>This module provides an internal implementation to track descendants which is faster than iterating through ObjectSpace.</source>
          <target state="translated">이 모듈은 ObjectSpace를 반복하는 것보다 빠른 하위 항목을 추적하기위한 내부 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="631368182d8bbf4acf4b786152c548a5c12f3e77" translate="yes" xml:space="preserve">
          <source>This module provides methods for generating HTML that links views to assets such as images, JavaScript files, stylesheets, and feeds.</source>
          <target state="translated">이 모듈은 뷰를 이미지, JavaScript 파일, 스타일 시트 및 피드와 같은 자산에 연결하는 HTML 생성 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="69d2293cee465d18b3ab1034048805a0d13e1fb6" translate="yes" xml:space="preserve">
          <source>This module provides methods for generating HTML that links views to assets such as images, JavaScripts, stylesheets, and feeds. These methods do not verify the assets exist before linking to them:</source>
          <target state="translated">이 모듈은 이미지, JavaScript, 스타일 시트 및 피드와 같은 자산에보기를 연결하는 HTML 생성 방법을 제공합니다. 이러한 방법은 자산이 연결되기 전에 자산이 존재하는지 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="86eee6aec75a942dab88d2f2fb2d6be094436f2a" translate="yes" xml:space="preserve">
          <source>This module provides methods for generating asset paths and URLs.</source>
          <target state="translated">이 모듈은 자산 경로 및 URL을 생성하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d80792f7af72d9115718c99d4842fab3aba31858" translate="yes" xml:space="preserve">
          <source>This needs to happen for every intermediate (non-root and non-leaf) class. The root class does not scope the query by type, and therefore does not necessarily have to know all its descendants.</source>
          <target state="translated">이것은 모든 중간 (루트 및 비 리프) 클래스에서 발생해야합니다. 루트 클래스는 유형별로 쿼리의 범위를 지정하지 않으므로 반드시 모든 하위 항목을 알아야 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="723de11f9b9bb4df51697024a41e43c3beb50f19" translate="yes" xml:space="preserve">
          <source>This new embed information make those cookies incompatible with versions of Rails older than 5.2.</source>
          <target state="translated">이 새로운 임베드 정보는 해당 쿠키가 5.2 이전의 Rails 버전과 호환되지 않게합니다.</target>
        </trans-unit>
        <trans-unit id="aabae3f77e3509214e76e768ccad19dde1ed8326" translate="yes" xml:space="preserve">
          <source>This new embed information make those cookies incompatible with versions of Rails older than 6.0.</source>
          <target state="translated">이 새로운 임베드 정보는 해당 쿠키가 6.0 이전의 Rails 버전과 호환되지 않게합니다.</target>
        </trans-unit>
        <trans-unit id="cdf3bcca444dfe6b4a38ccad6ad3e5df8c4709c9" translate="yes" xml:space="preserve">
          <source>This new embed metadata make those cookies incompatible with versions of Rails older than 6.0.</source>
          <target state="translated">이 새로운 임베드 메타 데이터는 해당 쿠키를 6.0 이전 버전의 Rails와 호환되지 않게합니다.</target>
        </trans-unit>
        <trans-unit id="06c42da025a5b2d8c11d5b2611a7e26218329dde" translate="yes" xml:space="preserve">
          <source>This new sanitizer uses &lt;a href=&quot;https://github.com/flavorjones/loofah&quot;&gt;Loofah&lt;/a&gt; internally. Loofah in turn uses Nokogiri, which wraps XML parsers written in both C and Java, so sanitization should be faster no matter which Ruby version you run.</source>
          <target state="translated">이 새로운 소독제는 &lt;a href=&quot;https://github.com/flavorjones/loofah&quot;&gt;Loofah를&lt;/a&gt; 내부적으로 사용합니다 . Loofah는 Nokogiri를 사용하여 C와 Java로 작성된 XML 파서를 랩핑하므로 어떤 루비 버전을 사용하든 위생 처리 속도가 빨라집니다.</target>
        </trans-unit>
        <trans-unit id="ed5864f55824cd0ba8ff1052ea5ca1073b597068" translate="yes" xml:space="preserve">
          <source>This new snippet will only include &lt;code&gt;MyActiveRecordHelper&lt;/code&gt; when &lt;code&gt;ActiveRecord::Base&lt;/code&gt; is loaded.</source>
          <target state="translated">이 새 코드 조각은 &lt;code&gt;ActiveRecord::Base&lt;/code&gt; &lt;code&gt;MyActiveRecordHelper&lt;/code&gt; 될 때 MyActiveRecordHelper 만 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="df2c742dfb1096639c18cc42c143ba2617889b5b" translate="yes" xml:space="preserve">
          <source>This object is an extended hash that behaves as root of the &lt;code&gt;Rails::Paths&lt;/code&gt; system. It allows you to collect information about how you want to structure your application paths through a Hash-like &lt;code&gt;API&lt;/code&gt;. It requires you to give a physical path on initialization.</source>
          <target state="translated">이 객체는 &lt;code&gt;Rails::Paths&lt;/code&gt; 시스템의 루트 역할을하는 확장 해시입니다 . Hash와 유사한 &lt;code&gt;API&lt;/code&gt; 를 통해 애플리케이션 경로를 구성하는 방법에 대한 정보를 수집 할 수 있습니다 . 초기화시 물리적 경로를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="69982115ba3f0a38d99b309b7f0f83d5b21528ab" translate="yes" xml:space="preserve">
          <source>This object is an extended hash that behaves as root of the &lt;code&gt;Rails::Paths&lt;/code&gt; system. It allows you to collect information about how you want to structure your application paths through a Hash-like API. It requires you to give a physical path on initialization.</source>
          <target state="translated">이 객체는 &lt;code&gt;Rails::Paths&lt;/code&gt; 시스템의 루트로 동작하는 확장 해시입니다 . 해시 유사 API를 통해 애플리케이션 경로를 구성하는 방법에 대한 정보를 수집 할 수 있습니다. 초기화시 실제 경로를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="7cf8766f596106f88f4c672b97bb41768ada2e68" translate="yes" xml:space="preserve">
          <source>This option can be used to configure a custom named &lt;code&gt;:counter_cache.&lt;/code&gt; You only need this option, when you customized the name of your &lt;code&gt;:counter_cache&lt;/code&gt; on the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;&lt;code&gt;belongs_to&lt;/code&gt;&lt;/a&gt; association.</source>
          <target state="translated">이 옵션은 &lt;code&gt;:counter_cache.&lt;/code&gt; 라는 사용자 지정을 구성하는 데 사용할 수 있습니다 . 이 옵션 은 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt; &lt;code&gt;belongs_to&lt;/code&gt; &lt;/a&gt; 연관 에서 &lt;code&gt;:counter_cache&lt;/code&gt; 의 이름을 사용자 정의한 경우에만 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="84cad39f8863c845a0d9debbf0bbcb07ddf841ff" translate="yes" xml:space="preserve">
          <source>This option can be used to configure a custom named &lt;code&gt;:counter_cache.&lt;/code&gt; You only need this option, when you customized the name of your &lt;code&gt;:counter_cache&lt;/code&gt; on the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association.</source>
          <target state="translated">이 옵션은 &lt;code&gt;:counter_cache.&lt;/code&gt; 라는 사용자 정의를 구성하는 데 사용할 수 있습니다 . &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belong_to&lt;/a&gt; 연관 에서 &lt;code&gt;:counter_cache&lt;/code&gt; 의 이름을 사용자 정의 할 때이 옵션 만 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="9ab2086178b4abdefb934a38fbbb3916be52744c" translate="yes" xml:space="preserve">
          <source>This option can be used to configure a custom named &lt;code&gt;:counter_cache&lt;/code&gt;. You only need this option when you customized the name of your &lt;code&gt;:counter_cache&lt;/code&gt; on the &lt;a href=&quot;#options-for-belongs-to&quot;&gt;belongs_to association&lt;/a&gt;.</source>
          <target state="translated">이 옵션은 &lt;code&gt;:counter_cache&lt;/code&gt; 라는 사용자 정의를 구성하는 데 사용할 수 있습니다 . &lt;a href=&quot;#options-for-belongs-to&quot;&gt;belong_to 연관&lt;/a&gt; 에서 &lt;code&gt;:counter_cache&lt;/code&gt; 이름을 사용자 정의한 경우에만이 옵션이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="f68ae509829e7450b92000008806868d38e89cda" translate="yes" xml:space="preserve">
          <source>This option should be used only if you don't care about the content type of the response. Using &lt;code&gt;:plain&lt;/code&gt; or &lt;code&gt;:html&lt;/code&gt; might be more appropriate most of the time.</source>
          <target state="translated">이 옵션은 응답의 컨텐츠 유형에 관심이없는 경우에만 사용해야합니다. 대부분의 경우 &lt;code&gt;:plain&lt;/code&gt; 또는 &lt;code&gt;:html&lt;/code&gt; 을 사용하는 것이 더 적절할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2af3083a1b3fca93ea3eabedf316f7311b08a1e" translate="yes" xml:space="preserve">
          <source>This partial will be responsible for rendering just the comment text, for now. Create a new file at &lt;code&gt;app/views/blorgh/comments/_comment.html.erb&lt;/code&gt; and put this line inside it:</source>
          <target state="translated">이 부분은 현재 주석 텍스트 만 렌더링하는 역할을합니다. &lt;code&gt;app/views/blorgh/comments/_comment.html.erb&lt;/code&gt; 에서 새 파일을 만들고이 줄을 그 안에 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="9ca6827cd178a7371e007820d7bc736f71b5a6ca" translate="yes" xml:space="preserve">
          <source>This plugin will add a method named 'squawk' to any Active Record object that calls &lt;code&gt;acts_as_yaffle&lt;/code&gt;. The 'squawk' method will simply set the value of one of the fields in the database.</source>
          <target state="translated">이 플러그인은 &lt;code&gt;acts_as_yaffle&lt;/code&gt; 을 호출하는 모든 Active Record 객체에 'squawk'라는 메소드를 추가합니다 . 'squawk'방법은 단순히 데이터베이스에있는 필드 중 하나의 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="fe3b5fbcf11c1dfc262bf8c84ee1e6e1548bcd2d" translate="yes" xml:space="preserve">
          <source>This plugin will expect that you've added a method to your model named &lt;code&gt;last_squawk&lt;/code&gt;. However, the plugin users might have already defined a method on their model named &lt;code&gt;last_squawk&lt;/code&gt; that they use for something else. This plugin will allow the name to be changed by adding a class method called &lt;code&gt;yaffle_text_field&lt;/code&gt;.</source>
          <target state="translated">이 플러그인은 모델에 &lt;code&gt;last_squawk&lt;/code&gt; 라는 메소드를 추가했을 것으로 예상합니다 . 그러나 플러그인 사용자는 모델에 &lt;code&gt;last_squawk&lt;/code&gt; 라는 이름의 메소드를 이미 정의했을 수도 있습니다 . 이 플러그인은 &lt;code&gt;yaffle_text_field&lt;/code&gt; 라는 클래스 메소드를 추가하여 이름을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d4080fd0fea66e1a2f188bd170ca3ba9801b72a4" translate="yes" xml:space="preserve">
          <source>This process is repeated, fetching more batches as needed, until all of the records have been processed.</source>
          <target state="translated">모든 레코드가 처리 될 때까지이 프로세스가 반복되어 필요에 따라 더 많은 배치를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ff5280ccaade258e94436683ba2403f8e398b4f3" translate="yes" xml:space="preserve">
          <source>This produces:</source>
          <target state="translated">이것은 다음을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b9e3a139577ecf955c04ee19fdda1ef4c883f12a" translate="yes" xml:space="preserve">
          <source>This references the name of the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;&lt;code&gt;belongs_to&lt;/code&gt;&lt;/a&gt; association that also used the &lt;code&gt;:author&lt;/code&gt; symbol. After loading the posts, &lt;code&gt;find&lt;/code&gt; will collect the &lt;code&gt;author_id&lt;/code&gt; from each one and load all of the referenced authors with one query. Doing so will cut down the number of queries from 201 to 102.</source>
          <target state="translated">이것은 또한 &lt;code&gt;:author&lt;/code&gt; 기호를 사용하는 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt; &lt;code&gt;belongs_to&lt;/code&gt; &lt;/a&gt; 연관 의 이름을 참조합니다 . 게시물을로드 한 후 &lt;code&gt;find&lt;/code&gt; 는 각 게시물 에서 &lt;code&gt;author_id&lt;/code&gt; 를 수집하고 하나의 쿼리로 참조 된 모든 작성자를로드합니다. 이렇게하면 쿼리 수가 201 개에서 102 개로 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="ff62fb6b2a142fa597ee4f3dc08a5abdb24c77c2" translate="yes" xml:space="preserve">
          <source>This references the name of the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association that also used the &lt;code&gt;:author&lt;/code&gt; symbol. After loading the posts, &lt;code&gt;find&lt;/code&gt; will collect the &lt;code&gt;author_id&lt;/code&gt; from each one and load all of the referenced authors with one query. Doing so will cut down the number of queries from 201 to 102.</source>
          <target state="translated">이것은 &lt;code&gt;:author&lt;/code&gt; 기호를 사용하는 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; 연관 의 이름을 참조합니다 . 게시물을로드 한 후 &lt;code&gt;find&lt;/code&gt; 는 각 게시물 에서 &lt;code&gt;author_id&lt;/code&gt; 를 수집하고 하나의 쿼리로 모든 참조 된 저자를로드합니다. 이렇게하면 쿼리 수가 201 개에서 102 개로 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="2e5b7c7ccde7f9318a82aed1d27c0af7800b565c" translate="yes" xml:space="preserve">
          <source>This relation can be &lt;a href=&quot;#bi-directional-associations&quot;&gt;bi-directional&lt;/a&gt; when used in combination with &lt;code&gt;belongs_to&lt;/code&gt; on the other model.</source>
          <target state="translated">이 관계는 다른 모델에서 &lt;code&gt;belongs_to&lt;/code&gt; 와 함께 사용할 때 &lt;a href=&quot;#bi-directional-associations&quot;&gt;양방향&lt;/a&gt; 이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a11435417ff912526d0f73321aa89242acdbc08b" translate="yes" xml:space="preserve">
          <source>This release includes some breaking changes to optional parts of the Action Cable JavaScript API:</source>
          <target state="translated">이 릴리스에는 액션 케이블 JavaScript API의 선택적 부분에 대한 몇 가지 주요 변경 사항이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f85fbf1557477fbbaf24978943eb96603597f6ce" translate="yes" xml:space="preserve">
          <source>This removes the &lt;code&gt;&quot;&lt;/code&gt; characters wrapping the value.</source>
          <target state="translated">값을 래핑 하는 &lt;code&gt;&quot;&lt;/code&gt; 문자를 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="3ed4e429a043b344dbd88b0a4f362f59aabf7379" translate="yes" xml:space="preserve">
          <source>This renders the raw file (it doesn't support ERB or other handlers). By default it is rendered within the current layout.</source>
          <target state="translated">이는 원시 파일을 렌더링합니다 (ERB 또는 기타 핸들러를 지원하지 않음). 기본적으로 현재 레이아웃 내에서 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="f780ebd959678062386a3bce985fc0cb8f1664bf" translate="yes" xml:space="preserve">
          <source>This resourceful route:</source>
          <target state="translated">이 풍부한 경로 :</target>
        </trans-unit>
        <trans-unit id="576d2193c977cb5091ad3f1c37f8cb18711fb115" translate="yes" xml:space="preserve">
          <source>This restriction only applies to explicit namespaces. Classes and modules not defining a namespace can be defined using those idioms.</source>
          <target state="translated">이 제한은 명시 적 네임 스페이스에만 적용됩니다. 네임 스페이스를 정의하지 않는 클래스와 모듈은 이러한 관용구를 사용하여 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73744111630d7e542dc9c93cf1cea86e8eebd2fa" translate="yes" xml:space="preserve">
          <source>This returned &quot;some&amp;lt;script&amp;gt;alert('hello')&amp;lt;/script&amp;gt;&quot;, which makes an attack work. That's why a permitted list approach is better, using the updated Rails 2 method sanitize():</source>
          <target state="translated">이것은 &quot;some &amp;lt;script&amp;gt; alert ( 'hello') &amp;lt;/ script&amp;gt;&quot;를 반환하여 공격을 일으 킵니다. 이것이 업데이트 된 Rails 2 메소드 sanitize ()를 사용하여 허용 된리스트 접근 방식이 더 나은 이유입니다.</target>
        </trans-unit>
        <trans-unit id="3624b42e4762e6bebeb4d04f13aa2432f73cf270" translate="yes" xml:space="preserve">
          <source>This returned &lt;code&gt;&quot;some&amp;lt;script&amp;gt;alert('hello')&amp;lt;/script&amp;gt;&quot;&lt;/code&gt;, which makes an attack work. That's why a permitted list approach is better, using the updated Rails 2 method &lt;code&gt;sanitize()&lt;/code&gt;:</source>
          <target state="translated">이것은 &lt;code&gt;&quot;some&amp;lt;script&amp;gt;alert('hello')&amp;lt;/script&amp;gt;&quot;&lt;/code&gt; 반환 하여 공격이 작동하도록합니다. 그렇기 때문에 업데이트 된 Rails 2 메서드 &lt;code&gt;sanitize()&lt;/code&gt; 사용하는 허용 목록 접근 방식이 더 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="98b7c7a54c6b39d9fd318d872ab8a7bf6fe7240e" translate="yes" xml:space="preserve">
          <source>This returns an instance of the class &lt;code&gt;ActiveModel::Errors&lt;/code&gt; containing all errors, each error is represented by an &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Error.html&quot;&gt;&lt;code&gt;ActiveModel::Error&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">모든 &lt;code&gt;ActiveModel::Errors&lt;/code&gt; 포함하는 ActiveModel :: Errors 클래스의 인스턴스를 반환하며 각 오류는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Error.html&quot;&gt; &lt;code&gt;ActiveModel::Error&lt;/code&gt; &lt;/a&gt; 객체로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="420dbe0c61cbd2a97b9989fc9b43d572d2951620" translate="yes" xml:space="preserve">
          <source>This returns the date and total price for each order object, grouped by the day they were ordered and where the price is more than $100.</source>
          <target state="translated">주문한 날짜 및 가격이 $ 100를 초과하는 각 주문 오브젝트의 날짜 및 총 가격을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a553cb34a3e6408276d56a187017e07b58d9eb4a" translate="yes" xml:space="preserve">
          <source>This returns the date and total price for each order object, grouped by the day they were ordered and where the total is more than $200.</source>
          <target state="translated">그러면 주문한 날짜별로 그룹화되고 총액이 $ 200 이상인 각 주문 개체의 날짜와 총 가격이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="164c8bc01e03f24cbab05f04a51c89948101ff5c" translate="yes" xml:space="preserve">
          <source>This route would match &lt;code&gt;photos/12&lt;/code&gt; or &lt;code&gt;/photos/long/path/to/12&lt;/code&gt;, setting &lt;code&gt;params[:other]&lt;/code&gt; to &lt;code&gt;&quot;12&quot;&lt;/code&gt; or &lt;code&gt;&quot;long/path/to/12&quot;&lt;/code&gt;. The fragments prefixed with a star are called &quot;wildcard segments&quot;.</source>
          <target state="translated">이 경로는 일치합니다 &lt;code&gt;photos/12&lt;/code&gt; 또는 &lt;code&gt;/photos/long/path/to/12&lt;/code&gt; 설정, &lt;code&gt;params[:other]&lt;/code&gt; 에 &lt;code&gt;&quot;12&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;long/path/to/12&quot;&lt;/code&gt; . 별표가 붙은 조각을 &quot;와일드 카드 세그먼트&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="df2777df84264756ffc7443bbdff70a239505328" translate="yes" xml:space="preserve">
          <source>This route would match &lt;code&gt;photos/12&lt;/code&gt; or &lt;code&gt;/photos/long/path/to/12&lt;/code&gt;, setting &lt;code&gt;params[:other]&lt;/code&gt; to &lt;code&gt;&quot;12&quot;&lt;/code&gt; or &lt;code&gt;&quot;long/path/to/12&quot;&lt;/code&gt;. The segments prefixed with a star are called &quot;wildcard segments&quot;.</source>
          <target state="translated">이 경로는 &lt;code&gt;photos/12&lt;/code&gt; 또는 &lt;code&gt;/photos/long/path/to/12&lt;/code&gt; 와 일치 하며 &lt;code&gt;params[:other]&lt;/code&gt; 를 &lt;code&gt;&quot;12&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;long/path/to/12&quot;&lt;/code&gt; 로 설정 합니다. 별표가 붙은 세그먼트를 &quot;와일드 카드 세그먼트&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="6e794fda21608573b4957498e3f119f175ac228c" translate="yes" xml:space="preserve">
          <source>This route would match paths such as &lt;code&gt;/photos/A12345&lt;/code&gt;, but not &lt;code&gt;/photos/893&lt;/code&gt;. You can more succinctly express the same route this way:</source>
          <target state="translated">이 경로는 &lt;code&gt;/photos/A12345&lt;/code&gt; 와 같은 경로와 일치 하지만 &lt;code&gt;/photos/893&lt;/code&gt; 과는 일치 하지 않습니다 . 이 방법으로 같은 경로를 간결하게 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88307a9a355c9cfda7c63f87346f4b8d457bfac3" translate="yes" xml:space="preserve">
          <source>This route would respond to paths such as &lt;code&gt;/photos/1/with_user/2&lt;/code&gt;. In this case, &lt;code&gt;params&lt;/code&gt; would be &lt;code&gt;{ controller: 'photos', action: 'show', id: '1', user_id: '2' }&lt;/code&gt;.</source>
          <target state="translated">이 경로는 &lt;code&gt;/photos/1/with_user/2&lt;/code&gt; 와 같은 경로에 응답합니다 . 이 경우 &lt;code&gt;params&lt;/code&gt; 는 &lt;code&gt;{ controller: 'photos', action: 'show', id: '1', user_id: '2' }&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8fc25f6a8ab0b96bceea194ab647bc637647c8f4" translate="yes" xml:space="preserve">
          <source>This sanitize helper will HTML encode all tags and strip all attributes that aren't specifically allowed.</source>
          <target state="translated">이 도우미 도우미는 모든 태그를 HTML로 인코딩하고 특별히 허용되지 않는 모든 속성을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="5909b520101c5e8f8ea7f5b936b6a0ba245d8416" translate="yes" xml:space="preserve">
          <source>This section covers how to make the &lt;code&gt;User&lt;/code&gt; class configurable, followed by general configuration tips for the engine.</source>
          <target state="translated">이 섹션에서는 &lt;code&gt;User&lt;/code&gt; 클래스를 구성 할 수있는 방법 과 엔진에 대한 일반적인 구성 팁을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="ce851e7bd6dfa7a8a7aab4b2ca0f3b0b2ab8cf00" translate="yes" xml:space="preserve">
          <source>This section explains how to add and/or override engine MVC functionality in the main Rails application.</source>
          <target state="translated">이 섹션에서는 기본 Rails 애플리케이션에서 엔진 MVC 기능을 추가 및 / 또는 재정의하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="3f0e3a178afde103dbca03460119c3bee67bc19f" translate="yes" xml:space="preserve">
          <source>This section uses &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; as an example method in this preamble, but the options described apply to all sub-sections.</source>
          <target state="translated">이 섹션에서는 이 서문의 예제 방법으로 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 를 사용 하지만 설명 된 옵션은 모든 하위 섹션에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="919a0c9a7ba5508d98414a70e473b42a00002d44" translate="yes" xml:space="preserve">
          <source>This section uses count as an example method in this preamble, but the options described apply to all sub-sections.</source>
          <target state="translated">이 섹션에서는이 프리앰블에서 count를 예제 방법으로 사용하지만 설명 된 옵션은 모든 하위 섹션에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="1cea6f4e869c9cda51f2c847618e8be335c709bc" translate="yes" xml:space="preserve">
          <source>This section was written by &lt;a href=&quot;https://stackoverflow.com/questions/16546730/logging-in-rails-is-there-any-performance-hit/16546935#16546935&quot;&gt;Jon Cairns at a StackOverflow answer&lt;/a&gt; and it is licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;cc by-sa 4.0&lt;/a&gt;.</source>
          <target state="translated">이 섹션은 &lt;a href=&quot;https://stackoverflow.com/questions/16546730/logging-in-rails-is-there-any-performance-hit/16546935#16546935&quot;&gt;Jon Cairns가 StackOverflow 답변&lt;/a&gt; 으로 작성했으며 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;cc by-sa 4.0에&lt;/a&gt; 따라 사용이 허가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="366a2e60a1f26887202760405004422dda63c6d2" translate="yes" xml:space="preserve">
          <source>This section will explain how to add a method to String that will be available anywhere in your Rails application.</source>
          <target state="translated">이 섹션에서는 Rails 애플리케이션의 어느 곳에서나 사용할 수있는 String에 메소드를 추가하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="170a3d51ce6ad6c8b8d190303b295cb96ceb842c" translate="yes" xml:space="preserve">
          <source>This section will provide a step-by-step guide to creating a job and enqueuing it.</source>
          <target state="translated">이 섹션에서는 작업을 작성하고 대기열에 넣는 방법에 대한 단계별 안내서를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="38da0dbe2a5686429679c4badc45fcbedbf87454" translate="yes" xml:space="preserve">
          <source>This section will provide a step-by-step guide to creating a mailer and its views.</source>
          <target state="translated">이 섹션에서는 메일러 및 해당보기를 작성하는 데 대한 단계별 안내서를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="996b1979fa871d3971a5413e931ca1f8a0454986" translate="yes" xml:space="preserve">
          <source>This sets &lt;code&gt;:name&lt;/code&gt; field on products to a &lt;code&gt;NOT NULL&lt;/code&gt; column and the default value of the &lt;code&gt;:approved&lt;/code&gt; field from true to false.</source>
          <target state="translated">이 세트 &lt;code&gt;:name&lt;/code&gt; A와 제품에 대한 필드 &lt;code&gt;NOT NULL&lt;/code&gt; 열과의 기본값 &lt;code&gt;:approved&lt;/code&gt; 참에서 거짓으로 필드.</target>
        </trans-unit>
        <trans-unit id="2c101b3e3300554fce3b4c6e14c72955ac25863e" translate="yes" xml:space="preserve">
          <source>This should be not be called manually but set in database.yml.</source>
          <target state="translated">수동으로 호출하지 말고 database.yml에서 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="b9bd825fd18aa062058d3d233dd21f8c957147a4" translate="yes" xml:space="preserve">
          <source>This should not result in any noticeable differences for most applications. However, if you need some non-mailer methods to be executed synchronously, and you were previously relying on the synchronous proxying behavior, you should define them as class methods on the mailer class directly:</source>
          <target state="translated">이로 인해 대부분의 응용 프로그램에서 눈에 띄는 차이가 발생하지 않아야합니다. 그러나 일부 메일러가 아닌 메소드를 동기식으로 실행해야하고 이전에 동기 프록시 동작에 의존하는 경우, 메일러 클래스에서 클래스 메소드로 직접 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="029ad8bff1dbfaba67cfda070c4aea0016bf8c83" translate="yes" xml:space="preserve">
          <source>This simplifies</source>
          <target state="translated">이것은 단순화</target>
        </trans-unit>
        <trans-unit id="4bcd150fa2e648ee216ab53da70e278e981e8e0d" translate="yes" xml:space="preserve">
          <source>This simplifies maintenance and keeps things clean by allowing related code to be grouped before inclusion elsewhere.</source>
          <target state="translated">이렇게하면 다른 곳에 포함하기 전에 관련 코드를 그룹화 할 수있어 유지 보수가 간단 해지고 작업이 깨끗해집니다.</target>
        </trans-unit>
        <trans-unit id="6c36327b0b450f9facc49b6d6fdaeb4ff9516cd5" translate="yes" xml:space="preserve">
          <source>This small step has some wonderful ripple effects. We can</source>
          <target state="translated">이 작은 단계에는 멋진 파급 효과가 있습니다. 우리는 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="f45ab8191cf4093a46a3a866a54714973d196495" translate="yes" xml:space="preserve">
          <source>This snippet means that when this file is loaded, it will encounter &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. This encounter causes Ruby to look for the definition of that constant and will require it. This causes the entire Active Record framework to be loaded on boot.</source>
          <target state="translated">이 스 니펫은이 파일이로드 될 때 &lt;code&gt;ActiveRecord::Base&lt;/code&gt; 가 발생 함을 의미합니다 . 이 문제로 인해 Ruby는 해당 상수의 정의를 찾아서 요구합니다. 이로 인해 전체 Active Record 프레임 워크가 부팅시로드됩니다.</target>
        </trans-unit>
        <trans-unit id="aa881d45f0c4366521f545464e5ba3e7812d19ea" translate="yes" xml:space="preserve">
          <source>This solution has aforementioned advantages, however, you may not be able or may not want to provide different localizations (&quot;language versions&quot;) on different domains. The most obvious solution would be to include locale code in the URL params (or request path).</source>
          <target state="translated">이 솔루션은 앞서 언급 한 장점이 있지만 다른 도메인에서 다른 현지화 ( &quot;언어 버전&quot;)를 제공하지 않거나 제공하지 않을 수 있습니다. 가장 확실한 해결책은 URL 매개 변수 (또는 요청 경로)에 로캘 코드를 포함시키는 것입니다.</target>
        </trans-unit>
        <trans-unit id="6cc35be7d9ae462482385e6372e8203e7e3b83dc" translate="yes" xml:space="preserve">
          <source>This surprising constant resolution can be observed with any qualifying class:</source>
          <target state="translated">이 놀라운 일정한 해상도는 모든 적격 클래스에서 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d6e5bed0ce1b0863d024c50daf0ff2f44eb581d" translate="yes" xml:space="preserve">
          <source>This table does not follow the Rails conventions at all. Because simple PostgreSQL views are updateable by default, we can wrap it as follows:</source>
          <target state="translated">이 표는 Rails 규약을 전혀 따르지 않습니다. 간단한 PostgreSQL보기는 기본적으로 업데이트 가능하므로 다음과 같이 줄 바꿈 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d654789a6b34795bd8eecb0dd8fa3b82b8d4a534" translate="yes" xml:space="preserve">
          <source>This tells Rails to look for template variations of the same format. You can specify a list of variants by passing the &lt;code&gt;:variants&lt;/code&gt; option with a symbol or an array.</source>
          <target state="translated">이것은 Rails에게 같은 형식의 템플릿 변형을 찾도록 지시합니다. &lt;code&gt;:variants&lt;/code&gt; 옵션을 기호 또는 배열과 함께 전달하여 변형 목록을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92accf5b96f44c594837e65bd538fd5330ba5c91" translate="yes" xml:space="preserve">
          <source>This tells the application that you still want to perform a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;index&lt;/code&gt; action of this controller, but you want to use the engine's route to get there, rather than the application's one.</source>
          <target state="translated">이것은 응용 프로그램에게 여전히이 제어기 의 &lt;code&gt;index&lt;/code&gt; 조치에 대한 &lt;code&gt;GET&lt;/code&gt; 요청 을 수행하길 원 하지만 응용 프로그램이 아닌 엔진의 경로를 사용하여 도달하려고합니다.</target>
        </trans-unit>
        <trans-unit id="cb493140b3c17b27b3930bd0085286984f205efa" translate="yes" xml:space="preserve">
          <source>This tells us that we don't have the necessary models (Hickwall and Wickwall) that we are trying to test. We can easily generate these models in our &quot;dummy&quot; Rails application by running the following commands from the &lt;code&gt;test/dummy&lt;/code&gt; directory:</source>
          <target state="translated">이것은 우리가 테스트하려는 필요한 모델 (Hickwall 및 Wickwall)이 없다는 것을 알려줍니다. &lt;code&gt;test/dummy&lt;/code&gt; 디렉토리 에서 다음 명령을 실행하여 &quot;dummy&quot;Rails 애플리케이션에서 이러한 모델을 쉽게 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="10dd27cd48dfc49d4b02b59dd1189e4f38d50cc2" translate="yes" xml:space="preserve">
          <source>This test is pretty simple and only asserts that the channel subscribes the connection to a particular stream.</source>
          <target state="translated">이 테스트는 매우 간단하며 채널이 특정 스트림에 대한 연결을 구독한다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="b43c64186934ad15a78ee71a0e7c3eb3082193d8" translate="yes" xml:space="preserve">
          <source>This test is pretty simple and only asserts that the job got the work done as expected.</source>
          <target state="translated">이 테스트는 매우 간단하며 작업이 예상대로 작업을 완료했다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="afebf0aa9349219f73e863c9df89b502a00da789" translate="yes" xml:space="preserve">
          <source>This test should now pass.</source>
          <target state="translated">이 테스트는 이제 통과해야합니다.</target>
        </trans-unit>
        <trans-unit id="56961ab49613bc56e2996a3331a4d079b93b9639" translate="yes" xml:space="preserve">
          <source>This time we point the form to the &lt;code&gt;update&lt;/code&gt; action, which is not defined yet but will be very soon.</source>
          <target state="translated">이번에는 양식이 &lt;code&gt;update&lt;/code&gt; 작업 을 가리키며 아직 정의되지 않았지만 곧 시작될 것입니다.</target>
        </trans-unit>
        <trans-unit id="9ca70f5f3dc1dd42668e4a159b6a2429abbf41f6" translate="yes" xml:space="preserve">
          <source>This tutorial assumes you have basic Rails knowledge from reading the &lt;a href=&quot;getting_started&quot;&gt;Getting Started with Rails Guide&lt;/a&gt;.</source>
          <target state="translated">이 튜토리얼은 Rails &lt;a href=&quot;getting_started&quot;&gt;시작하기 안내서&lt;/a&gt; 를 읽고 기본적인 Rails 지식이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="25604662103c41fbbbfd608e80d2d0e11d06a2b5" translate="yes" xml:space="preserve">
          <source>This type is mapped to &lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActiveSupport/Duration.html&quot;&gt;&lt;code&gt;ActiveSupport::Duration&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">이 유형은 &lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActiveSupport/Duration.html&quot;&gt; &lt;code&gt;ActiveSupport::Duration&lt;/code&gt; &lt;/a&gt; 개체에 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="3d3bd7a5e7de97b9f032a27bc89818fb97a80f0b" translate="yes" xml:space="preserve">
          <source>This type is mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/core-2.2.2/Range.html&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">이 유형은 Ruby &lt;a href=&quot;https://ruby-doc.org/core-2.2.2/Range.html&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt; 객체에 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="ba14ff76b4e30998d350a8e0da95663cfc310d27" translate="yes" xml:space="preserve">
          <source>This type is mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/core-2.5.0/Range.html&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">이 유형은 Ruby &lt;a href=&quot;https://ruby-doc.org/core-2.5.0/Range.html&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt; 개체에 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="96c953e1138b0011b35f3f0df8e1d76a6c9739f6" translate="yes" xml:space="preserve">
          <source>This unique ID is useful for tracing a request from end-to-end as part of logging or debugging. This relies on the Rack variable set by the &lt;a href=&quot;requestid&quot;&gt;&lt;code&gt;ActionDispatch::RequestId&lt;/code&gt;&lt;/a&gt; middleware.</source>
          <target state="translated">이 고유 ID는 로깅 또는 디버깅의 일부로 종단 간 요청을 추적하는 데 유용합니다. 이것은 &lt;a href=&quot;requestid&quot;&gt; &lt;code&gt;ActionDispatch::RequestId&lt;/code&gt; &lt;/a&gt; 미들웨어에 의해 설정된 Rack 변수에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="d7aa7b6c5ac24dec69a78ce68fc4a7ade298e860" translate="yes" xml:space="preserve">
          <source>This unique ID is useful for tracing a request from end-to-end as part of logging or debugging. This relies on the Rack variable set by the &lt;a href=&quot;requestid&quot;&gt;ActionDispatch::RequestId&lt;/a&gt; middleware.</source>
          <target state="translated">이 고유 ID는 로깅 또는 디버깅의 일부로 엔드 투 엔드 요청을 추적하는 데 유용합니다. 이것은 &lt;a href=&quot;requestid&quot;&gt;ActionDispatch :: RequestId&lt;/a&gt; 미들웨어에 의해 설정된 Rack 변수에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="dc58a16aafad8352da21814ae85f67a65415d30e" translate="yes" xml:space="preserve">
          <source>This used to return a hash on which you could access values with String keys. That was deprecated in 6.0, and now doesn't work anymore.</source>
          <target state="translated">이것은 문자열 키로 값에 액세스 할 수있는 해시를 반환하는 데 사용되었습니다. 6.0에서 더 이상 사용되지 않으며 이제 더 이상 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1e503f7c3b697b172f1fa3d71d3e39e53254e0f8" translate="yes" xml:space="preserve">
          <source>This validation is very specific to web applications and this 'acceptance' does not need to be recorded anywhere in your database. If you don't have a field for it, the helper will create a virtual attribute. If the field does exist in your database, the &lt;code&gt;accept&lt;/code&gt; option must be set to or include &lt;code&gt;true&lt;/code&gt; or else the validation will not run.</source>
          <target state="translated">이 유효성 검사는 웹 응용 프로그램에만 적용되며이 '수락'은 데이터베이스의 어느 곳에도 기록 할 필요가 없습니다. 필드가 없으면 도우미가 가상 속성을 만듭니다. 필드가 데이터베이스에 존재하는 경우 &lt;code&gt;accept&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하거나 포함해야합니다. 그렇지 않으면 유효성 검증이 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5f64fa1df58f66d796291430ff6825e8cfabc422" translate="yes" xml:space="preserve">
          <source>This validation is very specific to web applications and this 'acceptance' does not need to be recorded anywhere in your database. If you don't have a field for it, the helper will just create a virtual attribute. If the field does exist in your database, the &lt;code&gt;accept&lt;/code&gt; option must be set to or include &lt;code&gt;true&lt;/code&gt; or else the validation will not run.</source>
          <target state="translated">이 유효성 검사는 웹 응용 프로그램에만 적용되며이 '수락'은 데이터베이스의 어느 곳에 나 기록 할 필요가 없습니다. 필드가 없으면 도우미는 가상 속성 만 만듭니다. 필드가 데이터베이스에 존재하면 &lt;code&gt;accept&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하거나 포함해야합니다. 그렇지 않으면 유효성 검증이 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b3a0c8db08f46cab5cfdea7374449e3ea7d2643f" translate="yes" xml:space="preserve">
          <source>This validation will work with all of the association types.</source>
          <target state="translated">이 유효성 검사는 모든 연결 유형에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a416a8d7b0d7770891a41f445e4cfc9153eeb6f9" translate="yes" xml:space="preserve">
          <source>This validator defers to the Active Model validation for presence, adding the check to see that an associated object is not marked for destruction. This prevents the parent object from validating successfully and saving, which then deletes the associated object, thus putting the parent object into an invalid state.</source>
          <target state="translated">이 유효성 검사기는 존재 여부에 대한 활성 모델 유효성 검사를 연기하고 관련 개체가 삭제 표시되어 있지 않은지 확인합니다. 이렇게하면 부모 개체가 성공적으로 유효성을 검사하고 저장하지 못하게되므로 연결된 개체가 삭제되어 부모 개체가 잘못된 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="78c93e981f9362b83125078215501e8c63d15d26" translate="yes" xml:space="preserve">
          <source>This value can be later fetched using either &lt;code&gt;:key&lt;/code&gt; or &lt;code&gt;'key'&lt;/code&gt;.</source>
          <target state="translated">이 값은 나중에 &lt;code&gt;:key&lt;/code&gt; 또는 &lt;code&gt;'key'&lt;/code&gt; 를 사용하여 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e0b4044796f51dddd7358d3a25c148eaaaf81ce8" translate="yes" xml:space="preserve">
          <source>This verifier can be used to generate and verify signed messages in the application.</source>
          <target state="translated">이 검증기는 애플리케이션에서 서명 된 메시지를 생성하고 확인하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0dc6e041dee5ce11365d9c669e9362b10f8b2b00" translate="yes" xml:space="preserve">
          <source>This way it is possible to use the partial without the need to declare all local variables.</source>
          <target state="translated">이런 식으로 모든 지역 변수를 선언 할 필요없이 부분을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce96deed83fa3f2a3c48034aaece9fcc4fd976c2" translate="yes" xml:space="preserve">
          <source>This way you can move inside the file and see the code above the line where you added the &lt;code&gt;byebug&lt;/code&gt; call. Finally, to see where you are in the code again you can type &lt;code&gt;list=&lt;/code&gt;</source>
          <target state="translated">이렇게하면 파일 내부를 이동하여 &lt;code&gt;byebug&lt;/code&gt; 호출 을 추가 한 줄 위의 코드를 볼 수 있습니다 . 마지막으로 코드의 위치를 ​​다시 &lt;code&gt;list=&lt;/code&gt; 입력하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="e9c551fd8ee8c40843d50c50c27b05679e1361bc" translate="yes" xml:space="preserve">
          <source>This way you can provide special translations for various error messages at different points in your model's inheritance chain and in the attributes, models, or default scopes.</source>
          <target state="translated">이렇게하면 모델 상속 체인의 여러 지점과 속성, 모델 또는 기본 범위에서 다양한 오류 메시지에 대한 특수 번역을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ef600fc0b9bad91b0106d7dd09941d637df28c1" translate="yes" xml:space="preserve">
          <source>This way you can provide special translations for various error messages at different points in your models inheritance chain and in the attributes, models, or default scopes.</source>
          <target state="translated">이 방법으로 모델 상속 체인과 속성, 모델 또는 기본 범위의 다른 지점에서 다양한 오류 메시지에 대한 특수 번역을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dcac8da51b29825b04cb1707ac04cd86a8bef4bc" translate="yes" xml:space="preserve">
          <source>This way, if an action sets a notice or an alert message, the layout will display it automatically.</source>
          <target state="translated">이렇게하면 작업이 알림 또는 경고 메시지를 설정하면 레이아웃에 자동으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="552eed590ff40e116e6775d26eab6fd8aa7cc01f" translate="yes" xml:space="preserve">
          <source>This way, the &lt;code&gt;before_destroy&lt;/code&gt; gets executed before the &lt;code&gt;dependent: :destroy&lt;/code&gt; is called, and the data is still available.</source>
          <target state="translated">이런 식으로, &lt;code&gt;before_destroy&lt;/code&gt; &lt;code&gt;dependent: :destroy&lt;/code&gt; 는 dependent :: destroy 가 호출 되기 전에 실행되고 데이터는 여전히 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="8b3ce35f7afe444f1223e680e7fe21a72de5cbe0" translate="yes" xml:space="preserve">
          <source>This way, the &lt;code&gt;before_destroy&lt;/code&gt; is executed before the &lt;code&gt;dependent: :destroy&lt;/code&gt; is called, and the data is still available.</source>
          <target state="translated">이런 식으로 &lt;code&gt;before_destroy&lt;/code&gt; 는 &lt;code&gt;dependent: :destroy&lt;/code&gt; 가 호출 되기 전에 실행 되며 데이터는 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da5ffdee1702839500a02d13e03206410520dadf" translate="yes" xml:space="preserve">
          <source>This way, the client either sends only the hidden field (representing the check box is unchecked), or both fields. Since the HTML specification says key/value pairs have to be sent in the same order they appear in the form, and parameters extraction gets the last occurrence of any repeated key in the query string, that works for ordinary forms.</source>
          <target state="translated">이런 방식으로 클라이언트는 숨겨진 필드 만 보내거나 (확인란이 선택되어 있지 않음) 두 필드를 모두 보냅니다. HTML 사양에 따르면 키 / 값 쌍은 양식에 나타나는 순서와 동일한 순서로 전송되어야하므로 매개 변수 추출은 쿼리 문자열에서 반복 된 키의 마지막 항목을 가져와 일반 양식에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="362f471c85d0dd467a33b55b75858c94bf1bc0b0" translate="yes" xml:space="preserve">
          <source>This way, the user will see the full city name, but &lt;code&gt;params[:city]&lt;/code&gt; will be one of &lt;code&gt;&quot;BE&quot;&lt;/code&gt;, &lt;code&gt;&quot;CHI&quot;&lt;/code&gt;, or &lt;code&gt;&quot;MD&quot;&lt;/code&gt;.</source>
          <target state="translated">이렇게하면 사용자는 전체 도시 이름을 볼 수 있지만 &lt;code&gt;params[:city]&lt;/code&gt; 는 &lt;code&gt;&quot;BE&quot;&lt;/code&gt; , &lt;code&gt;&quot;CHI&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;MD&quot;&lt;/code&gt; 중 하나가 됩니다.</target>
        </trans-unit>
        <trans-unit id="c357b658da2eb3a5e83cb262d8556b10f5849eeb" translate="yes" xml:space="preserve">
          <source>This way, you can separate model and model attribute names from text inside views, and all of this from the &quot;defaults&quot; (e.g. date and time formats). Other stores for the i18n library could provide different means of such separation.</source>
          <target state="translated">이런 식으로 모델 및 모델 속성 이름을 뷰 내부의 텍스트와 분리하고이 모든 것을 &quot;기본&quot;(예 : 날짜 및 시간 형식)과 분리 할 수 ​​있습니다. i18n 라이브러리의 다른 상점은 이러한 분리의 다른 수단을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90897c4cace33b6b3b81396934d7f66552fc95da" translate="yes" xml:space="preserve">
          <source>This will add &lt;code&gt;app/views/direct&lt;/code&gt; to the end of the lookup paths.</source>
          <target state="translated">조회 경로 끝에 &lt;code&gt;app/views/direct&lt;/code&gt; 를 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="de517144e59b760b9376663b58d2c719b92d2795" translate="yes" xml:space="preserve">
          <source>This will allow you to specify which models to destroy in the attributes hash by adding a form element for the &lt;code&gt;_destroy&lt;/code&gt; parameter with a value that evaluates to &lt;code&gt;true&lt;/code&gt; (e.g. 1, '1', true, or 'true'):</source>
          <target state="translated">이렇게하면 &lt;code&gt;true&lt;/code&gt; 로 평가되는 값 (예 : 1, '1', true 또는 'true')으로 &lt;code&gt;_destroy&lt;/code&gt; 매개 변수에 대한 양식 요소를 추가하여 속성 해시에서 삭제할 모델을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e63c54344163d6dadd2274516afdaf16ce6bcf3a" translate="yes" xml:space="preserve">
          <source>This will allow you to specify which models to destroy in the attributes hash by adding a form element for the &lt;code&gt;_destroy&lt;/code&gt; parameter with a value that evaluates to &lt;code&gt;true&lt;/code&gt; (eg. 1, '1', true, or 'true'):</source>
          <target state="translated">이를 통해 &lt;code&gt;_destroy&lt;/code&gt; 매개 변수 의 양식 요소 를 &lt;code&gt;true&lt;/code&gt; 로 평가되는 값 (예 : 1, '1', true 또는 'true') 으로 추가하여 속성 해시에서 파괴 할 모델을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a67465a53d1c7b44290f957f6736edb684f7e42c" translate="yes" xml:space="preserve">
          <source>This will also create routing helpers such as &lt;code&gt;magazine_ads_url&lt;/code&gt; and &lt;code&gt;edit_magazine_ad_path&lt;/code&gt;. These helpers take an instance of Magazine as the first parameter (&lt;code&gt;magazine_ads_url(@magazine)&lt;/code&gt;).</source>
          <target state="translated">또한 &lt;code&gt;magazine_ads_url&lt;/code&gt; 및 &lt;code&gt;edit_magazine_ad_path&lt;/code&gt; 와 같은 라우팅 도우미를 생성 합니다. 이 헬퍼는 Magazine의 인스턴스를 첫 번째 매개 변수 ( &lt;code&gt;magazine_ads_url(@magazine)&lt;/code&gt; )로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5f05910d168dd2e7b873c8c8b483bcfa7a005ecd" translate="yes" xml:space="preserve">
          <source>This will assign &amp;ldquo;weblog_standard&amp;rdquo; as the WeblogController's layout for all actions except for the &lt;code&gt;rss&lt;/code&gt; action, which will be rendered directly, without wrapping a layout around the rendered view.</source>
          <target state="translated">이렇게하면 &lt;code&gt;rss&lt;/code&gt; 작업을 제외한 모든 작업에 대한 &quot;weblog_standard&quot;가 WeblogController의 레이아웃으로 지정됩니다.이 작업 은 렌더링 된 뷰 주위에 레이아웃을 배치하지 않고 직접 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="2cb47c745d6bfc8f2425c96cfe1b1d075a290769" translate="yes" xml:space="preserve">
          <source>This will automatically create the corresponding &lt;a href=&quot;#scopes&quot;&gt;scopes&lt;/a&gt; to query the model. Methods to transition between states and query the current state are also added.</source>
          <target state="translated">그러면 모델을 쿼리 할 해당 &lt;a href=&quot;#scopes&quot;&gt;범위&lt;/a&gt; 가 자동으로 생성됩니다 . 상태를 전환하고 현재 상태를 쿼리하는 방법도 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="3a266bdb0ffdd739b93eafa98b37d0bd86eb0fc6" translate="yes" xml:space="preserve">
          <source>This will automatically include a security token in all forms and Ajax requests generated by Rails. If the security token doesn't match what was expected, an exception will be thrown.</source>
          <target state="translated">여기에는 모든 형태의 보안 토큰과 Rails가 생성 한 Ajax 요청이 자동으로 포함됩니다. 보안 토큰이 예상 한 것과 일치하지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c2688665b23b7e8fcef5368b613f3bd1b831b1ba" translate="yes" xml:space="preserve">
          <source>This will build an array of objects from the database for the scope, converting them into an array and iterating through them using &lt;code&gt;Array#select&lt;/code&gt;.</source>
          <target state="translated">이것은 범위에 대한 데이터베이스에서 객체의 배열을 작성하여 배열로 변환하고 &lt;code&gt;Array#select&lt;/code&gt; 를 사용하여 반복합니다 .</target>
        </trans-unit>
        <trans-unit id="eea2107956649c6c0807f2d8c76f050b93113c0b" translate="yes" xml:space="preserve">
          <source>This will clear all named routes and reload config/routes.rb if the file has been modified from last load. To absolutely force reloading, use &lt;code&gt;reload!&lt;/code&gt;.</source>
          <target state="translated">파일이 마지막로드에서 수정 된 경우 모든 명명 된 경로를 지우고 config / routes.rb를 다시로드합니다. 재 장전을 절대로하려면 재 장전을 사용하십시오 &lt;code&gt;reload!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0bc40807db89eb423564e922ca82e75c6fe1ae1d" translate="yes" xml:space="preserve">
          <source>This will connect to a new database for the queries inside the block. By default the `:writing` role will be used since all connections must be assigned a role. If you would like to use a different role you can pass a hash to database:</source>
          <target state="translated">블록 내부의 쿼리를 위해 새 데이터베이스에 연결됩니다. 모든 연결에 역할이 할당되어야하므로 기본적으로`: writing` 역할이 사용됩니다. 다른 역할을 사용하려면 데이터베이스에 해시를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c57269c9aa5df1a940d6b8b91a691ded351bdf1f" translate="yes" xml:space="preserve">
          <source>This will connect to the database named &lt;code&gt;blog_development&lt;/code&gt; using the &lt;code&gt;postgresql&lt;/code&gt; adapter. This same information can be stored in a URL and provided via an environment variable like this:</source>
          <target state="translated">&lt;code&gt;postgresql&lt;/code&gt; 어댑터를 사용하여 &lt;code&gt;blog_development&lt;/code&gt; 라는 데이터베이스에 연결합니다 . 동일한 정보를 URL에 저장하고 다음과 같은 환경 변수를 통해 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="caf1348f85efdb24907365e0e86d242c0b27732b" translate="yes" xml:space="preserve">
          <source>This will create 1000 very simple fixtures.</source>
          <target state="translated">이렇게하면 1000 개의 매우 간단한 조명기가 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="d6d75b5e504b1b631c89ae85e982ab79f5ed20a4" translate="yes" xml:space="preserve">
          <source>This will create &lt;code&gt;logout_path&lt;/code&gt; and &lt;code&gt;logout_url&lt;/code&gt; as named route helpers in your application. Calling &lt;code&gt;logout_path&lt;/code&gt; will return &lt;code&gt;/exit&lt;/code&gt;</source>
          <target state="translated">그러면 응용 프로그램에서 &lt;code&gt;logout_path&lt;/code&gt; 및 &lt;code&gt;logout_url&lt;/code&gt; 이 명명 된 경로 도우미로 생성 됩니다. &lt;code&gt;logout_path&lt;/code&gt; 를 호출 하면 &lt;code&gt;/exit&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="17cb90fdc58783a11912cf731d2c9b3634b84a2c" translate="yes" xml:space="preserve">
          <source>This will create a &lt;code&gt;Product&lt;/code&gt; model, mapped to a &lt;code&gt;products&lt;/code&gt; table at the database. By doing this you'll also have the ability to map the columns of each row in that table with the attributes of the instances of your model. Suppose that the &lt;code&gt;products&lt;/code&gt; table was created using an SQL (or one of its extensions) statement like:</source>
          <target state="translated">데이터베이스 의 &lt;code&gt;products&lt;/code&gt; 테이블에 맵핑 된 &lt;code&gt;Product&lt;/code&gt; 모델 이 작성 됩니다. 이렇게하면 해당 테이블의 각 행의 열을 모델 인스턴스의 속성과 매핑 할 수 있습니다. &lt;code&gt;products&lt;/code&gt; 테이블이 다음과 같은 SQL (또는 확장 중 하나) 명령문을 사용하여 작성 되었다고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d848877cdcbdc72e7235775c465573e4ce9123f" translate="yes" xml:space="preserve">
          <source>This will create a Rails application called Blog in a &lt;code&gt;blog&lt;/code&gt; directory and install the gem dependencies that are already mentioned in &lt;code&gt;Gemfile&lt;/code&gt; using &lt;code&gt;bundle install&lt;/code&gt;.</source>
          <target state="translated">이렇게하면 &lt;code&gt;blog&lt;/code&gt; 디렉토리에 Blog라는 Rails 애플리케이션이 생성되고 &lt;code&gt;bundle install&lt;/code&gt; 사용하여 &lt;code&gt;Gemfile&lt;/code&gt; 에 이미 언급 된 gem 종속성이 설치 됩니다.</target>
        </trans-unit>
        <trans-unit id="c8396fb6973acd136e824b9e7505c904be1d80c6" translate="yes" xml:space="preserve">
          <source>This will create a URL for that specific blob with that specific variant, which the &lt;a href=&quot;../representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt; can then produce on-demand.</source>
          <target state="translated">그러면 &lt;a href=&quot;../representationscontroller&quot;&gt;ActiveStorage :: RepresentationsController&lt;/a&gt; 가 주문형을 생성 할 수 있는 특정 변형이있는 해당 특정 Blob에 대한 URL이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="1a7c1825f8c6720c2fe95b8cf2b2f3c53bcf7139" translate="yes" xml:space="preserve">
          <source>This will create a URL for that specific blob with that specific variant, which the &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt; can then produce on-demand.</source>
          <target state="translated">그러면 &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage :: RepresentationsController&lt;/a&gt; 가 주문형을 생성 할 수 있는 특정 변형이있는 해당 특정 Blob에 대한 URL이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="84a78ded7227b7ea26aa01f7996ebe4ed08fbfe8" translate="yes" xml:space="preserve">
          <source>This will create a URL for that specific blob with that specific variant, which the ActiveStorage::RepresentationsController can then produce on-demand.</source>
          <target state="translated">그러면 ActiveStorage :: RepresentationsController가 주문형으로 생성 할 수있는 특정 변형이있는 특정 Blob에 대한 URL이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="90d5f6bd0b355a0b48c47782e4fc7945f94b8a1f" translate="yes" xml:space="preserve">
          <source>This will create a connection handler for switching between connections, look up the config hash using the &lt;code&gt;database_key&lt;/code&gt; and finally establishes a connection to that config.</source>
          <target state="translated">연결 간 전환을위한 연결 처리기가 만들어지고 &lt;code&gt;database_key&lt;/code&gt; 를 사용하여 구성 해시를 찾은 다음 해당 구성에 대한 연결을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="977360c989f208719ae1fa97256fc5d6c5dfe6d9" translate="yes" xml:space="preserve">
          <source>This will create a number of routes for each of the &lt;code&gt;articles&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt; controller. For &lt;code&gt;Admin::ArticlesController&lt;/code&gt;, Rails will create:</source>
          <target state="translated">그러면 각 &lt;code&gt;articles&lt;/code&gt; 및 &lt;code&gt;comments&lt;/code&gt; 컨트롤러에 대한 여러 경로가 만들어 집니다. 들어 &lt;code&gt;Admin::ArticlesController&lt;/code&gt; , 레일을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="4dc53f62c1f3b6923d80ecece1b9b66574873458" translate="yes" xml:space="preserve">
          <source>This will create a number of routes for each of the posts and comments controller. For &lt;code&gt;Admin::PostsController&lt;/code&gt;, Rails will create:</source>
          <target state="translated">그러면 각 게시물 및 댓글 컨트롤러에 대한 여러 경로가 만들어집니다. 들어 &lt;code&gt;Admin::PostsController&lt;/code&gt; , 레일을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="1d835575fda2c997e5940227096b69c38806a716" translate="yes" xml:space="preserve">
          <source>This will create an appropriately named empty migration:</source>
          <target state="translated">적절한 이름의 빈 마이그레이션이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="688252d096b068de65da8350686d66b6600477d3" translate="yes" xml:space="preserve">
          <source>This will create and process a variant of the avatar blob that's constrained to a height and width of 100. Then it'll upload said variant to the service according to a derivative key of the blob and the transformations.</source>
          <target state="translated">그러면 높이와 너비가 100으로 제한된 아바타 블로 브의 변형이 만들어지고 처리됩니다. 그런 다음 블로 브의 파생 키와 변환에 따라 해당 변형을 서비스에 업로드합니다.</target>
        </trans-unit>
        <trans-unit id="0af97e6d52f7a53ef081d8839974e5e26885487f" translate="yes" xml:space="preserve">
          <source>This will create and process a variant of the avatar blob that's constrained to a height and width of 100px. Then it'll upload said variant to the service according to a derivative key of the blob and the transformations.</source>
          <target state="translated">높이와 너비가 100px로 제한된 아바타 블롭의 변형을 만들고 처리합니다. 그런 다음 Blob의 파생 키와 변환에 따라 해당 변형을 서비스에 업로드합니다.</target>
        </trans-unit>
        <trans-unit id="0d52e4fd185c14a75ce4f70036fcf8cfb8d0ed50" translate="yes" xml:space="preserve">
          <source>This will create routing helpers such as &lt;code&gt;magazine_periodical_ads_url&lt;/code&gt; and &lt;code&gt;edit_magazine_periodical_ad_path&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;magazine_periodical_ads_url&lt;/code&gt; 및 &lt;code&gt;edit_magazine_periodical_ad_path&lt;/code&gt; 와 같은 라우팅 헬퍼를 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="7b9e780ab767e1b49baad2defc47ffeb1e7ade06" translate="yes" xml:space="preserve">
          <source>This will create several files:</source>
          <target state="translated">이렇게하면 여러 파일이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="305c233031351d2e461ee258b0bb207c5f3e99d6" translate="yes" xml:space="preserve">
          <source>This will define a &lt;code&gt;user_path&lt;/code&gt; method that will be available in controllers, helpers, and views that will go to a route such as &lt;code&gt;/bob&lt;/code&gt;. Inside the &lt;code&gt;show&lt;/code&gt; action of &lt;code&gt;UsersController&lt;/code&gt;, &lt;code&gt;params[:username]&lt;/code&gt; will contain the username for the user. Change &lt;code&gt;:username&lt;/code&gt; in the route definition if you do not want your parameter name to be &lt;code&gt;:username&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;/bob&lt;/code&gt; 과 같은 경로로 갈 컨트롤러, 헬퍼 및 뷰에서 사용할 수 있는 &lt;code&gt;user_path&lt;/code&gt; 메소드를 정의 합니다 . 내부 &lt;code&gt;show&lt;/code&gt; 의 행동 &lt;code&gt;UsersController&lt;/code&gt; , &lt;code&gt;params[:username]&lt;/code&gt; 사용자의 사용자 이름이 포함됩니다. 매개 변수 이름이 &lt;code&gt;:username&lt;/code&gt; 이 아닌 경우 경로 정의에서 &lt;code&gt;:username&lt;/code&gt; 을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="8df8b7633c46dc154ef0ad2888d096ba1bae755d" translate="yes" xml:space="preserve">
          <source>This will disconnect all the connections established for &lt;code&gt;User.find(1)&lt;/code&gt;, across all servers running on all machines, because it uses the internal channel that all of these servers are subscribed to.</source>
          <target state="translated">&lt;code&gt;User.find(1)&lt;/code&gt; 대해 설정된 모든 연결 은 모든 머신에서 실행되는 모든 서버 에서 연결이 끊어 집니다. 모든 서버가 구독하는 내부 채널을 사용하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="dafbdfd2b90448c92a3ed045a44bc71dddfdc45f" translate="yes" xml:space="preserve">
          <source>This will do three main things for you:</source>
          <target state="translated">이것은 당신을 위해 세 가지 주요 일을 할 것입니다 :</target>
        </trans-unit>
        <trans-unit id="ee79d82211be7a526dec218f3776f7a9c60fc128" translate="yes" xml:space="preserve">
          <source>This will enable Rails to recognize paths such as &lt;code&gt;/comments/new/preview&lt;/code&gt; with GET, and route to the &lt;code&gt;preview&lt;/code&gt; action of &lt;code&gt;CommentsController&lt;/code&gt;. It will also create the &lt;code&gt;preview_new_comment_url&lt;/code&gt; and &lt;code&gt;preview_new_comment_path&lt;/code&gt; route helpers.</source>
          <target state="translated">이를 통해 Rails 는 GET 으로 &lt;code&gt;/comments/new/preview&lt;/code&gt; 와 같은 경로를 인식 하고 &lt;code&gt;CommentsController&lt;/code&gt; 의 &lt;code&gt;preview&lt;/code&gt; 동작으로 라우팅 할 수 있습니다. 또한 &lt;code&gt;preview_new_comment_url&lt;/code&gt; 및 &lt;code&gt;preview_new_comment_path&lt;/code&gt; 경로 도우미를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="5a9b358ad4b9c74e2ca4539517283dc157d82a65" translate="yes" xml:space="preserve">
          <source>This will enable Rails to recognize paths such as &lt;code&gt;/photos/search&lt;/code&gt; with GET, and route to the &lt;code&gt;search&lt;/code&gt; action of &lt;code&gt;PhotosController&lt;/code&gt;. It will also create the &lt;code&gt;search_photos_url&lt;/code&gt; and &lt;code&gt;search_photos_path&lt;/code&gt; route helpers.</source>
          <target state="translated">이를 통해 Rails 는 GET을 사용 하여 &lt;code&gt;/photos/search&lt;/code&gt; 와 같은 경로를 인식 하고 &lt;code&gt;PhotosController&lt;/code&gt; 의 &lt;code&gt;search&lt;/code&gt; 동작으로 라우팅 할 수 있습니다. 또한 &lt;code&gt;search_photos_url&lt;/code&gt; 및 &lt;code&gt;search_photos_path&lt;/code&gt; 경로 도우미를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="4db922acc5c6067700fd0bc3f47ccdd3a7e22251" translate="yes" xml:space="preserve">
          <source>This will enable Rails to recognize paths such as &lt;code&gt;/photos/search&lt;/code&gt; with GET, and route to the search action of &lt;code&gt;PhotosController&lt;/code&gt;. It will also create the &lt;code&gt;search_photos_url&lt;/code&gt; and &lt;code&gt;search_photos_path&lt;/code&gt; route helpers.</source>
          <target state="translated">이를 통해 Rails 는 GET을 사용 하여 &lt;code&gt;/photos/search&lt;/code&gt; 와 같은 경로를 인식 하고 &lt;code&gt;PhotosController&lt;/code&gt; 의 검색 동작으로 라우팅 할 수 있습니다. 또한 &lt;code&gt;search_photos_url&lt;/code&gt; 및 &lt;code&gt;search_photos_path&lt;/code&gt; 경로 도우미를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="19e0b88be19f16d5d76201ef619f34933d3edc65" translate="yes" xml:space="preserve">
          <source>This will execute one query to load the addresses and load the addressables with one query per addressable type. For example, if all the addressables are either of class Person or Company, then a total of 3 queries will be executed. The list of addressable types to load is determined on the back of the addresses loaded. This is not supported if Active Record has to fallback to the previous implementation of eager loading and will raise &lt;a href=&quot;../eagerloadpolymorphicerror&quot;&gt;&lt;code&gt;ActiveRecord::EagerLoadPolymorphicError&lt;/code&gt;&lt;/a&gt;. The reason is that the parent model's type is a column value so its corresponding table name cannot be put in the &lt;code&gt;FROM&lt;/code&gt;/&lt;code&gt;JOIN&lt;/code&gt; clauses of that query.</source>
          <target state="translated">이렇게하면 하나의 쿼리를 실행하여 주소를로드하고 주소 지정 가능 유형 당 하나의 쿼리로 주소 지정 가능 항목을로드합니다. 예를 들어, 주소 지정 가능 항목이 모두 Person 또는 Company 클래스이면 총 3 개의 쿼리가 실행됩니다. 로드 할 주소 지정 가능 유형 목록은로드 된 주소의 뒷면에서 결정됩니다. 이는 Active Record가 이전의 &lt;a href=&quot;../eagerloadpolymorphicerror&quot;&gt; &lt;code&gt;ActiveRecord::EagerLoadPolymorphicError&lt;/code&gt; &lt;/a&gt; 로드 구현으로 대체 해야하는 경우 지원되지 않으며 ActiveRecord :: EagerLoadPolymorphicError를 발생시킵니다 . 그 이유는 상위 모델의 유형이 열 값이므로 해당 테이블 이름 을 해당 쿼리 의 &lt;code&gt;FROM&lt;/code&gt; / &lt;code&gt;JOIN&lt;/code&gt; 절에 넣을 수 없기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="d1230522740eff7749a0f2bf9ea29ec09aebf7e0" translate="yes" xml:space="preserve">
          <source>This will execute one query to load the addresses and load the addressables with one query per addressable type. For example, if all the addressables are either of class Person or Company, then a total of 3 queries will be executed. The list of addressable types to load is determined on the back of the addresses loaded. This is not supported if Active Record has to fallback to the previous implementation of eager loading and will raise &lt;a href=&quot;../eagerloadpolymorphicerror&quot;&gt;ActiveRecord::EagerLoadPolymorphicError&lt;/a&gt;. The reason is that the parent model's type is a column value so its corresponding table name cannot be put in the &lt;code&gt;FROM&lt;/code&gt;/&lt;code&gt;JOIN&lt;/code&gt; clauses of that query.</source>
          <target state="translated">이것은 하나의 쿼리를 실행하여 주소를로드하고 주소 지정 가능한 유형마다 하나의 쿼리로 주소 지정을로드합니다. 예를 들어, 모든 주소 지정 가능 항목이 Person 또는 Company 클래스 인 경우 총 3 개의 쿼리가 실행됩니다. 로드 할 주소 지정 가능 유형 목록은로드 된 주소의 뒷면에서 결정됩니다. Active Record가 이전의 eager 로딩 구현으로 폴백 &lt;a href=&quot;../eagerloadpolymorphicerror&quot;&gt;해야하는&lt;/a&gt; 경우에는 지원되지 않으며 ActiveRecord :: EagerLoadPolymorphicError가 발생 합니다. 그 이유는 상위 모델의 유형이 열 값이므로 해당 테이블 이름 을 해당 쿼리 의 &lt;code&gt;FROM&lt;/code&gt; / &lt;code&gt;JOIN&lt;/code&gt; 절에 넣을 수 없기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="3dcd62bad7fe4e59d8e088f65f34379ff3d8123c" translate="yes" xml:space="preserve">
          <source>This will find all books created yesterday by using a &lt;code&gt;BETWEEN&lt;/code&gt; SQL statement:</source>
          <target state="translated">&lt;code&gt;BETWEEN&lt;/code&gt; SQL 문 을 사용하여 어제 작성된 모든 책을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="eb6eff373294234fc7d4840384a2c5a1ac45c275" translate="yes" xml:space="preserve">
          <source>This will find all clients created yesterday by using a &lt;code&gt;BETWEEN&lt;/code&gt; SQL statement:</source>
          <target state="translated">&lt;code&gt;BETWEEN&lt;/code&gt; SQL 문 을 사용하여 어제 작성된 모든 클라이언트를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3bd54fd95988d965be979b72eb8b09345044893" translate="yes" xml:space="preserve">
          <source>This will find all clients who have orders that were created yesterday, again using a &lt;code&gt;BETWEEN&lt;/code&gt; SQL expression.</source>
          <target state="translated">어제 작성된 주문이있는 모든 클라이언트를 다시 &lt;code&gt;BETWEEN&lt;/code&gt; SQL 표현식을 사용하여 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dc2f9b1e6f9fbdb76a9c6e6f837e428910be21fd" translate="yes" xml:space="preserve">
          <source>This will find all customers who have orders that were created yesterday, again using a &lt;code&gt;BETWEEN&lt;/code&gt; SQL expression.</source>
          <target state="translated">&lt;code&gt;BETWEEN&lt;/code&gt; SQL 표현식을 사용하여 어제 생성 된 주문이있는 모든 고객을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="d0c42da896179a0873b5be358b05c756de6f766d" translate="yes" xml:space="preserve">
          <source>This will find all customers who have orders that were created yesterday, using a &lt;code&gt;BETWEEN&lt;/code&gt; SQL expression to compare &lt;code&gt;created_at&lt;/code&gt;.</source>
          <target state="translated">이렇게하면 &lt;code&gt;BETWEEN&lt;/code&gt; SQL 표현식을 사용하여 &lt;code&gt;created_at&lt;/code&gt; 를 비교 하여 어제 생성 된 주문이있는 모든 고객을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="e6fba8340bf9902a6a1fb631e9a96f361c3cadf2" translate="yes" xml:space="preserve">
          <source>This will find the category with id 1 and eager load all of the associated articles, the associated articles' tags and comments, and every comment's guest association.</source>
          <target state="translated">그러면 ID가 1 인 카테고리가 있으며 관련 기사, 관련 기사의 태그 및 의견 및 모든 의견의 게스트 연결이 간절히로드됩니다.</target>
        </trans-unit>
        <trans-unit id="01b032ef6d9e3bb88958ac3a30e27f809f48e2b2" translate="yes" xml:space="preserve">
          <source>This will find the customer with id 1 and eager load all of the associated orders for it, the books for all of the orders, and the author and supplier for each of the books.</source>
          <target state="translated">이렇게하면 ID가 1 인 고객을 찾아 관련 주문, 모든 주문에 대한 책, 각 책에 대한 저자 및 공급 업체를 모두로드합니다.</target>
        </trans-unit>
        <trans-unit id="12050b7e0e8c3a855ebea0332254fe28225b6788" translate="yes" xml:space="preserve">
          <source>This will fire up Puma, a web server distributed with Rails by default. To see your application in action, open a browser window and navigate to http://localhost:3000. You should see the Rails default information page:</source>
          <target state="translated">그러면 Rails와 함께 배포되는 웹 서버 인 Puma가 기본적으로 실행됩니다. 응용 프로그램이 실제로 작동하는지 확인하려면 브라우저 창을 열고 http : // localhost : 3000으로 이동하십시오. Rails 기본 정보 페이지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="e526dce7655ad97b08efd074ac104ec65a63cd7f" translate="yes" xml:space="preserve">
          <source>This will generate SQL like this:</source>
          <target state="translated">이것은 다음과 같은 SQL을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="11305323ce54bbde6178971aaae7db5ae181aa89" translate="yes" xml:space="preserve">
          <source>This will generate routes such as &lt;code&gt;admin_photos_path&lt;/code&gt; and &lt;code&gt;admin_accounts_path&lt;/code&gt; which map to &lt;code&gt;/admin/photos&lt;/code&gt; and &lt;code&gt;/admin/accounts&lt;/code&gt; respectively.</source>
          <target state="translated">그러면 &lt;code&gt;admin_photos_path&lt;/code&gt; 및 &lt;code&gt;admin_accounts_path&lt;/code&gt; 와 같은 경로가 각각 &lt;code&gt;/admin/photos&lt;/code&gt; 및 &lt;code&gt;/admin/accounts&lt;/code&gt; 에 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="93c13bd6eebfa01de31672d51d7d40db17d2ce18" translate="yes" xml:space="preserve">
          <source>This will generate the &lt;code&gt;exciting_path&lt;/code&gt; and &lt;code&gt;exciting_url&lt;/code&gt; helpers which can be used to navigate to this mounted app.</source>
          <target state="translated">이것은 생성 &lt;code&gt;exciting_path&lt;/code&gt; 및 &lt;code&gt;exciting_url&lt;/code&gt; 이로 이동하는 데 사용할 수있는 도우미 앱을 설치.</target>
        </trans-unit>
        <trans-unit id="eb8e4ad95786c9c308a2a16beb745394e0df227c" translate="yes" xml:space="preserve">
          <source>This will generate the controller code and tests for an &lt;code&gt;Article&lt;/code&gt; resource. You can take a look at the file &lt;code&gt;articles_controller_test.rb&lt;/code&gt; in the &lt;code&gt;test/controllers&lt;/code&gt; directory.</source>
          <target state="translated">컨트롤러 코드를 생성하고 &lt;code&gt;Article&lt;/code&gt; 리소스를 테스트 합니다. 당신은 파일을 살펴 걸릴 수 &lt;code&gt;articles_controller_test.rb&lt;/code&gt; 에서 &lt;code&gt;test/controllers&lt;/code&gt; 디렉토리.</target>
        </trans-unit>
        <trans-unit id="48104d9494c74c4133057a5e28bedb4f47214280" translate="yes" xml:space="preserve">
          <source>This will generate the exact same routes as the first example. You can also specify the &lt;code&gt;:shallow&lt;/code&gt; option in the parent resource, in which case all of the nested resources will be shallow:</source>
          <target state="translated">첫 번째 예제와 똑같은 경로가 생성됩니다. 부모 자원에서 &lt;code&gt;:shallow&lt;/code&gt; 옵션을 지정할 수도 있습니다 . 이 경우 중첩 된 모든 자원이 얕습니다.</target>
        </trans-unit>
        <trans-unit id="20be9b915ee11ece206017b88e7234d8db8e06fe" translate="yes" xml:space="preserve">
          <source>This will generate the file &lt;code&gt;timestamp_add_fieldname_to_tablename.rb&lt;/code&gt;, which will look like this:</source>
          <target state="translated">그러면 &lt;code&gt;timestamp_add_fieldname_to_tablename.rb&lt;/code&gt; 파일이 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="dd0f2e6c3b72347c22def94e6470c429ddd03bae" translate="yes" xml:space="preserve">
          <source>This will generate the following HTML:</source>
          <target state="translated">다음 HTML이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="40fe0881d573c0a43296b612394692067593adfa" translate="yes" xml:space="preserve">
          <source>This will generate the following things:</source>
          <target state="translated">이것은 다음을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="7f0b8f085b6b34d32aa31323fd7908c3de645358" translate="yes" xml:space="preserve">
          <source>This will generate the singular URL &lt;code&gt;/basket&lt;/code&gt; instead of the usual &lt;code&gt;/baskets/:id&lt;/code&gt;.</source>
          <target state="translated">일반적인 &lt;code&gt;/baskets/:id&lt;/code&gt; 대신 단일 URL &lt;code&gt;/basket&lt;/code&gt; 이 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="526fb6974837478072f7261f6d8f006672a0e473" translate="yes" xml:space="preserve">
          <source>This will include a security token in all forms and Ajax requests generated by Rails. If the security token doesn't match what was expected, an exception will be thrown.</source>
          <target state="translated">여기에는 모든 형식의 보안 토큰과 Rails에서 생성 한 Ajax 요청이 포함됩니다. 보안 토큰이 예상 한 것과 일치하지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="663c5100646cf743362210ccbdfad09d1498a4e0" translate="yes" xml:space="preserve">
          <source>This will include both records as part of the cache key and updating either of them will expire the cache.</source>
          <target state="translated">여기에는 캐시 키의 일부로 두 레코드가 모두 포함되며 두 레코드 중 하나를 업데이트하면 캐시가 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="3737f1dbc037fd85473c36bdefa6674d66240a7a" translate="yes" xml:space="preserve">
          <source>This will load all comments with a single query. This reduces the total number of queries to 3. In general, the number of queries will be 1 plus the number of associations named (except if some of the associations are polymorphic &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;&lt;code&gt;belongs_to&lt;/code&gt;&lt;/a&gt; - see below).</source>
          <target state="translated">이렇게하면 단일 쿼리로 모든 주석이로드됩니다. 이것은 총 질의 수를 3으로 줄입니다. 일반적으로 질의 수는 1에 명명 된 연결 수를 더한 값이됩니다 (일부 연결이 다형성 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt; &lt;code&gt;belongs_to&lt;/code&gt; &lt;/a&gt; 경우 제외 -아래 참조).</target>
        </trans-unit>
        <trans-unit id="b352830fe1df01f65c1b930436aa1335a1c894a8" translate="yes" xml:space="preserve">
          <source>This will load all comments with a single query. This reduces the total number of queries to 3. In general, the number of queries will be 1 plus the number of associations named (except if some of the associations are polymorphic &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; - see below).</source>
          <target state="translated">이렇게하면 모든 주석이 단일 쿼리로로드됩니다. 이로 인해 총 쿼리 수는 3으로 줄어 듭니다. 일반적으로 쿼리 수는 1로 명명 된 연결 수에 1을 더한 것입니다 (일부 연결이 다형성 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;소속 인&lt;/a&gt; 경우 제외 -아래 참조).</target>
        </trans-unit>
        <trans-unit id="c4030dae2ab54a06c17c1020824cc6a1584faa4b" translate="yes" xml:space="preserve">
          <source>This will load posts and eager load the &lt;code&gt;approved_comments&lt;/code&gt; association, which contains only those comments that have been approved.</source>
          <target state="translated">&lt;code&gt;approved_comments&lt;/code&gt; 댓글 만 포함 된 posts_loadments 및 승인 된 댓글 연결을 열망합니다 .</target>
        </trans-unit>
        <trans-unit id="3c5bed33aa62906c23be081ddddbed686fcb8380" translate="yes" xml:space="preserve">
          <source>This will make the attack work: &quot;&amp;lt;sc&amp;lt;script&amp;gt;ript&amp;gt;&quot;.gsub(&quot;&amp;lt;script&amp;gt;&quot;, &quot;&quot;)</source>
          <target state="translated">그러면 &quot;&amp;lt;sc &amp;lt;script&amp;gt; ript&amp;gt;&quot;. gsub ( &quot;&amp;lt;script&amp;gt;&quot;, &quot;&quot;) 공격이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="17dbeaa1fa3a6c334f16fd32a39e367458ec0b01" translate="yes" xml:space="preserve">
          <source>This will make the attack work: &lt;code&gt;&quot;&amp;lt;sc&amp;lt;script&amp;gt;ript&amp;gt;&quot;.gsub(&quot;&amp;lt;script&amp;gt;&quot;, &quot;&quot;)&lt;/code&gt;</source>
          <target state="translated">이렇게하면 공격이 작동합니다 : &lt;code&gt;&quot;&amp;lt;sc&amp;lt;script&amp;gt;ript&amp;gt;&quot;.gsub(&quot;&amp;lt;script&amp;gt;&quot;, &quot;&quot;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9355638ddc570d8eb7b08985df380e3ff1872c0c" translate="yes" xml:space="preserve">
          <source>This will move the &lt;code&gt;Magical::Unicorns&lt;/code&gt; middleware before &lt;code&gt;ActionDispatch::Flash&lt;/code&gt;. You can also move it after:</source>
          <target state="translated">그러면 &lt;code&gt;ActionDispatch::Flash&lt;/code&gt; 전에 &lt;code&gt;Magical::Unicorns&lt;/code&gt; 미들웨어 가 이동합니다 . 다음 이후에도 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32f51a5057cd169a11f401af53d2cc21c2d08673" translate="yes" xml:space="preserve">
          <source>This will move the &lt;code&gt;Magical::Unicorns&lt;/code&gt; middleware before the &lt;code&gt;ActionDispatch::Flash&lt;/code&gt;. You can also move it after:</source>
          <target state="translated">그러면 &lt;code&gt;ActionDispatch::Flash&lt;/code&gt; 전에 &lt;code&gt;Magical::Unicorns&lt;/code&gt; 미들웨어 가 이동합니다 . 다음 이후에도 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9a0b2e4b0c8b84a85bcbba91bd96fa2b37fbed7" translate="yes" xml:space="preserve">
          <source>This will now generate &amp;ldquo;/basket&amp;rdquo; when a &lt;code&gt;Basket&lt;/code&gt; instance is passed to &lt;code&gt;link_to&lt;/code&gt; or &lt;code&gt;form_for&lt;/code&gt; instead of the standard &amp;ldquo;/baskets/:id&amp;rdquo;.</source>
          <target state="translated">이제 &lt;code&gt;Basket&lt;/code&gt; 인스턴스가 표준 &quot;/ baskets / : id&quot;대신 &lt;code&gt;link_to&lt;/code&gt; 또는 &lt;code&gt;form_for&lt;/code&gt; 로 전달 될 때 &quot;/ basket&quot;이 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="14e0af3af91612b7c122e5d298a20e55a03249d0" translate="yes" xml:space="preserve">
          <source>This will now render the partial in &lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt; once for each comment that is in the &lt;code&gt;@article.comments&lt;/code&gt; collection. As the &lt;code&gt;render&lt;/code&gt; method iterates over the &lt;code&gt;@article.comments&lt;/code&gt; collection, it assigns each comment to a local variable named the same as the partial, in this case &lt;code&gt;comment&lt;/code&gt;, which is then available in the partial for us to show.</source>
          <target state="translated">이제 &lt;code&gt;@article.comments&lt;/code&gt; 컬렉션 에있는 각 주석마다 &lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt; 의 일부를 한 번 렌더링합니다 . &lt;code&gt;render&lt;/code&gt; 메소드가 &lt;code&gt;@article.comments&lt;/code&gt; 컬렉션을 반복 함에 따라 각 주석을 부분과 동일한 로컬 변수 (이 경우 &lt;code&gt;comment&lt;/code&gt; )에 할당 한 다음 부분에서 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5b85ab1e962bdcb10ff35cb96c42d807c436122" translate="yes" xml:space="preserve">
          <source>This will output the following:</source>
          <target state="translated">이것은 다음을 출력합니다 :</target>
        </trans-unit>
        <trans-unit id="cd5591df3781acd48ab78e8490e397802d2e9698" translate="yes" xml:space="preserve">
          <source>This will override the controller-wide &amp;ldquo;weblog_standard&amp;rdquo; layout, and will render the help action with the &amp;ldquo;help&amp;rdquo; layout instead.</source>
          <target state="translated">이는 컨트롤러 전체의 &quot;weblog_standard&quot;레이아웃을 무시하고 대신 &quot;help&quot;레이아웃을 사용하여 도움말 작업을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="4f34fe9ed99abaa35b278b9d8369304819085494" translate="yes" xml:space="preserve">
          <source>This will produce:</source>
          <target state="translated">이것은 다음을 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="fc2abc7eeaebbfaa37268ec8fbe05fccd7faae35" translate="yes" xml:space="preserve">
          <source>This will provide all three standard callbacks (before, around and after) for both the &lt;code&gt;:create&lt;/code&gt; and &lt;code&gt;:update&lt;/code&gt; methods. To implement, you need to wrap the methods you want callbacks on in a block so that the callbacks get a chance to fire:</source>
          <target state="translated">이것은 &lt;code&gt;:create&lt;/code&gt; 및 &lt;code&gt;:update&lt;/code&gt; 메소드 모두에 대해 세 가지 표준 콜백 (전, 후 및 후)을 모두 제공합니다 . 구현하려면 콜백을 실행할 기회를 얻을 수 있도록 콜백하려는 메소드를 블록으로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="966e4162ba17319602b15108a248a2b32a2e9a47" translate="yes" xml:space="preserve">
          <source>This will provide route helpers such as &lt;code&gt;admin_photos_path&lt;/code&gt;, &lt;code&gt;new_admin_photo_path&lt;/code&gt;, etc.</source>
          <target state="translated">이것은 &lt;code&gt;admin_photos_path&lt;/code&gt; , &lt;code&gt;new_admin_photo_path&lt;/code&gt; 등과 같은 경로 도우미를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="0dd000d30ab70a07f9d33dc333d13603abf46d44" translate="yes" xml:space="preserve">
          <source>This will provide you with URLs such as &lt;code&gt;/bob/articles/1&lt;/code&gt; and will allow you to reference the &lt;code&gt;username&lt;/code&gt; part of the path as &lt;code&gt;params[:username]&lt;/code&gt; in controllers, helpers, and views.</source>
          <target state="translated">그러면 &lt;code&gt;/bob/articles/1&lt;/code&gt; 과 같은 URL이 제공 되며 컨트롤러, 도우미 및보기에서 경로 의 &lt;code&gt;username&lt;/code&gt; 부분을 &lt;code&gt;params[:username]&lt;/code&gt; 으로 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d549dce2bbbb5b998d08591ae8f24883abfa26a6" translate="yes" xml:space="preserve">
          <source>This will put the &lt;code&gt;Magical::Unicorns&lt;/code&gt; middleware on the end of the stack. You can use &lt;code&gt;insert_before&lt;/code&gt; if you wish to add a middleware before another.</source>
          <target state="translated">그러면 스택 끝에 &lt;code&gt;Magical::Unicorns&lt;/code&gt; 미들웨어 가 배치됩니다 . 미들웨어를 다른 것보다 먼저 추가 하려면 &lt;code&gt;insert_before&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f16dc26385bb93210fee9ce4b42f84f567d852aa" translate="yes" xml:space="preserve">
          <source>This will put the &lt;code&gt;Magical::Unicorns&lt;/code&gt; middleware on the end of the stack. You can use &lt;code&gt;insert_before&lt;/code&gt; if you wish to add a middleware before another:</source>
          <target state="translated">그러면 스택 끝에 &lt;code&gt;Magical::Unicorns&lt;/code&gt; 미들웨어 가 배치됩니다 . 미들웨어를 다른 것보다 먼저 추가 하려면 &lt;code&gt;insert_before&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35bee4fa664a5ce62139a41a4446f687f3b4a00f" translate="yes" xml:space="preserve">
          <source>This will read and stream the file 4kB at the time, avoiding loading the entire file into memory at once. You can turn off streaming with the &lt;code&gt;:stream&lt;/code&gt; option or adjust the block size with the &lt;code&gt;:buffer_size&lt;/code&gt; option.</source>
          <target state="translated">그러면 전체 파일을 한 번에 메모리에로드하지 않아도 파일을 4kB로 읽고 스트리밍 할 수 있습니다. &lt;code&gt;:stream&lt;/code&gt; 옵션으로 스트리밍을 끄 거나 &lt;code&gt;:buffer_size&lt;/code&gt; 옵션으로 블록 크기를 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6317ff1d9a51578dc98ad305996078e724cd16d2" translate="yes" xml:space="preserve">
          <source>This will ready a consumer that'll connect against &lt;code&gt;/cable&lt;/code&gt; on your server by default. The connection won't be established until you've also specified at least one subscription you're interested in having.</source>
          <target state="translated">기본적으로 서버의 &lt;code&gt;/cable&lt;/code&gt; 에 연결할 소비자를 준비합니다 . 관심있는 구독을 하나 이상 지정해야 연결이 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="681aa462d49a41c8f583994cfef922a7f5a5136b" translate="yes" xml:space="preserve">
          <source>This will recognize &lt;code&gt;/photos/1/preview&lt;/code&gt; with GET, and route to the &lt;code&gt;preview&lt;/code&gt; action of &lt;code&gt;PhotosController&lt;/code&gt;, with the resource id value passed in &lt;code&gt;params[:id]&lt;/code&gt;. It will also create the &lt;code&gt;preview_photo_url&lt;/code&gt; and &lt;code&gt;preview_photo_path&lt;/code&gt; helpers.</source>
          <target state="translated">이것은 GET 으로 &lt;code&gt;/photos/1/preview&lt;/code&gt; 를 인식 하고, 리소스 ID 값이 &lt;code&gt;params[:id]&lt;/code&gt; 전달 된 &lt;code&gt;PhotosController&lt;/code&gt; 의 &lt;code&gt;preview&lt;/code&gt; 작업으로 라우팅됩니다 . 또한 &lt;code&gt;preview_photo_url&lt;/code&gt; 및 &lt;code&gt;preview_photo_path&lt;/code&gt; 헬퍼 도 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="b75dfb1d2eec29998635431a37b4da0b0cb28e57" translate="yes" xml:space="preserve">
          <source>This will recognize &lt;code&gt;/photos/1/preview&lt;/code&gt; with GET, and route to the preview action of &lt;code&gt;PhotosController&lt;/code&gt;. It will also create the &lt;code&gt;preview_photo_url&lt;/code&gt; and &lt;code&gt;preview_photo_path&lt;/code&gt; helpers.</source>
          <target state="translated">GET 으로 &lt;code&gt;/photos/1/preview&lt;/code&gt; 를 인식 하고 &lt;code&gt;PhotosController&lt;/code&gt; 의 미리보기 동작으로 라우팅합니다 . 또한 &lt;code&gt;preview_photo_url&lt;/code&gt; 및 &lt;code&gt;preview_photo_path&lt;/code&gt; 헬퍼 도 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="c086908b29df3abf3f09b68aac989519fe5ce75b" translate="yes" xml:space="preserve">
          <source>This will redirect the user to the main action if they tried to access a legacy action. The intention was to preserve the URL parameters to the legacy action and pass them to the main action. However, it can be exploited by attacker if they included a host key in the URL:</source>
          <target state="translated">레거시 작업에 액세스하려고하면 사용자를 기본 작업으로 리디렉션합니다. 의도는 URL 매개 변수를 기존 조치에 보존하고 기본 조치에 전달하는 것입니다. 그러나 URL에 호스트 키가 포함되어 있으면 공격자가 악용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a742e1f089acb7ff335ba3060e79e75ce69e493" translate="yes" xml:space="preserve">
          <source>This will redirect the user, while changing only the specified parts of the request, for example the &lt;code&gt;path&lt;/code&gt; option in the last example. &lt;code&gt;/stories&lt;/code&gt;, &lt;code&gt;/stories?foo=bar&lt;/code&gt;, redirect to &lt;code&gt;/posts&lt;/code&gt; and &lt;code&gt;/posts?foo=bar&lt;/code&gt; respectively.</source>
          <target state="translated">요청의 지정된 부분 (예 : 마지막 예의 &lt;code&gt;path&lt;/code&gt; 옵션) 만 변경하면서 사용자를 리디렉션합니다 . &lt;code&gt;/stories&lt;/code&gt; , &lt;code&gt;/stories?foo=bar&lt;/code&gt; 는 각각 &lt;code&gt;/posts&lt;/code&gt; 및 &lt;code&gt;/posts?foo=bar&lt;/code&gt; 리디렉션됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d6fda0736cb28123e462ff25d48c8367bb386f9" translate="yes" xml:space="preserve">
          <source>This will redirect the user, while ignoring certain parts of the request, including query string, etc. &lt;code&gt;/stories&lt;/code&gt;, &lt;code&gt;/stories?foo=bar&lt;/code&gt;, etc all redirect to &lt;code&gt;/posts&lt;/code&gt;.</source>
          <target state="translated">이것은 쿼리 문자열 등 &lt;code&gt;/stories&lt;/code&gt; , &lt;code&gt;/stories?foo=bar&lt;/code&gt; 등을 포함하여 요청의 특정 부분을 무시하고 &lt;code&gt;/posts&lt;/code&gt; 로 리디렉션하는 동안 사용자를 리디렉션합니다 .</target>
        </trans-unit>
        <trans-unit id="a01ce434bc393a0a6550820837934c7b8473be83" translate="yes" xml:space="preserve">
          <source>This will render &lt;code&gt;advertiser/_ad.html.erb&lt;/code&gt; and pass the local variable &lt;code&gt;ad&lt;/code&gt; to the template for display. An iteration object will automatically be made available to the template with a name of the form &lt;code&gt;partial_name_iteration&lt;/code&gt;. The iteration object has knowledge about which index the current object has in the collection and the total size of the collection. The iteration object also has two convenience methods, &lt;code&gt;first?&lt;/code&gt; and &lt;code&gt;last?&lt;/code&gt;. In the case of the example above, the template would be fed &lt;code&gt;ad_iteration&lt;/code&gt;. For backwards compatibility the &lt;code&gt;partial_name_counter&lt;/code&gt; is still present and is mapped to the iteration's &lt;code&gt;index&lt;/code&gt; method.</source>
          <target state="translated">그러면 &lt;code&gt;advertiser/_ad.html.erb&lt;/code&gt; 가 렌더링 되고 로컬 변수 &lt;code&gt;ad&lt;/code&gt; 가 템플릿으로 전달되어 표시됩니다. 템플리트에서 &lt;code&gt;partial_name_iteration&lt;/code&gt; 형식의 이름으로 반복 오브젝트를 자동으로 사용할 수있게됩니다 . 반복 객체는 현재 객체가 컬렉션에있는 인덱스와 컬렉션의 총 크기에 대한 지식을 가지고 있습니다. 반복 객체에는 두 가지 편리한 방법이 있습니다 &lt;code&gt;first?&lt;/code&gt; 그리고 &lt;code&gt;last?&lt;/code&gt; . 위 예제의 경우 템플릿에 &lt;code&gt;ad_iteration&lt;/code&gt; 이 제공 됩니다 . 이전 버전과의 호환성을 위해 &lt;code&gt;partial_name_counter&lt;/code&gt; 는 여전히 존재하며 반복의 &lt;code&gt;index&lt;/code&gt; 메소드에 맵핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="698a441c5b09122ba621305f26cddd605525816b" translate="yes" xml:space="preserve">
          <source>This will render a book with &lt;code&gt;special?&lt;/code&gt; set with the &lt;code&gt;special_show&lt;/code&gt; template, while other books will render with the default &lt;code&gt;show&lt;/code&gt; template.</source>
          <target state="translated">이 책은 &lt;code&gt;special?&lt;/code&gt; 책이 될까요? &lt;code&gt;special_show&lt;/code&gt; 템플릿으로 설정하고 다른 책은 기본 &lt;code&gt;show&lt;/code&gt; 템플릿 으로 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="a5d0b81f7e4fa3fa841e449fba16f64dc99d9bbb" translate="yes" xml:space="preserve">
          <source>This will render a console inside your view. You don't need to care about the location of the &lt;code&gt;console&lt;/code&gt; call; it won't be rendered on the spot of its invocation but next to your HTML content.</source>
          <target state="translated">뷰 내부에 콘솔이 렌더링됩니다. &lt;code&gt;console&lt;/code&gt; 호출 위치는 신경 쓰지 않아도됩니다 . 호출 시점이 아니라 HTML 컨텐츠 옆에 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="eb68ff9be1ac7859d78b72758e0512fdc7ac4428" translate="yes" xml:space="preserve">
          <source>This will render a file named &lt;code&gt;_menu.html.erb&lt;/code&gt; at that point within the view being rendered. Note the leading underscore character: partials are named with a leading underscore to distinguish them from regular views, even though they are referred to without the underscore. This holds true even when you're pulling in a partial from another folder:</source>
          <target state="translated">렌더링되는 뷰 내에서 &lt;code&gt;_menu.html.erb&lt;/code&gt; 라는 파일 이 렌더링됩니다. 선행 밑줄 문자를 참고하십시오. 부분은 밑줄없이 참조하더라도 일반보기와 구분하기 위해 선행 밑줄로 이름이 지정됩니다. 다른 폴더에서 부분을 가져와도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="4f45b4bd7eb9c27a0f58eb80a13d0e37782d9ecd" translate="yes" xml:space="preserve">
          <source>This will render a file named &lt;code&gt;_menu.html.erb&lt;/code&gt; at that point within the view that is being rendered. Note the leading underscore character: partials are named with a leading underscore to distinguish them from regular views, even though they are referred to without the underscore. This holds true even when you're pulling in a partial from another folder:</source>
          <target state="translated">렌더링되는 뷰 내에서 &lt;code&gt;_menu.html.erb&lt;/code&gt; 라는 파일 이 렌더링됩니다. 선행 밑줄 문자를 참고하십시오. 부분은 밑줄없이 참조하더라도 일반보기와 구분하기 위해 선행 밑줄로 이름이 지정됩니다. 다른 폴더에서 부분을 가져와도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="56dfc66467558f6050b46077a3a4306dfb20347f" translate="yes" xml:space="preserve">
          <source>This will render the layout for each user and yield to the block, passing the user, each time.</source>
          <target state="translated">그러면 각 사용자의 레이아웃이 렌더링되고 매번 사용자를 전달하여 블록에 양보됩니다.</target>
        </trans-unit>
        <trans-unit id="6ba11e5dcb30c836570ac2f15aecd3c4ec288990" translate="yes" xml:space="preserve">
          <source>This will render the partial &lt;code&gt;advertisement/_ad.html.erb&lt;/code&gt; regardless of which controller this is being called from.</source>
          <target state="translated">호출되는 컨트롤러에 관계없이 부분 &lt;code&gt;advertisement/_ad.html.erb&lt;/code&gt; 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="4d230c74d01704cac9b56b96aa1e51fae1536b68" translate="yes" xml:space="preserve">
          <source>This will render the show template if the request isn't sending a matching ETag or If-Modified-Since header and just a &lt;code&gt;304 Not
Modified&lt;/code&gt; response if there's a match.</source>
          <target state="translated">요청이 일치하는 ETag 또는 If-Modified-Since 헤더를 보내지 않고 일치하는 경우 &lt;code&gt;304 Not Modified&lt;/code&gt; 응답 만 보내면 쇼 템플릿이 렌더링됩니다 .</target>
        </trans-unit>
        <trans-unit id="c27ca8b6330ab956ecffed5c9367136b728d74d8" translate="yes" xml:space="preserve">
          <source>This will render the template 'another_template.html.erb' for the HTML part and use the rendered text for the text part. The render command is the same one used inside of Action Controller, so you can use all the same options, such as &lt;code&gt;:text&lt;/code&gt;, &lt;code&gt;:inline&lt;/code&gt; etc.</source>
          <target state="translated">그러면 HTML 부분에 대한 'another_template.html.erb'템플릿이 렌더링되고 텍스트 부분에 렌더링 된 텍스트가 사용됩니다. render 명령은 Action Controller 내에서 사용되는 것과 동일하므로 &lt;code&gt;:text&lt;/code&gt; , &lt;code&gt;:inline&lt;/code&gt; 등과 같은 동일한 옵션을 모두 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6db152e5f78cdfd1ecc064e9bff360f0cd4635c4" translate="yes" xml:space="preserve">
          <source>This will render the template 'another_template.html.erb' for the HTML part and use the rendered text for the text part. The render command is the same one used inside of Action Controller, so you can use all the same options, such as &lt;code&gt;:text&lt;/code&gt;, &lt;code&gt;:inline&lt;/code&gt;, etc.</source>
          <target state="translated">그러면 HTML 부분에 대한 템플릿 'another_template.html.erb'가 렌더링되고 텍스트 부분에 렌더링 된 텍스트가 사용됩니다. render 명령은 Action Controller 내부에서 사용되는 것과 동일하므로 &lt;code&gt;:text&lt;/code&gt; , &lt;code&gt;:inline&lt;/code&gt; 등과 같은 모든 동일한 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7b4fcca36c8532c33b51dcfa96b075aea80995a" translate="yes" xml:space="preserve">
          <source>This will result in a &lt;code&gt;params&lt;/code&gt; hash that looks like</source>
          <target state="translated">이렇게하면 &lt;code&gt;params&lt;/code&gt; hash 가 생길 것입니다.</target>
        </trans-unit>
        <trans-unit id="663febf4758d5a2b69988d78f730cb88d605e99c" translate="yes" xml:space="preserve">
          <source>This will result in a single SQL query with joins along the lines of: &lt;code&gt;LEFT OUTER JOIN comments ON comments.post_id = posts.id&lt;/code&gt; and &lt;code&gt;LEFT OUTER JOIN authors ON authors.id = posts.author_id&lt;/code&gt;. Note that using conditions like this can have unintended consequences. In the above example, posts with no approved comments are not returned at all because the conditions apply to the SQL statement as a whole and not just to the association.</source>
          <target state="translated">&lt;code&gt;LEFT OUTER JOIN comments ON comments.post_id = posts.id&lt;/code&gt; 및 &lt;code&gt;LEFT OUTER JOIN authors ON authors.id = posts.author_id&lt;/code&gt; 행을 따라 조인이있는 단일 SQL 쿼리가 생성 됩니다. 이와 같은 조건을 사용하면 의도하지 않은 결과가 발생할 수 있습니다. 위의 예에서 승인 된 주석이없는 게시물은 조건이 연결뿐만 아니라 SQL 문 전체에 적용되기 때문에 전혀 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d3e4840c8603d5b4a06e304043585fcc08a41571" translate="yes" xml:space="preserve">
          <source>This will result in the following SQL query:</source>
          <target state="translated">다음과 같은 SQL 쿼리가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3c075ba2bbd1d0762f769564b87ddd6d9bf1b94e" translate="yes" xml:space="preserve">
          <source>This will result in the following SQL:</source>
          <target state="translated">결과는 다음 SQL입니다.</target>
        </trans-unit>
        <trans-unit id="5d54ad2fd65b654fba8f2df8951cf535f8d73c2d" translate="yes" xml:space="preserve">
          <source>This will return a number (possibly a floating point number such as 3.14159265) representing the average value in the field.</source>
          <target state="translated">필드의 평균값을 나타내는 숫자 (3.14159265와 같은 부동 소수점 숫자)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5c2fba0c077f2ff172d17f8a4d2d1cdc7c5900ed" translate="yes" xml:space="preserve">
          <source>This will rollback the latest migration, either by reverting the &lt;code&gt;change&lt;/code&gt; method or by running the &lt;code&gt;down&lt;/code&gt; method. If you need to undo several migrations you can provide a &lt;code&gt;STEP&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;change&lt;/code&gt; 방법 을 되돌 리거나 &lt;code&gt;down&lt;/code&gt; 방법 을 실행하여 최신 마이그레이션을 롤백합니다 . 여러 마이그레이션을 실행 취소해야하는 경우 &lt;code&gt;STEP&lt;/code&gt; 매개 변수를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d237910321741fee8d5a4eb892438f7067240437" translate="yes" xml:space="preserve">
          <source>This will route to the &lt;code&gt;Admin::UserPermissions&lt;/code&gt; controller.</source>
          <target state="translated">&lt;code&gt;Admin::UserPermissions&lt;/code&gt; 컨트롤러로 라우팅됩니다 .</target>
        </trans-unit>
        <trans-unit id="164157eae978fee986e74cfd1b4ddc538abbf3d3" translate="yes" xml:space="preserve">
          <source>This will run all test methods from the test case.</source>
          <target state="translated">테스트 사례에서 모든 테스트 방법이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="b72ee07c69c7720817ebb51926bfb311c6c80efe" translate="yes" xml:space="preserve">
          <source>This will send the supplied string to the browser with a MIME type of &lt;code&gt;text/javascript&lt;/code&gt;.</source>
          <target state="translated">제공된 문자열을 MIME 유형의 &lt;code&gt;text/javascript&lt;/code&gt; 로 브라우저에 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="fd015d1164984982431932abd6f39ff61b13a6eb" translate="yes" xml:space="preserve">
          <source>This will simply find the first record in the database, and grants access to this user.</source>
          <target state="translated">이것은 단순히 데이터베이스에서 첫 번째 레코드를 찾고이 사용자에게 액세스 권한을 부여합니다.</target>
        </trans-unit>
        <trans-unit id="6bb95230b7eb0364ea9dd96d5e1f7485daf29ab1" translate="yes" xml:space="preserve">
          <source>This will skip generating &lt;code&gt;AnimalsRecord&lt;/code&gt; since you've indicated to Rails that you want to use a different parent class.</source>
          <target state="translated">다른 부모 클래스를 사용하고 싶다고 Rails에 표시 &lt;code&gt;AnimalsRecord&lt;/code&gt; 때문에 AnimalsRecord 생성을 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="9e1b7a8f32df607ce7c02ae76b4a99654a0bc748" translate="yes" xml:space="preserve">
          <source>This will start up Puma, a web server distributed with Rails by default. To see your application in action, open a browser window and navigate to http://localhost:3000. You should see the Rails default information page:</source>
          <target state="translated">기본적으로 Rails와 함께 배포되는 웹 서버 인 Puma가 시작됩니다. 작동중인 애플리케이션을 보려면 브라우저 창을 열고 http : // localhost : 3000으로 이동하십시오. Rails 기본 정보 페이지가 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="e4f89e91cdbccde5c8e48b2382bbcf38015ed859" translate="yes" xml:space="preserve">
          <source>This will tell you that everything got generated properly and you are ready to start adding functionality.</source>
          <target state="translated">모든 것이 올바르게 생성되었으며 기능 추가를 시작할 준비가되었음을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="40c8fe16e6bbe35419e9e8cc45d6fae5b1e8e450" translate="yes" xml:space="preserve">
          <source>This will throw an &lt;code&gt;ArgumentError&lt;/code&gt; if the argument doesn't respond to &lt;code&gt;#include?&lt;/code&gt;.</source>
          <target state="translated">이는 발생합니다 &lt;code&gt;ArgumentError&lt;/code&gt; 인수가 응답하지 않는 경우 &lt;code&gt;#include?&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1f01719616b6fad3daac567c1a4643143ed728f1" translate="yes" xml:space="preserve">
          <source>This will work fine, because both the &lt;code&gt;Supplier&lt;/code&gt; and the &lt;code&gt;Account&lt;/code&gt; class are defined within the same scope. But the following will &lt;em&gt;not&lt;/em&gt; work, because &lt;code&gt;Supplier&lt;/code&gt; and &lt;code&gt;Account&lt;/code&gt; are defined in different scopes:</source>
          <target state="translated">&lt;code&gt;Supplier&lt;/code&gt; 와 &lt;code&gt;Account&lt;/code&gt; 클래스가 모두 동일한 범위 내에 정의되어 있으므로 제대로 작동합니다 . 그러나 &lt;code&gt;Supplier&lt;/code&gt; 와 &lt;code&gt;Account&lt;/code&gt; 이 서로 다른 범위로 정의되어 있으므로 다음이 작동 &lt;em&gt;하지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d4035999e6b772290381343414db9ca8460af90c" translate="yes" xml:space="preserve">
          <source>This will work similarly to formats and MIME types negotiation. If there is no &lt;code&gt;:tablet&lt;/code&gt; variant declared, the &lt;code&gt;:phone&lt;/code&gt; variant will be used:</source>
          <target state="translated">이것은 형식 및 MIME 형식 협상과 유사하게 작동합니다. &lt;code&gt;:tablet&lt;/code&gt; 변형이 선언 되지 않은 경우 &lt;code&gt;:phone&lt;/code&gt; 변형이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c787e17fa75f3571fe17f46c680fd9141652976c" translate="yes" xml:space="preserve">
          <source>This works by using a type column in addition to a foreign key to specify the associated record. In the Asset example, you'd need an &lt;code&gt;attachable_id&lt;/code&gt; integer column and an &lt;code&gt;attachable_type&lt;/code&gt; string column.</source>
          <target state="translated">외래 키 외에 형식 열을 사용하여 연결된 레코드를 지정하면됩니다. Asset 예제에서는 &lt;code&gt;attachable_id&lt;/code&gt; 정수 열과 &lt;code&gt;attachable_type&lt;/code&gt; 문자열 열이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="780f4766354c112798620bcc4f97e9f1ea86e865" translate="yes" xml:space="preserve">
          <source>This works exactly the same as:</source>
          <target state="translated">이것은 다음과 정확히 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="e158ec7313604d8047a3dd3bab1a9f48db091ea6" translate="yes" xml:space="preserve">
          <source>This works for mysql2 where table.column can be used to resolve ambiguity.</source>
          <target state="translated">이것은 table.column을 사용하여 모호성을 해결하는 mysql2에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="918ebe9aad08d7dd94a6d30317f9a1633fcec4b8" translate="yes" xml:space="preserve">
          <source>This works the same as &lt;a href=&quot;classmethods#method-i-increment_counter&quot;&gt;&lt;code&gt;increment_counter&lt;/code&gt;&lt;/a&gt; but reduces the column value by 1 instead of increasing it.</source>
          <target state="translated">이것은 &lt;a href=&quot;classmethods#method-i-increment_counter&quot;&gt; &lt;code&gt;increment_counter&lt;/code&gt; &lt;/a&gt; 와 동일하게 작동 하지만 열 값을 늘리는 대신 1 씩 줄입니다.</target>
        </trans-unit>
        <trans-unit id="9a3fe6d3ce74d58b904dcedaa6687cd2f76af008" translate="yes" xml:space="preserve">
          <source>This works the same as &lt;a href=&quot;classmethods#method-i-increment_counter&quot;&gt;increment_counter&lt;/a&gt; but reduces the column value by 1 instead of increasing it.</source>
          <target state="translated">이것은 &lt;a href=&quot;classmethods#method-i-increment_counter&quot;&gt;increment_counter&lt;/a&gt; 와 동일하게 작동 하지만 열 값을 늘리는 대신 1 씩 줄입니다.</target>
        </trans-unit>
        <trans-unit id="cb94a6cf1a0ae3ce707fd86dde6870669f262cb5" translate="yes" xml:space="preserve">
          <source>This works with any class that mixes in &lt;code&gt;GlobalID::Identification&lt;/code&gt;, which by default has been mixed into Active Record classes.</source>
          <target state="translated">&lt;code&gt;GlobalID::Identification&lt;/code&gt; 혼합 된 모든 클래스에서 작동하며 기본적으로 Active Record 클래스에 혼합되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e6d15fd8e37d7ed52955318d0e70d4b257f3f1d" translate="yes" xml:space="preserve">
          <source>This would add something like &quot;Process data files (0.34523)&quot; to the log, which you can then use to compare timings when optimizing your code.</source>
          <target state="translated">그러면 &quot;프로세스 데이터 파일 (0.34523)&quot;과 같은 것이 로그에 추가되어 코드를 최적화 할 때 타이밍을 비교하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f96ee07389e9746ed51318aa375fc3f3bc4bf41f" translate="yes" xml:space="preserve">
          <source>This would cause the routing to recognize paths such as:</source>
          <target state="translated">이로 인해 라우팅은 다음과 같은 경로를 인식하게됩니다.</target>
        </trans-unit>
        <trans-unit id="91a4b5a51dd6ff89a612b1513b5671963be035af" translate="yes" xml:space="preserve">
          <source>This would detect that there are no books with the specified ID, populate the &lt;code&gt;@books&lt;/code&gt; instance variable with all the books in the model, and then directly render the &lt;code&gt;index.html.erb&lt;/code&gt; template, returning it to the browser with a flash alert message to tell the user what happened.</source>
          <target state="translated">이렇게하면 지정된 ID를 가진 책이 없음을 감지하고 &lt;code&gt;@books&lt;/code&gt; 인스턴스 변수를 모델의 모든 책으로 채운 다음 &lt;code&gt;index.html.erb&lt;/code&gt; 템플릿 을 직접 렌더링하여 플래시 경고 메시지가있는 브라우저로 반환합니다. 사용자에게 무슨 일이 있었는지 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="44d5f8c2e2d24f1f452b35591a3b73609c5c7b3a" translate="yes" xml:space="preserve">
          <source>This would first render &lt;code&gt;advertiser/_account.html.erb&lt;/code&gt; with &lt;code&gt;@buyer&lt;/code&gt; passed in as the local variable &lt;code&gt;account&lt;/code&gt;, then render &lt;code&gt;advertiser/_ad.html.erb&lt;/code&gt; and pass the local variable &lt;code&gt;ad&lt;/code&gt; to the template for display.</source>
          <target state="translated">이것은 처음으로 렌더링 &lt;code&gt;advertiser/_account.html.erb&lt;/code&gt; 와 &lt;code&gt;@buyer&lt;/code&gt; 로컬 변수로 전달 &lt;code&gt;account&lt;/code&gt; 다음 렌더링, &lt;code&gt;advertiser/_ad.html.erb&lt;/code&gt; 로컬 변수에 합격 &lt;code&gt;ad&lt;/code&gt; 표시하기위한 템플릿.</target>
        </trans-unit>
        <trans-unit id="aa4a7abea851f46070c7c730755deacdb8ffc3db" translate="yes" xml:space="preserve">
          <source>This would generate SQL like:</source>
          <target state="translated">이것은 다음과 같은 SQL을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="0f0e1c1f0cdaa556dfdba1dd229fa16060a7947f" translate="yes" xml:space="preserve">
          <source>This would generate a query which contains a &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; whereas the &lt;code&gt;joins&lt;/code&gt; method would generate one using the &lt;code&gt;INNER JOIN&lt;/code&gt; function instead.</source>
          <target state="translated">이것은 &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; 을 포함하는 쿼리를 생성하는 반면 &lt;code&gt;joins&lt;/code&gt; 메소드는 대신 &lt;code&gt;INNER JOIN&lt;/code&gt; 함수를 사용하여 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="3e354575ff67ecbdf5b3d0737b5525ef034f36bd" translate="yes" xml:space="preserve">
          <source>This would look for a partial named &lt;code&gt;_link_area.html.erb&lt;/code&gt; and render it using the layout &lt;code&gt;_graybar.html.erb&lt;/code&gt;. Note that layouts for partials follow the same leading-underscore naming as regular partials, and are placed in the same folder with the partial that they belong to (not in the master &lt;code&gt;layouts&lt;/code&gt; folder).</source>
          <target state="translated">이 부분 이름을 찾을 것이다 &lt;code&gt;_link_area.html.erb&lt;/code&gt; 및 레이아웃 사용하여 렌더링 &lt;code&gt;_graybar.html.erb&lt;/code&gt; 을 . 부분에 대한 레이아웃은 일반 부분과 동일한 밑줄 이름 지정을 따르며 마스터 &lt;code&gt;layouts&lt;/code&gt; 폴더가 아닌 해당 부분과 동일한 폴더에 배치됩니다 .</target>
        </trans-unit>
        <trans-unit id="6b55ed4dd6ec101ed4ad3780bfa5055c960f2b37" translate="yes" xml:space="preserve">
          <source>This would produce the following header:</source>
          <target state="translated">다음과 같은 헤더가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="15722a91035ff2ace8574da4506361bd5cf74ae0" translate="yes" xml:space="preserve">
          <source>This would re-raise only the &lt;code&gt;MissingTranslationData&lt;/code&gt; exception, passing all other input to the default exception handler.</source>
          <target state="translated">이렇게하면 &lt;code&gt;MissingTranslationData&lt;/code&gt; 예외 만 다시 발생하고 다른 모든 입력은 기본 예외 처리기로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8af52b3704413d695e1faff03a478a965a6c0a3c" translate="yes" xml:space="preserve">
          <source>This would render &amp;ldquo;advertiser/_account.html.erb&amp;rdquo;.</source>
          <target state="translated">&amp;ldquo;advertiser / _account.html.erb&amp;rdquo;로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="856505a9cf7e940add8cfdd09b3f5ea89f8e82d7" translate="yes" xml:space="preserve">
          <source>This would result in &lt;code&gt;params[:person][:addresses]&lt;/code&gt; being an array of hashes with keys &lt;code&gt;line1&lt;/code&gt;, &lt;code&gt;line2&lt;/code&gt;, and &lt;code&gt;city&lt;/code&gt;.</source>
          <target state="translated">이로 인해 &lt;code&gt;params[:person][:addresses]&lt;/code&gt; 는 &lt;code&gt;line1&lt;/code&gt; , &lt;code&gt;line2&lt;/code&gt; 및 &lt;code&gt;city&lt;/code&gt; 키가있는 해시 배열이 됩니다.</target>
        </trans-unit>
        <trans-unit id="2ffcd031fa00742bc180b1c7dddb773b8624776c" translate="yes" xml:space="preserve">
          <source>This would result in &lt;code&gt;params[:person][:phone_number]&lt;/code&gt; being an array containing the inputted phone numbers.</source>
          <target state="translated">그러면 &lt;code&gt;params[:person][:phone_number]&lt;/code&gt; 가 입력 된 전화 번호를 포함하는 배열이됩니다.</target>
        </trans-unit>
        <trans-unit id="41e985c3b4dfd7c8234665043e2275c3407a0535" translate="yes" xml:space="preserve">
          <source>This would then turn the above code for &lt;code&gt;set_author&lt;/code&gt; into this:</source>
          <target state="translated">그러면 &lt;code&gt;set_author&lt;/code&gt; 에 대한 위의 코드가 다음으로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="56f479c2662bdcaf2c0265c4d70139b0ac312c97" translate="yes" xml:space="preserve">
          <source>This would transparently migrate your existing &lt;code&gt;Marshal&lt;/code&gt;-serialized cookies into the new &lt;code&gt;JSON&lt;/code&gt;-based format.</source>
          <target state="translated">기존 &lt;code&gt;Marshal&lt;/code&gt; 직렬화 쿠키를 새로운 &lt;code&gt;JSON&lt;/code&gt; 기반 형식으로 투명하게 마이그레이션합니다 .</target>
        </trans-unit>
        <trans-unit id="15e58a84e6445aea236c46b5b12a25f2d090ecec" translate="yes" xml:space="preserve">
          <source>This writes the path to the particular asset being referenced.</source>
          <target state="translated">참조되는 특정 자산의 경로를 씁니다.</target>
        </trans-unit>
        <trans-unit id="59913b15baf3eedd5d31cc088230eeac598bb7c9" translate="yes" xml:space="preserve">
          <source>This writes the path to the particular asset being referenced. In this example, it would make sense to have an image in one of the asset load paths, such as &lt;code&gt;app/assets/images/image.png&lt;/code&gt;, which would be referenced here. If this image is already available in &lt;code&gt;public/assets&lt;/code&gt; as a fingerprinted file, then that path is referenced.</source>
          <target state="translated">참조되는 특정 자산의 경로를 씁니다. 이 예제에서는 &lt;code&gt;app/assets/images/image.png&lt;/code&gt; 와 같은 자산로드 경로 중 하나에 이미지가 있는 것이 좋습니다 . 이 이미지가 이미 &lt;code&gt;public/assets&lt;/code&gt; 에서 지문 파일로 사용 가능한 경우 해당 경로가 참조됩니다.</target>
        </trans-unit>
        <trans-unit id="b750bf91c273e4f3ddb4f320d7202fe3ec31f456" translate="yes" xml:space="preserve">
          <source>Thor</source>
          <target state="translated">Thor</target>
        </trans-unit>
        <trans-unit id="6983f57bf3da8d5d31c7f429bcfee6f63af50673" translate="yes" xml:space="preserve">
          <source>Thor::Group</source>
          <target state="translated">Thor::Group</target>
        </trans-unit>
        <trans-unit id="d4fda76aa6b524cc426498c47eb39a3ee08e52f5" translate="yes" xml:space="preserve">
          <source>Those labels can be customized using I18n under the &lt;code&gt;helpers.submit&lt;/code&gt; key (the same as submit helper) and using &lt;code&gt;%{model}&lt;/code&gt; for translation interpolation:</source>
          <target state="translated">이러한 레이블은 &lt;code&gt;helpers.submit&lt;/code&gt; 키 (제출 도우미와 동일) 에서 I18n을 사용 하고 번역 보간에 &lt;code&gt;%{model}&lt;/code&gt; 을 사용하여 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5213151b847d46237ea5b6531280a5a655b15e61" translate="yes" xml:space="preserve">
          <source>Those labels can be customized using I18n under the &lt;code&gt;helpers.submit&lt;/code&gt; key and using &lt;code&gt;%{model}&lt;/code&gt; for translation interpolation:</source>
          <target state="translated">&lt;code&gt;helpers.submit&lt;/code&gt; 키 에서 I18n을 사용 하고 번역 보간에 &lt;code&gt;%{model}&lt;/code&gt; 을 사용 하여 해당 레이블을 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5b08d8785f315537bf824bc86ed876bc1b75d232" translate="yes" xml:space="preserve">
          <source>Though if both the secret and the cipher was changed at the same time, the above should be combined into:</source>
          <target state="translated">비밀과 암호가 동시에 변경된 경우 위의 내용을 다음과 같이 결합해야합니다.</target>
        </trans-unit>
        <trans-unit id="a32aadc81bca0c72037744f30d7a73d9cd332bdf" translate="yes" xml:space="preserve">
          <source>Though the &lt;a href=&quot;classmethods#method-i-transaction&quot;&gt;&lt;code&gt;transaction&lt;/code&gt;&lt;/a&gt; class method is called on some Active Record class, the objects within the transaction block need not all be instances of that class. This is because transactions are per-database connection, not per-model.</source>
          <target state="translated">&lt;a href=&quot;classmethods#method-i-transaction&quot;&gt; &lt;code&gt;transaction&lt;/code&gt; &lt;/a&gt; 클래스 메서드가 일부 Active Record 클래스에서 호출 되지만 트랜잭션 블록 내의 개체가 모두 해당 클래스의 인스턴스 일 필요는 없습니다. 이는 트랜잭션이 모델 별이 아니라 데이터베이스 별 연결이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="9d824669e552950472572d84ecc126191a248c6b" translate="yes" xml:space="preserve">
          <source>Though the &lt;a href=&quot;classmethods#method-i-transaction&quot;&gt;transaction&lt;/a&gt; class method is called on some Active Record class, the objects within the transaction block need not all be instances of that class. This is because transactions are per-database connection, not per-model.</source>
          <target state="translated">&lt;a href=&quot;classmethods#method-i-transaction&quot;&gt;트랜잭션&lt;/a&gt; 클래스 메소드는 일부 Active Record 클래스에서 호출 되지만 트랜잭션 블록 내의 오브젝트가 모두 해당 클래스의 인스턴스 일 필요는 없습니다. 트랜잭션은 모델이 아닌 데이터베이스 별 연결이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="f224d0c3de1019984b8ae2b2815fdd756e88990c" translate="yes" xml:space="preserve">
          <source>Though the above would most likely be combined into one rotation:</source>
          <target state="translated">위의 내용이 한 번의 회전으로 결합 될 가능성이 높지만</target>
        </trans-unit>
        <trans-unit id="66fa2a7b7cfaed86c5ba19ef94fe296967ab46d3" translate="yes" xml:space="preserve">
          <source>Threaded Active Job adapters, including the built-in Async, will likewise execute several jobs at the same time. Action Cable channels are managed this way too.</source>
          <target state="translated">내장 비동기를 포함한 스레드 활성 작업 어댑터도 동시에 여러 작업을 실행합니다. 조치 케이블 채널도 이와 같이 관리됩니다.</target>
        </trans-unit>
        <trans-unit id="fb3738e0b3f2e613545ddf6035342e58d072708f" translate="yes" xml:space="preserve">
          <source>Threading and Code Execution in Rails</source>
          <target state="translated">Rails에서 스레딩 및 코드 실행</target>
        </trans-unit>
        <trans-unit id="bb12e8aaaecc434fd51e448fe7669bced1bdd107" translate="yes" xml:space="preserve">
          <source>Threads</source>
          <target state="translated">Threads</target>
        </trans-unit>
        <trans-unit id="220a4fe77e2b5cbeb0401725de406d873c99241a" translate="yes" xml:space="preserve">
          <source>Threadsafe, fair, LIFO queue. Meant to be used by &lt;a href=&quot;../connectionpool&quot;&gt;&lt;code&gt;ConnectionPool&lt;/code&gt;&lt;/a&gt; with which it shares a Monitor.</source>
          <target state="translated">스레드 세이프, 공정, LIFO 대기열. 모니터를 공유하는 &lt;a href=&quot;../connectionpool&quot;&gt; &lt;code&gt;ConnectionPool&lt;/code&gt; &lt;/a&gt; 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="2844122520e178f0a9d4d76f874b0a9ea6926882" translate="yes" xml:space="preserve">
          <source>Threadsafe, fair, LIFO queue. Meant to be used by &lt;a href=&quot;../connectionpool&quot;&gt;ConnectionPool&lt;/a&gt; with which it shares a Monitor.</source>
          <target state="translated">스레드 안전하고 공정한 LIFO 대기열. &lt;a href=&quot;../connectionpool&quot;&gt;ConnectionPool&lt;/a&gt; 이 모니터를 공유하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e8551f86c307e1f569085e575597e44ab3d9521c" translate="yes" xml:space="preserve">
          <source>Three kinds of callbacks are supported: before callbacks, run before a certain event; after callbacks, run after the event; and around callbacks, blocks that surround the event, triggering it when they yield. Callback code can be contained in instance methods, procs or lambdas, or callback objects that respond to certain predetermined methods. See &lt;code&gt;ClassMethods.set_callback&lt;/code&gt; for details.</source>
          <target state="translated">세 가지 종류의 콜백이 지원됩니다. 콜백 전에 특정 이벤트 전에 실행합니다. 콜백 후 이벤트 후에 실행하십시오. 콜백 주변에서 이벤트를 둘러싸는 블록이 발생하면 이벤트가 발생하면 트리거됩니다. 콜백 코드는 인스턴스 메소드, 프로세스 또는 람다 또는 미리 결정된 특정 메소드에 응답하는 콜백 객체에 포함될 수 있습니다. 자세한 내용은 &lt;code&gt;ClassMethods.set_callback&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d78446bdeec376dff2212d816a0563b91589188e" translate="yes" xml:space="preserve">
          <source>Thus &lt;code&gt;data-user-id&lt;/code&gt; can be accessed as &lt;code&gt;dataset.userId&lt;/code&gt;.</source>
          <target state="translated">따라서 &lt;code&gt;data-user-id&lt;/code&gt; 는 &lt;code&gt;dataset.userId&lt;/code&gt; 로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="533163ca96b70fcdb1bd5e4ec1f7540f6ee285cc" translate="yes" xml:space="preserve">
          <source>Thus the following calls are equivalent:</source>
          <target state="translated">따라서 다음 호출은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b7fd6a465cd88627e0ee8a7a50b362426d406516" translate="yes" xml:space="preserve">
          <source>Thus we encourage everybody to experiment with new ideas and features in gems or other libraries and make them available to the community. (Don't forget to announce your work on our &lt;a href=&quot;https://groups.google.com/forum/#!forum/rails-i18n&quot;&gt;mailing list&lt;/a&gt;!)</source>
          <target state="translated">따라서 우리는 모든 사람들이 보석이나 다른 도서관의 새로운 아이디어와 기능을 실험하고 커뮤니티에서 이용할 수 있도록 장려합니다. ( &lt;a href=&quot;https://groups.google.com/forum/#!forum/rails-i18n&quot;&gt;메일 링리스트&lt;/a&gt; 에서 작업을 발표하는 것을 잊지 마십시오 !)</target>
        </trans-unit>
        <trans-unit id="64299f77b698aabcadcfb4203c1f1d473b65ee14" translate="yes" xml:space="preserve">
          <source>Thus, after a simple require like:</source>
          <target state="translated">따라서 간단한 후 다음과 같은 요구 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="125198aa1018b31d1828449e8e9c3447d4fda2bf" translate="yes" xml:space="preserve">
          <source>Thus, an informal expression like &quot;the &lt;code&gt;String&lt;/code&gt; class&quot; technically means the class object stored in the constant called &quot;String&quot;. That constant, in turn, belongs to the class object stored in the constant called &quot;Object&quot;.</source>
          <target state="translated">따라서 &quot; &lt;code&gt;String&lt;/code&gt; 클래스&quot; 와 같은 비공식적 인 표현은 기술적으로 &quot;String&quot;이라는 상수에 저장된 클래스 객체를 의미합니다. 그 상수는 차례로 &quot;Object&quot;라는 상수에 저장된 클래스 개체에 속합니다.</target>
        </trans-unit>
        <trans-unit id="943596e1932a1bfbf04c7e6b388cd68e2d80ea35" translate="yes" xml:space="preserve">
          <source>Thus, in our example it will try the following keys in this order and return the first result:</source>
          <target state="translated">따라서이 예에서는 다음 키를이 순서대로 시도하여 첫 번째 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="854b45834349a9434ba70eb84a05b8f7f4964ddb" translate="yes" xml:space="preserve">
          <source>Thus, the Ruby I18n gem is split into two parts:</source>
          <target state="translated">따라서 Ruby I18n gem은 두 부분으로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="0e7e457daaa427e0c57ee44631058c674daa9cb8" translate="yes" xml:space="preserve">
          <source>Thus, to load all extensions to &lt;code&gt;Object&lt;/code&gt; (including &lt;code&gt;blank?&lt;/code&gt;):</source>
          <target state="translated">따라서 &lt;code&gt;Object&lt;/code&gt; 에 모든 확장을로드하려면 ( &lt;code&gt;blank?&lt;/code&gt; 포함 ) :</target>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="0479dbb889a6a5e40e9b16e0c07736df269d0080" translate="yes" xml:space="preserve">
          <source>Time Constructors</source>
          <target state="translated">시간 생성자</target>
        </trans-unit>
        <trans-unit id="7cb101b09abe53e3970615e26d1c5ac1a5a1a0f2" translate="yes" xml:space="preserve">
          <source>Time Zone and Country Select</source>
          <target state="translated">시간대 및 국가 선택</target>
        </trans-unit>
        <trans-unit id="758bb3a92d2943b681c1f3053c0ac441e1cf96bc" translate="yes" xml:space="preserve">
          <source>Time when it finished</source>
          <target state="translated">완료된 시간</target>
        </trans-unit>
        <trans-unit id="03f428e3c88d569287d827deae102c6dbdd168d3" translate="yes" xml:space="preserve">
          <source>Time when it started</source>
          <target state="translated">시작한 시간</target>
        </trans-unit>
        <trans-unit id="82f05dbf9bd40d142582cbabaf13c9ec714f7fc8" translate="yes" xml:space="preserve">
          <source>Time#-</source>
          <target state="translated">Time#-</target>
        </trans-unit>
        <trans-unit id="7a7aa7d8e4b40a785503fa9c8daf43ea4bc56d53" translate="yes" xml:space="preserve">
          <source>Time#- can also be used to determine the number of seconds between two &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; instances. We're layering on additional behavior so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances are coerced into values that Time#- will recognize</source>
          <target state="translated">Time #-을 사용하여 두 &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; 인스턴스 사이의 초 수를 결정할 수도 있습니다 . &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 인스턴스가 Time #-이 인식 할 수있는 값으로 강제 변환 되도록 추가 동작을 계층화합니다.</target>
        </trans-unit>
        <trans-unit id="5bb87c2f9d9945ef31886829761b28fbf4ea3900" translate="yes" xml:space="preserve">
          <source>Time#ago</source>
          <target state="translated">Time#ago</target>
        </trans-unit>
        <trans-unit id="535061e30d3ec336298cfcce028fd03250f67a69" translate="yes" xml:space="preserve">
          <source>Time#eql?</source>
          <target state="translated">Time#eql?</target>
        </trans-unit>
        <trans-unit id="f49e737bf31856a03111c5200f6835d9c041ed09" translate="yes" xml:space="preserve">
          <source>Time#in</source>
          <target state="translated">Time#in</target>
        </trans-unit>
        <trans-unit id="e5f35007f2fd715805bc7ee4f6619bdeaedd28b2" translate="yes" xml:space="preserve">
          <source>Time#noon</source>
          <target state="translated">Time#noon</target>
        </trans-unit>
        <trans-unit id="9a4fe8b3bc5da5b531b4d49404f6219c94b730de" translate="yes" xml:space="preserve">
          <source>Time#to_s</source>
          <target state="translated">Time#to_s</target>
        </trans-unit>
        <trans-unit id="072bb1013189d6ec714afa16f54db8ee314e4e97" translate="yes" xml:space="preserve">
          <source>Time::===</source>
          <target state="translated">Time::===</target>
        </trans-unit>
        <trans-unit id="f52704cb2dbee04fc88151aaddbbd5c040769349" translate="yes" xml:space="preserve">
          <source>Time::at</source>
          <target state="translated">Time::at</target>
        </trans-unit>
        <trans-unit id="71fee4b114e10fd6ff1eb8600d86ffa3eda424ec" translate="yes" xml:space="preserve">
          <source>Time::zone</source>
          <target state="translated">Time::zone</target>
        </trans-unit>
        <trans-unit id="002a7fb356856a5683fcfcda3bf71e15fce88416" translate="yes" xml:space="preserve">
          <source>Time::zone=</source>
          <target state="translated">Time::zone=</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="19eabc961735d78f12fc7be906ffcb033853cf85" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="translated">Timestamp</target>
        </trans-unit>
        <trans-unit id="2e12f675325012e3b51130cfc4c0495653df0d78" translate="yes" xml:space="preserve">
          <source>Timestamp when the job should be performed</source>
          <target state="translated">작업을 수행해야 할 시간 소인</target>
        </trans-unit>
        <trans-unit id="e603c1d718c3407ed978ed5e5b448466af8b8ed4" translate="yes" xml:space="preserve">
          <source>Timestamped Migrations</source>
          <target state="translated">타임 스탬프 마이그레이션</target>
        </trans-unit>
        <trans-unit id="d7afe964a9bc9490c0d91ac3e8197cd7bf16e3f7" translate="yes" xml:space="preserve">
          <source>Timestamping can be turned off by setting:</source>
          <target state="translated">다음을 설정하여 타임 스탬프를 끌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e740a2d0dd5f664f5f8152670d8f74f5c2a8cfc" translate="yes" xml:space="preserve">
          <source>Timestamps are in UTC by default but you can use the local timezone by setting:</source>
          <target state="translated">타임 스탬프는 기본적으로 UTC이지만 다음을 설정하여 로컬 시간대를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f84b4e1e741a5e90fb140baa746fb6bacc4ae5a" translate="yes" xml:space="preserve">
          <source>Timezone to be used during the job.</source>
          <target state="translated">작업 중에 사용될 시간대.</target>
        </trans-unit>
        <trans-unit id="50790fb9896851d0217b7037f6684381e6eec66d" translate="yes" xml:space="preserve">
          <source>Tips, Tricks, and Warnings</source>
          <target state="translated">팁, 요령 및 경고</target>
        </trans-unit>
        <trans-unit id="e78cb5861cde261d84b6558812d6edfa320b4cc6" translate="yes" xml:space="preserve">
          <source>To accept the rich text content, all you have to do is permit the referenced attribute:</source>
          <target state="translated">리치 텍스트 컨텐츠를 승인하려면 참조 된 속성을 허용하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="dfdd4fa57fe793122737b3135acfe0c9744860fc" translate="yes" xml:space="preserve">
          <source>To access the translated text along with the fully resolved translation key, &lt;code&gt;translate&lt;/code&gt; accepts a block:</source>
          <target state="translated">완전히 해결 된 번역 키와 함께 번역 된 텍스트에 액세스하려면 &lt;code&gt;translate&lt;/code&gt; 는 블록을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="75310a470346acf45b4ddbf0767e37cfd3626f2e" translate="yes" xml:space="preserve">
          <source>To access this class outside of Rails, require the core extension with:</source>
          <target state="translated">Rails 외부에서이 클래스에 액세스하려면 다음과 같은 핵심 확장이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b26e949303bd19506657d5954b82082666b0c3ab" translate="yes" xml:space="preserve">
          <source>To accomplish this &lt;code&gt;atomic_write&lt;/code&gt; creates a temporary file. That's the file the code in the block actually writes to. On completion, the temporary file is renamed, which is an atomic operation on POSIX systems. If the target file exists &lt;code&gt;atomic_write&lt;/code&gt; overwrites it and keeps owners and permissions. However there are a few cases where &lt;code&gt;atomic_write&lt;/code&gt; cannot change the file ownership or permissions, this error is caught and skipped over trusting in the user/filesystem to ensure the file is accessible to the processes that need it.</source>
          <target state="translated">이 &lt;code&gt;atomic_write&lt;/code&gt; 를 수행하기 위해 임시 파일 이 작성됩니다. 이것이 블록의 코드가 실제로 쓰는 파일입니다. 완료되면 임시 파일의 이름이 바뀌며 POSIX 시스템에서 원자 작업입니다. 대상 파일이 존재하면 &lt;code&gt;atomic_write&lt;/code&gt; 가이를 덮어 쓰고 소유자와 권한을 유지합니다. 그러나 &lt;code&gt;atomic_write&lt;/code&gt; 가 파일 소유권 또는 권한을 변경할 수없는 경우가 몇 가지 있는데 ,이 오류는 파일이 필요한 프로세스에서 파일에 액세스 할 수 있도록 사용자 / 파일 시스템에서 신뢰를 건너 뛰어 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="4f5bcf57447f814c8cabe3a4a635247fcb017bc2" translate="yes" xml:space="preserve">
          <source>To activate the automatic connection switching middleware, add or uncomment the following lines in your application config.</source>
          <target state="translated">자동 연결 전환 미들웨어를 활성화하려면 애플리케이션 구성에서 다음 행을 추가하거나 주석 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="7b4253576554c00dac0b6079c6cdb38ea0ed38c3" translate="yes" xml:space="preserve">
          <source>To add a member route, add a member block into the resource block:</source>
          <target state="translated">멤버 라우트를 추가하려면 리소스 블록에 멤버 블록을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="ef080675282ee11f46f7d5cac0630c424db6d2d6" translate="yes" xml:space="preserve">
          <source>To add a member route, just add a &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-member&quot;&gt;&lt;code&gt;member&lt;/code&gt;&lt;/a&gt; block into the resource block:</source>
          <target state="translated">멤버 경로를 추가하려면 리소스 블록에 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-member&quot;&gt; &lt;code&gt;member&lt;/code&gt; &lt;/a&gt; 블록을 추가하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="a9bd9aac489abd4edfbf6d7a28f4c9ed8c99b95c" translate="yes" xml:space="preserve">
          <source>To add a member route, just add a &lt;code&gt;member&lt;/code&gt; block into the resource block:</source>
          <target state="translated">멤버 라우트를 추가하려면 리소스 블록에 &lt;code&gt;member&lt;/code&gt; 블록을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="937e828fc31ed7e34181ae0bd7c880fd1631f5ec" translate="yes" xml:space="preserve">
          <source>To add a new value before/after existing one you should use &lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-altertype.html&quot;&gt;ALTER TYPE&lt;/a&gt;:</source>
          <target state="translated">기존 값 전후에 새 값을 추가하려면 &lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-altertype.html&quot;&gt;ALTER TYPE&lt;/a&gt; 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9de01f0c08e379f09373a380c2274a4ac96ae21c" translate="yes" xml:space="preserve">
          <source>To add a route to the collection, use a &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-collection&quot;&gt;&lt;code&gt;collection&lt;/code&gt;&lt;/a&gt; block:</source>
          <target state="translated">컬렉션에 경로를 추가하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-collection&quot;&gt; &lt;code&gt;collection&lt;/code&gt; &lt;/a&gt; 블록을 사용하세요 .</target>
        </trans-unit>
        <trans-unit id="f999cb973e6514ebc7a2a6d32402e38ef26f669b" translate="yes" xml:space="preserve">
          <source>To add a route to the collection:</source>
          <target state="translated">컬렉션에 경로를 추가하려면</target>
        </trans-unit>
        <trans-unit id="d03ef418b9cd36529a460479553deeba036cf313" translate="yes" xml:space="preserve">
          <source>To add an alternate new action using the &lt;code&gt;:on&lt;/code&gt; shortcut:</source>
          <target state="translated">&lt;code&gt;:on&lt;/code&gt; 단축키를 사용하여 대체 작업을 새로 추가하려면</target>
        </trans-unit>
        <trans-unit id="6bdd2c0b612050a5fa7af19240cbc4b524417970" translate="yes" xml:space="preserve">
          <source>To add an initialization step to the &lt;code&gt;Rails&lt;/code&gt; boot process from your railtie, just define the initialization code with the &lt;code&gt;initializer&lt;/code&gt; macro:</source>
          <target state="translated">railtie에서 &lt;code&gt;Rails&lt;/code&gt; 부팅 프로세스에 초기화 단계를 추가하려면 이니셜 &lt;code&gt;initializer&lt;/code&gt; 매크로를 사용하여 초기화 코드를 정의하기 만하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="49c115b6642d137473c3aaaa584da6da37c682c9" translate="yes" xml:space="preserve">
          <source>To add an initialization step to the Rails boot process from your railtie, just define the initialization code with the &lt;code&gt;initializer&lt;/code&gt; macro:</source>
          <target state="translated">railtie에서 Rails 부팅 프로세스에 초기화 단계를 추가하려면 &lt;code&gt;initializer&lt;/code&gt; 매크로를 사용하여 초기화 코드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="35d2629b284412f93bdcd4df4ef6d62207b48798" translate="yes" xml:space="preserve">
          <source>To add behavior to the initialize method, use the following signature:</source>
          <target state="translated">initialize 메소드에 동작을 추가하려면 다음 서명을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4f1cfe63bc585e778e420e9972aae33ffbcee874" translate="yes" xml:space="preserve">
          <source>To add initial data after a database is created, Rails has a built-in 'seeds' feature that makes the process quick and easy. This is especially useful when reloading the database frequently in development and test environments. It's easy to get started with this feature: just fill up &lt;code&gt;db/seeds.rb&lt;/code&gt; with some Ruby code, and run &lt;code&gt;rails db:seed&lt;/code&gt;:</source>
          <target state="translated">데이터베이스 생성 후 초기 데이터를 추가하기 위해 Rails에는 프로세스를 빠르고 쉽게 만드는 내장 된 '시드'기능이 있습니다. 개발 및 테스트 환경에서 데이터베이스를 자주 다시로드 할 때 특히 유용합니다. 이 기능으로 쉽게 시작할 수 있습니다. Ruby 코드로 &lt;code&gt;db/seeds.rb&lt;/code&gt; 를 채우고 &lt;code&gt;rails db:seed&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="811df20351699da6de9ad051be5ec23d42964190" translate="yes" xml:space="preserve">
          <source>To add initial data after a database is created, Rails has a built-in 'seeds' feature that speeds up the process. This is especially useful when reloading the database frequently in development and test environments. To get started with this feature, fill up &lt;code&gt;db/seeds.rb&lt;/code&gt; with some Ruby code, and run &lt;code&gt;bin/rails db:seed&lt;/code&gt;:</source>
          <target state="translated">데이터베이스 생성 후 초기 데이터를 추가하기 위해 Rails에는 프로세스 속도를 높이는 '시드'기능이 내장되어 있습니다. 이는 개발 및 테스트 환경에서 자주 데이터베이스를 다시로드 할 때 특히 유용합니다. 이 기능을 시작하려면 &lt;code&gt;db/seeds.rb&lt;/code&gt; 에 Ruby 코드를 채우고 &lt;code&gt;bin/rails db:seed&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="7323553094572549fa65d6ecebe3434015f73143" translate="yes" xml:space="preserve">
          <source>To add new secret to credentials, first run &lt;code&gt;rails secret&lt;/code&gt; to get a new secret. Then run &lt;code&gt;rails credentials:edit&lt;/code&gt; to edit credentials, and add the secret. Running &lt;code&gt;credentials:edit&lt;/code&gt; creates new credentials file and master key, if they did not already exist.</source>
          <target state="translated">자격 증명에 새 암호를 추가하려면 먼저 &lt;code&gt;rails secret&lt;/code&gt; 을 실행 하여 새 암호를 얻습니다. 그런 다음 &lt;code&gt;rails credentials:edit&lt;/code&gt; 를 실행 하여 자격 증명을 편집하고 비밀을 추가하십시오. &lt;code&gt;credentials:edit&lt;/code&gt; 실행 : 편집 은 새 자격 증명 파일과 마스터 키가없는 경우 만듭니다.</target>
        </trans-unit>
        <trans-unit id="0386aff0dfdb18b409bb13e26e6bfd4cc0be0e3a" translate="yes" xml:space="preserve">
          <source>To add redirection helpers to your metal controller, do the following:</source>
          <target state="translated">금속 컨트롤러에 리디렉션 도우미를 추가하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="56ec8b69fe3f17ee1c2beaa71a1520726bd1261d" translate="yes" xml:space="preserve">
          <source>To address(es) of the mail</source>
          <target state="translated">메일의 주소에</target>
        </trans-unit>
        <trans-unit id="a6a319777b2f46687810f2e7f72d3f9fc8200ecc" translate="yes" xml:space="preserve">
          <source>To allow you to upgrade to new defaults one by one, the update task has created a file &lt;code&gt;config/initializers/new_framework_defaults.rb&lt;/code&gt;. Once your application is ready to run with new defaults, you can remove this file and flip the &lt;code&gt;config.load_defaults&lt;/code&gt; value.</source>
          <target state="translated">새로운 기본값으로 하나씩 업그레이드 할 수 있도록 업데이트 작업은 &lt;code&gt;config/initializers/new_framework_defaults.rb&lt;/code&gt; 파일을 만들었습니다 . 애플리케이션이 새로운 기본값으로 실행될 준비가되면이 파일을 제거하고 &lt;code&gt;config.load_defaults&lt;/code&gt; 값을 뒤집을 수 있습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
