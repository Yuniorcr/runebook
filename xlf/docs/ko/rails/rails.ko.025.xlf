<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="bb4308a3f1f536b33838c490e581d566dc2133d1" translate="yes" xml:space="preserve">
          <source>To apply &lt;code&gt;LIMIT&lt;/code&gt; to the SQL fired by the &lt;code&gt;Model.find&lt;/code&gt;, you can specify the &lt;code&gt;LIMIT&lt;/code&gt; using &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-limit&quot;&gt;&lt;code&gt;limit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt; methods on the relation.</source>
          <target state="translated">&lt;code&gt;Model.find&lt;/code&gt; 에 의해 실행 된 SQL에 &lt;code&gt;LIMIT&lt;/code&gt; 를 적용하려면 관계에서 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-limit&quot;&gt; &lt;code&gt;limit&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-offset&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt; 메서드를 사용 하여 &lt;code&gt;LIMIT&lt;/code&gt; 를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="710f3ed0bda349db8b844b07d069b0e1bcf0d49e" translate="yes" xml:space="preserve">
          <source>To apply &lt;code&gt;LIMIT&lt;/code&gt; to the SQL fired by the &lt;code&gt;Model.find&lt;/code&gt;, you can specify the &lt;code&gt;LIMIT&lt;/code&gt; using &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; methods on the relation.</source>
          <target state="translated">&lt;code&gt;Model.find&lt;/code&gt; 가 시작한 SQL에 &lt;code&gt;LIMIT&lt;/code&gt; 를 적용 하기 위해 관계에 대한 &lt;code&gt;limit&lt;/code&gt; 및 &lt;code&gt;offset&lt;/code&gt; 메소드를 사용 하여 &lt;code&gt;LIMIT&lt;/code&gt; 를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71ba822ade4b2f636d99d427f33ec6918f039173" translate="yes" xml:space="preserve">
          <source>To apply a &lt;code&gt;GROUP BY&lt;/code&gt; clause to the SQL fired by the finder, you can use the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-group&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">파인더가 실행 한 SQL에 &lt;code&gt;GROUP BY&lt;/code&gt; 절 을 적용하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-group&quot;&gt; &lt;code&gt;group&lt;/code&gt; &lt;/a&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2d32215c583e6a7cb865ecd8a46e772e4bf03f4c" translate="yes" xml:space="preserve">
          <source>To apply a &lt;code&gt;GROUP BY&lt;/code&gt; clause to the SQL fired by the finder, you can use the &lt;code&gt;group&lt;/code&gt; method.</source>
          <target state="translated">파인더가 실행 한 SQL에 &lt;code&gt;GROUP BY&lt;/code&gt; 절 을 적용 하기 위해 &lt;code&gt;group&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="68719bf2f7e1a16dab187d1a075aba5a0fb05510" translate="yes" xml:space="preserve">
          <source>To apply a template, you need to provide the Rails generator with the location of the template you wish to apply using the &lt;code&gt;-m&lt;/code&gt; option. This can either be a path to a file or a URL.</source>
          <target state="translated">템플릿을 적용하려면 &lt;code&gt;-m&lt;/code&gt; 옵션을 사용하여 적용하려는 템플릿의 위치를 ​​Rails 생성기에 제공해야합니다 . 파일 경로 또는 URL 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d90a4ed6971546eb44b2ac49131bae5e67069b67" translate="yes" xml:space="preserve">
          <source>To assign a specific layout for the entire application, use a &lt;code&gt;layout&lt;/code&gt; declaration in your &lt;code&gt;ApplicationController&lt;/code&gt; class:</source>
          <target state="translated">전체 애플리케이션에 특정 레이아웃을 지정하려면 &lt;code&gt;ApplicationController&lt;/code&gt; 클래스 에서 &lt;code&gt;layout&lt;/code&gt; 선언을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="17cb9d18619396360a8e49bebcea3ab1ca897a51" translate="yes" xml:space="preserve">
          <source>To associate a model with a model in a different namespace, you must specify the complete class name in your association declaration:</source>
          <target state="translated">모델을 다른 네임 스페이스의 모델과 연결하려면 연결 선언에서 전체 클래스 이름을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="3aed1b17dd2e4287dd54e4f8bd9403a70bfe9854" translate="yes" xml:space="preserve">
          <source>To avoid N+1 queries, you can include the attached blobs in your query like so:</source>
          <target state="translated">N + 1 쿼리를 피하려면 다음과 같이 쿼리에 첨부 된 얼룩을 포함시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea489f383516c76da4a7f269dd9247bb36e8b6ab" translate="yes" xml:space="preserve">
          <source>To avoid code duplication, you can add your own test helpers. Sign in helper can be a good example:</source>
          <target state="translated">코드 중복을 피하기 위해 자체 테스트 도우미를 추가 할 수 있습니다. 로그인 도우미가 좋은 예가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0b1cb5aebffe144884fbef9e4fea5658f8ea27a" translate="yes" xml:space="preserve">
          <source>To be backward compatible with past deprecated hash-like behavior, when block accepts two parameters instead of one, it iterates through each error key, value pair in the error messages hash. Yields the attribute and the error for that attribute. If the attribute has more than one error message, yields once for each error message.</source>
          <target state="translated">이전에 사용되지 않는 해시와 유사한 동작과 역 호환되도록 블록이 하나가 아닌 두 개의 매개 변수를 수락 할 때 오류 메시지 해시의 각 오류 키, 값 쌍을 반복합니다. 해당 속성에 대한 속성 및 오류를 생성합니다. 속성에 둘 이상의 오류 메시지가있는 경우 각 오류 메시지에 대해 한 번씩 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="ef7716f9a480e0433559d033ee267ce1e4f96d72" translate="yes" xml:space="preserve">
          <source>To be described.</source>
          <target state="translated">설명합니다.</target>
        </trans-unit>
        <trans-unit id="5fc6a928a731bea30168195f986e1b1ac3d677b8" translate="yes" xml:space="preserve">
          <source>To be yielded each record one by one, use &lt;a href=&quot;batches#method-i-find_each&quot;&gt;&lt;code&gt;find_each&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">각 레코드를 하나씩 산출하려면 대신 &lt;a href=&quot;batches#method-i-find_each&quot;&gt; &lt;code&gt;find_each&lt;/code&gt; 를&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cc73d760d95c9df877c5e1f99331f6766682de9a" translate="yes" xml:space="preserve">
          <source>To be yielded each record one by one, use &lt;a href=&quot;batches#method-i-find_each&quot;&gt;find_each&lt;/a&gt; instead.</source>
          <target state="translated">각 레코드를 하나씩 생성하려면 &lt;a href=&quot;batches#method-i-find_each&quot;&gt;find_each를&lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cc604ec989e6bbee406239991a8d4ac088c25d5f" translate="yes" xml:space="preserve">
          <source>To begin with, let's get some text up on screen quickly. To do this, you need to get your Rails application server running.</source>
          <target state="translated">먼저 화면에 텍스트를 빠르게 표시해 보겠습니다. 이렇게하려면 Rails 애플리케이션 서버를 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="1ea1e1b24e1a85c3f3db47188cf0dfee80b9e5cc" translate="yes" xml:space="preserve">
          <source>To begin, set up your files so that you have:</source>
          <target state="translated">시작하려면 파일을 다음과 같이 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="39200511a539f80edb1bbf2925522826dfd27790" translate="yes" xml:space="preserve">
          <source>To block just specific pages, it's necessary to use a more complex syntax. Learn it on the &lt;a href=&quot;https://www.robotstxt.org/robotstxt.html&quot;&gt;official documentation&lt;/a&gt;.</source>
          <target state="translated">특정 페이지 만 차단하려면 더 복잡한 구문을 사용해야합니다. &lt;a href=&quot;https://www.robotstxt.org/robotstxt.html&quot;&gt;공식 문서&lt;/a&gt; 에서 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="b8c69b265821c2e3346cc4b0d7987142692c562f" translate="yes" xml:space="preserve">
          <source>To build conditions based on the record's state, define the conditions callable with a parameter, which will be the record itself. This example validates the title is unique for the year of publication:</source>
          <target state="translated">레코드의 상태를 기반으로 조건을 작성하려면 레코드 자체가 될 매개 변수로 호출 가능한 조건을 정의하십시오. 이 예는 제목이 출판 연도에 고유한지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="382aee92ee5eff7c36f6979d73dce5e722eb5ebc" translate="yes" xml:space="preserve">
          <source>To call this &lt;code&gt;out_of_print&lt;/code&gt; scope we can call it on either the class:</source>
          <target state="translated">이 &lt;code&gt;out_of_print&lt;/code&gt; 범위 를 호출하려면 다음 클래스 중 하나에서 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4a7a3f273395b097f236317a0c48f0ed6b14ad2" translate="yes" xml:space="preserve">
          <source>To call this &lt;code&gt;published&lt;/code&gt; scope we can call it on either the class:</source>
          <target state="translated">이 &lt;code&gt;published&lt;/code&gt; 범위를 호출하기 위해 클래스에서 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10f0261a562574d1f5d1142f959f0cb7127b97bb" translate="yes" xml:space="preserve">
          <source>To cause a validation error, you must add to the &lt;code&gt;record&lt;/code&gt;'s errors directly from within the validators message.</source>
          <target state="translated">유효성 검사 오류를 발생 시키려면 유효성 검사기 메시지 내에서 직접 &lt;code&gt;record&lt;/code&gt; 오류에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ad374d91ad0c8548890300274c240b4c3484aaee" translate="yes" xml:space="preserve">
          <source>To change defaults for multiple uses, for example adding table tags to the default:</source>
          <target state="translated">테이블 태그를 기본값에 추가하는 등 여러 용도로 기본값을 변경하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="bad29effaa4191b70ae371023004bffacc8d0fdc" translate="yes" xml:space="preserve">
          <source>To change the default mailer view for your action you do something like:</source>
          <target state="translated">작업에 대한 기본 메일러보기를 변경하려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="1f23a72ff1318bf30b85765355052f6ccfb8b080" translate="yes" xml:space="preserve">
          <source>To change the parallelization method to use threads over forks put the following in your &lt;code&gt;test_helper.rb&lt;/code&gt;</source>
          <target state="translated">포크보다 스레드를 사용하도록 병렬화 방법을 변경하려면 &lt;code&gt;test_helper.rb&lt;/code&gt; 에 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="392f97008d02fb517f2541a9f486cba6f2b790a9" translate="yes" xml:space="preserve">
          <source>To check which validations failed on an invalid attribute, you can use &lt;code&gt;errors.details[:attribute]&lt;/code&gt;. It returns an array of hashes with an &lt;code&gt;:error&lt;/code&gt; key to get the symbol of the validator:</source>
          <target state="translated">잘못된 속성에서 실패한 유효성 검사를 확인하려면 &lt;code&gt;errors.details[:attribute]&lt;/code&gt; 사용할 수 있습니다 . 유효성 검사기의 심볼을 얻기 위해 &lt;code&gt;:error&lt;/code&gt; 키 와 함께 해시 배열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a4afd5456c33df31a6c7a7ba4584a36ffecbba4c" translate="yes" xml:space="preserve">
          <source>To choose the analyzer for a blob, Active Storage calls &lt;code&gt;accept?&lt;/code&gt; on each registered analyzer in order. It uses the first analyzer for which &lt;code&gt;accept?&lt;/code&gt; returns true when given the blob. If no registered analyzer accepts the blob, no metadata is extracted from it.</source>
          <target state="translated">Blob에 대한 분석기를 선택하려면 Active Storage 통화에서 &lt;code&gt;accept?&lt;/code&gt; 등록 된 각 분석기에서 순서대로. 첫 번째 분석기를 사용 &lt;code&gt;accept?&lt;/code&gt; 얼룩이 주어지면 true를 반환합니다. 등록 된 분석기가 블롭을 허용하지 않으면 메타 데이터가 추출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="390e981b342dacb4143c4d7e30d20b9c832af99e" translate="yes" xml:space="preserve">
          <source>To choose the previewer for a blob, Active Storage calls &lt;code&gt;accept?&lt;/code&gt; on each registered previewer in order. It uses the first previewer for which &lt;code&gt;accept?&lt;/code&gt; returns true when given the blob. In a Rails application, add or remove previewers by manipulating &lt;code&gt;Rails.application.config.active_storage.previewers&lt;/code&gt; in an initializer:</source>
          <target state="translated">Blob에 대한 미리보기를 선택하려면 Active Storage 통화에서 &lt;code&gt;accept?&lt;/code&gt; 등록 된 각 미리보기에서 순서대로 첫 번째 미리보기를 사용 &lt;code&gt;accept?&lt;/code&gt; 얼룩이 주어지면 true를 반환합니다. Rails 애플리케이션 에서 이니셜 라이저에서 &lt;code&gt;Rails.application.config.active_storage.previewers&lt;/code&gt; 를 조작하여 미리보기를 추가하거나 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0c01104cd1c8ca5e77c5041d6716de6209a9968" translate="yes" xml:space="preserve">
          <source>To clear the cookies for a test just clear the cookie collection:</source>
          <target state="translated">테스트를 위해 쿠키를 지우려면 쿠키 모음을 지우십시오.</target>
        </trans-unit>
        <trans-unit id="c8bc4e6117184abb12193efc4c59058145e4af0e" translate="yes" xml:space="preserve">
          <source>To configure the URL, add a call to &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionCable/Helpers/ActionCableHelper.html#method-i-action_cable_meta_tag&quot;&gt;&lt;code&gt;action_cable_meta_tag&lt;/code&gt;&lt;/a&gt; in your HTML layout HEAD. This uses a URL or path typically set via &lt;code&gt;config.action_cable.url&lt;/code&gt; in the environment configuration files.</source>
          <target state="translated">URL을 구성하려면 HTML 레이아웃 HEAD에서 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionCable/Helpers/ActionCableHelper.html#method-i-action_cable_meta_tag&quot;&gt; &lt;code&gt;action_cable_meta_tag&lt;/code&gt; &lt;/a&gt; 에 대한 호출을 추가 하십시오. 일반적으로 환경 구성 파일에서 &lt;code&gt;config.action_cable.url&lt;/code&gt; 을 통해 설정된 URL 또는 경로를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="e992d6d51c0fe85dc91d410d8aeec6437095e50e" translate="yes" xml:space="preserve">
          <source>To configure the URL, add a call to &lt;code&gt;action_cable_meta_tag&lt;/code&gt; in your HTML layout HEAD. This uses a URL or path typically set via &lt;code&gt;config.action_cable.url&lt;/code&gt; in the environment configuration files.</source>
          <target state="translated">URL을 구성하려면 HTML 레이아웃 HEAD에서 &lt;code&gt;action_cable_meta_tag&lt;/code&gt; 에 대한 호출을 추가 하십시오. 이는 환경 구성 파일에서 일반적으로 &lt;code&gt;config.action_cable.url&lt;/code&gt; 을 통해 설정된 URL 또는 경로를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="6812ced846bc801d5b224d2be55af57aa6c28a16" translate="yes" xml:space="preserve">
          <source>To configure the adapter's thread pool, instantiate the adapter and pass your own config:</source>
          <target state="translated">어댑터의 스레드 풀을 구성하려면 어댑터를 인스턴스화하고 고유 한 구성을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="b06e363b814046b8844ec936cad2701b6744b125" translate="yes" xml:space="preserve">
          <source>To connect to Amazon S3, declare an S3 service in &lt;code&gt;config/storage.yml&lt;/code&gt;:</source>
          <target state="translated">Amazon S3에 연결하려면 &lt;code&gt;config/storage.yml&lt;/code&gt; 에서 S3 서비스를 선언합니다 .</target>
        </trans-unit>
        <trans-unit id="9fecc53a3743949bbfa166675443573068e36c4b" translate="yes" xml:space="preserve">
          <source>To connect to an S3-compatible object storage API such as DigitalOcean Spaces, provide the &lt;code&gt;endpoint&lt;/code&gt;:</source>
          <target state="translated">DigitalOcean Spaces와 같은 S3 호환 객체 스토리지 API에 연결하려면 &lt;code&gt;endpoint&lt;/code&gt; 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="40d784490f47da8895d33a26078b04dd82fd6398" translate="yes" xml:space="preserve">
          <source>To control the queue from the job level you can pass a block to &lt;code&gt;#queue_as&lt;/code&gt;. The block will be executed in the job context (so you can access &lt;code&gt;self.arguments&lt;/code&gt;) and you must return the queue name:</source>
          <target state="translated">작업 레벨에서 큐를 제어하기 위해 블록을 &lt;code&gt;#queue_as&lt;/code&gt; 로 전달할 수 있습니다 . 블록은 작업 컨텍스트에서 실행되므로 &lt;code&gt;self.arguments&lt;/code&gt; 에 액세스 할 수 있으며 큐 이름을 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="210b371e94aa90c924a3c958ebc679ea8a2df5cf" translate="yes" xml:space="preserve">
          <source>To control the queue from the job level you can pass a block to &lt;code&gt;queue_as&lt;/code&gt;. The block will be executed in the job context (so it can access &lt;code&gt;self.arguments&lt;/code&gt;), and it must return the queue name:</source>
          <target state="translated">작업 레벨에서 큐를 제어하기 위해 블록을 &lt;code&gt;queue_as&lt;/code&gt; 로 전달할 수 있습니다 . 블록은 작업 컨텍스트에서 실행되어 &lt;code&gt;self.arguments&lt;/code&gt; 에 액세스 할 수 있으며 큐 이름을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="a9495f1d70bdd4aa391ba68bd4ef3855ef947fc1" translate="yes" xml:space="preserve">
          <source>To create &lt;code&gt;ArticlesController&lt;/code&gt; and its &lt;code&gt;index&lt;/code&gt; action, we'll run the controller generator (with the &lt;code&gt;--skip-routes&lt;/code&gt; option because we already have an appropriate route):</source>
          <target state="translated">&lt;code&gt;ArticlesController&lt;/code&gt; 및 &lt;code&gt;index&lt;/code&gt; 작업 을 생성하기 위해 컨트롤러 생성기를 실행합니다 ( 이미 적절한 경로가 있으므로 &lt;code&gt;--skip-routes&lt;/code&gt; 옵션 사용).</target>
        </trans-unit>
        <trans-unit id="c603a2957097bf25b27f92b86c93ea90f8b75011" translate="yes" xml:space="preserve">
          <source>To create Active Record models, subclass the &lt;code&gt;ApplicationRecord&lt;/code&gt; class and you're good to go:</source>
          <target state="translated">Active Record 모델을 만들려면 &lt;code&gt;ApplicationRecord&lt;/code&gt; 클래스를 하위 클래스로 지정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="47ddbde908d6c9f96d05be4ab26c385e2ace4199" translate="yes" xml:space="preserve">
          <source>To create a download link, use the &lt;code&gt;rails_blob_{path|url}&lt;/code&gt; helper. Using this helper allows you to set the disposition.</source>
          <target state="translated">다운로드 링크를 만들려면 &lt;code&gt;rails_blob_{path|url}&lt;/code&gt; 도우미를 사용하십시오. 이 도우미를 사용하면 처리를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9245a4a88b5bf153248b7ec7ba1d2256a662eb4c" translate="yes" xml:space="preserve">
          <source>To create a form within this template, you will use a &lt;em&gt;form builder&lt;/em&gt;. The primary form builder for Rails is provided by a helper method called &lt;code&gt;form_with&lt;/code&gt;. To use this method, add this code into &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt;:</source>
          <target state="translated">이 템플릿 내에서 양식을 만들려면 &lt;em&gt;양식 작성기를&lt;/em&gt; 사용합니다 . Rails의 기본 폼 빌더는 &lt;code&gt;form_with&lt;/code&gt; 라는 도우미 메소드에 의해 제공됩니다 . 이 방법을 사용하려면이 코드를 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="096a2e619a88efda798f6d12421ef4a182f77fba" translate="yes" xml:space="preserve">
          <source>To create a new application, you can instantiate a new instance of a class that has already been created:</source>
          <target state="translated">새 응용 프로그램을 만들려면 이미 만들어진 클래스의 새 인스턴스를 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72a4671ecb62ee15b867e38a9465be1c7903c736" translate="yes" xml:space="preserve">
          <source>To create a new controller, you will need to run the &quot;controller&quot; generator and tell it you want a controller called &quot;Welcome&quot; with an action called &quot;index&quot;, just like this:</source>
          <target state="translated">새 컨트롤러를 만들려면 &quot;controller&quot;생성기를 실행하고 다음과 같이 &quot;index&quot;라는 작업과 함께 &quot;Welcome&quot;이라는 컨트롤러를 원한다고 알려야합니다.</target>
        </trans-unit>
        <trans-unit id="a15ae08f5f6831887faffa098996a4e4067f681e" translate="yes" xml:space="preserve">
          <source>To create a rails application we use the &lt;code&gt;rails&lt;/code&gt; global command, the rails gem installed via &lt;code&gt;gem install rails&lt;/code&gt;. When inside the directory of your application, we use the command &lt;code&gt;bin/rails&lt;/code&gt; which uses the bundled rails inside this application.</source>
          <target state="translated">rails 애플리케이션을 만들기 위해 우리는 &lt;code&gt;rails&lt;/code&gt; 전역 명령 인 &lt;code&gt;gem install rails&lt;/code&gt; 를 통해 설치된 rails gem 을 사용합니다 . 애플리케이션의 디렉토리 내부에서는 이 애플리케이션 내부의 번들 레일을 사용하는 &lt;code&gt;bin/rails&lt;/code&gt; 명령 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="547474f51f2efc29c4d208520bd3c7cf66306490" translate="yes" xml:space="preserve">
          <source>To create a system test in your application, extend your test class from &lt;code&gt;ApplicationSystemTestCase&lt;/code&gt;. System tests use Capybara as a base and allow you to configure the settings through your &lt;code&gt;application_system_test_case.rb&lt;/code&gt; file that is generated with a new application or scaffold.</source>
          <target state="translated">애플리케이션에서 시스템 테스트를 작성하려면 &lt;code&gt;ApplicationSystemTestCase&lt;/code&gt; 에서 테스트 클래스를 확장하십시오 . 시스템 테스트는 Capybara를 기본으로 사용 하며 새 응용 프로그램 또는 스캐 폴드로 생성 된 &lt;code&gt;application_system_test_case.rb&lt;/code&gt; 파일을 통해 설정을 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5d82a567df1831bb2a811a254891dad7d646401" translate="yes" xml:space="preserve">
          <source>To create a variation of an image, call &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveStorage/Blob/Representable.html#method-i-variant&quot;&gt;&lt;code&gt;variant&lt;/code&gt;&lt;/a&gt; on the attachment. You can pass any transformation to the method supported by the processor. The default processor for Active Storage is MiniMagick, but you can also use &lt;a href=&quot;https://www.rubydoc.info/gems/ruby-vips/Vips/Image&quot;&gt;Vips&lt;/a&gt;.</source>
          <target state="translated">이미지의 변형을 만들려면 첨부 파일에서 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveStorage/Blob/Representable.html#method-i-variant&quot;&gt; &lt;code&gt;variant&lt;/code&gt; &lt;/a&gt; 를 호출 하십시오. 프로세서에서 지원하는 메서드에 모든 변환을 전달할 수 있습니다. 활성 저장 장치에 대한 기본 프로세서는 MiniMagick,하지만 당신은 또한 사용할 수있는 &lt;a href=&quot;https://www.rubydoc.info/gems/ruby-vips/Vips/Image&quot;&gt;VIP를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1b33d60921c8ff3d53b349d9a6069f98d8eaa12c" translate="yes" xml:space="preserve">
          <source>To create a variation of the image, call &lt;code&gt;variant&lt;/code&gt; on the &lt;code&gt;Blob&lt;/code&gt;. You can pass any transformation to the method supported by the processor. The default processor is &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt;, but you can also use &lt;a href=&quot;https://www.rubydoc.info/gems/ruby-vips/Vips/Image&quot;&gt;Vips&lt;/a&gt;.</source>
          <target state="translated">이미지의 변형을 만들려면 &lt;code&gt;Blob&lt;/code&gt; 에서 &lt;code&gt;variant&lt;/code&gt; 을 호출 하십시오 . 프로세서가 지원하는 메소드로 변환을 전달할 수 있습니다. 기본 프로세서입니다 &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; ,하지만 당신은 또한 사용할 수있는 &lt;a href=&quot;https://www.rubydoc.info/gems/ruby-vips/Vips/Image&quot;&gt;VIP를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5ff342a1cdcc24d29eb0fbd0257273c9ddf047cd" translate="yes" xml:space="preserve">
          <source>To create more intricate nestings, you can specify the first part of the input name (&lt;code&gt;person[address]&lt;/code&gt; in the previous example) explicitly:</source>
          <target state="translated">보다 복잡한 중첩을 작성하려면 입력 이름의 첫 부분 ( 이전 예에서는 &lt;code&gt;person[address]&lt;/code&gt; )을 명시 적으로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8fba31f1400964b6c1854db1b89f26a91dae0c5c" translate="yes" xml:space="preserve">
          <source>To create proper abstraction, the I18n gem ships with a feature called variable interpolation that allows you to use variables in translation definitions and pass the values for these variables to the translation method.</source>
          <target state="translated">적절한 추상화를 만들기 위해 I18n gem은 변수 정의 (variable interpolation)라는 기능과 함께 제공되어 번역 정의에 변수를 사용하고 이러한 변수의 값을 변환 방법으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d4c30baf2d27687d849a6b0c3382739585ee0fc" translate="yes" xml:space="preserve">
          <source>To create this form you will use &lt;code&gt;form_with&lt;/code&gt; and the form builder object it yields. Like so:</source>
          <target state="translated">이 양식을 만들려면 &lt;code&gt;form_with&lt;/code&gt; 및 생성되는 양식 작성기 개체를 사용합니다. 이렇게 :</target>
        </trans-unit>
        <trans-unit id="33f409d9d7ae9405e9eabade073887085e3d56bf" translate="yes" xml:space="preserve">
          <source>To create this form you will use &lt;code&gt;form_with&lt;/code&gt;, &lt;code&gt;label_tag&lt;/code&gt;, &lt;code&gt;text_field_tag&lt;/code&gt;, and &lt;code&gt;submit_tag&lt;/code&gt;, respectively. Like this:</source>
          <target state="translated">이 양식을 작성하려면 각각 &lt;code&gt;form_with&lt;/code&gt; , &lt;code&gt;label_tag&lt;/code&gt; , &lt;code&gt;text_field_tag&lt;/code&gt; 및 &lt;code&gt;submit_tag&lt;/code&gt; 를 사용하십시오. 이처럼 :</target>
        </trans-unit>
        <trans-unit id="027708544c7e7fec5f1d396bf06d7030bfe0a2d8" translate="yes" xml:space="preserve">
          <source>To declare that the value in &lt;code&gt;params&lt;/code&gt; must be an array of permitted scalar values, map the key to an empty array:</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 의 값 이 허용 된 스칼라 값의 배열이어야 함 을 선언하려면 키를 빈 배열에 매핑하십시오.</target>
        </trans-unit>
        <trans-unit id="cbbb83af42490260cd40f6c14c14c0e2adf7e1ee" translate="yes" xml:space="preserve">
          <source>To define a model, we will use the model generator:</source>
          <target state="translated">모델을 정의하기 위해 모델 생성기를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="56a15fec74f909dcbda296e8f1e1a76710eb68ab" translate="yes" xml:space="preserve">
          <source>To define a reversible migration, define the &lt;code&gt;change&lt;/code&gt; method in your migration like this:</source>
          <target state="translated">가역 마이그레이션을 정의하려면 다음 과 같이 마이그레이션에서 &lt;code&gt;change&lt;/code&gt; 방법을 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="17458046f6ed1d703d1740c2219cb740bc7958f4" translate="yes" xml:space="preserve">
          <source>To define a simple scope, we use the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; method inside the class, passing the query that we'd like to run when this scope is called:</source>
          <target state="translated">간단한 범위를 정의하기 위해 클래스 내 에서 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt; 메서드를 사용 하여이 범위가 호출 될 때 실행할 쿼리를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="a5d3624e2f8f797d4ea168d1ef170ebc861f6ef6" translate="yes" xml:space="preserve">
          <source>To define a simple scope, we use the &lt;code&gt;scope&lt;/code&gt; method inside the class, passing the query that we'd like to run when this scope is called:</source>
          <target state="translated">간단한 범위를 정의하기 위해 클래스 내 에서 &lt;code&gt;scope&lt;/code&gt; 메서드를 사용 하여이 범위가 호출 될 때 실행할 쿼리를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="938bc598b7814f6d826a43048f0356eddb4f6fce" translate="yes" xml:space="preserve">
          <source>To define a template to be used with a mailer, create an &lt;code&gt;.erb&lt;/code&gt; file with the same name as the method in your mailer model. For example, in the mailer defined above, the template at &lt;code&gt;app/views/notifier_mailer/welcome.text.erb&lt;/code&gt; would be used to generate the email.</source>
          <target state="translated">메일러와 함께 사용할 템플리트를 정의하려면 메일러 모델의 메소드와 동일한 이름으로 &lt;code&gt;.erb&lt;/code&gt; 파일을 작성 하십시오. 예를 들어, 위에서 정의한 메일러에서 &lt;code&gt;app/views/notifier_mailer/welcome.text.erb&lt;/code&gt; 의 템플리트를 사용하여 이메일을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ba09086ccc99ad6bd2736882c2ac961ab635a69d" translate="yes" xml:space="preserve">
          <source>To define an Active Job object:</source>
          <target state="translated">활성 작업 오브젝트를 정의하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="fe8a71d3ee050eac685d5f7d17d4a9b2e05610ec" translate="yes" xml:space="preserve">
          <source>To define an event for these hooks, use the block syntax within a &lt;code&gt;Rails::Application&lt;/code&gt;, &lt;code&gt;Rails::Railtie&lt;/code&gt; or &lt;code&gt;Rails::Engine&lt;/code&gt; subclass:</source>
          <target state="translated">이러한 후크에 대한 이벤트를 정의하려면 &lt;code&gt;Rails::Application&lt;/code&gt; , &lt;code&gt;Rails::Railtie&lt;/code&gt; 또는 &lt;code&gt;Rails::Engine&lt;/code&gt; 서브 클래스 내에 블록 구문을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="44ce21fa1a4b27f2bc8184a44c594fed6d9034f5" translate="yes" xml:space="preserve">
          <source>To define this configuration setting, you should use a &lt;code&gt;mattr_accessor&lt;/code&gt; inside the &lt;code&gt;Blorgh&lt;/code&gt; module for the engine. Add this line to &lt;code&gt;lib/blorgh.rb&lt;/code&gt; inside the engine:</source>
          <target state="translated">이 구성 설정을 정의하려면, 당신은 사용해야 &lt;code&gt;mattr_accessor&lt;/code&gt; 을 내부 &lt;code&gt;Blorgh&lt;/code&gt; 의 엔진에 대한 모듈. 엔진 내 &lt;code&gt;lib/blorgh.rb&lt;/code&gt; 에이 줄을 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="5db9aae221a0a52fc270b44f4f60d7466dd1909c" translate="yes" xml:space="preserve">
          <source>To delete breakpoints: use the command &lt;code&gt;delete n&lt;/code&gt; to remove the breakpoint number &lt;em&gt;n&lt;/em&gt;. If no number is specified, it deletes all breakpoints that are currently active.</source>
          <target state="translated">중단 점을 삭제하려면 delete &lt;code&gt;delete n&lt;/code&gt; 명령을 사용 하여 중단 점 번호 &lt;em&gt;n&lt;/em&gt; 을 제거하십시오 . 숫자를 지정하지 않으면 현재 활성화 된 모든 중단 점을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="b8df7c430f219b8b7e4a3c26240fefab718180b2" translate="yes" xml:space="preserve">
          <source>To demonstrate this, we are going to create a new helper generator that simply adds some instance variable readers. First, we create a generator within the rails namespace, as this is where rails searches for generators used as hooks:</source>
          <target state="translated">이를 증명하기 위해 인스턴스 변수 리더를 추가하는 새로운 도우미 생성기를 만들 것입니다. 먼저, rails 네임 스페이스 내에 생성기를 생성합니다. 여기에서 rails는 후크로 사용 된 생성기를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="ceea890f8b0f50a4e35c3522e899a131253d5fce" translate="yes" xml:space="preserve">
          <source>To disable and allow requests from any origin:</source>
          <target state="translated">모든 출처의 요청을 비활성화하고 허용하려면</target>
        </trans-unit>
        <trans-unit id="548445a44f1b0aabb815523fb70c2b0469d4e0ae" translate="yes" xml:space="preserve">
          <source>To disable it (and allow I18n to accept &lt;em&gt;any&lt;/em&gt; locale option) add the following configuration to your application:</source>
          <target state="translated">를 사용하지 않으려면 (및 국제화가 동의 할 수 &lt;em&gt;있는&lt;/em&gt; 응용 프로그램에 다음과 같은 구성을 추가 로케일 옵션) :</target>
        </trans-unit>
        <trans-unit id="5e3faeb04b1006d46d20f0c6a5cff1221e804701" translate="yes" xml:space="preserve">
          <source>To disable the assets cache store:</source>
          <target state="translated">자산 캐시 저장소를 비활성화하려면</target>
        </trans-unit>
        <trans-unit id="7295d8456167fa9cd998ecceff7742edb85d1f35" translate="yes" xml:space="preserve">
          <source>To do all this, you'll need to add the &lt;code&gt;attr_accessor&lt;/code&gt; for &lt;code&gt;author_name&lt;/code&gt;, the association for the author and the &lt;code&gt;before_validation&lt;/code&gt; call into &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt;. The &lt;code&gt;author&lt;/code&gt; association will be hard-coded to the &lt;code&gt;User&lt;/code&gt; class for the time being.</source>
          <target state="translated">이 모든 작업을 수행하려면, 당신은 추가해야합니다 &lt;code&gt;attr_accessor&lt;/code&gt; 를 위한 &lt;code&gt;author_name&lt;/code&gt; , 저자의 협회와 &lt;code&gt;before_validation&lt;/code&gt; 의 에 호출 &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; . &lt;code&gt;author&lt;/code&gt; 협회는 하드 코드됩니다 &lt;code&gt;User&lt;/code&gt; 당분간 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="3e9da0f19895e1e63c4d541ddb83d79d381ebfb6" translate="yes" xml:space="preserve">
          <source>To do so it sends &lt;code&gt;to_xml&lt;/code&gt; to every item in turn, and collects the results under a root node. All items must respond to &lt;code&gt;to_xml&lt;/code&gt;, an exception is raised otherwise.</source>
          <target state="translated">이를 위해 모든 항목에 &lt;code&gt;to_xml&lt;/code&gt; 을 차례로 보내고 루트 노드 아래에 결과를 수집합니다. 모든 항목은 &lt;code&gt;to_xml&lt;/code&gt; 에 응답해야하며 그렇지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3ffe90f518143f4ccf33f12ab90cdec6562f3fbc" translate="yes" xml:space="preserve">
          <source>To do so, the helper forces &lt;code&gt;I18n#translate&lt;/code&gt; to raise exceptions no matter what exception handler is defined by setting the &lt;code&gt;:raise&lt;/code&gt; option:</source>
          <target state="translated">이를 위해 도우미 는 &lt;code&gt;:raise&lt;/code&gt; 옵션 을 설정하여 어떤 예외 처리기가 정의되어 있더라도 &lt;code&gt;I18n#translate&lt;/code&gt; 에서 예외를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="8fcb58e0779136e79f7bbcd3196e309246aa6ef1" translate="yes" xml:space="preserve">
          <source>To do so, the method loops over the pairs and builds nodes that depend on the &lt;em&gt;values&lt;/em&gt;. Given a pair &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;:</source>
          <target state="translated">그렇게하기 위해이 메소드는 쌍을 반복하고 &lt;em&gt;값에&lt;/em&gt; 의존하는 노드를 빌드 &lt;em&gt;합니다&lt;/em&gt; . 한 쌍의 주어 &lt;code&gt;key&lt;/code&gt; , &lt;code&gt;value&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7b053d6c50340712c08c7806b10d1a9151d6f8b4" translate="yes" xml:space="preserve">
          <source>To do that, use the &lt;code&gt;endpoint&lt;/code&gt; method:</source>
          <target state="translated">그렇게하려면 &lt;code&gt;endpoint&lt;/code&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="40a1955f6ad9fd6fd4678d97c32b0354df563059" translate="yes" xml:space="preserve">
          <source>To do that, we can change the generator this way:</source>
          <target state="translated">이를 위해 생성기를 다음과 같이 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4761e5af2e6702f7ebe03db792973054a0bf591c" translate="yes" xml:space="preserve">
          <source>To do this Rails provides a &lt;code&gt;connected_to&lt;/code&gt; method that will switch to the connection you need.</source>
          <target state="translated">이를 위해 Rails는 필요한 연결로 전환 하는 &lt;code&gt;connected_to&lt;/code&gt; 메소드를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="f0597162265468ce62b0d8e1545a60578ce531d3" translate="yes" xml:space="preserve">
          <source>To edit the credentials file, run &lt;code&gt;bin/rails credentials:edit&lt;/code&gt;. This command will create the credentials file if it does not exist. Additionally, this command will create &lt;code&gt;config/master.key&lt;/code&gt; if no master key is defined.</source>
          <target state="translated">자격 증명 파일을 편집하려면 &lt;code&gt;bin/rails credentials:edit&lt;/code&gt; 를 실행하십시오 . 이 명령은 자격 증명 파일이없는 경우 생성합니다. 또한이 명령은 마스터 키가 정의되지 않은 경우 &lt;code&gt;config/master.key&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="6eba38e7fdf3924f23e81a7c2eae21ab04284c38" translate="yes" xml:space="preserve">
          <source>To enable parallelization add the following to your &lt;code&gt;test_helper.rb&lt;/code&gt;:</source>
          <target state="translated">병렬화를 사용하려면 &lt;code&gt;test_helper.rb&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab59146610828010aa5555a3267e4452009d74b6" translate="yes" xml:space="preserve">
          <source>To enable the appropriate extension, which is a requirement, use the &lt;code&gt;enable_extension&lt;/code&gt; method in your migrations.</source>
          <target state="translated">요구 사항 인 적절한 확장을 사용하려면 마이그레이션에서 &lt;code&gt;enable_extension&lt;/code&gt; 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1378316695e919c5817f8048de1dc745aae7fb6a" translate="yes" xml:space="preserve">
          <source>To enable this option set:</source>
          <target state="translated">이 옵션 세트를 활성화하려면</target>
        </trans-unit>
        <trans-unit id="99fbec6d3c8fdd9b9ce47c612da35a0bb97143f0" translate="yes" xml:space="preserve">
          <source>To enable this, pass a new object to the config option in &lt;code&gt;application.rb&lt;/code&gt;:</source>
          <target state="translated">이를 가능하게하려면 &lt;code&gt;application.rb&lt;/code&gt; 의 config 옵션에 새 객체를 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="024ea0333ad0d945de873fba9a797e2af84c26f5" translate="yes" xml:space="preserve">
          <source>To enable variants, add the &lt;code&gt;image_processing&lt;/code&gt; gem to your &lt;code&gt;Gemfile&lt;/code&gt;:</source>
          <target state="translated">변형을 활성화하려면 &lt;code&gt;image_processing&lt;/code&gt; gem을 &lt;code&gt;Gemfile&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="40f642aa3d931eff7b120ea780a89dee337c1e8b" translate="yes" xml:space="preserve">
          <source>To enforce the object's &lt;code&gt;before_destroy&lt;/code&gt; and &lt;code&gt;after_destroy&lt;/code&gt; callbacks or any &lt;code&gt;:dependent&lt;/code&gt; association options, use &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">객체의 &lt;code&gt;before_destroy&lt;/code&gt; 및 &lt;code&gt;after_destroy&lt;/code&gt; 콜백 또는 모든 &lt;code&gt;:dependent&lt;/code&gt; 연결 옵션을 적용하려면 &lt;a href=&quot;persistence#method-i-destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="6aa5989f41d10407c003eb26b665f9faed067396" translate="yes" xml:space="preserve">
          <source>To enforce the object's &lt;code&gt;before_destroy&lt;/code&gt; and &lt;code&gt;after_destroy&lt;/code&gt; callbacks or any &lt;code&gt;:dependent&lt;/code&gt; association options, use &lt;code&gt;#destroy&lt;/code&gt;.</source>
          <target state="translated">객체의 &lt;code&gt;before_destroy&lt;/code&gt; 및 &lt;code&gt;after_destroy&lt;/code&gt; 콜백 또는 &lt;code&gt;:dependent&lt;/code&gt; 연결 옵션을 적용하려면 &lt;code&gt;#destroy&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0fc00875e6021b8e408bc81e21fdbfd465d66d0c" translate="yes" xml:space="preserve">
          <source>To enqueue a job to be performed as soon as the queuing system is free:</source>
          <target state="translated">큐잉 시스템이 해제 되 자마자 수행 할 작업을 큐잉하려면 :</target>
        </trans-unit>
        <trans-unit id="90c95572a7dc8e66dff500217c7718530d16f63c" translate="yes" xml:space="preserve">
          <source>To enqueue a job to be processed at some point in the future:</source>
          <target state="translated">미래에 처리 될 작업을 큐에 넣으려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e24b230b2b5da9b1632d7f5df306befa662b3db7" translate="yes" xml:space="preserve">
          <source>To ensure a meaningful root element use the &lt;code&gt;:root&lt;/code&gt; option:</source>
          <target state="translated">의미있는 루트 요소를 보장하려면 &lt;code&gt;:root&lt;/code&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="88a27c5ba00b8c431e25f158798dc9a15474dfeb" translate="yes" xml:space="preserve">
          <source>To ensure entries fit within the specified memory prune the cache by removing the least recently accessed entries.</source>
          <target state="translated">지정된 메모리에 항목을 맞추려면 가장 최근에 액세스 한 항목을 제거하여 캐시를 정리하십시오.</target>
        </trans-unit>
        <trans-unit id="e25914f995c3dd76eb7cde6e8888806406df0226" translate="yes" xml:space="preserve">
          <source>To ensure that the development server always compiles assets on-the-fly (and thus always reflects the most recent state of the code), the development environment &lt;em&gt;must be configured to keep precompiled assets in a different location than production does.&lt;/em&gt; Otherwise, any assets precompiled for use in production will clobber requests for them in development (&lt;em&gt;i.e.,&lt;/em&gt; subsequent changes you make to assets will not be reflected in the browser).</source>
          <target state="translated">개발 서버가 항상 즉석에서 자산을 컴파일하고 따라서 항상 코드의 최신 상태를 반영 &lt;em&gt;하도록하려면 사전 컴파일 된 자산을 프로덕션과 다른 위치에 유지하도록&lt;/em&gt; 개발 환경 &lt;em&gt;을 구성해야합니다. &lt;/em&gt;그렇지 않으면 프로덕션에서 사용하기 위해 미리 컴파일 된 자산이 개발 중에 해당 자산에 대한 요청을 방해합니다 ( &lt;em&gt;즉,&lt;/em&gt; 자산에 대한 후속 변경 사항이 브라우저에 반영되지 않음).</target>
        </trans-unit>
        <trans-unit id="cbc6ad495926f0523f5406d698dc5e76e974f3a4" translate="yes" xml:space="preserve">
          <source>To exit the debugger, use the &lt;code&gt;quit&lt;/code&gt; command (abbreviated to &lt;code&gt;q&lt;/code&gt;). Or, type &lt;code&gt;q!&lt;/code&gt; to bypass the &lt;code&gt;Really quit? (y/n)&lt;/code&gt; prompt and exit unconditionally.</source>
          <target state="translated">디버거를 종료하려면 &lt;code&gt;quit&lt;/code&gt; 명령을 사용하십시오 ( &lt;code&gt;q&lt;/code&gt; 로 축약 됨 ). 또는 &lt;code&gt;q!&lt;/code&gt; 입력하십시오 ! &lt;code&gt;Really quit? (y/n)&lt;/code&gt; 를 우회 ? (y / n) 프롬프트하고 무조건 종료합니다.</target>
        </trans-unit>
        <trans-unit id="c5c767ecb24af5eaf61e8fbc76c8e19131674609" translate="yes" xml:space="preserve">
          <source>To extend &lt;code&gt;Rails&lt;/code&gt; using a railtie, create a subclass of &lt;code&gt;Rails::Railtie&lt;/code&gt;. This class must be loaded during the &lt;code&gt;Rails&lt;/code&gt; boot process, and is conventionally called &lt;code&gt;MyNamespace::Railtie&lt;/code&gt;.</source>
          <target state="translated">railtie를 사용하여 &lt;code&gt;Rails&lt;/code&gt; 를 확장하려면 &lt;code&gt;Rails::Railtie&lt;/code&gt; 의 하위 클래스를 만듭니다 . 이 클래스는 &lt;code&gt;Rails&lt;/code&gt; 부팅 프로세스 중에로드되어야하며 일반적으로 &lt;code&gt;MyNamespace::Railtie&lt;/code&gt; 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="acded72b905a0761483848340f3d75bac8d23714" translate="yes" xml:space="preserve">
          <source>To extend Rails using a railtie, create a subclass of &lt;code&gt;Rails::Railtie&lt;/code&gt;. This class must be loaded during the Rails boot process, and is conventionally called &lt;code&gt;MyNamespace::Railtie&lt;/code&gt;.</source>
          <target state="translated">railtie를 사용하여 Rails를 확장하려면 &lt;code&gt;Rails::Railtie&lt;/code&gt; 서브 클래스를 생성하십시오 . 이 클래스는 Rails 부팅 과정에서로드되어야하며 일반적으로 &lt;code&gt;MyNamespace::Railtie&lt;/code&gt; 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="632f24f64732c745b50683484e6c6c89cb04153c" translate="yes" xml:space="preserve">
          <source>To find all callbacks in the &lt;code&gt;before_save&lt;/code&gt; callback chain:</source>
          <target state="translated">&lt;code&gt;before_save&lt;/code&gt; 콜백 체인 에서 모든 콜백을 찾으려면 :</target>
        </trans-unit>
        <trans-unit id="68d1ab2efb87e7f33694124b475fa832dd36471c" translate="yes" xml:space="preserve">
          <source>To find all callbacks in the before_save callback chain:</source>
          <target state="translated">before_save 콜백 체인에서 모든 콜백을 찾으려면</target>
        </trans-unit>
        <trans-unit id="4d189f8a2472510551f99eaa440f8b44f3c278c4" translate="yes" xml:space="preserve">
          <source>To find out more about different &lt;code&gt;rackup&lt;/code&gt; options, you can run:</source>
          <target state="translated">다양한 &lt;code&gt;rackup&lt;/code&gt; 옵션 에 대한 자세한 내용을 보려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="103656aabc25933b2a11db53c60e6c84adc391f9" translate="yes" xml:space="preserve">
          <source>To find the current layout, Rails first looks for a file in &lt;code&gt;app/views/layouts&lt;/code&gt; with the same base name as the controller. For example, rendering actions from the &lt;code&gt;PhotosController&lt;/code&gt; class will use &lt;code&gt;app/views/layouts/photos.html.erb&lt;/code&gt; (or &lt;code&gt;app/views/layouts/photos.builder&lt;/code&gt;). If there is no such controller-specific layout, Rails will use &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; or &lt;code&gt;app/views/layouts/application.builder&lt;/code&gt;. If there is no &lt;code&gt;.erb&lt;/code&gt; layout, Rails will use a &lt;code&gt;.builder&lt;/code&gt; layout if one exists. Rails also provides several ways to more precisely assign specific layouts to individual controllers and actions.</source>
          <target state="translated">현재 레이아웃을 찾기 위해 Rails는 먼저 컨트롤러와 동일한 기본 이름을 가진 &lt;code&gt;app/views/layouts&lt;/code&gt; 에서 파일을 찾습니다 . 예를 들어 &lt;code&gt;PhotosController&lt;/code&gt; 클래스의 렌더링 작업은 &lt;code&gt;app/views/layouts/photos.html.erb&lt;/code&gt; (또는 &lt;code&gt;app/views/layouts/photos.builder&lt;/code&gt; )를 사용합니다. 이러한 컨트롤러 별 레이아웃이없는 경우 Rails는 &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; 또는 &lt;code&gt;app/views/layouts/application.builder&lt;/code&gt; 를 사용 합니다. &lt;code&gt;.erb&lt;/code&gt; 레이아웃 이없는 경우 Rails는 &lt;code&gt;.builder&lt;/code&gt; 레이아웃 을 사용합니다 ( 존재하는 경우). Rails는 또한 특정 레이아웃을 개별 컨트롤러와 액션에보다 정확하게 할당 할 수있는 몇 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e148e7771d973e0a356bb26cc07da701ba30d055" translate="yes" xml:space="preserve">
          <source>To find this gotcha the qualifying namespace has to be a class, &lt;code&gt;Object&lt;/code&gt; is not an ancestor of modules.</source>
          <target state="translated">이 적격 네임 스페이스를 찾기 위해 &lt;code&gt;Object&lt;/code&gt; 는 모듈의 조상이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0eef162e5bad342a9111734b48a865280db72b0e" translate="yes" xml:space="preserve">
          <source>To finish up, let's add a convenient way to get to an article's page. We'll link each article's title in &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; to its page:</source>
          <target state="translated">완료하려면 기사 페이지로 이동하는 편리한 방법을 추가해 보겠습니다. &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; 에있는 각 기사의 제목 을 해당 페이지에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="a759580e5d376b963ffb8d409e3cf8f475a38614" translate="yes" xml:space="preserve">
          <source>To finish up, we will add a select box to the forms, and let the user select the status when they create a new article or post a new comment. We can also specify the default status as &lt;code&gt;public&lt;/code&gt;. In &lt;code&gt;app/views/articles/_form.html.erb&lt;/code&gt;, we can add:</source>
          <target state="translated">완료하려면 양식에 선택 상자를 추가하고 사용자가 새 기사를 작성하거나 새 댓글을 게시 할 때 상태를 선택할 수 있도록합니다. 기본 상태를 &lt;code&gt;public&lt;/code&gt; 으로 지정할 수도 있습니다 . 에서 &lt;code&gt;app/views/articles/_form.html.erb&lt;/code&gt; , 우리는 추가 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="3b32f002790ebf66ae28e4cba86d3afdbe23c38b" translate="yes" xml:space="preserve">
          <source>To fix the regular expression, &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt; should be used instead of &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;, like so:</source>
          <target state="translated">정규식을 수정하려면 &lt;code&gt;\A&lt;/code&gt; 과 같이 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;$&lt;/code&gt; 대신 \ A 및 &lt;code&gt;\z&lt;/code&gt; 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="11574492354d5a8c9f0f8f200d0f4a66fe002321" translate="yes" xml:space="preserve">
          <source>To fix the regular expression, \A and \z should be used instead of ^ and $, like so:</source>
          <target state="translated">정규 표현식을 수정하려면 다음과 같이 ^ 및 $ 대신 \ A 및 \ z를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="a8a6013ec55134e7e11173f7f2def5ca05d72167" translate="yes" xml:space="preserve">
          <source>To fix this, just remove the wildcards:</source>
          <target state="translated">이 문제를 해결하려면 와일드 카드를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="4430a5941a340ead709901a28a50cc72a199fcae" translate="yes" xml:space="preserve">
          <source>To force the radio button to be checked pass &lt;code&gt;checked: true&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; hash. You may pass HTML options there as well.</source>
          <target state="translated">라디오 버튼을 강제로 확인하려면 패스 해시 &lt;code&gt;checked: true&lt;/code&gt; &lt;code&gt;options&lt;/code&gt; 해시 에서 true 입니다 . HTML 옵션도 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24b199107473b75c5135ff12f64973bd46d6dab1" translate="yes" xml:space="preserve">
          <source>To further check if the before_save chain contains a proc defined as &lt;code&gt;rest_when_dead&lt;/code&gt; use the &lt;code&gt;filter&lt;/code&gt; property of the callback object:</source>
          <target state="translated">before_save 체인에 &lt;code&gt;rest_when_dead&lt;/code&gt; 로 정의 된 proc이 포함되어 있는지 추가로 확인하려면 콜백 객체 의 &lt;code&gt;filter&lt;/code&gt; 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b203e8b921a74e8f30ff1716c858cd5cfb46d25c" translate="yes" xml:space="preserve">
          <source>To generate a new migration, you can use</source>
          <target state="translated">새로운 마이그레이션을 생성하려면</target>
        </trans-unit>
        <trans-unit id="62370f31e85d1dc54f32f62c4aac0acd13630752" translate="yes" xml:space="preserve">
          <source>To generate a select box for our cities, we can use &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select&quot;&gt;&lt;code&gt;collection_select&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">도시에 대한 선택 상자를 생성하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select&quot;&gt; &lt;code&gt;collection_select&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6fa90f5c5306c869b44cd1f1372921e059175bf2" translate="yes" xml:space="preserve">
          <source>To generate a set of check boxes for our cities (which allows users to choose more than one), we can use &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes&quot;&gt;&lt;code&gt;collection_check_boxes&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">도시에 대한 일련의 확인란을 생성하려면 (사용자가 둘 이상을 선택할 수 있음) &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes&quot;&gt; &lt;code&gt;collection_check_boxes&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b06688169204cc2a05fddcb4ccd962d285d5097" translate="yes" xml:space="preserve">
          <source>To generate a set of radio buttons for our cities, we can use &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_radio_buttons&quot;&gt;&lt;code&gt;collection_radio_buttons&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">도시에 대한 라디오 버튼 세트를 생성하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_radio_buttons&quot;&gt; &lt;code&gt;collection_radio_buttons&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f8d7ec5e93b43baed7318e30d2b6aa0f9ac8180" translate="yes" xml:space="preserve">
          <source>To generate an engine, you will need to run the plugin generator and pass it options as appropriate to the need. For the &quot;blorgh&quot; example, you will need to create a &quot;mountable&quot; engine, running this command in a terminal:</source>
          <target state="translated">엔진을 생성하려면 플러그인 생성기를 실행하고 필요에 따라 옵션을 전달해야합니다. &quot;blorgh&quot;예제의 경우 터미널에서 다음 명령을 실행하여 &quot;마운트 가능&quot;엔진을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="d4d7c4beb69092cc1a08407a29c44b57ec37bc70" translate="yes" xml:space="preserve">
          <source>To generate this new column, run this command within the engine:</source>
          <target state="translated">이 새 열을 생성하려면 엔진 내에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a24c8c074630c3cf1a20fadc6b55b97c00ab6685" translate="yes" xml:space="preserve">
          <source>To get Rails saying &quot;Hello&quot;, you need to create at minimum a &lt;em&gt;controller&lt;/em&gt; and a &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">Rails가 &quot;Hello&quot;라고하려면 최소한 &lt;em&gt;컨트롤러&lt;/em&gt; 와 &lt;em&gt;뷰&lt;/em&gt; 를 만들어야 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="34dca9fc89727f8fddf605b7566cf8d7d2d29692" translate="yes" xml:space="preserve">
          <source>To get Rails saying &quot;Hello&quot;, you need to create at minimum a &lt;em&gt;route&lt;/em&gt;, a &lt;em&gt;controller&lt;/em&gt; with an &lt;em&gt;action&lt;/em&gt;, and a &lt;em&gt;view&lt;/em&gt;. A route maps a request to a controller action. A controller action performs the necessary work to handle the request, and prepares any data for the view. A view displays data in a desired format.</source>
          <target state="translated">&quot;안녕하세요&quot;를 말하고 레일을 얻으려면, 당신은 최소에서 작성해야 &lt;em&gt;경로&lt;/em&gt; 하는 &lt;em&gt;컨트롤러&lt;/em&gt; 와 &lt;em&gt;행동&lt;/em&gt; , 그리고 &lt;em&gt;보기를&lt;/em&gt; . 경로는 요청을 컨트롤러 작업에 매핑합니다. 컨트롤러 작업은 요청을 처리하는 데 필요한 작업을 수행하고 뷰에 대한 데이터를 준비합니다. 보기는 원하는 형식으로 데이터를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e48f7755253b50af5dc1c908eff57509fd33120d" translate="yes" xml:space="preserve">
          <source>To get a complete list of the available routes in your application, visit &lt;code&gt;http://localhost:3000/rails/info/routes&lt;/code&gt; in your browser while your server is running in the &lt;strong&gt;development&lt;/strong&gt; environment. You can also execute the &lt;code&gt;rails routes&lt;/code&gt; command in your terminal to produce the same output.</source>
          <target state="translated">응용 프로그램에서 사용 가능한 전체 경로 목록을 보려면 서버가 &lt;strong&gt;개발&lt;/strong&gt; 환경 에서 실행되는 동안 브라우저에서 &lt;code&gt;http://localhost:3000/rails/info/routes&lt;/code&gt; 를 방문하십시오 . 터미널에서 &lt;code&gt;rails routes&lt;/code&gt; 명령을 실행 하여 동일한 출력을 생성 할 수도 있습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e6826eb91367b97884ffa52b6d8a27115304486a" translate="yes" xml:space="preserve">
          <source>To get a complete list of the available routes in your application, visit http://localhost:3000/rails/info/routes in your browser while your server is running in the &lt;strong&gt;development&lt;/strong&gt; environment. You can also execute the &lt;code&gt;bin/rails routes&lt;/code&gt; command in your terminal to produce the same output.</source>
          <target state="translated">애플리케이션에서 사용 가능한 경로의 전체 목록을 얻으려면 서버가 &lt;strong&gt;개발&lt;/strong&gt; 환경 에서 실행되는 동안 브라우저에서 http : // localhost : 3000 / rails / info / routes를 방문하십시오 . 터미널에서 &lt;code&gt;bin/rails routes&lt;/code&gt; 명령을 실행 하여 동일한 출력을 생성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="005b30d0773b78f7961678c7d254cb64cc3d37a2" translate="yes" xml:space="preserve">
          <source>To get more details see the API Documentation for &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveJob/Exceptions/ClassMethods.html&quot;&gt;ActiveJob::Exceptions&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveJob/Exceptions/ClassMethods.html&quot;&gt;ActiveJob :: Exceptions&lt;/a&gt; API 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="31dccd8cea944d0dfe178d04bafd1f9356872ee8" translate="yes" xml:space="preserve">
          <source>To get multiple fixtures at once, you can pass in a list of fixture names. For example:</source>
          <target state="translated">한 번에 여러 개의 조명기를 얻으려면 조명기 이름 목록을 전달하면됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7baa026ea24fb7cedce110ac7ae50bae486fa316" translate="yes" xml:space="preserve">
          <source>To get started with PostgreSQL have a look at the &lt;a href=&quot;configuring#configuring-a-postgresql-database&quot;&gt;configuring Rails guide&lt;/a&gt;. It describes how to properly set up Active Record for PostgreSQL.</source>
          <target state="translated">PostgreSQL을 시작하려면 &lt;a href=&quot;configuring#configuring-a-postgresql-database&quot;&gt;Rails 구성 가이드를 참조하십시오&lt;/a&gt; . PostgreSQL 용 Active Record를 올바르게 설정하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="6bd97cf8c74b564d1224b7a61ffaa5d95f62dd45" translate="yes" xml:space="preserve">
          <source>To get started with PostgreSQL have a look at the &lt;a href=&quot;configuring#configuring-a-postgresql-database&quot;&gt;configuring Rails guide&lt;/a&gt;. It describes how to properly setup Active Record for PostgreSQL.</source>
          <target state="translated">PostgreSQL을 시작하려면 &lt;a href=&quot;configuring#configuring-a-postgresql-database&quot;&gt;Rails 설정 가이드를보십시오&lt;/a&gt; . PostgreSQL 용 Active Record를 올바르게 설정하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="0f7a5ce473e6081ec973450d35899d117b17c518" translate="yes" xml:space="preserve">
          <source>To get started, add the redis gem to your Gemfile:</source>
          <target state="translated">시작하려면 redis gem을 Gemfile에 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="328b48ce6e54d247c89f00f6889988392fc6aaad" translate="yes" xml:space="preserve">
          <source>To get the previous behavior it is needed to explicitly remove the &lt;code&gt;default_scope&lt;/code&gt; condition using &lt;code&gt;unscoped&lt;/code&gt;, &lt;code&gt;unscope&lt;/code&gt;, &lt;code&gt;rewhere&lt;/code&gt; or &lt;code&gt;except&lt;/code&gt;.</source>
          <target state="translated">명시 적으로 제거하는 방법이 필요 이전 동작 얻으려면 &lt;code&gt;default_scope&lt;/code&gt; 의 사용 조건을 &lt;code&gt;unscoped&lt;/code&gt; , &lt;code&gt;unscope&lt;/code&gt; , &lt;code&gt;rewhere&lt;/code&gt; 을 하거나 &lt;code&gt;except&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9503fc003f724edb164e2615df4c1d58204bfc1b" translate="yes" xml:space="preserve">
          <source>To get the total of grouped items on a single query, call &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; after the &lt;code&gt;group&lt;/code&gt;.</source>
          <target state="translated">단일 쿼리에서 그룹화 된 항목의 총계를 얻으려면 &lt;code&gt;group&lt;/code&gt; 뒤에 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa553d3e7e28e5369ebe98308895cae960fc7eab" translate="yes" xml:space="preserve">
          <source>To get the total of grouped items on a single query, call &lt;code&gt;count&lt;/code&gt; after the &lt;code&gt;group&lt;/code&gt;.</source>
          <target state="translated">단일 쿼리에서 그룹화 된 총 항목 수를 얻으려면 &lt;code&gt;group&lt;/code&gt; 다음에 &lt;code&gt;count&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e25850423c07981f25d5934d7647129abcd3a3d9" translate="yes" xml:space="preserve">
          <source>To have better control applications may let the asset pipeline manage their favicon storing the file under &lt;code&gt;app/assets/images&lt;/code&gt;, and using this helper to generate its corresponding link tag.</source>
          <target state="translated">애플리케이션을보다 잘 제어하려면 자산 파이프 라인이 &lt;code&gt;app/assets/images&lt;/code&gt; 에 파일을 저장 하고이 헬퍼를 사용하여 해당 링크 태그를 생성하는 즐겨 찾기 아이콘을 관리하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a5ccdb19637d402524c266113d4dd05028597b1" translate="yes" xml:space="preserve">
          <source>To have changes in that middleware reflected, you need to restart the server.</source>
          <target state="translated">해당 미들웨어의 변경 사항을 반영하려면 서버를 다시 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="1e566cc8c8c0c7006a31ae9012d8a81229af6f83" translate="yes" xml:space="preserve">
          <source>To hook into the initialization process of one of the following classes use the available hook.</source>
          <target state="translated">다음 클래스 중 하나의 초기화 프로세스에 연결하려면 사용 가능한 후크를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1454d58109b833fa7003e1f4d9262191c8fb0a43" translate="yes" xml:space="preserve">
          <source>To implement the corresponding hosts you can either set up four actual hosts or use wildcard DNS to CNAME the wildcard to a single asset host. You can read more about setting up your DNS CNAME records from your ISP.</source>
          <target state="translated">해당 호스트를 구현하려면 4 개의 실제 호스트를 설정하거나 와일드 카드 DNS를 사용하여 와일드 카드를 단일 자산 호스트로 CNAME 할 수 있습니다. ISP에서 DNS CNAME 레코드를 설정하는 방법에 대해 자세히 알아볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee6e3360c651cd5d86470fb56bf96c6fa916d002" translate="yes" xml:space="preserve">
          <source>To implement the corresponding hosts you can either setup four actual hosts or use wildcard DNS to CNAME the wildcard to a single asset host. You can read more about setting up your DNS CNAME records from your ISP.</source>
          <target state="translated">해당 호스트를 구현하려면 4 개의 실제 호스트를 설정하거나 와일드 카드 DNS를 사용하여 와일드 카드를 단일 자산 호스트로 CNAME 할 수 있습니다. ISP에서 DNS CNAME 레코드 설정에 대한 자세한 내용을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="556118047d0a5ae15941c45d48edd45c47888016" translate="yes" xml:space="preserve">
          <source>To implement the validate method, you must have a &lt;code&gt;record&lt;/code&gt; parameter defined, which is the record to be validated.</source>
          <target state="translated">validate 메소드를 구현하려면 검증 할 &lt;code&gt;record&lt;/code&gt; 매개 변수가 정의되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="ed12c6bc473f9c2df1f5ae9ce6d6af9fa00350ee" translate="yes" xml:space="preserve">
          <source>To implement, just extend &lt;a href=&quot;naming&quot;&gt;&lt;code&gt;ActiveModel::Naming&lt;/code&gt;&lt;/a&gt; in your object:</source>
          <target state="translated">구현하려면 개체에서 &lt;a href=&quot;naming&quot;&gt; &lt;code&gt;ActiveModel::Naming&lt;/code&gt; &lt;/a&gt; 을 확장하기 만하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="07f64f1b212c808a355458602b5bdea3f5e65ae4" translate="yes" xml:space="preserve">
          <source>To implement, just extend &lt;a href=&quot;naming&quot;&gt;ActiveModel::Naming&lt;/a&gt; in your object:</source>
          <target state="translated">구현하려면 객체에서 &lt;a href=&quot;naming&quot;&gt;ActiveModel :: Naming&lt;/a&gt; 을 확장 하십시오.</target>
        </trans-unit>
        <trans-unit id="d7af268652bf3254c2b5ebfa9cb85a2c8a20c707" translate="yes" xml:space="preserve">
          <source>To improve security, Rails embeds the purpose and expiry metadata inside encrypted or signed cookies value.</source>
          <target state="translated">보안을 개선하기 위해 Rails는 암호화되거나 서명 된 쿠키 값에 목적 및 만료 메타 데이터를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="3f9e69da3b593fd84fd7e8edc7d07700603a0f4a" translate="yes" xml:space="preserve">
          <source>To improve security, Rails embeds the purpose information in encrypted or signed cookies value. Rails can then thwart attacks that attempt to copy the signed/encrypted value of a cookie and use it as the value of another cookie.</source>
          <target state="translated">보안을 향상시키기 위해 Rails는 목적 정보를 암호화 또는 서명 된 쿠키 값에 포함시킵니다. 그런 다음 Rails는 서명 / 암호화 된 쿠키 값을 복사하여 다른 쿠키 값으로 사용하려는 공격을 차단할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e7e45a50afda0b2eb7660a4c1d963a9a94b5ce6" translate="yes" xml:space="preserve">
          <source>To improve security, Rails now embeds the expiry information also in encrypted or signed cookies value.</source>
          <target state="translated">보안을 향상시키기 위해 Rails는 이제 만료 정보를 암호화 또는 서명 된 쿠키 값에 포함시킵니다.</target>
        </trans-unit>
        <trans-unit id="5b939bc00c6e583531512c02fea1326ca0373b18" translate="yes" xml:space="preserve">
          <source>To improve the error details to contain the unallowed characters set for instance, you can pass additional keys to &lt;code&gt;errors.add&lt;/code&gt;.</source>
          <target state="translated">예를 들어 허용되지 않는 문자 세트를 포함하도록 오류 세부 사항을 개선하기 위해 추가 키를 &lt;code&gt;errors.add&lt;/code&gt; 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3f60091bed62823549ee21d98eb4634d84b7b37b" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;app/assets/javascripts/main.js&lt;/code&gt; and &lt;code&gt;app/assets/javascripts/photos/columns.js&lt;/code&gt;:</source>
          <target state="translated">포함하려면 &lt;code&gt;app/assets/javascripts/main.js&lt;/code&gt; 및 &lt;code&gt;app/assets/javascripts/photos/columns.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9b2735bcf794c8b8e3dbcb0818bf9b1adfb01e0e" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;app/assets/stylesheets/main.css&lt;/code&gt; and &lt;code&gt;app/assets/stylesheets/columns.css&lt;/code&gt;:</source>
          <target state="translated">포함하려면 &lt;code&gt;app/assets/stylesheets/main.css&lt;/code&gt; 및 &lt;code&gt;app/assets/stylesheets/columns.css&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="21531652ba1e3d89bf747da7459ad4fedc967168" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;app/assets/stylesheets/main.css&lt;/code&gt; and &lt;code&gt;app/assets/stylesheets/photos/columns.css&lt;/code&gt;:</source>
          <target state="translated">포함하려면 &lt;code&gt;app/assets/stylesheets/main.css&lt;/code&gt; 및 &lt;code&gt;app/assets/stylesheets/photos/columns.css&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="779772c8fa8959eb00580d4c13aa16a7bc510c71" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;http://example.com/main.css&lt;/code&gt;:</source>
          <target state="translated">포함하려면 &lt;code&gt;http://example.com/main.css&lt;/code&gt; 를 :</target>
        </trans-unit>
        <trans-unit id="7d0ce90d4b25f9d33890d4a654b5a83b9b12a097" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;http://example.com/main.js&lt;/code&gt;:</source>
          <target state="translated">포함하려면 &lt;code&gt;http://example.com/main.js&lt;/code&gt; 를 :</target>
        </trans-unit>
        <trans-unit id="4d33d58e1685fdeed02bffcca2b4f6e263c8aec1" translate="yes" xml:space="preserve">
          <source>To include a deep hierarchy of associations, use a hash:</source>
          <target state="translated">깊은 계층 구조를 포함 시키려면 해시를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9529df18a672e31493d1940461618054ec2bc1c9" translate="yes" xml:space="preserve">
          <source>To include associations use &lt;code&gt;:include&lt;/code&gt;:</source>
          <target state="translated">연관을 포함 시키려면 다음을 사용 &lt;code&gt;:include&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e7a06b85fbcecfa0afdb70a283e80c6c9bfb4543" translate="yes" xml:space="preserve">
          <source>To include multiple files such as &lt;code&gt;app/assets/javascripts/main.js&lt;/code&gt; and &lt;code&gt;app/assets/javascripts/columns.js&lt;/code&gt; at the same time:</source>
          <target state="translated">&lt;code&gt;app/assets/javascripts/main.js&lt;/code&gt; 및 &lt;code&gt;app/assets/javascripts/columns.js&lt;/code&gt; 와 같은 여러 파일을 동시에 포함하려면 다음 을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="6d835a88e3ac4a8adea51bc2effafbfe3b1f2844" translate="yes" xml:space="preserve">
          <source>To include the result of some method calls on the model use &lt;code&gt;:methods&lt;/code&gt;:</source>
          <target state="translated">모델에 일부 메소드 호출의 결과를 포함 시키려면 &lt;code&gt;:methods&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f20f59664cd6e2f9de33562e22b841e986f55ff8" translate="yes" xml:space="preserve">
          <source>To insert something verbatim use the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw&quot;&gt;&lt;code&gt;raw&lt;/code&gt;&lt;/a&gt; helper rather than calling &lt;code&gt;html_safe&lt;/code&gt;:</source>
          <target state="translated">그대로 삽입하려면 &lt;code&gt;html_safe&lt;/code&gt; 를 호출하는 대신 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw&quot;&gt; &lt;code&gt;raw&lt;/code&gt; &lt;/a&gt; 도우미를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe9a73c629a5b04262b8524874199438d75d8b58" translate="yes" xml:space="preserve">
          <source>To insert something verbatim use the &lt;code&gt;raw&lt;/code&gt; helper rather than calling &lt;code&gt;html_safe&lt;/code&gt;:</source>
          <target state="translated">무언가를 그대로 삽입하려면 &lt;code&gt;html_safe&lt;/code&gt; 를 호출하는 대신 &lt;code&gt;raw&lt;/code&gt; 도우미를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="513f6731c6256a9ba1258ddd5f3a7c69fb7aa2d0" translate="yes" xml:space="preserve">
          <source>To install Rails on Windows, you'll first need to install &lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;Ruby Installer&lt;/a&gt;.</source>
          <target state="translated">Windows에 Rails를 설치하려면 먼저 &lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;Ruby Installer&lt;/a&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2d1e94e3837bd32d9b9e63fda18996b46188ee74" translate="yes" xml:space="preserve">
          <source>To install Rails, use the &lt;code&gt;gem install&lt;/code&gt; command provided by RubyGems:</source>
          <target state="translated">Rails를 설치하려면 RubyGems에서 제공 하는 &lt;code&gt;gem install&lt;/code&gt; 명령을 사용하십시오 :</target>
        </trans-unit>
        <trans-unit id="99442c6f046c9c7f19b4a696f5fb4a94a9f2e582" translate="yes" xml:space="preserve">
          <source>To install Yarn, follow the installation instructions at the &lt;a href=&quot;https://classic.yarnpkg.com/en/docs/install&quot;&gt;Yarn website&lt;/a&gt;.</source>
          <target state="translated">Yarn을 설치하려면 &lt;a href=&quot;https://classic.yarnpkg.com/en/docs/install&quot;&gt;Yarn 웹 사이트&lt;/a&gt; 의 설치 지침을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="07105a68e26c48f757865bdaccecf2bc5d1b5dd0" translate="yes" xml:space="preserve">
          <source>To instrument an event you just need to do:</source>
          <target state="translated">이벤트를 계측하려면 다음을 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="a465d1c6a94688a2116777f5f6bfe9d3c5205899" translate="yes" xml:space="preserve">
          <source>To invoke our new generator, we just need to do:</source>
          <target state="translated">새 생성기를 호출하려면 다음을 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="6e20eda985f292acd30c70cf04867cd1ab356742" translate="yes" xml:space="preserve">
          <source>To iterate over these one hundred posts, we'll generate 201 database queries. Let's first just optimize it for retrieving the author:</source>
          <target state="translated">이 100 개의 게시물을 반복하기 위해 201 개의 데이터베이스 쿼리를 생성합니다. 먼저 저자를 검색 할 수 있도록 최적화하겠습니다.</target>
        </trans-unit>
        <trans-unit id="87ded5cfd23a78b91a3c27ef331c2040caf078c6" translate="yes" xml:space="preserve">
          <source>To keep Rails secure by default, &lt;code&gt;deep_munge&lt;/code&gt; replaces some of the values with &lt;code&gt;nil&lt;/code&gt;. Below table shows what the parameters look like based on &lt;code&gt;JSON&lt;/code&gt; sent in request:</source>
          <target state="translated">기본적으로 Rails를 안전하게 유지하기 위해 &lt;code&gt;deep_munge&lt;/code&gt; 는 일부 값을 &lt;code&gt;nil&lt;/code&gt; 로 바꿉니다 . 아래 표는 요청시 전송 된 &lt;code&gt;JSON&lt;/code&gt; 을 기반으로 매개 변수의 모양을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e09c0b8fb45739bb60fdf13680d7675cc4ee3ae7" translate="yes" xml:space="preserve">
          <source>To keep it simple in this case, the application will have a class called &lt;code&gt;User&lt;/code&gt; that represents the users of the application (we'll get into making this configurable further on). It can be generated using this command inside the application:</source>
          <target state="translated">이 경우 간단하게하기 위해 응용 프로그램에는 응용 프로그램의 &lt;code&gt;User&lt;/code&gt; 를 나타내는 User 라는 클래스가 있습니다 (이 구성 가능 구성 을 계속할 것 입니다). 애플리케이션 내에서이 명령을 사용하여 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="622ca02423155785f03c82ff7d6ba735c2b798eb" translate="yes" xml:space="preserve">
          <source>To learn more about Strong Parameters, see &lt;a href=&quot;action_controller_overview#strong-parameters&quot;&gt;Action Controller Overview &amp;sect; Strong Parameters&lt;/a&gt;.</source>
          <target state="translated">강력한 매개 변수에 대한 자세한 내용은 &lt;a href=&quot;action_controller_overview#strong-parameters&quot;&gt;액션 컨트롤러 개요 &amp;sect; 강력한 매개&lt;/a&gt; 변수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5fc270e0e6349510d86bf9c5274887f1ff5a30a" translate="yes" xml:space="preserve">
          <source>To learn more about Unobtrusive JavaScript, see &lt;a href=&quot;working_with_javascript_in_rails&quot;&gt;Working With JavaScript in Rails&lt;/a&gt;.</source>
          <target state="translated">Unobtrusive JavaScript에 대한 자세한 내용은 &lt;a href=&quot;working_with_javascript_in_rails&quot;&gt;Working with JavaScript in Rails를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a42e31e59d8d81a5245211bd16d4159c33e355ec" translate="yes" xml:space="preserve">
          <source>To learn more about form builders, see &lt;a href=&quot;form_helpers&quot;&gt;Action View Form Helpers&lt;/a&gt;.</source>
          <target state="translated">양식 작성기에 대해 자세히 알아 보려면 &lt;a href=&quot;form_helpers&quot;&gt;작업보기 양식 도우미를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f678cc51ae2c63e68692b4e0584ed7a0ecbefc37" translate="yes" xml:space="preserve">
          <source>To learn more about migrations, see &lt;a href=&quot;active_record_migrations&quot;&gt;Active Record Migrations&lt;/a&gt;.</source>
          <target state="translated">마이그레이션에 대한 자세한 내용은 &lt;a href=&quot;active_record_migrations&quot;&gt;Active Record 마이그레이션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="474616d9d0add35c92589cf505d037079bb033cd" translate="yes" xml:space="preserve">
          <source>To learn more about models, see &lt;a href=&quot;active_record_basics&quot;&gt;Active Record Basics&lt;/a&gt; and &lt;a href=&quot;active_record_querying&quot;&gt;Active Record Query Interface&lt;/a&gt;.</source>
          <target state="translated">모델에 대한 자세한 내용은 &lt;a href=&quot;active_record_basics&quot;&gt;액티브 레코드 기본 사항&lt;/a&gt; 및 &lt;a href=&quot;active_record_querying&quot;&gt;액티브 레코드 쿼리 인터페이스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="684021d94aab4ad78fadca40b8a9e33a5fbf22a4" translate="yes" xml:space="preserve">
          <source>To learn more about partials, see &lt;a href=&quot;layouts_and_rendering#using-partials&quot;&gt;Layouts and Rendering in Rails &amp;sect; Using Partials&lt;/a&gt;.</source>
          <target state="translated">부분에 대한 자세한 내용은 &lt;a href=&quot;layouts_and_rendering#using-partials&quot;&gt;Rails의 레이아웃 및 렌더링 &amp;sect;&lt;/a&gt; 부분 사용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9bb8e0027cf220fdab9086143bf735d9650329d0" translate="yes" xml:space="preserve">
          <source>To learn more about routing, see &lt;a href=&quot;routing&quot;&gt;Rails Routing from the Outside In&lt;/a&gt;.</source>
          <target state="translated">라우팅에 대한 자세한 내용은 &lt;a href=&quot;routing&quot;&gt;Rails Routing from the Outside In을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1e93f4f233cb7b557883bd4655238bb1cf4e4924" translate="yes" xml:space="preserve">
          <source>To learn more about the different types of associations, read the next section of this guide. That's followed by some tips and tricks for working with associations, and then by a complete reference to the methods and options for associations in Rails.</source>
          <target state="translated">다양한 유형의 연결에 대한 자세한 내용은이 가이드의 다음 섹션을 참조하십시오. 그 다음에는 연관 작업을위한 몇 가지 팁과 요령이 있으며 Rails의 연관 방법 및 옵션에 대한 완전한 참조가 이어집니다.</target>
        </trans-unit>
        <trans-unit id="89829e858689f742b86af95ec7881c5b292b19a0" translate="yes" xml:space="preserve">
          <source>To learn more about validations, see &lt;a href=&quot;active_record_validations&quot;&gt;Active Record Validations&lt;/a&gt;. To learn more about validation error messages, see &lt;a href=&quot;active_record_validations#working-with-validation-errors&quot;&gt;Active Record Validations &amp;sect; Working with Validation Errors&lt;/a&gt;.</source>
          <target state="translated">유효성 검사에 대한 자세한 내용은 &lt;a href=&quot;active_record_validations&quot;&gt;활성 레코드 유효성&lt;/a&gt; 검사를 참조하십시오 . 유효성 검사 오류 메시지에 대한 자세한 내용은 &lt;a href=&quot;active_record_validations#working-with-validation-errors&quot;&gt;활성 레코드 유효성 검사 &amp;sect; 유효성 검사 오류 작업을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3384d06e6e691dc9b9354e577ada2a426d01d10" translate="yes" xml:space="preserve">
          <source>To leverage time zone support in Rails, you have to ask your users what time zone they are in. Doing so would require generating select options from a list of pre-defined &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TimeZone.html&quot;&gt;&lt;code&gt;ActiveSupport::TimeZone&lt;/code&gt;&lt;/a&gt; objects using &lt;code&gt;collection_select&lt;/code&gt;, but you can simply use the &lt;code&gt;time_zone_select&lt;/code&gt; helper that already wraps this:</source>
          <target state="translated">Rails에서 시간대 지원을 활용하려면 사용자에게 시간대를 물어보십시오. &lt;code&gt;collection_select&lt;/code&gt; 를 사용하여 사전 정의 된 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TimeZone.html&quot;&gt; &lt;code&gt;ActiveSupport::TimeZone&lt;/code&gt; &lt;/a&gt; 객체 목록에서 선택 옵션을 생성해야 하지만 &lt;code&gt;time_zone_select&lt;/code&gt; 를 사용하면됩니다. 이미 이것을 감싸는 도우미 :</target>
        </trans-unit>
        <trans-unit id="e5631762117095ef9aab207c5f1df26e6b78f769" translate="yes" xml:space="preserve">
          <source>To leverage time zone support in Rails, you have to ask your users what time zone they are in. Doing so would require generating select options from a list of pre-defined &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TimeZone.html&quot;&gt;&lt;code&gt;ActiveSupport::TimeZone&lt;/code&gt;&lt;/a&gt; objects, but you can simply use the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select&quot;&gt;&lt;code&gt;time_zone_select&lt;/code&gt;&lt;/a&gt; helper that already wraps this:</source>
          <target state="translated">Rails에서 시간대 지원을 활용하려면 사용자에게 시간대가 무엇인지 물어봐야합니다. 이렇게하려면 미리 정의 된 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TimeZone.html&quot;&gt; &lt;code&gt;ActiveSupport::TimeZone&lt;/code&gt; &lt;/a&gt; 객체 목록에서 선택 옵션을 생성해야 하지만, 단순히 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select&quot;&gt; &lt;code&gt;time_zone_select&lt;/code&gt; &lt;/a&gt; 도우미를 사용하면됩니다. 이미 이것을 포장합니다.</target>
        </trans-unit>
        <trans-unit id="72d7d61c72997b4cbf28bfa14fdf1e2d9d17fab5" translate="yes" xml:space="preserve">
          <source>To list all active catchpoints use &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">모든 활성 &lt;code&gt;catch&lt;/code&gt; 포인트를 나열하려면 catch를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e93eae24476e43be4c5e2cac730270689814c98" translate="yes" xml:space="preserve">
          <source>To load the schema from &lt;code&gt;db/structure.sql&lt;/code&gt;, run &lt;code&gt;bin/rails db:schema:load&lt;/code&gt;. Loading this file is done by executing the SQL statements it contains. By definition, this will create a perfect copy of the database's structure.</source>
          <target state="translated">의 스키마로드하려면 &lt;code&gt;db/structure.sql&lt;/code&gt; 실행, &lt;code&gt;bin/rails db:schema:load&lt;/code&gt; . 이 파일로드는 포함 된 SQL 문을 실행하여 수행됩니다. 정의에 따라 이것은 데이터베이스 구조의 완벽한 복사본을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c808fe2b9636543eefc5142e38fb64613521faf1" translate="yes" xml:space="preserve">
          <source>To load the schema from &lt;code&gt;db/structure.sql&lt;/code&gt;, run &lt;code&gt;rails db:structure:load&lt;/code&gt;. Loading this file is done by executing the SQL statements it contains. By definition, this will create a perfect copy of the database's structure.</source>
          <target state="translated">에서 스키마를로드하려면 &lt;code&gt;db/structure.sql&lt;/code&gt; , 실행이 &lt;code&gt;rails db:structure:load&lt;/code&gt; . 이 파일로드는 파일에 포함 된 SQL 문을 실행하여 수행됩니다. 정의에 따라 데이터베이스 구조의 완벽한 복사본이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="9842772e3117449f3a953e7ace41a17296023709" translate="yes" xml:space="preserve">
          <source>To localize store and update &lt;em&gt;content&lt;/em&gt; in your application (e.g. translate blog posts), see the &lt;a href=&quot;#translating-model-content&quot;&gt;Translating model content&lt;/a&gt; section.</source>
          <target state="translated">애플리케이션에서 &lt;em&gt;컨텐츠&lt;/em&gt; 를 현지화하고 업데이트하려면 (예 : 블로그 게시물 &lt;a href=&quot;#translating-model-content&quot;&gt;번역) 모델 컨텐츠 변환&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="949250dd89ebeeaeeb6033d743505186074bd17b" translate="yes" xml:space="preserve">
          <source>To look up multiple translations at once, an array of keys can be passed:</source>
          <target state="translated">여러 번역을 한 번에 조회하려면 키 배열을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4dfb51ce5c8fdb161af5ab17a3e8b708ac6f79c1" translate="yes" xml:space="preserve">
          <source>To make an error actionable, include the &lt;code&gt;ActiveSupport::ActionableError&lt;/code&gt; module and invoke the &lt;code&gt;action&lt;/code&gt; class macro to define the action. An action needs a name and a block to execute.</source>
          <target state="translated">오류를 조치 가능하게하려면 &lt;code&gt;ActiveSupport::ActionableError&lt;/code&gt; 모듈을 포함 시키고 &lt;code&gt;action&lt;/code&gt; 클래스 매크로를 호출하여 조치 를 정의하십시오. 액션에는 이름과 블록이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c5a6e4c541682e89f4e0b0a39aede0cbd5deb852" translate="yes" xml:space="preserve">
          <source>To make direct uploads to a third-party service work, you&amp;rsquo;ll need to configure the service to allow cross-origin requests from your app. Consult the CORS documentation for your service:</source>
          <target state="translated">타사 서비스에 직접 업로드하려면 앱에서 원본 간 요청을 허용하도록 서비스를 구성해야합니다. 서비스에 대한 CORS 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1dbde35d1046f5cdc63670a343e680166021bbc9" translate="yes" xml:space="preserve">
          <source>To make the &quot;Unknown action&quot; go away, you can define a &lt;code&gt;create&lt;/code&gt; action within the &lt;code&gt;ArticlesController&lt;/code&gt; class in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;, underneath the &lt;code&gt;new&lt;/code&gt; action, as shown:</source>
          <target state="translated">&quot;알 수없는 조치&quot;를 없애 &lt;code&gt;create&lt;/code&gt; 다음과 같이 &lt;code&gt;new&lt;/code&gt; 조치 아래 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 의 &lt;code&gt;ArticlesController&lt;/code&gt; 클래스 내에서 작성 조치를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="921a7ea4bbe0b0e11218dced5eedc6573cfc2e9d" translate="yes" xml:space="preserve">
          <source>To make the engine's functionality accessible from within an application, it needs to be mounted in that application's &lt;code&gt;config/routes.rb&lt;/code&gt; file:</source>
          <target state="translated">응용 프로그램 내에서 엔진 기능에 액세스하려면 해당 응용 프로그램의 &lt;code&gt;config/routes.rb&lt;/code&gt; 파일에 엔진을 마운트해야 합니다.</target>
        </trans-unit>
        <trans-unit id="e795bede9b7432eddcf4138e54f000399bea12a5" translate="yes" xml:space="preserve">
          <source>To make this behavior consistent with other parts of the framework, isolated engines also have an effect on &lt;code&gt;ActiveModel::Naming&lt;/code&gt;. In a normal &lt;code&gt;Rails&lt;/code&gt; app, when you use a namespaced model such as &lt;code&gt;Namespace::Article&lt;/code&gt;, &lt;code&gt;ActiveModel::Naming&lt;/code&gt; will generate names with the prefix &amp;ldquo;namespace&amp;rdquo;. In an isolated engine, the prefix will be omitted in URL helpers and form fields, for convenience.</source>
          <target state="translated">이 동작을 프레임 워크의 다른 부분과 일관되게 만들기 위해 격리 된 엔진도 &lt;code&gt;ActiveModel::Naming&lt;/code&gt; 에 영향을 줍니다. 정상에서 &lt;code&gt;Rails&lt;/code&gt; 이 같은 네임 스페이스 모델을 사용하는 경우 앱 &lt;code&gt;Namespace::Article&lt;/code&gt; , &lt;code&gt;ActiveModel::Naming&lt;/code&gt; 접두사 &quot;네임 스페이스&quot;로 이름을 생성합니다. 격리 된 엔진에서는 편의를 위해 URL 도우미 및 양식 필드에서 접두사가 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="a9c45a8275560a053195914f7b79861295936d9d" translate="yes" xml:space="preserve">
          <source>To make this behavior consistent with other parts of the framework, isolated engines also have an effect on &lt;code&gt;ActiveModel::Naming&lt;/code&gt;. In a normal Rails app, when you use a namespaced model such as &lt;code&gt;Namespace::Article&lt;/code&gt;, &lt;code&gt;ActiveModel::Naming&lt;/code&gt; will generate names with the prefix &amp;ldquo;namespace&amp;rdquo;. In an isolated engine, the prefix will be omitted in URL helpers and form fields, for convenience.</source>
          <target state="translated">이 동작을 프레임 워크의 다른 부분과 일치시키기 위해 격리 된 엔진도 &lt;code&gt;ActiveModel::Naming&lt;/code&gt; 에 영향을 줍니다. 당신은 같은 네임 스페이스 모델을 사용하는 경우 일반 레일 응용 프로그램에서 &lt;code&gt;Namespace::Article&lt;/code&gt; , &lt;code&gt;ActiveModel::Naming&lt;/code&gt; 접두사 &quot;네임 스페이스&quot;로 이름을 생성합니다. 격리 된 엔진에서는 편의상 URL 도우미 및 양식 필드에서 접두사가 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="f1d90b485d54c8610af9229969e151cf347fb128" translate="yes" xml:space="preserve">
          <source>To make this route always use the engine's &lt;code&gt;articles_path&lt;/code&gt; routing helper method, we must call the method on the routing proxy method that shares the same name as the engine.</source>
          <target state="translated">이 경로가 항상 엔진의 &lt;code&gt;articles_path&lt;/code&gt; 라우팅 도우미 메소드를 사용하도록하려면 엔진 과 동일한 이름을 공유하는 라우팅 프록시 메소드에서 메소드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="fd5ff9b158d9be25892d88a1b07fc4ea7716c66c" translate="yes" xml:space="preserve">
          <source>To manually define an action inside a controller, all you need to do is to define a new method inside the controller. Open &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; and inside the &lt;code&gt;ArticlesController&lt;/code&gt; class, define the &lt;code&gt;new&lt;/code&gt; method so that your controller now looks like this:</source>
          <target state="translated">컨트롤러 내에서 작업을 수동으로 정의하려면 컨트롤러 내에서 새 메서드를 정의하기 만하면됩니다. &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 를 열고 &lt;code&gt;ArticlesController&lt;/code&gt; 클래스 내에서 컨트롤러가 다음과 같이 보이도록 &lt;code&gt;new&lt;/code&gt; 메소드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="10ee3825bdd39797018ef838218447c460850360" translate="yes" xml:space="preserve">
          <source>To match a wildcard parameter, it must have a name assigned to it. Without a variable name to attach the glob parameter to, the route can't be parsed.</source>
          <target state="translated">와일드 카드 매개 변수를 일치 시키려면 지정된 이름이 있어야합니다. glob 매개 변수를 첨부 할 변수 이름이 없으면 경로를 구문 분석 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c44663ac68a7142de4628d90c3a983aeada5b915" translate="yes" xml:space="preserve">
          <source>To omit the instance reader method, pass &lt;code&gt;instance_reader:
false&lt;/code&gt; or &lt;code&gt;instance_accessor: false&lt;/code&gt;.</source>
          <target state="translated">인스턴스 리더 메소드를 생략하려면 &lt;code&gt;instance_reader: false&lt;/code&gt; 또는 &lt;code&gt;instance_accessor: false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb64965d9e729741db712ff6ad1f00ac24b32cb6" translate="yes" xml:space="preserve">
          <source>To omit the instance writer method, pass &lt;code&gt;instance_writer:
false&lt;/code&gt; or &lt;code&gt;instance_accessor: false&lt;/code&gt;.</source>
          <target state="translated">인스턴스 작성기 메소드를 생략하려면 &lt;code&gt;instance_writer: false&lt;/code&gt; 또는 &lt;code&gt;instance_accessor: false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54d7f9b5323081bba96cda32f5880c9ac55b25d6" translate="yes" xml:space="preserve">
          <source>To omit the instance writer method, pass &lt;code&gt;instance_writer:
false&lt;/code&gt;. To omit the instance reader method, pass &lt;code&gt;instance_reader: false&lt;/code&gt;.</source>
          <target state="translated">인스턴스 작성기 메소드를 생략하려면 &lt;code&gt;instance_writer: false&lt;/code&gt; 전달하십시오 . 인스턴스 리더 메소드를 생략하려면 &lt;code&gt;instance_reader: false&lt;/code&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="387874b4f7e3aeb4135421cd53cc3c908662c48f" translate="yes" xml:space="preserve">
          <source>To opt out of both instance methods, pass &lt;code&gt;instance_accessor:
false&lt;/code&gt;.</source>
          <target state="translated">두 인스턴스 메소드를 모두 거부하려면 &lt;code&gt;instance_accessor: false&lt;/code&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="e6a9c311437d073e9fbcaf6cfacf7848796a7292" translate="yes" xml:space="preserve">
          <source>To opt out of the instance reader method, pass &lt;code&gt;instance_reader:
false&lt;/code&gt;.</source>
          <target state="translated">인스턴스 리더 메소드를 선택 해제하려면 &lt;code&gt;instance_reader: false&lt;/code&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="10e6ced416fc62ee3f668828d410bdfb909473cc" translate="yes" xml:space="preserve">
          <source>To opt out of the instance writer method, pass &lt;code&gt;instance_writer:
false&lt;/code&gt;.</source>
          <target state="translated">인스턴스 작성기 메소드를 선택 해제하려면 &lt;code&gt;instance_writer: false&lt;/code&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="697798c3fe3ccdc6d31e234baab2537794dff892" translate="yes" xml:space="preserve">
          <source>To override the name of the &lt;code&gt;lock_version&lt;/code&gt; column, &lt;code&gt;ActiveRecord::Base&lt;/code&gt; provides a class attribute called &lt;code&gt;locking_column&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;lock_version&lt;/code&gt; 컬럼 의 이름을 대체하기 위해 &lt;code&gt;ActiveRecord::Base&lt;/code&gt; 는 &lt;code&gt;locking_column&lt;/code&gt; 이라는 클래스 속성을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="d053ebaa181a7f197d1a43234f804f7a26afe160" translate="yes" xml:space="preserve">
          <source>To pass a local variable to a partial in only specific cases use the &lt;code&gt;local_assigns&lt;/code&gt;.</source>
          <target state="translated">특정 경우에만 부분 변수에 지역 변수를 전달하려면 &lt;code&gt;local_assigns&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a5b697325c8cdfb93a093ea707e3321adfe02cd" translate="yes" xml:space="preserve">
          <source>To pass arguments to your custom rake task:</source>
          <target state="translated">사용자 정의 레이크 작업에 인수를 전달하려면 :</target>
        </trans-unit>
        <trans-unit id="5e35109b3045d21b832476a81c851256780c03c6" translate="yes" xml:space="preserve">
          <source>To perform the computation the method first increments years, then months, then weeks, and finally days. This order is important towards the end of months. Say for example we are at the end of February of 2010, and we want to move one month and one day forward.</source>
          <target state="translated">계산을 수행하기 위해이 방법은 먼저 년, 월, 주 및 마지막 날씩 증가합니다. 이 명령은 몇 개월이 지나야 중요합니다. 예를 들어 우리가 2010 년 2 월 말에 있고 한 달 앞으로 이동하고 싶다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="4f37bdb8f0189fcb8f37342d7fe829a18470b0a4" translate="yes" xml:space="preserve">
          <source>To permit an entire hash of parameters, the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionController/Parameters.html#method-i-permit-21&quot;&gt;&lt;code&gt;permit!&lt;/code&gt;&lt;/a&gt; method can be used:</source>
          <target state="translated">매개 변수의 전체 해시를 허용하려면 allow &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionController/Parameters.html#method-i-permit-21&quot;&gt; &lt;code&gt;permit!&lt;/code&gt; &lt;/a&gt;방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99b4d018fd49bbe2363ea2588891470154dbe746" translate="yes" xml:space="preserve">
          <source>To permit an entire hash of parameters, the &lt;code&gt;permit!&lt;/code&gt; method can be used:</source>
          <target state="translated">매개 변수의 전체 해시를 허용하려면 allow &lt;code&gt;permit!&lt;/code&gt; 방법을 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9332de03e10b7d988d606a6e444b4daceb57f837" translate="yes" xml:space="preserve">
          <source>To play nicely with JavaScript conventions, sub-attributes are dasherized.</source>
          <target state="translated">JavaScript 규칙을 잘 활용하기 위해 하위 속성이 대시로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="85b259f1d2c98eed207f39f19f4bb5d8dc3d1ca6" translate="yes" xml:space="preserve">
          <source>To play with our model a bit, we're going to use a feature of Rails called the &lt;em&gt;console&lt;/em&gt;. The console is an interactive coding environment just like &lt;code&gt;irb&lt;/code&gt;, but it also automatically loads Rails and our application code.</source>
          <target state="translated">모델을 조금 다루기 위해 &lt;em&gt;콘솔&lt;/em&gt; 이라는 Rails의 기능을 사용할 것 입니다. 콘솔은 &lt;code&gt;irb&lt;/code&gt; 와 같은 대화 형 코딩 환경 이지만 Rails와 애플리케이션 코드도 자동으로로드합니다.</target>
        </trans-unit>
        <trans-unit id="de4cba0eac3a8e27e7e9e076afcf1a49468737fc" translate="yes" xml:space="preserve">
          <source>To prefix a group of route helpers, use &lt;code&gt;:as&lt;/code&gt; with &lt;code&gt;scope&lt;/code&gt;:</source>
          <target state="translated">라우트 헬퍼 그룹을 접두어로 지정하려면 &lt;code&gt;:as&lt;/code&gt; 를 &lt;code&gt;scope&lt;/code&gt; 과 함께 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="fd912753995b4784d9b4b09641cfac3382b7ddda" translate="yes" xml:space="preserve">
          <source>To preserve the case of the characters in a string, use the &lt;code&gt;preserve_case&lt;/code&gt; argument.</source>
          <target state="translated">문자열에있는 문자의 대소 문자를 유지하려면 사용 &lt;code&gt;preserve_case&lt;/code&gt; 인수를.</target>
        </trans-unit>
        <trans-unit id="79c4278c653cf99eaee1a51746aaac987a08f05d" translate="yes" xml:space="preserve">
          <source>To preserve the case of the string, set the &lt;code&gt;preserve_case&lt;/code&gt; argument to true. By default, &lt;code&gt;preserve_case&lt;/code&gt; is set to false.</source>
          <target state="translated">문자열의 소문자를 유지하려면 설정 &lt;code&gt;preserve_case&lt;/code&gt; 의 true로 인수를. 기본적으로 &lt;code&gt;preserve_case&lt;/code&gt; 는 false로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="0d965c5ea1ce8235f543d6ff0da3d57e7725d862" translate="yes" xml:space="preserve">
          <source>To prevent XSS attacks, ActiveStorage forces the Content-Disposition header to &quot;attachment&quot; for some kind of files. To change this behaviour see the available configuration options in &lt;a href=&quot;configuring#configuring-active-storage&quot;&gt;Configuring Rails Applications&lt;/a&gt;.</source>
          <target state="translated">XSS 공격을 방지하기 위해 ActiveStorage는 Content-Disposition 헤더를 어떤 종류의 파일에 대해 &quot;첨부&quot;하도록 강제합니다. 이 동작을 변경하려면 &lt;a href=&quot;configuring#configuring-active-storage&quot;&gt;Rails 애플리케이션 구성&lt;/a&gt; 에서 사용 가능한 구성 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cb61f563e80d658169538a885bdf4aff1315e13f" translate="yes" xml:space="preserve">
          <source>To prevent problems with case-insensitive filesystems, especially in combination with databases which treat indices as case-sensitive, all blob keys generated are going to only contain the base-36 character alphabet and will therefore be lowercase. To maintain the same or higher amount of entropy as in the base-58 encoding used by `has_secure_token` the number of bytes used is increased to 28 from the standard 24</source>
          <target state="translated">대소 문자를 구분하지 않는 파일 시스템, 특히 색인을 대소 문자를 구분하는 데이터베이스와 결합하여 발생하는 문제를 방지하기 위해 생성 된 모든 Blob 키에는 36 자 이하의 알파벳 만 포함되므로 소문자가됩니다. 'has_secure_token'에 의해 사용되는 base-58 인코딩에서와 동일하거나 더 많은 양의 엔트로피를 유지하기 위해 사용 된 바이트 수가 표준 24에서 28로 증가</target>
        </trans-unit>
        <trans-unit id="b4e9764587fb31e1cbd7f9e23b59e4667ae1cc19" translate="yes" xml:space="preserve">
          <source>To prevent that block from being called anymore, just unsubscribe passing that reference:</source>
          <target state="translated">해당 블록이 더 이상 호출되지 않도록하려면 해당 참조를 전달하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3fdb463e6e86ebf6894664d744889ba80523f357" translate="yes" xml:space="preserve">
          <source>To prevent this deadlock, the outer thread can &lt;code&gt;permit_concurrent_loads&lt;/code&gt;. By calling this method, the thread guarantees it will not dereference any possibly-autoloaded constant inside the supplied block. The safest way to meet that promise is to put it as close as possible to the blocking call:</source>
          <target state="translated">이 교착 상태를 방지하기 위해 외부 스레드는 &lt;code&gt;permit_concurrent_loads&lt;/code&gt; 를 사용할 수 있습니다 . 스레드는이 메소드를 호출하여 제공된 블록 내에서 자동로드 된 상수를 역 참조하지 않도록합니다. 이 약속을 지키는 가장 안전한 방법은 차단 호출에 최대한 가깝게하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d74ebca5dacf007cb62ec644a58e3da5c60614d5" translate="yes" xml:space="preserve">
          <source>To prevent this the helper generates an auxiliary hidden field before every collection of radio buttons. The hidden field has the same name as collection radio button and blank value.</source>
          <target state="translated">이를 방지하기 위해 헬퍼는 모든 단일 선택 단추 앞에 보조 숨김 필드를 생성합니다. 숨겨진 필드는 콜렉션 단일 선택 단추와 동일한 이름 및 공백 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="6e8537f67d7c81138cfcbd0b4e188c38a24c5453" translate="yes" xml:space="preserve">
          <source>To prevent this the helper generates an auxiliary hidden field before every multiple select. The hidden field has the same name as multiple select and blank value.</source>
          <target state="translated">이를 방지하기 위해 헬퍼는 모든 다중 선택 전에 보조 숨김 필드를 생성합니다. 숨겨진 필드는 다중 선택 및 공백 값과 이름이 같습니다.</target>
        </trans-unit>
        <trans-unit id="2c066b6b948fd18ae5c6932ab988a9969e24e2d8" translate="yes" xml:space="preserve">
          <source>To prevent this the helper generates an auxiliary hidden field before the very check box. The hidden field has the same name and its attributes mimic an unchecked check box.</source>
          <target state="translated">이를 방지하기 위해 도우미는 바로 확인란 앞에 보조 숨김 필드를 생성합니다. 숨겨진 필드는 동일한 이름을 가지며 해당 속성은 선택되지 않은 확인란을 모방합니다.</target>
        </trans-unit>
        <trans-unit id="c3ffe3bd9eca23fdcbd13e0773ed39790a3759d5" translate="yes" xml:space="preserve">
          <source>To protect against all other forged requests, we introduce a &lt;em&gt;required security token&lt;/em&gt; that our site knows but other sites don't know. We include the security token in requests and verify it on the server. This is a one-liner in your application controller, and is the default for newly created Rails applications:</source>
          <target state="translated">다른 모든 위조 된 요청으로부터 보호하기 위해 사이트는 알고 있지만 다른 사이트는 모르는 &lt;em&gt;필수 보안 토큰&lt;/em&gt; 을 소개합니다 . 요청에 보안 토큰을 포함시키고 서버에서 확인합니다. 이것은 애플리케이션 컨트롤러의 한 줄짜리이며 새로 작성된 Rails 애플리케이션의 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="d48b33e52ac98694288447cfd8d0a348805fd9cc" translate="yes" xml:space="preserve">
          <source>To protect against all other forged requests, we introduce a &lt;em&gt;required security token&lt;/em&gt; that our site knows but other sites don't know. We include the security token in requests and verify it on the server. This is done automatically when &lt;code&gt;config.action_controller.default_protect_from_forgery&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, which is the default for newly created Rails applications. You can also do it manually by adding the following to your application controller:</source>
          <target state="translated">다른 모든 위조 된 요청으로부터 보호하기 위해 우리 사이트는 알고 있지만 다른 사이트는 알지 못하는 &lt;em&gt;필수 보안 토큰&lt;/em&gt; 을 도입합니다 . 요청에 보안 토큰을 포함하고 서버에서 확인합니다. &lt;code&gt;config.action_controller.default_protect_from_forgery&lt;/code&gt; 가 새로 생성 된 Rails 애플리케이션의 기본값 인 &lt;code&gt;true&lt;/code&gt; 로 설정 되면 자동으로 수행됩니다 . 애플리케이션 컨트롤러에 다음을 추가하여 수동으로 수행 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbacf730e1f12d7ec162c71112b3231589ee1b04" translate="yes" xml:space="preserve">
          <source>To quickly install Ruby and Ruby on Rails on your system in Windows, you can use &lt;a href=&quot;http://railsinstaller.org&quot;&gt;Rails Installer&lt;/a&gt;. For more installation methods for most Operating Systems take a look at &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;ruby-lang.org&lt;/a&gt;.</source>
          <target state="translated">Windows에서 시스템에 Ruby 및 Ruby on Rails를 빠르게 설치하려면 &lt;a href=&quot;http://railsinstaller.org&quot;&gt;Rails Installer를&lt;/a&gt; 사용할 수 있습니다 . 대부분의 운영 체제에 대한 추가 설치 방법은 &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;ruby-lang.org를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="90fe648660dadf05da27b9950635a3eaa940745f" translate="yes" xml:space="preserve">
          <source>To raise an exception when the value is blank, append a bang to the key name, like:</source>
          <target state="translated">값이 비어있을 때 예외를 발생 시키려면 다음과 같이 키 이름에 뱅을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="a7014e07a3174e5afc62b83dc5349302192a4817" translate="yes" xml:space="preserve">
          <source>To re-enable the old finders, you can use the &lt;a href=&quot;https://github.com/rails/activerecord-deprecated_finders&quot;&gt;activerecord-deprecated_finders gem&lt;/a&gt;.</source>
          <target state="translated">기존 파인더를 다시 활성화하려면 &lt;a href=&quot;https://github.com/rails/activerecord-deprecated_finders&quot;&gt;activerecord-deprecated_finders gem을&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dee65e5bd9caa13de3ff2169d9acb227512248c8" translate="yes" xml:space="preserve">
          <source>To reconfigure an existing &lt;a href=&quot;backtracecleaner&quot;&gt;&lt;code&gt;BacktraceCleaner&lt;/code&gt;&lt;/a&gt; (like the default one in Rails) and show as much data as possible, you can always call &lt;code&gt;BacktraceCleaner#remove_silencers!&lt;/code&gt;, which will restore the backtrace to a pristine state. If you need to reconfigure an existing &lt;a href=&quot;backtracecleaner&quot;&gt;&lt;code&gt;BacktraceCleaner&lt;/code&gt;&lt;/a&gt; so that it does not filter or modify the paths of any lines of the backtrace, you can call &lt;code&gt;BacktraceCleaner#remove_filters!&lt;/code&gt; These two methods will give you a completely untouched backtrace.</source>
          <target state="translated">기존 &lt;a href=&quot;backtracecleaner&quot;&gt; &lt;code&gt;BacktraceCleaner&lt;/code&gt; &lt;/a&gt; (예 : Rails의 기본값) 를 재구성하고 가능한 한 많은 데이터를 표시하려면 언제든지 &lt;code&gt;BacktraceCleaner#remove_silencers!&lt;/code&gt; 호출 할 수 있습니다 ! , 역 추적을 원래 상태로 복원합니다. &lt;a href=&quot;backtracecleaner&quot;&gt; &lt;code&gt;BacktraceCleaner&lt;/code&gt; &lt;/a&gt; 행의 경로를 필터링하거나 수정하지 않도록 기존 BacktraceCleaner 를 재구성해야하는 경우 &lt;code&gt;BacktraceCleaner#remove_filters!&lt;/code&gt; 호출 할 수 있습니다 ! 이 두 가지 방법은 완전히 손대지 않은 역 추적을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9734f2bc5fb4092de8e84c7cf219d91ff62d9e83" translate="yes" xml:space="preserve">
          <source>To reconfigure an existing &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner&lt;/a&gt; (like the default one in Rails) and show as much data as possible, you can always call &lt;code&gt;BacktraceCleaner#remove_silencers!&lt;/code&gt;, which will restore the backtrace to a pristine state. If you need to reconfigure an existing &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner&lt;/a&gt; so that it does not filter or modify the paths of any lines of the backtrace, you can call &lt;code&gt;BacktraceCleaner#remove_filters!&lt;/code&gt; These two methods will give you a completely untouched backtrace.</source>
          <target state="translated">기존 &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner&lt;/a&gt; (예 : Rails의 기본) 를 재구성하고 가능한 많은 데이터를 표시하려면 언제든지 &lt;code&gt;BacktraceCleaner#remove_silencers!&lt;/code&gt; 호출 할 수 있습니다 ! 백 트레이스를 원래 상태로 복원합니다. 기존 &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner가 역 추적&lt;/a&gt; 라인의 경로를 필터링하거나 수정하지 않도록 재구성해야하는 경우 &lt;code&gt;BacktraceCleaner#remove_filters!&lt;/code&gt; 를 호출 할 수 있습니다 . 이 두 가지 방법은 완전히 손대지 않은 역 추적을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8508b62f9adafd68611e45feb193de249246ca79" translate="yes" xml:space="preserve">
          <source>To record &lt;code&gt;started&lt;/code&gt; and &lt;code&gt;finished&lt;/code&gt; values with monotonic time, specify the optional &lt;code&gt;:monotonic&lt;/code&gt; option to the &lt;code&gt;subscribed&lt;/code&gt; method. The &lt;code&gt;:monotonic&lt;/code&gt; option is set to &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">단조로운 시간으로 &lt;code&gt;started&lt;/code&gt; 및 &lt;code&gt;finished&lt;/code&gt; 값 을 기록하려면 &lt;code&gt;subscribed&lt;/code&gt; 메서드에 선택적 &lt;code&gt;:monotonic&lt;/code&gt; 옵션을 지정합니다 . &lt;code&gt;:monotonic&lt;/code&gt; 옵션으로 설정되어 &lt;code&gt;false&lt;/code&gt; 기본적으로.</target>
        </trans-unit>
        <trans-unit id="22cdc363aec48d3827e0a2a82515f3665e8d29b4" translate="yes" xml:space="preserve">
          <source>To refer to such a delayed on-demand variant, simply link to the variant through the resolved route provided by Active Storage like so:</source>
          <target state="translated">지연된 주문형 변형을 참조하려면 다음과 같이 Active Storage에서 제공하는 해결 된 경로를 통해 변형에 연결하면됩니다.</target>
        </trans-unit>
        <trans-unit id="e71e6885d80604fc3a6024543fd47eff444bf0ec" translate="yes" xml:space="preserve">
          <source>To remove a csv renderer:</source>
          <target state="translated">CSV 렌더러를 제거하려면</target>
        </trans-unit>
        <trans-unit id="de662f764260e4fdf30a3d07427d90a2aa5a16f1" translate="yes" xml:space="preserve">
          <source>To remove an attachment from a model, call &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveStorage/Attached/One.html#method-i-purge&quot;&gt;&lt;code&gt;purge&lt;/code&gt;&lt;/a&gt; on the attachment. If your application is set up to use Active Job, removal can be done in the background instead by calling &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveStorage/Attached/One.html#method-i-purge_later&quot;&gt;&lt;code&gt;purge_later&lt;/code&gt;&lt;/a&gt;. Purging deletes the blob and the file from the storage service.</source>
          <target state="translated">모델, 콜에서 첨부 파일을 제거하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveStorage/Attached/One.html#method-i-purge&quot;&gt; &lt;code&gt;purge&lt;/code&gt; &lt;/a&gt; 첨부합니다. 애플리케이션이 활성 작업을 사용하도록 설정된 경우 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveStorage/Attached/One.html#method-i-purge_later&quot;&gt; &lt;code&gt;purge_later&lt;/code&gt; &lt;/a&gt; 를 호출하여 대신 백그라운드에서 제거를 수행 할 수 있습니다 . 제거하면 스토리지 서비스에서 Blob과 파일이 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="68c23a1c0e409b22fae595b820777eee58c5f6c0" translate="yes" xml:space="preserve">
          <source>To remove an attachment from a model, call &lt;code&gt;purge&lt;/code&gt; on the attachment. Removal can be done in the background if your application is setup to use Active Job. Purging deletes the blob and the file from the storage service.</source>
          <target state="translated">모델, 콜에서 첨부 파일을 제거하려면 &lt;code&gt;purge&lt;/code&gt; 첨부합니다. 응용 프로그램이 활성 작업을 사용하도록 설정된 경우 백그라운드에서 제거를 수행 할 수 있습니다. 제거하면 스토리지 서비스에서 Blob 및 파일이 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="22b532370cc31b688fc45986722a1140d028fdff" translate="yes" xml:space="preserve">
          <source>To remove something from the session, delete the key/value pair:</source>
          <target state="translated">세션에서 무언가를 제거하려면 키 / 값 쌍을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="0a46f810367e45adc553d383637f338f40e23401" translate="yes" xml:space="preserve">
          <source>To render a partial as part of a view, you use the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/RenderingHelper.html#method-i-render&quot;&gt;&lt;code&gt;render&lt;/code&gt;&lt;/a&gt; method within the view:</source>
          <target state="translated">뷰의 일부로 부분을 렌더링하려면 뷰 내에서 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/RenderingHelper.html#method-i-render&quot;&gt; &lt;code&gt;render&lt;/code&gt; &lt;/a&gt; 메서드 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="ca7b121751735ab45370bc21bac0f765524f83f4" translate="yes" xml:space="preserve">
          <source>To render a partial as part of a view, you use the &lt;code&gt;render&lt;/code&gt; method within the view:</source>
          <target state="translated">뷰의 일부로 부분을 렌더링하려면 뷰 내에서 &lt;code&gt;render&lt;/code&gt; 메소드 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="135841158f4edb521fd4516410bd234cfc795c9c" translate="yes" xml:space="preserve">
          <source>To render an HTML page with debugging information, use the value &lt;code&gt;:default&lt;/code&gt;.</source>
          <target state="translated">디버깅 정보가 포함 된 HTML 페이지를 렌더링하려면 값 &lt;code&gt;:default&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c8d97e4f9f5b36ef96884483c6dc6c22fe61bcd3" translate="yes" xml:space="preserve">
          <source>To render debugging information preserving the response format, use the value &lt;code&gt;:api&lt;/code&gt;.</source>
          <target state="translated">응답 형식을 유지하는 디버깅 정보를 렌더링하려면 &lt;code&gt;:api&lt;/code&gt; 값을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="711a3f0136c3ca434b1f9f6308f86ac7c76f82b8" translate="yes" xml:space="preserve">
          <source>To reset the entire session, use &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionController/Metal.html#method-i-reset_session&quot;&gt;&lt;code&gt;reset_session&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">전체 세션을 재설정하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionController/Metal.html#method-i-reset_session&quot;&gt; &lt;code&gt;reset_session&lt;/code&gt; 을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d48a62f0223661865f5b011e8f914109fcf6ff3" translate="yes" xml:space="preserve">
          <source>To reset the entire session, use &lt;code&gt;reset_session&lt;/code&gt;.</source>
          <target state="translated">전체 세션을 재설정하려면 &lt;code&gt;reset_session&lt;/code&gt; 을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8232b3c8cf1eb150127b13a571021c18224213f7" translate="yes" xml:space="preserve">
          <source>To resolve &lt;code&gt;User&lt;/code&gt; Ruby checks &lt;code&gt;Admin&lt;/code&gt; in the former case, but it does not in the latter because it does not belong to the nesting (see &lt;a href=&quot;#nesting&quot;&gt;Nesting&lt;/a&gt; and &lt;a href=&quot;#resolution-algorithms&quot;&gt;Resolution Algorithms&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;User&lt;/code&gt; 루비 를 해결하기 위해 루비는 전자의 경우 &lt;code&gt;Admin&lt;/code&gt; 를 검사 하지만, 네비가 네 스팅에 속하지 않기 때문에 후자가 아닙니다 (네 &lt;a href=&quot;#nesting&quot;&gt;스팅&lt;/a&gt; 및 &lt;a href=&quot;#resolution-algorithms&quot;&gt;해결 알고리즘&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7cfc2f93ced25152ece29e08f8941ab9eff45d8a" translate="yes" xml:space="preserve">
          <source>To resolve a situation like this, it helps thinking clearly about which file &lt;em&gt;defines&lt;/em&gt; the &lt;code&gt;Blog&lt;/code&gt; module (&lt;code&gt;app/models/blog.rb&lt;/code&gt;), and which one &lt;em&gt;reopens&lt;/em&gt; it (&lt;code&gt;app/models/blog/post.rb&lt;/code&gt;). Then, you ensure that the definition is executed first using &lt;code&gt;require_dependency&lt;/code&gt;:</source>
          <target state="translated">이와 같은 상황을 해결하려면 어떤 파일 이 &lt;code&gt;Blog&lt;/code&gt; 모듈 ( &lt;code&gt;app/models/blog.rb&lt;/code&gt; )을 &lt;em&gt;정의&lt;/em&gt; 하고 어떤 파일이 이를 &lt;em&gt;다시 여는&lt;/em&gt; 지 ( &lt;code&gt;app/models/blog/post.rb&lt;/code&gt; ) 명확하게 생각하는 데 도움이됩니다 . 그런 다음 &lt;code&gt;require_dependency&lt;/code&gt; 를 사용하여 정의가 먼저 실행되는지 확인합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6743c0ebbcdb84c8d2eee31727667945df512865" translate="yes" xml:space="preserve">
          <source>To retrieve objects from the database, Active Record provides several finder methods. Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL.</source>
          <target state="translated">데이터베이스에서 개체를 검색하기 위해 Active Record는 여러 가지 파인더 방법을 제공합니다. 각 파인더 메소드를 사용하면 원시 SQL을 작성하지 않고 데이터베이스에서 특정 쿼리를 수행하기 위해 인수를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7151f5264734330baf9648bf2641780b6598ee9" translate="yes" xml:space="preserve">
          <source>To retrieve records from the database in a specific order, you can use the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-order&quot;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">특정 순서로 데이터베이스에서 레코드를 검색하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-order&quot;&gt; &lt;code&gt;order&lt;/code&gt; &lt;/a&gt; 방법을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="86a73c29a7459929d4b5f13b87e34a853279f83c" translate="yes" xml:space="preserve">
          <source>To retrieve records from the database in a specific order, you can use the &lt;code&gt;order&lt;/code&gt; method.</source>
          <target state="translated">특정 순서로 데이터베이스에서 레코드를 검색 &lt;code&gt;order&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e0d8fd8efe0bbf1b62fcac4fddf47a58756f54a" translate="yes" xml:space="preserve">
          <source>To roll the database back to a previous migration version, use &lt;code&gt;bin/rails db:rollback VERSION=X&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the version to which you wish to downgrade. Alternatively, you can also use the STEP option if you wish to rollback last few migrations. &lt;code&gt;bin/rails db:rollback STEP=2&lt;/code&gt; will rollback the latest two migrations.</source>
          <target state="translated">데이터베이스를 이전 마이그레이션 버전으로 &lt;code&gt;bin/rails db:rollback VERSION=X&lt;/code&gt; 하려면 bin / rails db : rollback VERSION = X를 사용하십시오. 여기서 &lt;code&gt;X&lt;/code&gt; 는 다운 그레이드 할 버전입니다. 또는 마지막 몇 번의 마이그레이션을 롤백하려는 경우 STEP 옵션을 사용할 수도 있습니다. &lt;code&gt;bin/rails db:rollback STEP=2&lt;/code&gt; 는 최근 두 마이그레이션을 롤백합니다.</target>
        </trans-unit>
        <trans-unit id="c10c89631b9702ef45bf2d36366eb1588de95e2f" translate="yes" xml:space="preserve">
          <source>To roll the database back to a previous migration version, use &lt;code&gt;rails
db:rollback VERSION=X&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the version to which you wish to downgrade. Alternatively, you can also use the STEP option if you wish to rollback last few migrations. &lt;code&gt;rails db:rollback
STEP=2&lt;/code&gt; will rollback the latest two migrations.</source>
          <target state="translated">데이터베이스를 이전 마이그레이션 버전으로 &lt;code&gt;rails db:rollback VERSION=X&lt;/code&gt; 하려면 rails db : rollback VERSION = X를 사용하십시오. 여기서 &lt;code&gt;X&lt;/code&gt; 는 다운 그레이드하려는 버전입니다. 또는 마지막 몇 번의 마이그레이션을 롤백하려는 경우 STEP 옵션을 사용할 수도 있습니다. &lt;code&gt;rails db:rollback STEP=2&lt;/code&gt; 는 최신 두 마이그레이션을 롤백합니다.</target>
        </trans-unit>
        <trans-unit id="3ac2520b0c5494d188e5636cc2c0952d8979c946" translate="yes" xml:space="preserve">
          <source>To run migrations against the currently configured database, use &lt;code&gt;bin/rails db:migrate&lt;/code&gt;. This will update the database by running all of the pending migrations, creating the &lt;code&gt;schema_migrations&lt;/code&gt; table (see &amp;ldquo;About the schema_migrations table&amp;rdquo; section below) if missing. It will also invoke the db:schema:dump command, which will update your db/schema.rb file to match the structure of your database.</source>
          <target state="translated">현재 구성된 데이터베이스에 대해 마이그레이션을 실행하려면 &lt;code&gt;bin/rails db:migrate&lt;/code&gt; 를 사용하십시오 . 이것은 생성, 보류중인 모든 마이그레이션을 실행하여 데이터베이스를 업데이트합니다 &lt;code&gt;schema_migrations&lt;/code&gt; 에 없는 경우 표 (아래 섹션의 &quot;schema_migrations 테이블 정보&quot;참조). 또한 db : schema : dump 명령을 호출하여 데이터베이스 구조와 일치하도록 db / schema.rb 파일을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="7784a5056ff1425ce0a3c8586fb49ecd8c14da1a" translate="yes" xml:space="preserve">
          <source>To run migrations against the currently configured database, use &lt;code&gt;rails db:migrate&lt;/code&gt;. This will update the database by running all of the pending migrations, creating the &lt;code&gt;schema_migrations&lt;/code&gt; table (see &amp;ldquo;About the schema_migrations table&amp;rdquo; section below) if missing. It will also invoke the db:schema:dump command, which will update your db/schema.rb file to match the structure of your database.</source>
          <target state="translated">현재 구성된 데이터베이스에 대해 마이그레이션을 실행하려면 &lt;code&gt;rails db:migrate&lt;/code&gt; 를 사용하십시오 . 누락 된 경우 모든 보류중인 마이그레이션을 실행하여 &lt;code&gt;schema_migrations&lt;/code&gt; 테이블을 생성하여 데이터베이스를 업데이트합니다 (아래의 schema_migrations 테이블 정보 섹션 참조). 또한 db : schema : dump 명령을 호출하여 데이터베이스 구조와 일치하도록 db / schema.rb 파일을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="b0d957948430fe461472f69b2f6fbc8c47e35861" translate="yes" xml:space="preserve">
          <source>To run these migrations within the context of the application, simply run &lt;code&gt;bin/rails
db:migrate&lt;/code&gt;. When accessing the engine through &lt;code&gt;http://localhost:3000/blog&lt;/code&gt;, the articles will be empty. This is because the table created inside the application is different from the one created within the engine. Go ahead, play around with the newly mounted engine. You'll find that it's the same as when it was only an engine.</source>
          <target state="translated">애플리케이션 컨텍스트 내에서 이러한 마이그레이션을 실행하려면 &lt;code&gt;bin/rails db:migrate&lt;/code&gt; 를 실행하면 됩니다. &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; 를 통해 엔진에 액세스하면 기사가 비어 있습니다. 이는 애플리케이션 내에서 생성 된 테이블이 엔진 내에서 생성 된 테이블과 다르기 때문입니다. 계속해서 새로 장착 된 엔진을 가지고 놀아보세요. 엔진 일 때와 똑같다는 것을 알게 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="fa864a5a164067933873cc6f0c116ff0c44e5d96" translate="yes" xml:space="preserve">
          <source>To run these migrations within the context of the application, simply run &lt;code&gt;rails
db:migrate&lt;/code&gt;. When accessing the engine through &lt;code&gt;http://localhost:3000/blog&lt;/code&gt;, the articles will be empty. This is because the table created inside the application is different from the one created within the engine. Go ahead, play around with the newly mounted engine. You'll find that it's the same as when it was only an engine.</source>
          <target state="translated">애플리케이션 컨텍스트 내에서 이러한 마이그레이션을 실행하려면 &lt;code&gt;rails db:migrate&lt;/code&gt; 를 실행하십시오 . &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; 를 통해 엔진에 액세스하면 기사가 비어 있습니다. 애플리케이션 내에서 작성된 테이블이 엔진 내에서 작성된 테이블과 다르기 때문입니다. 계속해서 새로 장착 된 엔진으로 놀아보십시오. 엔진 일 때와 같다는 것을 알게 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="2f74ad12044b7c77a663d91b88b0fde3656571e5" translate="yes" xml:space="preserve">
          <source>To save having to call &lt;code&gt;constantize&lt;/code&gt; on the &lt;code&gt;author_class&lt;/code&gt; result all the time, you could instead just override the &lt;code&gt;author_class&lt;/code&gt; getter method inside the &lt;code&gt;Blorgh&lt;/code&gt; module in the &lt;code&gt;lib/blorgh.rb&lt;/code&gt; file to always call &lt;code&gt;constantize&lt;/code&gt; on the saved value before returning the result:</source>
          <target state="translated">&lt;code&gt;constantize&lt;/code&gt; &lt;code&gt;author_class&lt;/code&gt; 결과 에서 constantize 를 호출하지 않아도되도록 &lt;code&gt;lib/blorgh.rb&lt;/code&gt; 파일 의 &lt;code&gt;Blorgh&lt;/code&gt; 모듈에서 &lt;code&gt;author_class&lt;/code&gt; getter 메소드를 대체 하여 결과를 리턴하기 전에 저장된 값에 대해 &lt;code&gt;constantize&lt;/code&gt; 를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4f816dbde6fc978a92fd8d2eb21ad09b497b5a6" translate="yes" xml:space="preserve">
          <source>To see demonstrations of other engines, check out &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt;, an engine that provides authentication for its parent applications, or &lt;a href=&quot;https://github.com/thredded/thredded&quot;&gt;Thredded&lt;/a&gt;, an engine that provides forum functionality. There's also &lt;a href=&quot;https://github.com/spree/spree&quot;&gt;Spree&lt;/a&gt; which provides an e-commerce platform, and &lt;a href=&quot;https://github.com/refinery/refinerycms&quot;&gt;Refinery CMS&lt;/a&gt;, a CMS engine.</source>
          <target state="translated">다른 엔진의 데모를 보려면 상위 애플리케이션에 대한 인증을 제공하는 엔진 인 &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt; 또는 포럼 기능을 제공하는 엔진 인 &lt;a href=&quot;https://github.com/thredded/thredded&quot;&gt;Thredded&lt;/a&gt; 를 확인하십시오. 이 또한의 &lt;a href=&quot;https://github.com/spree/spree&quot;&gt;슈 프레&lt;/a&gt; 전자 상거래 플랫폼을 제공하고, &lt;a href=&quot;https://github.com/refinery/refinerycms&quot;&gt;정유 CMS&lt;/a&gt; , CMS를 엔진.</target>
        </trans-unit>
        <trans-unit id="b9be3f9111f77091831c08e5ba6bc78c18378c49" translate="yes" xml:space="preserve">
          <source>To see how a test failure is reported, you can add a failing test to the &lt;code&gt;article_test.rb&lt;/code&gt; test case.</source>
          <target state="translated">테스트 실패가보고되는 방식을 확인하기 위해 &lt;code&gt;article_test.rb&lt;/code&gt; 테스트 케이스에 실패한 테스트를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="507825aa0aae71c1e54d11afb68d3712e90fe378" translate="yes" xml:space="preserve">
          <source>To see how an error gets reported, here's a test containing an error:</source>
          <target state="translated">오류가보고되는 방법을 보려면 오류가 포함 된 테스트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6ce7ecfcf66b239276cfcf6ffb2689eee7f93fa" translate="yes" xml:space="preserve">
          <source>To see the previous ten lines you should type &lt;code&gt;list-&lt;/code&gt; (or &lt;code&gt;l-&lt;/code&gt;).</source>
          <target state="translated">앞의 10 줄을 보려면 &lt;code&gt;list-&lt;/code&gt; (또는 &lt;code&gt;l-&lt;/code&gt; )를 입력해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1d3f85a07b2c38e9d8337984659364cd696a5cd9" translate="yes" xml:space="preserve">
          <source>To see this in action, change to the &lt;code&gt;test/dummy&lt;/code&gt; directory, fire up a console, and start squawking:</source>
          <target state="translated">이것을 실제로 보려면 &lt;code&gt;test/dummy&lt;/code&gt; 디렉토리로 변경 하고 콘솔을 시작한 다음 스 쿼킹을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="67c30c3f1c292fee7a3af67348c9243290473f94" translate="yes" xml:space="preserve">
          <source>To see this in action, change to the &lt;code&gt;test/dummy&lt;/code&gt; directory, start &lt;code&gt;bin/rails console&lt;/code&gt;, and commence squawking:</source>
          <target state="translated">이것이 실제로 작동 &lt;code&gt;test/dummy&lt;/code&gt; 보려면 test / dummy 디렉토리로 변경하고 &lt;code&gt;bin/rails console&lt;/code&gt; 을 시작하고 squawking을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="985b6309c9340a61ea35bb2bdeb2e2f632c952d0" translate="yes" xml:space="preserve">
          <source>To select only a subset of fields from the result set, you can specify the subset via the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">결과 집합의 필드의 하위 집합을 선택하려면, 당신은을 통해 하위 집합을 지정할 수 있습니다 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-select&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="567b7bc9a60c885565522b57611b72ecd6492739" translate="yes" xml:space="preserve">
          <source>To select only a subset of fields from the result set, you can specify the subset via the &lt;code&gt;select&lt;/code&gt; method.</source>
          <target state="translated">결과 집합의 필드의 하위 집합을 선택하려면, 당신은을 통해 하위 집합을 지정할 수 있습니다 &lt;code&gt;select&lt;/code&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="8a69d93078f95ccc83e160e3298809a99d4bcd7c" translate="yes" xml:space="preserve">
          <source>To send a hash, you include the key name inside the brackets:</source>
          <target state="translated">해시를 보내려면 괄호 안에 키 이름을 포함시킵니다.</target>
        </trans-unit>
        <trans-unit id="63b384ea2f65ddc99ec87a175bafa9a268fcb101" translate="yes" xml:space="preserve">
          <source>To send parameters to interpolation use the &lt;code&gt;default_i18n_subject&lt;/code&gt; method on the mailer.</source>
          <target state="translated">보간에 매개 변수를 보내려면 메일러 에서 &lt;code&gt;default_i18n_subject&lt;/code&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d3d50281051232bbbf2f78142bdf9fd69c47dfb" translate="yes" xml:space="preserve">
          <source>To set a default value for the attribute, pass &lt;code&gt;default:&lt;/code&gt;, like so:</source>
          <target state="translated">속성의 기본값을 설정하려면 &lt;code&gt;default:&lt;/code&gt; 과 같이 default :를 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="06e130748a07154eadb5824402046314c29c4d17" translate="yes" xml:space="preserve">
          <source>To set an authenticity token you need to pass an &lt;code&gt;:authenticity_token&lt;/code&gt; parameter</source>
          <target state="translated">인증 토큰을 설정하려면 &lt;code&gt;:authenticity_token&lt;/code&gt; 매개 변수 를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3e35ed1f4878e8bebe8ad2f8794d8110386ed9ad" translate="yes" xml:space="preserve">
          <source>To set asset compression methods, set the appropriate configuration options in &lt;code&gt;production.rb&lt;/code&gt; - &lt;code&gt;config.assets.css_compressor&lt;/code&gt; for your CSS and &lt;code&gt;config.assets.js_compressor&lt;/code&gt; for your JavaScript:</source>
          <target state="translated">세트 자산 압축 방법에 적절한 구성의 옵션 설정 &lt;code&gt;production.rb&lt;/code&gt; - &lt;code&gt;config.assets.css_compressor&lt;/code&gt; 당신의 CSS 및 대한 &lt;code&gt;config.assets.js_compressor&lt;/code&gt; 자바 스크립트를 들어 :</target>
        </trans-unit>
        <trans-unit id="5d82df840cae83b58010e025ce07e289f9af3d12" translate="yes" xml:space="preserve">
          <source>To set the default allowed tags or attributes across your application:</source>
          <target state="translated">애플리케이션에서 기본 허용 된 태그 또는 속성을 설정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f6421ec43350f7a4f6013290b472bcbac6c163f8" translate="yes" xml:space="preserve">
          <source>To set this configuration setting within the application, an initializer should be used. By using an initializer, the configuration will be set up before the application starts and calls the engine's models, which may depend on this configuration setting existing.</source>
          <target state="translated">응용 프로그램 내에서이 구성 설정을 설정하려면 초기화 프로그램을 사용해야합니다. 이니셜 라이저를 사용하면 응용 프로그램이 시작되고 엔진 모델을 호출하기 전에 구성이 설정되며이 구성 설정은 기존 구성 설정에 따라 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d111bf390e547005d29462846e73b7785cde0a5" translate="yes" xml:space="preserve">
          <source>To set up your CDN you have to have your application running in production on the internet at a publicly available URL, for example &lt;code&gt;example.com&lt;/code&gt;. Next you'll need to sign up for a CDN service from a cloud hosting provider. When you do this you need to configure the &quot;origin&quot; of the CDN to point back at your website &lt;code&gt;example.com&lt;/code&gt;, check your provider for documentation on configuring the origin server.</source>
          <target state="translated">CDN을 설정하려면 인터넷에서 공개적으로 사용 가능한 URL (예 : &lt;code&gt;example.com&lt;/code&gt; )로 응용 프로그램을 프로덕션 환경에서 실행해야합니다 . 다음으로 클라우드 호스팅 제공 업체에서 CDN 서비스에 가입해야합니다. 이 작업을 수행 할 때 CDN의 &quot;원점&quot;을 구성하여 웹 사이트 &lt;code&gt;example.com&lt;/code&gt; 을 다시 가리 키도록 하십시오. 제공 업체에서 원본 서버 구성에 대한 문서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="6db10e18e62f9ef0cd6fcf1049650533e80fcbdd" translate="yes" xml:space="preserve">
          <source>To show the comments on an article, edit &lt;code&gt;app/views/blorgh/articles/show.html.erb&lt;/code&gt; and add this line before the &quot;Edit&quot; link:</source>
          <target state="translated">기사에 의견을 표시하려면 &lt;code&gt;app/views/blorgh/articles/show.html.erb&lt;/code&gt; 를 편집하고 &quot;편집&quot;링크 앞에 다음 줄을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="22b911e46af9524858086fadd412be7aa89058be" translate="yes" xml:space="preserve">
          <source>To show the uploaded files in a form:</source>
          <target state="translated">업로드 된 파일을 양식으로 표시하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="ac6d26c9e98452e3d387e0052a0c789b761a3d18" translate="yes" xml:space="preserve">
          <source>To simulate &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; requests prefer using &lt;a href=&quot;behavior#method-i-get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-post&quot;&gt;&lt;code&gt;post&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-patch&quot;&gt;&lt;code&gt;patch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-put&quot;&gt;&lt;code&gt;put&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;behavior#method-i-head&quot;&gt;&lt;code&gt;head&lt;/code&gt;&lt;/a&gt; methods respectively which will make tests more expressive.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PATCH&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; 및 &lt;code&gt;HEAD&lt;/code&gt; 요청 을 시뮬레이션하려면 각각 &lt;a href=&quot;behavior#method-i-get&quot;&gt; &lt;code&gt;get&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;behavior#method-i-post&quot;&gt; &lt;code&gt;post&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;behavior#method-i-patch&quot;&gt; &lt;code&gt;patch&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;behavior#method-i-put&quot;&gt; &lt;code&gt;put&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;behavior#method-i-delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;behavior#method-i-head&quot;&gt; &lt;code&gt;head&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 테스트를보다 표현력있게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="82e0e06c38d69dd9f52808d8b71a6b06bd31ccb7" translate="yes" xml:space="preserve">
          <source>To simulate &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; requests prefer using &lt;a href=&quot;behavior#method-i-get&quot;&gt;get&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-post&quot;&gt;post&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-patch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-put&quot;&gt;put&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-delete&quot;&gt;delete&lt;/a&gt; and &lt;a href=&quot;behavior#method-i-head&quot;&gt;head&lt;/a&gt; methods respectively which will make tests more expressive.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PATCH&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; 및 &lt;code&gt;HEAD&lt;/code&gt; 요청 을 시뮬레이션하려면 &lt;a href=&quot;behavior#method-i-get&quot;&gt;get&lt;/a&gt; , &lt;a href=&quot;behavior#method-i-post&quot;&gt;post&lt;/a&gt; , &lt;a href=&quot;behavior#method-i-patch&quot;&gt;patch&lt;/a&gt; , &lt;a href=&quot;behavior#method-i-put&quot;&gt;put&lt;/a&gt; , &lt;a href=&quot;behavior#method-i-delete&quot;&gt;delete&lt;/a&gt; 및 &lt;a href=&quot;behavior#method-i-head&quot;&gt;head&lt;/a&gt; 메소드를 각각 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="053b225e23faecc1b2f5f015e3c6fb9a248938b8" translate="yes" xml:space="preserve">
          <source>To skip duplicate rows, see &lt;code&gt;ActiveRecord::Persistence#insert_all&lt;/code&gt;. To replace them, see &lt;code&gt;ActiveRecord::Persistence#upsert_all&lt;/code&gt;.</source>
          <target state="translated">중복 행을 건너 뛰려면 &lt;code&gt;ActiveRecord::Persistence#insert_all&lt;/code&gt; 참조하십시오 . 이를 바꾸려면 &lt;code&gt;ActiveRecord::Persistence#upsert_all&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c82c3d0de5a3a42ef5f4e4e32977c025b23f45c" translate="yes" xml:space="preserve">
          <source>To skip rows according to just one unique index pass &lt;code&gt;:unique_by&lt;/code&gt;.</source>
          <target state="translated">하나의 고유 인덱스 패스에 따라 행을 건너 뛰려면 &lt;code&gt;:unique_by&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec0007085506b84d0313a26ec7f7c87e62499ef7" translate="yes" xml:space="preserve">
          <source>To specify a dependency that should be installed with the engine during a traditional &lt;code&gt;gem install&lt;/code&gt;, specify it inside the &lt;code&gt;Gem::Specification&lt;/code&gt; block inside the &lt;code&gt;.gemspec&lt;/code&gt; file in the engine:</source>
          <target state="translated">일반적인 &lt;code&gt;gem install&lt;/code&gt; 중에 엔진과 함께 설치해야 할 종속성을 지정하려면 엔진 의 &lt;code&gt;.gemspec&lt;/code&gt; 파일 안에있는 &lt;code&gt;Gem::Specification&lt;/code&gt; 블록 안에 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfb1b80eb175598abe6f4f144c8d542768d16d33" translate="yes" xml:space="preserve">
          <source>To specify a dependency that should only be installed as a development dependency of the application, specify it like this:</source>
          <target state="translated">응용 프로그램의 개발 종속성으로 만 설치해야하는 종속성을 지정하려면 다음과 같이 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="32ba062916212c5b3cf13662b67a84f1081475f8" translate="yes" xml:space="preserve">
          <source>To specify that only integral numbers are allowed, set &lt;code&gt;:only_integer&lt;/code&gt; to true. Then it will use the</source>
          <target state="translated">&lt;code&gt;:only_integer&lt;/code&gt; 허용되도록 지정하려면 : only_integer 를 true로 설정 하십시오 . 그런 다음</target>
        </trans-unit>
        <trans-unit id="fea55d37307ae227eb72c159fcf3b2893b1226da" translate="yes" xml:space="preserve">
          <source>To start out, write a failing test that shows the behavior you'd like:</source>
          <target state="translated">시작하려면 원하는 동작을 보여주는 실패한 테스트를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="a39bbb3fa9ebdd7c9fa5b7f16f18cadece0e18d7" translate="yes" xml:space="preserve">
          <source>To stop the web server, hit Ctrl+C in the terminal window where it's running. To verify the server has stopped you should see your command prompt cursor again. For most UNIX-like systems including macOS this will be a dollar sign &lt;code&gt;$&lt;/code&gt;. In development mode, Rails does not generally require you to restart the server; changes you make in files will be automatically picked up by the server.</source>
          <target state="translated">웹 서버를 중지하려면 실행중인 터미널 창에서 Ctrl + C를 누르십시오. 서버가 중지되었는지 확인하려면 명령 프롬프트 커서가 다시 나타납니다. macOS를 포함한 대부분의 유닉스 계열 시스템의 경우 달러 기호 &lt;code&gt;$&lt;/code&gt; 가 됩니다. 개발 모드에서 Rails는 일반적으로 서버를 다시 시작할 필요가 없습니다. 파일에서 변경 한 내용은 서버에서 자동으로 선택합니다.</target>
        </trans-unit>
        <trans-unit id="f9fa5042ed4dcfd31d06ae06e8d8bbfacf10d4b7" translate="yes" xml:space="preserve">
          <source>To store something in the session, just assign it to the key like a hash:</source>
          <target state="translated">세션에 무언가를 저장하려면 해시처럼 키에 할당하십시오.</target>
        </trans-unit>
        <trans-unit id="4780fc0f55aaba749bf674b4c8fb89803edfb087" translate="yes" xml:space="preserve">
          <source>To stream data to the client, use &lt;code&gt;send_data&lt;/code&gt;:</source>
          <target state="translated">클라이언트로 데이터를 스트리밍하려면 &lt;code&gt;send_data&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c5576362a518735466c660f07ea0a3f03e740714" translate="yes" xml:space="preserve">
          <source>To support a formatter, you must manually assign a formatter from the &lt;code&gt;config.log_formatter&lt;/code&gt; value to the logger.</source>
          <target state="translated">포맷터를 지원하려면 &lt;code&gt;config.log_formatter&lt;/code&gt; 값에서 로거에 포맷터를 수동으로 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="db920e29a22b02f878501e4d8ef6fa55d8e07a21" translate="yes" xml:space="preserve">
          <source>To support silencing, the logger must include &lt;code&gt;ActiveSupport::LoggerSilence&lt;/code&gt; module. The &lt;code&gt;ActiveSupport::Logger&lt;/code&gt; class already includes these modules.</source>
          <target state="translated">침묵을 지원하려면 로거에 &lt;code&gt;ActiveSupport::LoggerSilence&lt;/code&gt; 모듈이 포함되어 있어야합니다 . &lt;code&gt;ActiveSupport::Logger&lt;/code&gt; 클래스는 이미 이러한 모듈이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d690bfc46b8e35f3c61f13f097453813c24f4b0f" translate="yes" xml:space="preserve">
          <source>To support tagged logs, the log instance must be wrapped with &lt;code&gt;ActiveSupport::TaggedLogging&lt;/code&gt;.</source>
          <target state="translated">태그가 지정된 로그를 지원하려면 로그 인스턴스를 &lt;code&gt;ActiveSupport::TaggedLogging&lt;/code&gt; 으로 랩핑해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a3e4bfdda24efd27566a387296c9d24337cb9532" translate="yes" xml:space="preserve">
          <source>To suppress leading and trailing whitespaces, you can use &lt;code&gt;&amp;lt;%-&lt;/code&gt;&lt;code&gt;-%&amp;gt;&lt;/code&gt; interchangeably with &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">선행 및 후행 공백을 억제하기 위해 사용할 수있는 &lt;code&gt;&amp;lt;%-&lt;/code&gt; &lt;code&gt;-%&amp;gt;&lt;/code&gt; 상호 교환에 &lt;code&gt;&amp;lt;%&lt;/code&gt; 와 &lt;code&gt;%&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f2059d5c2833215668b56154638e80f519d74a71" translate="yes" xml:space="preserve">
          <source>To switch only the primary database cluster use &lt;code&gt;ApplicationRecord&lt;/code&gt;:</source>
          <target state="translated">기본 데이터베이스 클러스터 만 전환하려면 &lt;code&gt;ApplicationRecord&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="07c568d4eb419bf85521ea6d1a52e125bc8f2258" translate="yes" xml:space="preserve">
          <source>To switch to the Vips processor, you would add the following to &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">Vips 프로세서로 전환하려면 &lt;code&gt;config/application.rb&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d07682b0f4f98f71c0d52367bf6f551d905f0b3" translate="yes" xml:space="preserve">
          <source>To test AJAX requests, you can specify the &lt;code&gt;xhr: true&lt;/code&gt; option to &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; methods. For example:</source>
          <target state="translated">AJAX 요청을 테스트하기 위해 &lt;code&gt;xhr: true&lt;/code&gt; 옵션을 지정하여 &lt;code&gt;get&lt;/code&gt; , &lt;code&gt;post&lt;/code&gt; , &lt;code&gt;patch&lt;/code&gt; , &lt;code&gt;put&lt;/code&gt; 및 &lt;code&gt;delete&lt;/code&gt; 메소드를 지정할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="76abbf20f513adf380a34c5d6935ff1faa5fb00b" translate="yes" xml:space="preserve">
          <source>To test that your method does what it says it does, run the unit tests with &lt;code&gt;bin/test&lt;/code&gt; from your plugin directory.</source>
          <target state="translated">메소드가 말한대로 작동하는지 테스트하려면 플러그인 디렉토리에서 &lt;code&gt;bin/test&lt;/code&gt; 를 사용하여 단위 테스트를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="563d9d2a9205fcb53f07d7d86c5597f1f586d6df" translate="yes" xml:space="preserve">
          <source>To turn off HSTS, omitting the header is not enough. Browsers will remember the original HSTS directive until it expires. Instead, use the header to tell browsers to expire HSTS immediately. Setting &lt;code&gt;hsts: false&lt;/code&gt; is a shortcut for &lt;code&gt;hsts: { expires: 0 }&lt;/code&gt;.</source>
          <target state="translated">HSTS를 끄려면 헤더를 생략하는 것만으로는 충분하지 않습니다. 브라우저는 만료 될 때까지 원래 HSTS 지시문을 기억합니다. 대신, 헤더를 사용하여 HSTS를 즉시 만료하도록 브라우저에 지시하십시오. &lt;code&gt;hsts: false&lt;/code&gt; 설정 : false 는 hsts 의 바로 가기입니다 &lt;code&gt;hsts: { expires: 0 }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c2bdff1d9c3da8547218cc44b7594e97a4a9e52" translate="yes" xml:space="preserve">
          <source>To turn this off per connection, set &lt;code&gt;use_metadata_table&lt;/code&gt; in your database configuration. This is useful when working with a shared database and/or database user that cannot create tables.</source>
          <target state="translated">연결 &lt;code&gt;use_metadata_table&lt;/code&gt; 을 끄 려면 데이터베이스 구성에서 use_metadata_table 을 설정 하십시오. 이는 테이블을 생성 할 수없는 공유 데이터베이스 및 / 또는 데이터베이스 사용자와 작업 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9e27b454f93e0fbc003938941a229f7cdbbaa0dc" translate="yes" xml:space="preserve">
          <source>To understand how all of this works together, let's take another look at the &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; controller actions:</source>
          <target state="translated">이 모든 것이 함께,의는 다시 한번 봅시다 어떻게 작동하는지 이해하기 위해 &lt;code&gt;new&lt;/code&gt; 하고 &lt;code&gt;create&lt;/code&gt; 컨트롤러 작업을 :</target>
        </trans-unit>
        <trans-unit id="79c3168a1a8d09ad93e4cdbd3715a216cdfee62b" translate="yes" xml:space="preserve">
          <source>To unregister a MIME type:</source>
          <target state="translated">MIME 유형을 등록 취소하려면</target>
        </trans-unit>
        <trans-unit id="334e52eb6863fd42a7ffce014c801acc16fe897d" translate="yes" xml:space="preserve">
          <source>To upload binary files on Windows, pass &lt;code&gt;:binary&lt;/code&gt; as the last parameter. This will not affect other platforms:</source>
          <target state="translated">Windows에서 이진 파일을 업로드하려면 &lt;code&gt;:binary&lt;/code&gt; 를 마지막 매개 변수로 전달 하십시오 . 다른 플랫폼에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f86cfed7413cbd53bd2f76385b8b2bb26543569f" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;ActiveModel::Serializers::JSON&lt;/code&gt; you only need to change the module you are including from &lt;code&gt;ActiveModel::Serialization&lt;/code&gt; to &lt;code&gt;ActiveModel::Serializers::JSON&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ActiveModel::Serializers::JSON&lt;/code&gt; 을 사용하려면 포함하는 모듈을 &lt;code&gt;ActiveModel::Serialization&lt;/code&gt; 에서 &lt;code&gt;ActiveModel::Serializers::JSON&lt;/code&gt; 으로 변경하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="34393b659190e78950d7a84ba4a0c7807404114d" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;rackup&lt;/code&gt; instead of Rails' &lt;code&gt;bin/rails server&lt;/code&gt;, you can put the following inside &lt;code&gt;config.ru&lt;/code&gt; of your Rails application's root directory:</source>
          <target state="translated">Rails의 &lt;code&gt;bin/rails server&lt;/code&gt; 대신 &lt;code&gt;rackup&lt;/code&gt; 을 사용하려면 Rails 애플리케이션 루트 디렉토리의 &lt;code&gt;config.ru&lt;/code&gt; 에 다음을 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="29afb7c5d099e377b716dbeb9e7edb10838d1ba5" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;rackup&lt;/code&gt; instead of Rails' &lt;code&gt;rails server&lt;/code&gt;, you can put the following inside &lt;code&gt;config.ru&lt;/code&gt; of your Rails application's root directory:</source>
          <target state="translated">Rails &lt;code&gt;rails server&lt;/code&gt; 대신 &lt;code&gt;rackup&lt;/code&gt; 을 사용하려면 Rails 애플리케이션 루트 디렉토리의 &lt;code&gt;config.ru&lt;/code&gt; 에 다음을 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="31a513a06016a34caf7c0901b08d1c4419a32387" translate="yes" xml:space="preserve">
          <source>To use Action Mailer, you need to create a mailer model.</source>
          <target state="translated">Action Mailer를 사용하려면 메일러 모델을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="63efbbc2d83d6f08dc36f06dd855914c5c196627" translate="yes" xml:space="preserve">
          <source>To use Backburner set the queue_adapter config to &lt;code&gt;:backburner&lt;/code&gt;.</source>
          <target state="translated">Backburner를 사용하려면 queue_adapter 구성을 &lt;code&gt;:backburner&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="cfb26a8f671852501054716a4fb612efbd5f3940" translate="yes" xml:space="preserve">
          <source>To use Delayed Job, set the queue_adapter config to &lt;code&gt;:delayed_job&lt;/code&gt;.</source>
          <target state="translated">지연된 작업을 사용하려면 queue_adapter 구성을 &lt;code&gt;:delayed_job&lt;/code&gt; 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="78abd79732709f235b41ac26f54e0f27ef464edb" translate="yes" xml:space="preserve">
          <source>To use Que set the queue_adapter config to &lt;code&gt;:que&lt;/code&gt;.</source>
          <target state="translated">Que를 사용하려면 queue_adapter 구성을 &lt;code&gt;:que&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfec63c8c0fb5ab4af67cc939815ff9fc93fabfd" translate="yes" xml:space="preserve">
          <source>To use Resque set the queue_adapter config to &lt;code&gt;:resque&lt;/code&gt;.</source>
          <target state="translated">Resque를 사용하려면 queue_adapter 구성을 &lt;code&gt;:resque&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="eeac0f03c2323191770ea66f043353ac2edcd693" translate="yes" xml:space="preserve">
          <source>To use Sidekiq set the queue_adapter config to &lt;code&gt;:sidekiq&lt;/code&gt;.</source>
          <target state="translated">Sidekiq를 사용하려면 queue_adapter 구성을 &lt;code&gt;:sidekiq&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a0c64df5b7e96718906edd95865302dacfcc66d1" translate="yes" xml:space="preserve">
          <source>To use Sneakers set the queue_adapter config to &lt;code&gt;:sneakers&lt;/code&gt;.</source>
          <target state="translated">스니커즈를 사용하려면 queue_adapter 구성을 &lt;code&gt;:sneakers&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="089f8ca62ac95b9b15cef2ae944fcffa19f1e9de" translate="yes" xml:space="preserve">
          <source>To use Sucker Punch set the queue_adapter config to &lt;code&gt;:sucker_punch&lt;/code&gt;.</source>
          <target state="translated">Sucker Punch를 사용하려면 queue_adapter 구성을 &lt;code&gt;:sucker_punch&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d93032f353f3684dff439b924d144a3239e8303" translate="yes" xml:space="preserve">
          <source>To use a UUID primary key without any of the extensions, set the &lt;code&gt;:default&lt;/code&gt; option to &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="translated">확장자없이 UUID 기본 키를 사용하려면 &lt;code&gt;:default&lt;/code&gt; 옵션을 &lt;code&gt;nil&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="01a6560ac359f0b45e5d768bf7caef4a4fb00654" translate="yes" xml:space="preserve">
          <source>To use a custom cache store, simply set the cache store to a new instance of your custom class.</source>
          <target state="translated">사용자 정의 캐시 저장소를 사용하려면 캐시 저장소를 사용자 정의 클래스의 새 인스턴스로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="16cdfe80fbab3d09c99a31e7b52ae4835d807d27" translate="yes" xml:space="preserve">
          <source>To use a custom local variable name within the partial, specify the &lt;code&gt;:as&lt;/code&gt; option in the call to the partial:</source>
          <target state="translated">부분 내에서 사용자 정의 로컬 변수 이름을 사용하려면 부분 에 대한 호출에서 &lt;code&gt;:as&lt;/code&gt; 옵션을 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbb124cd3e42b858d7854133d16f1d8b2e013e5f" translate="yes" xml:space="preserve">
          <source>To use a custom separator, override the &lt;code&gt;separator&lt;/code&gt; argument.</source>
          <target state="translated">사용자 정의 구분 기호를 사용하려면 &lt;code&gt;separator&lt;/code&gt; 인수를 재정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="be137bccdb82824afa32a43a7660755352537faf" translate="yes" xml:space="preserve">
          <source>To use a headless driver, like Poltergeist, update your Gemfile to use Poltergeist instead of Selenium and then declare the driver name in the &lt;code&gt;application_system_test_case.rb&lt;/code&gt; file. In this case, you would leave out the &lt;code&gt;:using&lt;/code&gt; option because the driver is headless, but you can still use &lt;code&gt;:screen_size&lt;/code&gt; to change the size of the browser screen, also you can use &lt;code&gt;:options&lt;/code&gt; to pass options supported by the driver. Please refer to your driver documentation to learn about supported options.</source>
          <target state="translated">Poltergeist와 같은 헤드리스 드라이버를 사용하려면 Selenium 대신 Poltergeist를 사용하도록 Gemfile을 업데이트 한 다음 &lt;code&gt;application_system_test_case.rb&lt;/code&gt; 파일 에서 드라이버 이름을 선언 하십시오. 이 경우 드라이버가 헤드리스가 아니기 때문에 &lt;code&gt;:using&lt;/code&gt; 옵션을 생략 해도됩니다. 그러나 &lt;code&gt;:screen_size&lt;/code&gt; 를 사용 하여 브라우저 화면의 크기를 변경할 수 있으며 &lt;code&gt;:options&lt;/code&gt; 를 사용 하여 드라이버가 지원하는 옵션 을 전달할 수도 있습니다. 지원되는 옵션에 대한 자세한 내용은 드라이버 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8d749486cb0ce9dfa9e6537e7edf3206e24ced0c" translate="yes" xml:space="preserve">
          <source>To use engine's migrations in application you can use the rake task below, which copies them to application's dir:</source>
          <target state="translated">응용 프로그램에서 엔진의 마이그레이션을 사용하려면 아래 레이크 작업을 사용하여 응용 프로그램의 dir에 복사합니다.</target>
        </trans-unit>
        <trans-unit id="6f72fb95ec784f0f0b4396a61a188a60e22e4305" translate="yes" xml:space="preserve">
          <source>To use it, insert it near the top of the middleware stack, using &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">이를 사용하려면 &lt;code&gt;config/application.rb&lt;/code&gt; 를 사용하여 미들웨어 스택 상단 근처에 삽입하십시오 .</target>
        </trans-unit>
        <trans-unit id="9034872b1f2e613b63f4393ca1728d7d452b7374" translate="yes" xml:space="preserve">
          <source>To use queue_classic set the queue_adapter config to &lt;code&gt;:queue_classic&lt;/code&gt;.</source>
          <target state="translated">queue_classic을 사용하려면 queue_adapter 구성을 &lt;code&gt;:queue_classic&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="f0c8527603dfb398fd3aee6d195e7796d8c74e0d" translate="yes" xml:space="preserve">
          <source>To use the &lt;a href=&quot;databaseselector&quot;&gt;&lt;code&gt;DatabaseSelector&lt;/code&gt;&lt;/a&gt; in your application with default settings add the following options to your environment config:</source>
          <target state="translated">기본 설정으로 애플리케이션 에서 &lt;a href=&quot;databaseselector&quot;&gt; &lt;code&gt;DatabaseSelector&lt;/code&gt; &lt;/a&gt; 를 사용하려면 환경 구성에 다음 옵션을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="35d41298efb8b0ad5a971a7547f7bdd79e5b6645" translate="yes" xml:space="preserve">
          <source>To use the &lt;a href=&quot;databaseselector&quot;&gt;DatabaseSelector&lt;/a&gt; in your application with default settings add the following options to your environment config:</source>
          <target state="translated">기본 설정으로 응용 프로그램 에서 &lt;a href=&quot;databaseselector&quot;&gt;DatabaseSelector&lt;/a&gt; 를 사용하려면 환경 구성에 다음 옵션을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="bdb9175c626f67f07a3f428fac07fa2bee7bb390" translate="yes" xml:space="preserve">
          <source>To use the Amazon S3 service in production, you add the following to &lt;code&gt;config/environments/production.rb&lt;/code&gt;:</source>
          <target state="translated">프로덕션에서 Amazon S3 서비스를 사용하려면 &lt;code&gt;config/environments/production.rb&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="d1977fd7fff7138c1c55295f34f91a3003f3ecd2" translate="yes" xml:space="preserve">
          <source>To use the Inline set the queue_adapter config to &lt;code&gt;:inline&lt;/code&gt;.</source>
          <target state="translated">인라인을 사용하려면 queue_adapter 구성을 &lt;code&gt;:inline&lt;/code&gt; 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a30d789c46450a7a610ff7259d13ff1468af7db4" translate="yes" xml:space="preserve">
          <source>To use the S3 service in production, you add the following to &lt;code&gt;config/environments/production.rb&lt;/code&gt;:</source>
          <target state="translated">프로덕션에서 S3 서비스를 사용하려면 &lt;code&gt;config/environments/production.rb&lt;/code&gt; 에 다음을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="c85bb3f433af75d0fd44ee10dd89abfc7bcf6cc1" translate="yes" xml:space="preserve">
          <source>To use the authentication system, we specify it at the top of our &lt;code&gt;ArticlesController&lt;/code&gt; in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;. In our case, we want the user to be authenticated on every action except &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt;, so we write that:</source>
          <target state="translated">인증 시스템을 사용하려면, 우리는 우리의 상단을 지정 &lt;code&gt;ArticlesController&lt;/code&gt; 에서 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; . 이 경우 &lt;code&gt;index&lt;/code&gt; 와 &lt;code&gt;show&lt;/code&gt; 를 제외한 모든 작업에서 사용자가 인증되기를 원 하므로 다음과 같이 작성합니다.</target>
        </trans-unit>
        <trans-unit id="3750efae37071f6319bf02d295410aab0ccc20ec" translate="yes" xml:space="preserve">
          <source>To use the csv renderer in a controller action:</source>
          <target state="translated">컨트롤러 작업에서 csv 렌더러를 사용하려면</target>
        </trans-unit>
        <trans-unit id="ad096929de551a9ad875cd92028a0e3e1c7b5581" translate="yes" xml:space="preserve">
          <source>To use the new test runner simply type &lt;code&gt;bin/rails test&lt;/code&gt;.</source>
          <target state="translated">새 테스트 실행기를 사용하려면 간단히 &lt;code&gt;bin/rails test&lt;/code&gt; 를 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="f0f37b40b3e37338bbe274234d7a5e6c3bcb135d" translate="yes" xml:space="preserve">
          <source>To use the new test runner simply type &lt;code&gt;rails test&lt;/code&gt;.</source>
          <target state="translated">새로운 테스트 러너를 사용하려면 간단히 &lt;code&gt;rails test&lt;/code&gt; 를 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="80ce1d3d33bb996930297986e6c3050ecb27747f" translate="yes" xml:space="preserve">
          <source>To use the test adapter set &lt;code&gt;adapter&lt;/code&gt; value to &lt;code&gt;test&lt;/code&gt; in your &lt;code&gt;config/cable.yml&lt;/code&gt; file.</source>
          <target state="translated">테스트 어댑터 세트 &lt;code&gt;adapter&lt;/code&gt; 값을 &lt;code&gt;test&lt;/code&gt; 하여 &lt;code&gt;config/cable.yml&lt;/code&gt; 파일 에서 테스트 하십시오.</target>
        </trans-unit>
        <trans-unit id="e481bec70694153e7aa7954047de1caac06c9fc2" translate="yes" xml:space="preserve">
          <source>To use the test adapter set queue_adapter config to &lt;code&gt;:test&lt;/code&gt;.</source>
          <target state="translated">테스트 어댑터를 사용하려면 queue_adapter 구성을 &lt;code&gt;:test&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="7cf909b63cdef87788c291bfb956e81c0ecc07f9" translate="yes" xml:space="preserve">
          <source>To use the test service when testing, you add the following to &lt;code&gt;config/environments/test.rb&lt;/code&gt;:</source>
          <target state="translated">테스트 할 때 테스트 서비스를 사용하려면 &lt;code&gt;config/environments/test.rb&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="98ea955b18d2b3a5365f8fa2e4739abe3c3951fe" translate="yes" xml:space="preserve">
          <source>To use this adapter, set queue adapter to &lt;code&gt;:async&lt;/code&gt;:</source>
          <target state="translated">이 어댑터를 사용하려면 큐 어댑터를 &lt;code&gt;:async&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="81c857c7d69847a983fe06c67541e315571c191a" translate="yes" xml:space="preserve">
          <source>To use this configuration, create a test inside &lt;code&gt;test/system&lt;/code&gt; that inherits from &lt;code&gt;MobileSystemTestCase&lt;/code&gt;. Now you can test your app using multiple different configurations.</source>
          <target state="translated">이 구성을 사용하려면 &lt;code&gt;MobileSystemTestCase&lt;/code&gt; 에서 상속 된 &lt;code&gt;test/system&lt;/code&gt; 내에 테스트를 작성하십시오 . 이제 여러 다른 구성을 사용하여 앱을 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f2618e7c106636a2edf971a07ec21fd1010c324" translate="yes" xml:space="preserve">
          <source>To use this generator, open a terminal, navigate to a directory where you have rights to create files, and run:</source>
          <target state="translated">이 생성기를 사용하려면 터미널을 열고 파일 생성 권한이있는 디렉토리로 이동 한 후 다음을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="8775ee80a19bf753d531a588ada614dc6fa75569" translate="yes" xml:space="preserve">
          <source>To use this generator, open a terminal, navigate to a directory where you have rights to create files, and type:</source>
          <target state="translated">이 생성기를 사용하려면 터미널을 열고 파일을 작성할 권한이있는 디렉토리로 이동 한 후 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="db2602f2d32a298873beee1cbe1cf38680278083" translate="yes" xml:space="preserve">
          <source>To use this, your client will need to make a request with JSON-encoded parameters and specify the &lt;code&gt;Content-Type&lt;/code&gt; as &lt;code&gt;application/json&lt;/code&gt;.</source>
          <target state="translated">이를 사용하려면 클라이언트가 JSON 인코딩 매개 변수로 요청하고 &lt;code&gt;Content-Type&lt;/code&gt; 을 &lt;code&gt;application/json&lt;/code&gt; 으로 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2de46ef2c7ebb33a8887eb8c5d0f157f87ebb167" translate="yes" xml:space="preserve">
          <source>To use, pass an attribute name (as string or symbol). Be sure to declare &lt;code&gt;define_attribute_method&lt;/code&gt; after you define any prefix, suffix or affix method, or they will not hook in.</source>
          <target state="translated">사용하려면 속성 이름 (문자열 또는 기호)을 전달하십시오. 접두사, 접미사 또는 접미사 메소드를 정의한 후 &lt;code&gt;define_attribute_method&lt;/code&gt; 를 선언해야합니다 . 그렇지 않으면 연결되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dc63230c58d5b21923a27d0485a76965d959d345" translate="yes" xml:space="preserve">
          <source>To use, pass attribute names (as strings or symbols). Be sure to declare &lt;code&gt;define_attribute_methods&lt;/code&gt; after you define any prefix, suffix or affix methods, or they will not hook in.</source>
          <target state="translated">사용하려면 속성 이름 (문자열 또는 기호)을 전달하십시오. 접두사, 접미사 또는 접미사 메소드를 정의한 후 &lt;code&gt;define_attribute_methods&lt;/code&gt; 를 선언해야합니다 . 그렇지 않으면 연결되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="873cf75d77dd753ab46a7e35040b692e2a17e5ea" translate="yes" xml:space="preserve">
          <source>To verify that you have everything installed correctly, you should be able to run the following:</source>
          <target state="translated">모든 것이 올바르게 설치되었는지 확인하려면 다음을 실행할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="934ce20174d16c6018cfc8ac9f70974ca722afc9" translate="yes" xml:space="preserve">
          <source>To verify whether or not a particular attribute of an object is valid, you can use &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Errors.html#method-i-5B-5D&quot;&gt;&lt;code&gt;errors[:attribute]&lt;/code&gt;&lt;/a&gt;. It returns an array of all the error messages for &lt;code&gt;:attribute&lt;/code&gt;. If there are no errors on the specified attribute, an empty array is returned.</source>
          <target state="translated">객체의 특정 속성이 유효한지 여부를 확인하려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Errors.html#method-i-5B-5D&quot;&gt; &lt;code&gt;errors[:attribute]&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 . &lt;code&gt;:attribute&lt;/code&gt; 에 대한 모든 오류 메시지의 배열을 반환 합니다 . 지정된 속성에 오류가 없으면 빈 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="1285ddbbd6082ff3c0815dc0e62efeb98c2016cf" translate="yes" xml:space="preserve">
          <source>To verify whether or not a particular attribute of an object is valid, you can use &lt;code&gt;errors[:attribute]&lt;/code&gt;. It returns an array of all the errors for &lt;code&gt;:attribute&lt;/code&gt;. If there are no errors on the specified attribute, an empty array is returned.</source>
          <target state="translated">객체의 특정 속성이 유효한지 확인하기 위해 &lt;code&gt;errors[:attribute]&lt;/code&gt; 사용할 수 있습니다 . &lt;code&gt;:attribute&lt;/code&gt; 에 대한 모든 오류의 배열을 리턴 합니다 . 지정된 속성에 오류가 없으면 빈 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6fbc729c716fb26282a9761b80de4f7202017c7f" translate="yes" xml:space="preserve">
          <source>To write in the current log use the &lt;code&gt;logger.(debug|info|warn|error|fatal|unknown)&lt;/code&gt; method from within a controller, model, or mailer:</source>
          <target state="translated">현재 로그에 쓰려면 컨트롤러, 모델 또는 메일러 에서 &lt;code&gt;logger.(debug|info|warn|error|fatal|unknown)&lt;/code&gt; 방법을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7e7fbc811015943c1c30e7ceeea8b05c76a8ee58" translate="yes" xml:space="preserve">
          <source>To:</source>
          <target state="translated">To:</target>
        </trans-unit>
        <trans-unit id="8506377b6115cfb920907263339cc2b6e7ba1faf" translate="yes" xml:space="preserve">
          <source>Token Authentication</source>
          <target state="translated">토큰 인증</target>
        </trans-unit>
        <trans-unit id="0a5cf543cd4d686dcf3ac6e33aedc11950b90b8c" translate="yes" xml:space="preserve">
          <source>Top-level &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; is soft-deprecated</source>
          <target state="translated">최상위 &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; 는 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="10f575d9251c4dbc59e91d83151f5a50ffa87866" translate="yes" xml:space="preserve">
          <source>Total of grouped items</source>
          <target state="translated">그룹화 된 항목의 총계</target>
        </trans-unit>
        <trans-unit id="022312f469e4cf2940eea5c2774be1b0a2ff51bc" translate="yes" xml:space="preserve">
          <source>Touches all records in the current relation without instantiating records first with the &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes set to the current time or the time specified. This method can be passed attribute names and an optional time argument. If attribute names are passed, they are updated along with &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes. If no time argument is passed, the current time is used as default.</source>
          <target state="translated">&lt;code&gt;updated_at&lt;/code&gt; / &lt;code&gt;updated_on&lt;/code&gt; 속성이 현재 시간 또는 지정된 시간으로 설정된 레코드를 먼저 인스턴스화하지 않고 현재 관계의 모든 레코드를 터치 합니다. 이 메소드에는 속성 이름 및 선택적 시간 인수가 전달 될 수 있습니다. 속성 이름이 전달되면 &lt;code&gt;updated_at&lt;/code&gt; / &lt;code&gt;updated_on&lt;/code&gt; 속성 과 함께 업데이트됩니다 . 시간 인수가 전달되지 않으면 현재 시간이 기본값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="49f62026a8a07be6023c16c5bc2a0614c4e60ed6" translate="yes" xml:space="preserve">
          <source>Touches all records in the current relation, setting the &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes to the current time or the time specified. It does not instantiate the involved models, and it does not trigger Active Record callbacks or validations. This method can be passed attribute names and an optional time argument. If attribute names are passed, they are updated along with &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes. If no time argument is passed, the current time is used as default.</source>
          <target state="translated">현재 관계의 모든 레코드를 터치하여 &lt;code&gt;updated_at&lt;/code&gt; / &lt;code&gt;updated_on&lt;/code&gt; 속성을 현재 시간 또는 지정된 시간으로 설정합니다. 관련 모델을 인스턴스화하지 않으며 Active Record 콜백 또는 유효성 검사를 트리거하지 않습니다. 이 메서드는 속성 이름과 선택적 시간 인수를 전달할 수 있습니다. 속성 이름이 전달되면 &lt;code&gt;updated_at&lt;/code&gt; / &lt;code&gt;updated_on&lt;/code&gt; 속성 과 함께 업데이트됩니다 . 시간 인수가 전달되지 않으면 현재 시간이 기본값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ae540dce1659c1d1aa822c4cbdb17e93f0dc5a48" translate="yes" xml:space="preserve">
          <source>Tracing Autoloads</source>
          <target state="translated">자동로드 추적</target>
        </trans-unit>
        <trans-unit id="82d5289f6f1087b5881413ee7d99895f16e8ea68" translate="yes" xml:space="preserve">
          <source>Track both previous and current value of the changed attribute. Returns an array if changed, otherwise returns nil.</source>
          <target state="translated">변경된 속성의 이전 값과 현재 값을 모두 추적합니다. 변경된 경우 배열을 반환하고, 그렇지 않으면 nil을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0eabbcb5df3c900b5b9056b76cbe9c7db52939eb" translate="yes" xml:space="preserve">
          <source>Track the previous value of the attribute.</source>
          <target state="translated">속성의 이전 값을 추적하십시오.</target>
        </trans-unit>
        <trans-unit id="6650dc39257b665514df322a12ffb3043e12d653" translate="yes" xml:space="preserve">
          <source>Track when a job was enqueued</source>
          <target state="translated">작업이 대기열에 추가 된시기 추적</target>
        </trans-unit>
        <trans-unit id="bc1d68f19a8818a014f7f8000486ff7f3f0f6c02" translate="yes" xml:space="preserve">
          <source>Track whether the particular attribute has been changed or not.</source>
          <target state="translated">특정 속성이 변경되었는지 여부를 추적하십시오.</target>
        </trans-unit>
        <trans-unit id="7952082338d4b4e017572cad8a6217092afda9b8" translate="yes" xml:space="preserve">
          <source>Traditionally, when people said that they used Rails as an &quot;API&quot;, they meant providing a programmatically accessible API alongside their web application. For example, GitHub provides &lt;a href=&quot;https://developer.github.com&quot;&gt;an API&lt;/a&gt; that you can use from your own custom clients.</source>
          <target state="translated">전통적으로 사람들은 Rails를 &quot;API&quot;로 사용한다고 말했을 때 웹 애플리케이션과 함께 프로그래밍 방식으로 액세스 가능한 API를 제공해야했습니다. 예를 들어 GitHub는 자체 사용자 정의 클라이언트에서 사용할 수 &lt;a href=&quot;https://developer.github.com&quot;&gt;있는 API&lt;/a&gt; 를 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="92cda78aedf9a7224672a0a74a47de9961784386" translate="yes" xml:space="preserve">
          <source>Transaction Callbacks</source>
          <target state="translated">거래 콜백</target>
        </trans-unit>
        <trans-unit id="95acd4a389ae050d0389bc3d1f75f842a801e716" translate="yes" xml:space="preserve">
          <source>Transaction isolation</source>
          <target state="translated">트랜잭션 격리</target>
        </trans-unit>
        <trans-unit id="84b5f207a62cdad2712d08229eb509de9b5c38c2" translate="yes" xml:space="preserve">
          <source>Transactional Migrations</source>
          <target state="translated">트랜잭션 마이그레이션</target>
        </trans-unit>
        <trans-unit id="1a00edfce4dccdd473d0b5b4aa4b9431839e6d94" translate="yes" xml:space="preserve">
          <source>Transactional Tests</source>
          <target state="translated">거래 테스트</target>
        </trans-unit>
        <trans-unit id="1e3281a962e6db2e54e787f796eb7d2b1582389a" translate="yes" xml:space="preserve">
          <source>Transactions</source>
          <target state="translated">Transactions</target>
        </trans-unit>
        <trans-unit id="270dfa7b05b65e4d6ee78138df006c68703ff066" translate="yes" xml:space="preserve">
          <source>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. The classic example is a transfer between two accounts where you can only have a deposit if the withdrawal succeeded and vice versa. Transactions enforce the integrity of the database and guard the data against program errors or database break-downs. So basically you should use transaction blocks whenever you have a number of statements that must be executed together or not at all.</source>
          <target state="translated">트랜잭션은 SQL 문이 모두 하나의 원자 적 조치로 성공할 수있는 경우에만 영구적 인 보호 블록입니다. 전형적인 예는 인출이 성공한 경우에만 입금이 가능하고 그 반대의 경우에도 두 계좌 간의 이체입니다. 트랜잭션은 데이터베이스의 무결성을 강화하고 프로그램 오류 또는 데이터베이스 고장으로부터 데이터를 보호합니다. 따라서 기본적으로 함께 실행되거나 실행되지 않아야하는 여러 명령문이있을 때마다 트랜잭션 블록을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="38e996af47c2368fdbb151ed9844e2d4f71df67d" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods</source>
          <target state="translated">Transactions::ClassMethods</target>
        </trans-unit>
        <trans-unit id="2a84a05169c2f3e4d6a1d7045a581c88b7430fce" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_commit</source>
          <target state="translated">Transactions::ClassMethods#after_commit</target>
        </trans-unit>
        <trans-unit id="acbf0cbda9bc720f3ef4a97b33b7696783161277" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_create_commit</source>
          <target state="translated">Transactions::ClassMethods#after_create_commit</target>
        </trans-unit>
        <trans-unit id="b0030800dee0f15a62044c09afa3fb2b628ce2c6" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_destroy_commit</source>
          <target state="translated">Transactions::ClassMethods#after_destroy_commit</target>
        </trans-unit>
        <trans-unit id="801a0b3236661b839fc0a038020be43381351c68" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_rollback</source>
          <target state="translated">Transactions::ClassMethods#after_rollback</target>
        </trans-unit>
        <trans-unit id="baa3610af3e4304f396e9764c6cb826da966e595" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_save_commit</source>
          <target state="translated">Transactions::ClassMethods#after_save_commit</target>
        </trans-unit>
        <trans-unit id="0270461fea9c66564f7a254959fb51e5e3a6cc9d" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_update_commit</source>
          <target state="translated">Transactions::ClassMethods#after_update_commit</target>
        </trans-unit>
        <trans-unit id="bab7d9a3a43c06b0404aa40dff8874797553fbf9" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#transaction</source>
          <target state="translated">Transactions::ClassMethods#transaction</target>
        </trans-unit>
        <trans-unit id="68c317b8b642e4941db4a5d8067bb3406ffbda72" translate="yes" xml:space="preserve">
          <source>Transform the model name into a more human format, using I18n. By default, it will underscore then humanize the class name.</source>
          <target state="translated">I18n을 사용하여 모델 이름을보다 인간적인 형식으로 변환하십시오. 기본적으로 클래스 이름을 밑줄로 표시하고 인간화합니다.</target>
        </trans-unit>
        <trans-unit id="d1a5f09e5a6f5a362edfb0ba9e56cc9962e60e03" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer</source>
          <target state="translated">Transformers::Transformer</target>
        </trans-unit>
        <trans-unit id="6c5f528c2a7bc72201870dcef72ffbe0cdc3fff8" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer#process</source>
          <target state="translated">Transformers::Transformer#process</target>
        </trans-unit>
        <trans-unit id="712ae41fc53fcc53fb6bc77f5e1f3c26bf682305" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer#transform</source>
          <target state="translated">Transformers::Transformer#transform</target>
        </trans-unit>
        <trans-unit id="448c20e676f6e539a81309bdcb9680320cf14d0a" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer#transformations</source>
          <target state="translated">Transformers::Transformer#transformations</target>
        </trans-unit>
        <trans-unit id="83cce67c3bfd7dab546d2d1ec6c3a8117035395c" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer::new</source>
          <target state="translated">Transformers::Transformer::new</target>
        </trans-unit>
        <trans-unit id="741ef17a1a9e0bbed6465fd207e9b13dfc50cd2d" translate="yes" xml:space="preserve">
          <source>Transforming Images</source>
          <target state="translated">이미지 변환</target>
        </trans-unit>
        <trans-unit id="bbc65aff8daf8c3789a28da57b533aed205bdbd8" translate="yes" xml:space="preserve">
          <source>Transforms attribute names into a more human format, such as &amp;ldquo;First name&amp;rdquo; instead of &amp;ldquo;first_name&amp;rdquo;.</source>
          <target state="translated">속성 이름을 &quot;first_name&quot;대신 &quot;First name&quot;과 같은보다 인간적인 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="ada596db991c7089250e37cf5f2573c952122c7d" translate="yes" xml:space="preserve">
          <source>Translated Paths</source>
          <target state="translated">번역 된 경로</target>
        </trans-unit>
        <trans-unit id="3f5191448f501cba2ff1cf27dfb0c8dcff629095" translate="yes" xml:space="preserve">
          <source>Translates an error message in its default scope (&lt;code&gt;activemodel.errors.messages&lt;/code&gt;).</source>
          <target state="translated">기본 범위에서 오류 메시지를 변환합니다 ( &lt;code&gt;activemodel.errors.messages&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="42776285f240d676b2502e1ff1fabc97b2bba5b3" translate="yes" xml:space="preserve">
          <source>Translates the &lt;code&gt;subject&lt;/code&gt; using Rails I18n class under &lt;code&gt;[mailer_scope, action_name]&lt;/code&gt; scope. If it does not find a translation for the &lt;code&gt;subject&lt;/code&gt; under the specified scope it will default to a humanized version of the &lt;code&gt;action_name&lt;/code&gt;. If the subject has interpolations, you can pass them through the &lt;code&gt;interpolations&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;[mailer_scope, action_name]&lt;/code&gt; 범위 에서 Rails I18n 클래스를 사용 하여 &lt;code&gt;subject&lt;/code&gt; 를 번역합니다 . 지정된 범위 에서 &lt;code&gt;subject&lt;/code&gt; 에 대한 번역을 찾지 못하면 기본적으로 인간화 ​​버전의 &lt;code&gt;action_name&lt;/code&gt; 이 됩니다. 피사체에 보간이 있으면 &lt;code&gt;interpolations&lt;/code&gt; 매개 변수를 통해 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="451243e728b090f06ea2905406617e392e05f974" translate="yes" xml:space="preserve">
          <source>Translating Model Content</source>
          <target state="translated">모델 컨텐츠 번역</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="1da446c621416aed5e89e23280ee0dee5502a10e" translate="yes" xml:space="preserve">
          <source>Translation#human_attribute_name</source>
          <target state="translated">Translation#human_attribute_name</target>
        </trans-unit>
        <trans-unit id="cfd2977e6d37f586290990b52509fff595b9206a" translate="yes" xml:space="preserve">
          <source>Translation#i18n_scope</source>
          <target state="translated">Translation#i18n_scope</target>
        </trans-unit>
        <trans-unit id="bbcb54e4fece5d63d168777ded2dbf56c7955264" translate="yes" xml:space="preserve">
          <source>Translation#l</source>
          <target state="translated">Translation#l</target>
        </trans-unit>
        <trans-unit id="a8e462e8b6b6581114df95ae2b2ad84e9e9dbb43" translate="yes" xml:space="preserve">
          <source>Translation#localize</source>
          <target state="translated">Translation#localize</target>
        </trans-unit>
        <trans-unit id="cae63062268efd18edcab78113cd64c60f168461" translate="yes" xml:space="preserve">
          <source>Translation#lookup_ancestors</source>
          <target state="translated">Translation#lookup_ancestors</target>
        </trans-unit>
        <trans-unit id="6b766b011404e22667100c4991f00a7b14ff6db0" translate="yes" xml:space="preserve">
          <source>Translation#t</source>
          <target state="translated">Translation#t</target>
        </trans-unit>
        <trans-unit id="2e3fe21781b2c4b0f228341cf66372b1c7a9ea67" translate="yes" xml:space="preserve">
          <source>Translation#translate</source>
          <target state="translated">Translation#translate</target>
        </trans-unit>
        <trans-unit id="5207e6b5769fe3f227e176eb6b6a97ced9ce6dff" translate="yes" xml:space="preserve">
          <source>Translations are looked up by keys which can be both Symbols or Strings, so these calls are equivalent:</source>
          <target state="translated">번역은 Symbols 또는 Strings가 될 수있는 키로 조회되므로 이러한 호출은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="3c365f2b247782e821ad585bd66f22f34f0b7939" translate="yes" xml:space="preserve">
          <source>Translations for Action Mailer E-Mail Subjects</source>
          <target state="translated">Action Mailer 전자 메일 주제에 대한 번역</target>
        </trans-unit>
        <trans-unit id="b434ddd996dd8df0569be77900d2b06e26fafa2f" translate="yes" xml:space="preserve">
          <source>Translations for Active Record Models</source>
          <target state="translated">활성 레코드 모델에 대한 번역</target>
        </trans-unit>
        <trans-unit id="588983786c2ebc0b3412d0182f08796e220a36a0" translate="yes" xml:space="preserve">
          <source>Transliteration is restricted to UTF-8, US-ASCII and GB18030 strings Other encodings will raise an ArgumentError.</source>
          <target state="translated">음역은 UTF-8, US-ASCII 및 GB18030 문자열로 제한됩니다. 다른 인코딩은 ArgumentError를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="6230f283c922a3fd41da712237a699a19a2d9312" translate="yes" xml:space="preserve">
          <source>Transmit a hash of data to the subscriber. The hash will automatically be wrapped in a JSON envelope with the proper channel identifier marked as the recipient.</source>
          <target state="translated">가입자에게 데이터 해시를 전송합니다. 해시는 수신자로 표시된 적절한 채널 식별자가있는 JSON 봉투에 자동으로 래핑됩니다.</target>
        </trans-unit>
        <trans-unit id="3b035d9862f906227381e58258979f84224681f6" translate="yes" xml:space="preserve">
          <source>Tries to create a new record with the same scoped attributes defined in the relation. Returns the initialized object if validation fails.</source>
          <target state="translated">관계에 정의 된 동일한 범위 속성을 사용하여 새 레코드를 작성하려고합니다. 유효성 검사에 실패하면 초기화 된 개체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="83961326424f9a7272aca3321be90cbfe594de7a" translate="yes" xml:space="preserve">
          <source>Tries to find a constant with the name specified in the argument string.</source>
          <target state="translated">인수 문자열에 지정된 이름의 상수를 찾으려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="8461928898bbc3cebe9fb6d033e453ccd41aad0e" translate="yes" xml:space="preserve">
          <source>Tries to get the description from a USAGE file one folder above the command root.</source>
          <target state="translated">명령 루트 위의 한 폴더에있는 USAGE 파일에서 설명을 가져 오려고합니다.</target>
        </trans-unit>
        <trans-unit id="fa092bf41414cbc1443e40799908b7ce0c0ddf7d" translate="yes" xml:space="preserve">
          <source>Tries to get the description from a USAGE file one folder above the source root otherwise uses a default description.</source>
          <target state="translated">USAGE 파일에서 소스 루트 위의 한 폴더에 대한 설명을 가져 오려고 시도합니다. 그렇지 않으면 기본 설명이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b6f8e660762e2cb553d1eb746cdd150b447dbe3e" translate="yes" xml:space="preserve">
          <source>Tries to retrieve the application name or simply return application.</source>
          <target state="translated">응용 프로그램 이름을 검색하거나 단순히 응용 프로그램을 리턴하려고합니다.</target>
        </trans-unit>
        <trans-unit id="7d6de1bee1185f778a232930344f458d671e7f96" translate="yes" xml:space="preserve">
          <source>Trix compared to other rich text editors</source>
          <target state="translated">다른 서식있는 텍스트 편집기와 비교 한 Trix</target>
        </trans-unit>
        <trans-unit id="0829f6055ca9f0bf1c12d891f066ae7593340e97" translate="yes" xml:space="preserve">
          <source>Trix sidesteps these inconsistencies by treating contenteditable as an I/O device: when input makes its way to the editor, Trix converts that input into an editing operation on its internal document model, then re-renders that document back into the editor. This gives Trix complete control over what happens after every keystroke, and avoids the need to use execCommand at all.</source>
          <target state="translated">Trix는 컨텐츠 편집을 I / O 장치로 처리하여 이러한 불일치를 회피합니다. 입력이 편집기로 전달 될 때 Trix는 해당 입력을 내부 문서 모델에서 편집 조작으로 변환 한 다음 해당 문서를 편집기로 다시 렌더링합니다. 이를 통해 Trix는 모든 키 입력 후 발생하는 작업을 완전히 제어 할 수 있으며 execCommand를 전혀 사용할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="0ccf79d25e402d20be8d38fefc4a68a4f34dab9f" translate="yes" xml:space="preserve">
          <source>True if an ETag is set and it isn't a weak validator (not preceded with W/)</source>
          <target state="translated">ETag가 설정되어 있고 약한 유효성 검사기가 아닌 경우 True입니다 (W /가 앞에 있지 않음).</target>
        </trans-unit>
        <trans-unit id="f999dce782ba950dccd6235342c05c3ed0f68323" translate="yes" xml:space="preserve">
          <source>True if an ETag is set and it's a weak validator (preceded with W/)</source>
          <target state="translated">ETag가 설정되어 있고 약한 유효성 검사기 인 경우 True입니다 (W /로 시작).</target>
        </trans-unit>
        <trans-unit id="42f070ece09be8113ce2504be6379a421a9a277b" translate="yes" xml:space="preserve">
          <source>True if the current request URI was generated by the given &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;options&lt;/code&gt; 의해 현재 요청 URI가 생성 된 경우 true 입니다.</target>
        </trans-unit>
        <trans-unit id="a1dda8798f23498a695ab6ea87125795e7cebf75" translate="yes" xml:space="preserve">
          <source>True if the request came from localhost, 127.0.0.1, or ::1.</source>
          <target state="translated">요청이 localhost, 127.0.0.1 또는 :: 1에서 온 경우 참입니다.</target>
        </trans-unit>
        <trans-unit id="a88ea7cfcdafcd734a5e64234ba924227207df8c" translate="yes" xml:space="preserve">
          <source>TrueClass</source>
          <target state="translated">TrueClass</target>
        </trans-unit>
        <trans-unit id="716f32804687a13f07883955aa2fe0d069a60866" translate="yes" xml:space="preserve">
          <source>Truncates &lt;code&gt;text&lt;/code&gt; to at most &lt;code&gt;bytesize&lt;/code&gt; bytes in length without breaking string encoding by splitting multibyte characters or breaking grapheme clusters (&amp;ldquo;perceptual characters&amp;rdquo;) by truncating at combining characters.</source>
          <target state="translated">멀티 바이트 문자를 분할하여 문자 인코딩을 끊지 않고 문자를 결합 할 때 잘림으로써 &lt;code&gt;bytesize&lt;/code&gt; 클러스터 ( &quot;지각 문자&quot;)를 끊지 않고도 &lt;code&gt;text&lt;/code&gt; 를 최대 바이트 단위의 바이트 길이로 자릅니다 .</target>
        </trans-unit>
        <trans-unit id="229c72321fcef0654c5eb45ca3554249950cdd39" translate="yes" xml:space="preserve">
          <source>Truncates a given &lt;code&gt;text&lt;/code&gt; after a given &lt;code&gt;:length&lt;/code&gt; if &lt;code&gt;text&lt;/code&gt; is longer than &lt;code&gt;:length&lt;/code&gt; (defaults to 30). The last characters will be replaced with the &lt;code&gt;:omission&lt;/code&gt; (defaults to &amp;ldquo;&amp;hellip;&amp;rdquo;) for a total length not exceeding &lt;code&gt;:length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt; 가 &lt;code&gt;:length&lt;/code&gt; 보다 긴 경우 지정된 &lt;code&gt;:length&lt;/code&gt; 뒤에 지정된 &lt;code&gt;text&lt;/code&gt; 자릅니다 (기본값은 30). 총 길이가 &lt;code&gt;:length&lt;/code&gt; 를 초과하지 않으면 마지막 문자는 &lt;code&gt;:omission&lt;/code&gt; (기본값은&amp;ldquo;&amp;hellip;&amp;rdquo;) 으로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="9c9efe5cb7cb8c1ee33987116b845efc87ad9149" translate="yes" xml:space="preserve">
          <source>Truncates a given &lt;code&gt;text&lt;/code&gt; after a given &lt;code&gt;length&lt;/code&gt; if &lt;code&gt;text&lt;/code&gt; is longer than &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">주어진 절단합니다 &lt;code&gt;text&lt;/code&gt; 주어진 후 &lt;code&gt;length&lt;/code&gt; 경우 &lt;code&gt;text&lt;/code&gt; 보다 긴 &lt;code&gt;length&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="85f9db5f5d445b422cbffa33c28686e2fa06af9f" translate="yes" xml:space="preserve">
          <source>Truncates a given &lt;code&gt;text&lt;/code&gt; after a given number of words (&lt;code&gt;words_count&lt;/code&gt;):</source>
          <target state="translated">주어진 단어 수 ( &lt;code&gt;words_count&lt;/code&gt; ) 다음에 주어진 &lt;code&gt;text&lt;/code&gt; 자릅니다 .</target>
        </trans-unit>
        <trans-unit id="db23ca36a73ab9b9a56a247e534891b0c32ca1e7" translate="yes" xml:space="preserve">
          <source>Truncates a table alias according to the limits of the current adapter.</source>
          <target state="translated">현재 어댑터의 한계에 따라 테이블 별명을 자릅니다.</target>
        </trans-unit>
        <trans-unit id="4b9d33ec4e682f118e01ef0c2b353843b7bf12f0" translate="yes" xml:space="preserve">
          <source>Try this now by creating a new file at &lt;code&gt;app/views/blorgh/articles/index.html.erb&lt;/code&gt; and put this content in it:</source>
          <target state="translated">&lt;code&gt;app/views/blorgh/articles/index.html.erb&lt;/code&gt; 에 새 파일을 만들어서이 내용을 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="918efeb2e8025ca4630caf3e29c7dae9e380980d" translate="yes" xml:space="preserve">
          <source>Turbolinks</source>
          <target state="translated">Turbolinks</target>
        </trans-unit>
        <trans-unit id="5a4a18da00fa2f7a7985c559eafc6f9d59f51e3a" translate="yes" xml:space="preserve">
          <source>Turbolinks attaches a click handler to all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags on the page. If your browser supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#The_pushState%28%29_method&quot;&gt;PushState&lt;/a&gt;, Turbolinks will make an Ajax request for the page, parse the response, and replace the entire &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the page with the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the response. It will then use PushState to change the URL to the correct one, preserving refresh semantics and giving you pretty URLs.</source>
          <target state="translated">Turbolinks는 클릭 핸들러를 페이지의 모든 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그에 첨부합니다 . 브라우저가 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#The_pushState%28%29_method&quot;&gt;PushState를&lt;/a&gt; 지원하는 경우 Turbolinks는 페이지에 대한 Ajax 요청을 작성하고 응답을 구문 분석하며 페이지의 전체 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 를 응답 의 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 로 바꿉니다. 그런 다음 PushState를 사용하여 URL을 올바른 URL로 변경하여 새로 고침 의미를 유지하고 예쁜 URL을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f75f7fa5b73752d097b071127bbdf41bf30d3520" translate="yes" xml:space="preserve">
          <source>Turn off request forgery protection. This is a wrapper for:</source>
          <target state="translated">위조 방지 요청을 끕니다. 이것은 다음을위한 래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="89d848b3296473ec08bb3d7a7a0ffdd09335a7d0" translate="yes" xml:space="preserve">
          <source>Turn on request forgery protection. Bear in mind that GET and HEAD requests are not checked.</source>
          <target state="translated">위조 방지 요청을 켭니다. GET 및 HEAD 요청은 확인되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a90d2006baab2ca930929e2fbd1668398a7d807" translate="yes" xml:space="preserve">
          <source>Turning Debugging Off</source>
          <target state="translated">디버깅 끄기</target>
        </trans-unit>
        <trans-unit id="721957126d5094366b6c74ad4aa234e718a87a40" translate="yes" xml:space="preserve">
          <source>Turning Digests Off</source>
          <target state="translated">다이제스트 끄기</target>
        </trans-unit>
        <trans-unit id="d3d07f364049a6501b9c51135e874de6226fe9f4" translate="yes" xml:space="preserve">
          <source>Turning the model into this:</source>
          <target state="translated">모델을 이것으로 전환 :</target>
        </trans-unit>
        <trans-unit id="b996a8c15dfca44529c2b9e029ff080374b18979" translate="yes" xml:space="preserve">
          <source>Turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.</source>
          <target state="translated">숫자를 순서대로 1, 2, 3, 4와 같이 순서를 나타내는 데 사용되는 서수 문자열로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="cf53ef01fa18bcebbfa5f5604579497339d58fc4" translate="yes" xml:space="preserve">
          <source>Turns the &lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; into a Rack-compatible array of the status, headers, and body. Allows explicit splatting:</source>
          <target state="translated">권선 &lt;a href=&quot;response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 상태, 헤더 및 본문의 랙 호환 배열한다. 명시 적 스플래 팅 허용 :</target>
        </trans-unit>
        <trans-unit id="1446fccd880899c1483d7710d37fe0d152a45920" translate="yes" xml:space="preserve">
          <source>Turns the &lt;a href=&quot;response&quot;&gt;Response&lt;/a&gt; into a Rack-compatible array of the status, headers, and body. Allows explicit splatting:</source>
          <target state="translated">권선 &lt;a href=&quot;response&quot;&gt;응답&lt;/a&gt; 상태, 헤더 및 본문의 랙 호환 배열한다. 명시 적 스플래 팅을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="5e3205860e2b0e7f5105c43a5ca3d1319a0e9bbe" translate="yes" xml:space="preserve">
          <source>Tweaks an attribute name for display to end users.</source>
          <target state="translated">최종 사용자에게 표시 할 속성 이름을 조정합니다.</target>
        </trans-unit>
        <trans-unit id="5a1b1a3e57333daa9389b56a7e6d0492592324de" translate="yes" xml:space="preserve">
          <source>Two commands allow you to open code from the debugger into an editor:</source>
          <target state="translated">두 가지 명령을 사용하면 디버거에서 편집기로 코드를 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f44bcfdfa9e186456ae325a9ebb2be5aaf91a2e2" translate="yes" xml:space="preserve">
          <source>Two controllers can share a set of partials and render them like this:</source>
          <target state="translated">두 컨트롤러는 부분 집합을 공유하고 다음과 같이 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11e102f73a14fd5e563e62a3454880aa08cd4378" translate="yes" xml:space="preserve">
          <source>Two hooks are provided, one runs when the process is forked, and one runs before the forked process is closed. These can be useful if your app uses multiple databases or perform other tasks that depend on the number of workers.</source>
          <target state="translated">두 개의 후크가 제공되는데, 하나는 프로세스가 분기 될 때 실행되고 다른 하나는 분기 된 프로세스가 종료되기 전에 실행됩니다. 앱이 여러 데이터베이스를 사용하거나 작업자 수에 따라 다른 작업을 수행하는 경우 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a74518314cc6a3e80c7c90c435dfc986a510668" translate="yes" xml:space="preserve">
          <source>Two methods are provided: &lt;code&gt;take_screenshot&lt;/code&gt; and &lt;code&gt;take_failed_screenshot&lt;/code&gt;. &lt;code&gt;take_failed_screenshot&lt;/code&gt; is automatically included in &lt;code&gt;after_teardown&lt;/code&gt; inside Rails.</source>
          <target state="translated">&lt;code&gt;take_screenshot&lt;/code&gt; 및 &lt;code&gt;take_failed_screenshot&lt;/code&gt; 의 두 가지 방법이 제공됩니다 . &lt;code&gt;take_failed_screenshot&lt;/code&gt; 이 자동으로 포함되어 &lt;code&gt;after_teardown&lt;/code&gt; 내부 레일.</target>
        </trans-unit>
        <trans-unit id="299e561c721671b6a71c538908e3aeeea1cb32a6" translate="yes" xml:space="preserve">
          <source>Two methods are provided: &lt;code&gt;take_screenshot&lt;/code&gt; and &lt;code&gt;take_failed_screenshot&lt;/code&gt;. &lt;code&gt;take_failed_screenshot&lt;/code&gt; is automatically included in &lt;code&gt;before_teardown&lt;/code&gt; inside Rails.</source>
          <target state="translated">두 가지 방법이 제공됩니다 : &lt;code&gt;take_screenshot&lt;/code&gt; 및 &lt;code&gt;take_failed_screenshot&lt;/code&gt; . &lt;code&gt;take_failed_screenshot&lt;/code&gt; 이 자동으로 포함되어 &lt;code&gt;before_teardown&lt;/code&gt; 레일 내부.</target>
        </trans-unit>
        <trans-unit id="27050ab54586a24372500c9eaa4d9adf614024f1" translate="yes" xml:space="preserve">
          <source>Two new scrubbers have also been added: &lt;code&gt;PermitScrubber&lt;/code&gt; and &lt;code&gt;TargetScrubber&lt;/code&gt;. Read the &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;gem's readme&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;PermitScrubber&lt;/code&gt; 및 &lt;code&gt;TargetScrubber&lt;/code&gt; 라는 두 개의 새로운 스크러버도 추가되었습니다 . 자세한 내용은 &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;gem의 readme&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="4a9e39c5aa23c594ae6bea7989e8327747001649" translate="yes" xml:space="preserve">
          <source>Two of these symbols are special, &lt;code&gt;:controller&lt;/code&gt; maps to the controller and &lt;code&gt;:action&lt;/code&gt; to the controller's action. A pattern can also map wildcard segments (globs) to params:</source>
          <target state="translated">이 기호 중 두 개는 특수한 &lt;code&gt;:controller&lt;/code&gt; 가 컨트롤러에 매핑되고 &lt;code&gt;:action&lt;/code&gt; 이 컨트롤러의 작업에 매핑됩니다 . 패턴은 와일드 카드 세그먼트 (글로브)를 매개 변수에 맵핑 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d951020529e23a2f164edce4c02b22dab9447c9" translate="yes" xml:space="preserve">
          <source>Two very common sources of data that are not UTF-8:</source>
          <target state="translated">UTF-8이 아닌 두 가지 매우 일반적인 데이터 소스 :</target>
        </trans-unit>
        <trans-unit id="60b4aa8f0c6f7bfd3e77f4c18be637a857d7754a" translate="yes" xml:space="preserve">
          <source>Type casts a value from user input (e.g. from a setter). This value may be a string from the form builder, or a ruby object passed to a setter. There is currently no way to differentiate between which source it came from.</source>
          <target state="translated">유형은 사용자 입력 (예 : 세터)에서 값을 캐스트합니다. 이 값은 폼 빌더의 문자열이거나 setter에 전달 된 루비 객체 일 수 있습니다. 현재 어떤 출처에서 구별 할 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="01a49e3dba1df06637b16074548914b7c8208857" translate="yes" xml:space="preserve">
          <source>Type safety with &lt;a href=&quot;../associationtypemismatch&quot;&gt;&lt;code&gt;ActiveRecord::AssociationTypeMismatch&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../associationtypemismatch&quot;&gt; &lt;code&gt;ActiveRecord::AssociationTypeMismatch&lt;/code&gt; &lt;/a&gt; 사용한 형식 안전성</target>
        </trans-unit>
        <trans-unit id="d03e84fa5cbd437c7599591870ecfbc248a0cc7e" translate="yes" xml:space="preserve">
          <source>Type safety with &lt;a href=&quot;../associationtypemismatch&quot;&gt;ActiveRecord::AssociationTypeMismatch&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../associationtypemismatch&quot;&gt;ActiveRecord :: AssociationTypeMismatch를&lt;/a&gt; 통한 형식 안전성</target>
        </trans-unit>
        <trans-unit id="70eedd6be67bed3e5278fff0d3fbc3e782940c60" translate="yes" xml:space="preserve">
          <source>Type#==</source>
          <target state="translated">Type#==</target>
        </trans-unit>
        <trans-unit id="e253330b0e19f451958206d78e4201bb54107783" translate="yes" xml:space="preserve">
          <source>Type#===</source>
          <target state="translated">Type#===</target>
        </trans-unit>
        <trans-unit id="d5151a313bbdd168fba277ae194d0a2e01572f08" translate="yes" xml:space="preserve">
          <source>Type#=~</source>
          <target state="translated">Type#=~</target>
        </trans-unit>
        <trans-unit id="7a58f8047699658c3f943af46d9311c93d3ba721" translate="yes" xml:space="preserve">
          <source>Type#all?</source>
          <target state="translated">Type#all?</target>
        </trans-unit>
        <trans-unit id="cac32e745fced6d7b3fac342ea0f2fdd6f3a6116" translate="yes" xml:space="preserve">
          <source>Type#eql?</source>
          <target state="translated">Type#eql?</target>
        </trans-unit>
        <trans-unit id="513d32ab592de9da104c543b01edd5b70971d99e" translate="yes" xml:space="preserve">
          <source>Type#hash</source>
          <target state="translated">Type#hash</target>
        </trans-unit>
        <trans-unit id="21bca60bb03cf0fdafe70c2ea69a4465e887d7db" translate="yes" xml:space="preserve">
          <source>Type#html?</source>
          <target state="translated">Type#html?</target>
        </trans-unit>
        <trans-unit id="47446a7cc32e1afcb0934f1bdbcd6d63ddde1724" translate="yes" xml:space="preserve">
          <source>Type#ref</source>
          <target state="translated">Type#ref</target>
        </trans-unit>
        <trans-unit id="f800af5354c3b0e7abb9acd147c84290df77f929" translate="yes" xml:space="preserve">
          <source>Type#string</source>
          <target state="translated">Type#string</target>
        </trans-unit>
        <trans-unit id="e131db716ae84bcdcddbb105b2589f219a22e201" translate="yes" xml:space="preserve">
          <source>Type#symbol</source>
          <target state="translated">Type#symbol</target>
        </trans-unit>
        <trans-unit id="f0170a989fe95f1fc94ce242cc662e51d0b0b27a" translate="yes" xml:space="preserve">
          <source>Type#synonyms</source>
          <target state="translated">Type#synonyms</target>
        </trans-unit>
        <trans-unit id="4e3fc6d8bf8f360412d16805036f06a6d2b58d67" translate="yes" xml:space="preserve">
          <source>Type#to_s</source>
          <target state="translated">Type#to_s</target>
        </trans-unit>
        <trans-unit id="e08bc36e3be91892e9cd4c65242ee620a68c889d" translate="yes" xml:space="preserve">
          <source>Type#to_str</source>
          <target state="translated">Type#to_str</target>
        </trans-unit>
        <trans-unit id="40251e498cade26feba7eebb0b8e48a1092b22db" translate="yes" xml:space="preserve">
          <source>Type#to_sym</source>
          <target state="translated">Type#to_sym</target>
        </trans-unit>
        <trans-unit id="6ed52ae83d714f0aedeedb5a8e281c6c6435132c" translate="yes" xml:space="preserve">
          <source>Type::Boolean</source>
          <target state="translated">Type::Boolean</target>
        </trans-unit>
        <trans-unit id="55a02481631d24d704a514ac5099b4d22142ffd3" translate="yes" xml:space="preserve">
          <source>Type::Value</source>
          <target state="translated">Type::Value</target>
        </trans-unit>
        <trans-unit id="cefe33cf5d55722ccc1aa0755e83175b11681d85" translate="yes" xml:space="preserve">
          <source>Type::Value#==</source>
          <target state="translated">Type::Value#==</target>
        </trans-unit>
        <trans-unit id="faa5ad48f972d3d4d4ca4e2cbbae4699a93d96d1" translate="yes" xml:space="preserve">
          <source>Type::Value#assert_valid_value</source>
          <target state="translated">Type::Value#assert_valid_value</target>
        </trans-unit>
        <trans-unit id="6c0aff9be5d9179659e8af1583f91360c9bcd9ea" translate="yes" xml:space="preserve">
          <source>Type::Value#cast</source>
          <target state="translated">Type::Value#cast</target>
        </trans-unit>
        <trans-unit id="7cf4282cae829eb3975d0ba7d60311fe81083e4c" translate="yes" xml:space="preserve">
          <source>Type::Value#cast_value</source>
          <target state="translated">Type::Value#cast_value</target>
        </trans-unit>
        <trans-unit id="a7e3c3db61c8d5865de3fe60f82873fae7c8d19f" translate="yes" xml:space="preserve">
          <source>Type::Value#changed?</source>
          <target state="translated">Type::Value#changed?</target>
        </trans-unit>
        <trans-unit id="19d0050c341c48152d8ec6a0605bf19b16732ef4" translate="yes" xml:space="preserve">
          <source>Type::Value#changed_in_place?</source>
          <target state="translated">Type::Value#changed_in_place?</target>
        </trans-unit>
        <trans-unit id="8c7c8315b671fff22506155d7b916ece65e458ad" translate="yes" xml:space="preserve">
          <source>Type::Value#deserialize</source>
          <target state="translated">Type::Value#deserialize</target>
        </trans-unit>
        <trans-unit id="1d45f9ccf86ef634727640e87dce569c21f5223b" translate="yes" xml:space="preserve">
          <source>Type::Value#eql?</source>
          <target state="translated">Type::Value#eql?</target>
        </trans-unit>
        <trans-unit id="b5a97a89e656338242619c663ee4c50a04b5607e" translate="yes" xml:space="preserve">
          <source>Type::Value#hash</source>
          <target state="translated">Type::Value#hash</target>
        </trans-unit>
        <trans-unit id="bb2041821d9527ec17636b705d6e6070bff77f49" translate="yes" xml:space="preserve">
          <source>Type::Value#limit</source>
          <target state="translated">Type::Value#limit</target>
        </trans-unit>
        <trans-unit id="0f8aca54515e88e6aaef8facd5ba68c965e80ad6" translate="yes" xml:space="preserve">
          <source>Type::Value#precision</source>
          <target state="translated">Type::Value#precision</target>
        </trans-unit>
        <trans-unit id="18c1701f42c2beb5a0b96a34c1e96be08b9db92b" translate="yes" xml:space="preserve">
          <source>Type::Value#scale</source>
          <target state="translated">Type::Value#scale</target>
        </trans-unit>
        <trans-unit id="3974fa80caaa3040083289520f7c71d78309a104" translate="yes" xml:space="preserve">
          <source>Type::Value#serialize</source>
          <target state="translated">Type::Value#serialize</target>
        </trans-unit>
        <trans-unit id="fc3d927851dafa40adf395bbfc372cadaaf14511" translate="yes" xml:space="preserve">
          <source>Type::Value::new</source>
          <target state="translated">Type::Value::new</target>
        </trans-unit>
        <trans-unit id="3577c9f58f179a7b52913fff7af3a82b48c1856a" translate="yes" xml:space="preserve">
          <source>Type::lookup</source>
          <target state="translated">Type::lookup</target>
        </trans-unit>
        <trans-unit id="6f6ef7e26ed165521133a28497bb7c7a4447d35d" translate="yes" xml:space="preserve">
          <source>Type::lookup_by_extension</source>
          <target state="translated">Type::lookup_by_extension</target>
        </trans-unit>
        <trans-unit id="7fabc23c2c0529c94ca05853b970db98539529f8" translate="yes" xml:space="preserve">
          <source>Type::new</source>
          <target state="translated">Type::new</target>
        </trans-unit>
        <trans-unit id="d545ac43d0a1752f254503fc1d584aefc5003c79" translate="yes" xml:space="preserve">
          <source>Type::parse</source>
          <target state="translated">Type::parse</target>
        </trans-unit>
        <trans-unit id="61605c38ebf720cabfe9107cb208c7baada914ef" translate="yes" xml:space="preserve">
          <source>Type::parse_data_with_trailing_star</source>
          <target state="translated">Type::parse_data_with_trailing_star</target>
        </trans-unit>
        <trans-unit id="d66593b5c5c35064b800b52c1ff715082ce19097" translate="yes" xml:space="preserve">
          <source>Type::parse_trailing_star</source>
          <target state="translated">Type::parse_trailing_star</target>
        </trans-unit>
        <trans-unit id="05513a01e5697e5651dc6d679724a5964bd6cac3" translate="yes" xml:space="preserve">
          <source>Type::register</source>
          <target state="translated">Type::register</target>
        </trans-unit>
        <trans-unit id="7987f11e625d678759427fa50fdbff80a8c9765e" translate="yes" xml:space="preserve">
          <source>Type::register_alias</source>
          <target state="translated">Type::register_alias</target>
        </trans-unit>
        <trans-unit id="5c96ed588fc02ab74c08dd741eba090b2e184c1e" translate="yes" xml:space="preserve">
          <source>Type::register_callback</source>
          <target state="translated">Type::register_callback</target>
        </trans-unit>
        <trans-unit id="2b347d24136f70387e62deaf0bac4399892d3fef" translate="yes" xml:space="preserve">
          <source>Type::unregister</source>
          <target state="translated">Type::unregister</target>
        </trans-unit>
        <trans-unit id="1feacabb18c28e13a3223b47ffab3264d9a9e217" translate="yes" xml:space="preserve">
          <source>Typecasted bind parameters</source>
          <target state="translated">타입 캐스트 바인드 매개 변수</target>
        </trans-unit>
        <trans-unit id="53cd1974e6d6c2e75c56c16edc2e858959717c41" translate="yes" xml:space="preserve">
          <source>Types are autoloaded as needed. For example, if &lt;code&gt;Polygon.first&lt;/code&gt; is a rectangle and &lt;code&gt;Rectangle&lt;/code&gt; has not yet been loaded, Active Record autoloads it and the record is correctly instantiated.</source>
          <target state="translated">필요에 따라 유형이 자동로드됩니다. 예를 들어 &lt;code&gt;Polygon.first&lt;/code&gt; 가 사각형이고 &lt;code&gt;Rectangle&lt;/code&gt; 이 아직로드되지 않은 경우 Active Record는 자동으로로드하고 레코드가 올바르게 인스턴스화됩니다.</target>
        </trans-unit>
        <trans-unit id="3aa5d9093670a17ac027519a74e11368f6b450cf" translate="yes" xml:space="preserve">
          <source>Types of Schema Dumps</source>
          <target state="translated">스키마 덤프의 유형</target>
        </trans-unit>
        <trans-unit id="5f1c2301fbfd8c3a40fe45fc272c4c99db2a2ffb" translate="yes" xml:space="preserve">
          <source>Types of callbacks</source>
          <target state="translated">콜백 유형</target>
        </trans-unit>
        <trans-unit id="64eae8a8ff4eede77761ede521e3e8267797dda0" translate="yes" xml:space="preserve">
          <source>Types of layouts</source>
          <target state="translated">레이아웃의 종류</target>
        </trans-unit>
        <trans-unit id="306957293a5e5f5c4043ed13afd00c6ca6dd9828" translate="yes" xml:space="preserve">
          <source>Typically, a form designed to create or update a resource reflects the identity of the resource in several ways: (i) the URL that the form is sent to (the form element's &lt;code&gt;action&lt;/code&gt; attribute) should result in a request being routed to the appropriate controller action (with the appropriate &lt;code&gt;:id&lt;/code&gt; parameter in the case of an existing resource), (ii) input fields should be named in such a way that in the controller their values appear in the appropriate places within the &lt;code&gt;params&lt;/code&gt; hash, and (iii) for an existing record, when the form is initially displayed, input fields corresponding to attributes of the resource should show the current values of those attributes.</source>
          <target state="translated">일반적으로 자원을 작성하거나 업데이트하도록 설계된 양식은 여러 가지 방법으로 자원의 ID를 반영합니다. (i) 양식이 전송되는 URL (양식 요소의 &lt;code&gt;action&lt;/code&gt; 속성)은 요청이 적절한 컨트롤러로 라우팅되어야합니다 조치 ( 기존 자원의 경우 적절한 &lt;code&gt;:id&lt;/code&gt; 매개 변수 사용), (ii) 입력 필드는 컨트롤러에서 해당 값이 &lt;code&gt;params&lt;/code&gt; 해시 내의 적절한 위치에 표시되도록 이름을 지정해야합니다. 양식이 처음 표시 될 때 기존 레코드는 자원 속성에 해당하는 입력 필드에 해당 속성의 현재 값을 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="59f8e06fa2fd60157cbb80f62547ee0cd08a6ea1" translate="yes" xml:space="preserve">
          <source>Typically, you will instantiate a new session using IntegrationTest#open_session, rather than instantiating &lt;a href=&quot;session&quot;&gt;&lt;code&gt;Integration::Session&lt;/code&gt;&lt;/a&gt; directly.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;session&quot;&gt; &lt;code&gt;Integration::Session&lt;/code&gt; &lt;/a&gt; 직접 인스턴스화하는 대신 IntegrationTest # open_session을 사용하여 새 세션을 인스턴스화 합니다.</target>
        </trans-unit>
        <trans-unit id="d3d00e0d2dda9ad7a33716397137a8bf6cba04ed" translate="yes" xml:space="preserve">
          <source>Typically, you will instantiate a new session using IntegrationTest#open_session, rather than instantiating &lt;a href=&quot;session&quot;&gt;Integration::Session&lt;/a&gt; directly.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;session&quot;&gt;Integration :: Session을&lt;/a&gt; 직접 인스턴스화하지 않고 IntegrationTest # open_session을 사용하여 새 세션을 인스턴스화 합니다.</target>
        </trans-unit>
        <trans-unit id="a22641b9fc9c9910a6cdbff4d4c69eb3d13192f7" translate="yes" xml:space="preserve">
          <source>UNICODE_VERSION</source>
          <target state="translated">UNICODE_VERSION</target>
        </trans-unit>
        <trans-unit id="b296e0d65d77d85f051e6120bc2bc5c312d75daf" translate="yes" xml:space="preserve">
          <source>UNIQUE_VIOLATION</source>
          <target state="translated">UNIQUE_VIOLATION</target>
        </trans-unit>
        <trans-unit id="ecf6935551740f32426d106a5d0859eb03b85cea" translate="yes" xml:space="preserve">
          <source>UNIVERSAL_OPTIONS</source>
          <target state="translated">UNIVERSAL_OPTIONS</target>
        </trans-unit>
        <trans-unit id="2765f56ff22ae032d9156af82bdb05fbcf2fe0b5" translate="yes" xml:space="preserve">
          <source>URI_REGEXP</source>
          <target state="translated">URI_REGEXP</target>
        </trans-unit>
        <trans-unit id="d8b1d74794e482364b89230c6c1a7a3ed552c390" translate="yes" xml:space="preserve">
          <source>URL Generation: The flip side of routing is URL generation. A good API based on HTTP includes URLs (see &lt;a href=&quot;https://developer.github.com/v3/gists/&quot;&gt;the GitHub Gist API&lt;/a&gt; for an example).</source>
          <target state="translated">URL 생성 : 라우팅의 반대 측면은 URL 생성입니다. HTTP 기반의 좋은 API는 URL을 포함합니다 ( 예 &lt;a href=&quot;https://developer.github.com/v3/gists/&quot;&gt;는 GitHub Gist API&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f9ea87566fc3dd369b6e1388c9445e62c4708fcb" translate="yes" xml:space="preserve">
          <source>URL Generation: The flip side of routing is URL generation. A good API based on HTTP includes URLs (see &lt;a href=&quot;https://docs.github.com/en/rest/reference/gists&quot;&gt;the GitHub Gist API&lt;/a&gt; for an example).</source>
          <target state="translated">URL 생성 : 라우팅의이면은 URL 생성입니다. HTTP 기반의 좋은 API에는 URL이 포함됩니다 ( 예제 &lt;a href=&quot;https://docs.github.com/en/rest/reference/gists&quot;&gt;는 GitHub Gist API&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="276a71602ff7a982b823d0e2189710373a95484b" translate="yes" xml:space="preserve">
          <source>URL generation for named routes</source>
          <target state="translated">명명 된 경로에 대한 URL 생성</target>
        </trans-unit>
        <trans-unit id="3b7ebf9fda9ab546056939feaf89320d2f22f9a0" translate="yes" xml:space="preserve">
          <source>URL generation from parameters</source>
          <target state="translated">매개 변수에서 URL 생성</target>
        </trans-unit>
        <trans-unit id="ba70a88b8b1740761437946712f930da44c42dbf" translate="yes" xml:space="preserve">
          <source>URL paths are matched with static files according to expected conventions: &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;.html, &lt;code&gt;path&lt;/code&gt;/index.html.</source>
          <target state="translated">URL 경로는 예상되는 규칙 ( &lt;code&gt;path&lt;/code&gt; , &lt;code&gt;path&lt;/code&gt; .html, &lt;code&gt;path&lt;/code&gt; /index.html) 에 따라 정적 파일과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="bd4e02965b295f6181cb637b78ec0a6f5258e6f5" translate="yes" xml:space="preserve">
          <source>URL to redirect to</source>
          <target state="translated">리디렉션 할 URL</target>
        </trans-unit>
        <trans-unit id="4d3912a8c2b4f9ccd4590912a211c1fb37602b02" translate="yes" xml:space="preserve">
          <source>URL_OPTIONS</source>
          <target state="translated">URL_OPTIONS</target>
        </trans-unit>
        <trans-unit id="3c3c17d0516c69d6695ab1fcc55b7460ff094916" translate="yes" xml:space="preserve">
          <source>URLs can be generated in mailer views using &lt;code&gt;url_for&lt;/code&gt; or named routes. Unlike controllers from Action Pack, the mailer instance doesn't have any context about the incoming request, so you'll need to provide all of the details needed to generate a URL.</source>
          <target state="translated">&lt;code&gt;url_for&lt;/code&gt; 또는 명명 된 경로를 사용하여 메일러보기에서 URL을 생성 할 수 있습니다 . Action Pack의 컨트롤러와 달리 메일러 인스턴스에는 수신 요청에 대한 컨텍스트가 없으므로 URL을 생성하는 데 필요한 모든 세부 사항을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="304c11c5b012328b4cbe99b4a1ca85729b62dd52" translate="yes" xml:space="preserve">
          <source>USE_AUTHENTICATED_COOKIE_ENCRYPTION</source>
          <target state="translated">USE_AUTHENTICATED_COOKIE_ENCRYPTION</target>
        </trans-unit>
        <trans-unit id="3a6c69dd5faf1bd4fbbe76b7551d2d73518abc1a" translate="yes" xml:space="preserve">
          <source>USE_COOKIES_WITH_METADATA</source>
          <target state="translated">USE_COOKIES_WITH_METADATA</target>
        </trans-unit>
        <trans-unit id="21bf75a5255af008f6315cb6aca4bb3bdccee521" translate="yes" xml:space="preserve">
          <source>UUID</source>
          <target state="translated">UUID</target>
        </trans-unit>
        <trans-unit id="58a48be00fb22fa73f24a8d12dad3179d27be081" translate="yes" xml:space="preserve">
          <source>UUID Primary Keys</source>
          <target state="translated">UUID 기본 키</target>
        </trans-unit>
        <trans-unit id="021e81d8648661e31cc6e51e1189b6f09047d4d5" translate="yes" xml:space="preserve">
          <source>UUID::uuid_from_hash</source>
          <target state="translated">UUID::uuid_from_hash</target>
        </trans-unit>
        <trans-unit id="b94798dd5e5504b3623f44686fd5bf2ac50ced13" translate="yes" xml:space="preserve">
          <source>UUID::uuid_v3</source>
          <target state="translated">UUID::uuid_v3</target>
        </trans-unit>
        <trans-unit id="c782a4bef4c1f7a1ea4624387e03a6e7c7f13c37" translate="yes" xml:space="preserve">
          <source>UUID::uuid_v4</source>
          <target state="translated">UUID::uuid_v4</target>
        </trans-unit>
        <trans-unit id="37b07911c467d4abe28dca941f852b09fa148875" translate="yes" xml:space="preserve">
          <source>UUID::uuid_v5</source>
          <target state="translated">UUID::uuid_v5</target>
        </trans-unit>
        <trans-unit id="2000fecb3a1caaf67afb388ca9c64a08f82d78ff" translate="yes" xml:space="preserve">
          <source>Unbound methods are not duplicable:</source>
          <target state="translated">언 바운드 메소드는 복제 할 수 없습니다 :</target>
        </trans-unit>
        <trans-unit id="ea18adfa28d13e37ee806750a0df3ce347f3cff9" translate="yes" xml:space="preserve">
          <source>UnboundMethod</source>
          <target state="translated">UnboundMethod</target>
        </trans-unit>
        <trans-unit id="d5e36a93eb4d9ef9d780b4e4e3eb287f9e7ddcbe" translate="yes" xml:space="preserve">
          <source>Under certain circumstances this would present the malicious HTML to the victim. However, this only seems to work with Keep-Alive connections (and many browsers are using one-time connections). But you can't rely on this. &lt;em&gt;In any case this is a serious bug, and you should update your Rails to version 2.0.5 or 2.1.2 to eliminate Header Injection (and thus response splitting) risks.&lt;/em&gt;</source>
          <target state="translated">특정 상황에서 이는 피해자에게 악의적 인 HTML을 제공합니다. 그러나 이것은 Keep-Alive 연결에서만 작동하는 것 같습니다 (그리고 많은 브라우저가 일회성 연결을 사용하고 있습니다). 그러나 당신은 이것에 의존 할 수 없습니다. &lt;em&gt;어쨌든 이것은 심각한 버그이며, 헤더 삽입 (및 응답 분할) 위험을 제거하려면 Rails를 버전 2.0.5 또는 2.1.2로 업데이트해야합니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a0ad6d65b92b9f3641e86d1bd8b6d7c694ca0bc2" translate="yes" xml:space="preserve">
          <source>Under normal circumstances the default &lt;code&gt;config.assets.digest&lt;/code&gt; option should not be changed. If there are no digests in the filenames, and far-future headers are set, remote clients will never know to refetch the files when their content changes.</source>
          <target state="translated">정상적인 상황에서는 기본 &lt;code&gt;config.assets.digest&lt;/code&gt; 옵션을 변경하지 않아야합니다. 파일 이름에 다이제스트가없고 원거리 미래 헤더가 설정된 경우 원격 클라이언트는 내용이 변경 될 때 파일을 다시 가져 오는 것을 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6b0071c47dd49706f55d39b9d054faf86c5ad6c9" translate="yes" xml:space="preserve">
          <source>Under the covers, this relationship is implemented as a &lt;code&gt;has_many&lt;/code&gt; association to a &lt;a href=&quot;../attachment&quot;&gt;&lt;code&gt;ActiveStorage::Attachment&lt;/code&gt;&lt;/a&gt; record and a &lt;code&gt;has_many-through&lt;/code&gt; association to a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;ActiveStorage::Blob&lt;/code&gt;&lt;/a&gt; record. These associations are available as &lt;code&gt;photos_attachments&lt;/code&gt; and &lt;code&gt;photos_blobs&lt;/code&gt;. But you shouldn't need to work with these associations directly in most circumstances.</source>
          <target state="translated">내부적으로,이 관계는로 구현 &lt;code&gt;has_many&lt;/code&gt; 의 A와 관련 &lt;a href=&quot;../attachment&quot;&gt; &lt;code&gt;ActiveStorage::Attachment&lt;/code&gt; &lt;/a&gt; 기록과 &lt;code&gt;has_many-through&lt;/code&gt; 연관 관계에 &lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;ActiveStorage::Blob&lt;/code&gt; &lt;/a&gt; 기록. 이러한 연결은 &lt;code&gt;photos_attachments&lt;/code&gt; 및 &lt;code&gt;photos_blobs&lt;/code&gt; 로 사용할 수 있습니다 . 그러나 대부분의 상황에서 이러한 연결과 직접 작업 할 필요는 없습니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="979c53e0a63d64498379e54d5ec41239a5d62d51" translate="yes" xml:space="preserve">
          <source>Under the covers, this relationship is implemented as a &lt;code&gt;has_many&lt;/code&gt; association to a &lt;a href=&quot;../attachment&quot;&gt;ActiveStorage::Attachment&lt;/a&gt; record and a &lt;code&gt;has_many-through&lt;/code&gt; association to a &lt;a href=&quot;../blob&quot;&gt;ActiveStorage::Blob&lt;/a&gt; record. These associations are available as &lt;code&gt;photos_attachments&lt;/code&gt; and &lt;code&gt;photos_blobs&lt;/code&gt;. But you shouldn't need to work with these associations directly in most circumstances.</source>
          <target state="translated">내부적으로,이 관계는로 구현 &lt;code&gt;has_many&lt;/code&gt; 의 A와 관련 &lt;a href=&quot;../attachment&quot;&gt;ActiveStorage : 첨부 파일&lt;/a&gt; 기록과 &lt;code&gt;has_many-through&lt;/code&gt; 연관 관계에 &lt;a href=&quot;../blob&quot;&gt;ActiveStorage :: 물방울의&lt;/a&gt; 기록. 이러한 연관은 &lt;code&gt;photos_attachments&lt;/code&gt; 및 &lt;code&gt;photos_blobs&lt;/code&gt; 로 사용 가능 합니다. 그러나 대부분의 상황에서 이러한 협회와 직접 협력 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="a33368c3028cf6b06f997aa9773ed85b062f1a36" translate="yes" xml:space="preserve">
          <source>Under the covers, this relationship is implemented as a &lt;code&gt;has_one&lt;/code&gt; association to a &lt;a href=&quot;../attachment&quot;&gt;&lt;code&gt;ActiveStorage::Attachment&lt;/code&gt;&lt;/a&gt; record and a &lt;code&gt;has_one-through&lt;/code&gt; association to a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;ActiveStorage::Blob&lt;/code&gt;&lt;/a&gt; record. These associations are available as &lt;code&gt;avatar_attachment&lt;/code&gt; and &lt;code&gt;avatar_blob&lt;/code&gt;. But you shouldn't need to work with these associations directly in most circumstances.</source>
          <target state="translated">내부적으로,이 관계는로 구현 &lt;code&gt;has_one&lt;/code&gt; 의 A와 관련 &lt;a href=&quot;../attachment&quot;&gt; &lt;code&gt;ActiveStorage::Attachment&lt;/code&gt; &lt;/a&gt; 기록과 &lt;code&gt;has_one-through&lt;/code&gt; 연관 관계에 &lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;ActiveStorage::Blob&lt;/code&gt; &lt;/a&gt; 기록. 이러한 연결은 &lt;code&gt;avatar_attachment&lt;/code&gt; 및 &lt;code&gt;avatar_blob&lt;/code&gt; 로 사용할 수 있습니다 . 그러나 대부분의 상황에서 이러한 연결과 직접 작업 할 필요는 없습니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="d0dfa8881b0933f23273353d3fc54d3f993619d5" translate="yes" xml:space="preserve">
          <source>Under the covers, this relationship is implemented as a &lt;code&gt;has_one&lt;/code&gt; association to a &lt;a href=&quot;../attachment&quot;&gt;ActiveStorage::Attachment&lt;/a&gt; record and a &lt;code&gt;has_one-through&lt;/code&gt; association to a &lt;a href=&quot;../blob&quot;&gt;ActiveStorage::Blob&lt;/a&gt; record. These associations are available as &lt;code&gt;avatar_attachment&lt;/code&gt; and &lt;code&gt;avatar_blob&lt;/code&gt;. But you shouldn't need to work with these associations directly in most circumstances.</source>
          <target state="translated">내부적으로,이 관계는로 구현 &lt;code&gt;has_one&lt;/code&gt; 의 A와 관련 &lt;a href=&quot;../attachment&quot;&gt;ActiveStorage : 첨부 파일&lt;/a&gt; 기록과 &lt;code&gt;has_one-through&lt;/code&gt; 연관 관계에 &lt;a href=&quot;../blob&quot;&gt;ActiveStorage :: 물방울의&lt;/a&gt; 기록. 이러한 연관은 &lt;code&gt;avatar_attachment&lt;/code&gt; 및 &lt;code&gt;avatar_blob&lt;/code&gt; 로 사용 가능 합니다. 그러나 대부분의 상황에서 이러한 협회와 직접 협력 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="ed9a8b07f0bafb8d39cb51d19e3da966ffad34ce" translate="yes" xml:space="preserve">
          <source>Underscore vs Camelize</source>
          <target state="translated">밑줄 vs Camelize</target>
        </trans-unit>
        <trans-unit id="a5ea37943946c1a2d58797561f1bc7d382ebb6f7" translate="yes" xml:space="preserve">
          <source>Understanding &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 이해</target>
        </trans-unit>
        <trans-unit id="a8db3a00859fbdd1fb0d7758bc731ceddbcecb24" translate="yes" xml:space="preserve">
          <source>Understanding Method Chaining</source>
          <target state="translated">메서드 체이닝 이해</target>
        </trans-unit>
        <trans-unit id="5796618103c03fb0bd0dae7ab9cb0306de669eab" translate="yes" xml:space="preserve">
          <source>Understanding Middlewares</source>
          <target state="translated">미들웨어 이해</target>
        </trans-unit>
        <trans-unit id="83ad114002c4850a875263e2823d8278257f5782" translate="yes" xml:space="preserve">
          <source>Understanding Parameter Naming Conventions</source>
          <target state="translated">매개 변수 명명 규칙 이해</target>
        </trans-unit>
        <trans-unit id="f88769326773fa7aeb7457b71fc4f0a127d26859" translate="yes" xml:space="preserve">
          <source>Understanding The Method Chaining</source>
          <target state="translated">메소드 체인 이해</target>
        </trans-unit>
        <trans-unit id="563be52e5a36ed2f3d1c023ae0efdeefd5cdd59b" translate="yes" xml:space="preserve">
          <source>Unescapes bytea output from a database to the binary string it represents. NOTE: This is NOT an inverse of &lt;a href=&quot;quoting#method-i-escape_bytea&quot;&gt;#escape_bytea&lt;/a&gt;! This is only to be used on escaped binary output from database drive.</source>
          <target state="translated">bytea 출력을 데이터베이스에서 이진 문자열로 이스케이프 처리합니다. 참고 : 이것은 &lt;a href=&quot;quoting#method-i-escape_bytea&quot;&gt;#escape_bytea&lt;/a&gt; 의 반대가 아닙니다 ! 이것은 데이터베이스 드라이브에서 이스케이프 된 이진 출력에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="802ab2d344fdb9c3ad7b2d7b9b8e72fada26cdd4" translate="yes" xml:space="preserve">
          <source>Unescapes bytea output from a database to the binary string it represents. NOTE: This is NOT an inverse of &lt;a href=&quot;quoting#method-i-escape_bytea&quot;&gt;&lt;code&gt;escape_bytea&lt;/code&gt;&lt;/a&gt;! This is only to be used on escaped binary output from database drive.</source>
          <target state="translated">데이터베이스의 bytea 출력을 그것이 나타내는 2 진 문자열로 이스케이프 해제합니다. 참고 : 이것은 &lt;a href=&quot;quoting#method-i-escape_bytea&quot;&gt; &lt;code&gt;escape_bytea&lt;/code&gt; &lt;/a&gt; 의 역이 아닙니다 ! 이것은 데이터베이스 드라이브에서 이스케이프 된 바이너리 출력에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7d1a730dd8928742f355234b8f0cbd8dc71e967b" translate="yes" xml:space="preserve">
          <source>Unfortunately Rails autoloading does not know the nesting in the spot where the constant was missing and so it is not able to act as Ruby would. In particular, &lt;code&gt;Admin::User&lt;/code&gt; will get autoloaded in either case.</source>
          <target state="translated">불행히도 Rails 자동 로딩은 상수가 누락 된 지점에서 중첩을 알지 못하므로 Ruby처럼 작동 할 수 없습니다. 특히 &lt;code&gt;Admin::User&lt;/code&gt; 는 두 경우 모두 자동로드됩니다.</target>
        </trans-unit>
        <trans-unit id="ddd02f51727327e3f5b4ba274b09305dc204d056" translate="yes" xml:space="preserve">
          <source>Unfortunately that workaround does not work when the check box goes within an array-like parameter, as in</source>
          <target state="translated">불행히도 확인란이 배열과 같은 매개 변수 내에있을 때 해당 해결 방법이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fa4c1858289a6a0201b436aab1c15577cd0ab1d5" translate="yes" xml:space="preserve">
          <source>Unfortunately this won't work, since when &lt;code&gt;Foo&lt;/code&gt; is included, its &lt;code&gt;base&lt;/code&gt; is the &lt;code&gt;Bar&lt;/code&gt; module, not the &lt;code&gt;Host&lt;/code&gt; class. With &lt;code&gt;ActiveSupport::Concern&lt;/code&gt;, module dependencies are properly resolved:</source>
          <target state="translated">불행히도 &lt;code&gt;Foo&lt;/code&gt; 가 포함되면 &lt;code&gt;base&lt;/code&gt; 은 &lt;code&gt;Host&lt;/code&gt; 클래스가 아닌 &lt;code&gt;Bar&lt;/code&gt; 모듈 이기 때문에 작동 하지 않습니다 . 함께 &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; , 모듈 의존성이 제대로 해결 :</target>
        </trans-unit>
        <trans-unit id="ce897422c4959c38ae1b6bb2581a1785a6a133cf" translate="yes" xml:space="preserve">
          <source>Unicode Character Routes</source>
          <target state="translated">유니 코드 문자 경로</target>
        </trans-unit>
        <trans-unit id="8a2ae1bb3af7b7bdfd514223e02bbd22a88dc76d" translate="yes" xml:space="preserve">
          <source>Unicode character routes</source>
          <target state="translated">유니 코드 문자 경로</target>
        </trans-unit>
        <trans-unit id="6fe0c87681010662cf422daf78146c3b0400e1a2" translate="yes" xml:space="preserve">
          <source>Unicode whitespace is supported:</source>
          <target state="translated">유니 코드 공백이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="c04888dcb0aeb3a9fb64735c366d3fcba247df66" translate="yes" xml:space="preserve">
          <source>Unicorn</source>
          <target state="translated">Unicorn</target>
        </trans-unit>
        <trans-unit id="dab32b9631850cb2c080a8c1c70ab95d976d2be6" translate="yes" xml:space="preserve">
          <source>Unicorn supports streaming but it needs to be configured. For this, you need to create a config file as follow:</source>
          <target state="translated">유니콘은 스트리밍을 지원하지만 구성해야합니다. 이를 위해 다음과 같이 구성 파일을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="bf8719e9da213bcad0a2fe349d1f8f9f739c1793" translate="yes" xml:space="preserve">
          <source>Unique indexes can be identified by columns or name:</source>
          <target state="translated">고유 색인은 열 또는 이름으로 식별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="438d23452047f4defac8e18aecae37372fcea335" translate="yes" xml:space="preserve">
          <source>Unit Testing</source>
          <target state="translated">단위 테스트</target>
        </trans-unit>
        <trans-unit id="8edb8bca8eec90529e5cf5ed945cc70ec2e5f3c6" translate="yes" xml:space="preserve">
          <source>Unit test Action Cable connections.</source>
          <target state="translated">단위 테스트 조치 케이블 연결.</target>
        </trans-unit>
        <trans-unit id="280d5622079a1771bd9e5368f811959d15abfb04" translate="yes" xml:space="preserve">
          <source>Unit testing allows us to test the attributes of the email while functional and system testing allows us to test whether user interactions appropriately trigger the email to be delivered. For example, you can check that the invite friend operation is sending an email appropriately:</source>
          <target state="translated">단위 테스트를 통해 전자 메일의 속성을 테스트 할 수 있고 기능 및 시스템 테스트를 통해 사용자 상호 작용으로 전자 메일이 제대로 전달되는지 테스트 할 수 있습니다. 예를 들어, 친구 초대 작업이 적절하게 이메일을 보내는 지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ed33368b6004fce86600d3d398ff6212dd36618" translate="yes" xml:space="preserve">
          <source>Unit tests are written as follows:</source>
          <target state="translated">단위 테스트는 다음과 같이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="d7939729166ceaf4af03afc6e3d4c365637c2ae6" translate="yes" xml:space="preserve">
          <source>Unit tests, fixtures, and other test apparatus. These are covered in &lt;a href=&quot;testing&quot;&gt;Testing Rails Applications&lt;/a&gt;.</source>
          <target state="translated">단위 테스트, 고정물 및 기타 테스트 장치 이것들은 &lt;a href=&quot;testing&quot;&gt;Rails 어플리케이션 테스팅&lt;/a&gt; 에서 다룹니다 .</target>
        </trans-unit>
        <trans-unit id="b0f6cd025d55ddd1816778abdc9f3fabb48c6ccc" translate="yes" xml:space="preserve">
          <source>UnknownAttributeError</source>
          <target state="translated">UnknownAttributeError</target>
        </trans-unit>
        <trans-unit id="0318f9423a678f7c0cad6dd3df9e56ab292e1f1f" translate="yes" xml:space="preserve">
          <source>Unless an error is raised, returns true.</source>
          <target state="translated">오류가 발생하지 않으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="142a90e8a09e23fa3511b7df0b410e75b492dca5" translate="yes" xml:space="preserve">
          <source>Unless overridden, your response returned from this render option will be &lt;code&gt;text/plain&lt;/code&gt;, as that is the default content type of Action Dispatch response.</source>
          <target state="translated">재정의되지 않는 한이 렌더링 옵션에서 반환 된 응답 은 기본 컨텐츠 유형 인 Action Dispatch 응답이므로 &lt;code&gt;text/plain&lt;/code&gt; 이됩니다.</target>
        </trans-unit>
        <trans-unit id="a2c726244b307ec087748252b6a12d01c65580af" translate="yes" xml:space="preserve">
          <source>Unless you have disabled the Asset Pipeline, &lt;a href=&quot;https://github.com/rails/rails/tree/master/actionview/app/assets/javascripts&quot;&gt;rails-ujs&lt;/a&gt; provides the JavaScript half, and the regular Ruby view helpers add appropriate tags to your DOM.</source>
          <target state="translated">Asset Pipeline을 비활성화하지 않은 경우, &lt;a href=&quot;https://github.com/rails/rails/tree/master/actionview/app/assets/javascripts&quot;&gt;rails-ujs&lt;/a&gt; 는 JavaScript 절반을 제공하며 일반 Ruby보기 도우미는 DOM에 적절한 태그를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="ed365c426fe41d71c5df36a2e6daf83cc2647233" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;Shirt.find(...)&lt;/code&gt;, however, the object returned by &lt;code&gt;Shirt.red&lt;/code&gt; is not an &lt;a href=&quot;../../../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; but an &lt;a href=&quot;../../relation&quot;&gt;&lt;code&gt;ActiveRecord::Relation&lt;/code&gt;&lt;/a&gt;, which is composable with other scopes; it resembles the association object constructed by a &lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; declaration. For instance, you can invoke &lt;code&gt;Shirt.red.first&lt;/code&gt;, &lt;code&gt;Shirt.red.count&lt;/code&gt;, &lt;code&gt;Shirt.red.where(size: 'small')&lt;/code&gt;. Also, just as with the association objects, named scopes act like an &lt;a href=&quot;../../../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, implementing &lt;a href=&quot;../../../enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;Shirt.red.each(&amp;amp;block)&lt;/code&gt;, &lt;code&gt;Shirt.red.first&lt;/code&gt;, and &lt;code&gt;Shirt.red.inject(memo, &amp;amp;block)&lt;/code&gt; all behave as if &lt;code&gt;Shirt.red&lt;/code&gt; really was an array.</source>
          <target state="translated">달리 &lt;code&gt;Shirt.find(...)&lt;/code&gt; 그러나,에 의해 반환되는 객체 &lt;code&gt;Shirt.red&lt;/code&gt; 은 아닌 &lt;a href=&quot;../../../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 하지만, &lt;a href=&quot;../../relation&quot;&gt; &lt;code&gt;ActiveRecord::Relation&lt;/code&gt; &lt;/a&gt; 다른 범위와 작성 가능하다; &lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; 선언으로 구성된 연관 객체와 유사합니다 . 예를 들어 &lt;code&gt;Shirt.red.first&lt;/code&gt; , &lt;code&gt;Shirt.red.count&lt;/code&gt; , &lt;code&gt;Shirt.red.where(size: 'small')&lt;/code&gt; 호출 할 수 있습니다 . 또한 연관 객체와 마찬가지로 명명 된 범위는 &lt;a href=&quot;../../../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 처럼 작동하여 &lt;a href=&quot;../../../enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; 을&lt;/a&gt; 구현합니다 . &lt;code&gt;Shirt.red.each(&amp;amp;block)&lt;/code&gt; , &lt;code&gt;Shirt.red.first&lt;/code&gt; 및 &lt;code&gt;Shirt.red.inject(memo, &amp;amp;block)&lt;/code&gt; 모두 &lt;code&gt;Shirt.red&lt;/code&gt; 가 실제로 배열 인 것처럼 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="225f2ea6c736a01787a8ead588fa3db8dadd49a5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;Shirt.find(...)&lt;/code&gt;, however, the object returned by &lt;code&gt;Shirt.red&lt;/code&gt; is not an &lt;a href=&quot;../../../array&quot;&gt;Array&lt;/a&gt; but an &lt;a href=&quot;../../relation&quot;&gt;ActiveRecord::Relation&lt;/a&gt;, which is composable with other scopes; it resembles the association object constructed by a &lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; declaration. For instance, you can invoke &lt;code&gt;Shirt.red.first&lt;/code&gt;, &lt;code&gt;Shirt.red.count&lt;/code&gt;, &lt;code&gt;Shirt.red.where(size:
'small')&lt;/code&gt;. Also, just as with the association objects, named scopes act like an &lt;a href=&quot;../../../array&quot;&gt;Array&lt;/a&gt;, implementing &lt;a href=&quot;../../../enumerable&quot;&gt;Enumerable&lt;/a&gt;; &lt;code&gt;Shirt.red.each(&amp;amp;block)&lt;/code&gt;, &lt;code&gt;Shirt.red.first&lt;/code&gt;, and &lt;code&gt;Shirt.red.inject(memo, &amp;amp;block)&lt;/code&gt; all behave as if &lt;code&gt;Shirt.red&lt;/code&gt; really was an array.</source>
          <target state="translated">달리 &lt;code&gt;Shirt.find(...)&lt;/code&gt; 그러나,에 의해 반환되는 객체 &lt;code&gt;Shirt.red&lt;/code&gt; 은 아닌 &lt;a href=&quot;../../../array&quot;&gt;배열&lt;/a&gt; 하지만, &lt;a href=&quot;../../relation&quot;&gt;액티브 :: 관계&lt;/a&gt; 다른 범위와 작성 가능하다; 그것은 &lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; 선언에 의해 구성된 연관 객체와 유사합니다 . 예를 들어 &lt;code&gt;Shirt.red.first&lt;/code&gt; , &lt;code&gt;Shirt.red.count&lt;/code&gt; , &lt;code&gt;Shirt.red.where(size: 'small')&lt;/code&gt; 호출 할 수 있습니다 . 또한, 단지 연관 개체로라는 범위는 같은 역할 &lt;a href=&quot;../../../array&quot;&gt;어레이&lt;/a&gt; 구현 &lt;a href=&quot;../../../enumerable&quot;&gt;Enumerable에서를&lt;/a&gt; ; &lt;code&gt;Shirt.red.each(&amp;amp;block)&lt;/code&gt; , &lt;code&gt;Shirt.red.first&lt;/code&gt; 및 &lt;code&gt;Shirt.red.inject(memo, &amp;amp;block)&lt;/code&gt; 마치 &lt;code&gt;Shirt.red&lt;/code&gt; 가 실제로 배열 인 것처럼 동작합니다 .</target>
        </trans-unit>
        <trans-unit id="ba3ad876c5ac1bcf58e559414af4e4c6b2994caa" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;pluck&lt;/code&gt; directly converts a database result into a Ruby &lt;code&gt;Array&lt;/code&gt;, without constructing &lt;code&gt;ActiveRecord&lt;/code&gt; objects. This can mean better performance for a large or frequently-run query. However, any model method overrides will not be available. For example:</source>
          <target state="translated">달리 &lt;code&gt;select&lt;/code&gt; , &lt;code&gt;pluck&lt;/code&gt; 직접 루비에 데이터베이스 결과를 변환 &lt;code&gt;Array&lt;/code&gt; 구성하지 않고, &lt;code&gt;ActiveRecord&lt;/code&gt; 객체. 이는 대규모 또는 자주 실행되는 쿼리의 성능이 향상됨을 의미 할 수 있습니다. 그러나 모델 메서드 재정의는 사용할 수 없습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8270e40d2a70d907ff7c7199378b61246ce411f5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;pluck&lt;/code&gt; directly converts a database result into a Ruby &lt;code&gt;Array&lt;/code&gt;, without constructing &lt;code&gt;ActiveRecord&lt;/code&gt; objects. This can mean better performance for a large or often-running query. However, any model method overrides will not be available. For example:</source>
          <target state="translated">달리 &lt;code&gt;select&lt;/code&gt; , &lt;code&gt;pluck&lt;/code&gt; 직접 루비에 데이터베이스 결과를 변환 &lt;code&gt;Array&lt;/code&gt; 구성하지 않고, &lt;code&gt;ActiveRecord&lt;/code&gt; 객체. 이는 대규모 또는 자주 실행되는 쿼리의 성능이 향상 될 수 있음을 의미합니다. 그러나 모델 방법 재정의는 사용할 수 없습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="448e9ede861e58842a90f671783ee0b54a9a0737" translate="yes" xml:space="preserve">
          <source>Unlike autoloading, &lt;code&gt;require_dependency&lt;/code&gt; does not expect the file to define any particular constant. Exploiting this behavior would be a bad practice though, file and constant paths should match.</source>
          <target state="translated">자동로드와 달리 &lt;code&gt;require_dependency&lt;/code&gt; 는 파일이 특정 상수를 정의 할 것으로 예상하지 않습니다. 이 동작을 악용하는 것은 좋지 않은 일이지만 파일과 상수 경로는 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="eab625bb97462db62c29eb84c28767872f5e5861" translate="yes" xml:space="preserve">
          <source>Unlike controllers, the mailer instance doesn't have any context about the incoming request so you'll need to provide the &lt;code&gt;:asset_host&lt;/code&gt; parameter yourself.</source>
          <target state="translated">컨트롤러와 달리 메일러 인스턴스에는 수신 요청에 대한 컨텍스트가 없으므로 &lt;code&gt;:asset_host&lt;/code&gt; 매개 변수를 직접 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3516db260b80f91dfb9c18a0327dbeab354d2817" translate="yes" xml:space="preserve">
          <source>Unlike controllers, the mailer instance doesn't have any context about the incoming request so you'll need to provide the &lt;code&gt;:host&lt;/code&gt; parameter yourself.</source>
          <target state="translated">컨트롤러와 달리 메일러 인스턴스에는 수신 요청에 대한 컨텍스트가 없으므로 &lt;code&gt;:host&lt;/code&gt; 매개 변수를 직접 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="07727714d62ff3231aeed3b3fb12a2b8852bb105" translate="yes" xml:space="preserve">
          <source>Unlike index, the create action will not render a template. After performing its main purpose (creating a new post), it initiates a redirect instead. This redirect works by returning an external &lt;code&gt;302
Moved&lt;/code&gt; HTTP response that takes the user to the index action.</source>
          <target state="translated">색인과 달리 작성 조치는 템플리트를 렌더링하지 않습니다. 기본 목적 (새 게시물 작성)을 수행 한 후 대신 리디렉션을 시작합니다. 이 리디렉션은 사용자를 인덱스 작업으로 &lt;code&gt;302 Moved&lt;/code&gt; 시키는 외부 302 Moved HTTP 응답을 반환하여 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="49992da1b1b47e4b79a1d25c8443b065e5eb8a37" translate="yes" xml:space="preserve">
          <source>Unlike other &lt;a href=&quot;../cache&quot;&gt;&lt;code&gt;Cache&lt;/code&gt;&lt;/a&gt; store implementations, &lt;a href=&quot;memorystore&quot;&gt;&lt;code&gt;MemoryStore&lt;/code&gt;&lt;/a&gt; does not compress values by default. &lt;a href=&quot;memorystore&quot;&gt;&lt;code&gt;MemoryStore&lt;/code&gt;&lt;/a&gt; does not benefit from compression as much as other &lt;a href=&quot;store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; implementations, as it does not send data over a network. However, when compression is enabled, it still pays the full cost of compression in terms of cpu use.</source>
          <target state="translated">다른 &lt;a href=&quot;../cache&quot;&gt; &lt;code&gt;Cache&lt;/code&gt; &lt;/a&gt; 저장소 구현 과 달리 &lt;a href=&quot;memorystore&quot;&gt; &lt;code&gt;MemoryStore&lt;/code&gt; &lt;/a&gt; 는 기본적으로 값을 압축하지 않습니다. &lt;a href=&quot;memorystore&quot;&gt; &lt;code&gt;MemoryStore&lt;/code&gt; &lt;/a&gt; 는 네트워크를 통해 데이터를 전송하지 않기 때문에 다른 &lt;a href=&quot;store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt; 구현 만큼 압축의 이점을 얻지 못합니다. 그러나 압축이 활성화 된 경우에도 여전히 CPU 사용 측면에서 전체 압축 비용을 지불합니다.</target>
        </trans-unit>
        <trans-unit id="608da35eea3bf03611dba486adbb8b677750b229" translate="yes" xml:space="preserve">
          <source>Unlike subclasses of &lt;a href=&quot;../../actioncontroller/base&quot;&gt;&lt;code&gt;ActionController::Base&lt;/code&gt;&lt;/a&gt;, channels do not follow a RESTful constraint form for their actions. Instead, Action Cable operates through a remote-procedure call model. You can declare any public method on the channel (optionally taking a &lt;code&gt;data&lt;/code&gt; argument), and this method is automatically exposed as callable to the client.</source>
          <target state="translated">&lt;a href=&quot;../../actioncontroller/base&quot;&gt; &lt;code&gt;ActionController::Base&lt;/code&gt; &lt;/a&gt; 서브 클래스와 달리 채널은 작업에 대해 RESTful 제약 양식을 따르지 않습니다. 대신 Action Cable은 원격 절차 호출 모델을 통해 작동합니다. 채널에서 모든 공용 메서드를 선언 할 수 있으며 (선택적으로 &lt;code&gt;data&lt;/code&gt; 인수를 가져옴 )이 메서드는 클라이언트에 호출 가능한 것으로 자동으로 노출됩니다.</target>
        </trans-unit>
        <trans-unit id="8b4de84015c64bbfdcdde2ddfb1dfd5fd6801124" translate="yes" xml:space="preserve">
          <source>Unlike subclasses of &lt;a href=&quot;../../actioncontroller/base&quot;&gt;ActionController::Base&lt;/a&gt;, channels do not follow a RESTful constraint form for their actions. Instead, Action Cable operates through a remote-procedure call model. You can declare any public method on the channel (optionally taking a &lt;code&gt;data&lt;/code&gt; argument), and this method is automatically exposed as callable to the client.</source>
          <target state="translated">&lt;a href=&quot;../../actioncontroller/base&quot;&gt;ActionController :: Base의&lt;/a&gt; 서브 클래스와 달리 채널은 해당 조치에 대해 RESTful 제한 조건 양식을 따르지 않습니다. 대신 Action Cable은 원격 프로 시저 호출 모델을 통해 작동합니다. 채널에서 공개 메소드를 선언 할 수 있으며 (선택적으로 &lt;code&gt;data&lt;/code&gt; 인수 사용)이 메소드는 클라이언트에 호출 가능한 것으로 자동 노출됩니다.</target>
        </trans-unit>
        <trans-unit id="62287c06d23a0ec4dffee3d990df5c208b99dba6" translate="yes" xml:space="preserve">
          <source>Unlike weak ETag, strong ETag implies that response should be exactly the same and byte by byte identical. Useful when doing Range requests within a large video or PDF file. Some CDNs support only strong ETags, like Akamai. If you absolutely need to generate a strong ETag, it can be done as follows.</source>
          <target state="translated">약한 ETag와 달리 강한 ETag는 응답이 정확히 동일하고 바이트 단위로 동일해야 함을 의미합니다. 큰 비디오 또는 PDF 파일 내에서 범위 요청을 수행 할 때 유용합니다. 일부 CDN은 Akamai와 같은 강력한 ETag 만 지원합니다. 강력한 ETag를 생성해야하는 경우 다음과 같이 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b90bd5e957335727b9455e3bcbc345929fa6f4e7" translate="yes" xml:space="preserve">
          <source>Unloads the association. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">연결을 언로드합니다. &lt;code&gt;self&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="781744eed2cbfe0f2f0bb6fb5bf19898e9264c90" translate="yes" xml:space="preserve">
          <source>Unobtrusive JavaScript</source>
          <target state="translated">눈에 띄지 않는 JavaScript</target>
        </trans-unit>
        <trans-unit id="b83532493b596dd7f3d3047e3bb9dc634b590ade" translate="yes" xml:space="preserve">
          <source>Unobtrusive JavaScript.</source>
          <target state="translated">눈에 띄지 않는 JavaScript.</target>
        </trans-unit>
        <trans-unit id="7b0a399f575a70073a7ab4cd7d190cbc2a1d23c0" translate="yes" xml:space="preserve">
          <source>Unpack the string at grapheme boundaries. Returns a list of character lists.</source>
          <target state="translated">그래 핀 경계에서 문자열의 압축을 풉니 다. 문자 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bca8789f06329e10775c6a304ede93ceb69168e4" translate="yes" xml:space="preserve">
          <source>Unpermitted keys</source>
          <target state="translated">허용되지 않는 키</target>
        </trans-unit>
        <trans-unit id="9856dae355fda3395412371f480dac40ebe10c25" translate="yes" xml:space="preserve">
          <source>Unregister a previously registered Interceptor. Either a class or a string can be passed in as the Interceptor. If a string is passed in it will be constantized.</source>
          <target state="translated">이전에 등록한 인터셉터를 등록 취소하십시오. 클래스 또는 문자열을 인터셉터로 전달할 수 있습니다. 문자열이 전달되면 일정하게 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="128f6d018b3c418efde99c433ebf40c8d484043f" translate="yes" xml:space="preserve">
          <source>Unregister a previously registered Interceptor. Either a class, string or symbol can be passed in as the Interceptor. If a string or symbol is passed in it will be camelized and constantized.</source>
          <target state="translated">이전에 등록한 인터셉터를 등록 취소하십시오. 클래스, 문자열 또는 기호를 인터셉터로 전달할 수 있습니다. 문자열이나 기호가 전달되면 낙타와 상수가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="f62864c1dd5409e6088f0e5effc0a53f3b7d66df" translate="yes" xml:space="preserve">
          <source>Unregister a previously registered Observer. Either a class, string or symbol can be passed in as the Observer. If a string or symbol is passed in it will be camelized and constantized.</source>
          <target state="translated">이전에 등록한 관찰자를 등록 취소하십시오. 클래스, 문자열 또는 기호를 관찰자로 전달할 수 있습니다. 문자열이나 기호가 전달되면 낙타와 상수가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="788cd52ca24c180fb6af6e4edda29ffe6e83dfe2" translate="yes" xml:space="preserve">
          <source>Unregister one or more previously registered Interceptors.</source>
          <target state="translated">하나 이상의 이전에 등록 된 인터셉터를 등록 취소하십시오.</target>
        </trans-unit>
        <trans-unit id="04d0c5eb12518bb698dc72b77fbc49f021bc6091" translate="yes" xml:space="preserve">
          <source>Unregister one or more previously registered Observers.</source>
          <target state="translated">하나 이상의 이전에 등록 된 관찰자를 등록 취소하십시오.</target>
        </trans-unit>
        <trans-unit id="c241e9a594cce9fbcbb489c2a466c6f7e1c69477" translate="yes" xml:space="preserve">
          <source>Unsafe Query Generation</source>
          <target state="translated">안전하지 않은 쿼리 생성</target>
        </trans-unit>
        <trans-unit id="ccc340a5964868283853155bd253181b213ee2a3" translate="yes" xml:space="preserve">
          <source>Unsaved objects and associations</source>
          <target state="translated">저장되지 않은 개체 및 연결</target>
        </trans-unit>
        <trans-unit id="9b65b5decf9a439fd03d47b77477a54d67be4357" translate="yes" xml:space="preserve">
          <source>Unsubscribe the subscription under test.</source>
          <target state="translated">테스트중인 구독을 구독 취소하십시오.</target>
        </trans-unit>
        <trans-unit id="46a592aa76213a60f36ac5dacd431bb714bdb2b3" translate="yes" xml:space="preserve">
          <source>Unsubscribes all streams associated with this channel from the pubsub queue.</source>
          <target state="translated">pubsub 큐에서이 채널과 연관된 모든 스트림을 구독 취소합니다.</target>
        </trans-unit>
        <trans-unit id="b65485b9761b16a15c92e3c2127e12c96cbbfbe7" translate="yes" xml:space="preserve">
          <source>Unsubscribes streams for the &lt;code&gt;model&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; 대한 스트림을 구독 취소합니다 .</target>
        </trans-unit>
        <trans-unit id="6e98c432b1872568cdb00b197545936062fd4c50" translate="yes" xml:space="preserve">
          <source>Unsubscribes streams from the named &lt;code&gt;broadcasting&lt;/code&gt;.</source>
          <target state="translated">이름이 지정된 &lt;code&gt;broadcasting&lt;/code&gt; 에서 스트림을 구독 취소합니다 .</target>
        </trans-unit>
        <trans-unit id="66b5840a9586c2f79dd11e0936d555c13ef22e51" translate="yes" xml:space="preserve">
          <source>Unsupported Release Series</source>
          <target state="translated">지원되지 않는 릴리즈 시리즈</target>
        </trans-unit>
        <trans-unit id="fb91e24fa52d8d2b32937bf04d843f730319a902" translate="yes" xml:space="preserve">
          <source>Update</source>
          <target state="translated">Update</target>
        </trans-unit>
        <trans-unit id="6269561658447fcbe6e337ddec8ae97e76a51ab3" translate="yes" xml:space="preserve">
          <source>Update metadata for the file identified by &lt;code&gt;key&lt;/code&gt; in the service. Override in subclasses only if the service needs to store specific metadata that has to be updated upon identification.</source>
          <target state="translated">서비스에서 &lt;code&gt;key&lt;/code&gt; 식별 된 파일의 메타 데이터를 업데이트 하십시오. 서비스가 식별시 업데이트해야하는 특정 메타 데이터를 저장해야하는 경우에만 서브 클래스에서 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="337c3f98b23b5570174103fb2e891190de492220" translate="yes" xml:space="preserve">
          <source>Updates a single attribute and saves the record. This is especially useful for boolean flags on existing records. Also note that</source>
          <target state="translated">단일 속성을 업데이트하고 레코드를 저장합니다. 이는 기존 레코드의 부울 플래그에 특히 유용합니다. 또한</target>
        </trans-unit>
        <trans-unit id="7c2bbc0537714522cfb9422e4840b6340ba616ef" translate="yes" xml:space="preserve">
          <source>Updates all records in the current relation with details given. This method constructs a single SQL UPDATE statement and sends it straight to the database. It does not instantiate the involved models and it does not trigger Active Record callbacks or validations. However, values passed to &lt;a href=&quot;relation#method-i-update_all&quot;&gt;&lt;code&gt;update_all&lt;/code&gt;&lt;/a&gt; will still go through Active Record's normal type casting and serialization. Returns the number of rows affected.</source>
          <target state="translated">주어진 세부 사항으로 현재 관계의 모든 레코드를 업데이트합니다. 이 메서드는 단일 SQL UPDATE 문을 구성하여 데이터베이스로 직접 보냅니다. 관련 모델을 인스턴스화하지 않으며 Active Record 콜백 또는 유효성 검사를 트리거하지 않습니다. 그러나 &lt;a href=&quot;relation#method-i-update_all&quot;&gt; &lt;code&gt;update_all&lt;/code&gt; 에&lt;/a&gt; 전달 된 값 은 여전히 ​​Active Record의 일반 유형 캐스팅 및 직렬화를 거칩니다. 영향을받은 행 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d3c3434cd4da48f273545d98086fde2f2c1e181a" translate="yes" xml:space="preserve">
          <source>Updates all records in the current relation with details given. This method constructs a single SQL UPDATE statement and sends it straight to the database. It does not instantiate the involved models and it does not trigger Active Record callbacks or validations. However, values passed to &lt;a href=&quot;relation#method-i-update_all&quot;&gt;update_all&lt;/a&gt; will still go through Active Record's normal type casting and serialization.</source>
          <target state="translated">주어진 세부 사항으로 현재 관계의 모든 레코드를 업데이트합니다. 이 메소드는 단일 SQL UPDATE 문을 구성하여 데이터베이스로 바로 보냅니다. 관련 모델을 인스턴스화하지 않으며 Active Record 콜백 또는 유효성 검증을 트리거하지 않습니다. 그러나 &lt;a href=&quot;relation#method-i-update_all&quot;&gt;update_all에&lt;/a&gt; 전달 된 값 은 여전히 ​​Active Record의 일반 유형 캐스팅 및 직렬화를 거칩니다.</target>
        </trans-unit>
        <trans-unit id="89ed0bee658ed8a576853a3e21c980745c8d546b" translate="yes" xml:space="preserve">
          <source>Updates all the attributes that are dirty in this object.</source>
          <target state="translated">이 객체에서 더티 인 모든 속성을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="8f755f336cd1b6e9a7bcf86b24186c35caee849b" translate="yes" xml:space="preserve">
          <source>Updates an object (or multiple objects) and saves it to the database, if validations pass. The resulting object is returned whether the object was saved successfully to the database or not.</source>
          <target state="translated">유효성 검사가 통과되면 개체 (또는 여러 개체)를 업데이트하고 데이터베이스에 저장합니다. 결과 오브젝트는 오브젝트가 데이터베이스에 성공적으로 저장되었는지 여부에 관계없이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="89720cb354b338f893bebcc93b22f8967397637d" translate="yes" xml:space="preserve">
          <source>Updates its receiver just like &lt;a href=&quot;persistence#method-i-update&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; but calls &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;&lt;code&gt;save!&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;save&lt;/code&gt;, so an exception is raised if the record is invalid and saving will fail.</source>
          <target state="translated">업데이트와 마찬가지로 수신기를 &lt;a href=&quot;persistence#method-i-update&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt; 하지만 &lt;a href=&quot;persistence#method-i-save-21&quot;&gt; &lt;code&gt;save!&lt;/code&gt; &lt;/a&gt; 호출합니다 ! &lt;code&gt;save&lt;/code&gt; 대신 레코드가 유효하지 않고 저장에 실패하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="51de37362cff3124cb6588b061df057813c882db" translate="yes" xml:space="preserve">
          <source>Updates its receiver just like &lt;a href=&quot;persistence#method-i-update&quot;&gt;update&lt;/a&gt; but calls &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt; instead of &lt;code&gt;save&lt;/code&gt;, so an exception is raised if the record is invalid and saving will fail.</source>
          <target state="translated">수신기를 업데이트처럼 &lt;a href=&quot;persistence#method-i-update&quot;&gt;업데이트&lt;/a&gt; 하지만 호출은 &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;저장됩니다! &lt;/a&gt; &lt;code&gt;save&lt;/code&gt; 대신 레코드가 유효하지 않아 예외가 발생하면 저장이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="ef6b4725002f392b098a6e4d52696e4004ad52ad" translate="yes" xml:space="preserve">
          <source>Updates or inserts (upserts) a single record into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="translated">단일 SQL INSERT 문에서 단일 레코드를 데이터베이스에 업데이트하거나 삽입 (업로드)합니다. 모델을 인스턴스화하지 않으며 Active Record 콜백 또는 유효성 검사를 트리거하지 않습니다. 전달 된 값은 Active Record의 유형 캐스팅 및 직렬화를 거칩니다.</target>
        </trans-unit>
        <trans-unit id="2a1c02217be146bad426fc812a9bc0ba3a26548b" translate="yes" xml:space="preserve">
          <source>Updates or inserts (upserts) multiple records into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="translated">단일 SQL INSERT 문에서 여러 레코드를 데이터베이스에 업데이트하거나 삽입 (업로드)합니다. 모델을 인스턴스화하지 않으며 Active Record 콜백 또는 유효성 검사를 트리거하지 않습니다. 전달 된 값은 Active Record의 유형 캐스팅 및 직렬화를 거칩니다.</target>
        </trans-unit>
        <trans-unit id="7c4edc7e782edf4a33d743a880cf4084c004de44" translate="yes" xml:space="preserve">
          <source>Updates records in batches. Returns the total number of rows affected.</source>
          <target state="translated">레코드를 일괄 적으로 업데이트합니다. 영향을받은 총 행 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c1f7400f6b99b6a76152ec59ffb11a126edb04e7" translate="yes" xml:space="preserve">
          <source>Updates the attribute identified by &lt;code&gt;attr_name&lt;/code&gt; with the specified &lt;code&gt;value&lt;/code&gt;. (Alias for the protected &lt;a href=&quot;attributemethods/write#method-i-write_attribute&quot;&gt;&lt;code&gt;write_attribute&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">&lt;code&gt;attr_name&lt;/code&gt; 으로 식별 된 속성을 지정된 &lt;code&gt;value&lt;/code&gt; 업데이트합니다 . (보호 된 &lt;a href=&quot;attributemethods/write#method-i-write_attribute&quot;&gt; &lt;code&gt;write_attribute&lt;/code&gt; &lt;/a&gt; 메소드의 별명 ).</target>
        </trans-unit>
        <trans-unit id="83ff8bad4f1f02f18cacee0c7622935e2dd3773e" translate="yes" xml:space="preserve">
          <source>Updates the attribute identified by &lt;code&gt;attr_name&lt;/code&gt; with the specified &lt;code&gt;value&lt;/code&gt;. (Alias for the protected &lt;a href=&quot;attributemethods/write#method-i-write_attribute&quot;&gt;write_attribute&lt;/a&gt; method).</source>
          <target state="translated">&lt;code&gt;attr_name&lt;/code&gt; 으로 식별 된 속성을 지정된 &lt;code&gt;value&lt;/code&gt; 업데이트합니다 . (보호 된 &lt;a href=&quot;attributemethods/write#method-i-write_attribute&quot;&gt;write_attribute&lt;/a&gt; 메소드의 별명 ).</target>
        </trans-unit>
        <trans-unit id="3f17dc727f3e55c7ca7b273be02ada179a18e069" translate="yes" xml:space="preserve">
          <source>Updates the attribute identified by &lt;code&gt;attr_name&lt;/code&gt; with the specified &lt;code&gt;value&lt;/code&gt;. Empty strings for &lt;a href=&quot;../../integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Float&lt;/code&gt; columns are turned into &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;attr_name&lt;/code&gt; 으로 식별 된 속성을 지정된 &lt;code&gt;value&lt;/code&gt; 업데이트합니다 . &lt;a href=&quot;../../integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;Float&lt;/code&gt; 열의 빈 문자열은 &lt;code&gt;nil&lt;/code&gt; 로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="8294f7a9f36c9fb5201db1158ce9c3e54c9cf4e9" translate="yes" xml:space="preserve">
          <source>Updates the attribute identified by &lt;code&gt;attr_name&lt;/code&gt; with the specified &lt;code&gt;value&lt;/code&gt;. Empty strings for &lt;a href=&quot;../../integer&quot;&gt;Integer&lt;/a&gt; and Float columns are turned into &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;attr_name&lt;/code&gt; 으로 식별 된 속성을 지정된 &lt;code&gt;value&lt;/code&gt; 업데이트합니다 . &lt;a href=&quot;../../integer&quot;&gt;Integer&lt;/a&gt; 및 Float 열의 빈 문자열은 &lt;code&gt;nil&lt;/code&gt; 로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="e7f07a45119de0e275fd9697bea9f645f5d54020" translate="yes" xml:space="preserve">
          <source>Updates the attributes directly in the database issuing an UPDATE SQL statement and sets them in the receiver:</source>
          <target state="translated">UPDATE SQL 문을 발행하는 데이터베이스에서 직접 속성을 업데이트하고 수신자에서 속성을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="c2f7738a57643e75f93169276968624a8e9bf816" translate="yes" xml:space="preserve">
          <source>Updates the attributes of the model from the passed-in hash and saves the record, all wrapped in a transaction. If the object is invalid, the saving will fail and false will be returned.</source>
          <target state="translated">전달 된 해시에서 모델 속성을 업데이트하고 레코드를 모두 트랜잭션에 래핑하여 저장합니다. 객체가 유효하지 않으면 저장이 실패하고 false가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d150b52b1bdd0b6c06b030650a2305799cde7b65" translate="yes" xml:space="preserve">
          <source>Updates the counters of the records in the current relation.</source>
          <target state="translated">현재 관계에서 레코드의 카운터를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="8049e7441f408e3e647b1d09027f5d945b5734c0" translate="yes" xml:space="preserve">
          <source>Updates the receiver in-place, merging in the hash passed as argument:</source>
          <target state="translated">인수로 전달 된 해시를 병합하여 수신자를 제자리에서 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="bae21c00600e48963972b9c0e664351ab2717874" translate="yes" xml:space="preserve">
          <source>Updates the receiver in-place, merging in the hashes passed as arguments:</source>
          <target state="translated">수신자를 제자리에서 업데이트하고 인수로 전달 된 해시를 병합합니다.</target>
        </trans-unit>
        <trans-unit id="06eb0cf61945f2baa84ba448f966ac0c0d4766a7" translate="yes" xml:space="preserve">
          <source>Updating Articles</source>
          <target state="translated">기사 업데이트</target>
        </trans-unit>
        <trans-unit id="c2cdf03cea63dded3c9ee71d8d879915e22c73ee" translate="yes" xml:space="preserve">
          <source>Updating an Article</source>
          <target state="translated">기사 업데이트</target>
        </trans-unit>
        <trans-unit id="f9a4a6beacead0d3e974590ae81ff652f9640b13" translate="yes" xml:space="preserve">
          <source>Updating an Object</source>
          <target state="translated">객체 업데이트</target>
        </trans-unit>
        <trans-unit id="f37df6119e88526a6d6c16ae5c25f6c05d98b0fe" translate="yes" xml:space="preserve">
          <source>Updating the Schema</source>
          <target state="translated">스키마 업데이트</target>
        </trans-unit>
        <trans-unit id="de66c667684eb170cba69498a8c821a27dc6a0b8" translate="yes" xml:space="preserve">
          <source>Updating the schema</source>
          <target state="translated">스키마 업데이트</target>
        </trans-unit>
        <trans-unit id="9f3252dbce9286f547dba105371430100bd1b74b" translate="yes" xml:space="preserve">
          <source>Updating this hash would still update errors state for backward compatibility, but this behavior is deprecated.</source>
          <target state="translated">이 해시를 업데이트하면 이전 버전과의 호환성을 위해 오류 상태가 계속 업데이트되지만이 동작은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fb7a4cdfc584efada3231e3b09d46fecb6b7ded3" translate="yes" xml:space="preserve">
          <source>Upgrading Ruby on Rails</source>
          <target state="translated">Ruby on Rails 업그레이드</target>
        </trans-unit>
        <trans-unit id="9df57e5528d7bb0c306b04800c096c9a86077d6f" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 3.0 to Rails 3.1</source>
          <target state="translated">Rails 3.0에서 Rails 3.1로 업그레이드</target>
        </trans-unit>
        <trans-unit id="bb17c01cc46b77915a100f16617b05c62fb9941c" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 3.1 to Rails 3.2</source>
          <target state="translated">Rails 3.1에서 Rails 3.2로 업그레이드</target>
        </trans-unit>
        <trans-unit id="d840859cfe4df027c95bbf2da3c972c5dc7203e3" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 3.2 to Rails 4.0</source>
          <target state="translated">Rails 3.2에서 Rails 4.0으로 업그레이드</target>
        </trans-unit>
        <trans-unit id="aa469338f8c99d5cac7f703bbbe44ad7d9a7a8cb" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 4.0 to Rails 4.1</source>
          <target state="translated">Rails 4.0에서 Rails 4.1로 업그레이드</target>
        </trans-unit>
        <trans-unit id="e2f5376a7b76407efdf98e53c793ecf3654b8a4d" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 4.1 to Rails 4.2</source>
          <target state="translated">Rails 4.1에서 Rails 4.2로 업그레이드</target>
        </trans-unit>
        <trans-unit id="31eb82b48a38920868e97cefa5128714838c6c20" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 4.2 to Rails 5.0</source>
          <target state="translated">Rails 4.2에서 Rails 5.0으로 업그레이드</target>
        </trans-unit>
        <trans-unit id="5b3716e8c06c1789906b13d68b581c33cfe3c4fc" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 5.0 to Rails 5.1</source>
          <target state="translated">Rails 5.0에서 Rails 5.1로 업그레이드</target>
        </trans-unit>
        <trans-unit id="7e7598dce8a15ab3a932908dda4c52357cf3ae98" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 5.1 to Rails 5.2</source>
          <target state="translated">Rails 5.1에서 Rails 5.2로 업그레이드</target>
        </trans-unit>
        <trans-unit id="b7c9ef69952f303ffb092a48e8fe958e62fc7bfb" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 5.2 to Rails 6.0</source>
          <target state="translated">Rails 5.2에서 Rails 6.0으로 업그레이드</target>
        </trans-unit>
        <trans-unit id="00bde52d27f36dd7410ae759518cdb888feb6a9b" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 6.0 to Rails 6.1</source>
          <target state="translated">Rails 6.0에서 Rails 6.1로 업그레이드</target>
        </trans-unit>
        <trans-unit id="cc459a80604c2a340172b1b1f9d21adca7d05603" translate="yes" xml:space="preserve">
          <source>Upload the &lt;code&gt;io&lt;/code&gt; to the &lt;code&gt;key&lt;/code&gt; specified to all services. If a &lt;code&gt;checksum&lt;/code&gt; is provided, all services will ensure a match when the upload has completed or raise an &lt;a href=&quot;../integrityerror&quot;&gt;&lt;code&gt;ActiveStorage::IntegrityError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모든 서비스에 지정된 &lt;code&gt;key&lt;/code&gt; &lt;code&gt;io&lt;/code&gt; 를 업로드합니다 . 경우 &lt;code&gt;checksum&lt;/code&gt; 제공되는 모든 서비스는 업로드가 완료되면 일치를 확인하거나 올릴 것이다 &lt;a href=&quot;../integrityerror&quot;&gt; &lt;code&gt;ActiveStorage::IntegrityError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f6627794b6a332dc444fa428bd745620b3a90136" translate="yes" xml:space="preserve">
          <source>Upload the &lt;code&gt;io&lt;/code&gt; to the &lt;code&gt;key&lt;/code&gt; specified to all services. If a &lt;code&gt;checksum&lt;/code&gt; is provided, all services will ensure a match when the upload has completed or raise an &lt;a href=&quot;../integrityerror&quot;&gt;ActiveStorage::IntegrityError&lt;/a&gt;.</source>
          <target state="translated">모든 서비스에 지정된 &lt;code&gt;key&lt;/code&gt; &lt;code&gt;io&lt;/code&gt; 를 업로드하십시오 . 경우 &lt;code&gt;checksum&lt;/code&gt; 제공되는 모든 서비스는 업로드가 완료되면 일치를 확인하거나 올릴 것이다 &lt;a href=&quot;../integrityerror&quot;&gt;ActiveStorage :: IntegrityError을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9f05d4baaacc34aba4f6ec1153ecb19a05d4b3d3" translate="yes" xml:space="preserve">
          <source>Upload the &lt;code&gt;io&lt;/code&gt; to the &lt;code&gt;key&lt;/code&gt; specified. If a &lt;code&gt;checksum&lt;/code&gt; is provided, the service will ensure a match when the upload has completed or raise an &lt;a href=&quot;integrityerror&quot;&gt;&lt;code&gt;ActiveStorage::IntegrityError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;key&lt;/code&gt; &lt;code&gt;io&lt;/code&gt; 를 업로드하십시오 . 경우 &lt;code&gt;checksum&lt;/code&gt; 제공되며, 서비스는 업로드가 완료되면 일치를 확인하거나 올릴 것이다 &lt;a href=&quot;integrityerror&quot;&gt; &lt;code&gt;ActiveStorage::IntegrityError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8ca1d57b446d81445fbb90b92b10f983f82c70c8" translate="yes" xml:space="preserve">
          <source>Upload the &lt;code&gt;io&lt;/code&gt; to the &lt;code&gt;key&lt;/code&gt; specified. If a &lt;code&gt;checksum&lt;/code&gt; is provided, the service will ensure a match when the upload has completed or raise an &lt;a href=&quot;integrityerror&quot;&gt;ActiveStorage::IntegrityError&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;key&lt;/code&gt; &lt;code&gt;io&lt;/code&gt; 를 업로드하십시오 . 경우 &lt;code&gt;checksum&lt;/code&gt; 제공되며, 서비스는 업로드가 완료되면 일치를 확인하거나 올릴 것이다 &lt;a href=&quot;integrityerror&quot;&gt;ActiveStorage :: IntegrityError을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2191358108795cd5ed3f4e195309fe37b113dc2a" translate="yes" xml:space="preserve">
          <source>Uploaded files are temporary files whose lifespan is one request. When the object is finalized Ruby unlinks the file, so there is no need to clean them with a separate maintenance task.</source>
          <target state="translated">업로드 된 파일은 수명이 하나의 요청 인 임시 파일입니다. 객체가 완성되면 Ruby는 파일을 연결 해제하므로 별도의 유지 관리 작업으로 파일을 정리할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="943e26649b772824ba55708d2fd502f15bc84dd0" translate="yes" xml:space="preserve">
          <source>Uploading Files</source>
          <target state="translated">파일 업로드</target>
        </trans-unit>
        <trans-unit id="aa757087ad251b34a2a2fc3efa9e9d225c0b8a97" translate="yes" xml:space="preserve">
          <source>Uploads the &lt;code&gt;io&lt;/code&gt; to the service on the &lt;code&gt;key&lt;/code&gt; for this blob. Blobs are intended to be immutable, so you shouldn't be using this method after a file has already been uploaded to fit with a blob. If you want to create a derivative blob, you should instead simply create a new blob based on the old one.</source>
          <target state="translated">이 Blob 의 &lt;code&gt;key&lt;/code&gt; 에서 서비스에 &lt;code&gt;io&lt;/code&gt; 를 업로드합니다 . Blob은 변경이 불가능하므로 Blob에 맞게 파일을 이미 업로드 한 후에는이 방법을 사용하지 않아야합니다. 파생 블롭을 만들려면 대신 기존 블롭을 기반으로 새 블롭을 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="5b4f5f343ed6dc1fcf87b83614a5733833cb275b" translate="yes" xml:space="preserve">
          <source>Upon form submission the value entered by the user will be stored in &lt;code&gt;params[:person][:name]&lt;/code&gt;.</source>
          <target state="translated">양식 제출시 사용자가 입력 한 값은 &lt;code&gt;params[:person][:name]&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="2384d7787e8da51142d799aec6a1bc2b5934b94f" translate="yes" xml:space="preserve">
          <source>UrlFor</source>
          <target state="translated">UrlFor</target>
        </trans-unit>
        <trans-unit id="defeee97f6e140ce602558dbbf51a5d88c3163bd" translate="yes" xml:space="preserve">
          <source>UrlFor#url_options</source>
          <target state="translated">UrlFor#url_options</target>
        </trans-unit>
        <trans-unit id="31d4379d9a0b62b22459d658ff6f4a287dfd2e65" translate="yes" xml:space="preserve">
          <source>UrlHelper</source>
          <target state="translated">UrlHelper</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="f41cddc9c59b23a19c5d3bc2d0080f3210745cfb" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;return&lt;/code&gt; within inline callback blocks</source>
          <target state="translated">인라인 콜백 블록 내에서 의 &lt;code&gt;return&lt;/code&gt; 사용법</target>
        </trans-unit>
        <trans-unit id="a7cb69b72008ab09ae192909df198675d2b69b56" translate="yes" xml:space="preserve">
          <source>Usage with mounted engines</source>
          <target state="translated">장착 된 엔진과 함께 사용</target>
        </trans-unit>
        <trans-unit id="497bf6d2658a85a833b2a8a8dfacdaf82da38eb9" translate="yes" xml:space="preserve">
          <source>Usage within the framework</source>
          <target state="translated">프레임 워크 내의 사용법</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="27fe65747fd2c8338c812e062578e5abc605fedb" translate="yes" xml:space="preserve">
          <source>Use &quot;GET&quot; as the method for search forms. This allows users to bookmark a specific search and get back to it. More generally Rails encourages you to use the right HTTP verb for an action.</source>
          <target state="translated">검색 양식의 방법으로 &quot;GET&quot;을 사용하십시오. 이를 통해 사용자는 특정 검색을 북마크하고 다시 검색 할 수 있습니다. 보다 일반적으로 Rails는 작업에 적합한 HTTP 동사를 사용하도록 권장합니다.</target>
        </trans-unit>
        <trans-unit id="4deaa35b6d77765efbac38ae5745b94516e96671" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;&lt;code&gt;pluck&lt;/code&gt;&lt;/a&gt; as a shortcut to select one or more attributes without loading a bunch of records just to grab the attributes you want.</source>
          <target state="translated">&lt;a href=&quot;calculations#method-i-pluck&quot;&gt; &lt;code&gt;pluck&lt;/code&gt; &lt;/a&gt; 을 바로 가기로 사용 하여 원하는 속성을 가져 오기 위해 여러 레코드를로드하지 않고 하나 이상의 속성을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="b93418ad06b6f98d33605d6333e196e91a59fb76" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;pluck&lt;/a&gt; as a shortcut to select one or more attributes without loading a bunch of records just to grab the attributes you want.</source>
          <target state="translated">원하는 속성을 가져 오기 위해 레코드를로드하지 않고 하나 이상의 속성을 선택하는 바로 가기로 &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;pluck&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="091e2334a75d7a9a536791a71ee1489037c8f04b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;&lt;code&gt;has_many&lt;/code&gt;&lt;/a&gt; in the base, and &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;&lt;code&gt;belongs_to&lt;/code&gt;&lt;/a&gt; in the associated model.</source>
          <target state="translated">기본에서 &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt; &lt;code&gt;has_many&lt;/code&gt; &lt;/a&gt; 를 사용 하고 연관된 모델에서 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt; &lt;code&gt;belongs_to&lt;/code&gt; &lt;/a&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="96e7b09b40e35f040a0d0a01b7a01dae48d1581d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; in the base, and &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; in the associated model.</source>
          <target state="translated">기본에서 &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; 를 사용 하고 연관된 모델에서 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="824bf2369c158483c1ff421b3dc9e811bca2fc69" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;&lt;code&gt;has_one&lt;/code&gt;&lt;/a&gt; in the base, and &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;&lt;code&gt;belongs_to&lt;/code&gt;&lt;/a&gt; in the associated model.</source>
          <target state="translated">기본에서 &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt; &lt;code&gt;has_one&lt;/code&gt; &lt;/a&gt; 을 사용 하고 연관된 모델에서 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt; &lt;code&gt;belongs_to&lt;/code&gt; &lt;/a&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4b7f49683dc74ccaee081089bf0d73cdcfd86185" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; in the base, and &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; in the associated model.</source>
          <target state="translated">기본에 &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; 을 사용 하고 연관된 모델에 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="18f2269ce2dc7d437df0219a4efd8538c8ac5df5" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;ActiveRecord::Base.connection_pool.with_connection(&amp;amp;block)&lt;/a&gt;, which obtains a connection, yields it as the sole argument to the block, and returns it to the pool after the block completes.</source>
          <target state="translated">연결을 가져 와서 블록에 대한 유일한 인수로 생성하고 블록이 완료된 후 풀에 반환하는 &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;ActiveRecord :: Base.connection_pool.with_connection (&amp;amp; block)을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="07c0d1794a4170e8a909082eb55b0f10fc61c49b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/CspHelper.html#method-i-csp_meta_tag&quot;&gt;&lt;code&gt;csp_meta_tag&lt;/code&gt;&lt;/a&gt; helper to create a meta tag &quot;csp-nonce&quot; with the per-session nonce value for allowing inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">사용 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/CspHelper.html#method-i-csp_meta_tag&quot;&gt; &lt;code&gt;csp_meta_tag&lt;/code&gt; 의&lt;/a&gt; 도우미 인라인 허용에 대한 세션 별 넌스 값이 메타 태그 &quot;CSP-넌스&quot;를 만드는 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그를.</target>
        </trans-unit>
        <trans-unit id="d4f94e7afd8b4da4bd5df152bf785036ba3d03b7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; to notify &lt;code&gt;deprecation.rails&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;deprecation.rails&lt;/code&gt; 에 알리려면 &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="79744b1829592638007adaaad04053a8a5f68880" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Rails&lt;/code&gt; default banner.</source>
          <target state="translated">&lt;code&gt;Rails&lt;/code&gt; 기본 배너를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="bd57d9d20db3a2c241562f6848caf4b9ceef3868" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;before_action except: [...]&lt;/code&gt; instead of &lt;code&gt;only: [...]&lt;/code&gt; for security-related actions. This way you don't forget to enable security checks for newly added actions.</source>
          <target state="translated">보안 관련 작업에는 &lt;code&gt;only: [...]&lt;/code&gt; 사용하는 대신 &lt;code&gt;before_action except: [...]&lt;/code&gt; 를 제외하고 before_action을 사용 합니다. 이렇게하면 새로 추가 된 작업에 대해 보안 검사를 활성화하는 것을 잊지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a39f71916100bba9b72220f6855b18ba5866261a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;bin/rails credentials:edit&lt;/code&gt; to add the password to your application's encrypted credentials under &lt;code&gt;action_mailbox.ingress_password&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="translated">&lt;code&gt;bin/rails credentials:edit&lt;/code&gt; 를 사용 하여 &lt;code&gt;action_mailbox.ingress_password&lt;/code&gt; 아래에서 애플리케이션의 암호화 된 자격 증명에 암호를 추가합니다 . 여기서 Action Mailbox가 자동으로 찾습니다.</target>
        </trans-unit>
        <trans-unit id="bef4215fe21ec06032e2b04e9279326e9be3352a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;bin/rails credentials:edit&lt;/code&gt; to add your API key to your application's encrypted credentials under &lt;code&gt;action_mailbox.mandrill_api_key&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="translated">&lt;code&gt;bin/rails credentials:edit&lt;/code&gt; 를 사용 하여 &lt;code&gt;action_mailbox.mandrill_api_key&lt;/code&gt; 아래에있는 애플리케이션의 암호화 된 자격 증명에 API 키를 추가합니다 . 여기서 Action Mailbox가 자동으로 찾습니다.</target>
        </trans-unit>
        <trans-unit id="2f8a1cf0251aa83e6c3d4d3704c085caaa1ea44d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;bin/rails credentials:edit&lt;/code&gt; to add your Signing key to your application's encrypted credentials under &lt;code&gt;action_mailbox.mailgun_signing_key&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="translated">&lt;code&gt;bin/rails credentials:edit&lt;/code&gt; 사용 하여 &lt;code&gt;action_mailbox.mailgun_signing_key&lt;/code&gt; 아래에있는 애플리케이션의 암호화 된 자격 증명에 서명 키를 추가합니다 . 여기서 Action Mailbox가 자동으로 찾습니다.</target>
        </trans-unit>
        <trans-unit id="b4e6e719f64af08fbf75a96b6c12464cf16255ef" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;bin/rails&lt;/code&gt; for running tasks and tests</source>
          <target state="translated">작업 및 테스트 실행에 &lt;code&gt;bin/rails&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="6bb89df638cd2a3252a75fd356169eab4400adfb" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;info breakpoints&lt;/code&gt; to list breakpoints. If you supply a number, it lists that breakpoint. Otherwise it lists all breakpoints.</source>
          <target state="translated">&lt;code&gt;info breakpoints&lt;/code&gt; 을 사용 하여 중단 점 을 나열 하십시오 . 숫자를 제공하면 해당 중단 점이 나열됩니다. 그렇지 않으면 모든 중단 점이 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="75c2b9b3aad1e841645366974d35a7dd6539f214" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;photos_path&lt;/code&gt;, &lt;code&gt;new_photo_path&lt;/code&gt;, etc. to generate paths for this resource.</source>
          <target state="translated">사용 &lt;code&gt;photos_path&lt;/code&gt; , &lt;code&gt;new_photo_path&lt;/code&gt; 이 자원에 대한 경로를 생성하는 등.</target>
        </trans-unit>
        <trans-unit id="89a2e23d873d17b6617ca2bae11c592c20d21ea9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails credentials:edit&lt;/code&gt; to add the password to your application's encrypted credentials under &lt;code&gt;action_mailbox.ingress_password&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="translated">&lt;code&gt;rails credentials:edit&lt;/code&gt; 를 사용 하여 &lt;code&gt;action_mailbox.ingress_password&lt;/code&gt; 아래에서 애플리케이션의 암호화 된 신임 정보에 비밀번호를 추가하십시오 . 여기서 Action Mailbox는 자동으로 다음을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="45b259a69119c8958ee530c4044a470358f61d87" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails credentials:edit&lt;/code&gt; to add your API key to your application's encrypted credentials under &lt;code&gt;action_mailbox.mailgun_api_key&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="translated">&lt;code&gt;rails credentials:edit&lt;/code&gt; 를 사용 하여 &lt;code&gt;action_mailbox.mailgun_api_key&lt;/code&gt; 아래의 애플리케이션의 암호화 된 자격 증명에 API 키를 추가합니다 . 여기서 Action Mailbox는 자동으로 다음을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="20cdb22bdf4606cc94b204563d1b7a7ccfd205a2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails credentials:edit&lt;/code&gt; to add your API key to your application's encrypted credentials under &lt;code&gt;action_mailbox.mandrill_api_key&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="translated">&lt;code&gt;rails credentials:edit&lt;/code&gt; 을 사용 하여 &lt;code&gt;action_mailbox.mandrill_api_key&lt;/code&gt; 에서 응용 프로그램의 암호화 된 자격 증명에 API 키를 추가합니다 . 여기서 Action Mailbox는 자동으로 다음을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="ac78de1984cae37f85dac2ee223d4d597ce15c55" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails&lt;/code&gt; for running tasks and tests</source>
          <target state="translated">작업 및 테스트 실행에 &lt;code&gt;rails&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="eb64bc58530a10c1764d50f24ba7bdb1eb6e5d5f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rake secret&lt;/code&gt; to generate new keys for the &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; sections.</source>
          <target state="translated">&lt;code&gt;rake secret&lt;/code&gt; 을 사용 하여 &lt;code&gt;development&lt;/code&gt; 및 &lt;code&gt;test&lt;/code&gt; 섹션에 대한 새 키를 생성 하십시오 .</target>
        </trans-unit>
        <trans-unit id="28077c934adec4f2169ba53822cb9e9c852ab12c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;root&lt;/code&gt; as a shorthand to name a route for the root path &amp;ldquo;/&amp;rdquo;.</source>
          <target state="translated">루트 경로&amp;ldquo;/&amp;rdquo;의 경로 이름을 지정 하려면 &lt;code&gt;root&lt;/code&gt; 를 축약 형으로 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bbbfe321f6d7c3927e3ea6641c35d0c7df7854d9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;step&lt;/code&gt; (abbreviated &lt;code&gt;s&lt;/code&gt;) to continue running your program until the next logical stopping point and return control to the debugger. &lt;code&gt;next&lt;/code&gt; is similar to &lt;code&gt;step&lt;/code&gt;, but while &lt;code&gt;step&lt;/code&gt; stops at the next line of code executed, doing just a single step, &lt;code&gt;next&lt;/code&gt; moves to the next line without descending inside methods.</source>
          <target state="translated">&lt;code&gt;step&lt;/code&gt; (약칭 &lt;code&gt;s&lt;/code&gt; )를 사용 하여 다음 논리적 중지 지점까지 프로그램을 계속 실행하고 제어를 디버거로 리턴하십시오. &lt;code&gt;next&lt;/code&gt; 는 &lt;code&gt;step&lt;/code&gt; 과 비슷 하지만 한 단계 만 수행하면 다음에 실행되는 코드 행에서 &lt;code&gt;step&lt;/code&gt; 이 멈추지 만 &lt;code&gt;next&lt;/code&gt; 는 메소드 내림차순으로 다음 행으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="274b88e01f3b64b3968e92b05885330929e5a263" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;true&lt;/code&gt; with boolean attributes that can render with no value, like &lt;code&gt;disabled&lt;/code&gt; and &lt;code&gt;readonly&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; 및 &lt;code&gt;readonly&lt;/code&gt; 와 같이 값없이 렌더링 할 수있는 부울 속성 에는 &lt;code&gt;true&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0608d6576ffbe1c001dea0eb8bbc222203b3fd00" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;url_for(variant)&lt;/code&gt; (or the implied form, like +link_to variant+ or +redirect_to variant+) to get the stable URL for a variant that points to the &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt;, which in turn will use this &lt;code&gt;service_call&lt;/code&gt; method for its redirection.</source>
          <target state="translated">사용 &lt;code&gt;url_for(variant)&lt;/code&gt; 변형의 안정적인 URL을 얻기 위해 (또는 + LINK_TO 변형 + 나 + redirect_to 변형 + 같은 묵시적 양식을,) 그 포인트 &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage :: RepresentationsController&lt;/a&gt; 차례로이 사용 &lt;code&gt;service_call&lt;/code&gt; 의 의 리디렉션 방법.</target>
        </trans-unit>
        <trans-unit id="aa5e7edf6ba7a0aa1aad61c5f1969886de7f0c41" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;url_for(variant)&lt;/code&gt; (or the implied form, like +link_to variant+ or +redirect_to variant+) to get the stable URL for a variant that points to the ActiveStorage::RepresentationsController, which in turn will use this &lt;code&gt;service_call&lt;/code&gt; method for its redirection.</source>
          <target state="translated">사용 &lt;code&gt;url_for(variant)&lt;/code&gt; 변형의 안정적인 URL을 얻기 위해 (또는 + LINK_TO 변형 + 나 + redirect_to 변형 + 같은 묵시적 양식을,) 그 ActiveStorage :: RepresentationsController 차례로이 사용 포인트 &lt;code&gt;service_call&lt;/code&gt; 의 의 리디렉션 방법.</target>
        </trans-unit>
        <trans-unit id="a17f1c06d0a981dbe36a183966b72ecb02d25ddf" translate="yes" xml:space="preserve">
          <source>Use Case</source>
          <target state="translated">사용 사례</target>
        </trans-unit>
        <trans-unit id="26f404eb8cc8ae0980b6b401669aec365ac80afc" translate="yes" xml:space="preserve">
          <source>Use Rails default banner.</source>
          <target state="translated">Rails 기본 배너를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bed922950e1655b47caa5f635e2de962347f8612" translate="yes" xml:space="preserve">
          <source>Use Rails' default banner.</source>
          <target state="translated">Rails의 기본 배너를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1e7e93c5643fb11747c304691bdb43553979a7ff" translate="yes" xml:space="preserve">
          <source>Use \ to escape special characters if you want to match them verbatim.</source>
          <target state="translated">특수 문자를 그대로 사용하려면 \를 사용하여 특수 문자를 이스케이프하십시오.</target>
        </trans-unit>
        <trans-unit id="c4cabf2287be80fce231291c8267ef9ac7b9acb3" translate="yes" xml:space="preserve">
          <source>Use a local cache for the duration of block.</source>
          <target state="translated">차단 기간 동안 로컬 캐시를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="aedb330d12cbf1620bd966a90efc93a32a8337e8" translate="yes" xml:space="preserve">
          <source>Use a specified connection.</source>
          <target state="translated">지정된 연결을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="51ae29353f1aced001bf2b6f5c582e01012c3c7c" translate="yes" xml:space="preserve">
          <source>Use before_action except: [...] instead of only: [...] for security-related actions. This way you don't forget to enable security checks for newly added actions.</source>
          <target state="translated">보안 관련 작업에는 [...] 대신 다음과 같은 경우를 제외하고 before_action을 사용하십시오. 이렇게하면 새로 추가 된 작업에 대한 보안 검사를 활성화하는 것을 잊지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="ebec1e4a0f5d2c5515d720ad801748906b023707" translate="yes" xml:space="preserve">
          <source>Use integration style controller tests over functional style controller tests.</source>
          <target state="translated">기능적 스타일 컨트롤러 테스트보다 통합 스타일 컨트롤러 테스트를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="901598c803b9a7be459086d4067ed62745aa494f" translate="yes" xml:space="preserve">
          <source>Use only for reading.</source>
          <target state="translated">독서 용으로 만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="fa4f3cb54f8fc6394a2cd5527926a3d8e3241fa9" translate="yes" xml:space="preserve">
          <source>Use symbol keyed options to add attributes to the generated tag.</source>
          <target state="translated">심볼 키 옵션을 사용하여 생성 된 태그에 속성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="fab7cf7741e6eb878a9e07c53a8b569134d53b6d" translate="yes" xml:space="preserve">
          <source>Use that class method when you need to know the ordinal value of an enum. For example, you can use that when manually building SQL strings:</source>
          <target state="translated">열거 형의 서수 값을 알아야 할 때 해당 클래스 메서드를 사용하십시오. 예를 들어, SQL 문자열을 수동으로 빌드 할 때 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5abf28e6ad48f1bf6c454117025a4849e3edc4f0" translate="yes" xml:space="preserve">
          <source>Use the :filter_html option to remove HTML which was not created by the Textile processor.</source>
          <target state="translated">텍스타일 프로세서가 작성하지 않은 HTML을 제거하려면 : filter_html 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4300d4a3163af1dc8413ba88975cc0a4205eaa7b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:filter_html&lt;/code&gt; option to remove HTML which was not created by the Textile processor.</source>
          <target state="translated">&lt;code&gt;:filter_html&lt;/code&gt; 옵션을 사용하여 텍스타일 프로세서에 의해 생성되지 않은 HTML을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="b50a3385aecdb9f3669d0dd02838831cce505e9e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;content_security_policy_report_only&lt;/code&gt; configuration attribute to set &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only&quot;&gt;Content-Security-Policy-Report-Only&lt;/a&gt; in order to report only content violations for migrating legacy content</source>
          <target state="translated">기존 컨텐츠 마이그레이션에 대한 컨텐츠 위반 &lt;code&gt;content_security_policy_report_only&lt;/code&gt; 하려면 content_security_policy_report_only 구성 속성을 사용하여 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only&quot;&gt;Content-Security-Policy-Report-Only&lt;/a&gt; 를 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="ea696925906e0b613ee942443a5bac4fe4724115" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;distinct&lt;/code&gt; method to keep the collection free of duplicates. This is mostly useful together with the &lt;code&gt;:through&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;distinct&lt;/code&gt; 방법을 사용하여 콜렉션에 중복이 없도록 유지하십시오. 이것은 주로 &lt;code&gt;:through&lt;/code&gt; 옵션 과 함께 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="2590c4c46cbbf2ff350679676a2daf370586db9e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;distinct&lt;/code&gt; method to remove duplicates from the collection.</source>
          <target state="translated">&lt;code&gt;distinct&lt;/code&gt; 방법을 사용하여 콜렉션에서 중복을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="4046c9518ae532020a664bf6be664f8a8e3cbae4" translate="yes" xml:space="preserve">
          <source>Use the logger configured for &lt;a href=&quot;base&quot;&gt;&lt;code&gt;ActionMailer::Base&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;base&quot;&gt; &lt;code&gt;ActionMailer::Base&lt;/code&gt; &lt;/a&gt; 대해 구성된 로거를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="20bfe585e9e1c970f2c9ac6250e74b949db5037c" translate="yes" xml:space="preserve">
          <source>Use the logger configured for &lt;a href=&quot;base&quot;&gt;ActionMailer::Base&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;base&quot;&gt;ActionMailer :: Base로&lt;/a&gt; 구성된 로거를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="be25d2c50b3a98e48c767577f64f752714e885a4" translate="yes" xml:space="preserve">
          <source>Use the named concerns</source>
          <target state="translated">명명 된 우려 사항 사용</target>
        </trans-unit>
        <trans-unit id="19c7d249fd08c6e3f63c4d63714724cce8d7eab4" translate="yes" xml:space="preserve">
          <source>Use the reversible method in &lt;code&gt;#change&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;#change&lt;/code&gt; 메소드 에서 가역 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebd6ca02c5e3bebbf6d0dbdd9646e3c46012fecb" translate="yes" xml:space="preserve">
          <source>Use the time in UTC for comparisons.</source>
          <target state="translated">비교를 위해 UTC로 시간을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="604a226219823e732dca84b27b5cdd3cd3650c73" translate="yes" xml:space="preserve">
          <source>Use this if you already have some hash and you want to create a new one based on it.</source>
          <target state="translated">이미 해시가 있고이를 기반으로 새 해시를 생성하려는 경우이를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="88f8e4b3dd276e55fd0c57f5caa3dd71e543517f" translate="yes" xml:space="preserve">
          <source>Use this macro in your model to set a default scope for all operations on the model.</source>
          <target state="translated">모델에서이 매크로를 사용하여 모델의 모든 작업에 대한 기본 범위를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="134df6ad14a1550af1187abfda16cde343d20a3d" translate="yes" xml:space="preserve">
          <source>Use this method carefully as browser/proxy won't be able to invalidate the cached response unless browser cache is forcefully cleared.</source>
          <target state="translated">브라우저 / 프록시가 브라우저 캐시를 강제로 지우지 않으면 캐시 된 응답을 무효화 할 수 없으므로이 방법을주의해서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="06555ead0dcfcbb1deffcb46e9a485042942d259" translate="yes" xml:space="preserve">
          <source>Use this method in code that absolutely needs a certain constant to be defined at that point. A typical use case is to make constant name resolution deterministic for constants with the same relative name in different namespaces whose evaluation would depend on load order otherwise.</source>
          <target state="translated">이 시점에서 특정 상수를 정의해야하는 코드에서이 방법을 사용하십시오. 일반적인 사용 사례는로드 이름에 따라 평가가 달라지는 다른 네임 스페이스에서 동일한 상대 이름을 가진 상수에 대해 상수 이름 확인을 결정적으로 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d20515f3c9dee7633547ddf24e8894a446a15293" translate="yes" xml:space="preserve">
          <source>Use this method to shell out to a system library (e.g. muPDF or FFmpeg) for preview image generation. The resulting tempfile can be used as the &lt;code&gt;:io&lt;/code&gt; value in an attachable Hash:</source>
          <target state="translated">미리보기 이미지 생성을 위해이 방법을 사용하여 시스템 라이브러리 (예 : muPDF 또는 FFmpeg)에 셸 아웃하십시오. 결과 임시 파일은 첨부 가능한 해시에서 &lt;code&gt;:io&lt;/code&gt; 값 으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba4ef1e25a00a0e7968bc38685effb83807cff44" translate="yes" xml:space="preserve">
          <source>Use to indicate that the given &lt;code&gt;table_names&lt;/code&gt; are referenced by an SQL string, and should therefore be JOINed in any query rather than loaded separately. This method only works in conjunction with &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;&lt;code&gt;includes&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;&lt;code&gt;includes&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">주어진 &lt;code&gt;table_names&lt;/code&gt; 가 SQL 문자열에 의해 참조되고 따라서 별도로로드되지 않고 모든 쿼리에서 조인되어야 함을 나타내는 데 사용합니다 . 이 방법 &lt;a href=&quot;querymethods#method-i-includes&quot;&gt; &lt;code&gt;includes&lt;/code&gt; &lt;/a&gt; 와 함께 사용할 때만 작동합니다 . 자세한 내용 &lt;a href=&quot;querymethods#method-i-includes&quot;&gt; &lt;code&gt;includes&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="df8e9498307dfce677563bfd75fe3100d5a5a7b5" translate="yes" xml:space="preserve">
          <source>Use to indicate that the given &lt;code&gt;table_names&lt;/code&gt; are referenced by an SQL string, and should therefore be JOINed in any query rather than loaded separately. This method only works in conjunction with &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;includes&lt;/a&gt;. See &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;includes&lt;/a&gt; for more details.</source>
          <target state="translated">제공된 &lt;code&gt;table_names&lt;/code&gt; 가 SQL 문자열에 의해 참조되므로 별도로로드하지 않고 모든 쿼리에서 JOIN되어야 함을 나타내는 데 사용하십시오 . 이 방법 &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;은 include&lt;/a&gt; 와 함께 만 작동합니다 . 자세한 내용 &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;은 포함&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="958c5bdd51daee8fe48eb9a20d23379dfdc76ad3" translate="yes" xml:space="preserve">
          <source>Use your existing &lt;code&gt;secret_key_base&lt;/code&gt; from the &lt;code&gt;secret_token.rb&lt;/code&gt; initializer to set the &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt; environment variable for whichever users running the Rails application in production. Alternatively, you can simply copy the existing &lt;code&gt;secret_key_base&lt;/code&gt; from the &lt;code&gt;secret_token.rb&lt;/code&gt; initializer to &lt;code&gt;secrets.yml&lt;/code&gt; under the &lt;code&gt;production&lt;/code&gt; section, replacing &lt;code&gt;&amp;lt;%= ENV[&quot;SECRET_KEY_BASE&quot;] %&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;secret_token.rb&lt;/code&gt; 이니셜 라이저 의 기존 &lt;code&gt;secret_key_base&lt;/code&gt; 를 사용하여 프로덕션에서 Rails 애플리케이션을 실행하는 사용자에 대해 &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt; 환경 변수 를 설정하십시오 . 또는 기존 &lt;code&gt;secret_key_base&lt;/code&gt; 를 &lt;code&gt;secret_token.rb&lt;/code&gt; 이니셜 라이저 에서 &lt;code&gt;production&lt;/code&gt; 섹션 아래의 &lt;code&gt;secrets.yml&lt;/code&gt; 로 복사 하여 &lt;code&gt;&amp;lt;%= ENV[&quot;SECRET_KEY_BASE&quot;] %&amp;gt;&lt;/code&gt; 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3e811188cf667a2f4f3762760c3cc63817ef388" translate="yes" xml:space="preserve">
          <source>Use your existing &lt;code&gt;secret_key_base&lt;/code&gt; from the &lt;code&gt;secret_token.rb&lt;/code&gt; initializer to set the SECRET_KEY_BASE environment variable for whichever users running the Rails application in production mode. Alternatively, you can simply copy the existing &lt;code&gt;secret_key_base&lt;/code&gt; from the &lt;code&gt;secret_token.rb&lt;/code&gt; initializer to &lt;code&gt;secrets.yml&lt;/code&gt; under the &lt;code&gt;production&lt;/code&gt; section, replacing '&amp;lt;%= ENV[&quot;SECRET_KEY_BASE&quot;] %&amp;gt;'.</source>
          <target state="translated">&lt;code&gt;secret_token.rb&lt;/code&gt; 이니셜 라이저 의 기존 &lt;code&gt;secret_key_base&lt;/code&gt; 를 사용하여 프로덕션 모드에서 Rails 애플리케이션을 실행하는 사용자에 대해 SECRET_KEY_BASE 환경 변수를 설정하십시오. 또는 기존 &lt;code&gt;secret_key_base&lt;/code&gt; 를 &lt;code&gt;secret_token.rb&lt;/code&gt; 초기화 프로그램 에서 &lt;code&gt;production&lt;/code&gt; 섹션의 &lt;code&gt;secrets.yml&lt;/code&gt; 로 복사 하여 '&amp;lt;% = ENV [ &quot;SECRET_KEY_BASE&quot;] %&amp;gt;'를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bad41f2ae4411b72bd31379fd06b8d2ebfe030f5" translate="yes" xml:space="preserve">
          <source>Used by &lt;a href=&quot;base#method-i-mail&quot;&gt;&lt;code&gt;mail&lt;/code&gt;&lt;/a&gt; to set the content type of the message.</source>
          <target state="translated">&lt;a href=&quot;base#method-i-mail&quot;&gt; &lt;code&gt;mail&lt;/code&gt; &lt;/a&gt; 에서 메시지의 내용 유형을 설정하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="32ca60b01a12a103be58fe7235a10b686a069e56" translate="yes" xml:space="preserve">
          <source>Used by &lt;a href=&quot;base#method-i-mail&quot;&gt;mail&lt;/a&gt; to set the content type of the message.</source>
          <target state="translated">&lt;a href=&quot;base#method-i-mail&quot;&gt;메일&lt;/a&gt; 의 메시지 내용 유형을 설정하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c7ae3e9071b62b4104b2482b330f6dfb5ca9d821" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;Static&lt;/code&gt; class to check the existence of a valid file in the server's &lt;code&gt;public/&lt;/code&gt; directory (see &lt;a href=&quot;static#method-i-call&quot;&gt;ActionDispatch::Static#call&lt;/a&gt;).</source>
          <target state="translated">서버의 &lt;code&gt;public/&lt;/code&gt; 디렉토리 에 유효한 파일이 있는지 확인하기 위해 &lt;code&gt;Static&lt;/code&gt; 클래스에서 사용합니다 ( &lt;a href=&quot;static#method-i-call&quot;&gt;ActionDispatch :: Static # call 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="d678e1d1c674d84cb7906827a13797c8cc50edba" translate="yes" xml:space="preserve">
          <source>Used for</source>
          <target state="translated">사용</target>
        </trans-unit>
        <trans-unit id="2b1b36bcffe16e9b93df752661b8c0397f38b2ed" translate="yes" xml:space="preserve">
          <source>Used for memory caching. This cache is not thread safe.</source>
          <target state="translated">메모리 캐싱에 사용됩니다. 이 캐시는 스레드 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="514a7490440f51de257674d689e8b288bee09457" translate="yes" xml:space="preserve">
          <source>Used for thread safe code reloading during development.</source>
          <target state="translated">개발 중에 스레드 안전 코드를 다시로드하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="97e1938f542aca745007c1fdd487eca665009c3f" translate="yes" xml:space="preserve">
          <source>Used in &lt;code&gt;ActionController::Base&lt;/code&gt; and &lt;code&gt;ActionController::API&lt;/code&gt; to include all renderers by default.</source>
          <target state="translated">에서 사용 &lt;code&gt;ActionController::Base&lt;/code&gt; 와 &lt;code&gt;ActionController::API&lt;/code&gt; 기본적으로 모든 렌더러를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="16320627b2911e853ea13a759ed559c7ac1824a1" translate="yes" xml:space="preserve">
          <source>Used in cases where a method or scope could return zero records but the result needs to be chainable.</source>
          <target state="translated">메소드 또는 범위가 0 레코드를 리턴 할 수 있지만 결과를 체인 가능해야하는 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="956030772ed680b410762c1da2637605b1ba46d6" translate="yes" xml:space="preserve">
          <source>Used to avoid updating the counter cache unnecessarily.</source>
          <target state="translated">카운터 캐시가 불필요하게 업데이트되지 않도록하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6f592248d356cdfe10cd072a97e114514d9f02ed" translate="yes" xml:space="preserve">
          <source>Used to extend a scope with additional methods, either through a module or through a block provided.</source>
          <target state="translated">모듈이나 제공된 블록을 통해 추가 방법으로 범위를 확장하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="72e93f3a23186570dcca957e636dabf8a1e4ecde" translate="yes" xml:space="preserve">
          <source>Used to serve static files from the public directory. Disabled if &lt;code&gt;config.public_file_server.enabled&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">공용 디렉토리에서 정적 파일을 제공하는 데 사용됩니다. &lt;code&gt;config.public_file_server.enabled&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 인 경우 비활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="04197c85751f127a95a62d791131086b5bb5150c" translate="yes" xml:space="preserve">
          <source>Used to specify an operation that can be run in one direction or another. Call the methods &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; of the yielded object to run a block only in one given direction. The whole block will be called in the right order within the migration.</source>
          <target state="translated">한 방향 또는 다른 방향으로 실행할 수있는 작업을 지정하는 데 사용됩니다. 방법 전화 &lt;code&gt;up&lt;/code&gt; 하고 &lt;code&gt;down&lt;/code&gt; 하나 개의 주어진 방향으로 블록을 실행 수득 된 개체를. 전체 블록은 마이그레이션 내에서 올바른 순서로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="91525b7d9cd32254b4e0ea0ba41129b93c07a0e5" translate="yes" xml:space="preserve">
          <source>Used to specify an operation that is only run when migrating up (for example, populating a new column with its initial values).</source>
          <target state="translated">마이그레이션 할 때만 실행되는 작업을 지정하는 데 사용됩니다 (예 : 초기 값으로 새 열 채우기).</target>
        </trans-unit>
        <trans-unit id="89738fbe783a7db5d7b75f3c0a4098fda98cb267" translate="yes" xml:space="preserve">
          <source>Useful to check whether a connection's &lt;code&gt;identified_by&lt;/code&gt; gets assigned properly and that any improper connection requests are rejected.</source>
          <target state="translated">연결의 &lt;code&gt;identified_by&lt;/code&gt; _by가 올바르게 할당되었는지와 부적합한 연결 요청이 거부 되었는지 확인하는 데 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="5ca6e571e0d3add6b3954eb296783de689f78dc1" translate="yes" xml:space="preserve">
          <source>User Management</source>
          <target state="translated">사용자 관리</target>
        </trans-unit>
        <trans-unit id="bc69f43450d8bd0922dbc92c9debe3313e180189" translate="yes" xml:space="preserve">
          <source>User defined rake tasks will run in the &lt;code&gt;development&lt;/code&gt; environment by default. If you want them to run in other environments consult the &lt;a href=&quot;https://github.com/rails/spring#rake&quot;&gt;Spring README&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 레이크 작업은 기본적으로 &lt;code&gt;development&lt;/code&gt; 환경 에서 실행됩니다 . 다른 환경에서 실행하려면 &lt;a href=&quot;https://github.com/rails/spring#rake&quot;&gt;Spring README를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8de1c438cd690d13596dc6b6ce9feb2a2fd60d13" translate="yes" xml:space="preserve">
          <source>Users may also define their own custom types, as long as they respond to the methods defined on the value type. The method &lt;code&gt;deserialize&lt;/code&gt; or &lt;code&gt;cast&lt;/code&gt; will be called on your type object, with raw input from the database or from your controllers. See &lt;a href=&quot;../../activemodel/type/value&quot;&gt;&lt;code&gt;ActiveModel::Type::Value&lt;/code&gt;&lt;/a&gt; for the expected API. It is recommended that your type objects inherit from an existing type, or from &lt;a href=&quot;../../activemodel/type/value&quot;&gt;&lt;code&gt;ActiveRecord::Type::Value&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">사용자는 값 유형에 정의 된 메소드에 응답하는 한 고유 한 사용자 정의 유형을 정의 할 수도 있습니다. &lt;code&gt;deserialize&lt;/code&gt; 또는 &lt;code&gt;cast&lt;/code&gt; 메서드 는 데이터베이스 또는 컨트롤러의 원시 입력으로 형식 개체에서 호출됩니다. 예상되는 API는 &lt;a href=&quot;../../activemodel/type/value&quot;&gt; &lt;code&gt;ActiveModel::Type::Value&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 . 유형 객체는 기존 유형 또는 &lt;a href=&quot;../../activemodel/type/value&quot;&gt; &lt;code&gt;ActiveRecord::Type::Value&lt;/code&gt; &lt;/a&gt; 에서 상속하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d96a0f2a2f93f83c4e4332a2c73f40caf7f1512d" translate="yes" xml:space="preserve">
          <source>Users may also define their own custom types, as long as they respond to the methods defined on the value type. The method &lt;code&gt;deserialize&lt;/code&gt; or &lt;code&gt;cast&lt;/code&gt; will be called on your type object, with raw input from the database or from your controllers. See &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; for the expected API. It is recommended that your type objects inherit from an existing type, or from &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveRecord::Type::Value&lt;/a&gt;</source>
          <target state="translated">사용자는 값 유형에 정의 된 메소드에 응답하는 한 자신의 사용자 정의 유형을 정의 할 수도 있습니다. &lt;code&gt;deserialize&lt;/code&gt; 또는 &lt;code&gt;cast&lt;/code&gt; 메소드 는 데이터베이스 또는 컨트롤러에서 원시 입력을 사용하여 유형 객체에서 호출됩니다. 예상되는 API는 &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel :: Type :: Value&lt;/a&gt; 를 참조하십시오 . 형식 개체는 기존 형식 또는 &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveRecord :: Type :: Value&lt;/a&gt; 에서 상속하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="af591d3cafb58d557fae8697018c7e4252bb9cab" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to provide precise &lt;a href=&quot;../time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; calculations for years, months, and days according to the proleptic Gregorian calendar. The result is returned as a new &lt;a href=&quot;timewithzone&quot;&gt;&lt;code&gt;TimeWithZone&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 를 사용 하여 proleptic Gregorian 달력에 따라 년, 월 및 일에 대한 정확한 &lt;a href=&quot;../time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt; 계산 을 제공합니다 . 결과는 새 &lt;a href=&quot;timewithzone&quot;&gt; &lt;code&gt;TimeWithZone&lt;/code&gt; &lt;/a&gt; 객체 로 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="db8d27f42fe698ba4cd4ab166c6645bd7165c8d2" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt; to provide precise &lt;a href=&quot;../time&quot;&gt;Time&lt;/a&gt; calculations for years, months, and days according to the proleptic Gregorian calendar. The result is returned as a new &lt;a href=&quot;timewithzone&quot;&gt;TimeWithZone&lt;/a&gt; object.</source>
          <target state="translated">Proleptic Gregorian 달력에 따라 &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt; 를 사용 하여 년, 월 및 일에 대한 정확한 &lt;a href=&quot;../time&quot;&gt;시간&lt;/a&gt; 계산 을 제공합니다 . 결과는 새로운 &lt;a href=&quot;timewithzone&quot;&gt;TimeWithZone&lt;/a&gt; 객체 로 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="65770bd8041e7b0757abe4912d4e7a32b04675bd" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to provide precise &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; calculations for years, months, and days according to the proleptic Gregorian calendar. The &lt;code&gt;options&lt;/code&gt; parameter takes a hash with any of these keys: &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, &lt;code&gt;:seconds&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 를 사용 하여 proleptic Gregorian 달력에 따라 년, 월 및 일에 대한 정확한 &lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt; 계산 을 제공합니다 . &lt;code&gt;options&lt;/code&gt; 이 키 중 하나와 해시를 취 매개 변수 : &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; , &lt;code&gt;:days&lt;/code&gt; , &lt;code&gt;:hours&lt;/code&gt; , &lt;code&gt;:minutes&lt;/code&gt; , &lt;code&gt;:seconds&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6bea030f4e5aa7dd459f4d2415261e718a7922e2" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to provide precise &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; calculations for years, months, and days. The &lt;code&gt;options&lt;/code&gt; parameter takes a hash with any of these keys: &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, &lt;code&gt;:seconds&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 를 사용 하여 년, 월, 일에 대한 정확한 &lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt; 계산 을 제공합니다 . &lt;code&gt;options&lt;/code&gt; 이 키 중 하나와 해시를 취 매개 변수 : &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; , &lt;code&gt;:days&lt;/code&gt; , &lt;code&gt;:hours&lt;/code&gt; , &lt;code&gt;:minutes&lt;/code&gt; , &lt;code&gt;:seconds&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52670980f6a057673646f8676ea6ee713fa9c10f" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;date&quot;&gt;Date&lt;/a&gt; to provide precise &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; calculations for years, months, and days according to the proleptic Gregorian calendar. The &lt;code&gt;options&lt;/code&gt; parameter takes a hash with any of these keys: &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, &lt;code&gt;:seconds&lt;/code&gt;.</source>
          <target state="translated">Proleptic Gregorian 달력에 따라 &lt;a href=&quot;date&quot;&gt;Date&lt;/a&gt; 를 사용 하여 년, 월 및 일에 대한 정확한 &lt;a href=&quot;time&quot;&gt;시간&lt;/a&gt; 계산 을 제공합니다 . &lt;code&gt;options&lt;/code&gt; 이 키 중 하나와 해시를 취 매개 변수 : &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; , &lt;code&gt;:days&lt;/code&gt; , &lt;code&gt;:hours&lt;/code&gt; , &lt;code&gt;:minutes&lt;/code&gt; , &lt;code&gt;:seconds&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5040634ced459a0127c4fdadffadd779e1b70be6" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;date&quot;&gt;Date&lt;/a&gt; to provide precise &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; calculations for years, months, and days. The &lt;code&gt;options&lt;/code&gt; parameter takes a hash with any of these keys: &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, &lt;code&gt;:seconds&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;date&quot;&gt;Date&lt;/a&gt; 를 사용 하여 년, 월 및 일에 대한 정확한 &lt;a href=&quot;time&quot;&gt;시간&lt;/a&gt; 계산 을 제공합니다 . &lt;code&gt;options&lt;/code&gt; 이 키 중 하나와 해시를 취 매개 변수 : &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; , &lt;code&gt;:days&lt;/code&gt; , &lt;code&gt;:hours&lt;/code&gt; , &lt;code&gt;:minutes&lt;/code&gt; , &lt;code&gt;:seconds&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5eeac64e9013b0f5b4be64a298f24b0464f9f1cb" translate="yes" xml:space="preserve">
          <source>Uses an MD5 digest based on time to generate a value to be used only once.</source>
          <target state="translated">시간에 따라 MD5 다이제스트를 사용하여 한 번만 사용할 값을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="79fafb5c4a55b7390185721a11815aae5f26e3a9" translate="yes" xml:space="preserve">
          <source>Uses the internal channel to disconnect the connection.</source>
          <target state="translated">내부 채널을 사용하여 연결을 끊습니다.</target>
        </trans-unit>
        <trans-unit id="e956017bff10fa87252a6efee7ede0ff681c8b34" translate="yes" xml:space="preserve">
          <source>Using .gemspecs as Intended</source>
          <target state="translated">의도 한대로 .gemspecs 사용</target>
        </trans-unit>
        <trans-unit id="1a45a1854c029fad86f58cc64d3f32eaa571e8d1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:as&lt;/code&gt; in Nested Resources</source>
          <target state="translated">중첩 된 리소스에서 &lt;code&gt;:as&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="b6d361e456c9f8b3ec5c765405e6c85ce97180cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Proc&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;:if&lt;/code&gt; 와 &lt;code&gt;:unless&lt;/code&gt; A를 &lt;code&gt;Proc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c61e9703d2e3bcc88f03129ac3d9e0f0b34714cc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Symbol&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;:if&lt;/code&gt; 와 &lt;code&gt;:unless&lt;/code&gt; A의 &lt;code&gt;Symbol&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fda2ff294ecaf73403c0dc270c23cf45258a2165" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:locale&lt;/code&gt; option:</source>
          <target state="translated">사용 &lt;code&gt;:locale&lt;/code&gt; 옵션 :</target>
        </trans-unit>
        <trans-unit id="30368b696f08cb91014e942bfe032a57ea1dbb62" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Class#class_eval&lt;/code&gt; is great for simple adjustments, but for more complex class modifications, you might want to consider using &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt;&lt;code&gt;ActiveSupport::Concern&lt;/code&gt;&lt;/a&gt;. ActiveSupport::Concern manages load order of interlinked dependent modules and classes at run time allowing you to significantly modularize your code.</source>
          <target state="translated">&lt;code&gt;Class#class_eval&lt;/code&gt; 을 사용 하면 간단한 조정에 유용 하지만보다 복잡한 클래스 수정에는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt; &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; &lt;/a&gt; 사용을 고려할 수 있습니다 . ActiveSupport :: Concern은 런타임에 상호 연결된 종속 모듈 및 클래스의로드 순서를 관리하여 코드를 크게 모듈화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54355e2e4a968962a99e92e45ac6c3ea55540372" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ERB&lt;/code&gt;, you can also inject dynamic values into your fixtures with inserts like &lt;code&gt;&amp;lt;%= Date.today.strftime(&quot;%Y-%m-%d&quot;) %&amp;gt;&lt;/code&gt;. This is however a feature to be used with some caution. The point of fixtures are that they're stable units of predictable sample data. If you feel that you need to inject dynamic values, then perhaps you should reexamine whether your application is properly testable. Hence, dynamic values in fixtures are to be considered a code smell.</source>
          <target state="translated">&lt;code&gt;ERB&lt;/code&gt; 를 사용하면 &lt;code&gt;&amp;lt;%= Date.today.strftime(&quot;%Y-%m-%d&quot;) %&amp;gt;&lt;/code&gt; 과 같은 삽입물로 조명기에 동적 값을 주입 할 수도 있습니다 . 그러나 이것은주의해서 사용해야하는 기능입니다. 조명기의 요점은 예측 가능한 샘플 데이터의 안정적인 단위라는 것입니다. 동적 값을 삽입해야한다고 생각되면 애플리케이션이 제대로 테스트 가능한지 재검토해야합니다. 따라서 조명기의 동적 값은 코드 냄새로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="2b8036442bd3bd3ee409ed5d6b9d80a18c60c9bf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;OrderedOptions&lt;/code&gt;, the above code can be written as:</source>
          <target state="translated">&lt;code&gt;OrderedOptions&lt;/code&gt; 를 사용 하면 위의 코드를 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bef57ac02b970daacc2b2fc67d2082eacfa334ab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;OrderedOptions&lt;/code&gt;, the above code could be reduced to:</source>
          <target state="translated">&lt;code&gt;OrderedOptions&lt;/code&gt; 를 사용 하면 위 코드를 다음과 같이 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3f1b10eabf3885e7fbfa38e98ce85edbc2c9c67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;details&lt;/code&gt; with custom validators is covered in the &lt;a href=&quot;#working-with-validation-errors&quot;&gt;Working with Validation Errors&lt;/a&gt; section.</source>
          <target state="translated">사용자 지정 유효성 검사기와 함께 &lt;code&gt;details&lt;/code&gt; 를 사용 &lt;a href=&quot;#working-with-validation-errors&quot;&gt;하는 경우 유효성 검사 오류 작업&lt;/a&gt; 섹션에서 다룹니다.</target>
        </trans-unit>
        <trans-unit id="755947a768015124d07549d4e813e750bae27248" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;form_tag&lt;/code&gt; and &lt;code&gt;form_for&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;form_tag&lt;/code&gt; 및 &lt;code&gt;form_for&lt;/code&gt; 를</target>
        </trans-unit>
        <trans-unit id="4e26e907726fee95003c34aed3c35cb55cf263ad" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;head&lt;/code&gt; To Build Header-Only Responses</source>
          <target state="translated">&lt;code&gt;head&lt;/code&gt; 만 사용하여 헤더 전용 응답 작성</target>
        </trans-unit>
        <trans-unit id="ec0a2f4b1cb6627a64af32d9baae3c063d752c40" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;redirect_to&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;redirect_to&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="c34f25e0ec395f5452eb90d0d02b342464eb2744" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;render&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="3c3a3fe0d8933ce00db0895cd486bf3dc564d1b6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;rescue_from&lt;/code&gt; with &lt;code&gt;Exception&lt;/code&gt; or &lt;code&gt;StandardError&lt;/code&gt; would cause serious side-effects as it prevents Rails from handling exceptions properly. As such, it is not recommended to do so unless there is a strong reason.</source>
          <target state="translated">&lt;code&gt;Exception&lt;/code&gt; 또는 &lt;code&gt;StandardError&lt;/code&gt; 와 함께 &lt;code&gt;rescue_from&lt;/code&gt; 을 사용 하면 Rails가 예외를 올바르게 처리하지 못하므로 심각한 부작용이 발생할 수 있습니다. 따라서 강력한 이유가없는 한 그렇게하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="0e5dffcbc275081fb12b83397187245d58456dc2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;resolve&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;resolve&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="56f4662a7096f000433e6b4a9084757e43f4977a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;reversible&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reversible&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0ef61be3f99b31a04f5d1aec9bb7d9c7d696ee8f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;reversible&lt;/code&gt; will ensure that the instructions are executed in the right order too. If the previous example migration is reverted, the &lt;code&gt;down&lt;/code&gt; block will be run after the &lt;code&gt;home_page_url&lt;/code&gt; column is removed and right before the table &lt;code&gt;distributors&lt;/code&gt; is dropped.</source>
          <target state="translated">&lt;code&gt;reversible&lt;/code&gt; 을 사용 하면 명령도 올바른 순서로 실행됩니다. 이전 예제 마이그레이션이 되 &lt;code&gt;home_page_url&lt;/code&gt; 열이 제거 된 후 테이블 &lt;code&gt;distributors&lt;/code&gt; 가 삭제 되기 직전에 &lt;code&gt;down&lt;/code&gt; 블록이 실행 됩니다 .</target>
        </trans-unit>
        <trans-unit id="eec9f30d27d6d70d3264961c05ab7e4f85d4b976" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;root&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="761245540698f2d11c0a3828a047a6ac3cf71b0c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;scope&lt;/code&gt;, we can alter path names generated by &lt;code&gt;resources&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 을 사용하여 &lt;code&gt;resources&lt;/code&gt; 에 의해 생성 된 경로 이름을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="93e741feae9b800b8bf3041dab9968f2241a1deb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;t.bigint :supplier_id&lt;/code&gt; makes the foreign key naming obvious and explicit. In current versions of Rails, you can abstract away this implementation detail by using &lt;code&gt;t.references :supplier&lt;/code&gt; instead.</source>
          <target state="translated">사용 &lt;code&gt;t.bigint :supplier_id&lt;/code&gt; 분명하고 명시 적으로 명명 외래 키를 만든다. 현재 Rails 버전에서는 &lt;code&gt;t.references :supplier&lt;/code&gt; 대신 사용 하여이 구현 세부 사항을 추상화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="268c16bfef01e6ad855010c27e0131589bf60442" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;where&lt;/code&gt; like this will only work when you pass it a Hash. For SQL-fragments you need to use &lt;code&gt;references&lt;/code&gt; to force joined tables:</source>
          <target state="translated">이와 같은 &lt;code&gt;where&lt;/code&gt; 사용 하면 해시를 전달할 때만 작동합니다. SQL 조각의 경우 &lt;code&gt;references&lt;/code&gt; 를 사용 하여 조인 된 테이블을 강제 실행 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ee0d347a14edcc5b4e6139a52d4ba2a529ba6717" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;with_options&lt;/code&gt;, we can remove the duplication:</source>
          <target state="translated">&lt;code&gt;with_options&lt;/code&gt; 를 사용 하여 중복을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1619d01885f58fab7932830dc9006ed21c70b59" translate="yes" xml:space="preserve">
          <source>Using Action Mailer Helpers</source>
          <target state="translated">Action Mailer 헬퍼 사용</target>
        </trans-unit>
        <trans-unit id="f4801bfa85cb4646ac866191b4ff929e6c94d479" translate="yes" xml:space="preserve">
          <source>Using Action View with Rails</source>
          <target state="translated">레일과 함께 액션 뷰 사용</target>
        </trans-unit>
        <trans-unit id="689b87a4c52c48aa5c75e211634ce8d6e5176f48" translate="yes" xml:space="preserve">
          <source>Using ActionDispatch::Request</source>
          <target state="translated">ActionDispatch :: Request 사용</target>
        </trans-unit>
        <trans-unit id="98b4728e19597ee77408adeedb067e58164f4ce8" translate="yes" xml:space="preserve">
          <source>Using Active Record, Redis, etc within your channel actions means you'll get a separate connection from each thread in the worker pool. Plan your deployment accordingly: 5 servers each running 5 Puma workers each running an 8-thread worker pool means at least 200 database connections.</source>
          <target state="translated">채널 작업 내에서 Active Record, Redis 등을 사용하면 작업자 풀의 각 스레드에서 별도의 연결을 얻을 수 있습니다. 그에 따라 배치를 계획하십시오. 각각 5 개의 서버가 실행 중입니다. 각각 5 개의 Puma 작업자가 각각 8 개의 스레드 작업자 풀을 실행한다는 것은 200 개의 데이터베이스 연결을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b885a388e1785207455bd2726a8add6d27d8bfd9" translate="yes" xml:space="preserve">
          <source>Using Active Storage, an application can transform image uploads with &lt;a href=&quot;https://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt;, generate image representations of non-image uploads like PDFs and videos, and extract metadata from arbitrary files.</source>
          <target state="translated">응용 프로그램은 Active Storage를 사용하여 &lt;a href=&quot;https://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; 으로 이미지 업로드를 변환하고 PDF 및 비디오와 같은 이미지가 아닌 업로드의 이미지 표현을 생성하며 임의의 파일에서 메타 데이터를 추출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fd9a6d2f5e73adc9e665d893c38fe832326da1a" translate="yes" xml:space="preserve">
          <source>Using Concerns</source>
          <target state="translated">우려 사항 사용</target>
        </trans-unit>
        <trans-unit id="023cdb9a7e592718426d2dc557941f6b6cffe0ef" translate="yes" xml:space="preserve">
          <source>Using Date and Time Form Helpers</source>
          <target state="translated">날짜 및 시간 양식 도우미 사용</target>
        </trans-unit>
        <trans-unit id="b0264128715992de2a3caae255bd4b486d078dca" translate="yes" xml:space="preserve">
          <source>Using Different Backends</source>
          <target state="translated">다른 백엔드 사용</target>
        </trans-unit>
        <trans-unit id="6d25a3491e53f3cddb1d54b127f5a17ba102fc8f" translate="yes" xml:space="preserve">
          <source>Using Different Exception Handlers</source>
          <target state="translated">다른 예외 처리기 사용</target>
        </trans-unit>
        <trans-unit id="58638d8c86a7a54ea83d04eda52f2c384a7a582c" translate="yes" xml:space="preserve">
          <source>Using Digest::MD5 generates version 3 UUIDs; Digest::SHA1 generates version 5 UUIDs. &lt;a href=&quot;uuid#method-c-uuid_from_hash&quot;&gt;::uuid_from_hash&lt;/a&gt; always generates the same &lt;a href=&quot;uuid&quot;&gt;UUID&lt;/a&gt; for a given name and namespace combination.</source>
          <target state="translated">Digest :: MD5를 사용하면 버전 3 UUID가 생성됩니다. Digest :: SHA1은 버전 5 UUID를 생성합니다. &lt;a href=&quot;uuid#method-c-uuid_from_hash&quot;&gt;:: uuid_from_hash는&lt;/a&gt; 항상 주어진 이름과 네임 스페이스 조합에 대해 동일한 &lt;a href=&quot;uuid&quot;&gt;UUID&lt;/a&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="1034e9b8d3c8396ab992229c565d7097fa78395b" translate="yes" xml:space="preserve">
          <source>Using Digest::MD5 generates version 3 UUIDs; Digest::SHA1 generates version 5 UUIDs. &lt;a href=&quot;uuid#method-c-uuid_from_hash&quot;&gt;&lt;code&gt;uuid_from_hash&lt;/code&gt;&lt;/a&gt; always generates the same &lt;a href=&quot;uuid&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt; for a given name and namespace combination.</source>
          <target state="translated">Digest :: MD5를 사용하면 버전 3 UUID가 생성됩니다. Digest :: SHA1은 버전 5 UUID를 생성합니다. &lt;a href=&quot;uuid#method-c-uuid_from_hash&quot;&gt; &lt;code&gt;uuid_from_hash&lt;/code&gt; &lt;/a&gt; 는 주어진 이름과 네임 스페이스 조합에 대해 항상 동일한 &lt;a href=&quot;uuid&quot;&gt; &lt;code&gt;UUID&lt;/code&gt; &lt;/a&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="2156c7f04d7195148f3c510e3dfd9851d1e37e5a" translate="yes" xml:space="preserve">
          <source>Using ERB, you can also inject dynamic values into your fixtures with inserts like &lt;code&gt;&amp;lt;%=
Date.today.strftime(&quot;%Y-%m-%d&quot;) %&amp;gt;&lt;/code&gt;. This is however a feature to be used with some caution. The point of fixtures are that they're stable units of predictable sample data. If you feel that you need to inject dynamic values, then perhaps you should reexamine whether your application is properly testable. Hence, dynamic values in fixtures are to be considered a code smell.</source>
          <target state="translated">ERB를 사용하여 &lt;code&gt;&amp;lt;%= Date.today.strftime(&quot;%Y-%m-%d&quot;) %&amp;gt;&lt;/code&gt; 와 같은 삽입을 사용하여 조명기 값에 조명기 값을 주입 할 수도 있습니다 . 그러나 이것은주의해서 사용해야 할 기능입니다. 고정 점은 예측 가능한 샘플 데이터의 안정적인 단위라는 것입니다. 동적 값을 주입해야한다고 생각되면 응용 프로그램이 제대로 테스트 가능한지 여부를 다시 검토해야합니다. 따라서 조명기의 동적 값은 코드 냄새로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="c63d2c88a5a4e17c7a8cfd4d915fe2a626dfa9d7" translate="yes" xml:space="preserve">
          <source>Using Engine's routes outside &lt;a href=&quot;engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Engine 외부의 &lt;a href=&quot;engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt; 경로 사용</target>
        </trans-unit>
        <trans-unit id="fe36e51897a24bbb93f2054ef4f0d1ff67a9dd17" translate="yes" xml:space="preserve">
          <source>Using Engine's routes outside &lt;a href=&quot;engine&quot;&gt;Engine&lt;/a&gt;</source>
          <target state="translated">엔진 외부의 &lt;a href=&quot;engine&quot;&gt;엔진&lt;/a&gt; 경로 사용</target>
        </trans-unit>
        <trans-unit id="a95b2ed1497e192cc87881fabe7ffe384963956d" translate="yes" xml:space="preserve">
          <source>Using Fixtures in Test Cases</source>
          <target state="translated">테스트 사례에서 비품 사용</target>
        </trans-unit>
        <trans-unit id="db97588a7c818188089d64beac1a13913a323bba" translate="yes" xml:space="preserve">
          <source>Using Form Helpers</source>
          <target state="translated">폼 헬퍼 사용하기</target>
        </trans-unit>
        <trans-unit id="bc0482276b0c1c32311dc3afe61a57fca707ec57" translate="yes" xml:space="preserve">
          <source>Using Initializer Files</source>
          <target state="translated">이니셜 라이저 파일 사용</target>
        </trans-unit>
        <trans-unit id="b182a342f13730214993d743c33ab88e4f17ffa2" translate="yes" xml:space="preserve">
          <source>Using Nested Layouts</source>
          <target state="translated">중첩 레이아웃 사용</target>
        </trans-unit>
        <trans-unit id="dd4669ca9c2fe5d3bc7226103f94706530f82eb9" translate="yes" xml:space="preserve">
          <source>Using Partials</source>
          <target state="translated">부분 사용</target>
        </trans-unit>
        <trans-unit id="1d1756ed605c4bde531129152f324f566ad4ddcd" translate="yes" xml:space="preserve">
          <source>Using Rack::Sendfile</source>
          <target state="translated">Rack :: Sendfile 사용</target>
        </trans-unit>
        <trans-unit id="d6df79c4be72b595e98d2693aa2b4a5dae292231" translate="yes" xml:space="preserve">
          <source>Using Rails for API-only Applications</source>
          <target state="translated">API 전용 애플리케이션에 Rails 사용</target>
        </trans-unit>
        <trans-unit id="4bef2888ddda4e0cb2132bc5f2e388ccbde1ae44" translate="yes" xml:space="preserve">
          <source>Using Safe HTML Translations</source>
          <target state="translated">안전한 HTML 번역 사용</target>
        </trans-unit>
        <trans-unit id="45ae04d37a637ec21bed0a7ca69b13f1a808c1c5" translate="yes" xml:space="preserve">
          <source>Using Session Middlewares</source>
          <target state="translated">세션 미들웨어 사용</target>
        </trans-unit>
        <trans-unit id="2a0fb9f3eb8071d4c13d5480e06cb01309dd1770" translate="yes" xml:space="preserve">
          <source>Using Tag Helpers Without a Form Builder</source>
          <target state="translated">양식 작성기없이 태그 도우미 사용</target>
        </trans-unit>
        <trans-unit id="1a1c092a8a121e4cf3eab9a3b63f28450913b696" translate="yes" xml:space="preserve">
          <source>Using Webpacker</source>
          <target state="translated">Webpacker 사용</target>
        </trans-unit>
        <trans-unit id="213d394d6e1fb632b04b4460c21397cd533ef532" translate="yes" xml:space="preserve">
          <source>Using Your Own Compressor</source>
          <target state="translated">자신의 압축기 사용</target>
        </trans-unit>
        <trans-unit id="b879007491eccd6fe1737da3feb44441b98f130d" translate="yes" xml:space="preserve">
          <source>Using a Class Provided by the Application</source>
          <target state="translated">응용 프로그램에서 제공하는 클래스 사용</target>
        </trans-unit>
        <trans-unit id="001a28a7199b3ba7f566896a11f0fc90629e01f9" translate="yes" xml:space="preserve">
          <source>Using a Model to Interact with the Database</source>
          <target state="translated">모델을 사용하여 데이터베이스와 상호 작용</target>
        </trans-unit>
        <trans-unit id="c57fcb3657328d62eb218b876a331c97dc7870ea" translate="yes" xml:space="preserve">
          <source>Using a Proc with &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;:if&lt;/code&gt; 및 &lt;code&gt;:unless&lt;/code&gt; 와 함께 Proc 사용</target>
        </trans-unit>
        <trans-unit id="2195f914c11a6c74a4c824c2f1be36419f3dfb15" translate="yes" xml:space="preserve">
          <source>Using a Symbol with &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;:if&lt;/code&gt; 및 &lt;code&gt;:unless&lt;/code&gt; 와 함께 심볼 사용</target>
        </trans-unit>
        <trans-unit id="9cdf73cd7c50969cdb83f98e51f88fde6bcc1156" translate="yes" xml:space="preserve">
          <source>Using a block</source>
          <target state="translated">블록 사용</target>
        </trans-unit>
        <trans-unit id="ed32afa6e804b4c4f488fd2fc4ed44dc5f7c91ae" translate="yes" xml:space="preserve">
          <source>Using a class method is the preferred way to accept arguments for scopes. These methods will still be accessible on the association objects:</source>
          <target state="translated">클래스 메소드를 사용하는 것이 범위에 대한 인수를 승인하는 선호되는 방법입니다. 이 메소드는 여전히 연관 오브젝트에서 액세스 가능합니다.</target>
        </trans-unit>
        <trans-unit id="fbe9a0432f218f90338c41dfe3c1a24f65a35f1f" translate="yes" xml:space="preserve">
          <source>Using a custom deprecator directly:</source>
          <target state="translated">커스텀 디 프리 케이 터를 직접 사용하기 :</target>
        </trans-unit>
        <trans-unit id="f4851c91b2ad607dec75ecc5584fff41d065b743" translate="yes" xml:space="preserve">
          <source>Using a different layout in the action render call</source>
          <target state="translated">액션 렌더 호출에서 다른 레이아웃 사용</target>
        </trans-unit>
        <trans-unit id="5eeb9ff231016b33951f753c8c0c163bed3faaaa" translate="yes" xml:space="preserve">
          <source>Using a model after changing its table</source>
          <target state="translated">테이블을 변경 한 후 모델 사용</target>
        </trans-unit>
        <trans-unit id="ab15994fed6aed4a7f4ed362a4b401e9650676b1" translate="yes" xml:space="preserve">
          <source>Using a module</source>
          <target state="translated">모듈 사용</target>
        </trans-unit>
        <trans-unit id="ce8b9909e709d9100a56322197d3ae36d46095b7" translate="yes" xml:space="preserve">
          <source>Using an &lt;code&gt;after_action&lt;/code&gt; callback also enables you to override delivery method settings by updating &lt;code&gt;mail.delivery_method.settings&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;after_action&lt;/code&gt; 의 콜백은 또한 업데이트하여 배송 방법 설정을 재정의 할 수 있습니다 &lt;code&gt;mail.delivery_method.settings&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ba85a8af7530f7d54f21ae22192f4284960b4de4" translate="yes" xml:space="preserve">
          <source>Using an engine within an application is very easy. This section covers how to mount the engine into an application and the initial setup required, as well as linking the engine to a &lt;code&gt;User&lt;/code&gt; class provided by the application to provide ownership for articles and comments within the engine.</source>
          <target state="translated">응용 프로그램 내에서 엔진을 사용하는 것은 매우 쉽습니다. 이 섹션에서는 엔진을 애플리케이션 및 필요한 초기 설정에 마운트하는 방법과 엔진을 기사 및 주석에 대한 소유권을 제공하기 위해 애플리케이션이 제공 하는 &lt;code&gt;User&lt;/code&gt; 클래스에 엔진을 링크하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="b89a3557ce5e44502a24701aaac783261ba1ba5b" translate="yes" xml:space="preserve">
          <source>Using asset hosts</source>
          <target state="translated">자산 호스트 사용</target>
        </trans-unit>
        <trans-unit id="38fdabe951d39e3cfb212c670d738ad00e89765b" translate="yes" xml:space="preserve">
          <source>Using both &lt;code&gt;after_create_commit&lt;/code&gt; and &lt;code&gt;after_update_commit&lt;/code&gt; in the same model will only allow the last callback defined to take effect, and will override all others.</source>
          <target state="translated">동일한 모델에서 &lt;code&gt;after_create_commit&lt;/code&gt; 과 &lt;code&gt;after_update_commit&lt;/code&gt; 을 모두 사용하면 정의 된 마지막 콜백 만 적용되고 다른 모든 콜백이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ec25ccb18505ba836bfd208492088b6084d46bb4" translate="yes" xml:space="preserve">
          <source>Using comments:</source>
          <target state="translated">주석 사용 :</target>
        </trans-unit>
        <trans-unit id="b2aa95366043b6b8a9992fb7e236707a6bc71519" translate="yes" xml:space="preserve">
          <source>Using conditionals</source>
          <target state="translated">조건부 사용</target>
        </trans-unit>
        <trans-unit id="936c3379c38ee34f5f9e2764536948cc6b3c552c" translate="yes" xml:space="preserve">
          <source>Using either of these alternate methods incurs a performance hit, as the fixtured data must be fully traversed in the database to create the fixture hash and/or instance variables. This is expensive for large sets of fixtured data.</source>
          <target state="translated">조명기 해시 및 / 또는 인스턴스 변수를 작성하려면 조명기 데이터가 데이터베이스에서 완전히 이송되어야하므로 이러한 대체 방법 중 하나를 사용하면 성능이 저하됩니다. 이것은 많은 고정 데이터 세트에 비싸다.</target>
        </trans-unit>
        <trans-unit id="fde3600b3d594ce47576d05a6f75575f36787c1b" translate="yes" xml:space="preserve">
          <source>Using form_for and form_tag</source>
          <target state="translated">form_for 및 form_tag 사용</target>
        </trans-unit>
        <trans-unit id="67cee99a82e7ec274245195ecfd79922dab76347" translate="yes" xml:space="preserve">
          <source>Using generators will save you a large amount of time by writing &lt;strong&gt;boilerplate code&lt;/strong&gt;, code that is necessary for the app to work.</source>
          <target state="translated">생성기를 사용 하면 앱이 작동하는 데 필요한 &lt;strong&gt;상용구 코드&lt;/strong&gt; 를 작성하여 많은 시간을 절약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1959ce923ef24486e6019618b44e946a5e0db1fc" translate="yes" xml:space="preserve">
          <source>Using manual connection switching</source>
          <target state="translated">수동 연결 전환 사용</target>
        </trans-unit>
        <trans-unit id="b4705df440ea955459ce1f4ba6887c30baa8818a" translate="yes" xml:space="preserve">
          <source>Using parameterized mailers, this can be rewritten as:</source>
          <target state="translated">매개 변수화 된 메일러를 사용하여 다음과 같이 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c05921aba904fe76e5dcac8531640232c94f2782" translate="yes" xml:space="preserve">
          <source>Using partials to clean up duplication in views</source>
          <target state="translated">뷰에서 부분 정리를 사용하여 복제 정리</target>
        </trans-unit>
        <trans-unit id="b5a312d20d9fd624f811d93a48484f327e47227a" translate="yes" xml:space="preserve">
          <source>Using polymorphic associations in combination with single table inheritance (STI) is a little tricky. In order for the associations to work as expected, ensure that you store the base model for the STI models in the type column of the polymorphic association. To continue with the asset example above, suppose there are guest posts and member posts that use the posts table for STI. In this case, there must be a &lt;code&gt;type&lt;/code&gt; column in the posts table.</source>
          <target state="translated">단일 테이블 상속 (STI)과 함께 다형성 연관을 사용하는 것은 약간 까다 롭습니다. 연관이 예상대로 작동하려면 STI 모델의 기본 모델을 다형성 연관의 유형 열에 저장해야합니다. 위의 자산 예제를 계속하려면 STI에 대해 게시물 테이블을 사용하는 게스트 게시물과 회원 게시물이 있다고 가정하십시오. 이 경우 게시물 테이블에 &lt;code&gt;type&lt;/code&gt; 열 이 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="07dd432b234fcf64098360f5f1027190f778714e" translate="yes" xml:space="preserve">
          <source>Using sub templates</source>
          <target state="translated">하위 템플릿 사용</target>
        </trans-unit>
        <trans-unit id="a86315fad6e5544e7ad725a1d812eb18d47e0a78" translate="yes" xml:space="preserve">
          <source>Using sub templates allows you to sidestep tedious replication and extract common display structures in shared templates. The classic example is the use of a header and footer (even though the Action Pack-way would be to use &lt;a href=&quot;layouts&quot;&gt;&lt;code&gt;Layouts&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">하위 템플릿을 사용하면 지루한 복제를 피하고 공유 템플릿에서 공통 디스플레이 구조를 추출 할 수 있습니다. 고전적인 예는 머리글과 바닥 글을 사용하는 것입니다 (액션 팩 방식은 &lt;a href=&quot;layouts&quot;&gt; &lt;code&gt;Layouts&lt;/code&gt; &lt;/a&gt; 을 사용하는 것이지만 ).</target>
        </trans-unit>
        <trans-unit id="0e312f8c45b096c27e26464507b9c200fa033fc0" translate="yes" xml:space="preserve">
          <source>Using sub templates allows you to sidestep tedious replication and extract common display structures in shared templates. The classic example is the use of a header and footer (even though the Action Pack-way would be to use &lt;a href=&quot;layouts&quot;&gt;Layouts&lt;/a&gt;):</source>
          <target state="translated">하위 템플릿을 사용하면 지루한 복제를 피하고 공유 템플릿에서 일반적인 디스플레이 구조를 추출 할 수 있습니다. 전형적인 예는 Action Pack-way가 &lt;a href=&quot;layouts&quot;&gt;Layouts&lt;/a&gt; 를 사용하더라도 머리글과 바닥 글을 사용하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="4323aef5e32b7190abaac7f573f12063c1c25164" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; method, you can retrieve the object corresponding to the specified &lt;em&gt;primary key&lt;/em&gt; that matches any supplied options. For example:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; 메서드를 사용하면 제공된 옵션과 일치 하는 지정된 &lt;em&gt;기본 키에&lt;/em&gt; 해당하는 개체를 검색 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="60763bcda71485e926368984197adec3bcb5671c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--skip-sprockets&lt;/code&gt; option will prevent Rails from adding them to your &lt;code&gt;Gemfile&lt;/code&gt;, so if you later want to enable the asset pipeline you will have to add those gems to your &lt;code&gt;Gemfile&lt;/code&gt;. Also, creating an application with the &lt;code&gt;--skip-sprockets&lt;/code&gt; option will generate a slightly different &lt;code&gt;config/application.rb&lt;/code&gt; file, with a require statement for the sprockets railtie that is commented-out. You will have to remove the comment operator on that line to later enable the asset pipeline:</source>
          <target state="translated">은 Using &lt;code&gt;--skip-sprockets&lt;/code&gt; 당신에 추가에서 레일을 방지 옵션 &lt;code&gt;Gemfile&lt;/code&gt; 을 나중에 자산 파이프 라인을 사용하려는 경우 그래서 당신은 당신에 그 보석을 추가해야합니다, &lt;code&gt;Gemfile&lt;/code&gt; . 또한 &lt;code&gt;--skip-sprockets&lt;/code&gt; 옵션을 사용하여 &lt;code&gt;config/application.rb&lt;/code&gt; 만들면 주석 처리 된 스프라켓 레일에 대한 require 문과 함께 약간 다른 config / application.rb 파일 이 생성 됩니다. 나중에 자산 파이프 라인을 활성화하려면 해당 라인에서 주석 연산자를 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="172185d1df1a531af2be879c27d6a8c3fcb761f1" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--skip-sprockets&lt;/code&gt; option will prevent Rails from adding this gem, so if you later want to enable the asset pipeline you will have to add it to your &lt;code&gt;Gemfile&lt;/code&gt; manually. Also, creating an application with the &lt;code&gt;--skip-sprockets&lt;/code&gt; option will generate a slightly different &lt;code&gt;config/application.rb&lt;/code&gt; file, with a require statement for the sprockets railtie that is commented-out. You will have to remove the comment operator on that line to later enable the asset pipeline:</source>
          <target state="translated">은 Using &lt;code&gt;--skip-sprockets&lt;/code&gt; 나중에 당신이 당신에 추가해야합니다 자산 파이프 라인을 사용하려면 그렇다면,이 보석을 추가하는 레일을 방지 옵션을 &lt;code&gt;Gemfile&lt;/code&gt; 수동으로합니다. 또한 &lt;code&gt;--skip-sprockets&lt;/code&gt; 옵션을 사용하여 &lt;code&gt;config/application.rb&lt;/code&gt; 생성하면 주석 처리 된 스프로킷 레일 타이에 대한 require 문과 함께 약간 다른 config / application.rb 파일 이 생성 됩니다. 나중에 자산 파이프 라인을 활성화하려면 해당 줄에서 주석 연산자를 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="539de5431aa809d46158cd02e68c2fea25c85a0d" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;:debug&lt;/code&gt; level will have a greater performance penalty than &lt;code&gt;:fatal&lt;/code&gt;, as a far greater number of strings are being evaluated and written to the log output (e.g. disk).</source>
          <target state="translated">&lt;code&gt;:debug&lt;/code&gt; 레벨을 사용하면 훨씬 많은 문자열이 평가되어 로그 출력 (예 : 디스크)에 기록 되므로 &lt;code&gt;:fatal&lt;/code&gt; 보다 성능이 저하 됩니다.</target>
        </trans-unit>
        <trans-unit id="c681c8a6c956ed1f97555ed0b5212cc737b04d65" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;:file&lt;/code&gt; option in combination with users input can lead to security problems since an attacker could use this action to access security sensitive files in your file system.</source>
          <target state="translated">은 Using &lt;code&gt;:file&lt;/code&gt; 공격자가 파일 시스템에 액세스 보안에 민감한 파일에이 작업을 사용할 수 있기 때문에 사용자의 입력과 함께 옵션은 보안 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8cf19fe34e1459832fe27f9bc55093009a5fa87a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;change&lt;/code&gt; Method</source>
          <target state="translated">은 Using &lt;code&gt;change&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="872a402aa33bee5bd17f24ca5d6bb2fce87a2e8b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;config/database.yml&lt;/code&gt; file you can specify all the information needed to access your database:</source>
          <target state="translated">은 Using &lt;code&gt;config/database.yml&lt;/code&gt; 파일 당신은 당신의 데이터베이스에 액세스하는 데 필요한 모든 정보를 지정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="bbd3e9cdb1250e1a2706f1206ab90caace876603" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;content_for&lt;/code&gt; Method</source>
          <target state="translated">은 Using &lt;code&gt;content_for&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="9beb91e4609e1f813b6cb91e9a78e3cf8b7b4398" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;find&lt;/code&gt; method, you can retrieve the object corresponding to the specified &lt;em&gt;primary key&lt;/em&gt; that matches any supplied options. For example:</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 메소드를 사용하면 제공된 옵션과 일치 하는 지정된 &lt;em&gt;기본 키에&lt;/em&gt; 해당하는 오브젝트를 검색 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cabc83e0fd6211dce17a0f662cb287686f600b58" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;new&lt;/code&gt; method, an object can be instantiated without being saved:</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 방법을 사용하면 객체를 저장하지 않고 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4dd6e0bbbd401894d9d01d0e95488479b17ed53" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;up&lt;/code&gt;/&lt;code&gt;down&lt;/code&gt; Methods</source>
          <target state="translated">은 Using &lt;code&gt;up&lt;/code&gt; / &lt;code&gt;down&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="b7279b8cb41471ed203f579283e7fcd454b6a751" translate="yes" xml:space="preserve">
          <source>Using the Cache Middleware</source>
          <target state="translated">캐시 미들웨어 사용</target>
        </trans-unit>
        <trans-unit id="276a3ddb2fa39f74d0fc4919b4e5eff212e38d4f" translate="yes" xml:space="preserve">
          <source>Using the asset pipeline:</source>
          <target state="translated">자산 파이프 라인 사용 :</target>
        </trans-unit>
        <trans-unit id="c661bcf5534ac03e7b7817b9e9ba77c83029f6d1" translate="yes" xml:space="preserve">
          <source>Using the asynchronous queue from a Rake task (for example, to send an email using &lt;code&gt;.deliver_later&lt;/code&gt;) will generally not work because Rake will likely end, causing the in-process thread pool to be deleted, before any/all of the &lt;code&gt;.deliver_later&lt;/code&gt; emails are processed. To avoid this problem, use &lt;code&gt;.deliver_now&lt;/code&gt; or run a persistent queue in development.</source>
          <target state="translated">(예를 들어, 사용하는 이메일 보낼 레이크 작업에서 비동기 큐를 사용 &lt;code&gt;.deliver_later&lt;/code&gt; 을 레이크 가능성이 종료되므로에서 프로세스 스레드 풀을 유발, 일반적으로)하지 작업을 할 것은 / 어느 전에 모두 삭제합니다 &lt;code&gt;.deliver_later&lt;/code&gt; 의 이메일을 처리됩니다. 이 문제를 피하려면 개발시 &lt;code&gt;.deliver_now&lt;/code&gt; 를 사용 하거나 지속적 대기열을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="df43169ba187647b62e9dc8b1907f06856294a51" translate="yes" xml:space="preserve">
          <source>Using the default deprecator:</source>
          <target state="translated">기본 감가 상 각기 사용 :</target>
        </trans-unit>
        <trans-unit id="17a5cb03e1a7a9f2ced51100769bcb259634ec7c" translate="yes" xml:space="preserve">
          <source>Using the multiline modifier will raise an &lt;code&gt;ArgumentError&lt;/code&gt;. Encoding regular expression modifiers are silently ignored. The match will always use the default encoding or ASCII.</source>
          <target state="translated">여러 줄 수정자를 사용하면 &lt;code&gt;ArgumentError&lt;/code&gt; 가 발생 합니다. 인코딩 정규식 수정자는 자동으로 무시됩니다. 일치는 항상 기본 인코딩 또는 ASCII를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="397250e72fded40099b8630808f7d9faa2bed5e3" translate="yes" xml:space="preserve">
          <source>Using the npm package:</source>
          <target state="translated">npm 패키지 사용 :</target>
        </trans-unit>
        <trans-unit id="be4ff635aaef9c488d572c7ea61e96e4288359d7" translate="yes" xml:space="preserve">
          <source>Using the route above, the URL &amp;ldquo;localhost:3000/articles/2005/11/06&amp;rdquo; maps to</source>
          <target state="translated">위의 경로를 사용하여 URL&amp;ldquo;localhost : 3000 / articles / 2005 / 11 / 06&amp;rdquo;은</target>
        </trans-unit>
        <trans-unit id="492dfec3cea453f778c8c9a230f1aaf52dac64db" translate="yes" xml:space="preserve">
          <source>Using this helper, &lt;code&gt;last_modified&lt;/code&gt; header is set to &lt;code&gt;Time.new(2011, 1, 1).utc&lt;/code&gt; and &lt;code&gt;expires&lt;/code&gt; header is set to a 100 years.</source>
          <target state="translated">이 도우미를 사용하면 &lt;code&gt;last_modified&lt;/code&gt; 헤더가 &lt;code&gt;Time.new(2011, 1, 1).utc&lt;/code&gt; 로 설정 되고 &lt;code&gt;expires&lt;/code&gt; 헤더는 100 년으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="afbd307f83503bca84be93989a914c1268e92c33" translate="yes" xml:space="preserve">
          <source>Using this method inside a &lt;code&gt;form_for&lt;/code&gt; block will set the enclosing form's encoding to &lt;code&gt;multipart/form-data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;form_for&lt;/code&gt; 블록 내에서이 메소드를 사용 하면 둘러싸는 양식의 인코딩이 &lt;code&gt;multipart/form-data&lt;/code&gt; 로 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="7bc913f59c0de6cf5a0c520abd2281d62e7bf235" translate="yes" xml:space="preserve">
          <source>Using this validation method in conjunction with &lt;a href=&quot;../persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; does not guarantee the absence of duplicate record insertions, because uniqueness checks on the application level are inherently prone to race conditions. For example, suppose that two users try to post a Comment at the same time, and a Comment's title must be unique. At the database-level, the actions performed by these users could be interleaved in the following manner:</source>
          <target state="translated">응용 프로그램 수준의 고유성 검사가 본질적으로 경쟁 조건에 취약하기 때문에 &lt;a href=&quot;../persistence#method-i-save&quot;&gt;ActiveRecord :: Base # save&lt;/a&gt; 와 함께이 유효성 검사 방법을 사용하면 중복 레코드 삽입이 보장되지 않습니다. 예를 들어 두 명의 사용자가 동시에 댓글을 게시하려고하는데 댓글 제목이 고유해야한다고 가정합니다. 데이터베이스 레벨에서 이러한 사용자가 수행 한 조치는 다음과 같은 방식으로 인터리브 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c47046323f3eb153fc07f6281c631e1e7d5568ae" translate="yes" xml:space="preserve">
          <source>Using this, the &lt;code&gt;:id&lt;/code&gt; parameter here will default to 'home'.</source>
          <target state="translated">이를 사용하여 여기 에서 &lt;code&gt;:id&lt;/code&gt; 매개 변수는 기본적으로 'home'입니다.</target>
        </trans-unit>
        <trans-unit id="18d5303ebafaf29b879154d4cc9b2944f48e8e24" translate="yes" xml:space="preserve">
          <source>Usually a web application includes access control. The user enters their login credentials and the web application tries to find the matching record in the users table. The application grants access when it finds a record. However, an attacker may possibly bypass this check with SQL injection. The following shows a typical database query in Rails to find the first record in the users table which matches the login credentials parameters supplied by the user.</source>
          <target state="translated">일반적으로 웹 응용 프로그램에는 액세스 제어가 포함됩니다. 사용자가 로그인 자격 증명을 입력하면 웹 응용 프로그램이 users 테이블에서 일치하는 레코드를 찾으려고합니다. 응용 프로그램은 레코드를 찾을 때 액세스 권한을 부여합니다. 그러나 침입자는 SQL 주입으로이 검사를 우회 할 수 있습니다. 다음은 사용자 테이블에서 사용자가 제공 한 로그인 자격 증명 매개 변수와 일치하는 첫 번째 레코드를 찾기위한 Rails의 일반적인 데이터베이스 쿼리를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="99af370507e8c2db0ea6423f554ac847847e6357" translate="yes" xml:space="preserve">
          <source>Usually key value pairs are handled something like this:</source>
          <target state="translated">일반적으로 키 값 쌍은 다음과 같이 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="21966f865db52398da0ed7ccc010e283a939d5a6" translate="yes" xml:space="preserve">
          <source>Usually, specifying the engine inside the &lt;code&gt;Gemfile&lt;/code&gt; would be done by specifying it as a normal, everyday gem.</source>
          <target state="translated">일반적으로 &lt;code&gt;Gemfile&lt;/code&gt; 내부의 엔진 지정은 일반적인 일상적인 보석으로 지정하여 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="acb582f88e04130b94ebbdffa8786b76613ce258" translate="yes" xml:space="preserve">
          <source>Util::h</source>
          <target state="translated">Util::h</target>
        </trans-unit>
        <trans-unit id="66c8b0c5e8f978049160f5f96bcae23108de7879" translate="yes" xml:space="preserve">
          <source>Util::html_escape</source>
          <target state="translated">Util::html_escape</target>
        </trans-unit>
        <trans-unit id="99698cc7b024d8229a6c8aafc9eba7baf6683dc3" translate="yes" xml:space="preserve">
          <source>Util::html_escape_once</source>
          <target state="translated">Util::html_escape_once</target>
        </trans-unit>
        <trans-unit id="2aaaf7d878c8ebc2dcce832444b5b4ebd53d1c92" translate="yes" xml:space="preserve">
          <source>Util::json_escape</source>
          <target state="translated">Util::json_escape</target>
        </trans-unit>
        <trans-unit id="c01f409cc1bd8b6f90b3894727727d645de3b553" translate="yes" xml:space="preserve">
          <source>VALID_ON_OPTIONS</source>
          <target state="translated">VALID_ON_OPTIONS</target>
        </trans-unit>
        <trans-unit id="124e3f293f5e7b74a9c64b32a62b41143cbe7216" translate="yes" xml:space="preserve">
          <source>VALID_UNSCOPING_VALUES</source>
          <target state="translated">VALID_UNSCOPING_VALUES</target>
        </trans-unit>
        <trans-unit id="41757882d3f1b0c8a89363a82826b5700e5594cb" translate="yes" xml:space="preserve">
          <source>VALUE_LIMIT_VIOLATION</source>
          <target state="translated">VALUE_LIMIT_VIOLATION</target>
        </trans-unit>
        <trans-unit id="56cad5221326233028bedbfd58a31074884c516e" translate="yes" xml:space="preserve">
          <source>VALUE_METHODS</source>
          <target state="translated">VALUE_METHODS</target>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="7e41e0686706967ebd2b2906728d198ef627a005" translate="yes" xml:space="preserve">
          <source>Valgrind</source>
          <target state="translated">Valgrind</target>
        </trans-unit>
        <trans-unit id="36a991d3b114b907b1646c8dffacb955f5e22424" translate="yes" xml:space="preserve">
          <source>Valid Options:</source>
          <target state="translated">유효한 옵션 :</target>
        </trans-unit>
        <trans-unit id="8bca504ff63903bf18d85f84c0ce122920623ed3" translate="yes" xml:space="preserve">
          <source>Valid isolation levels are:</source>
          <target state="translated">유효한 격리 수준은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="37fce7b7492a6bef44ee3324a04c2384aa436c32" translate="yes" xml:space="preserve">
          <source>Valid options are &lt;code&gt;:only&lt;/code&gt;, &lt;code&gt;:except&lt;/code&gt;, &lt;code&gt;:methods&lt;/code&gt; and &lt;code&gt;:include&lt;/code&gt;. The following are all valid examples:</source>
          <target state="translated">유효한 옵션은 &lt;code&gt;:only&lt;/code&gt; , &lt;code&gt;:except&lt;/code&gt; , &lt;code&gt;:methods&lt;/code&gt; 및 &lt;code&gt;:include&lt;/code&gt; 입니다. 다음은 모두 유효한 예입니다.</target>
        </trans-unit>
        <trans-unit id="36194dddeba7fe68aa399e3341203b27b9a2552d" translate="yes" xml:space="preserve">
          <source>Valid unverified request handling methods are:</source>
          <target state="translated">확인되지 않은 유효한 요청 처리 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="54ab4d2b0820b79cad074569faeb8edd50fa89ef" translate="yes" xml:space="preserve">
          <source>Valid values are:</source>
          <target state="translated">유효한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5a2623cdc63e643d609715aee708f085aa5f1538" translate="yes" xml:space="preserve">
          <source>Validate models before they get persisted to the database.</source>
          <target state="translated">모델이 데이터베이스에 유지되기 전에 모델의 유효성을 검증하십시오.</target>
        </trans-unit>
        <trans-unit id="77961bc221c22a821a30dc0717177eafe7ea17da" translate="yes" xml:space="preserve">
          <source>Validates all keys in a hash match &lt;code&gt;*valid_keys&lt;/code&gt;, raising &lt;code&gt;ArgumentError&lt;/code&gt; on a mismatch.</source>
          <target state="translated">해시 일치에있는 모든 키의 유효성을 검사 &lt;code&gt;*valid_keys&lt;/code&gt; 제기 &lt;code&gt;ArgumentError&lt;/code&gt; 불일치에 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf58f85ad0b76e58cebfb24a1d16255fb2ed95db" translate="yes" xml:space="preserve">
          <source>Validates each attribute against a block.</source>
          <target state="translated">블록에 대해 각 속성의 유효성을 검사합니다.</target>
        </trans-unit>
        <trans-unit id="d9f2c6255dcc91e5f805b40b204c9fe2c6b9b192" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt;). Happens by default on save.</source>
          <target state="translated">지정된 속성이 비어 있는지 검증합니다 ( &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object # blank?에&lt;/a&gt; 정의 된대로 ). 저장시 기본적으로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b3544d62234e2aab9819a835db30fefdf3989905" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are blank (as defined by &lt;a href=&quot;../../object#method-i-present-3F&quot;&gt;&lt;code&gt;Object#present?&lt;/code&gt;&lt;/a&gt;). Happens by default on save.</source>
          <target state="translated">지정된 속성이 비어 있는지 확인합니다 ( &lt;a href=&quot;../../object#method-i-present-3F&quot;&gt; &lt;code&gt;Object#present?&lt;/code&gt; 에&lt;/a&gt; 정의 된대로 ). 기본적으로 저장시 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ed498860dd1e7be3259c39009284ff04f4814eb6" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;&lt;code&gt;Object#blank?&lt;/code&gt;&lt;/a&gt;), and, if the attribute is an association, that the associated object is not marked for destruction. Happens by default on save.</source>
          <target state="translated">지정된 속성이 비어 있지 않은지 ( &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt; &lt;code&gt;Object#blank?&lt;/code&gt; 에서&lt;/a&gt; 정의한대로 ) 확인하고, 속성이 연관 인 경우 연관된 객체가 소멸 표시되지 않았는지 확인합니다. 기본적으로 저장시 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2c134b741552a783fde6a4d08931ed9656ec7d34" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;&lt;code&gt;Object#blank?&lt;/code&gt;&lt;/a&gt;). Happens by default on save.</source>
          <target state="translated">지정된 속성이 비어 있지 않은지 확인합니다 ( &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt; &lt;code&gt;Object#blank?&lt;/code&gt; 에서&lt;/a&gt; 정의한대로 ). 기본적으로 저장시 발생합니다.</target>
        </trans-unit>
        <trans-unit id="597c81e76b7981ffaf708754e1d17381204762d8" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt;), and, if the attribute is an association, that the associated object is not marked for destruction. Happens by default on save.</source>
          <target state="translated">지정된 속성이 비어 있지 않은지 ( &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object # blank?에&lt;/a&gt; 의해 정의 된대로 ) 속성이 연관 인 경우 연관된 오브젝트가 삭제 표시되지 않았는지 검증합니다 . 저장시 기본적으로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d8ad38c92631e6bc9eb69a49c2010ebb3ae07552" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt;). Happens by default on save.</source>
          <target state="translated">지정된 속성이 비어 있지 않은지 검증합니다 ( &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object # blank?에&lt;/a&gt; 의해 정의 된대로 ). 저장시 기본적으로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="851e48b92c90cf41c84848a927eb87c954fbad24" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not present (as defined by &lt;a href=&quot;../../object#method-i-present-3F&quot;&gt;&lt;code&gt;Object#present?&lt;/code&gt;&lt;/a&gt;). If the attribute is an association, the associated object is considered absent if it was marked for destruction.</source>
          <target state="translated">지정된 속성이 존재하지 않는지 확인합니다 ( &lt;a href=&quot;../../object#method-i-present-3F&quot;&gt; &lt;code&gt;Object#present?&lt;/code&gt; 에&lt;/a&gt; 정의 된대로 ). 속성이 연관 인 경우, 소멸로 표시된 경우 연관된 오브젝트가없는 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="58337ba49a75d8bf9dffe21cf2b9fa1eb601e1fb" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not present (as defined by &lt;a href=&quot;../../object#method-i-present-3F&quot;&gt;Object#present?&lt;/a&gt;). If the attribute is an association, the associated object is considered absent if it was marked for destruction.</source>
          <target state="translated">지정된 속성이 존재하지 않는지 확인합니다 ( &lt;a href=&quot;../../object#method-i-present-3F&quot;&gt;Object # present?에&lt;/a&gt; 정의 된대로 ). 속성이 연관 인 경우, 연관된 오브젝트가 삭제 표시가 있으면 해당 오브젝트가없는 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="fab315ea04be9de812b12df8a5daa4272206f490" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes match the length restrictions supplied. If the attribute is an association, records that are marked for destruction are not counted.</source>
          <target state="translated">지정된 속성이 제공된 길이 제한과 일치하는지 확인합니다. 속성이 연결이면 삭제 표시가 된 레코드는 계산되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6f196972086e067a296aba6bf58ca3a20a29b64d" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes match the length restrictions supplied. Only one constraint option can be used at a time apart from &lt;code&gt;:minimum&lt;/code&gt; and &lt;code&gt;:maximum&lt;/code&gt; that can be combined together:</source>
          <target state="translated">지정된 속성이 제공된 길이 제한과 일치하는지 확인합니다. &lt;code&gt;:minimum&lt;/code&gt; 및 &lt;code&gt;:maximum&lt;/code&gt; 을 제외하고 한 번에 하나의 구속 조건 옵션 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19fefe051acdcb3dd097341147e99eacde4f0190" translate="yes" xml:space="preserve">
          <source>Validates that the value of the specified attribute is not in a particular enumerable object.</source>
          <target state="translated">지정된 속성의 값이 특정 열거 가능한 개체에 없는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="fef402f9089ade40be43e111761a19c005fe1d26" translate="yes" xml:space="preserve">
          <source>Validates the constraint named &lt;code&gt;constraint_name&lt;/code&gt; on &lt;code&gt;accounts&lt;/code&gt;.</source>
          <target state="translated">제약라는 이름의 유효성을 검사 &lt;code&gt;constraint_name&lt;/code&gt; 을 에 &lt;code&gt;accounts&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="07bd560f237c6024bb5a357bcd5d4674eb2a02da" translate="yes" xml:space="preserve">
          <source>Validates the foreign key named &lt;code&gt;special_fk_name&lt;/code&gt; on the &lt;code&gt;accounts&lt;/code&gt; table.</source>
          <target state="translated">&lt;code&gt;accounts&lt;/code&gt; 테이블 에서 &lt;code&gt;special_fk_name&lt;/code&gt; 외래 키의 유효성을 검사 합니다.</target>
        </trans-unit>
        <trans-unit id="2dc422b85df861d9b7182e0266ae03a042a5b747" translate="yes" xml:space="preserve">
          <source>Validates the foreign key on &lt;code&gt;accounts.branch_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;accounts.branch_id&lt;/code&gt; 의 외래 키를 확인 합니다 .</target>
        </trans-unit>
        <trans-unit id="74c3fbc3672c59bbe26b1ce09c8d9fb0652ae747" translate="yes" xml:space="preserve">
          <source>Validates the foreign key on &lt;code&gt;accounts.owner_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;accounts.owner_id&lt;/code&gt; 의 외래 키를 확인 합니다 .</target>
        </trans-unit>
        <trans-unit id="87a3073ffbb5724cd93b5b51708c81d52c444729" translate="yes" xml:space="preserve">
          <source>Validates the given check constraint.</source>
          <target state="translated">주어진 검사 제약을 검증합니다.</target>
        </trans-unit>
        <trans-unit id="83fb9f92c7613a920724477bd086c9fb9fd91187" translate="yes" xml:space="preserve">
          <source>Validates the given constraint.</source>
          <target state="translated">주어진 제약 조건을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="6f0b0e25b51c4688754d80e76696b9d4f99a91dd" translate="yes" xml:space="preserve">
          <source>Validates the given foreign key.</source>
          <target state="translated">주어진 외래 키를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5682b5cd3be009b89d8376b3adf0ae573a67cb6c" translate="yes" xml:space="preserve">
          <source>Validates whether the associated object or objects are all valid. Works with any kind of association.</source>
          <target state="translated">연결된 객체가 유효한지 확인합니다. 모든 종류의 협회와 협력합니다.</target>
        </trans-unit>
        <trans-unit id="1e8c728a071cb7ecdda7e9c17738e2fe460b9133" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is available in a particular enumerable object.</source>
          <target state="translated">지정된 속성 값이 특정 열거 가능 개체에서 사용 가능한지 여부를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7212791b997c6ba814fc365693867c6a3009ef65" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is numeric by trying to convert it to a float with &lt;a href=&quot;../../kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;.Float (if &lt;code&gt;only_integer&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;) or applying it to the regular expression &lt;code&gt;/\A[+\-]?\d+\z/&lt;/code&gt; (if &lt;code&gt;only_integer&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;). &lt;a href=&quot;../../kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;.Float precision defaults to the column's precision value or 15.</source>
          <target state="translated">&lt;a href=&quot;../../kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; .Float ( &lt;code&gt;only_integer&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 인 경우) 를 사용하여 부동 소수점으로 변환 하거나 정규식 &lt;code&gt;/\A[+\-]?\d+\z/&lt;/code&gt; ( 경우 &lt;code&gt;only_integer&lt;/code&gt; 가 설정되어 &lt;code&gt;true&lt;/code&gt; ). &lt;a href=&quot;../../kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; .Float 정밀도의 기본값은 열의 정밀도 값 또는 15입니다.</target>
        </trans-unit>
        <trans-unit id="b4393d4f8e90577ab331e4ab58ab04c13296b1ec" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is numeric by trying to convert it to a float with &lt;a href=&quot;../../kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;.Float (if &lt;code&gt;only_integer&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;) or applying it to the regular expression &lt;code&gt;/\A[+\-]?\d+\z/&lt;/code&gt; (if &lt;code&gt;only_integer&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;). Precision of &lt;a href=&quot;../../kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;.Float values are guaranteed up to 15 digits.</source>
          <target state="translated">&lt;a href=&quot;../../kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; .Float ( &lt;code&gt;only_integer&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 인 경우) 를 사용하여 부동 소수점으로 변환 하거나 정규식 &lt;code&gt;/\A[+\-]?\d+\z/&lt;/code&gt; ( 경우 &lt;code&gt;only_integer&lt;/code&gt; 가 설정되어 &lt;code&gt;true&lt;/code&gt; ). &lt;a href=&quot;../../kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; .Float 값의 정밀도는 최대 15 자리까지 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="5ece8a5945f594e4b8856ead7945504b74a0d209" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is numeric by trying to convert it to a float with &lt;a href=&quot;../../kernel&quot;&gt;Kernel&lt;/a&gt;.Float (if &lt;code&gt;only_integer&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;) or applying it to the regular expression &lt;code&gt;/\A[+\-]?\d+\z/&lt;/code&gt; (if &lt;code&gt;only_integer&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;../../kernel&quot;&gt;Kernel&lt;/a&gt; .Float ( &lt;code&gt;only_integer&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 인 경우) 를 사용하여 float로 변환 하거나 정규 표현식 &lt;code&gt;/\A[+\-]?\d+\z/&lt;/code&gt; ( 경우 &lt;code&gt;only_integer&lt;/code&gt; 가 설정되어 &lt;code&gt;true&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="699caf7ddc934eba8a82503bdefa24d80d21c69f" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is of the correct form, going by the regular expression provided. You can require that the attribute matches the regular expression:</source>
          <target state="translated">지정된 정규식으로 지정된 속성의 값이 올바른 형식인지 확인합니다. 속성이 정규식과 일치하도록 요구할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b370e9c0767f915d3fb8cc810a7fdfa5b2ff8dd8" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attributes are unique across the system. Useful for making sure that only one user can be named &amp;ldquo;davidhh&amp;rdquo;.</source>
          <target state="translated">지정된 속성 값이 시스템에서 고유한지 여부를 검증합니다. 한 명의 사용자 만&amp;ldquo;davidhh&amp;rdquo;로 이름을 지정할 수 있도록하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7501e942215e0ecb7ac558f3ab1f18da4ef7152f" translate="yes" xml:space="preserve">
          <source>Validating the presence of a parent model</source>
          <target state="translated">부모 모델의 존재 여부 확인</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="dd439173462c91b634e6ec99928abb177fcbea7d" translate="yes" xml:space="preserve">
          <source>Validation Helpers</source>
          <target state="translated">유효성 검사 도우미</target>
        </trans-unit>
        <trans-unit id="4ff28f38b3d0b2dc3f5561d8f3e0ad431e2de4f0" translate="yes" xml:space="preserve">
          <source>Validation is a very important issue to consider when persisting to the database, so the methods &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; take it into account when running: they return &lt;code&gt;false&lt;/code&gt; when validation fails and they don't actually perform any operations on the database. All of these have a bang counterpart (that is, &lt;code&gt;save!&lt;/code&gt; and &lt;code&gt;update!&lt;/code&gt;), which are stricter in that they raise the exception &lt;code&gt;ActiveRecord::RecordInvalid&lt;/code&gt; if validation fails. A quick example to illustrate:</source>
          <target state="translated">유효성 검사는 데이터베이스를 유지할 때 고려해야 할 매우 중요한 문제이므로 &lt;code&gt;save&lt;/code&gt; 및 &lt;code&gt;update&lt;/code&gt; 방법은 실행할 때이를 고려합니다. 유효성 검사가 실패하면 &lt;code&gt;false&lt;/code&gt; 를 반환 하고 실제로 데이터베이스에서 작업을 수행하지 않습니다. 이들 모두는 뱅 대응 (즉, &lt;code&gt;save!&lt;/code&gt; 및 &lt;code&gt;update!&lt;/code&gt; )을 가지며 , 이는 유효성 검사에 실패하면 &lt;code&gt;ActiveRecord::RecordInvalid&lt;/code&gt; 예외를 발생시키는 것이 더 엄격 합니다. 다음을 설명하는 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="6bb4276350a5281c4528a2929cc5c42cda16c9d2" translate="yes" xml:space="preserve">
          <source>Validation is skipped.</source>
          <target state="translated">유효성 검사를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="6c259e54dcc7188e7cfe33403eca78cda53017fc" translate="yes" xml:space="preserve">
          <source>Validations</source>
          <target state="translated">Validations</target>
        </trans-unit>
        <trans-unit id="b584cd9d0f7ec99ba0e510a491f7887d39a1bf91" translate="yes" xml:space="preserve">
          <source>Validations Overview</source>
          <target state="translated">검증 개요</target>
        </trans-unit>
        <trans-unit id="ecba43f7828b96ab8176550032cc85559ef178f2" translate="yes" xml:space="preserve">
          <source>Validations are skipped.</source>
          <target state="translated">유효성 검사를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="dd9a96ba7cfeb53963864af65f313a391314975b" translate="yes" xml:space="preserve">
          <source>Validations are used to ensure that only valid data is saved into your database. For example, it may be important to your application to ensure that every user provides a valid email address and mailing address. Model-level validations are the best way to ensure that only valid data is saved into your database. They are database agnostic, cannot be bypassed by end users, and are convenient to test and maintain. Rails makes them easy to use, provides built-in helpers for common needs, and allows you to create your own validation methods as well.</source>
          <target state="translated">유효성 검사는 유효한 데이터 만 데이터베이스에 저장되도록하는 데 사용됩니다. 예를 들어, 모든 사용자가 유효한 전자 메일 주소와 우편 주소를 제공하도록하는 것이 응용 프로그램에 중요 할 수 있습니다. 모델 수준의 유효성 검사는 유효한 데이터 만 데이터베이스에 저장되도록하는 가장 좋은 방법입니다. 데이터베이스와 무관하며 최종 사용자가 우회 할 수 없으며 테스트 및 유지 관리가 편리합니다. Rails는 사용하기 쉽고 일반적인 요구에 맞는 내장 도우미를 제공하며 고유 한 검증 방법도 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4dd1d26ad9c1f5de118f6e0954553d33119e925a" translate="yes" xml:space="preserve">
          <source>Validations are used to ensure that only valid data is saved into your database. For example, it may be important to your application to ensure that every user provides a valid email address and mailing address. Model-level validations are the best way to ensure that only valid data is saved into your database. They are database agnostic, cannot be bypassed by end users, and are convenient to test and maintain. Rails provides built-in helpers for common needs, and allows you to create your own validation methods as well.</source>
          <target state="translated">유효성 검사는 유효한 데이터 만 데이터베이스에 저장되도록하는 데 사용됩니다. 예를 들어 모든 사용자가 유효한 이메일 주소와 우편 주소를 제공하는지 확인하는 것이 애플리케이션에 중요 할 수 있습니다. 모델 수준 유효성 검사는 유효한 데이터 만 데이터베이스에 저장되도록하는 가장 좋은 방법입니다. 데이터베이스에 구애받지 않고 최종 사용자가 우회 할 수 없으며 테스트 및 유지 관리가 편리합니다. Rails는 일반적인 요구 사항을위한 내장 도우미를 제공하며 자체 검증 방법을 생성 할 수도 있습니다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="3b97643974eaad9f57e2db4889d955de94f19663" translate="yes" xml:space="preserve">
          <source>Validations such as &lt;code&gt;validates :foreign_key, uniqueness: true&lt;/code&gt; are one way in which models can enforce data integrity. The &lt;code&gt;:dependent&lt;/code&gt; option on associations allows models to automatically destroy child objects when the parent is destroyed. Like anything which operates at the application level, these cannot guarantee referential integrity and so some people augment them with &lt;a href=&quot;#foreign-keys&quot;&gt;foreign key constraints&lt;/a&gt; in the database.</source>
          <target state="translated">&lt;code&gt;validates :foreign_key, uniqueness: true&lt;/code&gt; 와 같은 유효성 검증 은 모델이 데이터 무결성을 강화할 수있는 한 가지 방법입니다. 연관에 대한 &lt;code&gt;:dependent&lt;/code&gt; 옵션을 사용하면 부모가 파괴 될 때 모델이 하위 오브젝트를 자동으로 파괴 할 수 있습니다. 응용 프로그램 수준에서 작동하는 것과 마찬가지로 이것도 참조 무결성을 보장 할 수 없으므로 일부 사람들 은 데이터베이스의 &lt;a href=&quot;#foreign-keys&quot;&gt;외래 키 제약 조건&lt;/a&gt; 으로 그것들을 보강합니다 .</target>
        </trans-unit>
        <trans-unit id="8fabab6b6255e4f24fc0b9f631b13f8e74b29655" translate="yes" xml:space="preserve">
          <source>Validations with no &lt;code&gt;:on&lt;/code&gt; option will run no matter the context. Validations with some &lt;code&gt;:on&lt;/code&gt; option will only run in the specified context.</source>
          <target state="translated">&lt;code&gt;:on&lt;/code&gt; 옵션이 없는 유효성 검사 는 컨텍스트에 관계없이 실행됩니다. 일부 &lt;code&gt;:on&lt;/code&gt; 옵션을 사용한 유효성 검사 는 지정된 컨텍스트에서만 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="dbb55dfd7a38fdeed72819a4da5faf2f18c1aaf7" translate="yes" xml:space="preserve">
          <source>Validations#save</source>
          <target state="translated">Validations#save</target>
        </trans-unit>
        <trans-unit id="321679676d428be91b1784978676eef3771f7768" translate="yes" xml:space="preserve">
          <source>Validations#save!</source>
          <target state="translated">Validations#save!</target>
        </trans-unit>
        <trans-unit id="5402be86d2ff660ed9b077198b43703fbfe125a7" translate="yes" xml:space="preserve">
          <source>Validations#valid?</source>
          <target state="translated">Validations#valid?</target>
        </trans-unit>
        <trans-unit id="f946bcd5c349a3edbf777f57f9b4002faa7d6c91" translate="yes" xml:space="preserve">
          <source>Validations#validate</source>
          <target state="translated">Validations#validate</target>
        </trans-unit>
        <trans-unit id="75014a552c0d1c2dbb3c4f2151a7de2692d405a9" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods</source>
          <target state="translated">Validations::ClassMethods</target>
        </trans-unit>
        <trans-unit id="8f96dc1128104318dc9a770000a2945360492cd7" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_absence_of</source>
          <target state="translated">Validations::ClassMethods#validates_absence_of</target>
        </trans-unit>
        <trans-unit id="946658c647c42982d56f860bd504252a039b3e28" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_associated</source>
          <target state="translated">Validations::ClassMethods#validates_associated</target>
        </trans-unit>
        <trans-unit id="753de92fd37c5587df62760389567b29a35fd747" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_length_of</source>
          <target state="translated">Validations::ClassMethods#validates_length_of</target>
        </trans-unit>
        <trans-unit id="5a60d080bccf06cb8e38e48b4d60927eab575bec" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_presence_of</source>
          <target state="translated">Validations::ClassMethods#validates_presence_of</target>
        </trans-unit>
        <trans-unit id="75e3dfa6bd563c2c2070196d9461c8e8064d710a" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_size_of</source>
          <target state="translated">Validations::ClassMethods#validates_size_of</target>
        </trans-unit>
        <trans-unit id="9ee0d964eb9ebdb6179f5e30086aae695cb3b452" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_uniqueness_of</source>
          <target state="translated">Validations::ClassMethods#validates_uniqueness_of</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="9b71f56eb735ef8598e44013456f31fab51578b5" translate="yes" xml:space="preserve">
          <source>Value objects are immutable and interchangeable objects that represent a given value, such as a Money object representing $5. Two Money objects both representing $5 should be equal (through methods such as &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; from Comparable if ranking makes sense). This is unlike entity objects where equality is determined by identity. An entity class such as Customer can easily have two different objects that both have an address on Hyancintvej. Entity identity is determined by object or relational unique identifiers (such as primary keys). Normal &lt;a href=&quot;../base&quot;&gt;&lt;code&gt;ActiveRecord::Base&lt;/code&gt;&lt;/a&gt; classes are entity objects.</source>
          <target state="translated">값 개체는 $ 5를 나타내는 Money 개체와 같이 지정된 값을 나타내는 변경 불가능하고 교환 할 수있는 개체입니다. $ 5를 나타내는 두 개의 Money 개체는 동일해야합니다 ( 순위가 타당하면 Comparable의 &lt;code&gt;==&lt;/code&gt; 및 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 같은 메서드를 통해 ). 이것은 동일성이 신원에 의해 결정되는 엔티티 객체와 다릅니다. Customer와 같은 엔터티 클래스는 둘 다 Hyancintvej에 주소가있는 두 개의 다른 개체를 쉽게 가질 수 있습니다. 개체 ID는 개체 또는 관계형 고유 식별자 (예 : 기본 키)에 의해 결정됩니다. 일반 &lt;a href=&quot;../base&quot;&gt; &lt;code&gt;ActiveRecord::Base&lt;/code&gt; &lt;/a&gt; 클래스는 엔터티 개체입니다.</target>
        </trans-unit>
        <trans-unit id="c4f35f628041304ad157bcf70adb2ce05c395c52" translate="yes" xml:space="preserve">
          <source>Value objects are immutable and interchangeable objects that represent a given value, such as a Money object representing $5. Two Money objects both representing $5 should be equal (through methods such as &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; from Comparable if ranking makes sense). This is unlike entity objects where equality is determined by identity. An entity class such as Customer can easily have two different objects that both have an address on Hyancintvej. Entity identity is determined by object or relational unique identifiers (such as primary keys). Normal &lt;a href=&quot;../base&quot;&gt;ActiveRecord::Base&lt;/a&gt; classes are entity objects.</source>
          <target state="translated">Value 객체는 $ 5를 나타내는 Money 객체와 같이 주어진 값을 나타내는 변경 불가능하고 상호 교환 가능한 객체입니다. $ 5를 나타내는 두 Money 객체는 동일해야합니다 ( 순위가 적절한 경우 Comparable의 &lt;code&gt;==&lt;/code&gt; 및 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 과 같은 방법을 통해 ). 동일성에 의해 동등성이 결정되는 개체 개체와는 다릅니다. Customer와 같은 엔터티 클래스는 Hyancintvej에 주소가있는 서로 다른 두 개의 개체를 쉽게 가질 수 있습니다. 개체 ID는 개체 또는 관계형 고유 식별자 (예 : 기본 키)에 의해 결정됩니다. 일반 &lt;a href=&quot;../base&quot;&gt;ActiveRecord :: Base&lt;/a&gt; 클래스는 엔티티 객체입니다.</target>
        </trans-unit>
        <trans-unit id="ddc800cac5089570f0e49b3fad0ca0a6b80632fa" translate="yes" xml:space="preserve">
          <source>Value objects can also be composed of multiple attributes, such as the case of Address. The order of the mappings will determine the order of the parameters.</source>
          <target state="translated">값 개체는 주소의 경우와 같은 여러 특성으로 구성 될 수도 있습니다. 매핑 순서에 따라 매개 변수의 순서가 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="7a4ebd7561159ce4df90c97b704841724fd68e78" translate="yes" xml:space="preserve">
          <source>ValueTooLong</source>
          <target state="translated">ValueTooLong</target>
        </trans-unit>
        <trans-unit id="f2a318c03d40ec772b81f6a126f7ad3a1b89a883" translate="yes" xml:space="preserve">
          <source>Values from forms can be at the top level of the &lt;code&gt;params&lt;/code&gt; hash or nested in another hash. For example, in a standard &lt;code&gt;create&lt;/code&gt; action for a Person model, &lt;code&gt;params[:person]&lt;/code&gt; would usually be a hash of all the attributes for the person to create. The &lt;code&gt;params&lt;/code&gt; hash can also contain arrays, arrays of hashes, and so on.</source>
          <target state="translated">폼의 값은 &lt;code&gt;params&lt;/code&gt; 해시 의 최상위 레벨에 있거나 다른 해시에 중첩 될 수 있습니다 . 예를 들어, Person 모델 에 대한 표준 &lt;code&gt;create&lt;/code&gt; 조치에서 &lt;code&gt;params[:person]&lt;/code&gt; 은 일반적으로 작성하는 사람에 대한 모든 속성의 해시입니다. &lt;code&gt;params&lt;/code&gt; 해시는 등, 해시의 배열을 배열을 포함하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="d374f127537e8c09cf17335c36cab4162f4ae45a" translate="yes" xml:space="preserve">
          <source>Values longer than 20 characters will be truncated. The value is truncated word by word.</source>
          <target state="translated">20자를 초과하는 값은 잘립니다. 값은 단어 단위로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="90d92e2ddc27f4ac06a3d48a1c2de0e4169277e3" translate="yes" xml:space="preserve">
          <source>Values set from user input will first be coerced into the appropriate ruby type. Coercion behavior is roughly mapped to Ruby's boolean semantics.</source>
          <target state="translated">사용자 입력에서 설정 한 값은 먼저 적절한 루비 유형으로 강제됩니다. 강제 행동은 대략 루비의 부울 의미론으로 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="5700f937f14c9600df3c7814d8452af0ecb19e9a" translate="yes" xml:space="preserve">
          <source>Values set on &lt;a href=&quot;configuration#method-i-app_generators&quot;&gt;#app_generators&lt;/a&gt; will become defaults for application, unless application overwrites them.</source>
          <target state="translated">&lt;a href=&quot;configuration#method-i-app_generators&quot;&gt;#app_generators에&lt;/a&gt; 설정된 값은 응용 프로그램이 덮어 쓰지 않는 한 응용 프로그램의 기본값이됩니다.</target>
        </trans-unit>
        <trans-unit id="43e654e58c62a268bbcf312795ee1cf9c7079a90" translate="yes" xml:space="preserve">
          <source>Values set on &lt;a href=&quot;configuration#method-i-app_generators&quot;&gt;&lt;code&gt;app_generators&lt;/code&gt;&lt;/a&gt; will become defaults for application, unless application overwrites them.</source>
          <target state="translated">&lt;a href=&quot;configuration#method-i-app_generators&quot;&gt; &lt;code&gt;app_generators&lt;/code&gt; 에&lt;/a&gt; 설정된 값 은 애플리케이션이 덮어 쓰지 않는 한 애플리케이션의 기본값이됩니다.</target>
        </trans-unit>
        <trans-unit id="5768d58066a6d1a4696ade8e571bb65592ec7e48" translate="yes" xml:space="preserve">
          <source>Values such as &lt;code&gt;[nil]&lt;/code&gt; or &lt;code&gt;[nil, nil, ...]&lt;/code&gt; in &lt;code&gt;params&lt;/code&gt; are replaced with &lt;code&gt;[]&lt;/code&gt; for security reasons by default. See &lt;a href=&quot;security#unsafe-query-generation&quot;&gt;Security Guide&lt;/a&gt; for more information.</source>
          <target state="translated">같은 값 &lt;code&gt;[nil]&lt;/code&gt; 또는 &lt;code&gt;[nil, nil, ...]&lt;/code&gt; 에 &lt;code&gt;params&lt;/code&gt; 로 대체됩니다 &lt;code&gt;[]&lt;/code&gt; 기본적으로 보안상의 이유로. 자세한 내용은 &lt;a href=&quot;security#unsafe-query-generation&quot;&gt;보안 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="64adf9975415ea68a91f9f5189b34834e2c73e15" translate="yes" xml:space="preserve">
          <source>Variables defined in the methods of your mailer model are accessible as instance variables in their corresponding view.</source>
          <target state="translated">메일러 모델의 메소드에 정의 된 변수는 해당보기에서 인스턴스 변수로 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc91b1ea2c16519ab22614ae2929960a271dbb5c" translate="yes" xml:space="preserve">
          <source>Variant</source>
          <target state="translated">Variant</target>
        </trans-unit>
        <trans-unit id="1ebbf6cb1febc84cef8d1fb90c1da885aade5345" translate="yes" xml:space="preserve">
          <source>Variant#blob</source>
          <target state="translated">Variant#blob</target>
        </trans-unit>
        <trans-unit id="cf05bca5d7de9abb50f30de3db937695f25a538f" translate="yes" xml:space="preserve">
          <source>Variant#image</source>
          <target state="translated">Variant#image</target>
        </trans-unit>
        <trans-unit id="fce54cf5ae3558137753bcbda6f23efc55eb191e" translate="yes" xml:space="preserve">
          <source>Variant#key</source>
          <target state="translated">Variant#key</target>
        </trans-unit>
        <trans-unit id="084c8a2a9307ef18d7ae74bf5f0687adeca17d2b" translate="yes" xml:space="preserve">
          <source>Variant#processed</source>
          <target state="translated">Variant#processed</target>
        </trans-unit>
        <trans-unit id="4cbaf3c82ca9401302a99cee620f5ce1bf5e8e8a" translate="yes" xml:space="preserve">
          <source>Variant#service_url</source>
          <target state="translated">Variant#service_url</target>
        </trans-unit>
        <trans-unit id="d31b880ee662f11985cdf16b0d2b01c3e0d41411" translate="yes" xml:space="preserve">
          <source>Variant#variation</source>
          <target state="translated">Variant#variation</target>
        </trans-unit>
        <trans-unit id="79c4cb1ba570d8e6857a0098f6e94e73b78af027" translate="yes" xml:space="preserve">
          <source>Variant::new</source>
          <target state="translated">Variant::new</target>
        </trans-unit>
        <trans-unit id="319e0e33c16d31af795a2f7010fa84d1a1ae9eaf" translate="yes" xml:space="preserve">
          <source>Variants also support common &lt;code&gt;any&lt;/code&gt;/&lt;code&gt;all&lt;/code&gt; block that formats have.</source>
          <target state="translated">변형은 형식에있는 공통 &lt;code&gt;any&lt;/code&gt; / &lt;code&gt;all&lt;/code&gt; 블록을 지원 합니다 .</target>
        </trans-unit>
        <trans-unit id="b4b6a806b5f82b5a5ba1da52f8681ee43c93b15e" translate="yes" xml:space="preserve">
          <source>Variants rely on &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; gem for the actual transformations of the file, so you must add &lt;code&gt;gem
&quot;image_processing&quot;&lt;/code&gt; to your Gemfile if you wish to use variants. By default, images will be processed with &lt;a href=&quot;http://imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; using the &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gem, but you can also switch to the &lt;a href=&quot;http://jcupitt.github.io/libvips/&quot;&gt;libvips&lt;/a&gt; processor operated by the &lt;a href=&quot;https://github.com/jcupitt/ruby-vips&quot;&gt;ruby-vips&lt;/a&gt; gem).</source>
          <target state="translated">변형은 파일의 실제 변형을 위해 &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; gem 을 사용하므로 변형을 사용하려면 Gemfile 에 &lt;code&gt;gem &quot;image_processing&quot;&lt;/code&gt; 을 추가해야합니다 . 기본적으로 이미지는 &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gem을 사용하여 &lt;a href=&quot;http://imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; 으로 처리 되지만 &lt;a href=&quot;https://github.com/jcupitt/ruby-vips&quot;&gt;ruby-vips&lt;/a&gt; gem으로 운영되는 &lt;a href=&quot;http://jcupitt.github.io/libvips/&quot;&gt;libvips&lt;/a&gt; 프로세서로 전환 할 수도 있습니다 ).</target>
        </trans-unit>
        <trans-unit id="17d21cf4e4db78b05d8eb3c0bcaa6555d51c6755" translate="yes" xml:space="preserve">
          <source>Variants rely on &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; gem for the actual transformations of the file, so you must add &lt;code&gt;gem &quot;image_processing&quot;&lt;/code&gt; to your Gemfile if you wish to use variants. By default, images will be processed with &lt;a href=&quot;http://imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; using the &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gem, but you can also switch to the &lt;a href=&quot;http://libvips.github.io/libvips/&quot;&gt;libvips&lt;/a&gt; processor operated by the &lt;a href=&quot;https://github.com/libvips/ruby-vips&quot;&gt;ruby-vips&lt;/a&gt; gem).</source>
          <target state="translated">변형은 파일의 실제 변형을 위해 &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; gem에 의존 하므로 변형을 사용하려면 Gemfile 에 &lt;code&gt;gem &quot;image_processing&quot;&lt;/code&gt; 을 추가해야합니다 . 기본적으로 이미지는 &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gem을 사용하여 &lt;a href=&quot;http://imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; 으로 처리 되지만 &lt;a href=&quot;https://github.com/libvips/ruby-vips&quot;&gt;ruby-vips&lt;/a&gt; gem 에서 작동 하는 &lt;a href=&quot;http://libvips.github.io/libvips/&quot;&gt;libvips&lt;/a&gt; 프로세서로 전환 할 수도 있습니다 ).</target>
        </trans-unit>
        <trans-unit id="15920a45faf632f2fdca0b9eea26e92547dcc0bf" translate="yes" xml:space="preserve">
          <source>Variation</source>
          <target state="translated">Variation</target>
        </trans-unit>
        <trans-unit id="f3d61f4c40e7452799c23f7370a9ce6c92ce7b44" translate="yes" xml:space="preserve">
          <source>Variation#key</source>
          <target state="translated">Variation#key</target>
        </trans-unit>
        <trans-unit id="a91a28bd82444cf5c8a847df56619e97ea85840b" translate="yes" xml:space="preserve">
          <source>Variation#transform</source>
          <target state="translated">Variation#transform</target>
        </trans-unit>
        <trans-unit id="66ae462f9edbc1cbfddcd235446eaa4e3e9fc80b" translate="yes" xml:space="preserve">
          <source>Variation#transformations</source>
          <target state="translated">Variation#transformations</target>
        </trans-unit>
        <trans-unit id="d35b48eba444755e6ab87e30a92f75f7fca5bafb" translate="yes" xml:space="preserve">
          <source>Variation::decode</source>
          <target state="translated">Variation::decode</target>
        </trans-unit>
        <trans-unit id="5eb4c4f1ff125b29fa8bdf48dfda9c80cd8549df" translate="yes" xml:space="preserve">
          <source>Variation::encode</source>
          <target state="translated">Variation::encode</target>
        </trans-unit>
        <trans-unit id="a7da1060e72aae4fe0fd8caa64c5722a56d767e6" translate="yes" xml:space="preserve">
          <source>Variation::new</source>
          <target state="translated">Variation::new</target>
        </trans-unit>
        <trans-unit id="f47a7455a52d0d0ef326dd35d846c646e3161bff" translate="yes" xml:space="preserve">
          <source>Variation::wrap</source>
          <target state="translated">Variation::wrap</target>
        </trans-unit>
        <trans-unit id="9e8dede7b9006edb555eee00aa9697dea309c766" translate="yes" xml:space="preserve">
          <source>Variations of &lt;a href=&quot;findermethods#method-i-find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;findermethods#method-i-find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; 변형</target>
        </trans-unit>
        <trans-unit id="8ef6907701a65d0b41b004c8fe706912caa67ab8" translate="yes" xml:space="preserve">
          <source>Variations of &lt;a href=&quot;findermethods#method-i-find&quot;&gt;find&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;findermethods#method-i-find&quot;&gt;찾기의&lt;/a&gt; 변형</target>
        </trans-unit>
        <trans-unit id="a458cb9b2bdec174612eb212cdc8c0c99abcef51" translate="yes" xml:space="preserve">
          <source>Verbose Query Logs</source>
          <target state="translated">자세한 쿼리 로그</target>
        </trans-unit>
        <trans-unit id="a03899f8ad47fb0c762591858b229265bba36533" translate="yes" xml:space="preserve">
          <source>Verbose query logs are enabled by default in the development environment logs after Rails 5.2.</source>
          <target state="translated">상세 쿼리 로그는 Rails 5.2 이후 개발 환경 로그에서 기본적으로 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="97a0b3c118281c4ccfdeaf988010555351ec4d55" translate="yes" xml:space="preserve">
          <source>Verifies existence of an index with a given name.</source>
          <target state="translated">주어진 이름으로 색인이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5760da5a5da5cbad917abb4dd59eac80109c2e20" translate="yes" xml:space="preserve">
          <source>Verifies the existence of an index with a given name.</source>
          <target state="translated">주어진 이름으로 색인이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b77322e3a5d92d02eb24a32b14ad85d60bf3c260" translate="yes" xml:space="preserve">
          <source>Verify that it is correctly installed and in your load &lt;code&gt;PATH&lt;/code&gt;:</source>
          <target state="translated">올바르게 설치되어 있고로드 &lt;code&gt;PATH&lt;/code&gt; 에 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="8cded5b9aaf370af103c0aa1094ae38a4aa2e210" translate="yes" xml:space="preserve">
          <source>Version 2.2 - November 2008</source>
          <target state="translated">버전 2.2-2008 년 11 월</target>
        </trans-unit>
        <trans-unit id="c8e17f51af3e1914213243aa81ee23ba4a30341c" translate="yes" xml:space="preserve">
          <source>Version 2.3 - March 2009</source>
          <target state="translated">버전 2.3-2009 년 3 월</target>
        </trans-unit>
        <trans-unit id="29523e7b7178a18b51fc813b45a7ca10e05808a5" translate="yes" xml:space="preserve">
          <source>Version 3.0 - August 2010</source>
          <target state="translated">버전 3.0-2010 년 8 월</target>
        </trans-unit>
        <trans-unit id="b6c1c2061a56b072ba59cb0c0a7ce6e35c338416" translate="yes" xml:space="preserve">
          <source>Version 3.1 - August 2011</source>
          <target state="translated">버전 3.1-2011 년 8 월</target>
        </trans-unit>
        <trans-unit id="4f38c53c179cb9118c9410709cd56253b82cdce4" translate="yes" xml:space="preserve">
          <source>Version 3.2 - January 2012</source>
          <target state="translated">버전 3.2-2012 년 1 월</target>
        </trans-unit>
        <trans-unit id="ef103e57f81f797671dd23a649d68e4cdfa89480" translate="yes" xml:space="preserve">
          <source>Version 4.0 - June 2013</source>
          <target state="translated">버전 4.0-2013 년 6 월</target>
        </trans-unit>
        <trans-unit id="f3b5b8d38b37d175ca574ce8df5da6dee56c7b28" translate="yes" xml:space="preserve">
          <source>Version 4.1 - April 2014</source>
          <target state="translated">버전 4.1-2014 년 4 월</target>
        </trans-unit>
        <trans-unit id="4c8a1fef102390070f53e62e7c591b10cdb51b13" translate="yes" xml:space="preserve">
          <source>Version 4.2 - December 2014</source>
          <target state="translated">버전 4.2-2014 년 12 월</target>
        </trans-unit>
        <trans-unit id="22d6f26dec42074d6f355d9727ed700b37808224" translate="yes" xml:space="preserve">
          <source>Version 5.0 - June 2016</source>
          <target state="translated">버전 5.0-2016 년 6 월</target>
        </trans-unit>
        <trans-unit id="7ff1fa8bd890c4b744824597386b9da0731caa8e" translate="yes" xml:space="preserve">
          <source>Version 5.1 - April 2017</source>
          <target state="translated">버전 5.1-2017 년 4 월</target>
        </trans-unit>
        <trans-unit id="3b211c1618af3497a6eb3e18ca69c1f1db19dc49" translate="yes" xml:space="preserve">
          <source>Version 5.2 - April 2018</source>
          <target state="translated">버전 5.2-2018 년 4 월</target>
        </trans-unit>
        <trans-unit id="d5a8c49bf53a2c7a59d8a9381dbb37a2e238d282" translate="yes" xml:space="preserve">
          <source>Version 6.0 - August 2019</source>
          <target state="translated">버전 6.0-2019 년 8 월</target>
        </trans-unit>
        <trans-unit id="13ee0039fe101f8d7f7439d16d06ef679e7c11e3" translate="yes" xml:space="preserve">
          <source>Version 6.1 - December 2020</source>
          <target state="translated">버전 6.1-2020 년 12 월</target>
        </trans-unit>
        <trans-unit id="f4958130cc67c07201808b083855af0b043d0925" translate="yes" xml:space="preserve">
          <source>Versus the CDN copy.</source>
          <target state="translated">CDN 사본과 비교하십시오.</target>
        </trans-unit>
        <trans-unit id="69a7be7d74e8b54ef69683eb73c3addbe24661a5" translate="yes" xml:space="preserve">
          <source>Via</source>
          <target state="translated">Via</target>
        </trans-unit>
        <trans-unit id="c9734f6499b89840948f2e3c2b7c47b9f45f11ee" translate="yes" xml:space="preserve">
          <source>View Helpers for Debugging</source>
          <target state="translated">디버깅을위한 헬퍼보기</target>
        </trans-unit>
        <trans-unit id="78430d2fda6680f0e395b491d0282e5241d62986" translate="yes" xml:space="preserve">
          <source>View Paths</source>
          <target state="translated">경로보기</target>
        </trans-unit>
        <trans-unit id="0cfb068ec9d455c33b99a40e5a2e61a037705351" translate="yes" xml:space="preserve">
          <source>View a list of all your routes</source>
          <target state="translated">모든 노선 목록보기</target>
        </trans-unit>
        <trans-unit id="08afad212f0be9b5e638a274d3e1cfac9547d8d1" translate="yes" xml:space="preserve">
          <source>ViewPaths</source>
          <target state="translated">ViewPaths</target>
        </trans-unit>
        <trans-unit id="a77261d3867c396f7c7610af1e83e16c6b8eba18" translate="yes" xml:space="preserve">
          <source>ViewPaths#append_view_path</source>
          <target state="translated">ViewPaths#append_view_path</target>
        </trans-unit>
        <trans-unit id="4bfc792e50de0e9805510514a1653cc06f92fe49" translate="yes" xml:space="preserve">
          <source>ViewPaths#details_for_lookup</source>
          <target state="translated">ViewPaths#details_for_lookup</target>
        </trans-unit>
        <trans-unit id="320f98df4fa951c66a1c14f7dea98789eedc9c4f" translate="yes" xml:space="preserve">
          <source>ViewPaths#lookup_context</source>
          <target state="translated">ViewPaths#lookup_context</target>
        </trans-unit>
        <trans-unit id="d4104b15eec8ac79a40530776a267cc655ac9e10" translate="yes" xml:space="preserve">
          <source>ViewPaths#prepend_view_path</source>
          <target state="translated">ViewPaths#prepend_view_path</target>
        </trans-unit>
        <trans-unit id="3024c5b9b4319a21c921058e991c41fd09de86e0" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods</source>
          <target state="translated">ViewPaths::ClassMethods</target>
        </trans-unit>
        <trans-unit id="6f67d4bdd16c95504f9c72412ef4e34285d9b39b" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#append_view_path</source>
          <target state="translated">ViewPaths::ClassMethods#append_view_path</target>
        </trans-unit>
        <trans-unit id="14174bc924492f257e7a8bd813d042ddc7ce1d26" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#prepend_view_path</source>
          <target state="translated">ViewPaths::ClassMethods#prepend_view_path</target>
        </trans-unit>
        <trans-unit id="65704031fc2c361c8cf8378b7f6f0e2a064e1e6f" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#view_paths</source>
          <target state="translated">ViewPaths::ClassMethods#view_paths</target>
        </trans-unit>
        <trans-unit id="d093e8d241542fe96a01eee06d1979e0c4fa74e1" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#view_paths=</source>
          <target state="translated">ViewPaths::ClassMethods#view_paths=</target>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="translated">Views</target>
        </trans-unit>
        <trans-unit id="cc0a43b53de35d76033970850208bca0446bb503" translate="yes" xml:space="preserve">
          <source>Views of the controller are stored here</source>
          <target state="translated">컨트롤러의 뷰가 여기에 저장됩니다</target>
        </trans-unit>
        <trans-unit id="0d08fe758cc443e8833c432605507d384e194a6b" translate="yes" xml:space="preserve">
          <source>Visit the following links for a list of available ImageProcessing commands and ImageMagick/libvips operations:</source>
          <target state="translated">사용 가능한 ImageProcessing 명령 및 ImageMagick / libvips 작업 목록을 보려면 다음 링크를 방문하십시오.</target>
        </trans-unit>
        <trans-unit id="bdc752c9be3af97e684d1ccc96f6f02a311f7cc3" translate="yes" xml:space="preserve">
          <source>Vocabulary</source>
          <target state="translated">Vocabulary</target>
        </trans-unit>
        <trans-unit id="a2e8043ece674da22afc45fed36cfb79559fbb0d" translate="yes" xml:space="preserve">
          <source>WARNING: &lt;code&gt;content_for&lt;/code&gt; is ignored in caches. So you shouldn't use it for elements that will be fragment cached.</source>
          <target state="translated">경고 : &lt;code&gt;content_for&lt;/code&gt; 는 캐시에서 무시됩니다. 따라서 조각 캐시 될 요소에는 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="ee60cdc3ada497395d10d46b78075ee653c48698" translate="yes" xml:space="preserve">
          <source>WARNING: The instrumentation framework is designed for long-running subscribers, use this feature sparingly because it wipes some internal caches and that has a negative impact on performance.</source>
          <target state="translated">경고 : 계측 프레임 워크는 장기 실행 가입자를 위해 설계되었으며, 일부 내부 캐시를 지우고 성능에 부정적인 영향을 미치기 때문에이 기능을 조금만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6e760f2bbde93bd56121f6bc045230dd68f709f9" translate="yes" xml:space="preserve">
          <source>WARNING: This validation must not be used on both ends of an association. Doing so will lead to a circular dependency and cause infinite recursion.</source>
          <target state="translated">경고 :이 유효성 검사는 연결의 양쪽 끝에서 사용해서는 안됩니다. 그렇게하면 순환 종속성이 발생하고 무한 재귀가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="dfd3facc8e523ca55e2b27b930498a9c83232fa6" translate="yes" xml:space="preserve">
          <source>WARNING: this helper only works with valid JSON. Using this on non-JSON values will open up serious XSS vulnerabilities. For example, if you replace the &lt;code&gt;current_user.to_json&lt;/code&gt; in the example above with user input instead, the browser will happily eval() that string as JavaScript.</source>
          <target state="translated">경고 :이 도우미는 유효한 JSON에서만 작동합니다. JSON이 아닌 값에 이것을 사용하면 심각한 XSS 취약점이 생길 수 있습니다. 예를 들어 위의 예 에서 &lt;code&gt;current_user.to_json&lt;/code&gt; 을 사용자 입력으로 바꾸면 브라우저는 해당 문자열을 JavaScript로 행복하게 평가합니다.</target>
        </trans-unit>
        <trans-unit id="b1051102d01e44761f374446c27c97e8b87de41c" translate="yes" xml:space="preserve">
          <source>WEB_IMAGE_CONTENT_TYPES</source>
          <target state="translated">WEB_IMAGE_CONTENT_TYPES</target>
        </trans-unit>
        <trans-unit id="299decfbd735112c1a5007294bc1f4c4a258baa1" translate="yes" xml:space="preserve">
          <source>WEBrick servers buffer all responses, and so including &lt;code&gt;ActionController::Live&lt;/code&gt; will not work. You must use a web server which does not automatically buffer responses.</source>
          <target state="translated">WEBrick 서버는 모든 응답을 버퍼링하므로 &lt;code&gt;ActionController::Live&lt;/code&gt; 를 포함하여 작동하지 않습니다. 응답을 자동으로 버퍼링하지 않는 웹 서버를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="af92ecf91686bf2e99b9dd00a6ac5a31ea826c64" translate="yes" xml:space="preserve">
          <source>WEEKEND_DAYS</source>
          <target state="translated">WEEKEND_DAYS</target>
        </trans-unit>
        <trans-unit id="40d23f3b3af90554dade75ca1449213a1776239f" translate="yes" xml:space="preserve">
          <source>WHITE</source>
          <target state="translated">WHITE</target>
        </trans-unit>
        <trans-unit id="4d7285cafd4ab47eeb444f812e48e1fb97a945a6" translate="yes" xml:space="preserve">
          <source>WIP: Not all the helpers are listed here. For a full list see the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers.html&quot;&gt;API documentation&lt;/a&gt;</source>
          <target state="translated">WIP : 모든 도우미가 여기에 나열되는 것은 아닙니다. 전체 목록은 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers.html&quot;&gt;API 설명서를&lt;/a&gt; 참조하십시오</target>
        </trans-unit>
        <trans-unit id="27dc0925dbb0875327e5c55ee8c69902566ebe96" translate="yes" xml:space="preserve">
          <source>Wait notifications to be published.</source>
          <target state="translated">알림이 게시 될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="7cebd14f08ab49c4cc3ac3e9740b274ae40810f1" translate="yes" xml:space="preserve">
          <source>Walkthrough to Generating a Mailer</source>
          <target state="translated">메일러 생성을위한 연습</target>
        </trans-unit>
        <trans-unit id="6eb0c9e3dc0c281b408b4ce67a3fdb6bca09bd74" translate="yes" xml:space="preserve">
          <source>Warnings, gotchas or tips that might help users and save them time</source>
          <target state="translated">사용자에게 도움이되고 시간을 절약 할 수있는 경고, 문제 또는 팁</target>
        </trans-unit>
        <trans-unit id="4a225a7e421157620fcd0d618d25d5daea5cfcf3" translate="yes" xml:space="preserve">
          <source>Was the delegate loaded, causing the mailer action to be processed?</source>
          <target state="translated">델리게이트가로드되어 메일러 조치가 처리 되었습니까?</target>
        </trans-unit>
        <trans-unit id="2caac259998a19a0b82d6ff21bd354498ad7eefc" translate="yes" xml:space="preserve">
          <source>Was this exception raised because the given name was missing?</source>
          <target state="translated">주어진 이름이 없어서이 예외가 발생 했습니까?</target>
        </trans-unit>
        <trans-unit id="14ad0a97c682cc72d02368f8c60274ce797f48e3" translate="yes" xml:space="preserve">
          <source>We also have to permit the &lt;code&gt;:status&lt;/code&gt; key as part of the strong parameter, in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;:</source>
          <target state="translated">또한 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 에서 strong 매개 변수의 일부로 &lt;code&gt;:status&lt;/code&gt; 키 를 허용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e6c4ce2fbb29b0bb74563ebfc6cda037566f3d08" translate="yes" xml:space="preserve">
          <source>We also want to allow only authenticated users to delete comments, so in the &lt;code&gt;CommentsController&lt;/code&gt; (&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;) we write:</source>
          <target state="translated">또한 인증 된 사용자 만 주석을 삭제할 수 있도록하기 위해 &lt;code&gt;CommentsController&lt;/code&gt; ( &lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt; )에 다음과 같이 작성합니다.</target>
        </trans-unit>
        <trans-unit id="5597fb441fd4a1e3152a150399496097ca814d37" translate="yes" xml:space="preserve">
          <source>We are able to call the methods like this:</source>
          <target state="translated">다음과 같은 메소드를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="674ecbc23144b4d1cdf785619bb9c8f8e150f2ae" translate="yes" xml:space="preserve">
          <source>We are going to cover how constant autoloading works in more detail later, but the idea is that when a constant like &lt;code&gt;Post&lt;/code&gt; is hit and missing, if there's a &lt;code&gt;post.rb&lt;/code&gt; file for example in &lt;code&gt;app/models&lt;/code&gt; Rails is going to find it, evaluate it, and have &lt;code&gt;Post&lt;/code&gt; defined as a side-effect.</source>
          <target state="translated">우리는 나중에 자동 로딩이 어떻게 작동하는지 좀 더 자세히 다룰 것입니다.하지만 &lt;code&gt;Post&lt;/code&gt; 와 같은 상수 가 맞고 &lt;code&gt;post.rb&lt;/code&gt; 때 &lt;code&gt;app/models&lt;/code&gt; 에 post.rb 파일 이 있다면 Rails가 그것을 찾을 것입니다. 그것은, 그리고 한 &lt;code&gt;Post&lt;/code&gt; 부작용으로 정의.</target>
        </trans-unit>
        <trans-unit id="e984878fb53aff11a66108b7ca69680f0f0411df" translate="yes" xml:space="preserve">
          <source>We call &lt;em&gt;autoload paths&lt;/em&gt; to the list of application directories whose contents are to be autoloaded. For example, &lt;code&gt;app/models&lt;/code&gt;. Such directories represent the root namespace: &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">내용을 자동로드 할 응용 프로그램 디렉토리 목록으로 &lt;em&gt;자동로드 경로&lt;/em&gt; 를 호출 합니다. 예를 들어 &lt;code&gt;app/models&lt;/code&gt; 입니다. 이러한 디렉토리는 루트 네임 스페이스 ( &lt;code&gt;Object&lt;/code&gt; )를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="158c098bf791e16a613f557387ab53daa7f7c6ca" translate="yes" xml:space="preserve">
          <source>We call this 'unobtrusive' JavaScript because we're no longer mixing our JavaScript into our HTML. We've properly separated our concerns, making future change easy. We can easily add behavior to any link by adding the data attribute. We can run all of our JavaScript through a minimizer and concatenator. We can serve our entire JavaScript bundle on every page, which means that it'll get downloaded on the first page load and then be cached on every page after that. Lots of little benefits really add up.</source>
          <target state="translated">우리는 더 이상 JavaScript를 HTML에 혼합하지 않기 때문에 이것을 '불법적 인'JavaScript라고합니다. 우리는 우려를 적절히 분리하여 미래의 변화를 쉽게 만듭니다. data 속성을 추가하여 모든 링크에 동작을 쉽게 추가 할 수 있습니다. 최소화 기 및 연결기를 통해 모든 JavaScript를 실행할 수 있습니다. 모든 페이지에서 전체 자바 스크립트 번들을 제공 할 수 있습니다. 즉, 첫 번째 페이지로드시 다운로드 한 후 모든 페이지에 캐시됩니다. 많은 혜택이 실제로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="45d7b2227d635b0a2cac1d9b60d848a104986cee" translate="yes" xml:space="preserve">
          <source>We can achieve this in two ways. The first is to use &lt;code&gt;create_with&lt;/code&gt;:</source>
          <target state="translated">우리는 이것을 두 가지 방법으로 달성 할 수 있습니다. 첫 번째는 &lt;code&gt;create_with&lt;/code&gt; 를 사용하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="d006ab704ee27e4d7971b50c941bb36b13942b80" translate="yes" xml:space="preserve">
          <source>We can add other locations and give them a certain precedence when resolving paths using the &lt;code&gt;prepend_view_path&lt;/code&gt; and &lt;code&gt;append_view_path&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;prepend_view_path&lt;/code&gt; 및 &lt;code&gt;append_view_path&lt;/code&gt; 메소드를 사용하여 경로를 해석 할 때 다른 위치를 추가하고 특정 우선 순위 를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1523f1e1b5068380c26e04bc1e6b2f67b4b12c69" translate="yes" xml:space="preserve">
          <source>We can add our status validation to the concern, but this is slightly more complex as validations are methods called at the class level. The &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; (&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt;API Guide&lt;/a&gt;) gives us a simpler way to include them:</source>
          <target state="translated">우리는 상태 검증을 관심사에 추가 할 수 있지만 검증은 클래스 수준에서 호출되는 메서드이기 때문에 약간 더 복잡합니다. &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; ( &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt;API 가이드&lt;/a&gt; ) 우리를 포함 할 수있는 간단한 방법을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="60f96ebdc972aee31fd3e28df505ab9034f58590" translate="yes" xml:space="preserve">
          <source>We can also add a test for updating an existing Article.</source>
          <target state="translated">기존 기사를 업데이트하기위한 테스트를 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bda86681941bfb72744c47c5b5c142d20b62537" translate="yes" xml:space="preserve">
          <source>We can also designate &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; values that differ from their labels:</source>
          <target state="translated">레이블과 다른 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 값을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd05c98d271d3659c58c6aca0bdad1b98162be45" translate="yes" xml:space="preserve">
          <source>We can also pass in the symbol arguments instead of strings.</source>
          <target state="translated">문자열 대신 기호 인수를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a5945ca3693e9a07a3ced8ffe36836cc1e5368a" translate="yes" xml:space="preserve">
          <source>We can also see that our new generator has a class method called &lt;code&gt;source_root&lt;/code&gt;. This method points to where our generator templates will be placed, if any, and by default it points to the created directory &lt;code&gt;lib/generators/initializer/templates&lt;/code&gt;.</source>
          <target state="translated">또한 새로운 생성기에는 &lt;code&gt;source_root&lt;/code&gt; 라는 클래스 메소드가 있음을 알 수 있습니다. 이 메소드는 생성기 템플리트가있는 위치를 가리키고 기본적으로 작성된 디렉토리 &lt;code&gt;lib/generators/initializer/templates&lt;/code&gt; 를 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="e5c17c70425bc282e5f632f739761b7ac072ab15" translate="yes" xml:space="preserve">
          <source>We can also set the locale from the &lt;em&gt;subdomain&lt;/em&gt; in a very similar way:</source>
          <target state="translated">&lt;em&gt;하위 도메인&lt;/em&gt; 에서 로케일을 매우 유사한 방식으로 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="73e8aa9cf06c7b905a18521d06b56328e8e076ef" translate="yes" xml:space="preserve">
          <source>We can detach a subscriber as well:</source>
          <target state="translated">구독자를 분리 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2461ab48a48cc7fd7ca68271451ce166765dd8c1" translate="yes" xml:space="preserve">
          <source>We can do this by using:</source>
          <target state="translated">다음을 사용하여이 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f29e014ab286c906b45549a0efc2101199a46f0d" translate="yes" xml:space="preserve">
          <source>We can easily simulate this behavior by changing our &lt;code&gt;config/application.rb&lt;/code&gt; once again:</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; 를 다시 한 번 변경하여이 동작을 쉽게 시뮬레이션 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="671986b1c75b856b2f16d053ed41b695a0b6c2d0" translate="yes" xml:space="preserve">
          <source>We can improve upon the situation further by referencing both associations in the finder with:</source>
          <target state="translated">파인더의 두 연관을 모두 참조하여 상황을 더 개선 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f9f17b3a72f43793c39b51e4f807af49d66692a" translate="yes" xml:space="preserve">
          <source>We can include something like this in our &lt;code&gt;ApplicationController&lt;/code&gt; then:</source>
          <target state="translated">&lt;code&gt;ApplicationController&lt;/code&gt; 에 다음 과 같은 것을 포함시킬 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="48c68102732fa9393bd3fd20556c96ef6912b8af" translate="yes" xml:space="preserve">
          <source>We can inspect what routes are mapped by running the &lt;code&gt;bin/rails routes&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;bin/rails routes&lt;/code&gt; 명령 을 실행하여 매핑 된 경로를 검사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5d43a2af2afcb55f51b1f20e26b47cb69175dae2" translate="yes" xml:space="preserve">
          <source>We can mix and match &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; conditions and the final SQL will have all conditions joined with &lt;code&gt;AND&lt;/code&gt;.</source>
          <target state="translated">우리는 혼합하고 일치시킬 수 있습니다 &lt;code&gt;scope&lt;/code&gt; 및 조건을 최종 SQL이 합류 모든 조건이됩니다 &lt;code&gt;AND&lt;/code&gt; . &lt;code&gt;where&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fef2b7b6094cfeac80754e509876d8b1cb897617" translate="yes" xml:space="preserve">
          <source>We can mix and match &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; conditions and the final sql will have all conditions joined with &lt;code&gt;AND&lt;/code&gt;.</source>
          <target state="translated">우리는 혼합하고 일치시킬 수 있습니다 &lt;code&gt;scope&lt;/code&gt; 및 조건을 최종 SQL은 합류 모든 조건이됩니다 &lt;code&gt;AND&lt;/code&gt; . &lt;code&gt;where&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25cb9b87a15d330a11745a3f48d175290efd0104" translate="yes" xml:space="preserve">
          <source>We can mix and match these two concepts. One element of a hash might be an array as in the previous example, or you can have an array of hashes. For example, a form might let you create any number of addresses by repeating the following form fragment</source>
          <target state="translated">우리는이 두 가지 개념을 혼합하여 사용할 수 있습니다. 해시의 한 요소는 이전 예에서와 같이 배열이거나 해시 배열을 가질 수 있습니다. 예를 들어 양식을 사용하면 다음과 같은 양식 조각을 반복하여 여러 주소를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc6819d94def13c221c19ffe706c8fae83893aa2" translate="yes" xml:space="preserve">
          <source>We can notice on the output that our new helper was invoked instead of the Rails default. However one thing is missing, which is tests for our new generator and to do that, we are going to reuse old helpers test generators.</source>
          <target state="translated">Rails 기본값 대신 새로운 도우미가 호출 된 결과를 확인할 수 있습니다. 그러나 새로운 발전기에 대한 테스트 인 한 가지가 빠져 있는데,이를 위해 오래된 도우미 테스트 생성기를 재사용 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="5bf695f971304b2d38f0293143ebbee982e8c953" translate="yes" xml:space="preserve">
          <source>We can now create an article by visiting http://localhost:3000/articles/new. To finish up, let's link to that page from the bottom of &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;:</source>
          <target state="translated">이제 http : // localhost : 3000 / articles / new를 방문하여 기사를 작성할 수 있습니다. 완료하려면 &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; 하단에서 해당 페이지로 연결하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="e2a01997d5272aeae80bfef4b4efea771564f6d6" translate="yes" xml:space="preserve">
          <source>We can now update an article by visiting its edit page, e.g. http://localhost:3000/articles/1/edit. To finish up, let's link to the edit page from the bottom of &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt;:</source>
          <target state="translated">이제 편집 페이지 (예 : http : // localhost : 3000 / articles / 1 / edit)를 방문하여 기사를 업데이트 할 수 있습니다. 완료하려면 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; 하단에서 편집 페이지로 연결하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="d84ff0f8535da32019dbea68caccd5811c7c270c" translate="yes" xml:space="preserve">
          <source>We can run all of our tests at once by using the &lt;code&gt;bin/rails test&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;bin/rails test&lt;/code&gt; 명령 을 사용하여 모든 테스트를 한 번에 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0468e35a369b93b1b16b95a37bc73d5315229e1c" translate="yes" xml:space="preserve">
          <source>We can run all of our tests at once by using the &lt;code&gt;rails test&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;rails test&lt;/code&gt; 명령 을 사용하여 모든 테스트를 한 번에 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74afb863f119d806e91b6f24b45afef3bd286409" translate="yes" xml:space="preserve">
          <source>We can see how it works by looking at some &lt;code&gt;bin/rails console&lt;/code&gt; output:</source>
          <target state="translated">&lt;code&gt;bin/rails console&lt;/code&gt; 출력 을 보면 어떻게 작동하는지 알 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2d38a51f63747d2436139903e5bc3ed829bf1722" translate="yes" xml:space="preserve">
          <source>We can see how it works by looking at some &lt;code&gt;rails console&lt;/code&gt; output:</source>
          <target state="translated">&lt;code&gt;rails console&lt;/code&gt; 출력 을 보면 어떻게 작동하는지 확인할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="01a1baf74a78b8f20f805911d9a8b84c2922e0ca" translate="yes" xml:space="preserve">
          <source>We can see in this example that the name of a class or module that belongs to a certain nesting does not necessarily correlate with the namespaces at the spot.</source>
          <target state="translated">이 예제에서 특정 중첩에 속하는 클래스 또는 모듈의 이름이 그 자리에서 네임 스페이스와 반드시 상호 관련되는 것은 아님을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be2a93364734b3fcdc7789f4a368481d9597ef1c" translate="yes" xml:space="preserve">
          <source>We can see that by invoking the description of this new generator (don't forget to delete the old generator file):</source>
          <target state="translated">이 새로운 생성기의 설명을 호출하여 볼 수 있습니다 (이전 생성기 파일을 삭제하는 것을 잊지 마십시오).</target>
        </trans-unit>
        <trans-unit id="6d2024991dba3905de582d767072f01911bd0d36" translate="yes" xml:space="preserve">
          <source>We can see that now an initializer named core_extensions was created at &lt;code&gt;config/initializers/core_extensions.rb&lt;/code&gt; with the contents of our template. That means that &lt;code&gt;copy_file&lt;/code&gt; copied a file in our source root to the destination path we gave. The method &lt;code&gt;file_name&lt;/code&gt; is automatically created when we inherit from &lt;code&gt;Rails::Generators::NamedBase&lt;/code&gt;.</source>
          <target state="translated">우리는 이제 &lt;code&gt;config/initializers/core_extensions.rb&lt;/code&gt; 에 템플릿의 내용으로 core_extensions 라는 이니셜 라이저가 생성되었음을 알 수 있습니다 . 이는 &lt;code&gt;copy_file&lt;/code&gt; 이 소스 루트에있는 파일을 우리가 지정한 대상 경로로 복사 했음을 의미합니다 . &lt;code&gt;file_name&lt;/code&gt; 메소드 는 &lt;code&gt;Rails::Generators::NamedBase&lt;/code&gt; 에서 상속 될 때 자동으로 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="75d4492af2e9147d4d07f5e103ece17b2ccf6112" translate="yes" xml:space="preserve">
          <source>We can see the final result by visiting http://localhost:3000. (Remember that &lt;code&gt;bin/rails server&lt;/code&gt; must be running!) Here's what happens when we do that:</source>
          <target state="translated">http : // localhost : 3000을 방문하여 최종 결과를 볼 수 있습니다. ( &lt;code&gt;bin/rails server&lt;/code&gt; 가 실행 중이어야 함을 기억하십시오 !) 이렇게하면 다음과 같은 일이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e820cc6d7557cbdde9b1f7da39dd1eeb92aba846" translate="yes" xml:space="preserve">
          <source>We can test the output of this method like this:</source>
          <target state="translated">이 메소드의 출력을 다음과 같이 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be2f3584318b837bc0d2a9930c88ab57e12e159b" translate="yes" xml:space="preserve">
          <source>We can try out our new generator by creating a helper for products:</source>
          <target state="translated">제품에 대한 도우미를 생성하여 새로운 생성기를 사용해 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="988076117425df2e6aa7ffaa293e0e2a4f6179f1" translate="yes" xml:space="preserve">
          <source>We can't distinguish a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag's origin&amp;mdash;whether it's a tag on your own site or on some other malicious site&amp;mdash;so we must block all &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; across the board, even if it's actually a safe same-origin script served from your own site. In these cases, explicitly skip CSRF protection on actions that serve JavaScript meant for a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그의 출처 (자체 사이트 또는 다른 악성 사이트의 태그이든)를 구별 할 수 없으므로 실제로 동일한 동일한 출처 스크립트를 제공하더라도 모든 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 를 차단해야합니다. 자신의 사이트에서. 이 경우 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 용 JavaScript를 제공하는 작업에 대해 CSRF 보호를 명시 적으로 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="910909b0b51a6e90e69f3ba6a85df8e4aae15f9c" translate="yes" xml:space="preserve">
          <source>We currently have a view that lists all articles in our database. Let's add a new view that shows the title and body of a single article.</source>
          <target state="translated">현재 데이터베이스의 모든 기사를 나열하는보기가 있습니다. 단일 기사의 제목과 본문을 표시하는 새보기를 추가해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="43dd581f3c1b42e5ea1b1293196c423436420c0f" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t bump dependencies just to encourage use of new versions, including for security issues. This is because application owners need to manually update their gems regardless of our efforts. Use &lt;code&gt;bundle update --conservative gem_name&lt;/code&gt; to safely update vulnerable dependencies.</source>
          <target state="translated">보안 문제를 포함하여 새로운 버전의 사용을 장려하기 위해 종속성을 침해하지 않습니다. 이는 애플리케이션 소유자가 우리의 노력과 상관없이 수동으로 gem을 업데이트해야하기 때문입니다. 취약한 종속성을 안전하게 업데이트 하려면 &lt;code&gt;bundle update --conservative gem_name&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="517d3ba81d6b07ef763f75a5074b23149aa43b40" translate="yes" xml:space="preserve">
          <source>We don't want to use the whole &amp;ldquo;encryption stack&amp;rdquo; for connection unit-tests, but we want to make sure that users test against the correct types of cookies (i.e. signed or encrypted or plain)</source>
          <target state="translated">연결 단위 테스트에 전체 &quot;암호화 스택&quot;을 사용하고 싶지는 않지만 사용자가 올바른 유형의 쿠키 (예 : 서명 또는 암호화 또는 일반)에 대해 테스트하도록합니다.</target>
        </trans-unit>
        <trans-unit id="77f455faf6ade11252b257d5515c568205713174" translate="yes" xml:space="preserve">
          <source>We had to create the &lt;strong&gt;gitapp&lt;/strong&gt; directory and initialize an empty git repository before Rails would add files it created to our repository. Let's see what it put in our database configuration:</source>
          <target state="translated">Rails가 생성 한 파일을 리포지토리에 추가하기 전에 &lt;strong&gt;gitapp&lt;/strong&gt; 디렉토리 를 생성하고 빈 git 리포지토리를 초기화해야했습니다. 데이터베이스 구성에 무엇이 들어가 있는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="fb59343385b9153b6b5bc0aa1bbb3d460fd911c7" translate="yes" xml:space="preserve">
          <source>We have chosen to redirect to the root path because that is our main access point for articles. But, in other circumstances, you might choose to redirect to e.g. &lt;code&gt;articles_path&lt;/code&gt;.</source>
          <target state="translated">루트 경로로 리디렉션하도록 선택했습니다. 루트 경로는 아티클에 대한 기본 액세스 포인트이기 때문입니다. 그러나 다른 상황에서는 예를 들어 &lt;code&gt;articles_path&lt;/code&gt; 로 리디렉션하도록 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f13236051ab994384c1a30307aac3630cdf19c8" translate="yes" xml:space="preserve">
          <source>We have to define our permitted controller parameters to prevent wrongful mass assignment. In this case, we want to both allow and require the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; parameters for valid use of &lt;code&gt;create&lt;/code&gt;. The syntax for this introduces &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;permit&lt;/code&gt;. The change will involve one line in the &lt;code&gt;create&lt;/code&gt; action:</source>
          <target state="translated">잘못된 질량 할당을 방지하기 위해 허용 된 컨트롤러 매개 변수를 정의해야합니다. 이 경우, &lt;code&gt;create&lt;/code&gt; 의 유효한 사용을 위해 &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;text&lt;/code&gt; 매개 변수 를 모두 허용하고 요구합니다 . 이것에 대한 문법은 &lt;code&gt;require&lt;/code&gt; 와 &lt;code&gt;permit&lt;/code&gt; 을 소개 합니다 . 변경 사항은 &lt;code&gt;create&lt;/code&gt; 조치 에서 한 행을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="9135c45478b9c5024a0ede42b557604327de6716" translate="yes" xml:space="preserve">
          <source>We may want to disable CSRF protection for APIs since they are typically designed to be state-less. That is, the request &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; client will handle the session for you instead of Rails.</source>
          <target state="translated">API는 일반적으로 상태 비 저장 형으로 설계되었으므로 API에 대한 CSRF 보호를 사용하지 않을 수 있습니다. 즉, 요청 &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; 클라이언트는 Rails 대신 세션을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="85953e56d12a85b7e879c9140723e86cee2651e6" translate="yes" xml:space="preserve">
          <source>We need to store the &lt;a href=&quot;generators#RAILS_DEV_PATH&quot;&gt;&lt;code&gt;RAILS_DEV_PATH&lt;/code&gt;&lt;/a&gt; in a constant, otherwise the path can change in Ruby 1.8.7 when we FileUtils.cd.</source>
          <target state="translated">&lt;a href=&quot;generators#RAILS_DEV_PATH&quot;&gt; &lt;code&gt;RAILS_DEV_PATH&lt;/code&gt; &lt;/a&gt; 를 상수 에 저장해야합니다 . 그렇지 않으면 FileUtils.cd 때 Ruby 1.8.7에서 경로가 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23cac8b8050308a836a07beb92d693696614f8bb" translate="yes" xml:space="preserve">
          <source>We need to store the &lt;a href=&quot;generators#RAILS_DEV_PATH&quot;&gt;RAILS_DEV_PATH&lt;/a&gt; in a constant, otherwise the path can change in Ruby 1.8.7 when we FileUtils.cd.</source>
          <target state="translated">&lt;a href=&quot;generators#RAILS_DEV_PATH&quot;&gt;RAILS_DEV_PATH&lt;/a&gt; 를 상수 로 저장해야합니다 . 그렇지 않으면 FileUtils.cd를 실행할 때 경로가 Ruby 1.8.7에서 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc98ca6ae3281fe5ac661f54e9a6b0e529873ba2" translate="yes" xml:space="preserve">
          <source>We often find ourselves with a medium-sized chunk of behavior that we'd like to extract, but only mix in to a single class.</source>
          <target state="translated">우리는 종종 우리가 추출하고 싶은 중간 크기의 행동 덩어리를 발견하지만 단일 클래스에만 혼합합니다.</target>
        </trans-unit>
        <trans-unit id="0ea717a58775a1784013db1426aa62db8993579f" translate="yes" xml:space="preserve">
          <source>We often need to iterate over a large set of records, as when we send a newsletter to a large set of customers, or when we export data.</source>
          <target state="translated">많은 고객에게 뉴스 레터를 보내거나 데이터를 내보낼 때처럼 대규모 레코드 세트를 반복해야하는 경우가 많습니다.</target>
        </trans-unit>
        <trans-unit id="f93b715190506ee3f1c41e95e1f22115faecb785" translate="yes" xml:space="preserve">
          <source>We often need to iterate over a large set of records, as when we send a newsletter to a large set of users, or when we export data.</source>
          <target state="translated">많은 사용자에게 뉴스 레터를 보내거나 데이터를 내보낼 때와 같이 많은 레코드 세트를 반복해야하는 경우가 종종 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b4ba83b3173b99928fe5dd25dde5519737fdcf6" translate="yes" xml:space="preserve">
          <source>We often want to render different html/json/xml templates for phones, tablets, and desktop browsers. Variants make it easy.</source>
          <target state="translated">우리는 종종 전화, 태블릿 및 데스크탑 브라우저를 위해 다른 html / json / xml 템플릿을 렌더링하려고합니다. 변형은 쉽게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ab597975bed681fdb296905f3831e1248c42c3b3" translate="yes" xml:space="preserve">
          <source>We override this in the sqlite3 and postgresql adapters to use only the column name (as per syntax requirements).</source>
          <target state="translated">구문 요구 사항에 따라 열 이름 만 사용하도록 sqlite3 및 postgresql 어댑터에서이를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="4413ece56758f843156efc2e004d815da81905ff" translate="yes" xml:space="preserve">
          <source>We pass &lt;code&gt;id: false&lt;/code&gt; to &lt;code&gt;create_table&lt;/code&gt; because that table does not represent a model. That's required for the association to work properly. If you observe any strange behavior in a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association like mangled model IDs, or exceptions about conflicting IDs, chances are you forgot that bit.</source>
          <target state="translated">테이블이 모델을 나타내지 않기 때문에 &lt;code&gt;create_table&lt;/code&gt; 에 &lt;code&gt;id: false&lt;/code&gt; 를 전달 합니다. 연결이 제대로 작동하려면 필요합니다. 맹 글링 된 모델 ID와 같은 &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; 연관 에서 이상한 동작 또는 충돌하는 ID에 대한 예외가 발견되면 해당 비트를 잊었을 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fee75db6450cb2fa5440d3ea28269a8848f74df" translate="yes" xml:space="preserve">
          <source>We recommend against using this setting in production environments. It relies on Ruby's &lt;code&gt;Kernel#caller&lt;/code&gt; method which tends to allocate a lot of memory in order to generate stacktraces of method calls.</source>
          <target state="translated">프로덕션 환경에서는이 설정을 사용하지 않는 것이 좋습니다. 메소드 호출의 스택 추적을 생성하기 위해 많은 메모리를 할당하는 경향이있는 Ruby의 &lt;code&gt;Kernel#caller&lt;/code&gt; 메소드 에 의존 합니다.</target>
        </trans-unit>
        <trans-unit id="b0bb5684413dc0e170e89107ecd331c6c4288945" translate="yes" xml:space="preserve">
          <source>We refer to the list of application directories whose contents are to be autoloaded as &lt;em&gt;autoload paths&lt;/em&gt;. For example, &lt;code&gt;app/models&lt;/code&gt;. Such directories represent the root namespace: &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">내용이 자동 &lt;em&gt;로드 경로&lt;/em&gt; 로 &lt;em&gt;자동&lt;/em&gt; 로드되는 응용 프로그램 디렉토리 목록을 참조 &lt;em&gt;합니다&lt;/em&gt; . 예 : &lt;code&gt;app/models&lt;/code&gt; . 이러한 디렉토리는 루트 네임 스페이스를 나타냅니다. &lt;code&gt;Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="598ad582df169550ec2a05dad6dc014c3f36a551" translate="yes" xml:space="preserve">
          <source>We reuse the &lt;code&gt;article_params&lt;/code&gt; method that we defined earlier for the create action.</source>
          <target state="translated">우리는 앞서 생성 한 &lt;code&gt;article_params&lt;/code&gt; 메소드를 재사용한다 .</target>
        </trans-unit>
        <trans-unit id="414be6f0f3699818f818a3fa2fa9c9e5cfe89caf" translate="yes" xml:space="preserve">
          <source>We start by adding a new route that maps to a new controller action (which we will add next). Open &lt;code&gt;config/routes.rb&lt;/code&gt;, and insert the last route shown here:</source>
          <target state="translated">새 컨트롤러 작업 (다음에 추가 할)에 매핑되는 새 경로를 추가하는 것으로 시작합니다. ㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ &lt;code&gt;config/routes.rb&lt;/code&gt; 를 열고 여기에 표시된 마지막 경로를 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="4689ed968b7698f822bbde5b4716d0e09d3ae563" translate="yes" xml:space="preserve">
          <source>We start by calling the &lt;code&gt;:new&lt;/code&gt; action on our Articles controller. This response should be successful.</source>
          <target state="translated">기사 컨트롤러 에서 &lt;code&gt;:new&lt;/code&gt; action을 호출하는 것으로 시작합니다 . 이 응답은 성공해야합니다.</target>
        </trans-unit>
        <trans-unit id="cb2d3dc0dbaa073429414d4a0570d3c5c87cf5a5" translate="yes" xml:space="preserve">
          <source>We still need a way to list all our articles, so let's do that. The route for this as per output of &lt;code&gt;rails routes&lt;/code&gt; is:</source>
          <target state="translated">우리는 여전히 모든 기사를 나열 할 방법이 필요하므로 그렇게하겠습니다. &lt;code&gt;rails routes&lt;/code&gt; 출력에 따른 경로 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eb323c4ef728d7d103b6579942b46646376a108f" translate="yes" xml:space="preserve">
          <source>We use normal content negotiation unless you include &lt;strong&gt;/&lt;/strong&gt; in your list, in which case we assume you're a browser and send HTML.</source>
          <target state="translated">목록에 &lt;strong&gt;/&lt;/strong&gt; 를 포함하지 않는 한 일반적인 콘텐츠 협상을 사용 합니다.이 경우 귀하가 브라우저라고 가정하고 HTML을 전송합니다.</target>
        </trans-unit>
        <trans-unit id="386d303e4a3e14aac757da3b562d6d7ab4f23a12" translate="yes" xml:space="preserve">
          <source>We use the &lt;code&gt;delete&lt;/code&gt; method for destroying resources, and this route is mapped to the &lt;code&gt;destroy&lt;/code&gt; action inside &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;, which doesn't exist yet. The &lt;code&gt;destroy&lt;/code&gt; method is generally the last CRUD action in the controller, and like the other public CRUD actions, it must be placed before any &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;protected&lt;/code&gt; methods. Let's add it:</source>
          <target state="translated">리소스를 &lt;code&gt;delete&lt;/code&gt; 하기 위해 delete 메소드를 사용하는데 ,이 경로는 아직 존재하지 않는 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 내부 의 &lt;code&gt;destroy&lt;/code&gt; 액션에 매핑됩니다 . &lt;code&gt;destroy&lt;/code&gt; 방법은 일반적으로 컨트롤러의 마지막 CRUD 액션, 그리고 기타 공공 CRUD 작업처럼, 그것은 어떤 앞에 위치해야 &lt;code&gt;private&lt;/code&gt; 또는 &lt;code&gt;protected&lt;/code&gt; 방법. 추가합시다 :</target>
        </trans-unit>
        <trans-unit id="db9f005888bcc67e9d1a7d8e26cd233984d79f30" translate="yes" xml:space="preserve">
          <source>We want to add a &lt;code&gt;flash&lt;/code&gt; message to our blog application whenever someone successfully creates a new Article.</source>
          <target state="translated">누군가 새 기사를 성공적으로 만들 때마다 블로그 응용 프로그램에 &lt;code&gt;flash&lt;/code&gt; 메시지 를 추가하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="1d5686b34c1f72bc6d9677d7ddd5606fc194c062" translate="yes" xml:space="preserve">
          <source>We were able to successfully test a very small workflow for visiting our blog and creating a new article. If we wanted to take this further we could add tests for commenting, removing articles, or editing comments. Integration tests are a great place to experiment with all kinds of use cases for our applications.</source>
          <target state="translated">블로그를 방문하고 새 기사를 작성하는 데 필요한 매우 작은 워크 플로우를 성공적으로 테스트 할 수있었습니다. 더 나아가고 싶다면 주석 달기, 기사 제거 또는 주석 편집을위한 테스트를 추가 할 수 있습니다. 통합 테스트는 애플리케이션에 대한 모든 종류의 사용 사례를 실험하기에 좋은 장소입니다.</target>
        </trans-unit>
        <trans-unit id="cb0bc5f2a0af19baa04cd89f2e7e17c0bccaf2bf" translate="yes" xml:space="preserve">
          <source>We will also add code to define the &lt;code&gt;acts_as_yaffle&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;acts_as_yaffle&lt;/code&gt; 메소드 를 정의하는 코드도 추가 할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="77c6582bd3fe3362720bd7a8b7d2e096e44434e8" translate="yes" xml:space="preserve">
          <source>We will be deprecating the use of &lt;code&gt;render :text&lt;/code&gt; in a future version. So please start using the more precise &lt;code&gt;:plain&lt;/code&gt;, &lt;code&gt;:html&lt;/code&gt;, and &lt;code&gt;:body&lt;/code&gt; options instead. Using &lt;code&gt;render :text&lt;/code&gt; may pose a security risk, as the content is sent as &lt;code&gt;text/html&lt;/code&gt;.</source>
          <target state="translated">향후 버전에서는 &lt;code&gt;render :text&lt;/code&gt; 를 사용하지 않을 예정 입니다. 보다 정확한 &lt;code&gt;:plain&lt;/code&gt; , &lt;code&gt;:html&lt;/code&gt; 및 &lt;code&gt;:body&lt;/code&gt; 옵션을 대신 사용하십시오. 콘텐츠가 &lt;code&gt;text/html&lt;/code&gt; 로 전송되므로 &lt;code&gt;render :text&lt;/code&gt; 사용하면 보안 위험이 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e10c11c72647528df053e440cfdf6cd1b5232923" translate="yes" xml:space="preserve">
          <source>We will be redirected back to the articles index page and there we assert that the text from the new article's title is on the articles index page.</source>
          <target state="translated">기사 색인 페이지로 다시 리디렉션되고 새 기사 제목의 텍스트가 기사 색인 페이지에 있다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="ca2a76503c2daca7ff0d901068d3558daac36b14" translate="yes" xml:space="preserve">
          <source>We will set up a simple resource called &quot;HighScore&quot; that will keep track of our highest score on video games we play.</source>
          <target state="translated">우리는 &quot;HighScore&quot;라는 간단한 리소스를 설정하여 우리가하는 비디오 게임에서 가장 높은 점수를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="a153c35b15dc1ba45b477ea77bf677c1bd87303b" translate="yes" xml:space="preserve">
          <source>We will take a look at &lt;code&gt;assert_select&lt;/code&gt; to query the resulting HTML of a request in the &quot;Testing Views&quot; section below. It is used for testing the response of our request by asserting the presence of key HTML elements and their content.</source>
          <target state="translated">아래의 &quot;테스트 뷰&quot;섹션에서 요청의 결과 HTML을 쿼리 &lt;code&gt;assert_select&lt;/code&gt; 위해 assert_select 를 살펴 보겠습니다 . 주요 HTML 요소 및 해당 컨텐츠의 존재를 확인하여 요청의 응답을 테스트하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5cf7d5c7e3874edbe274e88ee22475cd71e9f0a0" translate="yes" xml:space="preserve">
          <source>We will use a feature of Rails called a &lt;em&gt;form builder&lt;/em&gt; to create our form. Using a form builder, we can write a minimal amount of code to output a form that is fully configured and follows Rails conventions.</source>
          <target state="translated">&lt;em&gt;양식 작성기&lt;/em&gt; 라고하는 Rails의 기능을 사용하여 &lt;em&gt;양식&lt;/em&gt; 을 작성합니다. 폼 빌더를 사용하면 최소한의 코드를 작성하여 완전히 구성되고 Rails 규칙을 따르는 폼을 출력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a10ac9549cf6a77795a3a9fce4918b95fd9124e" translate="yes" xml:space="preserve">
          <source>We won't dig into the server configuration itself, but this is the last piece of our journey in the Rails initialization process.</source>
          <target state="translated">서버 구성 자체는 다루지 않지만 이것이 Rails 초기화 프로세스의 마지막 여정입니다.</target>
        </trans-unit>
        <trans-unit id="691cdc30ae7b6c06dccc449b81aeaae6287dbe5b" translate="yes" xml:space="preserve">
          <source>We'll cover validation errors in greater depth in the &lt;a href=&quot;#working-with-validation-errors&quot;&gt;Working with Validation Errors&lt;/a&gt; section.</source>
          <target state="translated">유효성 검사 오류 &lt;a href=&quot;#working-with-validation-errors&quot;&gt;작업&lt;/a&gt; 섹션 에서 유효성 검사 오류에 대해보다 자세하게 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="a8081622cc93f1b7df35fe01c9c1d6af41f86595" translate="yes" xml:space="preserve">
          <source>We'll start by generating our integration test skeleton:</source>
          <target state="translated">통합 테스트 스켈레톤을 생성하는 것으로 시작하겠습니다.</target>
        </trans-unit>
        <trans-unit id="48cb234ea63e47db5a7d0886a550a6f6493ae294" translate="yes" xml:space="preserve">
          <source>We're going to see the same generator that we used before when creating the &lt;code&gt;Article&lt;/code&gt; model. This time we'll create a &lt;code&gt;Comment&lt;/code&gt; model to hold a reference to an article. Run this command in your terminal:</source>
          <target state="translated">&lt;code&gt;Article&lt;/code&gt; 모델을 만들 때 이전에 사용한 것과 동일한 생성기를 보게 될 것 입니다. 이번에 는 기사에 대한 참조를 담기 위해 &lt;code&gt;Comment&lt;/code&gt; 모델을 작성합니다 . 터미널에서이 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2432a238cbf87e5d31e0c2da682062f2bea384f6" translate="yes" xml:space="preserve">
          <source>We're now ready to cover the &quot;D&quot; part of CRUD, deleting articles from the database. Following the REST convention, the route for deleting articles as per output of &lt;code&gt;rails routes&lt;/code&gt; is:</source>
          <target state="translated">이제 CRUD의 &quot;D&quot;부분을 다루면서 데이터베이스에서 기사를 삭제했습니다. REST 규칙에 따라 &lt;code&gt;rails routes&lt;/code&gt; 출력에 따라 기사를 삭제하는 경로 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="106ecb513f758b89ed0780b6774563de1d67b706" translate="yes" xml:space="preserve">
          <source>We've connected all the MVC pieces together, and we have our first controller action! Next, we'll move on to the second action.</source>
          <target state="translated">우리는 모든 MVC 조각을 함께 연결했으며 첫 번째 컨트롤러 작업이 있습니다! 다음으로 두 번째 작업으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ad900a6e442016789ac71ed65bda6dd044332632" translate="yes" xml:space="preserve">
          <source>We've covered the &quot;CR&quot; of CRUD. Now let's move on to the &quot;U&quot; (Update). Updating a resource is very similar to creating a resource. They are both multi-step processes. First, the user requests a form to edit the data. Then, the user submits the form. If there are no errors, then the resource is updated. Else, the form is redisplayed with error messages, and the process is repeated.</source>
          <target state="translated">CRUD의 &quot;CR&quot;을 다루었습니다. 이제 &quot;U&quot;(업데이트)로 이동하겠습니다. 리소스 업데이트는 리소스 생성과 매우 유사합니다. 둘 다 다단계 프로세스입니다. 먼저 사용자는 데이터 편집을위한 양식을 요청합니다. 그런 다음 사용자가 양식을 제출합니다. 오류가 없으면 리소스가 업데이트됩니다. 그렇지 않으면 양식이 오류 메시지와 함께 다시 표시되고 프로세스가 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="bed2fd2a7e71a99ceca5ee6a4f7ad67dac5876a7" translate="yes" xml:space="preserve">
          <source>We've covered the &quot;CR&quot; part of CRUD. Now let's focus on the &quot;U&quot; part, updating articles.</source>
          <target state="translated">CRUD의 &quot;CR&quot;부분을 다뤘습니다. 이제 기사를 업데이트하면서 &quot;U&quot;부분에 초점을 맞추겠습니다.</target>
        </trans-unit>
        <trans-unit id="ab6e6b9f618b70a68d436f247846a40e619f778a" translate="yes" xml:space="preserve">
          <source>Weak ETags are considered to be semantically equivalent but not byte-for-byte identical. This is perfect for browser caching of HTML pages where we don't care about exact equality, just what the user is viewing.</source>
          <target state="translated">약한 ETag는 의미 적으로 동등한 것으로 간주되지만 바이트 단위는 동일하지 않습니다. 이것은 사용자가보고있는 것과 정확히 같은 것이 중요하지 않은 HTML 페이지의 브라우저 캐싱에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="87643afaa4c85711a403e4a2c1153e28b5b74acc" translate="yes" xml:space="preserve">
          <source>Weak ETags are what we almost always need, so they're the default. Check out &lt;a href=&quot;response#method-i-strong_etag-3D&quot;&gt;&lt;code&gt;strong_etag=&lt;/code&gt;&lt;/a&gt; to provide a strong ETag validator.</source>
          <target state="translated">약한 ETag는 우리가 거의 항상 필요로하는 것이므로 이것이 기본값입니다. 강력한 ETag 유효성 검사기를 제공하려면 &lt;a href=&quot;response#method-i-strong_etag-3D&quot;&gt; &lt;code&gt;strong_etag=&lt;/code&gt; &lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1efac46adc87ab5e99b26566d02e756f2c0ac46" translate="yes" xml:space="preserve">
          <source>Weak ETags are what we almost always need, so they're the default. Check out &lt;a href=&quot;response#method-i-strong_etag-3D&quot;&gt;strong_etag=&lt;/a&gt; to provide a strong ETag validator.</source>
          <target state="translated">약한 ETag는 거의 항상 필요한 것이므로 기본값입니다. 강력한 ETag 유효성 검사기를 제공하려면 &lt;a href=&quot;response#method-i-strong_etag-3D&quot;&gt;strong_etag =&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
