<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="2ab15d11218b04ab1e55edd9e2351474404876f9" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; Controller stack includes all renderers, which means you can use &lt;code&gt;render :json&lt;/code&gt; and brothers freely in your controllers. Keep in mind that templates are not going to be rendered, so you need to ensure your controller is calling either &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;redirect_to&lt;/code&gt; in all actions, otherwise it will return 204 No Content.</source>
          <target state="translated">기본 &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; 컨트롤러 스택에는 모든 렌더러가 포함 되므로 컨트롤러에서 &lt;code&gt;render :json&lt;/code&gt; 및 brothers를 자유롭게 사용할 수 있습니다 . 템플릿은 렌더링되지 않으므로 컨트롤러가 모든 작업에서 &lt;code&gt;render&lt;/code&gt; 또는 &lt;code&gt;redirect_to&lt;/code&gt; 를 호출하는지 확인해야합니다 . 그렇지 않으면 204 No Content가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="68002b170cf143cd31a7dd0a441517d28da354ce" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;chars&quot;&gt;&lt;code&gt;Chars&lt;/code&gt;&lt;/a&gt; implementation assumes that the encoding of the string is UTF-8, if you want to handle different encodings you can write your own multibyte string handler and configure it through &lt;a href=&quot;../multibyte#method-c-proxy_class&quot;&gt;&lt;code&gt;ActiveSupport::Multibyte.proxy_class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc90e3304a747d9958eb86ef66ce3055efc93b4d" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;chars&quot;&gt;Chars&lt;/a&gt; implementation assumes that the encoding of the string is UTF-8, if you want to handle different encodings you can write your own multibyte string handler and configure it through &lt;a href=&quot;../multibyte#method-c-proxy_class&quot;&gt;ActiveSupport::Multibyte.proxy_class&lt;/a&gt;.</source>
          <target state="translated">기본 &lt;a href=&quot;chars&quot;&gt;Chars&lt;/a&gt; 구현은 문자열의 인코딩이 UTF-8이라고 가정합니다. 다른 인코딩을 처리하려면 자체 멀티 바이트 문자열 핸들러를 작성하고 &lt;a href=&quot;../multibyte#method-c-proxy_class&quot;&gt;ActiveSupport :: Multibyte.proxy_class를&lt;/a&gt; 통해이를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0999be2b2dd63e205841c3741dbcba8d12a40141" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;connectionpool&quot;&gt;&lt;code&gt;ConnectionPool&lt;/code&gt;&lt;/a&gt; maximum size is 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d39dd78e8545ab21333b000c8adbc3abe6b759" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;connectionpool&quot;&gt;ConnectionPool&lt;/a&gt; maximum size is 5.</source>
          <target state="translated">기본 &lt;a href=&quot;connectionpool&quot;&gt;ConnectionPool&lt;/a&gt; 최대 크기는 5입니다.</target>
        </trans-unit>
        <trans-unit id="417f6a3218aa19f90d2676b492b9137303dbd659" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;en.yml&lt;/code&gt; locale in this directory contains a sample pair of translation strings:</source>
          <target state="translated">이 디렉토리 의 기본 &lt;code&gt;en.yml&lt;/code&gt; 로켈에는 샘플 번역 문자열 쌍이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0d259d82af709edf493880239feb894d39f182f" translate="yes" xml:space="preserve">
          <source>The default Content-Type and Content-Disposition headers are set to download arbitrary binary files in as many browsers as possible. IE versions 4, 5, 5.5, and 6 are all known to have a variety of quirks (especially when downloading over SSL).</source>
          <target state="translated">기본 Content-Type 및 Content-Disposition 헤더는 가능한 많은 브라우저에서 임의의 이진 파일을 다운로드하도록 설정되어 있습니다. IE 버전 4, 5, 5.5 및 6은 모두 다양한 특징을 가지고있는 것으로 알려져 있습니다 (특히 SSL을 통해 다운로드 할 때).</target>
        </trans-unit>
        <trans-unit id="8cb593908b345bbc3e5cdf84afbaa780e9d63901" translate="yes" xml:space="preserve">
          <source>The default HTTP status code used in &lt;code&gt;ActionDispatch::SSL&lt;/code&gt; when redirecting non-GET/HEAD requests from HTTP to HTTPS has been changed to &lt;code&gt;308&lt;/code&gt; as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc7538&quot;&gt;https://tools.ietf.org/html/rfc7538&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db07404c73b8a2a45b04e8b6ffb034a810331405" translate="yes" xml:space="preserve">
          <source>The default Rails log level is &lt;code&gt;debug&lt;/code&gt; in all environments.</source>
          <target state="translated">기본 Rails 로그 레벨은 모든 환경에서 &lt;code&gt;debug&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="38a0c4e49d718aec7078c57bc4c8099a64d09f22" translate="yes" xml:space="preserve">
          <source>The default XML builder is a fresh instance of &lt;code&gt;Builder::XmlMarkup&lt;/code&gt;. You can configure your own builder via the &lt;code&gt;:builder&lt;/code&gt; option. The method also accepts options like &lt;code&gt;:dasherize&lt;/code&gt; and friends, they are forwarded to the builder:</source>
          <target state="translated">기본 XML 빌더는 &lt;code&gt;Builder::XmlMarkup&lt;/code&gt; 의 새로운 인스턴스입니다 . &lt;code&gt;:builder&lt;/code&gt; 옵션을 통해 자체 빌더를 구성 할 수 있습니다 . 이 방법은 또한 &lt;code&gt;:dasherize&lt;/code&gt; 및 friends와 같은 옵션을 허용 하며 빌더로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="4ff911b45d3f05d4d40816676a3ed43ffe82d1a8" translate="yes" xml:space="preserve">
          <source>The default XML builder is a fresh instance of &lt;code&gt;Builder::XmlMarkup&lt;/code&gt;. You can configure your own builder with the &lt;code&gt;:builder&lt;/code&gt; option. The method also accepts options like &lt;code&gt;:dasherize&lt;/code&gt; and friends, they are forwarded to the builder.</source>
          <target state="translated">기본 XML 빌더는 &lt;code&gt;Builder::XmlMarkup&lt;/code&gt; 의 새로운 인스턴스입니다 . &lt;code&gt;:builder&lt;/code&gt; 옵션을 사용하여 자체 빌더를 구성 할 수 있습니다 . 이 방법은 또한 &lt;code&gt;:dasherize&lt;/code&gt; 및 friends와 같은 옵션을 허용 하며 빌더로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="fdfbcaff28aa74fc6b3972d42c3a0b707432a40f" translate="yes" xml:space="preserve">
          <source>The default behavior can be changed by setting the config options to a custom class:</source>
          <target state="translated">구성 옵션을 사용자 정의 클래스로 설정하여 기본 동작을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="964deb4deb137c72b1a8c946cd6ea798ee2b77c0" translate="yes" xml:space="preserve">
          <source>The default configuration for Rails 6</source>
          <target state="translated">Rails 6의 기본 구성</target>
        </trans-unit>
        <trans-unit id="cefd9f0956a756fa1742eab5d0fdfe7c9672a491" translate="yes" xml:space="preserve">
          <source>The default confirmation uses a JavaScript confirm dialog, but you can customize this by listening to the &lt;code&gt;confirm&lt;/code&gt; event, which is fired just before the confirmation window appears to the user. To cancel this default confirmation, have the confirm handler return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5118e78e0f72e8d201c79ffa5ee19f3bb74d601" translate="yes" xml:space="preserve">
          <source>The default confirmation uses a JavaScript confirm dialog, but you can customize this by listening to the &lt;code&gt;confirm&lt;/code&gt; event, which is fired just before the confirmation window appears to the user. To cancel this default confirmation, have the confirm handler to return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">기본 확인은 JavaScript 확인 ​​대화 상자를 사용하지만 확인 창이 사용자에게 표시되기 직전에 시작되는 &lt;code&gt;confirm&lt;/code&gt; 이벤트 를 수신하여이를 사용자 정의 할 수 있습니다 . 이 기본 확인을 취소하려면 확인 핸들러가 &lt;code&gt;false&lt;/code&gt; 를 리턴하도록하십시오 .</target>
        </trans-unit>
        <trans-unit id="3124d3c72e5b92f5a8455f117ed6fd09726ebfff" translate="yes" xml:space="preserve">
          <source>The default error message for &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated&quot;&gt;&lt;code&gt;validates_associated&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;. Note that each associated object will contain its own &lt;code&gt;errors&lt;/code&gt; collection; errors do not bubble up to the calling model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da02076b73046b331e3a794c5d90ae5db9d7569c" translate="yes" xml:space="preserve">
          <source>The default error message for &lt;code&gt;:only_integer&lt;/code&gt; is &lt;em&gt;&quot;must be an integer&quot;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbe748864f65ace153e63b32d9fb9aae5ccc443" translate="yes" xml:space="preserve">
          <source>The default error message for &lt;code&gt;validates_associated&lt;/code&gt; is &lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;. Note that each associated object will contain its own &lt;code&gt;errors&lt;/code&gt; collection; errors do not bubble up to the calling model.</source>
          <target state="translated">&lt;code&gt;validates_associated&lt;/code&gt; 의 기본 오류 메시지 는 &lt;em&gt;&quot;잘못된&quot;&lt;/em&gt; 입니다. 연결된 각 객체에는 자체 &lt;code&gt;errors&lt;/code&gt; 수집 이 포함됩니다 . 오류는 호출 모델에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="867423ae48db625181e81d46b4c69e62f28c825d" translate="yes" xml:space="preserve">
          <source>The default error message for this helper is &lt;em&gt;&quot;doesn't match confirmation&quot;&lt;/em&gt;.</source>
          <target state="translated">이 헬퍼의 기본 오류 메시지는 &lt;em&gt;&quot;일치하지 않습니다 확인&quot;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="191962cf0a53a5a6e818b0f1aca5743ac55311d9" translate="yes" xml:space="preserve">
          <source>The default error message for this helper is &lt;em&gt;&quot;is not included in the list&quot;&lt;/em&gt;.</source>
          <target state="translated">이 헬퍼의 기본 오류 메시지는 &lt;em&gt;&quot;목록에 포함되어 있지 않습니다&quot;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c1fb5c5ae103bf01f69e90eaa63675b328ed1a1c" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;has already been taken&quot;&lt;/em&gt;.</source>
          <target state="translated">기본 오류 메시지는 &lt;em&gt;&quot;이미 사용되었습니다&quot;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9457ef49196b5a4950348b7a27e4d880cb9c20c8" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;.</source>
          <target state="translated">기본 오류 메시지는 &lt;em&gt;&quot;잘못된&quot;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ba637f7bfb2bf214d7ab58eb7fa9d57e04657f8f" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;is not a number&quot;&lt;/em&gt;.</source>
          <target state="translated">기본 오류 메시지는 &lt;em&gt;&quot;숫자가 아닙니다&quot;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9335fb9ba4197c3649d79cacccddab3b123bd729" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;is reserved&quot;&lt;/em&gt;.</source>
          <target state="translated">기본 오류 메시지는 &lt;em&gt;&quot;is reserved&quot;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7f4903f326fc4f8f3dc2774dfae143f7d309b858" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;must be blank&quot;&lt;/em&gt;.</source>
          <target state="translated">기본 오류 메시지는 &lt;em&gt;&quot;must be blank&quot;&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fe342e1d9bddcb12fc387433f37a34de0597592e" translate="yes" xml:space="preserve">
          <source>The default error message when no options are specified is &lt;em&gt;&quot;is not a number&quot;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465f1f3ea389cd791f8d42ff409bc80944085d28" translate="yes" xml:space="preserve">
          <source>The default error messages depend on the type of length validation being performed. You can customize these messages using the &lt;code&gt;:wrong_length&lt;/code&gt;, &lt;code&gt;:too_long&lt;/code&gt;, and &lt;code&gt;:too_short&lt;/code&gt; options and &lt;code&gt;%{count}&lt;/code&gt; as a placeholder for the number corresponding to the length constraint being used. You can still use the &lt;code&gt;:message&lt;/code&gt; option to specify an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1ac826384501a459391f77dccc506bc756093f" translate="yes" xml:space="preserve">
          <source>The default error messages depend on the type of length validation being performed. You can personalize these messages using the &lt;code&gt;:wrong_length&lt;/code&gt;, &lt;code&gt;:too_long&lt;/code&gt;, and &lt;code&gt;:too_short&lt;/code&gt; options and &lt;code&gt;%{count}&lt;/code&gt; as a placeholder for the number corresponding to the length constraint being used. You can still use the &lt;code&gt;:message&lt;/code&gt; option to specify an error message.</source>
          <target state="translated">기본 오류 메시지는 수행중인 길이 유효성 검사 유형에 따라 다릅니다. 이러한 사용하여 메시지를 개인화 할 수 &lt;code&gt;:wrong_length&lt;/code&gt; , &lt;code&gt;:too_long&lt;/code&gt; 및 &lt;code&gt;:too_short&lt;/code&gt; 옵션 &lt;code&gt;%{count}&lt;/code&gt; 수가 사용되는 길이 제한에 해당위한 자리 표시 자입니다. 여전히 &lt;code&gt;:message&lt;/code&gt; 옵션을 사용하여 오류 메시지를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b13f3a7afb4a9725957b1897d9ead715643512bb" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing; the implementation should be overridden by concrete adapters.</source>
          <target state="translated">기본 구현은 아무 것도 수행하지 않습니다. 구현은 콘크리트 어댑터로 대체되어야합니다.</target>
        </trans-unit>
        <trans-unit id="3e74ab6be939a5c78f62ad5e60efb485ede92294" translate="yes" xml:space="preserve">
          <source>The default inheritance column name is &lt;code&gt;type&lt;/code&gt;, which means it's a reserved word inside Active Record. To be able to use single-table inheritance with another column name, or to use the column &lt;code&gt;type&lt;/code&gt; in your own model for something else, you can set &lt;code&gt;inheritance_column&lt;/code&gt;:</source>
          <target state="translated">기본 상속 열 이름은 &lt;code&gt;type&lt;/code&gt; 이며 이는 Active Record 내부의 예약어임을 의미합니다. 다른 테이블 이름으로 단일 테이블 상속을 사용하거나 다른 모델 의 열 &lt;code&gt;type&lt;/code&gt; 을 사용하려면 &lt;code&gt;inheritance_column&lt;/code&gt; 을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5b04d3ac6d07f3c41ce5d77eae396450a01409f4" translate="yes" xml:space="preserve">
          <source>The default is 5 minutes.</source>
          <target state="translated">기본값은 5 분입니다.</target>
        </trans-unit>
        <trans-unit id="1b67e281a2d48140c816abd25a470778ff77b5bf" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;/rails/active_storage&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;/rails/active_storage&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b2f7dad334733a76121cb0c0714aec946761f52d" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;:rails_storage_redirect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3000af20082800ed1719b2c75850c9c000fd27e" translate="yes" xml:space="preserve">
          <source>The default locale is used for all translations unless &lt;code&gt;I18n.locale=&lt;/code&gt; or &lt;code&gt;I18n.with_locale&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;I18n.locale=&lt;/code&gt; 또는 &lt;code&gt;I18n.with_locale&lt;/code&gt; 을 사용 하지 않으면 모든 번역에 기본 로캘이 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="bdea9edbdc10997d0fc7eb472e80325679677f90" translate="yes" xml:space="preserve">
          <source>The default locale loading mechanism in Rails does not load locale files in nested dictionaries, like we have here. So, for this to work, we must explicitly tell Rails to look further:</source>
          <target state="translated">Rails의 기본 로케일 로딩 메커니즘은 여기에서와 같이 중첩 된 사전에 로케일 파일을로드하지 않습니다. 따라서 이것이 작동하려면 Rails에 명시 적으로 추가로 지시해야합니다.</target>
        </trans-unit>
        <trans-unit id="0c2d50ec5de29e7e39e2abf4cdda42eed22420e0" translate="yes" xml:space="preserve">
          <source>The default location for the manifest is the root of the location specified in &lt;code&gt;config.assets.prefix&lt;/code&gt; ('/assets' by default).</source>
          <target state="translated">매니페스트의 기본 위치는 &lt;code&gt;config.assets.prefix&lt;/code&gt; 에 지정된 위치의 루트입니다 (기본적으로 '/ assets').</target>
        </trans-unit>
        <trans-unit id="f81c8358ebf064bc1b12157c51e2df2cc81232bf" translate="yes" xml:space="preserve">
          <source>The default locations are: the &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;javascripts&lt;/code&gt; and &lt;code&gt;stylesheets&lt;/code&gt; directories under the &lt;code&gt;app/assets&lt;/code&gt; folder, but these subdirectories are not special - any path under &lt;code&gt;assets/*&lt;/code&gt; will be searched.</source>
          <target state="translated">기본 위치는 &lt;code&gt;app/assets&lt;/code&gt; 폴더 아래 의 &lt;code&gt;images&lt;/code&gt; , &lt;code&gt;javascripts&lt;/code&gt; 및 &lt;code&gt;stylesheets&lt;/code&gt; 디렉토리 이지만 이러한 하위 디렉토리는 특별하지 않습니다 . &lt;code&gt;assets/*&lt;/code&gt; 아래의 경로 가 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="1c2b4eace4f7484f211975650ac9a2dae6cb21cb" translate="yes" xml:space="preserve">
          <source>The default mailer queue name is &lt;code&gt;mailers&lt;/code&gt;. This configuration option allows you to globally change the queue name. Set the following in your config:</source>
          <target state="translated">기본 메일러 큐 이름은 &lt;code&gt;mailers&lt;/code&gt; 입니다. 이 구성 옵션을 사용하면 큐 이름을 전체적으로 변경할 수 있습니다. 구성에서 다음을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="d40a6c3b3003507f3c7ed2c5fd5c5f76c65efea7" translate="yes" xml:space="preserve">
          <source>The default matcher for compiling files includes &lt;code&gt;application.js&lt;/code&gt;, &lt;code&gt;application.css&lt;/code&gt; and all non-JS/CSS files (this will include all image assets automatically) from &lt;code&gt;app/assets&lt;/code&gt; folders including your gems:</source>
          <target state="translated">파일 컴파일의 기본 매처에는 gem을 포함하여 &lt;code&gt;app/assets&lt;/code&gt; 폴더의 &lt;code&gt;application.js&lt;/code&gt; , &lt;code&gt;application.css&lt;/code&gt; 및 모든 비 JS / CSS 파일 (모든 이미지 자산이 자동으로 포함됨)이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="ed073a8405e9ab34fc3dac43c68ab0a495c2a384" translate="yes" xml:space="preserve">
          <source>The default middlewares shown here (and some others) are each summarized in the &lt;a href=&quot;#internal-middleware-stack&quot;&gt;Internal Middlewares&lt;/a&gt; section, below.</source>
          <target state="translated">여기에 표시된 기본 미들웨어 및 기타 미들웨어는 각각 &lt;a href=&quot;#internal-middleware-stack&quot;&gt;내부 미들웨어&lt;/a&gt; 섹션에 요약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a3c7bfab60bb2a9340081d984047c607d31607f" translate="yes" xml:space="preserve">
          <source>The default normalization used for operations that require normalization. It can be set to any of the normalizations in &lt;a href=&quot;unicode#NORMALIZATION_FORMS&quot;&gt;NORMALIZATION_FORMS&lt;/a&gt;.</source>
          <target state="translated">정규화가 필요한 작업에 사용되는 기본 정규화입니다. &lt;a href=&quot;unicode#NORMALIZATION_FORMS&quot;&gt;NORMALIZATION_FORMS&lt;/a&gt; 의 정규화 중 하나로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a301994a79c75534c49b79a61a4664b4e721cdd" translate="yes" xml:space="preserve">
          <source>The default parallelization method is to fork processes using Ruby's DRb system. The processes are forked based on the number of workers provided. The default number is the actual core count on the machine you are on, but can be changed by the number passed to the parallelize method.</source>
          <target state="translated">기본 병렬화 방법은 Ruby의 DRb 시스템을 사용하여 프로세스를 분기하는 것입니다. 프로세스는 제공된 작업자 수에 따라 분기됩니다. 기본 숫자는 사용중인 머신의 실제 코어 수이지만 parallelize 메소드에 전달 된 숫자로 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f767b8f5ac6c561f9d1d4776585774fb62693a4e" translate="yes" xml:space="preserve">
          <source>The default parallelization method is to fork processes. If you'd like to use threads instead you can pass &lt;code&gt;with: :threads&lt;/code&gt; to the &lt;code&gt;parallelize&lt;/code&gt; method. Note the threaded parallelization does not create multiple database and will not work with system tests at this time.</source>
          <target state="translated">기본 병렬화 방법은 프로세스를 분기하는 것입니다. 당신이 스레드를 사용하려는 경우 대신 당신은 전달할 수 있습니다 &lt;code&gt;with: :threads&lt;/code&gt; 받는 &lt;code&gt;parallelize&lt;/code&gt; 방법. 스레드 병렬화는 여러 데이터베이스를 작성하지 않으며 현재 시스템 테스트에서는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b1d81ea25551b6dbe82955f22e7b61026f6857f" translate="yes" xml:space="preserve">
          <source>The default query string in Rails 2.x is based on the modification time of the files. When assets are deployed to a cluster, there is no guarantee that the timestamps will be the same, resulting in different values being used depending on which server handles the request.</source>
          <target state="translated">Rails 2.x의 기본 쿼리 문자열은 파일 수정 시간을 기반으로합니다. 자산이 클러스터에 배포 될 때 타임 스탬프가 동일하다는 보장이 없으므로 요청을 처리하는 서버에 따라 다른 값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="147c7acadfc41f5f5e59a90b1e7884d58638c717" translate="yes" xml:space="preserve">
          <source>The default queue name prefix delimiter is '_'. This can be changed by setting &lt;code&gt;config.active_job.queue_name_delimiter&lt;/code&gt; in &lt;code&gt;application.rb&lt;/code&gt;:</source>
          <target state="translated">기본 큐 이름 접두어 분리 문자는 '_'입니다. &lt;code&gt;application.rb&lt;/code&gt; 에서 &lt;code&gt;config.active_job.queue_name_delimiter&lt;/code&gt; 를 설정하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8552b825d22023630bc90a85bfa0ff7ef0a73f83" translate="yes" xml:space="preserve">
          <source>The default sanitizer is Rails::Html::SafeListSanitizer. See &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;Rails HTML Sanitizers&lt;/a&gt; for more information.</source>
          <target state="translated">기본 소독제는 Rails :: Html :: SafeListSanitizer입니다. 자세한 내용은 &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;Rails HTML Sanitizer&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b2016ca14211876c1edaa8337a906e443cb4b6a4" translate="yes" xml:space="preserve">
          <source>The default serializer for new applications is &lt;code&gt;:json&lt;/code&gt;. For compatibility with old applications with existing cookies, &lt;code&gt;:marshal&lt;/code&gt; is used when &lt;code&gt;serializer&lt;/code&gt; option is not specified.</source>
          <target state="translated">새 응용 프로그램의 기본 직렬 변환기는 &lt;code&gt;:json&lt;/code&gt; 입니다. 기존 쿠키와 함께 이전 응용 프로그램과의 호환성을 위해 &lt;code&gt;serializer&lt;/code&gt; 옵션이 지정되지 않은 경우 &lt;code&gt;:marshal&lt;/code&gt; 이 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f47159673cb495ccbabe040b7bed54c0ab255c7c" translate="yes" xml:space="preserve">
          <source>The default setting is &lt;code&gt;true&lt;/code&gt;, which uses the partial at &lt;code&gt;/admin/articles/_article.erb&lt;/code&gt;. Setting the value to &lt;code&gt;false&lt;/code&gt; would render &lt;code&gt;/articles/_article.erb&lt;/code&gt;, which is the same behavior as rendering from a non-namespaced controller such as &lt;code&gt;ArticlesController&lt;/code&gt;.</source>
          <target state="translated">기본 설정은 &lt;code&gt;true&lt;/code&gt; 이며 &lt;code&gt;/admin/articles/_article.erb&lt;/code&gt; 부분을 ​​사용합니다 . 값을 &lt;code&gt;false&lt;/code&gt; 로 설정하면 &lt;code&gt;/articles/_article.erb&lt;/code&gt; 가 렌더링 되며 &lt;code&gt;ArticlesController&lt;/code&gt; 와 같이 네임 스페이스가없는 컨트롤러에서 렌더링하는 것과 동일한 동작 입니다.</target>
        </trans-unit>
        <trans-unit id="515503b563ee9a5bbb4ae3beb0127d46d8fa5713" translate="yes" xml:space="preserve">
          <source>The default settings are Selenium, using Chrome, with a screen size of 1400x1400.</source>
          <target state="translated">기본 설정은 Chrome을 사용하는 화면 크기가 1400x1400 인 Selenium입니다.</target>
        </trans-unit>
        <trans-unit id="c5f8f103612c80ac874538744f53c5fe3b5cd267" translate="yes" xml:space="preserve">
          <source>The default sum of an empty list is zero. You can override this default:</source>
          <target state="translated">빈 목록의 기본 합계는 0입니다. 이 기본값을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="071a72da76e5b74a031c70449265c7fa7a2297fe" translate="yes" xml:space="preserve">
          <source>The default terminator halts the chain when a callback throws &lt;code&gt;:abort&lt;/code&gt;.</source>
          <target state="translated">콜백에서 &lt;code&gt;:abort&lt;/code&gt; 가 발생하면 기본 종료자가 체인을 중단 합니다.</target>
        </trans-unit>
        <trans-unit id="4697708713aa6085f40190002f8d6e33c97a56cf" translate="yes" xml:space="preserve">
          <source>The default test stub in &lt;code&gt;test/models/article_test.rb&lt;/code&gt; looks like this:</source>
          <target state="translated">&lt;code&gt;test/models/article_test.rb&lt;/code&gt; 의 기본 테스트 스텁은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6a1270eb0f735549a1008a4527b95f164d8e96ac" translate="yes" xml:space="preserve">
          <source>The default trusted IPs list simply includes IP addresses that are guaranteed by the IP specification to be private addresses. Those will not be the ultimate client IP in production, and so are discarded. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network&quot;&gt;en.wikipedia.org/wiki/Private_network&lt;/a&gt; for details.</source>
          <target state="translated">기본 신뢰할 수있는 IP 목록에는 IP 사양에서 개인 주소로 보장되는 IP 주소 만 포함됩니다. 이들은 프로덕션에서 궁극적 인 클라이언트 IP가 아니므로 폐기됩니다. 자세한 내용은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network&quot;&gt;en.wikipedia.org/wiki/Private_network&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="387dbd27be3c9069b6f778552aed77b8b5cd08bc" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;include_root&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. You can change it to &lt;code&gt;true&lt;/code&gt; if the given &lt;a href=&quot;json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; string includes a single root node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f60753d7620ad7eea0f11cae021bf7e9adc787" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;include_root&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. You can change it to &lt;code&gt;true&lt;/code&gt; if the given &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; string includes a single root node.</source>
          <target state="translated">&lt;code&gt;include_root&lt;/code&gt; 의 기본값 은 &lt;code&gt;false&lt;/code&gt; 입니다. 주어진 &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; 문자열에 단일 루트 노드가 포함되어 있으면이 를 &lt;code&gt;true&lt;/code&gt; 로 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2995a2cd89ccb1c807ab761506e22c3579641b10" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%T.%L&amp;rdquo; on the object's value. It is still possible to override that by passing the &amp;ldquo;value&amp;rdquo; option.</source>
          <target state="translated">기본값 은 객체 값에서&amp;ldquo;% T. % L&amp;rdquo;로 &lt;code&gt;strftime&lt;/code&gt; 을 호출하여 생성됩니다 . &quot;value&quot;옵션을 전달하여이를 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2352d73ec4b0e0d6ff2a95c7bb0de09cbf629174" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce923ebd77135ee6e5a64fb412ca563cbb9a2f4" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;.</source>
          <target state="translated">기본값 은 객체 값에 &quot;% Y- % m&quot;을 사용하여 &lt;code&gt;strftime&lt;/code&gt; 을 호출하여 생성 되므로 &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; 및 &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 인스턴스에 대해 예상대로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="961406feda2c9607a547c41ca3bd120f2aeaa8dd" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%d&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;. You can still override that by passing the &amp;ldquo;value&amp;rdquo; option explicitly, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b813ed49344540ac2076972a7ceaf113ab8138" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%d&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;. You can still override that by passing the &amp;ldquo;value&amp;rdquo; option explicitly, e.g.</source>
          <target state="translated">기본값 은 개체 값에 &quot;% Y- % m- % d&quot;를 사용하여 &lt;code&gt;strftime&lt;/code&gt; 을 호출하여 생성 되므로 &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; 및 &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 인스턴스에 대해 예상대로 동작합니다 . &quot;value&quot;옵션을 명시 적으로 전달하여이를 무시할 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="8a7a98ac087cf08203ada29462f60f281cc7ce8c" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%dT%T&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155f523aa7dab7eaef4a73cf5262806f48843b57" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%dT%T&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;.</source>
          <target state="translated">기본값 은 개체 값에 &quot;% Y- % m- % dT % T&quot;를 사용하여 &lt;code&gt;strftime&lt;/code&gt; 을 호출하여 생성 되므로 &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; 및 &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 인스턴스에 대해 예상대로 동작합니다 .</target>
        </trans-unit>
        <trans-unit id="5d5885094783f9624549e228e79f6943abafae18" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-W%W&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e75e0fbb28eddbbcf15907c13cd835044074f14" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-W%W&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;.</source>
          <target state="translated">기본값 은 객체 값에서&amp;ldquo;% YW % W&amp;rdquo;를 사용하여 &lt;code&gt;strftime&lt;/code&gt; 을 호출하여 생성 되므로 &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; 및 &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 인스턴스에 대해 예상대로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="302a80951efeb150725e12d390b168e285d9d6c7" translate="yes" xml:space="preserve">
          <source>The defaults for these options can be localized, their keys are:</source>
          <target state="translated">이러한 옵션의 기본값은 현지화 될 수 있으며 해당 키는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1405dbd52b41e365289863e28f99fa1bd2332eb9" translate="yes" xml:space="preserve">
          <source>The delay of the retry</source>
          <target state="translated">재시도 지연</target>
        </trans-unit>
        <trans-unit id="b3b195383209449dce9fab8d27f9f073c6ae8715" translate="yes" xml:space="preserve">
          <source>The delegated method must be public on the target, otherwise it will raise &lt;code&gt;DelegationError&lt;/code&gt;. If you wish to instead return &lt;code&gt;nil&lt;/code&gt;, use the &lt;code&gt;:allow_nil&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ddcccd9c048d80e5af182b551f880e6af315c21" translate="yes" xml:space="preserve">
          <source>The delegated method must be public on the target, otherwise it will raise &lt;code&gt;NoMethodError&lt;/code&gt;.</source>
          <target state="translated">위임 된 메소드는 대상에서 공개되어야합니다 . 그렇지 않으면 &lt;code&gt;NoMethodError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="4b09ac1b3fc3753d4f13bde06b487a8da159ea06" translate="yes" xml:space="preserve">
          <source>The delegated methods are public by default. Pass &lt;code&gt;private:
true&lt;/code&gt; to change that.</source>
          <target state="translated">위임 된 메소드는 기본적으로 공용입니다. 합격 &lt;code&gt;private: true&lt;/code&gt; 이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="1c09337d38031bfbccf8b69e1b2b744dc8e04ce3" translate="yes" xml:space="preserve">
          <source>The delegated type shouldn't just answer the question of what the underlying class is called. In fact, that's an anti-pattern most of the time. The reason you're building this hierarchy is to take advantage of polymorphism. So here's a simple example of that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b4e2eca3f12dd43b5daa997c4256d932c0c2d1" translate="yes" xml:space="preserve">
          <source>The dependent &lt;a href=&quot;richtext&quot;&gt;&lt;code&gt;RichText&lt;/code&gt;&lt;/a&gt; model will also automatically process attachments links as sent via the Trix-powered editor. These attachments are associated with the &lt;a href=&quot;richtext&quot;&gt;&lt;code&gt;RichText&lt;/code&gt;&lt;/a&gt; model using Active Storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b561c6d24076a191c3806cfbab4b44dc868d9533" translate="yes" xml:space="preserve">
          <source>The dependent &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; model will also automatically process attachments links as sent via the Trix-powered editor. These attachments are associated with the &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; model using Active Storage.</source>
          <target state="translated">종속 &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; 모델은 Trix 제공 편집기를 통해 전송 된 첨부 파일 링크도 자동으로 처리합니다. 이러한 첨부 파일은 Active Storage를 사용 하는 &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; 모델 과 연관됩니다 .</target>
        </trans-unit>
        <trans-unit id="7b896f7775194663df7f16876df2a84f94b10d3b" translate="yes" xml:space="preserve">
          <source>The deprecated constant now returns the same object as the new one rather than a proxy object, so it can be used transparently in &lt;code&gt;rescue&lt;/code&gt; blocks etc.</source>
          <target state="translated">더 이상 사용되지 않는 상수는 이제 프록시 개체가 아닌 새 개체와 동일한 개체를 반환하므로 &lt;code&gt;rescue&lt;/code&gt; 블록 등에서 투명하게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="036245d5d96624f479702d772eb72dcb5e11e8c4" translate="yes" xml:space="preserve">
          <source>The deprecation warning</source>
          <target state="translated">지원 중단 경고</target>
        </trans-unit>
        <trans-unit id="31b2196e4888dd55cad8ce07cad5266dfe9ec435" translate="yes" xml:space="preserve">
          <source>The desired result can be accomplished by wrapping the known-safe string in &lt;a href=&quot;../arel#method-c-sql&quot;&gt;&lt;code&gt;Arel.sql&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296534b4b5c0114d9b09d904b18e264419c9274a" translate="yes" xml:space="preserve">
          <source>The desired result can be accomplished by wrapping the known-safe string in Arel.sql:</source>
          <target state="translated">알려진 안전 문자열을 Arel.sql에 래핑하여 원하는 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f01e3ce935b75a14bcd55aaf7d5d0bb040f17e93" translate="yes" xml:space="preserve">
          <source>The differences with &lt;code&gt;Kernel#Array&lt;/code&gt; explained above apply to the rest of &lt;code&gt;object&lt;/code&gt;s.</source>
          <target state="translated">위에서 설명한 &lt;code&gt;Kernel#Array&lt;/code&gt; 와의 차이점 은 나머지 &lt;code&gt;object&lt;/code&gt; 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f4f7d49b1ac826abef81ba5b39c283b9cef02d95" translate="yes" xml:space="preserve">
          <source>The different ways of debugging.</source>
          <target state="translated">다양한 디버깅 방법.</target>
        </trans-unit>
        <trans-unit id="4e465a9e2c0e5bd338b7983c7a2d3ecf29038df0" translate="yes" xml:space="preserve">
          <source>The digest will be generated using &lt;code&gt;virtual_path:&lt;/code&gt; if it is provided.</source>
          <target state="translated">요약 은 제공된 경우 &lt;code&gt;virtual_path:&lt;/code&gt; 사용하여 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="87e9e845de388090f6fedfdef8cbb1972b1b0d42" translate="yes" xml:space="preserve">
          <source>The digestor can be bypassed by passing skip_digest: true as an option to the cache call:</source>
          <target state="translated">캐시 호출에 옵션으로 skip_digest : true를 전달하면 다이제스트를 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9880525eeb47dcc8b1a61a667bcb1ac06388bf9" translate="yes" xml:space="preserve">
          <source>The directives that work in JavaScript files also work in stylesheets (though obviously including stylesheets rather than JavaScript files). The &lt;code&gt;require_tree&lt;/code&gt; directive in a CSS manifest works the same way as the JavaScript one, requiring all stylesheets from the current directory.</source>
          <target state="translated">JavaScript 파일에서 작동하는 지시문은 스타일 시트에서도 작동합니다 (JavaScript 파일이 아닌 스타일 시트 포함). CSS 매니페스트 의 &lt;code&gt;require_tree&lt;/code&gt; 지시문은 현재 디렉토리의 모든 스타일 시트를 요구하는 JavaScript의 지시문과 동일한 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="213bb5462a19fb4d16c75c50df8bd7cb3bb8fb11" translate="yes" xml:space="preserve">
          <source>The directory &lt;code&gt;test/mailers/previews&lt;/code&gt;.</source>
          <target state="translated">디렉토리 &lt;code&gt;test/mailers/previews&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="db0a97cd4a13a2cce5468ae004d2f87eec98fccd" translate="yes" xml:space="preserve">
          <source>The distinction is in where you place the foreign key (it goes on the table for the class declaring the &lt;code&gt;belongs_to&lt;/code&gt; association), but you should give some thought to the actual meaning of the data as well. The &lt;code&gt;has_one&lt;/code&gt; relationship says that one of something is yours - that is, that something points back to you. For example, it makes more sense to say that a supplier owns an account than that an account owns a supplier. This suggests that the correct relationships are like this:</source>
          <target state="translated">구별은 외래 키를 배치하는 위치에 있으며 ( &lt;code&gt;belongs_to&lt;/code&gt; 연관을 선언하는 클래스의 테이블에서 진행 ) 데이터의 실제 의미에 대해서도 고려해야합니다. &lt;code&gt;has_one&lt;/code&gt; 의 입니다, 뭔가 포인트가 당신에게 다시 - 관계는 무엇인가 중 하나가 당신이라고 말한다. 예를 들어 공급 업체가 계정을 소유 한 것보다 공급 업체를 소유하고 있다고 말하는 것이 더 합리적입니다. 올바른 관계는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="985c59a63de601354797a9003df4ab4f40409519" translate="yes" xml:space="preserve">
          <source>The documentation for &lt;code&gt;PermitScrubber&lt;/code&gt; and &lt;code&gt;TargetScrubber&lt;/code&gt; explains how you can gain complete control over when and how elements should be stripped.</source>
          <target state="translated">&lt;code&gt;PermitScrubber&lt;/code&gt; 및 &lt;code&gt;TargetScrubber&lt;/code&gt; 에 대한 설명서에는 요소 제거시기와 방법을 완벽하게 제어 할 수있는 방법이 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a30f95b69b46783ce610879e86f95b33971917c" translate="yes" xml:space="preserve">
          <source>The driver name is a required argument for &lt;code&gt;driven_by&lt;/code&gt;. The optional arguments that can be passed to &lt;code&gt;driven_by&lt;/code&gt; are &lt;code&gt;:using&lt;/code&gt; for the browser (this will only be used by Selenium), &lt;code&gt;:screen_size&lt;/code&gt; to change the size of the screen for screenshots, and &lt;code&gt;:options&lt;/code&gt; which can be used to set options supported by the driver.</source>
          <target state="translated">&lt;code&gt;driven_by&lt;/code&gt; 의 드라이버 이름은 필수 인수입니다 . &lt;code&gt;driven_by&lt;/code&gt; 에 전달할 수있는 선택적 인수 는 브라우저의 경우 &lt;code&gt;:using&lt;/code&gt; (이는 Selenium에서만 사용됨), &lt;code&gt;:screen_size&lt;/code&gt; 는 스크린 샷의 화면 크기를 변경하고, &lt;code&gt;:options&lt;/code&gt; 는 지원되는 옵션을 설정하는 데 사용할 수 있습니다. 운전사.</target>
        </trans-unit>
        <trans-unit id="207b31a7446a5dd854fdf995d6f80eaf815309e8" translate="yes" xml:space="preserve">
          <source>The easiest way is to define acronyms in &lt;code&gt;config/initializers/inflections.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4997e6afb5b4fcd0fc1edb4cdc05bfb0a531e68e" translate="yes" xml:space="preserve">
          <source>The easiest way to add custom validators for validating individual attributes is with the convenient &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt;.</source>
          <target state="translated">개별 속성의 유효성을 검사하기 위해 사용자 지정 유효성 검사기를 추가하는 가장 쉬운 방법은 편리한 &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="98faafe30a9e70db0e0977f135231c7feded8674" translate="yes" xml:space="preserve">
          <source>The easiest way to add custom validators for validating individual attributes is with the convenient &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt;. In this case, the custom validator class must implement a &lt;code&gt;validate_each&lt;/code&gt; method which takes three arguments: record, attribute, and value. These correspond to the instance, the attribute to be validated, and the value of the attribute in the passed instance.</source>
          <target state="translated">개별 속성의 유효성을 검사하기 위해 사용자 지정 유효성 검사기를 추가하는 가장 쉬운 방법은 편리한 &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt; 입니다. 이 경우, 사용자 정의 유효성 검증기 클래스 는 세 가지 인수 (record, attribute 및 value)를 취하는 &lt;code&gt;validate_each&lt;/code&gt; 메소드를 구현해야합니다 . 이들은 인스턴스, 유효성을 검사 할 속성 및 전달 된 인스턴스의 속성 값에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="91e62d62a76a3d0d1a18977f96d9d5517a4cc465" translate="yes" xml:space="preserve">
          <source>The easiest way to do that is to throw</source>
          <target state="translated">가장 쉬운 방법은 던지는 것입니다</target>
        </trans-unit>
        <trans-unit id="67abd7985beb12edf1df94d4e24d4ac0499aedde" translate="yes" xml:space="preserve">
          <source>The easiest way to see functional tests in action is to generate a controller using the scaffold generator:</source>
          <target state="translated">작동중인 기능 테스트를 확인하는 가장 쉬운 방법은 스캐 폴드 생성기를 사용하여 컨트롤러를 생성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="71f9b218d0a717f2a34e6fb5f6eed95f85739bd8" translate="yes" xml:space="preserve">
          <source>The easiest way to work with Rails is to store all external data as UTF-8. If you don't, Ruby libraries and Rails will often be able to convert your native data into UTF-8, but this doesn't always work reliably, so you're better off ensuring that all external data is UTF-8.</source>
          <target state="translated">Rails를 사용하는 가장 쉬운 방법은 모든 외부 데이터를 UTF-8로 저장하는 것입니다. 그렇지 않으면 Ruby 라이브러리와 Rails는 종종 네이티브 데이터를 UTF-8로 변환 할 수 있지만 항상 안정적으로 작동하는 것은 아니므로 모든 외부 데이터가 UTF-8인지 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="69e2efc49c2d7213b2c913e7885eead9c6a6f639" translate="yes" xml:space="preserve">
          <source>The editor can be found by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8bad23dcd8917481e25590ac072420ea7cda7e" translate="yes" xml:space="preserve">
          <source>The encoded form of the mail</source>
          <target state="translated">메일의 인코딩 된 형식</target>
        </trans-unit>
        <trans-unit id="603d901a7533f7d4b81087cd4d5da75a04f6dc77" translate="yes" xml:space="preserve">
          <source>The engine contains migrations for the &lt;code&gt;blorgh_articles&lt;/code&gt; and &lt;code&gt;blorgh_comments&lt;/code&gt; table which need to be created in the application's database so that the engine's models can query them correctly. To copy these migrations into the application run the following command from the application's root:</source>
          <target state="translated">엔진에는 엔진 모델이 올바르게 쿼리 할 수 ​​있도록 애플리케이션 데이터베이스에서 작성해야하는 &lt;code&gt;blorgh_articles&lt;/code&gt; 및 &lt;code&gt;blorgh_comments&lt;/code&gt; 테이블에 대한 마이그레이션이 포함되어 있습니다 . 이러한 마이그레이션을 응용 프로그램에 복사하려면 응용 프로그램의 루트에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2465fb9cdbf0b80704e99d5b2da49be290d0b4c9" translate="yes" xml:space="preserve">
          <source>The engine is unable to find the partial required for rendering the comments. Rails looks first in the application's (&lt;code&gt;test/dummy&lt;/code&gt;) &lt;code&gt;app/views&lt;/code&gt; directory and then in the engine's &lt;code&gt;app/views&lt;/code&gt; directory. When it can't find it, it will throw this error. The engine knows to look for &lt;code&gt;blorgh/comments/_comment&lt;/code&gt; because the model object it is receiving is from the &lt;code&gt;Blorgh::Comment&lt;/code&gt; class.</source>
          <target state="translated">엔진이 주석을 렌더링하는 데 필요한 부분을 찾을 수 없습니다. Rails는 먼저 애플리케이션의 ( &lt;code&gt;test/dummy&lt;/code&gt; ) &lt;code&gt;app/views&lt;/code&gt; 디렉토리에서 찾은 다음 엔진의 &lt;code&gt;app/views&lt;/code&gt; 디렉토리 에서 찾습니다 . 찾을 수 없으면이 오류가 발생합니다. 수신하는 모델 오브젝트가 &lt;code&gt;Blorgh::Comment&lt;/code&gt; 클래스 에서 &lt;code&gt;blorgh/comments/_comment&lt;/code&gt; 때문에 엔진은 blorgh / comments / _comment 를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="ea6b332efc300c274b97a32b7ce8d8e009ab65ef" translate="yes" xml:space="preserve">
          <source>The engine that this guide covers provides submitting articles and commenting functionality and follows a similar thread to the &lt;a href=&quot;getting_started&quot;&gt;Getting Started Guide&lt;/a&gt;, with some new twists.</source>
          <target state="translated">이 안내서에서 다루는 엔진은 기사 제출 및 주석 기능을 제공하며 &lt;a href=&quot;getting_started&quot;&gt;시작 안내서&lt;/a&gt; 와 유사한 주제를 따르며 약간의 변형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7b01cfd4565a85c2dbb4f19156a363391250255" translate="yes" xml:space="preserve">
          <source>The engine that will be created in this guide will be called &quot;blorgh&quot;. This engine will provide blogging functionality to its host applications, allowing for new articles and comments to be created. At the beginning of this guide, you will be working solely within the engine itself, but in later sections you'll see how to hook it into an application.</source>
          <target state="translated">이 가이드에서 생성 될 엔진을 &quot;blorgh&quot;라고합니다. 이 엔진은 호스트 애플리케이션에 블로그 기능을 제공하여 새로운 기사와 의견을 작성할 수 있습니다. 이 안내서의 시작 부분에서는 엔진 자체에서만 작업하지만 이후 섹션에서는 엔진을 응용 프로그램에 연결하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="527b2aac30ef582fdc0a45802b88ee7ae5e7ffc7" translate="yes" xml:space="preserve">
          <source>The entire URL used for the request.</source>
          <target state="translated">요청에 사용 된 전체 URL입니다.</target>
        </trans-unit>
        <trans-unit id="1c7a4ea6286b889e3eeecb8b0c295abd48222222" translate="yes" xml:space="preserve">
          <source>The entire callback chain of a &lt;a href=&quot;persistence#method-i-save&quot;&gt;#save&lt;/a&gt;, &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;#save!&lt;/a&gt;, or &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt; call runs within a transaction. That includes &lt;code&gt;after_*&lt;/code&gt; hooks. If everything goes fine a &lt;code&gt;COMMIT&lt;/code&gt; is executed once the chain has been completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99c9a66d0b0be0a02769838a20ac0b1925f5311" translate="yes" xml:space="preserve">
          <source>The entire callback chain of a &lt;a href=&quot;persistence#method-i-save&quot;&gt;#save&lt;/a&gt;, &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;#save!&lt;/a&gt;, or &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt; call runs within a transaction. That includes &lt;code&gt;after_*&lt;/code&gt; hooks. If everything goes fine a COMMIT is executed once the chain has been completed.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save&quot;&gt;#save&lt;/a&gt; , &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;#save&lt;/a&gt; 의 전체 콜백 체인 ! 또는 &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt; 호출이 트랜잭션 내에서 실행됩니다. &lt;code&gt;after_*&lt;/code&gt; 후크가 포함됩니다 . 모든 것이 잘되면 체인이 완료되면 COMMIT가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="160135e0f4b320878ee046d55d4b87a2848ed38b" translate="yes" xml:space="preserve">
          <source>The entry &amp;ldquo;superclass&amp;rdquo; also serves as a perfect place to put all that shared logic that applies to both messages and comments, and which acts primarily on the shared attributes. Imagine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16e4fc1970700778bf53ca3a20a8ccb854a9165" translate="yes" xml:space="preserve">
          <source>The environment variable RAILS_GROUPS;</source>
          <target state="translated">환경 변수 RAILS_GROUPS;</target>
        </trans-unit>
        <trans-unit id="47fccb458c4924179eb7ab520146ad2f2e5b5da5" translate="yes" xml:space="preserve">
          <source>The equivalent YAML file would look like this:</source>
          <target state="translated">동등한 YAML 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="46b064b6decece00517a4ae80500c5b520897a0b" translate="yes" xml:space="preserve">
          <source>The errata for the &lt;code&gt;PATCH&lt;/code&gt; verb &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=5789&quot;&gt;specifies that a 'diff' media type should be used with &lt;code&gt;PATCH&lt;/code&gt;&lt;/a&gt;. One such format is &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSON Patch&lt;/a&gt;. While Rails does not support JSON Patch natively, it's easy enough to add support:</source>
          <target state="translated">&lt;code&gt;PATCH&lt;/code&gt; 동사 의 정오표 &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=5789&quot;&gt;는 'diff'미디어 유형이 &lt;code&gt;PATCH&lt;/code&gt; &lt;/a&gt; 와 함께 사용되도록 지정합니다 . 이러한 형식 중 하나는 &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSON 패치&lt;/a&gt; 입니다. Rails는 기본적으로 JSON 패치를 지원하지 않지만 지원을 쉽게 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="517f5495378b09403c3a338eae8b0225a24b8aff" translate="yes" xml:space="preserve">
          <source>The error that caused the discard</source>
          <target state="translated">폐기의 원인이 된 오류</target>
        </trans-unit>
        <trans-unit id="202c080109e967ceac7ed5f3b20a32c657e5c762" translate="yes" xml:space="preserve">
          <source>The error that caused the retry</source>
          <target state="translated">재 시도를 일으킨 오류</target>
        </trans-unit>
        <trans-unit id="4e43b8e70ed522e58308259bcdb4debbfad5afa2" translate="yes" xml:space="preserve">
          <source>The escaping performed in this method is identical to those performed in the Active Support JSON encoder when &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; is set to true. Because this transformation is idempotent, this helper can be applied even if &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; is already true.</source>
          <target state="translated">이 방법으로 수행되는 이스케이프 처리는 &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; 이 true로 설정된 경우 Active Support JSON 인코더에서 수행되는 이스케이프 처리와 동일 합니다. 이 변환은 &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; 이므로 ActiveSupport.escape_html_entities_in_json 이 이미 true 인 경우에도이 헬퍼를 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6cd9b6aa0872547b71e432f2132c47e1b23d564" translate="yes" xml:space="preserve">
          <source>The eval() function is a nightmare for restricted list input filters, as it allows the style attribute to hide the word &quot;innerHTML&quot;:</source>
          <target state="translated">eval () 함수는 스타일 목록에서 &quot;innerHTML&quot;이라는 단어를 숨길 수 있으므로 제한된 목록 입력 필터의 악몽입니다.</target>
        </trans-unit>
        <trans-unit id="3970e1a2fc0e3743d76d2b4beaa13f39ba8d4504" translate="yes" xml:space="preserve">
          <source>The example above generates &amp;ldquo;&lt;a href=&quot;http://assets1.example.com&quot;&gt;assets1.example.com&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&quot;http://assets2.example.com&quot;&gt;assets2.example.com&lt;/a&gt;&amp;rdquo;. This option is useful for example if you need fewer/more than four hosts, custom host names, etc.</source>
          <target state="translated">위의 예는&amp;ldquo; &lt;a href=&quot;http://assets1.example.com&quot;&gt;asset1.example.com&lt;/a&gt; &amp;rdquo;및&amp;ldquo; &lt;a href=&quot;http://assets2.example.com&quot;&gt;asset2.example.com&lt;/a&gt; &amp;rdquo;을 생성합니다. 이 옵션은 예를 들어 4 개보다 적거나 많은 호스트, 사용자 정의 호스트 이름 등이 필요한 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4ccbe5f2440d7cda26b90a4eb61f3a776bcb524d" translate="yes" xml:space="preserve">
          <source>The example above uses a custom environment called &quot;staging&quot; for a production like server but for testing purposes. You can read &lt;a href=&quot;configuring#creating-rails-environments&quot;&gt;Creating Rails Environments&lt;/a&gt; for more information about custom Rails environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5763a2636a74bdb09de576f848b626740d358c" translate="yes" xml:space="preserve">
          <source>The example above uses a custom environment called &quot;staging&quot; for a production like server but for testing purposes. You can read &lt;a href=&quot;configuring#creating-rails-environments&quot;&gt;Creating Rails environments&lt;/a&gt; for more information about custom Rails environments.</source>
          <target state="translated">위의 예제는 서버와 같은 프로덕션에 테스트 목적으로 &quot;스테이징&quot;이라는 사용자 정의 환경을 사용합니다. 사용자 정의 Rails 환경에 대한 자세한 정보는 &lt;a href=&quot;configuring#creating-rails-environments&quot;&gt;Rails 환경 작성&lt;/a&gt; 을 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ecb3184dee5c579a473cebc5475c09e72e149629" translate="yes" xml:space="preserve">
          <source>The example above will create a test framework option and will invoke a generator based on the user supplied value.</source>
          <target state="translated">위의 예제는 테스트 프레임 워크 옵션을 만들고 사용자가 제공 한 값을 기반으로 생성기를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="344add1bda36def193aec6a1db38dc0ecd133c78" translate="yes" xml:space="preserve">
          <source>The example of partial use describes a familiar pattern where a template needs to iterate over an array and render a sub template for each of the elements. This pattern has been implemented as a single method that accepts an array and renders a partial by the same name as the elements contained within. So the three-lined example in &amp;ldquo;Using partials&amp;rdquo; can be rewritten with a single line:</source>
          <target state="translated">부분 사용의 예는 템플릿이 배열을 반복하고 각 요소에 대한 하위 템플릿을 렌더링해야하는 익숙한 패턴을 설명합니다. 이 패턴은 배열을 허용하고 그 안에 포함 된 요소와 동일한 이름으로 부분을 렌더링하는 단일 메소드로 구현되었습니다. 따라서 &quot;부분 사용&quot;의 3 줄짜리 예제를 한 줄로 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="513e1d35af00b7b4857d0001cb9d96cd14237d06" translate="yes" xml:space="preserve">
          <source>The examples above put files under the application's &lt;code&gt;lib&lt;/code&gt; because said directory belongs to &lt;code&gt;$LOAD_PATH&lt;/code&gt;.</source>
          <target state="translated">위의 예제 는 해당 디렉토리가 &lt;code&gt;$LOAD_PATH&lt;/code&gt; 속하기 때문에 파일을 응용 프로그램의 &lt;code&gt;lib&lt;/code&gt; 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="1c74c9a07fb4e60ccadc9e321e8eb5e6ad8dd588" translate="yes" xml:space="preserve">
          <source>The examples above show that &lt;code&gt;in_groups&lt;/code&gt; fills some groups with a trailing &lt;code&gt;nil&lt;/code&gt; element as needed. A group can get at most one of these extra elements, the rightmost one if any. And the groups that have them are always the last ones.</source>
          <target state="translated">위의 예는 &lt;code&gt;in_groups&lt;/code&gt; 가 일부 그룹을 필요에 따라 후미 &lt;code&gt;nil&lt;/code&gt; 요소로 채운다 는 것을 보여줍니다 . 그룹은 이러한 추가 요소 중 최대 하나를 얻을 수 있습니다 (있는 경우). 그리고 그것들을 가진 그룹은 항상 마지막 그룹입니다.</target>
        </trans-unit>
        <trans-unit id="253b59cdddb01f4ba710f2685087ef72920525de" translate="yes" xml:space="preserve">
          <source>The examples below use &lt;code&gt;$&lt;/code&gt; to represent your terminal prompt in a UNIX-like OS, though it may have been customized to appear differently. If you are using Windows, your prompt will look something like &lt;code&gt;C:\source_code&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61162445c5595b6fb1ee7e3f0721291476b564b0" translate="yes" xml:space="preserve">
          <source>The examples below use &lt;code&gt;$&lt;/code&gt; to represent your terminal prompt in a UNIX-like OS, though it may have been customized to appear differently. If you are using Windows, your prompt will look something like &lt;code&gt;c:\source_code&amp;gt;&lt;/code&gt;</source>
          <target state="translated">아래 예 는 UNIX와 유사한 OS에서 터미널 프롬프트를 나타내는 데 &lt;code&gt;$&lt;/code&gt; 를 사용 하지만 다르게 표시되도록 사용자 정의되었을 수 있습니다. Windows를 사용하는 경우 프롬프트는 &lt;code&gt;c:\source_code&amp;gt;&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="962d766aea512badcd93d36a0bad74875b6df8a3" translate="yes" xml:space="preserve">
          <source>The exception object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f4d305dc19efd8a77994a6d624f683cf529072" translate="yes" xml:space="preserve">
          <source>The exceptions &lt;a href=&quot;adapternotspecified&quot;&gt;&lt;code&gt;AdapterNotSpecified&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;adapternotfound&quot;&gt;&lt;code&gt;AdapterNotFound&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;ArgumentError&lt;/code&gt; may be returned on an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13335fd46e437958bd49212b4d657196ad9ffa75" translate="yes" xml:space="preserve">
          <source>The exceptions &lt;a href=&quot;adapternotspecified&quot;&gt;AdapterNotSpecified&lt;/a&gt;, &lt;a href=&quot;adapternotfound&quot;&gt;AdapterNotFound&lt;/a&gt; and &lt;code&gt;ArgumentError&lt;/code&gt; may be returned on an error.</source>
          <target state="translated">&lt;a href=&quot;adapternotspecified&quot;&gt;AdapterNotSpecified&lt;/a&gt; , &lt;a href=&quot;adapternotfound&quot;&gt;AdapterNotFound&lt;/a&gt; 및 &lt;code&gt;ArgumentError&lt;/code&gt; 예외 가 오류로 리턴 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2268f470fa1e4f224984a46fe5b66988eea0dd2c" translate="yes" xml:space="preserve">
          <source>The execution context of a block passed to &lt;code&gt;Class.new&lt;/code&gt; or &lt;code&gt;Module.new&lt;/code&gt; is not entirely equivalent to the one of the body of the definitions using the &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; keywords. But both idioms result in the same constant assignment.</source>
          <target state="translated">&lt;code&gt;Class.new&lt;/code&gt; 또는 &lt;code&gt;Module.new&lt;/code&gt; 에 전달 된 블록의 실행 컨텍스트 는 &lt;code&gt;class&lt;/code&gt; 및 &lt;code&gt;module&lt;/code&gt; 키워드를 사용하는 정의 본문 중 하나와 완전히 동일하지 않습니다 . 그러나 두 관용구 모두 동일한 상수 할당을 초래합니다.</target>
        </trans-unit>
        <trans-unit id="d1560f51490992d361bd33ce4f84967240b07850" translate="yes" xml:space="preserve">
          <source>The execution of each test method stops as soon as any error or an assertion failure is encountered, and the test suite continues with the next method. All test methods are executed in random order. The &lt;a href=&quot;configuring#configuring-active-support&quot;&gt;&lt;code&gt;config.active_support.test_order&lt;/code&gt; option&lt;/a&gt; can be used to configure test order.</source>
          <target state="translated">오류나 어설 션 오류가 발생하면 각 테스트 방법의 실행이 중지되고 테스트 스위트는 다음 방법으로 계속 진행됩니다. 모든 테스트 방법은 무작위 순서로 실행됩니다. &lt;a href=&quot;configuring#configuring-active-support&quot;&gt; &lt;code&gt;config.active_support.test_order&lt;/code&gt; 의 옵션&lt;/a&gt; 구성 테스트 순서를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86f2a88639b58b6dc320a26b779f9c83492793d1" translate="yes" xml:space="preserve">
          <source>The face attribute must be in the object and it cannot be blank or marked for destruction.</source>
          <target state="translated">면 속성은 객체에 있어야하며 비워 두거나 파괴 표시 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="cd2e2325522f51d93172fabd30184210ad6758e4" translate="yes" xml:space="preserve">
          <source>The field name can also be a string:</source>
          <target state="translated">필드 이름은 문자열 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c23f5a2d4fe414d9b9dccdb276434ede248d4038" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;railties/lib/rails/cli&lt;/code&gt; in turn calls &lt;code&gt;Rails::AppLoader.exec_app&lt;/code&gt;.</source>
          <target state="translated">파일 &lt;code&gt;railties/lib/rails/cli&lt;/code&gt; 는 차례로 &lt;code&gt;Rails::AppLoader.exec_app&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="bac5d2c07bdf6dfba37a9dd229fabf112d19ceeb" translate="yes" xml:space="preserve">
          <source>The file extensions used on an asset determine what preprocessing is applied. When a controller or a scaffold is generated with the default Rails gemset, a CoffeeScript file and a SCSS file are generated in place of a regular JavaScript and CSS file. The example used before was a controller called &quot;projects&quot;, which generated an &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt; file.</source>
          <target state="translated">자산에 사용 된 파일 확장자에 따라 적용되는 전처리가 결정됩니다. 기본 Rails gemset을 사용하여 컨트롤러 나 스캐 폴드를 생성하면 일반 JavaScript 및 CSS 파일 대신 CoffeeScript 파일과 SCSS 파일이 생성됩니다. 이전에 사용 된 예는 &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt; 파일 을 생성하는 &quot;projects&quot;라는 컨트롤러였습니다 .</target>
        </trans-unit>
        <trans-unit id="683b772b6fe83f9b1b76bea0a8b4863a2c46b587" translate="yes" xml:space="preserve">
          <source>The file extensions used on an asset determine what preprocessing is applied. When a controller or a scaffold is generated with the default Rails gemset, an SCSS file is generated in place of a regular CSS file. The example used before was a controller called &quot;projects&quot;, which generated an &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba93d2258aa378ac9e921c11bf7eaf5e6cfa97d" translate="yes" xml:space="preserve">
          <source>The file_path parameter on the show action would be encoded as ASCII-8BIT, but all other arguments will remain UTF-8 encoded. This is useful in the case where an application must handle data but encoding of the data is unknown, like file system data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26c0108cf064c492a946765b42605d5cad90a75" translate="yes" xml:space="preserve">
          <source>The files in &lt;code&gt;config/initializers&lt;/code&gt; (and any subdirectories of &lt;code&gt;config/initializers&lt;/code&gt;) are sorted and loaded one by one as part of the &lt;code&gt;load_config_initializers&lt;/code&gt; initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693c5053c620072ba87006436392f9198d81b36c" translate="yes" xml:space="preserve">
          <source>The files or configs can also be encrypted with a custom key. To decrypt with a key in the &lt;code&gt;ENV&lt;/code&gt;, use:</source>
          <target state="translated">파일 또는 구성은 사용자 정의 키로 암호화 할 수도 있습니다. &lt;code&gt;ENV&lt;/code&gt; 의 키로 암호를 해독하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="79590c5db1b2aa3e6f7401ef520c2cc7cf875c50" translate="yes" xml:space="preserve">
          <source>The final caveat is that your actions are executed in a separate thread than the main thread. Make sure your actions are thread safe, and this shouldn't be a problem (don't share state across threads, etc).</source>
          <target state="translated">마지막 경고는 작업이 기본 스레드와 다른 스레드에서 실행된다는 것입니다. 작업이 스레드로부터 안전해야하며 문제가되지 않아야합니다 (스레드간에 상태를 공유하지 마십시오).</target>
        </trans-unit>
        <trans-unit id="421c547ed96034c7fdf98ebd07b149c41367cd02" translate="yes" xml:space="preserve">
          <source>The final result would be:</source>
          <target state="translated">최종 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b6e8a878c6d566279c79dabab5729cf9f687141e" translate="yes" xml:space="preserve">
          <source>The fingerprinting behavior is controlled by the &lt;code&gt;config.assets.digest&lt;/code&gt; initialization option (which defaults to &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">지문 동작은 &lt;code&gt;config.assets.digest&lt;/code&gt; 초기화 옵션 (기본값은 &lt;code&gt;true&lt;/code&gt; )으로 제어됩니다.</target>
        </trans-unit>
        <trans-unit id="0e5b88eb961587020694ec62f77f764be5c16bf8" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;link_to&lt;/code&gt; will generate &amp;ldquo;/profile&amp;rdquo; but the second will generate the standard polymorphic URL of &amp;ldquo;/admin/users/1&amp;rdquo;.</source>
          <target state="translated">첫 번째 &lt;code&gt;link_to&lt;/code&gt; 는 &quot;/ profile&quot;을 생성하지만 두 번째는 &quot;/ admin / users / 1&quot;의 표준 다형성 URL을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="cd20ffb3e2140e1113ddfc3b288c6aa57e901460" translate="yes" xml:space="preserve">
          <source>The first and last part used to find the generator to be invoked are guessed based on class invokes &lt;a href=&quot;base#method-c-hook_for&quot;&gt;::hook_for&lt;/a&gt;, as noticed in the example above. This can be customized with two options: :in and :as.</source>
          <target state="translated">호출 할 생성기를 찾는 데 사용 된 첫 번째 부분과 마지막 부분은 위의 예에서 &lt;a href=&quot;base#method-c-hook_for&quot;&gt;알 수 있듯이 :: voke_for&lt;/a&gt; 클래스 호출을 기반으로 추측됩니다 . : in 및 : as의 두 가지 옵션으로 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ab3c578cc14a9f99df243c07a14a3467eafd65b" translate="yes" xml:space="preserve">
          <source>The first and last part used to find the generator to be invoked are guessed based on class invokes &lt;a href=&quot;base#method-c-hook_for&quot;&gt;&lt;code&gt;hook_for&lt;/code&gt;&lt;/a&gt;, as noticed in the example above. This can be customized with two options: :in and :as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2feec48312de884813c60913a1cd3ef59e3f70" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;code&gt;options_for_select&lt;/code&gt; is a nested array where each element has two elements: option text (city name) and option value (city id). The option value is what will be submitted to your controller. Often this will be the id of a corresponding database object but this does not have to be the case.</source>
          <target state="translated">&lt;code&gt;options_for_select&lt;/code&gt; 의 첫 번째 인수 는 각 요소에 옵션 텍스트 (도시 이름)와 옵션 값 (도시 ID)의 두 요소가있는 중첩 배열입니다. 옵션 값은 컨트롤러에 제출됩니다. 종종 이것은 해당 데이터베이스 오브젝트의 ID가되지만 반드시 그럴 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="c35a6654821cab50b0d48eb9aec811dba267ad71" translate="yes" xml:space="preserve">
          <source>The first example shows &lt;code&gt;in_groups_of&lt;/code&gt; fills the last group with as many &lt;code&gt;nil&lt;/code&gt; elements as needed to have the requested size. You can change this padding value using the second optional argument:</source>
          <target state="translated">첫 번째 예는 &lt;code&gt;in_groups_of&lt;/code&gt; 가 요청한 크기를 갖는 데 필요한 만큼 많은 &lt;code&gt;nil&lt;/code&gt; 요소로 마지막 그룹을 채우는 것을 보여줍니다 . 두 번째 선택적 인수를 사용하여이 패딩 값을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cec3ae932966c51c2ccbcc94a3e144ca1e358e96" translate="yes" xml:space="preserve">
          <source>The first example shows how &lt;code&gt;in_groups_of&lt;/code&gt; fills the last group with as many &lt;code&gt;nil&lt;/code&gt; elements as needed to have the requested size. You can change this padding value using the second optional argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f47fe60e70f182e1be5811a83b6e1289320cec3" translate="yes" xml:space="preserve">
          <source>The first feature of the pipeline is to concatenate assets, which can reduce the number of requests that a browser makes to render a web page. Web browsers are limited in the number of requests that they can make in parallel, so fewer requests can mean faster loading for your application.</source>
          <target state="translated">파이프 라인의 첫 번째 기능은 자산을 연결하여 브라우저가 웹 페이지를 렌더링하기 위해 요청하는 횟수를 줄일 수 있습니다. 웹 브라우저는 병렬로 수행 할 수있는 요청 수가 제한되어 있으므로 요청이 적을수록 응용 프로그램의 로딩 속도가 빨라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7fda4a618b934b655302ec63bac10bfdaa3385c" translate="yes" xml:space="preserve">
          <source>The first form</source>
          <target state="translated">첫 번째 형태</target>
        </trans-unit>
        <trans-unit id="c779e7cdfc5b1f836df5b6e50b3fb3f8e6ec3015" translate="yes" xml:space="preserve">
          <source>The first is to use a block directly with the *_action methods. The block receives the controller as an argument. The &lt;code&gt;require_login&lt;/code&gt; filter from above could be rewritten to use a block:</source>
          <target state="translated">첫 번째는 * _action 메소드와 함께 직접 블록을 사용하는 것입니다. 블록은 컨트롤러를 인수로받습니다. 위의 &lt;code&gt;require_login&lt;/code&gt; 필터는 블록을 사용하도록 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0eefd9b71e6b09cec0f424fcb37e2f0065378122" translate="yes" xml:space="preserve">
          <source>The first is to use a block directly with the &lt;code&gt;*_action&lt;/code&gt; methods. The block receives the controller as an argument. The &lt;code&gt;require_login&lt;/code&gt; filter from above could be rewritten to use a block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decf5a49fc6e6d01f58f977387f90ce1c0e78cbb" translate="yes" xml:space="preserve">
          <source>The first option doesn't require any client-side JavaScript integration, and can be used by any other back-end service that deals with files. The second option is faster, since you're not using your own server as a staging point for uploads, and can work with deployments like Heroku that do not provide large amounts of disk space.</source>
          <target state="translated">첫 번째 옵션은 클라이언트 측 JavaScript 통합이 필요하지 않으며 파일을 처리하는 다른 백엔드 서비스에서 사용할 수 있습니다. 두 번째 옵션은 자체 서버를 업로드의 스테이징 지점으로 사용하지 않기 때문에 더 빠르며, 대량의 디스크 공간을 제공하지 않는 Heroku와 같은 배포에서 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3018e7bc52b5fa1b4994063800ecfef2cab4f995" translate="yes" xml:space="preserve">
          <source>The first parameter specifies which value should be selected and can either be an instance of a &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt;, or &lt;code&gt;DateTime&lt;/code&gt;, in which case the relevant component will be extracted, or a numerical value. For example:</source>
          <target state="translated">첫 번째 매개 변수는 선택해야 할 값을 지정하며 &lt;code&gt;Date&lt;/code&gt; , &lt;code&gt;Time&lt;/code&gt; 또는 &lt;code&gt;DateTime&lt;/code&gt; 의 인스턴스 일 수 있으며 ,이 경우 관련 구성 요소가 추출되거나 숫자 값이 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="23ef7dafac92cd567811d97501c6c0de467a9214" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-check_box&quot;&gt;&lt;code&gt;check_box&lt;/code&gt;&lt;/a&gt; is the name of the input. The second parameter is the value of the input. This value will be included in the form data (and be present in &lt;code&gt;params&lt;/code&gt;) when the checkbox is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f933693c0140825dd1f189e2779b8fe6cb715c9" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;code&gt;check_box_tag&lt;/code&gt;, of course, is the name of the input. The second parameter, naturally, is the value of the input. This value will be included in the form data (and be present in &lt;code&gt;params&lt;/code&gt;) when the checkbox is checked.</source>
          <target state="translated">물론 &lt;code&gt;check_box_tag&lt;/code&gt; 의 첫 번째 매개 변수 는 입력 이름입니다. 두 번째 매개 변수는 당연히 입력 값입니다. 이 값은 확인란을 선택 하면 양식 데이터에 포함되며 &lt;code&gt;params&lt;/code&gt; 로 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="ceab9ee28778e0cd198e4bb4c0d9830c53ea674c" translate="yes" xml:space="preserve">
          <source>The first question a lot of people have when thinking about building a JSON API using Rails is: &quot;isn't using Rails to spit out some JSON overkill? Shouldn't I just use something like Sinatra?&quot;.</source>
          <target state="translated">Rails를 사용하여 JSON API를 구축 할 때 많은 사람들이 알아야 할 첫 번째 질문은 &quot;일부 JSON 과잉을 뱉기 위해 Rails를 사용하지 않습니까?</target>
        </trans-unit>
        <trans-unit id="dbb1590aff8add787236e67ae78ae8bec4308b59" translate="yes" xml:space="preserve">
          <source>The first step is to call &lt;code&gt;visit articles_path&lt;/code&gt;. This will take the test to the articles index page.</source>
          <target state="translated">첫 번째 단계는 &lt;code&gt;visit articles_path&lt;/code&gt; 를 호출하는 것 입니다. 기사 색인 페이지에서 테스트를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="a5f38744e3441897f904e05dbaada4d430125ad6" translate="yes" xml:space="preserve">
          <source>The first step is to create a file at &lt;code&gt;lib/generators/initializer_generator.rb&lt;/code&gt; with the following content:</source>
          <target state="translated">첫 번째 단계는 &lt;code&gt;lib/generators/initializer_generator.rb&lt;/code&gt; 에 다음 내용 으로 파일을 작성하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="7647b789ce905eead162df1c2d4deef59320a6d1" translate="yes" xml:space="preserve">
          <source>The first step is to update the README file with detailed information about how to use your plugin. A few key things to include are:</source>
          <target state="translated">첫 번째 단계는 플러그인 사용 방법에 대한 자세한 정보로 README 파일을 업데이트하는 것입니다. 포함해야 할 몇 가지 주요 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="59c512882e34836962c0651a7f7bce0b3070c1e6" translate="yes" xml:space="preserve">
          <source>The first step to avoid this is to make sure all &quot;destructive&quot; actions (create, update, and destroy) can only be accessed with non-GET requests. If you're following RESTful conventions you're already doing this. However, a malicious site can still send a non-GET request to your site quite easily, and that's where the request forgery protection comes in. As the name says, it protects from forged requests.</source>
          <target state="translated">이를 피하기위한 첫 번째 단계는 모든 &quot;파괴적인&quot;작업 (만들기, 업데이트 및 삭제)이 비 GET 요청으로 만 액세스 할 수 있도록하는 것입니다. RESTful 규칙을 따르는 경우 이미 수행 중입니다. 그러나 악의적 인 사이트는 여전히 GET 이외의 요청을 귀하의 사이트로 매우 쉽게 보낼 수 있으며, 이는 위조 방지 요청이 들어오는 곳입니다. 이름에서 알 수 있듯이 위조 된 요청으로부터 보호합니다.</target>
        </trans-unit>
        <trans-unit id="5109762b5d7c74ae179ab67654f35f303d74031b" translate="yes" xml:space="preserve">
          <source>The first step we'll take is adding an &lt;code&gt;edit&lt;/code&gt; action to the &lt;code&gt;ArticlesController&lt;/code&gt;, generally between the &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; actions, as shown:</source>
          <target state="translated">첫 번째로 수행 할 단계는 &lt;code&gt;edit&lt;/code&gt; 과 같이 일반적으로 &lt;code&gt;new&lt;/code&gt; 작업 과 &lt;code&gt;create&lt;/code&gt; 작업 사이에 편집 작업을 &lt;code&gt;ArticlesController&lt;/code&gt; 에 추가하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="ca590be262eb1b3454e67886b520ae65c0895075" translate="yes" xml:space="preserve">
          <source>The first thing that the scaffold generator does is invoke the &lt;code&gt;active_record&lt;/code&gt; generator, which generates a migration and a model for the resource. Note here, however, that the migration is called &lt;code&gt;create_blorgh_articles&lt;/code&gt; rather than the usual &lt;code&gt;create_articles&lt;/code&gt;. This is due to the &lt;code&gt;isolate_namespace&lt;/code&gt; method called in the &lt;code&gt;Blorgh::Engine&lt;/code&gt; class's definition. The model here is also namespaced, being placed at &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; rather than &lt;code&gt;app/models/article.rb&lt;/code&gt; due to the &lt;code&gt;isolate_namespace&lt;/code&gt; call within the &lt;code&gt;Engine&lt;/code&gt; class.</source>
          <target state="translated">스캐 폴드 생성기의 첫 번째 작업 은 자원에 대한 마이그레이션 및 모델을 생성하는 &lt;code&gt;active_record&lt;/code&gt; 생성기를 호출하는 것입니다 . 그러나 여기서는 일반적인 &lt;code&gt;create_articles&lt;/code&gt; 대신 마이그레이션을 &lt;code&gt;create_blorgh_articles&lt;/code&gt; 라고 합니다. 이는 &lt;code&gt;Blorgh::Engine&lt;/code&gt; 클래스의 정의 에서 호출 된 &lt;code&gt;isolate_namespace&lt;/code&gt; 메소드 때문 입니다. 여기서 모델은 네임 스페이스 로 지정되며 &lt;code&gt;Engine&lt;/code&gt; 클래스 내의 &lt;code&gt;isolate_namespace&lt;/code&gt; 호출 로 인해 &lt;code&gt;app/models/article.rb&lt;/code&gt; 가 아닌 &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; 에 배치됩니다 .</target>
        </trans-unit>
        <trans-unit id="bf247db1b15a4a0665a1fff0a86d0b8b870286c8" translate="yes" xml:space="preserve">
          <source>The first thing to generate for a blog engine is the &lt;code&gt;Article&lt;/code&gt; model and related controller. To quickly generate this, you can use the Rails scaffold generator.</source>
          <target state="translated">블로그 엔진을 위해 먼저 생성하는 것은 &lt;code&gt;Article&lt;/code&gt; 모델 및 관련 컨트롤러입니다. 이를 빠르게 생성하기 위해 Rails 스캐 폴드 생성기를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67ac826f249d2df18239a1cdc76f0b3ffea39836" translate="yes" xml:space="preserve">
          <source>The first thing we'll want to do is create a new Rails application by running the &lt;code&gt;rails new&lt;/code&gt; command after installing Rails.</source>
          <target state="translated">가장 먼저 할 일은 Rails 를 설치 한 후 &lt;code&gt;rails new&lt;/code&gt; 명령 을 실행하여 새로운 Rails 애플리케이션을 만드는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="0ee7285a99cf6559d8f8b5329c15cff3b597d8f9" translate="yes" xml:space="preserve">
          <source>The first timestamp (&lt;code&gt;[timestamp_1]&lt;/code&gt;) will be the current time, and the second timestamp (&lt;code&gt;[timestamp_2]&lt;/code&gt;) will be the current time plus a second. The reason for this is so that the migrations for the engine are run after any existing migrations in the application.</source>
          <target state="translated">첫 번째 타임 스탬프 ( &lt;code&gt;[timestamp_1]&lt;/code&gt; )는 현재 시간이고 두 번째 타임 스탬프 ( &lt;code&gt;[timestamp_2]&lt;/code&gt; )는 현재 시간에 1 초를 더한 값입니다. 그 이유는 애플리케이션의 기존 마이그레이션 후에 엔진 마이그레이션이 실행되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="3e6b2570d51c28085531d230e84b5d63f1e48272" translate="yes" xml:space="preserve">
          <source>The first two characters (&amp;ldquo;&amp;gt;) are required in case the exception happens while rendering attributes for a given tag. You can check the real cause for the exception in your logger.</source>
          <target state="translated">지정된 태그의 속성을 렌더링하는 동안 예외가 발생하는 경우 처음 두 문자 (&amp;ldquo;&amp;gt;)가 필요합니다. 로거에서 예외의 실제 원인을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5092553a0a2e3d4056efc8cfd87cfcacfff7bc7" translate="yes" xml:space="preserve">
          <source>The first validation declares that a &lt;code&gt;title&lt;/code&gt; value must be present. Because &lt;code&gt;title&lt;/code&gt; is a string, this means that the &lt;code&gt;title&lt;/code&gt; value must contain at least one non-whitespace character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c00d089f456d9cd4776e5aa15cde27aa51cc15" translate="yes" xml:space="preserve">
          <source>The first way uses a &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;&lt;code&gt;has_many&lt;/code&gt;&lt;/a&gt; association with the &lt;code&gt;:through&lt;/code&gt; option and a join model, so there are two stages of associations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72aa6535de6074bb6bd46b9d2d9f30007e42e7a1" translate="yes" xml:space="preserve">
          <source>The first way uses a &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; association with the &lt;code&gt;:through&lt;/code&gt; option and a join model, so there are two stages of associations.</source>
          <target state="translated">첫 번째 방법은 &lt;code&gt;:through&lt;/code&gt; 옵션 및 조인 모델과 &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; 연관을 사용 하므로 두 가지 연관 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9cd0c75ac26aeaf1392bf739898212b29b06c34" translate="yes" xml:space="preserve">
          <source>The first_name attribute must be in the object and it cannot be blank.</source>
          <target state="translated">first_name 속성은 오브젝트에 있어야하며 비워 둘 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7f7deeb91723eb6307c03873779ac20d588eb92a" translate="yes" xml:space="preserve">
          <source>The first_name attribute must be in the object and it must be blank.</source>
          <target state="translated">first_name 속성은 오브젝트에 있어야하며 비어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="55bef31fcee581ecc39fbeffc0faa4743f90075a" translate="yes" xml:space="preserve">
          <source>The flash is a special part of the session which is cleared with each request. This means that values stored there will only be available in the next request, which is useful for passing error messages etc.</source>
          <target state="translated">플래시는 세션의 특별한 부분으로 각 요청마다 지워집니다. 즉, 저장된 값은 다음 요청에서만 사용할 수 있으며 오류 메시지 등을 전달하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="13c55339edc43cfab5f941cbdf399008a5a9ec67" translate="yes" xml:space="preserve">
          <source>The flash is a special part of the session which is cleared with each request. This means that values stored there will only be available in the next request, which is useful for passing error messages, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9245524e6ad5dd053b9feec99770843d73c126d2" translate="yes" xml:space="preserve">
          <source>The flash is accessed via the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Flash/RequestMethods.html#method-i-flash&quot;&gt;&lt;code&gt;flash&lt;/code&gt;&lt;/a&gt; method. Like the session, the flash is represented as a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643574b17d90501a21086b03d4416808f0b5012a" translate="yes" xml:space="preserve">
          <source>The flash provides a way to pass temporary primitive-types (&lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;) between actions. Anything you place in the flash will be exposed to the very next action and then cleared out. This is a great way of doing notices and alerts, such as a create action that sets &lt;code&gt;flash[:notice] = &quot;Post successfully created&quot;&lt;/code&gt; before redirecting to a display action that can then expose the flash to its template. Actually, that exposure is automatically done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b509889e32d8f793986316afbb6c7d8a102d1b" translate="yes" xml:space="preserve">
          <source>The flash provides a way to pass temporary primitive-types (String, &lt;a href=&quot;../array&quot;&gt;Array&lt;/a&gt;, &lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt;) between actions. Anything you place in the flash will be exposed to the very next action and then cleared out. This is a great way of doing notices and alerts, such as a create action that sets &lt;code&gt;flash[:notice] = &quot;Post
successfully created&quot;&lt;/code&gt; before redirecting to a display action that can then expose the flash to its template. Actually, that exposure is automatically done.</source>
          <target state="translated">플래시는 조치간에 임시 기본 유형 (String, &lt;a href=&quot;../array&quot;&gt;Array&lt;/a&gt; , &lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt; ) 을 전달하는 방법을 제공합니다 . 플래시에 넣은 것은 바로 다음 동작에 노출 된 다음 지워집니다. 플래시를 템플릿에 노출시킬 수있는 표시 액션으로 리디렉션하기 전에 &lt;code&gt;flash[:notice] = &quot;Post successfully created&quot;&lt;/code&gt; 를 설정하는 액션 만들기와 같은 알림 및 경고를 수행하는 좋은 방법입니다 . 실제로 노출은 자동으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="d6361541543365d2f737ca6fb21692e2f0f63b28" translate="yes" xml:space="preserve">
          <source>The following are methods available for both generators and templates for Rails.</source>
          <target state="translated">다음은 생성기 및 Rails 용 템플릿 모두에 사용할 수있는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="67bf5b51e02f43e1149966c9a4a365e81062253f" translate="yes" xml:space="preserve">
          <source>The following bundled adapters throw the &lt;a href=&quot;../recordnotunique&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotUnique&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffee53ad3ec5b77a2f9a08d7a6e4adedc900dee5" translate="yes" xml:space="preserve">
          <source>The following bundled adapters throw the &lt;a href=&quot;../recordnotunique&quot;&gt;ActiveRecord::RecordNotUnique&lt;/a&gt; exception:</source>
          <target state="translated">다음 번들 어댑터는 &lt;a href=&quot;../recordnotunique&quot;&gt;ActiveRecord :: RecordNotUnique&lt;/a&gt; 예외를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="4f1c96675ae6b9570b50e212e3ae027ef8570ca5" translate="yes" xml:space="preserve">
          <source>The following calculation methods have edge cases in October 1582, since days 5..14 just do not exist. This guide does not document their behavior around those days for brevity, but it is enough to say that they do what you would expect. That is, &lt;code&gt;Date.new(1582, 10, 4).tomorrow&lt;/code&gt; returns &lt;code&gt;Date.new(1582, 10, 15)&lt;/code&gt; and so on. Please check &lt;code&gt;test/core_ext/date_ext_test.rb&lt;/code&gt; in the Active Support test suite for expected behavior.</source>
          <target state="translated">다음 계산 방법에는 5.82 일이 존재하지 않기 때문에 1582 년 10 월에 중요한 경우가 있습니다. 이 안내서는 간결성을 위해 그 당시의 행동을 문서화하지는 않았지만 그들이 기대하는 바를 행한다고 말하는 것으로 충분합니다. 즉, &lt;code&gt;Date.new(1582, 10, 4).tomorrow&lt;/code&gt; 는 &lt;code&gt;Date.new(1582, 10, 15)&lt;/code&gt; 등을 반환합니다 . 예상되는 동작에 대해서는 Active Support 테스트 스위트에서 &lt;code&gt;test/core_ext/date_ext_test.rb&lt;/code&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="70d4c9f719378844b4409a52323353064e172572" translate="yes" xml:space="preserve">
          <source>The following changes are meant for upgrading your application to Rails 3.1.12, the last 3.1.x version of Rails.</source>
          <target state="translated">다음 변경 사항은 애플리케이션을 Rails의 마지막 3.1.x 버전 인 Rails 3.1.12로 업그레이드하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="a21909e1f363f954735463d953a47620a34d0ecc" translate="yes" xml:space="preserve">
          <source>The following changes are meant for upgrading your application to Rails 4.0.</source>
          <target state="translated">다음 변경 사항은 응용 프로그램을 Rails 4.0으로 업그레이드하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="1f4eba11712b688c04dbd32d2ec745a16224dc68" translate="yes" xml:space="preserve">
          <source>The following changes are meant for upgrading your application to the latest 3.2.x version of Rails.</source>
          <target state="translated">다음 변경 사항은 애플리케이션을 최신 3.2.x 버전의 Rails로 업그레이드하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="5a17e0ad99303eed4359cff4d8da7d88c45ebc56" translate="yes" xml:space="preserve">
          <source>The following checks can also be supplied with a proc or a symbol which corresponds to a method:</source>
          <target state="translated">다음 검사에는 방법에 해당하는 proc 또는 기호가 제공 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="46a28b7e917344b9bee0503c9f816514c89eeea1" translate="yes" xml:space="preserve">
          <source>The following code summarizes the situation:</source>
          <target state="translated">다음 코드는 상황을 요약합니다.</target>
        </trans-unit>
        <trans-unit id="c281ebe2a035df9fc9b458fe9d16552fd19ecc0a" translate="yes" xml:space="preserve">
          <source>The following concrete subclasses are included in Active Storage:</source>
          <target state="translated">다음과 같은 구체적인 하위 클래스가 Active Storage에 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="96657eda8232590db12df6e4e53baab705d4dc34" translate="yes" xml:space="preserve">
          <source>The following configuration options are best made in one of the environment files (environment.rb, production.rb, etc...)</source>
          <target state="translated">다음 구성 옵션은 환경 파일 중 하나 (environment.rb, production.rb 등)에서 가장 잘 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="30177bc5b6729d79742e2ee030efdfe4f950f932" translate="yes" xml:space="preserve">
          <source>The following configuration would queue the given job on the &lt;code&gt;production_high_priority&lt;/code&gt; queue when run in production:</source>
          <target state="translated">다음 구성은 &lt;code&gt;production_high_priority&lt;/code&gt; 에서 실행될 때 production_high_priority 큐 에서 지정된 작업을 큐에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="48b002c00bb39650ea2c3d72da1338bb50128142" translate="yes" xml:space="preserve">
          <source>The following configuration would queue the provided job on the &lt;code&gt;video_server.low_priority&lt;/code&gt; queue:</source>
          <target state="translated">다음 구성은 제공된 작업을 &lt;code&gt;video_server.low_priority&lt;/code&gt; 대기열에 대기 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="daa83a45bf2ff91d6a20f892040b66a0d751ead1" translate="yes" xml:space="preserve">
          <source>The following example demonstrates an extension which can be used with or without &lt;code&gt;Rails&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f452617bef02933cc7f6d371891f371f7e4b779" translate="yes" xml:space="preserve">
          <source>The following example demonstrates an extension which can be used with or without Rails.</source>
          <target state="translated">다음 예제는 Rails와 함께 또는 Rails없이 사용할 수있는 확장을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="99962e504be8e6840c8589ad9d05120d1cb4146f" translate="yes" xml:space="preserve">
          <source>The following features are not (yet) supported:</source>
          <target state="translated">다음 기능은 (아직) 지원되지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="013180286a901d766bcc39db17dc989369dbd41a" translate="yes" xml:space="preserve">
          <source>The following form allows a user to create a &lt;code&gt;Person&lt;/code&gt; and its associated addresses.</source>
          <target state="translated">다음 양식을 통해 사용자는 &lt;code&gt;Person&lt;/code&gt; 및 관련 주소 를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d27a5fac9684ab445570c45c6aa8783eca1e2a54" translate="yes" xml:space="preserve">
          <source>The following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc83f277cf7da9fe5a7029905b527298a6aa3ec1" translate="yes" xml:space="preserve">
          <source>The following format is for legacy syntax support. It will be deprecated in future versions of Rails.</source>
          <target state="translated">다음 형식은 레거시 구문 지원을위한 것입니다. 차후 버전의 Rails에서는 더 이상 사용되지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="d8548d239e9c484f9cc69b4404f594147009b4fe" translate="yes" xml:space="preserve">
          <source>The following full app-like example demonstrates how to use a Current class to facilitate easy access to the global, per-request attributes without passing them deeply around everywhere:</source>
          <target state="translated">다음과 같은 전체 앱과 유사한 예제는 Current 클래스를 사용하여 전역에 필요한 전역 속성을 전달하지 않고도 전역 요청 속성에 쉽게 액세스 할 수있는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f673bda06c21b2c27e3f9ccec5465bcd91e788ad" translate="yes" xml:space="preserve">
          <source>The following headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0955f47379c8d09732c707b032526245b3e6cc5c" translate="yes" xml:space="preserve">
          <source>The following is a list of the most commonly used methods. Please refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Errors.html&quot;&gt;&lt;code&gt;ActiveModel::Errors&lt;/code&gt;&lt;/a&gt; documentation for a list of all the available methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d425cd8d652b864ae1fe65a46c847b1c3552b2" translate="yes" xml:space="preserve">
          <source>The following is a list of the most commonly used methods. Please refer to the &lt;code&gt;ActiveModel::Errors&lt;/code&gt; documentation for a list of all the available methods.</source>
          <target state="translated">다음은 가장 일반적으로 사용되는 방법의 목록입니다. 사용 가능한 모든 방법의 목록은 &lt;code&gt;ActiveModel::Errors&lt;/code&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="12aabb098cae3591d87c543791e9cbc757195d40" translate="yes" xml:space="preserve">
          <source>The following is an excerpt from the &lt;a href=&quot;http://www.symantec.com/security_response/writeup.jsp?docid=2006-061211-4111-99&amp;amp;tabid=1&quot;&gt;Js.Yamanner@m&lt;/a&gt; Yahoo! Mail &lt;a href=&quot;http://groovin.net/stuff/yammer.txt&quot;&gt;worm&lt;/a&gt;. It appeared on June 11, 2006 and was the first webmail interface worm:</source>
          <target state="translated">다음은 &lt;a href=&quot;http://www.symantec.com/security_response/writeup.jsp?docid=2006-061211-4111-99&amp;amp;tabid=1&quot;&gt;Js.Yamanner@m&lt;/a&gt; Yahoo! 에서 발췌 한 것입니다. 메일 &lt;a href=&quot;http://groovin.net/stuff/yammer.txt&quot;&gt;웜&lt;/a&gt; . 2006 년 6 월 11 일에 나타 났으며 최초의 웹 메일 인터페이스 웜이었습니다.</target>
        </trans-unit>
        <trans-unit id="579d8c42dd4ef8c57843a057efd4713ac1241a02" translate="yes" xml:space="preserve">
          <source>The following is only a brief overview summary of the helpers available in Action View. It's recommended that you review the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers.html&quot;&gt;API Documentation&lt;/a&gt;, which covers all of the helpers in more detail, but this should serve as a good starting point.</source>
          <target state="translated">다음은 액션 뷰에서 사용할 수있는 헬퍼에 대한 간략한 개요입니다. 모든 헬퍼에 대해 자세히 다루는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers.html&quot;&gt;API Documentation&lt;/a&gt; 을 검토하는 것이 좋지만 , 좋은 출발점이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="d28f8549e31b151dd0222afe166ac626a4278627" translate="yes" xml:space="preserve">
          <source>The following line enables YUI compression, and requires the &lt;code&gt;yui-compressor&lt;/code&gt; gem.</source>
          <target state="translated">다음 줄은 YUI 압축을 활성화하며 &lt;code&gt;yui-compressor&lt;/code&gt; gem이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="f47cec262f30e06d8f4686db19c2d636b84a9271" translate="yes" xml:space="preserve">
          <source>The following line invokes &lt;code&gt;uglifier&lt;/code&gt; for JavaScript compression.</source>
          <target state="translated">다음 줄은 JavaScript 압축을 위해 &lt;code&gt;uglifier&lt;/code&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="3a19c4339274251eb0bf0254401868be2ad510d0" translate="yes" xml:space="preserve">
          <source>The following methods are only implemented in &lt;code&gt;active_support/core_ext/date_time/calculations.rb&lt;/code&gt; as they only make sense when used with a &lt;code&gt;DateTime&lt;/code&gt; instance:</source>
          <target state="translated">다음 메소드는 &lt;code&gt;DateTime&lt;/code&gt; 인스턴스 와 함께 사용하는 경우에만 의미가 있으므로 &lt;code&gt;active_support/core_ext/date_time/calculations.rb&lt;/code&gt; 에서만 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="f43faaf33bf2c0cdf7480bc0b867a519fa0ab48b" translate="yes" xml:space="preserve">
          <source>The following methods are reimplemented so you do &lt;strong&gt;not&lt;/strong&gt; need to load &lt;code&gt;active_support/core_ext/date/calculations.rb&lt;/code&gt; for these ones:</source>
          <target state="translated">다음 방법이 다시 구현되므로 이러한 방법에 대해 &lt;code&gt;active_support/core_ext/date/calculations.rb&lt;/code&gt; 를로드 할 필요 가 &lt;strong&gt;없습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3a5dee795f797c6e7d2a27bbce6ab149fb9ee6ba" translate="yes" xml:space="preserve">
          <source>The following methods for retrieval and query of a single associated object will be added:</source>
          <target state="translated">연관된 단일 객체의 검색 및 조회를위한 다음 방법이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="d5783a97e1eb9d3a76a908a48921fa3c38071460" translate="yes" xml:space="preserve">
          <source>The following methods return a &lt;code&gt;Time&lt;/code&gt; object if possible, otherwise a &lt;code&gt;DateTime&lt;/code&gt;. If set, they honor the user time zone.</source>
          <target state="translated">다음 메소드는 가능 하면 &lt;code&gt;Time&lt;/code&gt; 객체를, 그렇지 않으면 &lt;code&gt;DateTime&lt;/code&gt; 을 반환합니다 . 설정된 경우 사용자 시간대를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="657070cc7bdd9e1b035ac61f00a01849f933d950" translate="yes" xml:space="preserve">
          <source>The following methods skip validations, and will save the object to the database regardless of its validity. They should be used with caution.</source>
          <target state="translated">다음 방법은 유효성 검사를 건너 뛰고 유효성에 관계없이 개체를 데이터베이스에 저장합니다. 주의해서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="1f465129a4fb90e4527101bf731f2963373a56d8" translate="yes" xml:space="preserve">
          <source>The following methods trigger callbacks:</source>
          <target state="translated">다음 메소드는 콜백을 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="cfbc7fa8f557720dad3b43f60910ef4eb36a6082" translate="yes" xml:space="preserve">
          <source>The following methods trigger validations, and will save the object to the database only if the object is valid:</source>
          <target state="translated">다음 메소드는 유효성 검증을 트리거하고 오브젝트가 유효한 경우에만 오브젝트를 데이터베이스에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="523016b8452201bb1628b70c8c9797a7f03d6744" translate="yes" xml:space="preserve">
          <source>The following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3f54b9d4027c086c72adc490b0f155c01c54fb" translate="yes" xml:space="preserve">
          <source>The following middlewares, used for session management, are excluded from API apps since they normally don't need sessions. If one of your API clients is a browser, you might want to add one of these back in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36cf22b1fa5b113b06014631879e53072ca8ace1" translate="yes" xml:space="preserve">
          <source>The following migration will remove the table 'horses' and create the table 'apples' on the way up, and the reverse on the way down.</source>
          <target state="translated">다음 마이그레이션은 테이블 'horses'를 제거하고 올라가는 동안 테이블 'apples'를 만들고 내리는 길의 테이블을 'apples'로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e4d77afab2cb5c0e79177397fed4c21c74e5e9f3" translate="yes" xml:space="preserve">
          <source>The following options are accepted:</source>
          <target state="translated">다음과 같은 옵션이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="07868184f0badaae70ea74815fedb13374262579" translate="yes" xml:space="preserve">
          <source>The following sections give the details of each type of association, including the methods that they add and the options that you can use when declaring an association.</source>
          <target state="translated">다음 섹션에서는 추가하는 방법 및 연결을 선언 할 때 사용할 수있는 옵션을 포함하여 각 연결 유형에 대한 세부 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2562708af49a0bfce89266564bd6292133c83b57" translate="yes" xml:space="preserve">
          <source>The following sections outline the primary methods provided by the API:</source>
          <target state="translated">다음 섹션에서는 API에서 제공하는 기본 방법을 간략하게 설명합니다.</target>
        </trans-unit>
        <trans-unit id="609de3a69e18bad3684cc06e831d02068915f957" translate="yes" xml:space="preserve">
          <source>The following setup steps are common to both examples:</source>
          <target state="translated">다음 설정 단계는 두 예제 모두에 공통입니다.</target>
        </trans-unit>
        <trans-unit id="68ac9096c207d6e6fc7e824e70e5b3e0bab909e1" translate="yes" xml:space="preserve">
          <source>The following symbols are special:</source>
          <target state="translated">다음 기호는 특별합니다.</target>
        </trans-unit>
        <trans-unit id="9ff0dc756e7049a9d9d1160dc09667c5d872c2b2" translate="yes" xml:space="preserve">
          <source>The following two forms both upload a file.</source>
          <target state="translated">다음 두 가지 형식 모두 파일을 업로드합니다.</target>
        </trans-unit>
        <trans-unit id="1b73d642411f485e10316d22f8c12e0959b92a7e" translate="yes" xml:space="preserve">
          <source>The following validations are added automatically:</source>
          <target state="translated">다음 유효성 검사가 자동으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="392904f5f0a66b4200b7691949066a9831c1859a" translate="yes" xml:space="preserve">
          <source>The following values are considered to be blank in a Rails application:</source>
          <target state="translated">Rails 애플리케이션에서 다음 값은 공백으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="deee9509446ecf108a516105821dd5478062ac54" translate="yes" xml:space="preserve">
          <source>The foreign key column name on &lt;code&gt;from_table&lt;/code&gt;. Defaults to &lt;code&gt;to_table.singularize + &quot;_id&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from_table&lt;/code&gt; 의 외래 키 열 이름입니다 . 기본적으로 &lt;code&gt;to_table.singularize + &quot;_id&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3326729145fe6394d473ee7cb8400c3bea60f441" translate="yes" xml:space="preserve">
          <source>The foreign key will be named after the following pattern: &lt;code&gt;fk_rails_&amp;lt;identifier&amp;gt;&lt;/code&gt;. &lt;code&gt;identifier&lt;/code&gt; is a 10 character long string which is deterministically generated from the &lt;code&gt;from_table&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;. A custom name can be specified with the &lt;code&gt;:name&lt;/code&gt; option.</source>
          <target state="translated">외래 키는 &lt;code&gt;fk_rails_&amp;lt;identifier&amp;gt;&lt;/code&gt; 패턴에 따라 이름이 지정됩니다 . &lt;code&gt;identifier&lt;/code&gt; 는 &lt;code&gt;from_table&lt;/code&gt; 및 &lt;code&gt;column&lt;/code&gt; 에서 결정적으로 생성되는 10 자 길이의 문자열입니다 . &lt;code&gt;:name&lt;/code&gt; 옵션으로 사용자 정의 이름을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c57ae9faadcd902410eb3b14af62a22ffbd5d285" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;action&lt;/code&gt; is automatically filled with an appropriate value for &lt;code&gt;@article&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e007df2b561afc5d816ad0fcb5f864ca277d8c4" translate="yes" xml:space="preserve">
          <source>The form builder object yielded by &lt;code&gt;form_with&lt;/code&gt; provides numerous helper methods for generating form elements such as text fields, checkboxes, and radio buttons. The first parameter to these methods is always the name of the input. When the form is submitted, the name will be passed along with the form data, and will make its way to the &lt;code&gt;params&lt;/code&gt; in the controller with the value entered by the user for that field. For example, if the form contains &lt;code&gt;&amp;lt;%= form.text_field :query %&amp;gt;&lt;/code&gt;, then you would be able to get the value of this field in the controller with &lt;code&gt;params[:query]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090e93106d4fe15776dd64af77237f6b9a5104b9" translate="yes" xml:space="preserve">
          <source>The form builder used also determines what happens when you do</source>
          <target state="translated">사용 된 양식 빌더는 수행 할 때 수행되는 작업도 결정합니다.</target>
        </trans-unit>
        <trans-unit id="6f232e20bbc8c58f703a1c9e6e79a9addc1e2cf8" translate="yes" xml:space="preserve">
          <source>The form builder used also determines what happens when you do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969e4f9f028abca92b6eaeb2377525e0daf1b47a" translate="yes" xml:space="preserve">
          <source>The form field names are scoped with &lt;code&gt;article[...]&lt;/code&gt;. This means that &lt;code&gt;params[:article]&lt;/code&gt; will be a hash containing all these field's values. You can read more about the significance of input names in chapter &lt;a href=&quot;#understanding-parameter-naming-conventions&quot;&gt;Understanding Parameter Naming Conventions&lt;/a&gt; of this guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5be3edf2485d340a88e387ea582ad91c46d2ce" translate="yes" xml:space="preserve">
          <source>The form fields are automatically filled with the corresponding values from &lt;code&gt;@article&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60342ada4ced98a39f41de5586ec3ad3944ed28b" translate="yes" xml:space="preserve">
          <source>The form needs to use a different URL in order to go somewhere else. This can be done quite simply with the &lt;code&gt;:url&lt;/code&gt; option of &lt;code&gt;form_with&lt;/code&gt;. Typically in Rails, the action that is used for new form submissions like this is called &quot;create&quot;, and so the form should be pointed to that action.</source>
          <target state="translated">다른 곳으로 이동하려면 양식에서 다른 URL을 사용해야합니다. 이는 &lt;code&gt;form_with&lt;/code&gt; 의 &lt;code&gt;:url&lt;/code&gt; 옵션을 사용하여 간단하게 수행 할 수 있습니다 . 일반적으로 Rails에서는 이와 같은 새 양식 제출에 사용되는 동작을 &quot;만들기&quot;라고하므로 해당 형식을 해당 동작으로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="db75dbcbdc0e093bbfc719f467a241d7e67a2520" translate="yes" xml:space="preserve">
          <source>The form will be making a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/articles/:article_id/comments&lt;/code&gt;, which will correspond with the &lt;code&gt;create&lt;/code&gt; action in &lt;code&gt;Blorgh::CommentsController&lt;/code&gt;. This action needs to be created, which can be done by putting the following lines inside the class definition in &lt;code&gt;app/controllers/blorgh/comments_controller.rb&lt;/code&gt;:</source>
          <target state="translated">양식은 &lt;code&gt;/articles/:article_id/comments&lt;/code&gt; 에 &lt;code&gt;POST&lt;/code&gt; 요청을 하는데 이는 &lt;code&gt;Blorgh::CommentsController&lt;/code&gt; 의 &lt;code&gt;create&lt;/code&gt; 조치에 해당합니다 . 이 조치는 &lt;code&gt;app/controllers/blorgh/comments_controller.rb&lt;/code&gt; 의 클래스 정의 안에 다음 행을 넣어서 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7fbb9ae7852d624b58a411bef42e33a47388b020" translate="yes" xml:space="preserve">
          <source>The form's authenticity parameter. Override to provide your own.</source>
          <target state="translated">양식의 진위 매개 변수. 직접 제공하도록 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="3a13d407b622c23af95f052897df47515f94470f" translate="yes" xml:space="preserve">
          <source>The format of a fixture file looks like this:</source>
          <target state="translated">조명기 파일의 형식은 다음과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="2f7cb81c43eb0277bcb09abdbdfa4f95cbea41c6" translate="yes" xml:space="preserve">
          <source>The format of the schema dump generated by Rails is controlled by the &lt;code&gt;config.active_record.schema_format&lt;/code&gt; setting in &lt;code&gt;config/application.rb&lt;/code&gt;. By default, the format is &lt;code&gt;:ruby&lt;/code&gt;, but can also be set to &lt;code&gt;:sql&lt;/code&gt;.</source>
          <target state="translated">Rails가 생성 한 스키마 덤프의 형식은 &lt;code&gt;config/application.rb&lt;/code&gt; 의 &lt;code&gt;config.active_record.schema_format&lt;/code&gt; 설정에 의해 제어됩니다 . 기본적으로 형식은 &lt;code&gt;:ruby&lt;/code&gt; 이지만 &lt;code&gt;:sql&lt;/code&gt; 로 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2bcbf7d68f15e27fc0dd857f9971c15c0d46bd3" translate="yes" xml:space="preserve">
          <source>The former is the main one. The latter is there mostly for backwards compatibility reasons, in case the application has something in &lt;code&gt;config.autoload_once_paths&lt;/code&gt; (this is discouraged nowadays).</source>
          <target state="translated">전자가 주요 제품입니다. 후자는 대부분 &lt;code&gt;config.autoload_once_paths&lt;/code&gt; 에 응용 프로그램이있는 경우 (이것은 권장하지 않음) 이전 버전과의 호환성을 위해 주로 존재 합니다.</target>
        </trans-unit>
        <trans-unit id="82fadfffe8a017d8cc4cbac60f0f81c907522668" translate="yes" xml:space="preserve">
          <source>The full list of options for the plugin generator may be seen by typing:</source>
          <target state="translated">플러그인 생성기의 전체 옵션 목록은 다음을 입력하여 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4bde2b1b890d3a726aec51e0fcf264cdac863fa" translate="yes" xml:space="preserve">
          <source>The full request object is available via the request accessor and is primarily used to query for HTTP headers:</source>
          <target state="translated">전체 요청 객체는 요청 접근자를 통해 사용할 수 있으며 주로 HTTP 헤더를 쿼리하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="15558a932ce7d5ec8c2377322dcd833861fe3a97" translate="yes" xml:space="preserve">
          <source>The full set of methods that can be used in this block are as follows:</source>
          <target state="translated">이 블록에서 사용할 수있는 전체 메소드 세트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6c14ca350035676710a670dd045416bbcfb75b88" translate="yes" xml:space="preserve">
          <source>The gateway through which you can drill down into various details of each error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bd57d06a4ef9cdd161560d193f0e40b2eb8282" translate="yes" xml:space="preserve">
          <source>The general layout of a Rails application.</source>
          <target state="translated">Rails 애플리케이션의 일반적인 레이아웃.</target>
        </trans-unit>
        <trans-unit id="e7eeed51b86202389059cb757e688e04f990154f" translate="yes" xml:space="preserve">
          <source>The generated ID for a given label is constant, so we can discover any fixture's ID without loading anything, as long as we know the label.</source>
          <target state="translated">주어진 레이블에 대해 생성 된 ID는 일정하므로 레이블을 알고있는 한 아무 것도로드하지 않고 조명기의 ID를 발견 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c89bd0c48d5da0f02788cadbf5279ad7b0b6ae74" translate="yes" xml:space="preserve">
          <source>The generated attributes are escaped by default. This can be disabled using &lt;code&gt;escape_attributes&lt;/code&gt;.</source>
          <target state="translated">생성 된 속성은 기본적으로 이스케이프됩니다. &lt;code&gt;escape_attributes&lt;/code&gt; 를 사용하여 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="645e01b963a2d6bedc01988adc919326a38cbb71" translate="yes" xml:space="preserve">
          <source>The generated model inherits from &lt;code&gt;ApplicationMailer&lt;/code&gt; which in turn inherits from &lt;code&gt;ActionMailer::Base&lt;/code&gt;. A mailer model defines methods used to generate an email message. In these methods, you can set up variables to be used in the mailer views, options on the mail itself such as the &lt;code&gt;:from&lt;/code&gt; address, and attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ab849c0e0913321228afc5541b5041a5ce971d" translate="yes" xml:space="preserve">
          <source>The generated model inherits from &lt;code&gt;ApplicationMailer&lt;/code&gt; which in turn inherits from &lt;code&gt;ActionMailer::Base&lt;/code&gt;. A mailer model defines methods used to generate an email message. In these methods, you can setup variables to be used in the mailer views, options on the mail itself such as the &lt;code&gt;:from&lt;/code&gt; address, and attachments.</source>
          <target state="translated">생성 된 모델은 &lt;code&gt;ApplicationMailer&lt;/code&gt; 에서 상속되며,이 &lt;code&gt;ActionMailer::Base&lt;/code&gt; 는 ActionMailer :: Base 에서 상속됩니다 . 메일러 모델은 전자 메일 메시지를 생성하는 데 사용되는 방법을 정의합니다. 이 방법에서는 메일러보기, 메일 자체의 옵션 (예 &lt;code&gt;:from&lt;/code&gt; 주소 및 첨부 파일)에 사용할 변수를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="321061befaaa7def4b485d8f5cfddc8d61d5b9d2" translate="yes" xml:space="preserve">
          <source>The generated model will automatically inherit from &lt;code&gt;AnimalsRecord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9642127f67417f40c4b17b7ca6fba9837a5b3709" translate="yes" xml:space="preserve">
          <source>The generated model will look like this:</source>
          <target state="translated">생성 된 모델은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8ebb94072c2ba22e483813ad1a85b01320851bc6" translate="yes" xml:space="preserve">
          <source>The generation of the reader instance method can be prevented by setting &lt;code&gt;:instance_reader&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and the generation of the writer instance method can be prevented by setting &lt;code&gt;:instance_writer&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. Generation of both methods can be prevented by setting &lt;code&gt;:instance_accessor&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. In all cases, the value must be exactly &lt;code&gt;false&lt;/code&gt; and not any false value.</source>
          <target state="translated">리더 인스턴스 메소드의 생성을 설정함으로써 방지 될 수있다 &lt;code&gt;:instance_reader&lt;/code&gt; 에 &lt;code&gt;false&lt;/code&gt; 및 라이터 인스턴스 메소드의 발생을 설정함으로써 방지 될 수있다 &lt;code&gt;:instance_writer&lt;/code&gt; 에 &lt;code&gt;false&lt;/code&gt; . &lt;code&gt;:instance_accessor&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하면 두 방법의 생성을 막을 수 있습니다 . 모든 경우에, 값은 거짓 값이 아닌 정확하게 &lt;code&gt;false&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="d4bf2ad59eb23553637bb6ad74e918f26165d9a9" translate="yes" xml:space="preserve">
          <source>The generation of the reader instance method can be prevented by setting the option &lt;code&gt;:instance_reader&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:instance_reader&lt;/code&gt; 옵션 을 &lt;code&gt;false&lt;/code&gt; 로 설정하면 리더 인스턴스 메소드 생성을 막을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="96923220f999eee1905ec339692e505269b44e49" translate="yes" xml:space="preserve">
          <source>The generation of the writer instance method can be prevented by setting the option &lt;code&gt;:instance_writer&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:instance_writer&lt;/code&gt; 옵션 을 &lt;code&gt;false&lt;/code&gt; 로 설정하여 라이터 인스턴스 메소드 생성을 방지 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="03b7c6a99d34c4aaf65fc166f48dc469d58dfbbc" translate="yes" xml:space="preserve">
          <source>The generator checks that there exist the directories for models, controllers, helpers, layouts, functional and unit tests, stylesheets, creates the views, controller, model and database migration for HighScore (creating the &lt;code&gt;high_scores&lt;/code&gt; table and fields), takes care of the route for the &lt;strong&gt;resource&lt;/strong&gt;, and new tests for everything.</source>
          <target state="translated">생성기는 모델, 컨트롤러, 도우미, 레이아웃, 기능 및 단위 테스트, 스타일 시트에 대한 디렉토리가 있는지 확인하고 HighScore에 대한보기, 컨트롤러, 모델 및 데이터베이스 마이그레이션 ( &lt;code&gt;high_scores&lt;/code&gt; 테이블 및 필드 작성)을 작성 하고 경로를 처리합니다. 을위한 &lt;strong&gt;자원&lt;/strong&gt; 및 모두를위한 새로운 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="7b39f749f99948f5914a83edc800a368fad145a9" translate="yes" xml:space="preserve">
          <source>The generators you can use to create them.</source>
          <target state="translated">생성기를 사용하여 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a84866369ad05153b18c2d07d9dde0bdd61861cb" translate="yes" xml:space="preserve">
          <source>The given arguments may also be specified as matcher procs that return a boolean value indicating whether a job's attribute meets certain criteria.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44697cfaaac008cfcbe2fe60f5a95303683ec71b" translate="yes" xml:space="preserve">
          <source>The given range must be fully bounded, with both start and end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a11e822e465e85b59074ad8222bc49591cdfb25" translate="yes" xml:space="preserve">
          <source>The goals of testing your mailer classes are to ensure that:</source>
          <target state="translated">메일러 클래스 테스트의 목표는 다음을 보장하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="362978286aa17bd104be42963df61dd594f4d276" translate="yes" xml:space="preserve">
          <source>The guides for earlier releases: &lt;a href=&quot;https://guides.rubyonrails.org/v5.2/&quot;&gt;Rails 5.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.1/&quot;&gt;Rails 5.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.0/&quot;&gt;Rails 5.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.2/&quot;&gt;Rails 4.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.1/&quot;&gt;Rails 4.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.0/&quot;&gt;Rails 4.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.2/&quot;&gt;Rails 3.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.1/&quot;&gt;Rails 3.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.0/&quot;&gt;Rails 3.0&lt;/a&gt;, and &lt;a href=&quot;https://guides.rubyonrails.org/v2.3/&quot;&gt;Rails 2.3&lt;/a&gt;.</source>
          <target state="translated">이전 릴리스에 대한 안내서 : &lt;a href=&quot;https://guides.rubyonrails.org/v5.2/&quot;&gt;Rails 5.2&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v5.1/&quot;&gt;Rails 5.1&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v5.0/&quot;&gt;Rails 5.0&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v4.2/&quot;&gt;Rails 4.2&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v4.1/&quot;&gt;Rails 4.1&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v4.0/&quot;&gt;Rails 4.0&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v3.2/&quot;&gt;Rails 3.2&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v3.1/&quot;&gt;Rails 3.1&lt;/a&gt; , &lt;a href=&quot;https://guides.rubyonrails.org/v3.0/&quot;&gt;Rails 3.0&lt;/a&gt; 및 &lt;a href=&quot;https://guides.rubyonrails.org/v2.3/&quot;&gt;Rails 2.3&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b2b614143472cc56211bf69dd5927b0911062968" translate="yes" xml:space="preserve">
          <source>The guides for earlier releases: &lt;a href=&quot;https://guides.rubyonrails.org/v6.0/&quot;&gt;Rails 6.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.2/&quot;&gt;Rails 5.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.1/&quot;&gt;Rails 5.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.0/&quot;&gt;Rails 5.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.2/&quot;&gt;Rails 4.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.1/&quot;&gt;Rails 4.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.0/&quot;&gt;Rails 4.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.2/&quot;&gt;Rails 3.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.1/&quot;&gt;Rails 3.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.0/&quot;&gt;Rails 3.0&lt;/a&gt;, and &lt;a href=&quot;https://guides.rubyonrails.org/v2.3/&quot;&gt;Rails 2.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0769462d4182a8d7e15fc285a42e4195eb77d38c" translate="yes" xml:space="preserve">
          <source>The hash keys are the attribute names, and the hash values are the original attribute values in the database (as opposed to the in-memory values about to be saved).</source>
          <target state="translated">해시 키는 속성 이름이고 해시 값은 데이터베이스의 원래 속성 값입니다 (메모리 내 값이 저장 되려고하는 것과 반대).</target>
        </trans-unit>
        <trans-unit id="058d050ee7d540ed9e563b384b80cef28a9d82ce" translate="yes" xml:space="preserve">
          <source>The hash passed to the mail method allows you to specify any header that a &lt;code&gt;Mail::Message&lt;/code&gt; will accept (any valid email header including optional fields).</source>
          <target state="translated">mail 메소드에 전달 된 해시는 &lt;code&gt;Mail::Message&lt;/code&gt; 가 수락 할 헤더 (옵션 필드를 포함한 유효한 이메일 헤더) 를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f5c290181dabdf6559a851bcac9bcc0636e995f" translate="yes" xml:space="preserve">
          <source>The helper gets the name of the favicon file as first argument, which defaults to &amp;ldquo;favicon.ico&amp;rdquo;, and also supports &lt;code&gt;:rel&lt;/code&gt; and &lt;code&gt;:type&lt;/code&gt; options to override their defaults, &amp;ldquo;shortcut icon&amp;rdquo; and &amp;ldquo;image/x-icon&amp;rdquo; respectively:</source>
          <target state="translated">도우미는 favicon 파일의 이름을 첫 번째 인수로 가져옵니다. 기본값은 &quot;favicon.ico&quot;이며 기본값은 &quot;shortcut icon&quot;및 &quot;image / x-icon&quot;을 재정의 하는 &lt;code&gt;:rel&lt;/code&gt; 및 &lt;code&gt;:type&lt;/code&gt; 옵션을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="c8f3b49cd9e3cb6be9a8ff2c3fb102ef6cfdd129" translate="yes" xml:space="preserve">
          <source>The helper inside &lt;code&gt;app/helpers/blorgh/articles_helper.rb&lt;/code&gt; is also namespaced:</source>
          <target state="translated">&lt;code&gt;app/helpers/blorgh/articles_helper.rb&lt;/code&gt; 내부의 도우미 도 네임 스페이스입니다.</target>
        </trans-unit>
        <trans-unit id="3b93bd5de48450a8776f0c3f464e327c151c1f12" translate="yes" xml:space="preserve">
          <source>The helper method &lt;code&gt;full_messages&lt;/code&gt; uses &lt;code&gt;humanize&lt;/code&gt; as a fallback to include attribute names:</source>
          <target state="translated">헬퍼 메소드 &lt;code&gt;full_messages&lt;/code&gt; 는 &lt;code&gt;humanize&lt;/code&gt; 를 대체 이름으로 사용 하여 속성 이름을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="c03db03c2478cc4beefab4ef9e28af6f4d551a14" translate="yes" xml:space="preserve">
          <source>The helper methods called on the form builder are identical to the model object helpers except that it is not necessary to specify which object is being edited since this is already managed by the form builder.</source>
          <target state="translated">양식 빌더에서 호출 된 헬퍼 메소드는 양식 작성기에서 이미 관리하고 있으므로 편집중인 오브젝트를 지정할 필요가 없다는 점을 제외하고 모델 오브젝트 헬퍼와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="48e6e57e3a5816d496cf9346b7b10113bd662a20" translate="yes" xml:space="preserve">
          <source>The hooks inside the Rails framework for instrumentation.</source>
          <target state="translated">계측을위한 Rails 프레임 워크 내부의 후크.</target>
        </trans-unit>
        <trans-unit id="4b21621570d8c2b68888621ecdd2bf376d3c4875" translate="yes" xml:space="preserve">
          <source>The hooks lookup is similar as above:</source>
          <target state="translated">후크 조회는 위와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="4350fdd5e24421c545843a276f1aecf4174489c6" translate="yes" xml:space="preserve">
          <source>The horizontal sharding API also supports read replicas. You can swap the role and the shard with the &lt;code&gt;connected_to&lt;/code&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7943c0c7de50364f1568dbf6a3844f8f66f52bc0" translate="yes" xml:space="preserve">
          <source>The host of a request is checked against the &lt;code&gt;hosts&lt;/code&gt; entries with the case operator (&lt;code&gt;#===&lt;/code&gt;), which lets &lt;code&gt;hosts&lt;/code&gt; support entries of type &lt;code&gt;Regexp&lt;/code&gt;, &lt;code&gt;Proc&lt;/code&gt; and &lt;code&gt;IPAddr&lt;/code&gt; to name a few. Here is an example with a regexp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465f83962e2239cb19550b0b54f391531039b74a" translate="yes" xml:space="preserve">
          <source>The hostname used for this request.</source>
          <target state="translated">이 요청에 사용 된 호스트 이름입니다.</target>
        </trans-unit>
        <trans-unit id="df619d8c4ceafae7f4ef07c3343b96da7296ae57" translate="yes" xml:space="preserve">
          <source>The hostname used in the last request.</source>
          <target state="translated">마지막 요청에 사용 된 호스트 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d729a8f7d6c2e7248811f11389969b4f75002255" translate="yes" xml:space="preserve">
          <source>The hostname's first &lt;code&gt;n&lt;/code&gt; segments, starting from the right (the TLD).</source>
          <target state="translated">오른쪽에서 시작하여 호스트 이름의 첫 번째 &lt;code&gt;n&lt;/code&gt; 세그먼트 (TLD)입니다.</target>
        </trans-unit>
        <trans-unit id="247a4e650cdfc512efea9563eb1b2a0a9fceb6a4" translate="yes" xml:space="preserve">
          <source>The i18n library takes a &lt;strong&gt;pragmatic approach&lt;/strong&gt; to locale keys (after &lt;a href=&quot;https://groups.google.com/forum/#!topic/rails-i18n/FN7eLH2-lHA&quot;&gt;some discussion&lt;/a&gt;), including only the &lt;em&gt;locale&lt;/em&gt; (&quot;language&quot;) part, like &lt;code&gt;:en&lt;/code&gt;, &lt;code&gt;:pl&lt;/code&gt;, not the &lt;em&gt;region&lt;/em&gt; part, like &lt;code&gt;:&quot;en-US&quot;&lt;/code&gt; or &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt;, which are traditionally used for separating &quot;languages&quot; and &quot;regional setting&quot; or &quot;dialects&quot;. Many international applications use only the &quot;language&quot; element of a locale such as &lt;code&gt;:cs&lt;/code&gt;, &lt;code&gt;:th&lt;/code&gt;, or &lt;code&gt;:es&lt;/code&gt; (for Czech, Thai, and Spanish). However, there are also regional differences within different language groups that may be important. For instance, in the &lt;code&gt;:&quot;en-US&quot;&lt;/code&gt; locale you would have $ as a currency symbol, while in &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt;, you would have &amp;pound;. Nothing stops you from separating regional and other settings in this way: you just have to provide full &quot;English - United Kingdom&quot; locale in a &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt; dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fa67d833d76b1422c347fe803ccf6a40acbd46" translate="yes" xml:space="preserve">
          <source>The i18n library takes a &lt;strong&gt;pragmatic approach&lt;/strong&gt; to locale keys (after &lt;a href=&quot;https://groups.google.com/forum/#!topic/rails-i18n/FN7eLH2-lHA&quot;&gt;some discussion&lt;/a&gt;), including only the &lt;em&gt;locale&lt;/em&gt; (&quot;language&quot;) part, like &lt;code&gt;:en&lt;/code&gt;, &lt;code&gt;:pl&lt;/code&gt;, not the &lt;em&gt;region&lt;/em&gt; part, like &lt;code&gt;:en-US&lt;/code&gt; or &lt;code&gt;:en-GB&lt;/code&gt;, which are traditionally used for separating &quot;languages&quot; and &quot;regional setting&quot; or &quot;dialects&quot;. Many international applications use only the &quot;language&quot; element of a locale such as &lt;code&gt;:cs&lt;/code&gt;, &lt;code&gt;:th&lt;/code&gt;, or &lt;code&gt;:es&lt;/code&gt; (for Czech, Thai, and Spanish). However, there are also regional differences within different language groups that may be important. For instance, in the &lt;code&gt;:en-US&lt;/code&gt; locale you would have $ as a currency symbol, while in &lt;code&gt;:en-GB&lt;/code&gt;, you would have &amp;pound;. Nothing stops you from separating regional and other settings in this way: you just have to provide full &quot;English - United Kingdom&quot; locale in a &lt;code&gt;:en-GB&lt;/code&gt; dictionary.</source>
          <target state="translated">국제화 (i18n) 라이브러리가 소요 &lt;strong&gt;실용적인 접근&lt;/strong&gt; (후 로케일 키를 &lt;a href=&quot;https://groups.google.com/forum/#!topic/rails-i18n/FN7eLH2-lHA&quot;&gt;논의&lt;/a&gt; 에만 포함) &lt;em&gt;로케일&lt;/em&gt; ( &quot;언어&quot;) 부분, 같은 &lt;code&gt;:en&lt;/code&gt; , &lt;code&gt;:pl&lt;/code&gt; 아닌 &lt;em&gt;지역의&lt;/em&gt; 부분, 같은 &lt;code&gt;:en-US&lt;/code&gt; 또는 &lt;code&gt;:en-GB&lt;/code&gt; , &quot;언어&quot;와 &quot;지역 설정&quot;또는 &quot;방언&quot;을 분리하는 데 전통적으로 사용됩니다. 많은 국제 응용 프로그램에서는 &lt;code&gt;:cs&lt;/code&gt; , &lt;code&gt;:th&lt;/code&gt; 또는 &lt;code&gt;:es&lt;/code&gt; (체코 어, 태국어 및 스페인어)와 같은 로캘의 &quot;language&quot;요소 만 사용합니다 . 그러나 다른 언어 그룹에는 중요한 지역적 차이도 있습니다. 예를 들어 &lt;code&gt;:en-US&lt;/code&gt; 에서로케일에는 통화 기호로 $가 있고, &lt;code&gt;:en-GB&lt;/code&gt; 에 &amp;pound;가 있습니다. 이런 식으로 지역 및 기타 설정을 분리하는 것을 막을 수있는 것은 없습니다 &lt;code&gt;:en-GB&lt;/code&gt; 사전 에서 &quot;영어-영국&quot;로케일을 제공하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="7f53afb305af92309a3fdf213ca6a51b59f8138a" translate="yes" xml:space="preserve">
          <source>The idea of a parent namespace is at the core of the autoloading algorithms and helps explain and understand their motivation intuitively, but as you see that metaphor leaks easily. Given an edge case to reason about, take always into account that by &quot;parent namespace&quot; the guide means exactly that specific string derivation.</source>
          <target state="translated">부모 네임 스페이스에 대한 아이디어는 자동로드 알고리즘의 핵심이며 동기 부여를 직관적으로 설명하고 이해하는 데 도움이되지만 메타포가 쉽게 누출되는 것을 알 수 있습니다. 추론해야 할 중요한 경우를 고려할 때, 항상 &quot;부모 네임 스페이스&quot;에 의해이 가이드는 특정 문자열 파생을 정확히 의미한다는 점을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="3cd13b5796c3fc5827aff4691f7e2ec42bfb7375" translate="yes" xml:space="preserve">
          <source>The idea would be to use &lt;code&gt;$PAYMENT_GATEWAY&lt;/code&gt; in the code, and let the initializer set that to the actual implementation depending on the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f19b540681118fdd893c06bdeb7c6925c5febfb" translate="yes" xml:space="preserve">
          <source>The immutable requirement is enforced by Active Record by freezing any object assigned as a value object. Attempting to change it afterwards will result in a &lt;code&gt;RuntimeError&lt;/code&gt;.</source>
          <target state="translated">불변 요구 사항은 값 개체로 할당 된 개체를 고정하여 Active Record에 의해 적용됩니다. 나중에 변경하려고하면 &lt;code&gt;RuntimeError&lt;/code&gt; 가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="54381883e6c09b4dc43d4ac46bee21b9cc5395a7" translate="yes" xml:space="preserve">
          <source>The implicit block given to &lt;code&gt;link_to_unless_current&lt;/code&gt; is evaluated if the current action is the action given. So, if we had a comments page and wanted to render a &amp;ldquo;Go Back&amp;rdquo; link instead of a link to the comments page, we could do something like this&amp;hellip;</source>
          <target state="translated">&lt;code&gt;link_to_unless_current&lt;/code&gt; 에 제공된 내재적 블록 은 현재 조치가 제공된 조치인지 평가됩니다. 따라서 댓글 페이지가 있고 댓글 페이지에 대한 링크 대신 &quot;돌아 가기&quot;링크를 렌더링하려는 경우 다음과 같은 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae13bd63f4cdb460db67da0c75a77a0f55f7ea5c" translate="yes" xml:space="preserve">
          <source>The inbound emails are turned into &lt;code&gt;InboundEmail&lt;/code&gt; records using Active Record and feature lifecycle tracking, storage of the original email on cloud storage via Active Storage, and responsible data handling with on-by-default incineration.</source>
          <target state="translated">인바운드 이메일은 Active Record 및 기능 수명주기 추적, Active Storage를 통한 클라우드 스토리지의 원본 이메일 저장 및 기본 소각을 통한 책임있는 데이터 처리를 사용하여 &lt;code&gt;InboundEmail&lt;/code&gt; 레코드 로 변환 됩니다.</target>
        </trans-unit>
        <trans-unit id="869236c95820445e727ad51587da6b23b472304d" translate="yes" xml:space="preserve">
          <source>The index view (&lt;code&gt;app/views/users/index.html.erb&lt;/code&gt;) contains:</source>
          <target state="translated">색인보기 ( &lt;code&gt;app/views/users/index.html.erb&lt;/code&gt; )에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b32f9511f66640e563df5e34e2c7c0a6fab3ddf3" translate="yes" xml:space="preserve">
          <source>The index will be named after the table and the column name(s), unless you pass &lt;code&gt;:name&lt;/code&gt; as an option.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; 을 옵션으로 전달하지 않으면 인덱스 이름은 테이블과 열 이름을 따라 이름이 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="648e623dacab4b9af4b014df64075bd0547875ce" translate="yes" xml:space="preserve">
          <source>The initializer wants to create a &lt;code&gt;BellX1::FlightModel&lt;/code&gt; and nesting has &lt;code&gt;BellX1&lt;/code&gt;, that looks good. But if the default flight model is loaded and the one for the Bell-X1 is not, the interpreter is able to resolve the top-level &lt;code&gt;FlightModel&lt;/code&gt; and autoloading is thus not triggered for &lt;code&gt;BellX1::FlightModel&lt;/code&gt;.</source>
          <target state="translated">이니셜 라이저는 &lt;code&gt;BellX1::FlightModel&lt;/code&gt; 을 만들고 싶어 하고 중첩에는 &lt;code&gt;BellX1&lt;/code&gt; 이 있습니다. 그러나 기본 비행 모델이로드되고 Bell-X1에 대한 비행 모델이로드되지 않으면 인터프리터는 최상위 &lt;code&gt;FlightModel&lt;/code&gt; 을 해석 할 수 있으므로 &lt;code&gt;BellX1::FlightModel&lt;/code&gt; 에 대해 자동로드가 트리거되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="7c80d611760f565bf27d46366137ae2e4fd9731f" translate="yes" xml:space="preserve">
          <source>The instrumentation API provided by Active Support allows developers to provide hooks which other developers may hook into. There are several of these within the &lt;a href=&quot;#rails-framework-hooks&quot;&gt;Rails framework&lt;/a&gt;. With this API, developers can choose to be notified when certain events occur inside their application or another piece of Ruby code.</source>
          <target state="translated">Active Support에서 제공하는 계측 API를 통해 개발자는 다른 개발자가 연결할 수있는 후크를 제공 할 수 있습니다. &lt;a href=&quot;#rails-framework-hooks&quot;&gt;Rails 프레임 워크&lt;/a&gt; 에는 몇 가지가 있습니다 . 이 API를 사용하면 개발자는 애플리케이션 또는 다른 Ruby 코드 내에서 특정 이벤트가 발생할 때 알림을 받도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44b71bf98dd0cdf4cb43c535aaee7d46af03287d" translate="yes" xml:space="preserve">
          <source>The intended use case for this method is to escape JSON strings before including them inside a script tag to avoid XSS vulnerability:</source>
          <target state="translated">이 방법의 의도 된 사용 사례는 JSON 문자열을 스크립트 태그에 포함시키기 전에 JSON 문자열을 이스케이프하여 XSS 취약점을 피하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="79f2c35a7b9a90149c8abcd1a54d9b8fc7aa6157" translate="yes" xml:space="preserve">
          <source>The interaction &lt;em&gt;changes the state&lt;/em&gt; of the resource in a way that the user would perceive (e.g., a subscription to a service), or</source>
          <target state="translated">상호 작용 은 사용자가 인식하는 방식 (예 : 서비스 가입)으로 리소스 &lt;em&gt;상태&lt;/em&gt; 를 &lt;em&gt;변경&lt;/em&gt; 하거나</target>
        </trans-unit>
        <trans-unit id="a5762c80b87c2c4c3a9e18dfd534cadedd2d6b35" translate="yes" xml:space="preserve">
          <source>The interaction is more &lt;em&gt;like a question&lt;/em&gt; (i.e., it is a safe operation such as a query, read operation, or lookup).</source>
          <target state="translated">상호 작용은 &lt;em&gt;질문과 유사합니다&lt;/em&gt; (예 : 쿼리, 읽기 작업 또는 조회와 같은 안전한 작업).</target>
        </trans-unit>
        <trans-unit id="7962fec553e1f444a5bd713ae1675baca557a15e" translate="yes" xml:space="preserve">
          <source>The interaction is more &lt;em&gt;like an order&lt;/em&gt;, or</source>
          <target state="translated">상호 작용은 &lt;em&gt;주문과 비슷&lt;/em&gt; 하거나</target>
        </trans-unit>
        <trans-unit id="95f3d55c11448516ef4cf2c075e8257c9652b19b" translate="yes" xml:space="preserve">
          <source>The interesting part for a Rails app is the last line, &lt;code&gt;server.run&lt;/code&gt;. Here we encounter the &lt;code&gt;wrapped_app&lt;/code&gt; method again, which this time we're going to explore more (even though it was executed before, and thus memoized by now).</source>
          <target state="translated">Rails 앱의 흥미로운 부분은 마지막 줄 &lt;code&gt;server.run&lt;/code&gt; 입니다. 여기서는 &lt;code&gt;wrapped_app&lt;/code&gt; 메소드를 다시 만나게 되는데, 이번에는 더 많이 살펴볼 것입니다.</target>
        </trans-unit>
        <trans-unit id="b459fda0fb539be04b0a909ef219de4e5a2b39af" translate="yes" xml:space="preserve">
          <source>The interpretation of a parent namespace when thinking about classes and modules is tricky though. Let's consider a module M named &quot;A::B&quot;:</source>
          <target state="translated">클래스와 모듈을 생각할 때 부모 네임 스페이스를 해석하는 것은 까다 롭습니다. &quot;A :: B&quot;라는 모듈 M을 생각해 봅시다.</target>
        </trans-unit>
        <trans-unit id="b088dc4a33ac210d77c1458749a93ed8bf4c34fc" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;String#include?&lt;/code&gt;. Returns true if the string does not include the other string.</source>
          <target state="translated">&lt;code&gt;String#include?&lt;/code&gt; 의 역 ? . 문자열에 다른 문자열이 포함되어 있지 않으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d3b045c64486cd3543aa4c92eac840cd5ff4ee1a" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;pluralize&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; 의 역수 :</target>
        </trans-unit>
        <trans-unit id="5dd1404e8fb1e4a2f3428a87a501d557bbc475c1" translate="yes" xml:space="preserve">
          <source>The join table should not have a primary key or a model associated with it. You must manually generate the join table with a migration such as this:</source>
          <target state="translated">조인 테이블에는 기본 키 또는 이와 관련된 모델이 없어야합니다. 다음과 같은 마이그레이션으로 조인 테이블을 수동으로 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="052d7b38c38526d06bad1945b5b98f5f66c7d437" translate="yes" xml:space="preserve">
          <source>The key for the error message in this case is &lt;code&gt;:blank&lt;/code&gt;. Active Record will look up this key in the namespaces:</source>
          <target state="translated">이 경우 오류 메시지의 키는 &lt;code&gt;:blank&lt;/code&gt; 입니다. Active Record는 네임 스페이스에서이 키를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="a03e001b53b8dfaae3a1107e4ec8266dabdface7" translate="yes" xml:space="preserve">
          <source>The keys must be the fixture names, that coincide with the short paths to the fixture files.</source>
          <target state="translated">키는 조명기 이름이어야하며, 조명기 파일의 짧은 경로와 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="1d3e3365229f6940a1c09a4628bdc8177d9404b5" translate="yes" xml:space="preserve">
          <source>The keys of the &lt;code&gt;:addresses_attributes&lt;/code&gt; hash are unimportant, they need merely be different for each address.</source>
          <target state="translated">&lt;code&gt;:addresses_attributes&lt;/code&gt; 해시 의 키 는 중요하지 않으며 각 주소마다 다르면됩니다.</target>
        </trans-unit>
        <trans-unit id="437996ad7c0e04b8e7fa0c7a7527aa0f661baec9" translate="yes" xml:space="preserve">
          <source>The keys of the hash which is the value for &lt;code&gt;:posts_attributes&lt;/code&gt; are ignored in this case. However, it is not allowed to use &lt;code&gt;'id'&lt;/code&gt; or &lt;code&gt;:id&lt;/code&gt; for one of such keys, otherwise the hash will be wrapped in an array and interpreted as an attribute hash for a single post.</source>
          <target state="translated">이 경우 &lt;code&gt;:posts_attributes&lt;/code&gt; 의 값인 해시 키 는 무시됩니다. 그러나 이러한 키 중 하나에 &lt;code&gt;'id'&lt;/code&gt; 또는 &lt;code&gt;:id&lt;/code&gt; 를 사용할 수 없습니다 . 그렇지 않으면 해시가 배열로 랩핑되어 단일 게시물의 속성 해시로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="bff0237eaabfc7db91da8d08231c80475092cb7e" translate="yes" xml:space="preserve">
          <source>The keys used in a cache can be any object that responds to either &lt;code&gt;cache_key&lt;/code&gt; or &lt;code&gt;to_param&lt;/code&gt;. You can implement the &lt;code&gt;cache_key&lt;/code&gt; method on your classes if you need to generate custom keys. Active Record will generate keys based on the class name and record id.</source>
          <target state="translated">캐시에 사용 된 키는 &lt;code&gt;cache_key&lt;/code&gt; 또는 &lt;code&gt;to_param&lt;/code&gt; 에 응답하는 모든 객체 일 수 있습니다 . 사용자 정의 키를 생성해야하는 경우 클래스 에서 &lt;code&gt;cache_key&lt;/code&gt; 메소드를 구현할 수 있습니다 . 활성 레코드는 클래스 이름과 레코드 ID를 기반으로 키를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="f7776f2c4b88c4d6b494aa2092d34ebd03edd32c" translate="yes" xml:space="preserve">
          <source>The keys you use on &lt;code&gt;Rails.cache&lt;/code&gt; will not be the same as those actually used with the storage engine. They may be modified with a namespace or altered to fit technology backend constraints. This means, for instance, that you can't save values with &lt;code&gt;Rails.cache&lt;/code&gt; and then try to pull them out with the &lt;code&gt;dalli&lt;/code&gt; gem. However, you also don't need to worry about exceeding the memcached size limit or violating syntax rules.</source>
          <target state="translated">&lt;code&gt;Rails.cache&lt;/code&gt; 에서 사용하는 키 는 실제로 스토리지 엔진에 사용되는 키와 동일하지 않습니다. 네임 스페이스로 수정하거나 기술 백엔드 제약 조건에 맞게 변경할 수 있습니다. 예를 들어 &lt;code&gt;Rails.cache&lt;/code&gt; 로 값을 저장 하고 &lt;code&gt;dalli&lt;/code&gt; gem을 사용하여 값 을 가져올 수 없음을 의미합니다 . 그러나 memcached 크기 제한을 초과하거나 구문 규칙을 위반하는 것에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="9a7613a9e24c1242511419e1adb78550681bc52d" translate="yes" xml:space="preserve">
          <source>The keyword arguments :from and :to can be given to specify the expected initial value and the expected value after the block was executed.</source>
          <target state="translated">키워드 인수 : from 및 : to는 블록이 실행 된 후 예상 초기 값과 예상 값을 지정하도록 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3349b4c7e79a27feec027e09eaaf6fe241addad" translate="yes" xml:space="preserve">
          <source>The label of the current fixture is always available as a column value:</source>
          <target state="translated">현재 조명기의 레이블은 항상 열 값으로 사용 가능합니다 :</target>
        </trans-unit>
        <trans-unit id="5a7bea3f7592b166f30ea2c09e8e9abb723ec914" translate="yes" xml:space="preserve">
          <source>The last characters will be replaced with the &lt;code&gt;:omission&lt;/code&gt; string (defaults to &amp;ldquo;&amp;hellip;&amp;rdquo;) for a total length not exceeding &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">마지막 문자는 대체됩니다 &lt;code&gt;:omission&lt;/code&gt; 초과하지 않는 총 길이 문자열 (디폴트는 &quot;...&quot;) &lt;code&gt;length&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e5104bffaf01d4231666775a1d668f8d8ffd8c52" translate="yes" xml:space="preserve">
          <source>The last characters will be replaced with the &lt;code&gt;:omission&lt;/code&gt; string (defaults to &amp;ldquo;&amp;hellip;&amp;rdquo;):</source>
          <target state="translated">마지막 문자는 &lt;code&gt;:omission&lt;/code&gt; 문자열 로 대체됩니다 (기본값은&amp;ldquo;&amp;hellip;&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="5b1fbe78e9957e7cf09f70c95db9866dfc8c504c" translate="yes" xml:space="preserve">
          <source>The last line ought to save the through record (a &lt;code&gt;Tagging&lt;/code&gt;). This will only work if the &lt;code&gt;:inverse_of&lt;/code&gt; is set:</source>
          <target state="translated">마지막 줄은 통과 기록 ( &lt;code&gt;Tagging&lt;/code&gt; ) 을 저장해야합니다 . &lt;code&gt;:inverse_of&lt;/code&gt; 가 설정된 경우에만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="67a572e784d49a5e26efa0baf5210771e08bc0d2" translate="yes" xml:space="preserve">
          <source>The last point is easily explained with some enumerables:</source>
          <target state="translated">마지막 요점은 몇 가지 열거 형으로 쉽게 설명됩니다.</target>
        </trans-unit>
        <trans-unit id="6bf06164b55dbf97e284223c0efd4152256ea1e6" translate="yes" xml:space="preserve">
          <source>The last point is particularly worth comparing for some enumerables:</source>
          <target state="translated">마지막 요점은 일부 열거 형을 비교할 때 특히 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c184c4cc81fa679b5807f802db648819174c0a80" translate="yes" xml:space="preserve">
          <source>The last three methods are required in your object for &lt;code&gt;Errors&lt;/code&gt; to be able to generate error messages correctly and also handle multiple languages. Of course, if you extend your object with &lt;code&gt;ActiveModel::Translation&lt;/code&gt; you will not need to implement the last two. Likewise, using &lt;code&gt;ActiveModel::Validations&lt;/code&gt; will handle the validation related methods for you.</source>
          <target state="translated">&lt;code&gt;Errors&lt;/code&gt; 가 오류 메시지를 올바르게 생성하고 여러 언어를 처리하려면 개체에 마지막 세 가지 방법이 필요 합니다. 물론 &lt;code&gt;ActiveModel::Translation&lt;/code&gt; 을 사용하여 개체를 확장 하면 마지막 두 개를 구현할 필요가 없습니다. 마찬가지로 &lt;code&gt;ActiveModel::Validations&lt;/code&gt; 를 사용하면 유효성 검사 관련 메서드를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="97564964a74572c208e8ddbae7b14e004f054ff5" translate="yes" xml:space="preserve">
          <source>The last two assume that &lt;code&gt;&quot;foo&quot;.camelize&lt;/code&gt; returns &amp;ldquo;Foo&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b2c402c42a4bd00dbe048a89ca0f4f2119a696" translate="yes" xml:space="preserve">
          <source>The last two assume that &lt;code&gt;&quot;foo/bar&quot;.camelize&lt;/code&gt; returns &amp;ldquo;Foo::Bar&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d4583e92db9c0607227e88af967aeb5072f75c" translate="yes" xml:space="preserve">
          <source>The latter is a shortcut for:</source>
          <target state="translated">후자는 다음에 대한 바로 가기입니다.</target>
        </trans-unit>
        <trans-unit id="d60eb064146a6c7d8808535fb46ffe1d06c0ef35" translate="yes" xml:space="preserve">
          <source>The layout will be rendered together with the partial for each item in the collection. The current object and object_counter variables will be available in the layout as well, the same way they are within the partial.</source>
          <target state="translated">레이아웃은 컬렉션의 각 항목에 대한 부분과 함께 렌더링됩니다. 현재 object 및 object_counter 변수는 부분 내에서와 같은 방식으로 레이아웃에서도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f284415c6d146c7afcb0672e6e0f0abf85ffd823" translate="yes" xml:space="preserve">
          <source>The library as a whole can be accessed in the application manifest like so:</source>
          <target state="translated">다음과 같이 애플리케이션 매니페스트에서 라이브러리 전체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fba58133a93884c30ef1d3cc05d18c16fa410026" translate="yes" xml:space="preserve">
          <source>The life cycle of Active Record objects.</source>
          <target state="translated">활성 레코드 개체의 수명주기</target>
        </trans-unit>
        <trans-unit id="92a217a341fa19e51932070fc99d9da0f3f4d7cb" translate="yes" xml:space="preserve">
          <source>The link looks innocent to visitors, but when it's clicked, it will execute the JavaScript function &quot;exploit_code&quot; or any other JavaScript the attacker provides.</source>
          <target state="translated">링크는 방문자에게 무해한 것으로 보이지만 클릭하면 JavaScript 기능 &quot;exploit_code&quot;또는 공격자가 제공하는 다른 JavaScript가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="140864c4a27c61fd406b6f614287fbce60f18f97" translate="yes" xml:space="preserve">
          <source>The list of columns names the model should ignore. Ignored columns won't have attribute accessors defined, and won't be referenced in SQL queries.</source>
          <target state="translated">모델이 무시해야하는 열 이름 목록입니다. 무시 된 열에는 속성 접근자가 정의되어 있지 않으며 SQL 쿼리에서 참조되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e01fcb5edebcaa447ba52d13d4044f5a0666630b" translate="yes" xml:space="preserve">
          <source>The load path must be specified before any translations are looked up. To change the default locale from an initializer instead of &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">변환을 조회하기 전에로드 경로를 지정해야합니다. &lt;code&gt;config/application.rb&lt;/code&gt; 대신 초기화 프로그램 에서 기본 로케일을 변경하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="b91abe0a3bab1667a08a85ecc6e8da70adbd94e0" translate="yes" xml:space="preserve">
          <source>The local variables passed to sub templates can be accessed as a hash using the &lt;code&gt;local_assigns&lt;/code&gt; hash. This lets you access the variables as:</source>
          <target state="translated">하위 템플릿에 전달 된 로컬 변수는 &lt;code&gt;local_assigns&lt;/code&gt; 해시를 사용하여 해시로 액세스 할 수 있습니다 . 이를 통해 다음과 같이 변수에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2dceed55b6b0e02bd26ebf3baea2208a19abe67" translate="yes" xml:space="preserve">
          <source>The locale can be either set pseudo-globally to &lt;code&gt;I18n.locale&lt;/code&gt; (which uses &lt;code&gt;Thread.current&lt;/code&gt; like, e.g., &lt;code&gt;Time.zone&lt;/code&gt;) or can be passed as an option to &lt;code&gt;#translate&lt;/code&gt; and &lt;code&gt;#localize&lt;/code&gt;.</source>
          <target state="translated">로케일은 의사 전역으로 &lt;code&gt;I18n.locale&lt;/code&gt; ( 예 : &lt;code&gt;Time.zone&lt;/code&gt; 과 같은 &lt;code&gt;Thread.current&lt;/code&gt; 사용 )으로 설정하거나 &lt;code&gt;#translate&lt;/code&gt; 및 &lt;code&gt;#localize&lt;/code&gt; 옵션으로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="413c8092d1383ea347a5974fbaadfa780f3120e9" translate="yes" xml:space="preserve">
          <source>The locale can be set in an &lt;code&gt;around_action&lt;/code&gt; in the &lt;code&gt;ApplicationController&lt;/code&gt;:</source>
          <target state="translated">로케일은 &lt;code&gt;ApplicationController&lt;/code&gt; 의 &lt;code&gt;around_action&lt;/code&gt; 에서 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="daf31176920b1d84600a05b4b96e3cdf806b6a98" translate="yes" xml:space="preserve">
          <source>The locale can be set using one of many different approaches.</source>
          <target state="translated">로케일은 다양한 방법 중 하나를 사용하여 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dacee22f44c5ce441593543b2c1e7a3944349db1" translate="yes" xml:space="preserve">
          <source>The locale is an &lt;em&gt;obvious&lt;/em&gt; part of the URL.</source>
          <target state="translated">로케일은 URL 의 &lt;em&gt;명백한&lt;/em&gt; 부분입니다.</target>
        </trans-unit>
        <trans-unit id="7cbd4a2a8191fc3188f26e69e32667e5d3e6d197" translate="yes" xml:space="preserve">
          <source>The log files on &lt;a href=&quot;http://www.attacker.com&quot;&gt;www.attacker.com&lt;/a&gt; will read like this:</source>
          <target state="translated">&lt;a href=&quot;http://www.attacker.com&quot;&gt;www.attacker.com&lt;/a&gt; 의 로그 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cc00365603b4266cf1c98299376d51ed6a9302f8" translate="yes" xml:space="preserve">
          <source>The lookup in this case for test_unit as input is:</source>
          <target state="translated">이 경우 입력으로 test_unit에 대한 조회는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dc77ccb96283466ad3dd5c3db6e697992a0f4424" translate="yes" xml:space="preserve">
          <source>The lookup order for an &lt;code&gt;admin/products#index&lt;/code&gt; action will be:</source>
          <target state="translated">&lt;code&gt;admin/products#index&lt;/code&gt; 작업 의 조회 순서 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="361ee9d224498cc085910e79d5715c8d5a8243a4" translate="yes" xml:space="preserve">
          <source>The loop is set up in regular embedding tags &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt;, and the name is written using the output embedding tag &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt;. Note that this is not just a usage suggestion. Regular output functions like print or puts won't work with &lt;code&gt;ERB&lt;/code&gt; templates. So this would be wrong:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89708913768e17e0f4e9ebf21fe3c90dedbbdee1" translate="yes" xml:space="preserve">
          <source>The loop is set up using regular embedding tags (&lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt;) and the name is inserted using the output embedding tags (&lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt;). Note that this is not just a usage suggestion: regular output functions such as &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;puts&lt;/code&gt; won't be rendered to the view with ERB templates. So this would be wrong:</source>
          <target state="translated">루프는 일반 임베드 태그 ( &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; )를 사용하여 설정되고 이름은 출력 임베드 태그 ( &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; )를 사용하여 삽입됩니다 . 이것은 사용법 제안이 아니라 &lt;code&gt;print&lt;/code&gt; 및 &lt;code&gt;puts&lt;/code&gt; 와 같은 일반 출력 함수 는 ERB 템플릿을 사용하여 뷰에 렌더링되지 않습니다. 따라서 이것은 잘못된 것입니다.</target>
        </trans-unit>
        <trans-unit id="dc30761df747a5ac678de0e1485ab435952394e1" translate="yes" xml:space="preserve">
          <source>The loop is setup in regular embedding tags &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt;, and the name is written using the output embedding tag &lt;code&gt;&amp;lt;%=
%&amp;gt;&lt;/code&gt;. Note that this is not just a usage suggestion. Regular output functions like print or puts won't work with ERB templates. So this would be wrong:</source>
          <target state="translated">루프는 일반 임베드 태그 &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; 에 설정되며 이름은 출력 임베드 태그 &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; 사용하여 작성됩니다 . 이것은 단지 사용 제안이 아닙니다. 인쇄 또는 넣기와 같은 일반 출력 기능은 ERB 템플릿에서 작동하지 않습니다. 따라서 이것은 잘못된 것입니다.</target>
        </trans-unit>
        <trans-unit id="60c1c080776c32f16ee80456ec4655445a163299" translate="yes" xml:space="preserve">
          <source>The macro &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-attr_internal&quot;&gt;&lt;code&gt;attr_internal&lt;/code&gt;&lt;/a&gt; is a synonym for &lt;code&gt;attr_internal_accessor&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b359cd9a1a8a4f6521d576bd7487d6e3b867cc80" translate="yes" xml:space="preserve">
          <source>The macro &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-delegate&quot;&gt;&lt;code&gt;delegate&lt;/code&gt;&lt;/a&gt; offers an easy way to forward methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4782d45cb3bff384195fc3fa74f6ae6e493a63ea" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;attr_internal&lt;/code&gt; is a synonym for &lt;code&gt;attr_internal_accessor&lt;/code&gt;:</source>
          <target state="translated">매크로 &lt;code&gt;attr_internal&lt;/code&gt; 는 동의어입니다 &lt;code&gt;attr_internal_accessor&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a2f7c6d14cf5071e8ad6bb4bd27649a2b165b18f" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;delegate&lt;/code&gt; offers an easy way to forward methods.</source>
          <target state="translated">매크로 &lt;code&gt;delegate&lt;/code&gt; 는 메서드를 전달하는 쉬운 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="415498318beba7b40f9b5611af8461964ca6a83e" translate="yes" xml:space="preserve">
          <source>The macro receives one or more method names (specified as symbols or strings) and the name of the target object via the &lt;code&gt;:to&lt;/code&gt; option (also a symbol or string).</source>
          <target state="translated">매크로는 &lt;code&gt;:to&lt;/code&gt; 옵션 (기호 또는 문자열) 을 통해 하나 이상의 메소드 이름 (기호 또는 문자열로 지정됨)과 대상 객체의 이름을 받습니다.</target>
        </trans-unit>
        <trans-unit id="60baf372c6c437b91d26d4adf2d9c721e5ed9c08" translate="yes" xml:space="preserve">
          <source>The macro-style class methods can also receive a block. Consider using this style if the code inside your block is so short that it fits in a single line. For example, you could send metrics for every job enqueued:</source>
          <target state="translated">매크로 스타일 클래스 메서드는 블록을받을 수도 있습니다. 블록 내부의 코드가 너무 짧아 한 줄에 들어가는 경우이 스타일을 사용하십시오. 예를 들어, 대기중인 모든 작업에 대한 메트릭을 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae8d13b0e4b30afca687a27a2a6bcee77b82e1f5" translate="yes" xml:space="preserve">
          <source>The macro-style class methods can also receive a block. Consider using this style if the code inside your block is so short that it fits in a single line:</source>
          <target state="translated">매크로 스타일 클래스 메서드는 블록을받을 수도 있습니다. 블록 내부의 코드가 너무 짧아 한 줄에 들어가는 경우이 스타일을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="62a5b4baa352f58f0f7825e54ea2087fe5908668" translate="yes" xml:space="preserve">
          <source>The macros &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_reader&quot;&gt;&lt;code&gt;cattr_reader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_writer&quot;&gt;&lt;code&gt;cattr_writer&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_accessor&quot;&gt;&lt;code&gt;cattr_accessor&lt;/code&gt;&lt;/a&gt; are analogous to their &lt;code&gt;attr_*&lt;/code&gt; counterparts but for classes. They initialize a class variable to &lt;code&gt;nil&lt;/code&gt; unless it already exists, and generate the corresponding class methods to access it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87afced873ca87f9a61f091f800f32b8bc8f5a43" translate="yes" xml:space="preserve">
          <source>The macros &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_reader&quot;&gt;&lt;code&gt;mattr_reader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_writer&quot;&gt;&lt;code&gt;mattr_writer&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_accessor&quot;&gt;&lt;code&gt;mattr_accessor&lt;/code&gt;&lt;/a&gt; are the same as the &lt;code&gt;cattr_*&lt;/code&gt; macros defined for class. In fact, the &lt;code&gt;cattr_*&lt;/code&gt; macros are just aliases for the &lt;code&gt;mattr_*&lt;/code&gt; macros. Check &lt;a href=&quot;#class-attributes&quot;&gt;Class Attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf8a2a68d5bb7d9bdce0e3db1b7396a5f8c4dbe" translate="yes" xml:space="preserve">
          <source>The macros &lt;code&gt;cattr_reader&lt;/code&gt;, &lt;code&gt;cattr_writer&lt;/code&gt;, and &lt;code&gt;cattr_accessor&lt;/code&gt; are analogous to their &lt;code&gt;attr_*&lt;/code&gt; counterparts but for classes. They initialize a class variable to &lt;code&gt;nil&lt;/code&gt; unless it already exists, and generate the corresponding class methods to access it:</source>
          <target state="translated">&lt;code&gt;cattr_reader&lt;/code&gt; , &lt;code&gt;cattr_writer&lt;/code&gt; 및 &lt;code&gt;cattr_accessor&lt;/code&gt; 매크로 는 &lt;code&gt;attr_*&lt;/code&gt; 와 유사하지만 클래스 용입니다. 클래스 변수가 존재하지 않는 한 클래스 변수를 &lt;code&gt;nil&lt;/code&gt; 로 초기화 하고 해당 클래스 메소드를 생성하여 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="75c1b4fe1ccf8d7f2c382dea52c838eafc63998f" translate="yes" xml:space="preserve">
          <source>The macros &lt;code&gt;mattr_reader&lt;/code&gt;, &lt;code&gt;mattr_writer&lt;/code&gt;, and &lt;code&gt;mattr_accessor&lt;/code&gt; are the same as the &lt;code&gt;cattr_*&lt;/code&gt; macros defined for class. In fact, the &lt;code&gt;cattr_*&lt;/code&gt; macros are just aliases for the &lt;code&gt;mattr_*&lt;/code&gt; macros. Check &lt;a href=&quot;#class-attributes&quot;&gt;Class Attributes&lt;/a&gt;.</source>
          <target state="translated">매크로는 &lt;code&gt;mattr_reader&lt;/code&gt; , &lt;code&gt;mattr_writer&lt;/code&gt; 을 하고 &lt;code&gt;mattr_accessor&lt;/code&gt; 과 동일 &lt;code&gt;cattr_*&lt;/code&gt; 매크로는 클래스에 대해 정의. 실제로 &lt;code&gt;cattr_*&lt;/code&gt; 매크로는 mattr_ * 매크로의 별명 &lt;code&gt;mattr_*&lt;/code&gt; 입니다. &lt;a href=&quot;#class-attributes&quot;&gt;클래스 속성&lt;/a&gt; 확인 .</target>
        </trans-unit>
        <trans-unit id="58b4dccf4abf64be6b0a0ec46a36c74305dc1844" translate="yes" xml:space="preserve">
          <source>The main body of the view will always render into the unnamed &lt;code&gt;yield&lt;/code&gt;. To render content into a named &lt;code&gt;yield&lt;/code&gt;, you use the &lt;code&gt;content_for&lt;/code&gt; method.</source>
          <target state="translated">뷰의 본체는 항상 명명되지 않은 &lt;code&gt;yield&lt;/code&gt; 로 렌더링됩니다 . 컨텐츠를 이름 지정된 &lt;code&gt;yield&lt;/code&gt; 로 렌더링하려면 &lt;code&gt;content_for&lt;/code&gt; 메소드 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c79154cc310f99ec2631747409f4048ac004be4c" translate="yes" xml:space="preserve">
          <source>The main difference from &lt;code&gt;belongs_to&lt;/code&gt; is that the link column &lt;code&gt;supplier_id&lt;/code&gt; is located in the other table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a300fdd5f24e0f35d7ec91006d771d21fa00b32" translate="yes" xml:space="preserve">
          <source>The main form helper is &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with&quot;&gt;&lt;code&gt;form_with&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f6a395f84dfa52f266c952a76eb19193188b76" translate="yes" xml:space="preserve">
          <source>The main form helper is &lt;code&gt;form_with&lt;/code&gt;.</source>
          <target state="translated">기본 폼 헬퍼는 &lt;code&gt;form_with&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7fc515176450fdd7cbfab7c1b8954dc09f9c2dce" translate="yes" xml:space="preserve">
          <source>The main method that creates the message and renders the email templates. There are two ways to call this method, with a block, or without a block.</source>
          <target state="translated">메시지를 작성하고 이메일 템플리트를 렌더링하는 기본 방법입니다. 블록을 사용하거나 사용하지 않고이 메소드를 호출하는 방법에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="495929d2ad1e03b5a3e61a6dfafb4d72fa178b9c" translate="yes" xml:space="preserve">
          <source>The main methods to call are &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;exist?&lt;/code&gt;, and &lt;code&gt;fetch&lt;/code&gt;. The fetch method takes a block and will either return an existing value from the cache, or evaluate the block and write the result to the cache if no value exists.</source>
          <target state="translated">호출 할 주요 메소드는 &lt;code&gt;read&lt;/code&gt; , &lt;code&gt;write&lt;/code&gt; , &lt;code&gt;delete&lt;/code&gt; 이며 &lt;code&gt;exist?&lt;/code&gt; , &lt;code&gt;fetch&lt;/code&gt; . fetch 메서드는 블록을 가져 와서 캐시에서 기존 값을 반환하거나 값이 없으면 블록을 평가하여 결과를 캐시에 씁니다.</target>
        </trans-unit>
        <trans-unit id="14c39f5026611e3921bac887dbcc489606e1d7f4" translate="yes" xml:space="preserve">
          <source>The main objective of most attackers is to make money. The underground prices for stolen bank login accounts range from 0.5%-10% of account balance, $0.5-$30 for credit card numbers ($20-$60 with full details), $0.1-$1.5 for identities (Name, SSN &amp;amp; DOB), $20-$50 for retailer accounts, and $6-$10 for cloud service provider accounts, according to the &lt;a href=&quot;https://www.symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf&quot;&gt;Symantec Internet Security Threat Report (2017)&lt;/a&gt;.</source>
          <target state="translated">대부분의 공격자의 주요 목표는 돈을 버는 것입니다. 도난당한 은행 로그인 계정의 지하 가격은 계좌 잔고의 0.5 % -10 %, 신용 카드 번호는 $ 0.5- $ 30 (자세한 내용은 $ 20- $ 60), 신원은 $ 0.1- $ 1.5 (이름, SSN &amp;amp; DOB), $ 20- &lt;a href=&quot;https://www.symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf&quot;&gt;Symantec Internet Security Threat Report (2017)&lt;/a&gt; 에 따르면 소매 업체 계정은 $ 50, 클라우드 서비스 제공 업체 계정은 $ 6- $ 10입니다 .</target>
        </trans-unit>
        <trans-unit id="5f0f4d1e05aeb9d77de10ffcf78f1778658c85b3" translate="yes" xml:space="preserve">
          <source>The main objective of most attackers is to make money. The underground prices for stolen bank login accounts range from 0.5%-10% of account balance, $0.5-$30 for credit card numbers ($20-$60 with full details), $0.1-$1.5 for identities (Name, SSN, and DOB), $20-$50 for retailer accounts, and $6-$10 for cloud service provider accounts, according to the &lt;a href=&quot;https://www.symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf&quot;&gt;Symantec Internet Security Threat Report (2017)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21599ae78681ea4faf08ff08a657288956a915b6" translate="yes" xml:space="preserve">
          <source>The main point is to ensure that all Rails apps will have a job infrastructure in place. We can then have framework features and other gems build on top of that, without having to worry about API differences between various job runners such as Delayed Job and Resque. Picking your queuing backend becomes more of an operational concern, then. And you'll be able to switch between them without having to rewrite your jobs.</source>
          <target state="translated">요점은 모든 Rails 앱이 작업 인프라를 갖추도록하는 것입니다. 그런 다음 Delayed Job 및 Resque와 같은 다양한 작업 러너 간의 API 차이점에 대해 걱정할 필요없이 프레임 워크 기능 및 기타 gem을 빌드 할 수 있습니다. 그러면 큐 백엔드를 선택하는 것이 운영상의 문제가됩니다. 또한 작업을 다시 작성하지 않고도 전환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71619b344378d256ebf3fdb56f4d5efbf0440f8d" translate="yes" xml:space="preserve">
          <source>The main purpose of Rails' migration feature is to issue commands that modify the schema using a consistent process. Migrations can also be used to add or modify data. This is useful in an existing database that can't be destroyed and recreated, such as a production database.</source>
          <target state="translated">Rails의 마이그레이션 기능의 주요 목적은 일관된 프로세스를 사용하여 스키마를 수정하는 명령을 실행하는 것입니다. 마이그레이션을 사용하여 데이터를 추가하거나 수정할 수도 있습니다. 프로덕션 데이터베이스와 같이 파괴하거나 다시 만들 수없는 기존 데이터베이스에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9f79a2a93cfc18ecc7090835c969528751a32baa" translate="yes" xml:space="preserve">
          <source>The matcher (and other members of the precompile array; see below) is applied to final compiled file names. This means anything that compiles to JS/CSS is excluded, as well as raw JS/CSS files; for example, &lt;code&gt;.coffee&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt; files are &lt;strong&gt;not&lt;/strong&gt; automatically included as they compile to JS/CSS.</source>
          <target state="translated">매처 (및 프리 컴파일 배열의 다른 멤버, 아래 참조)는 최종 컴파일 된 파일 이름에 적용됩니다. 이는 원시 JS / CSS 파일뿐만 아니라 JS / CSS로 컴파일되는 모든 것이 제외됨을 의미합니다. 예를 들어 &lt;code&gt;.coffee&lt;/code&gt; 및 &lt;code&gt;.scss&lt;/code&gt; 파일은 JS / CSS로 컴파일 할 때 자동으로 포함 &lt;strong&gt;되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="5a5326dc8382eb380da680fd49ebf42711f48794" translate="yes" xml:space="preserve">
          <source>The maximum length of a password is 72 (required by &lt;code&gt;bcrypt&lt;/code&gt; on which ActiveModel::SecurePassword depends)</source>
          <target state="translated">암호의 최대 길이는 72입니다 ( ActiveModel :: SecurePassword가 의존하는 &lt;code&gt;bcrypt&lt;/code&gt; 에 필요 ).</target>
        </trans-unit>
        <trans-unit id="efc00f941fcc8767657069623c7b30577861e458" translate="yes" xml:space="preserve">
          <source>The message identifies which template is missing. In this case, it's the &lt;code&gt;articles/new&lt;/code&gt; template. Rails will first look for this template. If not found, then it will attempt to load a template called &lt;code&gt;application/new&lt;/code&gt;, because the &lt;code&gt;ArticlesController&lt;/code&gt; inherits from &lt;code&gt;ApplicationController&lt;/code&gt;.</source>
          <target state="translated">이 메시지는 누락 된 템플릿을 식별합니다. 이 경우 &lt;code&gt;articles/new&lt;/code&gt; 템플릿입니다. Rails는 먼저이 템플릿을 찾습니다. 찾을 수없는 경우 &lt;code&gt;ArticlesController&lt;/code&gt; 는 &lt;code&gt;ApplicationController&lt;/code&gt; 에서 상속 하므로 &lt;code&gt;application/new&lt;/code&gt; 라는 템플리트를로드하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="47bc5e7f0a3a4de0af0ba74ae3f9825d3afcaeb3" translate="yes" xml:space="preserve">
          <source>The message is signed with the &lt;code&gt;MessageVerifier&lt;/code&gt;'s secret. Returns Base64-encoded message joined with the generated signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687ac77baf1c88b97b2fe37f68e7a236164e70b0" translate="yes" xml:space="preserve">
          <source>The message is signed with the &lt;code&gt;MessageVerifier&lt;/code&gt;'s secret. Without knowing the secret, the original value cannot be extracted from the message.</source>
          <target state="translated">메시지는 &lt;code&gt;MessageVerifier&lt;/code&gt; 의 비밀로 서명됩니다 . 비밀을 모르면 메시지에서 원래 값을 추출 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="093a0fd1eecb6d23d318f6fc14f9ed0c2e8da44c" translate="yes" xml:space="preserve">
          <source>The messages are available in the @logger instance, which is a logger with limited powers (it actually does not send anything to your output), and you can collect them doing @logger.logged(level), where level is the level used in logging, like info, debug, warn and so on.</source>
          <target state="translated">@logger 인스턴스에서 메시지를 사용할 수 있습니다.이 기능은 전력이 제한된 로거 (실제로는 출력으로 아무것도 보내지 않습니다)이며 @ logger.logged (level)를 사용하여 수집 할 수 있습니다. 여기서 level은 정보, 디버그, 경고 등과 같은 로깅.</target>
        </trans-unit>
        <trans-unit id="b612ae6689da6e5fbb2f1fd93e9a17cebb56a72f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-c-wrap&quot;&gt;&lt;code&gt;Array.wrap&lt;/code&gt;&lt;/a&gt; wraps its argument in an array unless it is already an array (or array-like).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c7986875aada54039f9f866dce9eaf81b9b726" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-deep_dup&quot;&gt;&lt;code&gt;Array#deep_dup&lt;/code&gt;&lt;/a&gt; duplicates itself and all objects inside recursively with the Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Array#map&lt;/code&gt;, sending &lt;code&gt;deep_dup&lt;/code&gt; method to each object inside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1083861e0acfb7a7f8c678f8a1acde83bccc8a4" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-excluding&quot;&gt;&lt;code&gt;excluding&lt;/code&gt;&lt;/a&gt; returns a copy of the Array excluding the specified elements. This is an optimization of &lt;code&gt;Enumerable#excluding&lt;/code&gt; that uses &lt;code&gt;Array#-&lt;/code&gt; instead of &lt;code&gt;Array#reject&lt;/code&gt; for performance reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5ab031b7e50d2e96e0a74ffe9af2b6b2712219" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-extract-21&quot;&gt;&lt;code&gt;extract!&lt;/code&gt;&lt;/a&gt; removes and returns the elements for which the block returns a true value. If no block is given, an Enumerator is returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1baa36c974bc804921431457c1c6c6a4be330e0f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-in_groups&quot;&gt;&lt;code&gt;in_groups&lt;/code&gt;&lt;/a&gt; splits an array into a certain number of groups. The method returns an array with the groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d79e4eef123985b75e731ceb60d98228c7cbf62" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-in_groups_of&quot;&gt;&lt;code&gt;in_groups_of&lt;/code&gt;&lt;/a&gt; splits an array into consecutive groups of a certain size. It returns an array with the groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece220193b948f6451f39d1479e13638b20bc0a7" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-including&quot;&gt;&lt;code&gt;including&lt;/code&gt;&lt;/a&gt; returns a new array that includes the passed elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc7dad9a9aca6e185fba5588ba639a3bc736351" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; divides an array by a separator and returns the resulting chunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c401983d9066d49e62ff263b77010081bab58b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_formatted_s&quot;&gt;&lt;code&gt;to_formatted_s&lt;/code&gt;&lt;/a&gt; acts like &lt;code&gt;to_s&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0308bc34dfdcb2c2be01608f4664521f58109a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_sentence&quot;&gt;&lt;code&gt;to_sentence&lt;/code&gt;&lt;/a&gt; turns an array into a string containing a sentence that enumerates its items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d753bd10bf8fe0a2e8c39d13af5c915e0223f06" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_xml&quot;&gt;&lt;code&gt;to_xml&lt;/code&gt;&lt;/a&gt; returns a string containing an XML representation of its receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c897ff212d2d6e5e632ed0bce056d6c3f7ff27f5" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Class.html#method-i-class_attribute&quot;&gt;&lt;code&gt;class_attribute&lt;/code&gt;&lt;/a&gt; declares one or more inheritable class attributes that can be overridden at any level down the hierarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8ebb5b1ac4f9cf2151a625cbb168b3204d93d6" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-ago&quot;&gt;&lt;code&gt;ago&lt;/code&gt;&lt;/a&gt; receives a number of seconds as argument and returns a timestamp those many seconds ago from midnight:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bcee94edc7af7af7187cdc1c4002a40197bcdc" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-beginning_of_day&quot;&gt;&lt;code&gt;beginning_of_day&lt;/code&gt;&lt;/a&gt; returns a timestamp at the beginning of the day (00:00:00):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039fc540d1c85df727eee6b7666d9a480d776c99" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-change&quot;&gt;&lt;code&gt;change&lt;/code&gt;&lt;/a&gt; allows you to get a new date which is the same as the receiver except for the given year, month, or day:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a04133f50a7e8dee41d24a8c412f407c8402448" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-end_of_day&quot;&gt;&lt;code&gt;end_of_day&lt;/code&gt;&lt;/a&gt; returns a timestamp at the end of the day (23:59:59):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0610126065795c03431aa3b00277477ca54fbf" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-all_day&quot;&gt;&lt;code&gt;all_day&lt;/code&gt;&lt;/a&gt; returns a range representing the whole day of the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998250f2fb6bd070c9087e3c2d373d324896049e" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-next_week&quot;&gt;&lt;code&gt;next_week&lt;/code&gt;&lt;/a&gt; receives a symbol with a day name in English (default is the thread local &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-c-beginning_of_week&quot;&gt;&lt;code&gt;Date.beginning_of_week&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;config.beginning_of_week&lt;/code&gt;, or &lt;code&gt;:monday&lt;/code&gt;) and it returns the date corresponding to that day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a8292161baf30cfe01fcc1081d24d9ea2ac191" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-prev_week&quot;&gt;&lt;code&gt;prev_week&lt;/code&gt;&lt;/a&gt; is analogous:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78efcc4bbe0421096dae65f032b7093e39e2f67" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-weeks_ago&quot;&gt;&lt;code&gt;weeks_ago&lt;/code&gt;&lt;/a&gt; works analogously for weeks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69dd34154dc2248f2543c71ee8b402f5698765a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-years_ago&quot;&gt;&lt;code&gt;years_ago&lt;/code&gt;&lt;/a&gt; receives a number of years and returns the same date those many years ago:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2beaa804c79a1634aac18973a0e2f9c9f66ddfa3" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-beginning_of_hour&quot;&gt;&lt;code&gt;beginning_of_hour&lt;/code&gt;&lt;/a&gt; returns a timestamp at the beginning of the hour (hh:00:00):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bdff82609af37ff84c3cfd8409014733ca8a8e" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-beginning_of_minute&quot;&gt;&lt;code&gt;beginning_of_minute&lt;/code&gt;&lt;/a&gt; returns a timestamp at the beginning of the minute (hh:mm:00):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a870bfad322c3180cf0ec3330dd1a5debe159c" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-change&quot;&gt;&lt;code&gt;change&lt;/code&gt;&lt;/a&gt; allows you to get a new datetime which is the same as the receiver except for the given options, which may include &lt;code&gt;:year&lt;/code&gt;, &lt;code&gt;:month&lt;/code&gt;, &lt;code&gt;:day&lt;/code&gt;, &lt;code&gt;:hour&lt;/code&gt;, &lt;code&gt;:min&lt;/code&gt;, &lt;code&gt;:sec&lt;/code&gt;, &lt;code&gt;:offset&lt;/code&gt;, &lt;code&gt;:start&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d673cf2b5b30a16b5b74d7a095ccbb4ff056d438" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-end_of_hour&quot;&gt;&lt;code&gt;end_of_hour&lt;/code&gt;&lt;/a&gt; returns a timestamp at the end of the hour (hh:59:59):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81a306583738eb9cb77cb80392e2c36cb478eeb" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-end_of_minute&quot;&gt;&lt;code&gt;end_of_minute&lt;/code&gt;&lt;/a&gt; returns a timestamp at the end of the minute (hh:mm:59):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f76fda555ef0678ba34cbf7845ada96b332bf68" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-seconds_since_midnight&quot;&gt;&lt;code&gt;seconds_since_midnight&lt;/code&gt;&lt;/a&gt; returns the number of seconds since midnight:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28216d4001ab19eedcabbf50fa36d8544027988" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-utc&quot;&gt;&lt;code&gt;utc&lt;/code&gt;&lt;/a&gt; gives you the same datetime in the receiver expressed in UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b80281bb6fb3d4596fcd7b362d6ecddd2052fc4" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-excluding&quot;&gt;&lt;code&gt;excluding&lt;/code&gt;&lt;/a&gt; returns a copy of an enumerable with the specified elements removed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a09a352614ac83f88a19a2b4fbddd78472bda89" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-including&quot;&gt;&lt;code&gt;including&lt;/code&gt;&lt;/a&gt; returns a new enumerable that includes the passed elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6d0cfdbebf0ab3c55fdcef586069d11f968776" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-index_by&quot;&gt;&lt;code&gt;index_by&lt;/code&gt;&lt;/a&gt; generates a hash with the elements of an enumerable indexed by some key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac63c0f10ceee6988f41a4c0e8a3c0c22f173476" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-index_with&quot;&gt;&lt;code&gt;index_with&lt;/code&gt;&lt;/a&gt; generates a hash with the elements of an enumerable as keys. The value is either a passed default or returned in a block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49039a23028677150f6fec3f16952f42c907275a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-many-3F&quot;&gt;&lt;code&gt;many?&lt;/code&gt;&lt;/a&gt; is shorthand for &lt;code&gt;collection.size &amp;gt; 1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d868e6a4eb9fce227da49b321e5cf5c7948cb8" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-pick&quot;&gt;&lt;code&gt;pick&lt;/code&gt;&lt;/a&gt; extracts the given key from the first element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067cb0f562d830d4d67135591127ca2f21f24fed" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-pluck&quot;&gt;&lt;code&gt;pluck&lt;/code&gt;&lt;/a&gt; extracts the given key from each element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5a526849a27f31a1962e9f3c08dd81c0bea1df" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt; adds the elements of an enumerable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9ca080cc58756a3d47a0ed20beb1ffda36552b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-assert_valid_keys&quot;&gt;&lt;code&gt;assert_valid_keys&lt;/code&gt;&lt;/a&gt; receives an arbitrary number of arguments, and checks whether the receiver has any key outside that list. If it does &lt;code&gt;ArgumentError&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39fb3197db6c4eca6513a55e9e4170d984b1c8f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_dup&quot;&gt;&lt;code&gt;Hash#deep_dup&lt;/code&gt;&lt;/a&gt; duplicates itself and all keys and values inside recursively with Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Enumerator#each_with_object&lt;/code&gt; with sending &lt;code&gt;deep_dup&lt;/code&gt; method to each pair inside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1c7ff2c42fcd6ffca4211ce8c4aafdbc8ca006" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_merge-21&quot;&gt;&lt;code&gt;deep_merge!&lt;/code&gt;&lt;/a&gt; performs a deep merge in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db56b2fbf9f7496ce388c67fa2491a432c560048" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_transform_values&quot;&gt;&lt;code&gt;deep_transform_values&lt;/code&gt;&lt;/a&gt; returns a new hash with all values converted by the block operation. This includes the values from the root hash and from all nested hashes and arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33be23ac1f32f6d9010c22340202bc130db384ee" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt; returns a hash with the keys in the argument list removed, if present:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6490dc6ca0ea2e116d9ca4eb23f948822aacf23d" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-extract-21&quot;&gt;&lt;code&gt;extract!&lt;/code&gt;&lt;/a&gt; removes and returns the key/value pairs matching the given keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fade3e9adbec811dcd25983814a9bf033e16c62f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-reverse_update&quot;&gt;&lt;code&gt;reverse_update&lt;/code&gt;&lt;/a&gt; is an alias for &lt;code&gt;reverse_merge!&lt;/code&gt;, explained above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b414153ebbc60a3b64d13a1d98835966813d9f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-slice-21&quot;&gt;&lt;code&gt;slice!&lt;/code&gt;&lt;/a&gt; replaces the hash with only the given keys and returns a hash containing the removed key/value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b46983a719de51e4d19bef825a0edcf7d848670" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-stringify_keys&quot;&gt;&lt;code&gt;stringify_keys&lt;/code&gt;&lt;/a&gt; returns a hash that has a stringified version of the keys in the receiver. It does so by sending &lt;code&gt;to_s&lt;/code&gt; to them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b9400ba7eec7cce0300dff6b1ddd2b1d82e8a1" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-symbolize_keys&quot;&gt;&lt;code&gt;symbolize_keys&lt;/code&gt;&lt;/a&gt; returns a hash that has a symbolized version of the keys in the receiver, where possible. It does so by sending &lt;code&gt;to_sym&lt;/code&gt; to them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a947f9eb3846b0bdddd07f12c282763be5d6207d" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_query&quot;&gt;&lt;code&gt;Hash#to_query&lt;/code&gt;&lt;/a&gt; accepts an optional namespace for the keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d153239a06048bedf1876d59d7c1af9d5a66c3" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_xml&quot;&gt;&lt;code&gt;to_xml&lt;/code&gt;&lt;/a&gt; returns a string containing an XML representation of its receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab0dde6e21a4d8de1002823763ee74238bd72b5" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-with_indifferent_access&quot;&gt;&lt;code&gt;with_indifferent_access&lt;/code&gt;&lt;/a&gt; returns an &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html&quot;&gt;&lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;&lt;/a&gt; out of its receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c728b859a01fd896b600648d1f5fd53efc1c894d" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-multiple_of-3F&quot;&gt;&lt;code&gt;multiple_of?&lt;/code&gt;&lt;/a&gt; tests whether an integer is multiple of the argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629496f56548980ec7d8b63ec8d54512ed656f20" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-ordinal&quot;&gt;&lt;code&gt;ordinal&lt;/code&gt;&lt;/a&gt; returns the ordinal suffix string corresponding to the receiver integer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e852fe6e316d83ad3e1d9716154d2f4fd818712" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-ordinalize&quot;&gt;&lt;code&gt;ordinalize&lt;/code&gt;&lt;/a&gt; returns the ordinal string corresponding to the receiver integer. In comparison, note that the &lt;code&gt;ordinal&lt;/code&gt; method returns &lt;strong&gt;only&lt;/strong&gt; the suffix string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7b6222edb5074fb9f1ab910e335ceeb413e25a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-module_parents&quot;&gt;&lt;code&gt;module_parents&lt;/code&gt;&lt;/a&gt; calls &lt;code&gt;module_parent&lt;/code&gt; on the receiver and upwards until &lt;code&gt;Object&lt;/code&gt; is reached. The chain is returned in an array, from bottom to top:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb93589607ae29af34d998bb5eed6ffeb493d63c" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-redefine_method&quot;&gt;&lt;code&gt;redefine_method&lt;/code&gt;&lt;/a&gt; prevents such a potential warning, removing the existing method before if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be34124f06e32daed96a1fbf94011dfc94fd3ae" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-acts_like-3F&quot;&gt;&lt;code&gt;acts_like?&lt;/code&gt;&lt;/a&gt; provides a way to check whether some class acts like some other class based on a simple convention: a class that provides the same interface as &lt;code&gt;String&lt;/code&gt; defines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e28f9efa48a8311d58b2d51671a5cff0b79b51b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-instance_values&quot;&gt;&lt;code&gt;instance_values&lt;/code&gt;&lt;/a&gt; returns a hash that maps instance variable names without &quot;@&quot; to their corresponding values. Keys are strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83778f8bb2b218390999a2216414d88765df2915" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-instance_variable_names&quot;&gt;&lt;code&gt;instance_variable_names&lt;/code&gt;&lt;/a&gt; returns an array. Each name includes the &quot;@&quot; sign.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97593ca123b5fa134e1de89a1623369dfbe38b08" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-present-3F&quot;&gt;&lt;code&gt;present?&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;code&gt;!blank?&lt;/code&gt;. This example is taken from &lt;code&gt;ActionDispatch::Http::Cache::Response&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d05db4a11b99876a5c2a16edcd12327922b2d2" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-with_options&quot;&gt;&lt;code&gt;with_options&lt;/code&gt;&lt;/a&gt; provides a way to factor out common options in a series of method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9c17b68b3afdf4396eabd741209a2dc4ba5802" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Range.html#method-i-overlaps-3F&quot;&gt;&lt;code&gt;Range#overlaps?&lt;/code&gt;&lt;/a&gt; says whether any two given ranges have non-void intersection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37eab709de9cd444dc9a168cede664380cbc58df" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Regexp.html#method-i-multiline-3F&quot;&gt;&lt;code&gt;multiline?&lt;/code&gt;&lt;/a&gt; says whether a regexp has the &lt;code&gt;/m&lt;/code&gt; flag set, that is, whether the dot matches newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25765e5be6305cd00889838f5f220713c979597a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-camelize&quot;&gt;&lt;code&gt;camelize&lt;/code&gt;&lt;/a&gt; returns its receiver in camel case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10006c76f77637b0c12c06d471a11da83918cead" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-classify&quot;&gt;&lt;code&gt;classify&lt;/code&gt;&lt;/a&gt; is the inverse of &lt;code&gt;tableize&lt;/code&gt;. It gives you the class name corresponding to a table name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a2a0f4e6205fbf9a54f41a00af597eccd4db28" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-constantize&quot;&gt;&lt;code&gt;constantize&lt;/code&gt;&lt;/a&gt; resolves the constant reference expression in its receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f370a448dc74955ff307f5132c85487f986fce2" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-dasherize&quot;&gt;&lt;code&gt;dasherize&lt;/code&gt;&lt;/a&gt; replaces the underscores in the receiver with dashes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d0cf8fdd61c1b357d02992fa1a01b5f9ac5bbc" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-foreign_key&quot;&gt;&lt;code&gt;foreign_key&lt;/code&gt;&lt;/a&gt; gives a foreign key column name from a class name. To do so it demodulizes, underscores, and adds &quot;_id&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd665bdbb2f5cfcbf0161f40c174b33f22d5b58" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-humanize&quot;&gt;&lt;code&gt;humanize&lt;/code&gt;&lt;/a&gt; tweaks an attribute name for display to end users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f7039fb2270b5e42f7ecdfcbb0befc1f15aa6b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-parameterize&quot;&gt;&lt;code&gt;parameterize&lt;/code&gt;&lt;/a&gt; normalizes its receiver in a way that can be used in pretty URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0336691ef81dccacdb120a7ca91df0c74effeb6f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-pluralize&quot;&gt;&lt;code&gt;pluralize&lt;/code&gt;&lt;/a&gt; returns the plural of its receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b6102669c6a659bf608e07041a3c518bad5567" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-remove&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; will remove all occurrences of the pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46836ff01da142902bf881767e118ccf1df1bc8" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-squish&quot;&gt;&lt;code&gt;squish&lt;/code&gt;&lt;/a&gt; strips leading and trailing whitespace, and substitutes runs of whitespace with a single space each:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c69b14879cb479c724cf35abbee1bf24245da29" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-strip_heredoc&quot;&gt;&lt;code&gt;strip_heredoc&lt;/code&gt;&lt;/a&gt; strips indentation in heredocs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc2d54e3b46414455fe4e79fb39d04443de248b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-tableize&quot;&gt;&lt;code&gt;tableize&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;underscore&lt;/code&gt; followed by &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d500c31ed587cc52ff907cedd5049f912cf7ea36" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-titleize&quot;&gt;&lt;code&gt;titleize&lt;/code&gt;&lt;/a&gt; capitalizes the words in the receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d766d4ec220da853443cfb4af23b11a7e235fbd" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate&quot;&gt;&lt;code&gt;truncate&lt;/code&gt;&lt;/a&gt; returns a copy of its receiver truncated after a given &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5cf95e1c9f81af90ce3b38f1c3f8ba6aa4cefe" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate_bytes&quot;&gt;&lt;code&gt;truncate_bytes&lt;/code&gt;&lt;/a&gt; returns a copy of its receiver truncated to at most &lt;code&gt;bytesize&lt;/code&gt; bytes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39ec5a8e52e6f9f7ec6de6443711ad7c9d8e4aa" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate_words&quot;&gt;&lt;code&gt;truncate_words&lt;/code&gt;&lt;/a&gt; returns a copy of its receiver truncated after a given number of words:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98455a7f0340463fe249c782e9664af3346ee03" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-underscore&quot;&gt;&lt;code&gt;underscore&lt;/code&gt;&lt;/a&gt; goes the other way around, from camel case to paths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32772287becf00004ac3c06bca75256d6389810" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Array#deep_dup&lt;/code&gt; duplicates itself and all objects inside recursively with Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Array#map&lt;/code&gt; with sending &lt;code&gt;deep_dup&lt;/code&gt; method to each object inside.</source>
          <target state="translated">&lt;code&gt;Array#deep_dup&lt;/code&gt; 메소드 는 Active Support 메소드 &lt;code&gt;Object#deep_dup&lt;/code&gt; 을 사용 하여 자신과 내부의 모든 오브젝트를 재귀 적으로 복제합니다 . 그것은 내부의 각 객체에 &lt;code&gt;deep_dup&lt;/code&gt; 메소드를 보내는 &lt;code&gt;Array#map&lt;/code&gt; 처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="c1e33e74fb4fd7f607ac4ec9c062ba47e1d98a83" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Array.wrap&lt;/code&gt; wraps its argument in an array unless it is already an array (or array-like).</source>
          <target state="translated">&lt;code&gt;Array.wrap&lt;/code&gt; 메소드 는 이미 배열 (또는 배열 유사)이 아닌 한 인수를 배열로 랩핑합니다.</target>
        </trans-unit>
        <trans-unit id="d6b82f431ad6d4eddf847396d46b04b6fd616ec1" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Hash#deep_dup&lt;/code&gt; duplicates itself and all keys and values inside recursively with Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Enumerator#each_with_object&lt;/code&gt; with sending &lt;code&gt;deep_dup&lt;/code&gt; method to each pair inside.</source>
          <target state="translated">&lt;code&gt;Hash#deep_dup&lt;/code&gt; 메소드 는 Active Support 메소드 &lt;code&gt;Object#deep_dup&lt;/code&gt; 을 사용하여 자체 및 모든 키와 값을 재귀 적으로 복제합니다 . 그것은 각 쌍에 &lt;code&gt;deep_dup&lt;/code&gt; 메소드를 보내는 &lt;code&gt;Enumerator#each_with_object&lt;/code&gt; each_with_object 와 같이 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="7de965296f37e83a90fa8fad4aeb58775b5f8602" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Hash#to_query&lt;/code&gt; accepts an optional namespace for the keys:</source>
          <target state="translated">&lt;code&gt;Hash#to_query&lt;/code&gt; 메소드 는 키에 대한 선택적 네임 스페이스를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="d0eeaa0bdef1015a3d295e8021c903df196a0661" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Range#overlaps?&lt;/code&gt; says whether any two given ranges have non-void intersection:</source>
          <target state="translated">&lt;code&gt;Range#overlaps?&lt;/code&gt; 방법 ? 주어진 두 범위에 비 공백 교차가 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2179f3488c189a7d1b1ae889f5df7a90d0add093" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;acts_like?&lt;/code&gt; provides a way to check whether some class acts like some other class based on a simple convention: a class that provides the same interface as &lt;code&gt;String&lt;/code&gt; defines</source>
          <target state="translated">방법 &lt;code&gt;acts_like?&lt;/code&gt; 같은 인터페이스를 제공하는 클래스 : 일부 클래스는 간단한 규칙에 따라 다른 클래스처럼 작동 여부를 확인하는 방법을 제공 &lt;code&gt;String&lt;/code&gt; 을 정의를</target>
        </trans-unit>
        <trans-unit id="3f8c125e2741bd24b350323c120868d16ec18dbf" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;advance&lt;/code&gt; advances first one month, and then one day, the result is:</source>
          <target state="translated">방법의 &lt;code&gt;advance&lt;/code&gt; 첫 달을 진행하고, 어느 날의 결과이다 :</target>
        </trans-unit>
        <trans-unit id="552f54883f3f33b594f06d41ba5b2220bba8453d" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;ago&lt;/code&gt; receives a number of seconds as argument and returns a timestamp those many seconds ago from midnight:</source>
          <target state="translated">이 방법은 &lt;code&gt;ago&lt;/code&gt; 인수로 (초)을 받고 자정부터 그 많은 초 전 타임 스탬프를 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="8f2e4acf7ddddd85645952fc4aa279e137c99b5a" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;all_day&lt;/code&gt; returns a range representing the whole day of the current time.</source>
          <target state="translated">&lt;code&gt;all_day&lt;/code&gt; 메소드 는 현재 시간의 하루 전체를 나타내는 범위를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="541b5c428abe6077b2427df44c06151cabbe2505" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;assert_valid_keys&lt;/code&gt; receives an arbitrary number of arguments, and checks whether the receiver has any key outside that white list. If it does &lt;code&gt;ArgumentError&lt;/code&gt; is raised.</source>
          <target state="translated">&lt;code&gt;assert_valid_keys&lt;/code&gt; 메소드 는 임의의 수의 인수를 수신하고 수신자가 해당 화이트리스트 외부에 키가 있는지 확인합니다. 만약 그렇다면 &lt;code&gt;ArgumentError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="91964bd2587b244f8090ac94f24f6de56fc458e7" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;beginning_of_day&lt;/code&gt; returns a timestamp at the beginning of the day (00:00:00):</source>
          <target state="translated">메소드 &lt;code&gt;beginning_of_day&lt;/code&gt; 는 하루 (0시 0분 0초)의 시작 부분에 타임 스탬프를 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="e085bbffe1ea485f880a3af6f70c393c243f7720" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;beginning_of_hour&lt;/code&gt; returns a timestamp at the beginning of the hour (hh:00:00):</source>
          <target state="translated">메소드 &lt;code&gt;beginning_of_hour&lt;/code&gt; 는 시간 (: 00 : 00 HH)의 시작 부분에 타임 스탬프를 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="f577d04c9de8bcd3e4d8ba5950192cbedbcd4c33" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;beginning_of_minute&lt;/code&gt; returns a timestamp at the beginning of the minute (hh:mm:00):</source>
          <target state="translated">메소드 &lt;code&gt;beginning_of_minute&lt;/code&gt; 은 분 (: mm : 00 HH)의 시작시에 타임 스탬프를 반환</target>
        </trans-unit>
        <trans-unit id="c36a6bddcb246413376decd5b3e385ac52a3c55d" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;camelize&lt;/code&gt; returns its receiver in camel case:</source>
          <target state="translated">&lt;code&gt;camelize&lt;/code&gt; 메소드 는 낙타의 경우 수신자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="50d58e637eefa0c2f54a8097a5a26358508ed881" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;change&lt;/code&gt; allows you to get a new date which is the same as the receiver except for the given year, month, or day:</source>
          <target state="translated">메소드 &lt;code&gt;change&lt;/code&gt; 통해 주어진 연도, 월 또는 일을 제외하고 수신자와 동일한 새 날짜를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1693ffe243f5ff35dd83e523a87b2b0e6b7ce09" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;change&lt;/code&gt; allows you to get a new datetime which is the same as the receiver except for the given options, which may include &lt;code&gt;:year&lt;/code&gt;, &lt;code&gt;:month&lt;/code&gt;, &lt;code&gt;:day&lt;/code&gt;, &lt;code&gt;:hour&lt;/code&gt;, &lt;code&gt;:min&lt;/code&gt;, &lt;code&gt;:sec&lt;/code&gt;, &lt;code&gt;:offset&lt;/code&gt;, &lt;code&gt;:start&lt;/code&gt;:</source>
          <target state="translated">메소드 &lt;code&gt;change&lt;/code&gt; 사용하면 주어진 옵션을 제외하고 수신자와 동일한 새 날짜 시간을 얻을 수 있습니다 &lt;code&gt;:year&lt;/code&gt; 여기에는 : year , &lt;code&gt;:month&lt;/code&gt; , &lt;code&gt;:day&lt;/code&gt; , &lt;code&gt;:hour&lt;/code&gt; , &lt;code&gt;:min&lt;/code&gt; , &lt;code&gt;:sec&lt;/code&gt; , &lt;code&gt;:offset&lt;/code&gt; , &lt;code&gt;:start&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c90aa7f827d4f56fea49a7ae34641b299c94c4bd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;class_attribute&lt;/code&gt; declares one or more inheritable class attributes that can be overridden at any level down the hierarchy.</source>
          <target state="translated">&lt;code&gt;class_attribute&lt;/code&gt; 메소드 는 계층의 모든 레벨에서 재정의 할 수있는 하나 이상의 상속 가능한 클래스 속성을 선언합니다.</target>
        </trans-unit>
        <trans-unit id="c9e96da64b1b8279c4e0994f0fb0a8adae7dac72" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;classify&lt;/code&gt; is the inverse of &lt;code&gt;tableize&lt;/code&gt;. It gives you the class name corresponding to a table name:</source>
          <target state="translated">&lt;code&gt;classify&lt;/code&gt; 메소드 는 &lt;code&gt;tableize&lt;/code&gt; 의 반대입니다 . 테이블 이름에 해당하는 클래스 이름을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="078c50f28bde0d9e8cd63a6c910aaaf2320cfc2f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;constantize&lt;/code&gt; resolves the constant reference expression in its receiver:</source>
          <target state="translated">&lt;code&gt;constantize&lt;/code&gt; 메소드 는 수신자의 상수 참조 표현식을 분석합니다.</target>
        </trans-unit>
        <trans-unit id="357988408dbb70c115cb0dfc7514cae03b651c01" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;dasherize&lt;/code&gt; replaces the underscores in the receiver with dashes:</source>
          <target state="translated">&lt;code&gt;dasherize&lt;/code&gt; 메소드 는 수신자의 밑줄을 대시로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="e211c70f6c4329e28772a26b56c394e16d3ce068" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;deep_merge!&lt;/code&gt; performs a deep merge in place.</source>
          <target state="translated">&lt;code&gt;deep_merge!&lt;/code&gt; 메소드 ! 깊은 병합을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="d78f3750e4c5052b90fcbd5bea5e723036a174b5" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;end_of_day&lt;/code&gt; returns a timestamp at the end of the day (23:59:59):</source>
          <target state="translated">&lt;code&gt;end_of_day&lt;/code&gt; 메소드 는 하루가 끝날 때 타임 스탬프를 리턴합니다 (23:59:59).</target>
        </trans-unit>
        <trans-unit id="d46bf9d09c3a7c7fd408440a7e9a40f95118e29f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;end_of_hour&lt;/code&gt; returns a timestamp at the end of the hour (hh:59:59):</source>
          <target state="translated">&lt;code&gt;end_of_hour&lt;/code&gt; 메소드 는 시간 종료시 타임 스탬프를 리턴합니다 (hh : 59 : 59).</target>
        </trans-unit>
        <trans-unit id="de74d561fab3abfbd50e4756cde750b0a3935f48" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;end_of_minute&lt;/code&gt; returns a timestamp at the end of the minute (hh:mm:59):</source>
          <target state="translated">&lt;code&gt;end_of_minute&lt;/code&gt; 메소드 는 분 끝에 타임 스탬프를 리턴합니다 (hh : mm : 59).</target>
        </trans-unit>
        <trans-unit id="0b221ae8dbe130744caad5199d2d97fbc76c565f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;except&lt;/code&gt; returns a hash with the keys in the argument list removed, if present:</source>
          <target state="translated">&lt;code&gt;except&lt;/code&gt; 메소드 는 존재하는 경우 인수 목록의 키가 제거 된 해시를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="aaf6f40b5a5a4af9d91c806cce7c3bbcea4835d2" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; removes and returns the elements for which the block returns a true value. If no block is given, an Enumerator is returned instead.</source>
          <target state="translated">방법 &lt;code&gt;extract!&lt;/code&gt; 블록이 참 값을 반환하는 요소를 제거하고 반환합니다. 블록이 없으면 대신 열거자가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="99ed6b8b4541116327e8d0e7a6633713b0532871" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; removes and returns the key/value pairs matching the given keys.</source>
          <target state="translated">방법 &lt;code&gt;extract!&lt;/code&gt; 주어진 키와 일치하는 키 / 값 쌍을 제거하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0741247d19b528e9a12214261ac26cb44b6ed1c7" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; returns the same subclass of Hash that the receiver is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9f782cf4d463d7fa0c6babbe898a4179c215a0" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; returns the same subclass of Hash, that the receiver is.</source>
          <target state="translated">방법 &lt;code&gt;extract!&lt;/code&gt; 수신자와 동일한 Hash의 서브 클래스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="2ff5d88d672e86390c7f851883bc096da7e53d01" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;foreign_key&lt;/code&gt; gives a foreign key column name from a class name. To do so it demodulizes, underscores, and adds &quot;_id&quot;:</source>
          <target state="translated">&lt;code&gt;foreign_key&lt;/code&gt; 메소드 는 클래스 이름에서 외부 키 열 이름을 제공합니다. 이를 위해 복조, 밑줄 및 &quot;_id&quot;를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e7a5c875313a703800a91a074d810febde910dd4" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;humanize&lt;/code&gt; tweaks an attribute name for display to end users.</source>
          <target state="translated">&lt;code&gt;humanize&lt;/code&gt; 방법 은 최종 사용자에게 표시 할 속성 이름을 조정합니다.</target>
        </trans-unit>
        <trans-unit id="fb26c0817d6731204de3f5269480a99a26d221bd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;in_groups&lt;/code&gt; splits an array into a certain number of groups. The method returns an array with the groups:</source>
          <target state="translated">&lt;code&gt;in_groups&lt;/code&gt; 메소드 는 배열을 특정 수의 그룹으로 분할합니다. 이 메소드는 그룹이있는 배열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="bcda912a9181a0c10cda3df95ea77faada8fc3fd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;in_groups_of&lt;/code&gt; splits an array into consecutive groups of a certain size. It returns an array with the groups:</source>
          <target state="translated">&lt;code&gt;in_groups_of&lt;/code&gt; 메소드 는 배열을 특정 크기의 연속 그룹으로 분할합니다. 그룹이 포함 된 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="435c8a187b47719a1cd22951879b4182144227d5" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;index_by&lt;/code&gt; generates a hash with the elements of an enumerable indexed by some key.</source>
          <target state="translated">&lt;code&gt;index_by&lt;/code&gt; 메소드 는 일부 키로 색인화 된 열거 가능한 요소로 해시를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="da8b1a27cc1c31e946af6fde23476e92ede82db2" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;index_with&lt;/code&gt; generates a hash with the elements of an enumerable as keys. The value is either a passed default or returned in a block.</source>
          <target state="translated">&lt;code&gt;index_with&lt;/code&gt; 메소드 는 열거 가능한 요소를 키로 사용하여 해시를 생성합니다. 값은 전달 된 기본값이거나 블록으로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d1f20a3ddef2c375b761522691412f7214b57d0f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;instance_values&lt;/code&gt; returns a hash that maps instance variable names without &quot;@&quot; to their corresponding values. Keys are strings:</source>
          <target state="translated">&lt;code&gt;instance_values&lt;/code&gt; 메소드 는 &quot;@&quot;가없는 인스턴스 변수 이름을 해당 값에 맵핑하는 해시를 리턴합니다. 키는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c321602f17827d8217a980646e121648d496bb1c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;instance_variable_names&lt;/code&gt; returns an array. Each name includes the &quot;@&quot; sign.</source>
          <target state="translated">&lt;code&gt;instance_variable_names&lt;/code&gt; 메소드 는 배열을 리턴합니다. 각 이름에는 &quot;@&quot;기호가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="20ff505780bbd3782af13427c34a1855014975cb" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;many?&lt;/code&gt; is shorthand for &lt;code&gt;collection.size &amp;gt; 1&lt;/code&gt;:</source>
          <target state="translated">방법은 &lt;code&gt;many?&lt;/code&gt; &lt;code&gt;collection.size &amp;gt; 1&lt;/code&gt; 줄임말 :</target>
        </trans-unit>
        <trans-unit id="bb55847e5bf51aa79a7903f73ec506aacf7196a6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;module_parents&lt;/code&gt; calls &lt;code&gt;module_parent&lt;/code&gt; on the receiver and upwards until &lt;code&gt;Object&lt;/code&gt; is reached. The chain is returned in an array, from bottom to top:</source>
          <target state="translated">메소드 &lt;code&gt;module_parents&lt;/code&gt; 의 호출은 &lt;code&gt;module_parent&lt;/code&gt; 수신기에 위쪽까지 &lt;code&gt;Object&lt;/code&gt; 에 도달. 체인은 아래에서 위로 배열로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6089bffe83adf640f1613660fa0462ada9ab1360" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;multiline?&lt;/code&gt; says whether a regexp has the &lt;code&gt;/m&lt;/code&gt; flag set, that is, whether the dot matches newlines.</source>
          <target state="translated">방법은 여러 줄 &lt;code&gt;multiline?&lt;/code&gt; 정규 표현식에 &lt;code&gt;/m&lt;/code&gt; 플래그가 설정되어 있는지, 즉 점이 개행과 일치하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b85ea67c1af5da35bcf6a98d0598b5cd5fe12943" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;multiple_of?&lt;/code&gt; tests whether an integer is multiple of the argument:</source>
          <target state="translated">&lt;code&gt;multiple_of?&lt;/code&gt; 방법은 ? 정수가 인수의 배수인지 여부를 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="f15df0993a61ed439f2d1c9e3f00efd157cf7c77" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;next_week&lt;/code&gt; receives a symbol with a day name in English (default is the thread local &lt;code&gt;Date.beginning_of_week&lt;/code&gt;, or &lt;code&gt;config.beginning_of_week&lt;/code&gt;, or &lt;code&gt;:monday&lt;/code&gt;) and it returns the date corresponding to that day.</source>
          <target state="translated">&lt;code&gt;next_week&lt;/code&gt; 메소드 는 영어로 요일 이름이있는 기호를 수신하고 (기본값은 스레드 로컬 &lt;code&gt;Date.beginning_of_week&lt;/code&gt; 또는 &lt;code&gt;config.beginning_of_week&lt;/code&gt; 또는 &lt;code&gt;:monday&lt;/code&gt; ) 해당 날짜에 해당하는 날짜를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a33b8ded9323df6fd86cb09ff5d011f7e28769a0" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;ordinal&lt;/code&gt; returns the ordinal suffix string corresponding to the receiver integer:</source>
          <target state="translated">메소드 &lt;code&gt;ordinal&lt;/code&gt; 는 수신자 정수에 해당하는 서수 접미사 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d1761b81eab5a13ce24b2d3f37ede256550af29c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;ordinalize&lt;/code&gt; returns the ordinal string corresponding to the receiver integer. In comparison, note that the &lt;code&gt;ordinal&lt;/code&gt; method returns &lt;strong&gt;only&lt;/strong&gt; the suffix string.</source>
          <target state="translated">&lt;code&gt;ordinalize&lt;/code&gt; 메소드 는 수신자 정수에 해당하는 서수 문자열을 리턴합니다. 반면에 &lt;code&gt;ordinal&lt;/code&gt; 메서드는 접미사 문자열 &lt;strong&gt;만&lt;/strong&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="97392ecc57bbe19c9ee47fe2e7e60d101f006c2d" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;parameterize&lt;/code&gt; normalizes its receiver in a way that can be used in pretty URLs.</source>
          <target state="translated">&lt;code&gt;parameterize&lt;/code&gt; 메소드 는 예쁜 URL에서 사용할 수있는 방식으로 수신자를 정규화합니다.</target>
        </trans-unit>
        <trans-unit id="6e7420cd00a473a7a6d8483f9261f0ddfd51a128" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;pluck&lt;/code&gt; returns an array based on the given key:</source>
          <target state="translated">&lt;code&gt;pluck&lt;/code&gt; 메소드 는 주어진 키를 기반으로 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9ee6516c7f56f1ba0ed077fbc2e7db598686ac08" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;pluralize&lt;/code&gt; returns the plural of its receiver:</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; 메소드 는 수신자의 복수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="41bb7c4e58183037bcfd42551f575ed0b14097d0" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;present?&lt;/code&gt; is equivalent to &lt;code&gt;!blank?&lt;/code&gt;. This example is taken from &lt;code&gt;ActionDispatch::Http::Cache::Response&lt;/code&gt;:</source>
          <target state="translated">방법 &lt;code&gt;present?&lt;/code&gt; &lt;code&gt;!blank?&lt;/code&gt; 와 동일 합니까? . 이 예제는 &lt;code&gt;ActionDispatch::Http::Cache::Response&lt;/code&gt; 에서 가져 왔습니다 .</target>
        </trans-unit>
        <trans-unit id="b91d6be6b7e138a340af57a72512784b971a9ee1" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;prev_week&lt;/code&gt; is analogous:</source>
          <target state="translated">&lt;code&gt;prev_week&lt;/code&gt; 메소드 는 유사합니다.</target>
        </trans-unit>
        <trans-unit id="f12cfe07736bb5bbc05da705235c306e033463f5" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;redefine_method&lt;/code&gt; prevents such a potential warning, removing the existing method before if needed.</source>
          <target state="translated">&lt;code&gt;redefine_method&lt;/code&gt; 메소드 는 이러한 잠재적 인 경고를 방지하여 필요한 경우 기존 메소드를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="dd8539a782376af5d21222e2cb75190799a1d16b" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;remove&lt;/code&gt; will remove all occurrences of the pattern:</source>
          <target state="translated">메소드 &lt;code&gt;remove&lt;/code&gt; 는 패턴의 모든 항목을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="387ce0f8010addda4cde39eee52ccea1d12762fd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;reverse_update&lt;/code&gt; is an alias for &lt;code&gt;reverse_merge!&lt;/code&gt;, explained above.</source>
          <target state="translated">&lt;code&gt;reverse_update&lt;/code&gt; 메소드는 reverse_merge 의 별명입니다 &lt;code&gt;reverse_merge!&lt;/code&gt; 위에서 설명했습니다.</target>
        </trans-unit>
        <trans-unit id="ff4b75d9e257aba1e8fc283a1b01585233e460b4" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;seconds_since_midnight&lt;/code&gt; returns the number of seconds since midnight:</source>
          <target state="translated">&lt;code&gt;seconds_since_midnight&lt;/code&gt; 메소드 는 자정 이후의 시간 (초)을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="4a0dfce079234958f39d2ac44a20f44086af21e6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;slice!&lt;/code&gt; replaces the hash with only the given keys and returns a hash containing the removed key/value pairs.</source>
          <target state="translated">방법 &lt;code&gt;slice!&lt;/code&gt; 해시를 지정된 키로 만 교체하고 제거 된 키 / 값 쌍을 포함하는 해시를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="115efaa72ec871de6e14307a19a958b113979000" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;split&lt;/code&gt; divides an array by a separator and returns the resulting chunks.</source>
          <target state="translated">&lt;code&gt;split&lt;/code&gt; 메소드 는 배열을 구분 기호로 나누고 결과 청크를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="706387e27a1798aff7654f080c37fe4327344e38" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;squish&lt;/code&gt; strips leading and trailing whitespace, and substitutes runs of whitespace with a single space each:</source>
          <target state="translated">메소드 &lt;code&gt;squish&lt;/code&gt; 스트립 하나의 공간을 각각 공백의 실행을 선도하고 후행 공백 및 대체 :</target>
        </trans-unit>
        <trans-unit id="f0869d8f033f9cae7ed0fb46925e26e58694dd80" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;stringify_keys&lt;/code&gt; returns a hash that has a stringified version of the keys in the receiver. It does so by sending &lt;code&gt;to_s&lt;/code&gt; to them:</source>
          <target state="translated">&lt;code&gt;stringify_keys&lt;/code&gt; 메소드 는 수신자에 문자열 화 된 버전의 키가있는 해시를 리턴합니다. 그들에게 &lt;code&gt;to_s&lt;/code&gt; 를 보내면 됩니다 :</target>
        </trans-unit>
        <trans-unit id="a2a91721cba9308202438adc6d39cc57e1518bfd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;strip_heredoc&lt;/code&gt; strips indentation in heredocs.</source>
          <target state="translated">&lt;code&gt;strip_heredoc&lt;/code&gt; 메소드는 heredoc 에서 들여 쓰기를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="c0907a71fc4ec4c8ff7e86f4c1da60f559bdf3f6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;sum&lt;/code&gt; adds the elements of an enumerable:</source>
          <target state="translated">메소드 &lt;code&gt;sum&lt;/code&gt; 는 열거 가능한 요소를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="bcd37680102e0da1447d329b81f3e01b33deeae9" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;symbolize_keys&lt;/code&gt; returns a hash that has a symbolized version of the keys in the receiver, where possible. It does so by sending &lt;code&gt;to_sym&lt;/code&gt; to them:</source>
          <target state="translated">&lt;code&gt;symbolize_keys&lt;/code&gt; 메소드 는 가능한 경우 수신자에 키 버전의 키가있는 해시를 리턴합니다. 그들에게 &lt;code&gt;to_sym&lt;/code&gt; 을 보내면 됩니다 :</target>
        </trans-unit>
        <trans-unit id="bd6b9963429952cd5d8efa1a81a122b83c576304" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;tableize&lt;/code&gt; is &lt;code&gt;underscore&lt;/code&gt; followed by &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tableize&lt;/code&gt; 메소드 는 &lt;code&gt;underscore&lt;/code&gt; 뒤에 &lt;code&gt;pluralize&lt;/code&gt; 이옵니다 .</target>
        </trans-unit>
        <trans-unit id="4811f4d445cab7099f3493b7e741d51ccb0dfb69" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;titleize&lt;/code&gt; capitalizes the words in the receiver:</source>
          <target state="translated">메소드 &lt;code&gt;titleize&lt;/code&gt; 는 수신기에있는 단어를 대문자로 :</target>
        </trans-unit>
        <trans-unit id="b25ddab50687e5e7168c2e3221c5982ea48aaa35" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_formatted_s&lt;/code&gt; acts like &lt;code&gt;to_s&lt;/code&gt; by default.</source>
          <target state="translated">메소드 &lt;code&gt;to_formatted_s&lt;/code&gt; 이 같은 역할을 &lt;code&gt;to_s&lt;/code&gt; 기본적으로.</target>
        </trans-unit>
        <trans-unit id="2800ff6f2b96de9b72d620a5f58ae1e0841c919b" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_s&lt;/code&gt; provides a default specifier of &quot;F&quot;. This means that a simple call to &lt;code&gt;to_s&lt;/code&gt; will result in floating point representation instead of engineering notation:</source>
          <target state="translated">메소드 &lt;code&gt;to_s&lt;/code&gt; &quot;F&quot;의 기본 지정자를 제공합니다. 즉, 간단한 &lt;code&gt;to_s&lt;/code&gt; 호출 은 엔지니어링 표기법 대신 부동 소수점 표현을 초래합니다.</target>
        </trans-unit>
        <trans-unit id="b7c050e5958ce1fe8f9c1bab0bac53bdcf120f3c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_sentence&lt;/code&gt; turns an array into a string containing a sentence that enumerates its items:</source>
          <target state="translated">&lt;code&gt;to_sentence&lt;/code&gt; 메소드 는 배열을 항목을 열거하는 문장을 포함하는 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="2524a9e324636fcdd082cb9a29ef299c0ddea118" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_xml&lt;/code&gt; returns a string containing an XML representation of its receiver:</source>
          <target state="translated">&lt;code&gt;to_xml&lt;/code&gt; 메소드 는 수신자의 XML 표현을 포함하는 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="59c0bc92f01100a9cc031a421d333b37a09ddef7" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;truncate&lt;/code&gt; returns a copy of its receiver truncated after a given &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">메소드 &lt;code&gt;truncate&lt;/code&gt; 는 주어진 &lt;code&gt;length&lt;/code&gt; 후에 잘린 수신자의 사본을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="b1562a387389afb4f581f9b1a1ebd89caf5ecb3c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;truncate_words&lt;/code&gt; returns a copy of its receiver truncated after a given number of words:</source>
          <target state="translated">&lt;code&gt;truncate_words&lt;/code&gt; 메소드 는 주어진 단어 수만큼 잘린 수신자의 사본을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="770445ffcdb5e5d9f57ab10d842bffa5bd0051ec" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;underscore&lt;/code&gt; goes the other way around, from camel case to paths:</source>
          <target state="translated">메소드 &lt;code&gt;underscore&lt;/code&gt; 경로에 낙타 케이스에서, 주위에 다른 길을 간다 :</target>
        </trans-unit>
        <trans-unit id="c982543515f1362bd3befc11f73b8e85e6f34c9f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;utc&lt;/code&gt; gives you the same datetime in the receiver expressed in UTC.</source>
          <target state="translated">&lt;code&gt;utc&lt;/code&gt; 메소드 는 UTC로 표시된 수신자에서 동일한 날짜 시간을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a3ce902d2fa93d5680d9025389c8b3d49da865a6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;weeks_ago&lt;/code&gt; works analogously for weeks:</source>
          <target state="translated">&lt;code&gt;weeks_ago&lt;/code&gt; 방법 은 몇 주 동안 유사하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="38036a1b218f762f72707ab93f3b1ac4c75cc41e" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;welcome_email&lt;/code&gt; returns an &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object which can then be told to &lt;code&gt;deliver_now&lt;/code&gt; or &lt;code&gt;deliver_later&lt;/code&gt; to send itself out. The &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object is a wrapper around a &lt;code&gt;Mail::Message&lt;/code&gt;. If you want to inspect, alter, or do anything else with the &lt;code&gt;Mail::Message&lt;/code&gt; object you can access it with the &lt;code&gt;message&lt;/code&gt; method on the &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e30119f0c67cfd57bce9d6914c30134d947806b" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;welcome_email&lt;/code&gt; returns an &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object which can then just be told &lt;code&gt;deliver_now&lt;/code&gt; or &lt;code&gt;deliver_later&lt;/code&gt; to send itself out. The &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object is just a wrapper around a &lt;code&gt;Mail::Message&lt;/code&gt;. If you want to inspect, alter, or do anything else with the &lt;code&gt;Mail::Message&lt;/code&gt; object you can access it with the &lt;code&gt;message&lt;/code&gt; method on the &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;welcome_email&lt;/code&gt; 메소드 는 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; 객체를 반환하는데, 이를 그냥 &lt;code&gt;deliver_now&lt;/code&gt; 또는 &lt;code&gt;deliver_later&lt;/code&gt; 에게 알려 주면 됩니다. &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; 목적은 단지 래퍼입니다 &lt;code&gt;Mail::Message&lt;/code&gt; . &lt;code&gt;Mail::Message&lt;/code&gt; 객체 로 검사, 변경 또는 다른 작업을 수행하려는 경우 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; 객체 의 &lt;code&gt;message&lt;/code&gt; 메소드를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="143476ef54c29a1ec148780dbea92c40c0a25b4e" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;with_indifferent_access&lt;/code&gt; returns an &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; out of its receiver:</source>
          <target state="translated">&lt;code&gt;with_indifferent_access&lt;/code&gt; 메소드 는 수신기 에서 &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; HashWithIndifferentAccess를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="376cd7ee7cb616a24d413450adee82f6527d2b4f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;with_options&lt;/code&gt; provides a way to factor out common options in a series of method calls.</source>
          <target state="translated">&lt;code&gt;with_options&lt;/code&gt; 메소드 는 일련의 메소드 호출에서 공통 옵션을 인수 분해 하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d918b0efff2157c8c8e66e095e36340c8d9725bb" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;without&lt;/code&gt; returns a copy of an enumerable with the specified elements removed:</source>
          <target state="translated">&lt;code&gt;without&lt;/code&gt; 메소드 는 지정된 요소가 제거 된 열거 가능한 사본을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="749ed452302f0bfc6da535e793254e8dd6d7ddc2" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;years_ago&lt;/code&gt; receives a number of years and returns the same date those many years ago:</source>
          <target state="translated">&lt;code&gt;years_ago&lt;/code&gt; 메소드 는 여러 해를 수신하고 몇 년 전과 동일한 날짜를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b6139bf6204c334a2dca2c4766b4c7e500cf1072" translate="yes" xml:space="preserve">
          <source>The method accepts a block too. If present, the block is evaluated in the context of the controller helper module. This simple call makes the &lt;code&gt;wadus&lt;/code&gt; method available in templates of the enclosing controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eaf50f86f012b22cbcfd5d0712981b9b5c8c600" translate="yes" xml:space="preserve">
          <source>The method accepts an optional fourth argument to replace existing &lt;code&gt;NULL&lt;/code&gt;s with some other value. Use that one when enabling the constraint if needed, since otherwise those rows would not be valid.</source>
          <target state="translated">이 메소드는 선택적인 네 번째 인수를 허용하여 기존 &lt;code&gt;NULL&lt;/code&gt; 을 다른 값 으로 대체 합니다. 필요한 경우 제약 조건을 활성화 할 때이 행을 사용하십시오. 그렇지 않으면 해당 행이 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f52bb918e6a1a9bd9c24ca2082d9cf87e5aa096a" translate="yes" xml:space="preserve">
          <source>The method arguments are symbols which correspond to the names of the methods which should be unscoped. The valid arguments are given in &lt;a href=&quot;querymethods#VALID_UNSCOPING_VALUES&quot;&gt;&lt;code&gt;VALID_UNSCOPING_VALUES&lt;/code&gt;&lt;/a&gt;. The method can also be called with multiple arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a3e85771e7d5da34d4a62058419ff2db1527a9" translate="yes" xml:space="preserve">
          <source>The method arguments are symbols which correspond to the names of the methods which should be unscoped. The valid arguments are given in &lt;a href=&quot;querymethods#VALID_UNSCOPING_VALUES&quot;&gt;VALID_UNSCOPING_VALUES&lt;/a&gt;. The method can also be called with multiple arguments. For example:</source>
          <target state="translated">메소드 인수는 범위를 지정하지 않아야하는 메소드의 이름에 해당하는 기호입니다. 유효한 인수는 &lt;a href=&quot;querymethods#VALID_UNSCOPING_VALUES&quot;&gt;VALID_UNSCOPING_VALUES에 제공&lt;/a&gt; 됩니다. 이 메소드는 여러 개의 인수로 호출 할 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f29811b2344f3c781cc85f6126a7eba350e8f54e" translate="yes" xml:space="preserve">
          <source>The method can be used in several slightly different ways, depending on how much you wish to rely on Rails to infer automatically from the model how the form should be constructed. For a generic model object, a form can be created by passing &lt;code&gt;form_for&lt;/code&gt; a string or symbol representing the object we are concerned with:</source>
          <target state="translated">이 방법은 모델에서 양식을 구성하는 방법을 자동으로 추론하기 위해 Rails에 의존하는 정도에 따라 몇 가지 약간 다른 방식으로 사용될 수 있습니다. 일반 모델 객체의 경우 &lt;code&gt;form_for&lt;/code&gt; 와 관련된 객체를 나타내는 문자열 또는 기호 를 전달하여 양식을 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df59aa5f4379b6a7b3027cf6de35b290d184f6f8" translate="yes" xml:space="preserve">
          <source>The method must be public in the target.</source>
          <target state="translated">메소드는 대상에서 공개되어야합니다.</target>
        </trans-unit>
        <trans-unit id="d6c4a302116d905f51af0710172d864db0198ec2" translate="yes" xml:space="preserve">
          <source>The method name is generated by replacing spaces with underscores. The result does not need to be a valid Ruby identifier though &amp;mdash; the name may contain punctuation characters, etc. That's because in Ruby technically any string may be a method name. This may require use of &lt;code&gt;define_method&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; calls to function properly, but formally there's little restriction on the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea58e33d4325a5441c0ed44a3d6618cc3feba41" translate="yes" xml:space="preserve">
          <source>The method name is generated by replacing spaces with underscores. The result does not need to be a valid Ruby identifier though, the name may contain punctuation characters etc. That's because in Ruby technically any string may be a method name. This may require use of &lt;code&gt;define_method&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; calls to function properly, but formally there's little restriction on the name.</source>
          <target state="translated">메소드 이름은 공백을 밑줄로 대체하여 생성됩니다. 결과는 유효한 Ruby 식별자 일 필요는 없지만 이름에는 문장 부호 문자 등이 포함될 수 있습니다. 이는 Ruby에서 기술적으로 모든 문자열이 메소드 이름 일 수 있기 때문입니다. 이 경우 &lt;code&gt;define_method&lt;/code&gt; 를 사용해야 하고 제대로 호출하기 위해 호출을 &lt;code&gt;send&lt;/code&gt; 하지만 공식적으로는 이름에 제한이 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="3f48950e7a1291930ff3ceba91618afc3d58f76d" translate="yes" xml:space="preserve">
          <source>The method reference callbacks work by specifying a protected or private method available in the object, like this:</source>
          <target state="translated">메소드 참조 콜백은 다음과 같이 객체에서 사용 가능한 보호 또는 개인 메소드를 지정하여 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4c103e976f66c3afee2e0a77e51963a42f30a430" translate="yes" xml:space="preserve">
          <source>The method reference is the preferred approach to variable layouts and is used like this:</source>
          <target state="translated">메소드 참조는 변수 레이아웃에 선호되는 접근 방식이며 다음과 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0177f2d4e9121bd990bbdc6e21ee4939f478d0b6" translate="yes" xml:space="preserve">
          <source>The method simply stores an error message in the flash and redirects to the login form if the user is not logged in. If a &quot;before&quot; filter renders or redirects, the action will not run. If there are additional filters scheduled to run after that filter, they are also cancelled.</source>
          <target state="translated">이 방법은 단순히 오류 메시지를 플래시에 저장하고 사용자가 로그인하지 않은 경우 로그인 양식으로 리디렉션합니다. &quot;이전&quot;필터가 렌더링되거나 리디렉션되면 작업이 실행되지 않습니다. 해당 필터 이후에 추가로 실행되도록 예약 된 필터가 있으면 취소됩니다.</target>
        </trans-unit>
        <trans-unit id="e51ca83b78ed3a96cbc5befd362957c1169c765e" translate="yes" xml:space="preserve">
          <source>The method understands qualified table names:</source>
          <target state="translated">이 메소드는 규정 된 테이블 이름을 이해합니다.</target>
        </trans-unit>
        <trans-unit id="f0a296b63f2cf5a95d407e53006a436d773bba0e" translate="yes" xml:space="preserve">
          <source>The method will also ensure an HTTP &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; header for client compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c350fc830645f9176dfd3818099b11ae3983bdbf" translate="yes" xml:space="preserve">
          <source>The method will also ensure an HTTP &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt; header for client compatibility.</source>
          <target state="translated">이 방법은 또한 클라이언트 호환성을 위해 HTTP &lt;a href=&quot;../date&quot;&gt;날짜&lt;/a&gt; 헤더를 보장합니다 .</target>
        </trans-unit>
        <trans-unit id="e7934c859ba3f1bbfef963b0dd18e1eebc036a02" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-second&quot;&gt;&lt;code&gt;second&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-third&quot;&gt;&lt;code&gt;third&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-fourth&quot;&gt;&lt;code&gt;fourth&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-fifth&quot;&gt;&lt;code&gt;fifth&lt;/code&gt;&lt;/a&gt; return the corresponding element, as do &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-second_to_last&quot;&gt;&lt;code&gt;second_to_last&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-third_to_last&quot;&gt;&lt;code&gt;third_to_last&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; are built-in). Thanks to social wisdom and positive constructiveness all around, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-forty_two&quot;&gt;&lt;code&gt;forty_two&lt;/code&gt;&lt;/a&gt; is also available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4268a3f3f72e7bfd7ea9ce837459b402d840ed" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_month&quot;&gt;&lt;code&gt;beginning_of_month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_month&quot;&gt;&lt;code&gt;end_of_month&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the month:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbbb643120063a3302eafe287e3a55134792667" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_quarter&quot;&gt;&lt;code&gt;beginning_of_quarter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_quarter&quot;&gt;&lt;code&gt;end_of_quarter&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the quarter of the receiver's calendar year:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a39f9936b27ee847e67301677097f669a8b309" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_week&quot;&gt;&lt;code&gt;beginning_of_week&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_week&quot;&gt;&lt;code&gt;end_of_week&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the week, respectively. Weeks are assumed to start on Monday, but that can be changed passing an argument, setting thread local &lt;code&gt;Date.beginning_of_week&lt;/code&gt; or &lt;code&gt;config.beginning_of_week&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2313909eb086648ffc293b8a000069cf41ee70a4" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_year&quot;&gt;&lt;code&gt;beginning_of_year&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_year&quot;&gt;&lt;code&gt;end_of_year&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the year:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19aae78de33632f9430ef34c4a1f0fa2d8cea8e3" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-monday&quot;&gt;&lt;code&gt;monday&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-sunday&quot;&gt;&lt;code&gt;sunday&lt;/code&gt;&lt;/a&gt; return the dates for the previous Monday and next Sunday, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc9f6890a4064f7a40ab776d4900a65595e7b6f" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-months_ago&quot;&gt;&lt;code&gt;months_ago&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-months_since&quot;&gt;&lt;code&gt;months_since&lt;/code&gt;&lt;/a&gt; work analogously for months:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89be9d861059d6afe106e651977780cec5f0cd1" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_options&quot;&gt;&lt;code&gt;to_options&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_options-21&quot;&gt;&lt;code&gt;to_options!&lt;/code&gt;&lt;/a&gt; are aliases of &lt;code&gt;symbolize_keys&lt;/code&gt; and &lt;code&gt;symbolize_keys!&lt;/code&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fe83528af64482eb1c2c0f517513b16f498a1a" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Kernel.html#method-i-silence_warnings&quot;&gt;&lt;code&gt;silence_warnings&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Kernel.html#method-i-enable_warnings&quot;&gt;&lt;code&gt;enable_warnings&lt;/code&gt;&lt;/a&gt; change the value of &lt;code&gt;$VERBOSE&lt;/code&gt; accordingly for the duration of their block, and reset it afterwards:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0647dfcd8d7d70703cb0a11190a6cedb68989a" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_date&quot;&gt;&lt;code&gt;to_date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_time&quot;&gt;&lt;code&gt;to_time&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_datetime&quot;&gt;&lt;code&gt;to_datetime&lt;/code&gt;&lt;/a&gt; are basically convenience wrappers around &lt;code&gt;Date._parse&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c7f5ee384fe2044ad32d25e79e26d5f3aa690a" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;Range#===&lt;/code&gt;, &lt;code&gt;Range#include?&lt;/code&gt;, and &lt;code&gt;Range#cover?&lt;/code&gt; say whether some value falls between the ends of a given instance:</source>
          <target state="translated">&lt;code&gt;Range#===&lt;/code&gt; , &lt;code&gt;Range#include?&lt;/code&gt; 메서드 및 &lt;code&gt;Range#cover?&lt;/code&gt; 주어진 인스턴스의 끝 사이에 어떤 가치가 있는지 여부를 말하십시오.</target>
        </trans-unit>
        <trans-unit id="d9a7edd36cd3f87a9ac106594572cc990797d90a" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_month&lt;/code&gt; and &lt;code&gt;end_of_month&lt;/code&gt; return the dates for the beginning and end of the month:</source>
          <target state="translated">방법은 &lt;code&gt;beginning_of_month&lt;/code&gt; 및 &lt;code&gt;end_of_month&lt;/code&gt; 월의 시작과 끝의 날짜를 반환 :</target>
        </trans-unit>
        <trans-unit id="b082ddf7d0327c04320194626ffb003ed515c178" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_quarter&lt;/code&gt; and &lt;code&gt;end_of_quarter&lt;/code&gt; return the dates for the beginning and end of the quarter of the receiver's calendar year:</source>
          <target state="translated">방법 &lt;code&gt;beginning_of_quarter&lt;/code&gt; 및 &lt;code&gt;end_of_quarter&lt;/code&gt; 시작과 수신기의 연도의 분기의 끝 날짜를 반환 :</target>
        </trans-unit>
        <trans-unit id="d9a727e15831861050a8ad7462355064dc28ab58" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_week&lt;/code&gt; and &lt;code&gt;end_of_week&lt;/code&gt; return the dates for the beginning and end of the week, respectively. Weeks are assumed to start on Monday, but that can be changed passing an argument, setting thread local &lt;code&gt;Date.beginning_of_week&lt;/code&gt; or &lt;code&gt;config.beginning_of_week&lt;/code&gt;.</source>
          <target state="translated">방법은 &lt;code&gt;beginning_of_week&lt;/code&gt; 및 &lt;code&gt;end_of_week&lt;/code&gt; 각각 일주일의 시작과 끝의 날짜를 돌려줍니다. 주는 월요일에 시작한다고 가정하지만 스레드 로컬 &lt;code&gt;Date.beginning_of_week&lt;/code&gt; 또는 &lt;code&gt;config.beginning_of_week&lt;/code&gt; 를 설정하여 인수를 전달하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bc61fc2dcfd38d754ffc1b03fdf37a7ac79771a6" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_year&lt;/code&gt; and &lt;code&gt;end_of_year&lt;/code&gt; return the dates for the beginning and end of the year:</source>
          <target state="translated">방법은 &lt;code&gt;beginning_of_year&lt;/code&gt; 및 &lt;code&gt;end_of_year&lt;/code&gt; 년의 시작과 끝의 날짜를 반환 :</target>
        </trans-unit>
        <trans-unit id="c93442f75ad37d78087c0cd7de4798ce7440226e" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;monday&lt;/code&gt; and &lt;code&gt;sunday&lt;/code&gt; return the dates for the previous Monday and next Sunday, respectively.</source>
          <target state="translated">&lt;code&gt;monday&lt;/code&gt; 및 &lt;code&gt;sunday&lt;/code&gt; 메소드 는 각각 이전 월요일 및 다음 일요일의 날짜를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="101e739f5a98fcc8679ad2d254272635b35eb22b" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;months_ago&lt;/code&gt; and &lt;code&gt;months_since&lt;/code&gt; work analogously for months:</source>
          <target state="translated">&lt;code&gt;months_ago&lt;/code&gt; 및 &lt;code&gt;months_since&lt;/code&gt; 메소드 는 몇 달 동안 유사하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a57bf9a6a89002a3c34cc6c1d424b2ec54e1d27a" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;, &lt;code&gt;fourth&lt;/code&gt;, and &lt;code&gt;fifth&lt;/code&gt; return the corresponding element, as do &lt;code&gt;second_to_last&lt;/code&gt; and &lt;code&gt;third_to_last&lt;/code&gt; (&lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; are built-in). Thanks to social wisdom and positive constructiveness all around, &lt;code&gt;forty_two&lt;/code&gt; is also available.</source>
          <target state="translated">방법은 &lt;code&gt;second&lt;/code&gt; , &lt;code&gt;third&lt;/code&gt; , &lt;code&gt;fourth&lt;/code&gt; 및 &lt;code&gt;fifth&lt;/code&gt; 과 같이, 해당 요소를 반환 &lt;code&gt;second_to_last&lt;/code&gt; 및 &lt;code&gt;third_to_last&lt;/code&gt; ( &lt;code&gt;first&lt;/code&gt; 및 &lt;code&gt;last&lt;/code&gt; 내장된다). 사방의 사회적 지혜와 긍정적 건설 덕분에 &lt;code&gt;forty_two&lt;/code&gt; 도 가능합니다.</target>
        </trans-unit>
        <trans-unit id="302a64dec0c184391c6bcb15ca258c399575c5b1" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;silence_warnings&lt;/code&gt; and &lt;code&gt;enable_warnings&lt;/code&gt; change the value of &lt;code&gt;$VERBOSE&lt;/code&gt; accordingly for the duration of their block, and reset it afterwards:</source>
          <target state="translated">&lt;code&gt;silence_warnings&lt;/code&gt; 및 &lt;code&gt;enable_warnings&lt;/code&gt; 메소드 는 블록 기간 동안 이에 따라 &lt;code&gt;$VERBOSE&lt;/code&gt; 값을 변경하고 나중에 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="10ee15491942712a1e41b76c89b0f5f1b22a509f" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;to_date&lt;/code&gt;, &lt;code&gt;to_time&lt;/code&gt;, and &lt;code&gt;to_datetime&lt;/code&gt; are basically convenience wrappers around &lt;code&gt;Date._parse&lt;/code&gt;:</source>
          <target state="translated">방법은 &lt;code&gt;to_date&lt;/code&gt; , &lt;code&gt;to_time&lt;/code&gt; 및 &lt;code&gt;to_datetime&lt;/code&gt; 는 기본적으로 주변 편의 래퍼 &lt;code&gt;Date._parse&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cbe25a0862b8a2b5ae25688ccd92978edff13bd7" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;to_options&lt;/code&gt; and &lt;code&gt;to_options!&lt;/code&gt; are respectively aliases of &lt;code&gt;symbolize_keys&lt;/code&gt; and &lt;code&gt;symbolize_keys!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;to_options&lt;/code&gt; 및 &lt;code&gt;to_options!&lt;/code&gt; 메소드 ! &lt;code&gt;symbolize_keys&lt;/code&gt; 및 &lt;code&gt;symbolize_keys!&lt;/code&gt; 별명입니다 . .</target>
        </trans-unit>
        <trans-unit id="28acdf93546eacce94f3d9bcd3f859094ac99119" translate="yes" xml:space="preserve">
          <source>The methods Active Record provides to manipulate your database.</source>
          <target state="translated">Active Record가 데이터베이스를 조작하기 위해 제공하는 방법.</target>
        </trans-unit>
        <trans-unit id="e01fbc4ac2e1415be0e05e3a36a4769e572ae738" translate="yes" xml:space="preserve">
          <source>The methods are:</source>
          <target state="translated">방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="85ead67c11e5371c2a532edbb9f016817232ba42" translate="yes" xml:space="preserve">
          <source>The methods that are available for generators are covered in the &lt;a href=&quot;#generator-methods&quot;&gt;final section&lt;/a&gt; of this guide.</source>
          <target state="translated">발전기에 사용할 수있는 방법 은이 안내서 의 &lt;a href=&quot;#generator-methods&quot;&gt;마지막 섹션&lt;/a&gt; 에서 다룹니다 .</target>
        </trans-unit>
        <trans-unit id="632757f8db9c26f8fc3f69acc6499d156989d659" translate="yes" xml:space="preserve">
          <source>The migration DSL has been expanded to support foreign key definitions. If you've been using the Foreigner gem, you might want to consider removing it. Note that the foreign key support of Rails is a subset of Foreigner. This means that not every Foreigner definition can be fully replaced by its Rails migration DSL counterpart.</source>
          <target state="translated">마이그레이션 DSL은 외래 키 정의를 지원하도록 확장되었습니다. Foreigner gem을 사용하고 있다면 제거하는 것이 좋습니다. Rails의 외래 키 지원은 외국인의 하위 집합입니다. 즉, 모든 외국인 정의를 Rails 마이그레이션 DSL로 완전히 대체 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="fe354a4973240c9410053a804a2ebd4b4d92ba50" translate="yes" xml:space="preserve">
          <source>The migration method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table&quot;&gt;&lt;code&gt;create_join_table&lt;/code&gt;&lt;/a&gt; creates an HABTM (has and belongs to many) join table. A typical use would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064ad71d72802cf5173a957b04d66eaf6ae10a67" translate="yes" xml:space="preserve">
          <source>The migration method &lt;code&gt;create_join_table&lt;/code&gt; creates an HABTM (has and belongs to many) join table. A typical use would be:</source>
          <target state="translated">마이그레이션 방법 &lt;code&gt;create_join_table&lt;/code&gt; 은 HABTM (많은 테이블이 있고 그에 속하는) 결합 테이블을 만듭니다. 일반적인 용도는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="46f69d5e49bda7d74e75c9f40f69e27e28ae44b1" translate="yes" xml:space="preserve">
          <source>The migration procedure is as follows:</source>
          <target state="translated">마이그레이션 절차는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d18afdf6bffb0d53df16ac23c3fc6603a2497553" translate="yes" xml:space="preserve">
          <source>The migration requires that we &lt;strong&gt;migrate&lt;/strong&gt;, that is, run some Ruby code (living in that &lt;code&gt;20130717151933_create_high_scores.rb&lt;/code&gt;) to modify the schema of our database. Which database? The SQLite3 database that Rails will create for you when we run the &lt;code&gt;bin/rails db:migrate&lt;/code&gt; command. We'll talk more about that command below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab24c1cdb4bc14a36f9680163589fdc69716d944" translate="yes" xml:space="preserve">
          <source>The migration requires that we &lt;strong&gt;migrate&lt;/strong&gt;, that is, run some Ruby code (living in that &lt;code&gt;20130717151933_create_high_scores.rb&lt;/code&gt;) to modify the schema of our database. Which database? The SQLite3 database that Rails will create for you when we run the &lt;code&gt;rails db:migrate&lt;/code&gt; command. We'll talk more about that command below.</source>
          <target state="translated">마이그레이션을 위해서는 데이터베이스 스키마를 수정하기 위해 &lt;strong&gt;마이그레이션&lt;/strong&gt; (즉, 일부 Ruby 코드 ( &lt;code&gt;20130717151933_create_high_scores.rb&lt;/code&gt; 에 있음 ))을 실행 해야합니다. 어떤 데이터베이스? &lt;code&gt;rails db:migrate&lt;/code&gt; 명령을 실행할 때 Rails가 생성 할 SQLite3 데이터베이스 . 아래에서 해당 명령에 대해 자세히 설명하겠습니다.</target>
        </trans-unit>
        <trans-unit id="106794560ae8481f1f8e790f3f30a20620d4b2b3" translate="yes" xml:space="preserve">
          <source>The migration version, migration file name, migration class name are available as instance variables in the template to be rendered.</source>
          <target state="translated">마이그레이션 버전, 마이그레이션 파일 이름, 마이그레이션 클래스 이름은 렌더링 할 템플리트에서 인스턴스 변수로 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="264fdcd063a5b992cffc029bb74fd19a7ee3ecc8" translate="yes" xml:space="preserve">
          <source>The migrations paths for a database configuration. If the &lt;code&gt;migrations_paths&lt;/code&gt; key is present in the config, &lt;code&gt;migrations_paths&lt;/code&gt; will return its value.</source>
          <target state="translated">데이터베이스 구성의 마이그레이션 경로 구성에 &lt;code&gt;migrations_paths&lt;/code&gt; 키가 있으면 &lt;code&gt;migrations_paths&lt;/code&gt; 가 해당 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1ffa60f96218aefefa017b3600936d844a777339" translate="yes" xml:space="preserve">
          <source>The model and scaffold generators will create migrations appropriate for adding a new model. This migration will already contain instructions for creating the relevant table. If you tell Rails what columns you want, then statements for adding these columns will also be created. For example, running:</source>
          <target state="translated">모델 및 스캐 폴드 생성기는 새 모델 추가에 적합한 마이그레이션을 작성합니다. 이 마이그레이션에는 관련 테이블 작성에 대한 지시 사항이 이미 포함되어 있습니다. 원하는 열을 Rails에 알려 주면이 열을 추가하기위한 명령문도 작성됩니다. 예를 들어 다음을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="249b19b94a2baf19802b3a383ce518c8761e1284" translate="yes" xml:space="preserve">
          <source>The model class method &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; allows you to update and destroy associated records. This is based on the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;_destroy&lt;/code&gt; parameters:</source>
          <target state="translated">모델 클래스 메소드 &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; 를 사용하면 연관된 레코드를 업데이트하고 삭제할 수 있습니다. 이는 &lt;code&gt;id&lt;/code&gt; 및 &lt;code&gt;_destroy&lt;/code&gt; 매개 변수를 기반으로합니다 .</target>
        </trans-unit>
        <trans-unit id="e14cc259f2fce88b090eb2cb7128b471b333c1e8" translate="yes" xml:space="preserve">
          <source>The model file, &lt;code&gt;app/models/article.rb&lt;/code&gt; is about as simple as it can get:</source>
          <target state="translated">&lt;code&gt;app/models/article.rb&lt;/code&gt; 모델 파일 은 다음과 같이 간단합니다.</target>
        </trans-unit>
        <trans-unit id="eba21083dc8e4e9c25ca1f480fd47c8b083c4073" translate="yes" xml:space="preserve">
          <source>The module object following a &lt;code&gt;module&lt;/code&gt; keyword gets pushed when its body is executed, and popped after it.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 키워드 다음에 나오는 모듈 객체 는 본문이 실행될 때 푸시되어 그 다음에 팝됩니다.</target>
        </trans-unit>
        <trans-unit id="83bfde6905a12029da10ae0302da14e944a33572" translate="yes" xml:space="preserve">
          <source>The more generic form can also be used:</source>
          <target state="translated">보다 일반적인 형태를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8749a8b69f507a203077616aca924230b98cbb6b" translate="yes" xml:space="preserve">
          <source>The more prepared statements in use: the more memory your database will require. If your PostgreSQL database is hitting memory limits, try lowering &lt;code&gt;statement_limit&lt;/code&gt; or disabling prepared statements.</source>
          <target state="translated">사용중인 준비 문이 많을수록 데이터베이스에 더 많은 메모리가 필요합니다. PostgreSQL 데이터베이스가 메모리 한계에 도달하면 &lt;code&gt;statement_limit&lt;/code&gt; 를 낮추 거나 준비된 명령문을 비활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="559aa9c854f2130ef8fac1dca2f96f39aeb3d7e4" translate="yes" xml:space="preserve">
          <source>The most common XSS language is of course the most popular client-side scripting language JavaScript, often in combination with HTML. &lt;em&gt;Escaping user input is essential&lt;/em&gt;.</source>
          <target state="translated">가장 일반적인 XSS 언어는 물론 HTML과 함께 가장 인기있는 클라이언트 측 스크립트 언어 JavaScript입니다. &lt;em&gt;탈출 사용자 입력이 필수적&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7cd17334a3478f1d7c2e20e61fa6e2680f80c045" translate="yes" xml:space="preserve">
          <source>The most common commands of the &lt;code&gt;db:&lt;/code&gt; rails namespace are &lt;code&gt;migrate&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt;, and it will pay off to try out all of the migration rails commands (&lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;). &lt;code&gt;bin/rails db:version&lt;/code&gt; is useful when troubleshooting, telling you the current version of the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a394aaf66692ca993ee720ec89c38286621984ad" translate="yes" xml:space="preserve">
          <source>The most common commands of the &lt;code&gt;db:&lt;/code&gt; rails namespace are &lt;code&gt;migrate&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt;, and it will pay off to try out all of the migration rails commands (&lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;). &lt;code&gt;rails db:version&lt;/code&gt; is useful when troubleshooting, telling you the current version of the database.</source>
          <target state="translated">&lt;code&gt;db:&lt;/code&gt; rails 네임 스페이스 의 가장 일반적인 명령 은 &lt;code&gt;migrate&lt;/code&gt; 및 &lt;code&gt;create&lt;/code&gt; 이며 모든 마이그레이션 rails 명령 ( &lt;code&gt;up&lt;/code&gt; , &lt;code&gt;down&lt;/code&gt; , &lt;code&gt;redo&lt;/code&gt; , &lt;code&gt;reset&lt;/code&gt; ) 을 사용해보아야합니다 . &lt;code&gt;rails db:version&lt;/code&gt; 은 문제 해결시 데이터베이스의 현재 버전을 알려주는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2d09f26c4b080f0da2d9b5d96ee1a38b054f08f7" translate="yes" xml:space="preserve">
          <source>The most common entry points are message posts, user comments, and guest books, but project titles, document names, and search result pages have also been vulnerable - just about everywhere where the user can input data. But the input does not necessarily have to come from input boxes on web sites, it can be in any URL parameter - obvious, hidden or internal. Remember that the user may intercept any traffic. Applications or client-site proxies make it easy to change requests. There are also other attack vectors like banner advertisements.</source>
          <target state="translated">가장 일반적인 진입 점은 메시지 게시물, 사용자 의견 및 방명록이지만 프로젝트 제목, 문서 이름 및 검색 결과 페이지도 사용자가 데이터를 입력 할 수있는 모든 곳에서 취약했습니다. 그러나 입력은 반드시 웹 사이트의 입력 상자에서 올 필요는 없으며 명백하거나 숨겨 지거나 내부의 모든 URL 매개 변수에있을 수 있습니다. 사용자는 모든 트래픽을 가로 챌 수 있습니다. 응용 프로그램 또는 클라이언트 사이트 프록시를 사용하면 요청을 쉽게 변경할 수 있습니다. 배너 광고와 같은 다른 공격 경로도 있습니다.</target>
        </trans-unit>
        <trans-unit id="445653008345676d9901d54b1dd03fc1df7ab282" translate="yes" xml:space="preserve">
          <source>The most common parameter that a user might tamper with, is the id parameter, as in &lt;code&gt;http://www.domain.com/project/1&lt;/code&gt;, whereas 1 is the id. It will be available in params in the controller. There, you will most likely do something like this:</source>
          <target state="translated">사용자가 조작 할 수있는 가장 일반적인 매개 변수는 &lt;code&gt;http://www.domain.com/project/1&lt;/code&gt; 에서와 같이 id 매개 변수 이며 1은 id입니다. 컨트롤러의 매개 변수로 사용할 수 있습니다. 거기에서 다음과 같이 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="539024df1130477692163b826318e13606156156" translate="yes" xml:space="preserve">
          <source>The most common usage pattern for this method is probably in a migration, when just after creating a table you want to populate it with some default values, eg:</source>
          <target state="translated">이 방법의 가장 일반적인 사용 패턴은 아마도 테이블을 생성 한 직후에 몇 가지 기본값으로 채울 때의 마이그레이션 일 것입니다.</target>
        </trans-unit>
        <trans-unit id="53c94369ca312f2c571a25a01b217c63a4032152" translate="yes" xml:space="preserve">
          <source>The most effective countermeasure is to &lt;em&gt;issue a new session identifier&lt;/em&gt; and declare the old one invalid after a successful login. That way, an attacker cannot use the fixed session identifier. This is a good countermeasure against session hijacking, as well. Here is how to create a new session in Rails:</source>
          <target state="translated">가장 효과적인 대책은 &lt;em&gt;새 세션 식별자&lt;/em&gt; 를 &lt;em&gt;발급하고&lt;/em&gt; 로그인에 성공한 후 이전 &lt;em&gt;세션 식별자를&lt;/em&gt; 유효하지 않은 것으로 선언하는 것입니다. 이렇게하면 공격자가 고정 세션 식별자를 사용할 수 없습니다. 이것은 세션 도용에 대한 좋은 대책이기도합니다. Rails에서 새 세션을 생성하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed10c5c1398c3d0f83d0fb9826f7a006d60d6b58" translate="yes" xml:space="preserve">
          <source>The most efficient way to implement low-level caching is using the &lt;code&gt;Rails.cache.fetch&lt;/code&gt; method. This method does both reading and writing to the cache. When passed only a single argument, the key is fetched and value from the cache is returned. If a block is passed, that block will be executed in the event of a cache miss. The return value of the block will be written to the cache under the given cache key, and that return value will be returned. In case of cache hit, the cached value will be returned without executing the block.</source>
          <target state="translated">저수준 캐싱을 구현하는 가장 효율적인 방법은 &lt;code&gt;Rails.cache.fetch&lt;/code&gt; 메서드를 사용하는 것 입니다. 이 방법은 캐시를 읽고 쓰는 작업을 모두 수행합니다. 단일 인수 만 전달하면 키가 페치되고 캐시의 값이 리턴됩니다. 블록이 전달되면 캐시 누락시 해당 블록이 실행됩니다. 주어진 캐시 키에 따라 블록의 반환 값이 캐시에 기록되고 해당 반환 값이 반환됩니다. 캐시 적중의 경우, 블록을 실행하지 않고 캐시 된 값이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="1bf4622040a1d5fcf3d59cf7f1f8b690e8a3cdf9" translate="yes" xml:space="preserve">
          <source>The most generic helper is &lt;code&gt;select_tag&lt;/code&gt;, which - as the name implies - simply generates the &lt;code&gt;SELECT&lt;/code&gt; tag that encapsulates an options string:</source>
          <target state="translated">가장 일반적인 도우미는 &lt;code&gt;select_tag&lt;/code&gt; 이며, 이름에서 알 수 있듯이 옵션 문자열을 캡슐화하는 &lt;code&gt;SELECT&lt;/code&gt; 태그를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="b3bfcdc3e816b4ad131b3a2dfe0a00d3ea806652" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to another datetime is &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-advance&quot;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/a&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, and &lt;code&gt;:seconds&lt;/code&gt;, and returns a datetime advanced as much as the present keys indicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0509ac0ca8c10723fb1e7121e2ee0f87534275c0" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to another datetime is &lt;code&gt;advance&lt;/code&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, and &lt;code&gt;:seconds&lt;/code&gt;, and returns a datetime advanced as much as the present keys indicate.</source>
          <target state="translated">다른 날짜 시간으로 이동하는 가장 일반적인 방법은 &lt;code&gt;advance&lt;/code&gt; 입니다. 이 메소드는 &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; , &lt;code&gt;:days&lt;/code&gt; , &lt;code&gt;:hours&lt;/code&gt; , &lt;code&gt;:minutes&lt;/code&gt; 및 &lt;code&gt;:seconds&lt;/code&gt; 키가 포함 된 해시를 수신 하고 현재 키가 나타내는만큼 날짜 시간이 경과 한 것을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="10fdde72309e5fae6123dcb99ad5f251fa0233e8" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to other days is &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-advance&quot;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/a&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, and returns a date advanced as much as the present keys indicate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e7e7cea726db9dc19377303f26cc2abd058530" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to other days is &lt;code&gt;advance&lt;/code&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, and returns a date advanced as much as the present keys indicate:</source>
          <target state="translated">다른 날로 이동하는 가장 일반적인 방법은 &lt;code&gt;advance&lt;/code&gt; 입니다. 이 메소드는 &lt;code&gt;:years&lt;/code&gt; , &lt;code&gt;:months&lt;/code&gt; , &lt;code&gt;:weeks&lt;/code&gt; , &lt;code&gt;:days&lt;/code&gt; 키가있는 해시를 수신 하고 현재 키가 나타내는만큼 날짜를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ab1db0eb26e081fb619f5c2ecda6a3dfcb20b5b0" translate="yes" xml:space="preserve">
          <source>The most important methods of the I18n API are:</source>
          <target state="translated">I18n API의 가장 중요한 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4ba9a929bfe627197eb5e19693e6263041543a97" translate="yes" xml:space="preserve">
          <source>The most important of these is the controller file, &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;. Let's take a look at it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5193516e477d3a63bb08f8e687e1bad99cf2fe" translate="yes" xml:space="preserve">
          <source>The most lightweight way to get &lt;code&gt;blank?&lt;/code&gt; is to cherry-pick the file that defines it.</source>
          <target state="translated">비우는 가장 가벼운 방법 &lt;code&gt;blank?&lt;/code&gt; 파일을 정의하는 파일을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="deaa5c007cdde26cbe743db657315259b43d7a47" translate="yes" xml:space="preserve">
          <source>The most significant part of the reloading process is the Class Unload, where all autoloaded classes are removed, ready to be loaded again. This will occur immediately before either the Run or Complete callback, depending on the &lt;code&gt;reload_classes_only_on_change&lt;/code&gt; setting.</source>
          <target state="translated">재로드 프로세스의 가장 중요한 부분은 모든 자동로드 된 클래스가 제거되어 다시로드 될 수있는 클래스 언로드입니다. &lt;code&gt;reload_classes_only_on_change&lt;/code&gt; 설정 에 따라 Run 또는 Complete 콜백 직전에 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="f22b7e6bbaf30a8c9243fc72a0dbaa5e651e526a" translate="yes" xml:space="preserve">
          <source>The most simple negative CAPTCHA is one hidden honeypot field. On the server side, you will check the value of the field: If it contains any text, it must be a bot. Then, you can either ignore the post or return a positive result, but not saving the post to the database. This way the bot will be satisfied and moves on.</source>
          <target state="translated">가장 간단한 네거티브 CAPTCHA는 숨겨진 허니팟 필드입니다. 서버 측에서 필드 값을 확인합니다. 텍스트가 포함 된 경우 봇이어야합니다. 그런 다음 게시물을 무시하거나 긍정적 인 결과를 반환 할 수 있지만 게시물을 데이터베이스에 저장하지는 마십시오. 이 방법으로 봇은 만족하고 계속 움직입니다.</target>
        </trans-unit>
        <trans-unit id="5b08222207f915df820834ca331365d73b1692b3" translate="yes" xml:space="preserve">
          <source>The most usual way of setting (and passing) the locale would be to include it in URL params, as we did in the &lt;code&gt;I18n.with_locale(params[:locale], &amp;amp;action)&lt;/code&gt;&lt;em&gt;around_action&lt;/em&gt; in the first example. We would like to have URLs like &lt;code&gt;www.example.com/books?locale=ja&lt;/code&gt; or &lt;code&gt;www.example.com/ja/books&lt;/code&gt; in this case.</source>
          <target state="translated">로케일을 설정하고 전달하는 가장 일반적인 방법은 첫 번째 예에서 &lt;code&gt;I18n.with_locale(params[:locale], &amp;amp;action)&lt;/code&gt; &lt;em&gt;around_action&lt;/em&gt; 에서 와 같이 로케일 을 URL 매개 변수에 포함시키는 것입니다 . 이 경우 &lt;code&gt;www.example.com/books?locale=ja&lt;/code&gt; 또는 &lt;code&gt;www.example.com/ja/books&lt;/code&gt; 와 같은 URL이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="7e572f11bc576cfa35e26cdda3779b627b91359a" translate="yes" xml:space="preserve">
          <source>The mysql2 and postgresql adapters support setting the transaction isolation level.</source>
          <target state="translated">mysql2 및 postgresql 어댑터는 트랜잭션 격리 레벨 설정을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="7abd2783257ce5c418b69249f67d3cccad19bd9b" translate="yes" xml:space="preserve">
          <source>The name is assumed to be the one of a top-level constant, no matter whether it starts with &amp;ldquo;::&amp;rdquo; or not. No lexical context is taken into account:</source>
          <target state="translated">이름은&amp;ldquo;::&amp;rdquo;로 시작하든 아니든 최상위 상수 중 하나 인 것으로 가정합니다. 어휘 적 맥락은 고려되지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="7682be9c1ac3480a8408c4e7c8381256b4759439" translate="yes" xml:space="preserve">
          <source>The name may be given as a symbol or string. A symbol is tested against the bare constant name, a string is against the fully qualified constant name.</source>
          <target state="translated">이름은 기호 또는 문자열로 제공 될 수 있습니다. 기호는 완전 상수 이름에 대해 테스트되고 문자열은 완전한 상수 이름에 대해 테스트됩니다.</target>
        </trans-unit>
        <trans-unit id="ff2cc46757b67b828a3611568ef0999be93f8863" translate="yes" xml:space="preserve">
          <source>The name of children nodes is by default the name of the root node singularized. In the examples above we've seen &quot;contributor&quot; and &quot;object&quot;. The option &lt;code&gt;:children&lt;/code&gt; allows you to set these node names.</source>
          <target state="translated">하위 노드의 이름은 기본적으로 루트 노드의 이름이 단일화됩니다. 위의 예에서 우리는 &quot;기여자&quot;와 &quot;개체&quot;를 보았습니다. &lt;code&gt;:children&lt;/code&gt; 옵션을 사용하면 이러한 노드 이름을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c6ce84bb5ee288c0d73a45b947b0bd4d166718a" translate="yes" xml:space="preserve">
          <source>The name of the column records are ordered by if no explicit order clause is used during an ordered finder call. If not set the primary key is used.</source>
          <target state="translated">정렬 된 파인더 호출 중에 명시 적 순서 절이 사용되지 않으면 열 레코드의 이름이 순서화됩니다. 설정하지 않으면 기본 키가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2d5cd10d5efb705d95ff6ef881164cb30052e176" translate="yes" xml:space="preserve">
          <source>The name of the event</source>
          <target state="translated">행사 명</target>
        </trans-unit>
        <trans-unit id="99cde37466813b73e8fdf6722f4504527670a021" translate="yes" xml:space="preserve">
          <source>The name of the file is passed as an argument, and the method yields a file handle opened for writing. Once the block is done &lt;code&gt;atomic_write&lt;/code&gt; closes the file handle and completes its job.</source>
          <target state="translated">파일 이름이 인수로 전달되고이 메소드는 쓰기 위해 열린 파일 핸들을 생성합니다. 블록이 완료되면 &lt;code&gt;atomic_write&lt;/code&gt; 는 파일 핸들을 닫고 작업을 완료합니다.</target>
        </trans-unit>
        <trans-unit id="0521ba09d337a2d778bfca23d5ae64a4f07775ab" translate="yes" xml:space="preserve">
          <source>The name of the internal metadata table. By default, the value is &lt;code&gt;&quot;ar_internal_metadata&quot;&lt;/code&gt;.</source>
          <target state="translated">내부 메타 데이터 테이블의 이름입니다. 기본적으로 값은 &lt;code&gt;&quot;ar_internal_metadata&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="87b9d571692332990b0d9ecc4d38d8bf64d75f30" translate="yes" xml:space="preserve">
          <source>The name of the other model is pluralized when declaring a &lt;code&gt;has_many&lt;/code&gt; association.</source>
          <target state="translated">다른 모델의 이름은 &lt;code&gt;has_many&lt;/code&gt; 연관을 선언 할 때 복수형 입니다.</target>
        </trans-unit>
        <trans-unit id="fae05eeb96ed23d05d4d24f0db744b426f26af4b" translate="yes" xml:space="preserve">
          <source>The name of the primary key, if one is to be added automatically. Defaults to &lt;code&gt;id&lt;/code&gt;. If &lt;code&gt;:id&lt;/code&gt; is false, then this option is ignored.</source>
          <target state="translated">기본 키의 이름 (자동으로 추가 될 경우) 기본값은 &lt;code&gt;id&lt;/code&gt; 입니다. 경우 &lt;code&gt;:id&lt;/code&gt; 거짓,이 옵션은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="da0fc804bd180d28e2d8888d63d2769586922e81" translate="yes" xml:space="preserve">
          <source>The name of the schema migrations table. By default, the value is &lt;code&gt;&quot;schema_migrations&quot;&lt;/code&gt;.</source>
          <target state="translated">스키마 마이그레이션 테이블의 이름입니다. 기본적으로 값은 &lt;code&gt;&quot;schema_migrations&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e6c80f6f8b2cab6f8d72af40fb12b078c9f2364a" translate="yes" xml:space="preserve">
          <source>The name of the table that contains the referenced primary key.</source>
          <target state="translated">참조 된 기본 키가 포함 된 테이블의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7b4e2235c7c60d1a2f073929cfea99b7c7914199" translate="yes" xml:space="preserve">
          <source>The name used to generate routing helpers.</source>
          <target state="translated">라우팅 헬퍼를 생성하는 데 사용되는 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3964abe7f918479b2abff91c768cdbbc000a3785" translate="yes" xml:space="preserve">
          <source>The namespace for :controller.</source>
          <target state="translated">: controller의 네임 스페이스</target>
        </trans-unit>
        <trans-unit id="c0a61dcbd71b123c4388becd07a60ebdedcd55c9" translate="yes" xml:space="preserve">
          <source>The naming convention of controllers in Rails favors pluralization of the last word in the controller's name, although it is not strictly required (e.g. &lt;code&gt;ApplicationController&lt;/code&gt;). For example, &lt;code&gt;ClientsController&lt;/code&gt; is preferable to &lt;code&gt;ClientController&lt;/code&gt;, &lt;code&gt;SiteAdminsController&lt;/code&gt; is preferable to &lt;code&gt;SiteAdminController&lt;/code&gt; or &lt;code&gt;SitesAdminsController&lt;/code&gt;, and so on.</source>
          <target state="translated">Rails에서 컨트롤러의 이름 지정 규칙은 컨트롤러 이름에서 마지막 단어의 복수화를 선호하지만 엄격하게 요구되지는 않습니다 (예 : &lt;code&gt;ApplicationController&lt;/code&gt; ). 예를 들어, &lt;code&gt;ClientsController&lt;/code&gt; 는 것이 바람직하다 &lt;code&gt;ClientController&lt;/code&gt; , &lt;code&gt;SiteAdminsController&lt;/code&gt; 는 것이 바람직하다 &lt;code&gt;SiteAdminController&lt;/code&gt; 또는 &lt;code&gt;SitesAdminsController&lt;/code&gt; 등.</target>
        </trans-unit>
        <trans-unit id="da43aa56708a046e9d919ba08558af7f2b7c90f6" translate="yes" xml:space="preserve">
          <source>The native Range#=== behavior is untouched.</source>
          <target state="translated">기본 Range # === 동작은 그대로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="01d960ee2f543130c2fa5e0f4bbe3a7d3b4d5d58" translate="yes" xml:space="preserve">
          <source>The native Range#cover? behavior is untouched.</source>
          <target state="translated">네이티브 Range # cover? 행동은 그대로입니다.</target>
        </trans-unit>
        <trans-unit id="addd76f14ed86b37f8794f1949371e30871af465" translate="yes" xml:space="preserve">
          <source>The native Range#include? behavior is untouched.</source>
          <target state="translated">네이티브 범위 #include? 행동은 그대로입니다.</target>
        </trans-unit>
        <trans-unit id="955570bf5e30a267b95e2b19e01795ab5b90fe19" translate="yes" xml:space="preserve">
          <source>The negative of the &lt;code&gt;Enumerable#include?&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if the collection does not include the object.</source>
          <target state="translated">&lt;code&gt;Enumerable#include?&lt;/code&gt; 의 부정 ? . 컬렉션에 개체가 포함되어 있지 않으면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="aa592105289e44cdc2fe7058b0d283c263374192" translate="yes" xml:space="preserve">
          <source>The nesting at the top-level of code interpreted by &lt;code&gt;Kernel#load&lt;/code&gt; is empty unless the &lt;code&gt;load&lt;/code&gt; call receives a true value as second argument, in which case a newly created anonymous module is pushed by Ruby.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; 호출이 두 번째 인수로 true 값을 수신 하지 않는 한 &lt;code&gt;Kernel#load&lt;/code&gt; 로 해석 된 최상위 코드의 중첩 은 비어 있습니다 .이 경우 새로 작성된 익명 모듈이 Ruby에 의해 푸시됩니다.</target>
        </trans-unit>
        <trans-unit id="44f681ce3d5bf281490d9093acabc279f90b97b0" translate="yes" xml:space="preserve">
          <source>The nesting in (3) consists of two module objects:</source>
          <target state="translated">(3)의 중첩은 두 개의 모듈 객체로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="1f2776db1df9e895a5437fc06cd98a8e3f712806" translate="yes" xml:space="preserve">
          <source>The nesting is an internal stack maintained by the interpreter, and it gets modified according to these rules:</source>
          <target state="translated">중첩은 인터프리터가 유지 관리하는 내부 스택이며 다음 규칙에 따라 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="d8132f087b3a3c8f4dbbe4d6d5c2d07c8a3b1719" translate="yes" xml:space="preserve">
          <source>The new Rails version might have different configuration defaults than the previous version. However, after following the steps described above, your application would still run with configuration defaults from the &lt;em&gt;previous&lt;/em&gt; Rails version. That's because the value for &lt;code&gt;config.load_defaults&lt;/code&gt; in &lt;code&gt;config/application.rb&lt;/code&gt; has not been changed yet.</source>
          <target state="translated">새로운 Rails 버전은 이전 버전과 다른 구성 기본값을 가질 수 있습니다. 그러나 위에서 설명한 단계를 수행 한 후에도 애플리케이션은 여전히 &lt;em&gt;이전&lt;/em&gt; Rails 버전 의 구성 기본값으로 실행됩니다 . 그의는 값 때문에 &lt;code&gt;config.load_defaults&lt;/code&gt; 에서 &lt;code&gt;config/application.rb&lt;/code&gt; 아직 변경되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="5cd4f4aaeecefdcd80f1ff388b96a1c0963cfd34" translate="yes" xml:space="preserve">
          <source>The new adjusted credit value is stored in the session.</source>
          <target state="translated">새로운 조정 된 크레딧 값이 세션에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="3236ac103406c4313c28858fa0a2054906ffe321" translate="yes" xml:space="preserve">
          <source>The new configuration point</source>
          <target state="translated">새로운 구성 지점</target>
        </trans-unit>
        <trans-unit id="0da16999f13727907b8b87c6035cd8e31952aef2" translate="yes" xml:space="preserve">
          <source>The new instance is yielded to the passed block. Typically the block will create some routes using &lt;code&gt;set.draw { match ... }&lt;/code&gt;:</source>
          <target state="translated">새로운 인스턴스는 전달 된 블록에 양보됩니다. 일반적으로 블록은 &lt;code&gt;set.draw { match ... }&lt;/code&gt; 사용하여 일부 경로를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="361f89f47f1ce3ba7058a4305e31979330927e55" translate="yes" xml:space="preserve">
          <source>The new method, &lt;code&gt;update&lt;/code&gt;, is used when you want to update a record that already exists, and it accepts a hash containing the attributes that you want to update. As before, if there was an error updating the article we want to show the form back to the user.</source>
          <target state="translated">새로운 메소드 인 &lt;code&gt;update&lt;/code&gt; 는 이미 존재하는 레코드를 업데이트하려고 할 때 사용되며 업데이트하려는 속성이 포함 된 해시를 허용합니다. 이전과 마찬가지로 기사를 업데이트하는 동안 오류가 발생하면 양식을 사용자에게 다시 표시하려고합니다.</target>
        </trans-unit>
        <trans-unit id="6412348bc9179e1b6361749c95aec125c2d79269" translate="yes" xml:space="preserve">
          <source>The new record might not be saved to the database; that depends on whether validations passed or not (just like &lt;code&gt;create&lt;/code&gt;).</source>
          <target state="translated">새 레코드가 데이터베이스에 저장되지 않았을 수 있습니다. 유효성 검사가 통과했는지 여부에 따라 다릅니다 ( &lt;code&gt;create&lt;/code&gt; 처럼 ).</target>
        </trans-unit>
        <trans-unit id="3b0901f800f4c2c35a3db6cb60e5551b6c28b8fd" translate="yes" xml:space="preserve">
          <source>The new route is another &lt;code&gt;get&lt;/code&gt; route, but it has something extra in its path: &lt;code&gt;:id&lt;/code&gt;. This designates a route &lt;em&gt;parameter&lt;/em&gt;. A route parameter captures a segment of the request's path, and puts that value into the &lt;code&gt;params&lt;/code&gt; Hash, which is accessible by the controller action. For example, when handling a request like &lt;code&gt;GET http://localhost:3000/articles/1&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; would be captured as the value for &lt;code&gt;:id&lt;/code&gt;, which would then be accessible as &lt;code&gt;params[:id]&lt;/code&gt; in the &lt;code&gt;show&lt;/code&gt; action of &lt;code&gt;ArticlesController&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f8325afa2e53ab911c7dd3a1bd0b5d96aac1df" translate="yes" xml:space="preserve">
          <source>The new version updates &lt;code&gt;sanitize&lt;/code&gt;, so it can take a &lt;code&gt;Loofah::Scrubber&lt;/code&gt; for powerful scrubbing. &lt;a href=&quot;https://github.com/flavorjones/loofah#loofahscrubber&quot;&gt;See some examples of scrubbers here&lt;/a&gt;.</source>
          <target state="translated">새 버전 업데이트는 &lt;code&gt;sanitize&lt;/code&gt; 이므로 강력한 제거를 위해 &lt;code&gt;Loofah::Scrubber&lt;/code&gt; 가 필요할 수 있습니다 . &lt;a href=&quot;https://github.com/flavorjones/loofah#loofahscrubber&quot;&gt;여기에서 세정기의 예를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d1894e9581c114e574d8b39a2616de5b78a0f089" translate="yes" xml:space="preserve">
          <source>The next customization on the workflow will be to stop generating stylesheet and test fixture files for scaffolds altogether. We can achieve that by changing our configuration to the following:</source>
          <target state="translated">워크 플로우의 다음 사용자 정의는 스캐 폴드에 대한 스타일 시트 및 테스트 픽스처 파일 생성을 중지하는 것입니다. 구성을 다음과 같이 변경하여이를 달성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8b49bfc24f4c677b6906642f014ecee042d3e62" translate="yes" xml:space="preserve">
          <source>The next level is to simply load all extensions to &lt;code&gt;Object&lt;/code&gt;. As a rule of thumb, extensions to &lt;code&gt;SomeClass&lt;/code&gt; are available in one shot by loading &lt;code&gt;active_support/core_ext/some_class&lt;/code&gt;.</source>
          <target state="translated">다음 단계는 모든 확장을 &lt;code&gt;Object&lt;/code&gt; 에 간단히로드하는 것 입니다. 경험상 &lt;code&gt;SomeClass&lt;/code&gt; 의 확장 은 &lt;code&gt;active_support/core_ext/some_class&lt;/code&gt; 를 로드하여 한 번에 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6a1f1dbc7d882abfb6cfb4b67d27a4e28897661" translate="yes" xml:space="preserve">
          <source>The next line in &lt;code&gt;config/application.rb&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; 의 다음 줄은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="890dcab656e3faff6f378319839d5ff9b37f86c6" translate="yes" xml:space="preserve">
          <source>The next problem was MySpace filtering the word &quot;javascript&quot;, so the author used &quot;java&amp;lt;NEWLINE&amp;gt;script&quot; to get around this:</source>
          <target state="translated">다음 문제는 MySpace가 단어 &quot;javascript&quot;를 필터링하는 것이므로 저자는 &quot;java &amp;lt;NEWLINE&amp;gt; script&quot;를 사용하여이 문제를 해결했습니다.</target>
        </trans-unit>
        <trans-unit id="95abed138dae7b61a5b5608d40b96e6a4ae0a51d" translate="yes" xml:space="preserve">
          <source>The next problem was MySpace filtering the word &lt;code&gt;&quot;javascript&quot;&lt;/code&gt;, so the author used &lt;code&gt;&quot;java&amp;lt;NEWLINE&amp;gt;script&quot;&lt;/code&gt; to get around this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ab928a1a7619a09a73390e50d76a97c8e90778" translate="yes" xml:space="preserve">
          <source>The next step is to make the class that represents a &lt;code&gt;User&lt;/code&gt; in the application customizable for the engine. This is because that class may not always be &lt;code&gt;User&lt;/code&gt;, as previously explained. To make this setting customizable, the engine will have a configuration setting called &lt;code&gt;author_class&lt;/code&gt; that will be used to specify which class represents users inside the application.</source>
          <target state="translated">다음 단계는 애플리케이션에서 &lt;code&gt;User&lt;/code&gt; 를 나타내는 클래스를 엔진에 대해 사용자 정의 할 수있게 만드는 것 입니다. 이전에 설명한 것처럼 해당 클래스가 항상 &lt;code&gt;User&lt;/code&gt; 가 아닐 수도 있기 때문입니다 . 이 설정을 사용자 정의 할 수 있도록 엔진에는 &lt;code&gt;author_class&lt;/code&gt; 라는 구성 설정이 있으며,이 설정 은 애플리케이션 내부의 사용자를 나타내는 클래스를 지정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="79e3f57a1b3ee60f1474c6b0b6b6f30307fee9e6" translate="yes" xml:space="preserve">
          <source>The next step is to switch the &lt;code&gt;Blorgh::Article&lt;/code&gt; model over to this new setting. Change the &lt;code&gt;belongs_to&lt;/code&gt; association inside this model (&lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt;) to this:</source>
          <target state="translated">다음 단계는 &lt;code&gt;Blorgh::Article&lt;/code&gt; 모델을이 새로운 설정 으로 전환하는 것 입니다. 이 모델 ( &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; ) 내의 &lt;code&gt;belongs_to&lt;/code&gt; 연관을 다음과 같이 변경하십시오 :</target>
        </trans-unit>
        <trans-unit id="665b7f33f63099c0b1cea4b1fb4ebac3b0e2d737" translate="yes" xml:space="preserve">
          <source>The next thing that changes in isolated engines is the behavior of routes. Normally, when you namespace your controllers, you also need to namespace the related routes. With an isolated engine, the engine's namespace is automatically applied, so you don't need to specify it explicitly in your routes:</source>
          <target state="translated">격리 된 엔진에서 변경되는 다음 사항은 경로의 동작입니다. 일반적으로 컨트롤러의 네임 스페이스를 만들 때 관련 경로의 네임 스페이스도 지정해야합니다. 격리 된 엔진을 사용하면 엔진의 네임 스페이스가 자동으로 적용되므로 경로에서 명시 적으로 지정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="8035be6c63365e5b247a107ff1f6abbe4ff4d98d" translate="yes" xml:space="preserve">
          <source>The nonce is opaque to the client. Composed of &lt;a href=&quot;../../time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, and hash of &lt;a href=&quot;../../time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; with secret key from the Rails session secret generated upon creation of project. Ensures the time cannot be modified by client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d819b142e381f44914883470304c3b40e5adf1" translate="yes" xml:space="preserve">
          <source>The nonce is opaque to the client. Composed of &lt;a href=&quot;../../time&quot;&gt;Time&lt;/a&gt;, and hash of &lt;a href=&quot;../../time&quot;&gt;Time&lt;/a&gt; with secret key from the Rails session secret generated upon creation of project. Ensures the time cannot be modified by client.</source>
          <target state="translated">nonce는 클라이언트에게 불투명합니다. 로 구성 &lt;a href=&quot;../../time&quot;&gt;시간&lt;/a&gt; , 그리고 해시 &lt;a href=&quot;../../time&quot;&gt;시간&lt;/a&gt; 프로젝트 생성시 생성 된 레일 세션의 비밀에서 비밀 키. 클라이언트가 시간을 수정할 수 없도록합니다.</target>
        </trans-unit>
        <trans-unit id="d6afe7561df1d98a902707f851ee94efab958e53" translate="yes" xml:space="preserve">
          <source>The number in the middle is the &lt;code&gt;product_id&lt;/code&gt; followed by the timestamp value in the &lt;code&gt;updated_at&lt;/code&gt; attribute of the product record. Rails uses the timestamp value to make sure it is not serving stale data. If the value of &lt;code&gt;updated_at&lt;/code&gt; has changed, a new key will be generated. Then Rails will write a new cache to that key, and the old cache written to the old key will never be used again. This is called key-based expiration.</source>
          <target state="translated">중간에있는 숫자는 &lt;code&gt;product_id&lt;/code&gt; 와 제품 레코드 의 &lt;code&gt;updated_at&lt;/code&gt; 속성 에있는 타임 스탬프 값입니다 . Rails는 타임 스탬프 값을 사용하여 오래된 데이터를 제공하지 않도록합니다. &lt;code&gt;updated_at&lt;/code&gt; 의 값 이 변경되면 새 키가 생성됩니다. 그런 다음 Rails는 해당 키에 새 캐시를 작성하고 이전 키에 작성된 이전 캐시는 다시 사용되지 않습니다. 이것을 키 기반 만료라고합니다.</target>
        </trans-unit>
        <trans-unit id="8ee1df042709719100df6be6c3b0a3fd04dc19b3" translate="yes" xml:space="preserve">
          <source>The number of arguments in the signature must match. If the object responds to the method the call is attempted and &lt;code&gt;ArgumentError&lt;/code&gt; is still raised in case of argument mismatch.</source>
          <target state="translated">서명의 인수 수가 일치해야합니다. 객체가 메소드에 응답하면 호출이 시도되고 인수 불일치가 발생하면 &lt;code&gt;ArgumentError&lt;/code&gt; 가 계속 발생합니다.</target>
        </trans-unit>
        <trans-unit id="505e9d95ab3606901bc6ffa80ead6b281f7cb035" translate="yes" xml:space="preserve">
          <source>The number of iterations that will be done by the partial.</source>
          <target state="translated">부분적으로 수행 될 반복 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="038422c23b9cb97bfa4b6a6b66a4d0be0680f470" translate="yes" xml:space="preserve">
          <source>The number of workers passed is the number of times the process will be forked. You may want to parallelize your local test suite differently from your CI, so an environment variable is provided to be able to easily change the number of workers a test run should use:</source>
          <target state="translated">통과 한 작업자 수는 프로세스가 분기되는 횟수입니다. 로컬 테스트 스위트를 CI와 다르게 병렬화 할 수 있으므로 테스트 실행에 사용해야하는 작업자 수를 쉽게 변경할 수있는 환경 변수가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="33d090a4862daa4700aeb1957ac30a3aad04f48a" translate="yes" xml:space="preserve">
          <source>The number of workers passed to &lt;code&gt;parallelize&lt;/code&gt; determines the number of threads the tests will use. You may want to parallelize your local test suite differently from your CI, so an environment variable is provided to be able to easily change the number of workers a test run should use:</source>
          <target state="translated">&lt;code&gt;parallelize&lt;/code&gt; 전달 된 작업자 수에 따라 테스트에서 사용할 스레드 수가 결정됩니다. 로컬 테스트 스위트를 CI와 다르게 병렬화 할 수 있으므로 테스트 실행에 사용해야하는 작업자 수를 쉽게 변경할 수있는 환경 변수가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="bec8710416db3a7f64fed68d9b0b0bf55970a04e" translate="yes" xml:space="preserve">
          <source>The object in the &lt;code&gt;params&lt;/code&gt; hash is an instance of &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Http/UploadedFile.html&quot;&gt;&lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt;&lt;/a&gt;. The following snippet saves the uploaded file in &lt;code&gt;#{Rails.root}/public/uploads&lt;/code&gt; under the same name as the original file.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 해시 의 객체 는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Http/UploadedFile.html&quot;&gt; &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt; &lt;/a&gt; 의 인스턴스입니다 . 다음 스 니펫은 업로드 된 파일을 원본 파일과 동일한 이름으로 &lt;code&gt;#{Rails.root}/public/uploads&lt;/code&gt; 에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="638d1c2387bff55fda430b14e4440039041a5b60" translate="yes" xml:space="preserve">
          <source>The object passed as &lt;code&gt;:model&lt;/code&gt; in &lt;code&gt;form_with&lt;/code&gt; controls the key used in &lt;code&gt;params&lt;/code&gt; to access the form's values. Here the name is &lt;code&gt;article&lt;/code&gt; and so all the inputs have names of the form &lt;code&gt;article[attribute_name]&lt;/code&gt;. Accordingly, in the &lt;code&gt;create&lt;/code&gt; action &lt;code&gt;params[:article]&lt;/code&gt; will be a hash with keys &lt;code&gt;:title&lt;/code&gt; and &lt;code&gt;:body&lt;/code&gt;. You can read more about the significance of input names in chapter &lt;a href=&quot;#understanding-parameter-naming-conventions&quot;&gt;Understanding Parameter Naming Conventions&lt;/a&gt; of this guide.</source>
          <target state="translated">&lt;code&gt;form_with&lt;/code&gt; 에서 &lt;code&gt;:model&lt;/code&gt; 로 전달 된 객체 는 &lt;code&gt;params&lt;/code&gt; 에 사용 된 키를 제어 하여 양식 값에 액세스합니다. 여기서 이름은 &lt;code&gt;article&lt;/code&gt; 이므로 모든 입력은 &lt;code&gt;article[attribute_name]&lt;/code&gt; 형식의 이름을 갖습니다 . 따라서 &lt;code&gt;create&lt;/code&gt; action에서 &lt;code&gt;params[:article]&lt;/code&gt; 은 키 &lt;code&gt;:title&lt;/code&gt; 및 &lt;code&gt;:body&lt;/code&gt; 가있는 해시입니다 . 이 안내서의 &lt;a href=&quot;#understanding-parameter-naming-conventions&quot;&gt;매개 변수 명명 규칙 이해&lt;/a&gt; 장에서 입력 이름의 중요성에 대해 자세히 알아볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3db7e74818e7069b61951f9db787751ef0935d02" translate="yes" xml:space="preserve">
          <source>The object returned is a relation, which can be further extended.</source>
          <target state="translated">리턴 된 오브젝트는 관계이며 추가로 확장 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ee58bc1aa9442c84125f9312a20866565bb95cb" translate="yes" xml:space="preserve">
          <source>The object which the error belongs to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebeb64ea392c06389da82d15b57e2dc0fb1998e" translate="yes" xml:space="preserve">
          <source>The object yielded by &lt;code&gt;fields_for&lt;/code&gt; is a form builder like the one yielded by &lt;code&gt;form_with&lt;/code&gt;.</source>
          <target state="translated">에 의해 산출 개체 &lt;code&gt;fields_for&lt;/code&gt; 은 에 의해 산출 것과 같은 형태 빌더입니다 &lt;code&gt;form_with&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fea8f8996397205887d460fe4b147f31a68fa5ae" translate="yes" xml:space="preserve">
          <source>The object yielded by &lt;code&gt;form_with&lt;/code&gt; and &lt;code&gt;fields_for&lt;/code&gt; is an instance of &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html&quot;&gt;&lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt;&lt;/a&gt;. Form builders encapsulate the notion of displaying form elements for a single object. While you can write helpers for your forms in the usual way, you can also create a subclass of &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt;, and add the helpers there. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57072ad448de4139f9cc538a750565d5bae03dd9" translate="yes" xml:space="preserve">
          <source>The object yielded by &lt;code&gt;form_with&lt;/code&gt; and &lt;code&gt;fields_for&lt;/code&gt; is an instance of &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html&quot;&gt;&lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt;&lt;/a&gt;. Form builders encapsulate the notion of displaying form elements for a single object. While you can write helpers for your forms in the usual way, you can also create subclass &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; and add the helpers there. For example:</source>
          <target state="translated">&lt;code&gt;form_with&lt;/code&gt; 와 &lt;code&gt;fields_for&lt;/code&gt; 가 생성 한 객체는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html&quot;&gt; &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; &lt;/a&gt; 의 인스턴스입니다 . 양식 작성기는 단일 객체에 대한 양식 요소를 표시하는 개념을 요약합니다. 일반적인 방법으로 양식에 대한 헬퍼를 작성할 수 있지만 서브 클래스 &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; 작성 하고 헬퍼를 추가 할 수도 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3de27dfed2e4c78b35ecc58982517007c169ac2a" translate="yes" xml:space="preserve">
          <source>The only ActiveStorage service that provides this hook so far is GCS.</source>
          <target state="translated">지금까지이 후크를 제공하는 유일한 ActiveStorage 서비스는 GCS입니다.</target>
        </trans-unit>
        <trans-unit id="caaae6a0029374b4c88ed2f441090956efc2faaa" translate="yes" xml:space="preserve">
          <source>The only catch with using the SCM options is that you have to make your application's directory first, then initialize your SCM, then you can run the &lt;code&gt;rails new&lt;/code&gt; command to generate the basis of your app.</source>
          <target state="translated">SCM 옵션을 사용하는 유일한 방법은 응용 프로그램의 디렉토리를 먼저 만든 다음 SCM을 초기화 한 다음 &lt;code&gt;rails new&lt;/code&gt; 명령을 실행 하여 앱의 기초를 생성해야한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7c023b3703738247136fd6b3e082be811c39b62e" translate="yes" xml:space="preserve">
          <source>The only downside to this code is that it requires a round trip to the browser: the browser requested the show action with &lt;code&gt;/books/1&lt;/code&gt; and the controller finds that there are no books, so the controller sends out a 302 redirect response to the browser telling it to go to &lt;code&gt;/books/&lt;/code&gt;, the browser complies and sends a new request back to the controller asking now for the &lt;code&gt;index&lt;/code&gt; action, the controller then gets all the books in the database and renders the index template, sending it back down to the browser which then shows it on your screen.</source>
          <target state="translated">이 코드의 유일한 단점은 브라우저로의 왕복 여행이 필요하다는 것입니다. 브라우저는 &lt;code&gt;/books/1&lt;/code&gt; 로 show 작업을 요청 했고 컨트롤러는 책이 없다는 것을 발견하여 컨트롤러가 브라우저에 302 리디렉션 응답을 보냅니다. 브라우저 가 &lt;code&gt;/books/&lt;/code&gt; 로 이동 하면 브라우저는 &lt;code&gt;index&lt;/code&gt; 작업을 요청하는 컨트롤러에 새로운 요청을 다시 보내고 다시 보내면 컨트롤러는 데이터베이스의 모든 책을 가져 와서 색인 템플릿을 렌더링하여 브라우저가 화면에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="fc98b0333a36a5de22e2fad582904083f06df014" translate="yes" xml:space="preserve">
          <source>The only exception in &lt;a href=&quot;activemodel&quot;&gt;&lt;code&gt;ActiveModel&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../../activerecord&quot;&gt;&lt;code&gt;ActiveRecord&lt;/code&gt;&lt;/a&gt; is the use of self.build instead of self.new.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e864bfdb02d383ce40daeb3ce7e75a9c7a05ef9f" translate="yes" xml:space="preserve">
          <source>The only exception in &lt;a href=&quot;activemodel&quot;&gt;ActiveModel&lt;/a&gt; for &lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord&lt;/a&gt; is the use of self.build instead of self.new.</source>
          <target state="translated">의 유일한 예외 &lt;a href=&quot;activemodel&quot;&gt;ActiveModel&lt;/a&gt; 을위한 &lt;a href=&quot;../../activerecord&quot;&gt;액티브는&lt;/a&gt; self.build 대신 self.new의 사용이다.</target>
        </trans-unit>
        <trans-unit id="34c0aabafc22ecd298ab851ec0d24c56c1e88a3c" translate="yes" xml:space="preserve">
          <source>The only folder seen by the world as-is. Contains static files and compiled assets.</source>
          <target state="translated">세계에서 볼 수있는 유일한 폴더는 그대로입니다. 정적 파일 및 컴파일 된 자산을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="663af767fd7a7f252ce4ee85857ca02667951d37" translate="yes" xml:space="preserve">
          <source>The only option specific to &lt;code&gt;link_to&lt;/code&gt; (&lt;code&gt;:method&lt;/code&gt;) is used as follows:</source>
          <target state="translated">&lt;code&gt;link_to&lt;/code&gt; ( &lt;code&gt;:method&lt;/code&gt; )와 관련된 유일한 옵션 은 다음과 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7c0ff2b98d6f31ee4756bfd1d58b0f4832f27608" translate="yes" xml:space="preserve">
          <source>The only way to explicitly not use the connection information in &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; is to specify an explicit URL connection using the &lt;code&gt;&quot;url&quot;&lt;/code&gt; sub key:</source>
          <target state="translated">&lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; 에서 연결 정보를 명시 적으로 사용하지 않는 유일한 방법 은 &lt;code&gt;&quot;url&quot;&lt;/code&gt; 하위 키 를 사용하여 명시 적 URL 연결을 지정하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="485f1b08d0393f65ac194833dc19f2f4b02d18c0" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;:prefix&lt;/code&gt; adds a prefix to the name of the generated method. This may be handy for example to get a better name:</source>
          <target state="translated">&lt;code&gt;:prefix&lt;/code&gt; 옵션 은 생성 된 메소드의 이름에 접 두부를 추가합니다. 예를 들어 더 나은 이름을 얻는 것이 편리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="d676be4f5f3aec25fb5d02ebd5821b65122eba01" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;:private&lt;/code&gt; changes methods scope:</source>
          <target state="translated">&lt;code&gt;:private&lt;/code&gt; 옵션 변경 방법 범위 :</target>
        </trans-unit>
        <trans-unit id="ebf24d67cdabeb37ae32a041724d968a479a51ca" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;:separator&lt;/code&gt; can be a regexp:</source>
          <target state="translated">&lt;code&gt;:separator&lt;/code&gt; 옵션 은 정규 표현식이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0490cc17857480b9ef81752f108a7a4d9fbadfb9" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;include_root_in_json&lt;/code&gt; controls the top-level behavior of &lt;code&gt;as_json&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;as_json&lt;/code&gt; will emit a single root node named after the object's type. The default value for &lt;code&gt;include_root_in_json&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;include_root_in_json&lt;/code&gt; 옵션 은 &lt;code&gt;as_json&lt;/code&gt; 의 최상위 동작을 제어합니다 . &lt;code&gt;true&lt;/code&gt; 인 경우 &lt;code&gt;as_json&lt;/code&gt; 은 객체 유형의 이름을 딴 단일 루트 노드를 생성합니다. &lt;code&gt;include_root_in_json&lt;/code&gt; 옵션 의 기본값 은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0ce777a5e57cdf17270d4c689d41bf2c6a2b14b4" translate="yes" xml:space="preserve">
          <source>The option symbols for setting cookies are:</source>
          <target state="translated">쿠키 설정을위한 옵션 기호는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bc84187c74ec254bde3266c466aa3c582e0b4eff" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;:lock&lt;/code&gt; flag option allows you to lock the reloaded record:</source>
          <target state="translated">선택적 &lt;code&gt;:lock&lt;/code&gt; 플래그 옵션을 사용하면 다시로드 된 레코드를 잠글 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="336ab459b6485d2886e181144760cc2ad7abeb56" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;if:&lt;/code&gt; argument accepts a truthy/falsy value or an object that responds to &lt;code&gt;.call&lt;/code&gt;. If truthy, then matching warnings will be allowed. If falsey then the method yields to the block without allowing the warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb1b69daa018b38b7e714147d617a0beace3731" translate="yes" xml:space="preserve">
          <source>The optional envs given as argument and the hash with group dependencies;</source>
          <target state="translated">인자로 주어진 선택적 envs와 그룹 의존성을 가진 해시;</target>
        </trans-unit>
        <trans-unit id="8bad16bbf06e5c49b47b6289efd545cfe8573f00" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;finish&lt;/code&gt; are especially useful if you want multiple workers dealing with the same processing queue. You can make worker 1 handle all the records between id 1 and 9999 and worker 2 handle from 10000 and beyond by setting the &lt;code&gt;:start&lt;/code&gt; and &lt;code&gt;:finish&lt;/code&gt; option on each worker.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;finish&lt;/code&gt; 옵션 은 여러 작업자가 동일한 처리 큐를 처리하려는 경우 특히 유용합니다. 각 작업자에 대해 &lt;code&gt;:start&lt;/code&gt; 및 &lt;code&gt;:finish&lt;/code&gt; 옵션을 설정하여 작업자 1이 id 1과 9999 사이의 모든 레코드와 10000 이상의 작업자 2 핸들을 처리하도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fedec4d892fc12eab521b8368ec8823d40ac4794" translate="yes" xml:space="preserve">
          <source>The options for &lt;a href=&quot;atomfeedhelper#method-i-atom_feed&quot;&gt;#atom_feed&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;atomfeedhelper#method-i-atom_feed&quot;&gt;#atom_feed&lt;/a&gt; 의 옵션은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a0057ee5f702ab7519d47406e8c77a7e336b856d" translate="yes" xml:space="preserve">
          <source>The options for &lt;a href=&quot;atomfeedhelper#method-i-atom_feed&quot;&gt;&lt;code&gt;atom_feed&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41953f0040392b7d0f4ad2663cc42a50b8be8ed0" translate="yes" xml:space="preserve">
          <source>The options hash is passed to the underlying cache implementation.</source>
          <target state="translated">옵션 해시는 기본 캐시 구현으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="92b1bd4dfe279a0b6d6f24784cc22f88f3542d92" translate="yes" xml:space="preserve">
          <source>The options map directly to &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; commands.</source>
          <target state="translated">옵션은 &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; 명령에 직접 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="b81cb3f36e09679bafae42dc7251254763394afc" translate="yes" xml:space="preserve">
          <source>The options provided when calling `errors#add`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eeb5a5bc634b08fc4f1b6083706e1781ce77e46" translate="yes" xml:space="preserve">
          <source>The options version of redirect allows you to supply only the parts of the URL which need to change, it also supports interpolation of the path similar to the first example.</source>
          <target state="translated">리디렉션의 옵션 버전을 사용하면 변경해야하는 URL 부분 만 제공 할 수 있으며 첫 번째 예제와 유사한 경로의 보간도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="45cc4dd11762c701415947a3cd200605db900701" translate="yes" xml:space="preserve">
          <source>The order in which files are eager loaded is undefined.</source>
          <target state="translated">파일을 열망하는 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="338f8ced7409f9b6ec13ebf9eab9b58b6549e163" translate="yes" xml:space="preserve">
          <source>The order in which helpers from more than one directory are loaded has changed in Rails 4.0. Previously, they were gathered and then sorted alphabetically. After upgrading to Rails 4.0, helpers will preserve the order of loaded directories and will be sorted alphabetically only within each directory. Unless you explicitly use the &lt;code&gt;helpers_path&lt;/code&gt; parameter, this change will only impact the way of loading helpers from engines. If you rely on the ordering, you should check if correct methods are available after upgrade. If you would like to change the order in which engines are loaded, you can use &lt;code&gt;config.railties_order=&lt;/code&gt; method.</source>
          <target state="translated">Rails 4.0에서는 둘 이상의 디렉토리에서 헬퍼가로드되는 순서가 변경되었습니다. 이전에는 모아 알파벳순으로 정렬했습니다. Rails 4.0으로 업그레이드 한 후, 헬퍼는로드 된 디렉토리의 순서를 유지하고 각 디렉토리 내에서만 알파벳순으로 정렬됩니다. &lt;code&gt;helpers_path&lt;/code&gt; 매개 변수 를 명시 적으로 사용하지 않으면 이 변경 사항은 엔진에서 헬퍼를로드하는 방법에만 영향을줍니다. 주문에 의존하는 경우 업그레이드 후 올바른 방법을 사용할 수 있는지 확인해야합니다. 엔진로드 순서를 변경하려면 &lt;code&gt;config.railties_order=&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f79a6fadd87c66fa259266c738bf34142097f62" translate="yes" xml:space="preserve">
          <source>The order in which jobs are processed can be configured differently depending on the adapter.</source>
          <target state="translated">작업 처리 순서는 어댑터에 따라 다르게 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4660c5ab3c3d9ae3dd6bf0c0e1eaefdf8ef89ec0" translate="yes" xml:space="preserve">
          <source>The order in which these classes are returned is unspecified.</source>
          <target state="translated">이러한 클래스가 리턴되는 순서는 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="80069d6fee26801de2e5e79b49b962b023fa71f9" translate="yes" xml:space="preserve">
          <source>The order of the parts getting inserted is determined by the &lt;code&gt;:parts_order&lt;/code&gt; inside of the &lt;code&gt;ActionMailer::Base.default&lt;/code&gt; method.</source>
          <target state="translated">삽입되는 파트의 순서 는 &lt;code&gt;ActionMailer::Base.default&lt;/code&gt; 메소드 의 &lt;code&gt;:parts_order&lt;/code&gt; 에 의해 결정됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2922c4f0610a60fd83d95bc4625e590fe1de4c8" translate="yes" xml:space="preserve">
          <source>The other common option to configure is the log tags applied to the per-connection logger. Here's an example that uses the user account id if available, else &quot;no-account&quot; while tagging:</source>
          <target state="translated">구성하는 다른 일반적인 옵션은 연결 별 로거에 적용되는 로그 태그입니다. 다음은 사용 가능한 경우 사용자 계정 ID를 사용하고 태그 지정 중에 &quot;계정 없음&quot;을 사용하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="b590272dbc4291a5ec0f0a787d5da3c74a48aa22" translate="yes" xml:space="preserve">
          <source>The other option for compressing CSS if you have the sass-rails gem installed is</source>
          <target state="translated">sass-rails gem이 설치된 경우 CSS를 압축하는 다른 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8f9ca12326137875e63ad6771e8cba598bbeb967" translate="yes" xml:space="preserve">
          <source>The output tempfile is opened in the directory returned by &lt;a href=&quot;previewer#method-i-tmpdir&quot;&gt;&lt;code&gt;tmpdir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196e3e845bbd8998ec86973e62e45a7a873a74bc" translate="yes" xml:space="preserve">
          <source>The output tempfile is opened in the directory returned by &lt;a href=&quot;previewer#method-i-tmpdir&quot;&gt;tmpdir&lt;/a&gt;.</source>
          <target state="translated">출력 임시 파일은 &lt;a href=&quot;previewer#method-i-tmpdir&quot;&gt;tmpdir이&lt;/a&gt; 리턴 한 디렉토리에서 열립니다 .</target>
        </trans-unit>
        <trans-unit id="781ad50fc530a421e9d27dbfa906b4aebe4123b2" translate="yes" xml:space="preserve">
          <source>The parameters in the forms are accessible in controllers according to their name nesting. So inputs named &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;post[title]&lt;/code&gt; are accessible as &lt;code&gt;params[:title]&lt;/code&gt; and &lt;code&gt;params[:post][:title]&lt;/code&gt; respectively.</source>
          <target state="translated">폼의 매개 변수는 이름 중첩에 따라 컨트롤러에서 액세스 할 수 있습니다. 따라서 &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;post[title]&lt;/code&gt; 이라는 입력 은 각각 &lt;code&gt;params[:title]&lt;/code&gt; 및 &lt;code&gt;params[:post][:title]&lt;/code&gt; 로 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7acce9bd0f8ebeb41299d3c5d39790821251f354" translate="yes" xml:space="preserve">
          <source>The params hash has a nested person value, which can therefore be accessed with &lt;code&gt;params[:person]&lt;/code&gt; in the controller.</source>
          <target state="translated">params 해시에는 중첩 된 person 값이 있으므로 컨트롤러에서 &lt;code&gt;params[:person]&lt;/code&gt; 을 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b1f382907f48466d6409760d407191f01637a0f9" translate="yes" xml:space="preserve">
          <source>The params object created when this form is submitted would look like:</source>
          <target state="translated">이 양식을 제출할 때 생성 된 params 객체는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a22d4f278f8aeadd352f595fa70b33907e1f9099" translate="yes" xml:space="preserve">
          <source>The parent namespace, &quot;A&quot;, may not reflect nesting at a given spot.</source>
          <target state="translated">부모 네임 스페이스 &quot;A&quot;는 지정된 지점에서의 중첩을 반영하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ea5a8450dc660e2360062956f4fc310b23802e1" translate="yes" xml:space="preserve">
          <source>The parent of top-level and anonymous modules is &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa88e48a48c300647e152fdf64f231b79f2e6cac" translate="yes" xml:space="preserve">
          <source>The parent of top-level and anonymous modules is &lt;a href=&quot;object&quot;&gt;Object&lt;/a&gt;.</source>
          <target state="translated">최상위 및 익명 모듈의 부모는 &lt;a href=&quot;object&quot;&gt;Object&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e70e4385028599bc0890d172e091f651173988f3" translate="yes" xml:space="preserve">
          <source>The path prefix for the routes.</source>
          <target state="translated">경로의 경로 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="8a2dd5a0b629cf6bb84f63e15d0a368551d1b4f3" translate="yes" xml:space="preserve">
          <source>The path to the schema cache dump file for a database. If omitted, the filename will be read from ENV or a default will be derived.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b49906b65248bb2a02d7efa1852cdde693d1597" translate="yes" xml:space="preserve">
          <source>The pattern used to match explicit dependencies is &lt;code&gt;/# Template
Dependency: (\S+)/&lt;/code&gt;, so it's important that you type it out just so. You can only declare one template dependency per line.</source>
          <target state="translated">명시 적 종속성을 일치시키는 데 사용되는 패턴은 &lt;code&gt;/# Template Dependency: (\S+)/&lt;/code&gt; 이므로 입력하는 것이 중요합니다. 줄당 하나의 템플릿 종속성 만 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9e9c2775512158c82915ce14fd279245dc64fea" translate="yes" xml:space="preserve">
          <source>The payload (described in future sections)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202c79dce79999d668dd4c269eaef15bd452360a" translate="yes" xml:space="preserve">
          <source>The payload (described in previous sections)</source>
          <target state="translated">페이로드 (이전 섹션에서 설명)</target>
        </trans-unit>
        <trans-unit id="19698fc3977432b8ba532562866f2175617a2f1e" translate="yes" xml:space="preserve">
          <source>The permitted scalar types are &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;NilClass&lt;/code&gt;, &lt;code&gt;Numeric&lt;/code&gt;, &lt;code&gt;TrueClass&lt;/code&gt;, &lt;code&gt;FalseClass&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;StringIO&lt;/code&gt;, &lt;code&gt;IO&lt;/code&gt;, &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt;, and &lt;code&gt;Rack::Test::UploadedFile&lt;/code&gt;.</source>
          <target state="translated">허용되는 스칼라 유형은 &lt;code&gt;String&lt;/code&gt; , &lt;code&gt;Symbol&lt;/code&gt; , &lt;code&gt;NilClass&lt;/code&gt; , &lt;code&gt;Numeric&lt;/code&gt; , &lt;code&gt;TrueClass&lt;/code&gt; , &lt;code&gt;FalseClass&lt;/code&gt; , &lt;code&gt;Date&lt;/code&gt; , &lt;code&gt;Time&lt;/code&gt; , &lt;code&gt;DateTime&lt;/code&gt; , &lt;code&gt;StringIO&lt;/code&gt; , &lt;code&gt;IO&lt;/code&gt; , &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt; 및 &lt;code&gt;Rack::Test::UploadedFile&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0d9fe577f207f6e519a775e2220ac855388fee63" translate="yes" xml:space="preserve">
          <source>The phrase &amp;ldquo;Updating salaries&amp;hellip;&amp;rdquo; would then be printed, along with the benchmark for the block when the block completes.</source>
          <target state="translated">그런 다음&amp;ldquo;월급 업데이트 중&amp;hellip;&amp;rdquo;이라는 문구가 블록이 완료되면 블록의 벤치 마크와 함께 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="211a16b14e6131fc9047c75ee343534532a31b7c" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; seconds), then the pool forcefully clears the cache and reloads connections without any regard for other connection owning threads.</source>
          <target state="translated">풀은 먼저 모든 연결의 소유권을 얻으려고합니다. 시간 초과 간격 (기본 기간은 &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; 초) 내에 그렇게 할 수없는 경우 풀은 다른 연결 소유 스레드에 관계없이 캐시를 강제로 지우고 연결을 다시로드합니다.</target>
        </trans-unit>
        <trans-unit id="b737fd02684471a726d9203f4d5534cf0b4a32c7" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; seconds), then the pool is forcefully disconnected without any regard for other connection owning threads.</source>
          <target state="translated">풀은 먼저 모든 연결의 소유권을 얻으려고합니다. 시간 종료 간격 내에이를 수행 할 수없는 경우 (기본 지속 기간은 &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; 초임) 다른 연결 소유 스레드에 관계없이 풀의 연결이 강제로 끊어집니다.</target>
        </trans-unit>
        <trans-unit id="043ef0651a5185dbb1d4310ac69dd97001b88323" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.db_config.checkout_timeout * 2&lt;/code&gt; seconds), then the pool forcefully clears the cache and reloads connections without any regard for other connection owning threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928e74f739977016b03bc6c121a2e6a2302ec5ff" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.db_config.checkout_timeout * 2&lt;/code&gt; seconds), then the pool is forcefully disconnected without any regard for other connection owning threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9aa36314226d9fc2457ceacd68160dd0193c9a" translate="yes" xml:space="preserve">
          <source>The popular Apache web server has an option called DocumentRoot. This is the home directory of the web site, everything in this directory tree will be served by the web server. If there are files with a certain file name extension, the code in it will be executed when requested (might require some options to be set). Examples for this are PHP and CGI files. Now think of a situation where an attacker uploads a file &quot;file.cgi&quot; with code in it, which will be executed when someone downloads the file.</source>
          <target state="translated">널리 사용되는 Apache 웹 서버에는 DocumentRoot라는 옵션이 있습니다. 이것은 웹 사이트의 홈 디렉토리이며이 디렉토리 트리의 모든 것은 웹 서버에 의해 제공됩니다. 특정 파일 이름 확장자를 가진 파일이있는 경우 요청시 파일의 코드가 실행됩니다 (일부 옵션을 설정해야 할 수도 있음). 이에 대한 예는 PHP 및 CGI 파일입니다. 이제 침입자가 &quot;file.cgi&quot;파일을 코드와 함께 업로드하여 누군가 파일을 다운로드 할 때 실행되는 상황을 생각해보십시오.</target>
        </trans-unit>
        <trans-unit id="dbdce44c77c959bd4862bc5a859508ac636ef124" translate="yes" xml:space="preserve">
          <source>The port number (integer) used for the request.</source>
          <target state="translated">요청에 사용 된 포트 번호 (정수).</target>
        </trans-unit>
        <trans-unit id="b079d046ffb4ec9ded1b387f3e0010827c056b99" translate="yes" xml:space="preserve">
          <source>The possible length constraint options are:</source>
          <target state="translated">가능한 길이 제한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4fce22dc56bb380decb3337ee172999502454fa4" translate="yes" xml:space="preserve">
          <source>The power of the &lt;code&gt;validates&lt;/code&gt; method comes when using custom validators and default validators in one call for a given attribute.</source>
          <target state="translated">&lt;code&gt;validates&lt;/code&gt; 메소드 의 힘은 주어진 속성에 대해 한 번의 호출로 사용자 정의 유효성 검증기 및 기본 유효성 검증기를 사용할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b6c43b0561e55dd6178731da78ad85e3a4b6c1e1" translate="yes" xml:space="preserve">
          <source>The precedence between model names is calculated using the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; operator for &lt;code&gt;String&lt;/code&gt;. This means that if the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered of higher lexical precedence than the shorter one. For example, one would expect the tables &quot;paper_boxes&quot; and &quot;papers&quot; to generate a join table name of &quot;papers_paper_boxes&quot; because of the length of the name &quot;paper_boxes&quot;, but it in fact generates a join table name of &quot;paper_boxes_papers&quot; (because the underscore '_' is lexicographically &lt;em&gt;less&lt;/em&gt; than 's' in common encodings).</source>
          <target state="translated">모델 이름 사이의 우선 순위는 &lt;code&gt;String&lt;/code&gt; &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 연산자를 사용하여 계산됩니다 . 이는 문자열의 길이가 서로 다르고 가장 짧은 길이와 비교할 때 문자열이 동일한 경우 더 긴 문자열이 짧은 것보다 높은 어휘 우선 순위로 간주됩니다. 예를 들어, &quot;paper_boxes&quot;및 &quot;papers&quot;테이블은 &quot;paper_boxes&quot;라는 이름의 길이로 인해 &quot;papers_paper_boxes&quot;의 조인 테이블 이름을 생성하지만 실제로는 &quot;paper_boxes_papers&quot;의 조인 테이블 이름을 생성합니다 ( 밑줄 '_'이 사전 인코딩에서 일반적인 인코딩에서 's'보다 &lt;em&gt;작기&lt;/em&gt; 때문에).&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="62344c6f40c22e3ba498eca199d54186aace22e0" translate="yes" xml:space="preserve">
          <source>The predicate &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-utc-3F&quot;&gt;&lt;code&gt;utc?&lt;/code&gt;&lt;/a&gt; says whether the receiver has UTC as its time zone:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15001a85859fd6f531e3d41dbeae196b33a737ca" translate="yes" xml:space="preserve">
          <source>The predicate &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-exclude-3F&quot;&gt;&lt;code&gt;exclude?&lt;/code&gt;&lt;/a&gt; tests whether a given object does &lt;strong&gt;not&lt;/strong&gt; belong to the collection. It is the negation of the built-in &lt;code&gt;include?&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f64f61b5bae382f5c6be5cf79dd8734e286cba" translate="yes" xml:space="preserve">
          <source>The predicate &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-in-3F&quot;&gt;&lt;code&gt;in?&lt;/code&gt;&lt;/a&gt; tests if an object is included in another object. An &lt;code&gt;ArgumentError&lt;/code&gt; exception will be raised if the argument passed does not respond to &lt;code&gt;include?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1623bdf3d6d99614a33905e28305018e8da2ea92" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;exclude?&lt;/code&gt; tests whether a given object does &lt;strong&gt;not&lt;/strong&gt; belong to the collection. It is the negation of the built-in &lt;code&gt;include?&lt;/code&gt;:</source>
          <target state="translated">술어는 &lt;code&gt;exclude?&lt;/code&gt; 지정된 객체가 않습니다 여부를 테스트 &lt;strong&gt;하지&lt;/strong&gt; 컬렉션에 속한다. 내장 &lt;code&gt;include?&lt;/code&gt; 의 부정 입니까? :</target>
        </trans-unit>
        <trans-unit id="d30534585d78db0e871015ad6fc7ba29234362ff" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;in?&lt;/code&gt; tests if an object is included in another object. An &lt;code&gt;ArgumentError&lt;/code&gt; exception will be raised if the argument passed does not respond to &lt;code&gt;include?&lt;/code&gt;.</source>
          <target state="translated">술어 &lt;code&gt;in?&lt;/code&gt; 객체가 다른 객체에 포함되어 있는지 테스트합니다. &lt;code&gt;ArgumentError&lt;/code&gt; 응답하지 않는 전달 된 인수하는 경우 예외가 발생합니다 &lt;code&gt;include?&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51cc5e243f6ab35d21893ecf5f94e037441bc436" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;utc?&lt;/code&gt; says whether the receiver has UTC as its time zone:</source>
          <target state="translated">술어 &lt;code&gt;utc?&lt;/code&gt; 수신자가 UTC를 시간대로 가지고 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b750834b37ac4d51943f62e9387ff28a0575c379" translate="yes" xml:space="preserve">
          <source>The predicate for strings uses the Unicode-aware character class &lt;code&gt;[:space:]&lt;/code&gt;, so for example U+2029 (paragraph separator) is considered to be whitespace.</source>
          <target state="translated">문자열의 술어는 유니 코드 인식 문자 클래스 &lt;code&gt;[:space:]&lt;/code&gt; 를 사용하므로 예를 들어 U + 2029 (단락 구분 기호)는 공백으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="dc6a93f70839243fa9e1d8408e34e2544f70a727" translate="yes" xml:space="preserve">
          <source>The preferred method of outputting text in your views is to use the &amp;lt;%= &amp;ldquo;text&amp;rdquo; %&amp;gt; eRuby syntax. The regular &lt;em&gt;puts&lt;/em&gt; and &lt;em&gt;print&lt;/em&gt; methods do not operate as expected in an eRuby code block. If you absolutely must output text within a non-output code block (i.e., &amp;lt;% %&amp;gt;), you can use the concat method.</source>
          <target state="translated">뷰에서 텍스트를 출력하는 기본 방법은 &amp;lt;% =&amp;ldquo;text&amp;rdquo;%&amp;gt; eRuby 구문을 사용하는 것입니다. 정규 &lt;em&gt;박았&lt;/em&gt; 및 &lt;em&gt;인쇄&lt;/em&gt; 방법은 eRuby 코드 블록에서 예상대로 작동하지 않습니다. 비 출력 코드 블록 내에서 텍스트를 반드시 출력해야하는 경우 (예 : &amp;lt;% %&amp;gt;) concat 메소드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="746374f648c11779fb7595faf543aa73a11667ec" translate="yes" xml:space="preserve">
          <source>The prefix is a generation timestamp (in UTC).</source>
          <target state="translated">접두사는 생성 타임 스탬프 (UTC)입니다.</target>
        </trans-unit>
        <trans-unit id="d2dc8c1fb9d9a6e930ad3ad1f1962e294f759976" translate="yes" xml:space="preserve">
          <source>The prefix string to prepend to every table name.</source>
          <target state="translated">모든 테이블 이름 앞에 추가 할 접두사 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c8eb84352de12fc2e14e658df97f8e1dd7fc6ae7" translate="yes" xml:space="preserve">
          <source>The prefix type that will be prepended to every primary key column name. The options are &lt;code&gt;:table_name&lt;/code&gt; and &lt;code&gt;:table_name_with_underscore&lt;/code&gt;. If the first is specified, the Product class will look for &amp;ldquo;productid&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo; as the primary column. If the latter is specified, the Product class will look for &amp;ldquo;product_id&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo;. Remember that this is a global setting for all Active Records.</source>
          <target state="translated">모든 기본 키 열 이름 앞에 붙는 접두사 유형입니다. 옵션은 &lt;code&gt;:table_name&lt;/code&gt; 및 &lt;code&gt;:table_name_with_underscore&lt;/code&gt; 입니다. 첫 번째가 지정되면 Product 클래스는 기본 열로 &quot;id&quot;대신 &quot;productid&quot;를 찾습니다. 후자가 지정되면 Product 클래스는 &quot;id&quot;대신 &quot;product_id&quot;를 찾습니다. 이것은 모든 활성 레코드에 대한 전역 설정입니다.</target>
        </trans-unit>
        <trans-unit id="76608f27ed33c279c84f9724f718d27ff86e52f7" translate="yes" xml:space="preserve">
          <source>The previous example generates &lt;code&gt;address_street&lt;/code&gt; rather than &lt;code&gt;street&lt;/code&gt;.</source>
          <target state="translated">이전 예제는 &lt;code&gt;street&lt;/code&gt; 대신 &lt;code&gt;address_street&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="bf79e4462cb7c0cd7769f456bd8a2b2988b51b2b" translate="yes" xml:space="preserve">
          <source>The previous sections did not use the Rails form helpers at all. While you can craft the input names yourself and pass them directly to helpers such as &lt;code&gt;text_field_tag&lt;/code&gt; Rails also provides higher level support. The two tools at your disposal here are the name parameter to &lt;code&gt;form_with&lt;/code&gt; and &lt;code&gt;fields_for&lt;/code&gt; and the &lt;code&gt;:index&lt;/code&gt; option that helpers take.</source>
          <target state="translated">이전 섹션에서는 Rails 폼 헬퍼를 전혀 사용하지 않았습니다. 입력 이름을 직접 작성하여 &lt;code&gt;text_field_tag&lt;/code&gt; Rails 와 같은 도우미에게 직접 전달할 수도 있지만 높은 수준의 지원도 제공합니다. 귀하의 처분에 두 도구는 여기에있는 이름 매개 변수입니다 &lt;code&gt;form_with&lt;/code&gt; 와 &lt;code&gt;fields_for&lt;/code&gt; 와 &lt;code&gt;:index&lt;/code&gt; 헬퍼 걸릴 것으로 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="e0e9047f925fbf67d1eb6f9a1ed3d116890223cc" translate="yes" xml:space="preserve">
          <source>The primary goal of the function &lt;code&gt;exec_app&lt;/code&gt; is to execute your app's &lt;code&gt;bin/rails&lt;/code&gt;. If the current directory does not have a &lt;code&gt;bin/rails&lt;/code&gt;, it will navigate upwards until it finds a &lt;code&gt;bin/rails&lt;/code&gt; executable. Thus one can invoke a &lt;code&gt;rails&lt;/code&gt; command from anywhere inside a rails application.</source>
          <target state="translated">&lt;code&gt;exec_app&lt;/code&gt; 함수의 기본 목표는 앱의 &lt;code&gt;bin/rails&lt;/code&gt; 를 실행하는 것 입니다. 현재 디렉토리에 &lt;code&gt;bin/rails&lt;/code&gt; 가 없으면 &lt;code&gt;bin/rails&lt;/code&gt; 실행 파일을 찾을 때까지 위쪽으로 탐색합니다 . 따라서 Rails 애플리케이션 내부 어디에서나 &lt;code&gt;rails&lt;/code&gt; 명령을 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="374e971dc3ced2698c6060ed9d03807d33897f25" translate="yes" xml:space="preserve">
          <source>The primary key column name on &lt;code&gt;to_table&lt;/code&gt;. Defaults to &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;to_table&lt;/code&gt; 의 기본 키 열 이름입니다 . 기본값은 &lt;code&gt;id&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bac5ab3487ebac7ba2d2d20e1ec39fd6f57a8550" translate="yes" xml:space="preserve">
          <source>The primary key may auto-increment on each create, even if it fails. This can accelerate the problem of running out of integers, if the underlying table is still stuck on a primary key of type int (note: All Rails apps since 5.1+ have defaulted to bigint, which is not liable to this problem).</source>
          <target state="translated">기본 키는 실패하더라도 생성 할 때마다 자동 증가 할 수 있습니다. 기본 테이블이 여전히 int 유형의 기본 키에 붙어 있으면 정수 부족 문제를 가속화 할 수 있습니다 (참고 : 5.1 이상 이후의 모든 Rails 앱은 기본적으로 bigint로 설정되어 있으므로이 문제에 책임이 없습니다).</target>
        </trans-unit>
        <trans-unit id="0e4104a011a461fd57d9f8ef9c0cc4734f38d19d" translate="yes" xml:space="preserve">
          <source>The primary operation of &lt;code&gt;Model.find(options)&lt;/code&gt; can be summarized as:</source>
          <target state="translated">&lt;code&gt;Model.find(options)&lt;/code&gt; 의 기본 작업은 다음과 같이 요약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="355491ae17fbdee22c249344fd63c33317a6c2c6" translate="yes" xml:space="preserve">
          <source>The primary options are:</source>
          <target state="translated">기본 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1db357e331d3a9a64b5d07b7e285558b9301de2f" translate="yes" xml:space="preserve">
          <source>The problem with purely abstract classes is that all concrete subclasses must persist all the shared attributes themselves in their own tables (also known as class-table inheritance). This makes it hard to do queries across the hierarchy. For example, imagine you have the following hierarchy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fa3e65aa6bbe33b99dacd08bdbeb417dc2f95b" translate="yes" xml:space="preserve">
          <source>The procedure to autoload constant &lt;code&gt;C&lt;/code&gt; in an arbitrary situation is as follows:</source>
          <target state="translated">임의의 상황에서 상수 &lt;code&gt;C&lt;/code&gt; 를 자동로드하는 절차 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8040e6c9ad1dcfe9ba2350e5dae6e0ddc3828236" translate="yes" xml:space="preserve">
          <source>The process of &quot;internationalization&quot; usually means to abstract all strings and other locale specific bits (such as date or currency formats) out of your application. The process of &quot;localization&quot; means to provide translations and localized formats for these bits.&lt;sup id=&quot;footnote-1-ref&quot;&gt;&lt;a href=&quot;#footnote-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">&quot;국제화&quot;프로세스는 일반적으로 응용 프로그램에서 모든 문자열 및 기타 로케일 특정 비트 (예 : 날짜 또는 통화 형식)를 추상화하는 것을 의미합니다. &quot;localization&quot;프로세스는 이러한 비트에 대한 번역 및 현지화 된 형식을 제공하는 것을 의미합니다. &lt;sup id=&quot;footnote-1-ref&quot;&gt;&lt;a href=&quot;#footnote-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="bab12b63d1f444a4baf98767b36d0c0acab0c884" translate="yes" xml:space="preserve">
          <source>The process should go as follows:</source>
          <target state="translated">프로세스는 다음과 같이 진행되어야합니다.</target>
        </trans-unit>
        <trans-unit id="d247badcf31b8cb60f802528ca9ec9615802ad61" translate="yes" xml:space="preserve">
          <source>The program should report its version.</source>
          <target state="translated">프로그램은 버전을보고해야합니다.</target>
        </trans-unit>
        <trans-unit id="39be8745f83c23f980e50b68440fb75f28893215" translate="yes" xml:space="preserve">
          <source>The project class now has the following methods (and more) to ease the traversal and manipulation of its relationships:</source>
          <target state="translated">프로젝트 클래스는 이제 다음과 같은 메소드를 통해 관계의 순회 및 조작을 용이하게합니다.</target>
        </trans-unit>
        <trans-unit id="9549fd7af922ed428621dcdb95af872afc58b4e3" translate="yes" xml:space="preserve">
          <source>The provided regexp will be wrapped with both anchors (&lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt;) so it must match the entire hostname. &lt;code&gt;/product.com/&lt;/code&gt;, for example, once anchored, would fail to match &lt;code&gt;www.product.com&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2aa13204d8f2986d4eaf321a39937bb7daefb6c" translate="yes" xml:space="preserve">
          <source>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy class so you can support other encodings. See the &lt;a href=&quot;multibyte/chars&quot;&gt;&lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt;&lt;/a&gt; implementation for an example how to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e6836db7b86f1636ec6a98ca72c3104147db64" translate="yes" xml:space="preserve">
          <source>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy class so you can support other encodings. See the &lt;a href=&quot;multibyte/chars&quot;&gt;ActiveSupport::Multibyte::Chars&lt;/a&gt; implementation for an example how to do this.</source>
          <target state="translated">mb_chars를 호출 할 때 프록시 클래스가 리턴되었습니다. 이 접근자를 사용하여 자체 인코딩 클래스를 구성하여 다른 인코딩을 지원할 수 있습니다. 이를 수행하는 방법에 대한 예제 는 &lt;a href=&quot;multibyte/chars&quot;&gt;ActiveSupport :: Multibyte :: Chars&lt;/a&gt; 구현을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2db1dccdc41ae63a5d769078a53e229b53f03007" translate="yes" xml:space="preserve">
          <source>The proxy objects that control the access to associations can be extended through anonymous modules. This is especially beneficial for adding new finders, creators, and other factory-type methods that are only used as part of this association.</source>
          <target state="translated">익명 모듈을 통해 연결에 대한 액세스를 제어하는 ​​프록시 개체를 확장 할 수 있습니다. 이 기능은이 찾기의 일부로 만 사용되는 새로운 파인더, 작성자 및 기타 팩토리 유형의 메소드를 추가 할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="cb2ef0a3f23683b82b3a7fc76ce94b0e0f988d66" translate="yes" xml:space="preserve">
          <source>The public API of the i18n framework - a Ruby module with public methods that define how the library works</source>
          <target state="translated">i18n 프레임 워크의 공개 API-라이브러리 작동 방식을 정의하는 공개 메소드가있는 Ruby 모듈</target>
        </trans-unit>
        <trans-unit id="e2f3f6bc15534a07027a580fb53a5ce807cb0522" translate="yes" xml:space="preserve">
          <source>The public controller methods &lt;code&gt;respond_to&lt;/code&gt; may be called with a block that is used to define responses to different mime-types, e.g. for &lt;code&gt;respond_to&lt;/code&gt; :</source>
          <target state="translated">퍼블릭 컨트롤러 메소드 &lt;code&gt;respond_to&lt;/code&gt; 는 다른 mime 유형에 대한 응답을 정의하는 데 사용되는 블록으로 호출 될 수 있습니다 (예 : &lt;code&gt;respond_to&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="e523c677a1876a5d7712fcdf44f31a3393f986ba" translate="yes" xml:space="preserve">
          <source>The public path that Sprockets uses by default is &lt;code&gt;/assets&lt;/code&gt;.</source>
          <target state="translated">Sprockets가 기본적으로 사용하는 공개 경로는 &lt;code&gt;/assets&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b1c15f7c37361e4d62cc7d2ebb86fe446e3f202b" translate="yes" xml:space="preserve">
          <source>The purpose of debugging.</source>
          <target state="translated">디버깅의 목적.</target>
        </trans-unit>
        <trans-unit id="bc7610d0ca7ba5f46a29cc2aff958d13007d672d" translate="yes" xml:space="preserve">
          <source>The purpose of this setup would be that the application uses the class that corresponds to the environment via &lt;code&gt;AUTH_SERVICE&lt;/code&gt;. In development mode &lt;code&gt;MockedAuthService&lt;/code&gt; gets autoloaded when the initializer runs. Let's suppose we do some requests, change its implementation, and hit the application again. To our surprise the changes are not reflected. Why?</source>
          <target state="translated">이 설정의 목적은 애플리케이션이 &lt;code&gt;AUTH_SERVICE&lt;/code&gt; 를 통해 환경에 해당하는 클래스를 사용하는 것 입니다. 개발 모드에서 &lt;code&gt;MockedAuthService&lt;/code&gt; 는 초기화 프로그램이 실행될 때 자동로드됩니다. 요청을하고 구현을 변경하고 응용 프로그램을 다시 실행한다고 가정 해 봅시다. 놀랍게도 변경 사항이 반영되지 않습니다. 왜?</target>
        </trans-unit>
        <trans-unit id="3b96e7010ad0263400b2ad5355a0f3d1d24d9569" translate="yes" xml:space="preserve">
          <source>The query string part of the URL, i.e., everything after &quot;?&quot;.</source>
          <target state="translated">URL의 쿼리 문자열 부분입니다 (예 : &quot;?&quot;뒤의 모든 것).</target>
        </trans-unit>
        <trans-unit id="963ede72d0dfa198743a61a0942634ecdbed773d" translate="yes" xml:space="preserve">
          <source>The query string strategy has several disadvantages:</source>
          <target state="translated">쿼리 문자열 전략에는 몇 가지 단점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9447d2ea713bcd10ab52cda886cd6cbf5d593b22" translate="yes" xml:space="preserve">
          <source>The rails commands that manipulate migrations and your schema.</source>
          <target state="translated">마이그레이션 및 스키마를 조작하는 rails 명령</target>
        </trans-unit>
        <trans-unit id="211b65c121c2996e58957eb6dd2511f01b18717b" translate="yes" xml:space="preserve">
          <source>The raw value provided as the second parameter when calling `errors#add`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2911d154a61b6a5ba76018adc402ed58605ab3" translate="yes" xml:space="preserve">
          <source>The reason for this is that during development you'd usually want your views to still render even though a translation is missing.</source>
          <target state="translated">그 이유는 개발 과정에서 번역이 누락 되어도 뷰가 여전히 렌더링되기를 원하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="78dd8f5116b3d8b957ca4166352d82a58bb88405" translate="yes" xml:space="preserve">
          <source>The reason is that autoloading is triggered for the singleton class, which is anonymous, and as &lt;a href=&quot;#generic-procedure&quot;&gt;we saw before&lt;/a&gt;, Rails only checks the top-level namespace in that edge case.</source>
          <target state="translated">그 이유는 익명 인 싱글 톤 클래스에 대해 자동로드가 트리거 &lt;a href=&quot;#generic-procedure&quot;&gt;되기 때문입니다. 앞에서 보았&lt;/a&gt; 듯이 Rails는 해당 에지의 최상위 네임 스페이스 만 확인합니다.</target>
        </trans-unit>
        <trans-unit id="fbbbe01fb4a2a4d9cb2a8c25e4df69ba3ef590b0" translate="yes" xml:space="preserve">
          <source>The reason most people use Rails is that it provides a set of defaults that allows developers to get up and running quickly, without having to make a lot of trivial decisions.</source>
          <target state="translated">대부분의 사람들이 Rails를 사용하는 이유는 개발자가 많은 사소한 결정을 내리지 않고도 신속하게 시작하고 실행할 수있는 일련의 기본값을 제공하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="25facf3920d52f7ea5f36c7e93e4e595a2175805" translate="yes" xml:space="preserve">
          <source>The reason why we added &lt;code&gt;@article = Article.new&lt;/code&gt; in the &lt;code&gt;ArticlesController&lt;/code&gt; is that otherwise &lt;code&gt;@article&lt;/code&gt; would be &lt;code&gt;nil&lt;/code&gt; in our view, and calling &lt;code&gt;@article.errors.any?&lt;/code&gt; would throw an error.</source>
          <target state="translated">우리가 추가 한 이유 &lt;code&gt;@article = Article.new&lt;/code&gt; 에 &lt;code&gt;ArticlesController&lt;/code&gt; 는 다른 점이다 &lt;code&gt;@article&lt;/code&gt; 가 될 것이다 &lt;code&gt;nil&lt;/code&gt; 우리의보기에, 및 호출 &lt;code&gt;@article.errors.any?&lt;/code&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cec56727dcf557c3b63bdfe82a9a3a16d8e16121" translate="yes" xml:space="preserve">
          <source>The rebroadcast will be received by all connected clients, &lt;em&gt;including&lt;/em&gt; the client that sent the message. Note that params are the same as they were when you subscribed to the channel.</source>
          <target state="translated">재방송은 메시지를 보낸 클라이언트를 &lt;em&gt;포함&lt;/em&gt; 하여 연결된 모든 클라이언트가 수신 합니다. 매개 변수는 채널을 구독 할 때와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="34a3cd9fd5339aaaefab9615beb498916c347532" translate="yes" xml:space="preserve">
          <source>The redirection happens as a &lt;code&gt;302 Found&lt;/code&gt; header unless otherwise specified using the &lt;code&gt;:status&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;:status&lt;/code&gt; 옵션을 사용하여 달리 지정하지 않으면 리디렉션은 &lt;code&gt;302 Found&lt;/code&gt; 헤더 로 발생 합니다 .</target>
        </trans-unit>
        <trans-unit id="6fc33772c67a94f60777ad03a5f62d48d81352f8" translate="yes" xml:space="preserve">
          <source>The reference column type. Defaults to &lt;code&gt;:bigint&lt;/code&gt;.</source>
          <target state="translated">참조 열 유형 기본값은 &lt;code&gt;:bigint&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d9352b43be8aa84da2f638620572a5ccea912a66" translate="yes" xml:space="preserve">
          <source>The referrer information is pulled from the HTTP &lt;code&gt;Referer&lt;/code&gt; (sic) header on the request. This is an optional header and its presence on the request is subject to browser security settings and user preferences. If the request is missing this header, the &lt;code&gt;fallback_location&lt;/code&gt; will be used.</source>
          <target state="translated">리퍼러 정보는 요청시 HTTP &lt;code&gt;Referer&lt;/code&gt; (sic) 헤더에서 가져옵니다. 이것은 선택적 헤더이며 요청시 존재 여부는 브라우저 보안 설정 및 사용자 기본 설정에 따라 다릅니다. 요청에이 헤더가 없으면 &lt;code&gt;fallback_location&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="eb49b45c4a2d1a85d2d9af882862e039d5010fcc" translate="yes" xml:space="preserve">
          <source>The rendered template is &lt;code&gt;people/_labelling_form&lt;/code&gt; and the local variable referencing the form builder is called &lt;code&gt;labelling_form&lt;/code&gt;.</source>
          <target state="translated">렌더링 된 템플리트는 &lt;code&gt;people/_labelling_form&lt;/code&gt; 이며 양식 빌더를 참조하는 로컬 변수는 &lt;code&gt;labelling_form&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a94255df270ad824d9d83b0a6f7b7ff760d009d7" translate="yes" xml:space="preserve">
          <source>The request body is an &lt;code&gt;IO&lt;/code&gt; input stream. If the RAW_POST_DATA environment variable is already set, wrap it in a StringIO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f684b0b47877c550e81776857431c7164bacd0" translate="yes" xml:space="preserve">
          <source>The request body is an IO input stream. If the RAW_POST_DATA environment variable is already set, wrap it in a StringIO.</source>
          <target state="translated">요청 본문은 IO 입력 스트림입니다. RAW_POST_DATA 환경 변수가 이미 설정되어 있으면 StringIO로 랩핑하십시오.</target>
        </trans-unit>
        <trans-unit id="5618400bb0c662f7a9044a9e92d762488642b3ee" translate="yes" xml:space="preserve">
          <source>The request object contains a lot of useful information about the request coming in from the client. To get a full list of the available methods, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Request.html&quot;&gt;Rails API documentation&lt;/a&gt; and &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Request&quot;&gt;Rack Documentation&lt;/a&gt;. Among the properties that you can access on this object are:</source>
          <target state="translated">요청 객체에는 클라이언트에서 들어오는 요청에 대한 유용한 정보가 많이 있습니다. 사용 가능한 방법의 전체 목록을 얻으려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Request.html&quot;&gt;Rails API 설명서&lt;/a&gt; 및 &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Request&quot;&gt;랙 설명서를&lt;/a&gt; 참조하십시오 . 이 개체에서 액세스 할 수있는 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="447adfed7e1b075f5907827838b9d68713be5f5a" translate="yes" xml:space="preserve">
          <source>The request that initiated the WebSocket connection is available here. This gives access to the environment, cookies, etc.</source>
          <target state="translated">WebSocket 연결을 시작한 요청은 여기에서 사용할 수 있습니다. 이를 통해 환경, 쿠키 등에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ebe4d5fe508222930c3bc355f953f8b7e69a836" translate="yes" xml:space="preserve">
          <source>The request that the response is responding to.</source>
          <target state="translated">응답이 응답하는 요청입니다.</target>
        </trans-unit>
        <trans-unit id="8c0d63c0e9b70807564233148a1c2dbdea492502" translate="yes" xml:space="preserve">
          <source>The request to this asset is then served by the Sprockets gem.</source>
          <target state="translated">이 자산에 대한 요청은 Sprockets gem에 의해 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="a13bac9dbc4228aac718c2160238ae2f74224f6d" translate="yes" xml:space="preserve">
          <source>The request variant is a specialization of the request format, like &lt;code&gt;:tablet&lt;/code&gt;, &lt;code&gt;:phone&lt;/code&gt;, or &lt;code&gt;:desktop&lt;/code&gt;.</source>
          <target state="translated">요청 변형은 &lt;code&gt;:tablet&lt;/code&gt; , &lt;code&gt;:phone&lt;/code&gt; 또는 &lt;code&gt;:desktop&lt;/code&gt; 과 같은 요청 형식의 특수화입니다 .</target>
        </trans-unit>
        <trans-unit id="dcb52832bce02225033e7ae0b7180e0e9aa6ae0c" translate="yes" xml:space="preserve">
          <source>The requirements for implementing &lt;a href=&quot;dirty&quot;&gt;&lt;code&gt;ActiveModel::Dirty&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6f31a993c883608b49486cf93c169ad92d6226" translate="yes" xml:space="preserve">
          <source>The requirements for implementing &lt;a href=&quot;dirty&quot;&gt;ActiveModel::Dirty&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;dirty&quot;&gt;ActiveModel :: Dirty&lt;/a&gt; 를 구현하기위한 요구 사항 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c89ab6641453bcf8d055aa8bc68cd2cd8cab4f65" translate="yes" xml:space="preserve">
          <source>The requirements to implement &lt;code&gt;ActiveModel::AttributeMethods&lt;/code&gt; are to:</source>
          <target state="translated">&lt;code&gt;ActiveModel::AttributeMethods&lt;/code&gt; 를 구현하기위한 요구 사항 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b8decea92879d37a4f7c7d58ad76e94662a99ef0" translate="yes" xml:space="preserve">
          <source>The resolution of a constant could depend on load order, the definition of a class or module object could depend on load order, there was edge cases with singleton classes, oftentimes you had to use &lt;code&gt;require_dependency&lt;/code&gt; as a workaround, .... The guide for &lt;code&gt;classic&lt;/code&gt; mode documents &lt;a href=&quot;autoloading_and_reloading_constants_classic_mode#common-gotchas&quot;&gt;these issues&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300f2949996e658ac115ccea16fe17506d448ce0" translate="yes" xml:space="preserve">
          <source>The resolver class defines when the application should switch (i.e. read from the primary if a write occurred less than 2 seconds ago) and a resolver context class that sets a value that helps the resolver class decide when to switch.</source>
          <target state="translated">리졸버 클래스는 애플리케이션이 전환해야하는 시점 (즉, 쓰기가 2 초 전에 발생한 경우 기본에서 읽음)과 리졸버 클래스가 전환시기를 결정하는 데 도움이되는 값을 설정하는 리졸버 컨텍스트 클래스를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="15f2c7d083db22a8119db70913a3db4aaad993bc" translate="yes" xml:space="preserve">
          <source>The resource and all segments will now route to /postings instead of /posts.</source>
          <target state="translated">자원 및 모든 세그먼트가 이제 / posts 대신 / postings로 라우팅됩니다.</target>
        </trans-unit>
        <trans-unit id="beaa87f3d21ecbfe45641f3a86ee4784a14c6812" translate="yes" xml:space="preserve">
          <source>The response code of the request.</source>
          <target state="translated">요청의 응답 코드</target>
        </trans-unit>
        <trans-unit id="0c493831110ba9d815114c381b8f94946676425e" translate="yes" xml:space="preserve">
          <source>The response object is not usually used directly, but is built up during the execution of the action and rendering of the data that is being sent back to the user, but sometimes - like in an after filter - it can be useful to access the response directly. Some of these accessor methods also have setters, allowing you to change their values. To get a full list of the available methods, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html&quot;&gt;Rails API documentation&lt;/a&gt; and &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Response&quot;&gt;Rack Documentation&lt;/a&gt;.</source>
          <target state="translated">응답 오브젝트는 일반적으로 직접 사용되지 않지만 조치 실행 및 사용자에게 다시 전송되는 데이터 렌더링 중에 빌드되지만 때로는 애프터 필터와 같이 응답에 액세스하는 것이 유용 할 수 있습니다. 직접. 이러한 접근 자 메소드 중 일부에는 세터가 있으므로 값을 변경할 수 있습니다. 사용 가능한 방법의 전체 목록을 얻으려면 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html&quot;&gt;Rails API 설명서&lt;/a&gt; 및 &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Response&quot;&gt;랙 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbf34bbcf94a3cd1f50b6c287697c3d57ed72cb5" translate="yes" xml:space="preserve">
          <source>The rest of &lt;code&gt;config/application.rb&lt;/code&gt; defines the configuration for the &lt;code&gt;Rails::Application&lt;/code&gt; which will be used once the application is fully initialized. When &lt;code&gt;config/application.rb&lt;/code&gt; has finished loading Rails and defined the application namespace, we go back to &lt;code&gt;config/environment.rb&lt;/code&gt;. Here, the application is initialized with &lt;code&gt;Rails.application.initialize!&lt;/code&gt;, which is defined in &lt;code&gt;rails/application.rb&lt;/code&gt;.</source>
          <target state="translated">나머지 &lt;code&gt;config/application.rb&lt;/code&gt; 는 어플리케이션이 완전히 초기화되면 사용되는 &lt;code&gt;Rails::Application&lt;/code&gt; 의 설정을 정의합니다 . 때 &lt;code&gt;config/application.rb&lt;/code&gt; 완료 로딩 레일과 정의 응용 프로그램 네임 스페이스가, 우리는 위로 &lt;code&gt;config/environment.rb&lt;/code&gt; . 여기서 응용 프로그램은 &lt;code&gt;Rails.application.initialize!&lt;/code&gt; &lt;code&gt;rails/application.rb&lt;/code&gt; 에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="effb5614fd27c25befd2c6d1b8f3efd5ba7fd3b2" translate="yes" xml:space="preserve">
          <source>The rest of this guide describes the mechanisms Rails uses to make it &quot;mostly ignorable&quot;, and how extensions and applications with special needs can use them.</source>
          <target state="translated">이 가이드의 나머지 부분에서는 Rails가이를 &quot;거의 무시할 수있게&quot;만드는 데 사용하는 메커니즘과 특별한 요구가있는 확장 및 응용 프로그램에서이를 사용할 수있는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="74aecee2b54888a4b816d341feda0b0331477ef2" translate="yes" xml:space="preserve">
          <source>The result after rendering is:</source>
          <target state="translated">렌더링 후 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dcd568ad6b005de288f75e8fe0668cc29b612d27" translate="yes" xml:space="preserve">
          <source>The result is marked as HTML-safe, but it is escaped by default, unless &lt;code&gt;:escape&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. Care should be taken if &lt;code&gt;text&lt;/code&gt; contains HTML tags or entities, because truncation may produce invalid HTML (such as unbalanced or incomplete tags).</source>
          <target state="translated">결과는 HTML 안전으로 표시되지만 &lt;code&gt;:escape&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 가 아니면 기본적으로 이스케이프됩니다 . &lt;code&gt;text&lt;/code&gt; 가 HTML 태그 또는 엔터티를 포함하는 경우 잘림이 잘못된 HTML (예 : 불균형 또는 불완전한 태그)을 생성 할 수 있으므로주의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a25ad2e87bf95b7cfc6b0056a7f16420a069ff66" translate="yes" xml:space="preserve">
          <source>The result may contain alphanumeric characters except 0, O, I and l.</source>
          <target state="translated">결과는 0, O, I 및 l을 제외한 영숫자 문자를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59041e876a7fc33927f1114587cb2013250c8716" translate="yes" xml:space="preserve">
          <source>The result of rendering this page into the supplied layout would be this HTML:</source>
          <target state="translated">이 페이지를 제공된 레이아웃으로 렌더링 한 결과는 다음 HTML입니다.</target>
        </trans-unit>
        <trans-unit id="ce4233cf4e68b15da2f7f962c3aa058e81e088f1" translate="yes" xml:space="preserve">
          <source>The result should be something like this:</source>
          <target state="translated">결과는 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="346e462e239bdd14b4a628c87f5eadb465a3a2fa" translate="yes" xml:space="preserve">
          <source>The result will contain alphanumeric characters in lowercase.</source>
          <target state="translated">결과는 영숫자를 소문자로 포함합니다.</target>
        </trans-unit>
        <trans-unit id="0adb8a1307684faa2f86601a21cfe31f030157a8" translate="yes" xml:space="preserve">
          <source>The result won't be a list of projects (because there is no project with an empty name), but a list of user names and their password. So hopefully you encrypted the passwords in the database! The only problem for the attacker is, that the number of columns has to be the same in both queries. That's why the second query includes a list of ones (1), which will be always the value 1, in order to match the number of columns in the first query.</source>
          <target state="translated">결과는 프로젝트 목록이 아니고 (이름이 비어있는 프로젝트가 없기 때문에) 사용자 이름 및 비밀번호 목록이됩니다. 데이터베이스에서 비밀번호를 암호화했으면 좋겠습니다. 공격자의 유일한 문제점은 두 쿼리에서 열 수가 동일해야한다는 것입니다. 그렇기 때문에 두 번째 쿼리에는 첫 번째 쿼리의 열 수와 일치시키기 위해 항상 값이 1 인 목록 (1)이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e70fb1c2729e8458de00d32c3591467e2d7aa855" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Mail::Message&lt;/code&gt; will have the following in its header:</source>
          <target state="translated">결과 &lt;code&gt;Mail::Message&lt;/code&gt; 는 헤더에 다음을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="99d61cd3773bc4d60f3270a01f2095c107751685" translate="yes" xml:space="preserve">
          <source>The resulting HTML is:</source>
          <target state="translated">결과 HTML은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="71c86b5736b5204e9f35c1743a129c5e2694ebf0" translate="yes" xml:space="preserve">
          <source>The resulting output from our &lt;code&gt;form_with&lt;/code&gt; call will look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291698672d11962c8bb088e3306823ab4309b2d4" translate="yes" xml:space="preserve">
          <source>The retrieved record may vary depending on the database engine.</source>
          <target state="translated">검색된 레코드는 데이터베이스 엔진에 따라 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f55e694c225f295d0bdcccba3be020d10a4d8fa" translate="yes" xml:space="preserve">
          <source>The return of capture is the string generated by the block. For Example:</source>
          <target state="translated">캡처 리턴은 블록에 의해 생성 된 문자열입니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="4ddd68cea8d0fe03eb2943356aa27557616b7f05" translate="yes" xml:space="preserve">
          <source>The return value from the block passed to &lt;code&gt;direct&lt;/code&gt; must be a valid set of arguments for &lt;code&gt;url_for&lt;/code&gt; which will actually build the URL string. This can be one of the following:</source>
          <target state="translated">&lt;code&gt;direct&lt;/code&gt; 로 전달 된 블록의 반환 값 은 실제로 URL 문자열 을 &lt;code&gt;url_for&lt;/code&gt; 하는 url_for에 유효한 인수 집합이어야 합니다. 이것은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="154e88df68e99f69cd0b483c47a5ada31a856800" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;to_param&lt;/code&gt; should &lt;strong&gt;not&lt;/strong&gt; be escaped:</source>
          <target state="translated">&lt;code&gt;to_param&lt;/code&gt; 의 반환 값을 이스케이프 해서는 &lt;strong&gt;안됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c3147580f8522c424243090e61bbb85df53db8c8" translate="yes" xml:space="preserve">
          <source>The return value of the block must be a valid argument for the &lt;code&gt;url_for&lt;/code&gt; method. So, you can pass a valid string URL, Hash, Array, an Active Model instance, or an Active Model class.</source>
          <target state="translated">블록의 리턴 값은 &lt;code&gt;url_for&lt;/code&gt; 메소드에 유효한 인수 여야합니다 . 따라서 유효한 문자열 URL, 해시, 배열, 활성 모델 인스턴스 또는 활성 모델 클래스를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7ebe9022d127f36d9e15723d5e55359c15a6093" translate="yes" xml:space="preserve">
          <source>The return value of this method will be returned from &lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;&lt;code&gt;ActiveRecord::AttributeMethods::Read#read_attribute&lt;/code&gt;&lt;/a&gt;. See also: &lt;a href=&quot;value#method-i-cast_value&quot;&gt;&lt;code&gt;Value#cast_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712cb04b5cda0c9344ce367414c9f233585347f5" translate="yes" xml:space="preserve">
          <source>The return value of this method will be returned from &lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;ActiveRecord::AttributeMethods::Read#read_attribute&lt;/a&gt;. See also: &lt;a href=&quot;value#method-i-cast_value&quot;&gt;#cast_value&lt;/a&gt;.</source>
          <target state="translated">이 메소드의 리턴 값은 &lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;ActiveRecord :: AttributeMethods :: Read # read_attribute&lt;/a&gt; 에서 리턴됩니다 . &lt;a href=&quot;value#method-i-cast_value&quot;&gt;#cast_value&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="baf87def1ba1a7cea81f7ae68bf2ac6b989f6b22" translate="yes" xml:space="preserve">
          <source>The return value of this method will implement the interface described by &lt;a href=&quot;../../activemodel/type/value&quot;&gt;&lt;code&gt;ActiveModel::Type::Value&lt;/code&gt;&lt;/a&gt; (though the object itself may not subclass it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d062788bd9bee681b003f51a10c4ddc35a0f20" translate="yes" xml:space="preserve">
          <source>The return value of this method will implement the interface described by &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; (though the object itself may not subclass it).</source>
          <target state="translated">이 메소드의 반환 값은 &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel :: Type :: Value에&lt;/a&gt; 의해 기술 된 인터페이스를 구현합니다 (오브젝트 자체는 서브 클래스화할 수는 없습니다).</target>
        </trans-unit>
        <trans-unit id="fc938c5063fc1ebd08656f7dd09cbe35e6bc81af" translate="yes" xml:space="preserve">
          <source>The returned relation implements the Null &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; pattern. It is an object with defined null behavior and always returns an empty array of records without querying the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8151c4f5afe49e75a934b72f81a8df8a8e3d9b5f" translate="yes" xml:space="preserve">
          <source>The returned relation implements the Null &lt;a href=&quot;../object&quot;&gt;Object&lt;/a&gt; pattern. It is an object with defined null behavior and always returns an empty array of records without querying the database.</source>
          <target state="translated">리턴 된 관계는 널 &lt;a href=&quot;../object&quot;&gt;오브젝트&lt;/a&gt; 패턴을 구현합니다 . 널 동작이 정의 된 오브젝트이며 데이터베이스를 조회하지 않고 항상 빈 레코드 배열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="2f6d33ea1cddf31651da115f43de80616f27f4f9" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;&lt;code&gt;pluralize&lt;/code&gt;&lt;/a&gt;, returns the singular form of a word in a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a176bf29706fa37ad63399ebcd21c506e08a48" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;pluralize&lt;/a&gt;, returns the singular form of a word in a string.</source>
          <target state="translated">&lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;복수형&lt;/a&gt; 의 역은 문자열에서 단어의 단수형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f0c5f4b12a37e16bfe4b06dcf4213f26c624b861" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;code&gt;camelize&lt;/code&gt;. Makes an underscored, lowercase form from the expression in the string.</source>
          <target state="translated">&lt;code&gt;camelize&lt;/code&gt; 의 반대 . 문자열의 표현식에서 밑줄이있는 소문자 형식을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="49c3882be12d0dbab48454dd420e872739fa4014" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;code&gt;pluralize&lt;/code&gt;, returns the singular form of a word in a string.</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; 의 역은 문자열에서 단어의 단수형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5a2f5d042f75acbe0f3e7548eed90e866ea9799c" translate="yes" xml:space="preserve">
          <source>The rightmost argument to &lt;code&gt;form_for&lt;/code&gt; is an optional hash of options -</source>
          <target state="translated">&lt;code&gt;form_for&lt;/code&gt; 의 가장 오른쪽 인수 는 옵션의 해시입니다.</target>
        </trans-unit>
        <trans-unit id="a9a9612e7634415916c2149adc277d52fac00916" translate="yes" xml:space="preserve">
          <source>The root node reflects the class name of the first element in plural if all elements belong to the same type and that's not Hash:</source>
          <target state="translated">모든 요소가 동일한 유형에 속하고 해시가 아닌 경우 루트 노드는 첫 번째 요소의 클래스 이름을 복수형으로 반영합니다.</target>
        </trans-unit>
        <trans-unit id="f5bc1d31e8e66c06bdb0658b08aafa634967a8a0" translate="yes" xml:space="preserve">
          <source>The route above declares that &lt;code&gt;GET /articles&lt;/code&gt; requests are mapped to the &lt;code&gt;index&lt;/code&gt; action of &lt;code&gt;ArticlesController&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924c9739d75001033fe4a310f64ac55258d3feec" translate="yes" xml:space="preserve">
          <source>The route key also considers if the noun is uncountable and, in such cases, automatically appends _index.</source>
          <target state="translated">경로 키는 명사를 계산할 수없는 경우도 고려하여 이러한 경우 자동으로 _index를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f42ca910b8cf2641923a9b3307cb94acee7c74ce" translate="yes" xml:space="preserve">
          <source>The route name (if any)</source>
          <target state="translated">경로 이름 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="d73914cf8b9c98e84c8b82ff0505113e4b8e3e02" translate="yes" xml:space="preserve">
          <source>The route now exists, but the controller that this route goes to does not. To create it, run this command from the application root:</source>
          <target state="translated">이제 경로가 존재하지만이 경로로 이동하는 컨트롤러는 존재하지 않습니다. 이를 작성하려면 애플리케이션 루트에서이 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="ce667ab0870037991d8f31a5b132c6137e6613ea" translate="yes" xml:space="preserve">
          <source>The route now exists, but the controller that this route goes to does not. To create it, run this command from the engine root:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9c1a0a0514b0f65210493280e8a71f86fdbca5" translate="yes" xml:space="preserve">
          <source>The route's action.</source>
          <target state="translated">경로의 행동.</target>
        </trans-unit>
        <trans-unit id="163a12e69171016995c19135436c2a61402b497f" translate="yes" xml:space="preserve">
          <source>The route's controller.</source>
          <target state="translated">경로의 컨트롤러</target>
        </trans-unit>
        <trans-unit id="9ea35eca50e9266731ea2e3982089ae64656d971" translate="yes" xml:space="preserve">
          <source>The routes for your application or engine live in the file &lt;code&gt;config/routes.rb&lt;/code&gt; and typically looks like this:</source>
          <target state="translated">애플리케이션 또는 엔진의 경로는 &lt;code&gt;config/routes.rb&lt;/code&gt; 파일에 있으며 일반적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d98c7c75f450c601067f23fdeb5247891ee46349" translate="yes" xml:space="preserve">
          <source>The routing module provides URL rewriting in native Ruby. It's a way to redirect incoming requests to controllers and actions. This replaces mod_rewrite rules. Best of all, Rails' Routing works with any web server. Routes are defined in &lt;code&gt;config/routes.rb&lt;/code&gt;.</source>
          <target state="translated">라우팅 모듈은 네이티브 Ruby로 URL 재 작성을 제공합니다. 들어오는 요청을 컨트롤러 및 작업으로 리디렉션하는 방법입니다. 이것은 mod_rewrite 규칙을 대체합니다. 무엇보다도 Rails 'Routing은 모든 웹 서버에서 작동합니다. 경로는 &lt;code&gt;config/routes.rb&lt;/code&gt; 에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="43b869ffdbb23efddcd2f11588a9dd772e5b663c" translate="yes" xml:space="preserve">
          <source>The routing parameters for the route</source>
          <target state="translated">경로의 라우팅 매개 변수</target>
        </trans-unit>
        <trans-unit id="5c1e7a884f603d0cb7012c9790df3b850851f848" translate="yes" xml:space="preserve">
          <source>The row is simply removed with an SQL &lt;code&gt;DELETE&lt;/code&gt; statement on the record's primary key, and no callbacks are executed.</source>
          <target state="translated">레코드의 기본 키에서 SQL &lt;code&gt;DELETE&lt;/code&gt; 문으로 행이 제거되고 콜백이 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="57647ca6535b32390105386b22f168aaa4fd171c" translate="yes" xml:space="preserve">
          <source>The safety bit is lost always, no matter whether the transformation actually changed something.</source>
          <target state="translated">변환이 실제로 변경되었는지 여부에 관계없이 안전 비트는 항상 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="aefe907ee6913d67f5922b327093209a576a180b" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;content_for&lt;/code&gt; but when used with streaming flushes straight back to the layout. In other words, if you want to concatenate several times to the same buffer when rendering a given template, you should use &lt;code&gt;content_for&lt;/code&gt;, if not, use &lt;code&gt;provide&lt;/code&gt; to tell the layout to stop looking for more contents.</source>
          <target state="translated">&lt;code&gt;content_for&lt;/code&gt; 와 동일 하지만 스트리밍과 함께 사용하면 레이아웃으로 바로 플러시됩니다. 다시 말해, 주어진 템플릿을 렌더링 할 때 동일한 버퍼에 여러 번 연결하려면 &lt;code&gt;content_for&lt;/code&gt; 를 사용 하고 그렇지 않은 경우 &lt;code&gt;provide&lt;/code&gt; 을 사용 하여 더 많은 내용을 찾지 않도록 레이아웃에 지시해야합니다.</target>
        </trans-unit>
        <trans-unit id="9953b98c64e5ffc7f405323c6a791708f94ff6a1" translate="yes" xml:space="preserve">
          <source>The same format can be used to set carbon copy (Cc:) and blind carbon copy (Bcc:) recipients, by using the &lt;code&gt;:cc&lt;/code&gt; and &lt;code&gt;:bcc&lt;/code&gt; keys respectively.</source>
          <target state="translated">&lt;code&gt;:cc&lt;/code&gt; 및 &lt;code&gt;:bcc&lt;/code&gt; 키를 각각 사용하여 동일한 형식을 사용하여 카본 카피 (Cc :) 및 블라인드 카본 카피 (Bcc :) 수신자를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2e706e64542efdac4f02a3ddcdaaa1983b14beed" translate="yes" xml:space="preserve">
          <source>The same migration could also have been written without using &lt;code&gt;revert&lt;/code&gt; but this would have involved a few more steps: reversing the order of &lt;code&gt;create_table&lt;/code&gt; and &lt;code&gt;reversible&lt;/code&gt;, replacing &lt;code&gt;create_table&lt;/code&gt; by &lt;code&gt;drop_table&lt;/code&gt;, and finally replacing &lt;code&gt;up&lt;/code&gt; by &lt;code&gt;down&lt;/code&gt; and vice-versa. This is all taken care of by &lt;code&gt;revert&lt;/code&gt;.</source>
          <target state="translated">같은 마이그레이션도 사용하지 않고 쓸 수 있었다 &lt;code&gt;revert&lt;/code&gt; 그러나 이것은 몇 단계를 포함 것 :의 순서 반전 &lt;code&gt;create_table&lt;/code&gt; 과 &lt;code&gt;reversible&lt;/code&gt; , 대체 &lt;code&gt;create_table&lt;/code&gt; 에 의해 &lt;code&gt;drop_table&lt;/code&gt; , 그리고 마지막으로 교체 &lt;code&gt;up&lt;/code&gt; 에 의해 &lt;code&gt;down&lt;/code&gt; 그 반대의 경우도 마찬가지입니다. 이것은 모두 &lt;code&gt;revert&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="ae2cbbfb58ef1b4d1438f7be95f11bb462578b7d" translate="yes" xml:space="preserve">
          <source>The same remarks about ordering made above apply. In particular, you can specify individual files and they are compiled in the order specified. For example, you might concatenate three CSS files together this way:</source>
          <target state="translated">위에서 주문한 것과 동일한 설명이 적용됩니다. 특히 개별 파일을 지정할 수 있으며 지정된 순서대로 컴파일됩니다. 예를 들어, 세 가지 CSS 파일을 다음과 같이 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f697c996741525baca91a161ef79961528f0bca1" translate="yes" xml:space="preserve">
          <source>The same works with &lt;code&gt;javascript_include_tag&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;javascript_include_tag&lt;/code&gt; 와 동일하게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="a2261c96796ab795ed35937e8774ef8812b143b7" translate="yes" xml:space="preserve">
          <source>The schema above declares a table with two columns: &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Each row of this table represents a certain product with these two parameters. Thus, you would be able to write code like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902eca9fb9857fe6b9624eac04a7cecf345099d8" translate="yes" xml:space="preserve">
          <source>The schema dumper adds two additional configuration options:</source>
          <target state="translated">스키마 덤퍼는 두 가지 추가 구성 옵션을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="ffc159d804a9b963f31a83ad9fbb61b806f8e16a" translate="yes" xml:space="preserve">
          <source>The schema still contains `category`, but now the model omits it, so any meta-driven code or schema caching will not attempt to use the column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c53c10237ef4bddb7676d2ae3b7456838e0a982" translate="yes" xml:space="preserve">
          <source>The screenshot will be displayed in your console, if supported.</source>
          <target state="translated">지원되는 경우 스크린 샷이 콘솔에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="abfd5ddb1b891ad695041019063c671d48b40a8e" translate="yes" xml:space="preserve">
          <source>The search, telephone, date, time, color, datetime, datetime-local, month, week, URL, email, number, and range inputs are HTML5 controls. If you require your app to have a consistent experience in older browsers, you will need an HTML5 polyfill (provided by CSS and/or JavaScript). There is definitely &lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;no shortage of solutions for this&lt;/a&gt;, although a popular tool at the moment is &lt;a href=&quot;https://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt;, which provides a simple way to add functionality based on the presence of detected HTML5 features.</source>
          <target state="translated">검색, 전화, 날짜, 시간, 색상, 날짜 / 시간, 날짜 / 시간, 월, 주, URL, 전자 메일, 숫자 및 범위 입력은 HTML5 컨트롤입니다. 앱이 구형 브라우저에서 일관된 환경을 유지해야하는 경우 HTML5 폴리 필 (CSS 및 / 또는 JavaScript에서 제공)이 필요합니다. 확실히 없습니다 &lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;이 솔루션의 부족이&lt;/a&gt; 순간에 인기있는 도구가 있지만, &lt;a href=&quot;https://modernizr.com/&quot;&gt;모더 나이저&lt;/a&gt; 감지 HTML5 기능의 존재 여부에 따라 기능을 추가 할 수있는 간단한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d921cbf4d775ce5249e42b24eb44f85bf4cbff38" translate="yes" xml:space="preserve">
          <source>The second argument indicates whether the callback is to be run &lt;code&gt;:before&lt;/code&gt;, &lt;code&gt;:after&lt;/code&gt;, or &lt;code&gt;:around&lt;/code&gt; the event. If omitted, &lt;code&gt;:before&lt;/code&gt; is assumed. This means the first example above can also be written as:</source>
          <target state="translated">두 번째 인수는 콜백을 &lt;code&gt;:before&lt;/code&gt; , &lt;code&gt;:after&lt;/code&gt; 또는 &lt;code&gt;:around&lt;/code&gt; 이벤트 중에서 실행할지 여부를 나타냅니다 . 생략하면 &lt;code&gt;:before&lt;/code&gt; 가 가정됩니다. 이것은 위의 첫 번째 예를 다음과 같이 쓸 수도 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="9af4d188053d675b615bd09c5b2ebeed2870fe55" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;indent_string&lt;/code&gt;, specifies which indent string to use. The default is &lt;code&gt;nil&lt;/code&gt;, which tells the method to make a guess by peeking at the first indented line, and fallback to a space if there is none.</source>
          <target state="translated">두 번째 인수 &lt;code&gt;indent_string&lt;/code&gt; 은 사용할 들여 쓰기 문자열을 지정합니다. 기본값은 &lt;code&gt;nil&lt;/code&gt; 이며, 첫 번째 들여 쓰기 행에서 엿보기로 추측하고 공백이없는 경우 대체하도록 메소드에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="4cb8c9f7b08002ccee566978dd1cbdbd3f7197a5" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;indent_string&lt;/code&gt;, specifies which indent string to use. The default is &lt;code&gt;nil&lt;/code&gt;, which tells the method to make an educated guess peeking at the first indented line, and fallback to a space if there is none.</source>
          <target state="translated">두 번째 인수 &lt;code&gt;indent_string&lt;/code&gt; 은 사용할 들여 쓰기 문자열을 지정합니다. 기본값은 &lt;code&gt;nil&lt;/code&gt; 입니다 .이 방법은 첫 번째 들여 쓰기 행에서 교육받은 추측을 엿보기로 만들고 공간이 없으면 공백으로 대체합니다.</target>
        </trans-unit>
        <trans-unit id="b0c1c629ea994f2987ea56b45bca30e917233746" translate="yes" xml:space="preserve">
          <source>The second feature of the asset pipeline is asset minification or compression. For CSS files, this is done by removing whitespace and comments. For JavaScript, more complex processes can be applied. You can choose from a set of built in options or specify your own.</source>
          <target state="translated">자산 파이프 라인의 두 번째 기능은 자산 축소 또는 압축입니다. CSS 파일의 경우 공백과 주석을 제거하면됩니다. JavaScript의 경우 더 복잡한 프로세스를 적용 할 수 있습니다. 내장 옵션 세트에서 선택하거나 직접 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe9a2783619d59158ecacd99966e8ff4873dee03" translate="yes" xml:space="preserve">
          <source>The second line can safely access the &quot;type&quot; key, and let the user to pass either &lt;code&gt;:type&lt;/code&gt; or &quot;type&quot;.</source>
          <target state="translated">두 번째 줄은 &quot;type&quot;키에 안전하게 액세스하여 사용자가 &lt;code&gt;:type&lt;/code&gt; 또는 &quot;type&quot; 을 전달할 수 있도록합니다 .</target>
        </trans-unit>
        <trans-unit id="c5b46933582d278e942545f1f09e4e2181c0c75a" translate="yes" xml:space="preserve">
          <source>The second line can safely access the &lt;code&gt;:params&lt;/code&gt; key, and let the user to pass either &lt;code&gt;:params&lt;/code&gt; or &quot;params&quot;.</source>
          <target state="translated">두 번째 줄은 &lt;code&gt;:params&lt;/code&gt; 키에 안전하게 액세스하여 사용자가 &lt;code&gt;:params&lt;/code&gt; 또는 &quot;params&quot; 를 전달하도록합니다 .</target>
        </trans-unit>
        <trans-unit id="87370f63b750b398e3d1d2d4d7ac881a34411734" translate="yes" xml:space="preserve">
          <source>The second render just defines the partial template we want to render, &lt;code&gt;comments/form&lt;/code&gt;. Rails is smart enough to spot the forward slash in that string and realize that you want to render the &lt;code&gt;_form.html.erb&lt;/code&gt; file in the &lt;code&gt;app/views/comments&lt;/code&gt; directory.</source>
          <target state="translated">두 번째 렌더는 우리가 렌더링하고자하는 부분 템플릿 인 &lt;code&gt;comments/form&lt;/code&gt; 을 정의합니다 . Rails는 해당 문자열에서 슬래시를 발견 하고 &lt;code&gt;app/views/comments&lt;/code&gt; 디렉토리에 &lt;code&gt;_form.html.erb&lt;/code&gt; 파일 을 렌더링 할 수 있을 정도로 똑똑 합니다 .</target>
        </trans-unit>
        <trans-unit id="95d2464bf033dbb44e211484579e31d9b961dbc8" translate="yes" xml:space="preserve">
          <source>The second time the same query is run against the database, it's not actually going to hit the database. The first time the result is returned from the query it is stored in the query cache (in memory) and the second time it's pulled from memory.</source>
          <target state="translated">두 번째로 동일한 쿼리가 데이터베이스에 대해 실행될 때 실제로 데이터베이스에 도달하지는 않습니다. 쿼리에서 결과가 처음 반환 될 때 쿼리 캐시 (메모리)에 저장되고 두 번째로 메모리에서 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="8ff3ec58f06e1cf34a733e22ed5738cc9d78e9b3" translate="yes" xml:space="preserve">
          <source>The second validation declares that a &lt;code&gt;body&lt;/code&gt; value must also be present. Additionally, it declares that the &lt;code&gt;body&lt;/code&gt; value must be at least 10 characters long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efc4a8e9d7945b1d7f7a23ba4380c75006156f2" translate="yes" xml:space="preserve">
          <source>The second way is to use a class (actually, any object that responds to the right methods will do) to handle the filtering. This is useful in cases that are more complex and cannot be implemented in a readable and reusable way using the two other methods. As an example, you could rewrite the login filter again to use a class:</source>
          <target state="translated">두 번째 방법은 필터링을 처리하기 위해 클래스를 사용하는 것입니다 (실제로 올바른 메소드에 응답하는 모든 객체가 수행함). 이는 더 복잡하고 다른 두 가지 방법을 사용하여 읽기 쉽고 재사용 가능한 방식으로 구현할 수없는 경우에 유용합니다. 예를 들어, 클래스를 사용하기 위해 로그인 필터를 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61a71f83c97ed525d6c4921cbda3d9a74c8be32f" translate="yes" xml:space="preserve">
          <source>The second way is using a block:</source>
          <target state="translated">두 번째 방법은 블록을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ee3dafb008288f3fc62bfe8b4c6a215bc537e4d7" translate="yes" xml:space="preserve">
          <source>The second way to declare a many-to-many relationship is to use &lt;code&gt;has_many :through&lt;/code&gt;. This makes the association indirectly, through a join model:</source>
          <target state="translated">다 대 다 관계를 선언하는 두 번째 방법은 &lt;code&gt;has_many :through&lt;/code&gt; 를 사용 하는 것 입니다. 이것은 조인 모델을 통해 간접적으로 연결을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5be71a74ba22ce6b2dedd769c1778c19f8234b4b" translate="yes" xml:space="preserve">
          <source>The secrets kept in credentials file are accessible via &lt;code&gt;Rails.application.credentials&lt;/code&gt;. For example, with the following decrypted &lt;code&gt;config/credentials.yml.enc&lt;/code&gt;:</source>
          <target state="translated">자격 증명 파일에 보관 된 비밀은 &lt;code&gt;Rails.application.credentials&lt;/code&gt; 를 통해 액세스 할 수 있습니다 . 예를 들어, 다음과 같이 &lt;code&gt;config/credentials.yml.enc&lt;/code&gt; 가 해독되었습니다 .</target>
        </trans-unit>
        <trans-unit id="c32777ba2c91a6de93a05febdd555f4b3337b2e7" translate="yes" xml:space="preserve">
          <source>The section &lt;em&gt;Customizing Inflections&lt;/em&gt; below documents ways to override this default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab74d6898ce4ece91f996260f25f8432949724d" translate="yes" xml:space="preserve">
          <source>The section about session fixation introduced the problem of maintained sessions. An attacker maintaining a session every five minutes can keep the session alive forever, although you are expiring sessions. A simple solution for this would be to add a &lt;code&gt;created_at&lt;/code&gt; column to the sessions table. Now you can delete sessions that were created a long time ago. Use this line in the sweep method above:</source>
          <target state="translated">세션 수정에 관한 섹션에서는 유지 보수 세션의 문제점을 소개했습니다. 세션이 만료 되더라도 5 분마다 세션을 유지 관리하는 공격자는 세션을 영구적으로 유지할 수 있습니다. 이를위한 간단한 해결책은 &lt;code&gt;created_at&lt;/code&gt; 열을 세션 테이블 에 추가하는 것 입니다. 이제 오래 전에 생성 된 세션을 삭제할 수 있습니다. 위의 스윕 방법에서이 라인을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1f6120da2c879830bdb45596b1660515dc2d88c6" translate="yes" xml:space="preserve">
          <source>The security landscape shifts and it is important to keep up to date, because missing a new vulnerability can be catastrophic. You can find additional resources about (Rails) security here:</source>
          <target state="translated">보안 환경이 바뀌고 새로운 취약점이 없으면 치명적일 수 있으므로 최신 상태를 유지하는 것이 중요합니다. 여기에서 (레일) 보안에 대한 추가 리소스를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7126ad7da26114aa98cd24f05b132e044ab649ab" translate="yes" xml:space="preserve">
          <source>The selects are prepared for multi-parameter assignment to an Active Record object.</source>
          <target state="translated">선택은 활성 레코드 오브젝트에 다중 매개 변수 지정을 위해 준비됩니다.</target>
        </trans-unit>
        <trans-unit id="67fc72ff072f14ae4ea568c8c44418a72eccad87" translate="yes" xml:space="preserve">
          <source>The server can be run on a different port using the &lt;code&gt;-p&lt;/code&gt; option. The default development environment can be changed using &lt;code&gt;-e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 옵션을 사용하여 다른 포트에서 서버를 실행할 수 있습니다 . 기본 개발 환경은 &lt;code&gt;-e&lt;/code&gt; 를 사용하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f626801485519e4714c541015bc3033414f53387" translate="yes" xml:space="preserve">
          <source>The server sends a response containing the HTML back to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f096bb4e5d5d5c6145e30b812288136686222e7" translate="yes" xml:space="preserve">
          <source>The setup in Rails allows you to easily change how the switching is done and what parameters it's based on. Let's say you want to use a cookie instead of a session to decide when to swap connections. You can write your own class:</source>
          <target state="translated">Rails의 설정을 통해 스위칭 수행 방식 및 기반이되는 매개 변수를 쉽게 변경할 수 있습니다. 연결 대신 교환시기를 결정하기 위해 세션 대신 쿠키를 사용하려고한다고 가정합니다. 당신은 당신의 자신의 수업을 작성할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="bf940f74e13a7a42bdf13e37d4c4acbb4d699793" translate="yes" xml:space="preserve">
          <source>The show action in the above controller would have all parameter values encoded as ASCII-8BIT. This is useful in the case where an application must handle data but encoding of the data is unknown, like file system data.</source>
          <target state="translated">위 컨트롤러의 show 액션은 모든 매개 변수 값을 ASCII-8BIT로 인코딩합니다. 응용 프로그램이 데이터를 처리해야하지만 파일 시스템 데이터와 같이 데이터 인코딩을 알 수없는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9fb10354b4e9f1b98e97daca2e9598a177524248" translate="yes" xml:space="preserve">
          <source>The signed ID is also used to create stable URLs for the blob through the BlobsController.</source>
          <target state="translated">서명 된 ID는 BlobsController를 통해 Blob의 안정적인 URL을 만드는 데에도 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ce32a93e4064970c8546be14bb4215b30b4ef348" translate="yes" xml:space="preserve">
          <source>The simplest rule of thumb is that you should set up a &lt;code&gt;has_many :through&lt;/code&gt; relationship if you need to work with the relationship model as an independent entity. If you don't need to do anything with the relationship model, it may be simpler to set up a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; relationship (though you'll need to remember to create the joining table in the database).</source>
          <target state="translated">가장 간단한 방법 은 관계 모델을 독립 엔터티로 작업해야하는 경우 &lt;code&gt;has_many :through&lt;/code&gt; 관계를 설정해야한다는 것입니다. 관계 모델을 사용하여 작업을 수행 할 필요가없는 경우 &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; 관계 를 설정하는 것이 더 간단 할 수 있습니다 (데이터베이스에 조인 테이블을 작성해야 함).</target>
        </trans-unit>
        <trans-unit id="20504bd60dd726d82fcb6ff496945b67c5bac04a" translate="yes" xml:space="preserve">
          <source>The simplest template that would work in this case would be one located at &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt;. The extension of this file name is important: the first extension is the &lt;em&gt;format&lt;/em&gt; of the template, and the second extension is the &lt;em&gt;handler&lt;/em&gt; that will be used to render the template. Rails is attempting to find a template called &lt;code&gt;articles/new&lt;/code&gt; within &lt;code&gt;app/views&lt;/code&gt; for the application. The format for this template can only be &lt;code&gt;html&lt;/code&gt; and the default handler for HTML is &lt;code&gt;erb&lt;/code&gt;. Rails uses other handlers for other formats. &lt;code&gt;builder&lt;/code&gt; handler is used to build XML templates and &lt;code&gt;coffee&lt;/code&gt; handler uses CoffeeScript to build JavaScript templates. Since you want to create a new HTML form, you will be using the &lt;code&gt;ERB&lt;/code&gt; language which is designed to embed Ruby in HTML.</source>
          <target state="translated">이 경우 가장 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; 템플릿은 app / views / articles / new.html.erb에 있습니다. 이 파일 이름의 확장자는 중요합니다. 첫 번째 확장자는 템플리트 의 &lt;em&gt;형식&lt;/em&gt; 이고 두 번째 확장자는 템플리트를 렌더링하는 데 사용되는 &lt;em&gt;핸들러&lt;/em&gt; 입니다. Rails는 &lt;code&gt;app/views&lt;/code&gt; 내에서 &lt;code&gt;articles/new&lt;/code&gt; 라는 템플릿을 찾으려고합니다 . 이 템플리트의 형식은 &lt;code&gt;html&lt;/code&gt; 만 가능하며 HTML 의 기본 핸들러는 &lt;code&gt;erb&lt;/code&gt; 입니다. Rails는 다른 형식으로 다른 핸들러를 사용합니다. &lt;code&gt;builder&lt;/code&gt; 핸들러는 XML 템플리트 및 &lt;code&gt;coffee&lt;/code&gt; 를 빌드하는 데 사용됩니다.핸들러는 CoffeeScript를 사용하여 JavaScript 템플릿을 빌드합니다. 새 HTML 양식을 작성하려고하므로 Ruby에 HTML을 포함하도록 설계된 &lt;code&gt;ERB&lt;/code&gt; 언어를 사용하게됩니다 .</target>
        </trans-unit>
        <trans-unit id="29e2b5e147c1b372744d171d51ecfd514b5b40e6" translate="yes" xml:space="preserve">
          <source>The solution to this is best to &lt;em&gt;process media files asynchronously&lt;/em&gt;: Save the media file and schedule a processing request in the database. A second process will handle the processing of the file in the background.</source>
          <target state="translated">&lt;em&gt;미디어 파일을 비동기 적&lt;/em&gt; 으로 &lt;em&gt;처리하는&lt;/em&gt; 것이 가장 좋습니다. &lt;em&gt;미디어 파일을&lt;/em&gt; 저장하고 데이터베이스에서 처리 요청을 예약하십시오. 두 번째 프로세스는 백그라운드에서 파일 처리를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="fcaaa7261c7e1496228fcd0f857e65f05c064de9" translate="yes" xml:space="preserve">
          <source>The speak action simply uses the Chat::Room object that was created when the channel was first subscribed to by the consumer when that subscriber wants to say something in the room.</source>
          <target state="translated">발언 액션은 단순히 가입자가 방에서 무언가를 말하고 싶을 때 소비자가 채널을 처음 구독했을 때 생성 된 Chat :: Room 객체를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1bdd39fb0d2e38471f75ef10005c947a24983c76" translate="yes" xml:space="preserve">
          <source>The special syntax &lt;code&gt;:id&lt;/code&gt; tells rails that this route expects an &lt;code&gt;:id&lt;/code&gt; parameter, which in our case will be the id of the article.</source>
          <target state="translated">특수 구문 &lt;code&gt;:id&lt;/code&gt; 는이 경로에 &lt;code&gt;:id&lt;/code&gt; 매개 변수가 필요 하다는 것을 레일에 알려줍니다.이 매개 변수는이 경우 기사의 ID입니다.</target>
        </trans-unit>
        <trans-unit id="e9e8a45a7c799b646c1a99d6f999c5114cf4bf41" translate="yes" xml:space="preserve">
          <source>The specified URL will then be passed a &lt;a href=&quot;../../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object containing the selected file, or if the field was left blank, a StringIO object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21a3746c58b2424072639a95cdac84836fee217" translate="yes" xml:space="preserve">
          <source>The specified URL will then be passed a &lt;a href=&quot;../../file&quot;&gt;File&lt;/a&gt; object containing the selected file, or if the field was left blank, a StringIO object.</source>
          <target state="translated">지정된 URL은 선택한 파일이 포함 된 &lt;a href=&quot;../../file&quot;&gt;File&lt;/a&gt; 객체 또는 필드가 비어있는 경우 StringIO 객체로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="2a90b5c619bbc6a71675b667b03350ade98a639f" translate="yes" xml:space="preserve">
          <source>The standard set of helper methods for form building are located in the &lt;code&gt;field_helpers&lt;/code&gt; class attribute.</source>
          <target state="translated">양식 작성을위한 표준 헬퍼 메소드 세트는 &lt;code&gt;field_helpers&lt;/code&gt; 클래스 속성에 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d57b2839976977694e926113e1db0d9b1557222" translate="yes" xml:space="preserve">
          <source>The status code can either be a standard &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes&quot;&gt;HTTP Status code&lt;/a&gt; as an integer, or a symbol representing the downcased, underscored and symbolized description. Note that the status code must be a 3xx HTTP code, or redirection will not occur.</source>
          <target state="translated">상태 코드 는 정수인 표준 &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes&quot;&gt;HTTP 상태 코드&lt;/a&gt; 이거나 소문자, 밑줄 및 기호화 된 설명을 나타내는 기호 일 수 있습니다. 상태 코드는 3xx HTTP 코드 여야합니다. 그렇지 않으면 리디렉션이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dab910766bcf61ff2b6b105149ac996ae15cafe0" translate="yes" xml:space="preserve">
          <source>The stored attribute names can be retrieved using .stored_attributes.</source>
          <target state="translated">저장된 속성 이름은 .stored_attributes를 사용하여 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47747cd71d2b363e8477e4247c0b31b077637c9e" translate="yes" xml:space="preserve">
          <source>The string of characters in the middle is a template tree digest. It is a hash digest computed based on the contents of the view fragment you are caching. If you change the view fragment (e.g., the HTML changes), the digest will change, expiring the existing file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fa98d1baa28477f3254b368c8fb59ce8ee67d7" translate="yes" xml:space="preserve">
          <source>The string pairs &amp;ldquo;key=value&amp;rdquo; that conform the query string are sorted lexicographically in ascending order.</source>
          <target state="translated">쿼리 문자열을 따르는 문자열 쌍 &quot;key = value&quot;는 사전 순으로 오름차순으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="64f19a2a1cf8db7cc04037d9a665651ea6cfea93" translate="yes" xml:space="preserve">
          <source>The strong parameter API was designed with the most common use cases in mind. It is not meant as a silver bullet to handle all of your parameter filtering problems. However, you can easily mix the API with your own code to adapt to your situation.</source>
          <target state="translated">강력한 매개 변수 API는 가장 일반적인 사용 사례를 염두에두고 설계되었습니다. 모든 매개 변수 필터링 문제를 처리하는 은색 총알이 아닙니다. 그러나 상황에 맞게 API를 자신의 코드와 쉽게 혼합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2d753308a3640e6bb4732791ff859ebc9145332" translate="yes" xml:space="preserve">
          <source>The submit button is automatically given an appropriate text value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64aeaa7e8af743f68b89426602efeec47b839e41" translate="yes" xml:space="preserve">
          <source>The suffix string to append to every table name.</source>
          <target state="translated">모든 테이블 이름에 추가 할 접미사 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c231da1b10c4104be616e8c614640770820e58c1" translate="yes" xml:space="preserve">
          <source>The sum of an empty collection is zero by default, but this is customizable:</source>
          <target state="translated">빈 컬렉션의 합계는 기본적으로 0이지만 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0f6f599baf2275dfb5a4aa872b6058539d06ebe" translate="yes" xml:space="preserve">
          <source>The sum of an empty receiver can be customized in this form as well:</source>
          <target state="translated">빈 리시버의 합계는이 형식으로도 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85b2addcb5be78afc0c6fb0986c7aafdb8dd27d1" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;many&quot;&gt;&lt;code&gt;ActiveStorage::Attached::Many&lt;/code&gt;&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;#attach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1980a1d02d3b53fd80ac4e2d7c492dc10cf6c43f" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;many&quot;&gt;ActiveStorage::Attached::Many&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;#attach&lt;/code&gt;.</source>
          <target state="translated">이 시스템은 &lt;code&gt;#attach&lt;/code&gt; 와 같은 연결 및 팩토리 메소드에 동적 프록시를 제공하는 &lt;a href=&quot;many&quot;&gt;ActiveStorage :: Attached :: Many&lt;/a&gt; 프록시를 거치도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="88383070a5f80fa3b1e58808f444a7e943270336" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;one&quot;&gt;&lt;code&gt;ActiveStorage::Attached::One&lt;/code&gt;&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;attach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ebe8a2a1f772cd708e9b2d8a544a7d7601a8a9" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;one&quot;&gt;ActiveStorage::Attached::One&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;attach&lt;/code&gt;.</source>
          <target state="translated">이 시스템은 연결과 같은 &lt;code&gt;attach&lt;/code&gt; 및 팩토리 메소드에 동적 프록시를 제공하는 &lt;a href=&quot;one&quot;&gt;ActiveStorage :: Attached :: One&lt;/a&gt; 프록시를 거치도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="ffb7d9e85d8c423cb49ef35ffe1f58ff36aea978" translate="yes" xml:space="preserve">
          <source>The system test directory holds system tests, which are used for full browser testing of your application. System tests allow you to test your application the way your users experience it and help you test your JavaScript as well. System tests inherit from Capybara and perform in browser tests for your application.</source>
          <target state="translated">시스템 테스트 디렉토리에는 시스템 테스트가 포함되어 있으며 이는 애플리케이션의 전체 브라우저 테스트에 사용됩니다. 시스템 테스트를 통해 사용자가 경험하는 방식으로 응용 프로그램을 테스트하고 JavaScript를 테스트 할 수 있습니다. 시스템 테스트는 Capybara에서 상속되며 응용 프로그램의 브라우저 테스트에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6c61cb8c1e81d7702d9e362c4a46ecd45bc1e6ec" translate="yes" xml:space="preserve">
          <source>The table name for &lt;code&gt;Blog::Post&lt;/code&gt; should be &lt;code&gt;blog_posts&lt;/code&gt; due to the existence of the method &lt;code&gt;Blog.table_name_prefix&lt;/code&gt;. However, if &lt;code&gt;app/models/blog/post.rb&lt;/code&gt; is executed before &lt;code&gt;app/models/blog.rb&lt;/code&gt; is, Active Record is not aware of the existence of such method, and assumes the table is &lt;code&gt;posts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e226fbd01d0f3a577c7b4944a32ddf8e19e4f6ff" translate="yes" xml:space="preserve">
          <source>The tables for these classes could look something like:</source>
          <target state="translated">이 클래스의 테이블은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b607a63d813d085dd13611c891d91b17902f9714" translate="yes" xml:space="preserve">
          <source>The tag builder respects &lt;a href=&quot;https://www.w3.org/TR/html5/syntax.html#void-elements&quot;&gt;HTML5 void elements&lt;/a&gt; if no content is passed, and omits closing tags for those elements.</source>
          <target state="translated">태그 빌더 는 컨텐츠가 전달되지 않으면 &lt;a href=&quot;https://www.w3.org/TR/html5/syntax.html#void-elements&quot;&gt;HTML5 void 요소&lt;/a&gt; 를 고려하고 해당 요소에 대한 닫는 태그를 생략합니다.</target>
        </trans-unit>
        <trans-unit id="675b6b8a4bce863060710a5c9d10379e1bb08bad" translate="yes" xml:space="preserve">
          <source>The target can be anything callable within the object, e.g. instance variables, methods, constants, etc.</source>
          <target state="translated">대상은 객체 내에서 호출 할 수있는 모든 것이 될 수 있습니다 (예 : 인스턴스 변수, 메서드, 상수 등).</target>
        </trans-unit>
        <trans-unit id="baa685d8cc36701c6d0f85459c13777a362b6065" translate="yes" xml:space="preserve">
          <source>The target can be anything callable within the object, e.g. instance variables, methods, constants, etc. Only the public methods of the target are delegated.</source>
          <target state="translated">대상은 객체 내에서 호출 할 수있는 것 (예 : 인스턴스 변수, 메서드, 상수 등) 일 수 있습니다. 대상의 공개 메서드 만 위임됩니다.</target>
        </trans-unit>
        <trans-unit id="6ccd69b0632a038b4775e1137e3438272e0689a3" translate="yes" xml:space="preserve">
          <source>The target method must be public, otherwise it will raise &lt;code&gt;NoMethodError&lt;/code&gt;.</source>
          <target state="translated">대상 메소드는 공용이어야합니다 . 그렇지 않으면 &lt;code&gt;NoMethodError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="97e918c05349a4e966ec6c625bebb25ec81486ac" translate="yes" xml:space="preserve">
          <source>The technique Sprockets uses for fingerprinting is to insert a hash of the content into the name, usually at the end. For example a CSS file &lt;code&gt;global.css&lt;/code&gt;</source>
          <target state="translated">스프로킷이 지문을 생성하는 데 사용하는 기술은 일반적으로 끝 부분에 컨텐츠 해시를 이름에 삽입하는 것입니다. 예를 들어 CSS 파일 &lt;code&gt;global.css&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a5e1b46915f509c3c7c7826ece3ecda8e4ab7d6" translate="yes" xml:space="preserve">
          <source>The tempfile is automatically closed and unlinked after the given block is executed.</source>
          <target state="translated">주어진 블록이 실행 된 후 임시 파일은 자동으로 닫히고 연결이 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="08851009cfd2022992ccb98a459841a4bbcf4922" translate="yes" xml:space="preserve">
          <source>The tempfile's name is prefixed with &lt;code&gt;ActiveStorage-&lt;/code&gt; and the blob's ID. Its extension matches that of the blob.</source>
          <target state="translated">임시 파일 이름 앞에 &lt;code&gt;ActiveStorage-&lt;/code&gt; 와 BLOB ID 가 붙습니다 . 확장은 Blob의 확장과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="fcda92529a81d9af722ac3cb13fb8f8768ff4cb9" translate="yes" xml:space="preserve">
          <source>The template digest that's added to the cache key is computed by taking an MD5 of the contents of the entire template file. This ensures that your caches will automatically expire when you change the template file.</source>
          <target state="translated">캐시 키에 추가 된 템플릿 다이제스트는 전체 템플릿 파일 내용의 MD5를 가져 와서 계산됩니다. 이렇게하면 템플릿 파일을 변경할 때 캐시가 자동으로 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="ba538c4449760474d7d60b4c54d76929d5f7fcb3" translate="yes" xml:space="preserve">
          <source>The template will be looked always in &lt;code&gt;app/views/layouts/&lt;/code&gt; folder. But you can point &lt;code&gt;layouts&lt;/code&gt; folder direct also. &lt;code&gt;layout &quot;layouts/demo&quot;&lt;/code&gt; is the same as &lt;code&gt;layout
&quot;demo&quot;&lt;/code&gt;.</source>
          <target state="translated">템플릿은 항상 &lt;code&gt;app/views/layouts/&lt;/code&gt; 폴더에 표시됩니다. 그러나 &lt;code&gt;layouts&lt;/code&gt; 폴더를 직접 가리킬 수도 있습니다. &lt;code&gt;layout &quot;layouts/demo&quot;&lt;/code&gt; 는 &lt;code&gt;layout &quot;demo&quot;&lt;/code&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="5c5c794abecdd21cff9c4b0a0fde1a6849f77b0f" translate="yes" xml:space="preserve">
          <source>The template will be rendered in a Rack environment which is accessible through ActionController::Renderer#env. You can set it up in two ways:</source>
          <target state="translated">템플릿은 ActionController :: Renderer # env를 통해 액세스 할 수있는 랙 환경에서 렌더링됩니다. 두 가지 방법으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cf77bf1c65d71615e432d7b152984771af2f9e1" translate="yes" xml:space="preserve">
          <source>The test adapter should be used only in testing. Along with &lt;code&gt;ActionCable::TestHelper&lt;/code&gt; it makes a great tool to test your Rails application.</source>
          <target state="translated">테스트 어댑터는 테스트시에만 사용해야합니다. &lt;code&gt;ActionCable::TestHelper&lt;/code&gt; 와 함께 Rails 애플리케이션을 테스트 할 수있는 훌륭한 툴입니다.</target>
        </trans-unit>
        <trans-unit id="e2f52f540be30e96ad7b0037c64acc9126cfb2d3" translate="yes" xml:space="preserve">
          <source>The test adapter should be used only in testing. Along with &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; and &lt;code&gt;ActiveJob::TestHelper&lt;/code&gt; it makes a great tool to test your Rails application.</source>
          <target state="translated">테스트 어댑터는 테스트시에만 사용해야합니다. &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; 및 &lt;code&gt;ActiveJob::TestHelper&lt;/code&gt; 와 함께 Rails 애플리케이션을 테스트 할 수있는 훌륭한 도구입니다.</target>
        </trans-unit>
        <trans-unit id="975aa4be50774a60cf43702b38d9d5f31ba89b40" translate="yes" xml:space="preserve">
          <source>The test for the controller</source>
          <target state="translated">컨트롤러 테스트</target>
        </trans-unit>
        <trans-unit id="00a7467e10ff3f397084acc632df42c027f23243" translate="yes" xml:space="preserve">
          <source>The test runner also provides a lot of other features like failing fast, deferring test output at the end of test run and so on. Check the documentation of the test runner as follows:</source>
          <target state="translated">테스트 러너는 빠른 실패, 테스트 실행 종료시 테스트 출력 지연 등과 같은 다른 많은 기능도 제공합니다. 다음과 같이 테스트 러너의 문서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="b6c69ad7de8325a76cdfff0549a2a13fb995582e" translate="yes" xml:space="preserve">
          <source>The test runner also provides a lot of other features like failing fast, deferring test output at the end of the test run and so on. Check the documentation of the test runner as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640507b7858ee7a8ef9198521e54b0f566518fb9" translate="yes" xml:space="preserve">
          <source>The test should see that there is an &lt;code&gt;h1&lt;/code&gt; on the articles index page and pass.</source>
          <target state="translated">테스트는 기사 색인 페이지에 &lt;code&gt;h1&lt;/code&gt; 이 있고 통과했는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="9b2cf1c313b916f77748246680f4fd2104331502" translate="yes" xml:space="preserve">
          <source>The test will have the following name:</source>
          <target state="translated">테스트 이름은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="72797504f4efb0607c366b3726d9a06008557676" translate="yes" xml:space="preserve">
          <source>The testing environment will automatically load all the fixtures into the database before each test. To ensure consistent data, the environment deletes the fixtures before running the load.</source>
          <target state="translated">테스트 환경은 각 테스트 전에 모든 조명기를 자동으로 데이터베이스에로드합니다. 일관된 데이터를 보장하기 위해 환경은로드를 실행하기 전에 조명기를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="29f0e86770cb31aee986bbcb60bab0de0e063a64" translate="yes" xml:space="preserve">
          <source>The third argument, &lt;code&gt;indent_empty_lines&lt;/code&gt;, is a flag that says whether empty lines should be indented. Default is false.</source>
          <target state="translated">세 번째 인수 &lt;code&gt;indent_empty_lines&lt;/code&gt; 는 빈 줄을 들여 쓸지 여부를 나타내는 플래그입니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="416d9d9d95fa737fdf9ecf9dd097599dc8c9c7ef" translate="yes" xml:space="preserve">
          <source>The third feature of the asset pipeline is it allows coding assets via a higher-level language, with precompilation down to the actual assets. Supported languages include Sass for CSS, CoffeeScript for JavaScript, and ERB for both by default.</source>
          <target state="translated">자산 파이프 라인의 세 번째 기능은 실제 자산까지 사전 컴파일하여 고급 언어를 통해 자산을 코딩 할 수 있다는 것입니다. 지원되는 언어에는 기본적으로 Sass for CSS, CoffeeScript for JavaScript 및 ERB가 있습니다.</target>
        </trans-unit>
        <trans-unit id="11060f387f51981fd82ede832f35a1656221d2dc" translate="yes" xml:space="preserve">
          <source>The third line can safely access the &lt;code&gt;:input&lt;/code&gt; key, and let the user to pass either &lt;code&gt;:input&lt;/code&gt; or &quot;input&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12ece5923a813434343679094fa85482f7f8059" translate="yes" xml:space="preserve">
          <source>The threaded parallelization uses minitest's parallel executor directly. The processes parallelization uses a Ruby DRb server.</source>
          <target state="translated">스레드 병렬화는 minitest의 병렬 실행기를 직접 사용합니다. 프로세스 병렬화는 Ruby DRb 서버를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6511e3596ea3977b98718f56e83ca7b2c0af377b" translate="yes" xml:space="preserve">
          <source>The threats against web applications include user account hijacking, bypass of access control, reading or modifying sensitive data, or presenting fraudulent content. Or an attacker might be able to install a Trojan horse program or unsolicited e-mail sending software, aim at financial enrichment, or cause brand name damage by modifying company resources. In order to prevent attacks, minimize their impact and remove points of attack, first of all, you have to fully understand the attack methods in order to find the correct countermeasures. That is what this guide aims at.</source>
          <target state="translated">웹 응용 프로그램에 대한 위협에는 사용자 계정 하이재킹, 액세스 제어 우회, 중요한 데이터 읽기 또는 수정 또는 사기성 컨텐트 제공이 포함됩니다. 또는 공격자가 트로이 목마 프로그램이나 원치 않는 전자 메일 전송 소프트웨어를 설치하거나 재정 강화를 목표로하거나 회사 리소스를 수정하여 브랜드 이름을 손상시킬 수 있습니다. 공격을 방지하고, 그 영향을 최소화하고, 공격 지점을 제거하려면 우선 올바른 대책을 찾기 위해 공격 방법을 완전히 이해해야합니다. 이것이이 안내서의 목표입니다.</target>
        </trans-unit>
        <trans-unit id="31848326716b8e439bd35853912f7581c2cf69c2" translate="yes" xml:space="preserve">
          <source>The three of them return &lt;code&gt;nil&lt;/code&gt; for blank receivers.</source>
          <target state="translated">이들 중 세 개는 빈 수신기에 대해 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a86c8236c7a4aa22941361c064142983f59ef501" translate="yes" xml:space="preserve">
          <source>The time is parsed using Time.parse method. If &lt;code&gt;form&lt;/code&gt; is :local, then the time is in the system timezone. If the date part is missing then the current date is used and if the time part is missing then it is assumed to be 00:00:00.</source>
          <target state="translated">Time.parse 메서드를 사용하여 시간을 구문 분석합니다. 경우 &lt;code&gt;form&lt;/code&gt; 있습니다 : 지역, 다음 시간은 시스템 시간대에 있습니다. 날짜 부분이 없으면 현재 날짜가 사용되고 시간 부분이없는 경우 00:00:00으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="1da1a16a7b055aacdbe4a5e837bd0b5a8550d320" translate="yes" xml:space="preserve">
          <source>The timeline of Rails' initialization sequence.</source>
          <target state="translated">Rails의 초기화 시퀀스 타임 라인.</target>
        </trans-unit>
        <trans-unit id="d6194f3b2f582790fad265e80912cb271ac73c7b" translate="yes" xml:space="preserve">
          <source>The token parameter is named &lt;code&gt;authenticity_token&lt;/code&gt; by default. The name and value of this token must be added to every layout that renders forms by including &lt;code&gt;csrf_meta_tags&lt;/code&gt; in the HTML &lt;code&gt;head&lt;/code&gt;.</source>
          <target state="translated">토큰 매개 변수의 이름 은 기본적으로 &lt;code&gt;authenticity_token&lt;/code&gt; 입니다. 이 토큰의 이름과 값은 HTML &lt;code&gt;head&lt;/code&gt; &lt;code&gt;csrf_meta_tags&lt;/code&gt; 를 포함 시켜 양식을 렌더링하는 모든 레이아웃에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="05d8eb590d8e83077814240b2a170f555b1863fe" translate="yes" xml:space="preserve">
          <source>The top portion of the index page displays the users. The bottom portion provides a form to create a new user.</source>
          <target state="translated">색인 페이지의 상단 부분에 사용자가 표시됩니다. 하단 부분은 새 사용자를 작성하기위한 양식을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e7aaa0ff7f838941cf4d13f0243ddae8be9664af" translate="yes" xml:space="preserve">
          <source>The trailing '_id' can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true (default is false).</source>
          <target state="translated">선택적 매개 변수 &lt;code&gt;keep_id_suffix&lt;/code&gt; 를 true 로 설정하여 후행 '_id'를 유지하고 대문자로 지정할 수 있습니다 (기본값은 false).</target>
        </trans-unit>
        <trans-unit id="a346915612a785e701fb8aa4fb88d6d804e10964" translate="yes" xml:space="preserve">
          <source>The trailing '_id' can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true. By default, this parameter is false.</source>
          <target state="translated">선택적 매개 변수 &lt;code&gt;keep_id_suffix&lt;/code&gt; 를 true 로 설정하여 후행 '_id'를 유지하고 대문자를 사용할 수 있습니다 . 기본적으로이 매개 변수는 false입니다.</target>
        </trans-unit>
        <trans-unit id="aec6fc5c9914c772cee6cc49f306e3312005d4e1" translate="yes" xml:space="preserve">
          <source>The trailing '_id','Id'.. can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true. By default, this parameter is false.</source>
          <target state="translated">선택적 매개 변수 &lt;code&gt;keep_id_suffix&lt;/code&gt; 를 true 로 설정하여 후행 '_id', 'Id'..를 유지하고 대문자를 사용할 수 있습니다 . 기본적으로이 매개 변수는 false입니다.</target>
        </trans-unit>
        <trans-unit id="c4c9ed39b42fbbb24c8e1e3654de7fd488fd5d48" translate="yes" xml:space="preserve">
          <source>The translated model name, translated attribute name, and value are always available for interpolation as &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; respectively.</source>
          <target state="translated">변환 된 모델 이름, 변환 된 속성 이름 및 값은 각각 &lt;code&gt;model&lt;/code&gt; , &lt;code&gt;attribute&lt;/code&gt; 및 &lt;code&gt;value&lt;/code&gt; 으로 보간에 항상 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c206e712ab9262a624613a14bf5a4614f215afa" translate="yes" xml:space="preserve">
          <source>The translation denoted as &lt;code&gt;:one&lt;/code&gt; is regarded as singular, and the &lt;code&gt;:other&lt;/code&gt; is used as plural. If the count is zero, and a &lt;code&gt;:zero&lt;/code&gt; entry is present, then it will be used instead of &lt;code&gt;:other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:one&lt;/code&gt; 으로 표시된 번역 은 단수로 간주되고 &lt;code&gt;:other&lt;/code&gt; 는 복수로 사용됩니다. 카운트가 0이고 &lt;code&gt;:zero&lt;/code&gt; 항목이 있으면 &lt;code&gt;:other&lt;/code&gt; 대신 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="817e4fce66d44b8da035cb559bc61fa24de4f850" translate="yes" xml:space="preserve">
          <source>The trick to adding these back in is that, by default, they are passed &lt;code&gt;session_options&lt;/code&gt; when added (including the session key), so you can't just add a &lt;code&gt;session_store.rb&lt;/code&gt; initializer, add &lt;code&gt;use ActionDispatch::Session::CookieStore&lt;/code&gt; and have sessions functioning as usual. (To be clear: sessions may work, but your session options will be ignored - i.e the session key will default to &lt;code&gt;_session_id&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eaffe2233ce31e6bda12ed1e808ce2e1055683f" translate="yes" xml:space="preserve">
          <source>The truncated text ends with the &lt;code&gt;:omission&lt;/code&gt; string, defaulting to &amp;ldquo;&amp;hellip;&amp;rdquo;, for a total length not exceeding &lt;code&gt;bytesize&lt;/code&gt;.</source>
          <target state="translated">잘린 텍스트는 &lt;code&gt;bytesize&lt;/code&gt; 길이를 초과하지 않는 총 길이에 대해 &lt;code&gt;:omission&lt;/code&gt; 문자열 (기본값은&amp;ldquo;&amp;hellip;&amp;rdquo;)로 끝납니다 .</target>
        </trans-unit>
        <trans-unit id="3ef5f4d61a4d21cbfd235b66e8b63c8804fdf71b" translate="yes" xml:space="preserve">
          <source>The two basic structures are arrays and hashes. Hashes mirror the syntax used for accessing the value in &lt;code&gt;params&lt;/code&gt;. For example, if a form contains:</source>
          <target state="translated">두 가지 기본 구조는 배열과 해시입니다. 해시는 &lt;code&gt;params&lt;/code&gt; 의 값에 액세스하는 데 사용되는 구문을 반영합니다 . 예를 들어 양식에 다음이 포함 된 경우</target>
        </trans-unit>
        <trans-unit id="4ae6f1958803c95c5af96cee2de8ca60e298f229" translate="yes" xml:space="preserve">
          <source>The two dashes start a comment ignoring everything after it. So the query returns all records from the projects table including those blind to the user. This is because the condition is true for all records.</source>
          <target state="translated">두 개의 대시는 그 이후의 모든 것을 무시하고 주석을 시작합니다. 따라서 쿼리는 사용자에게 맹인 레코드를 포함하여 프로젝트 테이블의 모든 레코드를 반환합니다. 모든 레코드에 대해 조건이 true이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="8942bbf1653c1d3d11b11a9b73ae3e0919f325ce" translate="yes" xml:space="preserve">
          <source>The two files we'll focus on are the migration file (&lt;code&gt;db/migrate/&amp;lt;timestamp&amp;gt;_create_articles.rb&lt;/code&gt;) and the model file (&lt;code&gt;app/models/article.rb&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26baf66a5c5cf8b3ca15d0abd849a6180bb33678" translate="yes" xml:space="preserve">
          <source>The two lines following the request are to handle the redirect we setup when creating a new article.</source>
          <target state="translated">요청 다음에 나오는 두 줄은 새 기사를 만들 때 설정 한 리디렉션을 처리하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="6b101fb80aec1c9c2ab48a863fb3cea6d938460e" translate="yes" xml:space="preserve">
          <source>The two main methods for testing your routes:</source>
          <target state="translated">경로를 테스트하는 두 가지 주요 방법 :</target>
        </trans-unit>
        <trans-unit id="baed0bf9298ec8701b9fbc2d0adf2775a8c9d6ae" translate="yes" xml:space="preserve">
          <source>The two relations must be structurally compatible: they must be scoping the same model, and they must differ only by &lt;a href=&quot;querymethods#method-i-where&quot;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt; (if no &lt;a href=&quot;querymethods#method-i-group&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/a&gt; has been defined) or &lt;a href=&quot;querymethods#method-i-having&quot;&gt;&lt;code&gt;having&lt;/code&gt;&lt;/a&gt; (if a &lt;a href=&quot;querymethods#method-i-group&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/a&gt; is present).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df240969de79c63294f13e9b45064ab12e90f94" translate="yes" xml:space="preserve">
          <source>The two relations must be structurally compatible: they must be scoping the same model, and they must differ only by &lt;a href=&quot;querymethods#method-i-where&quot;&gt;where&lt;/a&gt; (if no &lt;a href=&quot;querymethods#method-i-group&quot;&gt;group&lt;/a&gt; has been defined) or &lt;a href=&quot;querymethods#method-i-having&quot;&gt;having&lt;/a&gt; (if a &lt;a href=&quot;querymethods#method-i-group&quot;&gt;group&lt;/a&gt; is present). Neither relation may have a &lt;a href=&quot;querymethods#method-i-limit&quot;&gt;limit&lt;/a&gt;, &lt;a href=&quot;querymethods#method-i-offset&quot;&gt;offset&lt;/a&gt;, or &lt;a href=&quot;querymethods#method-i-distinct&quot;&gt;distinct&lt;/a&gt; set.</source>
          <target state="translated">그들이 동일한 모델을 범위 지정되어야하며, 이들은 단지 차이해야 두 관계는 구조적으로 호환되어야 &lt;a href=&quot;querymethods#method-i-where&quot;&gt;곳&lt;/a&gt; (어떤 경우 &lt;a href=&quot;querymethods#method-i-group&quot;&gt;그룹이&lt;/a&gt; 정의되어 있지 않은) 또는 &lt;a href=&quot;querymethods#method-i-having&quot;&gt;갖는&lt;/a&gt; (a 경우 &lt;a href=&quot;querymethods#method-i-group&quot;&gt;기가&lt;/a&gt; 존재한다). 관계는 &lt;a href=&quot;querymethods#method-i-limit&quot;&gt;limit&lt;/a&gt; , &lt;a href=&quot;querymethods#method-i-offset&quot;&gt;offset&lt;/a&gt; 또는 &lt;a href=&quot;querymethods#method-i-distinct&quot;&gt;distinct&lt;/a&gt; 세트를 가질 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4429a5c939dc6aca1139441991d565996b91dd6d" translate="yes" xml:space="preserve">
          <source>The type detected by Active Record can be overridden.</source>
          <target state="translated">Active Record가 감지 한 유형을 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6e1bcdf615211277f7abc9c829db95fcf59969a" translate="yes" xml:space="preserve">
          <source>The type of an attribute is given the opportunity to change how dirty tracking is performed. The methods &lt;code&gt;changed?&lt;/code&gt; and &lt;code&gt;changed_in_place?&lt;/code&gt; will be called from &lt;a href=&quot;../../activemodel/dirty&quot;&gt;&lt;code&gt;ActiveModel::Dirty&lt;/code&gt;&lt;/a&gt;. See the documentation for those methods in &lt;a href=&quot;../../activemodel/type/value&quot;&gt;&lt;code&gt;ActiveModel::Type::Value&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0b9cf1c4d9c3eca3e4a428a0c7fa3e8066b238" translate="yes" xml:space="preserve">
          <source>The type of an attribute is given the opportunity to change how dirty tracking is performed. The methods &lt;code&gt;changed?&lt;/code&gt; and &lt;code&gt;changed_in_place?&lt;/code&gt; will be called from &lt;a href=&quot;../../activemodel/dirty&quot;&gt;ActiveModel::Dirty&lt;/a&gt;. See the documentation for those methods in &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; for more details.</source>
          <target state="translated">속성 유형에 더티 추적 수행 방법을 변경할 수 있습니다. 방법이 &lt;code&gt;changed?&lt;/code&gt; 그리고 &lt;code&gt;changed_in_place?&lt;/code&gt; &lt;a href=&quot;../../activemodel/dirty&quot;&gt;ActiveModel :: Dirty&lt;/a&gt; 에서 호출됩니다 . 자세한 내용은 &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel :: Type :: Value의&lt;/a&gt; 해당 방법에 대한 설명서 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ffc82cbd0e859aed8de76a61e8169992477d9bfa" translate="yes" xml:space="preserve">
          <source>The type of error, defaults to `:invalid` unless specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927059acf7f717dfa1ace58934a018ae273d21bc" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;cidr&lt;/code&gt; are mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.2.2/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt; objects. The &lt;code&gt;macaddr&lt;/code&gt; type is mapped to normal text.</source>
          <target state="translated">&lt;code&gt;inet&lt;/code&gt; 및 &lt;code&gt;cidr&lt;/code&gt; 유형 은 Ruby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.2.2/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt; &lt;code&gt;IPAddr&lt;/code&gt; &lt;/a&gt; 객체에 매핑됩니다 . &lt;code&gt;macaddr&lt;/code&gt; 유형은 일반 텍스트에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="a226f5fad36d407ad5aa4429e81676ae87fdbd65" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;cidr&lt;/code&gt; are mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.5.0/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt; objects. The &lt;code&gt;macaddr&lt;/code&gt; type is mapped to normal text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0861f73b8db3082acb47c4ea15e2a6f8e772b26" translate="yes" xml:space="preserve">
          <source>The typical route is to just dump everything in a monolithic class, perhaps with a comment, as a least-bad alternative. Using modules in separate files means tedious sifting to get a big-picture view.</source>
          <target state="translated">전형적인 경로는 모 놀리 식 클래스의 모든 것을 아마도 가장 나쁜 대안으로 주석으로 덤프하는 것입니다. 별도의 파일에 모듈을 사용하면 큰 그림을 볼 수있는 지루한 선별 작업이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="cc0073e1d3239a9024667d104757ce1e2361f109" translate="yes" xml:space="preserve">
          <source>The underlying body, as a streamable object.</source>
          <target state="translated">스트리밍 가능한 객체 인 기본 바디</target>
        </trans-unit>
        <trans-unit id="504117b27c360308482a63dde448944374808b20" translate="yes" xml:space="preserve">
          <source>The underlying table must have the relevant columns defined with unique constraints.</source>
          <target state="translated">기본 테이블에는 고유 제한 조건으로 정의 된 관련 열이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="fdf93057400271c1f0b768430268fc455455f04a" translate="yes" xml:space="preserve">
          <source>The unique request id can be used to trace a request end-to-end and would typically end up being part of log files from multiple pieces of the stack.</source>
          <target state="translated">고유 한 요청 ID는 엔드 투 엔드 요청을 추적하는 데 사용될 수 있으며 일반적으로 여러 스택에서 로그 파일의 일부가됩니다.</target>
        </trans-unit>
        <trans-unit id="44345e0f37696053af8dfe1ad08931d4ee884fed" translate="yes" xml:space="preserve">
          <source>The unique request id is either based on the X-Request-Id header in the request, which would typically be generated by a firewall, load balancer, or the web server, or, if this header is not available, a random uuid. If the header is accepted from the outside world, we sanitize it to a max of 255 chars and alphanumeric and dashes only.</source>
          <target state="translated">고유 한 요청 ID는 일반적으로 방화벽,로드 밸런서 또는 웹 서버에 의해 생성되는 요청의 X-Request-Id 헤더를 기반으로하거나이 헤더를 사용할 수없는 경우 임의 uuid입니다. 헤더가 외부 세계에서 허용되는 경우 최대 255 자, 영숫자 및 대시로만 정리합니다.</target>
        </trans-unit>
        <trans-unit id="c4127c0166c14c885baf6d19dcdb9fce72629288" translate="yes" xml:space="preserve">
          <source>The upside of long-lived channel instances is that you can use instance variables to keep reference to objects that future subscriber requests can interact with. Here's a quick example:</source>
          <target state="translated">오래 지속되는 채널 인스턴스의 장점은 인스턴스 변수를 사용하여 향후 구독자 요청이 상호 작용할 수있는 객체에 대한 참조를 유지할 수 있다는 것입니다. 다음은 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="f05b9f48f977cb2b8245e6965144965f6f98f067" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;write_attribute&lt;/code&gt; to write to the field in model is just one example of how a plugin can interact with the model, and will not always be the right method to use. For example, you could also use:</source>
          <target state="translated">모델에서 필드에 쓰기 위해 &lt;code&gt;write_attribute&lt;/code&gt; 를 사용 하는 것은 플러그인이 모델과 상호 작용할 수있는 방법의 한 예일 뿐이며 항상 올바른 방법으로 사용되는 것은 아닙니다. 예를 들어 다음을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ba3a56d5e7efe66d3fab380043aeea55b8e7b0a" translate="yes" xml:space="preserve">
          <source>The use of extra attributes on the join table in a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association is deprecated. If you require this sort of complex behavior on the table that joins two models in a many-to-many relationship, you should use a &lt;code&gt;has_many :through&lt;/code&gt; association instead of &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; 연관 에서 결합 테이블에 추가 속성을 사용하는 것은 더 이상 사용되지 않습니다. 다 대다 관계로 두 모델을 조인하는 테이블에서 이러한 종류의 복잡한 동작이 필요한 경우 &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; 대신 &lt;code&gt;has_many :through&lt;/code&gt; 연관을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="687066842fc8ecd4fa47ae8968fd256f5e45ada4" translate="yes" xml:space="preserve">
          <source>The user buys something.</source>
          <target state="translated">사용자가 무언가를 구입합니다.</target>
        </trans-unit>
        <trans-unit id="7c62bd30e184568bef1e6d0ac16046c9a736c174" translate="yes" xml:space="preserve">
          <source>The user can also specify the encoding via a comment on the first line of the template (# encoding: NAME-OF-ENCODING). This will work with any template engine, as we process out the encoding comment before passing the source on to the template engine, leaving a blank line in its stead.</source>
          <target state="translated">사용자는 템플릿의 첫 번째 줄에 주석을 통해 인코딩을 지정할 수도 있습니다 (# 인코딩 : NAME-OF-ENCODING). 소스를 템플릿 엔진으로 전달하기 전에 인코딩 주석을 처리하고 대신 빈 줄을 남겨두면 모든 템플릿 엔진에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="826ca47e57f18b11478c16bdc6bb3633f987bcfe" translate="yes" xml:space="preserve">
          <source>The user can override this default by passing a block to the layout:</source>
          <target state="translated">사용자는 블록을 레이아웃에 전달하여이 기본값을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="719dce192492bacd8bcefcb5f6b709f528c266da" translate="yes" xml:space="preserve">
          <source>The user has their original credit back.</source>
          <target state="translated">사용자는 원래 크레딧을 돌려받습니다.</target>
        </trans-unit>
        <trans-unit id="c6fa6bc3d4150b5cc2b951fee14c9d1cabd21a92" translate="yes" xml:space="preserve">
          <source>The user is &lt;em&gt;held accountable for the results&lt;/em&gt; of the interaction.</source>
          <target state="translated">사용자는 상호 작용 &lt;em&gt;결과&lt;/em&gt; 에 &lt;em&gt;대해 책임을&lt;/em&gt; 집니다.</target>
        </trans-unit>
        <trans-unit id="3e076b48f1c86983855eb3347dba2080e3709d89" translate="yes" xml:space="preserve">
          <source>The user takes the cookie from the first step (which they previously copied) and replaces the current cookie in the browser.</source>
          <target state="translated">사용자는 첫 번째 단계 (이전에 복사 한)에서 쿠키를 가져 와서 브라우저에서 현재 쿠키를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="0c221d372386ae6055b0803819195b0d89fb89dc" translate="yes" xml:space="preserve">
          <source>The validation happens by performing an SQL query into the model's table, searching for an existing record with the same value in that attribute.</source>
          <target state="translated">모델 테이블에 대한 SQL 쿼리를 수행하고 해당 속성에서 동일한 값을 가진 기존 레코드를 검색하면 유효성 검사가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="210fb69772009d42d4971aa88ccf3a4132e9cbb3" translate="yes" xml:space="preserve">
          <source>The validation only runs when all the &lt;code&gt;:if&lt;/code&gt; conditions and none of the &lt;code&gt;:unless&lt;/code&gt; conditions are evaluated to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">유효성 검사는 모든 &lt;code&gt;:if&lt;/code&gt; 조건이 있고 &lt;code&gt;:unless&lt;/code&gt; 조건이 &lt;code&gt;true&lt;/code&gt; 로 평가 되지 않은 경우 에만 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="22d922531e256f36a7805e905aa5612d4cc33f30" translate="yes" xml:space="preserve">
          <source>The validation process on save can be skipped by passing &lt;code&gt;validate:
false&lt;/code&gt;. The validation context can be changed by passing &lt;code&gt;context: context&lt;/code&gt;. The regular &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; method is replaced with this when the validations module is mixed in, which it is by default.</source>
          <target state="translated">&lt;code&gt;validate: false&lt;/code&gt; 를 전달하여 저장시 유효성 검증 프로세스를 건너 뛸 수 있습니다 . &lt;code&gt;context: context&lt;/code&gt; 를 전달하여 유효성 검사 컨텍스트를 변경할 수 있습니다 . 정규 &lt;a href=&quot;persistence#method-i-save&quot;&gt;저장 액티브 :: 자료 #&lt;/a&gt; 유효성 검증 모듈이 기본값 인, 혼합 될 때 방법이 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="8999b1ed1a41ae9c57579e07e860b4efcd1722c6" translate="yes" xml:space="preserve">
          <source>The validators hash can also handle regular expressions, ranges, arrays and strings in shortcut form.</source>
          <target state="translated">유효성 검사기 해시는 정규식, 범위, 배열 및 문자열을 바로 가기 형식으로 처리 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="74bda52d12b9a29a5adb328b6d0e82b42dd08d0d" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;i18n.transliterate.rule&lt;/code&gt; can be a simple &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; that maps characters to ASCII approximations as shown above, or, for more complex requirements, a Proc:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc6ecf56ce207f86d9a65f068b01ae48ef8f30f" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;i18n.transliterate.rule&lt;/code&gt; can be a simple &lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt; that maps characters to ASCII approximations as shown above, or, for more complex requirements, a Proc:</source>
          <target state="translated">&lt;code&gt;i18n.transliterate.rule&lt;/code&gt; 의 값은 위에 표시된대로 문자를 ASCII 근사값으로 맵핑 하는 간단한 &lt;a href=&quot;../hash&quot;&gt;해시&lt;/a&gt; 이거나 복잡한 요구 사항 인 경우 Proc :</target>
        </trans-unit>
        <trans-unit id="4529e2d3c40915fd4c9132c578e7597ed49f3db5" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;autoload_paths&lt;/code&gt; can be inspected. In a just-generated application it is (edited):</source>
          <target state="translated">&lt;code&gt;autoload_paths&lt;/code&gt; 의 값을 검사 할 수 있습니다. 방금 생성 된 응용 프로그램에서 다음과 같이 편집됩니다.</target>
        </trans-unit>
        <trans-unit id="cd0a00e0a081899b611799d0f44fe6f9726d2a6e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;params[:ids]&lt;/code&gt; will now be &lt;code&gt;[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/code&gt;. Note that parameter values are always strings; Rails makes no attempt to guess or cast the type.</source>
          <target state="translated">&lt;code&gt;params[:ids]&lt;/code&gt; 의 값 은 이제 &lt;code&gt;[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/code&gt; 됩니다. 매개 변수 값은 항상 문자열입니다. Rails는 유형을 추측하거나 캐스트하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7ee55d30d007ee20fa020330bcd60d746465c7ba" translate="yes" xml:space="preserve">
          <source>The value will be assigned to instance variable &lt;code&gt;@options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be17b91d3b4e674a03379a9cbc0828c572860985" translate="yes" xml:space="preserve">
          <source>The values are first processed by SHA256, so that we don't leak length info via timing attacks.</source>
          <target state="translated">값은 먼저 SHA256에 의해 처리되므로 타이밍 공격을 통해 길이 정보가 유출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f7668455a149f8036f8739030b9a40a0d03c8dfc" translate="yes" xml:space="preserve">
          <source>The values compared should be of fixed length, such as strings that have already been processed by HMAC. Raises in case of length mismatch.</source>
          <target state="translated">비교 된 값은 HMAC에서 이미 처리 한 문자열과 같이 고정 길이 여야합니다. 길이가 일치하지 않을 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c3de7898cf5037e5a00562c2e793081732841dfe" translate="yes" xml:space="preserve">
          <source>The values of the hash here being the arguments or options passed to the specific git command. As per the final example shown here, multiple git commands can be specified at a time, but the order of their running is not guaranteed to be the same as the order that they were specified in.</source>
          <target state="translated">여기서 해시 값은 특정 git 명령에 전달 된 인수 또는 옵션입니다. 여기에 표시된 최종 예제에 따라 한 번에 여러 개의 git 명령을 지정할 수 있지만 실행 순서가 지정된 순서와 동일하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="7922ad0c81f69985a50e0d574592935e9fe97a2f" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;f&lt;/code&gt; yielded to the block is a &lt;a href=&quot;formbuilder&quot;&gt;&lt;code&gt;FormBuilder&lt;/code&gt;&lt;/a&gt; object that incorporates the knowledge about the model object represented by &lt;code&gt;:person&lt;/code&gt; passed to &lt;code&gt;form_for&lt;/code&gt;. Methods defined on the &lt;a href=&quot;formbuilder&quot;&gt;&lt;code&gt;FormBuilder&lt;/code&gt;&lt;/a&gt; are used to generate fields bound to this model. Thus, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51738102e906fea5a59e8e5aa4f95a26d7b4e6ee" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;f&lt;/code&gt; yielded to the block is a &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; object that incorporates the knowledge about the model object represented by &lt;code&gt;:person&lt;/code&gt; passed to &lt;code&gt;form_for&lt;/code&gt;. Methods defined on the &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; are used to generate fields bound to this model. Thus, for example,</source>
          <target state="translated">블록에 생성 된 변수 &lt;code&gt;f&lt;/code&gt; 는 &lt;code&gt;form_for&lt;/code&gt; 에 전달 된 &lt;code&gt;:person&lt;/code&gt; 로 표시되는 모델 오브젝트에 대한 지식을 통합 하는 &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; 오브젝트입니다 . &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; 에 정의 된 메소드 는이 모델에 바인드 된 필드를 생성하는 데 사용됩니다. 따라서 예를 들어</target>
        </trans-unit>
        <trans-unit id="c9a81f628645aa415b2032ec2f5f389b9a451d86" translate="yes" xml:space="preserve">
          <source>The variables inside the displayed list will be printed with their values after you move in the stack. To stop displaying a variable use &lt;code&gt;undisplay n&lt;/code&gt; where &lt;em&gt;n&lt;/em&gt; is the variable number (1 in the last example).</source>
          <target state="translated">표시된 목록 내의 변수는 스택으로 이동 한 후 해당 값과 함께 인쇄됩니다. 변수 표시를 중지하려면 &lt;code&gt;undisplay n&lt;/code&gt; 을 사용하십시오. 여기서 &lt;em&gt;n&lt;/em&gt; 은 변수 번호입니다 (마지막 예에서는 1).</target>
        </trans-unit>
        <trans-unit id="f2073f8b2673f5d9daba21618df8968535a36ee3" translate="yes" xml:space="preserve">
          <source>The various connection pools are managed by a single instance of &lt;a href=&quot;connectionhandler&quot;&gt;&lt;code&gt;ConnectionHandler&lt;/code&gt;&lt;/a&gt; accessible via &lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;&lt;code&gt;ActiveRecord::Base.connection_handler&lt;/code&gt;&lt;/a&gt;. All Active Record models use this handler to determine the connection pool that they should use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e5bd030892b4a852e2c3cbc8b86634a728d26f" translate="yes" xml:space="preserve">
          <source>The various connection pools are managed by a single instance of &lt;a href=&quot;connectionhandler&quot;&gt;ConnectionHandler&lt;/a&gt; accessible via &lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;ActiveRecord::Core.connection_handler&lt;/a&gt;. All Active Record models use this handler to determine the connection pool that they should use.</source>
          <target state="translated">다양한 연결 풀은 &lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;ActiveRecord :: Core.connection_handler&lt;/a&gt; 를 통해 액세스 할 수 있는 단일 &lt;a href=&quot;connectionhandler&quot;&gt;ConnectionHandler&lt;/a&gt; 인스턴스에 의해 관리됩니다 . 모든 Active Record 모델은이 핸들러를 사용하여 사용해야 할 연결 풀을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="c5f5cf73bffa3d14b9dcf19ce3a4d326d20b7af7" translate="yes" xml:space="preserve">
          <source>The verifier instance that all signed ids are generated and verified from. By default, it'll be initialized with the class-level &lt;code&gt;signed_id_verifier_secret&lt;/code&gt;, which within Rails comes from the &lt;a href=&quot;../../rails#method-c-application&quot;&gt;&lt;code&gt;Rails.application&lt;/code&gt;&lt;/a&gt;.key_generator. By default, it's SHA256 for the digest and JSON for the serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba65a91e27bd5bcb67a20448455ea6160bacbdd" translate="yes" xml:space="preserve">
          <source>The version column used for optimistic locking. Defaults to &lt;code&gt;lock_version&lt;/code&gt;.</source>
          <target state="translated">낙관적 잠금에 사용되는 버전 열입니다. 기본값은 &lt;code&gt;lock_version&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d0edb9fdea3de462fd0a58773839cce4a4acbae7" translate="yes" xml:space="preserve">
          <source>The version number in which the deprecated behavior will be removed, by default.</source>
          <target state="translated">더 이상 사용되지 않는 동작이 기본적으로 제거되는 버전 번호입니다.</target>
        </trans-unit>
        <trans-unit id="4fba4be43b3a2433eb37357ca2a053469838a20b" translate="yes" xml:space="preserve">
          <source>The version of your Node.js runtime should be printed out. Make sure it's greater than 8.16.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdf6561d827cf69682ee0db6a81ad972d2a8482" translate="yes" xml:space="preserve">
          <source>The very first migration related rails command you will use will probably be &lt;code&gt;bin/rails db:migrate&lt;/code&gt;. In its most basic form it just runs the &lt;code&gt;change&lt;/code&gt; or &lt;code&gt;up&lt;/code&gt; method for all the migrations that have not yet been run. If there are no such migrations, it exits. It will run these migrations in order based on the date of the migration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0230161de62aae504a0f81a584296cdc0e8222" translate="yes" xml:space="preserve">
          <source>The very first migration related rails command you will use will probably be &lt;code&gt;rails db:migrate&lt;/code&gt;. In its most basic form it just runs the &lt;code&gt;change&lt;/code&gt; or &lt;code&gt;up&lt;/code&gt; method for all the migrations that have not yet been run. If there are no such migrations, it exits. It will run these migrations in order based on the date of the migration.</source>
          <target state="translated">가장 먼저 사용할 마이그레이션 관련 rails 명령은 &lt;code&gt;rails db:migrate&lt;/code&gt; 일 것 입니다. 가장 기본적인 형태는 바로 실행 &lt;code&gt;change&lt;/code&gt; 또는 &lt;code&gt;up&lt;/code&gt; 아직 실행되지 않은 모든 마이그레이션을위한 방법을. 이러한 마이그레이션이 없으면 종료됩니다. 마이그레이션 날짜를 기준으로 이러한 마이그레이션을 순서대로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="ac2a3b8ac588e6c7d35fe808ffcfdd151ce9cc02" translate="yes" xml:space="preserve">
          <source>The video tag also supports all of the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; HTML options through the HTML options hash, including:</source>
          <target state="translated">비디오 태그는 다음 을 포함하여 HTML 옵션 해시를 통해 모든 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; HTML 옵션을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="119b909af465377a2dafbbc8a03ac551f389a7b4" translate="yes" xml:space="preserve">
          <source>The view class must have the following methods:</source>
          <target state="translated">뷰 클래스에는 다음 메소드가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="1d2a88b0bc833aa9900595087d57dd20bf6b3e79" translate="yes" xml:space="preserve">
          <source>The view will contain a form similar to the one we used when creating new articles. Create a file called &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; and make it look as follows:</source>
          <target state="translated">보기에는 새 기사를 만들 때 사용한 것과 유사한 양식이 포함됩니다. &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; 라는 파일을 만들고 다음과 같이 보이게합니다.</target>
        </trans-unit>
        <trans-unit id="6c158899320feee2e97c385d2ee14ec4ce40aa6d" translate="yes" xml:space="preserve">
          <source>The way it works is that, when the link is activated, it constructs a hidden form in the document with the &quot;action&quot; attribute corresponding to &quot;href&quot; value of the link, and the method corresponding to &lt;code&gt;data-method&lt;/code&gt; value, and submits that form.</source>
          <target state="translated">작동 방식은 링크가 활성화 될 때 링크의 &quot;href&quot;값에 해당하는 &quot;action&quot;속성과 &lt;code&gt;data-method&lt;/code&gt; 값에 해당하는 메소드를 사용하여 문서에 숨겨진 양식을 작성하여 제출하는 것입니다. 형태.</target>
        </trans-unit>
        <trans-unit id="1e18e70ccf9ed0f548a5db54192832822b7a0ad9" translate="yes" xml:space="preserve">
          <source>The way this is done is to add a non-guessable token which is only known to your server to each request. This way, if a request comes in without the proper token, it will be denied access.</source>
          <target state="translated">이를 수행하는 방법은 각 요청에 서버에만 알려진 추측 할 수없는 토큰을 추가하는 것입니다. 이렇게하면 적절한 토큰없이 요청이 들어 오면 액세스가 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="b7c78eda0eacbc05a4fde40017411e78c31cd0e1" translate="yes" xml:space="preserve">
          <source>The web application at &lt;code&gt;www.webapp.com&lt;/code&gt; verifies the user information in the corresponding session hash and destroys the project with the ID 1. It then returns a result page which is an unexpected result for the browser, so it will not display the image.</source>
          <target state="translated">&lt;code&gt;www.webapp.com&lt;/code&gt; 의 웹 응용 프로그램 은 해당 세션 해시의 사용자 정보를 확인하고 ID가 1 인 프로젝트를 삭제합니다. 그런 다음 브라우저에 예기치 않은 결과 인 결과 페이지를 반환하므로 이미지가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f0bf503400b87f8f940d1752feec19d755672a8" translate="yes" xml:space="preserve">
          <source>The whole callback chain is wrapped in a transaction. If any callback raises an exception, the execution chain gets halted and a ROLLBACK is issued. To intentionally stop a chain use:</source>
          <target state="translated">전체 콜백 체인은 트랜잭션으로 래핑됩니다. 콜백에서 예외가 발생하면 실행 체인이 중지되고 ROLLBACK이 발행됩니다. 의도적으로 체인 사용을 중지하려면 :</target>
        </trans-unit>
        <trans-unit id="422946e01cb3a5446cf46834bea23043acb43072" translate="yes" xml:space="preserve">
          <source>The word will be pluralized using rules defined for the locale (you must define your own inflection rules for languages other than English). See &lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;&lt;code&gt;ActiveSupport::Inflector.pluralize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304e04fad05e0c4f4a61a9fc6958560aa376e82f" translate="yes" xml:space="preserve">
          <source>The word will be pluralized using rules defined for the locale (you must define your own inflection rules for languages other than English). See &lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;ActiveSupport::Inflector#pluralize&lt;/a&gt;</source>
          <target state="translated">로케일에 대해 정의 된 규칙을 사용하여 단어가 복수로 작성됩니다 (영어 이외의 언어에 대한 고유 한 변곡 규칙을 정의해야합니다). &lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;ActiveSupport :: Inflector # pluralize를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8b90a1b189ff4eaf81ed82bbe6e50b03aaabd418" translate="yes" xml:space="preserve">
          <source>The worker pool is used to run connection callbacks and channel actions in isolation from the server's main thread. Action Cable allows the application to configure the number of simultaneously processed threads in the worker pool.</source>
          <target state="translated">작업자 풀은 서버의 메인 스레드와 별도로 연결 콜백 및 채널 작업을 실행하는 데 사용됩니다. 작업 케이블을 통해 응용 프로그램은 작업자 풀에서 동시에 처리 된 스레드 수를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a227e6c2220ef5acd6b50d07b084d078961f053" translate="yes" xml:space="preserve">
          <source>The worker pool is where we run connection callbacks and channel actions. We do as little as possible on the server's main thread. The worker pool is an executor service that's backed by a pool of threads working from a task queue. The thread pool size maxes out at 4 worker threads by default. Tune the size yourself with &lt;code&gt;config.action_cable.worker_pool_size&lt;/code&gt;.</source>
          <target state="translated">작업자 풀은 연결 콜백 및 채널 작업을 실행하는 곳입니다. 우리는 서버의 메인 스레드에서 가능한 한 적게 수행합니다. 작업자 풀은 작업 대기열에서 작업하는 스레드 풀로 지원되는 실행기 서비스입니다. 스레드 풀 크기는 기본적으로 4 개의 작업자 스레드에서 최대가됩니다. &lt;code&gt;config.action_cable.worker_pool_size&lt;/code&gt; 로 크기를 직접 조정하십시오 .</target>
        </trans-unit>
        <trans-unit id="4071a60de007bb344068973d53b28d0026839c89" translate="yes" xml:space="preserve">
          <source>The worms exploit a hole in Yahoo's HTML/JavaScript filter, which usually filters all targets and onload attributes from tags (because there can be JavaScript). The filter is applied only once, however, so the onload attribute with the worm code stays in place. This is a good example why restricted list filters are never complete and why it is hard to allow HTML/JavaScript in a web application.</source>
          <target state="translated">이 웜은 Yahoo의 HTML / JavaScript 필터의 취약점을 악용합니다.이 필터는 일반적으로 모든 대상을 필터링하고 태그에서 온로드 속성을 필터링합니다 (JavaScript가있을 수 있기 때문). 그러나 필터는 한 번만 적용되므로 웜 코드가있는 onload 속성이 그대로 유지됩니다. 제한된 목록 필터가 완료되지 않은 이유와 웹 응용 프로그램에서 HTML / JavaScript를 허용하기 어려운 이유는 좋은 예입니다.</target>
        </trans-unit>
        <trans-unit id="381cfbd9c2dd9fecda0a80c5cba63a031cfacf42" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.human_attribute_name(&quot;role.admin&quot;)&lt;/code&gt; will return &quot;Admin&quot;.</source>
          <target state="translated">그러면 &lt;code&gt;User.human_attribute_name(&quot;role.admin&quot;)&lt;/code&gt; 은 &quot;Admin&quot;을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="69726d22ecf072f07dd132a5079e2db0487c5a16" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.model_name.human(count: 2)&lt;/code&gt; will return &quot;Customers&quot;. With &lt;code&gt;count: 1&lt;/code&gt; or without params will return &quot;Customer&quot;.</source>
          <target state="translated">그런 다음 &lt;code&gt;User.model_name.human(count: 2)&lt;/code&gt; 은 &quot;Customers&quot;를 반환합니다. 함께 &lt;code&gt;count: 1&lt;/code&gt; 또는 PARAMS 않고는 &quot;고객&quot;을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ce1ac48f704be117e0c440eeff8da490a84e2fdd" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.model_name.human&lt;/code&gt; will return &quot;Customer&quot; and &lt;code&gt;User.human_attribute_name(&quot;login&quot;)&lt;/code&gt; will return &quot;Handle&quot;.</source>
          <target state="translated">그러면 &lt;code&gt;User.model_name.human&lt;/code&gt; 은 &quot;Customer&quot;를 반환하고 &lt;code&gt;User.human_attribute_name(&quot;login&quot;)&lt;/code&gt; 은 &quot;Handle&quot;을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a1dcc9b3170af9168677c16003802ad10b7a65fa" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;parse_options&lt;/code&gt; is defined like this:</source>
          <target state="translated">그런 다음 &lt;code&gt;parse_options&lt;/code&gt; 는 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="23a50ecef846d168f5924b2581ba4253e1d79ec9" translate="yes" xml:space="preserve">
          <source>Then Action View will look first in this directory when resolving views.</source>
          <target state="translated">그런 다음보기를 확인할 때 조치보기가이 디렉토리에서 먼저 보입니다.</target>
        </trans-unit>
        <trans-unit id="459d1a5ee37a5dfc347ac0b9db5a24592e3778ee" translate="yes" xml:space="preserve">
          <source>Then Active Record will look for messages in this order:</source>
          <target state="translated">그러면 Active Record는 다음 순서로 메시지를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="3d4d27ddd244a8a4ebabec05bc03c56676658e3a" translate="yes" xml:space="preserve">
          <source>Then any written signed cookies will be digested with SHA256. Old cookies that were written with SHA1 can still be read, and if accessed will be written with the new digest so they're upgraded and won't be invalid when you remove the rotation.</source>
          <target state="translated">그런 다음 서면으로 서명 된 쿠키는 SHA256으로 요약됩니다. SHA1으로 작성된 이전 쿠키는 계속 읽을 수 있으며 액세스하면 새 다이제스트로 작성되므로 업그레이드되어 회전을 제거 할 때 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="85e3645699a57b500a4fac14d2ba27a49c74a6f7" translate="yes" xml:space="preserve">
          <source>Then define a list of methods that you want callbacks attached to:</source>
          <target state="translated">그런 다음 콜백을 첨부 할 메소드 목록을 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="4f510685cd652852a1e3efa690ea6956f7bcdfdb" translate="yes" xml:space="preserve">
          <source>Then do the same for the &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; view:</source>
          <target state="translated">그런 다음 &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; 보기에 대해 동일한 작업을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="35dfdb159823060f46838dd038413c533e538e9c" translate="yes" xml:space="preserve">
          <source>Then ensure that this file is loaded at the top of your &lt;code&gt;config/application.rb&lt;/code&gt; (or in your &lt;code&gt;Gemfile&lt;/code&gt;) and it will automatically load models, controllers and helpers inside &lt;code&gt;app&lt;/code&gt;, load routes at &lt;code&gt;config/routes.rb&lt;/code&gt;, load locales at &lt;code&gt;config/locales/*&lt;/code&gt;, and load tasks at &lt;code&gt;lib/tasks/*&lt;/code&gt;.</source>
          <target state="translated">그런 다음이 파일을 사용자의 상단에로드되도록 &lt;code&gt;config/application.rb&lt;/code&gt; (또는에서 &lt;code&gt;Gemfile&lt;/code&gt; )과 자동 모델, 컨트롤러 및 내부 헬퍼로드 &lt;code&gt;app&lt;/code&gt; 에서, 부하 경로를 &lt;code&gt;config/routes.rb&lt;/code&gt; , 부하 로케일에서 &lt;code&gt;config/locales/*&lt;/code&gt; , &lt;code&gt;lib/tasks/*&lt;/code&gt; 에서 작업을로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce0a816131af5b4f10ba7dd68f10732047901d7d" translate="yes" xml:space="preserve">
          <source>Then gradually rotate the old values out by adding them as fallbacks. Any message generated with the old values will then work until the rotation is removed.</source>
          <target state="translated">그런 다음 이전 값을 대체로 추가하여 점진적으로 회전시킵니다. 이전 값으로 생성 된 모든 메시지는 회전이 제거 될 때까지 작동합니다.</target>
        </trans-unit>
        <trans-unit id="c25ba8a4f5f2e80428305d964bd1bf9df12698c9" translate="yes" xml:space="preserve">
          <source>Then in the view any form using &lt;code&gt;form_for&lt;/code&gt; will be an instance of the specified form builder:</source>
          <target state="translated">그런 다음 뷰에서 &lt;code&gt;form_for&lt;/code&gt; 를 사용하는 모든 양식 은 지정된 양식 빌더의 인스턴스가됩니다.</target>
        </trans-unit>
        <trans-unit id="ef7bc07bcc95fd9eba906b05a01efc5367db71e6" translate="yes" xml:space="preserve">
          <source>Then in the view, you can call it like any class method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a2120982b7267dfa978e50b64a59538c9064c3" translate="yes" xml:space="preserve">
          <source>Then in your class, you can use the &lt;code&gt;before_create&lt;/code&gt;, &lt;code&gt;after_create&lt;/code&gt; and &lt;code&gt;around_create&lt;/code&gt; methods, just as you would in an Active Record model.</source>
          <target state="translated">그런 다음 수업 에서 Active Record 모델에서 와 같이 &lt;code&gt;before_create&lt;/code&gt; , &lt;code&gt;after_create&lt;/code&gt; 및 &lt;code&gt;around_create&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aebe8891b52bd362b7f19f07d1a47dc194ca8c95" translate="yes" xml:space="preserve">
          <source>Then in your view, you can just reference &lt;code&gt;attachments&lt;/code&gt; as a hash and specify which attachment you want to show, calling &lt;code&gt;url&lt;/code&gt; on it and then passing the result into the &lt;code&gt;image_tag&lt;/code&gt; method:</source>
          <target state="translated">그런 다음보기에서 &lt;code&gt;attachments&lt;/code&gt; 을 해시로 참조 하고 표시 할 첨부 파일을 지정하고 &lt;code&gt;url&lt;/code&gt; 을 호출 한 다음 결과를 &lt;code&gt;image_tag&lt;/code&gt; 메소드에 전달하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="237fe237773a0ec739fb4cc8e5c87bcf8fa12ec0" translate="yes" xml:space="preserve">
          <source>Then make sure that all your job classes inherit from it.</source>
          <target state="translated">그런 다음 모든 작업 클래스가 클래스에서 상속되는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4d121a9048cc21ad12c6bc9dfcf50d1c0c7ed200" translate="yes" xml:space="preserve">
          <source>Then make sure that all your models inherit from it.</source>
          <target state="translated">그런 다음 모든 모델이 모델에서 상속되는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="5c028a05387b465e3194a93caa32b7f4e2825e9e" translate="yes" xml:space="preserve">
          <source>Then models can swap connections manually via the &lt;code&gt;connected_to&lt;/code&gt; API. If using sharding both a &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;shard&lt;/code&gt; must be passed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c05622c9e2375d881f99cefdba0de66f0a8aab" translate="yes" xml:space="preserve">
          <source>Then new join models are automatically created for the newly associated objects. If some that existed previously are now missing, then their join rows are automatically deleted.</source>
          <target state="translated">그런 다음 새로 연결된 객체에 대해 새 결합 모델이 자동으로 생성됩니다. 이전에 존재했던 일부가 누락 된 경우 해당 조인 행이 자동으로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="8bb78d3088ec4a03fb4ba35f504b631634a22413" translate="yes" xml:space="preserve">
          <source>Then refer to this field in the form for the model:</source>
          <target state="translated">그런 다음 모델 양식에서이 필드를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="01700a39e23b7ab78877badc25228c5133bf399d" translate="yes" xml:space="preserve">
          <source>Then run &lt;code&gt;bundle&lt;/code&gt; to install the gem.</source>
          <target state="translated">그런 다음 &lt;code&gt;bundle&lt;/code&gt; 을 실행 하여 gem을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="3c797d8f24c8628794ae46f0798a2a8a395d237f" translate="yes" xml:space="preserve">
          <source>Then set up a mailbox:</source>
          <target state="translated">그런 다음 사서함을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="b23cf8584845218e3a92147b3fe0ba5780c2bf36" translate="yes" xml:space="preserve">
          <source>Then that same purpose must be passed when verifying to get the data back out:</source>
          <target state="translated">그런 다음 데이터를 다시 가져 오기 위해 확인할 때 동일한 목적을 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="32681196fa4394258a9f0ddbaa6841d13623c56b" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;click_on &quot;New Article&quot;&lt;/code&gt; will find the &quot;New Article&quot; button on the index page. This will redirect the browser to &lt;code&gt;/articles/new&lt;/code&gt;.</source>
          <target state="translated">그런 다음 &lt;code&gt;click_on &quot;New Article&quot;&lt;/code&gt; 은 색인 페이지에서 &quot;New Article&quot;버튼을 찾습니다. 브라우저를 &lt;code&gt;/articles/new&lt;/code&gt; 로 리디렉션합니다 .</target>
        </trans-unit>
        <trans-unit id="c3adef20432b6b66fe2ce80984aa12cb32aa026a" translate="yes" xml:space="preserve">
          <source>Then the fun begins!</source>
          <target state="translated">그러면 재미가 시작됩니다!</target>
        </trans-unit>
        <trans-unit id="62bc07d8aa975b0496a50ba872658d371c63aa06" translate="yes" xml:space="preserve">
          <source>Then the messages can be verified and returned up to the expire time. Thereafter, the &lt;code&gt;verified&lt;/code&gt; method returns &lt;code&gt;nil&lt;/code&gt; while &lt;code&gt;verify&lt;/code&gt; raises &lt;code&gt;ActiveSupport::MessageVerifier::InvalidSignature&lt;/code&gt;.</source>
          <target state="translated">그런 다음 메시지를 확인하고 만료 시간까지 되돌릴 수 있습니다. 이 후, &lt;code&gt;verified&lt;/code&gt; 방법의 반환 &lt;code&gt;nil&lt;/code&gt; 을 하면서 &lt;code&gt;verify&lt;/code&gt; 인상 &lt;code&gt;ActiveSupport::MessageVerifier::InvalidSignature&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13f7c19977b2cebec1e9a82e2e3042c127ffb695" translate="yes" xml:space="preserve">
          <source>Then the messages can be verified and returned up to the expire time. Thereafter, verifying returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">그런 다음 메시지를 확인하고 만료 시간까지 되돌릴 수 있습니다. 그런 다음 확인하면 &lt;code&gt;nil&lt;/code&gt; 이 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="37db38f09873e69b0d0d19b6cd96ccbb3c4b339b" translate="yes" xml:space="preserve">
          <source>Then the preview will be available in http://localhost:3000/rails/mailers/user_mailer/welcome_email.</source>
          <target state="translated">그러면 http : // localhost : 3000 / rails / mailers / user_mailer / welcome_email에서 미리보기를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="369ed4a7ad9c26f1140c7972a5560f133f03519c" translate="yes" xml:space="preserve">
          <source>Then the returned token is &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, and the options are &lt;code&gt;{nonce: &quot;def&quot;}&lt;/code&gt;</source>
          <target state="translated">리턴 된 토큰은 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 이며 옵션은 &lt;code&gt;{nonce: &quot;def&quot;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="366a0275143580828d7dd35a9ff6892eaaf5f9a4" translate="yes" xml:space="preserve">
          <source>Then the test will fill in the title and body of the article with the specified text. Once the fields are filled in, &quot;Create Article&quot; is clicked on which will send a POST request to create the new article in the database.</source>
          <target state="translated">그런 다음 테스트는 기사의 제목과 본문을 지정된 텍스트로 채 웁니다. 필드가 채워지면 &quot;기사 만들기&quot;를 클릭하면 데이터베이스에 새 기사를 만들기 위해 POST 요청이 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="10a63abca550fb5d05522c45d27747f0e9db193b" translate="yes" xml:space="preserve">
          <source>Then the view, to display our message (in &lt;code&gt;app/views/greetings/hello.html.erb&lt;/code&gt;):</source>
          <target state="translated">그런 다음보기에서 메시지를 표시하려면 ( &lt;code&gt;app/views/greetings/hello.html.erb&lt;/code&gt; 에 ) :</target>
        </trans-unit>
        <trans-unit id="ddfd5408dd5dd26d25099c7e83d85cdbe7fac7a2" translate="yes" xml:space="preserve">
          <source>Then we need to update &lt;code&gt;ApplicationRecord&lt;/code&gt; to be aware of our new replica.</source>
          <target state="translated">그런 다음 새 복제본을 인식하도록 &lt;code&gt;ApplicationRecord&lt;/code&gt; 를 업데이트해야합니다 .</target>
        </trans-unit>
        <trans-unit id="098660123aac14d41b15d67b877d80ee14982a13" translate="yes" xml:space="preserve">
          <source>Then you can add an automatic nonce value by passing &lt;code&gt;nonce: true&lt;/code&gt; as part of &lt;code&gt;html_options&lt;/code&gt;. Example:</source>
          <target state="translated">그런 다음 &lt;code&gt;nonce: true&lt;/code&gt; 를 &lt;code&gt;html_options&lt;/code&gt; 의 일부로 전달하여 자동 nonce 값을 추가 할 수 있습니다 . 예:</target>
        </trans-unit>
        <trans-unit id="0d37c70958344a9839a6342d4c9fc86d22db17b4" translate="yes" xml:space="preserve">
          <source>Then you can change &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; to look like the following:</source>
          <target state="translated">그런 다음 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; 를 다음과 같이 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f03061ab10bf02c25498814f574e5e40f393c87" translate="yes" xml:space="preserve">
          <source>Then you could create special views like &lt;code&gt;app/views/articles/show.expert.html.erb&lt;/code&gt; that would only be displayed to expert users.</source>
          <target state="translated">그런 다음 전문 사용자에게만 표시되는 &lt;code&gt;app/views/articles/show.expert.html.erb&lt;/code&gt; 와 같은 특수 뷰를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="496beabd3e4e458cf277bd0998b3a81e387ea7cd" translate="yes" xml:space="preserve">
          <source>Then you could do:</source>
          <target state="translated">그럼 당신은 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9063c5f74d1b74e7ea62cc04b8a5984d7224827c" translate="yes" xml:space="preserve">
          <source>Then you make the &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; look like the following:</source>
          <target state="translated">그런 다음 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; 를 다음과 같이 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="0ca1e0676acb4662d0e6ee4f9143d236d7763d5d" translate="yes" xml:space="preserve">
          <source>Then you start the server using a binstub in &lt;code&gt;bin/cable&lt;/code&gt; ala:</source>
          <target state="translated">그런 다음 &lt;code&gt;bin/cable&lt;/code&gt; ala 의 binstub을 사용하여 서버를 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="87783a1bba48c17b1a2f3223b471f53bb6f44608" translate="yes" xml:space="preserve">
          <source>Then you would create your own channel classes. For example, you could have a &lt;code&gt;ChatChannel&lt;/code&gt; and an &lt;code&gt;AppearanceChannel&lt;/code&gt;:</source>
          <target state="translated">그런 다음 자신의 채널 클래스를 만듭니다. 예를 들어, &lt;code&gt;ChatChannel&lt;/code&gt; 과 &lt;code&gt;AppearanceChannel&lt;/code&gt; 이있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5b8b29d981a70edce615391b418603f900f0fc23" translate="yes" xml:space="preserve">
          <source>Then your library can be eager loaded by simply calling:</source>
          <target state="translated">그러면 다음을 호출하여 라이브러리를 열망 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c669580c7cd4aecaf4436886d6487f9c2355d6f" translate="yes" xml:space="preserve">
          <source>Then, elsewhere in your Rails application, you can broadcast to such a room by calling &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionCable/Server/Broadcasting.html#method-i-broadcast&quot;&gt;&lt;code&gt;broadcast&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48472de2f53d5ecda6546f6dd9503f542948c68" translate="yes" xml:space="preserve">
          <source>Then, if you want webrat to be invoked, just supply:</source>
          <target state="translated">그런 다음 webrat를 호출하려면 다음을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="70a620085ffad4cda58d1cc705b7621b4c3d6b03" translate="yes" xml:space="preserve">
          <source>Then, in another template or layout, this code would render both links in order:</source>
          <target state="translated">그런 다음 다른 템플릿이나 레이아웃에서이 코드는 두 링크를 순서대로 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="1ee33242fa8dc35c52b38b93dd261d062e831523" translate="yes" xml:space="preserve">
          <source>Then, in another template or layout, this code would render only the last link:</source>
          <target state="translated">그런 다음 다른 템플릿이나 레이아웃에서이 코드는 마지막 링크 만 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="c02759babbfbed3b2ce9248b83250e3d9c6e304d" translate="yes" xml:space="preserve">
          <source>Then, in another view, you could to do something like this:</source>
          <target state="translated">그런 다음 다른 관점에서 다음과 같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2428dd5467214a1330f0142642a33f223e8adb27" translate="yes" xml:space="preserve">
          <source>Then, in any view rendered by &lt;code&gt;EventsController&lt;/code&gt;, the &lt;code&gt;format_time&lt;/code&gt; method can be called:</source>
          <target state="translated">그런 다음 &lt;code&gt;EventsController&lt;/code&gt; 가 렌더링 한 모든 뷰 에서 &lt;code&gt;format_time&lt;/code&gt; 메소드를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c65e9c4deed32989d4d5a92327af12701fec9bd3" translate="yes" xml:space="preserve">
          <source>Then, in our &lt;code&gt;index&lt;/code&gt; action template (&lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;) we would use the &lt;code&gt;archived?&lt;/code&gt; method to avoid displaying any article that is archived:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab1405302d62c1ecddf63d2dc2d85296feb34ca" translate="yes" xml:space="preserve">
          <source>Then, in your application's configuration, you can specify the service to use like this:</source>
          <target state="translated">그런 다음 응용 프로그램 구성에서 다음과 같이 사용할 서비스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57185357f15f4a8fb2cd8be83b26417c031c473e" translate="yes" xml:space="preserve">
          <source>Then, one asserts whether the current state is as expected. &amp;ldquo;State&amp;rdquo; can be anything: the controller's HTTP response, the database contents, etc.</source>
          <target state="translated">그런 다음 현재 상태가 예상 한대로 주장합니다. &amp;ldquo;상태&amp;rdquo;는 컨트롤러의 HTTP 응답, 데이터베이스 내용 등이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="482ca65ca763b7b0baddca14580910c2d6413532" translate="yes" xml:space="preserve">
          <source>Then, one asserts whether the current state is as expected. &amp;ldquo;State&amp;rdquo; can be anything: transmitted messages, subscribed streams, etc.</source>
          <target state="translated">그런 다음 현재 상태가 예상 한대로 주장합니다. &quot;상태&quot;는 전송 된 메시지, 구독 된 스트림 등 무엇이든 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="031870965fb348d4c11e251e9555a1156c075b8c" translate="yes" xml:space="preserve">
          <source>There also may be a case where you have a database that you don't always want to connect to on application boot but may need for a slow query or analytics. After defining that database in the &lt;code&gt;database.yml&lt;/code&gt; you can connect by passing a database argument to &lt;code&gt;connected_to&lt;/code&gt;</source>
          <target state="translated">응용 프로그램 부팅시 항상 연결하고 싶지는 않지만 느린 쿼리 또는 분석이 필요한 데이터베이스가있는 경우도 있습니다. database.yml에서 해당 &lt;code&gt;database.yml&lt;/code&gt; 를 정의한 후 데이터베이스 인수를 &lt;code&gt;connected_to&lt;/code&gt; 에 전달하여 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb2b87b49ad713bc9166e86cd1da2325e0969a0" translate="yes" xml:space="preserve">
          <source>There are &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt; methods in Ruby, but only &lt;code&gt;public&lt;/code&gt; methods can be actions for controllers. For more details check out &lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/&quot;&gt;Programming Ruby&lt;/a&gt;.</source>
          <target state="translated">Ruby 에는 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;private&lt;/code&gt; 및 &lt;code&gt;protected&lt;/code&gt; 메소드가 있지만 &lt;code&gt;public&lt;/code&gt; 메소드 만 제어기에 대한 조치 일 수 있습니다. 자세한 내용은 &lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/&quot;&gt;Programming Ruby를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="19b00caa5f3ff7b3b669683c7dea0b0d4f09835e" translate="yes" xml:space="preserve">
          <source>There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. For example, if a C extension in the interpreter calls &lt;code&gt;malloc()&lt;/code&gt; but doesn't properly call &lt;code&gt;free()&lt;/code&gt;, this memory won't be available until the app terminates.</source>
          <target state="translated">많은 메모리 관리 및 스레딩 버그를 자동으로 감지하고 프로그램을 자세하게 프로파일 링 할 수있는 Valgrind 도구가 있습니다. 예를 들어 인터프리터의 C 확장이 &lt;code&gt;malloc()&lt;/code&gt; 호출 하지만 &lt;code&gt;free()&lt;/code&gt; 올바르게 호출하지 않으면 앱이 종료 될 때까지이 메모리를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9b00b3df83e32e888bc604425fec394ee693ccd7" translate="yes" xml:space="preserve">
          <source>There are a couple of new configuration settings that you should add to your development environment:</source>
          <target state="translated">개발 환경에 추가해야하는 몇 가지 새로운 구성 설정이 있습니다.</target>
        </trans-unit>
        <trans-unit id="164be5c17020dc109dc9be858a8e3b603db5fe38" translate="yes" xml:space="preserve">
          <source>There are a couple of things to notice in the above example. We need to make sure to close the response stream. Forgetting to close the stream will leave the socket open forever. We also have to set the content type to &lt;code&gt;text/event-stream&lt;/code&gt; before we write to the response stream. This is because headers cannot be written after the response has been committed (when &lt;code&gt;response.committed?&lt;/code&gt; returns a truthy value), which occurs when you &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;commit&lt;/code&gt; the response stream.</source>
          <target state="translated">위의 예에는 몇 가지주의 할 사항이 있습니다. 응답 스트림을 닫아야합니다. 스트림을 닫는 것을 잊어 버리면 소켓이 영원히 열려있게됩니다. 응답 스트림에 쓰기 전에 컨텐츠 유형을 &lt;code&gt;text/event-stream&lt;/code&gt; 으로 설정 해야합니다. 응답이 커밋 된 후 헤더 (때 기록 될 수 없기 때문입니다 &lt;code&gt;response.committed?&lt;/code&gt; 당신이 때 발생하는하는 truthy 값을 반환) &lt;code&gt;write&lt;/code&gt; 또는 &lt;code&gt;commit&lt;/code&gt; 응답 스트림을.</target>
        </trans-unit>
        <trans-unit id="0c768baf5fd448c75d1de2436abdaa5e34da7465" translate="yes" xml:space="preserve">
          <source>There are a few caveats with this module. You &lt;strong&gt;cannot&lt;/strong&gt; write headers after the response has been committed (Response#committed? will return truthy). Calling &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;close&lt;/code&gt; on the response stream will cause the response object to be committed. Make sure all headers are set before calling write or close on your stream.</source>
          <target state="translated">이 모듈에는 몇 가지주의 사항이 있습니다. 당신은 &lt;strong&gt;할 수&lt;/strong&gt; 응답 (응답 번호가 truthy를 반환합니다? 최선을 다하고 있습니다) 쓰기 헤더를 저지른 후. 응답 스트림에서 &lt;code&gt;write&lt;/code&gt; 또는 &lt;code&gt;close&lt;/code&gt; 를 호출 하면 응답 오브젝트가 커미트됩니다. 스트림에서 쓰기 또는 닫기를 호출하기 전에 모든 헤더가 설정되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4bad24b22c7cae4c6a61de5d3108af1db11f82d6" translate="yes" xml:space="preserve">
          <source>There are a few commands that are absolutely critical to your everyday usage of Rails. In the order of how much you'll probably use them are:</source>
          <target state="translated">Rails의 일상적인 사용에 절대적으로 중요한 몇 가지 명령이 있습니다. 그것들을 얼마나 많이 사용할지 순서대로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e56663a6abdb097299bc4197150b89e3d7d69945" translate="yes" xml:space="preserve">
          <source>There are a few configuration options available in Active Support:</source>
          <target state="translated">활성 지원에는 몇 가지 구성 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e637e4147c84d8dceeb2b213377ec66714ac9891" translate="yes" xml:space="preserve">
          <source>There are a few major changes related to JSON handling in Rails 4.1.</source>
          <target state="translated">Rails 4.1의 JSON 처리와 관련하여 몇 가지 주요 변경 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="aec8cfbde75f8f1d463fce1d466fe8064fa5e4a5" translate="yes" xml:space="preserve">
          <source>There are a few more steps to be carried out before our application works with the addition of &lt;code&gt;status&lt;/code&gt; column. First, let's run the following migrations to add &lt;code&gt;status&lt;/code&gt; to &lt;code&gt;Articles&lt;/code&gt; and &lt;code&gt;Comments&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c564b1ac7e5320df2899d4761623e9c54d1bfc41" translate="yes" xml:space="preserve">
          <source>There are a few special &lt;code&gt;html_options&lt;/code&gt;:</source>
          <target state="translated">몇 가지 특별한 &lt;code&gt;html_options&lt;/code&gt; 가 있습니다 :</target>
        </trans-unit>
        <trans-unit id="09097833af7a7785ff0289cc3e4cd9f30ec67ede" translate="yes" xml:space="preserve">
          <source>There are a few steps to get up and running with I18n support for a Rails application.</source>
          <target state="translated">Rails 애플리케이션에 대한 I18n 지원으로 시작하고 실행하는 몇 가지 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d785783338230f3b87db04ee80e1a01039e7eb28" translate="yes" xml:space="preserve">
          <source>There are a few things to note here:</source>
          <target state="translated">여기에 몇 가지주의 할 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7ec542f6e00c4c48c1cc756a5abf11aceb10d86" translate="yes" xml:space="preserve">
          <source>There are a number of authentication plug-ins for Rails available. Good ones, such as the popular &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;devise&lt;/a&gt; and &lt;a href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt;, store only encrypted passwords, not plain-text passwords. In Rails 3.1 you can use the built-in &lt;code&gt;has_secure_password&lt;/code&gt; method which has similar features.</source>
          <target state="translated">사용 가능한 Rails에 대한 여러 인증 플러그인이 있습니다. 인기있는 &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;devise&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt; 과 같은 좋은 암호는 일반 텍스트 암호가 아닌 암호화 된 암호 만 저장합니다. Rails 3.1에서는 비슷한 기능을 가진 내장 &lt;code&gt;has_secure_password&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9e915227e133b452b09ab70d569af6da2645774d" translate="yes" xml:space="preserve">
          <source>There are a number of settings available on &lt;code&gt;config.action_mailer&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config.action_mailer&lt;/code&gt; 에는 여러 가지 설정이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd7c127858d5bd0036433e51e9a1318a30cbc05b" translate="yes" xml:space="preserve">
          <source>There are also attribute readers and writers for the following attributes:</source>
          <target state="translated">다음과 같은 속성에 대한 속성 판독기 및 기록기도 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc21147cd3a67cc0d6503d0c6c1d9ae6e97da06e" translate="yes" xml:space="preserve">
          <source>There are also some Action Mailer-specific helper methods available in &lt;code&gt;ActionMailer::MailHelper&lt;/code&gt;. For example, these allow accessing the mailer instance from your view with &lt;code&gt;mailer&lt;/code&gt;, and accessing the message as &lt;code&gt;message&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab98ce79b9f7ae2b050438c168ded2c086027fb" translate="yes" xml:space="preserve">
          <source>There are also some optional column names that will add additional features to Active Record instances:</source>
          <target state="translated">Active Record 인스턴스에 추가 기능을 추가 할 수있는 선택적 컬럼 이름도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a3b4a5facffc66d580f52bd37aca25d75f46c3f" translate="yes" xml:space="preserve">
          <source>There are also three special methods available: &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, which are the current item being rendered, its text and value methods, respectively. You can use them like this:</source>
          <target state="translated">사용 가능한 특수 메소드는 &lt;code&gt;object&lt;/code&gt; , &lt;code&gt;text&lt;/code&gt; 및 &lt;code&gt;value&lt;/code&gt; 이며 현재 렌더링중인 현재 항목 인 text 및 value 메소드입니다. 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9328ff730efb351cb7c68f93646e3e43677d947" translate="yes" xml:space="preserve">
          <source>There are cases where you need to define a method with &lt;code&gt;define_method&lt;/code&gt;, but don't know whether a method with that name already exists. If it does, a warning is issued if they are enabled. No big deal, but not clean either.</source>
          <target state="translated">&lt;code&gt;define_method&lt;/code&gt; 를 사용하여 메소드를 정의해야하는 경우가 있지만 해당 이름의 메소드가 이미 존재하는지 여부를 모릅니다. 그럴 경우, 사용 가능한 경우 경고가 발행됩니다. 큰 문제는 없지만 깨끗하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="029bc6ef9eb6398dbbb511125f106e1c755e2fa6" translate="yes" xml:space="preserve">
          <source>There are certain queries that can't run inside a transaction. If your adapter supports DDL transactions you can use &lt;code&gt;disable_ddl_transaction!&lt;/code&gt; to disable them for a single migration.</source>
          <target state="translated">트랜잭션 내에서 실행할 수없는 특정 쿼리가 있습니다. 어댑터가 DDL 트랜잭션을 지원하는 경우 &lt;code&gt;disable_ddl_transaction!&lt;/code&gt; 단일 마이그레이션에 대해 비활성화합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
