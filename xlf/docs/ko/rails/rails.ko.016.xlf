<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="ff0fbc44503d8cb2db7d66abca56d62be677cace" translate="yes" xml:space="preserve">
          <source>InboundEmail::Routable#route_later</source>
          <target state="translated">InboundEmail::Routable#route_later</target>
        </trans-unit>
        <trans-unit id="acbf3a393e68b6f6f34e91d2c28dcbb1f27f41ad" translate="yes" xml:space="preserve">
          <source>Incineration of InboundEmails</source>
          <target state="translated">인바운드 이메일 소각</target>
        </trans-unit>
        <trans-unit id="46f00fe566c2a85a7ae293976c1f5cc228d97a9f" translate="yes" xml:space="preserve">
          <source>IncinerationJob</source>
          <target state="translated">IncinerationJob</target>
        </trans-unit>
        <trans-unit id="9a3b927462c4fc3601133e7ebb25fa8381442e2e" translate="yes" xml:space="preserve">
          <source>IncinerationJob#perform</source>
          <target state="translated">IncinerationJob#perform</target>
        </trans-unit>
        <trans-unit id="cac65a7ffa3df433e8908fd590e410aeec250ed8" translate="yes" xml:space="preserve">
          <source>IncinerationJob::schedule</source>
          <target state="translated">IncinerationJob::schedule</target>
        </trans-unit>
        <trans-unit id="5c9882c571c76e2d7257004676310a0cdec5e265" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;activestorage.js&lt;/code&gt; in your application's JavaScript bundle.</source>
          <target state="translated">애플리케이션의 JavaScript 번들에 &lt;code&gt;activestorage.js&lt;/code&gt; 를 포함하십시오 .</target>
        </trans-unit>
        <trans-unit id="1bec07c62228d9d427b17ec331ffe481e3050aea" translate="yes" xml:space="preserve">
          <source>Include a field with the current UTC time-stamp in it and check it on the server. If it is too far in the past, or if it is in the future, the form is invalid.</source>
          <target state="translated">현재 UTC 시간 소인이있는 필드를 포함시키고 서버에서 확인하십시오. 과거에 너무 멀거나 미래에있을 경우 양식이 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f121e28368bea6b8e2ce8d128829d6efaa5b3b4a" translate="yes" xml:space="preserve">
          <source>Include in a cookie jar to allow chaining, e.g. cookies.permanent.signed.</source>
          <target state="translated">쿠키를 포함하여 체인을 허용합니다 (예 : cookies.permanent.signed).</target>
        </trans-unit>
        <trans-unit id="c100b7d867e6c16b5bd5b980d88e6a2a50d8f041" translate="yes" xml:space="preserve">
          <source>Include more than one honeypot field of all types, including submission buttons</source>
          <target state="translated">제출 버튼을 포함하여 모든 유형의 허니팟 필드를 두 개 이상 포함</target>
        </trans-unit>
        <trans-unit id="4c5f87743501282fa63fbaffa15c1a3acc9cc8cd" translate="yes" xml:space="preserve">
          <source>Included modules:</source>
          <target state="translated">포함 된 모듈 :</target>
        </trans-unit>
        <trans-unit id="bdf9b5829b7161238ada537108b7fe4a6e34fa4e" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;url_for&lt;/code&gt; into the host class (e.g. an abstract controller or mailer). The class has to provide a &lt;code&gt;RouteSet&lt;/code&gt; by implementing the &lt;code&gt;_routes&lt;/code&gt; methods. Otherwise, an exception will be raised.</source>
          <target state="translated">호스트 클래스 (예 : 추상 컨트롤러 또는 메일러)에 &lt;code&gt;url_for&lt;/code&gt; 를 포함 합니다. 클래스는 제공해야 &lt;code&gt;RouteSet&lt;/code&gt; 을 이행함으로써 &lt;code&gt;_routes&lt;/code&gt; 의 방법을. 그렇지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2b4374eea981f26c15f5994eec0f3f1ab7ef8047" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;url_for&lt;/code&gt; into the host class. The class has to provide a &lt;code&gt;RouteSet&lt;/code&gt; by implementing the &lt;code&gt;_routes&lt;/code&gt; method. Otherwise, an exception will be raised.</source>
          <target state="translated">호스트 클래스에 &lt;code&gt;url_for&lt;/code&gt; 를 포함합니다 . 클래스는 제공해야 &lt;code&gt;RouteSet&lt;/code&gt; 을 이행함으로써 &lt;code&gt;_routes&lt;/code&gt; 의 방법을. 그렇지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f5579a2df75038fb652d0231bd1004d082f10429" translate="yes" xml:space="preserve">
          <source>Includes methods for executing and performing jobs instantly.</source>
          <target state="translated">작업을 즉시 실행하고 수행하는 방법이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="631b012f0c3aa49dec56ba3a62ff5bff3b8b3f91" translate="yes" xml:space="preserve">
          <source>Includes the &lt;code&gt;perform_later&lt;/code&gt; method for job initialization.</source>
          <target state="translated">작업 초기화를위한 &lt;code&gt;perform_later&lt;/code&gt; 메소드를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="53c7595c01b9dbfe8612fe4bc1db96f60de2a369" translate="yes" xml:space="preserve">
          <source>Includes the ability to override the default queue name and prefix.</source>
          <target state="translated">기본 대기열 이름과 접두사를 재정의하는 기능이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7990a0676a74bda5cc28e40baf19fd593e762c7" translate="yes" xml:space="preserve">
          <source>Includes the ability to override the default queue priority.</source>
          <target state="translated">기본 대기열 우선 순위를 무시하는 기능이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="62c9858129e9d1c16d3eef60145006748e5bba1e" translate="yes" xml:space="preserve">
          <source>Includes the given modules in the template class.</source>
          <target state="translated">템플릿 클래스에 주어진 모듈을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="cbb61314f8aef07993e347f911ec747581366e10" translate="yes" xml:space="preserve">
          <source>Includes the required interface for an object to interact with Action Pack and Action View, using different Active &lt;a href=&quot;model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; modules. It includes model name introspections, conversions, translations and validations. Besides that, it allows you to initialize the object with a hash of attributes, pretty much like Active Record does.</source>
          <target state="translated">개체가 다른 Active &lt;a href=&quot;model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt; 모듈을 사용하여 Action Pack 및 Action View와 상호 작용하는 데 필요한 인터페이스를 포함합니다 . 여기에는 모델 이름 검사, 변환, 번역 및 유효성 검사가 포함됩니다. 그 외에도 Active Record가하는 것처럼 속성 해시로 개체를 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e15c12fa809cf4ddf2cfdca94bdae62aa1fa326a" translate="yes" xml:space="preserve">
          <source>Includes the required interface for an object to interact with Action Pack and Action View, using different Active &lt;a href=&quot;model&quot;&gt;Model&lt;/a&gt; modules. It includes model name introspections, conversions, translations and validations. Besides that, it allows you to initialize the object with a hash of attributes, pretty much like Active Record does.</source>
          <target state="translated">다른 Active &lt;a href=&quot;model&quot;&gt;Model&lt;/a&gt; 모듈을 사용하여 객체가 Action Pack 및 Action View와 상호 작용하는 데 필요한 인터페이스를 포함합니다 . 여기에는 모델 이름 내부 검사, 변환, 변환 및 유효성 검사가 포함됩니다. 게다가 Active Record와 거의 비슷한 속성의 해시로 객체를 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7fea2d3a0b9e01a0a5f139f1591c47d3c91bbc9" translate="yes" xml:space="preserve">
          <source>Includes the setter method for changing the active queue adapter.</source>
          <target state="translated">활성 큐 어댑터를 변경하기위한 setter 메소드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="aa5f93716a712ea4619d480ed3cde7ae07449569" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;ActionController::Live&lt;/code&gt; inside of your controller class will provide all actions inside of the controller the ability to stream data. You can mix in the module like so:</source>
          <target state="translated">컨트롤러 클래스 내부에 &lt;code&gt;ActionController::Live&lt;/code&gt; 포함 하면 컨트롤러 내부의 모든 작업에 데이터 스트리밍 기능이 제공됩니다. 다음과 같이 모듈을 혼합 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="bab20420de5d9ccbf10b3dcff8cc1b95ab75628b" translate="yes" xml:space="preserve">
          <source>Including a nonce (a random value) in the session solves replay attacks. A nonce is valid only once, and the server has to keep track of all the valid nonces. It gets even more complicated if you have several application servers. Storing nonces in a database table would defeat the entire purpose of CookieStore (avoiding accessing the database).</source>
          <target state="translated">세션에 nonce (임의의 값)를 포함하면 재생 공격이 해결됩니다. nonce는 한 번만 유효하며 서버는 모든 유효한 nonces를 추적해야합니다. 여러 응용 프로그램 서버가 있으면 훨씬 더 복잡해집니다. 데이터베이스 테이블에 nonces를 저장하면 CookieStore의 전체 목적을 상실하게됩니다 (데이터베이스 액세스를 피함).</target>
        </trans-unit>
        <trans-unit id="3ba3a191a2f605b7f6e1de97049978194d3e3d3a" translate="yes" xml:space="preserve">
          <source>Increment a cached value. This method uses the Redis incr atomic operator and can only be used on values written with the :raw option. Calling it on a value not stored with :raw will initialize that value to zero.</source>
          <target state="translated">캐시 된 값을 증가시킵니다. 이 방법은 Redis incr 원자 연산자를 사용하며 : raw 옵션으로 작성된 값에만 사용할 수 있습니다. : raw와 함께 저장되지 않은 값에서 호출하면 해당 값이 0으로 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="84d6064c26c32bbd7bab16ef8fd8429566031c22" translate="yes" xml:space="preserve">
          <source>Increment a cached value. This method uses the memcached incr atomic operator and can only be used on values written with the :raw option. Calling it on a value not stored with :raw will initialize that value to zero.</source>
          <target state="translated">캐시 된 값을 증가시킵니다. 이 방법은 memcached incr 원자 연산자를 사용하며 : raw 옵션으로 작성된 값에만 사용할 수 있습니다. : raw와 함께 저장되지 않은 값에서 호출하면 해당 값이 0으로 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="dd0c837987bda03b85ceb94f7c3cfea331fe8115" translate="yes" xml:space="preserve">
          <source>Increment a numeric field by one, via a direct SQL update.</source>
          <target state="translated">직접 SQL 업데이트를 통해 숫자 필드를 하나씩 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="975a549b7ff243eb9938d718f3659245c93a9383" translate="yes" xml:space="preserve">
          <source>Increment an integer value in the cache.</source>
          <target state="translated">캐시에서 정수 값을 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="78f8148e4691770bb4ee98b5331ee87d3d67f053" translate="yes" xml:space="preserve">
          <source>Increments an already existing integer value that is stored in the cache. If the key is not found nothing is done.</source>
          <target state="translated">캐시에 저장된 기존 정수 값을 증가시킵니다. 키를 찾을 수 없으면 아무 것도 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5c60a79bc55fbbd08f59d91ffb860f8c89bb4d61" translate="yes" xml:space="preserve">
          <source>Increments an integer value in the cache.</source>
          <target state="translated">캐시에서 정수 값을 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="ac8f586235cd9c9a54e04e1582486b97984ef9e5" translate="yes" xml:space="preserve">
          <source>Indeed, those features are provided by Ruby on Rails, where we just write</source>
          <target state="translated">실제로 이러한 기능은 Ruby on Rails에서 제공합니다.</target>
        </trans-unit>
        <trans-unit id="15cfadc26717bad880a9fde19a51e2f1ba2fa5ba" translate="yes" xml:space="preserve">
          <source>Indent the &lt;code&gt;Gemfile&lt;/code&gt; to the depth of @indentation</source>
          <target state="translated">&lt;code&gt;Gemfile&lt;/code&gt; 의 깊이까지 Gemfile 을 들여 쓰기</target>
        </trans-unit>
        <trans-unit id="55a69bd5ad72c95be80535a77a034016a752d59f" translate="yes" xml:space="preserve">
          <source>Indents the lines in the receiver:</source>
          <target state="translated">수신자의 행을 들여 쓰기합니다.</target>
        </trans-unit>
        <trans-unit id="383b324a3291b51f1e54ef9c0d763010fbc5e171" translate="yes" xml:space="preserve">
          <source>IndexError</source>
          <target state="translated">IndexError</target>
        </trans-unit>
        <trans-unit id="6af6ebf2652770fb07b7edc8a706df252af3c13a" translate="yes" xml:space="preserve">
          <source>Indicates if the model is persisted. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">모델이 유지되는지 여부를 나타냅니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2fd1b698c13f9950dbc0a396b271f3999ea4de3b" translate="yes" xml:space="preserve">
          <source>Indicates whether table names should be the pluralized versions of the corresponding class names. If true, the default table name for a Product class will be &amp;ldquo;products&amp;rdquo;. If false, it would just be &amp;ldquo;product&amp;rdquo;. See table_name for the full rules on table/class naming. This is true, by default.</source>
          <target state="translated">테이블 이름이 해당 클래스 이름의 복수 버전이어야하는지 여부를 나타냅니다. true 인 경우 Product 클래스의 기본 테이블 이름은 &quot;products&quot;입니다. False이면 &quot;제품&quot;일뿐입니다. 테이블 / 클래스 이름 지정에 대한 전체 규칙은 table_name을 참조하십시오. 이것은 기본적으로 사실입니다.</target>
        </trans-unit>
        <trans-unit id="dc64305a14542034550a32ad76b58e39ab963e2d" translate="yes" xml:space="preserve">
          <source>Indicates whether the table associated with this class exists</source>
          <target state="translated">이 클래스와 연관된 테이블이 존재하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b833fb286a71c34f5e91a0725ed89419e3cd6797" translate="yes" xml:space="preserve">
          <source>Indifferent Access</source>
          <target state="translated">무관심한 접근</target>
        </trans-unit>
        <trans-unit id="e377a7420d75303382002218677f891fbd8e5368" translate="yes" xml:space="preserve">
          <source>Individual Components</source>
          <target state="translated">개별 구성품</target>
        </trans-unit>
        <trans-unit id="af78b717bb9e05184fbb67ea0224879b5cf257ac" translate="yes" xml:space="preserve">
          <source>Inflection Rules For Other Locales</source>
          <target state="translated">다른 지역의 변곡 규칙</target>
        </trans-unit>
        <trans-unit id="cf181dc19faa86f0697f3303810611ccfcc004f0" translate="yes" xml:space="preserve">
          <source>Inflection Rules for Other Locales</source>
          <target state="translated">다른 로케일에 대한 활용 규칙</target>
        </trans-unit>
        <trans-unit id="7919b931473684f976aff4e0e966d02ccdc1b05a" translate="yes" xml:space="preserve">
          <source>Inflections</source>
          <target state="translated">Inflections</target>
        </trans-unit>
        <trans-unit id="0f1c9abd7505d9208da9c8c7136012880fde3431" translate="yes" xml:space="preserve">
          <source>Inflections go the other way around.</source>
          <target state="translated">굴절은 반대 방향으로 진행됩니다.</target>
        </trans-unit>
        <trans-unit id="5ade1199eca264ac0dfc557731d76a0f599ba79e" translate="yes" xml:space="preserve">
          <source>Info::inspect</source>
          <target state="translated">Info::inspect</target>
        </trans-unit>
        <trans-unit id="5e57975599660667fcec0e77696ab5bd3ccb669a" translate="yes" xml:space="preserve">
          <source>Info::property</source>
          <target state="translated">Info::property</target>
        </trans-unit>
        <trans-unit id="e8c940c56b021e4e98e5c24a447c9f7fb6f97ec7" translate="yes" xml:space="preserve">
          <source>Info::to_html</source>
          <target state="translated">Info::to_html</target>
        </trans-unit>
        <trans-unit id="6d3ae8926026fa77c4627cf590895d6f17c9ff4e" translate="yes" xml:space="preserve">
          <source>Info::to_s</source>
          <target state="translated">Info::to_s</target>
        </trans-unit>
        <trans-unit id="238da28b1ea22430b20905f64adaf447cc97c56b" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from Mailgun. Requires the following parameters:</source>
          <target state="translated">Mailgun에서 인바운드 이메일을 수집합니다. 다음 매개 변수가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c243d42c40b1b079fac4e495d20a5f383add383e" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from Mandrill.</source>
          <target state="translated">Mandrill에서 인바운드 이메일을 수집합니다.</target>
        </trans-unit>
        <trans-unit id="2e89987697155a3aab4cf8005968c5692402a010" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from Postmark. Requires a &lt;code&gt;RawEmail&lt;/code&gt; parameter containing a full RFC 822 message.</source>
          <target state="translated">Postmark에서 인바운드 이메일을 수집합니다. 전체 RFC 822 메시지를 포함 하는 &lt;code&gt;RawEmail&lt;/code&gt; 매개 변수가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="04e8776b1781cf6ec53bef1b8cc34a7ff1a0e9d4" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from SendGrid. Requires an &lt;code&gt;email&lt;/code&gt; parameter containing a full RFC 822 message.</source>
          <target state="translated">SendGrid에서 인바운드 이메일을 수집합니다. 전체 RFC 822 메시지가 포함 된 &lt;code&gt;email&lt;/code&gt; 매개 변수가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="844c9e9ffaf6b19ebb0cb6befdac150c47968826" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails relayed from an SMTP server.</source>
          <target state="translated">SMTP 서버에서 릴레이 된 인바운드 이메일을 수집합니다.</target>
        </trans-unit>
        <trans-unit id="7da25d8a59155f55aeac4ed34d5ae1b9e20f37f3" translate="yes" xml:space="preserve">
          <source>Ingresses::Mailgun::InboundEmailsController</source>
          <target state="translated">Ingresses::Mailgun::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="b6d7efeec877849944e373cc37ee9788cbc2bde9" translate="yes" xml:space="preserve">
          <source>Ingresses::Mailgun::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Mailgun::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="d471c518a4e0625f34b076410d3be699c0bfa111" translate="yes" xml:space="preserve">
          <source>Ingresses::Mandrill::InboundEmailsController</source>
          <target state="translated">Ingresses::Mandrill::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="6497cdc2b1c087141d75471048d8be9f2619e409" translate="yes" xml:space="preserve">
          <source>Ingresses::Mandrill::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Mandrill::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="32482320e6f8c5325ea6fc34ae05791cb30bc211" translate="yes" xml:space="preserve">
          <source>Ingresses::Postmark::InboundEmailsController</source>
          <target state="translated">Ingresses::Postmark::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="def7ccd5bae34830a8dcd032d9c179d5f085af18" translate="yes" xml:space="preserve">
          <source>Ingresses::Postmark::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Postmark::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="7055870ae3e931a2224267afbbb92ab8f653c953" translate="yes" xml:space="preserve">
          <source>Ingresses::Relay::InboundEmailsController</source>
          <target state="translated">Ingresses::Relay::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="d68de4f5b7ef94464fcb633024f3afa8e9d82b81" translate="yes" xml:space="preserve">
          <source>Ingresses::Relay::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Relay::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="3315bf43c874cae6ee36c7d291e89ba04abb6915" translate="yes" xml:space="preserve">
          <source>Ingresses::Sendgrid::InboundEmailsController</source>
          <target state="translated">Ingresses::Sendgrid::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="79fc86436700d42b832b3c4ea9ae5af07d6ac826" translate="yes" xml:space="preserve">
          <source>Ingresses::Sendgrid::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Sendgrid::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="9addf5a08ee6560a6444bfa5da226f9dda5097e8" translate="yes" xml:space="preserve">
          <source>Inheritable callback queues</source>
          <target state="translated">상속 가능한 콜백 큐</target>
        </trans-unit>
        <trans-unit id="878ffd80536d567c1ec4814aab5eb7633c481c93" translate="yes" xml:space="preserve">
          <source>InheritableOptions</source>
          <target state="translated">InheritableOptions</target>
        </trans-unit>
        <trans-unit id="3d6a119a959e8cbe5490945458d11f87f26d87c5" translate="yes" xml:space="preserve">
          <source>InheritableOptions#inheritable_copy</source>
          <target state="translated">InheritableOptions#inheritable_copy</target>
        </trans-unit>
        <trans-unit id="108a36b1b8200fb5a72710521a7d03c26b191aca" translate="yes" xml:space="preserve">
          <source>InheritableOptions::new</source>
          <target state="translated">InheritableOptions::new</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="6990f737f07155678850da157ebfcf4ec6a6199e" translate="yes" xml:space="preserve">
          <source>Inheritance Examples</source>
          <target state="translated">상속 예제</target>
        </trans-unit>
        <trans-unit id="bde126929181e729972ad7d9ddf772e47cda5bd8" translate="yes" xml:space="preserve">
          <source>Inheritance#initialize_dup</source>
          <target state="translated">Inheritance#initialize_dup</target>
        </trans-unit>
        <trans-unit id="a326a867145d9f00f1712c47c8eb34e3439ab41c" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods</source>
          <target state="translated">Inheritance::ClassMethods</target>
        </trans-unit>
        <trans-unit id="a01613b2b9238ef321f4b05a78a4568055d71e6e" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#abstract_class</source>
          <target state="translated">Inheritance::ClassMethods#abstract_class</target>
        </trans-unit>
        <trans-unit id="4934c3b146a1d79f2577e3e67ff820d302381e18" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#abstract_class?</source>
          <target state="translated">Inheritance::ClassMethods#abstract_class?</target>
        </trans-unit>
        <trans-unit id="00e7918294e24f28c311b4076f415b7d8b83740e" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#base_class</source>
          <target state="translated">Inheritance::ClassMethods#base_class</target>
        </trans-unit>
        <trans-unit id="04a62c79aa4cb9e487fae1d12175cd1d777f6770" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#base_class?</source>
          <target state="translated">Inheritance::ClassMethods#base_class?</target>
        </trans-unit>
        <trans-unit id="0fb13c325e9fe3b08f15be74bd775aff377f5c5b" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#compute_type</source>
          <target state="translated">Inheritance::ClassMethods#compute_type</target>
        </trans-unit>
        <trans-unit id="15186ad27ca45e760e125a07d16fa8e79261d707" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#descends_from_active_record?</source>
          <target state="translated">Inheritance::ClassMethods#descends_from_active_record?</target>
        </trans-unit>
        <trans-unit id="0635fb33f336fafb4ba4e40502aff8a83777dcc6" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#inherited</source>
          <target state="translated">Inheritance::ClassMethods#inherited</target>
        </trans-unit>
        <trans-unit id="977d92bc899515934b4b966eb7654018c87db3bf" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#new</source>
          <target state="translated">Inheritance::ClassMethods#new</target>
        </trans-unit>
        <trans-unit id="372df04a248e04ff8449a2c54ffff50187ce7f28" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#polymorphic_name</source>
          <target state="translated">Inheritance::ClassMethods#polymorphic_name</target>
        </trans-unit>
        <trans-unit id="2a2dfa372be9c94c50976c8495df7eae0586c8a4" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#sti_name</source>
          <target state="translated">Inheritance::ClassMethods#sti_name</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="6514323c8fb77a04ce286a1549e2bf030a862781" translate="yes" xml:space="preserve">
          <source>Initialization events</source>
          <target state="translated">초기화 이벤트</target>
        </trans-unit>
        <trans-unit id="b9b3df890d7a8d84203daafab9b04d207b07add4" translate="yes" xml:space="preserve">
          <source>Initialize a new &lt;a href=&quot;messageencryptor&quot;&gt;&lt;code&gt;MessageEncryptor&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;secret&lt;/code&gt; must be at least as long as the cipher key size. For the default 'aes-256-gcm' cipher, this is 256 bits. If you are using a user-entered secret, you can generate a suitable key by using &lt;code&gt;ActiveSupport::KeyGenerator&lt;/code&gt; or a similar key derivation function.</source>
          <target state="translated">새 &lt;a href=&quot;messageencryptor&quot;&gt; &lt;code&gt;MessageEncryptor&lt;/code&gt; 를&lt;/a&gt; 초기화합니다 . &lt;code&gt;secret&lt;/code&gt; 은 최소한 암호 키 크기만큼 길어야합니다. 기본 'aes-256-gcm'암호의 경우 256 비트입니다. 사용자가 입력 한 비밀을 사용하는 경우 &lt;code&gt;ActiveSupport::KeyGenerator&lt;/code&gt; 또는 유사한 키 파생 기능 을 사용하여 적절한 키를 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="12ddca1d545d5a1128488691ed488f4cd1e459af" translate="yes" xml:space="preserve">
          <source>Initialize a new &lt;a href=&quot;messageencryptor&quot;&gt;MessageEncryptor&lt;/a&gt;. &lt;code&gt;secret&lt;/code&gt; must be at least as long as the cipher key size. For the default 'aes-256-gcm' cipher, this is 256 bits. If you are using a user-entered secret, you can generate a suitable key by using &lt;code&gt;ActiveSupport::KeyGenerator&lt;/code&gt; or a similar key derivation function.</source>
          <target state="translated">새로운 &lt;a href=&quot;messageencryptor&quot;&gt;MessageEncryptor를&lt;/a&gt; 초기화합니다 . &lt;code&gt;secret&lt;/code&gt; 은 암호 키 크기 이상이어야합니다. 기본 'aes-256-gcm'암호의 경우 256 비트입니다. 사용자가 입력 한 비밀을 사용하는 경우 &lt;code&gt;ActiveSupport::KeyGenerator&lt;/code&gt; 또는 유사한 키 파생 함수 를 사용하여 적합한 키를 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c6f5bbca96cb40eb122694edc60ed84cb7ae383d" translate="yes" xml:space="preserve">
          <source>Initialize an empty model object from &lt;code&gt;coder&lt;/code&gt;. &lt;code&gt;coder&lt;/code&gt; should be the result of previously encoding an Active Record model, using &lt;a href=&quot;core#method-i-encode_with&quot;&gt;&lt;code&gt;encode_with&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;coder&lt;/code&gt; 에서 빈 모델 객체를 초기화합니다 . &lt;code&gt;coder&lt;/code&gt; 는 &lt;a href=&quot;core#method-i-encode_with&quot;&gt; &lt;code&gt;encode_with&lt;/code&gt; 를&lt;/a&gt; 사용하여 이전에 Active Record 모델을 인코딩 한 결과 여야 합니다.</target>
        </trans-unit>
        <trans-unit id="96d7e26d527682af0767568cd6eff6730b2648d3" translate="yes" xml:space="preserve">
          <source>Initialize an empty model object from &lt;code&gt;coder&lt;/code&gt;. &lt;code&gt;coder&lt;/code&gt; should be the result of previously encoding an Active Record model, using &lt;a href=&quot;core#method-i-encode_with&quot;&gt;encode_with&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;coder&lt;/code&gt; 에서 빈 모델 객체를 초기화합니다 . &lt;code&gt;coder&lt;/code&gt; 는 &lt;a href=&quot;core#method-i-encode_with&quot;&gt;encode_with를&lt;/a&gt; 사용하여 이전에 활성 레코드 모델을 인코딩 한 결과 여야 합니다.</target>
        </trans-unit>
        <trans-unit id="db5e65d8fc7dddd98f6860c2416bcbcc90ec0fba" translate="yes" xml:space="preserve">
          <source>Initializers</source>
          <target state="translated">Initializers</target>
        </trans-unit>
        <trans-unit id="3cc643394e015280b5fb20c2d82a6a247d93fb7d" translate="yes" xml:space="preserve">
          <source>Initializers defined using the &lt;code&gt;initializer&lt;/code&gt; method will be run in the order they are defined in, with the exception of ones that use the &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; methods.</source>
          <target state="translated">이니셜 &lt;code&gt;initializer&lt;/code&gt; 메소드를 사용하여 정의 된 이니셜 라이저 는 &lt;code&gt;:before&lt;/code&gt; 또는 &lt;code&gt;:after&lt;/code&gt; 메소드 를 사용하는 것을 제외하고는 정의 된 순서대로 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a86d77af0c3722c3e4da4c178fb648acf43fc367" translate="yes" xml:space="preserve">
          <source>Initializes &lt;code&gt;attribute&lt;/code&gt; to zero if &lt;code&gt;nil&lt;/code&gt; and adds the value passed as &lt;code&gt;by&lt;/code&gt; (default is 1). The increment is performed directly on the underlying attribute, no setter is invoked. Only makes sense for number-based attributes. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">이 초기화는 &lt;code&gt;attribute&lt;/code&gt; 으면 0 &lt;code&gt;nil&lt;/code&gt; 과 같이 전달 된 값에 추가 &lt;code&gt;by&lt;/code&gt; (디폴트는 1이다). 증분은 기본 속성에서 직접 수행되며 setter는 호출되지 않습니다. 숫자 기반 속성에만 적합합니다. &lt;code&gt;self&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="fcd42385993fdf0221b329817d9382977b72308d" translate="yes" xml:space="preserve">
          <source>Initializes &lt;code&gt;attribute&lt;/code&gt; to zero if &lt;code&gt;nil&lt;/code&gt; and subtracts the value passed as &lt;code&gt;by&lt;/code&gt; (default is 1). The decrement is performed directly on the underlying attribute, no setter is invoked. Only makes sense for number-based attributes. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">이 초기화는 &lt;code&gt;attribute&lt;/code&gt; 으면 0 &lt;code&gt;nil&lt;/code&gt; 및 뺀 값으로 전달 &lt;code&gt;by&lt;/code&gt; (디폴트는 1이다). 감소는 기본 속성에서 직접 수행되며 setter는 호출되지 않습니다. 숫자 기반 속성에만 적합합니다. &lt;code&gt;self&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9d1efbf2932073f2aaa30fb69d34ca59d561f6dc" translate="yes" xml:space="preserve">
          <source>Initializes a new model with the given &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;params&lt;/code&gt; 로 새 모델을 초기화합니다 .</target>
        </trans-unit>
        <trans-unit id="25919e950f14f28342516aa26edc8ef27fb8cfe7" translate="yes" xml:space="preserve">
          <source>Initializes and connects a PostgreSQL adapter.</source>
          <target state="translated">PostgreSQL 어댑터를 초기화하고 연결합니다.</target>
        </trans-unit>
        <trans-unit id="5f44168de8e6de1f11fd906b709a9ac6d9152d00" translate="yes" xml:space="preserve">
          <source>Initializes new record from relation while maintaining the current scope.</source>
          <target state="translated">현재 범위를 유지하면서 관계에서 새 레코드를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="56915b94b06061a272ee042aac64cce078107917" translate="yes" xml:space="preserve">
          <source>Initiate a manual reload</source>
          <target state="translated">수동 재 장전 시작</target>
        </trans-unit>
        <trans-unit id="2d851649cb0b809ff3f794243faf8b50aac49273" translate="yes" xml:space="preserve">
          <source>Injection</source>
          <target state="translated">Injection</target>
        </trans-unit>
        <trans-unit id="829ffb5e8ba86505d0ede43d4f74c3b605d82ec6" translate="yes" xml:space="preserve">
          <source>Injection is very tricky, because the same code or parameter can be malicious in one context, but totally harmless in another. A context can be a scripting, query, or programming language, the shell, or a Ruby/Rails method. The following sections will cover all important contexts where injection attacks may happen. The first section, however, covers an architectural decision in connection with Injection.</source>
          <target state="translated">동일한 코드 나 매개 변수가 한 상황에서는 악의적 일 수 있지만 다른 상황에서는 전혀 무해하기 때문에 주입은 매우 까다 롭습니다. 컨텍스트는 스크립팅, 쿼리 또는 프로그래밍 언어, 쉘 또는 Ruby / Rails 메소드 일 수 있습니다. 다음 섹션에서는 주입 공격이 발생할 수있는 모든 중요한 컨텍스트를 다룹니다. 그러나 첫 번째 섹션에서는 인젝션과 관련된 아키텍처 결정에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="6485cd5f8e0fb60a6b40665efa4be6e80ab8c693" translate="yes" xml:space="preserve">
          <source>Injects a block of code into a defined position in your file.</source>
          <target state="translated">코드 블록을 파일의 정의 된 위치에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="d2860d2edae8411abdfa46d50321f29af97f5353" translate="yes" xml:space="preserve">
          <source>Inline Attachments</source>
          <target state="translated">인라인 첨부</target>
        </trans-unit>
        <trans-unit id="b46ea27191430cc66d892811d5c5909433511f69" translate="yes" xml:space="preserve">
          <source>Inline callback blocks using &lt;code&gt;return&lt;/code&gt; can be refactored to evaluate to the returned value:</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 을 사용하는 인라인 콜백 블록 은 리팩토링되어 반환 된 값으로 평가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29a8dda03d8fa26cf788bd2ddffa18aa80d59c11" translate="yes" xml:space="preserve">
          <source>InlinePreviewInterceptor</source>
          <target state="translated">InlinePreviewInterceptor</target>
        </trans-unit>
        <trans-unit id="a845996754ffc7a0716a05091edc051fd302fc2e" translate="yes" xml:space="preserve">
          <source>Inserting data into HTML templates needs extra care. For example, you can't just interpolate &lt;code&gt;@review.title&lt;/code&gt; verbatim into an HTML page. For one thing, if the review title is &quot;Flanagan &amp;amp; Matz rules!&quot; the output won't be well-formed because an ampersand has to be escaped as &quot;&amp;amp;amp;&quot;. What's more, depending on the application, that may be a big security hole because users can inject malicious HTML setting a hand-crafted review title. Check out the section about cross-site scripting in the &lt;a href=&quot;security#cross-site-scripting-xss&quot;&gt;Security guide&lt;/a&gt; for further information about the risks.</source>
          <target state="translated">HTML 템플릿에 데이터를 삽입하려면 특별한주의가 필요합니다. 예를 들어 &lt;code&gt;@review.title&lt;/code&gt; 그대로 HTML 페이지에 삽입 할 수는 없습니다 . 우선, 리뷰 제목이 &quot;Flanagan &amp;amp; Matz rules!&quot;라면 앰퍼샌드를 &quot;&amp;amp; amp&quot;로 이스케이프해야하기 때문에 출력이 제대로 구성되지 않습니다. 또한 응용 프로그램에 따라 사용자가 수작업으로 작성한 리뷰 제목을 악의적 인 HTML 설정에 삽입 할 수 있기 때문에 보안 상 큰 허점이 될 수 있습니다. 위험에 대한 자세한 내용은 &lt;a href=&quot;security#cross-site-scripting-xss&quot;&gt;보안 가이드&lt;/a&gt; 에서 크로스 사이트 스크립팅 섹션을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="01be4a345faed307605daf983eeed9bc1912f61d" translate="yes" xml:space="preserve">
          <source>Inserts a single record into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="translated">단일 SQL INSERT 문에서 데이터베이스에 단일 레코드를 삽입합니다. 모델을 인스턴스화하지 않으며 Active Record 콜백 또는 유효성 검사를 트리거하지 않습니다. 전달 된 값은 Active Record의 유형 캐스팅 및 직렬화를 거칩니다.</target>
        </trans-unit>
        <trans-unit id="f2098ea62054241a3c2030b9e7b979d66024097c" translate="yes" xml:space="preserve">
          <source>Inserts multiple records into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="translated">단일 SQL INSERT 문으로 데이터베이스에 여러 레코드를 삽입합니다. 모델을 인스턴스화하지 않으며 Active Record 콜백 또는 유효성 검사를 트리거하지 않습니다. 전달 된 값은 Active Record의 유형 캐스팅 및 직렬화를 거칩니다.</target>
        </trans-unit>
        <trans-unit id="03c94201b563e22988175ed07701bbc92b432230" translate="yes" xml:space="preserve">
          <source>Inserts the given fixture into the table. Overridden in adapters that require something beyond a simple insert (e.g. Oracle). Most of adapters should implement `insert_fixtures_set` that leverages bulk SQL insert. We keep this method to provide fallback for databases like sqlite that do not support bulk inserts.</source>
          <target state="translated">주어진 조명기를 테이블에 삽입합니다. 단순한 삽입 이상의 것을 필요로하는 어댑터 (예 : Oracle)에서 재정의됩니다. 대부분의 어댑터는 대량 SQL 삽입을 활용하는`insert_fixtures_set`을 구현해야합니다. 대량 삽입을 지원하지 않는 sqlite와 같은 데이터베이스에 대한 대체를 제공하기 위해이 방법을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="3e75d211e60bc43f28ee2a4034ae9797a2cd4e71" translate="yes" xml:space="preserve">
          <source>Inserts the given fixture into the table. Overridden in adapters that require something beyond a simple insert (eg. Oracle). Most of adapters should implement `insert_fixtures_set` that leverages bulk SQL insert. We keep this method to provide fallback for databases like sqlite that do not support bulk inserts.</source>
          <target state="translated">주어진 조명기를 테이블에 삽입합니다. 단순한 삽입 이외의 것을 요구하는 어댑터 (예 : Oracle)에서 재정의되었습니다. 대부분의 어댑터는 대량 SQL 삽입을 활용하는`insert_fixtures_set`을 구현해야합니다. 대량 삽입을 지원하지 않는 sqlite와 같은 데이터베이스에 폴백을 제공하기 위해이 방법을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="dcdce6d287df6df156ef34c4bebe0e7598a298eb" translate="yes" xml:space="preserve">
          <source>Inside a Rails application, you can set-up your services through the generated &lt;code&gt;config/storage.yml&lt;/code&gt; file and reference one of the aforementioned constant under the &lt;code&gt;service&lt;/code&gt; key. For example:</source>
          <target state="translated">Rails 애플리케이션 내에서 생성 된 &lt;code&gt;config/storage.yml&lt;/code&gt; 파일을 통해 서비스를 설정 하고 &lt;code&gt;service&lt;/code&gt; 키 에서 위에서 언급 한 상수 중 하나를 참조 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="81fc66f02c626e819fce091962b69cd908ed799a" translate="yes" xml:space="preserve">
          <source>Inside an Engine</source>
          <target state="translated">엔진 내부</target>
        </trans-unit>
        <trans-unit id="ca089a5502c726d8026d3a6ef582d1f9c7041b18" translate="yes" xml:space="preserve">
          <source>Inside any Rails application you can then invoke the debugger by calling the &lt;code&gt;byebug&lt;/code&gt; method.</source>
          <target state="translated">Rails 애플리케이션 내에서 &lt;code&gt;byebug&lt;/code&gt; 메소드 를 호출하여 디버거를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7bafd3cd51f90726af9a9d1acaf7aa7cadd199a4" translate="yes" xml:space="preserve">
          <source>Inside any controller action or view, you can invoke the console by calling the &lt;code&gt;console&lt;/code&gt; method.</source>
          <target state="translated">컨트롤러 조치 또는보기에서 &lt;code&gt;console&lt;/code&gt; 메소드를 호출하여 콘솔을 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="21481b8c559c4c02b87406f78ebeb054fe506b43" translate="yes" xml:space="preserve">
          <source>Inside migration files, the &lt;code&gt;t&lt;/code&gt; object in &lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt; is actually of this type:</source>
          <target state="translated">마이그레이션 파일 내 에서 &lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt; 의 &lt;code&gt;t&lt;/code&gt; 객체 는 실제로 다음 유형입니다.</target>
        </trans-unit>
        <trans-unit id="744d4fb8e59b54f4790af3c09cd7d3d4f2da5ac7" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;-&amp;gt; { ... }&lt;/code&gt; block you can use all of the usual &lt;a href=&quot;../relation&quot;&gt;&lt;code&gt;Relation&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;-&amp;gt; { ... }&lt;/code&gt; 블록 내에서 모든 일반적인 &lt;a href=&quot;../relation&quot;&gt; &lt;code&gt;Relation&lt;/code&gt; &lt;/a&gt; 메서드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="acfb2b1ac48dee8a30cfcdf3f4dfe998556d2d5a" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;-&amp;gt; { ... }&lt;/code&gt; block you can use all of the usual &lt;a href=&quot;../relation&quot;&gt;Relation&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;-&amp;gt; { ... }&lt;/code&gt; 블록 내에서 모든 일반적인 &lt;a href=&quot;../relation&quot;&gt;Relation&lt;/a&gt; 방법을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="edfc5dfee3505b9f9d6bda671872ebd4a4ee350e" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;app&lt;/code&gt; directory are the standard &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;helpers&lt;/code&gt;, &lt;code&gt;jobs&lt;/code&gt;, &lt;code&gt;mailers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, and &lt;code&gt;views&lt;/code&gt; directories that you should be familiar with from an application. We'll look more into models in a future section, when we're writing the engine.</source>
          <target state="translated">내부 &lt;code&gt;app&lt;/code&gt; 디렉토리 표준 &lt;code&gt;assets&lt;/code&gt; , &lt;code&gt;controllers&lt;/code&gt; , &lt;code&gt;helpers&lt;/code&gt; , &lt;code&gt;jobs&lt;/code&gt; , &lt;code&gt;mailers&lt;/code&gt; , &lt;code&gt;models&lt;/code&gt; 과 &lt;code&gt;views&lt;/code&gt; 디렉토리는 응용 프로그램에서 잘 알고 있어야합니다 것을. 우리는 엔진을 작성할 때 다음 섹션에서 더 많은 모델을 살펴볼 것입니다.</target>
        </trans-unit>
        <trans-unit id="91967b542aed5f5ef2e46c25860a52b13656d35d" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;bin/rails console&lt;/code&gt; you have access to the &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;helper&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;bin/rails console&lt;/code&gt; 내에서 &lt;code&gt;app&lt;/code&gt; 및 &lt;code&gt;helper&lt;/code&gt; 인스턴스에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b5bb7d78f59ef0d2405b8e986fb4763ebd602dd" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;rails console&lt;/code&gt; you have access to the &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;helper&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;rails console&lt;/code&gt; 내부에서 &lt;code&gt;app&lt;/code&gt; 및 &lt;code&gt;helper&lt;/code&gt; 인스턴스에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="641ef3a3a6478764778e579b5b58210ea5d42729" translate="yes" xml:space="preserve">
          <source>Inside the block for &lt;code&gt;create_table&lt;/code&gt;, two columns are defined: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;. These were added by the generator because we included them in our generate command (&lt;code&gt;bin/rails generate model Article title:string body:text&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;create_table&lt;/code&gt; 의 블록 안에는 &lt;code&gt;title&lt;/code&gt; 과 &lt;code&gt;body&lt;/code&gt; 라는 두 개의 열이 정의 되어 있습니다 . 이들은 생성 명령에 포함 되었기 때문에 생성기에 의해 추가되었습니다 ( &lt;code&gt;bin/rails generate model Article title:string body:text&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="6469372268010b680566e892d837c1be10063e1d" translate="yes" xml:space="preserve">
          <source>Inside the test directory there is the &lt;code&gt;test/integration&lt;/code&gt; directory, where integration tests for the engine should be placed. Other directories can be created in the &lt;code&gt;test&lt;/code&gt; directory as well. For example, you may wish to create a &lt;code&gt;test/models&lt;/code&gt; directory for your model tests.</source>
          <target state="translated">테스트 디렉토리에는 엔진에 대한 통합 테스트를 수행해야하는 &lt;code&gt;test/integration&lt;/code&gt; 디렉토리가 있습니다. 다른 디렉토리도 &lt;code&gt;test&lt;/code&gt; 디렉토리 에서 작성할 수 있습니다 . 예를 들어 모델 테스트를위한 &lt;code&gt;test/models&lt;/code&gt; 디렉토리 를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8408bbf7dfd69738c24b99c0074fd7a247613a94" translate="yes" xml:space="preserve">
          <source>Inspecting Middleware Stack</source>
          <target state="translated">미들웨어 스택 검사</target>
        </trans-unit>
        <trans-unit id="a6ae35f450b26d859c2118e63fa573b3bd8d5308" translate="yes" xml:space="preserve">
          <source>Inspecting Variables</source>
          <target state="translated">변수 검사</target>
        </trans-unit>
        <trans-unit id="c92130bec27348f9c16772e495150fc6bd805def" translate="yes" xml:space="preserve">
          <source>Inspecting and Testing Routes</source>
          <target state="translated">경로 검사 및 테스트</target>
        </trans-unit>
        <trans-unit id="cfb0a450eea8507a41095ebe947ca2ed8994961a" translate="yes" xml:space="preserve">
          <source>Inspired by the Quiet Backtrace gem by thoughtbot.</source>
          <target state="translated">Thinkbot의 Quiet Backtrace 보석에서 영감을 얻었습니다.</target>
        </trans-unit>
        <trans-unit id="8dacdfdb2b7181d7db1e289a5292e9965b1d7fd8" translate="yes" xml:space="preserve">
          <source>Install a callback for the given event.</source>
          <target state="translated">주어진 이벤트에 대한 콜백을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="17ec383645ad0dd91277a304080964bf80f4f253" translate="yes" xml:space="preserve">
          <source>Install migrations needed for &lt;code&gt;InboundEmail&lt;/code&gt; and ensure Active Storage is set up:</source>
          <target state="translated">&lt;code&gt;InboundEmail&lt;/code&gt; 에 필요한 마이그레이션을 설치 하고 Active Storage가 설정되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d00f491d8c40c03d4b59f712550d0e446ff54fbd" translate="yes" xml:space="preserve">
          <source>Install spring using &lt;code&gt;bundle install&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bundle install&lt;/code&gt; 사용하여 스프링을 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="6e0f3906b5c7f6a4b6cb048055a7f93079d5264f" translate="yes" xml:space="preserve">
          <source>Installing Rails</source>
          <target state="translated">레일 설치</target>
        </trans-unit>
        <trans-unit id="aa6dfe54274ed1710b82f903b6abd73713a2f05a" translate="yes" xml:space="preserve">
          <source>Instance Variables</source>
          <target state="translated">인스턴스 변수</target>
        </trans-unit>
        <trans-unit id="e6bc144a6aa17edc35608d98fc5380cd3df13339" translate="yes" xml:space="preserve">
          <source>Instance Variables Available</source>
          <target state="translated">사용 가능한 인스턴스 변수</target>
        </trans-unit>
        <trans-unit id="f4afcaf921a6de61c708f5f2c356b8ce5c3328e9" translate="yes" xml:space="preserve">
          <source>Instance methods are created as well for convenience, they are just proxies to the class attribute. So, instances can change the class attribute, but cannot override it as it happens with &lt;code&gt;class_attribute&lt;/code&gt; (see above). For example given</source>
          <target state="translated">인스턴스 메소드는 편의를 위해 작성되며 클래스 속성의 프록시 일뿐입니다. 따라서 인스턴스는 클래스 속성을 변경할 수 있지만 &lt;code&gt;class_attribute&lt;/code&gt; 에서 와 같이이를 무시할 수는 없습니다 (위 참조). 예를 들어 주어진</target>
        </trans-unit>
        <trans-unit id="0c9fd054155855fd08e13e216d559f7895b79636" translate="yes" xml:space="preserve">
          <source>Instance variables that are accessible in views.</source>
          <target state="translated">뷰에서 액세스 할 수있는 인스턴스 변수.</target>
        </trans-unit>
        <trans-unit id="a7436cd076605f4f6b404cf011f15d6a92df9c3d" translate="yes" xml:space="preserve">
          <source>Instance-level &lt;code&gt;respond_to&lt;/code&gt; is unaffected and does not require the additional gem:</source>
          <target state="translated">인스턴스 레벨 &lt;code&gt;respond_to&lt;/code&gt; 는 영향을받지 않으며 추가 gem이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7762633929a1e0b61a50135d708b869a90a1a564" translate="yes" xml:space="preserve">
          <source>Instances may overwrite the class value in the same way:</source>
          <target state="translated">인스턴스는 같은 방식으로 클래스 값을 덮어 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f2c6de42dd18302648ff7dd63c129bbd2f177e6" translate="yes" xml:space="preserve">
          <source>Instantiate the equivalent Ruby object of the appropriate model for every resulting row.</source>
          <target state="translated">모든 결과 행에 대해 적절한 모델의 동등한 Ruby 오브젝트를 인스턴스화하십시오.</target>
        </trans-unit>
        <trans-unit id="d4cfe1684b9bdb4a97ddba033a2969091cea4d78" translate="yes" xml:space="preserve">
          <source>Instantiates a new column for the table. See &lt;a href=&quot;schemastatements#method-i-add_column&quot;&gt;connection.add_column&lt;/a&gt; for available options.</source>
          <target state="translated">테이블의 새 열을 인스턴스화합니다. 사용 가능한 옵션 은 &lt;a href=&quot;schemastatements#method-i-add_column&quot;&gt;connection.add_column&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e745302923474832bd961065a8fb1dadefee0f6b" translate="yes" xml:space="preserve">
          <source>Instantiating a new &lt;a href=&quot;stringinquirer&quot;&gt;&lt;code&gt;StringInquirer&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">새 &lt;a href=&quot;stringinquirer&quot;&gt; &lt;code&gt;StringInquirer&lt;/code&gt; &lt;/a&gt; 인스턴스화</target>
        </trans-unit>
        <trans-unit id="ec491111cabccfee0fc99b9e3416ee8ef93d5fab" translate="yes" xml:space="preserve">
          <source>Instantiating a new &lt;a href=&quot;stringinquirer&quot;&gt;StringInquirer&lt;/a&gt;</source>
          <target state="translated">새로운 &lt;a href=&quot;stringinquirer&quot;&gt;StringInquirer&lt;/a&gt; 인스턴스화</target>
        </trans-unit>
        <trans-unit id="4db2c485a1c4b852a7d1afe7da3a46ea4ba7e31d" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, like &lt;code&gt;posts#index&lt;/code&gt;, which corresponds to the index action in the PostsController, you can specify any Rack application as the endpoint for a matcher:</source>
          <target state="translated">PostsController의 인덱스 작업에 해당하는 &lt;code&gt;posts#index&lt;/code&gt; 와 같은 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 대신 매처의 끝점으로 Rack 애플리케이션을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de2daca2c5d3ff11781567a508a71041f4b7c73f" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;, like &lt;code&gt;posts#index&lt;/code&gt;, which corresponds to the index action in the PostsController, you can specify any Rack application as the endpoint for a matcher:</source>
          <target state="translated">PostsController의 인덱스 작업에 해당하는 &lt;code&gt;posts#index&lt;/code&gt; 와 같은 &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt; 대신에 모든 랙 애플리케이션을 매처의 엔드 포인트로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b82c51d0b22ee7205e62cd6f126b3721bdf68de6" translate="yes" xml:space="preserve">
          <source>Instead of a String like &lt;code&gt;'articles#index'&lt;/code&gt;, which corresponds to the &lt;code&gt;index&lt;/code&gt; action in the &lt;code&gt;ArticlesController&lt;/code&gt;, you can specify any &lt;a href=&quot;rails_on_rack&quot;&gt;Rack application&lt;/a&gt; as the endpoint for a matcher:</source>
          <target state="translated">&lt;code&gt;ArticlesController&lt;/code&gt; 의 &lt;code&gt;index&lt;/code&gt; 작업에 해당하는 &lt;code&gt;'articles#index'&lt;/code&gt; 와 같은 문자열 대신 모든 &lt;a href=&quot;rails_on_rack&quot;&gt;랙 애플리케이션&lt;/a&gt; 을 매처의 엔드 포인트로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cda95c68819053b9941c2e8712b8b82003b7c61b" translate="yes" xml:space="preserve">
          <source>Instead of an options hash, you can also simply pass in a model. Rails will use the &lt;code&gt;updated_at&lt;/code&gt; and &lt;code&gt;cache_key_with_version&lt;/code&gt; methods for setting &lt;code&gt;last_modified&lt;/code&gt; and &lt;code&gt;etag&lt;/code&gt;:</source>
          <target state="translated">옵션 해시 대신 단순히 모델을 전달할 수도 있습니다. Rails는 &lt;code&gt;last_modified&lt;/code&gt; 및 &lt;code&gt;etag&lt;/code&gt; 설정을 위해 &lt;code&gt;updated_at&lt;/code&gt; 및 &lt;code&gt;cache_key_with_version&lt;/code&gt; 메소드를 사용합니다 :</target>
        </trans-unit>
        <trans-unit id="abde7a605409afb52df3b59e00ef377416ed7481" translate="yes" xml:space="preserve">
          <source>Instead of calling &lt;a href=&quot;tabledefinition#method-i-column&quot;&gt;&lt;code&gt;column&lt;/code&gt;&lt;/a&gt; directly, you can also work with the short-hand definitions for the default types. They use the type as the method name instead of as a parameter and allow for multiple columns to be defined in a single statement.</source>
          <target state="translated">&lt;a href=&quot;tabledefinition#method-i-column&quot;&gt; &lt;code&gt;column&lt;/code&gt; &lt;/a&gt; 직접 호출하는 대신 기본 유형에 대한 약식 정의로 작업 할 수도 있습니다. 매개 변수 대신 메소드 이름으로 유형을 사용하고 단일 명령문에 여러 열을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b08b659f08cd25084c638c422a66099cf07388cf" translate="yes" xml:space="preserve">
          <source>Instead of calling &lt;a href=&quot;tabledefinition#method-i-column&quot;&gt;column&lt;/a&gt; directly, you can also work with the short-hand definitions for the default types. They use the type as the method name instead of as a parameter and allow for multiple columns to be defined in a single statement.</source>
          <target state="translated">&lt;a href=&quot;tabledefinition#method-i-column&quot;&gt;열을&lt;/a&gt; 직접 호출하는 대신 기본 유형에 대한 속기 정의를 사용할 수도 있습니다. 유형을 매개 변수 대신 메소드 이름으로 사용하고 단일 명령문에서 여러 열을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54c983c02d3a5b541a7a56ed3d4f0d08dea5c885" translate="yes" xml:space="preserve">
          <source>Instead of explicitly naming the location of a partial, you can also let &lt;a href=&quot;partialrenderer&quot;&gt;&lt;code&gt;PartialRenderer&lt;/code&gt;&lt;/a&gt; do the work and pick the proper path by checking &lt;code&gt;to_partial_path&lt;/code&gt; method.</source>
          <target state="translated">부분의 위치를 ​​명시 적으로 지정하는 대신 &lt;a href=&quot;partialrenderer&quot;&gt; &lt;code&gt;PartialRenderer&lt;/code&gt; &lt;/a&gt; 가 작업을 수행하도록하고 &lt;code&gt;to_partial_path&lt;/code&gt; 메서드 를 확인하여 적절한 경로를 선택할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6fac76b830aa8fdf650571fd8e47e809b5f97b6" translate="yes" xml:space="preserve">
          <source>Instead of explicitly naming the location of a partial, you can also let &lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt; do the work and pick the proper path by checking &lt;code&gt;to_partial_path&lt;/code&gt; method.</source>
          <target state="translated">&lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt; 가 부분의 위치를 ​​명시 적으로 명명하는 대신 &lt;code&gt;to_partial_path&lt;/code&gt; 메소드 를 확인하여 PartialRenderer 가 작업을 수행하고 올바른 경로를 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="282a280a0cab90c59c897d96018296189d742c1c" translate="yes" xml:space="preserve">
          <source>Instead of passing a string to the conditions option, you can pass an array to sanitize tainted strings like this:</source>
          <target state="translated">조건 옵션에 문자열을 전달하는 대신 배열을 전달하여 다음과 같이 오염 된 문자열을 살균 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec02bda762202680a9ca746c8177602658813c28" translate="yes" xml:space="preserve">
          <source>Instead of passing the content as an argument, you can also use a block in which case, you pass your &lt;code&gt;html_options&lt;/code&gt; as the first parameter.</source>
          <target state="translated">컨텐츠를 인수로 전달하는 대신 블록을 사용할 수도 있습니다.이 경우 &lt;code&gt;html_options&lt;/code&gt; 를 첫 번째 매개 변수로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="edd65bb52286b846fe1b028432f87a2da5ac601a" translate="yes" xml:space="preserve">
          <source>Instead of polluting the thread locals namespace:</source>
          <target state="translated">스레드 로컬 네임 스페이스를 오염시키는 대신 :</target>
        </trans-unit>
        <trans-unit id="38b0e5a9769fb9574f82e5157ef0cddca8289de5" translate="yes" xml:space="preserve">
          <source>Instead of returning a path such as &lt;code&gt;/assets/smile.png&lt;/code&gt; (digests are left out for readability). The URL generated will have the full path to your CDN.</source>
          <target state="translated">&lt;code&gt;/assets/smile.png&lt;/code&gt; 와 같은 경로를 반환하는 대신 (가독성을 위해 다이제스트는 제외됨 ) 생성 된 URL에는 CDN의 전체 경로가 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b24539f81dce8069573b818cfa967fe057251e4" translate="yes" xml:space="preserve">
          <source>Instead of setting the variant on the render call you may also set it on the request object in your controller action.</source>
          <target state="translated">렌더 호출에서 변형을 설정하는 대신 컨트롤러 작업의 요청 객체에서 변형을 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7d9c8fa98536e91c26d449b779521f157c1a6de" translate="yes" xml:space="preserve">
          <source>Instead of stealing a cookie unknown to the attacker, they fix a user's session identifier (in the cookie) known to them. Read more about this so-called session fixation later.</source>
          <target state="translated">공격자에게 알려지지 않은 쿠키를 훔치는 대신 쿠키로 알려진 사용자의 세션 식별자를 쿠키에 고정시킵니다. 이 소위 세션 고정에 대해 자세히 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="368161168ef35935386619c50d010f0e7708fec1" translate="yes" xml:space="preserve">
          <source>Instead of the initializer, you'll have to set the relevant options somewhere before your middleware is built (like &lt;code&gt;config/application.rb&lt;/code&gt;) and pass them to your preferred middleware, like this:</source>
          <target state="translated">이니셜 라이저 대신 미들웨어가 빌드되기 전에 ( &lt;code&gt;config/application.rb&lt;/code&gt; 와 같은) 관련 옵션을 어딘가에 설정하고 다음과 같이 선호하는 미들웨어에 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="a9ae3405744e20c189c424dbe4a3d20461b01ff6" translate="yes" xml:space="preserve">
          <source>Instead of using Rails to generate HTML that communicates with the server through forms and links, many developers are treating their web application as just an API client delivered as HTML with JavaScript that consumes a JSON API.</source>
          <target state="translated">Rails를 사용하여 폼과 링크를 통해 서버와 통신하는 HTML을 생성하는 대신 많은 개발자들이 웹 애플리케이션을 JSON API를 사용하는 JavaScript를 통해 HTML로 제공되는 API 클라이언트로 취급하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">대신에:</target>
        </trans-unit>
        <trans-unit id="48dfdea2f5cbbb425bae6510eac74e4622640ae0" translate="yes" xml:space="preserve">
          <source>Instead, we will pass a single Hash that contains the values. However, we must still specify what values are allowed in that Hash. Otherwise, a malicious user could potentially submit extra form fields and overwrite private data. In fact, if we pass the unfiltered &lt;code&gt;params[:article]&lt;/code&gt; Hash directly to &lt;code&gt;Article.new&lt;/code&gt;, Rails will raise a &lt;code&gt;ForbiddenAttributesError&lt;/code&gt; to alert us about the problem. So we will use a feature of Rails called &lt;em&gt;Strong Parameters&lt;/em&gt; to filter &lt;code&gt;params&lt;/code&gt;. Think of it as &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot;&gt;strong typing&lt;/a&gt; for &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="translated">대신 값을 포함하는 단일 해시를 전달합니다. 그러나 해당 해시에서 허용되는 값을 지정해야합니다. 그렇지 않으면 악의적 인 사용자가 추가 양식 필드를 제출하고 개인 데이터를 덮어 쓸 수 있습니다. 실제로 필터링되지 않은 &lt;code&gt;params[:article]&lt;/code&gt; Hash를 &lt;code&gt;Article.new&lt;/code&gt; 에 직접 전달하면 Rails는 &lt;code&gt;ForbiddenAttributesError&lt;/code&gt; 를 발생시켜 문제에 대해 알려줍니다. 그래서 우리는 &lt;code&gt;params&lt;/code&gt; 를 필터링하기 위해 &lt;em&gt;Strong Parameters&lt;/em&gt; 라는 Rails의 기능을 사용할 것 입니다. &lt;code&gt;params&lt;/code&gt; 에 대한 &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot;&gt;강력한 타이핑&lt;/a&gt; 이라고 생각하십시오 .</target>
        </trans-unit>
        <trans-unit id="507770191eeb7ec98eb1ba54a5ba1a74a894e508" translate="yes" xml:space="preserve">
          <source>Instrumentation: Rails has an instrumentation API that triggers registered handlers for a variety of events, such as action processing, sending a file or data, redirection, and database queries. The payload of each event comes with relevant information (for the action processing event, the payload includes the controller, action, parameters, request format, request method, and the request's full path).</source>
          <target state="translated">계측 : Rails에는 작업 처리, 파일 또는 데이터 전송, 리디렉션 및 데이터베이스 쿼리와 같은 다양한 이벤트에 대해 등록 된 핸들러를 트리거하는 계측 API가 있습니다. 각 이벤트의 페이로드에는 관련 정보가 있습니다 (작업 처리 이벤트의 경우 페이로드에는 컨트롤러, 작업, 매개 변수, 요청 형식, 요청 방법 및 요청의 전체 경로가 포함됨).</target>
        </trans-unit>
        <trans-unit id="ce36819d4451c02e4b229841cfbf52796a818ec4" translate="yes" xml:space="preserve">
          <source>Instrumenters</source>
          <target state="translated">Instrumenters</target>
        </trans-unit>
        <trans-unit id="b300e5ce045a08b89313fafa5e73ed0492a458f3" translate="yes" xml:space="preserve">
          <source>Instrumenters are stored in a thread local.</source>
          <target state="translated">인스트루먼트는 스레드 로컬에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="3caba6d00ba203d77ce889c6e7b15dc02732832e" translate="yes" xml:space="preserve">
          <source>Integer#year</source>
          <target state="translated">Integer#year</target>
        </trans-unit>
        <trans-unit id="6c44dbddc3fd22ad67d4d705b958417bd4bc9d93" translate="yes" xml:space="preserve">
          <source>Integers in the example above are supposed to come from the respective calls to &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">위 예제의 정수는 각각의 &lt;code&gt;id&lt;/code&gt; 호출에서 온 것으로 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="c87f52def7d613c90253e811aa67f30c00e37459" translate="yes" xml:space="preserve">
          <source>Integrating with Libraries or Frameworks</source>
          <target state="translated">라이브러리 또는 프레임 워크와 통합</target>
        </trans-unit>
        <trans-unit id="899e5920ef1372292f1f4f69d3125e5a5f5a1dfb" translate="yes" xml:space="preserve">
          <source>Integration</source>
          <target state="translated">Integration</target>
        </trans-unit>
        <trans-unit id="ed8e7536d5000854a478dee90bcbee2c9954ce4e" translate="yes" xml:space="preserve">
          <source>Integration Testing</source>
          <target state="translated">통합 테스팅</target>
        </trans-unit>
        <trans-unit id="67982c4f135ee413508775af875318e3445716ec" translate="yes" xml:space="preserve">
          <source>Integration test methods such as &lt;a href=&quot;integration/requesthelpers#method-i-get&quot;&gt;ActionDispatch::Integration::RequestHelpers#get&lt;/a&gt; and &lt;a href=&quot;integration/requesthelpers#method-i-post&quot;&gt;ActionDispatch::Integration::RequestHelpers#post&lt;/a&gt; return objects of class &lt;a href=&quot;testresponse&quot;&gt;TestResponse&lt;/a&gt;, which represent the HTTP response results of the requested controller actions.</source>
          <target state="translated">&lt;a href=&quot;integration/requesthelpers#method-i-get&quot;&gt;ActionDispatch :: Integration :: RequestHelpers # get&lt;/a&gt; 및 &lt;a href=&quot;integration/requesthelpers#method-i-post&quot;&gt;ActionDispatch :: Integration :: RequestHelpers # post&lt;/a&gt; 와 같은 통합 테스트 메소드 는 요청 된 컨트롤러 조치의 HTTP 응답 결과를 나타내는 &lt;a href=&quot;testresponse&quot;&gt;TestResponse&lt;/a&gt; 클래스의 오브젝트를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a0463d29899b2730367d1e976545807c7a0e21c9" translate="yes" xml:space="preserve">
          <source>Integration tests are used to test how various parts of our application interact. They are generally used to test important workflows within our application.</source>
          <target state="translated">통합 테스트는 애플리케이션의 다양한 부분이 상호 작용하는 방식을 테스트하는 데 사용됩니다. 일반적으로 애플리케이션 내에서 중요한 워크 플로를 테스트하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2e1cd626fe8c4b66dfdf6e0d004c6db44ed7558b" translate="yes" xml:space="preserve">
          <source>Integration tests are used to test how various parts of your application interact. They are generally used to test important workflows within our application.</source>
          <target state="translated">통합 테스트는 응용 프로그램의 다양한 부분이 어떻게 상호 작용하는지 테스트하는 데 사용됩니다. 일반적으로 응용 프로그램 내에서 중요한 워크 플로를 테스트하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b2819304f744a3d244c44613d57e819fac608045" translate="yes" xml:space="preserve">
          <source>Integration#cache_key</source>
          <target state="translated">Integration#cache_key</target>
        </trans-unit>
        <trans-unit id="6c53dea3f7d20bb55236f30495fad68cb70689bb" translate="yes" xml:space="preserve">
          <source>Integration#cache_key_with_version</source>
          <target state="translated">Integration#cache_key_with_version</target>
        </trans-unit>
        <trans-unit id="f02c91c56da5fefe68235806aa6ec3d1994ea656" translate="yes" xml:space="preserve">
          <source>Integration#cache_version</source>
          <target state="translated">Integration#cache_version</target>
        </trans-unit>
        <trans-unit id="21095e92f582034508d7653b41289d55753aeab1" translate="yes" xml:space="preserve">
          <source>Integration#to_param</source>
          <target state="translated">Integration#to_param</target>
        </trans-unit>
        <trans-unit id="ce1fd21e1204581f63416449f6c7edfb967c6d78" translate="yes" xml:space="preserve">
          <source>Integration::ClassMethods</source>
          <target state="translated">Integration::ClassMethods</target>
        </trans-unit>
        <trans-unit id="139e252d29f786121f30f0460e336269c02a8bac" translate="yes" xml:space="preserve">
          <source>Integration::ClassMethods#to_param</source>
          <target state="translated">Integration::ClassMethods#to_param</target>
        </trans-unit>
        <trans-unit id="98b57e9fddf70f7d3e9da54385232a98cebca479" translate="yes" xml:space="preserve">
          <source>IntegrationTest</source>
          <target state="translated">IntegrationTest</target>
        </trans-unit>
        <trans-unit id="ab94e6a337bd2b08d6d1d29161b02030b26df85e" translate="yes" xml:space="preserve">
          <source>Intercepting Emails</source>
          <target state="translated">이메일 차단</target>
        </trans-unit>
        <trans-unit id="173c52fe8d7e7d33649dde7c6d75cc38405db524" translate="yes" xml:space="preserve">
          <source>Intercepting and Observing Emails</source>
          <target state="translated">이메일 가로 채기 및 관찰</target>
        </trans-unit>
        <trans-unit id="ae9bbcda879bd31a484a0af47874a6bab22e1ed5" translate="yes" xml:space="preserve">
          <source>Interceptors allow you to make modifications to emails before they are handed off to the delivery agents. An interceptor class must implement the &lt;code&gt;::delivering_email(message)&lt;/code&gt; method which will be called before the email is sent.</source>
          <target state="translated">인터셉터를 사용하면 이메일이 배달 에이전트에게 전달되기 전에 수정할 수 있습니다. 인터셉터 클래스는 이메일이 전송되기 전에 호출 될 &lt;code&gt;::delivering_email(message)&lt;/code&gt; 메소드를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="342e3231db1c88366814ccab28f7d0434684057a" translate="yes" xml:space="preserve">
          <source>Interceptors allow you to make modifications to emails before they are handed off to the delivery agents. An interceptor class must implement the &lt;code&gt;:delivering_email(message)&lt;/code&gt; method which will be called before the email is sent.</source>
          <target state="translated">인터셉터를 사용하면 이메일을 배달 에이전트에게 전달하기 전에 이메일을 수정할 수 있습니다. 인터셉터 클래스는 이메일이 전송되기 전에 호출 될 &lt;code&gt;:delivering_email(message)&lt;/code&gt; 메소드를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2dfcc4c89dfb267aa18e62e74d6d54f6561f0fc2" translate="yes" xml:space="preserve">
          <source>Interestingly, the exact same view code in the previous example can be used to edit a person. If &lt;code&gt;@person&lt;/code&gt; is an existing record with name &amp;ldquo;John Smith&amp;rdquo; and ID 256, the code above as is would yield instead:</source>
          <target state="translated">흥미롭게도, 앞의 예에서와 동일한 뷰 코드를 사용하여 사람을 편집 할 수 있습니다. &lt;code&gt;@person&lt;/code&gt; 이 이름이&amp;ldquo;John Smith&amp;rdquo;이고 ID 256 인 기존 레코드 인 경우 위 코드는 대신 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="dcc5733b7561d603a93c21562214e0c1d33fb1c8" translate="yes" xml:space="preserve">
          <source>Internal Middleware Stack</source>
          <target state="translated">내부 미들웨어 스택</target>
        </trans-unit>
        <trans-unit id="505d9d0c421453bd1f4ff40309dee285d37725cf" translate="yes" xml:space="preserve">
          <source>Internally symbols are mapped to strings when used as keys in the entire writing interface (calling &lt;code&gt;[]=&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, etc). This mapping belongs to the public interface. For example, given:</source>
          <target state="translated">전체 쓰기 인터페이스에서 키로 사용되는 경우 내부적으로 기호가 문자열에 매핑됩니다 ( &lt;code&gt;[]=&lt;/code&gt; , &lt;code&gt;merge&lt;/code&gt; 등 호출 ). 이 매핑은 공용 인터페이스에 속합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="ec41529ec988c31d48e2791253f7675f0f07663a" translate="yes" xml:space="preserve">
          <source>Internationalization and Localization</source>
          <target state="translated">국제화 및 현지화</target>
        </trans-unit>
        <trans-unit id="c09a9a12334a713ae333766d80dbc7726ba5ddbd" translate="yes" xml:space="preserve">
          <source>Internationalization is a complex problem. Natural languages differ in so many ways (e.g. in pluralization rules) that it is hard to provide tools for solving all problems at once. For that reason the Rails I18n API focuses on:</source>
          <target state="translated">국제화는 복잡한 문제입니다. 자연어는 여러 방식 (예 : 복수화 규칙)이 다르므로 모든 문제를 한 번에 해결하기위한 도구를 제공하기가 어렵습니다. 이러한 이유로 Rails I18n API는 다음에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="5ec77c95171316f9af44f1afebf62f3ac2ca5ee5" translate="yes" xml:space="preserve">
          <source>Interoperability and configuration</source>
          <target state="translated">상호 운용성 및 구성</target>
        </trans-unit>
        <trans-unit id="80feef0d1957adca54e3f9d24dc512572009e68c" translate="yes" xml:space="preserve">
          <source>Interpolation escapes as needed though. For example, given:</source>
          <target state="translated">필요에 따라 보간이 이스케이프됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b70d894eda2fa1027b4f2cc23a1615a878a3cb5f" translate="yes" xml:space="preserve">
          <source>Interpretation of the output of EXPLAIN is beyond the scope of this guide. The following pointers may be helpful:</source>
          <target state="translated">EXPLAIN의 출력에 대한 해석은이 안내서의 범위를 벗어납니다. 다음 포인터가 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1331fd357cb4c48e65a61cb90dbec7b0da4d430b" translate="yes" xml:space="preserve">
          <source>Interpreting EXPLAIN</source>
          <target state="translated">EXPLAIN 해석</target>
        </trans-unit>
        <trans-unit id="438faf6320554999d6e3436c3267791fd96090b3" translate="yes" xml:space="preserve">
          <source>Interprets a file using &lt;code&gt;mechanism&lt;/code&gt; and marks its defined constants as autoloaded. &lt;code&gt;file_name&lt;/code&gt; can be either a string or respond to &lt;code&gt;to_path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mechanism&lt;/code&gt; 사용하여 파일을 해석 하고 정의 된 상수를 자동로드 된 것으로 표시합니다. &lt;code&gt;file_name&lt;/code&gt; 은 문자열이거나 &lt;code&gt;to_path&lt;/code&gt; 에 응답 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="011efcd591019b5969a332a24dff728a8107dbe2" translate="yes" xml:space="preserve">
          <source>Interval</source>
          <target state="translated">Interval</target>
        </trans-unit>
        <trans-unit id="bab1ab6e63418fb60a28315088fc32113592c35b" translate="yes" xml:space="preserve">
          <source>Intranet and Admin Security</source>
          <target state="translated">인트라넷 및 관리자 보안</target>
        </trans-unit>
        <trans-unit id="0a6767b03885ddc439ef17983c2f692c5a07e41e" translate="yes" xml:space="preserve">
          <source>Intranet and administration interfaces are popular attack targets, because they allow privileged access. Although this would require several extra-security measures, the opposite is the case in the real world.</source>
          <target state="translated">인트라넷 및 관리 인터페이스는 권한있는 액세스를 허용하므로 널리 사용되는 공격 대상입니다. 여기에는 몇 가지 추가 보안 조치가 필요하지만 실제로는 그 반대입니다.</target>
        </trans-unit>
        <trans-unit id="1e02c113caf7083037190e94f7f4d29321ba00e9" translate="yes" xml:space="preserve">
          <source>Introducing &lt;a href=&quot;concerning#method-i-concerning&quot;&gt;#concerning&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;concerning#method-i-concerning&quot;&gt;#concerning&lt;/a&gt; 소개</target>
        </trans-unit>
        <trans-unit id="c7d192b525b28dbf34bd94bcd875ed9cc28c7054" translate="yes" xml:space="preserve">
          <source>Introducing &lt;a href=&quot;concerning#method-i-concerning&quot;&gt;&lt;code&gt;Module#concerning&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;concerning#method-i-concerning&quot;&gt; &lt;code&gt;Module#concerning&lt;/code&gt; &lt;/a&gt; 소개</target>
        </trans-unit>
        <trans-unit id="f8ab457bd47803331ebc080bd833f3ee0b9e2d8f" translate="yes" xml:space="preserve">
          <source>Introducing Rack</source>
          <target state="translated">랙 소개</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="b10b45ec08f0b166df0731e9de830720dfa05269" translate="yes" xml:space="preserve">
          <source>Introduction to Rack</source>
          <target state="translated">랙 소개</target>
        </trans-unit>
        <trans-unit id="2dc38a9b87ba3ab2b84c75bf7b0f1b314cde1a6d" translate="yes" xml:space="preserve">
          <source>Introduction to Testing</source>
          <target state="translated">테스트 소개</target>
        </trans-unit>
        <trans-unit id="87d217e986a7a6fcb0d9d6294bb7ea099ed34b8e" translate="yes" xml:space="preserve">
          <source>Introduction to instrumentation</source>
          <target state="translated">계측 소개</target>
        </trans-unit>
        <trans-unit id="cd56babc4fde7c7f6acd80a958c42b65e7e5679b" translate="yes" xml:space="preserve">
          <source>InvalidMatch</source>
          <target state="translated">InvalidMatch</target>
        </trans-unit>
        <trans-unit id="f6d7303488dffe7e3ac8ead1d3fcbd32a701138b" translate="yes" xml:space="preserve">
          <source>Invocation of the tasks will look like:</source>
          <target state="translated">작업 호출은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="58dd409d6a03b715d8a4a7142eeb16c3ce59eda9" translate="yes" xml:space="preserve">
          <source>Invoke a generator based on the value supplied by the user to the given option named &amp;ldquo;name&amp;rdquo;. A class option is created when this method is invoked and you can set a hash to customize it.</source>
          <target state="translated">주어진 이름 &quot;name&quot;에 사용자가 제공 한 값에 따라 생성기를 호출하십시오. 이 메소드가 호출되면 클래스 옵션이 작성되며 해시를 설정하여 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b3a05f5c432f715f0fac2ee75b57be97620fa7a" translate="yes" xml:space="preserve">
          <source>Invoke a method on the connection asynchronously through the pool of thread workers.</source>
          <target state="translated">스레드 워커 풀을 통해 비동기 적으로 연결에서 메소드를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="3ad5366ba531078ac6d163ac3c753ee1d3907e95" translate="yes" xml:space="preserve">
          <source>Invoke the server registered hooks. Check &lt;code&gt;Rails::Railtie.server&lt;/code&gt; for more info.</source>
          <target state="translated">서버 등록 후크를 호출하십시오. 자세한 내용은 &lt;code&gt;Rails::Railtie.server&lt;/code&gt; 를 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="0256c5a56ef3a0bc7ccc3f9ed6d01aea84ad06a9" translate="yes" xml:space="preserve">
          <source>Invokes Journey::Router::Utils.normalize_path and ensure that (:locale) becomes (/:locale) instead of /(:locale). Except for root cases, where the latter is the correct one.</source>
          <target state="translated">Journey :: Router :: Utils.normalize_path를 호출하고 (: locale)이 / (: locale) 대신 (/ : locale)이되도록하십시오. 루트 케이스를 제외하고 후자가 올바른 경우입니다.</target>
        </trans-unit>
        <trans-unit id="dd0dd55a6d95ecc47868b96b36290bdfad0559b1" translate="yes" xml:space="preserve">
          <source>Invokes Journey::Router::Utils.normalize_path, then ensures that /(:locale) becomes (/:locale). Except for root cases, where the former is the correct one.</source>
          <target state="translated">Journey :: Router :: Utils.normalize_path를 호출 한 다음 / (: locale)이 (/ : locale)이되도록합니다. 전자가 올바른 루트 케이스를 제외하고.</target>
        </trans-unit>
        <trans-unit id="385202a85d41f1ba93fb6a0880e136ee611817eb" translate="yes" xml:space="preserve">
          <source>Invokes the public method whose name goes as first argument just like &lt;code&gt;public_send&lt;/code&gt; does, except that if the receiver does not respond to it the call returns &lt;code&gt;nil&lt;/code&gt; rather than raising an exception.</source>
          <target state="translated">수신자가 응답하지 않으면 호출 이 예외를 발생시키지 않고 &lt;code&gt;nil&lt;/code&gt; 을 리턴한다는 점을 제외하고는 &lt;code&gt;public_send&lt;/code&gt; 처럼 이름이 첫 번째 인수로 사용되는 public 메소드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="59e5020714711541b39a9551f5b84853e831134e" translate="yes" xml:space="preserve">
          <source>Irreversible transformations</source>
          <target state="translated">돌이킬 수없는 변환</target>
        </trans-unit>
        <trans-unit id="2f766b312d7e667b7f0d8b9c17bb303b08b1acae" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;new_name&lt;/code&gt; an alias?</source>
          <target state="translated">가 &lt;code&gt;new_name&lt;/code&gt; 별명?</target>
        </trans-unit>
        <trans-unit id="b0eda3fd7457c0fb4308b75d0bf6df3d4719aced" translate="yes" xml:space="preserve">
          <source>Is equivalent to:</source>
          <target state="translated">다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4bccdd2795f3378d91b39fbc9d59c69a50b7194f" translate="yes" xml:space="preserve">
          <source>Is it a &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;&lt;code&gt;belongs_to&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;&lt;code&gt;has_one&lt;/code&gt;&lt;/a&gt; association?</source>
          <target state="translated">그것은이다 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt; &lt;code&gt;belongs_to&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt; &lt;code&gt;has_one&lt;/code&gt; &lt;/a&gt; 관계?</target>
        </trans-unit>
        <trans-unit id="46fb94424bf8f10921609b59625d794e12d26b07" translate="yes" xml:space="preserve">
          <source>Is it a &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; or &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; association?</source>
          <target state="translated">그것은이다 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; 또는 &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; 관계?</target>
        </trans-unit>
        <trans-unit id="7aee814e5e7b7c81d49f7ba52ab62790c23d34e6" translate="yes" xml:space="preserve">
          <source>Is it a GET or HEAD request? GETs should be safe and idempotent</source>
          <target state="translated">GET 또는 HEAD 요청입니까? GET은 안전하고 dem 등이어야합니다</target>
        </trans-unit>
        <trans-unit id="a559a239bb82de0629bcb6a428aeb5fd89db0826" translate="yes" xml:space="preserve">
          <source>Is the same as:</source>
          <target state="translated">와 같다:</target>
        </trans-unit>
        <trans-unit id="0e468c5ec10bbeae8ac268222bf3b1cefef440a5" translate="yes" xml:space="preserve">
          <source>Is this connection alive and ready for queries?</source>
          <target state="translated">이 연결이 활성화되어 있고 쿼리 준비가 되셨습니까?</target>
        </trans-unit>
        <trans-unit id="eac6c893607e2948d6e48939779ac243770bf603" translate="yes" xml:space="preserve">
          <source>Isolated &lt;a href=&quot;engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">격리 된 &lt;a href=&quot;engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76655109a5cf36c486e596d85b9959d33081cbb3" translate="yes" xml:space="preserve">
          <source>Isolated &lt;a href=&quot;engine&quot;&gt;Engine&lt;/a&gt;</source>
          <target state="translated">고립 된 &lt;a href=&quot;engine&quot;&gt;엔진&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f451fdf2858ac5e97eb02d93dd74df99d36099e" translate="yes" xml:space="preserve">
          <source>Isolated engine's helpers</source>
          <target state="translated">고립 된 엔진의 도우미</target>
        </trans-unit>
        <trans-unit id="7ac5f519b4cd0a9c673a2b984a399a3a92c58140" translate="yes" xml:space="preserve">
          <source>It accepts a hash where the key is the symbol of the MIME type and the value is a proc.</source>
          <target state="translated">키가 MIME 유형의 기호이고 값이 proc 인 해시를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="4a6fae6667f1ec35b8e1214e1089d2257fc09809" translate="yes" xml:space="preserve">
          <source>It accepts a headers hash. This hash allows you to specify the most used headers in an email message, these are:</source>
          <target state="translated">헤더 해시를 허용합니다. 이 해시를 사용하면 전자 메일 메시지에서 가장 많이 사용되는 헤더를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5f0f4cf85fc4819613826afbcfe7f04f25a0738" translate="yes" xml:space="preserve">
          <source>It accepts two parameters on initialization. The first is a version of library and the second is a library name.</source>
          <target state="translated">초기화시 두 개의 매개 변수를 승인합니다. 첫 번째는 라이브러리의 버전이고 두 번째는 라이브러리 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9435a5a3fea1387cba916e7fc9c284d2e6dfd894" translate="yes" xml:space="preserve">
          <source>It accepts two parameters on initialization. The first is an array of files and the second is an optional hash of directories. The hash must have directories as keys and the value is an array of extensions to be watched under that directory.</source>
          <target state="translated">초기화시 두 개의 매개 변수를 승인합니다. 첫 번째는 파일 배열이고 두 번째는 선택적 디렉토리 해시입니다. 해시는 디렉토리를 키로 가져야하며 값은 해당 디렉토리에서 감시 할 확장 배열입니다.</target>
        </trans-unit>
        <trans-unit id="45d44b1df6715c7a7af6333949ec087808a70c28" translate="yes" xml:space="preserve">
          <source>It allows you to call method &lt;a href=&quot;renderer#method-i-render&quot;&gt;&lt;code&gt;render&lt;/code&gt;&lt;/a&gt; directly.</source>
          <target state="translated">&lt;a href=&quot;renderer#method-i-render&quot;&gt; &lt;code&gt;render&lt;/code&gt; &lt;/a&gt; 메서드를 직접 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38ca25bcf2c0905e02178cd352066c0836a6a9a0" translate="yes" xml:space="preserve">
          <source>It allows you to call method &lt;a href=&quot;renderer#method-i-render&quot;&gt;render&lt;/a&gt; directly.</source>
          <target state="translated">메소드 &lt;a href=&quot;renderer#method-i-render&quot;&gt;렌더를&lt;/a&gt; 직접 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d49d2a57a5a1ca8b7ea86511d458060ee225f77d" translate="yes" xml:space="preserve">
          <source>It also allows you to update the avatar through the member:</source>
          <target state="translated">또한 멤버를 통해 아바타를 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebc0f9ba57056697e4de8afcfef4be20a0ad3303" translate="yes" xml:space="preserve">
          <source>It also generated some lines in our &lt;code&gt;database.yml&lt;/code&gt; configuration corresponding to our choice of PostgreSQL for database.</source>
          <target state="translated">또한 &lt;code&gt;database.yml&lt;/code&gt; 대한 PostgreSQL의 선택에 해당하는 database.yml 구성 에서 일부 행을 생성했습니다 .</target>
        </trans-unit>
        <trans-unit id="39146458b45b3abeec98952f595c4cf5f503332e" translate="yes" xml:space="preserve">
          <source>It also gives you the ability to initialize an object with a hash of attributes, much like any Active Record object.</source>
          <target state="translated">또한 Active Record 객체와 마찬가지로 속성 해시로 객체를 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd0ee1da8322e4399bcac48a328b9839193f1124" translate="yes" xml:space="preserve">
          <source>It also searches for a key specific to the given object:</source>
          <target state="translated">또한 주어진 객체에 특정한 키를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="cfedffa8e710bb3bffa6f731ec1bf9d845f19fbc" translate="yes" xml:space="preserve">
          <source>It also strips href/src attributes with unsafe protocols like &lt;code&gt;javascript:&lt;/code&gt;, while also protecting against attempts to use Unicode, ASCII, and hex character references to work around these protocol filters. All special characters will be escaped.</source>
          <target state="translated">또한 &lt;code&gt;javascript:&lt;/code&gt; 와 같은 안전하지 않은 프로토콜로 href / src 속성을 제거 하고 이러한 프로토콜 필터를 해결하기 위해 유니 코드, ASCII 및 16 진 문자 참조를 사용하려는 시도를 방지합니다. 모든 특수 문자가 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="426c108419ecab367f3cf08cecf90bf1479d10f5" translate="yes" xml:space="preserve">
          <source>It can also be used to return exceptional conditions:</source>
          <target state="translated">예외적 인 조건을 반환하는 데에도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9316df6dbeb2297de41526f9b627ebdbe698b986" translate="yes" xml:space="preserve">
          <source>It can also be used with an explicit receiver:</source>
          <target state="translated">명시 적 리시버와 함께 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6dba1fa6506ff89cb1689631b83474c09424753e" translate="yes" xml:space="preserve">
          <source>It can also be useful to save information to log files at runtime. Rails maintains a separate log file for each runtime environment.</source>
          <target state="translated">런타임시 정보를 로그 파일에 저장하는 것도 유용 할 수 있습니다. Rails는 각 런타임 환경에 대해 별도의 로그 파일을 유지 관리합니다.</target>
        </trans-unit>
        <trans-unit id="2831d4f1ce96a57796267468ca626023eda9252e" translate="yes" xml:space="preserve">
          <source>It can also calculate the sum without the use of a block.</source>
          <target state="translated">블록을 사용하지 않고 합계를 계산할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="7687f2339942576b33eabc229b67923feb868d9f" translate="yes" xml:space="preserve">
          <source>It can also receive an &lt;code&gt;:accept&lt;/code&gt; option, which determines the allowed values that will be considered as accepted. It defaults to &lt;code&gt;['1', true]&lt;/code&gt; and can be easily changed.</source>
          <target state="translated">허용되는 것으로 간주되는 허용되는 값을 결정 하는 &lt;code&gt;:accept&lt;/code&gt; 옵션 도받을 수 있습니다 . 기본값은 &lt;code&gt;['1', true]&lt;/code&gt; 이며 쉽게 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a234c9c580ec73225fe07a2b2cb15c5278679324" translate="yes" xml:space="preserve">
          <source>It can also validate whether the value of the specified attributes are unique based on a &lt;code&gt;:scope&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;:scope&lt;/code&gt; 매개 변수를 기반으로 지정된 속성 값이 고유한지 여부를 확인할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="40a7b1d9d8a7cd76b12428401930bc5065694c8d" translate="yes" xml:space="preserve">
          <source>It can be used along with &lt;code&gt;belongs_to&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; 와 함께 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="22e1c7f72b5a3c73c0cb68a4bbb7d3c44ef4b893" translate="yes" xml:space="preserve">
          <source>It can be used as follow:</source>
          <target state="translated">다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd8e399f3585248f5db85e7a07a982ef55fb80c9" translate="yes" xml:space="preserve">
          <source>It can be useful to access the class that is using that validator when there are prerequisites such as an &lt;code&gt;attr_accessor&lt;/code&gt; being present. This class is accessible via &lt;code&gt;options[:class]&lt;/code&gt; in the constructor. To set up your validator override the constructor.</source>
          <target state="translated">&lt;code&gt;attr_accessor&lt;/code&gt; 와 같은 전제 조건이있는 경우 해당 유효성 검사기를 사용하는 클래스에 액세스하는 것이 유용 할 수 있습니다 . 이 클래스는 생성자의 &lt;code&gt;options[:class]&lt;/code&gt; 를 통해 액세스 할 수 있습니다 . 유효성 검사기를 설정하려면 생성자를 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="1ac0a20ef283df4adc7e264352fcf154710271f2" translate="yes" xml:space="preserve">
          <source>It can be useful to access the class that is using that validator when there are prerequisites such as an &lt;code&gt;attr_accessor&lt;/code&gt; being present. This class is accessible via &lt;code&gt;options[:class]&lt;/code&gt; in the constructor. To setup your validator override the constructor.</source>
          <target state="translated">&lt;code&gt;attr_accessor&lt;/code&gt; 와 같은 전제 조건이있는 경우 해당 유효성 검증기를 사용하는 클래스에 액세스하는 것이 유용 할 수 있습니다 . 이 클래스는 생성자의 &lt;code&gt;options[:class]&lt;/code&gt; 를 통해 액세스 할 수 있습니다 . 유효성 검사기를 설정하려면 생성자를 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="96a8cf569167573398933897b23ace80840cc711" translate="yes" xml:space="preserve">
          <source>It could be the case that some particular file or directory name does not get inflected as you want. For instance, &lt;code&gt;html_parser.rb&lt;/code&gt; is expected to define &lt;code&gt;HtmlParser&lt;/code&gt; by default. What if you prefer the class to be &lt;code&gt;HTMLParser&lt;/code&gt;? There are a few ways to customize this.</source>
          <target state="translated">특정 파일 또는 디렉토리 이름이 원하는대로 변경되지 않는 경우 일 수 있습니다. 예를 들어, &lt;code&gt;html_parser.rb&lt;/code&gt; 는 기본적으로 &lt;code&gt;HtmlParser&lt;/code&gt; 를 정의 할 것으로 예상됩니다 . 클래스를 &lt;code&gt;HTMLParser&lt;/code&gt; 로 선호한다면 어떨까요? 이를 사용자 정의하는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="71ab59b1e35929a8594e36b0ef1ec13b4b68d49a" translate="yes" xml:space="preserve">
          <source>It creates and returns an instance of the &lt;a href=&quot;activesupport/multibyte/chars&quot;&gt;&lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt;&lt;/a&gt; class which encapsulates the original string. A Unicode safe version of all the &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; methods are defined on this proxy class. If the proxy class doesn't respond to a certain method, it's forwarded to the encapsulated string.</source>
          <target state="translated">원래 문자열을 캡슐화하는 &lt;a href=&quot;activesupport/multibyte/chars&quot;&gt; &lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt; &lt;/a&gt; 클래스 의 인스턴스를 만들고 반환 합니다. 모든 &lt;a href=&quot;string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 메서드 의 유니 코드 안전 버전 이이 프록시 클래스에 정의되어 있습니다. 프록시 클래스가 특정 메서드에 응답하지 않으면 캡슐화 된 문자열로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="49b4aa175d14125482748aa613908101aa82e8b5" translate="yes" xml:space="preserve">
          <source>It creates and returns an instance of the &lt;a href=&quot;activesupport/multibyte/chars&quot;&gt;ActiveSupport::Multibyte::Chars&lt;/a&gt; class which encapsulates the original string. A Unicode safe version of all the &lt;a href=&quot;string&quot;&gt;String&lt;/a&gt; methods are defined on this proxy class. If the proxy class doesn't respond to a certain method, it's forwarded to the encapsulated string.</source>
          <target state="translated">원래 문자열을 캡슐화하는 &lt;a href=&quot;activesupport/multibyte/chars&quot;&gt;ActiveSupport :: Multibyte :: Chars&lt;/a&gt; 클래스 의 인스턴스를 만들고 반환 합니다. 모든 &lt;a href=&quot;string&quot;&gt;String&lt;/a&gt; 메소드 의 유니 코드 안전 버전 이이 프록시 클래스에 정의되어 있습니다. 프록시 클래스가 특정 메소드에 응답하지 않으면 캡슐화 된 문자열로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="499cc07feea969499a3dc48ed2492713c8c86211" translate="yes" xml:space="preserve">
          <source>It does not call &lt;code&gt;to_a&lt;/code&gt; on the argument, if the argument does not respond to &lt;code&gt;to_ary&lt;/code&gt; it returns an array with the argument as its single element.</source>
          <target state="translated">인수에서 &lt;code&gt;to_a&lt;/code&gt; 를 호출하지 않습니다 . 인수가 &lt;code&gt;to_ary&lt;/code&gt; 에 응답하지 않으면 인수가 단일 요소 인 배열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="56b4d8dc1bf62dfda767cc7b994335d9456a43bf" translate="yes" xml:space="preserve">
          <source>It intends to prevent odd bugs and confusion in code that call mutator methods directly on the &lt;code&gt;Relation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Relation&lt;/code&gt; 직접 뮤 테이터 메소드를 호출하는 코드에서 이상한 버그와 혼동을 막으려 고합니다 .</target>
        </trans-unit>
        <trans-unit id="5d5c5b84f1606def2d58f9fb00f6b5f36fadaeab" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;highly&lt;/strong&gt; recommended that the &lt;code&gt;isolate_namespace&lt;/code&gt; line be left within the &lt;code&gt;Engine&lt;/code&gt; class definition. Without it, classes generated in an engine &lt;strong&gt;may&lt;/strong&gt; conflict with an application.</source>
          <target state="translated">되어 &lt;strong&gt;매우&lt;/strong&gt; 하는 것이 좋습니다 &lt;code&gt;isolate_namespace&lt;/code&gt; 의 라인이 내에 남아있을 &lt;code&gt;Engine&lt;/code&gt; 클래스 정의. &lt;strong&gt;그렇지&lt;/strong&gt; 않으면 엔진에서 생성 된 클래스 가 응용 프로그램과 충돌 &lt;strong&gt;할 수 있습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="10cfb379bf3244a1c48de6cb1cda23ec4480ebb5" translate="yes" xml:space="preserve">
          <source>It is accessed in much the same way as the session, as a hash (it's a &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Flash/FlashHash.html&quot;&gt;FlashHash&lt;/a&gt; instance).</source>
          <target state="translated">세션과 거의 같은 방식으로 해시 ( &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Flash/FlashHash.html&quot;&gt;FlashHash&lt;/a&gt; 인스턴스)로 액세스됩니다.</target>
        </trans-unit>
        <trans-unit id="83efac2576f2e3cca18100e7aee4b5a47479b098" translate="yes" xml:space="preserve">
          <source>It is also important to use different salt values for encrypted and signed cookies. Using the same value for different salt configuration values may lead to the same derived key being used for different security features which in turn may weaken the strength of the key.</source>
          <target state="translated">암호화 및 서명 된 쿠키에 다른 솔트 값을 사용하는 것도 중요합니다. 다른 솔트 구성 값에 동일한 값을 사용하면 다른 보안 기능에 동일한 파생 키가 사용되어 키의 강도가 약해질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd5336404614ecb4acce82c4ff85169b0e93d510" translate="yes" xml:space="preserve">
          <source>It is also possible to assign a flash message as part of the redirection. There are two special accessors for the commonly used flash names &lt;code&gt;alert&lt;/code&gt; and &lt;code&gt;notice&lt;/code&gt; as well as a general purpose &lt;code&gt;flash&lt;/code&gt; bucket.</source>
          <target state="translated">리디렉션의 일부로 플래시 메시지를 할당 할 수도 있습니다. 일반적으로 사용되는 플래시 이름에 대한 두 가지 특별한 접근이 있습니다 &lt;code&gt;alert&lt;/code&gt; 및 &lt;code&gt;notice&lt;/code&gt; 뿐만 아니라 범용 &lt;code&gt;flash&lt;/code&gt; 버킷.</target>
        </trans-unit>
        <trans-unit id="179fe87c22bf5b6c89ee355df0482f9dc84a0da7" translate="yes" xml:space="preserve">
          <source>It is also possible to automatically disable an input while the form is submitting by using the &lt;code&gt;data-disable-with&lt;/code&gt; attribute. This is to prevent accidental double-clicks from the user, which could result in duplicate HTTP requests that the backend may not detect as such. The value of the attribute is the text that will become the new value of the button in its disabled state.</source>
          <target state="translated">&lt;code&gt;data-disable-with&lt;/code&gt; 속성 을 사용하여 양식을 제출하는 동안 입력을 자동으로 비활성화 할 수도 있습니다 . 이는 사용자가 실수로 두 번 클릭하는 것을 방지하기 위해 백엔드가 감지하지 못하는 HTTP 요청이 중복 될 수 있습니다. 속성 값은 비활성화 된 상태에서 버튼의 새로운 값이 될 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="348a45df3c04b6d5fe9c86d061104b62e5b62d75" translate="yes" xml:space="preserve">
          <source>It is also possible to customize the way the elements will be shown by giving a block to the method:</source>
          <target state="translated">메소드에 블록을 제공하여 요소가 표시되는 방식을 사용자 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e55d2ed2495603dfd9e5fa2fc9d52ef7987d08b" translate="yes" xml:space="preserve">
          <source>It is also possible to define the Ajax &lt;code&gt;dataType&lt;/code&gt; explicitly while performing requests for &lt;code&gt;data-remote&lt;/code&gt; elements, by way of the &lt;code&gt;data-type&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;data-type&lt;/code&gt; 속성 을 통해 data- &lt;code&gt;data-remote&lt;/code&gt; 요소에 대한 요청을 수행하는 동안 Ajax &lt;code&gt;dataType&lt;/code&gt; 을 명시 적으로 정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="819fc44ec9ef18718e13d598795b20fdc7e69280" translate="yes" xml:space="preserve">
          <source>It is also possible to limit the uniqueness constraint to a set of records matching certain conditions. In this example archived articles are not being taken into consideration when validating uniqueness of the title attribute:</source>
          <target state="translated">고유성 제약 조건을 특정 조건과 일치하는 레코드 세트로 제한 할 수도 있습니다. 이 예제에서 제목 속성의 고유성을 검증 할 때 아카이브 된 기사를 고려하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a985124ab3a30ac2f740ba2e729b65433dd15f7c" translate="yes" xml:space="preserve">
          <source>It is also possible to pass a custom serializer that responds to &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; 및 &lt;code&gt;dump&lt;/code&gt; 응답하는 사용자 정의 직렬 변환기를 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d7a775c2c33dca7d2800bfafa6f196f92f27191d" translate="yes" xml:space="preserve">
          <source>It is also possible to pass an object which responds to &lt;code&gt;call&lt;/code&gt; method as the second parameter to the &lt;code&gt;subscribe&lt;/code&gt; method instead of a block:</source>
          <target state="translated">블록 대신 두 번째 매개 변수로 &lt;code&gt;call&lt;/code&gt; 메소드에 응답하는 오브젝트를 &lt;code&gt;subscribe&lt;/code&gt; 메소드 에 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="18abb3beeb3bf6cdf55d0d1bc4bfefab51a336a9" translate="yes" xml:space="preserve">
          <source>It is also possible to set a default host that will be used in all mailers by setting the &lt;code&gt;:host&lt;/code&gt; option as a configuration option in &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; 에서 &lt;code&gt;:host&lt;/code&gt; 옵션을 구성 옵션으로 설정하여 모든 메일러에서 사용될 기본 호스트를 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ab7cb2d57cb049b703f4721d525abf15854caa6a" translate="yes" xml:space="preserve">
          <source>It is also possible to set these default options that will be used in all mailers through the &lt;code&gt;default_options=&lt;/code&gt; configuration in &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; 의 &lt;code&gt;default_options=&lt;/code&gt; 구성을 통해 모든 메일러에서 사용될 기본 옵션을 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7b781e4a3aafdb190e8c24f4f3c6f103c1f5c3b3" translate="yes" xml:space="preserve">
          <source>It is also possible to supply a custom prefix.</source>
          <target state="translated">사용자 정의 접두사를 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="217db1c91aa9f1200c2f9bc48daada017d477db5" translate="yes" xml:space="preserve">
          <source>It is beyond the scope of this guide to document Ruby constants, but we are nevertheless going to highlight a few key topics. Truly grasping the following sections is instrumental to understanding constant autoloading and reloading.</source>
          <target state="translated">루비 상수를 문서화하는 것은이 안내서의 범위를 벗어나지 만 그럼에도 불구하고 우리는 몇 가지 주요 주제를 강조 할 것입니다. 다음 섹션을 정확히 파악하면 지속적인 자동 로딩 및 다시 로딩을 이해하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="3258883b4eb20fb13831be19bf566b5526debab3" translate="yes" xml:space="preserve">
          <source>It is beyond the scope of this guide to inform you on how to secure your application code and environments. However, please secure your database configuration, e.g. &lt;code&gt;config/database.yml&lt;/code&gt;, master key for &lt;code&gt;credentials.yml&lt;/code&gt;, and other unencrypted secrets. You may want to further restrict access, using environment-specific versions of these files and any others that may contain sensitive information.</source>
          <target state="translated">응용 프로그램 코드 및 환경을 보호하는 방법에 대한 정보는이 안내서의 범위를 벗어납니다. 그러나 데이터베이스 구성 (예 : &lt;code&gt;config/database.yml&lt;/code&gt; , &lt;code&gt;credentials.yml&lt;/code&gt; 의 마스터 키 및 기타 암호화되지 않은 비밀)을 보호하십시오. 이러한 파일의 환경 별 버전 및 중요한 정보가 포함 된 다른 파일을 사용하여 액세스를 추가로 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fe4130ab4ee095a6deeb9892cd4088476f03a76" translate="yes" xml:space="preserve">
          <source>It is common to use persistent cookies to store user information, with &lt;code&gt;cookies.permanent&lt;/code&gt; for example. In this case, the cookies will not be cleared and the out of the box CSRF protection will not be effective. If you are using a different cookie store than the session for this information, you must handle what to do with it yourself:</source>
          <target state="translated">예를 들어 &lt;code&gt;cookies.permanent&lt;/code&gt; 와 같이 영구 쿠키를 사용하여 사용자 정보를 저장하는 것이 일반적 입니다. 이 경우 쿠키가 지워지지 않으며 즉시 사용 가능한 CSRF 보호 기능이 적용되지 않습니다. 이 정보에 대해 세션과 다른 쿠키 저장소를 사용하는 경우 직접 쿠키로 수행 할 작업을 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="f9341cff4e30114860c81d61ae45c3c73d6ae1c7" translate="yes" xml:space="preserve">
          <source>It is considered good practice to declare callback methods as private. If left public, they can be called from outside of the model and violate the principle of object encapsulation.</source>
          <target state="translated">콜백 메소드를 개인으로 선언하는 것이 좋습니다. 공개 된 경우 모델 외부에서 호출하여 객체 캡슐화 원칙을 위반할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43a011e67c6ead698c933aa355ff5673de5432b5" translate="yes" xml:space="preserve">
          <source>It is equivalent to writing:</source>
          <target state="translated">다음과 같이 쓰는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="01ba04d8b437042468e0c2c09742be51208f176a" translate="yes" xml:space="preserve">
          <source>It is generally safe to exclude XHR requests from CSRF protection (like the code snippet above does), because XHR requests can only be made from the same origin. Note however that any cross-origin third party domain allowed via &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt; will also be able to create XHR requests. Be sure to check your CORS configuration before disabling forgery protection for XHR.</source>
          <target state="translated">XHR 요청은 동일한 출처에서만 이루어질 수 있기 때문에 CSRF 보호에서 XHR 요청을 제외하는 것이 일반적으로 안전합니다 (위의 코드 조각과 동일). 그러나 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt; 를 통해 허용되는 출처 간 타사 도메인 도 XHR 요청을 생성 할 수 있습니다. XHR에 대한 위조 방지 기능을 비활성화하기 전에 CORS 구성을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a207a505579df11ef014f66a20f5d9cf4698ae30" translate="yes" xml:space="preserve">
          <source>It is important that this folder is shared between deployments so that remotely cached pages referencing the old compiled assets still work for the life of the cached page.</source>
          <target state="translated">이전에 컴파일 된 자산을 참조하는 원격 캐시 된 페이지가 여전히 캐시 된 페이지의 수명 동안 작동하도록 배치간에이 폴더를 공유해야합니다.</target>
        </trans-unit>
        <trans-unit id="dda9f7c4cb278191f2fd04c7db508eb24b9287cd" translate="yes" xml:space="preserve">
          <source>It is important to note that files you want to reference outside a manifest must be added to the precompile array or they will not be available in the production environment.</source>
          <target state="translated">매니페스트 외부에서 참조하려는 파일은 사전 컴파일 배열에 추가해야합니다. 그렇지 않으면 프로덕션 환경에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="525c4700d9b0c161a634194efc57c56e14f975ce" translate="yes" xml:space="preserve">
          <source>It is important to notice that the actual crafted image or link doesn't necessarily have to be situated in the web application's domain, it can be anywhere - in a forum, blog post, or email.</source>
          <target state="translated">실제 제작 된 이미지 나 링크가 반드시 웹 응용 프로그램의 도메인에있을 필요는 없으며 포럼, 블로그 게시물 또는 전자 메일의 어느 곳에 나있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a753c2dcf80c811ac30d16c0dda03089e7018f95" translate="yes" xml:space="preserve">
          <source>It is important to understand that &lt;code&gt;html_safe&lt;/code&gt; performs no escaping whatsoever, it is just an assertion:</source>
          <target state="translated">&lt;code&gt;html_safe&lt;/code&gt; 가 이스케이프를 수행하지 않는다는 것을 이해하는 것이 중요합니다. 단 어설 션일뿐입니다.</target>
        </trans-unit>
        <trans-unit id="d55e0a0d2aac8db229502f8ef70a2140d1f09635" translate="yes" xml:space="preserve">
          <source>It is important to understand that the nesting is composed of class and module &lt;em&gt;objects&lt;/em&gt;, it has nothing to do with the constants used to access them, and is also unrelated to their names.</source>
          <target state="translated">중첩은 클래스 및 모듈 &lt;em&gt;객체&lt;/em&gt; 로 구성 되며 액세스하는 데 사용되는 상수와 관련이 없으며 이름과 관련이 없다는 것을 이해하는 것이 중요 합니다.</target>
        </trans-unit>
        <trans-unit id="41efcacaf212ba9a4488f51d99b234f2f8337edd" translate="yes" xml:space="preserve">
          <source>It is interesting to observe that blocks do not modify the stack. In particular the blocks that may be passed to &lt;code&gt;Class.new&lt;/code&gt; and &lt;code&gt;Module.new&lt;/code&gt; do not get the class or module being defined pushed to their nesting. That's one of the differences between defining classes and modules in one way or another.</source>
          <target state="translated">블록이 스택을 수정하지 않는 것을 관찰하는 것이 흥미 롭습니다. 특히 &lt;code&gt;Class.new&lt;/code&gt; 및 &lt;code&gt;Module.new&lt;/code&gt; 에 전달 될 수있는 블록 은 정의중인 클래스 또는 모듈을 중첩으로 푸시하지 않습니다. 그것은 클래스와 모듈을 어떤 식 으로든 정의하는 것의 차이점 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="941e591857cdf0d45804c6c106a3821ade8d5bf6" translate="yes" xml:space="preserve">
          <source>It is necessary to &lt;code&gt;raw&lt;/code&gt; the result of &lt;code&gt;json_escape&lt;/code&gt;, so that quotation marks don't get converted to &lt;code&gt;&amp;amp;quot;&lt;/code&gt; entities. &lt;code&gt;json_escape&lt;/code&gt; doesn't automatically flag the result as HTML safe, since the raw value is unsafe to use inside HTML attributes.</source>
          <target state="translated">따옴표가 &lt;code&gt;&amp;amp;quot;&lt;/code&gt; 로 변환되지 않도록 &lt;code&gt;json_escape&lt;/code&gt; 의 결과 를 &lt;code&gt;raw&lt;/code&gt; 로 변환해야합니다 . 엔티티. 원시 값이 HTML 속성 내에서 사용하기에 안전하지 않기 때문에 &lt;code&gt;json_escape&lt;/code&gt; 는 결과를 HTML 안전으로 자동 플래그 지정 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="59035bb25168789f781c7f9fcd3e7e21efa80ace" translate="yes" xml:space="preserve">
          <source>It is not necessary to pass all the attributes to &lt;code&gt;update&lt;/code&gt;. For example, if &lt;code&gt;@article.update(title: 'A new title')&lt;/code&gt; was called, Rails would only update the &lt;code&gt;title&lt;/code&gt; attribute, leaving all other attributes untouched.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 할 모든 속성을 전달할 필요는 없습니다 . 예를 들어, &lt;code&gt;@article.update(title: 'A new title')&lt;/code&gt; 을 호출하면 Rails는 &lt;code&gt;title&lt;/code&gt; 속성 만 업데이트하고 다른 모든 속성은 그대로 유지합니다.</target>
        </trans-unit>
        <trans-unit id="93598eff3d787ca530523d68e5e3b68468b4d0d0" translate="yes" xml:space="preserve">
          <source>It is not recommended that you stream static files through Rails if you can instead keep them in a public folder on your web server. It is much more efficient to let the user download the file directly using Apache or another web server, keeping the request from unnecessarily going through the whole Rails stack.</source>
          <target state="translated">정적 파일을 웹 서버의 공용 폴더에 보관할 수 있으면 Rails를 통해 정적 파일을 스트리밍하지 않는 것이 좋습니다. 사용자가 Apache 또는 다른 웹 서버를 사용하여 직접 파일을 직접 다운로드하여 요청이 불필요하게 전체 Rails 스택을 거치지 않도록하는 것이 훨씬 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="d015ad73b3672fc5748a09b49d6df746aa38bf26" translate="yes" xml:space="preserve">
          <source>It is not recommended to use this method in a request since it does not yield to a block like `connected_to`.</source>
          <target state="translated">이 메서드는`connected_to`와 같은 블록에 양보하지 않으므로 요청에 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e88432ee04e64b5f3195b709467ab625a7694aa3" translate="yes" xml:space="preserve">
          <source>It is often useful to ignore sets of fields that the user has not filled in. You can control this by passing a &lt;code&gt;:reject_if&lt;/code&gt; proc to &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;. This proc will be called with each hash of attributes submitted by the form. If the proc returns &lt;code&gt;false&lt;/code&gt; then Active Record will not build an associated object for that hash. The example below only tries to build an address if the &lt;code&gt;kind&lt;/code&gt; attribute is set.</source>
          <target state="translated">사용자가 입력하지 않은 필드 세트를 무시하는 것이 유용한 경우가 많습니다. &lt;code&gt;:reject_if&lt;/code&gt; proc를 &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; 에 전달하여이를 제어 할 수 있습니다 . 이 proc은 폼이 제출 한 속성의 각 해시와 함께 호출됩니다. proc가 &lt;code&gt;false&lt;/code&gt; 를 반환 하면 Active Record는 해당 해시에 대한 관련 개체를 작성하지 않습니다. 아래 예제는 &lt;code&gt;kind&lt;/code&gt; 속성이 설정된 경우에만 주소를 작성하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="359dd26ed4325027fc03a54808e8ea6356971976" translate="yes" xml:space="preserve">
          <source>It is only soft-deprecated, which means that your code will not break at the moment and no deprecation warning will be displayed, but this constant will be removed in the future.</source>
          <target state="translated">더 이상 사용되지 않으므로 코드가 현재 중단되지 않으며 사용 중단 경고가 표시되지 않지만 앞으로는이 상수가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="4562ca89794a86c1f1a7abdb14c2b0bf7874f843" translate="yes" xml:space="preserve">
          <source>It is possible to associate &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Proc&lt;/code&gt; object which will be called. Using a &lt;code&gt;Proc&lt;/code&gt; object gives you the ability to write an inline condition instead of a separate method. This option is best suited for one-liners.</source>
          <target state="translated">호출 될 &lt;code&gt;Proc&lt;/code&gt; 객체 와 함께 &lt;code&gt;:if&lt;/code&gt; 및 &lt;code&gt;:unless&lt;/code&gt; 를 연결할 수 있습니다. 사용 &lt;code&gt;Proc&lt;/code&gt; 객체 당신에게 별도의 방법 대신 인라인 상태를 기록 할 수있는 기능을 제공합니다. 이 옵션은 단일 라이너에 가장 적합합니다.</target>
        </trans-unit>
        <trans-unit id="cf776ffebf1af8bc2d942f750e9a51092414860e" translate="yes" xml:space="preserve">
          <source>It is possible to associate &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Proc&lt;/code&gt; object. This option is best suited when writing short validation methods, usually one-liners:</source>
          <target state="translated">&lt;code&gt;:if&lt;/code&gt; 및 &lt;code&gt;:unless&lt;/code&gt; &lt;code&gt;Proc&lt;/code&gt; 오브젝트 와 연관시킬 수 없습니다 . 이 옵션은 짧은 유효성 검사 방법 (일반적으로 한 줄짜리)을 작성할 때 가장 적합합니다.</target>
        </trans-unit>
        <trans-unit id="94c0520a8d6f229af5d1702cf7d9bb86be3a506e" translate="yes" xml:space="preserve">
          <source>It is possible to customize the behavior of elements with a &lt;code&gt;data-remote&lt;/code&gt; attribute without writing a line of JavaScript. You can specify extra &lt;code&gt;data-&lt;/code&gt; attributes to accomplish this.</source>
          <target state="translated">JavaScript 라인을 작성하지 않고도 &lt;code&gt;data-remote&lt;/code&gt; 속성을 사용하여 요소의 동작을 사용자 정의 할 수 있습니다 . 이를 위해 추가 &lt;code&gt;data-&lt;/code&gt; 속성을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5fdb819e34d79e2af13d3f5739becece3367eef9" translate="yes" xml:space="preserve">
          <source>It is possible to return to old behavior and disable &lt;code&gt;deep_munge&lt;/code&gt; configuring your application if you are aware of the risk and know how to handle it:</source>
          <target state="translated">위험을 알고 처리 방법을 알고있는 경우 이전 동작으로 돌아가서 애플리케이션을 구성하는 &lt;code&gt;deep_munge&lt;/code&gt; 를 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c699de2f3bdf654ecdd4536b61685dc7cafc0885" translate="yes" xml:space="preserve">
          <source>It is possible to send email to one or more recipients in one email (e.g., informing all admins of a new signup) by setting the list of emails to the &lt;code&gt;:to&lt;/code&gt; key. The list of emails can be an array of email addresses or a single string with the addresses separated by commas.</source>
          <target state="translated">이메일 목록을 &lt;code&gt;:to&lt;/code&gt; 키로 설정하여 하나의 이메일로 하나 이상의 수신자에게 이메일을 보낼 수 있습니다 (예 : 모든 관리자에게 새 가입을 알리기) . 이메일 목록은 이메일 주소 배열이거나 주소가 쉼표로 구분 된 단일 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd2fba07d1449421861070682cf3bc42607770a5" translate="yes" xml:space="preserve">
          <source>It is possible to share partials and associated caching between files with different mime types. For example shared partial caching allows template writers to share a partial between HTML and JavaScript files. When templates are collected in the template resolver file paths they only include the template language extension and not the mime type. Because of this templates can be used for multiple mime types. Both HTML and JavaScript requests will respond to the following code:</source>
          <target state="translated">다른 MIME 유형을 가진 파일간에 부분 및 관련 캐싱을 공유 할 수 있습니다. 예를 들어 공유 부분 캐싱을 사용하면 템플릿 작성자가 HTML과 JavaScript 파일간에 부분을 공유 할 수 있습니다. 템플리트 해석기 파일 경로에서 템플리트를 수집하면 MIME 유형이 아닌 템플리트 언어 확장자 만 포함됩니다. 이 템플릿으로 인해 여러 MIME 유형에 사용할 수 있습니다. HTML 및 JavaScript 요청 모두 다음 코드에 응답합니다.</target>
        </trans-unit>
        <trans-unit id="b8fd1eae44ed2d596522e191f73299d597768b59" translate="yes" xml:space="preserve">
          <source>It is possible to swap the shipped Simple backend with a more powerful one, which would store translation data in a relational database, GetText dictionary, or similar. See section &lt;a href=&quot;#using-different-backends&quot;&gt;Using different backends&lt;/a&gt; below.</source>
          <target state="translated">제공된 단순 백엔드를 관계형 데이터베이스, GetText 사전 또는 이와 유사한 데이터베이스에 번역 데이터를 저장하는 더 강력한 백엔드로 교체 할 수 있습니다. 아래의 &lt;a href=&quot;#using-different-backends&quot;&gt;다른 백엔드 사용&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="648e7ff34b53bee2903e398ed4116f0d74bf63d7" translate="yes" xml:space="preserve">
          <source>It is recommended not to use the same verifier for different things, so you can get different verifiers passing the &lt;code&gt;verifier_name&lt;/code&gt; argument.</source>
          <target state="translated">다른 것에 대해 동일한 검증기를 사용하지 않는 것이 좋습니다 . 따라서 &lt;code&gt;verifier_name&lt;/code&gt; 인수를 전달하는 다른 검증기를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ab44ad0eac99bfa97d75c89f0ad0ef7a845ed57e" translate="yes" xml:space="preserve">
          <source>It is recommended to &lt;em&gt;use RedCloth in combination with a permitted input filter&lt;/em&gt;, as described in the countermeasures against XSS section.</source>
          <target state="translated">XSS에 대한 대책 섹션에 설명 된대로 &lt;em&gt;허용 된 입력 필터와 함께 RedCloth&lt;/em&gt; 를 &lt;em&gt;사용하는&lt;/em&gt; 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="31461f64487532620d38eadf42db9852c1279cb0" translate="yes" xml:space="preserve">
          <source>It is safe to call this method if a database transaction is already open, i.e. if &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;&lt;code&gt;transaction&lt;/code&gt;&lt;/a&gt; is called within another &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;&lt;code&gt;transaction&lt;/code&gt;&lt;/a&gt; block. In case of a nested call, &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;&lt;code&gt;transaction&lt;/code&gt;&lt;/a&gt; will behave as follows:</source>
          <target state="translated">데이터베이스 트랜잭션이 이미 열려있는 경우, 즉 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt; &lt;code&gt;transaction&lt;/code&gt; &lt;/a&gt; 이 다른 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt; &lt;code&gt;transaction&lt;/code&gt; &lt;/a&gt; 블록 내 에서 호출 된 경우이 메서드를 호출하는 것이 안전합니다 . 중첩 된 호출의 경우 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt; &lt;code&gt;transaction&lt;/code&gt; &lt;/a&gt; 은 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="298255e081934b106aba3a7bad6a52c856a4bc8f" translate="yes" xml:space="preserve">
          <source>It is safe to call this method if a database transaction is already open, i.e. if &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; is called within another &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; block. In case of a nested call, &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; will behave as follows:</source>
          <target state="translated">데이터베이스 트랜잭션이 이미 열려있는 경우, 즉 다른 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;트랜잭션&lt;/a&gt; 블록 내에서 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;트랜잭션&lt;/a&gt; 이 호출 된 경우이 메소드를 호출하는 것이 안전합니다 . 중첩 된 호출의 경우 &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;트랜잭션&lt;/a&gt; 은 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7a45593b8b2126e4764abc506e87f644124f7d10" translate="yes" xml:space="preserve">
          <source>It is shorter, and the intention more obvious.</source>
          <target state="translated">더 짧고 의도는 더 분명합니다.</target>
        </trans-unit>
        <trans-unit id="89bdff5bc31e9e0bf49c6a3a0b41b9c39713a357" translate="yes" xml:space="preserve">
          <source>It is similar to render, except that it does not set the &lt;code&gt;response_body&lt;/code&gt; and it should be guaranteed to always return a string.</source>
          <target state="translated">&lt;code&gt;response_body&lt;/code&gt; 를 설정하지 않고 항상 문자열을 반환해야한다는 점을 제외하면 render와 비슷 합니다.</target>
        </trans-unit>
        <trans-unit id="feba03ed2eb137a18e226422934ced8f11f7d231" translate="yes" xml:space="preserve">
          <source>It is the server's (i.e. our) responsibility to look for a last modified timestamp and the if-none-match header and determine whether or not to send back the full response. With conditional-get support in Rails this is a pretty easy task:</source>
          <target state="translated">마지막으로 수정 된 타임 스탬프와 if-none-match 헤더를 찾아 전체 응답을 다시 보낼지 여부를 결정하는 것은 서버의 책임입니다. Rails에서 조건부 지원을 통해 이것은 매우 쉬운 작업입니다.</target>
        </trans-unit>
        <trans-unit id="733a427a481d95bc20d446154005106d5e2b15ab" translate="yes" xml:space="preserve">
          <source>It is used to find the class correspondent to the value stored in the inheritance column.</source>
          <target state="translated">상속 열에 저장된 값에 해당하는 클래스를 찾는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3b8f8badc2d008327c7b2654ec92911e4b75e011" translate="yes" xml:space="preserve">
          <source>It is used to find the class correspondent to the value stored in the polymorphic type column.</source>
          <target state="translated">다형성 유형 컬럼에 저장된 값에 해당하는 클래스를 찾는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1f24fb666ec8101a20d8e74aef753ea515b4ed85" translate="yes" xml:space="preserve">
          <source>It is useful when rendering from an &lt;code&gt;ActionController::Metal&lt;/code&gt; controller or otherwise to add an available renderer proc to a specific controller.</source>
          <target state="translated">&lt;code&gt;ActionController::Metal&lt;/code&gt; 컨트롤러 에서 렌더링 하거나 사용 가능한 렌더러 프로세스를 특정 컨트롤러에 추가 할 때 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="8381b5798039f8bdc6ba9892429183aa3882944c" translate="yes" xml:space="preserve">
          <source>It is very common that a template will need to iterate over a collection and render a sub-template for each of the elements. This pattern has been implemented as a single method that accepts an array and renders a partial for each one of the elements in the array.</source>
          <target state="translated">템플릿이 컬렉션을 반복하고 각 요소에 대한 하위 템플릿을 렌더링해야하는 경우가 매우 일반적입니다. 이 패턴은 배열을 허용하고 배열의 각 요소에 대한 부분을 렌더링하는 단일 메소드로 구현되었습니다.</target>
        </trans-unit>
        <trans-unit id="112ab076fea03f9d75fe593aa250d73126e6c082" translate="yes" xml:space="preserve">
          <source>It is very easy to create Active Record models. All you have to do is to subclass the &lt;code&gt;ApplicationRecord&lt;/code&gt; class and you're good to go:</source>
          <target state="translated">Active Record 모델을 작성하는 것은 매우 쉽습니다. &lt;code&gt;ApplicationRecord&lt;/code&gt; 클래스 를 서브 클래 싱 하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="0f65232288f706aa8c4dc006258a969438263eeb" translate="yes" xml:space="preserve">
          <source>It is very important that the override &lt;em&gt;reopens&lt;/em&gt; the class or module. Using the &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;module&lt;/code&gt; keywords would define them if they were not already in memory, which would be incorrect because the definition lives in the engine. Using &lt;code&gt;class_eval&lt;/code&gt; as shown above ensures you are reopening.</source>
          <target state="translated">재정의 가 클래스 또는 모듈을 &lt;em&gt;다시 여는&lt;/em&gt; 것은 매우 중요합니다 . &lt;code&gt;class&lt;/code&gt; 또는 &lt;code&gt;module&lt;/code&gt; 키워드를 사용하면 해당 키워드가 아직 메모리에 있지 않은 경우 정의되며, 정의가 엔진에 있기 때문에 올바르지 않습니다. 위에 표시된대로 &lt;code&gt;class_eval&lt;/code&gt; 을 사용 하면 다시 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f2567301b91ff3e1a8e3b6ab299f1ab0e52af5b" translate="yes" xml:space="preserve">
          <source>It is very important to &lt;em&gt;think about the worst case&lt;/em&gt;: What if someone really got hold of your cookies or user credentials. You could &lt;em&gt;introduce roles&lt;/em&gt; for the admin interface to limit the possibilities of the attacker. Or how about &lt;em&gt;special login credentials&lt;/em&gt; for the admin interface, other than the ones used for the public part of the application. Or a &lt;em&gt;special password for very serious actions&lt;/em&gt;?</source>
          <target state="translated">&lt;em&gt;최악의 경우에 대해 생각하는&lt;/em&gt; 것이 매우 중요합니다 . 누군가 쿠키 나 사용자 자격 증명을 실제로 가지고 있다면 어떻게해야합니까? 공격자의 가능성을 제한하기 위해 관리 인터페이스에 대한 &lt;em&gt;역할&lt;/em&gt; 을 &lt;em&gt;도입&lt;/em&gt; 할 수 있습니다. 또는 응용 프로그램의 공용 부분에 사용되는 것과 다른 관리 인터페이스의 &lt;em&gt;특수 로그인 자격 증명&lt;/em&gt; 은 어떻 습니까? 아니면 &lt;em&gt;매우 심각한 행동을위한 특별한 비밀번호&lt;/em&gt; ?</target>
        </trans-unit>
        <trans-unit id="b0493caf1193ee906843c7daabc5ed6988e9f46b" translate="yes" xml:space="preserve">
          <source>It is very important to understand that Ruby does not have a way to truly reload classes and modules in memory, and have that reflected everywhere they are already used. Technically, &quot;unloading&quot; the &lt;code&gt;User&lt;/code&gt; class means removing the &lt;code&gt;User&lt;/code&gt; constant via &lt;code&gt;Object.send(:remove_const, &quot;User&quot;)&lt;/code&gt;.</source>
          <target state="translated">Ruby에는 클래스와 모듈을 메모리에 실제로 다시로드 할 수있는 방법이 없으며, 이미 사용중인 모든 곳에 반영되어 있다는 것을 이해하는 것이 중요합니다. 기술적으로 &lt;code&gt;User&lt;/code&gt; 클래스를 &quot;언로드&quot; 한다는 것은 &lt;code&gt;Object.send(:remove_const, &quot;User&quot;)&lt;/code&gt; 를 통해 &lt;code&gt;User&lt;/code&gt; 상수를 제거하는 것을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="2ae463c41c994975a8c9d1ed7d20b19f6f82fa4e" translate="yes" xml:space="preserve">
          <source>It is very trivial to implement in Rails.</source>
          <target state="translated">Rails에서 구현하는 것은 매우 사소한 일입니다.</target>
        </trans-unit>
        <trans-unit id="35ee732864066c0d0eadb6125761394ebaf22e35" translate="yes" xml:space="preserve">
          <source>It is your responsibility to ensure calling &lt;code&gt;html_safe&lt;/code&gt; on a particular string is fine.</source>
          <target state="translated">특정 문자열에서 &lt;code&gt;html_safe&lt;/code&gt; 를 호출하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="31c0edfcaa4fc403ac3adceae75236d17c99abf7" translate="yes" xml:space="preserve">
          <source>It iterates through the collection and passes each element to a block. The element will be keyed by the value returned by the block:</source>
          <target state="translated">컬렉션을 반복하고 각 요소를 블록으로 전달합니다. 요소는 블록이 반환 한 값으로 키가됩니다.</target>
        </trans-unit>
        <trans-unit id="721fe765d7d4e10b75516d49bfbcce75be736438" translate="yes" xml:space="preserve">
          <source>It may not function correctly. This is because the application doesn't know how to route these requests to the engine unless you explicitly tell it &lt;strong&gt;how&lt;/strong&gt;. To do this, you must set the &lt;code&gt;@routes&lt;/code&gt; instance variable to the engine's route set in your setup code:</source>
          <target state="translated">제대로 작동하지 않을 수 있습니다. 이는 명시 적으로 &lt;strong&gt;how&lt;/strong&gt; 에게 알려주지 않는 한 애플리케이션이 이러한 요청을 엔진으로 라우팅하는 방법을 모르기 때문 입니다. 이렇게하려면 &lt;code&gt;@routes&lt;/code&gt; 인스턴스 변수를 설정 코드에 설정된 엔진의 경로로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="6ce713b879eb723ee2b86cf67e06dfef733959e9" translate="yes" xml:space="preserve">
          <source>It offers a richer bottom-line at the language level, targeted both at the development of Rails applications, and at the development of Ruby on Rails itself.</source>
          <target state="translated">Rails 애플리케이션 개발과 Ruby on Rails 자체 개발을 목표로 언어 수준에서보다 풍부한 수익을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8096c3aca7a392a3a34226c703cd085adca651c9" translate="yes" xml:space="preserve">
          <source>It preserves dashes and underscores unless they are used as separators:</source>
          <target state="translated">구분 기호로 사용되지 않는 한 대시와 밑줄을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="124daf2dae3dc1290bb02e4af593b4afcd962cb7" translate="yes" xml:space="preserve">
          <source>It provides a method to capture blocks into variables through capture and a way to capture a block of markup for use in a layout through &lt;a href=&quot;capturehelper#method-i-content_for&quot;&gt;content_for&lt;/a&gt;.</source>
          <target state="translated">이는 캡처를 통해 변수로 블록을 캡처하는 방법과 &lt;a href=&quot;capturehelper#method-i-content_for&quot;&gt;content_for를&lt;/a&gt; 통해 레이아웃에 사용할 마크 업 블록을 캡처하는 방법을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="d559b2073af90812c6c78ec7af2c339cdd913618" translate="yes" xml:space="preserve">
          <source>It provides an interface for protecting attributes from end-user assignment. This makes Action Controller parameters forbidden to be used in Active Model mass assignment until they have been explicitly enumerated.</source>
          <target state="translated">최종 사용자 할당으로부터 속성을 보호하기위한 인터페이스를 제공합니다. 이를 통해 Action Controller 매개 변수가 명시 적으로 열거 될 때까지 Active Model 질량 지정에 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d53d2b0f66ddb0510df5988207a06488b1a81009" translate="yes" xml:space="preserve">
          <source>It provides two options that controls the top-level behavior of new instances:</source>
          <target state="translated">새 인스턴스의 최상위 동작을 제어하는 ​​두 가지 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b59d7e861125ed6d581d3a0cc77e6a38802989db" translate="yes" xml:space="preserve">
          <source>It relies on exception handling to handle control flow, which may be marginally slower.</source>
          <target state="translated">제어 흐름을 처리하기 위해 예외 처리에 의존하므로 약간 느려질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e985f63cf9499f5816c3c8d3acd3c680200932a" translate="yes" xml:space="preserve">
          <source>It returns an empty HTML tag of type &lt;code&gt;name&lt;/code&gt; which by default is XHTML compliant. Set &lt;code&gt;open&lt;/code&gt; to true to create an open tag compatible with HTML 4.0 and below. Add HTML attributes by passing an attributes hash to &lt;code&gt;options&lt;/code&gt;. Set &lt;code&gt;escape&lt;/code&gt; to false to disable attribute value escaping.</source>
          <target state="translated">기본적으로 XHTML과 호환되는 &lt;code&gt;name&lt;/code&gt; 유형의 빈 HTML 태그를 반환합니다 . HTML 4.0 이하와 호환되는 열린 태그를 만들려면 &lt;code&gt;open&lt;/code&gt; 을 true로 설정하십시오 . &lt;code&gt;options&lt;/code&gt; 속성 해시를 전달하여 HTML 속성을 추가하십시오 . 속성 값 이스케이프를 사용하지 않으려면 &lt;code&gt;escape&lt;/code&gt; 를 false로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="103c6ce50b681a6ef444b5d698f26fbec76c9171" translate="yes" xml:space="preserve">
          <source>It should have created a test file placeholder for us. With the output of the previous command we should see:</source>
          <target state="translated">우리를 위해 테스트 파일 자리 표시자를 만들었을 것입니다. 이전 명령의 출력으로 다음을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4966f7811cb27a198a6cba34da214ff55b23cc1f" translate="yes" xml:space="preserve">
          <source>It should have created a test file placeholder for us. With the output of the previous command you should see:</source>
          <target state="translated">우리를 위해 테스트 파일 자리 표시자를 만들었을 것입니다. 이전 명령의 출력으로 다음을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="157ac47cfa200341598ff079a15434917fd957db" translate="yes" xml:space="preserve">
          <source>It takes the names of an old (deprecated) constant and of a new constant (both in string form) and optionally a deprecator. The deprecator defaults to &lt;code&gt;ActiveSupport::Deprecator&lt;/code&gt; if none is specified.</source>
          <target state="translated">오래된 (더 이상 사용되지 않는) 상수와 새 상수 (둘 다 문자열 형식) 및 선택적으로 사용되지 않는 감 가상 각기의 이름을 사용합니다. 사용되지 &lt;code&gt;ActiveSupport::Deprecator&lt;/code&gt; 경우, 지원자는 기본값으로 ActiveSupport :: Deprecator로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="5f9a57db6f3be424c799cd8d94ff60597b0aa735" translate="yes" xml:space="preserve">
          <source>It tends to be faster and less error prone to create a new instance of your application's database by loading the schema file via &lt;code&gt;bin/rails db:schema:load&lt;/code&gt; than it is to replay the entire migration history. &lt;a href=&quot;#old-migrations&quot;&gt;Old migrations&lt;/a&gt; may fail to apply correctly if those migrations use changing external dependencies or rely on application code which evolves separately from your migrations.</source>
          <target state="translated">전체 마이그레이션 기록을 재생하는 것보다 &lt;code&gt;bin/rails db:schema:load&lt;/code&gt; 를 통해 스키마 파일을로드하여 애플리케이션 데이터베이스의 새 인스턴스를 생성하는 것이 더 빠르고 오류가 덜 발생하는 경향이 있습니다 . &lt;a href=&quot;#old-migrations&quot;&gt;이전 마이그레이션&lt;/a&gt; 이 변경되는 외부 종속성을 사용하거나 마이그레이션과 별도로 발전하는 애플리케이션 코드에 의존하는 경우 이전 마이그레이션 이 올바르게 적용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83087d1a900bea48f8391e7474e1e5c67d0ff05a" translate="yes" xml:space="preserve">
          <source>It tends to be faster and less error prone to create a new instance of your application's database by loading the schema file via &lt;code&gt;rails db:schema:load&lt;/code&gt; than it is to replay the entire migration history. &lt;a href=&quot;#old-migrations&quot;&gt;Old migrations&lt;/a&gt; may fail to apply correctly if those migrations use changing external dependencies or rely on application code which evolves separately from your migrations.</source>
          <target state="translated">전체 마이그레이션 히스토리를 재생하는 것보다 &lt;code&gt;rails db:schema:load&lt;/code&gt; 를 통해 스키마 파일을로드하여 애플리케이션 데이터베이스의 새 인스턴스를 작성하는 것이 더 빠르고 오류가 적은 경향이 있습니다 . &lt;a href=&quot;#old-migrations&quot;&gt;마이그레이션에서&lt;/a&gt; 외부 종속성 변경을 사용하거나 마이그레이션과 별도로 진화하는 응용 프로그램 코드에 의존하는 경우 이전 마이그레이션 이 올바르게 적용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccc2a2f98b56eb3a54fae986fc622f497465a043" translate="yes" xml:space="preserve">
          <source>It will include all of the helpers from engine's directory. Take into account that this does not include helpers defined in controllers with helper_method or other similar solutions, only helpers defined in the helpers directory will be included.</source>
          <target state="translated">엔진 디렉토리의 모든 도우미가 포함됩니다. helper_method 또는 다른 유사한 솔루션으로 컨트롤러에 정의 된 헬퍼는 포함되지 않으며 helpers 디렉토리에 정의 된 헬퍼 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ff50f07b75ecd8565d4477a52681e559177c02d3" translate="yes" xml:space="preserve">
          <source>It will include all of the helpers from engine's directory. Take into account this does not include helpers defined in controllers with helper_method or other similar solutions, only helpers defined in the helpers directory will be included.</source>
          <target state="translated">엔진 디렉토리의 모든 도우미가 포함됩니다. 여기에는 helper_method 또는 기타 유사한 솔루션이있는 컨트롤러에 정의 된 헬퍼가 포함되지 않으며 헬퍼 디렉토리에 정의 된 헬퍼 만 포함된다는 점을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="98c13cf8d00ca42ad01461edeb1c7ca6801faefd" translate="yes" xml:space="preserve">
          <source>It will look a little basic for now, but that's ok. We'll look at improving the styling for it afterwards.</source>
          <target state="translated">지금은 조금 기본으로 보이지만 괜찮습니다. 나중에 스타일을 개선하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="8637603c373814dd050a1532100af0da4f2090a9" translate="yes" xml:space="preserve">
          <source>It will use the given &lt;code&gt;user_content_type&lt;/code&gt;, or multipart if the mail message has any attachments. If the attachments are inline, the content type will be &amp;ldquo;multipart/related&amp;rdquo;, otherwise &amp;ldquo;multipart/mixed&amp;rdquo;.</source>
          <target state="translated">주어진 &lt;code&gt;user_content_type&lt;/code&gt; 을 사용 하거나 메일 메시지에 첨부 파일이 있으면 multipart 를 사용합니다 . 첨부 파일이 인라인 인 경우 컨텐츠 유형은 &quot;멀티 파트 / 관련&quot;이고, 그렇지 않으면 &quot;멀티 파트 / 혼합&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="42cbfd3191bc8d384376a66a5cca989147dbf649" translate="yes" xml:space="preserve">
          <source>It works for both inline:</source>
          <target state="translated">인라인 모두에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="618aee3ec871071cafa5f2c415e6c3ad428f6c63" translate="yes" xml:space="preserve">
          <source>It works like this:</source>
          <target state="translated">다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4e9581765ec600cf23cfdcdef0a724ea6ec31300" translate="yes" xml:space="preserve">
          <source>It's a good practice to ensure that the correct message has been broadcasted inside other components (e.g. inside your controllers). This is precisely where the custom assertions provided by Action Cable are pretty useful. For instance, within a model:</source>
          <target state="translated">다른 구성 요소 (예 : 컨트롤러 내부) 내에서 올바른 메시지가 브로드 캐스트되도록하는 것이 좋습니다. 바로 Action Cable이 제공하는 커스텀 어설 션이 매우 유용합니다. 예를 들어, 모델 내에서 :</target>
        </trans-unit>
        <trans-unit id="f422ae9e8159f660700963246d16c8816e8e4e5b" translate="yes" xml:space="preserve">
          <source>It's a good practice to ensure that your jobs correctly get enqueued or performed wherever you invoke them (e.g. inside your controllers). This is precisely where the custom assertions provided by Active Job are pretty useful. For instance, within a model:</source>
          <target state="translated">작업을 호출 할 때마다 (예 : 컨트롤러 내부) 작업이 올바르게 대기열에 포함되거나 수행되도록하는 것이 좋습니다. Active Job에서 제공하는 사용자 지정 어설 ​​션이 매우 유용한 곳입니다. 예를 들어, 모델 내에서 :</target>
        </trans-unit>
        <trans-unit id="a80a15c6dc9f952abf9d054b00b9bc97a4a2ae13" translate="yes" xml:space="preserve">
          <source>It's advisable that you only store simple data (strings and numbers) in cookies. If you have to store complex objects, you would need to handle the conversion manually when reading the values on subsequent requests.</source>
          <target state="translated">쿠키에는 간단한 데이터 (문자열 및 숫자) 만 저장하는 것이 좋습니다. 복잡한 개체를 저장해야하는 경우 후속 요청에서 값을 읽을 때 변환을 수동으로 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b5341eced867c0f8d3ab2b44d8744a44e0359bb" translate="yes" xml:space="preserve">
          <source>It's also a good idea to add indexes to each of those columns to speed up the joins process. However, in MySQL it is advised to add a compound index for both of the columns as MySQL only uses one index per table during the lookup.</source>
          <target state="translated">또한 조인 프로세스 속도를 높이기 위해 각 열에 인덱스를 추가하는 것이 좋습니다. 그러나 MySQL에서는 조회 중에 테이블 당 하나의 인덱스 만 사용하므로 MySQL에서는 두 열 모두에 복합 인덱스를 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="23d63436f77065acc450057bff4d18024da3b766" translate="yes" xml:space="preserve">
          <source>It's also important to treat the value objects as immutable. Don't allow the Money object to have its amount changed after creation. Create a new Money object with the new value instead. The &lt;code&gt;Money#exchange_to&lt;/code&gt; method is an example of this. It returns a new value object instead of changing its own values. Active Record won't persist value objects that have been changed through means other than the writer method.</source>
          <target state="translated">값 객체를 불변으로 취급하는 것도 중요합니다. Money 객체가 생성 후에 금액이 변경되는 것을 허용하지 마십시오. 대신 새 값으로 새 Money 개체를 만듭니다. &lt;code&gt;Money#exchange_to&lt;/code&gt; 방법이의 예입니다. 자체 값을 변경하는 대신 새 값 개체를 반환합니다. 활성 레코드는 기록기 방법 이외의 방법을 통해 변경된 값 개체를 유지하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ce772d533b0ed334ad2b7969d9190d3bfed1e182" translate="yes" xml:space="preserve">
          <source>It's also possible to construct multi-dimensional parameter hashes by specifying keys using brackets, such as:</source>
          <target state="translated">다음과 같이 대괄호를 사용하여 키를 지정하여 다차원 매개 변수 해시를 구성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c5080c9d97459219fcb315f929272aaf0d44726" translate="yes" xml:space="preserve">
          <source>It's also possible to delegate a method to the class by using &lt;code&gt;:class&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;:class&lt;/code&gt; 를 사용하여 메소드를 클래스에 위임 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ee9bba4c576ef4381989429f386a4c0d76c77e88" translate="yes" xml:space="preserve">
          <source>It's also possible to instantiate related objects, so a &lt;code&gt;Client&lt;/code&gt; class belonging to the &lt;code&gt;clients&lt;/code&gt; table with a &lt;code&gt;master_id&lt;/code&gt; foreign key can instantiate master through &lt;code&gt;Client#master&lt;/code&gt;.</source>
          <target state="translated">관련 객체를 인스턴스화 할 수도 있으므로 &lt;code&gt;master_id&lt;/code&gt; 외래 키 를 사용하여 &lt;code&gt;clients&lt;/code&gt; 테이블에 속하는 &lt;code&gt;Client&lt;/code&gt; 클래스 는 &lt;code&gt;Client#master&lt;/code&gt; 를 통해 마스터를 인스턴스화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d018ba7160b482abab2b6e00cfd3ecbbb4865e28" translate="yes" xml:space="preserve">
          <source>It's also possible to interpret encrypted YAML files with &lt;code&gt;config&lt;/code&gt;.</source>
          <target state="translated">암호화 된 YAML 파일을 &lt;code&gt;config&lt;/code&gt; 로 해석 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6c8736847d7c7ad6de203a9a1a70d34f62f81a4d" translate="yes" xml:space="preserve">
          <source>It's also possible to override the column that should be used as the table's primary key using the &lt;code&gt;ActiveRecord::Base.primary_key=&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;ActiveRecord::Base.primary_key=&lt;/code&gt; 메소드를 사용하여 테이블의 기본 키로 사용해야하는 열을 재정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="20c583d4833cfc55c98348bf9834c35bbaee87ec" translate="yes" xml:space="preserve">
          <source>It's also possible to retry or discard a job if an exception is raised during execution. For example:</source>
          <target state="translated">실행 중에 예외가 발생하면 작업을 재 시도하거나 폐기 할 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7d0f83e7bb64d92b6a7b5c41f4d4d0caa14b8cea" translate="yes" xml:space="preserve">
          <source>It's also possible to specify the instance to be used:</source>
          <target state="translated">사용할 인스턴스를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2cec49ece4ed432ed06fe492f0dc3f0dbca2d38" translate="yes" xml:space="preserve">
          <source>It's also possible to swap connections granularly for shards.</source>
          <target state="translated">샤드에 대한 연결을 세부적으로 교체 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="06bf6d5af71eff30bf65d8d44e4b90be5583daab" translate="yes" xml:space="preserve">
          <source>It's also possible to use multiple attributes in the same &lt;code&gt;find_by_&lt;/code&gt; by separating them with &amp;ldquo;&lt;em&gt;and&lt;/em&gt;&amp;rdquo;.</source>
          <target state="translated">동일한 &lt;code&gt;find_by_&lt;/code&gt; 에서 여러 속성 을&amp;ldquo; &lt;em&gt;와&lt;/em&gt; &amp;rdquo; 로 구분하여 여러 속성을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3598f3734b84a9d144e42f8399310dc626f865a" translate="yes" xml:space="preserve">
          <source>It's common that you need to find a record or create it if it doesn't exist. You can do that with the &lt;code&gt;find_or_create_by&lt;/code&gt; and &lt;code&gt;find_or_create_by!&lt;/code&gt; methods.</source>
          <target state="translated">레코드를 찾거나 존재하지 않는 경우 작성해야하는 것이 일반적입니다. &lt;code&gt;find_or_create_by&lt;/code&gt; 와 &lt;code&gt;find_or_create_by!&lt;/code&gt; 그렇게 할 수 있습니다 ! 행동 양식.</target>
        </trans-unit>
        <trans-unit id="0f49250b8cffccdc364b03b3385e42a6d9aa7de5" translate="yes" xml:space="preserve">
          <source>It's common to have resources that are logically children of other resources. For example, suppose your application includes these models:</source>
          <target state="translated">논리적으로 다른 리소스의 자식 인 리소스를 갖는 것이 일반적입니다. 예를 들어, 응용 프로그램에 다음 모델이 포함되어 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="b210ae2be028d7173f42ca71c61c6b0b4412e0aa" translate="yes" xml:space="preserve">
          <source>It's common to have resources that are logically children of other resources:</source>
          <target state="translated">논리적으로 다른 자원의 하위 자원 인 자원을 갖는 것이 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="70811258be9b0fd9bd6ee0a2ce8b0baa003841be" translate="yes" xml:space="preserve">
          <source>It's common to want to test the caching strategy of your application in development mode. Rails provides the rails command &lt;code&gt;dev:cache&lt;/code&gt; to easily toggle caching on/off.</source>
          <target state="translated">개발 모드에서 응용 프로그램의 캐싱 전략을 테스트하는 것이 일반적입니다. Rails는 Rails 명령 &lt;code&gt;dev:cache&lt;/code&gt; 를 제공하여 캐싱을 쉽게 켜고 끌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="496d6b6240d7125cf093cec706a29512a5683f4c" translate="yes" xml:space="preserve">
          <source>It's even possible to call these dynamic finder methods on relations and named scopes.</source>
          <target state="translated">관계 및 명명 된 범위에서 이러한 동적 파인더 메소드를 호출 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d40bb18153b626c0253f7b7d4189338603c47ddb" translate="yes" xml:space="preserve">
          <source>It's even possible to use &lt;code&gt;exists?&lt;/code&gt; without any arguments on a model or a relation.</source>
          <target state="translated">&lt;code&gt;exists?&lt;/code&gt; 것도 가능 합니까? 모델이나 관계에 대한 논쟁없이.</target>
        </trans-unit>
        <trans-unit id="d966070d0b05c39fbcc1da00391f8af210d6e75b" translate="yes" xml:space="preserve">
          <source>It's helpful to be able to test incoming emails in development without actually sending and receiving real emails. To accomplish this, there's a conductor controller mounted at &lt;code&gt;/rails/conductor/action_mailbox/inbound_emails&lt;/code&gt;, which gives you an index of all the InboundEmails in the system, their state of processing, and a form to create a new InboundEmail as well.</source>
          <target state="translated">실제 이메일을주고받지 않고 개발중인 수신 이메일을 테스트 할 수 있으면 도움이됩니다. 이를 위해 &lt;code&gt;/rails/conductor/action_mailbox/inbound_emails&lt;/code&gt; 에 도체 컨트롤러가 설치되어 시스템의 모든 InboundEmail 색인, 처리 상태 및 새로운 InboundEmail 작성 양식을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="74318357210d0ce970a5c87b95a2c46f5bec161f" translate="yes" xml:space="preserve">
          <source>It's important to connect to your database in a single model and then inherit from that model for the tables rather than connect multiple individual models to the same database. Database clients have a limit to the number of open connections there can be and if you do this it will multiply the number of connections you have since Rails uses the model class name for the connection specification name.</source>
          <target state="translated">단일 모델로 데이터베이스에 연결 한 다음 여러 개별 모델을 동일한 데이터베이스에 연결하지 않고 테이블에 대해 해당 모델에서 상속하는 것이 중요합니다. 데이터베이스 클라이언트는 열린 연결 수에 제한이 있으며,이를 수행하면 Rails가 연결 스펙 이름으로 모델 클래스 이름을 사용하므로 연결 수를 곱하게됩니다.</target>
        </trans-unit>
        <trans-unit id="c731ba937d8d715e7c40709120f481beab47aa00" translate="yes" xml:space="preserve">
          <source>It's important to keep in mind at all times that the application should &lt;strong&gt;always&lt;/strong&gt; take precedence over its engines. An application is the object that has final say in what goes on in its environment. The engine should only be enhancing it, rather than changing it drastically.</source>
          <target state="translated">응용 프로그램이 &lt;strong&gt;항상&lt;/strong&gt; 엔진보다 우선 해야한다는 점을 &lt;strong&gt;항상&lt;/strong&gt; 명심해야합니다 . 응용 프로그램은 환경에서 일어나는 일에 대해 최종적으로 언급 한 객체입니다. 엔진은 엔진을 급격히 바꾸지 않고 향상시켜야합니다.</target>
        </trans-unit>
        <trans-unit id="61fcd28ba5c492e3c29858044d3265888cdd9725" translate="yes" xml:space="preserve">
          <source>It's important to know that the file is not yet available in the &lt;code&gt;after_create&lt;/code&gt; callback but in the &lt;code&gt;after_create_commit&lt;/code&gt; only.</source>
          <target state="translated">파일은 아직 &lt;code&gt;after_create&lt;/code&gt; 콜백 에서 사용할 수 없지만 &lt;code&gt;after_create_commit&lt;/code&gt; 에서만 사용할 수 있다는 것을 아는 것이 중요 합니다.</target>
        </trans-unit>
        <trans-unit id="e878d51979cf5c0a6c91cb7c590dd5e82fc40565" translate="yes" xml:space="preserve">
          <source>It's important to note that we have only &lt;em&gt;initialized&lt;/em&gt; this object. This object is not saved to the database at all. It's only available in the console at the moment. To save the object to the database, we must call &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-save&quot;&gt;&lt;code&gt;save&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 객체 만 &lt;em&gt;초기화&lt;/em&gt; 했다는 점에 유의해야 합니다. 이 개체는 데이터베이스에 전혀 저장되지 않습니다. 현재 콘솔에서만 사용할 수 있습니다. 데이터베이스에 개체를 저장하기 위해, 우리는 호출해야 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-save&quot;&gt; &lt;code&gt;save&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="a0c359079f380a8190da5470e95085b4e0266c5b" translate="yes" xml:space="preserve">
          <source>It's important to remember that XML or JSON requests are also checked by default. If you're building an &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; or an SPA you could change forgery protection method in &lt;code&gt;ApplicationController&lt;/code&gt; (by default: &lt;code&gt;:exception&lt;/code&gt;):</source>
          <target state="translated">XML 또는 JSON 요청도 기본적으로 확인됩니다. &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; 또는 SPA를 구축하는 경우 &lt;code&gt;ApplicationController&lt;/code&gt; 에서 위조 방지 방법을 변경할 수 있습니다 (기본적으로 &lt;code&gt;:exception&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d4ea5fd1f11864cb83fb9ed3228955626a4be617" translate="yes" xml:space="preserve">
          <source>It's necessary not to set or leave &lt;code&gt;:nullify&lt;/code&gt; option for those associations that have &lt;code&gt;NOT NULL&lt;/code&gt; database constraints. If you don't set &lt;code&gt;dependent&lt;/code&gt; to destroy such associations you won't be able to change the associated object because the initial associated object's foreign key will be set to the unallowed &lt;code&gt;NULL&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;NOT NULL&lt;/code&gt; 데이터베이스 제한 조건 이있는 연관에 대해서는 &lt;code&gt;:nullify&lt;/code&gt; 옵션 을 설정하거나 그대로 두지 않아도 됩니다 . 이러한 연관을 제거하도록 &lt;code&gt;dependent&lt;/code&gt; 을 설정하지 않으면 초기 연관된 오브젝트의 외부 키가 허용되지 않는 &lt;code&gt;NULL&lt;/code&gt; 값 으로 설정되므로 연관된 오브젝트를 변경할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="2de386d061ae8779fc61c2f09a77ad60535807ab" translate="yes" xml:space="preserve">
          <source>It's normal for associations to work in two directions, requiring declaration on two different models:</source>
          <target state="translated">연결이 두 방향으로 작동하는 것은 정상이며 두 가지 다른 모델에 대한 선언이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="27f390c981876d7b7b77c2786f714460a8271639" translate="yes" xml:space="preserve">
          <source>It's not possible to derive all render calls like that, though. Here are a few examples of things that can't be derived:</source>
          <target state="translated">그래도 모든 렌더 호출을 파생시킬 수는 없습니다. 도출 할 수없는 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="868f5785a4560369896872c12a3c257722a8d878" translate="yes" xml:space="preserve">
          <source>It's possible to add an exclamation point (!) on the end of the dynamic finders to get them to raise an &lt;a href=&quot;recordnotfound&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;&lt;/a&gt; error if they do not return any records, like &lt;code&gt;Person.find_by_last_name!&lt;/code&gt;.</source>
          <target state="translated">동적 파인더 끝에 느낌표 (!)를 추가하여 &lt;code&gt;Person.find_by_last_name!&lt;/code&gt; 과 같은 레코드를 반환하지 않는 경우 &lt;a href=&quot;recordnotfound&quot;&gt; &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; &lt;/a&gt; 오류를 발생시킬 수 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="25f14b97d2c364a8b7b21e0c4a093d07e8cb1fd6" translate="yes" xml:space="preserve">
          <source>It's possible to add an exclamation point (!) on the end of the dynamic finders to get them to raise an &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt; error if they do not return any records, like &lt;code&gt;Person.find_by_last_name!&lt;/code&gt;.</source>
          <target state="translated">동적 파인더 끝에 느낌표 (!)를 추가하여 &lt;code&gt;Person.find_by_last_name!&lt;/code&gt; 과 같은 레코드를 리턴하지 않으면 &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord :: RecordNotFound&lt;/a&gt; 오류를 발생시킬 수 있습니다 ! .</target>
        </trans-unit>
        <trans-unit id="10a0322b52e0bf6b284ef6e7bb95d7213022d5c8" translate="yes" xml:space="preserve">
          <source>It's possible to further restrict the use of a signed id with a purpose. This helps when you have a general base model, like a User, which might have signed ids for several things, like password reset or email verification. The purpose that was set during generation must match the purpose set when finding. If there's a mismatch, nil is again returned.</source>
          <target state="translated">목적이있는 서명 된 ID의 사용을 추가로 제한 할 수 있습니다. 이는 암호 재설정 또는 이메일 확인과 같은 여러 가지 사항에 대해 서명 된 ID가있을 수있는 사용자와 같은 일반적인 기본 모델이있을 때 도움이됩니다. 생성 중에 설정 한 목적은 찾을 때 설정 한 목적과 일치해야합니다. 불일치가 있으면 nil이 다시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="07d745fa3c1940442a48d11e1c81707259e4e2fc" translate="yes" xml:space="preserve">
          <source>It's possible to rotate the ciphers and digests used for encrypted and signed cookies.</source>
          <target state="translated">암호화 및 서명 된 쿠키에 사용 된 암호 및 요약을 회전 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c0c97dfda8d4b7a9cb09eedf3b374f351a7d03c" translate="yes" xml:space="preserve">
          <source>It's possible to set the fixture's model class directly in the YAML file. This is helpful when fixtures are loaded outside tests and &lt;code&gt;set_fixture_class&lt;/code&gt; is not available (e.g. when running &lt;code&gt;bin/rails db:fixtures:load&lt;/code&gt;).</source>
          <target state="translated">YAML 파일에서 직접 조명기의 모델 클래스를 설정할 수 있습니다. 이것은 조명기가 테스트 외부에서로드되고 &lt;code&gt;set_fixture_class&lt;/code&gt; 를 사용할 수 없을 때 유용 합니다 (예 : &lt;code&gt;bin/rails db:fixtures:load&lt;/code&gt; 를 실행할 때 ).</target>
        </trans-unit>
        <trans-unit id="c32e8dd88e75c55390e501c7bd381f8aca605240" translate="yes" xml:space="preserve">
          <source>It's possible to set the fixture's model class directly in the YAML file. This is helpful when fixtures are loaded outside tests and &lt;code&gt;set_fixture_class&lt;/code&gt; is not available (e.g. when running &lt;code&gt;rails db:fixtures:load&lt;/code&gt;).</source>
          <target state="translated">조명기의 모델 클래스를 YAML 파일에서 직접 설정할 수 있습니다. 이것은 조명기가 테스트 외부에로드되고 &lt;code&gt;set_fixture_class&lt;/code&gt; 를 사용할 수없는 경우에 유용합니다 (예 &lt;code&gt;rails db:fixtures:load&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="98cb3aa74f36c4b8f6c7c65b58c0012c527c5d89" translate="yes" xml:space="preserve">
          <source>It's possible to stack callbacks by passing them as an array. Example:</source>
          <target state="translated">콜백을 배열로 전달하여 콜백을 쌓을 수 있습니다. 예:</target>
        </trans-unit>
        <trans-unit id="411969aa31079ad6714c1419f7c08edef6d92a15" translate="yes" xml:space="preserve">
          <source>It's possible to use any of the above middlewares in your custom Rack stack.</source>
          <target state="translated">위의 미들웨어를 사용자 정의 랙 스택에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3d4cccbe811b7396f09d0f801e04618ab0dac79" translate="yes" xml:space="preserve">
          <source>It's time to add a second model to the application. The second model will handle comments on articles.</source>
          <target state="translated">이제 응용 프로그램에 두 번째 모델을 추가해야합니다. 두 번째 모델은 기사에 대한 주석을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="0ad56c35d6c96eef75a6ee75178cc603e11a32f0" translate="yes" xml:space="preserve">
          <source>It's very important here to use the &lt;code&gt;String&lt;/code&gt; version of the class, rather than the class itself. If you were to use the class, Rails would attempt to load that class and then reference the related table. This could lead to problems if the table didn't already exist. Therefore, a &lt;code&gt;String&lt;/code&gt; should be used and then converted to a class using &lt;code&gt;constantize&lt;/code&gt; in the engine later on.</source>
          <target state="translated">여기서는 클래스 자체가 아닌 &lt;code&gt;String&lt;/code&gt; 버전의 클래스 를 사용하는 것이 매우 중요 합니다. 클래스를 사용하려는 경우 Rails는 해당 클래스를로드 한 다음 관련 테이블을 참조하려고 시도합니다. 테이블이 존재하지 않으면 문제가 발생할 수 있습니다. 따라서 &lt;code&gt;String&lt;/code&gt; 을 사용하고 나중에 엔진에서 &lt;code&gt;constantize&lt;/code&gt; 를 사용하여 클래스로 변환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="82c4355aa174ea1134e7c02d2a116f276e1eee7a" translate="yes" xml:space="preserve">
          <source>Iterates through each error key, value pair in the error messages hash. Yields the attribute and the error for that attribute. If the attribute has more than one error message, yields once for each error message.</source>
          <target state="translated">각 오류 키, 오류 메시지 해시의 값 쌍을 반복합니다. 속성과 해당 속성의 오류를 나타냅니다. 속성에 둘 이상의 오류 메시지가있는 경우 각 오류 메시지마다 한 번씩 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="39312c7e1376cb1ad7cca45b9cf9c109cd96ff73" translate="yes" xml:space="preserve">
          <source>Iterates through each error object.</source>
          <target state="translated">각 오류 개체를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="9a3f6528f2606d1ed81f1e9f85b624a26b98cbbe" translate="yes" xml:space="preserve">
          <source>JOIN</source>
          <target state="translated">JOIN</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="fe0b7e20b2738d8025a2377f855de38e73f547f9" translate="yes" xml:space="preserve">
          <source>JSON and JSONB</source>
          <target state="translated">JSON과 JSONB</target>
        </trans-unit>
        <trans-unit id="cf43040f699629e838a8715912bcf428aa5440fb" translate="yes" xml:space="preserve">
          <source>JSON is a JavaScript data format used by many Ajax libraries. Rails has built-in support for converting objects to JSON and rendering that JSON back to the browser:</source>
          <target state="translated">JSON은 많은 Ajax 라이브러리에서 사용되는 JavaScript 데이터 형식입니다. Rails는 객체를 JSON으로 변환하고 JSON을 브라우저로 다시 렌더링하는 기능을 내장하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="31c1bce502137da7db199329615126120773d1f0" translate="yes" xml:space="preserve">
          <source>JSON parameters</source>
          <target state="translated">JSON 매개 변수</target>
        </trans-unit>
        <trans-unit id="935b885e280c10afb46d2bf45f85bbea09bc94ce" translate="yes" xml:space="preserve">
          <source>JSON support</source>
          <target state="translated">JSON 지원</target>
        </trans-unit>
        <trans-unit id="91b8bae1d5741163238caeb859f60f9aad22ca54" translate="yes" xml:space="preserve">
          <source>JSON::decode</source>
          <target state="translated">JSON::decode</target>
        </trans-unit>
        <trans-unit id="cd65102564a8ba6c57d96671fc65196b16e48b3c" translate="yes" xml:space="preserve">
          <source>JSON::encode</source>
          <target state="translated">JSON::encode</target>
        </trans-unit>
        <trans-unit id="92b18c9405f766007bd6109914f3813baf41ad56" translate="yes" xml:space="preserve">
          <source>JSON::parse_error</source>
          <target state="translated">JSON::parse_error</target>
        </trans-unit>
        <trans-unit id="19acdb4160eb288df993337f159e349c600848ff" translate="yes" xml:space="preserve">
          <source>JSON_ESCAPE</source>
          <target state="translated">JSON_ESCAPE</target>
        </trans-unit>
        <trans-unit id="c4f4583027599ec31d99dce1fd474812e595bec5" translate="yes" xml:space="preserve">
          <source>JSON_ESCAPE_REGEXP</source>
          <target state="translated">JSON_ESCAPE_REGEXP</target>
        </trans-unit>
        <trans-unit id="6b078a8fb6a84f103228ea09a5d693750075dfee" translate="yes" xml:space="preserve">
          <source>JS_ESCAPE_MAP</source>
          <target state="translated">JS_ESCAPE_MAP</target>
        </trans-unit>
        <trans-unit id="3a2bc94aa5df89cb534947cbbba66bbfa8f5d420" translate="yes" xml:space="preserve">
          <source>JavaScript Compression</source>
          <target state="translated">자바 스크립트 압축</target>
        </trans-unit>
        <trans-unit id="329f655713f7ed95d8ad672ec206ea61c89847f8" translate="yes" xml:space="preserve">
          <source>JavaScript asset compression requires you have a JavaScript runtime available on your system, in the absence of a runtime you will see an &lt;code&gt;execjs&lt;/code&gt; error during asset compilation. Usually macOS and Windows come with a JavaScript runtime installed. &lt;code&gt;therubyrhino&lt;/code&gt; is the recommended runtime for JRuby users and is added by default to the &lt;code&gt;Gemfile&lt;/code&gt; in apps generated under JRuby. You can investigate all the supported runtimes at &lt;a href=&quot;https://github.com/rails/execjs#readme&quot;&gt;ExecJS&lt;/a&gt;.</source>
          <target state="translated">JavaScript 자산 압축을 사용하려면 시스템에서 JavaScript 런타임을 사용할 수 있어야합니다. 런타임이 없으면 자산 컴파일 중에 &lt;code&gt;execjs&lt;/code&gt; 오류 가 표시됩니다 . 일반적으로 macOS 및 Windows에는 JavaScript 런타임이 설치되어 있습니다. &lt;code&gt;therubyrhino&lt;/code&gt; 는 JRuby 사용자에게 권장되는 런타임이며 기본적으로 JRuby에서 생성 된 앱 의 &lt;code&gt;Gemfile&lt;/code&gt; 에 추가됩니다 . &lt;a href=&quot;https://github.com/rails/execjs#readme&quot;&gt;ExecJS&lt;/a&gt; 에서 지원되는 모든 런타임을 조사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0950a27c9b54b1fadb8e152d01d78d9a8de8b0af" translate="yes" xml:space="preserve">
          <source>JavaScript asset compression requires you have a JavaScript runtime available on your system, in the absence of a runtime you will see an &lt;code&gt;execjs&lt;/code&gt; error during asset compression. Usually macOS and Windows come with a JavaScript runtime installed. &lt;code&gt;therubyrhino&lt;/code&gt; is the recommended runtime for JRuby users and is added by default to the &lt;code&gt;Gemfile&lt;/code&gt; in apps generated under JRuby. You can investigate all the supported runtimes at &lt;a href=&quot;https://github.com/rails/execjs#readme&quot;&gt;ExecJS&lt;/a&gt;.</source>
          <target state="translated">JavaScript 자산 압축을 사용하려면 시스템에서 JavaScript 런타임을 사용할 수 있어야합니다. 런타임이 없으면 자산 압축 중에 &lt;code&gt;execjs&lt;/code&gt; 오류 가 표시됩니다 . 일반적으로 macOS 및 Windows에는 JavaScript 런타임이 설치되어 있습니다. &lt;code&gt;therubyrhino&lt;/code&gt; 는 JRuby 사용자에게 권장되는 런타임이며 JRuby 에서 생성 된 앱 의 &lt;code&gt;Gemfile&lt;/code&gt; 에 기본적으로 추가됩니다 . &lt;a href=&quot;https://github.com/rails/execjs#readme&quot;&gt;ExecJS&lt;/a&gt; 에서 지원되는 모든 런타임을 조사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c469bfe9f94b3c15c0a2967572561504964de859" translate="yes" xml:space="preserve">
          <source>JavaScript can also make requests to the server, and parse the response. It also has the ability to update information on the page. Combining these two powers, a JavaScript writer can make a web page that can update just parts of itself, without needing to get the full page data from the server. This is a powerful technique that we call Ajax.</source>
          <target state="translated">JavaScript는 서버에 요청을하고 응답을 구문 분석 할 수도 있습니다. 또한 페이지의 정보를 업데이트 할 수 있습니다. 이 두 가지 기능을 결합하여 JavaScript 작성기는 서버에서 전체 페이지 데이터를 가져올 필요없이 자체 일부만 업데이트 할 수있는 웹 페이지를 만들 수 있습니다. 이것은 우리가 Ajax라고 부르는 강력한 기술입니다.</target>
        </trans-unit>
        <trans-unit id="7bd16b36cdda0f2697deaaca766efe478f0bb26f" translate="yes" xml:space="preserve">
          <source>JavaScript view rendering doesn't do any preprocessing, so you shouldn't use ES6 syntax here.</source>
          <target state="translated">JavaScript 뷰 렌더링은 전처리를 수행하지 않으므로 여기서 ES6 구문을 사용하면 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e79342aa85fd4f1c22498783cd42d8faf5c0f966" translate="yes" xml:space="preserve">
          <source>JavaScriptHelper</source>
          <target state="translated">JavaScriptHelper</target>
        </trans-unit>
        <trans-unit id="4d1ff2f58b0a4a6adf2107fa93ff7226f28327a3" translate="yes" xml:space="preserve">
          <source>Job Execution</source>
          <target state="translated">작업 실행</target>
        </trans-unit>
        <trans-unit id="ba8d06fda34fb43af828c544923775e18fb1a0b2" translate="yes" xml:space="preserve">
          <source>Job Identifier</source>
          <target state="translated">작업 식별자</target>
        </trans-unit>
        <trans-unit id="3f331e97598d78f4160b82438f27bf259a5df56f" translate="yes" xml:space="preserve">
          <source>Job Testing</source>
          <target state="translated">직업 테스트</target>
        </trans-unit>
        <trans-unit id="e5baad04a61a328c9f20c8c710417477b5871973" translate="yes" xml:space="preserve">
          <source>Job arguments</source>
          <target state="translated">직업 인수</target>
        </trans-unit>
        <trans-unit id="243efbade47e05637dd57919b72473a334187b42" translate="yes" xml:space="preserve">
          <source>Job object</source>
          <target state="translated">작업 객체</target>
        </trans-unit>
        <trans-unit id="08d8ff960f1c7483a34d89f43b7bb3ac9cafa206" translate="yes" xml:space="preserve">
          <source>Job to destroy the records associated with a destroyed record in background.</source>
          <target state="translated">백그라운드에서 파기 된 레코드와 관련된 레코드를 파기하는 작업입니다.</target>
        </trans-unit>
        <trans-unit id="e91b70d63ed47030600cb3d8ce6bdfdabe2a990d" translate="yes" xml:space="preserve">
          <source>Job: Any class inheriting from the adapter may set the priority on the job object relative to other jobs.</source>
          <target state="translated">작업 : 어댑터에서 상속되는 모든 클래스는 다른 작업에 비해 작업 오브젝트의 우선 순위를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a6116842526736873ed5f69baef76f0d3c2c51b" translate="yes" xml:space="preserve">
          <source>Job: The number of retries can be set per instance of the job class.</source>
          <target state="translated">작업 : 재시도 횟수는 작업 클래스의 인스턴스마다 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfef8c94380b329ced3bcf083ac61b7f2a6ce2ec" translate="yes" xml:space="preserve">
          <source>Job: The timeout can be set for each instance of the job class.</source>
          <target state="translated">작업 : 작업 클래스의 각 인스턴스에 대해 시간 종료를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8a539a40723c2241a7fba7916651de221c51cc8" translate="yes" xml:space="preserve">
          <source>Joining Across Databases</source>
          <target state="translated">데이터베이스 간 가입</target>
        </trans-unit>
        <trans-unit id="5e207af13c7f10c990fa0278c9a6d430dd7d1927" translate="yes" xml:space="preserve">
          <source>Joining Tables</source>
          <target state="translated">테이블 조인</target>
        </trans-unit>
        <trans-unit id="9cd1a12e9f4770062aa1cf8bf14ef4b159146a9b" translate="yes" xml:space="preserve">
          <source>Joining across clusters</source>
          <target state="translated">여러 클러스터에 참여</target>
        </trans-unit>
        <trans-unit id="36cb6826dbbbacc9f0915d9e44ccb82925b04c72" translate="yes" xml:space="preserve">
          <source>Joins</source>
          <target state="translated">Joins</target>
        </trans-unit>
        <trans-unit id="b8202b1a0f9ac4ece76b1b53a1b999e3fec322b8" translate="yes" xml:space="preserve">
          <source>Joins that are also marked for preloading. In which case we should just eager load them. Note that this is a naive implementation because we could have strings and symbols which represent the same association, but that aren't matched by this. Also, we could have nested hashes which partially match, e.g. { a: :b } &amp;amp; { a: [:b, :c] }</source>
          <target state="translated">사전로드로 표시된 조인. 어떤 경우에는로드하기를 열망해야합니다. 이것은 동일한 연결을 나타내는 문자열과 기호를 가질 수 있지만 이것과 일치하지 않기 때문에 순진한 구현입니다. 또한 {a : : b} &amp;amp; {a : [: b, : c]}와 부분적으로 일치하는 중첩 해시를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e55f603d9ec6b7739d6e41f2a606f221971eb79" translate="yes" xml:space="preserve">
          <source>Just about every Rails application interacts heavily with a database and, as a result, your tests will need a database to interact with as well. To write efficient tests, you'll need to understand how to set up this database and populate it with sample data.</source>
          <target state="translated">거의 모든 Rails 애플리케이션이 데이터베이스와 많이 상호 작용하므로 결과적으로 테스트를 수행 할 데이터베이스도 필요합니다. 효율적인 테스트를 작성하려면이 데이터베이스를 설정하고 샘플 데이터로 채우는 방법을 이해해야합니다.</target>
        </trans-unit>
        <trans-unit id="9a2e31fe0f7501188d972dc8b3009118ae147cce" translate="yes" xml:space="preserve">
          <source>Just about every Rails application will interact with a database. You can connect to the database by setting an environment variable &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; or by using a configuration file called &lt;code&gt;config/database.yml&lt;/code&gt;.</source>
          <target state="translated">거의 모든 Rails 애플리케이션이 데이터베이스와 상호 작용합니다. 환경 변수 &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; 을 설정 하거나 &lt;code&gt;config/database.yml&lt;/code&gt; 이라는 구성 파일을 사용하여 데이터베이스에 연결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a6e9bc826bb062c09dd75404c4f004cf69a6b37f" translate="yes" xml:space="preserve">
          <source>Just as with member routes, you can pass &lt;code&gt;:on&lt;/code&gt; to a route:</source>
          <target state="translated">회원 경로와 마찬가지로 &lt;code&gt;:on&lt;/code&gt; 을 경로로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2f3d430d08030c44ea5008d7059f7767a85248fa" translate="yes" xml:space="preserve">
          <source>Just as with validations, it is also possible to skip callbacks by using the following methods:</source>
          <target state="translated">유효성 검사와 마찬가지로 다음 방법을 사용하여 콜백을 건너 뛸 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="65c24c89c19cd55b93be4dd2d2729c2fca34d806" translate="yes" xml:space="preserve">
          <source>Just as you have to filter file names for uploads, you have to do so for downloads. The &lt;code&gt;send_file()&lt;/code&gt; method sends files from the server to the client. If you use a file name, that the user entered, without filtering, any file can be downloaded:</source>
          <target state="translated">업로드를 위해 파일 이름을 필터링해야하는 것처럼 다운로드를 위해 그렇게해야합니다. &lt;code&gt;send_file()&lt;/code&gt; 메소드는 서버에서 클라이언트로 파일을 전송합니다. 필터링없이 사용자가 입력 한 파일 이름을 사용하면 모든 파일을 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7176b43f8be7e97b7f6abc748a4d1ba73e1f076" translate="yes" xml:space="preserve">
          <source>Just as you have to filter file names for uploads, you have to do so for downloads. The send_file() method sends files from the server to the client. If you use a file name, that the user entered, without filtering, any file can be downloaded:</source>
          <target state="translated">업로드 할 파일 이름을 필터링해야하는 것처럼 다운로드 할 때도 그렇게해야합니다. send_file () 메소드는 서버에서 클라이언트로 파일을 보냅니다. 파일 이름을 사용하면 필터링없이 사용자가 입력 한 파일을 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6eba7e48f48826c026364d3ef9033ea0a2ba0cec" translate="yes" xml:space="preserve">
          <source>Just follow the flow and use constant autoloading always, never mix autoloading and &lt;code&gt;require&lt;/code&gt;. As a last resort, if some file absolutely needs to load a certain file use &lt;code&gt;require_dependency&lt;/code&gt; to play nice with constant autoloading. This option is rarely needed in practice, though.</source>
          <target state="translated">흐름을 따르고 항상 일정한 자동 로딩을 사용하고 자동 로딩을 혼합하지 말고 &lt;code&gt;require&lt;/code&gt; . 최후의 수단으로, 일부 파일이 특정 파일을로드해야하는 경우 &lt;code&gt;require_dependency&lt;/code&gt; 를 사용 하여 지속적인 자동 로딩을 즐기십시오. 그러나 실제로는이 옵션이 거의 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a80f691b02f3be73882bc31c3ea73a96722da7ff" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;&lt;code&gt;pluck&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-pick&quot;&gt;&lt;code&gt;pick&lt;/code&gt;&lt;/a&gt; will only load the actual value, not the entire record object, so it's also more efficient. The value is, again like with pluck, typecast by the column type.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;calculations#method-i-pluck&quot;&gt; &lt;code&gt;pluck&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;calculations#method-i-pick&quot;&gt; &lt;code&gt;pick&lt;/code&gt; &lt;/a&gt; 또한보다 효율적으로, 그래서 만, 실제 값이 아닌 레코드 전체 개체를로드합니다. 값은 다시 pluck과 마찬가지로 열 유형별로 형변환됩니다.</target>
        </trans-unit>
        <trans-unit id="c7399cb44559f41a1a38147646227e775691d7d9" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;pluck&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-pick&quot;&gt;pick&lt;/a&gt; will only load the actual value, not the entire record object, so it's also more efficient. The value is, again like with pluck, typecast by the column type.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;뽑은&lt;/a&gt; , &lt;a href=&quot;calculations#method-i-pick&quot;&gt;선택은&lt;/a&gt; 또한보다 효율적으로, 그래서 만, 실제 값이 아닌 레코드 전체 개체를로드합니다. pluck과 마찬가지로 값은 열 유형별로 유형 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="b5142a3258360fa837bbaa68beca75ce9f59b7c8" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;include&lt;/code&gt;, concerns also support &lt;code&gt;prepend&lt;/code&gt; with a corresponding &lt;code&gt;prepended do&lt;/code&gt; callback. &lt;code&gt;module ClassMethods&lt;/code&gt; or &lt;code&gt;class_methods do&lt;/code&gt; are prepended as well.</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; 와 마찬가지로 관심사는 해당하는 &lt;code&gt;prepended do&lt;/code&gt; 콜백이 &lt;code&gt;prepend&lt;/code&gt; 되는 것을 지원 합니다 . &lt;code&gt;module ClassMethods&lt;/code&gt; 또는 &lt;code&gt;class_methods do&lt;/code&gt; 모듈 도 앞에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="671b2bc997bf58b09f7c839fa2e9de6a259349c8" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;where&lt;/code&gt; clauses scopes are merged using &lt;code&gt;AND&lt;/code&gt; conditions.</source>
          <target state="translated">그냥 같은 &lt;code&gt;where&lt;/code&gt; 조항의 범위를 사용하여 병합 &lt;code&gt;AND&lt;/code&gt; 조건.</target>
        </trans-unit>
        <trans-unit id="84d58a3285241049fdc7d2c0d02a7b2fde9d3be1" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;where&lt;/code&gt; clauses, scopes are merged using &lt;code&gt;AND&lt;/code&gt; conditions.</source>
          <target state="translated">&lt;code&gt;where&lt;/code&gt; 절 과 마찬가지로 범위는 &lt;code&gt;AND&lt;/code&gt; 조건을 사용하여 병합 됩니다.</target>
        </trans-unit>
        <trans-unit id="f64914076cb847b94287ce323657522270559d5e" translate="yes" xml:space="preserve">
          <source>Just like controller views, you can also have mailer layouts. The layout name needs to be the same as your mailer, such as &lt;code&gt;user_mailer.html.erb&lt;/code&gt; and &lt;code&gt;user_mailer.text.erb&lt;/code&gt; to be automatically recognized by your mailer as a layout.</source>
          <target state="translated">컨트롤러보기와 마찬가지로 메일러 레이아웃도 가질 수 있습니다. 메일러가 레이아웃으로 자동 인식 하려면 레이아웃 이름은 메일러와 동일해야합니다 (예 : &lt;code&gt;user_mailer.html.erb&lt;/code&gt; 및 &lt;code&gt;user_mailer.text.erb&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="46bee7f81b2f9fe875003c5e26130b06678f387a" translate="yes" xml:space="preserve">
          <source>Just like for &lt;code&gt;app/controllers&lt;/code&gt;, you will find a &lt;code&gt;blorgh&lt;/code&gt; subdirectory under the &lt;code&gt;app/helpers&lt;/code&gt;, &lt;code&gt;app/jobs&lt;/code&gt;, &lt;code&gt;app/mailers&lt;/code&gt; and &lt;code&gt;app/models&lt;/code&gt; directories containing the associated &lt;code&gt;application_*.rb&lt;/code&gt; file for gathering common functionalities. By placing your files under this subdirectory and namespacing your objects, you prevent them from possibly clashing with identically-named elements within other engines or even within the application.</source>
          <target state="translated">&lt;code&gt;app/controllers&lt;/code&gt; 와 마찬가지로 &lt;code&gt;app/helpers&lt;/code&gt; , &lt;code&gt;app/jobs&lt;/code&gt; , &lt;code&gt;app/mailers&lt;/code&gt; 및 &lt;code&gt;app/models&lt;/code&gt; 디렉토리 아래에서 공통 기능을 수집하기위한 관련 &lt;code&gt;application_*.rb&lt;/code&gt; 파일이 포함 된 &lt;code&gt;blorgh&lt;/code&gt; 하위 디렉토리 를 찾을 수 있습니다. 이 하위 디렉토리 아래에 파일을 배치하고 개체의 이름 간격을 지정하면 파일이 다른 엔진 또는 응용 프로그램 내에서 동일한 이름의 요소와 충돌 할 가능성을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0ff75e5509e5833aad29a601299fcb536fb4a17" translate="yes" xml:space="preserve">
          <source>Just like for &lt;code&gt;find_each&lt;/code&gt;, &lt;code&gt;batch_size&lt;/code&gt; establishes how many records will be retrieved in each group. For example, retrieving batches of 2500 records can be specified as:</source>
          <target state="translated">단지에 대한처럼 &lt;code&gt;find_each&lt;/code&gt; , &lt;code&gt;batch_size&lt;/code&gt; 각 그룹에서 검색 될 레코드 수를 설정합니다. 예를 들어, 2500 개 레코드의 일괄 검색을 다음과 같이 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="753554100abd5092cfad1bab450b186806b19dcb" translate="yes" xml:space="preserve">
          <source>Just like the &lt;code&gt;:status&lt;/code&gt; option for &lt;code&gt;render&lt;/code&gt;, &lt;code&gt;:status&lt;/code&gt; for &lt;code&gt;redirect_to&lt;/code&gt; accepts both numeric and symbolic header designations.</source>
          <target state="translated">그냥 같은 &lt;code&gt;:status&lt;/code&gt; 에 대한 옵션을 &lt;code&gt;render&lt;/code&gt; , &lt;code&gt;:status&lt;/code&gt; 에 대한 &lt;code&gt;redirect_to&lt;/code&gt; 는 숫자와 기호 헤더 지정을 모두 받아들입니다.</target>
        </trans-unit>
        <trans-unit id="48a1e320e2900c92a403a1b54619041dc6c7dbb0" translate="yes" xml:space="preserve">
          <source>Just like with controller views, use &lt;code&gt;yield&lt;/code&gt; to render the view inside the layout.</source>
          <target state="translated">컨트롤러보기와 마찬가지로 &lt;code&gt;yield&lt;/code&gt; 를 사용 하여 레이아웃 내부에서보기를 렌더링하십시오.</target>
        </trans-unit>
        <trans-unit id="cfe563ecbc5c2d0727d8e68cb28dba126901d7cb" translate="yes" xml:space="preserve">
          <source>Just provide the polymorphic target type and Active Record will take care of the rest.</source>
          <target state="translated">다형성 대상 유형 만 제공하면 Active Record가 나머지를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="860d8665c7153f5ed86a5af21fcfc9bdf178a9c7" translate="yes" xml:space="preserve">
          <source>Just remember: They'll be gone by the time the next action has been performed.</source>
          <target state="translated">다음 작업이 수행 될 때까지 사라질 것입니다.</target>
        </trans-unit>
        <trans-unit id="dd65c1b4b3e66e765523873bd29cf5d6d6838189" translate="yes" xml:space="preserve">
          <source>KEY</source>
          <target state="translated">KEY</target>
        </trans-unit>
        <trans-unit id="d4539f21502f9a79f091307f97c17b2f1499a26d" translate="yes" xml:space="preserve">
          <source>KILOBYTE</source>
          <target state="translated">KILOBYTE</target>
        </trans-unit>
        <trans-unit id="74f46f9fed362d70b79016c97d7a171bb9094666" translate="yes" xml:space="preserve">
          <source>KV_RE</source>
          <target state="translated">KV_RE</target>
        </trans-unit>
        <trans-unit id="6dc3af60e01355817ee8300ffeb6bf0b63b5301c" translate="yes" xml:space="preserve">
          <source>Karel Minař&amp;iacute;k</source>
          <target state="translated">카렐 미나 릭</target>
        </trans-unit>
        <trans-unit id="e64ba95d856c5ca45c7426d6f65bec414c07937e" translate="yes" xml:space="preserve">
          <source>Keep in mind that database adapters handle certain serialization tasks for you. For instance: &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;jsonb&lt;/code&gt; types in PostgreSQL will be converted between JSON object/array syntax and Ruby &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; objects transparently. There is no need to use &lt;a href=&quot;classmethods#method-i-serialize&quot;&gt;&lt;code&gt;serialize&lt;/code&gt;&lt;/a&gt; in this case.</source>
          <target state="translated">데이터베이스 어댑터는 특정 직렬화 작업을 처리합니다. 예를 들어 PostgreSQL의 &lt;code&gt;json&lt;/code&gt; 및 &lt;code&gt;jsonb&lt;/code&gt; 유형은 JSON 객체 / 배열 구문과 Ruby &lt;code&gt;Hash&lt;/code&gt; 또는 &lt;code&gt;Array&lt;/code&gt; 객체 간에 투명하게 변환됩니다. 이 경우 &lt;a href=&quot;classmethods#method-i-serialize&quot;&gt; &lt;code&gt;serialize&lt;/code&gt; &lt;/a&gt; 를 사용할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ca6310cd242689398be52a0e491b3ffc0905a27a" translate="yes" xml:space="preserve">
          <source>Keep in mind that database adapters handle certain serialization tasks for you. For instance: &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;jsonb&lt;/code&gt; types in PostgreSQL will be converted between JSON object/array syntax and Ruby &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; objects transparently. There is no need to use &lt;a href=&quot;classmethods#method-i-serialize&quot;&gt;serialize&lt;/a&gt; in this case.</source>
          <target state="translated">데이터베이스 어댑터는 특정 직렬화 태스크를 처리합니다. 예를 들어 PostgreSQL의 &lt;code&gt;json&lt;/code&gt; 및 &lt;code&gt;jsonb&lt;/code&gt; 유형은 JSON 객체 / 배열 구문과 Ruby &lt;code&gt;Hash&lt;/code&gt; 또는 &lt;code&gt;Array&lt;/code&gt; 객체 간에 투명하게 변환됩니다. 이 경우 &lt;a href=&quot;classmethods#method-i-serialize&quot;&gt;직렬화&lt;/a&gt; 를 사용할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b37b81146f80a1a4919ec9c9b0e5d0cd85718f8c" translate="yes" xml:space="preserve">
          <source>Keep in mind that removing these middlewares will remove support for certain features in Action Controller.</source>
          <target state="translated">이러한 미들웨어를 제거하면 Action Controller의 특정 기능에 대한 지원이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="f3cd42ebc58551029cf6d64890f34636b5f605b0" translate="yes" xml:space="preserve">
          <source>Keep in mind the order of these preprocessors is important. For example, if you called your JavaScript file &lt;code&gt;app/assets/javascripts/projects.erb.coffee&lt;/code&gt; then it would be processed with the CoffeeScript interpreter first, which wouldn't understand ERB and therefore you would run into problems.</source>
          <target state="translated">이러한 전 처리기의 순서는 중요합니다. 예를 들어 JavaScript 파일 &lt;code&gt;app/assets/javascripts/projects.erb.coffee&lt;/code&gt; 를 호출 한 경우 먼저 CoffeeScript 인터프리터로 처리되므로 ERB를 이해하지 못하므로 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38b50dd97691ece4d75030debc9d7c69689f4370" translate="yes" xml:space="preserve">
          <source>Keep in mind, of course, that anything generated with these commands inside of an engine that has &lt;code&gt;isolate_namespace&lt;/code&gt; in the &lt;code&gt;Engine&lt;/code&gt; class will be namespaced.</source>
          <target state="translated">이 엔진의 내부 이러한 명령으로 생성 된 어떤 것을 물론, 명심 &lt;code&gt;isolate_namespace&lt;/code&gt; 의 &lt;code&gt;Engine&lt;/code&gt; 클래스 네임 스페이스 될 것이다.</target>
        </trans-unit>
        <trans-unit id="811c5671e6f72a16320e58794cbdd505a4a8bfdd" translate="yes" xml:space="preserve">
          <source>Keep your master key safe. Do not commit your master key.</source>
          <target state="translated">마스터 키를 안전하게 유지하십시오. 마스터 키를 커밋하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="5c3ffafd6d0bd987a08e86445a216acb025e6c9e" translate="yes" xml:space="preserve">
          <source>Keeping the Postman in Check</source>
          <target state="translated">우편 배달부 확인</target>
        </trans-unit>
        <trans-unit id="56d925c36d2e941d2af29d231d5dbe9ae819ce7d" translate="yes" xml:space="preserve">
          <source>Keeps an array of all the emails sent out through the Action Mailer with delivery_method :test. Most useful for unit and functional testing.</source>
          <target state="translated">delivery_method : test를 사용하여 Action Mailer를 통해 발송 된 모든 이메일 배열을 유지합니다. 단위 및 기능 테스트에 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="37bcbef0779247a6b500aae75580d306dd7aad75" translate="yes" xml:space="preserve">
          <source>Keeps either the entire current flash or a specific flash entry available for the next action:</source>
          <target state="translated">다음 작업에 전체 플래시 또는 특정 플래시 항목을 사용할 수 있도록 유지합니다.</target>
        </trans-unit>
        <trans-unit id="74808d3df030e992e7b9444241625147986487c1" translate="yes" xml:space="preserve">
          <source>Kernel</source>
          <target state="translated">Kernel</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="dccff3da927cfa30d8263467f25f4099d890d528" translate="yes" xml:space="preserve">
          <source>Key aspects of Ruby constants</source>
          <target state="translated">루비 상수의 주요 측면</target>
        </trans-unit>
        <trans-unit id="bd612611d70de311a74efc2fb60fd72bd02e7463" translate="yes" xml:space="preserve">
          <source>Key prefix</source>
          <target state="translated">키 접두사</target>
        </trans-unit>
        <trans-unit id="1fd3bb93252c4e7c505b9a33e3f33adbbb95274d" translate="yes" xml:space="preserve">
          <source>Key used in the store</source>
          <target state="translated">상점에서 사용되는 키</target>
        </trans-unit>
        <trans-unit id="74018238351de8a4b5f41ef51f98e3f2c94d5837" translate="yes" xml:space="preserve">
          <source>KeyError</source>
          <target state="translated">KeyError</target>
        </trans-unit>
        <trans-unit id="74b7794756029ab4d216c6b5291e0a3c6b00afdc" translate="yes" xml:space="preserve">
          <source>KeyGenerator</source>
          <target state="translated">KeyGenerator</target>
        </trans-unit>
        <trans-unit id="38565bb17684d112a156b97c9fd4c097d914dfef" translate="yes" xml:space="preserve">
          <source>KeyGenerator#generate_key</source>
          <target state="translated">KeyGenerator#generate_key</target>
        </trans-unit>
        <trans-unit id="5e8529f8277cb52ad5e090f3e1129a3e4596b4ad" translate="yes" xml:space="preserve">
          <source>KeyGenerator::new</source>
          <target state="translated">KeyGenerator::new</target>
        </trans-unit>
        <trans-unit id="719e044fe2073788bf09e1d48dfff585870d5f03" translate="yes" xml:space="preserve">
          <source>Keys are Rails &lt;a href=&quot;timezone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; names, values are TZInfo identifiers.</source>
          <target state="translated">키는 Rails &lt;a href=&quot;timezone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt; 이름이고 값은 TZInfo 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="759dc506a4c9361dcdcf96ba09aab32ce67fc6aa" translate="yes" xml:space="preserve">
          <source>Keys are Rails &lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; names, values are TZInfo identifiers.</source>
          <target state="translated">키는 Rails &lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; 이름이고 값은 TZInfo 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="a20d2ee49597daf4669b80fbd8282f66a254453f" translate="yes" xml:space="preserve">
          <source>Keys are always translated into Strings and are case sensitive. When an object is specified as a key and has a &lt;code&gt;cache_key&lt;/code&gt; method defined, this method will be called to define the key. Otherwise, the &lt;code&gt;to_param&lt;/code&gt; method will be called. Hashes and Arrays can also be used as keys. The elements will be delimited by slashes, and the elements within a &lt;a href=&quot;../../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; will be sorted by key so they are consistent.</source>
          <target state="translated">키는 항상 문자열로 변환되며 대소 ​​문자를 구분합니다. 객체가 키로 지정되고 &lt;code&gt;cache_key&lt;/code&gt; 메서드가 정의 된 경우이 메서드가 호출되어 키를 정의합니다. 그렇지 않으면 &lt;code&gt;to_param&lt;/code&gt; 메소드가 호출됩니다. 해시와 배열도 키로 사용할 수 있습니다. 요소는 슬래시로 구분되고 &lt;a href=&quot;../../hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt; 내의 요소 는 키별로 정렬되어 일관성을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="7c91d792d7d8ea478b77ee4fc93f40db3edb4c80" translate="yes" xml:space="preserve">
          <source>Keys are always translated into Strings and are case sensitive. When an object is specified as a key and has a &lt;code&gt;cache_key&lt;/code&gt; method defined, this method will be called to define the key. Otherwise, the &lt;code&gt;to_param&lt;/code&gt; method will be called. Hashes and Arrays can also be used as keys. The elements will be delimited by slashes, and the elements within a &lt;a href=&quot;../../hash&quot;&gt;Hash&lt;/a&gt; will be sorted by key so they are consistent.</source>
          <target state="translated">키는 항상 문자열로 변환되며 대소 ​​문자를 구분합니다. 객체가 키로 지정되고 &lt;code&gt;cache_key&lt;/code&gt; 메소드가 정의되어 있으면 키를 정의하기 위해이 메소드가 호출됩니다. 그렇지 않으면 &lt;code&gt;to_param&lt;/code&gt; 메소드가 호출됩니다. 해시 및 배열도 키로 사용할 수 있습니다. 요소는 슬래시로 구분되며 &lt;a href=&quot;../../hash&quot;&gt;해시&lt;/a&gt; 내의 요소 는 키를 기준으로 정렬되므로 일관성이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="ed45856e9e6ecb02a978d31d54e643eb027da025" translate="yes" xml:space="preserve">
          <source>Keys are truncated with their own SHA2 digest if they exceed 1kB</source>
          <target state="translated">키가 1kB를 초과하면 자체 SHA2 다이제스트로 키가 잘립니다.</target>
        </trans-unit>
        <trans-unit id="6dade8eae87c393093fe35456b0c0546385b2018" translate="yes" xml:space="preserve">
          <source>Keys should normally be unique. If the block returns the same value for different elements no collection is built for that key. The last item will win.</source>
          <target state="translated">키는 일반적으로 고유해야합니다. 블록이 다른 요소에 대해 동일한 값을 반환하면 해당 키에 대한 컬렉션이 작성되지 않습니다. 마지막 아이템이 이길 것입니다.</target>
        </trans-unit>
        <trans-unit id="3c4171878f85224ae8e8085027502b35e802765f" translate="yes" xml:space="preserve">
          <source>Keys with a '_html' suffix and keys named 'html' are marked as HTML safe. When you use them in views the HTML will not be escaped.</source>
          <target state="translated">접미사가 '_html'이고 이름이 'html'인 키는 HTML 안전으로 표시됩니다. 뷰에서 사용하면 HTML이 이스케이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="603962661dd677bfb30ebbf245488be607df467b" translate="yes" xml:space="preserve">
          <source>Knowing this, you can combine &lt;code&gt;select_tag&lt;/code&gt; and &lt;code&gt;options_for_select&lt;/code&gt; to achieve the desired, complete markup:</source>
          <target state="translated">이것을 알면 &lt;code&gt;select_tag&lt;/code&gt; 와 &lt;code&gt;options_for_select&lt;/code&gt; 를 결합 하여 원하는 완전한 마크 업을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b9c048acd3b4935270bc39bf7303395a77e3c631" translate="yes" xml:space="preserve">
          <source>LAST_MODIFIED</source>
          <target state="translated">LAST_MODIFIED</target>
        </trans-unit>
        <trans-unit id="096c41c788487a970ec074e54230e758c0f4c4b5" translate="yes" xml:space="preserve">
          <source>LOCALHOST</source>
          <target state="translated">LOCALHOST</target>
        </trans-unit>
        <trans-unit id="40c3322b3b3d0d946724fe784d34663629e1932a" translate="yes" xml:space="preserve">
          <source>LOCATION</source>
          <target state="translated">LOCATION</target>
        </trans-unit>
        <trans-unit id="f7b234a238285a1f43faf56fe04f8eca0e8187cd" translate="yes" xml:space="preserve">
          <source>LOCK_NOT_AVAILABLE</source>
          <target state="translated">LOCK_NOT_AVAILABLE</target>
        </trans-unit>
        <trans-unit id="098eeaebc4158474bc2be818c08af354bd7af4d9" translate="yes" xml:space="preserve">
          <source>LOOKUP</source>
          <target state="translated">LOOKUP</target>
        </trans-unit>
        <trans-unit id="eea76aa993177151ffe54751f3710090c41018a2" translate="yes" xml:space="preserve">
          <source>Label references for associations (belongs_to, has_one, has_many)</source>
          <target state="translated">연관에 대한 레이블 참조 (long_to, has_one, has_many)</target>
        </trans-unit>
        <trans-unit id="ef1b43b180145d1655abe2acaac47486dfdc28a0" translate="yes" xml:space="preserve">
          <source>Last configurable block to run. Called after frameworks initialize.</source>
          <target state="translated">실행할 마지막 구성 가능한 블록. 프레임 워크가 초기화 된 후에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="091fde44725196b0d7b6b7ede88ee30e526d8fe4" translate="yes" xml:space="preserve">
          <source>Last time we left when the &lt;code&gt;app&lt;/code&gt; method was being defined:</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 메소드가 정의 되었을 때 마지막으로 떠났을 때 :</target>
        </trans-unit>
        <trans-unit id="510f1240320c0b4245e6973ae63e21990f3c7f94" translate="yes" xml:space="preserve">
          <source>Lastly an &lt;code&gt;after_find&lt;/code&gt; and &lt;code&gt;after_initialize&lt;/code&gt; callback is triggered for each object that is found and instantiated by a finder, with &lt;code&gt;after_initialize&lt;/code&gt; being triggered after new objects are instantiated as well.</source>
          <target state="translated">마지막으로 &lt;code&gt;after_find&lt;/code&gt; 및 &lt;code&gt;after_initialize&lt;/code&gt; 콜백은 파인더가 찾고 인스턴스화 한 각 객체에 대해 트리거되며, 새로운 객체도 인스턴스화 한 후에 &lt;code&gt;after_initialize&lt;/code&gt; 가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="a8edffefe23a3b0069154ba211dceaa5589a707c" translate="yes" xml:space="preserve">
          <source>Lastly, for new primary databases you need to set the &lt;code&gt;migrations_paths&lt;/code&gt; to the directory where you will store migrations for that database. We'll look more at &lt;code&gt;migrations_paths&lt;/code&gt; later on in this guide.</source>
          <target state="translated">마지막으로, 새 기본 데이터베이스에 대해 당신은 설정해야 &lt;code&gt;migrations_paths&lt;/code&gt; 를 해당 데이터베이스에 대한 마이그레이션을 저장할 디렉토리. 이 가이드의 뒷부분 에서 &lt;code&gt;migrations_paths&lt;/code&gt; 에 대해 자세히 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="5519aac47c42ea625f3e384185f96f912ddc1ee0" translate="yes" xml:space="preserve">
          <source>Lastly, for new writer databases you need to set the &lt;code&gt;migrations_paths&lt;/code&gt; to the directory where you will store migrations for that database. We'll look more at &lt;code&gt;migrations_paths&lt;/code&gt; later on in this guide.</source>
          <target state="translated">마지막으로, 새로운 작가 데이터베이스에 대해 당신은 설정해야 &lt;code&gt;migrations_paths&lt;/code&gt; 를 해당 데이터베이스에 대한 마이그레이션을 저장할 디렉토리. 이 가이드의 뒷부분 에서 &lt;code&gt;migrations_paths&lt;/code&gt; 에 대해 자세히 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="e11ef8043bdfd5d2effaa0c4ccffaea4aff10bd1" translate="yes" xml:space="preserve">
          <source>Lastly, simple content can be passed as a parameter:</source>
          <target state="translated">마지막으로 간단한 내용을 매개 변수로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1a487af9f0197f34ab23417574667b914a550ec" translate="yes" xml:space="preserve">
          <source>Lastly, the &lt;code&gt;app/views&lt;/code&gt; directory contains a &lt;code&gt;layouts&lt;/code&gt; folder, which contains a file at &lt;code&gt;blorgh/application.html.erb&lt;/code&gt;. This file allows you to specify a layout for the engine. If this engine is to be used as a stand-alone engine, then you would add any customization to its layout in this file, rather than the application's &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; file.</source>
          <target state="translated">마지막으로 &lt;code&gt;app/views&lt;/code&gt; 디렉토리에는 &lt;code&gt;blorgh/application.html.erb&lt;/code&gt; 의 파일이 포함 된 &lt;code&gt;layouts&lt;/code&gt; 폴더가 있습니다 . 이 파일을 사용하면 엔진의 레이아웃을 지정할 수 있습니다. 이 엔진을 독립형 엔진으로 사용하는 경우 애플리케이션의 &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; 파일 이 아닌이 파일의 레이아웃에 사용자 정의를 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="4923e7c21c37b1490f6b455965aed466eb385e5e" translate="yes" xml:space="preserve">
          <source>Lastly, we can specify a default choice for the select box with the &lt;code&gt;:selected&lt;/code&gt; argument:</source>
          <target state="translated">마지막으로 &lt;code&gt;:selected&lt;/code&gt; 인수 를 사용하여 선택 상자에 대한 기본 선택을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf0e45525464dbd04e79c657faf5c6b2fb11c005" translate="yes" xml:space="preserve">
          <source>Lastly, you can use sprintf-style % escapes in the template. This works slightly differently than the previous methods; you are responsible for ensuring that the values in the template are properly quoted. The values are passed to the connector for quoting, but the caller is responsible for ensuring they are enclosed in quotes in the resulting SQL. After quoting, the values are inserted using the same escapes as the Ruby core method &lt;code&gt;Kernel::sprintf&lt;/code&gt;.</source>
          <target state="translated">마지막으로 템플릿에서 sprintf-style % escape를 사용할 수 있습니다. 이것은 이전 방법과 약간 다르게 작동합니다. 템플릿의 값이 올바르게 인용되어 있는지 확인해야합니다. 값은 인용을 위해 커넥터로 전달되지만 호출자는 결과 SQL에서 따옴표로 묶어야합니다. 인용 후, Ruby 핵심 메소드 &lt;code&gt;Kernel::sprintf&lt;/code&gt; 와 동일한 이스케이프를 사용하여 값이 삽입됩니다 .</target>
        </trans-unit>
        <trans-unit id="392c8854d0981f89d43dab619acc0d260db6fa94" translate="yes" xml:space="preserve">
          <source>Later, when the body of the module definition is interpreted, a new entry is created in the constant table of the module object stored in the &lt;code&gt;Colors&lt;/code&gt; constant. That entry maps the name &quot;RED&quot; to the string &quot;0xff0000&quot;.</source>
          <target state="translated">나중에 모듈 정의의 본문이 해석되면 &lt;code&gt;Colors&lt;/code&gt; 상수에 저장된 모듈 객체의 상수 테이블에 새 항목이 작성됩니다 . 이 항목은 이름 &quot;RED&quot;를 문자열 &quot;0xff0000&quot;에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="bec266232611c1ccc105a2b7fb87e8c1a59a2eca" translate="yes" xml:space="preserve">
          <source>Launch the web server again if you stopped it to generate the controller (&lt;code&gt;rails
server&lt;/code&gt;) and navigate to http://localhost:3000 in your browser. You'll see the &quot;Hello, Rails!&quot; message you put into &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;, indicating that this new route is indeed going to &lt;code&gt;WelcomeController&lt;/code&gt;'s &lt;code&gt;index&lt;/code&gt; action and is rendering the view correctly.</source>
          <target state="translated">웹 서버를 중지 한 경우 다시 시작하여 컨트롤러 ( &lt;code&gt;rails server&lt;/code&gt; ) 를 생성하고 브라우저에서 http : // localhost : 3000으로 이동하십시오. &quot;Hello, Rails!&quot;가 표시됩니다. &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt; 에 넣은 메시지 는이 새로운 경로가 실제로 &lt;code&gt;WelcomeController&lt;/code&gt; 의 &lt;code&gt;index&lt;/code&gt; 작업 으로 이동 하여 뷰를 올바르게 렌더링하고 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="af9e4ca75455ed36ae5cba0ec03de1506f297609" translate="yes" xml:space="preserve">
          <source>Launch!</source>
          <target state="translated">Launch!</target>
        </trans-unit>
        <trans-unit id="3b232ddd1deabfdc739b7f19ed66f965ea3e4797" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-c-at&quot;&gt;::at&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; instances can be used when called with a single argument</source>
          <target state="translated">단일 인수로 호출 할 때 &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 및 &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; 인스턴스를 사용할 수 있도록 &lt;a href=&quot;time#method-c-at&quot;&gt;:: at&lt;/a&gt; 에 추가 동작을 계층화합니다.</target>
        </trans-unit>
        <trans-unit id="de73d00b2c752e040525128277ab5e9682434f68" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-c-at&quot;&gt;&lt;code&gt;Time.at&lt;/code&gt;&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; instances can be used when called with a single argument</source>
          <target state="translated">단일 인수로 호출 할 때 &lt;a href=&quot;activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 인스턴스를 사용할 수 있도록 &lt;a href=&quot;time#method-c-at&quot;&gt; &lt;code&gt;Time.at&lt;/code&gt; &lt;/a&gt; 에 추가 동작을 계층화합니다.</target>
        </trans-unit>
        <trans-unit id="450c7c23c31cb0b2f54d83184ce79687a2b74fa0" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-i-eql-3F&quot;&gt;#eql?&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be eql? to an equivalent &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;time#method-i-eql-3F&quot;&gt;#eql&lt;/a&gt; 에 레이어 추가 동작이 있습니까? 그래서 &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 인스턴스가 eql이 될 수 있습니까? 동등한 &lt;a href=&quot;time&quot;&gt;시간&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5a12d9cbeb593495ba2e988c7c8941a3ecb5512c" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-i-eql-3F&quot;&gt;&lt;code&gt;Time#eql?&lt;/code&gt;&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt; instances can be eql? to an equivalent &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;time#method-i-eql-3F&quot;&gt; &lt;code&gt;Time#eql?&lt;/code&gt; &lt;/a&gt; 에서 추가 동작을 계층화합니까? 그래서 &lt;a href=&quot;activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt; 인스턴스는 EQL 할 수 있는가? 동등한 &lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4b38f51a09e969dada758addbb48c5faf21f8a94" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on DateTime#&amp;lt;=&amp;gt; so that &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt; instances can be compared with a &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt; 인스턴스를 &lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 과 비교할 수 있도록 DateTime # &amp;lt;=&amp;gt; 에 추가 동작을 계층화 합니다 .</target>
        </trans-unit>
        <trans-unit id="7d321d86ff6cc58af6defb3f60342a2302fa2218" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on DateTime#&amp;lt;=&amp;gt; so that &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be compared with a &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; 및 &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt; 인스턴스를 &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; 과 비교할 수 있도록 DateTime # &amp;lt;=&amp;gt; 에 추가 동작을 계층화 합니다 .</target>
        </trans-unit>
        <trans-unit id="64305a85ea672eb6ee37a080535d6592fb2e7db8" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on Time#&amp;lt;=&amp;gt; so that &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt; instances can be chronologically compared with a &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">시간에 # 레이어 추가 동작은 &amp;lt;=&amp;gt; 그래서 &lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt; 인스턴스는 날짜순으로 비교 될 수 &lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="29c255a938da046a574f295ca103dddf42d32232" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on Time#&amp;lt;=&amp;gt; so that &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be chronologically compared with a &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;</source>
          <target state="translated">시간에 # 레이어 추가 동작은 &amp;lt;=&amp;gt; 그래서 &lt;a href=&quot;datetime&quot;&gt;날짜 시간&lt;/a&gt; 및 &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone의&lt;/a&gt; 인스턴스는 날짜순으로 비교 될 수 &lt;a href=&quot;time&quot;&gt;시간&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8daa234f4e9273cda7590ab2e63f033cc2e446cd" translate="yes" xml:space="preserve">
          <source>Laying down the groundwork</source>
          <target state="translated">기초를 세우다</target>
        </trans-unit>
        <trans-unit id="ddc2e0175464c8ae5a4d0b334ec3310ddf23aae7" translate="yes" xml:space="preserve">
          <source>Layout assignment</source>
          <target state="translated">레이아웃 할당</target>
        </trans-unit>
        <trans-unit id="01655ad5977ee9d7376ffb682322087942af96db" translate="yes" xml:space="preserve">
          <source>Layout declarations cascade downward in the hierarchy, and more specific layout declarations always override more general ones. For example:</source>
          <target state="translated">레이아웃 선언은 계층 구조에서 아래로 이어지고보다 구체적인 레이아웃 선언은 항상 더 일반적인 선언보다 우선합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="28e6f54e33a1151bfd4c7cc4affd14df3525f2db" translate="yes" xml:space="preserve">
          <source>Layouts</source>
          <target state="translated">Layouts</target>
        </trans-unit>
        <trans-unit id="9c2227b01890429dea82f0435c986a7de2991348" translate="yes" xml:space="preserve">
          <source>Layouts and Rendering in Rails</source>
          <target state="translated">레일의 레이아웃 및 렌더링</target>
        </trans-unit>
        <trans-unit id="5e792861fadd8548975876f8194dfffbf0cb481c" translate="yes" xml:space="preserve">
          <source>Layouts can be used to render a common view template around the results of Rails controller actions. Typically, a Rails application will have a couple of layouts that pages will be rendered within. For example, a site might have one layout for a logged in user and another for the marketing or sales side of the site. The logged in user layout might include top-level navigation that should be present across many controller actions. The sales layout for a SaaS app might include top-level navigation for things like &quot;Pricing&quot; and &quot;Contact Us&quot; pages. You would expect each layout to have a different look and feel. You can read about layouts in more detail in the &lt;a href=&quot;layouts_and_rendering&quot;&gt;Layouts and Rendering in Rails&lt;/a&gt; guide.</source>
          <target state="translated">레이아웃을 사용하여 Rails 컨트롤러 작업 결과에 대한 공통 뷰 템플릿을 렌더링 할 수 있습니다. 일반적으로 Rails 애플리케이션에는 페이지가 렌더링 될 몇 가지 레이아웃이 있습니다. 예를 들어, 사이트에는 로그인 한 사용자를위한 하나의 레이아웃과 사이트의 마케팅 또는 영업을위한 하나의 레이아웃이있을 수 있습니다. 로그인 한 사용자 레이아웃에는 여러 컨트롤러 작업에 걸쳐 있어야하는 최상위 탐색 기능이 포함될 수 있습니다. SaaS 앱의 판매 레이아웃에는 &quot;가격&quot;및 &quot;연락처&quot;페이지와 같은 항목에 대한 최상위 탐색이 포함될 수 있습니다. 각 레이아웃마다 모양과 느낌이 다를 것으로 예상됩니다. &lt;a href=&quot;layouts_and_rendering&quot;&gt;Rails&lt;/a&gt; 의 레이아웃 및 렌더링 안내서 에서 레이아웃 에 대한 자세한 내용을 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="48470ed7993d797dbe5e8d27e23dd9a217c53643" translate="yes" xml:space="preserve">
          <source>Layouts specified at the controller level support the &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; options. These options take either a method name, or an array of method names, corresponding to method names within the controller:</source>
          <target state="translated">컨트롤러 수준에서 지정된 레이아웃은 &lt;code&gt;:only&lt;/code&gt; 및 &lt;code&gt;:except&lt;/code&gt; 옵션을 지원합니다 . 이 옵션은 컨트롤러 내의 메소드 이름에 해당하는 메소드 이름 또는 메소드 이름 배열을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e27583837c86c78aaebaf82c394f36c53e1ccbcf" translate="yes" xml:space="preserve">
          <source>Layouts#action_has_layout?</source>
          <target state="translated">Layouts#action_has_layout?</target>
        </trans-unit>
        <trans-unit id="f7cade8c906e9d8975259c8d26198e469b8c71e4" translate="yes" xml:space="preserve">
          <source>Layouts::ClassMethods</source>
          <target state="translated">Layouts::ClassMethods</target>
        </trans-unit>
        <trans-unit id="5617eb863672173bd45cabc2c17a35b9e442eed4" translate="yes" xml:space="preserve">
          <source>Layouts::ClassMethods#layout</source>
          <target state="translated">Layouts::ClassMethods#layout</target>
        </trans-unit>
        <trans-unit id="dab591e309e317fa64fcc8cc09c071b74932d444" translate="yes" xml:space="preserve">
          <source>Lazily load TZInfo::Timezone instances only when they're needed.</source>
          <target state="translated">TZInfo :: Timezone 인스턴스는 필요할 때만 느리게로드합니다.</target>
        </trans-unit>
        <trans-unit id="4acd3d668558126efd2cfb5861479b741fa7210e" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks</source>
          <target state="translated">LazyLoadHooks</target>
        </trans-unit>
        <trans-unit id="05f23ec34b8f5c1c142321cf9fb3a41254f5ed9b" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks#on_load</source>
          <target state="translated">LazyLoadHooks#on_load</target>
        </trans-unit>
        <trans-unit id="43d15a08d31d62de7b68ddb2009b76398fc6fafd" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks#run_load_hooks</source>
          <target state="translated">LazyLoadHooks#run_load_hooks</target>
        </trans-unit>
        <trans-unit id="f56145331f8573663f749e0585fba9bafdedf906" translate="yes" xml:space="preserve">
          <source>Leading colons would make the first segment absolute rather than relative: &lt;code&gt;::Billing::Invoice&lt;/code&gt;. That would force &lt;code&gt;Billing&lt;/code&gt; to be looked up only as a top-level constant.</source>
          <target state="translated">선도 콜론은 상대보다 절대 아니라 첫 번째 세그먼트를 만들 것 : &lt;code&gt;::Billing::Invoice&lt;/code&gt; . 이로 인해 &lt;code&gt;Billing&lt;/code&gt; 은 최상위 상수로만 조회됩니다.</target>
        </trans-unit>
        <trans-unit id="0205f20e6f02e7e5bf0f090188c3352d3378c901" translate="yes" xml:space="preserve">
          <source>Lean on the protect_from_forgery declaration to mark which actions are due for same-origin request verification. If protect_from_forgery is enabled on an action, this before_action flags its after_action to verify that JavaScript responses are for XHR requests, ensuring they follow the browser's same-origin policy.</source>
          <target state="translated">protect_from_forgery 선언을 통해 동일한 요청의 검증에 필요한 조치를 표시하십시오. 작업에서 protect_from_forgery가 활성화 된 경우이 before_action은 after_action에 플래그를 지정하여 JavaScript 응답이 XHR 요청에 대한 것인지 확인하여 브라우저의 동일한 출처 정책을 준수하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d80449c77af0b47c205fab1563e049bc44130805" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;security#custom-credentials&quot;&gt;managing credentials later in this guide&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;security#custom-credentials&quot;&gt;이 가이드의 뒷부분에서 자격 증명 관리에&lt;/a&gt; 대해 자세히 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="1ad1bc4649e118e58e58b46a15a459da27fdfed7" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;code&gt;redirect_to&lt;/code&gt; and what options you have in &lt;a href=&quot;redirecting&quot;&gt;&lt;code&gt;ActionController::Redirecting&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;redirect_to&lt;/code&gt; 및 &lt;a href=&quot;redirecting&quot;&gt; &lt;code&gt;ActionController::Redirecting&lt;/code&gt; &lt;/a&gt; 에있는 옵션 에 대해 자세히 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="5120024867e2bd45c0226da8ee5ccca4d252aa19" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;code&gt;redirect_to&lt;/code&gt; and what options you have in &lt;a href=&quot;redirecting&quot;&gt;ActionController::Redirecting&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;redirect_to&lt;/code&gt; 및 &lt;a href=&quot;redirecting&quot;&gt;ActionController :: Redirecting&lt;/a&gt; 에있는 옵션 에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="2680ad714bae01fb2a75924986c28aa6fbc21993" translate="yes" xml:space="preserve">
          <source>Learn more about CSRF attacks and securing your application in the &lt;a href=&quot;https://guides.rubyonrails.org/security.html&quot;&gt;Ruby on Rails Security Guide&lt;/a&gt;.</source>
          <target state="translated">CSRF 공격 및 애플리케이션 보안에 대한 자세한 내용은 &lt;a href=&quot;https://guides.rubyonrails.org/security.html&quot;&gt;Ruby on Rails 보안 안내서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d03a367fb887c4a017cd9d70d02779563c3dfabe" translate="yes" xml:space="preserve">
          <source>Learn more about Unobtrusive JavaScript on &lt;a href=&quot;working_with_javascript_in_rails&quot;&gt;Working With JavaScript in Rails&lt;/a&gt; guide.</source>
          <target state="translated">&lt;a href=&quot;working_with_javascript_in_rails&quot;&gt;Rails에서&lt;/a&gt; JavaScript를 사용한 작업 에 대한 눈에 거슬리지 않는 JavaScript에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="3a20c5f3f21fbfde638b451c2ec404f619773284" translate="yes" xml:space="preserve">
          <source>Learn more about credentials with &lt;code&gt;bin/rails credentials:help&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bin/rails credentials:help&lt;/code&gt; 증명이있는 자격 증명에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="49a7c9654d7d32bf1a7434e36ba31c8a9d52bd04" translate="yes" xml:space="preserve">
          <source>Learn more about credentials with &lt;code&gt;rails credentials:help&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rails credentials:help&lt;/code&gt; 증명을 사용하여 자격 증명에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="6087ad887326b13b7e705f0f5b49332398028b13" translate="yes" xml:space="preserve">
          <source>Learn more about other session storages in &lt;a href=&quot;action_controller_overview#session&quot;&gt;Action Controller Overview Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;action_controller_overview#session&quot;&gt;Action Controller 개요 안내서&lt;/a&gt; 에서 다른 세션 스토리지에 대해 자세히 학습하십시오 .</target>
        </trans-unit>
        <trans-unit id="a361189388c27c3316f9ffe0894462c23768bd0d" translate="yes" xml:space="preserve">
          <source>Learning Rack</source>
          <target state="translated">학습 랙</target>
        </trans-unit>
        <trans-unit id="4004c46012ce2e74f00d47a6df53669577458d0c" translate="yes" xml:space="preserve">
          <source>Leaving the hash off gives the wrong link:</source>
          <target state="translated">해시를 그대로두면 잘못된 링크가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="57cabcc429f05e3d4a452b279c39df253df905c9" translate="yes" xml:space="preserve">
          <source>Legacy syntax</source>
          <target state="translated">레거시 구문</target>
        </trans-unit>
        <trans-unit id="fce9208985a0113f6dd633ee81af6e35d8918cff" translate="yes" xml:space="preserve">
          <source>Less File Lookups</source>
          <target state="translated">적은 파일 조회</target>
        </trans-unit>
        <trans-unit id="21025e2c77d6b2c7631c77a921456691873eefc3" translate="yes" xml:space="preserve">
          <source>Let &lt;a href=&quot;proxyobject&quot;&gt;&lt;code&gt;ActiveSupport::ProxyObject&lt;/code&gt;&lt;/a&gt; at least raise exceptions.</source>
          <target state="translated">하자 &lt;a href=&quot;proxyobject&quot;&gt; &lt;code&gt;ActiveSupport::ProxyObject&lt;/code&gt; &lt;/a&gt; 적어도 인상 예외에.</target>
        </trans-unit>
        <trans-unit id="78d8e5ae3e5b6af734ef6545182637310d10213b" translate="yes" xml:space="preserve">
          <source>Let &lt;a href=&quot;proxyobject&quot;&gt;ActiveSupport::ProxyObject&lt;/a&gt; at least raise exceptions.</source>
          <target state="translated">하자 &lt;a href=&quot;proxyobject&quot;&gt;ActiveSupport :: ProxyObject를&lt;/a&gt; 적어도 인상 예외에.</target>
        </trans-unit>
        <trans-unit id="a72602d5db80600fb59df54bed6dd5174594a0dd" translate="yes" xml:space="preserve">
          <source>Let us also move that new comment section out to its own partial. Again, you create a file &lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt; containing:</source>
          <target state="translated">새로운 주석 섹션을 자체 부분으로 옮깁니다. 다시, 다음을 포함하는 &lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt; 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="96a0635a516af1771ae2eb32708ac151fe4aaaf8" translate="yes" xml:space="preserve">
          <source>Let us modify &lt;code&gt;test_should_create_article&lt;/code&gt; test in &lt;code&gt;articles_controller_test.rb&lt;/code&gt; so that all our test pass:</source>
          <target state="translated">&lt;code&gt;articles_controller_test.rb&lt;/code&gt; 에서 &lt;code&gt;test_should_create_article&lt;/code&gt; 테스트를 수정 하여 모든 테스트가 통과하도록합니다.</target>
        </trans-unit>
        <trans-unit id="dab4c465b3545675931666804e362f8235200f4c" translate="yes" xml:space="preserve">
          <source>Let us run this newly added test (where &lt;code&gt;6&lt;/code&gt; is the number of line where the test is defined).</source>
          <target state="translated">새로 추가 된이 테스트를 실행 해 봅시다 (여기서 &lt;code&gt;6&lt;/code&gt; 은 테스트가 정의 된 행 수입니다).</target>
        </trans-unit>
        <trans-unit id="b9fcf90507f73f5eb8f58f17d19d3ae4f2f9910f" translate="yes" xml:space="preserve">
          <source>Let's add a method called &lt;code&gt;welcome_email&lt;/code&gt;, that will send an email to the user's registered email address:</source>
          <target state="translated">&lt;code&gt;welcome_email&lt;/code&gt; 이라는 메소드를 추가 하여 사용자의 등록 된 이메일 주소로 이메일을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="4ce5b9dbf4d8187abe529ddcf55601c38cf4ebe3" translate="yes" xml:space="preserve">
          <source>Let's add a private method to the bottom of &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; named &lt;code&gt;article_params&lt;/code&gt; that filters &lt;code&gt;params&lt;/code&gt;. And let's change &lt;code&gt;create&lt;/code&gt; to use it:</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 를 필터링하는 &lt;code&gt;article_params&lt;/code&gt; 라는 이름 의 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 하단에 private 메서드를 추가해 보겠습니다 . 그리고 그것을 &lt;code&gt;create&lt;/code&gt; 하기 위해 create 를 변경합시다 .</target>
        </trans-unit>
        <trans-unit id="5269d07ce7dd2783f1dedc68e2d3fa0b3123b91c" translate="yes" xml:space="preserve">
          <source>Let's add a replica for the first configuration, and a second database called animals and a replica for that as well. To do this we need to change our &lt;code&gt;database.yml&lt;/code&gt; from a 2-tier to a 3-tier config.</source>
          <target state="translated">첫 번째 구성에 대한 복제본을 추가하고 동물이라는 두 번째 데이터베이스와이를위한 복제본을 추가해 보겠습니다. 이렇게하려면 &lt;code&gt;database.yml&lt;/code&gt; 을 2 계층에서 3 계층 구성 으로 변경해야합니다 .</target>
        </trans-unit>
        <trans-unit id="79e1f74aa6ec7b5a5077c8b42b57bd04f8515dc5" translate="yes" xml:space="preserve">
          <source>Let's add a replica for the primary, a new writer called animals and a replica for that as well. To do this we need to change our &lt;code&gt;database.yml&lt;/code&gt; from a 2-tier to a 3-tier config.</source>
          <target state="translated">기본의 복제본, 동물이라는 새로운 작가 및 복제본을 추가합시다. 이렇게하려면 &lt;code&gt;database.yml&lt;/code&gt; 을 2 계층에서 3 계층 구성 으로 변경해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b48e65eb47d949d7844ff9e16bf80abf6b052f5f" translate="yes" xml:space="preserve">
          <source>Let's add an integration test to our blog application. We'll start with a basic workflow of creating a new blog article, to verify that everything is working properly.</source>
          <target state="translated">블로그 애플리케이션에 통합 테스트를 추가하겠습니다. 모든 블로그가 제대로 작동하는지 확인하기 위해 새 블로그 기사를 작성하는 기본 워크 플로부터 시작하겠습니다.</target>
        </trans-unit>
        <trans-unit id="6e3f79475457cf9a5f2a016839cf6a8e669854a2" translate="yes" xml:space="preserve">
          <source>Let's add links to the other views as well, starting with adding this &quot;New Article&quot; link to &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;, placing it above the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">이 &quot;New Article&quot;링크를 &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; 에 추가하여 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 태그 위에 배치 하여 다른 뷰에 대한 링크를 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="f3740501fd9d5dc2e11e1031b17a964d35358f21" translate="yes" xml:space="preserve">
          <source>Let's add some validations to our model in &lt;code&gt;app/models/article.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;app/models/article.rb&lt;/code&gt; 의 모델에 몇 가지 유효성 검사를 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="49d80491e9eb79684958a135d6d1dcac3770b0de" translate="yes" xml:space="preserve">
          <source>Let's add that &lt;code&gt;show&lt;/code&gt; action now, below the &lt;code&gt;index&lt;/code&gt; action in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;:</source>
          <target state="translated">이제 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 의 &lt;code&gt;index&lt;/code&gt; 작업 아래에 &lt;code&gt;show&lt;/code&gt; 작업을 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="dc3ecee55d65665c35f62547c455cc419b0dc82d" translate="yes" xml:space="preserve">
          <source>Let's also make a text part for this email. Not all clients prefer HTML emails, and so sending both is best practice. To do this, create a file called &lt;code&gt;welcome_email.text.erb&lt;/code&gt; in &lt;code&gt;app/views/user_mailer/&lt;/code&gt;:</source>
          <target state="translated">이 이메일의 텍스트 부분도 만들어 봅시다. 모든 고객이 HTML 이메일을 선호하는 것은 아니므로 둘 다 보내는 것이 가장 좋습니다. 이렇게하려면라는 파일 생성 &lt;code&gt;welcome_email.text.erb&lt;/code&gt; 에서 &lt;code&gt;app/views/user_mailer/&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6dfb10465abe14397694d1ef3fbb975786f3e93d" translate="yes" xml:space="preserve">
          <source>Let's analyze an example to really understand what that means. While common abuses of language like &quot;the &lt;code&gt;String&lt;/code&gt; class&quot; are convenient, the exposition is going to be precise here for didactic purposes.</source>
          <target state="translated">그 의미를 실제로 이해하기 위해 예제를 분석해 봅시다. &quot; &lt;code&gt;String&lt;/code&gt; class&quot; 와 같은 일반적인 언어 남용 은 편리하지만, 설명은 교훈적인 목적으로 여기에서 정확할 것입니다.</target>
        </trans-unit>
        <trans-unit id="f4ce79534391e97d4f4aa9c82cc741ad12c8def6" translate="yes" xml:space="preserve">
          <source>Let's assume we want to deploy our application to &quot;/app1&quot;. Rails needs to know this directory to generate the appropriate routes:</source>
          <target state="translated">&quot;/ app1&quot;에 응용 프로그램을 배포한다고 가정합니다. Rails는 적절한 경로를 생성하기 위해이 디렉토리를 알아야합니다 :</target>
        </trans-unit>
        <trans-unit id="64e9c368d11a718bfea479dfb073f5601b509e2c" translate="yes" xml:space="preserve">
          <source>Let's begin exploring these features by adding more functionality to our application.</source>
          <target state="translated">애플리케이션에 더 많은 기능을 추가하여 이러한 기능을 탐색 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="71b6809eee4e5ad984a6e18c3317f2e1911b1c3f" translate="yes" xml:space="preserve">
          <source>Let's break out some more monkeys and pirates.</source>
          <target state="translated">더 많은 원숭이와 해적을 만들어 봅시다.</target>
        </trans-unit>
        <trans-unit id="0175bd3560f981f045ac3204ff11ccf5cd1e0c8f" translate="yes" xml:space="preserve">
          <source>Let's break this test down so we can understand it.</source>
          <target state="translated">이 테스트를 분석하여 이해할 수있게하겠습니다.</target>
        </trans-unit>
        <trans-unit id="d411cec433d62e9e5131196fc3d8ca677b9020c5" translate="yes" xml:space="preserve">
          <source>Let's consider</source>
          <target state="translated">고려하자</target>
        </trans-unit>
        <trans-unit id="6a2b72ee8dfb84cee80a7035dfdbf117386402d2" translate="yes" xml:space="preserve">
          <source>Let's consider a flight simulator. The application has a default flight model</source>
          <target state="translated">비행 시뮬레이터를 생각해 봅시다. 응용 프로그램에 기본 비행 모델이 있습니다</target>
        </trans-unit>
        <trans-unit id="c00ee8b2221f13d18a00305aa785cc9bb52f8574" translate="yes" xml:space="preserve">
          <source>Let's consider the following module definition:</source>
          <target state="translated">다음 모듈 정의를 고려해 봅시다.</target>
        </trans-unit>
        <trans-unit id="b1a2e958859b8c7457503e9efcd9e0b3492d8f4e" translate="yes" xml:space="preserve">
          <source>Let's consider this initializer:</source>
          <target state="translated">이 이니셜 라이저를 고려해 봅시다.</target>
        </trans-unit>
        <trans-unit id="83f57047aad3e797bd0c389f4e130b37320697a9" translate="yes" xml:space="preserve">
          <source>Let's consider:</source>
          <target state="translated">고려해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="275f8e627215fb48538855450669e0f7b295d120" translate="yes" xml:space="preserve">
          <source>Let's create &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; with the following contents:</source>
          <target state="translated">다음 내용으로 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; 를 만들어 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="c5c35b56547b5b8a93aff7507c46bb9eacc09cc2" translate="yes" xml:space="preserve">
          <source>Let's create &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt;, with the following contents:</source>
          <target state="translated">다음 내용으로 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; 를 만들어 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="c26c7d6fe559c363e03a6bd3159ae8ce188a0ff1" translate="yes" xml:space="preserve">
          <source>Let's create a simple Rails application to step through each of these commands in context.</source>
          <target state="translated">상황에 따라 이러한 각 명령을 단계별로 실행하는 간단한 Rails 애플리케이션을 만들어 봅시다.</target>
        </trans-unit>
        <trans-unit id="f6988e18c816b90155d8f9087dd4ede9ba5d8e76" translate="yes" xml:space="preserve">
          <source>Let's go back to our controller in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;, and change the &lt;code&gt;index&lt;/code&gt; action to fetch all articles from the database:</source>
          <target state="translated">&lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 의 컨트롤러로 돌아가 &lt;code&gt;index&lt;/code&gt; 작업을 변경 하여 데이터베이스에서 모든 기사를 가져 오 겠습니다 .</target>
        </trans-unit>
        <trans-unit id="b1fa58a55971fd9e23ddeee23e8c1d0c89153587" translate="yes" xml:space="preserve">
          <source>Let's imagine that users in some application have login information in the &lt;code&gt;User&lt;/code&gt; model but name and other data in a separate &lt;code&gt;Profile&lt;/code&gt; model:</source>
          <target state="translated">일부 응용 프로그램의 &lt;code&gt;User&lt;/code&gt; 는 사용자 모델 에는 로그인 정보가 있지만 별도의 &lt;code&gt;Profile&lt;/code&gt; 모델 에는 이름과 기타 데이터가 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="21a5e444a84811bf545d3f94d479c8b239f38e28" translate="yes" xml:space="preserve">
          <source>Let's implement the flash message now in our controller. Our &lt;code&gt;:create&lt;/code&gt; action should now look like this:</source>
          <target state="translated">이제 컨트롤러에서 플래시 메시지를 구현해 봅시다. 우리의 &lt;code&gt;:create&lt;/code&gt; 액션은 이제 다음과 같아야합니다 :</target>
        </trans-unit>
        <trans-unit id="b51c46ffa72a597d58c3017405a3b8080b7928f4" translate="yes" xml:space="preserve">
          <source>Let's introduce now a subclass of &lt;code&gt;Rectangle&lt;/code&gt;:</source>
          <target state="translated">이제 &lt;code&gt;Rectangle&lt;/code&gt; 의 서브 클래스를 소개하자 :</target>
        </trans-unit>
        <trans-unit id="a5f04bf3b6464abe4ee0ae36590dbb17b2f0d292" translate="yes" xml:space="preserve">
          <source>Let's launch the console with this command:</source>
          <target state="translated">다음 명령으로 콘솔을 시작해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="559ba613fcdfc3a29ca8db3b5ac8cb93ef9c41f8" translate="yes" xml:space="preserve">
          <source>Let's look at that entry/message/comment example using delegated types:</source>
          <target state="translated">위임 된 유형을 사용하여 해당 항목 / 메시지 / 댓글 예제를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="cd40f9d2fe4074d731d624f45d324731e74d0541" translate="yes" xml:space="preserve">
          <source>Let's look at the code below:</source>
          <target state="translated">아래 코드를 보자.</target>
        </trans-unit>
        <trans-unit id="7588d79a31b685899386a77630023f4aad3bc947" translate="yes" xml:space="preserve">
          <source>Let's look at the full error message again:</source>
          <target state="translated">전체 오류 메시지를 다시 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="db255fe389309039f7483e2c79350e7b43e7b7d4" translate="yes" xml:space="preserve">
          <source>Let's make our own controller with the controller generator. But what command should we use? Let's ask the generator:</source>
          <target state="translated">컨트롤러 생성기를 사용하여 자체 컨트롤러를 만들어 봅시다. 그러나 우리는 어떤 명령을 사용해야합니까? 발전기에게 물어 보자.</target>
        </trans-unit>
        <trans-unit id="f10ea4f39f4b33b53a25bba08b9359f1fcad5b86" translate="yes" xml:space="preserve">
          <source>Let's make the HABTM fixture go away.</source>
          <target state="translated">HABTM 고정 장치를 제거합시다.</target>
        </trans-unit>
        <trans-unit id="f6c736865f2b69edc0a585f4712fc27790bfde32" translate="yes" xml:space="preserve">
          <source>Let's open &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;, and replace its contents with:</source>
          <target state="translated">&lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; 를 열고 그 내용을 다음으로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="03c41edf8d63eb5f66d09a27b4b72a81e8237307" translate="yes" xml:space="preserve">
          <source>Let's open &lt;code&gt;config/routes.rb&lt;/code&gt;, and add the following &lt;code&gt;root&lt;/code&gt; route to the top of the &lt;code&gt;Rails.application.routes.draw&lt;/code&gt; block:</source>
          <target state="translated">&lt;code&gt;config/routes.rb&lt;/code&gt; 를 열고 &lt;code&gt;Rails.application.routes.draw&lt;/code&gt; 블록 의 맨 위에 다음 &lt;code&gt;root&lt;/code&gt; 경로를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="12cc34bba418576d5afbcf4876a26da69dfbbc5d" translate="yes" xml:space="preserve">
          <source>Let's run our migration with the following command:</source>
          <target state="translated">다음 명령을 사용하여 마이그레이션을 실행 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="af3c0983643d82f65dfb7da47772af56e8bae72d" translate="yes" xml:space="preserve">
          <source>Let's say the &lt;code&gt;users&lt;/code&gt; table has &lt;code&gt;id&lt;/code&gt; as the primary_key but it also has a &lt;code&gt;guid&lt;/code&gt; column. The requirement is that the &lt;code&gt;todos&lt;/code&gt; table should hold the &lt;code&gt;guid&lt;/code&gt; column value as the foreign key and not &lt;code&gt;id&lt;/code&gt; value. This can be achieved like this:</source>
          <target state="translated">하자가 말하는 &lt;code&gt;users&lt;/code&gt; 테이블이 &lt;code&gt;id&lt;/code&gt; primary_key와 같은를하지만 그것도가 &lt;code&gt;guid&lt;/code&gt; 열을. 요구 사항은 것입니다 &lt;code&gt;todos&lt;/code&gt; 표는 보유해야 &lt;code&gt;guid&lt;/code&gt; 외래 키와하지 열 값 &lt;code&gt;id&lt;/code&gt; 값입니다. 이것은 다음과 같이 달성 될 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="8aaa8fd90fd44344aa5ea74de6918d0b560e4441" translate="yes" xml:space="preserve">
          <source>Let's say we have an application with a single primary database and we need to add a new database for some new tables we're adding. The name of the new database will be &quot;animals&quot;.</source>
          <target state="translated">기본 데이터베이스가 하나 인 응용 프로그램이 있고 추가 할 새 테이블에 대해 새 데이터베이스를 추가해야한다고 가정 해 보겠습니다. 새 데이터베이스의 이름은 &quot;animals&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="bd81cf4522c612f7be3acc9b2e606c7cff8434c1" translate="yes" xml:space="preserve">
          <source>Let's say we have an application with a single writer database and we need to add a new database for some new tables we're adding. The name of the new database will be &quot;animals&quot;.</source>
          <target state="translated">단일 작성기 데이터베이스가있는 응용 프로그램이 있고 추가 할 일부 새 테이블에 대해 새 데이터베이스를 추가해야한다고 가정 해 보겠습니다. 새 데이터베이스의 이름은 &quot;animals&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="c507f5be5e78ef25fd1568f5682ddaeb10c8c2e4" translate="yes" xml:space="preserve">
          <source>Let's say we want to render a form with a set of fields for each of a person's addresses. The &lt;code&gt;fields_for&lt;/code&gt; helper and its &lt;code&gt;:index&lt;/code&gt; argument can assist with this:</source>
          <target state="translated">각 개인의 주소에 대한 필드 집합이있는 양식을 렌더링한다고 가정 해 보겠습니다. &lt;code&gt;fields_for&lt;/code&gt; 헬퍼와 &lt;code&gt;:index&lt;/code&gt; 이 지원할 수 있습니다 인수 :</target>
        </trans-unit>
        <trans-unit id="e62d2d4961a0889a900d5b7d7deb016aa106cbd4" translate="yes" xml:space="preserve">
          <source>Let's say we're displaying an article on a page which should be wrapped in a &lt;code&gt;div&lt;/code&gt; for display purposes. Firstly, we'll create a new &lt;code&gt;Article&lt;/code&gt;:</source>
          <target state="translated">표시 목적으로 &lt;code&gt;div&lt;/code&gt; 로 묶어야 하는 기사를 페이지에 표시한다고 가정 해 봅시다 . 먼저 새 &lt;code&gt;Article&lt;/code&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="8579674d7daf7815627e340f71121460d49e4cb2" translate="yes" xml:space="preserve">
          <source>Let's say we're in the &lt;code&gt;http://www.example.com/products&lt;/code&gt; action with method POST in case of invalid product.</source>
          <target state="translated">잘못된 제품의 경우 POST 메소드 를 사용하여 &lt;code&gt;http://www.example.com/products&lt;/code&gt; 작업 에 있다고 가정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="8aec0ccffe5b428a6cb21a91e46b9704b1b5f7fb" translate="yes" xml:space="preserve">
          <source>Let's say we're in the &lt;code&gt;http://www.example.com/shop/checkout?order=desc&amp;amp;page=1&lt;/code&gt; action.</source>
          <target state="translated">&lt;code&gt;http://www.example.com/shop/checkout?order=desc&amp;amp;page=1&lt;/code&gt; 작업 에 있다고 가정하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="f3e0d2a71301db441896e1ffdd4d512f4c884fe7" translate="yes" xml:space="preserve">
          <source>Let's say you have a &lt;em&gt;BooksController&lt;/em&gt; in your application. Your &lt;em&gt;index&lt;/em&gt; action renders content in &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; template. When you put a &lt;em&gt;localized variant&lt;/em&gt; of this template: &lt;code&gt;index.es.html.erb&lt;/code&gt; in the same directory, Rails will render content in this template, when the locale is set to &lt;code&gt;:es&lt;/code&gt;. When the locale is set to the default locale, the generic &lt;code&gt;index.html.erb&lt;/code&gt; view will be used. (Future Rails versions may well bring this &lt;em&gt;automagic&lt;/em&gt; localization to assets in &lt;code&gt;public&lt;/code&gt;, etc.)</source>
          <target state="translated">응용 프로그램에 &lt;em&gt;BooksController&lt;/em&gt; 가 있다고 가정 해 봅시다 . 귀하의 &lt;em&gt;색인&lt;/em&gt; 작업은 콘텐츠 렌더링 &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; 템플릿을. 이 디렉토리 의 &lt;em&gt;현지화 된 변형&lt;/em&gt; : &lt;code&gt;index.es.html.erb&lt;/code&gt; 를 동일한 디렉토리에 놓으면 Rails는 로케일이 &lt;code&gt;:es&lt;/code&gt; 로 설정 될 때이 템플리트의 컨텐츠를 렌더링합니다 . 로케일이 기본 로케일로 설정되면 일반 &lt;code&gt;index.html.erb&lt;/code&gt; 보기가 사용됩니다. (Future Rails 버전은 이러한 &lt;em&gt;자동&lt;/em&gt; 현지화를 &lt;code&gt;public&lt;/code&gt; 자산 등 &lt;em&gt;으로&lt;/em&gt; 가져올 수 있습니다 .)</target>
        </trans-unit>
        <trans-unit id="46e0bd3737a3ceb5c11cdc9352d2399ab7de05d4" translate="yes" xml:space="preserve">
          <source>Let's say you have a navigation menu&amp;hellip;</source>
          <target state="translated">탐색 메뉴가 있다고 가정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="177e78ab7407be2c090f5ae68f3c072dc96edece" translate="yes" xml:space="preserve">
          <source>Let's say you like using &lt;code&gt;Object#not_nil?&lt;/code&gt; and &lt;code&gt;Object#not_blank?&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Object#not_nil?&lt;/code&gt; 을 좋아한다고 가정 해 봅시다 . and &lt;code&gt;Object#not_blank?&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c9cd3934a0abc016ddefcdb09c99e8dd9ccffe99" translate="yes" xml:space="preserve">
          <source>Let's see for example the definition of the &lt;code&gt;caches_action&lt;/code&gt; controller macro:</source>
          <target state="translated">예를 들어 &lt;code&gt;caches_action&lt;/code&gt; 컨트롤러 매크로 의 정의를 보자 .</target>
        </trans-unit>
        <trans-unit id="dda5f06059ddbf981e8fa7bfde1dfc2d0115a597" translate="yes" xml:space="preserve">
          <source>Let's see how Rails autoloads the &lt;code&gt;Post&lt;/code&gt; constant in the &lt;code&gt;PostsController&lt;/code&gt; above assuming the application has a &lt;code&gt;Post&lt;/code&gt; model defined in &lt;code&gt;app/models/post.rb&lt;/code&gt;.</source>
          <target state="translated">애플리케이션 에 &lt;code&gt;app/models/post.rb&lt;/code&gt; 에 정의 된 &lt;code&gt;Post&lt;/code&gt; 모델 이 있다고 가정하고 위 의 &lt;code&gt;PostsController&lt;/code&gt; 에서 Rails가 &lt;code&gt;Post&lt;/code&gt; 상수를 자동로드하는 방법을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="9ba493509a4d442db810ba55cc1cd484277e3bf9" translate="yes" xml:space="preserve">
          <source>Let's see other situations that involve stale class or module objects.</source>
          <target state="translated">부실한 클래스 또는 모듈 개체와 관련된 다른 상황을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="1212c891c1276d0d0922365aee5189e87122dcb9" translate="yes" xml:space="preserve">
          <source>Let's see the interface Rails created for us.</source>
          <target state="translated">우리를 위해 생성 된 Rails 인터페이스를 보자.</target>
        </trans-unit>
        <trans-unit id="7c9f75a14a6a8fa84a573b0eb3a6e227e9516c06" translate="yes" xml:space="preserve">
          <source>Let's see what a &lt;code&gt;--git&lt;/code&gt; option and a &lt;code&gt;--database=postgresql&lt;/code&gt; option will do for us:</source>
          <target state="translated">&lt;code&gt;--git&lt;/code&gt; 옵션과 &lt;code&gt;--database=postgresql&lt;/code&gt; 옵션이 우리에게 어떤 역할을하는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="fc7d11799d172423de5d1b9f3034efdcb44fe82b" translate="yes" xml:space="preserve">
          <source>Let's start by adding a route to our routes file, &lt;code&gt;config/routes.rb&lt;/code&gt;, at the top of the &lt;code&gt;Rails.application.routes.draw&lt;/code&gt; block:</source>
          <target state="translated">&lt;code&gt;Rails.application.routes.draw&lt;/code&gt; 블록 의 상단에있는 경로 파일 &lt;code&gt;config/routes.rb&lt;/code&gt; 에 경로를 추가하여 시작하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="2463f5acabbb86e1902e7e40a13ca91e4485de9b" translate="yes" xml:space="preserve">
          <source>Let's start by adding this assertion to our &lt;code&gt;test_should_create_article&lt;/code&gt; test:</source>
          <target state="translated">이 어설 션을 &lt;code&gt;test_should_create_article&lt;/code&gt; 테스트 에 추가하여 시작하겠습니다 :</target>
        </trans-unit>
        <trans-unit id="7dd25355c3943d701e459ca69a67dd4b4635c625" translate="yes" xml:space="preserve">
          <source>Let's start to boot and initialize the app. A Rails application is usually started by running &lt;code&gt;bin/rails console&lt;/code&gt; or &lt;code&gt;bin/rails server&lt;/code&gt;.</source>
          <target state="translated">앱을 부팅하고 초기화 해 보겠습니다. Rails 애플리케이션은 일반적으로 &lt;code&gt;bin/rails console&lt;/code&gt; 또는 &lt;code&gt;bin/rails server&lt;/code&gt; 를 실행하여 시작됩니다 .</target>
        </trans-unit>
        <trans-unit id="679242afe97967bee95cf933ac25ed6b6adeee4c" translate="yes" xml:space="preserve">
          <source>Let's start to boot and initialize the app. A Rails application is usually started by running &lt;code&gt;rails console&lt;/code&gt; or &lt;code&gt;rails server&lt;/code&gt;.</source>
          <target state="translated">앱을 부팅하고 초기화 해 봅시다. Rails 응용 프로그램은 보통 &lt;code&gt;rails console&lt;/code&gt; 또는 &lt;code&gt;rails server&lt;/code&gt; 실행하여 시작됩니다 .</target>
        </trans-unit>
        <trans-unit id="26bbb36043b4b51caaf53b4eb429bbb3cd71c66a" translate="yes" xml:space="preserve">
          <source>Let's suppose that you were making a Karaoke machine and a user wants to get the lyrics for a particular song. Each &lt;code&gt;Song&lt;/code&gt; has a particular number of lines and each line takes time &lt;code&gt;num_beats&lt;/code&gt; to finish singing.</source>
          <target state="translated">가라오케 기계를 만들고 있는데 사용자가 특정 노래의 가사를 원한다고 가정합니다. 각 &lt;code&gt;Song&lt;/code&gt; 에는 특정 수의 라인이 있으며 각 라인은 노래를 완료하는 데 &lt;code&gt;num_beats&lt;/code&gt; 시간이 걸립니다 .</target>
        </trans-unit>
        <trans-unit id="b39773d51d4340138e114edc90a5ea57419ae99d" translate="yes" xml:space="preserve">
          <source>Let's suppose the following snippet creates a class (rather than reopening it):</source>
          <target state="translated">다음 스 니펫이 클래스를 다시 열지 않고 클래스를 작성한다고 가정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="57e26fc7533f565888b3ecfca314d023ce8533a2" translate="yes" xml:space="preserve">
          <source>Let's suppose we have these class definitions:</source>
          <target state="translated">다음과 같은 클래스 정의가 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="a4090c16fa4ca8c22ac98f2731e3303c82f681b4" translate="yes" xml:space="preserve">
          <source>Let's suppose you are creating a generator that needs to invoke the controller generator from test unit. Your first attempt is:</source>
          <target state="translated">테스트 장치에서 컨트롤러 생성기를 호출해야하는 생성기를 생성한다고 가정 해 봅시다. 첫 번째 시도는 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="b8d8dd280572f4245c2f9798e4cf4307d53e5d5a" translate="yes" xml:space="preserve">
          <source>Let's take a look at one such test, &lt;code&gt;test_should_get_index&lt;/code&gt; from the file &lt;code&gt;articles_controller_test.rb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;articles_controller_test.rb&lt;/code&gt; 파일에서 &lt;code&gt;test_should_get_index&lt;/code&gt; 와 같은 테스트를 살펴 보자 .</target>
        </trans-unit>
        <trans-unit id="fb7b003a2624199393e36191ea09f4b342435f64" translate="yes" xml:space="preserve">
          <source>Let's take a look at some of the things that Rails provides out of the box that are still applicable to API applications.</source>
          <target state="translated">API 애플리케이션에 여전히 적용 할 수있는 Rails가 기본적으로 제공하는 것들을 살펴 보자.</target>
        </trans-unit>
        <trans-unit id="54cb16d6149c7c86f795cf72402bada64d93b4dc" translate="yes" xml:space="preserve">
          <source>Let's take a look at the contents of our new migration file:</source>
          <target state="translated">새 마이그레이션 파일의 내용을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="563872689b7d13f35f84ce3e7c9d9cb69f5f4742" translate="yes" xml:space="preserve">
          <source>Let's take a look at what Rails does by default when creating a new resource using the scaffold generator:</source>
          <target state="translated">스캐 폴드 생성기를 사용하여 새 리소스를 생성 할 때 Rails가 기본적으로 수행하는 작업을 살펴 ​​보겠습니다.</target>
        </trans-unit>
        <trans-unit id="2b61280695474ba2f4d47ae92ae0ee897d8bc51b" translate="yes" xml:space="preserve">
          <source>Let's take for example this non-persisted object.</source>
          <target state="translated">이 비 지속적 객체를 예로 들어 봅시다.</target>
        </trans-unit>
        <trans-unit id="97b75242b93becb500d73edfceaaad470ab7fc77" translate="yes" xml:space="preserve">
          <source>Let's talk about unit tests. Unit tests are code that tests and makes assertions about code. In unit testing, we take a little part of code, say a method of a model, and test its inputs and outputs. Unit tests are your friend. The sooner you make peace with the fact that your quality of life will drastically increase when you unit test your code, the better. Seriously. Please visit &lt;a href=&quot;https://guides.rubyonrails.org/testing.html&quot;&gt;the testing guide&lt;/a&gt; for an in-depth look at unit testing.</source>
          <target state="translated">단위 테스트에 대해 이야기합시다. 단위 테스트는 코드를 테스트하고 어설 션하는 코드입니다. 단위 테스트에서 우리는 코드의 일부를 취하여 모델의 방법을 말하고 입력 및 출력을 테스트합니다. 단위 테스트는 당신의 친구입니다. 코드를 단위 테스트 할 때 삶의 질이 크게 향상된다는 사실로 더 빨리 평화를 얻을 수 있습니다. 진심으로. 단위 테스트에 대한 자세한 내용 &lt;a href=&quot;https://guides.rubyonrails.org/testing.html&quot;&gt;은 테스트 안내서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="92e8aa44e8687f3418392049e0642466f90f0ccb" translate="yes" xml:space="preserve">
          <source>Let's update &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; to use the partial via &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/RenderingHelper.html#method-i-render&quot;&gt;&lt;code&gt;render&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/RenderingHelper.html#method-i-render&quot;&gt; &lt;code&gt;render&lt;/code&gt; &lt;/a&gt; 를 통해 부분을 사용하도록 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; 를 업데이트합시다 .</target>
        </trans-unit>
        <trans-unit id="fd189d590d8b1b050d1f34adacad7d94c39e61b0" translate="yes" xml:space="preserve">
          <source>Let's use the act of logging out as an example. The controller can send a message which will be displayed to the user on the next request:</source>
          <target state="translated">로그 아웃을 예로 들어 봅시다. 컨트롤러는 다음 요청시 사용자에게 표시 될 메시지를 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a7302ab1c8547352066ed26da2374047cdadc44" translate="yes" xml:space="preserve">
          <source>Let's wire up the &lt;code&gt;create&lt;/code&gt; in &lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt; 에 &lt;code&gt;create&lt;/code&gt; 를 연결해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="992a5765c7ceef439caa841de820744520c02dab" translate="yes" xml:space="preserve">
          <source>Let's write a test for the &lt;code&gt;:show&lt;/code&gt; action:</source>
          <target state="translated">&lt;code&gt;:show&lt;/code&gt; 액션에 대한 테스트를 작성해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="87f073daffb250fdd9420bb580aebdaf208071cd" translate="yes" xml:space="preserve">
          <source>Lets you find a record based on a signed id that's safe to put into the world without risk of tampering. This is particularly useful for things like password reset or email verification, where you want the bearer of the signed id to be able to interact with the underlying record, but usually only within a certain time period.</source>
          <target state="translated">변조의 위험없이 세상에 안전하게 보관할 수있는 서명 된 ID를 기반으로 레코드를 찾을 수 있습니다. 이것은 특히 서명 된 ID의 소유자가 기본 레코드와 상호 작용할 수 있도록하려는 암호 재설정 또는 이메일 확인과 같은 작업에 유용하지만 일반적으로 특정 기간 내에서만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="6388e2763a8787438175ea44759b7a341170f551" translate="yes" xml:space="preserve">
          <source>Lets you selectively disable calls to &lt;code&gt;touch&lt;/code&gt; for the duration of a block.</source>
          <target state="translated">블록 지속 시간 동안 &lt;code&gt;touch&lt;/code&gt; 하여 통화를 선택적으로 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8acbdbc31bdc854cb88cd725315b1b68aca7a0e7" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.</source>
          <target state="translated">Creative Commons Attribution-ShareAlike 4.0 국제 라이센스에 따라 라이센스가 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="32e831ee28a53c1c45723507c4a82ba362ea3fda" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;collectionproxy#method-i-create&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/a&gt;, except that if the record is invalid, raises an exception.</source>
          <target state="translated">처럼 &lt;a href=&quot;collectionproxy#method-i-create&quot;&gt; &lt;code&gt;create&lt;/code&gt; &lt;/a&gt; 레코드가 유효하지 않은 경우, 예외가 발생하는 것을 제외하고.</target>
        </trans-unit>
        <trans-unit id="90c56b68f39e7603a156bfa82a13c020a53c399d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;collectionproxy#method-i-create&quot;&gt;create&lt;/a&gt;, except that if the record is invalid, raises an exception.</source>
          <target state="translated">레코드가 유효하지 않은 경우 예외가 발생한다는 점을 제외하고는 &lt;a href=&quot;collectionproxy#method-i-create&quot;&gt;create&lt;/a&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="e5e27ba900b5fb80f69ace324b1132ba4d11debd" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;findermethods#method-i-find_by&quot;&gt;&lt;code&gt;find_by&lt;/code&gt;&lt;/a&gt;, except that if no record is found, raises an &lt;a href=&quot;recordnotfound&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">레코드를 찾을 수없는 경우를 제외하고 &lt;a href=&quot;findermethods#method-i-find_by&quot;&gt; &lt;code&gt;find_by&lt;/code&gt; &lt;/a&gt; 와 유사하게 &lt;a href=&quot;recordnotfound&quot;&gt; &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f82455ed657d40dfabb8a5dd6261584322dd09d7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;findermethods#method-i-find_by&quot;&gt;find_by&lt;/a&gt;, except that if no record is found, raises an &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt; error.</source>
          <target state="translated">&lt;a href=&quot;findermethods#method-i-find_by&quot;&gt;find_by&lt;/a&gt; 와 같이 레코드가 없으면 &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord :: RecordNotFound&lt;/a&gt; 오류가 발생 한다는 점을 제외하고 .</target>
        </trans-unit>
        <trans-unit id="d9b86ca0bc1a7db98401d8b8dff3fcec3da819a7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;&lt;code&gt;create_or_find_by&lt;/code&gt;&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt; &lt;code&gt;create_or_find_by&lt;/code&gt; &lt;/a&gt; 하지만 전화는 &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;만들! &lt;/a&gt;따라서 생성 된 레코드가 유효하지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1a36c87f81f627d65cc615f8ae7a9afdbe70794c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="translated">마찬가지로 &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt; 하지만 전화는 &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;만들! &lt;/a&gt;따라서 작성된 레코드가 유효하지 않은 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5ce3efea0686417adc5b92aeb46eb41818eec203" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;&lt;code&gt;find_or_create_by&lt;/code&gt;&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="translated">&lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt; &lt;code&gt;find_or_create_by&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create를&lt;/a&gt; 호출합니다 ! 따라서 생성 된 레코드가 유효하지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="813158c643b69edd68c1fa60c2e540a0b6a2d978" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;&lt;code&gt;find_or_create_by&lt;/code&gt;&lt;/a&gt;, but calls new instead of &lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;create&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt; &lt;code&gt;find_or_create_by&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 &lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;create&lt;/a&gt; 대신 new를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="838678c204cb7edc7ae37ac099a5e73f3f667073" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="translated">&lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt; 와 비슷 하지만 &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create&lt;/a&gt; 호출 ! 따라서 작성된 레코드가 유효하지 않은 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f8856f0a8b7199b002c8122ad2fcd4604b1d6719" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but calls new instead of &lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;create&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt; 와 비슷 하지만 &lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;create&lt;/a&gt; 대신 new를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="981e81b63a865974c1cebae7d45b847c46d0c320" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;distance_of_time_in_words&lt;/code&gt;, but where &lt;code&gt;to_time&lt;/code&gt; is fixed to &lt;code&gt;Time.now&lt;/code&gt;.</source>
          <target state="translated">마찬가지로 &lt;code&gt;distance_of_time_in_words&lt;/code&gt; 하지만 어디 &lt;code&gt;to_time&lt;/code&gt; 고정되어 &lt;code&gt;Time.now&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd2abf706df47832d72f8c321855ea5fb7e3691b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;merge&lt;/code&gt; but the other way around: Merges the receiver into the argument and returns a new hash with indifferent access as result:</source>
          <target state="translated">마찬가지로 &lt;code&gt;merge&lt;/code&gt; 하지만 주변에 다른 방법 : 병합 인수 및 반환 결과로 무관심 액세스 할 수있는 새로운 해시에 수신기 :</target>
        </trans-unit>
        <trans-unit id="1945f3936ef206114971a0591dc706d5e224d076" translate="yes" xml:space="preserve">
          <source>Like Action Controller, each mailer class has a corresponding view directory in which each method of the class looks for a template with its name.</source>
          <target state="translated">Action Controller와 마찬가지로 각 메일러 클래스에는 해당 클래스의 각 메소드가 이름이있는 템플리트를 찾는 해당보기 디렉토리가 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ffafe203ca6452b9469b0ee8ef3f5bd66cb64c9" translate="yes" xml:space="preserve">
          <source>Like all of the other components of an engine, the assets should be namespaced. This means that if you have an asset called &lt;code&gt;style.css&lt;/code&gt;, it should be placed at &lt;code&gt;app/assets/stylesheets/[engine name]/style.css&lt;/code&gt;, rather than &lt;code&gt;app/assets/stylesheets/style.css&lt;/code&gt;. If this asset isn't namespaced, there is a possibility that the host application could have an asset named identically, in which case the application's asset would take precedence and the engine's one would be ignored.</source>
          <target state="translated">엔진의 다른 모든 구성 요소와 마찬가지로 자산의 이름은 네임 스페이스 여야합니다. 즉 , &lt;code&gt;style.css&lt;/code&gt; 라는 자산이있는 경우 &lt;code&gt;app/assets/stylesheets/style.css&lt;/code&gt; 대신 &lt;code&gt;app/assets/stylesheets/[engine name]/style.css&lt;/code&gt; 에 배치해야합니다 . 이 자산의 이름이 네임 스페이스가 아닌 경우 호스트 애플리케이션에 동일한 이름의 자산이있을 수 있습니다.이 경우 애플리케이션의 자산이 우선하고 엔진의 자산이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9d575f43f40942a50e4f39a888b719fa5e7f6f38" translate="yes" xml:space="preserve">
          <source>Like all other validations, &lt;code&gt;validates_with&lt;/code&gt; takes the &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt; and &lt;code&gt;:on&lt;/code&gt; options. If you pass any other options, it will send those options to the validator class as &lt;code&gt;options&lt;/code&gt;:</source>
          <target state="translated">다른 모든 유효성 검사와 마찬가지로 &lt;code&gt;validates_with&lt;/code&gt; 는 &lt;code&gt;:if&lt;/code&gt; , &lt;code&gt;:unless&lt;/code&gt; 및 &lt;code&gt;:on&lt;/code&gt; 옵션을 사용합니다. 당신이 다른 옵션을 전달하는 경우는 발리 클래스에 해당 옵션 보내드립니다 &lt;code&gt;options&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="01fcd4d2ae4700b5f2465b1ff92871077189f820" translate="yes" xml:space="preserve">
          <source>Like an &lt;code&gt;image_tag&lt;/code&gt; you can supply a path, either absolute, or relative to the &lt;code&gt;public/videos&lt;/code&gt; directory. Additionally you can specify the &lt;code&gt;size: &quot;#{width}x#{height}&quot;&lt;/code&gt; option just like an &lt;code&gt;image_tag&lt;/code&gt;. Video tags can also have any of the HTML options specified at the end (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; et al).</source>
          <target state="translated">&lt;code&gt;image_tag&lt;/code&gt; 와 같이 경로를 절대 또는 &lt;code&gt;public/videos&lt;/code&gt; 디렉토리 와 관련하여 제공 할 수 있습니다 . 또한 &lt;code&gt;image_tag&lt;/code&gt; 와 같이 &lt;code&gt;size: &quot;#{width}x#{height}&quot;&lt;/code&gt; 옵션을 지정할 수 있습니다. 비디오 태그는 끝에 지정된 HTML 옵션 ( &lt;code&gt;id&lt;/code&gt; , &lt;code&gt;class&lt;/code&gt; 등) 도 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2ebbef68061adecb878f7d42134a495f64524522" translate="yes" xml:space="preserve">
          <source>Like everything else in your Rails application, you can test your routes. Route tests reside in &lt;code&gt;test/controllers/&lt;/code&gt; or are part of controller tests.</source>
          <target state="translated">Rails 애플리케이션의 다른 모든 것들과 마찬가지로 경로를 테스트 할 수 있습니다. 경로 테스트는 &lt;code&gt;test/controllers/&lt;/code&gt; 있거나 컨트롤러 테스트의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="aee8e6aaa6eb1e9d33d334a7bfe242f7cc49970c" translate="yes" xml:space="preserve">
          <source>Like interceptors, you need to register observers with the Action Mailer framework. You can do this in an initializer file &lt;code&gt;config/initializers/email_delivery_observer.rb&lt;/code&gt;</source>
          <target state="translated">인터셉터와 마찬가지로 Action Mailer 프레임 워크에 옵저버를 등록해야합니다. 이니셜 라이저 파일 &lt;code&gt;config/initializers/email_delivery_observer.rb&lt;/code&gt; 에서이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91c20106ed1d5b3e7ee5eb18cac235356a844f06" translate="yes" xml:space="preserve">
          <source>Like other &lt;code&gt;before_*&lt;/code&gt; callbacks if &lt;code&gt;before_validation&lt;/code&gt; throws &lt;code&gt;:abort&lt;/code&gt; then &lt;code&gt;valid?&lt;/code&gt; will not be called.</source>
          <target state="translated">&lt;code&gt;before_validation&lt;/code&gt; 이 &lt;code&gt;:abort&lt;/code&gt; 를 던지면 다른 &lt;code&gt;before_*&lt;/code&gt; 콜백 과 마찬가지로 &lt;code&gt;valid?&lt;/code&gt; 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fd5a27f27952b83949f0ba6492d83bafa2550fe3" translate="yes" xml:space="preserve">
          <source>Like other form controls, a select box can be bound to a model attribute. For example, if we have a &lt;code&gt;@person&lt;/code&gt; model object like:</source>
          <target state="translated">다른 양식 컨트롤과 마찬가지로 선택 상자는 모델 속성에 바인딩 될 수 있습니다. 예를 들어, 다음 과 같은 &lt;code&gt;@person&lt;/code&gt; 모델 객체 가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="d6d8aed9f13962f34865c0047d057350e384d9e8" translate="yes" xml:space="preserve">
          <source>Like railties, engines can access a config object which contains configuration shared by all railties and the application. Additionally, each engine can access &lt;code&gt;autoload_paths&lt;/code&gt;, &lt;code&gt;eager_load_paths&lt;/code&gt; and &lt;code&gt;autoload_once_paths&lt;/code&gt; settings which are scoped to that engine.</source>
          <target state="translated">railties와 마찬가지로 엔진은 모든 railties 및 응용 프로그램에서 공유하는 구성을 포함하는 구성 개체에 액세스 할 수 있습니다. 또한 각 엔진은 해당 엔진으로 범위가 지정된 &lt;code&gt;autoload_paths&lt;/code&gt; , &lt;code&gt;eager_load_paths&lt;/code&gt; 및 &lt;code&gt;autoload_once_paths&lt;/code&gt; 설정에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="75c1dc4daa7154d93dae21a1c761babdf8b41bde" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;remove_column&lt;/code&gt; and &lt;code&gt;add_column&lt;/code&gt; Rails provides the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column&quot;&gt;&lt;code&gt;change_column&lt;/code&gt;&lt;/a&gt; migration method.</source>
          <target state="translated">&lt;code&gt;remove_column&lt;/code&gt; 및 &lt;code&gt;add_column&lt;/code&gt; 과 마찬가지로 Rails는 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column&quot;&gt; &lt;code&gt;change_column&lt;/code&gt; &lt;/a&gt; 마이그레이션 방법을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="5dd204ef14d7b85ee67171cb097475f1e6871271" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;remove_column&lt;/code&gt; and &lt;code&gt;add_column&lt;/code&gt; Rails provides the &lt;code&gt;change_column&lt;/code&gt; migration method.</source>
          <target state="translated">&lt;code&gt;remove_column&lt;/code&gt; 및 &lt;code&gt;add_column&lt;/code&gt; Rails 와 마찬가지로 &lt;code&gt;change_column&lt;/code&gt; 마이그레이션 방법을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="36d6a2738d70d70feb17c5c4ce6fb8a243819c54" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;video_tag&lt;/code&gt;, the &lt;code&gt;audio_tag&lt;/code&gt; has special options:</source>
          <target state="translated">등 &lt;code&gt;video_tag&lt;/code&gt; 의 &lt;code&gt;audio_tag&lt;/code&gt; 는 특별한 옵션이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="e66a5dc476fc73af9f8055914d8ed515c1102014" translate="yes" xml:space="preserve">
          <source>Like the Active Record methods, the callback chain is aborted as soon as one of the methods throws &lt;code&gt;:abort&lt;/code&gt;.</source>
          <target state="translated">Active Record 메소드와 마찬가지로 콜백 체인은 메소드 중 하나가 &lt;code&gt;:abort&lt;/code&gt; 를 발생하자마자 중단 됩니다.</target>
        </trans-unit>
        <trans-unit id="06becc0802c58a331912f0807cf74457815d184a" translate="yes" xml:space="preserve">
          <source>Like the Executor, the Reloader also wraps application code. If the Executor is not already active on the current thread, the Reloader will invoke it for you, so you only need to call one. This also guarantees that everything the Reloader does, including all its callback invocations, occurs wrapped inside the Executor.</source>
          <target state="translated">Executor와 마찬가지로 Reloader도 응용 프로그램 코드를 래핑합니다. Executor가 현재 쓰레드에서 아직 활성화되어 있지 않다면, 리 로더가 당신을 위해 그것을 호출 할 것입니다. 또한 모든 콜백 호출을 포함하여 리 로더가하는 모든 것이 Executor 내에서 랩핑되도록합니다.</target>
        </trans-unit>
        <trans-unit id="366f425cd5b9e6652a38ac7f7aa971788b88b9e8" translate="yes" xml:space="preserve">
          <source>Like the other examples, this will behave similarly to a class method.</source>
          <target state="translated">다른 예제와 마찬가지로 클래스 메서드와 비슷하게 동작합니다.</target>
        </trans-unit>
        <trans-unit id="ebba6a2344880667e5d34781e11c86287eaa9d87" translate="yes" xml:space="preserve">
          <source>Like with Hash#merge in the standard library, a block can be provided to merge values:</source>
          <target state="translated">표준 라이브러리의 Hash # merge와 마찬가지로 값을 병합하는 블록을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb4789449468fc495b47f2645508781ca736af5a" translate="yes" xml:space="preserve">
          <source>Like with any blog, our readers will create their comments directly after reading the article, and once they have added their comment, will be sent back to the article show page to see their comment now listed. Due to this, our &lt;code&gt;CommentsController&lt;/code&gt; is there to provide a method to create comments and delete spam comments when they arrive.</source>
          <target state="translated">다른 블로그와 마찬가지로 독자도 기사를 읽은 후 직접 의견을 작성하고 일단 의견을 추가하면 기사 표시 페이지로 다시 전송되어 의견이 나열됩니다. 이로 인해 &lt;code&gt;CommentsController&lt;/code&gt; 는 댓글 을 작성하고 스팸 댓글이 도착하면 삭제하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ff5496f02f2e70dd87939f4f922ad6359b435663" translate="yes" xml:space="preserve">
          <source>Likewise, if a message has no purpose it won't be returned when verifying with a specific purpose.</source>
          <target state="translated">마찬가지로 메시지에 목적이없는 경우 특정 목적으로 확인할 때 메시지가 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7f9f56dc5d9dac067cad8e9787f85e70aa8451e2" translate="yes" xml:space="preserve">
          <source>Likewise, in the controller</source>
          <target state="translated">마찬가지로 컨트롤러에서도</target>
        </trans-unit>
        <trans-unit id="9043e4d4d1671a725ba2238469203640ef3b4115" translate="yes" xml:space="preserve">
          <source>Likewise, once retrieved an Active Record object can be destroyed which removes it from the database.</source>
          <target state="translated">마찬가지로, 검색된 Active Record 개체는 데이터베이스에서 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e39e2da3e09996465c4f4ce0479cc61d8bd528e" translate="yes" xml:space="preserve">
          <source>Limit and Offset</source>
          <target state="translated">한계와 오프셋</target>
        </trans-unit>
        <trans-unit id="4f68bad7da836e631fb2248fb1abb438211c676f" translate="yes" xml:space="preserve">
          <source>Limit the set of zones provided by TZInfo to a meaningful subset of 134 zones.</source>
          <target state="translated">TZInfo가 제공하는 구역 세트를 134 개 구역의 의미있는 서브 세트로 제한하십시오.</target>
        </trans-unit>
        <trans-unit id="1605fb4368464e150eb13ea430ef0ff67931d853" translate="yes" xml:space="preserve">
          <source>Limits are honored, and if present there is no requirement for the batch size, it can be less than, equal, or greater than the limit.</source>
          <target state="translated">제한이 적용되며 배치 크기에 대한 요구 사항이없는 경우 제한보다 작거나 같거나 클 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d2bb2ad6044f129fa674c47902d971b813e5412" translate="yes" xml:space="preserve">
          <source>Limits are honored, and if present there is no requirement for the batch size: it can be less than, equal to, or greater than the limit.</source>
          <target state="translated">제한이 적용되며, 존재하는 경우 배치 크기에 대한 요구 사항이 없습니다. 제한보다 작거나 같거나 클 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0453458ad839bba5dbe50a404dd500b022d2db6" translate="yes" xml:space="preserve">
          <source>Limits the byte size of the string to a number of bytes without breaking characters. Usable when the storage for a string is limited for some reason.</source>
          <target state="translated">문자를 중단하지 않고 문자열의 바이트 크기를 바이트 수로 제한합니다. 문자열 저장이 어떤 이유로 제한 될 때 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8717faa36eea1d1c7661ae98c71e5bedde325942" translate="yes" xml:space="preserve">
          <source>Linking to Files</source>
          <target state="translated">파일에 연결</target>
        </trans-unit>
        <trans-unit id="68f0799319cb24a16611680c2a93d9b76e26d5b1" translate="yes" xml:space="preserve">
          <source>Links to a URL derived from &lt;code&gt;url_for&lt;/code&gt; under the hood. Primarily used to create RESTful resource links, which for this example, boils down to when passing models to &lt;code&gt;link_to&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;url_for&lt;/code&gt; 에서 파생 된 URL에 대한 링크 입니다. 주로 RESTful 리소스 링크를 만드는 데 사용되며,이 예에서는 모델을 &lt;code&gt;link_to&lt;/code&gt; 에 전달할 때로 귀결됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2ae7cc433871751f8c4fe89e1a46b8934cd7aac" translate="yes" xml:space="preserve">
          <source>Lint Tests</source>
          <target state="translated">보풀 테스트</target>
        </trans-unit>
        <trans-unit id="a1464f7beeb518a1b885870631c7f3a94b56fd43" translate="yes" xml:space="preserve">
          <source>List all validators that are being used to validate a specific attribute.</source>
          <target state="translated">특정 속성의 유효성을 검증하는 데 사용중인 모든 유효성 검증기를 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="9756c11c70cc0c3e6447ead1a20c3b8bfd39a733" translate="yes" xml:space="preserve">
          <source>List all validators that are being used to validate the model using &lt;code&gt;validates_with&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;validates_with&lt;/code&gt; 메소드를 사용하여 모델의 유효성을 검증하는 데 사용중인 모든 유효성 검증기를 나열하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f3720ccefa495f1f67d13bfaf93c2c1ac631f1f" translate="yes" xml:space="preserve">
          <source>List of Free Programming Books</source>
          <target state="translated">무료 프로그래밍 도서 목록</target>
        </trans-unit>
        <trans-unit id="90531be0f34f12cdf82a5dd4b4d23699f1a88923" translate="yes" xml:space="preserve">
          <source>List of HTTP request methods from the following RFCs: Hypertext Transfer Protocol &amp;ndash; HTTP/1.1 (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt;) HTTP Extensions for Distributed Authoring &amp;ndash; WEBDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2518.txt&quot;&gt;www.ietf.org/rfc/rfc2518.txt&lt;/a&gt;) Versioning Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3253.txt&quot;&gt;www.ietf.org/rfc/rfc3253.txt&lt;/a&gt;) Ordered Collections Protocol (WebDAV) (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3648.txt&quot;&gt;www.ietf.org/rfc/rfc3648.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3744.txt&quot;&gt;www.ietf.org/rfc/rfc3744.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) SEARCH (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5323.txt&quot;&gt;www.ietf.org/rfc/rfc5323.txt&lt;/a&gt;) Calendar Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc4791.txt&quot;&gt;www.ietf.org/rfc/rfc4791.txt&lt;/a&gt;) PATCH &lt;a href=&quot;../method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; for HTTP (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5789.txt&quot;&gt;www.ietf.org/rfc/rfc5789.txt&lt;/a&gt;)</source>
          <target state="translated">다음 RFC의 HTTP 요청 방법 목록 : Hypertext Transfer Protocol &amp;ndash; HTTP / 1.1 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt; ) 분산 저작을위한 HTTP 확장 &amp;ndash; WEBDAV ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2518.txt&quot;&gt;www.ietf.org/rfc/rfc2518.txt&lt;/a&gt; ) WebDAV를에 확장 버전 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc3253.txt&quot;&gt;www.ietf.org/rfc/rfc3253.txt&lt;/a&gt; 컬렉션 프로토콜 관리 (WebDAV) (발주) &lt;a href=&quot;https://www.ietf.org/rfc/rfc3648.txt&quot;&gt;www.ietf.org/rfc/rfc3648.txt&lt;/a&gt; ) 웹 분산 제작 및 버전 관리 (WebDAV) 액세스 제어 프로토콜 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc3744.txt&quot;&gt;WWW. ietf.org/rfc/rfc3744.txt&lt;/a&gt; ) WebDAV (Web Distributed Authoring and Versioning) SEARCH ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc5323.txt&quot;&gt;www.ietf.org/rfc/rfc5323.txt&lt;/a&gt; ) WebDAV에 대한 캘린더 확장 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc4791.txt&quot;&gt;www.ietf.org/rfc/rfc4791.txt&lt;/a&gt; ) PATCH &lt;a href=&quot;../method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt; HTTP를위한 (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5789.txt&quot;&gt;www.ietf.org/rfc/rfc5789.txt&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="407b7ccb6a8ea464943a7436167fbbcc36291043" translate="yes" xml:space="preserve">
          <source>List of HTTP request methods from the following RFCs: Hypertext Transfer Protocol &amp;ndash; HTTP/1.1 (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt;) HTTP Extensions for Distributed Authoring &amp;ndash; WEBDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2518.txt&quot;&gt;www.ietf.org/rfc/rfc2518.txt&lt;/a&gt;) Versioning Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3253.txt&quot;&gt;www.ietf.org/rfc/rfc3253.txt&lt;/a&gt;) Ordered Collections Protocol (WebDAV) (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3648.txt&quot;&gt;www.ietf.org/rfc/rfc3648.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3744.txt&quot;&gt;www.ietf.org/rfc/rfc3744.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) SEARCH (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5323.txt&quot;&gt;www.ietf.org/rfc/rfc5323.txt&lt;/a&gt;) Calendar Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc4791.txt&quot;&gt;www.ietf.org/rfc/rfc4791.txt&lt;/a&gt;) PATCH &lt;a href=&quot;../method&quot;&gt;Method&lt;/a&gt; for HTTP (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5789.txt&quot;&gt;www.ietf.org/rfc/rfc5789.txt&lt;/a&gt;)</source>
          <target state="translated">다음 RFC의 HTTP 요청 방법 목록 : 하이퍼 텍스트 전송 프로토콜 &amp;ndash; HTTP / 1.1 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt; ) 분산 작성을위한 HTTP 확장 &amp;ndash; WEBDAV ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2518.txt&quot;&gt;www.ietf.org/rfc/rfc2518.txt&lt;/a&gt; ) WebDAV를에 확장 버전 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc3253.txt&quot;&gt;www.ietf.org/rfc/rfc3253.txt&lt;/a&gt; 컬렉션 프로토콜 관리 (WebDAV) (발주) &lt;a href=&quot;https://www.ietf.org/rfc/rfc3648.txt&quot;&gt;www.ietf.org/rfc/rfc3648.txt&lt;/a&gt; ) 웹 분산 제작 및 버전 관리 (WebDAV) 액세스 제어 프로토콜 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc3744.txt&quot;&gt;WWW. ietf.org/rfc/rfc3744.txt&lt;/a&gt; ) WebDAV (Web Distributed Authoring and Versioning) 검색 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc5323.txt&quot;&gt;www.ietf.org/rfc/rfc5323.txt&lt;/a&gt; ) WebDAV에 대한 캘린더 확장 ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc4791.txt&quot;&gt;www.ietf.org/rfc/rfc4791.txt&lt;/a&gt; ) 패치 HTTP &lt;a href=&quot;../method&quot;&gt;방법&lt;/a&gt; (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5789.txt&quot;&gt;www.ietf.org/rfc/rfc5789.txt&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="e99b9b6b4d6ae76f036d8dca5b804e70b84aaf44" translate="yes" xml:space="preserve">
          <source>Listing Existing Routes</source>
          <target state="translated">기존 경로 나열</target>
        </trans-unit>
        <trans-unit id="a3bd4dc53839cb5b27fe373d0c90296d3ac3ae04" translate="yes" xml:space="preserve">
          <source>Listing all articles</source>
          <target state="translated">모든 기사 나열</target>
        </trans-unit>
        <trans-unit id="f0de68777e9549b34e900beb10c9ee85fb7009c4" translate="yes" xml:space="preserve">
          <source>Live Compilation</source>
          <target state="translated">라이브 편집</target>
        </trans-unit>
        <trans-unit id="e87779f8c44830dda0afa1d38923843e3867f226" translate="yes" xml:space="preserve">
          <source>Live Streaming of Arbitrary Data</source>
          <target state="translated">임의 데이터의 실시간 스트리밍</target>
        </trans-unit>
        <trans-unit id="1de45b5aa2fca7905d7dc09902ec0937f54991cc" translate="yes" xml:space="preserve">
          <source>Live#process</source>
          <target state="translated">Live#process</target>
        </trans-unit>
        <trans-unit id="6b673d9f50ed21fc6d9ccf9a74fec9716a0a7c34" translate="yes" xml:space="preserve">
          <source>Live#response_body=</source>
          <target state="translated">Live#response_body=</target>
        </trans-unit>
        <trans-unit id="1f8628696f61ead3bad365dcf9e48ec45e356b1a" translate="yes" xml:space="preserve">
          <source>Live::SSE</source>
          <target state="translated">Live::SSE</target>
        </trans-unit>
        <trans-unit id="e80cbd3ad532e9de26e75dec756d632ae670e179" translate="yes" xml:space="preserve">
          <source>Live::SSE#close</source>
          <target state="translated">Live::SSE#close</target>
        </trans-unit>
        <trans-unit id="6ca07fe7ffa55271abd157aad738f9c911eccd09" translate="yes" xml:space="preserve">
          <source>Live::SSE#write</source>
          <target state="translated">Live::SSE#write</target>
        </trans-unit>
        <trans-unit id="2002f9ba4a5ddf3e6317fd5214f79f817a7c0f7b" translate="yes" xml:space="preserve">
          <source>Live::SSE::new</source>
          <target state="translated">Live::SSE::new</target>
        </trans-unit>
        <trans-unit id="516a45906ee7a73f138ed7aee6724d5995797437" translate="yes" xml:space="preserve">
          <source>Load &lt;code&gt;Rails&lt;/code&gt; generators and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.generators&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;Rails&lt;/code&gt; 생성기를 로드 하고 등록 된 후크를 호출합니다. 자세한 내용은 &lt;code&gt;Rails::Railtie.generators&lt;/code&gt; 를 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="87c8a03a8a5fa7b03a6feed7b52827941ada6924" translate="yes" xml:space="preserve">
          <source>Load &lt;code&gt;Rails&lt;/code&gt; runner and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.runner&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;Rails&lt;/code&gt; 러너를 로드 하고 등록 된 후크를 호출합니다. 자세한 내용은 &lt;code&gt;Rails::Railtie.runner&lt;/code&gt; 를 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="0856eaf6a58aba3e18f24940f49d7a541bb5fbf7" translate="yes" xml:space="preserve">
          <source>Load Balancing Replicas</source>
          <target state="translated">부하 분산 복제본</target>
        </trans-unit>
        <trans-unit id="3f211060ae86ba78f9cf3ddbf2e12e4cdd937256" translate="yes" xml:space="preserve">
          <source>Load Interlock</source>
          <target state="translated">인터 로크</target>
        </trans-unit>
        <trans-unit id="3b57c97e1176888fbdd46c4bd908ef2a819c9b3e" translate="yes" xml:space="preserve">
          <source>Load Rails generators and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.generators&lt;/code&gt; for more info.</source>
          <target state="translated">Rails 생성기를로드하고 등록 된 후크를 호출하십시오. 자세한 정보는 &lt;code&gt;Rails::Railtie.generators&lt;/code&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="90e7e9635304b55840a29eb4e6fe7f20cc9f5fa9" translate="yes" xml:space="preserve">
          <source>Load Rails runner and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.runner&lt;/code&gt; for more info.</source>
          <target state="translated">Rails 러너를로드하고 등록 된 후크를 호출하십시오. 자세한 내용은 &lt;code&gt;Rails::Railtie.runner&lt;/code&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f519035b4f9c4608d417cc7916003ffcfb5efb6" translate="yes" xml:space="preserve">
          <source>Load Rake, railties tasks and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.rake_tasks&lt;/code&gt; for more info.</source>
          <target state="translated">레이크를로드하고 작업을 수행하고 등록 된 후크를 호출합니다. 자세한 내용은 &lt;code&gt;Rails::Railtie.rake_tasks&lt;/code&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="b89c0598fef41aa501e1b546bb1a781c1aff38c0" translate="yes" xml:space="preserve">
          <source>Load and Configuration Hooks</source>
          <target state="translated">로드 및 구성 후크</target>
        </trans-unit>
        <trans-unit id="a2c2986fb53b84bdd72507871802910ba4f82c3d" translate="yes" xml:space="preserve">
          <source>Load and configuration hooks are the API that allow you to hook into this initialization process without violating the load contract with Rails. This will also mitigate boot performance degradation and avoid conflicts.</source>
          <target state="translated">로드 및 구성 후크는 Rails와의로드 계약을 위반하지 않고이 초기화 프로세스에 연결할 수있는 API입니다. 이는 또한 부팅 성능 저하를 완화하고 충돌을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="248737ce5d09b3292262076a9f3ec47f2b88e069" translate="yes" xml:space="preserve">
          <source>Load balancing replicas</source>
          <target state="translated">부하 분산 복제본</target>
        </trans-unit>
        <trans-unit id="5b040245677803bf954f78cdd2af2a4400d98afd" translate="yes" xml:space="preserve">
          <source>Load console and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.console&lt;/code&gt; for more info.</source>
          <target state="translated">콘솔을로드하고 등록 된 후크를 호출하십시오. 자세한 내용은 &lt;code&gt;Rails::Railtie.console&lt;/code&gt; 을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="1cc55c2158b1ec32df371ef3e42b70f4ecfbd7e5" translate="yes" xml:space="preserve">
          <source>Load data from db/seeds.rb file. It can be used in to load engines' seeds, e.g.:</source>
          <target state="translated">db / seeds.rb 파일에서 데이터를로드하십시오. 엔진 시드를로드하는 데 사용할 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="c9ec4dd9e6e9589e6eb04e8827dc323ba0606dc6" translate="yes" xml:space="preserve">
          <source>Load the fixture data into the table</source>
          <target state="translated">조명기 데이터를 테이블에로드</target>
        </trans-unit>
        <trans-unit id="46559e0eb7289033adcb2334be83299e56fb790b" translate="yes" xml:space="preserve">
          <source>LoadError</source>
          <target state="translated">LoadError</target>
        </trans-unit>
        <trans-unit id="c6a9492b638a409f67b0d9e982b3e7d774ce79be" translate="yes" xml:space="preserve">
          <source>LoadError#is_missing?</source>
          <target state="translated">LoadError#is_missing?</target>
        </trans-unit>
        <trans-unit id="680b0dbdca06c127414899a3ee820eac94b1b989" translate="yes" xml:space="preserve">
          <source>Loading Mechanism</source>
          <target state="translated">로딩 메커니즘</target>
        </trans-unit>
        <trans-unit id="2ee3534a3ee9902cefe30be9a319bf71af143f92" translate="yes" xml:space="preserve">
          <source>Loading Rails</source>
          <target state="translated">로딩 레일</target>
        </trans-unit>
        <trans-unit id="3e645f2adaf9f5637fe18120419047275c2c7afb" translate="yes" xml:space="preserve">
          <source>Loading Rake Tasks and &lt;a href=&quot;generators&quot;&gt;&lt;code&gt;Generators&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">레이크 태스크 및 &lt;a href=&quot;generators&quot;&gt; &lt;code&gt;Generators&lt;/code&gt; &lt;/a&gt; 로드</target>
        </trans-unit>
        <trans-unit id="b6d4e36c8ec129c107705cec5ce7a52230bcbdac" translate="yes" xml:space="preserve">
          <source>Loading Rake Tasks and &lt;a href=&quot;generators&quot;&gt;Generators&lt;/a&gt;</source>
          <target state="translated">레이크 작업 및 &lt;a href=&quot;generators&quot;&gt;생성기&lt;/a&gt; 로드</target>
        </trans-unit>
        <trans-unit id="dc26c6048f64ac1b38aa517f836e37fbf66e2c1d" translate="yes" xml:space="preserve">
          <source>Loading nested relationships is possible using a Hash:</source>
          <target state="translated">해시를 사용하여 중첩 관계를로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a2179426c96029e473583f4db63f8591c481484" translate="yes" xml:space="preserve">
          <source>Loading priority</source>
          <target state="translated">로딩 우선 순위</target>
        </trans-unit>
        <trans-unit id="f97bb749d00e9d8d7b4d3cd28987c05e88b7ce8e" translate="yes" xml:space="preserve">
          <source>Loads and returns the entire raw configuration of database from values stored in &lt;code&gt;config/database.yml&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;config/database.yml&lt;/code&gt; 에 저장된 값에서 데이터베이스의 전체 원시 구성을로드하고 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="7dac81fe05d6da25576051805b6a4ec6f157c584" translate="yes" xml:space="preserve">
          <source>Loads default configurations. See &lt;a href=&quot;https://guides.rubyonrails.org/configuring.html#results-of-config-load-defaults&quot;&gt;the result of the method for each version&lt;/a&gt;.</source>
          <target state="translated">기본 구성을로드합니다. &lt;a href=&quot;https://guides.rubyonrails.org/configuring.html#results-of-config-load-defaults&quot;&gt;각 버전에 대한 방법의 결과를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="96e2841f795c120ab7abbb2a3ce3f19e15e77e86" translate="yes" xml:space="preserve">
          <source>Local Precompilation</source>
          <target state="translated">로컬 프리 컴파일</target>
        </trans-unit>
        <trans-unit id="1c19411016a1397c6d7b57cf20afdd1da2dd9035" translate="yes" xml:space="preserve">
          <source>Local cache. Hot in-memory primary cache within block/middleware scope.</source>
          <target state="translated">로컬 캐시. 블록 / 미들웨어 범위 내의 핫 메모리 내 기본 캐시.</target>
        </trans-unit>
        <trans-unit id="ba7f74c4406ac9a4770f83a94dfa9c053e17cdd8" translate="yes" xml:space="preserve">
          <source>Local compilation allows you to commit the compiled files into source control, and deploy as normal.</source>
          <target state="translated">로컬 컴파일을 사용하면 컴파일 된 파일을 소스 제어에 커밋하고 정상적으로 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f55dab02536ee16f582d5325dacc099456f85791" translate="yes" xml:space="preserve">
          <source>Locales.</source>
          <target state="translated">Locales.</target>
        </trans-unit>
        <trans-unit id="73b34ea0c0a622e20701c981eb89fe3ec0a90df7" translate="yes" xml:space="preserve">
          <source>Localization can also be based purely on the translation of the attribute-name (if you are using &lt;a href=&quot;../../activerecord&quot;&gt;&lt;code&gt;ActiveRecord&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">현지화는 순전히 attribute-name의 번역을 기반으로 할 수 있습니다 ( &lt;a href=&quot;../../activerecord&quot;&gt; &lt;code&gt;ActiveRecord&lt;/code&gt; 를&lt;/a&gt; 사용하는 경우 ) :</target>
        </trans-unit>
        <trans-unit id="90074f8117f03461acc7b696a5b8d3dccb4b250b" translate="yes" xml:space="preserve">
          <source>Localization can also be based purely on the translation of the attribute-name (if you are using &lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord&lt;/a&gt;):</source>
          <target state="translated">현지화는 또한 속성 이름의 번역을 기반으로 할 수도 있습니다 ( &lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord를&lt;/a&gt; 사용하는 경우 ).</target>
        </trans-unit>
        <trans-unit id="a3a34118a7f1edcd0e1c47f55d3079c60385b677" translate="yes" xml:space="preserve">
          <source>Localized Views</source>
          <target state="translated">현지화 된보기</target>
        </trans-unit>
        <trans-unit id="3c40afeba79944e854dac84a2ffd51e7d381cc30" translate="yes" xml:space="preserve">
          <source>Localizing content</source>
          <target state="translated">콘텐츠 현지화</target>
        </trans-unit>
        <trans-unit id="4c03678b420b8bf20d3d6c624f864ad7ee683883" translate="yes" xml:space="preserve">
          <source>Locate a specific time zone object. If the argument is a string, it is interpreted to mean the name of the timezone to locate. If it is a numeric value it is either the hour offset, or the second offset, of the timezone to find. (The first one with that offset will be returned.) Returns &lt;code&gt;nil&lt;/code&gt; if no such time zone is known to the system.</source>
          <target state="translated">특정 시간대 개체를 찾습니다. 인수가 문자열 인 경우 찾을 시간대의 이름을 의미하는 것으로 해석됩니다. 숫자 값인 경우 찾을 시간대의 시간 오프셋 또는 두 번째 오프셋입니다. 해당 오프셋이있는 첫 번째 오프셋이 반환됩니다. 해당 표준 시간대가 시스템에 알려지지 않은 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2933d6ed899ca9db16a4351ba422ce7bc83c406b" translate="yes" xml:space="preserve">
          <source>Locates a Trix editor and fills it in with the given HTML.</source>
          <target state="translated">Trix 편집기를 찾아서 주어진 HTML로 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="9e95ef1a476c826249b6254155f1da146086ac43" translate="yes" xml:space="preserve">
          <source>Location response header</source>
          <target state="translated">위치 응답 헤더</target>
        </trans-unit>
        <trans-unit id="eb05c96a9e2a4707170d9c3b8a23447c38f4cffd" translate="yes" xml:space="preserve">
          <source>Locations for Initialization Code</source>
          <target state="translated">초기화 코드의 위치</target>
        </trans-unit>
        <trans-unit id="710ae4ff639eebf3d4df032ac4c7f3a3743c7b07" translate="yes" xml:space="preserve">
          <source>LockWaitTimeout</source>
          <target state="translated">LockWaitTimeout</target>
        </trans-unit>
        <trans-unit id="70835a0129c110391e7f829d841581f090cc206d" translate="yes" xml:space="preserve">
          <source>Locking Records for Update</source>
          <target state="translated">업데이트를위한 레코드 잠금</target>
        </trans-unit>
        <trans-unit id="df60e973a265b7d703153225e3ca5b47b7d40460" translate="yes" xml:space="preserve">
          <source>Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.</source>
          <target state="translated">잠금은 데이터베이스에서 레코드를 업데이트 할 때 경쟁 조건을 방지하고 원자 적 업데이트를 보장하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="8f4169d04da897048c43e4c9684fc2f239bde026" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic</source>
          <target state="translated">Locking::Optimistic</target>
        </trans-unit>
        <trans-unit id="2f864ade87e4b991694ad9e9afa97f92ae24daed" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods</source>
          <target state="translated">Locking::Optimistic::ClassMethods</target>
        </trans-unit>
        <trans-unit id="efc6084f6c49058a0f0ef20343618f9318154bab" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_column</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_column</target>
        </trans-unit>
        <trans-unit id="08b053fe703a6fda9c517d44062753cd85d1e48b" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_column=</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_column=</target>
        </trans-unit>
        <trans-unit id="8b926b531b9aed70e598004702c9afc9ff288d3b" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_enabled?</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_enabled?</target>
        </trans-unit>
        <trans-unit id="a93398134569361708a52f98f356d046e6d55882" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#reset_locking_column</source>
          <target state="translated">Locking::Optimistic::ClassMethods#reset_locking_column</target>
        </trans-unit>
        <trans-unit id="c589b468cf024c9825b7795a069b9d21a6f97377" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#update_counters</source>
          <target state="translated">Locking::Optimistic::ClassMethods#update_counters</target>
        </trans-unit>
        <trans-unit id="be460ffa012cbe0430d2f9788757f594528a1561" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic</source>
          <target state="translated">Locking::Pessimistic</target>
        </trans-unit>
        <trans-unit id="d06e7be0414bb22dece5eb8c8424c6ced1994179" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic#lock!</source>
          <target state="translated">Locking::Pessimistic#lock!</target>
        </trans-unit>
        <trans-unit id="0feea6ff63eb300cd3671f76b7c22268524140de" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic#with_lock</source>
          <target state="translated">Locking::Pessimistic#with_lock</target>
        </trans-unit>
        <trans-unit id="1666df53d33ece6d245d229a5b15f3cd95f66b69" translate="yes" xml:space="preserve">
          <source>Log Filtering</source>
          <target state="translated">로그 필터링</target>
        </trans-unit>
        <trans-unit id="0797e5297ca5c23288b5154f0d790da08cf46509" translate="yes" xml:space="preserve">
          <source>Log Levels</source>
          <target state="translated">로그 레벨</target>
        </trans-unit>
        <trans-unit id="7f1c49dd337173f24af84a17222b9b4d40ebbf67" translate="yes" xml:space="preserve">
          <source>Log all deprecation warnings to +$stderr+.</source>
          <target state="translated">모든 지원 중단 경고를 + $ stderr +에 기록하십시오.</target>
        </trans-unit>
        <trans-unit id="8c388deed51ddb528977af4fdbf643cb2fe84d76" translate="yes" xml:space="preserve">
          <source>Log all deprecation warnings to &lt;code&gt;$stderr&lt;/code&gt;.</source>
          <target state="translated">모든 지원 중단 경고를 &lt;code&gt;$stderr&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="8341546ec1ee881b75ca43bb8090792a0d48ce20" translate="yes" xml:space="preserve">
          <source>Log all deprecation warnings to &lt;code&gt;Rails.logger&lt;/code&gt;.</source>
          <target state="translated">사용 중단 경고를 모두 &lt;code&gt;Rails.logger&lt;/code&gt; 에 기록하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2d2e22437d49b9714bdc19ff30351f11a7a7a74" translate="yes" xml:space="preserve">
          <source>Log subscriber also has some helpers to deal with logging and automatically flushes all logs when the request finishes (via &lt;code&gt;action_dispatch.callback&lt;/code&gt; notification) in a Rails environment.</source>
          <target state="translated">로그 가입자는 또한 Rails 환경에서 요청이 완료 될 때 ( &lt;code&gt;action_dispatch.callback&lt;/code&gt; 알림을 통해 ) 로깅을 처리하고 모든 로그를 자동으로 플러시하는 도우미를 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="171e213cec25bdc69e47b2e95d1df5626b979f38" translate="yes" xml:space="preserve">
          <source>Log tags (&lt;code&gt;taggers&lt;/code&gt;) can be an &lt;a href=&quot;../../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing: methods that the &lt;code&gt;request&lt;/code&gt; object responds to, objects that respond to &lt;code&gt;to_s&lt;/code&gt; or Proc objects that accept an instance of the &lt;code&gt;request&lt;/code&gt; object.</source>
          <target state="translated">로그 태그 ( &lt;code&gt;taggers&lt;/code&gt; )는 &lt;code&gt;request&lt;/code&gt; 객체가 응답하는 메서드 , &lt;code&gt;to_s&lt;/code&gt; 에 응답하는 객체 또는 &lt;code&gt;request&lt;/code&gt; 객체 의 인스턴스를 수락하는 Proc 객체를 포함 하는 &lt;a href=&quot;../../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; 일&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c5250cfa995360aa285147b0f1c57abc6ca7f730" translate="yes" xml:space="preserve">
          <source>Log tags (&lt;code&gt;taggers&lt;/code&gt;) can be an &lt;a href=&quot;../../array&quot;&gt;Array&lt;/a&gt; containing: methods that the &lt;code&gt;request&lt;/code&gt; object responds to, objects that respond to &lt;code&gt;to_s&lt;/code&gt; or Proc objects that accept an instance of the &lt;code&gt;request&lt;/code&gt; object.</source>
          <target state="translated">로그 태그 ( &lt;code&gt;taggers&lt;/code&gt; )는 &lt;code&gt;request&lt;/code&gt; 객체가 응답하는 &lt;code&gt;to_s&lt;/code&gt; , to_s에 응답하는 객체 또는 &lt;code&gt;request&lt;/code&gt; 객체 의 인스턴스를 허용하는 Proc 객체를 포함 하는 &lt;a href=&quot;../../array&quot;&gt;Array 일&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5a90aa65e0a6658543600ca7e1e91262921df2de" translate="yes" xml:space="preserve">
          <source>LogSubscriber</source>
          <target state="translated">LogSubscriber</target>
        </trans-unit>
        <trans-unit id="218d5e774207d1d66e3f9b66f20bd4af3471f172" translate="yes" xml:space="preserve">
          <source>LogSubscriber#deliver</source>
          <target state="translated">LogSubscriber#deliver</target>
        </trans-unit>
        <trans-unit id="55af923ea33dff98ca7c168da85d23e80fa5317c" translate="yes" xml:space="preserve">
          <source>LogSubscriber#logger</source>
          <target state="translated">LogSubscriber#logger</target>
        </trans-unit>
        <trans-unit id="7a2411179d17d59f93aad508af303050b741fa32" translate="yes" xml:space="preserve">
          <source>LogSubscriber#process</source>
          <target state="translated">LogSubscriber#process</target>
        </trans-unit>
        <trans-unit id="6bf53002539406558cd714c6ef5bf62042b5b8a6" translate="yes" xml:space="preserve">
          <source>LogSubscriber#receive</source>
          <target state="translated">LogSubscriber#receive</target>
        </trans-unit>
        <trans-unit id="8432c24573f3f89fad60802fe8eddf1da6315768" translate="yes" xml:space="preserve">
          <source>Logger</source>
          <target state="translated">Logger</target>
        </trans-unit>
        <trans-unit id="676b4fcb697f154bd5a7bc122e393a6385de5014" translate="yes" xml:space="preserve">
          <source>Logger::Formatter</source>
          <target state="translated">Logger::Formatter</target>
        </trans-unit>
        <trans-unit id="3d9e60c602c970a2f5c3509958b4089cbf8c68d1" translate="yes" xml:space="preserve">
          <source>Logger::SimpleFormatter</source>
          <target state="translated">Logger::SimpleFormatter</target>
        </trans-unit>
        <trans-unit id="4d7ad5706deb8532d7eec04b8aa18ef1f42c1a43" translate="yes" xml:space="preserve">
          <source>Logger::SimpleFormatter#call</source>
          <target state="translated">Logger::SimpleFormatter#call</target>
        </trans-unit>
        <trans-unit id="a9707eb17132476d73754f320250ed9502fdf44d" translate="yes" xml:space="preserve">
          <source>Logger::logger_outputs_to?</source>
          <target state="translated">Logger::logger_outputs_to?</target>
        </trans-unit>
        <trans-unit id="d0005f516a11a16bb48bbeb76e0cb73c796b70a7" translate="yes" xml:space="preserve">
          <source>Logger::new</source>
          <target state="translated">Logger::new</target>
        </trans-unit>
        <trans-unit id="f18d79bc26224d883a29b68180c11a40752a2aac" translate="yes" xml:space="preserve">
          <source>LoggerSilence</source>
          <target state="translated">LoggerSilence</target>
        </trans-unit>
        <trans-unit id="8b290acfc10cb27d57e006dd5e54594619754a64" translate="yes" xml:space="preserve">
          <source>LoggerSilence#silence</source>
          <target state="translated">LoggerSilence#silence</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="da23089c20adecce3364e2fd63f0e5cb8ece4167" translate="yes" xml:space="preserve">
          <source>Logging will always have a small impact on the performance of your Rails app, particularly when logging to disk. Additionally, there are a few subtleties:</source>
          <target state="translated">로깅은 특히 디스크에 로깅 할 때 Rails 앱의 성능에 거의 영향을 미치지 않습니다. 또한 몇 가지 미묘한 점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d8dba556a702c4b2b02fff1697dced0aa887dad" translate="yes" xml:space="preserve">
          <source>Logging: Rails applications log every request, with a level of verbosity appropriate for the current mode. Rails logs in development include information about the request environment, database queries, and basic performance information.</source>
          <target state="translated">로깅 : Rails 응용 프로그램은 모든 요청을 현재 모드에 적합한 수준으로 기록합니다. 개발중인 Rails 로그에는 요청 환경, 데이터베이스 쿼리 및 기본 성능 정보에 대한 정보가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f431dc40465ac4a9323987ccc7c60a2626bcb38a" translate="yes" xml:space="preserve">
          <source>Long-lived channels (and connections) also mean you're responsible for ensuring that the data is fresh. If you hold a reference to a user record, but the name is changed while that reference is held, you may be sending stale data if you don't take precautions to avoid it.</source>
          <target state="translated">오래 지속되는 채널 (및 연결)은 데이터를 최신 상태로 유지해야 할 책임이 있음을 의미합니다. 사용자 레코드에 대한 참조를 보유하고 있지만 해당 참조가 유지되는 동안 이름이 변경된 경우이를 피하기 위해 예방 조치를 취하지 않으면 오래된 데이터가 전송 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fa5015243d6b37528285498fd3134e805a65d33" translate="yes" xml:space="preserve">
          <source>Looking at this output, it's easy to understand how generators work in Rails 3.0 and above. The scaffold generator doesn't actually generate anything, it just invokes others to do the work. This allows us to add/replace/remove any of those invocations. For instance, the scaffold generator invokes the scaffold_controller generator, which invokes erb, test_unit and helper generators. Since each generator has a single responsibility, they are easy to reuse, avoiding code duplication.</source>
          <target state="translated">이 결과를 보면 Rails 3.0 이상에서 발전기가 어떻게 작동하는지 쉽게 이해할 수 있습니다. 스캐 폴드 생성기는 실제로 아무 것도 생성하지 않으며 다른 사람들이 작업을 수행하도록 호출합니다. 이를 통해 이러한 호출을 추가 / 교체 / 제거 할 수 있습니다. 예를 들어, 스캐 폴드 생성기는 erb, test_unit 및 도우미 생성기를 호출하는 scaffold_controller 생성기를 호출합니다. 각 생성기는 단일 책임을 가지므로 코드 중복을 피하면서 재사용이 용이합니다.</target>
        </trans-unit>
        <trans-unit id="b887769549ff1debdc02faa3b40f3f606879358e" translate="yes" xml:space="preserve">
          <source>Looking up Translations</source>
          <target state="translated">번역 찾기</target>
        </trans-unit>
        <trans-unit id="7bde0be8517d00fa09c4fc2ce5dfe9429a37dc46" translate="yes" xml:space="preserve">
          <source>Looping through a collection of records from the database (using the &lt;a href=&quot;scoping/named/classmethods#method-i-all&quot;&gt;&lt;code&gt;Scoping::Named::ClassMethods.all&lt;/code&gt;&lt;/a&gt; method, for example) is very inefficient since it will try to instantiate all the objects at once.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;scoping/named/classmethods#method-i-all&quot;&gt; &lt;code&gt;Scoping::Named::ClassMethods.all&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 데이터베이스에서 레코드 모음을 반복하는 것은 모든 개체를 한 번에 인스턴스화하려고 시도하므로 매우 비효율적입니다.</target>
        </trans-unit>
        <trans-unit id="d34434162cf0ffe0f5e7c53841247432498ca42c" translate="yes" xml:space="preserve">
          <source>Looping through a collection of records from the database (using the &lt;a href=&quot;scoping/named/classmethods#method-i-all&quot;&gt;ActiveRecord::Scoping::Named::ClassMethods#all&lt;/a&gt; method, for example) is very inefficient since it will try to instantiate all the objects at once.</source>
          <target state="translated">&lt;a href=&quot;scoping/named/classmethods#method-i-all&quot;&gt;ActiveRecord :: Scoping :: Named :: ClassMethods # all&lt;/a&gt; 메소드를 사용하여 데이터베이스에서 레코드 콜렉션을 반복하는 것은 모든 오브젝트를 한 번에 인스턴스화하려고 시도하기 때문에 매우 비효율적입니다.</target>
        </trans-unit>
        <trans-unit id="89de374ab7a4be82c038987469668c6f701d3cc7" translate="yes" xml:space="preserve">
          <source>Looping through a collection of records from the database (using the &lt;code&gt;all&lt;/code&gt; method, for example) is very inefficient since it will try to instantiate all the objects at once.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; 메소드를 사용하여 데이터베이스에서 레코드 콜렉션을 반복하는 것은 모든 오브젝트를 한 번에 인스턴스화하려고하기 때문에 매우 비효율적입니다.</target>
        </trans-unit>
        <trans-unit id="d216bdf358444e1a0d5e9711e1c686d79571b539" translate="yes" xml:space="preserve">
          <source>Low-Level Caching</source>
          <target state="translated">저수준 캐싱</target>
        </trans-unit>
        <trans-unit id="81eda5632cd54c811f36d9ec9e372ab5faaf038f" translate="yes" xml:space="preserve">
          <source>MAGENTA</source>
          <target state="translated">MAGENTA</target>
        </trans-unit>
        <trans-unit id="b315cd523ae2ef826dbad53529ba6c9c2ad21ff1" translate="yes" xml:space="preserve">
          <source>MAPPING</source>
          <target state="translated">MAPPING</target>
        </trans-unit>
        <trans-unit id="2848f474d72e47595a51218285d39dc86a6ee429" translate="yes" xml:space="preserve">
          <source>MAXIMUM_UPLOAD_PARTS_COUNT</source>
          <target state="translated">MAXIMUM_UPLOAD_PARTS_COUNT</target>
        </trans-unit>
        <trans-unit id="65124a8cda19a4bdcf3161683856e5c9f03eeb50" translate="yes" xml:space="preserve">
          <source>MAX_COOKIE_SIZE</source>
          <target state="translated">MAX_COOKIE_SIZE</target>
        </trans-unit>
        <trans-unit id="9df6c8ec33fd4d7a7eea5fc38ce44524546bce63" translate="yes" xml:space="preserve">
          <source>MAX_ID</source>
          <target state="translated">MAX_ID</target>
        </trans-unit>
        <trans-unit id="ba4091290416138086fb56a894f148cffa494206" translate="yes" xml:space="preserve">
          <source>MAX_KEY_BYTESIZE</source>
          <target state="translated">MAX_KEY_BYTESIZE</target>
        </trans-unit>
        <trans-unit id="284fa63eb59eba7c9e2cd98118f61b0726b934ae" translate="yes" xml:space="preserve">
          <source>MAX_PASSWORD_LENGTH_ALLOWED</source>
          <target state="translated">MAX_PASSWORD_LENGTH_ALLOWED</target>
        </trans-unit>
        <trans-unit id="a98cf28ee66a521605286ef7bf41c421cac7c060" translate="yes" xml:space="preserve">
          <source>MEGABYTE</source>
          <target state="translated">MEGABYTE</target>
        </trans-unit>
        <trans-unit id="8d4dcd2d8fbee8ff07ff7bc53114f0c434eeec56" translate="yes" xml:space="preserve">
          <source>MESSAGE_OPTIONS</source>
          <target state="translated">MESSAGE_OPTIONS</target>
        </trans-unit>
        <trans-unit id="495e45b5da0f07a933bcae72c50ae91eeb20d3f5" translate="yes" xml:space="preserve">
          <source>MIME_NAME</source>
          <target state="translated">MIME_NAME</target>
        </trans-unit>
        <trans-unit id="4a5aa456e74d55cddbb3f26a2e5b910c10b728c1" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER</source>
          <target state="translated">MIME_PARAMETER</target>
        </trans-unit>
        <trans-unit id="aa9e2c39cad2ac07dfa73810c9f0172f4c586568" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER_KEY</source>
          <target state="translated">MIME_PARAMETER_KEY</target>
        </trans-unit>
        <trans-unit id="dcefa2aeec7b7e6e08532fde0a1d873266cb4c02" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER_VALUE</source>
          <target state="translated">MIME_PARAMETER_VALUE</target>
        </trans-unit>
        <trans-unit id="0c7239873afa3db6794c6cf12a208d9718befee7" translate="yes" xml:space="preserve">
          <source>MIME_REGEXP</source>
          <target state="translated">MIME_REGEXP</target>
        </trans-unit>
        <trans-unit id="a8fa17735864cae1c62698a2f866732de4fcf2a5" translate="yes" xml:space="preserve">
          <source>MINIMUM_TOKEN_LENGTH</source>
          <target state="translated">MINIMUM_TOKEN_LENGTH</target>
        </trans-unit>
        <trans-unit id="2bd9323b7b8f4d32687cb655e64b2f2a8c08f1b2" translate="yes" xml:space="preserve">
          <source>MINIMUM_UPLOAD_PART_SIZE</source>
          <target state="translated">MINIMUM_UPLOAD_PART_SIZE</target>
        </trans-unit>
        <trans-unit id="468bfc8881876f60b1992fde5e9b6af946206e43" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_QUARTER_YEAR</source>
          <target state="translated">MINUTES_IN_QUARTER_YEAR</target>
        </trans-unit>
        <trans-unit id="1a14e5831f85aa97e54c26370015ca312d486468" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_THREE_QUARTERS_YEAR</source>
          <target state="translated">MINUTES_IN_THREE_QUARTERS_YEAR</target>
        </trans-unit>
        <trans-unit id="ac3a71bb010a31611bf5406bed00ef6e011aa34b" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_YEAR</source>
          <target state="translated">MINUTES_IN_YEAR</target>
        </trans-unit>
        <trans-unit id="479396de59be987e42108d35e44f4b59dc1b4a9e" translate="yes" xml:space="preserve">
          <source>MODULES</source>
          <target state="translated">MODULES</target>
        </trans-unit>
        <trans-unit id="3bc34b9230133df1f9971deec3f33546dc36b624" translate="yes" xml:space="preserve">
          <source>MULTI_VALUE_METHODS</source>
          <target state="translated">MULTI_VALUE_METHODS</target>
        </trans-unit>
        <trans-unit id="d82bb796085b36f19aa29833ac03dc6a50644efe" translate="yes" xml:space="preserve">
          <source>MUST_REVALIDATE</source>
          <target state="translated">MUST_REVALIDATE</target>
        </trans-unit>
        <trans-unit id="8477fe9398216210024e61ba40f5df523ddf3df2" translate="yes" xml:space="preserve">
          <source>MVC and You</source>
          <target state="translated">MVC와 당신</target>
        </trans-unit>
        <trans-unit id="a8c694c348d74ec772f1e8f64d687c8999e1e811" translate="yes" xml:space="preserve">
          <source>Mail will automatically Base64 encode an attachment. If you want something different, encode your content and pass in the encoded content and encoding in a &lt;code&gt;Hash&lt;/code&gt; to the &lt;code&gt;attachments&lt;/code&gt; method.</source>
          <target state="translated">메일은 첨부 파일을 자동으로 Base64로 인코딩합니다. 다른 것을 원하면 콘텐츠를 인코딩하고 인코딩 된 콘텐츠와 인코딩을 &lt;code&gt;Hash&lt;/code&gt; 에서 &lt;code&gt;attachments&lt;/code&gt; 로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="c55ad5c93794819374aa38d68902e3c966dcc117" translate="yes" xml:space="preserve">
          <source>MailHelper</source>
          <target state="translated">MailHelper</target>
        </trans-unit>
        <trans-unit id="3d95a627cdb107ff69b030371d1e7e8b4c10935f" translate="yes" xml:space="preserve">
          <source>MailHelper#attachments</source>
          <target state="translated">MailHelper#attachments</target>
        </trans-unit>
        <trans-unit id="b2f5e480ba0bee4286f1cc3a4ca5a963f43cfe63" translate="yes" xml:space="preserve">
          <source>MailHelper#block_format</source>
          <target state="translated">MailHelper#block_format</target>
        </trans-unit>
        <trans-unit id="7ae23fe551aca162ae1c5589d602a1df8e671748" translate="yes" xml:space="preserve">
          <source>MailHelper#format_paragraph</source>
          <target state="translated">MailHelper#format_paragraph</target>
        </trans-unit>
        <trans-unit id="fb236b1746e1802c3a0b73e9683c6ab41ac24d0b" translate="yes" xml:space="preserve">
          <source>MailHelper#mailer</source>
          <target state="translated">MailHelper#mailer</target>
        </trans-unit>
        <trans-unit id="3e8ee2a92d3b7f52814ab5089a1ff9eee1297fd1" translate="yes" xml:space="preserve">
          <source>MailHelper#message</source>
          <target state="translated">MailHelper#message</target>
        </trans-unit>
        <trans-unit id="f70ea59698ce3b86d3b1359815b6b8b662a4785d" translate="yes" xml:space="preserve">
          <source>Mailer Filters abort further processing if body is set to a non-nil value.</source>
          <target state="translated">본문이 0이 아닌 값으로 설정된 경우 메일러 필터는 추가 처리를 중단합니다.</target>
        </trans-unit>
        <trans-unit id="13980201fa07cfc07994ed387ca6379609fdff0c" translate="yes" xml:space="preserve">
          <source>Mailer Models</source>
          <target state="translated">메일러 모델</target>
        </trans-unit>
        <trans-unit id="680a61c5f502dd97082db34df71463ef11e26d1f" translate="yes" xml:space="preserve">
          <source>Mailer Testing</source>
          <target state="translated">메일러 테스트</target>
        </trans-unit>
        <trans-unit id="a21c64ba416f2ab2281167ae92a45b9bf82d97e2" translate="yes" xml:space="preserve">
          <source>Mailer Views</source>
          <target state="translated">메일러 조회수</target>
        </trans-unit>
        <trans-unit id="68e337f3658a60fb99f830ff9b6e79e91a43f276" translate="yes" xml:space="preserve">
          <source>Mailer test cases obtain the mailer being tested from the name of the test class using &lt;code&gt;constantize&lt;/code&gt;:</source>
          <target state="translated">메일러 테스트 케이스는 &lt;code&gt;constantize&lt;/code&gt; 를 사용하여 테스트 클래스 이름에서 테스트중인 메일러를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="44df4fb76daaa7b1a6be96a25c78d05f88becb98" translate="yes" xml:space="preserve">
          <source>Mailer views</source>
          <target state="translated">메일러 조회수</target>
        </trans-unit>
        <trans-unit id="587b49cee9e902b2a9c917c758289cbced65c031" translate="yes" xml:space="preserve">
          <source>Mailer views are located in the &lt;code&gt;app/views/name_of_mailer_class&lt;/code&gt; directory. The specific mailer view is known to the class because its name is the same as the mailer method. In our example from above, our mailer view for the &lt;code&gt;welcome_email&lt;/code&gt; method will be in &lt;code&gt;app/views/user_mailer/welcome_email.html.erb&lt;/code&gt; for the HTML version and &lt;code&gt;welcome_email.text.erb&lt;/code&gt; for the plain text version.</source>
          <target state="translated">메일러보기는 &lt;code&gt;app/views/name_of_mailer_class&lt;/code&gt; 디렉토리에 있습니다. 특정 메일러보기는 이름이 메일러 메소드와 동일하므로 클래스에 알려져 있습니다. 위의 예에서 &lt;code&gt;welcome_email&lt;/code&gt; 메소드에 대한 메일러보기 는 HTML 버전의 경우 &lt;code&gt;app/views/user_mailer/welcome_email.html.erb&lt;/code&gt; , 일반 텍스트 버전의 경우 &lt;code&gt;welcome_email.text.erb&lt;/code&gt; 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="36be81ab1542c937801f33caaded349a9bc4127c" translate="yes" xml:space="preserve">
          <source>Mailers are really just another way to render a view. Instead of rendering a view and sending it over the HTTP protocol, they are just sending it out through the email protocols instead. Due to this, it makes sense to just have your controller tell the Mailer to send an email when a user is successfully created.</source>
          <target state="translated">메일러는 실제로보기를 렌더링하는 또 다른 방법입니다. 뷰를 렌더링하고 HTTP 프로토콜을 통해 전송하는 대신 전자 메일 프로토콜을 통해 전송하는 것입니다. 이 때문에 사용자가 성공적으로 생성되면 컨트롤러가 메일러에게 전자 메일을 보내도록 지시하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8f33bfdf3c88fe05bfdc4e267e0cc92da201b449" translate="yes" xml:space="preserve">
          <source>Mailers are really just another way to render a view. Instead of rendering a view and sending it over the HTTP protocol, they are sending it out through the email protocols instead. Due to this, it makes sense to have your controller tell the Mailer to send an email when a user is successfully created.</source>
          <target state="translated">메일러는 실제로 뷰를 렌더링하는 또 다른 방법입니다. 뷰를 렌더링하고 HTTP 프로토콜을 통해 보내는 대신 이메일 프로토콜을 통해 보내는 것입니다. 이로 인해 사용자가 성공적으로 생성되면 컨트롤러가 메일러에게 이메일을 보내도록 지시하는 것이 합리적입니다.</target>
        </trans-unit>
        <trans-unit id="64de1eb796e4922fd13819de6eaab4dcdb1d7c9b" translate="yes" xml:space="preserve">
          <source>Mailers have methods called &quot;actions&quot; and they use views to structure their content. Where a controller generates content like HTML to send back to the client, a Mailer creates a message to be delivered via email.</source>
          <target state="translated">메일러에는 &quot;조치&quot;라는 메소드가 있으며보기를 사용하여 컨텐츠를 구성합니다. 컨트롤러가 HTML과 같은 컨텐츠를 생성하여 클라이언트로 다시 보내는 경우, 메일러는 이메일을 통해 전달할 메시지를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="16066075c5a83dca0ba2cea04fba9274abb07b0e" translate="yes" xml:space="preserve">
          <source>Mailgun</source>
          <target state="translated">Mailgun</target>
        </trans-unit>
        <trans-unit id="8b66a1c9fbdcaa52fb90bc5d0058e4dd90be7b68" translate="yes" xml:space="preserve">
          <source>Main Features</source>
          <target state="translated">주요 특징</target>
        </trans-unit>
        <trans-unit id="ae266dfc442b5ec385b4338560900eb345c499d9" translate="yes" xml:space="preserve">
          <source>Main render entry point shared by Action View and Action Controller.</source>
          <target state="translated">액션 뷰와 액션 컨트롤러가 공유하는 메인 렌더 진입 점.</target>
        </trans-unit>
        <trans-unit id="089471884fb865229f0f9111a9377f8fb353d285" translate="yes" xml:space="preserve">
          <source>Maintaining the test database schema</source>
          <target state="translated">테스트 데이터베이스 스키마 유지</target>
        </trans-unit>
        <trans-unit id="f8fa33a721957f371e84c8dd9e6fb8b01c0321b1" translate="yes" xml:space="preserve">
          <source>Maintenance Policy</source>
          <target state="translated">유지 보수 정책</target>
        </trans-unit>
        <trans-unit id="58d6b980b33f53ac06a743ee46e99cae645364df" translate="yes" xml:space="preserve">
          <source>Maintenance Policy for Ruby on Rails</source>
          <target state="translated">Ruby on Rails 유지 보수 정책</target>
        </trans-unit>
        <trans-unit id="252157b41e8c33085114f9d5bae78ff87bf6ade9" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;ApplicationController&lt;/code&gt; inherit from &lt;code&gt;ActionController::API&lt;/code&gt; instead of &lt;code&gt;ActionController::Base&lt;/code&gt;. As with middleware, this will leave out any Action Controller modules that provide functionalities primarily used by browser applications.</source>
          <target state="translated">확인 &lt;code&gt;ApplicationController&lt;/code&gt; 로부터 상속 &lt;code&gt;ActionController::API&lt;/code&gt; 대신 &lt;code&gt;ActionController::Base&lt;/code&gt; . 미들웨어와 마찬가지로, 이는 브라우저 애플리케이션에서 주로 사용하는 기능을 제공하는 모든 Action Controller 모듈을 제외합니다.</target>
        </trans-unit>
        <trans-unit id="3ad5d449d0548ace3647803d555c0dbbae48a281" translate="yes" xml:space="preserve">
          <source>Make a temporary table.</source>
          <target state="translated">임시 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ec88d6037ccc44218de1dd451330f65338a749ea" translate="yes" xml:space="preserve">
          <source>Make an entry in &lt;code&gt;Rails&lt;/code&gt; routing file &lt;code&gt;config/routes.rb&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Rails&lt;/code&gt; 라우팅 파일 &lt;code&gt;config/routes.rb&lt;/code&gt; 에 항목을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="306b5c693bdfd1595e76e9e9d059f004a98367a8" translate="yes" xml:space="preserve">
          <source>Make an entry in Rails routing file &lt;code&gt;config/routes.rb&lt;/code&gt;</source>
          <target state="translated">Rails 라우팅 파일 &lt;code&gt;config/routes.rb&lt;/code&gt; 에 입력하십시오</target>
        </trans-unit>
        <trans-unit id="8b69db2b39800a827d6f6168d3c1a20938083839" translate="yes" xml:space="preserve">
          <source>Make periodic timers no-op</source>
          <target state="translated">주기적인 타이머를 작동시키지 않기</target>
        </trans-unit>
        <trans-unit id="8399eb539601add9de2d3f82842b56234c0d1f9c" translate="yes" xml:space="preserve">
          <source>Make sure that you declare the database column used for the serialized store as a text, so there's plenty of room.</source>
          <target state="translated">직렬화 된 상점에 사용 된 데이터베이스 열을 텍스트로 선언해야하므로 충분한 공간이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4ac7a454c98bda90c921a3bff6938498dfb3fc2" translate="yes" xml:space="preserve">
          <source>Make sure the lock version column gets updated when counters are updated.</source>
          <target state="translated">카운터가 업데이트 될 때 잠금 버전 열이 업데이트되는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="57fdc5e6a8181b505e4377c235dcdba10ccefd2b" translate="yes" xml:space="preserve">
          <source>Make sure to check the modules included in &lt;code&gt;ActionController::Base&lt;/code&gt; if you want to use any other functionality that is not provided by &lt;code&gt;ActionController::API&lt;/code&gt; out of the box.</source>
          <target state="translated">&lt;code&gt;ActionController::API&lt;/code&gt; 에서 제공하지 않는 다른 기능을 즉시 사용하려면 &lt;code&gt;ActionController::Base&lt;/code&gt; 포함 된 모듈을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b94a75acb3e2883ef72226f00cf1c8e7c27ad3d" translate="yes" xml:space="preserve">
          <source>Make sure to configure your server to support these options following the instructions in the &lt;code&gt;Rack::Sendfile&lt;/code&gt; documentation.</source>
          <target state="translated">&lt;code&gt;Rack::Sendfile&lt;/code&gt; 설명서 의 지침에 따라 이러한 옵션을 지원하도록 서버를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="5efdeaf7a8b12f96eb5dc7d68b2ffffb447d6f56" translate="yes" xml:space="preserve">
          <source>Make sure to specify the correct server location in each of your environment config files:</source>
          <target state="translated">각 환경 구성 파일에서 올바른 서버 위치를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="8899c331bcf7e348bccc244aac252dc6bbce4cdd" translate="yes" xml:space="preserve">
          <source>Make sure to use &lt;code&gt;and return&lt;/code&gt; instead of &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; because &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; will not work due to the operator precedence in the Ruby Language.</source>
          <target state="translated">사용 확인 &lt;code&gt;and return&lt;/code&gt; 대신 &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; 때문에 &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; 것 때문에 루비 언어의 연산자 우선 순위에없는 일.</target>
        </trans-unit>
        <trans-unit id="fc7e11f912ac4bdebcc08be41ef772e521bd6ac6" translate="yes" xml:space="preserve">
          <source>Make sure you are comparing Flash message keys against strings.</source>
          <target state="translated">Flash 메시지 키와 문자열을 비교하고 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e680f6c6382557f180208e3d709cb9136d70ccb5" translate="yes" xml:space="preserve">
          <source>Make sure your buckets are properly configured for public access. See docs on how to enable public read permissions for &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access-bucket.html&quot;&gt;Amazon S3&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/storage/docs/access-control/making-data-public#buckets&quot;&gt;Google Cloud Storage&lt;/a&gt;, and &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/blobs/storage-manage-access-to-resources#set-container-public-access-level-in-the-azure-portal&quot;&gt;Microsoft Azure&lt;/a&gt; storage services.</source>
          <target state="translated">버킷이 퍼블릭 액세스를 위해 올바르게 구성되었는지 확인하십시오. &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access-bucket.html&quot;&gt;Amazon S3&lt;/a&gt; , &lt;a href=&quot;https://cloud.google.com/storage/docs/access-control/making-data-public#buckets&quot;&gt;Google Cloud Storage&lt;/a&gt; 및 &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/blobs/storage-manage-access-to-resources#set-container-public-access-level-in-the-azure-portal&quot;&gt;Microsoft Azure&lt;/a&gt; 스토리지 서비스에 대한 공개 읽기 권한을 활성화하는 방법에 대한 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="16e768995acffc826fe3508921661c1719fc07d8" translate="yes" xml:space="preserve">
          <source>Make sure your queuing backend &quot;listens&quot; on your queue name. For some backends you need to specify the queues to listen to.</source>
          <target state="translated">큐 백엔드가 큐 이름에 &quot;들어&quot;있는지 확인하십시오. 일부 백엔드의 경우 청취 할 큐를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="5682e0cf408b02c5d4877c6049064b81b83869ac" translate="yes" xml:space="preserve">
          <source>Make the following changes to your &lt;code&gt;Gemfile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Gemfile&lt;/code&gt; 을 다음과 같이 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="f964d093f2f5ad4e04fb5d1cac5dfe5b45964069" translate="yes" xml:space="preserve">
          <source>Makes a unique &lt;code&gt;X-Request-Id&lt;/code&gt; header available to the response and enables the &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; method.</source>
          <target state="translated">응답에 고유 한 &lt;code&gt;X-Request-Id&lt;/code&gt; 헤더를 사용하고 &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; 메소드를 사용 가능하게합니다 .</target>
        </trans-unit>
        <trans-unit id="5036c3834983c0c5d0a51b922a33316cf1efabc5" translate="yes" xml:space="preserve">
          <source>Makes a unique request id available to the &lt;code&gt;action_dispatch.request_id&lt;/code&gt; env variable (which is then accessible through &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; or the alias &lt;code&gt;ActionDispatch::Request#uuid&lt;/code&gt;) and sends the same id to the client via the X-Request-Id header.</source>
          <target state="translated">&lt;code&gt;action_dispatch.request_id&lt;/code&gt; env 변수에 고유 한 요청 ID를 사용 가능하게하고 (이는 &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; 또는 별명 &lt;code&gt;ActionDispatch::Request#uuid&lt;/code&gt; 통해 액세스 가능 ) X-Request-Id를 통해 동일한 ID를 클라이언트에 보냅니다. 헤더.</target>
        </trans-unit>
        <trans-unit id="77c87d6f8d7b1bbc1e4b64d6ed3fcf1eeab45281" translate="yes" xml:space="preserve">
          <source>Makes an underscored, lowercase form from the expression in the string.</source>
          <target state="translated">문자열의 표현식에서 밑줄이있는 소문자 형식을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9669dfc0cbb139a1a81d28a2be5b2f78c6eec70e" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;httpauthentication/basic&quot;&gt;&lt;code&gt;Basic&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;httpauthentication/digest&quot;&gt;&lt;code&gt;Digest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;httpauthentication/token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt; authentication.</source>
          <target state="translated">HTTP &lt;a href=&quot;httpauthentication/basic&quot;&gt; &lt;code&gt;Basic&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;httpauthentication/digest&quot;&gt; &lt;code&gt;Digest&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;httpauthentication/token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt; 인증을 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3cd3cc6959800f15a2205416f9bd7058de795420" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;httpauthentication/basic&quot;&gt;Basic&lt;/a&gt;, &lt;a href=&quot;httpauthentication/digest&quot;&gt;Digest&lt;/a&gt; and &lt;a href=&quot;httpauthentication/token&quot;&gt;Token&lt;/a&gt; authentication.</source>
          <target state="translated">HTTP &lt;a href=&quot;httpauthentication/basic&quot;&gt;Basic&lt;/a&gt; , &lt;a href=&quot;httpauthentication/digest&quot;&gt;Digest&lt;/a&gt; 및 &lt;a href=&quot;httpauthentication/token&quot;&gt;Token&lt;/a&gt; 인증을 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cf03647a61b240bb87a605abba11b5e117ea46b" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt; authentication.</source>
          <target state="translated">HTTP &lt;a href=&quot;token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt; 인증을 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bab5116953faf0be205b9fc2c28dd2778e91ac89" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;token&quot;&gt;Token&lt;/a&gt; authentication.</source>
          <target state="translated">HTTP &lt;a href=&quot;token&quot;&gt;토큰&lt;/a&gt; 인증을 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82d90853a9285a97be64f6ddfab56da7048dd4ea" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP Basic authentication.</source>
          <target state="translated">HTTP 기본 인증을 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="248ffebb944238814419305b57452011f6e8a054" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP Digest authentication.</source>
          <target state="translated">HTTP 다이제스트 인증을 쉽게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b65162648b93cf813417157560cc2b1670a2db9" translate="yes" xml:space="preserve">
          <source>Makes it possible for the RemoteConnection to disconnect a specific connection.</source>
          <target state="translated">RemoteConnection이 특정 연결을 끊을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dba69823998a36ac20a883dc8e6f67040b179324" translate="yes" xml:space="preserve">
          <source>Making Select Boxes with Ease</source>
          <target state="translated">간편한 선택 상자 만들기</target>
        </trans-unit>
        <trans-unit id="cb01187942b0742e6351609b7735a6adcf73fc33" translate="yes" xml:space="preserve">
          <source>Making Your Library or Gem a Pre-Processor</source>
          <target state="translated">라이브러리 또는 보석을 전 처리기 만들기</target>
        </trans-unit>
        <trans-unit id="8205e9d586c3493e6f60cebf5165f64f9b3c019e" translate="yes" xml:space="preserve">
          <source>Making messages expire</source>
          <target state="translated">메시지 만료</target>
        </trans-unit>
        <trans-unit id="a5ba6a079e12e18c361a6a47933e07e1a7228504" translate="yes" xml:space="preserve">
          <source>Manage &lt;code&gt;Gemfile&lt;/code&gt; indentation for a DSL action block</source>
          <target state="translated">DSL 작업 블록에 대한 &lt;code&gt;Gemfile&lt;/code&gt; 들여 쓰기 관리</target>
        </trans-unit>
        <trans-unit id="b2aee73bd2e79677bed872d3980e254bec42f2c5" translate="yes" xml:space="preserve">
          <source>Managing dependencies</source>
          <target state="translated">의존성 관리</target>
        </trans-unit>
        <trans-unit id="4c4e0450a210ba7947ca44f072542be4cd2bbf6e" translate="yes" xml:space="preserve">
          <source>Managing the Locale across Requests</source>
          <target state="translated">여러 요청에서 로케일 관리</target>
        </trans-unit>
        <trans-unit id="5e0b984f07b1075591ab1d0a27cd0c92e4a47a76" translate="yes" xml:space="preserve">
          <source>Mandrill</source>
          <target state="translated">Mandrill</target>
        </trans-unit>
        <trans-unit id="2d88b61ea857089a4c533daa1a9cf98822177551" translate="yes" xml:space="preserve">
          <source>Manifest Files and Directives</source>
          <target state="translated">매니페스트 파일 및 지시어</target>
        </trans-unit>
        <trans-unit id="38d94fc9b2424981345aad47073ff6221d182b79" translate="yes" xml:space="preserve">
          <source>Manipulating session and cookie variables</source>
          <target state="translated">세션 및 쿠키 변수 조작</target>
        </trans-unit>
        <trans-unit id="6f5bab837311ddf9a2bc63d03a1cd96d18a19ce8" translate="yes" xml:space="preserve">
          <source>Manual Unsubscription</source>
          <target state="translated">수동 탈퇴</target>
        </trans-unit>
        <trans-unit id="e7686ebdb95a27789f53732e864b2cf3e21d13ff" translate="yes" xml:space="preserve">
          <source>Manually check out a connection from the pool with &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;ActiveRecord::Base.connection_pool.checkout&lt;/a&gt;. You are responsible for returning this connection to the pool when finished by calling &lt;a href=&quot;connectionpool#method-i-checkin&quot;&gt;ActiveRecord::Base.connection_pool.checkin(connection)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;ActiveRecord :: Base.connection_pool.checkout&lt;/a&gt; 을 사용하여 풀에서 연결을 수동으로 체크 아웃하십시오 . &lt;a href=&quot;connectionpool#method-i-checkin&quot;&gt;ActiveRecord :: Base.connection_pool.checkin (connection)&lt;/a&gt; 을 호출하여 완료되면 풀에이 연결을 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="047b759d8afa6da4ea87a2a2059a77060daca4cd" translate="yes" xml:space="preserve">
          <source>Many apps grow beyond simple forms editing a single object. For example, when creating a &lt;code&gt;Person&lt;/code&gt; you might want to allow the user to (on the same form) create multiple address records (home, work, etc.). When later editing that person the user should be able to add, remove, or amend addresses as necessary.</source>
          <target state="translated">많은 앱들이 단일 객체를 편집하는 단순한 형태를 넘어 성장합니다. 예를 들어, &lt;code&gt;Person&lt;/code&gt; 을 작성할 때 사용자가 동일한 양식으로 여러 주소 레코드 (집, 직장 등)를 작성할 수 있도록 할 수 있습니다. 나중에 해당 사용자를 편집 할 때 사용자는 필요에 따라 주소를 추가, 제거 또는 수정할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="c51aa84e06e0d4cb20eb010b07acb0a782ae7e1b" translate="yes" xml:space="preserve">
          <source>Many cross-site scripting (XSS) exploits aim at obtaining the user's cookie. You'll read &lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;more about XSS&lt;/a&gt; later.</source>
          <target state="translated">많은 사이트 간 스크립팅 (XSS) 익스플로잇은 사용자 쿠키를 얻는 것을 목표로합니다. &lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;XSS에 대한 자세한 내용은&lt;/a&gt; 나중에 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="94760ac5345671c21adf55c326e4bc74930f068c" translate="yes" xml:space="preserve">
          <source>Many modern web servers can be used as a proxy server to balance third-party elements such as caching servers or application servers.</source>
          <target state="translated">캐싱 서버 나 응용 프로그램 서버와 같은 타사 요소의 균형을 맞추기 위해 많은 최신 웹 서버를 프록시 서버로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68dea1c5c75caa39cba7ba14014f2517fbc6048c" translate="yes" xml:space="preserve">
          <source>Many of Action Dispatcher's internal components are implemented as Rack middlewares. &lt;code&gt;Rails::Application&lt;/code&gt; uses &lt;code&gt;ActionDispatch::MiddlewareStack&lt;/code&gt; to combine various internal and external middlewares to form a complete Rails Rack application.</source>
          <target state="translated">많은 Action Dispatcher의 내부 구성 요소는 랙 미들웨어로 구현됩니다. &lt;code&gt;Rails::Application&lt;/code&gt; 은 &lt;code&gt;ActionDispatch::MiddlewareStack&lt;/code&gt; 을 사용하여 다양한 내부 및 외부 미들웨어를 결합하여 완벽한 Rails Rack 애플리케이션을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="5023dcf79d2fffe404c655626656b9c927384425" translate="yes" xml:space="preserve">
          <source>Many web applications allow users to upload files. &lt;em&gt;File names, which the user may choose (partly), should always be filtered&lt;/em&gt; as an attacker could use a malicious file name to overwrite any file on the server. If you store file uploads at /var/www/uploads, and the user enters a file name like &quot;../../../etc/passwd&quot;, it may overwrite an important file. Of course, the Ruby interpreter would need the appropriate permissions to do so - one more reason to run web servers, database servers, and other programs as a less privileged Unix user.</source>
          <target state="translated">많은 웹 응용 프로그램에서 사용자가 파일을 업로드 할 수 있습니다. 공격자가 악의적 인 파일 이름을 사용하여 서버의 파일을 덮어 쓸 수 있으므로 &lt;em&gt;사용자가 부분적으로 선택할 수있는 파일 이름은 항상 필터링해야&lt;/em&gt; 합니다. 파일 업로드를 / var / www / uploads에 저장하고 사용자가 &quot;../../../etc/passwd&quot;와 같은 파일 이름을 입력하면 중요한 파일을 덮어 쓸 수 있습니다. 물론, 루비 인터프리터는 권한이 덜한 유닉스 사용자로서 웹 서버, 데이터베이스 서버 및 기타 프로그램을 실행해야하는 또 하나의 이유가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="c23c36ee0702008b369b29fb802016cb8c1b8277" translate="yes" xml:space="preserve">
          <source>Many web applications have an authentication system: a user provides a user name and password, the web application checks them and stores the corresponding user id in the session hash. From now on, the session is valid. On every request the application will load the user, identified by the user id in the session, without the need for new authentication. The session ID in the cookie identifies the session.</source>
          <target state="translated">많은 웹 응용 프로그램에는 인증 시스템이 있습니다. 사용자는 사용자 이름과 암호를 제공하고 웹 응용 프로그램은이를 확인하고 해당 사용자 ID를 세션 해시에 저장합니다. 이제부터 세션이 유효합니다. 모든 요청에서 응용 프로그램은 새로운 인증없이 세션에서 사용자 ID로 식별 된 사용자를로드합니다. 쿠키의 세션 ID는 세션을 식별합니다.</target>
        </trans-unit>
        <trans-unit id="19390742e5806874fd7fb49160ecbeb01caa65a9" translate="yes" xml:space="preserve">
          <source>Many web applications make it easy to hijack user accounts. Why not be different and make it more difficult?.</source>
          <target state="translated">많은 웹 애플리케이션으로 사용자 계정을 쉽게 납치 할 수 있습니다. 왜 다르고 어렵게 만들지 않습니까?</target>
        </trans-unit>
        <trans-unit id="24891e5f043d78206edf6518d0d3d35f7785b4f3" translate="yes" xml:space="preserve">
          <source>Many-to-many</source>
          <target state="translated">Many-to-many</target>
        </trans-unit>
        <trans-unit id="c9a42937cf22ca82b4cf9b49a17e155274e834d4" translate="yes" xml:space="preserve">
          <source>Maps asset types to public directory.</source>
          <target state="translated">자산 유형을 공용 디렉토리에 맵핑합니다.</target>
        </trans-unit>
        <trans-unit id="2186a94f3e5893663ec64cffa3a2c9ffa5b5e277" translate="yes" xml:space="preserve">
          <source>MariaDB: &lt;a href=&quot;https://mariadb.com/kb/en/mariadb/explain/&quot;&gt;EXPLAIN&lt;/a&gt;</source>
          <target state="translated">MariaDB : &lt;a href=&quot;https://mariadb.com/kb/en/mariadb/explain/&quot;&gt;설명&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab2e377998906eb21e2af5cfe084f2169f9ad123" translate="yes" xml:space="preserve">
          <source>Mark a key as being a connection identifier index that can then be used to find the specific connection again later. Common identifiers are current_user and current_account, but could be anything, really.</source>
          <target state="translated">키를 연결 식별자 색인으로 표시 한 다음 나중에 다시 특정 연결을 찾는 데 사용할 수 있습니다. 일반적인 식별자는 current_user와 current_account이지만 실제로는 아무 것도 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77e548ab7cc8720a986d43ffb76f2e1373d171ea" translate="yes" xml:space="preserve">
          <source>Marks a string as trusted safe. It will be inserted into HTML with no additional escaping performed. It is your responsibility to ensure that the string contains no malicious content. This method is equivalent to the &lt;code&gt;raw&lt;/code&gt; helper in views. It is recommended that you use &lt;code&gt;sanitize&lt;/code&gt; instead of this method. It should never be called on user input.</source>
          <target state="translated">문자열을 신뢰할 수있는 안전으로 표시합니다. 추가 이스케이프를 수행하지 않고 HTML에 삽입됩니다. 문자열에 악의적 인 내용이 포함되지 않도록하는 것은 귀하의 책임입니다. 이 방법은 뷰 의 &lt;code&gt;raw&lt;/code&gt; 도우미 와 동일합니다 . 이 방법 대신 &lt;code&gt;sanitize&lt;/code&gt; 을 사용하는 것이 좋습니다 . 사용자 입력시 호출해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="4cf7916b5b85729b16a8ae8093bdc4715dd95f4d" translate="yes" xml:space="preserve">
          <source>Marks the entire flash or a single flash entry to be discarded by the end of the current action:</source>
          <target state="translated">현재 작업이 끝날 때 전체 플래시 또는 단일 플래시 항목이 삭제되도록 표시합니다.</target>
        </trans-unit>
        <trans-unit id="17e2394d0589431098b1c37bfbdbd191785f528b" translate="yes" xml:space="preserve">
          <source>Marks the named method as intended to be redefined, if it exists. Suppresses the Ruby method redefinition warning. Prefer &lt;a href=&quot;module#method-i-redefine_method&quot;&gt;&lt;code&gt;redefine_method&lt;/code&gt;&lt;/a&gt; where possible.</source>
          <target state="translated">명명 된 메서드가있는 경우 재정의하려는 것으로 표시합니다. Ruby 메소드 재정의 경고를 억제합니다. 가능한 경우 &lt;a href=&quot;module#method-i-redefine_method&quot;&gt; &lt;code&gt;redefine_method&lt;/code&gt; 를&lt;/a&gt; 선호 하십시오.</target>
        </trans-unit>
        <trans-unit id="762795e51673105df0f06e3d6f3f9189f42b1615" translate="yes" xml:space="preserve">
          <source>Marks the named method as intended to be redefined, if it exists. Suppresses the Ruby method redefinition warning. Prefer &lt;a href=&quot;module#method-i-redefine_method&quot;&gt;redefine_method&lt;/a&gt; where possible.</source>
          <target state="translated">명명 된 메소드를 재정의하려는 것으로 표시합니다 (있는 경우). Ruby 메소드 재정의 경고를 억제합니다. 가능한 경우 &lt;a href=&quot;module#method-i-redefine_method&quot;&gt;redefine_method를&lt;/a&gt; 선호 하십시오.</target>
        </trans-unit>
        <trans-unit id="0475c3dda41d22daed4981fee4af23c1b9ef4ff1" translate="yes" xml:space="preserve">
          <source>Marks this record as read only.</source>
          <target state="translated">이 레코드를 읽기 전용으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b36e9ee63716f8133557ba3c2a06919d8f961b9c" translate="yes" xml:space="preserve">
          <source>Marks this record to be destroyed as part of the parent's save transaction. This does &lt;em&gt;not&lt;/em&gt; actually destroy the record instantly, rather child record will be destroyed when &lt;code&gt;parent.save&lt;/code&gt; is called.</source>
          <target state="translated">이 레코드가 부모의 저장 트랜잭션의 일부로 제거되도록 표시합니다. 이것은 실제로 레코드를 즉시 삭제 하지는 &lt;em&gt;않지만 &lt;/em&gt; &lt;code&gt;parent.save&lt;/code&gt; 를 호출 하면 하위 레코드가 삭제됩니다 .</target>
        </trans-unit>
        <trans-unit id="567a561a163f9443feee81023bbb6e3d3d856e7d" translate="yes" xml:space="preserve">
          <source>Mask value of &lt;code&gt;params&lt;/code&gt; if key matches one of filters.</source>
          <target state="translated">키가 필터 중 하나와 일치하면 &lt;code&gt;params&lt;/code&gt; 마스크 값입니다 .</target>
        </trans-unit>
        <trans-unit id="cb3cb3e44a313e8943d59b0c6c633a46ac1ce5d8" translate="yes" xml:space="preserve">
          <source>Masked Authenticity Tokens</source>
          <target state="translated">마스크 된 진품 토큰</target>
        </trans-unit>
        <trans-unit id="5c1e45d56c039093f8a35ab45a70a26ca3d2a641" translate="yes" xml:space="preserve">
          <source>Matches a URL pattern to one or more routes.</source>
          <target state="translated">URL 패턴을 하나 이상의 경로와 일치시킵니다.</target>
        </trans-unit>
        <trans-unit id="dcd37a0f5706371522de514ef180c0fb66ebe5cb" translate="yes" xml:space="preserve">
          <source>Matches a URL pattern to one or more routes. For more information, see &lt;a href=&quot;base#method-i-match&quot;&gt;match&lt;/a&gt;.</source>
          <target state="translated">URL 패턴을 하나 이상의 경로와 일치시킵니다. 자세한 내용은 &lt;a href=&quot;base#method-i-match&quot;&gt;match를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc8477b206cc55c328a42daa3a110d5a902da25e" translate="yes" xml:space="preserve">
          <source>Matches an exception to a handler based on the exception class.</source>
          <target state="translated">예외 클래스를 기반으로 핸들러와 예외를 일치시킵니다.</target>
        </trans-unit>
        <trans-unit id="392aa4613bb333a2cb618b83882099e4b8d3329d" translate="yes" xml:space="preserve">
          <source>Matching URLs will be marked as '[FILTERED]'.</source>
          <target state="translated">일치하는 URL은 '[FILTERED]'로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a8df2fec28d8948a0326722029c7492b88ee4fbe" translate="yes" xml:space="preserve">
          <source>Maximum</source>
          <target state="translated">Maximum</target>
        </trans-unit>
        <trans-unit id="12cc5e83df7b3b7cee5836d99947c68d0239b409" translate="yes" xml:space="preserve">
          <source>May be called with a block:</source>
          <target state="translated">블록으로 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea0fd428175d5a7f6c71193bfd0cb7d518663243" translate="yes" xml:space="preserve">
          <source>Media type of response.</source>
          <target state="translated">미디어 유형의 응답.</target>
        </trans-unit>
        <trans-unit id="8d4f7c7b848d7a6ae17b193da35c83de55460b18" translate="yes" xml:space="preserve">
          <source>Memoizes the value returned by &lt;a href=&quot;getip#method-i-calculate_ip&quot;&gt;&lt;code&gt;calculate_ip&lt;/code&gt;&lt;/a&gt; and returns it for &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;ActionDispatch::Request&lt;/code&gt;&lt;/a&gt; to use.</source>
          <target state="translated">반환 된 값 Memoizes &lt;a href=&quot;getip#method-i-calculate_ip&quot;&gt; &lt;code&gt;calculate_ip&lt;/code&gt; &lt;/a&gt; 에 대한 반환을 &lt;a href=&quot;../request&quot;&gt; &lt;code&gt;ActionDispatch::Request&lt;/code&gt; &lt;/a&gt; 사용에 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d5f48e858447d5b8bf7bc81648942a5d44922e8" translate="yes" xml:space="preserve">
          <source>Memoizes the value returned by &lt;a href=&quot;getip#method-i-calculate_ip&quot;&gt;calculate_ip&lt;/a&gt; and returns it for &lt;a href=&quot;../request&quot;&gt;ActionDispatch::Request&lt;/a&gt; to use.</source>
          <target state="translated">반환 된 값 Memoizes &lt;a href=&quot;getip#method-i-calculate_ip&quot;&gt;calculate_ip&lt;/a&gt; 에 대한 반환을 &lt;a href=&quot;../request&quot;&gt;ActionDispatch :: 요청&lt;/a&gt; 사용에 있습니다.</target>
        </trans-unit>
        <trans-unit id="c582a39d302aff9549c336383b6fc21c37d4ebe1" translate="yes" xml:space="preserve">
          <source>Merge conflicts can occur in your schema file when two branches modify schema. To resolve these conflicts run &lt;code&gt;bin/rails db:migrate&lt;/code&gt; to regenerate the schema file.</source>
          <target state="translated">두 분기가 스키마를 수정할 때 스키마 파일에서 병합 충돌이 발생할 수 있습니다. 이러한 충돌을 해결하려면 &lt;code&gt;bin/rails db:migrate&lt;/code&gt; 를 실행 하여 스키마 파일을 재생성하십시오.</target>
        </trans-unit>
        <trans-unit id="5f53a17ddcd691ca1e78252051c126d13cd160ee" translate="yes" xml:space="preserve">
          <source>Merge conflicts can occur in your schema file when two branches modify schema. To resolve these conflicts run &lt;code&gt;rails db:migrate&lt;/code&gt; to regenerate the schema file.</source>
          <target state="translated">두 분기가 스키마를 수정할 때 스키마 파일에서 병합 충돌이 발생할 수 있습니다. 이러한 충돌을 해결하려면 &lt;code&gt;rails db:migrate&lt;/code&gt; 를 실행 하여 스키마 파일을 재생성하십시오.</target>
        </trans-unit>
        <trans-unit id="900dd84f0b222da89ac364b102139535e8a32737" translate="yes" xml:space="preserve">
          <source>Merges in the conditions from &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an &lt;a href=&quot;relation&quot;&gt;&lt;code&gt;ActiveRecord::Relation&lt;/code&gt;&lt;/a&gt;. Returns an array representing the intersection of the resulting records with &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an array.</source>
          <target state="translated">의 조건에서 병합 &lt;code&gt;other&lt;/code&gt; , 경우 &lt;code&gt;other&lt;/code&gt; 이다 &lt;a href=&quot;relation&quot;&gt; &lt;code&gt;ActiveRecord::Relation&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;other&lt;/code&gt; 가 배열 인 경우 결과 레코드와 &lt;code&gt;other&lt;/code&gt; 의 교차점을 나타내는 배열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="226be574fbe2fe077103b611adc4a492e6b6acbc" translate="yes" xml:space="preserve">
          <source>Merges in the conditions from &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an &lt;a href=&quot;relation&quot;&gt;ActiveRecord::Relation&lt;/a&gt;. Returns an array representing the intersection of the resulting records with &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an array.</source>
          <target state="translated">의 조건에서 병합 &lt;code&gt;other&lt;/code&gt; , 경우 &lt;code&gt;other&lt;/code&gt; 이다 &lt;a href=&quot;relation&quot;&gt;액티브 :: 관계&lt;/a&gt; . &lt;code&gt;other&lt;/code&gt; 가 배열 인 경우 결과 레코드와 &lt;code&gt;other&lt;/code&gt; 의 교차점을 나타내는 배열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9d078dcba4eea635c17ac1cc07c092528c89cf22" translate="yes" xml:space="preserve">
          <source>Merges the caller into &lt;code&gt;other_hash&lt;/code&gt;. For example,</source>
          <target state="translated">호출자를 &lt;code&gt;other_hash&lt;/code&gt; 에 병합합니다 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="3eb6109cebb02b893019bf2fb6ad12061a744e3e" translate="yes" xml:space="preserve">
          <source>Merges the errors from &lt;code&gt;other&lt;/code&gt;, each &lt;code&gt;Error&lt;/code&gt; wrapped as &lt;code&gt;NestedError&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; 오류를 병합하고 각 &lt;code&gt;Error&lt;/code&gt; 는 &lt;code&gt;NestedError&lt;/code&gt; 로 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="d9d98f104e303f9cf5ba6cad0f2e8b90cc2ed8ec" translate="yes" xml:space="preserve">
          <source>Merges the errors from &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; 의 오류를 병합합니다 .</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="30998fc7b14825bfe3e591f38ea1804d33fd195e" translate="yes" xml:space="preserve">
          <source>Merging of scopes</source>
          <target state="translated">범위 병합</target>
        </trans-unit>
        <trans-unit id="39479ff33f15bab6f4bff70fe02746b486a928cb" translate="yes" xml:space="preserve">
          <source>MessageDelivery</source>
          <target state="translated">MessageDelivery</target>
        </trans-unit>
        <trans-unit id="2ca3a9f4c5c006a148b7a9932578ec19923bc9f1" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_later</source>
          <target state="translated">MessageDelivery#deliver_later</target>
        </trans-unit>
        <trans-unit id="d58a2072f2c00bcf994136544ed0881f4277955c" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_later!</source>
          <target state="translated">MessageDelivery#deliver_later!</target>
        </trans-unit>
        <trans-unit id="7dc2404b1df899d54d5d918418a7a861a6fd98d7" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_now</source>
          <target state="translated">MessageDelivery#deliver_now</target>
        </trans-unit>
        <trans-unit id="f694e10fbd9555697b01757d6c268f0aba5cf7e5" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_now!</source>
          <target state="translated">MessageDelivery#deliver_now!</target>
        </trans-unit>
        <trans-unit id="d815799b8048b0698d61637622c9b59c5a136e80" translate="yes" xml:space="preserve">
          <source>MessageDelivery#message</source>
          <target state="translated">MessageDelivery#message</target>
        </trans-unit>
        <trans-unit id="ebbce05309872298d3a6ebb2dc89bd5f0a10e93b" translate="yes" xml:space="preserve">
          <source>MessageDelivery#processed?</source>
          <target state="translated">MessageDelivery#processed?</target>
        </trans-unit>
        <trans-unit id="00bd198ba5bc0785f66eced2f7b32668155ba43b" translate="yes" xml:space="preserve">
          <source>MessageEncryptor</source>
          <target state="translated">MessageEncryptor</target>
        </trans-unit>
        <trans-unit id="75851ac20320d046daeb57638d6439c136973683" translate="yes" xml:space="preserve">
          <source>MessageEncryptor#decrypt_and_verify</source>
          <target state="translated">MessageEncryptor#decrypt_and_verify</target>
        </trans-unit>
        <trans-unit id="ec3605655c1dd7df73e97bee16ca0dc06fa4ba72" translate="yes" xml:space="preserve">
          <source>MessageEncryptor#encrypt_and_sign</source>
          <target state="translated">MessageEncryptor#encrypt_and_sign</target>
        </trans-unit>
        <trans-unit id="f92a218377d645f9092dd4c876aaced4944bc4c6" translate="yes" xml:space="preserve">
          <source>MessageEncryptor::key_len</source>
          <target state="translated">MessageEncryptor::key_len</target>
        </trans-unit>
        <trans-unit id="8f1e28e8dce828703d5d80714ec5189d685ade59" translate="yes" xml:space="preserve">
          <source>MessageEncryptor::new</source>
          <target state="translated">MessageEncryptor::new</target>
        </trans-unit>
        <trans-unit id="2fd13a09c7dae2fdbec9311749e402b4ff60c103" translate="yes" xml:space="preserve">
          <source>MessageVerifier</source>
          <target state="translated">MessageVerifier</target>
        </trans-unit>
        <trans-unit id="0a4d6d879f6d4797c6c59a17b65975130fee0209" translate="yes" xml:space="preserve">
          <source>MessageVerifier#generate</source>
          <target state="translated">MessageVerifier#generate</target>
        </trans-unit>
        <trans-unit id="42f90315126a3917fcfb263375bb71bc0a0a0dc4" translate="yes" xml:space="preserve">
          <source>MessageVerifier#valid_message?</source>
          <target state="translated">MessageVerifier#valid_message?</target>
        </trans-unit>
        <trans-unit id="81f77bbedd728547b52ddc40c7f614824f70a36b" translate="yes" xml:space="preserve">
          <source>MessageVerifier#verified</source>
          <target state="translated">MessageVerifier#verified</target>
        </trans-unit>
        <trans-unit id="cb9c675c988d965998ae45b5d73c7f5308bc24f7" translate="yes" xml:space="preserve">
          <source>MessageVerifier#verify</source>
          <target state="translated">MessageVerifier#verify</target>
        </trans-unit>
        <trans-unit id="faade315455c305d9bb171bc107ea83f06e6fa63" translate="yes" xml:space="preserve">
          <source>MessageVerifier::new</source>
          <target state="translated">MessageVerifier::new</target>
        </trans-unit>
        <trans-unit id="90acb406947db8913ac9b53b7532764ff4fcc59e" translate="yes" xml:space="preserve">
          <source>Metal</source>
          <target state="translated">Metal</target>
        </trans-unit>
        <trans-unit id="38196d8520f1d9e342a790c7baee91ba05b7857a" translate="yes" xml:space="preserve">
          <source>Metal#controller_name</source>
          <target state="translated">Metal#controller_name</target>
        </trans-unit>
        <trans-unit id="edb271c6ba74584a5e95fc8a592017e04d034cfe" translate="yes" xml:space="preserve">
          <source>Metal#params</source>
          <target state="translated">Metal#params</target>
        </trans-unit>
        <trans-unit id="e25845eba96b1c6cec462f426fe2054f763d5f7e" translate="yes" xml:space="preserve">
          <source>Metal#params=</source>
          <target state="translated">Metal#params=</target>
        </trans-unit>
        <trans-unit id="ae198879fd9a7f794c7ff37117ecdd787966071f" translate="yes" xml:space="preserve">
          <source>Metal#performed?</source>
          <target state="translated">Metal#performed?</target>
        </trans-unit>
        <trans-unit id="645752c91da4af331d632112e2ff95adf8ceb3d4" translate="yes" xml:space="preserve">
          <source>Metal#reset_session</source>
          <target state="translated">Metal#reset_session</target>
        </trans-unit>
        <trans-unit id="0c1d3d5f890bdd4021fc1683c03282ae40e4b4db" translate="yes" xml:space="preserve">
          <source>Metal#response_body=</source>
          <target state="translated">Metal#response_body=</target>
        </trans-unit>
        <trans-unit id="2592810200ac0ea7cdb516839b5733b45cd7157a" translate="yes" xml:space="preserve">
          <source>Metal#url_for</source>
          <target state="translated">Metal#url_for</target>
        </trans-unit>
        <trans-unit id="5d5a5e7489ce45c5bc7bbfce6515f09fc97fbd9c" translate="yes" xml:space="preserve">
          <source>Metal::action</source>
          <target state="translated">Metal::action</target>
        </trans-unit>
        <trans-unit id="e2a4b21df305be1783c72a1f50c97c1f1d4985a7" translate="yes" xml:space="preserve">
          <source>Metal::controller_name</source>
          <target state="translated">Metal::controller_name</target>
        </trans-unit>
        <trans-unit id="ce79f003cf7ea40ba89e57e2a796360ffd946624" translate="yes" xml:space="preserve">
          <source>Metal::dispatch</source>
          <target state="translated">Metal::dispatch</target>
        </trans-unit>
        <trans-unit id="182ff2b0bc20e306864bb84402eee07193eb45a1" translate="yes" xml:space="preserve">
          <source>Metal::make_response!</source>
          <target state="translated">Metal::make_response!</target>
        </trans-unit>
        <trans-unit id="d382f96858a788760f261e666e4f85ff97426a6b" translate="yes" xml:space="preserve">
          <source>Metal::middleware</source>
          <target state="translated">Metal::middleware</target>
        </trans-unit>
        <trans-unit id="3ed079e8835c2f9c9c9047fad46dd8ccfe5f55f6" translate="yes" xml:space="preserve">
          <source>Metal::new</source>
          <target state="translated">Metal::new</target>
        </trans-unit>
        <trans-unit id="2f72e572e61260367af8b52a4e688488474b8e83" translate="yes" xml:space="preserve">
          <source>Metal::use</source>
          <target state="translated">Metal::use</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="f2a980d54dbcb57ac4454a805bc48519eb1f3e32" translate="yes" xml:space="preserve">
          <source>Method Delegation</source>
          <target state="translated">메소드 위임</target>
        </trans-unit>
        <trans-unit id="dcddcbb57206eaf4559c31c460763d2d6db31a20" translate="yes" xml:space="preserve">
          <source>Methods and Actions</source>
          <target state="translated">방법과 행동</target>
        </trans-unit>
        <trans-unit id="666268e79826afdec3fff0264016e94ef5b766ab" translate="yes" xml:space="preserve">
          <source>Methods are not duplicable:</source>
          <target state="translated">메소드는 복제 할 수 없습니다 :</target>
        </trans-unit>
        <trans-unit id="481f07082abcea98f240ee7383772b4988e84273" translate="yes" xml:space="preserve">
          <source>Methods can be delegated to instance variables, class variables, or constants by providing them as a symbols:</source>
          <target state="translated">메소드를 심볼로 제공하여 인스턴스 변수, 클래스 변수 또는 상수에 메소드를 위임 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3419a2570908db81b298d7c6d51f10df0e243219" translate="yes" xml:space="preserve">
          <source>Methods defined in Active Record fixtures</source>
          <target state="translated">활성 레코드 픽스처에 정의 된 메소드</target>
        </trans-unit>
        <trans-unit id="8e227abc813f4dbe34a05c0e54629b2a9e2fc5be" translate="yes" xml:space="preserve">
          <source>Methods for sending arbitrary data and for streaming files to the browser, instead of rendering.</source>
          <target state="translated">렌더링 대신 임의의 데이터를 전송하고 브라우저로 파일을 스트리밍하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="d3ae077b906176fdf43ee4e5fa066f1c0a49b9ee" translate="yes" xml:space="preserve">
          <source>Methods must return a &lt;code&gt;Mail::Message&lt;/code&gt; object which can be generated by calling the mailer method without the additional &lt;code&gt;deliver_now&lt;/code&gt; / &lt;code&gt;deliver_later&lt;/code&gt;. The location of the mailer previews directory can be configured using the &lt;code&gt;preview_path&lt;/code&gt; option which has a default of &lt;code&gt;test/mailers/previews&lt;/code&gt;:</source>
          <target state="translated">메소드는 추가 &lt;code&gt;deliver_now&lt;/code&gt; / &lt;code&gt;deliver_later&lt;/code&gt; 없이 mailer 메소드를 호출하여 생성 할 수 있는 &lt;code&gt;Mail::Message&lt;/code&gt; 오브젝트를 리턴해야합니다 . mailer previews 디렉토리의 위치는 기본 &lt;code&gt;test/mailers/previews&lt;/code&gt; 가있는 &lt;code&gt;preview_path&lt;/code&gt; 옵션을 사용하여 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a445a0c958f699e2d42015e88db5478fad019eca" translate="yes" xml:space="preserve">
          <source>Methods provided by Thor are not covered this guide and can be found in &lt;a href=&quot;http://rdoc.info/github/erikhuda/thor/master/Thor/Actions.html&quot;&gt;Thor's documentation&lt;/a&gt;</source>
          <target state="translated">Thor가 제공하는 방법은이 안내서에서 다루지 않으며 &lt;a href=&quot;http://rdoc.info/github/erikhuda/thor/master/Thor/Actions.html&quot;&gt;Thor의 설명서&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f15421ed37c95e18016fedbb48a699c3f1868102" translate="yes" xml:space="preserve">
          <source>Methods provided by Thor are not covered this guide and can be found in &lt;a href=&quot;https://rdoc.info/github/erikhuda/thor/master/Thor/Actions.html&quot;&gt;Thor's documentation&lt;/a&gt;</source>
          <target state="translated">Thor에서 제공하는 방법은이 가이드에서 다루지 않으며 &lt;a href=&quot;https://rdoc.info/github/erikhuda/thor/master/Thor/Actions.html&quot;&gt;Thor의 문서&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="337d33d863058e0d37f9eac0f10f65d2f777c208" translate="yes" xml:space="preserve">
          <source>Methods that operate on collections are also aware of the hierarchy. For example, &lt;code&gt;Polygon.all&lt;/code&gt; returns all the records of the table, because all rectangles and triangles are polygons. Active Record takes care of returning instances of their corresponding class in the result set.</source>
          <target state="translated">컬렉션에서 작동하는 메서드도 계층 구조를 인식합니다. 예를 들어 &lt;code&gt;Polygon.all&lt;/code&gt; 은 모든 사각형과 삼각형이 다각형이므로 테이블의 모든 레코드를 반환합니다. Active Record는 결과 집합에서 해당 클래스의 인스턴스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="67cf221c8b87e3529b8c224fef7556811903e14a" translate="yes" xml:space="preserve">
          <source>Methods to create form controls are called &lt;strong&gt;on&lt;/strong&gt; the form builder object &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">양식 컨트롤을 만드는 방법 은 양식 작성기 객체 &lt;code&gt;f&lt;/code&gt; &lt;strong&gt;에서&lt;/strong&gt; 호출 &lt;strong&gt;됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="5de9d6fe8584b29709979d39884dc53d6c96e3a5" translate="yes" xml:space="preserve">
          <source>Methods will be added for retrieval and query for a single associated object, for which this object holds an id:</source>
          <target state="translated">이 객체가 ID를 보유하는 하나의 연관된 객체를 검색하고 쿼리하기위한 메소드가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="5eb00c057aeacb4083ac81ba9b645b27dc753532" translate="yes" xml:space="preserve">
          <source>Microsoft Azure Storage Service</source>
          <target state="translated">Microsoft Azure 저장소 서비스</target>
        </trans-unit>
        <trans-unit id="b7507320067b372700f147199bfa6970bc4f77db" translate="yes" xml:space="preserve">
          <source>Middleware class can be inserted as a Rack handler to be local cache for the duration of request.</source>
          <target state="translated">미들웨어 클래스는 요청 기간 동안 로컬 캐시가되도록 랙 핸들러로 삽입 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf3312ce9eeb6125a88289fa4cc849222be8b06d" translate="yes" xml:space="preserve">
          <source>Middleware stack</source>
          <target state="translated">미들웨어 스택</target>
        </trans-unit>
        <trans-unit id="9d38520e4d12785ebcf01316593660ab8608f5f2" translate="yes" xml:space="preserve">
          <source>Middleware that determines which database connection to use in a multiple database application.</source>
          <target state="translated">다중 데이터베이스 애플리케이션에서 사용할 데이터베이스 연결을 결정하는 미들웨어.</target>
        </trans-unit>
        <trans-unit id="563b6e9338739fba0218b72d657c3e48b84a5b78" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector</source>
          <target state="translated">Middleware::DatabaseSelector</target>
        </trans-unit>
        <trans-unit id="8f269630c3fc0cbd7d46cc52b6ce2aee1bcbefa6" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#call</source>
          <target state="translated">Middleware::DatabaseSelector#call</target>
        </trans-unit>
        <trans-unit id="1ba8c8c9800962e37f6e1230fd89f8279c0728a5" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#context_klass</source>
          <target state="translated">Middleware::DatabaseSelector#context_klass</target>
        </trans-unit>
        <trans-unit id="01598e7d668159cced3b5d431bd75f29396ede41" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#options</source>
          <target state="translated">Middleware::DatabaseSelector#options</target>
        </trans-unit>
        <trans-unit id="155690df2c425380b1967de734857d9dbea0bb2b" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#resolver_klass</source>
          <target state="translated">Middleware::DatabaseSelector#resolver_klass</target>
        </trans-unit>
        <trans-unit id="0336e69fa320a456f7b839c7f9ef95e94d2ba03a" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector::new</source>
          <target state="translated">Middleware::DatabaseSelector::new</target>
        </trans-unit>
        <trans-unit id="33b6b00c01da2bce5880337e4154f952b0cf5e1a" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy</target>
        </trans-unit>
        <trans-unit id="ce6014a5f10c8a7e1157c5ffac9afecce96ff840" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy#call</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy#call</target>
        </trans-unit>
        <trans-unit id="5f8a75a366d8e0cf285b8df25b529ff4733f3dcd" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy::new</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy::new</target>
        </trans-unit>
        <trans-unit id="27e0622c20c96144720c72ae273895e1f0116ee8" translate="yes" xml:space="preserve">
          <source>Middlewares</source>
          <target state="translated">Middlewares</target>
        </trans-unit>
        <trans-unit id="c36c34173f49fa742f965209eed50d88aaff346c" translate="yes" xml:space="preserve">
          <source>Middlewares are loaded once and are not monitored for changes. You will have to restart the server for changes to be reflected in the running application.</source>
          <target state="translated">미들웨어는 한 번로드되며 변경 사항을 모니터링하지 않습니다. 변경 사항을 실행중인 응용 프로그램에 반영하려면 서버를 다시 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="282f075c796a3d6b9e95474b434c7581a2396fb7" translate="yes" xml:space="preserve">
          <source>Middlewares can also be completely swapped out and replaced with others:</source>
          <target state="translated">미들웨어도 완전히 교체하고 다른 것으로 교체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1b3f91ec2dcd0a57731ecd63b35db51810a232c" translate="yes" xml:space="preserve">
          <source>Middlewares can be moved from one place to another:</source>
          <target state="translated">미들웨어는 한 위치에서 다른 위치로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77bcdd2131896dea63742df165ba47d28766a503" translate="yes" xml:space="preserve">
          <source>Middlewares that need to manipulate the body won't work with streaming. You should disable those middlewares whenever streaming in development or production. For instance, &lt;code&gt;Rack::Bug&lt;/code&gt; won't work when streaming as it needs to inject contents in the HTML body.</source>
          <target state="translated">본문을 조작해야하는 미들웨어는 스트리밍에서 작동하지 않습니다. 개발 또는 프로덕션에서 스트리밍 할 때마다 이러한 미들웨어를 비활성화해야합니다. 예를 들어 HTML : 본문에 내용을 주입해야하므로 스트리밍 할 때 &lt;code&gt;Rack::Bug&lt;/code&gt; 가 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0628fa131fd3749ca6f8ae87cbb36a3fdf7a395" translate="yes" xml:space="preserve">
          <source>Might want a shorter timeout depending on whether the request is a PATCH, PUT, or POST, and if the client is a browser or web service. Can be much shorter if the Stale directive is implemented. This would allow a user to use new nonce without prompting the user again for their username and password.</source>
          <target state="translated">요청이 PATCH, PUT 또는 POST인지 클라이언트가 브라우저 또는 웹 서비스인지에 따라 더 짧은 시간 초과를 원할 수 있습니다. Stale 지시문이 구현되면 훨씬 짧을 수 있습니다. 이를 통해 사용자는 사용자 이름과 비밀번호를 다시 묻지 않고 새로운 nonce를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de063e32dc06a43a0af8ea312ac86d212f940f81" translate="yes" xml:space="preserve">
          <source>Migrate away from MultiJSON by using &lt;code&gt;obj.to_json&lt;/code&gt;, and &lt;code&gt;JSON.parse(str)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;obj.to_json&lt;/code&gt; 및 &lt;code&gt;JSON.parse(str)&lt;/code&gt; 대신 사용하여 MultiJSON 에서 마이그레이션하십시오 .</target>
        </trans-unit>
        <trans-unit id="849cf5dbd007a2e8d456dd72aa453236b2c87bd3" translate="yes" xml:space="preserve">
          <source>Migration Overview</source>
          <target state="translated">마이그레이션 개요</target>
        </trans-unit>
        <trans-unit id="c10689ae3fc90ca5bd5d3afa879fe03daf018267" translate="yes" xml:space="preserve">
          <source>Migration to create the comments table in your database (your name will include a different timestamp)</source>
          <target state="translated">데이터베이스에 주석 테이블을 작성하기위한 마이그레이션 (이름에 다른 시간 소인이 포함됨)</target>
        </trans-unit>
        <trans-unit id="df5bd8ca322d93957c7101e41c22684019c85ff5" translate="yes" xml:space="preserve">
          <source>MigrationProxy</source>
          <target state="translated">MigrationProxy</target>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="92fa499d9dbdc22d3d47a8967f65d9b91f5e16f5" translate="yes" xml:space="preserve">
          <source>Migrations &amp;amp; seed data</source>
          <target state="translated">마이그레이션 및 시드 데이터</target>
        </trans-unit>
        <trans-unit id="add41b9c7d182bf31f14e478e595fffc9cc6dbbf" translate="yes" xml:space="preserve">
          <source>Migrations and Seed Data</source>
          <target state="translated">마이그레이션 및 시드 데이터</target>
        </trans-unit>
        <trans-unit id="57a43495bb4f9921561af4c2e6643f541818d776" translate="yes" xml:space="preserve">
          <source>Migrations are a convenient way to &lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;alter your database schema over time&lt;/a&gt; in a consistent and easy way. They use a Ruby DSL so that you don't have to write SQL by hand, allowing your schema and changes to be database independent.</source>
          <target state="translated">마이그레이션은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;시간이 지남&lt;/a&gt; 에 따라 일관되고 쉬운 방식으로 데이터베이스 스키마 를 변경 하는 편리한 방법입니다. Ruby DSL을 사용하므로 SQL을 직접 작성하지 않아도되므로 스키마와 변경 사항을 데이터베이스와 독립적으로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2b2ceaa5197ee347285fe8f3ebfd8a7b2e99d02" translate="yes" xml:space="preserve">
          <source>Migrations are a convenient way to &lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;alter your database schema over time&lt;/a&gt; in a consistent way. They use a Ruby DSL so that you don't have to write SQL by hand, allowing your schema and changes to be database independent.</source>
          <target state="translated">마이그레이션은 일관된 방식으로 &lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;시간이 지남&lt;/a&gt; 에 따라 데이터베이스 스키마 를 변경 하는 편리한 방법입니다. Ruby DSL을 사용하므로 SQL을 직접 작성할 필요가 없으므로 스키마와 변경 사항이 데이터베이스에 독립적입니다.</target>
        </trans-unit>
        <trans-unit id="a39b244ebfff3bd0603a4c48828ce03aab566d33" translate="yes" xml:space="preserve">
          <source>Migrations are a feature of Active Record that allows you to evolve your database schema over time. Rather than write schema modifications in pure SQL, migrations allow you to use a Ruby DSL to describe changes to your tables.</source>
          <target state="translated">마이그레이션은 시간이 지남에 따라 데이터베이스 스키마를 발전시킬 수있는 Active Record의 기능입니다. 순수한 SQL로 스키마 수정을 작성하는 대신 마이그레이션을 통해 Ruby DSL을 사용하여 테이블 변경 사항을 설명 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35eb283061f63c9f2d9c8759c68d4c4790d997dd" translate="yes" xml:space="preserve">
          <source>Migrations are a feature of Active Record that allows you to evolve your database schema over time. Rather than write schema modifications in pure SQL, migrations allow you to use an easy Ruby DSL to describe changes to your tables.</source>
          <target state="translated">마이그레이션은 시간이 지남에 따라 데이터베이스 스키마를 발전시킬 수있는 Active Record의 기능입니다. 마이그레이션을 통해 순수 SQL로 스키마 수정을 작성하는 대신 쉬운 Ruby DSL을 사용하여 테이블의 변경 사항을 설명 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae5636cafa88975771a82a06eb973872d54fc377" translate="yes" xml:space="preserve">
          <source>Migrations are currently supported in MySQL, PostgreSQL, SQLite, SQL Server, and Oracle (all supported databases except DB2).</source>
          <target state="translated">마이그레이션은 현재 MySQL, PostgreSQL, SQLite, SQL Server 및 Oracle (DB2를 제외한 모든 지원되는 데이터베이스)에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="dd0a5b8c9fe431987a19d0d866524897437e203c" translate="yes" xml:space="preserve">
          <source>Migrations are stored as files in the &lt;code&gt;db/migrate&lt;/code&gt; directory, one for each migration class. The name of the file is of the form &lt;code&gt;YYYYMMDDHHMMSS_create_products.rb&lt;/code&gt;, that is to say a UTC timestamp identifying the migration followed by an underscore followed by the name of the migration. The name of the migration class (CamelCased version) should match the latter part of the file name. For example &lt;code&gt;20080906120000_create_products.rb&lt;/code&gt; should define class &lt;code&gt;CreateProducts&lt;/code&gt; and &lt;code&gt;20080906120001_add_details_to_products.rb&lt;/code&gt; should define &lt;code&gt;AddDetailsToProducts&lt;/code&gt;. Rails uses this timestamp to determine which migration should be run and in what order, so if you're copying a migration from another application or generate a file yourself, be aware of its position in the order.</source>
          <target state="translated">마이그레이션은 각 마이그레이션 클래스마다 하나씩 &lt;code&gt;db/migrate&lt;/code&gt; 디렉토리에 파일로 저장됩니다 . 파일 이름은 &lt;code&gt;YYYYMMDDHHMMSS_create_products.rb&lt;/code&gt; 형식입니다 . 즉, 마이그레이션을 식별하는 UTC 타임 스탬프와 밑줄, 마이그레이션 이름이 있습니다. 마이그레이션 클래스의 이름 (CamelCased 버전)은 파일 이름의 후반 부분과 일치해야합니다. 예를 들어 &lt;code&gt;20080906120000_create_products.rb&lt;/code&gt; 는 &lt;code&gt;CreateProducts&lt;/code&gt; 클래스를 정의 하고 &lt;code&gt;20080906120001_add_details_to_products.rb&lt;/code&gt; 는 AddDetailsToProducts 를 정의해야합니다 &lt;code&gt;AddDetailsToProducts&lt;/code&gt; . Rails는이 타임 스탬프를 사용하여 어떤 마이그레이션을 어떤 순서로 실행해야하는지 결정하므로 다른 응용 프로그램에서 마이그레이션을 복사하거나 파일을 직접 생성하는 경우 순서대로 위치를 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="d26d12943d7d80825abca46a5dc3235ea3ec50a2" translate="yes" xml:space="preserve">
          <source>Migrations can manage the evolution of a schema used by several physical databases. It's a solution to the common problem of adding a field to make a new feature work in your local database, but being unsure of how to push that change to other developers and to the production server. With migrations, you can describe the transformations in self-contained classes that can be checked into version control systems and executed against another database that might be one, two, or five versions behind.</source>
          <target state="translated">마이그레이션은 여러 실제 데이터베이스에서 사용하는 스키마의 발전을 관리 할 수 ​​있습니다. 로컬 데이터베이스에서 새 기능을 작동시키기 위해 필드를 추가하는 일반적인 문제에 대한 솔루션이지만 해당 변경 사항을 다른 개발자와 프로덕션 서버에 적용하는 방법을 모릅니다. 마이그레이션을 사용하면 버전 제어 시스템으로 체크인하고 1, 2 또는 5 버전 뒤의 다른 데이터베이스에 대해 실행할 수있는 자체 포함 클래스의 변환을 설명 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f94ebd9500c999984b8945609bc2df7a540d229d" translate="yes" xml:space="preserve">
          <source>Migrations for multiple databases should live in their own folders prefixed with the name of the database key in the configuration.</source>
          <target state="translated">여러 데이터베이스에 대한 마이그레이션은 구성에서 데이터베이스 키 이름이 접두어가있는 자체 폴더에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="86a3425e7c377c2db63091c03252f49164c0a2bc" translate="yes" xml:space="preserve">
          <source>Migrations, mighty as they may be, are not the authoritative source for your database schema. Your database remains the authoritative source. By default, Rails generates &lt;code&gt;db/schema.rb&lt;/code&gt; which attempts to capture the current state of your database schema.</source>
          <target state="translated">강력한 마이그레이션은 데이터베이스 스키마의 신뢰할 수있는 소스가 아닙니다. 데이터베이스는 신뢰할 수있는 소스로 남아 있습니다. 기본적으로 Rails는 데이터베이스 스키마의 현재 상태를 캡처하려고 시도 하는 &lt;code&gt;db/schema.rb&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="1e3979049ac0db93535e487d19b907375014fe97" translate="yes" xml:space="preserve">
          <source>Mime</source>
          <target state="translated">Mime</target>
        </trans-unit>
        <trans-unit id="837a9cd6761dcbf9f4cc0d2283bc69ff6d49162f" translate="yes" xml:space="preserve">
          <source>Mime::Type</source>
          <target state="translated">Mime::Type</target>
        </trans-unit>
        <trans-unit id="3d541a2228a89762108026001dee109145d47890" translate="yes" xml:space="preserve">
          <source>Mime::[]</source>
          <target state="translated">Mime::[]</target>
        </trans-unit>
        <trans-unit id="0926e3a2597b119bebc1a1fce3d223f29ed8f149" translate="yes" xml:space="preserve">
          <source>Mime::fetch</source>
          <target state="translated">Mime::fetch</target>
        </trans-unit>
        <trans-unit id="050981c2f1d2b6a48d219c1eccf7c86033e0e849" translate="yes" xml:space="preserve">
          <source>MimeResponds</source>
          <target state="translated">MimeResponds</target>
        </trans-unit>
        <trans-unit id="8b545c051d507c480dba95bf413fce8705988b77" translate="yes" xml:space="preserve">
          <source>MimeResponds#respond_to</source>
          <target state="translated">MimeResponds#respond_to</target>
        </trans-unit>
        <trans-unit id="6f5a075fbf5fd5c483250378da86ae9b313d0b5e" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector</source>
          <target state="translated">MimeResponds::Collector</target>
        </trans-unit>
        <trans-unit id="dd15e78a286dc1fcb96a6d760a8accbea04d2f46" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#all</source>
          <target state="translated">MimeResponds::Collector#all</target>
        </trans-unit>
        <trans-unit id="3186ed947655e8e13c11d197e22b057a3b826b5a" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#any</source>
          <target state="translated">MimeResponds::Collector#any</target>
        </trans-unit>
        <trans-unit id="077fae0e3039a4b3ba6f06a7b2493faf6bc94149" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#custom</source>
          <target state="translated">MimeResponds::Collector#custom</target>
        </trans-unit>
        <trans-unit id="0a408c565a901345e13710dce8b46ddc83596604" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#format</source>
          <target state="translated">MimeResponds::Collector#format</target>
        </trans-unit>
        <trans-unit id="d7d7238b3edbaa05ba30c1b8de1d6eae8196c62e" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#negotiate_format</source>
          <target state="translated">MimeResponds::Collector#negotiate_format</target>
        </trans-unit>
        <trans-unit id="a43f44c574ab0f660ef86ec6284e21f6a15123a3" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#response</source>
          <target state="translated">MimeResponds::Collector#response</target>
        </trans-unit>
        <trans-unit id="c94b172f9c46140e4befb5a3b40843c333dc1bd0" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector::new</source>
          <target state="translated">MimeResponds::Collector::new</target>
        </trans-unit>
        <trans-unit id="5d398eef3ecc3ea6a161734581d0bd3d920b64d8" translate="yes" xml:space="preserve">
          <source>Minimum</source>
          <target state="translated">Minimum</target>
        </trans-unit>
        <trans-unit id="16596f8408b40402e03fb1fa1fea448e6247038b" translate="yes" xml:space="preserve">
          <source>Minitest::Test</source>
          <target state="translated">Minitest::Test</target>
        </trans-unit>
        <trans-unit id="74043cd8393b54dc6043472a59ad52bfb062b30d" translate="yes" xml:space="preserve">
          <source>Mirror Service</source>
          <target state="translated">거울 서비스</target>
        </trans-unit>
        <trans-unit id="39a204e4c038fabc71fb5297195e22adca4656b2" translate="yes" xml:space="preserve">
          <source>Mirror services are compatible with direct uploads. New files are directly uploaded to the primary service. When a directly-uploaded file is attached to a record, a background job is enqueued to copy it to the secondary services.</source>
          <target state="translated">미러 서비스는 직접 업로드와 호환됩니다. 새 파일은 기본 서비스에 직접 업로드됩니다. 직접 업로드 된 파일이 레코드에 첨부되면 백그라운드 작업이 대기열에 추가되어 보조 서비스로 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="2ebe5e5d265df06404092bd36060d02d7d449026" translate="yes" xml:space="preserve">
          <source>Mirroring is not atomic. It is possible for an upload to succeed on the primary service and fail on any of the subordinate services. Before going all-in on a new service, verify that all files have been copied.</source>
          <target state="translated">미러링은 원자 적이 지 않습니다. 업로드가 기본 서비스에서 성공하고 모든 하위 서비스에서 실패 할 수 있습니다. 새 서비스에 올인하기 전에 모든 파일이 복사되었는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="432aa1daa28e69ab50b92351f6f2af0a95b10677" translate="yes" xml:space="preserve">
          <source>MismatchedForeignKey</source>
          <target state="translated">MismatchedForeignKey</target>
        </trans-unit>
        <trans-unit id="df53296b1d6061c27762beb02feb56a79d980fe5" translate="yes" xml:space="preserve">
          <source>MismatchedForeignKey::new</source>
          <target state="translated">MismatchedForeignKey::new</target>
        </trans-unit>
        <trans-unit id="c9027d21a516adb82b35423ae731d466f68685dd" translate="yes" xml:space="preserve">
          <source>Missing routes keys may be filled in from the current request's parameters (e.g. &lt;code&gt;:controller&lt;/code&gt;, &lt;code&gt;:action&lt;/code&gt;, &lt;code&gt;:id&lt;/code&gt; and any other parameters that are placed in the path). Given that the current action has been reached through &lt;code&gt;GET
/users/1&lt;/code&gt;:</source>
          <target state="translated">누락 된 라우트 키는 현재 요청의 매개 변수 (예 &lt;code&gt;:controller&lt;/code&gt; , &lt;code&gt;:action&lt;/code&gt; , &lt;code&gt;:id&lt;/code&gt; 및 경로에 배치 된 기타 매개 변수) 로 채워질 수 있습니다 . &lt;code&gt;GET /users/1&lt;/code&gt; 통해 현재 조치에 도달 한 경우 :</target>
        </trans-unit>
        <trans-unit id="41937a7bc85765db9aca03191382c7b168e9b5f0" translate="yes" xml:space="preserve">
          <source>Mix this module into your controller, and all actions in that controller will be able to stream data to the client as it's written.</source>
          <target state="translated">이 모듈을 컨트롤러에 믹싱하면 해당 컨트롤러의 모든 작업이 클라이언트가 데이터를 쓸 때 데이터를 스트리밍 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="605c579c268184680eec501755fbbe56698c9acc" translate="yes" xml:space="preserve">
          <source>Mix-in noise exiled to its own file:</source>
          <target state="translated">자체 파일로 추출 된 믹스 인 노이즈 :</target>
        </trans-unit>
        <trans-unit id="8d259b78f39d0db65eeb3909e9dfd3052b08bc7c" translate="yes" xml:space="preserve">
          <source>Mixing in this module allows you to define the events in the object's life cycle that will support callbacks (via &lt;code&gt;ClassMethods.define_callbacks&lt;/code&gt;), set the instance methods, procs, or callback objects to be called (via &lt;code&gt;ClassMethods.set_callback&lt;/code&gt;), and run the installed callbacks at the appropriate times (via &lt;code&gt;run_callbacks&lt;/code&gt;).</source>
          <target state="translated">이 모듈을 혼합하면 콜백을 지원하는 ( &lt;code&gt;ClassMethods.define_callbacks&lt;/code&gt; 를 통해 ) 객체의 수명주기에서 이벤트를 정의하고 , 인스턴스 메소드, proc 또는 콜백 객체를 호출하도록 ( &lt;code&gt;ClassMethods.set_callback&lt;/code&gt; 을 통해 ) 설정하고 설치된 것을 실행할 수 있습니다. 적절한 시간에 콜백 ( &lt;code&gt;run_callbacks&lt;/code&gt; 통해 ).</target>
        </trans-unit>
        <trans-unit id="6bf1644fb9edca063e6ffc86e4f90c94f369309b" translate="yes" xml:space="preserve">
          <source>Mixing with other form helpers</source>
          <target state="translated">다른 폼 헬퍼와 혼합</target>
        </trans-unit>
        <trans-unit id="3d28be03faf876ad49209848ad7be7b220d78b7e" translate="yes" xml:space="preserve">
          <source>Mobile Safari looks for a different link tag, pointing to an image that will be used if you add the page to the home screen of an iOS device. The following call would generate such a tag:</source>
          <target state="translated">Mobile Safari는 다른 링크 태그를 찾아 페이지를 iOS 장치의 홈 화면에 추가 할 때 사용되는 이미지를 가리 킵니다. 다음 호출은 그러한 태그를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="995901a6d05be888b514f03ce152df52987cf9d7" translate="yes" xml:space="preserve">
          <source>Model / Class</source>
          <target state="translated">모델 / 클래스</target>
        </trans-unit>
        <trans-unit id="506e58da3784558b9ced4bdec6bcfcf767fb21fa" translate="yes" xml:space="preserve">
          <source>Model Class - Singular with the first letter of each word capitalized (e.g., &lt;code&gt;BookClub&lt;/code&gt;).</source>
          <target state="translated">모델 클래스-대문자로 된 각 단어의 첫 글자와 함께 특이 형입니다 (예 : &lt;code&gt;BookClub&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="12bcd30f814db80cb1f7e7a2796b829953df4af8" translate="yes" xml:space="preserve">
          <source>Model Generators</source>
          <target state="translated">모델 생성기</target>
        </trans-unit>
        <trans-unit id="33ac27d1e8badd8f928fc67c97f045d911339e91" translate="yes" xml:space="preserve">
          <source>Model Object Helpers</source>
          <target state="translated">모델 객체 헬퍼</target>
        </trans-unit>
        <trans-unit id="d52c41ee4ca421219a75e5a69582d944082143e0" translate="yes" xml:space="preserve">
          <source>Model Testing</source>
          <target state="translated">모델 테스팅</target>
        </trans-unit>
        <trans-unit id="e4bef5d3c94fa7c5c5847e00ba0a25e7f37a2e73" translate="yes" xml:space="preserve">
          <source>Model attributes have a reader, a writer, and a predicate. You can alias a model attribute having the corresponding three methods all defined for you by using &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-alias_attribute&quot;&gt;&lt;code&gt;alias_attribute&lt;/code&gt;&lt;/a&gt;. As in other aliasing methods, the new name is the first argument, and the old name is the second (one mnemonic is that they go in the same order as if you did an assignment):</source>
          <target state="translated">모델 속성에는 판독기, 작성기 및 술부가 있습니다. &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-alias_attribute&quot;&gt; &lt;code&gt;alias_attribute&lt;/code&gt; &lt;/a&gt; 를 사용하여 해당하는 세 가지 메서드가 모두 정의 된 모델 속성의 별칭을 지정할 수 있습니다 . 다른 앨리어싱 방법과 마찬가지로 새 이름은 첫 번째 인수이고 이전 이름은 두 번째입니다 (하나의 니모닉은 할당을 수행 한 것과 같은 순서로 진행된다는 것입니다).</target>
        </trans-unit>
        <trans-unit id="4ec9ebd42f054a98c3da4bc4a0a86ee8eda11c19" translate="yes" xml:space="preserve">
          <source>Model attributes have a reader, a writer, and a predicate. You can alias a model attribute having the corresponding three methods defined for you in one shot. As in other aliasing methods, the new name is the first argument, and the old name is the second (one mnemonic is that they go in the same order as if you did an assignment):</source>
          <target state="translated">모델 속성에는 판독기, 작성기 및 조건자가 있습니다. 한 번에 3 가지 방법으로 정의 된 모델 속성의 별명을 지정할 수 있습니다. 다른 앨리어싱 방법에서와 같이 새 이름은 첫 번째 인수이고 이전 이름은 두 번째입니다 (하나의 니모닉은 할당을 수행 한 것과 동일한 순서로 진행됨).</target>
        </trans-unit>
        <trans-unit id="fcd2e36ad78fb7f71108bd32655d54cc7792e2c6" translate="yes" xml:space="preserve">
          <source>Model names are &lt;strong&gt;singular&lt;/strong&gt;, because an instantiated model represents a single data record. To help remember this convention, think of how you would call the model's constructor: we want to write &lt;code&gt;Article.new(...)&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;Articles.new(...)&lt;/code&gt;.</source>
          <target state="translated">인스턴스화 된 모델은 단일 데이터 레코드를 나타내므로 모델 이름은 &lt;strong&gt;단수&lt;/strong&gt; 입니다. 도움이 규칙을 기억, 당신은 모델의 생성자를 호출 할 방법을 생각 : 우리가 쓰고 싶은 &lt;code&gt;Article.new(...)&lt;/code&gt; , &lt;strong&gt;하지 &lt;/strong&gt; &lt;code&gt;Articles.new(...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55122a12c64767a82f2b9a00f00e2eb10873a428" translate="yes" xml:space="preserve">
          <source>Model tests are used to test the various models of your application.</source>
          <target state="translated">모델 테스트는 응용 프로그램의 다양한 모델을 테스트하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2b6825ada8068d617c4713f563e77b48935cfc12" translate="yes" xml:space="preserve">
          <source>Model tests don't have their own superclass like &lt;code&gt;ActionMailer::TestCase&lt;/code&gt; instead they inherit from &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt;&lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모델 테스트에는 &lt;code&gt;ActionMailer::TestCase&lt;/code&gt; 와 같은 자체 슈퍼 클래스가 없지만 대신 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt; &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt; &lt;/a&gt; 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="dbe801f24d91b32cbbccf08eb1a5ecb957775630" translate="yes" xml:space="preserve">
          <source>Model tests don't have their own superclass like &lt;code&gt;ActionMailer::TestCase&lt;/code&gt;. Instead, they inherit from &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt;&lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모델 테스트에는 &lt;code&gt;ActionMailer::TestCase&lt;/code&gt; 와 같은 자체 수퍼 클래스가 없습니다 . 대신 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt; &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt; &lt;/a&gt; 에서 상속 합니다.</target>
        </trans-unit>
        <trans-unit id="2f48817ab34d92bde58ab86f2f428072514122ae" translate="yes" xml:space="preserve">
          <source>Model#persisted?</source>
          <target state="translated">Model#persisted?</target>
        </trans-unit>
        <trans-unit id="4e64f33abdbac5e5ff3f2e0c7fa34b64c6f354dd" translate="yes" xml:space="preserve">
          <source>Model::new</source>
          <target state="translated">Model::new</target>
        </trans-unit>
        <trans-unit id="a5db1f719d035d2f86dd53bc73b31dd5d8068fa4" translate="yes" xml:space="preserve">
          <source>ModelSchema</source>
          <target state="translated">ModelSchema</target>
        </trans-unit>
        <trans-unit id="d441ba5c7e24f4a6db2f90c5e92148cb34f38781" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods</source>
          <target state="translated">ModelSchema::ClassMethods</target>
        </trans-unit>
        <trans-unit id="f0c7506bc80fe2b9aa98f1bff85e0301e077fb1c" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#column_defaults</source>
          <target state="translated">ModelSchema::ClassMethods#column_defaults</target>
        </trans-unit>
        <trans-unit id="e4b875e3ee3c2296967f7855c30256163a85c06b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#column_names</source>
          <target state="translated">ModelSchema::ClassMethods#column_names</target>
        </trans-unit>
        <trans-unit id="00b3898ec2cd08cbe44ab0fc9d248fb3e907a774" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#columns</source>
          <target state="translated">ModelSchema::ClassMethods#columns</target>
        </trans-unit>
        <trans-unit id="8a528d813dbaef3873723d8e3064d1398a98f18b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#content_columns</source>
          <target state="translated">ModelSchema::ClassMethods#content_columns</target>
        </trans-unit>
        <trans-unit id="30ca4105a6f05ea7297f11d83896095972184c21" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#ignored_columns</source>
          <target state="translated">ModelSchema::ClassMethods#ignored_columns</target>
        </trans-unit>
        <trans-unit id="1226cd6aa58cebf7a5e070fb6137578c208b0802" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#ignored_columns=</source>
          <target state="translated">ModelSchema::ClassMethods#ignored_columns=</target>
        </trans-unit>
        <trans-unit id="ebe513fb11fd20dba0ba645e2edd6ed770f802f4" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#inheritance_column</source>
          <target state="translated">ModelSchema::ClassMethods#inheritance_column</target>
        </trans-unit>
        <trans-unit id="39d4c5f29d57690fb20af6be5053214a278517c1" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#inheritance_column=</source>
          <target state="translated">ModelSchema::ClassMethods#inheritance_column=</target>
        </trans-unit>
        <trans-unit id="638056b926ae5b5e9d04d40a36348eeff37ec51b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#initialize_load_schema_monitor</source>
          <target state="translated">ModelSchema::ClassMethods#initialize_load_schema_monitor</target>
        </trans-unit>
        <trans-unit id="cfdf8706cebcfc8f7edbfa7e020989f53119191c" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#next_sequence_value</source>
          <target state="translated">ModelSchema::ClassMethods#next_sequence_value</target>
        </trans-unit>
        <trans-unit id="b3de9d78e61cce1bfb45aebe65dee739fec0c3b6" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#prefetch_primary_key?</source>
          <target state="translated">ModelSchema::ClassMethods#prefetch_primary_key?</target>
        </trans-unit>
        <trans-unit id="5c638cca0496e75fa8bdd3ef760687b62143bd87" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#protected_environments</source>
          <target state="translated">ModelSchema::ClassMethods#protected_environments</target>
        </trans-unit>
        <trans-unit id="b49a9d0078e1a6b59d5626d3edb9b0be56f14a2e" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#protected_environments=</source>
          <target state="translated">ModelSchema::ClassMethods#protected_environments=</target>
        </trans-unit>
        <trans-unit id="df0f9208df053b27a067b113784578798515de75" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#quoted_table_name</source>
          <target state="translated">ModelSchema::ClassMethods#quoted_table_name</target>
        </trans-unit>
        <trans-unit id="34aa90a1129948e9f4a0488047f67ef89969c5fc" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#reset_column_information</source>
          <target state="translated">ModelSchema::ClassMethods#reset_column_information</target>
        </trans-unit>
        <trans-unit id="4ec0770a96fdf697248442b1010e45ec5cc2648a" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#sequence_name</source>
          <target state="translated">ModelSchema::ClassMethods#sequence_name</target>
        </trans-unit>
        <trans-unit id="8aac7e2479a471101f94603dc47c6282e17718d1" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#sequence_name=</source>
          <target state="translated">ModelSchema::ClassMethods#sequence_name=</target>
        </trans-unit>
        <trans-unit id="32b16c33fdddfbf58ef1861aeb3e5fa24adc6132" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_exists?</source>
          <target state="translated">ModelSchema::ClassMethods#table_exists?</target>
        </trans-unit>
        <trans-unit id="2daf3196846b82ba6ce8254246befb81255884e0" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_name</source>
          <target state="translated">ModelSchema::ClassMethods#table_name</target>
        </trans-unit>
        <trans-unit id="17d64cbc84f6a89f2fb5594f6be6487222648148" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_name=</source>
          <target state="translated">ModelSchema::ClassMethods#table_name=</target>
        </trans-unit>
        <trans-unit id="b7be56821c21245487af1e9e89268a7fa3a26889" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#type_for_attribute</source>
          <target state="translated">ModelSchema::ClassMethods#type_for_attribute</target>
        </trans-unit>
        <trans-unit id="1bece6f5eaebefa7dd968a26fca03b1c68c0cca3" translate="yes" xml:space="preserve">
          <source>ModelSchema::implicit_order_column</source>
          <target state="translated">ModelSchema::implicit_order_column</target>
        </trans-unit>
        <trans-unit id="fb87d535030cc77f6eea99000bb3cea45e1edc55" translate="yes" xml:space="preserve">
          <source>ModelSchema::implicit_order_column=</source>
          <target state="translated">ModelSchema::implicit_order_column=</target>
        </trans-unit>
        <trans-unit id="431e95ad2f8f90f99412581d3cd5dfe16abee564" translate="yes" xml:space="preserve">
          <source>ModelSchema::internal_metadata_table_name</source>
          <target state="translated">ModelSchema::internal_metadata_table_name</target>
        </trans-unit>
        <trans-unit id="98b6b1f31f822ce45ba0cb29e89ac6123c8d48f4" translate="yes" xml:space="preserve">
          <source>ModelSchema::internal_metadata_table_name=</source>
          <target state="translated">ModelSchema::internal_metadata_table_name=</target>
        </trans-unit>
        <trans-unit id="8590c49fd4bb679ea3badb5e84d0a0953bbbd833" translate="yes" xml:space="preserve">
          <source>ModelSchema::pluralize_table_names</source>
          <target state="translated">ModelSchema::pluralize_table_names</target>
        </trans-unit>
        <trans-unit id="ebcf9310ab2b6b0318d091ceb7b1c703c0ac45b7" translate="yes" xml:space="preserve">
          <source>ModelSchema::pluralize_table_names=</source>
          <target state="translated">ModelSchema::pluralize_table_names=</target>
        </trans-unit>
        <trans-unit id="b43262e7c70a6f23fc2c45ec6b8a726355f76039" translate="yes" xml:space="preserve">
          <source>ModelSchema::primary_key_prefix_type</source>
          <target state="translated">ModelSchema::primary_key_prefix_type</target>
        </trans-unit>
        <trans-unit id="6c1cb907a3190d2cb95d00e64613bae792025c7c" translate="yes" xml:space="preserve">
          <source>ModelSchema::primary_key_prefix_type=</source>
          <target state="translated">ModelSchema::primary_key_prefix_type=</target>
        </trans-unit>
        <trans-unit id="de67ebceb5546c59b706f434213517811df93916" translate="yes" xml:space="preserve">
          <source>ModelSchema::schema_migrations_table_name</source>
          <target state="translated">ModelSchema::schema_migrations_table_name</target>
        </trans-unit>
        <trans-unit id="39ef611dd8b38aff324d220142a154c1bc699e95" translate="yes" xml:space="preserve">
          <source>ModelSchema::schema_migrations_table_name=</source>
          <target state="translated">ModelSchema::schema_migrations_table_name=</target>
        </trans-unit>
        <trans-unit id="a9efeee47a5a06ca364ef4cb85ffe51ec9687c6d" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_prefix</source>
          <target state="translated">ModelSchema::table_name_prefix</target>
        </trans-unit>
        <trans-unit id="8f5e531aa919cbc02fa58144c8b391e2dc8af1fa" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_prefix=</source>
          <target state="translated">ModelSchema::table_name_prefix=</target>
        </trans-unit>
        <trans-unit id="6c66134e0c6448bba29b0fc5c80c6bc88daf08db" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_suffix</source>
          <target state="translated">ModelSchema::table_name_suffix</target>
        </trans-unit>
        <trans-unit id="33b6803388ddcb50e4870abc9e5cad2d62b56c1d" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_suffix=</source>
          <target state="translated">ModelSchema::table_name_suffix=</target>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="translated">Models</target>
        </trans-unit>
        <trans-unit id="3d9a5a4b2cc3bb27c0ddd861e63b64508ff0d4ba" translate="yes" xml:space="preserve">
          <source>Models are the final piece of the MVC puzzle. Next, we will connect all of the pieces together.</source>
          <target state="translated">모델은 MVC 퍼즐의 마지막 조각입니다. 다음으로 모든 조각을 함께 연결합니다.</target>
        </trans-unit>
        <trans-unit id="f61c2e48a73d059cd433cefde5962a9fe351d83a" translate="yes" xml:space="preserve">
          <source>Models are then connected with the &lt;code&gt;connects_to&lt;/code&gt; API via the &lt;code&gt;shards&lt;/code&gt; key:</source>
          <target state="translated">그런 다음 모델은 &lt;code&gt;shards&lt;/code&gt; 키 를 통해 &lt;code&gt;connects_to&lt;/code&gt; API 와 연결 됩니다.</target>
        </trans-unit>
        <trans-unit id="30f7aa9f7fd11d6341a4cf482eb7088bbc806644" translate="yes" xml:space="preserve">
          <source>Models in Rails use a singular name, and their corresponding database tables use a plural name. Rails provides a generator for creating models, which most Rails developers tend to use when creating new models. To create the new model, run this command in your terminal:</source>
          <target state="translated">Rails의 모델은 단일 이름을 사용하고 해당 데이터베이스 테이블은 복수 이름을 사용합니다. Rails는 대부분의 Rails 개발자가 새 모델을 만들 때 사용하는 모델 생성 용 생성기를 제공합니다. 새 모델을 작성하려면 터미널에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="212e02f4daf070220d134976d698fbfd6435b031" translate="yes" xml:space="preserve">
          <source>Models uploaded files.</source>
          <target state="translated">업로드 된 파일을 모델링합니다.</target>
        </trans-unit>
        <trans-unit id="e3ea079ded57effba0d3c11311c33855f14ee35e" translate="yes" xml:space="preserve">
          <source>Modification</source>
          <target state="translated">Modification</target>
        </trans-unit>
        <trans-unit id="ad7314f5a2628d0dc9988e07053d3b3451d45d9b" translate="yes" xml:space="preserve">
          <source>Modifying Code to use Load Hooks</source>
          <target state="translated">로드 후크를 사용하도록 코드 수정</target>
        </trans-unit>
        <trans-unit id="4bb4fb2222bcd3fca349ae9ce5dfd4c33ad42390" translate="yes" xml:space="preserve">
          <source>Modifying code is generally straightforward. If you have a line of code that refers to a Rails framework such as &lt;code&gt;ActiveRecord::Base&lt;/code&gt; you can wrap that code in a load hook.</source>
          <target state="translated">코드 수정은 일반적으로 간단합니다. &lt;code&gt;ActiveRecord::Base&lt;/code&gt; 와 같은 Rails 프레임 워크를 참조하는 코드 줄이있는 경우 해당 코드를로드 후크로 래핑 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2625f3c6940984f6f3e4268c2479f099c0bbd324" translate="yes" xml:space="preserve">
          <source>Modifying code is generally straightforward. If you have a line of code that refers to a Rails framework such as &lt;code&gt;ActiveRecord::Base&lt;/code&gt; you can wrap that code in an &lt;code&gt;on_load&lt;/code&gt; hook.</source>
          <target state="translated">코드 수정은 일반적으로 간단합니다. &lt;code&gt;ActiveRecord::Base&lt;/code&gt; 와 같은 Rails 프레임 워크를 참조 하는 코드가있는 경우 해당 코드를 &lt;code&gt;on_load&lt;/code&gt; 훅으로 감쌀 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0b313c3c2650f892a30a82cbbbbfb0962b6ae7b5" translate="yes" xml:space="preserve">
          <source>Modifying code to use &lt;code&gt;on_load&lt;/code&gt; hooks</source>
          <target state="translated">&lt;code&gt;on_load&lt;/code&gt; 후크 를 사용하도록 코드 수정</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="35f34b19ff60e68c68b8e81cf54c250dd275712f" translate="yes" xml:space="preserve">
          <source>Module::Concerning</source>
          <target state="translated">Module::Concerning</target>
        </trans-unit>
        <trans-unit id="9d4eba0f3d95edee88947f6d524fd5959c3a0997" translate="yes" xml:space="preserve">
          <source>Module::DelegationError</source>
          <target state="translated">Module::DelegationError</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="8bfd6b5026a42edb8ae149f647de15fe2e57d087" translate="yes" xml:space="preserve">
          <source>Modules can be specified in different ways. All of the following calls include &lt;code&gt;FooHelper&lt;/code&gt;:</source>
          <target state="translated">모듈은 다른 방법으로 지정할 수 있습니다. 다음 호출에는 모두 &lt;code&gt;FooHelper&lt;/code&gt; 가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="ec0f10698082c93db66cc3bacc7c4262043d5c37" translate="yes" xml:space="preserve">
          <source>Monitor</source>
          <target state="translated">Monitor</target>
        </trans-unit>
        <trans-unit id="541d63743d11a8fb491dae7ec4b904d23e530d3d" translate="yes" xml:space="preserve">
          <source>More Complete Examples</source>
          <target state="translated">더 완전한 예</target>
        </trans-unit>
        <trans-unit id="ba11e265967ffc1fc5eb1bfd1733a7bc95484fe4" translate="yes" xml:space="preserve">
          <source>More Differences</source>
          <target state="translated">더 많은 차이점</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
