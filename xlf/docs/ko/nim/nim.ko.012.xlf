<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="c7f10b9ab29ce16208f7daf440d19bf68a4e424e" translate="yes" xml:space="preserve">
          <source>In templates identifiers can be constructed with the backticks notation:</source>
          <target state="translated">템플릿에서 식별자는 백틱 표기법으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2768586236fda36fbb8835c6640e3bbf9f72b7a" translate="yes" xml:space="preserve">
          <source>In the above example, because the string ends in a period, to get the portion of the string that is &quot;useless&quot; and replace it with &quot;useful&quot;.</source>
          <target state="translated">위의 예에서 문자열은 마침표로 끝나기 때문에 &quot;무용 지&quot;인 문자열 부분을 가져 와서 &quot;유용한&quot;문자열로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="1c735dfcff9ac999e211c2de3309c6b523627b0e" translate="yes" xml:space="preserve">
          <source>In the above example, providing the -d flag causes the symbol &lt;code&gt;FooBar&lt;/code&gt; to be overwritten at compile time, printing out 42. If the &lt;code&gt;-d:FooBar=42&lt;/code&gt; were to be omitted, the default value of 5 would be used.</source>
          <target state="translated">위의 예에서 -d 플래그를 제공하면 컴파일시 &lt;code&gt;FooBar&lt;/code&gt; 기호 를 덮어 쓰고 42를 인쇄합니다. &lt;code&gt;-d:FooBar=42&lt;/code&gt; 를 생략하면 기본값 5가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d668a2ec82cc9fcd88ec0ae1ca74d80a2240aa67" translate="yes" xml:space="preserve">
          <source>In the above example, providing the -d flag causes the symbol &lt;code&gt;FooBar&lt;/code&gt; to be overwritten at compile-time, printing out 42. If the &lt;code&gt;-d:FooBar=42&lt;/code&gt; were to be omitted, the default value of 5 would be used. To see if a value was provided, &lt;code&gt;defined(FooBar)&lt;/code&gt; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef0c534b48c5ddbaf66e5a1fa0de3c409abe7be" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;code&gt;recv&lt;/code&gt; function will return a brand new &lt;code&gt;Future&lt;/code&gt; instance once the request for data to be read from the socket is made. This &lt;code&gt;Future&lt;/code&gt; instance will complete once the requested amount of data is read, in this case it is 100 bytes. The second line sets a callback on this future which will be called once the future completes. All the callback does is write the data stored in the future to &lt;code&gt;stdout&lt;/code&gt;. The &lt;code&gt;read&lt;/code&gt; function is used for this and it checks whether the future completes with an error for you (if it did it will simply raise the error), if there is no error however it returns the value of the future.</source>
          <target state="translated">위의 예에서 &lt;code&gt;recv&lt;/code&gt; 함수는 소켓에서 데이터를 읽도록 요청하면 새로운 &lt;code&gt;Future&lt;/code&gt; 인스턴스를 반환합니다 . 이 &lt;code&gt;Future&lt;/code&gt; 인스턴스는 요청 된 양의 데이터를 읽은 후에 완료됩니다 (이 경우 100 바이트). 두 번째 줄은 미래에 대한 콜백을 설정하며, 미래가 완료되면 호출됩니다. 모든 콜백은 향후 저장된 데이터를 &lt;code&gt;stdout&lt;/code&gt; 에 기록 합니다. &lt;code&gt;read&lt;/code&gt; 기능이 사용하고 그것을 확인 여부에 대한 오류와 함께 미래 완료 (그것이 단순히 오류가 발생합니다 한 경우)는 미래의 값을 반환 그러나 오류가없는 경우.</target>
        </trans-unit>
        <trans-unit id="21c40f021cb3285301a10da6c518a7dfee56f66a" translate="yes" xml:space="preserve">
          <source>In the above example, the search loop is unrolled by a factor 4. The unroll factor can be left out too; the compiler then chooses an appropriate unroll factor.</source>
          <target state="translated">위의 예에서 검색 루프는 요인 4에 의해 언 롤링됩니다. 언롤 팩터도 생략 될 수 있습니다. 그런 다음 컴파일러는 적절한 언롤 팩터를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="447fba0bf5092295ea3ef5df369d20395a2954e0" translate="yes" xml:space="preserve">
          <source>In the age of HTTP, HTML, FTP, TCP, IP, UTF, WWW it is foolish to pretend these are somewhat special words requiring all uppercase. Instead treat them as what they are: Real words. So it's &lt;code&gt;parseUrl&lt;/code&gt; rather than &lt;code&gt;parseURL&lt;/code&gt;, &lt;code&gt;checkHttpHeader&lt;/code&gt; instead of &lt;code&gt;checkHTTPHeader&lt;/code&gt; etc.</source>
          <target state="translated">HTTP, HTML, FTP, TCP, IP, UTF, WWW의 시대에는 이것이 모두 대문자를 요구하는 다소 특별한 단어 인 것처럼 어리석은 일입니다. 대신 그것들을 실제 단어로 취급하십시오. 그것의 그래서 &lt;code&gt;parseUrl&lt;/code&gt; 보다는 &lt;code&gt;parseURL&lt;/code&gt; , &lt;code&gt;checkHttpHeader&lt;/code&gt; 대신 &lt;code&gt;checkHTTPHeader&lt;/code&gt; 등</target>
        </trans-unit>
        <trans-unit id="1aaaccd5328576322733f4b1a0d0cfc0189406e9" translate="yes" xml:space="preserve">
          <source>In the case of Nim's own documentation, the &lt;code&gt;txt&lt;/code&gt; value is just a commit hash to append to a formatted URL to &lt;a href=&quot;https://github.com/Araq/Nim&quot;&gt;https://github.com/Araq/Nim&lt;/a&gt;. The &lt;code&gt;tools/nimweb.nim&lt;/code&gt; helper queries the current git commit hash during doc generation, but since you might be working on an unpublished repository, it also allows specifying a &lt;code&gt;githash&lt;/code&gt; value in &lt;code&gt;web/website.ini&lt;/code&gt; to force a specific commit in the output.</source>
          <target state="translated">Nim 자체 문서의 경우 &lt;code&gt;txt&lt;/code&gt; 값은 &lt;a href=&quot;https://github.com/Araq/Nim&quot;&gt;https://github.com/Araq/Nim에&lt;/a&gt; 형식화 된 URL에 추가하기위한 커밋 해시 입니다. &lt;code&gt;tools/nimweb.nim&lt;/code&gt; 도우미는 현재의 자식이 문서 생성시 해시를 저지 쿼리, 그러나 당신이 게시되지 않은 저장소 작업을 할 수 있기 때문에, 그것은 또한 지정 할 수 있습니다 &lt;code&gt;githash&lt;/code&gt; 의 가치 &lt;code&gt;web/website.ini&lt;/code&gt; 특정 출력에 커밋 강제로.</target>
        </trans-unit>
        <trans-unit id="f7bbacfbe7cce5758d2328c3b07e39032324321c" translate="yes" xml:space="preserve">
          <source>In the compiler these integer literal types are represented with the node kind &lt;code&gt;nkIntLit&lt;/code&gt;, type kind &lt;code&gt;tyInt&lt;/code&gt; and the member &lt;code&gt;n&lt;/code&gt; of the type pointing back to the integer literal node in the ast containing the integer value. These are the properties that hold true for integer literal types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00b94e745093f304c720c396d8d5aff9aa3553f" translate="yes" xml:space="preserve">
          <source>In the construct &lt;code&gt;let/var x = ...&lt;/code&gt; (var/let binding) hooks are generated for &lt;code&gt;typeof(x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2157cdb5eb2abc30a467f2496e41f6251f2619c2" translate="yes" xml:space="preserve">
          <source>In the current implementation &lt;code&gt;FloatDivByZeroDefect&lt;/code&gt; and &lt;code&gt;FloatInexactDefect&lt;/code&gt; are never raised. &lt;code&gt;FloatOverflowDefect&lt;/code&gt; is raised instead of &lt;code&gt;FloatDivByZeroDefect&lt;/code&gt;. There is also a &lt;span id=&quot;floatchecks_1&quot;&gt;floatChecks&lt;/span&gt; pragma that is a short-cut for the combination of &lt;code&gt;nanChecks&lt;/code&gt; and &lt;code&gt;infChecks&lt;/code&gt; pragmas. &lt;code&gt;floatChecks&lt;/code&gt; are turned off as default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222b18bf0bb9eca48a64b5eb7ba691094c380acc" translate="yes" xml:space="preserve">
          <source>In the current implementation &lt;code&gt;FloatDivByZeroError&lt;/code&gt; and &lt;code&gt;FloatInexactError&lt;/code&gt; are never raised. &lt;code&gt;FloatOverflowError&lt;/code&gt; is raised instead of &lt;code&gt;FloatDivByZeroError&lt;/code&gt;. There is also a &lt;span id=&quot;floatchecks_1&quot;&gt;floatChecks&lt;/span&gt; pragma that is a short-cut for the combination of &lt;code&gt;nanChecks&lt;/code&gt; and &lt;code&gt;infChecks&lt;/code&gt; pragmas. &lt;code&gt;floatChecks&lt;/code&gt; are turned off as default.</source>
          <target state="translated">현재 구현에서 &lt;code&gt;FloatDivByZeroError&lt;/code&gt; 및 &lt;code&gt;FloatInexactError&lt;/code&gt; 는 발생하지 않습니다. &lt;code&gt;FloatOverflowError&lt;/code&gt; 는 대신 발생 &lt;code&gt;FloatDivByZeroError&lt;/code&gt; . 도있다 &lt;span id=&quot;floatchecks_1&quot;&gt;floatChecks의&lt;/span&gt; 의 조합에 대한 짧은 컷 프라 그마 &lt;code&gt;nanChecks&lt;/code&gt; 및 &lt;code&gt;infChecks&lt;/code&gt; 프라 그마는. &lt;code&gt;floatChecks&lt;/code&gt; 는 기본적으로 해제되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bff2144a51b7a2c294698601ad8d94335ce9f207" translate="yes" xml:space="preserve">
          <source>In the example &lt;code&gt;name&lt;/code&gt; is instantiated with &lt;code&gt;myint&lt;/code&gt;, so `T name` becomes &lt;code&gt;Tmyint&lt;/code&gt;.</source>
          <target state="translated">예제에서 &lt;code&gt;name&lt;/code&gt; 은 &lt;code&gt;myint&lt;/code&gt; 로 인스턴스화 되므로`T name`은 &lt;code&gt;Tmyint&lt;/code&gt; 가 됩니다 .</target>
        </trans-unit>
        <trans-unit id="7f3d915c7fda05ffa880f1a94fe575c45d57c7e6" translate="yes" xml:space="preserve">
          <source>In the example a new pragma named &lt;code&gt;rtl&lt;/code&gt; is introduced that either imports a symbol from a dynamic library or exports the symbol for dynamic library generation.</source>
          <target state="translated">이 예에서는 동적 라이브러리에서 심볼을 가져 오거나 동적 라이브러리 생성을 위해 심볼을 내보내는 &lt;code&gt;rtl&lt;/code&gt; 이라는 새로운 pragma 가 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="93f65483d248fc770a9b18bebde69fbd09a74d5c" translate="yes" xml:space="preserve">
          <source>In the example a tree structure is declared with the &lt;code&gt;Node&lt;/code&gt; type. Note that the type definition is recursive and the GC has to assume that objects of this type may form a cyclic graph. The &lt;code&gt;acyclic&lt;/code&gt; pragma passes the information that this cannot happen to the GC. If the programmer uses the &lt;code&gt;acyclic&lt;/code&gt; pragma for data types that are in reality cyclic, the GC may leak memory, but nothing worse happens.</source>
          <target state="translated">이 예에서 트리 구조는 &lt;code&gt;Node&lt;/code&gt; 유형으로 선언됩니다 . 타입 정의는 재귀 적이며 GC는이 타입의 객체가 주기적 그래프를 형성 할 수 있다고 가정해야합니다. &lt;code&gt;acyclic&lt;/code&gt; pragma는 이것이 GC에 일어나지 않을 수있는 정보를 전달합니다. 프로그래머가 실제로주기적인 데이터 유형에 대해 &lt;code&gt;acyclic&lt;/code&gt; 주기적 pragma를 사용하는 경우 GC는 메모리를 누출 할 수 있지만 더 나쁜 일은 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c223baf4c7b9145e95ff7b9ff3609cc1168a5f2c" translate="yes" xml:space="preserve">
          <source>In the example c2nim treats the declaration of &lt;code&gt;DECLARE_NO_COPY_CLASS&lt;/code&gt; as if it has been defined via &lt;code&gt;#def&lt;/code&gt;.</source>
          <target state="translated">이 예에서 c2nim은 &lt;code&gt;DECLARE_NO_COPY_CLASS&lt;/code&gt; 선언을 마치 &lt;code&gt;#def&lt;/code&gt; 를 통해 정의 된 것처럼 취급합니다 .</target>
        </trans-unit>
        <trans-unit id="4931fb24c88d4a3add48a67517bb1d6df1d7d83b" translate="yes" xml:space="preserve">
          <source>In the example the &lt;code&gt;kind&lt;/code&gt; field is called the &lt;span id=&quot;discriminator_1&quot;&gt;discriminator&lt;/span&gt;: For safety its address cannot be taken and assignments to it are restricted: The new value must not lead to a change of the active object branch. For an object branch switch &lt;code&gt;system.reset&lt;/code&gt; has to be used. Also, when the fields of a particular branch are specified during object construction, the correct value for the discriminator must be supplied at compile-time.</source>
          <target state="translated">이 예에서는 &lt;code&gt;kind&lt;/code&gt; 필드를 &lt;span id=&quot;discriminator_1&quot;&gt;판별 자라고합니다&lt;/span&gt; . 안전을 위해 주소를 지정할 수없고 할당이 제한됩니다. 새 값이 활성 오브젝트 분기를 변경하지 않아야합니다. 오브젝트 브랜치 스위치의 경우 &lt;code&gt;system.reset&lt;/code&gt; 을 사용해야합니다. 또한 오브젝트 구성 중에 특정 브랜치의 필드가 지정된 경우 판별시 올바른 판별 자 값을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="f870d1827ccced8c4dc81fc21ba54ed53d3b7fa4" translate="yes" xml:space="preserve">
          <source>In the example the constructors &lt;code&gt;newLit&lt;/code&gt; and &lt;code&gt;newPlus&lt;/code&gt; are procs because they should use static binding, but &lt;code&gt;eval&lt;/code&gt; is a method because it requires dynamic binding.</source>
          <target state="translated">이 예제에서 &lt;code&gt;newLit&lt;/code&gt; 및 &lt;code&gt;newPlus&lt;/code&gt; 생성자 는 정적 바인딩을 사용해야하기 때문에 procs이지만 &lt;code&gt;eval&lt;/code&gt; 은 동적 바인딩이 필요하므로 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="ffcf0c9fc73817d81ec1bb90e18296fae7f0e1e3" translate="yes" xml:space="preserve">
          <source>In the example the external name of &lt;code&gt;p&lt;/code&gt; is set to &lt;code&gt;prefixp&lt;/code&gt;. Only &lt;code&gt;$1&lt;/code&gt; is available and a literal dollar sign must be written as &lt;code&gt;$$&lt;/code&gt;.</source>
          <target state="translated">이 예에서 &lt;code&gt;p&lt;/code&gt; 의 외부 이름은 &lt;code&gt;prefixp&lt;/code&gt; 로 설정됩니다 . &lt;code&gt;$1&lt;/code&gt; 만 사용할 수 있으며 리터럴 달러 기호는 &lt;code&gt;$$&lt;/code&gt; 로 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="207cdaa4265565920d4f81786bf2ce395e20de1e" translate="yes" xml:space="preserve">
          <source>In the example the generic &lt;code&gt;==&lt;/code&gt; for tuples (as defined in the system module) uses the &lt;code&gt;==&lt;/code&gt; operators of the tuple's components. However, the &lt;code&gt;==&lt;/code&gt; for the &lt;code&gt;Index&lt;/code&gt; type is defined &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;==&lt;/code&gt; for tuples; yet the example compiles as the instantiation takes the currently defined symbols into account too.</source>
          <target state="translated">이 예에서 시스템 모듈에 정의 된 튜플 의 일반 &lt;code&gt;==&lt;/code&gt; 는 튜플 구성 요소 의 &lt;code&gt;==&lt;/code&gt; 연산자를 사용합니다 . 그러나, &lt;code&gt;==&lt;/code&gt; 에 대한 &lt;code&gt;Index&lt;/code&gt; 유형은 정의 된 &lt;em&gt;후 &lt;/em&gt; &lt;code&gt;==&lt;/code&gt; 튜플; 그러나 인스턴스화에서 현재 정의 된 기호도 고려할 때 예제가 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="e3d09a6862f895be9685356eda8db42c91b15ade" translate="yes" xml:space="preserve">
          <source>In the example the two &lt;code&gt;writeLine&lt;/code&gt; statements are bound to the &lt;code&gt;body&lt;/code&gt; parameter. The &lt;code&gt;withFile&lt;/code&gt; template contains boilerplate code and helps to avoid a common bug: to forget to close the file. Note how the &lt;code&gt;let fn = filename&lt;/code&gt; statement ensures that &lt;code&gt;filename&lt;/code&gt; is evaluated only once.</source>
          <target state="translated">이 예에서는 두 개의 &lt;code&gt;writeLine&lt;/code&gt; 문이 &lt;code&gt;body&lt;/code&gt; 매개 변수에 바인딩되어 있습니다. &lt;code&gt;withFile&lt;/code&gt; 의 템플릿은 상용구 코드를 포함하고 공통의 버그를 방지하는 데 도움이 : 파일을 닫습니다 잊어. &lt;code&gt;let fn = filename&lt;/code&gt; 문은 &lt;code&gt;filename&lt;/code&gt; 이 한 번만 평가 되도록하는 방법에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="28bc7a2ca81c21104a39544430e57f057882ba82" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;res&lt;/code&gt; and &lt;code&gt;remainder&lt;/code&gt; are &lt;code&gt;var parameters&lt;/code&gt;. Var parameters can be modified by the procedure and the changes are visible to the caller. The argument passed to a var parameter has to be an l-value. Var parameters are implemented as hidden pointers. The above example is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e573c188d155c097bab8635e952a84f3906a513" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;res&lt;/code&gt; and &lt;code&gt;remainder&lt;/code&gt; are &lt;em&gt;var parameters&lt;/em&gt;. Var parameters can be modified by the procedure and the changes are visible to the caller. Note that the above example would better make use of a tuple as a return value instead of using var parameters.</source>
          <target state="translated">이 예에서 &lt;code&gt;res&lt;/code&gt; 및 &lt;code&gt;remainder&lt;/code&gt; 는 &lt;em&gt;var parameters&lt;/em&gt; 입니다. Var 매개 변수는 프로 시저에 의해 수정 될 수 있으며 변경 사항은 호출자에게 표시됩니다. 위의 예제는 var 매개 변수를 사용하는 대신 튜플을 반환 값으로 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e99258ef6102af84c3e85eb151f26d0965f922fd" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;res&lt;/code&gt; and &lt;code&gt;remainder&lt;/code&gt; are &lt;em&gt;var parameters&lt;/em&gt;. Var parameters can be modified by the procedure and the changes are visible to the caller. The argument passed to a var parameter has to be an l-value. Var parameters are implemented as hidden pointers. The above example is equivalent to:</source>
          <target state="translated">이 예에서 &lt;code&gt;res&lt;/code&gt; 및 &lt;code&gt;remainder&lt;/code&gt; 는 &lt;em&gt;var parameters&lt;/em&gt; 입니다. Var 매개 변수는 프로 시저에 의해 수정 될 수 있으며 변경 사항은 호출자에게 표시됩니다. var 매개 변수에 전달 된 인수는 l- 값이어야합니다. Var 매개 변수는 숨겨진 포인터로 구현됩니다. 위의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a33b88edb7abee803cf83b9a3f430807a4d54ee2" translate="yes" xml:space="preserve">
          <source>In the example, a new pragma named &lt;code&gt;rtl&lt;/code&gt; is introduced that either imports a symbol from a dynamic library or exports the symbol for dynamic library generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbe9fa44d2d3631a7a9bdc36dfbdaa88fb06e85" translate="yes" xml:space="preserve">
          <source>In the example, a tree structure is declared with the &lt;code&gt;Node&lt;/code&gt; type. Note that the type definition is recursive and the GC has to assume that objects of this type may form a cyclic graph. The &lt;code&gt;acyclic&lt;/code&gt; pragma passes the information that this cannot happen to the GC. If the programmer uses the &lt;code&gt;acyclic&lt;/code&gt; pragma for data types that are in reality cyclic, the memory leaks can be the result, but memory safety is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bda7fedd4585b4b00c843a5656d4816b805ed0" translate="yes" xml:space="preserve">
          <source>In the example, the &lt;code&gt;kind&lt;/code&gt; field is called the &lt;span id=&quot;discriminator_1&quot;&gt;discriminator&lt;/span&gt;: For safety its address cannot be taken and assignments to it are restricted: The new value must not lead to a change of the active object branch. Also, when the fields of a particular branch are specified during object construction, the corresponding discriminator value must be specified as a constant expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643a7cc19ec57243ef20fdb14004efc223149cd0" translate="yes" xml:space="preserve">
          <source>In the example, the case branches &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are much more common than the other cases. Therefore the generated assembler code should test for these values first so that the CPU's branch predictor has a good chance to succeed (avoiding an expensive CPU pipeline stall). The other cases might be put into a jump table for O(1) overhead but at the cost of a (very likely) pipeline stall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce83aae39fe686c17231fc96b454e933bdbf835" translate="yes" xml:space="preserve">
          <source>In the example, the case branches &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are much more common than the other cases. Therefore the generated assembler code should test for these values first, so that the CPU's branch predictor has a good chance to succeed (avoiding an expensive CPU pipeline stall). The other cases might be put into a jump table for O(1) overhead, but at the cost of a (very likely) pipeline stall.</source>
          <target state="translated">이 예에서 사례 분기 &lt;code&gt;0&lt;/code&gt; 과 &lt;code&gt;1&lt;/code&gt; 은 다른 경우보다 훨씬 일반적입니다. 따라서 생성 된 어셈블러 코드는 먼저이 값을 테스트하여 CPU의 분기 예측기가 성공할 수있는 좋은 기회를 갖도록해야합니다 (고가의 CPU 파이프 라인 중단 방지). 다른 경우는 O (1) 오버 헤드를위한 점프 테이블에 넣을 수 있지만 파이프 라인이 멈출 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd77d70848a9d919bcdee30486c6f939d747e70f" translate="yes" xml:space="preserve">
          <source>In the example, the external name of &lt;code&gt;p&lt;/code&gt; is set to &lt;code&gt;prefixp&lt;/code&gt;. Only &lt;code&gt;$1&lt;/code&gt; is available and a literal dollar sign must be written as &lt;code&gt;$$&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a17743e370d7b0a8e8d723b544806a79a80e01" translate="yes" xml:space="preserve">
          <source>In the example, the generic &lt;code&gt;==&lt;/code&gt; for tuples (as defined in the system module) uses the &lt;code&gt;==&lt;/code&gt; operators of the tuple's components. However, the &lt;code&gt;==&lt;/code&gt; for the &lt;code&gt;Index&lt;/code&gt; type is defined &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;==&lt;/code&gt; for tuples; yet the example compiles as the instantiation takes the currently defined symbols into account too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449891737730fed7e4e9e268f5440bde8cd00a54" translate="yes" xml:space="preserve">
          <source>In the example, the two &lt;code&gt;writeLine&lt;/code&gt; statements are bound to the &lt;code&gt;actions&lt;/code&gt; parameter.</source>
          <target state="translated">이 예에서 두 개의 &lt;code&gt;writeLine&lt;/code&gt; 문은 &lt;code&gt;actions&lt;/code&gt; 매개 변수에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="05f29e9409204f7156a8b49a6edfe66f0ff90993" translate="yes" xml:space="preserve">
          <source>In the examples, var parameters or pointers are used to provide two return values. This can be done in a cleaner way by returning a tuple:</source>
          <target state="translated">예제에서 var 매개 변수 또는 포인터는 두 개의 리턴 값을 제공하는 데 사용됩니다. 튜플을 반환하면 깔끔한 방식으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d08188e2018f19c3aaefaadb03503daa50e55984" translate="yes" xml:space="preserve">
          <source>In the first component of the tuple is the name of the current variable stored, in the second its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1b069c247f4187c31c21ebbe40e040b094bad5" translate="yes" xml:space="preserve">
          <source>In the following sections &lt;em&gt;global&lt;/em&gt; means &lt;em&gt;shared between modules&lt;/em&gt; or &lt;em&gt;property of the whole program&lt;/em&gt;.</source>
          <target state="translated">다음 섹션에서 &lt;em&gt;전역 &lt;/em&gt;&lt;em&gt;은 전체 프로그램의 &lt;/em&gt;&lt;em&gt;모듈&lt;/em&gt; 또는 &lt;em&gt;속성 &lt;/em&gt;&lt;em&gt;간에 공유되는&lt;/em&gt; 것을 의미 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f42fa9bad92a4bca57282426b4b7870e70495fb5" translate="yes" xml:space="preserve">
          <source>In the previous example slices are used to modify a part of a string. The slice's bounds can hold any value supported by their type, but it is the proc using the slice object which defines what values are accepted.</source>
          <target state="translated">이전 예제에서 슬라이스는 문자열의 일부를 수정하는 데 사용됩니다. 슬라이스의 경계는 해당 유형에서 지원하는 모든 값을 보유 할 수 있지만 어떤 개체가 허용되는지 정의하는 슬라이스 개체를 사용하는 것은 proc입니다.</target>
        </trans-unit>
        <trans-unit id="d9143e669402c29ee0475ca379b33b947a4800d5" translate="yes" xml:space="preserve">
          <source>In the previous sections the &lt;code&gt;NimMain()&lt;/code&gt; function reared its head. Since JavaScript already provides automatic memory management, you can freely pass objects between the two language without problems. In C and derivate languages you need to be careful about what you do and how you share memory. The previous examples only dealt with simple scalar values, but passing a Nim string to C, or reading back a C string in Nim already requires you to be aware of who controls what to avoid crashing.</source>
          <target state="translated">이전 섹션에서 &lt;code&gt;NimMain()&lt;/code&gt; 함수는 헤드를 양육했습니다. JavaScript는 이미 자동 메모리 관리를 제공하므로 문제없이 두 언어간에 객체를 자유롭게 전달할 수 있습니다. C 언어와 파생 언어에서는 수행 작업과 메모리 공유 방법에주의해야합니다. 앞의 예제는 간단한 스칼라 값만 다루었지만 Nim 문자열을 C로 전달하거나 Nim에서 C 문자열을 다시 읽으려면 충돌을 피할 대상을 누가 제어하는지 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="5c9afde1ecde472516002347fee65a65feb81e65" translate="yes" xml:space="preserve">
          <source>In the previous sections, the &lt;code&gt;NimMain()&lt;/code&gt; function reared its head. Since JavaScript already provides automatic memory management, you can freely pass objects between the two languages without problems. In C and derivate languages you need to be careful about what you do and how you share memory. The previous examples only dealt with simple scalar values, but passing a Nim string to C, or reading back a C string in Nim already requires you to be aware of who controls what to avoid crashing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86065f88bb1b68aca98b8c18ec035e8c48eaa348" translate="yes" xml:space="preserve">
          <source>In the second pass information about the underlying object &quot;graphs&quot; is computed. Let &lt;code&gt;v&lt;/code&gt; be a parameter or a local variable. Let &lt;code&gt;G(v)&lt;/code&gt; be the graph that &lt;code&gt;v&lt;/code&gt; belongs to. A graph is defined by the set of variables that belong to the graph. Initially for all &lt;code&gt;v&lt;/code&gt;: &lt;code&gt;G(v) = {v}&lt;/code&gt;. Every variable can only be part of a single graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc60ca1bdf8783470bcdcc4595e252ff2ff1a192" translate="yes" xml:space="preserve">
          <source>In the semantic pass this is called in strategic places to ensure we lift assignment, destructors and moves properly. The later 'injectdestructors' pass depends on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1678b121aeb51003f37c84a3a8b55dda38dde0ae" translate="yes" xml:space="preserve">
          <source>In the standard library every name of a routine that returns a &lt;code&gt;var&lt;/code&gt; type starts with the prefix &lt;code&gt;m&lt;/code&gt; per convention.</source>
          <target state="translated">표준 라이브러리에서 &lt;code&gt;var&lt;/code&gt; 유형 을 반환하는 모든 루틴 이름은 규칙 당 접두사 &lt;code&gt;m&lt;/code&gt; 으로 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="e4c5a8a9e7db0472a0505e8cc48984362a9686c3" translate="yes" xml:space="preserve">
          <source>In this context, a line is any string separated by a newline combination. A line can be an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3573423166a3714205c4fd8df064a462e9f793fc" translate="yes" xml:space="preserve">
          <source>In this context, a line is any string seperated by a newline combination. A line can be an empty string.</source>
          <target state="translated">이와 관련하여 줄은 줄 바꿈 조합으로 구분 된 문자열입니다. 줄은 빈 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0c0be54e609e08ad5ac67f5c3b4c12362798deb" translate="yes" xml:space="preserve">
          <source>In this example &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; is applied to any argument that is passed to the parameter &lt;code&gt;a&lt;/code&gt;. Note that &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; applied to strings is a nop.</source>
          <target state="translated">이 예에서 &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; 는 매개 변수 &lt;code&gt;a&lt;/code&gt; 로 전달되는 모든 인수에 적용됩니다 . 문자열에 적용 되는 &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; 는 nop입니다.</target>
        </trans-unit>
        <trans-unit id="cd49a3b7329e865d00fe88035f180e3a31be031d" translate="yes" xml:space="preserve">
          <source>In this example &lt;code&gt;$&lt;/code&gt; is applied to any argument that is passed to the parameter &lt;code&gt;a&lt;/code&gt;. (Note that &lt;code&gt;$&lt;/code&gt; applied to strings is a nop.)</source>
          <target state="translated">이 예에서 &lt;code&gt;$&lt;/code&gt; 는 매개 변수 &lt;code&gt;a&lt;/code&gt; 로 전달되는 모든 인수에 적용됩니다 . ( 문자열에 적용 되는 &lt;code&gt;$&lt;/code&gt; 는 nop입니다.)</target>
        </trans-unit>
        <trans-unit id="caf41cefb1ec542e92b76fcef06da5301961d50c" translate="yes" xml:space="preserve">
          <source>In this example both macros are combined seamlessly in order to maximise efficiency and perform different checks.</source>
          <target state="translated">이 예에서는 효율성을 최대화하고 다른 검사를 수행하기 위해 두 매크로가 매끄럽게 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="fbd15640684b666f33817b98a57e6ad3f6b44475" translate="yes" xml:space="preserve">
          <source>In this example custom pragmas are used to describe how Nim objects are mapped to the schema of the relational database. Custom pragmas can have zero or more arguments. In order to pass multiple arguments use one of template call syntaxes. All arguments are typed and follow standard overload resolution rules for templates. Therefore, it is possible to have default values for arguments, pass by name, varargs, etc.</source>
          <target state="translated">이 예제에서 사용자 정의 pragma는 Nim 객체가 관계형 데이터베이스의 스키마에 매핑되는 방법을 설명하는 데 사용됩니다. 커스텀 pragma는 0 개 이상의 인수를 가질 수 있습니다. 여러 인수를 전달하려면 템플릿 호출 구문 중 하나를 사용하십시오. 모든 인수는 형식화되며 템플릿에 대한 표준 과부하 해결 규칙을 따릅니다. 따라서 인수, 이름 별 전달, varargs 등에 대한 기본값을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d51e14283b9522ab435397923f56710e310a3c5b" translate="yes" xml:space="preserve">
          <source>In this example, custom pragmas are used to describe how Nim objects are mapped to the schema of the relational database. Custom pragmas can have zero or more arguments. In order to pass multiple arguments use one of template call syntaxes. All arguments are typed and follow standard overload resolution rules for templates. Therefore, it is possible to have default values for arguments, pass by name, varargs, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f248d957c4c418906f3928f44e0269d82d3858" translate="yes" xml:space="preserve">
          <source>In this example, the compiler assumes that &lt;code&gt;s.setLen 0&lt;/code&gt; invalidates the borrow operation of &lt;code&gt;v&lt;/code&gt; even though a human being can easily see that it will never do that at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664c924f4e9ba31a6bee85a98d981b31c47a324a" translate="yes" xml:space="preserve">
          <source>In this example, we define a helper proc &lt;code&gt;someSep&lt;/code&gt; that skips some separators which we then use in our scanf pattern to help us in the matching process:</source>
          <target state="translated">이 예제에서, 우리 는 매칭 프로세스에서 도움을주기 위해 scanf 패턴에서 사용하는 일부 분리 &lt;code&gt;someSep&lt;/code&gt; 건너 뛰는 helper proc someSep 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="2f802f4b0bb2efda510c88e945aad6166591377d" translate="yes" xml:space="preserve">
          <source>Include element &lt;code&gt;y&lt;/code&gt; in the set &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc7c4e3fef8fa3f55dd83a3e9c6604013feffb7" translate="yes" xml:space="preserve">
          <source>Include file that imports all plugins that are active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534570485c11beb7704f319727846b8b4f022eb5" translate="yes" xml:space="preserve">
          <source>Include statement</source>
          <target state="translated">진술 포함</target>
        </trans-unit>
        <trans-unit id="81f90017326cffe32d0fe31e95d05aadf2a073ec" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0b4096310fac70a46bef3c53e1cfdd624cfc28" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;key&lt;/code&gt; in the set &lt;code&gt;s&lt;/code&gt; and tells if &lt;code&gt;key&lt;/code&gt; was already in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc642ae58ad84741186ba01bd7a4f6256a9bccf" translate="yes" xml:space="preserve">
          <source>Includes &lt;em&gt;key&lt;/em&gt; in the set &lt;em&gt;s&lt;/em&gt; and tells if &lt;em&gt;key&lt;/em&gt; was added to &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">포함 &lt;em&gt;키&lt;/em&gt; 세트의 &lt;em&gt;의를&lt;/em&gt; 하고있는 경우 알려줍니다 &lt;em&gt;키&lt;/em&gt; 에 추가 된 &lt;em&gt;의&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="c1b796fa5f3aa22a8ebc4d8748eb7bf27947a00b" translate="yes" xml:space="preserve">
          <source>Includes all elements from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950d9dee82a260ecc2cb0c186ec7bc7b05f6e58e" translate="yes" xml:space="preserve">
          <source>Includes all elements from &lt;code&gt;other&lt;/code&gt; set into &lt;code&gt;s&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f932923a0eaeac8401c0d332e7ec2bbdcdc32c" translate="yes" xml:space="preserve">
          <source>Includes all elements from &lt;em&gt;other&lt;/em&gt; into &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;other의&lt;/em&gt; 모든 요소 를 &lt;em&gt;s에&lt;/em&gt; 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="a8760dbb37ab4f1fa60414a208dcf51dedd89884" translate="yes" xml:space="preserve">
          <source>Includes all elements from the OrderedSet &lt;code&gt;other&lt;/code&gt; into HashSet &lt;code&gt;s&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18059d80537606fa3076f8d7fbb9aae9ee4a29e3" translate="yes" xml:space="preserve">
          <source>Includes an element &lt;code&gt;elem&lt;/code&gt; in &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; needs to represent a Nim bitset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc91c3bbdf6c2b1108bb5085e7f7fb5652bf156" translate="yes" xml:space="preserve">
          <source>Includes an element &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1bf1db1ba56c9fed3c108674752a59dfcd9da4" translate="yes" xml:space="preserve">
          <source>Includes an element &lt;em&gt;key&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">요소 포함 &lt;em&gt;키&lt;/em&gt; 에 &lt;em&gt;들&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="baa7f2bf864bc6c51db9dd96ec43925505049852" translate="yes" xml:space="preserve">
          <source>Includes element &lt;code&gt;y&lt;/code&gt; in the set &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39adf671e0dced5df541685094700a0970fe79a" translate="yes" xml:space="preserve">
          <source>Includes the set &lt;code&gt;y&lt;/code&gt; in the set &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bb98605da7acc7e227b0cc2dcd3646758159d5" translate="yes" xml:space="preserve">
          <source>Includes the value 60 to allow for a leap second. Note however that the &lt;code&gt;second&lt;/code&gt; of a &lt;code&gt;DateTime&lt;/code&gt; will never be a leap second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122d72fb5f4934f490f955173c3eef92832e3bcb" translate="yes" xml:space="preserve">
          <source>IncompleteStruct pragma</source>
          <target state="translated">불완전한 구조 pragma</target>
        </trans-unit>
        <trans-unit id="b900287c024610129112be852c5b48a82df21bff" translate="yes" xml:space="preserve">
          <source>Increases &lt;code&gt;a&lt;/code&gt; by &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f086d14d7fef8dbca8e2fe7a021ad573b166cafb" translate="yes" xml:space="preserve">
          <source>Increment the ordinal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae54d14bda94db940864cd80dc5d34aba25da3cb" translate="yes" xml:space="preserve">
          <source>IncrementalCtx:</source>
          <target state="translated">IncrementalCtx:</target>
        </trans-unit>
        <trans-unit id="30073b0d62781ad5fb8c9dbb42912c95f76e61b2" translate="yes" xml:space="preserve">
          <source>Increments &lt;code&gt;c[key]&lt;/code&gt; by &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d84f99bcd176c5c9c789a01e619dc3a37c0a353" translate="yes" xml:space="preserve">
          <source>Increments &lt;code&gt;t[key]&lt;/code&gt; by &lt;code&gt;val&lt;/code&gt; (default: 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de2c6e5f8005f6da387b96f860d3929350eb0f8" translate="yes" xml:space="preserve">
          <source>Increments an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e458e98e024804e2195312b10a3a11a67d6582fd" translate="yes" xml:space="preserve">
          <source>Increments an ordinal</source>
          <target state="translated">서수 증가</target>
        </trans-unit>
        <trans-unit id="3579152b0f13082bc2ed763d516b6eeee04f5e41" translate="yes" xml:space="preserve">
          <source>Increments in place a floating point number</source>
          <target state="translated">부동 소수 점수의 증가</target>
        </trans-unit>
        <trans-unit id="cb26353ce6e9409a4edb225d9573bd77b8a7bc16" translate="yes" xml:space="preserve">
          <source>Increments in place a floating point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0f25820ddbbe3a0ee8d57570d101f444e069f3" translate="yes" xml:space="preserve">
          <source>Increments the ordinal &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3917b825256b71ec29e2860d96b9f3c57a46e2bf" translate="yes" xml:space="preserve">
          <source>Indent with two spaces.</source>
          <target state="translated">두 개의 공백으로 들여 쓰기하십시오.</target>
        </trans-unit>
        <trans-unit id="c9ec7fcf0ce1c005cbdd2ae9ab39e1773e6bf368" translate="yes" xml:space="preserve">
          <source>Indentation</source>
          <target state="translated">Indentation</target>
        </trans-unit>
        <trans-unit id="3e69016e62b22706518f7fd44403f71f6f86a464" translate="yes" xml:space="preserve">
          <source>Indentation can be used after the &lt;code&gt;const&lt;/code&gt; keyword to list a whole section of constants:</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 키워드 다음에 들여 쓰기를 사용 하여 전체 상수 섹션을 나열 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f45c825c4626280194b953ea0dec3e48ce7fccc" translate="yes" xml:space="preserve">
          <source>Indentation can be used after the &lt;code&gt;var&lt;/code&gt; keyword to list a whole section of variables:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 키워드 다음에 들여 쓰기를 사용하여 변수의 전체 섹션을 나열 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="520792c3a2538ee8e56f0b4f71803ca37955634d" translate="yes" xml:space="preserve">
          <source>Indents each line in &lt;code&gt;s&lt;/code&gt; by &lt;code&gt;count&lt;/code&gt; amount of &lt;code&gt;padding&lt;/code&gt;.</source>
          <target state="translated">들여 각 라인 &lt;code&gt;s&lt;/code&gt; 에 의해 &lt;code&gt;count&lt;/code&gt; 의 양 &lt;code&gt;padding&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="f2171e3002af9c53c4ea2469894d127d907cca3e" translate="yes" xml:space="preserve">
          <source>Index (idx) file format</source>
          <target state="translated">색인 (IDX) 파일 형식</target>
        </trans-unit>
        <trans-unit id="7086b5dce7145d779101ccd8901d9bbb698cae3d" translate="yes" xml:space="preserve">
          <source>Index files are line oriented and tab separated (newline and tab characters have to be escaped). Each line represents a record with at least two fields, but can have up to four (additional columns are ignored). The content of these columns is:</source>
          <target state="translated">색인 파일은 행 방향이며 탭으로 구분됩니다 (줄 바꾸기 및 탭 문자는 이스케이프되어야 함) 각 줄은 두 개 이상의 필드가있는 레코드를 나타내지 만 최대 4 개를 가질 수 있습니다 (추가 열은 무시 됨). 이 열의 내용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0c5d6204871842ba1c9f7cd8b0f7f94f787509f2" translate="yes" xml:space="preserve">
          <source>Index switch</source>
          <target state="translated">인덱스 스위치</target>
        </trans-unit>
        <trans-unit id="7d2d080b9c23631882a620ee4cef31b37b3e5e98" translate="yes" xml:space="preserve">
          <source>Index the collection with the proc provided.</source>
          <target state="translated">제공된 proc로 컬렉션을 인덱싱하십시오.</target>
        </trans-unit>
        <trans-unit id="9b0343473193cfc7e99b7802a4d65dded5509d30" translate="yes" xml:space="preserve">
          <source>Indicates that a leading space should be used on positive numbers.</source>
          <target state="translated">양수에 선행 공백을 사용해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2c549fa4a0ba269a959c6226777ab5a0b50f1df5" translate="yes" xml:space="preserve">
          <source>Indicates that a sign should be used for both positive as well as negative numbers.</source>
          <target state="translated">양수와 음수 모두에 부호를 사용해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a0c8cf09bdbe9d14558c3f28be789e07866609de" translate="yes" xml:space="preserve">
          <source>Indicates that a sign should be used only for negative numbers (this is the default behavior).</source>
          <target state="translated">부호가 음수에만 사용해야 함을 나타냅니다 (기본 동작).</target>
        </trans-unit>
        <trans-unit id="b4450615d8ce467d37556973b1b5a5091600c498" translate="yes" xml:space="preserve">
          <source>Individual loggers have a &lt;code&gt;levelThreshold&lt;/code&gt; field that filters out any messages with a level lower than the threshold. There is also a global filter that applies to all log messages, and it can be changed using the &lt;a href=&quot;#setLogFilter,Level&quot;&gt;setLogFilter proc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d4b08a1673b232bf3018ee2f9d0a8e9fa2025c" translate="yes" xml:space="preserve">
          <source>Inexact: operation produces a result that cannot be represented with infinite precision, for example, 2.0 / 3.0, log(1.1) and 0.1 in input.</source>
          <target state="translated">부정확 한 : 연산은 2.0 / 3.0, log (1.1) 및 0.1 입력과 같이 무한 정밀도로 표현할 수없는 결과를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="63d5b176942ca6a8ddb9add205f21b0d98945888" translate="yes" xml:space="preserve">
          <source>Infix operator call</source>
          <target state="translated">중위 연산자 호출</target>
        </trans-unit>
        <trans-unit id="05b2f048278e50727268e29b1c4d85eb17ee93d4" translate="yes" xml:space="preserve">
          <source>Info messages are typically generated during the normal operation of an application and are of no particular importance. It can be useful to aggregate these messages for later analysis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42473cc429103c815ee41c99ce227e6800bc064" translate="yes" xml:space="preserve">
          <source>Informally:</source>
          <target state="translated">Informally:</target>
        </trans-unit>
        <trans-unit id="eb712e4e263d88043891e59382c4f31c8c4157de" translate="yes" xml:space="preserve">
          <source>Inheritance is done with the &lt;code&gt;object of&lt;/code&gt; syntax. Multiple inheritance is currently not supported. If an object type has no suitable ancestor, &lt;code&gt;RootObj&lt;/code&gt; can be used as its ancestor, but this is only a convention. Objects that have no ancestor are implicitly &lt;code&gt;final&lt;/code&gt;. You can use the &lt;code&gt;inheritable&lt;/code&gt; pragma to introduce new object roots apart from &lt;code&gt;system.RootObj&lt;/code&gt;. (This is used in the GTK wrapper for instance.)</source>
          <target state="translated">상속은 구문 &lt;code&gt;object of&lt;/code&gt; 수행됩니다 . 다중 상속은 현재 지원되지 않습니다. 객체 유형에 적합한 조상이없는 경우 &lt;code&gt;RootObj&lt;/code&gt; 를 조상 으로 사용할 수 있지만 이는 단지 규칙입니다. 조상이없는 객체는 암시 적으로 &lt;code&gt;final&lt;/code&gt; 입니다. &lt;code&gt;inheritable&lt;/code&gt; pragma를 사용하여 &lt;code&gt;system.RootObj&lt;/code&gt; 와는 별도로 새 객체 루트를 도입 할 수 있습니다 . (이것은 예를 들어 GTK 래퍼에서 사용됩니다.)</target>
        </trans-unit>
        <trans-unit id="862fae5c64569c192f0058ccd3bbb5d19a019f65" translate="yes" xml:space="preserve">
          <source>Inhibit dynamic method resolution via procCall</source>
          <target state="translated">procCall을 통한 동적 분석 방법 금지</target>
        </trans-unit>
        <trans-unit id="0c5cca889a407cf644e8302dd1aa6f401bc2f924" translate="yes" xml:space="preserve">
          <source>IniExt:</source>
          <target state="translated">IniExt:</target>
        </trans-unit>
        <trans-unit id="5c4f1d9bb4b4c00271c428db76888f539a5526ec" translate="yes" xml:space="preserve">
          <source>Init procs must not be &quot;forgotten&quot; to be called.</source>
          <target state="translated">init procs를 호출하기 위해 &quot;잊어 버려&quot;서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e0133811d52fc5e0ce7548998427d86c5ecbabc3" translate="yes" xml:space="preserve">
          <source>Initialises an AsyncSocket object. If a socket cannot be initialised EOS is raised.</source>
          <target state="translated">AsyncSocket 객체를 초기화합니다. 소켓을 초기화 할 수없는 경우 EOS가 증가합니다.</target>
        </trans-unit>
        <trans-unit id="0e8796999c73166ae179e51a98cc0d932f6227e2" translate="yes" xml:space="preserve">
          <source>Initialize SSL using OPENSSL_init_ssl for OpenSSL &amp;gt;= 1.1.0 otherwise SSL_library_init</source>
          <target state="translated">OpenSSL&amp;gt; = 1.1.0에 대해 OPENSSL_init_ssl을 사용하여 SSL을 초기화하십시오. 그렇지 않으면 SSL_library_init</target>
        </trans-unit>
        <trans-unit id="d49e0da069898af776915456532c7a6fc5a8c016" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;MD5Context&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881e0294c3d407bde48feb8c4affbeeef0f33574" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;RstGenerator&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RstGenerator&lt;/code&gt; 를 초기화합니다 .</target>
        </trans-unit>
        <trans-unit id="2f575d4a043b2d99856d0b2805228e53ea26fcec" translate="yes" xml:space="preserve">
          <source>Initializes a URI with &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;anchor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17cc26d8da8cbe959295951bb56fdabc70f6237" translate="yes" xml:space="preserve">
          <source>Initializes a URI with &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;anchor&lt;/code&gt; and &lt;code&gt;isIpv6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40151f2c3d201480764280228665dd4a245cb8ae" translate="yes" xml:space="preserve">
          <source>Initializes a URI.</source>
          <target state="translated">URI를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="405224e088cd409637c05da8068dcfb0b7324f95" translate="yes" xml:space="preserve">
          <source>Initializes a hash set.</source>
          <target state="translated">해시 세트를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="4b743382b1c978b8612236430f8cb0345cf1b494" translate="yes" xml:space="preserve">
          <source>Initializes a new &lt;a href=&quot;#Rand&quot;&gt;Rand&lt;/a&gt; state using the given seed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84a4c040ee7b5e4ea1966bc93e94a695c273213" translate="yes" xml:space="preserve">
          <source>Initializes an ordered hash set.</source>
          <target state="translated">정렬 된 해시 세트를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="4d06419a4df7ca2600b2a7c6788a96d45e54a25d" translate="yes" xml:space="preserve">
          <source>Initializes the command line parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580bcf0259f858c591c1bdfb9fe2dbcc9bf29a6d" translate="yes" xml:space="preserve">
          <source>Initializes the default random number generator with a specific seed.</source>
          <target state="translated">특정 시드로 기본 난수 생성기를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="761f6faceaafcbd78029cf099931070de60247f8" translate="yes" xml:space="preserve">
          <source>Initializes the default random number generator with a value based on the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee58e90d6e31827b75a3ffcd8b2dde11686ac85" translate="yes" xml:space="preserve">
          <source>Initializes the default random number generator with the given seed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacee3e957999d4c882a7ef1c7b8e6793e30746e" translate="yes" xml:space="preserve">
          <source>Initializes the given condition variable.</source>
          <target state="translated">주어진 조건 변수를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="0f32d11dbd1ff544f08160af91e946d34a75cd48" translate="yes" xml:space="preserve">
          <source>Initializes the given lock.</source>
          <target state="translated">주어진 잠금을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="cc111a9c008069088c4cdf320f7b2e7926c4495b" translate="yes" xml:space="preserve">
          <source>Initializes the parser with an input stream. &lt;code&gt;Filename&lt;/code&gt; is only used for nice error messages. The parser's behaviour can be controlled by the diverse optional parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ede6304ec6e7bf4a6a2e3d80c6b1eeb81cc73f8" translate="yes" xml:space="preserve">
          <source>Initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. Note: Does not work for NimScript.</source>
          <target state="translated">&quot;임의의&quot;숫자 (예 : 틱 카운트)로 난수 생성기를 초기화합니다. 참고 : NimScript에서는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7656a50f2e0ac5db2e06ce5648c4594fc345f831" translate="yes" xml:space="preserve">
          <source>InjectStmt pragma</source>
          <target state="translated">InstStmt pragma</target>
        </trans-unit>
        <trans-unit id="010422bde6d8ffc4583d3c7153dbd2e08b3f0abb" translate="yes" xml:space="preserve">
          <source>Injects destructor calls into Nim code as well as an optimizer that optimizes copies to moves. This is implemented as an AST to AST transformation so that every backend benefits from it.See doc/destructors.rst for a spec of the implemented rewrite rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058c8664dcced6f11d423c0a1ff1cbd60786d25f" translate="yes" xml:space="preserve">
          <source>Inline iterators are second class citizens; They can be passed as parameters only to other inlining code facilities like templates, macros, and other inline iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee7de66fcff05572c93c829536da75cc7683b42" translate="yes" xml:space="preserve">
          <source>Input flags.</source>
          <target state="translated">입력 플래그.</target>
        </trans-unit>
        <trans-unit id="cdebe16ef167d59bd3f584afbff561d99000e527" translate="yes" xml:space="preserve">
          <source>Insert an item at a specific position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e7a843757f5c65a19602705725407af81d0b8c" translate="yes" xml:space="preserve">
          <source>Insert node &lt;code&gt;b&lt;/code&gt; into node &lt;code&gt;a&lt;/code&gt; at &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e1ac91d7701d8e495d0f11ba5f1b00fdf6ed7f" translate="yes" xml:space="preserve">
          <source>Insert node B into A at pos</source>
          <target state="translated">pos에서 노드 B를 A에 삽입</target>
        </trans-unit>
        <trans-unit id="2db3b3fd15b7bb4b34dad30c689dad9d16b24896" translate="yes" xml:space="preserve">
          <source>Inserting data</source>
          <target state="translated">데이터 삽입</target>
        </trans-unit>
        <trans-unit id="db635bc37b2480d99f37c4d48dcb356115926122" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;item&lt;/code&gt; into &lt;code&gt;x&lt;/code&gt; at position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d566805bbc4b99025d37b9ff20615e3dd8fada71" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;key&lt;/code&gt; with value &lt;code&gt;val&lt;/code&gt; into &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3177be56509e1d6033678a8704a8a4b86722c344" translate="yes" xml:space="preserve">
          <source>Inserts a &lt;code&gt;(key, value)&lt;/code&gt; pair into &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d6f4f966ce59d1f90bfd57eeaa096530103fe1" translate="yes" xml:space="preserve">
          <source>Inserts items from &lt;code&gt;src&lt;/code&gt; into &lt;code&gt;dest&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt;. This modifies &lt;code&gt;dest&lt;/code&gt; itself, it does not return a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd923f823166b6196d06cbdd3db676002c784b17" translate="yes" xml:space="preserve">
          <source>Inserts items from &lt;em&gt;src&lt;/em&gt; into &lt;em&gt;dest&lt;/em&gt; at position &lt;em&gt;pos&lt;/em&gt;. This modifies &lt;em&gt;dest&lt;/em&gt; itself, it does not return a copy.</source>
          <target state="translated">&lt;em&gt;src&lt;/em&gt; 에서 &lt;em&gt;pos&lt;/em&gt; 위치의 &lt;em&gt;dest&lt;/em&gt; 로 항목을 삽입합니다 . 이것은 &lt;em&gt;dest&lt;/em&gt; 자체를 수정 하고 사본을 반환하지 않습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="912e1e977606972eddcd0f38962b41b38ce160ed" translate="yes" xml:space="preserve">
          <source>Inserts the child &lt;code&gt;son&lt;/code&gt; to a given position in &lt;code&gt;father&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04298198949aebc6d2892e5fc955264070b8ebb9" translate="yes" xml:space="preserve">
          <source>Inserts the node &lt;code&gt;newChild&lt;/code&gt; before the existing child node &lt;code&gt;refChild&lt;/code&gt;. If &lt;code&gt;refChild&lt;/code&gt; is nil, insert &lt;code&gt;newChild&lt;/code&gt; at the end of the list of children.</source>
          <target state="translated">노드 삽입 &lt;code&gt;newChild&lt;/code&gt; 로 기존의 아이 노드 전에 &lt;code&gt;refChild&lt;/code&gt; 의 . &lt;code&gt;refChild&lt;/code&gt; 가 nil 인 경우 하위 목록 끝에 &lt;code&gt;newChild&lt;/code&gt; 를 삽입 하십시오.</target>
        </trans-unit>
        <trans-unit id="0516b46b412793c8fb34cd47bc606c99d76f0ff2" translate="yes" xml:space="preserve">
          <source>Inserts the separator &lt;code&gt;sep&lt;/code&gt; after &lt;code&gt;digits&lt;/code&gt; characters (default: 3) from right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786ea42ccb1f6bb0efafd8f2b61725cd22b7b01c" translate="yes" xml:space="preserve">
          <source>Inserts the separator &lt;em&gt;sep&lt;/em&gt; after &lt;em&gt;digits&lt;/em&gt; digits from right to left.</source>
          <target state="translated">세퍼레이터 삽입 &lt;em&gt;9월&lt;/em&gt; 후 &lt;em&gt;자리&lt;/em&gt; 숫자가 오른쪽에서 왼쪽.</target>
        </trans-unit>
        <trans-unit id="873af15bd68c477178748ca072cfddf8b2be43af" translate="yes" xml:space="preserve">
          <source>Inside a character class, or if the decimal number is greater than 9 and there have not been that many capturing subpatterns, PCRE re-reads up to three octal digits following the backslash, and generates a single byte from the least significant 8 bits of the value. Any subsequent digits stand for themselves. For example:</source>
          <target state="translated">문자 클래스 내에서, 또는 10 진수가 9보다 크고 캡처하는 하위 패턴이 많지 않은 경우 PCRE는 백 슬래시 다음에 최대 3 개의 8 진수를 다시 읽고 최소 8 비트에서 단일 바이트를 생성합니다. 값. 모든 후속 숫자는 자체를 나타냅니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ca77b6367a8fe2f8a03241e2199780113a61f688" translate="yes" xml:space="preserve">
          <source>Inside asynchronous procedures &lt;code&gt;await&lt;/code&gt; can be used to call any procedures which return a &lt;code&gt;Future&lt;/code&gt;; this includes asynchronous procedures. When a procedure is &quot;awaited&quot;, the asynchronous procedure it is awaited in will suspend its execution until the awaited procedure's Future completes. At which point the asynchronous procedure will resume its execution. During the period when an asynchronous procedure is suspended other asynchronous procedures will be run by the dispatcher.</source>
          <target state="translated">내부 비동기 프로 시저 &lt;code&gt;await&lt;/code&gt; 를 사용하여 &lt;code&gt;Future&lt;/code&gt; 를 리턴하는 프로 시저를 호출 할 수 있습니다 . 여기에는 비동기 절차가 포함됩니다. 프로 시저가 &quot;대기&quot;된 경우, 대기중인 비동기 프로시 저는 대기중인 프로 시저의 Future가 완료 될 때까지 실행을 일시 중단합니다. 이 시점에서 비동기 프로시 저는 실행을 재개합니다. 비동기 프로 시저가 일시 중단 된 기간 동안 디스패처가 다른 비동기 프로 시저를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="dab2e32e580a82a5f4a666220278539f752ad943" translate="yes" xml:space="preserve">
          <source>InstantiationInfo:</source>
          <target state="translated">InstantiationInfo:</target>
        </trans-unit>
        <trans-unit id="58445a9dc8fa874d6c0999c2be877243221f8374" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;#@ @#&lt;/code&gt; Nim's pragma brackets &lt;code&gt;{. .}&lt;/code&gt; can also be used, but not nested since the &lt;code&gt;.}&lt;/code&gt; doesn't have to be on a line of its own:</source>
          <target state="translated">&lt;code&gt;#@ @#&lt;/code&gt; 대신 Nim의 pragma 괄호 &lt;code&gt;{. .}&lt;/code&gt; 도 사용할 수 있지만 &lt;code&gt;.}&lt;/code&gt; 이 자체 줄에있을 필요가 없으므로 중첩 되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ed085b50e598c9e9c3c998d8d02d824b13f51bfb" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;self&lt;/code&gt; any other identifier can be used too, but &lt;code&gt;{.this: self.}&lt;/code&gt; will become the default directive for the whole language eventually.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 대신 다른 식별자를 사용할 수도 있지만 &lt;code&gt;{.this: self.}&lt;/code&gt; 는 결국 전체 언어의 기본 지시문이됩니다.</target>
        </trans-unit>
        <trans-unit id="97edad635aadc93c5522c720f6f1a9a8a3a47123" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;code&gt;try finally&lt;/code&gt; statement a &lt;code&gt;defer&lt;/code&gt; statement can be used, which avoids lexical nesting and offers more flexibility in terms of scoping as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5150cf2c23ac3058436fce11d312cb4ab7dd9726" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;code&gt;try finally&lt;/code&gt; statement a &lt;code&gt;defer&lt;/code&gt; statement can be used.</source>
          <target state="translated">&lt;code&gt;try finally&lt;/code&gt; 문 대신 &lt;code&gt;defer&lt;/code&gt; 문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83385d6b178b8e73007de79314cf2093ccf1e0d7" translate="yes" xml:space="preserve">
          <source>Instead of changing the active object branch, replace the old object in memory with a new one completely:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03665382599317cc60a7efd5af43d25b36a35438" translate="yes" xml:space="preserve">
          <source>Instead of depending on the generation of the individual &lt;code&gt;.c&lt;/code&gt; files you can also ask the Nim compiler to generate a statically linked library:</source>
          <target state="translated">개별 &lt;code&gt;.c&lt;/code&gt; 파일 의 생성에 의존하지 않고 Nim 컴파일러에 정적으로 링크 된 라이브러리를 생성하도록 요청할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff60c5d0007a18ea981f49f0360da2385ccc4565" translate="yes" xml:space="preserve">
          <source>Instead of keeping 2 versions of &lt;code&gt;define foo&lt;/code&gt; around, one &lt;code&gt;#def foo&lt;/code&gt; for c2nim and one ordinary &lt;code&gt;#define foo&lt;/code&gt; for C/C++, it is often more convenient to tell c2nim that &lt;code&gt;foo&lt;/code&gt; is to be interpreted as a &lt;code&gt;#def&lt;/code&gt;. This is what the &lt;code&gt;#pp&lt;/code&gt; directive accomplishes:</source>
          <target state="translated">대신 2 개 버전 유지의 &lt;code&gt;define foo&lt;/code&gt; 주위를 한 &lt;code&gt;#def foo&lt;/code&gt; 는 c2nim에 대한 하나의 일반 &lt;code&gt;#define foo&lt;/code&gt; C / C ++에, 그 c2nim 얘기하는 것이 더 편리 &lt;code&gt;foo&lt;/code&gt; A와 해석되어야 &lt;code&gt;#def&lt;/code&gt; . 이것이 &lt;code&gt;#pp&lt;/code&gt; 지시어가 수행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c7301e8180a639fec5b0ce81d171622b155df52d" translate="yes" xml:space="preserve">
          <source>Instead of removing &lt;code&gt;EXTERN()&lt;/code&gt; from the input source file (which cannot be done reliably even with a regular expression!), one can tell c2nim that &lt;code&gt;EXTERN&lt;/code&gt; is a macro that should be expanded by c2nim too:</source>
          <target state="translated">입력 소스 파일에서 &lt;code&gt;EXTERN()&lt;/code&gt; 을 제거하는 대신 ( 정규 표현식으로도 안정적으로 수행 할 수 없습니다!) &lt;code&gt;EXTERN&lt;/code&gt; 이 c2nim으로 확장되어야하는 매크로임을 c2nim에 알릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a539176fcf1680650320e02900c39ec47d583b56" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;, consider using the &lt;code&gt;collect&lt;/code&gt; macro from the &lt;code&gt;sugar&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5f8d550289e63d7819c4b59f86d7e06014419a" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;mapIt&lt;/code&gt; and &lt;code&gt;filterIt&lt;/code&gt;, consider using the &lt;code&gt;collect&lt;/code&gt; macro from the &lt;code&gt;sugar&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">대신에:</target>
        </trans-unit>
        <trans-unit id="84737859654b67b2b9a33e5c2db83b51683c5344" translate="yes" xml:space="preserve">
          <source>Instead this code has to be used:</source>
          <target state="translated">대신이 코드를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="5ef6a32cea77e75a956950556c5ac8e265959f05" translate="yes" xml:space="preserve">
          <source>Instr:</source>
          <target state="translated">Instr:</target>
        </trans-unit>
        <trans-unit id="2dc4c8a3feb950a94447eba251c5e84430a628a3" translate="yes" xml:space="preserve">
          <source>InstrKind.def</source>
          <target state="translated">InstrKind.def</target>
        </trans-unit>
        <trans-unit id="8763087046735452b2c14e2aafb2670921b98e0f" translate="yes" xml:space="preserve">
          <source>InstrKind.fork</source>
          <target state="translated">InstrKind.fork</target>
        </trans-unit>
        <trans-unit id="242560a445a0c9fdf7c6160bb0674597540d9780" translate="yes" xml:space="preserve">
          <source>InstrKind.goto</source>
          <target state="translated">InstrKind.goto</target>
        </trans-unit>
        <trans-unit id="c5203d823143bb8dfcc0f679e0c4e986b88723a3" translate="yes" xml:space="preserve">
          <source>InstrKind.use</source>
          <target state="translated">InstrKind.use</target>
        </trans-unit>
        <trans-unit id="114df6d11290c5ca50b0fe2c3577945135617b77" translate="yes" xml:space="preserve">
          <source>InstrKind:</source>
          <target state="translated">InstrKind:</target>
        </trans-unit>
        <trans-unit id="ea6886040cf2ef0ad4f797b3dc6d67433a396e6b" translate="yes" xml:space="preserve">
          <source>InstrTargetKind.Full</source>
          <target state="translated">InstrTargetKind.Full</target>
        </trans-unit>
        <trans-unit id="52f4574ed6f6c4d02d0cb29f4036bcccef7c0d70" translate="yes" xml:space="preserve">
          <source>InstrTargetKind.None</source>
          <target state="translated">InstrTargetKind.None</target>
        </trans-unit>
        <trans-unit id="0fb51209edb27582e6cdbdee73245a7be79ec011" translate="yes" xml:space="preserve">
          <source>InstrTargetKind.Partial</source>
          <target state="translated">InstrTargetKind.Partial</target>
        </trans-unit>
        <trans-unit id="6a8f13993368bcf13b499ddb308191373de6ec73" translate="yes" xml:space="preserve">
          <source>InstrTargetKind:</source>
          <target state="translated">InstrTargetKind:</target>
        </trans-unit>
        <trans-unit id="b3d70d908a6362f23ac218f91376170c43e197b8" translate="yes" xml:space="preserve">
          <source>Int values of &lt;code&gt;x&lt;/code&gt; are simply converted to &lt;code&gt;float&lt;/code&gt; and the other push operation is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec54b2dcce7fd1b6d6a547c96c19205ad88a3d5d" translate="yes" xml:space="preserve">
          <source>Int values of &lt;em&gt;x&lt;/em&gt; are simply converted to &lt;code&gt;float&lt;/code&gt; and the other push operation is called.</source>
          <target state="translated">&lt;em&gt;x의&lt;/em&gt; int 값 은 단순히 &lt;code&gt;float&lt;/code&gt; 로 변환되고 다른 푸시 작업이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="deda97adb15cf9f410f1a62ae2f409969426ba15" translate="yes" xml:space="preserve">
          <source>Int128:</source>
          <target state="translated">Int128:</target>
        </trans-unit>
        <trans-unit id="b4aa8b9e0e7c816120ced52566c415046aa61c89" translate="yes" xml:space="preserve">
          <source>IntLike:</source>
          <target state="translated">IntLike:</target>
        </trans-unit>
        <trans-unit id="70d648e65d494f28a7240688bec60fdcef36d372" translate="yes" xml:space="preserve">
          <source>Integer division</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adc71fa12ee88a61833caad8062097e6410346c" translate="yes" xml:space="preserve">
          <source>Integer division for durations.</source>
          <target state="translated">지속 기간의 정수 나누기.</target>
        </trans-unit>
        <trans-unit id="a3af0144177408ffaf9ca66538422c9598f49360" translate="yes" xml:space="preserve">
          <source>Integer literals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967e169d056059f8ebefe4866be09c6d9d6123e0" translate="yes" xml:space="preserve">
          <source>Integer modulo (remainder)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724b5422dc05c791b8cf0befd732972c0409722e" translate="yes" xml:space="preserve">
          <source>Integers</source>
          <target state="translated">Integers</target>
        </trans-unit>
        <trans-unit id="584a126c172b3ef1ff0c69307f68a5ebdd0d1d09" translate="yes" xml:space="preserve">
          <source>Integers, bool, characters and enumeration types (and subranges of these types) belong to ordinal types. For reasons of simplicity of implementation the types &lt;code&gt;uint&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt; are not ordinal types.</source>
          <target state="translated">정수, 부울, 문자 및 열거 유형 (및 이러한 유형의 하위 범위)은 서수 유형에 속합니다. 구현이 간단하기 때문에 &lt;code&gt;uint&lt;/code&gt; 및 &lt;code&gt;uint64&lt;/code&gt; 유형은 서수 유형이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="93fb45ea1fb665d4009b40b926e9f2ec253fb203" translate="yes" xml:space="preserve">
          <source>Integers, bool, characters, and enumeration types (and subranges of these types) belong to ordinal types. For reasons of simplicity of implementation the types &lt;code&gt;uint&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt; are not ordinal types. (This will be changed in later versions of the language.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c35cf1c7e9e4b6aa47b681a51fc9aa23f2f3de" translate="yes" xml:space="preserve">
          <source>Integral conversion match: &lt;code&gt;a&lt;/code&gt; is convertible to &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is some integer or floating point type.</source>
          <target state="translated">완전한 변환 일치 : &lt;code&gt;a&lt;/code&gt; 는 &lt;code&gt;f&lt;/code&gt; 및 &lt;code&gt;f&lt;/code&gt; 로 변환 가능 하며 &lt;code&gt;a&lt;/code&gt; 는 정수 또는 부동 소수점 유형입니다.</target>
        </trans-unit>
        <trans-unit id="5392092f4852542bfd7080327e71b10258c71bbf" translate="yes" xml:space="preserve">
          <source>Integral conversion match: &lt;code&gt;a&lt;/code&gt; is convertible to &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is some integer or floating-point type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3208eaf79e1a99a103c6d62b538da30f3bfb1d" translate="yes" xml:space="preserve">
          <source>IntegralTypes:</source>
          <target state="translated">IntegralTypes:</target>
        </trans-unit>
        <trans-unit id="2cea7df8891dd1065020c3b86bf5bf912b6baca2" translate="yes" xml:space="preserve">
          <source>Interfacing</source>
          <target state="translated">Interfacing</target>
        </trans-unit>
        <trans-unit id="a954e42be7d65d0d68df6c2475675a3e2ab46fae" translate="yes" xml:space="preserve">
          <source>Internal documentation</source>
          <target state="translated">내부 문서</target>
        </trans-unit>
        <trans-unit id="6be940d65e52db18b5d8edc969f415c8720649fa" translate="yes" xml:space="preserve">
          <source>Internal type representation</source>
          <target state="translated">내부 유형 표현</target>
        </trans-unit>
        <trans-unit id="664fc2f86af06c6988fa72f769d3e17fcd2731e8" translate="yes" xml:space="preserve">
          <source>Internally, we want mustRehash(rightSize(x), x) == false.</source>
          <target state="translated">내부적으로 mustRehash (rightSize (x), x) == false를 원합니다.</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2938da18cdb579e62b1141f39929cc36fdc8e917" translate="yes" xml:space="preserve">
          <source>Internals of the Nim Compiler</source>
          <target state="translated">Nim 컴파일러의 내부</target>
        </trans-unit>
        <trans-unit id="efedd1f6d18388871beb5b8937b0af027d8bf044" translate="yes" xml:space="preserve">
          <source>Internet Protocols and Support</source>
          <target state="translated">인터넷 프로토콜 및 지원</target>
        </trans-unit>
        <trans-unit id="1e1f51443b0353cdbad01856560fdebd6b784636" translate="yes" xml:space="preserve">
          <source>Interpolates a format string with the values from &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77102105a7e484189908c6c3aaa8b4fde6d5bd4" translate="yes" xml:space="preserve">
          <source>Interpolates a format string with the values from &lt;em&gt;a&lt;/em&gt;.</source>
          <target state="translated">의 값으로 형식 문자열 보간 &lt;em&gt;을&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d0f596ba112a353008597117b57b10b067fc620b" translate="yes" xml:space="preserve">
          <source>Intersection</source>
          <target state="translated">Intersection</target>
        </trans-unit>
        <trans-unit id="d249f4886224f2e23bd35391438616d4b658f958" translate="yes" xml:space="preserve">
          <source>Interval &lt;code&gt;[a, b)&lt;/code&gt; (excluded upper bound)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6c6dbceccb29752be8da46aa57f7a3b135a866" translate="yes" xml:space="preserve">
          <source>Interval &lt;code&gt;[a, b]&lt;/code&gt; but &lt;code&gt;b&lt;/code&gt; as reversed index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051adb37ba103a949f0c96a4d71cb5c34d93f9e7" translate="yes" xml:space="preserve">
          <source>Into:</source>
          <target state="translated">Into:</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="1a2e25ef70924b9dc72d6e9cae42a42464d5c3ae" translate="yes" xml:space="preserve">
          <source>Invalid SQL encountered</source>
          <target state="translated">잘못된 SQL이 발생했습니다</target>
        </trans-unit>
        <trans-unit id="3579c51a9cfa004f6051766e66c67a34af9f5d6d" translate="yes" xml:space="preserve">
          <source>Invalid: operations with mathematically invalid operands, for example 0.0/0.0, sqrt(-1.0), and log(-37.8).</source>
          <target state="translated">유효하지 않음 : 수학적으로 유효하지 않은 피연산자가있는 조작 (예 : 0.0 / 0.0, sqrt (-1.0) 및 log (-37.8))</target>
        </trans-unit>
        <trans-unit id="da5d8297acd1c19db82eed4ee9e25718eaeaf12d" translate="yes" xml:space="preserve">
          <source>InvalidFileIdx:</source>
          <target state="translated">InvalidFileIdx:</target>
        </trans-unit>
        <trans-unit id="d94bd76dcefd3aaeaf07e88fd1e63fc2292a2aea" translate="yes" xml:space="preserve">
          <source>InvalidKey:</source>
          <target state="translated">InvalidKey:</target>
        </trans-unit>
        <trans-unit id="c333a9fb42f3b4165ac73a5c16dc07d0d71c7eef" translate="yes" xml:space="preserve">
          <source>Investigating pending futures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c13b2efd4e2d6dec9f73473d4c5e30f853cc74" translate="yes" xml:space="preserve">
          <source>Invocation context</source>
          <target state="translated">호출 컨텍스트</target>
        </trans-unit>
        <trans-unit id="45e47edcb41b8a29e3a098022eba6bd2db5b9ca3" translate="yes" xml:space="preserve">
          <source>Invocation of a multi-method cannot be ambiguous: collide 2 is preferred over collide 1 because the resolution works from left to right. In the example &lt;code&gt;Unit, Thing&lt;/code&gt; is preferred over &lt;code&gt;Thing, Unit&lt;/code&gt;.</source>
          <target state="translated">다중 메소드의 호출은 모호 할 수 없습니다. 충돌이 왼쪽에서 오른쪽으로 작동하기 때문에 충돌 1이 충돌 1보다 선호됩니다. 예제 &lt;code&gt;Unit, Thing&lt;/code&gt; 은 &lt;code&gt;Thing, Unit&lt;/code&gt; 보다 선호 됩니다.</target>
        </trans-unit>
        <trans-unit id="b0eda3fd7457c0fb4308b75d0bf6df3d4719aced" translate="yes" xml:space="preserve">
          <source>Is equivalent to:</source>
          <target state="translated">다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c8dde73a048232b1b6d8ccb412e7a1056c7aad76" translate="yes" xml:space="preserve">
          <source>Is it possible to create custom exceptions. A custom exception is a custom type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f35cc2588d6df7883512e310eaf3cfe55f22b5" translate="yes" xml:space="preserve">
          <source>Is operator</source>
          <target state="translated">운영자</target>
        </trans-unit>
        <trans-unit id="3bcc962b75eed7b2e391c690e8701aa2754af2d5" translate="yes" xml:space="preserve">
          <source>Is rewritten to:</source>
          <target state="translated">다음으로 다시 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="41e7fee403015340d1195de277c32fe1acf8a866" translate="yes" xml:space="preserve">
          <source>Is short for:</source>
          <target state="translated">약자 :</target>
        </trans-unit>
        <trans-unit id="a559a239bb82de0629bcb6a428aeb5fd89db0826" translate="yes" xml:space="preserve">
          <source>Is the same as:</source>
          <target state="translated">와 같다:</target>
        </trans-unit>
        <trans-unit id="0b7411e89c7c2bc27af208e897d4f8a85d2d7e2c" translate="yes" xml:space="preserve">
          <source>Is transformed into:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0bcdcfc983072ff2e5010acbd964825c34f849" translate="yes" xml:space="preserve">
          <source>Is translated into:</source>
          <target state="translated">로 번역됩니다 :</target>
        </trans-unit>
        <trans-unit id="6f20666fec7d3538d857abddfabb7eb0323d351c" translate="yes" xml:space="preserve">
          <source>Is translated to:</source>
          <target state="translated">번역 된 내용 :</target>
        </trans-unit>
        <trans-unit id="90d19d41b3a53b1379c3459c0faab9f64cca3759" translate="yes" xml:space="preserve">
          <source>It allows programmers to mostly use their own preferred spelling style, be it humpStyle or snake_style, and libraries written by different programmers cannot use incompatible conventions. A Nim-aware editor or IDE can show the identifiers as preferred. Another advantage is that it frees the programmer from remembering the exact spelling of an identifier. The exception with respect to the first letter allows common code like &lt;code&gt;var foo: Foo&lt;/code&gt; to be parsed unambiguously.</source>
          <target state="translated">그것은 프로그래머가 대부분 자신이 선호하는 철자 스타일을 사용하도록합니다. humpStyle 또는 snake_style이며 다른 프로그래머가 작성한 라이브러리는 호환되지 않는 규칙을 사용할 수 없습니다. 님 인식 편집기 또는 IDE는 식별자를 원하는대로 표시 할 수 있습니다. 또 다른 장점은 프로그래머가 식별자의 정확한 철자를 기억하지 못한다는 것입니다. 첫 글자에 대한 예외는 &lt;code&gt;var foo: Foo&lt;/code&gt; 와 같은 일반적인 코드를 명확하게 파싱 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="2fe9d58777a4819a056f680773675b458bc59f43" translate="yes" xml:space="preserve">
          <source>It also possible to pass arguments to a user definable matcher:</source>
          <target state="translated">또한 사용자 정의 가능 매처에 인수를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b2feef416362147669a39cf0c612de62bb2d19e" translate="yes" xml:space="preserve">
          <source>It also provides some fast iterators over lines in text files (or other &quot;line-like&quot;, variable length, delimited records).</source>
          <target state="translated">또한 텍스트 파일의 줄 (또는 다른 &quot;줄 모양&quot;, 가변 길이, 구분 된 레코드)에 대한 빠른 반복자를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="dff3ae584541038e537e5a342c1930160c45bf0a" translate="yes" xml:space="preserve">
          <source>It can also be used when defines are being referred to, as c2nim currently does not expand defines:</source>
          <target state="translated">c2nim이 현재 정의를 확장하지 않기 때문에 정의가 참조 될 때에도 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0075f000dd30ff460292c5c1bbbe6ad98332e6c" translate="yes" xml:space="preserve">
          <source>It can be used to parse a wild HTML document and output it as valid XHTML document (well, if you are lucky):</source>
          <target state="translated">와일드 HTML 문서를 구문 분석하고 유효한 XHTML 문서로 출력하는 데 사용할 수 있습니다 (운이 좋으면 잘).</target>
        </trans-unit>
        <trans-unit id="33c145d4c21074c897f61429ea0a33d2da04d093" translate="yes" xml:space="preserve">
          <source>It can improve performance when you know that there are no unique Nim references below a certain point on the stack. Make sure the size you specify is greater than the potential worst-case size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707904f9e1813dbe7e84c3547fac62855c92b5e5" translate="yes" xml:space="preserve">
          <source>It consists of a &lt;code&gt;value&lt;/code&gt; field, and a pointer to &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac3baaf5c589d2ead0f8cecc0ad8169cdeedc3d" translate="yes" xml:space="preserve">
          <source>It consists of a &lt;code&gt;value&lt;/code&gt; field, and pointers to &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc87ef7de9cb3163f7db0caa4f1d2ef73020407" translate="yes" xml:space="preserve">
          <source>It consists of two public fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e120b4c3399a4ece308ce4ebd238f057f7928f21" translate="yes" xml:space="preserve">
          <source>It does &lt;strong&gt;not&lt;/strong&gt; fail if the directory already exists because for most usages this does not indicate an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8b554d95560acb8bc18f45089e0469567bfcff" translate="yes" xml:space="preserve">
          <source>It does not check for overflow. If the value represented by the string is too big to fit into &lt;code&gt;number&lt;/code&gt;, only the value of last fitting characters will be stored in &lt;code&gt;number&lt;/code&gt; without producing an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589d528fa76550fcfe67d75a7cc3b724508c0925" translate="yes" xml:space="preserve">
          <source>It does not make sense to multiply a dollar with a dollar, but with a number without unit; and the same holds for division:</source>
          <target state="translated">달러에 달러를 곱하는 것이 아니라 단위가없는 숫자를 곱하는 것은 합리적이지 않습니다. 분할에 대해서도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="450c4c60926c55d1452c423fc98b5c5022e616af" translate="yes" xml:space="preserve">
          <source>It has been designed to be as simple as possible to avoid bloat. If this library does not fulfill your needs, write your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9187f5ee38c2d68fe98474af10e0521e2ff318b" translate="yes" xml:space="preserve">
          <source>It helps to think that the iterator actually returns a pair &lt;code&gt;(value, done)&lt;/code&gt; and &lt;code&gt;finished&lt;/code&gt; is used to access the hidden &lt;code&gt;done&lt;/code&gt; field.</source>
          <target state="translated">반복자가 실제로 한 쌍 &lt;code&gt;(value, done)&lt;/code&gt; 리턴 하고 &lt;code&gt;finished&lt;/code&gt; 는 숨겨진 &lt;code&gt;done&lt;/code&gt; 필드 에 액세스하는 데 사용 된다고 생각하는 데 도움 이됩니다 .</target>
        </trans-unit>
        <trans-unit id="b7934ea36bb3abaeb6de1ae68617ee4fa3e89f7c" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;not&lt;/strong&gt; safe to disable the garbage collector and enable it after the call from your background thread even if the code you are calling is short lived.</source>
          <target state="translated">이다 &lt;strong&gt;없는&lt;/strong&gt; 가비지 컬렉터를 사용하지 않도록하고 호출하는 코드가 수명이 짧은 경우에도 귀하의 백그라운드 스레드에서 호출 후 활성화하는 것이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="0ce32c42207b074e8614eb82e24a7a71033a751d" translate="yes" xml:space="preserve">
          <source>It is a compile time error if the implicitly introduced pointer could be used to access a location beyond its lifetime:</source>
          <target state="translated">내재적으로 도입 된 포인터를 사용하여 수명이 지난 위치에 액세스 할 수있는 경우 컴파일 시간 오류입니다.</target>
        </trans-unit>
        <trans-unit id="1b3adbb46e2bdc0ed4b61c5387fc2fb105c361aa" translate="yes" xml:space="preserve">
          <source>It is a cross-platform scripting language that can run where Nim can run, e.g. you can not run Batch or PowerShell on Linux or Mac, the Bash for Linux might not run on Mac, there are no unit tests tools for Batch, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7b976004a0abc29787324000db9052ab84bbf8" translate="yes" xml:space="preserve">
          <source>It is a static error if the implicitly introduced pointer could be used to access a location beyond its lifetime:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7834ad871782405d435b671bd87ad2f03c244a62" translate="yes" xml:space="preserve">
          <source>It is also important that the replay involves the &lt;code&gt;import&lt;/code&gt; statement so that dependencies are resolved properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654b26d139effb1815e88b12fee61a0a858572c0" translate="yes" xml:space="preserve">
          <source>It is also important that the replay involves the &lt;code&gt;import&lt;/code&gt; statement so that the dependencies are resolved properly.</source>
          <target state="translated">재생에 &lt;code&gt;import&lt;/code&gt; 문이 포함되어 종속성이 올바르게 해결되는 것도 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="53fd0344d13db43453267e290010e71aabfc6555" translate="yes" xml:space="preserve">
          <source>It is also not possible to use fully qualified identifiers with module symbol in method call syntax. The order in which the dot operator binds to symbols prohibits this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d729a9913be11aee103dc8aea1b73a4c4edcc41" translate="yes" xml:space="preserve">
          <source>It is an essential property of abstract types that they &lt;strong&gt;do not&lt;/strong&gt; imply a subtype relation between the abstract type and its base type. Explicit type conversions from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;SQL&lt;/code&gt; are allowed:</source>
          <target state="translated">추상 유형과 기본 유형 사이의 하위 유형 관계를 암시 &lt;strong&gt;하지 않는 것은&lt;/strong&gt; 추상 유형의 필수 특성입니다 . &lt;code&gt;string&lt;/code&gt; 에서 &lt;code&gt;SQL&lt;/code&gt; 로의 명시 적 유형 변환 이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="65b004ad9101d94b43979371288c09a01997643d" translate="yes" xml:space="preserve">
          <source>It is completely up to the application how to utilize each level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e31fcf4a46656a66279b459e1a0815babbcc226" translate="yes" xml:space="preserve">
          <source>It is important to note that reordering &lt;em&gt;only&lt;/em&gt; works for symbols at top level scope. Therefore, the following will &lt;em&gt;fail to compile:&lt;/em&gt;</source>
          <target state="translated">재정렬 은 최상위 수준의 심볼에 &lt;em&gt;대해서만&lt;/em&gt; 작동 한다는 점에 유의해야합니다 . 따라서 다음은 &lt;em&gt;컴파일에 실패합니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f982cc575838305262f35478aa99ac62135b34f0" translate="yes" xml:space="preserve">
          <source>It is mostly accurate to picture semantic analysis proceeding top to bottom and left to right in the source code, with compile-time code execution interleaved when necessary to compute values that are required for subsequent semantic analysis. We will see much later in this document that macro invocation not only requires this interleaving, but also creates a situation where semantic analysis does not entirely proceed top to bottom and left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccab016e9c85070b264d0771a05edb52b43822b" translate="yes" xml:space="preserve">
          <source>It is not checked that the &lt;code&gt;except&lt;/code&gt; list is really exported from the module. This feature allows to compile against an older version of the module that does not export these identifiers.</source>
          <target state="translated">&lt;code&gt;except&lt;/code&gt; 목록이 실제로 모듈에서 내보내 졌는지 확인되지 않았습니다 . 이 기능을 사용하면 이러한 식별자를 내 보내지 않는 이전 버전의 모듈에 대해 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="96d95c97b424d831a7891fe9bd020f37cafefea4" translate="yes" xml:space="preserve">
          <source>It is not checked that the &lt;code&gt;except&lt;/code&gt; list is really exported from the module. This feature allows us to compile against an older version of the module that does not export these identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcd3d044e40209d40cd612e95ebd82795dff46b" translate="yes" xml:space="preserve">
          <source>It is possible to define custom typed pragmas. Custom pragmas do not affect code generation directly, but their presence can be detected by macros. Custom pragmas are defined using templates annotated with pragma &lt;code&gt;pragma&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56aa33e889a1d3e8b0dbe2f53303f6d1de0ebdc" translate="yes" xml:space="preserve">
          <source>It is possible to define custom typed pragmas. Custom pragmas do not effect code generation directly, but their presence can be detected by macros. Custom pragmas are defined using templates annotated with pragma &lt;code&gt;pragma&lt;/code&gt;:</source>
          <target state="translated">사용자 정의 유형의 pragma를 정의 할 수 있습니다. 사용자 정의 pragma는 코드 생성에 직접 영향을 미치지 않지만 매크로로 해당 존재를 감지 할 수 있습니다. 사용자 정의 pragma는 pragma &lt;code&gt;pragma&lt;/code&gt; 로 주석이 달린 템플릿을 사용하여 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="e9ccb90931c9aae8ce40b72916123dc62b5d1dce" translate="yes" xml:space="preserve">
          <source>It is possible to raise/catch imported C++ exceptions. Types imported using &lt;code&gt;importcpp&lt;/code&gt; can be raised or caught. Exceptions are raised by value and caught by reference. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc420b00d95b0079b6bcd9cda3e4f93970825224" translate="yes" xml:space="preserve">
          <source>It is possible to raise/catch imported C++ exceptions. Types imported using &lt;em&gt;importcpp&lt;/em&gt; can be raised or caught. Exceptions are raised by value and caught by reference. Example:</source>
          <target state="translated">가져온 C ++ 예외를 발생 / 포착 할 수 있습니다. &lt;em&gt;importcpp&lt;/em&gt; 를 사용하여 가져온 유형을 올리거나 잡을 수 있습니다. 예외는 가치에 의해 제기되고 참조에 의해 포착됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="82b23252352db8b301d0df8ca78112f74b272448" translate="yes" xml:space="preserve">
          <source>It is quite common to have arrays start at zero, so there's a shortcut syntax to specify a range from zero to the specified index minus one:</source>
          <target state="translated">배열이 0에서 시작하는 것이 일반적이므로 0에서 지정된 인덱스에서 1을 뺀 범위를 지정하는 바로 가기 구문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="82118804703a69ba666b11e8579a1411bb333d2a" translate="yes" xml:space="preserve">
          <source>It may be surprising but the function as a whole can take longer than the specified timeout, only individual internal calls on the socket are affected. In practice this means that as long as the server is sending data an exception will not be raised, if however data does not reach the client within the specified timeout a &lt;code&gt;TimeoutError&lt;/code&gt; exception will be raised.</source>
          <target state="translated">놀랍지 만 전체 기능이 지정된 시간 초과보다 오래 걸릴 수 있으며 소켓의 개별 내부 호출에만 영향을 미칩니다. 실제로 이것은 서버가 데이터를 전송하는 한 예외가 발생하지 않지만 지정된 시간 제한 내에 데이터가 클라이언트에 도달하지 않으면 &lt;code&gt;TimeoutError&lt;/code&gt; 예외가 발생한다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="919d2993bd870949c788657a2aacbe74a9e6d3fc" translate="yes" xml:space="preserve">
          <source>It must be a call expression &lt;code&gt;f(a, ...)&lt;/code&gt;.</source>
          <target state="translated">호출 표현식 &lt;code&gt;f(a, ...)&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="b1bdeab513f38cc4e202661fc69c3b7e5aa7c684" translate="yes" xml:space="preserve">
          <source>It must contain &lt;code&gt;else&lt;/code&gt; branch.</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; 분기 를 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9f548d24fefd8a46690cd32590a6cce7dfd8f4a7" translate="yes" xml:space="preserve">
          <source>It must not contain &lt;code&gt;elif&lt;/code&gt; branches.</source>
          <target state="translated">&lt;code&gt;elif&lt;/code&gt; 분기를 포함해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="81fc55ee6fadfd8ef0741760bb3f9cca4c7346cd" translate="yes" xml:space="preserve">
          <source>It produces correct results even when the resulting angle is near pi/2 or -pi/2 (&lt;code&gt;x&lt;/code&gt; near 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a78364ce2930bd49b0b77d040013c455c807740" translate="yes" xml:space="preserve">
          <source>It provides a single proc that does Unicode to ASCII transliterations: It finds the sequence of ASCII characters that is the closest approximation to the Unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945f0d61d5e752a60e1efa28e451ae30a2da4995" translate="yes" xml:space="preserve">
          <source>It repeats semantic analysis of that region of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f2a311341a850342d9d8b0aa0af7a94a5ab291" translate="yes" xml:space="preserve">
          <source>It replaces the AST of the macro invocation with the AST returned by the macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89289cfedb95a2cf0dc479f4c4dd1b274fb7a914" translate="yes" xml:space="preserve">
          <source>It should be especially noted that the handling of days differs between &lt;code&gt;TimeInterval&lt;/code&gt; and &lt;code&gt;Duration&lt;/code&gt;. The &lt;code&gt;Duration&lt;/code&gt; type always treats a day as exactly 86400 seconds. For &lt;code&gt;TimeInterval&lt;/code&gt;, it's more complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef8e49e9dcbba00983188e55f9154c4477b0e2f" translate="yes" xml:space="preserve">
          <source>It works even for complex data graphs with cycles. This is a great debugging tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0657d7c3802eac9139afa1fdbbc00243500a126" translate="yes" xml:space="preserve">
          <source>It's a static error if the compiler cannot perform the evaluation at compile time.</source>
          <target state="translated">컴파일러가 컴파일 타임에 평가를 수행 할 수없는 경우 정적 오류입니다.</target>
        </trans-unit>
        <trans-unit id="b08a29bb41e597ad7a05123c2e5513c91c059874" translate="yes" xml:space="preserve">
          <source>It's also possible to use &lt;code&gt;from module import nil&lt;/code&gt; if one wants to import the module but wants to enforce fully qualified access to every symbol in &lt;code&gt;module&lt;/code&gt;.</source>
          <target state="translated">그것은 사용하는 것도 가능 &lt;code&gt;from module import nil&lt;/code&gt; 하나의 모듈을 수입하고 싶어하지만, 모든 기호에 대한 완전한 액세스 시행하고자하는 경우 &lt;code&gt;module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b99df4579542f338081d6530c4ef7ecb203070b" translate="yes" xml:space="preserve">
          <source>It's possible to get into a situation where an async proc, or more accurately a &lt;code&gt;Future[T]&lt;/code&gt; gets stuck and never completes. This can happen for various reasons and can cause serious memory leaks. When this occurs it's hard to identify the procedure that is stuck.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de95b4993b261b85e3332b1324f8a0290c259dec" translate="yes" xml:space="preserve">
          <source>It's recommended to use &lt;code&gt;addCallback&lt;/code&gt; or &lt;code&gt;then&lt;/code&gt; instead.</source>
          <target state="translated">사용하는 것이 좋습니다 &lt;code&gt;addCallback&lt;/code&gt; 하거나 &lt;code&gt;then&lt;/code&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="667a2f1f1daab6273f203ff594ed9af0d82540bc" translate="yes" xml:space="preserve">
          <source>Iterate over all &lt;span id=&quot;environments-variables_1&quot;&gt;environments variables&lt;/span&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60407ec90fd296604708d3171527c21d92f7253" translate="yes" xml:space="preserve">
          <source>Iterate over all the directories that match the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cadaa83ad0b6b331d838560da721266dc244b734" translate="yes" xml:space="preserve">
          <source>Iterate over all the directories that match the &lt;em&gt;pattern&lt;/em&gt;. On POSIX this uses the &lt;span id=&quot;glob_3&quot;&gt;glob&lt;/span&gt; call.</source>
          <target state="translated">&lt;em&gt;패턴&lt;/em&gt; 과 일치하는 모든 디렉토리를 반복하십시오 . POSIX에서는 &lt;span id=&quot;glob_3&quot;&gt;glob&lt;/span&gt; 호출을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="914c3605354b926822b16f09f305060522cce735" translate="yes" xml:space="preserve">
          <source>Iterate over all the files and directories that match the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75e34b52a6961303566d6b4dd5b3c4b21d77274" translate="yes" xml:space="preserve">
          <source>Iterate over all the files and directories that match the &lt;em&gt;pattern&lt;/em&gt;. On POSIX this uses the &lt;span id=&quot;glob_1&quot;&gt;glob&lt;/span&gt; call.</source>
          <target state="translated">&lt;em&gt;패턴&lt;/em&gt; 과 일치하는 모든 파일 및 디렉토리를 반복하십시오 . POSIX에서는 &lt;span id=&quot;glob_1&quot;&gt;glob&lt;/span&gt; 호출을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="0079b8089cf8ad91d1997b6ed43a718e45fa0a7d" translate="yes" xml:space="preserve">
          <source>Iterate over all the files that match the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d643234b1583c1062d05608e19e2329372f5e89" translate="yes" xml:space="preserve">
          <source>Iterate over all the files that match the &lt;em&gt;pattern&lt;/em&gt;. On POSIX this uses the &lt;span id=&quot;glob_2&quot;&gt;glob&lt;/span&gt; call.</source>
          <target state="translated">&lt;em&gt;패턴&lt;/em&gt; 과 일치하는 모든 파일을 반복합니다 . POSIX에서는 &lt;span id=&quot;glob_2&quot;&gt;glob&lt;/span&gt; 호출을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="ff0603a15cffd61b64440d2652fdf8f9ec28297d" translate="yes" xml:space="preserve">
          <source>Iterate over any line in the file &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584cc308ff50e7947ff5a4e8292a45088ef391f4" translate="yes" xml:space="preserve">
          <source>Iterate over any line in the file &lt;em&gt;f&lt;/em&gt;.</source>
          <target state="translated">파일의 모든 줄을 반복합니다 . &lt;em&gt;f&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="8a01cd13803942f49dce1ee40b0598bbd70c4bd7" translate="yes" xml:space="preserve">
          <source>Iterates over [optional &lt;code&gt;eat&lt;/code&gt;] &lt;code&gt;delim&lt;/code&gt;-delimited slices in MemFile &lt;code&gt;mfile&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1c0deeb78059911d4801816fdd1f4f108e438a" translate="yes" xml:space="preserve">
          <source>Iterates over [optional &lt;em&gt;eat&lt;/em&gt;] &lt;em&gt;delim&lt;/em&gt;-delimited slices in MemFile &lt;em&gt;mfile&lt;/em&gt;.</source>
          <target state="translated">MemFile &lt;em&gt;mfile&lt;/em&gt; 에서 [선택적인 &lt;em&gt;eat&lt;/em&gt; ] &lt;em&gt;delim-&lt;/em&gt; delimited 슬라이스를 반복 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b0876611122b040b94724049ac0553752d5368d" translate="yes" xml:space="preserve">
          <source>Iterates over all direct children of &lt;code&gt;n&lt;/code&gt; so that they can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b351692568b5c50e1ba118087404b3736e9960b0" translate="yes" xml:space="preserve">
          <source>Iterates over all direct children of &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0098b53a51bac069a9bf317f592bfa1e82116299" translate="yes" xml:space="preserve">
          <source>Iterates over all the children of &lt;code&gt;n&lt;/code&gt; returning those matching &lt;code&gt;tag&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d58a07e8a9d8fd6b99e5571402712d73dfd13e" translate="yes" xml:space="preserve">
          <source>Iterates over all the children of &lt;em&gt;n&lt;/em&gt; returning those matching &lt;em&gt;tag&lt;/em&gt;.</source>
          <target state="translated">일치하는 &lt;em&gt;태그를&lt;/em&gt; 반환하는 &lt;em&gt;n의&lt;/em&gt; 모든 자식을 반복 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2031131f2639740a8fdd82e0e0986820c732b7da" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;) in insertion order. The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed89886fdc220839aef034465d853b4c3533a981" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;). The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b2ca433f04b4a8a749aad232f6bac889a4d0a6" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; in insertion order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefeeac9d9ad63762da10f605f04ac738c74d2bf" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; in insertion order. The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee26bb77445513fd7072d8f60e7d5eaea99429b3" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebeb94fbcc905ad4f95c5549b3a126c2a0483ae" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt;. The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa054480cc6d98fcff0dbbede18842a1f5616743" translate="yes" xml:space="preserve">
          <source>Iterates over any character in the rope &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29e0d88daf7fc8f69fa95615ca4f89492721fbe" translate="yes" xml:space="preserve">
          <source>Iterates over any included element of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57adac8cbc9e3f8cf20fcc7cf47807c661d6dc7f" translate="yes" xml:space="preserve">
          <source>Iterates over any key in the table &lt;code&gt;t&lt;/code&gt; in insertion order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ca513c746e85ed7c0b22e03f73c175e6fa8d76" translate="yes" xml:space="preserve">
          <source>Iterates over any key in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb00385955208235ad936764ab5453d705c92f63" translate="yes" xml:space="preserve">
          <source>Iterates over any leaf string in the rope &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16a371e1564d7b54df08a22cb19e1363c91b569" translate="yes" xml:space="preserve">
          <source>Iterates over any line in the file named &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19228b3b231795b187dec3bdf8a6cb478e6ffc7" translate="yes" xml:space="preserve">
          <source>Iterates over any line in the file named &lt;em&gt;filename&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;filename&lt;/em&gt; 이라는 &lt;em&gt;파일&lt;/em&gt; 의 모든 줄을 반복합니다 .</target>
        </trans-unit>
        <trans-unit id="2b12a5a5ce65783cb293349d9bbe6ba1a48e0db0" translate="yes" xml:space="preserve">
          <source>Iterates over any rune of the string &lt;code&gt;s&lt;/code&gt; returning runes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6032d3dc2a33aebf8a12f451e770d7fcbfc3d5" translate="yes" xml:space="preserve">
          <source>Iterates over any rune of the string &lt;code&gt;s&lt;/code&gt; returning utf8 values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232f547ddc65be9624e107036fe1044b4d2a410d" translate="yes" xml:space="preserve">
          <source>Iterates over any unicode character of the string &lt;code&gt;s&lt;/code&gt; returning runes</source>
          <target state="translated">문자열을 반환하는 룬 &lt;code&gt;s&lt;/code&gt; 모든 유니 코드 문자를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="8bc06e9d0c093f624eaf1ffbfc94ebe52d5cb792" translate="yes" xml:space="preserve">
          <source>Iterates over any unicode character of the string &lt;code&gt;s&lt;/code&gt; returning utf8 values</source>
          <target state="translated">utf8 값을 리턴 하는 문자열 &lt;code&gt;s&lt;/code&gt; 모든 유니 코드 문자를 반복 합니다.</target>
        </trans-unit>
        <trans-unit id="8a968911898fab15c09b5cbef048f480c161ff3e" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;) in insertion order. The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9962dd5b950cd7a1aeec54f89ae3dc0e167ddd50" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;). The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cc07400698cf36bfdb4676dc30069c8b12a78c" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; in insertion order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd380b98c69751da5554a9f610c1576c3c5ecb4" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; in insertion order. The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d27d4bd380e435c26432e44231e870016163ff0" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; that belongs to the given &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b3e2ec828de0e05c3375daccbc62284231f825" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7c0f4de88c3ee24902c3c4f8a6435107fd325d" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt;. The values can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5ff3aa8356329e05bbd326e0aee80c747c6738" translate="yes" xml:space="preserve">
          <source>Iterates over each element of &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;items&lt;/code&gt; iterates only over the elements that are really in the set (and not over the ones the set is able to hold).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0baf741443c66b9e23ea1b0f1c51c04e55b4669b" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt; so that you can modify the yielded value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f774aa51ab2bfa088e66825c3ce64e1145c9d4b3" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d11dbcbe91cc1331818f452b217c0e46f21ab00" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt;. Yields &lt;code&gt;(index, a[index])&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a2b8124b042beac5f691248bcf8aee01b8f52f" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt;. Yields &lt;code&gt;(index, a[index])&lt;/code&gt; pairs. &lt;code&gt;a[index]&lt;/code&gt; can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16295892ede42eec1c24241f15531807cd815819" translate="yes" xml:space="preserve">
          <source>Iterates over elements of the set &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5033a4350eddd3f6b82045959920b532e0fb3d1" translate="yes" xml:space="preserve">
          <source>Iterates over every &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a3fe50138a2a75c5e3e00b3b587addb2301a7c" translate="yes" xml:space="preserve">
          <source>Iterates over every active field of the any &lt;code&gt;x&lt;/code&gt; that represents an object or a tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c3d5e552f1488c9c647cc8044a3fc4bb5296c1" translate="yes" xml:space="preserve">
          <source>Iterates over every element of &lt;code&gt;x&lt;/code&gt; that represents a Nim bitset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a00c8505d2a2f86de134948e537f412e7553b4" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80913db20f3d16add1b8eba3fd162d81757f3392" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;code&gt;x&lt;/code&gt; returning their name and value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23fffd92b3abfca44de9b0a12a23b2e648fb90cf" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0388ab64e5b2bc44c4842558d16b95e6873ca62a" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;em&gt;x&lt;/em&gt; returning their name and value.</source>
          <target state="translated">&lt;em&gt;x의&lt;/em&gt; 모든 필드를 반복 하여 이름과 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9bfd237b07cb45ecc2b51bca9ef184fb83390dda" translate="yes" xml:space="preserve">
          <source>Iterates over every key in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e6300c1169713ff3c5939859f36401dc5c4eee" translate="yes" xml:space="preserve">
          <source>Iterates over every line in the stream. The iteration is based on &lt;code&gt;readLine&lt;/code&gt;.</source>
          <target state="translated">스트림의 모든 라인을 반복합니다. 반복은 &lt;code&gt;readLine&lt;/code&gt; 을 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="808bfa0261846308bc30347f319972d5b75fe9e6" translate="yes" xml:space="preserve">
          <source>Iterates over every node of &lt;code&gt;x&lt;/code&gt;. Removing the current node from the list during traversal is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f732f894847f9d1c88576b32ad4e82ccac6243a" translate="yes" xml:space="preserve">
          <source>Iterates over every value in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df155bb93bf59cf25cb87e376867fed834ff8d4" translate="yes" xml:space="preserve">
          <source>Iterates over keys in the ordered set &lt;code&gt;s&lt;/code&gt; in insertion order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86ccc2321238c55eb2895e898e51e2cea46b931" translate="yes" xml:space="preserve">
          <source>Iterates over keys in the ordered set &lt;em&gt;s&lt;/em&gt; in insertion order.</source>
          <target state="translated">순서가 지정된 세트 &lt;em&gt;의&lt;/em&gt; 키 를 삽입 순서대로 반복합니다 .</target>
        </trans-unit>
        <trans-unit id="c71c7420dcf70891eaaf12e2494e2aabe991e2e1" translate="yes" xml:space="preserve">
          <source>Iterates over keys in the set &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">세트 &lt;em&gt;의&lt;/em&gt; 키를 반복합니다 .</target>
        </trans-unit>
        <trans-unit id="46bdee16e1d678daf2434ac56d4f6f640c4d7297" translate="yes" xml:space="preserve">
          <source>Iterates over the children of the NimNode &lt;code&gt;n&lt;/code&gt; and its indices.</source>
          <target state="translated">NimNode &lt;code&gt;n&lt;/code&gt; 의 하위 및 해당 인덱스를 반복합니다 .</target>
        </trans-unit>
        <trans-unit id="a478441af6bfca796118a06d6ecf3801a9262e8d" translate="yes" xml:space="preserve">
          <source>Iterates over the children of the NimNode &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">NimNode &lt;code&gt;n&lt;/code&gt; 의 자식을 반복합니다 .</target>
        </trans-unit>
        <trans-unit id="d403412658bffe2169d4774e13bc131bc0292b30" translate="yes" xml:space="preserve">
          <source>Iterates over the slice &lt;code&gt;s&lt;/code&gt;, yielding each value between &lt;code&gt;s.a&lt;/code&gt; and &lt;code&gt;s.b&lt;/code&gt; (inclusively).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa199f835d15a303761e576ec9f5d81d4227843" translate="yes" xml:space="preserve">
          <source>Iterates over the values of the enum &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d6a497d60ec37deabf746a6e154eac30378ead" translate="yes" xml:space="preserve">
          <source>Iterates through (position, value) tuples of OrderedSet &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc74fc7791c801dc16732940c9fdf8c66d0021c9" translate="yes" xml:space="preserve">
          <source>Iterates through a container &lt;code&gt;s&lt;/code&gt; and yields every item that fulfills the predicate &lt;code&gt;pred&lt;/code&gt; (function that returns a &lt;code&gt;bool&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019eedce602970f3a59ce2f86870397544031ca8" translate="yes" xml:space="preserve">
          <source>Iterates through a container and checks if every item fulfills the predicate.</source>
          <target state="translated">컨테이너를 반복하고 모든 항목이 술어를 충족하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="3501cb1c35511e4764121e28692134446b5075eb" translate="yes" xml:space="preserve">
          <source>Iterates through a container and checks if some item fulfills the predicate.</source>
          <target state="translated">컨테이너를 반복하고 일부 항목이 술어를 충족하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7fbdcafeaa504e0cbb5d1d512e8dfbaba8410003" translate="yes" xml:space="preserve">
          <source>Iterates through a container and yields every item that fulfills the predicate.</source>
          <target state="translated">컨테이너를 반복하고 술어를 충족시키는 모든 항목을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="81ad0b1b4463be831a5785f4d06c130b3622cb6b" translate="yes" xml:space="preserve">
          <source>Iterator declaration</source>
          <target state="translated">반복자 선언</target>
        </trans-unit>
        <trans-unit id="54e7ed86aa8c68a9c6fae60948c19de8462b9bb9" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JObject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4706edf4a5083b7e998fe39848d3df4e498b75d3" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JObject. Values can be modified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfa2bc8a9c8c3896d560c27f80be0217d6f76a5" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JObject.</source>
          <target state="translated">&lt;em&gt;node&lt;/em&gt; 의 자식 요소에 대한 반복자입니다 . &lt;em&gt;node&lt;/em&gt; 는 JObject 여야합니다.</target>
        </trans-unit>
        <trans-unit id="7b68d08a7df61a331ce7105b12ff381cd2542871" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JObject. Values can be modified</source>
          <target state="translated">&lt;em&gt;node&lt;/em&gt; 의 자식 요소에 대한 반복자입니다 . &lt;em&gt;node&lt;/em&gt; 는 JObject 여야합니다. 값을 수정할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="47f262c1e0553bea30a1a72b984f55700296bfbf" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662b2317cd15badf38601a7b7c209f80e1036a4b" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JArray. Items can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6229022bcfa1dd29b2c2a761afb0d2b506503b49" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JArray.</source>
          <target state="translated">&lt;em&gt;node&lt;/em&gt; 항목의 반복자입니다 . &lt;em&gt;node&lt;/em&gt; 는 JArray 여야합니다.</target>
        </trans-unit>
        <trans-unit id="937eeb4e7eb8e59ed90bf865be25f2439aa4af89" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JArray. Items can be modified.</source>
          <target state="translated">&lt;em&gt;node&lt;/em&gt; 항목의 반복자입니다 . &lt;em&gt;node&lt;/em&gt; 는 JArray 여야합니다. 항목을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="853abfbfe15cced2111de5887bb206586352e215" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a SList.</source>
          <target state="translated">&lt;em&gt;node&lt;/em&gt; 항목의 반복자입니다 . &lt;em&gt;node&lt;/em&gt; 는 SList 여야합니다.</target>
        </trans-unit>
        <trans-unit id="cba2124d3f6e176e90018e400cd94d03ff65e532" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a SList. Items can be modified.</source>
          <target state="translated">&lt;em&gt;node&lt;/em&gt; 항목의 반복자입니다 . &lt;em&gt;node&lt;/em&gt; 는 SList 여야합니다. 항목을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f612d386d0478703d4cf5f1170e33dd6d701b97" translate="yes" xml:space="preserve">
          <source>Iterator for the keys in &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JObject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909a5f0dfd8c3a4ef79cd1458e2b5fb136ad7fae" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iterators</target>
        </trans-unit>
        <trans-unit id="e0b6581a3426edca0a47a508b898e82d9d301321" translate="yes" xml:space="preserve">
          <source>Iterators and the for statement</source>
          <target state="translated">반복자와 for 문</target>
        </trans-unit>
        <trans-unit id="c425b7e3d2bb19788f1181a2d9b7a44e6225c0c2" translate="yes" xml:space="preserve">
          <source>Iterators can only be called from for loops.</source>
          <target state="translated">반복자는 for 루프에서만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df973b05a9a30c48e0cd32ea43a5a32471fddcf5" translate="yes" xml:space="preserve">
          <source>Iterators cannot be forward declared, because the compiler must be able to inline an iterator. (This restriction will be gone in a future version of the compiler.)</source>
          <target state="translated">컴파일러는 반복자를 인라인 할 수 있어야하기 때문에 반복자를 전달할 수 없습니다. (이 제한은 이후 버전의 컴파일러에서 사라질 것입니다.)</target>
        </trans-unit>
        <trans-unit id="5ab10982165c8e92be42e548c908af50f06450ed" translate="yes" xml:space="preserve">
          <source>Iterators cannot contain a &lt;code&gt;return&lt;/code&gt; statement (and procs cannot contain a &lt;code&gt;yield&lt;/code&gt; statement).</source>
          <target state="translated">반복자는 &lt;code&gt;return&lt;/code&gt; 문을 포함 할 수 없으며 procs는 &lt;code&gt;yield&lt;/code&gt; 문을 포함 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6bf87542270934bc52223ff3fd2180cee9913ce5" translate="yes" xml:space="preserve">
          <source>Iterators do not support recursion.</source>
          <target state="translated">반복자는 재귀를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f13b815d55263a0262e1d3f448ea1ef694f0c5ac" translate="yes" xml:space="preserve">
          <source>Iterators have no implicit &lt;code&gt;result&lt;/code&gt; variable.</source>
          <target state="translated">반복자는 암시 적 &lt;code&gt;result&lt;/code&gt; 변수 가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="876bf01455350b312419f0cdb54d8032bb9cad66" translate="yes" xml:space="preserve">
          <source>Iterators look very similar to procedures, but there are several important differences:</source>
          <target state="translated">반복자는 절차와 매우 유사하지만 몇 가지 중요한 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bc9cd0b4b1a838a8dbe53e1eea311fe67780b4c" translate="yes" xml:space="preserve">
          <source>Iterators that are neither marked &lt;code&gt;{.closure.}&lt;/code&gt; nor &lt;code&gt;{.inline.}&lt;/code&gt; explicitly default to being inline, but this may change in future versions of the implementation.</source>
          <target state="translated">&lt;code&gt;{.closure.}&lt;/code&gt; 또는 &lt;code&gt;{.inline.}&lt;/code&gt; 으로 표시되지 않은 반복기는 기본적으로 인라인으로 기본 설정되지만 이후 버전의 구현에서는 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa530e7c27dc03e2e278a61bf04effd2b9307526" translate="yes" xml:space="preserve">
          <source>Its dependent module stays the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38589c6c98e2050e493732fa1ecf1db5355eff6a" translate="yes" xml:space="preserve">
          <source>Its expression must always be &lt;code&gt;nimvm&lt;/code&gt;. More complex expressions are not allowed.</source>
          <target state="translated">표현식은 항상 &lt;code&gt;nimvm&lt;/code&gt; 이어야합니다 . 더 복잡한 표현은 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b91338c3d8b9342814d28dcc9efb9aa9cbed7f85" translate="yes" xml:space="preserve">
          <source>Its implementation is based on the &lt;code&gt;xoroshiro128+&lt;/code&gt; (xor/rotate/shift/rotate) library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c6069fc0e8fb3180386e713b619d38865f206f" translate="yes" xml:space="preserve">
          <source>JS backend uses native &lt;code&gt;String.prototype.endsWith&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13bd5598498d62123ce9d326f359037279386c8" translate="yes" xml:space="preserve">
          <source>JS backend uses native &lt;code&gt;String.prototype.startsWith&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="cc51bafafaa93b2fbf580ec2042f2d93d08d2a66" translate="yes" xml:space="preserve">
          <source>JSON node</source>
          <target state="translated">JSON 노드</target>
        </trans-unit>
        <trans-unit id="a9ebfd88be244d204864befb66a3f0873c5f9748" translate="yes" xml:space="preserve">
          <source>JSON often arrives into your program (via an API or a file) as a &lt;code&gt;string&lt;/code&gt;. The first step is to change it from its serialized form into a nested object structure called a &lt;code&gt;JsonNode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507a41b622278ac1a633cf2405939bf40e6c52f4" translate="yes" xml:space="preserve">
          <source>JSON representation is stored in the passed &lt;code&gt;result&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e429d7ec1e1bc197f5757d96b736f7f4406dc2" translate="yes" xml:space="preserve">
          <source>JSON representation is stored in the passed &lt;em&gt;result&lt;/em&gt;</source>
          <target state="translated">JSON 표현은 전달 된 &lt;em&gt;결과에&lt;/em&gt; 저장됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e07c7e84cb47307c315b0f9e4c311fa129b0c530" translate="yes" xml:space="preserve">
          <source>JSgenPass:</source>
          <target state="translated">JSgenPass:</target>
        </trans-unit>
        <trans-unit id="8c74f28d8bf8330962e596574f900ae47e150930" translate="yes" xml:space="preserve">
          <source>Java 11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6965b22569ccbc2d8dd3cf367d9c6b8f37411617" translate="yes" xml:space="preserve">
          <source>Java 6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbeb77483b6d1b3098e616abf683425d9a32b989" translate="yes" xml:space="preserve">
          <source>Java 8u31</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58199ede61c8be4b203d8081423f4280c50eb7c" translate="yes" xml:space="preserve">
          <source>JavaScript compatibility</source>
          <target state="translated">자바 스크립트 호환성</target>
        </trans-unit>
        <trans-unit id="f916a308bc581d1790072c2938487f3e908716e7" translate="yes" xml:space="preserve">
          <source>JavaScript invocation example</source>
          <target state="translated">자바 스크립트 호출 예제</target>
        </trans-unit>
        <trans-unit id="3dbc9feff2ae28b051f4a43d91678090731d3d80" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;delete&lt;/code&gt; operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e45a204a3fc487735ace8c2735a3a1d7329cfce" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;require&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763eb4bbded920e91a4a60898d473e2e59d035cd" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;em&gt;delete&lt;/em&gt; operator</source>
          <target state="translated">자바 스크립트의 &lt;em&gt;삭제&lt;/em&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="7069adda83e85fa6bdd1af127a53c1cd02199edc" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;em&gt;require&lt;/em&gt; function</source>
          <target state="translated">JavaScript &lt;em&gt;는&lt;/em&gt; 함수를 &lt;em&gt;요구한다&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e59bd4e62783475d358a55e576f9e1db556cc458" translate="yes" xml:space="preserve">
          <source>JavaScript's __dirname pseudo-variable</source>
          <target state="translated">JavaScript의 __dirname 의사 변수</target>
        </trans-unit>
        <trans-unit id="c05cec6255459be0665ced8c38873552b1af2710" translate="yes" xml:space="preserve">
          <source>JavaScript's __filename pseudo-variable</source>
          <target state="translated">JavaScript의 __filename 의사 변수</target>
        </trans-unit>
        <trans-unit id="48e39cbab3720cf60b021ee6573c7b065c55248f" translate="yes" xml:space="preserve">
          <source>JavaScript's arguments pseudo-variable</source>
          <target state="translated">유사 변수의 JavaScript 인수</target>
        </trans-unit>
        <trans-unit id="bcf9bbc0fa40a645579ccd598e9f2f8e3820fbe0" translate="yes" xml:space="preserve">
          <source>JavaScript's garbage collector is used for the &lt;a href=&quot;backends#backends-the-javascript-target&quot;&gt;JavaScript and NodeJS&lt;/a&gt; compilation targets. The &lt;a href=&quot;nims&quot;&gt;NimScript&lt;/a&gt; target uses the memory management strategy built into the Nim compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d029c76d92f4b9cfa620d278a0227c9c10f25f" translate="yes" xml:space="preserve">
          <source>JavaScript's null literal</source>
          <target state="translated">자바 스크립트의 null 리터럴</target>
        </trans-unit>
        <trans-unit id="cf269e0f71fff143464c4dce0ba8941aff38d4fb" translate="yes" xml:space="preserve">
          <source>JavaScript's undefined literal</source>
          <target state="translated">자바 스크립트의 정의되지 않은 리터럴</target>
        </trans-unit>
        <trans-unit id="dcbcd7e22ce06dbd66e5b01adffbd52ed0a91c58" translate="yes" xml:space="preserve">
          <source>Joins two URLs together, separating them with / if needed.</source>
          <target state="translated">두 개의 URL을 결합하여 필요한 경우 /로 구분합니다.</target>
        </trans-unit>
        <trans-unit id="6b949efa98af5de2c9a9e2aa57c0ac512664c7bb" translate="yes" xml:space="preserve">
          <source>Joins two directory names to one.</source>
          <target state="translated">두 개의 디렉토리 이름을 하나로 결합합니다.</target>
        </trans-unit>
        <trans-unit id="3f12549d3c3738ea2a2071dc765437338e1221f8" translate="yes" xml:space="preserve">
          <source>JsonExt:</source>
          <target state="translated">JsonExt:</target>
        </trans-unit>
        <trans-unit id="7d73f45c01acbd4c90cbafdfa4ca052a1a953948" translate="yes" xml:space="preserve">
          <source>Just like an &lt;code&gt;if expression&lt;/code&gt;, but corresponding to the when statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f916106b08687c9b3604d03769854685d4185a21" translate="yes" xml:space="preserve">
          <source>Just like an &lt;em&gt;if expression&lt;/em&gt;, but corresponding to the when statement.</source>
          <target state="translated">그냥 같은 &lt;em&gt;경우 표현&lt;/em&gt; 하지만, 때 문에 해당.</target>
        </trans-unit>
        <trans-unit id="1f5a23579b9dec30ee62832658d6b0b949930854" translate="yes" xml:space="preserve">
          <source>Just like in regular type classes, Nim discriminates between &lt;code&gt;bind once&lt;/code&gt; and &lt;code&gt;bind many&lt;/code&gt; types when matching the concept. You can add the &lt;code&gt;distinct&lt;/code&gt; modifier to any of the otherwise inferable types to get a type that will be matched without permanently inferring it. This may be useful when you need to match several procs accepting the same wide class of types:</source>
          <target state="translated">일반 유형 클래스와 마찬가지로 Nim은 &lt;code&gt;bind once&lt;/code&gt; 과 개념을 일치시킬 때 &lt;code&gt;bind many&lt;/code&gt; 유형을 바인드 하는 것을 구별 합니다. 다른 유추 할 수없는 유형에 &lt;code&gt;distinct&lt;/code&gt; 수정자를 추가하여 영구적으로 유추하지 않고 일치하는 유형을 얻을 수 있습니다. 이것은 같은 종류의 클래스를 수용하는 여러 프로세스를 일치시켜야 할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3706f82fc751aa40a365d4e0255b0c559571efe9" translate="yes" xml:space="preserve">
          <source>Just like in this example we pass the path to the &lt;code&gt;mylib.a&lt;/code&gt; library (and we could as well pass &lt;code&gt;logic.o&lt;/code&gt;) we could be passing switches to link any other static C library.</source>
          <target state="translated">이 예제에서와 같이 &lt;code&gt;mylib.a&lt;/code&gt; 라이브러리에 경로를 전달하고 (그리고 &lt;code&gt;logic.o&lt;/code&gt; 도 전달할 수 있음) 다른 정적 C 라이브러리를 연결하기 위해 스위치를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec69238a91ddb84ddd174a422a2bc6d89e341833" translate="yes" xml:space="preserve">
          <source>Just like strings, custom data types that are to be shared between Nim and the backend will need careful consideration of who controls who. If you want to hand a Nim reference to C code, you will need to use &lt;a href=&quot;system#GC_ref&quot;&gt;GC_ref&lt;/a&gt; to mark the reference as used, so it does not get freed. And for the C backend you will need to expose the &lt;a href=&quot;system#GC_unref&quot;&gt;GC_unref&lt;/a&gt; proc to clean up this memory when it is not required any more.</source>
          <target state="translated">문자열과 마찬가지로 Nim과 백엔드간에 공유 될 사용자 정의 데이터 유형은 누가 제어하는 ​​사람을 신중하게 고려해야합니다. C 코드에 Nim 참조를 전달하려면 &lt;a href=&quot;system#GC_ref&quot;&gt;GC_ref&lt;/a&gt; 를 사용 하여 참조를 사용 된 것으로 표시 해야 하므로 해제되지 않습니다. 그리고 C 백엔드의 경우 더 이상 필요하지 않은 경우이 메모리를 정리 하려면 &lt;a href=&quot;system#GC_unref&quot;&gt;GC_unref&lt;/a&gt; proc을 노출 해야합니다.</target>
        </trans-unit>
        <trans-unit id="c9aee943f9cc2105f55aea489ff0c1e2c7a6e5c1" translate="yes" xml:space="preserve">
          <source>Just like strings, custom data types that are to be shared between Nim and the backend will need careful consideration of who controls who. If you want to hand a Nim reference to C code, you will need to use &lt;a href=&quot;system#GC_ref,ref.T&quot;&gt;GC_ref&lt;/a&gt; to mark the reference as used, so it does not get freed. And for the C backend you will need to expose the &lt;a href=&quot;system#GC_unref,ref.T&quot;&gt;GC_unref&lt;/a&gt; proc to clean up this memory when it is not required anymore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1934a4d1d0bfda8c814a6f373c36bed11fcc1a9" translate="yes" xml:space="preserve">
          <source>Just like with regular pointers, covariance will be enabled only for immutable values:</source>
          <target state="translated">일반 포인터와 마찬가지로 공분산은 변경 불가능한 값에 대해서만 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="37ac036338fcd4bc1b7908c379b0d9fe8a481682" translate="yes" xml:space="preserve">
          <source>Kahan-Babu&amp;scaron;ka-Neumaier summation: O(1) error growth, at the expense of a considerable increase in computational expense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba04be8caff7a5b413c929b67abe644a93a8234c" translate="yes" xml:space="preserve">
          <source>Keeping track of memory</source>
          <target state="translated">메모리 추적</target>
        </trans-unit>
        <trans-unit id="7fb5895917c093e038c93fbe4b4e17303a14ceb0" translate="yes" xml:space="preserve">
          <source>Keeps the items in the passed sequence (must be declared as a &lt;code&gt;var&lt;/code&gt;) if they fulfilled the predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edce52f9a240fc90c7a478de6234e9c6a55da7ba" translate="yes" xml:space="preserve">
          <source>Keeps the items in the passed sequence &lt;code&gt;s&lt;/code&gt; if they fulfilled the predicate &lt;code&gt;pred&lt;/code&gt; (function that returns a &lt;code&gt;bool&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cc4a28dc3c7c50a7cedf645fccd862a77c3448" translate="yes" xml:space="preserve">
          <source>Keeps the items in the passed sequence if they fulfilled the predicate. Same as the &lt;code&gt;filter&lt;/code&gt; proc, but modifies the sequence directly.</source>
          <target state="translated">술어를 이행 한 경우 항목을 전달 된 순서로 유지합니다. &lt;code&gt;filter&lt;/code&gt; proc 와 동일 하지만 시퀀스를 직접 수정합니다.</target>
        </trans-unit>
        <trans-unit id="8f39d6224e40fbd1b1d7fab87eb418cba3da74d2" translate="yes" xml:space="preserve">
          <source>Kill the process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0b9402bb38009f565aff1f5e64a66bff29662b" translate="yes" xml:space="preserve">
          <source>Kill the process &lt;em&gt;p&lt;/em&gt;. On Posix OSes the procedure sends &lt;code&gt;SIGKILL&lt;/code&gt; to the process. On Windows &lt;code&gt;kill()&lt;/code&gt; is simply an alias for &lt;code&gt;terminate()&lt;/code&gt;.</source>
          <target state="translated">프로세스 &lt;em&gt;p를 종료하십시오&lt;/em&gt; . Posix OS에서 절차는 &lt;code&gt;SIGKILL&lt;/code&gt; 을 프로세스로 보냅니다 . Windows에서 &lt;code&gt;kill()&lt;/code&gt; 은 단순히 &lt;code&gt;terminate()&lt;/code&gt; 의 별명입니다 .</target>
        </trans-unit>
        <trans-unit id="a5a5fafee83492d8b176cbbdd5bb0860a6fdbf28" translate="yes" xml:space="preserve">
          <source>Known limitations:</source>
          <target state="translated">알려진 제한 사항 :</target>
        </trans-unit>
        <trans-unit id="ce958a6e3d5b3cfc3e9d4db4ee8f257214086a1c" translate="yes" xml:space="preserve">
          <source>LF:</source>
          <target state="translated">LF:</target>
        </trans-unit>
        <trans-unit id="71e0d9df3f621a55340e5e059ae130eb41a5eb1c" translate="yes" xml:space="preserve">
          <source>Lambda lifting is implemented as part of the &lt;code&gt;transf&lt;/code&gt; pass. The &lt;code&gt;transf&lt;/code&gt; pass generates code to setup the environment and to pass it around. However, this pass does not change the types! So we have some kind of mismatch here; on the one hand the proc expression becomes an explicit tuple, on the other hand the tyProc(ccClosure) type is not changed. For C code generation it's also important the hidden formal param is &lt;code&gt;void*&lt;/code&gt; and not something more specialized. However the more specialized env type needs to passed to the backend somehow. We deal with this by modifying &lt;code&gt;s.ast[paramPos]&lt;/code&gt; to contain the formal hidden parameter, but not &lt;code&gt;s.typ&lt;/code&gt;!</source>
          <target state="translated">람다 리프팅은 &lt;code&gt;transf&lt;/code&gt; 패스의 일부로 구현됩니다 . &lt;code&gt;transf&lt;/code&gt; 패스 설정에 환경을 코드를 생성하고 주위에 전달합니다. 그러나이 패스는 유형을 변경하지 않습니다! 여기에 어떤 종류의 불일치가 있습니다. 한편으로 proc 표현식은 명시적인 튜플이되고, 반면에 tyProc (ccClosure) 유형은 변경되지 않습니다. C 코드 생성의 경우 숨겨진 형식 매개 변수가 &lt;code&gt;void*&lt;/code&gt; 이며 더 특수한 것이 아니라는 것도 중요합니다 . 그러나 더 전문화 된 env 유형은 어떻게 든 백엔드로 전달되어야합니다. 우리는 수정하여이 처리 &lt;code&gt;s.ast[paramPos]&lt;/code&gt; 하지만, 공식 숨겨진 매개 변수를 포함하는 &lt;code&gt;s.typ&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="6f81dcaf384dc8f0c6782aafff539ab7cb63534e" translate="yes" xml:space="preserve">
          <source>Language Manual</source>
          <target state="translated">언어 매뉴얼</target>
        </trans-unit>
        <trans-unit id="f1a81de77c30016ff417d2dc8525d90f0c658140" translate="yes" xml:space="preserve">
          <source>Large example</source>
          <target state="translated">큰 예</target>
        </trans-unit>
        <trans-unit id="309493ddacc4fb8306467fc937e00c3cfc275435" translate="yes" xml:space="preserve">
          <source>Larger example</source>
          <target state="translated">더 큰 예</target>
        </trans-unit>
        <trans-unit id="79ede199ddb018f4a0e7a1ccc650c19d1bc3a472" translate="yes" xml:space="preserve">
          <source>LastCallConv:</source>
          <target state="translated">LastCallConv:</target>
        </trans-unit>
        <trans-unit id="84d8b12a98abf233ce61b735b7f623dfa748d624" translate="yes" xml:space="preserve">
          <source>Later versions of Nim can be more precise about the borrowing rule with a syntax like:</source>
          <target state="translated">최신 버전의 Nim은 다음과 같은 구문을 사용하여 차용 규칙에 대해 더 정확할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b84ad3bb11b5b72ae8064b2e03ac6593bfc14c79" translate="yes" xml:space="preserve">
          <source>Later versions of the language will weaken the requirements for forward declarations.</source>
          <target state="translated">이후 버전의 언어는 사전 선언 요구 사항을 약화시킵니다.</target>
        </trans-unit>
        <trans-unit id="3b5648bcecc29c90aab376416ff190adac016122" translate="yes" xml:space="preserve">
          <source>LayeredIdTable:</source>
          <target state="translated">LayeredIdTable:</target>
        </trans-unit>
        <trans-unit id="b6e6ff1bcd7ed1a5e8f4c37ec0106d2e2587cae3" translate="yes" xml:space="preserve">
          <source>Lazy type resolution for untyped</source>
          <target state="translated">형식화되지 않은 게으른 형식 해상도</target>
        </trans-unit>
        <trans-unit id="a4f7fe013eb75f3bd7abaac6e67f4376f5da9c25" translate="yes" xml:space="preserve">
          <source>Leaf nodes/Atoms</source>
          <target state="translated">리프 노드 / 원자</target>
        </trans-unit>
        <trans-unit id="97cc91dade46fa891f82c60b76ef4ad08ca98435" translate="yes" xml:space="preserve">
          <source>Leak</source>
          <target state="translated">Leak</target>
        </trans-unit>
        <trans-unit id="27d804f13dcec9190dd4f05d90510d5b42c28c5e" translate="yes" xml:space="preserve">
          <source>Leaked implementation detail. Do not use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e13a2a78be34be76ce3895da0a64f0d5f95cfd" translate="yes" xml:space="preserve">
          <source>Left-Aligns a string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;padding&lt;/code&gt;, so that it is of length &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6702a5291853b1308e7bd674d53f7e0975e6409" translate="yes" xml:space="preserve">
          <source>Left-Aligns a string &lt;em&gt;s&lt;/em&gt; with &lt;em&gt;padding&lt;/em&gt;, so that it is of length &lt;em&gt;count&lt;/em&gt;.</source>
          <target state="translated">왼쪽에 정렬은 문자열 &lt;em&gt;s의&lt;/em&gt; 와 &lt;em&gt;패딩&lt;/em&gt; 은 길이입니다 그래서, &lt;em&gt;수&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="c7898d0c2421b5bc106fa03940f474e92657c7e9" translate="yes" xml:space="preserve">
          <source>Left-aligns a unicode string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;padding&lt;/code&gt;, so that it has a rune-length of &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581f4b8c009369b50e3d9ba5325d87417e6534b8" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 16-bits value.</source>
          <target state="translated">16 비트 값의 왼쪽 회전 비트.</target>
        </trans-unit>
        <trans-unit id="d3409f80fea6038549fe1206956266f2e8a6fbb1" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 32-bits value.</source>
          <target state="translated">32 비트 값의 왼쪽 회전 비트.</target>
        </trans-unit>
        <trans-unit id="0aef55ce888f5b32fb20afe0a6d757edd1ce8821" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 64-bits value.</source>
          <target state="translated">64 비트 값의 왼쪽 회전 비트.</target>
        </trans-unit>
        <trans-unit id="73e3851ee7450c9ad9c84aa2c1e0ca99eeb3856b" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 8-bits value.</source>
          <target state="translated">8 비트 값의 왼쪽 회전 비트.</target>
        </trans-unit>
        <trans-unit id="3e63e88447c8379fbc91b3229c018b71ff7ef5dc" translate="yes" xml:space="preserve">
          <source>LegacyFeature.allowSemcheckedAstModification</source>
          <target state="translated">LegacyFeature.allowSemcheckedAstModification</target>
        </trans-unit>
        <trans-unit id="d34fb003360f79dc3503bb0f9c5e4cbd035488f5" translate="yes" xml:space="preserve">
          <source>LegacyFeature.checkUnsignedConversions</source>
          <target state="translated">LegacyFeature.checkUnsignedConversions</target>
        </trans-unit>
        <trans-unit id="9074155c1d8e374c60037b445d7d1d7c47f04a74" translate="yes" xml:space="preserve">
          <source>LegacyFeature:</source>
          <target state="translated">LegacyFeature:</target>
        </trans-unit>
        <trans-unit id="64abf2932d26373eca70a9286dff1a59ee0c9cf9" translate="yes" xml:space="preserve">
          <source>Length of ordinal slice. When x.b &amp;lt; x.a returns zero length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1324320b92b87a5d97e0037c25426434c04566e6" translate="yes" xml:space="preserve">
          <source>Length of the last rune in &lt;code&gt;s[0..last]&lt;/code&gt;. Returns the rune and its length in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbb21663c852013305570c8611a710d132a2bb7" translate="yes" xml:space="preserve">
          <source>Lent type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb0abcb9526a6a4b05702c87855a674f79ae905" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;A = range[a0..b0]&lt;/code&gt; be the argument's type, &lt;code&gt;F&lt;/code&gt; the formal parameter's type. Then an implicit conversion from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;F&lt;/code&gt; exists if &lt;code&gt;a0 &amp;gt;= low(F) and b0 &amp;lt;= high(F)&lt;/code&gt; and both &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are signed integers or if both are unsigned integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f0be1c4dec57baeea6969de04c107c4aa85088" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;T&lt;/code&gt;'s be &lt;code&gt;p&lt;/code&gt;'s return type. NRVO applies for &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;sizeof(T) &amp;gt;= N&lt;/code&gt; (where &lt;code&gt;N&lt;/code&gt; is implementation dependent), in other words, it applies for &quot;big&quot; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e660f3844a83ae0dd775b972d1900cf764019b" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;a0&lt;/code&gt;, &lt;code&gt;b0&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a45b6d50e16e5d655e988c74590e71119a79c0c" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;p&lt;/code&gt; the proc that is analysed for the correctness of the borrow operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8c25bb6b7fcd5f126b9a316a3e3683f181bc9f" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;source&lt;/code&gt; be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b05a7cc45a3cfbb0bd52f3553051c002b98ea9" translate="yes" xml:space="preserve">
          <source>Let section</source>
          <target state="translated">섹션을 보자</target>
        </trans-unit>
        <trans-unit id="62e49cdcca99feb8d9f8f37c1335ea60e6ab2bf6" translate="yes" xml:space="preserve">
          <source>Let statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa344992ab3c9cce0c812154c891a2082a0f43d5" translate="yes" xml:space="preserve">
          <source>Let us look at Nim's lexical elements in more detail: like other programming languages Nim consists of (string) literals, identifiers, keywords, comments, operators, and other punctuation marks.</source>
          <target state="translated">다른 프로그래밍 언어와 마찬가지로 Nim은 (문자열) 리터럴, 식별자, 키워드, 주석, 연산자 및 기타 문장 부호로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="b472892cf2e180fd60510de81af55b7e2fd6e956" translate="yes" xml:space="preserve">
          <source>Let's return to the simple counting example:</source>
          <target state="translated">간단한 카운팅 예제로 돌아가 봅시다 :</target>
        </trans-unit>
        <trans-unit id="3714e6d8f0e24eacd7b52251a4d193e3636ffbc7" translate="yes" xml:space="preserve">
          <source>Let's start with an example: a procedure that finds the index of a character in a string.</source>
          <target state="translated">문자열에서 문자의 인덱스를 찾는 프로 시저를 예로 들어 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="1be636c6149d23a6ac7030b7b471d95740b30580" translate="yes" xml:space="preserve">
          <source>Let's take a look at a procedure with a lot of interesting aspects to get a feel for how procedure calls are broken down.</source>
          <target state="translated">프로 시저 호출이 어떻게 분류되는지에 대한 느낌을 얻기 위해 많은 흥미로운 측면이있는 프로 시저를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="f090ebad1e9028f1098a5af4e5a797eb536bf181" translate="yes" xml:space="preserve">
          <source>Lets</source>
          <target state="translated">Lets</target>
        </trans-unit>
        <trans-unit id="235bf589f9ce53f4d181a8809fa8f58d997571a6" translate="yes" xml:space="preserve">
          <source>Letters:</source>
          <target state="translated">Letters:</target>
        </trans-unit>
        <trans-unit id="7c7f5d049fad2569721d446c4a811f9bd5da5393" translate="yes" xml:space="preserve">
          <source>Level</source>
          <target state="translated">Level</target>
        </trans-unit>
        <trans-unit id="faf588b9fbc0e6a941cbc2093766a1cce31a6349" translate="yes" xml:space="preserve">
          <source>Lexer:</source>
          <target state="translated">Lexer:</target>
        </trans-unit>
        <trans-unit id="0948974278e3b95cbbb246e9eab8bec6da78b254" translate="yes" xml:space="preserve">
          <source>Lexical Analysis</source>
          <target state="translated">어휘 분석</target>
        </trans-unit>
        <trans-unit id="484504bca1de9d78289cf5ed0ff59489797fb25f" translate="yes" xml:space="preserve">
          <source>Lexical elements</source>
          <target state="translated">어휘 요소</target>
        </trans-unit>
        <trans-unit id="fd70e598fcf927041c896f6dc4b87e917b2286bf" translate="yes" xml:space="preserve">
          <source>Library documentation</source>
          <target state="translated">도서관 문서</target>
        </trans-unit>
        <trans-unit id="850e532a72f1397362ed6c2e2c7768467301292f" translate="yes" xml:space="preserve">
          <source>Licence of the PCRE library</source>
          <target state="translated">PCRE 라이브러리의 라이센스</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="1195c13905482de38eb8554ac2ef8181a370976e" translate="yes" xml:space="preserve">
          <source>Lifetime-tracking hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7babbd6a13612f2b75fad2536bf20e3a90be6f3a" translate="yes" xml:space="preserve">
          <source>Lifting Procs</source>
          <target state="translated">리프팅 프로세스</target>
        </trans-unit>
        <trans-unit id="f5579b6b851ab8d35945d73b583d54e4dd141c96" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#extractFilename,string&quot;&gt;extractFilename proc&lt;/a&gt;, but ignores trailing dir separator; aka: &lt;span id=&quot;basename_1&quot;&gt;baseName&lt;/span&gt; in some other languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133720a88f4f0b2480df1a722653e8f80be2609a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;exportc&lt;/code&gt; or &lt;code&gt;importc&lt;/code&gt;, the &lt;code&gt;extern&lt;/code&gt; pragma affects name mangling. The string literal passed to &lt;code&gt;extern&lt;/code&gt; can be a format string:</source>
          <target state="translated">마찬가지로 &lt;code&gt;exportc&lt;/code&gt; 또는 &lt;code&gt;importc&lt;/code&gt; 의 &lt;code&gt;extern&lt;/code&gt; pragma는 이름 맹 글링에 영향을 미칩니다. &lt;code&gt;extern&lt;/code&gt; 에 전달 된 문자열 리터럴 은 형식 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a89c659521de912108568798c30a4d3b9390dd11" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;return&lt;/code&gt;, but with &lt;code&gt;nnkDiscardStmt&lt;/code&gt; kind.</source>
          <target state="translated">마찬가지로 &lt;code&gt;return&lt;/code&gt; 하지만,와 &lt;code&gt;nnkDiscardStmt&lt;/code&gt; 의 종류.</target>
        </trans-unit>
        <trans-unit id="70b76be5ae3e05bda0dbd20d90abcc0ff40f9de9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;return&lt;/code&gt;, but with &lt;code&gt;nnkYieldStmt&lt;/code&gt; kind.</source>
          <target state="translated">마찬가지로 &lt;code&gt;return&lt;/code&gt; 하지만,와 &lt;code&gt;nnkYieldStmt&lt;/code&gt; 의 종류.</target>
        </trans-unit>
        <trans-unit id="b4cf638ae85ebba4736e92856cb8c627ef275c96" translate="yes" xml:space="preserve">
          <source>Like a plain &lt;code&gt;import&lt;/code&gt; statement but with &lt;code&gt;nnkIncludeStmt&lt;/code&gt;.</source>
          <target state="translated">일반 &lt;code&gt;import&lt;/code&gt; 문과 비슷하지만 &lt;code&gt;nnkIncludeStmt&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="63a95e62d7c911dbac4f0639f9bb4cb823deae98" translate="yes" xml:space="preserve">
          <source>Like in many other programming languages, a &lt;code&gt;continue&lt;/code&gt; statement starts the next iteration immediately:</source>
          <target state="translated">다른 많은 프로그래밍 언어와 마찬가지로 &lt;code&gt;continue&lt;/code&gt; 문은 다음 반복을 즉시 시작합니다.</target>
        </trans-unit>
        <trans-unit id="35a4297befbf3cbceda9715d4684f55b9e927a9e" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;if&lt;/code&gt; statement, but the root has the kind &lt;code&gt;nnkWhenStmt&lt;/code&gt;.</source>
          <target state="translated">등의 &lt;code&gt;if&lt;/code&gt; 문하지만, 뿌리는 종류가 &lt;code&gt;nnkWhenStmt&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ab04aac5a7e1d598d2f186753e388a3731d77143" translate="yes" xml:space="preserve">
          <source>Like tuples, objects are a means to pack different values together in a structured way. However, objects provide many features that tuples do not: They provide inheritance and information hiding. Because objects encapsulate data, the &lt;code&gt;T()&lt;/code&gt; object constructor should only be used internally and the programmer should provide a proc to initialize the object (this is called a &lt;em&gt;constructor&lt;/em&gt;).</source>
          <target state="translated">튜플과 마찬가지로 객체는 서로 다른 값을 체계적으로 묶는 수단입니다. 그러나 객체는 튜플이 제공하지 않는 많은 기능을 제공합니다. 상속 및 정보 숨기기를 제공합니다. 객체는 데이터를 캡슐화하기 때문에 &lt;code&gt;T()&lt;/code&gt; 객체 생성자는 내부적으로 만 사용해야하며 프로그래머는 객체를 초기화하기위한 proc을 제공해야합니다 ( &lt;em&gt;생성자&lt;/em&gt; 라고 함 ).</target>
        </trans-unit>
        <trans-unit id="07bc01629a98c42a6a26d28d793349cd9ddcb413" translate="yes" xml:space="preserve">
          <source>Likewise &lt;code&gt;T = ref T&lt;/code&gt; is an invalid type.</source>
          <target state="translated">마찬가지로 &lt;code&gt;T = ref T&lt;/code&gt; 는 유효하지 않은 유형입니다.</target>
        </trans-unit>
        <trans-unit id="012148b3c7c09fe4183a821ac0dfc3df94a4644a" translate="yes" xml:space="preserve">
          <source>Likewise for generic matches the most specialized generic type (that still matches) is preferred:</source>
          <target state="translated">마찬가지로 일반 일치의 경우 가장 일치하는 일반 형식 (여전히 일치하는)이 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="9fe316ffb5c502363f1602369491e5771962db68" translate="yes" xml:space="preserve">
          <source>Likewise the following does not make sense as the name is &lt;code&gt;strutils&lt;/code&gt; already:</source>
          <target state="translated">마찬가지로 이름이 이미 &lt;code&gt;strutils&lt;/code&gt; 이므로 다음과 같은 의미가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="7fd25d16a58c7cb1517958ac6667ebb3c8dd76e0" translate="yes" xml:space="preserve">
          <source>Likewise, the following does not make sense as the name is &lt;code&gt;strutils&lt;/code&gt; already:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="79cb6c70879ccadb6a188effd65c3c269014aee8" translate="yes" xml:space="preserve">
          <source>Limitations of the method call syntax</source>
          <target state="translated">메소드 호출 구문의 한계</target>
        </trans-unit>
        <trans-unit id="7556b5753ea0ca8128d6f780d7fa036fc5b03486" translate="yes" xml:space="preserve">
          <source>Limitations/Bugs</source>
          <target state="translated">Limitations/Bugs</target>
        </trans-unit>
        <trans-unit id="23a0a4f9b2ce7f934e1a1f5332a6842a8be9b257" translate="yes" xml:space="preserve">
          <source>Limitations: If used for types that are imported from C or C++, sizeof should fallback to the &lt;code&gt;sizeof&lt;/code&gt; in the C compiler. The result isn't available for the Nim compiler and therefore can't be used inside of macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e5623d345118d762dbee1a0e1de32ed5723969" translate="yes" xml:space="preserve">
          <source>Limitations: If used within nim VM context &lt;code&gt;sizeof&lt;/code&gt; will only work for simple types.</source>
          <target state="translated">제한 사항 : nim VM context &lt;code&gt;sizeof&lt;/code&gt; 내에서 사용되는 경우 단순 유형에 대해서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="61beadd9dc48c52db141f5f8a21ecda841f7f1be" translate="yes" xml:space="preserve">
          <source>Limits the value &lt;code&gt;x&lt;/code&gt; within the interval [a, b].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c46adaafc40b789df2ecf20dd985f671faba467" translate="yes" xml:space="preserve">
          <source>Line exceeds the maximum length.</source>
          <target state="translated">선이 최대 길이를 초과합니다.</target>
        </trans-unit>
        <trans-unit id="223cc1feb0fa894d9ee9937b64e7b5859c71bc96" translate="yes" xml:space="preserve">
          <source>Line where the symbol is located in the file. Lines start to count at &lt;strong&gt;1&lt;/strong&gt;.</source>
          <target state="translated">파일에서 기호가있는 줄입니다. 줄은 &lt;strong&gt;1&lt;/strong&gt; 부터 계산을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="6975daf276430ee5b07e3f0247df76b80c98d27d" translate="yes" xml:space="preserve">
          <source>LineDir option</source>
          <target state="translated">LineDir 옵션</target>
        </trans-unit>
        <trans-unit id="268d8379173ac37e106048c36fff01d9c9b4910e" translate="yes" xml:space="preserve">
          <source>LineTooLong</source>
          <target state="translated">LineTooLong</target>
        </trans-unit>
        <trans-unit id="064387f46f31232c3427cd5f69fac7318fd9f966" translate="yes" xml:space="preserve">
          <source>LineTrace option</source>
          <target state="translated">LineTrace 옵션</target>
        </trans-unit>
        <trans-unit id="6cd840aca0be820c640e559e2530e3869e319939" translate="yes" xml:space="preserve">
          <source>Linear scan to find index of item &lt;code&gt;x&lt;/code&gt; or -1 if not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3679d78b17b02969cddb03c164e6e2d4dc3390" translate="yes" xml:space="preserve">
          <source>Lines should be no longer than 80 characters. Limiting the amount of information present on each line makes for more readable code - the reader has smaller chunks to process.</source>
          <target state="translated">줄은 80자를 넘지 않아야합니다. 각 줄에 존재하는 정보의 양을 제한하면 더 읽기 쉬운 코드가 만들어집니다. 독자는 처리 할 청크가 적습니다.</target>
        </trans-unit>
        <trans-unit id="b0876c4bcec0ae3cbb0d666f7829f1981ec34562" translate="yes" xml:space="preserve">
          <source>Lines starting with &lt;code&gt;&amp;gt;&lt;/code&gt; indicate a command to be sent to the compiler and the lines following a command include checks for expected or forbidden output (&lt;code&gt;!&lt;/code&gt; for forbidden).</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; 으로 시작 하는 행은 컴파일러로 전송 될 명령을 나타내며 명령 다음의 행에는 예상 또는 금지 된 출력에 대한 검사가 포함됩니다 ( &lt;code&gt;!&lt;/code&gt; for forbidden).</target>
        </trans-unit>
        <trans-unit id="d0517071aa376e797705058bbad4b658954b9930" translate="yes" xml:space="preserve">
          <source>Link</source>
          <target state="translated">Link</target>
        </trans-unit>
        <trans-unit id="1c3cb2684d19be6954dbbdc4f8e73df679e8e5d0" translate="yes" xml:space="preserve">
          <source>Link pragma</source>
          <target state="translated">링크 pragma</target>
        </trans-unit>
        <trans-unit id="9da74ab1a4b986bea87990a9a620e399e5636c76" translate="yes" xml:space="preserve">
          <source>Linking phase.</source>
          <target state="translated">연결 단계.</target>
        </trans-unit>
        <trans-unit id="8796e69abe940d498e760a9ceddadf988b762de2" translate="yes" xml:space="preserve">
          <source>List all the available NimScript tasks along with their docstrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29298813156f944560ccc7706430702f6f4ee582" translate="yes" xml:space="preserve">
          <source>List comprehension, returns a sequence. &lt;em&gt;comp&lt;/em&gt; is the actual list comprehension, for example &lt;code&gt;x | (x &amp;lt;- 1..10, x mod 2 == 0)&lt;/code&gt;. &lt;em&gt;typ&lt;/em&gt; is the type that will be stored inside the result seq.</source>
          <target state="translated">리스트 이해, 시퀀스를 반환합니다. &lt;em&gt;comp&lt;/em&gt; 는 실제 목록 이해입니다 (예 : &lt;code&gt;x | (x &amp;lt;- 1..10, x mod 2 == 0)&lt;/code&gt; . &lt;em&gt;typ&lt;/em&gt; 는 결과 seq에 저장 될 유형입니다.</target>
        </trans-unit>
        <trans-unit id="f8243f1d71ba9600f36e4fd5c7ce82f383a50045" translate="yes" xml:space="preserve">
          <source>List of hints</source>
          <target state="translated">힌트 목록</target>
        </trans-unit>
        <trans-unit id="5516fee04290d8fb240eb1035f9649b7af9c46bc" translate="yes" xml:space="preserve">
          <source>List of warnings</source>
          <target state="translated">경고 목록</target>
        </trans-unit>
        <trans-unit id="da7ca89372708dc7eaa34ef61b0cef5ae9fd5514" translate="yes" xml:space="preserve">
          <source>Listen to the given port and address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="104e72166267b2e14189f97dfc051685f78e0501" translate="yes" xml:space="preserve">
          <source>Lists all files in &lt;code&gt;dir&lt;/code&gt;. If &lt;code&gt;dir&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, uses the current working directory.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; 의 모든 파일을 나열합니다 . 경우 &lt;code&gt;dir&lt;/code&gt; 있다 &lt;code&gt;&quot;&quot;&lt;/code&gt; 현재 작업 디렉토리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1ab878ae07a9cde029575d5b2c8f1f1831aa46a7" translate="yes" xml:space="preserve">
          <source>Lists all files in &lt;code&gt;dir&lt;/code&gt;. If &lt;code&gt;dir&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, uses the current working directory. If &lt;code&gt;async&lt;/code&gt; is true, this function will return immediately and it will be your job to call asyncio's &lt;code&gt;poll&lt;/code&gt; to progress this operation.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; 의 모든 파일을 나열합니다 . 경우 &lt;code&gt;dir&lt;/code&gt; 있다 &lt;code&gt;&quot;&quot;&lt;/code&gt; 현재 작업 디렉토리를 사용합니다. 경우 &lt;code&gt;async&lt;/code&gt; 사실,이 기능은 즉시 반환하고는 전화 asyncio의에 당신의 일이 될 것입니다 &lt;code&gt;poll&lt;/code&gt; 이 작업을 진행합니다.</target>
        </trans-unit>
        <trans-unit id="eed8f42ab709c572e2f6ef3e5f70d4c90c506594" translate="yes" xml:space="preserve">
          <source>Lists all the files (non-recursively) in the directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83dc5d3731a7029453536affac1b0c536f706ef7" translate="yes" xml:space="preserve">
          <source>Lists all the subdirectories (non-recursively) in the directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236263cf5e9fb34d2dba2a5c051ef5dc5349c21d" translate="yes" xml:space="preserve">
          <source>Literal &lt;code&gt;&quot;&lt;/code&gt;, etc.</source>
          <target state="translated">리터럴 &lt;code&gt;&quot;&lt;/code&gt; 등</target>
        </trans-unit>
        <trans-unit id="b0e13df3237422a975bbec14b9ac839dee36c914" translate="yes" xml:space="preserve">
          <source>Literal match: &lt;code&gt;a&lt;/code&gt; is an integer literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a signed or unsigned integer type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range. Or: &lt;code&gt;a&lt;/code&gt; is a floating point literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a floating point type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range.</source>
          <target state="translated">리터럴 일치 : &lt;code&gt;a&lt;/code&gt; 는 값 &lt;code&gt;v&lt;/code&gt; 의 정수 리터럴 이고 &lt;code&gt;f&lt;/code&gt; 는 부호있는 또는 부호없는 정수 유형이고 &lt;code&gt;v&lt;/code&gt; 는 &lt;code&gt;f&lt;/code&gt; 의 범위에 있습니다. 또는 : &lt;code&gt;a&lt;/code&gt; 는 값 &lt;code&gt;v&lt;/code&gt; 의 부동 소수점 리터럴 이고 &lt;code&gt;f&lt;/code&gt; 는 부동 소수점 유형이며 &lt;code&gt;v&lt;/code&gt; 는 &lt;code&gt;f&lt;/code&gt; 의 범위에 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfadb3413d7c66d88632e42a7748ea222f6db9de" translate="yes" xml:space="preserve">
          <source>Literal match: &lt;code&gt;a&lt;/code&gt; is an integer literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a signed or unsigned integer type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range. Or: &lt;code&gt;a&lt;/code&gt; is a floating-point literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a floating-point type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9727a86e89a8cbd82800b60294dabca16499a86" translate="yes" xml:space="preserve">
          <source>Literals are bounds checked so that they fit the datatype. Non base-10 literals are used mainly for flags and bit pattern representations, therefore bounds checking is done on bit width, not value range. If the literal fits in the bit width of the datatype, it is accepted. Hence: 0b10000000'u8 == 0x80'u8 == 128, but, 0b10000000'i8 == 0x80'i8 == -1 instead of causing an overflow error.</source>
          <target state="translated">리터럴은 데이터 유형에 맞도록 바운드 검사됩니다. 기본이 아닌 10 리터럴은 주로 플래그 및 비트 패턴 표현에 사용되므로 범위 검사는 값 범위가 아닌 비트 폭에서 수행됩니다. 리터럴이 데이터 유형의 비트 너비에 맞는 경우 허용됩니다. 따라서 0b10000000'u8 == 0x80'u8 == 128이지만 오버플로 오류 대신 0b10000000'i8 == 0x80'i8 == -1입니다.</target>
        </trans-unit>
        <trans-unit id="a858a797df62e4ae00e3888485b1cc03a888e873" translate="yes" xml:space="preserve">
          <source>Literals are bounds checked so that they fit the datatype. Non-base-10 literals are used mainly for flags and bit pattern representations, therefore bounds checking is done on bit width, not value range. If the literal fits in the bit width of the datatype, it is accepted. Hence: 0b10000000'u8 == 0x80'u8 == 128, but, 0b10000000'i8 == 0x80'i8 == -1 instead of causing an overflow error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2a6eba528cf2e8ab33fb4a2bec0b163b834789" translate="yes" xml:space="preserve">
          <source>Literals are compile-time computable.</source>
          <target state="translated">리터럴은 컴파일 타임 계산 가능합니다.</target>
        </trans-unit>
        <trans-unit id="9afb797d92f75eb6b6866d7d92c9cfae10f0de20" translate="yes" xml:space="preserve">
          <source>Load all &lt;code&gt;{.dynlib.}&lt;/code&gt; libraries with the &lt;code&gt;RTLD_GLOBAL&lt;/code&gt; flag on Posix systems to resolve symbols in subsequently loaded libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de51bd63110c92754499c41c1b9fc0a1062026bc" translate="yes" xml:space="preserve">
          <source>Load the specified configuration file into a new Config instance.</source>
          <target state="translated">지정된 구성 파일을 새 구성 인스턴스로로드하십시오.</target>
        </trans-unit>
        <trans-unit id="cbdf201543588ac78ea72c7f1747c51bd06dafcf" translate="yes" xml:space="preserve">
          <source>Load the specified configuration from stream into a new Config instance. &lt;code&gt;filename&lt;/code&gt; parameter is only used for nicer error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9e1513745115068212c830b486292757f91900" translate="yes" xml:space="preserve">
          <source>Load the specified configuration from stream into a new Config instance. &lt;em&gt;filename&lt;/em&gt; parameter is only used for nicer error messages.</source>
          <target state="translated">지정된 구성을 스트림에서 새 구성 인스턴스로로드하십시오. &lt;em&gt;filename&lt;/em&gt; 매개 변수는 더 좋은 오류 메시지에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a139e4bbf5ca5504f1d17d1d98e927f4b59c9a47" translate="yes" xml:space="preserve">
          <source>Loading a simple C function</source>
          <target state="translated">간단한 C 함수로드</target>
        </trans-unit>
        <trans-unit id="85c9cf917135124aec604694dfda1bae2acf430a" translate="yes" xml:space="preserve">
          <source>Loads &lt;code&gt;data&lt;/code&gt; from the stream &lt;code&gt;s&lt;/code&gt;. Raises &lt;code&gt;IOError&lt;/code&gt; in case of an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d468cd435069219754afbbe7d097d97a919d76a4" translate="yes" xml:space="preserve">
          <source>Loads and parses HTML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are ignored.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 로 지정된 파일에서 HTML을로드하고 구문 분석 하고 &lt;code&gt;XmlNode&lt;/code&gt; 를 반환합니다 . 모든 구문 분석 오류는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="b860e17e53daf18f4b68114fe289f74c0083bbee" translate="yes" xml:space="preserve">
          <source>Loads and parses HTML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;code&gt;errors&lt;/code&gt; sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13175d1bc7af2e5d6755aeb721e7338069be90d" translate="yes" xml:space="preserve">
          <source>Loads and parses HTML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;em&gt;errors&lt;/em&gt; sequence.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 로 지정된 파일에서 HTML을로드하고 구문 분석 하고 &lt;code&gt;XmlNode&lt;/code&gt; 를 반환합니다 . 발생한 모든 구문 분석 오류가 &lt;em&gt;오류&lt;/em&gt; 순서에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="4296f849be147d08fdb9d341d2ab77c8da850fd7" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from a file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;PDocument&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 로 지정된 파일에서 XML을로드 및 구문 분석 하고 &lt;code&gt;PDocument&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="26e2e2e83d566103f2e7459a72bbf8e836f49d66" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from a stream specified by &lt;code&gt;stream&lt;/code&gt;, and returns a &lt;code&gt;PDocument&lt;/code&gt;</source>
          <target state="translated">로드 및 파싱에 의해 지정된 스트림에서 XML &lt;code&gt;stream&lt;/code&gt; 및 반환 &lt;code&gt;PDocument&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="045d13349b264d2eba76a0804c08fa59e6a17cff" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from a string specified by &lt;code&gt;xml&lt;/code&gt;, and returns a &lt;code&gt;PDocument&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;xml&lt;/code&gt; 로 지정된 문자열에서 XML을로드하고 구문 분석 하고 &lt;code&gt;PDocument&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1f9e01e6b541364451c7b06cd42daa257c56a015" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are turned into an &lt;code&gt;XmlError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 로 지정된 파일에서 XML을로드하고 구문 분석 하고 &lt;code&gt;XmlNode&lt;/code&gt; 를 반환합니다 . 모든 구문 분석 오류는 &lt;code&gt;XmlError&lt;/code&gt; 예외 로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="58715b2c04bf6ee07528232196803acf3ddcf9e8" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;code&gt;errors&lt;/code&gt; sequence.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 로 지정된 파일에서 XML을로드하고 구문 분석 하고 &lt;code&gt;XmlNode&lt;/code&gt; 를 반환합니다 . 발생한 모든 구문 분석 오류가 &lt;code&gt;errors&lt;/code&gt; 순서에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="dc99d54d9990e3c134420be3918e88f28531e630" translate="yes" xml:space="preserve">
          <source>Local</source>
          <target state="translated">Local</target>
        </trans-unit>
        <trans-unit id="9cc986c68f1431e010e3565660f79db5b295d31d" translate="yes" xml:space="preserve">
          <source>LocalPassc pragma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7db461111deca6d0f8236779f0bb1263494a8e8" translate="yes" xml:space="preserve">
          <source>Lock levels</source>
          <target state="translated">잠금 수준</target>
        </trans-unit>
        <trans-unit id="2d3eec8b8c6c462f1179b7a5687732b44d7f8dfc" translate="yes" xml:space="preserve">
          <source>Lock levels are used to enforce a global locking order in order to detect potential deadlocks during semantic analysis. A lock level is an constant integer in the range 0..1_000. Lock level 0 means that no lock is acquired at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f1e767de995c2aa21fe38394145cda4db0f95d" translate="yes" xml:space="preserve">
          <source>Lock levels are used to enforce a global locking order in order to prevent deadlocks at compile-time. A lock level is an constant integer in the range 0..1_000. Lock level 0 means that no lock is acquired at all.</source>
          <target state="translated">잠금 레벨은 컴파일시 교착 상태를 방지하기 위해 전역 잠금 순서를 적용하는 데 사용됩니다. 잠금 레벨은 0..1_000 범위의 상수 정수입니다. 잠금 레벨 0은 잠금이 전혀 획득되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="626c2de96fe392dcef18ddcb348cde44efd3b55a" translate="yes" xml:space="preserve">
          <source>Locks all memory for the running process to prevent swapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1664fac300e5a13655e2a24509e2c414ac72c81" translate="yes" xml:space="preserve">
          <source>Locks and routines can be annotated with &lt;span id=&quot;lock-levels_1&quot;&gt;lock levels&lt;/span&gt; to allow potential deadlocks to be detected during semantic analysis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a026b72d4824601afcdf130fca670d0c8d13f97d" translate="yes" xml:space="preserve">
          <source>Locks and routines can be annotated with &lt;span id=&quot;lock-levels_1&quot;&gt;lock levels&lt;/span&gt; to prevent deadlocks at compile time.</source>
          <target state="translated">컴파일 타임에 교착 상태를 방지하기 위해 &lt;span id=&quot;lock-levels_1&quot;&gt;잠금 레벨&lt;/span&gt; 에 잠금 및 루틴에 주석을 달 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="76a561aa63e506df08050f70920f4856cec459b0" translate="yes" xml:space="preserve">
          <source>Locks pages starting from a1 for a1 bytes and prevent them from being swapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33862b85b4c25c686ef40724480cd8ebcc8f0249" translate="yes" xml:space="preserve">
          <source>Log level name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c4c654289defdcf729f49108549a5e18d08f81" translate="yes" xml:space="preserve">
          <source>Log messages are prefixed with format strings. These strings contain placeholders for variables, such as &lt;code&gt;$time&lt;/code&gt;, that are replaced with their corresponding values, such as the current time, before they are prepended to a log message. Characters that are not part of variables are unaffected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5c380132554658df14cbe018d3eebcce0b49de" translate="yes" xml:space="preserve">
          <source>Logs a debug message to all registered handlers.</source>
          <target state="translated">등록 된 모든 핸들러에 디버그 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="4c7f919536de93b8ad43c3247437839e50803cac" translate="yes" xml:space="preserve">
          <source>Logs a fatal error message to all registered handlers.</source>
          <target state="translated">등록 된 모든 처리기에 치명적인 오류 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="469b3cbccb535fe83e84650fa180e1bf49b43063" translate="yes" xml:space="preserve">
          <source>Logs a message at the specified level to all registered handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa1e64c89de815a0318f1bbbf71a480294f882e" translate="yes" xml:space="preserve">
          <source>Logs a message at the specified level using the given &lt;a href=&quot;#FileLogger&quot;&gt;FileLogger&lt;/a&gt; only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e25fc4a87c5a8ede8b136f46f111fb645ee708" translate="yes" xml:space="preserve">
          <source>Logs a message at the specified level using the given &lt;a href=&quot;#RollingFileLogger&quot;&gt;RollingFileLogger&lt;/a&gt; only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfc8bdbe4c51442cb3331391bf133dae2303823" translate="yes" xml:space="preserve">
          <source>Logs a message to all registered handlers at the given level.</source>
          <target state="translated">주어진 레벨에서 등록 된 모든 핸들러에 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="57d8e0636873737f16f4b7cc780f237140e75837" translate="yes" xml:space="preserve">
          <source>Logs a warning message to all registered handlers.</source>
          <target state="translated">등록 된 모든 처리기에 경고 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="9317adaad7621328486bdf8c1ddb1b9fc41f1e55" translate="yes" xml:space="preserve">
          <source>Logs an error message to all registered handlers.</source>
          <target state="translated">등록 된 모든 처리기에 오류 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="4b60a8dc51101a47288a87fdd0bfadc5f86cbf8e" translate="yes" xml:space="preserve">
          <source>Logs an info message to all registered handlers.</source>
          <target state="translated">등록 된 모든 처리기에 정보 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="d163792610c410f93f355f367ec68f39a5ba2888" translate="yes" xml:space="preserve">
          <source>Logs an notice message to all registered handlers.</source>
          <target state="translated">등록 된 모든 핸들러에 통지 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="505c1129f621e83ae4c3cc60f5a4430ac1132a24" translate="yes" xml:space="preserve">
          <source>Logs an notice to all registered handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968b9d0e2a2ece8aa91b1cc23a28091c21b0a82f" translate="yes" xml:space="preserve">
          <source>Logs to a file using &lt;code&gt;logger&lt;/code&gt; only.</source>
          <target state="translated">&lt;code&gt;logger&lt;/code&gt; 만 사용하여 파일에 기록 합니다.</target>
        </trans-unit>
        <trans-unit id="1a9ec4044346457b95a04e72c6feb17b0ce890ff" translate="yes" xml:space="preserve">
          <source>Logs to a file using rolling &lt;code&gt;logger&lt;/code&gt; only.</source>
          <target state="translated">롤링 &lt;code&gt;logger&lt;/code&gt; 만 사용하여 파일에 로그 합니다.</target>
        </trans-unit>
        <trans-unit id="50128c469a86270a2da91f8b00b431458f68392b" translate="yes" xml:space="preserve">
          <source>Logs to the console using &lt;code&gt;logger&lt;/code&gt; only.</source>
          <target state="translated">&lt;code&gt;logger&lt;/code&gt; 만 사용하여 콘솔에 기록 합니다.</target>
        </trans-unit>
        <trans-unit id="1f06fb3fd56364ec13715b29520bb2844d19c750" translate="yes" xml:space="preserve">
          <source>Logs to the console with the given &lt;a href=&quot;#ConsoleLogger&quot;&gt;ConsoleLogger&lt;/a&gt; only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de84a481681ade51a9e7c6fc6753c8daa39ce596" translate="yes" xml:space="preserve">
          <source>Long options: &lt;code&gt;--foo:bar&lt;/code&gt;, &lt;code&gt;--foo=bar&lt;/code&gt;, &lt;code&gt;--foo&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0957862e5908bda0c0e3aed344445a129129b213" translate="yes" xml:space="preserve">
          <source>Look at the module &lt;a href=&quot;distros&quot;&gt;distros&lt;/a&gt; for some support of the OS's native package managers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ee53aa3b26fe91c5819ca15b134a56f645ac1e" translate="yes" xml:space="preserve">
          <source>Lookup rules for template parameters</source>
          <target state="translated">템플릿 매개 변수에 대한 조회 규칙</target>
        </trans-unit>
        <trans-unit id="ce44bf0dea95522d8571be7ae1c1bf020f1c61c5" translate="yes" xml:space="preserve">
          <source>Loopback address.</source>
          <target state="translated">루프백 주소.</target>
        </trans-unit>
        <trans-unit id="ed3b229a877674fc9085bfff9aad369487b7967d" translate="yes" xml:space="preserve">
          <source>Lossless &lt;span id=&quot;automatic-type-conversion_1&quot;&gt;Automatic type conversion&lt;/span&gt; is performed in expressions where different kinds of integer types are used. However, if the type conversion would cause loss of information, the &lt;span id=&quot;eoutofrange_1&quot;&gt;EOutOfRange&lt;/span&gt; exception is raised (if the error cannot be detected at compile time).</source>
          <target state="translated">무손실 &lt;span id=&quot;automatic-type-conversion_1&quot;&gt;자동 유형 변환&lt;/span&gt; 은 다른 종류의 정수 유형이 사용되는 표현식에서 수행됩니다. 그러나 형식 변환으로 인해 정보가 손실되면 &lt;span id=&quot;eoutofrange_1&quot;&gt;EOutOfRange&lt;/span&gt; 예외가 발생합니다 (컴파일시 오류를 감지 할 수없는 경우).</target>
        </trans-unit>
        <trans-unit id="5ca6f7c7b2f3fcead3d5cf315885d15734fca9dc" translate="yes" xml:space="preserve">
          <source>Lots of other small issues...</source>
          <target state="translated">다른 많은 작은 문제들 ...</target>
        </trans-unit>
        <trans-unit id="aa2f8ccecdf2dbecd47e8cd4e048b6fc7f99bf4f" translate="yes" xml:space="preserve">
          <source>Low level proc that reads data into a string &lt;code&gt;buffer&lt;/code&gt; at &lt;code&gt;slice&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af722d53c5b6e574410e8f2dd2d6364389b6e03b" translate="yes" xml:space="preserve">
          <source>Low level proc that reads data into an untyped &lt;code&gt;buffer&lt;/code&gt; of &lt;code&gt;bufLen&lt;/code&gt; size without moving stream position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fa99d3c67a5ee794c965ec46d69cb879851c0a" translate="yes" xml:space="preserve">
          <source>Low level proc that reads data into an untyped &lt;code&gt;buffer&lt;/code&gt; of &lt;code&gt;bufLen&lt;/code&gt; size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cc70167dad54f443c772c8caab8d52d90e1ba8" translate="yes" xml:space="preserve">
          <source>Low level proc that writes an untyped &lt;code&gt;buffer&lt;/code&gt; of &lt;code&gt;bufLen&lt;/code&gt; size to the stream &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d23c3d8e25fbb10696543f3025033e97764292" translate="yes" xml:space="preserve">
          <source>Low level proc. Undocumented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff7d11f87283cccf06948b3629f7172fac1347a" translate="yes" xml:space="preserve">
          <source>Low-level streams for high performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2cb6d07d1da16689e1ad2e443c4f93b6383883" translate="yes" xml:space="preserve">
          <source>Lrz:</source>
          <target state="translated">Lrz:</target>
        </trans-unit>
        <trans-unit id="4b71f8a7d7395e02404a8c0f25df4b6d61905b7e" translate="yes" xml:space="preserve">
          <source>MAYBE-cases:</source>
          <target state="translated">MAYBE-cases:</target>
        </trans-unit>
        <trans-unit id="ad6379695d4f7d22a1edb379af92c2be6a1f72a6" translate="yes" xml:space="preserve">
          <source>MD5 checksum of a string, obtained with &lt;a href=&quot;#toMD5,string&quot;&gt;toMD5 proc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a68b12b71fd0a8e62d67043581d497f4e0c387" translate="yes" xml:space="preserve">
          <source>Macro declaration</source>
          <target state="translated">매크로 선언</target>
        </trans-unit>
        <trans-unit id="ef54f5fa1927706666d44a45ec92a8543508fbf0" translate="yes" xml:space="preserve">
          <source>Macro invocation is a case where semantic analysis does &lt;strong&gt;not&lt;/strong&gt; entirely proceed top to bottom and left to right. Instead, semantic analysis happens at least twice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851a2849c924ba5805a5b3b89271a39bdd0911e7" translate="yes" xml:space="preserve">
          <source>Macro pragmas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f312834ff09b9cbab1f1a3ebc0bbe0f1a19b93" translate="yes" xml:space="preserve">
          <source>Macro which converts normal procedures into javascript-compatible async procedures</source>
          <target state="translated">일반 프로 시저를 JavaScript 호환 비동기 프로 시저로 변환하는 매크로</target>
        </trans-unit>
        <trans-unit id="b723ba9d4b8543905b3d063848f2ca3b99a48c4b" translate="yes" xml:space="preserve">
          <source>Macro which processes async procedures into both asynchronous and synchronous procedures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6fdfa4d79f422748ca4c66320d7abee74c2276" translate="yes" xml:space="preserve">
          <source>Macro which processes async procedures into the appropriate iterators and yield statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="bcf4850e55a2614c2efa81a2629e41ec19afef8b" translate="yes" xml:space="preserve">
          <source>Macros as pragmas</source>
          <target state="translated">pragma로 매크로</target>
        </trans-unit>
        <trans-unit id="980cf51d761ff2e575f35b48bf655118288e07f9" translate="yes" xml:space="preserve">
          <source>Macros behave like templates, but &lt;code&gt;nnkTemplateDef&lt;/code&gt; is replaced with &lt;code&gt;nnkMacroDef&lt;/code&gt;.</source>
          <target state="translated">매크로 템플릿처럼 행동하지만, &lt;code&gt;nnkTemplateDef&lt;/code&gt; 는 대체됩니다 &lt;code&gt;nnkMacroDef&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fabe264274a80515010384b77dc0559e962ca19d" translate="yes" xml:space="preserve">
          <source>Macros enable advanced compile-time code transformations, but they cannot change Nim's syntax. However, this is no real restriction because Nim's syntax is flexible enough anyway. Macros have to be implemented in pure Nim code if the &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;foreign function interface (FFI)&lt;/a&gt; is not enabled in the compiler, but other than that restriction (which at some point in the future will go away) you can write any kind of Nim code and the compiler will run it at compile time.</source>
          <target state="translated">매크로는 고급 컴파일 타임 코드 변환을 가능하게하지만 Nim의 구문을 변경할 수는 없습니다. 그러나 Nim의 구문이 충분히 유연하기 때문에 이것은 실제 제한이 아닙니다. 컴파일러에서 &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;FFI (Foreign Function Interface)&lt;/a&gt; 를 사용할 수없는 경우 매크로를 순수 Nim 코드로 구현해야 하지만, 그 제한 외 (어느 시점에 없어 질 것임 ) 가 아니라면 모든 종류의 Nim 코드를 작성할 수 있습니다. 컴파일러는 컴파일 타임에이를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="ce636c3f836fa89098033372c15617a8aecb40ec" translate="yes" xml:space="preserve">
          <source>Macros module includes helpers which can be used to simplify custom pragma access &lt;code&gt;hasCustomPragma&lt;/code&gt;, &lt;code&gt;getCustomPragmaVal&lt;/code&gt;. Please consult the macros module documentation for details. These macros are not magic, everything they do can also be achieved by walking the AST of the object representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4316199fa5a1551b8a3aa00b57acfb7552982193" translate="yes" xml:space="preserve">
          <source>Macros module includes helpers which can be used to simplify custom pragma access &lt;em&gt;hasCustomPragma&lt;/em&gt;, &lt;em&gt;getCustomPragmaVal&lt;/em&gt;. Please consult macros module documentation for details. These macros are no magic, they don't do anything you cannot do yourself by walking AST object representation.</source>
          <target state="translated">매크로 모듈에는 사용자 정의 pragma 액세스 &lt;em&gt;hasCustomPragma&lt;/em&gt; , &lt;em&gt;getCustomPragmaVal&lt;/em&gt; 을 단순화하는 데 사용할 수있는 도우미가 포함되어 있습니다 . 자세한 내용은 매크로 모듈 설명서를 참조하십시오. 이 매크로는 마법이 아니며, AST 객체 표현을 걸어서 스스로 할 수있는 일은하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fcb1a29368fba3810f040b19c708029e63713744" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;osproc&lt;/code&gt; use &lt;code&gt;fork&lt;/code&gt; instead of &lt;code&gt;posix_spawn&lt;/code&gt;.</source>
          <target state="translated">만든다 &lt;code&gt;osproc&lt;/code&gt; 의 사용 &lt;code&gt;fork&lt;/code&gt; 대신 &lt;code&gt;posix_spawn&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c651f2d69bb1c5e0aa5eb7b1418517d939a6973" translate="yes" xml:space="preserve">
          <source>Makes Nim output stacktraces to stdout, instead of server log.</source>
          <target state="translated">서버 로그 대신 Nim 출력 스택 추적을 stdout으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="499d78e3579f7c7ce46ccd08c0c7e05dcf497fe4" translate="yes" xml:space="preserve">
          <source>Makes Nim output stacktraces to stdout, instead of server log. Depracated alias for setStackTraceStdout.</source>
          <target state="translated">서버 로그 대신 Nim 출력 스택 추적을 stdout으로 만듭니다. setStackTraceStdout에 대한 설명이 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="2e3d974a9298c4b4ebf6fa1f9cde4cea6a610923" translate="yes" xml:space="preserve">
          <source>Makes Nim use C's &lt;span id=&quot;malloc_1&quot;&gt;malloc&lt;/span&gt; instead of Nim's own memory manager, ableit prefixing each allocation with its size to support clearing memory on reallocation. This only works with &lt;code&gt;gc:none&lt;/code&gt;.</source>
          <target state="translated">Nim 이 Nim의 자체 메모리 관리자 대신 C의 &lt;span id=&quot;malloc_1&quot;&gt;malloc을&lt;/span&gt; 사용하게 하여 재 할당시 메모리 지우기를 지원하기 위해 각 할당에 크기를 접두어로 붙일 수 있습니다. 이것은 &lt;code&gt;gc:none&lt;/code&gt; 에서만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="39dc4d166bd190699dd57d866cdd4f983ac9a647" translate="yes" xml:space="preserve">
          <source>Makes Nim use C's &lt;span id=&quot;malloc_1&quot;&gt;malloc&lt;/span&gt; instead of Nim's own memory manager, albeit prefixing each allocation with its size to support clearing memory on reallocation. This only works with &lt;code&gt;gc:none&lt;/code&gt; and with &lt;code&gt;--newruntime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c24f6fa722204e68ea302ade8ca94caa0a75902" translate="yes" xml:space="preserve">
          <source>Mandatory term being indexed. Terms can include quoting according to Nim's rules (eg. `^`).</source>
          <target state="translated">인덱싱되는 필수 용어입니다. 용어에는 님의 규칙에 따른 인용 (예 :`^`)이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24955129a4e7201aaac85fbb51e47c98263d5ba3" translate="yes" xml:space="preserve">
          <source>Manfred Tasche and Hansmartin Zeuner, Handbook of Analytic-Computational Methods in Applied Mathematics (2000).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="8b04fd7fca9bde6ca081d5a883719b86d91603ee" translate="yes" xml:space="preserve">
          <source>Manual: AST based overloading</source>
          <target state="translated">수동 : AST 기반 과부하</target>
        </trans-unit>
        <trans-unit id="defb0de64fe7ca08a6ed982374de4bb9a85c2662" translate="yes" xml:space="preserve">
          <source>Manual: Effect system</source>
          <target state="translated">수동 : 효과 시스템</target>
        </trans-unit>
        <trans-unit id="c96afc4df608947a129115509fc6ac1d02f56202" translate="yes" xml:space="preserve">
          <source>Manual: Exception handling</source>
          <target state="translated">수동 : 예외 처리</target>
        </trans-unit>
        <trans-unit id="ddfc1de56c3bd1d03afdd4142362226685aca4b2" translate="yes" xml:space="preserve">
          <source>Manual: Foreign function interface</source>
          <target state="translated">수동 : 외부 기능 인터페이스</target>
        </trans-unit>
        <trans-unit id="e56aa0932cbe0a4d0a9778061468fdfecc37f816" translate="yes" xml:space="preserve">
          <source>Manual: Generics</source>
          <target state="translated">매뉴얼 : 제네릭</target>
        </trans-unit>
        <trans-unit id="5774a3094051cc1a01178d4abbdf9174054d2afa" translate="yes" xml:space="preserve">
          <source>Manual: Guards and locks</source>
          <target state="translated">수동 : 가드 및 잠금</target>
        </trans-unit>
        <trans-unit id="034ba2f8aa22d8c1659925669461f5c6bb46d48d" translate="yes" xml:space="preserve">
          <source>Manual: Implementation Specific Pragmas</source>
          <target state="translated">매뉴얼 : 구현 관련 실습</target>
        </trans-unit>
        <trans-unit id="5b04a062ff7cc9d86ce05472065106035a8097fa" translate="yes" xml:space="preserve">
          <source>Manual: Import statement Include statement Module names in imports Collective imports from a directory Pseudo import/include paths From import statement Export statement</source>
          <target state="translated">수동 : 가져 오기 명령문 포함 명령문 가져 오기의 모듈 이름 디렉토리에서 일괄 가져 오기 의사 가져 오기 / 포함 경로 가져 오기 명령문에서 내보내기 명령문</target>
        </trans-unit>
        <trans-unit id="fd76cbedf6737eb16d94623f5ae0365ae0d604f1" translate="yes" xml:space="preserve">
          <source>Manual: Iterators and the for statement</source>
          <target state="translated">수동 : 반복자와 for 문</target>
        </trans-unit>
        <trans-unit id="a243b6fe56c421c23e6ef513dd30b788f1257a68" translate="yes" xml:space="preserve">
          <source>Manual: Lexical Analysis</source>
          <target state="translated">매뉴얼 : 어휘 분석</target>
        </trans-unit>
        <trans-unit id="ed3d84a9118355ed8740c1a7b3f3b4c841535124" translate="yes" xml:space="preserve">
          <source>Manual: Macros</source>
          <target state="translated">수동 : 매크로</target>
        </trans-unit>
        <trans-unit id="4bafc4dbfa5c0e3c58d2fb274d692bbf25d243fc" translate="yes" xml:space="preserve">
          <source>Manual: Modules</source>
          <target state="translated">수동 : 모듈</target>
        </trans-unit>
        <trans-unit id="9a290e826830f6686d0f05fcc67ab7c270d95dbb" translate="yes" xml:space="preserve">
          <source>Manual: Multi-methods</source>
          <target state="translated">수동 : 다중 방법</target>
        </trans-unit>
        <trans-unit id="11714535fa66e7fe2732c23bbc152d68d14f704d" translate="yes" xml:space="preserve">
          <source>Manual: Overloading resolution</source>
          <target state="translated">수동 : 과부하 해상도</target>
        </trans-unit>
        <trans-unit id="856ff8f109b24f9933255ac3581aadee568cd2dc" translate="yes" xml:space="preserve">
          <source>Manual: Parallel &amp;amp; Spawn</source>
          <target state="translated">매뉴얼 : Parallel &amp;amp; Spawn</target>
        </trans-unit>
        <trans-unit id="7ec22936b55b7f305c2be8dba10aa5109567b287" translate="yes" xml:space="preserve">
          <source>Manual: Pragmas</source>
          <target state="translated">매뉴얼 : Pragmas</target>
        </trans-unit>
        <trans-unit id="770e4cc3468cd2ab34e2292349c2fc7f1254bba1" translate="yes" xml:space="preserve">
          <source>Manual: Procedures</source>
          <target state="translated">수동 : 절차</target>
        </trans-unit>
        <trans-unit id="1b494587e353e28a4fb14cede5251f048106d63a" translate="yes" xml:space="preserve">
          <source>Manual: Special Operators</source>
          <target state="translated">매뉴얼 : 특수 연산자</target>
        </trans-unit>
        <trans-unit id="67456811ead6b001268c25ae75d8eb80bf9b78d4" translate="yes" xml:space="preserve">
          <source>Manual: Special Types</source>
          <target state="translated">수동 : 특수 유형</target>
        </trans-unit>
        <trans-unit id="6decf7713585353b542d22a07833a9e3f4608374" translate="yes" xml:space="preserve">
          <source>Manual: Statements and expressions</source>
          <target state="translated">매뉴얼 : 진술과 표현</target>
        </trans-unit>
        <trans-unit id="c06b311819398e9a7a08be8caed1736017ac7522" translate="yes" xml:space="preserve">
          <source>Manual: Syntax</source>
          <target state="translated">수동 : 구문</target>
        </trans-unit>
        <trans-unit id="bacd5ce7b4fc6c233337b20743738357eb3d4917" translate="yes" xml:space="preserve">
          <source>Manual: Templates</source>
          <target state="translated">매뉴얼 : 템플릿</target>
        </trans-unit>
        <trans-unit id="817f3b64b7fab30fc4fa2987f47b2de7d799191c" translate="yes" xml:space="preserve">
          <source>Manual: Term rewriting macros</source>
          <target state="translated">수동 : 용어 재 작성 매크로</target>
        </trans-unit>
        <trans-unit id="cbe3bd9f8e9a36414594a7b27bafcc1a597a3da5" translate="yes" xml:space="preserve">
          <source>Manual: Threads</source>
          <target state="translated">수동 : 실</target>
        </trans-unit>
        <trans-unit id="aafb451a891596fbad0f0184b0ad302e74ebffc7" translate="yes" xml:space="preserve">
          <source>Manual: Type bound operations</source>
          <target state="translated">수동 : 유형 바운드 작업</target>
        </trans-unit>
        <trans-unit id="166a47f26935d8e4d08a27d4c17c4e1d1999f722" translate="yes" xml:space="preserve">
          <source>Manual: Type relations</source>
          <target state="translated">수동 : 유형 관계</target>
        </trans-unit>
        <trans-unit id="bd029877fffa549daa894766df47948479afd2f1" translate="yes" xml:space="preserve">
          <source>Manual: Types</source>
          <target state="translated">수동 : 유형</target>
        </trans-unit>
        <trans-unit id="ab91f6bb3ac38c08fb63699ef613a1997da99143" translate="yes" xml:space="preserve">
          <source>Many procs have two variations: one that takes in a Rand parameter and another that uses the default generator. The procs that use the default generator are &lt;strong&gt;not&lt;/strong&gt; thread-safe!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a5ed515fa728d621fa969a4b107711dd85acb8" translate="yes" xml:space="preserve">
          <source>Mapping:</source>
          <target state="translated">Mapping:</target>
        </trans-unit>
        <trans-unit id="118bc77adfa6d6ed5dc12ea80c9cb6391933343c" translate="yes" xml:space="preserve">
          <source>Mark &amp;amp; Sweep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1633f65bbc398d71c3ebfc3241c0af807273d5" translate="yes" xml:space="preserve">
          <source>Mark the test as skipped. Should be used directly in case when it is not possible to perform test for reasons depending on outer environment, or certain application logic conditions or configurations. The test code is still executed.</source>
          <target state="translated">테스트를 건너 뛴 것으로 표시하십시오. 외부 환경 또는 특정 애플리케이션 로직 조건 또는 구성에 따라 이유로 테스트를 수행 할 수없는 경우 직접 사용해야합니다. 테스트 코드는 여전히 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1d3b7aa9b4c642f5735f40da06dfed06fbca163e" translate="yes" xml:space="preserve">
          <source>Marks &lt;code&gt;socket&lt;/code&gt; as accepting connections. &lt;code&gt;Backlog&lt;/code&gt; specifies the maximum length of the queue of pending connections.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 을 허용되는 연결로 표시 합니다 . &lt;code&gt;Backlog&lt;/code&gt; 그는 보류중인 연결 큐의 최대 길이를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="d8f396ee29f34a8a12822da6969d231d2b5cdae3" translate="yes" xml:space="preserve">
          <source>Marks a sequence &lt;code&gt;s&lt;/code&gt; as &lt;span id=&quot;shallow_1&quot;&gt;shallow&lt;/span&gt;. Subsequent assignments will not perform deep copies of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb88523ff1c11187c59c8daaff194a812416069" translate="yes" xml:space="preserve">
          <source>Marks a string &lt;code&gt;s&lt;/code&gt; as &lt;span id=&quot;shallow_2&quot;&gt;shallow&lt;/span&gt;. Subsequent assignments will not perform deep copies of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c67f988dbf96c16caeb6a758973b048d373a222" translate="yes" xml:space="preserve">
          <source>Marks the object &lt;code&gt;x&lt;/code&gt; as referenced, so that it will not be freed until it is unmarked via &lt;code&gt;GC_unref&lt;/code&gt;. If called n-times for the same object &lt;code&gt;x&lt;/code&gt;, n calls to &lt;code&gt;GC_unref&lt;/code&gt; are needed to unmark &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07f226b4437e06fea4e70beb870cd20dccb2b33" translate="yes" xml:space="preserve">
          <source>Matches a binary integer. This uses &lt;code&gt;parseutils.parseBin&lt;/code&gt;.</source>
          <target state="translated">이진 정수와 일치합니다. &lt;code&gt;parseutils.parseBin&lt;/code&gt; 을 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="61f72fda5d63c33af385805c251186ac41827a95" translate="yes" xml:space="preserve">
          <source>Matches a character set</source>
          <target state="translated">문자 세트와 일치</target>
        </trans-unit>
        <trans-unit id="7c21df5bb89686108056b549eda7fc196d394426" translate="yes" xml:space="preserve">
          <source>Matches a decimal integer. This uses &lt;code&gt;parseutils.parseInt&lt;/code&gt;.</source>
          <target state="translated">십진 정수와 일치합니다. &lt;code&gt;parseutils.parseInt&lt;/code&gt; 를 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a12cb4b049a1da7e03f068b60b69ca0670549bfd" translate="yes" xml:space="preserve">
          <source>Matches a floating pointer number. Uses &lt;code&gt;parseFloat&lt;/code&gt;.</source>
          <target state="translated">부동 포인터 번호와 일치합니다. &lt;code&gt;parseFloat&lt;/code&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="2464cd36660069f3fcf2e58ee0a418607e32a9bc" translate="yes" xml:space="preserve">
          <source>Matches a hex integer. This uses &lt;code&gt;parseutils.parseHex&lt;/code&gt;.</source>
          <target state="translated">16 진 정수와 일치합니다. &lt;code&gt;parseutils.parseHex&lt;/code&gt; 를 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="532fa54ee42246846545dbf2fc331f03ad0daeed" translate="yes" xml:space="preserve">
          <source>Matches a single character</source>
          <target state="translated">단일 문자와 일치</target>
        </trans-unit>
        <trans-unit id="e01edc99d3df652b0b10d0cd88889a4c6db28db5" translate="yes" xml:space="preserve">
          <source>Matches a single dollar sign.</source>
          <target state="translated">단일 달러 기호와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="56b8550638d15898163432e2ef863037d24cf3ab" translate="yes" xml:space="preserve">
          <source>Matches a string</source>
          <target state="translated">문자열과 일치</target>
        </trans-unit>
        <trans-unit id="2b0f27dc90ddd03570b6691c4598abffade1d014" translate="yes" xml:space="preserve">
          <source>Matches an ASCII identifier: &lt;code&gt;[A-Z-a-z_][A-Za-z_0-9]*&lt;/code&gt;.</source>
          <target state="translated">ASCII 식별자 &lt;code&gt;[A-Z-a-z_][A-Za-z_0-9]*&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="cb11deb862e701ecf31d06dec19acebd903c72b7" translate="yes" xml:space="preserve">
          <source>Matches an ASCII identifier: &lt;code&gt;[A-Za-z_][A-Za-z_0-9]*&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f19ab90d0dfde58576111f53aea6162591341ee" translate="yes" xml:space="preserve">
          <source>Matches an octal integer. This uses &lt;code&gt;parseutils.parseOct&lt;/code&gt;.</source>
          <target state="translated">8 진 정수와 일치합니다. &lt;code&gt;parseutils.parseOct&lt;/code&gt; 를 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="8507509e46ea139d748c7c784f7cdc32a09d48f7" translate="yes" xml:space="preserve">
          <source>Matches if the end of the input string has been reached.</source>
          <target state="translated">입력 문자열의 끝에 도달하면 일치합니다.</target>
        </trans-unit>
        <trans-unit id="44e83eb14a6d865158691b6ead9b69eedf905cb4" translate="yes" xml:space="preserve">
          <source>Matches until the token following the &lt;code&gt;$*&lt;/code&gt; was found. The match is allowed to be of 0 length.</source>
          <target state="translated">&lt;code&gt;$*&lt;/code&gt; 다음에 나오는 토큰 을 찾을 때까지 일치합니다 . 일치 길이는 0입니다.</target>
        </trans-unit>
        <trans-unit id="548a91d3213ffddd1a11e82050c55439466aaf2f" translate="yes" xml:space="preserve">
          <source>Matches until the token following the &lt;code&gt;$+&lt;/code&gt; was found. The match must consist of at least one char.</source>
          <target state="translated">&lt;code&gt;$+&lt;/code&gt; 다음의 토큰 이 발견 될 때까지 일치합니다 . 일치하는 문자는 하나 이상의 문자로 구성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="ac458e6963c6ebdd9c5ca1f8b279a9eb42dfc913" translate="yes" xml:space="preserve">
          <source>Math libraries</source>
          <target state="translated">수학 라이브러리</target>
        </trans-unit>
        <trans-unit id="1f7cee102b27a0a36e1eff3591db70671169b25f" translate="yes" xml:space="preserve">
          <source>MathML</source>
          <target state="translated">MathML</target>
        </trans-unit>
        <trans-unit id="6e4c4838bcc55297c563147e236843926c319da6" translate="yes" xml:space="preserve">
          <source>Max line length is 80 characters.</source>
          <target state="translated">최대 줄 길이는 80 자입니다.</target>
        </trans-unit>
        <trans-unit id="87bdd589c404753ad68a30e59291849a960dcfe9" translate="yes" xml:space="preserve">
          <source>MaxLineLength:</source>
          <target state="translated">MaxLineLength:</target>
        </trans-unit>
        <trans-unit id="e8cf9b9175f564fd8cc5f5f0e0776208f9a7f0a8" translate="yes" xml:space="preserve">
          <source>MaxLockLevel:</source>
          <target state="translated">MaxLockLevel:</target>
        </trans-unit>
        <trans-unit id="6d66136caa0c795208b0ffaf07f942a674bbb1b6" translate="yes" xml:space="preserve">
          <source>MaxSetElements:</source>
          <target state="translated">MaxSetElements:</target>
        </trans-unit>
        <trans-unit id="778023e3cc63dcb6efb42650922757955cc42d4d" translate="yes" xml:space="preserve">
          <source>MaxStackSize:</source>
          <target state="translated">MaxStackSize:</target>
        </trans-unit>
        <trans-unit id="353de93dd15ff6db8a4b838f009f42da8fc085cc" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent for 32-bit floating-point numbers.</source>
          <target state="translated">32 비트 부동 소수점 숫자의 최대 (양수) 지수.</target>
        </trans-unit>
        <trans-unit id="1d2ac0d1ca31ee91cf5ff6056f9a16027dd8fd2a" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent for 64-bit floating-point numbers.</source>
          <target state="translated">64 비트 부동 소수점 숫자의 최대 (양수) 지수.</target>
        </trans-unit>
        <trans-unit id="8bbd4cef55a64a4e58be3f1e60ec750e94d7d807" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent in base 10 for 32-bit floating-point numbers.</source>
          <target state="translated">32 비트 부동 소수점 숫자에 대한 기수 10의 최대 (양수) 지수.</target>
        </trans-unit>
        <trans-unit id="50184f5eb64ad277177d238e645f028ed1a230ab" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent in base 10 for 64-bit floating-point numbers.</source>
          <target state="translated">64 비트 부동 소수점 숫자에 대한 기수 10의 최대 (양수) 지수.</target>
        </trans-unit>
        <trans-unit id="34f56ea04f6538b2d158c4a3c323d6d8ec54b309" translate="yes" xml:space="preserve">
          <source>Maximum number of &quot;distinguished&quot; threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b3561771d4e66829c167e1d4a7d1255704ca3b" translate="yes" xml:space="preserve">
          <source>Maximum number of meaningful digits after the decimal point for Nim's &lt;code&gt;float32&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc24eb965d32e0e7f8d49ad888cb429bc9b1cac" translate="yes" xml:space="preserve">
          <source>Maximum number of meaningful digits after the decimal point for Nim's &lt;code&gt;float64&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85186079ae8566dcfcf83e0fa2620eae92047da6" translate="yes" xml:space="preserve">
          <source>Maximum number of meaningful digits after the decimal point for Nim's &lt;code&gt;float&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a131e73da1676fcd77d156e09bbf2bc95271c8" translate="yes" xml:space="preserve">
          <source>Maximum size of the thread pool. 256 threads should be good enough for anybody ;-)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5ef7d420dc7014f3387053f613102ad7f562b5" translate="yes" xml:space="preserve">
          <source>May be used only in &lt;code&gt;when&lt;/code&gt; expression. It is true in Nim VM context and false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed71d9f1d146dd9fd80c9fea6cf2280768a6a052" translate="yes" xml:space="preserve">
          <source>Maybe you didn't notice, but in the &lt;code&gt;dumpTree&lt;/code&gt; example the first constant explicitly specifies the type of the constant. That's why in the tree output the two last constants have their second child &lt;code&gt;Empty&lt;/code&gt; but the first has a string identifier. So basically a &lt;code&gt;const&lt;/code&gt; definition is made up from an identifier, optionally a type (can be an &lt;em&gt;empty&lt;/em&gt; node) and the value. Armed with this knowledge, let's look at the finished version of the AST building macro:</source>
          <target state="translated">아마 눈치 채지 &lt;code&gt;dumpTree&lt;/code&gt; 예제에서 첫 번째 상수는 상수 유형을 명시 적으로 지정합니다. 이것이 트리 출력에서 ​​두 개의 마지막 상수에 두 번째 자식 &lt;code&gt;Empty&lt;/code&gt; 가 있지만 첫 번째 상수에는 문자열 식별자가있는 이유입니다 . 따라서 기본적으로 &lt;code&gt;const&lt;/code&gt; 정의는 식별자, 선택적으로 유형 ( &lt;em&gt;빈&lt;/em&gt; 노드 일 수 있음 ) 및 값으로 구성됩니다. 이 지식으로 무장 한 AST 빌딩 매크로의 완성 된 버전을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5536b98ab016fe61807564b4a34c80211a7613" translate="yes" xml:space="preserve">
          <source>Memory management</source>
          <target state="translated">메모리 관리</target>
        </trans-unit>
        <trans-unit id="0a38fd0c75a4edd44f08cff5d6dee1bf1d895b56" translate="yes" xml:space="preserve">
          <source>Memory safety for returning by &lt;code&gt;var T&lt;/code&gt; is ensured by a simple borrowing rule: If &lt;code&gt;result&lt;/code&gt; does not refer to a location pointing to the heap (that is in &lt;code&gt;result = X&lt;/code&gt; the &lt;code&gt;X&lt;/code&gt; involves a &lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;ref&lt;/code&gt; access) then it has to be derived from the routine's first parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9baa9878dfbef1d35fc905168a10b0c4a8c0fbd9" translate="yes" xml:space="preserve">
          <source>Memory safety for returning by &lt;code&gt;var T&lt;/code&gt; is ensured by a simple borrowing rule: If &lt;code&gt;result&lt;/code&gt; does not refer to a location pointing to the heap (that is in &lt;code&gt;result = X&lt;/code&gt; the &lt;code&gt;X&lt;/code&gt; involves a &lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;ref&lt;/code&gt; access) then it has to be deviated by the routine's first parameter:</source>
          <target state="translated">&lt;code&gt;var T&lt;/code&gt; 에 의한 반환에 대한 메모리 안전성 은 간단한 빌리기 규칙에 의해 보장됩니다. &lt;code&gt;result&lt;/code&gt; 가 힙을 가리키는 위치를 참조하지 않는 경우 ( &lt;code&gt;result = X&lt;/code&gt; 는 &lt;code&gt;X&lt;/code&gt; 에 &lt;code&gt;ptr&lt;/code&gt; 또는 &lt;code&gt;ref&lt;/code&gt; 액세스가 포함됨) 루틴의 첫 번째 매개 변수 :</target>
        </trans-unit>
        <trans-unit id="68b01759ed73d2656f376537320817eccdacee45" translate="yes" xml:space="preserve">
          <source>Merges all index files in &lt;code&gt;dir&lt;/code&gt; and returns the generated index as HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ff34431595cf400d81245be2a86a83f82386dd" translate="yes" xml:space="preserve">
          <source>Merges all index files in &lt;em&gt;dir&lt;/em&gt; and returns the generated index as HTML.</source>
          <target state="translated">&lt;em&gt;dir의&lt;/em&gt; 모든 색인 파일을 병합 하고 생성 된 색인을 HTML로 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c08446305ac72d52aeff6051e72faf9d7787f9fc" translate="yes" xml:space="preserve">
          <source>Merges all separated TextNodes together, and removes any empty TextNodes</source>
          <target state="translated">분리 된 모든 TextNode를 병합하고 비어있는 TextNode를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="c42db407f8ba796f4e3f875584c617d02edd91ec" translate="yes" xml:space="preserve">
          <source>Merges the second table into the first one (must be declared as &lt;code&gt;var&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb7c3fc486b91ac1b3d99ffad713c97f7f0fff2" translate="yes" xml:space="preserve">
          <source>Merges the second table into the first one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ad9464050cf4d3ee343c86b03f2ad81189345c" translate="yes" xml:space="preserve">
          <source>Messages below the provided level will not be logged regardless of an individual logger's &lt;code&gt;levelThreshold&lt;/code&gt;. By default, all messages are logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ef168ac38cdf5d66a3f96ccc53c0bcb2bec97c" translate="yes" xml:space="preserve">
          <source>Messages that are generated during the normal operation of an application and are of no particular importance. Useful to aggregate for potential later analysis.</source>
          <target state="translated">응용 프로그램이 정상적으로 작동하는 동안 생성되며 특별히 중요하지 않은 메시지. 나중에 분석 할 수 있도록 집계하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="949ba2d44e279ebf601f54248d567bd067f76669" translate="yes" xml:space="preserve">
          <source>Messages that are useful to the application developer only and are usually turned off in release.</source>
          <target state="translated">응용 프로그램 개발자에게만 유용하며 일반적으로 릴리스에서 해제 된 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="745b524d1313b50d56dc4991d7fc4ac3d21800cb" translate="yes" xml:space="preserve">
          <source>Meta type for any supported type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e5c5161e7a7c9285e03921cabfd568d0518d0a" translate="yes" xml:space="preserve">
          <source>Meta type for automatic type determination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ad96c9b95130a56606328afa6d6d10ebb1ba2e" translate="yes" xml:space="preserve">
          <source>Meta type representing all values that can be evaluated at compile-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcba27001b21567b00d6f558d2497605e5c712b" translate="yes" xml:space="preserve">
          <source>Meta type representing the type of all type values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42755bad5b6307551c0eac2353fd3f894c84162d" translate="yes" xml:space="preserve">
          <source>Meta type to denote a type description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d166ae24c012ef333326f369b157886d4c27a076" translate="yes" xml:space="preserve">
          <source>Meta type to denote an expression that is not resolved (for templates).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9df6b2690537d3b2d8b0ba2b813d39fe2dc19b" translate="yes" xml:space="preserve">
          <source>Meta type to denote an expression that is resolved (for templates).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b28d00950315a9c724dc36367a067b14aa413c" translate="yes" xml:space="preserve">
          <source>Meta type to denote the absence of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de329f9988dc07ac218d31798f3d3fb0e319aeeb" translate="yes" xml:space="preserve">
          <source>Method call syntax</source>
          <target state="translated">메소드 호출 구문</target>
        </trans-unit>
        <trans-unit id="b768cedc4687283126d9b1ed420f777b12a98828" translate="yes" xml:space="preserve">
          <source>Method dispatchers are global.</source>
          <target state="translated">메소드 디스패처는 글로벌입니다.</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="3c397a7933a859382d85ab67743d94fecb8793cf" translate="yes" xml:space="preserve">
          <source>Methods and type converters</source>
          <target state="translated">방법 및 유형 변환기</target>
        </trans-unit>
        <trans-unit id="97688c42bbe7b8796c3a711bbfe491fd460e5719" translate="yes" xml:space="preserve">
          <source>Methods imply &lt;a href=&quot;https://nim-lang.org/docs/tut2.html#object-oriented-programming-dynamic-dispatch&quot;&gt;dynamic dispatch&lt;/a&gt; and idetools performs a static analysis on the code. For this reason idetools may not return the definition of the correct method you are querying because it may be impossible to know until the code is executed. It will try to return the method which covers the most possible cases (i.e. for variations of different classes in a hierarchy it will prefer methods using the base class).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70972ae112e939ad343653a1ba078194eea37b73" translate="yes" xml:space="preserve">
          <source>Methods imply &lt;a href=&quot;tut2#dynamic-dispatch&quot;&gt;dynamic dispatch&lt;/a&gt; and idetools performs a static analysis on the code. For this reason idetools may not return the definition of the correct method you are querying because it may be impossible to know until the code is executed. It will try to return the method which covers the most possible cases (i.e. for variations of different classes in a hierarchy it will prefer methods using the base class).</source>
          <target state="translated">메소드는 &lt;a href=&quot;tut2#dynamic-dispatch&quot;&gt;동적 디스패치를&lt;/a&gt; 의미 하며 idetools는 코드에서 정적 분석을 수행합니다. 이러한 이유로 idetools는 코드가 실행될 때까지 알기가 불가능하기 때문에 쿼리하는 올바른 메소드의 정의를 리턴하지 않을 수 있습니다. 가장 가능한 경우를 다루는 메소드를 리턴하려고 시도합니다 (즉, 계층 구조에서 다른 클래스의 변형에 대해서는 기본 클래스를 사용하는 메소드를 선호 함).</target>
        </trans-unit>
        <trans-unit id="53abbdb21e81e3f2df2cf14c89d5b6dbabdbe501" translate="yes" xml:space="preserve">
          <source>Microseconds display</source>
          <target state="translated">마이크로 초 표시</target>
        </trans-unit>
        <trans-unit id="71a3c685e2a1c832e7011ccdc9b0d684ec6c5b11" translate="yes" xml:space="preserve">
          <source>Milliseconds display</source>
          <target state="translated">밀리 초 표시</target>
        </trans-unit>
        <trans-unit id="f0ba6bd90de6cbdc1ad731d5daa371ecb83efe18" translate="yes" xml:space="preserve">
          <source>Minimal output level for the compiler.</source>
          <target state="translated">컴파일러의 최소 출력 레벨.</target>
        </trans-unit>
        <trans-unit id="011feb85fd840211ebe3cbea6d10c757384f0950" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent for 32-bit floating-point numbers.</source>
          <target state="translated">32 비트 부동 소수점 숫자에 대한 최소 (음수) 지수.</target>
        </trans-unit>
        <trans-unit id="a6a8707c6b54291fbf3e81a23b30ec1365b0f17e" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent for 64-bit floating-point numbers.</source>
          <target state="translated">64 비트 부동 소수점 숫자의 최소 (음수) 지수입니다.</target>
        </trans-unit>
        <trans-unit id="c80cc0223dc92abbd631516781aea6a70a2336ee" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent in base 10 for 32-bit floating-point numbers.</source>
          <target state="translated">32 비트 부동 소수점 숫자에 대한 기수 10의 최소 (음수) 지수입니다.</target>
        </trans-unit>
        <trans-unit id="8c0da4d03317d4bba985f6d156cd17b8a1e9fe83" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent in base 10 for 64-bit floating-point numbers.</source>
          <target state="translated">64 비트 부동 소수점 숫자에 대한 기수 10의 최소 (음수) 지수입니다.</target>
        </trans-unit>
        <trans-unit id="0a893ece8e469a3ca3d935c49f41d08d04b75ecc" translate="yes" xml:space="preserve">
          <source>Misc</source>
          <target state="translated">Misc</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="028fd1a0a99c9d789b13fd91c79f7fe63aac28bd" translate="yes" xml:space="preserve">
          <source>MismatchInfo:</source>
          <target state="translated">MismatchInfo:</target>
        </trans-unit>
        <trans-unit id="96208c52bfe40b311451c19832de1dbf902b8cb4" translate="yes" xml:space="preserve">
          <source>MismatchKind.kAlreadyGiven</source>
          <target state="translated">MismatchKind.kAlreadyGiven</target>
        </trans-unit>
        <trans-unit id="dde8c986146b366dd5296c5704245b484940cf6e" translate="yes" xml:space="preserve">
          <source>MismatchKind.kExtraArg</source>
          <target state="translated">MismatchKind.kExtraArg</target>
        </trans-unit>
        <trans-unit id="2e27955aa62ddb079374eebc3687a381932877fe" translate="yes" xml:space="preserve">
          <source>MismatchKind.kMissingParam</source>
          <target state="translated">MismatchKind.kMissingParam</target>
        </trans-unit>
        <trans-unit id="7b4b3f8deac6bc906bf7655bec2bfa55b3317c96" translate="yes" xml:space="preserve">
          <source>MismatchKind.kPositionalAlreadyGiven</source>
          <target state="translated">MismatchKind.kPositionalAlreadyGiven</target>
        </trans-unit>
        <trans-unit id="290f807b942dddfb1b058ed0e84dfa3d2c1aacbd" translate="yes" xml:space="preserve">
          <source>MismatchKind.kTypeMismatch</source>
          <target state="translated">MismatchKind.kTypeMismatch</target>
        </trans-unit>
        <trans-unit id="842557c40ae02c3391d8dafcd59ce4e98a69a058" translate="yes" xml:space="preserve">
          <source>MismatchKind.kUnknown</source>
          <target state="translated">MismatchKind.kUnknown</target>
        </trans-unit>
        <trans-unit id="06db4a7e4881e00a062508f9c9478b6218bc9773" translate="yes" xml:space="preserve">
          <source>MismatchKind.kUnknownNamedParam</source>
          <target state="translated">MismatchKind.kUnknownNamedParam</target>
        </trans-unit>
        <trans-unit id="5e717dbad1395b6e5d0f9a8ec94ae1e7721011bb" translate="yes" xml:space="preserve">
          <source>MismatchKind.kVarNeeded</source>
          <target state="translated">MismatchKind.kVarNeeded</target>
        </trans-unit>
        <trans-unit id="85ddd1bf43e69e3d13fa6518199498a93186045a" translate="yes" xml:space="preserve">
          <source>MismatchKind:</source>
          <target state="translated">MismatchKind:</target>
        </trans-unit>
        <trans-unit id="e8150bc1e20b9baba6224e474d8f4f71061c9cca" translate="yes" xml:space="preserve">
          <source>Mixes a hash value &lt;code&gt;h&lt;/code&gt; with &lt;code&gt;val&lt;/code&gt; to produce a new hash value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde8fd6d013071c5b0da03141012d8c86a59338b" translate="yes" xml:space="preserve">
          <source>Mixin statement</source>
          <target state="translated">믹스 인 진술</target>
        </trans-unit>
        <trans-unit id="6a1399a1dd8e426e9dc9e0c8af822db72d3d7a45" translate="yes" xml:space="preserve">
          <source>Mixing GC'ed memory with &lt;code&gt;ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a58f4d81597ea468c275c465f53b922146c355" translate="yes" xml:space="preserve">
          <source>Mixing parameters that should use the &lt;code&gt;using&lt;/code&gt; declaration with parameters that are explicitly typed is possible and requires a semicolon between them.</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt; 선언을 사용해야하는 매개 변수와 명시 적으로 입력 된 매개 변수를 혼합하는 것이 가능하며 그 사이에 세미콜론이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="4ecdff6e2393b538227b8c0c9548fc4c65635034" translate="yes" xml:space="preserve">
          <source>Modeling currencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4544d11fd6da006e85425de7ccf9cc035a9102d" translate="yes" xml:space="preserve">
          <source>Modelling currencies</source>
          <target state="translated">통화 모델링</target>
        </trans-unit>
        <trans-unit id="aa74d48711737b61f9e3b5b05bb11e9299107ca2" translate="yes" xml:space="preserve">
          <source>Modifies the prefix of this node</source>
          <target state="translated">이 노드의 접두사를 수정합니다</target>
        </trans-unit>
        <trans-unit id="08534cfcbbc9538479a2881f8f4160931eb1a4e4" translate="yes" xml:space="preserve">
          <source>Modify &lt;code&gt;a&lt;/code&gt; in place by adding &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 추가하여 제자리에서 수정 &lt;code&gt;a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d316a8d9b4204cded1b078dfca344f13947d6088" translate="yes" xml:space="preserve">
          <source>Modify &lt;code&gt;a&lt;/code&gt; in place by subtracting &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 빼서 a를 수정 &lt;code&gt;a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6644cf977e14c9d8febd0df44cd34bcc74954d9" translate="yes" xml:space="preserve">
          <source>Modifying a configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf753b23cff3eb87675698eadfe1b3df8dc21c1" translate="yes" xml:space="preserve">
          <source>Modifying a configuration file.</source>
          <target state="translated">구성 파일 수정</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="37f0da15f20ceb74b60fd308e1dca9126540cb05" translate="yes" xml:space="preserve">
          <source>Module algorithm</source>
          <target state="translated">모듈 알고리즘</target>
        </trans-unit>
        <trans-unit id="98195ccd152814f0ec7cb526f9dfddd0c0f2d040" translate="yes" xml:space="preserve">
          <source>Module asyncdispatch</source>
          <target state="translated">모듈 비동기 디스패치</target>
        </trans-unit>
        <trans-unit id="4bc2eee542f289752eea25797a5b576fdb1f0212" translate="yes" xml:space="preserve">
          <source>Module asyncfile</source>
          <target state="translated">모듈 비동기 파일</target>
        </trans-unit>
        <trans-unit id="1982b034043183e25a12a7f8201ac7aedfe1337c" translate="yes" xml:space="preserve">
          <source>Module asyncftpclient</source>
          <target state="translated">모듈 asyncftpclient</target>
        </trans-unit>
        <trans-unit id="c8ecdd97327b90a5e22c271e6446280bc42a28c4" translate="yes" xml:space="preserve">
          <source>Module asyncfutures</source>
          <target state="translated">모듈 비동기</target>
        </trans-unit>
        <trans-unit id="36cb7286c251d44bed6e333ac6ff256e07f23e46" translate="yes" xml:space="preserve">
          <source>Module asynchttpserver</source>
          <target state="translated">모듈 비동기 httpserver</target>
        </trans-unit>
        <trans-unit id="a17c24b3dfb9bd981141eb4c7df0cf7bc771a15a" translate="yes" xml:space="preserve">
          <source>Module asyncio</source>
          <target state="translated">모듈 비동기</target>
        </trans-unit>
        <trans-unit id="c68f5ddf8354a55f6684c3fbe9c3bf177423a499" translate="yes" xml:space="preserve">
          <source>Module asyncjs</source>
          <target state="translated">모듈 비동기</target>
        </trans-unit>
        <trans-unit id="101489cc366780f3080d0d181d612c9897002730" translate="yes" xml:space="preserve">
          <source>Module asyncnet</source>
          <target state="translated">모듈 비동기</target>
        </trans-unit>
        <trans-unit id="6fed8121401f7f3d76d9ac08c713d6fc1d80130c" translate="yes" xml:space="preserve">
          <source>Module asyncstreams</source>
          <target state="translated">모듈 비동기 스트림</target>
        </trans-unit>
        <trans-unit id="7760e4149a4aa9f2f5276da9842c763efe627d2d" translate="yes" xml:space="preserve">
          <source>Module base64</source>
          <target state="translated">모듈 base64</target>
        </trans-unit>
        <trans-unit id="90d38995e07bc5f4bab2517945813fb23c0f041c" translate="yes" xml:space="preserve">
          <source>Module bitops</source>
          <target state="translated">모듈 비트</target>
        </trans-unit>
        <trans-unit id="50eadb9d8cc85daa18b406eb03722df6d8ad89ae" translate="yes" xml:space="preserve">
          <source>Module browsers</source>
          <target state="translated">모듈 브라우저</target>
        </trans-unit>
        <trans-unit id="541c25a9eda5bd8f8b769d4123a86bdd4573b52d" translate="yes" xml:space="preserve">
          <source>Module cgi</source>
          <target state="translated">모듈 CGI</target>
        </trans-unit>
        <trans-unit id="582466c566af045f4b9e5cd6e35678516157979c" translate="yes" xml:space="preserve">
          <source>Module channels</source>
          <target state="translated">모듈 채널</target>
        </trans-unit>
        <trans-unit id="9b8b21dabbac15d101b015114dad88029c7c9e26" translate="yes" xml:space="preserve">
          <source>Module colors</source>
          <target state="translated">모듈 색상</target>
        </trans-unit>
        <trans-unit id="eed8ec6f020ff8aa124c5b37641c245a63ddde69" translate="yes" xml:space="preserve">
          <source>Module complex</source>
          <target state="translated">모듈 콤플렉스</target>
        </trans-unit>
        <trans-unit id="374208eb48a6ab162ea9a9795c69a75d26d8d0d8" translate="yes" xml:space="preserve">
          <source>Module cookies</source>
          <target state="translated">모듈 쿠키</target>
        </trans-unit>
        <trans-unit id="a4721d23b264afe3adb6840e441ad673c273dbe5" translate="yes" xml:space="preserve">
          <source>Module coro</source>
          <target state="translated">모듈 코로</target>
        </trans-unit>
        <trans-unit id="0b7487264409b62ec77bc44946eb6949835043bd" translate="yes" xml:space="preserve">
          <source>Module cpuinfo</source>
          <target state="translated">cpuinfo 모듈</target>
        </trans-unit>
        <trans-unit id="65a4bb57d62e6d50e39758f49fa5d45582a06fcf" translate="yes" xml:space="preserve">
          <source>Module cpuload</source>
          <target state="translated">모듈 CPU로드</target>
        </trans-unit>
        <trans-unit id="0eaf026ca68438c31c5ddb66759abefe57ca491a" translate="yes" xml:space="preserve">
          <source>Module critbits</source>
          <target state="translated">모듈 critbits</target>
        </trans-unit>
        <trans-unit id="17fb6170e7c4b5192d13d3ef92b62003adec52ed" translate="yes" xml:space="preserve">
          <source>Module cstrutils</source>
          <target state="translated">모듈 cstrutils</target>
        </trans-unit>
        <trans-unit id="dccbda4248191deb5d482692eac7fa4e615cc212" translate="yes" xml:space="preserve">
          <source>Module db_common</source>
          <target state="translated">모듈 db_common</target>
        </trans-unit>
        <trans-unit id="8d09576b4e94ea8a8b0016794ba4536d4b1759df" translate="yes" xml:space="preserve">
          <source>Module db_mysql</source>
          <target state="translated">모듈 db_mysql</target>
        </trans-unit>
        <trans-unit id="6624ca243c80fc450c0491ae2bd086e7f22e2273" translate="yes" xml:space="preserve">
          <source>Module db_odbc</source>
          <target state="translated">모듈 db_odbc</target>
        </trans-unit>
        <trans-unit id="fd6fae1e074c3591c208c14db853d9f0744b3fe6" translate="yes" xml:space="preserve">
          <source>Module db_postgres</source>
          <target state="translated">모듈 db_postgres</target>
        </trans-unit>
        <trans-unit id="b401aafda6e7b26047ce7d9b236e3e28ead3b900" translate="yes" xml:space="preserve">
          <source>Module db_sqlite</source>
          <target state="translated">모듈 db_sqlite</target>
        </trans-unit>
        <trans-unit id="a36cab96e59f81b2cfa2e287c992565577181e19" translate="yes" xml:space="preserve">
          <source>Module deques</source>
          <target state="translated">모듈 deques</target>
        </trans-unit>
        <trans-unit id="230fe8691288c49b13cd6d0d633b0aa094bba0ba" translate="yes" xml:space="preserve">
          <source>Module distros</source>
          <target state="translated">모듈 배포</target>
        </trans-unit>
        <trans-unit id="b98b5015c00736657c4dd0da231c080c137bf240" translate="yes" xml:space="preserve">
          <source>Module docgen_sample</source>
          <target state="translated">모듈 docgen_sample</target>
        </trans-unit>
        <trans-unit id="9b3df8bd64b5aae95560173051cb9413193a2ac6" translate="yes" xml:space="preserve">
          <source>Module dom</source>
          <target state="translated">모듈 돔</target>
        </trans-unit>
        <trans-unit id="941b4acd398cb84658e8c03ee70acb8a6a6ad12b" translate="yes" xml:space="preserve">
          <source>Module dynlib</source>
          <target state="translated">모듈 dynlib</target>
        </trans-unit>
        <trans-unit id="0b682ac70a1c85d9baf3957f2aa8f759d24240e0" translate="yes" xml:space="preserve">
          <source>Module encodings</source>
          <target state="translated">모듈 인코딩</target>
        </trans-unit>
        <trans-unit id="db5b0c91c31ae7c7d91818dc9b614356c8ac354a" translate="yes" xml:space="preserve">
          <source>Module endians</source>
          <target state="translated">모듈 엔디 언</target>
        </trans-unit>
        <trans-unit id="bd74d2f3f124ee315af73875094015c9b005becf" translate="yes" xml:space="preserve">
          <source>Module fenv</source>
          <target state="translated">모듈 fenv</target>
        </trans-unit>
        <trans-unit id="4f649eaa7731f9dd2821a65a914c390a48c5977c" translate="yes" xml:space="preserve">
          <source>Module for computing &lt;a href=&quot;https://en.wikipedia.org/wiki/MD5&quot;&gt;MD5 checksums&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731086b25ca52f0d4ba784e9023a512802282c5d" translate="yes" xml:space="preserve">
          <source>Module for computing MD5 checksums.</source>
          <target state="translated">MD5 체크섬을 계산하기위한 모듈.</target>
        </trans-unit>
        <trans-unit id="b4be1b80500b5ac048dcc726ed598ece6701931b" translate="yes" xml:space="preserve">
          <source>Module ftpclient</source>
          <target state="translated">모듈 ftpclient</target>
        </trans-unit>
        <trans-unit id="3c4f086976fa89f11b3a0b18d36e2a8854016a20" translate="yes" xml:space="preserve">
          <source>Module hashes</source>
          <target state="translated">모듈 해시</target>
        </trans-unit>
        <trans-unit id="a2e15c184ec6f1cb32588bee5d5ccb0d11dcc6e5" translate="yes" xml:space="preserve">
          <source>Module heapqueue</source>
          <target state="translated">모듈 힙큐</target>
        </trans-unit>
        <trans-unit id="83b2786d0af670a8727d352ab2cc17a4801a8fde" translate="yes" xml:space="preserve">
          <source>Module highlite</source>
          <target state="translated">모듈 하이라이트</target>
        </trans-unit>
        <trans-unit id="68378bdbde20dbf762ba106c90a960cc76a0c343" translate="yes" xml:space="preserve">
          <source>Module htmlgen</source>
          <target state="translated">모듈 htmlgen</target>
        </trans-unit>
        <trans-unit id="11585b007040719709343df6d82764795667bb4d" translate="yes" xml:space="preserve">
          <source>Module htmlparser</source>
          <target state="translated">모듈 htmlparser</target>
        </trans-unit>
        <trans-unit id="ce266765149cfec68daffab151c2d1cbb6ebb974" translate="yes" xml:space="preserve">
          <source>Module httpclient</source>
          <target state="translated">모듈 httpclient</target>
        </trans-unit>
        <trans-unit id="ae17027dff9b5c5e08184e61c512b15de51aca77" translate="yes" xml:space="preserve">
          <source>Module httpcore</source>
          <target state="translated">모듈 httpcore</target>
        </trans-unit>
        <trans-unit id="efcdd786f2c6fa38c8e234f0d6d253c5564d8710" translate="yes" xml:space="preserve">
          <source>Module intsets</source>
          <target state="translated">모듈 intsets</target>
        </trans-unit>
        <trans-unit id="ae1f8df6d1f31431338fdcd3f32d3d351bdb0f67" translate="yes" xml:space="preserve">
          <source>Module iup</source>
          <target state="translated">모듈 iup</target>
        </trans-unit>
        <trans-unit id="8abdec2103ddf3b91238dc0ef753306e3cf948a1" translate="yes" xml:space="preserve">
          <source>Module jscore</source>
          <target state="translated">모듈 jscore</target>
        </trans-unit>
        <trans-unit id="2445c7a3a0648ca25b67b51a400e8dde36b920dc" translate="yes" xml:space="preserve">
          <source>Module jsffi</source>
          <target state="translated">모듈 jsffi</target>
        </trans-unit>
        <trans-unit id="3e231af76878f00ab682498609250b7a33902b37" translate="yes" xml:space="preserve">
          <source>Module json</source>
          <target state="translated">모듈 JSON</target>
        </trans-unit>
        <trans-unit id="37345fc873fd9ef2206568b360b1c24cb44c6a79" translate="yes" xml:space="preserve">
          <source>Module lenientops</source>
          <target state="translated">모듈 lenientops</target>
        </trans-unit>
        <trans-unit id="580e2f376943e7c873eabc0e8de78d45329a29d4" translate="yes" xml:space="preserve">
          <source>Module lexbase</source>
          <target state="translated">모듈 lexbase</target>
        </trans-unit>
        <trans-unit id="f7eb0bf35deb63519acf61a5dc69c51f5b06735f" translate="yes" xml:space="preserve">
          <source>Module lists</source>
          <target state="translated">모듈 목록</target>
        </trans-unit>
        <trans-unit id="5fa64d315f22284a510ec90f2b3766f8771aa4d3" translate="yes" xml:space="preserve">
          <source>Module locks</source>
          <target state="translated">모듈 잠금</target>
        </trans-unit>
        <trans-unit id="d68a3f14f1246e34391c7c956005b435126a1feb" translate="yes" xml:space="preserve">
          <source>Module logging</source>
          <target state="translated">모듈 로깅</target>
        </trans-unit>
        <trans-unit id="70e578149237a5fb397ecdf712216171be19d22c" translate="yes" xml:space="preserve">
          <source>Module macros</source>
          <target state="translated">모듈 매크로</target>
        </trans-unit>
        <trans-unit id="8e11adceffbd4622428572ca4afc35c17c825d9b" translate="yes" xml:space="preserve">
          <source>Module marshal</source>
          <target state="translated">모듈 마샬</target>
        </trans-unit>
        <trans-unit id="33c70e8cca5fc846249c996c55efdccf09fa04af" translate="yes" xml:space="preserve">
          <source>Module matchers</source>
          <target state="translated">모듈 매처</target>
        </trans-unit>
        <trans-unit id="60528f0928b59cfa4557a3b1b994edb4024106b0" translate="yes" xml:space="preserve">
          <source>Module math</source>
          <target state="translated">모듈 수학</target>
        </trans-unit>
        <trans-unit id="56d8fbdebc1eb23f12cddf043b4f3037a450710a" translate="yes" xml:space="preserve">
          <source>Module md5</source>
          <target state="translated">모듈 md5</target>
        </trans-unit>
        <trans-unit id="bce77eb47d51483993e4fa0db56b0547cc3dd24c" translate="yes" xml:space="preserve">
          <source>Module memfiles</source>
          <target state="translated">모듈 memfile</target>
        </trans-unit>
        <trans-unit id="20df3a115fcb30f9b530aa03bdc18faa0ae695c2" translate="yes" xml:space="preserve">
          <source>Module mersenne</source>
          <target state="translated">모듈 메르 센</target>
        </trans-unit>
        <trans-unit id="cc1b82bbab0603a47f41c5adca38b87a9321bee7" translate="yes" xml:space="preserve">
          <source>Module mimetypes</source>
          <target state="translated">모듈 mimetypes</target>
        </trans-unit>
        <trans-unit id="6657cfabe7d07bf51cc2fb118ba722ffc96aba89" translate="yes" xml:space="preserve">
          <source>Module mysql</source>
          <target state="translated">모듈 mysql</target>
        </trans-unit>
        <trans-unit id="31d0c7d344fc5c65774ddf00049b1876645f3b19" translate="yes" xml:space="preserve">
          <source>Module names in imports</source>
          <target state="translated">수입품의 모듈 이름</target>
        </trans-unit>
        <trans-unit id="30df598104815cce6ad06791aec2a9d153b164f7" translate="yes" xml:space="preserve">
          <source>Module nativesockets</source>
          <target state="translated">모듈 네이티브 소켓</target>
        </trans-unit>
        <trans-unit id="a3d7a3865b172afee6c2b7c8977de511e77b6757" translate="yes" xml:space="preserve">
          <source>Module net</source>
          <target state="translated">모듈 네트</target>
        </trans-unit>
        <trans-unit id="6c357de2b2a9a1de2189540c4281941a77608057" translate="yes" xml:space="preserve">
          <source>Module odbcsql</source>
          <target state="translated">모듈 odbcsql</target>
        </trans-unit>
        <trans-unit id="9ac9afd12fcca720ece0b72dd61269f6e7843617" translate="yes" xml:space="preserve">
          <source>Module oids</source>
          <target state="translated">모듈 oids</target>
        </trans-unit>
        <trans-unit id="df6c016676012b7a90d7af54c2025872180c6083" translate="yes" xml:space="preserve">
          <source>Module openssl</source>
          <target state="translated">모듈 openssl</target>
        </trans-unit>
        <trans-unit id="181f431ffc709c06a61935e69331ac8e4563f46c" translate="yes" xml:space="preserve">
          <source>Module options</source>
          <target state="translated">모듈 옵션</target>
        </trans-unit>
        <trans-unit id="7f661395966d22306bb86d25ec0d945d397507a0" translate="yes" xml:space="preserve">
          <source>Module os</source>
          <target state="translated">모듈 OS</target>
        </trans-unit>
        <trans-unit id="dae29e69d6fcac477476832d0c04d256e4219700" translate="yes" xml:space="preserve">
          <source>Module ospaths</source>
          <target state="translated">모듈 경로</target>
        </trans-unit>
        <trans-unit id="5395928ecc4ce4edf1eabd8f020d30b8523fd803" translate="yes" xml:space="preserve">
          <source>Module osproc</source>
          <target state="translated">모듈 osproc</target>
        </trans-unit>
        <trans-unit id="2bfeeb302a2c2fb80d26255c95b4f0b069b97c41" translate="yes" xml:space="preserve">
          <source>Module parsecfg</source>
          <target state="translated">모듈 구문 분석</target>
        </trans-unit>
        <trans-unit id="d9ee6d4bae252aefed2ecd2ae012f67dfe339140" translate="yes" xml:space="preserve">
          <source>Module parsecsv</source>
          <target state="translated">모듈 파섹</target>
        </trans-unit>
        <trans-unit id="348399e23d1c192b9c45e1b0c83d05337c92bf98" translate="yes" xml:space="preserve">
          <source>Module parsejson</source>
          <target state="translated">모듈 파서 손</target>
        </trans-unit>
        <trans-unit id="682e643a35975c3826db50e0bb0cd0dd5c2ca34f" translate="yes" xml:space="preserve">
          <source>Module parseopt</source>
          <target state="translated">모듈 분석</target>
        </trans-unit>
        <trans-unit id="0ed92eaefc270e8b9dd075eb2dd08dbaa5b51f01" translate="yes" xml:space="preserve">
          <source>Module parsesql</source>
          <target state="translated">모듈 구문 분석</target>
        </trans-unit>
        <trans-unit id="855c130387d410a61e37f5b34d034cd98d89f8d8" translate="yes" xml:space="preserve">
          <source>Module parseutils</source>
          <target state="translated">모듈 구문 분석</target>
        </trans-unit>
        <trans-unit id="9371c7c885849232742553f842dca9202b5ed289" translate="yes" xml:space="preserve">
          <source>Module parsexml</source>
          <target state="translated">모듈 구문 분석</target>
        </trans-unit>
        <trans-unit id="20024d265db3ebf3a4cb1f9d150f212626383df7" translate="yes" xml:space="preserve">
          <source>Module pcre</source>
          <target state="translated">모듈 pcre</target>
        </trans-unit>
        <trans-unit id="a17a4c9cec16cef361a14841e228e5ed78a25395" translate="yes" xml:space="preserve">
          <source>Module pegs</source>
          <target state="translated">모듈 못</target>
        </trans-unit>
        <trans-unit id="5f3bf0ccd39bc7809674b2d661113030c738201e" translate="yes" xml:space="preserve">
          <source>Module posix</source>
          <target state="translated">모듈 posix</target>
        </trans-unit>
        <trans-unit id="eef6ef7935050ba1da22c08049e0e742ab0545c6" translate="yes" xml:space="preserve">
          <source>Module postgres</source>
          <target state="translated">모듈 postgres</target>
        </trans-unit>
        <trans-unit id="4c337d9754fa6144e8e8c63eb6714830a7bf2680" translate="yes" xml:space="preserve">
          <source>Module random</source>
          <target state="translated">임의 모듈</target>
        </trans-unit>
        <trans-unit id="6f3863bd09c8389a708515de060c50fe217a1fc5" translate="yes" xml:space="preserve">
          <source>Module rationals</source>
          <target state="translated">모듈 합리성</target>
        </trans-unit>
        <trans-unit id="1c6043ad9977193e14836b1453a2c14e877b9c12" translate="yes" xml:space="preserve">
          <source>Module re</source>
          <target state="translated">모듈 다시</target>
        </trans-unit>
        <trans-unit id="beb8a46432b339ddaa74839d412412426afb7728" translate="yes" xml:space="preserve">
          <source>Module rlocks</source>
          <target state="translated">모듈 록</target>
        </trans-unit>
        <trans-unit id="373d2a7e384e4c78df72f2a532ade493280ab5b9" translate="yes" xml:space="preserve">
          <source>Module ropes</source>
          <target state="translated">모듈 로프</target>
        </trans-unit>
        <trans-unit id="791fafc4980538594d1205be2e024d8f062a8ef6" translate="yes" xml:space="preserve">
          <source>Module rst</source>
          <target state="translated">모듈 첫</target>
        </trans-unit>
        <trans-unit id="e62ac437c8e15e65ba3f4a9ec5166f39349d24d8" translate="yes" xml:space="preserve">
          <source>Module rstast</source>
          <target state="translated">모듈 rstast</target>
        </trans-unit>
        <trans-unit id="71d839f9565a57347512e1bcb1209ad6ecbd1571" translate="yes" xml:space="preserve">
          <source>Module rstgen</source>
          <target state="translated">모듈 rstgen</target>
        </trans-unit>
        <trans-unit id="64202e11eebaa8fdc9db2592feeeca4f21b321b4" translate="yes" xml:space="preserve">
          <source>Module rtarrays</source>
          <target state="translated">모듈 rtarrays</target>
        </trans-unit>
        <trans-unit id="34de3c41db61af2ec348412e142cf1de55f30e2c" translate="yes" xml:space="preserve">
          <source>Module scgi</source>
          <target state="translated">모듈 scgi</target>
        </trans-unit>
        <trans-unit id="9d18a075abac676c24c84bba7822fb5ce2702cec" translate="yes" xml:space="preserve">
          <source>Module scope</source>
          <target state="translated">모듈 범위</target>
        </trans-unit>
        <trans-unit id="b6a250923bc9b9d586fc748c435010dc3db2a298" translate="yes" xml:space="preserve">
          <source>Module segfaults</source>
          <target state="translated">모듈 segfaults</target>
        </trans-unit>
        <trans-unit id="8208cbe439f9b79060081af450aa66cdb0a714b6" translate="yes" xml:space="preserve">
          <source>Module selectors</source>
          <target state="translated">모듈 선택기</target>
        </trans-unit>
        <trans-unit id="23026b5c559a2292c7babd2476fc9f08c5816964" translate="yes" xml:space="preserve">
          <source>Module sequtils</source>
          <target state="translated">모듈 sequtils</target>
        </trans-unit>
        <trans-unit id="c3ea468cd06b16c0644d2bacc8da61f318bab4bb" translate="yes" xml:space="preserve">
          <source>Module sets</source>
          <target state="translated">모듈 세트</target>
        </trans-unit>
        <trans-unit id="a16a3e9b2eb88fe04764ed85fb0218873cc38566" translate="yes" xml:space="preserve">
          <source>Module sexp</source>
          <target state="translated">모듈 섹스</target>
        </trans-unit>
        <trans-unit id="59d0872f6bd60a77e18aa4238e904f432277b85d" translate="yes" xml:space="preserve">
          <source>Module sha1</source>
          <target state="translated">모듈 sha1</target>
        </trans-unit>
        <trans-unit id="4ece62635ed6e99fbdb3e080b7996745d5c3b1f3" translate="yes" xml:space="preserve">
          <source>Module sharedlist</source>
          <target state="translated">모듈 공유 목록</target>
        </trans-unit>
        <trans-unit id="b5e68bfc8c55fb54fde0c83c3f95af5feaf92c9b" translate="yes" xml:space="preserve">
          <source>Module sharedtables</source>
          <target state="translated">모듈 공유 테이블</target>
        </trans-unit>
        <trans-unit id="c339964428c500099d3daed6fb8542e3b613f1ef" translate="yes" xml:space="preserve">
          <source>Module smtp</source>
          <target state="translated">모듈 smtp</target>
        </trans-unit>
        <trans-unit id="ac4edb7026adc886e3dd2c3c0e2fa6b2624eac99" translate="yes" xml:space="preserve">
          <source>Module sockets</source>
          <target state="translated">모듈 소켓</target>
        </trans-unit>
        <trans-unit id="44b9eae64da1d100a47749f8e94861aceb4e1953" translate="yes" xml:space="preserve">
          <source>Module sqlite3</source>
          <target state="translated">모듈 sqlite3</target>
        </trans-unit>
        <trans-unit id="8c907d2d3470228660aa0f1c6e876cce39cd9be0" translate="yes" xml:space="preserve">
          <source>Module ssl</source>
          <target state="translated">모듈 SSL</target>
        </trans-unit>
        <trans-unit id="5dddec2bc7b6889e3d6e4572f0e2abcd568ae642" translate="yes" xml:space="preserve">
          <source>Module stats</source>
          <target state="translated">모듈 통계</target>
        </trans-unit>
        <trans-unit id="af7ea72f6db5731696a9ec545d89e8dbf5355b5e" translate="yes" xml:space="preserve">
          <source>Module streams</source>
          <target state="translated">모듈 스트림</target>
        </trans-unit>
        <trans-unit id="d563539aac0aa375abd30d9cff848fd83c1d6b90" translate="yes" xml:space="preserve">
          <source>Module strformat</source>
          <target state="translated">모듈 형식</target>
        </trans-unit>
        <trans-unit id="c5b35d487655735440b1511f4cbcb6212ffb09bf" translate="yes" xml:space="preserve">
          <source>Module strmisc</source>
          <target state="translated">모듈 strmisc</target>
        </trans-unit>
        <trans-unit id="39a556995953f0750f993afaabbda0fb9aa0c361" translate="yes" xml:space="preserve">
          <source>Module strscans</source>
          <target state="translated">모듈 스캔</target>
        </trans-unit>
        <trans-unit id="9add54a0554d7d5e3b57ccafbebed36cfff3a00a" translate="yes" xml:space="preserve">
          <source>Module strtabs</source>
          <target state="translated">모듈 strtab</target>
        </trans-unit>
        <trans-unit id="2c2fe9377d124f6f70ba53c4aac93232b71c1394" translate="yes" xml:space="preserve">
          <source>Module strutils</source>
          <target state="translated">모듈 strutils</target>
        </trans-unit>
        <trans-unit id="c427c4ed878b917bab65e9b41afb7305c3c93c47" translate="yes" xml:space="preserve">
          <source>Module subexes</source>
          <target state="translated">모듈 하위 실행</target>
        </trans-unit>
        <trans-unit id="2ff9cf6c55f0b207b0fa1b96a01a770ee71c8eaa" translate="yes" xml:space="preserve">
          <source>Module sugar</source>
          <target state="translated">모듈 설탕</target>
        </trans-unit>
        <trans-unit id="de70d79767a9e812db99a7c477172374c0a8abe1" translate="yes" xml:space="preserve">
          <source>Module system</source>
          <target state="translated">모듈 시스템</target>
        </trans-unit>
        <trans-unit id="e9cc05615900094d98054d721ed949701ef00a47" translate="yes" xml:space="preserve">
          <source>Module tables</source>
          <target state="translated">모듈 테이블</target>
        </trans-unit>
        <trans-unit id="12b55983071a387f9c09feaf0f6a54c990c5be1d" translate="yes" xml:space="preserve">
          <source>Module terminal</source>
          <target state="translated">모듈 단자</target>
        </trans-unit>
        <trans-unit id="614274ba9e86ccebbb22de6ea6a0cbd12ff4b918" translate="yes" xml:space="preserve">
          <source>Module that implements &lt;code&gt;gorge&lt;/code&gt; for the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ba9986fea98d5aed3aa1e050cd37789056e75a" translate="yes" xml:space="preserve">
          <source>Module that implements a fixed length array whose size is determined at runtime. Note: This is not ready for other people to use!</source>
          <target state="translated">런타임에 크기가 결정되는 고정 길이 배열을 구현하는 모듈. 참고 : 이것은 다른 사람들이 사용할 준비가되지 않았습니다!</target>
        </trans-unit>
        <trans-unit id="3b2dabb54c51f17c55a0e6927caa5f742504ae33" translate="yes" xml:space="preserve">
          <source>Module threadpool</source>
          <target state="translated">모듈 스레드 풀</target>
        </trans-unit>
        <trans-unit id="f92a75aeabfd1c4044569aecab8ccb991701806b" translate="yes" xml:space="preserve">
          <source>Module threads</source>
          <target state="translated">모듈 스레드</target>
        </trans-unit>
        <trans-unit id="fb3625f5ec0037d48d6c0cb336a239dd3b00b7ca" translate="yes" xml:space="preserve">
          <source>Module times</source>
          <target state="translated">모듈 시간</target>
        </trans-unit>
        <trans-unit id="80fdbaacf746a3cedeab4e5928808c2384a50612" translate="yes" xml:space="preserve">
          <source>Module typeinfo</source>
          <target state="translated">모듈 유형 정보</target>
        </trans-unit>
        <trans-unit id="2b741b4fc7fd10f81b2d720dc6c96f43017249fb" translate="yes" xml:space="preserve">
          <source>Module typetraits</source>
          <target state="translated">모듈 유형 특성</target>
        </trans-unit>
        <trans-unit id="9043c86e7cedc7aab24be69a0efdba5ddf0f80e5" translate="yes" xml:space="preserve">
          <source>Module unicode</source>
          <target state="translated">모듈 유니 코드</target>
        </trans-unit>
        <trans-unit id="7085badef4953ee4bbceb9688b13d4140b27c724" translate="yes" xml:space="preserve">
          <source>Module unittest</source>
          <target state="translated">모듈 단위 테스트</target>
        </trans-unit>
        <trans-unit id="8bbd7d4f48877a7314d216e6ebdb985da4bfafac" translate="yes" xml:space="preserve">
          <source>Module uri</source>
          <target state="translated">모듈 URI</target>
        </trans-unit>
        <trans-unit id="8a680992d6079b9c0e11b05251fd8f87bfbf1fe8" translate="yes" xml:space="preserve">
          <source>Module winlean</source>
          <target state="translated">윈린 모듈</target>
        </trans-unit>
        <trans-unit id="d8fdebbbc5615918cb9d798309cb31cd866e4994" translate="yes" xml:space="preserve">
          <source>Module xmldom</source>
          <target state="translated">모듈 xmldom</target>
        </trans-unit>
        <trans-unit id="f295719f36ed63526a4da7b30de4cad8a8999c32" translate="yes" xml:space="preserve">
          <source>Module xmldomparser</source>
          <target state="translated">모듈 xmldomparser</target>
        </trans-unit>
        <trans-unit id="634e83af2de2c8fae54f36c85ad255fa78fdc1fe" translate="yes" xml:space="preserve">
          <source>Module xmlparser</source>
          <target state="translated">모듈 xmlparser</target>
        </trans-unit>
        <trans-unit id="fffc921107774b45b37fb11a2ae26e6c1756df47" translate="yes" xml:space="preserve">
          <source>Module xmltree</source>
          <target state="translated">모듈 xmltree</target>
        </trans-unit>
        <trans-unit id="45af4cf6ccf032d5220bb10282d464dff0f1c268" translate="yes" xml:space="preserve">
          <source>ModuleGraph:</source>
          <target state="translated">ModuleGraph:</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="d4bb1d0c8920c90ab574ded6626feabfc7eb5056" translate="yes" xml:space="preserve">
          <source>Modules for JS backend</source>
          <target state="translated">JS 백엔드 용 모듈</target>
        </trans-unit>
        <trans-unit id="04ed0b03aed0cadb43ffc6bfd838816a8c42b369" translate="yes" xml:space="preserve">
          <source>Modules like &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;osproc&lt;/code&gt; use the Ansi versions of the Windows API. The default build uses the Unicode version.</source>
          <target state="translated">&lt;code&gt;os&lt;/code&gt; 및 &lt;code&gt;osproc&lt;/code&gt; 와 같은 모듈 은 Ansi 버전의 Windows API를 사용합니다. 기본 빌드는 유니 코드 버전을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1c9091d31470e1e3096ea3102d2a4a3a375f35ee" translate="yes" xml:space="preserve">
          <source>Modules: &lt;a href=&quot;aliases&quot;&gt;aliases&lt;/a&gt;, &lt;a href=&quot;asciitables&quot;&gt;asciitables&lt;/a&gt;, &lt;a href=&quot;ast&quot;&gt;ast&lt;/a&gt;, &lt;a href=&quot;astalgo&quot;&gt;astalgo&lt;/a&gt;, &lt;a href=&quot;bitsets&quot;&gt;bitsets&lt;/a&gt;, &lt;a href=&quot;btrees&quot;&gt;btrees&lt;/a&gt;, &lt;a href=&quot;ccgmerge&quot;&gt;ccgmerge&lt;/a&gt;, &lt;a href=&quot;ccgutils&quot;&gt;ccgutils&lt;/a&gt;, &lt;a href=&quot;cgen&quot;&gt;cgen&lt;/a&gt;, &lt;a href=&quot;cgendata&quot;&gt;cgendata&lt;/a&gt;, &lt;a href=&quot;cgmeth&quot;&gt;cgmeth&lt;/a&gt;, &lt;a href=&quot;closureiters&quot;&gt;closureiters&lt;/a&gt;, &lt;a href=&quot;cmdlinehelper&quot;&gt;cmdlinehelper&lt;/a&gt;, &lt;a href=&quot;commands&quot;&gt;commands&lt;/a&gt;, &lt;a href=&quot;condsyms&quot;&gt;condsyms&lt;/a&gt;, &lt;a href=&quot;depends&quot;&gt;depends&lt;/a&gt;, &lt;a href=&quot;dfa&quot;&gt;dfa&lt;/a&gt;, &lt;a href=&quot;docgen&quot;&gt;docgen&lt;/a&gt;, &lt;a href=&quot;docgen2&quot;&gt;docgen2&lt;/a&gt;, &lt;a href=&quot;enumtostr&quot;&gt;enumtostr&lt;/a&gt;, &lt;a href=&quot;evaltempl&quot;&gt;evaltempl&lt;/a&gt;, &lt;a href=&quot;extccomp&quot;&gt;extccomp&lt;/a&gt;, &lt;a href=&quot;filter_tmpl&quot;&gt;filter_tmpl&lt;/a&gt;, &lt;a href=&quot;filters&quot;&gt;filters&lt;/a&gt;, &lt;a href=&quot;gorgeimpl&quot;&gt;gorgeimpl&lt;/a&gt;, &lt;a href=&quot;guards&quot;&gt;guards&lt;/a&gt;, &lt;a href=&quot;idents&quot;&gt;idents&lt;/a&gt;, &lt;a href=&quot;idgen&quot;&gt;idgen&lt;/a&gt;, &lt;a href=&quot;importer&quot;&gt;importer&lt;/a&gt;, &lt;a href=&quot;incremental&quot;&gt;incremental&lt;/a&gt;, &lt;a href=&quot;index&quot;&gt;index&lt;/a&gt;, &lt;a href=&quot;injectdestructors&quot;&gt;injectdestructors&lt;/a&gt;, &lt;a href=&quot;int128&quot;&gt;int128&lt;/a&gt;, &lt;a href=&quot;isolation_check&quot;&gt;isolation_check&lt;/a&gt;, &lt;a href=&quot;jsgen&quot;&gt;jsgen&lt;/a&gt;, &lt;a href=&quot;lambdalifting&quot;&gt;lambdalifting&lt;/a&gt;, &lt;a href=&quot;lexer&quot;&gt;lexer&lt;/a&gt;, &lt;a href=&quot;liftdestructors&quot;&gt;liftdestructors&lt;/a&gt;, &lt;a href=&quot;liftlocals&quot;&gt;liftlocals&lt;/a&gt;, &lt;a href=&quot;lineinfos&quot;&gt;lineinfos&lt;/a&gt;, &lt;a href=&quot;linter&quot;&gt;linter&lt;/a&gt;, &lt;a href=&quot;llstream&quot;&gt;llstream&lt;/a&gt;, &lt;a href=&quot;lookups&quot;&gt;lookups&lt;/a&gt;, &lt;a href=&quot;lowerings&quot;&gt;lowerings&lt;/a&gt;, &lt;a href=&quot;macrocacheimpl&quot;&gt;macrocacheimpl&lt;/a&gt;, &lt;a href=&quot;magicsys&quot;&gt;magicsys&lt;/a&gt;, &lt;a href=&quot;main&quot;&gt;main&lt;/a&gt;, &lt;a href=&quot;modulegraphs&quot;&gt;modulegraphs&lt;/a&gt;, &lt;a href=&quot;modulepaths&quot;&gt;modulepaths&lt;/a&gt;, &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt;, &lt;a href=&quot;msgs&quot;&gt;msgs&lt;/a&gt;, &lt;a href=&quot;ndi&quot;&gt;ndi&lt;/a&gt;, &lt;a href=&quot;nimblecmd&quot;&gt;nimblecmd&lt;/a&gt;, &lt;a href=&quot;nimconf&quot;&gt;nimconf&lt;/a&gt;, &lt;a href=&quot;nimfix/prettybase&quot;&gt;nimfix/prettybase&lt;/a&gt;, &lt;a href=&quot;nimlexbase&quot;&gt;nimlexbase&lt;/a&gt;, &lt;a href=&quot;nimpaths&quot;&gt;nimpaths&lt;/a&gt;, &lt;a href=&quot;nimsets&quot;&gt;nimsets&lt;/a&gt;, &lt;a href=&quot;nodejs&quot;&gt;nodejs&lt;/a&gt;, &lt;a href=&quot;nversion&quot;&gt;nversion&lt;/a&gt;, &lt;a href=&quot;optimizer&quot;&gt;optimizer&lt;/a&gt;, &lt;a href=&quot;options&quot;&gt;options&lt;/a&gt;, &lt;a href=&quot;parampatterns&quot;&gt;parampatterns&lt;/a&gt;, &lt;a href=&quot;parser&quot;&gt;parser&lt;/a&gt;, &lt;a href=&quot;passaux&quot;&gt;passaux&lt;/a&gt;, &lt;a href=&quot;passes&quot;&gt;passes&lt;/a&gt;, &lt;a href=&quot;pathutils&quot;&gt;pathutils&lt;/a&gt;, &lt;a href=&quot;patterns&quot;&gt;patterns&lt;/a&gt;, &lt;a href=&quot;platform&quot;&gt;platform&lt;/a&gt;, &lt;a href=&quot;plugins/active&quot;&gt;plugins/active&lt;/a&gt;, &lt;a href=&quot;plugins/itersgen&quot;&gt;plugins/itersgen&lt;/a&gt;, &lt;a href=&quot;plugins/locals&quot;&gt;plugins/locals&lt;/a&gt;, &lt;a href=&quot;pluginsupport&quot;&gt;pluginsupport&lt;/a&gt;, &lt;a href=&quot;pragmas&quot;&gt;pragmas&lt;/a&gt;, &lt;a href=&quot;prefixmatches&quot;&gt;prefixmatches&lt;/a&gt;, &lt;a href=&quot;procfind&quot;&gt;procfind&lt;/a&gt;, &lt;a href=&quot;renderer&quot;&gt;renderer&lt;/a&gt;, &lt;a href=&quot;renderverbatim&quot;&gt;renderverbatim&lt;/a&gt;, &lt;a href=&quot;reorder&quot;&gt;reorder&lt;/a&gt;, &lt;a href=&quot;rod&quot;&gt;rod&lt;/a&gt;, &lt;a href=&quot;rodutils&quot;&gt;rodutils&lt;/a&gt;, &lt;a href=&quot;ropes&quot;&gt;ropes&lt;/a&gt;, &lt;a href=&quot;saturate&quot;&gt;saturate&lt;/a&gt;, &lt;a href=&quot;scriptconfig&quot;&gt;scriptconfig&lt;/a&gt;, &lt;a href=&quot;sem&quot;&gt;sem&lt;/a&gt;, &lt;a href=&quot;semdata&quot;&gt;semdata&lt;/a&gt;, &lt;a href=&quot;semfold&quot;&gt;semfold&lt;/a&gt;, &lt;a href=&quot;semmacrosanity&quot;&gt;semmacrosanity&lt;/a&gt;, &lt;a href=&quot;semparallel&quot;&gt;semparallel&lt;/a&gt;, &lt;a href=&quot;sempass2&quot;&gt;sempass2&lt;/a&gt;, &lt;a href=&quot;semtypinst&quot;&gt;semtypinst&lt;/a&gt;, &lt;a href=&quot;sighashes&quot;&gt;sighashes&lt;/a&gt;, &lt;a href=&quot;sigmatch&quot;&gt;sigmatch&lt;/a&gt;, &lt;a href=&quot;sourcemap&quot;&gt;sourcemap&lt;/a&gt;, &lt;a href=&quot;spawn&quot;&gt;spawn&lt;/a&gt;, &lt;a href=&quot;strutils2&quot;&gt;strutils2&lt;/a&gt;, &lt;a href=&quot;syntaxes&quot;&gt;syntaxes&lt;/a&gt;, &lt;a href=&quot;transf&quot;&gt;transf&lt;/a&gt;, &lt;a href=&quot;trees&quot;&gt;trees&lt;/a&gt;, &lt;a href=&quot;treetab&quot;&gt;treetab&lt;/a&gt;, &lt;a href=&quot;typeallowed&quot;&gt;typeallowed&lt;/a&gt;, &lt;a href=&quot;types&quot;&gt;types&lt;/a&gt;, &lt;a href=&quot;typesrenderer&quot;&gt;typesrenderer&lt;/a&gt;, &lt;a href=&quot;varpartitions&quot;&gt;varpartitions&lt;/a&gt;, &lt;a href=&quot;vm&quot;&gt;vm&lt;/a&gt;, &lt;a href=&quot;vmconv&quot;&gt;vmconv&lt;/a&gt;, &lt;a href=&quot;vmdef&quot;&gt;vmdef&lt;/a&gt;, &lt;a href=&quot;vmdeps&quot;&gt;vmdeps&lt;/a&gt;, &lt;a href=&quot;vmgen&quot;&gt;vmgen&lt;/a&gt;, &lt;a href=&quot;vmmarshal&quot;&gt;vmmarshal&lt;/a&gt;, &lt;a href=&quot;vmprofiler&quot;&gt;vmprofiler&lt;/a&gt;, &lt;a href=&quot;wordrecg&quot;&gt;wordrecg&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2571c920aab1823fe7e5db3bd08bf448ebf8ac40" translate="yes" xml:space="preserve">
          <source>Month and day names from the passed in &lt;code&gt;loc&lt;/code&gt; are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5492a7b7e10ca5189dd3f4f7cd04aaa834acbe84" translate="yes" xml:space="preserve">
          <source>More examples with custom pragmas:</source>
          <target state="translated">맞춤 pragma를 사용한 추가 예 :</target>
        </trans-unit>
        <trans-unit id="02e1b6aeefcbcdce8ddb030e0d03e46f8f19c14b" translate="yes" xml:space="preserve">
          <source>More information: &lt;a href=&quot;http://xoroshiro.di.unimi.it&quot;&gt;http://xoroshiro.di.unimi.it&lt;/a&gt;/</source>
          <target state="translated">자세한 정보 : &lt;a href=&quot;http://xoroshiro.di.unimi.it&quot;&gt;http://xoroshiro.di.unimi.it&lt;/a&gt; /</target>
        </trans-unit>
        <trans-unit id="9f084f0b8d3d49062654975a28486088dd9441d9" translate="yes" xml:space="preserve">
          <source>More than one level of &lt;code&gt;ref&lt;/code&gt; is generally not supported (for example, the type &lt;code&gt;ref ref int&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa11c0cc6358778587e65242e73c28f8b0ce69a" translate="yes" xml:space="preserve">
          <source>Most (if not all) modules that use asyncio provide a userArg which is passed on with the events. The type that you set userArg to must be inheriting from &lt;code&gt;RootObj&lt;/code&gt;!</source>
          <target state="translated">asyncio를 사용하는 대부분의 모듈은 이벤트와 함께 전달되는 userArg를 제공합니다. 상속해야하는 유형 당신은 userArg를 설정하는 것이 &lt;code&gt;RootObj&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="3a3648df8257d95dad8a542820feec7313dcffba" translate="yes" xml:space="preserve">
          <source>Most calling conventions exist only for the Windows 32-bit platform.</source>
          <target state="translated">대부분의 호출 규칙은 Windows 32 비트 플랫폼에만 존재합니다.</target>
        </trans-unit>
        <trans-unit id="d682310dcece700c3a8748a725359d19f632cdec" translate="yes" xml:space="preserve">
          <source>Most native Nim types support conversion to strings with the special &lt;code&gt;$&lt;/code&gt; proc. When calling the &lt;code&gt;echo&lt;/code&gt; proc, for example, the built-in stringify operation for the parameter is called:</source>
          <target state="translated">대부분의 네이티브 Nim 유형은 특수 &lt;code&gt;$&lt;/code&gt; proc를 사용하여 문자열로의 변환을 지원 합니다. 예를 들어, &lt;code&gt;echo&lt;/code&gt; proc을 호출 할 때 매개 변수에 대한 내장 stringify 조작이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c330bf74003c40f0baff1596cb0fe1aa69f44229" translate="yes" xml:space="preserve">
          <source>Most often integers are used for counting objects that reside in memory, so &lt;code&gt;int&lt;/code&gt; has the same size as a pointer.</source>
          <target state="translated">대부분 정수는 메모리에있는 객체를 계산하는 데 사용되므로 &lt;code&gt;int&lt;/code&gt; 는 포인터와 크기가 같습니다.</target>
        </trans-unit>
        <trans-unit id="2dcc64ab52a078dbecfc23dc0e106a84a69bd521" translate="yes" xml:space="preserve">
          <source>Most operations over an uninitialized ordered set will crash at runtime and &lt;a href=&quot;system#assert&quot;&gt;assert&lt;/a&gt; in debug builds. You can use this proc in your own procs to verify that ordered sets passed to your procs are correctly initialized. Example:</source>
          <target state="translated">초기화되지 않은 주문 설정을 통해 대부분의 작업은 런타임에와 충돌합니다 &lt;a href=&quot;system#assert&quot;&gt;주장&lt;/a&gt; 디버그 빌드에서. 자신의 procs에서이 proc을 사용하여 procs에 전달 된 순서 집합이 올바르게 초기화되었는지 확인할 수 있습니다. 예:</target>
        </trans-unit>
        <trans-unit id="b286a20955238c202888cbd22fcba1b32dbb5ccf" translate="yes" xml:space="preserve">
          <source>Most operations over an uninitialized set will crash at runtime and &lt;a href=&quot;system#assert&quot;&gt;assert&lt;/a&gt; in debug builds. You can use this proc in your own procs to verify that sets passed to your procs are correctly initialized. Example:</source>
          <target state="translated">초기화되지 않은 설정을 통해 대부분의 작업은 런타임에와 충돌합니다 &lt;a href=&quot;system#assert&quot;&gt;주장&lt;/a&gt; 디버그 빌드에서. 자신의 procs에서이 proc을 사용하여 procs에 전달 된 세트가 올바르게 초기화되었는지 확인할 수 있습니다. 예:</target>
        </trans-unit>
        <trans-unit id="40f1f54ed50170dad3e2a2e1db2410306c0d2895" translate="yes" xml:space="preserve">
          <source>Most procedures raise OSError on error, but some may return &lt;code&gt;-1&lt;/code&gt; or a boolean &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">대부분의 프로시 저는 오류시 OSError를 발생 시키지만 일부는 &lt;code&gt;-1&lt;/code&gt; 또는 부울 &lt;code&gt;false&lt;/code&gt; 를 리턴 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fbb5ab88dfbf525d498b45d241a40f2698fed97a" translate="yes" xml:space="preserve">
          <source>Mostly used by the &lt;a href=&quot;tables&quot;&gt;tables&lt;/a&gt; module, it can also be raised by other collection modules like &lt;a href=&quot;sets&quot;&gt;sets&lt;/a&gt; or &lt;a href=&quot;strtabs&quot;&gt;strtabs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;tables&quot;&gt;테이블&lt;/a&gt; 모듈에서 주로 사용되며 &lt;a href=&quot;sets&quot;&gt;set&lt;/a&gt; 또는 &lt;a href=&quot;strtabs&quot;&gt;strtabs&lt;/a&gt; 와 같은 다른 컬렉션 모듈에서도 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61f1a209e9ed6e562f9c1c6f124c69f9a9eba631" translate="yes" xml:space="preserve">
          <source>Motivating example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff0881f9033325d1090cbf272495b3ea89cd9ef" translate="yes" xml:space="preserve">
          <source>Move optimization</source>
          <target state="translated">이동 최적화</target>
        </trans-unit>
        <trans-unit id="2b6e8935b04cd95a844be3385c3603f73b9ed882" translate="yes" xml:space="preserve">
          <source>Move semantics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f288c51d72ed4edb51f67db3842455159c11d70" translate="yes" xml:space="preserve">
          <source>Move the parser to the next token if the current token is of type &lt;code&gt;tokType&lt;/code&gt;, otherwise error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81c947a10f9c6143adc1c3a38d64f8f832fabbb" translate="yes" xml:space="preserve">
          <source>Moves</source>
          <target state="translated">Moves</target>
        </trans-unit>
        <trans-unit id="e0d64e3d5a93d37faf19b2af1f3ffdda5f60517a" translate="yes" xml:space="preserve">
          <source>Moves a directory from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4406458901a000581b1c862bae39b54d20d9bf38" translate="yes" xml:space="preserve">
          <source>Moves a directory from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;. If this fails, &lt;em&gt;OSError&lt;/em&gt; is raised.</source>
          <target state="translated">디렉토리를 &lt;em&gt;소스&lt;/em&gt; 에서 &lt;em&gt;dest로&lt;/em&gt; 이동합니다 . 이것이 실패하면 &lt;em&gt;OSError&lt;/em&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6b8279a081b3908bd4de59af37b8dbc5210c5758" translate="yes" xml:space="preserve">
          <source>Moves a file from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a88abf00e872b645596ba5706595492621b50d3" translate="yes" xml:space="preserve">
          <source>Moves a file from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;. If this fails, &lt;em&gt;OSError&lt;/em&gt; is raised. Can be used to &lt;span id=&quot;rename-files_1&quot;&gt;rename files&lt;/span&gt;</source>
          <target state="translated">파일을 &lt;em&gt;소스&lt;/em&gt; 에서 &lt;em&gt;dest로&lt;/em&gt; 이동합니다 . 이것이 실패하면 &lt;em&gt;OSError&lt;/em&gt; 가 발생합니다. &lt;span id=&quot;rename-files_1&quot;&gt;파일 이름&lt;/span&gt; 을 &lt;span id=&quot;rename-files_1&quot;&gt;바꾸는&lt;/span&gt; 데 사용할 수 있습니다&lt;span id=&quot;rename-files_1&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2b470b5d09fa4dacd5f5dc009186f1ab76afd105" translate="yes" xml:space="preserve">
          <source>Moves the cursor backward by &lt;code&gt;count&lt;/code&gt; columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8720bd922009aac72de226d7d61d6fe73ea2154f" translate="yes" xml:space="preserve">
          <source>Moves the cursor backward by &lt;em&gt;count&lt;/em&gt; columns.</source>
          <target state="translated">&lt;em&gt;카운트&lt;/em&gt; 열 만큼 커서를 뒤로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="61c6c86793b16fc10ffabb4e266e0e2cc20085a4" translate="yes" xml:space="preserve">
          <source>Moves the cursor down by &lt;code&gt;count&lt;/code&gt; rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4f5707c476bf0444f3d7ca4829bce587056960" translate="yes" xml:space="preserve">
          <source>Moves the cursor down by &lt;em&gt;count&lt;/em&gt; rows.</source>
          <target state="translated">&lt;em&gt;카운트&lt;/em&gt; 행 단위로 커서를 아래로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="0033ea4c09f09bc8cd31b5b4e68024962a297c8e" translate="yes" xml:space="preserve">
          <source>Moves the cursor forward by &lt;code&gt;count&lt;/code&gt; columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5731b74c9a2498294ab69fa71acf35d7129365e9" translate="yes" xml:space="preserve">
          <source>Moves the cursor forward by &lt;em&gt;count&lt;/em&gt; columns.</source>
          <target state="translated">&lt;em&gt;카운트&lt;/em&gt; 열을 기준으로 커서를 앞으로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="196387a42b37c9fe00e4b04b4f4d1f1e517cd60c" translate="yes" xml:space="preserve">
          <source>Moves the cursor up by &lt;code&gt;count&lt;/code&gt; rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4d28da6332be8ce6373d9d339c7fe48fa23486" translate="yes" xml:space="preserve">
          <source>Moves the cursor up by &lt;em&gt;count&lt;/em&gt; rows.</source>
          <target state="translated">&lt;em&gt;카운트&lt;/em&gt; 행 만큼 커서를 위로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="d61605fd307d99d67b560347364dc83c61cffa05" translate="yes" xml:space="preserve">
          <source>Moves the dir &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc08a3a09585a5b7018f82f000e4d9ef96f770c" translate="yes" xml:space="preserve">
          <source>Moves the file &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7741d7c731b0414e896fc2c0f802271d21f8e3a3" translate="yes" xml:space="preserve">
          <source>MsgConfig:</source>
          <target state="translated">MsgConfig:</target>
        </trans-unit>
        <trans-unit id="37e28c04b8d9df3b354f9cac2c7f58f505751614" translate="yes" xml:space="preserve">
          <source>MsgFlag.msgSkipHook</source>
          <target state="translated">MsgFlag.msgSkipHook</target>
        </trans-unit>
        <trans-unit id="443bca6bef2a5f87d4c1178c12a16972c544b7c3" translate="yes" xml:space="preserve">
          <source>MsgFlag.msgStdout</source>
          <target state="translated">MsgFlag.msgStdout</target>
        </trans-unit>
        <trans-unit id="70d4c1e3256fca40389df440c02fb8245f4c21b5" translate="yes" xml:space="preserve">
          <source>MsgFlag:</source>
          <target state="translated">MsgFlag:</target>
        </trans-unit>
        <trans-unit id="f7cbb8ef4a22d68dd396d496626ddcd378fd7460" translate="yes" xml:space="preserve">
          <source>MsgFlags:</source>
          <target state="translated">MsgFlags:</target>
        </trans-unit>
        <trans-unit id="cd11ecb92552a150ee8d68d77a48d155bf327259" translate="yes" xml:space="preserve">
          <source>MsgKindToStr:</source>
          <target state="translated">MsgKindToStr:</target>
        </trans-unit>
        <trans-unit id="78732a3d2d5bc767bacb10d82e232dfa8d87404f" translate="yes" xml:space="preserve">
          <source>Much like generics, concepts are instantiated exactly once for each tested type and any static code included within the body is executed only once.</source>
          <target state="translated">제네릭과 마찬가지로 개념은 테스트 된 각 유형마다 정확히 한 번 인스턴스화되며 본문에 포함 된 정적 코드는 한 번만 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1d5f2fd6e9c15080786fa9fc4a690a2cc1e48b6a" translate="yes" xml:space="preserve">
          <source>Multi-line procedure calls should continue on the same column as the opening parenthesis (like multi-line procedure declarations).</source>
          <target state="translated">여러 줄 프로 시저 호출은 여는 괄호와 같은 열에서 계속되어야합니다 (여러 줄 프로 시저 선언과 같이).</target>
        </trans-unit>
        <trans-unit id="9254f56fa866823471402ac94c86d60cd0bf7ec3" translate="yes" xml:space="preserve">
          <source>Multi-methods</source>
          <target state="translated">Multi-methods</target>
        </trans-unit>
        <trans-unit id="1354836b5835fb67a5c327fdebc775b85ce1f879" translate="yes" xml:space="preserve">
          <source>Multi-paradigm Memory Management Strategies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f038ab50dbba14467b3f2d54ae4453034bd4e0b4" translate="yes" xml:space="preserve">
          <source>Multicast address.</source>
          <target state="translated">멀티 캐스트 주소.</target>
        </trans-unit>
        <trans-unit id="7eef768291d80681527aa60e3df38506cba1a219" translate="yes" xml:space="preserve">
          <source>Multicast global address.</source>
          <target state="translated">멀티 캐스트 전체 주소</target>
        </trans-unit>
        <trans-unit id="48369fed2a551361b8045057023eecff834b5fb1" translate="yes" xml:space="preserve">
          <source>Multicast link-local address.</source>
          <target state="translated">멀티 캐스트 링크 로컬 주소</target>
        </trans-unit>
        <trans-unit id="24dcc40f5a40c25ac2feb7b6c8089ae89a9733cc" translate="yes" xml:space="preserve">
          <source>Multicast node-local address.</source>
          <target state="translated">멀티 캐스트 노드 로컬 주소</target>
        </trans-unit>
        <trans-unit id="7b7ea2cc81efabb6fd79723109a63d77b71fcdc4" translate="yes" xml:space="preserve">
          <source>Multicast organization-local address.</source>
          <target state="translated">멀티 캐스트 조직 로컬 주소</target>
        </trans-unit>
        <trans-unit id="3867c8b804a55ef6500439f739768f84c270b65d" translate="yes" xml:space="preserve">
          <source>Multicast site-local address.</source>
          <target state="translated">멀티 캐스트 사이트 로컬 주소</target>
        </trans-unit>
        <trans-unit id="d8164f83c1acb0822b6c1157de32950f13f00bf8" translate="yes" xml:space="preserve">
          <source>Multiline comments</source>
          <target state="translated">여러 줄 주석</target>
        </trans-unit>
        <trans-unit id="64ad927c3d1f8a60b8de3a4dcfa11cb5f9ed2b35" translate="yes" xml:space="preserve">
          <source>Multiline comments are started with &lt;code&gt;#[&lt;/code&gt; and terminated with &lt;code&gt;]#&lt;/code&gt;. Multiline comments can also be nested.</source>
          <target state="translated">여러 줄 주석은 &lt;code&gt;#[&lt;/code&gt; 으로 시작 하고 &lt;code&gt;]#&lt;/code&gt; 으로 끝납니다 . 여러 줄 주석도 중첩 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51b13e7abf733936d7df1349e642855933b8c93f" translate="yes" xml:space="preserve">
          <source>Multiline comments support nesting:</source>
          <target state="translated">여러 줄 주석은 중첩을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d8b83fc7a7727ea41499ff067b6d0dbb7149942a" translate="yes" xml:space="preserve">
          <source>Multiline documentation comments also exist and support nesting too:</source>
          <target state="translated">여러 줄 문서 주석도 존재하며 중첩도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="cbf27a3ccf0fd00bcb0f6850421450358a6cae08" translate="yes" xml:space="preserve">
          <source>Multimedia support</source>
          <target state="translated">멀티미디어 지원</target>
        </trans-unit>
        <trans-unit id="1d245255e60392f6b3e9f5ad4883534adffa2e25" translate="yes" xml:space="preserve">
          <source>Multimethods are not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f3196845a8359a6ecedfa5af3141e1edccd739" translate="yes" xml:space="preserve">
          <source>Multiple arguments can be used.</source>
          <target state="translated">여러 인수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89c80d6fde8463036c04f0c5cdcf2ec74dc53694" translate="yes" xml:space="preserve">
          <source>Multiplicatives inverse of complex number &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb98c1dd85668cfd605942346a6ffa272eacd99" translate="yes" xml:space="preserve">
          <source>Multiplies &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0b13e10d6341521e89bdb5336ed87b7a20e60d" translate="yes" xml:space="preserve">
          <source>Multiplies &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e85bfaa59d7dcafe3bad4ec5fb52969e0b983a7" translate="yes" xml:space="preserve">
          <source>Multiplies a complex number with a real number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016e3f71c384a0256f6b02cfbcb74b01f4bb3548" translate="yes" xml:space="preserve">
          <source>Multiplies a real number and a complex number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89c998a8939bd86eba71a1abb06f5d85c817883" translate="yes" xml:space="preserve">
          <source>Multiplies in place a floating point number</source>
          <target state="translated">부동 소수점 수를 곱합니다.</target>
        </trans-unit>
        <trans-unit id="d359157118587856315e2ee8aff77c57a411836e" translate="yes" xml:space="preserve">
          <source>Multiplies in place a floating point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd886e69a9b9ba9f155b8a7f1e41875370c7b1d" translate="yes" xml:space="preserve">
          <source>Multiply &lt;em&gt;x&lt;/em&gt; with &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt; 에 &lt;em&gt;y를&lt;/em&gt; 곱하십시오 .</target>
        </trans-unit>
        <trans-unit id="e2f2f1bb918524a79ef38752dea6ec686cd665c1" translate="yes" xml:space="preserve">
          <source>Multiply &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;y&lt;/em&gt; 에 &lt;em&gt;x를&lt;/em&gt; 곱하십시오 .</target>
        </trans-unit>
        <trans-unit id="cf4b7cc064435e9b222c2ae1ef88a90049e33ef7" translate="yes" xml:space="preserve">
          <source>Multiply &lt;em&gt;y&lt;/em&gt; to the complex number &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;y&lt;/em&gt; 에 복소수 &lt;em&gt;x&lt;/em&gt; 를 곱합니다 .</target>
        </trans-unit>
        <trans-unit id="967a2a96e493c3fa19de6d580534df7c563be46e" translate="yes" xml:space="preserve">
          <source>Multiply a duration by some scalar.</source>
          <target state="translated">지속 시간에 스칼라를 곱하십시오.</target>
        </trans-unit>
        <trans-unit id="3992914db890fb69ae7d33ac0b14f1598d61248c" translate="yes" xml:space="preserve">
          <source>Multiply complex &lt;em&gt;x&lt;/em&gt; with float &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">복소수 &lt;em&gt;x&lt;/em&gt; 에 float &lt;em&gt;y를&lt;/em&gt; 곱합니다 .</target>
        </trans-unit>
        <trans-unit id="1b5c2c91504b80f3c83b9e589314371f1f27f89a" translate="yes" xml:space="preserve">
          <source>Multiply float &lt;em&gt;x&lt;/em&gt; with complex &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt; 에 복소수 &lt;em&gt;y를&lt;/em&gt; 곱합니다 .</target>
        </trans-unit>
        <trans-unit id="eef8bfc2027f784bed00f50d73e2df6576f496e6" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;code&gt;x&lt;/code&gt; with rational &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442ce11e465bda2cb3059d4819efe979af1e6fa5" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;code&gt;y&lt;/code&gt; to rational &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0476878c0b1cabcde1afe8aa70cf6a429753af27" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;em&gt;x&lt;/em&gt; with rational &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">int &lt;em&gt;x&lt;/em&gt; 에 유리수 &lt;em&gt;y를&lt;/em&gt; 곱합니다 .</target>
        </trans-unit>
        <trans-unit id="10cf9524fcce1f51fd3027d067a68e18439d699b" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;em&gt;y&lt;/em&gt; to rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">int &lt;em&gt;y&lt;/em&gt; 에 유리수 &lt;em&gt;x&lt;/em&gt; 를 곱합니다 .</target>
        </trans-unit>
        <trans-unit id="e483218ca20c168b62991bc272815587e5e4e426" translate="yes" xml:space="preserve">
          <source>Multiply rational &lt;code&gt;x&lt;/code&gt; with int &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb40c2a917440a979a3937c83ab1838a96e6061" translate="yes" xml:space="preserve">
          <source>Multiply rational &lt;em&gt;x&lt;/em&gt; with int &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">유리수 &lt;em&gt;x&lt;/em&gt; 에 int &lt;em&gt;y를&lt;/em&gt; 곱합니다 .</target>
        </trans-unit>
        <trans-unit id="a78da0a48558e2fae8992fdb8ae319cce3d694fc" translate="yes" xml:space="preserve">
          <source>Multiply rationals &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6d2d49f08d8ce52cada7a4e40308b84089a378" translate="yes" xml:space="preserve">
          <source>Multiply rationals &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">유리수 &lt;em&gt;y&lt;/em&gt; 에 &lt;em&gt;x를&lt;/em&gt; 곱합니다 .</target>
        </trans-unit>
        <trans-unit id="407f3e6e72365b49bada1f7c9b2babeb3f8c1e8f" translate="yes" xml:space="preserve">
          <source>Multiply two rational numbers.</source>
          <target state="translated">두 개의 유리수를 곱하십시오.</target>
        </trans-unit>
        <trans-unit id="ee8f63af40668478d9b970238ac72d0d4b19f28b" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt; into an extracted (and shifted) slice of bits from &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facb9c42148a2e7389be02ea9d3a7f614f82f2e0" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; flipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a89d83625af6f5547f211dfa05927b15fe7dd1" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc0182746d0beb681f034a9edb112352d05da34" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec6aa78d863ab9fc4fd0ae95768cf4cdb2954ce" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; flipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14045bc798df6dd294e92c15429ea925ea30bf35" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c3a893d6212268025d8e5d196a7acb17b7e1b9" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c37d2090976ee8e3d5fee6ec7741014101a9ec" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with only the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; matching those of &lt;code&gt;v&lt;/code&gt; set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64f667cf74bbcef8503b23a4acee6ed0887d732" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with only the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; matching those of &lt;code&gt;v&lt;/code&gt; set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b50fbfb29951fe6e8ef9592386658009794a46" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bit at position &lt;code&gt;bit&lt;/code&gt; flipped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c268e6dc76523a04990f53e7375c84d616b8ef" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bit at position &lt;code&gt;bit&lt;/code&gt; set to 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc72a1805780e646c98f4be333b44f1e0e1f1ac" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bit at position &lt;code&gt;bit&lt;/code&gt; set to 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f703e71600a89068805226c7bc06a14e941314" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bits at positions &lt;code&gt;bits&lt;/code&gt; set to 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce6a3d609b998cf5e5fd6241cbdb65fdb6ee61a" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bits at positions &lt;code&gt;bits&lt;/code&gt; set to 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46f9514f1b5c64247012a22f6423b6982c8ce0e" translate="yes" xml:space="preserve">
          <source>MutationInfo:</source>
          <target state="translated">MutationInfo:</target>
        </trans-unit>
        <trans-unit id="57d62a44db1dbaaab6871e35242edd989b03aa79" translate="yes" xml:space="preserve">
          <source>Mutually recursive types</source>
          <target state="translated">상호 재귀 유형</target>
        </trans-unit>
        <trans-unit id="7f40638ab36009261af3e1d52e05984bcdb333ac" translate="yes" xml:space="preserve">
          <source>NO-cases: x !&amp;lt;| y # depending on type and symbol kind x[constA] !&amp;lt;| x[constB] x.f !&amp;lt;| x.g x.f !&amp;lt;| y.f iff x !&amp;lt;= y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d1c3c27252776cf6fab5b297dd84293196ad68" translate="yes" xml:space="preserve">
          <source>NRVO</source>
          <target state="translated">NRVO</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="c83bf68eaf2532d248d1885057b7fe59c910abf7" translate="yes" xml:space="preserve">
          <source>Name of the test suite that contains this test case. Can be &lt;code&gt;nil&lt;/code&gt; if the test case is not in a suite.</source>
          <target state="translated">이 테스트 케이스가 포함 된 테스트 스위트의 이름입니다. 테스트 케이스가 스위트에없는 경우에는 &lt;code&gt;nil&lt;/code&gt; 이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b509dcb855dff49f60e407b23f6b0c2647e50755" translate="yes" xml:space="preserve">
          <source>Named argument overloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ab34573e168918bf72dc73ec10c4b5b1ba3f14" translate="yes" xml:space="preserve">
          <source>Named arguments</source>
          <target state="translated">명명 된 인수</target>
        </trans-unit>
        <trans-unit id="7772a024609453bf08c15f5d275ff9fafde6c74b" translate="yes" xml:space="preserve">
          <source>Named parameters are special because a named parameter can be gensym'ed and then they have '`&amp;lt;number&amp;gt;' suffix that we need to ignore, see compiler / evaltempl.nim, snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc74246cc093982dca8a3a3f276b5d8b65d59486" translate="yes" xml:space="preserve">
          <source>Named pipe, or FIFO.</source>
          <target state="translated">명명 된 파이프 또는 FIFO</target>
        </trans-unit>
        <trans-unit id="be09a63bd1995e99cd22064cdc39a4bae464033d" translate="yes" xml:space="preserve">
          <source>Namespaces</source>
          <target state="translated">Namespaces</target>
        </trans-unit>
        <trans-unit id="8af56df8a9cb35f56b67edd6d269d4e86defc0d0" translate="yes" xml:space="preserve">
          <source>Naming Conventions</source>
          <target state="translated">명명 규칙</target>
        </trans-unit>
        <trans-unit id="c6c5f0ef33b66371fc9992be0b7555afe7072e1f" translate="yes" xml:space="preserve">
          <source>Naming scheme</source>
          <target state="translated">명명 체계</target>
        </trans-unit>
        <trans-unit id="9a732a9b195778d45aff4c029836d8016c6d092a" translate="yes" xml:space="preserve">
          <source>Nanosecond-granularity time of last access.</source>
          <target state="translated">마지막 액세스의 나노초 단위 시간.</target>
        </trans-unit>
        <trans-unit id="44a8ea231c9b25a28c6b1bae13f6d58d8ab769bb" translate="yes" xml:space="preserve">
          <source>Nanosecond-granularity time of last data modification.</source>
          <target state="translated">마지막 데이터 수정의 나노초 단위 시간.</target>
        </trans-unit>
        <trans-unit id="ac4471c1eac2668f96fa75ca630c4f282bc0b52a" translate="yes" xml:space="preserve">
          <source>Nanoseconds display</source>
          <target state="translated">나노초 표시</target>
        </trans-unit>
        <trans-unit id="8b8960e4540a492b4c2ade7385f3643ce326ec71" translate="yes" xml:space="preserve">
          <source>Natural log of the gamma function</source>
          <target state="translated">감마 함수의 자연 로그</target>
        </trans-unit>
        <trans-unit id="40ae5bdaf41bbc2df0ddd3ba6cd0e29b307d851a" translate="yes" xml:space="preserve">
          <source>Navigation through the FTP server's directories.</source>
          <target state="translated">FTP 서버의 디렉토리를 통한 탐색</target>
        </trans-unit>
        <trans-unit id="0815b755eca5e681198ebaafc9d72ffda80723ea" translate="yes" xml:space="preserve">
          <source>NdiFile:</source>
          <target state="translated">NdiFile:</target>
        </trans-unit>
        <trans-unit id="a87e96bc47dcdb24143f7270a722c7d80e8b8619" translate="yes" xml:space="preserve">
          <source>NegOne:</source>
          <target state="translated">NegOne:</target>
        </trans-unit>
        <trans-unit id="1cc372e25138e902d67c0112cb8a3904890cbfec" translate="yes" xml:space="preserve">
          <source>Negated version of &lt;a href=&quot;#is,T,S&quot;&gt;is&lt;/a&gt;. Equivalent to &lt;code&gt;not(x is y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9051b995bf9fb56fe85246d9f53926cf4b1566a" translate="yes" xml:space="preserve">
          <source>Negated version of &lt;code&gt;is&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c25dae4dbbde41bb6194a297db2a60c41076f4" translate="yes" xml:space="preserve">
          <source>Negated version of &lt;em&gt;is&lt;/em&gt;. Equivalent to &lt;code&gt;not(x is y)&lt;/code&gt;.</source>
          <target state="translated">의 부정 버전은 &lt;em&gt;입니다&lt;/em&gt; . &lt;code&gt;not(x is y)&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="2fb11e6ad45582ef61d5229a5c99cb71ade8dea4" translate="yes" xml:space="preserve">
          <source>Neither inline nor closure iterators can be (directly)* recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0ca5089d3b83be1bafc4d4d1a8a2d03a288270" translate="yes" xml:space="preserve">
          <source>Neither inline nor closure iterators can be recursive.</source>
          <target state="translated">인라인 또는 클로저 반복자는 재귀적일 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="800065abdf31340dea211e76a620e74e07164b74" translate="yes" xml:space="preserve">
          <source>Neither inline nor closure iterators have the special &lt;code&gt;result&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db36e51e26b9948538aa75241b28b52b8a7c448" translate="yes" xml:space="preserve">
          <source>Neither the name of the University of Cambridge nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</source>
          <target state="translated">사전 서면 허가없이이 소프트웨어에서 파생 된 제품을 보증하거나 홍보하는 데 케임브리지 대학교 이름이나 기고자 이름을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="39c942ec037779a44f7713d5b1b00db484fe69b1" translate="yes" xml:space="preserve">
          <source>Nests the list &lt;code&gt;pack&lt;/code&gt; into a tree of call expressions: &lt;code&gt;[a, b, c]&lt;/code&gt; is transformed into &lt;code&gt;op(a, op(c, d))&lt;/code&gt;. This is also known as fold expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d050b1bc6d5102e8c3c43e52f8c2bc1d471d35c1" translate="yes" xml:space="preserve">
          <source>Network Programming and Internet Protocols</source>
          <target state="translated">네트워크 프로그래밍 및 인터넷 프로토콜</target>
        </trans-unit>
        <trans-unit id="171eece6964ab33a2181793b80b9e480760fd86a" translate="yes" xml:space="preserve">
          <source>Never used by PCRE itself</source>
          <target state="translated">PCRE 자체에서 사용되지 않음</target>
        </trans-unit>
        <trans-unit id="17c5fe945bffa6ac038aff7b2982abfca0575621" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;AsyncEvent&lt;/code&gt; object is not automatically registered with dispatcher like &lt;code&gt;AsyncSocket&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;AsyncEvent&lt;/code&gt; 의 객체가 자동으로 같은 디스패처에 등록되지 않은 &lt;code&gt;AsyncSocket&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="28d212a8c45cffe38583de7b76bc156d6b77f1fb" translate="yes" xml:space="preserve">
          <source>New data is written into the future stream.</source>
          <target state="translated">새로운 데이터가 미래 스트림에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="567bb6ab39291d029af6c28280c594e2fe015993" translate="yes" xml:space="preserve">
          <source>New nil literal shortcut</source>
          <target state="translated">새로운 nil 리터럴 단축키</target>
        </trans-unit>
        <trans-unit id="4d162ab936ae3c93a4762b2302f1dde8f07c853d" translate="yes" xml:space="preserve">
          <source>New nil literal shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d414101c8451a9c1e4d24a539c801a218a2cb25c" translate="yes" xml:space="preserve">
          <source>NewLines:</source>
          <target state="translated">NewLines:</target>
        </trans-unit>
        <trans-unit id="8a46f7e73851bd13e21c355b77945488312ba04a" translate="yes" xml:space="preserve">
          <source>Nil ---</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741085d08492cd26c47dc0ef9d2d8cb0183c046b" translate="yes" xml:space="preserve">
          <source>NilableTypes:</source>
          <target state="translated">NilableTypes:</target>
        </trans-unit>
        <trans-unit id="8bcd0a2c52378cf0d5699266d7e259ed99978f8c" translate="yes" xml:space="preserve">
          <source>Nim</source>
          <target state="translated">Nim</target>
        </trans-unit>
        <trans-unit id="7793ecd2f1c81dc748001f595a446d07a21dca61" translate="yes" xml:space="preserve">
          <source>Nim Backend Integration</source>
          <target state="translated">Nim 백엔드 통합</target>
        </trans-unit>
        <trans-unit id="16df2910cd311102e24b9deaaab6834d4ce68a59" translate="yes" xml:space="preserve">
          <source>Nim Compiler</source>
          <target state="translated">님 컴파일러</target>
        </trans-unit>
        <trans-unit id="21f8909f95c6aa6f948aea798f908963482f9a9e" translate="yes" xml:space="preserve">
          <source>Nim Compiler User Guide</source>
          <target state="translated">Nim 컴파일러 사용 설명서</target>
        </trans-unit>
        <trans-unit id="f1205ea1b3f4a816aeafc80cdd7715c3db32e0cd" translate="yes" xml:space="preserve">
          <source>Nim Destructors and Move Semantics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e729000a4923f3f92aa9b54b57cd9d13b461a42" translate="yes" xml:space="preserve">
          <source>Nim DocGen Tools Guide</source>
          <target state="translated">Nim DocGen 도구 안내서</target>
        </trans-unit>
        <trans-unit id="3e73c9c60a5f0a7a9de0b9e82a823b0e9e25a26d" translate="yes" xml:space="preserve">
          <source>Nim Documentation</source>
          <target state="translated">님 설명서</target>
        </trans-unit>
        <trans-unit id="530555065f9d76896cc611a21ebc96466e9386f7" translate="yes" xml:space="preserve">
          <source>Nim Documentation Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6faadf36850555183f2e6623ce564cd582735b7" translate="yes" xml:space="preserve">
          <source>Nim Enhancement Proposal #1</source>
          <target state="translated">님 향상 제안 # 1</target>
        </trans-unit>
        <trans-unit id="a017c7a8f194b967e2353a197aaf8085c32d102d" translate="yes" xml:space="preserve">
          <source>Nim Enhancement Proposal #1 - Standard Library Style Guide</source>
          <target state="translated">Nim Enhancement Proposal # 1-표준 라이브러리 스타일 안내서</target>
        </trans-unit>
        <trans-unit id="5b9961014f4b2b48d30bcee1ea56377ae0098790" translate="yes" xml:space="preserve">
          <source>Nim Experimental Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088e91f2731d3d61908df7c6c9c0f48f04e35180" translate="yes" xml:space="preserve">
          <source>Nim IDE Integration Guide</source>
          <target state="translated">Nim IDE 통합 안내서</target>
        </trans-unit>
        <trans-unit id="ff5833e01f31589edf6457bc7ab5ad35afc09f25" translate="yes" xml:space="preserve">
          <source>Nim Manual</source>
          <target state="translated">님 매뉴얼</target>
        </trans-unit>
        <trans-unit id="a5cb0d9617774a42fc73cf0e3f868eb3b8c421d4" translate="yes" xml:space="preserve">
          <source>Nim OID support. An OID is a global ID that consists of a timestamp, a unique counter and a random value. This combination should suffice to produce a globally distributed unique ID. This implementation was extracted from the Mongodb interface and it thus binary compatible with a Mongo OID.</source>
          <target state="translated">Nim OID 지원 OID는 타임 스탬프, 고유 카운터 및 임의 값으로 구성된 전역 ID입니다. 이 조합은 전체적으로 분산 된 고유 ID를 생성하기에 충분해야합니다. 이 구현은 Mongodb 인터페이스에서 추출되어 Mongo OID와 바이너리 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="8afe44256c32445d4aba7446f16d139424f08995" translate="yes" xml:space="preserve">
          <source>Nim Standard Library</source>
          <target state="translated">님 표준 라이브러리</target>
        </trans-unit>
        <trans-unit id="322ec21475cb7cfeb95acf76114506a7658630c5" translate="yes" xml:space="preserve">
          <source>Nim Tutorial (Part I)</source>
          <target state="translated">님 튜토리얼 (파트 I)</target>
        </trans-unit>
        <trans-unit id="e48ab7d7dac65733835e8b6fac71558fd72d4d0c" translate="yes" xml:space="preserve">
          <source>Nim Tutorial (Part II)</source>
          <target state="translated">님 튜토리얼 (파트 II)</target>
        </trans-unit>
        <trans-unit id="76322f500f58282cde660e73afc75612203543c6" translate="yes" xml:space="preserve">
          <source>Nim allows &lt;code&gt;.global, compiletime&lt;/code&gt; variables that can be filled by macro invocations across different modules. This feature breaks modularity in a severe way. Plenty of different solutions have been proposed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4a51307d67466d1629dcfcafd64254208d0d47" translate="yes" xml:space="preserve">
          <source>Nim allows &lt;code&gt;.global, compiletime&lt;/code&gt; variables that can be filled by macro invokations across different modules. This feature breaks modularity in a severe way. Plenty of different solutions have been proposed:</source>
          <target state="translated">Nim은 여러 모듈에서 매크로 호출로 채울 수있는 &lt;code&gt;.global, compiletime&lt;/code&gt; 변수를 허용 합니다. 이 기능은 모듈성을 심각하게 손상시킵니다. 다양한 솔루션이 제안되었습니다.</target>
        </trans-unit>
        <trans-unit id="f561db7eec45536c917f4b3178bd2feafbef4a97" translate="yes" xml:space="preserve">
          <source>Nim allows for type classes and regular types to be specified as &lt;span id=&quot;type-constraints_1&quot;&gt;type constraints&lt;/span&gt; of the generic type parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7723fae5b868ab64bfd1ed4f9d563b3f719c2a6" translate="yes" xml:space="preserve">
          <source>Nim allows user defined operators. An operator is any combination of the following characters:</source>
          <target state="translated">Nim은 사용자 정의 연산자를 허용합니다. 연산자는 다음 문자의 조합입니다.</target>
        </trans-unit>
        <trans-unit id="dec77fd63ea6f3b6392da08312e8457c86c6a4ab" translate="yes" xml:space="preserve">
          <source>Nim allows user-definable operators. Binary operators have 11 different levels of precedence.</source>
          <target state="translated">Nim은 사용자 정의 연산자를 허용합니다. 이항 연산자의 우선 순위는 11 가지입니다.</target>
        </trans-unit>
        <trans-unit id="bb3ac87c3ce8cafa37c2ac5913d2e44f2c0fae11" translate="yes" xml:space="preserve">
          <source>Nim also allows for type classes and regular types to be specified as &lt;span id=&quot;type-constraints_1&quot;&gt;type constraints&lt;/span&gt; of the generic type parameter:</source>
          <target state="translated">Nim을 사용하면 형식 클래스와 일반 형식을 일반 형식 매개 변수의 &lt;span id=&quot;type-constraints_1&quot;&gt;형식 제약 조건&lt;/span&gt; 으로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7367770c702c3c07c0edb5a157905ffed2fb24f" translate="yes" xml:space="preserve">
          <source>Nim avoids these problems by not assigning methods to a class. All methods in Nim are multi-methods. As we will see later, multi-methods are distinguished from procs only for dynamic binding purposes.</source>
          <target state="translated">Nim은 클래스에 메소드를 지정하지 않음으로써 이러한 문제를 피합니다. Nim의 모든 방법은 다중 방법입니다. 나중에 볼 수 있듯이, 멀티 메소드는 동적 바인딩 목적으로 만 proc와 구별됩니다.</target>
        </trans-unit>
        <trans-unit id="5fb26fe48597e8b904be37ef641797aa814138fa" translate="yes" xml:space="preserve">
          <source>Nim can also generate &lt;span id=&quot;javascript_1&quot;&gt;JavaScript&lt;/span&gt; code through the &lt;code&gt;js&lt;/code&gt; command.</source>
          <target state="translated">Nim은 &lt;code&gt;js&lt;/code&gt; 명령을 통해 &lt;span id=&quot;javascript_1&quot;&gt;JavaScript&lt;/span&gt; 코드를 생성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="af85440d1b434e6ec278854daf1f3f305d5ad156" translate="yes" xml:space="preserve">
          <source>Nim code calling the backend</source>
          <target state="translated">백엔드를 호출하는 님 코드</target>
        </trans-unit>
        <trans-unit id="6b156a5e46fd0f15d386450049ef7bee6965340f" translate="yes" xml:space="preserve">
          <source>Nim code can be compiled to JavaScript. However in order to write JavaScript-compatible code you should remember the following:</source>
          <target state="translated">Nim 코드는 JavaScript로 컴파일 할 수 있습니다. 그러나 JavaScript 호환 코드를 작성하려면 다음을 기억해야합니다.</target>
        </trans-unit>
        <trans-unit id="b0d82977509b77ad993227e992fbe240e1a91ce1" translate="yes" xml:space="preserve">
          <source>Nim code can interface with the backend through the &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;Foreign function interface&lt;/a&gt; mainly through the &lt;a href=&quot;manual#foreign-function-interface-importc-pragma&quot;&gt;importc pragma&lt;/a&gt;. The &lt;code&gt;importc&lt;/code&gt; pragma is the &lt;em&gt;generic&lt;/em&gt; way of making backend symbols available in Nim and is available in all the target backends (JavaScript too). The C++ or Objective-C backends have their respective &lt;a href=&quot;manual#implementation-specific-pragmas-importcpp-pragma&quot;&gt;ImportCpp&lt;/a&gt; and &lt;a href=&quot;manual#implementation-specific-pragmas-importobjc-pragma&quot;&gt;ImportObjC&lt;/a&gt; pragmas to call methods from classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9fa29ab6035f83a6a5d536db8f22202827f364" translate="yes" xml:space="preserve">
          <source>Nim code can interface with the backend through the &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;Foreign function interface&lt;/a&gt; mainly through the &lt;a href=&quot;manual#importc-pragma&quot;&gt;importc pragma&lt;/a&gt;. The &lt;code&gt;importc&lt;/code&gt; pragma is the &lt;em&gt;generic&lt;/em&gt; way of making backend symbols available in Nim and is available in all the target backends (JavaScript too). The C++ or Objective-C backends have their respective &lt;a href=&quot;manual#implementation-specific-pragmas-importcpp-pragma&quot;&gt;ImportCpp&lt;/a&gt; and &lt;a href=&quot;manual#implementation-specific-pragmas-importobjc-pragma&quot;&gt;ImportObjC&lt;/a&gt; pragmas to call methods from classes.</source>
          <target state="translated">Nim 코드는 주로 &lt;a href=&quot;manual#importc-pragma&quot;&gt;importc pragma를&lt;/a&gt; 통해 &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;Foreign 함수 인터페이스를&lt;/a&gt; 통해 백엔드와 인터페이스 할 수 있습니다 . &lt;code&gt;importc&lt;/code&gt; 프라 그마는이다 &lt;em&gt;일반적인&lt;/em&gt; 님에서 사용할 수있는 백엔드 기호를 만드는 방법과 (너무 JavaScript)를 모든 대상 백엔드에서 사용할 수 있습니다. C ++ 또는 Objective-C 백엔드에는 클래스에서 메소드를 호출하기 위한 각각의 &lt;a href=&quot;manual#implementation-specific-pragmas-importcpp-pragma&quot;&gt;ImportCpp&lt;/a&gt; 및 &lt;a href=&quot;manual#implementation-specific-pragmas-importobjc-pragma&quot;&gt;ImportObjC&lt;/a&gt; pragma가 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="31a93bb37537ccf8bc65c227c96a067156777ba9" translate="yes" xml:space="preserve">
          <source>Nim code renderer (AST back to its textual form)</source>
          <target state="translated">님 코드 렌더러 (ASTN)</target>
        </trans-unit>
        <trans-unit id="c49ab006b0df5c398487116e20dd9f9557fc4f7a" translate="yes" xml:space="preserve">
          <source>Nim code specifies a computation that acts on a memory consisting of components called &lt;span id=&quot;locations_1&quot;&gt;locations&lt;/span&gt;. A variable is basically a name for a location. Each variable and location is of a certain &lt;span id=&quot;type_1&quot;&gt;type&lt;/span&gt;. The variable's type is called &lt;span id=&quot;static-type_1&quot;&gt;static type&lt;/span&gt;, the location's type is called &lt;span id=&quot;dynamic-type_1&quot;&gt;dynamic type&lt;/span&gt;. If the static type is not the same as the dynamic type, it is a super-type or subtype of the dynamic type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b934fa65860d606d618e9d96d81cf38c8185b18" translate="yes" xml:space="preserve">
          <source>Nim code that will be executed at compile time cannot use the following language features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabc8c2c3d55b64590195b71fee1f8bf15a0783b" translate="yes" xml:space="preserve">
          <source>Nim condition variable</source>
          <target state="translated">님 조건 변수</target>
        </trans-unit>
        <trans-unit id="d2f3eed8f027ae703cfbb62e68bece8443bf88e7" translate="yes" xml:space="preserve">
          <source>Nim contains a sophisticated compile-time evaluator, so procedures which have no side-effect can be used in constant expressions too:</source>
          <target state="translated">Nim에는 정교한 컴파일 타임 평가 기가 포함되어 있으므로 부작용이없는 프로시 저는 상수 표현식에도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a84a384a071f2c590cf4715be4dfac5778bd58a" translate="yes" xml:space="preserve">
          <source>Nim contains language features that are &lt;em&gt;global&lt;/em&gt;. The best example for that are multi methods: Introducing a new method with the same name and some compatible object parameter means that the method's dispatcher needs to take the new method into account. So the dispatching logic is only completely known after the whole program has been translated!</source>
          <target state="translated">Nim에는 &lt;em&gt;전 세계&lt;/em&gt; 언어 기능이 포함되어 있습니다 . 이에 대한 가장 좋은 예는 다중 메소드입니다. 동일한 이름과 일부 호환 가능한 객체 매개 변수를 사용하여 새 메소드를 도입하면 메소드의 디스패처가 새 메소드를 고려해야합니다. 따라서 디스패치 로직은 전체 프로그램이 번역 된 후에 만 ​​완전히 알려집니다!</target>
        </trans-unit>
        <trans-unit id="fc85ea062290958c11ff84b074507e523841a2ee" translate="yes" xml:space="preserve">
          <source>Nim coroutines implementation supports several context switching methods: ucontext: available on unix and alike (default) setjmp: available on unix and alike (x86/64 only) Fibers: available and required on windows.</source>
          <target state="translated">Nim 코 루틴 구현은 여러 컨텍스트 전환 방법을 지원합니다. ucontext : 유닉스 및 유사 (기본)에서 가능 setjmp : 유닉스 및 유사 (x86 / 64 만)에서 가능 섬유 : Windows에서 사용 가능하고 필수입니다.</target>
        </trans-unit>
        <trans-unit id="4eb61c7d8d93d62cf6c57a5ffd5601d51df16154" translate="yes" xml:space="preserve">
          <source>Nim coroutines implementation, supports several context switching methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578f1deb3f7a2a37dd1477b06e2dff670c28a3a9" translate="yes" xml:space="preserve">
          <source>Nim currently generates &lt;code&gt;async/await&lt;/code&gt; JavaScript code which is supported in modern EcmaScript and most modern versions of browsers, Node.js and Electron. If you need to use this module with older versions of JavaScript, you can use a tool that backports the resulting JavaScript code, as babel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd26dc8c514bd37794fcd3b5dc3270d84d36b348" translate="yes" xml:space="preserve">
          <source>Nim currently generates &lt;em&gt;async/await&lt;/em&gt; JavaScript code which is supported in modern EcmaScript and most modern versions of browsers, Node.js and Electron. If you need to use this module with older versions of JavaScript, you can use a tool that backports the resulting JavaScript code, as babel.</source>
          <target state="translated">Nim은 현재 최신 EcmaScript와 최신 버전의 브라우저 (Node.js 및 Electron)에서 지원되는 &lt;em&gt;비동기 / 대기&lt;/em&gt; JavaScript 코드를 생성 합니다. 이 모듈을 이전 버전의 JavaScript와 함께 사용해야하는 경우 결과 JavaScript 코드를 babel로 백 포트하는 도구를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bb9f4917308e21a1a3ea298a44a71e622ad4adc" translate="yes" xml:space="preserve">
          <source>Nim differs from many other compilers in that it is really fast, and being so fast makes it suited to provide external queries for text editors about the source code being written. Through the &lt;code&gt;idetools&lt;/code&gt; command of &lt;a href=&quot;nimc&quot;&gt;the compiler&lt;/a&gt;, any IDE can query a &lt;code&gt;.nim&lt;/code&gt; source file and obtain useful information like definition of symbols or suggestions for completion.</source>
          <target state="translated">Nim은 정말 빠르다는 점에서 다른 많은 컴파일러와 다릅니다. 너무 빠르면 텍스트 편집기에 작성되는 소스 코드에 대한 외부 쿼리를 제공하는 데 적합합니다. &lt;a href=&quot;nimc&quot;&gt;컴파일러&lt;/a&gt; 의 &lt;code&gt;idetools&lt;/code&gt; 명령을 통해 모든 IDE는 &lt;code&gt;.nim&lt;/code&gt; 소스 파일을 쿼리하고 심볼 정의 또는 완료 제안과 같은 유용한 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f7c9cacf76b4e6e9b8bdb4149ed42fa0f2b0f03" translate="yes" xml:space="preserve">
          <source>Nim differs from many other compilers in that it is really fast, and being so fast makes it suited to provide external queries for text editors about the source code being written. Through the &lt;code&gt;nimsuggest&lt;/code&gt; tool, any IDE can query a &lt;code&gt;.nim&lt;/code&gt; source file and obtain useful information like definition of symbols or suggestions for completion.</source>
          <target state="translated">Nim은 정말 빠르다는 점에서 다른 많은 컴파일러와 다릅니다. 너무 빠르면 텍스트 편집기에 작성되는 소스 코드에 대한 외부 쿼리를 제공하는 데 적합합니다. 가장 &lt;code&gt;nimsuggest&lt;/code&gt; 도구를 통해 모든 IDE는 &lt;code&gt;.nim&lt;/code&gt; 소스 파일을 쿼리하고 심볼 정의 또는 완성 제안과 같은 유용한 정보를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2086951d5e25c94d3bcd3c946d696aab645c5e42" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;traced_1&quot;&gt;traced&lt;/span&gt; and &lt;span id=&quot;untraced_1&quot;&gt;untraced&lt;/span&gt; references. Untraced references are also called &lt;em&gt;pointers&lt;/em&gt;. Traced references point to objects in a garbage collected heap, untraced references point to manually allocated objects or to objects elsewhere in memory. Thus untraced references are &lt;em&gt;unsafe&lt;/em&gt;. However for certain low-level operations (e.g., accessing the hardware), untraced references are necessary.</source>
          <target state="translated">Nim은 &lt;span id=&quot;traced_1&quot;&gt;추적 된&lt;/span&gt; 참조 와 &lt;span id=&quot;traced_1&quot;&gt;추적되지 &lt;/span&gt;&lt;span id=&quot;untraced_1&quot;&gt;않은&lt;/span&gt; 참조를 구별 합니다. 추적되지 않은 참조를 &lt;em&gt;포인터&lt;/em&gt; 라고도 합니다. 추적 된 참조는 가비지 수집 힙의 객체를 가리키고, 추적되지 않은 참조는 수동으로 할당 된 객체 또는 메모리의 다른 곳을 가리 킵니다. 따라서 추적되지 &lt;em&gt;않은&lt;/em&gt; 참조는 &lt;em&gt;안전하지 않습니다&lt;/em&gt; . 그러나 특정 하위 수준 작업 (예 : 하드웨어 액세스)의 경우 추적되지 않은 참조가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="ccd83d27c6d420699215e95b7549c5d18179dd95" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;traced_1&quot;&gt;traced&lt;/span&gt; and &lt;span id=&quot;untraced_1&quot;&gt;untraced&lt;/span&gt; references. Untraced references are also called &lt;em&gt;pointers&lt;/em&gt;. Traced references point to objects of a garbage collected heap, untraced references point to manually allocated objects or to objects somewhere else in memory. Thus untraced references are &lt;em&gt;unsafe&lt;/em&gt;. However for certain low-level operations (accessing the hardware) untraced references are unavoidable.</source>
          <target state="translated">Nim은 &lt;span id=&quot;traced_1&quot;&gt;추적 된&lt;/span&gt; 참조 와 &lt;span id=&quot;traced_1&quot;&gt;추적되지 &lt;/span&gt;&lt;span id=&quot;untraced_1&quot;&gt;않은&lt;/span&gt; 참조를 구별 합니다. 추적되지 않은 참조를 &lt;em&gt;포인터&lt;/em&gt; 라고도 합니다. 추적 된 참조는 가비지 수집 힙의 객체를 가리키고, 추적되지 않은 참조는 수동으로 할당 된 객체 또는 메모리의 다른 곳을 가리 킵니다. 따라서 추적되지 &lt;em&gt;않은&lt;/em&gt; 참조는 &lt;em&gt;안전하지 않습니다&lt;/em&gt; . 그러나 특정 저수준 작업 (하드웨어에 액세스)의 경우 추적되지 않은 참조는 피할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7cebe776d80c8a7f686de5462c8b5f3c84649715" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;traced_1&quot;&gt;traced&lt;/span&gt; and &lt;span id=&quot;untraced_1&quot;&gt;untraced&lt;/span&gt; references. Untraced references are also called &lt;em&gt;pointers&lt;/em&gt;. Traced references point to objects of a garbage-collected heap, untraced references point to manually allocated objects or objects somewhere else in memory. Thus untraced references are &lt;em&gt;unsafe&lt;/em&gt;. However, for certain low-level operations (accessing the hardware) untraced references are unavoidable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac7bba6bc8f19f6387033c2480f36e741751cd5" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;type-casts_1&quot;&gt;type casts&lt;/span&gt; and &lt;span id=&quot;type-conversions_1&quot;&gt;type conversions&lt;/span&gt;. Casts are done with the &lt;code&gt;cast&lt;/code&gt; operator and force the compiler to interpret a bit pattern to be of another type.</source>
          <target state="translated">Nim은 &lt;span id=&quot;type-casts_1&quot;&gt;타입 캐스트&lt;/span&gt; 와 &lt;span id=&quot;type-conversions_1&quot;&gt;타입 변환을&lt;/span&gt; 구별 합니다. 캐스트는 &lt;code&gt;cast&lt;/code&gt; 연산자 로 수행되며 컴파일러가 비트 패턴을 다른 유형으로 해석하도록합니다.</target>
        </trans-unit>
        <trans-unit id="0dc26f37589711a4ebd6a75d29c4f31d6f5268ca" translate="yes" xml:space="preserve">
          <source>Nim documentation tools</source>
          <target state="translated">님 문서화 도구</target>
        </trans-unit>
        <trans-unit id="32a303beaf961d29337f0ffeb398d9c829260321" translate="yes" xml:space="preserve">
          <source>Nim expression</source>
          <target state="translated">님 표현</target>
        </trans-unit>
        <trans-unit id="835ecda86802386305ce589edd8369f0e4a635cf" translate="yes" xml:space="preserve">
          <source>Nim file input</source>
          <target state="translated">님 파일 입력</target>
        </trans-unit>
        <trans-unit id="07b88f09d9e474dda1eb0ea8c1cc96c629f4c605" translate="yes" xml:space="preserve">
          <source>Nim for embedded systems</source>
          <target state="translated">임베디드 시스템 용 Nim</target>
        </trans-unit>
        <trans-unit id="a0e42e450f6ef10bfc996fbef965403967ca2952" translate="yes" xml:space="preserve">
          <source>Nim for realtime systems</source>
          <target state="translated">실시간 시스템을위한 Nim</target>
        </trans-unit>
        <trans-unit id="ad31881a208f486ef9ab2bb940bdcd789a709ad9" translate="yes" xml:space="preserve">
          <source>Nim generates some warnings and hints (&quot;line too long&quot;) that may annoy the user. A mechanism for disabling certain messages is provided: Each hint and warning message contains a symbol in brackets. This is the message's identifier that can be used to enable or disable it:</source>
          <target state="translated">님은 사용자를 귀찮게 할 수있는 몇 가지 경고와 힌트 ( &quot;너무 긴 줄&quot;)를 생성합니다. 특정 메시지를 비활성화하는 메커니즘이 제공됩니다. 각 힌트 및 경고 메시지에는 괄호 안에 기호가 있습니다. 이는 메시지를 활성화 또는 비활성화하는 데 사용할 수있는 메시지 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="956810679fde5bcd94729ea5a195b781ebc9936f" translate="yes" xml:space="preserve">
          <source>Nim has a builtin thread pool that can be used for CPU intensive tasks. For IO intensive tasks the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; features should be used instead. Both parallel and spawn need the &lt;a href=&quot;threadpool&quot;&gt;threadpool&lt;/a&gt; module to work.</source>
          <target state="translated">Nim에는 CPU를 많이 사용하는 작업에 사용할 수있는 내장 스레드 풀이 있습니다. IO 집약적 작업의 경우 &lt;code&gt;async&lt;/code&gt; 및 &lt;code&gt;await&lt;/code&gt; 기능을 대신 사용해야합니다. 병렬 및 스폰 둘 다 작동 하려면 &lt;a href=&quot;threadpool&quot;&gt;스레드 풀&lt;/a&gt; 모듈이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="8271465a18dfd05fb2b43750bb600424d58f8d93" translate="yes" xml:space="preserve">
          <source>Nim has no need for &lt;em&gt;get-properties&lt;/em&gt;: Ordinary get-procedures that are called with the &lt;em&gt;method call syntax&lt;/em&gt; achieve the same. But setting a value is different; for this a special setter syntax is needed:</source>
          <target state="translated">Nim은 &lt;em&gt;get-properties&lt;/em&gt; 가 필요하지 않습니다 . &lt;em&gt;메소드 호출 구문으로 호출&lt;/em&gt; 되는 일반적인 get-procedure 는 동일한 결과를 얻습니다. 그러나 값을 설정하는 것은 다릅니다. 이를 위해 특별한 세터 구문이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="2d68c150b59e057428b45d05875c0768dda6fd33" translate="yes" xml:space="preserve">
          <source>Nim has no need for &lt;em&gt;get-properties&lt;/em&gt;: Ordinary get-procedures that are called with the &lt;em&gt;method call syntax&lt;/em&gt; achieve the same. But setting a value is different; for this, a special setter syntax is needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a3428d8f1eb98b6a56266f5afa22c38fb951ee" translate="yes" xml:space="preserve">
          <source>Nim has no separate optimizer, but the C code that is produced is very efficient. Most C compilers have excellent optimizers, so usually it is not needed to optimize one's code. Nim has been designed to encourage efficient code: The most readable code in Nim is often the most efficient too.</source>
          <target state="translated">Nim에는 별도의 최적화 프로그램이 없지만 생성 된 C 코드는 매우 효율적입니다. 대부분의 C 컴파일러에는 뛰어난 옵티마이 저가 있으므로 일반적으로 코드를 최적화 할 필요가 없습니다. Nim은 효율적인 코드를 장려하도록 설계되었습니다. Nim에서 가장 읽기 쉬운 코드가 종종 가장 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="d4433d8ee67c60caa5f14cbc4d36fb3fc5be0287" translate="yes" xml:space="preserve">
          <source>Nim has the concept of a global search path (PATH) that is queried to determine where to find imported modules or include files. If multiple files are found an ambiguity error is produced.</source>
          <target state="translated">Nim은 가져온 모듈을 찾거나 파일을 포함 할 위치를 결정하기 위해 쿼리되는 전역 검색 경로 (PATH) 개념을 가지고 있습니다. 여러 파일이 발견되면 모호성 오류가 발생합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
