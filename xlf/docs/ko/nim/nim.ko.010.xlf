<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="0825a884dd8b1351613add9fb0074308e15e7d03" translate="yes" xml:space="preserve">
          <source>Converts an IpAddress into the textual representation</source>
          <target state="translated">IpAddress를 텍스트 표현으로 변환</target>
        </trans-unit>
        <trans-unit id="4710653fdd1a8bfec099be82bbf676cfed37f6fd" translate="yes" xml:space="preserve">
          <source>Converts an OS error code into a human readable string.</source>
          <target state="translated">OS 오류 코드를 사람이 읽을 수있는 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="d28476e13bd8712221e541d096e4554fc6bc2d9d" translate="yes" xml:space="preserve">
          <source>Converts an SQL abstract syntax tree to its string representation.</source>
          <target state="translated">SQL 추상 구문 트리를 문자열 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="52438a7f27ee3d446a585f5bd5053b0046a801ed" translate="yes" xml:space="preserve">
          <source>Converts an UNIX-like path to a native one.</source>
          <target state="translated">UNIX와 유사한 경로를 기본 경로로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="af9c67dfb7d7eacfd4f6812e4d2da7af1e606a58" translate="yes" xml:space="preserve">
          <source>Converts an input rst string into embeddable HTML.</source>
          <target state="translated">입력 된 첫 번째 문자열을 포함 가능한 HTML로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e966a333b537fd28276357a714fff24d7c4269fa" translate="yes" xml:space="preserve">
          <source>Converts an int to a rope.</source>
          <target state="translated">int를 로프로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a94dd4296ef8433bb2720a9703f07204e5368c38" translate="yes" xml:space="preserve">
          <source>Converts an integer &lt;code&gt;i&lt;/code&gt; into a &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">정수 &lt;code&gt;i&lt;/code&gt; 를 &lt;code&gt;float&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="2b863f714c71b2f5335df47d4d51a0b3c7cd9cb7" translate="yes" xml:space="preserve">
          <source>Converts between different character encodings. On UNIX, this uses the &lt;span id=&quot;iconv_1&quot;&gt;iconv&lt;/span&gt; library, on Windows the Windows API.</source>
          <target state="translated">다른 문자 인코딩 사이를 변환합니다. UNIX에서는 &lt;span id=&quot;iconv_1&quot;&gt;iconv&lt;/span&gt; 라이브러리, Windows에서는 Windows API를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="be9697a64f15d67b8951dfadde5aa8ebcf1e2e0a" translate="yes" xml:space="preserve">
          <source>Converts character &lt;code&gt;c&lt;/code&gt; into upper case.</source>
          <target state="translated">문자 &lt;code&gt;c&lt;/code&gt; 를 대문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="35a50cf7dceb739170738cebba85b12ce2b7245a" translate="yes" xml:space="preserve">
          <source>Converts exit code from &lt;code&gt;c_system&lt;/code&gt; into a shell exit code.</source>
          <target state="translated">&lt;code&gt;c_system&lt;/code&gt; 의 종료 코드를 쉘 종료 코드로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="ddf8fea13f0b31684c56da622ff1280c1fbd813f" translate="yes" xml:space="preserve">
          <source>Converts float to its string representation and appends it to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">float를 문자열 표현으로 변환하고 &lt;code&gt;result&lt;/code&gt; 에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="dc1d2efdb070e52be1c8767ffed6e892fa06f920" translate="yes" xml:space="preserve">
          <source>Converts integer to its string representation and appends it to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">정수를 문자열 표현으로 변환하고 &lt;code&gt;result&lt;/code&gt; 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="07a09471276a74eec8bb77c0eb8ffbbd48685ea2" translate="yes" xml:space="preserve">
          <source>Converts string &lt;code&gt;s&lt;/code&gt; into lower case.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 를 소문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="8172c041aaffc081c6998ef2060b9bd3008abda5" translate="yes" xml:space="preserve">
          <source>Converts string &lt;code&gt;s&lt;/code&gt; into upper case.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 를 대문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="423a3ff94ac9dc4f842ed31f81454c54c5872990" translate="yes" xml:space="preserve">
          <source>Converts the AST &lt;code&gt;n&lt;/code&gt; to the concrete Nim code and wraps that in a string literal node.</source>
          <target state="translated">AST &lt;code&gt;n&lt;/code&gt; 을 구체적인 Nim 코드로 변환하고 이를 문자열 리터럴 노드로 래핑합니다.</target>
        </trans-unit>
        <trans-unit id="2f02eb8d9cba48e1c5106575dc0c92fb62c23142" translate="yes" xml:space="preserve">
          <source>Converts the AST of &lt;code&gt;x&lt;/code&gt; into a string representation. This is very useful for debugging.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 의 AST를 문자열 표현으로 변환합니다 . 이것은 디버깅에 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f369afdb862db9c6076cc0006672f79db242e04e" translate="yes" xml:space="preserve">
          <source>Converts the Domain enum to a platform-dependent &lt;code&gt;cint&lt;/code&gt;.</source>
          <target state="translated">Domain 열거 형을 플랫폼 종속 &lt;code&gt;cint&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="5284f00d462106a66438ab9161d28b6293460651" translate="yes" xml:space="preserve">
          <source>Converts the Protocol enum to a platform-dependent &lt;code&gt;cint&lt;/code&gt;.</source>
          <target state="translated">프로토콜 열거를 플랫폼 종속 &lt;code&gt;cint&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="cb7bb4e86c94bc9c61d088e91eb1e1cc87527efa" translate="yes" xml:space="preserve">
          <source>Converts the SockType enum to a platform-dependent &lt;code&gt;cint&lt;/code&gt;.</source>
          <target state="translated">SockType 열거 형을 플랫폼 종속 &lt;code&gt;cint&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="c100daeea4e8861ff9b8da2e9a038086e2b6d6bb" translate="yes" xml:space="preserve">
          <source>Converts the calendar time &lt;em&gt;time&lt;/em&gt; to broken-down time representation, expressed in Coordinated Universal Time (UTC).</source>
          <target state="translated">UTC (협정 세계시)로 표현 된 달력 시간 &lt;em&gt;시간&lt;/em&gt; 을 고장 시간 표시로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="82b6ac140a4ff1ac23733bb4818757b4392f5663" translate="yes" xml:space="preserve">
          <source>Converts the calendar time &lt;em&gt;time&lt;/em&gt; to broken-time representation, expressed relative to the user's specified time zone.</source>
          <target state="translated">사용자가 지정한 시간대를 기준으로 표현 된 달력 시간 &lt;em&gt;시간&lt;/em&gt; 을 중단 시간 표시로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="91ab85c08c3a358f54c7d318f17a7501e31a29de" translate="yes" xml:space="preserve">
          <source>Converts the first character of &lt;code&gt;s&lt;/code&gt; into an upper-case rune.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 첫 번째 문자를 대문자 룬으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="b877ab37d239a0331d907c9b9daebdcacce63678" translate="yes" xml:space="preserve">
          <source>Converts the first character of &lt;em&gt;s&lt;/em&gt; into an upper-case unicode character.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 의 첫 문자를 대문자 유니 코드 문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="66e240e2249a2ca669aab16ffa70496a571eea1a" translate="yes" xml:space="preserve">
          <source>Converts the first character of &lt;em&gt;s&lt;/em&gt; into upper case.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 의 첫 문자 를 대문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="ba0ae5840375464e45a520f676392a46bf8ed84a" translate="yes" xml:space="preserve">
          <source>Converts the first character of string &lt;code&gt;s&lt;/code&gt; into upper case.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 의 첫 번째 문자 를 대문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="accdebd1b9a0af8ede9cc279b021822c54d22306" translate="yes" xml:space="preserve">
          <source>Converts the flags into the underlying OS representation.</source>
          <target state="translated">플래그를 기본 OS 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="c2943fbbe96e0524d76bbb0ed78743d506b533bb" translate="yes" xml:space="preserve">
          <source>Converts the ordered hash set &lt;code&gt;s&lt;/code&gt; to a string, mostly for logging and printing purposes.</source>
          <target state="translated">변환 정렬 된 해시 세트 &lt;code&gt;s&lt;/code&gt; 대부분 로깅 및 인쇄를 목적으로, 문자열로.</target>
        </trans-unit>
        <trans-unit id="b7f6a299ff03d2d45b011ac4ee94f76ad82dbe6e" translate="yes" xml:space="preserve">
          <source>Converts the ordered hash set &lt;em&gt;s&lt;/em&gt; to a string, mostly for logging purposes.</source>
          <target state="translated">변환 정렬 된 해시 세트 &lt;em&gt;이야&lt;/em&gt; 대부분 로깅 목적으로, 문자열로.</target>
        </trans-unit>
        <trans-unit id="e6ddc6102110e98997c6395cbc1fab19c069874f" translate="yes" xml:space="preserve">
          <source>Converts the platform-dependent &lt;code&gt;cint&lt;/code&gt; to the Domain or none(), if the &lt;code&gt;cint&lt;/code&gt; is not known.</source>
          <target state="translated">플랫폼 종속 &lt;code&gt;cint&lt;/code&gt; 를 도메인으로 변환 하거나 &lt;code&gt;cint&lt;/code&gt; 를 알 수없는 경우 none ()을 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="b99ab53e6b2c849ce1ec866a1ac75e038d3dea66" translate="yes" xml:space="preserve">
          <source>Converts the set &lt;code&gt;s&lt;/code&gt; to a string, mostly for logging and printing purposes.</source>
          <target state="translated">변환 설정은 &lt;code&gt;s&lt;/code&gt; 대부분 로깅 및 인쇄를 목적으로, 문자열로.</target>
        </trans-unit>
        <trans-unit id="0ce86adbb1cbb7e191b6716e3d3416e6d7d67afe" translate="yes" xml:space="preserve">
          <source>Converts the set &lt;em&gt;s&lt;/em&gt; to a string, mostly for logging purposes.</source>
          <target state="translated">변환 설정은 &lt;em&gt;이야&lt;/em&gt; 대부분의 목적을 로깅을위한 문자열로.</target>
        </trans-unit>
        <trans-unit id="6ee1dfa98f8b595b823b8bbb065918996eb4cb8f" translate="yes" xml:space="preserve">
          <source>Converts the specified &lt;code&gt;HttpCode&lt;/code&gt; into a HTTP status.</source>
          <target state="translated">지정된 &lt;code&gt;HttpCode&lt;/code&gt; 를 HTTP 상태로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="86f9c8e7652ad0723e9e1e4e5ebe52eca2a2f53f" translate="yes" xml:space="preserve">
          <source>Copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. &lt;code&gt;dest&lt;/code&gt; does not need to be initialized by &lt;a href=&quot;#initIntSet&quot;&gt;initIntSet proc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 를 &lt;code&gt;dest&lt;/code&gt; 에 복사합니다 . &lt;code&gt;dest&lt;/code&gt; 는 &lt;a href=&quot;#initIntSet&quot;&gt;initIntSet proc에&lt;/a&gt; 의해 초기화 될 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="44d0618e765ce40e1a0b4ab483b3b9d3c3d9c69f" translate="yes" xml:space="preserve">
          <source>Copies UTF-8 representation of &lt;code&gt;c&lt;/code&gt; into the preallocated string &lt;code&gt;s&lt;/code&gt; starting at position &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 의 UTF-8 표현을 &lt;code&gt;pos&lt;/code&gt; 위치에서 시작 하는 사전 할당 된 문자열 &lt;code&gt;s&lt;/code&gt; 에 복사 합니다.</target>
        </trans-unit>
        <trans-unit id="0d5537e8dacd67b8d16a5dabd66f88a682e4bbd2" translate="yes" xml:space="preserve">
          <source>Copies UTF-8 representation of &lt;em&gt;c&lt;/em&gt; into the preallocated string &lt;em&gt;s&lt;/em&gt; starting at position &lt;em&gt;pos&lt;/em&gt;. If &lt;em&gt;doInc == true&lt;/em&gt;, &lt;em&gt;pos&lt;/em&gt; is incremented by the number of bytes that have been processed.</source>
          <target state="translated">사본 UTF-8로 표현 &lt;em&gt;C&lt;/em&gt; 미리 할당 된 문자열로 &lt;em&gt;의&lt;/em&gt; 위치에서 시작하는 &lt;em&gt;POS&lt;/em&gt; . &lt;em&gt;doInc == true&lt;/em&gt; 인 경우 처리 된 바이트 수만큼 &lt;em&gt;pos&lt;/em&gt; 가 증가합니다.</target>
        </trans-unit>
        <trans-unit id="e7715a1ecddbfff13849354664e66ed66e76f4a3" translate="yes" xml:space="preserve">
          <source>Copies a directory from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt; preserving file permissions.</source>
          <target state="translated">복사에서 디렉토리 &lt;code&gt;source&lt;/code&gt; 에 &lt;code&gt;dest&lt;/code&gt; 보존 파일 권한.</target>
        </trans-unit>
        <trans-unit id="3cf9640e86dc4ea8b5db4c11d6b8f3247f5680c4" translate="yes" xml:space="preserve">
          <source>Copies a directory from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 에서 &lt;code&gt;dest&lt;/code&gt; 로 디렉토리를 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="26de59e7e7997b34cdeba48bd9e16d70c4d54776" translate="yes" xml:space="preserve">
          <source>Copies a directory from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt; preserving file permissions.</source>
          <target state="translated">&lt;em&gt;소스&lt;/em&gt; 에서 &lt;em&gt;대상&lt;/em&gt; 파일 보존 권한 으로 디렉토리를 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="8f4e6d44e5f3dc2d0f438e53da3cebaabb2b1b5f" translate="yes" xml:space="preserve">
          <source>Copies a directory from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;소스&lt;/em&gt; 에서 &lt;em&gt;dest&lt;/em&gt; 로 디렉토리를 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="8709ff6fc66e6345c5c59b0803b522e735857e9d" translate="yes" xml:space="preserve">
          <source>Copies a file &lt;code&gt;source&lt;/code&gt; into directory &lt;code&gt;dir&lt;/code&gt;, which must exist.</source>
          <target state="translated">파일 &lt;code&gt;source&lt;/code&gt; 를 반드시 존재해야하는 &lt;code&gt;dir&lt;/code&gt; 디렉토리에 복사 합니다.</target>
        </trans-unit>
        <trans-unit id="a29a64991882acb4c481b93c04e0f9fe46038d80" translate="yes" xml:space="preserve">
          <source>Copies a file from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt; preserving file permissions.</source>
          <target state="translated">복사에서 파일 &lt;code&gt;source&lt;/code&gt; 에 &lt;code&gt;dest&lt;/code&gt; 보존 파일 권한.</target>
        </trans-unit>
        <trans-unit id="a9c60164de8f14d93a7d3fbd66ce202ef6488d82" translate="yes" xml:space="preserve">
          <source>Copies a file from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;, where &lt;code&gt;dest.parentDir&lt;/code&gt; must exist.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 에서 &lt;code&gt;dest&lt;/code&gt; 로 파일을 복사 합니다. 여기서 &lt;code&gt;dest.parentDir&lt;/code&gt; 이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="90b4902582c509337a81a289d51814c12a990773" translate="yes" xml:space="preserve">
          <source>Copies a file from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt; preserving file permissions.</source>
          <target state="translated">파일을 &lt;em&gt;소스&lt;/em&gt; 에서 &lt;em&gt;대상&lt;/em&gt; 보존 권한으로 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="0d8d572c7de42b33f034bac4aeb6c7120daa5e04" translate="yes" xml:space="preserve">
          <source>Copies a file from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;소스&lt;/em&gt; 에서 &lt;em&gt;dest&lt;/em&gt; 로 파일을 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="7471946ebdf0c99f409078c4c0576ca729130e70" translate="yes" xml:space="preserve">
          <source>Copies a slice of &lt;code&gt;s&lt;/code&gt; into a new string and returns this new string.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 조각을 새 문자열에 복사 하고이 새 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="522c8a072a2c5cbeaf42a07bb382c90c680a81a6" translate="yes" xml:space="preserve">
          <source>Copies the contents from the memory at &lt;code&gt;source&lt;/code&gt; to the memory at &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 의 메모리에서 &lt;code&gt;dest&lt;/code&gt; 의 메모리로 내용을 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="dae09894e9a2ce16b2539c282c252d58a4bb3a41" translate="yes" xml:space="preserve">
          <source>Copies the contents from the memory at &lt;code&gt;source&lt;/code&gt; to the memory at &lt;code&gt;dest&lt;/code&gt;. Exactly &lt;code&gt;size&lt;/code&gt; bytes will be copied. The memory regions may not overlap. Like any procedure dealing with raw memory this is &lt;strong&gt;unsafe&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 의 메모리에서 &lt;code&gt;dest&lt;/code&gt; 의 메모리로 내용을 복사합니다 . 정확한 &lt;code&gt;size&lt;/code&gt; 바이트가 복사됩니다. 메모리 영역은 겹치지 않을 수 있습니다. 원시 메모리를 다루는 다른 절차와 마찬가지로 이것은 &lt;strong&gt;안전하지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3548e1a19037527035394989566a8c27a8b115e5" translate="yes" xml:space="preserve">
          <source>Copies the dir &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">복사 디렉토리 &lt;code&gt;from&lt;/code&gt; 에 &lt;code&gt;to&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e927a650ce0b920e64665fdd71dd6588069da62d" translate="yes" xml:space="preserve">
          <source>Copies the file &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">복사 파일 &lt;code&gt;from&lt;/code&gt; 에 &lt;code&gt;to&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="62cb68c3c883ea5acddc71293e2fe469803fbcef" translate="yes" xml:space="preserve">
          <source>Copies the value of &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;. The assignment operator for &lt;code&gt;Any&lt;/code&gt; does NOT do this; it performs a shallow copy instead!</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; 값 을 &lt;code&gt;x&lt;/code&gt; 에 복사합니다 . &lt;code&gt;Any&lt;/code&gt; 에 대한 할당 연산자 는이 작업을 수행하지 않습니다. 대신 얕은 복사를 수행합니다!</target>
        </trans-unit>
        <trans-unit id="e4afa419aa763f314bd2e4a51e28161b72552acb" translate="yes" xml:space="preserve">
          <source>Copy all children from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 의 모든 자식 을 &lt;code&gt;dest&lt;/code&gt; 로 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="2aee4f4602aac4bdcb0717c3e27a950207855d89" translate="yes" xml:space="preserve">
          <source>Copy all children from &lt;em&gt;src&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;src&lt;/em&gt; 에서 &lt;em&gt;dest로&lt;/em&gt; 모든 어린이 복사&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5eb7ff1504f5da42180d913319557cc9fc5a40f4" translate="yes" xml:space="preserve">
          <source>Copy lineinfo from &lt;code&gt;info&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; 에서 lineinfo를 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="1b531523845572624d464c4423bc89536820c92e" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-2005 University of Cambridge</source>
          <target state="translated">저작권 (c) 1997-2005 Cambridge University</target>
        </trans-unit>
        <trans-unit id="68836c550ee20fae0e06b2994e76a40348d2fc30" translate="yes" xml:space="preserve">
          <source>Core</source>
          <target state="translated">Core</target>
        </trans-unit>
        <trans-unit id="879f7a1f1ea784df949fa9fd42df4e58db07743b" translate="yes" xml:space="preserve">
          <source>CoroutineRef holds a pointer to actual coroutine object. Public API always returns CoroutineRef instead of CoroutinePtr in order to allow holding a reference to coroutine object while it can be safely deallocated by coroutine scheduler loop. In this case Coroutine.reference.coro is set to nil. Public API checks for for it being nil and gracefully fails if it is nil.</source>
          <target state="translated">CoroutineRef에는 실제 코 루틴 객체에 대한 포인터가 있습니다. 퍼블릭 API는 코 루틴 스케줄러 루프에 의해 안전하게 할당 해제 될 수 있지만 코 루틴 객체에 대한 참조를 보유 할 수 있도록 항상 CoroutinePtr 대신 CoroutineRef를 반환합니다. 이 경우 Coroutine.reference.coro는 nil로 설정됩니다. 공개 API가 nil인지 확인하고 nil이면 정상적으로 실패합니다.</target>
        </trans-unit>
        <trans-unit id="d9894520c8012136555a8a6a51046ebffd8adf3c" translate="yes" xml:space="preserve">
          <source>CoroutineRef holds a pointer to actual coroutine object. Public API always returns CoroutineRef instead of CoroutinePtr in order to allow holding a reference to coroutine object while it can be safely deallocated by coroutine scheduler loop. In this case Coroutine.reference.coro is set to nil. Public API checks for it being nil and gracefully fails if it is nil.</source>
          <target state="translated">CoroutineRef는 실제 코 루틴 객체에 대한 포인터를 보유합니다. 공용 API는 항상 코 루틴 스케줄러 루프에 의해 안전하게 할당 해제 될 수있는 동안 코 루틴 객체에 대한 참조를 보유 할 수 있도록 CoroutinePtr 대신 CoroutineRef를 반환합니다. 이 경우 Coroutine.reference.coro는 nil로 설정됩니다. 공용 API는 nil인지 확인하고 nil이면 정상적으로 실패합니다.</target>
        </trans-unit>
        <trans-unit id="ca6ad6006b6cf8a63b13b4b15300ec4f06f6b0bb" translate="yes" xml:space="preserve">
          <source>Corresponding AST</source>
          <target state="translated">해당 AST</target>
        </trans-unit>
        <trans-unit id="75a83ac1e471519b1296e28c7c6b210298e373b0" translate="yes" xml:space="preserve">
          <source>Count the occurrences of a substring &lt;code&gt;sub&lt;/code&gt; in the string &lt;code&gt;s&lt;/code&gt;. Overlapping occurrences of &lt;code&gt;sub&lt;/code&gt; only count when &lt;code&gt;overlapping&lt;/code&gt; is set to true (default: false).</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 에서 하위 문자열 &lt;code&gt;sub&lt;/code&gt; 의 발생 횟수를 계산합니다 . 의 중복 발생 &lt;code&gt;sub&lt;/code&gt; 경우에만 카운트 &lt;code&gt;overlapping&lt;/code&gt; 참 (: 거짓 기본값)로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="ecbbbe8b50c48c4f3e149e9838ae64b233a8ac9a" translate="yes" xml:space="preserve">
          <source>Count the occurrences of a substring &lt;em&gt;sub&lt;/em&gt; in the string &lt;em&gt;s&lt;/em&gt;. Overlapping occurrences of &lt;em&gt;sub&lt;/em&gt; only count when &lt;em&gt;overlapping&lt;/em&gt; is set to true.</source>
          <target state="translated">문자열 &lt;em&gt;s&lt;/em&gt; 에서 하위 문자열 &lt;em&gt;하위&lt;/em&gt; 의 발생 횟수를 계산하십시오 . &lt;em&gt;하위의&lt;/em&gt; 중복 발생은 &lt;em&gt;중복&lt;/em&gt; 이 true로 설정된 경우에만 계산됩니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70565e1c7d2d71e9af124d033e09f6f4e7077b82" translate="yes" xml:space="preserve">
          <source>Count the occurrences of the character &lt;code&gt;sub&lt;/code&gt; in the string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 에서 &lt;code&gt;sub&lt;/code&gt; 문자의 발생 횟수를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="8eb9181e4924c1b8e6a2676efbc599b82be9c0b5" translate="yes" xml:space="preserve">
          <source>Count the occurrences of the character &lt;em&gt;sub&lt;/em&gt; in the string &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">문자열 &lt;em&gt;s&lt;/em&gt; 에서 문자 &lt;em&gt;하위&lt;/em&gt; 의 발생 횟수를 계산하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="48d4d0d7513fcd107768d0b0eccdcf292d3d4057" translate="yes" xml:space="preserve">
          <source>Count the occurrences of the group of character &lt;code&gt;subs&lt;/code&gt; in the string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 에서 문자 &lt;code&gt;subs&lt;/code&gt; 그룹의 발생 횟수를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="62be6439bd5e8c4e51fce3efc8fd3d9c251d4337" translate="yes" xml:space="preserve">
          <source>Count the occurrences of the group of character &lt;em&gt;subs&lt;/em&gt; in the string &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">문자열 &lt;em&gt;s&lt;/em&gt; 에서 문자 &lt;em&gt;서브&lt;/em&gt; 그룹의 발생 횟수를 계산하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e85384a44aabbe7bfca160cb72a7a94391662dfe" translate="yes" xml:space="preserve">
          <source>CountTable</source>
          <target state="translated">CountTable</target>
        </trans-unit>
        <trans-unit id="d8eeb1ed4c17fdc34ce13e52780c6286e251b4fe" translate="yes" xml:space="preserve">
          <source>Counting down can be achieved as easily (but is less often needed):</source>
          <target state="translated">카운트 다운은 쉽게 수행 할 수 있지만 덜 자주 필요합니다.</target>
        </trans-unit>
        <trans-unit id="15d1d012699c9cc6c5ff6e466d1426174b9aba9b" translate="yes" xml:space="preserve">
          <source>Counts from ordinal value &lt;code&gt;a&lt;/code&gt; down to &lt;code&gt;b&lt;/code&gt; (inclusive) with the given step count.</source>
          <target state="translated">주어진 단계 수를 사용하여 서수 값 &lt;code&gt;a&lt;/code&gt; 에서 &lt;code&gt;b&lt;/code&gt; (포함)까지 계산합니다.</target>
        </trans-unit>
        <trans-unit id="70a7e005bb196109a15a3d87f4130eafaaa737e1" translate="yes" xml:space="preserve">
          <source>Counts from ordinal value &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; (inclusive) with the given step count.</source>
          <target state="translated">주어진 단계 수를 사용하여 서수 값 &lt;code&gt;a&lt;/code&gt; 에서 &lt;code&gt;b&lt;/code&gt; (포함)까지 계산합니다.</target>
        </trans-unit>
        <trans-unit id="95e4c673e17a060a448495af86d78f8c7deacaa8" translate="yes" xml:space="preserve">
          <source>Counts from ordinal value &lt;em&gt;a&lt;/em&gt; down to &lt;em&gt;b&lt;/em&gt; (inclusive) with the given step count. &lt;em&gt;T&lt;/em&gt; may be any ordinal type, &lt;em&gt;step&lt;/em&gt; may only be positive. &lt;strong&gt;Note&lt;/strong&gt;: This fails to count to &lt;code&gt;low(int)&lt;/code&gt; if T = int for efficiency reasons.</source>
          <target state="translated">주어진 걸음 수를 사용하여 서수 값 &lt;em&gt;a&lt;/em&gt; 에서 &lt;em&gt;b&lt;/em&gt; (포함)까지 계산합니다. &lt;em&gt;T&lt;/em&gt; 는 서수 유형일 수 있으며 &lt;em&gt;단계&lt;/em&gt; 는 양수일 수 있습니다. &lt;strong&gt;참고&lt;/strong&gt; : 효율성상의 이유로 T = int이면 &lt;code&gt;low(int)&lt;/code&gt; 로 계산되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a4a396824d4f9efa6ebc6369fd73dcb9de024e14" translate="yes" xml:space="preserve">
          <source>Counts from ordinal value &lt;em&gt;a&lt;/em&gt; up to &lt;em&gt;b&lt;/em&gt; (inclusive) with the given step count. &lt;em&gt;S&lt;/em&gt;, &lt;em&gt;T&lt;/em&gt; may be any ordinal type, &lt;em&gt;step&lt;/em&gt; may only be positive. &lt;strong&gt;Note&lt;/strong&gt;: This fails to count to &lt;code&gt;high(int)&lt;/code&gt; if T = int for efficiency reasons.</source>
          <target state="translated">주어진 단계 수를 사용하여 서수 값 &lt;em&gt;a&lt;/em&gt; 에서 &lt;em&gt;b&lt;/em&gt; (포함)까지 계산합니다. &lt;em&gt;S&lt;/em&gt; , &lt;em&gt;T&lt;/em&gt; 는 임의의 서수 유형일 수 있으며, &lt;em&gt;단계&lt;/em&gt; 는 양수일 수 있습니다. &lt;strong&gt;참고&lt;/strong&gt; : 효율성상의 이유로 T = int 인 경우 &lt;code&gt;high(int)&lt;/code&gt; 로 계산되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ab8edac288ea60a72babb4ac13f00e39b6304d03" translate="yes" xml:space="preserve">
          <source>Counts the set bits in &lt;em&gt;n&lt;/em&gt;.</source>
          <target state="translated">세트 비트를 &lt;em&gt;n&lt;/em&gt; 단위로 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="b1f89440b5c7c37e9007e782278123e452405973" translate="yes" xml:space="preserve">
          <source>Counts the set bits in integer. (also called &lt;span id=&quot;hamming-weight_1&quot;&gt;Hamming weight&lt;/span&gt;.)</source>
          <target state="translated">설정된 비트를 정수로 계산합니다. ( &lt;span id=&quot;hamming-weight_1&quot;&gt;해밍 무게&lt;/span&gt; 라고도 함 )</target>
        </trans-unit>
        <trans-unit id="d37d133ea5c1b52753b3893f902c233ee8442bb5" translate="yes" xml:space="preserve">
          <source>Covariance</source>
          <target state="translated">Covariance</target>
        </trans-unit>
        <trans-unit id="63b826ee60a4e4916057a0ebb51042f5ae103a26" translate="yes" xml:space="preserve">
          <source>Covariance in Nim can be introduced only though pointer-like types such as &lt;code&gt;ptr&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;. Sequence, Array and OpenArray types, instantiated with pointer-like types will be considered covariant if and only if they are also immutable. The introduction of a &lt;code&gt;var&lt;/code&gt; modifier or additional &lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;ref&lt;/code&gt; indirections would result in invariant treatment of these types.</source>
          <target state="translated">Nim의 공분산은 &lt;code&gt;ptr&lt;/code&gt; 및 &lt;code&gt;ref&lt;/code&gt; 와 같은 포인터와 같은 유형을 통해서만 도입 될 수 있습니다 . 포인터와 같은 유형으로 인스턴스화 된 시퀀스, 배열 및 OpenArray 유형은 불변 인 경우에만 공변량으로 간주됩니다. &lt;code&gt;var&lt;/code&gt; 수정 자 또는 추가 &lt;code&gt;ptr&lt;/code&gt; 또는 &lt;code&gt;ref&lt;/code&gt; 간접 지시를 도입하면 이러한 유형의 변경이 처리되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dccbce7edd79766e9a19432f1d04b60e7027765e" translate="yes" xml:space="preserve">
          <source>Covariance in Nim can be introduced only through pointer-like types such as &lt;code&gt;ptr&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;. Sequence, Array and OpenArray types, instantiated with pointer-like types will be considered covariant if and only if they are also immutable. The introduction of a &lt;code&gt;var&lt;/code&gt; modifier or additional &lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;ref&lt;/code&gt; indirections would result in invariant treatment of these types.</source>
          <target state="translated">Nim의 공분산은 &lt;code&gt;ptr&lt;/code&gt; 및 &lt;code&gt;ref&lt;/code&gt; 와 같은 포인터와 유사한 유형을 통해서만 도입 될 수 있습니다 . 포인터와 유사한 유형으로 인스턴스화 된 Sequence, Array 및 OpenArray 유형은 변경 불가능한 경우에만 공변으로 간주됩니다. &lt;code&gt;var&lt;/code&gt; 수정 자 또는 추가 &lt;code&gt;ptr&lt;/code&gt; 또는 &lt;code&gt;ref&lt;/code&gt; 간접 지정 의 도입은 이러한 유형의 불변 처리를 초래합니다.</target>
        </trans-unit>
        <trans-unit id="68aa0f6b41668091d7c3700a38dd08ab9b4ecde2" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#Time&quot;&gt;Time&lt;/a&gt; from a unix timestamp and a nanosecond part.</source>
          <target state="translated">유닉스 타임 스탬프와 나노초 부분에서 &lt;a href=&quot;#Time&quot;&gt;시간&lt;/a&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="33c07d86e5962dca17024d9f64967cd8c28e691b" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;AsyncFTPClient&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;AsyncFTPClient&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="f5fecadebd6d593a6695431391ad0fd49c5ed655" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;FtpClient&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;FtpClient&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="23edbeaa9cc5fe8cad35404118fd40e0a614f8b3" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;Time&lt;/code&gt; from a unix timestamp and a nanosecond part.</source>
          <target state="translated">유닉스 타임 스탬프와 나노초 부분에서 &lt;code&gt;Time&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="fff4f72ec41ce789bcee80aeb477691effbd6311" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;calculator.nim&lt;/code&gt; file with the following content (or reuse the one from the previous section):</source>
          <target state="translated">다음 내용 으로 &lt;code&gt;calculator.nim&lt;/code&gt; 파일을 생성하십시오 (또는 이전 섹션의 파일을 재사용하십시오) :</target>
        </trans-unit>
        <trans-unit id="0750a0fb5f72560c40d6368863dca814c7e932c6" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;calculator.nim&lt;/code&gt; file with the following content:</source>
          <target state="translated">다음과 같은 내용 으로 &lt;code&gt;calculator.nim&lt;/code&gt; 파일을 만듭니다 :</target>
        </trans-unit>
        <trans-unit id="d4e6a4c5d2254e6dc4b39e6d1c01a13965f476bc" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;fib.nim&lt;/code&gt; file with the following content (or reuse the one from the previous section):</source>
          <target state="translated">다음 내용 으로 &lt;code&gt;fib.nim&lt;/code&gt; 파일을 작성하십시오 (또는 이전 섹션의 파일을 재사용하십시오).</target>
        </trans-unit>
        <trans-unit id="4e02889edf7b7d868b5ba6d7e5e804755b35a935" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;fib.nim&lt;/code&gt; file with the following content:</source>
          <target state="translated">다음 내용 으로 &lt;code&gt;fib.nim&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="770be89953f498f7072651045ca40deb34be8bc5" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;host.html&lt;/code&gt; file with the following content:</source>
          <target state="translated">다음 내용 으로 &lt;code&gt;host.html&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="4ed3a44cf5a0ea5653d547132a4b1514041e6365" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;logic.c&lt;/code&gt; file with the following content:</source>
          <target state="translated">다음 내용 으로 &lt;code&gt;logic.c&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d10438b4c20277d901a7f3991b84fbd9aa0db8d" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;maths.c&lt;/code&gt; file with the following content:</source>
          <target state="translated">다음 내용 으로 &lt;code&gt;maths.c&lt;/code&gt; 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e060d79809bc44b5c4d312ecb96133e434fb4eee" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;mhost.html&lt;/code&gt; file with the following content:</source>
          <target state="translated">다음 내용 으로 &lt;code&gt;mhost.html&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca32a9990712370dd2b4a59478074452d20b508e" translate="yes" xml:space="preserve">
          <source>Create a hard link at &lt;code&gt;dest&lt;/code&gt; which points to the item specified by &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 에 지정된 항목을 가리키는 하드 링크를 &lt;code&gt;dest&lt;/code&gt; 에 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="82dbacf1c35d81a7e70386b3e2d60c18b2bfd7c8" translate="yes" xml:space="preserve">
          <source>Create a hard link at &lt;em&gt;dest&lt;/em&gt; which points to the item specified by &lt;em&gt;src&lt;/em&gt;.</source>
          <target state="translated">에서 하드 링크 만들기 &lt;em&gt;의 최종 도착&lt;/em&gt; 항목에 포인트로 지정 &lt;em&gt;SRC를&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="030e0d9bc0cb4ca7233ba1769d6629fea8e193f4" translate="yes" xml:space="preserve">
          <source>Create a new &lt;a href=&quot;#DateTime&quot;&gt;DateTime&lt;/a&gt; in the specified timezone.</source>
          <target state="translated">지정된 시간대에 새 &lt;a href=&quot;#DateTime&quot;&gt;DateTime&lt;/a&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="51c2291b81872d9dcfb57c14f05fe411c9b46f5f" translate="yes" xml:space="preserve">
          <source>Create a new &lt;a href=&quot;#Duration&quot;&gt;Duration&lt;/a&gt;.</source>
          <target state="translated">새 &lt;a href=&quot;#Duration&quot;&gt;기간을&lt;/a&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="8b0805f1b811b237a62610453d2977ae7ec0d3c5" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;ConsoleLogger&lt;/code&gt; with the &lt;a href=&quot;#newConsoleLogger&quot;&gt;newConsoleLogger proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#newConsoleLogger&quot;&gt;newConsoleLogger proc을&lt;/a&gt; 사용하여 새 &lt;code&gt;ConsoleLogger&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e61edb70f4e4628737d81482078857a79a3958cd" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;DateTime&lt;/code&gt; in the specified timezone.</source>
          <target state="translated">지정된 시간대에서 새 &lt;code&gt;DateTime&lt;/code&gt; 을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="a74bd952c2e1cee579ce15b47226fdbecb52ac04" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;FileLogger&lt;/code&gt; with the &lt;a href=&quot;#newFileLogger,File&quot;&gt;newFileLogger proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#newFileLogger,File&quot;&gt;newFileLogger proc을&lt;/a&gt; 사용하여 새 &lt;code&gt;FileLogger&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="ad134b7dabefd052798c23ea0136931ba041a207" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;FutureStream&lt;/code&gt;. This future's callback is activated when two events occur:</source>
          <target state="translated">새 &lt;code&gt;FutureStream&lt;/code&gt; 을 만듭니다 . 이 미래의 콜백은 두 가지 이벤트가 발생하면 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="7ed592456e6fa924c32835bdba9590feaf11f59c" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;FutureVar&lt;/code&gt;. This Future type is ideally suited for situations where you want to avoid unnecessary allocations of Futures.</source>
          <target state="translated">새로운 &lt;code&gt;FutureVar&lt;/code&gt; 를 만듭니다 . 이 선물 유형은 불필요한 선물 할당을 피하려는 상황에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="a59da099be8bec204e6d3bd3fb0415a185f05511" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;RollingFileLogger&lt;/code&gt; with the &lt;a href=&quot;#newRollingFileLogger,FileMode,int,int&quot;&gt;newRollingFileLogger proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#newRollingFileLogger,FileMode,int,int&quot;&gt;newRollingFileLogger proc을&lt;/a&gt; 사용하여 새 &lt;code&gt;RollingFileLogger&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="b77fd85999ad4117b1c9569434db03dabf0af936" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;TimeInterval&lt;/code&gt; with &lt;a href=&quot;#initTimeInterval,int,int,int,int,int,int,int,int,int,int&quot;&gt;initTimeInterval proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#initTimeInterval,int,int,int,int,int,int,int,int,int,int&quot;&gt;initTimeInterval proc&lt;/a&gt; 으로 새 &lt;code&gt;TimeInterval&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="7577f69a35b8e4422d6b2c993390e358a36644e3" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;Timezone&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;Timezone&lt;/code&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="9a39e037135320a7d649af14e900adc175d453b7" translate="yes" xml:space="preserve">
          <source>Create a new Rand state using the &lt;a href=&quot;#initRand,int64&quot;&gt;initRand proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#initRand,int64&quot;&gt;initRand proc을&lt;/a&gt; 사용하여 새로운 Rand 상태를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="075b6ed9e1da39a3c8119948c33156a30e0f223d" translate="yes" xml:space="preserve">
          <source>Create a new block statement with label</source>
          <target state="translated">라벨이 붙은 새로운 블록 문장 만들기</target>
        </trans-unit>
        <trans-unit id="bc16236fcbf82af9794aa206a4f1458bba30ca4b" translate="yes" xml:space="preserve">
          <source>Create a new block statement with label.</source>
          <target state="translated">레이블이있는 새 블록 문을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9e803c40a5172896982bbe0c82954f04e3a426ac" translate="yes" xml:space="preserve">
          <source>Create a new block: stmt</source>
          <target state="translated">새 블록을 작성하십시오. stmt</target>
        </trans-unit>
        <trans-unit id="a7994f534ed967f943c4a71245b1f79be9d88865" translate="yes" xml:space="preserve">
          <source>Create a new block: stmt.</source>
          <target state="translated">새 블록 생성 : stmt.</target>
        </trans-unit>
        <trans-unit id="c81a7fb4162b5e66a18e252548a4190916db5c61" translate="yes" xml:space="preserve">
          <source>Create a new configuration table. Useful when wanting to create a configuration file.</source>
          <target state="translated">새 구성 테이블을 작성하십시오. 구성 파일을 만들 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="28d3edec8c7cef4cf9fb42a75c8f5598392223c2" translate="yes" xml:space="preserve">
          <source>Create a new const stmt</source>
          <target state="translated">새로운 const stmt 생성</target>
        </trans-unit>
        <trans-unit id="1b5fef85da5bd6be72b9b9fab18a65479cd64e8d" translate="yes" xml:space="preserve">
          <source>Create a new const stmt.</source>
          <target state="translated">새 const stmt를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e8f77cac1785ce96b6a76e96505d2a469b7f8af7" translate="yes" xml:space="preserve">
          <source>Create a new deque. Optionally, the initial capacity can be reserved via &lt;em&gt;initialSize&lt;/em&gt; as a performance optimization. The length of a newly created deque will still be 0.</source>
          <target state="translated">새로운 deque를 만듭니다. 선택적 으로 성능 최적화로 &lt;em&gt;initialSize&lt;/em&gt; 를 통해 초기 용량을 예약 할 수 있습니다 . 새로 생성 된 deque의 길이는 여전히 0입니다.</target>
        </trans-unit>
        <trans-unit id="593df16e6d922e3bffcf46384642bb067a49cbef" translate="yes" xml:space="preserve">
          <source>Create a new empty node</source>
          <target state="translated">빈 노드를 새로 만듭니다</target>
        </trans-unit>
        <trans-unit id="f7c6afb03fe94a1bd73054f5d53c6749b1e412d1" translate="yes" xml:space="preserve">
          <source>Create a new empty node.</source>
          <target state="translated">새 빈 노드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3a174e3ed8e720e11187b74c70084dc931935a3f" translate="yes" xml:space="preserve">
          <source>Create a new ident node from a string</source>
          <target state="translated">문자열에서 새 아이디 노드 만들기</target>
        </trans-unit>
        <trans-unit id="87a121cb8a0b85a732271979e81ae1173e7dd306" translate="yes" xml:space="preserve">
          <source>Create a new ident node from a string.</source>
          <target state="translated">문자열에서 새 ident 노드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="296989a179b6137adf54b8b30a7e490ad29a910b" translate="yes" xml:space="preserve">
          <source>Create a new let stmt</source>
          <target state="translated">새로운 let stmt를 작성하십시오</target>
        </trans-unit>
        <trans-unit id="f42059b4b67fe64cfbd77c3adda8f5b6180a12a6" translate="yes" xml:space="preserve">
          <source>Create a new let stmt.</source>
          <target state="translated">새 let stmt를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2cf43aedc93b3d9b526ede852d818a634d41f02d" translate="yes" xml:space="preserve">
          <source>Create a new multipart data object and fill it with the entries &lt;code&gt;xs&lt;/code&gt; directly.</source>
          <target state="translated">새 멀티 파트 데이터 개체를 만들고 &lt;code&gt;xs&lt;/code&gt; 항목으로 직접 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="8887d174892fa4be23f465c6c582cf6fc6d2956d" translate="yes" xml:space="preserve">
          <source>Create a new multipart data object and fill it with the entries &lt;em&gt;xs&lt;/em&gt; directly.</source>
          <target state="translated">새로운 멀티 파트 데이터 객체를 생성하고 &lt;em&gt;xs&lt;/em&gt; 항목으로 직접 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="29eb5b33a33d8081ef581fce9546bd890d04de83" translate="yes" xml:space="preserve">
          <source>Create a new parentheses-enclosed expression</source>
          <target state="translated">괄호로 묶은 새 표현식 작성</target>
        </trans-unit>
        <trans-unit id="9cc4a57a6a0b5531711d965c69ff7b1c0ddec846" translate="yes" xml:space="preserve">
          <source>Create a new parentheses-enclosed expression.</source>
          <target state="translated">새 괄호로 묶인 식을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8f27a0df0d9d34715e04c11b1f227f743f45013c" translate="yes" xml:space="preserve">
          <source>Create a new rational number.</source>
          <target state="translated">새로운 유리수를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bdbbaabbfdead70dd0b2b700fa878179fd9f4c13" translate="yes" xml:space="preserve">
          <source>Create a new sequence of a given length</source>
          <target state="translated">주어진 길이의 새 시퀀스 만들기</target>
        </trans-unit>
        <trans-unit id="db61c7189b7e71e8019eb2a233df35538bde5716" translate="yes" xml:space="preserve">
          <source>Create a new sequence with zero length and a given capacity</source>
          <target state="translated">길이가 0이고 용량이 지정된 새 시퀀스 만들기</target>
        </trans-unit>
        <trans-unit id="552598b4b539185c0edfc3839a664894484059a7" translate="yes" xml:space="preserve">
          <source>Create a new statement list</source>
          <target state="translated">새로운 명세서리스트 작성</target>
        </trans-unit>
        <trans-unit id="6e770538b7d2a28301331dfc558bfa91e98819b4" translate="yes" xml:space="preserve">
          <source>Create a new statement list.</source>
          <target state="translated">새 명세서 목록을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="aed0349c73070e14686b4d9c58ef01120325cd7e" translate="yes" xml:space="preserve">
          <source>Create a new var stmt</source>
          <target state="translated">새로운 var stmt 생성</target>
        </trans-unit>
        <trans-unit id="1b0d28b69737a14bd09e79a81f8674cb067260c3" translate="yes" xml:space="preserve">
          <source>Create a new var stmt.</source>
          <target state="translated">새 var stmt를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b2cfe1bd53999797e75867e3ec00c2accc3a70e1" translate="yes" xml:space="preserve">
          <source>Create a symbolic link at &lt;code&gt;dest&lt;/code&gt; which points to the item specified by &lt;code&gt;src&lt;/code&gt;. On most operating systems, will fail if a link already exists.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 로 지정된 항목을 가리키는 &lt;code&gt;dest&lt;/code&gt; 에서 심볼릭 링크를 만듭니다 . 대부분의 운영 체제에서 링크가 이미 있으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="2673c8ff74ced70c5116036fab9e318a8b91f3a4" translate="yes" xml:space="preserve">
          <source>Create a symbolic link at &lt;em&gt;dest&lt;/em&gt; which points to the item specified by &lt;em&gt;src&lt;/em&gt;. On most operating systems, will fail if a link already exists.</source>
          <target state="translated">에서 심볼릭 링크 만들기 &lt;em&gt;의 최종 도착&lt;/em&gt; 항목에 포인트로 지정 &lt;em&gt;SRC를&lt;/em&gt; . 대부분의 운영 체제에서 링크가 이미 존재하면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="d6362064f96a05cf2bb91cb3077538fd06202e6c" translate="yes" xml:space="preserve">
          <source>Create a temporary file.</source>
          <target state="translated">임시 파일을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="b3ea057aeb3f6aa1874ce264a3345d18c387ba36" translate="yes" xml:space="preserve">
          <source>Create new colon expression newColonExpr(a, b) -&amp;gt; &lt;em&gt;a: b&lt;/em&gt;</source>
          <target state="translated">새 콜론 표현식 작성 newColonExpr (a, b)-&amp;gt; &lt;em&gt;a : b&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3aea6d2bb198d69b09100eb4f258bb209793e527" translate="yes" xml:space="preserve">
          <source>Create new colon expression. newColonExpr(a, b) -&amp;gt; &lt;code&gt;a: b&lt;/code&gt;</source>
          <target state="translated">새 콜론 표현식을 만듭니다. newColonExpr (a, b)-&amp;gt; &lt;code&gt;a: b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6d7e615c75ed606e1264e4ea4741c40a7f18023" translate="yes" xml:space="preserve">
          <source>Create new dot expression a.dot(b) -&amp;gt; &lt;em&gt;a.b&lt;/em&gt;</source>
          <target state="translated">새로운 점 표현 만들기 a.dot (b)-&amp;gt; &lt;em&gt;ab&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c1c97e8b1aacc529037a146313b0c3e2b7012211" translate="yes" xml:space="preserve">
          <source>Create new dot expression. a.dot(b) -&amp;gt; &lt;code&gt;a.b&lt;/code&gt;</source>
          <target state="translated">새로운 점 표현을 만듭니다. a.dot (b)-&amp;gt; &lt;code&gt;a.b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1039a7378e0ba708e8e4894720600582e0055819" translate="yes" xml:space="preserve">
          <source>Create testable documentation</source>
          <target state="translated">테스트 가능한 문서 만들기</target>
        </trans-unit>
        <trans-unit id="ba9faaa43893c86c8e1c3fa5adf65c0016faf573" translate="yes" xml:space="preserve">
          <source>Create the output directory and returns a full path to the output file</source>
          <target state="translated">출력 디렉터리를 만들고 출력 파일의 전체 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b7d4faa6a99c31394a4aea2d93986c708da30041" translate="yes" xml:space="preserve">
          <source>Creates &lt;code&gt;AsyncFile&lt;/code&gt; with a previously opened file descriptor &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">이전에 열린 파일 설명자 &lt;code&gt;fd&lt;/code&gt; 를 사용하여 &lt;code&gt;AsyncFile&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e32cb321457c0858e2e809df0094b72d918dbc21" translate="yes" xml:space="preserve">
          <source>Creates &lt;em&gt;AsyncFile&lt;/em&gt; with a previously opened file descriptor &lt;em&gt;fd&lt;/em&gt;.</source>
          <target state="translated">작성 &lt;em&gt;AsyncFile을&lt;/em&gt; 이전에 열린 파일 기술자와 &lt;em&gt;FD&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ef7877d958d09ad5f41ccd6b3a045aec20eb89bc" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;File&lt;/code&gt; from a &lt;code&gt;filehandle&lt;/code&gt; with given &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;mode&lt;/code&gt; 로 &lt;code&gt;filehandle&lt;/code&gt; 에서 &lt;code&gt;File&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="51c2a002a32b91eb9796a0b1ab55d33e641a5607" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;File&lt;/code&gt; from a &lt;em&gt;filehandle&lt;/em&gt; with given &lt;em&gt;mode&lt;/em&gt;.</source>
          <target state="translated">작성 &lt;code&gt;File&lt;/code&gt; A로부터 &lt;em&gt;파일 핸들&lt;/em&gt; 주어진와 &lt;em&gt;모드&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ea3db51de64d8fe4daabbd9c6a635502cb1d6af7" translate="yes" xml:space="preserve">
          <source>Creates a CDATASection node whose value is the specified string.</source>
          <target state="translated">값이 지정된 문자열 인 CDATASection 노드를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9e3b2800905b10fb32ad73c64fb25c61255d8385" translate="yes" xml:space="preserve">
          <source>Creates a Comment node given the specified string.</source>
          <target state="translated">지정된 문자열이 주어진 Comment 노드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="cd7c5813a99d94080267a6a064fd2a08c687f142" translate="yes" xml:space="preserve">
          <source>Creates a NULL terminated cstringArray from &lt;code&gt;a&lt;/code&gt;. The result has to be freed with &lt;code&gt;deallocCStringArray&lt;/code&gt; after it's not needed anymore.</source>
          <target state="translated">에서 cstringArray를 종료에 NULL 작성 &lt;code&gt;a&lt;/code&gt; . 결과는 더 이상 필요하지 않은 후 &lt;code&gt;deallocCStringArray&lt;/code&gt; 로 해제되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="1d2239d815558fae2098e2b33fdbabedd53aaf01" translate="yes" xml:space="preserve">
          <source>Creates a ProcessingInstruction node given the specified name and data strings.</source>
          <target state="translated">지정된 이름과 데이터 문자열이 주어진 ProcessingInstruction 노드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="fe3cab960a9b3394ae3f294a187a878cfc7226ae" translate="yes" xml:space="preserve">
          <source>Creates a Text node given the specified string.</source>
          <target state="translated">지정된 문자열이 지정된 텍스트 노드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="68602987eddb9a00a8dbba129c4400d618213aeb" translate="yes" xml:space="preserve">
          <source>Creates a bitmask based on a slice of bits.</source>
          <target state="translated">비트 조각을 기반으로 비트 마스크를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b265e81dc0757d098864df1b026e934c585d7a22" translate="yes" xml:space="preserve">
          <source>Creates a command in the format of &lt;code&gt;Set-Cookie: key=value; Domain=...; ...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Set-Cookie: key=value; Domain=...; ...&lt;/code&gt; 형식으로 명령을 만듭니다 . key = value; 도메인 = ...; ...</target>
        </trans-unit>
        <trans-unit id="5eb8f2a42bbf63887c38957d8aa2bf875c970974" translate="yes" xml:space="preserve">
          <source>Creates a comment statement node.</source>
          <target state="translated">주석문 노드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7d15b2faff2a42afd6bb1667ac4a7587715b676a" translate="yes" xml:space="preserve">
          <source>Creates a directory &lt;code&gt;dir&lt;/code&gt;. If &lt;code&gt;recursive&lt;/code&gt; is true, the topmost subdirectory of &lt;code&gt;dir&lt;/code&gt; will be created first, following the secondmost... etc. this allows you to give a full path as the &lt;code&gt;dir&lt;/code&gt; without worrying about subdirectories not existing.</source>
          <target state="translated">디렉토리 &lt;code&gt;dir&lt;/code&gt; 을 작성 합니다. 경우 &lt;code&gt;recursive&lt;/code&gt; 사실이다의 최상위 하위 &lt;code&gt;dir&lt;/code&gt; 이 당신이로 전체 경로를 제공 할 수 있습니다 등 ... secondmost 다음, 처음 생성 될 &lt;code&gt;dir&lt;/code&gt; 존재하지 않는 하위 디렉토리에 대한 걱정없이.</target>
        </trans-unit>
        <trans-unit id="609fa711fc6de86dfba3274bfae8fbc0cf93150f" translate="yes" xml:space="preserve">
          <source>Creates a float literal node from &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 에서 부동 리터럴 노드를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="dae70e0209ed57f5cb8389beda242534dd55df39" translate="yes" xml:space="preserve">
          <source>Creates a formatter that writes report to the specified stream in JUnit format. The &lt;code&gt;stream&lt;/code&gt; is NOT closed automatically when the test are finished, because the formatter has no way to know when all tests are finished. You should invoke formatter.close() to finalize the report.</source>
          <target state="translated">지정된 스트림에 보고서를 JUnit 형식으로 작성하는 포맷터를 작성합니다. &lt;code&gt;stream&lt;/code&gt; 테스트가 완료되면 포맷터는 모든 검사가 완료되면 알 수있는 방법이 없기 때문에, 자동으로 종료되지 않습니다. formatter.close ()를 호출하여 보고서를 마무리해야합니다.</target>
        </trans-unit>
        <trans-unit id="8890c664f36074da4fcaa332ed2755d8f3bff0bf" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#ConsoleLogger&quot;&gt;ConsoleLogger&lt;/a&gt;.</source>
          <target state="translated">새 &lt;a href=&quot;#ConsoleLogger&quot;&gt;ConsoleLogger를&lt;/a&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="8a1158dcc34cf1dab6bca8ccca6e48591cf8237f" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#FileLogger&quot;&gt;FileLogger&lt;/a&gt; that logs to a file with the given filename.</source>
          <target state="translated">지정된 파일 이름으로 파일에 기록 하는 새 &lt;a href=&quot;#FileLogger&quot;&gt;FileLogger&lt;/a&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="dee9166b544aa339ba1b3f6154f2202bbaa40bce" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#FileLogger&quot;&gt;FileLogger&lt;/a&gt; that uses the given file handle.</source>
          <target state="translated">주어진 파일 핸들을 사용 하는 새 &lt;a href=&quot;#FileLogger&quot;&gt;FileLogger&lt;/a&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="10a8e66a3830e4a3ff0335be0c5832e87b18fecc" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#RollingFileLogger&quot;&gt;RollingFileLogger&lt;/a&gt;.</source>
          <target state="translated">새로운 &lt;a href=&quot;#RollingFileLogger&quot;&gt;RollingFileLogger를&lt;/a&gt; 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="fd224b0bab681c5e963955c5b985061e3bc1c044" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#TimeInterval&quot;&gt;TimeInterval&lt;/a&gt;.</source>
          <target state="translated">새로운 &lt;a href=&quot;#TimeInterval&quot;&gt;TimeInterval을&lt;/a&gt; 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="0e1398c3ad8c29c1e63fb3d38eab1625126dc6f7" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;system#OSError&quot;&gt;OSError exception&lt;/a&gt;.</source>
          <target state="translated">새로운 &lt;a href=&quot;system#OSError&quot;&gt;OSError 예외를&lt;/a&gt; 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="a1788e2f22de39c5d0455bb03a33a9c96849e4c1" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;AsyncFtpClient&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;AsyncFtpClient&lt;/code&gt; 객체를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="6e13e475fb9b0f98eca84d01c93cd394fa75836f" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;AsyncHttpServer&lt;/code&gt; instance.</source>
          <target state="translated">새로운 &lt;code&gt;AsyncHttpServer&lt;/code&gt; 인스턴스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="c1b4b9f562ea0a6366e523f447871dad7dedb995" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;AsyncSmtp&lt;/code&gt; instance.</source>
          <target state="translated">새로운 &lt;code&gt;AsyncSmtp&lt;/code&gt; 인스턴스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="3b35a1f40d937326ff0bab2ad3f1dc72040c8cf6" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;AsyncSocket&lt;/code&gt; based on the supplied params.</source>
          <target state="translated">제공된 매개 변수를 기반으로 새 &lt;code&gt;AsyncSocket&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="43e6aaacddd5367eb507213ca3548ee5abfcc496" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;CritBitTree&lt;/code&gt; that contains the given &lt;code&gt;items&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;items&lt;/code&gt; 을 포함 하는 새로운 &lt;code&gt;CritBitTree&lt;/code&gt; 를 생성 합니다 .</target>
        </trans-unit>
        <trans-unit id="372d007874747e204fd197dcfd0e33e3b2684ce4" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;CritBitTree&lt;/code&gt; that contains the given &lt;code&gt;pairs&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;pairs&lt;/code&gt; 을 포함 하는 새로운 &lt;code&gt;CritBitTree&lt;/code&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="6e3cb237073d7f6865fd1345be527ab14315d78c" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;JArray JsonNode&lt;/code&gt;</source>
          <target state="translated">새로운 &lt;code&gt;JArray JsonNode&lt;/code&gt; 를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="f8646ae4ea8aa4c9b0a1b28abc1d31b9aff8e719" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;JBool JsonNode&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;JBool JsonNode&lt;/code&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="19e9042b33e21c20512987599cfd3e55ca42e49c" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;JFloat JsonNode&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;JFloat JsonNode&lt;/code&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="51436d5062bbeab1d3b16e9aa87e6356e2a245a3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;JInt JsonNode&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;JInt JsonNode&lt;/code&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="1ede985c77313282bdb00d09ee5e6663acc13424" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;JNull JsonNode&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;JNull JsonNode&lt;/code&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="35ccfc05500fb7ac7dbaec11692bc0b804c21566" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;JObject JsonNode&lt;/code&gt;</source>
          <target state="translated">새로운 &lt;code&gt;JObject JsonNode&lt;/code&gt; 를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="23e6966e5506ccfd5be48d1d13d59d92c172a6fa" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;JString JsonNode&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;JString JsonNode&lt;/code&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="3e365e4727663367a1661340e026ab26c3670c3e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Rand&lt;/code&gt; state from &lt;code&gt;seed&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seed&lt;/code&gt; 에서 새 &lt;code&gt;Rand&lt;/code&gt; 상태를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e77348f71d231e6e6513f22075a4477daa51ac85" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Smtp&lt;/code&gt; instance.</source>
          <target state="translated">새로운 &lt;code&gt;Smtp&lt;/code&gt; 인스턴스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e402e5147d04ef79a5ea3cd37a81478504ddf149" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;SqlPrepared&lt;/code&gt; statement.</source>
          <target state="translated">새 &lt;code&gt;SqlPrepared&lt;/code&gt; 문을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="1eaf912ec41b24d949c7682efd7ae15eb5805ccc" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;SqlPrepared&lt;/code&gt; statement. Parameter substitution is done via &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;, etc.</source>
          <target state="translated">새로운 &lt;code&gt;SqlPrepared&lt;/code&gt; 문을 만듭니다 . 매개 변수 대체는 &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; 등을 통해 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="9a3a52a7c298533908167099608eeefa7d73bf86" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;TimeInterval&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;TimeInterval&lt;/code&gt; 를 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="8b9704a1af5ee9c5c3170ffc598e0d02f61b6d36" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;XmlNode&lt;/code&gt; of kind &lt;code&gt;xnCData&lt;/code&gt; with the text &lt;code&gt;cdata&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cdata&lt;/code&gt; 텍스트를 사용하여 &lt;code&gt;xnCData&lt;/code&gt; 종류 의 새 &lt;code&gt;XmlNode&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="36fa4c4f383355d9fc9fc64706c3e89f74390c53" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;XmlNode&lt;/code&gt; of kind &lt;code&gt;xnComment&lt;/code&gt; with the text &lt;code&gt;comment&lt;/code&gt;.</source>
          <target state="translated">텍스트 &lt;code&gt;comment&lt;/code&gt; 를 사용하여 &lt;code&gt;xnComment&lt;/code&gt; 종류 의 새 &lt;code&gt;XmlNode&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="a7de5aa79a9802052d7e26771ad02df97a733201" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;XmlNode&lt;/code&gt; of kind &lt;code&gt;xnElement&lt;/code&gt; with the given &lt;code&gt;tag&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;tag&lt;/code&gt; 사용하여 &lt;code&gt;xnElement&lt;/code&gt; 종류 의 새 &lt;code&gt;XmlNode&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="6067582653880305625b1b7c7774c7ea6f5246b3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;XmlNode&lt;/code&gt; of kind &lt;code&gt;xnEntity&lt;/code&gt; with the text &lt;code&gt;entity&lt;/code&gt;.</source>
          <target state="translated">텍스트 &lt;code&gt;entity&lt;/code&gt; 사용하여 &lt;code&gt;xnEntity&lt;/code&gt; 종류 의 새 &lt;code&gt;XmlNode&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="edd00869fefcd9ecbaa4807babe97f72c32c5f40" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;XmlNode&lt;/code&gt; of kind &lt;code&gt;xnText&lt;/code&gt; with the text &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="translated">text &lt;code&gt;text&lt;/code&gt; 사용하여 &lt;code&gt;xnText&lt;/code&gt; 종류 의 새 &lt;code&gt;XmlNode&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="cd9914731fa0d1d4a14cd875b0334acca014c2a2" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;XmlNode&lt;/code&gt; of kind &lt;code&gt;xnVerbatimText&lt;/code&gt; with the text &lt;code&gt;text&lt;/code&gt;. &lt;strong&gt;Since&lt;/strong&gt;: Version 1.3.</source>
          <target state="translated">텍스트 &lt;code&gt;text&lt;/code&gt; 사용하여 &lt;code&gt;xnVerbatimText&lt;/code&gt; 종류 의 새 &lt;code&gt;XmlNode&lt;/code&gt; 를 만듭니다 . &lt;strong&gt;이후&lt;/strong&gt; : 버전 1.3.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="931ea726913ddc96238ea9e98f07b7b0eeaff38c" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;nnkIdentDefs&lt;/code&gt; node of a specific kind and value.</source>
          <target state="translated">특정 종류 및 값 의 새 &lt;code&gt;nnkIdentDefs&lt;/code&gt; 노드를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="6536ad4a1ea6812a166395f652dd54f9e13e77b6" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;JArray JsonNode&lt;/em&gt;</source>
          <target state="translated">새로운 &lt;em&gt;JArray JsonNode를 작성합니다&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9b3d217ffdcef21fc95e5196187ea5bc54a29010" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;JBool JsonNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;JBool JsonNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c3edaa8dd3ddf51c0898151aa192a6ca33b3ae26" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;JFloat JsonNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;JFloat JsonNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="7ec1f5e99e284aed59ae7d3b0c3acd9d66f88d02" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;JInt JsonNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;JInt JsonNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="bf27dac0cb27a30c25e8ee3b02ae6ee96df0a763" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;JNull JsonNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;JNull JsonNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c74323920b2d322c5918831e9a35c334440186f2" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;JObject JsonNode&lt;/em&gt;</source>
          <target state="translated">새로운 &lt;em&gt;JObject JsonNode를&lt;/em&gt; 만듭니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d5c3fda9ce6357768481607c34cedacb699e6ae" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;JString JsonNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;JString JsonNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="2ffdf8f85b3fb5fa765801e8fc44b15863de757f" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;SCons SexpNode&lt;/em&gt;</source>
          <target state="translated">새로운 &lt;em&gt;SCons SexpNode를&lt;/em&gt; 만듭니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="03ac288c573f6c7e4fb78f29669957e603cfb8ef" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;SFloat SexpNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;SFloat SexpNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="df4cf4d41f96304b44b50fd172bec3a73e46bda3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;SInt SexpNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;SInt SexpNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="17271a72c46267bfda4e7e6ccc8b7b5083f4c1f9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;SList SexpNode&lt;/em&gt;</source>
          <target state="translated">새로운 &lt;em&gt;SList SexpNode를&lt;/em&gt; 만듭니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a126f39e6fde470c76fd428d92c81cec4f8a6ee7" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;SNil SexpNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;SNil SexpNode를&lt;/em&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="2f27c6a06fa99e865b80d167d84c82a9cd158324" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;em&gt;SString SexpNode&lt;/em&gt;.</source>
          <target state="translated">새로운 &lt;em&gt;SString SexpNode를 작성&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="ca52f76fb58ff063636bf319ab5d4ccb3e95054b" translate="yes" xml:space="preserve">
          <source>Creates a new AST node of the specified kind.</source>
          <target state="translated">지정된 종류의 새 AST 노드를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3935a50a40a4679e58e6421cbbb017e2fab2d878" translate="yes" xml:space="preserve">
          <source>Creates a new AsyncHttpClient instance.</source>
          <target state="translated">새로운 AsyncHttpClient 인스턴스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7e42e3d783e045e776b4e5f780dd0cd2670ab15e" translate="yes" xml:space="preserve">
          <source>Creates a new Dispatcher instance.</source>
          <target state="translated">새로운 디스패처 인스턴스를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="7a27332310c407d45500446fa1de6ae753655c86" translate="yes" xml:space="preserve">
          <source>Creates a new HeapQueue that contains the elements of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 의 요소를 포함하는 새 HeapQueue를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="a39c787004337e77b85fb2a72bd38c3f1a9634dc" translate="yes" xml:space="preserve">
          <source>Creates a new HttpClient instance.</source>
          <target state="translated">새로운 HttpClient 인스턴스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b64023b343cbd7023223a90998b97444b503c9ee" translate="yes" xml:space="preserve">
          <source>Creates a new IntSet that contains the elements of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 의 요소를 포함하는 새 IntSet를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="4a49fc47d501422a0e7784df87146196511de3d6" translate="yes" xml:space="preserve">
          <source>Creates a new MIME compliant message.</source>
          <target state="translated">새로운 MIME 호환 메시지를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="30538f237d4f9845b41dbff0d40d205fe272dbce" translate="yes" xml:space="preserve">
          <source>Creates a new Mimetypes database. The database will contain the most common mimetypes.</source>
          <target state="translated">새로운 Mimetypes 데이터베이스를 작성합니다. 데이터베이스는 가장 일반적인 mimetype을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="ca883f65819067099529cf8d5b2305d87e67242c" translate="yes" xml:space="preserve">
          <source>Creates a new XML tree with &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;children&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tag&lt;/code&gt; , &lt;code&gt;children&lt;/code&gt; 및 &lt;code&gt;attributes&lt;/code&gt; 사용하여 새 XML 트리를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="f9fefb7b2a8f7f8398a6f9ff844afa8d0a77bf7f" translate="yes" xml:space="preserve">
          <source>Creates a new asynchronous socket.</source>
          <target state="translated">새로운 비동기 소켓을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="33e4224a87027f9aef23ecc4052592742ed723a5" translate="yes" xml:space="preserve">
          <source>Creates a new console logger. This logger logs to the console.</source>
          <target state="translated">새로운 콘솔 로거를 만듭니다. 이 로거는 콘솔에 기록합니다.</target>
        </trans-unit>
        <trans-unit id="cb52247b53408347b91c68da1c35479161454db4" translate="yes" xml:space="preserve">
          <source>Creates a new count table that is empty.</source>
          <target state="translated">비어있는 새 개수 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="dcdeefa1c519d23d9a3e86a61ea6edc2d5c41fc6" translate="yes" xml:space="preserve">
          <source>Creates a new count table with every member of a container &lt;code&gt;keys&lt;/code&gt; having a count of how many times it occurs in that container.</source>
          <target state="translated">해당 컨테이너에서 발생하는 횟수가 있는 컨테이너 &lt;code&gt;keys&lt;/code&gt; 의 모든 멤버로 새 개수 테이블을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="47bdf3ded5ecc72f0243c3632454b2329dfc36d1" translate="yes" xml:space="preserve">
          <source>Creates a new delegate.</source>
          <target state="translated">새 대리자를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="33ed6ec0ba695ba651f63fa97f4839e0e1e3a519" translate="yes" xml:space="preserve">
          <source>Creates a new deque that contains the elements of &lt;code&gt;x&lt;/code&gt; (in the same order).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 의 요소를 포함하는 새 데크를 만듭니다 (동일한 순서로).</target>
        </trans-unit>
        <trans-unit id="c4d15f80268ffb55bd332cd817e32869923c2083" translate="yes" xml:space="preserve">
          <source>Creates a new doubly linked list that is empty.</source>
          <target state="translated">비어있는 새 이중 연결 목록을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="603ef4c81b0b616fe2b3380510c04a535b1f025b" translate="yes" xml:space="preserve">
          <source>Creates a new doubly linked node with the given &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;value&lt;/code&gt; 으로 새로운 이중 링크 노드를 생성 합니다 .</target>
        </trans-unit>
        <trans-unit id="323ed97e517d8b09db2e25053b04dcf8a9efe452" translate="yes" xml:space="preserve">
          <source>Creates a new doubly linked ring that is empty.</source>
          <target state="translated">비어있는 새 이중 연결 링을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e4d58956b1f2f30b3fe90c63549ee97c9d5ab7e0" translate="yes" xml:space="preserve">
          <source>Creates a new empty JsAssoc with key type &lt;code&gt;K&lt;/code&gt; and value type &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">키 유형 &lt;code&gt;K&lt;/code&gt; 및 값 유형 &lt;code&gt;V&lt;/code&gt; 를 사용 하여 비어있는 새 JsAssoc을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="9029117b9d691f0b92a9a226b9c4ebf5da4786b7" translate="yes" xml:space="preserve">
          <source>Creates a new empty JsAssoc with key type &lt;em&gt;K&lt;/em&gt; and value type &lt;em&gt;V&lt;/em&gt;.</source>
          <target state="translated">키 유형 &lt;em&gt;K&lt;/em&gt; 및 값 유형 &lt;em&gt;V로&lt;/em&gt; 비어있는 새 JsAssoc을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="893e64dc1e5ca9aef6d0724e5de914f2a349aa04" translate="yes" xml:space="preserve">
          <source>Creates a new empty JsObject</source>
          <target state="translated">비어있는 새 JsObject를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="caf89ef5e99a1a579da843bfdb765aea20b9ba0e" translate="yes" xml:space="preserve">
          <source>Creates a new empty deque.</source>
          <target state="translated">비어있는 새 deque를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e68005e8262e48f32d4afefe583dd0bb87f58da7" translate="yes" xml:space="preserve">
          <source>Creates a new empty heap.</source>
          <target state="translated">비어있는 새 힙을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="287e822dfb28fac2ee8b10aa8630005a8de06041" translate="yes" xml:space="preserve">
          <source>Creates a new empty string table.</source>
          <target state="translated">새로운 빈 문자열 테이블을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ae0e22938fd00d470c0eff4aefe93d5e0b32bec6" translate="yes" xml:space="preserve">
          <source>Creates a new enum. &lt;code&gt;name&lt;/code&gt; must be an ident. Fields are allowed to be either idents or EnumFieldDef</source>
          <target state="translated">새 열거 형을 만듭니다. &lt;code&gt;name&lt;/code&gt; 은 ID 여야합니다. 필드는 idents 또는 EnumFieldDef가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ef055cd5c39219c0b34b4e156b41149c0e1ea8a" translate="yes" xml:space="preserve">
          <source>Creates a new enum. &lt;em&gt;name&lt;/em&gt; must be an ident. Fields are allowed to be either idents or EnumFieldDef</source>
          <target state="translated">새로운 열거 형을 작성합니다. &lt;em&gt;이름&lt;/em&gt; 은 신분이어야합니다. 필드는 idents 또는 EnumFieldDef 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83c99b61be96eb449cda76e440222b303de93cf1" translate="yes" xml:space="preserve">
          <source>Creates a new file logger. This logger logs to &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">새로운 파일 로거를 작성합니다. 이 로거는 &lt;code&gt;file&lt;/code&gt; 로그 합니다 .</target>
        </trans-unit>
        <trans-unit id="57e0013098d4a45d00c424f089cb8f7bc586d5eb" translate="yes" xml:space="preserve">
          <source>Creates a new file logger. This logger logs to a file, specified by &lt;code&gt;fileName&lt;/code&gt;. Use &lt;code&gt;bufSize&lt;/code&gt; as size of the output buffer when writing the file (-1: use system defaults, 0: unbuffered, &amp;gt;0: fixed buffer size).</source>
          <target state="translated">새로운 파일 로거를 작성합니다. 이 로거는 &lt;code&gt;fileName&lt;/code&gt; 으로 지정된 파일에 로그합니다 . 파일을 쓸 때 출력 버퍼의 크기로 &lt;code&gt;bufSize&lt;/code&gt; 를 사용하십시오 (-1 : 시스템 기본값 사용, 0 : 버퍼되지 않음,&amp;gt; 0 : 고정 버퍼 크기).</target>
        </trans-unit>
        <trans-unit id="da0631af382222a663f00eef225f13c67dd0fd14" translate="yes" xml:space="preserve">
          <source>Creates a new future.</source>
          <target state="translated">새로운 미래를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d22ee44302e8b1951e26381979dbda9c32df6b30" translate="yes" xml:space="preserve">
          <source>Creates a new hash set that contains the given &lt;em&gt;keys&lt;/em&gt;.</source>
          <target state="translated">지정된 &lt;em&gt;키&lt;/em&gt; 를 포함하는 새로운 해시 세트를 작성 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="c410cc55244f6c50e81d36059f4e05c7cbfbbcec" translate="yes" xml:space="preserve">
          <source>Creates a new hash set that contains the members of the given collection (seq, array, or string) &lt;code&gt;keys&lt;/code&gt;.</source>
          <target state="translated">지정된 컬렉션 (seq, 배열 또는 문자열) &lt;code&gt;keys&lt;/code&gt; 의 멤버를 포함하는 새 해시 세트를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="364cc44d3045672a81151e29b4dbc2a24b9608a9" translate="yes" xml:space="preserve">
          <source>Creates a new hash table that contains the given &lt;code&gt;pairs&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;pairs&lt;/code&gt; 을 포함하는 새 해시 테이블을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="b2d163df8cda811a7cb905cf4e2b6f5b15f30d68" translate="yes" xml:space="preserve">
          <source>Creates a new hash table that is empty.</source>
          <target state="translated">비어있는 새 해시 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bbe89d160a692d5566e2c39ca5ebf1cba7a361b6" translate="yes" xml:space="preserve">
          <source>Creates a new object of type &lt;code&gt;T&lt;/code&gt; and returns a safe (traced) reference to it as result value.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 형식의 새 개체를 만들고 그에 대한 안전한 (추적 된) 참조를 결과 값으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e8fc4a07191c16c8eb5a13cf7d17db886771f8cf" translate="yes" xml:space="preserve">
          <source>Creates a new object of type &lt;code&gt;T&lt;/code&gt; and returns a safe (traced) reference to it in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">형의 새로운 객체 생성 &lt;code&gt;T&lt;/code&gt; 를 하고 그것을 안전한 (추적) 참조를 반환 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ae89ab8d1bd0d00171a35bf4ba65c6d456f7daf" translate="yes" xml:space="preserve">
          <source>Creates a new ordered hash set that contains the given &lt;em&gt;keys&lt;/em&gt;.</source>
          <target state="translated">주어진 &lt;em&gt;키&lt;/em&gt; 를 포함하는 새로운 순서의 해시 세트를 작성 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0d1d7affc689d3b861e70a3917cfb26d7ea27b71" translate="yes" xml:space="preserve">
          <source>Creates a new ordered hash table that contains the given &lt;code&gt;pairs&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;pairs&lt;/code&gt; 을 포함하는 새로운 순서가 지정된 해시 테이블을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="153f05950f675e07f6ce5a6d6d69fd02f3484043" translate="yes" xml:space="preserve">
          <source>Creates a new ordered hash table that is empty.</source>
          <target state="translated">비어있는 순서가 지정된 새 해시 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="14091205abd086ee148181b8cd30b5ba380fe90d" translate="yes" xml:space="preserve">
          <source>Creates a new ordered ref hash table that contains the given &lt;code&gt;pairs&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;pairs&lt;/code&gt; 을 포함하는 새로운 정렬 된 참조 해시 테이블을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="4c7f42f3504a989dcba8c5f44246a20ece056545" translate="yes" xml:space="preserve">
          <source>Creates a new ordered ref hash table that is empty.</source>
          <target state="translated">비어있는 새로운 정렬 된 참조 해시 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="617191ea8184744257170800a0024531fdcfafa6" translate="yes" xml:space="preserve">
          <source>Creates a new ref count table that is empty.</source>
          <target state="translated">비어있는 새 참조 카운트 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3fbae283eb309e70d56bb5803eaa031432c1117f" translate="yes" xml:space="preserve">
          <source>Creates a new ref count table with every member of a container &lt;code&gt;keys&lt;/code&gt; having a count of how many times it occurs in that container.</source>
          <target state="translated">컨테이너 에서 발생하는 횟수를 포함하는 컨테이너 &lt;code&gt;keys&lt;/code&gt; 의 모든 멤버로 새 참조 카운트 테이블을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="7cc50f60d000bd7bbfbaffca9e4b23e4f8080c0b" translate="yes" xml:space="preserve">
          <source>Creates a new ref hash table that contains the given &lt;code&gt;pairs&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;pairs&lt;/code&gt; 을 포함하는 새로운 ref 해시 테이블을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="06d86fcc7ccfa359ace82ead7c684fb2b8704313" translate="yes" xml:space="preserve">
          <source>Creates a new ref hash table that is empty.</source>
          <target state="translated">비어있는 새 참조 해시 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d327c27468cfd87650f44312e18da039e8885e03" translate="yes" xml:space="preserve">
          <source>Creates a new rolling file logger. Once a file reaches &lt;code&gt;maxLines&lt;/code&gt; lines a new log file will be started and the old will be renamed. Use &lt;code&gt;bufSize&lt;/code&gt; as size of the output buffer when writing the file (-1: use system defaults, 0: unbuffered, &amp;gt;0: fixed buffer size).</source>
          <target state="translated">새로운 롤링 파일 로거를 만듭니다. 파일이 &lt;code&gt;maxLines&lt;/code&gt; 행에 도달하면 새 로그 파일이 시작되고 이전 이름이 바뀝니다. 파일을 쓸 때 출력 버퍼의 크기로 &lt;code&gt;bufSize&lt;/code&gt; 를 사용하십시오 (-1 : 시스템 기본값 사용, 0 : 버퍼되지 않음,&amp;gt; 0 : 고정 버퍼 크기).</target>
        </trans-unit>
        <trans-unit id="4aebfe6dbd3ba833b7866ae9ff4700e5a486a45b" translate="yes" xml:space="preserve">
          <source>Creates a new selector</source>
          <target state="translated">새로운 선택자를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="fb0c253c5acd0c2872c112613ad904a61ce19241" translate="yes" xml:space="preserve">
          <source>Creates a new sequence of length &lt;code&gt;len&lt;/code&gt;, calling &lt;code&gt;init&lt;/code&gt; to initialize each value of the sequence.</source>
          <target state="translated">길이 &lt;code&gt;len&lt;/code&gt; 의 새 시퀀스를 만들고 &lt;code&gt;init&lt;/code&gt; 를 호출 하여 시퀀스의 각 값을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="b3ec2de087b2c2266c26ddc7f1d08a48e3e5b358" translate="yes" xml:space="preserve">
          <source>Creates a new sequence of type &lt;code&gt;seq[T]&lt;/code&gt; with length &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="translated">길이가 &lt;code&gt;len&lt;/code&gt; 인 &lt;code&gt;seq[T]&lt;/code&gt; 유형의 새 시퀀스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d6bd8724619ad7ccaea2fc1b7529c01436f9c6f8" translate="yes" xml:space="preserve">
          <source>Creates a new sequence of type &lt;code&gt;seq[T]&lt;/code&gt; with length zero and capacity &lt;code&gt;cap&lt;/code&gt;.</source>
          <target state="translated">길이가 0이고 용량이 &lt;code&gt;cap&lt;/code&gt; &lt;code&gt;seq[T]&lt;/code&gt; 유형의 새 시퀀스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e028dd9977cc0f01e5db1edf5d6004057fd5ae48" translate="yes" xml:space="preserve">
          <source>Creates a new singly linked list that is empty.</source>
          <target state="translated">비어있는 새 단일 연결 목록을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="67dcad0f8dca58cf80182b31d0ea11af07a4b15c" translate="yes" xml:space="preserve">
          <source>Creates a new singly linked node with the given &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;value&lt;/code&gt; 으로 새로운 단일 링크 노드를 생성 합니다 .</target>
        </trans-unit>
        <trans-unit id="b69d2cbf97a6a02ae8b0f86bfcb89bcd93f4d628" translate="yes" xml:space="preserve">
          <source>Creates a new singly linked ring that is empty.</source>
          <target state="translated">비어있는 단일 링크 된 새 링을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="db5f105207af18fa248cc6ae468b071100b9d4a7" translate="yes" xml:space="preserve">
          <source>Creates a new socket as specified by the params.</source>
          <target state="translated">params에 의해 지정된 새로운 소켓을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="46e397d113b6a20fc8740a85a4158b1f1e6dbb77" translate="yes" xml:space="preserve">
          <source>Creates a new socket.</source>
          <target state="translated">새로운 소켓을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="af8b3ec3bab2867f8f2b98c68b672666613c9d32" translate="yes" xml:space="preserve">
          <source>Creates a new socket; returns &lt;code&gt;osInvalidSocket&lt;/code&gt; if an error occurs.</source>
          <target state="translated">새 소켓을 만듭니다. 오류가 발생하면 &lt;code&gt;osInvalidSocket&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2bcc994307c7bb05b50439da51e6a4f28a519eb2" translate="yes" xml:space="preserve">
          <source>Creates a new socket; returns &lt;em&gt;InvalidSocket&lt;/em&gt; if an error occurs.</source>
          <target state="translated">새로운 소켓을 작성합니다. 오류가 발생하면 &lt;em&gt;InvalidSocket을&lt;/em&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="abdca6d53ed7120e4f32dabe09d38b3b245a49d9" translate="yes" xml:space="preserve">
          <source>Creates a new socket; returns &lt;em&gt;osInvalidSocket&lt;/em&gt; if an error occurs.</source>
          <target state="translated">새로운 소켓을 작성합니다. 오류가 발생하면 &lt;em&gt;osInvalidSocket을&lt;/em&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="4054598752b433636730631f2ffe7d2da15c9d7b" translate="yes" xml:space="preserve">
          <source>Creates a new stream from the file &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 파일에서 새 스트림을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="480274379b4f64c7a504863094d6374cb0b228b3" translate="yes" xml:space="preserve">
          <source>Creates a new stream from the file named &lt;code&gt;filename&lt;/code&gt; with the mode &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">mode &lt;code&gt;mode&lt;/code&gt; 사용하여 &lt;code&gt;filename&lt;/code&gt; 이라는 파일 에서 새 스트림을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="1d949944d4656283a2ae50749db121bb9accea8c" translate="yes" xml:space="preserve">
          <source>Creates a new stream from the file named &lt;code&gt;filename&lt;/code&gt; with the mode &lt;code&gt;mode&lt;/code&gt;. If the file cannot be opened, an IO exception is raised.</source>
          <target state="translated">mode &lt;code&gt;mode&lt;/code&gt; 사용하여 &lt;code&gt;filename&lt;/code&gt; 이라는 파일 에서 새 스트림을 만듭니다 . 파일을 열 수 없으면 IO 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a23128d0c1f9ed494fc3cfa53addc52c81d694a1" translate="yes" xml:space="preserve">
          <source>Creates a new stream from the string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 에서 새 스트림을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="5bfce4cb4373731d865b0b1b7e0b102fc778a320" translate="yes" xml:space="preserve">
          <source>Creates a new string table with given &lt;code&gt;(key, value)&lt;/code&gt; tuple pairs.</source>
          <target state="translated">주어진 &lt;code&gt;(key, value)&lt;/code&gt; 튜플 쌍 으로 새 문자열 테이블을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="c3ff4b3e9f0496f11b5febf12f331ea95fc9f4b0" translate="yes" xml:space="preserve">
          <source>Creates a new string table with given &lt;code&gt;key, value&lt;/code&gt; string pairs.</source>
          <target state="translated">주어진 &lt;code&gt;key, value&lt;/code&gt; 문자열 쌍 으로 새 문자열 테이블을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="1fb0da49c4f8bd33ecba819c0874cce3a3f9d583" translate="yes" xml:space="preserve">
          <source>Creates a new thread &lt;code&gt;t&lt;/code&gt; and starts its execution.</source>
          <target state="translated">새 스레드 &lt;code&gt;t&lt;/code&gt; 를 만들고 실행을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="a03a88acdaa13820176791e85d3e86103d2b7826" translate="yes" xml:space="preserve">
          <source>Creates a new thread-safe &lt;code&gt;AsyncEvent&lt;/code&gt; object.</source>
          <target state="translated">새로운 스레드 안전 &lt;code&gt;AsyncEvent&lt;/code&gt; 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c01025184f157b7f925df9f054dd1b3a17aeee59" translate="yes" xml:space="preserve">
          <source>Creates a new user-defined event.</source>
          <target state="translated">새로운 사용자 정의 이벤트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="a5363f3ddf97cf67ca6213f445e553565b91ff54" translate="yes" xml:space="preserve">
          <source>Creates a node that binds &lt;code&gt;ident&lt;/code&gt; to a symbol node. The bound symbol may be an overloaded symbol. if &lt;code&gt;ident&lt;/code&gt; is a NimNode, it must have &lt;code&gt;nnkIdent&lt;/code&gt; kind. If &lt;code&gt;rule == brClosed&lt;/code&gt; either an &lt;code&gt;nnkClosedSymChoice&lt;/code&gt; tree is returned or &lt;code&gt;nnkSym&lt;/code&gt; if the symbol is not ambiguous. If &lt;code&gt;rule == brOpen&lt;/code&gt; either an &lt;code&gt;nnkOpenSymChoice&lt;/code&gt; tree is returned or &lt;code&gt;nnkSym&lt;/code&gt; if the symbol is not ambiguous. If &lt;code&gt;rule == brForceOpen&lt;/code&gt; always an &lt;code&gt;nnkOpenSymChoice&lt;/code&gt; tree is returned even if the symbol is not ambiguous.</source>
          <target state="translated">&lt;code&gt;ident&lt;/code&gt; 를 심볼 노드에 바인딩하는 노드를 만듭니다 . 바인딩 된 기호는 오버로드 된 기호 일 수 있습니다. 경우 &lt;code&gt;ident&lt;/code&gt; NimNode, 그것은이 있어야합니다 &lt;code&gt;nnkIdent&lt;/code&gt; 의 종류. 경우 &lt;code&gt;rule == brClosed&lt;/code&gt; 양자 택일 &lt;code&gt;nnkClosedSymChoice&lt;/code&gt; 의 나무 반품되는 &lt;code&gt;nnkSym&lt;/code&gt; 기호가 모호하지 않은 경우. 경우 &lt;code&gt;rule == brOpen&lt;/code&gt; 양자 택일 &lt;code&gt;nnkOpenSymChoice&lt;/code&gt; 의 나무 반품되는 &lt;code&gt;nnkSym&lt;/code&gt; 기호가 모호하지 않은 경우. 경우 &lt;code&gt;rule == brForceOpen&lt;/code&gt; 항상 &lt;code&gt;nnkOpenSymChoice&lt;/code&gt; 의 나무 심볼이 모호없는 경우에도 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="051fca83e7558d2daed9e61c7b3416955055f3a0" translate="yes" xml:space="preserve">
          <source>Creates a string literal node from &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 에서 문자열 리터럴 노드를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="6198c9a2d512a2feeec8878ae27c5ff93099af8f" translate="yes" xml:space="preserve">
          <source>Creates a unique temporary directory from a prefix string. Adds a six chars suffix. The directory is created with permissions 0700. Returns the directory name.</source>
          <target state="translated">접두사 문자열에서 고유 한 임시 디렉터리를 만듭니다. 6 자 접미사를 추가합니다. 0700 권한으로 디렉터리가 생성됩니다. 디렉터리 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e26dd29d547d766cc0b95d1194b65de264e6a3f7" translate="yes" xml:space="preserve">
          <source>Creates a unique temporary file from a prefix string. A six-character string will be added. If suffix is provided it will be added to the string The file is created with perms 0600. Returns the filename and a file opened in r/w mode.</source>
          <target state="translated">접두사 문자열에서 고유 한 임시 파일을 만듭니다. 6 자 문자열이 추가됩니다. 접미사가 제공되면 문자열에 추가됩니다. 파일은 perms 0600으로 생성됩니다. r / w 모드에서 열린 파일 이름과 파일을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f283a98a3f45c782b57d1a5121b1e96bbd381991" translate="yes" xml:space="preserve">
          <source>Creates a unique temporary file.</source>
          <target state="translated">고유 한 임시 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="f0c4f85e4914a33780136be6fe9f32e5c82801f4" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;AsyncScgiState&lt;/code&gt; object which serves as a SCGI server.</source>
          <target state="translated">SCGI 서버 역할을 하는 &lt;code&gt;AsyncScgiState&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="8d5badfaf65b9d85e41ca541f17d5e2ad13a7c2f" translate="yes" xml:space="preserve">
          <source>Creates an Attr of the given name. Note that the Attr instance can then be set on an Element using the setAttributeNode method. To create an attribute with a qualified name and namespace URI, use the createAttributeNS method.</source>
          <target state="translated">지정된 이름의 Attr을 작성합니다. 그런 다음 setAttributeNode 메소드를 사용하여 Attr 인스턴스를 요소에 설정할 수 있습니다. 규정 된 이름과 네임 스페이스 URI로 속성을 작성하려면 createAttributeNS 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="24a651579c04908c160b4936a473b704a0a1db4f" translate="yes" xml:space="preserve">
          <source>Creates an SSL context.</source>
          <target state="translated">SSL 컨텍스트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="18146698b37bb3ef78ddb2e3ebc9b7f7e8c3171d" translate="yes" xml:space="preserve">
          <source>Creates an XML Document object of the specified type with its document element.</source>
          <target state="translated">문서 요소를 사용하여 지정된 유형의 XML 문서 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="0ccf8847ae080229117753dedb3917a877ab8802" translate="yes" xml:space="preserve">
          <source>Creates an attribute of the given qualified name and namespace URI</source>
          <target state="translated">주어진 정규화 된 이름과 네임 스페이스 URI의 속성을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="521e8d861e29dd20ae3f05b555ed5bc031a59c9d" translate="yes" xml:space="preserve">
          <source>Creates an element of the given qualified name and namespace URI.</source>
          <target state="translated">주어진 정규화 된 이름과 네임 스페이스 URI의 요소를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7fb93e01953b423994157a2902c7fa5505afeba4" translate="yes" xml:space="preserve">
          <source>Creates an element of the type specified.</source>
          <target state="translated">지정된 유형의 요소를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="a0eb2da505ca06ee47f0d72006910740f7a87ee5" translate="yes" xml:space="preserve">
          <source>Creates an empty DocumentFragment object.</source>
          <target state="translated">빈 DocumentFragment 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="62e6c1996819afa95ed9da38e2d705be49b93b71" translate="yes" xml:space="preserve">
          <source>Creates an exception object of type &lt;code&gt;exceptn&lt;/code&gt; and sets its &lt;code&gt;msg&lt;/code&gt; field to &lt;code&gt;message&lt;/code&gt;. Returns the new exception object.</source>
          <target state="translated">&lt;code&gt;exceptn&lt;/code&gt; 유형의 예외 객체를 만들고 해당 &lt;code&gt;msg&lt;/code&gt; 필드를 &lt;code&gt;message&lt;/code&gt; 로 설정 합니다 . 새로운 예외 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="62a009d89fee7bb290809b810c1244843f9e873d" translate="yes" xml:space="preserve">
          <source>Creates an identifier node from &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 에서 식별자 노드를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="35f03892800613039aa8d991c66f1321a38758a2" translate="yes" xml:space="preserve">
          <source>Creates an identifier node from &lt;code&gt;i&lt;/code&gt;. It is simply an alias for &lt;code&gt;ident(string)&lt;/code&gt;. Use that, it's shorter.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 에서 식별자 노드를 만듭니다 . &lt;code&gt;ident(string)&lt;/code&gt; 의 별명 일뿐 입니다. 그것을 사용하면 더 짧습니다.</target>
        </trans-unit>
        <trans-unit id="3639cc29a204c3c524ac65c4608b2f2315eeb112" translate="yes" xml:space="preserve">
          <source>Creates an int literal node from &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 에서 int 리터럴 노드를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="66ce9655fa0bfb27f2c2904b96334720820c8f44" translate="yes" xml:space="preserve">
          <source>Creates the &lt;span id=&quot;directory_2&quot;&gt;directory&lt;/span&gt;&lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; &lt;span id=&quot;directory_2&quot;&gt;디렉토리를&lt;/span&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="f1069a59f1d48632c1603e127af7a2c6051032a8" translate="yes" xml:space="preserve">
          <source>Creates the &lt;span id=&quot;directory_2&quot;&gt;directory&lt;/span&gt;&lt;em&gt;dir&lt;/em&gt;.</source>
          <target state="translated">작성 &lt;span id=&quot;directory_2&quot;&gt;디렉토리 &lt;/span&gt;&lt;em&gt;말 일세&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="4b07971de8b6a863a776a840e3563d1037075f43" translate="yes" xml:space="preserve">
          <source>Creates the directory &lt;code&gt;dir&lt;/code&gt; including all necessary subdirectories. If the directory already exists, no error is raised.</source>
          <target state="translated">필요한 모든 하위 디렉터리를 포함 하여 디렉터리 &lt;code&gt;dir&lt;/code&gt; 을 만듭니다 . 디렉토리가 이미 있으면 오류가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="da1c277aa223391e9a5a2eca64bf1b8e345b705e" translate="yes" xml:space="preserve">
          <source>Creating JSON</source>
          <target state="translated">JSON 만들기</target>
        </trans-unit>
        <trans-unit id="a6aaa5c617023fca181aaf1b5d55974e07f0796a" translate="yes" xml:space="preserve">
          <source>Creating a configuration file</source>
          <target state="translated">구성 파일 만들기</target>
        </trans-unit>
        <trans-unit id="a043eff94e3b002b2d06a59b53f27166020db8b4" translate="yes" xml:space="preserve">
          <source>Creating a configuration file.</source>
          <target state="translated">구성 파일 작성</target>
        </trans-unit>
        <trans-unit id="6005f7b2874625a48384d80e948e41227a45219c" translate="yes" xml:space="preserve">
          <source>Creating a server</source>
          <target state="translated">서버 만들기</target>
        </trans-unit>
        <trans-unit id="caa32e4e8e79e2c3c02dca0de8e30c735ffb9e02" translate="yes" xml:space="preserve">
          <source>Creating a table</source>
          <target state="translated">테이블 만들기</target>
        </trans-unit>
        <trans-unit id="353ca08a0875743d6d075dfe55ac39667c480345" translate="yes" xml:space="preserve">
          <source>Creating closures in loops</source>
          <target state="translated">루프에서 클로저 만들기</target>
        </trans-unit>
        <trans-unit id="dbc00a91eff4276f07e3361b175e94d3eb014573" translate="yes" xml:space="preserve">
          <source>Cross compilation</source>
          <target state="translated">크로스 컴파일</target>
        </trans-unit>
        <trans-unit id="5d627257eabb026d6e37a9fc89af0a8b892846ec" translate="yes" xml:space="preserve">
          <source>Cross compilation for Nintendo Switch</source>
          <target state="translated">닌텐도 스위치 크로스 컴파일</target>
        </trans-unit>
        <trans-unit id="f3072cfe38995c94aede1e379bdbc87872e32b2e" translate="yes" xml:space="preserve">
          <source>Cross-Platform</source>
          <target state="translated">Cross-Platform</target>
        </trans-unit>
        <trans-unit id="beaa2e9dbdf1ef3ec15f5de471f07f4851c7dc4d" translate="yes" xml:space="preserve">
          <source>Cross-compilation</source>
          <target state="translated">Cross-compilation</target>
        </trans-unit>
        <trans-unit id="570ae6ccb8010a2f1d9b3fcb9ddfd6b28e1da9d7" translate="yes" xml:space="preserve">
          <source>Cross-compilation for Android</source>
          <target state="translated">Android 용 크로스 컴파일</target>
        </trans-unit>
        <trans-unit id="c70e3b4ea5539dedff72176ac16e1253e223e29a" translate="yes" xml:space="preserve">
          <source>Cross-compilation for Nintendo Switch</source>
          <target state="translated">Nintendo Switch 용 크로스 컴파일</target>
        </trans-unit>
        <trans-unit id="9bfa5e4e71557bf889fa8e5b87112293a638b5eb" translate="yes" xml:space="preserve">
          <source>Cross-compilation for Windows</source>
          <target state="translated">Windows 용 교차 컴파일</target>
        </trans-unit>
        <trans-unit id="b8df4055a9b484eaf658c25dc5cd4e81121337cb" translate="yes" xml:space="preserve">
          <source>Cross-compilation for iOS</source>
          <target state="translated">iOS 용 크로스 컴파일</target>
        </trans-unit>
        <trans-unit id="3a30385cfc2980dd1d7d1913af03cc8e19bb6219" translate="yes" xml:space="preserve">
          <source>Cryptography and Hashing</source>
          <target state="translated">암호화 및 해싱</target>
        </trans-unit>
        <trans-unit id="8f3896c45fffd6cca2d32bcbab32873cb06fb1e6" translate="yes" xml:space="preserve">
          <source>Curly braces</source>
          <target state="translated">중괄호</target>
        </trans-unit>
        <trans-unit id="56e31ab1833744822d2ee2546af636c8e2c14524" translate="yes" xml:space="preserve">
          <source>Curly braces are used as the set constructor.</source>
          <target state="translated">중괄호는 집합 생성자로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fc1e56e27a0597efeb808c21d1b38cc357f11a35" translate="yes" xml:space="preserve">
          <source>Current date</source>
          <target state="translated">현재 날짜</target>
        </trans-unit>
        <trans-unit id="09150060974e22dd6942171bb9b7f95ae8524dea" translate="yes" xml:space="preserve">
          <source>Current time</source>
          <target state="translated">현재 시간</target>
        </trans-unit>
        <trans-unit id="11be62e9fa7efe4df7fe07e5c236d969e4976243" translate="yes" xml:space="preserve">
          <source>Currently all queries are ANSI calls, not Unicode.</source>
          <target state="translated">현재 모든 쿼리는 유니 코드가 아닌 ANSI 호출입니다.</target>
        </trans-unit>
        <trans-unit id="21552dbce343d65b9b2afed13575f529b89c2bb7" translate="yes" xml:space="preserve">
          <source>Currently any Unicode character with an ordinal value &amp;gt; 127 (non ASCII) is classified as a &lt;code&gt;letter&lt;/code&gt; and may thus be part of an identifier but later versions of the language may assign some Unicode characters to belong to the operator characters instead.</source>
          <target state="translated">현재 서 수가 127보다 큰 유니 코드 문자 (ASCII 아님)는 &lt;code&gt;letter&lt;/code&gt; 로 분류 되므로 식별자의 일부일 수 있지만 이후 버전의 언어에서는 일부 유니 코드 문자가 연산자 문자에 속하도록 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d5041b5ff33d654ad27f3037259c3d51d09fcb7" translate="yes" xml:space="preserve">
          <source>Currently case statement macros must be enabled explicitly via &lt;code&gt;{.experimental: &quot;caseStmtMacros&quot;.}&lt;/code&gt;.</source>
          <target state="translated">현재 사례 명령문 매크로는 &lt;code&gt;{.experimental: &quot;caseStmtMacros&quot;.}&lt;/code&gt; 를 통해 명시 적으로 활성화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="340e67b06e3a575587e92e054af1e1e0133e9d22" translate="yes" xml:space="preserve">
          <source>Currently for loop macros must be enabled explicitly via &lt;code&gt;{.experimental: &quot;forLoopMacros&quot;.}&lt;/code&gt;.</source>
          <target state="translated">현재 for 루프 매크로는 &lt;code&gt;{.experimental: &quot;forLoopMacros&quot;.}&lt;/code&gt; 를 통해 명시 적으로 활성화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6d26c01f3ff1b576add581da7e6d1f4d18f72afe" translate="yes" xml:space="preserve">
          <source>Currently not implemented for ODBC.</source>
          <target state="translated">현재 ODBC 용으로 구현되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="ab7cce4834f14cc8539768a218f249d659c44848" translate="yes" xml:space="preserve">
          <source>Currently only the dot accessor can be borrowed in this way.</source>
          <target state="translated">현재는 점 접근 자만이 방법으로 빌릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b8eb558a36f3acc9d57e87afcc83f2333aca6e" translate="yes" xml:space="preserve">
          <source>Currently only the synchronous functions support a timeout. The timeout is measured in milliseconds, once it is set any call on a socket which may block will be susceptible to this timeout.</source>
          <target state="translated">현재 동기 함수 만 시간 종료를 지원합니다. 제한 시간은 밀리 초 단위로 측정되며 일단 차단되면 소켓에 대한 호출이 설정되면이 제한 시간에 영향을받을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="173a35daa134ad3a8e12cc27fe7eb43b17e821dd" translate="yes" xml:space="preserve">
          <source>Currently the database parameter is ignored, but included to match &lt;code&gt;open()&lt;/code&gt; in the other db_xxxxx library modules.</source>
          <target state="translated">현재 데이터베이스 매개 변수는 무시되지만 다른 db_xxxxx 라이브러리 모듈의 &lt;code&gt;open()&lt;/code&gt; 과 일치하도록 포함되었습니다 .</target>
        </trans-unit>
        <trans-unit id="a9379dbe79c0fa4d1b0b96691b99adb0530842e5" translate="yes" xml:space="preserve">
          <source>Currently, any Unicode character with an ordinal value &amp;gt; 127 (non-ASCII) is classified as a &lt;code&gt;letter&lt;/code&gt; and may thus be part of an identifier but later versions of the language may assign some Unicode characters to belong to the operator characters instead.</source>
          <target state="translated">현재 서수 값&amp;gt; (127) (비 ASCII)와 유니 코드 문자는로 분류 &lt;code&gt;letter&lt;/code&gt; 이에 속한다 대신 운영자 자 식별자 그러나 일부 유니 코드 문자를 할당 할 수있는 언어의 최신 버전의 일부일 수있다.</target>
        </trans-unit>
        <trans-unit id="2fd6d1b2e60706b41e9246d150073260f3d37910" translate="yes" xml:space="preserve">
          <source>Currently, only the dot accessor can be borrowed in this way.</source>
          <target state="translated">현재는 이러한 방식으로 점 접근 자만 빌릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb2da759086bdea4aae60429c1fee9e84ac0e014" translate="yes" xml:space="preserve">
          <source>Cursor inference / copy elision</source>
          <target state="translated">커서 추론 / 복사 제거</target>
        </trans-unit>
        <trans-unit id="3398c565334c7c49757266624bbe05c2dfd427b8" translate="yes" xml:space="preserve">
          <source>Cursor inference: Ensure that potential cursors are not</source>
          <target state="translated">커서 추론 : 잠재적 커서가</target>
        </trans-unit>
        <trans-unit id="a80a2b2ea1693d1b7b908c7997e09534c7a319d4" translate="yes" xml:space="preserve">
          <source>Custom annotations</source>
          <target state="translated">맞춤 주석</target>
        </trans-unit>
        <trans-unit id="59e80a7eaa7504ded2159eceee554eb6cea68ef2" translate="yes" xml:space="preserve">
          <source>Custom data types</source>
          <target state="translated">맞춤 데이터 유형</target>
        </trans-unit>
        <trans-unit id="d1c621e837f70be967aedab7c14156c001df2aa5" translate="yes" xml:space="preserve">
          <source>Custom exceptions</source>
          <target state="translated">맞춤 예외</target>
        </trans-unit>
        <trans-unit id="3656f6911f04f0d80ffd03fae54b4c2195d14ab8" translate="yes" xml:space="preserve">
          <source>Custom exceptions can be raised like any others, e.g.:</source>
          <target state="translated">사용자 정의 예외는 다른 예외와 마찬가지로 발생할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dbbea017816263d15629e4d46b793f2865322a12" translate="yes" xml:space="preserve">
          <source>Custom loggers should inherit from this type. They should also provide their own implementation of the &lt;a href=&quot;#log.e,Logger,Level,varargs%5Bstring,%5D&quot;&gt;log method&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 로거는이 유형에서 상속해야합니다. 또한 &lt;a href=&quot;#log.e,Logger,Level,varargs%5Bstring,%5D&quot;&gt;로그 메소드&lt;/a&gt; 의 자체 구현을 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5ecd13a23c1742a9a584f1f7c3f1289b615bd48b" translate="yes" xml:space="preserve">
          <source>Custom pragmas can be used in all locations where ordinary pragmas can be specified. It is possible to annotate procs, templates, type and variable definitions, statements, etc.</source>
          <target state="translated">일반 pragma를 지정할 수있는 모든 위치에서 사용자 정의 pragma를 사용할 수 있습니다. proc, 템플릿, 유형 및 변수 정의, 명령문 등에 주석을 달 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5186f59301cd7029715cbe7029573fdb0e2eafff" translate="yes" xml:space="preserve">
          <source>Cycle Collector</source>
          <target state="translated">사이클 콜렉터</target>
        </trans-unit>
        <trans-unit id="5efdba27b5ba6eb23f21dccff045fc4b5e15649b" translate="yes" xml:space="preserve">
          <source>Cycle collector</source>
          <target state="translated">사이클 수집기</target>
        </trans-unit>
        <trans-unit id="1fa2cb810dcc2a5fa06854c2836cea239c6828fd" translate="yes" xml:space="preserve">
          <source>DB quotes the string.</source>
          <target state="translated">DB는 문자열을 인용합니다.</target>
        </trans-unit>
        <trans-unit id="929f90627c52375558c7bbf646f0e6249cd34b00" translate="yes" xml:space="preserve">
          <source>DER encoded certificate</source>
          <target state="translated">DER 인코딩 인증서</target>
        </trans-unit>
        <trans-unit id="36040bd2059d08df88ed7944b5e359b04d30367f" translate="yes" xml:space="preserve">
          <source>DLL generation</source>
          <target state="translated">DLL 생성</target>
        </trans-unit>
        <trans-unit id="36972ef7c9e006ffcf7c4c34c7d388f185ad9c86" translate="yes" xml:space="preserve">
          <source>DLL loading via &lt;code&gt;dlsym&lt;/code&gt; is global.</source>
          <target state="translated">&lt;code&gt;dlsym&lt;/code&gt; 을 통한 DLL 로딩 은 글로벌입니다.</target>
        </trans-unit>
        <trans-unit id="74562cc91c4d0006b6c65c3dd52d2b147c4db550" translate="yes" xml:space="preserve">
          <source>DOM Exception constructor</source>
          <target state="translated">DOM 예외 생성자</target>
        </trans-unit>
        <trans-unit id="9ffb72e17c7556191212cf13bb9d9024e8900aa6" translate="yes" xml:space="preserve">
          <source>DOM Parser constructor.</source>
          <target state="translated">DOM 파서 생성자.</target>
        </trans-unit>
        <trans-unit id="02a01d155de3d2b32a8f60e19500114852317f66" translate="yes" xml:space="preserve">
          <source>DOM Parser object (defined on browser only, may not be on NodeJS).</source>
          <target state="translated">DOM 파서 객체 (브라우저에서만 정의되며 NodeJS에는 없을 수 있음).</target>
        </trans-unit>
        <trans-unit id="e9b7373cc1f95454e3f4b40ea91af58039e977eb" translate="yes" xml:space="preserve">
          <source>Data URI Base64</source>
          <target state="translated">데이터 URI Base64</target>
        </trans-unit>
        <trans-unit id="4de3a3dab7ac0ade0633475478d91e5f7fd850ff" translate="yes" xml:space="preserve">
          <source>Data flow analysis for Nim. We transform the AST into a linear list of instructions first to make this easier to handle: There are only 2 different branching instructions: 'goto X' is an unconditional goto, 'fork X' is a conditional goto (either the next instruction or 'X' can be taken). Exhaustive case statements are translated so that the last branch is transformed into an 'else' branch. &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; are all covered by 'goto'.</source>
          <target state="translated">Nim에 대한 데이터 흐름 분석. 이 작업을보다 쉽게 ​​처리 할 수 ​​있도록 먼저 AST를 선형 명령어 목록으로 변환합니다. 2 가지 분기 명령어 만 있습니다. 'goto X'는 무조건 goto, 'fork X'는 조건부 goto (다음 명령어 또는 ' X '를 취할 수 있습니다). 완전한 case 문이 번역되어 마지막 분기가 'else'분기로 변환됩니다. &lt;code&gt;return&lt;/code&gt; 및 &lt;code&gt;break&lt;/code&gt; 은 모두 'goto'로 덮여 있습니다.</target>
        </trans-unit>
        <trans-unit id="6299959dd9f9ba60735730d1d725169e46ab966a" translate="yes" xml:space="preserve">
          <source>Data flow variables ensure that no data races are possible. Due to technical limitations not every type &lt;code&gt;T&lt;/code&gt; is possible in a data flow variable: &lt;code&gt;T&lt;/code&gt; has to be of the type &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;seq&lt;/code&gt; or of a type that doesn't contain a type that is garbage collected. This restriction is not hard to work-around in practice.</source>
          <target state="translated">데이터 흐름 변수는 데이터 경쟁이 불가능하다는 것을 보장합니다. 기술적 제한으로 인해 데이터 흐름 변수에서 모든 유형 &lt;code&gt;T&lt;/code&gt; 가 가능한 것은 아닙니다 . &lt;code&gt;T&lt;/code&gt; 는 유형 &lt;code&gt;ref&lt;/code&gt; , &lt;code&gt;string&lt;/code&gt; , &lt;code&gt;seq&lt;/code&gt; 또는 가비지 수집 된 유형을 포함하지 않는 유형 이어야 합니다. 이 제한은 실제로 해결하기 어렵지 않습니다.</target>
        </trans-unit>
        <trans-unit id="254201a1cd6b53ffb45f6e76fbc025f80039c274" translate="yes" xml:space="preserve">
          <source>Database support</source>
          <target state="translated">데이터베이스 지원</target>
        </trans-unit>
        <trans-unit id="d79498214b9bfa602b8be24825315de13ae35882" translate="yes" xml:space="preserve">
          <source>Debug Example</source>
          <target state="translated">디버그 예</target>
        </trans-unit>
        <trans-unit id="c594ed9dace134eda7ca1b6ca3ac256b7c60049a" translate="yes" xml:space="preserve">
          <source>Debug messages are typically useful to the application developer only, and they are usually disabled in release builds, although this template does not make that distinction.</source>
          <target state="translated">디버그 메시지는 일반적으로 애플리케이션 개발자에게만 유용하며이 템플릿으로 구분되지는 않지만 일반적으로 릴리스 빌드에서는 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="0b2046b5e8f2d25c8f11ca9a43be1322587c9522" translate="yes" xml:space="preserve">
          <source>Debug messages represent the lowest logging level, and fatal error messages represent the highest logging level. &lt;code&gt;lvlAll&lt;/code&gt; can be used to enable all messages, while &lt;code&gt;lvlNone&lt;/code&gt; can be used to disable all messages.</source>
          <target state="translated">디버그 메시지는 가장 낮은 로깅 수준을 나타내고 치명적 오류 메시지는 가장 높은 로깅 수준을 나타냅니다. &lt;code&gt;lvlAll&lt;/code&gt; 을 사용하여 모든 메시지를 활성화 할 수 있고 &lt;code&gt;lvlNone&lt;/code&gt; 을 사용하여 모든 메시지를 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fc6ff82795e7cf381c1b241714313f9d82727ad" translate="yes" xml:space="preserve">
          <source>Debugging Nim's memory management</source>
          <target state="translated">Nim의 메모리 관리 디버깅</target>
        </trans-unit>
        <trans-unit id="de5ddf4c6d67024094c2072793d402d8ff3da9f4" translate="yes" xml:space="preserve">
          <source>Debugging strings</source>
          <target state="translated">문자열 디버깅</target>
        </trans-unit>
        <trans-unit id="7a442b40082af358980ccde93abe3fac72eaa773" translate="yes" xml:space="preserve">
          <source>Debugging the compiler</source>
          <target state="translated">컴파일러 디버깅</target>
        </trans-unit>
        <trans-unit id="ee0651b2882dbb9272d181f70c07d1807e1f7962" translate="yes" xml:space="preserve">
          <source>Decimal Integer. Outputs the number in base 10.</source>
          <target state="translated">십진 정수. 밑이 10 인 숫자를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="7237649044a521611f00003a969449c1b083e5bd" translate="yes" xml:space="preserve">
          <source>Decimal rounding on a binary floating point number.</source>
          <target state="translated">이진 부동 소수점 숫자에 대한 십진 반올림.</target>
        </trans-unit>
        <trans-unit id="54a75ac95c480e095baed4cd2faa21361043dc67" translate="yes" xml:space="preserve">
          <source>Declaration of the Document Object Model for the &lt;a href=&quot;backends#backends-the-javascript-target&quot;&gt;JavaScript backend&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;backends#backends-the-javascript-target&quot;&gt;JavaScript 백엔드&lt;/a&gt; 용 문서 객체 모델 선언 .</target>
        </trans-unit>
        <trans-unit id="faf9a616be1a96a0f253b577af7bdb667d8f1ff2" translate="yes" xml:space="preserve">
          <source>Declaration of the Document Object Model for the &lt;a href=&quot;backends#the-javascript-target&quot;&gt;JavaScript backend&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;backends#the-javascript-target&quot;&gt;JavaScript 백엔드에&lt;/a&gt; 대한 문서 객체 모델의 선언 .</target>
        </trans-unit>
        <trans-unit id="1e761d072aa9284bd970d7915559cf10a3456d1e" translate="yes" xml:space="preserve">
          <source>Declare a test suite identified by &lt;code&gt;name&lt;/code&gt; with optional &lt;code&gt;setup&lt;/code&gt; and/or &lt;code&gt;teardown&lt;/code&gt; section.</source>
          <target state="translated">선택적 &lt;code&gt;setup&lt;/code&gt; 및 / 또는 &lt;code&gt;teardown&lt;/code&gt; 섹션을 사용 하여 &lt;code&gt;name&lt;/code&gt; 으로 식별되는 테스트 스위트를 선언합니다 .</target>
        </trans-unit>
        <trans-unit id="6703ff440bcb04e79ba0360b4e3f4d5024abe855" translate="yes" xml:space="preserve">
          <source>Declare a test suite identified by &lt;em&gt;name&lt;/em&gt; with optional &lt;code&gt;setup&lt;/code&gt; and/or &lt;code&gt;teardown&lt;/code&gt; section.</source>
          <target state="translated">선택적 &lt;code&gt;setup&lt;/code&gt; 및 / 또는 &lt;code&gt;teardown&lt;/code&gt; 섹션을 사용 하여 &lt;em&gt;이름&lt;/em&gt; 으로 식별 된 테스트 스위트를 선언 하십시오.</target>
        </trans-unit>
        <trans-unit id="97befc331a58a9a3c707b5e50780ec15616e5f6c" translate="yes" xml:space="preserve">
          <source>Declaring &lt;code&gt;distinct&lt;/code&gt; types is similar, with the last &lt;code&gt;nnkIdent&lt;/code&gt; wrapped in &lt;code&gt;nnkDistinctTy&lt;/code&gt;.</source>
          <target state="translated">선언 &lt;code&gt;distinct&lt;/code&gt; 유형은 마지막으로 비슷하다 &lt;code&gt;nnkIdent&lt;/code&gt; 에 싸여 &lt;code&gt;nnkDistinctTy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0b71491ea0b756d40097c178764de7fa9a06788f" translate="yes" xml:space="preserve">
          <source>Decode a Punycode-encoded string</source>
          <target state="translated">퓨니 코드로 인코딩 된 문자열 디코딩</target>
        </trans-unit>
        <trans-unit id="d779abcf9e4be03342551d2efe4b130dd69421ab" translate="yes" xml:space="preserve">
          <source>Decodes a URL according to RFC3986.</source>
          <target state="translated">RFC3986에 따라 URL을 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="60a72640c84878521de5c0065465d3ae3cd69f62" translate="yes" xml:space="preserve">
          <source>Decodes string &lt;code&gt;s&lt;/code&gt; in base64 representation back into its original form. The initial whitespace is skipped.</source>
          <target state="translated">base64 표현 &lt;code&gt;s&lt;/code&gt; 문자열 s 를 원래 형식으로 다시 디코딩합니다 . 초기 공백은 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="133868f74e6ab7f40ef03d68c323718e0da1f9ad" translate="yes" xml:space="preserve">
          <source>Decoding data</source>
          <target state="translated">데이터 디코딩</target>
        </trans-unit>
        <trans-unit id="8d571c9e07059da58127c2e93f386440eef4b064" translate="yes" xml:space="preserve">
          <source>Decrement the ordinal</source>
          <target state="translated">서수 감소</target>
        </trans-unit>
        <trans-unit id="9f3302d4f9de4cd277bc458e7b36f91d3666315c" translate="yes" xml:space="preserve">
          <source>Decrements an integer.</source>
          <target state="translated">정수를 감소시킵니다.</target>
        </trans-unit>
        <trans-unit id="8e6709a624ea4d2592d488d29785d6f3a679fa95" translate="yes" xml:space="preserve">
          <source>Decrements an ordinal</source>
          <target state="translated">서수 감소</target>
        </trans-unit>
        <trans-unit id="f77ddc5e8aa829c42eea4936032517eb20ae470e" translate="yes" xml:space="preserve">
          <source>Decrements in place a floating point number</source>
          <target state="translated">부동 소수 점수 감소</target>
        </trans-unit>
        <trans-unit id="a0767a192c55423aff6b6bdd7561052ee1c74c78" translate="yes" xml:space="preserve">
          <source>Decrements in place a floating point number.</source>
          <target state="translated">부동 소수점 수를 줄입니다.</target>
        </trans-unit>
        <trans-unit id="c971fd9a1e5e48f0e2fb01a6502ec4793eb7dfe4" translate="yes" xml:space="preserve">
          <source>Decrements the ordinal &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">서수 &lt;code&gt;x&lt;/code&gt; 를 &lt;code&gt;y&lt;/code&gt; 만큼 감소시킵니다 .</target>
        </trans-unit>
        <trans-unit id="709a8d353480f0587a10991793ee126cac3909dc" translate="yes" xml:space="preserve">
          <source>Deep copying for communication between threads</source>
          <target state="translated">스레드 간 통신을위한 딥 카피</target>
        </trans-unit>
        <trans-unit id="61c35f6ab9b64b6090e79153752181a629e873bb" translate="yes" xml:space="preserve">
          <source>Default FTP &lt;code&gt;onProgressChanged&lt;/code&gt; handler. Does nothing.</source>
          <target state="translated">기본 FTP &lt;code&gt;onProgressChanged&lt;/code&gt; 핸들러입니다. 아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f527527355517054767aad17397d5032361631ca" translate="yes" xml:space="preserve">
          <source>Default Nim sort (an implementation of merge sort). The sorting is guaranteed to be stable and the worst case is guaranteed to be O(n log n).</source>
          <target state="translated">기본 Nim 정렬 (병합 정렬 구현). 정렬은 안정적이며 최악의 경우는 O (n log n)입니다.</target>
        </trans-unit>
        <trans-unit id="5b7cea1d46ac70ffcdb85b428af0dbca4d6782b9" translate="yes" xml:space="preserve">
          <source>Default Nim sort (an implementation of merge sort). The sorting is guaranteed to be stable and the worst case is guaranteed to be O(n log n). The current implementation uses an iterative mergesort to achieve this. It uses a temporary sequence of length &lt;code&gt;a.len div 2&lt;/code&gt;. Currently Nim does not support a sensible default argument for &lt;code&gt;cmp&lt;/code&gt;, so you have to provide one of your own. However, the &lt;code&gt;system.cmp&lt;/code&gt; procs can be used:</source>
          <target state="translated">기본 Nim 정렬 (병합 정렬 구현). 정렬은 안정적이며 최악의 경우 O (n log n)입니다. 현재 구현에서는 반복 병합 소트를 사용하여이를 달성합니다. 길이가 &lt;code&gt;a.len div 2&lt;/code&gt; 인 임시 시퀀스를 사용합니다 . 현재 Nim은 &lt;code&gt;cmp&lt;/code&gt; 에 대해 합리적인 기본 인수를 지원하지 않으므로 직접 제공해야합니다. 그러나 &lt;code&gt;system.cmp&lt;/code&gt; procs를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="027ddc379bd4a1e9d31d61cdcb0eb3aef30fbb23" translate="yes" xml:space="preserve">
          <source>Default arguments for slice, so that this procedure operates on the entire &lt;code&gt;arg&lt;/code&gt;, and not just on a part of it.</source>
          <target state="translated">slice의 기본 인수로,이 프로시 저는 일부가 아닌 전체 &lt;code&gt;arg&lt;/code&gt; 에 대해 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="ae8a7ee2f3ea2a56da9ea8b2a6666bfde0133ec4" translate="yes" xml:space="preserve">
          <source>Default floating point type.</source>
          <target state="translated">기본 부동 소수점 유형.</target>
        </trans-unit>
        <trans-unit id="a9b8f9509aed8cc605467bce7e88dd816a8212fd" translate="yes" xml:space="preserve">
          <source>Default integer type; bitwidth depends on architecture, but is always the same as a pointer.</source>
          <target state="translated">기본 정수 유형입니다. 비트 폭은 아키텍처에 따라 다르지만 항상 포인터와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="00a4ee95a1618b2b8a2f4e2f7aab0c17955155c9" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Raises an &lt;code&gt;IO&lt;/code&gt; exception if the file could not be opened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 발생시킵니다 &lt;code&gt;IO&lt;/code&gt; 의 파일을 열 수없는 경우 예외를.</target>
        </trans-unit>
        <trans-unit id="1e9b79ab76e2323dacf8ce764b59afc2d1290719" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Raises an &lt;code&gt;IOError&lt;/code&gt; if the file could not be opened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 발생시킵니다 &lt;code&gt;IOError&lt;/code&gt; 파일을 열 수없는 경우.</target>
        </trans-unit>
        <trans-unit id="6d6c132adb31258c13b7e79123038fa931d5dfbd" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Returns true if the file could be opened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 파일을 열 수 있으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="094d9b2206a1cbb0d47715bbaa9420618b7f8fb2" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Returns true if the file could be opened. This throws no exception if the file could not be opened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 파일을 열 수 있으면 true를 반환합니다. 파일을 열 수없는 경우 예외가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d4c65e40da011fb7ca55745b2b6ee1b960d08066" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Returns true if the file could be reopened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 파일을 다시 열 수 있으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0663ebb5857b5bb7cebfc29afee0cbc83d8917f0" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Returns true iff the file could be opened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 파일을 열 수있는 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="044708b937264e5230ca38f24417ce73effb53a7" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Returns true iff the file could be opened. This throws no exception if the file could not be opened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 파일을 열 수있는 경우 true를 리턴합니다. 파일을 열 수 없으면 예외가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4974325a7bbead77ecc882824b28920ab85fa946" translate="yes" xml:space="preserve">
          <source>Default mode is readonly. Returns true iff the file could be reopened.</source>
          <target state="translated">기본 모드는 읽기 전용입니다. 파일을 다시 열 수있는 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f38233b48a1416c37a816a5ed3ac36b2ac620522" translate="yes" xml:space="preserve">
          <source>Default parameters parse lines ending in either Unix(\l) or Windows(\r\l) style on on a line-by-line basis. I.e., not every line needs the same ending. Unlike readLine(File) &amp;amp; lines(File), archaic MacOS9 \r-delimited lines are not supported as a third option for each line. Such archaic MacOS9 files can be handled by passing delim='\r', eat='\0', though.</source>
          <target state="translated">기본 매개 변수는 줄 단위로 Unix (\ l) 또는 Windows (\ r \ l) 스타일로 끝나는 줄을 구문 분석합니다. 즉, 모든 줄에 같은 결말이 필요한 것은 아닙니다. readLine (File) &amp;amp; lines (File)과 달리, 오래된 MacOS9 \ r로 구분 된 행은 각 행의 세 번째 옵션으로 지원되지 않습니다. 이러한 오래된 MacOS9 파일은 delim = '\ r', eat = '\ 0'을 전달하여 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="e034cbbe2b8762f796d4892d08bbfed1145d3ef8" translate="yes" xml:space="preserve">
          <source>Default values</source>
          <target state="translated">기본값</target>
        </trans-unit>
        <trans-unit id="0a7c91da97d7c2de37072cfa6e3c084da8a63445" translate="yes" xml:space="preserve">
          <source>DefaultConfig:</source>
          <target state="translated">DefaultConfig:</target>
        </trans-unit>
        <trans-unit id="f11f0224dbd45efd10074d9f3671589a1d075cc2" translate="yes" xml:space="preserve">
          <source>DefaultConfigNims:</source>
          <target state="translated">DefaultConfigNims:</target>
        </trans-unit>
        <trans-unit id="3db917e7baeade34ca304e29d9329301aaa4d907" translate="yes" xml:space="preserve">
          <source>DefaultGlobalOptions:</source>
          <target state="translated">DefaultGlobalOptions:</target>
        </trans-unit>
        <trans-unit id="b0911a9190452a34a12e2cfccf4e9ab870286b70" translate="yes" xml:space="preserve">
          <source>DefaultOptions:</source>
          <target state="translated">DefaultOptions:</target>
        </trans-unit>
        <trans-unit id="c92af4a2fee8fa21e98e9b0a84dda32dce775583" translate="yes" xml:space="preserve">
          <source>Defer statement</source>
          <target state="translated">연기 진술</target>
        </trans-unit>
        <trans-unit id="9954e10c2071b77cdeeee4eff4774d5451047817" translate="yes" xml:space="preserve">
          <source>Define</source>
          <target state="translated">Define</target>
        </trans-unit>
        <trans-unit id="1f799c3762a2c3911ee927231e2b0592b32dd932" translate="yes" xml:space="preserve">
          <source>Define a single test case identified by &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 식별되는 단일 테스트 케이스를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="9f935fb2249d726382729a921c798d1fe91d11ee" translate="yes" xml:space="preserve">
          <source>Define a single test case identified by &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;name으로&lt;/em&gt; 식별 된 단일 테스트 케이스를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f527bf122db25b986b5a2e9ef0702b7a34384d0" translate="yes" xml:space="preserve">
          <source>Define the symbol &lt;code&gt;reportMissedDeadlines&lt;/code&gt; to make the GC output whenever it missed a deadline. The reporting will be enhanced and supported by the API in later versions of the collector.</source>
          <target state="translated">기한을 놓칠 때마다 GC 출력을 만들려면 &lt;code&gt;reportMissedDeadlines&lt;/code&gt; 기호를 정의하십시오 . 이후 버전의 수집기에서 API가보고를 향상시키고 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d48ede81a898f438159e6fb922b372e9d122a465" translate="yes" xml:space="preserve">
          <source>Define the symbol &lt;code&gt;reportMissedDeadlines&lt;/code&gt; to make the garbage collector output whenever it missed a deadline. The reporting will be enhanced and supported by the API in later versions of the collector.</source>
          <target state="translated">기한을 놓칠 때마다 가비지 수집기가 출력하도록 &lt;code&gt;reportMissedDeadlines&lt;/code&gt; 기호를 정의하십시오 . 보고는 이후 버전의 수집기에서 API에 의해 향상되고 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="65b9c1e2c53e8a08baa01e4dd5f0756727e73604" translate="yes" xml:space="preserve">
          <source>Defines a task. Hidden tasks are supported via an empty description.</source>
          <target state="translated">작업을 정의합니다. 숨겨진 작업은 빈 설명을 통해 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="15225baac48fc3d689cb2b0f74b936eff4339ff7" translate="yes" xml:space="preserve">
          <source>Definitions</source>
          <target state="translated">Definitions</target>
        </trans-unit>
        <trans-unit id="1bc8bc5a73886baac76f0365db51f9aa14316fde" translate="yes" xml:space="preserve">
          <source>Delete a directory &lt;code&gt;dir&lt;/code&gt; on the remote FTP server</source>
          <target state="translated">디렉토리 삭제 &lt;code&gt;dir&lt;/code&gt; 원격 FTP 서버에</target>
        </trans-unit>
        <trans-unit id="5c133930bedfdc94a02af9857d8f82eddd60b4cd" translate="yes" xml:space="preserve">
          <source>Delete a file &lt;code&gt;filename&lt;/code&gt; on the remote FTP server</source>
          <target state="translated">원격 FTP 서버에서 파일 파일 &lt;code&gt;filename&lt;/code&gt; 삭제</target>
        </trans-unit>
        <trans-unit id="d722e8a84633afd696d8f31f5495efbe46c64250" translate="yes" xml:space="preserve">
          <source>Delete an item while preserving the order of elements (&lt;code&gt;O(n)&lt;/code&gt; operation)</source>
          <target state="translated">요소 순서를 유지하면서 항목 삭제 ( &lt;code&gt;O(n)&lt;/code&gt; 작업)</target>
        </trans-unit>
        <trans-unit id="646c7a3581e35a68e5e4a3bfb1336c7ab5e8c970" translate="yes" xml:space="preserve">
          <source>Delete the header entries associated with &lt;code&gt;key&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 와 관련된 헤더 항목을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="9528ca4fead50f5e8c361d2f3c9b7bc9c4ec3f43" translate="yes" xml:space="preserve">
          <source>Delete the key of the specified section.</source>
          <target state="translated">지정된 섹션의 키를 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="2a832d53e322eeb8258d07eed35598846845b25c" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;key&lt;/code&gt; from hash table &lt;code&gt;t&lt;/code&gt;. Does nothing if the key does not exist.</source>
          <target state="translated">해시 테이블 &lt;code&gt;t&lt;/code&gt; 에서 &lt;code&gt;key&lt;/code&gt; 를 삭제 합니다 . 키가 없으면 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0831b609ee3317bedc092de6ac22a5401f57c942" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;key&lt;/code&gt; from table &lt;code&gt;t&lt;/code&gt;. Does nothing if the key does not exist.</source>
          <target state="translated">테이블 &lt;code&gt;t&lt;/code&gt; 에서 &lt;code&gt;key&lt;/code&gt; 를 삭제 합니다 . 키가 없으면 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="70be424f0ea9befdc8ef22d5c08c7305af16aa06" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;n&lt;/code&gt; children of &lt;code&gt;father&lt;/code&gt; starting at index &lt;code&gt;idx&lt;/code&gt;.</source>
          <target state="translated">인덱스 &lt;code&gt;idx&lt;/code&gt; 에서 시작 하는 &lt;code&gt;father&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 개의 자식을 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="b12804935b72746fe5cf644c6403d97468fa5f05" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;obj[key]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj[key]&lt;/code&gt; 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="24f32385ea90cc9b4bb35ff6d97cffa12464017e" translate="yes" xml:space="preserve">
          <source>Deletes in &lt;code&gt;s&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;) the characters at positions &lt;code&gt;first ..last&lt;/code&gt; (both ends included).</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; ( &lt;code&gt;var&lt;/code&gt; 로 선언해야 함 )에서 &lt;code&gt;first ..last&lt;/code&gt; 위치의 문자를 삭제 합니다 (두 끝 모두 포함).</target>
        </trans-unit>
        <trans-unit id="27904c001140bfc7ee212c552fa81f05ddb62f01" translate="yes" xml:space="preserve">
          <source>Deletes in &lt;em&gt;s&lt;/em&gt; the characters at position &lt;em&gt;first&lt;/em&gt; .. &lt;em&gt;last&lt;/em&gt;.</source>
          <target state="translated">에서 삭제 &lt;em&gt;의&lt;/em&gt; 위치에있는 문자를 &lt;em&gt;첫 번째&lt;/em&gt; .. &lt;em&gt;마지막&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="be41706c95a8ad67d8fdf7ec06fcb395acc028d7" translate="yes" xml:space="preserve">
          <source>Deletes in &lt;em&gt;s&lt;/em&gt; the items at position &lt;em&gt;first&lt;/em&gt; .. &lt;em&gt;last&lt;/em&gt;. This modifies &lt;em&gt;s&lt;/em&gt; itself, it does not return a copy.</source>
          <target state="translated">에서 삭제 &lt;em&gt;의&lt;/em&gt; 위치에있는 항목을 &lt;em&gt;첫 번째&lt;/em&gt; .. &lt;em&gt;마지막&lt;/em&gt; . 이 수정 &lt;em&gt;의&lt;/em&gt; 자체, 그것은 사본을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="690d6d819b50ba4e8cf3f8ebfb4b4bbcc4d30f80" translate="yes" xml:space="preserve">
          <source>Deletes in the items of a sequence &lt;code&gt;s&lt;/code&gt; at positions &lt;code&gt;first..last&lt;/code&gt; (including both ends of a range). This modifies &lt;code&gt;s&lt;/code&gt; itself, it does not return a copy.</source>
          <target state="translated">시퀀스의 항목에 삭제 &lt;code&gt;s&lt;/code&gt; 위치에서는 &lt;code&gt;first..last&lt;/code&gt; (범위의 양단을 포함). 이것은 &lt;code&gt;s&lt;/code&gt; 자체를 수정 하고 복사본을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="03f2102c7bf5f0341c66eb381000cd06e0e11102" translate="yes" xml:space="preserve">
          <source>Deletes the &lt;code&gt;i&lt;/code&gt;'th child of &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 의 &lt;code&gt;i&lt;/code&gt; 번째 자식을 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="76e4578e259f246d107f986f6ac5e8a3ca71cd44" translate="yes" xml:space="preserve">
          <source>Deletes the &lt;code&gt;key&lt;/code&gt; from the table. Returns &lt;code&gt;true&lt;/code&gt;, if the &lt;code&gt;key&lt;/code&gt; existed, and sets &lt;code&gt;val&lt;/code&gt; to the mapping of the key. Otherwise, returns &lt;code&gt;false&lt;/code&gt;, and the &lt;code&gt;val&lt;/code&gt; is unchanged.</source>
          <target state="translated">테이블 에서 &lt;code&gt;key&lt;/code&gt; 를 삭제 합니다. &lt;code&gt;key&lt;/code&gt; 존재 하면 &lt;code&gt;true&lt;/code&gt; 를 리턴 하고 &lt;code&gt;val&lt;/code&gt; 을 키 맵핑으로 설정합니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 하고 &lt;code&gt;val&lt;/code&gt; 은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="39858ffe7f11fcfe7a82a0715c0bafcda71378b4" translate="yes" xml:space="preserve">
          <source>Deletes the &lt;span id=&quot;environment-variable_3&quot;&gt;environment variable&lt;/span&gt; named &lt;code&gt;key&lt;/code&gt;. If an error occurs, &lt;code&gt;OSError&lt;/code&gt; is raised.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 라는 &lt;span id=&quot;environment-variable_3&quot;&gt;환경 변수를&lt;/span&gt; 삭제합니다 . 오류가 발생하면 &lt;code&gt;OSError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ae27c158e06eb7946ad0716897a955157bc40747" translate="yes" xml:space="preserve">
          <source>Deletes the environment variable named &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 라는 환경 변수를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="1c7ae4521973ca260842bfa40e5c7ab41bcefba8" translate="yes" xml:space="preserve">
          <source>Deletes the header entries associated with &lt;code&gt;key&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 와 관련된 헤더 항목을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="6aa1670814450f468378e3ff440b741b63040948" translate="yes" xml:space="preserve">
          <source>Deletes the item at index &lt;code&gt;i&lt;/code&gt; by moving all &lt;code&gt;x[i+1..]&lt;/code&gt; items by one position.</source>
          <target state="translated">모든 &lt;code&gt;x[i+1..]&lt;/code&gt; 항목을 한 위치 만큼 이동 하여 인덱스 &lt;code&gt;i&lt;/code&gt; 에 있는 항목을 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="a73fcbd451713fb179c1239d01242a8547423683" translate="yes" xml:space="preserve">
          <source>Deletes the item at index &lt;code&gt;i&lt;/code&gt; by putting &lt;code&gt;x[high(x)]&lt;/code&gt; into position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x[high(x)]&lt;/code&gt; 를 &lt;code&gt;i&lt;/code&gt; 위치 에 넣어 인덱스 &lt;code&gt;i&lt;/code&gt; 에서 항목을 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="9769950fc676393bfb14e27828598a23095906cb" translate="yes" xml:space="preserve">
          <source>Deletes the specified section and all of its sub keys.</source>
          <target state="translated">지정된 섹션과 모든 하위 키를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="008e17899630add37fda0fc0793e3a44e215517c" translate="yes" xml:space="preserve">
          <source>Deleting a section key in a configuration file</source>
          <target state="translated">구성 파일에서 섹션 키 삭제</target>
        </trans-unit>
        <trans-unit id="eda35fdccc2f05ab998b9970dc628b067f222e28" translate="yes" xml:space="preserve">
          <source>Deleting a section key in a configuration file.</source>
          <target state="translated">구성 파일에서 섹션 키를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="ce4926b30c0ffa5bf0cd62760347b64dfbe6dd1e" translate="yes" xml:space="preserve">
          <source>Delimit the end of a suite name with &lt;code&gt;&quot;::&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;::&quot;&lt;/code&gt; 로 스위트 이름의 끝을 구분하십시오 .</target>
        </trans-unit>
        <trans-unit id="88295f9121962875b3b19310f8fb5bcade3fa4bc" translate="yes" xml:space="preserve">
          <source>Delimiters are not part of the returned slice. A final, unterminated line or record is returned just like any other.</source>
          <target state="translated">분리 문자는 리턴 된 슬라이스의 일부가 아닙니다. 마지막으로 끝나지 않은 줄이나 레코드는 다른 것과 마찬가지로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ce311abe7bbcb35898a8ac0bf7c2dca01106d8f6" translate="yes" xml:space="preserve">
          <source>Dependency</source>
          <target state="translated">Dependency</target>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="2a4f466f8700759ceeaf85836326412139917e31" translate="yes" xml:space="preserve">
          <source>Deprecated - use &lt;em&gt;startProcess&lt;/em&gt; directly.</source>
          <target state="translated">더 이상 사용되지 않음 &lt;em&gt;-startProcess를&lt;/em&gt; 직접 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="47a25d0d4712cdcae280ac4b0a25cdbc60973fc1" translate="yes" xml:space="preserve">
          <source>Deprecated alias for poUsePath.</source>
          <target state="translated">poUsePath에 사용되지 않는 별명입니다.</target>
        </trans-unit>
        <trans-unit id="cc01e7b3dae78296cf7590fd6e036bd137aa088e" translate="yes" xml:space="preserve">
          <source>Deprecated since 0.16.2. Use &lt;code&gt;freeAddrInfo&lt;/code&gt; instead.</source>
          <target state="translated">0.16.2부터 사용되지 않습니다. 대신 &lt;code&gt;freeAddrInfo&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb95b6ed6f151492e7ced9dc02734612515f0e00" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.15 since it's so rarely useful.</source>
          <target state="translated">그다지 유용하지 않기 때문에 버전 0.15부터 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f6099e74cbc3dd750f3f8c3a0780439db19107b" translate="yes" xml:space="preserve">
          <source>Deprecated. Use &lt;em&gt;dumpLisp&lt;/em&gt; instead.</source>
          <target state="translated">더 이상 사용되지 않습니다. 대신 &lt;em&gt;dumpLisp&lt;/em&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a5a3b50e5a959fd6d1fb9b3d17471bd65e7b6012" translate="yes" xml:space="preserve">
          <source>Deprecated. Use &lt;em&gt;dumpTree&lt;/em&gt; instead.</source>
          <target state="translated">더 이상 사용되지 않습니다. 대신 &lt;em&gt;dumpTree&lt;/em&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="040d702e8cbe0e3efefbf3e6c37eb72ad9795c63" translate="yes" xml:space="preserve">
          <source>Deprecated. Use &lt;em&gt;init&lt;/em&gt; instead. This is not posix compliant, may introduce undefined behavior.</source>
          <target state="translated">더 이상 사용되지 않습니다. 대신 &lt;em&gt;init&lt;/em&gt; 를 사용하십시오 . 이것은 posix를 준수하지 않으므로 정의되지 않은 동작이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce9c646d073b2f5efc013e7606aab22856bb61dd" translate="yes" xml:space="preserve">
          <source>Dereference operation for the any &lt;code&gt;x&lt;/code&gt; that represents a ptr or a ref.</source>
          <target state="translated">ptr 또는 ref를 나타내는 &lt;code&gt;x&lt;/code&gt; 에 대한 역 참조 연산입니다 .</target>
        </trans-unit>
        <trans-unit id="4b04dc6c55db8242a8584278ef43d6b7c7c5ddf2" translate="yes" xml:space="preserve">
          <source>Dereference operator &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">역 참조 연산자 &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea2a8844690d692906bfb97b45cbbd9cf1fdbdad" translate="yes" xml:space="preserve">
          <source>Dereferencing &lt;code&gt;nil&lt;/code&gt; is an unrecoverable fatal runtime error (and not a panic).</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 을 역 참조 하는 것은 복구 할 수없는 치명적인 런타임 오류입니다 (패닉이 아님).</target>
        </trans-unit>
        <trans-unit id="97982f2a560154dc7dd2a4190fe7450c02bf67df" translate="yes" xml:space="preserve">
          <source>Describes for &lt;code&gt;interpolatedFragments&lt;/code&gt; which part of the interpolated string is yielded; for example in &quot;str$$$var${expr}&quot;</source>
          <target state="translated">보간 된 문자열의 일부가 생성되는 &lt;code&gt;interpolatedFragments&lt;/code&gt; 에 대해 설명합니다 . 예 : &quot;str $$$ var $ {expr}&quot;</target>
        </trans-unit>
        <trans-unit id="fcc1a1da8bcafb6f4c16258069d7f24fd0d07a9c" translate="yes" xml:space="preserve">
          <source>Describes the class a floating point value belongs to. This is the type that is returned by &lt;a href=&quot;#classify,float&quot;&gt;classify proc&lt;/a&gt;.</source>
          <target state="translated">부동 소수점 값이 속한 클래스를 설명합니다. 이것은 &lt;a href=&quot;#classify,float&quot;&gt;classify proc에&lt;/a&gt; 의해 반환되는 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="6814185e4f66cbfa8b8bd2f0a20495fb37d375d4" translate="yes" xml:space="preserve">
          <source>Describes the tables operation mode.</source>
          <target state="translated">테이블 작동 모드를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="fbd22b3c27fd2ccfedbd58762a2f1f7cd4630023" translate="yes" xml:space="preserve">
          <source>Describes the type of an IP address</source>
          <target state="translated">IP 주소의 유형을 설명합니다</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="87251b6483b7eb8db1a561509a10c24a6f595b0e" translate="yes" xml:space="preserve">
          <source>Description of some tools that come with the standard distribution.</source>
          <target state="translated">표준 배포판과 함께 제공되는 일부 도구에 대한 설명입니다.</target>
        </trans-unit>
        <trans-unit id="59b035367211a9382930b2a4c13637dbc33c4f32" translate="yes" xml:space="preserve">
          <source>Design</source>
          <target state="translated">Design</target>
        </trans-unit>
        <trans-unit id="d5c53e3e08d26edb69d4944cdf8d485692edcbd8" translate="yes" xml:space="preserve">
          <source>Destruction</source>
          <target state="translated">Destruction</target>
        </trans-unit>
        <trans-unit id="a90841dd3e20089037d586576a9a212985979672" translate="yes" xml:space="preserve">
          <source>Destructor removal</source>
          <target state="translated">소멸자 제거</target>
        </trans-unit>
        <trans-unit id="bb4c1fc784dbbda7030fb74a982622da115da2e9" translate="yes" xml:space="preserve">
          <source>Determine the &lt;code&gt;#include&lt;/code&gt;'ed files of a C file:</source>
          <target state="translated">C 파일 의 &lt;code&gt;#include&lt;/code&gt; 파일을 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="20b42086e96556bb88c541028aa3043c38e204d6" translate="yes" xml:space="preserve">
          <source>Determine which of subset of the exceptions specified by &lt;code&gt;excepts&lt;/code&gt; are currently set.</source>
          <target state="translated">에 의해 지정된 예외의 부분 집합을 결정합니다 &lt;code&gt;excepts&lt;/code&gt; 현재 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="548b6cfc5c679e787affe27cf57ca6da7b1d599e" translate="yes" xml:space="preserve">
          <source>Determine which of subset of the exceptions specified by &lt;em&gt;excepts&lt;/em&gt; are currently set.</source>
          <target state="translated">&lt;em&gt;excepts&lt;/em&gt; 로 지정된 예외 중 일부 가 현재 설정 되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfaa6cf8bf284fa9df50aea5a8bb1aa0e2c9bffe" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;value&lt;/code&gt; is one of the values inside &lt;code&gt;values&lt;/code&gt;. Comparison is performed without case sensitivity.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 values ​​내의 &lt;code&gt;values&lt;/code&gt; 중 하나 인지 확인 합니다 . 대소 문자 구분없이 비교가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="e243322180ec807b4017cffd1f9498032173f76a" translate="yes" xml:space="preserve">
          <source>Determines if the given token is an operator type token.</source>
          <target state="translated">지정된 토큰이 연산자 유형 토큰인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e47cafb565016b1e61daa60db211d9225b92c561" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;code&lt;/code&gt; is a 2xx HTTP status code.</source>
          <target state="translated">&lt;code&gt;code&lt;/code&gt; 가 2xx HTTP 상태 코드 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="2bd1aed59a99c53cf9cd069b363f937cb4acccd0" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;code&lt;/code&gt; is a 3xx HTTP status code.</source>
          <target state="translated">&lt;code&gt;code&lt;/code&gt; 가 3xx HTTP 상태 코드 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="7440b81fa6a1c0863c7903d942999144ff6bc0f9" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;code&lt;/code&gt; is a 4xx HTTP status code.</source>
          <target state="translated">&lt;code&gt;code&lt;/code&gt; 가 4xx HTTP 상태 코드 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="e3e25bcb13e7fee5e66eb297110b9578d9acf0b1" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;code&lt;/code&gt; is a 5xx HTTP status code.</source>
          <target state="translated">&lt;code&gt;code&lt;/code&gt; 가 5xx HTTP 상태 코드 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="edf5c02e54a5ecbc9f01ef7166d08fe2051ff3e3" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;file&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 이 존재 하는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="cc70cbbe0e74a99f871258ec45e5aab2a3586e5a" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;future&lt;/code&gt; completed with an error.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; 가 오류와 함께 완료 되는지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="27d4f23e1e3cd03fc852860d844cd0823e54db02" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;future&lt;/code&gt; has completed.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; 가 완료 되었는지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="004971d97947b14dd1a345c70fbcec05085e553a" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;lastError&lt;/code&gt; is a disconnection error. Only does this if flags contains &lt;code&gt;SafeDisconn&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lastError&lt;/code&gt; 가 연결 끊기 오류 인지 확인합니다 . 플래그에 &lt;code&gt;SafeDisconn&lt;/code&gt; 이 포함 된 경우에만이를 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="2c3fa0b998cb5cabab2a0fbd43136146090e715d" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;path&lt;/code&gt; is hidden or not, using &lt;a href=&quot;https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory&quot;&gt;this reference&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory&quot;&gt;이 참조를&lt;/a&gt; 사용하여 &lt;code&gt;path&lt;/code&gt; 가 숨겨져 있는지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="4760e3090e27b0e0f30a59cbe20dc8cc549385ba" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;s&lt;/code&gt; has been closed.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 가 닫혔 는지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="54ddcc057005fdcd26dc51c87f32d186f7380d45" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;s&lt;/code&gt; has data waiting to be sent, i.e. whether this socket's sendBuffer contains data.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 에 데이터가 전송 대기 중인지 여부, 즉이 소켓의 sendBuffer에 데이터가 있는지 여부를 판별합니다 .</target>
        </trans-unit>
        <trans-unit id="9a804a4d8d1da251cfd532bcef5fcc1cbeaa7e20" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;s&lt;/code&gt; is connected.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 연결 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="88e0bb657eecf84348741c5571bd7fd13d76e94e" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;s&lt;/code&gt; is connecting.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 가 연결 중인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="dbc5fbb83030ed239ba458c9c843c6ada5d27a91" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;s&lt;/code&gt; is listening for incoming connections.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 가 들어오는 연결을 수신하고 있는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="9a9db2989a3cfca9733bf51b90bf684eee3c62ff" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;socket&lt;/code&gt; is a SSL socket.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 이 SSL 소켓 인지 판별합니다 .</target>
        </trans-unit>
        <trans-unit id="c501d92f92c03ea5d6d002d5e5b344101e25eae5" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;socket&lt;/code&gt; is blocking.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 이 차단 중인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="ad5b8704d5f0856b93a0eef4c3f54183e652543e" translate="yes" xml:space="preserve">
          <source>Determines whether DST is in effect. Always false for the JavaScript backend.</source>
          <target state="translated">DST가 적용되는지 여부를 결정합니다. JavaScript 백엔드의 경우 항상 false입니다.</target>
        </trans-unit>
        <trans-unit id="b92aa67460bb97677722539055cc8a6bf9c3ea61" translate="yes" xml:space="preserve">
          <source>Determines whether a given path is hidden or not. Returns false if the file doesn't exist. The given path must be accessible from the current working directory of the program.</source>
          <target state="translated">주어진 경로를 숨길 지 여부를 결정합니다. 파일이 존재하지 않으면 false를 반환합니다. 주어진 경로는 프로그램의 현재 작업 디렉토리에서 액세스 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="0990ddcc2e54903529c1e86242269a56658650e2" translate="yes" xml:space="preserve">
          <source>Determines whether a socket has data buffered.</source>
          <target state="translated">소켓이 데이터를 버퍼링했는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="09ea6698207d44822ff3cc6496caa7658a41ceff" translate="yes" xml:space="preserve">
          <source>Determines whether selector contains a file descriptor.</source>
          <target state="translated">선택기에 파일 설명자가 포함되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b8488348d19529de69048bce7d7c71a262d3d7c8" translate="yes" xml:space="preserve">
          <source>Determines whether socket &lt;code&gt;s&lt;/code&gt; is ready to be written to.</source>
          <target state="translated">소켓 여부를 결정 &lt;code&gt;s&lt;/code&gt; 에 기록 할 준비가되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="092818d9f0760dce13c3f35f4c9de0e2ce0a4ae4" translate="yes" xml:space="preserve">
          <source>Determines whether the socket has been closed.</source>
          <target state="translated">소켓이 닫혔는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="430856c5d481f654d8ac28c99ea36efae64be0c1" translate="yes" xml:space="preserve">
          <source>Determines whether the specified &lt;code&gt;FlowVarBase&lt;/code&gt;'s value is available.</source>
          <target state="translated">지정된 &lt;code&gt;FlowVarBase&lt;/code&gt; 값을 사용할 수 있는지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="7152f560396915d96687d40bacfedcd6d6e73b85" translate="yes" xml:space="preserve">
          <source>DevOps Scripting</source>
          <target state="translated">DevOps 스크립팅</target>
        </trans-unit>
        <trans-unit id="b16f1f66543d3256c7320f66ff9ae94cbd849539" translate="yes" xml:space="preserve">
          <source>Difference</source>
          <target state="translated">Difference</target>
        </trans-unit>
        <trans-unit id="4d792c5ff143fb7e44ec9106da12784d951fd67c" translate="yes" xml:space="preserve">
          <source>Different currencies should not be mixed in monetary calculations. Distinct types are a perfect tool to model different currencies:</source>
          <target state="translated">화폐 계산에서 다른 통화를 혼용해서는 안됩니다. 고유 한 유형은 다른 통화를 모델링하는 완벽한 도구입니다.</target>
        </trans-unit>
        <trans-unit id="e6e32e9c5396453456ec37d2e180ecd9f3166bbc" translate="yes" xml:space="preserve">
          <source>Different kinds of XML nodes.</source>
          <target state="translated">다양한 종류의 XML 노드.</target>
        </trans-unit>
        <trans-unit id="1603179dcb1ea8bf090ff9d59c3a9f11ff61fc63" translate="yes" xml:space="preserve">
          <source>Different units of time.</source>
          <target state="translated">다른 시간 단위.</target>
        </trans-unit>
        <trans-unit id="a841b01fad2a74ad0cb08d2f94182f192dca661c" translate="yes" xml:space="preserve">
          <source>Directories, device files, named pipes and sockets return false.</source>
          <target state="translated">디렉토리, 장치 파일, 명명 된 파이프 및 소켓은 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23027faff19e54a2a2e3c9536f37e1599daa11ca" translate="yes" xml:space="preserve">
          <source>Directory name of &lt;code&gt;$app&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$app&lt;/code&gt; 의 디렉토리 이름</target>
        </trans-unit>
        <trans-unit id="07461fdd8bbd77721cfe447edf9e4bd20cbd0023" translate="yes" xml:space="preserve">
          <source>Directory structure</source>
          <target state="translated">디렉토리 구조</target>
        </trans-unit>
        <trans-unit id="5969fa73eaa43f73a5289188c026ff6a45c76d37" translate="yes" xml:space="preserve">
          <source>Directory.</source>
          <target state="translated">Directory.</target>
        </trans-unit>
        <trans-unit id="0cf9219017d35d6c60f2ebb9887a7f1f82a117fd" translate="yes" xml:space="preserve">
          <source>Dirty files are likely to contain errors and they are usually compiled partially only to the point needed to service the idetool request. The compiler discriminates them to ensure that &lt;strong&gt;a)&lt;/strong&gt; they won't be cached and &lt;strong&gt;b)&lt;/strong&gt; they won't invalidate the cached contents of the original module.</source>
          <target state="translated">더티 파일은 오류를 포함 할 가능성이 높으며 일반적으로 idetool 요청을 처리하는 데 필요한 지점으로 만 부분적으로 컴파일됩니다. 컴파일러를 판별 그들은 보장하기 위해 &lt;strong&gt;)을을&lt;/strong&gt; 가 캐시되지 않습니다 및 &lt;strong&gt;B)&lt;/strong&gt; 그들은 원래 모듈의 캐시 내용을 무효화하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="022f041c1fe8271f3ebfbaa93f163efde52c8226" translate="yes" xml:space="preserve">
          <source>Disable the crash handler from &lt;code&gt;system.nim&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;system.nim&lt;/code&gt; 에서 충돌 핸들러를 비활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="eba00da541a9d43d3103e54bcbf3358c4928ee43" translate="yes" xml:space="preserve">
          <source>Disable the warning via &lt;code&gt;{.push warning[ObservableStores]: off.}&lt;/code&gt; ... &lt;code&gt;{.pop.}&lt;/code&gt;. Then one may need to ensure that &lt;code&gt;p&lt;/code&gt; only raises &lt;em&gt;before&lt;/em&gt; any stores to &lt;code&gt;result&lt;/code&gt; happen.</source>
          <target state="translated">&lt;code&gt;{.push warning[ObservableStores]: off.}&lt;/code&gt; ... &lt;code&gt;{.pop.}&lt;/code&gt; 를 통해 경고를 비활성화합니다 . 그런 일이 있는지 확인해야 &lt;code&gt;p&lt;/code&gt; 는 오직 제기 &lt;em&gt;하기 전에&lt;/em&gt; 어떤 저장하는 &lt;code&gt;result&lt;/code&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="83d0f18ab4aa8ee164f96b32e10617c6c324773e" translate="yes" xml:space="preserve">
          <source>Disable true color.</source>
          <target state="translated">트루 컬러를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="1ee6f7e0ec263b4a99ae4efd03c2ccb3a24f8970" translate="yes" xml:space="preserve">
          <source>Disables or enables a specific hint.</source>
          <target state="translated">특정 힌트를 비활성화하거나 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="1d1c0c9074687221a08ac66dd7e5e9f90a030dff" translate="yes" xml:space="preserve">
          <source>Disables or enables a specific warning.</source>
          <target state="translated">특정 경고를 비활성화하거나 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="4c55740119facbe4017396d5402b3f940433e65f" translate="yes" xml:space="preserve">
          <source>Disables the GC. If called &lt;code&gt;n&lt;/code&gt; times, &lt;code&gt;n&lt;/code&gt; calls to &lt;code&gt;GC_enable&lt;/code&gt; are needed to reactivate the GC.</source>
          <target state="translated">GC를 비활성화합니다. 라고하면 &lt;code&gt;n&lt;/code&gt; 배, &lt;code&gt;n&lt;/code&gt; 호출 &lt;code&gt;GC_enable&lt;/code&gt; 는 GC의를 활성화 할 필요가있다.</target>
        </trans-unit>
        <trans-unit id="f9cfcc118136753cd88279b6ca78e5c91a831b80" translate="yes" xml:space="preserve">
          <source>Disabling certain messages</source>
          <target state="translated">특정 메시지 비활성화</target>
        </trans-unit>
        <trans-unit id="1a6b9915bc2e01d9fa24aba2060fb2247f108935" translate="yes" xml:space="preserve">
          <source>Discard statement</source>
          <target state="translated">진술 폐기</target>
        </trans-unit>
        <trans-unit id="8e1b8d01990ec0eea6f2dfe6e450c0320a04704e" translate="yes" xml:space="preserve">
          <source>Discarding futures</source>
          <target state="translated">미래 폐기</target>
        </trans-unit>
        <trans-unit id="4d4c8e8b5b56af988da876772ec7856ae8af3764" translate="yes" xml:space="preserve">
          <source>Disconnects from the SMTP server and closes the socket.</source>
          <target state="translated">SMTP 서버에서 연결을 끊고 소켓을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="a98d0ab4691ead58f53524818054ebd1c3d152b6" translate="yes" xml:space="preserve">
          <source>Displays compilation of all the compiled files, including those imported by other modules or through the &lt;a href=&quot;#compile-pragma&quot;&gt;compile pragma&lt;/a&gt;. This is the default level.</source>
          <target state="translated">다른 모듈 또는 &lt;a href=&quot;#compile-pragma&quot;&gt;컴파일 pragma를&lt;/a&gt; 통해 가져온 파일을 포함하여 모든 컴파일 된 파일의 컴파일을 표시 합니다. 이것이 기본 수준입니다.</target>
        </trans-unit>
        <trans-unit id="72b9784262d3a8dc74e7608a6ecebf43fcae0b04" translate="yes" xml:space="preserve">
          <source>Displays compilation of all the compiled files, including those imported by other modules or through the &lt;a href=&quot;manual#implementation-specific-pragmas-compile-pragma&quot;&gt;compile pragma&lt;/a&gt;. This is the default level.</source>
          <target state="translated">다른 모듈 또는 &lt;a href=&quot;manual#implementation-specific-pragmas-compile-pragma&quot;&gt;compile pragma를&lt;/a&gt; 통해 가져온 파일을 포함하여 모든 컴파일 된 파일의 컴파일을 표시 합니다. 이것이 기본 수준입니다.</target>
        </trans-unit>
        <trans-unit id="cf27f204e53592da8a41ef882d4b3025ae4982fe" translate="yes" xml:space="preserve">
          <source>Displays compilation statistics, enumerates the dynamic libraries that will be loaded by the final binary and dumps to standard output the result of applying &lt;a href=&quot;filters&quot;&gt;a filter to the source code&lt;/a&gt; if any filter was used during compilation.</source>
          <target state="translated">컴파일 통계를 표시하고 최종 바이너리에 의해로드 될 동적 라이브러리를 열거하고 컴파일 중에 필터가 사용 된 경우 &lt;a href=&quot;filters&quot;&gt;소스 코드에 필터를&lt;/a&gt; 적용한 결과를 표준 출력으로 덤프합니다 .</target>
        </trans-unit>
        <trans-unit id="6ba8ad651f26b2c9f5c6d0a0479d220f8e7d23f7" translate="yes" xml:space="preserve">
          <source>Displays compilation statistics, enumerates the dynamic libraries that will be loaded by the final binary, and dumps to standard output the result of applying &lt;a href=&quot;filters&quot;&gt;a filter to the source code&lt;/a&gt; if any filter was used during compilation.</source>
          <target state="translated">컴파일 통계를 표시하고 최종 바이너리에 의해로드 될 동적 라이브러리를 열거하며 컴파일 중에 필터가 사용 된 경우 &lt;a href=&quot;filters&quot;&gt;소스 코드에 필터를&lt;/a&gt; 적용한 결과를 표준 출력에 덤프합니다 .</target>
        </trans-unit>
        <trans-unit id="985836dae98d2f5d2b7e282391b9efede9138024" translate="yes" xml:space="preserve">
          <source>Displays the timezone offset from UTC.</source>
          <target state="translated">UTC로부터 시간대 오프셋을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ccf7ead01d442ec24cd6acda659368e0e39d1ab2" translate="yes" xml:space="preserve">
          <source>Distinct type</source>
          <target state="translated">고유 한 유형</target>
        </trans-unit>
        <trans-unit id="00c68bf4be715a3cf7fd52af1b931957da3c8703" translate="yes" xml:space="preserve">
          <source>Distro/OS detection. For convenience the required &lt;code&gt;Distribution.&lt;/code&gt; qualifier is added to the enum value.</source>
          <target state="translated">배포판 / OS 감지. 편의상 필요한 &lt;code&gt;Distribution.&lt;/code&gt; 한정자가 열거 형 값에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="0f3fb13e4f3fe0fd4f7a4a067437f8e120731633" translate="yes" xml:space="preserve">
          <source>Divide &lt;em&gt;x&lt;/em&gt; by &lt;em&gt;y&lt;/em&gt; in place.</source>
          <target state="translated">나누기 &lt;em&gt;(X)&lt;/em&gt; 에 의해 &lt;em&gt;Y&lt;/em&gt; 위치이다.</target>
        </trans-unit>
        <trans-unit id="47be64b7e56f21beb87652d8ab0fc4dfdc80ed88" translate="yes" xml:space="preserve">
          <source>Divide &lt;em&gt;x&lt;/em&gt; by &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">나누기 &lt;em&gt;(X)&lt;/em&gt; 에 의해 &lt;em&gt;Y&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e561da24d048dbc37c8241f1892f682367b7dcae" translate="yes" xml:space="preserve">
          <source>Divide complex &lt;em&gt;x&lt;/em&gt; by float &lt;em&gt;y&lt;/em&gt; in place.</source>
          <target state="translated">복소수 &lt;em&gt;x&lt;/em&gt; 를 플로트 &lt;em&gt;y&lt;/em&gt; 로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="59fd2ce109c77255dd7a9d40e66ee5809ee519fd" translate="yes" xml:space="preserve">
          <source>Divide complex &lt;em&gt;x&lt;/em&gt; by float &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">복소수 &lt;em&gt;x&lt;/em&gt; 를 float &lt;em&gt;y로 나눕니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="eb7094fc793d7ff9c2dcdb5867b6a21e30b1da10" translate="yes" xml:space="preserve">
          <source>Divide float &lt;em&gt;x&lt;/em&gt; by complex &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">float &lt;em&gt;x&lt;/em&gt; 를 complex &lt;em&gt;y로 나눕니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="acb9551682c3aac142aa5cffd2e31c31b4c9b3f8" translate="yes" xml:space="preserve">
          <source>Divide int &lt;code&gt;x&lt;/code&gt; by Rational &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">int &lt;code&gt;x&lt;/code&gt; 를 Rational &lt;code&gt;y&lt;/code&gt; 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="00bcf1dd7590a3417d37303b0fdecc5327742701" translate="yes" xml:space="preserve">
          <source>Divide int &lt;em&gt;x&lt;/em&gt; by Rational &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">int &lt;em&gt;x&lt;/em&gt; 를 유리수 &lt;em&gt;y로 나눕니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ac15b223bd4ea44573a41d9bb68de158d030445a" translate="yes" xml:space="preserve">
          <source>Divide rational &lt;code&gt;x&lt;/code&gt; by int &lt;code&gt;y&lt;/code&gt; in place.</source>
          <target state="translated">합리적인 &lt;code&gt;x&lt;/code&gt; 를 int &lt;code&gt;y&lt;/code&gt; 로 제자리에서 나눕니다.</target>
        </trans-unit>
        <trans-unit id="0893ce314258aa648352ef376c38da223111f4a8" translate="yes" xml:space="preserve">
          <source>Divide rational &lt;code&gt;x&lt;/code&gt; by int &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">유리수 &lt;code&gt;x&lt;/code&gt; 를 int &lt;code&gt;y&lt;/code&gt; 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="401af8fc3ad55d05186996b894ff3f64b23f5654" translate="yes" xml:space="preserve">
          <source>Divide rational &lt;em&gt;x&lt;/em&gt; by int &lt;em&gt;y&lt;/em&gt; in place.</source>
          <target state="translated">합리적인 &lt;em&gt;x&lt;/em&gt; 를 int &lt;em&gt;y&lt;/em&gt; 로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="58655b52bb7d7c0d630f44f6da666825adfffe43" translate="yes" xml:space="preserve">
          <source>Divide rational &lt;em&gt;x&lt;/em&gt; by int &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">유리수 &lt;em&gt;x&lt;/em&gt; 를 int &lt;em&gt;y로 나눕니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="54ffc8fa94b36519955dcd4ea5e808b2353b27e4" translate="yes" xml:space="preserve">
          <source>Divide rationals &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt; in place.</source>
          <target state="translated">합리적 &lt;code&gt;x&lt;/code&gt; 를 &lt;code&gt;y&lt;/code&gt; 로 제자리에 나눕니다.</target>
        </trans-unit>
        <trans-unit id="d387eafac09cc9de222ec142c2736c12cfd7f830" translate="yes" xml:space="preserve">
          <source>Divide rationals &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">합리적 &lt;code&gt;x&lt;/code&gt; 를 &lt;code&gt;y&lt;/code&gt; 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="e0464d7632a87c3eb12b30bb3d5c2d799dea995d" translate="yes" xml:space="preserve">
          <source>Divide rationals &lt;em&gt;x&lt;/em&gt; by &lt;em&gt;y&lt;/em&gt; in place.</source>
          <target state="translated">유리수 &lt;em&gt;x&lt;/em&gt; 를 &lt;em&gt;y&lt;/em&gt; 로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="933c90ca6645f4618e52caf970df26f662a363a2" translate="yes" xml:space="preserve">
          <source>Divide rationals &lt;em&gt;x&lt;/em&gt; by &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">유리수 &lt;em&gt;x&lt;/em&gt; 를 &lt;em&gt;y&lt;/em&gt; 로 &lt;em&gt;나눕니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f475b75a1864e26a20e903f08d3f91b16bd65cac" translate="yes" xml:space="preserve">
          <source>Divides &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt; in place.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 를 &lt;code&gt;y&lt;/code&gt; 로 제자리에서 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="fbcdad90944128f205e414dc8e0cc88905b15ce0" translate="yes" xml:space="preserve">
          <source>Divides &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 를 &lt;code&gt;y&lt;/code&gt; 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="83436c30e163046335ade429390559e8aaaf9fb6" translate="yes" xml:space="preserve">
          <source>Divides complex number &lt;code&gt;x&lt;/code&gt; by real number &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">복소수 &lt;code&gt;x&lt;/code&gt; 를 실수 &lt;code&gt;y&lt;/code&gt; 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="c55b3fcf0307520e69ff919f2af69043a887cc27" translate="yes" xml:space="preserve">
          <source>Divides in place a floating point number</source>
          <target state="translated">부동 소수점 숫자를 제자리로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="2d722b1e14ec734bb85e070ee7aacc9217995329" translate="yes" xml:space="preserve">
          <source>Divides in place a floating point number.</source>
          <target state="translated">부동 소수점 숫자를 제자리에 나눕니다.</target>
        </trans-unit>
        <trans-unit id="34d7a6693f7ef02143a6a7d859658f02245c7c5c" translate="yes" xml:space="preserve">
          <source>Divides real number &lt;code&gt;x&lt;/code&gt; by complex number &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">실수 &lt;code&gt;x&lt;/code&gt; 를 복소수 &lt;code&gt;y&lt;/code&gt; 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="c10b77ff5ae5207804b93a18058984ec3dd18805" translate="yes" xml:space="preserve">
          <source>Division by zero: divisor is zero and dividend is a finite nonzero number, for example 1.0/0.0.</source>
          <target state="translated">0으로 나누기 : 제수는 0이고 피제수는 0이 아닌 유한 한 숫자입니다 (예 : 1.0 / 0.0).</target>
        </trans-unit>
        <trans-unit id="266acb05e95286468cc810362c7ba076d1a76498" translate="yes" xml:space="preserve">
          <source>Division of integers that results in a float.</source>
          <target state="translated">실수를 초래하는 정수의 나눗셈.</target>
        </trans-unit>
        <trans-unit id="9485d84eb22396b73e1cead6aef0f5ba44fff659" translate="yes" xml:space="preserve">
          <source>Divisor is zero and dividend is a finite nonzero number.</source>
          <target state="translated">제수는 0이고 배당은 0이 아닌 유한 한 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="2c8e4af13a285629d4f216a8d4821c278cb28fef" translate="yes" xml:space="preserve">
          <source>Do not confuse it with &lt;a href=&quot;#toOct,BiggestInt,Positive&quot;&gt;toOct proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#toOct,BiggestInt,Positive&quot;&gt;toOct proc&lt;/a&gt; 과 혼동하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="4067f786ce25d2e5482c5a2945ba853cc404331f" translate="yes" xml:space="preserve">
          <source>Do not confuse it with &lt;a href=&quot;#toOctal,char&quot;&gt;toOctal proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#toOctal,char&quot;&gt;toOctal proc&lt;/a&gt; 과 혼동하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="8f59767d0feb20f56ba6390675c09040039496ec" translate="yes" xml:space="preserve">
          <source>Do notation</source>
          <target state="translated">표기법</target>
        </trans-unit>
        <trans-unit id="930f1fac137da3ff978b99b2d9eca794a392fee0" translate="yes" xml:space="preserve">
          <source>Do yourself a favor and import the module as &lt;code&gt;from htmlgen import nil&lt;/code&gt; and then fully qualify the macros.</source>
          <target state="translated">&lt;code&gt;from htmlgen import nil&lt;/code&gt; 모듈을 가져 와서 매크로를 정규화하십시오.</target>
        </trans-unit>
        <trans-unit id="902385e385bef895045443f84ffcef8b185df27b" translate="yes" xml:space="preserve">
          <source>DocConfig:</source>
          <target state="translated">DocConfig:</target>
        </trans-unit>
        <trans-unit id="36e61aeb306a565bb865b236b50ed9cb0519d915" translate="yes" xml:space="preserve">
          <source>DocTexConfig:</source>
          <target state="translated">DocTexConfig:</target>
        </trans-unit>
        <trans-unit id="6bd2a1cbf993386f67ff1437e37d966de7656316" translate="yes" xml:space="preserve">
          <source>Docstring for the symbol if available or the empty string. To differentiate the docstring from end of answer in server mode, the docstring is always provided enclosed in double quotes, and if the docstring spans multiple lines, all following lines of the docstring will start with a blank space to align visually with the starting quote.</source>
          <target state="translated">사용 가능한 경우 기호의 문자열 또는 빈 문자열 서버 모드에서 docstring을 응답 끝과 구별하기 위해 docstring은 항상 큰 따옴표로 묶여 제공되며 docstring이 여러 줄에 걸쳐 있으면 docstring의 모든 다음 줄은 공백으로 시작하여 시작 따옴표와 시각적으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="affd2a6092e73a6459a751ad697f3bbf7be7a8bf" translate="yes" xml:space="preserve">
          <source>Docstring for the symbol if available or the empty string. To differentiate the docstring from end of answer, the docstring is always provided enclosed in double quotes, and if the docstring spans multiple lines, all following lines of the docstring will start with a blank space to align visually with the starting quote.</source>
          <target state="translated">사용 가능한 경우 기호의 문자열 또는 빈 문자열 docstring을 응답 끝과 구별하기 위해 docstring은 항상 큰 따옴표로 묶여 제공되며 docstring이 여러 줄에 걸쳐 있으면 docstring의 다음 줄은 모두 공백으로 시작하여 시작 따옴표와 시각적으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="b3c8a1c8fb291e4e88d92472a780cce3feb80a95" translate="yes" xml:space="preserve">
          <source>Document Types</source>
          <target state="translated">문서 종류</target>
        </trans-unit>
        <trans-unit id="7ceb1bc39c07e6f3e294a5782801c6bc2eed4a03" translate="yes" xml:space="preserve">
          <source>Documentation Comments</source>
          <target state="translated">설명서 주석</target>
        </trans-unit>
        <trans-unit id="e865c7ef5e7ddaedaa17748ddbe9fd552f6c342b" translate="yes" xml:space="preserve">
          <source>Documentation comments are tokens; they are only allowed at certain places in the input file as they belong to the syntax tree! This feature enables simpler documentation generators.</source>
          <target state="translated">문서 주석은 토큰입니다. 그것들은 구문 트리에 속하기 때문에 입력 파일의 특정 위치에서만 허용됩니다! 이 기능은 더 간단한 문서 생성기를 가능하게합니다.</target>
        </trans-unit>
        <trans-unit id="a56767c0462e8ec9b006459313198af2cb0ca301" translate="yes" xml:space="preserve">
          <source>Documentation generator</source>
          <target state="translated">문서 생성기</target>
        </trans-unit>
        <trans-unit id="015d64ea9818ea00058c075a0cfdffa6fa916297" translate="yes" xml:space="preserve">
          <source>Docutils</source>
          <target state="translated">Docutils</target>
        </trans-unit>
        <trans-unit id="263446c3d6655ab115ffee1021cbcf374cfea060" translate="yes" xml:space="preserve">
          <source>Does not check for overflow. If the value represented by &lt;code&gt;s&lt;/code&gt; is too big to fit into a return type, only the value of the rightmost binary digits of &lt;code&gt;s&lt;/code&gt; is returned without producing an error.</source>
          <target state="translated">오버플로를 확인하지 않습니다. &lt;code&gt;s&lt;/code&gt; 가 나타내는 값 이 너무 커서 반환 유형에 맞지 않으면 &lt;code&gt;s&lt;/code&gt; 의 가장 오른쪽 이진수 값만 오류를 생성하지 않고 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b12c798d863ec304f1d293a4751d5c8afd5c427f" translate="yes" xml:space="preserve">
          <source>Does not check for overflow. If the value represented by &lt;code&gt;s&lt;/code&gt; is too big to fit into a return type, only the value of the rightmost hex digits of &lt;code&gt;s&lt;/code&gt; is returned without producing an error.</source>
          <target state="translated">오버플로를 확인하지 않습니다. &lt;code&gt;s&lt;/code&gt; 가 나타내는 값 이 너무 커서 반환 유형에 맞지 않으면 &lt;code&gt;s&lt;/code&gt; 의 가장 오른쪽 16 진수 값만 오류없이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ffe24bc50f5bd277d1524bd84eca5088f96437e9" translate="yes" xml:space="preserve">
          <source>Does not check for overflow. If the value represented by &lt;code&gt;s&lt;/code&gt; is too big to fit into a return type, only the value of the rightmost octal digits of &lt;code&gt;s&lt;/code&gt; is returned without producing an error.</source>
          <target state="translated">오버플로를 확인하지 않습니다. &lt;code&gt;s&lt;/code&gt; 가 나타내는 값 이 너무 커서 반환 유형에 맞지 않으면 &lt;code&gt;s&lt;/code&gt; 의 가장 오른쪽 8 진수 값만 오류없이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e1bd5c79dc2c26ff3f8186c3d56291adf34d0e01" translate="yes" xml:space="preserve">
          <source>Does not create parent directories (fails if parent does not exist). Returns &lt;code&gt;true&lt;/code&gt; if the directory already exists, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">부모 디렉터리를 만들지 않습니다 (부모가 없으면 실패 함). 디렉토리가 이미 존재하면 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8a975b5f64977e0471ef78a594968f8d38e9c4c2" translate="yes" xml:space="preserve">
          <source>Does not create parent directories (fails if parent does not exist). Returns &lt;em&gt;true&lt;/em&gt; if the directory already exists, and &lt;em&gt;false&lt;/em&gt; otherwise.</source>
          <target state="translated">부모 디렉토리를 만들지 않습니다 (부모가 없으면 실패). 디렉토리가 이미 존재하면 &lt;em&gt;true를&lt;/em&gt; , 그렇지 않으면 &lt;em&gt;false를&lt;/em&gt; 리턴 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="7756a513e201b83ee675b4dfda19ad776d12af18" translate="yes" xml:space="preserve">
          <source>Don't use this proc for serialization, the representation may change at any moment and values are not escaped.</source>
          <target state="translated">직렬화에이 프로 시저를 사용하지 마십시오. 표현은 언제든지 변경 될 수 있으며 값은 이스케이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d51a209bab72a8621c6573b2ed74560555af6343" translate="yes" xml:space="preserve">
          <source>Don't use this proc for serialization, the representation may change at any moment and values are not escaped. Example:</source>
          <target state="translated">직렬화에이 proc을 사용하지 마십시오. 표현은 언제든지 변경 될 수 있으며 값이 이스케이프되지 않습니다. 예:</target>
        </trans-unit>
        <trans-unit id="fec78f1f169db0654a11f86d047bbd31b8722221" translate="yes" xml:space="preserve">
          <source>Double-hash (&lt;code&gt;##&lt;/code&gt;) comments in the code actually have their own format, using &lt;code&gt;strVal&lt;/code&gt; to get and set the comment text. Single-hash (&lt;code&gt;#&lt;/code&gt;) comments are ignored.</source>
          <target state="translated">코드에서 이중 해시 ( &lt;code&gt;##&lt;/code&gt; ) 주석은 실제로 &lt;code&gt;strVal&lt;/code&gt; 을 사용 하여 주석 텍스트를 가져오고 설정하는 자체 형식을 갖습니다 . 단일 해시 ( &lt;code&gt;#&lt;/code&gt; ) 주석은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="81b5c43dd872b5c09dff18e92fdbc184ac7fdfa9" translate="yes" xml:space="preserve">
          <source>Download of files.</source>
          <target state="translated">파일 다운로드</target>
        </trans-unit>
        <trans-unit id="7be3be9ea58619176e7fff0589c33e5526dd9493" translate="yes" xml:space="preserve">
          <source>Downloads &lt;code&gt;file&lt;/code&gt; and saves it to &lt;code&gt;dest&lt;/code&gt;. The &lt;code&gt;EvRetr&lt;/code&gt; event is passed to the specified &lt;code&gt;handleEvent&lt;/code&gt; function when the download is finished. The event's &lt;code&gt;filename&lt;/code&gt; field will be equal to &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 다운로드 하여 &lt;code&gt;dest&lt;/code&gt; 에 저장합니다 . &lt;code&gt;EvRetr&lt;/code&gt; 의 이벤트는 지정된에 전달 &lt;code&gt;handleEvent&lt;/code&gt; 다운로드가 완료 될 때 기능. 이벤트의 &lt;code&gt;filename&lt;/code&gt; 필드는 &lt;code&gt;file&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="6af892c013f61baa43bb291ad8a209106690db46" translate="yes" xml:space="preserve">
          <source>Downloads &lt;code&gt;file&lt;/code&gt; and saves it to &lt;code&gt;dest&lt;/code&gt;. Usage of this function asynchronously is recommended to view the progress of the download. The &lt;code&gt;EvRetr&lt;/code&gt; event is passed to the specified &lt;code&gt;handleEvent&lt;/code&gt; function when the download is finished, and the &lt;code&gt;filename&lt;/code&gt; field will be equal to &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 다운로드 하여 &lt;code&gt;dest&lt;/code&gt; 에 저장합니다 . 다운로드 진행 상황을 보려면이 기능을 비동기 적으로 사용하는 것이 좋습니다. &lt;code&gt;EvRetr&lt;/code&gt; 의 이벤트는 지정된에 전달 &lt;code&gt;handleEvent&lt;/code&gt; 다운로드가 완료 될 때 기능과 &lt;code&gt;filename&lt;/code&gt; 필드와 동일합니다 &lt;code&gt;file&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="59e7fa384f3d7f9f32ba0a373a21a9607615ddf8" translate="yes" xml:space="preserve">
          <source>Downloads &lt;code&gt;url&lt;/code&gt; and saves it to &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; 을 다운로드 하여 &lt;code&gt;filename&lt;/code&gt; 으로 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="b817aed53e0fcdfeab19c046fbdace4e6e4b81ab" translate="yes" xml:space="preserve">
          <source>Downloads &lt;code&gt;url&lt;/code&gt; and saves it to &lt;code&gt;outputFilename&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; 다운로드 하여 &lt;code&gt;outputFilename&lt;/code&gt; 에 저장합니다</target>
        </trans-unit>
        <trans-unit id="9a232d2332c2a74dabcefd3a7be13d0c4b810c14" translate="yes" xml:space="preserve">
          <source>Due to Nim's nature and the fact that &lt;code&gt;system.nim&lt;/code&gt; is always imported, there are lots of potential symbols. Furthermore thanks to templates and macros even context based analysis does not help much: In a context like &lt;code&gt;let x: |&lt;/code&gt; where a type has to follow, that type might be constructed from a template like &lt;code&gt;extractField(MyObject, fieldName)&lt;/code&gt;. We deal with this problem by smart sorting so that the likely symbols come first. This sorting is done this way:</source>
          <target state="translated">Nim의 특성과 &lt;code&gt;system.nim&lt;/code&gt; 이 항상 임포트 된다는 사실로 인해 많은 잠재적 기호가 있습니다. 더욱이 템플릿과 매크로 덕분에 컨텍스트 기반 분석조차별로 도움이되지 않습니다. &lt;code&gt;let x: |&lt;/code&gt; 형식이 따라야하는 경우 해당 형식은 &lt;code&gt;extractField(MyObject, fieldName)&lt;/code&gt; 과 같은 템플릿에서 생성 될 수 있습니다 . 우리는 스마트 정렬을 통해이 문제를 처리하여 가능성이 높은 기호가 먼저 오도록합니다. 이 정렬은 다음과 같이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="77869740fc3d2fc0969780aa5a80ba89f7878917" translate="yes" xml:space="preserve">
          <source>Due to an implementation detail you can call this proc on variables which have not been initialized yet. The proc will return zero as the length then.</source>
          <target state="translated">구현 세부 사항으로 인해 아직 초기화되지 않은 변수에 대해이 proc을 호출 할 수 있습니다. 그러면 proc은 길이로 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="81418674c8c7701fbe6e25d2a4956f04ef4b3c30" translate="yes" xml:space="preserve">
          <source>Due to an implementation detail you can call this proc on variables which have not been initialized yet. The proc will return zero as the length then. Example:</source>
          <target state="translated">구현 세부 사항으로 인해 아직 초기화되지 않은 변수에 대해이 proc을 호출 할 수 있습니다. proc은 길이로 0을 반환합니다. 예:</target>
        </trans-unit>
        <trans-unit id="68d3cc5c647d9856c415b767b90eff09217dbe14" translate="yes" xml:space="preserve">
          <source>Due to implementation restrictions thread local variables cannot be initialized within the &lt;code&gt;var&lt;/code&gt; section. (Every thread local variable needs to be replicated at thread creation.)</source>
          <target state="translated">구현 제한으로 인해 스레드 로컬 변수는 &lt;code&gt;var&lt;/code&gt; 섹션 내에서 초기화 될 수 없습니다 . 스레드 생성시 모든 스레드 로컬 변수를 복제해야합니다.</target>
        </trans-unit>
        <trans-unit id="7cc29a34a725ebdcc2c1af27a86df105600f9edd" translate="yes" xml:space="preserve">
          <source>Due to implementation restrictions thread-local variables cannot be initialized within the &lt;code&gt;var&lt;/code&gt; section. (Every thread-local variable needs to be replicated at thread creation.)</source>
          <target state="translated">구현 제한으로 인해 스레드 로컬 변수는 &lt;code&gt;var&lt;/code&gt; 섹션 내에서 초기화 할 수 없습니다 . (모든 스레드 로컬 변수는 스레드 생성시 복제되어야합니다.)</target>
        </trans-unit>
        <trans-unit id="fcfbd42b8e32ca1e72e79e9274a3013f7562379f" translate="yes" xml:space="preserve">
          <source>Due to intrinsic differences between operating systems, the information contained by the returned &lt;a href=&quot;#FileInfo&quot;&gt;FileInfo object&lt;/a&gt; will be slightly different across platforms, and in some cases, incomplete or inaccurate.</source>
          <target state="translated">운영 체제 간의 본질적인 차이로 인해 반환 된 &lt;a href=&quot;#FileInfo&quot;&gt;FileInfo 개체에&lt;/a&gt; 포함 된 정보 는 플랫폼에 따라 약간 씩 다를 수 있으며 경우에 따라 불완전하거나 부정확 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a06e95fadd5c749a8379257958c1fe02d0831a57" translate="yes" xml:space="preserve">
          <source>Due to intrinsic differences between operating systems, the information contained by the returned &lt;em&gt;FileInfo&lt;/em&gt; structure will be slightly different across platforms, and in some cases, incomplete or inaccurate.</source>
          <target state="translated">운영 체제 간의 본질적인 차이로 인해 반환 된 &lt;em&gt;FileInfo&lt;/em&gt; 구조에 포함 된 정보 는 플랫폼마다 약간 씩 다르며 경우에 따라 불완전하거나 정확하지 않을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a064c856b9c7f8c428db04200ec49c55ade9a25" translate="yes" xml:space="preserve">
          <source>Dumps statistics about the Garbage Collector.</source>
          <target state="translated">가비지 콜렉터에 대한 통계를 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="c5735569bde97160505df3253fe1d6e7b9929434" translate="yes" xml:space="preserve">
          <source>Dumps the content of an expression, useful for debugging. It accepts any expression and prints a textual representation of the tree representing the expression - as it would appear in source code - together with the value of the expression.</source>
          <target state="translated">디버깅에 유용한 표현식의 내용을 덤프합니다. 모든 표현식을 허용하며 표현식을 나타내는 트리의 텍스트 표현을 소스 코드에 표시되는 것처럼 표현식의 값과 함께 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="e243f941767dd001ebf81c976c0a5185e844ea52" translate="yes" xml:space="preserve">
          <source>Duplicates are removed.</source>
          <target state="translated">중복은 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="0d9ed8789ca4351ce0edb02d5e97c99bf04c1d4f" translate="yes" xml:space="preserve">
          <source>Duration vs TimeInterval</source>
          <target state="translated">기간 대 TimeInterval</target>
        </trans-unit>
        <trans-unit id="0db15e60468ee40fee5b359e2dc520cb015bb3c7" translate="yes" xml:space="preserve">
          <source>During &lt;code&gt;v&lt;/code&gt;'s lifetime, &lt;code&gt;G(b)&lt;/code&gt; can only be modified by &lt;code&gt;v&lt;/code&gt; (and only if &lt;code&gt;v&lt;/code&gt; is a mutable view).</source>
          <target state="translated">동안 &lt;code&gt;v&lt;/code&gt; 의 수명, &lt;code&gt;G(b)&lt;/code&gt; 단지에 의해 수정 될 수 &lt;code&gt;v&lt;/code&gt; (한정해 &lt;code&gt;v&lt;/code&gt; 가변의 도면).</target>
        </trans-unit>
        <trans-unit id="f0a199eef233da4a31218573e216bc2bd3610d7c" translate="yes" xml:space="preserve">
          <source>During compilation of the source code we should see the following lines in the output (again, since this is a macro, compilation is enough, you don't have to run any binary):</source>
          <target state="translated">소스 코드를 컴파일하는 동안 출력에 다음 줄이 표시됩니다 (다시 말해서 매크로이므로 컴파일하면 충분하므로 바이너리를 실행할 필요가 없습니다).</target>
        </trans-unit>
        <trans-unit id="2cb4f2db39a923075e1426b02f664b6eee0ae4de" translate="yes" xml:space="preserve">
          <source>Dynamic calls. DevkitPro libraries have no dlopen/dlclose functions.</source>
          <target state="translated">동적 통화. DevkitPro 라이브러리에는 dlopen / dlclose 기능이 없습니다.</target>
        </trans-unit>
        <trans-unit id="612d35050e691a1a2b9f22fe6b8f2fde9cb8f9d1" translate="yes" xml:space="preserve">
          <source>Dynamic dispatch</source>
          <target state="translated">동적 디스패치</target>
        </trans-unit>
        <trans-unit id="05a259530e41429744f111df0421f50ba2407d45" translate="yes" xml:space="preserve">
          <source>Dynamic method resolution can be inhibited via the builtin &lt;span id=&quot;systemdotproccall_1&quot;&gt;system.procCall&lt;/span&gt;. This is somewhat comparable to the &lt;span id=&quot;super_1&quot;&gt;super&lt;/span&gt; keyword that traditional OOP languages offer.</source>
          <target state="translated">내장 된 &lt;span id=&quot;systemdotproccall_1&quot;&gt;system.procCall을&lt;/span&gt; 통해 동적 메소드 분석을 막을 수 있습니다 . 이것은 전통적인 OOP 언어가 제공 하는 &lt;span id=&quot;super_1&quot;&gt;슈퍼&lt;/span&gt; 키워드 와 다소 비슷 합니다.</target>
        </trans-unit>
        <trans-unit id="488b9f75aa25e35ff8f7eaba651ce43a61e65595" translate="yes" xml:space="preserve">
          <source>Dynamically retrieving fields from JSON</source>
          <target state="translated">JSON에서 동적으로 필드 검색</target>
        </trans-unit>
        <trans-unit id="856725a690441d81bbc02a839d0b73e988e3905d" translate="yes" xml:space="preserve">
          <source>Dynamically typed wrapper around a JavaScript object.</source>
          <target state="translated">JavaScript 객체 주위에 동적으로 입력 된 래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="62679a570d8f79b420f4acbc59b384bebec763f8" translate="yes" xml:space="preserve">
          <source>Dynlib pragma for export</source>
          <target state="translated">수출을위한 Dynlib pragma</target>
        </trans-unit>
        <trans-unit id="d60375f8c1b519a260879d01fcc8988ed6c1c997" translate="yes" xml:space="preserve">
          <source>Dynlib pragma for import</source>
          <target state="translated">수입을위한 Dynlib pragma</target>
        </trans-unit>
        <trans-unit id="fdb8546dcb8fc0bb9da0b05ea78668537102f7b2" translate="yes" xml:space="preserve">
          <source>DynlibOverride</source>
          <target state="translated">DynlibOverride</target>
        </trans-unit>
        <trans-unit id="e368604419f770a28a386bee0e2af90b40141915" translate="yes" xml:space="preserve">
          <source>ERecoverableError:</source>
          <target state="translated">ERecoverableError:</target>
        </trans-unit>
        <trans-unit id="b4497f6a6ac18db7d277bd69571e657fe821c824" translate="yes" xml:space="preserve">
          <source>ESC:</source>
          <target state="translated">ESC:</target>
        </trans-unit>
        <trans-unit id="94e7a1f5f150f60ca96c43924cf60045cae97a9f" translate="yes" xml:space="preserve">
          <source>ESuggestDone:</source>
          <target state="translated">ESuggestDone:</target>
        </trans-unit>
        <trans-unit id="50c321f9472c4d4c9346c89122e7ef47659f0800" translate="yes" xml:space="preserve">
          <source>Each builds on top of the layers below it. The selectors module is an abstraction for the various system &lt;code&gt;select()&lt;/code&gt; mechanisms such as epoll or kqueue. If you wish you can use it directly, and some people have done so &lt;a href=&quot;http://goran.krampe.se/2014/10/25/nim-socketserver/&quot;&gt;successfully&lt;/a&gt;. But you must be aware that on Windows it only supports &lt;code&gt;select()&lt;/code&gt;.</source>
          <target state="translated">각각은 그 아래 레이어 위에 빌드됩니다. 선택기 모듈은 epoll 또는 kqueue와 같은 다양한 시스템 &lt;code&gt;select()&lt;/code&gt; 메커니즘에 대한 추상화입니다 . 원하는 경우 직접 사용할 수 있으며 일부 사람들은이를 &lt;a href=&quot;http://goran.krampe.se/2014/10/25/nim-socketserver/&quot;&gt;성공적으로&lt;/a&gt; 수행 했습니다 . 그러나 Windows에서는 &lt;code&gt;select()&lt;/code&gt; 만 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="55aaf45bd708c3bfb722e9d2c6eacac3fa05e904" translate="yes" xml:space="preserve">
          <source>Each call to &lt;code&gt;addQuitProc&lt;/code&gt; registers another quit procedure. Up to 30 procedures can be registered. They are executed on a last-in, first-out basis (that is, the last function registered is the first to be executed). &lt;code&gt;addQuitProc&lt;/code&gt; raises an EOutOfIndex exception if &lt;code&gt;QuitProc&lt;/code&gt; cannot be registered.</source>
          <target state="translated">&lt;code&gt;addQuitProc&lt;/code&gt; 를 호출 할 때 마다 다른 종료 절차가 등록됩니다. 최대 30 개의 절차를 등록 할 수 있습니다. 그것들은 선착순으로 실행됩니다 (즉, 마지막으로 등록 된 기능이 가장 먼저 실행됩니다). &lt;code&gt;addQuitProc&lt;/code&gt; 등록 할 수 없으면 addQuitProc 가 EOutOfIndex 예외를 발생 &lt;code&gt;QuitProc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c322f065f610043b1fe2b17b9d411cfaaaa0e3e" translate="yes" xml:space="preserve">
          <source>Each call to &lt;code&gt;addQuitProc&lt;/code&gt; registers another quit procedure. Up to 30 procedures can be registered. They are executed on a last-in, first-out basis (that is, the last function registered is the first to be executed). &lt;code&gt;addQuitProc&lt;/code&gt; raises an EOutOfIndex exception if &lt;code&gt;quitProc&lt;/code&gt; cannot be registered.</source>
          <target state="translated">&lt;code&gt;addQuitProc&lt;/code&gt; 에 대한 각 호출은 다른 종료 프로 시저를 등록합니다. 최대 30 개의 절차를 등록 할 수 있습니다. 이들은 후입 선출 방식으로 실행됩니다 (즉, 등록 된 마지막 기능이 가장 먼저 실행 됨). &lt;code&gt;addQuitProc&lt;/code&gt; 는 quitProc를 등록 할 수없는 경우 EOutOfIndex 예외를 발생 &lt;code&gt;quitProc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="776ab18061da1c2db02c658f9e63cbc92d5d6a98" translate="yes" xml:space="preserve">
          <source>Each cell has a header consisting of a RC and a pointer to its type descriptor. However the program does not know about these, so they are placed at negative offsets. In the GC code the type &lt;code&gt;PCell&lt;/code&gt; denotes a pointer decremented by the right offset, so that the header can be accessed easily. It is extremely important that &lt;code&gt;pointer&lt;/code&gt; is not confused with a &lt;code&gt;PCell&lt;/code&gt; as this would lead to a memory corruption.</source>
          <target state="translated">각 셀에는 RC로 구성된 헤더와 해당 유형 설명자에 대한 포인터가 있습니다. 그러나 프로그램은 이에 대해 알지 못하므로 음수 오프셋에 배치됩니다. GC 코드에서 &lt;code&gt;PCell&lt;/code&gt; 유형 은 오른쪽 오프셋으로 감소 된 포인터를 나타내므로 헤더에 쉽게 액세스 할 수 있습니다. &lt;code&gt;pointer&lt;/code&gt; 가 &lt;code&gt;PCell&lt;/code&gt; 과 혼동되지 않아야 메모리 손상이 발생할 수 있으므로 매우 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="f169302282df0e0c677e88af5b44a815e9972064" translate="yes" xml:space="preserve">
          <source>Each condition (&lt;code&gt;expr&lt;/code&gt;) has to be a constant expression (of type &lt;code&gt;bool&lt;/code&gt;).</source>
          <target state="translated">각 조건 ( &lt;code&gt;expr&lt;/code&gt; )은 상수 식 ( &lt;code&gt;bool&lt;/code&gt; 유형 ) 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="0c5f18bf9edfdee8494149e1bf1280ccbded6d1b" translate="yes" xml:space="preserve">
          <source>Each condition must be a constant expression since it is evaluated by the compiler.</source>
          <target state="translated">각 조건은 컴파일러에 의해 평가되므로 상수 표현식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="335f139324b71dfd7b59d7c167a9a5328135a2de" translate="yes" xml:space="preserve">
          <source>Each effect should inherit from &lt;code&gt;RootEffect&lt;/code&gt; unless you know what you're doing.</source>
          <target state="translated">수행중인 작업을 알지 &lt;code&gt;RootEffect&lt;/code&gt; 경우 각 효과는 RootEffect 에서 상속되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="87fc5dbb7fad2ec7340d8edf0f7ae7f478f50f6f" translate="yes" xml:space="preserve">
          <source>Each exception has to inherit from &lt;code&gt;Exception&lt;/code&gt;. See the full &lt;a href=&quot;manual#exception-handling-exception-hierarchy&quot;&gt;exception hierarchy&lt;/a&gt;.</source>
          <target state="translated">각 예외는 &lt;code&gt;Exception&lt;/code&gt; 에서 상속해야 합니다. 전체 &lt;a href=&quot;manual#exception-handling-exception-hierarchy&quot;&gt;예외 계층 구조를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca9b2d8812c1052b1bd208e798293ecf5422595d" translate="yes" xml:space="preserve">
          <source>Each exception has to inherit from &lt;em&gt;Exception&lt;/em&gt;. See the full &lt;a href=&quot;manual#exception-handling-exception-hierarchy&quot;&gt;exception hierarchy&lt;/a&gt;.</source>
          <target state="translated">각 예외는 &lt;em&gt;Exception&lt;/em&gt; 을 상속해야 합니다. 전체 &lt;a href=&quot;manual#exception-handling-exception-hierarchy&quot;&gt;예외 계층 구조를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8795144c72e58f2853040daf356daa6a3a1f08c" translate="yes" xml:space="preserve">
          <source>Each hint can be activated individually with &lt;code&gt;--hint[NAME]:on|off&lt;/code&gt; or in a &lt;code&gt;push&lt;/code&gt; pragma.</source>
          <target state="translated">각 힌트는 &lt;code&gt;--hint[NAME]:on|off&lt;/code&gt; 또는 &lt;code&gt;push&lt;/code&gt; pragma 를 사용하여 개별적으로 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1dba3186d05b73e92a36305f51916ec16a9b0422" translate="yes" xml:space="preserve">
          <source>Each line that does not start with the meta character (ignoring leading whitespace) is converted to a string literal that is added to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">메타 문자로 시작하지 않는 (행의 공백은 무시) 각 행은 문자열 리터럴로 변환되어 &lt;code&gt;result&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="336ae7eb96b67805237df64771f2e59017fa723d" translate="yes" xml:space="preserve">
          <source>Each module has a special magic constant &lt;code&gt;isMainModule&lt;/code&gt; that is true if the module is compiled as the main file. This is very useful to embed tests within the module as shown by the above example.</source>
          <target state="translated">각 모듈에는 특수 매직 상수 &lt;code&gt;isMainModule&lt;/code&gt; 이 있으며, 모듈이 기본 파일로 컴파일되면 true입니다. 이것은 위의 예제에 표시된 것처럼 모듈 내에 테스트를 포함시키는 데 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a5850c3cbcea85d57ba43ba3bb141d4f909f041d" translate="yes" xml:space="preserve">
          <source>Each module implicitly imports the System module; it must not be listed explicitly. Because of this there cannot be a user-defined module named &lt;code&gt;system&lt;/code&gt;.</source>
          <target state="translated">각 모듈은 암시 적으로 System 모듈을 가져옵니다. 명시 적으로 나열하면 안됩니다. 이 때문에 &lt;code&gt;system&lt;/code&gt; 이라는 사용자 정의 모듈이있을 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c62c392b5326d1416819e814c28f867821ca6a07" translate="yes" xml:space="preserve">
          <source>Each occurrence of &lt;code&gt;sub&lt;/code&gt; has to be surrounded by word boundaries (comparable to &lt;code&gt;\b&lt;/code&gt; in regular expressions), otherwise it is not replaced.</source>
          <target state="translated">&lt;code&gt;sub&lt;/code&gt; 의 각 발생은 단어 경계 ( 정규 표현식의 &lt;code&gt;\b&lt;/code&gt; 와 비교)로 둘러싸 야합니다 . 그렇지 않으면 대체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="74b6e0bb402a2281485388b5cef2a2dbe1d7bff8" translate="yes" xml:space="preserve">
          <source>Each occurrence of &lt;em&gt;sub&lt;/em&gt; has to be surrounded by word boundaries (comparable to &lt;code&gt;\\w&lt;/code&gt; in regular expressions), otherwise it is not replaced.</source>
          <target state="translated">&lt;em&gt;sub의&lt;/em&gt; 각 발생은 단어 경계 ( 정규 표현식에서 &lt;code&gt;\\w&lt;/code&gt; 와 비교할 수 있음)로 둘러싸 야합니다 . 그렇지 않으면 대체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1dc521c7d1ecb10c8d0cb27af3a35d2a73de8e54" translate="yes" xml:space="preserve">
          <source>Each pair of escape sequences partitions the complete set of characters into two disjoint sets. Any given character matches one, and only one, of each pair.</source>
          <target state="translated">각 이스케이프 시퀀스 쌍은 완전한 문자 세트를 두 개의 분리 된 세트로 분할합니다. 주어진 문자는 각 쌍 중 하나만 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2798cd0af8dc2b229ac3657798cbcfe39f0e2e62" translate="yes" xml:space="preserve">
          <source>Each value in the array gives information about a specific unit of time, for example &lt;code&gt;result[Days]&lt;/code&gt; gives a count of days.</source>
          <target state="translated">배열의 각 값은 특정 시간 단위에 대한 정보를 제공합니다. 예를 들어 &lt;code&gt;result[Days]&lt;/code&gt; 는 일 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="334a2ced35643b727dc74a2b4d5929156f67651e" translate="yes" xml:space="preserve">
          <source>Each warning can be activated individually with &lt;code&gt;--warning[NAME]:on|off&lt;/code&gt; or in a &lt;code&gt;push&lt;/code&gt; pragma.</source>
          <target state="translated">각 경고는 &lt;code&gt;--warning[NAME]:on|off&lt;/code&gt; 또는 &lt;code&gt;push&lt;/code&gt; pragma 를 사용하여 개별적으로 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="182eb105cb39c089eb1a6cb198b242a6bc8197af" translate="yes" xml:space="preserve">
          <source>EachIdentIsTuple</source>
          <target state="translated">EachIdentIsTuple</target>
        </trans-unit>
        <trans-unit id="4e5c9f473381f3fb5761e0382ebc9ae5ed1f4a90" translate="yes" xml:space="preserve">
          <source>Echoes styles arguments to stdout using &lt;code&gt;styledWriteLine&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;styledWriteLine&lt;/code&gt; 을 사용하여 스타일 인수를 stdout으로 에코합니다 .</target>
        </trans-unit>
        <trans-unit id="8440b9eb7d03917b2509b5baeab2a299ce257eb0" translate="yes" xml:space="preserve">
          <source>Edge</source>
          <target state="translated">Edge</target>
        </trans-unit>
        <trans-unit id="3f09e6c95247939bf64569f6398bc0c88eb19e61" translate="yes" xml:space="preserve">
          <source>Edge 12</source>
          <target state="translated">가장자리 12</target>
        </trans-unit>
        <trans-unit id="f9e3db094ccda80c20365b6a40c0ee5ddb8859b9" translate="yes" xml:space="preserve">
          <source>Edge 75</source>
          <target state="translated">Edge 75</target>
        </trans-unit>
        <trans-unit id="720b5dbc53190f0e13902f7885ccaf43bb9991de" translate="yes" xml:space="preserve">
          <source>Effect</source>
          <target state="translated">Effect</target>
        </trans-unit>
        <trans-unit id="7bd83ec4ed0ca781743b20854734c95169abfbc0" translate="yes" xml:space="preserve">
          <source>Effect describing a read IO operation.</source>
          <target state="translated">읽기 IO 작업을 설명하는 효과.</target>
        </trans-unit>
        <trans-unit id="8cf0e5c235365c0df79d3069265545c9b1dee897" translate="yes" xml:space="preserve">
          <source>Effect describing a write IO operation.</source>
          <target state="translated">쓰기 IO 작업을 설명하는 효과.</target>
        </trans-unit>
        <trans-unit id="31f2bfea355139e3e9e22b99d6278d277f73df7d" translate="yes" xml:space="preserve">
          <source>Effect describing an executing IO operation.</source>
          <target state="translated">실행 IO 작업을 설명하는 효과.</target>
        </trans-unit>
        <trans-unit id="0ff13f219cd501e9f019a49db523861036e244ba" translate="yes" xml:space="preserve">
          <source>Effect system</source>
          <target state="translated">효과 시스템</target>
        </trans-unit>
        <trans-unit id="74d1bdb1fc36787b171f27dba71f6f413021c240" translate="yes" xml:space="preserve">
          <source>Effect that denotes a read from an environment variable.</source>
          <target state="translated">환경 변수에서 읽기를 나타내는 효과입니다.</target>
        </trans-unit>
        <trans-unit id="a726269d9e4a2d3f966a883f911c35fc2a33d100" translate="yes" xml:space="preserve">
          <source>Effect that denotes a read operation from the directory structure.</source>
          <target state="translated">디렉터리 구조에서 읽기 작업을 나타내는 효과입니다.</target>
        </trans-unit>
        <trans-unit id="d14a65352015acd15d7a92a9f7378c2a692d19b0" translate="yes" xml:space="preserve">
          <source>Effect that denotes a write operation to the directory structure.</source>
          <target state="translated">디렉터리 구조에 대한 쓰기 작업을 나타내는 효과입니다.</target>
        </trans-unit>
        <trans-unit id="9f079620fe7b7e1b50fd92fdced39f4d0d639c07" translate="yes" xml:space="preserve">
          <source>Effect that denotes a write to an environment variable.</source>
          <target state="translated">환경 변수에 대한 쓰기를 나타내는 효과입니다.</target>
        </trans-unit>
        <trans-unit id="3091f4517f3fc78e350d72f0bcf5c9805abd4ba8" translate="yes" xml:space="preserve">
          <source>Effectively maps to a &lt;code&gt;bitand&lt;/code&gt; operation with an &lt;em&gt;inverted mask.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;반전 된 마스크&lt;/em&gt; 를 사용하여 &lt;code&gt;bitand&lt;/code&gt; 작업에 효과적으로 매핑합니다 &lt;em&gt;.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="07729cdc4294b245cb09d15d9b516203278f999b" translate="yes" xml:space="preserve">
          <source>Effectively maps to a &lt;code&gt;bitand&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;bitand&lt;/code&gt; 작업에 효과적으로 매핑 합니다.</target>
        </trans-unit>
        <trans-unit id="e6c6ff648d6b1ca691530a9fbb58db39eab69b63" translate="yes" xml:space="preserve">
          <source>Effectively maps to a &lt;code&gt;bitor&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;bitor&lt;/code&gt; 작업에 효과적으로 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="369f3a072755c41c85f55ef50152d7d1f3fc73e3" translate="yes" xml:space="preserve">
          <source>Effectively maps to a &lt;code&gt;bitxor&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;bitxor&lt;/code&gt; 작업에 효과적으로 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="23bb6b343bea5538c8faec4ca171c4196b53f6f6" translate="yes" xml:space="preserve">
          <source>Effects pragma</source>
          <target state="translated">효과 pragma</target>
        </trans-unit>
        <trans-unit id="0a40618e7c7195c35203fc157a7934401353226d" translate="yes" xml:space="preserve">
          <source>EffectsCompat.efCompat</source>
          <target state="translated">EffectsCompat.efCompat</target>
        </trans-unit>
        <trans-unit id="95da5dba65df7476e9e66fce4c1b8c7429cf14e3" translate="yes" xml:space="preserve">
          <source>EffectsCompat.efLockLevelsDiffer</source>
          <target state="translated">EffectsCompat.efLockLevelsDiffer</target>
        </trans-unit>
        <trans-unit id="4beefb76f1f471a7332258caac624ae4ae566ee3" translate="yes" xml:space="preserve">
          <source>EffectsCompat.efRaisesDiffer</source>
          <target state="translated">EffectsCompat.efRaisesDiffer</target>
        </trans-unit>
        <trans-unit id="242cf09cc3f27ef4d3282d4017da731ae00d50dd" translate="yes" xml:space="preserve">
          <source>EffectsCompat.efRaisesUnknown</source>
          <target state="translated">EffectsCompat.efRaisesUnknown</target>
        </trans-unit>
        <trans-unit id="ab07387a3e31fe6791650ab5b2c72673ba50ed78" translate="yes" xml:space="preserve">
          <source>EffectsCompat.efTagsDiffer</source>
          <target state="translated">EffectsCompat.efTagsDiffer</target>
        </trans-unit>
        <trans-unit id="51ca25b3f6e54c6750969701f074693d04ece981" translate="yes" xml:space="preserve">
          <source>EffectsCompat.efTagsUnknown</source>
          <target state="translated">EffectsCompat.efTagsUnknown</target>
        </trans-unit>
        <trans-unit id="f99e358df338214a73ebe93b1bf243c2c091513a" translate="yes" xml:space="preserve">
          <source>EffectsCompat:</source>
          <target state="translated">EffectsCompat:</target>
        </trans-unit>
        <trans-unit id="cc087d7f5657d399fe61abd80ba8c2765cec819d" translate="yes" xml:space="preserve">
          <source>Efficient hashing of a string buffer, from starting position &lt;code&gt;sPos&lt;/code&gt; to ending position &lt;code&gt;ePos&lt;/code&gt; (included).</source>
          <target state="translated">시작 위치 &lt;code&gt;sPos&lt;/code&gt; 에서 끝 위치 &lt;code&gt;ePos&lt;/code&gt; (포함) 까지 문자열 버퍼의 효율적인 해싱 .</target>
        </trans-unit>
        <trans-unit id="d1804f840b79395ccce81bf9df80043f647154d6" translate="yes" xml:space="preserve">
          <source>Efficient hashing of a string buffer, from starting position &lt;code&gt;sPos&lt;/code&gt; to ending position &lt;code&gt;ePos&lt;/code&gt; (included); case is ignored.</source>
          <target state="translated">시작 위치 &lt;code&gt;sPos&lt;/code&gt; 에서 끝 위치 &lt;code&gt;ePos&lt;/code&gt; (포함됨) 까지 문자열 버퍼의 효율적인 해싱 대소 문자는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="6248d596a7c95e039e3b62e6ebe28d707fabc624" translate="yes" xml:space="preserve">
          <source>Efficient hashing of a string buffer, from starting position &lt;code&gt;sPos&lt;/code&gt; to ending position &lt;code&gt;ePos&lt;/code&gt; (included); style is ignored.</source>
          <target state="translated">시작 위치 &lt;code&gt;sPos&lt;/code&gt; 에서 끝 위치 &lt;code&gt;ePos&lt;/code&gt; (포함됨) 까지 문자열 버퍼의 효율적인 해싱 스타일은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="6cb3672f6648f86153741f6d6f8a40084f086bb1" translate="yes" xml:space="preserve">
          <source>Efficient hashing of arrays and sequences.</source>
          <target state="translated">배열 및 시퀀스의 효율적인 해싱.</target>
        </trans-unit>
        <trans-unit id="5cf9c97c03934149b88f7928993fdb24689c8f9c" translate="yes" xml:space="preserve">
          <source>Efficient hashing of floats.</source>
          <target state="translated">플로트의 효율적인 해싱.</target>
        </trans-unit>
        <trans-unit id="b2acd4b6c45d18c1acbe5355a4e28bd3e5d7f6a1" translate="yes" xml:space="preserve">
          <source>Efficient hashing of integers.</source>
          <target state="translated">정수의 효율적인 해싱.</target>
        </trans-unit>
        <trans-unit id="4e0f1c3849dfcf5ea4f1bcfe54e61003df68f670" translate="yes" xml:space="preserve">
          <source>Efficient hashing of null-terminated strings.</source>
          <target state="translated">null로 끝나는 문자열의 효율적인 해싱.</target>
        </trans-unit>
        <trans-unit id="772958b1b6634c7c703799952cee269e6d18028d" translate="yes" xml:space="preserve">
          <source>Efficient hashing of pointers.</source>
          <target state="translated">포인터의 효율적인 해싱.</target>
        </trans-unit>
        <trans-unit id="aa331adb3074da0c2c2336d67002939d03827dae" translate="yes" xml:space="preserve">
          <source>Efficient hashing of portions of arrays and sequences, from starting position &lt;code&gt;sPos&lt;/code&gt; to ending position &lt;code&gt;ePos&lt;/code&gt; (included).</source>
          <target state="translated">시작 위치 &lt;code&gt;sPos&lt;/code&gt; 에서 끝 위치 &lt;code&gt;ePos&lt;/code&gt; (포함) 까지 배열 및 시퀀스의 일부를 효율적으로 해싱 합니다.</target>
        </trans-unit>
        <trans-unit id="f4d9dd6ee97bdbc8cb7ce1c4c03f7d4eb4c173ba" translate="yes" xml:space="preserve">
          <source>Efficient hashing of proc vars. Closures are supported too.</source>
          <target state="translated">proc 변수의 효율적인 해싱. 폐쇄도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="9c87cb75754af909206ab33c3c02cb4f9b3bee37" translate="yes" xml:space="preserve">
          <source>Efficient hashing of sets.</source>
          <target state="translated">세트의 효율적인 해싱.</target>
        </trans-unit>
        <trans-unit id="8956cc84c8de3a8a779e56505d8bf3127449e60d" translate="yes" xml:space="preserve">
          <source>Efficient hashing of strings.</source>
          <target state="translated">효율적인 문자열 해싱.</target>
        </trans-unit>
        <trans-unit id="4d7e0c8f4e8a332ccee5b4c2e360d74d619cdebc" translate="yes" xml:space="preserve">
          <source>Efficient hashing of strings; case is ignored.</source>
          <target state="translated">효율적인 문자열 해싱; 대소 문자는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ba80b8c66ce0286956d446192b36bdf25dd4f5b1" translate="yes" xml:space="preserve">
          <source>Efficient hashing of strings; style is ignored.</source>
          <target state="translated">효율적인 문자열 해싱; 스타일은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="7c8c4f9160222b13cc6cfdfb085ff3d37ae4f893" translate="yes" xml:space="preserve">
          <source>Efficient hashing of tuples.</source>
          <target state="translated">튜플의 효율적인 해싱.</target>
        </trans-unit>
        <trans-unit id="9547b5b7453b792f52ba7b091fba58da72c152df" translate="yes" xml:space="preserve">
          <source>ElemSize:</source>
          <target state="translated">ElemSize:</target>
        </trans-unit>
        <trans-unit id="8fd24711b1fc888e55904d87cbec73f98505d966" translate="yes" xml:space="preserve">
          <source>Elements outside of &lt;code&gt;slice&lt;/code&gt; will be left unchanged. If an invalid range (&lt;code&gt;HSlice&lt;/code&gt;) is passed, it raises IndexDefect.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 외부의 요소 는 변경되지 않습니다. 유효하지 않은 범위 ( &lt;code&gt;HSlice&lt;/code&gt; )가 전달되면 IndexDefect가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="74bf5d02598debfeb59a26a9bc8f29783102ce39" translate="yes" xml:space="preserve">
          <source>Elements outside of &lt;code&gt;slice&lt;/code&gt; will be left unchanged. The time complexity is linear to &lt;code&gt;slice.b - slice.a + 1&lt;/code&gt;. If an invalid range (&lt;code&gt;HSlice&lt;/code&gt;) is passed, it raises IndexDefect.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 외부의 요소 는 변경되지 않습니다. 시간 복잡도는 &lt;code&gt;slice.b - slice.a + 1&lt;/code&gt; 선형 입니다. 유효하지 않은 범위 ( &lt;code&gt;HSlice&lt;/code&gt; )가 전달되면 IndexDefect가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e823398a4f7891c2d5ec8900dbdfdb32b4773e9f" translate="yes" xml:space="preserve">
          <source>Else: Use a generic proc/iterator, if possible.</source>
          <target state="translated">그렇지 않은 경우 : 가능한 경우 일반 proc / iterator를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="67b4f087ef7af9792bb49c6da895bc3e222818fb" translate="yes" xml:space="preserve">
          <source>Else: Use a macro.</source>
          <target state="translated">그렇지 않으면 : 매크로를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7cea9c6c6c0e3e71c3024c7d2a5662ce06f45196" translate="yes" xml:space="preserve">
          <source>Else: Use a template, if possible.</source>
          <target state="translated">그렇지 않으면 : 가능하면 템플릿을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0d03a360b0cb309d8ddab5a3e699532d6d036345" translate="yes" xml:space="preserve">
          <source>Embedding Nim code</source>
          <target state="translated">님 코드 임베드</target>
        </trans-unit>
        <trans-unit id="963a7e6e94be0ac23f53b0f0df85fce3746851bc" translate="yes" xml:space="preserve">
          <source>Emit pragma</source>
          <target state="translated">프라 그마 방출</target>
        </trans-unit>
        <trans-unit id="fa9fc5308602902adcb2b4168c008aabc529239c" translate="yes" xml:space="preserve">
          <source>Emulated thread vars are global.</source>
          <target state="translated">에뮬레이트 된 스레드 변수는 전역 적입니다.</target>
        </trans-unit>
        <trans-unit id="e39c5424f92c6afba517d68c1bfb0423a03d8e71" translate="yes" xml:space="preserve">
          <source>Enable GC logging to stdout.</source>
          <target state="translated">stdout에 대한 GC 로깅을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="d2e677bc187b965f194ccfa9377784fced1c470f" translate="yes" xml:space="preserve">
          <source>Enable true color.</source>
          <target state="translated">트루 컬러를 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="9052f6b509949db9c2a3effc890b2a6c9e48284d" translate="yes" xml:space="preserve">
          <source>Enables OpenSSL support for the sockets module.</source>
          <target state="translated">소켓 모듈에 대한 OpenSSL 지원을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="96b622c3f2b0c249a2a9abd87ac899c69c9ecb8a" translate="yes" xml:space="preserve">
          <source>Enables memory profiling for the native GC.</source>
          <target state="translated">기본 GC에 대한 메모리 프로파일 링을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="f8633c619b634ffa027448ea481b7d0093ef9d6e" translate="yes" xml:space="preserve">
          <source>Enables support of Nim's GC for &lt;em&gt;soft&lt;/em&gt; realtime systems. See the documentation of the &lt;a href=&quot;gc&quot;&gt;gc&lt;/a&gt; for further information.</source>
          <target state="translated">&lt;em&gt;소프트&lt;/em&gt; 실시간 시스템에 대한 Nim의 GC를 지원 합니다. 자세한 내용은 &lt;a href=&quot;gc&quot;&gt;gc&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4898865113660eb8e93e3dde1836cd70082f3399" translate="yes" xml:space="preserve">
          <source>Enables the GC again.</source>
          <target state="translated">GC를 다시 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="7c3ff6df0146db2d8f131bb539905ccce63e9217" translate="yes" xml:space="preserve">
          <source>Enables the caching of leaves. This reduces the memory footprint at the cost of runtime efficiency.</source>
          <target state="translated">잎을 캐싱 할 수 있습니다. 이는 런타임 효율을 희생시키면서 메모리 풋 프린트를 줄입니다.</target>
        </trans-unit>
        <trans-unit id="7b1eac78e563ca0b5b27a30a8d2e280d813c9610" translate="yes" xml:space="preserve">
          <source>Encapsulates a database connection.</source>
          <target state="translated">데이터베이스 연결을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="1848cc5b29f5a38bbf1e51dabf36f15d7e51cd52" translate="yes" xml:space="preserve">
          <source>Encode a string that may contain Unicode. Prefix is empty.</source>
          <target state="translated">유니 코드를 포함 할 수있는 문자열을 인코딩합니다. 접두사가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="af490105e966cc228448720159b622e27d3808ea" translate="yes" xml:space="preserve">
          <source>Encode a string that may contain Unicode. Prepend &lt;code&gt;prefix&lt;/code&gt; to the result</source>
          <target state="translated">유니 코드를 포함 할 수있는 문자열을 인코딩합니다. 결과 앞에 &lt;code&gt;prefix&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="84840c6580a53a7a28a31d125b43ba58d8f4da54" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;s&lt;/code&gt; into base64 representation as lines. Used in email MIME format, use &lt;code&gt;lineLen&lt;/code&gt; and &lt;code&gt;newline&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 를 라인으로 base64 표현으로 인코딩 합니다. 이메일 MIME 형식으로 사용 &lt;code&gt;lineLen&lt;/code&gt; 및 &lt;code&gt;newline&lt;/code&gt; 을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="1a3fdf278bc3ddc5f16b316a295488f144a00430" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;s&lt;/code&gt; into base64 representation.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 를 base64 표현으로 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="fdf56a868f24cb7f08adaaac7d560795f5b0d0fe" translate="yes" xml:space="preserve">
          <source>Encodes a URL according to RFC3986.</source>
          <target state="translated">RFC3986에 따라 URL을 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="b49ae15ec05d17d3b8a37a3132d4847821356fd3" translate="yes" xml:space="preserve">
          <source>Encodes a set of (key, value) parameters into a URL query string.</source>
          <target state="translated">(키, 값) 매개 변수 세트를 URL 쿼리 문자열로 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="25eba2103c20a20b4f854b80459e39a11e6c00fa" translate="yes" xml:space="preserve">
          <source>Encodes a value to be XML safe:</source>
          <target state="translated">XML 안전을 위해 값을 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="154be40dfe5d0a56bc2fc4f3b006b1ffa31e7e17" translate="yes" xml:space="preserve">
          <source>Encoding data</source>
          <target state="translated">데이터 인코딩</target>
        </trans-unit>
        <trans-unit id="457f3840c363f41c4113055dad3263a7ac648523" translate="yes" xml:space="preserve">
          <source>End of a borrow</source>
          <target state="translated">대출 종료</target>
        </trans-unit>
        <trans-unit id="7c13a4d4727fb9b9e8575e8d0df3f2c33b65030b" translate="yes" xml:space="preserve">
          <source>EndOfFile:</source>
          <target state="translated">EndOfFile:</target>
        </trans-unit>
        <trans-unit id="0268c4d064a74cab852d8a3f8a632f54e1c716ff" translate="yes" xml:space="preserve">
          <source>EndianToStr:</source>
          <target state="translated">EndianToStr:</target>
        </trans-unit>
        <trans-unit id="af8ca51809eec7330124973c0c719862ce403d56" translate="yes" xml:space="preserve">
          <source>Ending the custom exception's name with &lt;code&gt;Error&lt;/code&gt; is recommended.</source>
          <target state="translated">사용자 지정 예외의 이름을 &lt;code&gt;Error&lt;/code&gt; 로 끝내는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4042806d682d8a45bda241197080e343a1c23e5f" translate="yes" xml:space="preserve">
          <source>English word</source>
          <target state="translated">영어 단어</target>
        </trans-unit>
        <trans-unit id="d693ef46d597d85a66514edd2ece77644ffff06f" translate="yes" xml:space="preserve">
          <source>Ensures &lt;code&gt;path&lt;/code&gt; has exactly 0 or 1 trailing &lt;code&gt;DirSep&lt;/code&gt;, depending on &lt;code&gt;trailingSep&lt;/code&gt;, and taking care of edge cases: it preservers whether a path is absolute or relative, and makes sure trailing sep is &lt;code&gt;DirSep&lt;/code&gt;, not &lt;code&gt;AltSep&lt;/code&gt;. Trailing &lt;code&gt;/.&lt;/code&gt; are compressed, see examples.</source>
          <target state="translated">보장 된 &lt;code&gt;path&lt;/code&gt; 정확히 0 또는 1 후행 갖는다 &lt;code&gt;DirSep&lt;/code&gt; 를 ,에 따라 &lt;code&gt;trailingSep&lt;/code&gt; 는 경로가 절대 또는 상대인지를 보존 자와 반드시 후행 9월가한다 : 에지 경우 돌보는 &lt;code&gt;DirSep&lt;/code&gt; 하지 &lt;code&gt;AltSep&lt;/code&gt; . 후행 &lt;code&gt;/.&lt;/code&gt; 압축되어 있습니다 (예제 참조).</target>
        </trans-unit>
        <trans-unit id="87d355976c4a2b188c7edbc7b9d9b6f7a7543d49" translate="yes" xml:space="preserve">
          <source>Entry point is the proc &lt;code&gt;tp&lt;/code&gt;. &lt;code&gt;param&lt;/code&gt; is passed to &lt;code&gt;tp&lt;/code&gt;. &lt;code&gt;TArg&lt;/code&gt; can be &lt;code&gt;void&lt;/code&gt; if you don't need to pass any data to the thread.</source>
          <target state="translated">진입 점은 proc &lt;code&gt;tp&lt;/code&gt; 입니다. &lt;code&gt;param&lt;/code&gt; 은 &lt;code&gt;tp&lt;/code&gt; 에 전달됩니다 . 데이터를 스레드에 전달할 필요가 없으면 &lt;code&gt;TArg&lt;/code&gt; 가 &lt;code&gt;void&lt;/code&gt; 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9e7fc46fd82cf9e046b7d2dde76a4d3d74e515b4" translate="yes" xml:space="preserve">
          <source>Enum, sets and casting can be used together as in:</source>
          <target state="translated">열거 형, 세트 및 캐스팅은 다음과 같이 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2bba7a713c8df3215f1bd35e964187dd2b8779d" translate="yes" xml:space="preserve">
          <source>Enumeration and object types may only be defined within a &lt;code&gt;type&lt;/code&gt; statement.</source>
          <target state="translated">열거 및 객체 유형은 &lt;code&gt;type&lt;/code&gt; 문 내에서만 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c02a030906f7f30a8d4fcb59f84714e7bdafd42" translate="yes" xml:space="preserve">
          <source>Enumeration of logging levels.</source>
          <target state="translated">로깅 수준 열거.</target>
        </trans-unit>
        <trans-unit id="de95348406525f80d9c73a93317163dea26a0952" translate="yes" xml:space="preserve">
          <source>Enumeration specifying a path component.</source>
          <target state="translated">경로 구성 요소를 지정하는 열거.</target>
        </trans-unit>
        <trans-unit id="3e2bf03a268096db9df6b0465b51da16d0d1910a" translate="yes" xml:space="preserve">
          <source>Enumeration types</source>
          <target state="translated">열거 형</target>
        </trans-unit>
        <trans-unit id="7b46585d986b63e5c84f089146aa1e206d252ae8" translate="yes" xml:space="preserve">
          <source>Enumeration types define a new type whose values consist of the ones specified. The values are ordered. Example:</source>
          <target state="translated">열거 유형은 값이 지정된 유형으로 구성된 새 유형을 정의합니다. 값이 정렬됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="413e9110db4f37157b581483ed8d7133f5021d89" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">Enumerations</target>
        </trans-unit>
        <trans-unit id="3d57504f6fc8184f9917dab72bb8b6f0fc65ea4a" translate="yes" xml:space="preserve">
          <source>Enumerations, integer types, &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt; (and subranges) are called ordinal types. Ordinal types have quite a few special operations:</source>
          <target state="translated">열거 형, 정수형, &lt;code&gt;char&lt;/code&gt; 및 &lt;code&gt;bool&lt;/code&gt; (및 하위 범위)을 서수형이라고합니다. 서수 유형에는 몇 가지 특수 연산이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e6cfd98e1a208ad6316665ea88cb2b668e0700b" translate="yes" xml:space="preserve">
          <source>Equality for ordered sets.</source>
          <target state="translated">주문 된 세트의 평등</target>
        </trans-unit>
        <trans-unit id="ecccc8ce13010bacb868722464db64d58f6d7452" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;acceptAddr&lt;/code&gt; but doesn't return the address, only the socket.</source>
          <target state="translated">&lt;code&gt;acceptAddr&lt;/code&gt; 와 동일 하지만 주소를 반환하지 않고 소켓 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0fc024b1d434cedadc23ef57e6c74217e4e0894e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sockets.accept&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sockets.accept&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="697bc63b6dcba7e34e13299df63fb1414234ed36" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sockets.acceptAddr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sockets.acceptAddr&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="0604774d60ab64b389eba4998686a49917f37f1d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sockets.acceptAddr&lt;/code&gt;. This procedure should be called in a &lt;code&gt;handleAccept&lt;/code&gt; event handler &lt;strong&gt;only&lt;/strong&gt; once.</source>
          <target state="translated">&lt;code&gt;sockets.acceptAddr&lt;/code&gt; 와 같습니다 . 이 절차는 호출해야 &lt;code&gt;handleAccept&lt;/code&gt; 의 이벤트 핸들러 &lt;strong&gt;단&lt;/strong&gt; 한 번.</target>
        </trans-unit>
        <trans-unit id="a95bf8dedb35cdd899a5d6e172bb67456de99695" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sockets.bindAddr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sockets.bindAddr&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7599fc48268927adf6e46e7be9046635db26a2cf" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sockets.listen&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sockets.listen&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a0e3f64c59fa3fafa886a4a11af79a5f9f6c90b9" translate="yes" xml:space="preserve">
          <source>Era: AD or BC</source>
          <target state="translated">시대 : AD 또는 BC</target>
        </trans-unit>
        <trans-unit id="b6ed88865d1b3cdebc3673b10f131985f6aae0e3" translate="yes" xml:space="preserve">
          <source>Erases the entire current line.</source>
          <target state="translated">현재 줄 전체를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="5ca334765c9f492fac0cffe803f2502e8b9af5c0" translate="yes" xml:space="preserve">
          <source>Erases the screen with the background colour and moves the cursor to home.</source>
          <target state="translated">배경색으로 화면을 지우고 커서를 집으로 옮깁니다.</target>
        </trans-unit>
        <trans-unit id="0fd4760f0475fbe05a836f35a97e6a97790ed9e9" translate="yes" xml:space="preserve">
          <source>Error messages are for application-level error conditions, such as when some user input generated an exception. Typically, the application will continue to run, but with degraded functionality or loss of data, and these effects might be visible to users.</source>
          <target state="translated">오류 메시지는 일부 사용자 입력이 예외를 생성 한 경우와 같은 응용 프로그램 수준 오류 조건에 대한 것입니다. 일반적으로 응용 프로그램은 계속 실행되지만 기능이 저하되거나 데이터가 손실되며 이러한 영향이 사용자에게 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bac79ccbd09cab80c75839f804b820dc00b9ad8" translate="yes" xml:space="preserve">
          <source>Error: type mismatch: got (Person) but expected one of: hashes.hash(x: openArray[A]): Hash hashes.hash(x: int): Hash hashes.hash(x: float): Hash &amp;hellip;</source>
          <target state="translated">오류 : 유형 불일치 : (사람)을 얻었지만 다음 중 하나를 예상했습니다 : hashes.hash (x : openArray [A]) : Hash hashes.hash (x : int) : Hash hashes.hash (x : float) : Hash&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="dd1b7566b6f3f7cd7ff9bfcd55af258f27b4464f" translate="yes" xml:space="preserve">
          <source>ErrorHandler:</source>
          <target state="translated">ErrorHandler:</target>
        </trans-unit>
        <trans-unit id="0db72e172d24bd8ce3e4907133558b491951978e" translate="yes" xml:space="preserve">
          <source>Escape sequence</source>
          <target state="translated">탈출 순서</target>
        </trans-unit>
        <trans-unit id="abf190f5e891a8b7cde6b2f2889a26430d2fa291" translate="yes" xml:space="preserve">
          <source>Escapes &lt;code&gt;s&lt;/code&gt; for inclusion into an XML document.</source>
          <target state="translated">탈출이 &lt;code&gt;s&lt;/code&gt; 의 XML 문서에 포함시키기 위해.</target>
        </trans-unit>
        <trans-unit id="4ce842a1e8f88d82424a155e64428b8ea57e027f" translate="yes" xml:space="preserve">
          <source>Escapes a string &lt;code&gt;s&lt;/code&gt;. See &lt;a href=&quot;system#addEscapedChar,string,char&quot;&gt;system.addEscapedChar&lt;/a&gt; for the escaping scheme.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 를 이스케이프합니다 . 이스케이프 체계는 &lt;a href=&quot;system#addEscapedChar,string,char&quot;&gt;system.addEscapedChar&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d71e463bc98e6b713f02475b527b066e7ed293d" translate="yes" xml:space="preserve">
          <source>Escapes a string &lt;em&gt;s&lt;/em&gt;. See &lt;a href=&quot;system#addEscapedChar&quot;&gt;system.addEscapedChar&lt;/a&gt; for the escaping scheme.</source>
          <target state="translated">문자열 이스케이프 &lt;em&gt;의&lt;/em&gt; . 이스케이프 체계에 대해서는 &lt;a href=&quot;system#addEscapedChar&quot;&gt;system.addEscapedChar&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7aa05c89801f07f96792da696a98f9d6902a660f" translate="yes" xml:space="preserve">
          <source>Escapes the &lt;code&gt;'&lt;/code&gt; (single quote) char to &lt;code&gt;''&lt;/code&gt;. Because single quote is used for defining &lt;code&gt;VARCHAR&lt;/code&gt; in SQL.</source>
          <target state="translated">&lt;code&gt;'&lt;/code&gt; (작은 따옴표) 문자를 &lt;code&gt;''&lt;/code&gt; 이스케이프합니다 . SQL에서 &lt;code&gt;VARCHAR&lt;/code&gt; 를 정의하는 데 작은 따옴표가 사용되기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="ebd9f96f52afcf1872610e11bf957c2e3fce63d5" translate="yes" xml:space="preserve">
          <source>Escapes the HTML.</source>
          <target state="translated">HTML을 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="05de4d41c5a032eacf69e2eaa892f38d900a015f" translate="yes" xml:space="preserve">
          <source>Escapes these characters:</source>
          <target state="translated">다음 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="34157ff150b5c7a704524678312371224476d1bf" translate="yes" xml:space="preserve">
          <source>Establish the floating-point environment represented by the object pointed to by &lt;code&gt;envp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;envp&lt;/code&gt; 가 가리키는 객체가 나타내는 부동 소수점 환경을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="783d409d7482af05fb23227e1180b70d47859cb8" translate="yes" xml:space="preserve">
          <source>Establish the floating-point environment represented by the object pointed to by &lt;em&gt;envp&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;envp가&lt;/em&gt; 가리키는 객체가 나타내는 부동 소수점 환경을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d16ed93871dea92948274ecec5b7a916c0b6b8b" translate="yes" xml:space="preserve">
          <source>Establish the rounding direction represented by &lt;code&gt;roundingDirection&lt;/code&gt;.</source>
          <target state="translated">로 표현되는 반올림 방향 수립 &lt;code&gt;roundingDirection&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="e353bf0b3a24e4306cbf0bb86c2dff1c822e00fe" translate="yes" xml:space="preserve">
          <source>Establish the rounding direction represented by &lt;em&gt;roundingDirection&lt;/em&gt;.</source>
          <target state="translated">로 표현되는 반올림 방향 수립 &lt;em&gt;roundingDirection을&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f7d3a01e138c496208aa3759c0e95392bbbd765c" translate="yes" xml:space="preserve">
          <source>Establishes a connection with a SMTP server. May fail with ReplyError or with a socket error.</source>
          <target state="translated">SMTP 서버와 연결을 설정합니다. ReplyError 또는 소켓 오류로 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e671f390e06cb895c11177c3a256261229018f0" translate="yes" xml:space="preserve">
          <source>Establishes connection to the specified &lt;code&gt;address&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt; pair via the specified protocol. The procedure iterates through possible resolutions of the &lt;code&gt;address&lt;/code&gt; until it succeeds, meaning that it seamlessly works with both IPv4 and IPv6. Returns AsyncSocket ready to send or receive data.</source>
          <target state="translated">지정된 프로토콜을 통해 지정된 &lt;code&gt;address&lt;/code&gt; : &lt;code&gt;port&lt;/code&gt; 쌍에 연결합니다. 이 절차 는 성공할 때까지 &lt;code&gt;address&lt;/code&gt; 의 가능한 해결 방법을 반복 하므로 IPv4 및 IPv6 모두에서 원활하게 작동합니다. 데이터를 보내거나받을 준비가 된 AsyncSocket을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4443d26269000b5708852a2218ba1399e31a5b1a" translate="yes" xml:space="preserve">
          <source>Establishes connection to the specified &lt;code&gt;address&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt; pair via the specified protocol. The procedure iterates through possible resolutions of the &lt;code&gt;address&lt;/code&gt; until it succeeds, meaning that it seamlessly works with both IPv4 and IPv6. Returns Socket ready to send or receive data.</source>
          <target state="translated">지정된 프로토콜을 통해 지정된 &lt;code&gt;address&lt;/code&gt; : &lt;code&gt;port&lt;/code&gt; 쌍에 연결합니다. 이 절차 는 성공할 때까지 &lt;code&gt;address&lt;/code&gt; 의 가능한 해결 방법을 반복 하므로 IPv4 및 IPv6 모두에서 원활하게 작동합니다. 데이터를 보내거나받을 준비가 된 소켓을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="37c08133fa3f29a1985c6a7cebfcf239a619bde3" translate="yes" xml:space="preserve">
          <source>Establishes connection to the specified &lt;code&gt;address&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt; pair via the specified protocol. The procedure iterates through possible resolutions of the &lt;code&gt;address&lt;/code&gt; until it succeeds, meaning that it seamlessly works with both IPv4 and IPv6. Returns the async file descriptor, registered in the dispatcher of the current thread, ready to send or receive data.</source>
          <target state="translated">지정된 프로토콜을 통해 지정된 &lt;code&gt;address&lt;/code&gt; : &lt;code&gt;port&lt;/code&gt; 쌍 에 대한 연결을 설정 합니다. 이 절차 는 성공할 때까지 가능한 &lt;code&gt;address&lt;/code&gt; 확인을 반복 합니다. 즉, IPv4 및 IPv6 모두에서 원활하게 작동합니다. 현재 스레드의 디스패처에 등록되어 데이터를 보내거나받을 준비가 된 비동기 파일 설명자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2d25d939a4d4d60a1388bc207afef74f93ceb416" translate="yes" xml:space="preserve">
          <source>Euler's number</source>
          <target state="translated">오일러 수</target>
        </trans-unit>
        <trans-unit id="04a3014b40a8870202ec5d482ff386d8480f9c7e" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;code&gt;x&lt;/code&gt; and when it is not an empty node, return it. Otherwise evaluate to &lt;code&gt;y&lt;/code&gt;. Can be used to chain several expressions to get the first expression that is not empty.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 를 평가 하고 빈 노드가 아니면 반환합니다. 그렇지 않으면 &lt;code&gt;y&lt;/code&gt; 로 평가됩니다 . 비어 있지 않은 첫 번째 표현식을 얻기 위해 여러 표현식을 연결하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1643253b40ca890659deaa2ba04c73ed6b689b6" translate="yes" xml:space="preserve">
          <source>Evaluate difference between two dates in &lt;code&gt;TimeInterval&lt;/code&gt; format, so, it will be relative.</source>
          <target state="translated">&lt;code&gt;TimeInterval&lt;/code&gt; 형식으로 두 날짜 간의 차이를 평가 하므로 상대적입니다.</target>
        </trans-unit>
        <trans-unit id="9c367b41746b72b39d7af3374e31f39ff999faf2" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;body&lt;/code&gt; if &lt;code&gt;(NimMajor, NimMinor, NimPatch)&lt;/code&gt; is greater than or equal to &lt;code&gt;version&lt;/code&gt;. Usage:</source>
          <target state="translated">&lt;code&gt;(NimMajor, NimMinor, NimPatch)&lt;/code&gt; 가 &lt;code&gt;version&lt;/code&gt; 보다 크거나 같은 경우 &lt;code&gt;body&lt;/code&gt; 평가 합니다. 용법:</target>
        </trans-unit>
        <trans-unit id="fb1affd59e068debc0d0ba06a429b3af6d56590c" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;body&lt;/code&gt; if the &lt;code&gt;(NimMajor, NimMinor)&lt;/code&gt; is greater than or equal to &lt;code&gt;version&lt;/code&gt;. Usage:</source>
          <target state="translated">평가하여 &lt;code&gt;body&lt;/code&gt; 경우 생성 &lt;code&gt;(NimMajor, NimMinor)&lt;/code&gt; 동일한보다 큰 경우 &lt;code&gt;version&lt;/code&gt; . 용법:</target>
        </trans-unit>
        <trans-unit id="b6d9b230b31389286de64f6bde2d24d6e2c0b910" translate="yes" xml:space="preserve">
          <source>Evaluation is lazy: if &lt;code&gt;x&lt;/code&gt; is false, &lt;code&gt;y&lt;/code&gt; will not even be evaluated.</source>
          <target state="translated">평가가 지연됩니다. &lt;code&gt;x&lt;/code&gt; 가 거짓이면 &lt;code&gt;y&lt;/code&gt; 는 평가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="31e4caf7147cac0f5ee4338c8b054341f01712ce" translate="yes" xml:space="preserve">
          <source>Evaluation is lazy: if &lt;code&gt;x&lt;/code&gt; is true, &lt;code&gt;y&lt;/code&gt; will not even be evaluated.</source>
          <target state="translated">평가가 게으르다 : &lt;code&gt;x&lt;/code&gt; 가 참이면 &lt;code&gt;y&lt;/code&gt; 도 평가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2524ffeb65491857bf944c68f78b89d81327c52a" translate="yes" xml:space="preserve">
          <source>Even more sophisticated name mangling can be achieved by the &lt;code&gt;#mangle&lt;/code&gt; directive: It takes a PEG pattern and format string that specify how the identifier should be converted:</source>
          <target state="translated">&lt;code&gt;#mangle&lt;/code&gt; 지시어 를 사용하면보다 복잡한 이름 조작을 수행 할 수 있습니다 . 식별자 변환 방법을 지정하는 PEG 패턴 및 형식 문자열이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="27af5de002f30bc2e9af71c4a12bc6a8a81fbb37" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;$*&lt;/code&gt; and &lt;code&gt;$+&lt;/code&gt; look similar to the regular expressions &lt;code&gt;.*&lt;/code&gt; and &lt;code&gt;.+&lt;/code&gt; they work quite differently, there is no non-deterministic state machine involved and the matches are non-greedy. &lt;code&gt;[$*]&lt;/code&gt; matches &lt;code&gt;[xyz]&lt;/code&gt; via &lt;code&gt;parseutils.parseUntil&lt;/code&gt;.</source>
          <target state="translated">비록 &lt;code&gt;$*&lt;/code&gt; 과 &lt;code&gt;$+&lt;/code&gt; 정규 표현식과 유사 &lt;code&gt;.*&lt;/code&gt; 와 &lt;code&gt;.+&lt;/code&gt; 그들은 매우 다르게 작동,이 반군 비 결정적 상태 머신없고 일치하는 비 욕심이다. &lt;code&gt;[$*]&lt;/code&gt; 는 &lt;code&gt;parseutils.parseUntil&lt;/code&gt; 을 통해 &lt;code&gt;[xyz]&lt;/code&gt; ] 와 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="9a63ee142c52a4cc90fed5d3808736f6650b1d8f" translate="yes" xml:space="preserve">
          <source>Even though the algorithm works with any string &lt;code&gt;s&lt;/code&gt;, it is only useful if &lt;code&gt;s&lt;/code&gt; contains a number.</source>
          <target state="translated">알고리즘이 모든 문자열 &lt;code&gt;s&lt;/code&gt; 와 함께 작동 하더라도 &lt;code&gt;s&lt;/code&gt; 가 숫자를 포함하는 경우에만 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="d35ac72ee7166d41e67fb47beca1c5e4b8922f69" translate="yes" xml:space="preserve">
          <source>Even though the algorithm works with any string &lt;em&gt;s&lt;/em&gt;, it is only useful if &lt;em&gt;s&lt;/em&gt; contains a number.</source>
          <target state="translated">알고리즘이 문자열 &lt;em&gt;s&lt;/em&gt; 와 함께 작동 하더라도 &lt;em&gt;s&lt;/em&gt; 에 숫자가 포함 된 경우에만 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="f70e3e815b8a733357251ed7732d44011fcf1bd8" translate="yes" xml:space="preserve">
          <source>Even though the conversion is implicit, it is not &lt;em&gt;safe&lt;/em&gt;: The garbage collector does not consider a &lt;code&gt;cstring&lt;/code&gt; to be a root and may collect the underlying memory. However in practice this almost never happens as the GC considers stack roots conservatively. One can use the builtin procs &lt;code&gt;GC_ref&lt;/code&gt; and &lt;code&gt;GC_unref&lt;/code&gt; to keep the string data alive for the rare cases where it does not work.</source>
          <target state="translated">변환은 암시 적이지만 &lt;em&gt;안전&lt;/em&gt; 하지 않습니다. 가비지 수집기는 &lt;code&gt;cstring&lt;/code&gt; 을 루트로 간주하지 않으며 기본 메모리를 수집 할 수 있습니다. 그러나 실제로 이것은 GC가 스택 루트를 보수적으로 고려할 때 거의 발생하지 않습니다. 내장 프로 시저 &lt;code&gt;GC_ref&lt;/code&gt; 및 &lt;code&gt;GC_unref&lt;/code&gt; 를 사용하여 문자열 데이터가 작동하지 않는 드문 경우에 대해 문자열 데이터를 활성 상태 로 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6addfedc704413a6e7d9075adeaaa1c5ce8e0f3a" translate="yes" xml:space="preserve">
          <source>Even though the conversion is implicit, it is not &lt;em&gt;safe&lt;/em&gt;: The garbage collector does not consider a &lt;code&gt;cstring&lt;/code&gt; to be a root and may collect the underlying memory. However, in practice, this almost never happens as the GC considers stack roots conservatively. One can use the builtin procs &lt;code&gt;GC_ref&lt;/code&gt; and &lt;code&gt;GC_unref&lt;/code&gt; to keep the string data alive for the rare cases where it does not work.</source>
          <target state="translated">변환이 암시 적이지만 &lt;em&gt;안전&lt;/em&gt; 하지 않습니다. 가비지 수집기는 &lt;code&gt;cstring&lt;/code&gt; 을 루트로 간주하지 않고 기본 메모리를 수집 할 수 있습니다. 그러나 실제로 GC가 스택 루트를 보수적으로 고려하기 때문에 이는 거의 발생하지 않습니다. 내장 procs &lt;code&gt;GC_ref&lt;/code&gt; 및 &lt;code&gt;GC_unref&lt;/code&gt; 를 사용하여 드물게 작동하지 않는 경우에 대해 문자열 데이터를 활성 상태 로 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c05d2e4b7c53e86de6170c6fcf499454d34430a3" translate="yes" xml:space="preserve">
          <source>Even though the translation process is not perfect, it is often the case that the translated Nim code does not need any tweaking by hand. In other cases it may be preferable to modify the input file instead of the generated Nim code so that c2nim can parse it properly. c2nim's preprocessor defines the symbol &lt;code&gt;C2NIM&lt;/code&gt; that can be used to mark code sections:</source>
          <target state="translated">번역 프로세스가 완벽하지는 않지만 번역 된 Nim 코드를 직접 조정할 필요가없는 경우가 종종 있습니다. 다른 경우 c2nim이 올바르게 구문 분석 할 수 있도록 생성 된 Nim 코드 대신 입력 파일을 수정하는 것이 좋습니다. c2nim의 전처리 기는 코드 섹션을 표시하는 데 사용할 수있는 기호 &lt;code&gt;C2NIM&lt;/code&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="e00da9359b8f6b979472d9d18acc3f0800a129b9" translate="yes" xml:space="preserve">
          <source>Even though you don't need to declare a type for a tuple to use it, tuples created with different field names will be considered different objects despite having the same field types.</source>
          <target state="translated">튜플에서이를 사용하기 위해 유형을 선언 할 필요는 없지만 동일한 필드 유형에도 불구하고 다른 필드 이름으로 작성된 튜플은 다른 객체로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="ad8919ace091b14011c6439cfd5e1707b58f5abd" translate="yes" xml:space="preserve">
          <source>Event</source>
          <target state="translated">Event</target>
        </trans-unit>
        <trans-unit id="51b078c46c5a991afd7b3906cc1edfda7c9614bd" translate="yes" xml:space="preserve">
          <source>Every (key, value) pair is URL-encoded and written as &lt;code&gt;key=value&lt;/code&gt;. If the value is an empty string then the &lt;code&gt;=&lt;/code&gt; is omitted, unless &lt;code&gt;omitEq&lt;/code&gt; is false. The pairs are joined together by a &lt;code&gt;&amp;amp;&lt;/code&gt; character.</source>
          <target state="translated">모든 (키, 값) 쌍은 URL로 인코딩되고 &lt;code&gt;key=value&lt;/code&gt; 로 작성됩니다 . 값이 빈 문자열이면 &lt;code&gt;omitEq&lt;/code&gt; 가 false가 아니면 &lt;code&gt;=&lt;/code&gt; 가 생략 됩니다. 쌍은 &lt;code&gt;&amp;amp;&lt;/code&gt; 문자 로 결합됩니다 .</target>
        </trans-unit>
        <trans-unit id="c1bb065f39932ece8029ed29026b45a8cf4dcb27" translate="yes" xml:space="preserve">
          <source>Every &lt;a href=&quot;manual#character-literals&quot;&gt;character literal&lt;/a&gt; newline combination (CR, LF, CR-LF) is supported. The result strings contain no trailing end of line characters unless parameter &lt;code&gt;keepEol&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">모든 &lt;a href=&quot;manual#character-literals&quot;&gt;문자 리터럴&lt;/a&gt; 개행 조합 (CR, LF, CR-LF)이 지원됩니다. 매개 변수 &lt;code&gt;keepEol&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 로 설정 되지 않으면 결과 문자열에 줄 끝 문자가 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="841a6e8a6cc72696da7e211be53dc71a89e2c4cd" translate="yes" xml:space="preserve">
          <source>Every &lt;a href=&quot;manual#lexical-analysis-character-literals&quot;&gt;character literal&lt;/a&gt; newline combination (CR, LF, CR-LF) is supported. The result strings contain no trailing end of line characters unless parameter &lt;code&gt;keepEol&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">모든 &lt;a href=&quot;manual#lexical-analysis-character-literals&quot;&gt;문자 리터럴&lt;/a&gt; 개행 조합 (CR, LF, CR-LF)이 지원됩니다. 결과 문자열에는 &lt;code&gt;keepEol&lt;/code&gt; 매개 변수 가 &lt;code&gt;true&lt;/code&gt; 로 설정 되지 않는 한 후행 행 끝 문자가 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1c93731d90a7b9ab10c722e02cfafccaa2a9fdf5" translate="yes" xml:space="preserve">
          <source>Every Nim module resides in a (nimble) package. An object type can be attached to the package it resides in. If that is done, the type can be referenced from other modules as an &lt;span id=&quot;incomplete_1&quot;&gt;incomplete&lt;/span&gt; object type. This feature allows to break up recursive type dependencies across module boundaries. Incomplete object types are always passed &lt;code&gt;byref&lt;/code&gt; and can only be used in pointer like contexts (&lt;code&gt;var/ref/ptr IncompleteObject&lt;/code&gt;) in general since the compiler does not yet know the size of the object. To complete an incomplete object the &lt;code&gt;package&lt;/code&gt; pragma has to be used. &lt;code&gt;package&lt;/code&gt; implies &lt;code&gt;byref&lt;/code&gt;.</source>
          <target state="translated">모든 Nim 모듈은 (민첩한) 패키지에 있습니다. 객체 유형은 상주하는 패키지에 첨부 될 수 있습니다. 그렇게되면 다른 모듈에서 유형 이 &lt;span id=&quot;incomplete_1&quot;&gt;불완전한&lt;/span&gt; 객체 유형 으로 참조 될 수 있습니다 . 이 기능을 사용하면 모듈 경계를 넘어 재귀 유형 종속성을 나눌 수 있습니다. 불완전한 객체 유형은 항상 &lt;code&gt;byref&lt;/code&gt; 전달 되며 컴파일러가 아직 객체의 크기를 알지 못하기 때문에 일반적으로 컨텍스트 ( &lt;code&gt;var/ref/ptr IncompleteObject&lt;/code&gt; ) 와 같은 포인터에서만 사용할 수 있습니다 . 불완전한 객체를 완성하려면 pragma &lt;code&gt;package&lt;/code&gt; 를 사용해야합니다. &lt;code&gt;package&lt;/code&gt; &lt;code&gt;byref&lt;/code&gt; 를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="c77fb4846042da3ceb41a89e050f00de3c12260f" translate="yes" xml:space="preserve">
          <source>Every Nim module resides in a (nimble) package. An object type can be attached to the package it resides in. If that is done, the type can be referenced from other modules as an &lt;span id=&quot;incomplete_1&quot;&gt;incomplete&lt;/span&gt; object type. This features allows to break up recursive type dependencies accross module boundaries. Incomplete object types are always passed &lt;code&gt;byref&lt;/code&gt; and can only be used in pointer like contexts (&lt;code&gt;var/ref/ptr IncompleteObject&lt;/code&gt;) in general since the compiler does not yet know the size of the object. To complete an incomplete object the &lt;code&gt;package&lt;/code&gt; pragma has to be used. &lt;code&gt;package&lt;/code&gt; implies &lt;code&gt;byref&lt;/code&gt;.</source>
          <target state="translated">모든 Nim 모듈은 (신속한) 패키지에 있습니다. 객체 유형은 패키지에 상주하는 패키지에 첨부 될 수 있습니다. 완료되면 다른 모듈에서 유형 이 &lt;span id=&quot;incomplete_1&quot;&gt;불완전한&lt;/span&gt; 객체 유형 으로 참조 될 수 있습니다 . 이 기능을 사용하면 모듈 경계에 걸쳐 재귀 유형 종속성을 분류 할 수 있습니다. 불완전한 객체 유형은 항상 &lt;code&gt;byref&lt;/code&gt; 전달 되며 컴파일러는 아직 객체의 크기를 알지 못하므로 일반적으로 컨텍스트와 같은 포인터 ( &lt;code&gt;var/ref/ptr IncompleteObject&lt;/code&gt; ) 에서만 사용할 수 있습니다 . 불완전한 객체를 완성하려면 &lt;code&gt;package&lt;/code&gt; pragma를 사용해야합니다. &lt;code&gt;package&lt;/code&gt; 는 &lt;code&gt;byref&lt;/code&gt; 를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="a8cfd4261435d32982761b3dde7bd6de2d29d6f3" translate="yes" xml:space="preserve">
          <source>Every access of a guarded memory location needs to happen in an appropriate &lt;span id=&quot;locks_1&quot;&gt;locks&lt;/span&gt; statement.</source>
          <target state="translated">보호 된 메모리 위치에 대한 모든 액세스는 적절한 &lt;span id=&quot;locks_1&quot;&gt;잠금&lt;/span&gt; 명령문 에서 발생해야 합니다.</target>
        </trans-unit>
        <trans-unit id="ca62ae16b33dceaf19c5d1465c9d9125be109135" translate="yes" xml:space="preserve">
          <source>Every arg in args needs to match. There are multiple different categories how an argument can match. Let &lt;code&gt;f&lt;/code&gt; be the formal parameter's type and &lt;code&gt;a&lt;/code&gt; the type of the argument.</source>
          <target state="translated">args의 모든 arg는 일치해야합니다. 인수가 일치하는 방법에는 여러 가지 범주가 있습니다. 하자 &lt;code&gt;f&lt;/code&gt; 는 형식적인 매개 변수의 종류와 수 인수의 유형입니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be67c2bbb9942cd3be9b909db99c265560744375" translate="yes" xml:space="preserve">
          <source>Every array access has to be provably within bounds. This is called the &lt;em&gt;bounds check&lt;/em&gt;.</source>
          <target state="translated">모든 어레이 액세스는 경계 내에 있어야합니다. 이것을 &lt;em&gt;경계 검사&lt;/em&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="1ce51b86a2644666a064bc71fe0df29fee802324" translate="yes" xml:space="preserve">
          <source>Every call to a method &lt;code&gt;m&lt;/code&gt; is assumed to raise &lt;code&gt;system.Exception&lt;/code&gt; unless &lt;code&gt;m&lt;/code&gt; has an explicit &lt;code&gt;raises&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; 메소드에 대한 모든 호출은 시스템을 발생시키는 것으로 가정됩니다 &lt;code&gt;system.Exception&lt;/code&gt; &lt;code&gt;m&lt;/code&gt; 에 명시 적 &lt;code&gt;raises&lt;/code&gt; 목록 이 없으면 예외 입니다.</target>
        </trans-unit>
        <trans-unit id="b34ead0e5dfbe731b7b536ad959d8a1bc4bb04b6" translate="yes" xml:space="preserve">
          <source>Every call to a proc &lt;code&gt;q&lt;/code&gt; which has an unknown body (due to a forward declaration or an &lt;code&gt;importc&lt;/code&gt; pragma) is assumed to raise &lt;code&gt;system.Exception&lt;/code&gt; unless &lt;code&gt;q&lt;/code&gt; has an explicit &lt;code&gt;raises&lt;/code&gt; list.</source>
          <target state="translated">알 수없는 본문이 있는 proc &lt;code&gt;q&lt;/code&gt; 를 호출 할 때마다 (포워드 선언 또는 &lt;code&gt;importc&lt;/code&gt; pragma 로 인해 ) 시스템이 발생한다고 가정합니다 &lt;code&gt;system.Exception&lt;/code&gt; &lt;code&gt;q&lt;/code&gt; 에 명시 적 &lt;code&gt;raises&lt;/code&gt; 목록 이 없으면 예외 입니다.</target>
        </trans-unit>
        <trans-unit id="df3d4aeadc3195348572c41b2174a65bcb0c4fee" translate="yes" xml:space="preserve">
          <source>Every expression of some proc type within a call that is not a call itself (and not nil) is assumed to be called indirectly somehow and thus its raises list is added to &lt;code&gt;p&lt;/code&gt;'s raises list.</source>
          <target state="translated">호출 자체가 아닌 (그리고 nil이 아닌) 호출 내에서 일부 proc 유형의 모든 표현은 간접적으로 호출되는 것으로 가정되므로 제기 목록이 &lt;code&gt;p&lt;/code&gt; 의 제기 목록에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="354b547169f14688eed8ccd9aeb4b010abe50bfe" translate="yes" xml:space="preserve">
          <source>Every indirect call via some proc type &lt;code&gt;T&lt;/code&gt; is assumed to raise &lt;code&gt;system.Exception&lt;/code&gt; (the base type of the exception hierarchy) and thus any exception unless &lt;code&gt;T&lt;/code&gt; has an explicit &lt;code&gt;raises&lt;/code&gt; list. However if the call is of the form &lt;code&gt;f(...)&lt;/code&gt; where &lt;code&gt;f&lt;/code&gt; is a parameter of the currently analysed routine it is ignored. The call is optimistically assumed to have no effect. Rule 2 compensates for this case.</source>
          <target state="translated">일부 proc 유형 &lt;code&gt;T&lt;/code&gt; 를 통한 모든 간접 호출 은 &lt;code&gt;system.Exception&lt;/code&gt; (예외 계층 구조의 기본 유형)을 발생시키는 것으로 가정되며 , 따라서 &lt;code&gt;T&lt;/code&gt; 에 명시 적 &lt;code&gt;raises&lt;/code&gt; 목록 이 없으면 예외 가 발생 합니다. 그러나 호출이 &lt;code&gt;f(...)&lt;/code&gt; 형식 인 경우 &lt;code&gt;f&lt;/code&gt; 는 현재 분석 된 루틴의 매개 변수입니다. 호출은 효과가 없다고 낙관적으로 가정합니다. 규칙 2는이 경우를 보상합니다.</target>
        </trans-unit>
        <trans-unit id="4fcffb5d29ecb4130571066ef828a94cd520be5d" translate="yes" xml:space="preserve">
          <source>Every indirect call via some proc type &lt;code&gt;T&lt;/code&gt; is assumed to raise &lt;code&gt;system.Exception&lt;/code&gt; (the base type of the exception hierarchy) and thus any exception unless &lt;code&gt;T&lt;/code&gt; has an explicit &lt;code&gt;raises&lt;/code&gt; list. However, if the call is of the form &lt;code&gt;f(...)&lt;/code&gt; where &lt;code&gt;f&lt;/code&gt; is a parameter of the currently analyzed routine it is ignored. The call is optimistically assumed to have no effect. Rule 2 compensates for this case.</source>
          <target state="translated">일부 proc 유형 &lt;code&gt;T&lt;/code&gt; 를 통한 모든 간접 호출 은 &lt;code&gt;system.Exception&lt;/code&gt; (예외 계층 구조의 기본 유형)을 발생시키는 것으로 간주 되므로 &lt;code&gt;T&lt;/code&gt; 에 명시 적 발생 목록 이 없는 경우 모든 예외 &lt;code&gt;raises&lt;/code&gt; 합니다. 그러나 호출이 &lt;code&gt;f(...)&lt;/code&gt; 형식 인 경우 &lt;code&gt;f&lt;/code&gt; 는 현재 분석 된 루틴의 매개 변수 인 경우 무시됩니다. 이 호출은 낙관적으로 효과가 없다고 가정합니다. 규칙 2는이 경우를 보상합니다.</target>
        </trans-unit>
        <trans-unit id="bb548758d08a2c10b16050f6d416d20221486de9" translate="yes" xml:space="preserve">
          <source>Every location of the form &lt;code&gt;a[i]&lt;/code&gt; and &lt;code&gt;a[i..j]&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; where &lt;code&gt;dest&lt;/code&gt; is part of the pattern &lt;code&gt;dest = spawn f(...)&lt;/code&gt; has to be provably disjoint. This is called the &lt;em&gt;disjoint check&lt;/em&gt;.</source>
          <target state="translated">폼의 각 위치 &lt;code&gt;a[i]&lt;/code&gt; 및 &lt;code&gt;a[i..j]&lt;/code&gt; 및 &lt;code&gt;dest&lt;/code&gt; 여기서 &lt;code&gt;dest&lt;/code&gt; 패턴의 부분 &lt;code&gt;dest = spawn f(...)&lt;/code&gt; 라도 유용 해체되어야한다. 이것을 &lt;em&gt;분리 검사&lt;/em&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="cba4580f1c0b505633eb8e175bcb26eb141a1f43" translate="yes" xml:space="preserve">
          <source>Every other complex location &lt;code&gt;loc&lt;/code&gt; that is used in a spawned proc (&lt;code&gt;spawn f(loc)&lt;/code&gt;) has to be immutable for the duration of the &lt;code&gt;parallel&lt;/code&gt; section. This is called the &lt;em&gt;immutability check&lt;/em&gt;. Currently it is not specified what exactly &quot;complex location&quot; means. We need to make this an optimization!</source>
          <target state="translated">스폰 된 proc ( &lt;code&gt;spawn f(loc)&lt;/code&gt; )에 사용되는 다른 모든 복잡한 위치 &lt;code&gt;loc&lt;/code&gt; 은 &lt;code&gt;parallel&lt;/code&gt; 섹션 기간 동안 변경 불가능해야합니다 . 이를 &lt;em&gt;불변성 검사&lt;/em&gt; 라고합니다 . 현재는 정확히 &quot;복잡한 위치&quot;가 무엇을 의미하는지 지정되어 있지 않습니다. 이를 최적화해야합니다!&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f1716f12b6b99ead4104b896e3c8385d943dd249" translate="yes" xml:space="preserve">
          <source>Every table implementation is treated equal syntactically.</source>
          <target state="translated">모든 테이블 구현은 구문 적으로 동일하게 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="736a0c06f70cd2b7aec50d599733874e93eeb796" translate="yes" xml:space="preserve">
          <source>Every table implementation is treated equally syntactically.</source>
          <target state="translated">모든 테이블 구현은 구문 적으로 동일하게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="469b9f46546ac9d56164f67e3cf63d154c4c18b8" translate="yes" xml:space="preserve">
          <source>Every tag in the resulting tree is in lower case.</source>
          <target state="translated">결과 트리의 모든 태그는 소문자입니다.</target>
        </trans-unit>
        <trans-unit id="357eae391ef69fac015faff1a81a0bc59cb03fd8" translate="yes" xml:space="preserve">
          <source>Every variable, procedure, etc. needs to be declared before it can be used. (The reason for this is that it is non-trivial to avoid this need in a language that supports meta programming as extensively as Nim does.) However, this cannot be done for mutually recursive procedures:</source>
          <target state="translated">모든 변수, 프로 시저 등을 사용하려면 먼저 선언해야합니다. (이 이유는 Nim처럼 광범위하게 메타 프로그래밍을 지원하는 언어에서 이러한 요구를 피하는 것이 사소한 것이 아니기 때문에 상호 재귀적인 절차에는 수행 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ff700ea8d5e43af6e22cd0ecb4ccf949d6c22e81" translate="yes" xml:space="preserve">
          <source>Evolving Scripting language</source>
          <target state="translated">진화하는 스크립팅 언어</target>
        </trans-unit>
        <trans-unit id="57dd2bb10c86456fbdafdf47dec18bce66c355f9" translate="yes" xml:space="preserve">
          <source>Exact match: &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; are of the same type.</source>
          <target state="translated">정확히 일치 : &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;f&lt;/code&gt; 는 같은 유형입니다.</target>
        </trans-unit>
        <trans-unit id="c580248363131aab80ef21e1b16898324c6070e3" translate="yes" xml:space="preserve">
          <source>ExactConstraints:</source>
          <target state="translated">ExactConstraints:</target>
        </trans-unit>
        <trans-unit id="317fbfa3e30158c1a0f457f8d2a1dc6a3e561d3c" translate="yes" xml:space="preserve">
          <source>ExactGcSafety:</source>
          <target state="translated">ExactGcSafety:</target>
        </trans-unit>
        <trans-unit id="75caf8c90414bbc5733b1aee171be7cb3c2f1a25" translate="yes" xml:space="preserve">
          <source>ExactGenericParams:</source>
          <target state="translated">ExactGenericParams:</target>
        </trans-unit>
        <trans-unit id="29c37cfaff7d5d608269bdaf6c1324ee95bc723f" translate="yes" xml:space="preserve">
          <source>ExactTypeDescValues:</source>
          <target state="translated">ExactTypeDescValues:</target>
        </trans-unit>
        <trans-unit id="3335f0d72cb62ba842ddadc5c17c795d039f078f" translate="yes" xml:space="preserve">
          <source>Exactly &lt;code&gt;size&lt;/code&gt; bytes will be copied. The memory regions may overlap, &lt;code&gt;moveMem&lt;/code&gt; handles this case appropriately and is thus somewhat more safe than &lt;code&gt;copyMem&lt;/code&gt;. Like any procedure dealing with raw memory this is still &lt;strong&gt;unsafe&lt;/strong&gt;, though.</source>
          <target state="translated">정확한 &lt;code&gt;size&lt;/code&gt; 바이트가 복사됩니다. 메모리 영역이 겹칠 수 있으며 &lt;code&gt;moveMem&lt;/code&gt; 은이 경우를 적절하게 처리하므로 &lt;code&gt;copyMem&lt;/code&gt; 보다 다소 안전 합니다. 그러나 원시 메모리를 다루는 다른 절차와 마찬가지로 이것은 여전히 &lt;strong&gt;안전하지&lt;/strong&gt; 않습니다.</target>
        </trans-unit>
        <trans-unit id="8db14ab3583a66ec772819b3f499089baaa70967" translate="yes" xml:space="preserve">
          <source>Exactly &lt;code&gt;size&lt;/code&gt; bytes will be overwritten. Like any procedure dealing with raw memory this is &lt;strong&gt;unsafe&lt;/strong&gt;.</source>
          <target state="translated">정확한 &lt;code&gt;size&lt;/code&gt; 바이트를 덮어 씁니다. 원시 메모리를 다루는 다른 절차와 마찬가지로 이것은 &lt;strong&gt;안전하지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="092d0946bf1defa2720482b8b8241d820ad34582" translate="yes" xml:space="preserve">
          <source>Example 1: Retrieve HTML title</source>
          <target state="translated">예 1 : HTML 제목 검색</target>
        </trans-unit>
        <trans-unit id="310dfe3e84588da282cab337066ff71027987656" translate="yes" xml:space="preserve">
          <source>Example 2: Retrieve all HTML links</source>
          <target state="translated">예 2 : 모든 HTML 링크 검색</target>
        </trans-unit>
        <trans-unit id="d5ea3515a6cb589cfe9b0bbcd41c02701cea03b1" translate="yes" xml:space="preserve">
          <source>Example Templates and Macros</source>
          <target state="translated">예제 템플릿 및 매크로</target>
        </trans-unit>
        <trans-unit id="1fabb1683d22d0469c9e9cac437dfd3fa193ab75" translate="yes" xml:space="preserve">
          <source>Example code:</source>
          <target state="translated">예제 코드 :</target>
        </trans-unit>
        <trans-unit id="be37c70d10d7ff9b748caaca084a4517e09fa070" translate="yes" xml:space="preserve">
          <source>Example for startTls use:</source>
          <target state="translated">startTls 사용의 예 :</target>
        </trans-unit>
        <trans-unit id="f34d521cfab6899ca509ba9279f748bc93f954d1" translate="yes" xml:space="preserve">
          <source>Example gmail use:</source>
          <target state="translated">Gmail 사용 예 :</target>
        </trans-unit>
        <trans-unit id="3a67f288bc798b8ccba6322e589320654088d872" translate="yes" xml:space="preserve">
          <source>Example of how a configuration file may look like:</source>
          <target state="translated">구성 파일의 예 :</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">사용법 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="c4de85f28e60b5135cb3762767ab2c1a5c91d823" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;parentDir(&quot;/usr/local/bin&quot;) == &quot;/usr/local&quot;&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;parentDir(&quot;/usr/local/bin&quot;) == &quot;/usr/local&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f8b8c06a5ad97dce6b3af023a5b20c8c69ae38d1" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;parentDir(&quot;/usr/local/bin/&quot;) == &quot;/usr/local&quot;&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;parentDir(&quot;/usr/local/bin/&quot;) == &quot;/usr/local&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d735ffab2b32ed73e75ae249ea554cf0c98dd96e" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;tailDir(&quot;/usr/local/bin&quot;) == &quot;local/bin&quot;&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;tailDir(&quot;/usr/local/bin&quot;) == &quot;local/bin&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="28cb1bb1a4f7e2d78a60de9cab48d666c79b5806" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;tailDir(&quot;bin&quot;) == &quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;tailDir(&quot;bin&quot;) == &quot;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7a1e037796371e98acc6412fb8ca0db9884aa53" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;tailDir(&quot;usr/local/bin/&quot;) == &quot;local/bin&quot;&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;tailDir(&quot;usr/local/bin/&quot;) == &quot;local/bin&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7fca31664ee5491a1a146def15be930ce333a074" translate="yes" xml:space="preserve">
          <source>Example: Hoisting</source>
          <target state="translated">예 : 게양</target>
        </trans-unit>
        <trans-unit id="c68385cace14f3acde243a85007b37824dd88a35" translate="yes" xml:space="preserve">
          <source>Example: How to use the parser</source>
          <target state="translated">예 : 파서를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="f9a290fed60a06db2defb42324fd53368a8f6ec0" translate="yes" xml:space="preserve">
          <source>Example: Partial evaluation</source>
          <target state="translated">예 : 부분 평가</target>
        </trans-unit>
        <trans-unit id="a1a9de1d5c7df46bbb5fac7dc9c5de11a722db1a" translate="yes" xml:space="preserve">
          <source>Example: Transforming hyperlinks</source>
          <target state="translated">예 : 하이퍼 링크 변환</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="ae660b90e2a8e639cd3e547a2fea51b830ac299b" translate="yes" xml:space="preserve">
          <source>Except clauses</source>
          <target state="translated">절 제외</target>
        </trans-unit>
        <trans-unit id="30ede7bb45fde490c36b2461496f6bb815deba2c" translate="yes" xml:space="preserve">
          <source>Exception and Error types should have the &quot;Error&quot; or &quot;Defect&quot; suffix.</source>
          <target state="translated">예외 및 오류 유형에는 &quot;오류&quot;또는 &quot;결함&quot;접미사가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="a4033a571807e39735d2a99ca592a29f56808dd1" translate="yes" xml:space="preserve">
          <source>Exception and Error types should have the &quot;Error&quot; suffix.</source>
          <target state="translated">예외 및 오류 유형에는 &quot;오류&quot;접미사가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="b4b0dfe7027c1d349ba13a7e79558e44ec341bd8" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
          <target state="translated">예외 처리</target>
        </trans-unit>
        <trans-unit id="209011554fcfc911dcec7eb38e42eca35be08388" translate="yes" xml:space="preserve">
          <source>Exception hierarchy</source>
          <target state="translated">예외 계층</target>
        </trans-unit>
        <trans-unit id="b8e75446a5258ec2872aeb702faa50a3a5ca3727" translate="yes" xml:space="preserve">
          <source>Exception that is raised for invalid XML.</source>
          <target state="translated">유효하지 않은 XML에 대해 예외가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="a5b185b8528ec78879363f4f5a039db667000b32" translate="yes" xml:space="preserve">
          <source>Exception that is raised if an IOSelectors error occurs.</source>
          <target state="translated">IOSelectors 오류가 발생하면 발생하는 예외입니다.</target>
        </trans-unit>
        <trans-unit id="a99d65c4d420b5eb1b5525adaf042541111850ec" translate="yes" xml:space="preserve">
          <source>Exception tracking</source>
          <target state="translated">예외 추적</target>
        </trans-unit>
        <trans-unit id="42a7736efb8562c1fbe351e0380d1e57a4e2bff6" translate="yes" xml:space="preserve">
          <source>Exception: Values that are converted to an unsigned type at compile time are checked so that code like &lt;code&gt;byte(-1)&lt;/code&gt; does not compile.</source>
          <target state="translated">예외 : 컴파일시 부호없는 유형으로 변환 된 값은 &lt;code&gt;byte(-1)&lt;/code&gt; 과 같은 코드 가 컴파일되지 않도록 검사합니다.</target>
        </trans-unit>
        <trans-unit id="0d22ae3c081b8bf013f14210254b25e8e5c8b700" translate="yes" xml:space="preserve">
          <source>ExceptionSystem.excCpp</source>
          <target state="translated">ExceptionSystem.excCpp</target>
        </trans-unit>
        <trans-unit id="76e24ca8c4f13854e4773cb125f1d249f289db03" translate="yes" xml:space="preserve">
          <source>ExceptionSystem.excGoto</source>
          <target state="translated">ExceptionSystem.excGoto</target>
        </trans-unit>
        <trans-unit id="5110f53d9906c6ebb97e01dd7f5e17f7dd0b557d" translate="yes" xml:space="preserve">
          <source>ExceptionSystem.excNone</source>
          <target state="translated">ExceptionSystem.excNone</target>
        </trans-unit>
        <trans-unit id="d8d3e1f7a93580cc13caec45bc231ac414cbbb0a" translate="yes" xml:space="preserve">
          <source>ExceptionSystem.excQuirky</source>
          <target state="translated">ExceptionSystem.excQuirky</target>
        </trans-unit>
        <trans-unit id="5197aeafdd76f73059990cfe7334d573a22d3b8e" translate="yes" xml:space="preserve">
          <source>ExceptionSystem.excSetjmp</source>
          <target state="translated">ExceptionSystem.excSetjmp</target>
        </trans-unit>
        <trans-unit id="8e430440431b7511e5f4ddbd2c26a0a809b7e9af" translate="yes" xml:space="preserve">
          <source>ExceptionSystem:</source>
          <target state="translated">ExceptionSystem:</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="4c69892fb47339f7f39b915fd73a75ce2a42d35b" translate="yes" xml:space="preserve">
          <source>Exceptions have to be allocated on the heap because their lifetime is unknown. The compiler will prevent you from raising an exception created on the stack. All raised exceptions should at least specify the reason for being raised in the &lt;code&gt;msg&lt;/code&gt; field.</source>
          <target state="translated">수명을 알 수 없기 때문에 힙에 예외를 할당해야합니다. 컴파일러는 스택에서 생성 된 예외를 발생시키지 못하게합니다. 발생한 모든 예외는 &lt;code&gt;msg&lt;/code&gt; 필드 에 발생한 이유를 지정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b6c2c4a44553554dabeee772c89f47e740531c23" translate="yes" xml:space="preserve">
          <source>Exceptions inheriting from &lt;code&gt;system.Defect&lt;/code&gt; are not tracked with the &lt;code&gt;.raises: []&lt;/code&gt; exception tracking mechanism. This is more consistent with the built-in operations. The following code is valid::</source>
          <target state="translated">&lt;code&gt;system.Defect&lt;/code&gt; 에서 상속 된 예외 는 &lt;code&gt;.raises: []&lt;/code&gt; 예외 추적 메커니즘으로 추적되지 않습니다 . 이것은 기본 제공 작업과 더 일치합니다. 다음 코드가 유효합니다. :</target>
        </trans-unit>
        <trans-unit id="6795bd20fab612e8e1a9a0fa71da8097c767dff3" translate="yes" xml:space="preserve">
          <source>Exceptions that indicate any other runtime error that can be caught inherit from &lt;code&gt;system.CatchableError&lt;/code&gt; (which is a subtype of &lt;code&gt;Exception&lt;/code&gt;).</source>
          <target state="translated">잡을 수있는 다른 런타임 오류를 나타내는 예외는 &lt;code&gt;system.CatchableError&lt;/code&gt; ( &lt;code&gt;Exception&lt;/code&gt; 의 하위 유형) 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="fe8c088f39cefe7ffea2e2fbdaf657f345413b6b" translate="yes" xml:space="preserve">
          <source>Exceptions to this rule are types constructed via &lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;proc&lt;/code&gt;. For example, the following types are &lt;strong&gt;not&lt;/strong&gt; view types:</source>
          <target state="translated">이 규칙에 대한 예외는 &lt;code&gt;ptr&lt;/code&gt; 또는 &lt;code&gt;proc&lt;/code&gt; 을 통해 생성 된 유형 입니다. 예를 들어 다음 유형은 보기 유형 이 &lt;strong&gt;아닙니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1d61829f05e5e1694fa50bf814a5c0406c134efd" translate="yes" xml:space="preserve">
          <source>Exchange (key, val)-pairs:</source>
          <target state="translated">교환 (키, 발) 쌍 :</target>
        </trans-unit>
        <trans-unit id="4836528c7d2648c30d84a44aa2a4a12c0e458b57" translate="yes" xml:space="preserve">
          <source>Exclude element &lt;code&gt;y&lt;/code&gt; from the set &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">집합 &lt;code&gt;x&lt;/code&gt; 에서 요소 &lt;code&gt;y&lt;/code&gt; 제외</target>
        </trans-unit>
        <trans-unit id="76761d19259db0809b9797fa0d3af86bdd75a85a" translate="yes" xml:space="preserve">
          <source>Excludes &lt;code&gt;key&lt;/code&gt; from the set &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">제외 &lt;code&gt;key&lt;/code&gt; 세트에서 &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3c6b60c4be5fd466aaf668b933aef669eb62f1f" translate="yes" xml:space="preserve">
          <source>Excludes &lt;code&gt;key&lt;/code&gt; from the set &lt;code&gt;s&lt;/code&gt;. Efficiency: &lt;code&gt;O(n)&lt;/code&gt;.</source>
          <target state="translated">제외 &lt;code&gt;key&lt;/code&gt; 세트에서 &lt;code&gt;s&lt;/code&gt; . 효율성 : &lt;code&gt;O(n)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9671e296d0c1993452b66b1223a2888e3a1ebe68" translate="yes" xml:space="preserve">
          <source>Excludes &lt;code&gt;key&lt;/code&gt; in the set &lt;code&gt;s&lt;/code&gt; and tells if &lt;code&gt;key&lt;/code&gt; was already missing from &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">제외 &lt;code&gt;key&lt;/code&gt; 세트의 &lt;code&gt;s&lt;/code&gt; 와 경우 알려줍니다 &lt;code&gt;key&lt;/code&gt; 이미에서 누락 된 &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7504d3a5f3c0a44612739c4927455b1b76d0c62" translate="yes" xml:space="preserve">
          <source>Excludes &lt;code&gt;key&lt;/code&gt; in the set &lt;code&gt;s&lt;/code&gt; and tells if &lt;code&gt;key&lt;/code&gt; was already missing from &lt;code&gt;s&lt;/code&gt;. Efficiency: O(n).</source>
          <target state="translated">제외 &lt;code&gt;key&lt;/code&gt; 세트의 &lt;code&gt;s&lt;/code&gt; 와 경우 알려줍니다 &lt;code&gt;key&lt;/code&gt; 이미에서 누락 된 &lt;code&gt;s&lt;/code&gt; . 효율성 : O (n).</target>
        </trans-unit>
        <trans-unit id="5d1a6a0dfee883c7a3f66c3ed18e2b4a1bd2536e" translate="yes" xml:space="preserve">
          <source>Excludes &lt;em&gt;key&lt;/em&gt; from the set &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">제외 &lt;em&gt;키&lt;/em&gt; 세트에서 &lt;em&gt;의&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="46f8d91f1c210d2f50acf5779d694e19d5a3ced6" translate="yes" xml:space="preserve">
          <source>Excludes &lt;em&gt;key&lt;/em&gt; from the set &lt;em&gt;s&lt;/em&gt;. Efficiency: O(n).</source>
          <target state="translated">제외 &lt;em&gt;키&lt;/em&gt; 세트에서 &lt;em&gt;의&lt;/em&gt; . 효율 : O (n).</target>
        </trans-unit>
        <trans-unit id="4defbdc5548dfa00e9c2628c31236fc48129545a" translate="yes" xml:space="preserve">
          <source>Excludes &lt;em&gt;key&lt;/em&gt; in the set &lt;em&gt;s&lt;/em&gt; and tells if &lt;em&gt;key&lt;/em&gt; was removed from &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">제외 &lt;em&gt;키&lt;/em&gt; 세트에서 &lt;em&gt;의&lt;/em&gt; 경우는 말한다 &lt;em&gt;키가&lt;/em&gt; 제거 된 &lt;em&gt;의&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="4ef14e257b85d654038cfad08d10ac737dcc9a45" translate="yes" xml:space="preserve">
          <source>Excludes &lt;em&gt;key&lt;/em&gt; in the set &lt;em&gt;s&lt;/em&gt; and tells if &lt;em&gt;key&lt;/em&gt; was removed from &lt;em&gt;s&lt;/em&gt;. Efficiency: O(n).</source>
          <target state="translated">제외 &lt;em&gt;키&lt;/em&gt; 세트에서 &lt;em&gt;의&lt;/em&gt; 경우는 말한다 &lt;em&gt;키가&lt;/em&gt; 제거 된 &lt;em&gt;의&lt;/em&gt; . 효율 : O (n).</target>
        </trans-unit>
        <trans-unit id="d0486d67fb54a42c209d10486f526a357d7781ca" translate="yes" xml:space="preserve">
          <source>Excludes all elements from &lt;code&gt;other&lt;/code&gt; from &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">제외 모든 요소 &lt;code&gt;other&lt;/code&gt; 에서 &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2dd68543d3655b9bcb0e841f27150b50eebd0270" translate="yes" xml:space="preserve">
          <source>Excludes all elements from &lt;em&gt;other&lt;/em&gt; from &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">제외 모든 요소 &lt;em&gt;기타&lt;/em&gt; 에서 &lt;em&gt;의&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="117f6ea430effd8e15fbf3bcad58b6e4918096c4" translate="yes" xml:space="preserve">
          <source>Excludes all elements of &lt;code&gt;other&lt;/code&gt; set from &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 에서 &lt;code&gt;other&lt;/code&gt; 집합 의 모든 요소를 ​​제외합니다 .</target>
        </trans-unit>
        <trans-unit id="713ad64025fff8c01c2c1daefa888fabf9b5bf71" translate="yes" xml:space="preserve">
          <source>Excludes element &lt;code&gt;y&lt;/code&gt; from the set &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">집합 &lt;code&gt;x&lt;/code&gt; 에서 요소 &lt;code&gt;y&lt;/code&gt; 를 제외합니다 .</target>
        </trans-unit>
        <trans-unit id="92991bbdc88c8988100fa83a6f32c8ee20f7ec9e" translate="yes" xml:space="preserve">
          <source>Excludes everything in &lt;em&gt;other&lt;/em&gt; from &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">에서 제외 모든 &lt;em&gt;기타&lt;/em&gt; 에서 &lt;em&gt;의&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="38328ca8d349006226de88ee59d3174ca352086f" translate="yes" xml:space="preserve">
          <source>Excludes the set &lt;code&gt;y&lt;/code&gt; from the set &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">집합 &lt;code&gt;x&lt;/code&gt; 에서 집합 &lt;code&gt;y&lt;/code&gt; 를 제외합니다 .</target>
        </trans-unit>
        <trans-unit id="a2df53ea70d100361d3d9484a43219ffa63491d8" translate="yes" xml:space="preserve">
          <source>Excluding symbols</source>
          <target state="translated">기호 제외</target>
        </trans-unit>
        <trans-unit id="0233eba4e19efdcef5da485af2c2db8b0901f32a" translate="yes" xml:space="preserve">
          <source>Exec</source>
          <target state="translated">Exec</target>
        </trans-unit>
        <trans-unit id="883c3083244b6a387f122c092facd5ecfde90074" translate="yes" xml:space="preserve">
          <source>Exec-time and get/set-time error codesSpecific error codes for UTF-8 validity checksSpecific error codes for UTF-16 validity checksSpecific error codes for UTF-32 validity checksRequest types for pcre_fullinfo()Request types for pcre_config(). Do not re-arrange, in order to remain compatible.Request types for pcre_study(). Do not re-arrange, in order to remain compatible.Bit flags for the pcre[16|32]_extra structure. Do not re-arrange or redefine these bits, just add new ones on the end, in order to remain compatible.TypesThe structure for passing additional data to pcre_exec(). This is defined in such as way as to be extensible. Always add new fields at the end, in order to remain compatible.The structure for passing out data via the pcre_callout_function. We use a structure so that new fields can be added on the end in future versions, without changing the API of the function, thereby allowing old clients to work without modification.User defined callback which provides a stack just before the match starts.</source>
          <target state="translated">실행 시간 및 가져 오기 / 설정 시간 오류 코드 UTF-8 유효성 검사에 대한 특정 오류 코드 UTF-16 유효성 검사에 대한 특정 오류 코드 UTF-32 유효성 검사에 대한 특정 오류 코드 pcre_fullinfo ()에 대한 요청 유형 pcre_config ()에 대한 요청 유형. 호환성을 유지하기 위해 다시 정렬하지 마십시오. pcre_study ()에 대한 요청 유형입니다. pcre [16 | 32] _extra 구조에 대해 비트 플래그가 호환되도록 유지하십시오. 호환성을 유지하려면 이러한 비트를 다시 정렬하거나 재정의하지 말고 끝에 새 비트를 추가하십시오. 유형 pcre_exec ()에 추가 데이터를 전달하는 구조입니다. 이것은 확장 가능한 방식으로 정의됩니다. 호환성을 유지하려면 항상 끝에 새 필드를 추가하십시오. pcre_callout_function을 통해 데이터를 전달하는 구조입니다. 향후 버전에서는 새로운 필드를 추가 할 수 있도록 구조를 사용합니다.함수의 API를 변경하지 않고 이전 클라이언트가 수정없이 작업 할 수 있도록합니다. 사용자 정의 콜백은 일치가 시작되기 직전에 스택을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c9bf150cfd98b5bbddad18454e057c2af6f66ec8" translate="yes" xml:space="preserve">
          <source>Execute SQL query</source>
          <target state="translated">SQL 쿼리 실행</target>
        </trans-unit>
        <trans-unit id="85e041f50aa16a22dee4a39f6f1b43acf2e8cb17" translate="yes" xml:space="preserve">
          <source>Executes &lt;code&gt;command&lt;/code&gt; and returns its error code.</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; 실행 하고 오류 코드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="31baca40e6a53aab4ec8803731b3d1fd62a87366" translate="yes" xml:space="preserve">
          <source>Executes &lt;code&gt;command&lt;/code&gt; and returns its error code. Standard input, output, error streams are inherited from the calling process. This operation is also often called &lt;span id=&quot;system_1&quot;&gt;system&lt;/span&gt;.</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; 실행 하고 오류 코드를 반환합니다. 표준 입력, 출력, 오류 스트림은 호출 프로세스에서 상속됩니다. 이 작업을 &lt;span id=&quot;system_1&quot;&gt;시스템&lt;/span&gt; 이라고도 &lt;span id=&quot;system_1&quot;&gt;합니다&lt;/span&gt; .</target>
        </trans-unit>
        <trans-unit id="0456123c87daef6e82145d36ba14937131d8d863" translate="yes" xml:space="preserve">
          <source>Executes a &lt;span id=&quot;shell-command_1&quot;&gt;shell command&lt;/span&gt;.</source>
          <target state="translated">&lt;span id=&quot;shell-command_1&quot;&gt;쉘 명령을&lt;/span&gt; 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="24cb3dd86f46429da251ac34fc032b18eef26ef6" translate="yes" xml:space="preserve">
          <source>Executes a block of code only once (the first time the block is reached).</source>
          <target state="translated">코드 블록을 한 번만 실행합니다 (블록에 처음 도달 할 때).</target>
        </trans-unit>
        <trans-unit id="f207f4e7d2736cf822b6a070dbb8290b8c96a356" translate="yes" xml:space="preserve">
          <source>Executes a block of code only once (the first time the block is reached). When hot code reloading is enabled, protects top-level code from being re-executed on each module reload.</source>
          <target state="translated">코드 블록을 한 번만 실행합니다 (블록에 처음 도달 할 때). 핫 코드 재로드가 활성화되면 각 모듈 재로드에서 최상위 코드가 다시 실행되지 않도록 보호합니다.</target>
        </trans-unit>
        <trans-unit id="0c8c081fa10bdeac15cedf2315a9ff88a6099a08" translate="yes" xml:space="preserve">
          <source>Executes an external command with the current nim/nimble executable. &lt;code&gt;Command&lt;/code&gt; must not contain the &quot;nim &quot; part.</source>
          <target state="translated">현재 nim / nimble 실행 파일로 외부 명령을 실행합니다. &lt;code&gt;Command&lt;/code&gt; 은 &quot;nim&quot;부분을 포함 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="88adc16b67870e37ed7e791ebc125cfb152fef0a" translate="yes" xml:space="preserve">
          <source>Executes an external process at compile-time and returns its text output (stdout + stderr).</source>
          <target state="translated">컴파일 타임에 외부 프로세스를 실행하고 텍스트 출력 (stdout + stderr)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23be2e59ff95a420ce744d7d4311b1e8059f31f2" translate="yes" xml:space="preserve">
          <source>Executes an external process at compile-time. if &lt;em&gt;input&lt;/em&gt; is not an empty string, it will be passed as a standard input to the executed program.</source>
          <target state="translated">컴파일 타임에 외부 프로세스를 실행합니다. 경우 &lt;em&gt;입력이&lt;/em&gt; 빈 문자열이 아닌, 그것은 실행 된 프로그램의 표준 입력으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="a642e0aab14cf4842e60e384d6694c1d8ae03d10" translate="yes" xml:space="preserve">
          <source>Executes an external process. If the external process terminates with a non-zero exit code, an OSError exception is raised.</source>
          <target state="translated">외부 프로세스를 실행합니다. 외부 프로세스가 0이 아닌 종료 코드로 종료되면 OSError 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b8ce038939c6effd48d4607e6c9ddc1e92e9a33a" translate="yes" xml:space="preserve">
          <source>Executes the commands &lt;code&gt;cmds&lt;/code&gt; in parallel. Creates &lt;code&gt;n&lt;/code&gt; processes that execute in parallel.</source>
          <target state="translated">&lt;code&gt;cmds&lt;/code&gt; 명령 을 병렬로 실행합니다 . 병렬로 실행되는 &lt;code&gt;n&lt;/code&gt; 개의 프로세스를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="472916b1b838ef8d4abf40ad5a21c68935cf0130" translate="yes" xml:space="preserve">
          <source>Executes the query (typically &quot;INSERT&quot;) and returns the generated ID for the row or -1 in case of an error.</source>
          <target state="translated">쿼리를 실행하고 (일반적으로 &quot;INSERT&quot;) 행에 대해 생성 된 ID를 반환하거나 오류가 발생하면 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bc2d188ac9262918f80c754587253c30573bd801" translate="yes" xml:space="preserve">
          <source>Executes the query (typically &quot;INSERT&quot;) and returns the generated ID for the row.</source>
          <target state="translated">쿼리 (일반적으로 &quot;INSERT&quot;)를 실행하고 행에 대해 생성 된 ID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a939b5da4057b3fe5f60a99b99d1d3c26d785618" translate="yes" xml:space="preserve">
          <source>Executes the query (typically &quot;UPDATE&quot;) and returns the number of affected rows.</source>
          <target state="translated">쿼리 (일반적으로 &quot;UPDATE&quot;)를 실행하고 영향을받는 행 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="97e7f2cd9432445064354c0efa963f3c28bb34da" translate="yes" xml:space="preserve">
          <source>Executes the query and iterates over the result dataset.</source>
          <target state="translated">쿼리를 실행하고 결과 데이터 집합을 반복합니다.</target>
        </trans-unit>
        <trans-unit id="3441d5c8741fc016bb44b2fc85745e6f79ba3e81" translate="yes" xml:space="preserve">
          <source>Executes the query and raises EDB if not successful.</source>
          <target state="translated">쿼리를 실행하고 실패하면 EDB를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="eb3b2dee33d041dbd8545df5da9adc0476f152b5" translate="yes" xml:space="preserve">
          <source>Executes the query and raises a &lt;code&gt;DbError&lt;/code&gt; exception if not successful.</source>
          <target state="translated">쿼리를 실행하고 성공하지 못한 경우 &lt;code&gt;DbError&lt;/code&gt; 예외를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="99ff2cddde8a0e99076b6f6bcc05f230fdf6ddb4" translate="yes" xml:space="preserve">
          <source>Executes the query and returns the first column of the first row of the result dataset. Returns &quot;&quot; if the dataset contains no rows or the database value is NULL.</source>
          <target state="translated">쿼리를 실행하고 결과 데이터 집합의 첫 번째 행의 첫 번째 열을 반환합니다. 데이터 세트에 행이 없거나 데이터베이스 값이 NULL 인 경우 &quot;&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="70e261fda9ac64c02b4c33098688f557acf3d499" translate="yes" xml:space="preserve">
          <source>Executes the query and returns the first column of the first row of the result dataset. Returns &lt;code&gt;&quot;&quot;&lt;/code&gt; if the dataset contains no rows or the database value is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">쿼리를 실행하고 결과 데이터 집합 첫 번째 행의 첫 번째 열을 반환합니다. 데이터 세트에 행이 없거나 데이터베이스 값이 &lt;code&gt;NULL&lt;/code&gt; 인 경우 &lt;code&gt;&quot;&quot;&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="22ba79be578f4c3bc12771e5102181dd9f69d5a4" translate="yes" xml:space="preserve">
          <source>Executes the query and returns the whole result dataset.</source>
          <target state="translated">쿼리를 실행하고 전체 결과 데이터 집합을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="35dd6709d9902fb1c03e5a1a8cb608cc5c77fb9f" translate="yes" xml:space="preserve">
          <source>Expand tab characters in &lt;code&gt;s&lt;/code&gt; replacing them by spaces.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 에서 탭 문자를 확장 하여 공백으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="c170b5e47b6f6bbfdc7fa2f0ab77d2c9b55606c8" translate="yes" xml:space="preserve">
          <source>Expand tab characters in &lt;em&gt;s&lt;/em&gt; by &lt;em&gt;tabSize&lt;/em&gt; spaces</source>
          <target state="translated">에서 탭 문자 확장 &lt;em&gt;들&lt;/em&gt; 에 의해 &lt;em&gt;tabSize의&lt;/em&gt; 공간</target>
        </trans-unit>
        <trans-unit id="54b32caebb707479c10a9bc5b5e476b85dfed50d" translate="yes" xml:space="preserve">
          <source>Expands &lt;code&gt;~&lt;/code&gt; or a path starting with &lt;code&gt;~/&lt;/code&gt; to a full path, replacing &lt;code&gt;~&lt;/code&gt; with &lt;a href=&quot;#getHomeDir&quot;&gt;getHomeDir()&lt;/a&gt; (otherwise returns &lt;code&gt;path&lt;/code&gt; unmodified).</source>
          <target state="translated">확장합니다 &lt;code&gt;~&lt;/code&gt; 또는 경로로 시작 &lt;code&gt;~/&lt;/code&gt; 교체, 전체 경로로 &lt;code&gt;~&lt;/code&gt; 와 &lt;a href=&quot;#getHomeDir&quot;&gt;) getHomeDir (&lt;/a&gt; (그렇지 않으면 반환 &lt;code&gt;path&lt;/code&gt; 수정되지 않은).</target>
        </trans-unit>
        <trans-unit id="28841a5aef9bd2f282281352d9d0f3b870e4f455" translate="yes" xml:space="preserve">
          <source>Expands &lt;code&gt;~&lt;/code&gt; or a path starting with &lt;code&gt;~/&lt;/code&gt; to a full path, replacing &lt;code&gt;~&lt;/code&gt; with &lt;code&gt;getHomeDir()&lt;/code&gt; (otherwise returns &lt;code&gt;path&lt;/code&gt; unmodified).</source>
          <target state="translated">확장합니다 &lt;code&gt;~&lt;/code&gt; 또는 경로로 시작 &lt;code&gt;~/&lt;/code&gt; 교체, 전체 경로로 &lt;code&gt;~&lt;/code&gt; 와 &lt;code&gt;getHomeDir()&lt;/code&gt; (그렇지 않으면 반환 &lt;code&gt;path&lt;/code&gt; 수정되지 않은).</target>
        </trans-unit>
        <trans-unit id="4f7f911eb6d6408692ac0df07b787cd78ad1f159" translate="yes" xml:space="preserve">
          <source>Expands one level of macro - useful for debugging. Can be used to inspect what happens when a macro call is expanded, without altering its result.</source>
          <target state="translated">한 수준의 매크로를 확장하여 디버깅에 유용합니다. 결과를 변경하지 않고 매크로 호출이 확장 될 때 발생하는 상황을 검사하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="638867e94401b81f6df838ecabfbf9669b4964e2" translate="yes" xml:space="preserve">
          <source>Expands operating GC stack range to &lt;code&gt;theStackBottom&lt;/code&gt;. Does nothing if current stack bottom is already lower than &lt;code&gt;theStackBottom&lt;/code&gt;.</source>
          <target state="translated">운영 GC 스택 범위를 &lt;code&gt;theStackBottom&lt;/code&gt; 까지 확장 합니다. 현재 스택 하단이 이미 &lt;code&gt;theStackBottom&lt;/code&gt; 보다 낮은 경우 아무 작업도 수행하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="101833a434fba0cfc969d68876ccbc6341c4fa47" translate="yes" xml:space="preserve">
          <source>Expands operating GC stack range to &lt;em&gt;theStackBottom&lt;/em&gt;. Does nothing if current stack bottom is already lower than &lt;em&gt;theStackBottom&lt;/em&gt;.</source>
          <target state="translated">작동 GC 스택 범위를 &lt;em&gt;StackBottom으로&lt;/em&gt; 확장합니다 . 현재 스택 바닥이 이미 &lt;em&gt;StackBottom&lt;/em&gt; 보다 낮은 경우 아무 작업도 수행하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="05c687bf8951ee94973a94b862948b27549a2868" translate="yes" xml:space="preserve">
          <source>Expands to &lt;code&gt;true&lt;/code&gt; if expression &lt;code&gt;n&lt;/code&gt; which is expected to be &lt;code&gt;nnkDotExpr&lt;/code&gt; (if checking a field), a proc or a type has custom pragma &lt;code&gt;cp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nnkDotExpr&lt;/code&gt; 로 예상되는 표현식 &lt;code&gt;n&lt;/code&gt; (필드를 확인하는 경우), proc 또는 유형에 사용자 정의 pragma &lt;code&gt;cp&lt;/code&gt; 가있는 경우 &lt;code&gt;true&lt;/code&gt; 로 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="cdfd59c2674c5e3dc8bf54a6b2ebf8c3fc009b2c" translate="yes" xml:space="preserve">
          <source>Expands to &lt;em&gt;true&lt;/em&gt; if expression &lt;em&gt;n&lt;/em&gt; which is expected to be &lt;em&gt;nnkDotExpr&lt;/em&gt; (if checking a field), a proc or a type has custom pragma &lt;em&gt;cp&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;nnkDotExpr&lt;/em&gt; (필드를 검사하는 경우), proc 또는 유형에 사용자 정의 pragma &lt;em&gt;cp&lt;/em&gt; 가있는 표현식 &lt;em&gt;n&lt;/em&gt; 이 &lt;em&gt;true 인&lt;/em&gt; 경우 &lt;em&gt;true로&lt;/em&gt; 확장됩니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d33edfa104c5642f6c4875c71d0d361dac4e6023" translate="yes" xml:space="preserve">
          <source>Expands to value of custom pragma &lt;code&gt;cp&lt;/code&gt; of expression &lt;code&gt;n&lt;/code&gt; which is expected to be &lt;code&gt;nnkDotExpr&lt;/code&gt;, a proc or a type.</source>
          <target state="translated">&lt;code&gt;nnkDotExpr&lt;/code&gt; , proc 또는 유형 이 될 것으로 예상되는 표현식 &lt;code&gt;n&lt;/code&gt; 의 사용자 정의 pragma &lt;code&gt;cp&lt;/code&gt; 값으로 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="55bd87c3849e895c3502e5702bad1cee6ad854d7" translate="yes" xml:space="preserve">
          <source>Expands to value of custom pragma &lt;em&gt;cp&lt;/em&gt; of expression &lt;em&gt;n&lt;/em&gt; which is expected to be &lt;em&gt;nnkDotExpr&lt;/em&gt;, a proc or a type.</source>
          <target state="translated">&lt;em&gt;nnkDotExpr&lt;/em&gt; , proc 또는 유형 인 것으로 예상되는 표현식 &lt;em&gt;n&lt;/em&gt; 의 사용자 정의 pragma &lt;em&gt;cp&lt;/em&gt; 값으로 확장됩니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9a66d761cbf7c7fd54dbef5d8a88c702863e7ca9" translate="yes" xml:space="preserve">
          <source>Experimental &quot;method call&quot; operator for type JsAssoc. Takes the name of a method of the JavaScript object (&lt;code&gt;field&lt;/code&gt;) and calls it with &lt;code&gt;args&lt;/code&gt; as arguments. Here, everything is typechecked, so you do not have to worry about &lt;code&gt;undefined&lt;/code&gt; return values.</source>
          <target state="translated">JsAssoc 유형에 대한 실험적인 &quot;메서드 호출&quot;연산자. JavaScript 객체 ( &lt;code&gt;field&lt;/code&gt; ) 의 메서드 이름을 &lt;code&gt;args&lt;/code&gt; 로 args 를 사용 하여 호출합니다 . 여기에서는 모든 것이 유형 검사되므로 &lt;code&gt;undefined&lt;/code&gt; 반환 값 에 대해 걱정할 필요가 없습니다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇㅋ</target>
        </trans-unit>
        <trans-unit id="707b65561f251ee73412c1e241b27b70f0900c62" translate="yes" xml:space="preserve">
          <source>Experimental &quot;method call&quot; operator for type JsAssoc. Takes the name of a method of the JavaScript object (&lt;em&gt;field&lt;/em&gt;) and calls it with &lt;em&gt;args&lt;/em&gt; as arguments. Here, everything is typechecked, so you do not have to worry about &lt;em&gt;undefined&lt;/em&gt; return values.</source>
          <target state="translated">JsAssoc 유형에 대한 실험적인 &quot;방법 호출&quot;연산자. JavaScript 객체 ( &lt;em&gt;field&lt;/em&gt; ) 의 메소드 이름을 &lt;em&gt;인수&lt;/em&gt; 로 인수로 사용 하여 호출합니다 . 여기에서 모든 것이 유형 검사되므로 &lt;em&gt;정의되지 않은&lt;/em&gt; 반환 값 에 대해 걱정할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c9fdaaddd6bb5c47951d0121b6943e6232811c43" translate="yes" xml:space="preserve">
          <source>Experimental &quot;method call&quot; operator for type JsObject. Takes the name of a method of the JavaScript object (&lt;code&gt;field&lt;/code&gt;) and calls it with &lt;code&gt;args&lt;/code&gt; as arguments, returning a JsObject (which may be discarded, and may be &lt;code&gt;undefined&lt;/code&gt;, if the method does not return anything, so be careful when using this.)</source>
          <target state="translated">JsObject 유형에 대한 실험적인 &quot;메서드 호출&quot;연산자입니다. JavaScript 객체 ( &lt;code&gt;field&lt;/code&gt; ) 의 메서드 이름을 가져와 인수 로 &lt;code&gt;args&lt;/code&gt; 를 사용 하여 호출 하여 JsObject를 반환합니다 ( 메서드가 아무것도 반환하지 않는 경우 폐기 될 수 있으며 &lt;code&gt;undefined&lt;/code&gt; 않을 수 있으므로 이것을 사용할 때주의하십시오. )</target>
        </trans-unit>
        <trans-unit id="32b393dec0eaed1959f38f8d3343d100759d9ba8" translate="yes" xml:space="preserve">
          <source>Experimental &quot;method call&quot; operator for type JsObject. Takes the name of a method of the JavaScript object (&lt;em&gt;field&lt;/em&gt;) and calls it with &lt;em&gt;args&lt;/em&gt; as arguments, returning a JsObject (which may be discarded, and may be &lt;em&gt;undefined&lt;/em&gt;, if the method does not return anything, so be careful when using this.)</source>
          <target state="translated">JsObject 유형에 대한 실험적인 &quot;방법 호출&quot;연산자. JavaScript 객체 ( &lt;em&gt;field&lt;/em&gt; ) 의 메소드 이름을 &lt;em&gt;인수&lt;/em&gt; 로 인수로 사용 하여 &lt;em&gt;인수&lt;/em&gt; 로 호출 하여 JsObject를 반환합니다 ( 메소드가 아무것도 반환하지 않으면 버릴 수 있고 &lt;em&gt;정의되지&lt;/em&gt; 않을 수 있음) .이를 사용할 때주의하십시오. )</target>
        </trans-unit>
        <trans-unit id="3decd77e37fd679817a08428925a733a377afc8f" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (get) for type JsAssoc. Returns the value of a property of name &lt;code&gt;field&lt;/code&gt; from a JsObject &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">JsAssoc 유형에 대한 실험적인 점 접근 자 (get)입니다. JsObject &lt;code&gt;x&lt;/code&gt; 에서 이름 &lt;code&gt;field&lt;/code&gt; 의 속성 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b842160d9fc98509ceb331b56069bb8cad25a6b4" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (get) for type JsAssoc. Returns the value of a property of name &lt;em&gt;field&lt;/em&gt; from a JsObject &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">JsAssoc 유형의 실험용 도트 접근 자 (get). JsObject &lt;em&gt;x&lt;/em&gt; 에서 name &lt;em&gt;필드&lt;/em&gt; 의 속성 값을 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a624314467fb5949e48f8e3fd826e2fd04b2c64" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (get) for type JsObject. Returns the value of a property of name &lt;code&gt;field&lt;/code&gt; from a JsObject &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">JsObject 유형에 대한 실험적인 점 접근 자 (get)입니다. JsObject &lt;code&gt;x&lt;/code&gt; 에서 이름 &lt;code&gt;field&lt;/code&gt; 의 속성 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="760eda2e38d22e7b04138a0c9fa2054af4ea2593" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (get) for type JsObject. Returns the value of a property of name &lt;em&gt;field&lt;/em&gt; from a JsObject &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">JsObject 유형의 실험용 도트 접근 자 (get)입니다. JsObject &lt;em&gt;x&lt;/em&gt; 에서 name &lt;em&gt;필드&lt;/em&gt; 의 속성 값을 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="77401b404845b0aa7d1ab501f164b45ece6a3e17" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (set) for type JsAssoc. Sets the value of a property of name &lt;code&gt;field&lt;/code&gt; in a JsObject &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">JsAssoc 유형에 대한 실험적인 점 접근 자 (세트)입니다. 세트 이름의 속성 값 &lt;code&gt;field&lt;/code&gt; JSObject가에가 &lt;code&gt;x&lt;/code&gt; 에 &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7a1f5386119ad377a8afd58045628698d382a5b" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (set) for type JsAssoc. Sets the value of a property of name &lt;em&gt;field&lt;/em&gt; in a JsObject &lt;em&gt;x&lt;/em&gt; to &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="translated">JsAssoc 유형의 실험용 도트 접근 자 (세트) 세트 이름의 속성 값 &lt;em&gt;필드&lt;/em&gt; JSObject가에가 &lt;em&gt;X&lt;/em&gt; 에 &lt;em&gt;값&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="20052f3edc03ff1856283af752460b09fb15c4d2" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (set) for type JsObject. Sets the value of a property of name &lt;code&gt;field&lt;/code&gt; in a JsObject &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">JsObject 유형에 대한 실험적인 점 접근 자 (세트)입니다. 세트 이름의 속성 값 &lt;code&gt;field&lt;/code&gt; JSObject가에가 &lt;code&gt;x&lt;/code&gt; 에 &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1c35223f6c1e376aad28ae4008182c90920af9f9" translate="yes" xml:space="preserve">
          <source>Experimental dot accessor (set) for type JsObject. Sets the value of a property of name &lt;em&gt;field&lt;/em&gt; in a JsObject &lt;em&gt;x&lt;/em&gt; to &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="translated">JsObject 유형의 실험용 도트 접근 자 (세트) 세트 이름의 속성 값 &lt;em&gt;필드&lt;/em&gt; JSObject가에가 &lt;em&gt;X&lt;/em&gt; 에 &lt;em&gt;값&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b740040c519e5311f9807d22753640f4738c3a1e" translate="yes" xml:space="preserve">
          <source>Experimental feature: use {.experimental: &quot;dynamicBindSym&quot;.} to activate it. If called from template / regular code, &lt;code&gt;ident&lt;/code&gt; and &lt;code&gt;rule&lt;/code&gt; must be constant expression / literal value. If called from macros / compile time procs / static blocks, &lt;code&gt;ident&lt;/code&gt; and &lt;code&gt;rule&lt;/code&gt; can be VM computed value.</source>
          <target state="translated">실험 기능 : {.experimental : &quot;dynamicBindSym&quot;.}을 사용하여 활성화합니다. 템플릿 / 정규 코드에서 호출되는 경우 &lt;code&gt;ident&lt;/code&gt; 및 &lt;code&gt;rule&lt;/code&gt; 은 상수 표현식 / 리터럴 값이어야합니다. 매크로 / 컴파일 시간 프로세스 / 정적 블록에서 호출하면 &lt;code&gt;ident&lt;/code&gt; 및 &lt;code&gt;rule&lt;/code&gt; 이 VM 계산 값이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de2b7b84aae6f849cb5bd02f2bb3ffcc27918958" translate="yes" xml:space="preserve">
          <source>Exponent &lt;code&gt;y&lt;/code&gt; must be non-negative, use &lt;a href=&quot;#pow,float64,float64&quot;&gt;pow proc&lt;/a&gt; for negative exponents.</source>
          <target state="translated">지수 &lt;code&gt;y&lt;/code&gt; 는 음수가 아니어야합니다 . 음의 지수 에는 &lt;a href=&quot;#pow,float64,float64&quot;&gt;pow proc&lt;/a&gt; 을 사용 하세요.</target>
        </trans-unit>
        <trans-unit id="c3a5cb19fe1b5d986ff214b2b92f69b3dc9e121f" translate="yes" xml:space="preserve">
          <source>Exponent notation. Prints the number in scientific notation using the letter 'e' to indicate the exponent.</source>
          <target state="translated">지수 표기법. 지수를 나타 내기 위해 문자 'e'를 사용하여 과학적 표기법으로 숫자를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="3e943cba043e68e3445abb572e5842ae2d96a804" translate="yes" xml:space="preserve">
          <source>Exponent notation. Same as 'e' except it converts the number to uppercase.</source>
          <target state="translated">지수 표기법. 숫자를 대문자로 변환한다는 점을 제외하고 'e'와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b69fabe72a1a8ef94ccbaed90b1ff760672656a7" translate="yes" xml:space="preserve">
          <source>Export marker</source>
          <target state="translated">마커 내보내기</target>
        </trans-unit>
        <trans-unit id="2b5379c685f6c0429617cc976cd0962ec294bdc1" translate="yes" xml:space="preserve">
          <source>Export statement</source>
          <target state="translated">수출 명세서</target>
        </trans-unit>
        <trans-unit id="0d6292d296eb6750e854435a4eb3143ce95877ca" translate="yes" xml:space="preserve">
          <source>ExportableSymKinds:</source>
          <target state="translated">ExportableSymKinds:</target>
        </trans-unit>
        <trans-unit id="aba10a2b2cb7d015177f5430377472f0d4f27b19" translate="yes" xml:space="preserve">
          <source>Exportc pragma</source>
          <target state="translated">엑스포트 프라 그마</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="a4d5044088fcfbc187845b22e1fdd4d5383492b0" translate="yes" xml:space="preserve">
          <source>Exposes the list of requirements for read and write accesses.</source>
          <target state="translated">읽기 및 쓰기 액세스에 대한 요구 사항 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="165b224a7786a3f140439f36e19095d95a659a92" translate="yes" xml:space="preserve">
          <source>ExprAlwaysX</source>
          <target state="translated">ExprAlwaysX</target>
        </trans-unit>
        <trans-unit id="5cdc37794c3d9d40c04fc1095a008030e492768c" translate="yes" xml:space="preserve">
          <source>Expression Macros</source>
          <target state="translated">식 매크로</target>
        </trans-unit>
        <trans-unit id="aeed2acfc308499dc3ff29f3797cd488a0696166" translate="yes" xml:space="preserve">
          <source>Expression evaluation</source>
          <target state="translated">식 평가</target>
        </trans-unit>
        <trans-unit id="f70b3e8217b43930f2fdd79cffb903ca5b1eed9a" translate="yes" xml:space="preserve">
          <source>ExtendedContext</source>
          <target state="translated">ExtendedContext</target>
        </trans-unit>
        <trans-unit id="923b3a2c7de4f149efbe34807f7e5b279ac46236" translate="yes" xml:space="preserve">
          <source>Extern pragma</source>
          <target state="translated">인턴 프라 그마</target>
        </trans-unit>
        <trans-unit id="47bdcf155b88b88eb2eaf1535f4e8de526144860" translate="yes" xml:space="preserve">
          <source>Extra headers can be specified and must be separated by &lt;code&gt;\c\L&lt;/code&gt;</source>
          <target state="translated">추가 헤더를 지정할 수 있으며 &lt;code&gt;\c\L&lt;/code&gt; 로 구분해야합니다.</target>
        </trans-unit>
        <trans-unit id="8c02377f98d45f16599d240fba553875971cb7e7" translate="yes" xml:space="preserve">
          <source>Extra headers can be specified and must be separated by &lt;code&gt;\c\L&lt;/code&gt;.</source>
          <target state="translated">추가 헤더를 지정할 수 있으며 &lt;code&gt;\c\L&lt;/code&gt; 로 구분해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5624e5ba70b19909079774bf5bf04be3c2f262c6" translate="yes" xml:space="preserve">
          <source>Extracts the filename of a given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;path&lt;/code&gt; 의 파일 이름을 추출합니다 .</target>
        </trans-unit>
        <trans-unit id="f7875459efed3e47169700cfc7f4def832c31fcb" translate="yes" xml:space="preserve">
          <source>Extracts the filename of a given &lt;em&gt;path&lt;/em&gt;. This is the same as &lt;code&gt;name &amp;amp; ext&lt;/code&gt; from &lt;code&gt;splitFile(path)&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;em&gt;경로&lt;/em&gt; 의 파일 이름을 추출합니다 . 이것과 동일 &lt;code&gt;name &amp;amp; ext&lt;/code&gt; 로부터 &lt;code&gt;splitFile(path)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d03f8f38a9716c8c78ff0c38b2858ae0fb6797d7" translate="yes" xml:space="preserve">
          <source>Extracts the red/green/blue components of the color &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">색상 &lt;code&gt;a&lt;/code&gt; 의 빨강 / 녹색 / 파랑 구성 요소를 추출합니다 .</target>
        </trans-unit>
        <trans-unit id="6f59b9495802c90412c4f15dd902bf181b7efbdf" translate="yes" xml:space="preserve">
          <source>FF:</source>
          <target state="translated">FF:</target>
        </trans-unit>
        <trans-unit id="6fa04ffd631692678c8d6d8918a0701369042b57" translate="yes" xml:space="preserve">
          <source>FFI</source>
          <target state="translated">FFI</target>
        </trans-unit>
        <trans-unit id="f266b66638604c25230d12ef3de012f44d3f156c" translate="yes" xml:space="preserve">
          <source>FIXME: &lt;strong&gt;Disclaimer&lt;/strong&gt;: This code is not well tested, may be very unsafe and prone to security vulnerabilities.</source>
          <target state="translated">FIXME : &lt;strong&gt;면책 조항&lt;/strong&gt; :이 코드는 잘 테스트되지 않았으며 매우 안전하지 않으며 보안 취약성이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ce250988c151a25dd04cbedd269a1ee3c44a742" translate="yes" xml:space="preserve">
          <source>Fast check whether &lt;code&gt;x&lt;/code&gt; is nil. This is sometimes more efficient than &lt;code&gt;== nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 가 nil 인지 빠르게 확인하십시오 . 이것은 때때로 &lt;code&gt;== nil&lt;/code&gt; 보다 더 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="a156208983e39fa49f0a27d444e15f239a741624" translate="yes" xml:space="preserve">
          <source>Fast check whether &lt;em&gt;x&lt;/em&gt; is nil. This is sometimes more efficient than &lt;code&gt;== nil&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt; 가 nil 인지 빨리 확인하십시오 . 이것은 때때로 &lt;code&gt;== nil&lt;/code&gt; 보다 더 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="9ecd6e6559a2e18c142fe23f93d170066df103c3" translate="yes" xml:space="preserve">
          <source>Fast sumation functions.</source>
          <target state="translated">빠른 합계 기능.</target>
        </trans-unit>
        <trans-unit id="547d124e8bc5ba4779d4259b47b642e1c3acc7cb" translate="yes" xml:space="preserve">
          <source>Fast version of a push followed by a pop.</source>
          <target state="translated">푸시의 빠른 버전과 팝.</target>
        </trans-unit>
        <trans-unit id="c02d8af0ddc22e526cdea228d5a0ac51aececef3" translate="yes" xml:space="preserve">
          <source>Fastcall means different things to different C compilers. One gets whatever the C &lt;code&gt;__fastcall&lt;/code&gt; means.</source>
          <target state="translated">Fastcall은 다른 C 컴파일러와 다른 것을 의미합니다. C &lt;code&gt;__fastcall&lt;/code&gt; 의 의미 가 무엇이든 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24852a9eb0e28a08c2651f05f0baaba079961e6c" translate="yes" xml:space="preserve">
          <source>Fatal error messages usually indicate that the application cannot continue to run and will exit due to a fatal condition. This template only logs the message, and it is the application's responsibility to exit properly.</source>
          <target state="translated">치명적 오류 메시지는 일반적으로 응용 프로그램을 계속 실행할 수 없으며 치명적 조건으로 인해 종료됨을 나타냅니다. 이 템플릿은 메시지 만 기록하며, 제대로 종료하는 것은 응용 프로그램의 책임입니다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="39e88af1a3199e2a35f0e74a52743a1dda405459" translate="yes" xml:space="preserve">
          <source>Feature.callOperator</source>
          <target state="translated">Feature.callOperator</target>
        </trans-unit>
        <trans-unit id="bf358750fbcf050de266994381ac66338d30a5bb" translate="yes" xml:space="preserve">
          <source>Feature.caseStmtMacros</source>
          <target state="translated">Feature.caseStmtMacros</target>
        </trans-unit>
        <trans-unit id="ad8686e80eead564713fe13409923c4a3a7f820b" translate="yes" xml:space="preserve">
          <source>Feature.codeReordering</source>
          <target state="translated">Feature.codeReordering</target>
        </trans-unit>
        <trans-unit id="179880d96bb7350ba302dadba1b34747e369c642" translate="yes" xml:space="preserve">
          <source>Feature.compiletimeFFI</source>
          <target state="translated">Feature.compiletimeFFI</target>
        </trans-unit>
        <trans-unit id="83cf38d8076150f95808d499bdae2e48b0e9762f" translate="yes" xml:space="preserve">
          <source>Feature.destructor</source>
          <target state="translated">Feature.destructor</target>
        </trans-unit>
        <trans-unit id="e253f9b1ab36461aed17175543241a40da150bcf" translate="yes" xml:space="preserve">
          <source>Feature.dotOperators</source>
          <target state="translated">Feature.dotOperators</target>
        </trans-unit>
        <trans-unit id="8b0c0f4a08cec1717f2d8eb02eaab71c474f53a4" translate="yes" xml:space="preserve">
          <source>Feature.dynamicBindSym</source>
          <target state="translated">Feature.dynamicBindSym</target>
        </trans-unit>
        <trans-unit id="eb3c6d43301bb49303f1ad27f111bb163781c02b" translate="yes" xml:space="preserve">
          <source>Feature.forLoopMacros</source>
          <target state="translated">Feature.forLoopMacros</target>
        </trans-unit>
        <trans-unit id="fc6b36b9b8cb870c017594b54ecf10fd9f29e765" translate="yes" xml:space="preserve">
          <source>Feature.implicitDeref</source>
          <target state="translated">Feature.implicitDeref</target>
        </trans-unit>
        <trans-unit id="94d17bb739e9add3c9d876869f1f205188676807" translate="yes" xml:space="preserve">
          <source>Feature.notnil</source>
          <target state="translated">Feature.notnil</target>
        </trans-unit>
        <trans-unit id="09c06629187d51ed74796f23c973c7a0d43466f5" translate="yes" xml:space="preserve">
          <source>Feature.parallel</source>
          <target state="translated">Feature.parallel</target>
        </trans-unit>
        <trans-unit id="94a7b111e873984f90c8ee69cc7346f75b6553c0" translate="yes" xml:space="preserve">
          <source>Feature.strictFuncs</source>
          <target state="translated">Feature.strictFuncs</target>
        </trans-unit>
        <trans-unit id="254b72102ac5705557bffdb54673b5263549e1b2" translate="yes" xml:space="preserve">
          <source>Feature.views</source>
          <target state="translated">Feature.views</target>
        </trans-unit>
        <trans-unit id="0c4d2543a65683cf9e293c0557404b0522359c3b" translate="yes" xml:space="preserve">
          <source>Feature.vmopsDanger</source>
          <target state="translated">Feature.vmopsDanger</target>
        </trans-unit>
        <trans-unit id="bee3179a42ac559dae89d926955f50fd9bbbb7f1" translate="yes" xml:space="preserve">
          <source>Feature:</source>
          <target state="translated">Feature:</target>
        </trans-unit>
        <trans-unit id="62b8c956d8c46c826db42f2f2000ce296b187497" translate="yes" xml:space="preserve">
          <source>Features or modules that the JavaScript platform does not support are not available. This includes:</source>
          <target state="translated">JavaScript 플랫폼이 지원하지 않는 기능 또는 모듈을 사용할 수 없습니다. 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="cb0b16a42883b77ed0dcd72aca8625e73fba7400" translate="yes" xml:space="preserve">
          <source>Field designators of a variable of the given tuple/object type.</source>
          <target state="translated">주어진 튜플 / 객체 유형의 변수에 대한 필드 지정자.</target>
        </trans-unit>
        <trans-unit id="59aae2d19b7a556460f9b4b1660df0564835f06d" translate="yes" xml:space="preserve">
          <source>Field documentation comments can be added to fields like so:</source>
          <target state="translated">필드 문서 주석은 다음과 같이 필드에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2423ac62293a7c77a827ece887a8d01b8a3f37fe" translate="yes" xml:space="preserve">
          <source>File Reader constructor</source>
          <target state="translated">파일 판독기 생성자</target>
        </trans-unit>
        <trans-unit id="956723698bae79334f6638aaa8f17e19c64236af" translate="yes" xml:space="preserve">
          <source>File access permission, modelled after UNIX.</source>
          <target state="translated">UNIX를 모델로 한 파일 액세스 권한.</target>
        </trans-unit>
        <trans-unit id="df8dfb1a40f7caddd6202eab6c059f8eafeffd9e" translate="yes" xml:space="preserve">
          <source>File number of stderr;</source>
          <target state="translated">stderr의 파일 번호;</target>
        </trans-unit>
        <trans-unit id="aa8b3dc326ab82a2ed3d67111913dce5ca2eb733" translate="yes" xml:space="preserve">
          <source>File number of stdin;</source>
          <target state="translated">stdin의 파일 번호;</target>
        </trans-unit>
        <trans-unit id="006805ebc2fae21c430f8d33e716fe4291281be7" translate="yes" xml:space="preserve">
          <source>File number of stdout;</source>
          <target state="translated">stdout의 파일 번호;</target>
        </trans-unit>
        <trans-unit id="216bd47b1478b72ee8624fb3b9b046d8f90e4a72" translate="yes" xml:space="preserve">
          <source>FileIndex:</source>
          <target state="translated">FileIndex:</target>
        </trans-unit>
        <trans-unit id="1ab7c370644fce82686732b44a2decd5eff60798" translate="yes" xml:space="preserve">
          <source>FileInfo object</source>
          <target state="translated">FileInfo 객체</target>
        </trans-unit>
        <trans-unit id="67ca9790a64293a4a3e02d89aae27f718e0525d1" translate="yes" xml:space="preserve">
          <source>FileLogger</source>
          <target state="translated">FileLogger</target>
        </trans-unit>
        <trans-unit id="8af9bd2b736795fd27a4d6493070b23b2f0fac1e" translate="yes" xml:space="preserve">
          <source>FilePermission enum</source>
          <target state="translated">FilePermission 열거 형</target>
        </trans-unit>
        <trans-unit id="1cf0c0a04ffb90b194d341f015c2d8ca51b84297" translate="yes" xml:space="preserve">
          <source>FileStream example</source>
          <target state="translated">FileStream 예</target>
        </trans-unit>
        <trans-unit id="d51c7788386446fc4a11b50814211588e2baf509" translate="yes" xml:space="preserve">
          <source>Filename globbing. Use &lt;a href=&quot;os#glob_1&quot;&gt;os.walkPattern()&lt;/a&gt; and similar.</source>
          <target state="translated">파일 이름 globbing. &lt;a href=&quot;os#glob_1&quot;&gt;os.walkPattern ()&lt;/a&gt; 등을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca217b44785c62041332f5e1a90c0ba6b31e27a3" translate="yes" xml:space="preserve">
          <source>FilenameOption.foAbs</source>
          <target state="translated">FilenameOption.foAbs</target>
        </trans-unit>
        <trans-unit id="c60f91e317134aece81d038ec4c9e934520b0068" translate="yes" xml:space="preserve">
          <source>FilenameOption.foMagicSauce</source>
          <target state="translated">FilenameOption.foMagicSauce</target>
        </trans-unit>
        <trans-unit id="b5444305534acab3a29a474a6b155c911b683b3a" translate="yes" xml:space="preserve">
          <source>FilenameOption.foName</source>
          <target state="translated">FilenameOption.foName</target>
        </trans-unit>
        <trans-unit id="89461a8bd33ae71a0b2c5e626284c25c034b1458" translate="yes" xml:space="preserve">
          <source>FilenameOption.foRelProject</source>
          <target state="translated">FilenameOption.foRelProject</target>
        </trans-unit>
        <trans-unit id="97323ac608abf7e50793f63e60ca1bebad998bb0" translate="yes" xml:space="preserve">
          <source>FilenameOption.foStacktrace</source>
          <target state="translated">FilenameOption.foStacktrace</target>
        </trans-unit>
        <trans-unit id="f52bdfc2ce9a77e2b85cb83c0948b2b5cd179802" translate="yes" xml:space="preserve">
          <source>FilenameOption:</source>
          <target state="translated">FilenameOption:</target>
        </trans-unit>
        <trans-unit id="c46373a577413707e84b99ca0fd9139ae73282cb" translate="yes" xml:space="preserve">
          <source>Filenames for modules found in the standard library will be named &lt;code&gt;stdlib_module.c&lt;/code&gt;. Unless you are doing something special, you will end up with at least &lt;code&gt;stdlib_system.c&lt;/code&gt;, since the &lt;a href=&quot;system&quot;&gt;system module&lt;/a&gt; is always imported automatically. Same for the &lt;a href=&quot;hashes&quot;&gt;hashes module&lt;/a&gt; which will be named &lt;code&gt;stdlib_hashes.c&lt;/code&gt;. The &lt;code&gt;stdlib_&lt;/code&gt; prefix comes from the &lt;em&gt;fake&lt;/em&gt;&lt;code&gt;lib/stdlib.nimble&lt;/code&gt; file.</source>
          <target state="translated">표준 라이브러리에있는 모듈의 파일 이름은 &lt;code&gt;stdlib_module.c&lt;/code&gt; 입니다. &lt;a href=&quot;system&quot;&gt;시스템 모듈&lt;/a&gt; 은 항상 자동으로 가져 &lt;code&gt;stdlib_system.c&lt;/code&gt; 때문에 특별한 작업을 수행하지 않으면 최소한 stdlib_system.c로 끝납니다 . &lt;code&gt;stdlib_hashes.c&lt;/code&gt; 라는 &lt;a href=&quot;hashes&quot;&gt;해시 모듈&lt;/a&gt; 과 동일합니다 . &lt;code&gt;stdlib_&lt;/code&gt; 접두사는에서 온다 &lt;em&gt;가짜의 &lt;/em&gt; &lt;code&gt;lib/stdlib.nimble&lt;/code&gt; 파일.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc57d945b36594b68b2a3c3e0ebaf995f83e77da" translate="yes" xml:space="preserve">
          <source>Filenames for modules imported from &lt;a href=&quot;https://github.com/nim-lang/nimble&quot;&gt;nimble packages&lt;/a&gt; will end up with &lt;code&gt;nimblePackageName_module.c&lt;/code&gt;. For example, if you import the &lt;code&gt;argument_parser&lt;/code&gt; module from the same name nimble package you will end up with a &lt;code&gt;argument_parser_argument_parser.c&lt;/code&gt; file under &lt;code&gt;nimcache&lt;/code&gt;. The name of the nimble package comes from the &lt;code&gt;proj.nimble&lt;/code&gt; file, the actual contents are not read by the compiler.</source>
          <target state="translated">&lt;code&gt;nimblePackageName_module.c&lt;/code&gt; &lt;a href=&quot;https://github.com/nim-lang/nimble&quot;&gt;패키지&lt;/a&gt; 에서 가져온 모듈의 파일 이름은 nimblePackageName_module.c로 끝납니다 . 예를 들어, 동일한 이름의 민첩 패키지에서 &lt;code&gt;argument_parser&lt;/code&gt; 모듈 을 가져 &lt;code&gt;nimcache&lt;/code&gt; 아래에 &lt;code&gt;argument_parser_argument_parser.c&lt;/code&gt; 파일이 생깁니다 . 민첩 패키지의 이름은 &lt;code&gt;proj.nimble&lt;/code&gt; 파일 에서 가져 오며 실제 내용은 컴파일러에서 읽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8a933371037aa6356cf097d60b8a8a068b105a6a" translate="yes" xml:space="preserve">
          <source>Filenames for non nimble packages (like your project) will be renamed from &lt;code&gt;.nim&lt;/code&gt; to have the extension of your target backend (from now on &lt;code&gt;.c&lt;/code&gt; for these examples), but otherwise nothing else will change. This will quickly break if your project consists of a main &lt;code&gt;proj.nim&lt;/code&gt; file which includes a &lt;code&gt;utils/proj.nim&lt;/code&gt; file: both &lt;code&gt;proj.nim&lt;/code&gt; files will generate the same name &lt;code&gt;proj.c&lt;/code&gt; output in the &lt;code&gt;nimcache&lt;/code&gt; directory overwriting themselves!</source>
          <target state="translated">프로젝트와 같은 민첩하지 않은 패키지의 파일 이름은 &lt;code&gt;.nim&lt;/code&gt; 에서 이름이 바뀌어 대상 백엔드의 확장명을 갖습니다 ( 이 예제 에서는 &lt;code&gt;.c&lt;/code&gt; 부터 ). 그렇지 않으면 다른 것은 변경되지 않습니다. 프로젝트 가 &lt;code&gt;utils/proj.nim&lt;/code&gt; 파일 을 포함 하는 기본 &lt;code&gt;proj.nim&lt;/code&gt; 파일 로 구성되어 있으면 빠르게 중단됩니다 . 두 &lt;code&gt;proj.nim&lt;/code&gt; 파일 모두 &lt;code&gt;nimcache&lt;/code&gt; 디렉토리 덮어 쓰기 자체 에서 동일한 이름의 &lt;code&gt;proj.c&lt;/code&gt; 출력을 생성합니다 !</target>
        </trans-unit>
        <trans-unit id="afe0d1c5448ce54470389c35163e4799068a0022" translate="yes" xml:space="preserve">
          <source>Filenames that may be invalid across Linux, Windows, Mac, etc. You can check if your filename match these and rename it for safety (Currently all invalid filenames are from Windows only).</source>
          <target state="translated">Linux, Windows, Mac 등에서 유효하지 않을 수있는 파일 이름. 파일 이름이 이들과 일치하는지 확인하고 안전을 위해 이름을 바꿀 수 있습니다 (현재 유효하지 않은 모든 파일 이름은 Windows에서만 제공됨).</target>
        </trans-unit>
        <trans-unit id="b2ae50a69f411bc14345a00be6059bf4dea4b106" translate="yes" xml:space="preserve">
          <source>Files must not be &quot;forgotten&quot; to be linked.</source>
          <target state="translated">파일을 링크에서 &quot;잊어 버려&quot;서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="8cd05fc44107052a44b6b35e9aecb58676bd658a" translate="yes" xml:space="preserve">
          <source>Files with the &lt;code&gt;.idx&lt;/code&gt; extension are generated when you use the &lt;a href=&quot;#index-switch&quot;&gt;Index switch&lt;/a&gt; along with commands to generate documentation from source or text files. You can programatically generate indices with the &lt;a href=&quot;rstgen#setIndexTerm&quot;&gt;setIndexTerm()&lt;/a&gt; and &lt;a href=&quot;rstgen#writeIndexFile&quot;&gt;writeIndexFile()&lt;/a&gt; procs. The purpose of &lt;code&gt;idx&lt;/code&gt; files is to hold the interesting symbols and their HTML references so they can be later concatenated into a big index file with &lt;a href=&quot;rstgen#mergeIndexes&quot;&gt;mergeIndexes()&lt;/a&gt;. This section documents the file format in detail.</source>
          <target state="translated">확장자가 &lt;code&gt;.idx&lt;/code&gt; 인 파일 은 &lt;a href=&quot;#index-switch&quot;&gt;색인 스위치&lt;/a&gt; 를 명령과 함께 사용하여 소스 또는 텍스트 파일에서 문서를 생성 할 때 생성됩니다 . &lt;a href=&quot;rstgen#setIndexTerm&quot;&gt;setIndexTerm ()&lt;/a&gt; 및 &lt;a href=&quot;rstgen#writeIndexFile&quot;&gt;writeIndexFile ()&lt;/a&gt; procs를 사용하여 프로그래밍 방식으로 인덱스를 생성 할 수 있습니다 . &lt;code&gt;idx&lt;/code&gt; 파일 의 목적은 흥미로운 심볼과 HTML 참조를 보유하여 나중에 &lt;a href=&quot;rstgen#mergeIndexes&quot;&gt;mergeIndexes ()&lt;/a&gt; 를 사용하여 큰 인덱스 파일로 연결할 수 있도록하는 것 입니다. 이 섹션에서는 파일 형식에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="641068caeb3c7d7d9bd60a9915813d27f6ea435b" translate="yes" xml:space="preserve">
          <source>Fills the container &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">컨테이너 &lt;code&gt;a&lt;/code&gt; 를 &lt;code&gt;value&lt;/code&gt; 로 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="5166bc1cc3d40bd049724774304a41f41f11b3b4" translate="yes" xml:space="preserve">
          <source>Fills the slice &lt;code&gt;a[first..last]&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">슬라이스 &lt;code&gt;a[first..last]&lt;/code&gt; 를 &lt;code&gt;value&lt;/code&gt; 로 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="ad35d60ce8cd2f119bf179d2d09ac421cac11c3f" translate="yes" xml:space="preserve">
          <source>Filters can be combined with the &lt;code&gt;|&lt;/code&gt; pipe operator:</source>
          <target state="translated">필터는 &lt;code&gt;|&lt;/code&gt; 파이프 운영자 :</target>
        </trans-unit>
        <trans-unit id="21f3717b455e6efd4cd5d0a4dcb6059e79dfd380" translate="yes" xml:space="preserve">
          <source>Finally, sort matches by relevance. The relevance is determined by the number of usages, so &lt;code&gt;strutils.replace&lt;/code&gt; comes before &lt;code&gt;strutils.wordWrap&lt;/code&gt;.</source>
          <target state="translated">마지막으로 관련성을 기준으로 일치 항목을 정렬합니다. 관련성은 사용 횟수에 따라 결정되므로 &lt;code&gt;strutils.replace&lt;/code&gt; 가 &lt;code&gt;strutils.wordWrap&lt;/code&gt; 앞에 옵니다 .</target>
        </trans-unit>
        <trans-unit id="aaa5558255bc2b843a6bc0a11a6327850e51b053" translate="yes" xml:space="preserve">
          <source>Finally, the 'type' determines how the data should be presented.</source>
          <target state="translated">마지막으로 '유형'에 따라 데이터를 표시하는 방법이 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="a1a01ca9461395f243b291926ac9fcac462d9045" translate="yes" xml:space="preserve">
          <source>Find NodeJS executable and return it as a string.</source>
          <target state="translated">NodeJS 실행 파일을 찾아 문자열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f54f7d2cd9405c1515842c98505909ee64784fa" translate="yes" xml:space="preserve">
          <source>Find the first child node matching condition (or nil).</source>
          <target state="translated">첫 번째 하위 노드 일치 조건을 찾으십시오 (또는 nil).</target>
        </trans-unit>
        <trans-unit id="30719f0f88d14e35d99a50a7b43d9fb871f016e8" translate="yes" xml:space="preserve">
          <source>Find the page descriptor for the page the cell belongs to.</source>
          <target state="translated">셀이 속한 페이지의 페이지 디스크립터를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="99aeefba8ab0157fcc77c4ec7c8590fc8f2a0a27" translate="yes" xml:space="preserve">
          <source>Finds the first attribute of &lt;code&gt;n&lt;/code&gt; with a name of &lt;code&gt;name&lt;/code&gt;. Returns &quot;&quot; on failure.</source>
          <target state="translated">이름이 &lt;code&gt;name&lt;/code&gt; 인 &lt;code&gt;n&lt;/code&gt; 의 첫 번째 속성을 찾습니다 . 실패하면 &quot;&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9a995785552ee9c2ac039b3c0c3df41b9e13f6c9" translate="yes" xml:space="preserve">
          <source>Finds the first attribute of &lt;em&gt;n&lt;/em&gt; with a name of &lt;em&gt;name&lt;/em&gt;. Returns &quot;&quot; on failure.</source>
          <target state="translated">이름이 &lt;em&gt;name&lt;/em&gt; 인 &lt;em&gt;n&lt;/em&gt; 의 첫 번째 속성을 찾습니다 . 실패하면 &quot;&quot;를 반환합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ea102794eba94c8a4b3e293a3d53b0de67c1cce" translate="yes" xml:space="preserve">
          <source>Finds the first child element of &lt;code&gt;n&lt;/code&gt; with a name of &lt;code&gt;name&lt;/code&gt;. Returns &lt;code&gt;nil&lt;/code&gt; on failure.</source>
          <target state="translated">이름이 &lt;code&gt;name&lt;/code&gt; 인 &lt;code&gt;n&lt;/code&gt; 의 첫 번째 자식 요소를 찾습니다 . 실패하면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="116c9d25902f0a4de6f1544ba04093c5b88e71cd" translate="yes" xml:space="preserve">
          <source>Finds the first child element of &lt;em&gt;n&lt;/em&gt; with a name of &lt;em&gt;name&lt;/em&gt;. Returns &lt;em&gt;nil&lt;/em&gt; on failure.</source>
          <target state="translated">이름이 &lt;em&gt;name&lt;/em&gt; 인 &lt;em&gt;n&lt;/em&gt; 의 첫 번째 자식 요소를 찾습니다 . 실패하면 &lt;em&gt;nil&lt;/em&gt; 을 반환합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4389c17550fe9ddc9f86819d4a7b60ae0e67f0d1" translate="yes" xml:space="preserve">
          <source>Finds the first occurrence of &lt;code&gt;first&lt;/code&gt;, then returns everything from there up to &lt;code&gt;second&lt;/code&gt; (if &lt;code&gt;second&lt;/code&gt; is '0', then &lt;code&gt;first&lt;/code&gt; is used).</source>
          <target state="translated">발견의 첫번째 발생 &lt;code&gt;first&lt;/code&gt; 다음 거기 내지 모든 리턴 &lt;code&gt;second&lt;/code&gt; (만약 &lt;code&gt;second&lt;/code&gt; 후, '0'인 &lt;code&gt;first&lt;/code&gt; 사용).</target>
        </trans-unit>
        <trans-unit id="a93c8d33a1f651b02e9a85b490556afe014c5a53" translate="yes" xml:space="preserve">
          <source>Finds the local IP address, usually assigned to eth0 on LAN or wlan0 on WiFi, used to reach an external address. Useful to run local services.</source>
          <target state="translated">일반적으로 LAN의 eth0 또는 WiFi의 wlan0에 할당되어 외부 주소에 연결하는 데 사용되는 로컬 IP 주소를 찾습니다. 로컬 서비스를 실행하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="e10690524b088703438cd8f528eee032c5fdc137" translate="yes" xml:space="preserve">
          <source>Finds the sequence of ASCII characters that is the closest approximation to the UTF-8 string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">UTF-8 문자열 &lt;code&gt;s&lt;/code&gt; 에 가장 가까운 ASCII 문자 시퀀스를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="aa480c79d8552ab3be77a21fc95ee239cf4736ae" translate="yes" xml:space="preserve">
          <source>Finishes the &lt;code&gt;MD5Context&lt;/code&gt; and stores the result in &lt;code&gt;digest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MD5Context&lt;/code&gt; 를 완료하고 결과를 &lt;code&gt;digest&lt;/code&gt; 에 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="90260576d7123a83755f262c40d559569ac04048" translate="yes" xml:space="preserve">
          <source>Finishes the computation of the hash value.</source>
          <target state="translated">해시 값 계산을 완료합니다.</target>
        </trans-unit>
        <trans-unit id="241e6f1cbb942e22ab4e91ad13f821dbce84883d" translate="yes" xml:space="preserve">
          <source>Firefox 1</source>
          <target state="translated">Firefox 1</target>
        </trans-unit>
        <trans-unit id="c1e04a664d0fa1e6d636657917cb8f7f9bb37b0d" translate="yes" xml:space="preserve">
          <source>Firefox 27</source>
          <target state="translated">Firefox 27</target>
        </trans-unit>
        <trans-unit id="bc2e7793495839dd162228b4c117b72a3f00eea6" translate="yes" xml:space="preserve">
          <source>Firefox 63</source>
          <target state="translated">Firefox 63</target>
        </trans-unit>
        <trans-unit id="1fa44f085f8c7a5bc6ceea9feaf111cbe756da9a" translate="yes" xml:space="preserve">
          <source>First character</source>
          <target state="translated">첫 캐릭터</target>
        </trans-unit>
        <trans-unit id="6fb97620efec2fa3a50f072b3fe2fec2847a9ff6" translate="yes" xml:space="preserve">
          <source>First class iterators</source>
          <target state="translated">퍼스트 클래스 반복자</target>
        </trans-unit>
        <trans-unit id="f370b44cde766dc130322be4b2bea19020a535de" translate="yes" xml:space="preserve">
          <source>First letter of log level</source>
          <target state="translated">로그 수준의 첫 글자</target>
        </trans-unit>
        <trans-unit id="8059ff4ec3bb98e81e6532257bf865e86ff5d806" translate="yes" xml:space="preserve">
          <source>First the template &lt;code&gt;myTemplate&lt;/code&gt; is expanded, where every identifier &lt;code&gt;arg&lt;/code&gt; is substituted with its argument. The &lt;code&gt;arg&lt;/code&gt; inside the format string is not seen by this process, because it is part of a quoted string literal. It is not an identifier yet. Then the strformat macro creates the &lt;code&gt;arg&lt;/code&gt; identifier from the string literal. An identifier that cannot be resolved anymore.</source>
          <target state="translated">먼저 &lt;code&gt;myTemplate&lt;/code&gt; 템플릿 이 확장되어 모든 식별자 &lt;code&gt;arg&lt;/code&gt; 가 해당 인수로 대체됩니다. 형식 문자열 내부 의 &lt;code&gt;arg&lt;/code&gt; 는 인용 된 문자열 리터럴의 일부이기 때문에이 프로세스에서 볼 수 없습니다. 아직 식별자가 아닙니다. 그런 다음 strformat 매크로 는 문자열 리터럴에서 &lt;code&gt;arg&lt;/code&gt; 식별자를 만듭니다 . 더 이상 확인할 수없는 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="ac1e416892a8f303de79653faefe15b6ce255b21" translate="yes" xml:space="preserve">
          <source>First, put your SCF code in a separate file with filters specified in the first line. &lt;strong&gt;Note:&lt;/strong&gt; You can name your SCF file with any file extension you want, but the conventional extension is &lt;code&gt;.nimf&lt;/code&gt; (it used to be &lt;code&gt;.tmpl&lt;/code&gt; but that was too generic, for example preventing github to recognize it as Nim source file).</source>
          <target state="translated">먼저 첫 번째 줄에 지정된 필터를 사용하여 SCF 코드를 별도의 파일에 넣습니다. &lt;strong&gt;참고 :&lt;/strong&gt; 원하는 파일 확장자로 SCF 파일의 이름을 지정할 수 있지만 일반적인 확장자는 &lt;code&gt;.nimf&lt;/code&gt; 입니다 ( &lt;code&gt;.tmpl&lt;/code&gt; 에는 .tmpl 이었지만 너무 일반적이었습니다. 예를 들어 github에서 Nim 소스 파일로 인식하지 못함 ).</target>
        </trans-unit>
        <trans-unit id="f2af49d2c3ce15e10e3a7a232ccc816827fda57b" translate="yes" xml:space="preserve">
          <source>First-class iterators</source>
          <target state="translated">일류 반복자</target>
        </trans-unit>
        <trans-unit id="dfda498973da429e9bd6724bb5d961f79a50f87a" translate="yes" xml:space="preserve">
          <source>FirstCallConv:</source>
          <target state="translated">FirstCallConv:</target>
        </trans-unit>
        <trans-unit id="9425d904ba25f89814dc275a1eb0f4d3e77e6315" translate="yes" xml:space="preserve">
          <source>Fixed point. Displays the number as a fixed-point number.</source>
          <target state="translated">고정 점. 숫자를 고정 소수점 숫자로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e63454c17e4292081d77b79e20733cc89121e3be" translate="yes" xml:space="preserve">
          <source>Fixed point. Same as 'f' except it converts the number to uppercase.</source>
          <target state="translated">고정 점. 숫자를 대문자로 변환한다는 점을 제외하고 'f'와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="8888f449a22b6a8423f0a9d14109213e5a845a03" translate="yes" xml:space="preserve">
          <source>Flags for the &lt;code&gt;%&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; 연산자에 대한 플래그입니다 .</target>
        </trans-unit>
        <trans-unit id="f52f29573e4eecc59739bd00bb2a8c1511125816" translate="yes" xml:space="preserve">
          <source>Flips &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;order == Descending&lt;/code&gt;. If &lt;code&gt;order == Ascending&lt;/code&gt; then &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;order == Descending&lt;/code&gt; 이면 &lt;code&gt;x&lt;/code&gt; 를 뒤집습니다 . 경우 &lt;code&gt;order == Ascending&lt;/code&gt; 다음 &lt;code&gt;x&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f9deb82314740be86449314d50ff9ec9da219490" translate="yes" xml:space="preserve">
          <source>Float literals can have a &lt;em&gt;type suffix&lt;/em&gt; to specify a non-default float type:</source>
          <target state="translated">부동 리터럴에는 기본이 아닌 부동 유형을 지정하기 위해 &lt;em&gt;유형 접미사&lt;/em&gt; 가있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82f5290afe4a74168e829b0b5dbf6ce1cd1003cd" translate="yes" xml:space="preserve">
          <source>FloatLike:</source>
          <target state="translated">FloatLike:</target>
        </trans-unit>
        <trans-unit id="4709f8479ca7711f846d5473ffd0b30643744aba" translate="yes" xml:space="preserve">
          <source>Floating point literals may also be in binary, octal or hexadecimal notation: &lt;code&gt;0B0_10001110100_0000101001000111101011101111111011000101001101001001'f64&lt;/code&gt; is approximately 1.72826e35 according to the IEEE floating point standard.</source>
          <target state="translated">부동 소수점 리터럴은 2 진, 8 진 또는 16 진 표기법 일 수도 있습니다. &lt;code&gt;0B0_10001110100_0000101001000111101011101111111011000101001101001001'f64&lt;/code&gt; 는 IEEE 부동 소수점 표준에 따라 약 1.72826e35입니다.</target>
        </trans-unit>
        <trans-unit id="b19d1e4b5ac02d569d7b1224c5537d91831a7f87" translate="yes" xml:space="preserve">
          <source>Floating-point environment. Handling of floating-point rounding and exceptions (overflow, division by zero, etc.).</source>
          <target state="translated">부동 소수점 환경. 부동 소수점 반올림 및 예외 처리 (오버플로, 0으로 나누기 등).</target>
        </trans-unit>
        <trans-unit id="b304995b7e999c79813d27bcfd189820aae1068e" translate="yes" xml:space="preserve">
          <source>Floating-point literals may also be in binary, octal or hexadecimal notation: &lt;code&gt;0B0_10001110100_0000101001000111101011101111111011000101001101001001'f64&lt;/code&gt; is approximately 1.72826e35 according to the IEEE floating-point standard.</source>
          <target state="translated">부동 소수점 리터럴은 2 진, 8 진 또는 16 진 표기법 일 수도 있습니다. &lt;code&gt;0B0_10001110100_0000101001000111101011101111111011000101001101001001'f64&lt;/code&gt; 는 IEEE 부동 소수점 표준에 따라 약 1.72826e35입니다.</target>
        </trans-unit>
        <trans-unit id="c9fdb9f56bbed11dccf6a43b0581d80890cf2517" translate="yes" xml:space="preserve">
          <source>Floats</source>
          <target state="translated">Floats</target>
        </trans-unit>
        <trans-unit id="640b6d413eefa110213a889129a02003152d8bee" translate="yes" xml:space="preserve">
          <source>Floor division is conceptually defined as &lt;code&gt;floor(x / y)&lt;/code&gt;.</source>
          <target state="translated">바닥 구분은 개념적으로 &lt;code&gt;floor(x / y)&lt;/code&gt; 로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="0b8bb28712c30f69189ad1e4c48e26c04e7296ed" translate="yes" xml:space="preserve">
          <source>Floor division is conceptually defined as &lt;code&gt;floor(x / y)&lt;/code&gt;. This is different from the &lt;code&gt;div&lt;/code&gt; operator, which is defined as &lt;code&gt;trunc(x / y)&lt;/code&gt;. That is, &lt;code&gt;div&lt;/code&gt; rounds towards &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;floorDiv&lt;/code&gt; rounds down.</source>
          <target state="translated">바닥 구분은 개념적으로 &lt;code&gt;floor(x / y)&lt;/code&gt; 로 정의됩니다 . 이것은 &lt;code&gt;trunc(x / y)&lt;/code&gt; 로 정의 된 &lt;code&gt;div&lt;/code&gt; 연산자와 다릅니다 . 즉, &lt;code&gt;div&lt;/code&gt; 대한 원 &lt;code&gt;0&lt;/code&gt; 과 &lt;code&gt;floorDiv&lt;/code&gt; 는 아래로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="507e183eb0245f3035a2072cd5bbfa4b4fe3cfd9" translate="yes" xml:space="preserve">
          <source>Floor modulus is conceptually defined as &lt;code&gt;x - (floorDiv(x, y) * y). This proc behaves the same as the ``%&lt;/code&gt; operator in python.</source>
          <target state="translated">바닥 계수는 개념적으로 &lt;code&gt;x - (floorDiv(x, y) * y). This proc behaves the same as the ``%&lt;/code&gt; 로 정의됩니다 . 이 proc은`` python의 % 연산자 와 동일하게 동작합니다 .</target>
        </trans-unit>
        <trans-unit id="71823e44ae3b7bcade92545e72b18c804e9b3d02" translate="yes" xml:space="preserve">
          <source>Floor modulus is conceptually defined as &lt;code&gt;x - (floorDiv(x, y) * y)&lt;/code&gt;.</source>
          <target state="translated">바닥 계수는 개념적으로 &lt;code&gt;x - (floorDiv(x, y) * y)&lt;/code&gt; 로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="cb6984b97e6bf83a8b2f5e369bfa39cf730fbcbc" translate="yes" xml:space="preserve">
          <source>Flushes &lt;code&gt;f&lt;/code&gt;'s buffer for the number of attempts equal to &lt;code&gt;attempts&lt;/code&gt;. If were errors an exception &lt;code&gt;OSError&lt;/code&gt; will be raised.</source>
          <target state="translated">시도 횟수와 동일한 시도 횟수만큼 &lt;code&gt;f&lt;/code&gt; 의 버퍼를 플러시 &lt;code&gt;attempts&lt;/code&gt; . 오류 인 경우 예외 &lt;code&gt;OSError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="dd837ff531a1f6bcdec182ffcee2d4c985203798" translate="yes" xml:space="preserve">
          <source>Flushes &lt;code&gt;f&lt;/code&gt;'s buffer.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 의 버퍼를 플러시 합니다.</target>
        </trans-unit>
        <trans-unit id="b68a30374763b478aa4e124731b01b2713f1f18a" translate="yes" xml:space="preserve">
          <source>Flushes &lt;em&gt;f&lt;/em&gt;'s buffer for the number of attempts equal to &lt;em&gt;attempts&lt;/em&gt;. If were errors an exception &lt;em&gt;OSError&lt;/em&gt; will be raised.</source>
          <target state="translated">시도 횟수와 동일한 횟수로 &lt;em&gt;f&lt;/em&gt; 의 버퍼를 플러시 &lt;em&gt;합니다&lt;/em&gt; . 오류 인 경우 예외 &lt;em&gt;OSError&lt;/em&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3be2c81cbf56cdb975e556d6b5fbea831465559e" translate="yes" xml:space="preserve">
          <source>Flushes &lt;em&gt;f&lt;/em&gt;'s buffer.</source>
          <target state="translated">&lt;em&gt;f&lt;/em&gt; 의 버퍼를 플러시 합니다.</target>
        </trans-unit>
        <trans-unit id="7a15466606cfc26ed1f9114a3fc621b91b22d8ab" translate="yes" xml:space="preserve">
          <source>Flushes the buffers that the stream &lt;code&gt;s&lt;/code&gt; might use.</source>
          <target state="translated">스트림이 버퍼 플러시 &lt;code&gt;s&lt;/code&gt; 힘을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e03855f1f1c3b345552a28ecc6fe3b8cc1a7a014" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;manual#types-reference-and-pointer-types&quot;&gt;ref semantics&lt;/a&gt; use their &lt;code&gt;Ref&lt;/code&gt; variants: &lt;a href=&quot;#TableRef&quot;&gt;TableRef&lt;/a&gt;, &lt;a href=&quot;#OrderedTableRef&quot;&gt;OrderedTableRef&lt;/a&gt;, and &lt;a href=&quot;#CountTableRef&quot;&gt;CountTableRef&lt;/a&gt;.</source>
          <target state="translated">대한 &lt;a href=&quot;manual#types-reference-and-pointer-types&quot;&gt;심판 의미가&lt;/a&gt; 사용하는 자신의 &lt;code&gt;Ref&lt;/code&gt; 변형 : &lt;a href=&quot;#TableRef&quot;&gt;TableRef&lt;/a&gt; , &lt;a href=&quot;#OrderedTableRef&quot;&gt;OrderedTableRef&lt;/a&gt; 및 &lt;a href=&quot;#CountTableRef&quot;&gt;CountTableRef을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9801b0bf8832b1e24dc00bc1e0170a9c46ac8ec4" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;--gc:arc&lt;/code&gt; or &lt;code&gt;--gc:orc&lt;/code&gt; deepcopy support has to be enabled via &lt;code&gt;--deepcopy:on&lt;/code&gt;.</source>
          <target state="translated">들어 &lt;code&gt;--gc:arc&lt;/code&gt; 또는 &lt;code&gt;--gc:orc&lt;/code&gt; deepcopy 지원을 통해 활성화해야합니다 &lt;code&gt;--deepcopy:on&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c25050c008414c32efb1dc94b6d6e01b1c908aed" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;let&lt;/code&gt; symbols a copy is not always necessary:</source>
          <target state="translated">대한 &lt;code&gt;let&lt;/code&gt; 상징 사본은 항상 필요하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="93eae6a8185698ce3b52d68a8a1fdbd2033c2edc" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;poll&lt;/em&gt; and &lt;em&gt;select&lt;/em&gt; selectors &lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">대한 &lt;em&gt;설문 조사&lt;/em&gt; 및 &lt;em&gt;선택&lt;/em&gt; 선택기 &lt;code&gt;-1&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="1c94fe4e1280ca06c679c18c21a534b0efbabcc4" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;safe&lt;/em&gt; data exchange between &lt;code&gt;f&lt;/code&gt; and the caller a global &lt;code&gt;TChannel&lt;/code&gt; needs to be used. However, since spawn can return a result, often no further communication is required.</source>
          <target state="translated">들면 &lt;em&gt;금고&lt;/em&gt; 간의 데이터 교환 &lt;code&gt;f&lt;/code&gt; 호출자 글로벌 &lt;code&gt;TChannel&lt;/code&gt; 가 사용되어야한다. 그러나 스폰은 결과를 반환 할 수 있으므로 더 이상 통신이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="80decab5bcce0fc7cedb2c16a145d085badc1a42" translate="yes" xml:space="preserve">
          <source>For CSV files with a header row, the header can be read and then used as a reference for item access with &lt;a href=&quot;#rowEntry,CsvParser,string&quot;&gt;rowEntry&lt;/a&gt;:</source>
          <target state="translated">헤더 행이있는 CSV 파일의 경우 헤더를 읽은 다음 &lt;a href=&quot;#rowEntry,CsvParser,string&quot;&gt;rowEntry&lt;/a&gt; 로 항목 액세스를위한 참조로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="45da4482954f28ab16fcb0291f1dcae1eb3d1129" translate="yes" xml:space="preserve">
          <source>For CSV files with a header row, the header can be read and then used as a reference for item access with &lt;a href=&quot;#rowEntry.CsvParser.string&quot;&gt;rowEntry&lt;/a&gt;:</source>
          <target state="translated">헤더 행이있는 CSV 파일의 경우 헤더를 읽고 &lt;a href=&quot;#rowEntry.CsvParser.string&quot;&gt;rowEntry&lt;/a&gt; 를 사용하여 항목 액세스에 대한 참조로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0242b091c3a87873ec98ea878a8dd380d1d20c4f" translate="yes" xml:space="preserve">
          <source>For SSL support this module relies on OpenSSL. If you want to enable SSL, compile with &lt;code&gt;-d:ssl&lt;/code&gt;.</source>
          <target state="translated">SSL 지원을 위해이 모듈은 OpenSSL을 사용합니다. SSL을 사용하려면 &lt;code&gt;-d:ssl&lt;/code&gt; 을 사용하여 컴파일하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a4e55acaf4e7d41a09c40e0a84a8c5677bb6ba3" translate="yes" xml:space="preserve">
          <source>For SSL, use the following example (and make sure to compile with &lt;code&gt;-d:ssl&lt;/code&gt;):</source>
          <target state="translated">SSL의 경우 다음 예제를 사용하고 &lt;code&gt;-d:ssl&lt;/code&gt; 로 컴파일해야합니다 .</target>
        </trans-unit>
        <trans-unit id="31a8e1288dab28fd3dbea3e9fee257dd66c9d00c" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;JsonNode&lt;/code&gt; who's kind is &lt;code&gt;JObject&lt;/code&gt;, you can access its fields using the &lt;code&gt;[]&lt;/code&gt; operator. The following example shows how to do this:</source>
          <target state="translated">A에 대한 &lt;code&gt;JsonNode&lt;/code&gt; 종류의이다 &lt;code&gt;JObject&lt;/code&gt; , 당신은 사용하여 필드에 액세스 할 수 있습니다 &lt;code&gt;[]&lt;/code&gt; 연산자를. 다음 예는이를 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4c826cb55e40a0152d8b6297bef6da259dfc72eb" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;JsonNode&lt;/code&gt; who's kind is &lt;code&gt;JObject&lt;/code&gt;, you can acess its fields using the &lt;code&gt;[]&lt;/code&gt; operator. The following example shows how to do this:</source>
          <target state="translated">A에 대한 &lt;code&gt;JsonNode&lt;/code&gt; 종류의이다 &lt;code&gt;JObject&lt;/code&gt; , 당신은 사용하여 필드를 ACESS 수 있습니다 &lt;code&gt;[]&lt;/code&gt; 연산자를. 다음 예제는이를 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f8ff0294217a3f3e393e51e9c14dc4c35a600a0c" translate="yes" xml:space="preserve">
          <source>For a negated version, use &lt;a href=&quot;#isnot.t,untyped,untyped&quot;&gt;isnot&lt;/a&gt;.</source>
          <target state="translated">부정 버전의 경우 &lt;a href=&quot;#isnot.t,untyped,untyped&quot;&gt;isnot을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c37182cb924bb624a7088fb745305dafdcf10c15" translate="yes" xml:space="preserve">
          <source>For a release version use:</source>
          <target state="translated">릴리스 버전의 경우 :</target>
        </trans-unit>
        <trans-unit id="d05dd7196bfebecfb5e43d1a1b6a86b9cd04aa9e" translate="yes" xml:space="preserve">
          <source>For a routine &lt;code&gt;p&lt;/code&gt; the compiler uses inference rules to determine the set of possibly raised exceptions; the algorithm operates on &lt;code&gt;p&lt;/code&gt;'s call graph:</source>
          <target state="translated">루틴 &lt;code&gt;p&lt;/code&gt; 의 경우 컴파일러는 추론 규칙을 사용하여 가능한 예외 세트를 결정합니다. 알고리즘은 &lt;code&gt;p&lt;/code&gt; 의 호출 그래프 에서 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="162e3213ac49145b43a06ab4d89fbda78517a1ce" translate="yes" xml:space="preserve">
          <source>For a slice &lt;code&gt;a..b&lt;/code&gt;, returns a value in the range &lt;code&gt;a..b&lt;/code&gt; using the given state.</source>
          <target state="translated">슬라이스 &lt;code&gt;a..b&lt;/code&gt; 의 경우 주어진 상태를 사용하여 &lt;code&gt;a..b&lt;/code&gt; 범위의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4977420d833b86866016b45555f0b855302e48e2" translate="yes" xml:space="preserve">
          <source>For a slice &lt;code&gt;a..b&lt;/code&gt;, returns a value in the range &lt;code&gt;a..b&lt;/code&gt;.</source>
          <target state="translated">슬라이스 &lt;code&gt;a..b&lt;/code&gt; 의 경우 &lt;code&gt;a..b&lt;/code&gt; 범위의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="62deebd5b6d9318d830bba76bfa2f8fef9acd3df" translate="yes" xml:space="preserve">
          <source>For a slice &lt;em&gt;a .. b&lt;/em&gt; returns a value in the range &lt;em&gt;a .. b-1&lt;/em&gt;. &lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;. Use &lt;code&gt;rand&lt;/code&gt; instead.</source>
          <target state="translated">슬라이스 &lt;em&gt;a .. b&lt;/em&gt; 의 경우 &lt;em&gt;a .. b-1&lt;/em&gt; 범위 &lt;em&gt;의&lt;/em&gt; 값을 반환합니다 . &lt;strong&gt;버전 0.18.0부터 사용되지 않습니다&lt;/strong&gt; . 대신 &lt;code&gt;rand&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="34b1c5436f8148b5507779ddb104dba21e9b926d" translate="yes" xml:space="preserve">
          <source>For a slice &lt;em&gt;a .. b&lt;/em&gt; returns a value in the range &lt;em&gt;a .. b&lt;/em&gt;.</source>
          <target state="translated">슬라이스 a..b의 &lt;em&gt;경우 a..b&lt;/em&gt; 범위 &lt;em&gt;의&lt;/em&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8452d704bc107017adee94ca36f643a56bd5272a" translate="yes" xml:space="preserve">
          <source>For a specification of the &lt;code&gt;&amp;amp;&lt;/code&gt; macro, see the module level documentation.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 매크로 의 사양은 모듈 수준 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e1948f08b22af3fd7b74bc6604869b1aac94bf93" translate="yes" xml:space="preserve">
          <source>For a task named &lt;code&gt;foo&lt;/code&gt;, this template generates a &lt;code&gt;proc&lt;/code&gt; named &lt;code&gt;fooTask&lt;/code&gt;. This is useful if you need to call one task in another in your Nimscript.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 라는 작업의 경우이 템플릿 은 &lt;code&gt;fooTask&lt;/code&gt; 라는 &lt;code&gt;proc&lt;/code&gt; 을 생성합니다 . Nimscript에서 다른 작업을 호출해야하는 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7afbbc7a944bdae2a321287d22dceb33fb748d7e" translate="yes" xml:space="preserve">
          <source>For a toplevel emit statement the section where in the generated C/C++ file the code should be emitted can be influenced via the prefixes &lt;code&gt;/*TYPESECTION*/&lt;/code&gt; or &lt;code&gt;/*VARSECTION*/&lt;/code&gt; or &lt;code&gt;/*INCLUDESECTION*/&lt;/code&gt;:</source>
          <target state="translated">최상위 레벨 emit 문의 경우, 생성 된 C / C ++ 파일에서 코드가 방출되어야하는 섹션은 접두사 &lt;code&gt;/*TYPESECTION*/&lt;/code&gt; 또는 &lt;code&gt;/*VARSECTION*/&lt;/code&gt; 또는 &lt;code&gt;/*INCLUDESECTION*/&lt;/code&gt; 를 통해 영향을받을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="153429c37d8799d9c996a7bffc3c70c06487873f" translate="yes" xml:space="preserve">
          <source>For a typed proc returns the AST after transformation pass; this is useful for debugging how the compiler transforms code (e.g.: &lt;code&gt;defer&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;) but note that code transformations are implementation dependent and subject to change. See an example in &lt;code&gt;tests/macros/tmacros_various.nim&lt;/code&gt;.</source>
          <target state="translated">형식화 된 proc의 경우 변환 통과 후 AST를 반환합니다. 이는 컴파일러가 코드를 변환하는 방법 (예 : &lt;code&gt;defer&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; ) 을 디버깅하는 데 유용 하지만 코드 변환은 구현에 따라 다르며 변경 될 수 있습니다. &lt;code&gt;tests/macros/tmacros_various.nim&lt;/code&gt; 의 예를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="519ff5d45d5db96e9bc2321b3436e209d793d4b2" translate="yes" xml:space="preserve">
          <source>For available procs and implementation details see &lt;a href=&quot;nimscript&quot;&gt;nimscript&lt;/a&gt;.</source>
          <target state="translated">사용 가능한 procs 및 구현 세부 사항은 &lt;a href=&quot;nimscript&quot;&gt;nimscript를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b81eef4c1cbf50e8420e0c334dd047d24a51c0df" translate="yes" xml:space="preserve">
          <source>For backward compatibility</source>
          <target state="translated">이전 버전과의 호환성을 위해</target>
        </trans-unit>
        <trans-unit id="bae4358d99fac2b8571a760936b527f2f9d7c99f" translate="yes" xml:space="preserve">
          <source>For backward compatibility, if the argument to the &lt;code&gt;emit&lt;/code&gt; statement is a single string literal, Nim symbols can be referred to via backticks. This usage is however deprecated.</source>
          <target state="translated">이전 버전과의 호환성을 위해 &lt;code&gt;emit&lt;/code&gt; 문에 대한 인수가 단일 문자열 리터럴이면 Nim 기호를 백틱을 통해 참조 할 수 있습니다. 그러나이 사용법은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1eb9aa8c4991a1b62e3c275f5d3018b0177bfba7" translate="yes" xml:space="preserve">
          <source>For backwards compatibility</source>
          <target state="translated">이전 버전과의 호환성을 위해</target>
        </trans-unit>
        <trans-unit id="b8aab3834714de2c3d8adfb34a6816ec7d88ac0a" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, if the argument to the &lt;code&gt;emit&lt;/code&gt; statement is a single string literal, Nim symbols can be referred to via backticks. This usage is however deprecated.</source>
          <target state="translated">이전 버전과의 호환성을 위해 &lt;code&gt;emit&lt;/code&gt; 문에 대한 인수가 단일 문자열 리터럴 인 경우 백틱을 통해 Nim 기호를 참조 할 수 있습니다. 그러나이 사용법은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2c2a63fd55994e33a6c697c0db6532833f78e796" translate="yes" xml:space="preserve">
          <source>For better interfacing to other programming languages, the fields of enum types can be assigned an explicit ordinal value. However, the ordinal values have to be in ascending order. A field whose ordinal value is not explicitly given is assigned the value of the previous field + 1.</source>
          <target state="translated">다른 프로그래밍 언어와의 인터페이스를 개선하기 위해 열거 형 필드에 명시적인 서수 값을 할당 할 수 있습니다. 그러나 서수 값은 오름차순이어야합니다. 서수 값이 명시 적으로 주어지지 않은 필드에는 이전 필드 + 1의 값이 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="5f99de42e817dbe899e9068c1a506a2b0085b960" translate="yes" xml:space="preserve">
          <source>For better interfacing to other programming languages, the symbols of enum types can be assigned an explicit ordinal value. However, the ordinal values must be in ascending order.</source>
          <target state="translated">다른 프로그래밍 언어와의 인터페이스를 개선하기 위해 열거 형 심볼에 명시적인 서수 값을 할당 할 수 있습니다. 그러나 서수 값은 오름차순이어야합니다.</target>
        </trans-unit>
        <trans-unit id="a3e556431f7fdff11ba27ff4e2fe38111fc0a0d5" translate="yes" xml:space="preserve">
          <source>For binary operators that are not keywords the precedence is determined by the following rules:</source>
          <target state="translated">키워드가 아닌 이진 연산자의 우선 순위는 다음 규칙에 따라 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="1e8781f8c970c36178b1ccc702529d08302e8b33" translate="yes" xml:space="preserve">
          <source>For binary operators that are not keywords, the precedence is determined by the following rules:</source>
          <target state="translated">키워드가 아닌 이항 연산자의 경우 우선 순위는 다음 규칙에 따라 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="39bccad2d53b581347a000b5246cf023c403b150" translate="yes" xml:space="preserve">
          <source>For borrow checking a different set of checks is performed. Let &lt;code&gt;v&lt;/code&gt; be the view and &lt;code&gt;b&lt;/code&gt; the location that is borrowed from.</source>
          <target state="translated">차용 검사를 위해 다른 검사 세트가 수행됩니다. 하자 &lt;code&gt;v&lt;/code&gt; 전망하고 &lt;code&gt;b&lt;/code&gt; 에서 차용되는 위치를.</target>
        </trans-unit>
        <trans-unit id="50e70d3b2cf30a567fbbd7db505ed0bac67c53e0" translate="yes" xml:space="preserve">
          <source>For buffered sockets this function will attempt to read all the requested data. It will read this data in &lt;code&gt;BufferSize&lt;/code&gt; chunks.</source>
          <target state="translated">버퍼 소켓의 경우이 함수는 요청 된 모든 데이터를 읽으려고 시도합니다. 이 데이터를 읽습니다 &lt;code&gt;BufferSize&lt;/code&gt; 청크로 .</target>
        </trans-unit>
        <trans-unit id="b07bee32e3d9817814d2d5762aa7e5112fbbb6a7" translate="yes" xml:space="preserve">
          <source>For building URIs you may wish to use `/` instead.</source>
          <target state="translated">URI를 빌드하는 경우`/`를 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56aa9c952e34a0418a5a4c9eec099b7963eda0ac" translate="yes" xml:space="preserve">
          <source>For client sockets you should only be interested in the &lt;code&gt;handleRead&lt;/code&gt; and &lt;code&gt;handleConnect&lt;/code&gt; events. The former gets called whenever the socket has received messages and can be read from and the latter gets called whenever the socket has established a connection to a server socket; from that point it can be safely written to.</source>
          <target state="translated">클라이언트 소켓의 경우 &lt;code&gt;handleRead&lt;/code&gt; 및 &lt;code&gt;handleConnect&lt;/code&gt; 에만 관심이 있어야합니다. 이벤트 합니다. 전자는 소켓이 메시지를 수신 할 때마다 호출되고 읽을 수 있으며 후자는 소켓이 서버 소켓에 연결될 때마다 호출됩니다. 그 시점부터 안전하게 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf84e8819d7b798ed0f33860eca0b4d23e243863" translate="yes" xml:space="preserve">
          <source>For compatibility with Perl, &lt;code&gt;\s&lt;/code&gt; does not match the VT character (code 11). This makes it different from the the POSIX &quot;space&quot; class. The &lt;code&gt;\s&lt;/code&gt; characters are HT (9), LF (10), FF (12), CR (13), and space (32).</source>
          <target state="translated">Perl과의 호환성을 위해 &lt;code&gt;\s&lt;/code&gt; 는 VT 문자 (코드 11)와 일치하지 않습니다. 이것은 POSIX &quot;space&quot;클래스와 다릅니다. &lt;code&gt;\s&lt;/code&gt; 자 HT (9), LF (10), FF (12), CR (13) 및 공간 (32)이다.</target>
        </trans-unit>
        <trans-unit id="04a21c372d5006a94127af5667affc0f95a564d8" translate="yes" xml:space="preserve">
          <source>For consistency with &lt;code&gt;object&lt;/code&gt; declarations, tuples in a &lt;code&gt;type&lt;/code&gt; section can also be defined with indentation instead of &lt;code&gt;[]&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 선언 과 일관성을 유지하기 위해 &lt;code&gt;type&lt;/code&gt; 섹션의 튜플 을 &lt;code&gt;[]&lt;/code&gt; 대신 들여 쓰기로 정의 할 수도 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="1363b29d8a274495d0ff7a7ddc2d86605f4aea4f" translate="yes" xml:space="preserve">
          <source>For consistency with every other data type in Nim these have &lt;strong&gt;value&lt;/strong&gt; semantics, this means that &lt;code&gt;=&lt;/code&gt; performs a copy of the hash table.</source>
          <target state="translated">Nim의 다른 모든 데이터 유형과의 일관성을 위해 &lt;strong&gt;값&lt;/strong&gt; 의미론이 있습니다. 이는 &lt;code&gt;=&lt;/code&gt; 가 해시 테이블의 복사를 수행함을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="56f219e03de2a46a6add0fb8b66238ad6651513a" translate="yes" xml:space="preserve">
          <source>For constants coming from a C/C++ wrapper, ALL_UPPERCASE are allowed, but ugly. (Why shout CONSTANT? Constants do no harm, variables do!)</source>
          <target state="translated">C / C ++ 랩퍼에서 오는 상수의 경우 ALL_UPPERCASE가 허용되지만 추악합니다. 상수는 해를 끼치 지 않으며 변수는 해 롭습니다!</target>
        </trans-unit>
        <trans-unit id="b38d2ac044ae0efff46e5c78c91dc753b42f7ff6" translate="yes" xml:space="preserve">
          <source>For containers that have an order, &lt;code&gt;add&lt;/code&gt; means &lt;em&gt;append&lt;/em&gt;. New generic containers should also call their adding proc &lt;code&gt;add&lt;/code&gt; for consistency. Generic code becomes much easier to write if the Nim naming scheme is respected.</source>
          <target state="translated">주문이있는 컨테이너의 경우 &lt;code&gt;add&lt;/code&gt; 는 &lt;em&gt;append를&lt;/em&gt; 의미 합니다. 새로운 일반 컨테이너는 일관성을 위해 &lt;code&gt;add&lt;/code&gt; proc add 를 호출해야합니다 . Nim 명명 체계를 준수하면 일반 코드를 훨씬 쉽게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eea6f2ab43bc6b381d32b3dbb31175730e9dc10c" translate="yes" xml:space="preserve">
          <source>For convenience the PEG pattern and the replacement can be single identifiers too, there is no need to quote them:</source>
          <target state="translated">편의상 PEG 패턴 및 대체는 단일 식별자 일 수 있으며,이를 인용 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="9fe02d597cd0aceb5f5e862dbd619f6afc8eff0a" translate="yes" xml:space="preserve">
          <source>For convenience you can access the returned tuples through the named fields &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;. If one container is shorter, the remaining items in the longer container are discarded.</source>
          <target state="translated">편의상 명명 된 필드 &lt;em&gt;a&lt;/em&gt; 및 &lt;em&gt;b를&lt;/em&gt; 통해 반환 된 튜플에 액세스 할 수 있습니다 . 하나의 컨테이너가 더 짧은 경우, 더 긴 컨테이너의 나머지 항목은 폐기됩니다.</target>
        </trans-unit>
        <trans-unit id="fce48cbd513e1ea6897f00184b9929f2b007ba8e" translate="yes" xml:space="preserve">
          <source>For creating a new empty CountTableRef, use &lt;a href=&quot;#newCountTable,int&quot;&gt;newCountTable proc&lt;/a&gt;.</source>
          <target state="translated">비어있는 새 CountTableRef를 만들려면 &lt;a href=&quot;#newCountTable,int&quot;&gt;newCountTable proc을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b66c467f06ea8ab65bf11f31a8716f75cdd7496" translate="yes" xml:space="preserve">
          <source>For creating a new empty OrderedTableRef, use &lt;a href=&quot;#newOrderedTable,int&quot;&gt;newOrderedTable proc&lt;/a&gt;.</source>
          <target state="translated">비어있는 새로운 OrderedTableRef를 만들려면 &lt;a href=&quot;#newOrderedTable,int&quot;&gt;newOrderedTable proc을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a8529a2035d7b545317511bdb590ef5eb5a4d9d" translate="yes" xml:space="preserve">
          <source>For creating a new empty TableRef, use &lt;a href=&quot;#newTable,int&quot;&gt;newTable proc&lt;/a&gt;.</source>
          <target state="translated">새로운 빈 TableRef를 생성하려면 &lt;a href=&quot;#newTable,int&quot;&gt;newTable proc을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3c3c3ebd511ab4391b815017cfb3756ca4c17da" translate="yes" xml:space="preserve">
          <source>For creating an empty CountTable, use &lt;a href=&quot;#initCountTable,int&quot;&gt;initCountTable proc&lt;/a&gt;.</source>
          <target state="translated">빈 CountTable을 만들려면 &lt;a href=&quot;#initCountTable,int&quot;&gt;initCountTable proc을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9514ad591853a3695e9f4a55412cad11d0632153" translate="yes" xml:space="preserve">
          <source>For creating an empty OrderedTable, use &lt;a href=&quot;#initOrderedTable,int&quot;&gt;initOrderedTable proc&lt;/a&gt;.</source>
          <target state="translated">빈 OrderedTable을 생성하려면 &lt;a href=&quot;#initOrderedTable,int&quot;&gt;initOrderedTable proc을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="1f704f203ed649c7c2fef475aa233f79063c32b6" translate="yes" xml:space="preserve">
          <source>For creating an empty Table, use &lt;a href=&quot;#initTable,int&quot;&gt;initTable proc&lt;/a&gt;.</source>
          <target state="translated">빈 테이블을 생성하려면 &lt;a href=&quot;#initTable,int&quot;&gt;initTable proc을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb68ce2fa4474dfa498dc8618e15328f34f957b8" translate="yes" xml:space="preserve">
          <source>For cross compilation, the compiler invokes a C compiler named like &lt;code&gt;$cpu.$os.$cc&lt;/code&gt; (for example arm.linux.gcc) and the configuration system is used to provide meaningful defaults. For example for &lt;code&gt;ARM&lt;/code&gt; your configuration file should contain something like:</source>
          <target state="translated">크로스 컴파일의 경우 컴파일러는 &lt;code&gt;$cpu.$os.$cc&lt;/code&gt; (예 : arm.linux.gcc)와 같은 C 컴파일러를 호출 하고 구성 시스템은 의미있는 기본값을 제공하는 데 사용됩니다. 예를 들어 &lt;code&gt;ARM&lt;/code&gt; 의 경우 구성 파일에는 다음과 같은 내용이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="bfddb4fd4901c9377aa65c5c53f4fed568adddec" translate="yes" xml:space="preserve">
          <source>For determining a &lt;code&gt;raises&lt;/code&gt; list, the &lt;code&gt;raise&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; statements of &lt;code&gt;p&lt;/code&gt; are taken into consideration.</source>
          <target state="translated">&lt;code&gt;raises&lt;/code&gt; 목록을 결정하기 &lt;code&gt;raise&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; 의 raise 및 &lt;code&gt;try&lt;/code&gt; 문이 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="f6433d7fa88d46fa2ef63d15b0a2f1c232846783" translate="yes" xml:space="preserve">
          <source>For each input line we have to create a constant definition (&lt;code&gt;nnkConstDef&lt;/code&gt;) and wrap it inside a constant section (&lt;code&gt;nnkConstSection&lt;/code&gt;). Once these variables are created, we fill them hierarchichally (line 17) like the previous AST dump tree showed: the constant definition is a child of the section definition, and the constant definition has an identifier node, an empty node (we let the compiler figure out the type), and a string literal with the value.</source>
          <target state="translated">각 입력 줄에 대해 상수 정의 ( &lt;code&gt;nnkConstDef&lt;/code&gt; ) 를 작성하고 이를 상수 섹션 ( &lt;code&gt;nnkConstSection&lt;/code&gt; )으로 랩핑해야합니다 . 이러한 변수가 생성되면 이전 AST 덤프 트리와 같이 계층 적으로 (17 행) 변수를 채 웁니다. 상수 정의는 섹션 정의의 자식이고 상수 정의에는 식별자 노드, 빈 노드가 있습니다 (컴파일러를 허용합니다) 유형을 파악하고 값이 포함 된 문자열 리터럴입니다.</target>
        </trans-unit>
        <trans-unit id="e2287df8e6ff8f1fcddd131d03355087c8ef363b" translate="yes" xml:space="preserve">
          <source>For each token, the parser's &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, and &lt;code&gt;val&lt;/code&gt; fields give information about that token. If the token is a long or short option, &lt;code&gt;key&lt;/code&gt; is the option's name, and &lt;code&gt;val&lt;/code&gt; is either the option's value, if provided, or the empty string. For arguments, the &lt;code&gt;key&lt;/code&gt; field contains the argument itself, and &lt;code&gt;val&lt;/code&gt; is unused. To check if the end of the command line has been reached, check if &lt;code&gt;kind&lt;/code&gt; is equal to &lt;code&gt;cmdEnd&lt;/code&gt;.</source>
          <target state="translated">각 토큰에 대해 파서의 &lt;code&gt;kind&lt;/code&gt; , &lt;code&gt;key&lt;/code&gt; 및 &lt;code&gt;val&lt;/code&gt; 필드는 해당 토큰에 대한 정보를 제공합니다. 토큰이 길거나 짧은 옵션 인 경우 &lt;code&gt;key&lt;/code&gt; 는 옵션 이름이고 &lt;code&gt;val&lt;/code&gt; 은 옵션 값 (제공된 경우)이거나 빈 문자열입니다. 인수의 경우 &lt;code&gt;key&lt;/code&gt; 필드에는 인수 자체가 포함되고 &lt;code&gt;val&lt;/code&gt; 은 사용되지 않습니다. 명령 줄 끝에 도달했는지 확인하려면 &lt;code&gt;kind&lt;/code&gt; 가 &lt;code&gt;cmdEnd&lt;/code&gt; 와 같은지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="5d10f6f6e4da7bf81dd537bc78c82cd345945246" translate="yes" xml:space="preserve">
          <source>For easier interoperability with other compiled languages such as C, retrieving the address of a &lt;code&gt;let&lt;/code&gt; variable, a parameter or a &lt;code&gt;for&lt;/code&gt; loop variable, the &lt;code&gt;unsafeAddr&lt;/code&gt; operation can be used:</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 변수, 매개 변수 또는 &lt;code&gt;for&lt;/code&gt; 루프 변수 의 주소를 검색하는 C와 같은 다른 컴파일 된 언어와의보다 쉬운 상호 운용성을 위해 &lt;code&gt;unsafeAddr&lt;/code&gt; 작업을 사용할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
