<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="12f69b768fbdb877106cba3b6d6afbd305a42b1c" translate="yes" xml:space="preserve">
          <source>will result in:</source>
          <target state="translated">결과 :</target>
        </trans-unit>
        <trans-unit id="2f2b51229d2d2167e0cc3202015392cc28ab8187" translate="yes" xml:space="preserve">
          <source>will return no commits when the two branches are equal.</source>
          <target state="translated">두 가지가 같으면 커밋을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7fb4c7e19f587f366fe3ea0e98028a92d8fea8e" translate="yes" xml:space="preserve">
          <source>will show a nice graphical representation of the resulting history.</source>
          <target state="translated">결과 기록의 멋진 그래픽 표현을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a5a8e7b047472640f5d146677e9c728928275e66" translate="yes" xml:space="preserve">
          <source>will show the list of commits made on the stable branch but not the master branch.</source>
          <target state="translated">마스터 브랜치가 아닌 안정적인 브랜치에서 이루어진 커밋 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="68545f3a6f4d69e42947665de20411f9ec15d387" translate="yes" xml:space="preserve">
          <source>will show this. Once you&amp;rsquo;ve edited the files to resolve the conflicts,</source>
          <target state="translated">이것을 보여줄 것입니다. 충돌을 해결하기 위해 파일을 편집 한 후에는</target>
        </trans-unit>
        <trans-unit id="97b06ba16f479d1bb2f14d02f495998e3aa43a36" translate="yes" xml:space="preserve">
          <source>will show what HEAD pointed to one week ago, not what the current branch pointed to one week ago. This allows you to see the history of what you&amp;rsquo;ve checked out.</source>
          <target state="translated">HEAD가 1 주일 전을 가리키는 것이 아니라 1 주일 전을 가리키는 것을 보여줍니다. 체크 아웃 한 내역을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c7766e6bd2c3044e5f437a985d8e97c1aaa2741" translate="yes" xml:space="preserve">
          <source>will show you graphically both of your branches (that&amp;rsquo;s what the &lt;code&gt;--all&lt;/code&gt; means: normally it will just show you your current &lt;code&gt;HEAD&lt;/code&gt;) and their histories. You can also see exactly how they came to be from a common source.</source>
          <target state="translated">그래픽으로 가지 모두를 표시합니다 (그 무엇의 &lt;code&gt;--all&lt;/code&gt; 수단 : 일반적으로 그것은 단지 당신에게 당신의 현재 표시됩니다 &lt;code&gt;HEAD&lt;/code&gt; )와 그 역사를. 또한 그들이 어떻게 일반적인 출처에서 왔는지 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88356df00c3516762073ccbdc78aa678f20cae5f" translate="yes" xml:space="preserve">
          <source>will tell you where it&amp;rsquo;s pointing. To get the list of branches you have, you can say</source>
          <target state="translated">어디를 가리키는 지 알려줄 것입니다. 가지고있는 지점 목록을 얻으려면 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cdd86cb78566c41c85784dc0a0c2629a62ca7ce" translate="yes" xml:space="preserve">
          <source>will tell you whether the contents of the project are the same at the two branches; in theory, however, it&amp;rsquo;s possible that the same project contents could have been arrived at by two different historical routes. You could compare the object names:</source>
          <target state="translated">프로젝트의 내용이 두 지점에서 동일한 지 여부를 알려줍니다. 그러나 이론적으로는 동일한 프로젝트 내용이 두 개의 서로 다른 역사적인 경로에 도달했을 수 있습니다. 객체 이름을 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9ee4c8cf1d80f9a0a5a4a11e832c20bacca676c" translate="yes" xml:space="preserve">
          <source>will try to use konqueror first. But this may fail (for example, if DISPLAY is not set) and in that case emacs' woman mode will be tried.</source>
          <target state="translated">먼저 Konqueror를 사용하려고합니다. 그러나 이것은 실패 할 수 있으며 (예를 들어, DISPLAY가 설정되지 않은 경우) emacs의 여성 모드가 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="f6031424c5b15149805cc3d0c8b0eac718e1d424" translate="yes" xml:space="preserve">
          <source>will update the index with any files that you&amp;rsquo;ve modified or removed and create a commit, all in one step.</source>
          <target state="translated">한 번에 수정하거나 제거한 파일로 색인을 업데이트하고 커밋을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9b84bddfaa68e5df6de8681c72c0df1fa4a7fa1b" translate="yes" xml:space="preserve">
          <source>will use HEAD to produce a gzipped tar archive in which each filename is preceded by &lt;code&gt;project/&lt;/code&gt;. The output file format is inferred from the output file extension if possible, see &lt;a href=&quot;git-archive&quot;&gt;git-archive[1]&lt;/a&gt; for details.</source>
          <target state="translated">HEAD를 사용하여 각 파일 이름 앞에 &lt;code&gt;project/&lt;/code&gt; 가있는 zip 압축 tar 아카이브를 생성합니다 . 출력 파일 형식은 가능한 경우 출력 파일 확장자에서 유추됩니다 . 자세한 내용 은 &lt;a href=&quot;git-archive&quot;&gt;git-archive [1]&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d00bc787a2d4b77c2ff5ea6fc53c8c29f15dc358" translate="yes" xml:space="preserve">
          <source>winmerge</source>
          <target state="translated">winmerge</target>
        </trans-unit>
        <trans-unit id="20800520495b2303a3ac17dd27fe3c4163987c1e" translate="yes" xml:space="preserve">
          <source>working directory &amp;rarr; index</source>
          <target state="translated">작업 디렉토리 &amp;rarr; 색인</target>
        </trans-unit>
        <trans-unit id="4eafbf4c3acd9084fd21be8ac9ae916a897b122b" translate="yes" xml:space="preserve">
          <source>working tree</source>
          <target state="translated">작업 트리</target>
        </trans-unit>
        <trans-unit id="94449c5bf46256cd2c8d8717f9940ed8cf221db3" translate="yes" xml:space="preserve">
          <source>worktree</source>
          <target state="translated">worktree</target>
        </trans-unit>
        <trans-unit id="efd3ab67ae8bdaac67f76d19bad0017021556659" translate="yes" xml:space="preserve">
          <source>worktree.guessRemote</source>
          <target state="translated">worktree.guessRemote</target>
        </trans-unit>
        <trans-unit id="5c46c9b5886a79e1bb6967377b51e67078ac410e" translate="yes" xml:space="preserve">
          <source>worktreepath</source>
          <target state="translated">worktreepath</target>
        </trans-unit>
        <trans-unit id="32d1d8cd691bd73eb0e8445a53eb45a6219cd631" translate="yes" xml:space="preserve">
          <source>worktrees</source>
          <target state="translated">worktrees</target>
        </trans-unit>
        <trans-unit id="917d24c19e6172d01ee58d4d910cf520abde5e00" translate="yes" xml:space="preserve">
          <source>worktrees/&amp;lt;id&amp;gt;/config.worktree</source>
          <target state="translated">worktrees/&amp;lt;id&amp;gt;/config.worktree</target>
        </trans-unit>
        <trans-unit id="7a2a4f1b20c8a2e59a305206002b8b028eaf5833" translate="yes" xml:space="preserve">
          <source>worktrees/&amp;lt;id&amp;gt;/gitdir</source>
          <target state="translated">worktrees/&amp;lt;id&amp;gt;/gitdir</target>
        </trans-unit>
        <trans-unit id="7dc15d067a8c70411dcc35bf1efd2caa26ebdc18" translate="yes" xml:space="preserve">
          <source>worktrees/&amp;lt;id&amp;gt;/locked</source>
          <target state="translated">worktrees/&amp;lt;id&amp;gt;/locked</target>
        </trans-unit>
        <trans-unit id="6e52918f32fd9eea83251e9bf09da6ae390c3eae" translate="yes" xml:space="preserve">
          <source>would be of roughly the same length. Finding the change which introduces a regression is thus reduced to a binary search: repeatedly generate and test new 'midpoint&amp;rsquo;s until the commit chain is of length one.</source>
          <target state="translated">대략 같은 길이입니다. 회귀를 도입하는 변경 사항을 찾는 것은 이진 검색으로 축소됩니다. 커밋 체인의 길이가 1이 될 때까지 새로운 '중간 점'을 반복적으로 생성하고 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="2176dfd0874fe19ae8bdc1313d3e537d33c3c4c7" translate="yes" xml:space="preserve">
          <source>would be of roughly the same length. Finding the change which introduces a regression is thus reduced to a binary search: repeatedly generate and test new 'midpoint&amp;rsquo;s until the commit chain is of length one. Cannot be combined with --first-parent.</source>
          <target state="translated">대략 같은 길이입니다. 따라서 회귀를 유발하는 변경을 찾는 것은 이진 검색으로 줄어 듭니다. 커밋 체인 길이가 1이 될 때까지 새로운 '중간 점'을 반복적으로 생성하고 테스트하십시오. --first-parent와 함께 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a0ebc00ce2803c4b05ae16c519fdb6afbeecd7c8" translate="yes" xml:space="preserve">
          <source>would be:</source>
          <target state="translated">될 것입니다 :</target>
        </trans-unit>
        <trans-unit id="ec462e1209bb81dd4d4da74d7cc622ecbd59d27e" translate="yes" xml:space="preserve">
          <source>would create the lightweight tag &lt;code&gt;refs/tags/938&lt;/code&gt; referring to whatever commit mark &lt;code&gt;:938&lt;/code&gt; references.</source>
          <target state="translated">커밋 마크 &lt;code&gt;:938&lt;/code&gt; 참조를 참조 하여 경량 태그 &lt;code&gt;refs/tags/938&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="0e64309207a65a066015e183c95df0e98fa9beef" translate="yes" xml:space="preserve">
          <source>would output something like:</source>
          <target state="translated">다음과 같이 출력됩니다 :</target>
        </trans-unit>
        <trans-unit id="17d8e6d8f0677b6f8b2c882d7facbbbc37143301" translate="yes" xml:space="preserve">
          <source>would remove them for you.</source>
          <target state="translated">당신을 위해 그들을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="a4d42effbae7f1dd903be5bc58250775e8fdb07f" translate="yes" xml:space="preserve">
          <source>would result in the removal of commits F and G:</source>
          <target state="translated">커밋 F와 G가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="e178c9aaffe5991230dd9ff28b8f996011875161" translate="yes" xml:space="preserve">
          <source>would result in:</source>
          <target state="translated">결과 :</target>
        </trans-unit>
        <trans-unit id="e1d0c6c1c29e6ad5164072a5b21340dca7fcb052" translate="yes" xml:space="preserve">
          <source>write</source>
          <target state="translated">write</target>
        </trans-unit>
        <trans-unit id="a6956dab1239c6c1fbc46a263df37854151bdad3" translate="yes" xml:space="preserve">
          <source>write, in the test suite, a test script that exposes the regression</source>
          <target state="translated">테스트 스위트에서 회귀를 노출시키는 테스트 스크립트 작성</target>
        </trans-unit>
        <trans-unit id="b51c03916d43845d38d787ba1177d97c35d6d8b0" translate="yes" xml:space="preserve">
          <source>write-tree</source>
          <target state="translated">write-tree</target>
        </trans-unit>
        <trans-unit id="b16c937fc5f3c005b0c3db817c6328aabab56313" translate="yes" xml:space="preserve">
          <source>xxdiff</source>
          <target state="translated">xxdiff</target>
        </trans-unit>
        <trans-unit id="edb0f5b1f639a3886e3180c47fe86c3a6a263842" translate="yes" xml:space="preserve">
          <source>yields</source>
          <target state="translated">yields</target>
        </trans-unit>
        <trans-unit id="bb7860b062b4c7f6477197562066897cfac86203" translate="yes" xml:space="preserve">
          <source>you can feed the following input to &lt;code&gt;--index-info&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;--index-info&lt;/code&gt; 에 다음 입력을 공급할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f512f3664f28acf3b646ac106562aabf5b3fd0fa" translate="yes" xml:space="preserve">
          <source>you can refer to 1b2e1d63ff by the name &quot;v2.5&quot;. If you intend to share this name with other people (for example, to identify a release version), you should create a &quot;tag&quot; object, and perhaps sign it; see &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; for details.</source>
          <target state="translated">&quot;v2.5&quot;라는 이름으로 1b2e1d63ff를 참조 할 수 있습니다. 이 이름을 다른 사람과 공유하려면 (예 : 릴리스 버전 식별) &quot;태그&quot;객체를 작성하고 서명해야합니다. 자세한 내용은 &lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f21aea3b773b85ed15a02e0520c4596660ede62d" translate="yes" xml:space="preserve">
          <source>you can set the filemode to true with</source>
          <target state="translated">당신은 파일 모드를 true로 설정할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="7dc43142eea4044676647e6bd97cb9f7eb183068" translate="yes" xml:space="preserve">
          <source>you can tell about the change after the fact.</source>
          <target state="translated">당신은 사실 후에 변화에 대해 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55ae0d2f317b0ae71a87fb90b36301e7c9181a34" translate="yes" xml:space="preserve">
          <source>you could run &lt;code&gt;git rebase master topic&lt;/code&gt;, to bring yourself up to date before your topic is ready to be sent upstream. This would result in falling back to a three-way merge, and it would conflict the same way as the test merge you resolved earlier. &lt;code&gt;git rerere&lt;/code&gt; will be run by &lt;code&gt;git rebase&lt;/code&gt; to help you resolve this conflict.</source>
          <target state="translated">&lt;code&gt;git rebase master topic&lt;/code&gt; 을 실행 하여 주제가 업스트림으로 전송되기 전에 자신을 최신 상태로 유지할 수 있습니다. 결과적으로 3 방향 병합으로 돌아가고 앞에서 해결 한 테스트 병합과 같은 방식으로 충돌합니다. &lt;code&gt;git rerere&lt;/code&gt; 는 &lt;code&gt;git rebase&lt;/code&gt; 에 의해 실행 되어이 충돌을 해결하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="ce05848d37149bd7a63386fce7bea6475bab3138" translate="yes" xml:space="preserve">
          <source>you have now created two files in your working tree (aka &lt;code&gt;working directory&lt;/code&gt;), but to actually check in your hard work, you will have to go through two steps:</source>
          <target state="translated">작업 트리에 두 개의 파일 (일명 &lt;code&gt;working directory&lt;/code&gt; )을 만들었지 만 실제로 열심히 작업을 확인하려면 다음 두 단계를 거쳐야합니다.</target>
        </trans-unit>
        <trans-unit id="0b8f2b63647cf0b4cf2e4ae1c829a8efa59acde9" translate="yes" xml:space="preserve">
          <source>you need to tell Git if you added a new file; removal and modification will be caught if you do &lt;code&gt;git commit -a&lt;/code&gt; later.</source>
          <target state="translated">새 파일을 추가했다면 Git에 알려야한다. 나중에 &lt;code&gt;git commit -a&lt;/code&gt; 을 수행하면 제거 및 수정이 포착됩니다 .</target>
        </trans-unit>
        <trans-unit id="e6782f0c216c9a85ff68244a10ed13eb161478ca" translate="yes" xml:space="preserve">
          <source>you run into problems with deletions whenever the user is simply trying to rename files (because attempting to delete files that don&amp;rsquo;t exist looks like a no-op; it takes some chicanery to remap deletes across file renames when the renames happen via arbitrary user-provided shell)</source>
          <target state="translated">사용자가 단순히 파일 이름을 바꾸려고 할 때마다 삭제 문제가 발생합니다 (존재하지 않는 파일을 삭제하려고 시도하면 no-op처럼 보입니다. 임의의 이름이 임의의 사용자를 통해 발생할 때 파일 이름을 바꾸면 삭제를 다시 매핑하는 데 약간의 시간이 걸립니다) 제공 쉘)</target>
        </trans-unit>
        <trans-unit id="e804abbe97d54cb4bc4f8871e020be4bbbadaebf" translate="yes" xml:space="preserve">
          <source>you try to unset an option which does not exist (ret=5),</source>
          <target state="translated">존재하지 않는 옵션을 설정 해제하려고 시도합니다 (ret = 5).</target>
        </trans-unit>
        <trans-unit id="fe0543b68420ac22d2548c7e91b972d8572fa97d" translate="yes" xml:space="preserve">
          <source>you try to unset/set an option for which multiple lines match (ret=5), or</source>
          <target state="translated">여러 줄이 일치하는 옵션 (ret = 5)을 설정 해제 / 설정하려고 시도하거나</target>
        </trans-unit>
        <trans-unit id="efa92f0afbb0477eac8bafddb9f3892f7f60093d" translate="yes" xml:space="preserve">
          <source>you try to use an invalid regexp (ret=6).</source>
          <target state="translated">잘못된 정규 표현식을 사용하려고합니다 (ret = 6).</target>
        </trans-unit>
        <trans-unit id="deeffff664f882f6292365d3f4355f0fd1f2950a" translate="yes" xml:space="preserve">
          <source>you walk the index in order, and ignore all entries of stage 0, since they&amp;rsquo;ve already been done.</source>
          <target state="translated">인덱스를 순서대로 진행하고 이미 완료되었으므로 0 단계의 모든 항목을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="e40858f3b1ea33484ad870e370d3ce3403d6e862" translate="yes" xml:space="preserve">
          <source>you will end up with the fixed history</source>
          <target state="translated">당신은 고정 된 역사로 끝날 것입니다</target>
        </trans-unit>
        <trans-unit id="3feccc2142131c34ccba809c47212fd9f28c1cb4" translate="yes" xml:space="preserve">
          <source>you would get an output like this:</source>
          <target state="translated">다음과 같은 출력을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="0bae78553462e7a34534afd02b3496453c11a90d" translate="yes" xml:space="preserve">
          <source>you&amp;rsquo;ll get a list of all existing branches:</source>
          <target state="translated">당신은 모든 기존 지점의 목록을 얻을 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="38aa53de31c04bcfae9163cc23b7963ed9cf90f7" translate="yes" xml:space="preserve">
          <source>zebra</source>
          <target state="translated">zebra</target>
        </trans-unit>
        <trans-unit id="f13e27693c85aed522df8c3fcb0bb0110ca54e14" translate="yes" xml:space="preserve">
          <source>zip</source>
          <target state="translated">zip</target>
        </trans-unit>
        <trans-unit id="1abe74473dcd47570993fe227357e8340418b7f4" translate="yes" xml:space="preserve">
          <source>~/.git-credentials</source>
          <target state="translated">~/.git-credentials</target>
        </trans-unit>
        <trans-unit id="9e794d254d2ea7f1b185c970ca6ed90747ac8823" translate="yes" xml:space="preserve">
          <source>~/.gitconfig</source>
          <target state="translated">~/.gitconfig</target>
        </trans-unit>
        <trans-unit id="afde40b275af0ad36ff7b6e7f32ecc59bab0a691" translate="yes" xml:space="preserve">
          <source>~/.gitconfig push.pushoption = c</source>
          <target state="translated">~ / .gitconfig push.pushoption = c</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
